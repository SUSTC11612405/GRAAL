class C{  @Override public void clearBuffer() throws IOException {  if (writer == null) {    this.clear();  }}  }
class C{  public byte[] windowNaf(byte width,BigInteger k){  byte[] wnaf=new byte[k.bitLength() + 1];  short pow2wB=(short)(1 << width);  BigInteger pow2wBI=BigInteger.valueOf(pow2wB);  int i=0;  int length=0;  while (k.signum() > 0) {    if (k.testBit(0)) {      BigInteger remainder=k.mod(pow2wBI);      if (remainder.testBit(width - 1)) {        wnaf[i]=(byte)(remainder.intValue() - pow2wB);      } else {        wnaf[i]=(byte)remainder.intValue();      }      k=k.subtract(BigInteger.valueOf(wnaf[i]));      length=i;    } else {      wnaf[i]=0;    }    k=k.shiftRight(1);    i++;  }  length++;  byte[] wnafShort=new byte[length];  System.arraycopy(wnaf,0,wnafShort,0,length);  return wnafShort;}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(hostAddr).toString();}  }
class C{  public final void userPrintln(String message){  userArea.println(message);}  }
class C{  @Override public Subject authenticate(Object credentials){  if (finalizedPhase || credentials == null) {    throw new SecurityException();  }  Object c[]=(Object[])credentials;  String authcID=(String)c[0];  String password=(String)c[1];  if (authcID == null) {    logger.trace("User name is Null");    throw new SecurityException();  }  if (password == null) {    logger.trace("User password is Null ");    throw new SecurityException();  }  logger.trace("UserName = %s",authcID);  JmxClientConnection jmxClientConnection;  try {    jmxClientConnection=bind(authcID,password);  } catch (  Exception e) {    logger.traceException(e);    SecurityException se=new SecurityException(e.getMessage());    throw se;  }  PluginConfigManager pluginManager=DirectoryServer.getPluginConfigManager();  PluginResult.PostConnect pluginResult=pluginManager.invokePostConnectPlugins(jmxClientConnection);  if (!pluginResult.continueProcessing()) {    jmxClientConnection.disconnect(pluginResult.getDisconnectReason(),pluginResult.sendDisconnectNotification(),pluginResult.getErrorMessage());    if (logger.isTraceEnabled()) {      logger.trace("Disconnect result from post connect plugins: " + "%s: %s ",pluginResult.getDisconnectReason(),pluginResult.getErrorMessage());    }    throw new SecurityException();  }  Subject s=new Subject();  s.getPrincipals().add(new OpendsJmxPrincipal(authcID));  s.getPrivateCredentials().add(new Credential(jmxClientConnection));  return s;}  }
class C{  ConcurrentSkipListMap.Node<K,V> loNode(Comparator<? super K> cmp){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,GT | EQ,cmp); else   return m.findNear(lo,GT,cmp);}  }
class C{  protected boolean checkIfUnmodifiedSince(HttpServletRequest request,HttpServletResponse response,WebResource resource) throws IOException {  try {    long lastModified=resource.getLastModified();    long headerValue=request.getDateHeader("If-Unmodified-Since");    if (headerValue != -1) {      if (lastModified >= (headerValue + 1000)) {        response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);        return false;      }    }  } catch (  IllegalArgumentException illegalArgument) {    return true;  }  return true;}  }
class C{  public void ssoTokenChanged(SSOTokenEvent tokenEvent){  String tokenID=tokenEvent.getToken().getTokenID().toString();  if (debug.messageEnabled()) {    debug.message("ResourceResultCache.ssoTokenChanged():" + "for tokenID=" + SECRET_MASK);  }  try {synchronized (resultCache) {      Set services=(Set)resultCache.keySet();      Iterator serviceIter=services.iterator();      while (serviceIter.hasNext()) {        String serviceName=(String)serviceIter.next();        Map resourceTokenIDsMap=(Map)resultCache.get(serviceName);synchronized (resourceTokenIDsMap) {          Set resources=(Set)resourceTokenIDsMap.keySet();          Iterator resourceIter=resources.iterator();          while (resourceIter.hasNext()) {            String resource=(String)resourceIter.next();            Map tokenIDScopesMap=(Map)resourceTokenIDsMap.get(resource);            if (tokenIDScopesMap != null) {              tokenIDScopesMap.remove(tokenID);            }            boolean tokenPresent=tokenRegistry.remove(tokenID);            if ((tokenPresent == false) && (debug.messageEnabled())) {              debug.message("ResourceResultCache. tokenID= " + SECRET_MASK + " not found in Token Registry.");            }            if (debug.messageEnabled()) {              debug.message("ResourceResultCache." + "ssoTokenChanged():" + "removing cache results for "+ "tokenID=" + SECRET_MASK + ":serviceName="+ serviceName+ ":resource="+ resource);            }          }        }      }    }  } catch (  Throwable t) {    if (debug.warningEnabled()) {      debug.warning("ResourceResultCache.ssoTokenChanged():" + "Exception caught",t);    }  }}  }
class C{  protected BlockElement(){}  }
class C{  protected void removeUpdate(DefaultDocumentEvent chng){  removed.removeAllElements();  BranchElement map=(BranchElement)getDefaultRootElement();  int offset=chng.getOffset();  int length=chng.getLength();  int line0=map.getElementIndex(offset);  int line1=map.getElementIndex(offset + length);  if (line0 != line1) {    for (int i=line0; i <= line1; i++) {      removed.addElement(map.getElement(i));    }    int p0=map.getElement(line0).getStartOffset();    int p1=map.getElement(line1).getEndOffset();    Element[] aelems=new Element[1];    aelems[0]=createLeafElement(map,null,p0,p1);    Element[] relems=new Element[removed.size()];    removed.copyInto(relems);    ElementEdit ee=new ElementEdit(map,line0,relems,aelems);    chng.addEdit(ee);    map.replace(line0,relems.length,aelems);  } else {    Element line=map.getElement(line0);    if (!line.isLeaf()) {      Element leaf=line.getElement(line.getElementIndex(offset));      if (Utilities.isComposedTextElement(leaf)) {        Element[] aelem=new Element[1];        aelem[0]=createLeafElement(map,null,line.getStartOffset(),line.getEndOffset());        Element[] relem=new Element[1];        relem[0]=line;        ElementEdit ee=new ElementEdit(map,line0,relem,aelem);        chng.addEdit(ee);        map.replace(line0,1,aelem);      }    }  }  super.removeUpdate(chng);}  }
class C{  public void addAttributes(AttributeSet attr){  StyleContext context=StyleContext.this;  attributes=context.addAttributes(attributes,attr);  fireStateChanged();}  }
class C{  public DelegationException(Throwable nestedException){  super(nestedException);}  }
class C{  public MalformedURIException(){  super();}  }
class C{  private void load(String[] arguments) throws Exception {  String methodName="load";  Object param[];  Class<?> paramTypes[];  if (arguments == null || arguments.length == 0) {    paramTypes=null;    param=null;  } else {    paramTypes=new Class[1];    paramTypes[0]=arguments.getClass();    param=new Object[1];    param[0]=arguments;  }  Method method=catalinaDaemon.getClass().getMethod(methodName,paramTypes);  if (log.isDebugEnabled())   log.debug("Calling startup class " + method);  method.invoke(catalinaDaemon,param);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrNamespaceURI;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddressNotNull",testAddr);  addrAttr=testAddr.getAttributeNodeNS("http://www.nist.gov","domestic");  attrNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",attrNamespaceURI);}  }
class C{  public BorderUIResource(Border delegate){  if (delegate == null) {    throw new IllegalArgumentException("null border delegate argument");  }  this.delegate=delegate;}  }
class C{  public static String URLDecode(String str,String enc,boolean isQuery){  if (str == null)   return (null);  byte[] bytes=null;  try {    if (enc == null) {      bytes=str.getBytes(StandardCharsets.ISO_8859_1);      enc="ISO-8859-1";    } else {      bytes=str.getBytes(B2CConverter.getCharset(enc));    }  } catch (  UnsupportedEncodingException uee) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("uDecoder.urlDecode.uee",enc),uee);    }  }  return URLDecode(bytes,enc,isQuery);}  }
class C{  public void fetchVideoWithURL(@NonNull String videoURL,@Nullable String referrer,@NonNull final OnVimeoExtractionListener listener){  if (videoURL.length() == 0) {    listener.onFailure(new IllegalArgumentException("Video URL cannot be empty"));    return;  }  VimeoParser parser=new VimeoParser(videoURL);  if (!parser.isVimeoURLValid()) {    listener.onFailure(new IllegalArgumentException("Vimeo URL is not valid"));    return;  }  String identifier=parser.getExtractedIdentifier();  fetchVideoWithIdentifier(identifier,referrer,listener);}  }
class C{  public String versionRevision(){  return properties.getProperty("scm.revision");}  }
class C{  public int hashCode(){  return uid.hashCode();}  }
class C{  public boolean containsKey(Object key){  return getNode(hash(key),key) != null;}  }
class C{  private void replaceStaleEntry(ThreadLocal<?> key,Object value,int staleSlot){  Entry[] tab=table;  int len=tab.length;  Entry e;  int slotToExpunge=staleSlot;  for (int i=prevIndex(staleSlot,len); (e=tab[i]) != null; i=prevIndex(i,len))   if (e.get() == null)   slotToExpunge=i;  for (int i=nextIndex(staleSlot,len); (e=tab[i]) != null; i=nextIndex(i,len)) {    ThreadLocal<?> k=e.get();    if (k == key) {      e.value=value;      tab[i]=tab[staleSlot];      tab[staleSlot]=e;      if (slotToExpunge == staleSlot)       slotToExpunge=i;      cleanSomeSlots(expungeStaleEntry(slotToExpunge),len);      return;    }    if (k == null && slotToExpunge == staleSlot)     slotToExpunge=i;  }  tab[staleSlot].value=null;  tab[staleSlot]=new Entry(key,value);  if (slotToExpunge != staleSlot)   cleanSomeSlots(expungeStaleEntry(slotToExpunge),len);}  }
class C{  public void printStackTrace(PrintWriter pw){  pw.println(fetchStackTrace());}  }
class C{  public static <T>JList<T> makeJList(TextStyle textStyle){  final JList<T> list=new JList<>();  list.setCellRenderer(makeCellRenderer(textStyle));  return list;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public void connectToHost(String bindDN,String bindPassword) throws LDAPConnectionException {  connectToHost(bindDN,bindPassword,new AtomicInteger(1),0);}  }
class C{  public INV_OBJREF(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public boolean verify(SignerInformationVerifier verifier) throws CMSException {  Time signingTime=getSigningTime();  if (verifier.hasAssociatedCertificate()) {    if (signingTime != null) {      X509CertificateHolder dcv=verifier.getAssociatedCertificate();      if (!dcv.isValidOn(signingTime.getDate())) {        throw new CMSVerifierCertificateNotValidException("verifier not valid at signingTime");      }    }  }  return doVerify(verifier);}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  public static String toJSONString(Object value){  if (value == null)   return "null";  if (value instanceof String)   return "\"" + escape((String)value) + "\"";  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Number)   return value.toString();  if (value instanceof Boolean)   return value.toString();  if ((value instanceof JSONAware))   return ((JSONAware)value).toJSONString();  if (value instanceof Map)   return JSONObject.toJSONString((Map)value);  if (value instanceof List)   return JSONArray.toJSONString((List)value);  return value.toString();}  }
class C{  public static void logBindRequest(BindOperation bindOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logBindRequest(bindOperation);  }}  }
class C{  private long readOnDiskLastRotationTime(){  try {    final File file=retrieveLastRotationTimeFile();    if (file != null) {      final String filename=file.getName();      final String value=filename.substring(LAST_ROTATION_TIME_FILE_PREFIX.length(),filename.length() - LAST_ROTATION_TIME_FILE_SUFFIX.length());      return Long.valueOf(value);    }  } catch (  Exception e) {    logger.trace(LocalizableMessage.raw("Error when retrieving last log file rotation time from file"),e);  }  return timeService.now();}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  FSSAMLServiceViewBean vb=(FSSAMLServiceViewBean)getViewBean(FSSAMLServiceViewBean.class);  backTrail();  unlockPageTrailForSwapping();  passPgSessionMap(vb);  vb.setValues();  vb.forwardTo(getRequestContext());}  }
class C{  static boolean usingOcean(){  return (getCurrentTheme() instanceof OceanTheme);}  }
class C{  public TitledBorder(Border border,String title,int titleJustification,int titlePosition){  this(border,title,titleJustification,titlePosition,null,null);}  }
class C{  public void test_applyLocalizedPatternLjava_lang_String(){  DecimalFormat format=new DecimalFormat();  try {    format.applyLocalizedPattern("#.#");    assertEquals("Wrong pattern 1","#0.#",format.toLocalizedPattern());    format.applyLocalizedPattern("#.");    assertEquals("Wrong pattern 2","#0.",format.toLocalizedPattern());    format.applyLocalizedPattern("#");    assertEquals("Wrong pattern 3","#",format.toLocalizedPattern());    format.applyLocalizedPattern(".#");    assertEquals("Wrong pattern 4","#.0",format.toLocalizedPattern());    try {      format.applyLocalizedPattern("'#,#:#0.0#;(#)");      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }    try {      format.applyLocalizedPattern((String)null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  CardLayout cardLayout=new CardLayout();  mainPanel=new JPanel(cardLayout);  mainPanel.setOpaque(false);  noEntryPanel.setMessage(INFO_CTRL_PANEL_GENERAL_MONITORING_NO_ITEM_SELECTED.get());  mainPanel.add(Utilities.createBorderLessScrollBar(noEntryPanel),noEntryPanelTitle);  mainPanel.add(Utilities.createBorderLessScrollBar(rootPanel),rootPanelTitle);  mainPanel.add(Utilities.createBorderLessScrollBar(workQueuePanel),workQueuePanelTitle);  mainPanel.add(Utilities.createBorderLessScrollBar(entryCachesPanel),entryCachesPanelTitle);  mainPanel.add(Utilities.createBorderLessScrollBar(systemInformationPanel),systemInformationPanelTitle);  mainPanel.add(Utilities.createBorderLessScrollBar(javaInformationPanel),javaInformationPanelTitle);  if (!isOEMVersion()) {    mainPanel.add(jeMonitoringPanel,jeMonitoringPanelTitle);  }  mainPanel.add(pdbMonitoringPanel,pdbMonitoringPanelTitle);  cardLayout.show(mainPanel,noEntryPanelTitle);  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  add(mainPanel,gbc);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.IssuerElement createIssuerElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.IssuerElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatanomodificationallowederrEE.class,args);}  }
class C{  @Override public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object object) throws IllegalArgumentException {  broadcaster.addNotificationListener(listener,filter,object);}  }
class C{  public void removeAttribute(String name){  int i=names.indexOf(name);  if (i >= 0) {    names.removeElementAt(i);    types.removeElementAt(i);    values.removeElementAt(i);  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    serverTransaction=sipProvider.getNewServerTransaction(request);    dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);    dialog.disableSequenceNumberValidation();  } catch (  Exception e) {    e.printStackTrace();  }  try {    Response okResponse=messageFactory.createResponse(Response.OK,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return optimizedDrawingPossible;}  }
class C{  public void runTest() throws Throwable {  Document doc;  int nodeType;  doc=(Document)load("hc_staff",false);  nodeType=(int)doc.getNodeType();  assertEquals("nodeDocumentNodeTypeAssert1",9,nodeType);}  }
class C{  public String jmxSslPassword(){  return values.jmxSslPassword;}  }
class C{  public void addEditActionListener(ActionListener listener){  editButton.addActionListener(listener);  iconButton.addActionListener(listener);}  }
class C{  private void removeStates(int count){  for (int i=0; i < count; i++)   playerStates.remove(0);}  }
class C{  public String transform(String password){  return password;}  }
class C{  public static String removeLeft(final String value,final String prefix,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  validate(prefix,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (caseSensitive) {    return value.startsWith(prefix) ? value.substring(prefix.length()) : value;  }  return value.toLowerCase().startsWith(prefix.toLowerCase()) ? value.substring(prefix.length()) : value;}  }
class C{  private void checkRegisterForWrite(){  ob.checkRegisterForWrite();}  }
class C{  private void checkIntegerAttr(String attrName,long attrValue,long lowerBound,long upperBound) throws DirectoryException {  if (attrValue < lowerBound) {    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_CONFIG_ATTR_INT_BELOW_LOWER_BOUND.get(attrName,attrValue,lowerBound));  }  if (attrValue > upperBound) {    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_CONFIG_ATTR_INT_ABOVE_UPPER_BOUND.get(attrName,attrValue,upperBound));  }}  }
class C{  public boolean bool(){  return m_val;}  }
class C{  public void testConnect_ClosedChannelException() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.connect(localAddr1);    fail("Should throw ClosedChannelException.");  } catch (  ClosedChannelException e) {  }}  }
class C{  public Bed(BlockFace direction){  this();  setFacingDirection(direction);}  }
class C{  public void clear(){  if (arrayTable != null) {    arrayTable.clear();  }}  }
class C{  public <T>List<T> createServiceObjects(String... descriptorPaths){  try {    ServiceEntry.initDefaultOrder();    TreeMap<ServiceEntry,T> serviceMap=new TreeMap<ServiceEntry,T>();    for (    String descriptor : descriptorPaths) {      readServiceDefinitions(serviceMap,descriptor);    }    ArrayList<T> ret=new ArrayList<T>();    for (    T service : serviceMap.values()) {      ret.add(service);    }    return ret;  }  finally {    ServiceEntry.removeDefaultOrder();  }}  }
class C{  public void forwardTo(RequestContext context){  PWResetSuccessModel model=(PWResetSuccessModel)getModel();  ISLocaleContext localeContext=new ISLocaleContext();  localeContext.setLocale(context.getRequest());  java.util.Locale locale=localeContext.getLocale();  model.setUserLocale(locale.toString());  if (resetMsg == null || resetMsg.length() == 0) {    PWResetUserValidationViewBean vb=(PWResetUserValidationViewBean)getViewBean(PWResetUserValidationViewBean.class);    vb.forwardTo(context);  } else {    super.forwardTo(context);  }}  }
class C{  public void handleTblResourceComparatorButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getAllValues();    onBeforeDisplayProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SCPolicyResourceComparatorAddViewBean vb=(SCPolicyResourceComparatorAddViewBean)getViewBean(SCPolicyResourceComparatorAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  private boolean nodeEquals(Tree<E> thisNode,Tree<E> thatNode){  int nodeCount=thisNode.children.size();  if (!(nodeCount == thatNode.children.size())) {    return false;  }  if (!(thisNode.item == null ? thatNode.item == null : thisNode.item.equals(thatNode.item))) {    return false;  }  boolean equals=true;  int i=0;  while (equals && i < nodeCount) {    equals=nodeEquals(thisNode.children.get(i),thatNode.children.get(i));    i++;  }  return equals;}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  try {    AuthPropertiesModel model=(AuthPropertiesModel)getModel();    Map original=model.getValues();    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);    model.setValues(ps.getAttributeValues(original,true,model));    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.profile.updated");  } catch (  AMConsoleException a) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",a.getMessage());  }  forwardTo();}  }
class C{  public SAMLResponderException(Throwable t){  super(t);}  }
class C{  private void populateDB() throws Exception {  TestCaseUtils.clearBackend("userRoot","dc=example,dc=com");  TestCaseUtils.addEntries("dn: uid=albert.zimmerman,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: albert.zimmerman","givenName: Albert","sn: Zimmerman","cn: Albert Zimmerman","","dn: uid=albert.smith,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: albert.smith","givenName: Albert","sn: Smith","cn: Albert Smith","","dn: uid=aaron.zimmerman,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: albert.zimmerman","givenName: Aaron","givenName: Zeke","sn: Zimmerman","cn: Aaron Zimmerman","","dn: uid=mary.jones,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: mary.jones","givenName: Mary","sn: Jones","cn: Mary Jones","","dn: uid=margaret.jones,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: margaret.jones","givenName: Margaret","givenName: Maggie","sn: Jones","sn: Smith","cn: Maggie Jones-Smith","","dn: uid=aaccf.johnson,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: aaccf.johnson","givenName: Aaccf","sn: Johnson","cn: Aaccf Johnson","","dn: uid=sam.zweck,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: sam.zweck","givenName: Sam","sn: Zweck","cn: Sam Zweck","","dn: uid=lowercase.mcgee,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: lowercase.mcgee","givenName: lowercase","sn: mcgee","cn: lowercase mcgee","","dn: uid=zorro,dc=example,dc=com","objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: zorro","sn: Zorro","cn: Zorro");}  }
class C{  private <C extends ConfigurationClient,S extends Configuration>void processRelation(ManagedObjectPath<?,?> path,InstantiableRelationDefinition<C,S> r){  AbstractManagedObjectDefinition<C,S> d=r.getChildDefinition();  helpHandler.registerManagedObjectDefinition(d);  processPath(path.child(r,d,"DUMMY"));  for (  AbstractManagedObjectDefinition<? extends C,? extends S> c : d.getAllChildren()) {    helpHandler.registerManagedObjectDefinition(c);    processPath(path.child(r,c,"DUMMY"));  }}  }
class C{  public static String geServerBaseURL(HttpServletRequest request){  String uri=request.getRequestURI();  int index=uri.indexOf("/",1);  if (index != -1) {    uri=uri.substring(0,index);  }  return request.getScheme() + "://" + request.getServerName()+ ":"+ request.getServerPort()+ uri;}  }
class C{  public boolean check_trace(ShapeTile p_shape,int p_layer,NetNosList p_net_no_arr,int p_cl_class,Set<BrdAbitPin> p_contact_pins){  if (!p_shape.is_contained_in(bounding_box))   return false;  AwtreeShapeSearch default_tree=search_tree_manager.get_default_tree();  Collection<AwtreeFindEntry> tree_entries=default_tree.find_overlap_tree_entries_with_clearance(p_shape,p_layer,NetNosList.EMPTY,p_cl_class);  for (  AwtreeFindEntry curr_tree_entry : tree_entries) {    if (!(curr_tree_entry.object instanceof BrdItem))     continue;    BrdItem curr_item=(BrdItem)curr_tree_entry.object;    if (p_contact_pins != null) {      if (p_contact_pins.contains(curr_item))       continue;      if (curr_item instanceof BrdAbitPin) {        return false;      }    }    boolean is_obstacle=p_net_no_arr.is_trace_obstacle(curr_item);    if (is_obstacle && (curr_item instanceof BrdTracep) && p_contact_pins != null) {      ShapeTile intersection=null;      for (      BrdAbitPin curr_contact_pin : p_contact_pins) {        if (curr_contact_pin.net_count() <= 1 || !curr_contact_pin.shares_net(curr_item))         continue;        if (intersection == null) {          ShapeTile obstacle_trace_shape=curr_item.tile_shape_get(curr_tree_entry.shape_index_in_object);          intersection=p_shape.intersection(obstacle_trace_shape);        }        ShapeTile pin_shape=curr_contact_pin.get_tile_shape_on_layer(p_layer);        if (pin_shape.contains_approx(intersection)) {          is_obstacle=false;          break;        }      }    }    if (is_obstacle)     return false;  }  return true;}  }
class C{  public void logDisconnect(ClientConnection clientConnection,DisconnectReason disconnectReason,LocalizableMessage message){}  }
class C{  public void paintTreeBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean isColor(){  return !this.isStyle && this != RESET;}  }
class C{  public static boolean isAbsoluteURI(String systemId){  if (isWindowsAbsolutePath(systemId)) {    return false;  }  final int fragmentIndex=systemId.indexOf('#');  final int queryIndex=systemId.indexOf('?');  final int slashIndex=systemId.indexOf('/');  final int colonIndex=systemId.indexOf(':');  int index=systemId.length() - 1;  if (fragmentIndex > 0)   index=fragmentIndex;  if ((queryIndex > 0) && (queryIndex < index))   index=queryIndex;  if ((slashIndex > 0) && (slashIndex < index))   index=slashIndex;  return ((colonIndex > 0) && (colonIndex < index));}  }
class C{  public boolean swapBuffers(){  boolean result=mEglCore.swapBuffers(mEGLSurface);  if (!result) {    Log.d(TAG,"WARNING: swapBuffers() failed");  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildnode.class,args);}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(PGTITLE,CCPageTitle.class);  registerChild(SEC_MH_COMMON,CCSecondaryMasthead.class);  registerChild(PROPERTY_ATTRIBUTE,AMPropertySheet.class);  ptModel.registerChildren(this);  propertySheetModel.registerChildren(this);}  }
class C{  public ModifyDNOperation processModifyDN(ByteString rawEntryDN,ByteString rawNewRDN,boolean deleteOldRDN,ByteString rawNewSuperior,List<Control> controls){  ModifyDNOperationBasis modifyDNOperation=new ModifyDNOperationBasis(this,nextOperationID(),nextMessageID(),controls,rawEntryDN,rawNewRDN,deleteOldRDN,rawNewSuperior);  modifyDNOperation.setInternalOperation(true);  modifyDNOperation.run();  return modifyDNOperation;}  }
class C{  public EventObject(Object source){  if (source == null) {    throw new IllegalArgumentException("source == null");  }  this.source=source;}  }
class C{  protected final void notifyDataProviderEventOccurred(final DataProviderEvent event){  for (  final DataProviderEventListener listener : eventListeners) {    try {      listener.handleDataProviderEvent(event);    } catch (    final Exception e) {      debugLogger.trace("Unexpected error occurred while invoking listener",e);    }  }}  }
class C{  public static void geojsonType(GeoJSON value,String type,String name) throws TurfException {  if (TextUtils.isEmpty(type) || TextUtils.isEmpty(name)) {    throw new TurfException("Type and name required");  }  if (value == null || !value.getType().equals(type)) {    throw new TurfException("Invalid input to " + name + ": must be a "+ type+ ", given "+ value.getType());  }}  }
class C{  public void test_commonTest_02(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  String defaultAlgorithm=Security.getProperty("ssl.KeyManagerFactory.algorithm");  try {    KeyManagerFactory kmf=KeyManagerFactory.getInstance(defaultAlgorithm);    char[] pass="password".toCharArray();    kmf.init(null,pass);    KeyManager[] km=kmf.getKeyManagers();    defaultAlgorithm=Security.getProperty("ssl.TrustManagerFactory.algorithm");    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(defaultAlgorithm);    KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);    trustMF.init(ks);    TrustManager[] tm=trustMF.getTrustManagers();    SecureRandom sr=SecureRandom.getInstance("SHA1PRNG");    ssl.engineInit(km,tm,sr);  } catch (  Exception ex) {    fail(ex + " unexpected exception");  }  try {    assertNotNull("Subtest_01: Object is NULL",ssl.engineCreateSSLEngine());    SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",1080);    assertNotNull("Subtest_02: Object is NULL",sleng);    assertEquals(sleng.getPeerPort(),1080);    assertEquals(sleng.getPeerHost(),"localhost");    assertNull("Subtest_03: Object not NULL",ssl.engineGetClientSessionContext());    assertNull("Subtest_04: Object not NULL",ssl.engineGetServerSessionContext());    assertNull("Subtest_05: Object not NULL",ssl.engineGetServerSocketFactory());    assertNull("Subtest_06: Object not NULL",ssl.engineGetSocketFactory());  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  public void addNotify(){  super.addNotify();  firePropertyChange("ancestor",null,getParent());  registerWithKeyboardManager(false);  registerNextFocusableComponent();}  }
class C{  public boolean isFulfilled(){  if (requiredExtensions == null) {    return true;  }  Iterator<Extension> it=requiredExtensions.iterator();  while (it.hasNext()) {    Extension ext=it.next();    if (!ext.isFulfilled())     return false;  }  return true;}  }
class C{  public boolean isRunning(){  return timerQueue().containsTimer(this);}  }
class C{  public static void executeModifiableVariableModification(ModifiableVariableHolder object,Field field){  try {    field.setAccessible(true);    ModifiableVariable mv=(ModifiableVariable)field.get(object);    if (mv == null) {      mv=(ModifiableVariable)field.getType().getDeclaredConstructors()[0].newInstance();    }    mv.createRandomModificationAtRuntime();    LOGGER.debug("Modifying field {} of type {} from the following class: {} ",field.getName(),field.getType(),object.getClass().getSimpleName());    field.set(object,mv);  } catch (  IllegalAccessException|IllegalArgumentException|InstantiationException|InvocationTargetException ex) {    throw new ModificationException(ex.getLocalizedMessage(),ex);  }}  }
class C{  String cleanSelectorString(String selector){  boolean lastWasSpace=true;  for (int counter=0, maxCounter=selector.length(); counter < maxCounter; counter++) {switch (selector.charAt(counter)) {case ' ':      if (lastWasSpace) {        return _cleanSelectorString(selector);      }    lastWasSpace=true;  break;case '\n':case '\r':case '\t':return _cleanSelectorString(selector);default :lastWasSpace=false;}}if (lastWasSpace) {return _cleanSelectorString(selector);}return selector;}  }
class C{  public static String convertFromBoolean(boolean value){  return value ? XMPConst.TRUESTR : XMPConst.FALSESTR;}  }
class C{  private void removeLoginPrompt(Request req){  Form query=req.getResourceRef().getQueryAsForm();  Parameter param=query.getFirst(PROMPT);  if (param != null && param.getValue() != null) {    String newValue=param.getValue().toLowerCase().replace(OpenIdPrompt.PROMPT_LOGIN,"").trim();    param.setValue(newValue);  }  req.getResourceRef().setQuery(query.getQueryString());}  }
class C{  public boolean write(String p_design_name){  String session_name=p_design_name.replace(".dsn",".ses");  try {    String[] reserved_chars={"(",")"," ","-"};    DsnIdentifier identifier_type=new DsnIdentifier(reserved_chars,r_board.host_com.specctra_parser_info.string_quote);    write_session_scope(identifier_type,session_name,p_design_name);    output_file.close();    stat.userPrintln(classname + "write DONE");  } catch (  Exception exc) {    stat.userPrintln("unable to write session file",exc);    return false;  }  return true;}  }
class C{  public boolean hasAttribute(AttributeType attributeType){  for (  TemplateLine l : templateLines) {    if (l.getAttributeType().equals(attributeType)) {      return true;    }  }  return false;}  }
class C{  protected static String[] commaDelimitedListToStringArray(String commaDelimitedStrings){  return (commaDelimitedStrings == null || commaDelimitedStrings.length() == 0) ? new String[0] : commaSeparatedValuesPattern.split(commaDelimitedStrings);}  }
class C{  public void testModPowNegExp(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75,48,-7};  byte eBytes[]={27,-15,65,39};  byte mBytes[]={-128,2,3,4,5};  int aSign=1;  int eSign=-1;  int mSign=1;  byte rBytes[]={12,118,46,86,92};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger exp=new BigInteger(eSign,eBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  BigInteger result=aNumber.modPow(exp,modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public synchronized void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public static Bitmap snapShotWithoutStatusBar(Activity activity){  View view=activity.getWindow().getDecorView();  view.setDrawingCacheEnabled(true);  view.buildDrawingCache();  Bitmap bmp=view.getDrawingCache();  Rect frame=new Rect();  activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);  int statusBarHeight=frame.top;  int width=getScreenWidth(activity);  int height=getScreenHeight(activity);  Bitmap bp=null;  bp=Bitmap.createBitmap(bmp,0,statusBarHeight,width,height - statusBarHeight);  view.destroyDrawingCache();  return bp;}  }
class C{  public MonitoringPublisher(ReplicationServerDomain replicationServerDomain,long period){  super("Replication server RS(" + replicationServerDomain.getLocalRSServerId() + ") monitor publisher for domain \""+ replicationServerDomain.getBaseDN()+ "\"");  this.domain=replicationServerDomain;  this.period=period;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  EntityReference entRef;  Node aNode;  Document ownerDocument;  DocumentType docType;  String system;  String name;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  entRef=aNewDoc.createEntityReference("entRef1");  assertNotNull("createdEntRefNotNull",entRef);  entRef.setNodeValue("entRef1Value");  aNode=doc.importNode(entRef,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  name=aNode.getNodeName();  assertEquals("nodeName","entRef1",name);}  }
class C{  @Override public boolean isAllowed(LocalBackendCompareOperation operation){  AciContainer container=new AciLDAPOperationContainer(operation,ACI_COMPARE);  String baseName;  String rawAttributeType=operation.getRawAttributeType();  int semicolonPosition=rawAttributeType.indexOf(';');  if (semicolonPosition > 0) {    baseName=toLowerCase(rawAttributeType.substring(0,semicolonPosition));  } else {    baseName=toLowerCase(rawAttributeType);  }  container.setCurrentAttributeType(getSchema().getAttributeType(baseName));  container.setCurrentAttributeValue(operation.getAssertionValue());  return isAllowed(container,operation);}  }
class C{  public int next(){  if (_currentNode == DTM.NULL) {    return DTM.NULL;  }  int node=_currentNode;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) != nodeType) {    }  } else {    while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) < DTM.NTYPES) {    }  }  _currentNode=node;  return (node == DTM.NULL) ? DTM.NULL : returnNode(makeNodeHandle(node));}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  return src.createCompatibleWritableRaster();}  }
class C{  public void create_default_via_rule(NetClass p_net_class,String p_name){  if (via_infos.count() == 0) {    return;  }  RuleViaInfoList default_rule=new RuleViaInfoList(p_name);  int default_via_cl_class=p_net_class.default_item_clearance_classes.get(ItemClass.VIA);  for (int i=0; i < via_infos.count(); ++i) {    BrdViaInfo curr_via_info=via_infos.get(i);    if (curr_via_info.get_clearance_class() == default_via_cl_class) {      freert.library.LibPadstack curr_padstack=curr_via_info.get_padstack();      int curr_from_layer=curr_padstack.from_layer();      int curr_to_layer=curr_padstack.to_layer();      BrdViaInfo existing_via=default_rule.get_layer_range(curr_from_layer,curr_to_layer);      if (existing_via != null) {        ShapeConvex new_shape=curr_padstack.get_shape(curr_from_layer);        ShapeConvex existing_shape=existing_via.get_padstack().get_shape(curr_from_layer);        if (new_shape.max_width() < existing_shape.max_width()) {          default_rule.remove_via(existing_via);          default_rule.append_via(curr_via_info);        }      } else {        default_rule.append_via(curr_via_info);      }    }  }  via_rules.add(default_rule);  p_net_class.set_via_rule(default_rule);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testAddress;  NamedNodeMap attributes;  Attr attribute;  String attributeName;  java.util.Collection actual=new java.util.ArrayList();  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("dir");  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testAddress=addressList.item(0);  attributes=testAddress.getAttributes();  for (int indexN1006B=0; indexN1006B < attributes.getLength(); indexN1006B++) {    attribute=(Attr)attributes.item(indexN1006B);    attributeName=attribute.getNodeName();    actual.add(attributeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("htmlAttributeNames",htmlExpected,actual);  } else {    assertEqualsIgnoreCase("attributeNames",expected,actual);  }}  }
class C{  public boolean isHeaderList(){  return true;}  }
class C{  public FSAuthenticationStatement(Element element) throws FSMsgException, SAMLException {  FSUtils.debug.message("FSAuthenticationStatement(Element):  Called");  if (element == null) {    FSUtils.debug.message("FSAuthenticationStatement: null input.");    throw new FSMsgException("nullInput",null);  }  int i=0;  NamedNodeMap atts=((Node)element).getAttributes();  int attCount=atts.getLength();  for (i=0; i < attCount; i++) {    Node att=atts.item(i);    if (att.getNodeType() == Node.ATTRIBUTE_NODE) {      String attName=att.getLocalName();      if (attName == null || attName.length() == 0) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAuthenticationStatement:" + "Attribute name is either null or empty.");        }        throw new FSMsgException("nullInput",null);      }      if (attName.equals(IFSConstants.AUTHENTICATION_METHOD)) {        _authenticationMethod=((Attr)att).getValue().trim();      } else       if (attName.equals(IFSConstants.AUTHENTICATION_INSTANT)) {        try {          _authenticationInstant=DateUtils.stringToDate(((Attr)att).getValue());        } catch (        ParseException pe) {          FSUtils.debug.error("FSAuthenticationStatement:" + "StringToDate: ",pe);          throw new FSMsgException("wrongDateFormat",null);        }      } else       if (attName.equals(IFSConstants.REAUTH_ON_OR_AFTER)) {        try {          reauthenticateOnOrAfter=DateUtils.stringToDate(((Attr)att).getValue());        } catch (        ParseException pe) {          FSUtils.debug.error("FSAuthenticationStatement:" + "StringToDate: ",pe);          throw new FSMsgException("wrongDateFormat",null);        }      } else       if (attName.equals(IFSConstants.SESSION_INDEX)) {        sessionIndex=((Attr)att).getValue().trim();      }    }  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        String tagName=currentNode.getLocalName();        String tagNS=currentNode.getNamespaceURI();        if ((tagName == null) || tagName.length() == 0 || tagNS == null || tagNS.length() == 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAuthenticationStatement: " + "The  tag name or tag namespace of child" + " element is either null or empty.");          }          throw new FSMsgException("nullInput",null);        }        if (tagName.equals(IFSConstants.AUTH_SUBJECT)) {          if (this._subject != null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSAuthenticationStatement" + ":should only contain one subject");            }            throw new FSMsgException("oneElement",null);          } else {            this._subject=new FSSubject((Element)currentNode);          }        } else         if (tagName.equals(IFSConstants.SUBJECT_LOCALITY)) {          if (_subjectLocality != null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSAuthenticationStatement" + "Statement: should at most " + "contain one SubjectLocality.");            }            throw new FSMsgException("oneElement",null);          } else {            _subjectLocality=new SubjectLocality((Element)currentNode);          }        } else         if (tagName.equals(IFSConstants.AUTHN_CONTEXT) && (tagNS.equals(IFSConstants.libertyMessageNamespaceURI) || tagNS.equals(IFSConstants.FF_12_XML_NS))) {          if (_authnContext != null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSAuthentication" + "Statement: should not contain more " + "than  one AuthnContext element.");            }            throw new FSMsgException("oneElement",null);          } else {            _authnContext=new AuthnContext((Element)currentNode);          }        } else         if (tagName.equals(IFSConstants.AUTHORITY_BINDING)) {          if (_authorityBinding == null) {            _authorityBinding=new ArrayList();          }          if ((_authorityBinding.add(new AuthorityBinding((Element)currentNode))) == false) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSAuthenticationStatement" + ": failed to add to the" + " AuthorityBinding list.");            }            throw new FSMsgException("addListError",null);          }        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSAuthenticationStatement:" + "Wrong element " + tagName + "included.");          }          throw new FSMsgException("wrongInput",null);        }      }    }  }  if (this._subject == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthenticationStatement should " + "contain one subject.");    }    throw new FSMsgException("missingElement",null);  }  FSUtils.debug.message("FSAuthenticationStatement(Element): leaving");}  }
class C{  private static void sort(long[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        long ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        long a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      long last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    long t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    long t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    long t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    long t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    long pivot1=a[e2];    long pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      long ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        long ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    long pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      long ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public NoRouteToHostException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private static void doSort(float[] a,int left,int right,float[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        float t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  float[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new float[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    float[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  private void subscribeWSwithMsgHandler(){  try {    Thread.sleep(ZStreamingConfig.getStreamingQuoteSubscribeDelayAfterInitiate());  } catch (  InterruptedException e) {    System.out.println("WebsocketThread.subscribeWSwithMsgHandler(): ERROR: InterruptedException on sleep before subscribe !!!");  }  if (currWSstate == WSstate.WS_OPENED) {    addMessageHandler();    sendSubscribeMessage();    sendModeMessage();  } else {    if (wsSessionRetry < ZStreamingConfig.getStreamingQuoteMaxInitiateRetryCount()) {      System.out.println("WebsocketThread.subscribeWSwithMsgHandler(): WARNING: WS Open FAILED On Initiation, Retrying !!!");      wsSessionRetry++;      reInitiateOnWSOpenFailure();    } else {      System.out.println("WebsocketThread.subscribeWSwithMsgHandler(): ERROR: WS reinitiation max limit reached, no retry !!!");    }  }}  }
class C{  public PluginResult.PreOperation invokePreOperationSearchPlugins(PreOperationSearchOperation searchOperation) throws CanceledOperationException {  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationSearchPlugins.length; i++) {    DirectoryServerPlugin p=preOperationSearchPlugins[i];    if (isInternalOperation(searchOperation,p)) {      continue;    }    try {      result=p.doPreOperation(searchOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreOperationException(e,i,preOperationSearchPlugins,searchOperation,p);    }    if (result == null) {      return handlePreOperationResult(searchOperation,i,preOperationSearchPlugins,p);    } else     if (!result.continuePluginProcessing()) {      registerSkippedPreOperationPlugins(i,preOperationSearchPlugins,searchOperation);      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public static DataType createObject(String className,String value){  try {    Class<?> theClass=Class.forName(className);    Class<?>[] constructorParameters=new Class[1];    constructorParameters[0]=Class.forName("java.lang.String");    Constructor<?> classConstructor=theClass.getConstructor(constructorParameters);    return (DataType)classConstructor.newInstance(value);  } catch (  Exception ex) {    Log.e("createObject","Can't create class " + className + " with value: "+ value);  }  return null;}  }
class C{  @Override protected void processToken(SoapMessage message){  throw new IllegalStateException("OpenAMSessionTokenClientInterceptor#processToken should not be called!");}  }
class C{  public void scan() throws IOException, SAXException {  scanPlatform();  scanJspConfig();  scanResourcePaths(WEB_INF);  scanJars();}  }
class C{  public byte[] generateSeed(int numBytes){  return secureRandomSpi.engineGenerateSeed(numBytes);}  }
class C{  public static void removeFederationProtocol(Object session,String protocol){  if (SingleLogoutManager.debug.messageEnabled()) {    SingleLogoutManager.debug.message("MPUtils.removeFedProtocol:" + " protocol=" + protocol + ", session="+ session);  }  try {    SessionProvider provider=SessionManager.getProvider();    String[] values=provider.getProperty(session,SingleLogoutManager.FEDERATION_PROTOCOLS);    if (SingleLogoutManager.debug.messageEnabled()) {      SingleLogoutManager.debug.message("MPUtils.removeFedProtocol:" + " current protocols=" + values);    }    if ((values == null) || (values.length == 0)) {      return;    } else {      Set set=new HashSet();      for (int i=0; i < values.length; i++) {        set.add(values[i]);      }      set.remove(protocol);      String[] newVals=new String[set.size()];      set.toArray(newVals);      provider.setProperty(session,SingleLogoutManager.FEDERATION_PROTOCOLS,newVals);    }  } catch (  UnsupportedOperationException ex) {    SingleLogoutManager.debug.warning("MPUtils.addFedProtocol",ex);  }catch (  SessionException ex) {    SingleLogoutManager.debug.warning("MPUtils.addFedProtocol2",ex);  }}  }
class C{  public SubjectLocality(String ipAddress,String dnsAddress){  if (ipAddress == null) {    _ipAddress="";  } else {    _ipAddress=ipAddress;  }  if (dnsAddress == null) {    _dnsAddress="";  } else {    _dnsAddress=dnsAddress;  }}  }
class C{  public JKPrivilige(final int priviligeId,final String name,final JKPrivilige parent,final int number){  this.priviligeId=priviligeId;  this.priviligeName=name;  this.parentPrivlige=parent;  this.number=number;}  }
class C{  private void writeObject(ObjectOutputStream p_stream) throws IOException {  p_stream.defaultWriteObject();  item_color_table.write_object(p_stream);  other_color_table.write_object(p_stream);}  }
class C{  public static boolean contains(final String value,final String needle,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (caseSensitive) {    return value.contains(needle);  }  return value.toLowerCase().contains(needle.toLowerCase());}  }
class C{  public void testShiftRight5(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=300;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  public GatewayEnvironment(){  String base=System.getProperty(BASE_SYSTEM_PROPERTY);  if (base != null) {    delegate=new DefaultEnvironment(new File(base));    return;  }  base=System.getenv(BASE_ENV_VARIABLE);  if (base != null) {    delegate=new DefaultEnvironment(new File(base));    return;  }  delegate=new PlatformEnvironment();}  }
class C{  public void notifyObservers(IndexChangeEvent event){  for (  IndexChangeObserver observer : observers) {    observer.update(event);  }}  }
class C{  protected void paintCell(Graphics g,int row,Rectangle rowBounds,ListCellRenderer cellRenderer,ListModel dataModel,ListSelectionModel selModel,int leadIndex){  Object value=dataModel.getElementAt(row);  boolean cellHasFocus=list.hasFocus() && (row == leadIndex);  boolean isSelected=selModel.isSelectedIndex(row);  Component rendererComponent=cellRenderer.getListCellRendererComponent(list,value,row,isSelected,cellHasFocus);  int cx=rowBounds.x;  int cy=rowBounds.y;  int cw=rowBounds.width;  int ch=rowBounds.height;  if (isFileList) {    int w=Math.min(cw,rendererComponent.getPreferredSize().width + 4);    if (!isLeftToRight) {      cx+=(cw - w);    }    cw=w;  }  rendererPane.paintComponent(g,rendererComponent,list,cx,cy,cw,ch,true);}  }
class C{  public void testGetColumnDisplaySize(){  try {    for (int i=0; i < rsmd.getColumnCount(); i++) {      int size=rsmd.getColumnDisplaySize(i + 1);      assertTrue(size > 0);    }  } catch (  SQLException e) {    fail("SQLException is thrown: " + e.getMessage());  }  try {    rsmd.getColumnDisplaySize(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }  try {    rsmd.getColumnDisplaySize(5);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public FSSession(String sessionID,List sessionPartners){  this.sessionID=sessionID;  this.extraSessionAttributes=new HashMap();  if (sessionPartners != null) {    this.sessionPartners=sessionPartners;  } else {    this.sessionPartners=new ArrayList();  }}  }
class C{  public void test_getDefaultAlgorithm(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  String def=KeyManagerFactory.getDefaultAlgorithm();  if (defaultAlgorithm == null) {    assertNull("DefaultAlgorithm must be null",def);  } else {    assertEquals("Invalid default algorithm",def,defaultAlgorithm);  }  String defA="Proba.keymanagerfactory.defaul.type";  Security.setProperty("ssl.KeyManagerFactory.algorithm",defA);  assertEquals("Incorrect defaultAlgorithm",KeyManagerFactory.getDefaultAlgorithm(),defA);  if (def == null) {    def="";  }  Security.setProperty("ssl.KeyManagerFactory.algorithm",def);  assertEquals("Incorrect defaultAlgorithm",KeyManagerFactory.getDefaultAlgorithm(),def);}  }
class C{  public void handleActionColumnHREFRequest(RequestInvocationEvent event) throws ModelControlException {  String type=hexToString((String)getDisplayFieldValue(ACTION_COLUMN_HREF));  AuthPropertiesModel model=(AuthPropertiesModel)getModel();  if (model.getServiceName(type) == null) {    setPageSessionAttribute(INSTANCE_MSG,model.getLocalizedString("no.module.instance"));    forwardTo();  } else {    setPageSessionAttribute(EditAuthTypeViewBean.SERVICE_TYPE,type);    setPageSessionAttribute(AMAdminConstants.CURRENT_PROFILE,(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM));    EditAuthTypeViewBean vb=(EditAuthTypeViewBean)getViewBean(EditAuthTypeViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  }}  }
class C{  @Override public synchronized List<E> subList(int start,int end){  return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this);}  }
class C{  public R visitIPAddress(IPAddressPropertyDefinition pd,InetAddress v,P p){  return visitUnknown(pd,v,p);}  }
class C{  protected void notifyRowChanged() throws SQLException {  checkforRowSetInterface();  if (listeners.isEmpty() == false) {    RowSetEvent event=new RowSetEvent((RowSet)this);    for (    RowSetListener rsl : listeners) {      rsl.rowChanged(event);    }  }}  }
class C{  public void _write(OutputStream output){  output.write_char(value);}  }
class C{  public ExpectedObject(long objectID){  this.objectID=objectID;  this.objectIDs=null;  this.expectedArgument=-1;}  }
class C{  public static void handleTypeMismatchError(XMLSerializer serializer,Object parentObject,String fieldName,Object childObject) throws AbortSerializationException {  ValidationEvent ve=new ValidationEventImpl(ValidationEvent.ERROR,Messages.format(Messages.ERR_TYPE_MISMATCH,getUserFriendlyTypeName(parentObject),fieldName,getUserFriendlyTypeName(childObject)),new ValidationEventLocatorExImpl(parentObject,fieldName));  serializer.reportError(ve);}  }
class C{  public void pushCurrentTemplateRuleIsNull(boolean b){  m_currentTemplateRuleIsNull.push(b);}  }
class C{  public void release(){  lock.unlock();}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new Extension(oid,critical,new DEROctetString(value)));}  }
class C{  public String toString(){  String s="{";  Object[] tbl=attributes;  for (int i=0; i < tbl.length; i+=2) {    if (tbl[i + 1] instanceof AttributeSet) {      s=s + tbl[i] + "="+ "AttributeSet"+ ",";    } else {      s=s + tbl[i] + "="+ tbl[i + 1]+ ",";    }  }  s=s + "}";  return s;}  }
class C{  synchronized void removeStyle(Style style){  AttributeSet[] attrs=getAttributes();  for (int counter=attrs.length - 1; counter >= 0; counter--) {    if (attrs[counter] == style) {      removeAttributeSetAt(counter);      if (counter < extendedIndex) {        extendedIndex--;      }      break;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getNamedItemNS02.class,args);}  }
class C{  public int hashCode(){  int h=0;  for (int i=0; i < keyUniverse.length; i++) {    if (null != vals[i]) {      h+=entryHashCode(i);    }  }  return h;}  }
class C{  @SuppressWarnings("unused") public static RectF inflateRect(RectF source,float value,boolean holdOrigin){  RectF dest=new RectF(source);  dest.right-=value * 2;  dest.bottom-=value * 2;  if (!holdOrigin) {    dest.offset(value,value);  }  return dest;}  }
class C{  public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){  boolean matched=false;  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {    if (isMatch(actualString,(String)iter.next(),wildCard)) {      matched=true;      break;    }  }  return matched;}  }
class C{  public void run(){  if (Debug.messageEnabled()) {    Debug.message("RemoteHandler:TimeBufferingTask.run() called");  }  flush();}  }
class C{  public static ByteString createBooleanValue(boolean b){  return b ? ServerConstants.TRUE_VALUE : ServerConstants.FALSE_VALUE;}  }
class C{  public Document decryptAndReplace(Document encryptedDoc,java.security.Key privKey) throws EncryptionException {  EncryptionUtils.debug.message("************IN DECRYPT *************");  if (encryptedDoc == null) {    throw new EncryptionException(EncryptionUtils.bundle.getString("null encrypted doc"));  }  if (EncryptionUtils.debug.messageEnabled()) {    EncryptionUtils.debug.message("AMEncryptionProvider.decrypt" + "AndReplace: input encrypted DOC = " + XMLUtils.print(encryptedDoc));  }  Key encryptionKey=null;  Document decryptedDoc=null;  EncryptedKey encryptedKey=null;  Element encryptedElementNext=null;  XMLCipher cipher=null;  NodeList nodes=encryptedDoc.getElementsByTagNameNS(EncryptionConstants.ENC_XML_NS,"EncryptedData");  int length=nodes.getLength();  if (nodes == null || length == 0) {    return encryptedDoc;  }  Element encryptedElem=(Element)encryptedDoc.getElementsByTagNameNS(EncryptionConstants.ENC_XML_NS,"EncryptedKey").item(0);  try {    cipher=XMLCipher.getInstance();    cipher.init(XMLCipher.DECRYPT_MODE,null);  } catch (  Exception xe) {    EncryptionUtils.debug.error("AMEncryptionProvider.decrypt" + "AndReplace: XML Decryption error for XMLCipher init :",xe);    throw new EncryptionException(xe);  }  int i=0;  Element encryptedElement=(Element)nodes.item(i);  while (i < length) {    try {      if (EncryptionUtils.debug.messageEnabled()) {        EncryptionUtils.debug.message("AMEncryptionProvider.decrypt" + "AndReplace: encrypted element (" + i + ") = "+ XMLUtils.print(encryptedElement));      }      EncryptedData encryptedData=cipher.loadEncryptedData(encryptedDoc,encryptedElement);      if (encryptedKey == null) {        encryptedKey=cipher.loadEncryptedKey(encryptedDoc,encryptedElem);        if (encryptedKey == null) {          encryptedKey=encryptedData.getKeyInfo().itemEncryptedKey(0);        }      }      if (EncryptionUtils.debug.messageEnabled()) {        EncryptionUtils.debug.message("AMEncryptionProvider.decrypt" + "AndReplace: Encrypted key = " + toString(cipher.martial(encryptedDoc,encryptedKey)));        EncryptionUtils.debug.message("AMEncryptionProvider.decrypt" + "AndReplace: Encrypted Data (" + i + ") = "+ toString(cipher.martial(encryptedDoc,encryptedData)));      }      if (encryptedKey != null) {        XMLCipher keyCipher=XMLCipher.getInstance();        if (privKey == null) {          privKey=getPrivateKey(encryptedKey.getKeyInfo());        }        keyCipher.init(XMLCipher.UNWRAP_MODE,privKey);        encryptionKey=keyCipher.decryptKey(encryptedKey,encryptedData.getEncryptionMethod().getAlgorithm());      }      cipher=XMLCipher.getInstance();      cipher.init(XMLCipher.DECRYPT_MODE,encryptionKey);      i=i + 1;      if (i < length) {        encryptedElementNext=(Element)nodes.item(i);      }      decryptedDoc=cipher.doFinal(encryptedDoc,encryptedElement);      encryptedElement=encryptedElementNext;      if (EncryptionUtils.debug.messageEnabled()) {        EncryptionUtils.debug.message("AMEncryptionProvider.decrypt" + "AndReplace: decryptedDoc (" + (i - 1) + ") = "+ XMLUtils.print(decryptedDoc));      }    } catch (    Exception xe) {      EncryptionUtils.debug.error("AMEncryptionProvider.decrypt" + "AndReplace: XML Decryption error.",xe);      throw new EncryptionException(xe);    }  }  if (EncryptionUtils.debug.messageEnabled()) {    EncryptionUtils.debug.message("AMEncryptionProvider.decrypt" + "AndReplace: FINAL decryptedDoc = " + XMLUtils.print(decryptedDoc));  }  return decryptedDoc;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MugShotElement createMugShotElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MugShotElementImpl();}  }
class C{  protected void flushCacheWithAppend(byte bufferToAppend[],int off,int len) throws IOException {  this.out.writeLine(Integer.toHexString(this.cachePosition + len));  this.out.write(this.cache,0,this.cachePosition);  this.out.write(bufferToAppend,off,len);  this.out.writeLine("");  this.cachePosition=0;}  }
class C{  protected void clearError(){synchronized (lock) {    ioError=false;  }}  }
class C{  private String dive(int depth,int iteration){  String str0;  String str1;  String str2;  String str3;  String str4;  String str5;  String str6;  String str7;  String funStr;  funStr="";switch (iteration % 8) {case 0:    funStr=str0=makeString(iteration);  break;case 1:funStr=str1=makeString(iteration);break;case 2:funStr=str2=makeString(iteration);break;case 3:funStr=str3=makeString(iteration);break;case 4:funStr=str4=makeString(iteration);break;case 5:funStr=str5=makeString(iteration);break;case 6:funStr=str6=makeString(iteration);break;case 7:funStr=str7=makeString(iteration);break;}strong[depth]=funStr;weak[depth]=new WeakReference(funStr);if (depth + 1 < MAX_DEPTH) dive(depth + 1,iteration + 1); else Main.sleep(100);return funStr;}  }
class C{  public int hashCode(){  int hash=className.hashCode();  for (Enumeration<RefAddr> e=getAll(); e.hasMoreElements(); )   hash+=e.nextElement().hashCode();  return hash;}  }
class C{  public SchemaTestMatchingRuleImpl(){  caseIgnoreMatchingRule=CoreSchema.getCaseIgnoreMatchingRule();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName="namespaceURI:x";  Document doc;  DocumentType docType;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public SetNextRule(String methodName,String paramType){  this.methodName=methodName;  this.paramType=paramType;}  }
class C{  public Value castObjToPrimitive(PrimitiveTypeDef type,Value v,LineCol lineCol) throws SyntaxException {  SClassDef Lang=(SClassDef)getTypeWithName("lt.lang.LtRuntime",LineCol.SYNTHETIC);  assert Lang != null;  SMethodDef method=null;  if (type instanceof IntTypeDef) {    for (    SMethodDef m : Lang.methods()) {      if (m.name().equals("castToInt")) {        method=m;        break;      }    }    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToInt(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   if (type instanceof LongTypeDef) {    for (    SMethodDef m : Lang.methods()) {      if (m.name().equals("castToLong")) {        method=m;        break;      }    }    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToLong(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   if (type instanceof ShortTypeDef) {    for (    SMethodDef m : Lang.methods()) {      if (m.name().equals("castToShort")) {        method=m;        break;      }    }    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToShort(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   if (type instanceof ByteTypeDef) {    for (    SMethodDef m : Lang.methods()) {      if (m.name().equals("castToByte")) {        method=m;        break;      }    }    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToByte(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   if (type instanceof FloatTypeDef) {    for (    SMethodDef m : Lang.methods()) {      if (m.name().equals("castToFloat")) {        method=m;        break;      }    }    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToFloat(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   if (type instanceof DoubleTypeDef) {    for (    SMethodDef m : Lang.methods()) {      if (m.name().equals("castToDouble")) {        method=m;        break;      }    }    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToDouble(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   if (type instanceof BoolTypeDef) {    method=getLang_castToBool();    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToBool(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   if (type instanceof CharTypeDef) {    for (    SMethodDef m : Lang.methods()) {      if (m.name().equals("castToChar")) {        method=m;        break;      }    }    if (method == null)     throw new LtBug("lt.lang.LtRuntime.castToChar(Object) should exist");    Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(method,lineCol);    invokeStatic.arguments().add(v);    return invokeStatic;  } else   throw new LtBug("unknown primitive type " + type);}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  startElement(elementNamespaceURI,elementLocalName,elementName,null);}  }
class C{  public static PdfAction createGoToE(PdfDestination destination,boolean newWindow,PdfTargetDictionary targetDictionary){  return createGoToE(null,destination,newWindow,targetDictionary);}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public void addTrigger(String triggerId){  if (!triggers.contains(triggerId)) {    triggers.add(triggerId);  }}  }
class C{  static Promise<Long> blockingPromiseLong(){  return new BlockingPromise<>();}  }
class C{  public synchronized Record stopRecording() throws RecordException {  if (currentRecord == null) {    debug.message("Ask for stopping the record but we are not recording.");    return null;  }  debug.message("Stop recording Issue '{}'.",currentRecord);  stopThreadDump();  stopAutoStopRecording();  currentRecord.stopRecord();  changeOpenAMDebugFolder(previousDebugDirectory);  for (  Map.Entry<Debug,Integer> entry : previousDebugLevel.entrySet()) {    entry.getKey().setDebug(entry.getValue());  }  previousDebugLevel=new HashMap<Debug,Integer>();  try {    archiveRecord(currentRecord);  } catch (  RecordException e) {    debug.warning("Can't archive the issue '{}'",currentRecord,e);  }  Record stoppedRecord=currentRecord;  currentRecord=null;  return stoppedRecord;}  }
class C{  public void addTokenOperation(CTSOperation operation,boolean success){  operationStore.add(operation);  if (!success) {    operationFailureStore.add(operation);  }}  }
class C{  public void write(byte[] b,int off,int len,long pos) throws IOException {  if (b == null) {    throw new NullPointerException("b == null!");  }  if ((off < 0) || (len < 0) || (pos < 0)|| (off + len > b.length)|| (off + len < 0)) {    throw new IndexOutOfBoundsException();  }  long lastPos=pos + len - 1;  if (lastPos >= length) {    pad(lastPos);    length=lastPos + 1;  }  int offset=(int)(pos % BUFFER_LENGTH);  while (len > 0) {    byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);    int nbytes=Math.min(len,BUFFER_LENGTH - offset);    System.arraycopy(b,off,buf,offset,nbytes);    pos+=nbytes;    off+=nbytes;    len-=nbytes;    offset=0;  }}  }
class C{  private void connectSocket(int connectTimeout,int readTimeout,int writeTimeout,ConnectionSpecSelector connectionSpecSelector) throws IOException {  rawSocket.setSoTimeout(readTimeout);  try {    Platform.get().connectSocket(rawSocket,route.socketAddress(),connectTimeout);  } catch (  ConnectException e) {    throw new ConnectException("Failed to connect to " + route.socketAddress());  }  source=Okio.buffer(Okio.source(rawSocket));  sink=Okio.buffer(Okio.sink(rawSocket));  if (route.address().sslSocketFactory() != null) {    connectTls(readTimeout,writeTimeout,connectionSpecSelector);  } else {    protocol=Protocol.HTTP_1_1;    socket=rawSocket;  }  if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {    socket.setSoTimeout(0);    FramedConnection framedConnection=new FramedConnection.Builder(true).socket(socket,route.address().url().host(),source,sink).protocol(protocol).build();    framedConnection.sendConnectionPreface();    this.framedConnection=framedConnection;  }}  }
class C{  public boolean isInboundOffhook(){  return (currentState == inboundOffHookState);}  }
class C{  public void removeHandler(Handler handler){  if (this.isNamed) {    LogManager.getLogManager().checkAccess();  }  if (handler == null) {    return;  }  this.handlers.remove(handler);  updateDalvikLogHandler();}  }
class C{  public void removeBeanContextServicesListener(BeanContextServicesListener bcsl){  if (bcsl == null)   throw new NullPointerException("bcsl");synchronized (bcsListeners) {    if (!bcsListeners.contains(bcsl))     return; else     bcsListeners.remove(bcsl);  }}  }
class C{  public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {  int count=serializable;  while (count-- > 0) {    Object child=null;    BeanContextSupport.BCSChild bscc=null;    try {      child=ois.readObject();      bscc=(BeanContextSupport.BCSChild)ois.readObject();    } catch (    IOException ioe) {      continue;    }catch (    ClassNotFoundException cnfe) {      continue;    }synchronized (child) {      BeanContextChild bcc=null;      try {        bcc=(BeanContextChild)child;      } catch (      ClassCastException cce) {      }      if (bcc != null) {        try {          bcc.setBeanContext(getBeanContextPeer());          bcc.addPropertyChangeListener("beanContext",childPCL);          bcc.addVetoableChangeListener("beanContext",childVCL);        } catch (        PropertyVetoException pve) {          continue;        }      }      childDeserializedHook(child,bscc);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  int nodeType;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("domestic");  nodeType=(int)addrAttr.getNodeType();  assertEquals("nodeAttrNodeTypeAssert1",2,nodeType);}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  public void addAttributes(Map<? extends Attribute,?> attributes,int beginIndex,int endIndex){  if (attributes == null) {    throw new NullPointerException();  }  if (beginIndex < 0 || endIndex > length() || beginIndex > endIndex) {    throw new IllegalArgumentException("Invalid substring range");  }  if (beginIndex == endIndex) {    if (attributes.isEmpty())     return;    throw new IllegalArgumentException("Can't add attribute to 0-length text");  }  if (runCount == 0) {    createRunAttributeDataVectors();  }  int beginRunIndex=ensureRunBreak(beginIndex);  int endRunIndex=ensureRunBreak(endIndex);  Iterator<? extends Map.Entry<? extends Attribute,?>> iterator=attributes.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<? extends Attribute,?> entry=iterator.next();    addAttributeRunData(entry.getKey(),entry.getValue(),beginRunIndex,endRunIndex);  }}  }
class C{  public void removeInternalFrameListener(InternalFrameListener l){  listenerList.remove(InternalFrameListener.class,l);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("SubentriesControl(visibility=\"");  buffer.append(visibility);  buffer.append("\")");}  }
class C{  public static String toLowerCase(String s){  return (s == null ? null : com.forgerock.opendj.util.StaticUtils.toLowerCase(s));}  }
class C{  public static boolean isValidStation(int station){  boolean isValid=(station >= LOWEST_STATION && station <= HIGHEST_STATION);  Log.v(TAG,"isValidStation: freq = " + station + ", valid = "+ isValid);  return isValid;}  }
class C{  public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {  debug.message("ReplayPasswd.onLoginFailure: called");}  }
class C{  public static synchronized void initializeProperties(String fileName) throws FileNotFoundException, IOException {  FileInputStream fis=null;  try {    if ((fileName != null) && (fileName.length() != 0)) {      fis=new FileInputStream(fileName);      properties.load(fis);    }  }  finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public SmileFactory(SmileFactory src,ObjectCodec oc){  super(src,oc);  _cfgDelegateToTextual=src._cfgDelegateToTextual;  _smileParserFeatures=src._smileParserFeatures;  _smileGeneratorFeatures=src._smileGeneratorFeatures;}  }
class C{  public static String truncate(final String value,final int length,final String filler){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (length == 0) {    return "";  }  if (length >= value.length()) {    return value;  }  return append(value.substring(0,length - filler.length()),filler);}  }
class C{  protected final Class<?> defineClass(String name,byte[] b,int off,int len,CodeSource cs){  return defineClass(name,b,off,len,getProtectionDomain(cs));}  }
class C{  public void display_default_message(){}  }
class C{  @Override public void show(final FragmentManager manager,final String tag){  delegate.show(manager,tag);}  }
class C{  public void handleValue(String value){  if (propertyName != null && value != null && value.length() > 0) {    CSS.Attribute cssKey=CSS.getAttribute(propertyName);    if (cssKey != null) {      if (cssKey == CSS.Attribute.LIST_STYLE_IMAGE) {        if (value != null && !value.equals("none")) {          URL url=CSS.getURL(base,value);          if (url != null) {            value=url.toString();          }        }      }      addCSSAttribute(declaration,cssKey,value);    }    propertyName=null;  }}  }
class C{  public void flush() throws IOException {  flushCache();  this.out.flush();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr createdAttr;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      createdAttr=doc.createAttribute("");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public DeviceRgb(int r,int g,int b){  this(r / 255f,g / 255f,b / 255f);}  }
class C{  private String normalizeHost(String host){  if (LOCALHOST.equals(host)) {    return LOCALHOST;  }  try {    final InetAddress inetAddress=InetAddress.getByName(host);    if (isLocalAddress(inetAddress)) {      return LOCALHOST;    }    return inetAddress.getHostAddress();  } catch (  UnknownHostException e) {    logger.error(ERR_COULD_NOT_SOLVE_HOSTNAME,host);    return host;  }}  }
class C{  final void unsplice(Node pred,Node s){  s.forgetContents();  if (pred != null && pred != s && pred.next == s) {    Node n=s.next;    if (n == null || (n != s && pred.casNext(s,n) && pred.isMatched())) {      for (; ; ) {        Node h=head;        if (h == pred || h == s || h == null)         return;        if (!h.isMatched())         break;        Node hn=h.next;        if (hn == null)         return;        if (hn != h && casHead(h,hn))         h.forgetNext();      }      if (pred.next != pred && s.next != s) {        for (; ; ) {          int v=sweepVotes;          if (v < SWEEP_THRESHOLD) {            if (casSweepVotes(v,v + 1))             break;          } else           if (casSweepVotes(v,0)) {            sweep();            break;          }        }      }    }  }}  }
class C{  private boolean isIncrementalWithParent(){  return incrementalParent.isSelected() && incrementalBackup.isSelected();}  }
class C{  private static LocalDate create(int year,int month,int dayOfMonth){  if (dayOfMonth > 28) {    int dom=31;switch (month) {case 2:      dom=(IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);    break;case 4:case 6:case 9:case 11:  dom=30;break;}if (dayOfMonth > dom) {if (dayOfMonth == 29) {throw new DateTimeException("Invalid date 'February 29' as '" + year + "' is not a leap year");} else {throw new DateTimeException("Invalid date '" + Month.of(month).name() + " "+ dayOfMonth+ "'");}}}return new LocalDate(year,month,dayOfMonth);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public void test_wrap_ByteBuffer_ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.wrap(bb,ByteBuffer.allocate(10));    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public ChannelData(boolean generateUUID){  if (generateUUID)   generateUUID();}  }
class C{  @Override public void performBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){  if (VERBOSE)   Log.v(TAG,"onBackup");  BackupProtos.Journal in=readJournal(oldState);  if (!launcherIsReady()) {    dataChanged();    writeJournal(newState,in);    return;  }  if (mDeviceProfileData == null) {    LauncherAppState app=LauncherAppState.getInstance();    mIdp=app.getInvariantDeviceProfile();    mDeviceProfileData=initDeviceProfileData(mIdp);    mIconCache=app.getIconCache();  }  Log.v(TAG,"lastBackupTime = " + in.t);  mKeys.clear();  applyJournal(in);  long newBackupTime=System.currentTimeMillis();  mBackupDataWasUpdated=false;  try {    backupFavorites(data);    backupScreens(data);    backupIcons(data);    backupWidgets(data);    HashSet<String> validKeys=new HashSet<String>();    for (    BackupProtos.Key key : mKeys) {      validKeys.add(keyToBackupKey(key));    }    mExistingKeys.removeAll(validKeys);    for (    String deleted : mExistingKeys) {      if (VERBOSE)       Log.v(TAG,"dropping deleted item " + deleted);      data.writeEntityHeader(deleted,-1);      mBackupDataWasUpdated=true;    }    mExistingKeys.clear();    if (!mBackupDataWasUpdated) {      mBackupDataWasUpdated=(in.profile == null) || !Arrays.equals(DeviceProfieData.toByteArray(in.profile),DeviceProfieData.toByteArray(mDeviceProfileData)) || (in.backupVersion != BACKUP_VERSION)|| (in.appVersion != getAppVersion());    }    if (mBackupDataWasUpdated) {      mLastBackupRestoreTime=newBackupTime;      BackupProtos.Journal state=getCurrentStateJournal();      writeRowToBackup(JOURNAL_KEY,state,data);    } else {      if (DEBUG)       Log.d(TAG,"Nothing was written during backup");    }  } catch (  IOException e) {    Log.e(TAG,"launcher backup has failed",e);  }  writeNewStateDescription(newState);}  }
class C{  private XMLElement newElement(String name,String value,ArrayList attributes) throws Exception {  return newElement(name,value,attributes,false);}  }
class C{  public net.aimeizi.person.Person.Builder clearChildrenCount(){  fieldSetFlags()[4]=false;  return this;}  }
class C{  private static boolean unknown(JsonValue subject,PatchOperation operation) throws BadRequestException {  throw new BadRequestException("Operation " + operation.getOperation() + " is not supported");}  }
class C{  public synchronized TaskEntry schedule(TaskScheduleInformation information) throws LDAPException, IOException, DecodeException, TaskClientException {  LDAPReader reader=connection.getLDAPReader();  LDAPWriter writer=connection.getLDAPWriter();  ArrayList<Control> controls=new ArrayList<>();  ArrayList<RawAttribute> attributes=getTaskAttributes(information);  ByteString entryDN=ByteString.valueOfUtf8(getTaskDN(attributes));  AddRequestProtocolOp addRequest=new AddRequestProtocolOp(entryDN,attributes);  LDAPMessage requestMessage=new LDAPMessage(nextMessageID.getAndIncrement(),addRequest,controls);  LDAPMessage responseMessage;  writer.writeMessage(requestMessage);  responseMessage=reader.readMessage();  if (responseMessage == null) {    throw new LDAPException(LDAPResultCode.CLIENT_SIDE_SERVER_DOWN,ERR_TASK_CLIENT_UNEXPECTED_CONNECTION_CLOSURE.get());  }  if (responseMessage.getProtocolOpType() != LDAPConstants.OP_TYPE_ADD_RESPONSE) {    throw new LDAPException(LDAPResultCode.CLIENT_SIDE_LOCAL_ERROR,ERR_TASK_CLIENT_INVALID_RESPONSE_TYPE.get(responseMessage.getProtocolOpName()));  }  AddResponseProtocolOp addResponse=responseMessage.getAddResponseProtocolOp();  if (addResponse.getResultCode() != 0) {    throw new LDAPException(LDAPResultCode.CLIENT_SIDE_LOCAL_ERROR,addResponse.getErrorMessage());  }  return getTaskEntry(getTaskID(attributes));}  }
class C{  public TransformerFactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  private boolean isCurrentlyIndexing(UUID id){  BoundStatement bs=new BoundStatement(isCurrentlyIndexingStmt);  bindUUIDWhere(bs,id);  return (getSession().execute(bs).one().getLong(0) > 0);}  }
class C{  protected void makeVisible(){  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3});}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return this;}  }
class C{  public FSLoginHelperException(String msg){  super(msg);}  }
class C{  static boolean _loadUnzipSo(String libName,int version,IWXUserTrackAdapter utAdapter){  boolean initSuc=false;  try {    if (isExist(libName,version)) {      System.load(_targetSoFile(libName,version));      commit(utAdapter,"2000","Load file extract from apk successfully.");    }    initSuc=true;  } catch (  Exception e) {    commit(utAdapter,WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorCode(),WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorMsg() + ":" + e.getMessage());    initSuc=false;    e.printStackTrace();  }catch (  java.lang.UnsatisfiedLinkError e2) {    commit(utAdapter,WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorCode(),WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorMsg() + ":" + e2.getMessage());    initSuc=false;    e2.printStackTrace();  }catch (  java.lang.Error e3) {    commit(utAdapter,WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorCode(),WXErrorCode.WX_ERR_COPY_FROM_APK.getErrorMsg() + ":" + e3.getMessage());    initSuc=false;    e3.printStackTrace();  }  return initSuc;}  }
class C{  public AMSearchResults searchAssignableDynamicGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP),wildcard,avPairs,searchControl);}  }
class C{  private int toInteger(JsonValue value){  if (value.isString()) {    try {      return Integer.parseInt(value.asString());    } catch (    NumberFormatException ex) {    }  }  return value.asInteger();}  }
class C{  public ReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,int initialCapacity,ClassLoader[] cls){  super(owner,channel,timeout,mapContextName,initialCapacity,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT,cls,true);}  }
class C{  private void displayError(LocalizableMessage msg,LocalizableMessage title){  Utilities.displayError(this,msg,title);  toFront();}  }
class C{  public static void main(String[] args){  Main m=new Main();  m.recursiveSync(0);  m.nestedMayThrow(false);  try {    m.nestedMayThrow(true);    System.err.println("nestedThrow(true) did not throw");  } catch (  MyException me) {  }  System.out.println("nestedMayThrow ok");  m.constantLock();  System.out.println("constantLock ok");  m.notExcessiveNesting();  if (false) {    try {      TooDeep.excessiveNesting();      System.err.println("excessiveNesting did not throw");    } catch (    VerifyError ve) {    }  }  System.out.println("excessiveNesting ok");  m.notNested();  System.out.println("notNested ok");  Object obj1=new Object();  Object obj2=new Object();  m.twoPath(obj1,obj2,0);  System.out.println("twoPath ok");  m.triplet(obj1,obj2,0);  System.out.println("triplet ok");}  }
class C{  public static Map<String,MappedClass> linkMappings(MappedClass mc,Map<String,MappedClass> mappings){  if (!mc.hasParent()) {    MappedClass parentMappedClass=mappings.get(mc.getNode().superName);    if (parentMappedClass != null) {      mappings=linkMappings(parentMappedClass,mappings);      parentMappedClass.addChild(mc);      mc.setParent(parentMappedClass);    }  }  if (mc.getInterfaces().size() == 0) {    for (    String interfaze : mc.getNode().interfaces) {      MappedClass mappedInterface=mappings.get(interfaze);      if (mappedInterface != null) {        mappings=linkMappings(mappedInterface,mappings);        mc.addInterface(mappedInterface);        mappedInterface.addChild(mc);      }    }  }  if (mc.getOuterClass() == null) {    boolean outerClassASM=mc.getNode().outerClass != null;    boolean outerClassName=mc.getOriginalName().contains("$");    String outerClass=null;    if (outerClassASM) {      outerClass=mc.getNode().outerClass;    } else     if (outerClassName) {      outerClass=mc.getOriginalName().substring(0,mc.getOriginalName().indexOf("$"));      if (outerClass.endsWith("/")) {        outerClass=null;      }    } else {      int synths=0, synthID=-1;      for (int fieldKey=0; fieldKey < mc.getFields().size(); fieldKey++) {        FieldNode fn=mc.getFields().get(fieldKey).getFieldNode();        if (fn == null) {          continue;        }        int access=fn.access;        if (AccessHelper.isSynthetic(access) && AccessHelper.isFinal(access) && !AccessHelper.isPublic(access)&& !AccessHelper.isPrivate(access)&& !AccessHelper.isProtected(access)) {          synths++;          synthID=fieldKey;        }      }      if (synths == 1) {        FieldNode fn=mc.getFields().get(synthID).getFieldNode();        if (fn != null && fn.desc.contains(";")) {          List<String> matches=RegexUtils.matchDescriptionClasses(fn.desc);          if (matches.size() > 0) {            outerClass=matches.get(0);          }        }      }    }    if (outerClass != null) {      MappedClass outer=mappings.get(outerClass);      if (outer != null) {        outer.addInnerClass(mc);        mc.setOuterClass(outer);        mappings=linkMappings(outer,mappings);      }    }  }  for (  MappedMember method : mc.getMethods()) {    addOverrides(method);  }  mappings.put(mc.getOriginalName(),mc);  return mappings;}  }
class C{  private java.awt.Color read_color() throws java.io.IOException {  int[] rgb_color_arr=new int[3];  for (int i=0; i < 3; ++i) {    Object next_token=scanner.next_token();    if (!(next_token instanceof Integer)) {      if (next_token != GuiConfigKeyword.CLOSED_BRACKET) {        System.out.println("GuiConfigFile.read_color: closing bracket expected");      }      return null;    }    rgb_color_arr[i]=(Integer)next_token;  }  return new java.awt.Color(rgb_color_arr[0],rgb_color_arr[1],rgb_color_arr[2]);}  }
class C{  public PdfArray(PdfArray arr){  this();  list.addAll(arr.list);}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void removeHost(String name) throws Exception {  ObjectName oname=new ObjectName(name);  String hostName=oname.getKeyProperty("host");  Service service=getService(oname);  Engine engine=service.getContainer();  Host host=(Host)engine.findChild(hostName);  if (host != null) {    engine.removeChild(host);  }}  }
class C{  protected void writeRaw(final String text){  writeIndent();  try {    final int length=text != null ? text.length() : NULL_TEXT.length();    _writer.write(text);    column+=length;    if (text == null) {      return;    }    boolean newLineSeen=false;    for (int i=0; i < length; i++) {      if (text.charAt(i) == '\n') {        line++;        column=0;        newLineSeen=true;      } else       if (newLineSeen) {        column++;      }    }  } catch (  IOException e) {    throw new UndeclaredThrowableException(e);  }}  }
class C{  public final void changed_area_optimize(NetNosList p_only_net_no_arr,int p_pullt_min_move,ExpandCostFactor[] p_trace_cost_arr,TimeLimitStoppable p_tlimit,BrdKeepPoint p_keep_point){  if (changed_area.is_clear())   return;  AlgoPullTight pull_tight_algo=AlgoPullTight.get_instance(this,p_only_net_no_arr,p_pullt_min_move,p_tlimit,p_keep_point);  pull_tight_algo.optimize_changed_area(p_trace_cost_arr);  gdi_update_join(changed_area.surrounding_box());  changed_area.clear(get_layer_count());}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.greaterThan(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  Node commentImport;  Node commentToImport;  String nodeValue;  doc=(Document)load("staffNS",true);  docImp=(Document)load("staffNS",true);  commentToImport=doc.createComment("Document.importNode test for a COMMENT_NODE");  commentImport=doc.importNode(commentToImport,true);  nodeValue=commentImport.getNodeValue();  assertEquals("documentimportnode17","Document.importNode test for a COMMENT_NODE",nodeValue);}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){synchronized (comp.getTreeLock()) {    if ((constraints == null) || (constraints instanceof String)) {      addLayoutComponent((String)constraints,comp);    } else {      throw new IllegalArgumentException("cannot add to layout: constraint must be a string (or null)");    }  }}  }
class C{  public static void hideSoftKeyBoard(Context context,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  public static WhereBuilder b(){  return new WhereBuilder();}  }
class C{  public E peek(){  final Node<E> f=first;  return (f == null) ? null : f.item;}  }
class C{  public PerlinNoiseGenerator(long seed){  this(new Random(seed));}  }
class C{  public static boolean containsAny(final String value,final String[] needles,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return Arrays.stream(needles).anyMatch(null);}  }
class C{  private void load() throws IOException {  StringBuilder buf=new StringBuilder();  FileReader reader=new FileReader(file);  BufferedReader in=new BufferedReader(reader);  String line;  while ((line=in.readLine()) != null) {    buf.append(line).append(Constants.LINE_SEPARATOR);  }  reader.close();  contents=buf.toString();  lowerCaseContents=contents.toLowerCase();}  }
class C{  public static boolean releaseLock(String lockFile,StringBuilder failureReason){synchronized (mapLock) {    FileLock lock=exclusiveLocks.remove(lockFile);    if (lock != null) {      try {        lock.release();      } catch (      Exception e) {        logger.traceException(e);        failureReason.append(ERR_FILELOCKER_UNLOCK_EXCLUSIVE_FAILED_RELEASE.get(lockFile,getExceptionMessage(e)));        return false;      }      try {        lock.channel().close();      } catch (      Exception e) {        logger.traceException(e);      }      return true;    }    lock=sharedLocks.get(lockFile);    if (lock != null) {      int refCount=sharedLockReferences.get(lockFile);      refCount--;      if (refCount <= 0) {        sharedLocks.remove(lockFile);        sharedLockReferences.remove(lockFile);        try {          lock.release();        } catch (        Exception e) {          logger.traceException(e);          failureReason.append(ERR_FILELOCKER_UNLOCK_SHARED_FAILED_RELEASE.get(lockFile,getExceptionMessage(e)));          return false;        }        try {          lock.channel().close();        } catch (        Exception e) {          logger.traceException(e);        }      } else {        sharedLockReferences.put(lockFile,refCount);      }      return true;    }    failureReason.append(ERR_FILELOCKER_UNLOCK_UNKNOWN_FILE.get(lockFile));    return false;  }}  }
class C{  private static boolean isFinalSigma(char[] value,int offset,int count,int index){  if (index <= offset) {    return false;  }  char previous=value[index - 1];  if (!(Character.isLowerCase(previous) || Character.isUpperCase(previous) || Character.isTitleCase(previous))) {    return false;  }  if (index + 1 >= offset + count) {    return true;  }  char next=value[index + 1];  if (Character.isLowerCase(next) || Character.isUpperCase(next) || Character.isTitleCase(next)) {    return false;  }  return true;}  }
class C{  public static boolean isServerInstanceExist(SSOToken ssoToken,String instanceName) throws SMSException, SSOException {  Set servers=getServers(ssoToken);  return servers.contains(instanceName);}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  @Override public void recycle(){  compressionStream=null;}  }
class C{  public CrlClientOnline(String... crls){  for (  String url : crls) {    addUrl(url);  }}  }
class C{  private void ekskey(byte data[],byte key[]){  int i;  int koffp[]={0}, doffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext sslContext;  for (int i=0; i < validValues.length; i++) {    sslContext=SSLContext.getInstance(validValues[i],defaultProvider);    assertNotNull("Not SSLContext created",sslContext);    assertEquals("Invalid protocol",validValues[i],sslContext.getProtocol());    assertEquals("Invalid provider",defaultProvider,sslContext.getProvider());  }}  }
class C{  public void sendApikeyToKafka(ApplicationManager am,String operation,String tenantId,String apiKey) throws IOException {  if (!ApplicationManager.LOCAL) {    am.getKafkaProducer().send(new ProducerRecord<String,String>(am.getApiKeyTopic(),Utils.buildEvent(operation,tenantId,apiKey).toString()));    logger.info("Wrote rule update to Kafka");  } else {    PrintWriter pr=new PrintWriter(new FileWriter(HENDRIX_APIKEY_UPDATES_TXT.replaceFirst("^~",System.getProperty("user.home")),true));    pr.println(Utils.buildEvent(operation,tenantId,apiKey).toString());    pr.close();  }}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridy=0;  gbc.gridx=0;  JLabel l=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_ATTRIBUTE_NAME_LABEL.get());  add(l,gbc);  gbc.gridx++;  gbc.insets.left=10;  gbc.fill=GridBagConstraints.NONE;  attrName=Utilities.createDefaultLabel();  add(attrName,gbc);  gbc.gridx++;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets.left=0;  gbc.weightx=1.0;  add(Box.createHorizontalGlue(),gbc);  gbc.gridwidth=3;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets.top=10;  gbc.gridy++;  gbc.gridx=0;  lBase64=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_VALUE_IN_BASE_64_LABEL.get());  add(lBase64,gbc);  gbc.gridy++;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1.0;  base64=Utilities.createLongTextField();  add(base64,gbc);  imagePreview=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_IMAGE_PREVIEW_LABEL.get());  gbc.gridy++;  gbc.weightx=0.0;  gbc.weighty=0.0;  add(imagePreview,gbc);  gbc.gridy++;  gbc.weightx=0.0;  gbc.weighty=0.0;  gbc.insets.top=5;  add(lImage,gbc);  addBottomGlue(gbc);}  }
class C{  public void unsetPermission(Permission perm){  unsetPermission(perm.getName());}  }
class C{  public DelegatingCallableStatement(final DelegatingConnection<?> c,final CallableStatement s){  super(c,s);}  }
class C{  protected int checkLastLogin(){  DateFormat formatter=new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");  Date now=newDate();  Date loginTime=null;  String lastLoginEnc=null;  String lastLogin=null;  String savedUserName=null;  int retVal=0;  if (timeSinceLastLoginAttribute != null) {    HttpServletRequest req=getHttpServletRequest();    if (req != null) {      Cookie cookie=CookieUtils.getCookieFromReq(req,timeSinceLastLoginAttribute);      if (cookie != null) {        if (debug.messageEnabled()) {          debug.message("{}.checkLastLogin: Found Cookie : {}",ADAPTIVE,timeSinceLastLoginAttribute);        }        lastLoginEnc=CookieUtils.getCookieValue(cookie);        lastLogin=AccessController.doPrivileged(new DecodeAction(lastLoginEnc));      }      if (lastLogin != null) {        String[] tokens=lastLogin.split("\\|");        if (tokens.length == 3) {          lastLogin=tokens[1];          savedUserName=tokens[2];        }        if (!userName.equalsIgnoreCase(savedUserName)) {          lastLogin=null;        }        if (lastLogin != null) {          try {            loginTime=formatter.parse(lastLogin);            if ((now.getTime() - loginTime.getTime()) < timeSinceLastLoginValue * 1000 * 60* 60* 24L) {              retVal=timeSinceLastLoginScore;            }          } catch (          ParseException pe) {            if (debug.messageEnabled()) {              debug.message("{}.checkLastLogin: lastLogin '{}' can't be parsed",ADAPTIVE,lastLogin,pe);            }          }        }      }    }    if (timeSinceLastLoginSave) {      postAuthNMap.put("LOGINNAME",timeSinceLastLoginAttribute);      lastLogin=formatter.format(now);      lastLogin=UUID.randomUUID() + "|" + lastLogin+ "|"+ userName;      lastLoginEnc=AccessController.doPrivileged(new EncodeAction(lastLogin));      postAuthNMap.put("LOGINVALUE",lastLoginEnc);    }  }  if (!timeSinceLastLoginInvert) {    retVal=timeSinceLastLoginScore - retVal;  }  return retVal;}  }
class C{  @Nullable public static GrpcStreamingConfig createGrpcStreaming(DiagCollector diagCollector,PageStreamingConfigProto pageStreaming,Method method){  String resourcesFieldName=pageStreaming.getResponse().getResourcesField();  Field resourcesField=method.getOutputType().getMessageType().lookupField(resourcesFieldName);  GrpcStreamingType type=getGrpcStreamingType(diagCollector,method);  if (type == null) {    return null;  }  return new GrpcStreamingConfig(resourcesField,type);}  }
class C{  public void test_subList_empty(){  List al=new ArrayList();  al.add("one");  List emptySubList=al.subList(0,0);  try {    emptySubList.get(0);    fail("emptySubList.get(0) should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    emptySubList.set(0,"one");    fail("emptySubList.set(0,Object) should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  try {    emptySubList.remove(0);    fail("emptySubList.remove(0) should throw IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  @SuppressWarnings("unused") public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  public void unparsedEntityDecl(String name,String pubID,String sysID,String notationName) throws SAXException {  try {    DTDprolog();    m_writer.write("<!ENTITY ");    m_writer.write(name);    if (pubID != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(pubID);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(sysID);    }    m_writer.write("\" NDATA ");    m_writer.write(notationName);    m_writer.write(" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static String execAndGetOutput(ProcessBuilder builder) throws IOException {  Process process=builder.start();  ExecutorService executorService=Executors.newFixedThreadPool(2);  try {    Future<String> errFuture=executorService.submit(streamToStringCallable(process.getErrorStream()));    Future<String> outFuture=executorService.submit(streamToStringCallable(process.getInputStream()));    Throwable failure;    String out="";    try {      out=outFuture.get(30,TimeUnit.SECONDS);      String err=errFuture.get(30,TimeUnit.SECONDS);      failure=err.length() > 0 ? new AssertionFailedError("Unexpected err stream data:\n" + err) : null;    } catch (    Exception e) {      failure=e;    }    if (failure != null) {      AssertionFailedError error=new AssertionFailedError("Failed to execute " + builder.command() + "; output was:\n"+ out);      error.initCause(failure);      throw error;    } else {      return out;    }  }  finally {    executorService.shutdown();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element firstNode;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Attr setAttr;  Node setNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  firstNode=(Element)elementList.item(0);  domesticAttr=doc.createAttribute("title");  domesticAttr.setValue("Y\u03b1");  setAttr=firstNode.setAttributeNode(domesticAttr);  elementList=doc.getElementsByTagName("acronym");  testNode=elementList.item(2);  attributes=testNode.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(domesticAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public static boolean isValidInitialStatus(ServerStatus initStatus){switch (initStatus) {case NORMAL_STATUS:case DEGRADED_STATUS:case BAD_GEN_ID_STATUS:    return true;}return false;}  }
class C{  public Modification generateMod(){  AttributeBuilder builder=new AttributeBuilder(attrDesc.getAttributeType(),attrString);  builder.setOptions(attrDesc.getOptions());  if (histKey != ATTRDEL) {    builder.add(attributeValue);  }  Attribute attr=builder.toAttribute();switch (histKey) {case ADD:    return new Modification(ModificationType.ADD,attr);case DEL:case ATTRDEL:  return new Modification(ModificationType.DELETE,attr);case REPL:return new Modification(ModificationType.REPLACE,attr);default :return null;}}  }
class C{  public IsActiveActionHandler(SSOTokenManager ssoTokenManager,SessionResourceUtil sessionResourceUtil){  this.ssoTokenManager=ssoTokenManager;  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public XPathException(String message,Exception e){  super(message);  this.m_exception=e;}  }
class C{  public void schemaChanged(String serviceName,String version){}  }
class C{  private void parse_var() throws SyntaxException {  String content=((Element)current).getContent();  if (!modifiers.isEmpty() || !annos.isEmpty()) {    if (usedVarNames.contains(content)) {      err.DuplicateVariableNameException(content,current.getLineCol());      err.debug("assume that it's an unused name");    }    VariableDef def=new VariableDef(content,modifiers,annos,current.getLineCol());    annos.clear();    modifiers.clear();    usedVarNames.add(content);    parsedExps.push(def);  } else {    AST.Access access=new AST.Access(null,content,current.getLineCol());    parsedExps.push(access);  }  nextNode(true);  parse_expression();}  }
class C{  private List<Statement> parseElemStart(ElementStartNode startNode,boolean addUsedNames,Set<String> names,boolean parseMap) throws SyntaxException {  Parser parser=new Parser(startNode,err);  if (addUsedNames) {    parser.addUsedVarNames(usedVarNames);    parser.addUsedVarNames(names);  }  parser.isParsingMap=parseMap;  parser.annotationAsExpression=this.annotationAsExpression;  return parser.parse();}  }
class C{  @DataProvider(name="invalidCommandLineArgs") public Object[][] createInvalidCommandLineArgs(){  return new Object[][]{{new String[]{"sub-command1","one"}},{new String[]{"sub-command1","one","two"}},{new String[]{"sub-command2"}},{new String[]{"sub-command2","one"}},{new String[]{"sub-command2","one","two","three","four","five"}}};}  }
class C{  public Scanner(Path source,String charsetName) throws IOException {  this(Objects.requireNonNull(source),toCharset(charsetName));}  }
class C{  public static PropertyException propertyIsSingleValuedException(final PropertyDefinition<?> pd){  return new PropertyException(pd,ERR_PROPERTY_IS_SINGLE_VALUED_EXCEPTION.get(pd.getName()));}  }
class C{  private void removeAttributesFromEntry(SSOToken token,String dn,AttrSet attrSet) throws UMSException {  PersistentObject po=UMSObject.getObjectHandle(token,new Guid(dn));  int size=attrSet.size();  for (int i=0; i < size; i++) {    Attr attr=attrSet.elementAt(i);    po.modify(attr,ModificationType.DELETE);  }  po.save();}  }
class C{  public ThreadPoolException(String msg){  super(msg);}  }
class C{  static String format(String msg,Object[] msgArgs){  StringBuilder buffer=new StringBuilder();  Object[] decoratedArgs=decorateMessageArgs(msgArgs);  if (msg == null) {    concatenateArgs(decoratedArgs,buffer);    return buffer.toString();  }  try {    return String.format(msg,decoratedArgs);  } catch (  IllegalFormatException e) {    buffer.append(msg);    concatenateArgs(decoratedArgs,buffer);    return buffer.toString();  }}  }
class C{  public ResponseProviderXMLBuilder(ResponseProvider provider,AMModel model){  this.model=model;  this.provider=provider;}  }
class C{  public static final long fileTimeToWinTime(FileTime ftime){  return (ftime.to(TimeUnit.MICROSECONDS) - WINDOWS_EPOCH_IN_MICROSECONDS) * 10;}  }
class C{  @Inject public PolicyPrivilegeManager(ApplicationServiceFactory applicationServiceFactory,ResourceTypeService resourceTypeService,ConstraintValidator constraintValidator,NotificationBroker broker){  super(applicationServiceFactory,resourceTypeService,constraintValidator);  this.broker=broker;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("Plugin name: ").append(getName());  sb.append("\n\tAttributes: ").append(getAttributes()).append("\n");  return (sb.toString());}  }
class C{  public boolean isConnected(){  return isConnected;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.SecurityTokenType createSecurityTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SecurityTokenTypeImpl();}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<>(key,value);}  }
class C{  public final boolean isErrorEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR);}  }
class C{  protected void notifySchemaSelectionListeners(Object schemaElement){  for (  SchemaElementSelectionListener listener : listeners) {    listener.schemaElementSelected(new SchemaElementSelectionEvent(this,schemaElement));  }}  }
class C{  @Override public void memberDisappeared(Member member){  try {    hasMembers=channel.hasMembers();    if (log.isInfoEnabled())     log.info(sm.getString("simpleTcpCluster.member.disappeared",member));    fireLifecycleEvent(BEFORE_MEMBERUNREGISTER_EVENT,member);    unregisterMember(member);    fireLifecycleEvent(AFTER_MEMBERUNREGISTER_EVENT,member);  } catch (  Exception x) {    log.error(sm.getString("simpleTcpCluster.member.removeFailed"),x);  }}  }
class C{  public SASLRequest(String mechanism){  this.mechanism=mechanism;}  }
class C{  void sendFile(PrintStream ps) throws IOException {  if (testNum == -1) {    if (!Support_TestWebData.test0DataAvailable) {      log("test data was not initialized");      return;    }    sendFile(ps,Support_TestWebData.test0Data);  } else {    sendFile(ps,Support_TestWebData.tests[testNum]);  }}  }
class C{  public boolean append(double p_value){  Float value=(float)coordinate_transform.board_to_user(p_value);  return append(number_format.format(value));}  }
class C{  private void write(int c) throws IOException {  writer.write(c);}  }
class C{  private Object readResolve(){  if (getDescriptor().getFieldNames().length == 0) {    return new OpenMBeanOperationInfoSupport(name,description,arrayCopyCast(getSignature()),returnOpenType,getImpact());  } else   return this;}  }
class C{  public static boolean hasBody(Response response){  if (response.request().method().equals("HEAD")) {    return false;  }  int responseCode=response.code();  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HTTP_NO_CONTENT && responseCode != HTTP_NOT_MODIFIED) {    return true;  }  if (OkHeaders.contentLength(response) != -1 || "chunked".equalsIgnoreCase(response.header("Transfer-Encoding"))) {    return true;  }  return false;}  }
class C{  public void startRule(){  if (selectorTokens.size() > 0) {    addSelector();  }  propertyName=null;}  }
class C{  @Override public void showProgress(){  if (mShotRecycler.getVisibility() == View.VISIBLE && mBrowseAdapter.getItemCount() > 0) {    mSwipeRefreshLayout.setRefreshing(true);  } else {    mRecyclerProgress.setVisibility(View.VISIBLE);  }}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public void onFedletSLOFailure(HttpServletRequest request,HttpServletResponse response,LogoutRequest logoutReq,LogoutResponse logoutRes,String hostedEntityID,String idpEntityID,String binding) throws SAML2Exception {  onFedletSLOSuccessOrFailure(request,response,logoutReq,logoutRes,hostedEntityID,idpEntityID,binding,false);  return;}  }
class C{  synchronized void receive(byte b[],int off,int len) throws IOException {  checkStateForReceive();  writeSide=Thread.currentThread();  int bytesToTransfer=len;  while (bytesToTransfer > 0) {    if (in == out)     awaitSpace();    int nextTransferAmount=0;    if (out < in) {      nextTransferAmount=buffer.length - in;    } else     if (in < out) {      if (in == -1) {        in=out=0;        nextTransferAmount=buffer.length - in;      } else {        nextTransferAmount=out - in;      }    }    if (nextTransferAmount > bytesToTransfer)     nextTransferAmount=bytesToTransfer;    assert (nextTransferAmount > 0);    System.arraycopy(b,off,buffer,in,nextTransferAmount);    bytesToTransfer-=nextTransferAmount;    off+=nextTransferAmount;    in+=nextTransferAmount;    if (in >= buffer.length) {      in=0;    }  }}  }
class C{  public GenericGF(int primitive,int size,int b){  this.primitive=primitive;  this.size=size;  this.generatorBase=b;  expTable=new int[size];  logTable=new int[size];  int x=1;  for (int i=0; i < size; i++) {    expTable[i]=x;    x*=2;    if (x >= size) {      x^=primitive;      x&=size - 1;    }  }  for (int i=0; i < size - 1; i++) {    logTable[expTable[i]]=i;  }  zero=new GenericGFPoly(this,new int[]{0});  one=new GenericGFPoly(this,new int[]{1});}  }
class C{  public void removeCellEditorListener(CellEditorListener l){  listenerList.remove(CellEditorListener.class,l);}  }
class C{  protected String persist(StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.persist(printWriter,smClient);  return stringWriter.toString();}  }
class C{  private void parseTagDependentBody(Node parent,String tag) throws JasperException {  Mark bodyStart=reader.mark();  Mark bodyEnd=reader.skipUntilETag(tag);  if (bodyEnd == null) {    err.jspError(start,"jsp.error.unterminated","&lt;" + tag);  }  @SuppressWarnings("unused") Node unused=new Node.TemplateText(reader.getText(bodyStart,bodyEnd),bodyStart,parent);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_WATCHED_VIDEO\"";  db.execSQL(sql);}  }
class C{  public ActivationGroupDesc(String className,String location,MarshalledObject<?> data,Properties overrides,CommandEnvironment cmd){  this.props=overrides;  this.env=cmd;  this.data=data;  this.location=location;  this.className=className;}  }
class C{  public UserPasswordAttribute(byte[] octets){  super(octets);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.BodyElement createBodyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.BodyElementImpl();}  }
class C{  public boolean isNewChunk(){  return newChunk;}  }
class C{  private void processParameters(){  InputStream is=null;  try {    String errorID;    if (wmf.getData() == null) {      is=wmf.getUrl().openStream();      errorID=wmf.getUrl().toString();    } else {      is=new java.io.ByteArrayInputStream(wmf.getData());      errorID="Byte array";    }    InputMeta in=new InputMeta(is);    if (in.readInt() != 0x9AC6CDD7) {      throw new PdfException(PdfException._1IsNotAValidPlaceableWindowsMetafile,errorID);    }    in.readWord();    int left=in.readShort();    int top=in.readShort();    int right=in.readShort();    int bottom=in.readShort();    int inch=in.readWord();    wmf.setDpi(72,72);    wmf.setHeight((float)(bottom - top) / inch * 72f);    wmf.setWidth((float)(right - left) / inch * 72f);  } catch (  IOException e) {    throw new PdfException(PdfException.WmfImageException);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public Task partialQuery(TokenFilter filter,ResultHandler<Collection<PartialToken>,?> handler){  return new PartialQueryTask(filter,handler);}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  @Deprecated public void enableResizedPosting(){  resizedPostingDisableCount--;}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,Object content) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPResponse sipResponse=new SIPResponse();  StatusLine statusLine=new StatusLine();  statusLine.setStatusCode(statusCode);  String reason=SIPResponse.getReasonPhrase(statusCode);  if (reason == null)   throw new ParseException(statusCode + " Unknown",0);  statusLine.setReasonPhrase(reason);  sipResponse.setStatusLine(statusLine);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setContent(content,contentType);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public static double toRadians(double angdeg){  return angdeg / 180.0 * PI;}  }
class C{  @Override public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  AttributeLookupCondition object=(AttributeLookupCondition)obj;  if (key == null) {    if (object.key != null) {      return false;    }  } else {    if (!key.equals(object.key)) {      return false;    }  }  if (value == null) {    if (object.value != null) {      return false;    }  } else {    if (!value.equals(object.value)) {      return false;    }  }  if (pConditionName == null) {    if (object.pConditionName != null) {      return false;    }  } else {    if (!pConditionName.equals(object.pConditionName)) {      return false;    }  }  return true;}  }
class C{  public static Map<String,Set<String>> toSmsMap(Map<String,Object> jsonMap){  Map<String,Set<String>> smsMap=new HashMap<String,Set<String>>(jsonMap.size());  for (  Map.Entry<String,Object> entry : jsonMap.entrySet()) {    if (entry.getValue() != null) {      smsMap.put(entry.getKey(),CollectionUtils.asSet(entry.getValue().toString()));    } else {      smsMap.put(entry.getKey(),Collections.EMPTY_SET);    }  }  return smsMap;}  }
class C{  private PolicyService processPolicyServiceRequest(PolicyService psReq,PLLAuditor auditor) throws PolicyEvaluationException {  PolicyService psRes=null;  if (psReq == null) {    debug.error("PolicyRequestHandler." + "processPolicyServiceRequest(): " + " null psReq");    throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_policy_request_type",null,null);  }  if (psReq.getMethodID() == PolicyService.POLICY_REQUEST_ID) {    PolicyRequest policyReq=psReq.getPolicyRequest();    if (policyReq == null) {      debug.error("PolicyRequestHandler." + "processPolicyServiceRequest(): " + " null policyRequest");      throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_policy_request_type",null,null);    }    psRes=new PolicyService();    psRes.setRevision(getPolicyServiceRevision());    PolicyResponse policyRes=processPolicyRequest(policyReq,auditor);    policyRes.setIssueInstant(currentTimeMillis());    psRes.setMethodID(PolicyService.POLICY_RESPONSE_ID);    psRes.setPolicyResponse(policyRes);    return psRes;  }  debug.error("PolicyRequestHandler.processPolicyServiceRequest(): " + "invalid policy request type");  throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_policy_request_type",null,null);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  public final void testReadbyteArrayintint05() throws IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      dis.on(false);      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        dis.read(bArray,i * CHUNK_SIZE,CHUNK_SIZE);      }      assertTrue(Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private int peekType(boolean inDeclaration) throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    return END_DOCUMENT;  }switch (buffer[position]) {case '&':    return ENTITY_REF;case '<':  if (position + 3 >= limit && !fillBuffer(4)) {    throw new XmlPullParserException("Dangling <",this,null);  }switch (buffer[position + 1]) {case '/':  return END_TAG;case '?':if ((position + 5 < limit || fillBuffer(6)) && (buffer[position + 2] == 'x' || buffer[position + 2] == 'X') && (buffer[position + 3] == 'm' || buffer[position + 3] == 'M')&& (buffer[position + 4] == 'l' || buffer[position + 4] == 'L')&& (buffer[position + 5] == ' ')) {  return XML_DECLARATION;} else {  return PROCESSING_INSTRUCTION;}case '!':switch (buffer[position + 2]) {case 'D':return DOCDECL;case '[':return CDSECT;case '-':return COMMENT;case 'E':switch (buffer[position + 3]) {case 'L':return ELEMENTDECL;case 'N':return ENTITYDECL;}break;case 'A':return ATTLISTDECL;case 'N':return NOTATIONDECL;}throw new XmlPullParserException("Unexpected <!",this,null);default :return START_TAG;}case '%':return inDeclaration ? PARAMETER_ENTITY_REF : TEXT;default :return TEXT;}}  }
class C{  public static IOFileFilter sizeFileFilter(long threshold){  return new SizeFileFilter(threshold);}  }
class C{  protected NameIdentifier(){}  }
class C{  public SearchTemplate(String name,AttrSet attrSet,String filter){  super(name);  setAttributeSet(attrSet);  setSearchFilter(filter);}  }
class C{  public void test_indexOfLjava_lang_ObjectI(){  assertTrue("Failed to find correct index",(tVector.indexOf("Test 98",50) == 98));  assertTrue("Found index of bogus element",(tVector.indexOf("Test 1001",50) == -1));  tVector.setElementAt(null,20);  tVector.setElementAt(null,40);  tVector.setElementAt(null,60);  assertTrue("a) Incorrect indexOf returned for null: " + tVector.indexOf(null,25),tVector.indexOf(null,25) == 40);  assertTrue("b) Incorrect indexOf returned for null: " + tVector.indexOf(null,20),tVector.indexOf(null,20) == 20);  try {    tVector.indexOf(null,-1);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  public void postActionEvent(){  fireActionPerformed();}  }
class C{  public static int mainRestoreDB(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  RestoreDB tool=new RestoreDB();  return tool.process(args,initializeServer,outStream,errStream);}  }
class C{  public JKPanelGridRenderer(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS09.class,args);}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public synchronized void clearCache(){  idRepoCache.clear();  initializeCache();}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  private void addGroups() throws Exception {  TestCaseUtils.addEntries("dn: cn=Test Group,o=test","objectClass: top","objectClass: groupOfUniqueNames","cn: Test Group","uniqueMember: o=test","","dn: cn=Example Group,o=test","objectClass: top","objectClass: groupOfUniqueNames","cn: Example Group","uniqueMember: dc=example,dc=com");}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public void processPackageRemoved(String[] packages){  HashSet<String> packageSet=new HashSet<String>();  getUserApps(packageSet);  boolean packageRemoved=false;  for (  String packageName : packages) {    if (packageSet.remove(packageName)) {      packageRemoved=true;    }  }  if (packageRemoved) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();  }}  }
class C{  @Override public AttributeSchemaImpl upgradeAttribute(AttributeSchemaImpl newAttr) throws UpgradeException {  return updateDefaultValues(newAttr,Collections.singleton(OLDEST_VERSION));}  }
class C{  protected synchronized void beforeStart(){  try {    fixDocBase();  } catch (  IOException e) {    log.error(sm.getString("contextConfig.fixDocBase",context.getName()),e);  }  antiLocking();}  }
class C{  private void addOriginAndCredsHeaders(final HttpServletResponse res,final String originHeader){  if (allowCredentials) {    res.setHeader(CORSConstants.VARY,CORSConstants.ORIGIN);    res.setHeader(CORSConstants.AC_ALLOW_ORIGIN,originHeader);    res.setHeader(CORSConstants.AC_ALLOW_CREDS,CORSConstants.AC_CREDENTIALS_TRUE);  } else {    if (acceptedOrigins.contains(CORSConstants.ALL)) {      res.setHeader(CORSConstants.AC_ALLOW_ORIGIN,CORSConstants.ALL);    } else {      res.setHeader(CORSConstants.AC_ALLOW_ORIGIN,originHeader);    }  }}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  protected void dispose(){  parent.getChildren().removeAll(spriteFrame,spriteBounds);  spriteFrame=null;  spriteBounds=null;  playerStates=null;  parent=null;  stageFloorBase=null;  xPos=yPos=xVel=accel=frameControl=0;  initBlast=false;  isReadyForRemoval=true;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5});}  }
class C{  @Override public void cancelCall(){  getCall().cancel();}  }
class C{  public AMAccessAuditEventBuilder requestDetail(JsonValue detail){  return addDetail(detail,REQUEST);}  }
class C{  public int period(){  return values.period;}  }
class C{  public boolean isInnerClass(){  return outer != null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported02.class,args);}  }
class C{  public void put(byte[] buffer,int offset,int count){  if (count > (bytes.length - this.contentLength)) {    throw new IllegalArgumentException("buffer is too large");  }  System.arraycopy(buffer,offset,bytes,this.contentLength,count);  this.contentLength+=count;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("Signature.DSA");  for (int i=0; i < providers.length; i++) {    Signature.getInstance("DSA",providers[i].getName());  }  try {    Signature.getInstance("bogus",providers[0].getName());    fail();  } catch (  NoSuchAlgorithmException expected) {  }  Provider[] pp=Security.getProviders();  for (int i=0; i < pp.length; i++) {    try {      Signature.getInstance("DSA",pp[i].toString());      fail(pp[i].toString());    } catch (    NoSuchProviderException expected) {    }  }  String[] sp={null,""};  for (int i=0; i < sp.length; i++) {    try {      Signature.getInstance("DSA",sp[i]);      fail(sp[i]);    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  public boolean delete(Long parameterID){  if (parameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_ACTIONPARAMETERID + "=" + parameterID,null) > 0;}  }
class C{  public DataFormatException(String s){  super(s);}  }
class C{  ServerManagedObject(final ManagedObjectPath<?,S> path,final ManagedObjectDefinition<?,S> definition,final Map<PropertyDefinition<?>,SortedSet<?>> properties,final DN configDN,final ServerManagementContext context){  this.definition=definition;  this.path=path;  this.properties=properties;  this.configDN=configDN;  this.serverContext=context;  this.configRepository=context.getConfigRepository();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(cdatasectionnormalize.class,args);}  }
class C{  public void decrement(){  int counterVal=counter.decrementAndGet();  if (counterVal == 0) {    if (null != resourceCallback) {      resourceCallback.onTransitionToIdle();    }  }  if (counterVal < 0) {    throw new IllegalArgumentException("Counter has been corrupted!");  }}  }
class C{  public MonitorRequestMsg(int serverID,int destination){  this.senderID=serverID;  this.destination=destination;}  }
class C{  public BasicHttpProcessor copy(){  BasicHttpProcessor clone=new BasicHttpProcessor();  copyInterceptors(clone);  return clone;}  }
class C{  public static void makeTypeInfoBits(ErrorCorrectionLevel ecLevel,int maskPattern,BitVector bits) throws WriterException {  if (!QRCode.isValidMaskPattern(maskPattern)) {    throw new WriterException("Invalid mask pattern");  }  int typeInfo=(ecLevel.getBits() << 3) | maskPattern;  bits.appendBits(typeInfo,5);  int bchCode=calculateBCHCode(typeInfo,TYPE_INFO_POLY);  bits.appendBits(bchCode,10);  BitVector maskBits=new BitVector();  maskBits.appendBits(TYPE_INFO_MASK_PATTERN,15);  bits.xor(maskBits);  if (bits.size() != 15) {    throw new WriterException("should not happen but we got: " + bits.size());  }}  }
class C{  static boolean isHighUTF16Surrogate(char ch){  return ('\uD800' <= ch && ch <= '\uDBFF');}  }
class C{  private long tryIncReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      ++readerOverflow;      state=s;      return s;    }  } else   if ((LockSupport.nextSecondarySeed() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatamiddle.class,args);}  }
class C{  public int activeGroupCount(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    if (destroyed) {      return 0;    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  int n=ngroupsSnapshot;  for (int i=0; i < ngroupsSnapshot; i++) {    n+=groupsSnapshot[i].activeGroupCount();  }  return n;}  }
class C{  public static Properties readPropertiesFile(String fileName){  InputStream in=getInputStream(fileName);  if (in != null) {    return readPropertiesStream(in);  }  return new Properties();}  }
class C{  public MissingLicenseException(String licenseName){  super("A required license could not be found: " + licenseName);  this.licenseName=licenseName;}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  getHandler().mouseWheelMoved(e);}  }
class C{  private static void readFrame(GifParameters gif) throws java.io.IOException {  gif.ix=readShort(gif);  gif.iy=readShort(gif);  gif.iw=readShort(gif);  gif.ih=readShort(gif);  int packed=gif.input.read();  gif.lctFlag=(packed & 0x80) != 0;  gif.interlace=(packed & 0x40) != 0;  gif.lctSize=2 << (packed & 7);  gif.m_bpc=newBpc(gif.m_gbpc);  if (gif.lctFlag) {    gif.m_curr_table=readColorTable((packed & 7) + 1,gif);    gif.m_bpc=newBpc((packed & 7) + 1);  } else {    gif.m_curr_table=gif.m_global_table;  }  if (gif.transparency && gif.transIndex >= gif.m_curr_table.length / 3)   gif.transparency=false;  if (gif.transparency && gif.m_bpc == 1) {    byte[] tp=new byte[12];    System.arraycopy(gif.m_curr_table,0,tp,0,6);    gif.m_curr_table=tp;    gif.m_bpc=2;  }  boolean skipZero=decodeImageData(gif);  if (!skipZero)   skip(gif);  try {    Object[] colorspace=new Object[4];    colorspace[0]="/Indexed";    colorspace[1]="/DeviceRGB";    int len=gif.m_curr_table.length;    colorspace[2]=len / 3 - 1;    colorspace[3]=PdfEncodings.convertToString(gif.m_curr_table,null);    Map<String,Object> ad=new HashMap<>();    ad.put("ColorSpace",colorspace);    RawImageData img=new RawImageData(gif.m_out,ImageType.NONE);    RawImageHelper.updateRawImageParameters(img,gif.iw,gif.ih,1,gif.m_bpc,gif.m_out);    RawImageHelper.updateImageAttributes(img,ad);    gif.image.addFrame(img);    if (gif.transparency) {      img.setTransparency(new int[]{gif.transIndex,gif.transIndex});    }  } catch (  Exception e) {    throw new IOException(IOException.GifImageException,e);  }}  }
class C{  @Override protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text" || ((propertyName == "font" || propertyName == "foreground") && oldValue != newValue && getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey) != null)) {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public void initialize(KeyProvider keyprovider) throws EncryptionException {  if (keyprovider == null) {    EncryptionUtils.debug.error("AMSignatureProvider.initialize: " + "keyprovider is null");    throw new EncryptionException(EncryptionUtils.bundle.getString("nullValues"));  }  this.keyProvider=keyprovider;}  }
class C{  public AcceptPendingException(){}  }
class C{  public BindOperation processSASLBind(DN bindDN,String saslMechanism,ByteString saslCredentials,List<Control> controls){  BindOperationBasis bindOperation=new BindOperationBasis(this,nextOperationID(),nextMessageID(),controls,PROTOCOL_VERSION,bindDN,saslMechanism,saslCredentials);  bindOperation.setInternalOperation(true);  bindOperation.run();  return bindOperation;}  }
class C{  private static String hideOrgUnits(String orgUnitDN){  String ou=getNamingAttrForOrgUnit();  if (!orgUnitDN.startsWith(ou)) {    return orgUnitDN;  }  DN result=DN.rootDN();  DN rdns=DN.valueOf(orgUnitDN);  for (int i=rdns.size() - 1; i >= 0; i--) {    RDN rdn=rdns.parent(i).rdn();    if (rdnType(rdn).equals(ou)) {      result=result.child(new RDN(ou,SMSEntry.SUN_INTERNAL_REALM_NAME + rdnValue(rdn)));    } else {      result=result.child(rdn);    }  }  return result.toString();}  }
class C{  public static Border createBlackLineBorder(){  if (blackLine == null) {    blackLine=new LineBorder(Color.black,1);  }  return blackLine;}  }
class C{  public void sendHOTP() throws AuthLoginException {  try {    sentHOTPCode=HOTPAlgorithm.generateOTP(getSharedSecret(),getMovingFactor(),codeLength,false,16);  } catch (  NoSuchAlgorithmException e) {    DEBUG.error("HOTP.sendHOTPCode() : " + "no such algorithm",e);    throw new AuthLoginException("amAuth","noSuchAlgorithm",null);  }catch (  InvalidKeyException e) {    DEBUG.error("HOTP.sendHOTPCode() : " + "invalid key",e);    throw new AuthLoginException("amAuth","invalidKey",null);  }  sendHOTP(sentHOTPCode,messageSubject,messageContent);  sentHOTPCodeTime=currentTimeMillis();}  }
class C{  @Override public int doRead(ByteChunk chunk) throws IOException {  if (hasRead || buffered.getLength() <= 0) {    return -1;  }  chunk.setBytes(buffered.getBytes(),buffered.getStart(),buffered.getLength());  hasRead=true;  return chunk.getLength();}  }
class C{  public AsfTagField(final String fieldKey){  assert fieldKey != null;  this.toWrap=new MetadataDescriptor(AsfFieldKey.getAsfFieldKey(fieldKey).getHighestContainer(),fieldKey,MetadataDescriptor.TYPE_STRING);}  }
class C{  private SNMPMonitor(MBeanServer server){  this.server=server;  this.subject=new Subject();  this.subject.getPrincipals().add(new OpendsJmxPrincipal("cn=anonymous"));  InternalClientConnection clientConnection=InternalClientConnection.getRootConnection();  this.subject.getPrivateCredentials().add(new Credential(clientConnection));}  }
class C{  public MBeanServerNotificationFilter(){  super();  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"MBeanServerNotificationFilter");  enableType(MBeanServerNotification.REGISTRATION_NOTIFICATION);  enableType(MBeanServerNotification.UNREGISTRATION_NOTIFICATION);  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"MBeanServerNotificationFilter");  return;}  }
class C{  public static @Nonnull Set<String> replacementsIn(@Nonnull CpsFlowExecution execution) throws IOException {  Queue.Executable executable=execution.getOwner().getExecutable();  if (executable instanceof Run) {    ReplayFlowFactoryAction action=((Run)executable).getAction(ReplayFlowFactoryAction.class);    if (action != null) {      return action.replaceableScripts();    } else {      LOGGER.log(Level.FINE,"{0} was not a replay",executable);    }  } else {    LOGGER.log(Level.FINE,"{0} was not a run at all",executable);  }  return Collections.emptySet();}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? ExifInterface.GpsLatitudeRef.NORTH : ExifInterface.GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? ExifInterface.GpsLongitudeRef.EAST : ExifInterface.GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  public void registerRoutes(Router router){  container().getBeanManager().getExtension(RouteExtension.class).registerRoutes(router);}  }
class C{  public void testConstructor_IIInetAddress() throws Exception {  new mySSLServerSocket(0,0,null);  int[] port_invalid={-1,65536,Integer.MIN_VALUE,Integer.MAX_VALUE};  mySSLServerSocket ssl=new mySSLServerSocket(0,0,InetAddress.getLocalHost());  for (int i=0; i < port_invalid.length; i++) {    try {      new mySSLServerSocket(port_invalid[i],1,InetAddress.getLocalHost());      fail("IllegalArgumentException should be thrown");    } catch (    IllegalArgumentException expected) {    }  }  try {    new mySSLServerSocket(ssl.getLocalPort(),0,InetAddress.getLocalHost());    fail("IOException should be thrown for");  } catch (  IOException expected) {  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void testIssue564() throws Exception {  JsonFactory factory=new SmileFactory();  ByteArrayOutputStream bos1=new ByteArrayOutputStream();  JsonGenerator generator=factory.createGenerator(bos1);  generator.writeStartObject();  generator.writeFieldName("query");  generator.writeStartObject();  generator.writeFieldName("term");  generator.writeStartObject();  generator.writeStringField("doc.payload.test_record_main.string_not_analyzed__s","foo");  generator.writeEndObject();  generator.writeEndObject();  generator.writeEndObject();  generator.close();  JsonParser parser=factory.createParser(bos1.toByteArray());  JsonToken token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("query",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("term",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("doc.payload.test_record_main.string_not_analyzed__s",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.VALUE_STRING,token);  assertEquals("foo",parser.getText());  parser.close();  ByteArrayOutputStream bos2=new ByteArrayOutputStream();  generator=factory.createGenerator(bos2);  generator.writeStartObject();  generator.writeFieldName("query");  generator.writeStartObject();  generator.writeFieldName("term");  generator.writeStartObject();  generator.writeStringField("doc.payload.test_record_main.string_not_analyzed2__s","bar");  generator.writeEndObject();  generator.writeEndObject();  generator.writeEndObject();  generator.close();  parser=factory.createParser(bos2.toByteArray());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("query",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("term",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.START_OBJECT,token);  token=parser.nextToken();  assertToken(JsonToken.FIELD_NAME,token);  assertEquals("doc.payload.test_record_main.string_not_analyzed2__s",parser.getCurrentName());  token=parser.nextToken();  assertToken(JsonToken.VALUE_STRING,token);  assertEquals("bar",parser.getText());  parser.close();}  }
class C{  public static Foo findByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  private void checkActiveJobTtl(){  int timeout=config.getInteger("job.ttl.interval",1000);  int limit=config.getInteger("job.ttl.limit",1000);  vertx.setPeriodic(timeout,null);}  }
class C{  public COTException(String message){  super(message);}  }
class C{  @Deactivate void deactivate(ComponentContext compContext){  logger.debug("Deactivating Service {}",compContext);  shutdown();  configuredDataSourceService.set(null);  logger.info("Repository stopped.");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode04.class,args);}  }
class C{  public CompareOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawEntryDN,String rawAttributeType,ByteString assertionValue){  super(clientConnection,operationID,messageID,requestControls);  this.rawEntryDN=rawEntryDN;  this.rawAttributeType=rawAttributeType;  this.assertionValue=assertionValue;  responseControls=new ArrayList<>();  entryDN=null;  attributeDescription=null;  cancelRequest=null;  proxiedAuthorizationDN=null;}  }
class C{  public void removeStyle(String nm){  Style aStyle=getStyle(nm);  if (aStyle != null) {    String selector=cleanSelectorString(nm);    String[] selectors=getSimpleSelectors(selector);synchronized (this) {      SelectorMapping mapping=getRootSelectorMapping();      for (int i=selectors.length - 1; i >= 0; i--) {        mapping=mapping.getChildSelectorMapping(selectors[i],true);      }      Style rule=mapping.getStyle();      if (rule != null) {        mapping.setStyle(null);        if (resolvedStyles.size() > 0) {          Enumeration<ResolvedStyle> values=resolvedStyles.elements();          while (values.hasMoreElements()) {            ResolvedStyle style=values.nextElement();            style.removeStyle(rule);          }        }      }    }  }  super.removeStyle(nm);}  }
class C{  @Override public String toString(){  return "RefQueueWorker::" + this.workerThread;}  }
class C{  public boolean validate(Set<String> values){  boolean valid=true;  boolean globalFound=false;  if (!CollectionUtils.isEmpty(values)) {    for (    String val : values) {      if (!valid) {        break;      }      String trimmed=val.trim();      Matcher matcher=pattern.matcher(trimmed);      valid=matcher.matches();      Matcher globalMatcher=globalPattern.matcher(trimmed);      boolean globalMatch=globalMatcher.matches();      if (globalFound && globalMatch && valid) {        valid=false;      } else       if (globalMatch && valid) {        globalFound=true;      }    }  } else {    valid=false;  }  if (valid) {    valid=MapDuplicateKeyChecker.checkForNoDuplicateKeyInValue(values);  }  return valid;}  }
class C{  private void checkPostsDisplayOnRecyclerView(List<Shot> shotsToCheck,int position){  int columnCount=5;  int size=shotsToCheck.size() + position;  int pos=0;  for (int i=position; i < size; i++) {    checkItemAtPosition(i,shotsToCheck.get(pos));    if (((i + 1) % columnCount) == 0) {      int nextRowStart=i + columnCount;      int nextRowEnd=nextRowStart - columnCount + 1;      for (int n=nextRowStart; n >= nextRowEnd; n--) {        checkItemAtPosition(n,shotsToCheck.get(n - position));      }      i=i + columnCount;    }    pos++;  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.HttpDigestAuthenticationElement createHttpDigestAuthenticationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.HttpDigestAuthenticationElementImpl();}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public void testCompareEqualScale2(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=18;  String b="4573563923487289357829759278282992758247567890295784902768787678287";  int bScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=-1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  @Override void toXML(StringBuilder xml,int level){  indent(xml,level);  xml.append("<string>");  for (int i=0; i < bytes.length; i++) {    byte b=bytes[i];    if (b < 16)     xml.append("0");    xml.append(Integer.toHexString(b));  }  xml.append("</string>");}  }
class C{  public void testReceive_UnconnectedBufFull() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_ONE);  dst.put((byte)88);  assertEquals(dst.position(),dst.limit());  assertNull(this.channel1.receive(dst));}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  private static void addArguments(DefaultRequest request,Class<?> interfaceClass,String methodName,Object[] arguments){  Method targetMethod=null;  Method[] methods=interfaceClass.getDeclaredMethods();  for (  Method m : methods) {    if (m.getName().equalsIgnoreCase(methodName) && m.getParameterTypes().length == arguments.length) {      targetMethod=m;      break;    }  }  if (targetMethod == null) {    throw new MotanServiceException("cann't find request method. method name " + methodName);  }  request.setParamtersDesc(ReflectUtil.getMethodParamDesc(targetMethod));  if (arguments != null && arguments.length > 0) {    Class<?>[] argumentClazz=targetMethod.getParameterTypes();    request.setArguments(adaptParams(targetMethod,arguments,argumentClazz));  }}  }
class C{  public Builder removeAllAuxiliaryObjectClasses(){  this.auxiliaryClassOIDs.clear();  return this;}  }
class C{  public int namespaceIndex(String namespace,Vector extensions){  for (int i=0; i < extensions.size(); i++) {    if (((ExtensionNamespaceSupport)extensions.get(i)).getNamespace().equals(namespace))     return i;  }  return -1;}  }
class C{  private int expungeStaleEntry(int staleSlot){  Entry[] tab=table;  int len=tab.length;  tab[staleSlot].value=null;  tab[staleSlot]=null;  size--;  Entry e;  int i;  for (i=nextIndex(staleSlot,len); (e=tab[i]) != null; i=nextIndex(i,len)) {    ThreadLocal<?> k=e.get();    if (k == null) {      e.value=null;      tab[i]=null;      size--;    } else {      int h=k.threadLocalHashCode & (len - 1);      if (h != i) {        tab[i]=null;        while (tab[h] != null)         h=nextIndex(h,len);        tab[h]=e;      }    }  }  return i;}  }
class C{  public void Log(String tag,String msg,int level){  if (mDebug) {    if (TextUtils.isEmpty(msg)) {      throw new NullPointerException("The message is null!");    }    if (level < Constants.DEBUG_LEVEL_DEBUG && level > Constants.DEBUG_LEVEL_ERROR) {      throw new DebugException("Out of debug level!");    }switch (level) {case Constants.DEBUG_LEVEL_DEBUG:      Log.d(tag == null ? Constants.DEBUG_TAG : tag,msg);    return;case Constants.DEBUG_LEVEL_INFO:  Log.i(tag == null ? Constants.DEBUG_TAG : tag,msg);return;case Constants.DEBUG_LEVEL_WARNING:Log.w(tag == null ? Constants.DEBUG_TAG : tag,msg);return;case Constants.DEBUG_LEVEL_ERROR:Log.e(tag == null ? Constants.DEBUG_TAG : tag,msg);return;case Constants.DEBUG_LEVEL_VERBOSE:Log.v(tag == null ? Constants.DEBUG_TAG : tag,msg);return;}}}  }
class C{  public RuntimeMBeanException(java.lang.RuntimeException e,String message){  super(message);  runtimeException=e;}  }
class C{  private Collection readAttributesFromDataStore(Collection attrNames) throws UMSException {  Collection attributes=DataLayer.getInstance().getAttributes(getPrincipal(),getGuid(),attrNames);  if (attributes == null) {    String[] args={getDN()};    throw new UMSException(i18n.getString(IUMSConstants.READ_ATTRIBUTES_ERROR,args));  }  Collection foundAttributes=new ArrayList();  if (m_attrSet == null) {    m_attrSet=new AttrSet();  }  if (m_nullAttributes == null) {    m_nullAttributes=new ArrayList();  }  Iterator iter=attributes.iterator();  while (iter.hasNext()) {    Attr attr=(Attr)iter.next();    foundAttributes.add(attr.getName());    m_attrSet.replace(attr);  }  iter=attrNames.iterator();  while (iter.hasNext()) {    String attrName=(String)iter.next();    if (!foundAttributes.contains(attrName) && !m_nullAttributes.contains(attrName)) {      m_nullAttributes.add(attrName);    }  }  return attributes;}  }
class C{  private void removeService(String name){  if (serviceRoutes.get(name) == null) {    return;  }  for (  Map.Entry<SmsRouteTree,Set<RouteMatcher<Request>>> routeEntry : serviceRoutes.get(name).entrySet()) {    for (    RouteMatcher<Request> route : routeEntry.getValue()) {      routeEntry.getKey().removeRoute(route);    }  }  serviceRoutes.remove(name);}  }
class C{  public void testCase9(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  byte rBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {  returnToHomePage();}  }
class C{  private void siftDown(int k,E x){  if (comparator != null)   siftDownUsingComparator(k,x); else   siftDownComparable(k,x);}  }
class C{  private Base64(){}  }
class C{  protected void handleText(char data[]){  if (data != null) {    if (inscript != 0) {      callback.handleComment(data,getBlockStartPosition());      return;    }    if (inbody != 0 || ((instyle != 0) || ((intitle != 0) && !seentitle))) {      if (debugFlag) {        debug("text:  ->" + new String(data) + "<-"+ " pos: "+ getCurrentPos());      }      callback.handleText(data,getBlockStartPosition());    }  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.writeInt(size());  Enumeration<String> comps=getAll();  while (comps.hasMoreElements()) {    s.writeObject(comps.nextElement());  }}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (0 == length)   return;  characters(ch,start,length);}  }
class C{  public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {  setMBeanServer(server);  if (name == null) {    name=new ObjectName(server.getDefaultDomain() + ":" + ServiceName.MLET);  }  this.mletObjectName=name;  return this.mletObjectName;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  @Deactivate public void deactivate(ComponentContext context){  bundleContext=null;}  }
class C{  public Builder obsolete(final boolean isObsolete){  this.isObsolete=isObsolete;  return this;}  }
class C{  public static Long parseStringAsLong(String in) throws IndexParseFieldException {  try {    return Long.parseLong(in);  } catch (  NumberFormatException e) {    throw new IndexParseFieldException(in,e);  }}  }
class C{  private static void initQRCode(int numInputBytes,ErrorCorrectionLevel ecLevel,int desiredMinVersion,Mode mode,QRCode qrCode) throws WriterException {  qrCode.setECLevel(ecLevel);  qrCode.setMode(mode);  for (int versionNum=desiredMinVersion; versionNum <= 40; versionNum++) {    Version version=Version.getVersionForNumber(versionNum);    int numBytes=version.getTotalCodewords();    Version.ECBlocks ecBlocks=version.getECBlocksForLevel(ecLevel);    int numEcBytes=ecBlocks.getTotalECCodewords();    int numRSBlocks=ecBlocks.getNumBlocks();    int numDataBytes=numBytes - numEcBytes;    if (numDataBytes >= numInputBytes + 3) {      qrCode.setVersion(versionNum);      qrCode.setNumTotalBytes(numBytes);      qrCode.setNumDataBytes(numDataBytes);      qrCode.setNumRSBlocks(numRSBlocks);      qrCode.setNumECBytes(numEcBytes);      qrCode.setMatrixWidth(version.getDimensionForVersion());      return;    }  }  throw new WriterException("Cannot find proper rs block info (input data too big?)");}  }
class C{  public void write(String s) throws IOException {  int n=s.length();  for (int i=0; i < n; i++) {    m_os.write(s.charAt(i));  }}  }
class C{  public TaskClientException(LocalizableMessage message){  super(message);}  }
class C{  private void assertNormalisation(String untreatedResource,String treatedResource){  try {    assertThat(resourceName.canonicalize(untreatedResource)).isEqualTo(treatedResource);  } catch (  Exception e) {    String message="Normalisation failed: " + e.getMessage();    throw ComparisonFailureFactory.comparisonFailure(message,treatedResource,"");  }}  }
class C{  public static BigInteger norm(final byte mu,ZTauElement lambda){  BigInteger norm;  BigInteger s1=lambda.u.multiply(lambda.u);  BigInteger s2=lambda.u.multiply(lambda.v);  BigInteger s3=lambda.v.multiply(lambda.v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  protected void manageCancellationFromOnPeerPreConnect(){  throw new SkipRemainingHandlersException();}  }
class C{  @Override public void noAntennaCancel(){  Log.d(TAG," onClick Negative");  if (mService != null && !mService.isInLockTaskMode()) {    exitService();  } else {    Log.d(TAG,"No need exit Service and Activity cause current is lock mode");  }}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQueryCount(dynamicQuery);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonetruecopytext.class,args);}  }
class C{  public String execute(Locale locale,Map params) throws WorkflowException {  validateParameters(params);  String metadataFile=getString(params,ParameterKeys.P_META_DATA);  String defAttrMappings=getString(params,ParameterKeys.P_DEF_ATTR_MAPPING);  boolean hasMetaData=(metadataFile != null) && (metadataFile.trim().length() > 0);  String metadata=null;  String extendedData=null;  if (hasMetaData) {    String extendedDataFile=getString(params,ParameterKeys.P_EXTENDED_DATA);    metadata=getContent(metadataFile,locale);    extendedData=getContent(extendedDataFile,locale);  } else {    String entityId=getString(params,ParameterKeys.P_ENTITY_ID);    String metaAlias=generateMetaAliasForSP(getString(params,ParameterKeys.P_REALM));    Map map=new HashMap();    map.put(MetaTemplateParameters.P_SP,metaAlias);    map.put(MetaTemplateParameters.P_SP_E_CERT,getString(params,ParameterKeys.P_SP_E_CERT));    try {      metadata=CreateSAML2HostedProviderTemplate.buildMetaDataTemplate(entityId,map,getRequestURL(params));      extendedData=CreateSAML2HostedProviderTemplate.createExtendedDataTemplate(entityId,map,getRequestURL(params));    } catch (    SAML2MetaException e) {      return e.getMessage();    }  }  String[] results=ImportSAML2MetaData.importData(null,metadata,extendedData);  String realm=results[0];  String entityId=results[1];  String cot=getString(params,ParameterKeys.P_COT);  if ((cot != null) && (cot.length() > 0)) {    try {      AddProviderToCOT.addToCOT(realm,cot,entityId);    } catch (    COTException e) {      throw new WorkflowException(e.getMessage());    }  }  List attrMapping=null;  if (defAttrMappings.equals("true")) {    attrMapping=new ArrayList(1);    attrMapping.add("*=*");  } else {    attrMapping=getAttributeMapping(params);  }  if (!attrMapping.isEmpty()) {    try {      SAML2MetaManager manager=new SAML2MetaManager();      EntityConfigElement config=manager.getEntityConfig(realm,entityId);      SPSSOConfigElement ssoConfig=manager.getSPSSOConfig(realm,entityId);      Map attribConfig=SAML2MetaUtils.getAttributes(ssoConfig);      List mappedAttributes=(List)attribConfig.get(SAML2Constants.ATTRIBUTE_MAP);      mappedAttributes.addAll(attrMapping);      manager.setEntityConfig(realm,config);    } catch (    SAML2MetaException e) {      throw new WorkflowException(e.getMessage());    }  }  return "done|||realm=" + realm;}  }
class C{  @Override public void run(){  while (true) {    boolean hasEvents=false;    try {      if (!close) {        hasEvents=events();        if (wakeupCounter.getAndSet(-1) > 0) {          keyCount=selector.selectNow();        } else {          keyCount=selector.select(selectorTimeout);        }        wakeupCounter.set(0);      }      if (close) {        events();        timeout(0,false);        try {          selector.close();        } catch (        IOException ioe) {          log.error(sm.getString("endpoint.nio.selectorCloseFail"),ioe);        }        break;      }    } catch (    Throwable x) {      ExceptionUtils.handleThrowable(x);      log.error("",x);      continue;    }    if (keyCount == 0)     hasEvents=(hasEvents | events());    Iterator<SelectionKey> iterator=keyCount > 0 ? selector.selectedKeys().iterator() : null;    while (iterator != null && iterator.hasNext()) {      SelectionKey sk=iterator.next();      NioSocketWrapper attachment=(NioSocketWrapper)sk.attachment();      if (attachment == null) {        iterator.remove();      } else {        iterator.remove();        processKey(sk,attachment);      }    }    timeout(keyCount,hasEvents);  }  stopLatch.countDown();}  }
class C{  public URI(URI p_base,String p_uriSpec) throws MalformedURIException {  initialize(p_base,p_uriSpec);}  }
class C{  public void postTerminationNotificationSuccess(String hostedProviderID,HttpServletRequest request,HttpServletResponse response,String userDN,FSFederationTerminationNotification notification,String termProfile){  FSUtils.debug.message("In FSDefaultSPAdapter.postTerminationNotificationSuccess.");}  }
class C{  public DottedLine(float lineWidth){  this.lineWidth=lineWidth;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  for (  Entry<Provider,List<String>> e : digestAlgs.entrySet()) {    for (    String algorithm : e.getValue()) {      MessageDigest md=MessageDigest.getInstance(algorithm,e.getKey().getName());      assertNotNull(md);    }  }  for (  List<String> algorithms : digestAlgs.values()) {    for (    String algorithm : algorithms) {      try {        MessageDigest.getInstance(algorithm,"UnknownProvider");        fail("expected NoSuchProviderException");      } catch (      NoSuchProviderException expected) {      }    }  }  for (  Provider provider : digestAlgs.keySet()) {    try {      MessageDigest.getInstance("UnknownDigest",provider.getName());      fail("expected NoSuchAlgorithmException");    } catch (    NoSuchAlgorithmException expected) {    }  }  for (  Provider provider : digestAlgs.keySet()) {    try {      MessageDigest.getInstance(null,provider.getName());      fail("expected NullPointerException");    } catch (    NullPointerException expected) {    }  }  try {    MessageDigest.getInstance("AnyDigest",(String)null);    fail("expected IllegalArgumentException");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  protected SetOfIntegerSyntax(int[][] members){  this.members=parse(members);}  }
class C{  public void scanJars(){  JarScanner scanner=JarScannerFactory.getJarScanner(context);  TldScannerCallback callback=new TldScannerCallback();  scanner.scan(JarScanType.TLD,context,callback);  if (callback.scanFoundNoTLDs()) {    log.info(Localizer.getMessage("jsp.tldCache.noTldSummary"));  }}  }
class C{  public SendfileState add(SendfileData data){  try {    data.fdpool=Socket.pool(data.socket);    data.fd=File.open(data.fileName,File.APR_FOPEN_READ | File.APR_FOPEN_SENDFILE_ENABLED | File.APR_FOPEN_BINARY,0,data.fdpool);    Socket.timeoutSet(data.socket,0);    while (true) {      long nw=Socket.sendfilen(data.socket,data.fd,data.pos,data.length,0);      if (nw < 0) {        if (!(-nw == Status.EAGAIN)) {          Pool.destroy(data.fdpool);          data.socket=0;          return SendfileState.ERROR;        } else {          break;        }      } else {        data.pos+=nw;        data.length-=nw;        if (data.length == 0) {          Pool.destroy(data.fdpool);          Socket.timeoutSet(data.socket,getSoTimeout() * 1000);          return SendfileState.DONE;        }      }    }  } catch (  Exception e) {    log.warn(sm.getString("endpoint.sendfile.error"),e);    return SendfileState.ERROR;  }synchronized (this) {    addS.add(data);    this.notify();  }  return SendfileState.PENDING;}  }
class C{  public DefinitionDecodingException(AbstractManagedObjectDefinition<?,?> d,Reason reason){  super(createLocalizableMessage(d,reason));  this.d=d;  this.reason=reason;}  }
class C{  public boolean isSorted(){  return (resultCode == 0);}  }
class C{  protected void SetVector(NodeVector v){  setObject(v);}  }
class C{  public static CMSSignedData replaceCertificatesAndCRLs(CMSSignedData signedData,Store certificates,Store attrCerts,Store crls) throws CMSException {  CMSSignedData cms=new CMSSignedData(signedData);  ASN1Set certSet=null;  ASN1Set crlSet=null;  if (certificates != null || attrCerts != null) {    List certs=new ArrayList();    if (certificates != null) {      certs.addAll(CMSUtils.getCertificatesFromStore(certificates));    }    if (attrCerts != null) {      certs.addAll(CMSUtils.getAttributeCertificatesFromStore(attrCerts));    }    ASN1Set set=CMSUtils.createBerSetFromList(certs);    if (set.size() != 0) {      certSet=set;    }  }  if (crls != null) {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCRLsFromStore(crls));    if (set.size() != 0) {      crlSet=set;    }  }  cms.signedData=new SignedData(signedData.signedData.getDigestAlgorithms(),signedData.signedData.getEncapContentInfo(),certSet,crlSet,signedData.signedData.getSignerInfos());  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  public void clear(){  names.clear();  types.clear();  values.clear();}  }
class C{  public void testToString(){  Certificate cert=new MyCertificate("TEST",new byte[10]);  KeyStore.TrustedCertificateEntry ksTCE=new KeyStore.TrustedCertificateEntry(cert);  assertNotNull("toString() returns null string",ksTCE.toString());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnewchilddiffdocument.class,args);}  }
class C{  private boolean isIgnoreErrors(){  return ignoreErrors.isPresent();}  }
class C{  public LDIFEntryReader(final String... ldifLines){  super(Arrays.asList(ldifLines));}  }
class C{  private static String stripStringToSingleLine(String s,String separator){  return (s != null) ? s.replaceAll(separator,"") : null;}  }
class C{  public RedisSessionRequestWrapper(HttpServletRequest request){  super(request);  this.request=request;  this.token=request.getHeader(TOKEN_HEADER_NAME);}  }
class C{  public Tree(Tree<E> parent,E item){  this.parent=parent;  this.item=item;  this.children=new ArrayList<Tree<E>>();}  }
class C{  @BeforeTest(groups={"cli-datastore"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"amadm");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.cli.AccessManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  public void runTest() throws Throwable {  String localName="newAttr";  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String resultAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"<newValue>");  resultAttr=((Element)testAddr).getAttributeNS(namespaceURI,localName);  assertEquals("throw_Equals","<newValue>",resultAttr);}  }
class C{  public boolean isCollective(){  return this.isCollective;}  }
class C{  public InvalidArgumentException(){}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  private boolean offsetMatches(int offset,int posMatch){  if ((posMatch & ParserRule.AT_LINE_START) == ParserRule.AT_LINE_START) {    if (offset != line.offset) {      return false;    }  } else   if ((posMatch & ParserRule.AT_WHITESPACE_END) == ParserRule.AT_WHITESPACE_END) {    if (offset != whitespaceEnd) {      return false;    }  } else   if ((posMatch & ParserRule.AT_WORD_START) == ParserRule.AT_WORD_START) {    if (offset != lastOffset) {      return false;    }  }  return true;}  }
class C{  public RequesterID createRequesterID(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.REQUESTERID,value);  if (obj == null) {    return new RequesterIDImpl(value);  } else {    return (RequesterID)obj;  }}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  final void dispose(){synchronized (SequencedEvent.class) {    if (disposed) {      return;    }    if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getCurrentSequencedEvent() == this) {      KeyboardFocusManager.getCurrentKeyboardFocusManager().setCurrentSequencedEvent(null);    }    disposed=true;  }  if (appContext != null) {    SunToolkit.postEvent(appContext,new SentEvent());  }  SequencedEvent next=null;synchronized (SequencedEvent.class) {    SequencedEvent.class.notifyAll();    if (list.getFirst() == this) {      list.removeFirst();      if (!list.isEmpty()) {        next=(SequencedEvent)list.getFirst();      }    } else {      list.remove(this);    }  }  if (next != null && next.appContext != null) {    SunToolkit.postEvent(next.appContext,new SentEvent());  }}  }
class C{  public SlideInUnderneathAnimation(View view){  this.view=view;  direction=DIRECTION_LEFT;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public static QueryExp initialSubString(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,new StringValueExp(escapeString(s.getValue()) + "*"));}  }
class C{  public void removeEditActionListener(ActionListener listener){  editButton.removeActionListener(listener);}  }
class C{  public PasswordExpiredControl(boolean isCritical){  super(OID_NS_PASSWORD_EXPIRED,isCritical);}  }
class C{  public TransactionTerminatedEvent(Object source,ClientTransaction clientTransaction){  super(source);  m_clientTransaction=clientTransaction;  m_isServerTransaction=false;}  }
class C{  public boolean isRepresentationClassCharBuffer(){  return java.nio.CharBuffer.class.isAssignableFrom(representationClass);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS07.class,args);}  }
class C{  private static String extractRDN(String dn){  return extractRDN(dn,false);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectConfirmationElement createSubjectConfirmationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectConfirmationElementImpl();}  }
class C{  public NotSubject(){}  }
class C{  private boolean nextWhenCursorIsExhaustedOrNotCorrectlyPositionned() throws ChangelogException {  final boolean found=cursor.positionTo(lastNonNullCurrentCSN,GREATER_THAN_OR_EQUAL_TO_KEY,positionStrategy);  if (found && cursor.next()) {    nextRecord=cursor.getRecord();    lastNonNullCurrentCSN=nextRecord.getKey();    return true;  }  nextRecord=null;  return false;}  }
class C{  public static boolean belongToSite(SSOToken ssoToken,String instanceName,String siteId) throws SMSException, SSOException {  boolean belong=false;  String site=getServerSite(ssoToken,instanceName);  belong=(site != null) && site.equals(siteId);  return belong;}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws org.xml.sax.SAXException {  throw new StopParseException();}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public static String URLEncodeField(String input,String enc) throws UnsupportedEncodingException {  int inputLen=input.length();  byte[] byteOut=input.getBytes(enc);  StringBuffer result=new StringBuffer(inputLen * 4);  for (int i=0; i < byteOut.length; i++) {    int c=byteOut[i] & 0xff;    if (dontEncode.get(c)) {      if (c == ' ') {        c='+';      }      result.append((char)c);    } else {      result.append('%');      char ch=Character.forDigit((c >> 4) & 0xF,16);      if (('a' <= ch) && (ch <= 'f')) {        ch-=caseDiff;      }      result.append(ch);      ch=Character.forDigit(c & 0xF,16);      if (('a' <= ch) && (ch <= 'f')) {        ch-=caseDiff;      }      result.append(ch);    }  }  return result.toString();}  }
class C{  public ByteArrayOutputStream(){  this(32);}  }
class C{  public SAML2ResponseData(){}  }
class C{  private void checkHeadingDisplayed(){  if (!state.isHeadingDisplayed) {    app.println();    app.println();    app.println(heading);    state.isHeadingDisplayed=true;  }}  }
class C{  public void testCFII_ServerClosed_Block() throws Exception {  ensureServerOpen();  assertTrue(this.channel1.isBlocking());  statusNotConnected_NotPending();  assertTrue(this.channel1.connect(localAddr1));  statusConnected_NotPending();  ensureServerClosed();  tryFinish();  this.channel1.close();  statusChannelClosed();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void test_ConstructorIF(){  HashSet hs2=new HashSet(5,(float)0.5);  assertEquals("Created incorrect HashSet",0,hs2.size());  try {    new HashSet(0,0);  } catch (  IllegalArgumentException e) {    return;  }  fail("Failed to throw IllegalArgumentException for initial load factor <= 0");}  }
class C{  public Object clone(){  try {    GridBagConstraints c=(GridBagConstraints)super.clone();    c.insets=(Insets)insets.clone();    return c;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(PGTITLE,CCPageTitle.class);  registerChild(SEC_MH_COMMON,CCSecondaryMasthead.class);  registerChild(TF_ORIG_CLIENT_TYPE,CCTextField.class);  registerChild(PROPERTY_ATTRIBUTE,AMPropertySheet.class);  ptModel.registerChildren(this);  propertySheetModel.registerChildren(this);}  }
class C{  public String toString(){  return (toString(true,false));}  }
class C{  private void clearFailureLockedTime(){  logger.trace("Clearing failure lockout time for user %s.",userDNString);  if (-1L != getFailureLockedTime()) {    failureLockedTime=-1L;    clearAttribute(OP_ATTR_PWPOLICY_LOCKED_TIME);  }}  }
class C{  public Cursor fetchAll(String eventName,Long appID){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (eventName != null) {    qb.appendWhere(" AND " + KEY_EVENTNAME + " = ");    qb.appendWhereEscapeString(eventName);  }  if (appID != null) {    qb.appendWhere(" AND " + KEY_APPID + " = "+ appID);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  @Override public void publish(LogRecord record){  if (!isLoggable(record)) {    return;  }  Timestamp ts=new Timestamp(System.currentTimeMillis());  String tsString=ts.toString().substring(0,19);  String tsDate=tsString.substring(0,10);  writerLock.readLock().lock();  try {    if (rotatable && !date.equals(tsDate)) {      writerLock.readLock().unlock();      writerLock.writeLock().lock();      try {        if (!date.equals(tsDate)) {          closeWriter();          date=tsDate;          openWriter();        }      }  finally {        writerLock.readLock().lock();        writerLock.writeLock().unlock();      }    }    String result=null;    try {      result=getFormatter().format(record);    } catch (    Exception e) {      reportError(null,e,ErrorManager.FORMAT_FAILURE);      return;    }    try {      if (writer != null) {        writer.write(result);        if (bufferSize < 0) {          writer.flush();        }      } else {        reportError("FileHandler is closed or not yet initialized, unable to log [" + result + "]",null,ErrorManager.WRITE_FAILURE);      }    } catch (    Exception e) {      reportError(null,e,ErrorManager.WRITE_FAILURE);      return;    }  }  finally {    writerLock.readLock().unlock();  }}  }
class C{  public AlreadyConnectedException(){}  }
class C{  ResourceTypeImportStep(DiffStatus diffStatus,ResourceType resourceType,ResourceTypeService resourceTypeService,String realm,Subject subject){  this.diffStatus=diffStatus;  this.resourceType=resourceType;  this.resourceTypeService=resourceTypeService;  this.realm=realm;  this.subject=subject;}  }
class C{  void handleResponse(JSONObject response,int requestType) throws JSONException {  try {    mBaseModel.parseAndNotifyResponse(response,requestType);  } catch (  Exception e) {    Toast.makeText(mContext,response.getString(NetworkConstants.ERROR_MESSAGE),Toast.LENGTH_LONG).show();    e.printStackTrace();  }}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public void pause(){  try {    protocolHandler.pause();  } catch (  Exception e) {    log.error(sm.getString("coyoteConnector.protocolHandlerPauseFailed"),e);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitUsagesElement createActivationLimitUsagesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitUsagesElementImpl();}  }
class C{  protected static String removeQuotes(String quotedString,boolean quotesRequired){  if (quotedString.length() > 0 && quotedString.charAt(0) != '"' && !quotesRequired) {    return quotedString;  } else   if (quotedString.length() > 2) {    return quotedString.substring(1,quotedString.length() - 1);  } else {    return "";  }}  }
class C{  public synchronized <T>void sendEvent(T event,Integer key,boolean sendToDefaultBusAsWell){  RXBusEventIsNullException.checkEvent(event);  RXBusKeyIsNullException.checkKey(key);  SerializedSubject subject=getSubject(new RXQueueKey(event.getClass(),key),false);  if (subject != null)   subject.onNext(event);  if (sendToDefaultBusAsWell)   sendEvent(event);}  }
class C{  public static void onHideSoftInput(Context context,View view){  if (view != null && view.getWindowToken() != null) {    InputMethodManager mInputMethodManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    mInputMethodManager.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  }}  }
class C{  private void doNotAccept(){  returnValue=ReturnType.NOT_ACCEPTED;  dispose();}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (FSUtils.needSetLBCookieAndRedirect(request,response,false)) {    return;  }  String metaAlias=request.getParameter(IFSConstants.META_ALIAS);  if (metaAlias != null && metaAlias.length() > 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSPreLoginHandler::processRequest:" + "Calling prelogin with metaAlias=" + metaAlias);    }    FSPreLogin preLogin=new FSPreLogin();    preLogin.doPreLogin(request,response);  } else {    FSUtils.debug.error("FSPreLoginHandler::processRequest:No MetaAlias" + "in request. Cannot procced");  }}  }
class C{  private static String sphinxifyAbsoluteMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.ABSOLUTE_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    m.appendReplacement(sb,String.format("`%s <%s>`_",m.group(1),m.group(2)));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    int n=size;    size=0;    for (int i=0; i < n; i++)     array[i]=null;  }  finally {    lock.unlock();  }}  }
class C{  public void paintTextPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public java.lang.String toString(){  StringBuffer sb=new StringBuffer(1000);  sb.append("<RequestedServiceType xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"><ServiceType>");  if (serviceType != null) {    sb.append(serviceType);  }  sb.append("</ServiceType>");  if (options != null) {    sb.append("<Options>");    if (!options.isEmpty()) {      Iterator iter=options.iterator();      String option=null;      while (iter.hasNext()) {        option=(String)iter.next();        if ((option != null) && option.length() != 0) {          sb.append("<Option>").append(option).append("</Option>");        }      }    }    sb.append("</Options>");  }  sb.append("</RequestedServiceType>");  return sb.toString();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public ProguardLoader(Map<String,ClassNode> nodes){  super(nodes);}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSProcessLogoutServlet doGetPost...");  String providerAlias=request.getParameter(IFSConstants.META_ALIAS);  if (providerAlias == null || providerAlias.length() == 0) {    providerAlias=FSServiceUtils.getMetaAlias(request);  }  if (providerAlias == null || providerAlias.length() < 1) {    FSUtils.debug.error("Unable to retrieve alias, Hosted Provider. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  if (metaManager == null) {    FSUtils.debug.error("Cannot retrieve hosted descriptor. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);  ProviderDescriptorType hostedProviderDesc=null;  BaseConfigType hostedConfig=null;  String hostedRole=null;  String hostedEntityId=null;  try {    hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    if (hostedRole != null) {      if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {        hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);        hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);      } else       if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {        hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);        hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);      }    }    if (hostedProviderDesc == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException eam) {    FSUtils.debug.error("Unable to find Hosted Provider. " + "not process request",eam);    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  String logoutDoneURL=FSServiceUtils.getLogoutDonePageURL(request,hostedConfig,providerAlias);  String commonErrorPage=FSServiceUtils.getErrorPageURL(request,hostedConfig,providerAlias);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("logoutDoneURL : " + logoutDoneURL + "\ncommonErrorPage : "+ commonErrorPage);  }  String sourceCheck=(String)request.getAttribute("logoutSource");  if (sourceCheck == null) {    sourceCheck=request.getParameter("logoutSource");  }  Object ssoToken=getValidToken(request);  String userID=null;  if (ssoToken == null) {    if (sourceCheck != null) {      if (sourceCheck.equalsIgnoreCase("local")) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSProcessLogoutServlet, " + "control where Source is local");        }        FSServiceUtils.returnLocallyAfterOperation(response,logoutDoneURL,false,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_NO_SESSION);        return;      } else       if (sourceCheck.equalsIgnoreCase("remote")) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Control where Source is remote - not from app" + "link but from other provider");        }        FSServiceUtils.returnLocallyAfterOperation(response,logoutDoneURL,true,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);        return;      } else       if (sourceCheck.equalsIgnoreCase("logoutGet")) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Control where Source is Http Get action - " + "not from app link ");        }        FSServiceUtils.returnLocallyAfterOperation(response,logoutDoneURL,true,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);        return;      }    }  } else {    try {      userID=SessionManager.getProvider().getPrincipalName(ssoToken);    } catch (    SessionException ssoExp) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Couldn't get user object:",ssoExp);      }    }    if (sourceCheck != null) {      if (sourceCheck.equalsIgnoreCase("local")) {        FSUtils.debug.message("Control where Source is local -  from applink");        doLogoutInitiation(request,response,hostedProviderDesc,hostedConfig,realm,hostedEntityId,hostedRole,providerAlias,ssoToken,logoutDoneURL,sourceCheck);        return;      } else       if (sourceCheck.equalsIgnoreCase("remote")) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Control where Source is remote - not from app" + "link but from other provider. Token valid");        }        doLogoutInitiation(request,response,hostedProviderDesc,hostedConfig,realm,hostedEntityId,hostedRole,providerAlias,ssoToken,logoutDoneURL,sourceCheck);        return;      } else       if (sourceCheck.equalsIgnoreCase("logoutGet")) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Control where Source is Http Get action - not from" + " applink. Initiation will take care in " + "preLogouthandler ");        }        doLogoutInitiation(request,response,hostedProviderDesc,hostedConfig,realm,hostedEntityId,hostedRole,providerAlias,ssoToken,logoutDoneURL,sourceCheck);        return;      }    }  }  FSLogoutNotification logoutObj=null;  try {    logoutObj=FSLogoutNotification.parseURLEncodedRequest(request);  } catch (  FSMsgException e) {    FSUtils.debug.message("Bad Logout request. calling showErrorPage");    FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.LOGOUT_REQUEST_IMPROPER,IFSConstants.LOGOUT_FAILED);    return;  }  if (logoutObj == null) {    FSUtils.debug.message("Bad Logout request. calling showErrorPage");    FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.LOGOUT_REQUEST_IMPROPER,IFSConstants.LOGOUT_FAILED);  } else {    doRequestProcessing(request,response,hostedProviderDesc,hostedConfig,hostedRole,realm,hostedEntityId,providerAlias,logoutObj,commonErrorPage,userID,ssoToken);  }  return;}  }
class C{  public ClassCastException(){  super();}  }
class C{  public static <T extends Enum<T>>Set<String> names(Class<T> enumType){  Set<String> set=NAMESETS.get(enumType);  if (set == null) {    set=new LinkedHashSet<>();    for (    T constant : enumType.getEnumConstants()) {      set.add(constant.toString());    }    NAMESETS.put(enumType,Collections.unmodifiableSet(set));  }  return set;}  }
class C{  public IdentityProviderServiceException(String message,Throwable cause){  super(message,cause);}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("role name: " + roleName);  if (roleValue != null) {    result.append("; value: ");    for (Iterator<ObjectName> objNameIter=roleValue.iterator(); objNameIter.hasNext(); ) {      ObjectName currObjName=objNameIter.next();      result.append(currObjName.toString());      if (objNameIter.hasNext()) {        result.append(", ");      }    }  }  result.append("; problem type: " + problemType);  return result.toString();}  }
class C{  public final V accumulateAndGet(V x,BinaryOperator<V> accumulatorFunction){  V prev, next;  do {    prev=get();    next=accumulatorFunction.apply(prev,x);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  public boolean isRunning(){  return isRunning;}  }
class C{  private boolean isAttributeNotRead(String attrName){  boolean attributeNotRead=false;  if (m_attrSet == null) {    m_attrSet=new AttrSet();  }  if (m_nullAttributes == null) {    m_nullAttributes=new ArrayList();  }  if ((m_attrSet.getAttribute(attrName) == null) && !m_nullAttributes.contains(attrName)) {    attributeNotRead=true;  }  return attributeNotRead;}  }
class C{  public LibPackage add(LibPackagePin[] p_pin_arr){  String package_name="Package#" + Integer.toString(pkg_count() + 1);  return add(package_name,p_pin_arr,null,new DsnPackageKeepout[0],new DsnPackageKeepout[0],new DsnPackageKeepout[0],true);}  }
class C{  private void terminateAuthnProcess(ContextHolder holder){  contextCache.remove(holder.getCacheKey());  holder.setAuthPhase(ContextHolder.AuthPhase.TERMINATED);  if (holder.getAuthContext() != null && holder.getAuthContext().getStatus() == AuthContext.Status.SUCCESS) {    try {      holder.getAuthContext().logout();    } catch (    final AuthLoginException e) {      LOG.error("Unable to logout of AuthContext while terminating RADIUS auth sequence.",e);    }  }}  }
class C{  public void pointToCellExact(int x,int y,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=(x - hStartPadding) / (mCellWidth + mWidthGap);  result[1]=(y - vStartPadding) / (mCellHeight + mHeightGap);  final int xAxis=mCountX;  final int yAxis=mCountY;  if (result[0] < 0)   result[0]=0;  if (result[0] >= xAxis)   result[0]=xAxis - 1;  if (result[1] < 0)   result[1]=0;  if (result[1] >= yAxis)   result[1]=yAxis - 1;}  }
class C{  public void _read(InputStream input){  value=input.read_long();}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  List<String> names=rc.getOption(PARAM_NAMES);  String[] params=new String[2];  params[0]=realm;  Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());  ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);  String curAppName=null;  try {    for (    String name : names) {      curAppName=name;      params[1]=name;      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_APPLICATION_PRIVILEGE",params);      apm.removePrivilege(name);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_APPLICATION_PRIVILEGE",params);    }    String msg=(names.size() > 1) ? getResourceString("delete-application-privileges-succeeded") : getResourceString("delete-application-privilege-succeeded");    getOutputWriter().printlnMessage(msg);  } catch (  EntitlementException ex) {    String[] paramExs={realm,curAppName,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_DELETE_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static void doSSOFederate(HttpServletRequest request,HttpServletResponse response,PrintWriter out,AuthnRequest authnReq,String spEntityID,String idpMetaAlias,String nameIDFormat,String relayState,Object newSession,SAML2EventLogger auditor) throws SAML2Exception {  String classMethod="IDPSSOUtil.doSSOFederate: ";  Object session=null;  if (newSession != null) {    session=newSession;    auditor.setSSOTokenId(session);  } else {    try {      session=sessionProvider.getSession(request);      if (null != auditor) {        auditor.setAuthTokenId(session);      }    } catch (    SessionException se) {      if (SAML2Utils.debug.warningEnabled()) {        SAML2Utils.debug.warning(classMethod + "No session yet.");      }    }  }  String authnRequestStr=null;  if (authnReq != null) {    authnRequestStr=authnReq.toXMLString();    auditor.setRequestId(authnReq.getID());  }  String[] logdata={spEntityID,idpMetaAlias,authnRequestStr};  LogUtil.access(Level.INFO,LogUtil.RECEIVED_AUTHN_REQUEST,logdata,session);  String idpEntityID=null;  String realm=null;  try {    if (metaManager == null) {      SAML2Utils.debug.error(classMethod + "Unable to get meta manager.");      throw new SAML2Exception(SAML2Utils.bundle.getString("errorMetaManager"));    }    idpEntityID=metaManager.getEntityByMetaAlias(idpMetaAlias);    if ((idpEntityID == null) || (idpEntityID.trim().length() == 0)) {      SAML2Utils.debug.error(classMethod + "Unable to get IDP Entity ID from meta.");      String[] data={idpEntityID};      LogUtil.error(Level.INFO,LogUtil.INVALID_IDP,data,session);      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }    realm=SAML2MetaUtils.getRealmByMetaAlias(idpMetaAlias);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error(classMethod + "Unable to get IDP Entity ID from meta.");    String[] data={idpMetaAlias};    LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,session);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  if (authnReq == null) {    Issuer issuer=AssertionFactory.getInstance().createIssuer();    issuer.setValue(spEntityID);    if (!SAML2Utils.isSourceSiteValid(issuer,realm,idpEntityID)) {      if (SAML2Utils.debug.warningEnabled()) {        SAML2Utils.debug.warning(classMethod + "The remote provider is not valid.");      }      throw new SAML2Exception(SAML2Utils.bundle.getString("invalidReceiver"));    }  }  SAML2Utils.validateRelayStateURL(realm,idpEntityID,relayState,SAML2Constants.IDP_ROLE);  if (authnReq == null && (session == null || !isValidSessionInRealm(realm,session))) {    try {      if (Boolean.parseBoolean(request.getParameter(REDIRECTED))) {        if (session == null) {          String[] data={idpEntityID};          SAML2Utils.debug.error(classMethod + "The IdP was not able to create a session");          LogUtil.error(Level.INFO,LogUtil.SSO_NOT_FOUND,data,session,null);        } else {          try {            String ipAddress=ClientUtils.getClientIPAddress(request);            String sessionRealm=SAML2Utils.getSingleValuedSessionProperty(session,SAML2Constants.ORGANIZATION);            String[] data={sessionRealm,realm,spEntityID,ipAddress,null};            SAML2Utils.debug.error(classMethod + "The realm of the session (" + sessionRealm+ ") does not correspond to that of the IdP ("+ realm+ ")");            LogUtil.error(Level.INFO,LogUtil.INVALID_REALM_FOR_SESSION,data,session,null);          } catch (          SessionException se) {            SAML2Utils.debug.error(classMethod + "Failed to retrieve realm from session",se);          }        }        String rbKey="UnableToDOSSOOrFederation";        SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,rbKey,SAML2Utils.bundle.getString(rbKey));      } else {        redirectAuthentication(request,response,authnReq,null,realm,idpEntityID,spEntityID);      }    } catch (    IOException ioe) {      SAML2Utils.debug.error(classMethod + "Unable to redirect to authentication.",ioe);      SAMLUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"UnableToRedirectToAuth",SAML2Utils.bundle.getString("UnableToRedirectToAuth"));    }    return;  }  try {    SAML2Utils.debug.message(classMethod + " Invoking the " + "IDP Adapter");    SAML2IdentityProviderAdapter idpAdapter=IDPSSOUtil.getIDPAdapterClass(realm,idpEntityID);    if (idpAdapter != null) {      if (idpAdapter.preSendResponse(authnReq,idpEntityID,realm,request,response,session,null,relayState)) {        return;      }    }  } catch (  SAML2Exception se2) {    SAML2Utils.debug.error(classMethod + " There was a problem when invoking" + "the preSendResponse of the IDP Adapter: ",se2);  }  sendResponseToACS(request,response,out,session,authnReq,spEntityID,idpEntityID,idpMetaAlias,realm,nameIDFormat,relayState,null);}  }
class C{  private <T extends MessageNano>T unpackProto(T proto,byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  MessageNano.mergeFrom(proto,readCheckedBytes(buffer,dataSize));  if (DEBUG)   Log.d(TAG,"unpacked proto " + proto);  return proto;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  this.random=random;}  }
class C{  public boolean equals(String anotherString){  int n=m_length;  if (n == anotherString.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != anotherString.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public static IOFileFilter and(IOFileFilter... filters){  return new AndFileFilter(toList(filters));}  }
class C{  public String dereferenceRestrictedTokenID(Session s,String restrictedId) throws SessionException {  String masterSID;  try {    SessionOperations operations=sessionOperationStrategy.getOperation(sessionID);    masterSID=operations.deferenceRestrictedID(s,new SessionID(restrictedId));  } catch (  Exception e) {    sessionDebug.error("unable to find master token for  " + restrictedId,e);    throw new SessionException(e);  }  return masterSID;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backTrail();  ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean remove_clearance_class(int p_index,java.util.Collection<board.items.BrdItem> p_board_items){  for (  BrdItem curr_item : p_board_items) {    if (curr_item.clearance_idx() == p_index)     return false;  }  for (  NetClass curr_net_class : net_classes) {    if (curr_net_class.get_trace_clearance_class() == p_index)     return false;    for (    ItemClass curr_item_class : ItemClass.values()) {      if (curr_net_class.default_item_clearance_classes.get(curr_item_class) == p_index) {        return false;      }    }  }  for (  BrdViaInfo curr_via : via_infos) {    if (curr_via.get_clearance_class() == p_index)     return false;  }  for (  BrdItem curr_item : p_board_items) {    if (curr_item.clearance_idx() > p_index) {      curr_item.set_clearance_idx(curr_item.clearance_idx() - 1);    }  }  for (int i=0; i < net_classes.count(); ++i) {    freert.rules.NetClass curr_net_class=net_classes.get(i);    if (curr_net_class.get_trace_clearance_class() > p_index) {      curr_net_class.set_trace_clearance_class(curr_net_class.get_trace_clearance_class() - 1);    }    for (    ItemClass curr_item_class : ItemClass.values()) {      int curr_class_no=curr_net_class.default_item_clearance_classes.get(curr_item_class);      if (curr_class_no > p_index) {        curr_net_class.default_item_clearance_classes.set(curr_item_class,curr_class_no - 1);      }    }  }  for (int i=0; i < via_infos.count(); ++i) {    BrdViaInfo curr_via=via_infos.get(i);    if (curr_via.get_clearance_class() > p_index) {      curr_via.set_clearance_class(curr_via.get_clearance_class() - 1);    }  }  clearance_matrix.remove_class(p_index);  return true;}  }
class C{  public static boolean isFavoriteStation(Context context,int iStation){  return isStationExist(context,iStation,STATION_TYPE_FAVORITE);}  }
class C{  public void cutout_traces(Collection<BrdItem> p_item_list){  for (  BrdItem curr_item : p_item_list) {    if (!(curr_item instanceof BrdTracep))     continue;    BrdTracep a_trace=(BrdTracep)curr_item;    if (a_trace.shares_net_no(own_net_nos))     continue;    cutout_trace(a_trace,shape,cl_class);  }}  }
class C{  Future<Job> updateNow(){  this.updated_at=System.currentTimeMillis();  return this.set("updated_at",String.valueOf(updated_at));}  }
class C{  private Bukkit(){}  }
class C{  private int convertModelToRow(int index){  int size=list.getModel().getSize();  if ((index < 0) || (index >= size)) {    return -1;  }  if (layoutOrientation != JList.VERTICAL && columnCount > 1 && rowsPerColumn > 0) {    if (layoutOrientation == JList.VERTICAL_WRAP) {      return index % rowsPerColumn;    }    return index / columnCount;  }  return index;}  }
class C{  ScheduledFutureTask(Callable<V> callable,long ns){  super(callable);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public void reset(){  pos=mark;}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public void startFromRemoteDS(ServerStartMsg inServerStartMsg){  try {    localGenerationId=-1;    oldGenerationId=-100;    boolean sessionInitiatorSSLEncryption=processStartFromRemote(inServerStartMsg);    if (replicationServerDomain.getConnectedDSs().containsKey(inServerStartMsg.getServerId())) {      try {        Thread.sleep(100);      } catch (      Exception e) {        abortStart(null);        return;      }    }    lockDomainNoTimeout();    localGenerationId=replicationServerDomain.getGenerationId();    oldGenerationId=localGenerationId;    if (replicationServerDomain.isAlreadyConnectedToDS(this)) {      abortStart(null);      return;    }    try {      StartMsg outStartMsg=sendStartToRemote();      logStartHandshakeRCVandSND(inServerStartMsg,outStartMsg);      if (!sessionInitiatorSSLEncryption) {        session.stopEncryption();      }      StartSessionMsg inStartSessionMsg=waitAndProcessStartSessionFromRemoteDS();      if (inStartSessionMsg == null) {        logStopReceived();        abortStart(null);        return;      }      TopologyMsg outTopoMsg=sendTopoToRemoteDS();      logStartSessionHandshake(inStartSessionMsg,outTopoMsg);    } catch (    IOException e) {      LocalizableMessage errMessage=ERR_DS_DISCONNECTED_DURING_HANDSHAKE.get(inServerStartMsg.getServerId(),replicationServer.getServerId());      throw new DirectoryException(ResultCode.OTHER,errMessage);    }catch (    Exception e) {      throw new DirectoryException(ResultCode.OTHER,null,null);    }    replicationServerDomain.register(this);    logger.debug(INFO_REPLICATION_SERVER_CONNECTION_FROM_DS,getReplicationServerId(),getServerId(),replicationServerDomain.getBaseDN(),session.getReadableRemoteAddress());    super.finalizeStart();  } catch (  DirectoryException de) {    abortStart(de.getMessageObject());  }catch (  Exception e) {    abortStart(null);  } finally {    releaseDomainLock();  }}  }
class C{  public char charAt(int index){  return ((char[])m_obj)[index + m_start];}  }
class C{  public void invalidatePathBounds(TreePath path){  TreeStateNode node=getNodeForPath(path,true,false);  if (node != null) {    node.markSizeInvalid();    if (node.isVisible())     updateYLocationsFrom(node.getRow());  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  getHandler().propertyChange(e);}  }
class C{  @Override protected void installDefaults(){  dateRenderer=installRendererIfPossible(Date.class,null);  numberRenderer=installRendererIfPossible(Number.class,null);  doubleRender=installRendererIfPossible(Double.class,null);  floatRenderer=installRendererIfPossible(Float.class,null);  iconRenderer=installRendererIfPossible(Icon.class,null);  imageIconRenderer=installRendererIfPossible(ImageIcon.class,null);  booleanRenderer=installRendererIfPossible(Boolean.class,new SynthBooleanTableCellRenderer());  objectRenderer=installRendererIfPossible(Object.class,new SynthTableCellRenderer());  updateStyle(table);}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public byte[] decrypt(byte[] data) throws GeneralSecurityException, CryptoManagerException {  return cryptoManager.decrypt(data);}  }
class C{  private SOAPMessage FormSOAPError(String faultCode,Throwable throwable,Message req){  String faultString=throwable.getMessage();  if (faultString == null || faultString.length() == 0) {    faultString=Utils.bundle.getString("unknownError");  }  return FormSOAPError(req,faultCode,faultString);}  }
class C{  protected void repaintRoot(JComponent root){  assert (repaintManager.repaintRoot == null);  if (repaintManager.painting) {    repaintManager.repaintRoot=root;  } else {    root.repaint();  }}  }
class C{  private boolean has_colinear(ArrayList<PlaPointInt> corners_list,PlaPointInt a_point){  int count=corners_list.size();  if (count < 2)   return false;  for (int index=0; index < count - 1; index++) {    PlaPointInt start=corners_list.get(index);    PlaPointInt end=corners_list.get(index + 1);    if (a_point.side_of(start,end) != PlaSide.COLLINEAR)     continue;    double d_start_p=start.distance_square(a_point);    double d_p_end=a_point.distance_square(end);    double d_start_end=start.distance_square(end);    if (d_start_end >= d_start_p) {      if (d_start_end >= d_p_end) {        return true;      } else {        corners_list.set(index,a_point);        return true;      }    } else {      if (d_start_end >= d_p_end) {        corners_list.set(index + 1,a_point);        return true;      } else {        corners_list.set(index,a_point);        return true;      }    }  }  return false;}  }
class C{  private LDAPReplicationDomain createReplicationDomain(int serverId,String testCase) throws Exception {  final SortedSet<String> replServers=createRSListForTestCase(testCase);  final DN baseDn=DN.valueOf(TEST_ROOT_DN_STRING);  final DomainFakeCfg domainConf=new DomainFakeCfg(baseDn,serverId + 1,replServers,1);  final LDAPReplicationDomain rd=MultimasterReplication.createNewDomain(domainConf);  rd.start();  assertTrue(rd.isConnected());  return rd;}  }
class C{  public static void dumbTradingLogic(String company,int numberOfShares,PortfolioService portfolio,Map<String,Object> quote){  JsonObject json=new JsonObject(quote);  dumbTradingLogic(company,numberOfShares,portfolio,json);}  }
class C{  public FSAssertionArtifactHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,FSAuthnRequest authnRequest,boolean doFederate,String relayState){  this.request=request;  this.response=response;  this.relayState=relayState;  this.idpDescriptor=idpDescriptor;  this.idpEntityId=idpEntityId;  if (authnRequest != null) {    this.authnRequest=authnRequest;    this.nameIDPolicy=authnRequest.getNameIDPolicy();  }  this.doFederate=doFederate;}  }
class C{  protected String paramString(){  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  return super.paramString() + ",rootPaneCheckingEnabled=" + rootPaneCheckingEnabledString;}  }
class C{  void legalTagContext(TagElement tag) throws ChangedCharSetException {  if (legalElementContext(tag.getElement())) {    markFirstTime(tag.getElement());    return;  }  if (tag.breaksFlow() && (stack != null) && !stack.tag.breaksFlow()) {    endTag(true);    legalTagContext(tag);    return;  }  for (TagStack s=stack; s != null; s=s.next) {    if (s.tag.getElement() == dtd.head) {      while (stack != s) {        endTag(true);      }      endTag(true);      legalTagContext(tag);      return;    }  }  error("tag.unexpected",tag.getElement().getName());}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public E push(E object){  addElement(object);  return object;}  }
class C{  public ImportParameters backendId(String id){  backendID=id;  return this;}  }
class C{  public int byteLength(){  return places.length;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  try {    forwardToAMViewBean();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String cloneServerName=getStringOptionValue(CLONE_NAME);  String[] params={serverName,cloneServerName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CLONE_SERVER",params);    if (ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {      if (ServerConfiguration.isServerInstanceExist(adminSSOToken,cloneServerName)) {        outputWriter.printlnMessage(getResourceString("clone-server-exists"));      } else {        ServerConfiguration.cloneServerInstance(adminSSOToken,serverName,cloneServerName);        outputWriter.printlnMessage(getResourceString("clone-server-succeeded"));      }    } else {      outputWriter.printlnMessage(getResourceString("clone-server-no-exists"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_CLONE_SERVER",params);  } catch (  ConfigurationException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CLONE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CLONE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CLONE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void error(String msg){  getDebugServiceInstance().error(msg,null);}  }
class C{  public boolean validate(String value){  return ValidateIPaddress.isValidIP(value);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignaturePropertyElement createSignaturePropertyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignaturePropertyElementImpl();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],provider);      fail("Expected IllegalArgumentException was not thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public Object[] toArray(){  return children.toArray();}  }
class C{  private void dispatchEventImpl(final AWTEvent event,final Object src){  event.isPosted=true;  if (event instanceof ActiveEvent) {    setCurrentEventAndMostRecentTimeImpl(event);    ((ActiveEvent)event).dispatch();  } else   if (src instanceof Component) {    ((Component)src).dispatchEvent(event);    event.dispatched();  } else   if (src instanceof MenuComponent) {    ((MenuComponent)src).dispatchEvent(event);  } else   if (src instanceof TrayIcon) {    ((TrayIcon)src).dispatchEvent(event);  } else   if (src instanceof AWTAutoShutdown) {    if (noEvents()) {      dispatchThread.stopDispatching();    }  } else {    if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {      getEventLog().fine("Unable to dispatch event: " + event);    }  }}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  public void treeNodesChanged(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    TreeStateNode changedNode;    changedIndexs=e.getChildIndices();    changedNode=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    if (changedNode != null) {      Object changedValue=changedNode.getValue();      changedNode.updatePreferredSize();      if (changedNode.hasBeenExpanded() && changedIndexs != null) {        int counter;        TreeStateNode changedChildNode;        for (counter=0; counter < changedIndexs.length; counter++) {          changedChildNode=(TreeStateNode)changedNode.getChildAt(changedIndexs[counter]);          changedChildNode.setUserObject(treeModel.getChild(changedValue,changedIndexs[counter]));          changedChildNode.updatePreferredSize();        }      } else       if (changedNode == root) {        changedNode.updatePreferredSize();      }      if (!isFixedRowHeight()) {        int aRow=changedNode.getRow();        if (aRow != -1)         this.updateYLocationsFrom(aRow);      }      this.visibleNodesChanged();    }  }}  }
class C{  public void schemaChanged(String serviceName,String version){  if (debug.messageEnabled()) {    debug.message("IdRepoAttributeValidatorManager.schemaChanged: " + "Service name = " + serviceName);  }synchronized (validatorCache) {    validatorCache.clear();  }}  }
class C{  @Override public void cacheResult(List<Foo> foos){  for (  Foo foo : foos) {    if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {      cacheResult(foo);    } else {      foo.resetOriginalValues();    }  }}  }
class C{  public InternalError(){  super();}  }
class C{  public UnknownDependencyException(final String message){  super(message);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public NamePath withHead(String newHead){  List<String> newPathPieces=new ArrayList<>();  newPathPieces.addAll(pathPieces);  newPathPieces.set(pathPieces.size() - 1,newHead);  return new NamePath(newPathPieces);}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public Value parseValueFromTwoVarOpCompare(Value left,int compare_mode,String methodName,Value right,SemanticScope scope,LineCol lineCol) throws SyntaxException {  if (left.type() instanceof PrimitiveTypeDef) {    if (right.type() instanceof PrimitiveTypeDef) {      Ins.TwoVarOp twoVarOp;      if (left.type().equals(DoubleTypeDef.get()) || right.type().equals(DoubleTypeDef.get())) {        Value a=cast(DoubleTypeDef.get(),left,lineCol);        Value b=cast(DoubleTypeDef.get(),right,lineCol);        twoVarOp=new Ins.TwoVarOp(a,b,Ins.TwoVarOp.Dcmpg,IntTypeDef.get(),lineCol);      } else       if (left.type().equals(FloatTypeDef.get()) || right.type().equals(FloatTypeDef.get())) {        Value a=cast(FloatTypeDef.get(),left,lineCol);        Value b=cast(FloatTypeDef.get(),right,lineCol);        twoVarOp=new Ins.TwoVarOp(a,b,Ins.TwoVarOp.Fcmpg,IntTypeDef.get(),lineCol);      } else {        Value a=cast(LongTypeDef.get(),left,lineCol);        Value b=cast(LongTypeDef.get(),right,lineCol);        twoVarOp=new Ins.TwoVarOp(a,b,Ins.TwoVarOp.Lcmp,IntTypeDef.get(),lineCol);      }      SMethodDef compare=getLang_compare();      Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(compare,lineCol);      invokeStatic.arguments().add(twoVarOp);      invokeStatic.arguments().add(new IntValue(compare_mode));      return invokeStatic;    } else {      return parseValueFromTwoVarOpCompare(boxPrimitive(left,lineCol),compare_mode,methodName,right,scope,lineCol);    }  } else {    STypeDef comparable=getTypeWithName("java.lang.Comparable",lineCol);    assert comparable != null;    if (comparable.isAssignableFrom(left.type())) {      SMethodDef m=getComparable_compareTo();      Ins.InvokeInterface invokeInterface=new Ins.InvokeInterface(left,m,lineCol);      invokeInterface.arguments().add(right);      SMethodDef compare=getLang_compare();      Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(compare,lineCol);      invokeStatic.arguments().add(invokeInterface);      invokeStatic.arguments().add(new IntValue(compare_mode));      return invokeStatic;    } else {      List<Value> args=new ArrayList<>();      args.add(right);      return invokeMethodWithArgs(lineCol,left.type(),left,methodName,args,scope);    }  }}  }
class C{  public boolean isLogEnabled(){  return logStatus;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }  ArrayTable.writeArrayTable(s,clientProperties);}  }
class C{  @Override public Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,true);    array[1]=foo;    array[2]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public boolean match(Certificate certificate){  if (!(certificate instanceof X509Certificate)) {    return false;  }  X509Certificate cert=(X509Certificate)certificate;  if ((certificateEquals != null) && !certificateEquals.equals(cert)) {    return false;  }  if ((serialNumber != null) && !serialNumber.equals(cert.getSerialNumber())) {    return false;  }  if ((issuer != null) && !issuer.equals(cert.getIssuerX500Principal())) {    return false;  }  if ((subject != null) && !subject.equals(cert.getSubjectX500Principal())) {    return false;  }  if ((subjectKeyIdentifier != null) && !Arrays.equals(subjectKeyIdentifier,getExtensionValue(cert,"2.5.29.14"))) {    return false;  }  if ((authorityKeyIdentifier != null) && !Arrays.equals(authorityKeyIdentifier,getExtensionValue(cert,"2.5.29.35"))) {    return false;  }  if (certificateValid != null) {    try {      cert.checkValidity(certificateValid);    } catch (    CertificateExpiredException e) {      return false;    }catch (    CertificateNotYetValidException e) {      return false;    }  }  if (privateKeyValid != null) {    try {      byte[] bytes=getExtensionValue(cert,"2.5.29.16");      if (bytes == null) {        return false;      }      PrivateKeyUsagePeriod pkup=(PrivateKeyUsagePeriod)PrivateKeyUsagePeriod.ASN1.decode(bytes);      Date notBefore=pkup.getNotBefore();      Date notAfter=pkup.getNotAfter();      if ((notBefore == null) && (notAfter == null)) {        return false;      }      if ((notBefore != null) && notBefore.compareTo(privateKeyValid) > 0) {        return false;      }      if ((notAfter != null) && notAfter.compareTo(privateKeyValid) < 0) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (subjectPublicKeyAlgID != null) {    try {      byte[] encoding=cert.getPublicKey().getEncoded();      AlgorithmIdentifier ai=((SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding)).getAlgorithmIdentifier();      if (!subjectPublicKeyAlgID.equals(ai.getAlgorithm())) {        return false;      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (subjectPublicKey != null) {    if (!Arrays.equals(subjectPublicKey,cert.getPublicKey().getEncoded())) {      return false;    }  }  if (keyUsage != null) {    boolean[] ku=cert.getKeyUsage();    if (ku != null) {      int i=0;      int min_length=(ku.length < keyUsage.length) ? ku.length : keyUsage.length;      for (; i < min_length; i++) {        if (keyUsage[i] && !ku[i]) {          return false;        }      }      for (; i < keyUsage.length; i++) {        if (keyUsage[i]) {          return false;        }      }    }  }  if (extendedKeyUsage != null) {    try {      List keyUsage=cert.getExtendedKeyUsage();      if (keyUsage != null) {        if (!keyUsage.containsAll(extendedKeyUsage)) {          return false;        }      }    } catch (    CertificateParsingException e) {      return false;    }  }  if (pathLen != -1) {    int p_len=cert.getBasicConstraints();    if ((pathLen < 0) && (p_len >= 0)) {      return false;    }    if ((pathLen > 0) && (pathLen > p_len)) {      return false;    }  }  if (subjectAltNames != null) {    PASSED:     try {      byte[] bytes=getExtensionValue(cert,"2.5.29.17");      if (bytes == null) {        return false;      }      List<GeneralName> sans=((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();      if ((sans == null) || (sans.size() == 0)) {        return false;      }      boolean[][] map=new boolean[9][];      for (int i=0; i < 9; i++) {        map[i]=(subjectAltNames[i] == null) ? EmptyArray.BOOLEAN : new boolean[subjectAltNames[i].size()];      }      for (      GeneralName name : sans) {        int tag=name.getTag();        for (int i=0; i < map[tag].length; i++) {          if (subjectAltNames[tag].get(i).equals(name)) {            if (!matchAllNames) {              break PASSED;            }            map[tag][i]=true;          }        }      }      if (!matchAllNames) {        return false;      }      for (int tag=0; tag < 9; tag++) {        for (int name=0; name < map[tag].length; name++) {          if (!map[tag][name]) {            return false;          }        }      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (nameConstraints != null) {    if (!nameConstraints.isAcceptable(cert)) {      return false;    }  }  if (policies != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.32");    if (bytes == null) {      return false;    }    if (policies.size() == 0) {      return true;    }    PASSED:     try {      List<PolicyInformation> policyInformations=((CertificatePolicies)CertificatePolicies.ASN1.decode(bytes)).getPolicyInformations();      for (      PolicyInformation policyInformation : policyInformations) {        if (policies.contains(policyInformation.getPolicyIdentifier())) {          break PASSED;        }      }      return false;    } catch (    IOException e) {      return false;    }  }  if (pathToNames != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.30");    if (bytes != null) {      NameConstraints nameConstraints;      try {        nameConstraints=(NameConstraints)NameConstraints.ASN1.decode(bytes);      } catch (      IOException e) {        return false;      }      if (!nameConstraints.isAcceptable(pathToNames)) {        return false;      }    }  }  return true;}  }
class C{  public void assertion(boolean b,String msg){  if (!b) {    String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  public static String forceFrameID24To23(String identifier){  return ID3Frames.forcev24Tov23.get(identifier);}  }
class C{  @Override public Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  int count=countByField2(field2);  if (count == 0) {    return null;  }  List<Foo> list=findByField2(field2,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix01.class,args);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfString copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfString)super.copyTo(document,allowDuplicating);}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.remove(propertyName,listener);  }}  }
class C{  public boolean remove(AccessibleState state){  if (states == null) {    return false;  } else {    return states.removeElement(state);  }}  }
class C{  public void write(int b) throws IOException {  output.write(b);  bytesWritten++;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ExtensionElementImpl();}  }
class C{  protected void stop(){  timer.stop();}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof FilePermission))   return false;  FilePermission that=(FilePermission)obj;  return (this.mask == that.mask) && this.cpath.equals(that.cpath) && (this.directory == that.directory)&& (this.recursive == that.recursive);}  }
class C{  public final void printlnNoWrap(final LocalizableMessage msg){  if (!isQuiet()) {    out.println(msg);  }}  }
class C{  public boolean isMultiValued(final Attribute attribute) throws BadRequestException {  checkForInvalidAttribute(attribute.getName());  for (  final AttributeInfoHelper attributeInfo : attributes) {    final String attributeName=attributeInfo.getAttributeInfo().getName();    if (attribute.getName().equals(attributeName)) {      return attributeInfo.getAttributeInfo().isMultiValued();    }  }  throw new BadRequestException("Target does not support attribute " + attribute.getName());}  }
class C{  private void sendTryingResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.TRYING);  if (transaction.getState() != TransactionState.TERMINATED) {    ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();    if (serverHeader != null) {      sipResponse.setHeader(serverHeader);    }    try {      transaction.sendResponse(sipResponse);      transaction.releaseSem();    } catch (    Exception ex) {      logger.logError("Problem sending error response",ex);      transaction.releaseSem();      sipStack.removeTransaction(transaction);    }  }}  }
class C{  public void mouseEntered(MouseEvent e){  getHandler().mouseEntered(e);}  }
class C{  private HttpSpanFactory(){}  }
class C{  protected void logToSkipWriter(List<StringBuilder> lines,LocalizableMessage message){  entriesIgnored.incrementAndGet();  BufferedWriter skipWriter=importConfig.getSkipWriter();  if (skipWriter != null) {    logToWriter(skipWriter,lines,message);  }}  }
class C{  public int hashCode(){  return oid.hashCode();}  }
class C{  static ResourceBundle loadResourceBundle(String resourceBundleName){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  cl=ClassLoader.getSystemClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  throw new MissingResourceException("Failed to load the specified resource bundle \"" + resourceBundleName + "\"",resourceBundleName,null);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) private boolean areClingsEnabled(){  if (ActivityManager.isRunningInTestHarness())   return false;  final AccessibilityManager a11yManager=(AccessibilityManager)mLauncher.getSystemService(Launcher.ACCESSIBILITY_SERVICE);  if (a11yManager.isTouchExplorationEnabled()) {    return false;  }  if (Utilities.ATLEAST_JB_MR2) {    UserManager um=(UserManager)mLauncher.getSystemService(Context.USER_SERVICE);    Bundle restrictions=um.getUserRestrictions();    if (restrictions.getBoolean(UserManager.DISALLOW_MODIFY_ACCOUNTS,false)) {      return false;    }  }  if (Settings.Secure.getInt(mLauncher.getContentResolver(),SKIP_FIRST_USE_HINTS,0) == 1) {    return false;  }  return true;}  }
class C{  public void finishResponse() throws IOException {  if (responseFinished) {    return;  }  if (lastActiveFilter != -1) {    activeFilters[lastActiveFilter].end();  }  flushBuffer(true);  responseFinished=true;}  }
class C{  public synchronized void clearMemoryBackend(){  entryMap.clear();  childDNs.clear();}  }
class C{  private void addServiceListener(String service,String name) throws SMSException, SSOException {  if (debug.messageEnabled()) {    debug.message("addServiceListener for " + service + ", name="+ name);  }  AMAuthLevelManager.getInstance().addAuthConfigListener(service,name);}  }
class C{  public boolean isStatusReplicationSubcommand(){  return isSubcommand(STATUS_REPLICATION_SUBCMD_NAME);}  }
class C{  public JKUser(){}  }
class C{  public static Map<String,byte[]> loadNonClassEntries(File jarFile) throws IOException {  Map<String,byte[]> entries=new HashMap<String,byte[]>();  ZipInputStream jis=new ZipInputStream(new FileInputStream(jarFile));  ZipEntry entry;  while ((entry=jis.getNextEntry()) != null) {    try {      final String name=entry.getName();      if (!name.endsWith(".class") && !entry.isDirectory()) {        byte[] bytes=IOUtils.toByteArray(jis);        entries.put(name,bytes);      }    } catch (    Exception e) {      e.printStackTrace();    } finally {      jis.closeEntry();    }  }  jis.close();  return entries;}  }
class C{  public boolean isStandardImageMetadataFormatSupported(){  return supportsStandardImageMetadataFormat;}  }
class C{  @Override public boolean abort() throws LoginException {  if (principal == null) {    return false;  }  if (committed) {    logout();  } else {    committed=false;    principal=null;  }  if (log.isDebugEnabled()) {    log.debug("Abort");  }  return true;}  }
class C{  public static boolean isLeap(long year){  return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getClassName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getClassName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType",MMB);    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"" + MMB + "\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getClassName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getClassName());  }  if (clone.getFieldValue("persistPolicy") == null) {    clone.setField("persistPolicy","never");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor persistPolicy to \"never\"");  }  if (clone.getFieldValue("log") == null) {    clone.setField("log","F");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor \"log\" field to \"F\"");  }  if (clone.getFieldValue("visibility") == null) {    clone.setField("visibility","1");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor visibility to 1");  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!((String)clone.getFieldValue("descriptorType")).equalsIgnoreCase(MMB)) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: " + MMB + " , was: "+ clone.getFieldValue("descriptorType"));  }  return clone;}  }
class C{  private boolean isDisplayedEntryRemote(BasicNode node){  if (isFollowReferrals()) {    if (node == rootNode) {      return false;    }    if (node.getRemoteUrl() != null) {      return true;    }    final BasicNode parent=(BasicNode)node.getParent();    if (parent != null) {      return isDisplayedEntryRemote(parent);    }  }  return false;}  }
class C{  private int nextChunk() throws IOException {  int available=super.available();  if (available <= 0) {    available=1;  }  if (available > inBuf.length) {    available=super.read(inBuf,0,inBuf.length);  } else {    available=super.read(inBuf,0,available);  }  if (available < 0) {    if (finalized) {      return -1;    }    try {      if (bufferedBlockCipher != null) {        maxBuf=bufferedBlockCipher.doFinal(buf,0);      } else {        maxBuf=0;      }    } catch (    Exception e) {      throw new IOException("error processing stream: " + e.toString());    }    bufOff=0;    finalized=true;    if (bufOff == maxBuf) {      return -1;    }  } else {    bufOff=0;    try {      if (bufferedBlockCipher != null) {        maxBuf=bufferedBlockCipher.processBytes(inBuf,0,available,buf,0);      } else {        streamCipher.processBytes(inBuf,0,available,buf,0);        maxBuf=available;      }    } catch (    Exception e) {      throw new IOException("error processing stream: " + e.toString());    }    if (maxBuf == 0) {      return nextChunk();    }  }  return maxBuf;}  }
class C{  public static long bytesUsed(){  failIfNotInitialized();  try {    return mCache.bytesUsed();  } catch (  Exception e) {    return -1;  }}  }
class C{  public Bidi(AttributedCharacterIterator paragraph){  if (paragraph == null) {    throw new IllegalArgumentException("paragraph is null");  }  bidiBase=new BidiBase(0,0);  bidiBase.setPara(paragraph);}  }
class C{  public double value(){  return value;}  }
class C{  public boolean isReliable(){  return false;}  }
class C{  private void indexModified(AbstractIndexDescriptor modifiedIndex){  IndexModifiedEvent ev=new IndexModifiedEvent(modifiedIndex);  for (  IndexModifiedListener listener : indexListeners) {    listener.indexModified(ev);  }}  }
class C{  public TransactionAlreadyExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void verifyAcceptedCertificates(X509Certificate[] chain,String authType) throws CertificateException {  boolean found=false;  for (int i=0; i < acceptedChains.size() && !found; i++) {    if (authType.equals(acceptedAuthTypes.get(i))) {      X509Certificate[] current=acceptedChains.get(i);      found=current.length == chain.length;      for (int j=0; j < chain.length && found; j++) {        found=chain[j].equals(current[j]);      }    }  }  if (!found) {    throw new OpendsCertificateException("Certificate not in list of accepted certificates",chain);  }}  }
class C{  public Subject removeSubject(String subjectName){  Subject subject=null;  QualifiedSubject qualifiedSubject=(QualifiedSubject)users.remove(subjectName);  if (qualifiedSubject != null) {    subject=qualifiedSubject.getSubject();  }  return subject;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public boolean isAuthOption(String opt){  return opt.equals(AccessManagerConstants.ARGUMENT_ADMIN_ID) || opt.equals(AccessManagerConstants.ARGUMENT_PASSWORD_FILE);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private InternalClientConnection(){  super();  String commonName="Internal Client";  String shortDNString="cn=" + commonName;  String fullDNString=shortDNString + ",cn=Root DNs,cn=config";  try {    LinkedHashMap<ObjectClass,String> objectClasses=new LinkedHashMap<>();    put(objectClasses,getTopObjectClass());    put(objectClasses,getPersonObjectClass());    put(objectClasses,DirectoryServer.getSchema().getObjectClass(OC_ROOT_DN));    LinkedHashMap<AttributeType,List<Attribute>> userAttrs=new LinkedHashMap<>();    put(userAttrs,ATTR_COMMON_NAME,commonName);    put(userAttrs,ATTR_SN,commonName);    put(userAttrs,ATTR_ROOTDN_ALTERNATE_BIND_DN,shortDNString);    AttributeType privType=DirectoryServer.getSchema().getAttributeType(OP_ATTR_PRIVILEGE_NAME);    AttributeBuilder builder=new AttributeBuilder(privType);    for (    Privilege p : Privilege.getDefaultRootPrivileges()) {      builder.add(p.getName());    }    LinkedHashMap<AttributeType,List<Attribute>> operationalAttrs=new LinkedHashMap<>();    operationalAttrs.put(privType,builder.toAttributeList());    DN internalUserDN=DN.valueOf(fullDNString);    Entry internalUserEntry=new Entry(internalUserDN,objectClasses,userAttrs,operationalAttrs);    this.authenticationInfo=new AuthenticationInfo(internalUserEntry,true);    super.setAuthenticationInfo(authenticationInfo);    super.setSizeLimit(0);    super.setTimeLimit(0);    super.setIdleTimeLimit(0);    super.setLookthroughLimit(0);  } catch (  LocalizedIllegalArgumentException e) {    logger.traceException(e);    logger.error(ERR_INTERNAL_CANNOT_DECODE_DN,fullDNString,getExceptionMessage(e));  }  connectionID=nextConnectionID.getAndDecrement();}  }
class C{  public String executeCypher(String serverUrl,String... cypherStatements){  return executeCypher(serverUrl,Collections.<String,String>emptyMap(),cypherStatements);}  }
class C{  protected String jmxUuregister(MBeanServerConnection jmxServerConnection,String name) throws Exception {  String error=null;  if (isEcho()) {    handleOutput("Unregister MBean " + name);  }  jmxServerConnection.unregisterMBean(new ObjectName(name));  return error;}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){}  }
class C{  protected final void endOfInput(boolean streamCancelled) throws IOException {  if (cacheRequest != null) {    cacheBody.close();  }  httpEngine.release(streamCancelled);}  }
class C{  public AppLauncher env(Map<String,String> env){  if (env == null) {    throw new NullPointerException("env");  }  this.env.putAll(env);  return this;}  }
class C{  public Object clone() throws CloneNotSupportedException {  try {    UnicastRemoteObject cloned=(UnicastRemoteObject)super.clone();    cloned.reexport();    return cloned;  } catch (  RemoteException e) {    throw new ServerCloneException("Clone failed",e);  }}  }
class C{  private final void addToTokenQueue(String s){  m_compiler.getTokenQueue().addElement(s);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  String name;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  child=attributes.item(1);  name=child.getNodeName();  assertTrue("namednodemapReturnLastItemAssert",(equals("domestic",name) | equals("street",name)));}  }
class C{  protected void addAuthConfigListener(String service,String name){  Set<String> set=authConfigListenerMap.get(service);  if (set == null) {    set=new CopyOnWriteArraySet<>();    set.add(name);    authConfigListenerMap.put(service,set);  } else {    set.add(name);  }}  }
class C{  public void replaceAll(Collection<ByteString> values){  clear();  addAll(values);}  }
class C{  public MTOMFeature(){  this.enabled=true;  this.threshold=0;}  }
class C{  public JTree(TreeNode root){  this(root,false);}  }
class C{  public boolean validateSqoopPropFileAccess(){  String conffile=JOB_PROP_FILE;  if (Utility.readConfigProperties(conffile) != null) {    logger.info("able to access prop file");    return true;  } else {    logger.error("Not able to access properties file");    StackTraceElement[] stackTraceElements=Thread.currentThread().getStackTrace();    for (    StackTraceElement stackTrace : stackTraceElements) {      logger.debug(stackTrace.getClassName() + "  " + stackTrace.getMethodName()+ " "+ stackTrace.getLineNumber());    }    throw new Error();  }}  }
class C{  RequestHandlerFactoryAdapter(final RequestHandlerFactory<C,RequestContext> factory){  this.factory=factory;}  }
class C{  public SCPlatformModelImpl(HttpServletRequest req,Map map) throws AMConsoleException {  super(req,SERVICE_NAME,map);}  }
class C{  public void markIfFail(Outcome o){  if (o.isFailure()) {    get().addAction(new ErrorAction(o.getAbnormal()));  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public JKUser(final int id,final String name,final String fullName){  this.userRecordId=id;  this.userId=name;  this.fullName=fullName;}  }
class C{  public LoginRequiredException(String message){  super(400,"login_required",message);}  }
class C{  @Override public void heartbeat(){  super.heartbeat();  Iterator<MembershipListener> membershipListenerIterator=membershipListeners.iterator();  while (membershipListenerIterator.hasNext()) {    MembershipListener listener=membershipListenerIterator.next();    if (listener instanceof Heartbeat)     ((Heartbeat)listener).heartbeat();  }  Iterator<ChannelListener> channelListenerIterator=channelListeners.iterator();  while (channelListenerIterator.hasNext()) {    ChannelListener listener=channelListenerIterator.next();    if (listener instanceof Heartbeat)     ((Heartbeat)listener).heartbeat();  }}  }
class C{  @Override public JapaneseDate dateYearDay(int prolepticYear,int dayOfYear){  return new JapaneseDate(LocalDate.ofYearDay(prolepticYear,dayOfYear));}  }
class C{  public Builder nameForm(final String nameFormOID){  this.nameFormOID=nameFormOID;  return this;}  }
class C{  public static HeartbeatConfiguration create(Map<String,Object> options) throws ConfigurationException {  HeartbeatConfiguration conf=new HeartbeatConfiguration();  Yaml yaml=new Yaml();  String str=yaml.dumpAsMap(options);  conf.values=yaml.loadAs(str,HeartbeatConfiguration.Values.class);  return conf;}  }
class C{  public String toString(){  return m_str;}  }
class C{  public void testCheckValidity1() throws CertificateExpiredException, CertificateNotYetValidException, java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException {  if (this.cert == null) {    return;  }  Date date=new Date();  Date nb_date=tbt_cert.getNotBefore();  Date na_date=tbt_cert.getNotAfter();  try {    tbt_cert.checkValidity();    assertFalse("CertificateExpiredException expected",date.compareTo(na_date) > 0);    assertFalse("CertificateNotYetValidException expected",date.compareTo(nb_date) < 0);  } catch (  CertificateExpiredException e) {    assertTrue("Unexpected CertificateExpiredException was thrown",date.compareTo(na_date) > 0);  }catch (  CertificateNotYetValidException e) {    assertTrue("Unexpected CertificateNotYetValidException was thrown",date.compareTo(nb_date) < 0);  }  try {    tbt_cert.checkValidity();  } catch (  CertificateExpiredException e) {  }  try {    cert.checkValidity();  } catch (  java.security.cert.CertificateExpiredException e) {  }}  }
class C{  @Inject public InMemoryNotificationBroker(ExecutorService executorService,TimeService timeService,@Named("queueTimeoutMilliseconds") long queueTimeoutMilliseconds,@Named("queueSize") int queueSize){  Reject.ifNull(executorService,"Executor service must not be null");  Reject.ifNull(timeService,"Time service must not be null");  Reject.ifTrue(queueTimeoutMilliseconds < 0,"Queue timeout must be a positive integer");  Reject.ifTrue(queueSize < 0,"Queue size must be a positive integer");  this.queueTimeoutMilliseconds=queueTimeoutMilliseconds;  this.timeService=timeService;  queue=new ArrayBlockingQueue<>(queueSize);  subscriptions=new CopyOnWriteArrayList<>();  readerFuture=executorService.submit(new NotificationReader());}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public DirectColorModel(ColorSpace space,int bits,int rmask,int gmask,int bmask,int amask,boolean isAlphaPremultiplied,int transferType){  super(space,bits,rmask,gmask,bmask,amask,isAlphaPremultiplied,amask == 0 ? Transparency.OPAQUE : Transparency.TRANSLUCENT,transferType);  if (ColorModel.isLinearRGBspace(colorSpace)) {    is_LinearRGB=true;    if (maxBits <= 8) {      lRGBprecision=8;      tosRGB8LUT=ColorModel.getLinearRGB8TosRGB8LUT();      fromsRGB8LUT8=ColorModel.getsRGB8ToLinearRGB8LUT();    } else {      lRGBprecision=16;      tosRGB8LUT=ColorModel.getLinearRGB16TosRGB8LUT();      fromsRGB8LUT16=ColorModel.getsRGB8ToLinearRGB16LUT();    }  } else   if (!is_sRGB) {    for (int i=0; i < 3; i++) {      if ((space.getMinValue(i) != 0.0f) || (space.getMaxValue(i) != 1.0f)) {        throw new IllegalArgumentException("Illegal min/max RGB component value");      }    }  }  setFields();}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  SelectLineAction(){  super(selectLineAction);  start=new BeginLineAction("pigdog",false);  end=new EndLineAction("pigdog",true);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AttributeElement createAttributeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeElementImpl();}  }
class C{  public boolean hasFromTag(){  return hasParameter(ParameterNames.FROM_TAG);}  }
class C{  public TLSClientHelloExtractor(ByteBuffer netInBuffer){  int pos=netInBuffer.position();  int limit=netInBuffer.limit();  ExtractorResult result=ExtractorResult.NOT_PRESENT;  List<Cipher> clientRequestedCiphers=new ArrayList<>();  String sniValue=null;  try {    netInBuffer.flip();    if (!isAvailable(netInBuffer,TLS_RECORD_HEADER_LEN)) {      result=handleIncompleteRead(netInBuffer);      return;    }    if (!isTLSHandshake(netInBuffer)) {      return;    }    if (!isAllRecordAvailable(netInBuffer)) {      result=handleIncompleteRead(netInBuffer);      return;    }    if (!isClientHello(netInBuffer)) {      return;    }    if (!isAllClientHelloAvailable(netInBuffer)) {      log.warn(sm.getString("sniExtractor.clientHelloTooBig"));      return;    }    skipBytes(netInBuffer,2);    skipBytes(netInBuffer,32);    skipBytes(netInBuffer,(netInBuffer.get() & 0xFF));    int cipherCount=netInBuffer.getChar() / 2;    for (int i=0; i < cipherCount; i++) {      int cipherId=netInBuffer.getChar();      clientRequestedCiphers.add(Cipher.valueOf(cipherId));    }    skipBytes(netInBuffer,(netInBuffer.get() & 0xFF));    if (!netInBuffer.hasRemaining()) {      return;    }    skipBytes(netInBuffer,2);    while (netInBuffer.hasRemaining() && sniValue == null) {      sniValue=readSniExtension(netInBuffer);    }    if (sniValue != null) {      result=ExtractorResult.COMPLETE;    }  }  finally {    this.result=result;    this.clientRequestedCiphers=clientRequestedCiphers;    this.sniValue=sniValue;    netInBuffer.limit(limit);    netInBuffer.position(pos);  }}  }
class C{  public boolean removeNameIdentifier(){  if (_subjectConfirmation == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject:At least one of " + "NameIdentifier and SubjectConfirmation is mandatory");    }    return false;  }  _nameIdentifier=null;  return true;}  }
class C{  FilteredRole(AttrSet attrSet) throws UMSException {  this(TemplateManager.getTemplateManager().getCreationTemplate(_class,null),attrSet);}  }
class C{  public synchronized void addConsumer(ImageConsumer ic){  if (theConsumers.contains(ic)) {    return;  }  theConsumers.addElement(ic);  try {    initConsumer(ic);    sendPixels(ic,0,0,width,height);    if (isConsumer(ic)) {      ic.imageComplete(animating ? ImageConsumer.SINGLEFRAMEDONE : ImageConsumer.STATICIMAGEDONE);      if (!animating && isConsumer(ic)) {        ic.imageComplete(ImageConsumer.IMAGEERROR);        removeConsumer(ic);      }    }  } catch (  Exception e) {    if (isConsumer(ic)) {      ic.imageComplete(ImageConsumer.IMAGEERROR);    }  }}  }
class C{  private ComponentHelpCallback(ManagedObject<?> mo,Collection<PropertyDefinition<?>> c){  this.mo=mo;  this.properties=c;}  }
class C{  public FilerException(String s){  super(s);}  }
class C{  public static int resetPostSynchronizationCount(){  return postSynchronizationCounter.getAndSet(0);}  }
class C{  public static boolean equals(byte[] array1,byte[] array2,int length){  if (length < 0) {    throw new IllegalArgumentException();  }  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length < length || array2.length < length) {    return false;  }  for (int i=0; i < length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void increment(int[] currentOffset){  myOffset=currentOffset[0];}  }
class C{  private void returnSOAPMessage(SOAPMessage msg,HttpServletResponse response){  try {    if (msg != null) {      SAMLUtils.setMimeHeaders(msg.getMimeHeaders(),response);      ServletOutputStream servletoutputstream=response.getOutputStream();      msg.writeTo(servletoutputstream);      servletoutputstream.flush();      return;    } else {      response.flushBuffer();      return;    }  } catch (  Exception e) {    FSUtils.debug.error("FSSSOAndFedService.returnSOAPMessage: " + "Exception::",e);    return;  }}  }
class C{  public void testKeyStore02() throws KeyStoreException {  String[] invalidValues=SpiEngUtils.invalidValues;  try {    KeyStore.getInstance(null);    fail("NullPointerException must be thrown when type is null");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyStore.getInstance(invalidValues[i]);      fail("KeyStoreException must be thrown (type: ".concat(invalidValues[i]).concat(" )"));    } catch (    KeyStoreException e) {    }  }}  }
class C{  public static Fragment6 newInstance(int sectionNumber){  Fragment6 fragment=new Fragment6();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  protected void releaseManagedConnection() throws IOException {  if (managedConn != null) {    try {      managedConn.releaseConnection();    }  finally {      managedConn=null;    }  }}  }
class C{  public synchronized int co_joinCoroutineSet(int coroutineID){  if (coroutineID >= 0) {    if (coroutineID >= m_unreasonableId || m_activeIDs.get(coroutineID))     return -1;  } else {    coroutineID=0;    while (coroutineID < m_unreasonableId) {      if (m_activeIDs.get(coroutineID))       ++coroutineID; else       break;    }    if (coroutineID >= m_unreasonableId)     return -1;  }  m_activeIDs.set(coroutineID);  return coroutineID;}  }
class C{  OpenAMClientRegistration(AMIdentity amIdentity,PEMDecoder pemDecoder,OpenIdResolverService resolverService,OAuth2ProviderSettings providerSettings,ClientAuthenticationFailureFactory failureFactory) throws InvalidClientException {  this.amIdentity=amIdentity;  this.pemDecoder=pemDecoder;  this.resolverService=resolverService;  this.providerSettings=providerSettings;  try {    this.digest=MessageDigest.getInstance("SHA-256");  } catch (  NoSuchAlgorithmException e) {    throw failureFactory.getException("SHA-256 algorithm MessageDigest not available");  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthPanelUI();}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){  super.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  private boolean applicationEligibleForUpgrade(String realm,String appName,Map<String,Set<String>> appData){  if (ROOT_REALM.equals(realm)) {    return !defaultApplicationNames.contains(appName) && !isNotEmpty(appData.get(CONFIG_RESOURCE_TYPE_UUIDS));  } else {    return !isNotEmpty(appData.get(CONFIG_RESOURCE_TYPE_UUIDS));  }}  }
class C{  @Override public void submitOperation(Operation operation) throws DirectoryException {  submitOperation(operation,isBlocking);}  }
class C{  private static boolean canUseMetaStep(UninstantiatedDescribable ud){  return canUseSymbol(ud) && StepDescriptor.metaStepsOf(ud.getSymbol()).size() == 1;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public boolean equals(java.lang.Object ts){  if (ts instanceof Timestamp) {    return this.equals((Timestamp)ts);  } else {    return false;  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("Service Component name: " + getComponentName());  sb.append("\n\tAttributes: " + getAttributes()).append("\n");  try {    Iterator subConfigNames=getSubConfigNames().iterator();    while (subConfigNames.hasNext()) {      ServiceConfig ssc=getSubConfig((String)subConfigNames.next());      sb.append(ssc);    }  } catch (  Exception e) {    sb.append(e.getMessage());  }  return (sb.toString());}  }
class C{  private void deregisterPlugin(DN configEntryDN){  pluginLock.lock();  DirectoryServerPlugin<? extends PluginCfg> plugin;  try {    plugin=registeredPlugins.remove(configEntryDN);    if (plugin != null) {      deregisterPlugin0(plugin);      plugin.finalizePlugin();    }  }  finally {    pluginLock.unlock();  }}  }
class C{  public static Object proprietaryEvaluate(final String expression,final Class<?> expectedType,final PageContext pageContext,final ProtectedFunctionMapper functionMap) throws ELException {  final ExpressionFactory exprFactory=jspf.getJspApplicationContext(pageContext.getServletContext()).getExpressionFactory();  ELContext ctx=pageContext.getELContext();  ELContextImpl ctxImpl;  if (ctx instanceof ELContextWrapper) {    ctxImpl=(ELContextImpl)((ELContextWrapper)ctx).getWrappedELContext();  } else {    ctxImpl=(ELContextImpl)ctx;  }  ctxImpl.setFunctionMapper(functionMap);  ValueExpression ve=exprFactory.createValueExpression(ctx,expression,expectedType);  return ve.getValue(ctx);}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  public LDAPException(int resultCode,LocalizableMessage errorMessage,LocalizableMessage message){  super(message);  this.resultCode=resultCode;  this.errorMessage=errorMessage;  matchedDN=null;}  }
class C{  public int awaitAdvance(int phase){  final Phaser root=this.root;  long s=(root == this) ? state : reconcileState();  int p=(int)(s >>> PHASE_SHIFT);  if (phase < 0)   return phase;  if (p == phase)   return root.internalAwaitAdvance(phase,null);  return p;}  }
class C{  protected String nullsToBlanks(String s){  return nullsToString(s,"");}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgContactElement createMsgContactElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgContactElementImpl();}  }
class C{  public void flip(int i){  bits[i >> 5]^=1 << (i & 0x1F);}  }
class C{  @Override public Foo findByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_Last(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public static <T>LinkedHashSet<T> asOrderedSet(T... values){  if (values == null) {    return new LinkedHashSet<T>(0);  } else {    return new LinkedHashSet<T>(Arrays.asList(values));  }}  }
class C{  public void update(Client client,OAuth2Request request) throws InvalidClientMetadata, UnauthorizedClientException {  delete(client.getClientID(),request);  create(client,request);}  }
class C{  public ZipException(){  super();}  }
class C{  public String toString(){  return linkedException == null ? super.toString() : super.toString() + "\n - with linked exception:\n[" + linkedException.toString()+ "]";}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobPrioritySupported);}  }
class C{  public int count(){  return part_arr.size();}  }
class C{  public static void initializeProperties(Properties properties){  SystemPropertiesManager.initializeProperties(properties);}  }
class C{  public void addAccessibleSelection(int i){  JList.this.addSelectionInterval(i,i);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefEncryptedKeyElement createMustSupportRefEncryptedKeyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefEncryptedKeyElementImpl();}  }
class C{  public final boolean isEnabled(AvroParser.Feature f){  return (_avroParserFeatures & f.getMask()) != 0;}  }
class C{  public FrameBodyTOWN(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public AuthenticationInfoList(){  super(AuthenticationInfo.class,AuthenticationInfoHeader.NAME);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public StopMsg(byte[] in) throws DataFormatException {  if (in[0] != MSG_TYPE_STOP) {    throw new DataFormatException("input is not a valid Stop message: " + in[0]);  }}  }
class C{  static <K extends Comparable<K>,V>BlockLogReader<K,V> newReader(final File file,final RandomAccessFile reader,final RecordParser<K,V> parser){  return new BlockLogReader<>(file,reader,parser,BLOCK_SIZE);}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  initializeInternal(templateFile,arguments,lineNumber,warnings);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public int pkg_count(){  return package_list.size();}  }
class C{  public static boolean compareCaseInsensitiveString(String s1,String s2){  return s1 == null ? s2 == null : s1.equalsIgnoreCase(s2);}  }
class C{  public IOUtils(){  super();}  }
class C{  public RemoteCookie(Cookie cookie){  this.cookie=cookie;  comment=cookie.getComment();  domain=cookie.getDomain();  maxAge=cookie.getMaxAge();  name=cookie.getName();  path=cookie.getPath();  secure=cookie.getSecure();  value=cookie.getValue();  version=cookie.getVersion();}  }
class C{  public static byte parseByte(String string) throws NumberFormatException {  return parseByte(string,10);}  }
class C{  public void engineDeleteEntry(String alias) throws KeyStoreException {  Key k=(Key)keys.remove(alias);  Certificate c=(Certificate)certs.remove(alias);  if (c != null) {    chainCerts.remove(new CertId(c.getPublicKey()));  }  if (k != null) {    String id=(String)localIds.remove(alias);    if (id != null) {      c=(Certificate)keyCerts.remove(id);    }    if (c != null) {      chainCerts.remove(new CertId(c.getPublicKey()));    }  }}  }
class C{  public static boolean copy(File inFile,File outFile){  if (!inFile.exists()) {    return false;  }  FileChannel in=null;  FileChannel out=null;  try {    in=new FileInputStream(inFile).getChannel();    out=new FileOutputStream(outFile).getChannel();    long pos=0;    long size=in.size();    while (pos < size) {      pos+=in.transferTo(pos,10 * 1024 * 1024,out);    }  } catch (  IOException ioe) {    return false;  } finally {    try {      if (in != null) {        in.close();      }      if (out != null) {        out.close();      }    } catch (    IOException ioe) {      return false;    }  }  return true;}  }
class C{  private void updateDNValue(){  String value=name.getText().trim();  if (value.length() > 0) {    dn.setText("ou" + "=" + value + ","+ parentNode.getDN());  } else {    dn.setText("," + parentNode.getDN());  }}  }
class C{  @Override public void sendRedirect(String location) throws IOException {  this._getHttpServletResponse().sendRedirect(location);}  }
class C{  @Override public void forceResort(){  updateDataArray();  fireTableDataChanged();}  }
class C{  public ApplicationHttpRequest(HttpServletRequest request,Context context,boolean crossContext){  super(request);  this.context=context;  this.crossContext=crossContext;  setRequest(request);}  }
class C{  @Override public void handle(RadiusRequest request,RadiusResponse response,RadiusRequestContext context) throws RadiusProcessingException {  LOG.message("Entering OpenAMAuthHandler.handle");  response.setRealm(realm);  final StateAttribute state=(StateAttribute)request.getAttribute(StateAttribute.class);  ContextHolder holder=null;  if (state != null) {    final String cacheKey=state.getState();    holder=contextCache.get(cacheKey);  }  final UserPasswordAttribute credAtt=(UserPasswordAttribute)request.getAttribute(UserPasswordAttribute.class);  String credential=null;  try {    credential=credAtt.extractPassword(context.getRequestAuthenticator(),context.getClientSecret());  } catch (  final IOException e) {    LOG.error("Unable to extract credential field from RADIUS request. Denying Access.",e);    rejectAccessAndTerminateProcess(response,holder);    LOG.message("Leaving OpenAMAuthHandler.handle();");    return;  }  if (holder == null) {    holder=this.contextCache.createCachedContextHolder();    request.setContextHolderKey(holder.getCacheKey());    eventBus.post(new AuthRequestReceivedEvent(request,response,context));    final UserNameAttribute usrAtt=(UserNameAttribute)request.getAttribute(UserNameAttribute.class);    if (usrAtt == null) {      LOG.error("Request is missing USER_NAME attribute. Denying Access.");      rejectAccessAndTerminateProcess(response,holder);      LOG.message("Leaving OpenAMAuthHandler.handle()");      return;    }    holder=startAuthProcess(holder,response,usrAtt,credential);    if (holder == null || holder.getAuthPhase() == ContextHolder.AuthPhase.TERMINATED) {      LOG.message("Leaving OpenAMAuthHandler.handle(); Auth phase is TERMINATED.");      return;    }  } else {    request.setContextHolderKey(holder.getCacheKey());    eventBus.post(new AuthRequestReceivedEvent(request,response,context));  }  gatherUserInput(response,holder,credential,state);  if (holder.getAuthPhase() == ContextHolder.AuthPhase.FINALIZING) {    finalizeAuthProcess(response,holder);  }  LOG.message("Leaving OpenAMAuthHandler.handle();");  return;}  }
class C{  public Period withMonths(int months){  if (months == this.months) {    return this;  }  return create(years,months,days);}  }
class C{  public SMG11NModelImpl(HttpServletRequest req,Map map) throws AMConsoleException {  super(req,SERVICE_NAME,map);}  }
class C{  public JKTagWrapper(final Tag tag){  this.tag=tag;  this.localName=tag.getLocalName();  this.location=tag.getLocation();  this.namespace=tag.getNamespace();  this.qName=tag.getQName();  final TagAttributes attributes=tag.getAttributes();  final TagAttribute[] all=attributes.getAll();  this.attributesList=new ArrayList<>();  for (  final TagAttribute tagAttribute : all) {    this.attributesList.add(new JKTagAttributeWrapper(tagAttribute));  }}  }
class C{  private ChangeRecordEntry parseModifyDNChangeRecordEntry(DN entryDN,LinkedList<StringBuilder> lines) throws LDIFException {  DN newSuperiorDN=null;  RDN newRDN;  boolean deleteOldRDN;  if (lines.isEmpty()) {    LocalizableMessage message=ERR_LDIF_NO_MOD_DN_ATTRIBUTES.get();    throw new LDIFException(message,lineNumber,true);  }  StringBuilder line=lines.remove();  String rdnStr=getModifyDNAttributeValue(lines,line,entryDN,"newrdn");  try {    newRDN=RDN.valueOf(rdnStr);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDIF_INVALID_DN.get(lineNumber,line,getExceptionMessage(e));    throw new LDIFException(message,lineNumber,true);  }  if (lines.isEmpty()) {    LocalizableMessage message=ERR_LDIF_NO_DELETE_OLDRDN_ATTRIBUTE.get();    throw new LDIFException(message,lineNumber,true);  }  lineNumber++;  line=lines.remove();  String delStr=getModifyDNAttributeValue(lines,line,entryDN,"deleteoldrdn");  if (delStr.equalsIgnoreCase("false") || delStr.equalsIgnoreCase("no") || delStr.equalsIgnoreCase("0")) {    deleteOldRDN=false;  } else   if (delStr.equalsIgnoreCase("true") || delStr.equalsIgnoreCase("yes") || delStr.equalsIgnoreCase("1")) {    deleteOldRDN=true;  } else {    LocalizableMessage message=ERR_LDIF_INVALID_DELETE_OLDRDN_ATTRIBUTE.get(delStr);    throw new LDIFException(message,lineNumber,true);  }  if (!lines.isEmpty()) {    lineNumber++;    line=lines.remove();    String dnStr=getModifyDNAttributeValue(lines,line,entryDN,"newsuperior");    try {      newSuperiorDN=DN.valueOf(dnStr);    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_LDIF_INVALID_DN.get(lineNumber,line,getExceptionMessage(e));      throw new LDIFException(message,lineNumber,true);    }  }  return new ModifyDNChangeRecordEntry(entryDN,newRDN,deleteOldRDN,newSuperiorDN);}  }
class C{  private String generateCNonce(){  if (secureRandom == null) {    secureRandom=new SecureRandom();  }  byte[] cnonceBytes=new byte[16];  secureRandom.nextBytes(cnonceBytes);  return Base64.encode(cnonceBytes);}  }
class C{  public MemoryUsage(long init,long used,long committed,long max){  if (init < -1) {    throw new IllegalArgumentException("init parameter = " + init + " is negative but not -1.");  }  if (max < -1) {    throw new IllegalArgumentException("max parameter = " + max + " is negative but not -1.");  }  if (used < 0) {    throw new IllegalArgumentException("used parameter = " + used + " is negative.");  }  if (committed < 0) {    throw new IllegalArgumentException("committed parameter = " + committed + " is negative.");  }  if (used > committed) {    throw new IllegalArgumentException("used = " + used + " should be <= committed = "+ committed);  }  if (max >= 0 && committed > max) {    throw new IllegalArgumentException("committed = " + committed + " should be < max = "+ max);  }  this.init=init;  this.used=used;  this.committed=committed;  this.max=max;}  }
class C{  static int decodeInteger(ByteBuffer source,int n) throws HpackException {  if (source.remaining() == 0) {    return -1;  }  int count=1;  int sp=source.position();  int mask=PREFIX_TABLE[n];  int i=mask & source.get();  int b;  if (i < PREFIX_TABLE[n]) {    return i;  } else {    int m=0;    do {      if (count++ > MAX_INTEGER_OCTETS) {        throw new HpackException(sm.getString("hpack.integerEncodedOverTooManyOctets",Integer.valueOf(MAX_INTEGER_OCTETS)));      }      if (source.remaining() == 0) {        source.position(sp);        return -1;      }      b=source.get();      i=i + (b & 127) * (PREFIX_TABLE[m] + 1);      m+=7;    } while ((b & 128) == 128);  }  return i;}  }
class C{  public void test_getPeerPort() throws NoSuchAlgorithmException {  SSLEngine e=getEngine();  assertEquals("Incorrect default value of peer port",-1,e.getPeerPort());  e=getEngine("www.fortify.net",80);  assertEquals("Incorrect peer port",80,e.getPeerPort());}  }
class C{  public void initializeAlertHandlers() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addAlertHandlerAddListener(this);  rootConfiguration.addAlertHandlerDeleteListener(this);  for (  String name : rootConfiguration.listAlertHandlers()) {    AlertHandlerCfg configuration=rootConfiguration.getAlertHandler(name);    configuration.addChangeListener(this);    if (configuration.isEnabled()) {      String className=configuration.getJavaClass();      try {        AlertHandler<?> handler=loadHandler(className,configuration,true);        alertHandlers.put(configuration.dn(),handler);        DirectoryServer.registerAlertHandler(handler);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  private void offer(BlockingQueue<Task> queue,Task task) throws QueueTimeoutException {  try {    debug("Queuing Task {0}",task.toString());    if (!queue.offer(wrap(task),configuration.getQueueTimeout(),TimeUnit.SECONDS)) {      throw new QueueTimeoutException(task);    }  } catch (  InterruptedException e) {    throw new QueueTimeoutException(task,e);  }}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  mMap=googleMap;  LatLng sydney=new LatLng(-34,151);  mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));  mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));}  }
class C{  public boolean isSaved(){  return saved;}  }
class C{  public final void testIsStatePreserved2(){  RSAOtherPrimeInfo[] opi1=opi.clone();  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi1);  RSAOtherPrimeInfo[] ret=ks.getOtherPrimeInfo();  ret[2]=new RSAOtherPrimeInfo(BigInteger.ZERO,BigInteger.ZERO,BigInteger.ZERO);  assertTrue(checkOtherPrimeInfo(ks.getOtherPrimeInfo()));}  }
class C{  public AddOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawEntryDN,List<RawAttribute> rawAttributes){  super(clientConnection,operationID,messageID,requestControls);  this.rawEntryDN=rawEntryDN;  this.rawAttributes=rawAttributes;  entryDN=null;  userAttributes=null;  operationalAttributes=null;  objectClasses=null;}  }
class C{  public static void encode(String content,ErrorCorrectionLevel ecLevel,Map<EncodeHintType,Object> hints,QRCode qrCode) throws WriterException {  String encoding=hints == null ? null : (String)hints.get(EncodeHintType.CHARACTER_SET);  if (encoding == null) {    encoding=DEFAULT_BYTE_MODE_ENCODING;  }  int desiredMinVersion=(hints == null || hints.get(EncodeHintType.MIN_VERSION_NR) == null) ? 1 : (int)hints.get(EncodeHintType.MIN_VERSION_NR);  if (desiredMinVersion < 1)   desiredMinVersion=1;  if (desiredMinVersion > 40)   desiredMinVersion=40;  Mode mode=chooseMode(content,encoding);  BitVector dataBits=new BitVector();  appendBytes(content,mode,dataBits,encoding);  int numInputBytes=dataBits.sizeInBytes();  initQRCode(numInputBytes,ecLevel,desiredMinVersion,mode,qrCode);  BitVector headerAndDataBits=new BitVector();  if (mode == Mode.BYTE && !DEFAULT_BYTE_MODE_ENCODING.equals(encoding)) {    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding);    if (eci != null) {      appendECI(eci,headerAndDataBits);    }  }  appendModeInfo(mode,headerAndDataBits);  int numLetters=mode.equals(Mode.BYTE) ? dataBits.sizeInBytes() : content.length();  appendLengthInfo(numLetters,qrCode.getVersion(),mode,headerAndDataBits);  headerAndDataBits.appendBitVector(dataBits);  terminateBits(qrCode.getNumDataBytes(),headerAndDataBits);  BitVector finalBits=new BitVector();  interleaveWithECBytes(headerAndDataBits,qrCode.getNumTotalBytes(),qrCode.getNumDataBytes(),qrCode.getNumRSBlocks(),finalBits);  ByteMatrix matrix=new ByteMatrix(qrCode.getMatrixWidth(),qrCode.getMatrixWidth());  qrCode.setMaskPattern(chooseMaskPattern(finalBits,qrCode.getECLevel(),qrCode.getVersion(),matrix));  MatrixUtil.buildMatrix(finalBits,qrCode.getECLevel(),qrCode.getVersion(),qrCode.getMaskPattern(),matrix);  qrCode.setMatrix(matrix);  if (!qrCode.isValid()) {    throw new WriterException("Invalid QR code: " + qrCode.toString());  }}  }
class C{  public static void removeCurrentSessionPartner(String metaAlias,String remoteEntityId,Object ssoToken,String userID){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSLogoutUtil.removeCSP, hosted=" + metaAlias + ", remote="+ remoteEntityId+ ", userID="+ userID);  }  FSSessionManager sessionManager=FSSessionManager.getInstance(metaAlias);  FSSession session=sessionManager.getSession(ssoToken);  FSLogoutUtil.cleanSessionMapPartnerList(userID,remoteEntityId,metaAlias,session);}  }
class C{  public void testCase03_SeekChannelPerformance() throws Exception {  int stationGap=0;  int currentStation=FmRadioStation.getCurrentStation(mFmRadioActivity);  long startTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] seek previous channel start [" + startTime + "]");  clickView(mButtonPrevStation);  sleep(WAIT_UI_STATE_CHANGE);  int searchStation=FmRadioStation.getCurrentStation(mFmRadioActivity);  if (searchStation > currentStation) {    stationGap=searchStation - currentStation;    Log.i(TAG,"[Performance test][FmRadio] Test FmRadio seek time stationStep [" + (float)stationGap / CONVERT_RATE + "]");  } else   if (searchStation < currentStation) {    stationGap=FmRadioTestCaseUtil.HIGHEST_STATION - currentStation + searchStation - FmRadioTestCaseUtil.LOWEST_STATION;    Log.i(TAG,"[Performance test][FmRadio] Test FmRadio seek time stationStep [" + (float)stationGap / CONVERT_RATE + "]");  } else {    Log.e(TAG,"SearchStation Unchanged");  }  currentStation=FmRadioStation.getCurrentStation(mFmRadioActivity);  startTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] seek next channel start [" + startTime + "]");  clickView(mButtonNextStation);  sleep(WAIT_UI_STATE_CHANGE);  if (searchStation > currentStation) {    stationGap=searchStation - currentStation;    Log.i(TAG,"[Performance test][FmRadio] Test FmRadio seek time stationStep [" + (float)stationGap / CONVERT_RATE + "]");  } else   if (searchStation < currentStation) {    stationGap=FmRadioTestCaseUtil.HIGHEST_STATION - currentStation + searchStation - FmRadioTestCaseUtil.LOWEST_STATION;    Log.i(TAG,"[Performance test][FmRadio] Test FmRadio seek time stationStep [" + (float)stationGap / CONVERT_RATE + "]");  } else {    Log.e(TAG,"SearchStation Unchanged");  }}  }
class C{  protected void createLoadEntries(String[] template,int numEntries) throws Exception {  InternalClientConnection connection=InternalClientConnection.getRootConnection();  String makeLDIFPath=System.getProperty(TestCaseUtils.PROPERTY_BUILD_ROOT) + File.separator + "resource"+ File.separator+ "MakeLDIF";  TemplateFile templateFile=new TemplateFile(makeLDIFPath,new Random());  ArrayList<LocalizableMessage> warnings=new ArrayList<>();  templateFile.parse(template,warnings);  MakeLDIFInputStream ldifEntryStream=new MakeLDIFInputStream(templateFile);  LDIFReader reader=new LDIFReader(new LDIFImportConfig(ldifEntryStream));  for (int i=0; i < numEntries; i++) {    Entry entry=reader.readEntry(false);    entryTreeMap.put(entry.getName(),entry);    AddOperation addOperation=connection.processAdd(entry);    assertEquals(addOperation.getResultCode(),ResultCode.SUCCESS,"Add of this entry was not successful");  }  reader.close();  this.numEntries=numEntries;}  }
class C{  public int find(char[] key,int start){  int d;  char p=root;  int i=start;  char c;  while (p != 0) {    if (sc[p] == 0xFFFF) {      if (strcmp(key,i,kv.getArray(),lo[p]) == 0) {        return eq[p];      } else {        return -1;      }    }    c=key[i];    d=c - sc[p];    if (d == 0) {      if (c == 0) {        return eq[p];      }      i++;      p=eq[p];    } else     if (d < 0) {      p=lo[p];    } else {      p=hi[p];    }  }  return -1;}  }
class C{  public void reportError(LocalizableMessage error,boolean isAcceptable,ResultCode resultCode,boolean isAdminActionRequired){switch (_configPhase) {case PHASE_INIT:{      logger.error(error);      break;    }case PHASE_ACCEPTABLE:{    _unacceptableReasons.add(error);    _isAcceptable=isAcceptable;    break;  }case PHASE_APPLY:{  _errorMessages.add(error);  _isAcceptable=isAcceptable;  if (_resultCode == ResultCode.SUCCESS) {    _resultCode=resultCode;  }  _isAdminActionRequired=isAdminActionRequired;  break;}}}  }
class C{  @Override public int read() throws IOException {  int res=in.read();  if (res < 0) {    throw new EndOfSourceException();  }  return res;}  }
class C{  public final void test_write$BII_4() throws NoSuchAlgorithmException, IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.on(false);      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        dos.write(myMessage,i * CHUNK_SIZE,CHUNK_SIZE);      }      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public long nextLong(){  return nextLong(defaultRadix);}  }
class C{  public ServerController(Application application){  this(application,application.getInstallation());}  }
class C{  public String put(String url,String json,final int expectedStatusCode){  return put(url,json,Collections.<String,String>emptyMap(),expectedStatusCode);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  private void populateComponentMaps(){  HashMap<FieldName,LabelFieldDescriptor> hm=new HashMap<>();  hm.put(FieldName.REPLICATION_PORT,new LabelFieldDescriptor(INFO_REPLICATION_PORT_LABEL.get(),INFO_REPLICATION_PORT_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.SECONDARY,UIFactory.PORT_FIELD_SIZE));  hm.put(FieldName.REMOTE_SERVER_DN,new LabelFieldDescriptor(INFO_REMOTE_SERVER_DN_LABEL.get(),INFO_REMOTE_SERVER_DN_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.SECONDARY,UIFactory.DN_FIELD_SIZE));  hm.put(FieldName.REMOTE_SERVER_PWD,new LabelFieldDescriptor(INFO_REMOTE_SERVER_PWD_LABEL.get(),INFO_REMOTE_SERVER_PWD_TOOLTIP.get(),LabelFieldDescriptor.FieldType.PASSWORD,LabelFieldDescriptor.LabelType.SECONDARY,UIFactory.PASSWORD_FIELD_SIZE));  hm.put(FieldName.REMOTE_SERVER_HOST,new LabelFieldDescriptor(INFO_REMOTE_SERVER_HOST_LABEL.get(),INFO_REMOTE_SERVER_HOST_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.SECONDARY,UIFactory.HOST_FIELD_SIZE));  hm.put(FieldName.REMOTE_SERVER_PORT,new LabelFieldDescriptor(INFO_REMOTE_SERVER_PORT_LABEL.get(),INFO_REMOTE_SERVER_PORT_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.SECONDARY,UIFactory.PORT_FIELD_SIZE));  for (  FieldName fieldName : hm.keySet()) {    LabelFieldDescriptor desc=hm.get(fieldName);    String defaultValue=getDefaultStringValue(fieldName);    JTextComponent field=UIFactory.makeJTextComponent(desc,defaultValue);    hmFields.put(fieldName,field);    JLabel l=UIFactory.makeJLabel(desc);    l.setLabelFor(field);    hmLabels.put(fieldName,l);  }  ButtonGroup buttonGroup=new ButtonGroup();  rbStandalone=UIFactory.makeJRadioButton(INFO_STANDALONE_SERVER_LABEL.get(),INFO_STANDALONE_SERVER_TOOLTIP.get(),UIFactory.TextStyle.SECONDARY_FIELD_VALID);  rbStandalone.setOpaque(false);  rbReplicated=UIFactory.makeJRadioButton(INFO_REPLICATED_SERVER_LABEL.get(),INFO_REPLICATED_SERVER_TOOLTIP.get(),UIFactory.TextStyle.SECONDARY_FIELD_VALID);  rbReplicated.setOpaque(false);  buttonGroup.add(rbStandalone);  buttonGroup.add(rbReplicated);  DataReplicationOptions.Type type=defaultUserData.getReplicationOptions().getType();  cbTopologyExists=UIFactory.makeJCheckBox(INFO_TOPOLOGY_EXISTS_LABEL.get(),INFO_TOPOLOGY_EXISTS_TOOLTIP.get(),UIFactory.TextStyle.SECONDARY_FIELD_VALID);  cbTopologyExists.setOpaque(false);  rbStandalone.setSelected(type == DataReplicationOptions.Type.STANDALONE);  rbReplicated.setSelected(type != DataReplicationOptions.Type.STANDALONE);  cbSecureReplication=UIFactory.makeJCheckBox(INFO_SECURE_REPLICATION_LABEL.get(),INFO_SECURE_REPLICATION_TOOLTIP.get(),UIFactory.TextStyle.SECONDARY_FIELD_VALID);  cbSecureReplication.setSelected(defaultUserData.getReplicationOptions().useSecureReplication());  cbTopologyExists.setSelected(type == DataReplicationOptions.Type.IN_EXISTING_TOPOLOGY);  checkEnablingState();}  }
class C{  public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  if (eSubject == null) {    return new SubjectDecision(false,Collections.EMPTY_MAP);  }  SubjectDecision d=eSubject.evaluate(realm,mgr,subject,resourceName,environment);  return new SubjectDecision(!d.isSatisfied(),Collections.EMPTY_MAP);}  }
class C{  public boolean onFocus(boolean focus){  if (!Utils.isSet(flags,StandOutFlags.FLAG_WINDOW_FOCUSABLE_DISABLE)) {    if (focus == focused) {      return false;    }    focused=focus;    if (mContext.onFocusChange(id,this,focus)) {      Log.d(TAG,"Window " + id + " focus change "+ (focus ? "(true)" : "(false)")+ " cancelled by implementation.");      focused=!focus;      return false;    }    if (!Utils.isSet(flags,StandOutFlags.FLAG_WINDOW_FOCUS_INDICATOR_DISABLE)) {      View content=findViewById(R.id.content);      if (focus) {        content.setBackgroundResource(android.R.color.holo_green_dark);      } else {        if (Utils.isSet(flags,StandOutFlags.FLAG_DECORATION_SYSTEM)) {          content.setBackgroundResource(android.R.color.holo_green_dark);        } else {          content.setBackgroundResource(0);        }      }    }    StandOutLayoutParams params=getLayoutParams();    params.setFocusFlag(focus);    mContext.updateViewLayout(id,params);    if (focus) {      mContext.setFocusedWindow(this);    } else {      if (mContext.getFocusedWindow() == this) {        mContext.setFocusedWindow(null);      }    }    return true;  }  return false;}  }
class C{  public NodeSorter(XPathContext p){  m_execContext=p;}  }
class C{  public Set readAllFederatedProviderID(String userID) throws FSAccountMgmtException {  if (SP_PROVIDER_ID != null && SP_PROVIDER_ID.length() != 0) {    return readAllFederatedProviderID(SP_PROVIDER_ID,userID);  } else {    return readAllFederatedProviderID(null,userID);  }}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Comparable<? super T>>void sort(List<T> list){  Object[] array=list.toArray();  Arrays.sort(array);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set((T)array[i++]);  }}  }
class C{  public List(int rows) throws HeadlessException {  this(rows,false);}  }
class C{  public void testToEngineeringStringZeroNegExponent(){  String a="0.0E-16";  BigDecimal aNumber=new BigDecimal(a);  String result="0.00E-15";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  protected ViewListener createViewListener(){  return new ViewListener();}  }
class C{  static @ForceInline void checkExactType(Object mhObj,Object expectedObj){  MethodHandle mh=(MethodHandle)mhObj;  MethodType expected=(MethodType)expectedObj;  MethodType actual=mh.type();  if (actual != expected)   throw newWrongMethodTypeException(expected,actual);}  }
class C{  public void testConstrDoubleNaN(){  double a=Double.NaN;  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  public void processLECPAuthnRequest(FSAuthnRequest authnRequest){  processAuthnRequest(authnRequest,false);  return;}  }
class C{  public void initNodeTest(int whatToShow){  m_whatToShow=whatToShow;  calcScore();}  }
class C{  public PlaPointFloat screen_to_board(Point2D p_point){  double x, y;  if (mirror_left_right) {    x=design_box_with_offset.width() - (p_point.getX() - display_x_offset) / scale_factor - 1;  } else {    x=(p_point.getX() + display_x_offset) / scale_factor;  }  if (mirror_top_bottom) {    y=design_box_with_offset.height() - (p_point.getY() - display_y_offset) / scale_factor - 1;  } else {    y=(p_point.getY() + display_y_offset) / scale_factor;  }  PlaPointFloat result=new PlaPointFloat(x,y);  return result.rotate_rad(-rotation_radiants,rotation_pole);}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public boolean isType(){  return testAllFlags(IS_TYPE);}  }
class C{  public static boolean verifyDestination(String destination,String location){  return ((location != null) && (location.length() != 0) && (destination != null)&& (destination.length() != 0)&& (location.equalsIgnoreCase(destination)));}  }
class C{  private static void checkForEmptyString(String[] arg,String argName){  for (int i=0; i < arg.length; i++) {    if (arg[i].trim().equals("")) {      throw new IllegalArgumentException("Argument's element " + argName + "["+ i+ "] cannot be an empty string.");    }  }}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<>(list);}  }
class C{  public void testCase20(){  byte aBytes[]={0};  byte bBytes[]={0};  byte rBytes[]={0};  int aSign=0;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  private void addDITContentRule(String definition,Schema currentSchema,SchemaBuilder schemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  String oid=SchemaUtils.parseDITContentRuleOID(definition);  final String finalDefinition;  if (!currentSchema.hasDITContentRule(oid)) {    finalDefinition=completeDefinitionWhenAddingSchemaElement(definition,modifiedSchemaFiles);  } else {    DITContentRule existingRule=currentSchema.getDITContentRule(oid);    finalDefinition=completeDefinitionWhenReplacingSchemaElement(definition,existingRule,modifiedSchemaFiles);  }  schemaBuilder.addDITContentRule(finalDefinition,true);}  }
class C{  @Override protected boolean syncUIControlState(){  boolean disableControls=super.syncUIControlState();  if (getBroadcast() != null) {    mMP4Controls.setVisibility(getBroadcast().getStatus().isRunning() ? View.INVISIBLE : View.VISIBLE);    mSwitchMP4.setEnabled(!disableControls);  }  return disableControls;}  }
class C{  public Object[] toArray(){  fullyLock();  try {    int size=count.get();    Object[] a=new Object[size];    int k=0;    for (Node<E> p=head.next; p != null; p=p.next)     a[k++]=p.item;    return a;  }  finally {    fullyUnlock();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssRelV10Token11Element createWssRelV10Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssRelV10Token11ElementImpl();}  }
class C{  protected int drawUnselectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(unselected);  Document doc=getDocument();  Segment s=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,s);  int ret=Utilities.drawTabbedText(this,s,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(s);  return ret;}  }
class C{  public void testCallingProceedingCompletedTerminatedScenario(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(invite);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The invite request was not received by the RI!");    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent);    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent.getRequest());    assertEquals(Request.INVITE,inviteReceivedEvent.getRequest().getMethod());    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      Response resp=riMessageFactory.createResponse(Response.TRYING,inviteReceivedEvent.getRequest());      addStatus(inviteReceivedEvent.getRequest(),resp);      riSipProvider.sendResponse(resp);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a trying response back to the TI",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent.getResponse());    assertTrue("A response different from TYING was passed to the TU!",responseEvent.getResponse().getStatusCode() == Response.TRYING);    assertSame("The TRYING response was not associated with the right transaction.",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the PROCEEDING state after " + "receiving 1xx provisional response",tran.getState(),TransactionState.PROCEEDING);    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    SipEventCollector ackCollector=new SipEventCollector();    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    Response busyHere=null;    try {      busyHere=riMessageFactory.createResponse(Response.BUSY_HERE,inviteReceivedEvent.getRequest());      addStatus(inviteReceivedEvent.getRequest(),busyHere);      ((ToHeader)busyHere.getHeader("to")).setTag("busy-here");      riSipProvider.sendResponse(busyHere);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a BUSY HERE response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 300-699 response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 300-699 response to the TU!",responseEvent.getResponse());    assertSame("The BUSY_HERE response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertEquals("A response different from BUSY_HERE was passed to the TU",Response.BUSY_HERE,responseEvent.getResponse().getStatusCode());    assertEquals("The ClientTransaction did not pass in the COMPLETED state after " + "receiving 300-699 final response",tran.getState(),TransactionState.COMPLETED);    RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNotNull("The TI did not send an ACK request",ackReceivedEvent);    assertNotNull("The TI did not send an ACK request",ackReceivedEvent.getRequest());    assertEquals(Request.ACK,ackReceivedEvent.getRequest().getMethod());    waitForMessage();    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    try {      riSipProvider.sendResponse((Response)busyHere.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a BUSY HERE response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNull("The Tested Implementation passed a retransmitted 300-699 response " + "to the TU instead of just silently acknowledging it!",responseEvent);    assertEquals("The ClientTransaction did not stay long enough in the COMPLETED " + "state.",tran.getState(),TransactionState.COMPLETED);    ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNotNull("The TI did not send an ACK request to the second response",ackReceivedEvent);    assertNotNull("The TI did not send an ACK request to the second response",ackReceivedEvent.getRequest());    assertEquals(Request.ACK,ackReceivedEvent.getRequest().getMethod());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public IllegalFormatFlagsException(String f){  if (f == null)   throw new NullPointerException();  this.flags=f;}  }
class C{  public static void createSchemaFromLDIF(String file,Connection ld) throws IOException {  try (InputStream fileInput=new FileInputStream(file)){    createSchemaFromLDIF(fileInput,ld);  } }  }
class C{  DropTargetContext(DropTarget dt){  super();  dropTarget=dt;}  }
class C{  @Override public void sendAck(){}  }
class C{  private void addLenient(String fieldName,String value){  namesAndValues.add(fieldName);  namesAndValues.add(value.trim());}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public boolean isExpanded(TreePath path){  if (path != null) {    TreeStateNode lastNode=getNodeForPath(path,true,false);    return (lastNode != null && lastNode.isExpanded());  }  return false;}  }
class C{  public boolean isForReporting(Query query){  if (executionTimeForLogging(query.executionTimeInMilliseconds()) && tableForLogging(query) && typeForLogging(query)) {    return true;  }  return false;}  }
class C{  public SQLDataException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void preSingleLogoutProcess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,LogoutRequest logoutRequest,LogoutResponse logoutResponse,String binding) throws SAML2Exception {  return;}  }
class C{  private AccountUsabilityResponseControl(final boolean isCritical,final boolean isUsable,final boolean isInactive,final boolean isReset,final boolean isExpired,final int remainingGraceLogins,final boolean isLocked,final int secondsBeforeUnlock,final int secondsBeforeExpiration){  this.isCritical=isCritical;  this.isUsable=isUsable;  this.isInactive=isInactive;  this.isReset=isReset;  this.isExpired=isExpired;  this.remainingGraceLogins=remainingGraceLogins;  this.isLocked=isLocked;  this.secondsBeforeUnlock=secondsBeforeUnlock;  this.secondsBeforeExpiration=secondsBeforeExpiration;}  }
class C{  public final void warn(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,null);  }}  }
class C{  public static AlertDialog create(Context context,int resId){  return create(context,context.getResources().getString(resId));}  }
class C{  public Observable<DriveFile> updateFileContent(final DriveFile driveFile,Uri uri){  try {    return updateFileContent(driveFile,getContentResolver().openInputStream(uri));  } catch (  FileNotFoundException e) {    return Observable.error(e);  }}  }
class C{  public Attribute(String name,String nameSpace,List values) throws SAMLException {  super(name,nameSpace);  if (values == null || values.isEmpty()) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Attribute: AttributeValue is" + "required.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (_attributeValue == null) {    _attributeValue=new ArrayList();  }  Iterator iter=values.iterator();  String tag=null;  while (iter.hasNext()) {    tag=((Element)iter.next()).getLocalName();    if ((tag == null) || (!tag.equals("AttributeValue"))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("AttributeValue: wrong input.");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));    }  }  _attributeValue=values;}  }
class C{  public void error(SAXParseException e) throws SAXException {  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).error(e);    if (null != m_errorHandler)     m_errorHandler.error(e);  } else {    try {      errorListener.error(new javax.xml.transform.TransformerException(e));      if (null != m_errorHandler)       m_errorHandler.error(e);    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  private void put(CoreTokenField field,Object value){  if (CoreTokenFieldTypes.isMulti(field)) {    putMulti(field,(Set)value);  } else {    String s;    if (value == null) {      s=null;    } else     if (CoreTokenField.TOKEN_TYPE.equals(field)) {      s=((TokenType)value).name();    } else     if (CoreTokenFieldTypes.isCalendar(field)) {      s=GeneralizedTime.valueOf((Calendar)value).toString();    } else     if (CoreTokenFieldTypes.isByteArray(field)) {      s=Base64.encode((byte[])value);    } else     if (CoreTokenFieldTypes.isInteger(field)) {      s=Integer.toString((Integer)value);    } else {      s=value.toString();    }    attributes.put(field.toString(),s);  }}  }
class C{  public void paintArrowButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static Date parseDate(String dateValue) throws DateParseException {  return parseDate(dateValue,null,null);}  }
class C{  public static boolean isTimeConflict(Time timeFrom,Time timeTo,Time otherTimeFrom,Time otherTimeTo){  if (JKDateTimeUtil.isTimesEqaualed(timeFrom,otherTimeFrom) || JKDateTimeUtil.isTimesEqaualed(timeTo,otherTimeTo)) {    return true;  }  if (timeFrom.after(otherTimeFrom) && timeFrom.before(otherTimeTo)) {    return true;  }  if (timeTo.after(otherTimeFrom) && timeTo.before(otherTimeTo)) {    return true;  }  if (timeFrom.before(otherTimeFrom) && timeTo.after(otherTimeTo)) {    return true;  }  return false;}  }
class C{  protected final void outputLineSep() throws IOException {  m_writer.write(m_lineSep,0,m_lineSepLen);}  }
class C{  private Object invokeOperationInternal(String onameStr,String operation,String[] parameters) throws OperationsException, MBeanException, ReflectionException {  ObjectName oname=new ObjectName(onameStr);  MBeanOperationInfo methodInfo=registry.getMethodInfo(oname,operation);  MBeanParameterInfo[] signature=methodInfo.getSignature();  String[] signatureTypes=new String[signature.length];  Object[] values=new Object[signature.length];  for (int i=0; i < signature.length; i++) {    MBeanParameterInfo pi=signature[i];    signatureTypes[i]=pi.getType();    values[i]=registry.convertValue(pi.getType(),parameters[i]);  }  return mBeanServer.invoke(oname,operation,values,signatureTypes);}  }
class C{  public Builder removeName(final String name){  names.remove(name);  return this;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void addServiceRoutes(ServiceRouter rootRouter,ServiceRouter realmRouter){}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (null == elem) {    error(XSLTErrorResources.ER_NULL_CHILD,null);  }  if (null == m_firstChild) {    m_firstChild=elem;  } else {    ElemTemplateElement last=getLastChildElem();    last.m_nextSibling=elem;  }  elem.setParentElem(this);  return elem;}  }
class C{  @Override public String toString(){  Color src=UIManager.getColor(uiDefaultParentName);  String s="DerivedColor(color=" + getRed() + ","+ getGreen()+ ","+ getBlue()+ " parent="+ uiDefaultParentName+ " offsets="+ getHueOffset()+ ","+ getSaturationOffset()+ ","+ getBrightnessOffset()+ ","+ getAlphaOffset();  return src == null ? s : s + " pColor=" + src.getRed()+ ","+ src.getGreen()+ ","+ src.getBlue();}  }
class C{  public static boolean haveAccess(int modifiers,Class<?> target,Class<?> caller){  if (Modifier.isPrivate(modifiers)) {    if (!caller.equals(target))     return false;  } else   if (Modifier.isProtected(modifiers)) {    if (!getPackage(target).equals(getPackage(caller)) && !target.isAssignableFrom(caller))     return false;  } else   if (!Modifier.isPublic(modifiers)) {    if (!getPackage(target).equals(getPackage(caller)))     return false;  }  return true;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_WHEN:case Constants.ELEMNAME_OTHERWISE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public static boolean acquireSharedLock(String lockFile,StringBuilder failureReason){synchronized (mapLock) {    if (exclusiveLocks.containsKey(lockFile)) {      failureReason.append(ERR_FILELOCKER_LOCK_SHARED_REJECTED_BY_EXCLUSIVE.get(lockFile));      return false;    }    FileLock sharedLock=sharedLocks.get(lockFile);    if (sharedLock != null) {      int numReferences=sharedLockReferences.get(lockFile);      numReferences++;      sharedLockReferences.put(lockFile,numReferences);      return true;    }    File f=getFileForPath(lockFile);    try {      if (!f.exists()) {        f.createNewFile();      }    } catch (    Exception e) {      logger.traceException(e);      failureReason.append(ERR_FILELOCKER_LOCK_SHARED_FAILED_CREATE.get(lockFile,getExceptionMessage(e)));      return false;    }    FileChannel channel=null;    RandomAccessFile raf=null;    try {      raf=new RandomAccessFile(lockFile,"r");      channel=raf.getChannel();    } catch (    Exception e) {      logger.traceException(e);      failureReason.append(ERR_FILELOCKER_LOCK_SHARED_FAILED_OPEN.get(lockFile,getExceptionMessage(e)));      close(raf);      return false;    }    FileLock fileLock;    try {      fileLock=channel.tryLock(0L,Long.MAX_VALUE,true);    } catch (    Exception e) {      logger.traceException(e);      failureReason.append(ERR_FILELOCKER_LOCK_SHARED_FAILED_LOCK.get(lockFile,getExceptionMessage(e)));      close(channel,raf);      return false;    }    if (fileLock == null) {      failureReason.append(ERR_FILELOCKER_LOCK_SHARED_NOT_GRANTED.get(lockFile));      close(channel,raf);      return false;    } else {      sharedLocks.put(lockFile,fileLock);      sharedLockReferences.put(lockFile,1);      return true;    }  }}  }
class C{  public static void centerOnScreen(Component comp){  Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  int width=comp.getPreferredSize().width;  int height=comp.getPreferredSize().height;  boolean multipleScreen=screenSize.width / screenSize.height >= 2;  if (multipleScreen) {    comp.setLocation(screenSize.width / 4 - width / 2,(screenSize.height - height) / 2);  } else {    comp.setLocation((screenSize.width - width) / 2,(screenSize.height - height) / 2);  }}  }
class C{  public static String toGreekAlphabetNumberUpperCase(int number){  return AlphabetNumbering.toAlphabetNumber(number,ALPHABET_UPPERCASE);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  modifyProperties();  forwardTo();}  }
class C{  public int read(byte b[]) throws java.io.IOException {  return read(b,0,b.length);}  }
class C{  @Override public void sendError(int status) throws IOException {  sendError(status,null);}  }
class C{  static Promise<Integer> blockingPromiseInt(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  private void contextualShape(char[] text,int start,int count,int contextIndex){  char maxDigit=(char)0x0039;  char minDigit=(char)0x0030;  int currIndex;  if (((1 << contextIndex) & fRanges) == 0) {    currIndex=INDEX_EUROPEAN;  } else {    currIndex=contextIndex;  }  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      if (currIndex != INDEX_ETHIOPIC || text[ind] != '0') {        text[ind]=(char)(digitsLowRanges[currIndex] + text[ind]);      }    } else {      if (isCharStrong(text[ind])) {        int index=getCharIndex(text[ind]);        if (currIndex != index) {          if (((1 << index) & fRanges) != 0) {            currIndex=index;          } else {            currIndex=INDEX_EUROPEAN;          }        }      }    }  }}  }
class C{  protected Transferable createTransferable(JComponent c){  if (c instanceof JList) {    JList list=(JList)c;    Object[] values=list.getSelectedValues();    if (values == null || values.length == 0) {      return null;    }    StringBuffer plainBuf=new StringBuffer();    StringBuffer htmlBuf=new StringBuffer();    htmlBuf.append("<html>\n<body>\n<ul>\n");    for (int i=0; i < values.length; i++) {      Object obj=values[i];      String val=((obj == null) ? "" : obj.toString());      plainBuf.append(val + "\n");      htmlBuf.append("  <li>" + val + "\n");    }    plainBuf.deleteCharAt(plainBuf.length() - 1);    htmlBuf.append("</ul>\n</body>\n</html>");    return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());  }  return null;}  }
class C{  public boolean warningEnabled(){  return debug.warningEnabled();}  }
class C{  public static CallSite metafactory(MethodHandles.Lookup caller,String invokedName,MethodType invokedType,MethodType samMethodType,MethodHandle implMethod,MethodType instantiatedMethodType){  throw new UnsupportedOperationException();}  }
class C{  public Object encode(Object object) throws EncoderException {  try {    byte[] byteArray=object instanceof String ? ((String)object).getBytes() : (byte[])object;    return encodeHex(byteArray);  } catch (  ClassCastException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.SPSSOConfigElement createSPSSOConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.SPSSOConfigElementImpl();}  }
class C{  public Set searchGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,level);}  }
class C{  public JKTagDecorator(){}  }
class C{  public String toString(){  return getClass().getName() + "[dropPoint=" + getDropPoint()+ ","+ "index="+ index+ ","+ "insert="+ isInsert+ "]";}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  public static String hexStringToBase64(String hexString){  int read=hexString.length();  byte[] byteArray=new byte[read / 2];  for (int i=0, j=0; i < read; i++, j++) {    String part=hexString.substring(i,i + 2);    byteArray[j]=new Short(Integer.toString(Integer.parseInt(part,16))).byteValue();    i++;  }  String encodedID=null;  try {    encodedID=Base64.encode(byteArray).trim();  } catch (  Exception e) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLUtil:hexStringToBase64: " + "exception encode input:",e);    }  }  if (SAMLUtils.debug.messageEnabled()) {    SAMLUtils.debug.message("base 64 source id is :" + encodedID);  }  return encodedID;}  }
class C{  public void flush(){  rootRenderer.flush();}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  public InvocationEvent(Object source,Runnable runnable,Runnable listener,boolean catchThrowables){  this(source,INVOCATION_DEFAULT,runnable,null,listener,catchThrowables);}  }
class C{  public static boolean isEncoded(ByteSequence value){  try {    decodeAuthPassword(value.toString());    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public RESTEndpointBuilder realm(String s){  realm=s;  return this;}  }
class C{  protected Type(String name){  this.name=name;}  }
class C{  protected Member findSessionMasterMember(){  Member mbr=null;  Member mbrs[]=cluster.getMembers();  if (mbrs.length != 0)   mbr=mbrs[0];  if (mbr == null && log.isWarnEnabled()) {    log.warn(sm.getString("deltaManager.noMasterMember",getName(),""));  }  if (mbr != null && log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.foundMasterMember",getName(),mbr));  }  return mbr;}  }
class C{  public int makeLDIFMain(String[] args,boolean initializeServer,boolean initializeSchema,OutputStream outStream,OutputStream errStream){  out=NullOutputStream.wrapOrNullStream(outStream);  err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  LocalizableMessage toolDescription=INFO_MAKELDIF_TOOL_DESCRIPTION.get();  ArgumentParser argParser=new ArgumentParser(CLASS_NAME,toolDescription,false);  argParser.setShortToolDescription(REF_SHORT_DESC_MAKELDIF.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  BooleanArgument showUsage;  IntegerArgument randomSeed;  StringArgument configFile;  StringArgument templatePath;  StringArgument ldifFile;  StringArgument resourcePath;  try {    configFile=StringArgument.builder("configFile").shortIdentifier('c').description(INFO_DESCRIPTION_CONFIG_FILE.get()).hidden().required().valuePlaceholder(INFO_CONFIGFILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    resourcePath=StringArgument.builder("resourcePath").shortIdentifier('r').description(INFO_MAKELDIF_DESCRIPTION_RESOURCE_PATH.get()).hidden().required().valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);    templatePath=StringArgument.builder("templateFile").shortIdentifier('t').description(INFO_MAKELDIF_DESCRIPTION_TEMPLATE.get()).required().valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    ldifFile=StringArgument.builder("ldifFile").shortIdentifier('o').description(INFO_MAKELDIF_DESCRIPTION_LDIF.get()).required().valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildAndAddToParser(argParser);    randomSeed=IntegerArgument.builder(OPTION_LONG_RANDOM_SEED).shortIdentifier(OPTION_SHORT_RANDOM_SEED).description(INFO_MAKELDIF_DESCRIPTION_SEED.get()).defaultValue(0).valuePlaceholder(INFO_SEED_PLACEHOLDER.get()).buildAndAddToParser(argParser);    showUsage=showUsageArgument();    argParser.addArgument(showUsage);    argParser.setUsageArgument(showUsage);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return 1;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return 1;  }  if (argParser.usageOrVersionDisplayed()) {    return 0;  }  try {    BuildVersion.checkVersionMismatch();  } catch (  InitializationException e) {    printWrappedText(err,e.getMessage());    return 1;  }  if (initializeServer) {    DirectoryServer directoryServer=DirectoryServer.getInstance();    DirectoryServer.bootstrapClient();    try {      DirectoryServer.initializeJMX();    } catch (    Exception e) {      printWrappedText(err,ERR_MAKELDIF_CANNOT_INITIALIZE_JMX.get(configFile.getValue(),e.getMessage()));      return 1;    }    try {      directoryServer.initializeConfiguration(configFile.getValue());    } catch (    Exception e) {      printWrappedText(err,ERR_MAKELDIF_CANNOT_INITIALIZE_CONFIG.get(configFile.getValue(),e.getMessage()));      return 1;    }  }  if (initializeSchema) {    try {      DirectoryServer.getInstance().initializeSchema();    } catch (    Exception e) {      printWrappedText(err,ERR_MAKELDIF_CANNOT_INITIALIZE_SCHEMA.get(configFile.getValue(),e.getMessage()));      return 1;    }  }  Random random;  if (randomSeed.isPresent()) {    try {      random=new Random(randomSeed.getIntValue());    } catch (    Exception e) {      random=new Random();    }  } else {    random=new Random();  }  File resourceDir=new File(resourcePath.getValue());  if (!resourceDir.exists()) {    printWrappedText(err,ERR_MAKELDIF_NO_SUCH_RESOURCE_DIRECTORY.get(resourcePath.getValue()));    return 1;  }  LinkedList<LocalizableMessage> warnings=new LinkedList<>();  TemplateFile templateFile=new TemplateFile(resourcePath.getValue(),random);  try {    templateFile.parse(templatePath.getValue(),warnings);  } catch (  IOException ioe) {    printWrappedText(err,ERR_MAKELDIF_IOEXCEPTION_DURING_PARSE.get(ioe.getMessage()));    return 1;  }catch (  Exception e) {    printWrappedText(err,ERR_MAKELDIF_EXCEPTION_DURING_PARSE.get(e.getMessage()));    return 1;  }  if (!warnings.isEmpty()) {    for (    LocalizableMessage s : warnings) {      printWrappedText(err,s);    }  }  LDIFExportConfig exportConfig=new LDIFExportConfig(ldifFile.getValue(),ExistingFileBehavior.OVERWRITE);  try {    ldifWriter=new LDIFWriter(exportConfig);  } catch (  IOException ioe) {    printWrappedText(err,ERR_MAKELDIF_UNABLE_TO_CREATE_LDIF.get(ldifFile.getValue(),ioe));    return 1;  }  try {    templateFile.generateLDIF(this);  } catch (  Exception e) {    printWrappedText(err,ERR_MAKELDIF_ERROR_WRITING_LDIF.get(ldifFile.getValue(),stackTraceToSingleLineString(e)));    return 1;  } finally {    close(ldifWriter);  }  return 0;}  }
class C{  public TransportAlreadySupportedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public ProgressTask(){  previousTime=System.currentTimeMillis();}  }
class C{  @Inject public CtsPersistenceOperationsMonitor(CtsPersistenceOperationsDelegate delegate){  this.delegate=delegate;}  }
class C{  public static int firstIndexOf(byte[] src,int srcOff,byte[] find){  int result=-1;  if (find.length > src.length)   return result;  if (find.length == 0 || src.length == 0)   return result;  if (srcOff >= src.length)   throw new java.lang.ArrayIndexOutOfBoundsException();  boolean found=false;  int srclen=src.length;  int findlen=find.length;  byte first=find[0];  int pos=srcOff;  while (!found) {    while (pos < srclen) {      if (first == src[pos])       break;      pos++;    }    if (pos >= srclen)     return -1;    if ((srclen - pos) < findlen)     return -1;    found=true;    for (int i=1; ((i < findlen) && found); i++) {      found=(find[i] == src[pos + i]);    }    if (found) {      result=pos;    } else     if ((srclen - pos) < findlen) {      return -1;    } else {      pos++;    }  }  return result;}  }
class C{  public ContextName(String name,boolean stripFileExtension){  String tmp1=name;  if (tmp1.startsWith("/")) {    tmp1=tmp1.substring(1);  }  tmp1=tmp1.replaceAll("/",FWD_SLASH_REPLACEMENT);  if (tmp1.startsWith(VERSION_MARKER) || "".equals(tmp1)) {    tmp1=ROOT_NAME + tmp1;  }  if (stripFileExtension && (tmp1.toLowerCase(Locale.ENGLISH).endsWith(".war") || tmp1.toLowerCase(Locale.ENGLISH).endsWith(".xml"))) {    tmp1=tmp1.substring(0,tmp1.length() - 4);  }  baseName=tmp1;  String tmp2;  int versionIndex=baseName.indexOf(VERSION_MARKER);  if (versionIndex > -1) {    version=baseName.substring(versionIndex + 2);    tmp2=baseName.substring(0,versionIndex);  } else {    version="";    tmp2=baseName;  }  if (ROOT_NAME.equals(tmp2)) {    path="";  } else {    path="/" + tmp2.replaceAll(FWD_SLASH_REPLACEMENT,"/");  }  if (versionIndex > -1) {    this.name=path + VERSION_MARKER + version;  } else {    this.name=path;  }}  }
class C{  private void highLightMarker(Marker marker){  marker.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));  this.selectedMarker=marker;}  }
class C{  private void parseHost(MessageBytes valueMB){  if (valueMB == null || valueMB.isNull()) {    request.setServerPort(endpoint.getPort());    return;  }  ByteChunk valueBC=valueMB.getByteChunk();  byte[] valueB=valueBC.getBytes();  int valueL=valueBC.getLength();  int valueS=valueBC.getStart();  int colonPos=-1;  if (hostNameC.length < valueL) {    hostNameC=new char[valueL];  }  boolean ipv6=(valueB[valueS] == '[');  boolean bracketClosed=false;  for (int i=0; i < valueL; i++) {    char b=(char)valueB[i + valueS];    hostNameC[i]=b;    if (b == ']') {      bracketClosed=true;    } else     if (b == ':') {      if (!ipv6 || bracketClosed) {        colonPos=i;        break;      }    }  }  if (colonPos < 0) {    request.serverName().setChars(hostNameC,0,valueL);  } else {    request.serverName().setChars(hostNameC,0,colonPos);    int port=0;    int mult=1;    for (int i=valueL - 1; i > colonPos; i--) {      int charValue=HexUtils.getDec(valueB[i + valueS]);      if (charValue == -1 || charValue > 9) {        response.setStatus(400);        setErrorState(ErrorState.CLOSE_CLEAN,null);        break;      }      port=port + (charValue * mult);      mult=10 * mult;    }    request.setServerPort(port);  }}  }
class C{  public ResourceSetDescription(String id,String clientId,String resourceOwnerId,Map<String,Object> description){  this.id=id;  this.clientId=clientId;  this.resourceOwnerId=resourceOwnerId;  this.description=json(description);}  }
class C{  public static void serialize(XMPMetaImpl xmp,OutputStream output,SerializeOptions options) throws XMPException {  options=options != null ? options : new SerializeOptions();  if (options.getSort()) {    xmp.sort();  }  new XMPSerializerRDF().serialize(xmp,output,options);}  }
class C{  @Override public void close() throws IOException {  out.close();}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public static String toString(final Object object){  return toString(object,false);}  }
class C{  public ConnectionParameters adminUid(String uid){  adminUid=uid;  return this;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String i18nKey=getStringOptionValue(ARGUMENT_I18N_KEY);  String interfaceName=getStringOptionValue(ARGUMENT_INTERFACE_NAME);  String pluginName=getStringOptionValue(ARGUMENT_PLUGIN_NAME);  ServiceSchemaManager ssm=getServiceSchemaManager();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,pluginName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_PLUGIN_INTERFACE",params);    ssm.addPluginInterface(pluginName,interfaceName,i18nKey);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_PLUGIN_INTERFACE",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-plugin-interface-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,pluginName,e.getMessage()};    debugError("AddPluginInterface.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_PLUGIN_INTERFACE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,pluginName,e.getMessage()};    debugError("AddPluginInterface.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_PLUGIN_INTERFACE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.ReferenceElement createReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.ReferenceElementImpl();}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public void testSetBitNegativeOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=191;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void testBitLengthNegative3(){  byte aBytes[]={1,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(80,aNumber.bitLength());}  }
class C{  protected boolean handlingMyLastProtocolMessageWithContentType(List<ProtocolMessage> protocolMessages,int pointer){  ProtocolMessage currentProtocolMessage=protocolMessages.get(pointer);  return ((protocolMessages.size() == (pointer + 1)) || (protocolMessages.get(pointer + 1).getMessageIssuer() != tlsContext.getMyConnectionEnd()) || currentProtocolMessage.getProtocolMessageType() != (protocolMessages.get(pointer + 1).getProtocolMessageType()));}  }
class C{  protected boolean isPersistent(){  return m_principal != null && m_guid != null && m_guid.getDn().length() > 0;}  }
class C{  public static ArgumentException unableToReadConnectionParameters(Exception cause){  LocalizableMessage message=ERR_DSCFG_ERROR_CANNOT_READ_CONNECTION_PARAMETERS.get(cause.getMessage());  return new ArgumentException(message,cause);}  }
class C{  @Override public synchronized String toString(){  if (elementCount == 0) {    return "[]";  }  int length=elementCount - 1;  StringBuilder buffer=new StringBuilder(elementCount * 16);  buffer.append('[');  for (int i=0; i < length; i++) {    if (elementData[i] == this) {      buffer.append("(this Collection)");    } else {      buffer.append(elementData[i]);    }    buffer.append(", ");  }  if (elementData[length] == this) {    buffer.append("(this Collection)");  } else {    buffer.append(elementData[length]);  }  buffer.append(']');  return buffer.toString();}  }
class C{  public void paintPanelBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean isOptional(){  return (isOptional);}  }
class C{  public void endDocument() throws SAXException {  flushPending();  m_saxHandler.endDocument();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public SubConfigModelImpl(HttpServletRequest req,String serviceName,String parentId,Map map) throws AMConsoleException {  super(req,map);  this.serviceName=serviceName;  this.parentId=parentId;  subConfigMeta=new SubConfigMeta(serviceName,this);  subConfigMeta.setParentId(parentId);  displayName=subConfigMeta.getParentDisplayName();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode14.class,args);}  }
class C{  private void fillGrid(RecyclerView.Recycler recycler,RecyclerView.State state,boolean isFillBottom){  while (((isFillBottom && spanBottomMin <= bottomBorder) || (!isFillBottom && spanTopMax >= topBorder)) && mCurrentPosition >= 0 && mCurrentPosition < state.getItemCount()) {    layoutChunk(recycler,state,isFillBottom);  }}  }
class C{  public void paint(Graphics g,JComponent c){  Rectangle clip=g.getClipBounds();  Rectangle bounds=table.getBounds();  bounds.x=bounds.y=0;  if (table.getRowCount() <= 0 || table.getColumnCount() <= 0 || !bounds.intersects(clip)) {    paintDropLines(g);    return;  }  boolean ltr=table.getComponentOrientation().isLeftToRight();  Point upperLeft=clip.getLocation();  Point lowerRight=new Point(clip.x + clip.width - 1,clip.y + clip.height - 1);  int rMin=table.rowAtPoint(upperLeft);  int rMax=table.rowAtPoint(lowerRight);  if (rMin == -1) {    rMin=0;  }  if (rMax == -1) {    rMax=table.getRowCount() - 1;  }  int cMin=table.columnAtPoint(ltr ? upperLeft : lowerRight);  int cMax=table.columnAtPoint(ltr ? lowerRight : upperLeft);  if (cMin == -1) {    cMin=0;  }  if (cMax == -1) {    cMax=table.getColumnCount() - 1;  }  paintGrid(g,rMin,rMax,cMin,cMax);  paintCells(g,rMin,rMax,cMin,cMax);  paintDropLines(g);}  }
class C{  public void stateChanged(ChangeEvent e){  if (e == null) {    return;  }  if (myBar != null) {    Object newModelValue=myBar.getValue();    firePropertyChange(ACCESSIBLE_VALUE_PROPERTY,oldModelValue,newModelValue);    oldModelValue=newModelValue;  }}  }
class C{  public LEAuthLevelCondition(){  super();}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void initializeCache(String name,int defaultMaxCacheSize){  initializeCache(name,defaultMaxCacheSize,maxLifetime);}  }
class C{  @Override public void init() throws ServletException {  restletXACMLHttpServlet.init();}  }
class C{  private ScriptException convertException(RhinoException ex){  final ScriptException se=new ScriptException(ex.getMessage(),ex.sourceName(),ex.lineNumber(),ex.columnNumber());  se.initCause(ex);  return se;}  }
class C{  protected String normalizeSQL(final String sql){  return sql.trim();}  }
class C{  public static Optional<String> first(final String value,final int n){  return Optional.ofNullable(value).filter(null).map(null);}  }
class C{  public int activeCount(){  int result;  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    if (destroyed) {      return 0;    }    result=nthreads;    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  for (int i=0; i < ngroupsSnapshot; i++) {    result+=groupsSnapshot[i].activeCount();  }  return result;}  }
class C{  public void testCase21(){  byte aBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};  int aSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  static RepaintManager currentManager(AppContext appContext){  RepaintManager rm=(RepaintManager)appContext.get(repaintManagerKey);  if (rm == null) {    rm=new RepaintManager(BUFFER_STRATEGY_TYPE);    appContext.put(repaintManagerKey,rm);  }  return rm;}  }
class C{  private JComponent createTitlePane(JRootPane root){  return new MetalTitlePane(root,this);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  String name;  java.util.Collection expectedResult=new java.util.ArrayList();  expectedResult.add("ent1");  expectedResult.add("ent2");  expectedResult.add("ent3");  expectedResult.add("ent4");  expectedResult.add("ent5");  java.util.Collection expectedResultSVG=new java.util.ArrayList();  expectedResultSVG.add("ent1");  expectedResultSVG.add("ent2");  expectedResultSVG.add("ent3");  expectedResultSVG.add("ent4");  expectedResultSVG.add("ent5");  expectedResultSVG.add("svgunit");  expectedResultSVG.add("svgtest");  java.util.Collection nameList=new java.util.ArrayList();  Node entity;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  for (int indexN1007B=0; indexN1007B < entityList.getLength(); indexN1007B++) {    entity=(Node)entityList.item(indexN1007B);    name=entity.getNodeName();    nameList.add(name);  }  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("entityNamesSVG",expectedResultSVG,nameList);  } else {    assertEquals("entityNames",expectedResult,nameList);  }}  }
class C{  public Object clone(){  GenericObjectList retval=(GenericObjectList)super.clone();  for (ListIterator<GenericObject> iter=retval.listIterator(); iter.hasNext(); ) {    GenericObject obj=(GenericObject)((GenericObject)iter.next()).clone();    iter.set(obj);  }  return retval;}  }
class C{  public static void printFileContentToResponse(final File file,final OutputStream out) throws IOException {  FileInputStream in=null;  if (file.length() == 0) {    return;  }  try {    in=new FileInputStream(file);    byte[] buf;    if (file.length() < MAX_BUFFER_SIZE) {      buf=new byte[(int)file.length()];    } else {      buf=new byte[MAX_BUFFER_SIZE];    }    int numRead;    while ((numRead=in.read(buf)) != -1) {      out.write(buf,0,numRead);    }  } catch (  IOException e) {    throw e;  } finally {    try {      if (in != null) {        in.close();      }    } catch (    IOException e) {      throw e;    }  }}  }
class C{  private void fixUp(int k){  while (k > 1) {    int j=k >> 1;    if (queue[j].nextExecutionTime <= queue[k].nextExecutionTime)     break;    TimerTask tmp=queue[j];    queue[j]=queue[k];    queue[k]=tmp;    k=j;  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthzDecisionStatementElement createAuthzDecisionStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthzDecisionStatementElementImpl();}  }
class C{  public static VariableModification<byte[]> shuffle(final byte[] shuffle){  return new ByteArrayShuffleModification(shuffle);}  }
class C{  public PWResetAccountLockout(PWResetModelImpl model){  this.model=model;  isAccountLockout=new ISAccountLockout(model.isPasswordResetFailureLockoutEnabled(),model.getPasswordResetFailureLockoutTime(),model.getPasswordResetFailureLockoutCount(),model.getPasswordResetLockoutNotification(),model.getPasswordResetLockoutUserWarningCount(),model.getPasswordResetLockoutAttributeName(),model.getPasswordResetLockoutAttributeValue(),model.getPasswordResetFailureLockoutDuration(),1,null,PWResetModel.DEFAULT_RB);}  }
class C{  public static void test_diff_getStaticVariable(){  Target2.setStaticIgram(220);  assertSame(220,Target2.staticIgram);}  }
class C{  public void validateToken(SSOToken token) throws SSOException {  try {    SSOTokenImpl tokenImpl=(SSOTokenImpl)token;    tokenImpl.validate();  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("validateToken: ",e);    }    throw new SSOException(SSOProviderBundle.rbName,"invalidtoken",null);  }}  }
class C{  @Override public Iterator<ByteString> iterator(){  return getUnmodifiableIterator(values);}  }
class C{  public void startDocumentInternal() throws org.xml.sax.SAXException {  if (m_needToCallStartDocument) {    super.startDocumentInternal();    m_needToCallStartDocument=false;    if (m_inEntityRef)     return;    m_needToOutputDocTypeDecl=true;    m_startNewLine=false;    final String version=getXMLVersion();    if (getOmitXMLDeclaration() == false) {      String encoding=Encodings.getMimeEncoding(getEncoding());      String standalone;      if (m_standaloneWasSpecified) {        standalone=" standalone=\"" + getStandalone() + "\"";      } else {        standalone="";      }      try {        final java.io.Writer writer=m_writer;        writer.write("<?xml version=\"");        writer.write(version);        writer.write("\" encoding=\"");        writer.write(encoding);        writer.write('\"');        writer.write(standalone);        writer.write("?>");        if (m_doIndent) {          if (m_standaloneWasSpecified || getDoctypePublic() != null || getDoctypeSystem() != null) {            writer.write(m_lineSep,0,m_lineSepLen);          }        }      } catch (      IOException e) {        throw new SAXException(e);      }    }  }}  }
class C{  CompositePrinterParser toPrinterParser(boolean optional){  return printerParser.withOptional(optional);}  }
class C{  @Parameters({"parent-realm","entity-type","entity-creation-attributes"}) @Test(groups={"api"},expectedExceptions={IdRepoException.class}) public void createIdenityWithNoName(String parentRealm,String idType,String createAttributes) throws IdRepoException, SSOException {  Object[] params={parentRealm,idType,createAttributes};  entering("createIdenityWithNoName",params);  try {    IdType type=IdUtils.getType(idType);    Map values=CollectionUtils.parseStringToMap(createAttributes);    createIdentity(parentRealm,type,"",values);  } catch (  SSOException e) {    log(Level.SEVERE,"createIdenityWithNoName",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("createIdenityWithNoName");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode02.class,args);}  }
class C{  @Override public boolean removeOperationInProgress(int messageID){  return false;}  }
class C{  private Set buildSet(String attrName,Map attributes,Set resultSet){  Set vals=(Set)attributes.get(attrName);  if ((vals != null) && !vals.isEmpty()) {    resultSet.addAll(vals);  }  return (resultSet);}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  } else   if (object == null || getClass() != object.getClass()) {    return false;  }  return principal.equals(object.toString());}  }
class C{  LDAPClientFilter(final DecodeOptions options,final int maxASN1ElementSize){  super(options,maxASN1ElementSize);}  }
class C{  public void putAll(PdfDictionary d){  map.putAll(d.map);}  }
class C{  @Thunk Bitmap readFromDb(WidgetCacheKey key,Bitmap recycle,PreviewLoadTask loadTask){  Cursor cursor=null;  try {    cursor=mDb.getReadableDatabase().query(CacheDb.TABLE_NAME,new String[]{CacheDb.COLUMN_PREVIEW_BITMAP},CacheDb.COLUMN_COMPONENT + " = ? AND " + CacheDb.COLUMN_USER+ " = ? AND "+ CacheDb.COLUMN_SIZE+ " = ?",new String[]{key.componentName.flattenToString(),Long.toString(mUserManager.getSerialNumberForUser(key.user)),key.size},null,null,null);    if (loadTask.isCancelled()) {      return null;    }    if (cursor.moveToNext()) {      byte[] blob=cursor.getBlob(0);      BitmapFactory.Options opts=new BitmapFactory.Options();      opts.inBitmap=recycle;      try {        if (!loadTask.isCancelled()) {          return BitmapFactory.decodeByteArray(blob,0,blob.length,opts);        }      } catch (      Exception e) {        return null;      }    }  } catch (  SQLException e) {    Log.w(TAG,"Error loading preview from DB",e);  } finally {    if (cursor != null) {      cursor.close();    }  }  return null;}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  notifyAll();}  }
class C{  public ObjectInUseException(String rbName,String errCode,Object[] args,Throwable t,String name,Object user){  super(rbName,errCode,args,t);  this.name=name;  this.user=user;}  }
class C{  private String formatObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Number) {    return NumberFormat.getInstance(locale).format(obj);  } else   if (obj instanceof Date) {    return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,locale).format(obj);  } else   if (obj instanceof String) {    return (String)obj;  }  return obj.toString();}  }
class C{  public void unread(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if (len > pos)     throw new IOException("Pushback buffer overflow");    pos-=len;    System.arraycopy(cbuf,off,buf,pos,len);  }}  }
class C{  public void reportEvent(ValidatableObject source,String formattedMessage) throws AbortSerializationException {  reportEvent(source,new ValidationEventImpl(ValidationEvent.ERROR,formattedMessage,new ValidationEventLocatorImpl(source)));}  }
class C{  protected void parse(String rawdata) throws MimeTypeParseException {  int length=rawdata.length();  if (length > 0) {    int currentIndex=skipWhiteSpace(rawdata,0);    int lastIndex=0;    if (currentIndex < length) {      char currentChar=rawdata.charAt(currentIndex);      while ((currentIndex < length) && (currentChar == ';')) {        String name;        String value;        boolean foundit;        ++currentIndex;        currentIndex=skipWhiteSpace(rawdata,currentIndex);        if (currentIndex < length) {          lastIndex=currentIndex;          currentChar=rawdata.charAt(currentIndex);          while ((currentIndex < length) && isTokenChar(currentChar)) {            ++currentIndex;            currentChar=rawdata.charAt(currentIndex);          }          name=rawdata.substring(lastIndex,currentIndex).toLowerCase();          currentIndex=skipWhiteSpace(rawdata,currentIndex);          if ((currentIndex < length) && (rawdata.charAt(currentIndex) == '=')) {            ++currentIndex;            currentIndex=skipWhiteSpace(rawdata,currentIndex);            if (currentIndex < length) {              currentChar=rawdata.charAt(currentIndex);              if (currentChar == '"') {                ++currentIndex;                lastIndex=currentIndex;                if (currentIndex < length) {                  foundit=false;                  while ((currentIndex < length) && !foundit) {                    currentChar=rawdata.charAt(currentIndex);                    if (currentChar == '\\') {                      currentIndex+=2;                    } else                     if (currentChar == '"') {                      foundit=true;                    } else {                      ++currentIndex;                    }                  }                  if (currentChar == '"') {                    value=unquote(rawdata.substring(lastIndex,currentIndex));                    ++currentIndex;                  } else {                    throw new MimeTypeParseException("Encountered unterminated quoted parameter value.");                  }                } else {                  throw new MimeTypeParseException("Encountered unterminated quoted parameter value.");                }              } else               if (isTokenChar(currentChar)) {                lastIndex=currentIndex;                foundit=false;                while ((currentIndex < length) && !foundit) {                  currentChar=rawdata.charAt(currentIndex);                  if (isTokenChar(currentChar)) {                    ++currentIndex;                  } else {                    foundit=true;                  }                }                value=rawdata.substring(lastIndex,currentIndex);              } else {                throw new MimeTypeParseException("Unexpected character encountered at index " + currentIndex);              }              parameters.put(name,value);            } else {              throw new MimeTypeParseException("Couldn't find a value for parameter named " + name);            }          } else {            throw new MimeTypeParseException("Couldn't find the '=' that separates a parameter name from its value.");          }        } else {          throw new MimeTypeParseException("Couldn't find parameter name");        }        currentIndex=skipWhiteSpace(rawdata,currentIndex);        if (currentIndex < length) {          currentChar=rawdata.charAt(currentIndex);        }      }      if (currentIndex < length) {        throw new MimeTypeParseException("More characters encountered in input than expected.");      }    }  }}  }
class C{  public static void addToCurrentCast(Sprite... sprites){  MAIN_CAST.addAll(Arrays.asList(sprites));}  }
class C{  private boolean isWrapRequired(int mode,int maxSize,int currentLength,int childLength,LayoutParams lp,int childAbsoluteIndex,int childRelativeIndexInFlexLine){  if (mFlexWrap == FLEX_WRAP_NOWRAP) {    return false;  }  if (lp.wrapBefore) {    return true;  }  if (mode == MeasureSpec.UNSPECIFIED) {    return false;  }  if (isMainAxisDirectionHorizontal(mFlexDirection)) {    if (hasDividerBeforeChildAtAlongMainAxis(childAbsoluteIndex,childRelativeIndexInFlexLine)) {      childLength+=mDividerVerticalWidth;    }    if ((mShowDividerVertical & SHOW_DIVIDER_END) > 0) {      childLength+=mDividerVerticalWidth;    }  } else {    if (hasDividerBeforeChildAtAlongMainAxis(childAbsoluteIndex,childRelativeIndexInFlexLine)) {      childLength+=mDividerHorizontalHeight;    }    if ((mShowDividerHorizontal & SHOW_DIVIDER_END) > 0) {      childLength+=mDividerHorizontalHeight;    }  }  return maxSize < currentLength + childLength;}  }
class C{  public void appendBytes(byte[] b,int off,int numBytes){  if (pos + numBytes + 3 > buf.length) {    log.error(sm.getString("ajpmessage.overflow","" + numBytes,"" + pos),new ArrayIndexOutOfBoundsException());    if (log.isDebugEnabled()) {      dump("Overflow/coBytes");    }    return;  }  appendInt(numBytes);  System.arraycopy(b,off,buf,pos,numBytes);  pos+=numBytes;  appendByte(0);}  }
class C{  public void firePropertyChange(String propertyName,float oldValue,float newValue){}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.EmptyTypeImpl();}  }
class C{  public void shutdown(){  DirectoryServer.deregisterMonitorProvider(this);  assuredTimeoutTimer.cancel();  stopAllServers(true);  statusAnalyzer.shutdown();}  }
class C{  private static void testSwitch(){  System.out.println("Switch.testSwitch");  int a=1;switch (a) {case -1:    assert (false);  break;case 0:assert (false);break;case 1:break;case 2:assert (false);break;case 3:assert (false);break;case 4:assert (false);break;default :assert (false);break;}switch (a) {case 3:assert (false);break;case 4:assert (false);break;default :break;}a=0x12345678;switch (a) {case 0x12345678:break;case 0x12345679:assert (false);break;default :assert (false);break;}switch (a) {case 57:assert (false);break;case -6:assert (false);break;case 0x12345678:break;case 22:assert (false);break;case 3:assert (false);break;default :assert (false);break;}switch (a) {case -6:assert (false);break;case 3:assert (false);break;default :break;}a=-5;switch (a) {case 12:assert (false);break;case -5:break;case 0:assert (false);break;default :assert (false);break;}switch (a) {default :break;}}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  debug.message("in initialize...");  java.util.Locale locale=getLoginLocale();  bundle=amCache.getResBundle(fmAuthFederation,locale);  if (debug.messageEnabled()) {    debug.message("fmAuthFederation Authentication resource bundle locale=" + locale);  }  this.callbackHandler=getCallbackHandler();  if (options != null) {    String authLevelStr=CollectionHelper.getMapAttr(options,AUTH_LEVEL);    if (authLevelStr != null) {      try {        setAuthLevel(Integer.parseInt(authLevelStr));      } catch (      Exception e) {        debug.error("Unable to set auth level " + authLevelStr,e);      }    }  }}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {  m_inDTD=false;}  }
class C{  public static boolean isFroyo(){  return getSdkVersion() >= Build.VERSION_CODES.FROYO;}  }
class C{  public int countAllTokens() throws CoreTokenException {  TokenFilter filter=new TokenFilterBuilder().returnAttribute(CoreTokenField.TOKEN_ID).build();  return store.attributeQuery(filter).size();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinType createActivationPinType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinTypeImpl();}  }
class C{  public MalformedLinkException(String explanation){  super(explanation);}  }
class C{  public void testIsNullable(){  try {    assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(1));    assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(2));    assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(3));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isNullable()" + e1.getMessage());    e1.printStackTrace();  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(getArg0AsNumber(xctxt));}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Insets insets=getBorderInsets(c);  Color oldColor=g.getColor();  g.translate(x,y);  if (tileIcon != null) {    color=(tileIcon.getIconWidth() == -1) ? Color.gray : null;  }  if (color != null) {    g.setColor(color);    g.fillRect(0,0,width - insets.right,insets.top);    g.fillRect(0,insets.top,insets.left,height - insets.top);    g.fillRect(insets.left,height - insets.bottom,width - insets.left,insets.bottom);    g.fillRect(width - insets.right,0,insets.right,height - insets.bottom);  } else   if (tileIcon != null) {    int tileW=tileIcon.getIconWidth();    int tileH=tileIcon.getIconHeight();    paintEdge(c,g,0,0,width - insets.right,insets.top,tileW,tileH);    paintEdge(c,g,0,insets.top,insets.left,height - insets.top,tileW,tileH);    paintEdge(c,g,insets.left,height - insets.bottom,width - insets.left,insets.bottom,tileW,tileH);    paintEdge(c,g,width - insets.right,0,insets.right,height - insets.bottom,tileW,tileH);  }  g.translate(-x,-y);  g.setColor(oldColor);}  }
class C{  private int fractionalFilterOperation(PreOperationModifyOperation modifyOperation,boolean performFiltering){  Entry modifiedEntry=modifyOperation.getCurrentEntry();  Set<AttributeType> fractionalConcernedAttributes=createFractionalConcernedAttrList(fractionalConfig,modifiedEntry.getObjectClasses().keySet());  boolean fractionalExclusive=fractionalConfig.isFractionalExclusive();  if (fractionalExclusive && fractionalConcernedAttributes.isEmpty()) {    return FRACTIONAL_HAS_NO_FRACTIONAL_FILTERED_ATTRIBUTES;  }  DN entryToModifyDn=modifyOperation.getEntryDN();  Entry entryToModify;  try {    entryToModify=DirectoryServer.getEntry(entryToModifyDn);  } catch (  DirectoryException e) {    logger.info(NOTE_ERR_FRACTIONAL,getBaseDN(),stackTraceToSingleLineString(e));    return FRACTIONAL_HAS_NO_FRACTIONAL_FILTERED_ATTRIBUTES;  }  Set<ObjectClass> entryClasses=entryToModify.getObjectClasses().keySet();  int result=FRACTIONAL_HAS_NO_FRACTIONAL_FILTERED_ATTRIBUTES;  List<Modification> mods=modifyOperation.getModifications();  Iterator<Modification> modsIt=mods.iterator();  while (modsIt.hasNext()) {    Modification mod=modsIt.next();    Attribute attr=mod.getAttribute();    AttributeType attrType=attr.getAttributeDescription().getAttributeType();    if (attrType.isOperational() || isMandatoryAttribute(entryClasses,attrType) || isFractionalProhibited(attrType)|| !canRemoveAttribute(attrType,fractionalExclusive,fractionalConcernedAttributes)) {      continue;    }    if (!performFiltering) {      return FRACTIONAL_HAS_FRACTIONAL_FILTERED_ATTRIBUTES;    }    modsIt.remove();    result=FRACTIONAL_HAS_FRACTIONAL_FILTERED_ATTRIBUTES;    if (mods.isEmpty()) {      return FRACTIONAL_BECOME_NO_OP;    }  }  return result;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.InsertEntryType createInsertEntryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.InsertEntryTypeImpl();}  }
class C{  private JSONObject readObject() throws JSONException {  JSONObject result=new JSONObject();  int first=nextCleanInternal();  if (first == '}') {    return result;  } else   if (first != -1) {    pos--;  }  while (true) {    Object name=nextValue();    if (!(name instanceof String)) {      if (name == null) {        throw syntaxError("Names cannot be null");      } else {        throw syntaxError("Names must be strings, but " + name + " is of type "+ name.getClass().getName());      }    }    int separator=nextCleanInternal();    if (separator != ':' && separator != '=') {      throw syntaxError("Expected ':' after " + name);    }    if (pos < in.length() && in.charAt(pos) == '>') {      pos++;    }    result.put((String)name,nextValue());switch (nextCleanInternal()) {case '}':      return result;case ';':case ',':    continue;default :  throw syntaxError("Unterminated object");}}}  }
class C{  public boolean accept(File file){  return accept(file.getParentFile(),file.getName());}  }
class C{  public static String defaultPeopleContainerName(){  initialize();  return (defaultPC);}  }
class C{  public GenericAgentProfileViewBean(){  super("GenericAgentProfile");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public static int sizeOfLong(){  return 8;}  }
class C{  public <C extends ConfigurationClient,S extends Configuration>String[] listManagedObjects(ManagedObjectPath<?,?> parent,RelationDefinition<C,S> relationDef){  validateRelationDefinition(parent,relationDef);  DN targetDN=DNBuilder.create(parent,relationDef);  Set<DN> children;  try {    children=configRepository.getChildren(targetDN);  } catch (  ConfigException e) {    return new String[0];  }  List<String> names=new ArrayList<>(children.size());  for (  DN child : children) {    String name=child.rdn().getFirstAVA().getAttributeValue().toString().trim();    names.add(name);  }  return names.toArray(new String[names.size()]);}  }
class C{  public Handle(int tag,String owner,String name,String desc,boolean itf){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;  this.itf=itf;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectLocalityElement createSubjectLocalityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectLocalityElementImpl();}  }
class C{  void updateChildren(DocumentEvent e,Shape a){  Element elem=getElement();  DocumentEvent.ElementChange ec=e.getChange(elem);  if (ec != null) {    Element[] removedElems=ec.getChildrenRemoved();    Element[] addedElems=ec.getChildrenAdded();    View[] added=new View[addedElems.length];    for (int i=0; i < addedElems.length; i++) {      added[i]=new WrappedLine(addedElems[i]);    }    replace(ec.getIndex(),removedElems.length,added);    if (a != null) {      preferenceChanged(null,true,true);      getContainer().repaint();    }  }  updateMetrics();}  }
class C{  protected void CreateFDArray(OffsetItem fdarrayRef,OffsetItem privateRef,int Font){  OutputList.addLast(new MarkerItem(fdarrayRef));  BuildIndexHeader(1,1,1);  OffsetItem privateIndex1Ref=new IndexOffsetItem(1);  OutputList.addLast(privateIndex1Ref);  IndexBaseItem privateBase=new IndexBaseItem();  OutputList.addLast(privateBase);  int NewSize=fonts[Font].privateLength;  int OrgSubrsOffsetSize=CalcSubrOffsetSize(fonts[Font].privateOffset,fonts[Font].privateLength);  if (OrgSubrsOffsetSize != 0)   NewSize+=5 - OrgSubrsOffsetSize;  OutputList.addLast(new DictNumberItem(NewSize));  OutputList.addLast(privateRef);  OutputList.addLast(new UInt8Item((char)18));  OutputList.addLast(new IndexMarkerItem(privateIndex1Ref,privateBase));}  }
class C{  public static void removeByField2(boolean field2){  getPersistence().removeByField2(field2);}  }
class C{  public int whichButton(){  return button;}  }
class C{  public static PolicyResponse parseXML(Node pNode) throws PolicyEvaluationException {  PolicyResponse pres=new PolicyResponse();  Node node=null;  String attr=XMLUtils.getNodeAttributeValue(pNode,REQUEST_ID);  if (attr == null) {    debug.error("PolicyResponse: missing attribute " + REQUEST_ID);    String objs[]={REQUEST_ID};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  pres.setRequestId(attr);  String issueInst=XMLUtils.getNodeAttributeValue(pNode,ISSUE_INSTANT);  if ((issueInst != null) && (issueInst.length() != 0)) {    try {      pres.setIssueInstant(Long.parseLong(issueInst));    } catch (    NumberFormatException nfe) {      if (debug.warningEnabled()) {        debug.message("PolicyResponse: invald value for attribute:" + ISSUE_INSTANT + ":"+ issueInst);      }    }  } else {    if (debug.messageEnabled()) {      debug.message("PolicyResponse: missing attribute: " + ISSUE_INSTANT);    }  }  Set nodeSet=XMLUtils.getChildNodes(pNode,RESOURCE_RESULT);  if ((nodeSet != null) && (!nodeSet.isEmpty())) {    Set resResults=new HashSet();    Iterator nodes=nodeSet.iterator();    while (nodes.hasNext()) {      node=(Node)nodes.next();      ResourceResult rRes=null;      try {        rRes=ResourceResult.parseResourceResult(node);      } catch (      Exception e) {        debug.error("PolicyResponse: XML parsing error");        throw new PolicyEvaluationException(ResBundleUtils.rbName,"xml_parsing_error",null,e);      }      resResults.add(rRes);    }    pres.setResourceResults(resResults);    pres.setMethodID(POLICY_RESPONSE_RESOURCE_RESULT);    return pres;  }  node=XMLUtils.getChildNode(pNode,ADD_LISTENER_RESPONSE);  if (node != null) {    pres.setMethodID(POLICY_ADD_LISTENER_RESPONSE);    return pres;  }  node=XMLUtils.getChildNode(pNode,REMOVE_LISTENER_RESPONSE);  if (node != null) {    pres.setMethodID(POLICY_REMOVE_LISTENER_RESPONSE);    return pres;  }  node=XMLUtils.getChildNode(pNode,ADVICES_HANDLEABLE_BY_AM_RESPONSE);  if (node != null) {    pres.setAdvicesHandleableByAMResponse(AdvicesHandleableByAMResponse.parseXML(node));    pres.setMethodID(POLICY_ADVICES_HANDLEABLE_BY_AM_RESPONSE);    return pres;  }  node=XMLUtils.getChildNode(pNode,EXCEPTION_RESPONSE);  if (node != null) {    String eMsg=XMLUtils.getValueOfValueNode(node);    pres.setExceptionMsg(eMsg);    pres.setMethodID(POLICY_EXCEPTION);    return pres;  }  debug.error("PolicyResponse: invalid method specified");  throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_policy_response_method",null,null);}  }
class C{  public void testmodInverseNeg2(){  byte aBytes[]={-15,24,123,57,-15,24,123,57,-15,24,123,57};  byte mBytes[]={122,2,4,122,2,4};  byte rBytes[]={85,47,127,4,-128,45};  BigInteger aNumber=new BigInteger(aBytes);  BigInteger modulus=new BigInteger(mBytes);  BigInteger result=aNumber.modInverse(modulus);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void logoutUsingTokenID() throws AuthLoginException {  if (localFlag) {    return;  }  if (ssoToken != null) {    try {      organizationName=ssoToken.getProperty(ISAuthConstants.ORGANIZATION);      ssoTokenID=ssoToken.getTokenID().toString();      authURL=sessionCache.getSession(new SessionID(ssoTokenID)).getSessionServiceURL();    } catch (    Exception e) {      throw new AuthLoginException(e);    }  }  if (authURL != null) {    authServiceURL=getAuthServiceURL(authURL.getProtocol(),authURL.getHost(),Integer.toString(authURL.getPort()),authURL.getPath());  }  try {    StringBuilder xml=new StringBuilder(100);    String[] authHandles=new String[1];    authHandles[0]=ssoToken.getTokenID().toString();    xml.append(MessageFormat.format(AuthXMLTags.XML_REQUEST_PREFIX,(Object[])authHandles));    if (appSSOToken != null) {      xml.append(AuthXMLTags.APPSSOTOKEN_BEGIN);      xml.append(appSSOToken.getTokenID().toString()).append(AuthXMLTags.APPSSOTOKEN_END);    }    xml.append(AuthXMLTags.LOGOUT_BEGIN).append(AuthXMLTags.LOGOUT_END).append(AuthXMLTags.XML_REQUEST_SUFFIX);    receivedDocument=processRequest(xml.toString());    checkAndSetLoginStatus();  } catch (  AuthLoginException le) {    loginStatus=Status.FAILED;    loginException=le;  }}  }
class C{  public static int v(Object tag,String msg){  return isPrint ? android.util.Log.v(tag.getClass().getSimpleName(),msg) : -1;}  }
class C{  public boolean stopEditing(JTree a){  boolean returnValue=((TreeUI)(uis.elementAt(0))).stopEditing(a);  for (int i=1; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).stopEditing(a);  }  return returnValue;}  }
class C{  public Response createResponse(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.RESPONSE);  if (obj == null) {    return new ResponseImpl();  } else {    return (Response)obj;  }}  }
class C{  public double generate(double x,double y,double z,double w){  double n0, n1, n2, n3, n4;  double s=(x + y + z+ w) * F4;  int i=fastfloor(x + s);  int j=fastfloor(y + s);  int k=fastfloor(z + s);  int l=fastfloor(w + s);  double t=(i + j + k+ l) * G4;  double X0=i - t;  double Y0=j - t;  double Z0=k - t;  double W0=l - t;  double x0=x - X0;  double y0=y - Y0;  double z0=z - Z0;  double w0=w - W0;  int rankx=0;  int ranky=0;  int rankz=0;  int rankw=0;  if (x0 > y0) {    rankx++;  } else {    ranky++;  }  if (x0 > z0) {    rankx++;  } else {    rankz++;  }  if (x0 > w0) {    rankx++;  } else {    rankw++;  }  if (y0 > z0) {    ranky++;  } else {    rankz++;  }  if (y0 > w0) {    ranky++;  } else {    rankw++;  }  if (z0 > w0) {    rankz++;  } else {    rankw++;  }  int i1, j1, k1, l1;  int i2, j2, k2, l2;  int i3, j3, k3, l3;  i1=rankx >= 3 ? 1 : 0;  j1=ranky >= 3 ? 1 : 0;  k1=rankz >= 3 ? 1 : 0;  l1=rankw >= 3 ? 1 : 0;  i2=rankx >= 2 ? 1 : 0;  j2=ranky >= 2 ? 1 : 0;  k2=rankz >= 2 ? 1 : 0;  l2=rankw >= 2 ? 1 : 0;  i3=rankx >= 1 ? 1 : 0;  j3=ranky >= 1 ? 1 : 0;  k3=rankz >= 1 ? 1 : 0;  l3=rankw >= 1 ? 1 : 0;  double x1=x0 - i1 + G4;  double y1=y0 - j1 + G4;  double z1=z0 - k1 + G4;  double w1=w0 - l1 + G4;  double x2=x0 - i2 + 2.0 * G4;  double y2=y0 - j2 + 2.0 * G4;  double z2=z0 - k2 + 2.0 * G4;  double w2=w0 - l2 + 2.0 * G4;  double x3=x0 - i3 + 3.0 * G4;  double y3=y0 - j3 + 3.0 * G4;  double z3=z0 - k3 + 3.0 * G4;  double w3=w0 - l3 + 3.0 * G4;  double x4=x0 - 1.0 + 4.0 * G4;  double y4=y0 - 1.0 + 4.0 * G4;  double z4=z0 - 1.0 + 4.0 * G4;  double w4=w0 - 1.0 + 4.0 * G4;  int ii=i & 255;  int jj=j & 255;  int kk=k & 255;  int ll=l & 255;  int gi0=perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;  int gi1=perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;  int gi2=perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;  int gi3=perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;  int gi4=perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;  double t0=0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;  if (t0 < 0) {    n0=0.0;  } else {    t0*=t0;    n0=t0 * t0 * dot(GRAD_4[gi0],x0,y0,z0,w0);  }  double t1=0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;  if (t1 < 0) {    n1=0.0;  } else {    t1*=t1;    n1=t1 * t1 * dot(GRAD_4[gi1],x1,y1,z1,w1);  }  double t2=0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;  if (t2 < 0) {    n2=0.0;  } else {    t2*=t2;    n2=t2 * t2 * dot(GRAD_4[gi2],x2,y2,z2,w2);  }  double t3=0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;  if (t3 < 0) {    n3=0.0;  } else {    t3*=t3;    n3=t3 * t3 * dot(GRAD_4[gi3],x3,y3,z3,w3);  }  double t4=0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;  if (t4 < 0) {    n4=0.0;  } else {    t4*=t4;    n4=t4 * t4 * dot(GRAD_4[gi4],x4,y4,z4,w4);  }  return 27.0 * (n0 + n1 + n2+ n3+ n4);}  }
class C{  public Set registerServices(InputStream xmlServiceSchema,AMEncryption decryptObj) throws SMSException, SSOException {  SMSEntry.validateToken(token);  Set sNames=new HashSet();  List serviceNodes=new ArrayList();  Document doc=SMSSchema.getXMLDocument(xmlServiceSchema);  if (!validSMSDtdDocType(doc)) {    throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME,IUMSConstants.SMS_xml_invalid_doc_type,null);  }  checkAndEncryptPasswordSyntax(doc,true,decryptObj);  NodeList nodes=doc.getElementsByTagName(SMSUtils.SERVICE);  for (int i=0; (nodes != null) && (i < nodes.getLength()); i++) {    Node serviceNode=nodes.item(i);    String name=XMLUtils.getNodeAttributeValue(serviceNode,SMSUtils.NAME);    String version=XMLUtils.getNodeAttributeValue(serviceNode,SMSUtils.VERSION);    SMSSchema smsSchema=new SMSSchema(name,version,doc);    if (XMLUtils.getChildNode(serviceNode,SMSUtils.SCHEMA) != null) {      validateServiceSchema(serviceNode);      ServiceSchemaManager.createService(token,smsSchema);      if (serviceNames == null) {        serviceNames=CachedSubEntries.getInstance(token,serviceDN);      }      serviceNames.add(name);      CachedSubEntries sVersions=(CachedSubEntries)serviceVersions.get(name);      if (sVersions == null) {        sVersions=CachedSubEntries.getInstance(token,getServiceNameDN(name));        serviceVersions.put(name,sVersions);      }      sVersions.add(version);      sNames.add(name);    }    for (Iterator pluginNodes=XMLUtils.getChildNodes(serviceNode,SMSUtils.PLUGIN_SCHEMA).iterator(); pluginNodes.hasNext(); ) {      Node pluginNode=(Node)pluginNodes.next();      PluginSchema.createPluginSchema(token,pluginNode,smsSchema);    }    if (XMLUtils.getChildNode(serviceNode,SMSUtils.CONFIGURATION) != null) {      serviceNodes.add(serviceNode);    }  }  if (serviceNodes.size() > 0) {    clearCache();  }  for (Iterator i=serviceNodes.iterator(); i.hasNext(); ) {    Node svcNode=(Node)i.next();    String name=XMLUtils.getNodeAttributeValue(svcNode,SMSUtils.NAME);    String version=XMLUtils.getNodeAttributeValue(svcNode,SMSUtils.VERSION);    Node configNode=XMLUtils.getChildNode(svcNode,SMSUtils.CONFIGURATION);    CreateServiceConfig.createService(this,name,version,configNode,true,decryptObj);  }  return sNames;}  }
class C{  void update(IndexDescriptor index){  ignoreCheckSave=true;  setPrimaryValid(lEntryLimit);  setPrimaryValid(lType);  name.setText(index.getName());  backendName.setText(index.getBackend().getBackendID());  titlePanel.setDetails(LocalizableMessage.raw(index.getName()));  entryLimit.setText(String.valueOf(index.getEntryLimit()));  approximate.setSelected(false);  equality.setSelected(false);  ordering.setSelected(false);  substring.setSelected(false);  presence.setSelected(false);  for (  IndexType type : index.getTypes()) {switch (type) {case APPROXIMATE:      approximate.setSelected(true);    break;case PRESENCE:  presence.setSelected(true);break;case EQUALITY:equality.setSelected(true);break;case ORDERING:ordering.setSelected(true);break;case SUBSTRING:substring.setSelected(true);break;}}JComponent[] comps={entryLimit,lType,typesPanel,lEntryLimit};for (JComponent comp : comps) {comp.setVisible(!index.isDatabaseIndex());}AttributeType attr=index.getAttributeType();repopulateTypesPanel(attr);if (index.isDatabaseIndex()) {entryLimit.setText("");}saveChanges.setVisible(!index.isDatabaseIndex());deleteIndex.setVisible(!index.isDatabaseIndex());if (index.isDatabaseIndex()) {Utilities.setWarningLabel(warning,NON_CONFIGURABLE_INDEX);warning.setVisible(true);} else if (getInfo() != null) {if (getInfo().mustReindex(index)) {Utilities.setWarningLabel(warning,INDEX_MODIFIED);warning.setVisible(true);warning.setVerticalTextPosition(SwingConstants.TOP);} else {warning.setVisible(false);}}this.index=index;ignoreCheckSave=false;checkSaveButton();scrollListener.updateBorder();}  }
class C{  private void renegotiateNewSession(){  if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getPeerHostName(),socketOwner.getPeerPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);    startSession();  } else {    status=NOT_HANDSHAKING;    sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);  }}  }
class C{  public void paintSeparatorForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintForeground(context,g,x,y,w,h,orientation);}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean xslAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    boolean was_added=addAttributeAlways(uri,localName,rawName,type,value,xslAttribute);    if (was_added && !xslAttribute && !rawName.startsWith("xmlns")) {      String prefixUsed=ensureAttributesNamespaceIsDeclared(uri,localName,rawName);      if (prefixUsed != null && rawName != null && !rawName.startsWith(prefixUsed)) {        rawName=prefixUsed + ":" + localName;      }    }    addAttributeAlways(uri,localName,rawName,type,value,xslAttribute);  } else {    String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_ATTRIBUTE_POSITION,new Object[]{localName});    try {      Transformer tran=super.getTransformer();      ErrorListener errHandler=tran.getErrorListener();      if (null != errHandler && m_sourceLocator != null)       errHandler.warning(new TransformerException(msg,m_sourceLocator)); else       System.out.println(msg);    } catch (    TransformerException e) {      SAXException se=new SAXException(e);      throw se;    }  }}  }
class C{  public ManagedObjectSet(final ScriptRegistry scriptRegistry,final CryptoService cryptoService,final AtomicReference<RouteService> syncRoute,IDMConnectionFactory connectionFactory,JsonValue config) throws JsonValueException, ScriptException {  this(scriptRegistry,cryptoService,syncRoute,connectionFactory,config,new RouterActivityLogger(connectionFactory));}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  Color oldColor=g.getColor();  g.translate(x,y);  if (bevelType == RAISED) {    g.setColor(getHighlightOuterColor(c));    g.drawLine(0,0,width - 2,0);    g.drawLine(0,0,0,height - 2);    g.drawLine(1,1,1,1);    g.setColor(getHighlightInnerColor(c));    g.drawLine(2,1,width - 2,1);    g.drawLine(1,2,1,height - 2);    g.drawLine(2,2,2,2);    g.drawLine(0,height - 1,0,height - 2);    g.drawLine(width - 1,0,width - 1,0);    g.setColor(getShadowOuterColor(c));    g.drawLine(2,height - 1,width - 1,height - 1);    g.drawLine(width - 1,2,width - 1,height - 1);    g.setColor(getShadowInnerColor(c));    g.drawLine(width - 2,height - 2,width - 2,height - 2);  } else   if (bevelType == LOWERED) {    g.setColor(getShadowOuterColor(c));    g.drawLine(0,0,width - 2,0);    g.drawLine(0,0,0,height - 2);    g.drawLine(1,1,1,1);    g.setColor(getShadowInnerColor(c));    g.drawLine(2,1,width - 2,1);    g.drawLine(1,2,1,height - 2);    g.drawLine(2,2,2,2);    g.drawLine(0,height - 1,0,height - 2);    g.drawLine(width - 1,0,width - 1,0);    g.setColor(getHighlightOuterColor(c));    g.drawLine(2,height - 1,width - 1,height - 1);    g.drawLine(width - 1,2,width - 1,height - 1);    g.setColor(getHighlightInnerColor(c));    g.drawLine(width - 2,height - 2,width - 2,height - 2);  }  g.translate(-x,-y);  g.setColor(oldColor);}  }
class C{  public byte[] answerAsBytes(){  return result;}  }
class C{  public TriggerGroupWrapper(String triggerName){  triggers=new ArrayList<>();  name=triggerName;  paused=false;}  }
class C{  @Override public int read() throws IOException {  try {    beforeRead(1);    int c=in.read();    afterRead(c != -1 ? 1 : -1);    return c;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  private static void parseTaskTab(String taskSchedule,boolean[][] arrays,boolean referToTaskEntryAttribute) throws DirectoryException {  StringTokenizer st=new StringTokenizer(taskSchedule);  if (st.countTokens() != TASKTAB_NUM_TOKENS) {    if (referToTaskEntryAttribute) {      throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_N_TOKENS.get(ATTR_RECURRING_TASK_SCHEDULE));    } else {      throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_N_TOKENS_SIMPLE.get());    }  }  for (  TaskTab taskTabToken : TaskTab.values()) {    String token=st.nextToken();switch (taskTabToken) {case MINUTE:      try {        arrays[MINUTE_INDEX]=parseTaskTabField(token,0,59);      } catch (      IllegalArgumentException e) {        if (referToTaskEntryAttribute) {          throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_MINUTE_TOKEN.get(ATTR_RECURRING_TASK_SCHEDULE));        } else {          throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_MINUTE_TOKEN_SIMPLE.get());        }      }    break;case HOUR:  try {    arrays[HOUR_INDEX]=parseTaskTabField(token,0,23);  } catch (  IllegalArgumentException e) {    if (referToTaskEntryAttribute) {      throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_HOUR_TOKEN.get(ATTR_RECURRING_TASK_SCHEDULE));    } else {      throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_HOUR_TOKEN_SIMPLE.get());    }  }break;case DAY:try {arrays[DAY_INDEX]=parseTaskTabField(token,1,31);} catch (IllegalArgumentException e) {if (referToTaskEntryAttribute) {  throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_DAY_TOKEN.get(ATTR_RECURRING_TASK_SCHEDULE));} else {  throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_DAY_TOKEN_SIMPLE.get());}}break;case MONTH:try {arrays[MONTH_INDEX]=parseTaskTabField(token,1,12);} catch (IllegalArgumentException e) {if (referToTaskEntryAttribute) {throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_MONTH_TOKEN.get(ATTR_RECURRING_TASK_SCHEDULE));} else {throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_MONTH_TOKEN_SIMPLE.get());}}break;case WEEKDAY:try {arrays[WEEKDAY_INDEX]=parseTaskTabField(token,0,6);} catch (IllegalArgumentException e) {if (referToTaskEntryAttribute) {throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_WEEKDAY_TOKEN.get(ATTR_RECURRING_TASK_SCHEDULE));} else {throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_RECURRINGTASK_INVALID_WEEKDAY_TOKEN_SIMPLE.get());}}break;}}}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader){  if (signed && (xmlString != null)) {    return xmlString;  }  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(SAMLConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefix="";  String libprefix="";  String uri="";  String liburi="";  String uriXSI="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;    libprefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;    if (minorVersion == IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION) {      liburi=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      liburi=IFSConstants.LIB_NAMESPACE_STRING;    }    uriXSI=IFSConstants.XSI_NAMESPACE_STRING;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  xml.append("<").append(prefix).append("Request").append(uri).append(" ").append(liburi).append(" ").append(uriXSI);  if (minorVersion == IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {    if (id != null && !(id.length() == 0)) {      xml.append(" id=\"").append(id).append("\"");    }  }  xml.append(" RequestID=\"").append(requestID).append("\"").append(" MajorVersion=\"").append(majorVersion).append("\"").append(" MinorVersion=\"").append(minorVersion).append("\"").append(" IssueInstant=\"").append(instantString).append("\"");  if (minorVersion == IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {    xml.append(" xsi:type").append("=\"").append(libprefix).append("SignedSAMLRequestType").append("\"");  }  xml.append(">");  if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {    Iterator i=respondWiths.iterator();    String respondWith=null;    while (i.hasNext()) {      respondWith=(String)i.next();      xml.append("<").append(prefix).append("RespondWith>");      if (respondWith.startsWith(SAMLConstants.ASSERTION_PREFIX)) {        xml.append(respondWith);      } else {        try {          xml.append(checkAndGetRespondWith(respondWith));        } catch (        SAMLException e) {          FSUtils.debug.error("Request.toString: ",e);          xml.append(respondWith);        }      }      xml.append("</").append(prefix).append("RespondWith>");    }  }  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  Iterator j;switch (contentType) {case AUTHENTICATION_QUERY:    xml.append(((AuthenticationQuery)query).toString(includeNS,false));  break;case AUTHORIZATION_DECISION_QUERY:xml.append(((AuthorizationDecisionQuery)query).toString(includeNS,false));break;case ATTRIBUTE_QUERY:xml.append(((AttributeQuery)query).toString(includeNS,false));break;case ASSERTION_ID_REFERENCE:j=assertionIDRefs.iterator();while (j.hasNext()) {xml.append(((AssertionIDReference)j.next()).toString(true,true));}break;case ASSERTION_ARTIFACT:j=artifacts.iterator();while (j.hasNext()) {xml.append(((AssertionArtifact)j.next()).toString(includeNS,false));}break;default :break;}xml.append("</").append(prefix).append("Request>");return xml.toString();}  }
class C{  static public void assertEquals(String message,long expected,long actual){  assertEquals(message,new Long(expected),new Long(actual));}  }
class C{  public TaskInstanceHistoryResource(ProcessEngine processEngine){  this.processEngine=processEngine;}  }
class C{  public Object clone(){  IDRepoResponseProvider theClone=null;  try {    theClone=(IDRepoResponseProvider)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (validDynamicAttrNames != null) {    theClone.validDynamicAttrNames=new HashSet();    theClone.validDynamicAttrNames.addAll(validDynamicAttrNames);  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator iter=properties.keySet().iterator();    while (iter.hasNext()) {      Object obj=iter.next();      Set values=new HashSet();      values.addAll((Set)properties.get(obj));      theClone.properties.put(obj,values);    }  }  if (staticResponse != null) {    theClone.staticResponse=new HashMap();    Iterator iter=staticResponse.keySet().iterator();    while (iter.hasNext()) {      Object obj=iter.next();      Set values=new HashSet();      values.addAll((Set)staticResponse.get(obj));      theClone.staticResponse.put(obj,values);    }  }  if (responseAttrNames != null) {    theClone.responseAttrNames=new HashSet();    theClone.responseAttrNames.addAll(responseAttrNames);  }  if (repoAttrNames != null) {    theClone.repoAttrNames=new HashSet();    theClone.repoAttrNames.addAll(repoAttrNames);  }  if (responseAttrToRepoAttr != null) {    theClone.responseAttrToRepoAttr=new HashMap();    Iterator iter=responseAttrToRepoAttr.keySet().iterator();    while (iter.hasNext()) {      Object obj=iter.next();      Set values=new HashSet();      values.addAll((Set)responseAttrToRepoAttr.get(obj));      theClone.responseAttrToRepoAttr.put(obj,values);    }  }  return theClone;}  }
class C{  private boolean topCollide(){  for (  StageBlock sprite : SpriteHandler.getStageElements()) {    Shape intersection=SVGPath.intersect(getSpriteBoundsArray()[0],sprite.getSpriteBounds());    if (intersection.getBoundsInParent().getWidth() != -1) {      if (!Main.bump.isPlaying())       Main.bump.play();      sprite.collide();      breakJump=true;      return true;    }  }  return false;}  }
class C{  protected void startUnfoldAnimation(ArrayList<FoldingCellView> foldingCellElements,ViewGroup foldingLayout,int part90degreeAnimationDuration,AnimationEndListener animationEndListener){  int nextDelay=0;  for (int i=0; i < foldingCellElements.size(); i++) {    FoldingCellView cell=foldingCellElements.get(i);    cell.setVisibility(VISIBLE);    foldingLayout.addView(cell);    if (i != 0) {      FoldAnimation foldAnimation=new FoldAnimation(FoldAnimation.FoldAnimationMode.UNFOLD_DOWN,part90degreeAnimationDuration).withStartOffset(nextDelay).withInterpolator(new DecelerateInterpolator());      if (i == foldingCellElements.size() - 1) {        foldAnimation.setAnimationListener(animationEndListener);      }      nextDelay=nextDelay + part90degreeAnimationDuration;      cell.startAnimation(foldAnimation);    }    if (i != foldingCellElements.size() - 1) {      cell.animateFrontView(new FoldAnimation(FoldAnimation.FoldAnimationMode.FOLD_DOWN,part90degreeAnimationDuration).withStartOffset(nextDelay).withInterpolator(new DecelerateInterpolator()));      nextDelay=nextDelay + part90degreeAnimationDuration;    }  }}  }
class C{  @Override public List<Foo> findAll(){  return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public static List<String> findCacheKeysForkey(String key,MemoryCache memoryCache){  List<String> values=new ArrayList<String>();  for (  String k : memoryCache.keys()) {    if (k.startsWith(key)) {      values.add(k);    }  }  return values;}  }
class C{  public IllegalArgumentException(String s){  super(s);}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof CompoundName)) {    throw new ClassCastException("Not a CompoundName");  }  return impl.compareTo(((CompoundName)obj).impl);}  }
class C{  public Hyphenator(String lang,String country,int leftMin,int rightMin,Map<String,String> hyphPathNames){  this(lang,country,leftMin,rightMin);  this.hyphPathNames=hyphPathNames;}  }
class C{  private String checkForTopLevelRealm(String realm){  if (StringUtils.isBlank(realm)) {    return null;  }  if (realm.equalsIgnoreCase(TOP_LEVEL_REALM)) {    return FORWARD_SLASH;  } else {    return realm;  }}  }
class C{  public void addBaseDNToSearch(DN dn){  baseDNs.add(dn);}  }
class C{  public AffineTransform(double[] flatmatrix){  m00=flatmatrix[0];  m10=flatmatrix[1];  m01=flatmatrix[2];  m11=flatmatrix[3];  if (flatmatrix.length > 5) {    m02=flatmatrix[4];    m12=flatmatrix[5];  }  updateState();}  }
class C{  public static Foo fetchByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_First(uuid,orderByComparator);}  }
class C{  public static synchronized void reInitializeAuthServices(){  AUTH_TYPES.clear();  GLOBAL_MODULE_NAMES.clear();  initAuthenticationService();}  }
class C{  public DeviceCode(JsonValue token) throws InvalidGrantException {  super(token);  if (!OAuth2Constants.DeviceCode.DEVICE_CODE.equals(getTokenName()) || getTokenId() == null || getUserCode() == null || getClientId() == null) {    throw new InvalidGrantException();  }}  }
class C{  @SuppressWarnings("unchecked") public void writeShort(short x) throws SQLException {  attribs.add(Short.valueOf(x));}  }
class C{  protected void installDefaults(){  LookAndFeel.installColorsAndFont(comboBox,"ComboBox.background","ComboBox.foreground","ComboBox.font");  LookAndFeel.installBorder(comboBox,"ComboBox.border");  LookAndFeel.installProperty(comboBox,"opaque",Boolean.TRUE);  Long l=(Long)UIManager.get("ComboBox.timeFactor");  timeFactor=l == null ? 1000L : l.longValue();  Boolean b=(Boolean)UIManager.get("ComboBox.squareButton");  squareButton=b == null ? true : b;  padding=UIManager.getInsets("ComboBox.padding");}  }
class C{  @Override public Context createSubcontext(String name) throws NamingException {  return getBoundContext().createSubcontext(parseName(name));}  }
class C{  public CredentialException(){  super();}  }
class C{  public TextLayoutStrategy(){  text=new AttributedSegment();}  }
class C{  public final void testGetMessageDigest(){  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      DigestInputStream dis=new DigestInputStream(null,md);      assertTrue(dis.getMessageDigest() == md);      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public RDNTag(){}  }
class C{  public boolean isLong(STypeDef requiredType,NumberLiteral literal,LineCol lineCol) throws SyntaxException {  return (requiredType == null || requiredType instanceof LongTypeDef || (requiredType instanceof SClassDef) && requiredType.isAssignableFrom(getTypeWithName("java.lang.Long",lineCol))) && !literal.literal().contains(".");}  }
class C{  @Override public void flush() throws IOException {  try {    out.flush();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  public void testMac03() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      Mac.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      Mac.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }    for (int j=1; j < invalidValues.length; j++) {      try {        Mac.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public void reuse_entries_after_cutout(BrdTracep p_from_trace,BrdTracep p_start_piece,BrdTracep p_end_piece){  for (  AwtreeShapeSearch curr_tree : search_trees) {    curr_tree.reuse_entries_after_cutout(p_from_trace,p_start_piece,p_end_piece);  }}  }
class C{  public void treeCollapsed(TreeExpansionEvent event){  getHandler().treeCollapsed(event);}  }
class C{  public static SimpleBindRequest newSimpleBindRequest(final String name,final byte[] password){  Reject.ifNull(name,password);  return new SimpleBindRequestImpl(name,password);}  }
class C{  private Node.JspBody findJspBody(Node parent){  Node.JspBody result=null;  Node.Nodes subelements=parent.getBody();  for (int i=0; (subelements != null) && (i < subelements.size()); i++) {    Node n=subelements.getNode(i);    if (n instanceof Node.JspBody) {      result=(Node.JspBody)n;      break;    }  }  return result;}  }
class C{  @Override public void close() throws IOException {  InputStream input=m_streams.get();  if (null != input) {    input.close();  }}  }
class C{  public String createOrganization(String orgName,String domainName,Map attrMap,Map serviceNamesAndAttrs) throws AMException, SSOException {  String subOrgName=orgName;  StringBuilder subOrgDNSB=new StringBuilder();  subOrgDNSB.append(AMNamingAttrManager.getNamingAttr(ORGANIZATION));  subOrgDNSB.append("=").append(subOrgName).append(",");  subOrgDNSB.append(super.entryDN);  AMOrganizationImpl subOrgImpl=new AMOrganizationImpl(super.token,subOrgDNSB.toString());  Set domSet=new HashSet();  domSet.add(domainName);  if (attrMap == null) {    attrMap=new HashMap();  }  attrMap.put("sunPreferredDomain",domSet);  subOrgImpl.setAttributes(attrMap);  if (serviceNamesAndAttrs != null && !serviceNamesAndAttrs.isEmpty()) {    Set sNames=serviceNamesAndAttrs.keySet();    subOrgImpl.setAttribute(SERVICE_STATUS_ATTRIBUTE,sNames);    subOrgImpl.assignServices(serviceNamesAndAttrs,false);  }  subOrgImpl.create();  return subOrgImpl.getDN();}  }
class C{  private void examineCompletedOperation(CompareOperation compareOperation){  assertTrue(compareOperation.getProcessingStartTime() > 0);  assertTrue(compareOperation.getProcessingStopTime() > 0);  assertTrue(compareOperation.getProcessingTime() >= 0);  ensurePostReponseHasRun();}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  public PlaDirection opposite(){  return new PlaDirection(-dir_x,-dir_y,is_NaN);}  }
class C{  protected void sendSessions(Member sender,Session[] currentSessions,long sendTimestamp) throws IOException {  byte[] data=serializeSessions(currentSessions);  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.receiveMessage.unloadingAfter",getName()));  }  SessionMessage newmsg=new SessionMessageImpl(name,SessionMessage.EVT_ALL_SESSION_DATA,data,"SESSION-STATE","SESSION-STATE-" + getName());  newmsg.setTimestamp(sendTimestamp);  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.createMessage.allSessionData",getName()));  }  counterSend_EVT_ALL_SESSION_DATA++;  cluster.send(newmsg,sender);}  }
class C{  public String str(){  if (null == m_strCache)   m_strCache=new String((char[])m_obj,m_start,m_length);  return m_strCache;}  }
class C{  public boolean checkPlayerCollided(){  Shape intersection=SVGPath.intersect(getSpriteBoundsArray()[5],SpriteHandler.getCurrentCast().get(1).getSpriteBoundsArray()[5]);  return intersection.getBoundsInParent().getWidth() != -1;}  }
class C{  public int length(){  return count;}  }
class C{  private boolean isValidKey(Object key){  if (key == null)   return false;  Class<?> keyClass=key.getClass();  return keyClass == keyType || keyClass.getSuperclass() == keyType;}  }
class C{  public double angle(Pnt p){  return Math.acos(this.dot(p) / (this.magnitude() * p.magnitude()));}  }
class C{  public FrameBodyASPI(){}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  super.addPropertyChangeListener(listener);}  }
class C{  private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){  if (imageSize < viewSize) {    m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;  } else   if (trans > 0) {    m[axis]=-((imageSize - viewSize) * 0.5f);  } else {    float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;    m[axis]=-((percentage * imageSize) - (viewSize * 0.5f));  }}  }
class C{  public boolean isIdle(){  return (currentState == idleState);}  }
class C{  public final void testGetSystemScope(){  String name=Security.getProperty("system.scope");  assertNotNull(name);  IdentityScope scope=IdentityScope.getSystemScope();  assertNotNull(scope);  assertEquals(name,scope.getClass().getName());}  }
class C{  ElemDesc(int flags){  m_flags=flags;}  }
class C{  public Set createUsers(Set userNames) throws AMException, SSOException {  Set usersSet=new HashSet();  String parentOrgDN=getOrganizationDN();  AMOrganizationImpl parentOrg=new AMOrganizationImpl(super.token,parentOrgDN);  Set serviceNames=parentOrg.getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);  Set objectClasses=null;  if ((serviceNames != null) && (!serviceNames.isEmpty())) {    objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);  }  Iterator iter=userNames.iterator();  while (iter.hasNext()) {    StringBuilder userDNSB=new StringBuilder();    userDNSB.append(AMNamingAttrManager.getNamingAttr(USER)).append("=").append((String)iter.next()).append(",").append(super.entryDN);    AMUserImpl user=new AMUserImpl(super.token,userDNSB.toString());    if (objectClasses != null && !objectClasses.isEmpty()) {      user.setAttribute("objectclass",objectClasses);    }    user.create();    usersSet.add(user);  }  return usersSet;}  }
class C{  private static int findBytes(ByteChunk bc,byte[] b){  byte first=b[0];  byte[] buff=bc.getBuffer();  int start=bc.getStart();  int end=bc.getEnd();  int srcEnd=b.length;  for (int i=start; i <= (end - srcEnd); i++) {    if (Ascii.toLower(buff[i]) != first) {      continue;    }    int myPos=i + 1;    for (int srcPos=1; srcPos < srcEnd; ) {      if (Ascii.toLower(buff[myPos++]) != b[srcPos++]) {        break;      }      if (srcPos == srcEnd) {        return i - start;      }    }  }  return -1;}  }
class C{  public TextImpl replaceWithText(){  TextImpl replacement=new TextImpl(document,getData());  parent.insertBefore(replacement,this);  parent.removeChild(this);  return replacement;}  }
class C{  public ConnectionParameters ldapSecurePort(int port){  ldapsPort=port;  return this;}  }
class C{  public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  public final void testF0Value(){  assertEquals(3,RSAKeyGenParameterSpec.F0.intValue());}  }
class C{  public boolean isMimeTypeSerializedObject(){  return isMimeTypeEqual(javaSerializedObjectMimeType);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Rdn)) {    return false;  }  Rdn that=(Rdn)obj;  if (entries.size() != that.size()) {    return false;  }  for (int i=0; i < entries.size(); i++) {    if (!entries.get(i).equals(that.entries.get(i))) {      return false;    }  }  return true;}  }
class C{  public Request createRequest(){  Request request=new Request();  request.setConnector(this);  return (request);}  }
class C{  public static String sphinxify(String comment){  comment=CommentPatterns.BACK_QUOTE_PATTERN.matcher(comment).replaceAll("``");  comment=comment.replace("\"","\\\"");  comment=sphinxifyProtoMarkdownLinks(comment);  comment=sphinxifyAbsoluteMarkdownLinks(comment);  return sphinxifyCloudMarkdownLinks(comment).trim();}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId){  return fetchByUUID_G(uuid,groupId,true);}  }
class C{  public AwesomeViewHolder(int layoutResId,ViewGroup mViewGroup){  super(LayoutInflater.from(mViewGroup.getContext()).inflate(layoutResId,mViewGroup,false));  construct();}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  protected static Map mergeMaps(Map mapA,Map mapB){  if (mapA == null && mapB == null) {    return null;  }  if (mapA == null || mapA.isEmpty()) {    return mapB;  } else   if (mapB == null || mapB.isEmpty()) {    return mapA;  }  Map bigMap=((mapA.size() > mapB.size()) ? mapA : mapB);  Map smallMap=((mapA.size() <= mapB.size()) ? mapA : mapB);  Iterator itr=smallMap.keySet().iterator();  while (itr.hasNext()) {    String attrName=(String)itr.next();    Set values=(Set)bigMap.get(attrName);    if (values != null) {      values.addAll((Set)smallMap.get(attrName));    } else {      bigMap.put(attrName,(Set)smallMap.get(attrName));    }  }  return bigMap;}  }
class C{  private void append(ByteStringBuilder buffer,Iterable<Attribute> attributes,boolean isOperational){  for (  Attribute a : attributes) {    if (a.getAttributeDescription().getAttributeType().isOperational() != isOperational) {      break;    }    buffer.appendBytes(getBytes(a.getAttributeDescription().toString()));    buffer.appendByte(0x00);    buffer.appendBERLength(a.size());    for (    ByteString v : a) {      buffer.appendBERLength(v.length());      buffer.appendBytes(v);    }  }}  }
class C{  public void mouseReleased(MouseEvent e){  ((MouseListener)a).mouseReleased(e);  ((MouseListener)b).mouseReleased(e);}  }
class C{  public ServiceConfig createOrganizationConfig(String orgName,Map attrs) throws SMSException, SSOException {  validateSSM();  ServiceSchemaImpl ss=ssm.getSchema(SchemaType.ORGANIZATION);  if (ss == null) {    String[] args={serviceName};    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-service-does-not-have-org-schema",args));  }  String orgdn=DNMapper.orgNameToDN(orgName);  CreateServiceConfig.checkBaseNodesForOrg(token,orgdn,serviceName,version);  String orgDN=scm.constructServiceConfigDN(SMSUtils.DEFAULT,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);  try {    CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,orgDN);    if (cEntry.isDirty()) {      cEntry.refresh();    }    if (cEntry.isNewEntry()) {      CreateServiceConfig.createSubConfigEntry(token,orgDN,ss,null,null,attrs,orgName);      if (ServiceManager.isCoexistenceMode()) {        String smsDN=DNMapper.orgNameToDN(orgName);        OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(smsDN),smsDN);        amsdk.assignService(serviceName);      }    } else     if (attrs != null && !attrs.isEmpty()) {      ServiceConfig sc=getOrganizationConfig(orgName,null);      sc.setAttributes(attrs);    }  } catch (  ServiceAlreadyExistsException slee) {  }  return (getOrganizationConfig(orgName,null));}  }
class C{  public LoginModuleSample() throws LoginException {  System.out.println("LoginModuleSample()");}  }
class C{  public void deleteField(ID3v23FieldKey id3v23FieldKey) throws KeyNotFoundException {  if (id3v23FieldKey == null) {    throw new KeyNotFoundException();  }  super.doDeleteTagField(new FrameAndSubId(id3v23FieldKey.getFrameId(),id3v23FieldKey.getSubId()));}  }
class C{  protected void closeStartTag() throws SAXException {  if (m_elemContext.m_startTagOpen) {    try {      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      m_writer.write('>');    } catch (    IOException e) {      throw new SAXException(e);    }    if (m_CdataElems != null)     m_elemContext.m_isCdataSection=isCdataSection();    if (m_doIndent) {      m_isprevtext=false;      m_preserves.push(m_ispreserve);    }  }}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String o=SAMLUtilsCommon.makeStartElementTagXML("Subject",includeNS,declareNS);  xml.append(o).append(sc.NL);  if (_nameIdentifier != null) {    xml.append(_nameIdentifier.toString(includeNS,false));  }  if (_subjectConfirmation != null) {    xml.append(_subjectConfirmation.toString(includeNS,false));  }  o=SAMLUtilsCommon.makeEndElementTagXML("Subject",includeNS);  xml.append(o);  return xml.toString();}  }
class C{  public synchronized <T>void sendEvent(T event){  RXBusEventIsNullException.checkEvent(event);  SerializedSubject subject=getSubject(event.getClass(),false);  if (subject != null)   subject.onNext(event);}  }
class C{  public String toString(){  return actionName + "=" + values;}  }
class C{  public void endElement() throws SAXException {  writePendingText();  String uri=getCurrentElementUri();  String local=getCurrentElementLocal();  String prefix=nsContext.getPrefix(uri);  _assert(prefix != null);  String qname;  if (prefix.length() != 0)   qname=prefix + ':' + local; else   qname=local;  writer.endElement(uri,local,qname);  nsContext.iterateDeclaredPrefixes(endPrefixCallback);  popElement();  textBuf.setLength(0);  nsContext.endElement();}  }
class C{  private List<Entitlement> evaluate(String realm) throws EntitlementException {  final Debug debug=PolicyConstants.DEBUG;  final SubjectAttributesManager sam=SubjectAttributesManager.getInstance(adminSubject,realm);  final Set<String> subjectIndexes=sam.getSubjectSearchFilter(subject,applicationName);  final PrivilegeIndexStore indexStore=PrivilegeIndexStore.getInstance(adminSubject,realm);  final Iterator<IPrivilege> policyIterator=indexStore.search(realm,indexes,subjectIndexes,recursive);  int totalCount=0;  IPrivilege policy;  final Set<IPrivilege> localBatch=new HashSet<IPrivilege>(2 * TASKS_PER_THREAD);  while (totalCount < TASKS_PER_THREAD && policyIterator.hasNext()) {    policy=policyIterator.next();    if (policy instanceof ReferralPrivilege) {      continue;    }    if (debug.messageEnabled()) {      debug.message("[PolicyEval] PolicyEvaluator.evaluate");      debug.message("[PolicyEval] search result: privilege=" + policy.getName());    }    localBatch.add(policy);    totalCount++;  }  final PrivilegeEvaluatorContext context=new PrivilegeEvaluatorContext(realm,normalisedResourceName,applicationName);  final Object appToken=AppTokenHandler.getAndClear();  final Set<IPrivilege> threadBatch=new HashSet<IPrivilege>(2 * TASKS_PER_THREAD);  boolean tasksSubmitted=false;  while (policyIterator.hasNext()) {    tasksSubmitted=true;    policy=policyIterator.next();    if (policy instanceof ReferralPrivilege) {      continue;    }    if (debug.messageEnabled()) {      debug.message("[PolicyEval] PolicyEvaluator.evaluate");      debug.message("[PolicyEval] search result: privilege=" + policy.getName());    }    threadBatch.add(policy);    totalCount++;    if (threadBatch.size() == TASKS_PER_THREAD) {      final Set<IPrivilege> copiedBatch=new HashSet<IPrivilege>(threadBatch);      threadPool.submit(new PrivilegeTask(this,copiedBatch,isMultiThreaded,appToken,context));      threadBatch.clear();    }  }  if (!threadBatch.isEmpty()) {    threadPool.submit(new PrivilegeTask(this,threadBatch,isMultiThreaded,appToken,context));  }  final Runnable localTask=new PrivilegeTask(this,localBatch,tasksSubmitted,appToken,context);  localTask.run();  if (tasksSubmitted) {    if (isMultiThreaded) {      receiveEvalResults(totalCount);    } else {      boolean isDone=false;      while (!resultQ.isEmpty() && !isDone) {        entitlementCombiner.add(resultQ.remove(0));        isDone=entitlementCombiner.isDone();      }    }  } else   if (eException == null) {    boolean isDone=false;    while (!resultQ.isEmpty() && !isDone) {      entitlementCombiner.add(resultQ.remove(0));      isDone=entitlementCombiner.isDone();    }  }  if (eException != null) {    throw eException;  }  return entitlementCombiner.getResults();}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  private void ensureCapacity(int numMappings){  int newCapacity=Collections.roundUpToPowerOfTwo(capacityForInitSize(numMappings));  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (newCapacity <= oldCapacity) {    return;  }  if (newCapacity == oldCapacity * 2) {    doubleCapacity();    return;  }  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size != 0) {    int newMask=newCapacity - 1;    for (int i=0; i < oldCapacity; i++) {      for (HashMapEntry<K,V> e=oldTable[i]; e != null; ) {        HashMapEntry<K,V> oldNext=e.next;        int newIndex=e.hash & newMask;        HashMapEntry<K,V> newNext=newTable[newIndex];        newTable[newIndex]=e;        e.next=newNext;        e=oldNext;      }    }  }}  }
class C{  public int hashCode(){  return hash;}  }
class C{  public void onResume(){  super.onResume();  readTickEvent();}  }
class C{  public static void logErrorMessage(String msgIdName,String data[],SSOToken token) throws SSOException {  try {    if (msgProvider == null) {      msgProvider=MessageProviderFactory.getProvider("Policy");    }  } catch (  IOException e) {    debug.error("PolicyUtils.logErrorMessage()",e);    debug.error("PolicyUtils.logAccessMessage():" + "disabling logging");    logStatus=false;  }  if ((errorLogger != null) && (msgProvider != null)) {    LogRecord lr=msgProvider.createLogRecord(msgIdName,data,token);    if (lr != null) {      SSOToken ssoToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());      errorLogger.log(lr,ssoToken);    }  }}  }
class C{  public void auditAccessGranted(String resource,String action,String authzModule,SSOToken token){  init();  if (authzLogger != null && msgProvider != null) {    final LogRecord record=msgProvider.createLogRecord("ACCESS_GRANT",new String[]{"GRANT > " + resource,action,authzModule},token);    if (record != null) {      authzLogger.log(record,AccessController.doPrivileged(AdminTokenAction.getInstance()));    }  }}  }
class C{  public void runTest() throws Throwable {  String localName="nomatch";  String namespaceURI="http://www.usa.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  public static boolean isDynamicProfile(String realm){  String profileAttribute=getProfileAttribute(realm);  return DYNAMIC_PROFILE.equalsIgnoreCase(profileAttribute) || CREATE_ALIAS_PROFILE.equalsIgnoreCase(profileAttribute);}  }
class C{  public Builder attributes(Collection<String> attributeOIDs){  this.attributeOIDs.addAll(attributeOIDs);  return this;}  }
class C{  protected void forwardUpdateToView(View v,DocumentEvent e,Shape a,ViewFactory f){  v.setParent(this);  super.forwardUpdateToView(v,e,a,f);}  }
class C{  public XPathType(String expression,Filter filter){  if (expression == null) {    throw new NullPointerException("expression cannot be null");  }  if (filter == null) {    throw new NullPointerException("filter cannot be null");  }  this.expression=expression;  this.filter=filter;  this.nsMap=Collections.emptyMap();}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  System.out.println("Got an INVITE  " + request);  try {    System.out.println("shootme: got an Invite sending OK");    Response response=messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ";transport="+ transport+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      System.out.println("This is a RE INVITE ");      if (st.getDialog() != dialog) {        System.out.println("Whoopsa Daisy Dialog Mismatch");        System.exit(0);      }    }    System.out.println("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      ContentTypeHeader contentTypeHeader=headerFactory.createContentTypeHeader("application","sdp");      System.out.println("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      System.out.println("Dialog " + dialog);      System.out.println("Dialog state " + dialog.getState());    }    st.sendResponse(response);    TransactionExt stExt=(TransactionExt)st;    Certificate[] certs=stExt.getPeerCertificates();    System.out.println("Certs = " + certs);    if (certs != null) {      for (      Certificate cert : certs) {        System.out.println("Cert = " + cert);      }    }    response=messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    this.inviteTid=st;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
