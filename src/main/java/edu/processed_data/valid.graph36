class C{  public IntStack(int blocksize){  super(blocksize);}  }
class C{  public boolean is_automatic_neckdown(){  return automatic_neckdown;}  }
class C{  private void unsubscribeTopics(String token,final String[] topics) throws IOException {  GcmPubSub pubSub=GcmPubSub.getInstance(this);  for (  String topic : topics) {    pubSub.unsubscribe(token,topic);  }}  }
class C{  public static boolean delete(File dir){  return delete(dir,true);}  }
class C{  public static SearchFilter createApproximateFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString assertionValue){  return new SearchFilter(FilterType.APPROXIMATE_MATCH,null,null,attributeType,attributeOptions,assertionValue,null,null,null,null,false);}  }
class C{  public void itemStateChanged(ItemEvent e){  JToggleButton tb=(JToggleButton)e.getSource();  if (JToggleButton.this.accessibleContext != null) {    if (tb.isSelected()) {      JToggleButton.this.accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.CHECKED);    } else {      JToggleButton.this.accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.CHECKED,null);    }  }}  }
class C{  public void _release(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  private static boolean isSpace(char ch){  return XMLCharacterRecognizer.isWhiteSpace(ch);}  }
class C{  public JsonValue build(){  if (BuilderType.JSON_SCHEMA == builderType) {    Reject.ifTrue(properties.isEmpty(),"There must be at least one property");  }  removePropertiesIfEmpty("definitions",jsonValue);  removePropertiesIfEmpty("required",jsonValue);  return jsonValue;}  }
class C{  static String wrap(Object value){  String svalue;  if (value == null || "-".equals(value)) {    return "-";  }  try {    svalue=value.toString();  } catch (  Throwable e) {    ExceptionUtils.handleThrowable(e);    return "-";  }  StringBuilder buffer=new StringBuilder(svalue.length() + 2);  buffer.append('\"');  int i=0;  while (i < svalue.length()) {    int j=svalue.indexOf('\"',i);    if (j == -1) {      buffer.append(svalue.substring(i));      i=svalue.length();    } else {      buffer.append(svalue.substring(i,j + 1));      buffer.append('"');      i=j + 1;    }  }  buffer.append('\"');  return buffer.toString();}  }
class C{  public boolean isInvisible(){  return rect == null || rect.getWidth() == 0 || rect.getHeight() == 0;}  }
class C{  private Handlers(){}  }
class C{  public boolean isNodesetExpr(){  return true;}  }
class C{  public int compareTo(PlaLineInt p_other){  PlaPointInt other_a=p_other.point_a;  PlaPointInt other_b=p_other.point_b;  int dx1=point_b.v_x - point_a.v_x;  int dy1=point_b.v_y - point_a.v_y;  int dx2=other_b.v_x - other_a.v_x;  int dy2=other_b.v_y - other_a.v_y;  if (dy1 > 0) {    if (dy2 < 0) {      return -1;    }    if (dy2 == 0) {      if (dx2 > 0) {        return 1;      }      return -1;    }  } else   if (dy1 < 0) {    if (dy2 >= 0) {      return 1;    }  } else {    if (dx1 > 0) {      if (dy2 != 0 || dx2 < 0) {        return -1;      }      return 0;    }    if (dy2 > 0 || dy2 == 0 && dx2 > 0) {      return 1;    }    if (dy2 < 0) {      return -1;    }    return 0;  }  double determinant=(double)dx2 * dy1 - (double)dy2 * dx1;  return Signum.as_int(determinant);}  }
class C{  public DeviceCmyk(int c,int m,int y,int k){  this(c / 100f,m / 100f,y / 100f,k / 100f);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported03.class,args);}  }
class C{  GregorianCalendar(TimeZone zone,Locale locale,boolean flag){  super(zone,locale);  gdate=(BaseCalendar.Date)gcal.newCalendarDate(getZone());}  }
class C{  private static Object unwrap(Object object){  if (object instanceof Reflect) {    return ((Reflect)object).get();  }  return object;}  }
class C{  public Bidi(char[] text,int textStart,byte[] embeddings,int embStart,int paragraphLength,int flags){  if (text == null) {    throw new IllegalArgumentException("text is null");  }  if (paragraphLength < 0) {    throw new IllegalArgumentException("bad length: " + paragraphLength);  }  if (textStart < 0 || paragraphLength > text.length - textStart) {    throw new IllegalArgumentException("bad range: " + textStart + " length: "+ paragraphLength+ " for text of length: "+ text.length);  }  if (embeddings != null && (embStart < 0 || paragraphLength > embeddings.length - embStart)) {    throw new IllegalArgumentException("bad range: " + embStart + " length: "+ paragraphLength+ " for embeddings of length: "+ text.length);  }  bidiBase=new BidiBase(text,textStart,embeddings,embStart,paragraphLength,flags);}  }
class C{  public boolean isDone(){  return index > arcSegs + lineSegs;}  }
class C{  public RuleAddViewBean(){  super("RuleAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public PrincipalHolder(Principal initial){  value=initial;}  }
class C{  public AnnotationFormatError(String message){  super(message);}  }
class C{  public void change_clearance_class_no(int p_from_no,int p_to_no,java.util.Collection<board.items.BrdItem> p_board_items){  for (  board.items.BrdItem curr_item : p_board_items) {    if (curr_item.clearance_idx() == p_from_no) {      curr_item.set_clearance_idx(p_to_no);    }  }  for (  NetClass curr_net_class : net_classes) {    if (curr_net_class.get_trace_clearance_class() == p_from_no) {      curr_net_class.set_trace_clearance_class(p_to_no);    }    for (    ItemClass curr_item_class : ItemClass.values()) {      if (curr_net_class.default_item_clearance_classes.get(curr_item_class) == p_from_no) {        curr_net_class.default_item_clearance_classes.set(curr_item_class,p_to_no);      }    }  }  for (int index=0; index < via_infos.count(); ++index) {    BrdViaInfo curr_via=via_infos.get(index);    if (curr_via.get_clearance_class() == p_from_no) {      curr_via.set_clearance_class(p_to_no);    }  }}  }
class C{  public LastChangeNumberVirtualAttributeProvider(ReplicationServer replicationServer){  this.replicationServer=replicationServer;}  }
class C{  @Override public void close() throws IOException {  getIOChannel().socket().close();  getIOChannel().close();}  }
class C{  @Override public Collection<PartialToken> nextPage() throws CoreTokenException {  if (Thread.currentThread().isInterrupted()) {    close();    return null;  }  if (failed) {    throw new IllegalStateException();  }  try {    initConnection();    Collection<PartialToken> results=query.nextPage();    endProcessing(results);    return results;  } catch (  CoreTokenException|RuntimeException e) {    failed=true;    close();    throw e;  }}  }
class C{  private void processElement(Element element) throws XACMLException {  if (element == null) {    XACMLSDKUtils.debug.error("ResponseImpl.processElement(): invalid root element");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("invalid_element"));  }  String elemName=element.getLocalName();  if (elemName == null) {    XACMLSDKUtils.debug.error("ResponseImpl.processElement(): local name missing");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("missing_local_name"));  }  if (!elemName.equals(XACMLConstants.OBLIGATIONS)) {    XACMLSDKUtils.debug.error("ResponseImpl.processElement: invalid local name " + elemName);    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("invalid_local_name"));  }  NodeList nodes=element.getChildNodes();  int numOfNodes=nodes.getLength();  int nextElem=0;  while (nextElem < numOfNodes) {    Node child=(Node)nodes.item(nextElem);    if (child.getNodeType() == Node.ELEMENT_NODE) {      String childName=child.getLocalName();      if (childName != null) {        if (childName.equals(XACMLConstants.OBLIGATION)) {          obligations.add(PolicyFactory.getInstance().createObligation((Element)child));        } else {          XACMLSDKUtils.debug.error("ObligationsImpl.processElement(): " + " invalid child element: " + elemName);          throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("invalid_child_name"));        }      }    }    nextElem++;  }}  }
class C{  public boolean displayConfirmation(LocalizableMessage msg,LocalizableMessage title){  return getDialog().displayConfirmation(msg,title);}  }
class C{  static double powerOfTwoD(int n){  assert (n >= DoubleConsts.MIN_EXPONENT && n <= DoubleConsts.MAX_EXPONENT);  return Double.longBitsToDouble((((long)n + (long)DoubleConsts.EXP_BIAS) << (DoubleConsts.SIGNIFICAND_WIDTH - 1)) & DoubleConsts.EXP_BIT_MASK);}  }
class C{  @Override public ShapeTileSimplex to_Simplex(){  if (is_empty())   return ShapeTileSimplex.EMPTY;  ArrayList<PlaLineInt> line_arr=new ArrayList<PlaLineInt>(4);  line_arr.add(new PlaLineInt(box_ll,PlaDirection.RIGHT));  line_arr.add(new PlaLineInt(box_ur,PlaDirection.UP));  line_arr.add(new PlaLineInt(box_ur,PlaDirection.LEFT));  line_arr.add(new PlaLineInt(box_ll,PlaDirection.DOWN));  return new ShapeTileSimplex(line_arr);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.BinarySecurityTokenElement createBinarySecurityTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.BinarySecurityTokenElementImpl();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  ((Expression)m_obj).fixupVariables(vars,globalsSize);}  }
class C{  public String displayStructureAsXML(){  createXMLStructureFormatter();  tagFormatter.openHeadingElement("file",this.getFile().getAbsolutePath());  if (this.getID3v1Tag() != null) {    this.getID3v1Tag().createStructure();  }  if (this.getID3v2Tag() != null) {    this.getID3v2Tag().createStructure();  }  tagFormatter.closeHeadingElement("file");  return tagFormatter.toString();}  }
class C{  public void constrainDrawRect(int left,int top,int right,int bottom){  contentRect.set(left,top,right,bottom);}  }
class C{  private static JScrollPane init_color_table(JTable p_color_table,java.util.Locale p_locale){  JScrollPane scroll_pane=new JScrollPane(p_color_table);  p_color_table.setDefaultRenderer(Color.class,new TableColorRenderer(true));  setUpColorEditor(p_color_table,p_locale);  return scroll_pane;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  EntityServicesViewBean vb=(EntityServicesViewBean)getViewBean(com.sun.identity.console.idm.EntityServicesViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  public void actionPerformed(ActionEvent e){  if (tree != null && lastPath != null) {    tree.startEditingAtPath(lastPath);  }}  }
class C{  private void layoutAttachedAndAppearingViews(RecyclerView.Recycler recycler,RecyclerView.State state){  if (firstChangedPosition >= firstAttachedItemPosition) {    int firstAttachedItemPositionTemp=firstAttachedItemPosition;    int lastAttachedItemPositionTemp=lastAttachedItemPosition;    int[] spanTopTemp=Arrays.copyOf(spanTop,mSpanCount);    int[] spanBottomTemp=Arrays.copyOf(spanBottom,mSpanCount);    topBorder=getPaddingTop();    bottomBorder=getHeight() - getPaddingBottom();    spanBottom=Arrays.copyOf(spanTop,mSpanCount);    updateSpanBottomParameters();    detachAndScrapAttachedViews(recycler);    mCurrentPosition=firstAttachedItemPosition;    lastAttachedItemPosition=firstAttachedItemPosition;    fakeSpanBottomMin=spanBottomMin;    fakeSpanBottomMax=spanBottomMax;    fakeCurrentPosition=mCurrentPosition;    fakeFirstAttachedItemPosition=firstAttachedItemPosition;    fakeFirstOneEmptyBottomSpanIndex=firstOneEmptyBottomSpanIndex;    fakeFirstTwoEmptyBottomSpanIndex=firstTwoEmptyBottomSpanIndex;    fakeSpanTop=Arrays.copyOf(spanTop,mSpanCount);    fakeSpanBottom=Arrays.copyOf(spanBottom,mSpanCount);    fillGridForPreLayout(recycler,state);    firstAttachedItemPosition=firstAttachedItemPositionTemp;    lastAttachedItemPosition=lastAttachedItemPositionTemp;    spanTop=Arrays.copyOf(spanTopTemp,mSpanCount);    spanBottom=Arrays.copyOf(spanBottomTemp,mSpanCount);    updateSpanTopParameters();    updateSpanBottomParameters();  } else {    topBorder=getPaddingTop() - scrollOffset;    Arrays.fill(spanTop,topBorder);    for (int i=0; i < firstChangedPosition; i++) {      for (int j=0; j < itemLayoutWidthCache.get(i); j++) {        int spanIndex=itemOccupiedStartSpan.get(i) + j;        spanTop[spanIndex]+=itemLayoutHeightCache.get(i) * sizePerSpan;      }    }    updateSpanTopParameters();    bottomBorder=getHeight() - getPaddingBottom();    spanBottom=Arrays.copyOf(spanTop,mSpanCount);    updateSpanBottomParameters();    mCurrentPosition=firstChangedPosition;    firstAttachedItemPosition=-1;    lastAttachedItemPosition=-1;    detachAndScrapAttachedViews(recycler);    fakeSpanBottomMin=spanBottomMin;    fakeSpanBottomMax=spanBottomMax;    fakeCurrentPosition=mCurrentPosition;    fakeFirstAttachedItemPosition=firstAttachedItemPosition;    fakeFirstOneEmptyBottomSpanIndex=firstOneEmptyBottomSpanIndex;    fakeFirstTwoEmptyBottomSpanIndex=firstTwoEmptyBottomSpanIndex;    fakeSpanTop=Arrays.copyOf(spanTop,mSpanCount);    fakeSpanBottom=Arrays.copyOf(spanBottom,mSpanCount);    fillGridForPreLayout(recycler,state);    firstAttachedItemPosition=fakeFirstAttachedItemPosition;    spanTop=Arrays.copyOf(fakeSpanTop,mSpanCount);    spanBottom=Arrays.copyOf(fakeSpanBottom,mSpanCount);    updateSpanTopParameters();    updateSpanBottomParameters();  }}  }
class C{  private static void extractAndAddValue(final HttpServletRequest request,final Map<String,List<String>> paramsMap,final String parameterName){  String parameterValue=request.getParameter(parameterName);  insertValue(paramsMap,parameterValue,parameterName);}  }
class C{  protected boolean isSessionStale(Session session,long timeNow){  if (session != null) {    int maxInactiveInterval=session.getMaxInactiveInterval();    if (maxInactiveInterval >= 0) {      int timeIdle=(int)((timeNow - session.getThisAccessedTime()) / 1000L);      if (timeIdle >= maxInactiveInterval) {        return true;      }    }  }  return false;}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  @Override public void updateContents(){  ServerDescriptor server=null;  if (getInfo() != null) {    server=getInfo().getServerDescriptor();  }  SearchResultEntry sr=null;  if (server != null) {    sr=server.getWorkQueueMonitor();  }  if (sr != null) {    updateMonitoringInfo(attributes,monitoringLabels,sr);  } else {    for (    JLabel l : monitoringLabels) {      l.setText(NO_VALUE_SET.toString());    }  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public static void test_diff_getInstanceVariable(){  Target2 target=new Target2();  target.setInstanceMagri(10098);  assertSame(10098,target.instanceMagri);}  }
class C{  public static ScrollPaneBorderListener createBottomBorderListener(JScrollPane scroll){  ScrollPaneBorderListener listener=new ScrollPaneBorderListener();  listener.scroll=scroll;  scroll.getHorizontalScrollBar().addComponentListener(listener);  scroll.getVerticalScrollBar().addComponentListener(listener);  return listener;}  }
class C{  protected void expand(boolean adjustTree){  if (!isExpanded() && !isLeaf()) {    boolean isFixed=isFixedRowHeight();    int startHeight=getPreferredHeight();    int originalRow=getRow();    expanded=true;    updatePreferredSize(originalRow);    if (!hasBeenExpanded) {      TreeStateNode newNode;      Object realNode=getValue();      TreeModel treeModel=getModel();      int count=treeModel.getChildCount(realNode);      hasBeenExpanded=true;      if (originalRow == -1) {        for (int i=0; i < count; i++) {          newNode=createNodeForValue(treeModel.getChild(realNode,i));          this.add(newNode);          newNode.updatePreferredSize(-1);        }      } else {        int offset=originalRow + 1;        for (int i=0; i < count; i++) {          newNode=createNodeForValue(treeModel.getChild(realNode,i));          this.add(newNode);          newNode.updatePreferredSize(offset);        }      }    }    int i=originalRow;    Enumeration cursor=preorderEnumeration();    cursor.nextElement();    int newYOrigin;    if (isFixed)     newYOrigin=0; else     if (this == root && !isRootVisible())     newYOrigin=0; else     newYOrigin=getYOrigin() + this.getPreferredHeight();    TreeStateNode aNode;    if (!isFixed) {      while (cursor.hasMoreElements()) {        aNode=(TreeStateNode)cursor.nextElement();        if (!updateNodeSizes && !aNode.hasValidSize())         aNode.updatePreferredSize(i + 1);        aNode.setYOrigin(newYOrigin);        newYOrigin+=aNode.getPreferredHeight();        visibleNodes.insertElementAt(aNode,++i);      }    } else {      while (cursor.hasMoreElements()) {        aNode=(TreeStateNode)cursor.nextElement();        visibleNodes.insertElementAt(aNode,++i);      }    }    if (adjustTree && (originalRow != i || getPreferredHeight() != startHeight)) {      if (!isFixed && ++i < getRowCount()) {        int counter;        int heightDiff=newYOrigin - (getYOrigin() + getPreferredHeight()) + (getPreferredHeight() - startHeight);        for (counter=visibleNodes.size() - 1; counter >= i; counter--)         ((TreeStateNode)visibleNodes.elementAt(counter)).shiftYOriginBy(heightDiff);      }      didAdjustTree();      visibleNodesChanged();    }    if (treeSelectionModel != null) {      treeSelectionModel.resetRowSelection();    }  }}  }
class C{  public AttributeDesignator(String name,String nameSpace) throws SAMLException {  if (name == null || name.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeDesignator:" + "AttributeName is required!");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  } else {    _attributeName=name;  }  if (nameSpace == null || nameSpace.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeDesignator: " + "AttributeNamespace is required!");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  } else {    _attributeNameSpace=nameSpace;  }}  }
class C{  public int nextStep(RouteInfo plan,RouteInfo fact){  if (plan == null) {    throw new IllegalArgumentException("Planned route may not be null.");  }  int step=UNREACHABLE;  if ((fact == null) || (fact.getHopCount() < 1))   step=firstStep(plan); else   if (plan.getHopCount() > 1)   step=proxiedStep(plan,fact); else   step=directStep(plan,fact);  return step;}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return _fooLocalService.deleteFoo(fooId);}  }
class C{  public void monitorExit(){  mv.visitInsn(Opcodes.MONITOREXIT);}  }
class C{  public Token match(int tok) throws ParseException {  if (Debug.parserDebug) {    Debug.println("match " + tok);  }  if (tok > START && tok < END) {    if (tok == ID) {      if (!startsId())       throw new ParseException(buffer + "\nID expected",ptr);      String id=getNextId();      this.currentMatch=new Token();      this.currentMatch.tokenValue=id;      this.currentMatch.tokenType=ID;    } else     if (tok == SAFE) {      if (!startsSafeToken())       throw new ParseException(buffer + "\nID expected",ptr);      String id=ttokenSafe();      this.currentMatch=new Token();      this.currentMatch.tokenValue=id;      this.currentMatch.tokenType=SAFE;    } else     if (tok == ID_NO_WHITESPACE) {      if (!startsIdNoWhiteSpace())       throw new ParseException(buffer + "\nID no white space expected",ptr);      String id=getNextIdNoWhiteSpace();      this.currentMatch=new Token();      this.currentMatch.tokenValue=id;      this.currentMatch.tokenType=ID_NO_WHITESPACE;    } else {      String nexttok=getNextId();      Integer cur=currentLexer.get(Utils.toUpperCase(nexttok));      if (cur == null || cur.intValue() != tok)       throw new ParseException(buffer + "\nUnexpected Token : " + nexttok,ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=nexttok;      this.currentMatch.tokenType=tok;    }  } else   if (tok > END) {    char next=lookAhead(0);    if (tok == DIGIT) {      if (!isDigit(next))       throw new ParseException(buffer + "\nExpecting DIGIT",ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=String.valueOf(next);      this.currentMatch.tokenType=tok;      consume(1);    } else     if (tok == ALPHA) {      if (!isAlpha(next))       throw new ParseException(buffer + "\nExpecting ALPHA",ptr);      this.currentMatch=new Token();      this.currentMatch.tokenValue=String.valueOf(next);      this.currentMatch.tokenType=tok;      consume(1);    }  } else {    char ch=(char)tok;    char next=lookAhead(0);    if (next == ch) {      consume(1);    } else     throw new ParseException(buffer + "\nExpecting  >>>" + ch+ "<<< got >>>"+ next+ "<<<",ptr);  }  return this.currentMatch;}  }
class C{  InitializeRcvAckMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  if (scanner.nextByte() != MSG_TYPE_INITIALIZE_RCV_ACK) {    throw new DataFormatException("input is not a valid " + getClass().getCanonicalName());  }  senderID=scanner.nextIntUTF8();  destination=scanner.nextIntUTF8();  numAck=scanner.nextIntUTF8();}  }
class C{  public Attribute encodeAndPurge(){  long purgeDate=0;  this.lastPurgedValuesCount=0;  if (purgeDelayInMillisec > 0) {    purgeDate=TimeThread.getTime() - purgeDelayInMillisec;  }  AttributeBuilder builder=new AttributeBuilder(HISTORICAL_ATTRIBUTE_NAME);  for (  Map.Entry<AttributeDescription,AttrHistorical> mapEntry : attributesHistorical.entrySet()) {    AttributeDescription attrDesc=mapEntry.getKey();    String options=attrDesc.toString();    AttrHistorical attrHist=mapEntry.getValue();    CSN deleteTime=attrHist.getDeleteTime();    boolean attrDel=deleteTime != null;    for (    AttrValueHistorical attrValHist : attrHist.getValuesHistorical()) {      final ByteString value=attrValHist.getAttributeValue();      if (attrValHist.getValueDeleteTime() != null) {        if (needsPurge(attrValHist.getValueDeleteTime(),purgeDate)) {          continue;        }        String strValue=encode(DEL,options,attrValHist.getValueDeleteTime(),value);        builder.add(strValue);      } else       if (attrValHist.getValueUpdateTime() != null) {        if (needsPurge(attrValHist.getValueUpdateTime(),purgeDate)) {          continue;        }        String strValue;        final CSN updateTime=attrValHist.getValueUpdateTime();        if (attrDel && updateTime == deleteTime && value != null) {          strValue=encode(REPL,options,updateTime,value);          attrDel=false;        } else         if (value != null) {          strValue=encode(ADD,options,updateTime,value);        } else {          strValue=encode(ADD,options,updateTime);        }        builder.add(strValue);      }    }    if (attrDel) {      if (needsPurge(deleteTime,purgeDate)) {        continue;      }      builder.add(encode(ATTRDEL,options,deleteTime));    }  }  if (entryADDDate != null && !needsPurge(entryADDDate,purgeDate)) {    builder.add(encodeHistorical(entryADDDate,"add"));  }  if (entryMODDNDate != null && !needsPurge(entryMODDNDate,purgeDate)) {    builder.add(encodeHistorical(entryMODDNDate,"moddn"));  }  return builder.toAttribute();}  }
class C{  public static StringArgument filenameArgument(final LocalizableMessage description) throws ArgumentException {  return StringArgument.builder(OPTION_LONG_FILENAME).shortIdentifier(OPTION_SHORT_FILENAME).description(description).valuePlaceholder(INFO_FILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  public static void saveAsGnuStepASCII(NSArray root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toGnuStepASCIIPropertyList());  w.close();}  }
class C{  private void writePendingText() throws SAXException {  int len=textBuf.length();  if (len != 0)   writer.characters(textBuf.toString().toCharArray(),0,len);}  }
class C{  public Identity(String name){  this.name=name;}  }
class C{  public ChangeNumberIndexRecord(long changeNumber,DN baseDN,CSN csn){  this.changeNumber=changeNumber;  this.baseDN=baseDN;  this.csn=csn;}  }
class C{  public EncoderException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  protected void engineSetMode(String mode){  if (!mode.equalsIgnoreCase("ECB")) {    throw new IllegalArgumentException("can't support mode " + mode);  }}  }
class C{  public JToggleButton(String text){  this(text,null,false);}  }
class C{  protected boolean applyFilter(Node node,int nodeType){  if (fFilter != null && (fWhatToShowFilter & nodeType) != 0) {    short code=fFilter.acceptNode(node);switch (code) {case NodeFilter.FILTER_REJECT:case NodeFilter.FILTER_SKIP:      return false;default :  }}return true;}  }
class C{  public void invoke(Context context,Map<String,Object> syncFailure,Exception failureCause) throws SyncHandlerException {  logger.warn("{} liveSync failure on sync-token {} for {}, {} - {}",syncFailure.get("systemIdentifier"),syncFailure.get("token").toString(),syncFailure.get("objectType"),syncFailure.get("uid"),failureCause.toString());}  }
class C{  public void initialize(String pdpEntityId,String pepEntityId,Map properties) throws XACMLException {}  }
class C{  public void write(byte b){  check(1);  buffer[write_pos++]=b;}  }
class C{  public void acceptDrop(int dropAction){  getDropTargetContext().acceptDrop(dropAction);}  }
class C{  public ServerObject(){}  }
class C{  private MutableBigInteger modInverse(MutableBigInteger mod){  MutableBigInteger p=new MutableBigInteger(mod);  MutableBigInteger f=new MutableBigInteger(this);  MutableBigInteger g=new MutableBigInteger(p);  SignedMutableBigInteger c=new SignedMutableBigInteger(1);  SignedMutableBigInteger d=new SignedMutableBigInteger();  MutableBigInteger temp=null;  SignedMutableBigInteger sTemp=null;  int k=0;  if (f.isEven()) {    int trailingZeros=f.getLowestSetBit();    f.rightShift(trailingZeros);    d.leftShift(trailingZeros);    k=trailingZeros;  }  while (!f.isOne()) {    if (f.isZero())     throw new ArithmeticException("BigInteger not invertible.");    if (f.compare(g) < 0) {      temp=f;      f=g;      g=temp;      sTemp=d;      d=c;      c=sTemp;    }    if (((f.value[f.offset + f.intLen - 1] ^ g.value[g.offset + g.intLen - 1]) & 3) == 0) {      f.subtract(g);      c.signedSubtract(d);    } else {      f.add(g);      c.signedAdd(d);    }    int trailingZeros=f.getLowestSetBit();    f.rightShift(trailingZeros);    d.leftShift(trailingZeros);    k+=trailingZeros;  }  while (c.sign < 0)   c.signedAdd(p);  return fixup(c,p,k);}  }
class C{  public void mouseReleased(MouseEvent e){  isBeingPressed=false;}  }
class C{  public EditAuthTypeViewBean(){  super("EditAuthType",DEFAULT_DISPLAY_URL,null);  String type=(String)getPageSessionAttribute(SERVICE_TYPE);  if (type != null) {    String name=getServiceName(type);    if (name == null) {      name=AMAdminConstants.CORE_AUTH_SERVICE;      debug.warning("EditAuthTypeViewBean() " + "The auth instance could not be found. The instance name" + " has been reset to "+ name);    }    initialize(name);  }}  }
class C{  private int handleD(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"DG")) {    if (contains(value,index + 2,1,"I","E","Y")) {      result.append('J');      index+=3;    } else {      result.append("TK");      index+=2;    }  } else   if (contains(value,index,2,"DT","DD")) {    result.append('T');    index+=2;  } else {    result.append('T');    index++;  }  return index;}  }
class C{  public String toString(){  return "[Signer]" + super.toString();}  }
class C{  public AttributeFilter includeAttribute(final String attributeDescription,final Schema schema){  if (attributeDescription.equals("*")) {    includeAllUserAttributes=true;  } else   if (attributeDescription.equals("+")) {    includeAllOperationalAttributes=true;  } else   if (attributeDescription.equals("1.1")) {  } else   if (attributeDescription.startsWith("@") && attributeDescription.length() > 1) {    final String objectClassName=attributeDescription.substring(1);    final ObjectClass objectClass=schema.getObjectClass(objectClassName);    if (!objectClass.isPlaceHolder()) {      allocatedRequestedAttributes();      for (      final AttributeType at : objectClass.getRequiredAttributes()) {        final AttributeDescription ad=AttributeDescription.create(at);        requestedAttributes.put(ad,ad);      }      for (      final AttributeType at : objectClass.getOptionalAttributes()) {        final AttributeDescription ad=AttributeDescription.create(at);        requestedAttributes.put(ad,ad);      }    }  } else {    allocatedRequestedAttributes();    final AttributeDescription ad=AttributeDescription.valueOf(attributeDescription,schema);    requestedAttributes.put(ad,ad);  }  return this;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  logger.info("shootme: local party = " + dialog.getLocalParty());  try {    logger.info("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("shootme: Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    logger.error("UNexpected exception",ex);    fail("UNexpected exception");  }}  }
class C{  public static boolean expectResponseEntityBody(String requestMethod){  return !StringUtils.equals(requestMethod,HEAD);}  }
class C{  SASLBindClientImpl(final SASLBindRequest initialBindRequest){  super(initialBindRequest);  this.saslMechanism=initialBindRequest.getSASLMechanism();}  }
class C{  public UndefinedDefaultBehaviorProvider(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedataend.class,args);}  }
class C{  public int size(){  if (hmap == null) {    return 0;  }  return hmap.size();}  }
class C{  public void write_scope(IndentFileWriter p_file,DsnIdentifier p_identifier_type) throws java.io.IOException {  p_file.start_scope();  p_file.write("path ");  p_identifier_type.write(layer.name,p_file);  p_file.write(" ");  p_file.write((new Double(width)).toString());  int corner_count=coordinate_arr.length / 2;  for (int i=0; i < corner_count; ++i) {    p_file.new_line();    p_file.write(new Double(coordinate_arr[2 * i]).toString());    p_file.write(" ");    p_file.write(new Double(coordinate_arr[2 * i + 1]).toString());  }  p_file.end_scope();}  }
class C{  public long mean(){  return (long)deltaMean.get();}  }
class C{  public JAASCallbackHandler(JAASRealm realm,String username,String password){  this(realm,username,password,null,null,null,null,null,null,null);}  }
class C{  @Override public void contextInitialized(ServletContextEvent event){  this.context=event.getServletContext();  log("contextInitialized()");}  }
class C{  public AMSearchResults searchStaticGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.GROUP),wildcard,avPairs,searchControl);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textindexsizeerrnegativeoffset.class,args);}  }
class C{  public static String readLine(InputStream inputStream,Charset encoding) throws IOException {  byte[] lineBytes=readLineBytes(inputStream);  if (lineBytes == null || lineBytes.length == 0) {    return null;  }  return StringUtils.trim(new String(lineBytes,encoding));}  }
class C{  public void clearQueue(String queueName){synchronized (syncRoot) {    taskQueuesMap.remove(queueName);  }}  }
class C{  public synchronized byte toByteArray()[]{  return Arrays.copyOf(buf,count);}  }
class C{  public Boolean isRequired(){  return required;}  }
class C{  public static Condition and(Condition... conditions){  return new ANDCondition(conditions);}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (decoder != null) {      decoder.reset();    }    decoder=null;    if (in != null) {      in.close();      in=null;    }  }}  }
class C{  protected final void fireChildrenRemoved(BeanContextMembershipEvent bcme){  Object[] copy;synchronized (bcmListeners) {    copy=bcmListeners.toArray();  }  for (int i=0; i < copy.length; i++)   ((BeanContextMembershipListener)copy[i]).childrenRemoved(bcme);}  }
class C{  private LinkedHashSet<DataFlavor> nativeToFlavorLookup(String nat){  LinkedHashSet<DataFlavor> flavors=getNativeToFlavor().get(nat);  if (nat != null && !disabledMappingGenerationKeys.contains(nat)) {    DataTransferer transferer=DataTransferer.getInstance();    if (transferer != null) {      LinkedHashSet<DataFlavor> platformFlavors=transferer.getPlatformMappingsForNative(nat);      if (!platformFlavors.isEmpty()) {        if (flavors != null) {          platformFlavors.addAll(flavors);        }        flavors=platformFlavors;      }    }  }  if (flavors == null && isJavaMIMEType(nat)) {    String decoded=decodeJavaMIMEType(nat);    DataFlavor flavor=null;    try {      flavor=new DataFlavor(decoded);    } catch (    Exception e) {      System.err.println("Exception \"" + e.getClass().getName() + ": "+ e.getMessage()+ "\"while constructing DataFlavor for: "+ decoded);    }    if (flavor != null) {      flavors=new LinkedHashSet<>(1);      getNativeToFlavor().put(nat,flavors);      flavors.add(flavor);      flavorsForNativeCache.remove(nat);      LinkedHashSet<String> natives=getFlavorToNative().get(flavor);      if (natives == null) {        natives=new LinkedHashSet<>(1);        getFlavorToNative().put(flavor,natives);      }      natives.add(nat);      nativesForFlavorCache.remove(flavor);    }  }  return (flavors != null) ? flavors : new LinkedHashSet<>(0);}  }
class C{  public W3CEndpointReferenceBuilder referenceParameter(Element referenceParameter){  if (referenceParameter == null)   throw new java.lang.IllegalArgumentException("The referenceParameter cannot be null.");  referenceParameters.add(referenceParameter);  return this;}  }
class C{  private void loadConfiguration(final File configFile,final Schema schema) throws InitializationException {  try (EntryReader reader=getLDIFReader(configFile,schema)){    backend=new MemoryBackend(schema,reader);  } catch (  IOException e) {    throw new InitializationException(ERR_CONFIG_FILE_GENERIC_ERROR.get(configFile.getAbsolutePath(),e.getCause()),e);  }  rootEntry=backend.get(DN_CONFIG_ROOT);  if (rootEntry == null) {    throw new InitializationException(ERR_CONFIG_FILE_INVALID_BASE_DN.get(configFile.getAbsolutePath(),"",DN_CONFIG_ROOT));  }}  }
class C{  public int countPredicates(int opPos) throws TransformerException {  int count=0;  while (OpCodes.OP_PREDICATE == getOp(opPos)) {    count++;    opPos=getNextOpPos(opPos);  }  return count;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREEN_NEWS\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NEWSLISTJSON\" TEXT);");}  }
class C{  protected synchronized void internalStop(int svc) throws ChannelException {  try {    svc=svc & Channel.DEFAULT;    if (startLevel == 0)     return;    if (svc == 0)     return;    boolean valid=false;    if (Channel.SND_RX_SEQ == (svc & Channel.SND_RX_SEQ)) {      clusterReceiver.stop();      clusterReceiver.setMessageListener(null);      valid=true;    }    if (Channel.SND_TX_SEQ == (svc & Channel.SND_TX_SEQ)) {      clusterSender.stop();      valid=true;    }    if (Channel.MBR_RX_SEQ == (svc & Channel.MBR_RX_SEQ)) {      membershipService.stop(MembershipService.MBR_RX);      membershipService.setMembershipListener(null);      valid=true;    }    if (Channel.MBR_TX_SEQ == (svc & Channel.MBR_TX_SEQ)) {      valid=true;      membershipService.stop(MembershipService.MBR_TX);    }    if (!valid) {      throw new IllegalArgumentException(sm.getString("channelCoordinator.invalid.startLevel"));    }    startLevel=(startLevel & (~svc));    setChannel(null);  } catch (  Exception x) {    throw new ChannelException(x);  }}  }
class C{  public EventLog(long id,long timestamp,String appName,String eventName,String parameters,String text){  super(id,timestamp,text);  this.appName=appName;  this.eventName=eventName;  this.parameters=parameters;}  }
class C{  public static void redirectAuthentication(HttpServletRequest request,HttpServletResponse response,String realm,String hostEntityID,String entityRole) throws IOException {  String method="redirectAuthentication: ";  String authUrl=SAML2Utils.getAttributeValueFromSSOConfig(realm,hostEntityID,entityRole,SAML2Constants.AUTH_URL);  if ((authUrl == null) || (authUrl.trim().length() == 0)) {    String uri=request.getRequestURI();    String deploymentURI=uri;    int firstSlashIndex=uri.indexOf("/");    int secondSlashIndex=uri.indexOf("/",firstSlashIndex + 1);    if (secondSlashIndex != -1) {      deploymentURI=uri.substring(0,secondSlashIndex);    }    StringBuffer sb=new StringBuffer();    sb.append(request.getScheme()).append("://").append(request.getServerName()).append(":").append(request.getServerPort()).append(deploymentURI).append("/UI/Login?realm=").append(realm);    authUrl=sb.toString();  }  if (authUrl.indexOf("?") == -1) {    authUrl+="?goto=";  } else {    authUrl+="&goto=";  }  authUrl+=URLEncDec.encode(request.getRequestURL().toString() + "?" + request.getQueryString());  if (debug.messageEnabled()) {    debug.message(method + "New URL for authentication: " + authUrl);  }  FSUtils.forwardRequest(request,response,authUrl);}  }
class C{  public String toString(){  StringBuffer uriSpecString=new StringBuffer();  if (m_scheme != null) {    uriSpecString.append(m_scheme);    uriSpecString.append(':');  }  uriSpecString.append(getSchemeSpecificPart());  return uriSpecString.toString();}  }
class C{  private static Period create(int years,int months,int days){  if ((years | months | days) == 0) {    return ZERO;  }  return new Period(years,months,days);}  }
class C{  public static void parseTaskTab(String taskSchedule) throws DirectoryException {  parseTaskTab(taskSchedule,new boolean[][]{null,null,null,null,null},false);}  }
class C{  public SyncProviderException(SyncResolver syncResolver){  if (syncResolver == null) {    throw new IllegalArgumentException("Cannot instantiate a SyncProviderException " + "with a null SyncResolver object");  } else {    this.syncResolver=syncResolver;  }}  }
class C{  public static String threadStacksToString(){  Map<Thread,StackTraceElement[]> threadStacks=Thread.getAllStackTraces();  Map<Long,Map.Entry<Thread,StackTraceElement[]>> orderedStacks=new TreeMap<>();  for (  Map.Entry<Thread,StackTraceElement[]> e : threadStacks.entrySet()) {    orderedStacks.put(e.getKey().getId(),e);  }  final StringBuilder buffer=new StringBuilder();  for (  Map.Entry<Thread,StackTraceElement[]> e : orderedStacks.values()) {    Thread t=e.getKey();    StackTraceElement[] stackElements=e.getValue();    long id=t.getId();    buffer.append("id=");    buffer.append(id);    buffer.append(" ---------- ");    buffer.append(t.getName());    buffer.append(" ----------");    buffer.append(EOL);    if (stackElements != null) {      for (      StackTraceElement stackElement : stackElements) {        buffer.append("   ").append(stackElement.getClassName());        buffer.append(".");        buffer.append(stackElement.getMethodName());        buffer.append("(");        buffer.append(stackElement.getFileName());        buffer.append(":");        if (stackElement.isNativeMethod()) {          buffer.append("native");        } else {          buffer.append(stackElement.getLineNumber());        }        buffer.append(")").append(EOL);      }    }    buffer.append(EOL);  }  return buffer.toString();}  }
class C{  public MetadataDescriptor createCopy(){  final MetadataDescriptor result=new MetadataDescriptor(this.containerType,this.name,this.descriptorType,this.streamNumber,this.languageIndex);  result.content=getRawData();  return result;}  }
class C{  public boolean startsWith(String prefix){  return startsWith(prefix,0);}  }
class C{  public static String toString(int[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public CanceledOperationException(CancelRequest cancelRequest,LocalizableMessage message){  super(message);  this.cancelRequest=cancelRequest;}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  private synchronized int readRecordLength() throws IOException {  if (in.getPos() >= end) {    return -1;  }  int length=in.readInt();  if (sync != null && length == SYNC_ESCAPE) {    in.readFully(syncCheck);    if (!Arrays.equals(sync,syncCheck)) {      throw new IOException("File is corrupt!");    }    syncSeen=true;    if (in.getPos() >= end) {      return -1;    }    length=in.readInt();  } else {    syncSeen=false;  }  return length;}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public static final Query createTestQuery(){  Query query=new Query();  query.setWhere("myindexedfield = 'thisismyfield'");  query.setDatabase(Fixtures.DB);  query.setTable("mytable");  return query;}  }
class C{  protected void clearAllData(SSOTokenID tokenID){  boolean removed=false;  String key=tokenID.toString();synchronized (mapTokenIDs) {    removed=(mapTokenIDs.remove(key) != null);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  acks++;  if (acks == 5) {    try {      System.out.println("shootme: got an ACK! ");      System.out.println("Dialog State = " + dialog.getState());      SipProvider provider=(SipProvider)requestEvent.getSource();      Request messageRequest=dialog.createRequest(Request.MESSAGE);      CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);      ClientTransaction ct=provider.getNewClientTransaction(messageRequest);      cseq.setSeqNumber(1);      ct.sendRequest();    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  private RecordProperties(){}  }
class C{  public boolean isDebugEnabled(){  return (getLogger().isLoggable(Level.FINE));}  }
class C{  private void updateContents(){  if (javaArguments.getInitialMemory() > 0) {    tfInitialMemory.setText(String.valueOf(javaArguments.getInitialMemory()));  } else {    tfInitialMemory.setText("");  }  if (javaArguments.getMaxMemory() > 0) {    tfMaxMemory.setText(String.valueOf(javaArguments.getMaxMemory()));  } else {    tfMaxMemory.setText("");  }  if (javaArguments.getAdditionalArguments() != null) {    StringBuilder sb=new StringBuilder();    for (    String arg : javaArguments.getAdditionalArguments()) {      if (sb.length() > 0) {        sb.append(" ");      }      sb.append(arg);    }    tfOtherArguments.setText(sb.toString());  } else {    tfOtherArguments.setText("");  }}  }
class C{  private Operation retryNextOperation(ParallelWorkerThread workerThread,int numFailures){  if (killThreads) {synchronized (queueLock) {      try {        int currentThreads=workerThreads.size();        if (currentThreads > numWorkerThreads) {          if (workerThreads.remove(Thread.currentThread())) {            currentThreads--;          }          if (currentThreads <= numWorkerThreads) {            killThreads=false;          }          workerThread.setStoppedByReducedThreadNumber();          return null;        }      } catch (      Exception e) {        logger.traceException(e);      }    }  }  if (shutdownRequested || numFailures > MAX_RETRY_COUNT) {    if (numFailures > MAX_RETRY_COUNT) {      logger.error(ERR_CONFIG_WORK_QUEUE_TOO_MANY_FAILURES,Thread.currentThread().getName(),numFailures,MAX_RETRY_COUNT);    }    return null;  }  try {    while (true) {      Operation nextOperation=null;      if (queueSemaphore.tryAcquire(5,TimeUnit.SECONDS)) {        nextOperation=opQueue.poll();      }      if (nextOperation == null) {        if (shutdownRequested) {          return null;        } else         if (killThreads) {synchronized (queueLock) {            try {              int currentThreads=workerThreads.size();              if (currentThreads > numWorkerThreads) {                if (workerThreads.remove(Thread.currentThread())) {                  currentThreads--;                }                if (currentThreads <= numWorkerThreads) {                  killThreads=false;                }                workerThread.setStoppedByReducedThreadNumber();                return null;              }            } catch (            Exception e) {              logger.traceException(e);            }          }        }      } else {        return nextOperation;      }    }  } catch (  Exception e) {    logger.traceException(e);    logger.warn(WARN_WORKER_WAITING_UNCAUGHT_EXCEPTION,Thread.currentThread().getName(),e);    return retryNextOperation(workerThread,numFailures + 1);  }}  }
class C{  public boolean isValid(File file){  try {    validateRootDirectory(file);    return true;  } catch (  IllegalArgumentException e) {    return false;  }}  }
class C{  public ForwardRelationshipValidator(RelationshipProvider relationshipProvider){  super(relationshipProvider);}  }
class C{  public AuditRequestContext copy(){  return new AuditRequestContext(transactionId,properties);}  }
class C{  public KeyEntryID(){  fValue=UUID.randomUUID();}  }
class C{  public static void reset(){  instance.setAttributes.clear();  instance.removeAttributes.clear();  instance.addObjectClasses.clear();  instance.removeObjectClasses.clear();  instance.modifications.clear();}  }
class C{  public StartSessionMsg(ServerStatus status,Collection<String> referralsURLs,boolean assuredFlag,AssuredMode assuredMode,byte safeDataLevel){  this.referralsURLs.addAll(referralsURLs);  this.status=status;  this.assuredFlag=assuredFlag;  this.assuredMode=assuredMode;  this.safeDataLevel=safeDataLevel;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.ProtocolProfileElement createProtocolProfileElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.ProtocolProfileElementImpl();}  }
class C{  @POST @Consumes("application/json") @Produces("application/json") public Response createToken(@Context HttpHeaders headers,@Context HttpServletRequest request,String msgBody){  String newTokenId=null;  JSONObject json=null;  try {    json=new JSONObject(msgBody);    String tokenVal=CoreTokenStoreFactory.getInstance().createToken(CoreTokenUtils.getAdminSubject(),json);    JSONObject jObj=new JSONObject(tokenVal);    newTokenId=jObj.getJSONArray(CoreTokenConstants.TOKEN_ID).getString(0);    Response.ResponseBuilder builder=Response.status(201);    builder.entity(tokenVal);    builder.type("application/json");    builder.header("Location",request.getRequestURL() + "/" + newTokenId);    Response retResponse=builder.build();    String[] data=new String[]{json.getJSONArray(CoreTokenConstants.TOKEN_TYPE).toString(),json.getJSONArray(CoreTokenConstants.TOKEN_SUBJECT).toString(),json.names().toString()};    TokenLogUtils.access(Level.INFO,TokenLogUtils.TOKEN_CREATE_SUCCESS,data,null,newTokenId);    return retResponse;  } catch (  JSONException ex) {    CoreTokenUtils.debug.error("CoreTokenResource.createToken",ex);    String[] data=null;    if (json != null) {      try {        data=new String[]{ex.getLocalizedMessage(),json.getJSONArray(CoreTokenConstants.TOKEN_TYPE).toString(),json.getJSONArray(CoreTokenConstants.TOKEN_SUBJECT).toString(),json.names().toString()};      } catch (      JSONException ex1) {      }    } else {      data=new String[]{ex.getLocalizedMessage(),"","",""};    }    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_CREATE_TOKEN,data,null,newTokenId);    throw getWebApplicationException(ex,MimeType.PLAIN);  }catch (  CoreTokenException ce) {    CoreTokenUtils.debug.error("CoreTokenResource.createToken",ce);    String[] data=null;    if (json != null) {      try {        data=new String[]{ce.getLocalizedMessage(),json.getJSONArray(CoreTokenConstants.TOKEN_TYPE).toString(),json.getJSONArray(CoreTokenConstants.TOKEN_SUBJECT).toString(),json.names().toString()};      } catch (      JSONException ex1) {      }    } else {      data=new String[]{ce.getLocalizedMessage(),"","",""};    }    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_CREATE_TOKEN,data,null,newTokenId);    throw getWebApplicationException(headers,ce);  }}  }
class C{  public static int startAgent(SSOServerMonConfig monConfig){  monHtmlPort=monConfig.htmlPort;  monSnmpPort=monConfig.snmpPort;  monRmiPort=monConfig.rmiPort;  monitoringEnabled=monConfig.monitoringEnabled;  monHtmlPortEnabled=monConfig.monHtmlPortEnabled;  monSnmpPortEnabled=monConfig.monSnmpPortEnabled;  monRmiPortEnabled=monConfig.monRmiPortEnabled;  monAuthFilePath=monConfig.monAuthFilePath;  policyWindow=monConfig.policyWindow;  sessionWindow=monConfig.sessionWindow;  String classMethod="Agent.startAgent:";  String serverPort=agentSvrInfo.serverPort;  if ((monAuthFilePath != null) && (monAuthFilePath.endsWith("opensso_mon_auth"))) {    File monAuthFile=new File(monAuthFilePath);    File newMonAuthFile=new File(monAuthFile.getParentFile() + "/" + "openam_mon_auth");    if (monAuthFile.renameTo(newMonAuthFile)) {      monAuthFilePath=newMonAuthFile.getAbsolutePath();    }  }  if (debug.messageEnabled()) {    debug.message(classMethod + "entry:\n" + "    htmlPort = "+ monHtmlPort+ "\n"+ "    authFilePath = "+ monAuthFilePath+ "\n"+ "    snmpPort = "+ monSnmpPort+ "\n"+ "    rmiPort = "+ monRmiPort+ "\n"+ "    monEna = "+ monitoringEnabled+ "\n"+ "    htmlEna = "+ monHtmlPortEnabled+ "\n"+ "    snmpEna = "+ monSnmpPortEnabled+ "\n"+ "    rmiEna = "+ monRmiPortEnabled+ "\n"+ "    policyWindow = "+ policyWindow+ "\n"+ "    sessionWindow = "+ sessionWindow+ "\n"+ "    serverPort = "+ serverPort+ "\n");  }  if (!monitoringEnabled) {    debug.warning(classMethod + "Monitoring configured as disabled.");    return MON_CONFIG_DISABLED;  }  try {    int sport=Integer.parseInt(serverPort);    if (monRmiPort == sport) {      debug.error(classMethod + "RMI port conflicts with OpenSSO server port (" + sport+ "); Monitoring disabled.");      return MON_RMICONNECTOR_PROBLEM;    }    if (monHtmlPort == sport) {      monHtmlPortEnabled=false;      if (debug.warningEnabled()) {        debug.warning(classMethod + "HTML port conflicts with OpenSSO server port (" + sport+ "); Monitoring HTML port disabled.");      }    }    if (monSnmpPort == sport) {      monSnmpPortEnabled=false;      if (debug.warningEnabled()) {        debug.warning(classMethod + "SNMP port conflicts with OpenSSO server port (" + sport+ "); Monitoring SNMP port disabled.");      }    }  } catch (  NumberFormatException nfe) {    debug.error(classMethod + "Server port (" + serverPort+ " is invalid: "+ nfe.getMessage());  }  if (debug.messageEnabled()) {    debug.message(classMethod + "config:\n" + "    monitoring Enabled = "+ monitoringEnabled+ "\n"+ "    HTML Port = "+ monHtmlPort+ ", enabled = "+ monHtmlPortEnabled+ "\n"+ "    SNMP Port = "+ monSnmpPort+ ", enabled = "+ monSnmpPortEnabled+ "\n"+ "    RMI Port = "+ monRmiPort+ ", enabled = "+ monRmiPortEnabled+ "\n"+ "    SessionWindow size = "+ sessionWindow+ "\n"+ "    PolicyWindow size = "+ policyWindow+ "\n");  }  List<MBeanServer> servers=null;  try {    servers=MBeanServerFactory.findMBeanServer(null);  } catch (  SecurityException ex) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "findMBeanServer permission error: " + ex.getMessage());    }  }  if (debug.messageEnabled()) {    debug.message(classMethod + "MBeanServer list is not empty: " + ((servers != null) && !servers.isEmpty()));  }  if ((servers != null) && !servers.isEmpty()) {    server=servers.get(0);  } else {    try {      server=MBeanServerFactory.createMBeanServer();    } catch (    SecurityException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "createMBeanServer permission error: " + ex.getMessage());      }      return MON_MBEANSRVR_PROBLEM;    }catch (    JMRuntimeException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "createMBeanServer JMRuntime error: " + ex.getMessage());      }      return MON_MBEANSRVR_PROBLEM;    }catch (    ClassCastException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "createMBeanServer ClassCast error: " + ex.getMessage());      }      return MON_MBEANSRVR_PROBLEM;    }  }  if (server == null) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "no MBeanServer");    }    return MON_MBEANSRVR_PROBLEM;  }  String domain=server.getDefaultDomain();  try {    sunMibObjName=new ObjectName("snmp:class=SUN_OPENSSO_SERVER_MIB");    forgerockCtsMibObjName=new ObjectName("snmp:class=FORGEROCK_OPENAM_CTS_MIB");    forgerockPolicyMibObjName=new ObjectName("snmp:class=FORGEROCK_OPENAM_POLICY_MIB");    forgerockSessionMibObjName=new ObjectName("snmp:class=FORGEROCK_OPENAM_SESSION_MIB");    if (debug.messageEnabled()) {      debug.message(classMethod + "Adding SUN_OPENSSO_SERVER_MIB to MBean server " + "with name '"+ sunMibObjName+ "'");      debug.message(classMethod + "Adding FORGEROCK_OPENAM_CTS_MIB to MBean server " + "with name '"+ forgerockCtsMibObjName+ "'");    }  } catch (  MalformedObjectNameException ex) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "Error getting ObjectName for the MIB: " + ex.getMessage());    }    return MON_CREATEMIB_PROBLEM;  }  try {    sunMib=new SUN_OPENSSO_SERVER_MIBImpl();    forgerockCtsMib=new FORGEROCK_OPENAM_CTS_MIBImpl();    forgerockPolicyMib=new FORGEROCK_OPENAM_POLICY_MIBImpl();    forgerockSessionMib=new FORGEROCK_OPENAM_SESSION_MIBImpl();  } catch (  RuntimeException ex) {    debug.error(classMethod + "Runtime error instantiating MIB",ex);    return MON_CREATEMIB_PROBLEM;  }catch (  Exception ex) {    debug.error(classMethod + "Error instantiating MIB",ex);    return MON_CREATEMIB_PROBLEM;  }  try {    server.registerMBean(sunMib,sunMibObjName);    server.registerMBean(forgerockCtsMib,forgerockCtsMibObjName);    server.registerMBean(forgerockPolicyMib,forgerockPolicyMibObjName);    server.registerMBean(forgerockSessionMib,forgerockSessionMibObjName);  } catch (  RuntimeOperationsException ex) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "Null parameter or no object name for MIB specified: " + ex.getMessage());    }    return MON_CREATEMIB_PROBLEM;  }catch (  InstanceAlreadyExistsException ex) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "Error registering MIB MBean: " + ex.getMessage());    }  }catch (  MBeanRegistrationException ex) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "Error registering MIB MBean: " + ex.getMessage());    }    return MON_CREATEMIB_PROBLEM;  }catch (  NotCompliantMBeanException ex) {    if (debug.warningEnabled()) {      debug.warning(classMethod + "Error registering MIB MBean: " + ex.getMessage());    }    return MON_CREATEMIB_PROBLEM;  }  boolean monHTMLStarted=false;  boolean monSNMPStarted=false;  boolean monRMIStarted=false;  if (monHtmlPortEnabled) {    try {      htmlObjName=new ObjectName(domain + ":class=HtmlAdaptorServer,protocol=html,port=" + monHtmlPort);      if (debug.messageEnabled()) {        debug.message(classMethod + "Adding HTML adaptor to MBean server with name '" + htmlObjName+ "'\n    "+ "HTML adaptor is bound on TCP port "+ monHtmlPort);      }      Map<String,String> users=MonitoringUtil.getMonAuthList(monAuthFilePath);      if (users != null) {        AuthInfo authInfo[]=new AuthInfo[users.size()];        int i=0;        for (        Map.Entry<String,String> entry : users.entrySet()) {          authInfo[i]=new AuthInfo(entry.getKey(),entry.getValue());          i++;        }        htmlAdaptor=new HtmlAdaptorServer(monHtmlPort,authInfo);      } else {        if (debug.warningEnabled()) {          debug.warning(classMethod + "HTML monitoring interface disabled; no " + "authentication file found");        }        htmlAdaptor=null;      }      if (htmlAdaptor == null) {        if (debug.warningEnabled()) {          debug.warning(classMethod + "HTTP port " + monHtmlPort+ " unavailable or invalid. "+ "Monitoring HTML adaptor not started.");        }      } else {        server.registerMBean(htmlAdaptor,htmlObjName);        htmlAdaptor.start();        monHTMLStarted=true;      }    } catch (    MalformedObjectNameException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error getting ObjectName for HTML adaptor: " + ex.getMessage());      }    }catch (    NullPointerException ex) {      debug.error(classMethod + "NPE getting ObjectName for HTML adaptor",ex);      if (debug.warningEnabled()) {        debug.warning(classMethod + "NPE getting ObjectName for HTML adaptor: " + ex.getMessage());      }    }catch (    InstanceAlreadyExistsException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error registering HTML adaptor MBean: " + ex.getMessage());      }    }catch (    MBeanRegistrationException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error registering HTML adaptor MBean: " + ex.getMessage());      }    }catch (    NotCompliantMBeanException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error registering HTML adaptor MBean: " + ex.getMessage());      }    }  } else {    debug.warning(classMethod + "Monitoring HTML port not enabled in configuration.");  }  if (monSnmpPortEnabled) {    try {      snmpObjName=new ObjectName(domain + ":class=SnmpAdaptorServer,protocol=snmp,port=" + monSnmpPort);      if (debug.messageEnabled()) {        debug.message(classMethod + "Adding SNMP adaptor to MBean server with name '" + snmpObjName+ "'\n    "+ "SNMP Adaptor is bound on UDP port "+ monSnmpPort);      }      snmpAdaptor=new SnmpAdaptorServer(monSnmpPort);      if (snmpAdaptor == null) {        if (debug.warningEnabled()) {          debug.warning(classMethod + "Unable to get SNMP adaptor.");        }      } else {        server.registerMBean(snmpAdaptor,snmpObjName);        snmpAdaptor.start();        if (debug.messageEnabled()) {          debug.message(classMethod + "Sending a coldStart SNMP trap to each " + "destination defined in the ACL file...");        }        snmpAdaptor.setTrapPort(new Integer(monSnmpPort + 1));        snmpAdaptor.snmpV1Trap(0,0,null);        if (debug.messageEnabled()) {          debug.message(classMethod + "Done sending coldStart.");        }        sunMib.setSnmpAdaptor(snmpAdaptor);        forgerockCtsMib.setSnmpAdaptor(snmpAdaptor);        forgerockPolicyMib.setSnmpAdaptor(snmpAdaptor);        forgerockSessionMib.setSnmpAdaptor(snmpAdaptor);        monSNMPStarted=true;      }    } catch (    Exception ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error while setting up SNMP adaptor " + ex.getMessage());      }      if (ex instanceof IOException || ex instanceof SnmpStatusException) {        monSNMPStarted=true;      }    }  } else {    debug.warning(classMethod + "Monitoring SNMP port not enabled.");  }  if (monRmiPortEnabled) {    try {      registry=LocateRegistry.createRegistry(monRmiPort);      JMXServiceURL url=new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:" + monRmiPort + "/server");      cs=JMXConnectorServerFactory.newJMXConnectorServer(url,null,server);      cs.start();      monRMIStarted=true;    } catch (    MalformedURLException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error getting JMXServiceURL or JMXConnectorServer " + "for RMI adaptor: "+ ex.getMessage());      }    }catch (    NullPointerException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error getting JMXServiceURL or JMXConnectorServer " + "for RMI adaptor: "+ ex.getMessage());      }    }catch (    IOException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Error getting JMXConnectorServer for, or starting " + "RMI adaptor: "+ ex.getMessage());      }    }catch (    IllegalStateException ex) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "Illegal State Error from JMXConnectorServer for " + "RMI adaptor: "+ ex.getMessage());      }    }catch (    Exception ex) {      debug.error(classMethod + "Error starting RMI: executing rmiregistry " + monRmiPort+ ".",ex);    }  } else {    debug.warning(classMethod + "Monitoring RMI port not enabled.");  }  if (!monRMIStarted && !monSNMPStarted && !monHTMLStarted) {    debug.warning(classMethod + "No Monitoring interfaces started; monitoring disabled.");    return MON_RMICONNECTOR_PROBLEM;  } else {    agentStarted=true;    startMonitoringAgent(agentSvrInfo);    return 0;  }}  }
class C{  @Override public int validateGlobalOptions(LocalizableMessageBuilder buf){  if (!noPromptArg.isPresent() && forceOnErrorArg.isPresent()) {    final LocalizableMessage message=ERR_UNINSTALL_FORCE_REQUIRES_NO_PROMPT.get(forceOnErrorArg.getLongIdentifier(),noPromptArg.getLongIdentifier());    if (buf.length() > 0) {      buf.append(LINE_SEPARATOR);    }    buf.append(message);  }  appendErrorMessageIfArgumentsConflict(buf,removeAllArg,removeServerLibrariesArg);  appendErrorMessageIfArgumentsConflict(buf,removeAllArg,removeDatabasesArg);  appendErrorMessageIfArgumentsConflict(buf,removeAllArg,removeLogFilesArg);  appendErrorMessageIfArgumentsConflict(buf,removeAllArg,removeConfigurationFilesArg);  appendErrorMessageIfArgumentsConflict(buf,removeAllArg,removeBackupFilesArg);  appendErrorMessageIfArgumentsConflict(buf,removeAllArg,removeLDIFFilesArg);  super.validateGlobalOptions(buf);  if (buf.length() > 0) {    return ReturnCode.CONFLICTING_ARGS.get();  }  return ReturnCode.SUCCESS.get();}  }
class C{  public static void sendResponseWithStatus(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String idpMetaAlias,String idpEntityID,String realm,AuthnRequest authnReq,String relayState,String spEntityID,String firstlevelStatusCodeValue,String secondlevelStatusCodeValue) throws SAML2Exception {  Response res=SAML2Utils.getErrorResponse(authnReq,firstlevelStatusCodeValue,secondlevelStatusCodeValue,null,idpEntityID);  StringBuffer returnedBinding=new StringBuffer();  String acsURL=IDPSSOUtil.getACSurl(spEntityID,realm,authnReq,request,returnedBinding);  String acsBinding=returnedBinding.toString();  sendResponse(request,response,out,acsBinding,spEntityID,idpEntityID,idpMetaAlias,realm,relayState,acsURL,res,null);}  }
class C{  @Inject public SAML2CTSPersistentStore(CTSPersistentStore persistentStore,TokenAdapter<SAMLToken> tokenAdapter,TokenIdFactory tokenIdFactory,@Named(CoreTokenConstants.CTS_DEBUG) Debug debug){  this.persistentStore=persistentStore;  this.tokenAdapter=tokenAdapter;  this.tokenIdFactory=tokenIdFactory;  this.debug=debug;  if (debug.messageEnabled()) {    debug.message("SAML2CTSPersistentStore instance created using persistentStore:" + persistentStore.getClass().getName() + ", tokenAdapter:"+ tokenAdapter.getClass().getName()+ " and tokenIdFactory: "+ tokenIdFactory.getClass().getName());  }}  }
class C{  public static VariableModification<byte[]> delete(final int startPosition,final int count){  return new ByteArrayDeleteModification(startPosition,count);}  }
class C{  public static void usage(){  System.out.println("Tribes MapDemo.");  System.out.println("Usage:\n\t" + "java MapDemo [channel options] mapName\n\t" + "\tChannel options:"+ ChannelCreator.usage());}  }
class C{  public boolean doesPackageExist(){  return (countPackages(true) > 0);}  }
class C{  protected SSLEngineResult handshakeWrap() throws IOException {  netOutBuffer.clear();  getBufHandler().configureWriteBufferForRead();  SSLEngineResult result=sslEngine.wrap(getBufHandler().getWriteBuffer(),netOutBuffer);  netOutBuffer.flip();  handshakeStatus=result.getHandshakeStatus();  return result;}  }
class C{  public Set<String> stringPropertyNames(){  Hashtable<String,String> h=new Hashtable<>();  enumerateStringProperties(h);  return h.keySet();}  }
class C{  public void delete(SSOToken token,String objName) throws SMSException, SSOException {  if ((objName == null) || (objName.length() == 0)) {    throw new IllegalArgumentException("SMSFlatFileObject.delete: object name is null or empty.");  }  String objKey=objName.toLowerCase();  String filepath=null;  mRWLock.readRequest();  try {    filepath=mNameMap.getProperty(objKey);    if ((filepath == null) && mDebug.messageEnabled()) {      mDebug.message("SMSFlatFileObject.delete: " + objName + ": object not found.");    }  }  finally {    mRWLock.readDone();  }  if (filepath != null) {    mRWLock.writeRequest();    try {      filepath=mNameMap.getProperty(objKey);      if (filepath == null) {        if (mDebug.messageEnabled()) {          mDebug.message("SMSFlatFileObject.delete: " + objName + ": object not found.");        }      } else {        File filehandle=new File(filepath);        File parentDir=filehandle.getParentFile();        deleteDir(parentDir);        objName=objName.toLowerCase();        Enumeration keysEnum=mNameMap.keys();        while (keysEnum.hasMoreElements()) {          String key=(String)keysEnum.nextElement();          if (key.endsWith(objName)) {            mNameMap.remove(key);          }        }        saveProperties(mNameMap,mNameMapHandle,null);      }    }  finally {      mRWLock.writeDone();    }  }}  }
class C{  public SessionResponse parseXML() throws SessionException {  if (document == null) {    return null;  }  Element elem=document.getDocumentElement();  sessionResponse=new SessionResponse();  String temp=elem.getAttribute("vers");  sessionResponse.setResponseVersion(temp);  temp=elem.getAttribute("reqid");  sessionResponse.setRequestID(temp);  NodeList nodelist=elem.getElementsByTagName("GetSession");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setMethodID(SessionRequest.GetSession);  }  nodelist=elem.getElementsByTagName("GetActiveSessions");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setMethodID(SessionRequest.GetValidSessions);  }  nodelist=elem.getElementsByTagName("DestroySession");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setMethodID(SessionRequest.DestroySession);  }  nodelist=elem.getElementsByTagName("Logout");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setMethodID(SessionRequest.Logout);  }  nodelist=elem.getElementsByTagName("AddSessionListener");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setMethodID(SessionRequest.AddSessionListener);  }  nodelist=elem.getElementsByTagName("SetProperty");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setMethodID(SessionRequest.SetProperty);  }  nodelist=elem.getElementsByTagName("GetSessionCount");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setMethodID(SessionRequest.GetSessionCount);  }  nodelist=elem.getElementsByTagName("SessionExpirationTimeInfo");  if (nodelist != null && nodelist.getLength() != 0) {    parseAllSessionsGivenUUIDElements(nodelist);  }  nodelist=elem.getElementsByTagName("Session");  if (nodelist != null && nodelist.getLength() != 0) {    parseSessionElements(nodelist);  }  nodelist=elem.getElementsByTagName("OK");  if (nodelist != null && nodelist.getLength() != 0) {    sessionResponse.setBooleanFlag(true);  }  nodelist=elem.getElementsByTagName("Exception");  if (nodelist != null && nodelist.getLength() != 0) {    Element exception=(Element)nodelist.item(0);    sessionResponse.setException(SessionRequestParser.parseCDATA(exception));  }  nodelist=elem.getElementsByTagName("Status");  if (nodelist != null && nodelist.getLength() != 0) {    String status=SessionRequestParser.parseCDATA((Element)nodelist.item(0));    try {      sessionResponse.setStatus(Integer.parseInt(status));    } catch (    NumberFormatException e) {      SessionRequestParser.debug.error("SessionResponseParse : ",e);      throw new SessionException(e.getMessage());    }  }  return sessionResponse;}  }
class C{  private <P>void encodeProperty(Attribute attribute,PropertyDefinition<P> propertyDef){  PropertyValueVisitor<Object,Void> visitor=new ValueEncoder();  Property<P> property=getProperty(propertyDef);  if (propertyDef.hasOption(PropertyOption.MANDATORY)) {    for (    P value : property.getEffectiveValues()) {      attribute.add(propertyDef.accept(visitor,value,null));    }  } else {    for (    P value : property.getPendingValues()) {      attribute.add(propertyDef.accept(visitor,value,null));    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        textNode=doc.createCDATASection("terday");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    textNode=doc.createCDATASection("terday");{      boolean success=false;      try {        retval=titleAttr.appendChild(textNode);      } catch (      DOMException ex) {        success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);      }      assertTrue("throw_HIERARCHY_REQUEST_ERR",success);    }  }}  }
class C{  public static int mainExportLDIF(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  ExportLDIF tool=new ExportLDIF();  return tool.process(args,initializeServer,outStream,errStream);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private void subscribeTopics(String token) throws IOException {  GcmPubSub pubSub=GcmPubSub.getInstance(this);  for (  String topic : TOPICS) {    pubSub.subscribe(token,"/topics/" + topic,null);  }}  }
class C{  public ApplicationContext(StandardContext context){  super();  this.context=context;  this.service=((Engine)context.getParent().getParent()).getService();  this.sessionCookieConfig=new ApplicationSessionCookieConfig(context);  populateSessionTrackingModes();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String[] params={};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_DATASTORE_TYPES",params);  try {    Map labelToName=getIDRepoTypesMap();    if ((labelToName != null) && !labelToName.isEmpty()) {      getOutputWriter().printlnMessage(getResourceString("datastore-list-datastore-types-succeeded"));      getOutputWriter().printlnMessage(FormatUtils.formatMap(getResourceString("datastore-list-datastore-types-desc"),getResourceString("datastore-list-datastore-types-type"),labelToName));    } else {      getOutputWriter().printlnMessage(getResourceString("datastore-list-datastore-types-no-entries"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_LIST_DATASTORE_TYPES",params);  } catch (  SMSException e) {    debugError("ListDataStores.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_DATASTORE_TYPES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("ListDataStores.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_DATASTORE_TYPES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  ErrorMsg(byte[] in,short version) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_ERROR) {    throw new DataFormatException("input is not a valid " + getClass().getCanonicalName());  }  senderID=scanner.nextIntUTF8();  destination=scanner.nextIntUTF8();  msgID=scanner.nextString();  details=LocalizableMessage.raw(scanner.nextString());  if (version >= ProtocolVersion.REPLICATION_PROTOCOL_V4) {    creationTime=scanner.nextLongUTF8();  }}  }
class C{  @Override public void run(){  try {    Connection con=get();    con.close();  } catch (  ExecutionException ex) {  }catch (  Exception x) {    ConnectionPool.log.error("Unable to cancel ConnectionFuture.",x);  }}  }
class C{  protected void showSystemMenu(){}  }
class C{  public E removeLast(){  final Node<E> l=last;  if (l == null)   throw new NoSuchElementException();  return unlinkLast(l);}  }
class C{  public boolean empty(){  return m_firstFree == 0;}  }
class C{  protected byte[] digestJarFile(String hashAlg,InputStream in){  JarInputStream jin=null;  try {    jin=new JarInputStream(in);    JarEntry je=null;    MessageDigest md=MessageDigest.getInstance(hashAlg);    while ((je=jin.getNextJarEntry()) != null) {      if (!je.isDirectory()) {        md=Utils.hashing(md,jin);      }      jin.closeEntry();    }    jin.close();    return md.digest();  } catch (  IOException ex) {    ex.printStackTrace();  }catch (  NoSuchAlgorithmException ex) {    ex.printStackTrace();  } finally {    if (jin != null) {      try {        jin.close();      } catch (      IOException ignored) {      }      jin=null;    }  }  return null;}  }
class C{  private void processSynchPostOperationPlugins(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      provider.doPostOperation(this);    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_DELETE_SYNCH_POSTOP_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return;    }  }}  }
class C{  public synchronized <T>Observable<T> observeEvent(Class<T> eventClass){  RXBusEventIsNullException.checkEvent(eventClass);  SerializedSubject subject=getSubject(eventClass,true);  return subject;}  }
class C{  public long seed(){  return seed;}  }
class C{  public static final Index createTestBankIndexApprovedOn(){  Index lastname=new Index("approvedon");  lastname.isUnique(false);  ArrayList<IndexField> fields=new ArrayList<>(1);  fields.add(new IndexField("boardapprovaldate",FieldDataType.DATE_TIME));  lastname.setFields(fields);  lastname.setTable(Fixtures.createTestWorldBankTable());  return lastname;}  }
class C{  public static ECDomainParameters readECParameters(InputStream input) throws IOException {  NamedCurve[] namedCurves=NamedCurve.values();  ECPointFormat[] poinFormats=ECPointFormat.values();  return readECParameters(namedCurves,poinFormats,input);}  }
class C{  public FieldFrameBodyUnsupported(){}  }
class C{  public static String escapeXml(String s){  if (s == null) {    return null;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '<') {      sb.append("&lt;");    } else     if (c == '>') {      sb.append("&gt;");    } else     if (c == '\'') {      sb.append("&apos;");    } else     if (c == '&') {      sb.append("&amp;");    } else     if (c == '"') {      sb.append("&quot;");    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public NotQueryExp(QueryExp q){  exp=q;}  }
class C{  public boolean mustReindex(AbstractIndexDescriptor index){  for (  AbstractIndexDescriptor i : modifiedIndexes) {    if (i.getName().equals(index.getName()) && i.getBackend().getBackendID().equals(index.getBackend().getBackendID())) {      return true;    }  }  return false;}  }
class C{  public static Set<LDAPURL> prioritizeServers(Set<String> servers,String hostServerId,String hostSiteId){  Set<LDAPURL> ldapServers=new LinkedHashSet<LDAPURL>(servers.size());  Set<LDAPURL> serverDefined=new LinkedHashSet<LDAPURL>(servers.size());  Set<LDAPURL> siteDefined=new LinkedHashSet<LDAPURL>(servers.size());  Set<LDAPURL> nonMatchingServers=new LinkedHashSet<LDAPURL>(servers.size());  for (  String server : servers) {    StringTokenizer tokenizer=new StringTokenizer(server,"|");    String ldapUrl=tokenizer.nextToken();    String assignedServerId="";    String assignedSiteId="";    if (tokenizer.hasMoreTokens()) {      assignedServerId=tokenizer.nextToken();    }    if (tokenizer.hasMoreTokens()) {      assignedSiteId=tokenizer.nextToken();    }    if (!assignedServerId.isEmpty() && assignedServerId.equals(hostServerId)) {      serverDefined.add(LDAPURL.valueOf(ldapUrl));    } else     if (!assignedSiteId.isEmpty() && assignedSiteId.equals(hostSiteId)) {      siteDefined.add(LDAPURL.valueOf(ldapUrl));    } else {      nonMatchingServers.add(LDAPURL.valueOf(ldapUrl));    }  }  ldapServers.addAll(serverDefined);  ldapServers.addAll(siteDefined);  ldapServers.addAll(nonMatchingServers);  return ldapServers;}  }
class C{  public void testReset() throws InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  byte[] bbuf={(byte)5,(byte)4,(byte)3,(byte)2,(byte)1};  byte[] bb1;  byte[] bb2;  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    bb1=macs[i].doFinal();    macs[i].reset();    bb2=macs[i].doFinal();    assertEquals("incorrect result",bb1.length,bb2.length);    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }    macs[i].reset();    macs[i].update(bbuf);    bb1=macs[i].doFinal();    macs[i].reset();    macs[i].update(bbuf,0,bbuf.length);    bb2=macs[i].doFinal();    assertEquals("incorrect result",bb1.length,bb2.length);    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }  }}  }
class C{  public static String normalize(String strURL){  URL url=null;  try {    url=new URL(strURL);  } catch (  MalformedURLException e) {    return strURL;  }  String protocol=url.getProtocol();  String host=url.getHost();  String path=url.getPath();  int port=url.getPort();  String sPort;  if (port == -1) {    sPort=protocol.equals("https") ? "443" : "80";  } else {    sPort=Integer.toString(port);  }  return protocol + "://" + host+ ":"+ sPort+ path;}  }
class C{  public JLabel(String text,Icon icon,int horizontalAlignment){  setText(text);  setIcon(icon);  setHorizontalAlignment(horizontalAlignment);  updateUI();  setAlignmentX(LEFT_ALIGNMENT);}  }
class C{  public boolean applyTemplateToNode(ElemTemplateElement xslInstruction,ElemTemplate template,int child) throws TransformerException {  DTM dtm=m_xcontext.getDTM(child);  short nodeType=dtm.getNodeType(child);  boolean isDefaultTextRule=false;  boolean isApplyImports=false;  isApplyImports=((xslInstruction == null) ? false : xslInstruction.getXSLToken() == Constants.ELEMNAME_APPLY_IMPORTS);  if (null == template || isApplyImports) {    int maxImportLevel, endImportLevel=0;    if (isApplyImports) {      maxImportLevel=template.getStylesheetComposed().getImportCountComposed() - 1;      endImportLevel=template.getStylesheetComposed().getEndImportCountComposed();    } else {      maxImportLevel=-1;    }    if (isApplyImports && (maxImportLevel == -1)) {      template=null;    } else {      XPathContext xctxt=m_xcontext;      try {        xctxt.pushNamespaceContext(xslInstruction);        QName mode=this.getMode();        if (isApplyImports)         template=m_stylesheetRoot.getTemplateComposed(xctxt,child,mode,maxImportLevel,endImportLevel,m_quietConflictWarnings,dtm); else         template=m_stylesheetRoot.getTemplateComposed(xctxt,child,mode,m_quietConflictWarnings,dtm);      }  finally {        xctxt.popNamespaceContext();      }    }    if (null == template) {switch (nodeType) {case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.ELEMENT_NODE:        template=m_stylesheetRoot.getDefaultRule();      break;case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:case DTM.ATTRIBUTE_NODE:    template=m_stylesheetRoot.getDefaultTextRule();  isDefaultTextRule=true;break;case DTM.DOCUMENT_NODE:template=m_stylesheetRoot.getDefaultRootRule();break;default :return false;}}}try {pushElemTemplateElement(template);m_xcontext.pushCurrentNode(child);pushPairCurrentMatched(template,child);if (!isApplyImports) {DTMIterator cnl=new org.apache.xpath.NodeSetDTM(child,m_xcontext.getDTMManager());m_xcontext.pushContextNodeList(cnl);}if (isDefaultTextRule) {switch (nodeType) {case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:ClonerToResultTree.cloneToResultTree(child,nodeType,dtm,getResultTreeHandler(),false);break;case DTM.ATTRIBUTE_NODE:dtm.dispatchCharactersEvents(child,getResultTreeHandler(),false);break;}} else {m_xcontext.setSAXLocator(template);m_xcontext.getVarStack().link(template.m_frameSize);executeChildTemplates(template,true);}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);} finally {if (!isDefaultTextRule) m_xcontext.getVarStack().unlink();m_xcontext.popCurrentNode();if (!isApplyImports) {m_xcontext.popContextNodeList();}popCurrentMatched();popElemTemplateElement();}return true;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String_java_security_Provider() throws Exception {  Provider[] providers=Security.getProviders("Signature.DSA");  for (int i=0; i < providers.length; i++) {    Signature signature=Signature.getInstance("DSA",providers[i]);    assertEquals("DSA",signature.getAlgorithm());    assertEquals(providers[i],signature.getProvider());  }  try {    Signature.getInstance((String)null,(Provider)null);    fail();  } catch (  NullPointerException expected) {  }  try {    Signature.getInstance("DSA",(Provider)null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    Signature.getInstance((String)null,providers[0]);    fail();  } catch (  NullPointerException expected) {  }  try {    Signature.getInstance("bogus",providers[0]);    fail();  } catch (  NoSuchAlgorithmException expected) {  }}  }
class C{  public void testCase24(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=1;  byte rBytes[]={15,5,-9,-17,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.mod(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public String toValueString(){  StringBuffer sb=new StringBuffer();  sb.append(_hostEntityID).append(DELIM).append(_remoteEntityID).append(DELIM).append(_nameIDValue).append(DELIM);  if (_nameQualifier != null && _nameQualifier.length() != 0) {    sb.append(_nameQualifier);  } else {    sb.append(NULL);  }  sb.append(DELIM);  if (_format != null && _format.length() != 0) {    sb.append(_format);  } else {    sb.append(NULL);  }  sb.append(DELIM);  if (_spNameIDValue != null && _spNameIDValue.length() != 0) {    sb.append(_spNameIDValue);  } else {    sb.append(NULL);  }  sb.append(DELIM);  if (_spNameQualifier != null && _spNameQualifier.length() != 0) {    sb.append(_spNameQualifier);  } else {    sb.append(NULL);  }  sb.append(DELIM);  if (_role != null && _role.length() != 0) {    sb.append(_role);  } else {    sb.append(NULL);  }  sb.append(DELIM).append(Boolean.toString(_isAffiliation));  return sb.toString();}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  request.removeNote(Constants.REQ_SSOID_NOTE);  if (containerLog.isDebugEnabled()) {    containerLog.debug(sm.getString("singleSignOn.debug.invoke",request.getRequestURI()));  }  if (request.getUserPrincipal() != null) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.hasPrincipal",request.getUserPrincipal().getName()));    }    getNext().invoke(request,response);    return;  }  if (containerLog.isDebugEnabled()) {    containerLog.debug(sm.getString("singleSignOn.debug.cookieCheck"));  }  Cookie cookie=null;  Cookie cookies[]=request.getCookies();  if (cookies != null) {    for (int i=0; i < cookies.length; i++) {      if (Constants.SINGLE_SIGN_ON_COOKIE.equals(cookies[i].getName())) {        cookie=cookies[i];        break;      }    }  }  if (cookie == null) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.cookieNotFound"));    }    getNext().invoke(request,response);    return;  }  if (containerLog.isDebugEnabled()) {    containerLog.debug(sm.getString("singleSignOn.debug.principalCheck",cookie.getValue()));  }  SingleSignOnEntry entry=cache.get(cookie.getValue());  if (entry != null) {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.principalFound",entry.getPrincipal() != null ? entry.getPrincipal().getName() : "",entry.getAuthType()));    }    request.setNote(Constants.REQ_SSOID_NOTE,cookie.getValue());    if (!getRequireReauthentication()) {      request.setAuthType(entry.getAuthType());      request.setUserPrincipal(entry.getPrincipal());    }  } else {    if (containerLog.isDebugEnabled()) {      containerLog.debug(sm.getString("singleSignOn.debug.principalNotFound",cookie.getValue()));    }    cookie.setValue("REMOVE");    cookie.setMaxAge(0);    cookie.setPath("/");    String domain=getCookieDomain();    if (domain != null) {      cookie.setDomain(domain);    }    cookie.setSecure(request.isSecure());    if (request.getServletContext().getSessionCookieConfig().isHttpOnly() || request.getContext().getUseHttpOnly()) {      cookie.setHttpOnly(true);    }    response.addCookie(cookie);  }  getNext().invoke(request,response);}  }
class C{  public boolean removeCSN(CSN expectedCSN){  if (expectedCSN == null) {    return false;  }  if (serverIdToCSN.remove(expectedCSN.getServerId(),expectedCSN)) {    saved=false;    return true;  }  return false;}  }
class C{  public void test_setILjava_lang_Object(){  Object o=new Object();  tVector.set(23,o);  assertTrue("Failed to set Object",tVector.get(23) == o);  try {    tVector.set(-5,"Wrong position");    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.set(tVector.size() + 1,"Wrong position");    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  private boolean unsignedLongCompare(long one,long two){  return (one + Long.MIN_VALUE) > (two + Long.MIN_VALUE);}  }
class C{  private Map updateUserDataMap(Map userMap,Map interactedData){  if (interactedData == null || userMap == null || interactedData.isEmpty() || userMap.isEmpty()) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile.updateUserDataMap:" + "Interacted data or the user data map is empty");    }    return userMap;  }  Iterator iter=interactedData.keySet().iterator();  while (iter.hasNext()) {    String key=(String)iter.next();    if (!userMap.containsKey(key.toLowerCase())) {      if (IDPPUtils.debug.messageEnabled()) {        IDPPUtils.debug.message("PersonalProfile.updateUserDataMap" + ":Interacted key " + key + " isnotPart of the query");      }      continue;    }    String attrValue=(String)interactedData.get(key);    Set set=new HashSet();    set.add(attrValue);    userMap.put(key.toLowerCase(),set);  }  return userMap;}  }
class C{  public InvalidTokenException(){  super(401,"invalid_token","The access token provided is expired, revoked, malformed, or invalid for other reasons.");}  }
class C{  protected boolean isDynamicalOrIgnoredProfile(String realm){  return true;}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  } else   if (this == o) {    return true;  }  try {    ProfileStack s=(ProfileStack)o;    if (numFrames != s.numFrames) {      return false;    }    for (int i=0; i < numFrames; i++) {      if (lineNumbers[i] != s.lineNumbers[i] || !classNames[i].equals(s.classNames[i]) || !methodNames[i].equals(s.methodNames[i])) {        return false;      }    }    return true;  } catch (  Exception e) {    logger.traceException(e);    return false;  }}  }
class C{  public void testEngineGenerateCertPathLJava_util_List01(){  CertificateFactorySpi certFactorySpi=new MyCertificateFactorySpi();  MyCertificateFactorySpi.putMode(true);  List<Certificate> list=new ArrayList<Certificate>();  try {    assertNull(certFactorySpi.engineGenerateCertPath(list));  } catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }  try {    certFactorySpi.engineGenerateCertPath((List<? extends Certificate>)null);    fail("expected NullPointerException");  } catch (  NullPointerException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  private static List<URL> retrieve(@Nonnull String name,@Nonnull String version,@Nonnull LibraryRetriever retriever,boolean trusted,@Nonnull TaskListener listener,@Nonnull Run<?,?> run,@Nonnull CpsFlowExecution execution,@Nonnull Set<String> variables) throws Exception {  FilePath libDir=new FilePath(execution.getOwner().getRootDir()).child("libs/" + name);  retriever.retrieve(name,version,libDir,run,listener);  if (!trusted) {    for (    String clazz : ReplayAction.replacementsIn(execution)) {      for (      String root : new String[]{"src","vars"}) {        String rel=root + "/" + clazz.replace('.','/')+ ".groovy";        FilePath f=libDir.child(rel);        if (f.exists()) {          String replacement=ReplayAction.replace(execution,clazz);          if (replacement != null) {            listener.getLogger().println("Replacing contents of " + rel);            f.write(replacement,null);          }        }      }    }  }  List<URL> urls=new ArrayList<>();  FilePath srcDir=libDir.child("src");  if (srcDir.isDirectory()) {    urls.add(srcDir.toURI().toURL());  }  FilePath varsDir=libDir.child("vars");  if (varsDir.isDirectory()) {    urls.add(varsDir.toURI().toURL());    for (    FilePath var : varsDir.list("*.groovy")) {      variables.add(var.getBaseName());    }  }  if (urls.isEmpty()) {    throw new AbortException("Library " + name + " expected to contain at least one of src or vars directories");  }  return urls;}  }
class C{  public void testConstrStringMathContext(){  String a="-238768787678287e214";  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="-23876";  int resScale=-224;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void testGetElementById() throws Throwable {  Document doc;  Element element;  String elementId="---";  doc=(Document)load("staffNS",builder);  element=doc.getElementById(elementId);  assertNull("documentgetelementbyid01",element);}  }
class C{  BoxLayout(Container target,int axis,PrintStream dbg){  this(target,axis);  this.dbg=dbg;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();    this.serverTxTable.put(txId,st);    Response response=messageFactory.createResponse(Response.TRYING,request);    ListeningPoint lp=sipProvider.getListeningPoint(transport);    int myPort=lp.getPort();    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    int timeToSleep=(int)(Math.random() * 1000);    Thread.sleep(timeToSleep);    st.sendResponse(response);    Response ringingResponse=messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag=new Integer(new Random().nextInt()).toString();    toHeader.setTag(toTag);    if (sendRinging) {      ringingResponse.addHeader(contactHeader);      st.sendResponse(ringingResponse);    }    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    timer.schedule(new MyTimerTask(requestEvent,st,toTag),this.delay);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  static void useMatchedValuesRequestControl(Connection connection) throws LdapException {  if (isSupported(MatchedValuesRequestControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final SearchRequest request=Requests.newSearchRequest(dn,SearchScope.BASE_OBJECT,"(objectclass=*)","cn").addControl(MatchedValuesRequestControl.newControl(true,"(cn=Babs Jensen)"));    final SearchResultEntry entry=connection.searchSingleEntry(request);    System.out.println("Reading entry with matched values request.");    final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);    try {      writer.writeEntry(entry);      writer.close();    } catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("MatchedValuesRequestControl not supported.");  }}  }
class C{  private static void sendProxyResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String requestID,String idpMetaAlias,Object newSession,String nameIDFormat,SAML2EventLogger saml2Auditor) throws SAML2Exception {  String classMethod="IDPProxyUtil.sendProxyResponse: ";  AuthnRequest origRequest=null;  origRequest=(AuthnRequest)IDPCache.proxySPAuthnReqCache.get(requestID);  if (SAML2Utils.debug.messageEnabled()) {    try {      SAML2Utils.debug.message(classMethod + origRequest.toXMLString());    } catch (    Exception ex) {      SAML2Utils.debug.error(classMethod + "toString(): Failed.",ex);    }  }  IDPCache.proxySPAuthnReqCache.remove(requestID);  String proxySPEntityId=origRequest.getIssuer().getValue();  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + ":Original requesting service provider id:" + proxySPEntityId);  }  IDPCache.spSessionPartnerBySessionID.put(sessionProvider.getSessionID(newSession),proxySPEntityId);  String relayState=(String)IDPCache.relayStateCache.get(origRequest.getID());  IDPSSOUtil.doSSOFederate(request,response,out,origRequest,origRequest.getIssuer().getValue(),idpMetaAlias,nameIDFormat,relayState,newSession,saml2Auditor);}  }
class C{  private void addMessage(LocalizableMessageBuilder buf,LocalizableMessage message){  if (buf.length() > 0) {    buf.append(LINE_SEPARATOR);  }  buf.append(message);}  }
class C{  private void reuseCapacity(){  final int maxTotalPerKeySave=getMaxTotalPerKey();  int maxQueueLength=0;  LinkedBlockingDeque<PooledObject<T>> mostLoaded=null;  K loadedKey=null;  for (  Map.Entry<K,ObjectDeque<T>> entry : poolMap.entrySet()) {    final K k=entry.getKey();    final ObjectDeque<T> deque=entry.getValue();    if (deque != null) {      final LinkedBlockingDeque<PooledObject<T>> pool=deque.getIdleObjects();      final int queueLength=pool.getTakeQueueLength();      if (getNumActive(k) < maxTotalPerKeySave && queueLength > maxQueueLength) {        maxQueueLength=queueLength;        mostLoaded=pool;        loadedKey=k;      }    }  }  if (mostLoaded != null) {    register(loadedKey);    try {      final PooledObject<T> p=create(loadedKey);      if (p != null) {        addIdleObject(loadedKey,p);      }    } catch (    final Exception e) {      swallowException(e);    } finally {      deregister(loadedKey);    }  }}  }
class C{  public boolean hasMoreElements(){  boolean hasGotMoreElements=false;  try {    hasGotMoreElements=(m_attrVals != null) ? (m_attrIndex < m_attrVals.length) : m_ldapSearchResults.hasNext();    if (hasGotMoreElements) {      readEntry();    }    if (debug.messageEnabled()) {      if (!hasGotMoreElements && m_conn != null) {        debug.message("Finishing SearchResults: " + this + "  with connection : "+ m_conn);        debug.message("SearchResults: " + this + "  releasing connection : "+ m_conn);      }    }  } catch (  LdapException|SearchResultReferenceIOException ignored) {  }  return hasGotMoreElements;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required);  this.m_required=required;}  }
class C{  public boolean hasLock(){  return lock.getHoldCount() > 0;}  }
class C{  private void goToBackup(){  mStage=Stage.PASSWORD;  updateStage();  mPassword.requestFocus();  mPassword.postDelayed(mShowKeyboardRunnable,500);  mFingerprintUiHelper.stopListening();}  }
class C{  public static Date parseDateString(String dateString,java.util.Locale locale,String dateSyntax){  if (debug.messageEnabled()) {    debug.message("Local.parseDateString(date, locale, syntax)");    debug.message("date string = " + dateString);    debug.message("date syntax = " + dateSyntax);    debug.message("locale = " + locale.toString());  }  if ((dateString == null) || (dateString.length() < 1) || (dateSyntax == null)|| (dateSyntax.length() < 1)) {    return null;  }  SimpleDateFormat sdf=new SimpleDateFormat(dateSyntax);  sdf.setLenient(false);  ParsePosition pos=new ParsePosition(0);  Date date=sdf.parse(dateString,pos);  if (date == null) {    debug.warning("Locale.parseDateString: unable to parse the date.");  }  return date;}  }
class C{  protected boolean isDynamicalOrIgnoredProfile(String realm){  try {    OrganizationConfigManager orgConfigMgr=AuthD.getAuth().getOrgConfigManager(realm);    ServiceConfig svcConfig=orgConfigMgr.getServiceConfig(ISAuthConstants.AUTH_SERVICE_NAME);    Map attrs=svcConfig.getAttributes();    String tmp=CollectionHelper.getMapAttr(attrs,ISAuthConstants.DYNAMIC_PROFILE);    if (debug.messageEnabled()) {      debug.message("dynamicalCreationEnabled, attr=" + tmp);    }    if (tmp != null && (tmp.equalsIgnoreCase("createAlias") || tmp.equalsIgnoreCase("true") || tmp.equalsIgnoreCase("ignore"))) {      return true;    } else {      return false;    }  } catch (  Exception e) {    debug.error("dynamicalCreationEnabled, unable to get attribute",e);    return false;  }}  }
class C{  public static net.aimeizi.person.QueryParameter.Builder newBuilder(net.aimeizi.person.QueryParameter other){  return new net.aimeizi.person.QueryParameter.Builder(other);}  }
class C{  public List<Value> parseArguments(List<Expression> args,SemanticScope scope) throws SyntaxException {  List<Value> list=new ArrayList<>();  for (  Expression exp : args) {    Value a=parseValueFromExpression(exp,null,scope);    if (a == null) {      err.SyntaxException(exp + " is not method argument",exp.line_col());      return null;    }    list.add(a);  }  return list;}  }
class C{  public void initialize(){  try {    startCommonRegistry();    startConnectorNoClientCertificate();  } catch (  Exception e) {    logger.traceException(e);    throw new RuntimeException("Error while starting the RMI module : " + e.getMessage());  }  if (logger.isTraceEnabled()) {    logger.trace("RMI module started");  }}  }
class C{  public void removeAttributeNS(String namespaceURI,String localName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  static XMPNode findSchemaNode(XMPNode tree,String namespaceURI,boolean createNodes) throws XMPException {  return findSchemaNode(tree,namespaceURI,null,createNodes);}  }
class C{  public void afterPropertiesSet(){}  }
class C{  public void evaluate(XPathContext xctxt,FastStringBuffer buf,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException {  XObject xobj=m_xpath.execute(xctxt,context,nsNode);  if (null != xobj) {    xobj.appendToFsb(buf);  }}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  BaseDnRegistry copy(){  final BaseDnRegistry registry=new BaseDnRegistry(true);  registry.baseDNs.putAll(baseDNs);  registry.publicNamingContexts.putAll(publicNamingContexts);  registry.allPublicNamingContexts.putAll(allPublicNamingContexts);  registry.privateNamingContexts.putAll(privateNamingContexts);  return registry;}  }
class C{  public String[] findApplicationParameters() throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  ApplicationParameter[] params=context.findApplicationParameters();  String[] stringParams=new String[params.length];  for (int counter=0; counter < params.length; counter++) {    stringParams[counter]=params[counter].toString();  }  return stringParams;}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public boolean processSOAPTerminationRequest(HttpServletRequest request,HttpServletResponse response,FSFederationTerminationNotification reqTermination){  FSUtils.debug.message("Entered FSFedTerminationHandler::processSOAPTerminationRequest");  if (managerInst == null) {    FSUtils.debug.error("FSSPFedTerminationHandler " + "Account Manager instance is null");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSPFedTerminationHandler::handleFederationTermination" + "failed to get Account Manager instance");    }    return false;  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Begin processTerminationRequest SOAP profile...");  }  boolean bStatus=false;  if (reqTermination != null) {    boolean bUserStatus=setUserID(reqTermination);    if (bUserStatus) {      bStatus=updateAccountInformation(reqTermination.getNameIdentifier());      if (!bStatus) {        FSUtils.debug.error("FSFedTerminationHandler " + FSUtils.bundle.getString(IFSConstants.TERMINATION_REQUEST_PROCESSING_FAILED));        return false;      } else {        FSUtils.debug.message("User sucessfully defederated");        if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {          FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);          if (spAdapter != null) {            FSUtils.debug.message("FSFedTerminationHandler.SOAP");            try {              spAdapter.postTerminationNotificationSuccess(hostedEntityId,request,response,userID,reqTermination,IFSConstants.TERMINATION_IDP_SOAP_PROFILE);            } catch (            Exception e) {              FSUtils.debug.error("postTerm.IDP/SOAP",e);            }          }        }        return true;      }    } else {      FSUtils.debug.message("Failed to get UserDN. Invalid termination request");      return false;    }  } else {    FSUtils.debug.error("FSFedTerminationHandler::processTerminationRequest " + "Federation termination request is improper");    return false;  }}  }
class C{  public void testNegPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={0,-2,125,-60,-104,1,10,6,2,32,56,2,4,4,21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void loadTagFiles(Compiler compiler,Node.Nodes page) throws JasperException {  tempVector=new Vector<>();  page.visit(new TagFileLoaderVisitor(compiler));}  }
class C{  public PdfArray(PdfObject obj){  this();  list.add(obj);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().deleteFoo(foo);}  }
class C{  public void updateDeleteTime(long time){  if (time > 0 && time < deleteTimeMin) {    deleteTimeMin=time;  }  if (time > deleteTimeMax) {    deleteTimeMax=time;  }  deleteCumulativeCount+=time;  deleteTimeAverage=deleteCumulativeCount / totalDeletes;}  }
class C{  public synchronized String toString(){  String toString="Thread Auditor - List of monitored threads:\n";  Iterator<ThreadHandle> it=threadHandles.values().iterator();  while (it.hasNext()) {    ThreadHandle threadHandle=(ThreadHandle)it.next();    toString+="   " + threadHandle.toString() + "\n";  }  return toString;}  }
class C{  public Transformer newTransformer(Source source) throws TransformerConfigurationException {  try {    Templates tmpl=newTemplates(source);    if (tmpl == null)     return null;    Transformer transformer=tmpl.newTransformer();    transformer.setURIResolver(m_uriResolver);    return transformer;  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  public Enumeration preorderEnumeration(){  return new PreorderEnumeration(this);}  }
class C{  public void insertElementAt(MarkData m,int index){  oneMark[0]=m;  replace(index,0,oneMark,1);}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  private int run(){  if (cur == -1) {    return -1;  }  boolean leaf=false;  while (true) {    while (cur != 0) {      if (tt.sc[cur] == 0xFFFF) {        leaf=true;        break;      }      ns.push(new Item((char)cur,'\u0000'));      if (tt.sc[cur] == 0) {        leaf=true;        break;      }      cur=tt.lo[cur];    }    if (leaf) {      break;    }    cur=up();    if (cur == -1) {      return -1;    }  }  StringBuffer buf=new StringBuffer(ks.toString());  if (tt.sc[cur] == 0xFFFF) {    int p=tt.lo[cur];    while (tt.kv.get(p) != 0) {      buf.append(tt.kv.get(p++));    }  }  curkey=buf.toString();  return 0;}  }
class C{  public boolean isCachedFile(){  return false;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("<").append("Response ").append("xmlns=\"" + XACML3_NAMESPACE + "\"").append(">");  Iterator<Result> resultIterator=this.getResult().iterator();  while (resultIterator.hasNext()) {    Result result=resultIterator.next();    if (result != null) {      stringBuilder.append(result.toXML());    }  }  stringBuilder.append("</Response>");  return stringBuilder.toString();}  }
class C{  @SuppressWarnings("unused") public static float valueRangeLimit(float value,float startValue,float endValue){  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);  return value;}  }
class C{  public void registerDecisionCombiner(Class<? extends EntitlementCombiner> type){  register(type.getSimpleName(),combiners,type);}  }
class C{  public String toString(){switch (mod_op) {case DirContext.ADD_ATTRIBUTE:    return ("Add attribute: " + attr.toString());case DirContext.REPLACE_ATTRIBUTE:  return ("Replace attribute: " + attr.toString());case DirContext.REMOVE_ATTRIBUTE:return ("Remove attribute: " + attr.toString());}return "";}  }
class C{  public int indexOfObject(Object obj){  NSObject nso=NSObject.wrap(obj);  for (int i=0; i < array.length; i++) {    if (array[i].equals(nso)) {      return i;    }  }  return -1;}  }
class C{  public void removeMenuListener(MenuListener l){  listenerList.remove(MenuListener.class,l);}  }
class C{  public static void registerBackend(Backend<?> backend) throws DirectoryException {  ifNull(backend);  String backendID=backend.getBackendID();  ifNull(backendID);synchronized (directoryServer) {    TreeMap<String,Backend<?>> newBackends=new TreeMap<>(directoryServer.backends);    if (newBackends.containsKey(backendID)) {      LocalizableMessage message=ERR_REGISTER_BACKEND_ALREADY_EXISTS.get(backendID);      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);    }    newBackends.put(backendID,backend);    directoryServer.backends=newBackends;    for (    String oid : backend.getSupportedControls()) {      registerSupportedControl(oid);    }    for (    String oid : backend.getSupportedFeatures()) {      registerSupportedFeature(oid);    }    BackendMonitor monitor=new BackendMonitor(backend);    monitor.initializeMonitorProvider(null);    backend.setBackendMonitor(monitor);    registerMonitorProvider(monitor);  }}  }
class C{  public StringBuffer append(long l){  IntegralToString.appendLong(this,l);  return this;}  }
class C{  public SearchAttribute(String attributeName,String ldapAttribute){  Reject.ifNull(attributeName,ldapAttribute);  this.attributeName=attributeName;  this.ldapAttribute=ldapAttribute;}  }
class C{  public DefaultFormatter(){  overwriteMode=true;  allowsInvalid=true;}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Throwable thrown){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setThrown(thrown);  doLog(lr);}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  @Override public Foo findByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_First(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public boolean hasAttribute(AttributeDescription attributeDescription,boolean includeSubordinates){  AttributeType attributeType=attributeDescription.getAttributeType();  if (attributeType.isObjectClass()) {    return !objectClasses.isEmpty() && !attributeDescription.hasOptions();  }  if (!includeSubordinates) {    Attribute attribute=getAttribute(attributeDescription);    return attribute != null && !attribute.isEmpty();  }  return hasAttributeOrSubType(attributeDescription,userAttributes) || hasAttributeOrSubType(attributeDescription,operationalAttributes);}  }
class C{  @Override public int countByField2(boolean field2){  FinderPath finderPath=FINDER_PATH_COUNT_BY_FIELD2;  Object[] finderArgs=new Object[]{field2};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    query.append(_FINDER_COLUMN_FIELD2_FIELD2_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      qPos.add(field2);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public WorldCreator generator(String generator){  this.generator=getGeneratorForName(name,generator,Bukkit.getConsoleSender());  return this;}  }
class C{  public AuthorizationPendingException(){  super(403,"authorization_pending","The user has not yet completed authorization");}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  private void corruptTestLogFile(ByteStringBuilder corruptedRecordData) throws Exception {  try (RandomAccessFile output=new RandomAccessFile(TEST_LOG_FILE,"rwd")){    output.seek(output.length());    output.write(corruptedRecordData.toByteArray());  } }  }
class C{  public CLIDefinitionBase(String definitionClass) throws CLIException {  this.definitionClass=definitionClass;}  }
class C{  public boolean currentFuncResultSeen(){  return !m_currentFuncResult.empty() && m_currentFuncResult.peek() != null;}  }
class C{  static boolean exists(){  return getFile().exists();}  }
class C{  public void test_parkFor_1() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,false,500);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,1000,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(500);  waiterThread.join();  parkerThread.join();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  protected boolean isNavigationKey(int keyCode){  return keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN || keyCode == KeyEvent.VK_KP_UP || keyCode == KeyEvent.VK_KP_DOWN;}  }
class C{  public void clearPassword(){  if (this.authority != null) {    UserInfo userInfo=authority.getUserInfo();    if (userInfo != null)     userInfo.clearPassword();  }}  }
class C{  public boolean isSelectionEmpty(){  return getSelectionModel().isSelectionEmpty();}  }
class C{  public NO_PERMISSION(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public void test_clear(){  Calendar calendar=Calendar.getInstance();  int count=6;  int[] fields=new int[count];  int[] defaults=new int[count];  fields[0]=Calendar.YEAR;  fields[1]=Calendar.MONTH;  fields[2]=Calendar.DATE;  fields[3]=Calendar.HOUR_OF_DAY;  fields[4]=Calendar.MINUTE;  fields[5]=Calendar.SECOND;  defaults[0]=1970;  defaults[1]=0;  defaults[2]=1;  defaults[3]=0;  defaults[4]=0;  defaults[5]=0;  calendar.set(2008,3,20,17,28,12);  for (int i=0; i < fields.length; i++) {    int index=fields[i];    calendar.clear(index);    if (5 == index) {      assertEquals("Field " + index + " Should equal to 20.",20,calendar.get(index));    } else     if (11 == index) {      assertEquals("Field " + index + " Should equal to 17.",17,calendar.get(index));    } else {      assertEquals("Field " + index + " Should equal to "+ defaults[i]+ ".",defaults[i],calendar.get(index));    }  }  calendar.set(2008,3,20,17,28,12);  calendar.clear();  for (int i=0; i < fields.length; i++) {    int index=fields[i];    assertEquals("Field " + index + " Should equal to "+ defaults[i]+ ".",defaults[i],calendar.get(index));  }}  }
class C{  public JKTagMapping findTagMapping(final String tagName){  for (  final JKTagMapping mapping : this.tagMapping) {    if (mapping.getSourceQName().equals(tagName)) {      return mapping;    }  }  return null;}  }
class C{  public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  @Override public List<Foo> findByUuid_C(String uuid,long companyId){  return findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public boolean newParentIsEqual(DN targetDN){  try {    DN newSuperiorDN=newSuperior != null ? DN.valueOf(newSuperior) : DN.rootDN();    return newSuperiorDN.equals(targetDN);  } catch (  LocalizedIllegalArgumentException e) {    return false;  }}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  public void insert(String table,List<DbDataContainer> insertValues){  if (table.equals("NodeVersions")) {    String id=null;    for (    DbDataContainer container : insertValues) {      if (container.getField().equals("id")) {        id=container.getValue().toString();      }    }    JGraphTUtils.addVertex(this.graph,id);  }  if (table.equals("EdgeVersions")) {    String nvFromId=null;    String nvToId=null;    for (    DbDataContainer container : insertValues) {      if (container.getField().equals("endpoint_one")) {        nvFromId=container.getValue().toString();      }      if (container.getField().equals("endpoint_two")) {        nvToId=container.getValue().toString();      }    }    JGraphTUtils.addEdge(this.graph,nvFromId,nvToId);  }  String insertString="insert into " + table + "(";  String valuesString="values (";  for (  DbDataContainer container : insertValues) {    insertString+=container.getField() + ", ";    valuesString+="?, ";  }  insertString=insertString.substring(0,insertString.length() - 2) + ")";  valuesString=valuesString.substring(0,valuesString.length() - 2) + ")";  String prepString=insertString + valuesString + ";";  BoundStatement statement=new BoundStatement(session.prepare(prepString));  int index=0;  for (  DbDataContainer container : insertValues) {    CassandraClient.setValue(statement,container.getValue(),container.getGroundType(),index);    index++;  }  LOGGER.info("Executing update: " + statement.preparedStatement().getQueryString() + ".");  this.session.execute(statement);}  }
class C{  public final void testEqualsObject01(){  ECFieldFp obj=new ECFieldFp(BigInteger.valueOf(23L));  assertTrue(obj.equals(obj));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  streetAttr.setNodeValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  public void testNegPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,72};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  @Modified void modified(ComponentContext compContext) throws Exception {  logger.debug("Reconfiguring audit service with configuration {}",compContext.getProperties());  try {    JsonValue newConfig=enhancedConfig.getConfigurationAsJson(compContext);    if (hasConfigChanged(config,newConfig)) {      cleanup();      activate(compContext);      logger.info("Reconfigured audit service {}",compContext.getProperties());    }  } catch (  Exception ex) {    logger.warn("Configuration invalid, can not reconfigure Audit service.",ex);    throw ex;  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  memberType=getMemberAttributeType();  uniqueMemberType=getUniqueMemberAttributeType();  groupManager=DirectoryServer.getGroupManager();  u1=DN.valueOf("uid=test.1,ou=People,o=test");  u2=DN.valueOf("uid=test.2,ou=People,o=test");  u3=DN.valueOf("uid=test.3,ou=People,o=test");  u4=DN.valueOf("uid=test.4,ou=People,o=test");  da=DN.valueOf("cn=Dynamic All Users,ou=Groups,o=test");  d1=DN.valueOf("cn=Dynamic One User,ou=Groups,o=test");  sm=DN.valueOf("cn=Static member List,ou=Groups,o=test");  su=DN.valueOf("cn=Static uniqueMember List,ou=Groups,o=test");  vmda=DN.valueOf("cn=Virtual member All Users,ou=Groups,o=test");  vuda=DN.valueOf("cn=Virtual uniqueMember All Users,ou=Groups,o=test");  vmd1=DN.valueOf("cn=Virtual member One User,ou=Groups,o=test");  vud1=DN.valueOf("cn=Virtual uniqueMember One User,ou=Groups,o=test");  vsm=DN.valueOf("cn=Virtual Static member List,ou=Groups,o=test");  vsu=DN.valueOf("cn=Virtual Static uniqueMember List,ou=Groups,o=test");  vcm=DN.valueOf("cn=Crossover member Static Group,ou=Groups,o=test");  vcu=DN.valueOf("cn=Crossover uniqueMember Static Group,ou=Groups,o=test");  vn=DN.valueOf("cn=Virtual Nonexistent,ou=Groups,o=test");  ne=DN.valueOf("cn=Nonexistent,ou=Groups,o=test");}  }
class C{  XSLTElementDef(){}  }
class C{  public void makeImmutable(){  if (isMutable) {    if ((statusCode != null) && (statusCode.isMutable())) {      statusCode.makeImmutable();    }    isMutable=false;  }}  }
class C{  @Advice.OnMethodEnter public static long enter(){  final long startTime=System.currentTimeMillis();  return startTime;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof DelegationPermission))   return false;synchronized (this) {    for (    Permission x : perms) {      if (x.implies(permission))       return true;    }  }  return false;}  }
class C{  public static Object generateSession(HttpServletRequest request,HttpServletResponse response,Map attrMap) throws SAMLException {  Map sessionInfoMap=new HashMap();  String realm=(String)attrMap.get(SessionProvider.REALM);  if ((realm == null) || (realm.length() == 0)) {    realm="/";  }  sessionInfoMap.put(SessionProvider.REALM,realm);  String principalName=(String)attrMap.get(SessionProvider.PRINCIPAL_NAME);  if (principalName == null) {    principalName=(String)attrMap.get(SAMLConstants.USER_NAME);  }  sessionInfoMap.put(SessionProvider.PRINCIPAL_NAME,principalName);  Object session=null;  try {    SessionProvider sessionProvider=SessionManager.getProvider();    session=sessionProvider.createSession(sessionInfoMap,request,response,null);    setAttrMapInSession(sessionProvider,attrMap,session);  } catch (  SessionException se) {    if (debug.messageEnabled()) {      debug.message("SAMLUtils.generateSession:",se);    }    throw new SAMLException(se);  }  return session;}  }
class C{  public boolean isRepresentationClassSerializable(){  return java.io.Serializable.class.isAssignableFrom(representationClass);}  }
class C{  static ObjectClass newPlaceHolder(String name){  return new ObjectClass(name);}  }
class C{  public void test_getQ(){  DSAParams params=new DSAParameterSpec(p,q,g);  assertEquals("Invalid Q",q,params.getQ());}  }
class C{  public ServiceNotFoundException(String rbName,String errCode,Object[] args){  super(rbName,errCode,args);}  }
class C{  private void assertRejectedFile(File reject,boolean shouldBeEmpty) throws Exception {  try {    final RootCfg root=DirectoryServer.getInstance().getServerContext().getRootConfig();    final String errorMsg="Unexpected content in reject file:\n\n" + readFile(reject) + "\n\nThe backend was configured with the following base DNs: "+ root.getBackend(beID).getBaseDN()+ "\n\n";    assertEquals(reject.length() == 0,shouldBeEmpty,errorMsg);  }  finally {    reject.delete();  }}  }
class C{  private String trimAndParenthesise(String str){  String parenthesisedString=str;  if (str != null) {    str=str.trim();    if (!str.startsWith(OPEN_PARENTHESIS)) {      parenthesisedString=OPEN_PARENTHESIS + str + CLOSE_PARENTHESIS;    }  } else {    parenthesisedString=OPEN_PARENTHESIS + CLOSE_PARENTHESIS;  }  return parenthesisedString;}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  if (nmtoken.length() == 0)   return false;  for (int i=0; i < nmtoken.length(); i++) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  protected HttpHost determineProxy(HttpHost target,HttpRequest request,HttpContext context) throws HttpException {  ProxySelector psel=this.proxySelector;  if (psel == null)   psel=ProxySelector.getDefault();  if (psel == null)   return null;  URI targetURI=null;  try {    targetURI=new URI(target.toURI());  } catch (  URISyntaxException usx) {    throw new HttpException("Cannot convert host to URI: " + target,usx);  }  List<Proxy> proxies=psel.select(targetURI);  Proxy p=chooseProxy(proxies,target,request,context);  HttpHost result=null;  if (p.type() == Proxy.Type.HTTP) {    if (!(p.address() instanceof InetSocketAddress)) {      throw new HttpException("Unable to handle non-Inet proxy address: " + p.address());    }    final InetSocketAddress isa=(InetSocketAddress)p.address();    result=new HttpHost(getHost(isa),isa.getPort());  }  return result;}  }
class C{  public boolean isSignificant(){  return true;}  }
class C{  private static void isVersionNewer(){  if (isConfiguredFlag) {    isVersionNewer=VersionUtils.isVersionNewer();  }}  }
class C{  public void test_scheduleLjava_util_TimerTaskLjava_util_DateJ() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    Date d=new Date(System.currentTimeMillis() + 100);    t.cancel();    try {      t.schedule(testTask,d,100);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    testTask=new TimerTestTask();    testTask.cancel();    try {      t.schedule(testTask,d,100);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    d=new Date(-100);    testTask=new TimerTestTask();    try {      t.schedule(testTask,d,100);      fail("Scheduling a task with negative delay should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    testTask=new TimerTestTask();    try {      t.schedule(testTask,d,-100);      fail("Scheduling a task with negative period should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    try {      t.schedule(null,d,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,null,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    d=new Date(-100);    try {      t.schedule(null,d,10);      fail("Scheduling a null task with negative dates should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    d=new Date(System.currentTimeMillis() + 100);    testTask=new TimerTestTask();    t.schedule(testTask,d,100);    Thread.sleep(800);    assertTrue("TimerTask.run() method should have been called at least twice (" + testTask.wasRun() + ")",testTask.wasRun() >= 2);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 100);    t.schedule(testTask,d,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 200);    t.schedule(testTask,d,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 300);    t.schedule(testTask,d,200);    testTask=new TimerTestTask();    testTask.incrementCount(true);    d=new Date(System.currentTimeMillis() + 100);    t.schedule(testTask,d,200);    Thread.sleep(3000);    assertTrue("Multiple tasks should have incremented counter 24 times not " + timerCounter,timerCounter >= 24);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  public boolean isPointerType(STypeDef type){  return type instanceof PointerType || "lt.lang.Pointer".equals(type.fullName());}  }
class C{  public void testDivideRoundHalfEvenNeg1(){  String a="-92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="-1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private void addRoute(RecordRouteList recordRouteList){  try {    if (!this.isServer()) {      this.routeList=new RouteList();      ListIterator li=recordRouteList.listIterator(recordRouteList.size());      while (li.hasPrevious()) {        RecordRoute rr=(RecordRoute)li.previous();        Route route=new Route();        AddressImpl address=((AddressImpl)((AddressImpl)rr.getAddress()).clone());        route.setAddress(address);        route.setParameters((NameValueList)rr.getParameters().clone());        this.routeList.add(route);      }    } else {      this.routeList=new RouteList();      ListIterator li=recordRouteList.listIterator();      while (li.hasNext()) {        RecordRoute rr=(RecordRoute)li.next();        Route route=new Route();        AddressImpl address=((AddressImpl)((AddressImpl)rr.getAddress()).clone());        route.setAddress(address);        route.setParameters((NameValueList)rr.getParameters().clone());        routeList.add(route);      }    }  }  finally {    if (logger.isLoggingEnabled()) {      Iterator it=routeList.iterator();      while (it.hasNext()) {        SipURI sipUri=(SipURI)(((Route)it.next()).getAddress().getURI());        if (!sipUri.hasLrParam()) {          if (logger.isLoggingEnabled()) {            logger.logWarning("NON LR route in Route set detected for dialog : " + this);            logger.logStackTrace();          }        } else {          if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))           logger.logDebug("route = " + sipUri);        }      }    }  }}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  public double doubleValue(){  return doubleValue;}  }
class C{  protected StringBuffer applyRules(final Calendar calendar,final StringBuffer buf){  return printer.applyRules(calendar,buf);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName;  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  String charact;  java.util.List illegalQNames=new java.util.ArrayList();  illegalQNames.add("namespaceURI:{");  illegalQNames.add("namespaceURI:}");  illegalQNames.add("namespaceURI:~");  illegalQNames.add("namespaceURI:'");  illegalQNames.add("namespaceURI:!");  illegalQNames.add("namespaceURI:@");  illegalQNames.add("namespaceURI:#");  illegalQNames.add("namespaceURI:$");  illegalQNames.add("namespaceURI:%");  illegalQNames.add("namespaceURI:^");  illegalQNames.add("namespaceURI:&");  illegalQNames.add("namespaceURI:*");  illegalQNames.add("namespaceURI:(");  illegalQNames.add("namespaceURI:)");  illegalQNames.add("namespaceURI:+");  illegalQNames.add("namespaceURI:=");  illegalQNames.add("namespaceURI:[");  illegalQNames.add("namespaceURI:]");  illegalQNames.add("namespaceURI:\\");  illegalQNames.add("namespaceURI:/");  illegalQNames.add("namespaceURI:;");  illegalQNames.add("namespaceURI:`");  illegalQNames.add("namespaceURI:<");  illegalQNames.add("namespaceURI:>");  illegalQNames.add("namespaceURI:,");  illegalQNames.add("namespaceURI:a ");  illegalQNames.add("namespaceURI:\"");  doc=(Document)load("staffNS",false);  for (int indexN1009A=0; indexN1009A < illegalQNames.size(); indexN1009A++) {    qualifiedName=(String)illegalQNames.get(indexN1009A);    domImpl=doc.getImplementation();{      boolean success=false;      try {        aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return _fooLocalService.dynamicQueryCount(dynamicQuery,projection);}  }
class C{  protected void configureLayoutCache(){  if (treeState != null && tree != null) {    if (nodeDimensions == null)     nodeDimensions=createNodeDimensions();    treeState.setNodeDimensions(nodeDimensions);    treeState.setRootVisible(tree.isRootVisible());    treeState.setRowHeight(tree.getRowHeight());    treeState.setSelectionModel(getSelectionModel());    if (treeState.getModel() != tree.getModel())     treeState.setModel(tree.getModel());    updateLayoutCacheExpandedNodesIfNecessary();    if (isLargeModel()) {      if (componentListener == null) {        componentListener=createComponentListener();        if (componentListener != null)         tree.addComponentListener(componentListener);      }    } else     if (componentListener != null) {      tree.removeComponentListener(componentListener);      componentListener=null;    }  } else   if (componentListener != null) {    tree.removeComponentListener(componentListener);    componentListener=null;  }}  }
class C{  public static void processSOAPRequest(HttpServletRequest request,HttpServletResponse response,Map paramsMap) throws SAML2Exception, IOException, SOAPException, ServletException {  String method="processSOAPRequest: ";  String metaAlias=null;  String remoteEntityID=null;  String requestURL=request.getRequestURI();  String hostEntityRole=SAML2Utils.getHostEntityRole(paramsMap);  SAMLUtils.checkHTTPContentLength(request);  metaAlias=SAML2MetaUtils.getMetaAliasByUri(requestURL);  if (metaAlias == null) {    logError("MetaAliasNotFound",LogUtil.MISSING_META_ALIAS,metaAlias);    throw new SAML2Exception(SAML2Utils.bundle.getString("MetaAliasNotFound"));  }  String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);  String hostEntity=metaManager.getEntityByMetaAlias(metaAlias);  boolean isSupported=false;  if (SAML2Constants.IDP_ROLE.equals(hostEntityRole)) {    isSupported=SAML2Utils.isIDPProfileBindingSupported(realm,hostEntity,SAML2Constants.MNI_SERVICE,SAML2Constants.SOAP);  } else {    isSupported=SAML2Utils.isSPProfileBindingSupported(realm,hostEntity,SAML2Constants.MNI_SERVICE,SAML2Constants.SOAP);  }  if (!isSupported) {    debug.error(method + "MNI binding: SOAP is not supported for " + hostEntity);    String[] data={hostEntity,SAML2Constants.SOAP};    LogUtil.error(Level.INFO,LogUtil.BINDING_NOT_SUPPORTED,data,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  SOAPMessage message=SOAPCommunicator.getInstance().getSOAPMessage(request);  ManageNameIDRequest mniRequest=getMNIRequest(message);  remoteEntityID=mniRequest.getIssuer().getValue();  if (remoteEntityID == null) {    logError("nullRemoteEntityID",LogUtil.MISSING_ENTITY,metaAlias);    throw new SAML2Exception(SAML2Utils.bundle.getString("nullRemoteEntityID"));  }  if (debug.messageEnabled()) {    debug.message(method + "Meta Alias is : " + metaAlias);    debug.message(method + "Host EntityID is : " + hostEntity);    debug.message(method + "Remote EntityID is : " + remoteEntityID);  }  String dest=mniRequest.getDestination();  boolean valid=verifyMNIRequest(mniRequest,realm,remoteEntityID,hostEntity,hostEntityRole,dest);  if (!valid) {    logError("invalidSignInRequest",LogUtil.MNI_REQUEST_INVALID_SIGNATURE,metaAlias);    throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInRequest"));  }  ManageNameIDResponse mniResponse=processManageNameIDRequest(mniRequest,metaAlias,remoteEntityID,paramsMap,null,SAML2Constants.SOAP,request,response);  signMNIResponse(mniResponse,realm,hostEntity,hostEntityRole,remoteEntityID);  SOAPMessage reply=SOAPCommunicator.getInstance().createSOAPMessage(mniResponse.toXMLString(true,true),false);  if (reply != null) {    if (reply.saveRequired()) {      reply.saveChanges();    }    response.setStatus(HttpServletResponse.SC_OK);    SAML2Utils.putHeaders(reply.getMimeHeaders(),response);    OutputStream os=response.getOutputStream();    reply.writeTo(os);    os.flush();  } else {    logError("errorObtainResponse",LogUtil.CANNOT_INSTANTIATE_MNI_RESPONSE,null);    throw new SAML2Exception(SAML2Utils.bundle.getString("errorObtainResponse"));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("employee");  expectedResult.add("employeeId");  expectedResult.add("name");  expectedResult.add("position");  expectedResult.add("salary");  expectedResult.add("gender");  expectedResult.add("address");  expectedResult.add("emp:employee");  expectedResult.add("emp:employeeId");  expectedResult.add("emp:position");  expectedResult.add("emp:salary");  expectedResult.add("emp:gender");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nist.gov","*");  for (int indexN1007E=0; indexN1007E < elementList.getLength(); indexN1007E++) {    child=(Node)elementList.item(indexN1007E);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_long);}  }
class C{  private void createCookiesData(final Element rootElement){  Element element=creator.getDocument().createElement("Cookies");  if (this.sessionCookieName != null) {    element.setAttribute("sessionCookieName",this.sessionCookieName);  }  if (this.sessionPathParamName != null) {    element.setAttribute("sessionParameterName",this.sessionPathParamName);  }  for (int i=0; i < this.cookies.length; i++) {    if (!cookies[i].getName().startsWith("CKFinder_")) {      XmlElementData elementData=new XmlElementData("Cookie");      XmlAttribute attribute=new XmlAttribute("name",cookies[i].getName());      elementData.getAttributes().add(attribute);      attribute=new XmlAttribute("value",cookies[i].getValue());      elementData.getAttributes().add(attribute);      elementData.addToDocument(this.creator.getDocument(),element);    }  }  rootElement.appendChild(element);}  }
class C{  public void packAndShow(){  frame.pack();  int minWidth=(int)frame.getPreferredSize().getWidth();  int minHeight=(int)frame.getPreferredSize().getHeight();  Utilities.centerOnScreen(frame);  setFocusOnButton(application.getInitialFocusButtonName());  frame.addComponentListener(new MinimumSizeComponentListener(frame,minWidth,minHeight));  frame.setVisible(true);}  }
class C{  public DropTargetDragEvent(DropTargetContext dtc,Point cursorLocn,int dropAction,int srcActions){  super(dtc);  if (cursorLocn == null)   throw new NullPointerException("cursorLocn");  if (dropAction != DnDConstants.ACTION_NONE && dropAction != DnDConstants.ACTION_COPY && dropAction != DnDConstants.ACTION_MOVE && dropAction != DnDConstants.ACTION_LINK)   throw new IllegalArgumentException("dropAction" + dropAction);  if ((srcActions & ~(DnDConstants.ACTION_COPY_OR_MOVE | DnDConstants.ACTION_LINK)) != 0)   throw new IllegalArgumentException("srcActions");  location=cursorLocn;  actions=srcActions;  this.dropAction=dropAction;}  }
class C{  protected Expression variable(int opPos) throws TransformerException {  Variable var=new Variable();  opPos=getFirstChildPos(opPos);  int nsPos=getOp(opPos);  java.lang.String namespace=(OpCodes.EMPTY == nsPos) ? null : (java.lang.String)getTokenQueue().elementAt(nsPos);  java.lang.String localname=(java.lang.String)getTokenQueue().elementAt(getOp(opPos + 1));  QName qname=new QName(namespace,localname);  var.setQName(qname);  return var;}  }
class C{  public void comment(String comment) throws SAXException {  flushPending();  if (m_lexHandler != null) {    final int len=comment.length();    if (len > m_charsBuff.length) {      m_charsBuff=new char[len * 2 + 1];    }    comment.getChars(0,len,m_charsBuff,0);    m_lexHandler.comment(m_charsBuff,0,len);    if (m_tracer != null)     super.fireCommentEvent(m_charsBuff,0,len);  }}  }
class C{  private void checkPeerCertificatesPresent() throws SSLPeerUnverifiedException {  if (peerCertificates == null || peerCertificates.length == 0) {    throw new SSLPeerUnverifiedException("No peer certificates");  }}  }
class C{  public CancelRequest(boolean notifyOriginalRequestor,LocalizableMessage cancelReason){  this.notifyOriginalRequestor=notifyOriginalRequestor;  this.cancelReason=cancelReason;}  }
class C{  public Node cloneNode(boolean deep){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public void initialize(final TempLogFile tempLogFile,String[] args){  ProgressMessageFormatter formatter=new HtmlProgressMessageFormatter();  installStatus=new CurrentInstallStatus();  application=Application.create();  application.setProgressMessageFormatter(formatter);  application.setCurrentInstallStatus(installStatus);  application.setTempLogFile(tempLogFile);  if (args != null) {    application.setUserArguments(args);  } else {    application.setUserArguments(new String[]{});  }  try {    initLookAndFeel();  } catch (  Throwable t) {    t.printStackTrace();  }  setCurrentStep(application.getFirstWizardStep());}  }
class C{  private boolean confirmDeletion(ConsoleApplication app) throws ClientException {  if (app.isInteractive()) {    app.println();    if (!app.confirmAction(INFO_DSCFG_CONFIRM_DELETE.get(relation.getUserFriendlyName()),false)) {      app.errPrintln(INFO_DSCFG_CONFIRM_DELETE_FAIL.get(relation.getUserFriendlyName()));      return false;    }  }  return true;}  }
class C{  @Override public String findInitParameter(String name){  parametersLock.readLock().lock();  try {    return parameters.get(name);  }  finally {    parametersLock.readLock().unlock();  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  FileSystemView fsv=null;  if (isAcceptAllFileFilterUsed()) {    removeChoosableFileFilter(getAcceptAllFileFilter());  }  if (fileSystemView.equals(FileSystemView.getFileSystemView())) {    fsv=fileSystemView;    fileSystemView=null;  }  s.defaultWriteObject();  if (fsv != null) {    fileSystemView=fsv;  }  if (isAcceptAllFileFilterUsed()) {    addChoosableFileFilter(getAcceptAllFileFilter());  }  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static GeneralizedTime valueOf(final long timeMS){  Reject.ifTrue(timeMS < MIN_GENERALIZED_TIME_MS,"timeMS is too old to represent as a generalized time");  return new GeneralizedTime(null,null,timeMS,null);}  }
class C{  void selectField(Object f,int count){  AttributedCharacterIterator iterator=getIterator();  if (iterator != null && (f instanceof AttributedCharacterIterator.Attribute)) {    AttributedCharacterIterator.Attribute field=(AttributedCharacterIterator.Attribute)f;    iterator.first();    while (iterator.current() != CharacterIterator.DONE) {      while (iterator.getAttribute(field) == null && iterator.next() != CharacterIterator.DONE)       ;      if (iterator.current() != CharacterIterator.DONE) {        int limit=iterator.getRunLimit(field);        if (--count <= 0) {          getFormattedTextField().select(iterator.getIndex(),limit);          break;        }        iterator.setIndex(limit);        iterator.next();      }    }  }}  }
class C{  public Scoping createScoping(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SCOPING,value);  if (obj == null) {    return new ScopingImpl(value);  } else {    return (Scoping)obj;  }}  }
class C{  public AddressingFeature(boolean enabled,boolean required,Responses responses){  this.enabled=enabled;  this.required=required;  this.responses=responses;}  }
class C{  public Builder superiorType(String superiorTypeOID){  this.superiorTypeOID=superiorTypeOID;  return this;}  }
class C{  public static void write(OutputStream out,NSObject root) throws IOException {  int minVersion=getMinimumRequiredVersion(root);  if (minVersion > VERSION_00) {    String versionString=((minVersion == VERSION_10) ? "v1.0" : ((minVersion == VERSION_15) ? "v1.5" : ((minVersion == VERSION_20) ? "v2.0" : "v0.0")));    throw new IOException("The given property list structure cannot be saved. " + "The required version of the binary format (" + versionString + ") is not yet supported.");  }  BinaryPropertyListWriter w=new BinaryPropertyListWriter(out,minVersion);  w.write(root);}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void test_getP(){  DSAParams params=new DSAParameterSpec(p,q,g);  assertEquals("Invalid P",p,params.getP());}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_StringZ(){  StringTokenizer st=new StringTokenizer("This:is:a:test:String",":",true);  st.nextElement();  assertTrue("Created incorrect tokenizer",st.countTokens() == 8 && (st.nextElement().equals(":")));  st=new StringTokenizer("This:is:a:test:String",null,true);  st=new StringTokenizer("This:is:a:test:String",null,false);  try {    new StringTokenizer(null,":",true);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public boolean isAckSent(long cseqNo){  if (this.getLastTransaction() == null)   return true;  if (this.getLastTransaction() instanceof ClientTransaction) {    if (this.getLastAckSent() == null) {      return false;    } else {      return cseqNo <= ((SIPRequest)this.getLastAckSent()).getCSeq().getSeqNumber();    }  } else {    return true;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String attrValue;  doc=(Document)load("hc_staff",true);  newAttribute=doc.createAttribute("lang");  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(3);  domesticAttr=testEmployee.setAttributeNode(newAttribute);  attrValue=testEmployee.getAttribute("lang");  assertEquals("elementGetElementEmptyAssert","",attrValue);}  }
class C{  public boolean isDataFlavorSupported(DataFlavor df){  return getDropTargetContext().isDataFlavorSupported(df);}  }
class C{  private boolean doAcquireNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void testRead1() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  byte res;  for (int i=0; i < data.length; i++) {    if ((res=(byte)cis.read()) != data[i]) {      fail("read() returned the incorrect value. " + "Expected: " + data[i] + ", Got: "+ res+ ".");    }  }  if (cis.read() != -1) {    fail("read() should return -1 at the end of the stream.");  }}  }
class C{  public CharArrayReader(char buf[],int offset,int length){  if ((offset < 0) || (offset > buf.length) || (length < 0)|| ((offset + length) < 0)) {    throw new IllegalArgumentException();  }  this.buf=buf;  this.pos=offset;  this.count=Math.min(offset + length,buf.length);  this.markedPos=offset;}  }
class C{  public ResourceResponse update(final Context context,Request request,String resourceId,String rev,JsonValue oldValue,JsonValue newValue,Set<JsonPointer> relationshipFields,Set<JsonPointer> alreadyPersistedRelationshipFields) throws ResourceException {  Context managedContext=new ManagedObjectContext(context);  JsonValue decryptedNew=decrypt(newValue);  JsonValue decryptedOld=decrypt(oldValue);  if (!encryptionValueChanged(oldValue) && isEqual(decryptedOld,decryptedNew)) {    return newResourceResponse(resourceId,rev,oldValue);  }  execScriptHook(context,ScriptHook.onUpdate,decryptedNew,prepareScriptBindings(context,request,resourceId,decryptedOld,decryptedNew));  updateRelationshipFields(context,resourceId,relationshipFields,decryptedOld,decryptedNew);  relationshipFields.removeAll(alreadyPersistedRelationshipFields);  validateRelationshipFields(managedContext,decryptedOld,decryptedNew,relationshipFields);  populateVirtualProperties(context,request,decryptedNew);  JsonValue strippedRelationshipFields=stripRelationshipFields(decryptedNew);  onStore(context,decryptedNew);  UpdateRequest updateRequest=Requests.newUpdateRequest(repoId(resourceId),decryptedNew);  updateRequest.setRevision(rev);  ResourceResponse response=connectionFactory.getConnection().update(context,updateRequest);  JsonValue responseContent=response.getContent();  responseContent.asMap().putAll(strippedRelationshipFields.asMap());  responseContent.asMap().putAll(persistRelationships(false,managedContext,resourceId,oldValue,responseContent,relationshipFields).asMap());  executePostUpdate(context,request,resourceId,decryptedOld,responseContent);  performSyncAction(context,request,resourceId,SynchronizationService.SyncServiceAction.notifyUpdate,decryptedOld,responseContent);  ResourceResponse readResponse=connectionFactory.getConnection().read(context,Requests.newReadRequest(repoId(resourceId)));  readResponse.getContent().asMap().putAll(strippedRelationshipFields.asMap());  return readResponse;}  }
class C{  private final void _startBuffering() throws IOException {  _ensureRoom(16);  int ptr=_currPtr;  if (_buffered == null) {    int len=ptr - _currStart;    if (len > 0) {      ptr=0;      _output.write(_currBuffer,_currStart,len);    }  }  _currStart=_currPtr=ptr + 5;  _buffered=new ByteAccumulator(_buffered,_currBuffer,ptr);}  }
class C{  public boolean removeOperation(Operation operation){  return opQueue.remove(operation);}  }
class C{  void register(Region region,String prefix){  if (region == null || prefix == null) {    throw new IllegalArgumentException("Neither Region nor Prefix may be null");  }  List<LazyStyle> styles=m.get(region);  if (styles == null) {    styles=new LinkedList<LazyStyle>();    styles.add(new LazyStyle(prefix));    m.put(region,styles);  } else {    for (    LazyStyle s : styles) {      if (prefix.equals(s.prefix)) {        return;      }    }    styles.add(new LazyStyle(prefix));  }  registeredRegions.put(region.getName(),region);}  }
class C{  static void destroyMBean(User user) throws Exception {  String mname=createManagedName(user);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    return;  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  ObjectName oname=createObjectName(domain,user);  if (mserver.isRegistered(oname))   mserver.unregisterMBean(oname);}  }
class C{  public void test_setLjava_lang_ObjectLjava_lang_Object() throws Exception {  TestField x=new TestField();  Field f=null;  double val=0.0;  try {    f=x.getClass().getDeclaredField("doubleField");    f.set(x,new Double(1.0));    val=f.getDouble(x);  } catch (  Exception e) {    fail("Exception during set test : " + e.getMessage());  }  assertEquals("Returned incorrect double field value",1.0,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.set(x,new Double(1.0));    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("doubleFField");    assertFalse(f.isAccessible());    f.set(x,new Double(1.0));    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.set(null,true);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("doubleSField");  f.set(null,new Double(1.0));  val=f.getDouble(x);  assertEquals("Returned incorrect double field value",1.0,val);}  }
class C{  private boolean containsValue(List list,String name){  for (Iterator iter=list.iterator(); iter.hasNext(); ) {    if (((String)iter.next()).trim().equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.MgmtDataElement createMgmtDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.MgmtDataElementImpl();}  }
class C{  private static String isPropertyValid(String line){  String str=null;  String retVal=null;  try {    int index=line.indexOf(EQUAL_TO);    str=line.substring(index + 1,line.length());    if ((str != null) && (str.trim().length() > 0)) {      retVal=str;    }  } catch (  Exception ex) {    Debug.log("FileUtils.isListEntryValid() threw exception :",ex);  }  return retVal;}  }
class C{  private String chooseRandomRuleOption(final IntUnaryOperator randomInRange,final char character){  for (  final String rule : rules) {    final String[] tokens=rule.split(" ");    if (tokens[0].equals(String.valueOf(character))) {      if (tokens.length > 1) {        final int randomOptionIndex=randomInRange.applyAsInt(tokens.length - 1) + 1;        return tokens[randomOptionIndex];      }    }  }  return null;}  }
class C{  public boolean hasChildNodes(){  return (null != m_firstChild);}  }
class C{  void startEdit(){  assert (verifyArity());  int oc=ownedCount();  assert (!inTrans());  flags|=F_TRANS;  Name[] oldNames=names;  Name[] ownBuffer=(oc == 2 ? originalNames : null);  assert (ownBuffer != oldNames);  if (ownBuffer != null && ownBuffer.length >= length) {    names=copyNamesInto(ownBuffer);  } else {    final int SLOP=2;    names=Arrays.copyOf(oldNames,Math.max(length + SLOP,oldNames.length));    if (oc < 2)     ++flags;    assert (ownedCount() == oc + 1);  }  originalNames=oldNames;  assert (originalNames != names);  firstChange=length;  assert (inTrans());}  }
class C{  public AuthnContext createAuthnContext(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_CONTEXT,elem);  if (obj == null) {    return new AuthnContextImpl(elem);  } else {    return (AuthnContext)obj;  }}  }
class C{  public void updateStepVisibility(QuickSetup qs){  for (  WizardStep s : getApplication().getWizardSteps()) {    setStepVisible(s,getApplication().isVisible(s,qs));  }}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  RestAssured.baseURI=BASE_URI;  RestAssured.port=PORT;}  }
class C{  public ReplicationCliReturnCode execute(){  boolean applyTimeout=uData.getMaximumDuration() > 0;  long startTime=TimeThread.getTime();  long purgeMaxTime=getTimeoutInSeconds() * 1000L;  long endMaxTime=startTime + purgeMaxTime;  app.print(formatter.getFormattedProgress(INFO_REPLICATION_PURGE_HISTORICAL_LOCAL_ENVIRONMENT.get()));  PointAdder pointAdder=new PointAdder(app);  pointAdder.start();  try {    EmbeddedDirectoryServer server=manageEmbeddedDirectoryServerForRestrictedOps(configParams().configurationFile(configFile).disableConnectionHandlers(true));    server.start();  } catch (  OpenDsException ode) {    pointAdder.stop();    app.println(ode.getMessageObject());    logger.error(LocalizableMessage.raw("Error starting server with file " + configFile + ": "+ ode,ode));    return ReplicationCliReturnCode.ERROR_LOCAL_PURGE_HISTORICAL_SERVER_START;  }  pointAdder.stop();  app.print(formatter.getFormattedDone());  app.println();  app.println();  app.print(formatter.getFormattedProgress(INFO_REPLICATION_PURGE_HISTORICAL_LOCAL_STARTING.get()));  app.println();  if (applyTimeout && timeoutOccurred(endMaxTime)) {    return handleTimeout();  }  try {    for (    DN baseDN : uData.getBaseDNs()) {      LDAPReplicationDomain domain=LDAPReplicationDomain.retrievesReplicationDomain(baseDN);      domain.purgeConflictsHistorical(null,startTime + purgeMaxTime);    }  } catch (  DirectoryException de) {    if (de.getResultCode() == ResultCode.ADMIN_LIMIT_EXCEEDED) {      return handleTimeout();    } else {      return handleGenericExecuting(de);    }  }  return ReplicationCliReturnCode.SUCCESSFUL;}  }
class C{  private String s(Integer val){  return String.valueOf(val);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (primitiveArray) {    return convertFromWrapperToPrimitiveTypes();  } else {    return this;  }}  }
class C{  public boolean isFlavorSerializedObjectType(){  return isRepresentationClassSerializable() && isMimeTypeEqual(javaSerializedObjectMimeType);}  }
class C{  private static synchronized void buildModuleInstanceForService(String realm,String serviceName){  if (DEBUG.messageEnabled()) {    DEBUG.message("start moduleInstanceTable : " + MODULE_INSTANCE_TABLE + " for realm : "+ realm+ " and service : "+ serviceName);  }  try {    String moduleName=getModuleName(serviceName);    if (DEBUG.messageEnabled()) {      DEBUG.message("Module name : " + moduleName);    }    if ((moduleName != null) && (moduleName.length() != 0)) {      ServiceConfigManager scm=new ServiceConfigManager(serviceName,getAdminToken());      ServiceConfig config=scm.getOrganizationConfig(realm,null);      if (config == null) {        if (DEBUG.messageEnabled()) {          DEBUG.message("AMAuthenticationManager." + "buildModuleInstanceForService: Service=" + serviceName + " not configured in realm="+ realm);        }      }      realm=DNUtils.normalizeDN(com.sun.identity.sm.DNMapper.orgNameToDN(realm));synchronized (MODULE_INSTANCE_TABLE) {        Map<String,Set<String>> moduleMap=MODULE_INSTANCE_TABLE.remove(realm);        if (moduleMap != null) {          Map<String,Set<String>> newMap=new HashMap<String,Set<String>>(moduleMap);          newMap.remove(moduleName);          moduleMap=newMap;        }        Set<String> instanceSet=new HashSet<String>();        Map<String,Set<String>> defaultAttrs=null;        if (config != null) {          defaultAttrs=config.getAttributesWithoutDefaults();        }        if (defaultAttrs != null && !defaultAttrs.isEmpty()) {          instanceSet.add(moduleName);        }        Set<String> instances=null;        if (config != null) {          instances=config.getSubConfigNames();        }        if (instances != null) {          instanceSet.addAll(instances);        }        if (!instanceSet.isEmpty()) {          if (moduleMap == null) {            moduleMap=new HashMap<String,Set<String>>();          }          moduleMap.put(moduleName,instanceSet);        }        if (moduleMap != null && !moduleMap.isEmpty()) {          MODULE_INSTANCE_TABLE.put(realm,moduleMap);        }      }    }  } catch (  Exception e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("build module instance for service error: ",e);    }  }  if (DEBUG.messageEnabled()) {    DEBUG.message("return moduleInstanceTable: " + MODULE_INSTANCE_TABLE);  }}  }
class C{  private void parseMinorVersion(String minorVer) throws SAMLException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Response(Element): invalid " + "MinorVersion",e);    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  if (minorVersion > SAMLConstants.PROTOCOL_MINOR_VERSION_ONE) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Response(Element): MinorVersion" + " of the Response is too high.");    }    throw new SAMLRequestVersionTooHighException(SAMLUtils.bundle.getString("responseVersionTooHigh"));  } else   if (minorVersion < SAMLConstants.PROTOCOL_MINOR_VERSION_ZERO) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Response(Element): MinorVersion" + " of the Response is too low.");    }    throw new SAMLRequestVersionTooLowException(SAMLUtils.bundle.getString("responseVersionTooLow"));  }}  }
class C{  private static byte[] longToByteArray(long l){  byte[] retVal=new byte[8];  for (int i=0; i < 8; i++) {    retVal[i]=(byte)l;    l>>=8;  }  return retVal;}  }
class C{  private void runPatchers(){  if (patchers != null) {    for (int i=0; i < patchersLen; i++)     patchers[i].run();  }}  }
class C{  MultistepExprHolder addInSortedOrder(ExpressionOwner exprOwner,int stepCount){  MultistepExprHolder first=this;  MultistepExprHolder next=this;  MultistepExprHolder prev=null;  while (null != next) {    if (stepCount >= next.m_stepCount) {      MultistepExprHolder newholder=new MultistepExprHolder(exprOwner,stepCount,next);      if (null == prev)       first=newholder; else       prev.m_next=newholder;      return first;    }    prev=next;    next=next.m_next;  }  prev.m_next=new MultistepExprHolder(exprOwner,stepCount,null);  return first;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.TransformType createTransformType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformTypeImpl();}  }
class C{  public void clearIdRepoPluginsCache(){  Map cache=null;synchronized (idrepoPlugins) {    readonlyPlugins.clear();    cache=new HashMap(idrepoPlugins);    idrepoPlugins.clear();    readonlyPlugins.clear();  }  for (Iterator onames=cache.keySet().iterator(); onames.hasNext(); ) {    Map repos=(Map)cache.get(onames.next());    for (Iterator items=repos.keySet().iterator(); items.hasNext(); ) {      String name=items.next().toString();      IdRepo repo=(IdRepo)repos.get(name);      repo.removeListener();      repo.shutdown();    }  }}  }
class C{  public PrintWriter log(PrintWriter out){  return log(this,out);}  }
class C{  public NotificationSet parseXML(){  if (document == null) {    return null;  }  Element notifSetElem=document.getDocumentElement();  NotificationSet notificationSet=new NotificationSet();  setNotificationSetAttributes(notifSetElem,notificationSet);  NodeList notifs=notifSetElem.getElementsByTagName("Notification");  if (notifs == null) {    return notificationSet;  }  int nodeLen=notifs.getLength();  for (int i=0; i < nodeLen; i++) {    notificationSet.addNotification(parseNotificationElement((Element)notifs.item(i)));  }  return notificationSet;}  }
class C{  public UpgradeContext(CallbackHandler handler) throws InitializationException {  this(BuildVersion.instanceVersion(),BuildVersion.binaryVersion(),handler);}  }
class C{  public CertificateException(){  super();}  }
class C{  void replaceEntry(WriteableTransaction txn,Entry before,Entry after) throws StorageRuntimeException {  deleteEntry(txn,before);  addEntry(txn,after);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public boolean has_cycle(){  if (is_overlap())   return true;  Set<BrdItem> visited_items=new TreeSet<BrdItem>();  Collection<BrdItem> start_contacts=get_start_contacts();  for (  BrdItem curr_contact : start_contacts) {    visited_items.add(curr_contact);  }  boolean ignore_areas=false;  if (!net_nos.is_empty()) {    RuleNet curr_net=r_board.brd_rules.nets.get(net_nos.first());    if (curr_net != null && curr_net.get_class() != null) {      ignore_areas=curr_net.get_class().get_ignore_cycles_with_areas();    }  }  for (  BrdItem curr_contact : start_contacts) {    if (curr_contact.has_cycle_recu(visited_items,this,this,ignore_areas))     return true;  }  return false;}  }
class C{  public static PrintServiceAttributeSet unmodifiableView(PrintServiceAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiablePrintServiceAttributeSet(attributeSet);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistreturnlastitem.class,args);}  }
class C{  private void emitImplicitConversion(BasicType ptype,Class<?> pclass,Object arg){  assert (basicType(pclass) == ptype);  if (pclass == ptype.basicTypeClass() && ptype != L_TYPE)   return;switch (ptype) {case L_TYPE:    if (VerifyType.isNullConversion(Object.class,pclass,false)) {      if (PROFILE_LEVEL > 0)       emitReferenceCast(Object.class,arg);      return;    }  emitReferenceCast(pclass,arg);return;case I_TYPE:if (!VerifyType.isNullConversion(int.class,pclass,false)) emitPrimCast(ptype.basicTypeWrapper(),Wrapper.forPrimitiveType(pclass));return;}throw newInternalError("bad implicit conversion: tc=" + ptype + ": "+ pclass);}  }
class C{  public void addTab(String title,Component component){  insertTab(title,null,component,null,pages.size());}  }
class C{  public Directive(String directiveType){  type=directiveType;}  }
class C{  public XPathContext(Object owner,boolean recursiveVarContext){  this(recursiveVarContext);  m_owner=owner;  try {    m_ownerGetErrorListener=m_owner.getClass().getMethod("getErrorListener",new Class[]{});  } catch (  NoSuchMethodException nsme) {  }}  }
class C{  public StatusDetail createStatusDetail() throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_DETAIL);  if (object == null) {    return new StatusDetailImpl();  } else {    return (StatusDetail)object;  }}  }
class C{  public void testDoubleValueNegativeInfinity1(){  String a="-2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == Double.NEGATIVE_INFINITY);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public boolean useSecureReplication(){  return secureReplication;}  }
class C{  public String password(){  return password;}  }
class C{  public int hashCode(){  return (Float.floatToIntBits(extraAlpha) * 31 + rule);}  }
class C{  public boolean isInSphere(Vector origin,double radius){  return (NumberConversions.square(origin.x - x) + NumberConversions.square(origin.y - y) + NumberConversions.square(origin.z - z)) <= NumberConversions.square(radius);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.RetrievalMethodType createRetrievalMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.RetrievalMethodTypeImpl();}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  public Builder removeAllSuperiorRules(){  this.superiorRuleIDs.clear();  return this;}  }
class C{  public void testAlgorithmParameterGenerator02() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg;  for (int i=0; i < algs.length; i++) {    apg=AlgorithmParameterGenerator.getInstance(algs[i]);    assertEquals("Incorrect algorithm",apg.getAlgorithm(),algs[i]);  }}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public static <T>T cloneBean(final Object bean){  try {    return (T)BeanUtils.cloneBean(bean);  } catch (  IllegalAccessException|InstantiationException|InvocationTargetException|NoSuchMethodException e) {    throw new RuntimeException(e);  }}  }
class C{  public static List<SearchResultEntry> findFields(String text,boolean byDesc){  List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();  for (  MappedClass mc : VisualizerWindow.instance.getMappings().values()) {    if (byDesc) {      List<MappedMember> fieldList=mc.findFieldsByDesc(text);      for (      MappedMember mm : fieldList) {        results.add(new SearchResultEntry(mc.getNode(),mm.getFieldNode()));      }    } else {      List<MappedMember> fieldList=mc.findFieldsByName(text,false);      for (      MappedMember mm : fieldList) {        results.add(new SearchResultEntry(mc.getNode(),mm.getFieldNode()));      }    }  }  return results;}  }
class C{  static Promise<String> blockingPromiseString(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  public MetaPen(){  super(META_PEN);}  }
class C{  public BAD_CONTEXT(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public static String htmlEncode(final String html){  validate(html,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return html.chars().mapToObj(null).map(null).collect(joining());}  }
class C{  @Override protected Object createSsoServerIdRepoSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   idrepoSvcGroup=new SsoServerIdRepoSvcImpl(this,server); else   idrepoSvcGroup=new SsoServerIdRepoSvcImpl(this);  return idrepoSvcGroup;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String xmlFile=getStringOptionValue(IArgument.XML_FILE);  IOutput outputWriter=getOutputWriter();  try {    String[] params={serverName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SERVER_CONFIG_XML",params);    String xml=xmlFile;    boolean isWebEnabled=getCommandManager().webEnabled();    if (!isWebEnabled) {      xml=CLIUtil.getFileContent(getCommandManager(),xmlFile);    }    ServerConfiguration.setServerConfigXML(adminSSOToken,serverName,xml);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-serverconfig-xml-succeeded"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SERVER_CONFIG_XML",params);  } catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("SetServerConfigXML.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVER_CONFIG_XML",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={serverName,e.getMessage()};    debugError("SetServerConfigXML.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVER_CONFIG_XML",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("SetServerConfigXML.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVER_CONFIG_XML",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public byte nextByte(){  return nextByte(defaultRadix);}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  private int epochMonthToMonth(int epochMonth){  return (epochMonth + hijrahStartEpochMonth) % 12;}  }
class C{  static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){  MethodType targetType=target.type();  MethodType collectorType=collector.type();  int collectArgCount=collectorType.parameterCount();  Class<?> collectValType=collectorType.returnType();  int collectValCount=(collectValType == void.class ? 0 : 1);  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);  if (!retainOriginalArgs) {    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());  }  MethodType lambdaType=srcType.invokerType();  Name[] names=arguments(2,lambdaType);  final int collectNamePos=names.length - 2;  final int targetNamePos=names.length - 1;  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);  Name[] targetArgs=new Name[targetType.parameterCount()];  int inputArgPos=1;  int targetArgPos=0;  int chunk=collectArgPos;  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);  inputArgPos+=chunk;  targetArgPos+=chunk;  if (collectValType != void.class) {    targetArgs[targetArgPos++]=names[collectNamePos];  }  chunk=collectArgCount;  if (retainOriginalArgs) {    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);    targetArgPos+=chunk;  }  inputArgPos+=chunk;  chunk=targetArgs.length - targetArgPos;  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);  assert (inputArgPos + chunk == collectNamePos);  names[targetNamePos]=new Name(target,(Object[])targetArgs);  LambdaForm form=new LambdaForm("collect",lambdaType.parameterCount(),names);  return SimpleMethodHandle.make(srcType,form);}  }
class C{  @Override public void onLogout(HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken){  try {    Map<String,Object> config=generateConfig(request,response,ssoToken);    config.put(JwtSessionModule.HMAC_SIGNING_KEY,Base64.encode(new byte[32]));    persistentCookieModuleWrapper.initialize(null,config);    persistentCookieModuleWrapper.deleteSessionJwtCookie(persistentCookieModuleWrapper.prepareMessageInfo(null,response));  } catch (  AuthenticationException|AuthException e) {    DEBUG.error("Failed to initialise the underlying JASPI Server Auth Module.",e);  }}  }
class C{  private void sendModifyMsg(boolean firstBackend,String... fractionalConf) throws Exception {  List<Modification> mods=new ArrayList<>();  boolean first=true;  for (  String fracCfgValue : fractionalConf) {    if (!first) {      Attribute attr=Attributes.create(fracCfgValue.toLowerCase(),fracCfgValue + "NewValue");      mods.add(new Modification(ModificationType.REPLACE,attr));    }    first=false;  }  Attribute attr=Attributes.create(OPTIONAL_ATTR.toLowerCase(),OPTIONAL_ATTR + "NewValue");  mods.add(new Modification(ModificationType.REPLACE,attr));  attr=Attributes.create(SYNCHRO_OPTIONAL_ATTR.toLowerCase(),SYNCHRO_OPTIONAL_ATTR + "Value");  mods.add(new Modification(ModificationType.ADD,attr));  DN entryDn=DN.valueOf(firstBackend ? ENTRY_DN : ENTRY_DN2);  ModifyMsg modifyMsg=new ModifyMsg(gen.newCSN(),entryDn,mods,ENTRY_UUID);  replicationDomain.publish(modifyMsg);}  }
class C{  Values initializeValues(Thread current){  return current.localValues=new Values();}  }
class C{  public BackupDescriptor(BackupInfo info){  this.path=new File(info.getBackupDirectory().getPath());  this.creationDate=info.getBackupDate();  this.type=info.isIncremental() ? Type.INCREMENTAL : Type.FULL;  this.id=info.getBackupID();  this.info=info;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider03() throws Exception {  for (  String validValue : getValidValues()) {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(validValue,getDefaultProvider());    assertTrue("Not TrustManagerFactory object",trustMF instanceof TrustManagerFactory);    assertEquals("Invalid algorithm",trustMF.getAlgorithm(),validValue);    assertEquals("Invalid provider",trustMF.getProvider(),getDefaultProvider());  }}  }
class C{  public static Set toOrderedSet(Object[] array){  Set set=null;  if ((array != null) && (array.length > 0)) {    set=new OrderedSet();    for (int i=0; i < array.length; i++) {      set.add((array[i].toString()).trim());    }  }  return (set == null) ? Collections.EMPTY_SET : set;}  }
class C{  public TokenFilter toTokenQuery(QueryFilter<String> filter){  TokenFilterBuilder builder=new TokenFilterBuilder();  List<QueryFilter<CoreTokenField>> tokenFilter=new ArrayList<QueryFilter<CoreTokenField>>();  tokenFilter.add(filter.accept(TOKEN_QUERY_TRANSLATOR,null));  tokenFilter.add(QueryFilter.equalTo(CoreTokenField.TOKEN_TYPE,tokenType));  return builder.withQuery(QueryFilter.and(tokenFilter)).build();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.AgreementMethodType createAgreementMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.AgreementMethodTypeImpl();}  }
class C{  @Override public void addClusterListener(ClusterListener listener){  if (listener != null && !clusterListeners.contains(listener)) {    clusterListeners.add(listener);    listener.setCluster(this);  }}  }
class C{  public boolean hasMember(Guid guid) throws UMSException {  Principal principal=getPrincipal();  if (principal == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL));  }  PersistentObject member=UMSObject.getObject(principal,guid);  return hasMember(member);}  }
class C{  public synchronized StringBuffer insert(int index,char ch){  insert0(index,ch);  return this;}  }
class C{  public boolean isColored(){  return getPdfObject().getAsNumber(PdfName.PaintType).intValue() == PaintType.COLORED;}  }
class C{  public void applyLocalizedPattern(String pattern){  applyPattern(pattern,true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode01.class,args);}  }
class C{  public static void evaluateBundleValues(ResourceBundle bundle,Properties lookupProp){  Enumeration propNames=bundle.getKeys();  while (propNames.hasMoreElements()) {    String name=(String)propNames.nextElement();    String value=(String)SetupUtils.evaluatePropertiesValue(bundle.getString(name),lookupProp);    if (value != null) {      lookupProp.setProperty(name,value);    }  }}  }
class C{  public void onToggleBroadcast(View v){  if (mMP4FileUri == null) {    mStatusView.setErrorMessage("An MP4 file has not been selected");    return;  }  if (mWZBroadcast.getStatus().isIdle()) {    mMP4Broadcaster.setFileDescriptor(getFD(mMP4FileUri));    mWZBroadcastConfig.setAudioEnabled(false);    WZStreamingError configValidationError=mWZBroadcastConfig.validateForBroadcast();    if (configValidationError != null) {      mStatusView.setErrorMessage(configValidationError.getErrorDescription());    } else {      mWZBroadcast.startBroadcast(mWZBroadcastConfig,this);    }  } else   if (mWZBroadcast.getStatus().isRunning()) {    if (mVideoView.isPlaying()) {      mVideoView.pause();    }    mWZBroadcast.endBroadcast(this);  }}  }
class C{  public static StartTLSExtendedRequest unmodifiableStartTLSExtendedRequest(final StartTLSExtendedRequest request){  if (request instanceof UnmodifiableStartTLSExtendedRequestImpl) {    return request;  }  return new UnmodifiableStartTLSExtendedRequestImpl(request);}  }
class C{  public String encode(){  return PROTO_VERSION_FIELD + protoVersion + Separators.NEWLINE;}  }
class C{  public void handleTblSiteButtonAddRequest(RequestInvocationEvent event){  SiteAddViewBean vb=(SiteAddViewBean)getViewBean(SiteAddViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public SOAPMessage onMessage(SOAPMessage message,HttpServletRequest request){  if (Utils.debug.messageEnabled()) {    Utils.debug.message("SOAPReceiver.onMessage:");  }  String soapAction=request.getHeader(SOAPBindingConstants.SOAP_ACTION_HEADER);  if (soapAction != null && soapAction.length() == 0) {    soapAction=request.getRequestURI();  }  String remoteAddr=ClientUtils.getClientIPAddress(request);  X509Certificate[] allCerts=(X509Certificate[])request.getAttribute("javax.servlet.request.X509Certificate");  X509Certificate certificate=null;  if (allCerts != null && allCerts.length > 0) {    certificate=allCerts[0];  }  String key=request.getPathInfo();  if (key != null) {    key=key.substring(1);    if (Utils.debug.messageEnabled()) {      Utils.debug.message("SOAPReceiver.doPost: key = " + key + "\nSOAPAction = "+ soapAction+ "\nremoteAttr = "+ remoteAddr);    }    RequestHandler handler=(RequestHandler)SOAPBindingService.handlers.get(key);    if (handler != null) {      if (soapAction != null) {        List supportedSOAPActions=(List)SOAPBindingService.supportedSOAPActionsMap.get(key);        if (supportedSOAPActions != null && !supportedSOAPActions.isEmpty() && !supportedSOAPActions.contains(soapAction)) {          return FormSOAPError("Client","unsupportedSOAPAction",null);        }      }      Message req=null;      try {        req=new Message(message);        Utils.enforceProcessingRules(req,null,true);        req.setIPAddress(remoteAddr);        req.setPeerCertificate(certificate);        req.setProtocol(request.getScheme());        if (req.getSecurityProfileType() != Message.ANONYMOUS && !SecurityUtils.verifyMessage(req)) {          return FormSOAPError("Client","cannotVerifySignature",req);        }        String authMech=req.getAuthenticationMechanism();        if (Utils.debug.messageEnabled()) {          Utils.debug.message("SOAPReceiver.onMessage: " + "authMech = " + authMech + ", isClientAuthentication = "+ req.isClientAuthentication());        }        if (authMech == null || !SOAPBindingService.getSupportedAuthenticationMechanisms().contains(authMech)) {          return FormSOAPError("Server","unsupportedAuthMech",req);        }        WebServiceAuthenticator wsAuthenticator=SOAPBindingService.getWebServiceAuthenticator();        if (wsAuthenticator == null) {          return FormSOAPError("Server","noWSAuthentication",req);        }        Object token=wsAuthenticator.authenticate(req,null,null,request);        req.setToken(token);        String[] data={req.getCorrelationHeader().getMessageID(),key};        LogUtil.access(Level.INFO,LogUtil.WS_SUCCESS,data);        Message resp=handler.processRequest(req);        resp.getCorrelationHeader().setRefToMessageID(req.getCorrelationHeader().getMessageID());        int securityProfileType=resp.getSecurityProfileType();        if (securityProfileType == Message.ANONYMOUS || securityProfileType == Message.BEARER_TOKEN) {          return resp.toSOAPMessage();        } else {          Element sigElem=SecurityUtils.signMessage(resp);          if (sigElem == null) {            Utils.debug.error("SOAPReceiver.onMessage: " + "Unable to sign response");            return FormSOAPError("Server","cannotSignResponse",req);          }          Document doc=sigElem.getOwnerDocument();          return Utils.DocumentToSOAPMessage(doc);        }      } catch (      SOAPFaultException sfe) {        Message sfmsg=sfe.getSOAPFaultMessage();        if (sfmsg == null) {          return FormSOAPError("Server","unknownError",req);        }        if (Utils.debug.messageEnabled()) {          Utils.debug.message("SOAPReceiver.onMessage: " + "got SOAPFaultException",sfe);        }        try {          if (req != null) {            CorrelationHeader corrH=sfmsg.getCorrelationHeader();            if (corrH != null) {              corrH.setRefToMessageID(req.getCorrelationHeader().getMessageID());            }          }          return sfmsg.toSOAPMessage();        } catch (        Exception ex) {          Utils.debug.message("SOAPReceiver.onMessage: ",ex);          return FormSOAPError("Server",ex,req);        }      }catch (      Throwable t) {        Utils.debug.message("SOAPReceiver.onMessage: ",t);        return FormSOAPError("Server",t,req);      }    } else {      return FormSOAPError("Server","missingRequestHandler",null);    }  }  return FormSOAPError("Server","missingKey",null);}  }
class C{  public AMActivityAuditEventBuilder component(AuditConstants.Component value){  putComponent(jsonValue,value.toString());  return this;}  }
class C{  DropLocation dropLocationForPoint(Point p){  DropLocation location=null;  int row=getClosestRowForLocation(p.x,p.y);  Rectangle bounds=getRowBounds(row);  TreeModel model=getModel();  Object root=(model == null) ? null : model.getRoot();  TreePath rootPath=(root == null) ? null : new TreePath(root);  TreePath child;  TreePath parent;  boolean outside=row == -1 || p.y < bounds.y || p.y >= bounds.y + bounds.height;switch (dropMode) {case USE_SELECTION:case ON:    if (outside) {      location=new DropLocation(p,null,-1);    } else {      location=new DropLocation(p,getPathForRow(row),-1);    }  break;case INSERT:case ON_OR_INSERT:if (row == -1) {  if (root != null && !model.isLeaf(root) && isExpanded(rootPath)) {    location=new DropLocation(p,rootPath,0);  } else {    location=new DropLocation(p,null,-1);  }  break;}boolean checkOn=dropMode == DropMode.ON_OR_INSERT || !model.isLeaf(getPathForRow(row).getLastPathComponent());Section section=SwingUtilities2.liesInVertical(bounds,p,checkOn);if (section == LEADING) {child=getPathForRow(row);parent=child.getParentPath();} else if (section == TRAILING) {int index=row + 1;if (index >= getRowCount()) {if (model.isLeaf(root) || !isExpanded(rootPath)) {location=new DropLocation(p,null,-1);} else {parent=rootPath;index=model.getChildCount(root);location=new DropLocation(p,parent,index);}break;}child=getPathForRow(index);parent=child.getParentPath();} else {assert checkOn;location=new DropLocation(p,getPathForRow(row),-1);break;}if (parent != null) {location=new DropLocation(p,parent,model.getIndexOfChild(parent.getLastPathComponent(),child.getLastPathComponent()));} else if (checkOn || !model.isLeaf(root)) {location=new DropLocation(p,rootPath,-1);} else {location=new DropLocation(p,null,-1);}break;default :assert false : "Unexpected drop mode";}if (outside || row != expandRow) {cancelDropTimer();}if (!outside && row != expandRow) {if (isCollapsed(row)) {expandRow=row;startDropTimer();}}return location;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.CHRONO_LOCAL_DATE_TIME_TYPE,this);}  }
class C{  public BigInteger[] generateSignature(byte[] message){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  BigInteger r=null;  BigInteger s=null;  do {    BigInteger k=null;    int nBitLength=n.bitLength();    do {      do {        k=new BigInteger(nBitLength,random);      } while (k.equals(ZERO) || k.compareTo(n) >= 0);      ECPoint p=key.getParameters().getG().multiply(k);      BigInteger x=p.getX().toBigInteger();      r=x.mod(n);    } while (r.equals(ZERO));    BigInteger d=((ECPrivateKeyParameters)key).getD();    s=k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);  } while (s.equals(ZERO));  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  public WriterException(String message){  super(message);}  }
class C{  private boolean serviceHasIngressRule(List<Ingress> ingresses,Service service){  String serviceName=KubernetesHelper.getName(service);  for (  Ingress ingress : ingresses) {    IngressSpec spec=ingress.getSpec();    if (spec == null) {      break;    }    List<IngressRule> rules=spec.getRules();    if (rules == null) {      break;    }    for (    IngressRule rule : rules) {      HTTPIngressRuleValue http=rule.getHttp();      if (http == null) {        break;      }      List<HTTPIngressPath> paths=http.getPaths();      if (paths == null) {        break;      }      for (      HTTPIngressPath path : paths) {        IngressBackend backend=path.getBackend();        if (backend == null) {          break;        }        if (Objects.equals(serviceName,backend.getServiceName())) {          return true;        }      }    }  }  return false;}  }
class C{  protected void startNode(int node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof NodeConsumer) {  }switch (m_dtm.getNodeType(node)) {case DTM.COMMENT_NODE:{      XMLString data=m_dtm.getStringValue(node);      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        data.dispatchAsComment(lh);      }    }  break;case DTM.DOCUMENT_FRAGMENT_NODE:break;case DTM.DOCUMENT_NODE:this.m_contentHandler.startDocument();break;case DTM.ELEMENT_NODE:DTM dtm=m_dtm;for (int nsn=dtm.getFirstNamespaceNode(node,true); DTM.NULL != nsn; nsn=dtm.getNextNamespaceNode(node,nsn,true)) {String prefix=dtm.getNodeNameX(nsn);this.m_contentHandler.startPrefixMapping(prefix,dtm.getNodeValue(nsn));}String ns=dtm.getNamespaceURI(node);if (null == ns) ns="";org.xml.sax.helpers.AttributesImpl attrs=new org.xml.sax.helpers.AttributesImpl();for (int i=dtm.getFirstAttribute(node); i != DTM.NULL; i=dtm.getNextAttribute(i)) {attrs.addAttribute(dtm.getNamespaceURI(i),dtm.getLocalName(i),dtm.getNodeName(i),"CDATA",dtm.getNodeValue(i));}this.m_contentHandler.startElement(ns,m_dtm.getLocalName(node),m_dtm.getNodeName(node),attrs);break;case DTM.PROCESSING_INSTRUCTION_NODE:{String name=m_dtm.getNodeName(node);if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(name,m_dtm.getNodeValue(node));}}break;case DTM.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case DTM.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case DTM.ENTITY_REFERENCE_NODE:{if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(m_dtm.getNodeName(node));} else {}}break;default :}}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(signedAttr),new SimpleAttributeTableGenerator(unsignedAttr),signedAttr);}  }
class C{  protected static Collection findCertificates(X509CertStoreSelector certSelect,List certStores) throws AnnotatedException {  Set certs=new HashSet();  Iterator iter=certStores.iterator();  while (iter.hasNext()) {    Object obj=iter.next();    if (obj instanceof X509Store) {      X509Store certStore=(X509Store)obj;      try {        certs.addAll(certStore.getMatches(certSelect));      } catch (      StoreException e) {        throw new AnnotatedException("Problem while picking certificates from X.509 store.",e);      }    } else {      CertStore certStore=(CertStore)obj;      try {        certs.addAll(certStore.getCertificates(certSelect));      } catch (      CertStoreException e) {        throw new AnnotatedException("Problem while picking certificates from certificate store.",e);      }    }  }  return certs;}  }
class C{  public void putByteArray(final String key,final byte[] value){  try {    systemRoot.putByteArray(fixKey(key),value);  } catch (  final Exception e) {    System.err.print(e);  }}  }
class C{  public BasicConstraints(int pathLenConstraint){  this.cA=ASN1Boolean.getInstance(true);  this.pathLenConstraint=new ASN1Integer(pathLenConstraint);}  }
class C{  @Deprecated public final void stop(){  if (stopOrSuspend(false))   Thread.currentThread().stop();}  }
class C{  public ParameterBlock add(int i){  return add(new Integer(i));}  }
class C{  public int availablePermits(){  return sync.getPermits();}  }
class C{  public static void addDefaultProfile(SpringApplication app){  Map<String,Object> defProperties=new HashMap<>();  defProperties.put(SPRING_PROFILE_DEFAULT,Constants.SPRING_PROFILE_DEVELOPMENT);  app.setDefaultProperties(defProperties);}  }
class C{  public UtilProxyIDPRequestValidator(String reqBinding,boolean isFromECP,Debug debug,SAML2MetaManager saml2MetaManager){  this.debug=debug;  this.reqBinding=isFromECP ? SAML2Constants.SOAP : reqBinding;  this.saml2MetaManager=saml2MetaManager;  debug.message("Using request binding: {}",reqBinding);}  }
class C{  public static AdditionalLogItem unquotedKeyValue(final Class<?> source,final String key,final Object value){  Reject.ifNull(source,key,value);  return new AdditionalLogItem(source,key,value,false);}  }
class C{  protected void burstStringInto(Container c,String d,int maxll){  int len=d.length();  if (len <= 0)   return;  if (len > maxll) {    int p=d.lastIndexOf(' ',maxll);    if (p <= 0)     p=d.indexOf(' ',maxll);    if (p > 0 && p < len) {      burstStringInto(c,d.substring(0,p),maxll);      burstStringInto(c,d.substring(p + 1),maxll);      return;    }  }  JLabel label=new JLabel(d,JLabel.LEFT);  label.setName("OptionPane.label");  configureMessageLabel(label);  c.add(label);}  }
class C{  public StateInteractive left_button_clicked(PlaPointFloat p_next_corner){  if (item_to_modify == null) {    return return_state;  }  if (item_to_modify.get_area().contains(p_next_corner)) {    super.add_corner(p_next_corner);    i_brd.repaint();  }  return this;}  }
class C{  private ReplicationServer createReplicationServer(int rsId,String testCase) throws ConfigException {  SortedSet<String> replServers=createRSListExceptOne(rsId);  int rsPort=-1;  int groupId=-1;switch (rsId) {case RS1_ID:    rsPort=rs1Port;  groupId=RS1_GID;break;case RS2_ID:rsPort=rs2Port;groupId=RS2_GID;break;case RS3_ID:rsPort=rs3Port;groupId=RS3_GID;break;default :fail("Unknown replication server id.");}String dir="topologyViewTest" + rsId + testCase+ "Db";ReplServerFakeConfiguration conf=new ReplServerFakeConfiguration(rsPort,dir,0,rsId,0,100,replServers,groupId,1000,5000);return new ReplicationServer(conf);}  }
class C{  @Override public int hashCode(){  return totalSeconds;}  }
class C{  public SQLNonTransientException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    int maxCounter;    TreePath parentPath=SwingUtilities2.getTreePath(e,getModel());    FHTreeStateNode changedParentNode=getNodeForPath(parentPath,false,false);    changedIndexs=e.getChildIndices();    if (changedParentNode != null && changedIndexs != null && (maxCounter=changedIndexs.length) > 0) {      Object[] children=e.getChildren();      boolean isVisible=(changedParentNode.isVisible() && changedParentNode.isExpanded());      for (int counter=maxCounter - 1; counter >= 0; counter--) {        changedParentNode.removeChildAtModelIndex(changedIndexs[counter],isVisible);      }      if (isVisible) {        if (treeSelectionModel != null)         treeSelectionModel.resetRowSelection();        if (treeModel.getChildCount(changedParentNode.getUserObject()) == 0 && changedParentNode.isLeaf()) {          changedParentNode.collapse(false);        }        visibleNodesChanged();      } else       if (changedParentNode.isVisible())       visibleNodesChanged();    }  }}  }
class C{  public boolean isComplete(){  String s=getParameter("stale");  if ("true".equalsIgnoreCase(s)) {    return false;  } else {    return this.complete;  }}  }
class C{  public void removeElementAt(int i){  if (null == m_map)   return;  if (i >= m_firstFree)   throw new ArrayIndexOutOfBoundsException(i + " >= " + m_firstFree); else   if (i < 0)   throw new ArrayIndexOutOfBoundsException(i);  if (i < m_firstFree - 1)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);  m_firstFree--;  m_map[m_firstFree]=null;}  }
class C{  public FileChangelogDB(final ReplicationServer replicationServer,String dbDirectoryPath,CryptoSuite cryptoSuite) throws ConfigException {  this.replicationServer=replicationServer;  this.dbDirectory=makeDir(dbDirectoryPath);  this.cryptoSuite=cryptoSuite;}  }
class C{  public void clear(){  column=new String[0];  types=null;  rows=new Vector();  ncolumns=nrows=0;  atmaxrows=false;}  }
class C{  void dumpMarkers(){  if (focusLog.isLoggable(PlatformLogger.Level.FINEST)) {    focusLog.finest(">>> Markers dump, time: {0}",System.currentTimeMillis());synchronized (this) {      if (typeAheadMarkers.size() != 0) {        Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator();        while (iter.hasNext()) {          TypeAheadMarker marker=iter.next();          focusLog.finest("    {0}",marker);        }      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node oldChild;  Node replacedChild;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");  elementList=doc.getElementsByTagName("employee");  oldChild=elementList.item(1);{    boolean success=false;    try {      replacedChild=rootNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public static boolean isKeyChar(final char c,final boolean allowCompatChars){  final ASCIICharProp cp=ASCIICharProp.valueOf(c);  return cp != null ? cp.isKeyChar(allowCompatChars) : false;}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  private void grow(int minCapacity){  int oldCapacity=elementData.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity - minCapacity < 0)   newCapacity=minCapacity;  if (newCapacity - MAX_ARRAY_SIZE > 0)   newCapacity=hugeCapacity(minCapacity);  elementData=Arrays.copyOf(elementData,newCapacity);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonenodetrue.class,args);}  }
class C{  public boolean isCellEditable(EventObject anEvent){  return delegate.isCellEditable(anEvent);}  }
class C{  public Value parseValueFromTwoVarOpILFD(Value left,int baseOp,String methodName,Value right,SemanticScope scope,LineCol lineCol) throws SyntaxException {  if (left.type() instanceof PrimitiveTypeDef) {    if (right.type() instanceof PrimitiveTypeDef) {      if (left.type().equals(DoubleTypeDef.get()) || right.type().equals(DoubleTypeDef.get())) {        Value a=cast(DoubleTypeDef.get(),left,lineCol);        Value b=cast(DoubleTypeDef.get(),right,lineCol);        return new Ins.TwoVarOp(a,b,baseOp + 3,DoubleTypeDef.get(),lineCol);      } else       if (left.type().equals(FloatTypeDef.get()) || right.type().equals(FloatTypeDef.get())) {        Value a=cast(FloatTypeDef.get(),left,lineCol);        Value b=cast(FloatTypeDef.get(),right,lineCol);        return new Ins.TwoVarOp(a,b,baseOp + 2,FloatTypeDef.get(),lineCol);      } else       if (left.type().equals(LongTypeDef.get()) || right.type().equals(LongTypeDef.get())) {        Value a=cast(LongTypeDef.get(),left,lineCol);        Value b=cast(LongTypeDef.get(),right,lineCol);        return new Ins.TwoVarOp(a,b,baseOp + 1,LongTypeDef.get(),lineCol);      } else {        if ((baseOp == Ins.TwoVarOp.Iand || baseOp == Ins.TwoVarOp.Ior || baseOp == Ins.TwoVarOp.Ixor) && left.type().equals(BoolTypeDef.get()) && right.type().equals(BoolTypeDef.get())) {          return new Ins.TwoVarOp(left,right,baseOp,BoolTypeDef.get(),lineCol);        } else {          Value a=cast(IntTypeDef.get(),left,lineCol);          Value b=cast(IntTypeDef.get(),right,lineCol);          return new Ins.TwoVarOp(a,b,baseOp,IntTypeDef.get(),lineCol);        }      }    } else {      return parseValueFromTwoVarOpILFD(boxPrimitive(left,lineCol),baseOp,methodName,right,scope,lineCol);    }  } else {    List<Value> args=new ArrayList<>();    args.add(right);    return invokeMethodWithArgs(lineCol,left.type(),left,methodName,args,scope);  }}  }
class C{  protected boolean scrollPageUp(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int top=widget.getScrollY() - getInnerHeight(widget);  int topLine=layout.getLineForVertical(top);  if (topLine >= 0) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(topLine));    return true;  }  return false;}  }
class C{  public static javax.xml.namespace.QName parseQName(String lexicalXSDQName,NamespaceContext nsc){  if (theConverter == null)   initConverter();  return theConverter.parseQName(lexicalXSDQName,nsc);}  }
class C{  public void initializeGlobalArguments(OutputStream outStream) throws ArgumentException {  LinkedHashSet<Argument> args=new LinkedHashSet<>();  cliArg=cliArgument();  args.add(cliArg);  removeAllArg=BooleanArgument.builder("remove-all").shortIdentifier('a').description(INFO_UNINSTALLDS_DESCRIPTION_REMOVE_ALL.get()).buildArgument();  args.add(removeAllArg);  removeServerLibrariesArg=BooleanArgument.builder("server-libraries").shortIdentifier('l').description(INFO_UNINSTALLDS_DESCRIPTION_REMOVE_SERVER_LIBRARIES.get()).buildArgument();  args.add(removeServerLibrariesArg);  removeDatabasesArg=BooleanArgument.builder("databases").shortIdentifier('d').description(INFO_UNINSTALLDS_DESCRIPTION_REMOVE_DATABASES.get()).buildArgument();  args.add(removeDatabasesArg);  removeLogFilesArg=BooleanArgument.builder("log-files").shortIdentifier('L').description(INFO_UNINSTALLDS_DESCRIPTION_REMOVE_LOG_FILES.get()).buildArgument();  args.add(removeLogFilesArg);  removeConfigurationFilesArg=BooleanArgument.builder("configuration-files").shortIdentifier('c').description(INFO_UNINSTALLDS_DESCRIPTION_REMOVE_CONFIGURATION_FILES.get()).buildArgument();  args.add(removeConfigurationFilesArg);  removeBackupFilesArg=BooleanArgument.builder("backup-files").shortIdentifier('b').description(INFO_UNINSTALLDS_DESCRIPTION_REMOVE_BACKUP_FILES.get()).buildArgument();  args.add(removeBackupFilesArg);  removeLDIFFilesArg=BooleanArgument.builder("ldif-files").shortIdentifier('e').description(INFO_UNINSTALLDS_DESCRIPTION_REMOVE_LDIF_FILES.get()).buildArgument();  args.add(removeLDIFFilesArg);  noPromptArg=noPromptArgument();  args.add(noPromptArg);  forceOnErrorArg=BooleanArgument.builder("forceOnError").shortIdentifier('f').description(INFO_UNINSTALLDS_DESCRIPTION_FORCE.get("--" + noPromptArg.getLongIdentifier())).buildArgument();  args.add(forceOnErrorArg);  quietArg=quietArgument();  args.add(quietArg);  final List<Argument> defaultArgs=new ArrayList<>(createGlobalArguments(outStream,alwaysSSL));  secureArgsList.createVisibleAdminUidArgument(INFO_DESCRIPTION_ADMIN_UID.get());  int index=defaultArgs.indexOf(secureArgsList.getBindDnArg());  if (index != -1) {    defaultArgs.add(index,secureArgsList.getAdminUidArg());    defaultArgs.remove(secureArgsList.getBindDnArg());  } else {    defaultArgs.add(secureArgsList.getAdminUidArg());  }  defaultArgs.remove(secureArgsList.getHostNameArg());  defaultArgs.remove(secureArgsList.getPortArg());  referencedHostNameArg=StringArgument.builder(OPTION_LONG_REFERENCED_HOST_NAME).shortIdentifier(OPTION_SHORT_HOST).description(INFO_DESCRIPTION_REFERENCED_HOST.get()).defaultValue(UserData.getDefaultHostName()).valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildArgument();  defaultArgs.add(referencedHostNameArg);  args.addAll(defaultArgs);  initializeGlobalArguments(args);}  }
class C{  private static String cleanUpLanguageCode(String language){  String languageCode=StringUtils.substringBefore(language,"_");  return StringUtils.lowerCase(languageCode);}  }
class C{  protected void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  try {    if (m_elemContext.m_startTagOpen) {      closeStartTag();      m_elemContext.m_startTagOpen=false;    }    m_ispreserve=true;    m_writer.write(ch,start,length);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public JColorChooser(){  this(Color.white);}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo addFoo(Foo foo){  foo.setNew(true);  return fooPersistence.update(foo);}  }
class C{  public static int[] adjustSizes(int delta,SizeRequirements[] children){  return new int[0];}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_xpath.fixupVariables(vars,globalsSize);}  }
class C{  public Cursor fetch(Long actionID){  if (actionID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_ACTIONID + "=" + actionID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc1;  Document doc2;  Attr newAttr;  NodeList elementList;  Node testAddr;  Attr setAttr1;  doc1=(Document)load("staffNS",true);  doc2=(Document)load("staffNS",true);  newAttr=doc2.createAttributeNS(namespaceURI,qualifiedName);  elementList=doc1.getElementsByTagName("emp:address");  testAddr=elementList.item(0);{    boolean success=false;    try {      setAttr1=((Element)testAddr).setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public boolean isCombo(){  return getFieldFlag(FF_COMBO);}  }
class C{  public void processedEvent(int eventType,Map eventParams) throws AMAuthCallBackException {  if (pluginSet != Collections.EMPTY_SET) {    Iterator itr=pluginSet.iterator();    while (itr.hasNext()) {      AMAuthCallBack pluginClass=instantiateClass((String)itr.next());      if (pluginClass != null)       pluginClass.authEventCallback(eventType,eventParams);    }  }  if (pluginSet.isEmpty() && debug.messageEnabled()) {    debug.message("AMAuthCallBackImpl : processedEvent. " + "pluginSet is empty");  }}  }
class C{  public void testAddSubscriptSpan(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.SUBSCRIPT);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof SubscriptSpan);}  }
class C{  private Target<GlideDrawable> loadNormal(Context ctx,ImageLoader img){  return Glide.with(ctx).load(img.getUrl()).placeholder(img.getPlaceHolder()).diskCacheStrategy(img.getDiskCacheStrategy()).into(img.getImgView());}  }
class C{  public boolean isCompatibleWith(String version) throws NumberFormatException {  String[] requested=version.split("\\.");  String[] provided=specVersion.split("\\.");  for (int i=0; i < Math.min(requested.length,provided.length); i++) {    int reqNum=Integer.parseInt(requested[i]);    int provNum=Integer.parseInt(provided[i]);    if (reqNum > provNum) {      return false;    } else     if (reqNum < provNum) {      return true;    }  }  if (requested.length > provided.length) {    return false;  }  return true;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public NO_IMPLEMENT(){  this("");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PasswordElement createPasswordElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PasswordElementImpl();}  }
class C{  public static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttrNode;  String attrValue;  String attrName;  int attrType;  doc=(Document)load("staff",true);  newAttrNode=doc.createAttribute("district");  attrValue=newAttrNode.getNodeValue();  assertEquals("value","",attrValue);  attrName=newAttrNode.getNodeName();  assertEquals("name","district",attrName);  attrType=(int)newAttrNode.getNodeType();  assertEquals("type",2,attrType);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssSamlV11Token11Element createWssSamlV11Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssSamlV11Token11ElementImpl();}  }
class C{  public void reStart(boolean infiniteTry){  reStart(connectedRS.get().session,infiniteTry);}  }
class C{  private boolean mapPatternElemPos(int nesting,boolean isStart,boolean isAttrName){  if (0 == nesting) {    if (m_patternMapSize >= m_patternMap.length) {      int patternMap[]=m_patternMap;      int len=m_patternMap.length;      m_patternMap=new int[m_patternMapSize + 100];      System.arraycopy(patternMap,0,m_patternMap,0,len);    }    if (!isStart) {      m_patternMap[m_patternMapSize - 1]-=TARGETEXTRA;    }    m_patternMap[m_patternMapSize]=(m_compiler.getTokenQueueSize() - (isAttrName ? 1 : 0)) + TARGETEXTRA;    m_patternMapSize++;    isStart=false;  }  return isStart;}  }
class C{  @Override public void update(){  if (!tileExit) {    yPos-=pushThreshold;    updatePosition();    if (!collide(false))     tileExit=true;    return;  }  if (collide(true)) {    completeCycle=true;    consumedStats=true;    Main.updateScore(1000);  }}  }
class C{  public static void error(Level level,String msgid,String data[],Object session,Map props){  if (logger != null) {    try {      logger.error(level,msgid,data,session,props);    } catch (    LogException le) {      SAML2Utils.debug.error("LogUtil.error:Couldn't write log:",le);    }  }}  }
class C{  @Inject public RefreshTokenResource(OAuth2RequestFactory requestFactory,AccessTokenService accessTokenService,ExceptionHandler exceptionHandler,JacksonRepresentationFactory jacksonRepresentationFactory){  this.requestFactory=requestFactory;  this.accessTokenService=accessTokenService;  this.exceptionHandler=exceptionHandler;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  void reset(){  setFilter(PASSTHROUGH_FILTER);}  }
class C{  @Override public void performTask(TokenStorageAdapter adapter) throws DataLayerException {  Token token=adapter.read(tokenId);  handler.processResults(token);}  }
class C{  public void testGetObject1() throws Exception {  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  IvParameterSpec ips=new IvParameterSpec(new byte[]{1,2,3,4,5,6,7,8});  Cipher cipher=Cipher.getInstance("DES/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  String secret="secret string";  Mock_SealedObject so=new Mock_SealedObject(secret,cipher);  assertEquals("The returned object does not equals to the " + "original object.",secret,so.getObject(key));  assertTrue("The encodedParams field of SealedObject object " + "should contain the encoded algorithm parameters.",Arrays.equals(so.get_encodedParams(),cipher.getParameters().getEncoded()));  try {    so.getObject((Key)null);    fail("InvalidKeyException expected");  } catch (  InvalidKeyException e) {  }catch (  NullPointerException e) {  }}  }
class C{  private static int[][] canonicalArrayForm(Vector ranges){  return (int[][])ranges.toArray(new int[ranges.size()][]);}  }
class C{  void constantLock(){  Class thing=Thread.class;synchronized (Thread.class) {  }}  }
class C{  public void addWidgets(WidgetsModel model){  mView.setWidgets(model);  mAdapter.setWidgetsModel(model);  mAdapter.notifyDataSetChanged();}  }
class C{  public static String showInternalInputDialog(Component parentComponent,Object message){  return showInternalInputDialog(parentComponent,message,UIManager.getString("OptionPane.inputDialogTitle",parentComponent),QUESTION_MESSAGE);}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage image;  if (destCM == null) {    ColorModel cm=src.getColorModel();    image=new BufferedImage(cm,src.getRaster().createCompatibleWritableRaster(),cm.isAlphaPremultiplied(),null);  } else {    int w=src.getWidth();    int h=src.getHeight();    image=new BufferedImage(destCM,destCM.createCompatibleWritableRaster(w,h),destCM.isAlphaPremultiplied(),null);  }  return image;}  }
class C{  public void makeImmutable(){  isMutable=false;}  }
class C{  public void registerComponent(JComponent component){  component.removeMouseListener(this);  component.addMouseListener(this);  component.removeMouseMotionListener(moveBeforeEnterListener);  component.addMouseMotionListener(moveBeforeEnterListener);  component.removeKeyListener(accessibilityKeyListener);  component.addKeyListener(accessibilityKeyListener);}  }
class C{  public void testInit04() throws Exception, InvalidAlgorithmParameterException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  DHParameterSpec dhPs=((DHPrivateKey)privKey).getParams();  AlgorithmParameterSpec aps=new RSAKeyGenParameterSpec(10,new BigInteger("10"));  byte[] bbRes1;  byte[] bbRes2;  byte[] bbRes3;  SecureRandom randomNull=null;  SecureRandom random=new SecureRandom();  for (int i=0; i < kAgs.length; i++) {    kAgs[i].init(privKey,dhPs);    kAgs[i].doPhase(publKey,true);    bbRes1=kAgs[i].generateSecret();    kAgs[i].init(privKey,dhPs,random);    kAgs[i].doPhase(publKey,true);    bbRes2=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes2.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes2[j]);    }    kAgs[i].init(privKey,dhPs,randomNull);    kAgs[i].doPhase(publKey,true);    bbRes3=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes3.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes3[j]);    }    try {      kAgs[i].init(publKey,dhPs,random);      fail("InvalidKeyException expected");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(privKey,aps,random);      fail("InvalidAlgorithmParameterException expected");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected void tearDown(){}  }
class C{  public void upgrade() throws Exception {  if (!checkUpgradePreconditions()) {    return;  }  backupManager.createOpenDJBackup();  try (BufferedWriter out=new BufferedWriter(new FileWriter(upgradeMarker))){    out.write(currentVersion.toString());    out.write('\n');  }   if (currentVersion.isOlderThan(DJ_245_VERSION)) {    backupFile("config/config.ldif");    backupFile("config/admin-backend.ldif");    backupFile("config/java.properties");    unpackZipFile(true);    callOldDJUpgrade();  } else {    unpackZipFile(false);    if (currentVersion.equals(DJ_246_VERSION)) {      try {        File badSchema=new File(installRoot + File.separator + "config"+ File.separator+ "schema"+ File.separator+ "cts-add-schema.ldif");        delete(badSchema);      } catch (      RuntimeException e) {      }      File goodSchema=new File(servletCtx.getRealPath(File.separator + "WEB-INF" + File.separator+ "template"+ File.separator+ "ldif"+ File.separator+ "sfha"+ File.separator+ "99-cts-add-schema-backport.ldif"));      File moveTo=new File(installRoot + File.separator + "config"+ File.separator+ "schema"+ File.separator+ "99-cts-add-schema-backport.ldif");      copy(goodSchema.toPath(),moveTo.toPath());    }    int ret=callDJUpgradeMechanism();    if (ret == 0) {      message("Upgrade completed successfully");      delete(upgradeMarker);      final String lockFile=LockFileManager.getServerLockFileName();      LockFileManager.releaseLock(lockFile,new StringBuilder());    } else {      throw new UpgradeException("OpenDJ upgrade failed with code:  " + ret);    }  }}  }
class C{  public static int checkFileExtension(final String fileName,final ResourceType type){  if (type == null || fileName == null) {    return 1;  }  if (fileName.indexOf('.') == -1) {    return 0;  }  return checkSingleExtension(getFileExtension(fileName),type) ? 0 : 1;}  }
class C{  public ShapelessRecipe addIngredient(int count,Material ingredient){  return addIngredient(count,ingredient,0);}  }
class C{  public static void initDatabase(boolean dropDb,String replicationString,Session session){  if (replicationString.startsWith("{") && replicationString.endsWith("}") && replicationString.contains("Strategy")&& replicationString.contains("'class'")) {    logger.info("Initing Docussandra Cassandra Database with replication factor: \"" + replicationString + "\".");  } else {    throw new IllegalArgumentException("Replication String: \"" + replicationString + "\" does not appear to be valid.");  }  if (dropDb) {    logger.warn("WARNING: DROPPING EXISTING DOCUSSANDRA database! You have 5 seconds to kill this process before the data will be dropped.");    try {      Thread.sleep(5000);    } catch (    InterruptedException e) {    }    executeWithLog(session,"drop keyspace if exists docussandra;");  }  executeWithLog(session,"create keyspace IF NOT EXISTS docussandra with replication = " + replicationString + ";");  executeWithLog(session,"use docussandra;");  executeWithLog(session,"create table IF NOT EXISTS sys_meta (\n" + "	id text,\n" + "	version text,\n"+ "	created_at timestamp,\n"+ "	updated_at timestamp,\n"+ "	primary key ((id), updated_at))\n"+ "with clustering order by (updated_at DESC);");  executeWithLog(session,"create table IF NOT EXISTS sys_db (\n" + "	db_name text primary key,\n" + "	description text,\n"+ "	created_at timestamp,\n"+ "	updated_at timestamp\n"+ ");");  executeWithLog(session,"create table IF NOT EXISTS sys_tbl (\n" + "	db_name text,\n" + "	tbl_name text,\n"+ "	description text,\n"+ "	created_at timestamp,\n"+ "	updated_at timestamp,\n"+ "	primary key ((db_name), tbl_name)\n"+ ");");  executeWithLog(session,"create table IF NOT EXISTS sys_idx (\n" + "	db_name text,\n" + "	tbl_name text,\n"+ "	name text,\n"+ "	is_unique boolean,\n"+ "	fields list<text>,\n"+ "	fields_type list<text>,\n"+ "	only list<text>,\n"+ "     is_active boolean,\n"+ "	created_at timestamp,\n"+ "	updated_at timestamp,\n"+ "	primary key ((db_name), tbl_name, name)\n"+ ");");  executeWithLog(session,"create table IF NOT EXISTS sys_idx_status (\n" + "     id uuid,\n" + "	db_name text,\n"+ "	tbl_name text,\n"+ "	index_name text,\n"+ "	records_completed bigint,\n"+ "	total_records bigint,\n"+ "	started_at timestamp,\n"+ "	updated_at timestamp,\n"+ "     errors list<text>,\n"+ "     fatal_error text,\n"+ "	primary key (id)\n"+ ");");  executeWithLog(session,"create table IF NOT EXISTS sys_idx_not_done (\n" + "    id uuid primary key\n" + ");");}  }
class C{  private void select(SwipeOpenViewHolder selected,int actionState){  if (selected == this.selected && actionState == this.actionState) {    return;  }  final int prevActionState=this.actionState;  endRecoverAnimation(selected,true);  this.actionState=actionState;  int actionStateMask=(1 << (DIRECTION_FLAG_COUNT + DIRECTION_FLAG_COUNT * actionState)) - 1;  boolean preventLayout=false;  if (closeOnAction && selected != null && prevSelected != null && selected != prevSelected) {    closeOpenHolder(prevSelected);    prevSelected=null;    preventLayout=true;  }  if (closeOnAction && openedPositions.size() > 0) {    for (int i=0; i < openedPositions.size(); i++) {      RecyclerView.ViewHolder holder=recyclerView.findViewHolderForAdapterPosition(openedPositions.keyAt(i));      if (holder instanceof SwipeOpenViewHolder && (selected == null || holder.getAdapterPosition() != selected.getViewHolder().getAdapterPosition())) {        closeOpenHolder((SwipeOpenViewHolder)holder);      }      openedPositions.removeAt(i);    }  }  if (this.selected != null) {    prevSelected=this.selected;    if (prevSelected.getViewHolder().itemView.getParent() != null) {      final int swipeDir=checkPreviousSwipeDirection(prevSelected.getViewHolder());      releaseVelocityTracker();      final float targetTranslateX, targetTranslateY;      getSelectedDxDy(tmpPosition);      final float currentTranslateX=tmpPosition[0];      final float currentTranslateY=tmpPosition[1];      if (ViewCompat.getTranslationX(prevSelected.getSwipeView()) != 0 || ViewCompat.getTranslationY(prevSelected.getSwipeView()) != 0) {        final float absTranslateX=Math.abs(currentTranslateX);        final float absTranslateY=Math.abs(currentTranslateY);        final SavedOpenState state;switch (swipeDir) {case LEFT:case START:          targetTranslateY=0;        if (absTranslateX > prevSelected.getEndHiddenViewSize() / 2) {          targetTranslateX=prevSelected.getEndHiddenViewSize() * Math.signum(dX);          state=SavedOpenState.END_OPEN;        } else {          targetTranslateX=0;          state=null;        }      break;case RIGHT:case END:    targetTranslateY=0;  if (absTranslateX > prevSelected.getStartHiddenViewSize() / 2) {    targetTranslateX=prevSelected.getStartHiddenViewSize() * Math.signum(dX);    state=SavedOpenState.START_OPEN;  } else {    targetTranslateX=0;    state=null;  }break;case UP:targetTranslateX=0;if (absTranslateY > prevSelected.getEndHiddenViewSize() / 2) {targetTranslateY=prevSelected.getEndHiddenViewSize() * Math.signum(dY);state=SavedOpenState.END_OPEN;} else {targetTranslateY=0;state=null;}break;case DOWN:targetTranslateX=0;if (absTranslateY > prevSelected.getStartHiddenViewSize() / 2) {targetTranslateY=prevSelected.getStartHiddenViewSize() * Math.signum(dY);state=SavedOpenState.START_OPEN;} else {targetTranslateY=0;state=null;}break;default :state=null;targetTranslateX=0;targetTranslateY=0;}if (state == null) {openedPositions.remove(prevSelected.getViewHolder().getAdapterPosition());} else {openedPositions.put(prevSelected.getViewHolder().getAdapterPosition(),state);}final RecoverAnimation rv=new RecoverAnimation(prevSelected,prevActionState,currentTranslateX,currentTranslateY,targetTranslateX,targetTranslateY);final long duration=callback.getAnimationDuration(recyclerView,ANIMATION_TYPE_SWIPE,targetTranslateX - currentTranslateX,targetTranslateY - currentTranslateY);rv.setDuration(duration);recoverAnimations.add(rv);rv.start();preventLayout=true;} else {openedPositions.remove(prevSelected.getViewHolder().getAdapterPosition());}} else {callback.clearView(recyclerView,prevSelected);}this.selected=null;}if (selected != null) {selectedFlags=(callback.getAbsMovementFlags(recyclerView,selected.getViewHolder()) & actionStateMask) >> (this.actionState * DIRECTION_FLAG_COUNT);selectedStartX=selected.getViewHolder().itemView.getLeft() + ViewCompat.getTranslationX(selected.getSwipeView());selectedStartY=selected.getViewHolder().itemView.getTop() + ViewCompat.getTranslationY(selected.getSwipeView());this.selected=selected;}final ViewParent rvParent=recyclerView.getParent();if (rvParent != null) {rvParent.requestDisallowInterceptTouchEvent(this.selected != null);}if (!preventLayout) {recyclerView.getLayoutManager().requestSimpleAnimationsInNextLayout();}callback.onSelectedChanged(this.selected,this.actionState);recyclerView.invalidate();}  }
class C{  public boolean stopCellEditing(){  fireEditingStopped();  return true;}  }
class C{  private void updateDotVersionFile() throws UpgradeException {  try {    String baseDir=SystemProperties.get(SystemProperties.CONFIG_PATH);    String version=VersionUtils.getWarFileVersion();    String dotVersionFilePath=baseDir + "/.version";    File dotVersionFile=new File(dotVersionFilePath);    if (!dotVersionFile.exists()) {      debug.error("File " + dotVersionFile.getName() + " does not exist!");    }    writeToFile(dotVersionFilePath,version);  } catch (  Exception e) {    debug.error("Failed to update .version file: ",e);    UpgradeProgress.reportEnd("upgrade.failed");    throw new UpgradeException("Failed to update .version file, check debug logs for more information.");  }}  }
class C{  public byte[] toByteArray(){  byte[] newbuf=new byte[count];  System.arraycopy(buf,0,newbuf,0,count);  return newbuf;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  this.sawInvite=true;  try {    Response okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    sipProvider.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public int size(){  return attrs.size();}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,context.getComponent());}  }
class C{  public synchronized <T>void sendEvent(T event,Integer key){  sendEvent(event,key,false);}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolutionForCamera);}  }
class C{  public int installFunction(String name,Class func){  int funcIndex;  Object funcIndexObj=getFunctionID(name);  if (null != funcIndexObj) {    funcIndex=((Integer)funcIndexObj).intValue();    if (funcIndex < NUM_BUILT_IN_FUNCS) {      funcIndex=m_funcNextFreeIndex++;      m_functionID_customer.put(name,new Integer(funcIndex));    }    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;  } else {    funcIndex=m_funcNextFreeIndex++;    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;    m_functionID_customer.put(name,new Integer(funcIndex));  }  return funcIndex;}  }
class C{  @Deprecated public ConditionDecision(boolean satisfied,Map<String,Set<String>> advices,long ttl){  this.satisfied=satisfied;  this.advice=new HashMap<>(advices);  this.responseAttributes=new HashMap<>();  this.timeToLive=ttl;}  }
class C{  protected void installDefaults(JComponent c){  updateStyle(c);}  }
class C{  public NullKeyManagerProvider(){}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public DeflaterOutputStream(OutputStream out,Deflater def,int size,boolean syncFlush){  super(out);  if (out == null || def == null) {    throw new NullPointerException();  } else   if (size <= 0) {    throw new IllegalArgumentException("buffer size <= 0");  }  this.def=def;  this.buf=new byte[size];  this.syncFlush=syncFlush;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof ADPrincipal)) {    return false;  }  ADPrincipal that=(ADPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  private void walk(File directory,int depth,Collection<T> results) throws IOException {  checkIfCancelled(directory,depth,results);  if (handleDirectory(directory,depth,results)) {    handleDirectoryStart(directory,depth,results);    int childDepth=depth + 1;    if (depthLimit < 0 || childDepth <= depthLimit) {      checkIfCancelled(directory,depth,results);      File[] childFiles=filter == null ? directory.listFiles() : directory.listFiles(filter);      childFiles=filterDirectoryContents(directory,depth,childFiles);      if (childFiles == null) {        handleRestricted(directory,childDepth,results);      } else {        for (        File childFile : childFiles) {          if (childFile.isDirectory()) {            walk(childFile,childDepth,results);          } else {            checkIfCancelled(childFile,childDepth,results);            handleFile(childFile,childDepth,results);            checkIfCancelled(childFile,childDepth,results);          }        }      }    }    handleDirectoryEnd(directory,depth,results);  }  checkIfCancelled(directory,depth,results);}  }
class C{  public Boolean isConfigExportSharePasswordEnabled(){  return configExportSharePassword;}  }
class C{  public NotFileFilter(IOFileFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The filter must not be null");  }  this.filter=filter;}  }
class C{  public void handleParentagepathHrefRequest(RequestInvocationEvent event){  String path=(String)getDisplayFieldValue(PARENTAGE_PATH_HREF);  setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,path);  setCurrentLocation(path);  unlockPageTrailForSwapping();  forwardTo();}  }
class C{  public Vector(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public void increment(){  counter.getAndIncrement();}  }
class C{  public void testCase3(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={10,40,100,-55,96,51,76,40,-45,85,115,44,-127,115,-21,-62,-15,85,64,-87,-2,-36,-36,-106};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  TokenOperationsStore(final OperationStoreFactory operationStoreFactory,final Map<TokenType,OperationStore> tokenOperations,final OperationStore operationStore,final OperationStore operationFailureStore){  this.operationStoreFactory=operationStoreFactory;  this.tokenOperations=tokenOperations;  this.operationStore=operationStore;  this.operationFailureStore=operationFailureStore;}  }
class C{  public Builder addEncodedQueryParameter(String encodedName,String encodedValue){  if (encodedName == null)   throw new IllegalArgumentException("encodedName == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true,true));  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true,true) : null);  return this;}  }
class C{  public int groupCount(){  return parentPattern.capturingGroupCount - 1;}  }
class C{  public void releaseEglSurface(){  mEglCore.releaseSurface(mEGLSurface);  mEGLSurface=EGL14.EGL_NO_SURFACE;  mWidth=mHeight=-1;}  }
class C{  public boolean isSticky(){  return this.getItemType() == Material.PISTON_STICKY_BASE;}  }
class C{  private void retrieveCompletedOperationElements(AddOperation addOperation){  assertTrue(addOperation.getProcessingStartTime() > 0);  assertTrue(addOperation.getProcessingStopTime() >= addOperation.getProcessingStartTime());  assertTrue(addOperation.getProcessingTime() >= 0);}  }
class C{  public boolean hasOrganizationAttributes(){  Set o=AMAdminUtils.getDisplayableAttributeNames(serviceName,SchemaType.ORGANIZATION);  Set d=AMAdminUtils.getDisplayableAttributeNames(serviceName,SchemaType.DYNAMIC);  return (!o.isEmpty() || !d.isEmpty());}  }
class C{  static void testClassNewInstance(){  try {    Class c=Class.forName("LocalClass");    Object obj=c.newInstance();    System.out.println("LocalClass succeeded");  } catch (  Exception ex) {    System.err.println("LocalClass failed");    ex.printStackTrace();  }  try {    Class c=Class.forName("otherpackage.PackageAccess");    Object obj=c.newInstance();    System.err.println("ERROR: PackageAccess succeeded unexpectedly");  } catch (  IllegalAccessException iae) {    System.out.println("Got expected PackageAccess complaint");  }catch (  Exception ex) {    System.err.println("Got unexpected PackageAccess failure");    ex.printStackTrace();  }  LocalClass3.main();  try {    MaybeAbstract ma=new MaybeAbstract();    System.err.println("ERROR: MaybeAbstract succeeded unexpectedly");  } catch (  InstantiationError ie) {    System.out.println("Got expected InstantationError");  }catch (  Exception ex) {    System.err.println("Got unexpected MaybeAbstract failure");  }}  }
class C{  public void testGetEntry1() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  assertNull(cache.getEntry(testEntriesList.get(0).getName()),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.putEntry(testEntriesList.get(0),b,1);  assertNotNull(cache.getEntry(testEntriesList.get(0).getName()),"Expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  private void decrementWorkerCount(){  do {  } while (!compareAndDecrementWorkerCount(ctl.get()));}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  @Override protected boolean checkParam(final String reqParam) throws ConnectorException {  if (reqParam == null || reqParam.equals("")) {    return true;  }  if (Pattern.compile(Constants.INVALID_PATH_REGEX).matcher(reqParam).find()) {    return false;  }  return true;}  }
class C{  public boolean visitLocationPath(ExpressionOwner owner,LocPathIterator path){  return true;}  }
class C{  public RelationNotification(String notifType,Object sourceObj,long sequence,long timeStamp,String message,String id,String typeName,ObjectName objectName,List<ObjectName> unregMBeanList) throws IllegalArgumentException {  super(notifType,sourceObj,sequence,timeStamp,message);  if (!isValidBasicStrict(notifType,sourceObj,id,typeName) || !isValidCreate(notifType)) {    throw new IllegalArgumentException("Invalid parameter.");  }  relationId=id;  relationTypeName=typeName;  relationObjName=safeGetObjectName(objectName);  unregisterMBeanList=safeGetObjectNameList(unregMBeanList);}  }
class C{  public static BooleanArgument continueOnErrorArgument() throws ArgumentException {  return BooleanArgument.builder("continueOnError").shortIdentifier('c').description(INFO_DESCRIPTION_CONTINUE_ON_ERROR.get()).buildArgument();}  }
class C{  public void doGroupAction(Object obj){  if (target != null) {    target.doGroupAction(obj);  }}  }
class C{  public static byte[] writeToArray(NSObject root) throws IOException {  ByteArrayOutputStream bout=new ByteArrayOutputStream();  write(bout,root);  return bout.toByteArray();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AdviceType createAdviceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AdviceTypeImpl();}  }
class C{  static void checkIdentifier(final String name,final String msg){  checkIdentifier(name,0,-1,msg);}  }
class C{  public void itemStateChanged(ItemEvent e){  DefaultCellEditor.this.stopCellEditing();}  }
class C{  public ConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public static int hash32(final String text){  final byte[] bytes=text.getBytes();  return hash32(bytes,bytes.length);}  }
class C{  private static synchronized String formatAndParse(SimpleDateFormat formatDate,SimpleDateFormat parseDate,String text){  try {    Date date=parseDate.parse(text);    String result=formatDate.format(date);    return result;  } catch (  ParseException e) {    logger.warning("Unable to parse:" + text);  }  return "";}  }
class C{  public void destroy(){}  }
class C{  public void regenerate(){  if (code != null) {    try {      QRCodeWriter qc=new QRCodeWriter();      bm=qc.encode(code,1,1,hints);    } catch (    WriterException ex) {      throw new IllegalArgumentException(ex.getMessage(),ex.getCause());    }  }}  }
class C{  protected void paintComponent(Graphics g){  if (ui != null) {    Graphics scratchGraphics=(g == null) ? null : g.create();    try {      ui.update(scratchGraphics,this);    }  finally {      scratchGraphics.dispose();    }  }}  }
class C{  public void endDocument() throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.endDocument();}  }
class C{  public static void dump(String context,KeyStore keyStore,char[] keyPassword) throws KeyStoreException, NoSuchAlgorithmException {  PrintStream out=System.out;  out.println("context=" + context);  out.println("\tkeyStore=" + keyStore);  out.println("\tkeyStore.type=" + keyStore.getType());  out.println("\tkeyStore.provider=" + keyStore.getProvider());  out.println("\tkeyPassword=" + ((keyPassword == null) ? null : new String(keyPassword)));  out.println("\tsize=" + keyStore.size());  for (  String alias : Collections.list(keyStore.aliases())) {    out.println("alias=" + alias);    out.println("\tcreationDate=" + keyStore.getCreationDate(alias));    if (keyStore.isCertificateEntry(alias)) {      out.println("\tcertificate:");      out.println("==========================================");      out.println(keyStore.getCertificate(alias));      out.println("==========================================");      continue;    }    if (keyStore.isKeyEntry(alias)) {      out.println("\tkey:");      out.println("==========================================");      String key;      try {        key=("Key retrieved using password\n" + keyStore.getKey(alias,keyPassword));      } catch (      UnrecoverableKeyException e1) {        try {          key=("Key retrieved without password\n" + keyStore.getKey(alias,null));        } catch (        UnrecoverableKeyException e2) {          key="Key could not be retrieved";        }      }      out.println(key);      out.println("==========================================");      Certificate[] chain=keyStore.getCertificateChain(alias);      if (chain == null) {        out.println("No certificate chain associated with key");        out.println("==========================================");      } else {        for (int i=0; i < chain.length; i++) {          out.println("Certificate chain element #" + i);          out.println(chain[i]);          out.println("==========================================");        }      }      continue;    }    out.println("\tunknown entry type");  }}  }
class C{  void close() throws IOException {  if (serverSocket != null) {    serverSocket.close();    serverSocket=null;  }}  }
class C{  public FacebookOperationCanceledException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public static JPanel makeJPanel(){  JPanel pnl=new JPanel();  pnl.setOpaque(false);  return pnl;}  }
class C{  public static String convertJAXBToString(Object jaxbObj) throws JAXBException {  StringWriter sw=new StringWriter();  Marshaller marshaller=jaxbContext.createMarshaller();  marshaller.setProperty(PROP_JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  marshaller.setProperty(PROP_NAMESPACE_PREFIX_MAPPER,nsPrefixMapper);  marshaller.marshal(jaxbObj,sw);  return sw.toString();}  }
class C{  public double board_to_user(double p_value){  return UnitMeasure.scale(p_value * scale_factor,board_unit,user_unit);}  }
class C{  public Menu<T> toMenu(){  TableBuilder nbuilder=new TableBuilder();  Map<String,MenuCallback<T>> callbacks=new HashMap<>();  boolean useMultipleColumns=threshold >= 0 && numericCallbacks.size() >= threshold;  if (!columnHeadings.isEmpty()) {    appendHeadings(nbuilder);    if (useMultipleColumns) {      appendHeadings(nbuilder);    }  }  int sz=numericCallbacks.size();  int rows=sz;  if (useMultipleColumns) {    rows/=2;    rows+=sz % 2;  }  for (int i=0, j=rows; i < rows; i++, j++) {    nbuilder.startRow();    appendCells(nbuilder,i);    callbacks.put(String.valueOf(i + 1),numericCallbacks.get(i));    if (useMultipleColumns && j < sz) {      appendCells(nbuilder,j);      callbacks.put(String.valueOf(j + 1),numericCallbacks.get(j));    }  }  TableBuilder cbuilder=new TableBuilder();  for (int i=0; i < charCallbacks.size(); i++) {    char c=charKeys.get(i).charAt(0);    LocalizableMessage option=INFO_MENU_CHAR_OPTION.get(c);    cbuilder.startRow();    cbuilder.appendCell(option);    cbuilder.appendCell(charSynopsis.get(i));    callbacks.put(String.valueOf(c),charCallbacks.get(i));  }  TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());  boolean hasHeadings=!columnHeadings.isEmpty();  printer.setDisplayHeadings(hasHeadings);  if (hasHeadings) {    printer.setHeadingSeparatorStartColumn(1);  }  printer.setIndentWidth(4);  if (columnWidths.isEmpty()) {    printer.setColumnWidth(1,0);    if (useMultipleColumns) {      printer.setColumnWidth(3,0);    }  } else {    for (int i=0; i < columnWidths.size(); i++) {      Integer j=columnWidths.get(i);      if (j != null) {        printer.setColumnWidth(i + 1,j);        if (useMultipleColumns) {          printer.setColumnWidth(i + 2 + columnWidths.size(),j);        }      }    }  }  return new MenuImpl<>(app,title,prompt,nbuilder,cbuilder,printer,callbacks,allowMultiSelect,defaultCallback,defaultDescription,nMaxTries);}  }
class C{  public CharChunk encodeURL(String s,int start,int end) throws IOException {  if (c2b == null) {    bb=new ByteChunk(8);    cb=new CharChunk(2);    output=new CharChunk(64);    c2b=new C2BConverter(StandardCharsets.UTF_8);  } else {    bb.recycle();    cb.recycle();    output.recycle();  }  for (int i=start; i < end; i++) {    char c=s.charAt(i);    if (safeChars.get(c)) {      output.append(c);    } else {      cb.append(c);      c2b.convert(cb,bb);      if (c >= 0xD800 && c <= 0xDBFF) {        if ((i + 1) < end) {          char d=s.charAt(i + 1);          if (d >= 0xDC00 && d <= 0xDFFF) {            cb.append(d);            c2b.convert(cb,bb);            i++;          }        }      }      urlEncode(output,bb);      cb.recycle();      bb.recycle();    }  }  return output;}  }
class C{  LinkedEntry(){  super(null,null,0,null);  nxt=prv=this;}  }
class C{  @RequestMapping(value="/register",method=RequestMethod.POST,produces={MediaType.APPLICATION_JSON_VALUE,MediaType.TEXT_PLAIN_VALUE}) @Timed public ResponseEntity<?> registerAccount(@Valid @RequestBody ManagedUserVM managedUserVM,HttpServletRequest request){  HttpHeaders textPlainHeaders=new HttpHeaders();  textPlainHeaders.setContentType(MediaType.TEXT_PLAIN);  return userRepository.findOneByLogin(managedUserVM.getLogin().toLowerCase()).map(null).orElseGet(null);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SecurityContextTokenElement createSecurityContextTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SecurityContextTokenElementImpl();}  }
class C{  public static boolean isAuthNAssertion(Assertion assertion){  if (assertion == null) {    return false;  }  if ((!assertion.isTimeValid()) || (!assertion.isSignatureValid())) {    return false;  }  Set statements=assertion.getStatement();  Statement statement=null;  Iterator iterator=statements.iterator();  while (iterator.hasNext()) {    statement=(Statement)iterator.next();    if (statement.getStatementType() == Statement.AUTHENTICATION_STATEMENT) {      return true;    }  }  return false;}  }
class C{  @Override public void flush() throws IOException {  boolean nonBlocking=checkNonBlockingWrite();  ob.flush();  if (nonBlocking) {    checkRegisterForWrite();  }}  }
class C{  public void test_SelectHaving() throws SQLException {  String selectQuery="SELECT snum, max(amt) AS max FROM " + DatabaseCreator.ORDERS_TABLE + " GROUP BY snum HAVING max(amt) > 3000";  ResultSet result=statement.executeQuery(selectQuery);  HashSet<Double> values=new HashSet<Double>();  values.add(Double.valueOf(9891.88));  values.add(Double.valueOf(5160.45));  while (result.next()) {    Double max=result.getDouble("max");    assertTrue("result set doesn't contain value",values.contains(max));    assertTrue("wrong value in the result set",values.remove(max));  }  result.close();  assertTrue("Result set has wrong size",values.isEmpty());}  }
class C{  public MaterialBarcodeScannerBuilder withActivity(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  return this;}  }
class C{  void writeMaps(Enumeration maps) throws IOException {  if (maps != null) {    while (maps.hasMoreElements()) {      Map map=(Map)maps.nextElement();      String name=map.getName();      incrIndent();      indentSmart();      write("<map");      if (name != null) {        write(" name=\"");        write(name);        write("\">");      } else {        write('>');      }      writeLineSeparator();      incrIndent();      AttributeSet[] areas=map.getAreas();      if (areas != null) {        for (int counter=0, maxCounter=areas.length; counter < maxCounter; counter++) {          indentSmart();          write("<area");          writeAttributes(areas[counter]);          write("></area>");          writeLineSeparator();        }      }      decrIndent();      indentSmart();      write("</map>");      writeLineSeparator();      decrIndent();    }  }}  }
class C{  public synchronized void decrementActiveSessions(){  if (numberOfActiveSessions > 0) {    numberOfActiveSessions--;    if (SystemProperties.isServerMode() && MonitoringUtil.isRunning()) {      SsoServerSessSvcImpl sessImpl=Agent.getSessSvcMBean();      sessImpl.decSessionActiveCount();    }  }}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  final void runWorker(Worker w){  Thread wt=Thread.currentThread();  Runnable task=w.firstTask;  w.firstTask=null;  w.unlock();  boolean completedAbruptly=true;  try {    while (task != null || (task=getTask()) != null) {      w.lock();      if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt();      try {        beforeExecute(wt,task);        Throwable thrown=null;        try {          task.run();        } catch (        RuntimeException x) {          thrown=x;          throw x;        }catch (        Error x) {          thrown=x;          throw x;        }catch (        Throwable x) {          thrown=x;          throw new Error(x);        } finally {          afterExecute(task,thrown);        }      }  finally {        task=null;        w.completedTasks++;        w.unlock();      }    }    completedAbruptly=false;  }  finally {    processWorkerExit(w,completedAbruptly);  }}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  private void displayError(LocalizableMessage msg,LocalizableMessage title){  Utilities.displayError(this,msg,title);  toFront();}  }
class C{  private void publishKeyEntry(MacKeyEntry keyEntry) throws CryptoManagerException {  ByteString distinguishedValue=ByteString.valueOfUtf8(keyEntry.getKeyID().toString());  DN entryDN=secretKeysDN.child(new RDN(attrKeyID,distinguishedValue));  LinkedHashMap<ObjectClass,String> ocMap=new LinkedHashMap<>(2);  ocMap.put(CoreSchema.getTopObjectClass(),OC_TOP);  ocMap.put(ocMacKey,OC_CRYPTO_MAC_KEY);  LinkedHashMap<AttributeType,List<Attribute>> userAttrs=new LinkedHashMap<>();  userAttrs.put(attrKeyID,Attributes.createAsList(attrKeyID,distinguishedValue));  putSingleValueAttribute(userAttrs,attrMacAlgorithm,keyEntry.getType());  putSingleValueAttribute(userAttrs,attrKeyLength,String.valueOf(keyEntry.getKeyLengthBits()));  userAttrs.put(attrSymmetricKey,buildSymmetricKeyAttributes(keyEntry.getSecretKey()));  LinkedHashMap<AttributeType,List<Attribute>> opAttrs=new LinkedHashMap<>(0);  Entry entry=new Entry(entryDN,ocMap,userAttrs,opAttrs);  AddOperation addOperation=getRootConnection().processAdd(entry);  if (addOperation.getResultCode() != ResultCode.SUCCESS) {    throw new CryptoManagerException(ERR_CRYPTOMGR_SYMMETRIC_KEY_ENTRY_ADD_FAILED.get(entry.getName(),addOperation.getErrorMessage()));  }}  }
class C{  public boolean processOperationResult(OperationResult operationResult){  return processOperationResult(this,operationResult);}  }
class C{  public static WindowObjectInfo display(String p_title,Collection<PrintableInfo> p_object_list,BoardFrame p_board_frame,freert.planar.PlaCoordTransform p_coordinate_transform){  WindowObjectInfo new_window=new WindowObjectInfo(p_board_frame,p_coordinate_transform);  new_window.setTitle(p_title);  if (p_object_list.isEmpty()) {    new_window.append(new_window.resources.getString("list_empty"));  }  for (  PrintableInfo curr_object : p_object_list) {    curr_object.print_info(new_window,p_board_frame.get_locale());  }  new_window.pack();  java.awt.Dimension size=new_window.getSize();  if (size.getHeight() > MAX_WINDOW_HEIGHT) {    new_window.setPreferredSize(new java.awt.Dimension((int)size.getWidth() + SCROLLBAR_ADD,MAX_WINDOW_HEIGHT));    new_window.pack();  }  new_window.setVisible(true);  return new_window;}  }
class C{  private Platform(){}  }
class C{  public Mp4TagReverseDnsField(final String fieldName,final String issuer,final String identifier,final String content){  super(fieldName);  this.issuer=issuer;  this.descriptor=identifier;  this.content=content;}  }
class C{  public static void assignCommonTagValues(Tag tag,MetadataContainer description){  assert description.getContainerType() == ContainerType.EXTENDED_CONTENT;  MetadataDescriptor tmp;  if (!Utils.isBlank(tag.getFirst(FieldKey.ALBUM))) {    tmp=new MetadataDescriptor(description.getContainerType(),AsfFieldKey.ALBUM.getFieldName(),MetadataDescriptor.TYPE_STRING);    tmp.setStringValue(tag.getFirst(FieldKey.ALBUM));    description.removeDescriptorsByName(tmp.getName());    description.addDescriptor(tmp);  } else {    description.removeDescriptorsByName(AsfFieldKey.ALBUM.getFieldName());  }  if (!Utils.isBlank(tag.getFirst(FieldKey.TRACK))) {    tmp=new MetadataDescriptor(description.getContainerType(),AsfFieldKey.TRACK.getFieldName(),MetadataDescriptor.TYPE_STRING);    tmp.setStringValue(tag.getFirst(FieldKey.TRACK));    description.removeDescriptorsByName(tmp.getName());    description.addDescriptor(tmp);  } else {    description.removeDescriptorsByName(AsfFieldKey.TRACK.getFieldName());  }  if (!Utils.isBlank(tag.getFirst(FieldKey.YEAR))) {    tmp=new MetadataDescriptor(description.getContainerType(),AsfFieldKey.YEAR.getFieldName(),MetadataDescriptor.TYPE_STRING);    tmp.setStringValue(tag.getFirst(FieldKey.YEAR));    description.removeDescriptorsByName(tmp.getName());    description.addDescriptor(tmp);  } else {    description.removeDescriptorsByName(AsfFieldKey.YEAR.getFieldName());  }  if (!Utils.isBlank(tag.getFirst(FieldKey.GENRE))) {    tmp=new MetadataDescriptor(description.getContainerType(),AsfFieldKey.GENRE.getFieldName(),MetadataDescriptor.TYPE_STRING);    tmp.setStringValue(tag.getFirst(FieldKey.GENRE));    description.removeDescriptorsByName(tmp.getName());    description.addDescriptor(tmp);    Integer genreNum=GenreTypes.getInstanceOf().getIdForName(tag.getFirst(FieldKey.GENRE));    if (genreNum != null) {      tmp=new MetadataDescriptor(description.getContainerType(),AsfFieldKey.GENRE_ID.getFieldName(),MetadataDescriptor.TYPE_STRING);      tmp.setStringValue("(" + genreNum + ")");      description.removeDescriptorsByName(tmp.getName());      description.addDescriptor(tmp);    } else {      description.removeDescriptorsByName(AsfFieldKey.GENRE_ID.getFieldName());    }  } else {    description.removeDescriptorsByName(AsfFieldKey.GENRE.getFieldName());    description.removeDescriptorsByName(AsfFieldKey.GENRE_ID.getFieldName());  }}  }
class C{  private CompletionStage<Done> prepareCreateTables(CassandraSession session){  return session.executeCreateTable("CREATE TABLE IF NOT EXISTS cargo (" + "cargoId text, name text, description text, owner text, destination text," + "PRIMARY KEY (cargoId, destination))").thenCompose(null);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.dsconfig("set-sasl-mechanism-handler-prop","--handler-name","DIGEST-MD5","--set","server-fqdn:" + "127.0.0.1");}  }
class C{  public PlaSide negate(){  if (this == ON_THE_LEFT)   return ON_THE_RIGHT; else   if (this == ON_THE_RIGHT)   return ON_THE_LEFT; else   return this;}  }
class C{  public static String buildView(final String viewId) throws IOException {  return JKJsfUtil.buildView(FacesContext.getCurrentInstance(),viewId);}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  private void iterateVLVIndex(ReadableTransaction txn,VLVIndex vlvIndex,boolean verifyID) throws StorageRuntimeException, DirectoryException {  if (vlvIndex == null || !verifyID) {    return;  }  try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(vlvIndex.getName())){    while (cursor.next()) {      ByteString key=cursor.getKey();      EntryID id=new EntryID(decodeEntryIDFromVLVKey(key));      Entry entry;      try {        entry=id2entry.get(txn,id);      } catch (      Exception e) {        logger.traceException(e);        errorCount++;        continue;      }      if (entry == null) {        errorCount++;        logger.error(ERR_VERIFY_UNKNOWN_ID,id,keyDump(vlvIndex,key));        continue;      }      ByteString expectedKey=vlvIndex.toKey(entry,id);      if (expectedKey.compareTo(key) != 0) {        errorCount++;        logger.error(ERR_VERIFY_ENTRY_NON_MATCHING_KEY,id,keyDump(vlvIndex,expectedKey));      }    }  } }  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnodename.class,args);}  }
class C{  public FileLookupException(String msg){  super(msg);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  public CallbackIdAttribute(byte[] octets){  super(octets);  str=new String(octets,2,octets.length - 2);}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  long min=0;  long pref=0;  long max=0;  multiRowCells=false;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    if (getRowsOccupied(v) > 1) {      multiRowCells=true;      max=Math.max((int)v.getMaximumSpan(axis),max);    } else {      min=Math.max((int)v.getMinimumSpan(axis),min);      pref=Math.max((int)v.getPreferredSpan(axis),pref);      max=Math.max((int)v.getMaximumSpan(axis),max);    }  }  if (r == null) {    r=new SizeRequirements();    r.alignment=0.5f;  }  r.preferred=(int)pref;  r.minimum=(int)min;  r.maximum=(int)max;  return r;}  }
class C{  public UserMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public static ImageTypeSpecifier createIndexed(byte[] redLUT,byte[] greenLUT,byte[] blueLUT,byte[] alphaLUT,int bits,int dataType){  return new ImageTypeSpecifier.Indexed(redLUT,greenLUT,blueLUT,alphaLUT,bits,dataType);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(200);  sb.append("IdSearchResults:");  sb.append("\n\tIdentities: ").append(searchResults);  sb.append("\n\tAttributes: ").append(resultsMap);  return (sb.toString());}  }
class C{  protected void didAdjustTree(){}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public final void push(String s){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=s;  m_firstFree++;}  }
class C{  private JsonValue isTokenIdValid(String tokenId,String refresh){  boolean isActive=false;  try {    SSOToken theToken=sessionResourceUtil.getTokenWithoutResettingIdleTime(tokenId);    isActive=true;    if (Boolean.valueOf(refresh)) {      ssoTokenManager.refreshSession(theToken);    }  } catch (  SSOException ignored) {  }  return json(object(field(ACTIVE,isActive)));}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.StatusElementImpl();}  }
class C{  public static void takeScreenshot(Activity activity,File toFile){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  if (toFile == null) {    throw new IllegalArgumentException("Parameter toFile cannot be null.");  }  Bitmap bitmap=null;  try {    if (!toFile.exists()) {      toFile.createNewFile();    }    bitmap=takeBitmapUnchecked(activity);    writeBitmap(bitmap,toFile);  } catch (  Exception e) {    String message="Unable to take screenshot to file " + toFile.getAbsolutePath() + " of activity "+ activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  } finally {    if (bitmap != null) {      bitmap.recycle();    }  }  Log.d(TAG,"Screenshot captured to " + toFile.getAbsolutePath());}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static TextHitInfo trailing(int charIndex){  return new TextHitInfo(charIndex,false);}  }
class C{  public PlaPointFloat intersection(PlaSegmentFloat p_other){  double d1x=point_b.v_x - point_a.v_x;  double d1y=point_b.v_y - point_a.v_y;  double d2x=p_other.point_b.v_x - p_other.point_a.v_x;  double d2y=p_other.point_b.v_y - p_other.point_a.v_y;  double det_1=point_a.v_x * point_b.v_y - point_a.v_y * point_b.v_x;  double det_2=p_other.point_a.v_x * p_other.point_b.v_y - p_other.point_a.v_y * p_other.point_b.v_x;  double det=d2x * d1y - d2y * d1x;  double is_x;  double is_y;  if (det == 0)   return null;  is_x=(d2x * det_1 - d1x * det_2) / det;  is_y=(d2y * det_1 - d1y * det_2) / det;  return new PlaPointFloat(is_x,is_y);}  }
class C{  InvalidClientException(final String message){  this(400,"invalid_client",message);}  }
class C{  public void redo() throws CannotRedoException {  if (!canRedo()) {    throw new CannotRedoException();  }  hasBeenDone=true;}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  private synchronized void enumerateStringProperties(Hashtable<String,String> h){  if (defaults != null) {    defaults.enumerateStringProperties(h);  }  for (Enumeration<?> e=keys(); e.hasMoreElements(); ) {    Object k=e.nextElement();    Object v=get(k);    if (k instanceof String && v instanceof String) {      h.put((String)k,(String)v);    }  }}  }
class C{  @Override public void addToWhitelist(String item){  final Set<String> stringSet=sharedPreferences.getStringSet(KEY_WHITELIST,new HashSet<String>());  stringSet.add(item);  SharedPreferences.Editor editor=sharedPreferences.edit();  editor.remove(KEY_WHITELIST);  editor.putStringSet(KEY_WHITELIST,stringSet);  editor.commit();}  }
class C{  public AuthorizationIdentityResponseControl(boolean isCritical){  super(OID_AUTHZID_RESPONSE,isCritical);}  }
class C{  public void clear(){  fullyLock();  try {    for (Node<E> p, h=head; (p=h.next) != null; h=p) {      h.next=h;      p.item=null;    }    head=last;    if (count.getAndSet(0) == capacity)     notFull.signal();  }  finally {    fullyUnlock();  }}  }
class C{  public LoginConfiguration forceAuth(String forceAuthReqParam){  forceAuth=Boolean.parseBoolean(forceAuthReqParam);  return this;}  }
class C{  @Override public void writeRecord(String record){  int length=record.length();  int size=length;  char c;  for (int i=0; i < length; i++) {    c=record.charAt(i);    if (c != (byte)(c & 0x0000007F)) {      try {        size=record.getBytes("UTF-8").length;      } catch (      Exception e) {        size=length * 2;      }      break;    }  }synchronized (this) {    if (sizeLimit > 0 && outputStream.written + size + 1 >= sizeLimit) {      rotate();    }    try {      writer.write(record);      writer.newLine();    } catch (    Exception e) {      errorHandler.handleWriteError(record,e);    }    if (autoFlush) {      flush();    }  }}  }
class C{  public void displayVoid(){  ((CardLayout)mainPanel.getLayout()).show(mainPanel,NOTHING_SELECTED);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return _fooLocalService.createFoo(fooId);}  }
class C{  public FieldFrameBodyIMG(){}  }
class C{  boolean canIncrement(Object field,int cursorPosition){  return (field != null);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.StatusTypeImpl();}  }
class C{  public SerializationHandler createSerializationHandler(Result outputTarget) throws TransformerException {  SerializationHandler xoh=createSerializationHandler(outputTarget,getOutputFormat());  return xoh;}  }
class C{  public ConfigurationException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public static void breakMath(MethodNode mn){  for (  AbstractInsnNode ain : mn.instructions.toArray()) {    if (ain.getType() == AbstractInsnNode.INT_INSN && ain.getOpcode() != Opcodes.NEWARRAY) {      if (isNear(ain)) {        continue;      }      IntInsnNode iin=(IntInsnNode)ain;      int i=randRange(-100,100);switch (randRange(0,3)) {case 0:        iin.operand+=i;      mn.instructions.insert(iin,new InsnNode(Opcodes.ISUB));    mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP));  mn.instructions.insertBefore(iin,OpUtils.toInt(i));break;case 1:iin.operand-=i;mn.instructions.insert(iin,new InsnNode(Opcodes.IADD));mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP));mn.instructions.insertBefore(iin,OpUtils.toInt(i));break;case 2:iin.operand+=i;mn.instructions.insert(iin,new InsnNode(Opcodes.IADD));mn.instructions.insert(iin,new InsnNode(Opcodes.INEG));mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP));mn.instructions.insertBefore(iin,OpUtils.toInt(i));break;case 3:iin.operand-=i;mn.instructions.insert(iin,new InsnNode(Opcodes.ISUB));mn.instructions.insert(iin,new InsnNode(Opcodes.INEG));mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP));mn.instructions.insertBefore(iin,OpUtils.toInt(i));break;}}}}  }
class C{  public void moveTo(float x,float y){  currentPoint=new Point(x,y);  Subpath lastSubpath=subpaths.size() > 0 ? subpaths.get(subpaths.size() - 1) : null;  if (lastSubpath != null && lastSubpath.isSinglePointOpen()) {    lastSubpath.setStartPoint(currentPoint);  } else {    subpaths.add(new Subpath(currentPoint));  }}  }
class C{  public Reflect call(String name) throws ReflectException {  return call(name,new Object[0]);}  }
class C{  public void invalidate(){  isValid=false;  sessionContext=null;}  }
class C{  @Override public boolean isWZAudioSampleListenerEnabled(){  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Element lChild;  NodeList childNodes;  CDATASection cdataN;  String data;  doc=(Document)load("staff",true);  nameList=doc.getElementsByTagName("name");  lChild=(Element)nameList.item(1);  lChild.normalize();  childNodes=lChild.getChildNodes();  cdataN=(CDATASection)childNodes.item(1);  assertNotNull("firstCDATASection",cdataN);  data=cdataN.getData();  assertEquals("data1","This is a CDATASection with EntityReference number 2 &ent2;",data);  cdataN=(CDATASection)childNodes.item(3);  assertNotNull("secondCDATASection",cdataN);  data=cdataN.getData();  assertEquals("data3","This is an adjacent CDATASection with a reference to a tab &tab;",data);}  }
class C{  @Override public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public String nextLine(){  if (hasNextPattern == linePattern())   return getCachedResult();  clearCaches();  String result=findWithinHorizon(linePattern,0);  if (result == null)   throw new NoSuchElementException("No line found");  MatchResult mr=this.match();  String lineSep=mr.group(1);  if (lineSep != null)   result=result.substring(0,result.length() - lineSep.length());  if (result == null)   throw new NoSuchElementException(); else   return result;}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aCredentialHandler,StoreDescription parentDesc) throws Exception {  if (aCredentialHandler instanceof NestedCredentialHandler) {    NestedCredentialHandler nestedCredentialHandler=(NestedCredentialHandler)aCredentialHandler;    CredentialHandler[] credentialHandlers=nestedCredentialHandler.getCredentialHandlers();    storeElementArray(aWriter,indent,credentialHandlers);  }}  }
class C{  public XByteBuffer(int size,boolean discard){  buf=new byte[size];  this.discard=discard;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsu.CreatedElement createCreatedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsu.impl.CreatedElementImpl();}  }
class C{  private boolean invalidated(int index,int prevTakeIndex,long dequeues,int length){  if (index < 0)   return false;  int distance=index - prevTakeIndex;  if (distance < 0)   distance+=length;  return dequeues > distance;}  }
class C{  public boolean isSelectionVisible(){  return selectionVisible;}  }
class C{  @Create(operationDescription=@Operation) public Promise<ResourceResponse,ResourceException> handleCreate(Context context,CreateRequest request){  UriRouterContext ctx=context.asContext(UriRouterContext.class);  String serviceResourceId=request.getNewResourceId();  UriRouterContext subRequestCtx=new UriRouterContext(context,"",serviceResourceId,ctx.getUriTemplateVariables());  CreateRequest subRequest=Requests.copyOfCreateRequest(request).setNewResourceId("").setResourcePath(serviceResourceId);  return routeTree.handleCreate(subRequestCtx,subRequest);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public static Class loadClass(String className,String remoteCodebase,ClassLoader loader) throws ClassNotFoundException {  if (utilDelegate != null) {    return utilDelegate.loadClass(className,remoteCodebase,loader);  }  return null;}  }
class C{  public Object clone(){  XMPNode clonedTree=(XMPNode)tree.clone();  return new XMPMetaImpl(clonedTree);}  }
class C{  private static void removeFromProfileNameTable(SSOToken ssoToken,String dn){  if (debug.messageEnabled()) {    debug.message("In ProfileService." + "removeFromProfileNameTable(SSOToken,dn)..");  }  Hashtable pTable=profileNameTable;  if ((pTable == null) || pTable.isEmpty()) {    return;  }synchronized (pTable) {    String principal;    try {      principal=ssoToken.getPrincipal().getName();    } catch (    SSOException ssoe) {      debug.error("AMObjectImpl.removeFromProfileNameTable(): " + "Could not update PFN table");      return;    }    Set dnList=(Set)pTable.get(principal);    if (dnList != null) {      dnList.remove(dn);      if (dnList.isEmpty()) {        pTable.remove(principal);      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",false);  element=doc.getElementById("Cancun");  assertNull("throw_Null",element);}  }
class C{  protected SSLContextImpl(DefaultSSLContextImpl dummy) throws GeneralSecurityException, IOException {synchronized (DefaultSSLContextImpl.class) {    if (DEFAULT_SSL_CONTEXT_IMPL == null) {      clientSessionContext=new ClientSessionContext();      serverSessionContext=new ServerSessionContext();      DEFAULT_SSL_CONTEXT_IMPL=(DefaultSSLContextImpl)this;    } else {      clientSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetClientSessionContext();      serverSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetServerSessionContext();    }    sslParameters=new SSLParametersImpl(DEFAULT_SSL_CONTEXT_IMPL.getKeyManagers(),DEFAULT_SSL_CONTEXT_IMPL.getTrustManagers(),null,clientSessionContext,serverSessionContext);  }}  }
class C{  public boolean isUndefined(){  return type == Type.UNDEFINED;}  }
class C{  private void installLayout(JRootPane root){  if (layoutManager == null) {    layoutManager=createLayoutManager();  }  savedOldLayout=root.getLayout();  root.setLayout(layoutManager);}  }
class C{  @Override public JSONObject toJSONObject() throws JSONException {  JSONObject jo=super.toJSONObject();  if (policyName != null) {    jo.put("policyName",policyName);  }  return jo;}  }
class C{  public Entry filterEntry(Set<String> attrNameList,boolean omitValues,boolean omitReal,boolean omitVirtual){  final AttributeType ocType=CoreSchema.getObjectClassAttributeType();  Map<ObjectClass,String> objectClassesCopy;  Map<AttributeType,List<Attribute>> userAttrsCopy;  Map<AttributeType,List<Attribute>> operationalAttrsCopy;  if (attrNameList == null || attrNameList.isEmpty()) {    userAttrsCopy=new LinkedHashMap<>(userAttributes.size());    operationalAttrsCopy=new LinkedHashMap<>(0);    if (omitReal) {      objectClassesCopy=new LinkedHashMap<>(0);    } else     if (omitValues) {      objectClassesCopy=new LinkedHashMap<>(0);      userAttrsCopy.put(ocType,newArrayList(Attributes.empty(ocType)));    } else {      objectClassesCopy=new LinkedHashMap<>(objectClasses);      Attribute ocAttr=getObjectClassAttribute();      if (ocAttr != null) {        userAttrsCopy.put(ocType,newArrayList(ocAttr));      }    }    deepCopy(userAttributes,userAttrsCopy,omitValues,true,omitReal,omitVirtual,true);  } else {    if (omitReal || omitValues) {      objectClassesCopy=new LinkedHashMap<>(0);    } else {      objectClassesCopy=new LinkedHashMap<>(objectClasses.size());    }    userAttrsCopy=new LinkedHashMap<>(userAttributes.size());    operationalAttrsCopy=new LinkedHashMap<>(operationalAttributes.size());    for (    String attrName : attrNameList) {      if ("*".equals(attrName)) {        if (!omitReal) {          if (omitValues) {            userAttrsCopy.put(ocType,newArrayList(Attributes.empty(ocType)));          } else {            objectClassesCopy.putAll(objectClasses);            Attribute ocAttr=getObjectClassAttribute();            if (ocAttr != null) {              userAttrsCopy.put(ocType,newArrayList(ocAttr));            }          }        }        deepCopy(userAttributes,userAttrsCopy,omitValues,true,omitReal,omitVirtual,true);        continue;      } else       if ("+".equals(attrName)) {        deepCopy(operationalAttributes,operationalAttrsCopy,omitValues,true,omitReal,omitVirtual,true);        continue;      }      final AttributeDescription attrDesc;      try {        attrDesc=AttributeDescription.valueOf(attrName);      } catch (      LocalizedIllegalArgumentException e) {        logger.traceException(e);        continue;      }      attrName=attrDesc.getNameOrOID();      final AttributeType attrType=attrDesc.getAttributeType();      if (attrType.isPlaceHolder()) {        for (        Map.Entry<AttributeType,List<Attribute>> e : userAttributes.entrySet()) {          AttributeType t=e.getKey();          if (t.hasNameOrOID(attrType.getNameOrOID())) {            mergeAttributeLists(e.getValue(),userAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);            continue;          }        }        for (        Map.Entry<AttributeType,List<Attribute>> e : operationalAttributes.entrySet()) {          AttributeType t=e.getKey();          if (t.hasNameOrOID(attrType.getNameOrOID())) {            mergeAttributeLists(e.getValue(),operationalAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);            continue;          }        }      } else {        if (attrType.isObjectClass()) {          if (!omitReal) {            if (omitValues) {              userAttrsCopy.put(ocType,newArrayList(Attributes.empty(ocType,attrName)));            } else {              Attribute ocAttr=getObjectClassAttribute();              if (ocAttr != null) {                if (!attrName.equals(ocAttr.getAttributeDescription().getNameOrOID())) {                  AttributeBuilder builder=new AttributeBuilder(AttributeDescription.create(attrName,ocType));                  builder.addAll(ocAttr);                  ocAttr=builder.toAttribute();                }                userAttrsCopy.put(ocType,newArrayList(ocAttr));              }            }          }        } else {          List<Attribute> attrList=getUserAttribute(attrType);          if (!attrList.isEmpty()) {            mergeAttributeLists(attrList,userAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);          } else {            attrList=getOperationalAttribute(attrType);            if (!attrList.isEmpty()) {              mergeAttributeLists(attrList,operationalAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);            }          }        }      }    }  }  return new Entry(dn,objectClassesCopy,userAttrsCopy,operationalAttrsCopy);}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (subject != null) {    return retval.append(subject);  } else {    return retval.append("");  }}  }
class C{  public void addTreeSelectionListener(TreeSelectionListener x){  listenerList.add(TreeSelectionListener.class,x);}  }
class C{  public void generateImportSteps() throws EntitlementException {  indexingApplicationsExisting();  indexingApplicationsReadFromFile();  indexingResourceTypesReadFromFile();  indexingResourceTypesExisting();  assignApplicationTypeToApplication();  generateResourceTypeImportSteps();  resolveResourceTypeDependencies();  generatePrivilegeImportSteps();  generateApplicationImportSteps();}  }
class C{  public static UUID parseStringAsUUID(String in) throws IndexParseFieldException {  try {    return UUID.fromString(in);  } catch (  IllegalArgumentException e) {    throw new IndexParseFieldException(in,e);  }}  }
class C{  public void appendQuotedExtension(StringBuffer toAddTo){  appendQuoted(extension,toAddTo);}  }
class C{  private void addPadding(int tailLength) throws XMPException, IOException {  if (options.getExactPacketLength()) {    int minSize=outputStream.getBytesWritten() + tailLength * unicodeSize;    if (minSize > padding) {      throw new XMPException("Can't fit into specified packet size",XMPError.BADSERIALIZE);    }    padding-=minSize;  }  padding/=unicodeSize;  int newlineLen=options.getNewline().length();  if (padding >= newlineLen) {    padding-=newlineLen;    while (padding >= (100 + newlineLen)) {      writeChars(100,' ');      writeNewline();      padding-=(100 + newlineLen);    }    writeChars(padding,' ');    writeNewline();  } else {    writeChars(padding,' ');  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.KeyNameElement createKeyNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyNameElementImpl();}  }
class C{  public JspTagException(){  super();}  }
class C{  public static final String createMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey);  if (msg == null) {    msg=fResourceBundle.getString(BAD_CODE);    throwex=true;  }  if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      fmsg=fResourceBundle.getString(FORMAT_FAILED);      fmsg+=" " + msg;    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  private static boolean isFractionalConfigEquivalent(FractionalConfig cfg1,FractionalConfig cfg2) throws ConfigException {  if (!cfg1.getBaseDn().equals(cfg2.getBaseDn())) {    return false;  }  if (cfg1.isFractional() != cfg2.isFractional() || cfg1.isFractionalExclusive() != cfg2.isFractionalExclusive()) {    return false;  }  Set<String> allClassesAttrs1=cfg1.getFractionalAllClassesAttributes();  Set<String> allClassesAttrs2=cfg2.getFractionalAllClassesAttributes();  if (!areAttributesEquivalent(allClassesAttrs1,allClassesAttrs2)) {    return false;  }  Map<String,Set<String>> specificClassesAttrs1=cfg1.getFractionalSpecificClassesAttributes();  Map<String,Set<String>> specificClassesAttrs2=cfg2.getFractionalSpecificClassesAttributes();  if (specificClassesAttrs1.size() != specificClassesAttrs2.size()) {    return false;  }  Schema schema=DirectoryServer.getSchema();  for (  String className1 : specificClassesAttrs1.keySet()) {    ObjectClass objectClass1=schema.getObjectClass(className1);    if (objectClass1.isPlaceHolder()) {      throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_OBJECT_CLASS.get(className1));    }    boolean foundClass=false;    for (    String className2 : specificClassesAttrs2.keySet()) {      ObjectClass objectClass2=schema.getObjectClass(className2);      if (objectClass2.isPlaceHolder()) {        throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_OBJECT_CLASS.get(className2));      }      if (objectClass1.equals(objectClass2)) {        foundClass=true;        Set<String> attributes1=specificClassesAttrs1.get(className1);        Set<String> attributes2=specificClassesAttrs2.get(className2);        if (!areAttributesEquivalent(attributes1,attributes2)) {          return false;        }        break;      }    }    if (!foundClass) {      return false;    }  }  return true;}  }
class C{  XSLTAttributeDef(String namespace,String name,int type,boolean required,boolean supportsAVT,int errorType){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=type;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;}  }
class C{  public InputMethodHighlight(boolean selected,int state,int variation){  this(selected,state,variation,null);}  }
class C{  public static ZTauElement round(SimpleBigDecimal lambda0,SimpleBigDecimal lambda1,byte mu){  int scale=lambda0.getScale();  if (lambda1.getScale() != scale) {    throw new IllegalArgumentException("lambda0 and lambda1 do not " + "have same scale");  }  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger f0=lambda0.round();  BigInteger f1=lambda1.round();  SimpleBigDecimal eta0=lambda0.subtract(f0);  SimpleBigDecimal eta1=lambda1.subtract(f1);  SimpleBigDecimal eta=eta0.add(eta0);  if (mu == 1) {    eta=eta.add(eta1);  } else {    eta=eta.subtract(eta1);  }  SimpleBigDecimal threeEta1=eta1.add(eta1).add(eta1);  SimpleBigDecimal fourEta1=threeEta1.add(eta1);  SimpleBigDecimal check1;  SimpleBigDecimal check2;  if (mu == 1) {    check1=eta0.subtract(threeEta1);    check2=eta0.add(fourEta1);  } else {    check1=eta0.add(threeEta1);    check2=eta0.subtract(fourEta1);  }  byte h0=0;  byte h1=0;  if (eta.compareTo(ECConstants.ONE) >= 0) {    if (check1.compareTo(MINUS_ONE) < 0) {      h1=mu;    } else {      h0=1;    }  } else {    if (check2.compareTo(ECConstants.TWO) >= 0) {      h1=mu;    }  }  if (eta.compareTo(MINUS_ONE) < 0) {    if (check1.compareTo(ECConstants.ONE) >= 0) {      h1=(byte)-mu;    } else {      h0=-1;    }  } else {    if (check2.compareTo(MINUS_TWO) < 0) {      h1=(byte)-mu;    }  }  BigInteger q0=f0.add(BigInteger.valueOf(h0));  BigInteger q1=f1.add(BigInteger.valueOf(h1));  return new ZTauElement(q0,q1);}  }
class C{  public static String stripFIFO(String zid){  return zid.substring(zid.indexOf('|') + 1);}  }
class C{  public RetryAfterHeader createRetryAfterHeader(int retryAfter) throws InvalidArgumentException {  if (retryAfter < 0)   throw new InvalidArgumentException("bad retryAfter arg");  RetryAfter r=new RetryAfter();  r.setRetryAfter(retryAfter);  return r;}  }
class C{  public static int round(float value){  long lx=(long)(value * (65536 * 256f));  return (int)((lx + 0x800000) >> 24);}  }
class C{  private <T extends ChangeRecordEntry>List<Object[]> createChangeRecords(Class<T> theClass,String[] inputLDIF) throws Exception {  List<Object[]> changes=new LinkedList<>();  for (  String ldifString : inputLDIF) {    byte[] bytes=StaticUtils.getBytes(ldifString);    LDIFReader reader=new LDIFReader(new LDIFImportConfig(new ByteArrayInputStream(bytes)));    ChangeRecordEntry change=reader.readChangeRecord(false);    Assert.assertNotNull(change);    Assert.assertTrue(theClass.isInstance(change));    String[] lines=ldifString.split("\\n");    Object[] objs=new Object[]{change,lines};    changes.add(objs);  }  return changes;}  }
class C{  public Event35Id.Builder clearSecond(){  second=null;  fieldSetFlags()[2]=false;  return this;}  }
class C{  public RemoteServletResponse(){}  }
class C{  protected void removeLoadedEntries() throws Exception {  InternalClientConnection connection=InternalClientConnection.getRootConnection();  for (int j=0; j < numEntries; j++) {    DN entryDN=entryTreeMap.lastKey();    DeleteOperation deleteOperation=connection.processDelete(entryDN);    entryTreeMap.remove(entryDN);    assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  PolicyViewBean vb=(PolicyViewBean)getViewBean(PolicyViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  boolean useSecondServerAsSchemaSource(){  return useSecondServerAsSchemaSourceArg.isPresent();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("RAckParser.parse");  RAck rack=new RAck();  try {    headerName(TokenTypes.RACK);    rack.setHeaderName(SIPHeaderNames.RACK);    try {      String number=this.lexer.number();      rack.setRSequenceNumber(Long.parseLong(number));      this.lexer.SPorHT();      number=this.lexer.number();      rack.setCSequenceNumber(Long.parseLong(number));      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      rack.setMethod(token.getTokenValue());    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return rack;  }  finally {    if (debug)     dbg_leave("RAckParser.parse");  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ProblemIRIElement createProblemIRIElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ProblemIRIElementImpl();}  }
class C{  public void testNegNegSameLength(){  String numA="-283746278342837476784564875684767";  String numB="-293478573489347658763745839457637";  String res="71412358434940908477702819237626";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public Event35Log.Builder clearVersion(){  version=null;  fieldSetFlags()[0]=false;  return this;}  }
class C{  @Override protected StringBuilder encodeBody(StringBuilder encoding){  if (uri != null) {    encoding.append(LESS_THAN).append(uri.encode()).append(GREATER_THAN);  } else   if (string != null) {    encoding.append(string);  }  if (!parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding;}  }
class C{  public boolean validateAttributes(Map attributeSet,String orgName) throws SMSException {  SMSEntry.validateToken(ssm.getSSOToken());  return (ss.validateAttributes(ssm.getSSOToken(),attributeSet,false,orgName));}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  private static float[] RGBtoHSV(float[] rgb,float[] hsv){  if (hsv == null) {    hsv=new float[3];  }  float max=ColorModelHSL.max(rgb[0],rgb[1],rgb[2]);  float min=ColorModelHSL.min(rgb[0],rgb[1],rgb[2]);  float saturation=max - min;  if (saturation > 0.0f) {    saturation/=max;  }  hsv[0]=ColorModelHSL.getHue(rgb[0],rgb[1],rgb[2],max,min);  hsv[1]=saturation;  hsv[2]=max;  return hsv;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.TimeZoneElement createTimeZoneElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.TimeZoneElementImpl();}  }
class C{  private Map<String,InstanceState> findFailedInstances(){  Map<String,InstanceState> failedInstances=new HashMap<String,InstanceState>();  try {    QueryRequest queryRequest=newQueryRequest(STATES_RESOURCE_CONTAINER.toString());    queryRequest.setQueryId(QUERY_FAILED_INSTANCE);    String time=InstanceState.pad(System.currentTimeMillis() - clusterConfig.getInstanceTimeout());    queryRequest.setAdditionalParameter(InstanceState.PROP_TIMESTAMP_LEASE,time);    logger.debug("Attempt query {} for failed instances",QUERY_FAILED_INSTANCE);    List<ResourceResponse> resultList=repoService.query(queryRequest);    for (    ResourceResponse resource : resultList) {      Map<String,Object> valueMap=resource.getContent().asMap();      String id=(String)valueMap.get("instanceId");      InstanceState state=new InstanceState(id,valueMap);switch (state.getState()) {case InstanceState.STATE_RUNNING:        failedInstances.put(id,state);      break;case InstanceState.STATE_PROCESSING_DOWN:    if (state.hasRecoveringFailed(clusterConfig.getInstanceRecoveryTimeout())) {      failedInstances.put(id,state);    }  break;case InstanceState.STATE_DOWN:break;}}} catch (ResourceException e) {logger.error("Error reading instance check in map",e);}return failedInstances;}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  vcSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  public long length() throws SerialException {  isValid();  return len;}  }
class C{  public static Properties load(String basedir,boolean bServer) throws Exception {  if (!basedir.endsWith(File.separator)) {    basedir=basedir + File.separator;  }  Properties prop=null;  String amConfigProperties=basedir + SetupConstants.AMCONFIG_PROPERTIES;  File file=new File(amConfigProperties);  if (file.exists()) {    prop=new Properties();    InputStream propIn=new FileInputStream(amConfigProperties);    try {      prop.load(propIn);    }  finally {      propIn.close();    }    SystemProperties.initializeProperties(prop);  } else {    isBootstrap=true;    BootstrapData bData=new BootstrapData(basedir);    prop=getConfiguration(bData,true,bServer);  }  return prop;}  }
class C{  public void error(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg) throws TransformerException {  error(srcLctr,styleNode,sourceNode,msg,null);}  }
class C{  void auditAccessSuccess(JsonValue responseDetail){  if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_OUTCOME)) {    final long endTime=currentTimeMillis();    final long elapsedTime=endTime - startTime;    AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent(realm).forHttpRequest(context,request).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component);    if (responseDetail == null) {      builder.response(SUCCESSFUL,"",elapsedTime,MILLISECONDS);    } else {      builder.responseWithDetail(SUCCESSFUL,"",elapsedTime,MILLISECONDS,responseDetail);    }    addSessionDetailsFromSSOTokenContextIfNotNull(builder,context);    if (ipAddressHeaderPropertyIsSet()) {      setClientFromHttpContextHeaderIfExists(builder,context);    }    AuditEvent auditEvent=builder.toEvent();    postProcessEvent(auditEvent);    auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix06.class,args);}  }
class C{  public TabStop(float pos,int align,int leader){  alignment=align;  this.leader=leader;  position=pos;}  }
class C{  public void testSecretKeyFactory10() throws InvalidKeyException, InvalidKeySpecException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  byte[] bb=new byte[24];  KeySpec ks=(defaultAlgorithm.equals(defaultAlgorithm2) ? (KeySpec)new DESKeySpec(bb) : (KeySpec)new DESedeKeySpec(bb));  KeySpec rks=null;  SecretKeySpec secKeySpec=new SecretKeySpec(bb,defaultAlgorithm);  SecretKey secKey=null;  SecretKeyFactory[] skF=createSKFac();  assertNotNull("SecretKeyFactory object were not created",skF);  for (int i=0; i < skF.length; i++) {    try {      skF[i].generateSecret(null);      fail("generateSecret(null): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    secKey=skF[i].generateSecret(ks);    try {      skF[i].getKeySpec(null,null);      fail("getKeySpec(null,null): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    try {      skF[i].getKeySpec(null,ks.getClass());      fail("getKeySpec(null, Class): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    try {      skF[i].getKeySpec(secKey,null);      fail("getKeySpec(secKey, null): NullPointerException or InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }catch (    NullPointerException e) {    }    try {      Class c;      if (defaultAlgorithm.equals(defaultAlgorithm2)) {        c=DESedeKeySpec.class;      } else {        c=DESKeySpec.class;      }      skF[i].getKeySpec(secKeySpec,c);      fail("getKeySpec(secKey, Class): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    rks=skF[i].getKeySpec(secKeySpec,ks.getClass());    if (defaultAlgorithm.equals(defaultAlgorithm1)) {      assertTrue("Incorrect getKeySpec() result 1",rks instanceof DESedeKeySpec);    } else {      assertTrue("Incorrect getKeySpec() result 1",rks instanceof DESKeySpec);    }    rks=skF[i].getKeySpec(secKey,ks.getClass());    if (defaultAlgorithm.equals(defaultAlgorithm1)) {      assertTrue("Incorrect getKeySpec() result 2",rks instanceof DESedeKeySpec);    } else {      assertTrue("Incorrect getKeySpec() result 2",rks instanceof DESKeySpec);    }  }}  }
class C{  public final boolean isProxiable(){  return flags[PROXIABLE_TICKET_FLAG];}  }
class C{  public AckMsg(CSN csn){  this.csn=csn;}  }
class C{  public void shape(char[] text,int start,int count,int context){  checkParams(text,start,count);  if (isContextual()) {    int ctxKey=getKeyFromMask(context);    if (rangeSet == null) {      shapeContextually(text,start,count,ctxKey);    } else {      shapeContextually(text,start,count,Range.values()[ctxKey]);    }  } else {    shapeNonContextually(text,start,count);  }}  }
class C{  ProtectedResource(String resourceName,Set policies){  this.resourceName=resourceName;  this.policies=policies;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Throwable cause=super.getCause();  if (!(cause instanceof IOException))   throw new InvalidObjectException("Cause must be an IOException");}  }
class C{  public double num(){  return 0.0;}  }
class C{  public ExtendedOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,String requestOID,ByteString requestValue){  super(clientConnection,operationID,messageID,requestControls);  this.requestOID=requestOID;  this.requestValue=requestValue;  responseOID=null;  responseValue=null;  responseControls=new ArrayList<>();  cancelRequest=null;  if (requestOID.equals(OID_CANCEL_REQUEST)) {    cancelResult=new CancelResult(ResultCode.CANNOT_CANCEL,ERR_CANNOT_CANCEL_CANCEL.get());  }  if (requestOID.equals(OID_START_TLS_REQUEST)) {    cancelResult=new CancelResult(ResultCode.CANNOT_CANCEL,ERR_CANNOT_CANCEL_START_TLS.get());  }}  }
class C{  public int toInt(){  if (length < 4) {    throw new IndexOutOfBoundsException();  }  int v=0;  for (int i=0; i < 4; i++) {    v<<=8;    v|=buffer[offset + i] & 0xFF;  }  return v;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  TextComponentPeer peer=(TextComponentPeer)this.peer;  if (peer != null) {    text=peer.getText();    selectionStart=peer.getSelectionStart();    selectionEnd=peer.getSelectionEnd();  }  s.defaultWriteObject();  AWTEventMulticaster.save(s,textListenerK,textListener);  s.writeObject(null);}  }
class C{  private void buildField(ClassWriter classWriter,List<SFieldDef> fields){  for (  SFieldDef field : fields) {    FieldVisitor fieldVisitor=classWriter.visitField(acc(field.modifiers()),field.name(),typeToDesc(field.type()),null,null);    for (    SAnno anno : field.annos()) {      AnnotationVisitor annotationVisitor=fieldVisitor.visitAnnotation(typeToDesc(anno.type()),annotationIsVisible(anno));      buildAnnotation(annotationVisitor,anno);    }    fieldVisitor.visitEnd();  }}  }
class C{  public Reference<String> newLiteralReference(String s){  return new WeakReference<String>(s);}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public static String encryptLocal(String clearText){  return encode(clearText,localEncryptor);}  }
class C{  protected boolean lineEnd(TextView widget,Spannable buffer){  return false;}  }
class C{  @Override public Tag createDefaultTag(){  if (TagOptionSingleton.getInstance().getID3V2Version() == ID3V2Version.ID3_V24) {    return new ID3v24Tag();  } else   if (TagOptionSingleton.getInstance().getID3V2Version() == ID3V2Version.ID3_V23) {    return new ID3v23Tag();  } else   if (TagOptionSingleton.getInstance().getID3V2Version() == ID3V2Version.ID3_V22) {    return new ID3v22Tag();  }  return new ID3v24Tag();}  }
class C{  public void reset(AsynchronousSocketChannel channel,SocketWrapperBase<Nio2Channel> socket) throws IOException {  this.sc=channel;  this.socket=socket;  bufHandler.reset();}  }
class C{  public WildcardFileFilter(String wildcard,IOCase caseSensitivity){  if (wildcard == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.wildcards=new String[]{wildcard};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  protected static void checkCRLs(ExtendedPKIXParameters paramsPKIX,X509Certificate cert,Date validDate,X509Certificate sign,PublicKey workingPublicKey,List certPathCerts) throws AnnotatedException {  AnnotatedException lastException=null;  CRLDistPoint crldp=null;  try {    crldp=CRLDistPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(cert,RFC3280CertPathUtilities.CRL_DISTRIBUTION_POINTS));  } catch (  Exception e) {    throw new AnnotatedException("CRL distribution point extension could not be read.",e);  }  try {    CertPathValidatorUtilities.addAdditionalStoresFromCRLDistributionPoint(crldp,paramsPKIX);  } catch (  AnnotatedException e) {    throw new AnnotatedException("No additional CRL locations could be decoded from CRL distribution point extension.",e);  }  CertStatus certStatus=new CertStatus();  ReasonsMask reasonsMask=new ReasonsMask();  boolean validCrlFound=false;  if (crldp != null) {    DistributionPoint dps[]=null;    try {      dps=crldp.getDistributionPoints();    } catch (    Exception e) {      throw new AnnotatedException("Distribution points could not be read.",e);    }    if (dps != null) {      for (int i=0; i < dps.length && certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonsMask.isAllReasons(); i++) {        ExtendedPKIXParameters paramsPKIXClone=(ExtendedPKIXParameters)paramsPKIX.clone();        try {          checkCRL(dps[i],paramsPKIXClone,cert,validDate,sign,workingPublicKey,certStatus,reasonsMask,certPathCerts);          validCrlFound=true;        } catch (        AnnotatedException e) {          lastException=e;        }      }    }  }  if (certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonsMask.isAllReasons()) {    try {      ASN1Primitive issuer=null;      try {        issuer=new ASN1InputStream(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert).getEncoded()).readObject();      } catch (      Exception e) {        throw new AnnotatedException("Issuer from certificate for CRL could not be reencoded.",e);      }      DistributionPoint dp=new DistributionPoint(new DistributionPointName(0,new GeneralNames(new GeneralName(GeneralName.directoryName,issuer))),null,null);      ExtendedPKIXParameters paramsPKIXClone=(ExtendedPKIXParameters)paramsPKIX.clone();      checkCRL(dp,paramsPKIXClone,cert,validDate,sign,workingPublicKey,certStatus,reasonsMask,certPathCerts);      validCrlFound=true;    } catch (    AnnotatedException e) {      lastException=e;    }  }  if (!validCrlFound) {    if (lastException instanceof AnnotatedException) {      throw lastException;    }    throw new AnnotatedException("No valid CRL found.",lastException);  }  if (certStatus.getCertStatus() != CertStatus.UNREVOKED) {    String message="Certificate revocation after " + certStatus.getRevocationDate();    message+=", reason: " + crlReasons[certStatus.getCertStatus()];    throw new AnnotatedException(message);  }  if (!reasonsMask.isAllReasons() && certStatus.getCertStatus() == CertStatus.UNREVOKED) {    certStatus.setCertStatus(CertStatus.UNDETERMINED);  }  if (certStatus.getCertStatus() == CertStatus.UNDETERMINED) {    throw new AnnotatedException("Certificate status could not be determined.");  }}  }
class C{  public void makeImmutable(){}  }
class C{  public boolean isLayoutValid(){  return (minorValid && majorValid && childSizeValid);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  private void resize(){  Entry[] oldTab=table;  int oldLen=oldTab.length;  int newLen=oldLen * 2;  Entry[] newTab=new Entry[newLen];  int count=0;  for (int j=0; j < oldLen; ++j) {    Entry e=oldTab[j];    if (e != null) {      ThreadLocal<?> k=e.get();      if (k == null) {        e.value=null;      } else {        int h=k.threadLocalHashCode & (newLen - 1);        while (newTab[h] != null)         h=nextIndex(h,newLen);        newTab[h]=e;        count++;      }    }  }  setThreshold(newLen);  size=count;  table=newTab;}  }
class C{  public R visitDuration(DurationPropertyDefinition pd,Long v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public FirstChangeNumberVirtualAttributeProvider(ReplicationServer replicationServer){  this.replicationServer=replicationServer;}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (changeSupport != null) {    changeSupport.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public FrameBodyTEXT(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public boolean isIncremental(){  return isIncremental;}  }
class C{  public static void centerOnComponent(Window comp,Component ref){  comp.setLocationRelativeTo(ref);}  }
class C{  public static String fillInBasicAuthInfo(BaseConfigType config,String locationURL){  if (config == null) {    return locationURL;  }  Map map=SAML2MetaUtils.getAttributes(config);  List baoList=(List)map.get(SAML2Constants.BASIC_AUTH_ON);  if (baoList == null || baoList.isEmpty()) {    return locationURL;  }  String on=(String)baoList.get(0);  if (on == null) {    return locationURL;  }  on=on.trim();  if (on.length() == 0 || !on.equalsIgnoreCase("true")) {    return locationURL;  }  List ul=(List)map.get(SAML2Constants.BASIC_AUTH_USER);  if (ul == null || ul.isEmpty()) {    return locationURL;  }  String u=(String)ul.get(0);  if (u == null) {    return locationURL;  }  u=u.trim();  if (u.length() == 0) {    return locationURL;  }  List pl=(List)map.get(SAML2Constants.BASIC_AUTH_PASSWD);  String p=null;  if (pl != null && !pl.isEmpty()) {    p=(String)pl.get(0);  }  if (p == null) {    p="";  }  String dp=SAMLUtilsCommon.decodePassword(p);  int index=locationURL.indexOf("//");  return locationURL.substring(0,index + 2) + u + ":"+ dp+ "@"+ locationURL.substring(index + 2);}  }
class C{  public static String encodeECC200(String codewords,SymbolInfo symbolInfo){  if (codewords.length() != symbolInfo.getDataCapacity()) {    throw new IllegalArgumentException("The number of codewords does not match the selected symbol");  }  StringBuilder sb=new StringBuilder(symbolInfo.getDataCapacity() + symbolInfo.getErrorCodewords());  sb.append(codewords);  int blockCount=symbolInfo.getInterleavedBlockCount();  if (blockCount == 1) {    String ecc=createECCBlock(codewords,symbolInfo.getErrorCodewords());    sb.append(ecc);  } else {    sb.setLength(sb.capacity());    int[] dataSizes=new int[blockCount];    int[] errorSizes=new int[blockCount];    int[] startPos=new int[blockCount];    for (int i=0; i < blockCount; i++) {      dataSizes[i]=symbolInfo.getDataLengthForInterleavedBlock(i + 1);      errorSizes[i]=symbolInfo.getErrorLengthForInterleavedBlock(i + 1);      startPos[i]=0;      if (i > 0) {        startPos[i]=startPos[i - 1] + dataSizes[i];      }    }    for (int block=0; block < blockCount; block++) {      StringBuilder temp=new StringBuilder(dataSizes[block]);      for (int d=block; d < symbolInfo.getDataCapacity(); d+=blockCount) {        temp.append(codewords.charAt(d));      }      String ecc=createECCBlock(temp.toString(),errorSizes[block]);      int pos=0;      for (int e=block; e < errorSizes[block] * blockCount; e+=blockCount) {        sb.setCharAt(symbolInfo.getDataCapacity() + e,ecc.charAt(pos++));      }    }  }  return sb.toString();}  }
class C{  @Override public void removeConstraint(SecurityConstraint constraint){synchronized (constraintsLock) {    int n=-1;    for (int i=0; i < constraints.length; i++) {      if (constraints[i].equals(constraint)) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    SecurityConstraint results[]=new SecurityConstraint[constraints.length - 1];    for (int i=0; i < constraints.length; i++) {      if (i != n)       results[j++]=constraints[i];    }    constraints=results;  }  fireContainerEvent("removeConstraint",constraint);}  }
class C{  public JKTableRecord deleteRow(final int selectedRow){  final JKTableRecord removed=removeRecord(selectedRow);  removed.setStatus(RecordStatus.DELETED);  if (removed != null) {    this.deletedRecords.add(removed);  }  fireTableRowsDeleted(selectedRow,selectedRow);  return removed;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NamedNodeMap newAttributes;  Element element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");  newAttributes=element.getAttributes();  attribute=(Attr)newAttributes.getNamedItemNS("http://www.nist.gov","domestic");  assertNull("namednodemapremovenameditemns09",attribute);}  }
class C{  private void assertConflictAutomaticallyResolved(int expectedAlertCount){  assertEquals(DummyAlertHandler.getAlertCount(),expectedAlertCount,"Expected no new alert to be generated when automatically resolving conflicts");}  }
class C{  public UnknownHostException(String s,Exception ex){  super(s,ex);}  }
class C{  protected String stop(String name,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.stop(printWriter,name,smClient);  return stringWriter.toString();}  }
class C{  public TRANSACTION_ROLLEDBACK(){  this("");}  }
class C{  public WildcardFilter(List<String> wildcards){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard list must not be null");  }  this.wildcards=wildcards.toArray(new String[wildcards.size()]);}  }
class C{  public void close() throws IOException {  super.close();  disposerRecord.dispose();  stream=null;  cache=null;}  }
class C{  static boolean newerRoboZonkyVersionExists(final Future<VersionIdentifier> futureVersion){  try {    final VersionIdentifier version=futureVersion.get();    final String latestStable=version.getLatestStable();    final boolean hasNewerStable=VersionCheck.isCurrentVersionOlderThan(latestStable);    if (hasNewerStable) {      VersionChecker.LOGGER.info("You are using an obsolete version of RoboZonky. Please upgrade to {}.",latestStable);      return true;    }    final Optional<String> latestUnstable=version.getLatestUnstable();    final boolean hasNewerUnstable=latestUnstable.isPresent() && VersionCheck.isCurrentVersionOlderThan(latestUnstable.get());    if (hasNewerUnstable) {      VersionChecker.LOGGER.info("You are using the latest stable version of RoboZonky.");      VersionChecker.LOGGER.info("There is a new beta version of RoboZonky available. Try version {}, " + " if you feel adventurous.",latestUnstable.get());      return true;    } else {      VersionChecker.LOGGER.info("You are using the latest version of RoboZonky.");      return false;    }  } catch (  final InterruptedException|ExecutionException ex) {    VersionChecker.LOGGER.trace("Version check failed.",ex);    return false;  }}  }
class C{  protected <V>PageIterator<V> createPageIterator(PagedRequest<V> request){  return new PageIterator<V>(request,client);}  }
class C{  public DefaultHttpResponseFactory(ReasonPhraseCatalog catalog){  if (catalog == null) {    throw new IllegalArgumentException("Reason phrase catalog must not be null.");  }  this.reasonCatalog=catalog;}  }
class C{  public SortResponseControl(String id,boolean criticality,byte[] value) throws IOException {  super(id,criticality,value);  BerDecoder ber=new BerDecoder(value,0,value.length);  ber.parseSeq(null);  resultCode=ber.parseEnumeration();  if ((ber.bytesLeft() > 0) && (ber.peekByte() == Ber.ASN_CONTEXT)) {    badAttrId=ber.parseStringWithTag(Ber.ASN_CONTEXT,true,null);  }}  }
class C{  public String addSymbol(char[] buffer,int offset,int length){  int bucket=hash(buffer,offset,length) % fTableSize;  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (buffer[offset + i] != entry.characters[i]) {          continue OUTER;        }      }      return entry.symbol;    }  }  Entry entry=new Entry(buffer,offset,length,fBuckets[bucket]);  fBuckets[bucket]=entry;  return entry.symbol;}  }
class C{  public void extract(File destination) throws ApplicationException {  extract(Utils.getPath(destination));}  }
class C{  public Packet(PacketType packetType){  type=packetType;}  }
class C{  public void testScrollToCommand() throws Exception {  HorizontalScrollView scrollView=getViewAtPath(0);  ScrollViewTestModule jsModule=getReactContext().getCatalystInstance().getJSModule(ScrollViewTestModule.class);  assertEquals(0,scrollView.getScrollX());  jsModule.scrollTo(300,0);  waitForBridgeAndUIIdle();  getInstrumentation().waitForIdleSync();  long timeout=10000;  long interval=50;  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < timeout) {    if (scrollView.getScrollX() > 0) {      break;    }    Thread.sleep(interval);  }  assertNotSame(0,scrollView.getScrollX());}  }
class C{  public AMPrimaryMastHeadViewBean(String name){  super(name);}  }
class C{  @Override public Call<MapMatchingResponse> cloneCall(){  return getCall().clone();}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException, ClassNotFoundException {  ObjectOutputStream.PutField fields=s.putFields();  fields.put("buf",buf);  fields.put("len",len);  fields.put("origLen",origLen);  fields.put("clob",clob instanceof Serializable ? clob : null);  s.writeFields();}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  if (m instanceof EnumMap) {    EnumMap<?,?> em=(EnumMap<?,?>)m;    if (em.keyType != keyType) {      if (em.isEmpty())       return;      throw new ClassCastException(em.keyType + " != " + keyType);    }    for (int i=0; i < keyUniverse.length; i++) {      Object emValue=em.vals[i];      if (emValue != null) {        if (vals[i] == null)         size++;        vals[i]=emValue;      }    }  } else {    super.putAll(m);  }}  }
class C{  public void save() throws Exception {  String xml=strXMLDeclarationHdr + SMSSchema.nodeToString(root);  ServerConfiguration.setServerConfigXML(ssoToken,SystemProperties.getServerInstanceName(),xml);}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof MBeanServerPermission))   return false;  MBeanServerPermission that=(MBeanServerPermission)p;  return ((this.mask & that.mask) == that.mask);}  }
class C{  public static void checkAttributes(String typeOfTag,Node n,ValidAttribute[] validAttributes,ErrorDispatcher err) throws JasperException {  Attributes attrs=n.getAttributes();  Mark start=n.getStart();  boolean valid=true;  int tempLength=(attrs == null) ? 0 : attrs.getLength();  Vector<String> temp=new Vector<>(tempLength,1);  for (int i=0; i < tempLength; i++) {    @SuppressWarnings("null") String qName=attrs.getQName(i);    if ((!qName.equals("xmlns")) && (!qName.startsWith("xmlns:"))) {      temp.addElement(qName);    }  }  Node.Nodes tagBody=n.getBody();  if (tagBody != null) {    int numSubElements=tagBody.size();    for (int i=0; i < numSubElements; i++) {      Node node=tagBody.getNode(i);      if (node instanceof Node.NamedAttribute) {        String attrName=node.getAttributeValue("name");        temp.addElement(attrName);        if (n.getAttributeValue(attrName) != null) {          err.jspError(n,"jsp.error.duplicate.name.jspattribute",attrName);        }      } else {        break;      }    }  }  String missingAttribute=null;  for (int i=0; i < validAttributes.length; i++) {    int attrPos;    if (validAttributes[i].mandatory) {      attrPos=temp.indexOf(validAttributes[i].name);      if (attrPos != -1) {        temp.remove(attrPos);        valid=true;      } else {        valid=false;        missingAttribute=validAttributes[i].name;        break;      }    }  }  if (!valid) {    err.jspError(start,"jsp.error.mandatory.attribute",typeOfTag,missingAttribute);  }  int attrLeftLength=temp.size();  if (attrLeftLength == 0) {    return;  }  String attribute=null;  for (int j=0; j < attrLeftLength; j++) {    valid=false;    attribute=temp.elementAt(j);    for (int i=0; i < validAttributes.length; i++) {      if (attribute.equals(validAttributes[i].name)) {        valid=true;        break;      }    }    if (!valid) {      err.jspError(start,"jsp.error.invalid.attribute",typeOfTag,attribute);    }  }}  }
class C{  private boolean expand_to_door_section(ExpandObject p_door,int p_section_no,PlaSegmentFloat p_shape_entry,MazeListElement p_from_element,int p_add_costs,MazeAdjustment p_adjustment){  if (p_door.get_maze_search_element(p_section_no).is_occupied || p_shape_entry == null) {    return false;  }  ExpandRoomComplete next_room=p_door.other_room_complete(p_from_element.next_room);  int layer=p_from_element.next_room.get_layer();  PlaPointFloat shape_entry_middle=p_shape_entry.point_a.middle_point(p_shape_entry.point_b);  double expansion_value=p_from_element.expansion_value + p_add_costs + shape_entry_middle.distance_weighted(p_from_element.shape_entry.point_a.middle_point(p_from_element.shape_entry.point_b),art_ctrl.trace_costs[layer].horizontal,art_ctrl.trace_costs[layer].vertical);  double sorting_value=expansion_value + destination_distance.calculate(shape_entry_middle,layer);  boolean room_ripped=p_add_costs > 0 && p_adjustment == MazeAdjustment.NONE || p_from_element.already_checked && p_from_element.room_ripped;  MazeListElement new_element=new MazeListElement(p_door,p_section_no,p_from_element.door,p_from_element.section_no_of_door,expansion_value,sorting_value,next_room,p_shape_entry,room_ripped,p_adjustment,false);  maze_expansion_list.add(new_element);  return true;}  }
class C{  public static boolean isSameDay(Calendar tvCalendar,Calendar today){  return tvCalendar.get(Calendar.YEAR) == today.get(Calendar.YEAR) && tvCalendar.get(Calendar.MONTH) == today.get(Calendar.MONTH) && tvCalendar.get(Calendar.DAY_OF_MONTH) == today.get(Calendar.DAY_OF_MONTH);}  }
class C{  protected boolean isHttpSeparator(char ch){  return (HTTP_SEPARATORS.indexOf(ch) >= 0);}  }
class C{  public static void writeAttribue(final UIComponent component,final String sourceKey,final String targetKey,final Object defaultValue) throws IOException {  final Object value=JKJsfUtil.getAttribute(component,sourceKey,defaultValue);  JKJsfUtil.context().getResponseWriter().writeAttribute(targetKey == null ? sourceKey : targetKey,value,null);}  }
class C{  public Lyrics3v2(ByteBuffer byteBuffer) throws TagNotFoundException, IOException {  try {    this.read(byteBuffer);  } catch (  TagException e) {    e.printStackTrace();  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  VariableStack vars=transformer.getXPathContext().getVarStack();  if (!vars.isLocalSet(m_index)) {    int sourceNode=transformer.getXPathContext().getCurrentNode();    XObject var=getValue(transformer,sourceNode);    transformer.getXPathContext().getVarStack().setLocalVariable(m_index,var);  }}  }
class C{  public void testMaxUnequal2(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="94488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.max(bNumber));}  }
class C{  static <K extends Comparable<K>,V>BlockLogWriter<K,V> newWriter(final LogWriter writer,final RecordParser<K,V> parser){  return new BlockLogWriter<>(writer,parser,BLOCK_SIZE);}  }
class C{  public PERSIST_STORE(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  @Override public void shutdown(){synchronized (lock) {    shutdown=true;    logger.debug("Job Scheduler Stopped");  }}  }
class C{  public Class<?> parameterType(int num){  return ptypes[num];}  }
class C{  public int read() throws IOException {  if (pos >= 0) {    int cur=pos % BUFF_SIZE;    if (cur < bar) {      pos++;      return buff[cur];    }    if (cur != end) {      buff[cur]=inStream.read();      bar=cur + 1;      pos++;      return buff[cur];    } else {      pos=-1;    }  }  return inStream.read();}  }
class C{  public LDIFEntryWriter(final OutputStream out){  super(out);}  }
class C{  public static <E>Set<E> singleton(E object){  return new SingletonSet<E>(object);}  }
class C{  public PdfPage addPage(PdfPage page){  checkClosingStatus();  checkAndAddPage(page);  dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.INSERT_PAGE,page));  return page;}  }
class C{  public boolean isReturnedByDefault(){  return returnByDefault;}  }
class C{  public StringBuffer append(int i){  IntegralToString.appendInt(this,i);  return this;}  }
class C{  public AtomicInteger(int initialValue){  value=initialValue;}  }
class C{  public static void registerKeyManagerProvider(DN providerDN,KeyManagerProvider<?> provider){  directoryServer.keyManagerProviders.put(providerDN,provider);}  }
class C{  public static String toPunycode(String domainName){  try {    return IDN.toASCII(domainName);  } catch (  Exception ex) {    LOG.debug("Cannot convert " + domainName + " to punycode",ex);  }  return domainName;}  }
class C{  public static boolean isItalic(AttributeSet a){  Boolean italic=(Boolean)a.getAttribute(Italic);  if (italic != null) {    return italic.booleanValue();  }  return false;}  }
class C{  public void putAll(Map m){  Set keys=m.keySet();  for (Iterator iter=keys.iterator(); iter.hasNext(); ) {    Object key=iter.next();    put(key,m.get(key));  }}  }
class C{  public void reset(){  contexts=new Context[32];  namespaceDeclUris=false;  contextPos=0;  contexts[contextPos]=currentContext=new Context();  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  public JDialog createDialog(Component parentComponent,String title) throws HeadlessException {  int style=styleFromMessageType(getMessageType());  return createDialog(parentComponent,title,style);}  }
class C{  @Override public Foo[] findByUuid_PrevAndNext(long fooId,String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_PrevAndNext(session,foo,uuid,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public final void testIsStatePreserved1(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  byte[] encodedKeyCopy=encodedKey.clone();  PKCS8EncodedKeySpec meks=new PKCS8EncodedKeySpec(encodedKeyCopy);  encodedKeyCopy[3]=(byte)5;  byte[] ek=meks.getEncoded();  assertTrue(Arrays.equals(encodedKey,ek));}  }
class C{  @Override public int compare(final Entry entry1,final Entry entry2){  final ByteString normalizedValue1=lowestValueOf(entry1);  final ByteString normalizedValue2=lowestValueOf(entry2);  if (normalizedValue1 == null) {    return normalizedValue2 != null ? 1 : 0;  } else   if (normalizedValue2 == null) {    return -1;  } else   if (isReverseOrder) {    return normalizedValue2.compareTo(normalizedValue1);  } else {    return normalizedValue1.compareTo(normalizedValue2);  }}  }
class C{  public static AnalyzerResponse containsAlertAfterUnexpectedMessage(TlsContext tlsContext){  int position=getUnexpectedMessagePosition(tlsContext);  if (position == -1) {    return AnalyzerResponse.NO_MODIFICATION;  } else {    ProtocolMessage pm=getNextProtocolMessageFromPeer(tlsContext,position);    if (pm != null && pm.getProtocolMessageType() == ProtocolMessageType.ALERT) {      return AnalyzerResponse.ALERT;    } else {      return AnalyzerResponse.NO_ALERT;    }  }}  }
class C{  private void writeIndent(int times) throws IOException {  for (int i=options.getBaseIndent() + times; i > 0; i--) {    writer.write(options.getIndent());  }}  }
class C{  public static void logModifyDNRequest(ModifyDNOperation modifyDNOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logModifyDNRequest(modifyDNOperation);  }}  }
class C{  public BatchUpdateException(String reason,String SQLState,int vendorCode,int[] updateCounts,Throwable cause){  super(reason,SQLState,vendorCode,cause);  this.updateCounts=(updateCounts == null) ? null : Arrays.copyOf(updateCounts,updateCounts.length);  this.longUpdateCounts=(updateCounts == null) ? null : copyUpdateCount(updateCounts);}  }
class C{  public CHAPPasswordAttribute(String password,int identifier){  super(CHAPPasswordAttribute.toOctets(password,identifier));  this.password=new String(super.getOctets(),3,super.getOctets().length - 3);  this.ident=identifier;}  }
class C{  public void print(Node node){  if (node == null) {    return;  }  int type=node.getNodeType();switch (type) {case Node.DOCUMENT_NODE:    if (!canonical) {      out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    }  print(((Document)node).getDocumentElement());out.flush();break;case Node.ELEMENT_NODE:out.print('<');out.print(node.getLocalName());Attr attrs[]=sortAttributes(node.getAttributes());for (int i=0; i < attrs.length; i++) {Attr attr=attrs[i];out.print(' ');out.print(attr.getLocalName());out.print("=\"");out.print(normalize(attr.getNodeValue()));out.print('"');}out.print('>');printChildren(node);break;case Node.ENTITY_REFERENCE_NODE:if (canonical) {printChildren(node);} else {out.print('&');out.print(node.getLocalName());out.print(';');}break;case Node.CDATA_SECTION_NODE:if (canonical) {out.print(normalize(node.getNodeValue()));} else {out.print("<![CDATA[");out.print(node.getNodeValue());out.print("]]>");}break;case Node.TEXT_NODE:out.print(normalize(node.getNodeValue()));break;case Node.PROCESSING_INSTRUCTION_NODE:out.print("<?");out.print(node.getLocalName());String data=node.getNodeValue();if (data != null && data.length() > 0) {out.print(' ');out.print(data);}out.print("?>");break;}if (type == Node.ELEMENT_NODE) {out.print("</");out.print(node.getLocalName());out.print('>');}out.flush();}  }
class C{  void installFilter(final Filter filter){synchronized (stateLock) {    GrizzlyUtils.addFilterToConnection(filter,connection);  }}  }
class C{  private boolean split_wtrace_points(LinkedList<BrdTracep> clean_list,int seg_index,PlaSegmentInt curr_segment,AwtreeFindEntry overlap_tentry,BrdTracep other_trace){  int other_line_no=overlap_tentry.shape_index_in_object + 1;  PlaSegmentInt other_segment=other_trace.polyline.segment_get(other_line_no);  ArrayList<PlaPointInt> intersecting_points=curr_segment.intersection_points(other_segment);  if (intersecting_points.size() < 1)   return false;  if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG)) {    r_board.userPrintln("split_wtrace_points: have " + intersecting_points.size());    r_board.userPrintln("   my_id=" + get_id_no() + " other id="+ other_trace.get_id_no());  }  PlaPointInt i_intersect=intersecting_points.get(0);  join_move_to(i_intersect);  boolean other_interset=other_segment.contains(i_intersect,0);  boolean other_split=split_wtrace_other_point(clean_list,i_intersect,other_trace,other_line_no,curr_segment);  if (other_split && !other_interset)   r_board.userPrintln("split_wtrace_points: impossible other_split && ! other_interset ");  boolean own_split=split_wtrace_own_point(clean_list,i_intersect,seg_index,curr_segment,other_interset);  if (other_split && own_split == false)   r_board.userPrintln("split_wtrace_points: other_split && own_split == false");  if (other_split || own_split)   remove_if_cycle(clean_list);  return own_split;}  }
class C{  public LDAPListener(final String host,final int port,final ServerConnectionFactory<LDAPClientContext,Integer> factory) throws IOException {  this(host,port,factory,Options.defaultOptions());}  }
class C{  public Resource supportedAction(final Action action){  this.supportedActions.add(action);  return this;}  }
class C{  public SelectConditionTypeViewBean(){  super("SelectConditionType",DEFAULT_DISPLAY_URL);}  }
class C{  public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  public void removeProperty(String name){  properties.remove(name);}  }
class C{  public Hashtable<String,Object> toHash(){  final Hashtable<String,Object> values=new Hashtable();  for (int i=0; i < this.columnsValues.size(); i++) {    final JKTableColumnValue value=this.columnsValues.get(i);    values.put(getColumn(i).getName(),value);  }  return values;}  }
class C{  public byte[] perform(byte[] blob) throws TokenStrategyFailedException {  Reject.ifTrue(blob == null);  try {    byte[] encryptedBlob=AccessController.doPrivileged(new EncryptAction(blob));    if (debug.messageEnabled()) {      debug.message(CoreTokenConstants.DEBUG_HEADER + "Encrypted Token");    }    return encryptedBlob;  } catch (  PrivilegedActionException e) {    throw new TokenStrategyFailedException("Failed to encrypt JSON Blob",e);  }}  }
class C{  private void addPasswordToHistory(String encodedPassword){  if (!maintainHistory()) {    if (logger.isTraceEnabled()) {      logger.trace("Not doing anything because password history maintenance is disabled.");    }    return;  }  LinkedList<Attribute> removeAttrs=new LinkedList<>();  TreeMap<Long,ByteString> historyMap=getSortedHistoryValues(removeAttrs);  AttributeType historyType=DirectoryServer.getSchema().getAttributeType(OP_ATTR_PWPOLICY_HISTORY_LC);  int historyCount=passwordPolicy.getPasswordHistoryCount();  if (historyCount > 0 && historyMap.size() >= historyCount) {    int numToDelete=historyMap.size() - historyCount + 1;    LinkedHashSet<ByteString> removeValues=new LinkedHashSet<>(numToDelete);    Iterator<ByteString> iterator=historyMap.values().iterator();    while (iterator.hasNext() && numToDelete > 0) {      ByteString v=iterator.next();      removeValues.add(v);      iterator.remove();      numToDelete--;      if (logger.isTraceEnabled()) {        logger.trace("Removing history value %s to preserve the history count.",v);      }    }    if (!removeValues.isEmpty()) {      removeAttrs.add(newAttribute(historyType,removeValues));    }  }  long historyDuration=passwordPolicy.getPasswordHistoryDuration();  if (historyDuration > 0L) {    long minAgeToKeep=currentTime - 1000L * historyDuration;    Iterator<Long> iterator=historyMap.keySet().iterator();    LinkedHashSet<ByteString> removeValues=new LinkedHashSet<>();    while (iterator.hasNext()) {      long timestamp=iterator.next();      if (timestamp >= minAgeToKeep) {        break;      }      ByteString v=historyMap.get(timestamp);      removeValues.add(v);      iterator.remove();      if (logger.isTraceEnabled()) {        logger.trace("Removing history value %s to preserve the history duration.",v);      }    }    if (!removeValues.isEmpty()) {      removeAttrs.add(newAttribute(historyType,removeValues));    }  }  long newTimestamp=currentTime;  while (historyMap.containsKey(newTimestamp)) {    newTimestamp++;  }  String newHistStr=GeneralizedTimeSyntax.format(newTimestamp) + "#" + passwordPolicy.getPasswordAttribute().getSyntax().getOID()+ "#"+ encodedPassword;  Attribute newHistAttr=Attributes.create(historyType,newHistStr);  if (logger.isTraceEnabled()) {    logger.trace("Going to add history value " + newHistStr);  }  for (  Attribute a : removeAttrs) {    modifications.add(new Modification(ModificationType.DELETE,a,true));  }  modifications.add(new Modification(ModificationType.ADD,newHistAttr,true));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","terday",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","terday",value);}  }
class C{  public void purgeRelations() throws RelationServiceNotRegisteredException {  RELATION_LOGGER.entering(RelationService.class.getName(),"purgeRelations");  isActive();  List<MBeanServerNotification> localUnregNtfList;synchronized (myRefedMBeanObjName2RelIdsMap) {    localUnregNtfList=new ArrayList<MBeanServerNotification>(myUnregNtfList);    myUnregNtfList=new ArrayList<MBeanServerNotification>();  }  List<ObjectName> obsRefList=new ArrayList<ObjectName>();  Map<ObjectName,Map<String,List<String>>> localMBean2RelIdMap=new HashMap<ObjectName,Map<String,List<String>>>();synchronized (myRefedMBeanObjName2RelIdsMap) {    for (    MBeanServerNotification currNtf : localUnregNtfList) {      ObjectName unregMBeanName=currNtf.getMBeanName();      obsRefList.add(unregMBeanName);      Map<String,List<String>> relIdMap=myRefedMBeanObjName2RelIdsMap.get(unregMBeanName);      localMBean2RelIdMap.put(unregMBeanName,relIdMap);      myRefedMBeanObjName2RelIdsMap.remove(unregMBeanName);    }  }  updateUnregistrationListener(null,obsRefList);  for (  MBeanServerNotification currNtf : localUnregNtfList) {    ObjectName unregMBeanName=currNtf.getMBeanName();    Map<String,List<String>> localRelIdMap=localMBean2RelIdMap.get(unregMBeanName);    for (    Map.Entry<String,List<String>> currRel : localRelIdMap.entrySet()) {      final String currRelId=currRel.getKey();      List<String> localRoleNameList=currRel.getValue();      try {        handleReferenceUnregistration(currRelId,unregMBeanName,localRoleNameList);      } catch (      RelationNotFoundException exc1) {        throw new RuntimeException(exc1.getMessage());      }catch (      RoleNotFoundException exc2) {        throw new RuntimeException(exc2.getMessage());      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"purgeRelations");  return;}  }
class C{  public CTSDJLDAPv3PersistentSearchBuilder withRetry(int retry){  Reject.ifTrue(retry <= 0);  this.retry=retry;  return this;}  }
class C{  public MethodHandle findGetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_getField,refc,name,type);  return getDirectField(REF_getField,refc,field);}  }
class C{  public FilterExprIterator(){  super(null);}  }
class C{  private void enqueueNextTask(String queueName,DispatcherTask dispatcherTask){synchronized (syncRoot) {    Queue<DispatcherTask> queue=taskQueuesMap.get(queueName);    if (queue == null) {      queue=new LinkedList<>();      taskQueuesMap.put(queueName,queue);    }    queue.add(dispatcherTask);  }}  }
class C{  @Override public void close() throws SecurityException {  target.close();  setLevel(Level.OFF);}  }
class C{  private static boolean isEncryptionKeyValid(){  Map map=instance.defValues;  String ekey=((String)map.get(SetupConstants.CONFIG_VAR_ENCRYPTION_KEY));  if (ekey == null) {    ekey=AMSetupUtils.getRandomString().trim();    map.put(SetupConstants.CONFIG_VAR_ENCRYPTION_KEY,ekey);  }  return ((ekey != null) && (ekey.length() > 0)) ? true : false;}  }
class C{  public void write(byte[] b){  checkLengthBeforeWrite(b.length);  System.arraycopy(b,0,headerBuffer,pos,b.length);  pos=pos + b.length;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String qualifiedName="dmstc:domestic";  Document doc;  Document anotherDoc;  Node arg;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node setNode;  doc=(Document)load("staffNS",true);  anotherDoc=(Document)load("staffNS",true);  arg=anotherDoc.createAttributeNS(namespaceURI,qualifiedName);  arg.setNodeValue("Maybe");  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(0);  attributes=testAddress.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  @Override public void onSupportActionModeFinished(@NonNull final ActionMode mode){  delegate.onSupportActionModeFinished(mode);}  }
class C{  public void addSecurityRoleRef(SecurityRoleRef securityRoleRef){  securityRoleRefs.add(securityRoleRef);}  }
class C{  @Override public int doStartTag() throws JspException {  throw new UnsupportedOperationException("Illegal to invoke doStartTag() on TagAdapter wrapper");}  }
class C{  public void write_abstract_interface(java.lang.Object obj){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  private void _writeSignedVInt(int input) throws IOException {  _writePositiveVInt(SmileUtil.zigzagEncode(input));}  }
class C{  private void jumpToTheNearestEndingNode() throws SyntaxException {  while (current != null && (!(current instanceof EndingNode))) {    nextNode(true);  }}  }
class C{  public static <T>Expression<T> valueOf(String expression,Class<T> expectedType,Bindings initialBindings) throws ExpressionException {  return new Expression<>(expression,expectedType,initialBindings);}  }
class C{  public synchronized void addDropTargetListener(DropTargetListener dtl) throws TooManyListenersException {  if (dtl == null)   return;  if (equals(dtl))   throw new IllegalArgumentException("DropTarget may not be its own Listener");  if (dtListener == null)   dtListener=dtl; else   throw new TooManyListenersException();}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobOriginatingUserName);}  }
class C{  void add(MutableBigInteger addend){  int x=intLen;  int y=addend.intLen;  int resultLen=(intLen > addend.intLen ? intLen : addend.intLen);  int[] result=(value.length < resultLen ? new int[resultLen] : value);  int rstart=result.length - 1;  long sum;  long carry=0;  while (x > 0 && y > 0) {    x--;    y--;    sum=(value[x + offset] & LONG_MASK) + (addend.value[y + addend.offset] & LONG_MASK) + carry;    result[rstart--]=(int)sum;    carry=sum >>> 32;  }  while (x > 0) {    x--;    if (carry == 0 && result == value && rstart == (x + offset))     return;    sum=(value[x + offset] & LONG_MASK) + carry;    result[rstart--]=(int)sum;    carry=sum >>> 32;  }  while (y > 0) {    y--;    sum=(addend.value[y + addend.offset] & LONG_MASK) + carry;    result[rstart--]=(int)sum;    carry=sum >>> 32;  }  if (carry > 0) {    resultLen++;    if (result.length < resultLen) {      int temp[]=new int[resultLen];      System.arraycopy(result,0,temp,1,result.length);      temp[0]=1;      result=temp;    } else {      result[rstart--]=1;    }  }  value=result;  intLen=resultLen;  offset=result.length - resultLen;}  }
class C{  public PdfCanvas fillStroke(){  document.checkIsoConformance(currentGs,IsoKey.DRAWMODE_FILL_STROKE,resources);  contentStream.getOutputStream().writeBytes(B);  return this;}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  private int[] makeReorderedBuffer(int colFirst,int lastValue,int[] lastExpansion,boolean forward){  int[] result;  int firstValue=ordering.getUnicodeOrder(colFirst);  if (firstValue >= RuleBasedCollator.CONTRACTCHARINDEX) {    firstValue=forward ? nextContractChar(colFirst) : prevContractChar(colFirst);  }  int[] firstExpansion=null;  if (firstValue >= RuleBasedCollator.EXPANDCHARINDEX) {    firstExpansion=ordering.getExpandValueList(firstValue);  }  if (!forward) {    int temp1=firstValue;    firstValue=lastValue;    lastValue=temp1;    int[] temp2=firstExpansion;    firstExpansion=lastExpansion;    lastExpansion=temp2;  }  if (firstExpansion == null && lastExpansion == null) {    result=new int[2];    result[0]=firstValue;    result[1]=lastValue;  } else {    int firstLength=firstExpansion == null ? 1 : firstExpansion.length;    int lastLength=lastExpansion == null ? 1 : lastExpansion.length;    result=new int[firstLength + lastLength];    if (firstExpansion == null) {      result[0]=firstValue;    } else {      System.arraycopy(firstExpansion,0,result,0,firstLength);    }    if (lastExpansion == null) {      result[firstLength]=lastValue;    } else {      System.arraycopy(lastExpansion,0,result,firstLength,lastLength);    }  }  return result;}  }
class C{  public static boolean register(){  return getInstanceInternal(true).isRegistered();}  }
class C{  public boolean popRewindMark(){  boolean top=mark_size.empty();  m_size=top ? m_emptyNodeCount : mark_size.pop();  m_exptype.setSize(m_size);  m_firstch.setSize(m_size);  m_nextsib.setSize(m_size);  m_prevsib.setSize(m_size);  m_parent.setSize(m_size);  m_elemIndexes=null;  int ds=top ? m_emptyNSDeclSetCount : mark_nsdeclset_size.pop();  if (m_namespaceDeclSets != null) {    m_namespaceDeclSets.setSize(ds);  }  int ds1=top ? m_emptyNSDeclSetElemsCount : mark_nsdeclelem_size.pop();  if (m_namespaceDeclSetElements != null) {    m_namespaceDeclSetElements.setSize(ds1);  }  m_data.setSize(top ? m_emptyDataCount : mark_data_size.pop());  m_chars.setLength(top ? m_emptyCharsCount : mark_char_size.pop());  m_dataOrQName.setSize(top ? m_emptyDataQNCount : mark_doq_size.pop());  return m_size == 0;}  }
class C{  public Separator(char character,int quote,int escape){  this.character=character;  this.quote=quote;  this.escape=escape;}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public JAXBException(String message){  this(message,null,null);}  }
class C{  public boolean isInMemory(){  return !isThresholdExceeded();}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public CredentialException(String msg){  super(msg);}  }
class C{  public synchronized boolean canUndo(){  if (inProgress) {    UndoableEdit edit=editToBeUndone();    return edit != null && edit.canUndo();  } else {    return super.canUndo();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentfragmentnodevalue.class,args);}  }
class C{  public void testMac13() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    try {      macs[i].update(b,-10,b.length);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      macs[i].update(b,0,-10);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      macs[i].update(b,0,b.length + 1);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      macs[i].update(b,b.length - 1,2);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public <M extends Configuration>void registerDeleteListener(OptionalRelationDefinition<?,M> d,ServerManagedObjectDeleteListener<M> listener) throws ConfigException {  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d).parent();  ConfigDeleteListener adaptor=new ConfigDeleteListenerAdaptor<>(serverContext,path,d,listener);  registerDeleteListener(baseDN,adaptor);}  }
class C{  protected void addServiced(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  mBeanServer.invoke(oname,"addServiced",params,signature);}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  public JToolBar(String name){  this(name,HORIZONTAL);}  }
class C{  public DSAMEValueTag(){  super();}  }
class C{  @ConstructorProperties({"orientation"}) public JSplitPane(int newOrientation){  this(newOrientation,UIManager.getBoolean("SplitPane.continuousLayout"));}  }
class C{  Set<Class<?>> flattenHierarchy(Class<?> concreteClass){  Set<Class<?>> classes=flattenHierarchyCache.get(concreteClass);  if (classes == null) {    Set<Class<?>> classesCreation=getClassesFor(concreteClass);    classes=flattenHierarchyCache.putIfAbsent(concreteClass,classesCreation);    if (classes == null) {      classes=classesCreation;    }  }  return classes;}  }
class C{  private static Transform tokenizeTransformation(String transformation) throws NoSuchAlgorithmException {  if (transformation == null) {    throw new NoSuchAlgorithmException("No transformation given.");  }  String[] parts=new String[3];  int count=0;  StringTokenizer parser=new StringTokenizer(transformation,"/");  while (parser.hasMoreTokens() && count < 3) {    parts[count++]=parser.nextToken().trim();  }  if (count != 3 || parser.hasMoreTokens()) {    throw new NoSuchAlgorithmException("Invalid transformation format: " + transformation);  }  return new Transform(parts[0],parts[1],parts[2]);}  }
class C{  protected void readFrames(ByteBuffer byteBuffer,int size){  ID3v22Frame next;  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();  this.fileReadSize=size;  logger.finest(getLoggingFilename() + ":" + "Start of frame body at:"+ byteBuffer.position()+ ",frames sizes and padding is:"+ size);  while (byteBuffer.position() < size) {    try {      logger.finest(getLoggingFilename() + ":" + "looking for next frame at:"+ byteBuffer.position());      next=new ID3v22Frame(byteBuffer,getLoggingFilename());      String id=next.getIdentifier();      loadFrameIntoMap(id,next);    } catch (    PaddingException ex) {      logger.config(getLoggingFilename() + ":Found padding starting at:" + byteBuffer.position());      break;    }catch (    EmptyFrameException ex) {      logger.warning(getLoggingFilename() + ":" + "Empty Frame:"+ ex.getMessage());      this.emptyFrameBytes+=ID3v22Frame.FRAME_HEADER_SIZE;    }catch (    InvalidFrameIdentifierException ifie) {      logger.config(getLoggingFilename() + ":" + "Invalid Frame Identifier:"+ ifie.getMessage());      this.invalidFrames++;      break;    }catch (    InvalidFrameException ife) {      logger.warning(getLoggingFilename() + ":" + "Invalid Frame:"+ ife.getMessage());      this.invalidFrames++;      break;    }catch (    InvalidDataTypeException idete) {      logger.warning(getLoggingFilename() + ":Corrupt Frame:" + idete.getMessage());      this.invalidFrames++;      continue;    }  }}  }
class C{  FlowHead(CpsFlowExecution execution){  this(execution,execution.iota());}  }
class C{  public void initialize(String hostedProviderID,Set initParams){  FSUtils.debug.message("In FSDefaultSPAdapter.initialize.");  if ((initParams != null) && !initParams.isEmpty()) {    Iterator iter=initParams.iterator();    while (iter.hasNext()) {      String envValue=(String)iter.next();      if ((envValue.toUpperCase()).startsWith(FederationSPAdapter.ENV_REALM)) {        try {          realm=envValue.substring((FederationSPAdapter.ENV_REALM).length(),envValue.length());        } catch (        Exception e) {          if (FSUtils.debug.warningEnabled()) {            FSUtils.debug.warning("FSDefaultSPAdapter.init:Could not get realm:",e);          }        }        break;      }    }  }  if ((realm == null) || (realm.length() == 0)) {    realm=ROOT_REALM;  }}  }
class C{  public static boolean checkForForcedAuth(String xmlCompositeAdvice){  boolean returnForcedAuth=false;  try {    String decodedAdviceXML=URLDecoder.decode(xmlCompositeAdvice);    Map adviceMap=PolicyUtils.parseAdvicesXML(decodedAdviceXML);    if (utilDebug.messageEnabled()) {      utilDebug.message("AuthUtils.checkForForcedAuth : decoded XML " + "= " + decodedAdviceXML);      utilDebug.message("AuthUtils.checkForForcedAuth : result Map = " + adviceMap);    }    if (adviceMap != null) {      if (adviceMap.containsKey(AuthSchemeCondition.FORCE_AUTH_ADVICE)) {        returnForcedAuth=true;      }    }  } catch (  com.sun.identity.policy.PolicyException polExp) {    utilDebug.error("AuthUtils.checkForForcedAuth : Error in " + "Policy  XML parsing ",polExp);  }  if (utilDebug.messageEnabled()) {    utilDebug.message("AuthUtils.checkForForcedAuth: returnForcedAuth" + "= " + returnForcedAuth);  }  return returnForcedAuth;}  }
class C{  @SuppressWarnings("unchecked") public void writeBoolean(boolean x) throws SQLException {  attribs.add(Boolean.valueOf(x));}  }
class C{  static Object newInstance(ClassLoader classLoader,String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {  Class driverClass;  if (classLoader == null) {    driverClass=Class.forName(className);  } else {    driverClass=classLoader.loadClass(className);  }  return driverClass.newInstance();}  }
class C{  public String toString(){  return linkedException == null ? super.toString() : super.toString() + "\n - with linked exception:\n[" + linkedException.toString()+ "]";}  }
class C{  public static int createHashForCaseInsensitiveMapOfSetOfStrings(Map<String,Set<String>> map){  int hc=0;  for (  Map.Entry<String,Set<String>> currentEntry : map.entrySet()) {    if (currentEntry == null) {      continue;    }    Set<String> currentValue=currentEntry.getValue();    if (currentValue == null) {      continue;    }    for (    String currentString : currentValue) {      if (currentString == null) {        continue;      }      hc=hc * 31 + currentString.toLowerCase().hashCode();    }  }  return hc;}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public static AddRequest newAddRequest(final Entry entry){  return Requests.newAddRequest(entry).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  private Issuer fromSupportedDomainNames(final String givenDomainName) throws HeapException {  for (  final Issuer definedIssuer : heap.getAll(Issuer.class)) {    final List<Pattern> domainNames=definedIssuer.getSupportedDomains();    for (    final Pattern domainName : domainNames) {      if (domainName.matcher(givenDomainName).matches()) {        return definedIssuer;      }    }  }  return null;}  }
class C{  public ParseException createParseException(){  return new ParseException(getBuffer(),this.ptr);}  }
class C{  Class<?> leadingReferenceParameter(){  Class<?> ptype;  if (ptypes.length == 0 || (ptype=ptypes[0]).isPrimitive())   throw newIllegalArgumentException("no leading reference parameter");  return ptype;}  }
class C{  public static boolean isValidName(String str){  if (str.startsWith("`") && str.endsWith("`")) {    return isJavaValidName(str.substring(1,str.length() - 1));  }  return isJavaValidName(str) && !keys.contains(str);}  }
class C{  public PrinterStateReasons(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public PCalledPartyIDHeader createPCalledPartyIDHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  PCalledPartyID calledPartyID=new PCalledPartyID();  calledPartyID.setAddress(address);  return calledPartyID;}  }
class C{  public int hashCode(){  return m_dialogState;}  }
class C{  private static String attributeType(Method getter,Method setter) throws IntrospectionException {  Class<?> type=null;  if (getter != null) {    if (getter.getParameterTypes().length != 0) {      throw new IntrospectionException("bad getter arg count");    }    type=getter.getReturnType();    if (type == Void.TYPE) {      throw new IntrospectionException("getter " + getter.getName() + " returns void");    }  }  if (setter != null) {    Class<?> params[]=setter.getParameterTypes();    if (params.length != 1) {      throw new IntrospectionException("bad setter arg count");    }    if (type == null)     type=params[0]; else     if (type != params[0]) {      throw new IntrospectionException("type mismatch between " + "getter and setter");    }  }  if (type == null) {    throw new IntrospectionException("getter and setter cannot " + "both be null");  }  return type.getName();}  }
class C{  public void testToPlainStringNegPosExp(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E100";  BigDecimal aNumber=new BigDecimal(a);  String result="-1238096483923847545735673567457356356789029578490276878767828700000000000000000000000000000000000000000000000000000000000000000000000";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  public static Cookie newCookie(String name,String value,int maxAge){  return newCookie(name,value,maxAge,null,null);}  }
class C{  private int parseInt(RadiusResponse response,String intVal,String answer,int maxIdx,ContextHolder holder,Callback cb){  int idx=-1;  try {    idx=Integer.parseInt(intVal);  } catch (  final NumberFormatException e) {    LOG.error("Invalid number '" + intVal + "' specified in answer '"+ answer+ "' for callback "+ holder.getIdxOfCurrentCallback()+ " of type "+ cb.getClass().getSimpleName()+ " for callback set "+ holder.getIdxOfCallbackSetInModule()+ " in module "+ holder.getChainModuleIndex()+ (holder.getModuleName() != null ? " with name " + holder.getModuleName() : "")+ " of authentication chain "+ authChain+ " in realm "+ realm+ ". Denying Access.");    rejectAccessAndTerminateProcess(response,holder);    return idx;  }  if (idx < 0 || idx > maxIdx) {    LOG.error("Out of range index specified in answer '" + answer + "' for callback "+ holder.getIdxOfCurrentCallback()+ " of type "+ cb.getClass().getSimpleName()+ " for callback set "+ holder.getIdxOfCallbackSetInModule()+ " in module "+ holder.getChainModuleIndex()+ (holder.getModuleName() != null ? " with name " + holder.getModuleName() : "")+ " of authentication chain "+ authChain+ " in realm "+ realm+ ". Must be from 0 to "+ maxIdx+ ". Denying Access.");    rejectAccessAndTerminateProcess(response,holder);    return -1;  }  return idx;}  }
class C{  MonitorNotification(String type,Object source,long sequenceNumber,long timeStamp,String msg,ObjectName obsObj,String obsAtt,Object derGauge,Object trigger){  super(type,source,sequenceNumber,timeStamp,msg);  this.observedObject=obsObj;  this.observedAttribute=obsAtt;  this.derivedGauge=derGauge;  this.trigger=trigger;}  }
class C{  public void componentAdded(ContainerEvent e){}  }
class C{  public JMenuItem(String text,int mnemonic){  setModel(new DefaultButtonModel());  init(text,null);  setMnemonic(mnemonic);  initFocusability();}  }
class C{  @Inject public AuthorizationService(List<AuthorizeRequestValidator> requestValidators,ResourceOwnerSessionValidator resourceOwnerSessionValidator,OAuth2ProviderSettingsFactory providerSettingsFactory,ResourceOwnerConsentVerifier consentVerifier,ClientRegistrationStore clientRegistrationStore,AuthorizationTokenIssuer tokenIssuer,ClientAuthenticationFailureFactory failureFactory,CsrfProtection csrfProtection){  this.requestValidators=requestValidators;  this.resourceOwnerSessionValidator=resourceOwnerSessionValidator;  this.providerSettingsFactory=providerSettingsFactory;  this.consentVerifier=consentVerifier;  this.clientRegistrationStore=clientRegistrationStore;  this.tokenIssuer=tokenIssuer;  this.failureFactory=failureFactory;  this.csrfProtection=csrfProtection;}  }
class C{  public static boolean isErrorLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isErrorLoggable(level);  }}  }
class C{  public static void createMultiNodes(String key,Enumeration e,StringBuffer xml) throws ParserConfigurationException {  while (e.hasMoreElements()) {    createSingleNode(key,(String)e.nextElement(),xml);  }}  }
class C{  private Template templateWithNoAttribute(){  Template template=mock(Template.class);  when(template.hasAttribute(any(AttributeType.class))).thenReturn(false);  return template;}  }
class C{  public com.sun.identity.saml2.jaxb.metadataextquery.AuthzDecisionQueryDescriptorType createAuthzDecisionQueryDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadataextquery.impl.AuthzDecisionQueryDescriptorTypeImpl();}  }
class C{  @Inject public OpenIDConnectJWKEndpoint(OAuth2RequestFactory requestFactory,OAuth2ProviderSettingsFactory providerSettingsFactory,ExceptionHandler exceptionHandler){  this.requestFactory=requestFactory;  this.providerSettingsFactory=providerSettingsFactory;  this.exceptionHandler=exceptionHandler;}  }
class C{  public PdfCanvas closePathFillStroke(){  document.checkIsoConformance(currentGs,IsoKey.DRAWMODE_FILL_STROKE,resources);  contentStream.getOutputStream().writeBytes(b);  return this;}  }
class C{  public PushbackReader(Reader in){  this(in,1);}  }
class C{  public void addListener(Object session,SessionListener listener) throws SessionException {  try {    ((SSOToken)session).addSSOTokenListener(new SSOTokenListenerImpl(session,listener));  } catch (  SSOException se) {    throw new SessionException(se);  }}  }
class C{  private void sendReport(HttpServletRequest req,HttpServletResponse resp,Hashtable<String,Integer> errorList) throws IOException {  resp.setStatus(WebdavStatus.SC_MULTI_STATUS);  String absoluteUri=req.getRequestURI();  String relativePath=getRelativePath(req);  XMLWriter generatedXML=new XMLWriter();  generatedXML.writeXMLHeader();  generatedXML.writeElement("D",DEFAULT_NAMESPACE,"multistatus",XMLWriter.OPENING);  Enumeration<String> pathList=errorList.keys();  while (pathList.hasMoreElements()) {    String errorPath=pathList.nextElement();    int errorCode=errorList.get(errorPath).intValue();    generatedXML.writeElement("D","response",XMLWriter.OPENING);    generatedXML.writeElement("D","href",XMLWriter.OPENING);    String toAppend=errorPath.substring(relativePath.length());    if (!toAppend.startsWith("/"))     toAppend="/" + toAppend;    generatedXML.writeText(absoluteUri + toAppend);    generatedXML.writeElement("D","href",XMLWriter.CLOSING);    generatedXML.writeElement("D","status",XMLWriter.OPENING);    generatedXML.writeText("HTTP/1.1 " + errorCode + " "+ WebdavStatus.getStatusText(errorCode));    generatedXML.writeElement("D","status",XMLWriter.CLOSING);    generatedXML.writeElement("D","response",XMLWriter.CLOSING);  }  generatedXML.writeElement("D","multistatus",XMLWriter.CLOSING);  Writer writer=resp.getWriter();  writer.write(generatedXML.toString());  writer.close();}  }
class C{  public void test_setLjava_lang_ObjectILjava_lang_Object(){  int[] x={0};  boolean thrown=false;  try {    Array.set(x,0,new Integer(1));  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,((Integer)Array.get(x,0)).intValue());  try {    Array.set(new Object(),0,new Object());  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.set(x,4,new Integer(1));  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  boolean exception=false;  try {    Array.set(new int[1],0,null);  } catch (  IllegalArgumentException e) {    exception=true;  }  assertTrue("expected exception not thrown",exception);  thrown=false;  try {    Array.set(null,0,2);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  @Override public void start(int svc) throws ChannelException {  if (getNext() != null)   getNext().start(svc);}  }
class C{  public synchronized void updateIconsForPkg(String packageName,UserHandleCompat user){  removeIconsForPkg(packageName,user);  try {    PackageInfo info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES);    long userSerial=mUserManager.getSerialNumberForUser(user);    for (    LauncherActivityInfoCompat app : mLauncherApps.getActivityList(packageName,user)) {      addIconToDBAndMemCache(app,info,userSerial);    }  } catch (  NameNotFoundException e) {    Log.d(TAG,"Package not found",e);    return;  }}  }
class C{  public Subject(org.w3c.dom.Element subjectElement) throws SAMLException {  int elementCount=0;  Element elt=(Element)subjectElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject: local name missing");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (!(eltName.equals("Subject"))) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject: invalid root element");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement"));  }  NodeList nl=subjectElement.getChildNodes();  int length=nl.getLength();  if (length == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject: No sub elements found");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("emptyElement"));  }  for (int n=0; n < length; n++) {    Node child=(Node)nl.item(n);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    String childName=child.getLocalName();    if (childName.equals("NameIdentifier")) {      _nameIdentifier=createNameIdentifier((Element)child);      elementCount++;    } else     if (childName.equals("SubjectConfirmation")) {      _subjectConfirmation=createSubjectConfirmation((Element)child);      elementCount++;    } else {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Subject: Invalid element " + "encountered.");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement"));    }  }  if (elementCount > 2) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject: more than allowed " + "elements passed");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("moreElement"));  }}  }
class C{  public boolean isOver(){  return isOver;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  Node appendedChild;  doc=(Document)load("hc_staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");{    boolean success=false;    try {      appendedChild=rootNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public FileWriterWithEncoding(String filename,String encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  public long saveRule(Rule rule) throws Exception {  if (isClosed) {    throw new IllegalStateException(TAG + " is closed.");  }  ModelEvent event=(ModelEvent)rule.getRootNode().getItem();  ArrayList<RuleNode> ruleFilterList=rule.getFilterBranches();  ArrayList<ModelRuleAction> ruleActionList=rule.getActions();  if (rule.getDatabaseId() > 0) {    deleteRule(rule.getDatabaseId());  }  String ruleName=rule.getName();  String ruleDesc=rule.getDescription();  long ruleID=ruleDbAdapter.insert(event.getDatabaseId(),ruleName == null || ruleName.length() == 0 ? "New Rule" : ruleName,ruleDesc == null || ruleDesc.length() == 0 ? "" : ruleDesc,rule.getIsEnabled());  for (  ModelRuleAction ruleAction : ruleActionList) {    long ruleActionID=ruleActionDbAdapter.insert(ruleID,ruleAction.getModelAction().getDatabaseId());    ArrayList<ModelParameter> parameterList=ruleAction.getModelAction().getParameters();    ArrayList<DataType> dataList=ruleAction.getDatas();    for (int i=0; i < dataList.size(); i++) {      ruleActionParameterDbAdapter.insert(ruleActionID,parameterList.get(i).getDatabaseId(),dataList.get(i).toString());    }  }  for (  RuleNode filterNode : ruleFilterList) {    saveFilterRuleNode(ruleID,-1,filterNode);  }  return ruleID;}  }
class C{  public void end(){  inProgress=false;}  }
class C{  public final void encodeObjectClasses(final ByteStringBuilder builder,final Map<ObjectClass,String> objectClasses) throws DirectoryException {  int id=getObjectClassId(objectClasses);  final byte[] idBytes=encodeId(id);  builder.appendBERLength(idBytes.length);  builder.appendBytes(idBytes);}  }
class C{  @Override public boolean accept(File file){  if (file.isDirectory()) {    return false;  }  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(file.getName(),wildcard)) {      return true;    }  }  return false;}  }
class C{  @Override public int hashCode(){  rwlock.readLock().lock();  int h=0;  try {    Iterator i=entrySet().iterator();    while (i.hasNext()) {      h+=i.next().hashCode();    }  }  finally {    rwlock.readLock().unlock();  }  return h;}  }
class C{  public static void removeFiles(String srcDir,String desDir){  File srcFile=new File(srcDir);  String[] list=srcFile.list();  if (list != null) {    int count=list.length;    for (int i=0; i < count; i++) {      String fileName=list[i];      File file=new File(desDir,fileName);      if (file.isFile()) {        file.delete();      } else {        Debug.log("FileUtils.removeFiles() Unable to delete file");      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS02.class,args);}  }
class C{  protected void failAndClearBuffer(){  for (  Tuple t : buffer) {    collector.fail(t);  }  buffer.clear();}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfDictionary makeIndirect(PdfDocument document){  return (PdfDictionary)super.makeIndirect(document);}  }
class C{  public String mapToNativeAction(Action xacmlContextAction,String serviceName) throws XACMLException {  String nativeAction=null;  List attributes=xacmlContextAction.getAttributes();  if (attributes != null && !attributes.isEmpty()) {    Attribute attr=(Attribute)attributes.get(0);    if (attr != null) {      URI tmpURI=attr.getAttributeId();      if (tmpURI.toString().equals(XACMLConstants.ACTION_ID)) {        tmpURI=attr.getDataType();        if (tmpURI.toString().equals(XACMLConstants.XS_STRING)) {          Element element=(Element)attr.getAttributeValues().get(0);          nativeAction=XMLUtils.getElementValue(element);        }      }    }  }  return nativeAction;}  }
class C{  public Observable<Void> addPaymentRecordObservable(Payment payment){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  addPaymentRecord(payment,resultHandler.toHandler());  return resultHandler;}  }
class C{  public ReplServerStartMsg(int serverId,String serverURL,DN baseDN,int windowSize,ServerState serverState,long generationId,boolean sslEncryption,byte groupId,int degradedStatusThreshold){  super((short)-1,generationId);  this.serverId=serverId;  this.serverURL=serverURL;  this.baseDN=baseDN;  this.windowSize=windowSize;  this.serverState=serverState;  this.sslEncryption=sslEncryption;  this.groupId=groupId;  this.degradedStatusThreshold=degradedStatusThreshold;}  }
class C{  public SMSFlatFileTreeNode(String dn){  distinguishedName=dn;  id=dn.toLowerCase();  int idx=dn.indexOf(',');  name=(idx != -1) ? dn.substring(0,idx) : dn;}  }
class C{  public Map<String,List<FileItem>> parseParameterMap(HttpServletRequest request) throws FileUploadException {  return parseParameterMap(new ServletRequestContext(request));}  }
class C{  public void addAttribute(AttributeInfo attribute){  attributes.put(attribute.getName(),attribute);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment newDocFragment;  NodeList children;  int length;  String newDocFragmentName;  int newDocFragmentType;  String newDocFragmentValue;  doc=(Document)load("hc_staff",true);  newDocFragment=doc.createDocumentFragment();  children=newDocFragment.getChildNodes();  length=(int)children.getLength();  assertEquals("length",0,length);  newDocFragmentName=newDocFragment.getNodeName();  assertEquals("strong","#document-fragment",newDocFragmentName);  newDocFragmentType=(int)newDocFragment.getNodeType();  assertEquals("type",11,newDocFragmentType);  newDocFragmentValue=newDocFragment.getNodeValue();  assertNull("value",newDocFragmentValue);}  }
class C{  ObjectStreamField(String name,String signature,boolean unshared){  if (name == null) {    throw new NullPointerException();  }  this.name=name;  this.signature=signature.intern();  this.unshared=unshared;  field=null;switch (signature.charAt(0)) {case 'Z':    type=Boolean.TYPE;  break;case 'B':type=Byte.TYPE;break;case 'C':type=Character.TYPE;break;case 'S':type=Short.TYPE;break;case 'I':type=Integer.TYPE;break;case 'J':type=Long.TYPE;break;case 'F':type=Float.TYPE;break;case 'D':type=Double.TYPE;break;case 'L':case '[':type=Object.class;break;default :throw new IllegalArgumentException("illegal signature");}}  }
class C{  public static String formatSeconds(Object obj){  long time=-1L;  if (obj instanceof Long) {    time=((Long)obj).longValue();  } else   if (obj instanceof Integer) {    time=((Integer)obj).intValue();  }  return (time + " s");}  }
class C{  public final void exceptionPrint(String message,Exception exc){  System.err.println(exceptionExpand(message,exc));}  }
class C{  public boolean isNull(){  return !linkSourceContent.isSuccess() && extendedTrim(linkSourceContent.getHtmlCode()).equals("") && !isImage(linkSourceContent.getFinalUrl());}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> updateInstance(Context context,String resourceId,UpdateRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public void addParameter(String parameterName,Object parameterValue){  parameterMap.put(parameterName,parameterValue);}  }
class C{  public void log(LogRecord record,Object cred){  validateLogBy(cred);  if (record instanceof com.sun.identity.log.ILogRecord) {    com.sun.identity.log.ILogRecord openssoLogRecord=(com.sun.identity.log.ILogRecord)record;    addLogByInfo(openssoLogRecord,cred);    addModuleName(openssoLogRecord);  }  record.setLoggerName(getName());  String rbName=this.getResourceBundleName();  if (rbName != null) {    ResourceBundle bundle=ResourceBundle.getBundle(rbName);    record.setResourceBundle(bundle);  }  writeToLog(record);}  }
class C{  public static <K,V>void prefill(final KeyedObjectPool<K,V> keyedPool,final K key,final int count) throws Exception, IllegalArgumentException {  if (keyedPool == null) {    throw new IllegalArgumentException("keyedPool must not be null.");  }  if (key == null) {    throw new IllegalArgumentException("key must not be null.");  }  for (int i=0; i < count; i++) {    keyedPool.addObject(key);  }}  }
class C{  public void clear(){  dict.clear();}  }
class C{  public void removeAttributeValues(String attrName,Set values) throws SMSException, SSOException {  validatePluginConfig();  SMSEntry e=pc.getSMSEntry();  SMSUtils.removeAttributeValues(e,attrName,values,ps.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  public static void sendError(HttpServletRequest request,HttpServletResponse response,int httpStatusCode,String errorCode,String errorMsg){  String errorUrl=SystemConfigurationUtil.getProperty(SAMLConstants.ERROR_PAGE_URL,SAMLConstants.DEFAULT_ERROR_PAGE_URL);  if (debug.messageEnabled()) {    debug.message("SAMLUtils.sendError: error page" + errorUrl);  }  String tmp=errorUrl.toLowerCase();  if (!tmp.startsWith("http://") && !tmp.startsWith("https://")) {    String jointString="?";    if (errorUrl.indexOf("?") != -1) {      jointString="&";    }    String newUrl=errorUrl.trim() + jointString + SAMLConstants.ERROR_CODE+ "="+ errorCode+ "&"+ SAMLConstants.HTTP_STATUS_CODE+ "="+ httpStatusCode+ "&"+ SAMLConstants.ERROR_MESSAGE+ "="+ URLEncDec.encode(errorMsg);    forwardRequest(newUrl,request,response);  } else {    String binding=SystemConfigurationUtil.getProperty(SAMLConstants.ERROR_PAGE_HTTP_BINDING,SAMLConstants.HTTP_POST);    if (SAMLConstants.HTTP_REDIRECT.equals(binding)) {      String jointString="?";      if (errorUrl.indexOf("?") != -1) {        jointString="&";      }      String newUrl=errorUrl.trim() + jointString + SAMLConstants.ERROR_CODE+ "="+ errorCode+ "&"+ SAMLConstants.HTTP_STATUS_CODE+ "="+ httpStatusCode+ "&"+ SAMLConstants.ERROR_MESSAGE+ "="+ URLEncDec.encode(errorMsg);      FSUtils.forwardRequest(request,response,newUrl);    } else {      request.setAttribute("ERROR_URL",errorUrl);      request.setAttribute("ERROR_CODE_NAME",SAMLConstants.ERROR_CODE);      request.setAttribute("ERROR_CODE",errorCode);      request.setAttribute("ERROR_MESSAGE_NAME",SAMLConstants.ERROR_MESSAGE);      request.setAttribute("ERROR_MESSAGE",URLEncDec.encode(errorMsg));      request.setAttribute("HTTP_STATUS_CODE_NAME",SAMLConstants.HTTP_STATUS_CODE);      request.setAttribute("HTTP_STATUS_CODE",httpStatusCode);      request.setAttribute("SAML_ERROR_KEY",bundle.getString("samlErrorKey"));      forwardRequest(ERROR_JSP,request,response);    }  }}  }
class C{  public Socket(){  setImpl();}  }
class C{  private int resolveAxis(int axis,ComponentOrientation o){  int absoluteAxis;  if (axis == LINE_AXIS) {    absoluteAxis=o.isHorizontal() ? X_AXIS : Y_AXIS;  } else   if (axis == PAGE_AXIS) {    absoluteAxis=o.isHorizontal() ? Y_AXIS : X_AXIS;  } else {    absoluteAxis=axis;  }  return absoluteAxis;}  }
class C{  public MBeanRegistrationException(java.lang.Exception e){  super(e);}  }
class C{  public void write(int b) throws IOException {  out.write(b);}  }
class C{  public int lastIndexOf(String str,int fromIndex){  return str().lastIndexOf(str,fromIndex);}  }
class C{  protected UnsupportedOperationException unsupportedFilterOperation(String filterType){  return new UnsupportedOperationException("'" + filterType + "' not supported in "+ type+ " queries");}  }
class C{  private void unlock(Object key){  if (key != null) {    ((AbstractDocument)key).readUnlock();  }}  }
class C{  public void quit(){  logger.info(LocalizableMessage.raw("quitting application"));  flushLogs();  System.exit(0);}  }
class C{  public FakeDelOperation(DN dn,CSN csn,String entryUUID){  super(csn);  this.dn=dn;  this.entryUUID=entryUUID;}  }
class C{  public static void askConfirmation(Context context,String title,String message,DialogInterface.OnClickListener onConfirm,DialogInterface.OnClickListener onCancel){  new AlertDialog.Builder(context).setTitle(title).setMessage(message).setPositiveButton(android.R.string.ok,onConfirm).setNegativeButton(android.R.string.cancel,onCancel).show();}  }
class C{  MutableBigInteger mutableModInverse(MutableBigInteger p){  if (p.isOdd())   return modInverse(p);  if (isEven())   throw new ArithmeticException("BigInteger not invertible.");  int powersOf2=p.getLowestSetBit();  MutableBigInteger oddMod=new MutableBigInteger(p);  oddMod.rightShift(powersOf2);  if (oddMod.isOne())   return modInverseMP2(powersOf2);  MutableBigInteger oddPart=modInverse(oddMod);  MutableBigInteger evenPart=modInverseMP2(powersOf2);  MutableBigInteger y1=modInverseBP2(oddMod,powersOf2);  MutableBigInteger y2=oddMod.modInverseMP2(powersOf2);  MutableBigInteger temp1=new MutableBigInteger();  MutableBigInteger temp2=new MutableBigInteger();  MutableBigInteger result=new MutableBigInteger();  oddPart.leftShift(powersOf2);  oddPart.multiply(y1,result);  evenPart.multiply(oddMod,temp1);  temp1.multiply(y2,temp2);  result.add(temp2);  return result.divide(p,temp1);}  }
class C{  public static void removeSubConfigAttribute(String serviceName,Set sunServiceID,String realm,String subConfigName,List attrList){  String classMethod="UpgradeUtils:removeSubConfigAttribute : ";  try {    ServiceConfigManager scm=getServiceConfigManager(serviceName);    ServiceConfig sc=scm.getOrganizationConfig(realm,null);    ServiceConfig subConfig=sc.getSubConfig(subConfigName);    String serviceID=getSunServiceID(subConfig);    if (sunServiceID.contains(serviceID)) {      Iterator i=attrList.iterator();      while (i.hasNext()) {        String attributeName=(String)i.next();        if (debug.messageEnabled()) {          debug.message(classMethod + "Removing attr :" + attributeName);        }        subConfig.removeAttribute(attributeName);      }    }  } catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSO Token ",ssoe);  }catch (  SMSException sme) {    debug.error(classMethod + "Error removing attributes : " + attrList,sme);  }}  }
class C{  public final void testGetQ(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(3,dpks.getQ().intValue());}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  protected String patchName(String qname){  final int lastColon=qname.lastIndexOf(':');  if (lastColon > 0) {    final int firstColon=qname.indexOf(':');    final String prefix=qname.substring(0,firstColon);    final String localName=qname.substring(lastColon + 1);    final String uri=m_prefixMap.lookupNamespace(prefix);    if (uri != null && uri.length() == 0) {      return localName;    } else     if (firstColon != lastColon) {      return prefix + ':' + localName;    }  }  return qname;}  }
class C{  public static final double previousDouble(double value){  if (value == Double.NEGATIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0x8000000000000000L;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value <= 0 ? bits + 1 : bits - 1);}  }
class C{  public Iterator enumerateLiteralResultAttributes(){  return (null == m_avts) ? null : m_avts.iterator();}  }
class C{  private void extractDNs(AttributeType attributeType,SearchFilter filter,Set<DN> dnSet){switch (filter.getFilterType()) {case AND:case OR:    for (    SearchFilter f : filter.getFilterComponents()) {      extractDNs(attributeType,f,dnSet);    }  break;case EQUALITY:if (filter.getAttributeType().equals(attributeType)) {  try {    dnSet.add(DN.valueOf(filter.getAssertionValue()));  } catch (  LocalizedIllegalArgumentException e) {    logger.traceException(e);  }}break;}}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("--------------------------------------");  buf.append("Got Federation Exception\n");  String msg=getMessage();  if (msg != null && msg.length() > 0) {    buf.append("Message: ").append(getMessage());  }  if (rootCause != null) {    buf.append("\nLower level exception: ");    buf.append(getRootCause());  }  return buf.toString();}  }
class C{  public <T>T load(Class<T> service){synchronized (providers) {    List<RegisteredServiceProvider<?>> registered=providers.get(service);    if (registered == null) {      return null;    }    return service.cast(registered.get(0).getProvider());  }}  }
class C{  public static void writeToFile(String content,String fileName) throws IOException {  FileWriter fw=null;  try {    fw=new FileWriter(fileName);    fw.write(content,0,content.length());  }  finally {    if (fw != null) {      fw.close();    }  }}  }
class C{  public WhereBuilder and(WhereBuilder where){  String condition=whereItems.size() == 0 ? " " : "AND ";  return expr(condition + "(" + where.toString()+ ")");}  }
class C{  public void initialize(int animationDuration,int backSideColor,int additionalFlipsCount){  this.mAnimationDuration=animationDuration;  this.mBackSideColor=backSideColor;  this.mAdditionalFlipsCount=additionalFlipsCount;}  }
class C{  public UnsupportedTemporalTypeException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  Log.d(TAG,"DatabaseHelper.onCreate");  db.execSQL("Create table " + TABLE_NAME + "("+ FmRadioStation.Station._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT,"+ FmRadioStation.Station.COLUMN_STATION_NAME+ " TEXT,"+ FmRadioStation.Station.COLUMN_STATION_FREQ+ " INTEGER,"+ FmRadioStation.Station.COLUMN_STATION_TYPE+ " INTEGER"+ ");");}  }
class C{  void resetHeaderBuffer(){  pos=0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementinvalidcharacterexception.class,args);}  }
class C{  protected HttpURLConnection configureRequest(final HttpURLConnection request){  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);  request.setRequestProperty(HEADER_USER_AGENT,userAgent);  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());  return request;}  }
class C{  public static boolean isString(String str){  return ((str.startsWith("\"") && str.endsWith("\"")) || (str.startsWith("'") && str.endsWith("'"))) && str.length() > 1;}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public void clearAccountExpirationTime(){  logger.trace("Clearing account expiration time for user %s",userDNString);  accountExpirationTime=-1;  clearAttribute(OP_ATTR_ACCOUNT_EXPIRATION_TIME);}  }
class C{  Name(BasicType type){  this(-1,type);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  String attrValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddress=(Element)elementList.item(2);  attrValue=testAddress.getAttribute("street");  assertEquals("attrValue","No",attrValue);}  }
class C{  public boolean isEmpty(){synchronized (lock) {    return map.isEmpty();  }}  }
class C{  public Notification(String content){  notificationContent=XMLUtils.removeInvalidXMLChars(content);}  }
class C{  private static boolean isOutOfMemory(Throwable t){  boolean isOutOfMemory=false;  while (!isOutOfMemory && t != null) {    if (t instanceof OutOfMemoryError) {      isOutOfMemory=true;    } else     if (t instanceof IOException) {      final String msg=t.toString();      if (msg != null) {        isOutOfMemory=msg.contains("Not enough space");      }    }    t=t.getCause();  }  return isOutOfMemory;}  }
class C{  private SingletonIterable(final M value){  this.value=value;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrdeletedataoffsetnegative.class,args);}  }
class C{  private void displayPdfString(PdfString string){  TextRenderInfo renderInfo=new TextRenderInfo(string,getGraphicsState(),textMatrix,markedContentStack);  eventOccurred(renderInfo,EventType.RENDER_TEXT);  textMatrix=new Matrix(renderInfo.getUnscaledWidth(),0).multiply(textMatrix);}  }
class C{  public static void clear(String realmName){  boolean isDefault=isDefaultOrg(realmName);  if ((authCtxObjHash != null) && (!authCtxObjHash.isEmpty())) {    Enumeration keys=authCtxObjHash.keys();    while (keys.hasMoreElements()) {      String key=(String)keys.nextElement();      if (key.indexOf("|" + realmName) != -1) {        authCtxObjHash.remove(key);      }      if (isDefault && key.endsWith("|/")) {        authCtxObjHash.remove(key);      }    }  }  if ((authContextHash != null) && (!authContextHash.isEmpty())) {    Enumeration keys=authContextHash.keys();    while (keys.hasMoreElements()) {      String key=(String)keys.nextElement();      if (key.indexOf("|" + realmName) != -1) {        authContextHash.remove(key);      }      if (isDefault && key.endsWith("|/")) {        authCtxObjHash.remove(key);      }    }  }}  }
class C{  private void removeWaiter(WaitNode node){  if (node != null) {    node.thread=null;    retry:     for (; ; ) {      for (WaitNode pred=null, q=waiters, s; q != null; q=s) {        s=q.next;        if (q.thread != null)         pred=q; else         if (pred != null) {          pred.next=s;          if (pred.thread == null)           continue retry;        } else         if (!UNSAFE.compareAndSwapObject(this,waitersOffset,q,s))         continue retry;      }      break;    }  }}  }
class C{  public ResponseResetableException(String message){  super(message);  this.resetResponse=true;}  }
class C{  private static <T>T createProxy(MBeanServerConnection connection,ObjectName objectName,Class<T> interfaceClass,boolean notificationEmitter,boolean isMXBean){  try {    if (isMXBean) {      Introspector.testComplianceMXBeanInterface(interfaceClass);    } else {      Introspector.testComplianceMBeanInterface(interfaceClass);    }  } catch (  NotCompliantMBeanException e) {    throw new IllegalArgumentException(e);  }  InvocationHandler handler=new MBeanServerInvocationHandler(connection,objectName,isMXBean);  final Class<?>[] interfaces;  if (notificationEmitter) {    interfaces=new Class<?>[]{interfaceClass,NotificationEmitter.class};  } else   interfaces=new Class<?>[]{interfaceClass};  Object proxy=Proxy.newProxyInstance(interfaceClass.getClassLoader(),interfaces,handler);  return interfaceClass.cast(proxy);}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  private void toString(StringBuilder buffer){  buffer.append("VirtualAttributeRule(attrType=");  buffer.append(attributeType.getNameOrOID());  buffer.append(", providerDN=\"").append(provider.getClass().getName());  buffer.append("\", baseDNs={");  append(buffer,baseDNs);  buffer.append("}, scope=").append(scope);  buffer.append(", groupDNs={");  append(buffer,groupDNs);  buffer.append("}, filters={");  append(buffer,filters);  buffer.append("}, conflictBehavior=").append(conflictBehavior);  buffer.append(")");}  }
class C{  public static String generateAssertionID(){  String encodedID=generateID();  if (encodedID == null) {    return null;  }  String id=null;  try {    id=SystemConfigurationUtil.getServerID(SAMLServiceManager.getServerProtocol(),SAMLServiceManager.getServerHost(),Integer.parseInt(SAMLServiceManager.getServerPort()),SAMLServiceManager.getServerURI());  } catch (  Exception ex) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLUtil:generateAssertionID: " + "exception obtain serverID:",ex);    }  }  if (id == null) {    return encodedID;  } else {    return (encodedID + id);  }}  }
class C{  public static void main(String[] args){  final String usage="Optionally specify HTTP and HTTPS port numbers. " + "Defaults: " + DEFAULT_PORT + ", "+ DEFAULT_SSL_PORT+ ".\n"+ "Also optionally specify a URL to contact OpenAM. "+ "Default: "+ getOpenamUrl();  int port=DEFAULT_PORT;  int sslPort=DEFAULT_SSL_PORT;  if (args.length > 3) {    System.out.println(usage);    System.exit(-1);  }  if (args.length > 0) {    port=Integer.parseInt(args[0]);    if (args.length >= 2) {      sslPort=Integer.parseInt(args[1]);    }    if (args.length == 3) {      openamUrl=args[2];    }  }  openamUrl=getOpenamUrl();  LOGGER.setLevel(Level.INFO);  runServer(port,sslPort);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(PARAM_NAME);  String[] params={realm,name};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_APPLICATION_PRIVILEGE",params);  String description=getStringOptionValue(PARAM_DESCRIPTION);  ApplicationPrivilege.PossibleAction actions=getActions();  Set<SubjectImplementation> subjects=getSubjects(rc);  try {    Map<String,Set<String>> mapAppToResources=getApplicationResourcesMap(rc,realm);    Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());    ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);    ApplicationPrivilege appPrivilege=new ApplicationPrivilege(name);    appPrivilege.setDescription(description);    appPrivilege.setActionValues(actions);    appPrivilege.setApplicationResources(mapAppToResources);    appPrivilege.setSubject(subjects);    apm.addPrivilege(appPrivilege);    Object[] msgParam={name};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-application-privilege-succeeded"),msgParam));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_APPLICATION_PRIVILEGE",params);  } catch (  EntitlementException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  CLIException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_CREATE_APPLICATION_PRIVILEGE",paramExs);    throw ex;  }}  }
class C{  public void testValueOfIntegerMin(){  long longVal=Integer.MIN_VALUE;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-128,0,0,0};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  private final String _findDecodedLong(int len,int q1,int q2) throws IOException {{    int bufLen=(len + 3) >> 2;    if (bufLen > _quadBuffer.length) {      _quadBuffer=_growArrayTo(_quadBuffer,bufLen);    }  }  _quadBuffer[0]=q1;  _quadBuffer[1]=q2;  int offset=2;  int inPtr=_inputPtr + 8;  len-=8;  final byte[] inBuf=_inputBuffer;  do {    int q=(inBuf[inPtr++] & 0xFF);    q=(q << 8) | inBuf[inPtr++] & 0xFF;    q=(q << 8) | inBuf[inPtr++] & 0xFF;    q=(q << 8) | inBuf[inPtr++] & 0xFF;    _quadBuffer[offset++]=q;  } while ((len-=4) > 3);  if (len > 0) {    int q=inBuf[inPtr] & 0xFF;    if (len > 1) {      q=(q << 8) + (inBuf[++inPtr] & 0xFF);      if (len > 2) {        q=(q << 8) + (inBuf[++inPtr] & 0xFF);      }    }    _quadBuffer[offset++]=q;  }  return _symbols.findName(_quadBuffer,offset);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  protected JButton createLeftOneTouchButton(){  SynthArrowButton b=new SynthArrowButton(SwingConstants.NORTH);  int oneTouchSize=lookupOneTouchSize();  b.setName("SplitPaneDivider.leftOneTouchButton");  b.setMinimumSize(new Dimension(oneTouchSize,oneTouchSize));  b.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  b.setFocusPainted(false);  b.setBorderPainted(false);  b.setRequestFocusEnabled(false);  b.setDirection(mapDirection(true));  return b;}  }
class C{  public boolean removeEdge(DigraphNode node){  if (!outNodes.contains(node)) {    return false;  }  outNodes.remove(node);  node.inNodes.remove(this);  node.decrementInDegree();  return true;}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.DSAKeyValueElement createDSAKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.DSAKeyValueElementImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.DigSigElement createDigSigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DigSigElementImpl();}  }
class C{  public <M extends Configuration>void deregisterDeleteListener(InstantiableRelationDefinition<?,M> d,ServerManagedObjectDeleteListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterDeleteListener(baseDN,listener);}  }
class C{  public int modifyClient(SSOToken token,Map props) throws AMClientCapException {  int status=0;  if (isInternalInstance()) {    throw new AMClientCapException(BUNDLE_NAME,CANNOT_MOD_INT_DB,null);  }  String ct=getClientType(props);  try {    AMStoreConnection localConn=new AMStoreConnection(token);    String dn=generateClientDN(ct);    AMEntity amEntity=localConn.getEntity(dn);    if (amEntity.isExists()) {      Map m=getKnownProperties(props);      m.remove(CLIENTTYPE_ATTR);      amEntity.setAttributes(m);      amEntity.store();    } else {      status=addClient(token,props);    }  } catch (  Exception e) {    String[] errArgs={ct};    AMClientCapException ace=new AMClientCapException(BUNDLE_NAME,MODIFY_FAILED,errArgs);    String msg=ace.getMessage();    debug.error(dbStr + msg,e);    throw ace;  }  return status;}  }
class C{  public static KeyStoreHandler create(final File keyStoreFile,final char[] password) throws IOException, KeyStoreException {  if (keyStoreFile == null) {    throw new FileNotFoundException(null);  } else   if (keyStoreFile.exists()) {    throw new FileAlreadyExistsException(keyStoreFile.getAbsolutePath());  }  final KeyStore ks=KeyStore.getInstance(KeyStoreHandler.KEYSTORE_TYPE);  try {    ks.load(null,password);  } catch (  final NoSuchAlgorithmException|CertificateException ex) {    throw new IllegalStateException("Should not happen.",ex);  }  final SecretKeyFactory skf=KeyStoreHandler.getSecretKeyFactory();  final KeyStoreHandler ksh=new KeyStoreHandler(ks,password,keyStoreFile,skf,true);  ksh.save();  return ksh;}  }
class C{  private void createLayout(){  createBasicLayout(this,new GridBagConstraints());  setBorder(PANEL_BORDER);}  }
class C{  public PdfDocument(PdfWriter writer){  if (writer == null) {    throw new NullPointerException("writer");  }  documentId=incrementDocumentId();  this.writer=writer;  this.properties=new StampingProperties();  open(writer.properties.pdfVersion);}  }
class C{  public R visitDN(DNPropertyDefinition pd,DN v,P p){  return visitUnknown(pd,v,p);}  }
class C{  private boolean mustAutomaticallyExpand(BasicNode node){  boolean mustAutomaticallyExpand=false;  if (controller.isAutomaticExpand()) {    int nLevels=0;    TreeNode parent=node;    while (parent != null) {      nLevels++;      parent=parent.getParent();    }    mustAutomaticallyExpand=nLevels <= 4;  }  return mustAutomaticallyExpand;}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  f=Fixtures.getInstance();  RestAssured.baseURI=BASE_URI;  RestAssured.port=PORT;  RestExpressManager.getManager().ensureRestExpressRunning();}  }
class C{  @Override public Foo fetchByPrimaryKey(long fooId){  return fetchByPrimaryKey((Serializable)fooId);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS03.class,args);}  }
class C{  public DelegateFileFilter(FileFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The FileFilter must not be null");  }  this.fileFilter=filter;  this.filenameFilter=null;}  }
class C{  public static void createTmpThumb(final InputStream stream,final File file,final String fileName,final IConfiguration conf) throws IOException {  BufferedInputStream bufferedIS=new BufferedInputStream(stream);  bufferedIS.mark(Integer.MAX_VALUE);  BufferedImage image=ImageIO.read(bufferedIS);  if (image == null) {    throw new IOException("Wrong file");  }  Dimension dimension=createThumbDimension(image,conf.getImgWidth(),conf.getImgHeight());  if (image.getHeight() == dimension.height && image.getWidth() == dimension.width) {    bufferedIS.reset();    writeUntouchedImage(bufferedIS,file);  } else {    resizeImage(image,dimension.width,dimension.height,conf.getImgQuality(),file);  }  stream.close();}  }
class C{  void validateOptions(LocalizableMessageBuilder buf){  validateGlobalOptions(buf);  validateSubcommandOptions(buf);}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  public ShapedRecipe shape(final String... shape){  Validate.notNull(shape,"Must provide a shape");  Validate.isTrue(shape.length > 0 && shape.length < 4,"Crafting recipes should be 1, 2, 3 rows, not ",shape.length);  for (  String row : shape) {    Validate.notNull(row,"Shape cannot have null rows");    Validate.isTrue(row.length() > 0 && row.length() < 4,"Crafting rows should be 1, 2, or 3 characters, not ",row.length());  }  this.rows=new String[shape.length];  for (int i=0; i < shape.length; i++) {    this.rows[i]=shape[i];  }  HashMap<Character,ItemStack> newIngredients=new HashMap<Character,ItemStack>();  for (  String row : shape) {    for (    Character c : row.toCharArray()) {      newIngredients.put(c,ingredients.get(c));    }  }  this.ingredients=newIngredients;  return this;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String outputFile=getStringOptionValue(IArgument.OUTPUT_FILE);  String[] params={serverName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_EXPORT_SERVER",params);    if (ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {      String config=ServerConfiguration.exportServerInstance(adminSSOToken,serverName);      if ((outputFile != null) && (outputFile.length() > 0)) {        CLIUtil.writeToFile(outputFile,config);      } else {        outputWriter.printlnMessage(config);      }      outputWriter.printlnMessage(getResourceString("export-server-succeeded"));    } else {      outputWriter.printlnMessage(getResourceString("export-server-no-exists"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_EXPORT_SERVER",params);  } catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_EXPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_EXPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_EXPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean endsWith(Name n){  if (n == null) {    return false;  }  int len1=rdns.size();  int len2=n.size();  return (len1 >= len2 && matches(len1 - len2,len1,n));}  }
class C{  public void popElemAttributeSet(){  m_attrSetStack.pop();}  }
class C{  private final boolean compareAndSetTail(Node expect,Node update){  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);}  }
class C{  public void removeChangeListener(ChangeListener listener){  listenerList.remove(ChangeListener.class,listener);}  }
class C{  public String toString(){  return (next == null) ? "<" + tag.getElement().getName() + ">" : next + " <" + tag.getElement().getName()+ ">";}  }
class C{  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType){  return getAnnotation(annotationType) != null;}  }
class C{  public void initialize(String jdbcDriver,String jdbcDriverUrl,String jdbcUser,String jdbcPassword,String userDataBaseTableName,String membershipDataBaseTableName,Debug idRepoDebugLog) throws java.lang.InstantiationException {  useJNDI=false;  if (jdbcDriver == null || jdbcDriver.trim().length() == 0 || jdbcDriverUrl == null || jdbcDriverUrl.trim().length() == 0 || jdbcUser == null || jdbcUser.trim().length() == 0 || jdbcPassword == null || jdbcPassword.trim().length() == 0 || userDataBaseTableName == null || userDataBaseTableName.trim().length() == 0 || idRepoDebugLog == null || membershipDataBaseTableName == null) {    String msg="JdbcSimpleUserDao.initialize:" + "  validation failed for paramaters:" + " jdbcDriver=" + jdbcDriver + " jdbcDriverUrl="+ jdbcDriverUrl+ " jdbcUser="+ jdbcUser+ " jdbcPassword="+ jdbcPassword+ " userDataBaseTableName="+ userDataBaseTableName+ " membershipDataBaseTableName="+ membershipDataBaseTableName+ " debug="+ idRepoDebugLog == null ? null : idRepoDebugLog.getName();    if (idRepoDebugLog != null && idRepoDebugLog.messageEnabled()) {      idRepoDebugLog.message(msg);    }    throw new java.lang.InstantiationException(msg);  }  if (idRepoDebugLog.messageEnabled()) {    idRepoDebugLog.message("JdbcSimpleUserDao.initialize: called with" + "  the following paramaters:" + " jdbcDriver=" + jdbcDriver + " jdbcDriverUrl="+ jdbcDriverUrl+ " jdbcUser="+ jdbcUser+ " jdbcPassword="+ jdbcPassword+ " userDataBaseTableName="+ userDataBaseTableName+ " membershipDataBaseTableName="+ membershipDataBaseTableName+ " debug="+ idRepoDebugLog == null ? null : idRepoDebugLog.getName());  }  debug=idRepoDebugLog;  jdbcDbDriver=jdbcDriver.trim();  jdbcDriverDbUrl=jdbcDriverUrl.trim();  jdbcDbUser=jdbcUser.trim();  jdbcDbPassword=jdbcPassword.trim();  userTableName=userDataBaseTableName.trim();  if (membershipDataBaseTableName != null) {    membershipTableName=membershipDataBaseTableName.trim();  }  isMySQL=isMySQL(jdbcDriverDbUrl);  try {    Class.forName(jdbcDriver);  } catch (  ClassNotFoundException cnfe) {    String msg="JdbcSimpleUserDao.initialize: failed to load driver" + " class jdbcDriver=" + jdbcDriver + " exception="+ cnfe.getMessage();    if (debug.errorEnabled()) {      debug.error(msg);    }    throw new java.lang.InstantiationException(msg);  }  Connection con=null;  try {    con=getConnection();    DatabaseMetaData dbmd=con.getMetaData();    if (debug.messageEnabled()) {      debug.message("JdbcSimpleUserDao.initialize: DB Meta Data:" + " name=" + (dbmd == null ? "Not Available" : dbmd.getUserName()) + " url="+ (dbmd == null ? "Not Available" : dbmd.getURL()));    }    databaseURL=(dbmd == null ? null : dbmd.getURL());  } catch (  Exception ex) {    String msg="JdbcSimpleUserDao.getInstance: Not able to connect" + " to the jdbc db and get the meta data such as DB url" + " exception ="+ ex.getMessage();    if (debug.errorEnabled()) {      debug.error(msg);    }    userTableName=null;    membershipTableName=null;    throw new java.lang.InstantiationException(msg);  } finally {    closeConnection(con);    if (userTableName == null) {      debug=null;      jdbcDbDriver=null;      jdbcDriverDbUrl=null;      jdbcDbUser=null;      jdbcDbPassword=null;    }  }}  }
class C{  @Inject public TokenRevocationResource(OAuth2RequestFactory requestFactory,ClientAuthenticator clientAuthenticator,TokenStore tokenStore,ExceptionHandler exceptionHandler,OAuth2RealmResolver realmResolver){  this.clientAuthenticator=clientAuthenticator;  this.requestFactory=requestFactory;  this.tokenStore=tokenStore;  this.exceptionHandler=exceptionHandler;  this.realmResolver=realmResolver;}  }
class C{  protected void readFrames(ByteBuffer byteBuffer,int size){  ID3v23Frame next;  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();  this.fileReadSize=size;  logger.finest(getLoggingFilename() + ":Start of frame body at:" + byteBuffer.position()+ ",frames data size is:"+ size);  while (byteBuffer.position() < size) {    String id;    try {      logger.finest(getLoggingFilename() + ":Looking for next frame at:" + byteBuffer.position());      next=new ID3v23Frame(byteBuffer,getLoggingFilename());      id=next.getIdentifier();      loadFrameIntoMap(id,next);    } catch (    PaddingException ex) {      logger.config(getLoggingFilename() + ":Found padding starting at:" + byteBuffer.position());      break;    }catch (    EmptyFrameException ex) {      logger.warning(getLoggingFilename() + ":Empty Frame:" + ex.getMessage());      this.emptyFrameBytes+=ID3v23Frame.FRAME_HEADER_SIZE;    }catch (    InvalidFrameIdentifierException ifie) {      logger.warning(getLoggingFilename() + ":Invalid Frame Identifier:" + ifie.getMessage());      this.invalidFrames++;      break;    }catch (    InvalidFrameException ife) {      logger.warning(getLoggingFilename() + ":Invalid Frame:" + ife.getMessage());      this.invalidFrames++;      break;    }catch (    InvalidDataTypeException idete) {      logger.warning(getLoggingFilename() + ":Corrupt Frame:" + idete.getMessage());      this.invalidFrames++;      continue;    }  }}  }
class C{  void jumpToNextComponent(boolean next){  if (!getButtonGroupInfo()) {    if (activeBtn != null) {      lastBtn=activeBtn;      firstBtn=activeBtn;    } else     return;  }  JComponent compTransferFocusFrom=activeBtn;  Component focusBase=getFocusTransferBaseComponent(next);  if (focusBase != null) {    if (next) {      KeyboardFocusManager.getCurrentKeyboardFocusManager().focusNextComponent(focusBase);    } else {      KeyboardFocusManager.getCurrentKeyboardFocusManager().focusPreviousComponent(focusBase);    }  }}  }
class C{  @Override public void write(byte[] bts) throws IOException {  try {    int len=bts != null ? bts.length : 0;    beforeWrite(len);    out.write(bts);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public EntryEncodeConfig(boolean excludeDN,boolean compressAttrDescriptions,boolean compressObjectClassSets,CompressedSchema compressedSchema){  this.excludeDN=excludeDN;  this.compressAttrDescriptions=compressAttrDescriptions;  this.compressObjectClassSets=compressObjectClassSets;  this.compressedSchema=compressedSchema;  byte flagByte=0x00;  if (excludeDN) {    flagByte|=ENCODE_FLAG_EXCLUDE_DN;  }  if (compressAttrDescriptions) {    flagByte|=ENCODE_FLAG_COMPRESS_ADS;  }  if (compressObjectClassSets) {    flagByte|=ENCODE_FLAG_COMPRESS_OCS;  }  encodedRepresentation=flagByte;}  }
class C{  public LoginLATNodeAttribute(byte[] octets){  super(octets);  latNode=new String(octets,2,octets.length - 2);}  }
class C{  public final void testSetSeedbyteArray03() throws NoSuchFieldException, SecurityException, IllegalAccessException {  byte[] seed=new byte[LENGTH];  byte[] bytes1;  byte[] bytes2;  for (int i=0; i < seed.length; i++) {    seed[i]=(byte)i;  }  for (int i=0; i < LENGTH; i++) {    bytes1=new byte[i];    bytes2=new byte[i];    sr.setSeed(seed);    sr.setSeed(new byte[0]);    sr.nextBytes(bytes1);    sr2.setSeed(seed);    sr2.nextBytes(bytes2);    for (int j=0; j < bytes1.length; j++) {      assertEquals("bytes1[j] != bytes2[j] :: j=" + j,bytes1[j],bytes2[j]);    }  }  for (int i=1; i < LENGTH; i++) {    bytes1=new byte[i];    bytes2=new byte[i];    sr.setSeed(seed);    sr.nextBytes(bytes1);    sr.setSeed(new byte[0]);    sr.nextBytes(bytes2);    boolean b=true;    for (int j=0; j < bytes1.length; j++) {      b&=bytes1[j] == bytes2[j];    }    assertFalse("sequences are equal i=" + i,b);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  EntityReference entRef;  Node aNode;  String name;  Node child;  String childValue;  doc=(Document)load("staff",true);  aNewDoc=(Document)load("staff",true);  entRef=aNewDoc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entRef);  aNode=doc.importNode(entRef,true);  name=aNode.getNodeName();  assertEquals("entityName","ent3",name);  child=aNode.getFirstChild();  assertNotNull("child",child);  childValue=child.getNodeValue();  assertEquals("childValue","Texas",childValue);}  }
class C{  public void writeData(String data){  buffer.append("<![CDATA[" + data + "]]>");}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.characters(ch,start,length);}  }
class C{  public void read(DataInputStream in) throws IOException {  if (in.readInt() != FILE_VERSION) {  }  String[] names=new String[in.readShort()];  for (int i=0; i < names.length; i++) {    names[i]=in.readUTF();  }  int num=in.readShort();  for (int i=0; i < num; i++) {    short nameId=in.readShort();    int type=in.readByte();    String name=in.readUTF();    defEntity(names[nameId],type | GENERAL,name);  }  num=in.readShort();  for (int i=0; i < num; i++) {    short nameId=in.readShort();    int type=in.readByte();    byte flags=in.readByte();    ContentModel m=readContentModel(in,names);    String[] exclusions=readNameArray(in,names);    String[] inclusions=readNameArray(in,names);    AttributeList atts=readAttributeList(in,names);    defElement(names[nameId],type,((flags & 0x01) != 0),((flags & 0x02) != 0),m,exclusions,inclusions,atts);  }}  }
class C{  public boolean equals(Object o){  if ((o == null) || !(o instanceof ImageTypeSpecifier)) {    return false;  }  ImageTypeSpecifier that=(ImageTypeSpecifier)o;  return (colorModel.equals(that.colorModel)) && (sampleModel.equals(that.sampleModel));}  }
class C{  public SubjectConfirmationData createSubjectConfirmationData(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION_DATA);  if (obj == null) {    return new SubjectConfirmationDataImpl();  } else {    return (SubjectConfirmationData)obj;  }}  }
class C{  public Map read(String tokenID,String objName) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::read dn: " + objName);  }  Map returnAttributes=null;  if (objName.equals("o=" + SMSJAXRPCObject.AMJAXRPCVERSIONSTR)) {    returnAttributes=new HashMap();    returnAttributes.put(SMSJAXRPCObject.AMJAXRPCVERSIONSTR,SMSJAXRPCObject.AMJAXRPCVERSION);  } else {    CachedSMSEntry ce=CachedSMSEntry.getInstance(getToken(tokenID),objName);    if (ce.isDirty()) {      ce.refresh();    }    Map attrs=ce.getSMSEntry().getAttributes();    if ((attrs != null) && (attrs instanceof CaseInsensitiveHashMap)) {      returnAttributes=new HashMap();      for (Iterator items=attrs.keySet().iterator(); items.hasNext(); ) {        String attrName=items.next().toString();        Object o=attrs.get(attrName);        returnAttributes.put(attrName,o);      }    } else {      returnAttributes=attrs;    }  }  return returnAttributes;}  }
class C{  protected final AttributeDescription loadAttribute(final byte[] encodedAttribute,final String attributeName,final Collection<String> attributeOptions){  final int id=decodeId(encodedAttribute);  return loadAttributeToMaps(id,attributeName,attributeOptions,getMappings());}  }
class C{  public RenderableImageProducer(RenderableImage rdblImage,RenderContext rc){  this.rdblImage=rdblImage;  this.rc=rc;}  }
class C{  public void bindDisappearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getRef());  if (appearMap == null) {    appearMap=new ConcurrentHashMap<>();  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    appearData=new AppearData();  }  appearData.mAppearComponent=component;  appearData.hasDisappear=true;  appearMap.put(component.getRef(),appearData);  mAppearMap.put(getRef(),appearMap);}  }
class C{  public RateWindow(final RateTimer timer,final int size,final long sampleRate){  this.timer=timer;  this.size=size;  this.sampleRate=sampleRate;}  }
class C{  public RDN(final AVA... avas){  Reject.ifNull(avas);  this.avas=validateAvas(avas);}  }
class C{  public static boolean isSiteExist(SSOToken ssoToken,String siteName) throws SMSException, SSOException {  Set sites=getSites(ssoToken);  return sites.contains(siteName);}  }
class C{  public void testAlgorithmParameterGenerator09() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg;  for (int i=0; i < algs.length; i++) {    apg=AlgorithmParameterGenerator.getInstance(algs[i],validProvider);    assertEquals("Incorrect algorithm",apg.getAlgorithm(),algs[i]);    assertEquals("Incorrect provider",apg.getProvider(),validProvider);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkRadioEncryptionElement createMobileNetworkRadioEncryptionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkRadioEncryptionElementImpl();}  }
class C{  public boolean isRightToLeft(){  return bidiBase.isRightToLeft();}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  @Override public E remove(int index){  Object[] a=array;  int s=size;  if (index >= s) {    throwIndexOutOfBoundsException(index,s);  }  @SuppressWarnings("unchecked") E result=(E)a[index];  System.arraycopy(a,index + 1,a,index,--s - index);  a[s]=null;  size=s;  modCount++;  return result;}  }
class C{  public SipException(String message,Throwable cause){  super(message);  m_Cause=cause;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  if (duplicateStream == null) {    throw new NotSerializableException(this.getClass().getName() + ": debug mode is disabled!");  }  OutputStream tempOutputStream=outputStream;  outputStream=null;  out.defaultWriteObject();  outputStream=tempOutputStream;}  }
class C{  public MarkovNameGenerator(final MarkovNameGeneratorBuilder builder){  builder.getTrainingNames().forEach(null);}  }
class C{  @Override public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  private HeapUtilsTest(){}  }
class C{  private void checkDSReceivedAndAcked(FakeReplicationDomain fakeRd,int nPacket){  fakeRd.newSafeReadAssertions().receivedUpdates(nPacket).receivedUpdatesAcked(nPacket).runAsserts();}  }
class C{  public Branch(TemplateFile templateFile,DN branchDN){  this(templateFile,branchDN,new String[0],new int[0],new TemplateLine[0]);}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public void registerKeyboardAction(ActionListener anAction,KeyStroke aKeyStroke,int aCondition){  registerKeyboardAction(anAction,null,aKeyStroke,aCondition);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.ReferenceElement createReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.ReferenceElementImpl();}  }
class C{  public static String lower(String self){  return self.toLowerCase();}  }
class C{  public void flush() throws java.io.IOException {  if (m_writer != null)   m_writer.flush();  flushBuffer();}  }
class C{  @Override public int read() throws IOException {  InputStream input=m_streams.get();  if (null != input) {    return input.read();  } else {    return -1;  }}  }
class C{  private List<FieldUse> findUpstreamOutputAffectingFields(){  if (renderEvents.isEmpty())   return new ArrayList<FieldUse>(0);  DataEntitySearchState state=new DataEntitySearchState();  return state.fieldUses;}  }
class C{  @Override public String toString(){  return MessageFormat.format("Query:\n" + "      Filter: {0}\n" + "  Attributes: {1}",getLDAPFilter(),StringUtils.join(requestedAttributes,", "));}  }
class C{  public void testDivideExceptionRM(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  try {    aNumber.divide(bNumber,BigDecimal.ROUND_UNNECESSARY);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {    assertEquals("Improper exception message","Rounding necessary",e.getMessage());  }}  }
class C{  private void drawWind(Canvas canvas,float y,float xOffset){  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);  float time=mLoadingAnimationTime;  if (mLastAnimationTime - mLoadingAnimationTime > 0) {    mInverseDirection=true;    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;  } else {    mNewWindSet=true;    mInverseDirection=false;  }  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;  float xEnd=x + mWindLineWidth;  canvas.drawLine(x,y,xEnd,y,mWindPaint);}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return IsoChronology.INSTANCE.isLeapYear(prolepticYear - YEARS_DIFFERENCE);}  }
class C{  private void addAttributesToEntry(SSOToken token,String dn,AttrSet attrSet) throws UMSException {  PersistentObject po=UMSObject.getObjectHandle(token,new Guid(dn));  int size=attrSet.size();  for (int i=0; i < size; i++) {    Attr attr=attrSet.elementAt(i);    po.modify(attr,ModificationType.ADD);  }  po.save();}  }
class C{  @Override public boolean hasMembers(){  return membership.hasMembers();}  }
class C{  public void fileNotFound(){}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  protected PdfIndirectReference createNextIndirectReference(PdfDocument document){  PdfIndirectReference reference;  if (freeReferences.size() > 0) {    int num=(int)freeReferences.pollFirst();    reference=xref[num];    if (reference == null) {      reference=new PdfIndirectReference(document,num);      xref[num]=reference;    }    reference.setOffset(0);    reference.clearState(PdfObject.FREE);  } else {    reference=new PdfIndirectReference(document,++count);    add(reference);  }  return reference.setState(PdfObject.MODIFIED);}  }
class C{  static <E>E checkType(E obj,Class<? extends E> type){  if (obj != null && !type.isInstance(obj)) {    throw new ClassCastException("Attempt to insert element of type " + obj.getClass() + " into collection of type "+ type);  }  return obj;}  }
class C{  Optional<Investment> investOnce(final InvestmentStrategy strategy,final List<Loan> availableLoans,final BigDecimal balance,final Statistics stats,final Collection<Investment> investmentsAlreadyMade){  final PortfolioOverview portfolio=PortfolioOverview.calculate(balance,stats,investmentsAlreadyMade);  Investor.LOGGER.debug("Current share of unpaid loans with a given rating is: {}.",portfolio.getSharesOnInvestment());  final Collection<Loan> loans=strategy.getMatchingLoans(availableLoans,portfolio).stream().filter(null).collect(Collectors.toList());  Investor.LOGGER.debug("Strategy recommends the following unseen loans: {}.",loans);  return loans.stream().map(null).flatMap(null).findFirst();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean isRealmSubject(String subjectName) throws NameNotFoundException {  if (!users.containsKey(subjectName)) {    String[] objs={subjectName};    throw (new NameNotFoundException(ResBundleUtils.rbName,"name_not_present",objs,subjectName,PolicyException.USER_COLLECTION));  } else {    return ((QualifiedSubject)users.get(subjectName)).isRealmSubject();  }}  }
class C{  protected void release(DirContext context){}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document anotherDoc;  DocumentType docType;  Node node;  doc=(Document)load("staffNS",true);  anotherDoc=(Document)load("staffNS",true);  docType=anotherDoc.getDoctype();{    boolean success=false;    try {      node=doc.importNode(docType,false);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
