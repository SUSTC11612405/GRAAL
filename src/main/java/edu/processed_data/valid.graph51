class C{  private SavedState(Parcel in){  super(in);  prevScrollY=in.readInt();  scrollY=in.readInt();}  }
class C{  public boolean is_active_routing_layer(int p_net_no,int p_layer){  if (itera_settings.manual_rule_selection)   return true;  RuleNet curr_net=r_board.brd_rules.nets.get(p_net_no);  if (curr_net == null) {    return true;  }  NetClass curr_net_class=curr_net.get_class();  if (curr_net_class == null) {    return true;  }  return curr_net_class.is_active_routing_layer(p_layer);}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public static AuthenticationHandler tokenBased(final SecretProvider data,final boolean isDryRun,final long time,final TemporalUnit unit){  return new AuthenticationHandler(data,isDryRun,true,Duration.of(time,unit).getSeconds());}  }
class C{  public MTOMFeature(boolean enabled,int threshold){  if (threshold < 0)   throw new WebServiceException("MTOMFeature.threshold must be >= 0, actual value: " + threshold);  this.enabled=enabled;  this.threshold=threshold;}  }
class C{  public Object[] toArray(){  fullyLock();  try {    int size=count.get();    Object[] a=new Object[size];    int k=0;    for (Node<E> p=head.next; p != null; p=p.next)     a[k++]=p.item;    return a;  }  finally {    fullyUnlock();  }}  }
class C{  public EntryGenerator(final InputStream templateStream){  Reject.ifNull(templateStream);  this.templateStream=templateStream;}  }
class C{  private synchronized boolean shouldLogcatRunnableBeKilled(){  return mShouldLogcatRunnableBeKilled;}  }
class C{  public void valueForPathChanged(TreePath path,Object newValue){  MutableTreeNode aNode=(MutableTreeNode)path.getLastPathComponent();  aNode.setUserObject(newValue);  nodeChanged(aNode);}  }
class C{  public Builder removeUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.removeUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  StringBuffer sBuf=new StringBuffer();  sBuf.append(str.charAt(0));  char last, current;  last='*';  for (int i=0; i < str.length(); i++) {    current=getMappingCode(str.charAt(i));    if (current == last) {      continue;    } else     if (current != 0) {      sBuf.append(current);    }    last=current;  }  return sBuf.toString();}  }
class C{  @Override protected Object createSsoServerSAML2SvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   saml2SvcGroup=new SsoServerSAML2SvcImpl(this,server); else   saml2SvcGroup=new SsoServerSAML2SvcImpl(this);  return saml2SvcGroup;}  }
class C{  private void updateAltTextView(){  String text=getAltText();  if (text != null) {    ImageLabelView newView;    newView=new ImageLabelView(getElement(),text);synchronized (this) {      altView=newView;    }  }}  }
class C{  public BindException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void strokeAndFill(){  MetaPen pen=state.getCurrentPen();  MetaBrush brush=state.getCurrentBrush();  int penStyle=pen.getStyle();  int brushStyle=brush.getStyle();  if (penStyle == MetaPen.PS_NULL) {    cb.closePath();    if (state.getPolyFillMode() == MetaState.ALTERNATE) {      cb.eoFill();    } else {      cb.fill();    }  } else {    boolean isBrush=brushStyle == MetaBrush.BS_SOLID || brushStyle == MetaBrush.BS_HATCHED && state.getBackgroundMode() == MetaState.OPAQUE;    if (isBrush) {      if (state.getPolyFillMode() == MetaState.ALTERNATE)       cb.closePathEoFillStroke(); else       cb.closePathFillStroke();    } else {      cb.closePathStroke();    }  }}  }
class C{  public static Tag valueOf(String name){  Reject.ifNull(name);  RootCfgDefn.getInstance();  Tag tag=TAGS.get(name.toLowerCase());  if (tag == null) {    throw new IllegalArgumentException("Unknown tag \"" + name + "\"");  }  return tag;}  }
class C{  public synchronized void close() throws IOException {  if (!initialized || closed) {    closed=true;    return;  }  for (  Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;  closed=true;}  }
class C{  public boolean readBoundary() throws FileUploadIOException, MalformedStreamException {  byte[] marker=new byte[2];  boolean nextChunk=false;  head+=boundaryLength;  try {    marker[0]=readByte();    if (marker[0] == LF) {      return true;    }    marker[1]=readByte();    if (arrayequals(marker,STREAM_TERMINATOR,2)) {      nextChunk=false;    } else     if (arrayequals(marker,FIELD_SEPARATOR,2)) {      nextChunk=true;    } else {      throw new MalformedStreamException("Unexpected characters follow a boundary");    }  } catch (  FileUploadIOException e) {    throw e;  }catch (  IOException e) {    throw new MalformedStreamException("Stream ended unexpectedly");  }  return nextChunk;}  }
class C{  private String addStyleName(String style){  if (styleNameMapping == null) {    return style;  }  StringBuilder sb=null;  for (int counter=style.length() - 1; counter >= 0; counter--) {    if (!isValidCharacter(style.charAt(counter))) {      if (sb == null) {        sb=new StringBuilder(style);      }      sb.setCharAt(counter,'a');    }  }  String mappedName=(sb != null) ? sb.toString() : style;  while (styleNameMapping.get(mappedName) != null) {    mappedName=mappedName + 'x';  }  styleNameMapping.put(style,mappedName);  return mappedName;}  }
class C{  public void recycle(){  if (session != null) {    session.endAccess();  }}  }
class C{  @Override public void close() throws IOException {  try {    out.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public static void lockOrientation(Activity activity){  Configuration config=activity.getResources().getConfiguration();  final int deviceOrientation=config.orientation;  int rotation=activity.getWindowManager().getDefaultDisplay().getRotation();  int orientation=ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;  if (deviceOrientation == Configuration.ORIENTATION_PORTRAIT) {    orientation=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;    if (rotation == Surface.ROTATION_90 || rotation == Surface.ROTATION_180)     orientation=ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;  } else   if (deviceOrientation == Configuration.ORIENTATION_LANDSCAPE) {    orientation=ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;    if (rotation == Surface.ROTATION_180 || rotation == Surface.ROTATION_270)     orientation=ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;  }  activity.setRequestedOrientation(orientation);}  }
class C{  public void paintOptionPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private PlaPointFloat right_turn_next_corner(PlaPointFloat p_from_corner,double p_dist,PlaPointFloat p_to_corner,PlaPointFloat p_next_corner){  PlaPointFloat curr_tangential_point=p_from_corner.left_tangential_point(p_to_corner,p_dist);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo.right_turn_next_corner: left tangential point is null");    return p_from_corner;  }  PlaSegmentFloat first_line=new PlaSegmentFloat(p_from_corner,curr_tangential_point);  curr_tangential_point=p_to_corner.right_tangential_point(p_next_corner,2 * p_dist + c_tolerance);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo.right_turn_next_corner: right tangential point is null");    return p_from_corner;  }  PlaSegmentFloat second_line=new PlaSegmentFloat(p_to_corner,curr_tangential_point);  second_line=second_line.translate(p_dist);  return first_line.intersection(second_line);}  }
class C{  public static boolean add_via_rule(Collection<String> p_name_list,RoutingBoard p_board){  Iterator<String> it=p_name_list.iterator();  String rule_name=it.next();  freert.rules.RuleViaInfoList existing_rule=p_board.brd_rules.get_via_rule(rule_name);  freert.rules.RuleViaInfoList curr_rule=new freert.rules.RuleViaInfoList(rule_name);  boolean rule_ok=true;  while (it.hasNext()) {    BrdViaInfo curr_via=p_board.brd_rules.via_infos.get(it.next());    if (curr_via != null) {      curr_rule.append_via(curr_via);    } else {      System.out.println("Network.insert_via_rules: via_info not found");      rule_ok=false;    }  }  if (rule_ok) {    if (existing_rule != null) {      p_board.brd_rules.via_rules.remove(existing_rule);    }    p_board.brd_rules.via_rules.add(curr_rule);  }  return rule_ok;}  }
class C{  @SuppressWarnings("unchecked") public void testSetIssuerNamesLjava_util_Collection02(){  X509CRLSelector selector=new X509CRLSelector();  String iss1="O=First Org.";  byte[] iss2=new byte[]{48,22,49,20,48,18,6,3,85,4,10,19,11,83,101,99,111,110,100,32,79,114,103,46};  String iss3="O=Third Org.";  TestCRL crl1=new TestCRL(new X500Principal(iss1));  TestCRL crl2=new TestCRL(new X500Principal(iss2));  TestCRL crl3=new TestCRL(new X500Principal(iss3));  try {    selector.setIssuerNames(null);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("Any CRL issuers should match in the case of null issuers.",selector.match(crl1) && selector.match(crl2));  ArrayList issuers=new ArrayList(2);  issuers.add(iss1);  issuers.add(iss2);  try {    selector.setIssuerNames(issuers);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl1) && selector.match(crl2));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl3));  issuers.add(iss3);  assertFalse("The internal issuer collection is not protected " + "against the modifications.",selector.match(crl3));}  }
class C{  public CodeStream putDouble(final double d){  return putLong(Double.doubleToRawLongBits(d));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AffiliationIDElement createAffiliationIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AffiliationIDElementImpl();}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  public static void print(Object o){  System.out.print(o);}  }
class C{  public static void addToCurrentFileList(String oldFileName,String newFileName,String logName){  ArrayList fileList=(ArrayList)currentFileList.get(PREFIX + logName);  if (fileList == null) {    fileList=new ArrayList();  }  currentFileList.remove(PREFIX + logName);  fileList.remove(PREFIX + oldFileName);  fileList.add(PREFIX + newFileName);  if (!oldFileName.equals(newFileName)) {    fileList.add(PREFIX + oldFileName);  }  currentFileList.put(PREFIX + logName,fileList);}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  private void doTargetRefresh(SIPMessage sipMessage){  ContactList contactList=sipMessage.getContactHeaders();  if (contactList != null) {    Contact contact=(Contact)contactList.getFirst();    this.setRemoteTarget(contact);  }}  }
class C{  public static String constructLlccKey(String lang,String country){  String key=lang;  if (country != null && !country.equals("none")) {    key+="_" + country;  }  return key;}  }
class C{  public synchronized Enumeration<V> elements(){  return this.<V>getEnumeration(VALUES);}  }
class C{  public void restoreSubcomponentFocus(){  if (isIcon()) {    SwingUtilities2.compositeRequestFocus(getDesktopIcon());  } else {    Component component=KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();    if ((component == null) || !SwingUtilities.isDescendingFrom(component,this)) {      setLastFocusOwner(getMostRecentFocusOwner());      if (lastFocusOwner == null) {        setLastFocusOwner(getContentPane());      }      lastFocusOwner.requestFocus();    }  }}  }
class C{  public void testRead2() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  int expected=data.length;  byte[] result=new byte[expected];  int ind=0;  int got=cis.read(result);  while (true) {    for (int j=0; j < got - ind; j++) {      if (result[j] != data[ind + j]) {        fail("read(byte[] b) returned incorrect data.");      }    }    if (got == expected) {      break;    } else     if (got > expected) {      fail("The data returned by read(byte[] b) " + "is larger than expected.");    } else {      ind=got;      got+=cis.read(result);    }  }  if (cis.read(result) != -1) {    fail("read(byte[] b) should return -1 " + "at the end of the stream.");  }}  }
class C{  public SQLInvalidAuthorizationSpecException(Throwable cause){  super(cause);}  }
class C{  static void createPasswordFiles(String basedir,String keystorePwd,String keyPassword) throws IOException {  writeContent(basedir + "/.keypass",keyPassword);  writeContent(basedir + "/.storepass",keystorePwd);  copyCtxFile("/WEB-INF/template/keystore","keystore.jks",basedir);  copyCtxFile("/WEB-INF/template/keystore","keystore.jceks",basedir);  AMKeyProvider jceks=new AMKeyProvider(true,basedir + "/keystore.jceks","changeit","JCEKS","changeit");  AMKeyProvider jks=new AMKeyProvider(true,basedir + "/keystore.jks","changeit","JKS","changeit");  jceks.setKey(keystorePwd,keyPassword);  jks.setKey(keystorePwd,keyPassword);  try {    jceks.store();    jks.store();  } catch (  CertificateException|NoSuchAlgorithmException|KeyStoreException e) {    throw new IOException("Can't update keystore password",e);  }}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  private void runLogcatSubscriber(){  Process process=null;  try {    process=Runtime.getRuntime().exec("/system/bin/logcat -b " + mLogcatSource);  } catch (  IOException e) {    sendMessage(MSG_LOGCAT_RUN_FAILURE);  }  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(process.getInputStream()));    String logEntry;    while (!shouldLogcatRunnableBeKilled()) {      if (mIsPaused) {        continue;      }      logEntry=reader.readLine();      sendLogEntry(logEntry);      if (mIsRecording) {        if (TextUtils.isEmpty(mFilterText) || (!TextUtils.isEmpty(mFilterText) && logEntry.toLowerCase().contains(mFilterText.toLowerCase()))) {          mRecordingData.add(logEntry);        }      }    }    Log.d(LOG_TAG,"Preparing to terminate LogcatRunnable thread");    if (mIsRecording) {      recordLogData();      mHandler.removeCallbacks(mRecordLogEntryRunnable);      mIsRecording=false;      mRecordingData.removeAllElements();      mRecordingFilename=null;    }    reader.close();    process.destroy();  } catch (  IOException e) {    sendMessage(MSG_LOGCAT_READ_FAILURE);  }  Log.d(LOG_TAG,"Terminating LogcatRunnable thread");  return;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  private static boolean isTainted(Object o){  try {    checkTypeSafe(o);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  public static ClientException adaptInputException(final Throwable cause){  return new ClientException(ReturnCode.ERROR_USER_DATA,ERR_CONSOLE_INPUT_ERROR.get(cause.getMessage()),cause);}  }
class C{  public static Object createToken(String name,String password){  return tokenProvider.createToken(name,password);}  }
class C{  public AuthLevelCondition(){  this(PrivilegeManager.debug,new CoreWrapper());}  }
class C{  public void updateBytesWritten(int bytesWritten){  this.bytesWritten.getAndAdd(bytesWritten);}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  @Override public void resume(){}  }
class C{  private static GeneralizedTime finishDecodingFraction(final String value,final int startPos,final int year,final int month,final int day,final int hour,final int minute,final int second,final int multiplier){  final int length=value.length();  final StringBuilder fractionBuffer=new StringBuilder((2 + length) - startPos);  fractionBuffer.append("0.");  TimeZone timeZone=null;  outerLoop:   for (int i=startPos; i < length; i++) {    final char c=value.charAt(i);switch (c) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      fractionBuffer.append(c);    break;case 'Z':case 'z':  if (i != (value.length() - 1)) {    final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR.get(value,String.valueOf(c));    throw new LocalizedIllegalArgumentException(message);  }timeZone=TIME_ZONE_UTC_OBJ;break outerLoop;case '+':case '-':timeZone=getTimeZoneForOffset(value,i);break outerLoop;default :final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR.get(value,String.valueOf(c));throw new LocalizedIllegalArgumentException(message);}}if (fractionBuffer.length() == 2) {final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_EMPTY_FRACTION.get(value);throw new LocalizedIllegalArgumentException(message);}if (timeZone == null) {final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_NO_TIME_ZONE_INFO.get(value);throw new LocalizedIllegalArgumentException(message);}final Double fractionValue=Double.parseDouble(fractionBuffer.toString());final int additionalMilliseconds=(int)Math.round(fractionValue * multiplier);try {final GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(timeZone);calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,additionalMilliseconds);return new GeneralizedTime(calendar,null,Long.MIN_VALUE,value);} catch (final Exception e) {final LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(value,String.valueOf(e));throw new LocalizedIllegalArgumentException(message,e);}}  }
class C{  public void close(){}  }
class C{  public void testGenerateCertPath03() throws Exception {  String certPathEncoding="PkiPath";  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  for (int i=0; i < certFs.length; i++) {    Iterator<String> it=certFs[0].getCertPathEncodings();    assertTrue("no CertPath encodings",it.hasNext());    assertEquals("Incorrect default encoding",certPathEncoding,it.next());    CertPath certPath=null;    InputStream fis=Support_Resources.getResourceStream(fileCertPathPki);    certPath=certFs[i].generateCertPath(fis);    fis.close();    assertEquals(defaultType,certPath.getType());    List<? extends Certificate> list1=certPath.getCertificates();    assertFalse("Result list is empty",list1.isEmpty());  }}  }
class C{  public void testCase7(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=1;  int bSign=1;  byte rBytes[]={23,115,11,78,35,-11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean isSigned(){  return isSigned;}  }
class C{  @Override protected void postProcessEvent(AuditEvent auditEvent){  final String SESSIONS="/sessions";  Reject.ifNull(auditEvent);  JsonValue jsonValue=auditEvent.getValue();  JsonPointer pathComponent=new JsonPointer("/http/request/path");  String path=jsonValue.get(pathComponent).asString();  if (path != null) {    int posLast=path.lastIndexOf(SESSIONS);    if (posLast > 0) {      path=path.substring(0,posLast + SESSIONS.length());      jsonValue.remove(pathComponent);      jsonValue.add(pathComponent,path);    }  }}  }
class C{  @Override public void onDestroyView(){  super.onDestroyView();}  }
class C{  private Builder(net.aimeizi.person.Person other){  super(net.aimeizi.person.Person.SCHEMA$);  if (isValidValue(fields()[0],other.age)) {    this.age=data().deepCopy(fields()[0].schema(),other.age);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.name)) {    this.name=data().deepCopy(fields()[1].schema(),other.name);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.sex)) {    this.sex=data().deepCopy(fields()[2].schema(),other.sex);    fieldSetFlags()[2]=true;  }  if (isValidValue(fields()[3],other.salary)) {    this.salary=data().deepCopy(fields()[3].schema(),other.salary);    fieldSetFlags()[3]=true;  }  if (isValidValue(fields()[4],other.childrenCount)) {    this.childrenCount=data().deepCopy(fields()[4].schema(),other.childrenCount);    fieldSetFlags()[4]=true;  }}  }
class C{  public void appendCell(boolean value){  appendCell(String.valueOf(value));}  }
class C{  public static void main(final String[] args){  testSplitNameIntoWords();  final Schema schema=Schema.getCoreSchema();  final SortedMap<String,Syntax> syntaxes=new TreeMap<>();  for (  final Syntax syntax : schema.getSyntaxes()) {    if (isOpenDSOID(syntax.getOID())) {      continue;    }    final String name=syntax.getDescription().replaceAll(" Syntax$","");    final String fieldName=name.replace(" ","_").replaceAll("[.-]","").toUpperCase(Locale.ENGLISH).concat("_SYNTAX");    syntaxes.put(fieldName,syntax);  }  final SortedMap<String,MatchingRule> matchingRules=new TreeMap<>();  for (  final MatchingRule matchingRule : schema.getMatchingRules()) {    if (isOpenDSOID(matchingRule.getOID()) || isCollationMatchingRule(matchingRule.getOID())) {      continue;    }    final String name=matchingRule.getNameOrOID().replaceAll("Match$","");    final String fieldName=splitNameIntoWords(name).concat("_MATCHING_RULE");    matchingRules.put(fieldName,matchingRule);  }  final SortedMap<String,AttributeType> attributeTypes=new TreeMap<>();  for (  final AttributeType attributeType : schema.getAttributeTypes()) {    if (isOpenDSOID(attributeType.getOID())) {      continue;    }    final String name=attributeType.getNameOrOID();    final String fieldName=splitNameIntoWords(name).concat("_ATTRIBUTE_TYPE");    attributeTypes.put(fieldName,attributeType);  }  final SortedMap<String,ObjectClass> objectClasses=new TreeMap<>();  for (  final ObjectClass objectClass : schema.getObjectClasses()) {    if (isOpenDSOID(objectClass.getOID())) {      continue;    }    final String name=objectClass.getNameOrOID();    final String fieldName=splitNameIntoWords(name.replace("-","")).concat("_OBJECT_CLASS");    objectClasses.put(fieldName,objectClass);  }  final PrintStream out=System.out;  out.println("/*");  out.println(" * The contents of this file are subject to the terms of the Common Development and");  out.println(" * Distribution License (the License). You may not use this file except in compliance with the");  out.println(" * License.");  out.println(" *");  out.println(" * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the");  out.println(" * specific language governing permission and limitations under the License.");  out.println(" *");  out.println(" * When distributing Covered Software, include this CDDL Header Notice in each file and include");  out.println(" * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL");  out.println(" * Header, with the fields enclosed by brackets [] replaced by your own identifying");  out.println(" * information: \"Portions Copyright [year] [name of copyright owner]\".");  out.println(" *");  out.println(" * Copyright 2009 Sun Microsystems, Inc.");  out.println(" * Portions copyright 2014-" + Calendar.getInstance().get(Calendar.YEAR) + " ForgeRock AS.");  out.println(" */");  out.println("package org.forgerock.opendj.ldap.schema;");  out.println();  out.println();  out.println("// DON'T EDIT THIS FILE!");  out.println("// It is automatically generated using GenerateCoreSchema class.");  out.println();  out.println("/**");  out.println(" * The OpenDJ SDK core schema contains standard LDAP RFC schema elements. These include:");  out.println(" * <ul>");  out.println(" * <li><a href=\"http://tools.ietf.org/html/rfc4512\">RFC 4512 -");  out.println(" * Lightweight Directory Access Protocol (LDAP): Directory Information");  out.println(" * Models </a>");  out.println(" * <li><a href=\"http://tools.ietf.org/html/rfc4517\">RFC 4517 -");  out.println(" * Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching");  out.println(" * Rules </a>");  out.println(" * <li><a href=\"http://tools.ietf.org/html/rfc4519\">RFC 4519 -");  out.println(" * Lightweight Directory Access Protocol (LDAP): Schema for User");  out.println(" * Applications </a>");  out.println(" * <li><a href=\"http://tools.ietf.org/html/rfc4530\">RFC 4530 -");  out.println(" * Lightweight Directory Access Protocol (LDAP): entryUUID Operational");  out.println(" * Attribute </a>");  out.println(" * <li><a href=\"http://tools.ietf.org/html/rfc3045\">RFC 3045 - Storing");  out.println(" * Vendor Information in the LDAP Root DSE </a>");  out.println(" * <li><a href=\"http://tools.ietf.org/html/rfc3112\">RFC 3112 - LDAP");  out.println(" * Authentication Password Schema </a>");  out.println(" * </ul>");  out.println(" * <p>");  out.println(" * The core schema is non-strict: attempts to retrieve");  out.println(" * non-existent Attribute Types will return a temporary");  out.println(" * Attribute Type having the Octet String syntax.");  out.println(" */");  out.println("public final class CoreSchema {");  out.println("    // Core Syntaxes");  for (  final Map.Entry<String,Syntax> syntax : syntaxes.entrySet()) {    out.println("    private static final Syntax " + syntax.getKey() + " =");    out.println("        CoreSchemaImpl.getInstance().getSyntax(\"" + syntax.getValue().getOID() + "\");");  }  out.println();  out.println("    // Core Matching Rules");  for (  final Map.Entry<String,MatchingRule> matchingRule : matchingRules.entrySet()) {    out.println("    private static final MatchingRule " + matchingRule.getKey() + " =");    out.println("        CoreSchemaImpl.getInstance().getMatchingRule(\"" + matchingRule.getValue().getOID() + "\");");  }  out.println();  out.println("    // Core Attribute Types");  for (  final Map.Entry<String,AttributeType> attributeType : attributeTypes.entrySet()) {    out.println("    private static final AttributeType " + attributeType.getKey() + " =");    out.println("        CoreSchemaImpl.getInstance().getAttributeType(\"" + attributeType.getValue().getOID() + "\");");  }  out.println();  out.println("    // Core Object Classes");  for (  final Map.Entry<String,ObjectClass> objectClass : objectClasses.entrySet()) {    out.println("    private static final ObjectClass " + objectClass.getKey() + " =");    out.println("        CoreSchemaImpl.getInstance().getObjectClass(\"" + objectClass.getValue().getOID() + "\");");  }  out.println();  out.println("    // Prevent instantiation");  out.println("    private CoreSchema() {");  out.println("      // Nothing to do.");  out.println("    }");  out.println();  out.println("    /**");  out.println("     * Returns a reference to the singleton core schema.");  out.println("     *");  out.println("     * @return The core schema.");  out.println("     */");  out.println("    public static Schema getInstance() {");  out.println("        return CoreSchemaImpl.getInstance();");  out.println("    }");  for (  final Map.Entry<String,Syntax> syntax : syntaxes.entrySet()) {    out.println();    final String description=toCodeJavaDoc(syntax.getValue().getDescription().replaceAll(" Syntax$","") + " Syntax");    out.println("    /**");    out.println("     * Returns a reference to the " + description);    out.println("     * which has the OID " + toCodeJavaDoc(syntax.getValue().getOID()) + ".");    out.println("     *");    out.println("     * @return A reference to the " + description + ".");    out.println("     */");    out.println("    public static Syntax get" + toJavaName(syntax.getKey()) + "() {");    out.println("        return " + syntax.getKey() + ";");    out.println("    }");  }  for (  final Map.Entry<String,MatchingRule> matchingRule : matchingRules.entrySet()) {    out.println();    final String description=toCodeJavaDoc(matchingRule.getValue().getNameOrOID());    out.println("    /**");    out.println("     * Returns a reference to the " + description + " Matching Rule");    out.println("     * which has the OID " + toCodeJavaDoc(matchingRule.getValue().getOID()) + ".");    out.println("     *");    out.println("     * @return A reference to the " + description + " Matching Rule.");    out.println("     */");    out.println("    public static MatchingRule get" + toJavaName(matchingRule.getKey()) + "() {");    out.println("        return " + matchingRule.getKey() + ";");    out.println("    }");  }  for (  final Map.Entry<String,AttributeType> attributeType : attributeTypes.entrySet()) {    out.println();    final String description=toCodeJavaDoc(attributeType.getValue().getNameOrOID());    out.println("    /**");    out.println("     * Returns a reference to the " + description + " Attribute Type");    out.println("     * which has the OID " + toCodeJavaDoc(attributeType.getValue().getOID()) + ".");    out.println("     *");    out.println("     * @return A reference to the " + description + " Attribute Type.");    out.println("     */");    out.println("    public static AttributeType get" + toJavaName(attributeType.getKey()) + "() {");    out.println("        return " + attributeType.getKey() + ";");    out.println("    }");  }  for (  final Map.Entry<String,ObjectClass> objectClass : objectClasses.entrySet()) {    out.println();    final String description=toCodeJavaDoc(objectClass.getValue().getNameOrOID());    out.println("    /**");    out.println("     * Returns a reference to the " + description + " Object Class");    out.println("     * which has the OID " + toCodeJavaDoc(objectClass.getValue().getOID()) + ".");    out.println("     *");    out.println("     * @return A reference to the " + description + " Object Class.");    out.println("     */");    out.println("    public static ObjectClass get" + toJavaName(objectClass.getKey()) + "() {");    out.println("        return " + objectClass.getKey() + ";");    out.println("    }");  }  out.println("}");}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public ObjectId(byte[] b){  if (b.length != 12) {    throw new IllegalArgumentException("need 12 bytes");  }  ByteBuffer bb=ByteBuffer.wrap(b);  _time=bb.getInt();  _machine=bb.getInt();  _inc=bb.getInt();  _new=false;}  }
class C{  public int indexOfIdenticalObject(Object obj){  NSObject nso=NSObject.wrap(obj);  for (int i=0; i < array.length; i++) {    if (array[i] == nso) {      return i;    }  }  return -1;}  }
class C{  public static final <V>V fromJson(Reader reader,Type type){  return GSON.fromJson(reader,type);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecdatasectionnodevalue.class,args);}  }
class C{  public static long fromInet4SocketAddressAndInode(final InetSocketAddress socketAddress,final int inode){  return overlayInode(fromInet4SocketAddress(socketAddress),inode);}  }
class C{  private void putHead(String key,TemplateSubPatternAssociation assoc){  if (key.equals(PsuedoNames.PSEUDONAME_TEXT))   m_textPatterns=assoc; else   if (key.equals(PsuedoNames.PSEUDONAME_ROOT))   m_docPatterns=assoc; else   if (key.equals(PsuedoNames.PSEUDONAME_COMMENT))   m_commentPatterns=assoc;  m_patternTable.put(key,assoc);}  }
class C{  public SignerInfo toASN1Structure(){  return info;}  }
class C{  public void testClearBitNegativeInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=44;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-62,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireInternalReferenceElement createRequireInternalReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireInternalReferenceElementImpl();}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  super.endCompose(sroot);  if (m_parentNode instanceof Stylesheet) {    StylesheetRoot.ComposeState cstate=sroot.getComposeState();    m_frameSize=cstate.getFrameSize();    cstate.resetStackFrameSize();  }}  }
class C{  private int check_ripup(MazeListElement p_list_element,BrdItem p_obstacle_item,boolean p_door_is_small){  if (!p_obstacle_item.is_route()) {    return -1;  }  if (p_door_is_small) {    if (!enter_through_small_door(p_list_element,p_obstacle_item)) {      return -1;    }  }  ExpandRoomComplete previous_room=p_list_element.door.other_room_complete(p_list_element.next_room);  boolean room_was_shoved=p_list_element.adjustment != MazeAdjustment.NONE;  BrdItem previous_item=null;  if (previous_room != null && previous_room instanceof ExpandRoomObstacle) {    previous_item=((ExpandRoomObstacle)previous_room).get_item();  }  if (room_was_shoved) {    if (previous_item != null && previous_item != p_obstacle_item && previous_item.shares_net(p_obstacle_item)) {      return -1;    }  } else   if (previous_item == p_obstacle_item) {    return ALREADY_RIPPED_COSTS;  }  double fanout_via_cost_factor=1.0;  double cost_factor=1;  if (p_obstacle_item instanceof BrdTracep) {    BrdTracep obstacle_trace=(BrdTracep)p_obstacle_item;    cost_factor=obstacle_trace.get_half_width();    if (!art_ctrl.stop_remove_fanout_vias) {      fanout_via_cost_factor=calc_fanout_via_ripup_cost_factor(obstacle_trace);    }  } else   if (p_obstacle_item instanceof board.items.BrdAbitVia) {    boolean look_if_fanout_via=!art_ctrl.stop_remove_fanout_vias;    Collection<BrdItem> contact_list=p_obstacle_item.get_normal_contacts();    int contact_count=0;    for (    BrdItem curr_contact : contact_list) {      if (!(curr_contact instanceof BrdTracep) || curr_contact.is_user_fixed()) {        return -1;      }      ++contact_count;      BrdTracep obstacle_trace=(BrdTracep)curr_contact;      cost_factor=Math.max(cost_factor,obstacle_trace.get_half_width());      if (look_if_fanout_via) {        double curr_fanout_via_cost_factor=calc_fanout_via_ripup_cost_factor(obstacle_trace);        if (curr_fanout_via_cost_factor > 1) {          fanout_via_cost_factor=curr_fanout_via_cost_factor;          look_if_fanout_via=false;        }      }    }    if (fanout_via_cost_factor <= 1) {      cost_factor*=0.5 * Math.max(contact_count - 1,0);    }  }  double ripup_cost=art_ctrl.ripup_costs * cost_factor;  double detour=1;  if (fanout_via_cost_factor <= 1) {    ArtConnection obstacle_connection=ArtConnection.get(p_obstacle_item);    if (obstacle_connection != null) {      detour=obstacle_connection.get_detour();    }  }  boolean randomize=art_ctrl.ripup_pass_no >= 4 && art_ctrl.ripup_pass_no % 3 != 0;  if (randomize) {    double random_number=random_generator.nextDouble();    double random_factor=0.5 + random_number * random_number;    detour*=random_factor;  }  ripup_cost/=detour;  ripup_cost*=fanout_via_cost_factor;  int result=Math.max((int)ripup_cost,1);  final int MAX_RIPUP_COSTS=Integer.MAX_VALUE / 100;  return Math.min(result,MAX_RIPUP_COSTS);}  }
class C{  public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  initPredicateInfo(compiler,opPos);}  }
class C{  public ShortMessage(){  this(new byte[3]);  data[0]=(byte)(NOTE_ON & 0xFF);  data[1]=(byte)64;  data[2]=(byte)127;  length=3;}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  keyUniverse=getKeyUniverse(keyType);  vals=new Object[keyUniverse.length];  int size=s.readInt();  for (int i=0; i < size; i++) {    K key=(K)s.readObject();    V value=(V)s.readObject();    put(key,value);  }}  }
class C{  protected Cipher(CipherSpi cipherSpi,Provider provider,String transformation){  if (cipherSpi == null) {    throw new NullPointerException("cipherSpi == null");  }  if (!(cipherSpi instanceof NullCipherSpi) && provider == null) {    throw new NullPointerException("provider == null");  }  this.provider=provider;  this.transformation=transformation;  this.spiImpl=cipherSpi;}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  public static boolean isShort(String desc){  return desc.endsWith("S");}  }
class C{  private void dumpNode(StringBuffer result,boolean recursive,int indent,int index){  for (int i=0; i < indent; i++) {    result.append('\t');  }  if (parent != null) {    if (getOptions().isQualifier()) {      result.append('?');      result.append(name);    } else     if (getParent().getOptions().isArray()) {      result.append('[');      result.append(index);      result.append(']');    } else {      result.append(name);    }  } else {    result.append("ROOT NODE");    if (name != null && name.length() > 0) {      result.append(" (");      result.append(name);      result.append(')');    }  }  if (value != null && value.length() > 0) {    result.append(" = \"");    result.append(value);    result.append('"');  }  if (getOptions().containsOneOf(0xffffffff)) {    result.append("\t(");    result.append(getOptions().toString());    result.append(" : ");    result.append(getOptions().getOptionsString());    result.append(')');  }  result.append('\n');  if (recursive && hasQualifier()) {    XMPNode[] quals=(XMPNode[])getQualifier().toArray(new XMPNode[getQualifierLength()]);    int i=0;    while (quals.length > i && (XMPConst.XML_LANG.equals(quals[i].getName()) || "rdf:type".equals(quals[i].getName()))) {      i++;    }    Arrays.sort(quals,i,quals.length);    for (i=0; i < quals.length; i++) {      XMPNode qualifier=quals[i];      qualifier.dumpNode(result,recursive,indent + 2,i + 1);    }  }  if (recursive && hasChildren()) {    XMPNode[] children=(XMPNode[])getChildren().toArray(new XMPNode[getChildrenLength()]);    if (!getOptions().isArray()) {      Arrays.sort(children);    }    for (int i=0; i < children.length; i++) {      XMPNode child=children[i];      child.dumpNode(result,recursive,indent + 1,i + 1);    }  }}  }
class C{  private static int nextIndex(int i,int len){  return ((i + 1 < len) ? i + 1 : 0);}  }
class C{  public AuthorNagException(final String message){  this.message=message;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ReferenceTokenType createReferenceTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ReferenceTokenTypeImpl();}  }
class C{  public void close(){  flush();  if (writer != null) {    try {      writer.close();    } catch (    IOException e) {      Debug.error(fileName + ":FileHandler: Error closing writer",e);    }  }  stopBufferTimer();}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int earliestNode=DTM.NULL;  if (null != m_iterators) {    int n=m_iterators.length;    int iteratorUsed=-1;    for (int i=0; i < n; i++) {      int node=m_iterators[i].getCurrentNode();      if (DTM.NULL == node)       continue; else       if (DTM.NULL == earliestNode) {        iteratorUsed=i;        earliestNode=node;      } else {        if (node == earliestNode) {          m_iterators[i].nextNode();        } else {          DTM dtm=getDTM(node);          if (dtm.isNodeAfter(node,earliestNode)) {            iteratorUsed=i;            earliestNode=node;          }        }      }    }    if (DTM.NULL != earliestNode) {      m_iterators[iteratorUsed].nextNode();      incrementCurrentPos();    } else     m_foundLast=true;  }  m_lastFetched=earliestNode;  return earliestNode;}  }
class C{  public Crop withAspect(int x,int y){  cropIntent.putExtra(Extra.ASPECT_X,x);  cropIntent.putExtra(Extra.ASPECT_Y,y);  return this;}  }
class C{  private Object applyObjectLevelDecorations(final String name,final Object object,final JsonValue configuration) throws HeapException {  Object decorated=object;  if (decorated instanceof Decorator) {    return decorated;  }  Context context=new DecorationContext(this,this.name.child(name),configuration);  contexts.put(name,context);  if (decorations.containsKey(name)) {    for (    JsonValue decoration : decorations.get(name)) {      String decoratorName=decoration.getPointer().leaf();      Decorator decorator=get(decoratorName,Decorator.class);      if (decorator != null) {        decorated=decorator.decorate(decorated,decoration,context);      }    }  }  return decorated;}  }
class C{  public void removeFocusListener(FocusListener l){  getTextComponent().removeFocusListener(l);}  }
class C{  @DataProvider(name="valid6Rules") public Object[][] valid6Data(){  return new Object[][]{{"2001:fecd:ba23:cd1f:dcb1:1010:9234:4088/124"},{"2001:fecd:ba23:cd1f:dcb1:1010:9234:4088"},{"[2001:fecd:ba23:cd1f:dcb1:1010:9234:4088]/45"},{"::/128"},{"::1/128"},{"::"},{"0:0:0:0:0:ffff:101.45.75.219"},{"1080::8:800:200C:417A"},{"0:0:0:0:0:0:101.45.75.219"},{"::101.45.75.219"}};}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AttributeValueElement createAttributeValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeValueElementImpl();}  }
class C{  public boolean enableGrpcStreaming(){  return false;}  }
class C{  public JobStateReasons(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void appendChild(int newChild,boolean clone,boolean cloneDepth){  boolean sameDoc=((newChild & DOCHANDLE_MASK) == m_docHandle);  if (clone || !sameDoc) {  } else {  }}  }
class C{  public boolean match(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  GenericObjectList that=(GenericObjectList)other;  ListIterator hisIterator=that.listIterator();  outer:   while (hisIterator.hasNext()) {    Object hisobj=hisIterator.next();    Object myobj=null;    ListIterator myIterator=this.listIterator();    while (myIterator.hasNext()) {      myobj=myIterator.next();      if (myobj instanceof GenericObject)       System.out.println("Trying to match  = " + ((GenericObject)myobj).encode());      if (GenericObject.isMySubclass(myobj.getClass()) && ((GenericObject)myobj).match(hisobj))       break outer; else       if (GenericObjectList.isMySubclass(myobj.getClass()) && ((GenericObjectList)myobj).match(hisobj))       break outer;    }    System.out.println(((GenericObject)hisobj).encode());    return false;  }  return true;}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("core","2.0");  assertTrue("domimplementationFeaturecoreAssert",state);}  }
class C{  public boolean isRinging(){  return (currentState == ringingState);}  }
class C{  private int intLength(){  return (bitLength() >>> 5) + 1;}  }
class C{  public void updateAuthFailureTimes(){  if (passwordPolicy.getLockoutFailureCount() <= 0) {    return;  }  if (logger.isTraceEnabled()) {    logger.trace("Updating authentication failure times for user %s",userDNString);  }  List<Long> failureTimes=getAuthFailureTimes();  long highestFailureTime=computeHighestTime(failureTimes);  failureTimes.add(highestFailureTime);  AttributeType type=DirectoryServer.getSchema().getAttributeType(OP_ATTR_PWPOLICY_FAILURE_TIME);  Attribute addAttr=Attributes.create(type,GeneralizedTimeSyntax.format(highestFailureTime));  modifications.add(new Modification(ModificationType.ADD,addAttr,true));  int lockoutCount=passwordPolicy.getLockoutFailureCount();  if (lockoutCount > 0 && lockoutCount <= authFailureTimes.size()) {    setFailureLockedTime(highestFailureTime);    if (logger.isTraceEnabled()) {      logger.trace("Locking user account %s due to too many failures.",userDNString);    }  }}  }
class C{  public AMGroup createDynamicGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.DYNAMIC_GROUP);}  }
class C{  public static void warning(String msg){  debugInst.debug(IDebug.WARNING,msg);}  }
class C{  protected void removeFromMaps(String clientType){  Client client=(Client)clientTypeMap.get(clientType);  externalClientData.remove(clientType);  Map map=(Map)internalClientData.get(clientType);  if (map == null) {    removeFromClientMap(clientType,client);  } else {    handleParentChange(clientType,map);  }  unloadClient(clientType);}  }
class C{  TemplateFile(Schema schema,Map<String,String> constants,String resourcePath) throws IOException {  this(schema,constants,resourcePath,new Random(),true);}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  private boolean isMember(SSOToken token) throws SSOException, PolicyException {  boolean member=false;  String userLocalDN=token.getPrincipal().getName();  String tokenID=token.getTokenID().toString();  if (debug.messageEnabled()) {    debug.message("LDAPFilterCondition.isMember(): userLocalDN from ssoToken is: " + userLocalDN);  }  Boolean matchFound=null;  if ((matchFound=SubjectEvaluationCache.isMember(tokenID,ldapServer,ldapConditionFilter)) != null) {    if (debug.messageEnabled()) {      debug.message("LDAPFilterCondition.isMember():" + "Got membership " + "from cache userLocalDN: " + userLocalDN + ", ldapConditionFilter: "+ ldapConditionFilter+ " , member:"+ matchFound.booleanValue());    }    boolean result=matchFound.booleanValue();    if (result) {      return result;    }  }  if (debug.messageEnabled()) {    debug.message("LDAPFilterCondition:isMember():" + " ldapConditionFilter:" + ldapConditionFilter + " not in subject evaluation cache, "+ " fetching from directory server.");  }  int beginIndex=userLocalDN.indexOf("=");  int endIndex=userLocalDN.indexOf(",");  if ((beginIndex <= 0) || (endIndex <= 0) || (beginIndex >= endIndex)) {    throw (new PolicyException(ResBundleUtils.rbName,"ldapusers_subject_invalid_local_user_dn",null,null));  }  String userName=userLocalDN.substring(beginIndex + 1,endIndex);  String userMappingFilter=PolicyUtils.constructUserFilter(token,userRDNAttrName,userName,aliasEnabled);  boolean multipleFilters=false;  String searchFilter=null;  if ((userSearchFilter != null) && !(userSearchFilter.equals(""))) {    searchFilter=trimAndParenthesise(userSearchFilter) + trimAndParenthesise(userMappingFilter);    multipleFilters=true;  }  if (debug.messageEnabled()) {    debug.message("LDAPFilterCondition.isMember(): " + " user search filter is: " + userSearchFilter);    debug.message("LDAPFilterCondition.isMember(): " + " user mapping filter is: " + userMappingFilter);    debug.message("LDAPFilterCondition.isMember(): " + " condition ldapConditionFilter is: " + ldapConditionFilter);  }  if ((ldapConditionFilter != null) && (ldapConditionFilter.length() != 0)) {    multipleFilters=true;    searchFilter=searchFilter + trimAndParenthesise(ldapConditionFilter);  }  if (multipleFilters) {    searchFilter=trimAndParenthesise(AMPERSAND + searchFilter);  }  if (debug.messageEnabled()) {    debug.message("LDAPFilterCondition.isMember(): " + " combined filter : " + searchFilter);  }  member=searchFilterSatisfied(searchFilter);  if (debug.messageEnabled()) {    debug.message("LDAPFilterCondition:isMember():" + " caching result, searchFilter:" + searchFilter + ", member:"+ member);  }  if (!PolicyEvaluator.ssoListenerRegistry.containsKey(tokenID)) {    try {      token.addSSOTokenListener(PolicyEvaluator.ssoListener);      SubjectEvaluationCache.addEntry(tokenID,ldapServer,ldapConditionFilter,member);      PolicyEvaluator.ssoListenerRegistry.put(tokenID,PolicyEvaluator.ssoListener);      if (debug.messageEnabled()) {        debug.message("LDAPFilterCondition.isMember(): sso listener added .\n");      }    } catch (    SSOTokenListenersUnsupportedException ex) {      debug.message("LDAPFilterCondition.isMember(): could not add sso listener: {}",ex.getMessage());    }  }  if (debug.messageEnabled()) {    debug.message("LDAPFilterCondition.isMember():" + "member=" + member);  }  return member;}  }
class C{  ModifyDNMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  decodeHeader(scanner,MSG_TYPE_MODIFYDN,MSG_TYPE_MODIFYDN_V1);  if (protocolVersion <= 3) {    decodeBody_V123(scanner,in[0]);  } else {    decodeBody_V4(scanner);  }  if (protocolVersion == ProtocolVersion.getCurrentVersion()) {    bytes=in;  }}  }
class C{  public ZoneOffsetTransition createTransition(int year){  LocalDate date;  if (dom < 0) {    date=LocalDate.of(year,month,month.length(IsoChronology.INSTANCE.isLeapYear(year)) + 1 + dom);    if (dow != null) {      date=date.with(previousOrSame(dow));    }  } else {    date=LocalDate.of(year,month,dom);    if (dow != null) {      date=date.with(nextOrSame(dow));    }  }  if (timeEndOfDay) {    date=date.plusDays(1);  }  LocalDateTime localDT=LocalDateTime.of(date,time);  LocalDateTime transition=timeDefinition.createDateTime(localDT,standardOffset,offsetBefore);  return new ZoneOffsetTransition(transition,offsetBefore,offsetAfter);}  }
class C{  public synchronized AttributeSet removeAttributes(AttributeSet old,AttributeSet attrs){  if (old.getAttributeCount() <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.removeAttributes(attrs);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.removeAttributes(attrs);  return ma;}  }
class C{  public int hashCode(){  return fShape.hashCode();}  }
class C{  private void updateCache(SSOToken token,String dn,Map stringAttributes,Map byteAttributes) throws IdRepoException, SSOException {  IdCacheBlock cb=idRepoCache.getIfPresent(dn);  if (cb != null && !cb.hasExpiredAndUpdated() && cb.isExists()) {    AMIdentity tokenId=IdUtils.getIdentity(token);    String pDN=tokenId.getUniversalId();    cb.replaceAttributes(pDN,stringAttributes,byteAttributes);  }}  }
class C{  private int adjustAlpha(int color,float factor){  int alpha=Math.round(Color.alpha(color) * factor);  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  return Color.argb(alpha,red,green,blue);}  }
class C{  protected String toXML(){  StringBuilder sb=new StringBuilder(100);  sb.append("\n").append(CONDITIONS_ELEMENT_BEGIN).append(XMLUtils.escapeSpecialCharacters(name)).append(CONDITIONS_DESCRIPTION).append(XMLUtils.escapeSpecialCharacters(description)).append("\">");  Iterator items=conditions.keySet().iterator();  while (items.hasNext()) {    String conditionName=(String)items.next();    Condition condition=(Condition)conditions.get(conditionName);    sb.append("\n").append(CONDITION_ELEMENT).append(XMLUtils.escapeSpecialCharacters(conditionName)).append(CONDITION_TYPE).append(XMLUtils.escapeSpecialCharacters(ConditionTypeManager.conditionTypeName(condition))).append("\">");    Map properties=condition.getProperties();    if (properties != null) {      Set keySet=properties.keySet();      Iterator keys=keySet.iterator();      while (keys.hasNext()) {        sb.append("\n").append(ATTR_VALUE_PAIR_BEGIN);        String key=(String)keys.next();        sb.append(ATTR_NAME_BEGIN);        sb.append(quote(XMLUtils.escapeSpecialCharacters(key)));        sb.append(ATTR_NAME_END);        Set valueSet=(Set)properties.get(key);        if ((valueSet != null) && (!valueSet.isEmpty())) {          Iterator values=valueSet.iterator();          while (values.hasNext()) {            String value=(String)values.next();            sb.append(VALUE_BEGIN);            sb.append(XMLUtils.escapeSpecialCharacters(value));            sb.append(VALUE_END);          }        }        sb.append("\n").append(ATTR_VALUE_PAIR_END);      }    }    sb.append("\n").append(CONDITION_ELEMENT_END);  }  sb.append("\n").append(CONDITIONS_ELEMENT_END);  return (sb.toString());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attreffectivevalue.class,args);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureMethodElement createSignatureMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureMethodElementImpl();}  }
class C{  @Override public void run(){  workerThread=currentThread();  while (!shutdownRequested) {    try {      waitingForWork=true;      operation=null;      operation=workQueue.nextOperation(this);      waitingForWork=false;      if (operation == null) {        break;      } else {        operation.run();        operation.operationCompleted();      }    } catch (    Throwable t) {      if (logger.isTraceEnabled()) {        logger.trace("Uncaught exception in worker thread while processing " + "operation %s: %s",operation,t);        logger.traceException(t);      }      try {        LocalizableMessage message=ERR_UNCAUGHT_WORKER_THREAD_EXCEPTION.get(getName(),operation,stackTraceToSingleLineString(t));        logger.error(message);        operation.setResultCode(DirectoryServer.getServerErrorResultCode());        operation.appendErrorMessage(message);        operation.getClientConnection().sendResponse(operation);      } catch (      Throwable t2) {        if (logger.isTraceEnabled()) {          logger.trace("Exception in worker thread while trying to log a " + "message about an uncaught exception %s: %s",t,t2);          logger.traceException(t2);        }      }      try {        LocalizableMessage message=ERR_UNCAUGHT_WORKER_THREAD_EXCEPTION.get(getName(),operation,stackTraceToSingleLineString(t));        operation.disconnectClient(DisconnectReason.SERVER_ERROR,true,message);      } catch (      Throwable t2) {        logger.traceException(t2);      }    }  }  if (stoppedByReducedThreadNumber) {    logger.debug(INFO_WORKER_STOPPED_BY_REDUCED_THREADNUMBER,getName());  } else   if (!workQueue.shutdownRequested()) {    logger.warn(WARN_UNEXPECTED_WORKER_THREAD_EXIT,getName());  }  if (logger.isTraceEnabled()) {    logger.trace(getName() + " exiting.");  }}  }
class C{  public InvalidTagException(Throwable ex){  super(ex);}  }
class C{  public Object put(Object key,Object value){  internalPut((CompositeData)value);  return value;}  }
class C{  @Provides @PerActivity Activity provideActivity(){  return this.activity;}  }
class C{  public OrderService createOrder(Order order,Handler<AsyncResult<Void>> resultHandler){  delegate.createOrder(order,resultHandler);  return this;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentGroupName=getStringOptionValue(IArgument.AGENT_GROUP_NAME);  List agentNames=rc.getOption(IArgument.AGENT_NAMES);  String[] params={realm,agentGroupName,""};  String agentName="";  try {    AMIdentity agentGroup=new AMIdentity(adminSSOToken,agentGroupName,IdType.AGENTGROUP,realm,null);    if (!agentGroup.isExists()) {      Object[] p={agentGroupName};      throw new CLIException(MessageFormat.format(getResourceString("remove-agent-to-group-agent-invalid-group"),p),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    validateAgents(realm,adminSSOToken,agentGroup,agentNames);    for (Iterator i=agentNames.iterator(); i.hasNext(); ) {      agentName=(String)i.next();      params[2]=agentName;      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_AGENT_FROM_GROUP",params);      AMIdentity amid=new AMIdentity(adminSSOToken,agentName,IdType.AGENTONLY,realm,null);      AgentConfiguration.removeAgentGroup(amid,agentGroup);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_AGENT_FROM_GROUP",params);    }    if (agentNames.size() > 1) {      outputWriter.printlnMessage(getResourceString("remove-agent-to-group-succeeded-pural"));    } else {      outputWriter.printlnMessage(getResourceString("remove-agent-to-group-succeeded"));    }  } catch (  IdRepoException e) {    String[] args={realm,agentGroupName,agentName,e.getMessage()};    debugError("RemoveAgentsFromGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_AGENT_FROM_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentGroupName,agentName,e.getMessage()};    debugError("RemoveAgentsFromGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_AGENT_FROM_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,agentGroupName,agentName,e.getMessage()};    debugError("RemoveAgentsFromGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_AGENT_FROM_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  if (!isInlineAlertMessageSet()) {    String flag=(String)getPageSessionAttribute(PAGE_MODIFIED);    if ((flag != null) && flag.equals("1")) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.profile.modified");    }  }}  }
class C{  private void calculate_target_points_and_areas(){  target_points=new LinkedList<IteraTargetPoint>();  target_traces_and_areas=new LinkedList<BrdItem>();  if (target_set == null) {    return;  }  Iterator<BrdItem> it=target_set.iterator();  while (it.hasNext()) {    BrdItem curr_ob=it.next();    if (curr_ob instanceof BrdAbit) {      PlaPointInt curr_point=((BrdAbit)curr_ob).center_get();      target_points.add(new IteraTargetPoint(curr_point.to_float(),curr_ob));    } else     if (curr_ob instanceof BrdTracep || curr_ob instanceof BrdAreaConduction) {      target_traces_and_areas.add(curr_ob);    }  }}  }
class C{  public LDAPURL(String scheme,String host,int port,String rawBaseDN,LinkedHashSet<String> attributes,SearchScope scope,String rawFilter,List<String> extensions){  this.host=toLowerCase(host);  baseDN=null;  filter=null;  if (scheme == null) {    this.scheme="ldap";  } else {    this.scheme=toLowerCase(scheme);  }  this.port=toPort(port);  if (rawBaseDN == null) {    this.rawBaseDN="";  } else {    this.rawBaseDN=rawBaseDN;  }  if (attributes == null) {    this.attributes=new LinkedHashSet<>();  } else {    this.attributes=attributes;  }  if (scope == null) {    this.scope=DEFAULT_SEARCH_SCOPE;  } else {    this.scope=scope;  }  if (rawFilter != null) {    this.rawFilter=rawFilter;  } else {    setFilter(SearchFilter.objectClassPresent());  }  if (extensions == null) {    this.extensions=new LinkedList<>();  } else {    this.extensions=extensions;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("lang");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  assertNull("prevValueNull",newNode);}  }
class C{  public static AsfHeader readInfoHeader(final RandomAccessFile file) throws IOException {  final InputStream stream=createStream(file);  return INFO_READER.read(Utils.readGUID(stream),stream,0);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public RemoteHttpServletResponse(){  super();}  }
class C{  public final void testGetQ(){  DSAParameterSpec dps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertEquals(2,dps.getQ().intValue());}  }
class C{  public BundleHandler(BundleContext systemBundleContext,final String archiveExtension,final LogHandler updateLogger){  this.systemBundleContext=systemBundleContext;  this.archiveExtension=archiveExtension;  this.updateLogger=updateLogger;}  }
class C{  public static boolean isBlank(final String s){  return (s == null || s.trim().length() == 0);}  }
class C{  public ContentLengthOutputStream(final SessionOutputBuffer out,long contentLength){  super();  if (out == null) {    throw new IllegalArgumentException("Session output buffer may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.out=out;  this.contentLength=contentLength;}  }
class C{  public void testCertificateFactory04() throws NoSuchProviderException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  try {    CertificateFactory.getInstance(null,defaultProviderName);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],defaultProviderName);      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(" provider: ").concat(defaultProviderName).concat(")"));    } catch (    CertificateException e) {    }  }}  }
class C{  public static Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_PrevAndNext(fooId,field2,orderByComparator);}  }
class C{  public void createEntityConfig(String realm,EntityConfigElement config) throws SAML2MetaException {  if (debug.messageEnabled()) {    debug.message("SAML2MetaManager.creatEntityConfig: called.");  }  createEntity(realm,null,config);}  }
class C{  public ImmutableList concat(Object elem){  if (elem instanceof java.util.List)   return concat((List<?>)elem);  ImmutableList immList=new ImmutableList(list);  immList.list.add(elem);  return immList;}  }
class C{  public static void reportEnd(String str,Object... param){  writeProgressText(str,param,true);}  }
class C{  public static String wrapText(final String text,int width,final int indent){  if (text == null) {    return "";  }  width-=indent;  final StringBuilder pb=new StringBuilder();  for (int i=0; i < indent; i++) {    pb.append(' ');  }  final String padding=pb.toString();  final StringBuilder buffer=new StringBuilder();  final StringTokenizer lineTokenizer=new StringTokenizer(text,"\r\n",true);  while (lineTokenizer.hasMoreTokens()) {    final String line=lineTokenizer.nextToken();    if ("\r".equals(line) || "\n".equals(line)) {      buffer.append(line);    } else     if (line.length() <= width) {      buffer.append(padding);      buffer.append(line);    } else {      StringBuilder lineBuffer=new StringBuilder();      StringBuilder delimBuffer=new StringBuilder();      final StringTokenizer wordTokenizer=new StringTokenizer(line," ",true);      while (wordTokenizer.hasMoreTokens()) {        final String word=wordTokenizer.nextToken();        if (" ".equals(word)) {          if (lineBuffer.length() > 0) {            delimBuffer.append(word);          }        } else         if (word.length() > width) {          if (lineBuffer.length() > 0) {            buffer.append(padding).append(lineBuffer).append(EOL);            lineBuffer=new StringBuilder();          }          buffer.append(padding);          buffer.append(word);          if (wordTokenizer.hasMoreTokens()) {            wordTokenizer.nextToken();            if (wordTokenizer.hasMoreTokens()) {              buffer.append(EOL);            }          }          if (delimBuffer.length() > 0) {            delimBuffer=new StringBuilder();          }        } else {          final int newLineLength=lineBuffer.length() + delimBuffer.length() + word.length();          if (newLineLength < width) {            lineBuffer.append(delimBuffer).append(word);            if (delimBuffer.length() > 0) {              delimBuffer=new StringBuilder();            }          } else {            buffer.append(padding).append(lineBuffer).append(EOL);            lineBuffer=new StringBuilder();            lineBuffer.append(word);            if (delimBuffer.length() > 0) {              delimBuffer=new StringBuilder();            }          }        }      }      buffer.append(padding);      buffer.append(lineBuffer);    }  }  return buffer.toString();}  }
class C{  public static AddRequest newAddRequest(final DN name){  final Entry entry=new LinkedHashMapEntry().setName(name);  return new AddRequestImpl(entry);}  }
class C{  public boolean isUpgraded(){  return upgraded;}  }
class C{  protected void paint(SynthContext context,Graphics g){  SynthContext accContext=getContext(menuItem,Region.MENU_ITEM_ACCELERATOR);  String prefix=getPropertyPrefix();  Icon checkIcon=style.getIcon(context,prefix + ".checkIcon");  Icon arrowIcon=style.getIcon(context,prefix + ".arrowIcon");  SynthGraphicsUtils.paint(context,accContext,g,checkIcon,arrowIcon,acceleratorDelimiter,defaultTextIconGap,getPropertyPrefix());  accContext.dispose();}  }
class C{  public static NewSuffixOptions createBaseEntry(List<String> baseDNs){  NewSuffixOptions ops=new NewSuffixOptions(baseDNs);  ops.type=Type.CREATE_BASE_ENTRY;  return ops;}  }
class C{  protected String makeLegalForJAAS(final String src){  String result=src;  if (result == null) {    result="other";  }  if (result.startsWith("/")) {    result=result.substring(1);  }  return result;}  }
class C{  public boolean run(){  try {    if (mExecutor.isShutdown() || mExecutor.isTerminated()) {      Log.e(TAG,"Tasker:run - Executor is shutdown");      mExecutor=Executors.newSingleThreadExecutor();    }    for (    Task task : tasks) {      final ThreadRunnable threadRunnable=new ThreadRunnable(task);      final Future future=mExecutor.submit(threadRunnable);      runableMap.put(threadRunnable,future);    }    tasks.clear();  } catch (  Exception RejectedExecutionException) {    Log.e(TAG,"Tasker:run - RejectedExecutionException",RejectedExecutionException);    return false;  }  return true;}  }
class C{  private static void disableLogging(){  LogManager.getLogManager().reset();  Logger.getLogger("").setLevel(Level.OFF);}  }
class C{  private static void doSort(short[] a,int left,int right,short[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        short t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  short[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new short[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    short[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  public ExecutorCompletionService(Executor executor,BlockingQueue<Future<V>> completionQueue){  if (executor == null || completionQueue == null)   throw new NullPointerException();  this.executor=executor;  this.aes=(executor instanceof AbstractExecutorService) ? (AbstractExecutorService)executor : null;  this.completionQueue=completionQueue;}  }
class C{  public static WindowFocusListener remove(WindowFocusListener l,WindowFocusListener oldl){  return (WindowFocusListener)removeInternal(l,oldl);}  }
class C{  public TestCertificate(String diff){  super(TYPE);  this.diff=diff;}  }
class C{  public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value){  if (attribute == null) {    throw new NullPointerException("attribute == null");  }  if (text.isEmpty()) {    throw new IllegalArgumentException("text is empty");  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    attributeMap.put(attribute,ranges);  } else {    ranges.clear();  }  ranges.add(new Range(0,text.length(),value));}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSRegistrationReturnServlet doGetPost...");  String providerAlias="";  providerAlias=FSServiceUtils.getMetaAlias(request);  if (providerAlias == null || providerAlias.length() < 1) {    FSUtils.debug.error("Unable to retrieve alias, Hosted" + " Provider. Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  if (metaManager == null) {    FSUtils.debug.error("Cannot retrieve hosted descriptor. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);  ProviderDescriptorType hostedProviderDesc=null;  BaseConfigType hostedConfig=null;  String hostedEntityId=null;  String hostedProviderRole=null;  try {    hostedProviderRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.IDP)) {      hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);    } else     if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {      hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);    }    if (hostedProviderDesc == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException eam) {    FSUtils.debug.error("Unable to find Hosted Provider. not process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  this.request=request;  setRegistrationURL(hostedConfig,providerAlias);  FSNameRegistrationResponse regisResponse=null;  try {    regisResponse=FSNameRegistrationResponse.parseURLEncodedRequest(request);  } catch (  FSMsgException e) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_REQUEST_IMPROPER,IFSConstants.REGISTRATION_FAILED);    return;  }catch (  SAMLException e) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_REQUEST_IMPROPER,IFSConstants.REGISTRATION_FAILED);    return;  }  String remoteEntityId=regisResponse.getProviderId();  ProviderDescriptorType remoteDesc=null;  boolean isIDP=false;  try {    if (hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {      remoteDesc=metaManager.getIDPDescriptor(realm,remoteEntityId);      isIDP=true;    } else {      remoteDesc=metaManager.getSPDescriptor(realm,remoteEntityId);    }  } catch (  IDFFMetaException e) {    FSUtils.debug.error("FSRegistrationReturnServlet:",e);  }  if (remoteDesc == null) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_REQUEST_IMPROPER,IFSConstants.REGISTRATION_FAILED);    return;  }  boolean bVerify=true;  try {    if (FSServiceUtils.isSigningOn()) {      bVerify=verifyResponseSignature(request,remoteDesc,remoteEntityId,isIDP);    }  } catch (  SAMLException e) {    bVerify=false;  }catch (  FSException e) {    bVerify=false;  }  if (bVerify) {    FSNameRegistrationHandler handlerObj=new FSNameRegistrationHandler();    handlerObj.setHostedDescriptor(hostedProviderDesc);    handlerObj.setHostedDescriptorConfig(hostedConfig);    handlerObj.setHostedEntityId(hostedEntityId);    handlerObj.setHostedProviderRole(hostedProviderRole);    handlerObj.setMetaAlias(providerAlias);    handlerObj.setRemoteEntityId(remoteEntityId);    handlerObj.setRemoteDescriptor(remoteDesc);    handlerObj.setRealm(realm);    handlerObj.processRegistrationResponse(request,response,regisResponse);    return;  } else {    FSUtils.debug.error("FSRegistrationReturnServlet " + "Signature on registration request is invalid" + "Cannot proceed name registration");    String[] data={FSUtils.bundle.getString(IFSConstants.REGISTRATION_INVALID_SIGNATURE)};    LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data);    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_REQUEST_IMPROPER,IFSConstants.REGISTRATION_FAILED);    return;  }}  }
class C{  private static Document parseXmlFromBytebuffer(ByteBuffer buffer,ParseOptions options) throws XMPException {  InputSource source=new InputSource(buffer.getByteStream());  try {    return parseInputSource(source);  } catch (  XMPException e) {    if (e.getErrorCode() == XMPError.BADXML || e.getErrorCode() == XMPError.BADSTREAM) {      if (options.getAcceptLatin1()) {        buffer=Latin1Converter.convert(buffer);      }      if (options.getFixControlChars()) {        try {          String encoding=buffer.getEncoding();          Reader fixReader=new FixASCIIControlsReader(new InputStreamReader(buffer.getByteStream(),encoding));          return parseInputSource(new InputSource(fixReader));        } catch (        UnsupportedEncodingException e1) {          throw new XMPException("Unsupported Encoding",XMPError.INTERNALFAILURE,e);        }      }      source=new InputSource(buffer.getByteStream());      return parseInputSource(source);    } else {      throw e;    }  }}  }
class C{  public BYTE_ARRAY(String mimeType){  super(mimeType,"[B");}  }
class C{  private boolean processPreOperation(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      if (!processOperationResult(this,provider.doPreOperation(this))) {        return false;      }    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_MODIFY_SYNCH_PREOP_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return false;    }  }  return true;}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean isStableNumber(){  return true;}  }
class C{  public boolean canStripWhiteSpace(){  return (null != m_whiteSpaceInfoList);}  }
class C{  public PdfCanvas endLayer(){  int num;  if (layerDepth != null && !layerDepth.isEmpty()) {    num=(int)layerDepth.get(layerDepth.size() - 1);    layerDepth.remove(layerDepth.size() - 1);  } else {    throw new PdfException(PdfException.UnbalancedLayerOperators);  }  while (num-- > 0)   contentStream.getOutputStream().writeBytes(EMC).writeNewLine();  return this;}  }
class C{  public static FastJsonConverterFactory create(){  return new FastJsonConverterFactory();}  }
class C{  public static void main(String[] args){  FancyLoader loader;  loader=new FancyLoader(ClassLoader.getSystemClassLoader());  System.out.println("base: " + DoubledImplement.class);  System.out.println("base2: " + DoubledImplement2.class);  testAccess1(loader);  testAccess2(loader);  testAccess3(loader);  testExtend(loader);  testExtendOkay(loader);  testInterface(loader);  testAbstract(loader);  testImplement(loader);  testIfaceImplement(loader);}  }
class C{  public void test_setLenientZ(){  DateFormat df=DateFormat.getInstance();  Calendar c=df.getCalendar();  try {    c.setLenient(true);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);    } catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }    c.setLenient(false);    try {      c.set(Calendar.DAY_OF_MONTH,32);      c.get(Calendar.DAY_OF_MONTH);      fail("Expected IllegalArgumentException was not thrown");    } catch (    IllegalArgumentException e) {    }catch (    Exception e) {      fail("Unexpected exception " + e.toString());    }  } catch (  Exception e) {    fail("Uexpected exception " + e.toString());  }}  }
class C{  private static Class<?> loadAndInitializeInvokerClass(byte[] classBytes,Object[] patches){  Class<?> invokerClass=UNSAFE.defineAnonymousClass(HOST_CLASS,classBytes,patches);  UNSAFE.ensureClassInitialized(invokerClass);  return invokerClass;}  }
class C{  @Override public HijrahDate dateEpochDay(long epochDay){  return HijrahDate.ofEpochDay(this,epochDay);}  }
class C{  @Override public String toString(){  return toLDIFString();}  }
class C{  private Connection checkState(){  if (isClosed()) {    throw new IllegalStateException();  }  return connection;}  }
class C{  public static Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_PrevAndNext(fooId,field2,orderByComparator);}  }
class C{  public void _write(OutputStream output){  output.write_any(value);}  }
class C{  public static void error(Level level,String msgid,String data[],Object session){  error(level,msgid,data,session,null);}  }
class C{  @Override public void sendRedirect(String location) throws IOException {  if (!included)   ((HttpServletResponse)getResponse()).sendRedirect(location);}  }
class C{  public DTMNamedNodeMap(DTM dtm,int element){  this.dtm=dtm;  this.element=element;}  }
class C{  @SuppressWarnings("ConstantConditions") public CodeStream putUtf8(final String s){  final int charLength=s.length();  ensureCapacity(2 + charLength);  final int originalLength=_length;  _data[_length++]=(byte)(charLength >>> 8);  _data[_length++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      _data[_length++]=(byte)c;    } else {      int byteLength=i;      for (int j=i; j < charLength; ++j) {        c=s.charAt(j);        if (c >= '\001' && c <= '\177') {          byteLength++;        } else         if (c > '\u07FF') {          byteLength+=3;        } else {          byteLength+=2;        }      }      _data[originalLength]=(byte)(byteLength >>> 8);      _data[originalLength + 1]=(byte)byteLength;      ensureCapacity(2 + byteLength);      for (int j=i; j < charLength; ++j) {        c=s.charAt(j);        if (c >= '\001' && c <= '\177') {          _data[_length++]=(byte)c;        } else         if (c > '\u07FF') {          _data[_length++]=(byte)(0xE0 | c >> 12 & 0xF);          _data[_length++]=(byte)(0x80 | c >> 6 & 0x3F);          _data[_length++]=(byte)(0x80 | c & 0x3F);        } else {          _data[_length++]=(byte)(0xC0 | c >> 6 & 0x1F);          _data[_length++]=(byte)(0x80 | c & 0x3F);        }      }      break;    }  }  return this;}  }
class C{  @Override public void end(String namespace,String name) throws Exception {  digester.pop();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docAlt;  Element element;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staffNS",true);  docAlt=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","elem1");  attribute=docAlt.createAttributeNS("http://www.w3.org/DOM/Test","attr");{    boolean success=false;    try {      newAttribute=element.setAttributeNodeNS(attribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  @Override public boolean onPreparePanel(final int featureId,final View view,final Menu menu){  return delegate.onPreparePanel(featureId,view,menu);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  void writeSlot(int position,int w0,int w1,int w2,int w3){  position*=slotsize;  int chunkpos=position >> lowbits;  int slotpos=(position & lowmask);  if (chunkpos > chunks.size() - 1)   chunks.addElement(new int[chunkalloc]);  int[] chunk=chunks.elementAt(chunkpos);  chunk[slotpos]=w0;  chunk[slotpos + 1]=w1;  chunk[slotpos + 2]=w2;  chunk[slotpos + 3]=w3;}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public static boolean checkAlarmService(Context context,PendingIntent servicePendingIntent){  final Intent i=new Intent(context,GithubWidgetService.class);  return PendingIntent.getService(context,0,i,PendingIntent.FLAG_NO_CREATE) != null;}  }
class C{  public static String asString(final InputStream is,Charset charset) throws IOException {  try (BufferedReader reader=new BufferedReader(new InputStreamReader(is,charset))){    final String firstLine=reader.readLine();    if (firstLine == null) {      return "";    }    final StringBuilder builder=new StringBuilder(firstLine);    for (String line=reader.readLine(); line != null; line=reader.readLine()) {      builder.append(EOL);      builder.append(line);    }    return builder.toString();  } }  }
class C{  static <T>void all(Promise<T> parent,Promise<T>[] childPromises){  final AtomicInteger count=new AtomicInteger(childPromises.length);  final AtomicBoolean done=new AtomicBoolean();  final Consumer<Promise<T>> consumer=null;  for (  Promise<T> childPromise : childPromises) {    childPromise.whenComplete(consumer);  }}  }
class C{  static public void assertEquals(char expected,char actual){  assertEquals(null,expected,actual);}  }
class C{  @Override public int hashCode(){  return getClass().hashCode() ^ getId().hashCode();}  }
class C{  public boolean isMarked(){  return pair.mark;}  }
class C{  public void testMinPosZero(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 0);}  }
class C{  public void printStackTrace(){  printStackTrace(System.err);}  }
class C{  public void testMatchLjava_security_cert_X509CRL(){  X509CRLSelector selector=new X509CRLSelector();  assertFalse("The null object should not match",selector.match((X509CRL)null));}  }
class C{  static public boolean hasList(SIPHeader sipHeader){  if (sipHeader instanceof SIPHeaderList)   return false; else {    Class<?> headerClass=sipHeader.getClass();    return headerListTable.get(headerClass) != null;  }}  }
class C{  protected void send(ClusterManager manager,String sessionId){  ClusterMessage msg=manager.requestCompleted(sessionId);  if (msg != null && cluster != null) {    cluster.send(msg);    if (doStatistics()) {      nrOfSendRequests++;    }  }}  }
class C{  public BERSet(){}  }
class C{  public String toXMLString() throws FSMsgException {  String xml=this.toXMLString(true,false);  return xml;}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  protected void parseDOMChileElements(ListIterator iter) throws SAML2Exception {  super.parseDOMChileElements(iter);  AssertionFactory assertionFactory=AssertionFactory.getInstance();  while (iter.hasNext()) {    Element childElement=(Element)iter.next();    String localName=childElement.getLocalName();    if (SAML2Constants.ATTRIBUTE.equals(localName)) {      if (attributes == null) {        attributes=new ArrayList();      }      attributes.add(assertionFactory.createAttribute(childElement));    } else {      iter.previous();    }  }}  }
class C{  public synchronized void removeActionListener(ActionListener l){  if (l == null) {    return;  }  actionListener=AWTEventMulticaster.remove(actionListener,l);}  }
class C{  PropertyRoleCalculator(String userRoles){  this.userRoles=userRoles;}  }
class C{  public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  public Set createSubOrganizationalUnits(Map subOrganizationalUnitsMap) throws AMException, SSOException {  Iterator iter=subOrganizationalUnitsMap.keySet().iterator();  Set subOrgUnits=new HashSet();  while (iter.hasNext()) {    String subOrgUnitName=(String)iter.next();    String subOrgUnitDN=AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT) + "=" + subOrgUnitName+ ","+ super.entryDN;    Map attributes=(Map)subOrganizationalUnitsMap.get(subOrgUnitName);    AMOrganizationalUnitImpl subOrgUnitImpl=new AMOrganizationalUnitImpl(super.token,subOrgUnitDN);    subOrgUnitImpl.setAttributes(attributes);    subOrgUnitImpl.create();    subOrgUnits.add(subOrgUnitImpl);  }  return subOrgUnits;}  }
class C{  private boolean verifyTerminationSignature(HttpServletRequest request,ProviderDescriptorType remoteDescriptor,String remoteEntityId,boolean isIDP) throws SAMLException, FSException {  FSUtils.debug.message("Entered FSTerminationRequestServlet::verifyTerminationSignature");  X509Certificate cert=KeyUtil.getVerificationCert(remoteDescriptor,remoteEntityId,isIDP);  if (cert == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFedTerminationRequestServlet.verifyTerminationSignature:" + "couldn't obtain this site's cert .");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT));  }  boolean isValidSign=FSSignatureUtil.verifyRequestSignature(request,cert);  if (!isValidSign) {    FSUtils.debug.error("Termination request is not properly signed");    return false;  } else {    FSUtils.debug.message("Termination request is properly signed");    return true;  }}  }
class C{  public PolicyEvaluationException(String message){  super(message);  reqId="-1";}  }
class C{  private void readRemoteEntry(String[] referral) throws SearchAbandonException {  LDAPConnectionPool connectionPool=controller.getConnectionPool();  LDAPURL url=null;  SearchResultEntry entry=null;  DN remoteDn=null;  Exception lastException=null;  Object lastExceptionArg=null;  int i=0;  while (i < referral.length && entry == null) {    ConnectionWithControls conn=null;    try {      url=LDAPURL.decode(referral[i],false);      if (url.getHost() == null) {        ConnectionWrapper userConn=controller.getUserDataConnection().getConnectionWrapper();        HostPort hostPort=userConn.getHostPort();        url.setHost(hostPort.getHost());        url.setPort(hostPort.getPort());        url.setScheme(userConn.isLdaps() ? "ldaps" : "ldap");      }      conn=connectionPool.getConnection(url);      remoteDn=DN.valueOf(url.getRawBaseDN());      if (remoteDn == null || "".equals(remoteDn)) {        if (remoteEntry != null) {          remoteDn=remoteEntry.getName();        } else {          remoteDn=localEntry.getName();        }        url=new LDAPURL(url.getScheme(),url.getHost(),url.getPort(),remoteDn.toString(),url.getAttributes(),url.getScope(),url.getRawFilter(),url.getExtensions());      }      if (useCustomFilter() && url.getScope() == SearchScope.BASE_OBJECT) {        searchForCustomFilter(remoteDn,conn);      }      Filter filter=getFilter(url);      SearchRequest request=newSearchRequest(remoteDn,url.getScope(),filter,controller.getAttrsForBlackSearch()).setSizeLimit(controller.getMaxChildren());      try (ConnectionEntryReader sr=conn.search(request)){        boolean found=false;        while (sr.hasNext()) {          entry=sr.readEntry();          if (entry.getName().isRootDN()) {            entry.setName(remoteDn);          }          found=true;        }        if (!found) {          throw newLdapException(NO_SUCH_OBJECT);        }      } catch (      LdapException e) {        if (e.getResult().getResultCode() == ResultCode.SIZE_LIMIT_EXCEEDED) {        } else {          throw e;        }      }      throwAbandonIfNeeded(null);    } catch (    IOException|LocalizedIllegalArgumentException|DirectoryException x) {      lastException=x;      lastExceptionArg=referral[i];    } finally {      if (conn != null) {        connectionPool.releaseConnection(conn);      }    }    i=i + 1;  }  if (entry == null) {    throw new SearchAbandonException(State.FAILED,lastException,lastExceptionArg);  }  if (url.getScope() != SearchScope.BASE_OBJECT) {    url=new LDAPURL(url.getScheme(),url.getHost(),url.getPort(),entry.getName(),url.getAttributes(),SearchScope.BASE_OBJECT,null,url.getExtensions());  }  checkLoopInReferral(url,referral[i - 1]);  remoteUrl=url;  remoteEntry=entry;}  }
class C{  public FSPreLoginException(String errorCode,Object[] args){  super(errorCode,args);}  }
class C{  public synchronized BufferedImage createScreenCapture(Rectangle screenRect){  checkScreenCaptureAllowed();  checkValidRect(screenRect);  BufferedImage image;  DataBufferInt buffer;  WritableRaster raster;  if (screenCapCM == null) {    screenCapCM=new DirectColorModel(24,0x00FF0000,0x0000FF00,0x000000FF);  }  Toolkit.getDefaultToolkit().sync();  int pixels[];  int[] bandmasks=new int[3];  pixels=peer.getRGBPixels(screenRect);  buffer=new DataBufferInt(pixels,pixels.length);  bandmasks[0]=screenCapCM.getRedMask();  bandmasks[1]=screenCapCM.getGreenMask();  bandmasks[2]=screenCapCM.getBlueMask();  raster=Raster.createPackedRaster(buffer,screenRect.width,screenRect.height,screenRect.width,bandmasks,null);  SunWritableRaster.makeTrackable(buffer);  image=new BufferedImage(screenCapCM,raster,false,null);  return image;}  }
class C{  public PropertySet(){}  }
class C{  public HttpVersion(int major,int minor){  super(HTTP,major,minor);}  }
class C{  private boolean isPropertyTrue(String propertyName){  return "true".equalsIgnoreCase(getProperty(propertyName));}  }
class C{  public ContextName(String path,String version){  if (path == null || "/".equals(path) || "/ROOT".equals(path)) {    this.path="";  } else {    this.path=path;  }  if (version == null) {    this.version="";  } else {    this.version=version;  }  if ("".equals(this.version)) {    name=this.path;  } else {    name=this.path + VERSION_MARKER + this.version;  }  StringBuilder tmp=new StringBuilder();  if ("".equals(this.path)) {    tmp.append(ROOT_NAME);  } else {    tmp.append(this.path.substring(1).replaceAll("/",FWD_SLASH_REPLACEMENT));  }  if (this.version.length() > 0) {    tmp.append(VERSION_MARKER);    tmp.append(this.version);  }  this.baseName=tmp.toString();}  }
class C{  SOAPMessage toSOAPMessage() throws SOAPBindingException {  return Utils.DocumentToSOAPMessage(toDocument(true));}  }
class C{  public ResponseProviderEditViewBean(){  super("ResponseProviderEdit",DEFAULT_DISPLAY_URL);}  }
class C{  private static String translateArchNameToFolderName(String archName){  return archName.replaceAll("\\W","");}  }
class C{  public ManagedRole(CreationTemplate template,AttrSet attrSet) throws UMSException {  super(template,attrSet);}  }
class C{  public static void println(char[] o){  System.out.println(o);}  }
class C{  @Override public String toString(){  return holder.toString();}  }
class C{  public CipherOutputStream(OutputStream os,StreamCipher cipher){  super(os);  this.streamCipher=cipher;}  }
class C{  public void show(){  if (isVisible()) {    return;  }  if (!opened) {    fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_OPENED);    opened=true;  }  getDesktopIcon().setVisible(true);  toFront();  super.show();  if (isIcon) {    return;  }  if (!isSelected()) {    try {      setSelected(true);    } catch (    PropertyVetoException pve) {    }  }}  }
class C{  public DomainLoadStoreParameter(URI configuration,Map<String,ProtectionParameter> protectionParams){  if (configuration == null || protectionParams == null) {    throw new NullPointerException("invalid null input");  }  this.configuration=configuration;  this.protectionParams=Collections.unmodifiableMap(new HashMap<>(protectionParams));}  }
class C{  public String toString(){  return str();}  }
class C{  private boolean check_leaving_ripped_item(MazeListElement p_list_element){  if (!(p_list_element.door instanceof ExpandDoor))   return false;  ExpandDoor curr_door=(ExpandDoor)p_list_element.door;  ExpandRoomComplete from_room=curr_door.other_room_complete(p_list_element.next_room);  if (!(from_room instanceof ExpandRoomObstacle))   return false;  BrdItem curr_item=((ExpandRoomObstacle)from_room).get_item();  if (!curr_item.is_route())   return false;  return enter_through_small_door(p_list_element,curr_item);}  }
class C{  public Polyline(PlaLineIntAlist p_lines_list){  int have_len=p_lines_list.size();  lines_list=new ArrayList<PlaLineInt>(have_len);  if (have_len < 3) {    Stat.instance.userPrintln(null,new IllegalArgumentException("IntLine A < 3"));    return;  }  PlaLineInt ref_line=p_lines_list.get(0);  lines_list.add(ref_line);  for (int index=1; index < have_len; ++index) {    PlaLineInt a_line=p_lines_list.get(index);    if (ref_line.is_parallel(a_line))     continue;    lines_list.add(a_line);    ref_line=a_line;  }  corners_allocate(corner_count());  if (plaline_len() < 3) {    Stat.instance.userPrintln(null,new IllegalArgumentException("IntLine B < 3"));    return;  }  corner_approx_arr();  adjust_direction();}  }
class C{  private void checkNotParsing(String type,String name) throws SAXNotSupportedException {  if (parsing) {    throw new SAXNotSupportedException("Cannot change " + type + ' '+ name+ " while parsing");  }}  }
class C{  public void test_socket_getLocalPort() throws IOException {  serverChannel.socket().bind(localAddr1);  clientChannel.connect(localAddr1);  SocketChannel myChannel=serverChannel.accept();  int port=myChannel.socket().getLocalPort();  assertEquals(localAddr1.getPort(),port);  myChannel.close();  clientChannel.close();  serverChannel.close();}  }
class C{  @NonNull public final Agera take(long limit){  return new AgeraTake(this,limit);}  }
class C{  public LibPackagePin(String p_name,int p_padstack_no,PlaVectorInt p_relative_location,int p_rotation_in_degree){  name=p_name;  padstack_no=p_padstack_no;  relative_location=p_relative_location;  rotation_in_degree=p_rotation_in_degree;}  }
class C{  public ELException(){  super();}  }
class C{  void addResourcePrefixes(String serviceTypeName,Set resourcePrefixes) throws PolicyException {  ServiceConfig resources=getResourcesServiceConfig(true);  if (resources == null) {    return;  }  ServiceConfig leafConfig=null;  try {    leafConfig=resources.getSubConfig(serviceTypeName);  } catch (  SMSException e1) {    throw new PolicyException(e1);  }catch (  SSOException e1) {    throw (new PolicyException(ResBundleUtils.rbName,"invalid_sso_token",null,null));  }  if (leafConfig == null) {    try {      Map newAttrs=new HashMap();      Set newSet=new HashSet();      Map prefixMap=addResourcePrefixes(resourcePrefixes,new HashMap());      newSet.clear();      newSet.add(resourcePrefixesToXml(prefixMap));      newAttrs.put(RESOURCE_PREFIXES,newSet);      resources.addSubConfig(serviceTypeName,PolicyManager.RESOURCES_POLICY_ID,0,newAttrs);    } catch (    SMSException e2) {      throw new PolicyException(e2);    }catch (    SSOException e) {      throw (new PolicyException(ResBundleUtils.rbName,"invalid_sso_token",null,null));    }    return;  }  Map existingAttrs=null;  existingAttrs=leafConfig.getAttributes();  if ((existingAttrs == null) || (!existingAttrs.containsKey(RESOURCE_PREFIXES))) {    try {      Set newSet=new HashSet();      Map prefixMap=addResourcePrefixes(resourcePrefixes,new HashMap());      newSet.clear();      newSet.add(resourcePrefixesToXml(prefixMap));      leafConfig.addAttribute(RESOURCE_PREFIXES,newSet);    } catch (    SMSException e4) {      throw new PolicyException(e4);    }catch (    SSOException e) {      throw (new PolicyException(ResBundleUtils.rbName,"invalid_sso_token",null,null));    }    return;  }  Set existingRes=(Set)existingAttrs.get(RESOURCE_PREFIXES);  try {    Map newAttrs=new HashMap();    Map prefixMap=null;    if ((existingRes != null) && (!existingRes.isEmpty())) {      String prefixXml=(String)(existingRes.iterator().next());      prefixMap=xmlToResourcePrefixes(prefixXml);    } else {      prefixMap=new HashMap();    }    prefixMap=addResourcePrefixes(resourcePrefixes,prefixMap);    Set newSet=new HashSet(1);    newSet.add(resourcePrefixesToXml(prefixMap));    newAttrs.put(RESOURCE_PREFIXES,newSet);    leafConfig.setAttributes(newAttrs);  } catch (  SMSException e5) {    throw new PolicyException(e5);  }catch (  SSOException e) {    throw (new PolicyException(ResBundleUtils.rbName,"invalid_sso_token",null,null));  }}  }
class C{  public static SAML2Config marshalFromAttributeMap(Map<String,Set<String>> smsAttributeMap){  Set<String> issuerName=smsAttributeMap.get(ISSUER_NAME);  if (CollectionUtils.isEmpty(issuerName)) {    return null;  }  Map<String,Object> jsonAttributes=MapMarshallUtils.toJsonValueMap(smsAttributeMap);  jsonAttributes.remove(ATTRIBUTE_MAP);  Set<String> attributes=smsAttributeMap.get(ATTRIBUTE_MAP);  Map<String,Object> jsonAttributeMap=new LinkedHashMap<>();  for (  String entry : attributes) {    String[] breakdown=entry.split(EQUALS);    jsonAttributeMap.put(breakdown[0],breakdown[1]);  }  jsonAttributes.put(ATTRIBUTE_MAP,new JsonValue(jsonAttributeMap));  return fromJson(new JsonValue(jsonAttributes));}  }
class C{  public PdfObject put(PdfName key,PdfObject value){  assert value != null;  return map.put(key,value);}  }
class C{  public PrivilegeSet fromXACML(PolicySet policySet) throws EntitlementException {  PrivilegeSet privilegeSet=new PrivilegeSet();  try {    if (policySet == null) {      return privilegeSet;    }    Map<String,Application> applicationMap=new HashMap<>();    for (    Policy policy : getPoliciesFromPolicySet(policySet)) {      if (isReferralPolicy(policy)) {        privilegeSet.addReferralPrivilege(policyToReferral(policy));        continue;      }      String applicationName=getApplicationNameFromPolicy(policy);      Application application=applicationMap.get(applicationName);      if (application == null) {        application=policyToApplication(policy);        applicationMap.put(applicationName,application);        privilegeSet.addApplication(application);      }      ResourceType resourceType=createResourceType(applicationName,null,getResourceNamesFromPolicy(policy),getActionValuesFromPolicy(policy),generateResourceTypeDummyUuid());      privilegeSet.addResourceType(resourceType);      Privilege privilege=policyToPrivilege(policy);      privilegeSet.addPrivilege(privilege);      application.addResourceTypeUuid(resourceType.getUUID());      privilege.setResourceTypeUuid(resourceType.getUUID());    }    return privilegeSet;  } catch (  JSONException e) {    throw new EntitlementException(JSON_PARSE_ERROR,e);  }}  }
class C{  static public XObject create(Object val,XPathContext xctxt){  return XObjectFactory.create(val,xctxt);}  }
class C{  public static boolean isRelayStateURLValid(String metaAlias,String relayState,String role){  boolean result=false;  if (metaAlias != null) {    String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);    try {      String hostEntityID=saml2MetaManager.getEntityByMetaAlias(metaAlias);      if (hostEntityID != null) {        validateRelayStateURL(realm,hostEntityID,relayState,role);        result=true;      }    } catch (    SAML2Exception e) {      if (debug.messageEnabled()) {        debug.message("SAML2Utils.isRelayStateURLValid(): relayState " + relayState + " for role "+ role+ " triggered an exception: "+ e.getMessage(),e);      }      result=false;    }  }  if (debug.messageEnabled()) {    debug.message("SAML2Utils.isRelayStateURLValid(): relayState " + relayState + " for role "+ role+ " was valid? "+ result);  }  return result;}  }
class C{  public ClassCastException(String s){  super(s);}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public UnavailableException(String msg,int seconds){  super(msg);  if (seconds <= 0)   this.seconds=-1; else   this.seconds=seconds;  servlet=null;  permanent=false;}  }
class C{  @Override public void recycle(){  contentLength=-1;  remaining=0;  endChunk.recycle();}  }
class C{  protected byte[] BuildNewIndex(int[] Offsets,Map<Integer,int[]> Used,byte OperatorForUnusedEntries) throws java.io.IOException {  int unusedCount=0;  int Offset=0;  int[] NewOffsets=new int[Offsets.length];  for (int i=0; i < Offsets.length; ++i) {    NewOffsets[i]=Offset;    if (Used.containsKey(i)) {      Offset+=Offsets[i + 1] - Offsets[i];    } else {      unusedCount++;    }  }  byte[] NewObjects=new byte[Offset + unusedCount];  int unusedOffset=0;  for (int i=0; i < Offsets.length - 1; ++i) {    int start=NewOffsets[i];    int end=NewOffsets[i + 1];    NewOffsets[i]=start + unusedOffset;    if (start != end) {      buf.seek(Offsets[i]);      buf.readFully(NewObjects,start + unusedOffset,end - start);    } else {      NewObjects[start + unusedOffset]=OperatorForUnusedEntries;      unusedOffset++;    }  }  NewOffsets[Offsets.length - 1]+=unusedOffset;  return AssembleIndex(NewOffsets,NewObjects);}  }
class C{  public void dispose(){  Container root=getRoot();  if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {    LOGGER.finer("disposed BufferInfo for: " + root);  }  if (root != null) {    root.removeComponentListener(this);    if (root instanceof Window) {      ((Window)root).removeWindowListener(this);    }    BufferStrategy bs=getBufferStrategy(false);    if (bs != null) {      bs.dispose();    }  }  this.root=null;  weakBS=null;}  }
class C{  public static void convertJAXBToOutputStream(Object jaxbObj,OutputStream os) throws JAXBException {  Marshaller marshaller=jaxbContext.createMarshaller();  marshaller.setProperty(PROP_JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  marshaller.setProperty(PROP_NAMESPACE_PREFIX_MAPPER,nsPrefixMapper);  marshaller.marshal(jaxbObj,os);}  }
class C{  public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  public LengthBasedPasswordValidator(){  super();}  }
class C{  public static synchronized void clearHyphenationTreeCache(){  hTreeCache=new HyphenationTreeCache();}  }
class C{  int validateGlobalOptions(LocalizableMessageBuilder buf){  final List<LocalizableMessage> errors=new ArrayList<>();  addErrorMessageIfArgumentsConflict(errors,bindPasswordArg,bindPasswordFileArg);  addErrorMessageIfArgumentsConflict(errors,trustAllArg,trustStorePathArg);  addErrorMessageIfArgumentsConflict(errors,trustAllArg,trustStorePasswordArg);  addErrorMessageIfArgumentsConflict(errors,trustAllArg,trustStorePasswordFileArg);  addErrorMessageIfArgumentsConflict(errors,trustStorePasswordArg,trustStorePasswordFileArg);  addErrorMessageIfArgumentsConflict(errors,useStartTLSArg,useSSLArg);  checkIfPathArgumentIsReadable(errors,trustStorePathArg,ERR_CANNOT_READ_TRUSTSTORE);  checkIfPathArgumentIsReadable(errors,keyStorePathArg,ERR_CANNOT_READ_KEYSTORE);  if (!errors.isEmpty()) {    for (    LocalizableMessage error : errors) {      if (buf.length() > 0) {        buf.append(LINE_SEPARATOR);      }      buf.append(error);    }    return CONFLICTING_ARGS.get();  }  return SUCCESS.get();}  }
class C{  public JPopupMenu(String label){  this.label=label;  lightWeightPopup=getDefaultLightWeightPopupEnabled();  setSelectionModel(new DefaultSingleSelectionModel());  enableEvents(AWTEvent.MOUSE_EVENT_MASK);  setFocusTraversalKeysEnabled(false);  updateUI();}  }
class C{  public static byte[] toBytes(int n,byte[] b,int offset){  b[offset + 3]=(byte)(n);  n>>>=8;  b[offset + 2]=(byte)(n);  n>>>=8;  b[offset + 1]=(byte)(n);  n>>>=8;  b[offset + 0]=(byte)(n);  return b;}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});  return 0.0;}  }
class C{  private static boolean isAlphanum(char p_char){  return (isAlpha(p_char) || isDigit(p_char));}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.SelectType createSelectType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.SelectTypeImpl();}  }
class C{  public boolean isWhitespaceInElementContent(){  return false;}  }
class C{  public void save(ObjectOutputStream p_object_stream){  try {    WindowSavedAttributes saved_attributes=new WindowSavedAttributes(this.getBounds(),this.isVisible());    p_object_stream.writeObject(saved_attributes);  } catch (  java.io.IOException e) {    System.err.println("BoardSubWindow.save: save failed");  }}  }
class C{  public Pnt isOn(Pnt[] simplex){  int[] result=this.relation(simplex);  Pnt witness=null;  for (int i=0; i < result.length; i++) {    if (result[i] == 0)     witness=simplex[i]; else     if (result[i] > 0)     return null;  }  return witness;}  }
class C{  protected final static Class<?> tryToLoadClass(String className,ClassLoader fallback) throws ClassNotFoundException {  ReflectUtil.checkPackageAccess(className);  try {    SecurityManager sm=System.getSecurityManager();    if (sm != null) {      sm.checkPermission(GET_CLASSLOADER_PERMISSION);    }    ClassLoader loader=ClassLoader.getSystemClassLoader();    try {      return Class.forName(className,true,loader);    } catch (    ClassNotFoundException exception) {      loader=Thread.currentThread().getContextClassLoader();      if (loader != null) {        try {          return Class.forName(className,true,loader);        } catch (        ClassNotFoundException e) {        }      }    }  } catch (  SecurityException exception) {  }  return Class.forName(className,true,fallback);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String prefix;  String namespace;  String methName;  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  if (indexOfNSSep < 0) {    prefix="";    namespace=Constants.S_XSLNAMESPACEURL;    methName=fullName;  } else {    prefix=fullName.substring(0,indexOfNSSep);    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    if (null == namespace)     return XBoolean.S_FALSE;    methName=fullName.substring(indexOfNSSep + 1);  }  if (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL)) {    try {      TransformerImpl transformer=(TransformerImpl)xctxt.getOwnerObject();      return transformer.getStylesheet().getAvailableElements().containsKey(new QName(namespace,methName)) ? XBoolean.S_TRUE : XBoolean.S_FALSE;    } catch (    Exception e) {      return XBoolean.S_FALSE;    }  } else {    ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();    return extProvider.elementAvailable(namespace,methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;  }}  }
class C{  @Override public synchronized boolean allocate(){  if (state == PooledObjectState.IDLE) {    state=PooledObjectState.ALLOCATED;    lastBorrowTime=System.currentTimeMillis();    lastUseTime=lastBorrowTime;    borrowedCount++;    if (logAbandoned) {      borrowedBy=new AbandonedObjectCreatedException();    }    return true;  } else   if (state == PooledObjectState.EVICTION) {    state=PooledObjectState.EVICTION_RETURN_TO_HEAD;    return false;  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.CorrelationType createCorrelationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.CorrelationTypeImpl();}  }
class C{  public ObjectInUseException(String msg,String name,Object user){  super(msg);  this.name=name;  this.user=user;}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  public ECPResponse createECPResponse(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RESPONSE,value);  if (obj == null) {    return new ECPResponseImpl(value);  } else {    return (ECPResponse)obj;  }}  }
class C{  public static int hash32(final byte[] data,int length,int seed){  final int m=0x5bd1e995;  final int r=24;  int h=seed ^ length;  int length4=length / 4;  for (int i=0; i < length4; i++) {    final int i4=i * 4;    int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }switch (length % 4) {case 3:    h^=(data[(length & ~3) + 2] & 0xff) << 16;case 2:  h^=(data[(length & ~3) + 1] & 0xff) << 8;case 1:h^=(data[length & ~3] & 0xff);h*=m;}h^=h >>> 13;h*=m;h^=h >>> 15;return h;}  }
class C{  public WebServiceException(String message){  super(message);}  }
class C{  public void paintToolTipBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public synchronized void addHostAlias(String name,String alias){  MappedHost realHost=exactFind(hosts,name);  if (realHost == null) {    return;  }  alias=renameWildcardHost(alias);  MappedHost newAlias=new MappedHost(alias,realHost);  if (addHostAliasImpl(newAlias)) {    realHost.addAlias(newAlias);  }}  }
class C{  public PluginResult.PostOperation invokePostOperationModifyPlugins(PostOperationModifyOperation modifyOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(modifyOperation);  for (  DirectoryServerPlugin p : postOperationModifyPlugins) {    if (isInternalOperation(modifyOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(modifyOperation);    } catch (    Exception e) {      logException(modifyOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(modifyOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public void loadIfNecessary(){  if (marker == null) {    JEdit.loadMode(this);    if (marker == null)     L.e("Mode not correctly loaded, token marker is still null");  }}  }
class C{  private JsonValue serviceNamesToJSON(OrganizationConfigManager ocm,Set serviceNames) throws SMSException {  JsonValue realmServices=new JsonValue(new LinkedHashMap<String,Object>(1));  try {    for (    Object service : serviceNames) {      String tmp=(String)service;      Object holdAttrForService=ocm.getAttributes(tmp);      realmServices.add(tmp,holdAttrForService);    }  } catch (  SMSException e) {    debug.error("RealmResource.serviceNamesToJSON :: " + e);    throw e;  }  return realmServices;}  }
class C{  public void calcScore(){  if ((getPredicateCount() > 0) || (null != m_relativePathPattern)) {    m_score=SCORE_OTHER;  } else   super.calcScore();  if (null == m_targetString)   calcTargetString();}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public InterruptedNamingException(){  super();}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  public final double check_trace(PlaPointInt p_from_point,PlaPointInt p_to_point,int p_layer,NetNosList p_net_no_arr,int p_trace_half_width,int p_cl_class_no,boolean p_only_not_shovable_obstacles){  if (p_from_point.equals(p_to_point))   return 0;  PlaSegmentInt curr_line_segment=new PlaSegmentInt(p_from_point,p_to_point);  return check_trace(curr_line_segment,p_layer,p_net_no_arr,p_trace_half_width,p_cl_class_no,p_only_not_shovable_obstacles);}  }
class C{  public boolean isLinkingEnabled(){  return linkingEnabled;}  }
class C{  private boolean itera_connect(PlaPointInt p_from_point,PlaPointInt p_to_point){  ArrayList<PlaPointInt> corners=angled_connection(p_from_point,p_to_point);  boolean connection_succeeded=true;  for (int index=1; index < corners.size(); ++index) {    PlaPointInt from_corner=corners.get(index - 1);    PlaPointInt to_corner=corners.get(index);    TimeLimit time_limit=new TimeLimit(s_CHECK_FORCED_TRACE_TIME_MAX);    while (!from_corner.equals(to_corner)) {      PlaPointInt curr_ok_point=r_board.insert_trace(from_corner,to_corner,pen_half_width_arr[layer_active_no],layer_active_no,net_nos,clearance_class,max_shove_trace_recursion_depth,max_shove_via_recursion_depth,max_spring_over_recursion_depth,itera_settings.trace_pullt_min_move,!is_stitch_mode,time_limit);      if (curr_ok_point == null) {        r_board.undo(null);        return true;      }      if (curr_ok_point.equals(from_corner) && itera_settings.is_automatic_neckdown()) {        curr_ok_point=try_neckdown_at_end(from_corner,to_corner);      }      if (curr_ok_point.equals(from_corner)) {        prev_corner=from_corner;        connection_succeeded=false;        break;      }      from_corner=curr_ok_point;    }  }  return connection_succeeded;}  }
class C{  public void closeSocket(Socket socket){  if (socket == null) {    return;  }  try {    socket.getInputStream().close();  } catch (  IOException e) {  }  try {    socket.getOutputStream().close();  } catch (  IOException e) {  }  try {    socket.close();  } catch (  IOException e) {  }}  }
class C{  public Reflect call(String name) throws ReflectException {  return call(name,new Object[0]);}  }
class C{  private static String convertLong(AbstractStringBuilder sb,long n){  int i=(int)n;  if (i == n) {    return convertInt(sb,i);  }  boolean negative=(n < 0);  if (negative) {    n=-n;    if (n < 0) {      String quickResult="-9223372036854775808";      if (sb != null) {        sb.append0(quickResult);        return null;      }      return quickResult;    }  }  int bufLen=20;  char[] buf=(sb != null) ? BUFFER.get() : new char[bufLen];  int low=(int)(n % 1000000000);  int cursor=intIntoCharArray(buf,bufLen,low);  while (cursor != (bufLen - 9)) {    buf[--cursor]='0';  }  n=((n - low) >>> 9) * 0x8E47CE423A2E9C6DL;  if ((n & (-1L << 32)) == 0) {    cursor=intIntoCharArray(buf,cursor,(int)n);  } else {    int lo32=(int)n;    int hi32=(int)(n >>> 32);    int midDigit=MOD_10_TABLE[(0x19999999 * lo32 + (lo32 >>> 1) + (lo32 >>> 3)) >>> 28];    midDigit-=hi32 << 2;    if (midDigit < 0) {      midDigit+=10;    }    buf[--cursor]=DIGITS[midDigit];    int rest=((int)((n - midDigit) >>> 1)) * 0xCCCCCCCD;    cursor=intIntoCharArray(buf,cursor,rest);  }  if (negative) {    buf[--cursor]='-';  }  if (sb != null) {    sb.append0(buf,cursor,bufLen - cursor);    return null;  } else {    return new String(cursor,bufLen - cursor,buf);  }}  }
class C{  private AuthenticationServiceAttributeCache(){}  }
class C{  public static WhoAmIExtendedResult unmodifiableWhoAmIExtendedResult(final WhoAmIExtendedResult result){  if (result instanceof UnmodifiableSearchResultReferenceImpl) {    return result;  }  return new UnmodifiableWhoAmIExtendedResultImpl(result);}  }
class C{  public int at(int index){  return bytes[index] & 0xff;}  }
class C{  public void closeCDATA() throws SAXException {  if (m_lexHandler != null && m_cdataTagOpen) {    m_lexHandler.endCDATA();  }  m_cdataTagOpen=false;}  }
class C{  public SearchResults searchIDs(java.security.Principal principal,Guid guid,int scope,String searchFilter,SearchControl searchControl) throws InvalidSearchFilterException, UMSException {  String attrNames[]={"objectclass"};  return search(principal,guid,scope,searchFilter,attrNames,false,searchControl);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.ReceivedType createReceivedType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.ReceivedTypeImpl();}  }
class C{  protected int decryptMore() throws IOException {  if (finalDone) {    return -1;  }  int n=input.read(inBuffer);  if (n < 0) {    decryptFinal();    int remaining=outBuffer.remaining();    if (remaining > 0) {      return remaining;    }    return -1;  } else   if (n == 0) {    return 0;  } else {    decrypt();    return outBuffer.remaining();  }}  }
class C{  public Task read(String tokenId,ResultHandler<Token,?> handler){  return new ReadTask(tokenId,handler);}  }
class C{  public static ArgumentException missingValueInPropertyArgument(String arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_VALUE_IN_PROPERTY_VALUE.get(arg);  return new ArgumentException(msg);}  }
class C{  @Override public void nextBytes(byte[] bytes){  if (!OpenSslCryptoRandomNative.nextRandBytes(bytes)) {    throw new IllegalArgumentException("The nextRandBytes method failed");  }}  }
class C{  public boolean toggleBreakpoint(Line line){  line=getNearestBreakpointLine(line);  boolean on=breakpoints.containsKey(line);  if (on)   breakpoints.remove(line); else {    Instruction inst=gettInstrumentedInstructionAfter(line);    if (inst != null) {      breakpoints.put(line,inst);    }  }  whylineUI.getLinesUI().updateBreakpointLines(line);  return !on;}  }
class C{  public PrinterURI(URI uri){  super(uri);}  }
class C{  public void purgeResource(String rid,String domainName,int graceperiod) throws AMException, SSOException {  String orgDN=getOrganizationDN(domainName,null);  String filter=AMCompliance.getDeletedObjectFilter(AMObject.RESOURCE);  filter=AMObjectImpl.constructFilter(AMNamingAttrManager.getNamingAttr(AMObject.RESOURCE),filter,rid);  if (AMCommonUtils.debug.messageEnabled()) {    AMCommonUtils.debug.message("AMStoreConnection.purgeGroup: " + "Using deleted user filter= " + filter);  }  Set uSet=dsServices.search(token,orgDN,filter,SCOPE_SUB);  if ((uSet == null) || (uSet.size() > 1) || uSet.isEmpty()) {    Object args[]={rid};    throw new AMException(AMSDKBundle.getString("971",args,locale),"971",args);  }  String uDN=(String)uSet.iterator().next();  AMResource resource=getResource(uDN);  resource.purge(false,graceperiod);  return;}  }
class C{  public String auditThreads(){  String auditReport=null;  Iterator<ThreadHandle> it=threadHandles.values().iterator();  while (it.hasNext()) {    ThreadHandle threadHandle=(ThreadHandle)it.next();    if (!threadHandle.isThreadActive()) {      Thread thread=threadHandle.getThread();      if (auditReport == null) {        auditReport="Thread Auditor Report:\n";      }      auditReport+="   Thread [" + thread.getName() + "] has failed to respond to an audit request.\n";    }    threadHandle.setThreadActive(false);  }  return auditReport;}  }
class C{  public static GenericExtendedRequest newGenericExtendedRequest(final String requestName){  Reject.ifNull(requestName);  return new GenericExtendedRequestImpl(requestName);}  }
class C{  public ResultHandler<Token,CoreTokenException> updateOrCreate(Token token) throws CoreTokenException {  applyBlobStrategy(token);  debug("UpdateOrCreate: queued {0} Token {1}\n{2}",token.getType(),token.getTokenId(),token);  final ResultHandler<Token,CoreTokenException> updateHandler=handlerFactory.getUpdateHandler();  dispatcher.update(token,updateHandler);  return updateHandler;}  }
class C{  public Observable<List<Job>> jobRangeByStateObservable(String state,long from,long to,String order){  io.vertx.rx.java.ObservableFuture<List<Job>> handler=io.vertx.rx.java.RxHelper.observableFuture();  jobRangeByState(state,from,to,order,handler.toHandler());  return handler;}  }
class C{  boolean parseRequestLine(boolean keptAlive) throws IOException {  if (!parsingRequestLine)   return true;  if (parsingRequestLinePhase < 2) {    byte chr=0;    do {      if (pos >= lastValid) {        if (keptAlive) {          wrapper.setReadTimeout(wrapper.getEndpoint().getKeepAliveTimeout());        }        if (!fill(false)) {          parsingRequestLinePhase=1;          return false;        }        wrapper.setReadTimeout(wrapper.getEndpoint().getSoTimeout());      }      if (!keptAlive && pos == 0 && lastValid >= CLIENT_PREFACE_START.length - 1) {        boolean prefaceMatch=true;        for (int i=0; i < CLIENT_PREFACE_START.length && prefaceMatch; i++) {          if (CLIENT_PREFACE_START[i] != buf[i]) {            prefaceMatch=false;          }        }        if (prefaceMatch) {          parsingRequestLinePhase=-1;          return false;        }      }      if (request.getStartTime() < 0) {        request.setStartTime(System.currentTimeMillis());      }      chr=buf[pos++];    } while ((chr == Constants.CR) || (chr == Constants.LF));    pos--;    parsingRequestLineStart=pos;    parsingRequestLinePhase=2;    if (log.isDebugEnabled()) {      log.debug("Received [" + new String(buf,pos,lastValid - pos,StandardCharsets.ISO_8859_1) + "]");    }  }  if (parsingRequestLinePhase == 2) {    boolean space=false;    while (!space) {      if (pos >= lastValid) {        if (!fill(false))         return false;      }      if (buf[pos] == Constants.SP || buf[pos] == Constants.HT) {        space=true;        request.method().setBytes(buf,parsingRequestLineStart,pos - parsingRequestLineStart);      } else       if (!HTTP_TOKEN_CHAR[buf[pos]]) {        throw new IllegalArgumentException(sm.getString("iib.invalidmethod"));      }      pos++;    }    parsingRequestLinePhase=3;  }  if (parsingRequestLinePhase == 3) {    boolean space=true;    while (space) {      if (pos >= lastValid) {        if (!fill(false))         return false;      }      if (buf[pos] == Constants.SP || buf[pos] == Constants.HT) {        pos++;      } else {        space=false;      }    }    parsingRequestLineStart=pos;    parsingRequestLinePhase=4;  }  if (parsingRequestLinePhase == 4) {    int end=0;    boolean space=false;    while (!space) {      if (pos >= lastValid) {        if (!fill(false))         return false;      }      if (buf[pos] == Constants.SP || buf[pos] == Constants.HT) {        space=true;        end=pos;      } else       if ((buf[pos] == Constants.CR) || (buf[pos] == Constants.LF)) {        parsingRequestLineEol=true;        space=true;        end=pos;      } else       if ((buf[pos] == Constants.QUESTION) && (parsingRequestLineQPos == -1)) {        parsingRequestLineQPos=pos;      }      pos++;    }    if (parsingRequestLineQPos >= 0) {      request.queryString().setBytes(buf,parsingRequestLineQPos + 1,end - parsingRequestLineQPos - 1);      request.requestURI().setBytes(buf,parsingRequestLineStart,parsingRequestLineQPos - parsingRequestLineStart);    } else {      request.requestURI().setBytes(buf,parsingRequestLineStart,end - parsingRequestLineStart);    }    parsingRequestLinePhase=5;  }  if (parsingRequestLinePhase == 5) {    boolean space=true;    while (space) {      if (pos >= lastValid) {        if (!fill(false))         return false;      }      if (buf[pos] == Constants.SP || buf[pos] == Constants.HT) {        pos++;      } else {        space=false;      }    }    parsingRequestLineStart=pos;    parsingRequestLinePhase=6;    end=0;  }  if (parsingRequestLinePhase == 6) {    while (!parsingRequestLineEol) {      if (pos >= lastValid) {        if (!fill(false))         return false;      }      if (buf[pos] == Constants.CR) {        end=pos;      } else       if (buf[pos] == Constants.LF) {        if (end == 0)         end=pos;        parsingRequestLineEol=true;      }      pos++;    }    if ((end - parsingRequestLineStart) > 0) {      request.protocol().setBytes(buf,parsingRequestLineStart,end - parsingRequestLineStart);    } else {      request.protocol().setString("");    }    parsingRequestLine=false;    parsingRequestLinePhase=0;    parsingRequestLineEol=false;    parsingRequestLineStart=0;    return true;  }  throw new IllegalStateException("Invalid request line parse phase:" + parsingRequestLinePhase);}  }
class C{  public HashMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  if (loadFactor <= 0 || Float.isNaN(loadFactor))   throw new IllegalArgumentException("Illegal load factor: " + loadFactor);  this.loadFactor=loadFactor;  this.threshold=tableSizeFor(initialCapacity);}  }
class C{  public static boolean shouldConsume(int keyCode){  return (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT || keyCode == KeyEvent.KEYCODE_DPAD_UP || keyCode == KeyEvent.KEYCODE_DPAD_DOWN || keyCode == KeyEvent.KEYCODE_MOVE_HOME || keyCode == KeyEvent.KEYCODE_MOVE_END || keyCode == KeyEvent.KEYCODE_PAGE_UP || keyCode == KeyEvent.KEYCODE_PAGE_DOWN || keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenodename.class,args);}  }
class C{  private MethodDef parse_method_def_empty() throws SyntaxException {  LineCol lineCol=current.getLineCol();  String methodName=((Element)current).getContent();  Set<AST.Anno> annos=new HashSet<>(this.annos);  this.annos.clear();  Set<Modifier> modifiers=new HashSet<>(this.modifiers);  this.modifiers.clear();  List<VariableDef> variableList=new ArrayList<>();  Set<String> names=new HashSet<>();  parse_method_def_variables(variableList,names);  nextNode(true);  if (current != null && !(current instanceof EndingNode)) {    nextNode(false);    nextNode(true);  }  MethodDef def=new MethodDef(methodName,modifiers,null,variableList,annos,Collections.emptyList(),lineCol);  annos.clear();  return def;}  }
class C{  @Override HashMapEntry<K,V> constructorNewEntry(K key,V value,int hash,HashMapEntry<K,V> next){  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  LinkedEntry<K,V> newTail=new LinkedEntry<K,V>(key,value,hash,next,header,oldTail);  return oldTail.nxt=header.prv=newTail;}  }
class C{  protected Principal authenticate(String username,CallbackHandler callbackHandler){  try {    LoginContext loginContext=null;    if (appName == null)     appName="Tomcat";    if (log.isDebugEnabled())     log.debug(sm.getString("jaasRealm.beginLogin",username,appName));    ClassLoader ocl=null;    if (!isUseContextClassLoader()) {      ocl=Thread.currentThread().getContextClassLoader();      Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader());    }    try {      Configuration config=getConfig();      loginContext=new LoginContext(appName,null,callbackHandler,config);    } catch (    Throwable e) {      ExceptionUtils.handleThrowable(e);      log.error(sm.getString("jaasRealm.unexpectedError"),e);      return (null);    } finally {      if (!isUseContextClassLoader()) {        Thread.currentThread().setContextClassLoader(ocl);      }    }    if (log.isDebugEnabled())     log.debug("Login context created " + username);    Subject subject=null;    try {      loginContext.login();      subject=loginContext.getSubject();      if (subject == null) {        if (log.isDebugEnabled())         log.debug(sm.getString("jaasRealm.failedLogin",username));        return (null);      }    } catch (    AccountExpiredException e) {      if (log.isDebugEnabled())       log.debug(sm.getString("jaasRealm.accountExpired",username));      return (null);    }catch (    CredentialExpiredException e) {      if (log.isDebugEnabled())       log.debug(sm.getString("jaasRealm.credentialExpired",username));      return (null);    }catch (    FailedLoginException e) {      if (log.isDebugEnabled())       log.debug(sm.getString("jaasRealm.failedLogin",username));      return (null);    }catch (    LoginException e) {      log.warn(sm.getString("jaasRealm.loginException",username),e);      return (null);    }catch (    Throwable e) {      ExceptionUtils.handleThrowable(e);      log.error(sm.getString("jaasRealm.unexpectedError"),e);      return (null);    }    if (log.isDebugEnabled())     log.debug(sm.getString("jaasRealm.loginContextCreated",username));    Principal principal=createPrincipal(username,subject,loginContext);    if (principal == null) {      log.debug(sm.getString("jaasRealm.authenticateFailure",username));      return (null);    }    if (log.isDebugEnabled()) {      log.debug(sm.getString("jaasRealm.authenticateSuccess",username));    }    return (principal);  } catch (  Throwable t) {    log.error("error ",t);    return null;  }}  }
class C{  public void deleteAssignableDynamicGroups(Set assignableDynamicGroupDNs) throws AMException, SSOException {  Iterator iter=assignableDynamicGroupDNs.iterator();  while (iter.hasNext()) {    String assignableDynamicGroupDN=(String)iter.next();    AMAssignableDynamicGroup assignableDynamicGroup=new AMAssignableDynamicGroupImpl(super.token,assignableDynamicGroupDN);    assignableDynamicGroup.delete();  }}  }
class C{  public static AsfHeader readTagHeader(final RandomAccessFile file) throws IOException {  final InputStream stream=createStream(file);  return TAG_READER.read(Utils.readGUID(stream),stream,0);}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSNameRegistrationResponse." + "toURLEncodedQueryString: providerId is null in " + "the response ");    throw new FSMsgException("nullProviderIdInRequest",null);  }  if ((responseID == null) || (responseID.length() == 0)) {    responseID=FSUtils.generateID();    if (responseID == null) {      FSUtils.debug.error("FSNameRegistrationRequest." + "toURLEncodedQueryString: couldn't generate " + "responseID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer urlEncodedAuthnReq=new StringBuffer(300);  urlEncodedAuthnReq.append("ResponseID=").append(URLEncDec.encode(responseID)).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append("MajorVersion=").append(majorVersion).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append("MinorVersion=").append(minorVersion).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append("InResponseTo=").append(URLEncDec.encode(inResponseTo)).append(IFSConstants.AMPERSAND);  if (issueInstant != null) {    urlEncodedAuthnReq.append("IssueInstant=").append(URLEncDec.encode(DateUtils.toUTCDateFormat(issueInstant))).append(IFSConstants.AMPERSAND);  } else {    FSUtils.debug.error("FSNameRegistrationRequest." + "toURLEncodedQueryString: issueInstant missing");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  if (providerId != null && !providerId.equals("")) {    urlEncodedAuthnReq.append("ProviderID=").append(URLEncDec.encode(providerId)).append(IFSConstants.AMPERSAND);  }  if (relayState != null && relayState.length() > 0) {    urlEncodedAuthnReq.append("RelayState=").append(URLEncDec.encode(relayState)).append(IFSConstants.AMPERSAND);  }  if (status != null) {    urlEncodedAuthnReq.append("Value=");    urlEncodedAuthnReq.append(URLEncDec.encode(status.getStatusCode().getValue())).append(IFSConstants.AMPERSAND);  }  return urlEncodedAuthnReq.toString();}  }
class C{  protected static Guid[] toGuidArray(Set set){  Object[] obj=set.toArray();  Guid[] ss=new Guid[obj.length];  for (int i=0; i < obj.length; i++) {    ss[i]=new Guid((String)obj[i]);  }  return ss;}  }
class C{  static String formatNsAsMs(long nanoseconds){  if (nanoseconds >= 0) {    return MILLISEC_FORMAT.format(nanoseconds / 1000000d);  } else {    return "N/A";  }}  }
class C{  public int size(){  return size;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextResourceLink[");  sb.append("name=");  sb.append(getName());  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  if (getGlobal() != null) {    sb.append(", global=");    sb.append(getGlobal());  }  sb.append("]");  return (sb.toString());}  }
class C{  public static FilterRule createRule(String ruleText){  ruleText=StringUtils.trim(ruleText);  if (StringUtils.isBlank(ruleText) || StringUtils.length(ruleText) < MIN_RULE_LENGTH || StringUtils.startsWith(ruleText,COMMENT) || StringUtils.startsWith(ruleText,META_START) || StringUtils.contains(ruleText,MASK_OBSOLETE_SCRIPT_INJECTION) || StringUtils.contains(ruleText,MASK_OBSOLETE_STYLE_INJECTION)) {    return null;  }  try {    if (StringUtils.startsWith(ruleText,MASK_WHITE_LIST)) {      return new UrlFilterRule(ruleText);    }    if (StringUtils.contains(ruleText,MASK_CONTENT_RULE)) {      return new ContentFilterRule(ruleText);    }    if (StringUtils.contains(ruleText,MASK_CSS_RULE) || StringUtils.contains(ruleText,MASK_CSS_EXCEPTION_RULE) || StringUtils.contains(ruleText,MASK_CSS_INJECT_RULE)|| StringUtils.contains(ruleText,MASK_CSS_INJECT_EXCEPTION_RULE)) {      return new CssFilterRule(ruleText);    }    if (StringUtils.contains(ruleText,MASK_SCRIPT_RULE)) {      return new ScriptFilterRule(ruleText);    }    return new UrlFilterRule(ruleText);  } catch (  Exception ex) {    LoggerFactory.getLogger(FilterRule.class).warn("Error creating filter rule {}:\r\n{}",ruleText,ex);    return null;  }}  }
class C{  public void addAttributeValue(Principal principal,Guid guid,String name,String value) throws UMSException {  modifyAttributeValue(ModificationType.ADD,principal,guid,name,value);}  }
class C{  private static void fromDebugLogsJson(RecordProperties recordProperties,JsonValue jsonProperties){  JsonValue jsonDebugLogs=checkIfExist(jsonProperties,RecordConstants.DEBUG_LOGS_LABEL);  recordProperties.debugLevel=jsonDebugLogs.get(RecordConstants.DEBUG_LOGS_DEBUG_LEVEL_LABEL).required().as(enumConstant(DebugLevel.class));  recordProperties.autoStopEnable=jsonDebugLogs.isDefined(RecordConstants.DEBUG_LOGS_AUTOSTOP_LABEL);  if (recordProperties.autoStopEnable) {    JsonValue jsonAutoStop=jsonDebugLogs.get(RecordConstants.DEBUG_LOGS_AUTOSTOP_LABEL).required();    recordProperties.autoStopTimeEnable=jsonAutoStop.isDefined(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_LABEL);    if (recordProperties.autoStopTimeEnable) {      JsonValue jsonAutoStopTime=jsonAutoStop.get(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_LABEL).required();      TimeUnit timeUnit=jsonAutoStopTime.get(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_UNIT_LABEL).required().as(enumConstant(TimeUnit.class));      Long timeValue=jsonAutoStopTime.get(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_VALUE_LABEL).required().asLong();      recordProperties.autoStopTimeInMS=timeUnit.toMillis(timeValue);    }    recordProperties.autoStopFileSizeEnable=jsonAutoStop.isDefined(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_LABEL);    if (recordProperties.autoStopFileSizeEnable) {      JsonValue jsonAutoStopFileSize=jsonAutoStop.get(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_LABEL).required();      FileSizeUnit sizeUnit=jsonAutoStopFileSize.get(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_SIZEUNIT_LABEL).required().as(enumConstant(FileSizeUnit.class));      recordProperties.autoStopFileSizedInKB=sizeUnit.toKB(jsonAutoStopFileSize.get(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_VALUE_LABEL).required().asLong());    }    if (!recordProperties.autoStopFileSizeEnable && !recordProperties.autoStopTimeEnable) {      debug.message("{} should have a {} and/or a {} rule(s).",RecordConstants.DEBUG_LOGS_AUTOSTOP_LABEL,RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_LABEL,RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_LABEL);      throw new IllegalArgumentException(RecordConstants.DEBUG_LOGS_AUTOSTOP_LABEL + " should have an " + RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_LABEL+ " and/or a "+ RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_LABEL+ " rule(s).");    }  }}  }
class C{  public void test_unwrap_06(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.unwrap(bb,bbA,0,bbA.length);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  public void test_read$BII_Exception() throws IOException {  DigestInputStream is=new DigestInputStream(inStream,digest);  byte[] buf=null;  try {    is.read(buf,-1,0);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  buf=new byte[1000];  try {    is.read(buf,-1,0);    fail("Test 2: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,0,-1);    fail("Test 3: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,-1,-1);    fail("Test 4: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,0,1001);    fail("Test 5: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,1001,0);    fail("Test 6: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    is.read(buf,500,501);    fail("Test 7: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  is.close();  Support_ASimpleInputStream sis=new Support_ASimpleInputStream(true);  is=new DigestInputStream(sis,digest);  try {    is.read(buf,0,100);    fail("Test 9: IOException expected.");  } catch (  IOException e) {  }  sis.throwExceptionOnNextUse=false;  is.close();}  }
class C{  private void processModification(Modification m) throws DirectoryException {  Attribute attr=m.getAttribute();switch (m.getModificationType().asEnum()) {case ADD:    processAddModification(attr);  break;case DELETE:processDeleteModification(attr);break;case REPLACE:processReplaceModification(attr);break;case INCREMENT:processIncrementModification(attr);break;}}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  public void addButtonActionListener(ButtonActionListener l){  buttonListeners.add(l);}  }
class C{  private ExpandRoomComplete calculate_doors(ExpandRoom p_room){  SortedRoomsTop calculator=new SortedRoomsTop(this);  return calculator.calculate(p_room);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  int length;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  if (("text/html".equals(getContentType()))) {    assertEquals("htmlLength",2,length);  } else {    assertEquals("length",3,length);  }}  }
class C{  protected String undeploy(ContextName cn,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.undeploy(printWriter,cn,smClient);  return stringWriter.toString();}  }
class C{  IPv6Condition(Debug debug){  super(debug,null,null,IPVersion.IPV6);}  }
class C{  public PasswordExpiringControl(boolean isCritical,int secondsUntilExpiration){  super(OID_NS_PASSWORD_EXPIRING,isCritical);  this.secondsUntilExpiration=secondsUntilExpiration;}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof JobMediaSheets;}  }
class C{  private File preInitialization() throws InitializationException {  final DirectoryEnvironmentConfig environment=serverContext.getEnvironment();  useLastKnownGoodConfig=environment.useLastKnownGoodConfiguration();  configFile=environment.getConfigFile();  File configFileToUse=findConfigFileToUse(configFile);  ensureArchiveExistsAndIsUpToDate(environment,configFileToUse);  applyConfigChangesIfNeeded(configFileToUse);  return configFileToUse;}  }
class C{  public SQLTransactionRollbackException(Throwable cause){  super(cause);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(200);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("AuthorizationDecisionQuery").append(uri).append(" Resource=\"").append(resource).append("\">\n").append(subject.toString(true,true));  Iterator iterator=actions.iterator();  while (iterator.hasNext()) {    xml.append(((Action)iterator.next()).toString(true,true));  }  if (evidence != null) {    xml.append(evidence.toString(true,true));  }  xml.append("</").append(prefix).append("AuthorizationDecisionQuery>\n");  return xml.toString();}  }
class C{  @Override @Deprecated public void write(ObjectOutput output) throws IOException {  if (!output.equals(oos)) {    throw new IllegalArgumentException("Attempting to write to a different stream than the one that created this PutField");  }  for (  EmulatedFields.ObjectSlot slot : emulatedFields.slots()) {    Object fieldValue=slot.getFieldValue();    Class<?> type=slot.getField().getType();    if (type == int.class) {      output.writeInt(fieldValue != null ? ((Integer)fieldValue).intValue() : 0);    } else     if (type == byte.class) {      output.writeByte(fieldValue != null ? ((Byte)fieldValue).byteValue() : 0);    } else     if (type == char.class) {      output.writeChar(fieldValue != null ? ((Character)fieldValue).charValue() : 0);    } else     if (type == short.class) {      output.writeShort(fieldValue != null ? ((Short)fieldValue).shortValue() : 0);    } else     if (type == boolean.class) {      output.writeBoolean(fieldValue != null ? ((Boolean)fieldValue).booleanValue() : false);    } else     if (type == long.class) {      output.writeLong(fieldValue != null ? ((Long)fieldValue).longValue() : 0);    } else     if (type == float.class) {      output.writeFloat(fieldValue != null ? ((Float)fieldValue).floatValue() : 0);    } else     if (type == double.class) {      output.writeDouble(fieldValue != null ? ((Double)fieldValue).doubleValue() : 0);    } else {      output.writeObject(fieldValue);    }  }}  }
class C{  public void dispatchGalleryIntent(){  Intent galleryIntent=new Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI);  if (galleryIntent.resolveActivity(activity.getPackageManager()) != null) {    activity.startActivityForResult(galleryIntent,PICK_IMAGE_REQUEST);  }}  }
class C{  protected void updateLayout(DocumentEvent.ElementChange ec,DocumentEvent e,Shape a){  if (ec != null) {    int index=Math.max(ec.getIndex() - 1,0);    ChildState cs=getChildState(index);    locator.childChanged(cs);  }}  }
class C{  public static boolean isServerRunning(File serverRootDirectory){  String lockFileName=ServerConstants.SERVER_LOCK_FILE_NAME + ServerConstants.LOCK_FILE_SUFFIX;  String lockPathRelative=Installation.LOCKS_PATH_RELATIVE;  File locksPath=new File(serverRootDirectory,lockPathRelative);  String lockFile=new File(locksPath,lockFileName).getAbsolutePath();  StringBuilder failureReason=new StringBuilder();  try {    if (LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {      LockFileManager.releaseLock(lockFile,failureReason);      return false;    }    return true;  } catch (  Throwable t) {    return true;  }}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryAt(HashEntry<K,V>[] tab,int i){  return (tab == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)i << TSHIFT) + TBASE);}  }
class C{  public void update(ObjectClass oc,Schema schema){  ignoreChangeEvents=true;  objectClass=oc;  if (oc == null || schema == null) {    return;  }  String n=oc.getNameOrOID();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  titlePanel.setDetails(LocalizableMessage.raw(n));  name.setText(n);  SortableListModel<AttributeType> modelRequired=attributes.getSelectedListModel1();  SortableListModel<AttributeType> modelAvailable=attributes.getSelectedListModel2();  SortableListModel<AttributeType> availableModel=attributes.getAvailableListModel();  availableModel.addAll(modelRequired.getData());  availableModel.addAll(modelAvailable.getData());  modelRequired.clear();  modelAvailable.clear();  superiors.setSelectedSuperiors(oc.getSuperiorClasses());  superiors.setObjectClassesToExclude(Collections.singleton(oc));  if (oc.getSuperiorClasses().size() > 1) {    lSuperior.setText(INFO_CTRL_PANEL_OBJECTCLASS_PARENTS_LABEL.get().toString());  } else {    lSuperior.setText(INFO_CTRL_PANEL_OBJECTCLASS_PARENT_LABEL.get().toString());  }  updateAttributesWithParent(false);  for (  AttributeType attr : oc.getDeclaredRequiredAttributes()) {    availableModel.remove(attr);    modelRequired.add(attr);  }  for (  AttributeType attr : oc.getDeclaredOptionalAttributes()) {    availableModel.remove(attr);    modelAvailable.add(attr);  }  notifyAttributesChanged();  oid.setText(oc.getOID());  n=oc.getDescription();  if (n == null) {    n="";  }  description.setText(n);  Set<String> aliases=getAliases(oc);  lastAliases.clear();  lastAliases.addAll(aliases);  this.aliases.setText(Utilities.getStringFromCollection(aliases,", "));  String sOrigin=getElementOrigin(oc);  if (sOrigin == null) {    sOrigin="";  }  origin.setText(sOrigin);  String sFile=getElementSchemaFile(oc);  if (sFile == null) {    sFile="";  }  file.setText(sFile);  type.setSelectedItem(oc.getObjectClassType());  obsolete.setSelected(oc.isObsolete());  ocName=objectClass.getNameOrOID();  scrollListener.updateBorder();  for (  JLabel label : labels) {    setPrimaryValid(label);  }  saveChanges.setEnabled(false);  ignoreChangeEvents=false;}  }
class C{  public int size(){  return Long.bitCount(elements);}  }
class C{  @Override public Foo fetchByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid_C(uuid,companyId,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public IllegalFormatConversionException(char c,Class<?> arg){  if (arg == null)   throw new NullPointerException();  this.c=c;  this.arg=arg;}  }
class C{  private static List<Cookie> removeLocalLoadBalancingCookie(final List<Cookie> cookies){  final String lblCookieName=getlbCookieName();  final String lblCookieValue=getlbCookieValue();  final List<Cookie> filteredCookies=new ArrayList<>();  for (  final Cookie cookie : cookies) {    if (!Objects.equals(cookie.getName(),lblCookieName) && !Objects.equals(cookie.getValue(),lblCookieValue)) {      filteredCookies.add(cookie);    }  }  return filteredCookies;}  }
class C{  public DigestException(){  super();}  }
class C{  public int toInt(){  if (places.length > 4)   throw new NumberFormatException("BigInt.toInt, too big");  int retval=0, i=0;  for (; i < places.length; i++)   retval=(retval << 8) + (places[i] & 0xff);  return retval;}  }
class C{  public static DeleteRequest copyOfDeleteRequest(final DeleteRequest request){  return new DeleteRequestImpl(request);}  }
class C{  protected void doPaint(Graphics2D g,JComponent c,int width,int height,Object[] extendedCacheKeys){  Color color=(c == null) ? Color.BLACK : c.getBackground();  BufferedImage img1=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);  BufferedImage img2=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=(Graphics2D)img1.getGraphics();  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.setColor(color);  g2.fillRoundRect(2,0,26,26,RADIUS,RADIUS);  g2.dispose();  InnerShadowEffect effect=new InnerShadowEffect();  effect.setDistance(1);  effect.setSize(3);  effect.setColor(getLighter(color,2.1f));  effect.setAngle(90);  effect.applyEffect(img1,img2,IMG_SIZE,IMG_SIZE);  g2=(Graphics2D)img2.getGraphics();  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.setClip(0,28,IMG_SIZE,1);  g2.setColor(getLighter(color,0.90f));  g2.drawRoundRect(2,1,25,25,RADIUS,RADIUS);  g2.dispose();  if (width != IMG_SIZE || height != IMG_SIZE) {    ImageScalingHelper.paint(g,0,0,width,height,img2,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);  } else {    g.drawImage(img2,0,0,c);  }  img1=null;  img2=null;}  }
class C{  public void removeValve(String name) throws Exception {  ObjectName oname=new ObjectName(name);  Container container=getParentContainerFromChild(oname);  Valve[] valves=container.getPipeline().getValves();  for (int i=0; i < valves.length; i++) {    ObjectName voname=((JmxEnabled)valves[i]).getObjectName();    if (voname.equals(oname)) {      container.getPipeline().removeValve(valves[i]);    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.IPSecType createIPSecType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPSecTypeImpl();}  }
class C{  public String debugDump(){  String superstring=super.debugDump();  stringRepresentation="";  sprint(SIPResponse.class.getCanonicalName());  sprint("{");  if (statusLine != null) {    sprint(statusLine.debugDump());  }  sprint(superstring);  sprint("}");  return stringRepresentation;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentityreferencenodename.class,args);}  }
class C{  public UniqueCharactersPasswordValidator(){  super();}  }
class C{  ActionMap createActionMap(){  ActionMap map=super.createActionMap();  if (map.get(DefaultEditorKit.selectWordAction) != null) {    Action a=map.get(DefaultEditorKit.selectLineAction);    if (a != null) {      map.remove(DefaultEditorKit.selectWordAction);      map.put(DefaultEditorKit.selectWordAction,a);    }  }  return map;}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public NoRouteToHostException(String detailMessage){  super(detailMessage);}  }
class C{  public byte[] decode(byte[] data,byte[] uncompData,int h){  if (data[0] == (byte)0x00 && data[1] == (byte)0x01) {    throw new IOException(IOException.Tiff50StyleLzwCodesAreNotSupported);  }  initializeStringTable();  this.data=data;  this.h=h;  this.uncompData=uncompData;  bytePointer=0;  bitPointer=0;  dstIndex=0;  nextData=0;  nextBits=0;  int code, oldCode=0;  byte[] str;  while (((code=getNextCode()) != 257) && dstIndex < uncompData.length) {    if (code == 256) {      initializeStringTable();      code=getNextCode();      if (code == 257) {        break;      }      writeString(stringTable[code]);      oldCode=code;    } else {      if (code < tableIndex) {        str=stringTable[code];        writeString(str);        addStringToTable(stringTable[oldCode],str[0]);        oldCode=code;      } else {        str=stringTable[oldCode];        str=composeString(str,str[0]);        writeString(str);        addStringToTable(str);        oldCode=code;      }    }  }  if (predictor == 2) {    int count;    for (int j=0; j < h; j++) {      count=samplesPerPixel * (j * w + 1);      for (int i=samplesPerPixel; i < w * samplesPerPixel; i++) {        uncompData[count]+=uncompData[count - samplesPerPixel];        count++;      }    }  }  return uncompData;}  }
class C{  private boolean disconnectInternal(PluginOperation operation,String section){  try {    DisconnectClientControl control=operation.getRequestControl(DisconnectClientControl.DECODER);    if (control != null && control.getSection().equalsIgnoreCase(section)) {      operation.disconnectClient(DisconnectReason.CLOSED_BY_PLUGIN,true,LocalizableMessage.raw("Closed by disconnect client plugin (section " + section + ")"));      return true;    }  } catch (  Exception e) {    logger.error(LocalizableMessage.raw("Unable to decode the disconnect client control:  " + e));  }  return false;}  }
class C{  public static NSObject parse(File f) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {  DocumentBuilder docBuilder=getDocBuilder();  Document doc=docBuilder.parse(f);  return parse(doc);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  try {    handleButton1Request(getCachedPolicy());  } catch (  AMConsoleException e) {    debug.warning("SubjectEditViewBean.handleButton1Request",e);    redirectToStartURL();  }}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  entityID=getStringOptionValue(FedCLIConstants.ARGUMENT_ENTITY_ID);  sign=isOptionSet(FedCLIConstants.ARGUMENT_SIGN);  metadata=getStringOptionValue(FedCLIConstants.ARGUMENT_METADATA);  extendedData=getStringOptionValue(FedCLIConstants.ARGUMENT_EXTENDED_DATA);  String webURL=getCommandManager().getWebEnabledURL();  isWebBase=(webURL != null) && (webURL.trim().length() > 0);  String spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={realm,entityID,metadata,extendedData,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_EXPORT_ENTITY",params);  if ((metadata == null) && (extendedData == null)) {    String[] args={realm,entityID,metadata,extendedData,spec,getResourceString("export-entity-exception-no-datafile")};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_EXPORT_ENTITY",args);    throw new CLIException(getResourceString("export-entity-exception-no-datafile"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  try {    if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {      handleSAML2Request(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_EXPORT_ENTITY",params);    } else     if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {      handleIDFFRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_EXPORT_ENTITY",params);    } else     if (spec.equals(FedCLIConstants.WSFED_SPECIFICATION)) {      handleWSFedRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_EXPORT_ENTITY",params);    } else {      throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  CLIException e) {    String[] args={realm,entityID,metadata,extendedData,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_EXPORT_ENTITY",args);    throw e;  }}  }
class C{  private static synchronized void checkMBeanServerBuilder(){  try {    GetPropertyAction act=new GetPropertyAction(JMX_INITIAL_BUILDER);    String builderClassName=AccessController.doPrivileged(act);    try {      final Class<?> newBuilderClass;      if (builderClassName == null || builderClassName.length() == 0)       newBuilderClass=MBeanServerBuilder.class; else       newBuilderClass=loadBuilderClass(builderClassName);      if (builder != null) {        final Class<?> builderClass=builder.getClass();        if (newBuilderClass == builderClass)         return;      }      builder=newBuilder(newBuilderClass);    } catch (    ClassNotFoundException x) {      final String msg="Failed to load MBeanServerBuilder class " + builderClassName + ": "+ x;      throw new JMRuntimeException(msg,x);    }  } catch (  RuntimeException x) {    if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {      StringBuilder strb=new StringBuilder().append("Failed to instantiate MBeanServerBuilder: ").append(x).append("\n\t\tCheck the value of the ").append(JMX_INITIAL_BUILDER).append(" property.");      MBEANSERVER_LOGGER.logp(Level.FINEST,MBeanServerFactory.class.getName(),"checkMBeanServerBuilder",strb.toString());    }    throw x;  }}  }
class C{  private static void initStatics(){  aciType=getSchema().getAttributeType("aci");  globalAciType=getSchema().getAttributeType(ATTR_AUTHZ_GLOBAL_ACI);  debugSearchIndex=getSchema().getAttributeType(SuffixContainer.ATTR_DEBUG_SEARCH_INDEX);  refAttrType=getSchema().getAttributeType(ATTR_REFERRAL_URL);  try {    debugSearchIndexDN=DN.valueOf("cn=debugsearch");  } catch (  LocalizedIllegalArgumentException unexpected) {  }}  }
class C{  public void registerSSOToken(SSOToken ssoToken){  ssoTokens.add(ssoToken);  Logger.token.set(ssoToken);}  }
class C{  private LdifFileWriter(LDIFWriter ldifWriter){  this.ldifWriter=ldifWriter;}  }
class C{  private void tagWithArguments(TemplateTag tag,Template template,String... arguments) throws DecodeException {  tag.initializeForTemplate(Schema.getDefaultSchema(),NULL_TEMPLATE_FILE,template,arguments,LINE_NUMBER,NULL_WARNINGS);}  }
class C{  public Object clone(){  AuthSchemeCondition theClone=null;  try {    theClone=(AuthSchemeCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public DSAParameters generateParameters(){  return (use186_3) ? generateParameters_FIPS186_3() : generateParameters_FIPS186_2();}  }
class C{  public SIPHeader parse() throws ParseException {  AcceptLanguageList acceptLanguageList=new AcceptLanguageList();  if (debug)   dbg_enter("AcceptLanguageParser.parse");  try {    headerName(TokenTypes.ACCEPT_LANGUAGE);    do {      AcceptLanguage acceptLanguage=new AcceptLanguage();      this.lexer.SPorHT();      if (lexer.startsId()) {        Token value=lexer.match(TokenTypes.ID);        acceptLanguage.setLanguageRange(value.getTokenValue());        this.lexer.SPorHT();        while (lexer.lookAhead(0) == ';') {          this.lexer.match(';');          this.lexer.SPorHT();          this.lexer.match('q');          this.lexer.SPorHT();          this.lexer.match('=');          this.lexer.SPorHT();          lexer.match(TokenTypes.ID);          value=lexer.getNextToken();          try {            float fl=Float.parseFloat(value.getTokenValue());            acceptLanguage.setQValue(fl);          } catch (          NumberFormatException ex) {            throw createParseException(ex.getMessage());          }catch (          InvalidArgumentException ex) {            throw createParseException(ex.getMessage());          }          this.lexer.SPorHT();        }      }      acceptLanguageList.add(acceptLanguage);      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       break;    } while (true);  }  finally {    if (debug)     dbg_leave("AcceptLanguageParser.parse");  }  return acceptLanguageList;}  }
class C{  AttributeSet convertAttributeSet(AttributeSet a){  if ((a instanceof LargeConversionSet) || (a instanceof SmallConversionSet)) {    return a;  }  Enumeration names=a.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    if (name instanceof StyleConstants) {      MutableAttributeSet converted=new LargeConversionSet();      Enumeration keys=a.getAttributeNames();      while (keys.hasMoreElements()) {        Object key=keys.nextElement();        Object cssValue=null;        if (key instanceof StyleConstants) {          Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);          if (cssKey != null) {            Object value=a.getAttribute(key);            cssValue=css.styleConstantsValueToCSSValue((StyleConstants)key,value);            if (cssValue != null) {              converted.addAttribute(cssKey,cssValue);            }          }        }        if (cssValue == null) {          converted.addAttribute(key,a.getAttribute(key));        }      }      return converted;    }  }  return a;}  }
class C{  public void testDivideBigDecimalScaleMathContextHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String c="2.77923185514690367475E+26";  int resScale=-6;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  String pidToId(String pid){  if (pid.indexOf("|") > -1) {    return CONFIG_CONTEXT_PREFIX + pid.substring(0,pid.indexOf("|"));  }  return CONFIG_CONTEXT_PREFIX + pid;}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String publicId;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  publicId=docType.getPublicId();  assertEquals("throw_Equals","STAFF",publicId);}  }
class C{  public static Foo findByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_Last(uuid,orderByComparator);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.NonceElement createNonceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.NonceElementImpl();}  }
class C{  @Override public Foo fetchByPrimaryKey(Serializable primaryKey){  Serializable serializable=entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);  if (serializable == nullModel) {    return null;  }  Foo foo=(Foo)serializable;  if (foo == null) {    Session session=null;    try {      session=openSession();      foo=(Foo)session.get(FooImpl.class,primaryKey);      if (foo != null) {        cacheResult(foo);      } else {        entityCache.putResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey,nullModel);      }    } catch (    Exception e) {      entityCache.removeResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,primaryKey);      throw processException(e);    } finally {      closeSession(session);    }  }  return foo;}  }
class C{  public MemoryQuota(){  allowOvercommit=System.getProperty(ENABLE_MEMORY_OVERCOMMIT) != null;  reservableMemory=(int)(Math.pow(Math.E / Math.PI,2) * (getOldGenInfo().getMax() / ONE_MEGABYTE));  reservedMemory=new Semaphore(reservableMemory,true);}  }
class C{  public ID3v1Tag(RandomAccessFile file,String loggingFilename) throws TagNotFoundException, IOException {  setLoggingFilename(loggingFilename);  FileChannel fc;  ByteBuffer byteBuffer;  fc=file.getChannel();  fc.position(file.length() - TAG_LENGTH);  byteBuffer=ByteBuffer.allocate(TAG_LENGTH);  fc.read(byteBuffer);  byteBuffer.flip();  read(byteBuffer);}  }
class C{  public void severe(Supplier<String> msgSupplier){  log(Level.SEVERE,msgSupplier);}  }
class C{  public boolean isQuit(){  return type == Type.QUIT;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  Object oldValue=evt.getOldValue();  Object newValue=evt.getNewValue();  if ((oldValue instanceof Document) || (newValue instanceof Document)) {    setDot(0);    if (oldValue != null) {      ((Document)oldValue).removeDocumentListener(this);    }    if (newValue != null) {      ((Document)newValue).addDocumentListener(this);    }  } else   if ("enabled".equals(evt.getPropertyName())) {    Boolean enabled=(Boolean)evt.getNewValue();    if (component.isFocusOwner()) {      if (enabled == Boolean.TRUE) {        if (component.isEditable()) {          setVisible(true);        }        setSelectionVisible(true);      } else {        setVisible(false);        setSelectionVisible(false);      }    }  } else   if ("caretWidth".equals(evt.getPropertyName())) {    Integer newWidth=(Integer)evt.getNewValue();    if (newWidth != null) {      caretWidth=newWidth.intValue();    } else {      caretWidth=-1;    }    repaint();  } else   if ("caretAspectRatio".equals(evt.getPropertyName())) {    Number newRatio=(Number)evt.getNewValue();    if (newRatio != null) {      aspectRatio=newRatio.floatValue();    } else {      aspectRatio=-1;    }    repaint();  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AltCNElement createAltCNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltCNElementImpl();}  }
class C{  @AfterClass public void entryCacheTestFini() throws Exception {  SortedMap<Integer,EntryCache<? extends EntryCacheCfg>> emptyCacheOrderMap=new TreeMap<>();  final Method[] defaultCacheMethods=super.cache.getClass().getDeclaredMethods();  for (  Method defaultCacheMethod : defaultCacheMethods) {    if (defaultCacheMethod.getName().equals("setCacheOrder")) {      defaultCacheMethod.setAccessible(true);      Object arglist[]=new Object[]{emptyCacheOrderMap};      defaultCacheMethod.invoke(cache,arglist);    }  }  for (  EntryCache<?> entryCache : cacheOrderMap.values()) {    entryCache.finalizeEntryCache();  }}  }
class C{  static public void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  @Override public MapboxMapMatching build() throws ServicesException {  validateAccessToken(accessToken);  validateProfile();  validateGpsPrecision();  validateTrace();  return new MapboxMapMatching(this);}  }
class C{  public static void pickImage(Context context,android.support.v4.app.Fragment fragment){  pickImage(context,fragment,REQUEST_PICK);}  }
class C{  protected void processContextConfig(Digester digester,URL contextXml){  if (log.isDebugEnabled()) {    log.debug("Processing context [" + context.getName() + "] configuration file ["+ contextXml+ "]");  }  InputSource source=null;  InputStream stream=null;  try {    source=new InputSource(contextXml.toString());    URLConnection xmlConn=contextXml.openConnection();    xmlConn.setUseCaches(false);    stream=xmlConn.getInputStream();  } catch (  Exception e) {    log.error(sm.getString("contextConfig.contextMissing",contextXml),e);  }  if (source == null) {    return;  }  try {    source.setByteStream(stream);    digester.setClassLoader(this.getClass().getClassLoader());    digester.setUseContextClassLoader(false);    digester.push(context.getParent());    digester.push(context);    XmlErrorHandler errorHandler=new XmlErrorHandler();    digester.setErrorHandler(errorHandler);    digester.parse(source);    if (errorHandler.getWarnings().size() > 0 || errorHandler.getErrors().size() > 0) {      errorHandler.logFindings(log,contextXml.toString());      ok=false;    }    if (log.isDebugEnabled()) {      log.debug("Successfully processed context [" + context.getName() + "] configuration file ["+ contextXml+ "]");    }  } catch (  SAXParseException e) {    log.error(sm.getString("contextConfig.contextParse",context.getName()),e);    log.error(sm.getString("contextConfig.defaultPosition","" + e.getLineNumber(),"" + e.getColumnNumber()));    ok=false;  }catch (  Exception e) {    log.error(sm.getString("contextConfig.contextParse",context.getName()),e);    ok=false;  } finally {    try {      if (stream != null) {        stream.close();      }    } catch (    IOException e) {      log.error(sm.getString("contextConfig.contextClose"),e);    }  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request,null,null);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public static boolean isHolderCapability(Capability<?> capability){  return capability == TeslaCapabilities.CAPABILITY_HOLDER;}  }
class C{  @Override public boolean isSortAscending(){  return sortAscending;}  }
class C{  @Override public BrdComponent copy(){  return new BrdComponent(this);}  }
class C{  protected boolean scrollBottom(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int lineCount=layout.getLineCount();  if (getBottomLine(widget) <= lineCount - 1) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(lineCount) - getInnerHeight(widget));    return true;  }  return false;}  }
class C{  public static <E extends Enum<E>>Builder<E> createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder<>(d,propertyName);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionPropertiesElement createEncryptionPropertiesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionPropertiesElementImpl();}  }
class C{  public boolean isCaptchaEnabled(){  return captchaEnabled;}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  private void processDelete(Set<DN> deleteDNset,boolean log){  if (log) {    writeLog(deleteDNset);  } else {    for (    DN baseDN : getBaseDNsToSearch()) {      doBaseDN(baseDN,deleteDNset);    }  }}  }
class C{  static public void assertNull(Object object){  assertNull(null,object);}  }
class C{  public synchronized void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  private boolean isScriptOwnMethodCall(Object receiver,String method){  if (!(receiver instanceof Script)) {    return false;  }  final Method[] scriptOwnMethods=receiver.getClass().getDeclaredMethods();  for (  Method declaredMethod : scriptOwnMethods) {    if (declaredMethod.getName().equals(method)) {      return true;    }  }  return false;}  }
class C{  public static String generateSourceID(String entityID){  if ((entityID == null) || (entityID.length() == 0)) {    return null;  }  MessageDigest md=null;  try {    md=MessageDigest.getInstance("SHA");  } catch (  NoSuchAlgorithmException e) {    debug.error("SAML2Utils.generateSourceID: ",e);    return null;  }  char chars[]=entityID.toCharArray();  byte bytes[]=new byte[chars.length];  for (int i=0; i < chars.length; i++) {    bytes[i]=(byte)chars[i];  }  md.update(bytes);  return SAML2Utils.byteArrayToString(md.digest());}  }
class C{  public void resetHeadingDisplayed(){  state.isHeadingDisplayed=false;}  }
class C{  public FrameBodyTPE3(){}  }
class C{  public void extend_selection_to_whole_connected_sets(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  set_interactive_state(((StateSelectedItem)interactive_state).extent_to_whole_connected_sets());}  }
class C{  public void createEntity(Map data) throws AMConsoleException {  String protocol=(String)data.remove(PROTOCOL);  if (protocol.equals(SAMLV2)) {    createSAMLv2Provider(data);  } else   if (protocol.equals(WSFED)) {    createWSFedProvider(data);  } else   if (protocol.equals(IDFF)) {    createIDFFProvider(data);  }}  }
class C{  boolean canRunInCurrentRunState(boolean periodic){  return isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown : executeExistingDelayedTasksAfterShutdown);}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  public BeanDescriptor(Class<?> beanClass){  this(beanClass,null);}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public JMenuBar(){  super();  setFocusTraversalKeysEnabled(false);  setSelectionModel(new DefaultSingleSelectionModel());  updateUI();}  }
class C{  public Object clone() throws CloneNotSupportedException {  return (IntStack)super.clone();}  }
class C{  public void fastForward(final long value,final TimeUnit units){  this.offset+=units.toMillis(value);}  }
class C{  public DefaultHandler2(){}  }
class C{  public TransformerFactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  ReasonsMask intersect(ReasonsMask mask){  ReasonsMask _mask=new ReasonsMask();  _mask.addReasons(new ReasonsMask(_reasons & mask.getReasons()));  return _mask;}  }
class C{  private static void checkAciForProxyAuthControl(Operation operation,Entry authorizationEntry) throws DirectoryException {  if (!AccessControlConfigManager.getInstance().getAccessControlHandler().mayProxy(operation.getClientConnection().getAuthenticationInfo().getAuthenticationEntry(),authorizationEntry,operation)) {    throw new DirectoryException(ResultCode.AUTHORIZATION_DENIED,ERR_PROXYAUTH_AUTHZ_NOT_PERMITTED.get(authorizationEntry.getName()));  }}  }
class C{  public static void define(String name){  Tag tag=new Tag(name);  TAGS.put(name,tag);}  }
class C{  public String encode(final String value,final String charset) throws EncoderException {  if (value == null) {    return null;  }  try {    return encodeText(value,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureElement createSignatureElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureElementImpl();}  }
class C{  protected void handleParseConversionException(Exception e) throws SAXException {  if (e instanceof RuntimeException)   throw (RuntimeException)e;  ParseConversionEvent pce=new ParseConversionEventImpl(ValidationEvent.ERROR,e.getMessage(),new ValidationEventLocatorImpl(context.getLocator()),e);  context.handleEvent(pce,true);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.StatusTypeImpl();}  }
class C{  public DigestException(String msg){  super(msg);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node refChild=null;  Document otherDoc;  doc=(Document)load("hc_staff",true);  otherDoc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=otherDoc.createTextNode("terday");{    boolean success=false;    try {      retval=titleAttr.insertBefore(textNode,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  @DataProvider(name="rsGroupIdProvider") private Object[][] rsGroupIdProvider(){  return new Object[][]{{(byte)1},{(byte)2}};}  }
class C{  private Object[] attrs(Schema schema,String... names){  AttributeType[] attrs=new AttributeType[names.length];  int i=0;  for (  String name : names) {    attrs[i++]=schema.getAttributeType(name);  }  return attrs;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void testPosPosFirstShorter(){  String numA="293478573489347658763745839457637";  String numB="2837462783428374767845648748973847593874837948575684767";  String res="2837462783428374767845615168483972194300564226167553530";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public GetPropertyActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){  this.sessionPropertyWhitelist=sessionPropertyWhitelist;  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  public Principal peerPrincipal(){  return !peerCertificates.isEmpty() ? ((X509Certificate)peerCertificates.get(0)).getSubjectX500Principal() : null;}  }
class C{  public boolean isEmpty(){  return map.size() == 0;}  }
class C{  public TRANSACTION_ROLLEDBACK(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public SuffixFileFilter(String[] suffixes,IOCase caseSensitivity){  if (suffixes == null) {    throw new IllegalArgumentException("The array of suffixes must not be null");  }  this.suffixes=new String[suffixes.length];  System.arraycopy(suffixes,0,this.suffixes,0,suffixes.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  ReplInputStream(ReplicationDomain domain){  this.domain=domain;  closed=false;}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  buf[bufOff++]=in;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  return resultLen;}  }
class C{  @Override public int hashCode(){  return year;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  forwardToServicesViewBean();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ErrorInfoParser.parse");  ErrorInfoList list=new ErrorInfoList();  try {    headerName(TokenTypes.ERROR_INFO);    while (lexer.lookAhead(0) != '\n') {      do {        ErrorInfo errorInfo=new ErrorInfo();        errorInfo.setHeaderName(SIPHeaderNames.ERROR_INFO);        this.lexer.SPorHT();        this.lexer.match('<');        URLParser urlParser=new URLParser((Lexer)this.lexer);        GenericURI uri=urlParser.uriReference(true);        errorInfo.setErrorInfo(uri);        this.lexer.match('>');        this.lexer.SPorHT();        super.parse(errorInfo);        list.add(errorInfo);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');        } else         break;      } while (true);    }    return list;  }  finally {    if (debug)     dbg_leave("ErrorInfoParser.parse");  }}  }
class C{  public PlaSide side_of(PlaPointFloat p_other,double p_tolerance){  double det=MathAux.determinant(dir_x,dir_y,p_other.v_x,p_other.v_y);  return PlaSide.get_side_of(det,p_tolerance);}  }
class C{  public void replaceCreationTemplate(Guid guid,String templateName,AttrSet attrSet) throws ConfigManagerException {  if (guid == null) {    guid=new Guid(_rootDN);  }  DN dn=DN.valueOf(guid.getDn());  String org="";  List<RDN> rdns=new ArrayList<>();  for (  RDN rdn : dn) {    rdns.add(0,rdn);  }  for (  RDN rdn : rdns) {    org=org + "/" + LDAPUtils.rdnValue(rdn);  }  String service=CREATIONPATH + "/" + templateName;  Map map=convertToMap(attrSet);  try {    replaceServiceAttributes(org,service,map);  } catch (  SMSException e) {    String args[]=new String[1];    args[0]=e.toString();    throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args));  }catch (  SSOException se) {    String args[]=new String[1];    args[0]=se.toString();    throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args));  }}  }
class C{  @Override public String toString(){  return getSerializedNameString();}  }
class C{  @Override public Principal authenticate(String username,String credentials){  return authenticate(username,new JAASCallbackHandler(this,username,credentials));}  }
class C{  public static String convertGenericToID3v23Genre(String value){  try {    int genreId=Integer.parseInt(value);    if (genreId < GenreTypes.getMaxGenreId()) {      return bracketWrap(String.valueOf(genreId));    } else {      return value;    }  } catch (  NumberFormatException nfe) {    Integer genreId=GenreTypes.getInstanceOf().getIdForName(value);    if (genreId != null) {      return bracketWrap(String.valueOf(genreId));    }    if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.RX.getDescription())) {      value=bracketWrap(ID3V2ExtendedGenreTypes.RX.name());    } else     if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.CR.getDescription())) {      value=bracketWrap(ID3V2ExtendedGenreTypes.CR.name());    } else     if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.RX.name())) {      value=bracketWrap(ID3V2ExtendedGenreTypes.RX.name());    } else     if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.CR.name())) {      value=bracketWrap(ID3V2ExtendedGenreTypes.CR.name());    }  }  return value;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  @Override public int lengthOfMonth(){switch (month) {case 2:    return (isLeapYear() ? 29 : 28);case 4:case 6:case 9:case 11:  return 30;default :return 31;}}  }
class C{  public boolean isDeleteAllowed(ServerManagedObject<?> managedObject,Collection<LocalizableMessage> unacceptableReasons) throws ConfigException {  return true;}  }
class C{  public void handleAddEntryButtonRequest(RequestInvocationEvent event) throws ModelControlException {  List currentEntries=getTableData();  Iterator i=getInstanceNames().iterator();  String moduleName=(String)i.next();  try {    AuthConfigurationEntry ace=new AuthConfigurationEntry(moduleName,REQUIRED_FLAG,"");    currentEntries.add(ace);    acModel.setEntries(currentEntries);    setPageSessionAttribute(ENTRY_LIST,acModel.getXMLValue(getRealmName(),getConfigName()));  } catch (  AMConfigurationException a) {    debug.warning("AuthConfigViewBean.handleAddEntryButtonRequest() " + "Adding new config entry failed",a);  }  cacheValues();  populateEntryTable();  forwardTo();}  }
class C{  public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem,ElemTemplateElement oldChildElem){  if (oldChildElem == null || oldChildElem.getParentElem() != this)   return null;  ElemTemplateElement prev=oldChildElem.getPreviousSiblingElem();  if (null != prev)   prev.m_nextSibling=newChildElem;  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;  newChildElem.m_parentNode=this;  oldChildElem.m_parentNode=null;  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;  oldChildElem.m_nextSibling=null;  return newChildElem;}  }
class C{  private Polyline smoothen_corners(Polyline p_polyline){  boolean polyline_changed=true;  while (polyline_changed) {    if (p_polyline.plaline_len() < 4)     return p_polyline;    polyline_changed=false;    PlaLineIntAlist line_arr=p_polyline.alist_copy(0);    for (int index=1; index < line_arr.size() - 2; ++index) {      PlaDirection d1=line_arr.get(index).direction();      PlaDirection d2=line_arr.get(index + 1).direction();      if (d1.is_multiple_of_45_degree() && d2.is_multiple_of_45_degree() && d1.projection(d2) != Signum.POSITIVE) {        PlaLineInt new_line=smoothen_corner(line_arr,index);        if (new_line == null) {          new_line=smoothen_sharp_corner(line_arr,index);        }        if (new_line == null)         continue;        polyline_changed=true;        PlaLineIntAlist tmp_lines=new PlaLineIntAlist(line_arr.size() + 1);        line_arr.append_to(tmp_lines,0,index + 1);        tmp_lines.add(new_line);        line_arr.append_to(tmp_lines,index + 2);        line_arr=tmp_lines;        ++index;      }    }    if (polyline_changed) {      p_polyline=new Polyline(line_arr);    }  }  return p_polyline;}  }
class C{  public WritableRaster createWritableChild(int parentX,int parentY,int w,int h,int childMinX,int childMinY,int bandList[]){  if (parentX < this.minX) {    throw new RasterFormatException("parentX lies outside raster");  }  if (parentY < this.minY) {    throw new RasterFormatException("parentY lies outside raster");  }  if ((parentX + w < parentX) || (parentX + w > this.width + this.minX)) {    throw new RasterFormatException("(parentX + width) is outside raster");  }  if ((parentY + h < parentY) || (parentY + h > this.height + this.minY)) {    throw new RasterFormatException("(parentY + height) is outside raster");  }  SampleModel sm;  if (bandList != null) {    sm=sampleModel.createSubsetSampleModel(bandList);  } else {    sm=sampleModel;  }  int deltaX=childMinX - parentX;  int deltaY=childMinY - parentY;  return new WritableRaster(sm,getDataBuffer(),new Rectangle(childMinX,childMinY,w,h),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method,final boolean itf){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor(),itf);}  }
class C{  private HashMap<AccountStatusNotificationType,List<NotificationMessageTemplateElement>> parseTemplates(SMTPAccountStatusNotificationHandlerCfg configuration) throws ConfigException {  HashMap<AccountStatusNotificationType,List<NotificationMessageTemplateElement>> map=new HashMap<>();  for (  String s : configuration.getMessageTemplateFile()) {    int colonPos=s.indexOf(':');    if (colonPos < 0) {      throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_NO_COLON.get(s,configuration.dn()));    }    String notificationTypeName=s.substring(0,colonPos).trim();    AccountStatusNotificationType t=AccountStatusNotificationType.typeForName(notificationTypeName);    if (t == null) {      throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_INVALID_NOTIFICATION_TYPE.get(s,configuration.dn(),notificationTypeName));    } else     if (map.containsKey(t)) {      throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_DUPLICATE_TYPE.get(configuration.dn(),notificationTypeName));    }    String path=s.substring(colonPos + 1).trim();    File f=new File(path);    if (!f.isAbsolute()) {      f=new File(DirectoryServer.getInstanceRoot() + File.separator + path);    }    if (!f.exists()) {      throw new ConfigException(ERR_SMTP_ASNH_TEMPLATE_NO_SUCH_FILE.get(path,configuration.dn()));    }    map.put(t,parseTemplateFile(f));    if (logger.isTraceEnabled()) {      logger.trace("Decoded template elment list for type " + t.getName());    }  }  return map;}  }
class C{  @Override public void start() throws java.lang.Exception {  start(MembershipService.MBR_RX);  start(MembershipService.MBR_TX);}  }
class C{  public void resetLastRefusedItems(){  lastRefusedAuthType=null;  lastRefusedChain=null;  lastRefusedCause=null;}  }
class C{  void replace(DocumentFilter.FilterBypass fb,int offset,int length,String text,AttributeSet attrs) throws BadLocationException {  ReplaceHolder rh=getReplaceHolder(fb,offset,length,text,attrs);  replace(rh);}  }
class C{  public CannotReadVideoException(){  super();}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,ContentHandler handler) throws TransformerException {  SerializationHandler xoh=this.getSerializationHandler();  SerializationHandler savedHandler=xoh;  try {    xoh.flushPending();    LexicalHandler lex=null;    if (handler instanceof LexicalHandler) {      lex=(LexicalHandler)handler;    }    m_serializationHandler=new ToXMLSAXHandler(handler,lex,savedHandler.getEncoding());    m_serializationHandler.setTransformer(this);    executeChildTemplates(elem,true);  } catch (  TransformerException e) {    throw e;  }catch (  SAXException se) {    throw new TransformerException(se);  } finally {    m_serializationHandler=savedHandler;  }}  }
class C{  static void checkCorrelationHeader(CorrelationHeader corrH,String requestMessageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {  if (corrH == null) {    if (isServer) {      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,new SOAPFaultDetail(SOAPFaultDetail.ID_STAR_MSG_NOT_UNSTD,null,null));      throw new SOAPFaultException(new Message(sf));    } else {      throw new SOAPBindingException(bundle.getString("CorrelationHeaderNull"));    }  }  String messageID=corrH.getMessageID();  try {    checkActorAndMustUnderstand(corrH.getActor(),corrH.getMustUnderstand(),messageID,isServer);  } catch (  SOAPFaultException sfe) {    sfe.getSOAPFaultMessage().getSOAPFault().getDetail().setCorrelationHeader(corrH);    throw sfe;  }  Date timestamp=corrH.getTimestamp();  Date now=newDate();  if ((now.getTime() - timestamp.getTime()) > stale_time_limit) {    if (isServer) {      SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.STALE_MSG,messageID,null);      sfd.setCorrelationHeader(corrH);      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);      throw new SOAPFaultException(new Message(sf));    } else {      throw new SOAPBindingException(bundle.getString("staleMsg"));    }  }  Long prevMsgIDTime=(Long)messageIDMap.get(messageID);  long currentTime=currentTimeMillis();  if (prevMsgIDTime != null && currentTime - prevMsgIDTime.longValue() < stale_time_limit) {    if (isServer) {      SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.DUPLICATE_MSG,messageID,null);      sfd.setCorrelationHeader(corrH);      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);      throw new SOAPFaultException(new Message(sf));    } else {      throw new SOAPBindingException(bundle.getString("dupMsg"));    }  } else {synchronized (messageIDMap) {      if (debug.messageEnabled()) {        debug.message("Utils.checkCorrelationHeader: adding " + "messageID: " + messageID);      }      messageIDMap.put(messageID,new Long(currentTime));    }  }  String refToMessageID=corrH.getRefToMessageID();  if (refToMessageID != null && requestMessageID != null && !refToMessageID.equals(requestMessageID)) {    if (isServer) {      SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.INVALID_REF_TO_MSG_ID,messageID,null);      sfd.setCorrelationHeader(corrH);      SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);      throw new SOAPFaultException(new Message(sf));    } else {      throw new SOAPBindingException(bundle.getString("invalidRef"));    }  }}  }
class C{  public SessionTimedOutException(Throwable t){  super(t);}  }
class C{  public FrameBodyTMOO(){}  }
class C{  private Map createSSOMap(String authLevel,String metaAlias,boolean isFedCookiePresent,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws FSPreLoginException {  try {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSPreLogin::createSSOMap called with authLevel =" + authLevel + " metaAlias ="+ metaAlias);    }    if (!isFedCookiePresent) {      String actionOnNoFedCookie=httpRequest.getParameter(IFSConstants.ACTION_ON_NO_FED_COOKIE);      if (actionOnNoFedCookie != null && actionOnNoFedCookie.equals(IFSConstants.LOCAL_LOGIN)) {        FSUtils.forwardRequest(httpRequest,httpResponse,getLoginURL(false,metaAlias,httpRequest));        return null;      }    }    Map headerMap=setHeaderMap(httpRequest);    FSLoginHelper loginHelper=new FSLoginHelper(httpRequest);    String targetURL=httpRequest.getParameter(IFSConstants.GOTOKEY);    if (targetURL == null || targetURL.length() <= 0) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPreLogin::createSSOMap." + "no goto in queryString.Assinging targetURL = " + homePage);      }      targetURL=homePage;    }    Map retMap=loginHelper.createAuthnRequest(headerMap,targetURL,authLevel,metaAlias,null,isFedCookiePresent);    String requestID=null;    String responseData=(String)retMap.get(IFSConstants.RESPONSE_DATA_KEY);    if (responseData != null && responseData.length() != 0) {      return retMap;    }    requestID=(String)retMap.get(IFSConstants.AUTH_REQUEST_ID);    String URL=(String)retMap.get(IFSConstants.URL_KEY);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSPreLogin::createSSOMap requestID" + requestID + " URL "+ URL);    }    if (requestID != null && URL == null) {      String queryString=getQueryString(true,metaAlias,httpRequest);      String returnURL=new StringBuffer().append(commonLoginPage).append(IFSConstants.QUESTION_MARK).append(queryString).append(IFSConstants.AMPERSAND).append(IFSConstants.AUTH_REQUEST_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(requestID)).append(IFSConstants.AMPERSAND).append(IFSConstants.META_ALIAS).append(IFSConstants.EQUAL_TO).append(httpRequest.getParameter(IFSConstants.META_ALIAS)).toString();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPreLogin::createSSOMap framedlogin url " + returnURL);      }      retMap.put(IFSConstants.URL_KEY,returnURL);    }    return retMap;  } catch (  FSLoginHelperException exp) {    FSUtils.debug.error("FSPreLogin::setMetaInfo." + " FSLoginHelperException Exception caught. ",exp);    throw new FSPreLoginException("FSPreLogin::FSLoginHelperException");  }}  }
class C{  private void initDefaultRule(ErrorListener errorListener) throws TransformerException {  m_defaultRule=new ElemTemplate();  m_defaultRule.setStylesheet(this);  XPath defMatch=new XPath("*",this,this,XPath.MATCH,errorListener);  m_defaultRule.setMatch(defMatch);  ElemApplyTemplates childrenElement=new ElemApplyTemplates();  childrenElement.setIsDefaultTemplate(true);  childrenElement.setSelect(m_selectDefault);  m_defaultRule.appendChild(childrenElement);  m_startRule=m_defaultRule;  m_defaultTextRule=new ElemTemplate();  m_defaultTextRule.setStylesheet(this);  defMatch=new XPath("text() | @*",this,this,XPath.MATCH,errorListener);  m_defaultTextRule.setMatch(defMatch);  ElemValueOf elemValueOf=new ElemValueOf();  m_defaultTextRule.appendChild(elemValueOf);  XPath selectPattern=new XPath(".",this,this,XPath.SELECT,errorListener);  elemValueOf.setSelect(selectPattern);  m_defaultRootRule=new ElemTemplate();  m_defaultRootRule.setStylesheet(this);  defMatch=new XPath("/",this,this,XPath.MATCH,errorListener);  m_defaultRootRule.setMatch(defMatch);  childrenElement=new ElemApplyTemplates();  childrenElement.setIsDefaultTemplate(true);  m_defaultRootRule.appendChild(childrenElement);  childrenElement.setSelect(m_selectDefault);}  }
class C{  public InputSource(Reader characterStream){  setCharacterStream(characterStream);}  }
class C{  @DataProvider(name="passwordPolicyRequestControlData") public Object[][] createPasswordPolicyRequestControlData(){  return new Object[][]{{true},{false}};}  }
class C{  public static ServerDescriptor createStandalone(Map<ADSContext.ServerProperty,Object> adsProperties){  ServerDescriptor desc=new ServerDescriptor();  desc.setAdsProperties(adsProperties);  return desc;}  }
class C{  public static void sort(int[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  public static void removeCryptographyRestrictions(){  try {    Field field=Class.forName("javax.crypto.JceSecurity").getDeclaredField("isRestricted");    field.setAccessible(true);    if (field.getBoolean(null)) {      field.set(null,java.lang.Boolean.FALSE);    } else {      field.setAccessible(false);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public boolean offer(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.offer(e);    if (q.peek() == e) {      leader=null;      available.signal();    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public void replacePolicy(String realmName,Policy policy) throws AMConsoleException {  try {    String[] params={realmName,policy.getName()};    logEvent("ATTEMPT_MODIFY_POLICY",params);    PolicyManager policyManager=getPolicyManager(realmName);    policyManager.replacePolicy(policy);    logEvent("SUCCEED_MODIFY_POLICY",params);  } catch (  PolicyException e) {    String strError=getErrorString(e);    String[] params={realmName,policy.getName(),strError};    logEvent("POLICY_EXCEPTION_MODIFY_POLICY",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String strError=getErrorString(e);    String[] params={realmName,policy.getName(),strError};    logEvent("SSO_EXCEPTION_MODIFY_POLICY",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public void addConfiguration(InputStream in) throws SMSException, SSOException {  ServiceManager sm=new ServiceManager(token);  Document doc=SMSSchema.getXMLDocument(in);  NodeList nodes=doc.getElementsByTagName(SMSUtils.SERVICE);  for (int i=0; (nodes != null) && (i < nodes.getLength()); i++) {    Node serviceNode=nodes.item(i);    String sName=XMLUtils.getNodeAttributeValue(serviceNode,SMSUtils.NAME);    String sVersion=XMLUtils.getNodeAttributeValue(serviceNode,SMSUtils.VERSION);    Node configNode;    if (sName.equals(serviceName) && (sVersion.equals(version)) && ((configNode=XMLUtils.getChildNode(serviceNode,SMSUtils.CONFIGURATION)) != null)) {      CreateServiceConfig.createService(sm,sName,sVersion,configNode,null);    }  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  protected boolean shouldStartEditingTimer(EventObject event){  if ((event instanceof MouseEvent) && SwingUtilities.isLeftMouseButton((MouseEvent)event)) {    MouseEvent me=(MouseEvent)event;    return (me.getClickCount() == 1 && inHitRegion(me.getX(),me.getY()));  }  return false;}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);  ServerSiteModel model=(ServerSiteModel)getModel();  ptModel.setPageTitleText(model.getEditServerPageTitle(serverName));  try {    setConfigProperties(serverName,model);  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  protected String buildIndexLine(CommandSender sender,HelpTopic topic){  StringBuilder line=new StringBuilder();  line.append(ChatColor.GOLD);  line.append(topic.getName());  line.append(": ");  line.append(ChatColor.WHITE);  line.append(topic.getShortText());  return line.toString();}  }
class C{  public void increment(){  counter.getAndIncrement();}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.SPSSODescriptorType createSPSSODescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.SPSSODescriptorTypeImpl();}  }
class C{  public HashSet(Collection<? extends E> c){  map=new HashMap<>(Math.max((int)(c.size() / .75f) + 1,16));  addAll(c);}  }
class C{  public CoreTokenException(int errorCode,Object[] params,Throwable cause){  super(cause);  this.errorCode=errorCode;  this.params=params;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public void writeXMLHeader(){  buffer.append("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n");}  }
class C{  public void next(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        currentCard=(i + 1) % ncomponents;        comp=parent.getComponent(currentCard);        comp.setVisible(true);        parent.validate();        return;      }    }    showDefaultComponent(parent);  }}  }
class C{  public void incrementCount(){  filesPerKeystoreCounter++;}  }
class C{  private static void updateWindowUI(Window window){  SwingUtilities.updateComponentTreeUI(window);  Window ownedWins[]=window.getOwnedWindows();  for (  Window w : ownedWins) {    updateWindowUI(w);  }}  }
class C{  private void toString(StringBuilder buffer){  buffer.append("Modification(").append(modificationType).append(", ").append(attribute);}  }
class C{  public static Border createRaisedSoftBevelBorder(){  if (sharedSoftRaisedBevel == null) {    sharedSoftRaisedBevel=new SoftBevelBorder(BevelBorder.RAISED);  }  return sharedSoftRaisedBevel;}  }
class C{  public void testSubtractEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="123121247898748224119637948679166971643339.7522230419";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public static String formatStation(int station){  float frequency=(float)station / CONVERT_RATE;  String result=String.format(Locale.ENGLISH,"%.1f",Float.valueOf(frequency));  return result;}  }
class C{  private int trailingCdWhitespaceStart(int startPos,int limitPos){  if (fLevels != null) {    final byte baseLevel=(byte)(fIsDirectionLTR ? 0 : 1);    for (int cdWsStart=limitPos; --cdWsStart >= startPos; ) {      if ((fLevels[cdWsStart] % 2) == baseLevel || Character.getDirectionality(fChars[cdWsStart]) != Character.DIRECTIONALITY_WHITESPACE) {        return ++cdWsStart;      }    }  }  return startPos;}  }
class C{  public static byte[] toBytes(long n,byte[] b,int offset){  b[offset + 7]=(byte)(n);  n>>>=8;  b[offset + 6]=(byte)(n);  n>>>=8;  b[offset + 5]=(byte)(n);  n>>>=8;  b[offset + 4]=(byte)(n);  n>>>=8;  b[offset + 3]=(byte)(n);  n>>>=8;  b[offset + 2]=(byte)(n);  n>>>=8;  b[offset + 1]=(byte)(n);  n>>>=8;  b[offset + 0]=(byte)(n);  return b;}  }
class C{  public String toString(){  return new String(super.toString() + " with current value: " + getStateLabel(getValue()));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ErrorPage[");  if (exceptionType == null) {    sb.append("errorCode=");    sb.append(errorCode);  } else {    sb.append("exceptionType=");    sb.append(exceptionType);  }  sb.append(", location=");  sb.append(location);  sb.append("]");  return (sb.toString());}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  handler.pushElemTemplateElement(elem);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  @Override public StringBuffer format(long number,StringBuffer result,FieldPosition fieldPosition){  fieldPosition.setBeginIndex(0);  fieldPosition.setEndIndex(0);  return format(number,result,fieldPosition.getFieldDelegate());}  }
class C{  public UserPrincipal principal(){  return who;}  }
class C{  public DSMLModifyDNOperation(LDAPConnection connection){  this.connection=connection;}  }
class C{  public Collection values(){  if (values == null) {    values=new SynchronizedCollection(new ValueCollection(),this);  }  return values;}  }
class C{  private WeakReference<Object> newWeakReference(ReferenceQueue<Object> queue){  Object o=new Object();  WeakReference<Object> ref=new WeakReference<Object>(o,queue);  assertSame(o,ref.get());  return ref;}  }
class C{  public void applyModifications(List<Modification> mods) throws DirectoryException {  for (  Modification m : mods) {    applyModification(m);  }}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append(x);  result.append('x');  result.append(y);  result.append(" um");  return result.toString();}  }
class C{  public Set<Map.Entry<Object,Object>> entrySet(){  return map.entrySet();}  }
class C{  public boolean hasOrdering(Object preferred,Object other){  DigraphNode preferredPONode=(DigraphNode)poNodes.get(preferred);  DigraphNode otherPONode=(DigraphNode)poNodes.get(other);  return preferredPONode.hasEdge(otherPONode);}  }
class C{  public static int computeStringWidth(FontMetrics fm,String str){  return SwingUtilities2.stringWidth(null,fm,str);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.WebSiteElement createWebSiteElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.WebSiteElementImpl();}  }
class C{  public void die(){  int size=edits.size();  for (int i=size - 1; i >= 0; i--) {    UndoableEdit e=edits.elementAt(i);    e.die();  }  super.die();}  }
class C{  @Override public void run(){  while (true) {    TimerTask task;synchronized (this) {      if (cancelled) {        return;      }      if (tasks.isEmpty()) {        if (finished) {          return;        }        try {          this.wait();        } catch (        InterruptedException ignored) {        }        continue;      }      long currentTime=System.currentTimeMillis();      task=tasks.minimum();      long timeToSleep;synchronized (task.lock) {        if (task.cancelled) {          tasks.delete(0);          continue;        }        timeToSleep=task.when - currentTime;      }      if (timeToSleep > 0) {        try {          this.wait(timeToSleep);        } catch (        InterruptedException ignored) {        }        continue;      }synchronized (task.lock) {        int pos=0;        if (tasks.minimum().when != task.when) {          pos=tasks.getTask(task);        }        if (task.cancelled) {          tasks.delete(tasks.getTask(task));          continue;        }        task.setScheduledTime(task.when);        tasks.delete(pos);        if (task.period >= 0) {          if (task.fixedRate) {            task.when=task.when + task.period;          } else {            task.when=System.currentTimeMillis() + task.period;          }          insertTask(task);        } else {          task.when=0;        }      }    }    boolean taskCompletedNormally=false;    try {      task.run();      taskCompletedNormally=true;    }  finally {      if (!taskCompletedNormally) {synchronized (this) {          cancelled=true;        }      }    }  }}  }
class C{  public org.omg.DynamicAny.DynAny copy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("copy",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    return $self.copy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static RunStats delegateGetBucketForUuids(int buckets) throws Exception {  Long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.UUID,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,null,null,null,null,ibg.generateBuckets(),null,null,null);  logger.debug("test to getBucket for the bucket distribution on UUIDs");  HashMap<Long,List<Object>> hm=new HashMap<>();  SummaryStatistics stats=new SummaryStatistics();  UUID[] uuid=new UUID[10000];  for (int i=0; i < 10000; i++) {    uuid[i]=UUID.randomUUID();  }  for (int inputUuid=0; inputUuid < 10000; inputUuid++) {    Long bucketId=locator.getBucket(uuid[inputUuid],FieldDataType.UUID);    calculate(hm,stats,bucketId,inputUuid);  }  Long runTime=System.currentTimeMillis() - startTime;  RunStats runStats=new RunStats("BucketForUUIDs",FieldDataType.UUID,runTime,stats,hm);  logger.debug(runStats.toString());  return runStats;}  }
class C{  public static void unbindContext(Object obj,Object token){  if (ContextAccessController.checkSecurityToken(obj,token)) {    objectBindings.remove(obj);  }}  }
class C{  @Override public String toString(){  String s=null;  try {    JSONObject jo=toJSONObject();    s=(jo == null) ? super.toString() : jo.toString(2);  } catch (  JSONException joe) {    PolicyConstants.DEBUG.error("Entitlement.toString()",joe);  }  return s;}  }
class C{  public void registerExtension(ExtensionNamespaceSupport extNsSpt){  String namespace=extNsSpt.getNamespace();  if (namespaceIndex(namespace,m_extensions) == -1) {    m_extensions.add(extNsSpt);    if (m_unregisteredExtensions.contains(namespace))     m_unregisteredExtensions.remove(namespace);  }}  }
class C{  private void initResponseSource() throws IOException {  responseSource=ResponseSource.NETWORK;  if (!policy.getUseCaches())   return;  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache == null)   return;  CacheResponse candidate=responseCache.get(uri,method,requestHeaders.getHeaders().toMultimap(false));  if (candidate == null)   return;  Map<String,List<String>> responseHeadersMap=candidate.getHeaders();  cachedResponseBody=candidate.getBody();  if (!acceptCacheResponseType(candidate) || responseHeadersMap == null || cachedResponseBody == null) {    Util.closeQuietly(cachedResponseBody);    return;  }  RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(responseHeadersMap,true);  cachedResponseHeaders=new ResponseHeaders(uri,rawResponseHeaders);  long now=System.currentTimeMillis();  this.responseSource=cachedResponseHeaders.chooseResponseSource(now,requestHeaders);  if (responseSource == ResponseSource.CACHE) {    this.cacheResponse=candidate;    setResponse(cachedResponseHeaders,cachedResponseBody);  } else   if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    this.cacheResponse=candidate;  } else   if (responseSource == ResponseSource.NETWORK) {    Util.closeQuietly(cachedResponseBody);  } else {    throw new AssertionError();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildnomodificationallowederr.class,args);}  }
class C{  public PolicySet toXACML(String realm,PrivilegeSet privilegeSet) throws EntitlementException {  PolicySet policySet=XACMLPrivilegeUtils.privilegesToPolicySet(realm,privilegeSet.getPrivileges());  for (  ReferralPrivilege referralPrivilege : privilegeSet.getReferralPrivileges()) {    try {      Policy policy=XACMLPrivilegeUtils.referralToPolicy(referralPrivilege);      XACMLPrivilegeUtils.addPolicyToPolicySet(policy,policySet);    } catch (    JSONException e) {      throw new EntitlementException(JSON_PARSE_ERROR,e);    }catch (    JAXBException e) {      throw new EntitlementException(JSON_PARSE_ERROR,e);    }  }  return policySet;}  }
class C{  @SuppressWarnings("fallthrough") private void calculateType(){  int ret=TYPE_IDENTITY;  boolean sgn0, sgn1;  double M0, M1, M2, M3;  updateState();switch (state) {default :    stateError();case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):  ret=TYPE_TRANSLATION;case (APPLY_SHEAR | APPLY_SCALE):if ((M0=m00) * (M2=m01) + (M3=m10) * (M1=m11) != 0) {  this.type=TYPE_GENERAL_TRANSFORM;  return;}sgn0=(M0 >= 0.0);sgn1=(M1 >= 0.0);if (sgn0 == sgn1) {if (M0 != M1 || M2 != -M3) {ret|=(TYPE_GENERAL_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 * M1 - M2 * M3 != 1.0) {ret|=(TYPE_GENERAL_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_GENERAL_ROTATION;}} else {if (M0 != -M1 || M2 != M3) {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP | TYPE_GENERAL_SCALE);} else if (M0 * M1 - M2 * M3 != 1.0) {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP | TYPE_UNIFORM_SCALE);} else {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP);}}break;case (APPLY_SHEAR | APPLY_TRANSLATE):ret=TYPE_TRANSLATION;case (APPLY_SHEAR):sgn0=((M0=m01) >= 0.0);sgn1=((M1=m10) >= 0.0);if (sgn0 != sgn1) {if (M0 != -M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 != 1.0 && M0 != -1.0) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_QUADRANT_ROTATION;}} else {if (M0 == M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_FLIP | TYPE_UNIFORM_SCALE);} else {ret|=(TYPE_QUADRANT_ROTATION | TYPE_FLIP | TYPE_GENERAL_SCALE);}}break;case (APPLY_SCALE | APPLY_TRANSLATE):ret=TYPE_TRANSLATION;case (APPLY_SCALE):sgn0=((M0=m00) >= 0.0);sgn1=((M1=m11) >= 0.0);if (sgn0 == sgn1) {if (sgn0) {if (M0 == M1) {ret|=TYPE_UNIFORM_SCALE;} else {ret|=TYPE_GENERAL_SCALE;}} else {if (M0 != M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 != -1.0) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_QUADRANT_ROTATION;}}} else {if (M0 == -M1) {if (M0 == 1.0 || M0 == -1.0) {ret|=TYPE_FLIP;} else {ret|=(TYPE_FLIP | TYPE_UNIFORM_SCALE);}} else {ret|=(TYPE_FLIP | TYPE_GENERAL_SCALE);}}break;case (APPLY_TRANSLATE):ret=TYPE_TRANSLATION;break;case (APPLY_IDENTITY):break;}this.type=ret;}  }
class C{  public ServiceInformationHolder(org.omg.CORBA.ServiceInformation arg){  value=arg;}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  if (signed && (xmlString != null)) {    return xmlString;  }  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAMLConstants.assertionDeclareStr;  }  if (includeNS) {    appendNS="saml:";  }  String dateStr=null;  if (_issueInstant != null) {    dateStr=DateUtils.toUTCDateFormat(_issueInstant);  }  xml.append("<").append(appendNS).append("Assertion").append(" ").append(NS).append(" ").append("MajorVersion").append("=\"").append(_majorVersion).append("\"").append(" ").append("MinorVersion").append("=\"").append(_minorVersion).append("\"").append(" ").append("AssertionID=\"").append(_assertionID.getAssertionIDReference()).append("\"").append(" ").append("Issuer").append("=\"").append(_issuer).append("\"").append(" ").append("IssueInstant").append("=\"").append(dateStr).append("\"").append(" ").append(">").append(sc.NL);  if (_conditions != null) {    xml.append(_conditions.toString(includeNS,false));  }  if (_advice != null) {    xml.append(_advice.toString(includeNS,false));  }  Iterator i=getStatement().iterator();  while (i.hasNext()) {    Statement st=(Statement)i.next();    xml.append(st.toString(includeNS,declareNS));  }  if (signed && (signatureString != null)) {    xml.append(signatureString);  }  String o=SAMLUtils.makeEndElementTagXML("Assertion",includeNS);  xml.append(o);  return xml.toString();}  }
class C{  public void invoke(Context context,Map<String,Object> syncFailure,Exception failureCause) throws SyncHandlerException {}  }
class C{  private Map replaceMapKey(Map attributes,Set attributeNames){  if (attributeNames != null) {    Iterator iter=attributeNames.iterator();    while (iter.hasNext()) {      String attrName=(String)iter.next();      String attrNameLower=attrName.toLowerCase();      if (attributes.containsKey(attrNameLower)) {        Object attrValue=attributes.get(attrNameLower);        attributes.remove(attrNameLower);        attributes.put(attrName,attrValue);      }    }  }  return attributes;}  }
class C{  public boolean isRevocationValid(){  if (basicResp == null)   return false;  if (signCerts.size() < 2)   return false;  try {    X509Certificate[] cs=(X509Certificate[])getSignCertificateChain();    SingleResp sr=basicResp.getResponses()[0];    CertificateID cid=sr.getCertID();    X509Certificate sigcer=getSigningCertificate();    X509Certificate isscer=cs[1];    CertificateID tis=SignUtils.generateCertificateId(isscer,sigcer.getSerialNumber(),cid.getHashAlgOID());    return tis.equals(cid);  } catch (  Exception ignored) {  }  return false;}  }
class C{  public SAMLv2AttrAuthorityViewBean(){  super("SAMLv2AttrAuthority");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public void close(boolean force) throws IOException {  if (isOpen() || force) {    close();  }}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,int encoding,ASN1Primitive externalData){  setDirectReference(directReference);  setIndirectReference(indirectReference);  setDataValueDescriptor(dataValueDescriptor);  setEncoding(encoding);  setExternalContent(externalData.toASN1Primitive());}  }
class C{  private void startCommonRegistry() throws Exception {  final InetAddress listenAddress=jmxConnectionHandler.getListenAddress();  int registryPort=jmxConnectionHandler.getListenPort();  if (logger.isTraceEnabled()) {    logger.trace("start or reach an RMI registry on port %d",registryPort);  }  try {    if (registry == null) {      rmiSsf=new OpendsRmiServerSocketFactory(listenAddress);      registry=LocateRegistry.createRegistry(registryPort,null,rmiSsf);    }  } catch (  RemoteException re) {    if (logger.isTraceEnabled()) {      logger.trace("cannot create the RMI registry -> already done ?");    }    try {      Registry reg=LocateRegistry.getRegistry(registryPort);      reg.list();      registry=reg;    } catch (    Exception e) {      if (logger.isTraceEnabled()) {        logger.trace("exception thrown while pinging the RMI registry");        logger.traceException(re);      }      throw re;    }    if (logger.isTraceEnabled()) {      logger.trace("RMI was registry already started");    }  }}  }
class C{  public boolean argumentsPresent(){  if (argList != null) {    for (    Argument arg : argList) {      if (arg.isPresent()) {        return true;      }    }  }  return false;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequiredElementsElement createRequiredElementsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequiredElementsElementImpl();}  }
class C{  private void createSubcontexts(javax.naming.Context ctx,String name) throws NamingException {  javax.naming.Context currentContext=ctx;  StringTokenizer tokenizer=new StringTokenizer(name,"/");  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if ((!token.equals("")) && (tokenizer.hasMoreTokens())) {      try {        currentContext=currentContext.createSubcontext(token);      } catch (      NamingException e) {        currentContext=(javax.naming.Context)currentContext.lookup(token);      }    }  }}  }
class C{  public CorrelationHeader(){  messageID=SAMLUtils.generateID();  id=messageID;  timestamp=newDate();  actor=SOAPBindingConstants.DEFAULT_SOAP_ACTOR;  mustUnderstand=Boolean.TRUE;}  }
class C{  public InternalSearchOperation processSearch(final SearchRequest request,InternalSearchListener searchListener){  InternalSearchOperation searchOperation=new InternalSearchOperation(this,nextOperationID(),nextMessageID(),request,searchListener);  searchOperation.run();  return searchOperation;}  }
class C{  public boolean isServerTerminated(){  try {    process.exitValue();  } catch (  IllegalThreadStateException itse) {    return false;  }  return true;}  }
class C{  public void testClearBitNegativeInside3(){  String as="-18446744073709551615";  int number=2;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.clearBit(number);  assertEquals(as,result.toString());}  }
class C{  private static String extractEntryUUID(List<Attribute> entryUUIDAttributes,DN entryDN){  if (!entryUUIDAttributes.isEmpty()) {    Attribute uuidAttr=entryUUIDAttributes.get(0);    if (!uuidAttr.isEmpty()) {      return uuidAttr.iterator().next().toString();    }  }  if (logger.isTraceEnabled()) {    logger.trace("Replication requires an entryUUID attribute in order " + "to perform conflict resolution, but none was " + "found in entry \"%s\": generating virtual entryUUID instead",entryDN);  }  return entryDN.toUUID().toString();}  }
class C{  public LayoutFocusTraversalPolicy(){  super(new LayoutComparator());}  }
class C{  public synchronized void ensureTestDocussandraRunning(String cassandraSeeds) throws IOException, IllegalAccessException, InstantiationException {  if (restExpressRunning == false) {    LOGGER.info("Starting RestExpress server...");    if (cassandraSeeds != null) {      String[] params=new String[1];      params[0]="local_test";      server=Main.initializeServer(params,cassandraSeeds);    } else {      server=Main.initializeServer(new String[0],null);    }    restExpressRunning=true;  }}  }
class C{  private Base64(){}  }
class C{  private <M extends Configuration>void deregisterDelayedAddListener(DN baseDN,ConfigurationAddListener<M> listener) throws ConfigException {  DN parentDN=baseDN.parent();  int delayWrappers=0;  while (parentDN != null) {    if (!configRepository.hasEntry(parentDN)) {      parentDN=parentDN.parent();      delayWrappers++;    } else {      for (      ConfigAddListener configListener : configRepository.getAddListeners(parentDN)) {        if (configListener instanceof DelayedConfigAddListener) {          DelayedConfigAddListener delayListener=(DelayedConfigAddListener)configListener;          ConfigAddListener wrappedListener;          int i=delayWrappers;          for (; i > 0; i--) {            wrappedListener=delayListener.getDelayedAddListener();            if (wrappedListener instanceof DelayedConfigAddListener) {              delayListener=(DelayedConfigAddListener)configListener;            } else {              break;            }          }          if (i > 0) {            continue;          }          ConfigAddListener delayedListener=delayListener.getDelayedAddListener();          if (delayedListener instanceof ConfigAddListenerAdaptor) {            ConfigAddListenerAdaptor<?> adaptor=(ConfigAddListenerAdaptor<?>)delayedListener;            ServerManagedObjectAddListener<?> l2=adaptor.getServerManagedObjectAddListener();            if (l2 instanceof ServerManagedObjectAddListenerAdaptor<?>) {              ServerManagedObjectAddListenerAdaptor<?> adaptor2=(ServerManagedObjectAddListenerAdaptor<?>)l2;              if (adaptor2.getConfigurationAddListener() == listener) {                configRepository.deregisterAddListener(parentDN,configListener);              }            }          }        }      }      return;    }  }}  }
class C{  public boolean isValid(String text){  for (int i=0; i < text.length(); ++i) {    char ch=text.charAt(i);    if (ch == '\u00A7' || ch == '\n')     continue;    if (chars.get(ch) == null)     return false;  }  return true;}  }
class C{  public Builder names(final Collection<String> names){  this.names.addAll(names);  return this;}  }
class C{  @DataProvider(name="invalidLDIFChangeRecords") public Object[][] createInvalidLDIFChangeRecords(){  return new Object[][]{{"changetype: add\n" + "objectClass: top\n" + "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "dn: cn=john smith, dc=com\n" + "changetype: add\n"+ "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{": cn=john smith, dc=com\n" + "changetype: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"x: cn=john smith, dc=com\n" + "changetype: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: foo\n" + "changetype: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn,=john smith, dc=com\n" + "changetype: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "chaxxngetype: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype: foo\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype:: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + ": add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype:\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype: add\n" + "xxxx\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype: add\n" + "objectClass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"+ "cn: john\n"},{"dn: cn=john smith, dc=com\n" + "changetype: add\n" + ": top\n"+ "objectClass: person\n"+ "cn: john\n"+ "objectClass: person\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype: add\n" + "objectclass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"+ "description:: YnJva2VuIGJhc2U2NA*=="},{"dn:: YnJva2VuIGJhc2U2NA*==" + "changetype: add\n" + "objectclass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn:: Y249YnJva2VuIGJhc2U2NCBkbix4" + "changetype: add\n" + "objectclass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"},{"dn: cn=john smith, dc=com\n" + "changetype: add\n" + "objectclass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"+ "description:< brok@n:///bad/url"},{"dn: cn=john smith, dc=com\n" + "changetype: add\n" + "objectclass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"+ "description:< file:///bad/path/name"},{"dn: cn=john smith, dc=com\n" + "changetype: delete\n" + "objectclass: top\n"+ "objectClass: person\n"+ "cn: john\n"+ "sn: smith\n"+ "description:< file:///bad/path/name"},{"dn: cn=john smith, dc=com\n" + "changetype: modrdn\n"},{"dn: cn=john smith, dc=com\n" + "changetype: modrdn\n" + "newrdn: x\n"},{"dn: cn=john smith, dc=com\n" + "changetype: modrdn\n" + "newrdn: cn=foo\n"},{"dn: cn=john smith, dc=com\n" + "changetype: modrdn\n" + "newrdn: cn=foo\n"+ "deleteoldxx: xxx\n"},{"dn: cn=john smith, dc=com\n" + "changetype: modrdn\n" + "newrdn: cn=foo\n"+ "deleteoldrdn: xxx\n"},{"dn: cn=john smith, dc=com\n" + "changetype: modrdn\n" + "newrdn: cn=foo\n"+ "deleteoldrdn: 0\n"+ "newsu: xxxx\n"},{"dn: cn=john smith, dc=com\n" + "changetype: modrdn\n" + "newrdn: cn=foo\n"+ "deleteoldrdn: 0\n"+ "newsuperior: xxxx\n"}};}  }
class C{  public AuthLoginException(Throwable nestedException){  initCause(nestedException);  if (nestedException instanceof L10NMessage) {    _errorCode=((L10NMessage)nestedException).getErrorCode();  }}  }
class C{  public SAML2ConfigBuilder attributeMap(Map<String,String> attributeMap){  this.attributeMap=Collections.unmodifiableMap(attributeMap);  return this;}  }
class C{  private static void rdf_PropertyElement(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,boolean isTopLevel) throws XMPException {  int nodeTerm=getRDFTermKind(xmlNode);  if (!isPropertyElementName(nodeTerm)) {    throw new XMPException("Invalid property element name",BADRDF);  }  NamedNodeMap attributes=xmlNode.getAttributes();  List nsAttrs=null;  for (int i=0; i < attributes.getLength(); i++) {    Node attribute=attributes.item(i);    if ("xmlns".equals(attribute.getPrefix()) || (attribute.getPrefix() == null && "xmlns".equals(attribute.getNodeName()))) {      if (nsAttrs == null) {        nsAttrs=new ArrayList();      }      nsAttrs.add(attribute.getNodeName());    }  }  if (nsAttrs != null) {    for (Iterator it=nsAttrs.iterator(); it.hasNext(); ) {      String ns=(String)it.next();      attributes.removeNamedItem(ns);    }  }  if (attributes.getLength() > 3) {    rdf_EmptyPropertyElement(xmp,xmpParent,xmlNode,isTopLevel);  } else {    for (int i=0; i < attributes.getLength(); i++) {      Node attribute=attributes.item(i);      String attrLocal=attribute.getLocalName();      String attrNS=attribute.getNamespaceURI();      String attrValue=attribute.getNodeValue();      if (!(XML_LANG.equals(attribute.getNodeName()) && !("ID".equals(attrLocal) && NS_RDF.equals(attrNS)))) {        if ("datatype".equals(attrLocal) && NS_RDF.equals(attrNS)) {          rdf_LiteralPropertyElement(xmp,xmpParent,xmlNode,isTopLevel);        } else         if (!("parseType".equals(attrLocal) && NS_RDF.equals(attrNS))) {          rdf_EmptyPropertyElement(xmp,xmpParent,xmlNode,isTopLevel);        } else         if ("Literal".equals(attrValue)) {          rdf_ParseTypeLiteralPropertyElement();        } else         if ("Resource".equals(attrValue)) {          rdf_ParseTypeResourcePropertyElement(xmp,xmpParent,xmlNode,isTopLevel);        } else         if ("Collection".equals(attrValue)) {          rdf_ParseTypeCollectionPropertyElement();        } else {          rdf_ParseTypeOtherPropertyElement();        }        return;      }    }    if (xmlNode.hasChildNodes()) {      for (int i=0; i < xmlNode.getChildNodes().getLength(); i++) {        Node currChild=xmlNode.getChildNodes().item(i);        if (currChild.getNodeType() != Node.TEXT_NODE) {          rdf_ResourcePropertyElement(xmp,xmpParent,xmlNode,isTopLevel);          return;        }      }      rdf_LiteralPropertyElement(xmp,xmpParent,xmlNode,isTopLevel);    } else {      rdf_EmptyPropertyElement(xmp,xmpParent,xmlNode,isTopLevel);    }  }}  }
class C{  @Override public List<IndexCreatedEvent> readAllCurrentlyIndexing(){  BoundStatement bs=new BoundStatement(readAllCurrentlyIndexingStmt);  List<UUID> ids=marshalActiveUUIDs(getSession().execute(bs));  List<IndexCreatedEvent> toReturn=new ArrayList<>(ids.size());  for (  UUID id : ids) {    toReturn.add(read(id));  }  return toReturn;}  }
class C{  protected ZipEntry createZipEntry(String name){  return new ZipEntry(name);}  }
class C{  private static boolean useHighContrastTheme(){  if (isWindows() && useSystemFonts()) {    Boolean highContrast=(Boolean)Toolkit.getDefaultToolkit().getDesktopProperty("win.highContrast.on");    return (highContrast == null) ? false : highContrast.booleanValue();  }  return false;}  }
class C{  private PreparedStatement credentials(Connection dbConnection,String username) throws SQLException {  PreparedStatement credentials=dbConnection.prepareStatement(preparedCredentials);  credentials.setString(1,username);  return (credentials);}  }
class C{  public BufferUnderflowException(){}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  len=Math.min(len,chunkSize - pos);  int count=in.read(b,off,len);  pos+=count;  return count;}  }
class C{  public RedirectCallback(){}  }
class C{  public DeleteOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,DN entryDN){  super(clientConnection,operationID,messageID,requestControls);  this.entryDN=entryDN;  rawEntryDN=ByteString.valueOfUtf8(entryDN.toString());}  }
class C{  public void alist_append_to(PlaLineIntAlist dest,int src_pos,int length){  for (int index=0; index < length; index++)   dest.add(plaline(src_pos + index));}  }
class C{  public Throwable initCause(Throwable cause){  super.initCause(cause);  setRootCause(cause);  return this;}  }
class C{  public static ResponseSet parseXML(String xml){  ResponseSetParser parser=new ResponseSetParser(xml);  return parser.parseXML();}  }
class C{  public boolean hasMask(int mask){  return (this.operationMask & mask) != 0;}  }
class C{  private void expungeStaleEntries(){  Entry[] tab=table;  int len=tab.length;  for (int j=0; j < len; j++) {    Entry e=tab[j];    if (e != null && e.get() == null)     expungeStaleEntry(j);  }}  }
class C{  @Inject public SAMLAdapter(TokenIdFactory tokenIdFactory,JSONSerialisation serialisation,TokenBlobUtils blobUtils){  this.tokenIdFactory=tokenIdFactory;  this.serialisation=serialisation;  this.blobUtils=blobUtils;}  }
class C{  public boolean isSpinning(){  return isSpinning;}  }
class C{  protected static String removeQuotes(String quotedString){  return removeQuotes(quotedString,false);}  }
class C{  private ReplicationServer createReplicationServer(int serverId,int groupId,String testCase) throws Exception {  SortedSet<String> replServers=new TreeSet<>();  int port=-1;  if (serverId == RS1_ID) {    port=rs1Port;    if (testCase.equals("testRSWithSameGroupIds")) {      replServers.add("localhost:" + rs2Port);    } else     if (testCase.equals("testRSWithManyGroupIds")) {      replServers.add("localhost:" + rs2Port);      replServers.add("localhost:" + rs3Port);    } else {      fail("Unknown test case: " + testCase);    }  } else   if (serverId == RS2_ID) {    port=rs2Port;    if (testCase.equals("testRSWithSameGroupIds")) {      replServers.add("localhost:" + rs1Port);    } else     if (testCase.equals("testRSWithManyGroupIds")) {      replServers.add("localhost:" + rs1Port);      replServers.add("localhost:" + rs3Port);    } else {      fail("Unknown test case: " + testCase);    }  } else   if (serverId == RS3_ID) {    port=rs3Port;    if (testCase.equals("testRSWithManyGroupIds")) {      replServers.add("localhost:" + rs2Port);      replServers.add("localhost:" + rs3Port);    } else {      fail("Invalid test case: " + testCase);    }  } else {    fail("Unknown replication server id.");  }  String dir="groupIdHandshakeTest" + serverId + testCase+ "Db";  ReplServerFakeConfiguration conf=new ReplServerFakeConfiguration(port,dir,0,serverId,0,100,replServers,groupId,1000,5000);  return new ReplicationServer(conf);}  }
class C{  public void mouseExited(MouseEvent e){  if (e.getSource() == BasicSplitPaneDivider.this) {    setMouseOver(false);  }}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Hermes.disconnect(this);}  }
class C{  public final void testGetPrivate02() throws InvalidKeySpecException {  PrivateKey pk=TestKeyPair.getPrivate();  KeyPair kp=new KeyPair(null,pk);  assertSame(pk,kp.getPrivate());}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public HttpConstraintElement(TransportGuarantee transportGuarantee,String... rolesAllowed){  this.emptyRoleSemantic=EmptyRoleSemantic.PERMIT;  this.transportGuarantee=transportGuarantee;  this.rolesAllowed=rolesAllowed;}  }
class C{  public static IntegerArgument connectTimeOutArgument() throws ArgumentException {  return connectTimeOutArgument(false);}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  @Override public int countByUUID_G(String uuid,long groupId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_G;  Object[] finderArgs=new Object[]{uuid,groupId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String xmlFile=getStringOptionValue(IArgument.XML_FILE);  String encryptSecret=getStringOptionValue(IArgument.ENCRYPT_SECRET);  try {    encryptSecret=CLIUtil.getFileContent(getCommandManager(),encryptSecret).trim();  } catch (  CLIException clie) {  }  validateEncryptSecret(xmlFile,encryptSecret);  SystemProperties.initializeProperties(Constants.SMS_ENABLE_DB_NOTIFICATION,"true");  SystemProperties.initializeProperties("com.sun.am.event.connection.disable.list","sm,aci,um");  SystemProperties.initializeProperties(Constants.SYS_PROPERTY_INSTALL_TIME,"true");  IOutput outputWriter=getOutputWriter();  try (Connection ldConnection=getLDAPConnection()){    InitializeSystem initSys=CommandManager.initSys;    SSOToken ssoToken=initSys.getSSOToken(getAdminPassword());    DirectoryServerVendor.Vendor vendor=DirectoryServerVendor.getInstance().query(ldConnection);    if (!vendor.name.equals(DirectoryServerVendor.OPENDJ) && !vendor.name.equals(DirectoryServerVendor.OPENDS) && !vendor.name.equals(DirectoryServerVendor.ODSEE)) {      throw new CLIException(getResourceString("import-service-configuration-unknown-ds"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    if (vendor.name.equals(DirectoryServerVendor.ODSEE)) {      loadLDIF(vendor,ldConnection);    }    String ouServices="ou=services," + initSys.getRootSuffix();    if (this.isOuServicesExists(ssoToken,ouServices)) {      System.out.print(getResourceString("import-service-configuration-prompt-delete") + " ");      String value=(new BufferedReader(new InputStreamReader(System.in))).readLine();      value=value.trim();      if (value.equalsIgnoreCase("y") || value.equalsIgnoreCase("yes")) {        outputWriter.printlnMessage(getResourceString("import-service-configuration-processing"));        deleteOuServicesDescendents(ssoToken,ouServices);        importData(xmlFile,encryptSecret,ssoToken);      }    } else {      outputWriter.printlnMessage(getResourceString("import-service-configuration-processing"));      importData(xmlFile,encryptSecret,ssoToken);    }  } catch (  SMSException e) {    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  LdapException e) {    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    throw new CLIException(e.getMessage(),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  LoginException e) {    throw new CLIException(getCommandManager().getResourceBundle().getString("exception-LDAP-login-failed"),ExitCodes.LDAP_LOGIN_FAILED);  }catch (  InvalidAuthContextException e) {    throw new CLIException(getCommandManager().getResourceBundle().getString("exception-LDAP-login-failed"),ExitCodes.LDAP_LOGIN_FAILED);  }}  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=((id & 1) == 1);  return connection.client == streamIsClient;}  }
class C{  public static void main(String[] args){  System.exit(filterExitCode(startWindowsService(System.out,System.err)));}  }
class C{  public static void removeService(String serviceName){  removeService(serviceName,"1.0");}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  private TemplateTag parseReplacementTag(final String tagString,final Branch branch,final Template template,final int lineNumber,final Map<String,TemplateTag> tags,final List<LocalizableMessage> warnings) throws DecodeException {  final StringTokenizer tokenizer=new StringTokenizer(tagString,":");  final String tagName=tokenizer.nextToken().trim();  final String lowerTagName=tagName.toLowerCase();  TemplateTag tag=getTag(lowerTagName);  if (tag == null) {    tag=tags.get(lowerTagName);    if (tag == null) {      throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_NO_SUCH_TAG.get(tagName,lineNumber + 1));    }  }  final List<String> args=new ArrayList<>();  while (tokenizer.hasMoreTokens()) {    args.add(tokenizer.nextToken().trim());  }  final String[] arguments=args.toArray(new String[args.size()]);  TemplateTag newTag;  try {    newTag=tag.getClass().newInstance();  } catch (  Exception e) {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_CANNOT_INSTANTIATE_NEW_TAG.get(tagName,lineNumber + 1,String.valueOf(e)),e);  }  if (branch == null) {    newTag.initializeForTemplate(schema,this,template,arguments,lineNumber,warnings);  } else   if (newTag.allowedInBranch()) {    newTag.initializeForBranch(schema,this,branch,arguments,lineNumber,warnings);  } else {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_TAG_NOT_ALLOWED_IN_BRANCH.get(newTag.getName(),lineNumber + 1));  }  return newTag;}  }
class C{  public static Option bufferSize(int value){  return new BufferSizeOption(value);}  }
class C{  @Override public void fileRemoved(File removeWar){  try {    ContextName cn=new ContextName(removeWar.getName(),true);    if (log.isInfoEnabled())     log.info(sm.getString("farmWarDeployer.removeLocal",cn.getName()));    remove(cn.getName(),true);  } catch (  Exception x) {    log.error(sm.getString("farmWarDeployer.removeLocalFail"),x);  }}  }
class C{  void auditAccessAttempt(){  if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_ATTEMPT)) {    AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent(realm).forHttpRequest(context,request).timestamp(startTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_ATTEMPT).component(component);    addSessionDetailsFromSSOTokenContextIfNotNull(builder,context);    if (ipAddressHeaderPropertyIsSet()) {      setClientFromHttpContextHeaderIfExists(builder,context);    }    AuditEvent auditEvent=builder.toEvent();    postProcessEvent(auditEvent);    auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);  }}  }
class C{  public VLVRequestControl(boolean isCritical,int beforeCount,int afterCount,ByteString greaterThanOrEqual,ByteString contextID){  super(OID_VLV_REQUEST_CONTROL,isCritical);  this.beforeCount=beforeCount;  this.afterCount=afterCount;  this.greaterThanOrEqual=greaterThanOrEqual;  this.contextID=contextID;  targetType=TYPE_TARGET_GREATERTHANOREQUAL;}  }
class C{  @Override public void recycle(){  contentLength=-1;  remaining=0;}  }
class C{  @Override public int available() throws IOException {  try {    return super.available();  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (requestID == null && localName.equals("batchRequest")) {    requestID=attributes.getValue("requestID");  }  super.startElement(uri,localName,qName,attributes);}  }
class C{  public PdfDocument(PdfReader reader,PdfWriter writer,StampingProperties properties){  if (reader == null) {    throw new NullPointerException("reader");  }  if (writer == null) {    throw new NullPointerException("writer");  }  documentId=incrementDocumentId();  this.reader=reader;  this.writer=writer;  this.properties=properties;  boolean writerHasEncryption=writer.properties.isStandardEncryptionUsed() || writer.properties.isPublicKeyEncryptionUsed();  if (properties.appendMode && writerHasEncryption) {    Logger logger=LoggerFactory.getLogger(PdfDocument.class);    logger.warn(LogMessageConstant.WRITER_ENCRYPTION_IS_IGNORED_APPEND);  }  if (properties.preserveEncryption && writerHasEncryption) {    Logger logger=LoggerFactory.getLogger(PdfDocument.class);    logger.warn(LogMessageConstant.WRITER_ENCRYPTION_IS_IGNORED_PRESERVE);  }  open(writer.properties.pdfVersion);}  }
class C{  public MimeVersionParser(String mimeVersion){  super(mimeVersion);}  }
class C{  @Override protected Object createSsoServerSvcMgmtSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   svcmgmtSvcGroup=new SsoServerSvcMgmtSvcImpl(this,server); else   svcmgmtSvcGroup=new SsoServerSvcMgmtSvcImpl(this);  return svcmgmtSvcGroup;}  }
class C{  public void removeSelectionRow(int row){  int[] rows={row};  removeSelectionRows(rows);}  }
class C{  public TableBuilder(){}  }
class C{  public FrameBodyTFLT(){}  }
class C{  public static String buildStateKey(int taskId,String key){  return prefixState(taskId) + key;}  }
class C{  public NSData(File file) throws IOException {  bytes=new byte[(int)file.length()];  RandomAccessFile raf=new RandomAccessFile(file,"r");  raf.read(bytes);  raf.close();}  }
class C{  public static void deregisterShutdownListener(ServerShutdownListener listener){  DirectoryServer.deregisterShutdownListener(listener);}  }
class C{  public static Message sendRequest(Message req,String connectTo,String certAlias,String soapAction) throws SOAPBindingException, SOAPFaultException {  URLConnection con=null;  try {    con=getConnection(connectTo,certAlias);  } catch (  Exception e) {    Utils.debug.error("Client:sendRequest",e);    throw new SOAPBindingException(e.getMessage());  }  if (soapAction == null || soapAction.length() == 0) {    soapAction="";  }  con.setRequestProperty(SOAPBindingConstants.SOAP_ACTION_HEADER,soapAction);  Document doc=null;  int securityProfileType=req.getSecurityProfileType();  if (securityProfileType == Message.ANONYMOUS || securityProfileType == Message.BEARER_TOKEN) {    doc=req.toDocument(true);  } else {    Element sigElem=SecurityUtils.signMessage(req);    if (sigElem == null) {      String msg=Utils.bundle.getString("cannotSignRequest");      Utils.debug.error("Client.sendRequest: " + msg);      throw new SOAPBindingException(msg);    }    doc=sigElem.getOwnerDocument();  }  if (Utils.debug.messageEnabled()) {    Utils.debug.message("Client.sendRequest: signed request\n" + req);  }  OutputStream os=null;  try {    os=con.getOutputStream();    Transformer transformer=XMLUtils.getTransformerFactory().newTransformer();    transformer.setOutputProperty("omit-xml-declaration","yes");    transformer.transform(new DOMSource(doc.getDocumentElement()),new StreamResult(os));  } catch (  Exception e) {    Utils.debug.error("Client:sendRequest",e);    throw new SOAPBindingException(e.getMessage());  } finally {    if (os != null) {      try {        os.close();      } catch (      Exception e) {        Utils.debug.error("Client:sendRequest",e);      }    }  }  Message resp=null;  InputStream is=null;  try {    is=con.getInputStream();    resp=new Message(is);    if (resp.getSOAPFault() != null) {      throw new SOAPFaultException(resp);    }    Utils.enforceProcessingRules(resp,req.getCorrelationHeader().getMessageID(),false);  } catch (  IOException e) {    Utils.debug.error("Client:sendRequest",e);    throw new SOAPBindingException(e.getMessage());  } finally {    if (is != null) {      try {        is.close();      } catch (      Exception e) {        Utils.debug.error("Client:sendRequest",e);      }    }  }  resp.setProtocol(con.getURL().getProtocol());  if (resp.getSecurityProfileType() != Message.ANONYMOUS && !SecurityUtils.verifyMessage(resp)) {    String msg=Utils.bundle.getString("cannotVerifySignature");    Utils.debug.error("Client.sendRequest: " + msg);    throw new SOAPBindingException(msg);  }  return resp;}  }
class C{  public static boolean hasWhitelist(){  return server.hasWhitelist();}  }
class C{  public IntArraySpliterator(int[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  private void showSearchDialog(){  SearchChannelsDialog newFragment=SearchChannelsDialog.newInstance();  newFragment.show(mFragmentManager,TAG_SEARCH);  mFragmentManager.executePendingTransactions();}  }
class C{  public X500Principal(byte[] name){  if (name == null) {    throw new IllegalArgumentException("Name cannot be null");  }  try {    dn=(Name)Name.ASN1.decode(name);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public final boolean supports(String feature,String version){  return implementation.hasFeature(feature,version);}  }
class C{  private ELNode.Nodes parseEL(){  StringBuilder buf=new StringBuilder();  ELexpr=new ELNode.Nodes();  curToken=null;  prevToken=null;  while (hasNext()) {    curToken=nextToken();    if (curToken instanceof Char) {      if (curToken.toChar() == '}') {        break;      }      buf.append(curToken.toString());    } else {      if (buf.length() > 0) {        ELexpr.add(new ELNode.ELText(buf.toString()));        buf.setLength(0);      }      if (!parseFunction()) {        ELexpr.add(new ELNode.ELText(curToken.toString()));      }    }  }  if (curToken != null) {    buf.append(curToken.getWhiteSpace());  }  if (buf.length() > 0) {    ELexpr.add(new ELNode.ELText(buf.toString()));  }  return ELexpr;}  }
class C{  private void advanceTimeThread() throws InterruptedException {  long timeThreadCurrentTime=TimeThread.getTime();  while (timeThreadCurrentTime == TimeThread.getTime()) {    Thread.sleep(10);  }}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  public DeleteOperation processDelete(String rawEntryDN){  return processDelete(ByteString.valueOfUtf8(rawEntryDN),null);}  }
class C{  public void startDocument() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startDocument");  m_insideParse=true;  if (m_contentHandler != null) {    if (m_incremental) {      m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());      int cpriority=Thread.currentThread().getPriority();      m_transformer.runTransformThread(cpriority);    }    m_contentHandler.startDocument();  }}  }
class C{  private <T>SortedSet<T> decodeProperty(ManagedObjectPath<?,?> path,PropertyDefinition<T> propertyDef,List<String> attributeValues,Entry newConfigEntry){  PropertyException exception=null;  SortedSet<T> pvalues=new TreeSet<>(propertyDef);  if (attributeValues.size() > 0) {    for (    String value : attributeValues) {      try {        pvalues.add(ValueDecoder.decode(propertyDef,value));      } catch (      PropertyException e) {        exception=e;      }    }  } else {    try {      pvalues.addAll(getDefaultValues(path,propertyDef,newConfigEntry));    } catch (    PropertyException e) {      exception=e;    }  }  if (pvalues.size() > 1 && !propertyDef.hasOption(PropertyOption.MULTI_VALUED)) {    exception=PropertyException.propertyIsSingleValuedException(propertyDef);    T value=pvalues.first();    pvalues.clear();    pvalues.add(value);  }  if (pvalues.isEmpty() && propertyDef.hasOption(PropertyOption.MANDATORY) && exception == null) {    exception=PropertyException.propertyIsMandatoryException(propertyDef);  }  if (exception != null) {    throw exception;  }  return pvalues;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public Mp4TagBinaryField(String id){  super(id);}  }
class C{  protected XACMLSDKUtils(){}  }
class C{  private void addRDNAttributesIfNecessary() throws DirectoryException {  for (  AVA ava : entryDN.rdn()) {    AttributeType t=ava.getAttributeType();    addRDNAttributesIfNecessary(t.isOperational() ? operationalAttributes : userAttributes,ava);  }}  }
class C{  public UnknownUserException(){  super();}  }
class C{  public void select_import_class_interface_fun_object(Statement stmt,List<Import> imports,List<ClassDef> classDefs,List<InterfaceDef> interfaceDefs,List<FunDef> funDefs,List<ObjectDef> objectDefs) throws UnexpectedTokenException {  if (stmt instanceof Import) {    imports.add((Import)stmt);  } else   if (stmt instanceof ClassDef) {    classDefs.add((ClassDef)stmt);  } else   if (stmt instanceof InterfaceDef) {    interfaceDefs.add((InterfaceDef)stmt);  } else   if (stmt instanceof FunDef) {    funDefs.add((FunDef)stmt);  } else   if (stmt instanceof ObjectDef) {    objectDefs.add((ObjectDef)stmt);  } else {    err.UnexpectedTokenException("class/interface/object definition or import",stmt.toString(),stmt.line_col());  }}  }
class C{  @Override public byte byteValue(){  return value;}  }
class C{  public JToolTip(){  setOpaque(true);  updateUI();}  }
class C{  @SuppressWarnings("unchecked") private void heapify(){  for (int i=(size >>> 1) - 1; i >= 0; i--)   siftDown(i,(E)queue[i]);}  }
class C{  public void test_bytesConsumed(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; l++) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect bytesConsumed",pos[n],res.bytesConsumed());        }      }    }  }}  }
class C{  public void shutdown(){  shutdown=true;  try {    join();  } catch (  InterruptedException ex) {  }}  }
class C{  @AfterClass public void afterClass() throws Exception {  DeleteOperation deleteOperation=getRootConnection().processDelete(DN.valueOf("cn=Privileged User,o=test"));  assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS);  deleteOperation=getRootConnection().processDelete(DN.valueOf("cn=Unprivileged JMX User,o=test"));  assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS);}  }
class C{  @DataProvider(name="acceptableValues") public Object[][] createAcceptableValues(){  String validcert1="MIICpTCCAg6gAwIBAgIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV" + "BAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRpb25lMRwwGgYDVQQLExNQcm9kdWN0IERl" + "dmVsb3BtZW50MRQwEgYDVQQDEwtCYWJzIEplbnNlbjAeFw0xMjA1MDIxNjM0MzVa"+ "Fw0xMjEyMjExNjM0MzVaMFYxCzAJBgNVBAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRp"+ "b25lMRwwGgYDVQQLExNQcm9kdWN0IERldmVsb3BtZW50MRQwEgYDVQQDEwtCYWJz"+ "IEplbnNlbjCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApysa0c9qc8FB8gIJ"+ "8zAb1pbJ4HzC7iRlVGhRJjFORkGhyvU4P5o2wL0iz/uko6rL9/pFhIlIMbwbV8sm"+ "mKeNUPitwiKOjoFDmtimcZ4bx5UTAYLbbHMpEdwSpMC5iF2UioM7qdiwpAfZBd6Z"+ "69vqNxuUJ6tP+hxtr/aSgMH2i8ECAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgB"+ "hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE"+ "FLlZD3aKDa8jdhzoByOFMAJDs2osMB8GA1UdIwQYMBaAFLlZD3aKDa8jdhzoByOF"+ "MAJDs2osMA0GCSqGSIb3DQEBBQUAA4GBAE5vccY8Ydd7by2bbwiDKgQqVyoKrkUg"+ "6CD0WRmc2pBeYX2z94/PWO5L3Fx+eIZh2wTxScF+FdRWJzLbUaBuClrxuy0Y5ifj"+ "axuJ8LFNbZtsp1ldW3i84+F5+SYT+xI67ZcoAtwx/VFVI9s5I/Gkmu9f9nxjPpK7"+ "1AIUXiE3Qcck";  String invalidcert1="MIICpTCCAg6gAwIBBQIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV" + "BAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRpb25lMRwwGgYDVQQLExNQcm9kdWN0IERl" + "dmVsb3BtZW50MRQwEgYDVQQDEwtCYWJzIEplbnNlbjAeFw0xMjA1MDIxNjM0MzVa"+ "Fw0xMjEyMjExNjM0MzVaMFYxCzAJBgNVBAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRp"+ "b25lMRwwGgYDVQQLExNQcm9kdWN0IERldmVsb3BtZW50MRQwEgYDVQQDEwtCYWJz"+ "IEplbnNlbjCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApysa0c9qc8FB8gIJ"+ "8zAb1pbJ4HzC7iRlVGhRJjFORkGhyvU4P5o2wL0iz/uko6rL9/pFhIlIMbwbV8sm"+ "mKeNUPitwiKOjoFDmtimcZ4bx5UTAYLbbHMpEdwSpMC5iF2UioM7qdiwpAfZBd6Z"+ "69vqNxuUJ6tP+hxtr/aSgMH2i8ECAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgB"+ "hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE"+ "FLlZD3aKDa8jdhzoByOFMAJDs2osMB8GA1UdIwQYMBaAFLlZD3aKDa8jdhzoByOF"+ "MAJDs2osMA0GCSqGSIb3DQEBBQUAA4GBAE5vccY8Ydd7by2bbwiDKgQqVyoKrkUg"+ "6CD0WRmc2pBeYX2z94/PWO5L3Fx+eIZh2wTxScF+FdRWJzLbUaBuClrxuy0Y5ifj"+ "axuJ8LFNbZtsp1ldW3i84+F5+SYT+xI67ZcoAtwx/VFVI9s5I/Gkmu9f9nxjPpK7"+ "1AIUXiE3Qcck";  String brokencert1="MIICpTCCAg6gAwIBAgIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV";  return new Object[][]{{ByteString.valueOfBase64(validcert1),true},{ByteString.valueOfUtf8(validcert1),false},{ByteString.valueOfBase64(invalidcert1),false},{ByteString.valueOfBase64(brokencert1),false},{ByteString.valueOfUtf8("invalid"),false}};}  }
class C{  public boolean isSpecified(String qName){  int index=getIndex(qName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: " + qName);  return specified[index];}  }
class C{  public static void handlePendingActions(Context context,ReconAction action,Mappings mappings,String resourceContainer,String resourceId,JsonValue targetObject) throws SynchronizationException {  PendingActionContext pendingActionContext=null;  try {    pendingActionContext=getPendingActionContext(context,action);  } catch (  IllegalArgumentException e) {    logger.debug("No PendingActionContext found");    return;  }  if (pendingActionContext.isPending()) {    JsonValue pendingAction=new JsonValue(pendingActionContext.getPendingActionData());    String mappingName=pendingAction.get(MAPPING_NAME).required().asString();    JsonValue sourceObject=pendingAction.get(SOURCE_OBJECT);    String reconId=pendingAction.get(RECON_ID).asString();    String origSituation=pendingAction.get(ORIGINAL_SITUATION).asString();    Situation situation=Situation.valueOf(origSituation);    for (    ObjectMapping mapping : mappings) {      if (mapping.getName().equals(mappingName) && resourceContainer.equals(mapping.getTargetObjectSet())) {        logger.debug("Matching mapping {} found for pending action {} to {}",mappingName,action.toString(),resourceContainer + "/" + resourceId);        mapping.explicitOp(context,sourceObject,targetObject,situation,action,reconId);        pendingActionContext.clear();        logger.debug("Pending action {} for mapping {} on resource {} performed",new Object[]{action.toString(),mappingName,resourceContainer + "/" + resourceId});        break;      }    }  }}  }
class C{  public void test_read$CII() throws IOException {  char[] c=new char[11];  cr=new CharArrayReader(hw);  cr.read(c,1,10);  assertTrue("Test 1: Read returned incorrect chars.",new String(c,1,10).equals(new String(hw,0,10)));  try {    cr.read(null,1,0);    fail("Test 2: NullPointerException expected.");  } catch (  NullPointerException e) {  }  try {    cr.read(c,-1,1);    fail("Test 3: ArrayIndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    cr.read(c,1,-1);    fail("Test 4: ArrayIndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    cr.read(c,1,c.length);    fail("Test 5: ArrayIndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  cr.close();  try {    cr.read(c,1,1);    fail("Test 6: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public AuthorizationToken issueTokens(OAuth2Request request,ClientRegistration clientRegistration,ResourceOwner resourceOwner,Set<String> authorizationScope,OAuth2ProviderSettings providerSettings) throws InvalidClientException, UnsupportedResponseTypeException, ServerException, InvalidScopeException, NotFoundException {  final Set<String> requestedResponseTypes=splitResponseType(request.<String>getParameter(RESPONSE_TYPE));  if (Utils.isEmpty(requestedResponseTypes)) {    logger.debug("Response type is not supported");    throw new UnsupportedResponseTypeException("Response type is not supported");  }  final Set<String> validatedScope=providerSettings.validateAccessTokenScope(clientRegistration,authorizationScope,request);  final Map<String,ResponseTypeHandler> allowedResponseTypes=providerSettings.getAllowedResponseTypes();  final String tokenType=clientRegistration.getAccessTokenType();  final String clientId=clientRegistration.getClientId();  final String redirectUri=request.getParameter(REDIRECT_URI);  final String nonce=request.getParameter(OAuth2Constants.Custom.NONCE);  final String codeChallenge=request.getParameter(OAuth2Constants.Custom.CODE_CHALLENGE);  final String codeChallengeMethod=request.getParameter(OAuth2Constants.Custom.CODE_CHALLENGE_METHOD);  final Map<String,Token> tokens=new HashMap<String,Token>();  boolean returnAsFragment=false;  final List<String> sortedResponseTypes=Utils.asSortedList(requestedResponseTypes,new KeyStringComparator(OAuth2Constants.JWTTokenParams.ID_TOKEN));  for (  final String responseType : sortedResponseTypes) {    if (Utils.isEmpty(responseType)) {      throw new UnsupportedResponseTypeException("Response type is not supported");    }    final ResponseTypeHandler responseTypeHandler=allowedResponseTypes.get(responseType);    final Map.Entry<String,Token> token=responseTypeHandler.handle(tokenType,validatedScope,resourceOwner,clientId,redirectUri,nonce,request,codeChallenge,codeChallengeMethod);    if (token != null) {      if (tokens.containsKey(token.getKey())) {        logger.debug("Returning multiple response types with the same url value");        throw new UnsupportedResponseTypeException("Returning multiple response types with the same url " + "value");      }      tokens.put(token.getKey(),token.getValue());      if (!returnAsFragment) {        final OAuth2Constants.UrlLocation returnLocation=responseTypeHandler.getReturnLocation();        returnAsFragment=OAuth2Constants.UrlLocation.FRAGMENT.equals(returnLocation);      }    }  }  final Map<String,String> tokenMap=flattenTokens(tokens);  final Map<String,String> additionalData=providerSettings.additionalDataToReturnFromAuthorizeEndpoint(Collections.unmodifiableMap(tokens),request);  if (!Utils.isEmpty(additionalData)) {    final String returnLoc=additionalData.remove("returnLocation");    if (!Utils.isEmpty(returnLoc)) {      final OAuth2Constants.UrlLocation returnLocation=OAuth2Constants.UrlLocation.valueOf(returnLoc.toUpperCase());      if (!returnAsFragment && OAuth2Constants.UrlLocation.FRAGMENT.equals(returnLocation)) {        returnAsFragment=true;      }    }    tokenMap.putAll(additionalData);  }  tokenMap.put(SCOPE,Utils.joinScope(validatedScope));  if (request.getParameter(STATE) != null) {    tokenMap.put(STATE,request.<String>getParameter(STATE));  }  if (!tokenMap.containsKey("id_token")) {    tokenMap.put(ISS,urisFactory.get(request).getIssuer());    tokenMap.put(CLIENT_ID,clientRegistration.getClientId());  }  return new AuthorizationToken(tokenMap,returnAsFragment);}  }
class C{  public UserSubject(){  super();}  }
class C{  public CallbackNumberAttribute(byte[] octets){  super(octets);  str=new String(octets,2,octets.length - 2);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.EmbeddedElement createEmbeddedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.EmbeddedElementImpl();}  }
class C{  private MSVValidator(DefaultJAXBContextImpl _jaxbCtx,ValidationContext _ctxt,ValidatableObject vo){  jaxbContext=_jaxbCtx;  acceptor=vo.createRawValidator().createAcceptor();  context=_ctxt;  target=vo;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BasicOptionPaneUI();}  }
class C{  public void initializeGroupImplementations() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addGroupImplementationAddListener(this);  rootConfiguration.addGroupImplementationDeleteListener(this);  for (  String name : rootConfiguration.listGroupImplementations()) {    GroupImplementationCfg groupConfiguration=rootConfiguration.getGroupImplementation(name);    groupConfiguration.addChangeListener(this);    if (groupConfiguration.isEnabled()) {      try {        Group<?> group=loadGroup(groupConfiguration.getJavaClass(),groupConfiguration,true);        groupImplementations.put(groupConfiguration.dn(),group);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());      }    }  }}  }
class C{  @Override protected boolean syncUIControlState(){  boolean disableControls=super.syncUIControlState();  if (disableControls) {    mBtnSwitchCamera.setEnabled(false);    mBtnTorch.setEnabled(false);  } else {    boolean isDisplayingVideo=(getBroadcastConfig().isVideoEnabled() && mWZCameraView.getCameras().length > 0);    boolean isStreaming=getBroadcast().getStatus().isRunning();    if (isDisplayingVideo) {      WZCamera activeCamera=mWZCameraView.getCamera();      boolean hasTorch=(activeCamera != null && activeCamera.hasCapability(WZCamera.TORCH));      mBtnTorch.setEnabled(hasTorch);      if (hasTorch) {        mBtnTorch.setState(activeCamera.isTorchOn());      }      mBtnSwitchCamera.setEnabled(mWZCameraView.isSwitchCameraAvailable());    } else {      mBtnSwitchCamera.setEnabled(false);      mBtnTorch.setEnabled(false);    }    if (isStreaming && !mTimerView.isRunning()) {      mTimerView.startTimer();    } else     if (getBroadcast().getStatus().isIdle() && mTimerView.isRunning()) {      mTimerView.stopTimer();    } else     if (!isStreaming) {      mTimerView.setVisibility(View.GONE);    }  }  return disableControls;}  }
class C{  @SuppressWarnings("unchecked") @Override public Object clone(){  HashMap<K,V> result;  try {    result=(HashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }  result.reinitialize();  result.putMapEntries(this,false);  return result;}  }
class C{  @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverHello == null) {      unexpectedMessage();    }  } else   if (clientFinished == null) {    unexpectedMessage();  }  changeCipherSpecReceived=true;}  }
class C{  protected void paint(SynthContext context,Graphics g){  SynthContext subcontext=getContext(scrollbar,Region.SCROLL_BAR_TRACK);  paintTrack(subcontext,g,getTrackBounds());  subcontext.dispose();  subcontext=getContext(scrollbar,Region.SCROLL_BAR_THUMB);  paintThumb(subcontext,g,getThumbBounds());  subcontext.dispose();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getUIClassID().equals(uiClassID)) {    updateUI();  }}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.disco.plugins.jaxb.DiscoEntryElement createDiscoEntryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.plugins.jaxb.impl.DiscoEntryElementImpl();}  }
class C{  public Request _request(String operation){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  PublicKeySelector(String type){  this.type=type;}  }
class C{  public int compare_from(PlaDirection p_1,PlaDirection p_2){  int result;  if (p_1.compareTo(this) >= 0) {    if (p_2.compareTo(this) >= 0) {      result=p_1.compareTo(p_2);    } else {      result=-1;    }  } else {    if (p_2.compareTo(this) >= 0) {      result=1;    } else {      result=p_1.compareTo(p_2);    }  }  return result;}  }
class C{  public AMAuthCallBackException(String errorCode,Object[] args){  super(errorCode,args);}  }
class C{  public boolean alwaysUseSsl(){  return alwaysUseSSL;}  }
class C{  public boolean isSelected(){  return (dataStatus == DEFAULT_ON || dataStatus == PERSONAL_ON);}  }
class C{  private AttributeTypePropertyDefinition createPropertyDefinition(){  AttributeTypePropertyDefinition.Builder builder=AttributeTypePropertyDefinition.createBuilder(RootCfgDefn.getInstance(),"test-property");  return builder.getInstance();}  }
class C{  public Record<K,V> readRecord() throws ChangelogException {  return readRecord(-1);}  }
class C{  public void allIdentitiesChanged(){  if (DelegationManager.debug.messageEnabled()) {    DelegationManager.debug.message("DelegationPolicyImpl: all identities changed.");  }  cleanupCache();}  }
class C{  public static Remote register(ActivationDesc desc) throws UnknownGroupException, ActivationException, RemoteException {  ActivationID id=ActivationGroup.getSystem().registerObject(desc);  return sun.rmi.server.ActivatableRef.getStub(desc,id);}  }
class C{  public static void reloadModes(){  loadModeCatalog("/modes/","catalog");}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocument();  if (DTM.NULL == docContext)   error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);  XObject arg=m_arg0.execute(xctxt);  int argType=arg.getType();  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());  NodeSetDTM nodeSet=nodes.mutableNodeset();  if (XObject.CLASS_NODESET == argType) {    DTMIterator ni=arg.iter();    StringVector usedrefs=null;    int pos=ni.nextNode();    while (DTM.NULL != pos) {      DTM ndtm=ni.getDTM(pos);      String refval=ndtm.getStringValue(pos).toString();      pos=ni.nextNode();      usedrefs=getNodesByID(xctxt,docContext,refval,usedrefs,nodeSet,DTM.NULL != pos);    }  } else   if (XObject.CLASS_NULL == argType) {    return nodes;  } else {    String refval=arg.str();    getNodesByID(xctxt,docContext,refval,null,nodeSet,false);  }  return nodes;}  }
class C{  public static List<Foo> findByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().findByUuid_C(uuid,companyId);}  }
class C{  private NodeSequence(DTMIterator iter,int context,XPathContext xctxt,boolean shouldCacheNodes){  setIter(iter);  setRoot(context,xctxt);  setShouldCacheNodes(shouldCacheNodes);}  }
class C{  public void sort(){  DefaultListModel<String> listModel=(DefaultListModel<String>)list.getModel();  List<String> list=Collections.list(listModel.elements());  Collections.sort(list);  listModel.clear();  for (  String o : list) {    listModel.addElement(o);  }}  }
class C{  public static void main(final String[] args){  final JKFacesConfigurations test=getInstance();  final List<JKNamespace> namespaces=test.getNamespaces();  for (  final JKNamespace ns : namespaces) {    System.out.println(ns.getPrefix() + ", " + ns.getUrl());  }  System.out.println("----------------");  final List<JKTagMapping> tagMapping2=test.getTagMapping();  for (  final JKTagMapping tagMapping : tagMapping2) {    System.out.println(JKObjectUtil.toString(tagMapping));  }  System.out.println("Done");}  }
class C{  public MetaFont(){  super(META_FONT);}  }
class C{  public void addAttribute(String attrName,String value) throws SMSException {  Set attrValues=null;  if (attrSet == null) {    attrSet=new CaseInsensitiveHashMap();  } else   if (attrSet.containsKey(attrName)) {    attrValues=(Set)attrSet.get(attrName);    if (attrValues.contains(value)) {      if (debug.messageEnabled()) {        debug.message("SMSEntry: Duplicate value for addition");      }      throw (new SMSException(LdapException.newLdapException(ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,getBundleString(IUMSConstants.SMS_ATTR_OR_VAL_EXISTS)),"sms-ATTR_OR_VAL_EXISTS"));    }  }  if (attrValues == null) {    attrValues=new HashSet();  }  attrValues.add(value);  attrSet.put(attrName,attrValues);  if (modSet == null) {    modSet=new HashSet();  }  modSet.add(new ModificationItem(DirContext.ADD_ATTRIBUTE,new BasicAttribute(attrName,value)));}  }
class C{  public boolean useSSL(){  return useSSL;}  }
class C{  public LimitedTextArea(int linesMax){  this.linesMax=linesMax;  textArea=new JTextArea(10,40);  textArea.setLineWrap(true);  workPanel=new JScrollPane(textArea);  workDoc=(PlainDocument)textArea.getDocument();}  }
class C{  public KeyAlreadyExistsException(String msg){  super(msg);}  }
class C{  Object processAVT_QNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  AVT avt=null;  try {    avt=new AVT(handler,uri,name,rawName,value,owner);    if (avt.isSimple()) {      int indexOfNSSep=value.indexOf(':');      if (indexOfNSSep >= 0) {        String prefix=value.substring(0,indexOfNSSep);        if (!XML11Char.isXML11ValidNCName(prefix)) {          handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},null);          return null;        }      }      String localName=(indexOfNSSep < 0) ? value : value.substring(indexOfNSSep + 1);      if ((localName == null) || (localName.length() == 0) || (!XML11Char.isXML11ValidNCName(localName))) {        handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},null);        return null;      }    }  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }  return avt;}  }
class C{  protected int checkAuthFailure(){  int retVal=0;  try {    if (0 >= getFailCount(amAuthIdentity)) {      retVal=authFailureScore;    }  } catch (  AuthenticationException e) {    if (debug.warningEnabled()) {      debug.warning("{}.checkAuthFailure() : Failed to get fail count",ADAPTIVE,e);    }    return authFailureScore;  }  if (!authFailureInvert) {    retVal=authFailureScore - retVal;  }  return retVal;}  }
class C{  public java.lang.String toString(){  return toString(true,false);}  }
class C{  public static Map<String,String> parseQueryString(String queryString,String charset) throws UnsupportedEncodingException {  if (StringUtils.isEmpty(queryString)) {    return new HashMap<>();  }  String[] params=queryString.split("&");  Map<String,String> map=new HashMap<>();  for (  String param : params) {    String[] pair=param.split("=");    if (pair.length == 2) {      String name=pair[0];      String value=charset == null ? pair[1] : URLDecoder.decode(pair[1],charset);      map.put(name,value);    }  }  return map;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Element element;  Node aNode;  boolean hasChild;  Document ownerDocument;  DocumentType docType;  String system;  String name;  NodeList addresses;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  addresses=aNewDoc.getElementsByTagName("emp:address");  element=(Element)addresses.item(0);  assertNotNull("empAddressNotNull",element);  aNode=doc.importNode(element,false);  hasChild=aNode.hasChildNodes();  assertFalse("hasChild",hasChild);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("dtdSystemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  name=aNode.getNodeName();  assertEquals("nodeName","emp:address",name);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrentityreplacement.class,args);}  }
class C{  public boolean canBeEncoded(){  for (  Pair entry : ((ValuePairs)value).mapping) {    TextEncodedStringNullTerminated next=new TextEncodedStringNullTerminated(identifier,frameBody,entry.getValue());    if (!next.canBeEncoded()) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("deprecation") private static void initialVersion(SQLiteDatabase db){  db.execSQL(RegisteredAppDbAdapter.getSqliteCreateStatement());  db.execSQL(RegisteredEventDbAdapter.getSqliteCreateStatement());  db.execSQL(RegisteredEventAttributeDbAdapter.getSqliteCreateStatement());  db.execSQL(RegisteredActionDbAdapter.getSqliteCreateStatement());  db.execSQL(RegisteredActionParameterDbAdapter.getSqliteCreateStatement());  db.execSQL(DataFilterDbAdapter.getSqliteCreateStatement());  db.execSQL(DataTypeDbAdapter.getSqliteCreateStatement());  db.execSQL(ExternalAttributeDbAdapter.getSqliteCreateStatement());  db.execSQL(RuleDbAdapter.getSqliteCreateStatement());  db.execSQL(RuleFilterDbAdapter.getSqliteCreateStatement());  db.execSQL(RuleActionDbAdapter.getSqliteCreateStatement());  db.execSQL(RuleActionParameterDbAdapter.getSqliteCreateStatement());  DataTypeDbAdapter dataTypeDbAdapter=new DataTypeDbAdapter(db);  DataFilterDbAdapter dataFilterDbAdapter=new DataFilterDbAdapter(db);  long dataTypeIdText=dataTypeDbAdapter.insert(OmniText.DB_NAME,OmniText.class.getName());  dataFilterDbAdapter.insert(OmniText.Filter.EQUALS.toString(),OmniText.Filter.EQUALS.displayName,dataTypeIdText,dataTypeIdText);  dataFilterDbAdapter.insert(OmniText.Filter.CONTAINS.toString(),OmniText.Filter.CONTAINS.displayName,dataTypeIdText,dataTypeIdText);  long dataTypeIdPhoneNumber=dataTypeDbAdapter.insert(OmniPhoneNumber.DB_NAME,OmniPhoneNumber.class.getName());  dataFilterDbAdapter.insert(OmniPhoneNumber.Filter.EQUALS.toString(),OmniPhoneNumber.Filter.EQUALS.displayName,dataTypeIdPhoneNumber,dataTypeIdPhoneNumber);  long dataTypeIdDayOfWeek=dataTypeDbAdapter.insert(OmniDayOfWeek.DB_NAME,OmniDayOfWeek.class.getName());  long dataTypeIdTimePeriod=dataTypeDbAdapter.insert(OmniTimePeriod.DB_NAME,OmniTimePeriod.class.getName());  long dataTypeIdDate=dataTypeDbAdapter.insert(OmniDate.DB_NAME,OmniDate.class.getName());  dataFilterDbAdapter.insert(OmniTimePeriod.Filter.DURING_EVERYDAY.toString(),OmniTimePeriod.Filter.DURING_EVERYDAY.displayName,dataTypeIdTimePeriod,dataTypeIdDate);  dataFilterDbAdapter.insert(OmniTimePeriod.Filter.EXCEPT_EVERYDAY.toString(),OmniTimePeriod.Filter.EXCEPT_EVERYDAY.displayName,dataTypeIdTimePeriod,dataTypeIdDate);  dataFilterDbAdapter.insert(OmniDate.Filter.IS_EVERYDAY.toString(),OmniDate.Filter.IS_EVERYDAY.displayName,dataTypeIdDate,dataTypeIdDate);  dataFilterDbAdapter.insert(OmniDate.Filter.IS_NOT_EVERYDAY.toString(),OmniDate.Filter.IS_NOT_EVERYDAY.displayName,dataTypeIdDate,dataTypeIdDate);  dataFilterDbAdapter.insert(OmniDate.Filter.BEFORE_EVERYDAY.toString(),OmniDate.Filter.BEFORE_EVERYDAY.displayName,dataTypeIdDate,dataTypeIdDate);  dataFilterDbAdapter.insert(OmniDate.Filter.AFTER_EVERYDAY.toString(),OmniDate.Filter.AFTER_EVERYDAY.displayName,dataTypeIdDate,dataTypeIdDate);  dataFilterDbAdapter.insert(OmniDate.Filter.DURING_EVERYDAY.toString(),OmniDate.Filter.DURING_EVERYDAY.displayName,dataTypeIdDate,dataTypeIdTimePeriod);  dataFilterDbAdapter.insert(OmniDate.Filter.EXCEPT_EVERYDAY.toString(),OmniDate.Filter.EXCEPT_EVERYDAY.displayName,dataTypeIdDate,dataTypeIdTimePeriod);  dataFilterDbAdapter.insert(OmniDate.Filter.ISDAYOFWEEK.toString(),OmniDate.Filter.ISDAYOFWEEK.displayName,dataTypeIdDate,dataTypeIdDayOfWeek);  long dataTypeIdArea=dataTypeDbAdapter.insert(OmniArea.DB_NAME,OmniArea.class.getName());  dataFilterDbAdapter.insert(OmniArea.Filter.NEAR.toString(),OmniArea.Filter.NEAR.displayName,dataTypeIdArea,dataTypeIdArea);  dataFilterDbAdapter.insert(OmniArea.Filter.AWAY.toString(),OmniArea.Filter.AWAY.displayName,dataTypeIdArea,dataTypeIdArea);  long dataTypeIdPasswordInput=dataTypeDbAdapter.insert(OmniPasswordInput.DB_NAME,OmniPasswordInput.class.getName());  RegisteredAppDbAdapter appDbAdapter=new RegisteredAppDbAdapter(db);  long appIdSms=appDbAdapter.insert(DbHelper.AppName.SMS,"",true);  long appIdPhone=appDbAdapter.insert(DbHelper.AppName.PHONE,"",true);  long appIdGPS=appDbAdapter.insert(DbHelper.AppName.GPS,"",true);  long appIdEmail=appDbAdapter.insert(DbHelper.AppName.EMAIL,"",true,true);  long appIdOmnidroid=appDbAdapter.insert(OmniAction.APP_NAME,"",true);  long appIdSettings=appDbAdapter.insert(DbHelper.AppName.SETTINGS,"",true,true);  long appIdSignals=appDbAdapter.insert(DbHelper.AppName.SIGNALS,"",true,true);  long appIdMedia=appDbAdapter.insert(DbHelper.AppName.MEDIA,"",true);  long appIdAndroid=appDbAdapter.insert(SystemEvent.PowerConnectedEvent.APPLICATION_NAME,"",true);  RegisteredEventDbAdapter eventDbAdapter=new RegisteredEventDbAdapter(db);  RegisteredEventAttributeDbAdapter eventAttributeDbAdapter=new RegisteredEventAttributeDbAdapter(db);  for (  SystemEvent e : SystemEvent.values()) {    eventDbAdapter.insert(e.EVENT_NAME,appIdAndroid);  }  long eventIdSmsRec=eventDbAdapter.insert(SMSReceivedEvent.EVENT_NAME,appIdSms);  eventAttributeDbAdapter.insert(SMSReceivedEvent.ATTRIB_PHONE_NO,eventIdSmsRec,dataTypeIdPhoneNumber);  eventAttributeDbAdapter.insert(SMSReceivedEvent.ATTRIB_MESSAGE_TEXT,eventIdSmsRec,dataTypeIdText);  eventAttributeDbAdapter.insert(SMSReceivedEvent.ATTRIB_MESSAGE_TIME,eventIdSmsRec,dataTypeIdDate);  long eventIdPhoneRings=eventDbAdapter.insert(PhoneRingingEvent.EVENT_NAME,appIdPhone);  eventAttributeDbAdapter.insert(PhoneRingingEvent.ATTRIBUTE_PHONE_NUMBER,eventIdPhoneRings,dataTypeIdPhoneNumber);  eventAttributeDbAdapter.insert(PhoneRingingEvent.ATTRIBUTE_TIMESTAMP,eventIdPhoneRings,dataTypeIdDate);  long eventIdGPSLocationChanged=eventDbAdapter.insert(LocationChangedEvent.EVENT_NAME,appIdGPS);  eventAttributeDbAdapter.insert(LocationChangedEvent.ATTRIBUTE_CURRENT_LOCATION,eventIdGPSLocationChanged,dataTypeIdArea);  long eventIdTimeTick=eventDbAdapter.insert(TimeTickEvent.EVENT_NAME,appIdAndroid);  eventAttributeDbAdapter.insert(TimeTickEvent.ATTRIBUTE_CURRENT_TIME,eventIdTimeTick,dataTypeIdDate);  RegisteredActionDbAdapter actionDbAdapter=new RegisteredActionDbAdapter(db);  RegisteredActionParameterDbAdapter actionParameterDbAdapter=new RegisteredActionParameterDbAdapter(db);  long actionIdDisplayMessage=actionDbAdapter.insert(ShowAlertAction.ACTION_NAME,appIdOmnidroid);  actionParameterDbAdapter.insert(ShowAlertAction.PARAM_ALERT_MESSAGE,actionIdDisplayMessage,dataTypeIdText);  long actionIdNotifyMessage=actionDbAdapter.insert(ShowNotificationAction.ACTION_NAME,appIdOmnidroid);  actionParameterDbAdapter.insert(ShowNotificationAction.PARAM_ALERT_MESSAGE,actionIdNotifyMessage,dataTypeIdText);  long actionIdShowWebsite=actionDbAdapter.insert(ShowWebsiteAction.ACTION_NAME,appIdOmnidroid);  actionParameterDbAdapter.insert(ShowWebsiteAction.PARAM_WEB_URL,actionIdShowWebsite,dataTypeIdText);  long actionIdSetBrightness=actionDbAdapter.insert(SetScreenBrightnessAction.ACTION_NAME,appIdSettings);  actionParameterDbAdapter.insert(SetScreenBrightnessAction.PARAM_BRIGHTNESS,actionIdSetBrightness,dataTypeIdText);  actionDbAdapter.insert(SetPhoneLoudAction.ACTION_NAME,appIdSettings);  actionDbAdapter.insert(SetPhoneSilentAction.ACTION_NAME,appIdSettings);  actionDbAdapter.insert(SetPhoneVibrateAction.ACTION_NAME,appIdSettings);  actionDbAdapter.insert(PlayMediaAction.ACTION_NAME,appIdMedia);  actionDbAdapter.insert(PauseMediaAction.ACTION_NAME,appIdMedia);  actionDbAdapter.insert(TurnOffWifiAction.ACTION_NAME,appIdSignals);  actionDbAdapter.insert(TurnOnWifiAction.ACTION_NAME,appIdSignals);  long actionIdSmsSend=actionDbAdapter.insert(SendSmsAction.ACTION_NAME,appIdSms);  actionParameterDbAdapter.insert(SendSmsAction.PARAM_PHONE_NO,actionIdSmsSend,dataTypeIdPhoneNumber);  actionParameterDbAdapter.insert(SendSmsAction.PARAM_SMS,actionIdSmsSend,dataTypeIdText);  long actionIdPhoneCall=actionDbAdapter.insert(CallPhoneAction.ACTION_NAME,appIdPhone);  actionParameterDbAdapter.insert(CallPhoneAction.PARAM_PHONE_NO,actionIdPhoneCall,dataTypeIdPhoneNumber);  long actionIdGmailSend=actionDbAdapter.insert(SendGmailAction.ACTION_NAME,appIdEmail);  actionParameterDbAdapter.insert(SendGmailAction.PARAM_USERNAME,actionIdGmailSend,dataTypeIdText);  actionParameterDbAdapter.insert(SendGmailAction.PARAM_PASSWORD,actionIdGmailSend,dataTypeIdPasswordInput);  actionParameterDbAdapter.insert(SendGmailAction.PARAM_TO,actionIdGmailSend,dataTypeIdText);  actionParameterDbAdapter.insert(SendGmailAction.PARAM_SUBJECT,actionIdGmailSend,dataTypeIdText);  actionParameterDbAdapter.insert(SendGmailAction.PARAM_BODY,actionIdGmailSend,dataTypeIdText);  db.execSQL(RuleDbAdapter.ADD_NOTIFICATION_COLUMN);  db.execSQL(FailedActionsDbAdapter.getSqliteCreateStatement());  db.execSQL(FailedActionParameterDbAdapter.getSqliteCreateStatement());  addCallEndEvent(db);  dropLogEvent(db);  addLogEvent(db);  dropLogAction(db);  addLogAction(db);  addLogGeneral(db);  modifyGmailAndTwitterParam(db);  addPhoneNumberNotEqualsFilter(db);  addGeneralLogLevels(db);  addInternetAndServiceAvailableEvents(db);  addSupportForGlobalEventAttributes(db);  alterFailedActionsTable(db);  addMissedCallEvent(db);}  }
class C{  protected OperationsException(LocalizableMessage message){  super(message);}  }
class C{  public NetObjectList(String lname){  super(lname);}  }
class C{  public CertificateNotYetValidException(String message){  super(message);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  Branch(final TemplateFile templateFile,final DN branchDN,final Schema schema,final List<String> subordinateTemplateNames,final List<Integer> numEntriesPerTemplate,final List<TemplateLine> extraLines) throws DecodeException {  this.branchDN=branchDN;  this.subordinateTemplateNames=subordinateTemplateNames;  this.numEntriesPerTemplate=numEntriesPerTemplate;  this.extraLines=extraLines;  final List<LocalizableMessage> warnings=new ArrayList<>();  rdnLines=new ArrayList<>();  for (  final AVA ava : branchDN.rdn()) {    final Attribute attribute=ava.toAttribute();    for (    final ByteString value : attribute.toArray()) {      final List<TemplateTag> tags=buildTagListForValue(value.toString(),templateFile,schema,warnings);      rdnLines.add(new TemplateLine(attribute.getAttributeDescription().getAttributeType(),0,tags));    }  }}  }
class C{  public Version noQualifier(){  return new Version(major,minor,patch,Collections.emptyList());}  }
class C{  protected static Long convertDateToBucketingLong(Date dateToBeConverted){  if (dateToBeConverted == null) {    return null;  }  return dateToBeConverted.getTime();}  }
class C{  public void shutdown(){synchronized (shutdownLock) {    shutdown=true;    shutdownLock.notifyAll();  }}  }
class C{  public SOAPMessage formSOAPError(String faultcode,String faultString,String detail){  SOAPMessage msg=null;  SOAPEnvelope envelope=null;  SOAPFault sf=null;  SOAPBody body=null;  SOAPElement se=null;  try {    msg=fac.createMessage();    envelope=msg.getSOAPPart().getEnvelope();    body=envelope.getBody();    sf=body.addFault();    Name qname=envelope.createName(faultcode,null,IFSConstants.SOAP_URI);    sf.setFaultCode(qname);    sf.setFaultString(FSUtils.bundle.getString(faultString));    if ((detail != null) && !(detail.length() == 0)) {      Detail det=sf.addDetail();      se=(SOAPElement)det.addDetailEntry(envelope.createName("Problem"));      se.addAttribute(envelope.createName("details"),FSUtils.bundle.getString(detail));    }  } catch (  SOAPException e) {    FSUtils.debug.error("FSSOAPService.formSOAPError:",e);    return null;  }  return msg;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @SuppressWarnings("unchecked") public void writeURL(java.net.URL url) throws SQLException {  if (url == null) {    attribs.add(null);  } else {    attribs.add(new SerialDatalink(url));  }}  }
class C{  public PdfCanvas showText(PdfArray textArray){  if (currentGs.getFont() == null)   throw new PdfException(PdfException.FontAndSizeMustBeSetBeforeWritingAnyText,currentGs);  document.checkShowTextIsoConformance(currentGs,resources);  contentStream.getOutputStream().writeBytes(ByteUtils.getIsoBytes("["));  for (  PdfObject obj : textArray) {    if (obj.isString()) {      StreamUtil.writeEscapedString(contentStream.getOutputStream(),((PdfString)obj).getValueBytes());    } else     if (obj.isNumber()) {      contentStream.getOutputStream().writeFloat(((PdfNumber)obj).floatValue());    }  }  contentStream.getOutputStream().writeBytes(ByteUtils.getIsoBytes("]"));  contentStream.getOutputStream().writeBytes(TJ);  return this;}  }
class C{  public boolean isPaintingTile(){  return getFlag(IS_PAINTING_TILE);}  }
class C{  public boolean isIdentity(){  return true;}  }
class C{  private static void sort(char[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        char ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        char a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      char last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    char t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    char t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    char t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    char t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    char pivot1=a[e2];    char pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      char ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        char ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    char pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      char ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public FunctionBased(PdfObject colorSpace,PdfFunction function){  super(new PdfDictionary(),ShadingType.FUNCTION_BASED,PdfColorSpace.makeColorSpace(colorSpace));  setFunction(function);}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  for (int i=0; i < elems.size(); i++) {    vecParameters.add(((Parameter)elems.elementAt(i)).paramValue);  }  parameters=(Object[])vecParameters.toArray(new Object[0]);  this.name=name;}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  public JInternalFrame(){  this("",false,false,false,false);}  }
class C{  public static Response.Builder readSpdy3HeadersList(List<Header> headerBlock) throws IOException {  String status=null;  String version="HTTP/1.1";  Headers.Builder headersBuilder=new Headers.Builder();  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name;    String values=headerBlock.get(i).value.utf8();    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (name.equals(RESPONSE_STATUS)) {        status=value;      } else       if (name.equals(VERSION)) {        version=value;      } else       if (!SPDY_3_SKIPPED_RESPONSE_HEADERS.contains(name)) {        headersBuilder.add(name.utf8(),value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  StatusLine statusLine=StatusLine.parse(version + " " + status);  return new Response.Builder().protocol(Protocol.SPDY_3).code(statusLine.code).message(statusLine.message).headers(headersBuilder.build());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Entity entityNode;  String publicId;  String systemId;  String notation;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  entityNode=(Entity)entityList.getNamedItem("ent5");  publicId=entityNode.getPublicId();  assertEquals("publicId","entityURI",publicId);  systemId=entityNode.getSystemId();  assertURIEquals("systemId",null,null,null,"entityFile",null,null,null,null,systemId);  notation=entityNode.getNotationName();  assertEquals("notation","notation1",notation);}  }
class C{  Node<E> first(){  restartFromHead:   for (; ; ) {    for (Node<E> h=head, p=h, q; ; ) {      boolean hasItem=(p.item != null);      if (hasItem || (q=p.next) == null) {        updateHead(h,p);        return hasItem ? p : null;      } else       if (p == q)       continue restartFromHead; else       p=q;    }  }}  }
class C{  @Override public void run(){  setName(handlerName);  boolean listening=false;  boolean starting=true;  while (!shutdownRequested) {    if (!enabled) {      if (listening) {        cleanUpSelector();        listening=false;        logger.info(NOTE_CONNHANDLER_STOPPED_LISTENING,handlerName);      }      if (starting) {synchronized (waitListen) {          starting=false;          waitListen.notify();        }      }      StaticUtils.sleep(1000);      continue;    }    try {      cleanUpSelector();      int numRegistered=registerChannels();synchronized (waitListen) {        waitListen.notify();      }      if (numRegistered == 0) {        logger.error(ERR_LDAP_CONNHANDLER_NO_ACCEPTORS,currentConfig.dn());        enabled=false;        continue;      }      listening=true;      boolean lastIterationFailed=false;      while (enabled && !shutdownRequested) {        try {          serveIncomingConnections();          lastIterationFailed=false;        } catch (        Exception e) {          logger.traceException(e);          logger.error(ERR_CONNHANDLER_CANNOT_ACCEPT_CONNECTION,friendlyName,currentConfig.dn(),getExceptionMessage(e));          if (lastIterationFailed) {            LocalizableMessage message=ERR_CONNHANDLER_CONSECUTIVE_ACCEPT_FAILURES.get(friendlyName,currentConfig.dn(),stackTraceToSingleLineString(e));            logger.error(message);            DirectoryServer.sendAlertNotification(this,ALERT_TYPE_LDAP_CONNECTION_HANDLER_CONSECUTIVE_FAILURES,message);            cleanUpSelector();            enabled=false;          } else {            lastIterationFailed=true;          }        }      }      if (shutdownRequested) {        cleanUpSelector();        selector.close();        listening=false;        enabled=false;      }    } catch (    Exception e) {      logger.traceException(e);      LocalizableMessage message=ERR_LDAP_CONNHANDLER_UNCAUGHT_ERROR.get(currentConfig.dn(),stackTraceToSingleLineString(e));      logger.error(message);      DirectoryServer.sendAlertNotification(this,ALERT_TYPE_LDAP_CONNECTION_HANDLER_UNCAUGHT_ERROR,message);      cleanUpSelector();      enabled=false;    }  }}  }
class C{  public StringToIntTable(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new String[blocksize];  m_values=new int[m_blocksize];}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public String translatePrimaryID(String primaryID,String siteID){  return update(new ResolvedServer(primaryID,siteID)).getPrimaryID();}  }
class C{  public void addAttributeValue(Element element) throws SAMLException {  if (element == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("addAttributeValue: input  is null.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  String tag=element.getLocalName();  if ((tag == null) || (!tag.equals("AttributeValue"))) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AttributeValue: wrong input.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  try {    if (_attributeValue == null) {      _attributeValue=new ArrayList();    }    if (!(_attributeValue.add(element))) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Attribute: failed to " + "add to the attribute value list.");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("addListError"));    }  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("addAttributeValue error",e);    throw new SAMLRequesterException("Exception in addAttributeValue" + e.getMessage());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateentityreference.class,args);}  }
class C{  public void handleTblServerConfigXMLServerButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  ServerConfigXMLAddServerViewBean vb=(ServerConfigXMLAddServerViewBean)getViewBean(ServerConfigXMLAddServerViewBean.class);  unlockPageTrail();  vb.setPageSessionAttribute(ServerConfigXMLAddServerViewBean.PG_ATTR_SERVER_GROUP_TYPE,"sms");  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  @Override public boolean is_contained_in(ShapeTileBox p_box){  if (p_box.box_ll.v_x > center.v_x - radius) {    return false;  }  if (p_box.box_ll.v_y > center.v_y - radius) {    return false;  }  if (p_box.box_ur.v_x < center.v_x + radius) {    return false;  }  if (p_box.box_ur.v_y < center.v_y + radius) {    return false;  }  return true;}  }
class C{  public String toXMLString(){  int beginTokenIndex=getStartToken().getTokenIndex();  int endTokenIndex=beginTokenIndex;  if (getEndToken() != null) {    endTokenIndex=getEndToken().getTokenIndex();  }  return getDocument().toXMLFragment(beginTokenIndex,endTokenIndex);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ReplyToElement createReplyToElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ReplyToElementImpl();}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public boolean isSelectionEmpty(){  return (selection == null || selection.length == 0);}  }
class C{  ObjectIdentifierEqualityMatchingRuleImpl(){}  }
class C{  @SuppressWarnings("null") public static TagInfo parseTagFileDirectives(ParserController pc,String name,String path,Jar jar,TagLibraryInfo tagLibInfo) throws JasperException {  ErrorDispatcher err=pc.getCompiler().getErrorDispatcher();  Node.Nodes page=null;  try {    page=pc.parseTagFileDirectives(path,jar);  } catch (  IOException e) {    err.jspError("jsp.error.file.not.found",path);  }  TagFileDirectiveVisitor tagFileVisitor=new TagFileDirectiveVisitor(pc.getCompiler(),tagLibInfo,name,path);  page.visit(tagFileVisitor);  tagFileVisitor.postCheck();  return tagFileVisitor.getTagInfo();}  }
class C{  private boolean checkJSSE(final byte[] msg){  if (!checkSecond(msg)) {    return false;  }  if (msg[msg.length - 2] == 0x00) {    if (!containsByte((byte)0x00,msg,10,msg.length - 2)) {      return true;    }  }  if (msg.length > 128) {    int last=msg.length - 1 - 48- 80;    for (int i=9; i < last; i++) {      if (msg[i] == 0x00) {        return true;      }    }  }  return false;}  }
class C{  @Override public boolean isReadyForRemoval(){  return isReadyForRemoval;}  }
class C{  int peekChar(){  return peekChar(0);}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testEqualObjects(){  String value1="12378246728727834290276457386374882976782849";  String value2="12378246728727834290276457386374882976782849";  BigInteger aNumber1=new BigInteger(value1);  BigInteger aNumber2=new BigInteger(value2);  int code1=aNumber1.hashCode();  int code2=aNumber2.hashCode();  if (aNumber1.equals(aNumber2)) {    assertTrue("hash codes for equal objects are unequal",code1 == code2);  }}  }
class C{  public ImportStepGenerator(ApplicationService applicationService,ResourceTypeService resourceTypeService,PrivilegeManager privilegeManager,PrivilegeValidator privilegeValidator,ApplicationTypeService applicationTypeService,String realm,Subject subject,PrivilegeSet privilegeSet){  Reject.checkNotNull(privilegeSet,"privilegeSet cannot be empty");  this.applicationService=applicationService;  this.resourceTypeService=resourceTypeService;  this.privilegeManager=privilegeManager;  this.privilegeValidator=privilegeValidator;  this.applicationTypeService=applicationTypeService;  this.realm=realm;  this.subject=subject;  this.privilegeSet=privilegeSet;  this.importStepsApplication=new ArrayList<>();  this.importStepsResourceType=new ArrayList<>();  this.importStepsPrivilege=new ArrayList<>();  this.uuidResTypeVsApplicationFromFile=new HashMap<>();  this.nameVsApplicationExisting=new HashMap<>();  this.uuidVsResourceTypeExisting=new HashMap<>();  this.uuidVsResourceTypeFromFile=new HashMap<>();  this.dummyIdVsActualUuids=new HashMap<>();  this.resourceTypesExisting=new HashSet<>();}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  private static String extractRDN(String dn,boolean showAttributeName){  String result;  if (dn == null) {    result=null;  } else {    try {      DN dnObj=DN.valueOf(dn);      if (dnObj.size() >= 1) {        RDN rdn=dnObj.rdn();        if (showAttributeName) {          result=rdn.toString();        } else {          result=rdn.getFirstAVA().getAttributeValue().toString();        }      } else {        result="";      }    } catch (    Throwable t) {      throw new IllegalArgumentException("The provided argument is not a valid dn: " + t,t);    }  }  return result;}  }
class C{  public static int findWordStart(CharSequence line,int pos,String noWordSep){  return findWordStart(line,pos,noWordSep,true,false,false);}  }
class C{  @Override public void removeView(final FeatureView featureView,final boolean addedToBackStack,final String fragmentTag){  if (featureView instanceof DialogFragment) {    hideDialogFragment((DialogFragment)featureView);  } else   if (featureView instanceof MirrorView) {    String tag=(fragmentTag != null) ? fragmentTag : featureView.getViewTag();    hideMirrorView((MirrorView)featureView,addedToBackStack,tag);  } else {    throw new IllegalArgumentException("View must be a DialogFragment or MirrorView");  }}  }
class C{  public static boolean isUpperCase(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  for (int i=0; i < value.length(); i++) {    if (Character.isLowerCase(value.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public void unregister(@Nullable Object subscriber){  List<EventHandler> eventHandlersToRemove=new ArrayList<>();  for (  CopyOnWriteArraySet<EventHandler> eventHandlers : mRegisteredEventHandlersByEventType.values()) {    for (    EventHandler eventHandler : eventHandlers) {      Object eventHandlerSubscriber=eventHandler.mSubscriber.get();      if (eventHandlerSubscriber == null || eventHandlerSubscriber == subscriber) {        eventHandlersToRemove.add(eventHandler);      }    }    eventHandlers.removeAll(eventHandlersToRemove);    eventHandlersToRemove.clear();  }  for (  IdentityWeakReferenceKey<Object> key : mSubscribersDefaultThreads.keySet()) {    Object ref=key.get();    if (ref == null || ref == subscriber) {      mSubscribersDefaultThreads.remove(key);    }  }}  }
class C{  public static void sort(char[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  Map<String,Set<String>> readOpenIDWellKnownConfig(Locale locale,String url) throws WorkflowException {  String configurationContents=getWebContent(locale,url);  Map<String,Object> config=Utils.parseJson(configurationContents);  Map<String,Set<String>> attrs=new CaseInsensitiveHashMap();  attrs.put(AUTH_MODULE_AUTH_URL,asSet((String)config.get(WELL_KNOWN_AUTH_URL)));  attrs.put(AUTH_MODULE_TOKEN_URL,asSet((String)config.get(WELL_KNOWN_TOKEN_URL)));  attrs.put(AUTH_MODULE_USER_PROFILE_URL,asSet((String)config.get(WELL_KNOWN_PROFILE_URL)));  attrs.put(AUTH_MODULE_ISSUER,asSet((String)config.get(WELL_KNOWN_ISSUER)));  String jwkURL=(String)config.get(WELL_KNOWN_JWK);  if (jwkURL != null && !jwkURL.isEmpty()) {    attrs.put(AUTH_MODULE_CRYPTO_TYPE,asSet("jwk_url"));    attrs.put(AUTH_MODULE_CRYPTO_VALUE,asSet(jwkURL));  }  return attrs;}  }
class C{  public void write(final int c) throws IOException {  if (m_writer != null)   m_writer.write(c);  if (count >= buf_length)   flushBuffer();  if (c < 0x80) {    buf[count++]=(byte)(c);  } else   if (c < 0x800) {    buf[count++]=(byte)(0xc0 + (c >> 6));    buf[count++]=(byte)(0x80 + (c & 0x3f));  } else {    buf[count++]=(byte)(0xe0 + (c >> 12));    buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    buf[count++]=(byte)(0x80 + (c & 0x3f));  }}  }
class C{  public KeyStroke[] allKeys(){  int count=size();  InputMap parent=getParent();  if (count == 0) {    if (parent != null) {      return parent.allKeys();    }    return keys();  }  if (parent == null) {    return keys();  }  KeyStroke[] keys=keys();  KeyStroke[] pKeys=parent.allKeys();  if (pKeys == null) {    return keys;  }  if (keys == null) {    return pKeys;  }  HashMap<KeyStroke,KeyStroke> keyMap=new HashMap<KeyStroke,KeyStroke>();  int counter;  for (counter=keys.length - 1; counter >= 0; counter--) {    keyMap.put(keys[counter],keys[counter]);  }  for (counter=pKeys.length - 1; counter >= 0; counter--) {    keyMap.put(pKeys[counter],pKeys[counter]);  }  KeyStroke[] allKeys=new KeyStroke[keyMap.size()];  return keyMap.keySet().toArray(allKeys);}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  String action=request.getParameter(IFSConstants.USERACTION);  String lrurl=null;  if (action != null && action.trim().equalsIgnoreCase(IFSConstants.CANCEL)) {    FSUtils.debug.message("FSConsentHandler:: user pressed cancel proceding to lrurl");    lrurl=request.getParameter(IFSConstants.LRURL);  } else {    try {      FSPostLogin postLogin=new FSPostLogin();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSConsentHandler:: selected provider is " + request.getParameter(IFSConstants.COTKEY));      }      lrurl=postLogin.doConsentToIntro(request);    } catch (    FSPostLoginException fsPostExp) {      FSUtils.debug.error("FSConsentHandler::FSPostLogin Exception",fsPostExp);    }  }  if (lrurl != null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSConsentHandler:: Redirecting to  " + lrurl);    }    FSUtils.forwardRequest(request,response,lrurl);  } else {    FSUtils.debug.error("FSConsentHandler:: LRURL is null in request ");  }}  }
class C{  public boolean bool(){  return str().length() > 0;}  }
class C{  public void _write(OutputStream output){  output.write_boolean(value);}  }
class C{  void queueIsEmpty(){  for (Node p=head; p != null; p=p.next) {    Itr it=p.get();    if (it != null) {      p.clear();      it.shutdown();    }  }  head=null;  itrs=null;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public final void remove_from_tree(AwtreeShapeSearch p_shape_tree){  if (p_shape_tree == null)   return;  p_shape_tree.remove(tree_entries);}  }
class C{  public void signXML() throws SAMLException {  throw new SAMLException(FSUtils.BUNDLE_NAME,"unsupportedOperation",null);}  }
class C{  public Cell clone(boolean includeContent){  Cell newCell=new Cell(rowspan,colspan);  newCell.row=row;  newCell.col=col;  newCell.properties=new HashMap<>(properties);  if (includeContent) {    newCell.childElements=new ArrayList<>(childElements);  }  return newCell;}  }
class C{  final int compare(MarkData o1,MarkData o2){  if (o1.index < o2.index) {    return -1;  } else   if (o1.index > o2.index) {    return 1;  } else {    return 0;  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiPopupMenuUI();  return MultiLookAndFeel.createUIs(mui,((MultiPopupMenuUI)mui).uis,a);}  }
class C{  public static JLabel makeJLabel(LabelFieldDescriptor desc){  UIFactory.TextStyle style;  if (desc.getLabelType() == LabelFieldDescriptor.LabelType.PRIMARY) {    style=UIFactory.TextStyle.PRIMARY_FIELD_VALID;  } else {    style=UIFactory.TextStyle.SECONDARY_FIELD_VALID;  }  return makeJLabel(UIFactory.IconType.NO_ICON,desc.getLabel(),style);}  }
class C{  private void twoTasksLoadCallsToRepository(TasksDataSource.LoadTasksCallback callback){  mTasksRepository.getTasks(callback);  verify(mTasksLocalDataSource).getTasks(mTasksCallbackCaptor.capture());  mTasksCallbackCaptor.getValue().onDataNotAvailable();  verify(mTasksRemoteDataSource).getTasks(mTasksCallbackCaptor.capture());  mTasksCallbackCaptor.getValue().onTasksLoaded(TASKS);  mTasksRepository.getTasks(callback);}  }
class C{  private void parse_type_spec() throws SyntaxException {  LineCol lineCol=current.getLineCol();  parsedExpsNotEmpty(current);  Expression v=parsedExps.pop();  if (v instanceof AST.Access) {    if (((AST.Access)v).exp != null) {      err.UnexpectedTokenException("variable definition",v.toString(),v.line_col());      err.debug("ignore current statement");      throw new ParseFail();    }    String name=((AST.Access)v).name;    if (usedVarNames.contains(name)) {      err.DuplicateVariableNameException(name,v.line_col());      err.debug("assume that it's an unused name");    }    v=new VariableDef(name,modifiers,annos,v.line_col());    annos.clear();    usedVarNames.add(name);    modifiers.clear();  }  if (!(v instanceof VariableDef)) {    err.UnexpectedTokenException("variable",v.toString(),v.line_col());    err.debug("ignore current statement");    throw new ParseFail();  }  nextNode(false);  if (current instanceof Element) {    AST.Access a=parse_cls_for_type_spec();    ((VariableDef)v).setType(a);  } else {    err.UnexpectedTokenException("type",current.toString(),current == null ? lineCol : current.getLineCol());    err.debug("ignore current statement");    throw new ParseFail();  }  parsedExps.push(v);  parse_expression();}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(flags);}  }
class C{  public SimpleTimeZone(int rawOffset,String ID){  this.rawOffset=rawOffset;  setID(ID);  dstSavings=millisPerHour;}  }
class C{  public byte[] toByteArray(String ascii){  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  return fromAscii(ascii.toCharArray());}  }
class C{  public final boolean greaterEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) >= 0);}  }
class C{  public void resetToPreferredSizes(JSplitPane a){  for (int i=0; i < uis.size(); i++) {    ((SplitPaneUI)(uis.elementAt(i))).resetToPreferredSizes(a);  }}  }
class C{  static String parseCDATA(Element elem){  if (elem == null) {    return null;  }  Node text=elem.getFirstChild();  if (text != null) {    return text.getNodeValue();  }  return null;}  }
class C{  public boolean tryUnlockRead(){  long s, m;  WNode h;  while ((m=(s=state) & ABITS) != 0L && m < WBIT) {    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return true;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return true;  }  return false;}  }
class C{  public void processingInstruction(StylesheetHandler handler,String target,String data) throws org.xml.sax.SAXException {}  }
class C{  public boolean isInteger(){  return type == INTEGER;}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  private void invokePostResponsePlugins(){  getPluginConfigManager().invokePostResponseSearchPlugins(this);}  }
class C{  public void dispose(){  Object[] inNodesArray=inNodes.toArray();  for (int i=0; i < inNodesArray.length; i++) {    DigraphNode node=(DigraphNode)inNodesArray[i];    node.removeEdge(this);  }  Object[] outNodesArray=outNodes.toArray();  for (int i=0; i < outNodesArray.length; i++) {    DigraphNode node=(DigraphNode)outNodesArray[i];    removeEdge(node);  }}  }
class C{  @Override public <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQuery(dynamicQuery);}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  private void returnToPostLogout(String logoutStatus){  FSUtils.debug.message("Entered FSPreLogoutHandler::returnToPostLogout");  boolean error=false;  boolean logoutSuccess=true;  if (!logoutStatus.equals(IFSConstants.SAML_SUCCESS)) {    logoutSuccess=false;  }  boolean multiProtocolInvoked=false;  boolean toInvokeMultiProtocol=false;  if (MultiProtocolUtils.isMultipleProtocolSession(request,SingleLogoutManager.IDFF) && hostedRole.equalsIgnoreCase(IFSConstants.IDP) && !MultiProtocolUtils.isMultiProtocolRelayState(relayState)) {    toInvokeMultiProtocol=true;  }  try {    String returnProviderId="";    String relayState="";    String gLogoutStatus="";    String inResponseTo="";    String retURL=null;    FSLogoutResponse responseLogout=new FSLogoutResponse();    FSReturnSessionManager mngInst=FSReturnSessionManager.getInstance(metaAlias);    HashMap providerMap=new HashMap();    if (mngInst != null) {      providerMap=mngInst.getUserProviderInfo(userID);    }    if (providerMap == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Return URL based on local postlogout URL" + "\nNo Source in ReturnMAP : rs=" + this.relayState);      }      if (toInvokeMultiProtocol) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSPreLogHandler.retToPostLogout:" + " call MP HTTP, status=" + logoutStatus);        }        multiProtocolInvoked=true;        int retStatus=handleMultiProtocolLogout(logoutStatus,null);        if (retStatus == SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {          return;        } else {          if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {            logoutSuccess=false;          }        }      }      if ((this.relayState == null) || (this.relayState.length() == 0)) {        FSServiceUtils.returnLocallyAfterOperation(response,LOGOUT_DONE_URL,logoutSuccess,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);      } else {        FSServiceUtils.returnLocallyAfterOperation(response,this.relayState,logoutSuccess,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);      }      return;    }    returnProviderId=(String)providerMap.get(IFSConstants.PROVIDER);    ProviderDescriptorType descriptor=null;    if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {      descriptor=metaManager.getSPDescriptor(realm,returnProviderId);    } else {      descriptor=metaManager.getIDPDescriptor(realm,returnProviderId);    }    retURL=descriptor.getSingleLogoutServiceReturnURL();    relayState=(String)providerMap.get(IFSConstants.LOGOUT_RELAY_STATE);    gLogoutStatus=(String)providerMap.get(IFSConstants.LOGOUT_STATUS);    inResponseTo=(String)providerMap.get(IFSConstants.RESPONSE_TO);    mngInst.removeUserProviderInfo(userID);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Deleted " + userID + " from return list");    }    responseLogout.setResponseTo(inResponseTo);    responseLogout.setRelayState(relayState);    responseLogout.setProviderId(hostedEntityId);    if (gLogoutStatus != null) {      responseLogout.setStatus(logoutStatus);    }    responseLogout.setID(IFSConstants.LOGOUTID);    responseLogout.setMinorVersion(FSServiceUtils.getMinorVersion(descriptor.getProtocolSupportEnumeration()));    if (toInvokeMultiProtocol) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSPreLogHandler.retToPostLogout:" + " call MP HTTP, response=" + responseLogout.toXMLString());      }      multiProtocolInvoked=true;      int retStatus=handleMultiProtocolLogout(logoutStatus,responseLogout.toXMLString(true,true));      if (retStatus == SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {        return;      } else {        if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {          logoutSuccess=false;          responseLogout.setStatus(IFSConstants.SAML_RESPONDER);        }      }    }    String urlEncodedResponse=responseLogout.toURLEncodedQueryString();    if (FSServiceUtils.isSigningOn()) {      String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);      if (certAlias == null || certAlias.length() == 0) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSBrowserArtifactConsumerHandler:: " + "signSAMLRequest:" + "couldn't obtain this site's cert alias.");        }        throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));      }      urlEncodedResponse=FSSignatureUtil.signAndReturnQueryString(urlEncodedResponse,certAlias);    }    StringBuffer redirectURL=new StringBuffer();    redirectURL.append(retURL);    if (retURL.indexOf(IFSConstants.QUESTION_MARK) == -1) {      redirectURL.append(IFSConstants.QUESTION_MARK);    } else {      redirectURL.append(IFSConstants.AMPERSAND);    }    redirectURL.append(urlEncodedResponse);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Response to be sent (3) : " + redirectURL.toString());    }    response.sendRedirect(redirectURL.toString());    return;  } catch (  IOException e) {    FSUtils.debug.error("Unable to get LRURL. No location to redirect." + "processing completed:",e);    error=true;  }catch (  IDFFMetaException e) {    FSUtils.debug.error("Unable to get LRURL. No location to redirect" + " processing completed:",e);    error=true;  }catch (  Exception e) {    FSUtils.debug.error("FSPreLogoutHandler::General exception thrown :",e);    error=true;  }  if (error) {    String[] data={FSUtils.bundle.getString(IFSConstants.LOGOUT_REDIRECT_FAILED)};    LogUtil.error(Level.INFO,LogUtil.LOGOUT_REDIRECT_FAILED,data,ssoToken);    logoutSuccess=false;  }  if (toInvokeMultiProtocol && !multiProtocolInvoked) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSPreLogHandler.retToPostLogout:" + " call MP HTTP, error=" + error);    }    multiProtocolInvoked=true;    int retStatus=handleMultiProtocolLogout(logoutStatus,null);    if (retStatus == SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {      return;    } else {      if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {        logoutSuccess=false;      }    }  }  FSServiceUtils.returnLocallyAfterOperation(response,LOGOUT_DONE_URL,logoutSuccess,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);  return;}  }
class C{  private char readEscapeCharacter() throws JSONException {  char escaped=in.charAt(pos++);switch (escaped) {case 'u':    if (pos + 4 > in.length()) {      throw syntaxError("Unterminated escape sequence");    }  String hex=in.substring(pos,pos + 4);pos+=4;return (char)Integer.parseInt(hex,16);case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\'':case '"':case '\\':default :return escaped;}}  }
class C{  public ActivationException(String s){  super(s);  initCause(null);}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  static Promise<Long> blockingPromiseLong(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  @NonNull public List<TrayItem> queryProvider(@NonNull final Uri uri) throws IllegalStateException {  final Cursor cursor=mContext.getContentResolver().query(uri,null,null,null,null);  if (cursor == null) {    throw new IllegalStateException("could not access stored data with uri " + uri + ". Is the provider registered in the manifest of your application?");  }  final ArrayList<TrayItem> list=new ArrayList<>();  for (boolean hasItem=cursor.moveToFirst(); hasItem; hasItem=cursor.moveToNext()) {    list.add(new TrayItem(cursor));  }  cursor.close();  return list;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    this.inviteCount++;    logger.info("shootme: got an Invite " + this.inviteCount);    assertTrue(request.getHeader(ContactHeader.NAME) != null);    Response response=protocolObjects.messageFactory.createResponse(Response.TRYING,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ";transport="+ protocolObjects.transport+ ">");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    Dialog dialog=st.getDialog();    assertTrue(this.dialog != dialog);    this.dialogCount++;    this.dialog=dialog;    logger.info("Shootme: dialog = " + dialog);    st.sendResponse(response);    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    if (((SipURI)(request.getRequestURI())).getParameter("redirection") == null) {      Response moved=protocolObjects.messageFactory.createResponse(Response.MOVED_TEMPORARILY,request);      moved.addHeader(contactHeader);      toHeader=(ToHeader)moved.getHeader(ToHeader.NAME);      toHeader.setTag("4321");      st.sendResponse(moved);      assertTrue("dialog state should be terminated",dialog.getState() == DialogState.TERMINATED);    } else {      Response ringing=protocolObjects.messageFactory.createResponse(Response.RINGING,request);      toHeader=(ToHeader)ringing.getHeader(ToHeader.NAME);      toHeader.setTag("5432");      st.sendResponse(ringing);      assertEquals("server tx state should be proceeding",st.getState(),TransactionState.PROCEEDING);      this.okResponse=protocolObjects.messageFactory.createResponse(Response.OK,request);      toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);      toHeader.setTag("5432");      okResponse.addHeader(contactHeader);      this.inviteTid=st;      this.inviteRequest=request;      new Timer().schedule(new MyTimerTask(this),500);    }  } catch (  Exception ex) {    ex.printStackTrace();    fail("Error sending response to INVITE");  }}  }
class C{  public int hashCode(){  return idType.hashCode();}  }
class C{  @Override public int read(char buf[],int offset,int count) throws IOException {  if (0 <= offset && offset <= buf.length && 0 <= count && count <= buf.length - offset) {synchronized (lock) {      if (isOpen()) {        if (pos == this.count) {          return -1;        }        int end=pos + count > this.count ? this.count : pos + count;        str.getChars(pos,end,buf,offset);        int read=end - pos;        pos=end;        return read;      }      throw new IOException("StringReader is closed");    }  }  throw new ArrayIndexOutOfBoundsException();}  }
class C{  @Override public void sessionCreated(HttpSessionEvent event){  log("sessionCreated('" + event.getSession().getId() + "')");}  }
class C{  public SubjectLocality createSubjectLocality(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_LOCALITY);  if (obj == null) {    return new SubjectLocalityImpl();  } else {    return (SubjectLocality)obj;  }}  }
class C{  public static int e(String tag,String msg,Throwable tr){  return Log.e(tag,msg,tr);}  }
class C{  public static List<String> doc(ProtoElement element){  if (!element.hasAttribute(ElementDocumentationAttribute.KEY)) {    return ImmutableList.<String>of();  }  return new GoContextCommon().getCommentLines(DocumentationUtil.getScopedDescription(element));}  }
class C{  public Chunk(final GUID headerGuid,final BigInteger chunkLen){  if (headerGuid == null) {    throw new IllegalArgumentException("GUID must not be null.");  }  if (chunkLen == null || chunkLen.compareTo(BigInteger.ZERO) < 0) {    throw new IllegalArgumentException("chunkLen must not be null nor negative.");  }  this.guid=headerGuid;  this.chunkLength=chunkLen;}  }
class C{  public StarBrick(Mario mario,int stageZone,Group parent,float xPos,float yPos,float xVel,float yVel,Image[] brickSprite,Image... starSprites){  super(BLOCK_COLLISION_DATA,xPos,yPos,xVel,yVel,brickSprite);  this.mario=mario;  this.parent=parent;  zone=stageZone;  immu_star=new ImmunityStar(mario,stageZone,xPos,yPos,(float)(1.5 * REL_HEIGHT),10,starSprites);}  }
class C{  private BaseDnRegistry(boolean testOnly){  this.testOnly=testOnly;}  }
class C{  public java.lang.String toString(){  return toString(true,false);}  }
class C{  public void test_ConstructorIF(){  whm=new WeakHashMap(50,0.5f);  for (int i=0; i < 100; i++)   whm.put(keyArray[i],valueArray[i]);  for (int i=0; i < 100; i++)   assertTrue("Incorrect value retrieved",whm.get(keyArray[i]) == valueArray[i]);  WeakHashMap empty=new WeakHashMap(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");  try {    new WeakHashMap(50,-0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new WeakHashMap(-50,0.5f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  @Override public void start() throws IOException {  super.start();  try {    setPool(new RxTaskPool(getMaxThreads(),getMinThreads(),this));  } catch (  Exception x) {    log.fatal(sm.getString("nioReceiver.threadpool.fail"),x);    if (x instanceof IOException)     throw (IOException)x; else     throw new IOException(x.getMessage());  }  try {    getBind();    bind();    String channelName="";    if (getChannel().getName() != null)     channelName="[" + getChannel().getName() + "]";    Thread t=new Thread(this,"NioReceiver" + channelName);    t.setDaemon(true);    t.start();  } catch (  Exception x) {    log.fatal(sm.getString("nioReceiver.start.fail"),x);    if (x instanceof IOException)     throw (IOException)x; else     throw new IOException(x.getMessage());  }}  }
class C{  public void registerClientConnection(ClientConnection connection){  connectionList.add(connection);}  }
class C{  private JsonValue patchUser(String id,JsonValue patchJson) throws Exception {  System.out.println("1. Patch a user: ");  HttpResponse<String> response=Unirest.patch(azureEndpoint + "/account/" + id).header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").header("content-type","application/json").header("if-match","*").body(writeValueAsString(patchJson)).asString();  return json(readJson(response.getBody()));}  }
class C{  public static void createSite(String siteURL,Set accessPoints) throws UpgradeException {  try {    SiteConfiguration.createSite(ssoToken,siteURL,siteURL,accessPoints);  } catch (  ConfigurationException ce) {    throw new UpgradeException("Unable to create Service instance");  }catch (  SMSException sme) {    throw new UpgradeException("Unable to add to site");  }catch (  SSOException ssoe) {    throw new UpgradeException("invalid ssotoken");  }}  }
class C{  public ConfigChangeResult applyConfigurationChange(SNMPConnectionHandlerCfg configuration){  try {    if ((this.registeredSNMPMBeans) && (!configuration.isRegisteredMbean())) {      this.unregisterSnmpMBeans();      this.registeredSNMPMBeans=configuration.isRegisteredMbean();    } else     if ((!this.registeredSNMPMBeans) && (configuration.isRegisteredMbean())) {      this.unregisterSnmpMBeans();      this.registeredSNMPMBeans=configuration.isRegisteredMbean();    }    if ((this.snmpPort != configuration.getListenPort())) {      this.server.unregisterMBean(this.snmpObjName);      this.snmpAdaptor.stop();      this.snmpPort=configuration.getListenPort();      this.snmpAdaptor=this.getSnmpAdaptor(configuration);      this.snmpObjName=new ObjectName(SNMPConnectionHandlerDefinitions.SNMP_DOMAIN + "class=SnmpAdaptorServer,protocol=snmp," + "port="+ snmpPort);      this.server.registerMBean(this.snmpAdaptor,this.snmpObjName);      this.snmpAdaptor.start();      if (this.snmpTrapPort != configuration.getTrapPort()) {        this.snmpTrapPort=configuration.getTrapPort();        this.snmpAdaptor.setTrapPort(snmpTrapPort);        this.snmpAdaptor.snmpV1Trap(0,0,null);      }    }  } catch (  Exception ex) {    logger.traceException(ex);  }  return new ConfigChangeResult();}  }
class C{  public void postProcessDelete(SSOToken token,String entryDN,Map attributes,boolean softDeleteEnabled,int objectType) throws AMPostCallBackException {  try {    if (debug.messageEnabled()) {      debug.message("ReferentialIntegrityPlugin.postProcessDelete()");    }    Set objectTypes=new HashSet();    objectTypes.add(new Integer(AMObject.USER));    objectTypes.add(new Integer(AMObject.ROLE));    objectTypes.add(new Integer(AMObject.ORGANIZATION));    objectTypes.add(new Integer(AMObject.GROUP));    objectTypes.add(new Integer(AMObject.ASSIGNABLE_DYNAMIC_GROUP));    objectTypes.add(new Integer(AMObject.DYNAMIC_GROUP));    objectTypes.add(new Integer(AMObject.FILTERED_ROLE));    if (objectTypes.contains(new Integer(objectType))) {      String subOrg, policyName, subjectName;      Policy policy;      Subject subject;      Iterator policyIter, subjectIter;      DN entryDName=DN.valueOf(entryDN);      AMStoreConnection dpStore=new AMStoreConnection(token);      DN rootDN=DN.valueOf(SMSEntry.getRootSuffix());      if (debug.messageEnabled()) {        debug.message("Searching for all policies from root DN: " + rootDN.toString());      }      PolicyManager pm=new PolicyManager(token,rootDN.toString());      String org=pm.getOrganizationName();      Map configParams=PolicyConfig.getPolicyConfig(org);      String ldapServer=((String)configParams.get(PolicyConfig.LDAP_SERVER)).toLowerCase();      boolean localDS=PolicyUtils.isLocalDS(ldapServer);      if (objectType == AMObject.ROLE) {        localDS=true;      }      if (localDS) {        AMOrganization rootOrg=(AMOrganization)dpStore.getOrganization(org);        Set subOrgs=null;        subOrgs=rootOrg.searchSubOrganizations("*",AMConstants.SCOPE_SUB);        Iterator orgIter=subOrgs.iterator();        while (orgIter.hasNext()) {          subOrg=(String)orgIter.next();          if (debug.messageEnabled()) {            debug.message("Visiting suborg: " + subOrg);          }          PolicyManager pmSubOrg=new PolicyManager(token,subOrg);          Set policies=pmSubOrg.getPolicyNames();          policyIter=policies.iterator();          while (policyIter.hasNext()) {            policyName=(String)policyIter.next();            if (debug.messageEnabled()) {              debug.message("policyName: " + policyName);            }            policy=pmSubOrg.getPolicy(policyName);            if (!policy.isReferralPolicy()) {              boolean replacePolicy=false;              Set subjectsInPolicy=policy.getSubjectNames();              Set subjects=new HashSet();              subjects.addAll(subjectsInPolicy);              subjectIter=subjects.iterator();              while (subjectIter.hasNext()) {                subjectName=(String)subjectIter.next();                if (debug.messageEnabled()) {                  debug.message("subjectName: " + subjectName);                }                subject=policy.getSubject(subjectName);                Set set=subject.getValues();                Iterator ite=set.iterator();                String str=null;                DN strDN=null;                while (ite.hasNext()) {                  str=(String)ite.next();                  strDN=DN.valueOf(str);                  if (entryDName.equals(strDN)) {                    replacePolicy=true;                    if (debug.messageEnabled()) {                      debug.message("DNs match, str:" + str + "entryDN:"+ entryDN);                    }                    set.remove(str);                    if (set.isEmpty()) {                      policy.removeSubject(subjectName);                      if (debug.messageEnabled()) {                        debug.message("subjectDeleted:" + subjectName);                      }                    } else {                      subject.setValues(set);                    }                    break;                  }                }              }              if (replacePolicy) {                pmSubOrg.replacePolicy(policy);              }            }          }        }      }    }  } catch (  PolicyException pe) {    debug.error("ReferentialIntegrityPlugin.postProcessDelete():",pe);  }catch (  SSOException sse) {    debug.error("ReferentialIntegrityPlugin.postProcessDelete():",sse);  }catch (  Exception e) {    debug.error("ReferentialIntegrityPlugin.postProcessDelete():",e);  }}  }
class C{  public static double cos(double a){  return StrictMath.cos(a);}  }
class C{  public void characters(char[] characters,int offset,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.characters(characters,offset,length);}  }
class C{  public int indexOfComponent(Component component){  for (int i=0; i < getTabCount(); i++) {    Component c=getComponentAt(i);    if ((c != null && c.equals(component)) || (c == null && c == component)) {      return i;    }  }  return -1;}  }
class C{  public boolean isAffiliationMember(String providerID,String affID){  try {    return idffMetaManager.isAffiliateMember(ROOT_REALM,providerID,affID);  } catch (  IDFFMetaException imex) {    ProviderUtil.debug.error("IDFFProviderManager.isAffiliationMember:",imex);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforerefchildnonexistent.class,args);}  }
class C{  public static Context pop(){  return stack.get().pop();}  }
class C{  public static String toString(final ChangeRecord change){  final StringWriter writer=new StringWriter(128);  try (LDIFChangeRecordWriter ldifWriter=new LDIFChangeRecordWriter(writer)){    ldifWriter.setAddUserFriendlyComments(true).writeChangeRecord(change);  } catch (  final IOException e) {    throw new IllegalStateException(e);  }  return writer.toString();}  }
class C{  @Override public void updatePosition(){  super.getSpriteFrame().setTranslateX(xPos);  super.getSpriteFrame().setTranslateY(yPos);  for (int i=0; i < spriteBoundsArray.length; i++)   if (spriteBoundsArray[i] != null) {    spriteBoundsArray[i].setTranslateX(xPos);    spriteBoundsArray[i].setTranslateY(yPos);  }}  }
class C{  public ProtocolVersion forVersion(int major,int minor){  if ((major == this.major) && (minor == this.minor)) {    return this;  }  if (major == 1) {    if (minor == 0) {      return HTTP_1_0;    }    if (minor == 1) {      return HTTP_1_1;    }  }  if ((major == 0) && (minor == 9)) {    return HTTP_0_9;  }  return new HttpVersion(major,minor);}  }
class C{  public MessagePromise expect(String messageId,Set<Predicate> predicates){  Reject.ifTrue(StringUtils.isBlank(messageId));  Reject.ifNull(predicates);  MessagePromise mp=new MessagePromise(PromiseImpl.<JsonValue,Exception>create(),predicates);  cache.put(messageId,mp);  return mp;}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aHost,StoreDescription parentDesc) throws Exception {  if (aHost instanceof StandardHost) {    StandardHost host=(StandardHost)aHost;    LifecycleListener listeners[]=((Lifecycle)host).findLifecycleListeners();    storeElementArray(aWriter,indent,listeners);    String aliases[]=host.findAliases();    getStoreAppender().printTagArray(aWriter,"Alias",indent + 2,aliases);    Realm realm=host.getRealm();    if (realm != null) {      Realm parentRealm=null;      if (host.getParent() != null) {        parentRealm=host.getParent().getRealm();      }      if (realm != parentRealm) {        storeElement(aWriter,indent,realm);      }    }    Valve valves[]=host.getPipeline().getValves();    if (valves != null && valves.length > 0) {      List<Valve> hostValves=new ArrayList<>();      for (int i=0; i < valves.length; i++) {        if (!(valves[i] instanceof ClusterValve))         hostValves.add(valves[i]);      }      storeElementArray(aWriter,indent,hostValves.toArray());    }    Cluster cluster=host.getCluster();    if (cluster != null) {      Cluster parentCluster=null;      if (host.getParent() != null) {        parentCluster=host.getParent().getCluster();      }      if (cluster != parentCluster) {        storeElement(aWriter,indent,cluster);      }    }    Container children[]=host.findChildren();    storeElementArray(aWriter,indent,children);  }}  }
class C{  public LDAPConnectionException(LocalizableMessage message,int resultCode,LocalizableMessage errorMessage,Throwable cause){  super(message,cause);  this.resultCode=resultCode;  this.errorMessage=errorMessage;  matchedDN=null;}  }
class C{  public void add(String item){  addItem(item);}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return decode((byte[])pObject);  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable decoded");  }}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    logger.info("shootme: got an ACK! ");    logger.info("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    logger.error("Unexpected exception",ex);    fail("unexpected exception");  }}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener listener){  support.addPropertyChangeListener(listener);}  }
class C{  public void test_X500Principal_03(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  byte[] ba=getByteArray(TestUtils.getX509Certificate_v1());  byte[] baNull=null;  try {    X500Principal xpr=new X500Principal(ba);    assertNotNull("Null object returned",xpr);    byte[] resArray=xpr.getEncoded();    assertEquals(ba.length,resArray.length);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    X500Principal xpr=new X500Principal(baNull);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  ba=name.getBytes();  try {    X500Principal xpr=new X500Principal(ba);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public static Attribute create(AttributeType attributeType,String valueString){  return create(attributeType,attributeType.getNameOrOID(),valueString);}  }
class C{  public SAML2ConfigBuilder encryptionAlgorithm(String encryptionAlgorithm){  this.encryptionAlgorithm=encryptionAlgorithm;  return this;}  }
class C{  public void reset(){  NativeCollation.reset(address);}  }
class C{  protected void Argument() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_ARGUMENT);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  super.startElement(handler,uri,localName,rawName,attributes);  try {    XSLTElementDef def=getElemDef();    Class classObject=def.getClassObject();    ElemTemplateElement elem=null;    try {      elem=(ElemTemplateElement)classObject.newInstance();      elem.setDOMBackPointer(handler.getOriginatingNode());      elem.setLocaterInfo(handler.getLocator());      elem.setPrefixes(handler.getNamespaceSupport());    } catch (    InstantiationException ie) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMTMPL,null,ie);    }catch (    IllegalAccessException iae) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMTMPL,null,iae);    }    setPropertiesFromAttributes(handler,rawName,attributes,elem);    appendAndPush(handler,elem);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public ObjectCreateRule(String className){  this(className,(String)null);}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  EntityEditViewBean vb=null;  IdType idType=null;  EntitiesModel model=(EntitiesModel)getModel();  unlockPageTrailForSwapping();  setPageSessionAttribute(getTrackingTabIDName(),Integer.toString(nodeID));  if (nodeID == TAB_PROFILE) {    vb=(EntityEditViewBean)getViewBean(EntityEditViewBean.class);    forwardToOtherEntityViewBean(vb,idType);  } else   if (nodeID == TAB_SERVICES) {    vb=(EntityServicesViewBean)getViewBean(EntityServicesViewBean.class);    forwardToOtherEntityViewBean(vb,idType);  } else {    handleMembersViewForwarding(nodeID,model);  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ServiceTypeElement createServiceTypeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ServiceTypeElementImpl();}  }
class C{  public BufferedWriter(Writer out,int sz){  super(out);  if (sz <= 0)   throw new IllegalArgumentException("Buffer size <= 0");  this.out=out;  cb=new char[sz];  nChars=sz;  nextChar=0;  lineSeparator=java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator"));}  }
class C{  public void drawIntoImage(BufferedImage image){  Graphics2D gFinal=(Graphics2D)image.getGraphics();  int width=image.getWidth();  int height=image.getHeight();  gFinal.setColor(new Color(255,255,255,0));  gFinal.fillRect(0,0,width,height);  float rootAlpha=mRootAlpha;  if (rootAlpha < 1.0) {    BufferedImage alphaImage=AssetUtil.newArgbBufferedImage(width,height);    Graphics2D gTemp=(Graphics2D)alphaImage.getGraphics();    drawInternal(gTemp,width,height);    gFinal.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,rootAlpha));    gFinal.drawImage(alphaImage,0,0,null);    gTemp.dispose();  } else {    drawInternal(gFinal,width,height);  }  gFinal.dispose();}  }
class C{  public void restore(){  Log.w(TAG,"Restoring " + DATABASE_NAME);  remove();  IOUtil.move(databaseDir() + DATABASE_NAME_BACKUP,databaseDir() + DATABASE_NAME);}  }
class C{  private static void checkState() throws IllegalStateException {  if (INSTANCE == null) {    throw new IllegalStateException("Time service not started");  }}  }
class C{  public JOptionPane(Object message){  this(message,PLAIN_MESSAGE);}  }
class C{  public void removeTransport(){  if (uriParms != null)   uriParms.delete(TRANSPORT);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public Entitlement(Set<String> resourceNames,Set<String> actionNames){  setResourceNames(resourceNames);  setActionNames(actionNames);}  }
class C{  private JMXConnectorServerFactory(){}  }
class C{  public static String guessExtensionFromMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.PasswordElement createPasswordElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.PasswordElementImpl();}  }
class C{  public ExpressionException(String message){  super(message);}  }
class C{  protected boolean postParseRequest(org.apache.coyote.Request req,Request request,org.apache.coyote.Response res,Response response) throws IOException, ServletException {  if (req.scheme().isNull()) {    req.scheme().setString(connector.getScheme());    request.setSecure(connector.getSecure());  } else {    request.setSecure(req.scheme().equals("https"));  }  String proxyName=connector.getProxyName();  int proxyPort=connector.getProxyPort();  if (proxyPort != 0) {    req.setServerPort(proxyPort);  } else   if (req.getServerPort() == -1) {    if (req.scheme().equals("https")) {      req.setServerPort(443);    } else {      req.setServerPort(80);    }  }  if (proxyName != null) {    req.serverName().setString(proxyName);  }  MessageBytes undecodedURI=req.requestURI();  if (undecodedURI.equals("*")) {    if (req.method().equalsIgnoreCase("OPTIONS")) {      StringBuilder allow=new StringBuilder();      allow.append("GET, HEAD, POST, PUT, DELETE");      if (connector.getAllowTrace()) {        allow.append(", TRACE");      }      allow.append(", OPTIONS");      res.setHeader("Allow",allow.toString());    } else {      res.setStatus(404);      res.setMessage("Not found");    }    connector.getService().getContainer().logAccess(request,response,0,true);    return false;  }  MessageBytes decodedURI=req.decodedURI();  if (undecodedURI.getType() == MessageBytes.T_BYTES) {    decodedURI.duplicate(undecodedURI);    parsePathParameters(req,request);    try {      req.getURLDecoder().convert(decodedURI,false);    } catch (    IOException ioe) {      res.setStatus(400);      res.setMessage("Invalid URI: " + ioe.getMessage());      connector.getService().getContainer().logAccess(request,response,0,true);      return false;    }    if (!normalize(req.decodedURI())) {      res.setStatus(400);      res.setMessage("Invalid URI");      connector.getService().getContainer().logAccess(request,response,0,true);      return false;    }    convertURI(decodedURI,request);    if (!checkNormalize(req.decodedURI())) {      res.setStatus(400);      res.setMessage("Invalid URI character encoding");      connector.getService().getContainer().logAccess(request,response,0,true);      return false;    }  } else {    decodedURI.toChars();    CharChunk uriCC=decodedURI.getCharChunk();    int semicolon=uriCC.indexOf(';');    if (semicolon > 0) {      decodedURI.setChars(uriCC.getBuffer(),uriCC.getStart(),semicolon);    }  }  MessageBytes serverName;  if (connector.getUseIPVHosts()) {    serverName=req.localName();    if (serverName.isNull()) {      res.action(ActionCode.REQ_LOCAL_NAME_ATTRIBUTE,null);    }  } else {    serverName=req.serverName();  }  String version=null;  Context versionContext=null;  boolean mapRequired=true;  while (mapRequired) {    connector.getService().getMapper().map(serverName,decodedURI,version,request.getMappingData());    if (request.getContext() == null) {      res.setStatus(404);      res.setMessage("Not found");      Host host=request.getHost();      if (host != null) {        host.logAccess(request,response,0,true);      }      return false;    }    String sessionID;    if (request.getServletContext().getEffectiveSessionTrackingModes().contains(SessionTrackingMode.URL)) {      sessionID=request.getPathParameter(SessionConfig.getSessionUriParamName(request.getContext()));      if (sessionID != null) {        request.setRequestedSessionId(sessionID);        request.setRequestedSessionURL(true);      }    }    parseSessionCookiesId(request);    parseSessionSslId(request);    sessionID=request.getRequestedSessionId();    mapRequired=false;    if (version != null && request.getContext() == versionContext) {    } else {      version=null;      versionContext=null;      Context[] contexts=request.getMappingData().contexts;      if (contexts != null && sessionID != null) {        for (int i=(contexts.length); i > 0; i--) {          Context ctxt=contexts[i - 1];          if (ctxt.getManager().findSession(sessionID) != null) {            if (!ctxt.equals(request.getMappingData().context)) {              version=ctxt.getWebappVersion();              versionContext=ctxt;              request.getMappingData().recycle();              mapRequired=true;              request.recycleSessionInfo();              request.recycleCookieInfo(true);            }            break;          }        }      }    }    if (!mapRequired && request.getContext().getPaused()) {      try {        Thread.sleep(1000);      } catch (      InterruptedException e) {      }      request.getMappingData().recycle();      mapRequired=true;    }  }  MessageBytes redirectPathMB=request.getMappingData().redirectPath;  if (!redirectPathMB.isNull()) {    String redirectPath=URLEncoder.DEFAULT.encode(redirectPathMB.toString(),"UTF-8");    String query=request.getQueryString();    if (request.isRequestedSessionIdFromURL()) {      redirectPath=redirectPath + ";" + SessionConfig.getSessionUriParamName(request.getContext())+ "="+ request.getRequestedSessionId();    }    if (query != null) {      redirectPath=redirectPath + "?" + query;    }    response.sendRedirect(redirectPath);    request.getContext().logAccess(request,response,0,true);    return false;  }  if (!connector.getAllowTrace() && req.method().equalsIgnoreCase("TRACE")) {    Wrapper wrapper=request.getWrapper();    String header=null;    if (wrapper != null) {      String[] methods=wrapper.getServletMethods();      if (methods != null) {        for (int i=0; i < methods.length; i++) {          if ("TRACE".equals(methods[i])) {            continue;          }          if (header == null) {            header=methods[i];          } else {            header+=", " + methods[i];          }        }      }    }    res.setStatus(405);    res.addHeader("Allow",header);    res.setMessage("TRACE method is not allowed");    request.getContext().logAccess(request,response,0,true);    return false;  }  doConnectorAuthenticationAuthorization(req,request);  return true;}  }
class C{  public static boolean isLogEnabled(){  return logStatus;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public WoodenStep(){  this(DEFAULT_SPECIES,DEFAULT_INVERTED);}  }
class C{  public AsymmetricCipherKeyPair generateKeyPair(){  BigInteger n=params.getN();  int nBitLength=n.bitLength();  BigInteger d;  do {    d=new BigInteger(nBitLength,random);  } while (d.equals(ZERO) || (d.compareTo(n) >= 0));  ECPoint Q=params.getG().multiply(d);  return new AsymmetricCipherKeyPair(new ECPublicKeyParameters(Q,params),new ECPrivateKeyParameters(d,params));}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.StatusElementImpl();}  }
class C{  public OpenSSOUserSubject(String user,String pSubjectName){  super(user,pSubjectName);}  }
class C{  public void zoom_in(Point2D p_position){  zoom(ZOOM_FACTOR,p_position);}  }
class C{  ResponseAdapter(final HttpServletResponse response) throws IOException {  super(response);  this.writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(response.getOutputStream(),response.getCharacterEncoding())));}  }
class C{  @Override public void write(int b) throws IOException {  if (debug > 1) {    System.out.println("write " + b + " in CompressionResponseStream ");  }  if (closed)   throw new IOException("Cannot write to a closed output stream");  if (bufferCount >= buffer.length) {    flushToGZip();  }  buffer[bufferCount++]=(byte)b;}  }
class C{  public Element signXML(Document doc,String certAlias,String algorithm,String idAttrName,String id,boolean includeCert,String xpath) throws XMLSignatureException {  return signXMLUsingKeyPass(doc,certAlias,null,algorithm,idAttrName,id,includeCert,xpath);}  }
class C{  public Future<List<Job>> jobRangeByState(String state,long from,long to,String order){  Future<List<Job>> future=Future.future();  jobService.jobRangeByState(state,from,to,order,future.completer());  return future;}  }
class C{  @Override public void shutdown(){}  }
class C{  static public void assertNull(Object object){  assertNull(null,object);}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public static boolean isXML11NameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public static Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_PrevAndNext(fooId,field2,orderByComparator);}  }
class C{  @SuppressWarnings("unchecked") static <O extends Operation,L>void attachLocalOperation(O globalOperation,L currentLocalOperation){  List<?> existingAttachment=(List<?>)globalOperation.getAttachment(Operation.LOCALBACKENDOPERATIONS);  List<L> newAttachment=new ArrayList<>();  if (existingAttachment != null) {    newAttachment.addAll((List<L>)existingAttachment);  }  newAttachment.add(currentLocalOperation);  globalOperation.setAttachment(Operation.LOCALBACKENDOPERATIONS,newAttachment);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break; else     offer(item);  }}  }
class C{  private static char[] createKeystorePassword(){  int pwdLength=50;  char[] pwd=new char[pwdLength];  Random random=new Random();  for (int pos=0; pos < pwdLength; pos++) {    int type=getRandomInt(random,3);    char nextChar=getRandomChar(random,type);    pwd[pos]=nextChar;  }  return pwd;}  }
class C{  public ConsoleDebugLogPublisher(PrintStream err){  this.err=err;}  }
class C{  void postExceptionFromThread(Exception e){  m_exceptionThrown=e;  ;synchronized (this) {    notifyAll();  }}  }
class C{  public InvocationTargetException(Throwable target,String s){  super(s,null);  this.target=target;}  }
class C{  public static Response parseXML(String xml) throws SAMLException {  Document doc=XMLUtils.toDOMDocument(xml,SAMLUtils.debug);  Element root=doc.getDocumentElement();  return new Response(root);}  }
class C{  public RoleMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public void fixStrictRouting(SIPRequest req){  RouteList routes=req.getRouteHeaders();  Route first=(Route)routes.getFirst();  SipUri firstUri=(SipUri)first.getAddress().getURI();  routes.removeFirst();  AddressImpl addr=new AddressImpl();  addr.setAddess(req.getRequestURI());  Route route=new Route(addr);  routes.add(route);  req.setRequestURI(firstUri);  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("post: fixStrictRouting" + req);  }}  }
class C{  public FrameBodyTMED(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public SkeletonNotFoundException(String s){  super(s);}  }
class C{  public void shutdown(){  threadGroup.interrupt();}  }
class C{  public boolean containsKey(Object name){  return map.containsKey(name);}  }
class C{  public static Montgomery multiple(byte[] n,Polynomial25519 q){  Montgomery nqpq[]=new Montgomery[]{new Montgomery(new Polynomial25519(q),new Polynomial25519(1)),new Montgomery(new Polynomial25519(0),new Polynomial25519(1))};  Montgomery nq[]=new Montgomery[]{new Montgomery(new Polynomial25519(1),new Polynomial25519(0)),new Montgomery(new Polynomial25519(0),new Polynomial25519(1))};  int rollIdx=0;  for (int i=0; i < 32; i++) {    byte b=n[31 - i];    for (int j=0; j < 8; j++) {      int bit=-(b >> 7);      swapConditional(nq[rollIdx % 2].x,nqpq[rollIdx % 2].x,bit);      swapConditional(nq[rollIdx % 2].z,nqpq[rollIdx % 2].z,bit);      montgomery(nq[rollIdx % 2],nqpq[rollIdx % 2],q,nq[(rollIdx + 1) % 2],nqpq[(rollIdx + 1) % 2]);      swapConditional(nq[(rollIdx + 1) % 2].x,nqpq[(rollIdx + 1) % 2].x,bit);      swapConditional(nq[(rollIdx + 1) % 2].z,nqpq[(rollIdx + 1) % 2].z,bit);      rollIdx++;      b<<=1;    }  }  return nq[rollIdx % 2];}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("CallMethodRule[");  sb.append("methodName=");  sb.append(methodName);  sb.append(", paramCount=");  sb.append(paramCount);  sb.append(", paramTypes={");  if (paramTypes != null) {    for (int i=0; i < paramTypes.length; i++) {      if (i > 0) {        sb.append(", ");      }      sb.append(paramTypes[i].getName());    }  }  sb.append("}");  sb.append("]");  return (sb.toString());}  }
class C{  protected boolean isRepaintingRoot(){  return isRepaintingRoot;}  }
class C{  protected View createRow(){  return new Row(getElement());}  }
class C{  @Override public synchronized int available(){  return count - pos;}  }
class C{  public void deleteEntityDescriptor(String realm,String entityId) throws SAML2MetaException {  if (entityId == null) {    return;  }  if (realm == null) {    realm="/";  }  String[] objs={entityId,realm};  try {    removeFromCircleOfTrust(realm,entityId);    configInst.deleteConfiguration(realm,entityId,null);    LogUtil.access(Level.INFO,LogUtil.ENTITY_DESCRIPTOR_DELETED,objs,null);    SAML2MetaCache.putEntityDescriptor(realm,entityId,null);  } catch (  ConfigurationException e) {    debug.error("SAML2MetaManager.deleteEntityDescriptor:",e);    String[] data={e.getMessage(),entityId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_DESCRIPTOR,data,null);    throw new SAML2MetaException(e);  }}  }
class C{  public UnmodifiableClassException(String s){  super(s);}  }
class C{  public ConfigAddListenerAdaptor(ServerManagementContext context,ManagedObjectPath<?,?> path,SetRelationDefinition<?,S> relation,ServerManagedObjectAddListener<S> listener){  this.serverContext=context;  this.path=path;  this.instantiableRelation=null;  this.optionalRelation=null;  this.setRelation=relation;  this.listener=listener;  this.cachedManagedObject=null;}  }
class C{  @Override public void sendError(int sc) throws IOException {  if (!included)   ((HttpServletResponse)getResponse()).sendError(sc);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes02.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS09.class,args);}  }
class C{  private static BitMatrix encodeLowLevel(DefaultPlacement placement,SymbolInfo symbolInfo){  int symbolWidth=symbolInfo.getSymbolDataWidth();  int symbolHeight=symbolInfo.getSymbolDataHeight();  ByteMatrix matrix=new ByteMatrix(symbolInfo.getSymbolWidth(),symbolInfo.getSymbolHeight());  int matrixY=0;  for (int y=0; y < symbolHeight; y++) {    int matrixX;    if ((y % symbolInfo.matrixHeight) == 0) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,(x % 2) == 0);        matrixX++;      }      matrixY++;    }    matrixX=0;    for (int x=0; x < symbolWidth; x++) {      if ((x % symbolInfo.matrixWidth) == 0) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrix.set(matrixX,matrixY,placement.getBit(x,y));      matrixX++;      if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {        matrix.set(matrixX,matrixY,(y % 2) == 0);        matrixX++;      }    }    matrixY++;    if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrixY++;    }  }  return convertByteMatrixToBitMatrix(matrix);}  }
class C{  public FrameBodyASPI(FrameBodyASPI copyObject){  super(copyObject);}  }
class C{  @Override public Object removeFromEnvironment(String propName){  return env.remove(propName);}  }
class C{  public FrameBodyTCOP(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public void handleDeleteTPButtonRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable tbl=(CCActionTable)getChild(SAML_TABLE);  tbl.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SAML_TABLE);  Integer[] selected=tblModel.getSelectedRows();  List currentList=(List)getPageSessionAttribute(SAML_TABLE_ATTRIBUTE);  Set selectedSet=new HashSet();  for (int i=0; i < selected.length; i++) {    selectedSet.add(currentList.get(selected[i].intValue()));  }  try {    FSSAMLServiceModel model=(FSSAMLServiceModel)getSAMLModel();    model.deleteTrustPartners(selectedSet);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","saml.message.trusted.partner.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","saml.message.trusted.partner.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public @CheckForNull QueueTaskFuture run(@Nonnull String replacementMainScript,@Nonnull Map<String,String> replacementLoadedScripts){  Queue.Item item=run2(replacementMainScript,replacementLoadedScripts);  return item == null ? null : item.getFuture();}  }
class C{  @Override public boolean isRespectHight(){  return true;}  }
class C{  public void installChooserPanel(JColorChooser enclosingChooser){  super.installChooserPanel(enclosingChooser);}  }
class C{  public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String certAlias) throws XMLSignatureException {  return sp.verifyXMLSignature(element,certAlias);}  }
class C{  protected PublicKey engineGeneratePublic(KeySpec keySpec) throws InvalidKeySpecException {  if (keySpec != null) {    if (keySpec instanceof DSAPublicKeySpec) {      return new DSAPublicKeyImpl((DSAPublicKeySpec)keySpec);    }    if (keySpec instanceof X509EncodedKeySpec) {      return new DSAPublicKeyImpl((X509EncodedKeySpec)keySpec);    }  }  throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");}  }
class C{  public CallBackChoiceTiledView(View parent,String name){  super(parent,name);  setPrimaryModel((DatasetModel)getDefaultModel());  registerChildren();}  }
class C{  public void resetDebug(String mf){  mergeAllMode="on".equals(mf);  setDebug(SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL));  debugFile=null;}  }
class C{  public void stateChanged(ChangeEvent e){  JSpinner spinner=(JSpinner)(e.getSource());  getTextField().setValue(spinner.getValue());}  }
class C{  public char first(){  pos=begin;  return current();}  }
class C{  private String tokenToDN(String token0){  try {    String token=token0.toLowerCase();    int pipe=token.indexOf("|");    if (pipe != -1) {      token=token.substring(0,pipe);    }    if (DN.valueOf(token).isInScopeOf(getOrgDN(),SearchScope.WHOLE_SUBTREE)) {      return token;    }    if (LazyConfig.AUTHD.isSuperAdmin(token)) {      return token;    }    String applicationUser=ISAuthConstants.APPLICATION_USER_PREFIX.toLowerCase();    if (token.startsWith(applicationUser)) {      return "cn=" + token + ",ou=DSAME Users,"+ SMSEntry.getRootSuffix();    }    String id=DNUtils.DNtoName(token);    String userDN=userNamingAttr + "=" + id+ ","+ userContainerDN;    if (DEBUG.messageEnabled()) {      DEBUG.message("token=" + token0 + ", id="+ id+ ", DN="+ userDN);    }    return userDN;  } catch (  Exception e) {    DEBUG.error("tokenToDN : " + e.getMessage());    return token0;  }}  }
class C{  public void selectInitialValue(JOptionPane op){  if (inputComponent != null)   inputComponent.requestFocus(); else {    if (initialFocusComponent != null)     initialFocusComponent.requestFocus();    if (initialFocusComponent instanceof JButton) {      JRootPane root=SwingUtilities.getRootPane(initialFocusComponent);      if (root != null) {        root.setDefaultButton((JButton)initialFocusComponent);      }    }  }}  }
class C{  public static Set<String> asSetOfString(Entry entry,String attrDesc){  Attribute attr=entry.getAttribute(attrDesc);  return attr != null ? attr.parse().asSetOfString() : Collections.<String>emptySet();}  }
class C{  public void addBean(Object bean,String attributesPrefix) throws ReflectiveOperationException {  for (  Method method : bean.getClass().getMethods()) {    if (method.getName().startsWith("get")) {      Class<?> returnType=method.getReturnType();      if (returnType.equals(int.class) || returnType.equals(long.class) || returnType.equals(String.class)) {        addStatAttribute(attributesPrefix,bean,method,3);      }    } else     if (method.getName().startsWith("is") && method.getReturnType().equals(boolean.class)) {      addStatAttribute(attributesPrefix,bean,method,2);    }  }}  }
class C{  public void unRegisterService(SSOToken token,String entryDN,int objectType,String serviceName,int type) throws AMException {  if (type == AMTemplate.DYNAMIC_TEMPLATE) {    try {      PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));      COSManager cm=null;switch (objectType) {case AMObject.ROLE:case AMObject.FILTERED_ROLE:        cm=COSManager.getCOSManager(token,po.getParentGuid());      break;case AMObject.ORGANIZATION:case AMObject.ORGANIZATIONAL_UNIT:case AMObject.PEOPLE_CONTAINER:    cm=COSManager.getCOSManager(token,po.getGuid());  break;default :throw new AMException(token,"450");}DirectCOSDefinition dcos;try {dcos=(DirectCOSDefinition)cm.getDefinition(serviceName);} catch (COSNotFoundException e) {if (debug.messageEnabled()) {debug.message("DirectoryServicesImpl." + "unRegisterService() " + "No COSDefinition found for service: "+ serviceName);}Object args[]={serviceName};String locale=CommonUtils.getUserLocale(token);throw new AMException(AMSDKBundle.getString("463",args,locale),"463",args);}dcos.removeCOSTemplates();cm.removeDefinition(serviceName);} catch (AccessRightsException e) {debug.error("DirectoryServicesImpl.unRegisterService() " + "Insufficient Access rights to unRegister service: ",e);throw new AMException(token,"460");}catch (UMSException e) {debug.error("DirectoryServicesImpl.unRegisterService: " + "Unable to unregister service ",e);throw new AMException(token,"855",e);}}}  }
class C{  @Override public void schemaChanged(String serviceName,String version){}  }
class C{  public SAMLv2AttrQueryViewBean(){  super("SAMLv2AttrQuery");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(super.toString());  builder.append("(");  builder.append(new String(magicNumbers));  builder.append(",");  builder.append(this.byteOffset);  builder.append(")");  return builder.toString();}  }
class C{  public SOAPMessage sendSOAPMessage(final String xmlMessage,final String soapUrl,final boolean isClientMessage) throws SOAPException, SAML2Exception {  SOAPConnection con=soapConnectionFactory.createConnection();  SOAPMessage msg=createSOAPMessage(xmlMessage,isClientMessage);  return con.call(msg,soapUrl);}  }
class C{  public boolean isValid() throws SMSException {  if (smsEntry.isValid()) {    if (smsEntry.isDirty()) {      smsEntry.refresh();    }    if (smsEntry.isNewEntry()) {      String[] msgs={serviceName};      throw (new ServiceNotFoundException(IUMSConstants.UMS_BUNDLE_NAME,IUMSConstants.SMS_service_does_not_exist,msgs));    }  }  return (smsEntry.isValid());}  }
class C{  @Override public void rebind(Name name,Object obj) throws NamingException {  getBoundContext().rebind(parseName(name),obj);}  }
class C{  void clear(){  baseDNs.clear();  privateNamingContexts.clear();  publicNamingContexts.clear();  allPublicNamingContexts.clear();}  }
class C{  public static void copy(byte[] input,OutputStream output) throws IOException {  output.write(input);}  }
class C{  public synchronized boolean isEmpty(){  return count == 0;}  }
class C{  public void registerUnregisteredNamespaces(){  for (int i=0; i < m_unregisteredExtensions.size(); i++) {    String ns=(String)m_unregisteredExtensions.get(i);    ExtensionNamespaceSupport extNsSpt=defineJavaNamespace(ns);    if (extNsSpt != null)     m_extensions.add(extNsSpt);  }}  }
class C{  public StreamHandler(OutputStream out,Formatter formatter){  sealed=false;  configure();  setFormatter(formatter);  setOutputStream(out);  sealed=true;}  }
class C{  private void doAcquireShared(int arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public AMSearchResults searchGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,searchControl);}  }
class C{  private PlaLineInt adjust_line(PlaLineInt x_line,PlaPointInt i_point){  double dist_ia=i_point.distance_square(x_line.point_a);  double dist_ib=i_point.distance_square(x_line.point_b);  if (dist_ia < dist_ib) {    System.err.println("Change a");    return new PlaLineInt(i_point,x_line.point_b);  } else {    System.err.println("Chnage b");    return new PlaLineInt(x_line.point_a,i_point);  }}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.EntitiesDescriptorType createEntitiesDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.EntitiesDescriptorTypeImpl();}  }
class C{  public URLNotFoundException(String msg){  super(msg);  fillInStackTrace();}  }
class C{  public HttpResponse execute(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("Client connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  try {    HttpResponse response=doSendRequest(request,conn,context);    if (response == null) {      response=doReceiveResponse(request,conn,context);    }    return response;  } catch (  IOException ex) {    conn.close();    throw ex;  }catch (  HttpException ex) {    conn.close();    throw ex;  }catch (  RuntimeException ex) {    conn.close();    throw ex;  }}  }
class C{  protected void registerSessionAtReplicationValve(DeltaSession session){  if (replicationValve == null) {    CatalinaCluster cluster=getCluster();    if (cluster != null) {      Valve[] valves=cluster.getValves();      if (valves != null && valves.length > 0) {        for (int i=0; replicationValve == null && i < valves.length; i++) {          if (valves[i] instanceof ReplicationValve)           replicationValve=(ReplicationValve)valves[i];        }        if (replicationValve == null && log.isDebugEnabled()) {          log.debug("no ReplicationValve found for CrossContext Support");        }      }    }  }  if (replicationValve != null) {    replicationValve.registerReplicationSession(session);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.AgreementMethodElement createAgreementMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.AgreementMethodElementImpl();}  }
class C{  protected Rectangle applyPaddings(Rectangle rect,boolean reverse){  return applyPaddings(rect,getPaddings(),reverse);}  }
class C{  public boolean isSatisfied(Object context) throws Exception {  if (context instanceof SSOToken) {    SSOToken usedBy=(SSOToken)context;    return dn.equals(Misc.canonicalize(usedBy.getPrincipal().getName()));  }  return false;}  }
class C{  public NSNumber(double d){  longValue=(long)(doubleValue=d);  type=REAL;}  }
class C{  public void addNode(int n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  this.addElement(n);}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  long totalstart=0;  if (doStatistics()) {    totalstart=System.currentTimeMillis();  }  if (primaryIndicator) {    createPrimaryIndicator(request);  }  Context context=request.getContext();  boolean isCrossContext=context != null && context instanceof StandardContext && ((StandardContext)context).getCrossContext();  try {    if (isCrossContext) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("ReplicationValve.crossContext.add"));      }      crossContextSessions.set(new ArrayList<DeltaSession>());    }    getNext().invoke(request,response);    if (context != null && cluster != null && context.getManager() instanceof ClusterManager) {      ClusterManager clusterManager=(ClusterManager)context.getManager();      if (cluster.getManager(clusterManager.getName()) == null) {        return;      }      if (cluster.hasMembers()) {        sendReplicationMessage(request,totalstart,isCrossContext,clusterManager);      } else {        resetReplicationRequest(request,isCrossContext);      }    }  }  finally {    if (isCrossContext) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("ReplicationValve.crossContext.remove"));      }      crossContextSessions.set(null);    }  }}  }
class C{  public URL createLocalServerURL(String path) throws MalformedURLException {  return new URL(WebtopNaming.getLocalServer() + "/" + path);}  }
class C{  public Set searchDynamicGroups(String wildcard,int level) throws AMException, SSOException {  return searchDynamicGroups(wildcard,null,level);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.ResponseElement createResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.ResponseElementImpl();}  }
class C{  public LoggingPermission(String name,String actions) throws IllegalArgumentException {  super(name);  if (!name.equals("control")) {    throw new IllegalArgumentException("name: " + name);  }  if (actions != null && actions.length() > 0) {    throw new IllegalArgumentException("actions: " + actions);  }}  }
class C{  public Set<String> schemaSubEntries(SSOToken token,String dn,String filter,String sidFilter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject: schemaSubEntries search: " + dn);  }  String[] objs={filter,sidFilter};  String sfilter=MessageFormat.format(getServiceIdSearchFilter(),(Object[])objs);  Set answer=getSubEntries(token,dn,sfilter,numOfEntries,sortResults,ascendingOrder);  return (answer);}  }
class C{  public Object object(){  return str();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  value=streetAttr.getNodeValue();  assertEquals("attrDefaultValueAssert","Yes",value);}  }
class C{  private XingFrame(ByteBuffer header){  this.header=header;  header.rewind();  setVbr();  byte flagBuffer[]=new byte[XING_FLAG_BUFFER_SIZE];  header.get(flagBuffer);  if ((flagBuffer[BYTE_4] & (byte)(1)) != 0) {    setFrameCount();  }  if ((flagBuffer[BYTE_4] & (byte)(1 << 1)) != 0) {    setAudioSize();  }  if (header.limit() >= XING_HEADER_BUFFER_SIZE + LameFrame.LAME_HEADER_BUFFER_SIZE) {    header.position(XING_HEADER_BUFFER_SIZE);    lameFrame=LameFrame.parseLameFrame(header);  }}  }
class C{  private void parseMajorVersion(String version) throws FSMsgException {  try {    majorVersion=Integer.parseInt(version);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingResponse." + "parseMajorVersion:invalid MajorVersion:" + version,e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameIdentifierMappingResponse." + "parseMajorVersion: MajorVersion is too high");      }      throw new FSMsgException("requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameIdentifierMappingResponse." + "parseMajorVersion: MajorVersion is too low");      }      throw new FSMsgException("requestVersionTooLow",null);    }  }}  }
class C{  public Manifest(InputStream is) throws IOException {  read(is);}  }
class C{  public Map<String,String> mapNameToDisplayName(Set<String> names) throws SMSException, SSOException {  final Map<String,String> map=new HashMap<>(names.size());  for (  String name : names) {    if (smsConsoleServiceConfig.isServiceVisible(name)) {      final ServiceSchemaManager serviceSchemaManager=serviceSchemaManagerFactory.build(name);      String displayName=getLocalizedServiceName(serviceSchemaManager,name);      String resourceName=serviceSchemaManager.getResourceName();      if (!name.equals(displayName) && !StringUtils.isBlank(resourceName)) {        map.put(resourceName,displayName);      }    }  }  return map;}  }
class C{  public void fireTableRowsUpdated(int firstRow,int lastRow){  fireTableChanged(new TableModelEvent(this,firstRow,lastRow,TableModelEvent.ALL_COLUMNS,TableModelEvent.UPDATE));}  }
class C{  public boolean canCreateNewResource(String ServiceType) throws PolicyException {  return canCreateNewRes;}  }
class C{  protected void stop(){  if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))   logger.logDebug("Exiting provider");  for (Iterator it=listeningPoints.values().iterator(); it.hasNext(); ) {    ListeningPointImpl listeningPoint=(ListeningPointImpl)it.next();    listeningPoint.removeSipProvider();  }  this.eventScanner.stop();}  }
class C{  public OpenDataException(String msg){  super(msg);}  }
class C{  public Duration plusNanos(long nanosToAdd){  return plus(0,nanosToAdd);}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  }  if (o == this) {    return true;  }  if (!(o instanceof CacheEntry)) {    return false;  }  CacheEntry e=(CacheEntry)o;  return e.entryID == entryID && e.entry.equals(entry);}  }
class C{  public void addMessage(LocalizableMessage message){  messages.add(message);}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  String profileName=getProfileName(nodeID);  setPageSessionAttribute(PAGE_SESSION_PROFILE_NAME,profileName);  removePageSessionAttribute(PAGE_SESSION_STYLE_NAME);  setDisplayFieldValue(SINGLECHOICE_STYLE,"");  forwardTo();}  }
class C{  @Override public void nullifyUsedVars(){  options=null;  sharedState=null;  bundle=null;  secretKeyAttrName=null;  counterAttrName=null;  authLevel=null;  amAuthOATH=null;  loginTimeAttrName=null;}  }
class C{  public SchemaFactoryConfigurationError(){}  }
class C{  private Attribute readSingleValueAttribute(List<StringBuilder> lines,StringBuilder line,DN entryDN,String attributeName) throws LDIFException {  int colonPos=parseColonPosition(lines,line);  String attrDescStr=line.substring(0,colonPos);  AttributeDescription attrDesc=parseAttrDescription(attrDescStr);  if (attributeName != null) {    AttributeDescription expectedAttrDesc=parseAttrDescription(attributeName);    if (!attrDesc.equals(expectedAttrDesc)) {      LocalizableMessage message=ERR_LDIF_INVALID_CHANGERECORD_ATTRIBUTE.get(attrDescStr,attributeName);      throw new LDIFException(message,lastEntryLineNumber,false);    }  }  ByteString value=parseSingleValue(lines,line,entryDN,colonPos,attrDescStr);  AttributeBuilder builder=new AttributeBuilder(attrDesc);  builder.add(value);  return builder.toAttribute();}  }
class C{  public void write(byte[] b,int offset,int length) throws java.io.IOException {  out.write(b,offset,length);  written+=length;}  }
class C{  public void deleteEntity(String entityName,String entityType) throws EntityException, SSOException {  try {    Object[] objs={tokenString,entityName,entityType,entityLocation};    client.send(client.encodeMessage("deleteEntity",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);  } catch (  RemoteException rex) {    EntityUtils.debug.warning("EntityObject:deleteEntity->RemoteException",rex);    throw new EntityException(rex.getMessage(),"1000");  }catch (  Exception ex) {    EntityUtils.debug.warning("EntityObject:deleteEntity->Exception",ex);    throw new EntityException(ex.getMessage(),"1000");  }}  }
class C{  public static String downloadString(String downloadUrl) throws IOException {  LOG.debug("Sending HTTP GET request to {}",downloadUrl);  final String response=UrlUtils.downloadString(downloadUrl,READ_TIMEOUT,CONNECTION_TIMEOUT);  if (StringUtils.isEmpty(response)) {    LOG.error("Response for {} is empty",downloadUrl);    throw new IOException("Response is empty.");  }  LOG.debug("Got response:{}",response);  return response;}  }
class C{  public void append(XMLString s){  append(s.ch,s.offset,s.length);}  }
class C{  public boolean isBinaryOption(String cmdName){  return singleOptionNames.contains(cmdName);}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public NSNumber(byte[] bytes,final int startIndex,final int endIndex,final int type){switch (type) {case INTEGER:{      doubleValue=longValue=BinaryPropertyListParser.parseLong(bytes,startIndex,endIndex);      break;    }case REAL:{    doubleValue=BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex);    longValue=Math.round(doubleValue);    break;  }default :{  throw new IllegalArgumentException("Type argument is not valid.");}}this.type=type;}  }
class C{  public Map(Function1 initializer) throws Exception {  initializer.apply(this);}  }
class C{  public boolean hasMoreRequirements(){  if (localFlag) {    return (acLocal.hasMoreRequirements(false));  } else {    if ((!loginStatus.equals(Status.IN_PROGRESS)) || ((getCallbacks(receivedDocument,false)) == null)) {      return (false);    }    return (true);  }}  }
class C{  public String toXMLString(){  return ADVICES_HANDLEABLE_BY_AM_REQUEST_XML;}  }
class C{  protected NameValue qheader() throws ParseException {  String name=lexer.getNextToken('=');  lexer.consume(1);  String value=hvalue();  return new NameValue(name,value,false);}  }
class C{  private RSInfo createRSInfo(int rsId){  int groupId=-1;  String serverUrl=null;switch (rsId) {case RS1_ID:    groupId=RS1_GID;  serverUrl=getHostPort(rs1Port);break;case RS2_ID:groupId=RS2_GID;serverUrl=getHostPort(rs2Port);break;case RS3_ID:groupId=RS3_GID;serverUrl=getHostPort(rs3Port);break;default :fail("Unknown replication server id.");}return new RSInfo(rsId,serverUrl,TEST_DN_WITH_ROOT_ENTRY_GENID,(byte)groupId,1);}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public void removeDragSourceMotionListener(DragSourceMotionListener dsml){  if (dsml != null) {synchronized (this) {      motionListener=DnDEventMulticaster.remove(motionListener,dsml);    }  }}  }
class C{  public static QueryExp lt(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(LT,v1,v2);}  }
class C{  private void generatePwpAccountStatusNotifications(){  if (passwordChanged) {    if (selfChange) {      AuthenticationInfo authInfo=clientConnection.getAuthenticationInfo();      if (authInfo.getAuthenticationDN().equals(modifiedEntry.getName())) {        clientConnection.setMustChangePassword(false);      }      generateAccountStatusNotificationForPwds(PASSWORD_CHANGED,INFO_MODIFY_PASSWORD_CHANGED.get());    } else {      generateAccountStatusNotificationForPwds(PASSWORD_RESET,INFO_MODIFY_PASSWORD_RESET.get());    }  }  if (enabledStateChanged) {    if (isEnabled) {      generateAccountStatusNotificationNoPwds(ACCOUNT_ENABLED,INFO_MODIFY_ACCOUNT_ENABLED.get());    } else {      generateAccountStatusNotificationNoPwds(ACCOUNT_DISABLED,INFO_MODIFY_ACCOUNT_DISABLED.get());    }  }  if (wasLocked) {    generateAccountStatusNotificationNoPwds(ACCOUNT_UNLOCKED,INFO_MODIFY_ACCOUNT_UNLOCKED.get());  }}  }
class C{  protected String configureUri(final String uri){  if (prefix == null || uri.startsWith(prefix))   return uri; else   return prefix + uri;}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  public static boolean isXML11Content(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  System.out.println("sip provider = " + sipProvider);  Request request=requestEvent.getRequest();  try {    Response response=messageFactory.createResponse(200,request,null,null);    serverTransactionId.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();    fail("unexpected exception");  }}  }
class C{  public static void createPolicies(PolicyManager pm,InputStream xmlPolicies) throws PolicyException, SSOException {  createOrReplacePolicies(pm,xmlPolicies,false);}  }
class C{  public void processed(String sourceId,String targetId,boolean linkExisted,String linkId,boolean linkWasCreated,Situation situation,ReconAction action){  if (sourceId != null) {    sourceProcessed.incrementAndGet();  }  if (targetId != null) {    if (ReconAction.CREATE.equals(action)) {      targetCreated.incrementAndGet();    } else {      targetProcessed.incrementAndGet();    }  }  if (linkExisted) {    linkProcessed.incrementAndGet();  }  if (linkWasCreated) {    linkCreated.incrementAndGet();  }}  }
class C{  public static void bind(String name,Remote obj) throws AlreadyBoundException, java.net.MalformedURLException, RemoteException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  if (obj == null)   throw new NullPointerException("cannot bind to null");  registry.bind(parsed.name,obj);}  }
class C{  @DataProvider(name="testSafeDataLevelHighProvider") private Object[][] testSafeDataLevelHighProvider(){  List<List<Object>> objectArrayList=new ArrayList<>();  objectArrayList=addPossibleParameters(objectArrayList,2,3);  objectArrayList=addPossibleParameters(objectArrayList,true,false);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);  objectArrayList=addPossibleParameters(objectArrayList,REPLY_OK_RS_SCENARIO,TIMEOUT_RS_SCENARIO);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);  objectArrayList=addPossibleParameters(objectArrayList,REPLY_OK_RS_SCENARIO,TIMEOUT_RS_SCENARIO);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);  objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);  objectArrayList=addPossibleParameters(objectArrayList,REPLY_OK_RS_SCENARIO,TIMEOUT_RS_SCENARIO);  debugInfo("testSafeDataLevelHighProvider: number of possible parameter combinations : " + objectArrayList.size());  return toDataProvider(objectArrayList);}  }
class C{  public boolean hasNext(){  return pos < length;}  }
class C{  @Override public void flushBuffer() throws IOException {  if (debug > 1) {    System.out.println("flush buffer @ GZipServletResponseWrapper");  }  ((CompressionResponseStream)stream).flush();}  }
class C{  public void test_getKeyLjava_lang_String$C() throws Exception {  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  keyTest.load(null,null);  keyTest.setKeyEntry("alias2",getPrivateKey(),pssWord,cert);  PrivateKey returnedKey=(PrivateKey)keyTest.getKey("alias2",pssWord);  byte[] retB=returnedKey.getEncoded();  byte[] priB=getPrivateKey().getEncoded();  assertTrue(Arrays.equals(retB,priB));  assertEquals(getPrivateKey().getAlgorithm(),returnedKey.getAlgorithm());  assertEquals(getPrivateKey().getFormat(),returnedKey.getFormat());  try {    keyTest.getKey("alias2","wrong".toCharArray());    fail();  } catch (  UnrecoverableKeyException expected) {  }  keyTest.setCertificateEntry("alias1",cert[1]);  assertNull("the private key returned from getKey for a certificate entry is not null",keyTest.getKey("alias1",pssWord));}  }
class C{  @Override public Object clone(){  Rule answer=null;  try {    answer=(Rule)super.clone();  } catch (  CloneNotSupportedException se) {    answer=new Rule();  }  answer.ruleName=ruleName;  answer.serviceTypeName=serviceTypeName;  answer.applicationName=applicationName;  answer.serviceType=serviceType;  answer.resourceNames=new HashSet();  if (resourceNames != null) {    answer.resourceNames.addAll(resourceNames);  }  answer.actions=new HashMap();  Iterator items=actions.keySet().iterator();  while (items.hasNext()) {    Object o=items.next();    Set set=(Set)actions.get(o);    HashSet aSet=new HashSet();    aSet.addAll(set);    answer.actions.put(o,aSet);  }  return (answer);}  }
class C{  public static String composeStructFieldPath(String fieldNS,String fieldName) throws XMPException {  assertFieldNS(fieldNS);  assertFieldName(fieldName);  XMPPath fieldPath=XMPPathParser.expandXPath(fieldNS,fieldName);  if (fieldPath.size() != 2) {    throw new XMPException("The field name must be simple",XMPError.BADXPATH);  }  return '/' + fieldPath.getSegment(XMPPath.STEP_ROOT_PROP).getName();}  }
class C{  static AttributeType newPlaceHolder(final String name,final Syntax syntax,final MatchingRule equalityMatchingRule){  return new AttributeType(name,syntax,equalityMatchingRule);}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  int dataSize=w * h * numComponents;  WritableRaster raster=null;switch (transferType) {case DataBuffer.TYPE_BYTE:case DataBuffer.TYPE_USHORT:    raster=Raster.createInterleavedRaster(transferType,w,h,numComponents,null);  break;default :SampleModel sm=createCompatibleSampleModel(w,h);DataBuffer db=sm.createDataBuffer();raster=Raster.createWritableRaster(sm,db,null);}return raster;}  }
class C{  public String encodeURL(final String url,final boolean useAMCookie){  if (DEBUG.messageEnabled()) {    DEBUG.message("in encodeURL");  }  boolean appendSessCookieInURL=SystemProperties.getAsBoolean(Constants.APPEND_SESS_COOKIE_IN_URL,true);  if (!appendSessCookieInURL) {    return url;  }  if (DEBUG.messageEnabled()) {    DEBUG.message("cookieDetect : " + cookieDetect);    DEBUG.message("cookieSupported : " + cookieSupported);  }  if (!cookieDetect && cookieSupported) {    return url;  }  InternalSession session=getReferencedSession();  if (null == session) {    return url;  }  String cookieName=AuthUtils.getCookieName();  if (!useAMCookie && session.getState() == SessionState.INVALID) {    cookieName=AuthUtils.getAuthCookieName();  }  String encodedURL;  if (URL_REWRITE_IN_PATH) {    encodedURL=SessionURL.getInstance().encodeInternalSessionURL(url,SessionUtils.SEMICOLON,false,cookieName,session);  } else {    encodedURL=SessionURL.getInstance().encodeInternalSessionURL(url,SessionUtils.QUERY,false,cookieName,session);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("AuthRequest encodeURL : URL=" + url + ", Rewritten URL="+ encodedURL);  }  return (encodedURL);}  }
class C{  private int initializeServer(final PrintStream out,final PrintStream err){  try {    new DirectoryServer.InitializationBuilder(configFile.getValue()).requireCryptoServices().requireErrorAndDebugLogPublisher(out,err).initialize();    return 0;  } catch (  InitializationException ie) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_SERVER_COMPONENTS.get(ie.getLocalizedMessage()));    return 1;  }}  }
class C{  public static String buildCookieString(String url,String cookieStr,short encodingScheme,boolean escape){  return (encodingScheme == SessionUtils.QUERY) ? writeUrlInQuery(url,cookieStr,escape) : writeUrlInPath(url,cookieStr,encodingScheme);}  }
class C{  private static void assertFieldNS(String fieldNS) throws XMPException {  if (fieldNS == null || fieldNS.length() == 0) {    throw new XMPException("Empty field namespace URI",XMPError.BADSCHEMA);  }}  }
class C{  protected static void addToOrgMapCache(SSOToken stoken,String dn) throws AMException, SSOException {  if ((dn == null) || !LDAPUtils.isDN(dn)) {    return;  }  String rfcDN=dn;  Set attrNames=new HashSet();  attrNames.add("objectclass");  attrNames.add("sunpreferreddomain");  attrNames.add("associateddomain");  attrNames.add("sunorganizationalias");  Map attributes=AMDirectoryAccessFactory.getDirectoryServices().getAttributes(stoken,dn,attrNames,AMObject.ORGANIZATION);  String rdn=LDAPUtils.rdnValueFromDn(dn);  Set prefDomain=(Set)attributes.get("sunpreferreddomain");  Set associatedDomain=(Set)attributes.get("associateddomain");  Set orgAlias=(Set)attributes.get("sunorganizationalias");synchronized (orgMapCache) {    orgMapCache.put(rdn.toLowerCase(),rfcDN);    if ((prefDomain != null) && (prefDomain.size() == 1)) {      String preferredDomain=(String)prefDomain.iterator().next();      orgMapCache.put(preferredDomain,rfcDN);    }    if ((associatedDomain != null) && !associatedDomain.isEmpty()) {      Iterator itr=associatedDomain.iterator();      while (itr.hasNext()) {        String value=(String)itr.next();        orgMapCache.put(value,rfcDN);      }    }    if ((orgAlias != null) && !orgAlias.isEmpty()) {      Iterator itr=orgAlias.iterator();      while (itr.hasNext()) {        String value=(String)itr.next();        orgMapCache.put(value,rfcDN);      }    }  }}  }
class C{  ReplServerStartMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  decodeHeader(scanner,MSG_TYPE_REPL_SERVER_START,MSG_TYPE_REPL_SERVER_START_V1);  baseDN=scanner.nextDN();  serverId=scanner.nextIntUTF8();  serverURL=scanner.nextString();  windowSize=scanner.nextIntUTF8();  sslEncryption=Boolean.valueOf(scanner.nextString());  if (protocolVersion > ProtocolVersion.REPLICATION_PROTOCOL_V1) {    degradedStatusThreshold=scanner.nextIntUTF8();  }  serverState=scanner.nextServerStateMustComeLast();}  }
class C{  public void doTestMessageDigest(Digest oldDigest,Digest newDigest){  final int ITERATIONS=10;  byte[] data=new byte[1024];  byte[] oldHash=new byte[oldDigest.getDigestSize()];  byte[] newHash=new byte[newDigest.getDigestSize()];  assertEquals("Hash names must be equal",oldDigest.getAlgorithmName(),newDigest.getAlgorithmName());  assertEquals("Hash sizes must be equal",oldHash.length,newHash.length);  assertEquals("Hash block sizes must be equal",((ExtendedDigest)oldDigest).getByteLength(),((ExtendedDigest)newDigest).getByteLength());  for (int i=0; i < data.length; i++) {    data[i]=(byte)i;  }  long oldTime=0;  long newTime=0;  for (int j=0; j < ITERATIONS; j++) {    long t0=System.currentTimeMillis();    for (int i=0; i < 4; i++) {      oldDigest.update(data,0,data.length);    }    int oldLength=oldDigest.doFinal(oldHash,0);    long t1=System.currentTimeMillis();    oldTime=oldTime + (t1 - t0);    long t2=System.currentTimeMillis();    for (int i=0; i < 4; i++) {      newDigest.update(data,0,data.length);    }    int newLength=newDigest.doFinal(newHash,0);    long t3=System.currentTimeMillis();    newTime=newTime + (t3 - t2);    assertEquals("Hash sizes must be equal",oldLength,newLength);    for (int i=0; i < oldLength; i++) {      assertEquals("Hashes[" + i + "] must be equal",oldHash[i],newHash[i]);    }  }  System.out.println("Time for " + ITERATIONS + " x old hash processing: "+ oldTime+ " ms");  System.out.println("Time for " + ITERATIONS + " x new hash processing: "+ newTime+ " ms");  assertTrue("New hash should be faster",newTime < oldTime);}  }
class C{  public String encode(){  String encoded_string;  encoded_string=PHONE_FIELD;  if (name != null) {    encoded_string+=name + Separators.LESS_THAN;  }  encoded_string+=phoneNumber;  if (name != null) {    encoded_string+=Separators.GREATER_THAN;  }  encoded_string+=Separators.NEWLINE;  return encoded_string;}  }
class C{  public void dropActionChanged(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dropActionChanged(dsde);  }  getDragSource().processDropActionChanged(dsde);  updateCurrentCursor(getSourceActions(),dsde.getTargetActions(),CHANGED);}  }
class C{  public static PdfTargetDictionary createChildTarget(String embeddedFileName){  return new PdfTargetDictionary(PdfName.C).put(PdfName.N,new PdfString(embeddedFileName));}  }
class C{  public void draw(ITeslaHolder holder){  draw(holder.getStoredPower(),holder.getCapacity());}  }
class C{  public boolean contains(int x,int y){  return (ui != null) ? ui.contains(this,x,y) : super.contains(x,y);}  }
class C{  public com.sun.identity.liberty.ws.paos.jaxb.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.paos.jaxb.impl.StatusElementImpl();}  }
class C{  public byte peek(int offset){  return sequence.byteAt(pos + offset);}  }
class C{  private boolean isLinkerMethodInvoke(Name name){  if (name.function == null)   return false;  if (name.arguments.length < 1)   return false;  MemberName member=name.function.member();  return member != null && member.getDeclaringClass() == MethodHandle.class && !member.isPublic() && member.isStatic() && member.getName().startsWith("linkTo");}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  static boolean isApplicable(AttributeType a,TargetAttr targetAttr){  if (targetAttr.isAllUserAttributes() && targetAttr.isAllOpAttributes()) {    return !targetAttr.getOperator().equals(EnumTargetOperator.NOT_EQUALITY);  } else {    return evalAttrType(a,targetAttr);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildoldchildnonexistent.class,args);}  }
class C{  public SMG11NViewBean(){  super("SMG11N",DEFAULT_DISPLAY_URL,"iPlanetG11NSettings");}  }
class C{  @DataProvider(name="invalidStatements") public Object[][] invalids(){  return new Object[][]{{"-1"},{"0"},{"not valid"},{"1025"},{"10000"}};}  }
class C{  public synchronized void disableAllObjectNames(){  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"disableAllObjectNames");  selectedNames=new Vector<ObjectName>();  deselectedNames=null;  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"disableAllObjectNames");  return;}  }
class C{  @Override public void shutdown(){  if (DEBUG.messageEnabled()) {    DEBUG.message("shutdown invoked");  }  super.shutdown();  removeListener();  IOUtils.closeIfNotNull(connectionFactory);  IOUtils.closeIfNotNull(bindConnectionFactory);  idRepoListener=null;}  }
class C{  public boolean isRadiosInUnison(){  return getFieldFlag(FF_RADIOS_IN_UNISON);}  }
class C{  public String canCreatePolicy(String realmName){  String message=null;  try {    PolicyManager policyMgr=getPolicyManager(realmName);    if (policyMgr != null) {      Set<String> services=getServiceTypeNames().keySet();      if (!policyMgr.canCreatePolicies(services)) {        message="noReferralForOrg.message";      } else       if (!hasPolicyConfigSvcRegistered(realmName)) {        message="noPolicyConfigSvc.message";      }    }  } catch (  EntitlementException e) {    message=e.getMessage();  }catch (  AMConsoleException e) {    message=e.getMessage();  }  return message;}  }
class C{  public StringHashMap(String identifier,AbstractTagFrameBody frameBody,int size){  super(identifier,frameBody,size);  if (identifier.equals(DataTypes.OBJ_LANGUAGE)) {    valueToKey=Languages.getInstanceOf().getValueToIdMap();    keyToValue=Languages.getInstanceOf().getIdToValueMap();  } else {    throw new IllegalArgumentException("Hashmap identifier not defined in this class: " + identifier);  }}  }
class C{  public static boolean isEnabledFor(String category,Severity severity){  if (Thread.currentThread() instanceof DirectoryThread) {    DirectoryThread thread=(DirectoryThread)Thread.currentThread();    Task task=thread.getAssociatedTask();    if (task != null) {      return true;    }  }  for (  ErrorLogPublisher<ErrorLogPublisherCfg> publisher : loggerStorage.getLogPublishers()) {    if (publisher.isEnabledFor(category,severity)) {      return true;    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementValue;  doc=(Document)load("staff",false);  elementNode=doc.getDocumentElement();  elementValue=elementNode.getNodeValue();  assertNull("elementNodeValueNull",elementValue);}  }
class C{  protected void doFilter(HttpServletRequest request,HttpServletResponse response,FilterChain chain) throws IOException, ServletException {  chain.doFilter(request,response);}  }
class C{  @Override public void close() throws IOException {  eof=false;  position=0;  mark=-1;}  }
class C{  protected String jmxGet(MBeanServerConnection jmxServerConnection,String name) throws Exception {  String error=null;  if (isEcho()) {    handleOutput("MBean " + name + " get attribute "+ attribute);  }  Object result=jmxServerConnection.getAttribute(new ObjectName(name),attribute);  if (result != null) {    echoResult(attribute,result);    createProperty(result);  } else   error="Attribute " + attribute + " is empty";  return error;}  }
class C{  public boolean mustCheckUnsavedChanges(){  boolean mustCheckUnsavedChanges;  if (vlvIndexPanel.isVisible()) {    mustCheckUnsavedChanges=vlvIndexPanel.mustCheckUnsavedChanges();  } else   if (standardIndexPanel.isVisible()) {    mustCheckUnsavedChanges=standardIndexPanel.mustCheckUnsavedChanges();  } else {    mustCheckUnsavedChanges=false;  }  return mustCheckUnsavedChanges;}  }
class C{  public ManagedObjectDecodingException(ManagedObject<?> partialManagedObject,Collection<PropertyException> causes){  super(createMessage(partialManagedObject,causes));  this.partialManagedObject=partialManagedObject;  this.causes=Collections.unmodifiableList(new LinkedList<PropertyException>(causes));}  }
class C{  public MidiUnavailableException(){  super();}  }
class C{  @NonNull public static Interpolator overshoot(){  return new OvershootInterpolator();}  }
class C{  public FrameBodyCTOC(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public AudioFile readFile(File f) throws CannotReadException, IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {  checkFileExists(f);  String ext=Utils.getExtension(f);  AudioFileReader afr=readers.get(ext);  if (afr == null) {    throw new CannotReadException(ErrorMessage.NO_READER_FOR_THIS_FORMAT.getMsg(ext));  }  return afr.read(f);}  }
class C{  protected final void generateUnacceptableReason(Collection<LocalizableMessage> reasons,LocalizableMessageBuilder unacceptableReason){  boolean isFirst=true;  for (  LocalizableMessage reason : reasons) {    if (isFirst) {      isFirst=false;    } else {      unacceptableReason.append("  ");    }    unacceptableReason.append(reason);  }}  }
class C{  public void startAttribute(String uri,String local){  textBuf.setLength(0);  this.attNamespaceUri=uri;  this.attLocalName=local;}  }
class C{  protected synchronized void timeout() throws IllegalMonitorStateException {  if (owner == Thread.currentThread()) {    timeout=true;  } else {    throw new IllegalMonitorStateException("The calling thread is not the owner of the lock!");  }}  }
class C{  private CaseMapper(){}  }
class C{  public InterruptedIOException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public FileUtils(){  super();}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length < 8) {    throw new IllegalArgumentException("iv.length < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,0,this.iv,0,8);}  }
class C{  public static BooleanArgument acceptLicenseArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_ACCEPT_LICENSE).description(INFO_OPTION_ACCEPT_LICENSE.get()).buildArgument();}  }
class C{  public PlaDelTriCorner opposite_corner(PlaDelTriEdge p_edge_line){  int edge_line_no=-1;  for (int index=0; index < 3; ++index) {    if (edge_lines[index] == p_edge_line) {      edge_line_no=index;      break;    }  }  if (edge_line_no < 0) {    System.out.println("Triangle.opposite_corner: p_edge_line not found");    return null;  }  PlaDelTriEdge next_edge=edge_lines[(edge_line_no + 1) % 3];  if (next_edge.left_triangle == this)   return next_edge.end_corner; else   return next_edge.start_corner;}  }
class C{  public static boolean isID3v24FrameIdentifier(String identifier){  return identifier.length() >= 4 && ID3v24Frames.getInstanceOf().getIdToValueMap().containsKey(identifier.substring(0,4));}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Entity entity;  String nullNS=null;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entity=(Entity)entities.getNamedItemNS(nullNS,"ent1");  assertNull("entityNull",entity);}  }
class C{  public static InputSource findEntity(String systemId,String test,Class<?> where){  if (systemId != null && systemId.endsWith(test)) {    try {      return new InputSource(new BufferedInputStream(ModeProvider.instance.getAssets().open(test)));    } catch (    Exception e) {      L.e("Error while opening " + test + ":",e);    }  }  return null;}  }
class C{  public DefaultTableModel(int rowCount,int columnCount){  this(newVector(columnCount),rowCount);}  }
class C{  private void checkSecurityArguments(Collection<LocalizableMessage> errorMessages){  boolean certificateRequired=ldapsPortArg.isPresent() || enableStartTLSArg.isPresent();  int certificateType=0;  if (generateSelfSignedCertificateArg.isPresent()) {    certificateType++;  }  if (useJavaKeyStoreArg.isPresent()) {    certificateType++;  }  if (useJCEKSArg.isPresent()) {    certificateType++;  }  if (usePkcs11Arg.isPresent()) {    certificateType++;  }  if (usePkcs12Arg.isPresent()) {    certificateType++;  }  if (certificateType > 1) {    errorMessages.add(ERR_INSTALLDS_SEVERAL_CERTIFICATE_TYPE_SPECIFIED.get());  }  if (certificateRequired && noPromptArg.isPresent() && certificateType == 0) {    errorMessages.add(ERR_INSTALLDS_CERTIFICATE_REQUIRED_FOR_SSL_OR_STARTTLS.get());  }  if (certificateType == 1) {    if (!generateSelfSignedCertificateArg.isPresent()) {      addErrorMessageIfArgumentsConflict(errorMessages,keyStorePasswordArg,keyStorePasswordFileArg);      if (noPromptArg.isPresent() && !keyStorePasswordArg.isPresent() && !keyStorePasswordFileArg.isPresent()) {        errorMessages.add(ERR_INSTALLDS_NO_KEYSTORE_PASSWORD.get(keyStorePasswordArg.getLongIdentifier(),keyStorePasswordFileArg.getLongIdentifier()));      }    }    if (noPromptArg.isPresent() && !ldapsPortArg.isPresent() && !enableStartTLSArg.isPresent()) {      errorMessages.add(ERR_INSTALLDS_SSL_OR_STARTTLS_REQUIRED.get(ldapsPortArg.getLongIdentifier(),enableStartTLSArg.getLongIdentifier()));    }  }}  }
class C{  public void test_getEntry() throws Exception {  String type="DSA";  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyTest.getEntry("anAlias",new KeyStore.PasswordProtection(new char[]{}));    fail();  } catch (  KeyStoreException expected) {  }  keyTest.load(null,pssWord);  try {    keyTest.getEntry(null,new KeyStore.PasswordProtection(new char[]{}));    fail();  } catch (  NullPointerException expected) {  }  keyTest.getEntry("anAlias",null);  try {    keyTest.getEntry(null,null);    fail();  } catch (  NullPointerException expected) {  }  assertNull(keyTest.getEntry("alias",null));  Certificate[] chain={new MyCertificate(type,testEncoding),new MyCertificate(type,testEncoding)};  DSAPrivateKey privateKey1=(DSAPrivateKey)KeyFactory.getInstance(type).generatePrivate(new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4")));  KeyStore.PasswordProtection pp=new KeyStore.PasswordProtection(pssWord);  assertNull(keyTest.getEntry("alias",pp));  KeyStore.PrivateKeyEntry pke1=new KeyStore.PrivateKeyEntry(getPrivateKey(),chain);  KeyStore.PrivateKeyEntry pke2=new KeyStore.PrivateKeyEntry(privateKey1,chain);  keyTest.setEntry("alias1",pke1,pp);  keyTest.setEntry("alias2",pke2,pp);  assertNull(keyTest.getEntry("alias",pp));  KeyStore.PrivateKeyEntry pkeActual1=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias1",pp);  KeyStore.PrivateKeyEntry pkeActual2=(KeyStore.PrivateKeyEntry)keyTest.getEntry("alias2",pp);  assertTrue(Arrays.equals(chain,pkeActual1.getCertificateChain()));  assertEquals(getPrivateKey(),pkeActual1.getPrivateKey());  assertEquals(new MyCertificate(type,testEncoding),pkeActual1.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias1",KeyStore.PrivateKeyEntry.class));  assertTrue(Arrays.equals(chain,pkeActual2.getCertificateChain()));  DSAPrivateKey entryPrivateKey=(DSAPrivateKey)pkeActual2.getPrivateKey();  assertEquals(privateKey1.getX(),entryPrivateKey.getX());  assertEquals(privateKey1.getParams().getG(),entryPrivateKey.getParams().getG());  assertEquals(privateKey1.getParams().getP(),entryPrivateKey.getParams().getP());  assertEquals(privateKey1.getParams().getQ(),entryPrivateKey.getParams().getQ());  assertEquals(new MyCertificate(type,testEncoding),pkeActual2.getCertificate());  assertTrue(keyTest.entryInstanceOf("alias2",KeyStore.PrivateKeyEntry.class));}  }
class C{  protected boolean hasOneOf(String... patterns){  return scanFiles(patterns).length > 0;}  }
class C{  public StringBuilder replace(int start,int end,String string){  replace0(start,end,string);  return this;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.OFFSET_TIME_TYPE,this);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {}  }
class C{  public static String fixPropertyKey(final String name){  return name.toLowerCase().replace("_","-");}  }
class C{  public boolean equals(Object o){  if (!(o instanceof JumboEnumSet))   return super.equals(o);  JumboEnumSet<?> es=(JumboEnumSet<?>)o;  if (es.elementType != elementType)   return size == 0 && es.size == 0;  return Arrays.equals(es.elements,elements);}  }
class C{  public boolean add(Object attrVal){  if (isOrdered() || (find(attrVal) < 0)) {    values.addElement(attrVal);    return true;  } else {    return false;  }}  }
class C{  public void parse(InputSource input) throws SAXException, IOException {  setupParse();  parent.parse(input);}  }
class C{  public void parseInstructionFromReturn(AST.Return ret,STypeDef methodReturnType,SemanticScope scope,List<Instruction> instructions) throws SyntaxException {  Ins.TReturn tReturn;  if (ret.exp == null) {    if (!methodReturnType.equals(VoidType.get())) {      err.SyntaxException("the method is not void but returns nothing",ret.line_col());      return;    }    tReturn=new Ins.TReturn(null,ret.line_col());  } else {    if (methodReturnType.equals(VoidType.get())) {      err.SyntaxException("the method is void but returns a value",ret.line_col());      return;    }    Value v=parseValueFromExpression(ret.exp,methodReturnType,scope);    tReturn=new Ins.TReturn(v,ret.line_col());  }  instructions.add(tReturn);}  }
class C{  public Sapling(final Material type,TreeSpecies species){  this(type,species,false);}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static boolean isNativeCodeLoaded(){  return NativeCodeLoader.isNativeCodeLoaded();}  }
class C{  public void read_logfile(java.io.InputStream p_input_stream){  board_panel.itera_board.read_logfile(p_input_stream);}  }
class C{  private DirectCOSDefinition createCOSDefinition(String serviceID,Set attrNames) throws UMSException {  AttrSet attrs=new AttrSet();  Attr attr=new Attr(ICOSDefinition.DEFAULT_NAMING_ATTR,serviceID);  attrs.add(attr);  attr=new Attr(ICOSDefinition.COSSPECIFIER,"nsrole");  attrs.add(attr);  attr=new Attr(ICOSDefinition.COSATTRIBUTE);  Iterator iter=attrNames.iterator();  while (iter.hasNext()) {    String attrName=(String)iter.next();    attr.addValue(attrName);  }  attrs.add(attr);  return new DirectCOSDefinition(attrs);}  }
class C{  public void testConstrDoubleDenormalized(){  double a=2.274341322658976E-309;  int aScale=1073;  BigInteger bA=new BigInteger("227434132265897633950269241702666687639731047124115603942986140264569528085692462493371029187342478828091760934014851133733918639492582043963243759464684978401240614084312038547315281016804838374623558434472007664427140169018817050565150914041833284370702366055678057809362286455237716100382057360123091641959140448783514464639706721250400288267372238950016114583259228262046633530468551311769574111763316146065958042194569102063373243372766692713192728878701004405568459288708477607744497502929764155046100964958011009313090462293046650352146796805866786767887226278836423536035611825593567576424943331337401071583562754098901412372708947790843318760718495117047155597276492717187936854356663665005157041552436478744491526494952982062613955349661409854888916015625");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.greaterThanOrEqual(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public Crops(final Material type,final CropState state){  super(type);  setState(state);}  }
