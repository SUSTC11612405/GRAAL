class C{  public void test_ticket_1007_number6() throws Exception {  new TestHelper("ticket-1007-number6","ticket-1007-number6.rq","ticket-1007-custom.trig","ticket-1007-number-integer.srx",false).runTest();}  }
class C{  public static boolean isSupported(String charset){  return java.nio.charset.Charset.isSupported(charset);}  }
class C{  public void runTest() throws Throwable {  Document newNode;  String newValue;  newNode=(Document)load("staff",true);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public HttpsURL(final String userinfo,final String host,final String path,final String query,final String fragment) throws URIException {  this(userinfo,host,-1,path,query,fragment);}  }
class C{  public boolean hasSkins(){  return System.getProperty("skin") != null || System.getProperty("dskin") != null;}  }
class C{  public void fsetstat(SFTPv3FileHandle handle,SFTPv3FileAttributes attr) throws IOException {  checkHandleValidAndOpen(handle);  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(handle.fileHandle,0,handle.fileHandle.length);  tw.writeBytes(createAttrs(attr));  if (debug != null) {    debug.println("Sending SSH_FXP_FSETSTAT...");    debug.flush();  }  sendMessage(Packet.SSH_FXP_FSETSTAT,req_id,tw.getBytes());  expectStatusOKMessage(req_id);}  }
class C{  public void onSuccess(int downloadId,String filePath){}  }
class C{  private static boolean isOperatingSystemWindows(){  return System.getProperty("os.name","").toLowerCase().startsWith("windows");}  }
class C{  @Override protected void onFocusChanged(boolean focused,int direction,Rect previouslyFocusedRect){  super.onFocusChanged(focused,direction,previouslyFocusedRect);  if (mIcon != null) {    mIcon.setVisibility(focused ? View.VISIBLE : View.GONE);  }}  }
class C{  public String sqlObject_dropFunction(String vendorName,String catalogName,String schemaName,String functionType,String functionName,String functionReturnType,String functionSignature){  String translatedFunctionType=translateFunctionType(vendorName,vendorName,functionType,functionReturnType);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropFunction(catalogName,schemaName,translatedFunctionType,functionName,functionSignature);}  }
class C{  public C lowerEndpoint(){  return lowerBound.endpoint();}  }
class C{  @Override protected void register(ConfigurationCapabilityFactory configurationCapabilityFactory){  configurationCapabilityFactory.registerConfigurationCapability("oc4j9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,OrionStandaloneLocalConfigurationCapability.class);  configurationCapabilityFactory.registerConfigurationCapability("oc4j10x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,OrionStandaloneLocalConfigurationCapability.class);}  }
class C{  boolean isHeld(long version){  SnapshotDeletionPolicy.SnapshotHolder holder=snapshots.get(version);  return holder != null && holder.counter > 0;}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  if (!_isPost) {    return;  }  if (_tempStream == null) {    _tempStream=new MemoryStream();  }  _tempStream.write(buf,offset,length,isEnd);}  }
class C{  private static ArrayList<String> readIndirectValues(final InputStream in) throws IOException {  final ArrayList<String> fonts;  final BufferedReader inpStream=new BufferedReader(new InputStreamReader(in));  fonts=new ArrayList<String>(0);  while (true) {    final String nextValue=inpStream.readLine();    if (nextValue == null) {      break;    }    fonts.add(nextValue);  }  inpStream.close();  return fonts;}  }
class C{  public static DividerBuilder from(Drawable drawable){  DividerBuilder builder=new DividerBuilder();  builder.with(drawable);  return builder;}  }
class C{  public static <T>List<T> map(List<T> values,Map<T,T> map){  List<T> result=new ArrayList<>(values.size());  for (  T t : values) {    result.add(map.get(t));  }  return result;}  }
class C{  public void rewindInputPosition(int position){  this.ptr=position;}  }
class C{  protected void deflate() throws IOException {  int len=def.deflate(buf,0,buf.length);  if (len > 0) {    out.write(buf,0,len);  }}  }
class C{  private void appendPolygonPolygon(Polygon polygon,int level,boolean indentFirst,Writer writer) throws IOException {  if (indentFirst)   indent(level,writer);  writer.write("<polygon points='");  appendSequencePoints(polygon.getExteriorRing().getCoordinateSequence(),level,false,writer);  writer.write("' />\n");}  }
class C{  public PSPCommunicationException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @Deprecated public static String toString(final byte[] bytes,final String charsetName) throws UnsupportedEncodingException {  return charsetName != null ? new String(bytes,charsetName) : new String(bytes,Charset.defaultCharset());}  }
class C{  DOMStringListImpl(Vector params){  fStrings=params;}  }
class C{  public static void notNull(Object obj){  if (obj == null)   throw new IllegalArgumentException("Object must not be null");}  }
class C{  @Override public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  public static @Nonnull <T>T valueOrDefault(@Nullable T value,@Nonnull T defaultValue){  return value == null ? defaultValue : value;}  }
class C{  public void registerScheme(ResourceSet resourceSet,@SuppressWarnings("hiding") ClassLoader classLoader){  URIConverter converter=resourceSet.getURIConverter();  if (registerScheme(converter,classLoader)) {    ExecutionEnvironmentDescriptor descriptor=new ExecutionEnvironmentDescriptor(resourceSet,classLoader);    register(resourceSet,descriptor);  }}  }
class C{  public NegativeArraySizeException(String s){  super(s);}  }
class C{  public ToggleCommentAction(ResourceBundle bundle,String prefix,ITextEditor editor){  super(bundle,prefix,editor);}  }
class C{  public Boolean Dial(String number,boolean makeTheCall){  try {    Intent intent=new Intent(makeTheCall ? Intent.ACTION_CALL : Intent.ACTION_VIEW,Uri.parse("tel:" + number));    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    _context.startActivity(intent);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  private void part(Player player){  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group == null) {    player.sendPrivateText(NotificationType.ERROR,"You are not a member of a group.");    return;  }  group.removeMember(player.getName());}  }
class C{  public boolean commit() throws LoginException {switch (status) {case UNINITIALIZED:default :    throw new LoginException("The login module is not initialized");case INITIALIZED:  logoutInternal();throw new LoginException("Authentication failed");case AUTHENTICATED:if (commitInternal()) {return true;} else {logoutInternal();throw new LoginException("Unable to retrieve certificates");}case LOGGED_IN:return true;}}  }
class C{  protected HTTPErrorStage(GraphManager graphManager,Pipe<?> input,Pipe<ServerResponseSchema> output,HTTPSpecification<T,R,V,H> httpSpec){  super(graphManager,input,output,httpSpec);  this.input=input;  this.output=output;}  }
class C{  public int readLargeUleb128(){  return readUleb128(true);}  }
class C{  private void createContext(String path){  String verifiedpath=null;  verifiedpath=prependPath(path);  try {    m_group=new GroupMembership(verifiedpath,s_nodename,this,this);  } catch (  Exception e2) {    LOGGER.error("Exception while creating the context :" + path,e2);  }}  }
class C{  public boolean isFinal(){  return (accessFlags & AccessFlag.FINAL) != 0;}  }
class C{  public void readDict(BufferedReader fin) throws IOException {  dict.clear();  String line;  if ((line=fin.readLine()) == null) {    System.out.println("No dictionary size information");    return;  }  int dictSize=Integer.parseInt(line);  if (dictSize <= 0) {    System.out.println("Invalid dictionary size");  }  System.out.println("Reading dictionary ...");  for (int i=0; i < dictSize; i++) {    line=fin.readLine();    if (line == null) {      System.out.println("Invalid dictionary line");      return;    }    StringTokenizer strTok=new StringTokenizer(line," \t\r\n");    int len=strTok.countTokens();    if (len < 2) {      continue;    }    StringTokenizer cpTok=new StringTokenizer(strTok.nextToken(),":");    int cp=Integer.parseInt(cpTok.nextToken());    int cpCount=Integer.parseInt(cpTok.nextToken());    Element elem=new Element();    elem.count=cpCount;    elem.chosen=1;    while (strTok.hasMoreTokens()) {      StringTokenizer lbTok=new StringTokenizer(strTok.nextToken(),":");      int label=Integer.parseInt(lbTok.nextToken());      int count=Integer.parseInt(lbTok.nextToken());      int fidx=Integer.parseInt(lbTok.nextToken());      CountFIdx cntFIdx=new CountFIdx(count,fidx);      elem.lbCntFidxes.put(new Integer(label),cntFIdx);    }    dict.put(new Integer(cp),elem);  }  System.out.println("Reading dictionary (" + Integer.toString(dict.size()) + " entries) completed!");  line=fin.readLine();}  }
class C{  private void addOnCurvePoint(PointRec rec,RenderState rs){  if (rs.firstOn == null) {    rs.firstOn=rec;    rs.gp.moveTo(rec.x,rec.y);  } else   if (rs.prevOff != null) {    rs.gp.quadTo(rs.prevOff.x,rs.prevOff.y,rec.x,rec.y);    rs.prevOff=null;  } else {    rs.gp.lineTo(rec.x,rec.y);  }}  }
class C{  private int isInResults(ArrayList<Media> results,String id){  int i=0;  for (  Media item : results) {    if (item.videoId.equals(id))     return i;    i++;  }  return -1;}  }
class C{  public void clearSelection(){  List<Integer> selection=getSelectedItems();  selectedItems.clear();  for (  Integer i : selection) {    notifyItemChanged(i);  }}  }
class C{  public static boolean isSnakeCase(String name){  return Pattern.matches("[\\da-z_]+",name);}  }
class C{  public void testEncode() throws StunException {  byte[] expectedReturn=msgFixture.bindingRequest;  byte[] actualReturn=bindingRequest.encode(stunStack);  assertTrue("A binding request was not properly encoded",Arrays.equals(expectedReturn,actualReturn));  expectedReturn=msgFixture.bindingResponse;  actualReturn=bindingResponse.encode(stunStack);  assertTrue("A binding response was not properly encoded",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  protected Builder(OnCardClickListener listener,Card card){  mCard=card;  mCard.mClickListener=listener;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  public EuclideanDistance(){  super();}  }
class C{  protected XAResource connect() throws Exception {synchronized (ActiveMQXAResourceWrapper.lock) {    if (delegate != null) {      return delegate;    }  }  for (  XARecoveryConfig xaRecoveryConfig : xaRecoveryConfigs) {    if (xaRecoveryConfig == null) {      continue;    }    if (ActiveMQXARecoveryLogger.LOGGER.isDebugEnabled()) {      ActiveMQXARecoveryLogger.LOGGER.debug("Trying to connect recovery on " + xaRecoveryConfig + " of "+ Arrays.toString(xaRecoveryConfigs));    }    ClientSession cs=null;    try {      if (xaRecoveryConfig.getDiscoveryConfiguration() != null) {        serverLocator=ActiveMQClient.createServerLocator(false,xaRecoveryConfig.getDiscoveryConfiguration());      } else {        serverLocator=ActiveMQClient.createServerLocator(false,xaRecoveryConfig.getTransportConfig());      }      serverLocator.disableFinalizeCheck();      serverLocator.setProtocolManagerFactory(xaRecoveryConfig.getClientProtocolManager());      csf=serverLocator.createSessionFactory();      if (xaRecoveryConfig.getUsername() == null) {        cs=csf.createSession(true,false,false);      } else {        cs=csf.createSession(xaRecoveryConfig.getUsername(),xaRecoveryConfig.getPassword(),true,false,false,false,1);      }    } catch (    Throwable e) {      ActiveMQXARecoveryLogger.LOGGER.xaRecoverAutoConnectionError(e,xaRecoveryConfig);      if (ActiveMQXARecoveryLogger.LOGGER.isDebugEnabled()) {        ActiveMQXARecoveryLogger.LOGGER.debug(e.getMessage(),e);      }      try {        if (cs != null)         cs.close();        if (serverLocator != null)         serverLocator.close();      } catch (      Throwable ignored) {        if (ActiveMQXARecoveryLogger.LOGGER.isTraceEnabled()) {          ActiveMQXARecoveryLogger.LOGGER.trace(e.getMessage(),ignored);        }      }      continue;    }    cs.addFailureListener(this);synchronized (ActiveMQXAResourceWrapper.lock) {      delegate=cs;    }    return delegate;  }  ActiveMQXARecoveryLogger.LOGGER.recoveryConnectFailed(Arrays.toString(xaRecoveryConfigs));  throw new ActiveMQNotConnectedException();}  }
class C{  public GrayPaintScale(double lowerBound,double upperBound,int alpha){  if (lowerBound >= upperBound) {    throw new IllegalArgumentException("Requires lowerBound < upperBound.");  }  if (alpha < 0 || alpha > 255) {    throw new IllegalArgumentException("Requires alpha in the range 0 to 255.");  }  this.lowerBound=lowerBound;  this.upperBound=upperBound;  this.alpha=alpha;}  }
class C{  @Override public int read(char[] chars,int startOffset,int length) throws IOException {  for (int i=startOffset; i <= startOffset + length; i++) {    int readInt=read();    if (readInt == -1)     return i - startOffset;    chars[i]=(char)readInt;  }  return length;}  }
class C{  private AsciiImgCache(final Dimension characterImageSize,final Map<Character,GrayscaleMatrix> imageCache,final char[] characters){  this.characterImageSize=characterImageSize;  this.imageCache=imageCache;}  }
class C{  public void applyAll(long index){  if (!log.isOpen())   return;  long lastIndex=Math.min(index,log.lastIndex());  if (lastIndex > lastApplied) {    for (long i=lastApplied + 1; i <= lastIndex; i++) {      Entry entry=log.get(i);      if (entry != null) {        apply(entry).whenComplete(null);      }      setLastApplied(i);    }  }}  }
class C{  public static Number acos(Number a){  return Math.acos(a.doubleValue());}  }
class C{  public void addCompareCol(int sortCol){  sortCols.add(new ArrayElementComparator(sortCol,true));}  }
class C{  public AnnihilateMove(int col,int row,Player player){  super(col,row,player);}  }
class C{  public void testXformLoadSucceeded_HidesLoadingDialog(){  mController.init();  mFakeGlobalEventBus.post(new FetchXformSucceededEvent());  verify(mMockUi).showFormLoadingDialog(false);}  }
class C{  public TimePeriodValuesCollection(){  this((TimePeriodValues)null);}  }
class C{  @Override public String resultsetKey(){  if (!m_ResultsetsValid) {    try {      prepareData();    } catch (    Exception ex) {      ex.printStackTrace();      return ex.getMessage();    }  }  String result="";  for (int j=0; j < getNumResultsets(); j++) {    result+="(" + (j + 1) + ") "+ getResultsetName(j)+ '\n';  }  return result + '\n';}  }
class C{  public static int ENOTTY(){  return Errno.ENOTTY.intValue();}  }
class C{  public static float r_distance(vec3 a,vec3 b){  float x=a.m[0] - b.m[0];  float y=a.m[1] - b.m[1];  float z=a.m[2] - b.m[2];  float result=(float)Math.sqrt(x * x + y * y + z * z);  return result;}  }
class C{  public mat4 loadRotate(vec3 v){  mat4_util_load_rotate(this.m,v.x(),v.y(),v.z());  return this;}  }
class C{  @Override final public int hashCode(){  if (hash == 0) {    hash=961 * s.hashCode() + 31 * p.hashCode() + o.hashCode();  }  return hash;}  }
class C{  private static void printElement(Element element){  printDocument(new Document(element));}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private int compareVersions(String fullVersion1,String fullVersion2){  Matcher v1Matcher=VERSION_PATTERN.matcher(fullVersion1);  boolean isV1Match=v1Matcher.matches();  Matcher v2Matcher=VERSION_PATTERN.matcher(fullVersion2);  boolean isV2Match=v2Matcher.matches();  if (isV1Match && !isV2Match) {    return 1;  } else   if (!isV1Match && isV2Match) {    return -1;  } else   if (!isV1Match && !isV2Match) {    return 0;  }  String v1Major=v1Matcher.groupCount() >= 1 ? v1Matcher.group(1) : "0";  String v1Minor=v1Matcher.groupCount() >= 2 ? v1Matcher.group(2) : "0";  String v1Release=v1Matcher.groupCount() >= 3 ? v1Matcher.group(3) : "0";  String v2Major=v2Matcher.groupCount() >= 1 ? v2Matcher.group(1) : "0";  String v2Minor=v2Matcher.groupCount() >= 2 ? v2Matcher.group(2) : "0";  String v2Release=v2Matcher.groupCount() >= 3 ? v2Matcher.group(3) : "0";  int compareMajor=compareVersionParts(v1Major,v2Major);  if (compareMajor == 1) {    return 1;  } else   if (compareMajor == -1) {    return -1;  } else {    int compareMinor=compareVersionParts(v1Minor,v2Minor);    if (compareMinor == 1) {      return 1;    } else     if (compareMinor == -1) {      return -1;    } else {      int compareRelease=compareVersionParts(v1Release,v2Release);      if (compareRelease == 1) {        return 1;      } else       if (compareRelease == -1) {        return -1;      } else {        return 0;      }    }  }}  }
class C{  private String applyPostProcessors(final CacheKey cacheKey,final String content) throws IOException {  final Collection<ResourcePostProcessor> processors=processorsFactory.getPostProcessors();  LOG.debug("appying post processors: {}",processors);  if (processors.isEmpty()) {    return content;  }  final Resource resource=Resource.create(cacheKey.getGroupName(),cacheKey.getType());  Reader reader=new StringReader(content.toString());  Writer writer=null;  for (  final ResourcePostProcessor processor : processors) {    final ResourcePreProcessor decoratedProcessor=decorateProcessor(processor,cacheKey.isMinimize());    writer=new StringWriter();    decoratedProcessor.process(resource,reader,writer);    reader=new StringReader(writer.toString());  }  return writer.toString();}  }
class C{  public QueryExpression(String group){  super(group);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.824 -0500",hash_original_method="8119C72F0478CFCCBAF29A53C28985A0",hash_generated_method="CAE9266E5A14EABAAFFFFF8B47C20EF4") public boolean hasToTag(){  return hasParameter(ParameterNames.TO_TAG);}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    value=NULL_OBJECT;  }  for (int i=1; i < elementData.length; i=i + 2) {    if (elementData[i] == value) {      return true;    }  }  return false;}  }
class C{  protected void applyRequestedModifications(){  TextureView view=requestedModificationView.get();  if (view != null) {    if (requestedRotation != null) {      rotate(view,requestedRotation);      requestedRotation=null;    }    if (requestedScaleType != null) {      scale(view,requestedScaleType);      requestedScaleType=null;    }  }  requestedModificationView=new WeakReference<>(null);}  }
class C{  public Socks5BytestreamSession establishSession(String targetJID,String sessionID) throws XMPPException, IOException, InterruptedException {  XMPPException discoveryException=null;  if (!supportsSocks5(targetJID)) {    throw new XMPPException(targetJID + " doesn't support SOCKS5 Bytestream");  }  List<String> proxies=new ArrayList<String>();  try {    proxies.addAll(determineProxies());  } catch (  XMPPException e) {    discoveryException=e;  }  List<StreamHost> streamHosts=determineStreamHostInfos(proxies);  if (streamHosts.isEmpty()) {    throw discoveryException != null ? discoveryException : new XMPPException("no SOCKS5 proxies available");  }  String digest=Socks5Utils.createDigest(sessionID,this.connection.getUser(),targetJID);  if (this.proxyPrioritizationEnabled && this.lastWorkingProxy != null) {    StreamHost selectedStreamHost=null;    for (    StreamHost streamHost : streamHosts) {      if (streamHost.getJID().equals(this.lastWorkingProxy)) {        selectedStreamHost=streamHost;        break;      }    }    if (selectedStreamHost != null) {      streamHosts.remove(selectedStreamHost);      streamHosts.add(0,selectedStreamHost);    }  }  Socks5Proxy socks5Proxy=Socks5Proxy.getSocks5Proxy();  try {    socks5Proxy.addTransfer(digest);    Bytestream initiation=createBytestreamInitiation(sessionID,targetJID,streamHosts);    Packet response=SyncPacketSend.getReply(this.connection,initiation,getTargetResponseTimeout());    StreamHostUsed streamHostUsed=((Bytestream)response).getUsedHost();    StreamHost usedStreamHost=initiation.getStreamHost(streamHostUsed.getJID());    if (usedStreamHost == null) {      throw new XMPPException("Remote user responded with unknown host");    }    Socks5Client socks5Client=new Socks5ClientForInitiator(usedStreamHost,digest,this.connection,sessionID,targetJID);    Socket socket=socks5Client.getSocket(getProxyConnectionTimeout());    this.lastWorkingProxy=usedStreamHost.getJID();    return new Socks5BytestreamSession(socket,usedStreamHost.getJID().equals(this.connection.getUser()));  } catch (  TimeoutException e) {    throw new IOException("Timeout while connecting to SOCKS5 proxy");  } finally {    socks5Proxy.removeTransfer(digest);  }}  }
class C{  protected boolean isArrayContentDetail(){  return arrayContentDetail;}  }
class C{  protected static void printClassType(TypeElement typeElt,AnnotatedTypeFactory atypeFactory){  assert typeElt != null;  String simpleName=typeElt.getSimpleName().toString();  AnnotatedDeclaredType type=atypeFactory.fromElement(typeElt);  System.out.println(simpleName + "\t" + type+ "\t"+ type.directSuperTypes());  for (  Element enclosedElt : typeElt.getEnclosedElements()) {    if (enclosedElt instanceof TypeElement) {      printClassType((TypeElement)enclosedElt,atypeFactory);    }    if (!enclosedElt.getKind().isField() && !(enclosedElt instanceof ExecutableElement))     continue;    AnnotatedTypeMirror memberType=atypeFactory.fromElement(enclosedElt);    System.out.println(simpleName + "." + enclosedElt+ "\t\t"+ memberType);  }}  }
class C{  @Check public void checkN4MemberDeclaration(N4MemberDeclaration n4Member){  if (isNotChecked(n4Member)) {    return;  }  if (holdsDoesNotEqualWithConstructor(n4Member) && holdsNameMayNotBeConfusedWith(n4Member,"future reserved word",FUTURE_RESERVED_WORDS) && holdsNameMayNotBeConfusedWith(n4Member,"boolean literal",BOOLEAN_LITERALS)&& (!(n4Member instanceof Variable) && holdsDoesNotStartWithUpperCaseLetter(n4Member) && holdsNoTypeNameOrNameEqualsType(n4Member)&& holdsDoesNotContainDiscouragedCharacter(n4Member)&& holdsNameMayNotBeConfusedWith(n4Member,"access modifier",ACCESS_MODIFIERS))) {  }}  }
class C{  protected void sendFetch(int fetchSize) throws SQLException, IOException {  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(WireProtocolConstants.op_fetch);  xdrOut.writeInt(getHandle());  xdrOut.writeBuffer(calculateBlr(getFieldDescriptor()));  xdrOut.writeInt(0);  xdrOut.writeInt(fetchSize);}  }
class C{  public SkipCommand(Server server){  super(server,"skip","Skips the current turn, if possible.  Usage: /skip");}  }
class C{  private void addCollapseData(GraphModel graph,Collection<CollapseData> collapseChanges,TreeModel treeModel,GraphNode parent){  SuccessorEdges successors=treeModel.getSuccessors(parent);  if (!successors.hasSuccessors()) {    return;  }  Map<GraphNode,GraphNode> hiddenNodeMap=buildHiddenNodeMap();  HiddenNodesGizmo gizmo=new HiddenNodesGizmo(hiddenNodeMap);  Set<GraphNode> exposedNodes=getExposedNodeSet(graph,gizmo);  Collection<GraphNode> result=Lists.newArrayList();  result.add(parent);  addExposedAncestors(result,treeModel,exposedNodes,parent);  CollapseData collapseData=collapse(parent,result,false);  collapseChanges.add(collapseData);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public Builder add(String fieldName,CharSequence[] values){  intent.putExtra(fieldName,values);  return this;}  }
class C{  public List<Properties> findAllProperties(String uri) throws IOException {  String fulluri=_path + uri;  List<Properties> properties=new ArrayList<>();  Enumeration<URL> resources=getResources(fulluri);  while (resources.hasMoreElements()) {    URL url=resources.nextElement();    Properties props=loadProperties(url);    properties.add(props);  }  return properties;}  }
class C{  public void testGetVersion25() throws Exception {  String xml=WEBAPP_25_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertEquals(WebXmlVersion.V2_5,webXml.getVersion());}  }
class C{  public static int poisson(double lambda){  int k=0;  double p=1.0;  double L=Math.exp(-lambda);  do {    k++;    p*=uniform();  } while (p >= L);  return k - 1;}  }
class C{  protected AbstractSensorMatrix(final int receptiveFieldWidth,final int receptiveFieldHeight,final Filter defaultFilter){  if (receptiveFieldWidth < 0) {    throw new IllegalArgumentException("receptiveFieldWidth must be >= 0");  }  if (receptiveFieldWidth < 0) {    throw new IllegalArgumentException("receptiveFieldHeight must be >= 0");  }  this.receptiveFieldHeight=receptiveFieldHeight;  this.receptiveFieldWidth=receptiveFieldWidth;  this.defaultFilter=defaultFilter;}  }
class C{  private <T extends Element>Collection<T> createCollection(ElementKey<?,?> key){  Class<?> elementType=key.getElementType();  if (Category.class.isAssignableFrom(elementType)) {    return Sets.newLinkedHashSet();  } else {    return Lists.newArrayList();  }}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  public void remove(final String collectionName,final String documentID){  remove(collectionName,documentID,null);}  }
class C{  public static synchronized void cleanup(ResultSet R){  Statement S=null;  if (R != null) {    try {      S=R.getStatement();    } catch (    Throwable t) {      surfaceThrowable("cleanup() called ResultSet.getStatement()",t);    }    cleanup(S,R);  }}  }
class C{  public void printTree(){  System.out.println("Root is: " + vertices.get(root));  System.out.print("Edges: ");  for (int i=0; i < parent.length; i++) {    if (parent[i] != -1) {      System.out.print("(" + vertices.get(parent[i]) + ", "+ vertices.get(i)+ ") ");    }  }  System.out.println();}  }
class C{  public ZeroRegisterDecodedInstruction(InstructionCodec format,int opcode,int index,IndexType indexType,int target,long literal){  super(format,opcode,index,indexType,target,literal);}  }
class C{  public static DetailPostFragment newInstance(String param1,String param2){  DetailPostFragment fragment=new DetailPostFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public PrecisionModel(){  modelType=FLOATING;}  }
class C{  public void sendSerialMessage(SerialMessage m,SerialListener reply){  sendMessage(m,reply);}  }
class C{  public static void datagramEcho(DatagramSocket s1,DatagramSocket s2,InetAddress ia2) throws Exception {  byte[] ba="Hello world".getBytes();  DatagramPacket p1;  SocketAddress dest2=null;  if (ia2 != null) {    dest2=new InetSocketAddress(ia2,s2.getLocalPort());    p1=new DatagramPacket(ba,ba.length,dest2);  } else {    p1=new DatagramPacket(ba,ba.length);  }  dprintln("dest2 = " + dest2);  DatagramPacket r1=new DatagramPacket(new byte[256],256);  DatagramPacket r2=new DatagramPacket(new byte[256],256);  s1.send(p1);  s2.receive(r1);  s2.send(r1);  s1.receive(r2);  comparePackets(p1,r1);  comparePackets(p1,r2);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static String tokenize(String str){  str=str.replaceAll("``"," `` ");  str=str.replaceAll("''","  '' ");  str=str.replaceAll("\"","  \" ");  str=str.replaceAll("([?!\";#$&])"," $1 ");  str=str.replaceAll("\\.\\.\\."," ... ");  str=str.replaceAll("([^.])([.])([\\])}>\"']*)\\s*$","$1 $2$3 ");  str=str.replaceAll("([\\[\\](){}<>])"," $1 ");  str=str.replaceAll("--"," -- ");  str=str.replaceAll("$"," ");  str=str.replaceAll("^"," ");  str=str.replaceAll("([^'])' ","$1 ' ");  str=str.replaceAll("'([sSmMdD]) "," '$1 ");  str=str.replaceAll("'ll "," 'll ");  str=str.replaceAll("'re "," 're ");  str=str.replaceAll("'ve "," 've ");  str=str.replaceAll("n't "," n't ");  str=str.replaceAll("'LL "," 'LL ");  str=str.replaceAll("'RE "," 'RE ");  str=str.replaceAll("'VE "," 'VE ");  str=str.replaceAll("N'T "," N'T ");  str=str.replaceAll(" ([Cc])annot "," $1an not ");  str=str.replaceAll(" ([Dd])'ye "," $1' ye ");  str=str.replaceAll(" ([Gg])imme "," $1im me ");  str=str.replaceAll(" ([Gg])onna "," $1on na ");  str=str.replaceAll(" ([Gg])otta "," $1ot ta ");  str=str.replaceAll(" ([Ll])emme "," $1em me ");  str=str.replaceAll(" ([Mm])ore'n "," $1ore 'n ");  str=str.replaceAll(" '([Tt])is "," $1 is ");  str=str.replaceAll(" '([Tt])was "," $1 was ");  str=str.replaceAll(" ([Ww])anna "," $1an na ");  str=str.replaceAll(" ([A-Z])\\. "," $1 . ");  str=str.replaceAll(",([^0-9])",", $1");  str=str.replaceAll("'([^'])","' $1");  str=str.replaceAll("([^\\xBB])(\\xBB)","$1 $2");  str=str.replaceAll("(\\u201C)([^'])","$1 $2");  str=str.replaceAll("([^'])(\\u201D)","$1 $2");  str=str.replaceAll("\\,([^0-9])","\\, $1");  str=str.replaceAll("([^\\s]),([\\s])","$1 , $2");  str=str.replaceAll("([^\\s:/0-9])/([^\\s:/0-9])","$1 / $2");  str=str.replaceAll("([^\\s0-9]+)-"," $1 -");  str=str.replaceAll("-([^\\s0-9]+)","- $1");  str=str.replaceAll("([^\\s]):([\\s])","$1 : $2");  str=str.replaceAll("([^\\s]):([^0-9]+)","$1 : $2");  str=str.replaceAll("([^0-9]+):([^\\s])","$1 : $2");  str=str.replaceAll(" -([^\\s]+)"," - $1");  str=str.replaceAll("|","");  str=str.replaceAll("[\u2026\u201C\u201D]","");  str=str.replaceAll("([^\\p{L}0-9\\.\\,:\\-/])"," $1 ");  str=str.replaceAll("[ \t]+"," ");  str=str.replaceAll("^\\s+","");  str=str.replaceAll("\\. \\.\\."," ... ");  str=str.trim();  return str;}  }
class C{  private void saveDynamicActions(FacesContext context,StateContext stateContext,UIViewRoot viewRoot){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletFullStateManagementStrategy.saveDynamicActions");  }  List<ComponentStruct> actions=stateContext.getDynamicActions();  HashMap<String,UIComponent> componentMap=stateContext.getDynamicComponents();  if (actions != null) {    List<Object> savedActions=new ArrayList<>(actions.size());    for (    ComponentStruct action : actions) {      UIComponent component=componentMap.get(action.clientId);      if (component == null && context.isProjectStage(ProjectStage.Development)) {        LOGGER.log(Level.WARNING,"Unable to save dynamic action with clientId ''{0}'' because the UIComponent cannot be found",action.clientId);      }      if (component != null) {        savedActions.add(action.saveState(context));      }    }    viewRoot.getAttributes().put(DYNAMIC_ACTIONS,savedActions);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public LegendTitle(LegendItemSource source){  this(source,new FlowArrangement(),new ColumnArrangement());}  }
class C{  public void exportAsDrag(JComponent comp,InputEvent e,int action){  int srcActions=getSourceActions(comp);  int dragAction=srcActions & action;  if (!(e instanceof MouseEvent))   dragAction=NONE;  if (dragAction != NONE && !GraphicsEnvironment.isHeadless()) {    if (recognizer == null)     recognizer=new TriggerableDragGestureRecognizer(new BasicDragGestureListener());    recognizer.trigger(comp,(MouseEvent)e,srcActions,dragAction);  } else {    exportDone(comp,null,NONE);  }}  }
class C{  public AuthTimeWithHash(String client,String server,int ctime,int cusec,String hash){  super(client,server,ctime,cusec);  this.hash=hash;}  }
class C{  public AmenityReader(String file,CoordinateTransformation ct,Map<String,String> osmToMatsimTypeMap){  log.info("Creating amenity reader");  this.ct=ct;  this.osmToMatsimTypeMap=osmToMatsimTypeMap;  this.amenities=FacilitiesUtils.createActivityFacilities("OpenStreetMap amenities");  this.amenityAttributes=new ObjectAttributes();}  }
class C{  public TraceGraph(Collection<Span> spans){  this.spansByParent=new SpansByParent(spans);  this.spansByTracerId=new SpansByTracerId(spans);}  }
class C{  @Override public boolean isPrepared(){  return !dirty && (agent == null || !agent.isDone());}  }
class C{  public Bundler putChar(String key,char value){  bundle.putChar(key,value);  return this;}  }
class C{  public static void closeQuietly(AutoCloseable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  @Override public void updateLong(int columnIndex,long x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateLong(" + columnIndex + ", "+ x+ "L);");    }    update(columnIndex,ValueLong.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void andAction(NodeRepresentation nodeRep){  if (nodeRep.parentVector == null) {    makeProof(nodeRep,true,false);  } else {    int idx=nodeRep.getParentIndex();    Decomposition decomp=nodeRep.decomposition;    hasChanged=true;    if (decomp.definedOp != null) {      assumpDefinitions.add(decomp.definedOp);    }    Vector<SemanticNode> addedAssumps=decomp.children;    Vector<NodeRepresentation> addedToAssumeReps=new Vector<NodeRepresentation>();    for (int i=0; i < addedAssumps.size(); i++) {      NodeRepresentation rep=decompositionChildToNodeRep(nodeRep,i,this.assumeReps,null);      rep.isCreated=true;      addedToAssumeReps.add(rep);    }    this.assumeReps.remove(idx);    for (int i=0; i < addedToAssumeReps.size(); i++) {      this.assumeReps.add(idx + i,addedToAssumeReps.elementAt(i));    }    if (andSplitBegin == -1) {      andSplitBegin=idx;      andSplitEnd=idx + addedAssumps.size() - 1;    } else {      andSplitEnd=andSplitEnd + addedAssumps.size() - 1;    }    raiseWindow();  }}  }
class C{  public PlaceshifterNATManager(){}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.openTickPaint=SerialUtilities.readPaint(stream);  this.closeTickPaint=SerialUtilities.readPaint(stream);}  }
class C{  public ScriptIO(final Script script,final Executor executor){  this.script=script;  this.executor=executor;  if (script != null) {    scriptName=script.getName();  }}  }
class C{  public static String inputStreamToString(InputStream is) throws IOException {  InputStreamReader isr=new InputStreamReader(is);  BufferedReader br=new BufferedReader(isr);  StringWriter sw=new StringWriter();  char c[]=new char[1024];  while (true) {    int n=br.read(c,0,c.length);    if (n < 0)     break;    sw.write(c,0,n);  }  isr.close();  return sw.toString();}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  return new Pair<OperandSize,String>(OperandSize.BYTE,Helpers.OVERFLOW_FLAG);}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  public int doStartTag(){  JspWriter out=pageContext.getOut();  select select=getRequestType();  select.output(out);  return (SKIP_BODY);}  }
class C{  public static Volume prepareEmptyVolume(DbClient dbClient,long size,Project project,VirtualArray varray,VirtualPool vpool,String label,int volNumber,int volumesRequested){  Volume volume=new Volume();  volume.setId(URIUtil.createId(Volume.class));  String volumeLabel=AbstractBlockServiceApiImpl.generateDefaultVolumeLabel(label,volNumber,volumesRequested);  List<Volume> volumeList=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,Volume.class,ContainmentPrefixConstraint.Factory.getFullMatchConstraint(Volume.class,"project",project.getId(),volumeLabel));  if (!volumeList.isEmpty()) {    throw APIException.badRequests.duplicateLabel(volumeLabel);  }  volume.setLabel(volumeLabel);  volume.setCapacity(size);  volume.setThinlyProvisioned(VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType()));  volume.setVirtualPool(vpool.getId());  volume.setProject(new NamedURI(project.getId(),volume.getLabel()));  volume.setTenant(new NamedURI(project.getTenantOrg().getURI(),volume.getLabel()));  volume.setVirtualArray(varray.getId());  volume.setOpStatus(new OpStatusMap());  if (vpool.getDedupCapable() != null) {    volume.setIsDeduplicated(vpool.getDedupCapable());  }  dbClient.createObject(volume);  return volume;}  }
class C{  public static XContentType xContentType(byte[] data){  return xContentType(data,0,data.length);}  }
class C{  @Override public void close() throws IOException {  try {    hashFile.close();  }  finally {    try {      idFile.close();    }  finally {      dataFile.close();    }  }}  }
class C{  public Composer coefficientRestitutionX(float coefficientRestitutionX){  mCoefficientRestitutionX=coefficientRestitutionX;  return this;}  }
class C{  protected RegionAttributes createRegionAttributesForPR(int redundancy,int localMaxMem){  AttributesFactory attr=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  PartitionAttributes prAttr=paf.setRedundantCopies(redundancy).setLocalMaxMemory(localMaxMem).setTotalNumBuckets(totalNumBuckets).create();  attr.setPartitionAttributes(prAttr);  return attr.create();}  }
class C{  public StrBuilder replaceFirst(final StrMatcher matcher,final String replaceStr){  return replace(matcher,replaceStr,0,size,1);}  }
class C{  public static String date(String dateTime){  if (dateTime == null) {    return null;  }  int index=dateTime.indexOf(' ');  if (index != -1) {    return dateTime.substring(0,index);  }  return dateTime;}  }
class C{  public static int count(Iterator tuples,String field){  int i=0;  for (; tuples.hasNext(); ++i, tuples.next())   ;  return i;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasPrevModifiedTime(){  return fieldSetFlags()[7];}  }
class C{  public static String createResourceMatchString(final IResource resource){  String matchPath=resource.getProjectRelativePath().toString();  if (matchPath.startsWith("/") == false) {    matchPath="/" + matchPath;  }  if ((resource.getType() == IResource.FOLDER || resource.getType() == IResource.PROJECT) && matchPath.endsWith("/") == false) {    matchPath=matchPath + "/";  }  return matchPath;}  }
class C{  private void loadSimulatedNormalData() throws Exception {  setLowestMeasuredPercentile(1.0);  setSampleCount(sentinelA,1000);  setSampleCount(sentinelB,1000);  setSampleCount(sentinelC,1000);  setSampleCount(sentinelD,1000);  setSampleCount(sentinelE,1000);  when(mbeanServer.getAttribute(sentinelA,"50thPercentile")).thenReturn(1.0);  when(mbeanServer.getAttribute(sentinelB,"75thPercentile")).thenReturn(1.0);  when(mbeanServer.getAttribute(sentinelC,"75thPercentile")).thenReturn(1.0);  when(mbeanServer.getAttribute(sentinelD,"75thPercentile")).thenReturn(1.0);  when(mbeanServer.getAttribute(sentinelE,"75thPercentile")).thenReturn(1.0);  when(mbeanServer.isRegistered(sentinelA)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelB)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelC)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelD)).thenReturn(Boolean.TRUE);  when(mbeanServer.isRegistered(sentinelE)).thenReturn(Boolean.TRUE);  System.out.println("Start manual evaluation ...");  qosHandler.evaluateQoSActions();}  }
class C{  private String xtoTitleString(DoubleMatrix3D matrix,String[] sliceNames,String[] rowNames,String[] columnNames,String sliceAxisName,String rowAxisName,String columnAxisName,String title){  if (matrix.size() == 0)   return "Empty matrix";  StringBuffer buf=new StringBuffer();  for (int i=0; i < matrix.slices(); i++) {    if (i != 0)     buf.append(sliceSeparator);    buf.append(toTitleString(matrix.viewSlice(i),rowNames,columnNames,rowAxisName,columnAxisName,title + "\n" + sliceAxisName+ "="+ sliceNames[i]));  }  return buf.toString();}  }
class C{  public void foldToASCII(char[] input,int length){  final int maxSizeNeeded=4 * length;  if (output.length < maxSizeNeeded) {    output=new char[ArrayUtil.oversize(maxSizeNeeded,Character.BYTES)];  }  outputPos=foldToASCII(input,0,output,0,length);  if (preserveOriginal && needToPreserve(input,length)) {    state=captureState();  }}  }
class C{  OutputStream writeChannel(int channel) throws IOException {  while (os != null) {    boolean canWrite=false;synchronized (WRITE_LOCK) {      if (!isWriteLocked) {        isWriteLocked=true;        canWrite=true;      } else {        try {          WRITE_LOCK.wait(5000);        } catch (        Exception e) {        }      }    }    if (canWrite) {      os.write('C');      os.write(channel >> 8);      os.write(channel);      return os;    }  }  return null;}  }
class C{  private double[][] xPrime(int t){  double[][] x=new double[1][getNumLags() * numVars];  for (int i=0; i < getNumLags(); i++) {    double[][] yPrime=yPrime(t - i - 1);    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);  }  return x;}  }
class C{  public void add(final FieldDescriptor type,final Message defaultInstance){  if (type.getJavaType() != FieldDescriptor.JavaType.MESSAGE) {    throw new IllegalArgumentException("ExtensionRegistry.add() provided a default instance for a " + "non-message extension.");  }  add(new ExtensionInfo(type,defaultInstance),Extension.ExtensionType.IMMUTABLE);}  }
class C{  public SVGOMStopElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public final double relativeAbsoluteError() throws Exception {  if (m_NoPriors) {    return Double.NaN;  }  return 100 * meanAbsoluteError() / meanPriorAbsoluteError();}  }
class C{  public static void combinedLoadBarrier(){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }}  }
class C{  @Override public void onSelectionChanged(TimePeriodSlider slider,int value){  DurationFieldType fieldType=mConversion.get(slider.getDateType());  mPeriod=mPeriod.withField(fieldType,value);  updatePeriod();}  }
class C{  public int capacity(){  return value.length;}  }
class C{  String destinationFilePath(){  return destinationFilePath;}  }
class C{  public void addURL(URL url){  if (!Arrays.asList(getURLs()).contains(url))   super.addURL(url);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  protected void additionalContext(VelocityContext context,String env){}  }
class C{  public ResourceException(String msg){  super(msg);}  }
class C{  public static org.oscm.vo.VOPricedEvent convertToApi(org.oscm.internal.vo.VOPricedEvent oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPricedEvent newVO=new org.oscm.vo.VOPricedEvent();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setSteppedPrices(convertToApiVOSteppedPrice(oldVO.getSteppedPrices()));  newVO.setEventDefinition(convertToApi(oldVO.getEventDefinition()));  newVO.setEventPrice(oldVO.getEventPrice());  return newVO;}  }
class C{  public ParameterizationBuilder(){  this(new LinkedList<Parameterization>());}  }
class C{  public static boolean canReplacePart(World world,BlockPos pos,IMultipart oldPart,IMultipart newPart){  IMultipartContainer container=getPartContainer(world,pos);  if (container == null)   return false;  return container.canReplacePart(oldPart,newPart);}  }
class C{  public boolean hasFromTag(){  return hasParameter(ParameterNames.FROM_TAG);}  }
class C{  @Override public void relocate(){  int w=360, h=245;  int x=(this.getWidth() - w) / 2;  int y=(this.getHeight() - h) / 2;  outputLabel.setLocation(x,y);  outputPathField.setLocation(x + 160,y);  enableZipEncodingCompression.setLocation(x + 110,y + 40);  outputCompression.setLocation(x + 110,y + 75);  disableOutputCompression.setLocation(x + 110,y + 100);  enableBZip2OutputCompression.setLocation(x + 110,y + 120);  enable7ZipOutputCompression.setLocation(x + 110,y + 140);  activateDataFileOutput.setLocation(x + 110,y + 160);  enableMultipleOutputFiles.setLocation(x,y + 190);  outputSizeLimitLabel.setLocation(x,y + 220);  outputSizeLimitField.setLocation(x + 160,y + 220);}  }
class C{  public SynchronousLoginInteractor(){}  }
class C{  public static byte[] xor(byte[] x1,byte[] x2){  byte[] out=new byte[x1.length];  for (int i=x1.length - 1; i >= 0; i--) {    out[i]=(byte)(x1[i] ^ x2[i]);  }  return out;}  }
class C{  public int position(){  return data.position();}  }
class C{  synchronized void start(){  running=true;  if (!dataPump.hasCachedTempo()) {    long tickPos=getTickPosition();    dataPump.setTempoMPQ(tempoCache.getTempoMPQAt(tickPos));  }  dataPump.checkPointMillis=0;  dataPump.clearNoteOnCache();  dataPump.needReindex=true;  dataPump.resetLoopCount();synchronized (lock) {    lock.notifyAll();  }  if (Printer.debug)   Printer.debug(" ->Started MIDI play thread");}  }
class C{  private void inqueueStubActivity(ActivityInfo ai,String realActivityClazz){  if (ai.launchMode == ActivityInfo.LAUNCH_MULTIPLE)   return;  if (mStubQueue == null)   return;  int countForMode=STUB_ACTIVITIES_COUNT;  int offset=(ai.launchMode - 1) * countForMode;  for (int i=0; i < countForMode; i++) {    String stubClazz=mStubQueue[i + offset];    if (stubClazz != null && stubClazz.equals(realActivityClazz)) {      mStubQueue[i + offset]=null;      break;    }  }}  }
class C{  public ImmutableListMultimap<String,String> parameters(){  return parameters;}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public HorizontalLineDrawable(Resources res,int color,float lineWidthDp){  DisplayMetrics metrics=res.getDisplayMetrics();  mState=new HorizontalLineConstantState(metrics,color,lineWidthDp,0f);  float lineWidth=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,lineWidthDp,metrics);  mPaint=initPaint(color,lineWidth);}  }
class C{  public static int[][] rankMatrix(List<EvaluationStatistics> stats,String measurement){  double V[][]=valueMatrix(stats,measurement);  int N=V.length;  int k=V[0].length;  int R[][]=new int[N][k];  for (int i=0; i < N; i++) {    int indices[]=Utils.sort(V[i]);    for (int j=0; j < k; j++) {      R[i][indices[j]]=(j + 1);    }  }  return R;}  }
class C{  public static void disconnect(Context context,ServiceConnection connection){  context.unbindService(connection);}  }
class C{  public static XPath2FilterContainer04 newInstanceSubtract(Document doc,String xpath2filter){  return new XPath2FilterContainer04(doc,xpath2filter,XPath2FilterContainer04._ATT_FILTER_VALUE_SUBTRACT);}  }
class C{  public void step(SimState state){}  }
class C{  public DebugCommand(final int type,final int packetId){  this.arguments=new ArrayList<>();  this.type=type;  this.packetId=packetId;}  }
class C{  public void reset(){  isFilling=false;  isCompleted=false;}  }
class C{  public static PaymentSession parsePaymentRequest(Protos.PaymentRequest paymentRequest) throws PaymentProtocolException {  return new PaymentSession(paymentRequest,false,null);}  }
class C{  public RestoreAction(){  super(UIManager.getString("BETitlePane.restoreButtonText",getLocale()));}  }
class C{  public DNetscapeSslServerName(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeSslServerName.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  boolean isNameUsed(String name){  List<Integer> columnsWithName=columnNames.get(name);  return columnsWithName != null && !columnsWithName.isEmpty();}  }
class C{  private Chunk invokeViewMethod(final View rootView,final View targetView,ByteBuffer in){  int l=in.getInt();  String methodName=getString(in,l);  Class<?>[] argTypes;  Object[] args;  if (!in.hasRemaining()) {    argTypes=new Class<?>[0];    args=new Object[0];  } else {    int nArgs=in.getInt();    argTypes=new Class<?>[nArgs];    args=new Object[nArgs];    for (int i=0; i < nArgs; i++) {      char c=in.getChar();switch (c) {case 'Z':        argTypes[i]=boolean.class;      args[i]=in.get() == 0 ? false : true;    break;case 'B':  argTypes[i]=byte.class;args[i]=in.get();break;case 'C':argTypes[i]=char.class;args[i]=in.getChar();break;case 'S':argTypes[i]=short.class;args[i]=in.getShort();break;case 'I':argTypes[i]=int.class;args[i]=in.getInt();break;case 'J':argTypes[i]=long.class;args[i]=in.getLong();break;case 'F':argTypes[i]=float.class;args[i]=in.getFloat();break;case 'D':argTypes[i]=double.class;args[i]=in.getDouble();break;default :Log.e(TAG,"arg " + i + ", unrecognized type: "+ c);return createFailChunk(ERR_INVALID_PARAM,"Unsupported parameter type (" + c + ") to invoke view method.");}}}Method method=null;try {method=targetView.getClass().getMethod(methodName,argTypes);} catch (NoSuchMethodException e) {Log.e(TAG,"No such method: " + e.getMessage());return createFailChunk(ERR_INVALID_PARAM,"No such method: " + e.getMessage());}try {ViewDebug.invokeViewMethod(targetView,method,args);} catch (Exception e) {Log.e(TAG,"Exception while invoking method: " + e.getCause().getMessage());String msg=e.getCause().getMessage();if (msg == null) {msg=e.getCause().toString();}return createFailChunk(ERR_EXCEPTION,msg);}return null;}  }
class C{  public Employee(String name,int age,int empId,String title,int salary,Set addresses){  this.name=name;  this.age=age;  this.empId=empId;  this.title=title;  this.salary=salary;  this.addresses=addresses;  this.phoneNo=new PhoneNo(111,222,333,444);}  }
class C{  public boolean intersects(Geometry geom){  boolean isInPrepGeomArea=isAnyTestComponentInTarget(geom);  if (isInPrepGeomArea)   return true;  if (geom.getDimension() == 0)   return false;  List lineSegStr=SegmentStringUtil.extractSegmentStrings(geom);  if (lineSegStr.size() > 0) {    boolean segsIntersect=prepPoly.getIntersectionFinder().intersects(lineSegStr);    if (segsIntersect)     return true;  }  if (geom.getDimension() == 2) {    boolean isPrepGeomInArea=isAnyTargetComponentInAreaTest(geom,prepPoly.getRepresentativePoints());    if (isPrepGeomInArea)     return true;  }  return false;}  }
class C{  private NaviLogger(){}  }
class C{  @Override public int compare(T a,T b) throws ClassCastException {  Double cla=Double.valueOf(a.getCloudletTotalLength());  Double clb=Double.valueOf(b.getCloudletTotalLength());  return cla.compareTo(clb);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public boolean hasTargetOffset(){  return hasAddress() && target.hasAddress();}  }
class C{  public StoredFluidStack addFluids(StoredFluidStack add,INetworkCache network,ActionType action){  return add;}  }
class C{  public final DD selfSubtract(DD y){  if (isNaN())   return this;  return selfAdd(-y.hi,-y.lo);}  }
class C{  private void updateVolumeRpJournalRefs(){  log.info("updateVolumeRpJournalRefs - Deprecated.");}  }
class C{  public static final Parameter base(){  return GPDefaults.base().push(P_BREED);}  }
class C{  private void becomeCoordinator(InternalDistributedMember oldCoordinator){  assert Thread.holdsLock(viewInstallationLock);  if (isCoordinator) {    return;  }  logger.info("This member is becoming the membership coordinator with address {}",localAddress);  isCoordinator=true;  if (currentView == null) {    NetView newView=new NetView(this.localAddress);    newView.setFailureDetectionPort(localAddress,services.getHealthMonitor().getFailureDetectionPort());    this.localAddress.setVmViewId(0);    installView(newView);    isJoined=true;    createAndStartViewCreator(newView);    startViewBroadcaster();  } else {    NetView newView=addMemberToNetView(oldCoordinator);    createAndStartViewCreator(newView);    startViewBroadcaster();  }}  }
class C{  protected Vertex createInput(String text,Network network){  Vertex sentence=network.createSentence(text);  Vertex input=network.createInstance(Primitive.INPUT);  input.setName(text);  input.addRelationship(Primitive.SENSE,getPrimitive());  input.addRelationship(Primitive.INPUT,sentence);  sentence.addRelationship(Primitive.INSTANTIATION,Primitive.TWEET);  return input;}  }
class C{  private int primaryKey0(Ignite ignite,IgniteCache cache) throws Exception {  ClusterNode locNode=ignite.cluster().localNode();  for (int i=0; i < Integer.MAX_VALUE; i++) {    if (affinity(cache).isPrimary(locNode,i))     return i;  }  throw new Exception("Cannot determine affinity key.");}  }
class C{  public ThumbnailParameterBuilder keepAspectRatio(boolean keep){  this.keepAspectRatio=keep;  return this;}  }
class C{  public void enableCurlLogging(String name,int level){  if (name == null) {    throw new NullPointerException("name");  }  if (level < Log.VERBOSE || level > Log.ASSERT) {    throw new IllegalArgumentException("Level is out of range [" + Log.VERBOSE + ".."+ Log.ASSERT+ "]");  }  curlConfiguration=new LoggingConfiguration(name,level);}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TYPE:    return isSetType();case HELLO:  return isSetHello();case ERROR:return isSetError();case ECHO_REQUEST:return isSetEchoRequest();case ECHO_REPLY:return isSetEchoReply();case GET_REQUEST:return isSetGetRequest();case GET_RESPONSE:return isSetGetResponse();case PUT_REQUEST:return isSetPutRequest();case PUT_RESPONSE:return isSetPutResponse();case DELETE_REQUEST:return isSetDeleteRequest();case DELETE_RESPONSE:return isSetDeleteResponse();case SYNC_VALUE:return isSetSyncValue();case SYNC_VALUE_RESPONSE:return isSetSyncValueResponse();case SYNC_OFFER:return isSetSyncOffer();case SYNC_REQUEST:return isSetSyncRequest();case FULL_SYNC_REQUEST:return isSetFullSyncRequest();case CURSOR_REQUEST:return isSetCursorRequest();case CURSOR_RESPONSE:return isSetCursorResponse();case REGISTER_REQUEST:return isSetRegisterRequest();case REGISTER_RESPONSE:return isSetRegisterResponse();case CLUSTER_JOIN_REQUEST:return isSetClusterJoinRequest();case CLUSTER_JOIN_RESPONSE:return isSetClusterJoinResponse();}throw new IllegalStateException();}  }
class C{  private static int correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures != null && erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  return errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  public static boolean isNumber(String str){  try {    Integer.parseInt(str);    return true;  } catch (  NumberFormatException e) {    return false;  }}  }
class C{  @Override public void onModuleLoad(){  IDEInjector injector=GWT.create(IDEInjector.class);  @SuppressWarnings("unused") BootstrapController bootstrap=injector.getBootstrapController();}  }
class C{  @Override public List<String> sort(final String key){  checkIsInMultiOrPipeline();  client.sort(key);  return client.getMultiBulkReply();}  }
class C{  public void testTaskAsync() throws Exception {  U.sleep(3000);  assertFalse(igfs.isAsync());  IgniteFileSystem igfsAsync=igfs.withAsync();  assertTrue(igfsAsync.isAsync());  for (int i=0; i < REPEAT_CNT; i++) {    String arg=DICTIONARY[new Random(System.currentTimeMillis()).nextInt(DICTIONARY.length)];    generateFile(TOTAL_WORDS);    Long genLen=igfs.info(FILE).length();    assertNull(igfsAsync.execute(new Task(),new IgfsStringDelimiterRecordResolver(" "),Collections.singleton(FILE),arg));    IgniteFuture<IgniteBiTuple<Long,Integer>> fut=igfsAsync.future();    assertNotNull(fut);    IgniteBiTuple<Long,Integer> taskRes=fut.get();    assert F.eq(genLen,taskRes.getKey());    assert F.eq(TOTAL_WORDS,taskRes.getValue());  }  igfsAsync.format();  IgniteFuture<?> fut=igfsAsync.future();  assertNotNull(fut);  fut.get();}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public static PartialCorrelationPdf serializableInstance(){  return new PartialCorrelationPdf(5,2);}  }
class C{  protected boolean isOutgoingDiscoveryAllowed(DatapathId sw,OFPort port,boolean isStandard,boolean isReverse){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.LOCAL)   return false;  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",sw.toString(),port.getPortNumber());    }    return false;  } else {    return true;  }}  }
class C{  public static int uriType(String uri){  if (uri.indexOf(':') != -1) {    return ABS_URI;  } else   if (uri.startsWith("/")) {    return ROOT_REL_URI;  } else {    return NOROOT_REL_URI;  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.test();}  }
class C{  public GcsPath(@Nullable FileSystem fs,@Nullable String bucket,@Nullable String object){  if (bucket == null) {    bucket="";  }  checkArgument(!bucket.contains("/"),"GCS bucket may not contain a slash");  checkArgument(bucket.isEmpty() || bucket.matches("[a-z0-9][-_a-z0-9.]+[a-z0-9]"),"GCS bucket names must contain only lowercase letters, numbers, " + "dashes (-), underscores (_), and dots (.). Bucket names " + "must start and end with a number or letter. "+ "See https://developers.google.com/storage/docs/bucketnaming "+ "for more details.  Bucket name: "+ bucket);  if (object == null) {    object="";  }  checkArgument(object.indexOf('\n') < 0 && object.indexOf('\r') < 0,"GCS object names must not contain Carriage Return or " + "Line Feed characters.");  this.fs=fs;  this.bucket=bucket;  this.object=object;}  }
class C{  public void fetch(){  throw new UnsupportedOperationException("Required method instantiateItem was not overridden");}  }
class C{  public void add(RecyclerDivider header){  this.myAppHeader=header;  notifyBinderDataSetChanged();}  }
class C{  public <R>void visit(String key,Visitor<T,R> visitor){  if (root != null) {    visit(key,visitor,null,root);  }}  }
class C{  public double angle(){  return rect.angle;}  }
class C{  private static byte[] unwrapCalculatedValue(byte[] data){  if (data.length < CALC_DATA_OFFSET) {    return data;  }  ByteBuffer buffer=PageChannel.wrap(data);  buffer.position(CALC_DATA_LEN_OFFSET);  int dataLen=buffer.getInt();  byte[] newData=new byte[Math.min(buffer.remaining(),dataLen)];  buffer.get(newData);  return newData;}  }
class C{  void mousePressedInTrack(final MouseEvent e,final Hit part){  fScrollBar.setValueIsAdjusting(true);  boolean shouldScrollToHere=(part != ScrollBarHit.THUMB) && JRSUIUtils.ScrollBar.useScrollToClick();  if (e.isAltDown())   shouldScrollToHere=!shouldScrollToHere;  if (shouldScrollToHere) {    final Point p=getScrollToHereStartPoint(e.getX(),e.getY());    fFirstMouseX=p.x;    fFirstMouseY=p.y;    fFirstValue=fScrollBar.getValue();    moveToMouse(e);    fTrackHighlight=ScrollBarHit.THUMB;    fIsDragging=true;    return;  }  fCurrentMouseX=e.getX();  fCurrentMouseY=e.getY();  int direction=0;  if (part == ScrollBarHit.TRACK_MIN) {    fTrackHighlight=ScrollBarHit.TRACK_MIN;    direction=-1;  } else   if (part == ScrollBarHit.TRACK_MAX) {    fTrackHighlight=ScrollBarHit.TRACK_MAX;    direction=1;  } else {    fFirstValue=fScrollBar.getValue();    fFirstMouseX=fCurrentMouseX;    fFirstMouseY=fCurrentMouseY;    fTrackHighlight=ScrollBarHit.THUMB;    fIsDragging=true;    return;  }  fIsDragging=false;  fStillInTrack=true;  scrollByBlock(direction);  final Hit newPart=getPartHit(fCurrentMouseX,fCurrentMouseY);  if (newPart == ScrollBarHit.TRACK_MIN || newPart == ScrollBarHit.TRACK_MAX) {    fScrollTimer.stop();    fScrollListener.setDirection(((newPart == ScrollBarHit.TRACK_MAX) ? 1 : -1));    fScrollListener.setScrollByBlock(true);    startTimer(true);  }}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public AbstractInternalTransition(State<S,E> source,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger,SecurityRule securityRule){  super(source,source,actions,event,TransitionKind.INTERNAL,guard,trigger,securityRule);}  }
class C{  public static void jsonPayloadCompare(String expectedJsonPayload,String realPayload,boolean mustMatch){  JsonElement jsonElement=new JsonParser().parse(expectedJsonPayload);  JsonObject expectedPayloadObject=jsonElement.getAsJsonObject();  jsonElement=new JsonParser().parse(realPayload);  JsonObject realPayloadObject=jsonElement.getAsJsonObject();  if (mustMatch) {    Assert.assertTrue(realPayloadObject.equals(expectedPayloadObject));  } else {    Assert.assertFalse(realPayloadObject.equals(expectedPayloadObject));  }}  }
class C{  public static void save(final String path,final byte[] data){  if (!TextUtils.isEmpty(path) && data != null && data.length > 0) {    FileOutputStream out=null;    try {      File destFile=createFile(path);      out=new FileOutputStream(destFile);      out.write(data);    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    } finally {      try {        if (out != null) {          out.flush();          out.close();        }      } catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  public String resolveTemplate(ITemplateType templateType,Map<String,String> replacements) throws IOException {  Path path=getTemplatePath(templateType);  String template=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);  return insertProperties(template,replacements);}  }
class C{  public static int uninstallSilent(Context context,String packageName,boolean isKeepData){  if (packageName == null || packageName.length() == 0) {    return DELETE_FAILED_INVALID_PACKAGE;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm uninstall").append(isKeepData ? " -k " : " ").append(packageName.replace(" ","\\ "));  ShellUtils.CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return DELETE_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("uninstallSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return DELETE_FAILED_INTERNAL_ERROR;  }  if (commandResult.errorMsg.contains("Permission denied")) {    return DELETE_FAILED_PERMISSION_DENIED;  }  return DELETE_FAILED_INTERNAL_ERROR;}  }
class C{  public ArrestWarrantList(final StendhalRPZone zone){  super(zone,ArrestWarrant.class);}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  protected static LocaleData lookupLocaleData(String code){  LocaleData localeData=locales.get(code);  if (localeData == null) {    String[] data=decodeLocaleCode(code);    localeData=new LocaleData(new Locale(data[0],data[1],data[2]));    locales.put(code,localeData);  }  return localeData;}  }
class C{  public Period toPeriodFrom(ReadableInstant startInstant,PeriodType type){  return new Period(startInstant,this,type);}  }
class C{  public boolean bound(){  return bound;}  }
class C{  public JSONObject(Map<String,Object> map){  this.map=new HashMap<String,Object>();  if (map != null) {    Iterator<Entry<String,Object>> i=map.entrySet().iterator();    while (i.hasNext()) {      Entry<String,Object> entry=i.next();      Object value=entry.getValue();      if (value != null) {        this.map.put(entry.getKey(),wrap(value));      }    }  }}  }
class C{  private void populateDatabase(String username){  Group defaultPublicGroup=Group.getDefaultGroup();  DatabaseFactory.getGroupDatabase(this).insertGroup(defaultPublicGroup);  Contact marlinski=new Contact(RUMBLE_AUTHOR_NAME,"/Marlinski/=",false);  DatabaseFactory.getContactDatabase(this).insertOrUpdateContact(marlinski);  long contactDBID=DatabaseFactory.getContactDatabase(this).getContactDBID(marlinski.getUid());  long groupDBID=DatabaseFactory.getGroupDatabase(this).getGroupDBID(defaultPublicGroup.getGid());  DatabaseFactory.getContactJoinGroupDatabase(this).insertContactGroup(contactDBID,groupDBID);  long time=System.currentTimeMillis();  PushStatus message4=new PushStatus(marlinski,defaultPublicGroup,getResources().getString(R.string.swipe_down),time,marlinski.getUid());  message4.setTimeOfExpiration(0);  DatabaseFactory.getPushStatusDatabase(this).insertStatus(message4);  time=System.currentTimeMillis();  PushStatus message3=new PushStatus(marlinski,defaultPublicGroup,getResources().getString(R.string.swipe_right),time,marlinski.getUid());  message3.setTimeOfExpiration(0);  DatabaseFactory.getPushStatusDatabase(this).insertStatus(message3);  time=System.currentTimeMillis();  PushStatus message2=new PushStatus(marlinski,defaultPublicGroup,getResources().getString(R.string.swipe_left),time,marlinski.getUid());  message2.setTimeOfExpiration(0);  DatabaseFactory.getPushStatusDatabase(this).insertStatus(message2);  time=System.currentTimeMillis();  PushStatus message1=new PushStatus(marlinski,defaultPublicGroup,getResources().getString(R.string.welcome_notice),time,marlinski.getUid());  message1.setTimeOfExpiration(0);  DatabaseFactory.getPushStatusDatabase(this).insertStatus(message1);  time=System.currentTimeMillis();  ChatMessage message5=new ChatMessage(marlinski,getResources().getString(R.string.chat_message_tuto),time,time,RumbleProtocol.protocolID);  DatabaseFactory.getChatMessageDatabase(this).insertMessage(message5);  Contact localContact=Contact.createLocalContact(username);  DatabaseFactory.getContactDatabase(this).insertOrUpdateContact(localContact);  contactDBID=DatabaseFactory.getContactDatabase(this).getContactDBID(localContact.getUid());  groupDBID=DatabaseFactory.getGroupDatabase(this).getGroupDBID(defaultPublicGroup.getGid());  DatabaseFactory.getContactJoinGroupDatabase(this).insertContactGroup(contactDBID,groupDBID);}  }
class C{  public synchronized void accept() throws IOException {  if (_acceptable) {    _acceptable=false;    int[] ip=_bot.longToIp(_address);    String ipStr=ip[0] + "." + ip[1]+ "."+ ip[2]+ "."+ ip[3];    _socket=new Socket(ipStr,_port);    _reader=new BufferedReader(new InputStreamReader(_socket.getInputStream()));    _writer=new BufferedWriter(new OutputStreamWriter(_socket.getOutputStream()));  }}  }
class C{  public boolean isDescending(){  return isDescending;}  }
class C{  public Query limit(int limit,int offset){  return limit(limit < 0 ? NO_LIMIT : Field.<Integer>field(Integer.toString(limit)),offset < 1 ? NO_OFFSET : Field.<Integer>field(Integer.toString(offset)));}  }
class C{  private Follower createFollowerItem(String stream,String name,String display_name,long time){  if (name == null) {    return null;  }  if (display_name == null || display_name.trim().isEmpty()) {    display_name=name;  }  stream=StringUtil.toLowerCase(stream);  if (!alreadyFollowed.containsKey(stream)) {    alreadyFollowed.put(stream,new HashMap<String,Follower>());  }  Map<String,Follower> entries=alreadyFollowed.get(stream);  Follower existingEntry=entries.get(name);  boolean refollow=false;  boolean newFollow=true;  if (existingEntry != null) {    newFollow=false;    if (existingEntry.time != time) {      refollow=true;    }  }  if (!requested.contains(stream)) {    newFollow=false;  }  Follower newEntry=new Follower(type,name,display_name,time,refollow,newFollow);  if (existingEntry == null) {    alreadyFollowed.get(stream).put(name,newEntry);  }  return newEntry;}  }
class C{  private void removeStaleSpans(){  Iterator<Entry<String,TreeSet<CacheSpan>>> iterator=cachedSpans.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,TreeSet<CacheSpan>> next=iterator.next();    Iterator<CacheSpan> spanIterator=next.getValue().iterator();    boolean isEmpty=true;    while (spanIterator.hasNext()) {      CacheSpan span=spanIterator.next();      if (!span.file.exists()) {        spanIterator.remove();        if (span.isCached) {          totalSpace-=span.length;        }        notifySpanRemoved(span);      } else {        isEmpty=false;      }    }    if (isEmpty) {      iterator.remove();    }  }}  }
class C{  @Override public int read(){  return -1;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.205 -0500",hash_original_method="2785BD3BA93222E8AB5B460FDCCCF9E9",hash_generated_method="3A258E0C2116CB2D762D495F6C5139B6") private static SslError verifyServerDomainAndCertificates(X509Certificate[] chain,String domain,String authType) throws IOException {  X509Certificate currCertificate=chain[0];  if (currCertificate == null) {    throw new IllegalArgumentException("certificate for this site is null");  }  if (!DomainNameValidator.match(currCertificate,domain)) {    if (HttpLog.LOGV) {      HttpLog.v("certificate not for this host: " + domain);    }    return new SslError(SslError.SSL_IDMISMATCH,currCertificate);  }  try {    SSLParametersImpl.getDefaultTrustManager().checkServerTrusted(chain,authType);    return null;  } catch (  CertificateException e) {    if (HttpLog.LOGV) {      HttpLog.v("failed to validate the certificate chain, error: " + e.getMessage());    }    return new SslError(SslError.SSL_UNTRUSTED,currCertificate);  }}  }
class C{  public Finds(){  super("text_information.finds");}  }
class C{  public SuggestWord[][] suggestWordBreaks(Term term,int maxSuggestions,IndexReader ir,SuggestMode suggestMode,BreakSuggestionSortMethod sortMethod) throws IOException {  if (maxSuggestions < 1) {    return new SuggestWord[0][0];  }  if (suggestMode == null) {    suggestMode=SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;  }  if (sortMethod == null) {    sortMethod=BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY;  }  int queueInitialCapacity=maxSuggestions > 10 ? 10 : maxSuggestions;  Comparator<SuggestWordArrayWrapper> queueComparator=sortMethod == BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY ? new LengthThenMaxFreqComparator() : new LengthThenSumFreqComparator();  Queue<SuggestWordArrayWrapper> suggestions=new PriorityQueue<>(queueInitialCapacity,queueComparator);  int origFreq=ir.docFreq(term);  if (origFreq > 0 && suggestMode == SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX) {    return new SuggestWord[0][];  }  int useMinSuggestionFrequency=minSuggestionFrequency;  if (suggestMode == SuggestMode.SUGGEST_MORE_POPULAR) {    useMinSuggestionFrequency=(origFreq == 0 ? 1 : origFreq);  }  generateBreakUpSuggestions(term,ir,1,maxSuggestions,useMinSuggestionFrequency,new SuggestWord[0],suggestions,0,sortMethod);  SuggestWord[][] suggestionArray=new SuggestWord[suggestions.size()][];  for (int i=suggestions.size() - 1; i >= 0; i--) {    suggestionArray[i]=suggestions.remove().suggestWords;  }  return suggestionArray;}  }
class C{  private void parseWidths(PDFObject fontObj) throws IOException {  PDFObject defaultWidthObj=fontObj.getDictRef("DW");  if (defaultWidthObj != null) {    defaultWidth=defaultWidthObj.getIntValue();  }  int entryIdx=0;  int first=0;  int last=0;  PDFObject[] widthArray;  PDFObject widthObj=fontObj.getDictRef("W");  if (widthObj != null) {    widths=new HashMap<Character,Float>();    widthArray=widthObj.getArray();    for (int i=0; i < widthArray.length; i++) {      if (entryIdx == 0) {        first=widthArray[i].getIntValue();      } else       if (entryIdx == 1) {        if (widthArray[i].getType() == PDFObject.ARRAY) {          PDFObject[] entries=widthArray[i].getArray();          for (int c=0; c < entries.length; c++) {            Character key=new Character((char)(c + first));            float value=entries[c].getIntValue();            widths.put(key,new Float(value));          }          entryIdx=-1;        } else {          last=widthArray[i].getIntValue();        }      } else {        int value=widthArray[i].getIntValue();        for (int c=first; c <= last; c++) {          widths.put(new Character((char)c),new Float(value));        }        entryIdx=-1;      }      entryIdx++;    }  }  defaultWidthObj=fontObj.getDictRef("DW2");  if (defaultWidthObj != null) {    defaultWidthVertical=defaultWidthObj.getIntValue();  }  widthObj=fontObj.getDictRef("W2");  if (widthObj != null) {    widthsVertical=new HashMap<Character,Float>();    widthArray=widthObj.getArray();    entryIdx=0;    first=0;    last=0;    for (int i=0; i < widthArray.length; i++) {      if (entryIdx == 0) {        first=widthArray[i].getIntValue();      } else       if (entryIdx == 1) {        if (widthArray[i].getType() == PDFObject.ARRAY) {          PDFObject[] entries=widthArray[i].getArray();          for (int c=0; c < entries.length; c++) {            Character key=new Character((char)(c + first));            float value=entries[c].getIntValue();            widthsVertical.put(key,new Float(value));          }          entryIdx=-1;        } else {          last=widthArray[i].getIntValue();        }      } else {        int value=widthArray[i].getIntValue();        for (int c=first; c <= last; c++) {          widthsVertical.put(new Character((char)c),new Float(value));        }        entryIdx=-1;      }      entryIdx++;    }  }}  }
class C{  @Nullable private File[] listFiles0(IgfsPath path){  File f=fileForPath(path);  if (!f.exists())   throw new IgfsPathNotFoundException("Failed to list files (path not found): " + path); else   return f.listFiles();}  }
class C{  protected void updateElements(MWebProject project,MCStage stage,String trxName){  org.compiere.cm.CacheHandler thisHandler=new org.compiere.cm.CacheHandler(org.compiere.cm.CacheHandler.convertJNPURLToCacheURL(getCtx().getProperty("java.naming.provider.url")),log,getCtx(),get_TrxName());  int[] tableKeys=X_CM_CStage_Element.getAllIDs("CM_CStage_Element","CM_CStage_ID=" + stage.get_ID(),trxName);  if (tableKeys != null && tableKeys.length > 0) {    for (int i=0; i < tableKeys.length; i++) {      X_CM_CStage_Element thisStageElement=new X_CM_CStage_Element(project.getCtx(),tableKeys[i],trxName);      int[] thisContainerElementKeys=X_CM_Container_Element.getAllIDs("CM_Container_Element","CM_Container_ID=" + stage.get_ID() + " AND Name LIKE '"+ thisStageElement.getName()+ "'",trxName);      X_CM_Container_Element thisContainerElement;      if (thisContainerElementKeys != null && thisContainerElementKeys.length > 0) {        thisContainerElement=new X_CM_Container_Element(project.getCtx(),thisContainerElementKeys[0],trxName);      } else {        thisContainerElement=new X_CM_Container_Element(project.getCtx(),0,trxName);      }      thisContainerElement.setCM_Container_ID(stage.get_ID());      X_CM_CStage_Element stageElement=new X_CM_CStage_Element(project.getCtx(),tableKeys[i],trxName);      thisContainerElement.setName(stageElement.getName());      thisContainerElement.setDescription(stageElement.getDescription());      thisContainerElement.setHelp(stageElement.getHelp());      thisContainerElement.setIsActive(stageElement.isActive());      thisContainerElement.setIsValid(stageElement.isValid());      String contentHTML=thisStageElement.getContentHTML();      thisContainerElement.setContentHTML(contentHTML);      thisContainerElement.save(trxName);      thisHandler.cleanContainerElement(thisContainerElement.get_ID());    }  }  tableKeys=X_CM_Container_Element.getAllIDs("CM_Container_Element","CM_Container_ID=" + stage.get_ID(),trxName);  if (tableKeys != null && tableKeys.length > 0) {    for (int i=0; i < tableKeys.length; i++) {      X_CM_Container_Element thisContainerElement=new X_CM_Container_Element(project.getCtx(),tableKeys[i],trxName);      int[] thisCStageElementKeys=X_CM_CStage_Element.getAllIDs("CM_CStage_Element","CM_CStage_ID=" + stage.get_ID() + " AND Name LIKE '"+ thisContainerElement.getName()+ "'",trxName);      if (thisCStageElementKeys == null || thisCStageElementKeys.length < 1) {        thisHandler.cleanContainerElement(thisContainerElement.get_ID());        thisContainerElement.delete(true);      }    }  }}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("rulighttestdata.zip"),"rulight.txt");}  }
class C{  public void openMsrpSession(long timeout) throws NetworkException, PayloadException {  mMsrpSession.getConnection().open(timeout);}  }
class C{  public DisqueReactiveCommandsImpl(DisqueConnection<K,V> connection,RedisCodec<K,V> codec){  this.connection=connection;  this.codec=codec;  commandBuilder=new DisqueCommandBuilder<K,V>(codec);}  }
class C{  public boolean isActive(){  return isActive;}  }
class C{  public V remove(Object key){  int h=hash(key.hashCode());  return segFor(h).remove(key,h,null);}  }
class C{  public boolean isWriteable(MailboxSession session) throws MailboxException {  return aclResolver.isReadWrite(myRights(session),getSharedPermanentFlags(session));}  }
class C{  public void addLayer(Layer layer){  if (allLayers == null) {    addLayer(layer,0);    return;  }  if (!allLayers.contains(layer)) {    allLayers.add(layer);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DateAttributeInfo(String dateFormat){  if (dateFormat != null) {    m_DateFormat=new SimpleDateFormat(dateFormat);  } else {    m_DateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");  }  m_DateFormat.setLenient(false);}  }
class C{  public String readString() throws IOException {  int len=readVarInt();  return readString(len);}  }
class C{  public NameService createNameService() throws Exception {  return new SimpleNameService();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public StringConstant(ConstantPool pool,int index,int stringIndex){  super(pool,index);  _stringIndex=stringIndex;}  }
class C{  public boolean isSetHello(){  return this.hello != null;}  }
class C{  @Override public void onSend(byte[] msg,int offset,int count,long timestamp) throws IOException {  MidiEvent event=createScheduledEvent(msg,offset,count,timestamp);  if (event != null) {    add(event);  }}  }
class C{  public boolean hasIdenticalTaxa(List<AbstractPartitionData> partitionDataList){  TaxonList taxa=null;  for (  AbstractPartitionData partition : partitionDataList) {    if (taxa == null) {      taxa=partition.getTaxonList();    } else {      final TaxonList taxa1=partition.getTaxonList();      if (taxa1 != null) {        if (taxa1.getTaxonCount() != taxa.getTaxonCount()) {          return false;        }        for (int k=0; k < taxa1.getTaxonCount(); ++k) {          if (taxa.getTaxonIndex(taxa1.getTaxonId(k)) == -1) {            return false;          }        }      }    }  }  return true;}  }
class C{  public HandleException(String message,Throwable cause){  super(message,cause);}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  short[][] arrays=new short[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public boolean isStatic(){  return isStatic(opcode);}  }
class C{  public StatusChecker createStatusChecker(Service service,NodeType nodeType){  Preconditions.checkNotNull(service);switch (nodeType) {case KubernetesMaster:case KubernetesSlave:    return new KubernetesStatusChecker(HostUtils.getKubernetesClient(service));case MesosZookeeper:  return new ZookeeperStatusChecker();case MesosMaster:case MesosSlave:return new MesosStatusChecker(HostUtils.getMesosClient(service));case MesosMarathon:return new MarathonStatusChecker(HostUtils.getMesosClient(service));case KubernetesEtcd:case SwarmEtcd:return new EtcdStatusChecker(HostUtils.getEtcdClient(service));case SwarmMaster:case SwarmSlave:return new SwarmStatusChecker(HostUtils.getSwarmClient(service));default :throw new RuntimeException("Unsupported nodeType: " + nodeType.toString());}}  }
class C{  @Override protected final void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_signin);  if (!Constants.SIGN_IN_REQUIRED) {    startMainActivity();    return;  }  if (!checkPlayServices()) {    return;  }  if (isSignedIn()) {    startMainActivity();  } else {    startActivityForResult(credential.newChooseAccountIntent(),REQUEST_ACCOUNT_PICKER);  }}  }
class C{  public boolean isMissingDataNotificationEnabled(){  return missingDataNotificationEnabled;}  }
class C{  protected Object findFilterId(SerializationConfig config,BasicBeanDescription beanDesc){  return config.getAnnotationIntrospector().findFilterId(beanDesc.getClassInfo());}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  initializeDownloadUI();  if (!expansionFilesDelivered()) {    try {      Intent launchIntent=SampleDownloaderActivity.this.getIntent();      Intent intentToLaunchThisActivityFromNotification=new Intent(SampleDownloaderActivity.this,SampleDownloaderActivity.this.getClass());      intentToLaunchThisActivityFromNotification.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);      intentToLaunchThisActivityFromNotification.setAction(launchIntent.getAction());      if (launchIntent.getCategories() != null) {        for (        String category : launchIntent.getCategories()) {          intentToLaunchThisActivityFromNotification.addCategory(category);        }      }      PendingIntent pendingIntent=PendingIntent.getActivity(SampleDownloaderActivity.this,0,intentToLaunchThisActivityFromNotification,PendingIntent.FLAG_UPDATE_CURRENT);      int startResult=DownloaderClientMarshaller.startDownloadServiceIfRequired(this,pendingIntent,SampleDownloaderService.class);      if (startResult != DownloaderClientMarshaller.NO_DOWNLOAD_REQUIRED) {        initializeDownloadUI();        return;      }    } catch (    NameNotFoundException e) {      Log.e(LOG_TAG,"Cannot find own package! MAYDAY!");      e.printStackTrace();    }  } else {    validateXAPKZipFiles();  }}  }
class C{  public static void updateVisible(VisualItem item,boolean val){  item.setStartVisible(item.isVisible());  item.setVisible(val);  item.setEndVisible(val);}  }
class C{  protected int numAutoMoves(){  return autoMoves.size();}  }
class C{  public void runResultHandlers(ResultHierarchy hier,Database db){  for (  ResultHandler resulthandler : resulthandlers) {    Thread.currentThread().setName(resulthandler.toString());    resulthandler.processNewResult(hier,db);  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private static Expression createNarrowCastIfNessecary(Expression expression,ITypeBinding expressionType,AST ast,ITypeBinding variableType,boolean is50OrHigher){  PrimitiveType castTo=null;  if (variableType.isEqualTo(expressionType))   return expression;  if (is50OrHigher) {    if (ast.resolveWellKnownType("java.lang.Character").isEqualTo(variableType))     castTo=ast.newPrimitiveType(PrimitiveType.CHAR);    if (ast.resolveWellKnownType("java.lang.Byte").isEqualTo(variableType))     castTo=ast.newPrimitiveType(PrimitiveType.BYTE);    if (ast.resolveWellKnownType("java.lang.Short").isEqualTo(variableType))     castTo=ast.newPrimitiveType(PrimitiveType.SHORT);  }  if (ast.resolveWellKnownType("char").isEqualTo(variableType))   castTo=ast.newPrimitiveType(PrimitiveType.CHAR);  if (ast.resolveWellKnownType("byte").isEqualTo(variableType))   castTo=ast.newPrimitiveType(PrimitiveType.BYTE);  if (ast.resolveWellKnownType("short").isEqualTo(variableType))   castTo=ast.newPrimitiveType(PrimitiveType.SHORT);  if (castTo != null) {    CastExpression cast=ast.newCastExpression();    if (NecessaryParenthesesChecker.needsParentheses(expression,cast,CastExpression.EXPRESSION_PROPERTY)) {      ParenthesizedExpression parenthesized=ast.newParenthesizedExpression();      parenthesized.setExpression(expression);      cast.setExpression(parenthesized);    } else     cast.setExpression(expression);    cast.setType(castTo);    return cast;  }  return expression;}  }
class C{  public AbstractEvaluatorTest(String name){  super(name);}  }
class C{  void recycleTask(AttachmentTask downloadTask){  downloadTask.recycle();  mPhotoTaskWorkQueue.offer(downloadTask);}  }
class C{  public void waitForCycle(){  lock.lock();  while (contextsParked < contexts.length) {    lock.await();  }  lock.unlock();}  }
class C{  protected CoreContainer(Object testConstructor){  solrHome=null;  loader=null;  coresLocator=null;  cfg=null;}  }
class C{  public static void logArticleProcessed(final Logger logger,final Task<Revision> article,long time){  logger.logMessage(Level.INFO,"Generated Diff\t" + Time.toClock(time) + "\t"+ article.toString());}  }
class C{  public static GreeterBlockingStub newBlockingStub(io.grpc.Channel channel){  return new GreeterBlockingStub(channel);}  }
class C{  Socket checkConnector(AsyncConnector connector) throws IOException {  Exception e=connector.getException();  if (e != null) {    e.fillInStackTrace();    if (e instanceof IOException) {      throw (IOException)e;    } else     if (e instanceof RuntimeException) {      throw (RuntimeException)e;    } else {      throw new Error("internal error: " + "unexpected checked exception: " + e.toString());    }  }  return connector.getSocket();}  }
class C{  public void skipMessage() throws IOException {  while (true) {    final int tag=readTag();    if (tag == 0 || !skipField(tag)) {      return;    }  }}  }
class C{  @Override public void add(CharSequence key,CharSequence cmd){  if (cmd.length() == 0) {    return;  }  CharSequence p[]=decompose(cmd);  int levels=p.length;  while (levels >= tries.size()) {    tries.add(new Trie(forward));  }  CharSequence lastkey=key;  for (int i=0; i < levels; i++) {    if (key.length() > 0) {      tries.get(i).add(key,p[i]);      lastkey=key;    } else {      tries.get(i).add(lastkey,p[i]);    }    if (p[i].length() > 0 && p[i].charAt(0) == '-') {      if (i > 0) {        key=skip(key,lengthPP(p[i - 1]));      }      key=skip(key,lengthPP(p[i]));    }  }  if (key.length() > 0) {    tries.get(levels).add(key,EOM_NODE);  } else {    tries.get(levels).add(lastkey,EOM_NODE);  }}  }
class C{  public ExceptionOccurredSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public Builder serializer(final ISerializer serializer){  mClient.setSerializer(serializer);  return this;}  }
class C{  public int openFile(int pageCount,final int insetW,final int insetH,final PdfPageData pageData,final PdfObjectReader currentPdfFile,final PdfObject acroObj){  this.pageCount=pageCount;  this.currentPdfFile=currentPdfFile;  this.pageData=pageData;  compData.flushFormData();  sigObject=null;  sigKeys=null;  compData.setPageData(pageData,insetW,insetH);  if (acroObj == null) {    FfieldCount=0;    fieldList=null;  } else {    final PdfObject XFAasStream;    PdfArrayIterator XFAasArray=null;    XFAasStream=acroObj.getDictionary(PdfDictionary.XFA);    if (XFAasStream == null) {      XFAasArray=acroObj.getMixedArray(PdfDictionary.XFA);      if (XFAasArray != null && XFAasArray.getTokenCount() == 0) {        XFAasArray=null;      }    }    hasXFA=XFAasStream != null || XFAasArray != null;    isContainXFAStream=hasXFA;    fieldList=acroObj.getMixedArray(PdfDictionary.Fields);    CO=acroObj.getObjectArray(PdfDictionary.CO);    if (fieldList != null) {      FfieldCount=fieldList.getTokenCount();      AcroRes=acroObj.getDictionary(PdfDictionary.DR);      if (AcroRes != null) {        currentPdfFile.checkResolved(AcroRes);      }    } else {      FfieldCount=0;      AcroRes=null;    }    if (hasXFA && useXFA) {      processXFAFields(acroObj,currentPdfFile,pageData);    }    if (!hasXFA) {      resolveIndirectFieldList(false);    }  }  resetContainers(true);  return pageCount;}  }
class C{  public MonitoringParameters clone(){  MonitoringParameters result=new MonitoringParameters();  result.ClientHandle=ClientHandle;  result.SamplingInterval=SamplingInterval;  result.Filter=Filter;  result.QueueSize=QueueSize;  result.DiscardOldest=DiscardOldest;  return result;}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  void waitForDictionaryLoading(){  while (mUpdatingDictionary) {    try {      Thread.sleep(100);    } catch (    InterruptedException e) {    }  }}  }
class C{  protected void loadValue(String sValue){  value=decode(sValue);}  }
class C{  public static String toString(boolean[] self){  return InvokerHelper.toString(self);}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  public void addErrorAndContinue(Message message){  if (this.errors == null) {    this.errors=new LinkedList();  }  this.errors.add(message);}  }
class C{  public static void removeNotifications(final Collection<Notification> notifications,final Collection<Long> ids){  notifications.removeIf(null);  ids.clear();}  }
class C{  private void addTag(String key,String value,boolean mandatory,List<String> values,int position,boolean updatable,TagItem.Type type){  String valueFormatted=ParserManager.getValue(value,type);  type=type == null ? TagItem.Type.TEXT : type;  type=key.equals("collection_times") ? TagItem.Type.TIME : type;  type=key.equals("opening_hours") ? TagItem.Type.OPENING_HOURS : type;  TagItem tagItem=new TagItem(key,value,mandatory,values,updatable ? type : TagItem.Type.CONSTANT,valueFormatted != null || type == TagItem.Type.NUMBER);  if (!tagItemList.contains(tagItem)) {    tagItemList.add(position,tagItem);  }  keyTagItem.put(key,tagItem);  notifyItemInserted(position);}  }
class C{  public Status(String code,String level,String description){  this.code=code;  this.level=level;  this.description=description;}  }
class C{  public HttpEngine recover(RouteException e){  if (!streamAllocation.recover(e)) {    return null;  }  if (!client.getRetryOnConnectionFailure()) {    return null;  }  StreamAllocation streamAllocation=close();  return new HttpEngine(client,userRequest,bufferRequestBody,callerWritesRequestBody,forWebSocket,streamAllocation,(RetryableSink)requestBodyOut,priorResponse);}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.plugin.CorePluginManager.getInstance().isRestartNeeded() ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  @Override protected void initialize(){  super.initialize();  m_LastNonIncrementalClassifier=new meka.classifiers.multilabel.BR();  m_LastIncrementalClassifier=new meka.classifiers.multilabel.incremental.BRUpdateable();  m_GenericObjectEditor=new GenericObjectEditor(true);  m_GenericObjectEditor.setClassType(MultiLabelClassifier.class);  m_GenericObjectEditor.setValue(m_LastNonIncrementalClassifier);  m_Seed=1;  m_SplitPercentage=66.0;  m_Folds=10;  m_Samples=10;  m_Randomize=true;  m_TOP="PCut1";  m_VOP="3";  m_TestInstances=null;  m_ClassifyTabOptions=null;  m_AdditionalMenuItems=new HashMap<>();}  }
class C{  public static Object evaluate(String language,String script,Class<?> scriptClass,Map<String,Object> context) throws Exception {  Assert.notNull("context",context);  if (scriptClass != null) {    return InvokerHelper.createScript(scriptClass,GroovyUtil.getBinding(context)).run();  }  try {    CompiledScript compiledScript=compileScriptString(language,script);    if (compiledScript != null) {      return executeScript(compiledScript,null,createScriptContext(context),null);    }    ScriptEngineManager manager=new ScriptEngineManager();    ScriptEngine engine=manager.getEngineByName(language);    if (engine == null) {      throw new IllegalArgumentException("The script type is not supported for language: " + language);    }    if (Debug.verboseOn()) {      Debug.logVerbose("Begin processing script [" + script + "] using engine "+ engine.getClass().getName(),module);    }    ScriptContext scriptContext=createScriptContext(context);    return engine.eval(script,scriptContext);  } catch (  Exception e) {    String errMsg="Error running " + language + " script ["+ script+ "]: "+ e.toString();    Debug.logWarning(e,errMsg,module);    throw new IllegalArgumentException(errMsg);  }}  }
class C{  public ConfigurableCaret(int style){  seg=new Segment();  setStyle(style);  selectionPainter=new ChangeableHighlightPainter();}  }
class C{  protected void releaseBeanContextResources(){}  }
class C{  public void harvest(final List<Component> components,TrickleCallback trickleCallback){synchronized (elements) {    harvest(elements.iterator(),components,threadPool,trickleCallback);  }}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("jboss3x",JBossContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss4x",JBoss4xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss42x",JBoss4xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss5x",JBoss5xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss51x",JBoss5xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss6x",JBoss5xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss61x",JBoss5xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss7x",JBoss7xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss71x",JBoss7xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss72x",JBoss7xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss73x",JBoss7xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss74x",JBoss7xContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("jboss75x",JBoss7xContainerCapability.class);}  }
class C{  private void moveHistory(final IProject oldProject,final IProject newProject,final IProgressMonitor monitor){  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_updating_history,60);    final IFileStore historyStore=EFS.getLocalFileSystem().getStore(RefactoringCorePlugin.getDefault().getStateLocation()).getChild(NAME_HISTORY_FOLDER);    final String oldName=oldProject.getName();    final String newName=newProject.getName();    final IFileStore oldStore=historyStore.getChild(oldName);    if (oldStore.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,10,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists()) {      final IFileStore newStore=historyStore.getChild(newName);      if (newStore.fetchInfo(EFS.NONE,new SubProgressMonitor(monitor,10,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)).exists())       newStore.delete(EFS.NONE,new SubProgressMonitor(monitor,20,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));      oldStore.move(newStore,EFS.OVERWRITE,new SubProgressMonitor(monitor,20,SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));    }  } catch (  CoreException exception) {    RefactoringCorePlugin.log(exception);  } finally {    monitor.done();  }}  }
class C{  @Override protected Template copyValue(Template t){  return Template.create(t.toString());}  }
class C{  public static Test suite(){  return (new TestSuite(MethodRefITCase.class));}  }
class C{  protected int dp2px(int dpVal){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dpVal,getResources().getDisplayMetrics());}  }
class C{  public BasicHttpResponse(final ProtocolVersion ver,final int code,final String reason){  this(new BasicStatusLine(ver,code,reason),null,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodevalue.class,args);}  }
class C{  public void requestShowToolTip(InfoDisplayEvent event){  if (map != null) {    if (ttmanager == null) {      initToolTip();    }    map.setToolTipText(event.getInformation());  }}  }
class C{  public String toString(){  String eol=System.getProperty("line.separator");  StringBuffer sb=new StringBuffer("XNode:[");  sb.append("Node Name:" + getNode().getNodeName());  sb.append(eol);  sb.append("Node Value:" + getNode().getNodeValue());  sb.append(eol);  sb.append("Node Type:" + getNode().getNodeType());  sb.append(eol);  sb.append("Node XPath:" + getXPath());  sb.append(eol);  sb.append("]");  return sb.toString();}  }
class C{  public static int numOfParameters(String desc){  int n=0;  int i=1;  for (; ; ) {    char c=desc.charAt(i);    if (c == ')')     break;    while (c == '[')     c=desc.charAt(++i);    if (c == 'L') {      i=desc.indexOf(';',i) + 1;      if (i <= 0)       throw new IndexOutOfBoundsException("bad descriptor");    } else     ++i;    ++n;  }  return n;}  }
class C{  public int search(final char[] array){  return search(array,0,array.length);}  }
class C{  public void enableProtection(RecoverPointVolumeProtectionInfo volumeInfo) throws RecoverPointException {  try {    ConsistencyGroupUID cgUID=new ConsistencyGroupUID();    cgUID.setId(volumeInfo.getRpVolumeGroupID());    ConsistencyGroupCopyUID cgCopyUID=null;    cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(volumeInfo);    String cgCopyName=functionalAPI.getGroupCopyName(cgCopyUID);    String cgName=functionalAPI.getGroupName(cgUID);    if (volumeInfo.getRpVolumeCurrentProtectionStatus() == RecoverPointVolumeProtectionInfo.volumeProtectionStatus.PROTECTED_SOURCE) {      logger.info("Enabling consistency group " + cgName);      functionalAPI.enableConsistencyGroup(cgUID,true);      RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();      imageManager.waitForCGLinkState(functionalAPI,cgUID,RecoverPointImageManagementUtils.getPipeActiveState(functionalAPI,cgUID));      logger.info("Protection enabled on CG " + cgName);    } else {      logger.info("Enabling CG copy " + cgCopyName + " on CG "+ cgName);      functionalAPI.enableConsistencyGroupCopy(cgCopyUID,true);      RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();      imageManager.waitForCGCopyLinkState(functionalAPI,cgCopyUID,PipeState.ACTIVE);      logger.info("Protection enabled on CG copy " + cgCopyName + " on CG "+ cgName);    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToEnableProtection(volumeInfo.getRpVolumeGroupID(),e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToEnableProtection(volumeInfo.getRpVolumeGroupID(),e);  }}  }
class C{  public NeighborHighlightControl(){  this(null);}  }
class C{  public static final <T>Event<T> of(Selector selector){  return of(selector,null);}  }
class C{  public void init(FilterConfig filterConfig) throws ServletException {}  }
class C{  public static String toString(boolean[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CreateQueueResult createQueue(CreateQueueRequest createQueueRequest) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.createQueue(createQueueRequest);}  }
class C{  public static String[] readFileLines(File file) throws IOException {  List<String> lines=new LinkedList<>();  Files.lines(file.toPath()).forEach(null);  while (StringUtils.strip(lines.get(0)).isEmpty()) {    lines.remove(0);  }  while (StringUtils.strip(lines.get(lines.size() - 1)).isEmpty()) {    lines.remove(lines.size() - 1);  }  return lines.toArray(new String[lines.size()]);}  }
class C{  @DSComment("URL matching utility") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.371 -0500",hash_original_method="2E3898492678127443A40FFAA44913F1",hash_generated_method="A56B1FF934AE2286266D1A896140FC75") public void addURI(String authority,String path,int code){  if (code < 0) {    throw new IllegalArgumentException("code " + code + " is invalid: it must be positive");  }  String[] tokens=path != null ? PATH_SPLIT_PATTERN.split(path) : null;  int numTokens=tokens != null ? tokens.length : 0;  UriMatcher node=this;  for (int i=-1; i < numTokens; i++) {    String token=i < 0 ? authority : tokens[i];    ArrayList<UriMatcher> children=node.mChildren;    int numChildren=children.size();    UriMatcher child;    int j;    for (j=0; j < numChildren; j++) {      child=children.get(j);      if (token.equals(child.mText)) {        node=child;        break;      }    }    if (j == numChildren) {      child=new UriMatcher();      if (token.equals("#")) {        child.mWhich=NUMBER;      } else       if (token.equals("*")) {        child.mWhich=TEXT;      } else {        child.mWhich=EXACT;      }      child.mText=token;      node.mChildren.add(child);      node=child;    }  }  node.mCode=code;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  ValueAxis rangeAxis=getRangeAxis();  if (rangeAxis != null) {    rangeAxis.configure();  }}  }
class C{  @Override public boolean ownInsertsAreVisible(int type){  debugCodeCall("ownInsertsAreVisible",type);  return false;}  }
class C{  public Result run(Class<?> testClass){  return run(Request.aClass(testClass));}  }
class C{  private void processResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  if (innerState.mContinuingDownload) {    return;  }  readResponseHeaders(state,innerState,response);  try {    state.mFilename=mService.generateSaveFile(mInfo.mFileName,mInfo.mTotalBytes);  } catch (  DownloaderService.GenerateSaveFileError exc) {    throw new StopRequest(exc.mStatus,exc.mMessage);  }  try {    state.mStream=new FileOutputStream(state.mFilename);  } catch (  FileNotFoundException exc) {    File pathFile=new File(Helpers.getSaveFilePath(mService));    try {      if (pathFile.mkdirs()) {        state.mStream=new FileOutputStream(state.mFilename);      }    } catch (    Exception ex) {      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while opening destination file: " + exc.toString(),exc);    }  }  if (Constants.LOGV) {    Log.v(Constants.TAG,"writing " + mInfo.mUri + " to "+ state.mFilename);  }  updateDatabaseFromHeaders(state,innerState);  checkConnectivity(state);}  }
class C{  public void calculateChainWaveBuffer(float maxAngle,int bufferTime,float angleDecrement,EntityLivingBase entity){  this.calculateChainWaveBuffer(maxAngle,bufferTime,angleDecrement,1.0F,entity);}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public void nextStep(){  m_nToDo=NEXT;  go();}  }
class C{  public Builder deleteEntitlements(){  deleteFields.add("entitlements");  return this;}  }
class C{  public List<Entry> filter(List<Entry> points,double tolerance){  if (tolerance <= 0)   return points;  keep=new boolean[points.size()];switch (mType) {case DOUGLAS_PEUCKER:    return reduceWithDouglasPeuker(points,tolerance);case NONE:  return points;default :return points;}}  }
class C{  public static Request createCreatePermissionRequest(TransportAddress peerAddress,byte[] transactionID){  Request createPermissionRequest=new Request();  try {    createPermissionRequest.setMessageType(Message.CREATEPERMISSION_REQUEST);  } catch (  IllegalArgumentException iaex) {    logger.log(Level.FINE,"Failed to set message type.",iaex);  }  createPermissionRequest.putAttribute(AttributeFactory.createXorPeerAddressAttribute(peerAddress,transactionID));  return createPermissionRequest;}  }
class C{  public Long convertCIMStatisticTime(String statisticTime){  if (statisticTime == null || statisticTime.equals("") || statisticTime.equals(DEFAULT_PROVIDER_TIME)) {    return 0L;  }  String[] parts=statisticTime.split("[\\.\\+\\-]");  Integer year=Integer.parseInt(parts[0].substring(0,4),10) - 1900;  Integer month=Integer.parseInt(parts[0].substring(4,6),10) - 1;  Integer day=Integer.parseInt(parts[0].substring(6,8),10);  Integer hour=Integer.parseInt(parts[0].substring(8,10),10);  Integer min=Integer.parseInt(parts[0].substring(10,12),10);  Integer sec=Integer.parseInt(parts[0].substring(12,14),10);  Integer msec=Integer.parseInt(parts[1].substring(0,3),10);  @SuppressWarnings("deprecation") Date date=new Date(year,month,day,hour,min,sec);  Long millis=date.getTime() + msec;  date=new Date(millis);  return millis;}  }
class C{  public void error(String msg,Object arg0){  innerLog(Level.ERROR,null,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  protected ExtendedStandardJavaFileManager(JavaFileManager fileManager,CompiledCode compiledCode,DynamicClassLoader cl){  super(fileManager);  this.compiledCode=compiledCode;  this.cl=cl;  this.cl.setCode(compiledCode);}  }
class C{  UpdateDefArrayOperator(int v1,int v2){  v=new ValueNumberPair(v1,v2);}  }
class C{  public static Float stringToFloat(String s,Float defaultValue){  try {    return Float.parseFloat(s);  } catch (  NumberFormatException nfe) {    return defaultValue;  }}  }
class C{  public static int crossPath(PathIterator p,double x,double y){  int cross=0;  double mx, my, cx, cy;  mx=my=cx=cy=0.0;  double coords[]=new double[6];  while (!p.isDone()) {switch (p.currentSegment(coords)) {case PathIterator.SEG_MOVETO:      if (cx != mx || cy != my) {        cross+=crossLine(cx,cy,mx,my,x,y);      }    mx=cx=coords[0];  my=cy=coords[1];break;case PathIterator.SEG_LINETO:cross+=crossLine(cx,cy,cx=coords[0],cy=coords[1],x,y);break;case PathIterator.SEG_QUADTO:cross+=crossQuad(cx,cy,coords[0],coords[1],cx=coords[2],cy=coords[3],x,y);break;case PathIterator.SEG_CUBICTO:cross+=crossCubic(cx,cy,coords[0],coords[1],coords[2],coords[3],cx=coords[4],cy=coords[5],x,y);break;case PathIterator.SEG_CLOSE:if (cy != my || cx != mx) {cross+=crossLine(cx,cy,cx=mx,cy=my,x,y);}break;}if (x == cx && y == cy) {cross=0;cy=my;break;}p.next();}if (cy != my) {cross+=crossLine(cx,cy,mx,my,x,y);}return cross;}  }
class C{  public static String createRangedAttribute(final int actualValue,final int[] steps){  if (null == steps) {    throw new IllegalArgumentException("steps cannot be null");  }  if (steps.length == 0) {    throw new IllegalArgumentException("steps length must be greater than 0");  }  String bucket;  if (actualValue < steps[0]) {    bucket="less than " + steps[0];  } else   if (actualValue >= steps[steps.length - 1]) {    bucket=steps[steps.length - 1] + " and above";  } else {    int bucketIndex=Arrays.binarySearch(steps,actualValue);    if (bucketIndex < 0) {      bucketIndex=(-bucketIndex) - 2;    }    if (steps[bucketIndex] == (steps[bucketIndex + 1] - 1)) {      bucket=Integer.toString(steps[bucketIndex]);    } else {      bucket=steps[bucketIndex] + "-" + (steps[bucketIndex + 1] - 1);    }  }  return bucket;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.knnDistance=in.readDouble();}  }
class C{  protected Object readResolve() throws InvalidObjectException {  if (this.getClass() != MessageFormat.Field.class) {    throw new InvalidObjectException("subclass didn't correctly implement readResolve");  }  return ARGUMENT;}  }
class C{  public void testEventWatcherCancellation() throws Exception {  WatchManager<String> em=new WatchManager<String>();  List<Watch<String>> watches=new LinkedList<Watch<String>>();  watches.add(em.watch(new StringWatchPredicate("hello"),1));  watches.add(em.watch(new StringWatchPredicate("goodbye"),1));  watches.add(em.watch(new StringWatchPredicate("hello again"),1));  em.cancelAll();  for (  Watch<String> w : watches) {    assertTrue("Should be done",w.isDone());    assertTrue("Should be cancelled",w.isCancelled());    try {      w.get();      throw new Exception("Did not get cancellation exception from cancelled watch");    } catch (    CancellationException e) {    }  }}  }
class C{  QuitDialog(){  quitDialog=buildQuitDialog();  quitDialog.setVisible(false);  quitDialog.addHierarchyBoundsListener(new ParentResizeListener());}  }
class C{  private <T>T mu(T obj) throws IgniteCheckedException {  return marshaller.unmarshal(marshaller.marshal(obj),null);}  }
class C{  public String executeCommand(String[] shellCommand){  Process shellProcess=null;  String response=null;  BufferedReader shellInput=null;  try {    if (shellCommand != null) {      shellProcess=Runtime.getRuntime().exec(shellCommand);    }  } catch (  IOException e) {    Log.e(LOG_TAG,"Shell command processing failed." + e);  }  if (shellProcess != null) {    shellInput=new BufferedReader(new InputStreamReader(shellProcess.getInputStream()));  }  try {    while (shellInput != null && (response=shellInput.readLine()) != null) {      if (Constants.DEBUG_MODE_ENABLED) {        Log.d(LOG_TAG,"Shell Executor Result." + response);      }    }  } catch (  IOException e) {    Log.e(LOG_TAG,"Shell input processing failed." + e);  } finally {    StreamHandler.closeBufferedReader(shellInput,LOG_TAG);  }  return response;}  }
class C{  public button addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public long position(Clob searchStr,long start) throws SerialException, SQLException {  isValid();  return position(searchStr.getSubString(1,(int)searchStr.length()),start);}  }
class C{  protected final void deflate() throws IOException {  int len=def.deflate(buf,0,buf.length);  if (len > 0) {    writeOut(buf,0,len);  }}  }
class C{  public void attributeReplaced(HttpSessionBindingEvent event){  if (event.getName().equals(EVENT_KEY) && !isAnonymous()) {    SecurityContext securityContext=(SecurityContext)event.getValue();    if (securityContext.getAuthentication() != null) {      if (securityContext.getAuthentication().getPrincipal() instanceof User) {        User user=(User)securityContext.getAuthentication().getPrincipal();        addUsername(user);      }    }  }}  }
class C{  @Override public int gotoDest(PdfObject aData,final int eventType,int command){  final boolean debugDest=false;  int page=-1;  if (showMethods) {    System.out.println("DefaultActionHandler.gotoDest()");  }  PdfArrayIterator Dest=DestHandler.getDestFromObject(aData,currentPdfFile);  if (Dest != null && Dest.hasMoreTokens()) {    if (eventType == MOUSECLICKED) {      String filename=aData.getTextStreamValue(PdfDictionary.F);      if (filename == null) {        final PdfObject fDic=aData.getDictionary(PdfDictionary.F);        if (fDic != null) {          filename=fDic.getTextStreamValue(PdfDictionary.F);        }      }      if (filename != null && filename.indexOf('/') == -1 && filename.indexOf('\\') == -1) {        filename=decode_pdf.getObjectStore().getCurrentFilepath() + filename;      }      if (filename != null) {        int index=filename.indexOf('\\');        while (index != -1) {          filename=filename.substring(0,index) + '/' + filename.substring(index + ("\\".length()),filename.length());          index=filename.indexOf('\\');        }        final int slashIndex=filename.indexOf(":/");        if ((slashIndex == -1 || slashIndex > 1) && !filename.startsWith("/")) {          final File fileStart=new File(decode_pdf.getFileName());          filename=fileStart.getParent() + '/' + filename;        }        index=filename.indexOf("/../");        if (index != -1) {          int start=index - 1;          while (start > 0) {            if ((filename.charAt(start) == '/') || start == 0) {              break;            }            start--;          }          if (start > 0) {            filename=filename.substring(0,start) + filename.substring(index + 3,filename.length());          }        }      }      String pageRef="";      if (Dest.getTokenCount() > 0) {        if (Dest.isNextValueNull()) {          return -1;        }        final int possiblePage=Dest.getNextValueAsInteger(false) + 1;        pageRef=Dest.getNextValueAsString(true);        if (pageRef.endsWith(" R")) {          page=decode_pdf.getPageFromObjectRef(pageRef);        } else         if (possiblePage > 0 && possiblePage != PdfDictionary.Null) {          page=possiblePage;        }        if (debugDest) {          System.out.println("pageRef=" + pageRef + " page="+ page+ ' '+ aData.getObjectRefAsString());        }        if (page == -1) {          final String newRef=currentPdfFile.convertNameToRef(pageRef);          if (newRef != null && newRef.endsWith(" R")) {            page=decode_pdf.getPageFromObjectRef(newRef);          }        }      }      if (Dest.getTokenCount() == 0 && aData.getNameAsConstant(PdfDictionary.S) == PdfDictionary.GoToR) {        command=PdfDictionary.GoToR;      }      if (debugDest) {        System.out.println("Command=" + PdfDictionary.showAsConstant(command));      }switch (command) {case PdfDictionary.Dest:        if (Dest.getTokenCount() > 1) {          final int type=Dest.getNextValueAsConstant(true);          if (debugDest) {            System.out.println("Type=" + PdfDictionary.showAsConstant(type));          }          Integer scale=null;          Rectangle position=null;switch (type) {case PdfDictionary.XYZ:            final float x=Dest.getNextValueAsFloat();          final float y=Dest.getNextValueAsFloat();        position=new Rectangle((int)x,(int)y,10,10);      break;case PdfDictionary.Fit:    scale=-3;  break;case PdfDictionary.FitB:scale=-3;break;case PdfDictionary.FitH:scale=-1;if (Dest.hasMoreTokens()) {final float top=Dest.getNextValueAsFloat();position=new Rectangle(10,(int)top,10,10);}break;case PdfDictionary.FitR:final float fitR_left=Dest.getNextValueAsFloat();final float fitR_bottom=Dest.getNextValueAsFloat();final float fitR_right=Dest.getNextValueAsFloat();final float fitR_top=Dest.getNextValueAsFloat();final org.jpedal.gui.GUIFactory gui=((GUIFactory)decode_pdf.getExternalHandler(Options.GUIContainer));if (gui != null) {final float scaling=gui.scaleToVisible(fitR_left,fitR_right,fitR_top,fitR_bottom);scale=(int)(100f / scaling);}break;}changeTo(filename,page,position,scale,true);}break;case PdfDictionary.GoTo:if (page != -1) {changeTo(null,page,null,null,true);}break;case PdfDictionary.GoToR:final int index=pageRef.indexOf("P.");if (index != -1) {pageRef=pageRef.substring(index + 2,pageRef.length());page=Integer.parseInt(pageRef);} else if (pageRef.equals("F")) {page=1;} else {page=1;}if (new File(filename).exists()) {if (page != -1) {changeTo(filename,page,null,null,true);}LogWriter.writeFormLog("{DefaultActionHamdler.A} Form has GoToR command, needs methods for opening new file on page specified",FormStream.debugUnimplemented);} else {showMessageDialog("The file specified " + filename + " Does Not Exist!");}break;}} else {setCursor(eventType);}} else {if (eventType == MOUSECLICKED) {PdfObject data=aData.getDictionary(PdfDictionary.A);if (data != null) {String filename=data.getTextStreamValue(PdfDictionary.F);if (filename == null) {final PdfObject fDic=data.getDictionary(PdfDictionary.F);if (fDic != null) {filename=fDic.getTextStreamValue(PdfDictionary.F);}}if (filename != null && filename.indexOf('/') == -1 && filename.indexOf('\\') == -1) {filename=decode_pdf.getObjectStore().getCurrentFilepath() + filename;}if (filename != null) {int index=filename.indexOf('\\');while (index != -1) {filename=filename.substring(0,index) + '/' + filename.substring(index + ("\\".length()),filename.length());index=filename.indexOf('\\');}final int slashIndex=filename.indexOf(":/");if ((slashIndex == -1 || slashIndex > 1) && !filename.startsWith("/")) {final File fileStart=new File(decode_pdf.getFileName());filename=fileStart.getParent() + '/' + filename;}index=filename.indexOf("/../");if (index != -1) {int start=index - 1;while (start > 0) {if ((filename.charAt(start) == '/') || start == 0) {break;}start--;}if (start > 0) {filename=filename.substring(0,start) + filename.substring(index + 3,filename.length());}}}changeTo(filename,1,null,null,true);}} else {setCursor(eventType);}}return page;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.270 -0500",hash_original_method="3F7D901C5D2A92F81B8BE7A716DA67AE",hash_generated_method="FED4FBCEA05778094376463F7BBF91F1") public int compare(Object obj1,Object obj2){  if (obj1 == obj2) {    return 0;  }  AttributeTypeAndValue atav1=(AttributeTypeAndValue)obj1;  AttributeTypeAndValue atav2=(AttributeTypeAndValue)obj2;  String kw1=atav1.getType().getName();  String kw2=atav2.getType().getName();  if (kw1 != null && kw2 == null) {    return -1;  }  if (kw1 == null && kw2 != null) {    return 1;  }  if (kw1 != null && kw2 != null) {    return kw1.compareTo(kw2);  }  return compateOids(atav1.getType(),atav2.getType());}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public ConstantSize(int value,Unit unit){  this.value=value;  this.unit=unit;}  }
class C{  public void cancelAnimations(){  mAnimationManager.cancelAnimations();}  }
class C{  protected void updateFromColumnModelChange(TableColumnModel oldModel){  if (oldModel != null && columnModelListener != null) {    oldModel.removeColumnModelListener(columnModelListener);  }  populatePopup();  table.getColumnModel().addColumnModelListener(getColumnModelListener());}  }
class C{  public boolean forEachEntry(TLongObjectProcedure<V> procedure){  long[] keys=_set;  V[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.DecisionStump";}  }
class C{  private int calculatedWeightedValue(mxGraphAbstractHierarchyCell currentCell,Collection<mxGraphAbstractHierarchyCell> collection){  int totalWeight=0;  Iterator<mxGraphAbstractHierarchyCell> iter=collection.iterator();  while (iter.hasNext()) {    mxGraphAbstractHierarchyCell cell=iter.next();    if (currentCell.isVertex() && cell.isVertex()) {      totalWeight++;    } else     if (currentCell.isEdge() && cell.isEdge()) {      totalWeight+=8;    } else {      totalWeight+=2;    }  }  return totalWeight;}  }
class C{  public void stopPlaying(){  mProcessButtonClick=true;  unregisterReceiver(mPingReceiver);  mPingReceiver=null;  mStartOrStopFab.setImageResource(android.R.drawable.ic_media_play);}  }
class C{  private String commandRemoveCategory(String[] parameters){  if (parameters.length != 1) {    return "Remove category: Invalid number of parameters.";  }  int result=removeCategory(parameters[0]);  return "Removed category '" + parameters[0] + "' from "+ result+ " entries.";}  }
class C{  protected GeneralPath updateShape(GeneralPath currentShape,OMGeometry geometry,Projection p,boolean forceProject){  GeneralPath newShapePart=null;  if (geometry != null && geometry.isVisible()) {    if (forceProject) {      geometry.generate(p);    } else {      geometry.regenerate(p);    }    newShapePart=geometry.getShape();  }  return appendShapeEdge(currentShape,newShapePart,connectParts);}  }
class C{  @SuppressWarnings("unchecked") private T[] combinedBufferToItemsArray(boolean ordered){  T[] outArr=null;  final int extra=2;  final int outArrCap=getRetainedItems();  outArr=(T[])Array.newInstance(minValue_.getClass(),outArrCap + extra);  outArr[0]=minValue_;  outArr[1]=maxValue_;  System.arraycopy(combinedBuffer_,0,outArr,extra,baseBufferCount_);  long bits=bitPattern_;  if (bits > 0) {    int index=extra + baseBufferCount_;    for (int level=0; bits != 0L; level++, bits>>>=1) {      if ((bits & 1L) > 0L) {        System.arraycopy(combinedBuffer_,(2 + level) * k_,outArr,index,k_);        index+=k_;      }    }  }  if (ordered) {    Arrays.sort(outArr,extra,baseBufferCount_ + extra,comparator_);  }  return outArr;}  }
class C{  public static List<Class<?>> findAllImplementations(Class<?> c,boolean everything,boolean parameterizable){  if (c == null) {    return Collections.emptyList();  }  if (!everything && parameterizable) {    return findAllImplementations(c);  }  if (!contains(c)) {    ELKIServiceLoader.load(c);    ELKIServiceScanner.load(c);  }  List<Class<?>> known=findAllImplementations(c);  HashSet<Class<?>> dupes=new HashSet<>(known);  for (Iterator<Class<?>> iter=ELKIServiceScanner.nonindexedClasses(); iter.hasNext(); ) {    Class<?> cls=iter.next();    if (dupes.contains(cls)) {      continue;    }    if (!everything && (Modifier.isInterface(cls.getModifiers()) || Modifier.isAbstract(cls.getModifiers()) || Modifier.isPrivate(cls.getModifiers()))) {      continue;    }    if (!c.isAssignableFrom(cls)) {      continue;    }    if (parameterizable) {      boolean instantiable=false;      try {        instantiable=cls.getConstructor() != null;      } catch (      Exception|Error e) {      }      try {        instantiable=instantiable || ClassGenericsUtil.getParameterizer(cls) != null;      } catch (      Exception|Error e) {      }      if (!instantiable) {        continue;      }    }    known.add(cls);    dupes.add(cls);  }  return known;}  }
class C{  public static ICheckpointProtocol create(final IRawStore store,final IndexMetadata metadata){  final ICheckpointProtocol ndx;switch (metadata.getIndexType()) {case BTree:    ndx=BTree.create(store,metadata);  break;case HTree:ndx=HTree.create(store,(HTreeIndexMetadata)metadata);break;case Stream:ndx=Stream.create(store,(StreamIndexMetadata)metadata);break;default :throw new AssertionError("Unknown: " + metadata.getIndexType());}return ndx;}  }
class C{  protected void configDelta(Parameterization config){  Flag absoluteF=new Flag(LimitEigenPairFilter.Parameterizer.EIGENPAIR_FILTER_ABSOLUTE);  if (config.grab(absoluteF)) {    settings.absolute=absoluteF.isTrue();  }  DoubleParameter deltaP=new DoubleParameter(LimitEigenPairFilter.Parameterizer.EIGENPAIR_FILTER_DELTA).addConstraint(CommonConstraints.GREATER_EQUAL_ZERO_DOUBLE);  if (!settings.absolute) {    deltaP.setDefaultValue(DEFAULT_DELTA);  } else {    deltaP.addConstraint(CommonConstraints.LESS_EQUAL_ONE_DOUBLE);  }  if (config.grab(deltaP)) {    settings.delta=deltaP.doubleValue();  }}  }
class C{  public void testRun(){  System.out.println("run");  Page mockPage=EasyMock.createMock(Page.class);  EasyMock.expect(mockPage.getURL()).andReturn("http://my.testUrl.org").times(2);  ContentDataService mockContentDataService=EasyMock.createMock(ContentDataService.class);  SSP mockSSP=EasyMock.createMock(SSP.class);  Date date=new Date();  DateFactory mockDateFactory=EasyMock.createMock(DateFactory.class);  EasyMock.expect(mockDateFactory.createDate()).andReturn(date).once();  EasyMock.expect(mockContentDataService.getSSP(date,"http://my.testUrl.org","My Page Content",mockPage,HttpStatus.SC_OK)).andReturn(mockSSP).once();  Map<String,String> fileMap=new HashMap<>();  fileMap.put("http://my.testUrl.org","My Page Content");  EasyMock.replay(mockPage);  EasyMock.replay(mockSSP);  EasyMock.replay(mockContentDataService);  EasyMock.replay(mockDateFactory);  FileContentLoaderImpl instance=new FileContentLoaderImpl(mockContentDataService,fileMap,mockDateFactory);  instance.setWebResource(mockPage);  instance.run();  assertTrue(instance.getResult().contains(mockSSP));  EasyMock.verify(mockPage);  EasyMock.verify(mockSSP);  EasyMock.verify(mockContentDataService);  EasyMock.verify(mockDateFactory);}  }
class C{  public void ensureNavigationProperties(StructuredType entityType) throws ODataException {  List<String> missingNavigationPropertyNames=new ArrayList<>();  for (  StructuralProperty property : entityType.getStructuralProperties()) {    if ((property instanceof NavigationProperty) && !property.isNullable()) {      LOG.debug("Validating non-nullable NavigationProperty property : {}",property.getName());      if (!links.containsKey(property.getName())) {        missingNavigationPropertyNames.add(property.getName());      }    }  }  if (missingNavigationPropertyNames.size() != 0) {    StringJoiner joiner=new StringJoiner(",");    missingNavigationPropertyNames.forEach(null);    throw new ODataUnmarshallingException("The request does not specify the navigation links for '" + joiner.toString() + ".");  }}  }
class C{  public static void buildList(Map<String,Object> nd,List<Map<String,Object>> lst,int depth){  String id=(String)nd.get("id");  String nm=(String)nd.get("name");  String spc="";  for (int i=0; i < depth; i++)   spc+="&nbsp;&nbsp;";  Map<String,Object> map=FastMap.newInstance();  map.put("dataCategoryId",id);  map.put("categoryName",spc + nm);  if (id != null && !id.equals("ROOT") && !id.equals("")) {    lst.add(map);  }  List<Map<String,Object>> kids=UtilGenerics.checkList(nd.get("kids"));  for (  Map<String,Object> kidNode : kids) {    buildList(kidNode,lst,depth + 1);  }}  }
class C{  void repaintIfShowing(){  if (isContainerShowing()) {    container.postPaintEvent();  }}  }
class C{  public static RegressionDataSet usingDPPList(List<DataPointPair<Double>> list){  RegressionDataSet rds=new RegressionDataSet();  rds.dataPoints=list;  rds.numNumerVals=list.get(0).getDataPoint().numNumericalValues();  rds.numericalVariableNames=new ArrayList<String>(rds.getNumNumericalVars());  for (int i=0; i < rds.getNumNumericalVars(); i++)   rds.numericalVariableNames.add("Numeric Input " + (i + 1));  rds.categories=CategoricalData.copyOf(list.get(0).getDataPoint().getCategoricalData());  return rds;}  }
class C{  public boolean provides(Class<?> type){  if (adapterMemo.getDisabled()) {    return false;  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  if (type.equals(AliasMap.class)) {    return true;  }  if (type.equals(MessageBuilder.class)) {    return true;  }  if (type.equals(MimicNodeStore.class)) {    return true;  }  if (type.equals(Connection.class)) {    return true;  }  if (type.equals(MemoryConfigurationService.class)) {    return true;  }  if (type.equals(DatagramService.class)) {    return true;  }  if (type.equals(NodeID.class)) {    return true;  }  return false;}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  protected static JSONNode toJSON(Instance inst){  JSONNode result;  JSONNode values;  int i;  boolean sparse;  result=new JSONNode();  sparse=(inst instanceof SparseInstance);  result.addPrimitive(SPARSE,sparse);  result.addPrimitive(WEIGHT,inst.weight());  values=result.addArray(VALUES);  if (sparse) {    for (i=0; i < inst.numValues(); i++) {      if (inst.isMissing(inst.index(i)))       values.addArrayElement(inst.index(i) + SPARSE_SEPARATOR + MISSING_VALUE); else       if (inst.toString(inst.index(i)).equals("'" + MISSING_VALUE + "'"))       values.addArrayElement(inst.index(i) + SPARSE_SEPARATOR + "'"+ MISSING_VALUE+ "'"); else       values.addArrayElement(inst.index(i) + SPARSE_SEPARATOR + inst.toString(inst.index(i)));    }  } else {    for (i=0; i < inst.numAttributes(); i++) {      if (inst.isMissing(i))       values.addArrayElement(MISSING_VALUE); else       if (inst.toString(i).equals("'" + MISSING_VALUE + "'"))       values.addArrayElement("'" + MISSING_VALUE + "'"); else       values.addArrayElement(inst.toString(i));    }  }  return result;}  }
class C{  @Override public int compare(T a,T b) throws ClassCastException {  Double cla=Double.valueOf(a.getCloudletTotalLength());  Double clb=Double.valueOf(b.getCloudletTotalLength());  return cla.compareTo(clb);}  }
class C{  protected void createButtons(Composite sectionArea,FormToolkit toolkit,boolean add,boolean edit,boolean remove){  doCreateButtons(sectionArea,toolkit,false,true,false);}  }
class C{  public boolean isInView(){  return inView;}  }
class C{  public MenuItemAdapter(Context context,Integer[] itemIds){  mContext=context;  mItems=itemIds;  mPadding=mContext.getResources().getDimensionPixelSize(R.dimen.afc_5dp);  mItemPaddingLeft=mContext.getResources().getDimensionPixelSize(R.dimen.afc_context_menu_item_padding_left);}  }
class C{  public EgDemandDetails insertDemandDetails(final String demandReason,final BigDecimal amount,final Installment inst){  EgDemandDetails demandDetail=null;  Module ptModule=null;  if (amount != null && amount.compareTo(BigDecimal.ZERO) > 0) {    ptModule=module();    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDAO.getDemandReasonMasterByCode(demandReason,ptModule);    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException(demandReason + " Demand reason Master is null in method  insertDemandDetails");    final EgDemandReason egDemandReason=demandGenericDAO.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,inst,ptModule);    if (egDemandReason == null)     throw new ApplicationRuntimeException(demandReason + " Demand reason is null in method  insertDemandDetails ");    if (DEMANDRSN_CODE_ADVANCE.equals(egDemandReason.getEgDemandReasonMaster().getCode())) {      demandDetail=createDemandDetails(egDemandReason,amount,BigDecimal.ZERO);    } else {      demandDetail=createDemandDetails(egDemandReason,BigDecimal.ZERO,amount);    }  }  return demandDetail;}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static byte[] serialize(Object obj){  try {    if (serializer != null) {      return serializer.serialize(obj);    }    ByteArrayOutputStream out=new ByteArrayOutputStream();    ObjectOutputStream os=new ObjectOutputStream(out);    os.writeObject(obj);    return out.toByteArray();  } catch (  Throwable e) {    throw DbException.get(ErrorCode.SERIALIZATION_FAILED_1,e,e.toString());  }}  }
class C{  public static void permute(Object[] list,int[] indexes){  Object[] copy=(Object[])list.clone();  for (int i=list.length; --i >= 0; )   list[i]=copy[indexes[i]];}  }
class C{  public static <K,V>HashMap<K,V> hashMap(int initialCapacity,float loadFactor){  return new HashMap<K,V>(initialCapacity,loadFactor);}  }
class C{  public void clear(){  sortedSet.clear();}  }
class C{  @Override protected void processKeyEvent(KeyEvent e){  curPanel.dispatchEvent(e);  if (!e.isConsumed()) {    super.processKeyEvent(e);  }}  }
class C{  @RequestMapping(value="/files/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public void delete(@PathVariable Long id){  log.debug("REST request to delete file : {}",id);  dataFileRepository.delete(id);}  }
class C{  public void printMessage(Diagnostic.Kind kind,CharSequence msg,Element e,AnnotationMirror a,AnnotationValue v){  JavaFileObject oldSource=null;  JavaFileObject newSource=null;  JCDiagnostic.DiagnosticPosition pos=null;  JavacElements elemUtils=processingEnv.getElementUtils();  Pair<JCTree,JCCompilationUnit> treeTop=elemUtils.getTreeAndTopLevel(e,a,v);  if (treeTop != null) {    newSource=treeTop.snd.sourcefile;    if (newSource != null) {      oldSource=log.useSource(newSource);      pos=treeTop.fst.pos();    }  }  try {switch (kind) {case ERROR:      errorCount++;    boolean prev=log.multipleErrors;  log.multipleErrors=true;try {  log.error(pos,"proc.messager",msg.toString());}  finally {  log.multipleErrors=prev;}break;case WARNING:warningCount++;log.warning(pos,"proc.messager",msg.toString());break;case MANDATORY_WARNING:warningCount++;log.mandatoryWarning(pos,"proc.messager",msg.toString());break;default :log.note(pos,"proc.messager",msg.toString());break;}}  finally {if (newSource != null) log.useSource(oldSource);}}  }
class C{  private int height(Node x){  if (x == null)   return -1;  return x.height;}  }
class C{  public static void write(byte[] from,File to) throws IOException {  asByteSink(to).write(from);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  protected void validateOnStatus(){  if (Command.STATUS.equals(getCommand())) {  }}  }
class C{  private boolean verifyReservedBit1ForPMCE(WebSocketFrame frame) throws WebSocketException {  if (frame.isTextFrame() || frame.isBinaryFrame()) {    return true;  }  return false;}  }
class C{  int encryptFinal(byte[] in,int inOfs,int len,byte[] out,int outOfs) throws IllegalBlockSizeException, ShortBufferException {  if (out.length - outOfs < (len + tagLenBytes)) {    throw new ShortBufferException("Output buffer too small");  }  processAAD();  if (len > 0) {    doLastBlock(in,inOfs,len,out,outOfs,true);  }  byte[] lengthBlock=getLengthBlock(sizeOfAAD * 8,processed * 8);  ghashAllToS.update(lengthBlock);  byte[] s=ghashAllToS.digest();  byte[] sOut=new byte[s.length];  GCTR gctrForSToTag=new GCTR(embeddedCipher,this.preCounterBlock);  gctrForSToTag.doFinal(s,0,s.length,sOut,0);  System.arraycopy(sOut,0,out,(outOfs + len),tagLenBytes);  return (len + tagLenBytes);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public static short toShort(byte[] bytes,int offset,final int length){  if (length != SIZEOF_SHORT || offset + length > bytes.length) {    throw explainWrongLengthOrOffset(bytes,offset,length,SIZEOF_SHORT);  }  short n=0;  n^=bytes[offset] & 0xFF;  n<<=8;  n^=bytes[offset + 1] & 0xFF;  return n;}  }
class C{  private Promise<PeerSession> pickCachedSession(int uid,final int keyGroupId){  return ManagedList.of(peerSessions.getValue(uid)).flatMap(PeerSessionsStorage.SESSIONS).filter(PeerSession.BY_THEIR_GROUP(keyGroupId)).sorted(PeerSession.COMPARATOR).firstPromise();}  }
class C{  public Vector subtract(Vector... others){  double newX=x, newY=y, newZ=z;  for (  Vector other : others) {    newX-=other.x;    newY-=other.y;    newZ-=other.z;  }  return new Vector(newX,newY,newZ);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:    return typeArgs != null && !typeArgs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public HardDiskIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public LocalRepository(String name) throws RepositoryException {  this(name,getDefaultRepositoryFolder(name));}  }
class C{  public static void enableOverScroll(AbsListView listView,int distance){  try {    Field overscrollDistance=AbsListView.class.getDeclaredField("mOverscrollDistance");    overscrollDistance.setAccessible(true);    overscrollDistance.setInt(listView,distance);  } catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public static Spannable filterFromResource(Context context,Spannable spannable,int fontSize){  return spannable == null ? null : filterFromResource(context,spannable,fontSize,HEAD_NAME,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.812 -0500",hash_original_method="D6339CFBAEA862E2360C9454B8ED0BC8",hash_generated_method="75DBB3A9402117CEFF362A3890042B39") public boolean isPreclosed(){  return preclosed;}  }
class C{  public static Font createBitmapFont(Image bitmap,int[] cutOffsets,int[] charWidth,String charsets){  return new CustomFont(bitmap,cutOffsets,charWidth,charsets);}  }
class C{  public void testDifferentOrdering(){  h1.connect(h2);  Message m1=new Message(h1,h2,msgId1,1);  h1.createNewMessage(m1);  assertTrue(mc.next());  assertEquals(mc.TYPE_CREATE,mc.getLastType());  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(mc.getLastFrom(),h1);  assertEquals(mc.getLastTo(),h2);  clock.advance(10);  Message m2=new Message(h2,h1,msgId2,1);  h2.createNewMessage(m2);  h2.update(true);  assertTrue(mc.next());  assertEquals(mc.TYPE_CREATE,mc.getLastType());  assertFalse(mc.next());  h1.update(true);  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(h2,mc.getLastTo());  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(h1,mc.getLastTo());  assertEquals(msgId2,mc.getLastMsg().getId());  assertFalse(mc.next());}  }
class C{  void sendWriteCommand(int locoIOAddress,int locoIOSubAddress,int cv,int data){  reading=false;  tc.sendLocoNetMessage(LocoIO.writeCV(locoIOAddress,locoIOSubAddress,cv,data));  startTimer();}  }
class C{  public void remove(final long address,final int length){  Preconditions.checkArgument(address >= 0,"Error: Address can't be less than 0");  Preconditions.checkArgument(length > 0,"Error: Length must be positive");  try {    m_writeLock.lock();    final MemoryChunk chunk=findChunk(address);    if (chunk == null) {      final MemoryChunk nextChunk=findNextChunk(address);      if (nextChunk == null) {        return;      } else       if (nextChunk.getAddress() < (address + length)) {        final int toRemove=(int)((address + length) - nextChunk.getAddress());        remove(nextChunk.getAddress(),toRemove);      } else {        return;      }    } else     if (chunk.getAddress() == address) {      if (chunk.getLength() <= length) {        removeChunk(chunk);        final int toDelete=length - chunk.getLength();        if (toDelete > 0) {          remove(address + chunk.getLength(),toDelete);        }      } else {        splitChunk(chunk,address + length);        removeChunk(findChunk(address));      }    } else {      if ((chunk.getAddress() + chunk.getLength()) <= (address + length)) {        splitChunk(chunk,address);        final MemoryChunk deleteChunk=findChunk(address);        removeChunk(deleteChunk);        final int toRemove=length - deleteChunk.getLength();        if (toRemove > 0) {          remove(address + deleteChunk.getLength(),toRemove);        }      } else {        splitChunk(chunk,address);        final MemoryChunk secondChunk=findChunk(address);        splitChunk(secondChunk,address + length);        removeChunk(findChunk(address));      }    }  }  finally {    m_writeLock.unlock();  }}  }
class C{  void ackReceived(SIPRequest sipRequest){  if (this.ackSeen)   return;  SIPServerTransaction tr=this.getInviteTransaction();  if (tr != null) {    if (tr.getCSeq() == sipRequest.getCSeq().getSeqNumber()) {      acquireTimerTaskSem();      try {        if (this.timerTask != null) {          this.timerTask.cancel();          this.timerTask=null;        }      }  finally {        releaseTimerTaskSem();      }      this.ackSeen=true;      if (this.dialogDeleteTask != null) {        this.dialogDeleteTask.cancel();        this.dialogDeleteTask=null;      }      this.setLastAckReceived(sipRequest);      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("ackReceived for " + ((SIPTransaction)tr).getMethod());        this.ackLine=sipStack.getStackLogger().getLineCount();        this.printDebugInfo();      }      if (this.isBackToBackUserAgent) {        this.releaseAckSem();      }      this.setState(CONFIRMED_STATE);    }  }}  }
class C{  public int next(){  final int startNode=_startNode;  if (_startNode == NULL) {    return NULL;  }  int node=_currentNode;  int expType;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    do {      node++;      expType=_exptype2(node);      if (NULL == expType || _parent2(node) < startNode && startNode != node) {        _currentNode=NULL;        return END;      }    } while (expType != nodeType);  } else   if (startNode == DTMDefaultBase.ROOTNODE) {    do {      node++;      expType=_exptype2(node);      if (NULL == expType) {        _currentNode=NULL;        return END;      }    } while (expType < DTM.NTYPES || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);  } else {    do {      node++;      expType=_exptype2(node);      if (NULL == expType || _parent2(node) < startNode && startNode != node) {        _currentNode=NULL;        return END;      }    } while (expType < DTM.NTYPES || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);  }  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public boolean isMatch(Geometry geom,String opName,Object[] args,Result actualResult,Result expectedResult,double tolerance){  return actualResult.equals(expectedResult,tolerance);}  }
class C{  public double distance(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  private String extractDescription(Element descriptionNode){  Assert.assertTrue(descriptionNode.getTagName().equals("description"));  return extractText(descriptionNode);}  }
class C{  public static LatLonPoint ZonedUTMtoLL(Ellipsoid ellip,double UTMNorthing,double UTMEasting,int ZoneNumber,char ZoneLetter,LatLonPoint llpoint){  return UTMPoint.UTMtoLL(ellip,UTMNorthing,UTMEasting,ZoneNumber,MGRSPoint.MGRSZoneToUTMZone(ZoneLetter),llpoint);}  }
class C{  public void verifyInfo(String message,Throwable t){  verify(Level.INFO,message,t);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  @Override public void close(){  if (process.isAlive()) {    process.destroy();  }  super.close();}  }
class C{  public JBZipFile(File f) throws IOException {  this(f,"UTF-8");}  }
class C{  protected void processRememberedSets(){}  }
class C{  public static boolean textLayoutIsCompatible(Font font){  Font2D font2D=getFont2D(font);  if (font2D instanceof TrueTypeFont) {    TrueTypeFont ttf=(TrueTypeFont)font2D;    return ttf.getDirectoryEntry(TrueTypeFont.GSUBTag) == null || ttf.getDirectoryEntry(TrueTypeFont.GPOSTag) != null;  } else {    return false;  }}  }
class C{  public void testSet_result_zeroblob() throws Exception, UnsupportedEncodingException {  Stmt st=null;  TestFCZeroBlob testZeroBlobFnc=new TestFCZeroBlob();  byte[] byteVal={(byte)1,(byte)2,(byte)3};  db.exec("create table testBinaryData (binVal BINARY) ;",null);  try {    st=db.prepare("insert into testBinaryData values (?)");    st.bind(1,byteVal);    st.step();    db.create_function("testZeroBlob",0,testZeroBlobFnc);    TableResult res=db.get_table("select testZeroBlob() from testBinaryData");    TableResult res2=db.get_table("select zeroblob(" + testZeroBlobFnc.numBytes + ") from testBinaryData");    String row[]=(String[])res.rows.elementAt(0);    String val=row[0];    assertNotNull(val);    assertEquals(((String[])res2.rows.elementAt(0))[0],val);    assertTrue(testZeroBlobFnc.functionCalled);  }  finally {    db.exec("drop table if exists testBinaryData;",null);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean isAlternative(){  return iAlternative;}  }
class C{  public boolean needsOffset(){  if (isEnabled() && isDrawLabelsEnabled() && getLabelPosition() == YAxisLabelPosition.OUTSIDE_CHART)   return true; else   return false;}  }
class C{  public boolean hasAttribute(String attName){  if (attName == null)   return false;  for (  String key : attributes.keySet()) {    if (key.equalsIgnoreCase(attName))     return true;  }  return false;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + alpha+ ","+ lambda+ ")";}  }
class C{  public void testOnServerHealthy_reloadsUsersIfNotAvailable(){  when(mTroubleshooter.isServerHealthy()).thenReturn(false);  mController.init();  when(mTroubleshooter.isServerHealthy()).thenReturn(true);  mFakeEventBus.post(new TroubleshootingActionsChangedEvent(ImmutableSet.of(TroubleshootingAction.CHECK_PACKAGE_SERVER_CONFIGURATION),null));  verify(mMockUserManager,times(2)).loadKnownUsers();}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e == null)   return;  Object value=e.getNewValue();  if (value == null)   return;  log.config(e.getPropertyName() + "=" + value+ " - "+ value.getClass().toString());  if (!(value instanceof MTreeNode))   return;  int nodeID=((MTreeNode)value).getNode_ID();  int size=m_mTab.getRowCount();  int row=-1;  for (int i=0; i < size; i++) {    if (m_mTab.getKeyID(i) == nodeID) {      row=i;      break;    }  }  if (row == -1) {    if (nodeID > 0)     log.log(Level.WARNING,"Tab does not have ID with Node_ID=" + nodeID);    return;  }  m_mTab.navigate(row);}  }
class C{  public int nextInt(){  return nextInt(n,p);}  }
class C{  public Customers(){  this("CUSTOMERS",null);}  }
class C{  public final Object lookup(SymbolNode opNode,Context c,TLCState s,boolean cutoff){  boolean isVarDecl=(opNode.getKind() == VariableDeclKind);  Object result=c.lookup(opNode,cutoff && isVarDecl);  if (result != null)   return result;  result=opNode.getToolObject(TLCGlobals.ToolId);  if (result != null)   return result;  if (opNode.getKind() == UserDefinedOpKind) {    ExprNode body=((OpDefNode)opNode).getBody();    result=body.getToolObject(TLCGlobals.ToolId);    while ((result == null) && (body.getKind() == SubstInKind)) {      body=((SubstInNode)body).getBody();      result=body.getToolObject(TLCGlobals.ToolId);    }    if (result != null)     return result;  }  result=s.lookup(opNode.getName());  if (result != null)   return result;  return opNode;}  }
class C{  public void nextCharacter(EditorState editorState){  int currentOffset=editorState.getCurrentOffset();  MathSequence currentField=editorState.getCurrentField();  if (currentOffset < currentField.size() && currentField.getArgument(currentOffset) != null && currentField.getArgument(currentOffset) instanceof MathContainer && ((MathContainer)currentField.getArgument(currentOffset)).hasChildren()) {    MathComponent component=currentField.getArgument(currentOffset);    firstField(editorState,(MathContainer)component);  } else   if (currentOffset < currentField.size()) {    editorState.incCurrentOffset();  } else {    nextField(editorState);  }}  }
class C{  protected void sequence_IntersectionTypeExpressionOLD_TypeRef(ISerializationContext context,IntersectionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected static DataCiteMetadata.Titles convertEmlTitles(Eml eml) throws InvalidMetadataException {  if (!Strings.isNullOrEmpty(eml.getTitle())) {    DataCiteMetadata.Titles titles=FACTORY.createDataCiteMetadataTitles();    DataCiteMetadata.Titles.Title primary=FACTORY.createDataCiteMetadataTitlesTitle();    primary.setValue(eml.getTitle());    primary.setLang(eml.getMetadataLanguage());    titles.getTitle().add(primary);    return titles;  } else {    throw new InvalidMetadataException("DataCite schema (v3) requires at least one title");  }}  }
class C{  public Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  ArrayList<Certificate> result=new ArrayList<>();  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    byte[] encoding=null;    int second_asn1_tag=-1;    inStream.mark(1);    int ch;    while ((ch=inStream.read()) != -1) {      if (ch == '-') {        encoding=decodePEM(inStream,FREE_BOUND_SUFFIX);      } else       if (ch == 0x30) {        encoding=null;        inStream.reset();        inStream.mark(CERT_CACHE_SEED_LENGTH);      } else {        if (result.size() == 0) {          throw new CertificateException("Unsupported encoding");        } else {          inStream.reset();          return result;        }      }      BerInputStream in=(encoding == null) ? new BerInputStream(inStream) : new BerInputStream(encoding);      second_asn1_tag=in.next();      if (encoding == null) {        inStream.reset();      }      if (second_asn1_tag != ASN1Constants.TAG_C_SEQUENCE) {        if (result.size() == 0) {          break;        } else {          return result;        }      } else {        if (encoding == null) {          result.add(getCertificate(inStream));        } else {          result.add(getCertificate(encoding));        }      }      inStream.mark(1);    }    if (result.size() != 0) {      return result;    } else     if (ch == -1) {      throw new CertificateException("There is no data in the stream");    }    if (second_asn1_tag == ASN1Constants.TAG_OID) {      ContentInfo info=(ContentInfo)((encoding != null) ? ContentInfo.ASN1.decode(encoding) : ContentInfo.ASN1.decode(inStream));      SignedData data=info.getSignedData();      if (data == null) {        throw new CertificateException("Invalid PKCS7 data provided");      }      List<android.framework.org.apache.harmony.security_custom.x509.Certificate> certs=data.getCertificates();      if (certs != null) {        for (        android.framework.org.apache.harmony.security_custom.x509.Certificate cert : certs) {          result.add(new X509CertImpl(cert));        }      }      return result;    }    throw new CertificateException("Unsupported encoding");  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public Parking(){  super();}  }
class C{  public void finishActivity(){  Activity activity=activityStack.lastElement();  finishActivity(activity);}  }
class C{  private void drawComposite(){  final Rectangle rect=this.getClientArea();  final Image newImage=new Image(getDisplay(),Math.max(1,rect.width),Math.max(1,rect.height));  final GC gc=new GC(newImage);  final boolean inside=this.insideComposite || this.insideImage || this.insideInstruction|| this.insideText;  if (!inside && !this.selection) {    gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_WHITE));    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WHITE));    gc.drawRectangle(rect.x,rect.y,rect.width,rect.height);  } else {    final Color gradientColor=inside ? new Color(getDisplay(),220,231,243) : new Color(getDisplay(),241,241,241);    final Color borderColor=inside ? new Color(getDisplay(),35,107,178) : new Color(getDisplay(),192,192,192);    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WHITE));    gc.setBackground(gradientColor);    gc.fillGradientRectangle(rect.x,rect.y,rect.width,rect.height,true);    gc.setForeground(borderColor);    gc.drawRoundRectangle(rect.x,rect.y,rect.width - 1,rect.height - 1,2,2);    gradientColor.dispose();    borderColor.dispose();  }  gc.dispose();  this.setBackgroundImage(newImage);  if (this.oldImage != null) {    this.oldImage.dispose();  }  this.oldImage=newImage;}  }
class C{  public void remove(){  try {    removeThrow();  } catch (  SQLException e) {    closeQuietly();    throw new IllegalStateException("Could not delete " + dataClass + " object "+ last,e);  }}  }
class C{  public boolean isAsciiSuperset(){  return asciiSuperset;}  }
class C{  public static List<String> stringIds(Collection<? extends DataObjectRestRep> values){  List<String> ids=new ArrayList<String>();  if (values != null) {    for (    DataObjectRestRep value : values) {      ids.add(stringId(value));    }  }  return ids;}  }
class C{  public long toNanoseconds(){  return TimeUnit.NANOSECONDS.convert(length,timeUnit);}  }
class C{  public void testCase1(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={11,22,33,44,55,66,77,11,22,33};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public final double sampleMax(){  return _activeCountMax.getAndSet(_activeCount.get());}  }
class C{  private void finishItemListItem(StringBuilder result){  result.append("</div><div class=\"justchildren\"></div></div>");}  }
class C{  public static void addCompleteToIncludePathFromDoc(final FileObject doc){  FileObject ciRoot=getCiRoot(doc);  if (ciRoot == null) {    return;  }  Project project=FileOwnerQuery.getOwner(ciRoot);  if (project == null) {    return;  }  addCompleteToIncludePath(ciRoot,project);}  }
class C{  private void readSample(ParsableByteArray data){  int bytesToRead=Math.min(data.bytesLeft(),sampleSize - bytesRead);  currentOutput.sampleData(data,bytesToRead);  bytesRead+=bytesToRead;  if (bytesRead == sampleSize) {    currentOutput.sampleMetadata(timeUs,C.SAMPLE_FLAG_SYNC,sampleSize,0,null);    timeUs+=currentSampleDuration;    setFindingSampleState();  }}  }
class C{  protected void onClusterRendered(Cluster<T> cluster,Marker marker){}  }
class C{  protected void initDispatchServlet(ServletContext servletContext){  AnnotationConfigWebApplicationContext dispatchServletContext=new AnnotationConfigWebApplicationContext();  ServletRegistration.Dynamic servlet=servletContext.addServlet("springMvcServlet",new DispatcherServlet(dispatchServletContext));  servlet.addMapping("/");  servlet.setLoadOnStartup(1);}  }
class C{  @NoInline static DynamicLink resolveDynamicInvocation(){  VM.disableGC();  Address callingFrame=Magic.getCallerFramePointer(Magic.getFramePointer());  Address returnAddress=Magic.getReturnAddressUnchecked(callingFrame);  callingFrame=Magic.getCallerFramePointer(callingFrame);  int callingCompiledMethodId=Magic.getCompiledMethodID(callingFrame);  CompiledMethod callingCompiledMethod=CompiledMethods.getCompiledMethod(callingCompiledMethodId);  Offset callingInstructionOffset=callingCompiledMethod.getInstructionOffset(returnAddress);  VM.enableGC();  DynamicLink dynamicLink=new DynamicLink();  callingCompiledMethod.getDynamicLink(dynamicLink,callingInstructionOffset);  return dynamicLink;}  }
class C{  public static void splitRgb(int rgb,int[] result){  result[ALPHA]=(rgb >> SHIFT_ALPHA) & 0xff;  result[RED]=(rgb >> SHIFT_RED) & 0xff;  result[GREEN]=(rgb >> SHIFT_GREEN) & 0xff;  result[BLUE]=(rgb >> SHIFT_BLUE) & 0xff;}  }
class C{  @Override public void start(Map<String,String> props){  log.info("Start a MqttSourceTask");  mConfig=new MqttSourceConnectorConfig(props);  mMqttClientId=mConfig.getString(MqttSourceConstant.MQTT_CLIENT_ID) != null ? mConfig.getString(MqttSourceConstant.MQTT_CLIENT_ID) : MqttClient.generateClientId();  mKafkaTopic=mConfig.getString(MqttSourceConstant.KAFKA_TOPIC);  MqttConnectOptions connectOptions=new MqttConnectOptions();  String sslCa=mConfig.getString(MqttSourceConstant.MQTT_SSL_CA_CERT);  String sslCert=mConfig.getString(MqttSourceConstant.MQTT_SSL_CERT);  String sslPrivateKey=mConfig.getString(MqttSourceConstant.MQTT_SSL_PRIV_KEY);  if (sslCa != null && sslCert != null && sslPrivateKey != null) {    try {      connectOptions.setSocketFactory(SslUtils.getSslSocketFactory(sslCa,sslCert,sslPrivateKey,""));    } catch (    Exception e) {      log.info("[{}] error creating socketFactory",mMqttClientId);      e.printStackTrace();      return;    }  }  if (mConfig.getBoolean(MqttSourceConstant.MQTT_CLEAN_SESSION)) {    connectOptions.setCleanSession(mConfig.getBoolean(MqttSourceConstant.MQTT_CLEAN_SESSION));  }  connectOptions.setConnectionTimeout(mConfig.getInt(MqttSourceConstant.MQTT_CONNECTION_TIMEOUT));  connectOptions.setKeepAliveInterval(mConfig.getInt(MqttSourceConstant.MQTT_KEEP_ALIVE_INTERVAL));  connectOptions.setServerURIs(mConfig.getString(MqttSourceConstant.MQTT_SERVER_URIS).split(","));  if (mConfig.getString(MqttSourceConstant.MQTT_USERNAME) != null) {    connectOptions.setUserName(mConfig.getString(MqttSourceConstant.MQTT_USERNAME));  }  if (mConfig.getString(MqttSourceConstant.MQTT_PASSWORD) != null) {    connectOptions.setPassword(mConfig.getString(MqttSourceConstant.MQTT_PASSWORD).toCharArray());  }  try {    mClient=new MqttClient("tcp://127.0.0.1:1883",mMqttClientId,new MemoryPersistence());    mClient.setCallback(this);    mClient.connect(connectOptions);    log.info("[{}] Connected to Broker",mMqttClientId);  } catch (  MqttException e) {    log.error("[{}] Connection to Broker failed!",mMqttClientId,e);  }  try {    String topic=mConfig.getString(MqttSourceConstant.MQTT_TOPIC);    Integer qos=mConfig.getInt(MqttSourceConstant.MQTT_QUALITY_OF_SERVICE);    mClient.subscribe(topic,qos);    log.info("[{}] Subscribe to '{}' with QoS '{}'",mMqttClientId,topic,qos.toString());  } catch (  MqttException e) {    log.error("[{}] Subscribe failed! ",mMqttClientId,e);  }}  }
class C{  public static void updateFloat(VisualItem item,String field,float val){  item.setFloat(getStartField(field),item.getFloat(field));  item.setFloat(field,val);  item.setFloat(getEndField(field),val);}  }
class C{  public boolean isNotIn(){  return notIn;}  }
class C{  private boolean typesMatch(Class<V> valueType,Class getterType){  if (getterType != valueType) {    if (getterType.isPrimitive()) {      return (getterType == float.class && valueType == Float.class) || (getterType == int.class && valueType == Integer.class) || (getterType == boolean.class && valueType == Boolean.class)|| (getterType == long.class && valueType == Long.class)|| (getterType == double.class && valueType == Double.class)|| (getterType == short.class && valueType == Short.class)|| (getterType == byte.class && valueType == Byte.class)|| (getterType == char.class && valueType == Character.class);    }    return false;  }  return true;}  }
class C{  public NondominatedPopulation(DominanceComparator comparator){  this(comparator,Settings.getDuplicateMode());}  }
class C{  public T caseEntityPropertySource(EntityPropertySource object){  return null;}  }
class C{  public static <T>JAXBCoder<T> of(Class<T> jaxbClass){  return new JAXBCoder<>(jaxbClass);}  }
class C{  @SuppressWarnings("unused") public boolean isFrozen(){  return (player != null && player.isFrozen());}  }
class C{  private static Text newPrimitive(int length){  Text text=new Text(true);  text._count=length;  return text;}  }
class C{  public IndexSearcher createSearcher(){  MemoryIndexReader reader=new MemoryIndexReader();  IndexSearcher searcher=new IndexSearcher(reader);  searcher.setSimilarity(normSimilarity);  searcher.setQueryCache(null);  return searcher;}  }
class C{  @Override public void write(String str) throws IOException {  out.write(str);}  }
class C{  public boolean isUseAttr(){  return isUseSearch() && isUseAttrName();}  }
class C{  private int colToLoc(int col,Vector<MappingPair> vec){  int loc=col;  for (int i=0; (i < vec.size()) && (vec.elementAt(i).col <= col); i++) {    loc=loc + vec.elementAt(i).inc;  }  return loc;}  }
class C{  public void init(Environment env){  m_nameS=m_name;  m_typeS=m_type;  m_valueS=m_value;  try {    m_nameS=env.substitute(m_nameS);    m_typeS=env.substitute(m_typeS);    m_valueS=env.substitute(m_valueS);  } catch (  Exception ex) {  }  if (m_typeS.toLowerCase().startsWith("date") && m_typeS.indexOf(":") > 0) {    String format=m_typeS.substring(m_typeS.indexOf(":") + 1,m_typeS.length());    m_dateFormat=new SimpleDateFormat(format);    if (!m_valueS.toLowerCase().equals("now")) {      try {        m_parsedDate=m_dateFormat.parse(m_valueS);      } catch (      ParseException e) {        throw new IllegalArgumentException("Date value \"" + m_valueS + " \" can't be parsed with formatting string \""+ format+ "\"");      }    }  }}  }
class C{  public static ViewAction swipeRightSlow(){  return actionWithAssertions(new GeneralSwipeAction(Swipe.SLOW,translate(GeneralLocation.CENTER_LEFT,EDGE_FUZZ_FACTOR,0),GeneralLocation.CENTER_RIGHT,Press.FINGER));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  public StreamCorruptedException(){  super();}  }
class C{  public static byte toByteValue(char c){  return (byte)c;}  }
class C{  public int toggle(){  return toggle(ANIMATION_DURATION_MS);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.289 -0500",hash_original_method="EB6FF8B38000E2AA8E5468782EF53260",hash_generated_method="E0067301BC4D95F1F82B6EFF8CAC0C89") public void drawBitmap(Bitmap bitmap,Matrix matrix,Paint paint){  addTaint(bitmap.getTaintInt() + matrix.getTaintInt() + paint.getTaintInt());}  }
class C{  public void removeConflictModifiedListener(final ConflictCacheListener listener){  Check.notNull(listener,"listener");synchronized (listenerLock) {    conflictListeners.removeListener(listener,MODIFIED);  }}  }
class C{  public synchronized void addWatch(String filePath,Function<byte[],Void> onUpdate) throws IOException {  MorePreconditions.checkNotBlank(filePath);  Preconditions.checkNotNull(onUpdate);  File file=new File(filePath);  ByteSource byteSource=Files.asByteSource(file);  onUpdate.apply(byteSource.read());  ConfigFileInfo configFileInfo=watchedFileMap.get(filePath);  if (configFileInfo == null) {    configFileInfo=new ConfigFileInfo(file.lastModified(),byteSource.hash(HASH_FUNCTION));    watchedFileMap.put(filePath,configFileInfo);  }  configFileInfo.changeWatchers.add(onUpdate);}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  public Alert updateAlert(BigInteger alertId,Alert alert) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.PUT,requestUrl,alert);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Alert.class);}  }
class C{  Sample acquire(){  Sample acquired=head;  if (acquired == null) {    acquired=new Sample();  } else {    head=acquired.next;  }  return acquired;}  }
class C{  public void emit4(int od){  if (!alive)   return;  if (cp + 4 > code.length) {    emit1(od >> 24);    emit1(od >> 16);    emit1(od >> 8);    emit1(od);  } else {    code[cp++]=(byte)(od >> 24);    code[cp++]=(byte)(od >> 16);    code[cp++]=(byte)(od >> 8);    code[cp++]=(byte)od;  }}  }
class C{  public boolean isDrawLabels(String graticuleType){  if (graticuleType == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return getRenderingParams(graticuleType).isDrawLabels();}  }
class C{  public static String formatPeriodISO(final long startMillis,final long endMillis){  return formatPeriod(startMillis,endMillis,ISO_EXTENDED_FORMAT_PATTERN,false,TimeZone.getDefault());}  }
class C{  public static boolean deleteDir(final File self){  if (!self.exists())   return true;  if (!self.isDirectory())   return false;  File[] files=self.listFiles();  if (files == null)   return false;  boolean result=true;  for (  File file : files) {    if (file.isDirectory()) {      if (!deleteDir(file))       result=false;    } else {      if (!file.delete())       result=false;    }  }  if (!self.delete())   result=false;  return result;}  }
class C{  private double[] determineMinMaxDistance(Relation<ParameterizationFunction> relation,int dimensionality){  double[] min=new double[dimensionality - 1];  double[] max=new double[dimensionality - 1];  Arrays.fill(max,Math.PI);  HyperBoundingBox box=new HyperBoundingBox(min,max);  double d_min=Double.POSITIVE_INFINITY;  double d_max=Double.NEGATIVE_INFINITY;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    ParameterizationFunction f=relation.get(iditer);    HyperBoundingBox minMax=f.determineAlphaMinMax(box);    double f_min=f.function(SpatialUtil.getMin(minMax));    double f_max=f.function(SpatialUtil.getMax(minMax));    d_min=Math.min(d_min,f_min);    d_max=Math.max(d_max,f_max);  }  return new double[]{d_min,d_max};}  }
class C{  public ModbusException(){  super();}  }
class C{  public static NbtOutputStream writeDeflated(NbtTag tag,File file,boolean append) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new DeflaterOutputStream(new FileOutputStream(file,append)));  out.write(tag);  return out;}  }
class C{  public void testSpecDoc() throws Exception {  ObjectMapper m=new ObjectMapper();  JsonNode tree=m.readTree(SAMPLE_DOC_JSON_SPEC);  JsonParser jp=tree.traverse();  verifyJsonSpecSampleDoc(jp,true);}  }
class C{  public TreeNode(String name,TreeNode parent){  super();  this.name=name;  this.parent=parent;  if (this.parent != null)   this.parent.addChild(this);}  }
class C{  protected void handleSpillSlot(Interval interval){  assert interval.location() != null && (interval.canMaterialize() || isStackSlotValue(interval.location())) : "interval not assigned to a stack slot " + interval;}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  JSONObject jsonobject=null;  String string;  String tagName;  Object token;  token=x.nextToken();  if (token == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      token=x.nextToken();      if ("CDATA".equals(token)) {        if (x.next() == '[') {          string=x.nextCDATA();          if (string.length() > 0) {            context.accumulate("content",string);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      token=x.nextMeta();      if (token == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (token == LT) {        i+=1;      } else       if (token == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (token == QUEST) {    x.skipPast("?>");    return false;  } else   if (token == SLASH) {    token=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag " + token);    }    if (!token.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ token);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (token instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    tagName=(String)token;    token=null;    jsonobject=new JSONObject();    for (; ; ) {      if (token == null) {        token=x.nextToken();      }      if (token instanceof String) {        string=(String)token;        token=x.nextToken();        if (token == EQ) {          token=x.nextToken();          if (!(token instanceof String)) {            throw x.syntaxError("Missing value");          }          jsonobject.accumulate(string,XML.stringToValue((String)token));          token=null;        } else {          jsonobject.accumulate(string,"");        }      } else       if (token == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        if (jsonobject.length() > 0) {          context.accumulate(tagName,jsonobject);        } else {          context.accumulate(tagName,"");        }        return false;      } else       if (token == GT) {        for (; ; ) {          token=x.nextContent();          if (token == null) {            if (tagName != null) {              throw x.syntaxError("Unclosed tag " + tagName);            }            return false;          } else           if (token instanceof String) {            string=(String)token;            if (string.length() > 0) {              jsonobject.accumulate("content",XML.stringToValue(string));            }          } else           if (token == LT) {            if (parse(x,jsonobject,tagName)) {              if (jsonobject.length() == 0) {                context.accumulate(tagName,"");              } else               if (jsonobject.length() == 1 && jsonobject.opt("content") != null) {                context.accumulate(tagName,jsonobject.opt("content"));              } else {                context.accumulate(tagName,jsonobject);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  public FloatMemberValue(float f,ConstPool cp){  super('F',cp);  setValue(f);}  }
class C{  public LabelNode gotoLabel(final LabelNode l){  Instantiation owner=findOwner(instructions.indexOf(l));  return owner.rangeTable.get(l);}  }
class C{  void start(){  startTime=System.nanoTime();}  }
class C{  public Executor distributeOnAllCores(){  return distributeOn(Runtime.getRuntime().availableProcessors());}  }
class C{  public static String left(String s,int width,char fillChar){  if (s.length() >= width) {    return s;  }  StringBuffer sb=new StringBuffer(width);  sb.append(s);  for (int i=width - s.length(); --i >= 0; ) {    sb.append(fillChar);  }  return sb.toString();}  }
class C{  public void addChartSettingsListener(ChartSettingsListener listener){  if (settingsListenerList == null) {    settingsListenerList=new ArrayList<ChartSettingsListener>();  }  settingsListenerList.add(listener);}  }
class C{  private void visitIndirectInvocation(Tree.InvocationExpression that){  Tree.Term primary=unwrapExpressionUntilTerm(that.getPrimary());  if (primary == null) {    return;  }  Type pt=primary.getTypeModel();  if (!isTypeUnknown(pt)) {    if (that.getNamedArgumentList() != null) {      that.addError("named arguments not supported for indirect invocations");      return;    }    Tree.PositionalArgumentList pal=that.getPositionalArgumentList();    if (pal == null) {      return;    }    if (pt.isNothing()) {      that.setTypeModel(unit.getNothingType());    } else     if (checkCallable(pt,primary,"invoked expression must be callable")) {      Interface cd=unit.getCallableDeclaration();      List<Type> typeArgs=pt.getSupertype(cd).getTypeArgumentList();      if (!typeArgs.isEmpty()) {        that.setTypeModel(typeArgs.get(0));      }      if (typeArgs.size() >= 2) {        Type paramTypesAsTuple=typeArgs.get(1);        if (paramTypesAsTuple != null) {          TypeDeclaration pttd=paramTypesAsTuple.getDeclaration();          if (pttd instanceof ClassOrInterface && (pttd.isEmpty() || pttd.isTuple() || pttd.isSequence()|| pttd.isSequential())) {            checkIndirectInvocationArguments(that,paramTypesAsTuple,unit.getTupleElementTypes(paramTypesAsTuple),unit.isTupleLengthUnbounded(paramTypesAsTuple),unit.isTupleVariantAtLeastOne(paramTypesAsTuple),unit.getTupleMinimumLength(paramTypesAsTuple));          } else {            Type tt=getTupleType(pal.getPositionalArguments(),unit,false);            checkAssignable(tt,paramTypesAsTuple,pal,"argument list type must be assignable to parameter list type");          }        }      }    }  }}  }
class C{  public void append(ExtendedPathIterator epi,boolean connect){  float[] vals=new float[7];  while (!epi.isDone()) {    Arrays.fill(vals,0);    int type=epi.currentSegment(vals);    epi.next();    if (connect && (numVals != 0)) {      if (type == PathIterator.SEG_MOVETO) {        float x=vals[0];        float y=vals[1];        if ((x != cx) || (y != cy)) {          type=PathIterator.SEG_LINETO;        } else {          if (epi.isDone())           break;          type=epi.currentSegment(vals);          epi.next();        }      }      connect=false;    }switch (type) {case PathIterator.SEG_CLOSE:      closePath();    break;case PathIterator.SEG_MOVETO:  moveTo(vals[0],vals[1]);break;case PathIterator.SEG_LINETO:lineTo(vals[0],vals[1]);break;case PathIterator.SEG_QUADTO:quadTo(vals[0],vals[1],vals[2],vals[3]);break;case PathIterator.SEG_CUBICTO:curveTo(vals[0],vals[1],vals[2],vals[3],vals[4],vals[5]);break;case ExtendedPathIterator.SEG_ARCTO:arcTo(vals[0],vals[1],vals[2],(vals[3] != 0),(vals[4] != 0),vals[5],vals[6]);break;}}}  }
class C{  public static long[] parseDateTime(long val){  if ((val != 0) && (val <= 100)) {    throw new InvalidDateFormatException("date",Long.toString(val));  }  if (val < DATETIME_MONTH_SCALE) {    val*=DATETIME_DATE_SCALE;  }  long[] dt=decodeDateTime(val);  if (val != 0) {    dt[YEAR_INDEX]=adjustTwoDigitYear(dt[YEAR_INDEX]);  }  if (!isValidDateTime_Zeros(dt)) {    throw new InvalidDateFormatException("date",Long.toString(val));  }  if (!isValidHrMinSec(dt,true,true)) {    throw new InvalidDateFormatException("datetime",Long.toString(val));  }  return dt;}  }
class C{  public void buildPanel(){  GridBagLayout gridBagLayout=new GridBagLayout();  gridBagLayout.columnWidths=new int[]{10,89,60,10};  gridBagLayout.rowHeights=new int[]{20,0,15,20,0,0,15,0,0,0};  gridBagLayout.columnWeights=new double[]{0.0,1.0,0.0,0.0};  gridBagLayout.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0};  setLayout(gridBagLayout);  childOneEnergySpinner=new JSpinner();  childOneEnergySpinner.setPreferredSize(new Dimension(50,20));  ButtonGroup lifeModeButtonGroup=new ButtonGroup();  JLabel lblMaxLifespan=new JLabel("Max self-destruct age");  GridBagConstraints gbc_lblMaxLifespan=new GridBagConstraints();  gbc_lblMaxLifespan.anchor=GridBagConstraints.WEST;  gbc_lblMaxLifespan.insets=new Insets(0,0,5,5);  gbc_lblMaxLifespan.gridx=1;  gbc_lblMaxLifespan.gridy=1;  add(lblMaxLifespan,gbc_lblMaxLifespan);  maxLifespanSpinner=new JSpinner();  maxLifespanSpinner.setPreferredSize(new Dimension(50,20));  GridBagConstraints gbc_maxLifespanSpinner=new GridBagConstraints();  gbc_maxLifespanSpinner.fill=GridBagConstraints.HORIZONTAL;  gbc_maxLifespanSpinner.anchor=GridBagConstraints.NORTH;  gbc_maxLifespanSpinner.insets=new Insets(0,0,5,5);  gbc_maxLifespanSpinner.gridx=2;  gbc_maxLifespanSpinner.gridy=1;  add(maxLifespanSpinner,gbc_maxLifespanSpinner);  JLabel childOneEnergyLabel=new JLabel("Min childbearing age");  GridBagConstraints gbc_childOneEnergyLabel=new GridBagConstraints();  gbc_childOneEnergyLabel.anchor=GridBagConstraints.WEST;  gbc_childOneEnergyLabel.insets=new Insets(0,0,5,5);  gbc_childOneEnergyLabel.gridx=1;  gbc_childOneEnergyLabel.gridy=3;  add(childOneEnergyLabel,gbc_childOneEnergyLabel);  GridBagConstraints gbc_childOneEnergySpinner=new GridBagConstraints();  gbc_childOneEnergySpinner.fill=GridBagConstraints.HORIZONTAL;  gbc_childOneEnergySpinner.anchor=GridBagConstraints.NORTH;  gbc_childOneEnergySpinner.insets=new Insets(0,0,5,5);  gbc_childOneEnergySpinner.gridx=2;  gbc_childOneEnergySpinner.gridy=3;  add(childOneEnergySpinner,gbc_childOneEnergySpinner);  childTwoEnergySpinner=new JSpinner();  childTwoEnergySpinner.setPreferredSize(new Dimension(50,20));  JLabel childTwoEnergyLabel=new JLabel("Min 1st - 2nd child age");  GridBagConstraints gbc_childTwoEnergyLabel=new GridBagConstraints();  gbc_childTwoEnergyLabel.anchor=GridBagConstraints.WEST;  gbc_childTwoEnergyLabel.insets=new Insets(0,0,5,5);  gbc_childTwoEnergyLabel.gridx=1;  gbc_childTwoEnergyLabel.gridy=4;  add(childTwoEnergyLabel,gbc_childTwoEnergyLabel);  GridBagConstraints gbc_childTwoEnergySpinner=new GridBagConstraints();  gbc_childTwoEnergySpinner.fill=GridBagConstraints.HORIZONTAL;  gbc_childTwoEnergySpinner.anchor=GridBagConstraints.NORTH;  gbc_childTwoEnergySpinner.insets=new Insets(0,0,5,5);  gbc_childTwoEnergySpinner.gridx=2;  gbc_childTwoEnergySpinner.gridy=4;  add(childTwoEnergySpinner,gbc_childTwoEnergySpinner);  childThreeEnergySpinner=new JSpinner();  childThreeEnergySpinner.setPreferredSize(new Dimension(50,20));  JLabel childThreeEnergyLabel=new JLabel("Min age btw ++ children");  GridBagConstraints gbc_childThreeEnergyLabel=new GridBagConstraints();  gbc_childThreeEnergyLabel.anchor=GridBagConstraints.WEST;  gbc_childThreeEnergyLabel.insets=new Insets(0,0,5,5);  gbc_childThreeEnergyLabel.gridx=1;  gbc_childThreeEnergyLabel.gridy=5;  add(childThreeEnergyLabel,gbc_childThreeEnergyLabel);  GridBagConstraints gbc_childThreeEnergySpinner=new GridBagConstraints();  gbc_childThreeEnergySpinner.fill=GridBagConstraints.HORIZONTAL;  gbc_childThreeEnergySpinner.insets=new Insets(0,0,5,5);  gbc_childThreeEnergySpinner.anchor=GridBagConstraints.NORTH;  gbc_childThreeEnergySpinner.gridx=2;  gbc_childThreeEnergySpinner.gridy=5;  add(childThreeEnergySpinner,gbc_childThreeEnergySpinner);  lblSproutMode=new JLabel("Sprout Mode (Show Seeds)");  GridBagConstraints gbc_lblSproutMode=new GridBagConstraints();  gbc_lblSproutMode.anchor=GridBagConstraints.WEST;  gbc_lblSproutMode.insets=new Insets(0,0,5,5);  gbc_lblSproutMode.gridx=1;  gbc_lblSproutMode.gridy=7;  add(lblSproutMode,gbc_lblSproutMode);  panel=new JPanel();  GridBagConstraints gbc_panel=new GridBagConstraints();  gbc_panel.gridwidth=2;  gbc_panel.insets=new Insets(0,0,5,5);  gbc_panel.fill=GridBagConstraints.BOTH;  gbc_panel.gridx=1;  gbc_panel.gridy=8;  add(panel,gbc_panel);  GridBagLayout gbl_panel=new GridBagLayout();  gbl_panel.columnWidths=new int[]{30,40,40,0};  gbl_panel.rowHeights=new int[]{0,0};  gbl_panel.columnWeights=new double[]{1.0,0.0,0.0,Double.MIN_VALUE};  gbl_panel.rowWeights=new double[]{0.0,Double.MIN_VALUE};  panel.setLayout(gbl_panel);  ButtonGroup sproutModeButtonGroup=new ButtonGroup();  rdbtnFunctional=new JRadioButton("Functional");  sproutModeButtonGroup.add(rdbtnFunctional);  rdbtnFunctional.setToolTipText("<html>Seeds are immediately replaced<br>by sprouts before being shown.<br>More efficient for reproduction.</html>");  rdbtnFunctional.setSelected(true);  rdbtnFunctional.setAlignmentX(1.0f);  GridBagConstraints gbc_radioButton=new GridBagConstraints();  gbc_radioButton.anchor=GridBagConstraints.EAST;  gbc_radioButton.insets=new Insets(0,0,0,5);  gbc_radioButton.gridx=1;  gbc_radioButton.gridy=0;  panel.add(rdbtnFunctional,gbc_radioButton);  rdbtnVisual=new JRadioButton("Visual");  sproutModeButtonGroup.add(rdbtnVisual);  rdbtnVisual.setToolTipText("<html>Seeds are displayed but an<br>extra step is added to show them.</html>");  GridBagConstraints gbc_rdbtnVisual=new GridBagConstraints();  gbc_rdbtnVisual.anchor=GridBagConstraints.EAST;  gbc_rdbtnVisual.gridx=2;  gbc_rdbtnVisual.gridy=0;  panel.add(rdbtnVisual,gbc_rdbtnVisual);}  }
class C{  String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String[] selectionArgs,String groupBy,String having){  return null;}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier){  this(keyIdentifier,null,null);}  }
class C{  private boolean checkConditions(final List<AcceptabilityCondition> conditions){  for (  AcceptabilityCondition condition : conditions) {    AcceptabilityCondition.Fullfillment fullfillment=condition.getFullfillment(passages);    if (fullfillment.isFullfilled()) {      fullfilledConditions.put(condition,new TripInfo(fullfillment));    }  }  passages=null;  return fullfilledConditions.size() > 0;}  }
class C{  protected String url(int zoomLevel,int xTile,int yTile){  StringBuilder sb=new StringBuilder(_url);  sb.append("/");  sb.append(zoomLevel);  sb.append("/");  sb.append(xTile);  sb.append("/");  sb.append(yTile);  sb.append(".png");  return sb.toString();}  }
class C{  public MatrixDrawable(Drawable drawable,Matrix matrix){  super(Preconditions.checkNotNull(drawable));  mMatrix=matrix;}  }
class C{  @OnMessage public void echoPongMessage(PongMessage pm){}  }
class C{  public double localScore(int i,int... parents){  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;  double residualVariance=covariances.get(i,i);  int n=getSampleSize();  int p=parents.length;  Matrix covxx=getSelection1(covariances,parents);  try {    Matrix covxxInv=covxx.inverse();    Matrix covxy=getSelection2(covariances,parents,i);    Matrix b=covxxInv.times(covxy);    double dot=0.0;    for (int j=0; j < covxy.getRowDimension(); j++) {      for (int k=0; k < covxy.getColumnDimension(); k++) {        dot+=covxy.get(j,k) * b.get(j,k);      }    }    residualVariance-=dot;    if (residualVariance <= 0) {      if (isVerbose()) {        out.println("Nonpositive residual varianceY: resVar / varianceY = " + (residualVariance / covariances.get(i,i)));      }      return Double.NaN;    }    double c=getPenaltyDiscount();    return score(residualVariance,n,logn,p,c);  } catch (  Exception e) {    boolean removedOne=true;    while (removedOne) {      List<Integer> _parents=new ArrayList<>();      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);      _parents.removeAll(forbidden);      parents=new int[_parents.size()];      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);      removedOne=printMinimalLinearlyDependentSet(parents,covariances);    }    return Double.NaN;  }}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  return true;}  }
class C{  public TextNode textNode(String text){  return TextNode.valueOf(text);}  }
class C{  void log(Resources resources,int... rules){  final ArrayDeque<Node> roots=findRoots(rules);  for (  Node node : roots) {    printNode(resources,node);  }}  }
class C{  public CCAccelDeccelAmplitude(CCIntervalAction action,float d){  super(d);  rate=1.0f;  other=action;}  }
class C{  public BoolQueryBuilder disableCoord(boolean disableCoord){  this.disableCoord=disableCoord;  return this;}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  private SignatureLibraryRelease loadTMHMMRelease(){  SignatureLibraryRelease release=null;  final Query releaseQuery=entityManager.createQuery("select r from SignatureLibraryRelease r where r.version = :version and r.library = :signatureLibrary");  releaseQuery.setParameter("version",signatureLibraryRelease.getVersion());  releaseQuery.setParameter("signatureLibrary",signatureLibraryRelease.getLibrary());  @SuppressWarnings("unchecked") List<SignatureLibraryRelease> releaseList=releaseQuery.getResultList();  if (releaseList.size() == 1 && releaseList.get(0) != null) {    release=releaseList.get(0);  } else   if (releaseList.size() > 1) {    throw new IllegalStateException("There is more than one SignatureLibraryRelease record for version " + signatureLibraryRelease.getVersion() + " of TMHMM in the databases.");  } else {    entityManager.persist(new SignatureLibraryRelease(signatureLibraryRelease.getLibrary(),signatureLibraryRelease.getVersion()));  }  return release;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributes01.class,args);}  }
class C{  public static void enableLodControl(Camera camera,Node rootNode){  Terrain terrain=(Terrain)findTerrain(rootNode);  if (terrain == null)   return;  TerrainLodControl control=((Spatial)terrain).getControl(TerrainLodControl.class);  if (control != null) {    control.setCamera(camera);  }}  }
class C{  public EditableOMLine(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  private String eFormatString(final double x,final char eChar){  final char[] ca4;  final char[] ca5;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign) {        ca4="+Inf".toCharArray();      } else       if (leadingSpace) {        ca4=" Inf".toCharArray();      } else {        ca4="Inf".toCharArray();      }    } else {      ca4="-Inf".toCharArray();    }  } else   if (Double.isNaN(x)) {    if (leadingSign) {      ca4="+NaN".toCharArray();    } else     if (leadingSpace) {      ca4=" NaN".toCharArray();    } else {      ca4="NaN".toCharArray();    }  } else {    ca4=eFormatDigits(x,eChar);  }  ca5=applyFloatPadding(ca4,false);  return new String(ca5);}  }
class C{  private double clipCurrentIndex(double currentIndex){  if (moveRate > 0) {    return Math.min(currentIndex,endIndex);  } else {    return Math.max(currentIndex,startIndex);  }}  }
class C{  private void updateStateView(CSP csp,Assignment assignment){  Platform.runLater(null);  simPaneCtrl.waitAfterStep();}  }
class C{  public static void updateNextRun(int etlJobId,String cronExprStr,Date startTime) throws Exception {  Time.CronExpression cronExpression=new Time.CronExpression(cronExprStr);  Date nextTime=cronExpression.getNextValidTimeAfter(startTime);  updateNextRun(etlJobId,nextTime);}  }
class C{  public void testRestartWithNoDeployable() throws Exception {  if ("glassfish4x".equals(getTestData().containerId)) {    return;  }  if ("jonas4x".equals(getTestData().containerId)) {    return;  }  setContainer(createContainer(createConfiguration(ConfigurationType.STANDALONE)));  if (ContainerType.EMBEDDED.equals(getContainer().getType()) && getTestData().containerId.startsWith("jetty")) {    return;  }  getLocalContainer().start();  assertEquals(State.STARTED,getContainer().getState());  getLocalContainer().restart();  assertEquals(State.STARTED,getContainer().getState());  getLocalContainer().stop();  assertEquals(State.STOPPED,getContainer().getState());  getLocalContainer().restart();  assertEquals(State.STARTED,getContainer().getState());  getLocalContainer().stop();  assertEquals(State.STOPPED,getContainer().getState());}  }
class C{  public void finer(CharSequence message,Throwable e){  log(Level.FINER,message,e);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String reclassFile=null;  int row, col;  float progress=0;  double z, val;  int i;  double noData;  boolean assignMode=false;  boolean assignModeFound=false;  boolean delimiterFound=false;  double[][] reclassData=new double[0][0];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassFile=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null) || (reclassFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int numClasses=countLines(reclassFile);    DataInputStream in=null;    BufferedReader br=null;    try {      FileInputStream fstream=new FileInputStream(reclassFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      if (reclassFile != null) {        String line;        String[] str;        if (!assignMode) {          reclassData=new double[3][numClasses];        } else {          reclassData=new double[2][numClasses];        }        i=0;        while ((line=br.readLine().trim()) != null) {          str=line.split(delimiter);          if (!delimiterFound) {            if (str.length < 2) {              delimiter=",";              str=line.split(delimiter);              if (str.length < 2) {                delimiter=" ";                str=line.split(delimiter);                if (str.length < 2) {                  showFeedback("No recognizable delimiter in text file. Columns must " + "be seperated by tabs, commas, or spaces.");                  return;                } else {                  delimiterFound=true;                }              } else {                delimiterFound=true;              }            } else {              delimiterFound=true;            }          }          if (!assignModeFound) {            if (str.length == 2) {              assignMode=true;            } else {              assignMode=false;            }            assignModeFound=true;          }          if (!assignMode) {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);            reclassData[2][i]=Double.parseDouble(str[2]);          } else {            reclassData[0][i]=Double.parseDouble(str[0]);            reclassData[1][i]=Double.parseDouble(str[1]);          }          i++;        }        in.close();        br.close();      }    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    }catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    } finally {      try {        if (in != null || br != null) {          in.close();          br.close();        }      } catch (      java.io.IOException ex) {      }    }    if (!assignMode) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z >= reclassData[1][i]) && (z < reclassData[2][i])) {                val=reclassData[0][i];                break;              }            }            if (val != noData) {              output.setValue(row,col,val);            } else {              output.setValue(row,col,z);            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            val=noData;            for (i=0; i < numClasses; i++) {              if ((z == reclassData[1][i])) {                val=reclassData[0][i];                break;              }              if (val != noData) {                output.setValue(row,col,val);              } else {                output.setValue(row,col,z);              }            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected <S extends PropertySource<?>>List<S> findPropertySources(Class<S> sourceClass){  List<S> managedSources=new LinkedList<>();  LinkedList<PropertySource<?>> sources=toLinkedList(environment.getPropertySources());  while (!sources.isEmpty()) {    PropertySource<?> source=sources.pop();    if (source instanceof CompositePropertySource) {      CompositePropertySource comp=(CompositePropertySource)source;      sources.addAll(comp.getPropertySources());    } else     if (sourceClass.isInstance(source)) {      managedSources.add(sourceClass.cast(source));    }  }  return managedSources;}  }
class C{  private synchronized long applyTermDeletes(CoalescedUpdates updates,SegmentState[] segStates) throws IOException {  long startNS=System.nanoTime();  int numReaders=segStates.length;  long delTermVisitedCount=0;  long segTermVisitedCount=0;  FieldTermIterator iter=updates.termIterator();  String field=null;  SegmentQueue queue=null;  BytesRef term;  while ((term=iter.next()) != null) {    if (iter.field() != field) {      field=iter.field();      queue=new SegmentQueue(numReaders);      long segTermCount=0;      for (int i=0; i < numReaders; i++) {        SegmentState state=segStates[i];        Terms terms=state.reader.fields().terms(field);        if (terms != null) {          segTermCount+=terms.size();          state.termsEnum=terms.iterator();          state.term=state.termsEnum.next();          if (state.term != null) {            queue.add(state);          }        }      }      assert checkDeleteTerm(null);    }    assert checkDeleteTerm(term);    delTermVisitedCount++;    long delGen=iter.delGen();    while (queue.size() != 0) {      SegmentState state=queue.top();      segTermVisitedCount++;      int cmp=term.compareTo(state.term);      if (cmp < 0) {        break;      } else       if (cmp == 0) {      } else {        TermsEnum.SeekStatus status=state.termsEnum.seekCeil(term);        if (status == TermsEnum.SeekStatus.FOUND) {        } else {          if (status == TermsEnum.SeekStatus.NOT_FOUND) {            state.term=state.termsEnum.term();            queue.updateTop();          } else {            queue.pop();          }          continue;        }      }      assert state.delGen != delGen;      if (state.delGen < delGen) {        final Bits acceptDocs=state.rld.getLiveDocs();        state.postingsEnum=state.termsEnum.postings(state.postingsEnum,PostingsEnum.NONE);        assert state.postingsEnum != null;        while (true) {          final int docID=state.postingsEnum.nextDoc();          if (docID == DocIdSetIterator.NO_MORE_DOCS) {            break;          }          if (acceptDocs != null && acceptDocs.get(docID) == false) {            continue;          }          if (!state.any) {            state.rld.initWritableLiveDocs();            state.any=true;          }          state.rld.delete(docID);        }      }      state.term=state.termsEnum.next();      if (state.term == null) {        queue.pop();      } else {        queue.updateTop();      }    }  }  if (infoStream.isEnabled("BD")) {    infoStream.message("BD",String.format(Locale.ROOT,"applyTermDeletes took %.1f msec for %d segments and %d packets; %d del terms visited; %d seg terms visited",(System.nanoTime() - startNS) / 1000000.,numReaders,updates.terms.size(),delTermVisitedCount,segTermVisitedCount));  }  return delTermVisitedCount;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static short parseShort(String string,int radix) throws NumberFormatException {  int intValue=Integer.parseInt(string,radix);  short result=(short)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for short: \"" + string + "\"");}  }
class C{  public void reply(NceReply r){  if (!r.isUnsolicited()) {    int bits;synchronized (this) {      bits=r.pollValue();      awaitingReply=false;      this.notify();    }    currentAIU.markChanges(bits);    if (log.isDebugEnabled()) {      String str=jmri.util.StringUtil.twoHexFromInt((bits >> 4) & 0xf);      str+=" ";      str=jmri.util.StringUtil.appendTwoHexFromInt(bits & 0xf,str);      log.debug("sensor poll reply received: \"" + str + "\"");    }  }}  }
class C{  public NavigationEvent(Navigator source,T valueOld,T valueNew){  this.source=source;  this.valueOld=valueOld;  this.valueNew=valueNew;}  }
class C{  public void addEntry(PutAllEntryData putAllEntry){  this.putAllData[this.putAllDataSize]=putAllEntry;  this.putAllDataSize+=1;}  }
class C{  private static ParseResults parseMimeType(String mimeType){  String[] parts=StringKit.split(mimeType,";");  ParseResults results=new ParseResults();  results.params=new HashMap<String,String>();  for (int i=1; i < parts.length; ++i) {    String p=parts[i];    String[] subParts=StringKit.split(p,"=");    if (subParts.length == 2) {      results.params.put(subParts[0].trim(),subParts[1].trim());    }  }  String fullType=parts[0].trim();  if (fullType.equals("*")) {    fullType="*/*";  }  int slashIndex=fullType.indexOf('/');  if (slashIndex != -1) {    results.type=fullType.substring(0,slashIndex);    results.subType=fullType.substring(slashIndex + 1);  } else {    results.type=fullType;    results.subType="*";  }  return results;}  }
class C{  public static String keyString(SecretKeys keys){  return keys.toString();}  }
class C{  public SelectionDialog(Dialog owner,String key,int mode,Object[] arguments,List<String> optionsToSelect,List<String> optionsToCheck){  this(owner,key,mode,arguments);  this.optionsToSelect=optionsToSelect;  this.optionsToCheck=optionsToCheck;}  }
class C{  private String makeDeleteAllUrl() throws UnsupportedEncodingException {  HttpSolrClient client=(HttpSolrClient)getSolrClient();  String deleteQuery="<delete><query>*:*</query></delete>";  return client.getBaseURL() + "/update?commit=true&stream.body=" + URLEncoder.encode(deleteQuery,"UTF-8");}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public Piece(int magnitude){  this.magnitude=new BigDecimal(magnitude);  this.unitType=PieceUnit.PC.getBaseUnit();}  }
class C{  public void removeFromTags(String removeTag){  tags.remove(removeTag);  firePropertyChange(TAG,null,removeTag);  firePropertyChange(TAGS_AS_STRING,null,removeTag);}  }
class C{  @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:26.538 -0500",hash_original_method="A28646D8654C968065CCEE80C360B171",hash_generated_method="5BDF40E1FD876DCB9A201D9F7020DAE4") @Override public void onDestroyView(){  super.onDestroyView();  if (mDialog != null) {    mViewDestroyed=true;    mDialog.dismiss();    mDialog=null;  }}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public static boolean isBookmarkInMobileBookmarksBranch(Context context,long nodeId){  Boolean result=chromeBrowserProviderCall(Boolean.class,ChromeBrowserProvider.CLIENT_API_IS_BOOKMARK_IN_MOBILE_BOOKMARKS_BRANCH,context,argsToBundle(nodeId));  return result != null ? result.booleanValue() : false;}  }
class C{  public Object remove(int index){  Object o=opt(index);  this.myArrayList.remove(index);  return o;}  }
class C{  private void processIfCmp(Instruction s){  ValueGraphVertex v=new ValueGraphVertex(s);  graph.addGraphNode(v);  nameMap.put(s,v);  v.setLabel(s.operator(),3);  link(v,findOrCreateVertex(bypassMoves(IfCmp.getVal1(s))),0);  link(v,findOrCreateVertex(bypassMoves(IfCmp.getVal2(s))),1);  link(v,findOrCreateVertex(IfCmp.getCond(s)),2);}  }
class C{  public void write(long x){  writeByte((int)((x >>> 56) & 0xff));  writeByte((int)((x >>> 48) & 0xff));  writeByte((int)((x >>> 40) & 0xff));  writeByte((int)((x >>> 32) & 0xff));  writeByte((int)((x >>> 24) & 0xff));  writeByte((int)((x >>> 16) & 0xff));  writeByte((int)((x >>> 8) & 0xff));  writeByte((int)((x >>> 0) & 0xff));}  }
class C{  public void install(ISelectionProvider selectionProvider){  if (selectionProvider == null)   return;  if (selectionProvider instanceof IPostSelectionProvider) {    IPostSelectionProvider provider=(IPostSelectionProvider)selectionProvider;    provider.addPostSelectionChangedListener(this);  } else {    selectionProvider.addSelectionChangedListener(this);  }}  }
class C{  int compareTo(PageParamInfo other){  if (mFormula != null && other.mFormula == null)   return 1;  if (mFormula == null && other.mFormula != null)   return -1;  if (mType == other.mType)   return 0;  if (mType == Type.PAGE_NUMBER)   return 1;  if (other.mType == Type.PAGE_NUMBER)   return -1;  return 0;}  }
class C{  public void insertBack(Item x){  if (size == items.length) {    resize(size * RFACTOR);  }  items[size]=x;  size=size + 1;}  }
class C{  private boolean holdsSinglePolyfillSource(PolyfillValidationState state){  EList<TMember> myPolyMember=state.polyType.getOwnedMembers();  XtextResource res=(XtextResource)state.polyType.eResource();  IResourceDescriptions index=resourceDescriptionsProvider.getResourceDescriptions(res);  IContainer container=containerManager.getContainer(res.getResourceServiceProvider().getResourceDescriptionManager().getResourceDescription(res),index);  Iterable<IEObjectDescription> iterEObj=container.getExportedObjects(TypesPackage.Literals.TCLASSIFIER,N4TSQualifiedNameProvider.getPolyfillFQN(state.filledType,qualifiedNameProvider),false);  ListMultimap<TMember,TModule> clashProviders=LinkedListMultimap.create();  for (  IEObjectDescription pivotObjectDescription : iterEObj) {    EObject eob=pivotObjectDescription.getEObjectOrProxy();    if (eob.eIsProxy()) {      eob=EcoreUtil.resolve(eob,res);    }    if (eob == state.polyType) {      continue;    }    EList<TMember> pivotPolyMember=((TClassifier)eob).getOwnedMembers();    ListMultimap<TMember,TMember> clashing=findClashingMembersByName(myPolyMember,pivotPolyMember);    for (    TMember myMember : clashing.keySet()) {      clashProviders.put(myMember,clashing.get(myMember).get(0).getContainingModule());    }  }  List<TMember> sortedMembers=clashProviders.keySet().stream().sorted().collect(Collectors.toList());  for (  TMember myMember : sortedMembers) {    String uris=Stream.concat(Stream.of(myMember.getContainingModule()),clashProviders.get(myMember).stream()).map(null).sorted().reduce("",null);    if (uris.startsWith(PREFIX_LIST))     uris=uris.substring(PREFIX_LIST.length());    int lastPrefix_idx=uris.lastIndexOf(PREFIX_LIST);    if (lastPrefix_idx >= 0) {      StringBuffer sb=new StringBuffer(uris);      uris=sb.replace(lastPrefix_idx,lastPrefix_idx + PREFIX_LIST.length()," and ").toString();    }    String memberAxis=myMember.getContainingType().getName() + "." + myMember.getName();    String msg=IssueCodes.getMessageForCLF_POLYFILL_MULTIPOLYFILLS_MEMBER_CONFLICT(uris,memberAxis);    state.host.addIssue(msg,myMember.getAstElement(),N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME,IssueCodes.CLF_POLYFILL_MULTIPOLYFILLS_MEMBER_CONFLICT);  }  return true;}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public ValueModelUserLink(String name,ArrayListUserLink defaultValue){  super(name,defaultValue);}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("ConjunctionCriterion ( ").append("criteria = ").append(this.criteria).append(TAB).append("type = ").append(this.type).append(TAB).append(" )");  return retValue.toString();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static boolean isInArea(Coord coord,Coord[] area){  return (getCompassQuarter(area[0],coord) == 1 && getCompassQuarter(area[1],coord) == 3);}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    put(key,value);  }  return this;}  }
class C{  public void testSerialization(){  LogFormat f1=new LogFormat(10.0,"10",true);  LogFormat f2=(LogFormat)TestUtilities.serialised(f1);  assertEquals(f1,f2);}  }
class C{  public void addProcessListener(INodejsProcessListener listener){synchronized (listeners) {    listeners.add(listener);  }}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  if (SynthLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  protected void checkConsistency(){  for (  Collection<? extends ConfigGroup> sets : getParameterSets().values()) {    for (    ConfigGroup set : sets)     set.checkConsistency();  }}  }
class C{  public void lookupTable(String[] values) throws IOException {  writeCode(LOOKUP_TABLE);  ByteArrayOutputStream baout=new ByteArrayOutputStream();  OutStream bout=new OutStream(baout);  bout.writeUI16(values.length);  for (int i=0; i < values.length; i++) {    bout.writeString(values[i]);  }  bout.flush();  byte[] data=baout.toByteArray();  out.writeUI16(data.length);  out.write(data);}  }
class C{  public CDumpAllWaiter(final IDebugger debugger,final IAddress offset,final int size){  m_debugger=Preconditions.checkNotNull(debugger,"IE01429: Debugger argument can not be null");  m_offset=Preconditions.checkNotNull(offset,"IE01430: Offset argument can not be null");  m_size=size;  debugger.addListener(m_debuggerListener);  debugger.getProcessManager().addListener(m_processListener);}  }
class C{  private void bindPhoto(Bitmap bitmap){  if (bitmap != null) {    if (mPhotoView != null) {      mPhotoView.bindPhoto(bitmap);    }    enableImageTransforms(true);  }}  }
class C{  public void put(int b){  put((byte)(b & 0xFF));}  }
class C{  protected LiteralImpl(){  super();}  }
class C{  protected void revalidate(){  valid=true;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @NonNull public static Animator alpha(float alpha){  return alpha(alpha,0);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  public List transform(OrganoProductor[] organosProductores){  List ltOrganosProductores=new ArrayList();  if (organosProductores != null) {    for (int i=0; i < organosProductores.length; i++) {      OrganoProductor organoProductor=(OrganoProductor)organosProductores[i];      OrganoProductorImpl organoProductorImpl=new OrganoProductorImpl(organoProductor.getId(),organoProductor.getInicioProduccion());      ltOrganosProductores.add(organoProductorImpl);    }  }  return ltOrganosProductores;}  }
class C{  private boolean parseZoneLine(Scanner s,List<TZDBZone> zoneList){  TZDBZone zone=new TZDBZone();  zoneList.add(zone);  zone.standardOffset=parseOffset(s.next());  String savingsRule=parseOptional(s.next());  if (savingsRule == null) {    zone.fixedSavingsSecs=0;    zone.savingsRule=null;  } else {    try {      zone.fixedSavingsSecs=parsePeriod(savingsRule);      zone.savingsRule=null;    } catch (    Exception ex) {      zone.fixedSavingsSecs=null;      zone.savingsRule=savingsRule;    }  }  zone.text=s.next();  if (s.hasNext()) {    zone.year=Integer.parseInt(s.next());    if (s.hasNext()) {      parseMonthDayTime(s,zone);    }    return false;  } else {    return true;  }}  }
class C{  protected VisualizePanel createPanel(Instances data) throws Exception {  VisualizePanel result=new ThresholdVisualizePanel();  PlotData2D plot=new PlotData2D(data);  plot.setPlotName("Micro-averaged Performance");  plot.m_displayAllPoints=true;  boolean[] connectPoints=new boolean[data.numInstances()];  for (int cp=1; cp < connectPoints.length; cp++)   connectPoints[cp]=true;  plot.setConnectPoints(connectPoints);  result.addPlot(plot);  if (data.attribute(SAMPLES) != null)   result.setXIndex(data.attribute(SAMPLES).index());  if (data.attribute(ACCURACY) != null)   result.setYIndex(data.attribute(ACCURACY).index());  return result;}  }
class C{  public Bundle onSaveInstanceState(){  Bundle bundle=new Bundle();  bundle.putBoolean(DIALOG_SHOWING_TAG,mShowing);  if (mCreated) {    bundle.putBundle(DIALOG_HIERARCHY_TAG,mWindow.saveHierarchyState());  }  return bundle;}  }
class C{  public static BoundThisTypeRef createBoundThisTypeRefStructural(ParameterizedTypeRef actualThisTypeRef,ThisTypeRefStructural thisTypeStructural){  if (actualThisTypeRef == null) {    throw new NullPointerException("Actual this type must not be null!");  }  BoundThisTypeRef boundThisTypeRef=TypeRefsFactory.eINSTANCE.createBoundThisTypeRef();  boundThisTypeRef.setActualThisTypeRef(TypeUtils.copyIfContained(actualThisTypeRef));  copyStructuralTypingInfo(boundThisTypeRef,thisTypeStructural);  return boundThisTypeRef;}  }
class C{  public Matrix3f rotationZYX(float angleZ,float angleY,float angleX){  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float m_sinZ=-sinZ;  float m_sinY=-sinY;  float m_sinX=-sinX;  float nm00=cosZ;  float nm01=sinZ;  float nm10=m_sinZ;  float nm11=cosZ;  float nm20=nm00 * sinY;  float nm21=nm01 * sinY;  float nm22=cosY;  m00=nm00 * cosY;  m01=nm01 * cosY;  m02=m_sinY;  m10=nm10 * cosX + nm20 * sinX;  m11=nm11 * cosX + nm21 * sinX;  m12=nm22 * sinX;  m20=nm10 * m_sinX + nm20 * cosX;  m21=nm11 * m_sinX + nm21 * cosX;  m22=nm22 * cosX;  return this;}  }
class C{  public ToStringBuilder append(String fieldName,short[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public void add(BaseBlock... blocks){  for (  BaseBlock block : blocks) {    add(block);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!isInstanceAttribute() && (isSerNo() || isLot() || isGuaranteeDate()))   setIsInstanceAttribute(true);  return true;}  }
class C{  public PaymentChannelServerState(TransactionBroadcaster broadcaster,Wallet wallet,ECKey serverKey,long minExpireTime){  this.state=State.WAITING_FOR_REFUND_TRANSACTION;  this.serverKey=checkNotNull(serverKey);  this.wallet=checkNotNull(wallet);  this.broadcaster=checkNotNull(broadcaster);  this.minExpireTime=minExpireTime;}  }
class C{  public void commit(){  if (database != null) {    lastModificationId=database.getNextModificationDataId();  }}  }
class C{  public void testLastMessageAcked() throws JMSException {  connection.start();  Session session=connection.createSession(false,ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);  Queue queue=session.createQueue(getQueueName());  MessageProducer producer=session.createProducer(queue);  TextMessage msg1=session.createTextMessage("msg1");  TextMessage msg2=session.createTextMessage("msg2");  TextMessage msg3=session.createTextMessage("msg3");  producer.send(msg1);  producer.send(msg2);  producer.send(msg3);  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  msg=consumer.receive(1000);  assertNotNull(msg);  msg=consumer.receive(1000);  assertNotNull(msg);  msg.acknowledge();  session.close();  session=connection.createSession(false,ActiveMQSession.INDIVIDUAL_ACKNOWLEDGE);  consumer=session.createConsumer(queue);  msg=consumer.receive(1000);  assertNotNull(msg);  assertEquals(msg1,msg);  msg=consumer.receive(1000);  assertNotNull(msg);  assertEquals(msg2,msg);  msg=consumer.receive(1000);  assertNull(msg);  session.close();}  }
class C{  public boolean isAlwaysUpdateable(){  if (isVirtualColumn() || !m_vo.IsUpdateable)   return false;  return m_vo.IsAlwaysUpdateable;}  }
class C{  public static String convertTime(int time){  time/=1000;  int minute=time / 60;  int second=time % 60;  minute%=60;  return String.format("%02d:%02d",minute,second);}  }
class C{  protected synchronized void putJarTypeInfo(IJavaElement type,Object info){  this.cache.jarTypeCache.put(type,info);}  }
class C{  protected boolean activateAccelerometer(){  if (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),(int)(mAccelerometerInterval * 1000.0f)))   return true;  PLLog.debug("PLView::activateAccelerometer","Accelerometer sensor is not available on the device!");  return false;}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,int index,int length){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,index,length,false);}  }
class C{  protected void notifyReceivedMsg(MqttWireMessage message) throws MqttException {  final String methodName="notifyReceivedMsg";  this.lastInboundActivity=System.currentTimeMillis();  log.fine(CLASS_NAME,methodName,"651",new Object[]{new Integer(message.getMessageId()),message});  if (!quiescing) {    if (message instanceof MqttPublish) {      MqttPublish send=(MqttPublish)message;switch (send.getMessage().getQos()) {case 0:case 1:        if (callback != null) {          callback.messageArrived(send);        }      break;case 2:    persistence.put(getReceivedPersistenceKey(message),(MqttPublish)message);  inboundQoS2.put(new Integer(send.getMessageId()),send);this.send(new MqttPubRec(send),null);break;default :}} else if (message instanceof MqttPubRel) {MqttPublish sendMsg=(MqttPublish)inboundQoS2.get(new Integer(message.getMessageId()));if (sendMsg != null) {if (callback != null) {callback.messageArrived(sendMsg);}} else {MqttPubComp pubComp=new MqttPubComp(message.getMessageId());this.send(pubComp,null);}}}}  }
class C{  private void clearCache(){  getCacheForEntryById().clear();  getCacheForEntryByParentId().clear();  getCacheForDeletedEntries().clear();  getCacheForUserById().clear();}  }
class C{  public static boolean isRunningMacOSX(){  return System.getProperty("os.name").startsWith("Mac");}  }
class C{  public static void visitClassLiteral(MethodVisitor mv,ClassNode classNode){  if (ClassHelper.isPrimitiveType(classNode)) {    mv.visitFieldInsn(GETSTATIC,getClassInternalName(ClassHelper.getWrapper(classNode)),"TYPE","Ljava/lang/Class;");  } else {    mv.visitLdcInsn(org.objectweb.asm.Type.getType(getTypeDescription(classNode)));  }}  }
class C{  public boolean isPsuedoVarRef(){  java.lang.String ns=m_qname.getNamespaceURI();  if ((null != ns) && ns.equals(PSUEDOVARNAMESPACE)) {    if (m_qname.getLocalName().startsWith("#"))     return true;  }  return false;}  }
class C{  public static boolean isSupplementaryCodePoint(int codePoint){  return codePoint >= MIN_SUPPLEMENTARY_CODE_POINT && codePoint < MAX_CODE_POINT + 1;}  }
class C{  public void updateAmountCost(){  if (movementQuantity.signum() > 0) {    costDetail.setCostAmt(costDetail.getAmt().subtract(costDetail.getCostAdjustment()));    costDetail.setCostAmtLL(costDetail.getAmtLL().subtract(costDetail.getCostAdjustmentLL()));  } else   if (movementQuantity.signum() < 0) {    costDetail.setCostAmt(costDetail.getAmt().add(adjustCost));    costDetail.setCostAmtLL(costDetail.getAmtLL().add(adjustCostLowerLevel));  }  costDetail.setCumulatedQty(getNewAccumulatedQuantity(lastCostDetail));  costDetail.setCumulatedAmt(getNewAccumulatedAmount(lastCostDetail));  final String idColumnName=CostEngine.getIDColumnName(model);  costDetail.set_ValueOfColumn(idColumnName,CostEngine.getIDColumn(model));  if (model instanceof MInOutLine) {    MInOutLine ioLine=(MInOutLine)model;    costDetail.setC_OrderLine_ID(ioLine.getC_OrderLine_ID());    costDetail.setC_InvoiceLine_ID(0);  }  if (model instanceof MMatchInv && costDetail.getM_InOutLine_ID() == 0) {    MMatchInv iMatch=(MMatchInv)model;    costDetail.setM_InOutLine_ID(iMatch.getM_InOutLine_ID());  }  if (model instanceof MMatchPO && costDetail.getM_InOutLine_ID() == 0) {    MMatchPO poMatch=(MMatchPO)model;    costDetail.setM_InOutLine_ID(poMatch.getM_InOutLine_ID());  }  if (model instanceof MLandedCostAllocation) {    MLandedCostAllocation allocation=(MLandedCostAllocation)model;    costDetail.setM_InOutLine_ID(allocation.getM_InOutLine_ID());    costDetail.setC_InvoiceLine_ID(allocation.getC_InvoiceLine_ID());    costDetail.setProcessed(false);  }  costDetail.saveEx();}  }
class C{  @SuppressWarnings({"UseOfSystemOutOrSystemErr","HardCodedStringLiteral","CallToPrintStackTrace","UseOfObsoleteCollectionType"}) public static void main(String[] args){  if (args.length != 2) {    System.err.println("Invalid amount of arguments: " + Arrays.asList(args));    System.exit(ERROR_EXIT_CODE);  }  int port;  try {    port=Integer.parseInt(args[0]);  } catch (  NumberFormatException ex) {    System.err.println("Invalid port number: " + args[0]);    System.exit(ERROR_EXIT_CODE);    return;  }  final String handlerValue=System.getenv(IDEA_REBASE_HANDER_NO);  if (handlerValue == null) {    System.err.println("Handler no is not specified");    System.exit(ERROR_EXIT_CODE);  }  int handler;  try {    handler=Integer.parseInt(handlerValue);  } catch (  NumberFormatException ex) {    System.err.println("Invalid handler number: " + handlerValue);    System.exit(ERROR_EXIT_CODE);    return;  }  String file=args[1];  try {    XmlRpcClientLite client=new XmlRpcClientLite("127.0.0.1",port);    Vector<Object> params=new Vector<Object>();    params.add(handler);    if (System.getProperty("os.name").toLowerCase().startsWith("windows") && file.startsWith(CYGDRIVE_PREFIX)) {      int p=CYGDRIVE_PREFIX.length();      file=file.substring(p,p + 1) + ":" + file.substring(p + 1);    }    params.add(new File(file).getAbsolutePath());    Integer exitCode=(Integer)client.execute(HANDLER_NAME + ".editCommits",params);    if (exitCode == null) {      exitCode=ERROR_EXIT_CODE;    }    System.exit(exitCode.intValue());  } catch (  Exception e) {    System.err.println("Unable to contact IDEA: " + e);    e.printStackTrace();    System.exit(ERROR_EXIT_CODE);  }}  }
class C{  protected void replaceText(CharSequence text){switch (mAutoCompleteMode) {case AUTOCOMPLETE_MODE_SINGLE:    ((InternalAutoCompleteTextView)mInputView).superReplaceText(text);  break;case AUTOCOMPLETE_MODE_MULTI:((InternalMultiAutoCompleteTextView)mInputView).superReplaceText(text);break;}}  }
class C{  protected StepExecution(){}  }
class C{  @Override public void addEdge(final InstructionGraphEdge edge){  super.addEdge(edge);}  }
class C{  public AccountInfo(final Account a){  id=a.getId();  fullName=a.getFullName();  preferredEmail=a.getPreferredEmail();  username=a.getUserName();}  }
class C{  public int hammingWeightB(int n){  int res=0;  for (int i=0; i < 32; i++)   if ((n >>> i & 0x1) == 1)   res++;  return res;}  }
class C{  private ResourceImpl aggregate(ResourceImpl resourceA,ResourceImpl resourceB) throws NotFoundException {  final String typeId=resourceA.getType();  final ResourceType resourceType=getResourceType(typeId);  return resourceType.aggregate(resourceA,resourceB);}  }
class C{  public void addValue(String key,boolean val,String comment) throws HeaderCardException {  addHeaderCard(key,new HeaderCard(key,val,comment));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  } else   if (obj instanceof String) {    String theString=(String)obj;    return toString().equalsIgnoreCase(theString);  } else   if (obj instanceof MailAddress) {    MailAddress addr=(MailAddress)obj;    return getLocalPart().equalsIgnoreCase(addr.getLocalPart()) && getDomain().equalsIgnoreCase(addr.getDomain());  }  return false;}  }
class C{  public static void time(ErrorMessages message,Timer time){  if (Options.time) {    String msg=ErrorMessages.get(message,time.toString());    out.println(msg);  }}  }
class C{  public SaveVisionWorldAsAction(final VisionWorldDesktopComponent desktopComponent){  super("Save As...");  if (desktopComponent == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.desktopComponent=desktopComponent;  putValue(SMALL_ICON,ResourceManager.getImageIcon("SaveAs.png"));  putValue(SHORT_DESCRIPTION,"Save Vision World As");}  }
class C{  protected void processBDDPLists(){  int count=0;  Set<NodePortTuple> nptList=new HashSet<NodePortTuple>();  while (count < BDDP_TASK_SIZE && quarantineQueue.peek() != null) {    NodePortTuple npt;    npt=quarantineQueue.remove();    if (!toRemoveFromQuarantineQueue.remove(npt)) {      sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    }    nptList.add(npt);    count++;  }  count=0;  while (count < BDDP_TASK_SIZE && maintenanceQueue.peek() != null) {    NodePortTuple npt;    npt=maintenanceQueue.remove();    if (!toRemoveFromMaintenanceQueue.remove(npt)) {      sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    }    count++;  }  for (  NodePortTuple npt : nptList) {    generateSwitchPortStatusUpdate(npt.getNodeId(),npt.getPortId());  }}  }
class C{  public Counter newCounter(String key){  return new UnsynchronizedLongCounter(key);}  }
class C{  public Provider<TypeDefinitionGitLocationProvider> provideTypeDefinitionGitLocationProvider(){  return Access.contributedProvider(TypeDefinitionGitLocationProvider.class);}  }
class C{  public List<NamedRelatedResourceRep> listStoragePools(URI id){  StoragePoolList response=client.get(StoragePoolList.class,getIdUrl() + "/storage-pools",id);  return defaultList(response.getPools());}  }
class C{  public static String buildUiResourceUriPrefixPath(Service service){  return buildUiResourceUriPrefixPath(service.getClass());}  }
class C{  public double distance(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  private boolean checkBreachDuration(double threshold,Trigger t){  long expectedBreachDuration=t.getBreachDurationSecs() * 1000L;  Long breachStartTime=this.breachCounterMap.get(t.generateKey());  if (null == breachStartTime) {    setBreachStartTime(t,Long.valueOf(System.currentTimeMillis()));    logger.debug("Set breach start time to NOW for app " + t.getAppId() + ", trigger "+ t.getTriggerId()+ "-"+ t.getMetric()+ "-"+ t.getThresholdType());    return false;  }  long currentTime=System.currentTimeMillis();  long breachDuration=currentTime - breachStartTime.longValue();  logger.debug("Current breach duration is " + breachDuration / 1000 + " seconds. Expected breach duration is " + t.getBreachDurationSecs());  if (breachDuration >= expectedBreachDuration) {    return true;  } else   return false;}  }
class C{  public static boolean handleEvaluationVersion(final Window parent){  if (isBetaVersion() && hasExpired()) {    CMessageBox.showInformation(parent,String.format("Your beta version of %s has expired.",Constants.PROJECT_NAME_VERSION));    return false;  }  return true;}  }
class C{  public void stop(){  stopped=true;  focusing=false;  cancelOutstandingTask();  if (useAutoFocus) {    try {      camera.cancelAutoFocus();    } catch (    RuntimeException re) {      Log.w(TAG,"Unexpected exception while cancelling focusing",re);    }  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void doPut(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static void onlyNominalAttributes(Attributes attributes,String task) throws OperatorException {  for (  Attribute attribute : attributes) {    if (!Ontology.ATTRIBUTE_VALUE_TYPE.isA(attribute.getValueType(),Ontology.NOMINAL)) {      throw new UserError(null,103,task,attribute.getName());    }  }}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  setPropertiesFromAttributes(handler,rawName,attributes,this);  try {    Source sourceFromURIResolver=getSourceFromUriResolver(handler);    String hrefUrl=getBaseURIOfIncludedStylesheet(handler,sourceFromURIResolver);    if (handler.importStackContains(hrefUrl)) {      throw new org.xml.sax.SAXException(XSLMessages.createMessage(getStylesheetInclErr(),new Object[]{hrefUrl}));    }    handler.pushImportURL(hrefUrl);    handler.pushImportSource(sourceFromURIResolver);    int savedStylesheetType=handler.getStylesheetType();    handler.setStylesheetType(this.getStylesheetType());    handler.pushNewNamespaceSupport();    try {      parse(handler,uri,localName,rawName,attributes);    }  finally {      handler.setStylesheetType(savedStylesheetType);      handler.popImportURL();      handler.popImportSource();      handler.popNamespaceSupport();    }  } catch (  TransformerException te) {    handler.error(te.getMessage(),te);  }}  }
class C{  public static String enumToCounter(Enum e){  return e.name();}  }
class C{  protected void processPacket(Packet packet){  if (packet == null) {    return;  }  while (!resultQueue.offer(packet)) {    resultQueue.poll();  }}  }
class C{  public static void editLocalEdgeComment(final AbstractSQLProvider provider,final INaviEdge edge,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00856: provider argument can not be null");  Preconditions.checkNotNull(edge,"IE00857: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE00858: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE00874: userId argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  public boolean isALevelTechnicallyValid(final String signatureId){  SignatureWrapper signatureWrapper=getSignatureByIdNullSafe(signatureId);  return signatureWrapper.isALevelTechnicallyValid();}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public void addEmotion(final String trigger,final String npcAction){  add(ConversationStates.IDLE,Arrays.asList(trigger),ConversationStates.IDLE,null,new NPCEmoteAction(npcAction));  add(ConversationStates.ATTENDING,Arrays.asList(trigger),ConversationStates.ATTENDING,null,new NPCEmoteAction(npcAction));}  }
class C{  public static void copyFile(File sourceFile,File destFile) throws IOException {  FileInputStream fis=new FileInputStream(sourceFile);  FileOutputStream fos=new FileOutputStream(destFile);  fis.getChannel().transferTo(0,sourceFile.length(),fos.getChannel());  fis.close();  fos.close();}  }
class C{  public boolean remove(T value){  if (value == null) {    throw new IllegalArgumentException("BinaryTree cannot store 'null' values.");  }  if (root == null) {    return false;  }  RightThreadedBinaryNode<T> node=root;  RightThreadedBinaryNode<T> parent=null;  RightThreadedBinaryNode<T> n;  do {    int c=value.compareTo((T)node.value);    if (c < 0) {      if ((n=node.getLeftSon()) == null) {        break;      } else {        parent=node;        node=n;      }    } else     if (c > 0) {      if ((n=node.getRightSon()) == null) {        break;      } else {        parent=node;        node=n;      }    } else {      removeHelper(node,parent);      return true;    }  } while (n != null);  return false;}  }
class C{  private static String lz(int num){  return String.format("%02d",num);}  }
class C{  public int read(InputStream is){  init();  if (is != null) {    if (!(is instanceof BufferedInputStream))     is=new BufferedInputStream(is);    in=(BufferedInputStream)is;    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  IOException e) {  }  return status;}  }
class C{  public CEventTableMenu(final JTable table,final List<ITraceEvent> traces){  addOpenFunction(SwingUtilities.getWindowAncestor(table),traces);  add(new JMenuItem(CActionProxy.proxy(new CSearchTableAction(SwingUtilities.getWindowAncestor(table),table))));  add(new CopySelectionAction(table));}  }
class C{  public Set<PersonUser> findPersonUsersByNameInGroup(String tenantName,PrincipalId groupId,String searchString,int limit) throws Exception {  return getService().findPersonUsersByNameInGroup(tenantName,groupId,searchString,limit,this.getServiceContext());}  }
class C{  public boolean scale(@NonNull TextureView view,@NonNull ScaleType scaleType){  if (!ready()) {    requestedScaleType=scaleType;    requestedModificationView=new WeakReference<>(view);    return false;  }  if (view.getHeight() == 0 || view.getWidth() == 0) {    Log.d(TAG,"Unable to apply scale with a view size of (" + view.getWidth() + ", "+ view.getHeight()+ ")");    return false;  }  currentScaleType=scaleType;switch (scaleType) {case CENTER:    applyCenter(view);  break;case CENTER_CROP:applyCenterCrop(view);break;case CENTER_INSIDE:applyCenterInside(view);break;case FIT_CENTER:applyFitCenter(view);break;case NONE:setScale(view,1,1);break;}return true;}  }
class C{  protected Control createTitleControl(Composite parent){  titleLabel=new Label(parent,SWT.NONE);  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).span(showDialogMenu ? 1 : 2,1).applyTo(titleLabel);  if (titleText != null) {    titleLabel.setText(titleText);  }  return titleLabel;}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  static void checkCompatible(FieldInfo fieldInfo){  if (fieldInfo.getDocValuesType() != DocValuesType.NONE && fieldInfo.getDocValuesType() != TYPE.docValuesType()) {    throw new IllegalArgumentException("field=\"" + fieldInfo.name + "\" was indexed with docValuesType="+ fieldInfo.getDocValuesType()+ " but this type has docValuesType="+ TYPE.docValuesType()+ ", is the field really a LatLonDocValuesField?");  }}  }
class C{  public Vec3D applyTo(ReadonlyVec3D v){  return applyToSelf(new Vec3D(v));}  }
class C{  public Boolean shouldOpenExternalUrl(String url){  return null;}  }
class C{  public CacheClosedException(String msg){  super(msg);  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache != null) {    initCause(cache.getDisconnectCause());  }}  }
class C{  public BufferedShapeLayer(){  super();  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.StandardPCPolicy(this));}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public RtpPacket readRtpPacket() throws TimeoutException {  byte[] data=(byte[])mBuffer.getObject(mTimeout);  if (data == null) {    throw new TimeoutException("Unable to fetch packet from FIFO queue!");  }  RtpPacket pkt=parseRtpPacket(data);  if (pkt != null) {    mStats.numPackets++;    mStats.numBytes+=data.length;    RtpSource s=mRtcpSession.getMySource();    s.setSsrc(pkt.ssrc);    s.activeSender=true;    s.receiveRtpPacket(pkt);    pkt.seqnum=s.generateExtendedSequenceNumber(pkt.seqnum);    return pkt;  }  return readRtpPacket();}  }
class C{  public NestableRuntimeException(String msg,Throwable cause){  super(msg);  this.cause=cause;}  }
class C{  protected DoubleMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseDoubleMatrix2D(this.elements,rowOffsets,columnOffsets,0);}  }
class C{  public T process(ResultSet rs) throws SQLException {  return (T)JdbcUtils.getResultSetValue(rs,this.mIndex,this.mExpectedType);}  }
class C{  public final void increaseReadBytes(long nbBytesRead,long currentTime){  throughputCalculationLock.lock();  try {    readBytes+=nbBytesRead;    lastReadTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public static DoubleMatrix2D minus(DoubleMatrix2D A,double s){  return A.assign(F.minus(s));}  }
class C{  public String toString(){  return getClass().getName() + "@" + Integer.toHexString(hashCode());}  }
class C{  public BoundedFifoBuffer(){  this(32);}  }
class C{  @Deprecated public static Configuration create(){  return createConfiguration();}  }
class C{  public boolean userCanDeleteGroup(int connectedUserId,int GroupId,String entidad) throws Exception {  boolean can=false;  int mgrGroup=Defs.NULL_ID;  try {    mgrGroup=this.getGroupMgrId(GroupId,entidad);    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_CREATE,mgrGroup,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public void consumer(Class<?> api,@Pin ServiceRefAmp serviceRef,Result<? super Cancel> result){  String path=api.getName();  String address=address(path);  EventNodeAsset node=lookupPubSubNode(address);  Cancel cancel=node.consumeImpl(serviceRef);  result.ok(cancel);}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  private File testWriteInDefinedFormat(final GamaGraph graph,final String extension){  System.out.println("testing the writing in this format: " + format);  File file=TestUtils.getTmpFile("emptyGraph",extension);  IGraphWriter writer=AvailableGraphWriters.getGraphWriter(format);  System.out.println("will use writer: " + writer.getClass().getCanonicalName());  writer.writeGraph(null,graph,null,file.getAbsolutePath());  assertTrue(file.exists());  assertFalse(file.isDirectory());  System.out.println("(file was created)");  return file;}  }
class C{  public UnixNumericGroupPrincipal(String name,boolean primaryGroup){  if (name == null) {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("invalid.null.input.value","sun.security.util.AuthResources"));    Object[] source={"name"};    throw new NullPointerException(form.format(source));  }  this.name=name;  this.primaryGroup=primaryGroup;}  }
class C{  AbstractBufferStrategy(long initialExtent,long maximumExtent,int offsetBits,long nextOffset,BufferMode bufferMode,boolean readOnly){  super(offsetBits);  assert nextOffset >= 0;  if (bufferMode == null)   throw new IllegalArgumentException();  this.initialExtent=initialExtent;  this.maximumExtent=maximumExtent;  this.nextOffset=new AtomicLong(nextOffset);  this.commitOffset=new AtomicLong(nextOffset);  this.bufferMode=bufferMode;  this.open=true;  this.readOnly=readOnly;}  }
class C{  public void testAddExtraClasspathWorksWithNoPreviousPath() throws Exception {  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  container.setFileHandler(fileHandler);  container.addExtraClasspath(TEST_FILE);  assertEquals(1,container.getExtraClasspath().length);  assertEquals(TEST_FILE,container.getExtraClasspath()[0]);}  }
class C{  public static GitCommittedChangeList parseChangeList(Project project,VirtualFile root,StringScanner s,boolean skipDiffsForMerge,GitHandler handler,boolean local,boolean revertable) throws VcsException {  ArrayList<Change> changes=new ArrayList<Change>();  final Date commitDate=GitUtil.parseTimestampWithNFEReport(s.line(),handler,s.getAllText());  final String revisionNumber=s.line();  final String parentsLine=s.line();  final String[] parents=parentsLine.length() == 0 ? ArrayUtil.EMPTY_STRING_ARRAY : parentsLine.split(" ");  String authorName=s.line();  String committerName=s.line();  committerName=GitUtil.adjustAuthorName(authorName,committerName);  String commentSubject=s.boundedToken('\u0003',true);  s.nextLine();  String commentBody=s.boundedToken('\u0003',true);  String fullComment;  if (commentSubject.length() == 0) {    fullComment=commentBody;  } else   if (commentBody.length() == 0) {    fullComment=commentSubject;  } else {    fullComment=commentSubject + "\n" + commentBody;  }  GitRevisionNumber thisRevision=new GitRevisionNumber(revisionNumber,commitDate);  if (skipDiffsForMerge || (parents.length <= 1)) {    final GitRevisionNumber parentRevision=parents.length > 0 ? resolveReference(project,root,parents[0]) : null;    parseChanges(project,root,thisRevision,local ? null : parentRevision,s,changes,null);  } else {    for (    String parent : parents) {      final GitRevisionNumber parentRevision=resolveReference(project,root,parent);      GitSimpleHandler diffHandler=new GitSimpleHandler(project,root,GitCommand.DIFF);      diffHandler.setSilent(true);      diffHandler.addParameters("--name-status","-M",parentRevision.getRev(),thisRevision.getRev());      String diff=diffHandler.run();      parseChanges(project,root,thisRevision,parentRevision,diff,changes,null);      if (changes.size() > 0) {        break;      }    }  }  String changeListName=String.format("%s(%s)",commentSubject,revisionNumber);  return new GitCommittedChangeList(changeListName,fullComment,committerName,thisRevision,commitDate,changes,revertable);}  }
class C{  public void storeCommonAttributes(Positionable p,Element element){  element.setAttribute("x","" + p.getX());  element.setAttribute("y","" + p.getY());  element.setAttribute("level",String.valueOf(p.getDisplayLevel()));  element.setAttribute("forcecontroloff",!p.isControlling() ? "true" : "false");  element.setAttribute("hidden",p.isHidden() ? "yes" : "no");  element.setAttribute("positionable",p.isPositionable() ? "true" : "false");  element.setAttribute("showtooltip",p.showTooltip() ? "true" : "false");  element.setAttribute("editable",p.isEditable() ? "true" : "false");  ToolTip tip=p.getTooltip();  String txt=tip.getText();  if (txt != null) {    Element elem=new Element("tooltip").addContent(txt);    element.addContent(elem);  }  if (p.getDegrees() != 0) {    element.setAttribute("degrees","" + p.getDegrees());  }}  }
class C{  public void popCurrentMatched(){  m_currentMatchTemplates.pop();  m_currentMatchedNodes.pop();}  }
class C{  public T id(View view){  this.view=view;  reset();  return self();}  }
class C{  ExternalProblem(Process process){  this(process.getInputStream(),process.getOutputStream());  RedirectStream.redirect(process.getErrorStream(),System.err);}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public void initFromStrings(String[] initData){  Long key;  String value;  String[] data;  hashData.clear();  for (  String anInitData : initData) {    data=anInitData.split(";");    for (    String aData : data) {      String[] words=aData.split("=");      key=Long.valueOf(words[0]);      value=words[1];      String xlatKey=value;      xlatKey=xlatKey.replaceAll("[ -]","_").toLowerCase();      value=Messages.getString(xlatKey,value);      log.debug(String.format("%s=%s\n",xlatKey,value));      hashData.put(key,value);    }  }}  }
class C{  public GreaterConstraint(Number constraintValue){  super(constraintValue);}  }
class C{  public static boolean isCommand(final String name){  return (valueOfName(name) != null);}  }
class C{  public AlgorithmException(Algorithm algorithm,String message){  this(algorithm,message,null);}  }
class C{  @Override public int hashCode(){  return getName().hashCode();}  }
class C{  public int size(){  return m_size;}  }
class C{  public void decodeContinuous(BarcodeCallback callback){  this.decodeMode=DecodeMode.CONTINUOUS;  this.callback=callback;  startDecoderThread();}  }
class C{  static Object[] toArrayImpl(Collection<?> c){  return fillArray(c,new Object[c.size()]);}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(CellFeed.class,RowCount.getDefaultDescription());  extProfile.declare(CellFeed.class,ColCount.getDefaultDescription());  super.declareExtensions(extProfile);  BatchUtils.declareExtensions(extProfile);}  }
class C{  private MapUtil(){}  }
class C{  public boolean test_autoselection(String package_name,List<String> details){  if (_autoselect_conditions == null || !is_applicable(package_name)) {    return false;  }  if (_autoselect_conditions.contains("applicable")) {    return true;  }  for (  String detail : details) {    if (_autoselect_conditions.contains(detail)) {      return true;    }  }  return false;}  }
class C{  public void verifyKey(VerifyEvent event){  try {    event.doit=false;    System.out.println("Heard keystroke.");    IBindingService ibindingService=(IBindingService)UIHelper.getActivePage().getActivePart().getSite().getService(IBindingService.class);    KeyStroke keyStroke=SWTKeySupport.convertAcceleratorToKeyStroke(SWTKeySupport.convertEventToUnmodifiedAccelerator(event));    Binding binding=ibindingService.getPerfectMatch(KeySequence.getInstance(keyStroke));    ParameterizedCommand pcommand=binding.getParameterizedCommand();    IHandlerService ihandlerService=(IHandlerService)UIHelper.getActivePage().getActivePart().getSite().getService(IHandlerService.class);    ihandlerService.executeCommand(pcommand,null);  } catch (  ExecutionException e) {    e.printStackTrace();  }catch (  NotDefinedException e) {    e.printStackTrace();  }catch (  NotEnabledException e) {    e.printStackTrace();  }catch (  NotHandledException e) {    e.printStackTrace();  } finally {    uninstall();  }}  }
class C{  public T caseActionArguments(ActionArguments object){  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String slopeHeader=null;  String aspectHeader=null;  String outputHeader=null;  String horizonAngleHeader=null;  double z;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col;  double azimuth=0;  boolean blnSlope=false;  double relativeAspect=0;  double slopeVal=0;  double aspectVal=0;  double HAval=0;  double gridRes=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      slopeHeader=args[i];    } else     if (i == 1) {      aspectHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Math.toRadians(Double.parseDouble(args[i]) - 90);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("slope")) {        blnSlope=true;      } else {        blnSlope=false;      }    } else     if (i == 4) {      if (blnSlope) {        if (args[i].toLowerCase().contains("not specified")) {          showFeedback("The horizon angle raster must be specified");          break;        }        horizonAngleHeader=args[i];      }    }  }  if ((slopeHeader == null) || aspectHeader == null || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster slope=new WhiteboxRaster(slopeHeader,"r");    int rows=slope.getNumberRows();    int cols=slope.getNumberColumns();    gridRes=(slope.getCellSizeX() + slope.getCellSizeY()) / 2;    double slopeNoData=slope.getNoDataValue();    WhiteboxRaster aspect=new WhiteboxRaster(aspectHeader,"r");    if (aspect.getNumberRows() != rows || aspect.getNumberColumns() != cols) {      showFeedback("the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double aspectNoData=aspect.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",slopeHeader,WhiteboxRaster.DataType.FLOAT,slopeNoData);    output.setPreferredPalette("grey.pal");    double[] slopeData;    double[] aspectData;    if (blnSlope) {      WhiteboxRaster horizonAngle=new WhiteboxRaster(horizonAngleHeader,"r");      if (horizonAngle.getNumberRows() != rows || horizonAngle.getNumberColumns() != cols) {        showFeedback("the input images must have the same dimensions (i.e. rows and columns).");        return;      }      double HANoData=horizonAngle.getNoDataValue();      double[] HAdata;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        HAdata=horizonAngle.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;            if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData && HAdata[col] != HANoData) {              slopeVal=Math.toRadians(slopeData[col]);              aspectVal=Math.toRadians(aspectData[col]);              HAval=Math.toRadians(HAdata[col]);              relativeAspect=Math.toRadians(relativeAspect);              output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));            } else {              output.setValue(row,col,slopeNoData);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      horizonAngle.close();    } else {      HAval=0;      for (row=0; row < rows; row++) {        slopeData=slope.getRowValues(row);        aspectData=aspect.getRowValues(row);        for (col=0; col < cols; col++) {          relativeAspect=azimuth - aspectData[col];          if (relativeAspect > 180) {            relativeAspect=360 - relativeAspect;          }          if (slopeData[col] != slopeNoData && aspectData[col] != aspectNoData) {            slopeVal=Math.toRadians(slopeData[col]);            aspectVal=Math.toRadians(aspectData[col]);            relativeAspect=Math.toRadians(relativeAspect);            output.setValue(row,col,Math.cos(slopeVal) * Math.sin(HAval) + Math.sin(slopeVal) * Math.cos(HAval) * Math.cos(relativeAspect));          } else {            output.setValue(row,col,slopeNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slope.close();    aspect.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SearchRequestBuilder addHighlightedField(String name){  highlightBuilder().field(name);  return this;}  }
class C{  public List<ResultSet> query(String table,String[] columns,String selection,String[] selectionArgs){  return query(table,columns,selection,selectionArgs,null,null,null);}  }
class C{  public static double avg(Array array) throws ExpressionException {  if (array.size() == 0)   return 0;  return sum(array) / array.size();}  }
class C{  private static void readEventTypeMap(final BufferedReader in,final Map<Integer,Pair<Integer,String>> eventTypeMap,final String prefixToStrip,final String postfixToStrip) throws IOException {  String line;  while (!(line=in.readLine()).isEmpty()) {    final int i=line.indexOf(':');    final int j=line.indexOf('(',i + 1);    final int k=line.indexOf(',',j + 1);    final int l=line.indexOf('\'',k + 1);    final int m=line.indexOf('\'',l + 1);    final String name=line.substring(l + 1 + prefixToStrip.length(),m - postfixToStrip.length()).intern();    eventTypeMap.put(Integer.parseInt(line.substring(0,i)),new Pair<>(Integer.parseInt(line.substring(j + 1,k)),name));  }}  }
class C{  public static void passedMutation(double distance,int mutationId){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  tracer.trace.mutationPassed(mutationId,distance);}  }
class C{  public String sqlMetadata_tableNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_tableNames(catalogName,schemaName);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  boolean maintainInputDimensions=Boolean.parseBoolean(args[2]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_clipped.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output;      if (!maintainInputDimensions) {        cellSizeX=input.getCellSizeX();        cellSizeY=input.getCellSizeY();        north=clip.getyMax() + cellSizeY / 2.0;        if (input.getNorth() < north) {          north=input.getNorth();        }        south=clip.getyMin() - cellSizeY / 2.0;        if (input.getSouth() > south) {          south=input.getSouth();        }        east=clip.getxMax() + cellSizeX / 2.0;        if (input.getEast() < east) {          east=input.getEast();        }        west=clip.getxMin() - cellSizeX / 2.0;        if (input.getWest() > west) {          west=input.getWest();        }        rows=(int)(Math.ceil((north - south) / cellSizeY));        cols=(int)(Math.ceil((east - west) / cellSizeX));        east=west + cols * cellSizeX;        south=north - rows * cellSizeY;        output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,input.getDataScale(),dataType,noData,noData);      } else {        output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      }      output.setPreferredPalette(input.getPreferredPalette());      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(new Integer(output.getColumnFromXCoordinate(xPrime)));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    if (maintainInputDimensions) {                      value=input.getValue(row,col);                    } else {                      inputX=output.getXCoordinateFromColumn(col);                      inputCol=input.getColumnFromXCoordinate(inputX);                      inputY=output.getYCoordinateFromRow(row);                      inputRow=input.getRowFromYCoordinate(inputY);                      value=input.getValue(inputRow,inputCol);                    }                    pq.add(new RowPriorityGridCell(row,col,value));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        if (maintainInputDimensions) {                          value=input.getValue(row,col);                        } else {                          inputX=output.getXCoordinateFromColumn(col);                          inputCol=input.getColumnFromXCoordinate(inputX);                          inputY=output.getYCoordinateFromRow(row);                          inputRow=input.getRowFromYCoordinate(inputY);                          value=input.getValue(inputRow,inputCol);                        }                        pq.add(new RowPriorityGridCell(row,col,value));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean match(Element e,String pseudoE){  String val=getValue();  if (val == null) {    return !e.getAttribute(getLocalName()).equals("");  }  return e.getAttribute(getLocalName()).equals(val);}  }
class C{  public void generateOptimizedGreaterThan(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  int promotedTypeID=(this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;  if (promotedTypeID == TypeIds.T_int) {    if ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {      this.right.generateCode(currentScope,valueRequired);      return;    }    if ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {      this.left.generateCode(currentScope,valueRequired);      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  @Override protected Rectangle makeShape(){  double xmin=PackedQuadPrefixTree.this.xmin;  double ymin=PackedQuadPrefixTree.this.ymin;  int level=getLevel();  byte b;  for (short l=0, i=1; l < level; ++l, ++i) {    b=(byte)((term >>> (64 - (i << 1))) & 0x3L);switch (b) {case 0x00:      ymin+=levelH[l];    break;case 0x01:  xmin+=levelW[l];ymin+=levelH[l];break;case 0x02:break;case 0x03:xmin+=levelW[l];break;default :throw new RuntimeException("unexpected quadrant");}}double width, height;if (level > 0) {width=levelW[level - 1];height=levelH[level - 1];} else {width=gridW;height=gridH;}return new RectangleImpl(xmin,xmin + width,ymin,ymin + height,ctx);}  }
class C{  @Override public boolean isComplete(){  return (status == STATUS_COMPLETE || status == STATUS_ERROR);}  }
class C{  public static int dehexchar(char hex){  if (hex >= '0' && hex <= '9') {    return hex - '0';  } else   if (hex >= 'A' && hex <= 'F') {    return hex - 'A' + 10;  } else   if (hex >= 'a' && hex <= 'f') {    return hex - 'a' + 10;  } else {    return -1;  }}  }
class C{  public static Number unaryMinus(Number left){  return NumberMath.unaryMinus(left);}  }
class C{  public boolean isQuery(){  return (_flags & DNSConstants.FLAGS_QR_MASK) == DNSConstants.FLAGS_QR_QUERY;}  }
class C{  public Geometry next() throws IOException {  Geometry geom=null;  try {    recordNumber=file.readIntBE();    int contentLength=file.readIntBE();    try {      geom=handler.read(file,geomFactory,contentLength);    } catch (    IllegalArgumentException r2d2) {      geom=new GeometryCollection(null,null,-1);    }catch (    Exception c3p0) {      System.out.println("Error processing record (a):" + recordNumber);      System.out.println(c3p0.getMessage());      c3p0.printStackTrace();      geom=new GeometryCollection(null,null,-1);    }  } catch (  EOFException e) {    close();  }  return geom;}  }
class C{  public void readData(RowSetInternal caller) throws SQLException {  Connection con=null;  try {    CachedRowSet crs=(CachedRowSet)caller;    if (crs.getPageSize() == 0 && crs.size() > 0) {      crs.close();    }    writerCalls=0;    userCon=false;    con=this.connect(caller);    if (con == null || crs.getCommand() == null)     throw new SQLException(resBundle.handleGetObject("crsreader.connecterr").toString());    try {      con.setTransactionIsolation(crs.getTransactionIsolation());    } catch (    Exception ex) {      ;    }    PreparedStatement pstmt=con.prepareStatement(crs.getCommand());    decodeParams(caller.getParams(),pstmt);    try {      pstmt.setMaxRows(crs.getMaxRows());      pstmt.setMaxFieldSize(crs.getMaxFieldSize());      pstmt.setEscapeProcessing(crs.getEscapeProcessing());      pstmt.setQueryTimeout(crs.getQueryTimeout());    } catch (    Exception ex) {      throw new SQLException(ex.getMessage());    }    if (crs.getCommand().toLowerCase().indexOf("select") != -1) {      ResultSet rs=pstmt.executeQuery();      if (crs.getPageSize() == 0) {        crs.populate(rs);      } else {        pstmt=con.prepareStatement(crs.getCommand(),ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);        decodeParams(caller.getParams(),pstmt);        try {          pstmt.setMaxRows(crs.getMaxRows());          pstmt.setMaxFieldSize(crs.getMaxFieldSize());          pstmt.setEscapeProcessing(crs.getEscapeProcessing());          pstmt.setQueryTimeout(crs.getQueryTimeout());        } catch (        Exception ex) {          throw new SQLException(ex.getMessage());        }        rs=pstmt.executeQuery();        crs.populate(rs,startPosition);      }      rs.close();    } else {      pstmt.executeUpdate();    }    pstmt.close();    try {      con.commit();    } catch (    SQLException ex) {      ;    }    if (getCloseConnection() == true)     con.close();  } catch (  SQLException ex) {    throw ex;  } finally {    try {      if (con != null && getCloseConnection() == true) {        try {          if (!con.getAutoCommit()) {            con.rollback();          }        } catch (        Exception dummy) {        }        con.close();        con=null;      }    } catch (    SQLException e) {    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.TYPE_REF__REF:    if (resolve)     return getRef();  return basicGetRef();case GamlPackage.TYPE_REF__PARAMETER:return getParameter();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean hasHttpTimerData(InvocationSequenceData data){  return data.getTimerData() instanceof HttpTimerData;}  }
class C{  public static boolean checkSequence(SequencesReader sequences,File outputFile) throws IOException {  return checkPrereadNames(sequences.names(),outputFile);}  }
class C{  public AdditiveOperator createAdditiveOperatorFromString(EDataType eDataType,String initialValue){  AdditiveOperator result=AdditiveOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.UNKNOWN_TYPE_REF;}  }
class C{  public GlobalVisualEffectEvent(String effectName,int duration){  super(Events.GLOBAL_VISUAL);  put(NAME_ATTR,effectName);  put(DURATION_ATTR,duration);}  }
class C{  public MetacatException(Response.Status status){  this(Response.status(status).type(MediaType.APPLICATION_JSON_TYPE).entity(EMPTY_ERROR).build(),null);}  }
class C{  private byte[] generateDerivedKey(){  byte[] digestBytes=new byte[digest.getDigestSize()];  digest.update(password,0,password.length);  digest.update(salt,0,salt.length);  digest.doFinal(digestBytes,0);  for (int i=1; i < iterationCount; i++) {    digest.update(digestBytes,0,digestBytes.length);    digest.doFinal(digestBytes,0);  }  return digestBytes;}  }
class C{  private int decodeBandTypes(int bandType[],int bandTypeRunEnd[],IndividualChannelStream ics){  int idx=0;  final int bits=(ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) ? 3 : 5;  for (int g=0; g < ics.numWindowGroups; g++) {    int k=0;    while (k < ics.maxSfb) {      int sectEnd=k;      int sectBandType=br.read(4);      if (sectBandType == 12) {        log.error(String.format("invalid band type"));        return AAC_ERROR;      }      int sectLenIncr;      do {        sectLenIncr=br.read(bits);        sectEnd+=sectLenIncr;        if (br.getBitsLeft() < 0) {          log.error(String.format("decodeBandTypes overread error"));          return AAC_ERROR;        }        if (sectEnd > ics.maxSfb) {          log.error(String.format("Number of bands (%d) exceeds limit (%d)",sectEnd,ics.maxSfb));          return AAC_ERROR;        }      } while (sectLenIncr == (1 << bits) - 1);      for (; k < sectEnd; k++) {        bandType[idx]=sectBandType;        bandTypeRunEnd[idx++]=sectEnd;      }    }  }  return 0;}  }
class C{  public IMultimediaMessagingSession initiateMessagingSession(String serviceId,ContactId contact) throws RemoteException {  return initiateMessagingSession2(serviceId,contact,null,null);}  }
class C{  public static FunctionalReadWriteLock reentrant(){  return create(new ReentrantReadWriteLock());}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public UUID generateUUID(){  String uuidString="";  UUID uuid=null;  while (!uuidString.matches("[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}") || assignedUUIDs.contains(uuid)) {    uuid=UUID.randomUUID();    uuidString=uuid.toString();  }  assignedUUIDs.add(uuid);  return uuid;}  }
class C{  public final void testValidateSucceeds(){  EmailAddressValidator emailAddressValidator=new EmailAddressValidator("foo");  assertTrue(emailAddressValidator.validate(""));  assertTrue(emailAddressValidator.validate("foo@bar.com"));  assertTrue(emailAddressValidator.validate("foo-100@bar.com"));  assertTrue(emailAddressValidator.validate("foo.100@bar.com"));  assertTrue(emailAddressValidator.validate("foo100@bar.com"));  assertTrue(emailAddressValidator.validate("foo-100@bar.net"));  assertTrue(emailAddressValidator.validate("foo.100@bar.com.au"));  assertTrue(emailAddressValidator.validate("foo@123.com"));  assertTrue(emailAddressValidator.validate("foo@bar.com.com"));  assertTrue(emailAddressValidator.validate("foo+100@bar.com"));  assertTrue(emailAddressValidator.validate("foo-100@bar-test.com"));}  }
class C{  public boolean equivalentTo(Fitness _fitness){  MultiObjectiveFitness other=(MultiObjectiveFitness)_fitness;  boolean abeatsb=false;  boolean bbeatsa=false;  if (objectives.length != other.objectives.length)   throw new RuntimeException("Attempt made to compare two multiobjective fitnesses; but they have different numbers of objectives.");  for (int x=0; x < objectives.length; x++) {    if (maximize[x] != other.maximize[x])     throw new RuntimeException("Attempt made to compare two multiobjective fitnesses; but for objective #" + x + ", one expects higher values to be better and the other expectes lower values to be better.");    if (maximize[x]) {      if (objectives[x] > other.objectives[x])       abeatsb=true;      if (objectives[x] < other.objectives[x])       bbeatsa=true;      if (abeatsb && bbeatsa)       return true;    } else {      if (objectives[x] < other.objectives[x])       abeatsb=true;      if (objectives[x] > other.objectives[x])       bbeatsa=true;      if (abeatsb && bbeatsa)       return true;    }  }  if (abeatsb || bbeatsa)   return false;  return true;}  }
class C{  public static void initConfig(Config config){  config.registerForUpdates(null);}  }
class C{  public void tuneMemory(double m){  if (m == 0)   memoryA=0.0; else   memoryA=Math.pow(memoryA,1.0 / m);}  }
class C{  public void createPictScenario03_3() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-03-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict03_3Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_3SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_3Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_3Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_3CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_3",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_3",serviceDetails,customerAdmin,role);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-03-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-04-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_3",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_3",customer);}  }
class C{  protected void addLiteralValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Enumerator_literalValue_feature"),getString("_UI_PropertyDescriptor_description","_UI_Enumerator_literalValue_feature","_UI_Enumerator_type"),TypesPackage.Literals.ENUMERATOR__LITERAL_VALUE,false,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  private void decodeRules(){  decodeStartRule();  decodeEndRule();}  }
class C{  public void add(String item,int index){  addItem(item,index);}  }
class C{  public RtpPacket readRtpPacket() throws TimeoutException {  try {    byte[] data=(byte[])fifo.getObject(timeout);    if (data == null) {      throw new TimeoutException();    }    RtpPacket pkt=parseRtpPacket(data);    if (pkt != null) {      stats.numPackets++;      stats.numBytes+=data.length;      RtpSource s=rtcpSession.getMySource();      s.setSsrc(pkt.ssrc);      s.activeSender=true;      s.receiveRtpPacket(pkt);      pkt.seqnum=s.generateExtendedSequenceNumber(pkt.seqnum);      return pkt;    } else {      return readRtpPacket();    }  } catch (  Exception e) {    if (!isClosed) {      stats.numBadRtpPkts++;    }    return null;  }}  }
class C{  public boolean canChangeTo(OnlineStatus newStatus){  if (this.equals(newStatus)) {    return false;  }  if (newStatus.equals(UNKNOWN)) {    return false;  }switch (this) {case OFFLINE:    if (newStatus.equals(ONLINE)) {      return false;    }case ONLINE:  if (newStatus.equals(OFFLINE)) {    return false;  }default :return true;}}  }
class C{  public ItemStack addItem(ItemStack drive,ItemStack item){  if (getMaxKilobits(drive) == -1) {    if (getPartitioningMode(drive) == PartitioningMode.NONE || findDataIndexForPrototype(drive,createPrototype(item)) != -1) {      item.stackSize=0;      return null;    } else {      return item;    }  }  int bitsFree=getKilobitsFreeFor(drive,item);  int amountTaken=Math.min(item.stackSize,bitsFree);  int current=getAmountStored(drive,item);  if (amountTaken > 0) {    setAmountStored(drive,item,current + amountTaken);    item.stackSize-=amountTaken;    markDirty(drive);  }  if (item.stackSize <= 0) {    return null;  } else {    return item;  }}  }
class C{  public void println(String s){  long now=System.currentTimeMillis();  if (now > lastPrint + 1000) {    lastPrint=now;    long time=now - start;    printlnWithTime(time,getClass().getName() + " " + s);  }}  }
class C{  @SkipValidation @Action(value="/modifyProperty-modifyDataEntry") public String modifyDataEntry(){  LOGGER.debug("Entered into modifyForm, \nIndexNumber: " + indexNumber + ", BasicProperty: "+ basicProp+ ", OldProperty: "+ oldProperty+ ", PropertyModel: "+ propertyModel);  String target="";  target=populateFormData(Boolean.FALSE);  LOGGER.debug("modifyForm: IsAuthProp: " + getIsAuthProp() + ", AreaOfPlot: "+ getAreaOfPlot()+ ", PropTypeId: "+ getPropTypeId()+ ", PropTypeCategoryId: "+ getPropertyCategory()+ ", PropUsageId: "+ getPropUsageId()+ ", PropOccId: "+ getPropOccId());  LOGGER.debug("Exiting from modifyForm");  return target;}  }
class C{  default Map<String,?> toMap(){  try {    final Object o=unwrap();    final Map<String,Object> result=new HashMap<>();    for (    final Field f : ReflectionCache.getFields(o.getClass())) {      result.put(f.getName(),f.get(o));    }    return result;  } catch (  final Exception e) {    throw ExceptionSoftener.throwSoftenedException(e);  }}  }
class C{  void createAnimationImage(){  GraphicsConfiguration gc=getGraphicsConfiguration();  image=gc.createCompatibleImage(imageW,imageH,Transparency.TRANSLUCENT);  Graphics2D gImg=image.createGraphics();  if (useImage) {    try {      URL url=getClass().getResource("images/duke.gif");      Image originalImage=ImageIO.read(url);      gImg.drawImage(originalImage,0,0,imageW,imageH,null);    } catch (    Exception e) {    }  } else {    Color graphicsColor;    if (alterColor) {      graphicsColor=Color.LIGHT_GRAY;    } else {      graphicsColor=Color.BLACK;    }    gImg.setColor(graphicsColor);    gImg.fillRect(0,0,imageW,imageH);    if (useAA) {      gImg.setComposite(AlphaComposite.Src);      int red=graphicsColor.getRed();      int green=graphicsColor.getRed();      int blue=graphicsColor.getRed();      gImg.setColor(new Color(red,green,blue,50));      gImg.drawRect(0,0,imageW - 1,imageH - 1);      gImg.setColor(new Color(red,green,blue,100));      gImg.drawRect(1,1,imageW - 3,imageH - 3);      gImg.setColor(new Color(red,green,blue,150));      gImg.drawRect(2,2,imageW - 5,imageH - 5);      gImg.setColor(new Color(red,green,blue,200));      gImg.drawRect(3,3,imageW - 7,imageH - 7);      gImg.setColor(new Color(red,green,blue,225));      gImg.drawRect(4,4,imageW - 9,imageH - 9);    }  }  gImg.dispose();}  }
class C{  public boolean isIncludeTrailingSemicolons(){  return includeTrailingSemicolons;}  }
class C{  public static DebuggerTemplate createDebuggerTemplate(final AbstractSQLProvider provider,final String name,final String host,final int port) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE00417: Debugger names can not be null");  Preconditions.checkArgument(!name.isEmpty(),"IE00418: Debugger names can not be empty");  Preconditions.checkNotNull(host,"IE00419: Debugger host can not be null");  Preconditions.checkArgument(!host.isEmpty(),"IE00418: Debugger host can not be empty");  Preconditions.checkArgument((port > 0) && (port <= 65535),"IE00421: Debugger port is out of bounds");  NaviLogger.info("Creating new debugger %s (%s:%d)",name,host,port);  final CConnection connection=provider.getConnection();  final String query="INSERT INTO " + CTableNames.DEBUGGERS_TABLE + "(name, host, port) VALUES(?, ?, ?) RETURNING id";  try (PreparedStatement statement=connection.getConnection().prepareStatement(query)){    statement.setString(1,name);    statement.setString(2,host);    statement.setInt(3,port);    int id=-1;    try (ResultSet resultSet=statement.executeQuery()){      while (resultSet.next()) {        id=resultSet.getInt("id");      }    }     return new DebuggerTemplate(id,name,host,port,provider);  } catch (  final SQLException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  @Override public void configureZone(StendhalRPZone zone,Map<String,String> attributes){  SingletonRepository.getLoginNotifier().addListener(new ReadPostmanMessages());}  }
class C{  public static void show(){  defer=false;  draw();}  }
class C{  public void remove(String key){  urlParams.remove(key);  streamParams.remove(key);  fileParams.remove(key);  urlParamsWithObjects.remove(key);  fileArrayParams.remove(key);}  }
class C{  public GameObjectInputStream(final GameObjectStreamFactory dataSource,final InputStream input) throws IOException {  super(input);  m_dataSource=dataSource;  enableResolveObject(true);}  }
class C{  private boolean isOwnMemValue(Value value){  return value instanceof MemValue && ((MemValue)value).getCreator() == this;}  }
class C{  public boolean isAllowLocalMovesEnabled(){  return _allowLocalMoves;}  }
class C{  private boolean loadPrintData(){  try {    URL url=new URL(_dataURL);    System.out.println("Connecting to :" + _dataURL);    URLConnection conn=url.openConnection();    _dataContentType=conn.getContentType();    BufferedInputStream bis=new BufferedInputStream(conn.getInputStream());    ByteArrayOutputStream bos=new ByteArrayOutputStream();    System.out.println("Reading ......");    byte[] buf=new byte[1024];    int len;    while ((len=bis.read(buf)) > 0) {      bos.write(buf,0,len);    }    bis.close();    bos.flush();    bos.close();    System.out.println("Reading completed successfully");    _printData=bos.toByteArray();  } catch (  Exception e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public UnweightedGraph(int[][] edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  @Override protected void onListItemClick(ListView listView,View view,int position,long id){  Cursor c=(Cursor)getListAdapter().getItem(position);  startManagingCursor(c);  Uri instanceUri=ContentUris.withAppendedId(InstanceColumns.CONTENT_URI,c.getLong(c.getColumnIndex(InstanceColumns._ID)));  Collect.getInstance().getActivityLogger().logAction(this,"onListItemClick",instanceUri.toString());  String action=getIntent().getAction();  if (Intent.ACTION_PICK.equals(action)) {    setResult(RESULT_OK,new Intent().setData(instanceUri));  } else {    String status=c.getString(c.getColumnIndex(InstanceColumns.STATUS));    String strCanEditWhenComplete=c.getString(c.getColumnIndex(InstanceColumns.CAN_EDIT_WHEN_COMPLETE));    boolean canEdit=status.equals(InstanceProviderAPI.STATUS_INCOMPLETE) || Boolean.parseBoolean(strCanEditWhenComplete);    if (!canEdit) {      createErrorDialog(getString(R.string.cannot_edit_completed_form),DO_NOT_EXIT);      return;    }    startActivity(new Intent(Intent.ACTION_EDIT,instanceUri));  }  finish();}  }
class C{  public void initialize(){  directory=XTIFFDirectory.create();  setCompression(COMPRESSION_NONE);  setWriteTiled(false);}  }
class C{  private void applyIntensityStereo(ChannelElement cpe,int msPresent){  final IndividualChannelStream ics=cpe.ch[1].ics;  final SingleChannelElement sce1=cpe.ch[1];  int coef0=0;  int coef1=0;  final int offsets[]=ics.swbOffset;  int idx=0;  for (int g=0; g < ics.numWindowGroups; g++) {    for (int i=0; i < ics.maxSfb; ) {      if (sce1.bandType[idx] == INTENSITY_BT || sce1.bandType[idx] == INTENSITY_BT2) {        final int btRunEnd=sce1.bandTypeRunEnd[idx];        for (; i < btRunEnd; i++, idx++) {          int c=-1 + 2 * (sce1.bandType[idx] - 14);          if (msPresent != 0) {            c*=1 - 2 * cpe.msMask[idx];          }          float scale=c * sce1.sf[idx];          for (int group=0; group < ics.groupLen[g]; group++) {            FloatDSP.vectorFmulScalar(cpe.ch[1].coeffs,coef1 + group * 128 + offsets[i],cpe.ch[0].coeffs,coef0 + group * 128 + offsets[i],scale,offsets[i + 1] - offsets[i]);          }        }      } else {        int btRunEnd=sce1.bandTypeRunEnd[idx];        idx+=btRunEnd - i;        i=btRunEnd;      }    }    coef0+=ics.groupLen[g] * 128;    coef1+=ics.groupLen[g] * 128;  }}  }
class C{  public static void testCursorContainsRange(Cursor cursor,int columnIndex,int start,int end){  HashMap<Integer,Boolean> idsFound=new HashMap<>();  for (int i=start; i <= end; i++) {    idsFound.put(i,false);  }  assertTrue(cursor.moveToFirst());  do {    idsFound.put(cursor.getInt(columnIndex),true);  } while (cursor.moveToNext());  for (  Map.Entry<Integer,Boolean> entry : idsFound.entrySet()) {    int key=entry.getKey();    assertTrue("Id " + key + " not found",entry.getValue());  }}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input){  int whiteSpace=30;  BitMatrix output=new BitMatrix(input[0].length + 2 * whiteSpace,input.length + 2 * whiteSpace);  output.clear();  for (int y=0, yOutput=output.getHeight() - whiteSpace; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + whiteSpace,yOutput);      }    }  }  return output;}  }
class C{  public _DeleteOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  public static ScriptGroup createScriptGroup(int numLoops){  return ScriptGroup.builder().name("Test Script Group " + generateStringOfLength(15)).loop(numLoops).build();}  }
class C{  public NSDictionary(){  dict=new LinkedHashMap<String,NSObject>();}  }
class C{  public void add(Example example){  VerticalPanel verticalPanel=new VerticalPanel();  verticalPanel.add(describe(example.getInvolvedClasses(),example.getDescription()));  verticalPanel.add(example);  Label tabLabel=new Label("Demo " + (getTabCount() + 1));  tabLabel.setWordWrap(false);  String title=DOMUtil.adjustTitleForBrowser(StringUtil.getShortTypeName(example) + "\n" + example.getDescription());  tabLabel.setTitle(title);  add(verticalPanel,tabLabel,example.getHistoryToken(),Window.getTitle() + " - " + example.getHistoryToken());}  }
class C{  public int exportProperties(String propertyType,List<String> foreignProperties){  int amount=0;  for (  Property prop : getProperties(propertyType).getProperties()) {    foreignProperties.add(prop.getPropertyValue());    amount++;  }  return amount;}  }
class C{  public RequestBuilder id(Integer id){  request.setId(id);  return this;}  }
class C{  public static void addProgramRecord(SAMFileHeader header){  final SAMProgramRecord pg=new SAMProgramRecord(Constants.APPLICATION_NAME);  if (CommandLine.getCommandLine() != null) {    pg.setCommandLine(CommandLine.getCommandLine());  } else {    pg.setCommandLine("Internal");  }  pg.setProgramVersion(Environment.getVersion());  addProgramRecord(header,pg);}  }
class C{  public void loadIntData(boolean[] data,int[] dims){  this.dims=dims;  int[] intData=new int[data.length];  for (int i=0; i < data.length; i++) {    intData[i]=data[i] ? 1 : 0;  }  this.data=IntBuffer.wrap(intData);}  }
class C{  @Override public void aggregateDimensionData(AbstractScannedResult scannedResult,MeasureAggregator[] aggeragtor){  String data=null;  if (defaultValue != null) {    data=(String)defaultValue;  } else {    data=new String(scannedResult.getDimensionKey(blockIndex),Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));    if (CarbonCommonConstants.MEMBER_DEFAULT_VAL.equals(data)) {      return;    }  }  Object dataBasedOnDataType=DataTypeUtil.getDataBasedOnDataType(data,dimensionAggeragtorInfo.getDim().getDataType());  if (null == dataBasedOnDataType) {    return;  }  if (DataType.DECIMAL == dimensionAggeragtorInfo.getDim().getDataType()) {    dataBasedOnDataType=((Decimal)dataBasedOnDataType).toJavaBigDecimal();  }  if (actualTypeAggregatorIndex.length > 0) {    for (int j=0; j < actualTypeAggregatorIndex.length; j++) {      aggeragtor[aggregatorStartIndex + actualTypeAggregatorIndex[j]].agg(dataBasedOnDataType);    }  }  if (numberTypeAggregatorIndex.length > 0) {    if (DataType.STRING == dimensionAggeragtorInfo.getDim().getDataType()) {      dataBasedOnDataType=DataTypeUtil.getDataBasedOnDataType(data,DataType.DOUBLE);    }    if (null == dataBasedOnDataType) {      return;    }    for (int j=0; j < numberTypeAggregatorIndex.length; j++) {      aggeragtor[aggregatorStartIndex + numberTypeAggregatorIndex[j]].agg(dataBasedOnDataType);    }  }}  }
class C{  public void removeEventListener2(IVideoSharingListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Remove a video sharing event listener");  }  try {synchronized (mLock) {      mBroadcaster.removeEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public Query newQuery(String queryString){  if (QueryMonitor.isLowMemory()) {    String reason=LocalizedStrings.QueryMonitor_LOW_MEMORY_CANCELED_QUERY.toLocalizedString(QueryMonitor.getMemoryUsedDuringLowMemory());    throw new QueryExecutionLowMemoryException(reason);  }  if (queryString == null)   throw new QueryInvalidException(LocalizedStrings.DefaultQueryService_THE_QUERY_STRING_MUST_NOT_BE_NULL.toLocalizedString());  if (queryString.length() == 0)   throw new QueryInvalidException(LocalizedStrings.DefaultQueryService_THE_QUERY_STRING_MUST_NOT_BE_EMPTY.toLocalizedString());  ServerProxy serverProxy=pool == null ? null : new ServerProxy(pool);  DefaultQuery query=new DefaultQuery(queryString,this.cache,serverProxy != null);  query.setServerProxy(serverProxy);  return query;}  }
class C{  public static void skip(TProtocol prot,byte type,int maxDepth) throws TException {  if (maxDepth <= 0) {    throw new TException("Maximum skip depth exceeded");  }switch (type) {case TType.BOOL:    prot.readBool();  break;case TType.BYTE:prot.readByte();break;case TType.I16:prot.readI16();break;case TType.I32:prot.readI32();break;case TType.I64:prot.readI64();break;case TType.DOUBLE:prot.readDouble();break;case TType.STRING:prot.readBinary();break;case TType.STRUCT:prot.readStructBegin();while (true) {TField field=prot.readFieldBegin();if (field.type == TType.STOP) {break;}skip(prot,field.type,maxDepth - 1);prot.readFieldEnd();}prot.readStructEnd();break;case TType.MAP:TMap map=prot.readMapBegin();for (int i=0; i < map.size; i++) {skip(prot,map.keyType,maxDepth - 1);skip(prot,map.valueType,maxDepth - 1);}prot.readMapEnd();break;case TType.SET:TSet set=prot.readSetBegin();for (int i=0; i < set.size; i++) {skip(prot,set.elemType,maxDepth - 1);}prot.readSetEnd();break;case TType.LIST:TList list=prot.readListBegin();for (int i=0; i < list.size; i++) {skip(prot,list.elemType,maxDepth - 1);}prot.readListEnd();break;default :break;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.659 -0400",hash_original_method="A7C889B68BCBEC308734FF9FD7CA04D8",hash_generated_method="9221E3913CCB4313E4D963FF23F564F8") @Override public String toString(){  return super.toString() + "[" + delegate.toString()+ "]";}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deleteInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  LOGGER.info("deleteInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  try {    PropertyHandler ph=PropertyHandler.withSettings(settings);    ph.setOperation(Operation.EC2_DELETION);    ph.setState(FlowState.DELETION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(settings.getParameters());    return result;  } catch (  Throwable t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.DELETION);  }}  }
class C{  public String validate(){  if (!context.pendingOrFuture && (resolvedMigration == null) && (appliedMigration.getType() != MigrationType.SCHEMA)&& (appliedMigration.getType() != MigrationType.BASELINE)) {    return "Detected applied migration not resolved locally: " + getVersion();  }  if ((!context.pendingOrFuture && (MigrationState.PENDING == getState())) || (MigrationState.IGNORED == getState())) {    return "Detected resolved migration not applied to database: " + getVersion();  }  if (resolvedMigration != null && appliedMigration != null) {    if (getVersion().compareTo(context.baseline) > 0) {      if (resolvedMigration.getType() != appliedMigration.getType()) {        return createMismatchMessage("Type",appliedMigration.getVersion(),appliedMigration.getType(),resolvedMigration.getType());      }      if (!ObjectUtils.nullSafeEquals(resolvedMigration.getChecksum(),appliedMigration.getChecksum())) {        return createMismatchMessage("Checksum",appliedMigration.getVersion(),appliedMigration.getChecksum(),resolvedMigration.getChecksum());      }      if (!resolvedMigration.getDescription().equals(appliedMigration.getDescription())) {        return createMismatchMessage("Description",appliedMigration.getVersion(),appliedMigration.getDescription(),resolvedMigration.getDescription());      }    }  }  return null;}  }
class C{  public int find(String string){  if (string == null) {    return -1;  }  for (int i=0; i != m_stringOffsets.length; ++i) {    int offset=m_stringOffsets[i];    int length=getShort(m_strings,offset);    if (length != string.length()) {      continue;    }    int j=0;    for (; j != length; ++j) {      offset+=2;      if (string.charAt(j) != getShort(m_strings,offset)) {        break;      }    }    if (j == length) {      return i;    }  }  return -1;}  }
class C{  public synchronized int addLog(File file,int _verbosity,boolean postAnnouncements,boolean appendOnRestart,boolean gzip) throws IOException {  if (filePrefix != null && filePrefix.length() > 0)   file=new File(file.getParent(),filePrefix + file.getName());  logs.addElement(new Log(file,postAnnouncements,appendOnRestart,gzip));  return logs.size() - 1;}  }
class C{  public void previousViewpoint(){  if (viewpointList.size() == 0) {    return;  }  viewpointIndex--;  if (viewpointIndex < 0) {    viewpointIndex=viewpointList.size() - 1;  }  viewpointNode.setViewpoint(viewpointList.get(viewpointIndex),true,true);}  }
class C{  public boolean isAllow_Info_CashJournal(){  Object oo=get_Value(COLUMNNAME_Allow_Info_CashJournal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Automaton makeChar(int c){  return makeCharRange(c,c);}  }
class C{  private static void drawPlus(Graphics gx,double x,double y,int size){  gx.drawLine((int)(x - size),(int)(y),(int)(x + size),(int)(y));  gx.drawLine((int)(x),(int)(y - size),(int)(x),(int)(y + size));}  }
class C{  protected IMiniTable cmd_search(IMiniTable xMatchedTable,int display,String matchToString,Integer Product,Integer Vendor,Timestamp from,Timestamp to,boolean matched){  int matchToType=MATCH_INVOICE;  if (matchToString.equals(m_matchOptions[MATCH_SHIPMENT]))   matchToType=MATCH_SHIPMENT; else   if (matchToString.equals(m_matchOptions[MATCH_ORDER]))   matchToType=MATCH_ORDER;  tableInit(display,matchToType,matched);  if (Product != null) {    m_sql.append(" AND lin.M_Product_ID=").append(Product);  }  if (Vendor != null) {    m_sql.append(" AND hdr.C_BPartner_ID=").append(Vendor);  }  if (from != null && to != null)   m_sql.append(" AND ").append(m_dateColumn).append(" BETWEEN ").append(DB.TO_DATE(from)).append(" AND ").append(DB.TO_DATE(to)); else   if (from != null)   m_sql.append(" AND ").append(m_dateColumn).append(" >= ").append(DB.TO_DATE(from)); else   if (to != null)   m_sql.append(" AND ").append(m_dateColumn).append(" <= ").append(DB.TO_DATE(to));  tableLoad(xMatchedTable);  return xMatchedTable;}  }
class C{  public boolean equals(Object p_test){  if (p_test instanceof URI) {    URI testURI=(URI)p_test;    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {      return true;    }  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.703 -0400",hash_original_method="F77A4F330ECF7476CC7AF200B57EFA7F",hash_generated_method="5AEDC89A183EF5E6538093DA8AE2F21F") public boolean add(E e){  return offer(e);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getCodeInjection_();}  }
class C{  @Override public String toString(){  if (getUserObject() instanceof TvShow) {    TvShow tvShow=(TvShow)getUserObject();    return tvShow.getTitle();  }  return super.toString();}  }
class C{  public XMLDocument(){  this(DEFAULT_XML_VERSION,true);}  }
class C{  public void updateFmtPrefFicha(FmtPrefFichaVO fmtPrefFicha){  fmtPrefDBEntity.updateFmtPrefFicha(fmtPrefFicha);}  }
class C{  public ObjectName manageCache() throws AdminException, MalformedObjectNameException {  return Helper.manageCache(this);}  }
class C{  public ICalComponent pop(){  return isEmpty() ? null : components.remove(components.size() - 1);}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  public HTMLSchema(){  setURI("http://www.w3.org/1999/xhtml");  setPrefix("html");  elementType("<pcdata>",M_EMPTY,M_PCDATA,0);  elementType("<root>",M_ROOT,M_EMPTY,0);  elementType("a",M_PCDATA | M_NOLINK,M_INLINE,0);  elementType("abbr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("acronym",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("address",M_PCDATA | M_INLINE | M_P,M_BLOCK,0);  elementType("applet",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("area",M_EMPTY,M_AREA,0);  elementType("b",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("base",M_EMPTY,M_HEAD,0);  elementType("basefont",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("bdo",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("bgsound",M_EMPTY,M_HEAD,0);  elementType("big",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blink",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blockquote",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("body",M_PCDATA | M_INLINE | M_BLOCK,M_HTML | M_BODY,0);  elementType("br",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("button",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("canvas",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("caption",M_PCDATA | M_INLINE,M_TABULAR,0);  elementType("center",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("cite",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("code",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("col",M_EMPTY,M_COL | M_TABULAR,0);  elementType("colgroup",M_COL,M_TABULAR,0);  elementType("comment",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("dd",M_PCDATA | M_INLINE | M_BLOCK,M_DEF,0);  elementType("del",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCKINLINE | M_BLOCK,F_RESTART);  elementType("dfn",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("dir",M_LI,M_BLOCK,0);  elementType("div",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("dl",M_DEF,M_BLOCK,0);  elementType("dt",M_PCDATA | M_INLINE,M_DEF,0);  elementType("em",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("fieldset",M_PCDATA | M_LEGEND | M_INLINE| M_BLOCK,M_BLOCK,0);  elementType("font",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("form",M_PCDATA | M_INLINE | M_NOLINK| M_BLOCK| M_TR| M_CELL,M_BLOCK | M_FORM,F_NOFORCE);  elementType("frame",M_EMPTY,M_FRAME,0);  elementType("frameset",M_FRAME,M_FRAME | M_HTML,0);  elementType("h1",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h2",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h3",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h4",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h5",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h6",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("head",M_HEAD,M_HTML,0);  elementType("hr",M_EMPTY,M_BLOCK,0);  elementType("html",M_HTML,M_ROOT,0);  elementType("i",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("iframe",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("img",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("input",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("ins",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCK,F_RESTART);  elementType("isindex",M_EMPTY,M_HEAD,0);  elementType("kbd",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("label",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("legend",M_PCDATA | M_INLINE,M_LEGEND,0);  elementType("li",M_PCDATA | M_INLINE | M_BLOCK,M_LI,0);  elementType("link",M_EMPTY,M_HEAD | M_INLINE,0);  elementType("listing",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("map",M_BLOCK | M_AREA,M_INLINE,0);  elementType("marquee",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("menu",M_LI,M_BLOCK,0);  elementType("meta",M_EMPTY,M_HEAD,0);  elementType("nobr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("noframes",M_BODY | M_BLOCK | M_INLINE,M_BLOCK | M_HTML | M_FRAME,0);  elementType("noscript",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("object",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_HEAD | M_INLINE | M_NOLINK,0);  elementType("ol",M_LI,M_BLOCK,0);  elementType("optgroup",M_OPTIONS,M_OPTIONS,0);  elementType("option",M_PCDATA,M_OPTION | M_OPTIONS,0);  elementType("p",M_PCDATA | M_INLINE | M_TABLE,M_BLOCK | M_P,0);  elementType("param",M_EMPTY,M_PARAM,0);  elementType("pre",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("q",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rb",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rbc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rtc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ruby",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("s",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("samp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("script",M_PCDATA,M_ANY & ~M_ROOT,F_CDATA);  elementType("select",M_OPTIONS,M_INLINE,0);  elementType("small",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("span",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("strike",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("strong",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("style",M_PCDATA,M_HEAD | M_INLINE,F_CDATA);  elementType("sub",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("sup",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("table",M_FORM | M_TABULAR,M_BLOCK | M_TABLE,F_NOFORCE);  elementType("tbody",M_TR,M_TABULAR,0);  elementType("td",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("textarea",M_PCDATA,M_INLINE,0);  elementType("tfoot",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("th",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("thead",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("title",M_PCDATA,M_HEAD,0);  elementType("tr",M_FORM | M_CELL,M_TR | M_TABULAR,0);  elementType("tt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("u",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ul",M_LI,M_BLOCK,0);  elementType("var",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("wbr",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("xmp",M_PCDATA | M_INLINE,M_BLOCK,0);  parent("<pcdata>","body");  parent("html","<root>");  parent("a","body");  parent("abbr","body");  parent("acronym","body");  parent("address","body");  parent("applet","body");  parent("area","map");  parent("b","body");  parent("base","head");  parent("basefont","body");  parent("bdo","body");  parent("bgsound","head");  parent("big","body");  parent("blink","body");  parent("blockquote","body");  parent("body","html");  parent("br","body");  parent("button","form");  parent("canvas","body");  parent("caption","table");  parent("center","body");  parent("cite","body");  parent("code","body");  parent("col","table");  parent("colgroup","table");  parent("comment","body");  parent("dd","dl");  parent("del","body");  parent("dfn","body");  parent("dir","body");  parent("div","body");  parent("dl","body");  parent("dt","dl");  parent("em","body");  parent("fieldset","form");  parent("font","body");  parent("form","body");  parent("frame","frameset");  parent("frameset","html");  parent("h1","body");  parent("h2","body");  parent("h3","body");  parent("h4","body");  parent("h5","body");  parent("h6","body");  parent("head","html");  parent("hr","body");  parent("i","body");  parent("iframe","body");  parent("img","body");  parent("input","form");  parent("ins","body");  parent("isindex","head");  parent("kbd","body");  parent("label","form");  parent("legend","fieldset");  parent("li","ul");  parent("link","head");  parent("listing","body");  parent("map","body");  parent("marquee","body");  parent("menu","body");  parent("meta","head");  parent("nobr","body");  parent("noframes","html");  parent("noscript","body");  parent("object","body");  parent("ol","body");  parent("optgroup","select");  parent("option","select");  parent("p","body");  parent("param","object");  parent("pre","body");  parent("q","body");  parent("rb","body");  parent("rbc","body");  parent("rp","body");  parent("rt","body");  parent("rtc","body");  parent("ruby","body");  parent("s","body");  parent("samp","body");  parent("script","html");  parent("select","form");  parent("small","body");  parent("span","body");  parent("strike","body");  parent("strong","body");  parent("style","head");  parent("sub","body");  parent("sup","body");  parent("table","body");  parent("tbody","table");  parent("td","tr");  parent("textarea","form");  parent("tfoot","table");  parent("th","tr");  parent("thead","table");  parent("title","head");  parent("tr","tbody");  parent("tt","body");  parent("u","body");  parent("ul","body");  parent("var","body");  parent("wbr","body");  parent("xmp","body");  attribute("a","hreflang","NMTOKEN",null);  attribute("a","shape","CDATA","rect");  attribute("a","tabindex","NMTOKEN",null);  attribute("applet","align","NMTOKEN",null);  attribute("area","nohref","BOOLEAN",null);  attribute("area","shape","CDATA","rect");  attribute("area","tabindex","NMTOKEN",null);  attribute("br","clear","CDATA","none");  attribute("button","disabled","BOOLEAN",null);  attribute("button","tabindex","NMTOKEN",null);  attribute("button","type","CDATA","submit");  attribute("caption","align","NMTOKEN",null);  attribute("col","align","NMTOKEN",null);  attribute("col","span","CDATA","1");  attribute("col","valign","NMTOKEN",null);  attribute("colgroup","align","NMTOKEN",null);  attribute("colgroup","span","CDATA","1");  attribute("colgroup","valign","NMTOKEN",null);  attribute("dir","compact","BOOLEAN",null);  attribute("div","align","NMTOKEN",null);  attribute("dl","compact","BOOLEAN",null);  attribute("form","enctype","CDATA","application/x-www-form-urlencoded");  attribute("form","method","CDATA","get");  attribute("frame","frameborder","CDATA","1");  attribute("frame","noresize","BOOLEAN",null);  attribute("frame","scrolling","CDATA","auto");  attribute("h1","align","NMTOKEN",null);  attribute("h2","align","NMTOKEN",null);  attribute("h3","align","NMTOKEN",null);  attribute("h4","align","NMTOKEN",null);  attribute("h5","align","NMTOKEN",null);  attribute("h6","align","NMTOKEN",null);  attribute("hr","align","NMTOKEN",null);  attribute("hr","noshade","BOOLEAN",null);  attribute("iframe","align","NMTOKEN",null);  attribute("iframe","frameborder","CDATA","1");  attribute("iframe","scrolling","CDATA","auto");  attribute("img","align","NMTOKEN",null);  attribute("img","ismap","BOOLEAN",null);  attribute("input","align","NMTOKEN",null);  attribute("input","checked","BOOLEAN",null);  attribute("input","disabled","BOOLEAN",null);  attribute("input","ismap","BOOLEAN",null);  attribute("input","maxlength","NMTOKEN",null);  attribute("input","readonly","BOOLEAN",null);  attribute("input","tabindex","NMTOKEN",null);  attribute("input","type","CDATA","text");  attribute("label","for","IDREF",null);  attribute("legend","align","NMTOKEN",null);  attribute("li","value","NMTOKEN",null);  attribute("link","hreflang","NMTOKEN",null);  attribute("marquee","width","NMTOKEN",null);  attribute("menu","compact","BOOLEAN",null);  attribute("meta","http-equiv","NMTOKEN",null);  attribute("meta","name","NMTOKEN",null);  attribute("object","align","NMTOKEN",null);  attribute("object","declare","BOOLEAN",null);  attribute("object","tabindex","NMTOKEN",null);  attribute("ol","compact","BOOLEAN",null);  attribute("ol","start","NMTOKEN",null);  attribute("optgroup","disabled","BOOLEAN",null);  attribute("option","disabled","BOOLEAN",null);  attribute("option","selected","BOOLEAN",null);  attribute("p","align","NMTOKEN",null);  attribute("param","valuetype","CDATA","data");  attribute("pre","width","NMTOKEN",null);  attribute("rt","rbspan","CDATA","1");  attribute("script","defer","BOOLEAN",null);  attribute("select","disabled","BOOLEAN",null);  attribute("select","multiple","BOOLEAN",null);  attribute("select","size","NMTOKEN",null);  attribute("select","tabindex","NMTOKEN",null);  attribute("table","align","NMTOKEN",null);  attribute("table","frame","NMTOKEN",null);  attribute("table","rules","NMTOKEN",null);  attribute("tbody","align","NMTOKEN",null);  attribute("tbody","valign","NMTOKEN",null);  attribute("td","align","NMTOKEN",null);  attribute("td","colspan","CDATA","1");  attribute("td","headers","IDREFS",null);  attribute("td","nowrap","BOOLEAN",null);  attribute("td","rowspan","CDATA","1");  attribute("td","scope","NMTOKEN",null);  attribute("td","valign","NMTOKEN",null);  attribute("textarea","cols","NMTOKEN",null);  attribute("textarea","disabled","BOOLEAN",null);  attribute("textarea","readonly","BOOLEAN",null);  attribute("textarea","rows","NMTOKEN",null);  attribute("textarea","tabindex","NMTOKEN",null);  attribute("tfoot","align","NMTOKEN",null);  attribute("tfoot","valign","NMTOKEN",null);  attribute("th","align","NMTOKEN",null);  attribute("th","colspan","CDATA","1");  attribute("th","headers","IDREFS",null);  attribute("th","nowrap","BOOLEAN",null);  attribute("th","rowspan","CDATA","1");  attribute("th","scope","NMTOKEN",null);  attribute("th","valign","NMTOKEN",null);  attribute("thead","align","NMTOKEN",null);  attribute("thead","valign","NMTOKEN",null);  attribute("tr","align","NMTOKEN",null);  attribute("tr","valign","NMTOKEN",null);  attribute("ul","compact","BOOLEAN",null);  attribute("ul","type","NMTOKEN",null);  attribute("xmp","width","NMTOKEN",null);  attribute("a","class","NMTOKEN",null);  attribute("abbr","class","NMTOKEN",null);  attribute("acronym","class","NMTOKEN",null);  attribute("address","class","NMTOKEN",null);  attribute("applet","class","NMTOKEN",null);  attribute("area","class","NMTOKEN",null);  attribute("b","class","NMTOKEN",null);  attribute("base","class","NMTOKEN",null);  attribute("basefont","class","NMTOKEN",null);  attribute("bdo","class","NMTOKEN",null);  attribute("bgsound","class","NMTOKEN",null);  attribute("big","class","NMTOKEN",null);  attribute("blink","class","NMTOKEN",null);  attribute("blockquote","class","NMTOKEN",null);  attribute("body","class","NMTOKEN",null);  attribute("br","class","NMTOKEN",null);  attribute("button","class","NMTOKEN",null);  attribute("canvas","class","NMTOKEN",null);  attribute("caption","class","NMTOKEN",null);  attribute("center","class","NMTOKEN",null);  attribute("cite","class","NMTOKEN",null);  attribute("code","class","NMTOKEN",null);  attribute("col","class","NMTOKEN",null);  attribute("colgroup","class","NMTOKEN",null);  attribute("comment","class","NMTOKEN",null);  attribute("dd","class","NMTOKEN",null);  attribute("del","class","NMTOKEN",null);  attribute("dfn","class","NMTOKEN",null);  attribute("dir","class","NMTOKEN",null);  attribute("div","class","NMTOKEN",null);  attribute("dl","class","NMTOKEN",null);  attribute("dt","class","NMTOKEN",null);  attribute("em","class","NMTOKEN",null);  attribute("fieldset","class","NMTOKEN",null);  attribute("font","class","NMTOKEN",null);  attribute("form","class","NMTOKEN",null);  attribute("frame","class","NMTOKEN",null);  attribute("frameset","class","NMTOKEN",null);  attribute("h1","class","NMTOKEN",null);  attribute("h2","class","NMTOKEN",null);  attribute("h3","class","NMTOKEN",null);  attribute("h4","class","NMTOKEN",null);  attribute("h5","class","NMTOKEN",null);  attribute("h6","class","NMTOKEN",null);  attribute("head","class","NMTOKEN",null);  attribute("hr","class","NMTOKEN",null);  attribute("html","class","NMTOKEN",null);  attribute("i","class","NMTOKEN",null);  attribute("iframe","class","NMTOKEN",null);  attribute("img","class","NMTOKEN",null);  attribute("input","class","NMTOKEN",null);  attribute("ins","class","NMTOKEN",null);  attribute("isindex","class","NMTOKEN",null);  attribute("kbd","class","NMTOKEN",null);  attribute("label","class","NMTOKEN",null);  attribute("legend","class","NMTOKEN",null);  attribute("li","class","NMTOKEN",null);  attribute("link","class","NMTOKEN",null);  attribute("listing","class","NMTOKEN",null);  attribute("map","class","NMTOKEN",null);  attribute("marquee","class","NMTOKEN",null);  attribute("menu","class","NMTOKEN",null);  attribute("meta","class","NMTOKEN",null);  attribute("nobr","class","NMTOKEN",null);  attribute("noframes","class","NMTOKEN",null);  attribute("noscript","class","NMTOKEN",null);  attribute("object","class","NMTOKEN",null);  attribute("ol","class","NMTOKEN",null);  attribute("optgroup","class","NMTOKEN",null);  attribute("option","class","NMTOKEN",null);  attribute("p","class","NMTOKEN",null);  attribute("param","class","NMTOKEN",null);  attribute("pre","class","NMTOKEN",null);  attribute("q","class","NMTOKEN",null);  attribute("rb","class","NMTOKEN",null);  attribute("rbc","class","NMTOKEN",null);  attribute("rp","class","NMTOKEN",null);  attribute("rt","class","NMTOKEN",null);  attribute("rtc","class","NMTOKEN",null);  attribute("ruby","class","NMTOKEN",null);  attribute("s","class","NMTOKEN",null);  attribute("samp","class","NMTOKEN",null);  attribute("script","class","NMTOKEN",null);  attribute("select","class","NMTOKEN",null);  attribute("small","class","NMTOKEN",null);  attribute("span","class","NMTOKEN",null);  attribute("strike","class","NMTOKEN",null);  attribute("strong","class","NMTOKEN",null);  attribute("style","class","NMTOKEN",null);  attribute("sub","class","NMTOKEN",null);  attribute("sup","class","NMTOKEN",null);  attribute("table","class","NMTOKEN",null);  attribute("tbody","class","NMTOKEN",null);  attribute("td","class","NMTOKEN",null);  attribute("textarea","class","NMTOKEN",null);  attribute("tfoot","class","NMTOKEN",null);  attribute("th","class","NMTOKEN",null);  attribute("thead","class","NMTOKEN",null);  attribute("title","class","NMTOKEN",null);  attribute("tr","class","NMTOKEN",null);  attribute("tt","class","NMTOKEN",null);  attribute("u","class","NMTOKEN",null);  attribute("ul","class","NMTOKEN",null);  attribute("var","class","NMTOKEN",null);  attribute("wbr","class","NMTOKEN",null);  attribute("xmp","class","NMTOKEN",null);  attribute("a","dir","NMTOKEN",null);  attribute("abbr","dir","NMTOKEN",null);  attribute("acronym","dir","NMTOKEN",null);  attribute("address","dir","NMTOKEN",null);  attribute("applet","dir","NMTOKEN",null);  attribute("area","dir","NMTOKEN",null);  attribute("b","dir","NMTOKEN",null);  attribute("base","dir","NMTOKEN",null);  attribute("basefont","dir","NMTOKEN",null);  attribute("bdo","dir","NMTOKEN",null);  attribute("bgsound","dir","NMTOKEN",null);  attribute("big","dir","NMTOKEN",null);  attribute("blink","dir","NMTOKEN",null);  attribute("blockquote","dir","NMTOKEN",null);  attribute("body","dir","NMTOKEN",null);  attribute("br","dir","NMTOKEN",null);  attribute("button","dir","NMTOKEN",null);  attribute("canvas","dir","NMTOKEN",null);  attribute("caption","dir","NMTOKEN",null);  attribute("center","dir","NMTOKEN",null);  attribute("cite","dir","NMTOKEN",null);  attribute("code","dir","NMTOKEN",null);  attribute("col","dir","NMTOKEN",null);  attribute("colgroup","dir","NMTOKEN",null);  attribute("comment","dir","NMTOKEN",null);  attribute("dd","dir","NMTOKEN",null);  attribute("del","dir","NMTOKEN",null);  attribute("dfn","dir","NMTOKEN",null);  attribute("dir","dir","NMTOKEN",null);  attribute("div","dir","NMTOKEN",null);  attribute("dl","dir","NMTOKEN",null);  attribute("dt","dir","NMTOKEN",null);  attribute("em","dir","NMTOKEN",null);  attribute("fieldset","dir","NMTOKEN",null);  attribute("font","dir","NMTOKEN",null);  attribute("form","dir","NMTOKEN",null);  attribute("frame","dir","NMTOKEN",null);  attribute("frameset","dir","NMTOKEN",null);  attribute("h1","dir","NMTOKEN",null);  attribute("h2","dir","NMTOKEN",null);  attribute("h3","dir","NMTOKEN",null);  attribute("h4","dir","NMTOKEN",null);  attribute("h5","dir","NMTOKEN",null);  attribute("h6","dir","NMTOKEN",null);  attribute("head","dir","NMTOKEN",null);  attribute("hr","dir","NMTOKEN",null);  attribute("html","dir","NMTOKEN",null);  attribute("i","dir","NMTOKEN",null);  attribute("iframe","dir","NMTOKEN",null);  attribute("img","dir","NMTOKEN",null);  attribute("input","dir","NMTOKEN",null);  attribute("ins","dir","NMTOKEN",null);  attribute("isindex","dir","NMTOKEN",null);  attribute("kbd","dir","NMTOKEN",null);  attribute("label","dir","NMTOKEN",null);  attribute("legend","dir","NMTOKEN",null);  attribute("li","dir","NMTOKEN",null);  attribute("link","dir","NMTOKEN",null);  attribute("listing","dir","NMTOKEN",null);  attribute("map","dir","NMTOKEN",null);  attribute("marquee","dir","NMTOKEN",null);  attribute("menu","dir","NMTOKEN",null);  attribute("meta","dir","NMTOKEN",null);  attribute("nobr","dir","NMTOKEN",null);  attribute("noframes","dir","NMTOKEN",null);  attribute("noscript","dir","NMTOKEN",null);  attribute("object","dir","NMTOKEN",null);  attribute("ol","dir","NMTOKEN",null);  attribute("optgroup","dir","NMTOKEN",null);  attribute("option","dir","NMTOKEN",null);  attribute("p","dir","NMTOKEN",null);  attribute("param","dir","NMTOKEN",null);  attribute("pre","dir","NMTOKEN",null);  attribute("q","dir","NMTOKEN",null);  attribute("rb","dir","NMTOKEN",null);  attribute("rbc","dir","NMTOKEN",null);  attribute("rp","dir","NMTOKEN",null);  attribute("rt","dir","NMTOKEN",null);  attribute("rtc","dir","NMTOKEN",null);  attribute("ruby","dir","NMTOKEN",null);  attribute("s","dir","NMTOKEN",null);  attribute("samp","dir","NMTOKEN",null);  attribute("script","dir","NMTOKEN",null);  attribute("select","dir","NMTOKEN",null);  attribute("small","dir","NMTOKEN",null);  attribute("span","dir","NMTOKEN",null);  attribute("strike","dir","NMTOKEN",null);  attribute("strong","dir","NMTOKEN",null);  attribute("style","dir","NMTOKEN",null);  attribute("sub","dir","NMTOKEN",null);  attribute("sup","dir","NMTOKEN",null);  attribute("table","dir","NMTOKEN",null);  attribute("tbody","dir","NMTOKEN",null);  attribute("td","dir","NMTOKEN",null);  attribute("textarea","dir","NMTOKEN",null);  attribute("tfoot","dir","NMTOKEN",null);  attribute("th","dir","NMTOKEN",null);  attribute("thead","dir","NMTOKEN",null);  attribute("title","dir","NMTOKEN",null);  attribute("tr","dir","NMTOKEN",null);  attribute("tt","dir","NMTOKEN",null);  attribute("u","dir","NMTOKEN",null);  attribute("ul","dir","NMTOKEN",null);  attribute("var","dir","NMTOKEN",null);  attribute("wbr","dir","NMTOKEN",null);  attribute("xmp","dir","NMTOKEN",null);  attribute("a","id","ID",null);  attribute("abbr","id","ID",null);  attribute("acronym","id","ID",null);  attribute("address","id","ID",null);  attribute("applet","id","ID",null);  attribute("area","id","ID",null);  attribute("b","id","ID",null);  attribute("base","id","ID",null);  attribute("basefont","id","ID",null);  attribute("bdo","id","ID",null);  attribute("bgsound","id","ID",null);  attribute("big","id","ID",null);  attribute("blink","id","ID",null);  attribute("blockquote","id","ID",null);  attribute("body","id","ID",null);  attribute("br","id","ID",null);  attribute("button","id","ID",null);  attribute("canvas","id","ID",null);  attribute("caption","id","ID",null);  attribute("center","id","ID",null);  attribute("cite","id","ID",null);  attribute("code","id","ID",null);  attribute("col","id","ID",null);  attribute("colgroup","id","ID",null);  attribute("comment","id","ID",null);  attribute("dd","id","ID",null);  attribute("del","id","ID",null);  attribute("dfn","id","ID",null);  attribute("dir","id","ID",null);  attribute("div","id","ID",null);  attribute("dl","id","ID",null);  attribute("dt","id","ID",null);  attribute("em","id","ID",null);  attribute("fieldset","id","ID",null);  attribute("font","id","ID",null);  attribute("form","id","ID",null);  attribute("frame","id","ID",null);  attribute("frameset","id","ID",null);  attribute("h1","id","ID",null);  attribute("h2","id","ID",null);  attribute("h3","id","ID",null);  attribute("h4","id","ID",null);  attribute("h5","id","ID",null);  attribute("h6","id","ID",null);  attribute("head","id","ID",null);  attribute("hr","id","ID",null);  attribute("html","id","ID",null);  attribute("i","id","ID",null);  attribute("iframe","id","ID",null);  attribute("img","id","ID",null);  attribute("input","id","ID",null);  attribute("ins","id","ID",null);  attribute("isindex","id","ID",null);  attribute("kbd","id","ID",null);  attribute("label","id","ID",null);  attribute("legend","id","ID",null);  attribute("li","id","ID",null);  attribute("link","id","ID",null);  attribute("listing","id","ID",null);  attribute("map","id","ID",null);  attribute("marquee","id","ID",null);  attribute("menu","id","ID",null);  attribute("meta","id","ID",null);  attribute("nobr","id","ID",null);  attribute("noframes","id","ID",null);  attribute("noscript","id","ID",null);  attribute("object","id","ID",null);  attribute("ol","id","ID",null);  attribute("optgroup","id","ID",null);  attribute("option","id","ID",null);  attribute("p","id","ID",null);  attribute("param","id","ID",null);  attribute("pre","id","ID",null);  attribute("q","id","ID",null);  attribute("rb","id","ID",null);  attribute("rbc","id","ID",null);  attribute("rp","id","ID",null);  attribute("rt","id","ID",null);  attribute("rtc","id","ID",null);  attribute("ruby","id","ID",null);  attribute("s","id","ID",null);  attribute("samp","id","ID",null);  attribute("script","id","ID",null);  attribute("select","id","ID",null);  attribute("small","id","ID",null);  attribute("span","id","ID",null);  attribute("strike","id","ID",null);  attribute("strong","id","ID",null);  attribute("style","id","ID",null);  attribute("sub","id","ID",null);  attribute("sup","id","ID",null);  attribute("table","id","ID",null);  attribute("tbody","id","ID",null);  attribute("td","id","ID",null);  attribute("textarea","id","ID",null);  attribute("tfoot","id","ID",null);  attribute("th","id","ID",null);  attribute("thead","id","ID",null);  attribute("title","id","ID",null);  attribute("tr","id","ID",null);  attribute("tt","id","ID",null);  attribute("u","id","ID",null);  attribute("ul","id","ID",null);  attribute("var","id","ID",null);  attribute("wbr","id","ID",null);  attribute("xmp","id","ID",null);  attribute("a","lang","NMTOKEN",null);  attribute("abbr","lang","NMTOKEN",null);  attribute("acronym","lang","NMTOKEN",null);  attribute("address","lang","NMTOKEN",null);  attribute("applet","lang","NMTOKEN",null);  attribute("area","lang","NMTOKEN",null);  attribute("b","lang","NMTOKEN",null);  attribute("base","lang","NMTOKEN",null);  attribute("basefont","lang","NMTOKEN",null);  attribute("bdo","lang","NMTOKEN",null);  attribute("bgsound","lang","NMTOKEN",null);  attribute("big","lang","NMTOKEN",null);  attribute("blink","lang","NMTOKEN",null);  attribute("blockquote","lang","NMTOKEN",null);  attribute("body","lang","NMTOKEN",null);  attribute("br","lang","NMTOKEN",null);  attribute("button","lang","NMTOKEN",null);  attribute("canvas","lang","NMTOKEN",null);  attribute("caption","lang","NMTOKEN",null);  attribute("center","lang","NMTOKEN",null);  attribute("cite","lang","NMTOKEN",null);  attribute("code","lang","NMTOKEN",null);  attribute("col","lang","NMTOKEN",null);  attribute("colgroup","lang","NMTOKEN",null);  attribute("comment","lang","NMTOKEN",null);  attribute("dd","lang","NMTOKEN",null);  attribute("del","lang","NMTOKEN",null);  attribute("dfn","lang","NMTOKEN",null);  attribute("dir","lang","NMTOKEN",null);  attribute("div","lang","NMTOKEN",null);  attribute("dl","lang","NMTOKEN",null);  attribute("dt","lang","NMTOKEN",null);  attribute("em","lang","NMTOKEN",null);  attribute("fieldset","lang","NMTOKEN",null);  attribute("font","lang","NMTOKEN",null);  attribute("form","lang","NMTOKEN",null);  attribute("frame","lang","NMTOKEN",null);  attribute("frameset","lang","NMTOKEN",null);  attribute("h1","lang","NMTOKEN",null);  attribute("h2","lang","NMTOKEN",null);  attribute("h3","lang","NMTOKEN",null);  attribute("h4","lang","NMTOKEN",null);  attribute("h5","lang","NMTOKEN",null);  attribute("h6","lang","NMTOKEN",null);  attribute("head","lang","NMTOKEN",null);  attribute("hr","lang","NMTOKEN",null);  attribute("html","lang","NMTOKEN",null);  attribute("i","lang","NMTOKEN",null);  attribute("iframe","lang","NMTOKEN",null);  attribute("img","lang","NMTOKEN",null);  attribute("input","lang","NMTOKEN",null);  attribute("ins","lang","NMTOKEN",null);  attribute("isindex","lang","NMTOKEN",null);  attribute("kbd","lang","NMTOKEN",null);  attribute("label","lang","NMTOKEN",null);  attribute("legend","lang","NMTOKEN",null);  attribute("li","lang","NMTOKEN",null);  attribute("link","lang","NMTOKEN",null);  attribute("listing","lang","NMTOKEN",null);  attribute("map","lang","NMTOKEN",null);  attribute("marquee","lang","NMTOKEN",null);  attribute("menu","lang","NMTOKEN",null);  attribute("meta","lang","NMTOKEN",null);  attribute("nobr","lang","NMTOKEN",null);  attribute("noframes","lang","NMTOKEN",null);  attribute("noscript","lang","NMTOKEN",null);  attribute("object","lang","NMTOKEN",null);  attribute("ol","lang","NMTOKEN",null);  attribute("optgroup","lang","NMTOKEN",null);  attribute("option","lang","NMTOKEN",null);  attribute("p","lang","NMTOKEN",null);  attribute("param","lang","NMTOKEN",null);  attribute("pre","lang","NMTOKEN",null);  attribute("q","lang","NMTOKEN",null);  attribute("rb","lang","NMTOKEN",null);  attribute("rbc","lang","NMTOKEN",null);  attribute("rp","lang","NMTOKEN",null);  attribute("rt","lang","NMTOKEN",null);  attribute("rtc","lang","NMTOKEN",null);  attribute("ruby","lang","NMTOKEN",null);  attribute("s","lang","NMTOKEN",null);  attribute("samp","lang","NMTOKEN",null);  attribute("script","lang","NMTOKEN",null);  attribute("select","lang","NMTOKEN",null);  attribute("small","lang","NMTOKEN",null);  attribute("span","lang","NMTOKEN",null);  attribute("strike","lang","NMTOKEN",null);  attribute("strong","lang","NMTOKEN",null);  attribute("style","lang","NMTOKEN",null);  attribute("sub","lang","NMTOKEN",null);  attribute("sup","lang","NMTOKEN",null);  attribute("table","lang","NMTOKEN",null);  attribute("tbody","lang","NMTOKEN",null);  attribute("td","lang","NMTOKEN",null);  attribute("textarea","lang","NMTOKEN",null);  attribute("tfoot","lang","NMTOKEN",null);  attribute("th","lang","NMTOKEN",null);  attribute("thead","lang","NMTOKEN",null);  attribute("title","lang","NMTOKEN",null);  attribute("tr","lang","NMTOKEN",null);  attribute("tt","lang","NMTOKEN",null);  attribute("u","lang","NMTOKEN",null);  attribute("ul","lang","NMTOKEN",null);  attribute("var","lang","NMTOKEN",null);  attribute("wbr","lang","NMTOKEN",null);  attribute("xmp","lang","NMTOKEN",null);  entity("aacgr",0x03AC);  entity("Aacgr",0x0386);  entity("aacute",0x00E1);  entity("Aacute",0x00C1);  entity("abreve",0x0103);  entity("Abreve",0x0102);  entity("ac",0x223E);  entity("acd",0x223F);  entity("acirc",0x00E2);  entity("Acirc",0x00C2);  entity("acute",0x00B4);  entity("acy",0x0430);  entity("Acy",0x0410);  entity("aelig",0x00E6);  entity("AElig",0x00C6);  entity("af",0x2061);  entity("afr",0x1D51E);  entity("Afr",0x1D504);  entity("agr",0x03B1);  entity("Agr",0x0391);  entity("agrave",0x00E0);  entity("Agrave",0x00C0);  entity("alefsym",0x2135);  entity("aleph",0x2135);  entity("alpha",0x03B1);  entity("Alpha",0x0391);  entity("amacr",0x0101);  entity("Amacr",0x0100);  entity("amalg",0x2A3F);  entity("amp",0x0026);  entity("and",0x2227);  entity("And",0x2A53);  entity("andand",0x2A55);  entity("andd",0x2A5C);  entity("andslope",0x2A58);  entity("andv",0x2A5A);  entity("ang",0x2220);  entity("ange",0x29A4);  entity("angle",0x2220);  entity("angmsd",0x2221);  entity("angmsdaa",0x29A8);  entity("angmsdab",0x29A9);  entity("angmsdac",0x29AA);  entity("angmsdad",0x29AB);  entity("angmsdae",0x29AC);  entity("angmsdaf",0x29AD);  entity("angmsdag",0x29AE);  entity("angmsdah",0x29AF);  entity("angrt",0x221F);  entity("angrtvb",0x22BE);  entity("angrtvbd",0x299D);  entity("angsph",0x2222);  entity("angst",0x212B);  entity("angzarr",0x237C);  entity("aogon",0x0105);  entity("Aogon",0x0104);  entity("aopf",0x1D552);  entity("Aopf",0x1D538);  entity("ap",0x2248);  entity("apacir",0x2A6F);  entity("ape",0x224A);  entity("apE",0x2A70);  entity("apid",0x224B);  entity("apos",0x0027);  entity("ApplyFunction",0x2061);  entity("approx",0x2248);  entity("approxeq",0x224A);  entity("aring",0x00E5);  entity("Aring",0x00C5);  entity("ascr",0x1D4B6);  entity("Ascr",0x1D49C);  entity("Assign",0x2254);  entity("ast",0x002A);  entity("asymp",0x2248);  entity("asympeq",0x224D);  entity("atilde",0x00E3);  entity("Atilde",0x00C3);  entity("auml",0x00E4);  entity("Auml",0x00C4);  entity("awconint",0x2233);  entity("awint",0x2A11);  entity("b.alpha",0x1D6C2);  entity("b.beta",0x1D6C3);  entity("b.chi",0x1D6D8);  entity("b.delta",0x1D6C5);  entity("b.Delta",0x1D6AB);  entity("b.epsi",0x1D6C6);  entity("b.epsiv",0x1D6DC);  entity("b.eta",0x1D6C8);  entity("b.gamma",0x1D6C4);  entity("b.Gamma",0x1D6AA);  entity("b.gammad",0x1D7CB);  entity("b.Gammad",0x1D7CA);  entity("b.iota",0x1D6CA);  entity("b.kappa",0x1D6CB);  entity("b.kappav",0x1D6DE);  entity("b.lambda",0x1D6CC);  entity("b.Lambda",0x1D6B2);  entity("b.mu",0x1D6CD);  entity("b.nu",0x1D6CE);  entity("b.omega",0x1D6DA);  entity("b.Omega",0x1D6C0);  entity("b.phi",0x1D6D7);  entity("b.Phi",0x1D6BD);  entity("b.phiv",0x1D6DF);  entity("b.pi",0x1D6D1);  entity("b.Pi",0x1D6B7);  entity("b.piv",0x1D6E1);  entity("b.psi",0x1D6D9);  entity("b.Psi",0x1D6BF);  entity("b.rho",0x1D6D2);  entity("b.rhov",0x1D6E0);  entity("b.sigma",0x1D6D4);  entity("b.Sigma",0x1D6BA);  entity("b.sigmav",0x1D6D3);  entity("b.tau",0x1D6D5);  entity("b.Theta",0x1D6AF);  entity("b.thetas",0x1D6C9);  entity("b.thetav",0x1D6DD);  entity("b.upsi",0x1D6D6);  entity("b.Upsi",0x1D6BC);  entity("b.xi",0x1D6CF);  entity("b.Xi",0x1D6B5);  entity("b.zeta",0x1D6C7);  entity("backcong",0x224C);  entity("backepsilon",0x03F6);  entity("backprime",0x2035);  entity("backsim",0x223D);  entity("backsimeq",0x22CD);  entity("Backslash",0x2216);  entity("Barv",0x2AE7);  entity("barvee",0x22BD);  entity("barwed",0x2305);  entity("Barwed",0x2306);  entity("barwedge",0x2305);  entity("bbrk",0x23B5);  entity("bbrktbrk",0x23B6);  entity("bcong",0x224C);  entity("bcy",0x0431);  entity("Bcy",0x0411);  entity("bdquo",0x201E);  entity("becaus",0x2235);  entity("because",0x2235);  entity("bemptyv",0x29B0);  entity("bepsi",0x03F6);  entity("bernou",0x212C);  entity("Bernoullis",0x212C);  entity("beta",0x03B2);  entity("Beta",0x0392);  entity("beth",0x2136);  entity("between",0x226C);  entity("bfr",0x1D51F);  entity("Bfr",0x1D505);  entity("bgr",0x03B2);  entity("Bgr",0x0392);  entity("bigcap",0x22C2);  entity("bigcirc",0x25EF);  entity("bigcup",0x22C3);  entity("bigodot",0x2A00);  entity("bigoplus",0x2A01);  entity("bigotimes",0x2A02);  entity("bigsqcup",0x2A06);  entity("bigstar",0x2605);  entity("bigtriangledown",0x25BD);  entity("bigtriangleup",0x25B3);  entity("biguplus",0x2A04);  entity("bigvee",0x22C1);  entity("bigwedge",0x22C0);  entity("bkarow",0x290D);  entity("blacklozenge",0x29EB);  entity("blacksquare",0x25AA);  entity("blacktriangle",0x25B4);  entity("blacktriangledown",0x25BE);  entity("blacktriangleleft",0x25C2);  entity("blacktriangleright",0x25B8);  entity("blank",0x2423);  entity("blk12",0x2592);  entity("blk14",0x2591);  entity("blk34",0x2593);  entity("block",0x2588);  entity("bnot",0x2310);  entity("bNot",0x2AED);  entity("bopf",0x1D553);  entity("Bopf",0x1D539);  entity("bot",0x22A5);  entity("bottom",0x22A5);  entity("bowtie",0x22C8);  entity("boxbox",0x29C9);  entity("boxdl",0x2510);  entity("boxdL",0x2555);  entity("boxDl",0x2556);  entity("boxDL",0x2557);  entity("boxdr",0x250C);  entity("boxdR",0x2552);  entity("boxDr",0x2553);  entity("boxDR",0x2554);  entity("boxh",0x2500);  entity("boxH",0x2550);  entity("boxhd",0x252C);  entity("boxhD",0x2565);  entity("boxHd",0x2564);  entity("boxHD",0x2566);  entity("boxhu",0x2534);  entity("boxhU",0x2568);  entity("boxHu",0x2567);  entity("boxHU",0x2569);  entity("boxminus",0x229F);  entity("boxplus",0x229E);  entity("boxtimes",0x22A0);  entity("boxul",0x2518);  entity("boxuL",0x255B);  entity("boxUl",0x255C);  entity("boxUL",0x255D);  entity("boxur",0x2514);  entity("boxuR",0x2558);  entity("boxUr",0x2559);  entity("boxUR",0x255A);  entity("boxv",0x2502);  entity("boxV",0x2551);  entity("boxvh",0x253C);  entity("boxvH",0x256A);  entity("boxVh",0x256B);  entity("boxVH",0x256C);  entity("boxvl",0x2524);  entity("boxvL",0x2561);  entity("boxVl",0x2562);  entity("boxVL",0x2563);  entity("boxvr",0x251C);  entity("boxvR",0x255E);  entity("boxVr",0x255F);  entity("boxVR",0x2560);  entity("bprime",0x2035);  entity("breve",0x02D8);  entity("brvbar",0x00A6);  entity("bscr",0x1D4B7);  entity("Bscr",0x212C);  entity("bsemi",0x204F);  entity("bsim",0x223D);  entity("bsime",0x22CD);  entity("bsol",0x005C);  entity("bsolb",0x29C5);  entity("bull",0x2022);  entity("bullet",0x2022);  entity("bump",0x224E);  entity("bumpe",0x224F);  entity("bumpE",0x2AAE);  entity("bumpeq",0x224F);  entity("Bumpeq",0x224E);  entity("cacute",0x0107);  entity("Cacute",0x0106);  entity("cap",0x2229);  entity("Cap",0x22D2);  entity("capand",0x2A44);  entity("capbrcup",0x2A49);  entity("capcap",0x2A4B);  entity("capcup",0x2A47);  entity("capdot",0x2A40);  entity("CapitalDifferentialD",0x2145);  entity("caret",0x2041);  entity("caron",0x02C7);  entity("Cayleys",0x212D);  entity("ccaps",0x2A4D);  entity("ccaron",0x010D);  entity("Ccaron",0x010C);  entity("ccedil",0x00E7);  entity("Ccedil",0x00C7);  entity("ccirc",0x0109);  entity("Ccirc",0x0108);  entity("Cconint",0x2230);  entity("ccups",0x2A4C);  entity("ccupssm",0x2A50);  entity("cdot",0x010B);  entity("Cdot",0x010A);  entity("cedil",0x00B8);  entity("Cedilla",0x00B8);  entity("cemptyv",0x29B2);  entity("cent",0x00A2);  entity("centerdot",0x00B7);  entity("cfr",0x1D520);  entity("Cfr",0x212D);  entity("chcy",0x0447);  entity("CHcy",0x0427);  entity("check",0x2713);  entity("checkmark",0x2713);  entity("chi",0x03C7);  entity("Chi",0x03A7);  entity("cir",0x25CB);  entity("circ",0x02C6);  entity("circeq",0x2257);  entity("circlearrowleft",0x21BA);  entity("circlearrowright",0x21BB);  entity("circledast",0x229B);  entity("circledcirc",0x229A);  entity("circleddash",0x229D);  entity("CircleDot",0x2299);  entity("circledR",0x00AE);  entity("circledS",0x24C8);  entity("CircleMinus",0x2296);  entity("CirclePlus",0x2295);  entity("CircleTimes",0x2297);  entity("cire",0x2257);  entity("cirE",0x29C3);  entity("cirfnint",0x2A10);  entity("cirmid",0x2AEF);  entity("cirscir",0x29C2);  entity("ClockwiseContourIntegral",0x2232);  entity("CloseCurlyDoubleQuote",0x201D);  entity("CloseCurlyQuote",0x2019);  entity("clubs",0x2663);  entity("clubsuit",0x2663);  entity("colon",0x003A);  entity("Colon",0x2237);  entity("colone",0x2254);  entity("Colone",0x2A74);  entity("coloneq",0x2254);  entity("comma",0x002C);  entity("commat",0x0040);  entity("comp",0x2201);  entity("compfn",0x2218);  entity("complement",0x2201);  entity("complexes",0x2102);  entity("cong",0x2245);  entity("congdot",0x2A6D);  entity("Congruent",0x2261);  entity("conint",0x222E);  entity("Conint",0x222F);  entity("ContourIntegral",0x222E);  entity("copf",0x1D554);  entity("Copf",0x2102);  entity("coprod",0x2210);  entity("Coproduct",0x2210);  entity("copy",0x00A9);  entity("copysr",0x2117);  entity("CounterClockwiseContourIntegral",0x2233);  entity("crarr",0x21B5);  entity("cross",0x2717);  entity("Cross",0x2A2F);  entity("cscr",0x1D4B8);  entity("Cscr",0x1D49E);  entity("csub",0x2ACF);  entity("csube",0x2AD1);  entity("csup",0x2AD0);  entity("csupe",0x2AD2);  entity("ctdot",0x22EF);  entity("cudarrl",0x2938);  entity("cudarrr",0x2935);  entity("cuepr",0x22DE);  entity("cuesc",0x22DF);  entity("cularr",0x21B6);  entity("cularrp",0x293D);  entity("cup",0x222A);  entity("Cup",0x22D3);  entity("cupbrcap",0x2A48);  entity("cupcap",0x2A46);  entity("CupCap",0x224D);  entity("cupcup",0x2A4A);  entity("cupdot",0x228D);  entity("cupor",0x2A45);  entity("curarr",0x21B7);  entity("curarrm",0x293C);  entity("curlyeqprec",0x22DE);  entity("curlyeqsucc",0x22DF);  entity("curlyvee",0x22CE);  entity("curlywedge",0x22CF);  entity("curren",0x00A4);  entity("curvearrowleft",0x21B6);  entity("curvearrowright",0x21B7);  entity("cuvee",0x22CE);  entity("cuwed",0x22CF);  entity("cwconint",0x2232);  entity("cwint",0x2231);  entity("cylcty",0x232D);  entity("dagger",0x2020);  entity("Dagger",0x2021);  entity("daleth",0x2138);  entity("darr",0x2193);  entity("dArr",0x21D3);  entity("Darr",0x21A1);  entity("dash",0x2010);  entity("dashv",0x22A3);  entity("Dashv",0x2AE4);  entity("dbkarow",0x290F);  entity("dblac",0x02DD);  entity("dcaron",0x010F);  entity("Dcaron",0x010E);  entity("dcy",0x0434);  entity("Dcy",0x0414);  entity("dd",0x2146);  entity("DD",0x2145);  entity("ddagger",0x2021);  entity("ddarr",0x21CA);  entity("DDotrahd",0x2911);  entity("ddotseq",0x2A77);  entity("deg",0x00B0);  entity("Del",0x2207);  entity("delta",0x03B4);  entity("Delta",0x0394);  entity("demptyv",0x29B1);  entity("dfisht",0x297F);  entity("dfr",0x1D521);  entity("Dfr",0x1D507);  entity("dgr",0x03B4);  entity("Dgr",0x0394);  entity("dHar",0x2965);  entity("dharl",0x21C3);  entity("dharr",0x21C2);  entity("DiacriticalAcute",0x00B4);  entity("DiacriticalDot",0x02D9);  entity("DiacriticalDoubleAcute",0x02DD);  entity("DiacriticalGrave",0x0060);  entity("DiacriticalTilde",0x02DC);  entity("diam",0x22C4);  entity("diamond",0x22C4);  entity("diamondsuit",0x2666);  entity("diams",0x2666);  entity("die",0x00A8);  entity("DifferentialD",0x2146);  entity("digamma",0x03DD);  entity("disin",0x22F2);  entity("div",0x00F7);  entity("divide",0x00F7);  entity("divideontimes",0x22C7);  entity("divonx",0x22C7);  entity("djcy",0x0452);  entity("DJcy",0x0402);  entity("dlcorn",0x231E);  entity("dlcrop",0x230D);  entity("dollar",0x0024);  entity("dopf",0x1D555);  entity("Dopf",0x1D53B);  entity("dot",0x02D9);  entity("Dot",0x00A8);  entity("doteq",0x2250);  entity("doteqdot",0x2251);  entity("DotEqual",0x2250);  entity("dotminus",0x2238);  entity("dotplus",0x2214);  entity("dotsquare",0x22A1);  entity("doublebarwedge",0x2306);  entity("DoubleContourIntegral",0x222F);  entity("DoubleDot",0x00A8);  entity("DoubleDownArrow",0x21D3);  entity("DoubleLeftArrow",0x21D0);  entity("DoubleLeftRightArrow",0x21D4);  entity("DoubleLeftTee",0x2AE4);  entity("DoubleLongLeftArrow",0x27F8);  entity("DoubleLongLeftRightArrow",0x27FA);  entity("DoubleLongRightArrow",0x27F9);  entity("DoubleRightArrow",0x21D2);  entity("DoubleRightTee",0x22A8);  entity("DoubleUpArrow",0x21D1);  entity("DoubleUpDownArrow",0x21D5);  entity("DoubleVerticalBar",0x2225);  entity("downarrow",0x2193);  entity("Downarrow",0x21D3);  entity("DownArrowBar",0x2913);  entity("DownArrowUpArrow",0x21F5);  entity("downdownarrows",0x21CA);  entity("downharpoonleft",0x21C3);  entity("downharpoonright",0x21C2);  entity("DownLeftRightVector",0x2950);  entity("DownLeftTeeVector",0x295E);  entity("DownLeftVector",0x21BD);  entity("DownLeftVectorBar",0x2956);  entity("DownRightTeeVector",0x295F);  entity("DownRightVector",0x21C1);  entity("DownRightVectorBar",0x2957);  entity("DownTee",0x22A4);  entity("DownTeeArrow",0x21A7);  entity("drbkarow",0x2910);  entity("drcorn",0x231F);  entity("drcrop",0x230C);  entity("dscr",0x1D4B9);  entity("Dscr",0x1D49F);  entity("dscy",0x0455);  entity("DScy",0x0405);  entity("dsol",0x29F6);  entity("dstrok",0x0111);  entity("Dstrok",0x0110);  entity("dtdot",0x22F1);  entity("dtri",0x25BF);  entity("dtrif",0x25BE);  entity("duarr",0x21F5);  entity("duhar",0x296F);  entity("dwangle",0x29A6);  entity("dzcy",0x045F);  entity("DZcy",0x040F);  entity("dzigrarr",0x27FF);  entity("eacgr",0x03AD);  entity("Eacgr",0x0388);  entity("eacute",0x00E9);  entity("Eacute",0x00C9);  entity("easter",0x2A6E);  entity("ecaron",0x011B);  entity("Ecaron",0x011A);  entity("ecir",0x2256);  entity("ecirc",0x00EA);  entity("Ecirc",0x00CA);  entity("ecolon",0x2255);  entity("ecy",0x044D);  entity("Ecy",0x042D);  entity("eDDot",0x2A77);  entity("edot",0x0117);  entity("eDot",0x2251);  entity("Edot",0x0116);  entity("ee",0x2147);  entity("eeacgr",0x03AE);  entity("EEacgr",0x0389);  entity("eegr",0x03B7);  entity("EEgr",0x0397);  entity("efDot",0x2252);  entity("efr",0x1D522);  entity("Efr",0x1D508);  entity("eg",0x2A9A);  entity("egr",0x03B5);  entity("Egr",0x0395);  entity("egrave",0x00E8);  entity("Egrave",0x00C8);  entity("egs",0x2A96);  entity("egsdot",0x2A98);  entity("el",0x2A99);  entity("Element",0x2208);  entity("elinters",0x23E7);  entity("ell",0x2113);  entity("els",0x2A95);  entity("elsdot",0x2A97);  entity("emacr",0x0113);  entity("Emacr",0x0112);  entity("empty",0x2205);  entity("emptyset",0x2205);  entity("EmptySmallSquare",0x25FB);  entity("emptyv",0x2205);  entity("EmptyVerySmallSquare",0x25AB);  entity("emsp",0x2003);  entity("emsp13",0x2004);  entity("emsp14",0x2005);  entity("eng",0x014B);  entity("ENG",0x014A);  entity("ensp",0x2002);  entity("eogon",0x0119);  entity("Eogon",0x0118);  entity("eopf",0x1D556);  entity("Eopf",0x1D53C);  entity("epar",0x22D5);  entity("eparsl",0x29E3);  entity("eplus",0x2A71);  entity("epsi",0x03F5);  entity("epsilon",0x03B5);  entity("Epsilon",0x0395);  entity("epsiv",0x03B5);  entity("eqcirc",0x2256);  entity("eqcolon",0x2255);  entity("eqsim",0x2242);  entity("eqslantgtr",0x2A96);  entity("eqslantless",0x2A95);  entity("Equal",0x2A75);  entity("equals",0x003D);  entity("EqualTilde",0x2242);  entity("equest",0x225F);  entity("Equilibrium",0x21CC);  entity("equiv",0x2261);  entity("equivDD",0x2A78);  entity("eqvparsl",0x29E5);  entity("erarr",0x2971);  entity("erDot",0x2253);  entity("escr",0x212F);  entity("Escr",0x2130);  entity("esdot",0x2250);  entity("esim",0x2242);  entity("Esim",0x2A73);  entity("eta",0x03B7);  entity("Eta",0x0397);  entity("eth",0x00F0);  entity("ETH",0x00D0);  entity("euml",0x00EB);  entity("Euml",0x00CB);  entity("euro",0x20AC);  entity("excl",0x0021);  entity("exist",0x2203);  entity("Exists",0x2203);  entity("expectation",0x2130);  entity("exponentiale",0x2147);  entity("fallingdotseq",0x2252);  entity("fcy",0x0444);  entity("Fcy",0x0424);  entity("female",0x2640);  entity("ffilig",0xFB03);  entity("fflig",0xFB00);  entity("ffllig",0xFB04);  entity("ffr",0x1D523);  entity("Ffr",0x1D509);  entity("filig",0xFB01);  entity("FilledSmallSquare",0x25FC);  entity("FilledVerySmallSquare",0x25AA);  entity("flat",0x266D);  entity("fllig",0xFB02);  entity("fltns",0x25B1);  entity("fnof",0x0192);  entity("fopf",0x1D557);  entity("Fopf",0x1D53D);  entity("forall",0x2200);  entity("fork",0x22D4);  entity("forkv",0x2AD9);  entity("Fouriertrf",0x2131);  entity("fpartint",0x2A0D);  entity("frac12",0x00BD);  entity("frac13",0x2153);  entity("frac14",0x00BC);  entity("frac15",0x2155);  entity("frac16",0x2159);  entity("frac18",0x215B);  entity("frac23",0x2154);  entity("frac25",0x2156);  entity("frac34",0x00BE);  entity("frac35",0x2157);  entity("frac38",0x215C);  entity("frac45",0x2158);  entity("frac56",0x215A);  entity("frac58",0x215D);  entity("frac78",0x215E);  entity("frasl",0x2044);  entity("frown",0x2322);  entity("fscr",0x1D4BB);  entity("Fscr",0x2131);  entity("gacute",0x01F5);  entity("gamma",0x03B3);  entity("Gamma",0x0393);  entity("gammad",0x03DD);  entity("Gammad",0x03DC);  entity("gap",0x2A86);  entity("gbreve",0x011F);  entity("Gbreve",0x011E);  entity("Gcedil",0x0122);  entity("gcirc",0x011D);  entity("Gcirc",0x011C);  entity("gcy",0x0433);  entity("Gcy",0x0413);  entity("gdot",0x0121);  entity("Gdot",0x0120);  entity("ge",0x2265);  entity("gE",0x2267);  entity("gel",0x22DB);  entity("gEl",0x2A8C);  entity("geq",0x2265);  entity("geqq",0x2267);  entity("geqslant",0x2A7E);  entity("ges",0x2A7E);  entity("gescc",0x2AA9);  entity("gesdot",0x2A80);  entity("gesdoto",0x2A82);  entity("gesdotol",0x2A84);  entity("gesles",0x2A94);  entity("gfr",0x1D524);  entity("Gfr",0x1D50A);  entity("gg",0x226B);  entity("Gg",0x22D9);  entity("ggg",0x22D9);  entity("ggr",0x03B3);  entity("Ggr",0x0393);  entity("gimel",0x2137);  entity("gjcy",0x0453);  entity("GJcy",0x0403);  entity("gl",0x2277);  entity("gla",0x2AA5);  entity("glE",0x2A92);  entity("glj",0x2AA4);  entity("gnap",0x2A8A);  entity("gnapprox",0x2A8A);  entity("gne",0x2A88);  entity("gnE",0x2269);  entity("gneq",0x2A88);  entity("gneqq",0x2269);  entity("gnsim",0x22E7);  entity("gopf",0x1D558);  entity("Gopf",0x1D53E);  entity("grave",0x0060);  entity("GreaterEqual",0x2265);  entity("GreaterEqualLess",0x22DB);  entity("GreaterFullEqual",0x2267);  entity("GreaterGreater",0x2AA2);  entity("GreaterLess",0x2277);  entity("GreaterSlantEqual",0x2A7E);  entity("GreaterTilde",0x2273);  entity("gscr",0x210A);  entity("Gscr",0x1D4A2);  entity("gsim",0x2273);  entity("gsime",0x2A8E);  entity("gsiml",0x2A90);  entity("gt",0x003E);  entity("Gt",0x226B);  entity("gtcc",0x2AA7);  entity("gtcir",0x2A7A);  entity("gtdot",0x22D7);  entity("gtlPar",0x2995);  entity("gtquest",0x2A7C);  entity("gtrapprox",0x2A86);  entity("gtrarr",0x2978);  entity("gtrdot",0x22D7);  entity("gtreqless",0x22DB);  entity("gtreqqless",0x2A8C);  entity("gtrless",0x2277);  entity("gtrsim",0x2273);  entity("Hacek",0x02C7);  entity("hairsp",0x200A);  entity("half",0x00BD);  entity("hamilt",0x210B);  entity("hardcy",0x044A);  entity("HARDcy",0x042A);  entity("harr",0x2194);  entity("hArr",0x21D4);  entity("harrcir",0x2948);  entity("harrw",0x21AD);  entity("Hat",0x005E);  entity("hbar",0x210F);  entity("hcirc",0x0125);  entity("Hcirc",0x0124);  entity("hearts",0x2665);  entity("heartsuit",0x2665);  entity("hellip",0x2026);  entity("hercon",0x22B9);  entity("hfr",0x1D525);  entity("Hfr",0x210C);  entity("HilbertSpace",0x210B);  entity("hksearow",0x2925);  entity("hkswarow",0x2926);  entity("hoarr",0x21FF);  entity("homtht",0x223B);  entity("hookleftarrow",0x21A9);  entity("hookrightarrow",0x21AA);  entity("hopf",0x1D559);  entity("Hopf",0x210D);  entity("horbar",0x2015);  entity("HorizontalLine",0x2500);  entity("hscr",0x1D4BD);  entity("Hscr",0x210B);  entity("hslash",0x210F);  entity("hstrok",0x0127);  entity("Hstrok",0x0126);  entity("HumpDownHump",0x224E);  entity("HumpEqual",0x224F);  entity("hybull",0x2043);  entity("hyphen",0x2010);  entity("iacgr",0x03AF);  entity("Iacgr",0x038A);  entity("iacute",0x00ED);  entity("Iacute",0x00CD);  entity("ic",0x2063);  entity("icirc",0x00EE);  entity("Icirc",0x00CE);  entity("icy",0x0438);  entity("Icy",0x0418);  entity("idiagr",0x0390);  entity("idigr",0x03CA);  entity("Idigr",0x03AA);  entity("Idot",0x0130);  entity("iecy",0x0435);  entity("IEcy",0x0415);  entity("iexcl",0x00A1);  entity("iff",0x21D4);  entity("ifr",0x1D526);  entity("Ifr",0x2111);  entity("igr",0x03B9);  entity("Igr",0x0399);  entity("igrave",0x00EC);  entity("Igrave",0x00CC);  entity("ii",0x2148);  entity("iiiint",0x2A0C);  entity("iiint",0x222D);  entity("iinfin",0x29DC);  entity("iiota",0x2129);  entity("ijlig",0x0133);  entity("IJlig",0x0132);  entity("Im",0x2111);  entity("imacr",0x012B);  entity("Imacr",0x012A);  entity("image",0x2111);  entity("ImaginaryI",0x2148);  entity("imagline",0x2110);  entity("imagpart",0x2111);  entity("imath",0x0131);  entity("imof",0x22B7);  entity("imped",0x01B5);  entity("Implies",0x21D2);  entity("in",0x2208);  entity("incare",0x2105);  entity("infin",0x221E);  entity("infintie",0x29DD);  entity("inodot",0x0131);  entity("int",0x222B);  entity("Int",0x222C);  entity("intcal",0x22BA);  entity("integers",0x2124);  entity("Integral",0x222B);  entity("intercal",0x22BA);  entity("Intersection",0x22C2);  entity("intlarhk",0x2A17);  entity("intprod",0x2A3C);  entity("InvisibleComma",0x2063);  entity("InvisibleTimes",0x2062);  entity("iocy",0x0451);  entity("IOcy",0x0401);  entity("iogon",0x012F);  entity("Iogon",0x012E);  entity("iopf",0x1D55A);  entity("Iopf",0x1D540);  entity("iota",0x03B9);  entity("Iota",0x0399);  entity("iprod",0x2A3C);  entity("iquest",0x00BF);  entity("iscr",0x1D4BE);  entity("Iscr",0x2110);  entity("isin",0x2208);  entity("isindot",0x22F5);  entity("isinE",0x22F9);  entity("isins",0x22F4);  entity("isinsv",0x22F3);  entity("isinv",0x2208);  entity("it",0x2062);  entity("itilde",0x0129);  entity("Itilde",0x0128);  entity("iukcy",0x0456);  entity("Iukcy",0x0406);  entity("iuml",0x00EF);  entity("Iuml",0x00CF);  entity("jcirc",0x0135);  entity("Jcirc",0x0134);  entity("jcy",0x0439);  entity("Jcy",0x0419);  entity("jfr",0x1D527);  entity("Jfr",0x1D50D);  entity("jmath",0x0237);  entity("jopf",0x1D55B);  entity("Jopf",0x1D541);  entity("jscr",0x1D4BF);  entity("Jscr",0x1D4A5);  entity("jsercy",0x0458);  entity("Jsercy",0x0408);  entity("jukcy",0x0454);  entity("Jukcy",0x0404);  entity("kappa",0x03BA);  entity("Kappa",0x039A);  entity("kappav",0x03F0);  entity("kcedil",0x0137);  entity("Kcedil",0x0136);  entity("kcy",0x043A);  entity("Kcy",0x041A);  entity("kfr",0x1D528);  entity("Kfr",0x1D50E);  entity("kgr",0x03BA);  entity("Kgr",0x039A);  entity("kgreen",0x0138);  entity("khcy",0x0445);  entity("KHcy",0x0425);  entity("khgr",0x03C7);  entity("KHgr",0x03A7);  entity("kjcy",0x045C);  entity("KJcy",0x040C);  entity("kopf",0x1D55C);  entity("Kopf",0x1D542);  entity("kscr",0x1D4C0);  entity("Kscr",0x1D4A6);  entity("lAarr",0x21DA);  entity("lacute",0x013A);  entity("Lacute",0x0139);  entity("laemptyv",0x29B4);  entity("lagran",0x2112);  entity("lambda",0x03BB);  entity("Lambda",0x039B);  entity("lang",0x2329);  entity("Lang",0x27EA);  entity("langd",0x2991);  entity("langle",0x2329);  entity("lap",0x2A85);  entity("Laplacetrf",0x2112);  entity("laquo",0x00AB);  entity("larr",0x2190);  entity("lArr",0x21D0);  entity("Larr",0x219E);  entity("larrb",0x21E4);  entity("larrbfs",0x291F);  entity("larrfs",0x291D);  entity("larrhk",0x21A9);  entity("larrlp",0x21AB);  entity("larrpl",0x2939);  entity("larrsim",0x2973);  entity("larrtl",0x21A2);  entity("lat",0x2AAB);  entity("latail",0x2919);  entity("lAtail",0x291B);  entity("late",0x2AAD);  entity("lbarr",0x290C);  entity("lBarr",0x290E);  entity("lbbrk",0x2997);  entity("lbrace",0x007B);  entity("lbrack",0x005B);  entity("lbrke",0x298B);  entity("lbrksld",0x298F);  entity("lbrkslu",0x298D);  entity("lcaron",0x013E);  entity("Lcaron",0x013D);  entity("lcedil",0x013C);  entity("Lcedil",0x013B);  entity("lceil",0x2308);  entity("lcub",0x007B);  entity("lcy",0x043B);  entity("Lcy",0x041B);  entity("ldca",0x2936);  entity("ldquo",0x201C);  entity("ldquor",0x201E);  entity("ldrdhar",0x2967);  entity("ldrushar",0x294B);  entity("ldsh",0x21B2);  entity("le",0x2264);  entity("lE",0x2266);  entity("LeftAngleBracket",0x2329);  entity("leftarrow",0x2190);  entity("Leftarrow",0x21D0);  entity("LeftArrowBar",0x21E4);  entity("LeftArrowRightArrow",0x21C6);  entity("leftarrowtail",0x21A2);  entity("LeftCeiling",0x2308);  entity("LeftDoubleBracket",0x27E6);  entity("LeftDownTeeVector",0x2961);  entity("LeftDownVector",0x21C3);  entity("LeftDownVectorBar",0x2959);  entity("LeftFloor",0x230A);  entity("leftharpoondown",0x21BD);  entity("leftharpoonup",0x21BC);  entity("leftleftarrows",0x21C7);  entity("leftrightarrow",0x2194);  entity("Leftrightarrow",0x21D4);  entity("leftrightarrows",0x21C6);  entity("leftrightharpoons",0x21CB);  entity("leftrightsquigarrow",0x21AD);  entity("LeftRightVector",0x294E);  entity("LeftTee",0x22A3);  entity("LeftTeeArrow",0x21A4);  entity("LeftTeeVector",0x295A);  entity("leftthreetimes",0x22CB);  entity("LeftTriangle",0x22B2);  entity("LeftTriangleBar",0x29CF);  entity("LeftTriangleEqual",0x22B4);  entity("LeftUpDownVector",0x2951);  entity("LeftUpTeeVector",0x2960);  entity("LeftUpVector",0x21BF);  entity("LeftUpVectorBar",0x2958);  entity("LeftVector",0x21BC);  entity("LeftVectorBar",0x2952);  entity("leg",0x22DA);  entity("lEg",0x2A8B);  entity("leq",0x2264);  entity("leqq",0x2266);  entity("leqslant",0x2A7D);  entity("les",0x2A7D);  entity("lescc",0x2AA8);  entity("lesdot",0x2A7F);  entity("lesdoto",0x2A81);  entity("lesdotor",0x2A83);  entity("lesges",0x2A93);  entity("lessapprox",0x2A85);  entity("lessdot",0x22D6);  entity("lesseqgtr",0x22DA);  entity("lesseqqgtr",0x2A8B);  entity("LessEqualGreater",0x22DA);  entity("LessFullEqual",0x2266);  entity("LessGreater",0x2276);  entity("lessgtr",0x2276);  entity("LessLess",0x2AA1);  entity("lesssim",0x2272);  entity("LessSlantEqual",0x2A7D);  entity("LessTilde",0x2272);  entity("lfisht",0x297C);  entity("lfloor",0x230A);  entity("lfr",0x1D529);  entity("Lfr",0x1D50F);  entity("lg",0x2276);  entity("lgE",0x2A91);  entity("lgr",0x03BB);  entity("Lgr",0x039B);  entity("lHar",0x2962);  entity("lhard",0x21BD);  entity("lharu",0x21BC);  entity("lharul",0x296A);  entity("lhblk",0x2584);  entity("ljcy",0x0459);  entity("LJcy",0x0409);  entity("ll",0x226A);  entity("Ll",0x22D8);  entity("llarr",0x21C7);  entity("llcorner",0x231E);  entity("Lleftarrow",0x21DA);  entity("llhard",0x296B);  entity("lltri",0x25FA);  entity("lmidot",0x0140);  entity("Lmidot",0x013F);  entity("lmoust",0x23B0);  entity("lmoustache",0x23B0);  entity("lnap",0x2A89);  entity("lnapprox",0x2A89);  entity("lne",0x2A87);  entity("lnE",0x2268);  entity("lneq",0x2A87);  entity("lneqq",0x2268);  entity("lnsim",0x22E6);  entity("loang",0x27EC);  entity("loarr",0x21FD);  entity("lobrk",0x27E6);  entity("longleftarrow",0x27F5);  entity("Longleftarrow",0x27F8);  entity("longleftrightarrow",0x27F7);  entity("Longleftrightarrow",0x27FA);  entity("longmapsto",0x27FC);  entity("longrightarrow",0x27F6);  entity("Longrightarrow",0x27F9);  entity("looparrowleft",0x21AB);  entity("looparrowright",0x21AC);  entity("lopar",0x2985);  entity("lopf",0x1D55D);  entity("Lopf",0x1D543);  entity("loplus",0x2A2D);  entity("lotimes",0x2A34);  entity("lowast",0x2217);  entity("lowbar",0x005F);  entity("LowerLeftArrow",0x2199);  entity("LowerRightArrow",0x2198);  entity("loz",0x25CA);  entity("lozenge",0x25CA);  entity("lozf",0x29EB);  entity("lpar",0x0028);  entity("lparlt",0x2993);  entity("lrarr",0x21C6);  entity("lrcorner",0x231F);  entity("lrhar",0x21CB);  entity("lrhard",0x296D);  entity("lrm",0x200E);  entity("lrtri",0x22BF);  entity("lsaquo",0x2039);  entity("lscr",0x1D4C1);  entity("Lscr",0x2112);  entity("lsh",0x21B0);  entity("lsim",0x2272);  entity("lsime",0x2A8D);  entity("lsimg",0x2A8F);  entity("lsqb",0x005B);  entity("lsquo",0x2018);  entity("lsquor",0x201A);  entity("lstrok",0x0142);  entity("Lstrok",0x0141);  entity("lt",0x003C);  entity("Lt",0x226A);  entity("ltcc",0x2AA6);  entity("ltcir",0x2A79);  entity("ltdot",0x22D6);  entity("lthree",0x22CB);  entity("ltimes",0x22C9);  entity("ltlarr",0x2976);  entity("ltquest",0x2A7B);  entity("ltri",0x25C3);  entity("ltrie",0x22B4);  entity("ltrif",0x25C2);  entity("ltrPar",0x2996);  entity("lurdshar",0x294A);  entity("luruhar",0x2966);  entity("macr",0x00AF);  entity("male",0x2642);  entity("malt",0x2720);  entity("maltese",0x2720);  entity("map",0x21A6);  entity("Map",0x2905);  entity("mapsto",0x21A6);  entity("mapstodown",0x21A7);  entity("mapstoleft",0x21A4);  entity("mapstoup",0x21A5);  entity("marker",0x25AE);  entity("mcomma",0x2A29);  entity("mcy",0x043C);  entity("Mcy",0x041C);  entity("mdash",0x2014);  entity("mDDot",0x223A);  entity("measuredangle",0x2221);  entity("MediumSpace",0x205F);  entity("Mellintrf",0x2133);  entity("mfr",0x1D52A);  entity("Mfr",0x1D510);  entity("mgr",0x03BC);  entity("Mgr",0x039C);  entity("mho",0x2127);  entity("micro",0x00B5);  entity("mid",0x2223);  entity("midast",0x002A);  entity("midcir",0x2AF0);  entity("middot",0x00B7);  entity("minus",0x2212);  entity("minusb",0x229F);  entity("minusd",0x2238);  entity("minusdu",0x2A2A);  entity("MinusPlus",0x2213);  entity("mlcp",0x2ADB);  entity("mldr",0x2026);  entity("mnplus",0x2213);  entity("models",0x22A7);  entity("mopf",0x1D55E);  entity("Mopf",0x1D544);  entity("mp",0x2213);  entity("mscr",0x1D4C2);  entity("Mscr",0x2133);  entity("mstpos",0x223E);  entity("mu",0x03BC);  entity("Mu",0x039C);  entity("multimap",0x22B8);  entity("mumap",0x22B8);  entity("nabla",0x2207);  entity("nacute",0x0144);  entity("Nacute",0x0143);  entity("nap",0x2249);  entity("napos",0x0149);  entity("napprox",0x2249);  entity("natur",0x266E);  entity("natural",0x266E);  entity("naturals",0x2115);  entity("nbsp",0x00A0);  entity("ncap",0x2A43);  entity("ncaron",0x0148);  entity("Ncaron",0x0147);  entity("ncedil",0x0146);  entity("Ncedil",0x0145);  entity("ncong",0x2247);  entity("ncup",0x2A42);  entity("ncy",0x043D);  entity("Ncy",0x041D);  entity("ndash",0x2013);  entity("ne",0x2260);  entity("nearhk",0x2924);  entity("nearr",0x2197);  entity("neArr",0x21D7);  entity("nearrow",0x2197);  entity("NegativeMediumSpace",0x200B);  entity("NegativeThickSpace",0x200B);  entity("NegativeThinSpace",0x200B);  entity("NegativeVeryThinSpace",0x200B);  entity("nequiv",0x2262);  entity("nesear",0x2928);  entity("NestedGreaterGreater",0x226B);  entity("NestedLessLess",0x226A);  entity("NewLine",0x000A);  entity("nexist",0x2204);  entity("nexists",0x2204);  entity("nfr",0x1D52B);  entity("Nfr",0x1D511);  entity("nge",0x2271);  entity("ngeq",0x2271);  entity("ngr",0x03BD);  entity("Ngr",0x039D);  entity("ngsim",0x2275);  entity("ngt",0x226F);  entity("ngtr",0x226F);  entity("nharr",0x21AE);  entity("nhArr",0x21CE);  entity("nhpar",0x2AF2);  entity("ni",0x220B);  entity("nis",0x22FC);  entity("nisd",0x22FA);  entity("niv",0x220B);  entity("njcy",0x045A);  entity("NJcy",0x040A);  entity("nlarr",0x219A);  entity("nlArr",0x21CD);  entity("nldr",0x2025);  entity("nle",0x2270);  entity("nleftarrow",0x219A);  entity("nLeftarrow",0x21CD);  entity("nleftrightarrow",0x21AE);  entity("nLeftrightarrow",0x21CE);  entity("nleq",0x2270);  entity("nless",0x226E);  entity("nlsim",0x2274);  entity("nlt",0x226E);  entity("nltri",0x22EA);  entity("nltrie",0x22EC);  entity("nmid",0x2224);  entity("NoBreak",0x2060);  entity("NonBreakingSpace",0x00A0);  entity("nopf",0x1D55F);  entity("Nopf",0x2115);  entity("not",0x00AC);  entity("Not",0x2AEC);  entity("NotCongruent",0x2262);  entity("NotCupCap",0x226D);  entity("NotDoubleVerticalBar",0x2226);  entity("NotElement",0x2209);  entity("NotEqual",0x2260);  entity("NotExists",0x2204);  entity("NotGreater",0x226F);  entity("NotGreaterEqual",0x2271);  entity("NotGreaterLess",0x2279);  entity("NotGreaterTilde",0x2275);  entity("notin",0x2209);  entity("notinva",0x2209);  entity("notinvb",0x22F7);  entity("notinvc",0x22F6);  entity("NotLeftTriangle",0x22EA);  entity("NotLeftTriangleEqual",0x22EC);  entity("NotLess",0x226E);  entity("NotLessEqual",0x2270);  entity("NotLessGreater",0x2278);  entity("NotLessTilde",0x2274);  entity("notni",0x220C);  entity("notniva",0x220C);  entity("notnivb",0x22FE);  entity("notnivc",0x22FD);  entity("NotPrecedes",0x2280);  entity("NotPrecedesSlantEqual",0x22E0);  entity("NotReverseElement",0x220C);  entity("NotRightTriangle",0x22EB);  entity("NotRightTriangleEqual",0x22ED);  entity("NotSquareSubsetEqual",0x22E2);  entity("NotSquareSupersetEqual",0x22E3);  entity("NotSubsetEqual",0x2288);  entity("NotSucceeds",0x2281);  entity("NotSucceedsSlantEqual",0x22E1);  entity("NotSupersetEqual",0x2289);  entity("NotTilde",0x2241);  entity("NotTildeEqual",0x2244);  entity("NotTildeFullEqual",0x2247);  entity("NotTildeTilde",0x2249);  entity("NotVerticalBar",0x2224);  entity("npar",0x2226);  entity("nparallel",0x2226);  entity("npolint",0x2A14);  entity("npr",0x2280);  entity("nprcue",0x22E0);  entity("nprec",0x2280);  entity("nrarr",0x219B);  entity("nrArr",0x21CF);  entity("nrightarrow",0x219B);  entity("nRightarrow",0x21CF);  entity("nrtri",0x22EB);  entity("nrtrie",0x22ED);  entity("nsc",0x2281);  entity("nsccue",0x22E1);  entity("nscr",0x1D4C3);  entity("Nscr",0x1D4A9);  entity("nshortmid",0x2224);  entity("nshortparallel",0x2226);  entity("nsim",0x2241);  entity("nsime",0x2244);  entity("nsimeq",0x2244);  entity("nsmid",0x2224);  entity("nspar",0x2226);  entity("nsqsube",0x22E2);  entity("nsqsupe",0x22E3);  entity("nsub",0x2284);  entity("nsube",0x2288);  entity("nsubseteq",0x2288);  entity("nsucc",0x2281);  entity("nsup",0x2285);  entity("nsupe",0x2289);  entity("nsupseteq",0x2289);  entity("ntgl",0x2279);  entity("ntilde",0x00F1);  entity("Ntilde",0x00D1);  entity("ntlg",0x2278);  entity("ntriangleleft",0x22EA);  entity("ntrianglelefteq",0x22EC);  entity("ntriangleright",0x22EB);  entity("ntrianglerighteq",0x22ED);  entity("nu",0x03BD);  entity("Nu",0x039D);  entity("num",0x0023);  entity("numero",0x2116);  entity("numsp",0x2007);  entity("nvdash",0x22AC);  entity("nvDash",0x22AD);  entity("nVdash",0x22AE);  entity("nVDash",0x22AF);  entity("nvHarr",0x2904);  entity("nvinfin",0x29DE);  entity("nvlArr",0x2902);  entity("nvrArr",0x2903);  entity("nwarhk",0x2923);  entity("nwarr",0x2196);  entity("nwArr",0x21D6);  entity("nwarrow",0x2196);  entity("nwnear",0x2927);  entity("oacgr",0x03CC);  entity("Oacgr",0x038C);  entity("oacute",0x00F3);  entity("Oacute",0x00D3);  entity("oast",0x229B);  entity("ocir",0x229A);  entity("ocirc",0x00F4);  entity("Ocirc",0x00D4);  entity("ocy",0x043E);  entity("Ocy",0x041E);  entity("odash",0x229D);  entity("odblac",0x0151);  entity("Odblac",0x0150);  entity("odiv",0x2A38);  entity("odot",0x2299);  entity("odsold",0x29BC);  entity("oelig",0x0153);  entity("OElig",0x0152);  entity("ofcir",0x29BF);  entity("ofr",0x1D52C);  entity("Ofr",0x1D512);  entity("ogon",0x02DB);  entity("ogr",0x03BF);  entity("Ogr",0x039F);  entity("ograve",0x00F2);  entity("Ograve",0x00D2);  entity("ogt",0x29C1);  entity("ohacgr",0x03CE);  entity("OHacgr",0x038F);  entity("ohbar",0x29B5);  entity("ohgr",0x03C9);  entity("OHgr",0x03A9);  entity("ohm",0x2126);  entity("oint",0x222E);  entity("olarr",0x21BA);  entity("olcir",0x29BE);  entity("olcross",0x29BB);  entity("oline",0x203E);  entity("olt",0x29C0);  entity("omacr",0x014D);  entity("Omacr",0x014C);  entity("omega",0x03C9);  entity("Omega",0x03A9);  entity("omicron",0x03BF);  entity("Omicron",0x039F);  entity("omid",0x29B6);  entity("ominus",0x2296);  entity("oopf",0x1D560);  entity("Oopf",0x1D546);  entity("opar",0x29B7);  entity("OpenCurlyDoubleQuote",0x201C);  entity("OpenCurlyQuote",0x2018);  entity("operp",0x29B9);  entity("oplus",0x2295);  entity("or",0x2228);  entity("Or",0x2A54);  entity("orarr",0x21BB);  entity("ord",0x2A5D);  entity("order",0x2134);  entity("orderof",0x2134);  entity("ordf",0x00AA);  entity("ordm",0x00BA);  entity("origof",0x22B6);  entity("oror",0x2A56);  entity("orslope",0x2A57);  entity("orv",0x2A5B);  entity("oS",0x24C8);  entity("oscr",0x2134);  entity("Oscr",0x1D4AA);  entity("oslash",0x00F8);  entity("Oslash",0x00D8);  entity("osol",0x2298);  entity("otilde",0x00F5);  entity("Otilde",0x00D5);  entity("otimes",0x2297);  entity("Otimes",0x2A37);  entity("otimesas",0x2A36);  entity("ouml",0x00F6);  entity("Ouml",0x00D6);  entity("ovbar",0x233D);  entity("OverBar",0x00AF);  entity("OverBrace",0xFE37);  entity("OverBracket",0x23B4);  entity("OverParenthesis",0xFE35);  entity("par",0x2225);  entity("para",0x00B6);  entity("parallel",0x2225);  entity("parsim",0x2AF3);  entity("parsl",0x2AFD);  entity("part",0x2202);  entity("PartialD",0x2202);  entity("pcy",0x043F);  entity("Pcy",0x041F);  entity("percnt",0x0025);  entity("period",0x002E);  entity("permil",0x2030);  entity("perp",0x22A5);  entity("pertenk",0x2031);  entity("pfr",0x1D52D);  entity("Pfr",0x1D513);  entity("pgr",0x03C0);  entity("Pgr",0x03A0);  entity("phgr",0x03C6);  entity("PHgr",0x03A6);  entity("phi",0x03D5);  entity("Phi",0x03A6);  entity("phiv",0x03C6);  entity("phmmat",0x2133);  entity("phone",0x260E);  entity("pi",0x03C0);  entity("Pi",0x03A0);  entity("pitchfork",0x22D4);  entity("piv",0x03D6);  entity("planck",0x210F);  entity("planckh",0x210E);  entity("plankv",0x210F);  entity("plus",0x002B);  entity("plusacir",0x2A23);  entity("plusb",0x229E);  entity("pluscir",0x2A22);  entity("plusdo",0x2214);  entity("plusdu",0x2A25);  entity("pluse",0x2A72);  entity("PlusMinus",0x00B1);  entity("plusmn",0x00B1);  entity("plussim",0x2A26);  entity("plustwo",0x2A27);  entity("pm",0x00B1);  entity("Poincareplane",0x210C);  entity("pointint",0x2A15);  entity("popf",0x1D561);  entity("Popf",0x2119);  entity("pound",0x00A3);  entity("pr",0x227A);  entity("Pr",0x2ABB);  entity("prap",0x2AB7);  entity("prcue",0x227C);  entity("pre",0x2AAF);  entity("prE",0x2AB3);  entity("prec",0x227A);  entity("precapprox",0x2AB7);  entity("preccurlyeq",0x227C);  entity("Precedes",0x227A);  entity("PrecedesEqual",0x2AAF);  entity("PrecedesSlantEqual",0x227C);  entity("PrecedesTilde",0x227E);  entity("preceq",0x2AAF);  entity("precnapprox",0x2AB9);  entity("precneqq",0x2AB5);  entity("precnsim",0x22E8);  entity("precsim",0x227E);  entity("prime",0x2032);  entity("Prime",0x2033);  entity("primes",0x2119);  entity("prnap",0x2AB9);  entity("prnE",0x2AB5);  entity("prnsim",0x22E8);  entity("prod",0x220F);  entity("Product",0x220F);  entity("profalar",0x232E);  entity("profline",0x2312);  entity("profsurf",0x2313);  entity("prop",0x221D);  entity("Proportion",0x2237);  entity("Proportional",0x221D);  entity("propto",0x221D);  entity("prsim",0x227E);  entity("prurel",0x22B0);  entity("pscr",0x1D4C5);  entity("Pscr",0x1D4AB);  entity("psgr",0x03C8);  entity("PSgr",0x03A8);  entity("psi",0x03C8);  entity("Psi",0x03A8);  entity("puncsp",0x2008);  entity("qfr",0x1D52E);  entity("Qfr",0x1D514);  entity("qint",0x2A0C);  entity("qopf",0x1D562);  entity("Qopf",0x211A);  entity("qprime",0x2057);  entity("qscr",0x1D4C6);  entity("Qscr",0x1D4AC);  entity("quaternions",0x210D);  entity("quatint",0x2A16);  entity("quest",0x003F);  entity("questeq",0x225F);  entity("quot",0x0022);  entity("rAarr",0x21DB);  entity("race",0x29DA);  entity("racute",0x0155);  entity("Racute",0x0154);  entity("radic",0x221A);  entity("raemptyv",0x29B3);  entity("rang",0x232A);  entity("Rang",0x27EB);  entity("rangd",0x2992);  entity("range",0x29A5);  entity("rangle",0x232A);  entity("raquo",0x00BB);  entity("rarr",0x2192);  entity("rArr",0x21D2);  entity("Rarr",0x21A0);  entity("rarrap",0x2975);  entity("rarrb",0x21E5);  entity("rarrbfs",0x2920);  entity("rarrc",0x2933);  entity("rarrfs",0x291E);  entity("rarrhk",0x21AA);  entity("rarrlp",0x21AC);  entity("rarrpl",0x2945);  entity("rarrsim",0x2974);  entity("rarrtl",0x21A3);  entity("Rarrtl",0x2916);  entity("rarrw",0x219D);  entity("ratail",0x291A);  entity("rAtail",0x291C);  entity("ratio",0x2236);  entity("rationals",0x211A);  entity("rbarr",0x290D);  entity("rBarr",0x290F);  entity("RBarr",0x2910);  entity("rbbrk",0x2998);  entity("rbrace",0x007D);  entity("rbrack",0x005D);  entity("rbrke",0x298C);  entity("rbrksld",0x298E);  entity("rbrkslu",0x2990);  entity("rcaron",0x0159);  entity("Rcaron",0x0158);  entity("rcedil",0x0157);  entity("Rcedil",0x0156);  entity("rceil",0x2309);  entity("rcub",0x007D);  entity("rcy",0x0440);  entity("Rcy",0x0420);  entity("rdca",0x2937);  entity("rdldhar",0x2969);  entity("rdquo",0x201D);  entity("rdquor",0x201D);  entity("rdsh",0x21B3);  entity("Re",0x211C);  entity("real",0x211C);  entity("realine",0x211B);  entity("realpart",0x211C);  entity("reals",0x211D);  entity("rect",0x25AD);  entity("reg",0x00AE);  entity("ReverseElement",0x220B);  entity("ReverseEquilibrium",0x21CB);  entity("ReverseUpEquilibrium",0x296F);  entity("rfisht",0x297D);  entity("rfloor",0x230B);  entity("rfr",0x1D52F);  entity("Rfr",0x211C);  entity("rgr",0x03C1);  entity("Rgr",0x03A1);  entity("rHar",0x2964);  entity("rhard",0x21C1);  entity("rharu",0x21C0);  entity("rharul",0x296C);  entity("rho",0x03C1);  entity("Rho",0x03A1);  entity("rhov",0x03F1);  entity("RightAngleBracket",0x232A);  entity("rightarrow",0x2192);  entity("Rightarrow",0x21D2);  entity("RightArrowBar",0x21E5);  entity("RightArrowLeftArrow",0x21C4);  entity("rightarrowtail",0x21A3);  entity("RightCeiling",0x2309);  entity("RightDoubleBracket",0x27E7);  entity("RightDownTeeVector",0x295D);  entity("RightDownVector",0x21C2);  entity("RightDownVectorBar",0x2955);  entity("RightFloor",0x230B);  entity("rightharpoondown",0x21C1);  entity("rightharpoonup",0x21C0);  entity("rightleftarrows",0x21C4);  entity("rightleftharpoons",0x21CC);  entity("rightrightarrows",0x21C9);  entity("rightsquigarrow",0x219D);  entity("RightTee",0x22A2);  entity("RightTeeArrow",0x21A6);  entity("RightTeeVector",0x295B);  entity("rightthreetimes",0x22CC);  entity("RightTriangle",0x22B3);  entity("RightTriangleBar",0x29D0);  entity("RightTriangleEqual",0x22B5);  entity("RightUpDownVector",0x294F);  entity("RightUpTeeVector",0x295C);  entity("RightUpVector",0x21BE);  entity("RightUpVectorBar",0x2954);  entity("RightVector",0x21C0);  entity("RightVectorBar",0x2953);  entity("ring",0x02DA);  entity("risingdotseq",0x2253);  entity("rlarr",0x21C4);  entity("rlhar",0x21CC);  entity("rlm",0x200F);  entity("rmoust",0x23B1);  entity("rmoustache",0x23B1);  entity("rnmid",0x2AEE);  entity("roang",0x27ED);  entity("roarr",0x21FE);  entity("robrk",0x27E7);  entity("ropar",0x2986);  entity("ropf",0x1D563);  entity("Ropf",0x211D);  entity("roplus",0x2A2E);  entity("rotimes",0x2A35);  entity("RoundImplies",0x2970);  entity("rpar",0x0029);  entity("rpargt",0x2994);  entity("rppolint",0x2A12);  entity("rrarr",0x21C9);  entity("Rrightarrow",0x21DB);  entity("rsaquo",0x203A);  entity("rscr",0x1D4C7);  entity("Rscr",0x211B);  entity("rsh",0x21B1);  entity("rsqb",0x005D);  entity("rsquo",0x2019);  entity("rsquor",0x2019);  entity("rthree",0x22CC);  entity("rtimes",0x22CA);  entity("rtri",0x25B9);  entity("rtrie",0x22B5);  entity("rtrif",0x25B8);  entity("rtriltri",0x29CE);  entity("RuleDelayed",0x29F4);  entity("ruluhar",0x2968);  entity("rx",0x211E);  entity("sacute",0x015B);  entity("Sacute",0x015A);  entity("sbquo",0x201A);  entity("sc",0x227B);  entity("Sc",0x2ABC);  entity("scap",0x2AB8);  entity("scaron",0x0161);  entity("Scaron",0x0160);  entity("sccue",0x227D);  entity("sce",0x2AB0);  entity("scE",0x2AB4);  entity("scedil",0x015F);  entity("Scedil",0x015E);  entity("scirc",0x015D);  entity("Scirc",0x015C);  entity("scnap",0x2ABA);  entity("scnE",0x2AB6);  entity("scnsim",0x22E9);  entity("scpolint",0x2A13);  entity("scsim",0x227F);  entity("scy",0x0441);  entity("Scy",0x0421);  entity("sdot",0x22C5);  entity("sdotb",0x22A1);  entity("sdote",0x2A66);  entity("searhk",0x2925);  entity("searr",0x2198);  entity("seArr",0x21D8);  entity("searrow",0x2198);  entity("sect",0x00A7);  entity("semi",0x003B);  entity("seswar",0x2929);  entity("setminus",0x2216);  entity("setmn",0x2216);  entity("sext",0x2736);  entity("sfgr",0x03C2);  entity("sfr",0x1D530);  entity("Sfr",0x1D516);  entity("sfrown",0x2322);  entity("sgr",0x03C3);  entity("Sgr",0x03A3);  entity("sharp",0x266F);  entity("shchcy",0x0449);  entity("SHCHcy",0x0429);  entity("shcy",0x0448);  entity("SHcy",0x0428);  entity("ShortDownArrow",0x2193);  entity("ShortLeftArrow",0x2190);  entity("shortmid",0x2223);  entity("shortparallel",0x2225);  entity("ShortRightArrow",0x2192);  entity("ShortUpArrow",0x2191);  entity("shy",0x00AD);  entity("sigma",0x03C3);  entity("Sigma",0x03A3);  entity("sigmaf",0x03C2);  entity("sigmav",0x03C2);  entity("sim",0x223C);  entity("simdot",0x2A6A);  entity("sime",0x2243);  entity("simeq",0x2243);  entity("simg",0x2A9E);  entity("simgE",0x2AA0);  entity("siml",0x2A9D);  entity("simlE",0x2A9F);  entity("simne",0x2246);  entity("simplus",0x2A24);  entity("simrarr",0x2972);  entity("slarr",0x2190);  entity("SmallCircle",0x2218);  entity("smallsetminus",0x2216);  entity("smashp",0x2A33);  entity("smeparsl",0x29E4);  entity("smid",0x2223);  entity("smile",0x2323);  entity("smt",0x2AAA);  entity("smte",0x2AAC);  entity("softcy",0x044C);  entity("SOFTcy",0x042C);  entity("sol",0x002F);  entity("solb",0x29C4);  entity("solbar",0x233F);  entity("sopf",0x1D564);  entity("Sopf",0x1D54A);  entity("spades",0x2660);  entity("spadesuit",0x2660);  entity("spar",0x2225);  entity("sqcap",0x2293);  entity("sqcup",0x2294);  entity("Sqrt",0x221A);  entity("sqsub",0x228F);  entity("sqsube",0x2291);  entity("sqsubset",0x228F);  entity("sqsubseteq",0x2291);  entity("sqsup",0x2290);  entity("sqsupe",0x2292);  entity("sqsupset",0x2290);  entity("sqsupseteq",0x2292);  entity("squ",0x25A1);  entity("square",0x25A1);  entity("SquareIntersection",0x2293);  entity("SquareSubset",0x228F);  entity("SquareSubsetEqual",0x2291);  entity("SquareSuperset",0x2290);  entity("SquareSupersetEqual",0x2292);  entity("SquareUnion",0x2294);  entity("squarf",0x25AA);  entity("squf",0x25AA);  entity("srarr",0x2192);  entity("sscr",0x1D4C8);  entity("Sscr",0x1D4AE);  entity("ssetmn",0x2216);  entity("ssmile",0x2323);  entity("sstarf",0x22C6);  entity("star",0x2606);  entity("Star",0x22C6);  entity("starf",0x2605);  entity("straightepsilon",0x03F5);  entity("straightphi",0x03D5);  entity("strns",0x00AF);  entity("sub",0x2282);  entity("Sub",0x22D0);  entity("subdot",0x2ABD);  entity("sube",0x2286);  entity("subE",0x2AC5);  entity("subedot",0x2AC3);  entity("submult",0x2AC1);  entity("subne",0x228A);  entity("subnE",0x2ACB);  entity("subplus",0x2ABF);  entity("subrarr",0x2979);  entity("subset",0x2282);  entity("Subset",0x22D0);  entity("subseteq",0x2286);  entity("subseteqq",0x2AC5);  entity("SubsetEqual",0x2286);  entity("subsetneq",0x228A);  entity("subsetneqq",0x2ACB);  entity("subsim",0x2AC7);  entity("subsub",0x2AD5);  entity("subsup",0x2AD3);  entity("succ",0x227B);  entity("succapprox",0x2AB8);  entity("succcurlyeq",0x227D);  entity("Succeeds",0x227B);  entity("SucceedsEqual",0x2AB0);  entity("SucceedsSlantEqual",0x227D);  entity("SucceedsTilde",0x227F);  entity("succeq",0x2AB0);  entity("succnapprox",0x2ABA);  entity("succneqq",0x2AB6);  entity("succnsim",0x22E9);  entity("succsim",0x227F);  entity("SuchThat",0x220B);  entity("sum",0x2211);  entity("sung",0x266A);  entity("sup",0x2283);  entity("Sup",0x22D1);  entity("sup1",0x00B9);  entity("sup2",0x00B2);  entity("sup3",0x00B3);  entity("supdot",0x2ABE);  entity("supdsub",0x2AD8);  entity("supe",0x2287);  entity("supE",0x2AC6);  entity("supedot",0x2AC4);  entity("Superset",0x2283);  entity("SupersetEqual",0x2287);  entity("suphsub",0x2AD7);  entity("suplarr",0x297B);  entity("supmult",0x2AC2);  entity("supne",0x228B);  entity("supnE",0x2ACC);  entity("supplus",0x2AC0);  entity("supset",0x2283);  entity("Supset",0x22D1);  entity("supseteq",0x2287);  entity("supseteqq",0x2AC6);  entity("supsetneq",0x228B);  entity("supsetneqq",0x2ACC);  entity("supsim",0x2AC8);  entity("supsub",0x2AD4);  entity("supsup",0x2AD6);  entity("swarhk",0x2926);  entity("swarr",0x2199);  entity("swArr",0x21D9);  entity("swarrow",0x2199);  entity("swnwar",0x292A);  entity("szlig",0x00DF);  entity("Tab",0x0009);  entity("target",0x2316);  entity("tau",0x03C4);  entity("Tau",0x03A4);  entity("tbrk",0x23B4);  entity("tcaron",0x0165);  entity("Tcaron",0x0164);  entity("tcedil",0x0163);  entity("Tcedil",0x0162);  entity("tcy",0x0442);  entity("Tcy",0x0422);  entity("telrec",0x2315);  entity("tfr",0x1D531);  entity("Tfr",0x1D517);  entity("tgr",0x03C4);  entity("Tgr",0x03A4);  entity("there4",0x2234);  entity("therefore",0x2234);  entity("theta",0x03B8);  entity("Theta",0x0398);  entity("thetasym",0x03D1);  entity("thetav",0x03D1);  entity("thgr",0x03B8);  entity("THgr",0x0398);  entity("thickapprox",0x2248);  entity("thicksim",0x223C);  entity("thinsp",0x2009);  entity("ThinSpace",0x2009);  entity("thkap",0x2248);  entity("thksim",0x223C);  entity("thorn",0x00FE);  entity("THORN",0x00DE);  entity("tilde",0x02DC);  entity("Tilde",0x223C);  entity("TildeEqual",0x2243);  entity("TildeFullEqual",0x2245);  entity("TildeTilde",0x2248);  entity("times",0x00D7);  entity("timesb",0x22A0);  entity("timesbar",0x2A31);  entity("timesd",0x2A30);  entity("tint",0x222D);  entity("toea",0x2928);  entity("top",0x22A4);  entity("topbot",0x2336);  entity("topcir",0x2AF1);  entity("topf",0x1D565);  entity("Topf",0x1D54B);  entity("topfork",0x2ADA);  entity("tosa",0x2929);  entity("tprime",0x2034);  entity("trade",0x2122);  entity("triangle",0x25B5);  entity("triangledown",0x25BF);  entity("triangleleft",0x25C3);  entity("trianglelefteq",0x22B4);  entity("triangleq",0x225C);  entity("triangleright",0x25B9);  entity("trianglerighteq",0x22B5);  entity("tridot",0x25EC);  entity("trie",0x225C);  entity("triminus",0x2A3A);  entity("triplus",0x2A39);  entity("trisb",0x29CD);  entity("tritime",0x2A3B);  entity("trpezium",0x23E2);  entity("tscr",0x1D4C9);  entity("Tscr",0x1D4AF);  entity("tscy",0x0446);  entity("TScy",0x0426);  entity("tshcy",0x045B);  entity("TSHcy",0x040B);  entity("tstrok",0x0167);  entity("Tstrok",0x0166);  entity("twixt",0x226C);  entity("twoheadleftarrow",0x219E);  entity("twoheadrightarrow",0x21A0);  entity("uacgr",0x03CD);  entity("Uacgr",0x038E);  entity("uacute",0x00FA);  entity("Uacute",0x00DA);  entity("uarr",0x2191);  entity("uArr",0x21D1);  entity("Uarr",0x219F);  entity("Uarrocir",0x2949);  entity("ubrcy",0x045E);  entity("Ubrcy",0x040E);  entity("ubreve",0x016D);  entity("Ubreve",0x016C);  entity("ucirc",0x00FB);  entity("Ucirc",0x00DB);  entity("ucy",0x0443);  entity("Ucy",0x0423);  entity("udarr",0x21C5);  entity("udblac",0x0171);  entity("Udblac",0x0170);  entity("udhar",0x296E);  entity("udiagr",0x03B0);  entity("udigr",0x03CB);  entity("Udigr",0x03AB);  entity("ufisht",0x297E);  entity("ufr",0x1D532);  entity("Ufr",0x1D518);  entity("ugr",0x03C5);  entity("Ugr",0x03A5);  entity("ugrave",0x00F9);  entity("Ugrave",0x00D9);  entity("uHar",0x2963);  entity("uharl",0x21BF);  entity("uharr",0x21BE);  entity("uhblk",0x2580);  entity("ulcorn",0x231C);  entity("ulcorner",0x231C);  entity("ulcrop",0x230F);  entity("ultri",0x25F8);  entity("umacr",0x016B);  entity("Umacr",0x016A);  entity("uml",0x00A8);  entity("UnderBrace",0xFE38);  entity("UnderBracket",0x23B5);  entity("UnderParenthesis",0xFE36);  entity("Union",0x22C3);  entity("UnionPlus",0x228E);  entity("uogon",0x0173);  entity("Uogon",0x0172);  entity("uopf",0x1D566);  entity("Uopf",0x1D54C);  entity("uparrow",0x2191);  entity("Uparrow",0x21D1);  entity("UpArrowBar",0x2912);  entity("UpArrowDownArrow",0x21C5);  entity("updownarrow",0x2195);  entity("Updownarrow",0x21D5);  entity("UpEquilibrium",0x296E);  entity("upharpoonleft",0x21BF);  entity("upharpoonright",0x21BE);  entity("uplus",0x228E);  entity("UpperLeftArrow",0x2196);  entity("UpperRightArrow",0x2197);  entity("upsi",0x03C5);  entity("Upsi",0x03D2);  entity("upsih",0x03D2);  entity("upsilon",0x03C5);  entity("Upsilon",0x03A5);  entity("UpTee",0x22A5);  entity("UpTeeArrow",0x21A5);  entity("upuparrows",0x21C8);  entity("urcorn",0x231D);  entity("urcorner",0x231D);  entity("urcrop",0x230E);  entity("uring",0x016F);  entity("Uring",0x016E);  entity("urtri",0x25F9);  entity("uscr",0x1D4CA);  entity("Uscr",0x1D4B0);  entity("utdot",0x22F0);  entity("utilde",0x0169);  entity("Utilde",0x0168);  entity("utri",0x25B5);  entity("utrif",0x25B4);  entity("uuarr",0x21C8);  entity("uuml",0x00FC);  entity("Uuml",0x00DC);  entity("uwangle",0x29A7);  entity("vangrt",0x299C);  entity("varepsilon",0x03B5);  entity("varkappa",0x03F0);  entity("varnothing",0x2205);  entity("varphi",0x03C6);  entity("varpi",0x03D6);  entity("varpropto",0x221D);  entity("varr",0x2195);  entity("vArr",0x21D5);  entity("varrho",0x03F1);  entity("varsigma",0x03C2);  entity("vartheta",0x03D1);  entity("vartriangleleft",0x22B2);  entity("vartriangleright",0x22B3);  entity("vBar",0x2AE8);  entity("Vbar",0x2AEB);  entity("vBarv",0x2AE9);  entity("vcy",0x0432);  entity("Vcy",0x0412);  entity("vdash",0x22A2);  entity("vDash",0x22A8);  entity("Vdash",0x22A9);  entity("VDash",0x22AB);  entity("Vdashl",0x2AE6);  entity("vee",0x2228);  entity("Vee",0x22C1);  entity("veebar",0x22BB);  entity("veeeq",0x225A);  entity("vellip",0x22EE);  entity("verbar",0x007C);  entity("Verbar",0x2016);  entity("vert",0x007C);  entity("Vert",0x2016);  entity("VerticalBar",0x2223);  entity("VerticalLine",0x007C);  entity("VerticalSeparator",0x2758);  entity("VerticalTilde",0x2240);  entity("VeryThinSpace",0x200A);  entity("vfr",0x1D533);  entity("Vfr",0x1D519);  entity("vltri",0x22B2);  entity("vopf",0x1D567);  entity("Vopf",0x1D54D);  entity("vprop",0x221D);  entity("vrtri",0x22B3);  entity("vscr",0x1D4CB);  entity("Vscr",0x1D4B1);  entity("Vvdash",0x22AA);  entity("vzigzag",0x299A);  entity("wcirc",0x0175);  entity("Wcirc",0x0174);  entity("wedbar",0x2A5F);  entity("wedge",0x2227);  entity("Wedge",0x22C0);  entity("wedgeq",0x2259);  entity("weierp",0x2118);  entity("wfr",0x1D534);  entity("Wfr",0x1D51A);  entity("wopf",0x1D568);  entity("Wopf",0x1D54E);  entity("wp",0x2118);  entity("wr",0x2240);  entity("wreath",0x2240);  entity("wscr",0x1D4CC);  entity("Wscr",0x1D4B2);  entity("xcap",0x22C2);  entity("xcirc",0x25EF);  entity("xcup",0x22C3);  entity("xdtri",0x25BD);  entity("xfr",0x1D535);  entity("Xfr",0x1D51B);  entity("xgr",0x03BE);  entity("Xgr",0x039E);  entity("xharr",0x27F7);  entity("xhArr",0x27FA);  entity("xi",0x03BE);  entity("Xi",0x039E);  entity("xlarr",0x27F5);  entity("xlArr",0x27F8);  entity("xmap",0x27FC);  entity("xnis",0x22FB);  entity("xodot",0x2A00);  entity("xopf",0x1D569);  entity("Xopf",0x1D54F);  entity("xoplus",0x2A01);  entity("xotime",0x2A02);  entity("xrarr",0x27F6);  entity("xrArr",0x27F9);  entity("xscr",0x1D4CD);  entity("Xscr",0x1D4B3);  entity("xsqcup",0x2A06);  entity("xuplus",0x2A04);  entity("xutri",0x25B3);  entity("xvee",0x22C1);  entity("xwedge",0x22C0);  entity("yacute",0x00FD);  entity("Yacute",0x00DD);  entity("yacy",0x044F);  entity("YAcy",0x042F);  entity("ycirc",0x0177);  entity("Ycirc",0x0176);  entity("ycy",0x044B);  entity("Ycy",0x042B);  entity("yen",0x00A5);  entity("yfr",0x1D536);  entity("Yfr",0x1D51C);  entity("yicy",0x0457);  entity("YIcy",0x0407);  entity("yopf",0x1D56A);  entity("Yopf",0x1D550);  entity("yscr",0x1D4CE);  entity("Yscr",0x1D4B4);  entity("yucy",0x044E);  entity("YUcy",0x042E);  entity("yuml",0x00FF);  entity("Yuml",0x0178);  entity("zacute",0x017A);  entity("Zacute",0x0179);  entity("zcaron",0x017E);  entity("Zcaron",0x017D);  entity("zcy",0x0437);  entity("Zcy",0x0417);  entity("zdot",0x017C);  entity("Zdot",0x017B);  entity("zeetrf",0x2128);  entity("ZeroWidthSpace",0x200B);  entity("zeta",0x03B6);  entity("Zeta",0x0396);  entity("zfr",0x1D537);  entity("Zfr",0x2128);  entity("zgr",0x03B6);  entity("Zgr",0x0396);  entity("zhcy",0x0436);  entity("ZHcy",0x0416);  entity("zigrarr",0x21DD);  entity("zopf",0x1D56B);  entity("Zopf",0x2124);  entity("zscr",0x1D4CF);  entity("Zscr",0x1D4B5);  entity("zwj",0x200D);  entity("zwnj",0x200C);}  }
class C{  @ExceptionHandler(HttpMessageNotReadableException.class) public ResponseEntity<ExceptionInfo> handleHttpMessageNotReadableException(final HttpServletRequest request,final Exception ex){  logRequest(request,ex);  final ExceptionInfo response=createExceptionInfo(new MessageNotReadableException());  return new ResponseEntity<>(response,HttpStatus.BAD_REQUEST);}  }
class C{  public void decode_mb_skip(){  int mb_xy=this.mb_xy;  int mb_type=0;  Arrays.fill(non_zero_count[mb_xy],0);  Arrays.fill(non_zero_count_cache,8,non_zero_count_cache.length,0);  if (mb_field_decoding_flag > 0)   mb_type|=MB_TYPE_INTERLACED;  if (slice_type_nos == FF_B_TYPE) {    mb_type|=MB_TYPE_L0L1 | MB_TYPE_DIRECT2 | MB_TYPE_SKIP;    if (direct_spatial_mv_pred != 0) {      fill_decode_neighbors(mb_type);      fill_decode_caches(mb_type);    }    mb_type=ff_h264_pred_direct_motion(mb_type);    mb_type|=MB_TYPE_SKIP;  } else {    int mx=0, my=0;    mb_type|=MB_TYPE_16x16 | MB_TYPE_P0L0 | MB_TYPE_P1L0| MB_TYPE_SKIP;    fill_decode_neighbors(mb_type);    fill_decode_caches(mb_type);    int[] mxmy=new int[]{mx,my};    pred_pskip_motion(mxmy);    mx=mxmy[0];    my=mxmy[1];    Rectangle.fill_rectangle_sign(ref_cache[0],scan8[0],4,4,8,0,1);    Rectangle.fill_rectangle_mv_cache(mv_cache[0],scan8[0],4,4,8,pack16to32(mx,my),4);  }  write_back_motion(mb_type);  s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_xy]=mb_type;  s.current_picture.qscale_table[mb_xy]=s.qscale;  slice_table_base[this.slice_table_offset + mb_xy]=slice_num;  prev_mb_skipped=1;}  }
class C{  private String computeCnonce(){  Random rand=new Random();  int nextInt=rand.nextInt();  nextInt=(nextInt == Integer.MIN_VALUE) ? Integer.MAX_VALUE : Math.abs(nextInt);  return Integer.toString(nextInt,16);}  }
class C{  public static void closeOutputStream(OutputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);    }  }}  }
class C{  public DocumentEntry(){  super();  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  public void parseNumbers(){  for (int i='0'; i <= '9'; i++) {    tokenTypes[i]|=TOKEN_DIGIT;  }  tokenTypes['.']|=TOKEN_DIGIT;  tokenTypes['-']|=TOKEN_DIGIT;}  }
class C{  private void midPoint(PointF point,WrapMotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2,y / 2);}  }
class C{  public static IPackageFragmentRoot addSourceContainer(IJavaProject jproject,String containerName) throws CoreException {  return addSourceContainer(jproject,containerName,new Path[0]);}  }
class C{  public EdgeEffect(Context context){  mPaint.setAntiAlias(true);  final int themeColor=Color.RED;  mPaint.setColor((themeColor & 0xffffff) | 0x33000000);  mPaint.setStyle(Paint.Style.FILL);  mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_ATOP));  mInterpolator=new DecelerateInterpolator();}  }
class C{  public static void main(String[] args){  try {    httpTransport=GoogleNetHttpTransport.newTrustedTransport();    dataStoreFactory=new FileDataStoreFactory(DATA_STORE_DIR);    AdExchangeSeller adExchangeSeller=initializeAdExchangeSeller();    AdClients adClients=GetAllAdClients.run(adExchangeSeller,MAX_LIST_PAGE_SIZE);    if ((adClients.getItems() != null) && !adClients.getItems().isEmpty()) {      String exampleAdClientId=adClients.getItems().get(0).getId();      AdUnits units=GetAllAdUnits.run(adExchangeSeller,exampleAdClientId,MAX_LIST_PAGE_SIZE);      if ((units.getItems() != null) && !units.getItems().isEmpty()) {        String exampleAdUnitId=units.getItems().get(0).getId();        GetAllCustomChannelsForAdUnit.run(adExchangeSeller,exampleAdClientId,exampleAdUnitId,MAX_LIST_PAGE_SIZE);      }      CustomChannels channels=GetAllCustomChannels.run(adExchangeSeller,exampleAdClientId,MAX_LIST_PAGE_SIZE);      if ((channels.getItems() != null) && !channels.getItems().isEmpty()) {        String exampleCustomChannelId=channels.getItems().get(0).getId();        GetAllAdUnitsForCustomChannel.run(adExchangeSeller,exampleAdClientId,exampleCustomChannelId,MAX_LIST_PAGE_SIZE);      }      GetAllUrlChannels.run(adExchangeSeller,exampleAdClientId,MAX_LIST_PAGE_SIZE);      GenerateReport.run(adExchangeSeller,exampleAdClientId);      GenerateReportWithPaging.run(adExchangeSeller,exampleAdClientId,MAX_REPORT_PAGE_SIZE);    } else {      System.out.println("No ad clients found, unable to run remaining methods.");    }    SavedReports savedReports=GetAllSavedReports.run(adExchangeSeller,MAX_REPORT_PAGE_SIZE);    if ((savedReports.getItems() != null) && !savedReports.getItems().isEmpty()) {      String exampleSavedReportId=savedReports.getItems().get(0).getId();      GenerateSavedReport.run(adExchangeSeller,exampleSavedReportId);    } else {      System.out.println("No saved report found.");    }    GetAllDimensions.run(adExchangeSeller);    GetAllMetrics.run(adExchangeSeller);    GetAllAlerts.run(adExchangeSeller);    GetAllPreferredDeals.run(adExchangeSeller);  } catch (  IOException e) {    System.err.println(e.getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  private void closeStreams(final Process process) throws IOException {  IOException caught=null;  try {    process.getInputStream().close();  } catch (  IOException e) {    caught=e;  }  try {    process.getOutputStream().close();  } catch (  IOException e) {    caught=e;  }  try {    process.getErrorStream().close();  } catch (  IOException e) {    caught=e;  }  if (caught != null) {    throw caught;  }}  }
class C{  public String NGramMaxSizeTipText(){  return "The max N of the NGram.";}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void replaceTopOfStack(int topOfStack){  stack[stackSize - 1]=topOfStack;}  }
class C{  @Override public TimeValue masterNodeTimeout(){  return masterNodeTimeout;}  }
class C{  public void send(Message message,int prevLogIndex){  assert message.getType() == Message.TYPE_APPEND_ENTRY_REQ;  lock.lock();  try {    if (backfilling) {      backfillToIndex=prevLogIndex + 2;    } else     if (channel.isOperational() && (message.isHeartbeat() || nextIndex == prevLogIndex + 1)) {      latency.head(prevLogIndex + 1);      addOutQueue(message);      nextIndex+=message.numCommands();    }  }  finally {    lock.unlock();  }}  }
class C{  public ComponentBuilder event(HoverEvent hoverEvent){  this.current.setHoverEvent(hoverEvent);  return this;}  }
class C{  public void removePrimaryKeyField(DatabaseField field){  m_descriptor.getPrimaryKeyFields().remove(field);  m_primaryKeyAccessors.remove(field);}  }
class C{  public boolean isNegated(){  return negated;}  }
class C{  public CTrackingResultsPanel(final IGraphPanelExtender extender,final CTrackingResultContainer container){  super(new BorderLayout());  Preconditions.checkNotNull(container,"IE01690: Container argument can not be null");  Preconditions.checkNotNull(extender,"IE02304: extender argument can not be null");  add(new CTrackingResultsToolbar(extender,container),BorderLayout.NORTH);  add(new JScrollPane(m_table=new CTrackingResultsTable(container)),BorderLayout.CENTER);}  }
class C{  public Vertex applyGREATER(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex left=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex right=arguments.get(1).getTarget().applyQuotient(variables,network);  if (!(left.getData() instanceof Number) || !(right.getData() instanceof Number)) {    return network.createVertex(Primitive.FALSE);  }  if (((Number)left.getData()).doubleValue() > ((Number)right.getData()).doubleValue()) {    return network.createVertex(Primitive.TRUE);  } else {    return network.createVertex(Primitive.FALSE);  }}  }
class C{  public static String abs(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function abs : " + params.length);  return "abs(" + params[0] + ")";}  }
class C{  public ExtensionInfo findExtensionByNumber(final Descriptor containingType,final int fieldNumber){  return extensionsByNumber.get(new DescriptorIntPair(containingType,fieldNumber));}  }
class C{  public Builder facingExactMatch(boolean match){  criteria.facingExactMatch=match;  return (this);}  }
class C{  private void storeRequestTokenUrl(){  if (requestTokenUrl != null && scope != null) {    requestTokenUrl+=requestTokenUrl.indexOf('?') == -1 ? "?" : "&";    try {      requestTokenUrl+="scope=" + URLEncoder.encode(scope,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new IllegalArgumentException(e);    }  }  put(OAuthProxyProtocol.Header.X_OAUTH_REQUEST_TOKEN_URL,requestTokenUrl);}  }
class C{  public PaletteMenuItemUI(){}  }
class C{  public void validate(Region region){  Collection<Index> indexes=((LocalRegion)region).getIndexManager().getIndexes();  for (  Index index : indexes) {    if (region instanceof PartitionedRegion) {      validateOnPR((PartitionedRegion)region,(PartitionedIndex)index);    } else {      validate(region,index);    }  }}  }
class C{  private static String contentLengthHeader(final long length){  return String.format("Content-Length: %d",length);}  }
class C{  public boolean isInProgress(){  return notification != null && notification.getStatus() == PROGRESS;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  HideAudioDao.createTable(db,ifNotExists);}  }
class C{  public Class<?> loadClass(String name) throws ClassNotFoundException {synchronized (getClassLoadingLock(name)) {    String packageName=name.replaceAll(".[^.]*$","");    if (super.getPackage(packageName) == null) {      super.definePackage(packageName,null,null,null,null,null,null,null);    }    Class<?> clazz=findLoadedClass(name);    if (clazz != null)     return clazz;    clazz=cachedClasses.get(name);    if (clazz != null) {      return clazz;    }    if (byteCode.containsKey(name))     clazz=findClass(name);    if (clazz != null) {      return clazz;    }    clazz=super.loadClass(name);    if (clazz == null)     throw new ClassNotFoundException("Class '" + name + "' not found");    return clazz;  }}  }
class C{  public void addData(double[] histData,Integer index){  data.remove(index.intValue());  data.add(index.intValue(),histData);  redraw();}  }
class C{  public void registerAll(final SemanticMetricSet metrics) throws IllegalArgumentException {  registerAll(MetricId.EMPTY,metrics);}  }
class C{  public void show(){  resetState();  wizardMode=CREATE;  showDialog(null);}  }
class C{  @SuppressFBWarnings(value="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE",justification="listFiles() is only null if path is not a directory") public static boolean containsProfile(File path){  if (path.isDirectory()) {    if (Profile.isProfile(path)) {      return true;    } else {      for (      File file : path.listFiles()) {        if (Profile.containsProfile(file)) {          return true;        }      }    }  }  return false;}  }
class C{  public Mill(){  super();}  }
class C{  @Override public String toString(){  String str=distrib.toString();  return str;}  }
class C{  public void tokenAuthentication(String username){  UserDetails details=userDetailsService.loadUserByUsername(username);  UsernamePasswordAuthenticationToken authToken=new UsernamePasswordAuthenticationToken(details,details.getPassword(),details.getAuthorities());  SecurityContextHolder.getContext().setAuthentication(authToken);}  }
class C{  @Override void resetList(){  clearRecycledState(mHeaderViewInfos);  clearRecycledState(mFooterViewInfos);  super.resetList();  mLayoutMode=LAYOUT_NORMAL;}  }
class C{  public boolean isStableNumber(){  return true;}  }
class C{  public void apply(Message m,int error,TSIGRecord old){  Record r=generate(m,m.toWire(),error,old);  m.addRecord(r,Section.ADDITIONAL);  m.tsigState=Message.TSIG_SIGNED;}  }
class C{  public void recordFontUsage(String string,Font font){  Font commonSizeFont=createCommonSizeFont(font);  String fontKey=(commonSizeFont.getFamily() + commonSizeFont.getStyle());  CharListHelper chl=(CharListHelper)fontStringMap.get(fontKey);  if (chl == null) {    chl=new CharListHelper();  }  for (int i=0; i < string.length(); i++) {    char ch=string.charAt(i);    chl.add(ch);  }  fontStringMap.put(fontKey,chl);}  }
class C{  private synchronized void sendClientBroadcastNotifications(IBroadcastStream stream,String clientFunction,RoomClient rc){  try {    IConnection current=Red5.getConnectionLocal();    String streamid=current.getClient().getId();    RoomClient currentClient=this.clientListManager.getClientByStreamId(streamid);    if (currentClient == null) {      return;    }    log.debug("sendClientBroadcastNotifications: " + stream.getPublishedName());    log.debug("sendClientBroadcastNotifications : " + currentClient + " "+ currentClient.getStreamid());    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          if (conn instanceof IServiceCapableConnection) {            if (conn.equals(current)) {              if (clientFunction.equals("closeStream")) {                RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());                if (clientFunction.equals("closeStream") && rcl.getIsRecording()) {                  log.debug("*** stopRecordingShowForClient Any Client is Recording - stop that");                  this.flvRecorderService.stopRecordingShowForClient(conn,currentClient);                }                current.ping();              }              continue;            } else {              RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());              if (rcl != null) {                if (rcl.getIsScreenClient() != null && rcl.getIsScreenClient()) {                } else {                  log.debug("is this users still alive? :" + rcl);                  IServiceCapableConnection iStream=(IServiceCapableConnection)conn;                  iStream.invoke(clientFunction,new Object[]{rc},this);                }                log.debug("sending notification to " + conn + " ID: ");                if (clientFunction.equals("closeStream") && rcl.getIsRecording()) {                  log.debug("***  +++++++ ######## sendClientBroadcastNotifications Any Client is Recording - stop that");                  this.flvRecorderService.stopRecordingShowForClient(conn,currentClient);                }              }            }          }        }      }    }  } catch (  Exception err) {    log.error("[sendClientBroadcastNotifications]",err);  }}  }
class C{  public StateMachineState(S id,StateMachine<S,E> submachine,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState){  super(id,deferred,entryActions,exitActions,pseudoState,submachine);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  public static int indexOfParenthesisMatch(String str,int first) throws URISyntaxException {  int index=-1;  if (first < 0 || first > str.length()) {    throw new IllegalArgumentException("Invalid position for first parenthesis: " + first);  }  if (str.charAt(first) != '(') {    throw new IllegalArgumentException("character at indicated position is not a parenthesis");  }  int depth=1;  char[] array=str.toCharArray();  for (index=first + 1; index < array.length; ++index) {    char current=array[index];    if (current == '(') {      depth++;    } else     if (current == ')') {      if (--depth == 0) {        break;      }    }  }  if (depth != 0) {    throw new URISyntaxException(str,"URI did not contain a matching parenthesis.");  }  return index;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  public void addArrowHead(boolean value){  if (value) {    setArrowHead(new OMArrowHead(OMArrowHead.ARROWHEAD_DIRECTION_FORWARD,100));  } else {    arrowhead=null;  }}  }
class C{  @Override public Location convertTo(String source,Location destination){  return locationRepository.findByLocationId(LocationPK.fromString(source)).orElseThrow(null);}  }
class C{  protected void sendFunctionGroup2(){  commandStation.function5Through8Packet(address,getF5(),getF5Momentary(),getF6(),getF6Momentary(),getF7(),getF7Momentary(),getF8(),getF8Momentary());}  }
class C{  @Override public Enumeration<Permission> elements(){  return perms.elements();}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  @RequestMapping(method=RequestMethod.POST) public Callable<Ingredients> distributeIngredients(@RequestBody Order order,@RequestHeader("PROCESS-ID") String processId,@RequestHeader(value=TestConfigurationHolder.TEST_COMMUNICATION_TYPE_HEADER_NAME,defaultValue="REST_TEMPLATE",required=false) TestConfigurationHolder.TestCommunicationType testCommunicationType){  log.info("Setting tags and events on an already existing span");  tracer.addTag("beer","stout");  tracer.getCurrentSpan().logEvent("ingredientsAggregationStarted");  log.info("Starting beer brewing process for process id [{}]",processId);  Span span=tracer.createSpan("inside_aggregating");  try {    TestConfigurationHolder testConfigurationHolder=TestConfigurationHolder.TEST_CONFIG.get();    return null;  }  finally {    tracer.close(span);  }}  }
class C{  public static short[] subarray(final short[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_SHORT_ARRAY;  }  short[] subarray=new short[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public CSVFormat withRecordSeparator(final char recordSeparator){  return withRecordSeparator(String.valueOf(recordSeparator));}  }
class C{  protected CacheConfiguration dataConfiguration(){  CacheConfiguration cfg=defaultCacheConfiguration();  cfg.setName(DATA_CACHE_NAME);  cfg.setCacheMode(PARTITIONED);  cfg.setBackups(0);  cfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(IGFS_GROUP_SIZE));  cfg.setNearConfiguration(null);  cfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cfg.setAtomicityMode(TRANSACTIONAL);  return cfg;}  }
class C{  @Override public StreamImpl openAppendImpl() throws IOException {  StreamImpl stream=getWritePath().openAppendImpl();  return stream;}  }
class C{  public Blade interceptor(String packageName){  applicationConfig.setInterceptorPackage(packageName);  return this;}  }
class C{  protected void pretendCommit(){  if (fStart > -1) {    fText=fDocumentUndoManager.fTextBuffer.toString();    fPreservedText=fDocumentUndoManager.fPreservedTextBuffer.toString();  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public static SipRequest createSubscribe(SipDialogPath dialog,long expirePeriod) throws PayloadException {  try {    URI requestURI=SipUtils.ADDR_FACTORY.createURI(dialog.getTarget());    CallIdHeader callIdHeader=SipUtils.HEADER_FACTORY.createCallIdHeader(dialog.getCallId());    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.SUBSCRIBE);    Address fromAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getLocalParty());    FromHeader fromHeader=SipUtils.HEADER_FACTORY.createFromHeader(fromAddress,dialog.getLocalTag());    Address toAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getRemoteParty());    ToHeader toHeader=SipUtils.HEADER_FACTORY.createToHeader(toAddress,dialog.getRemoteTag());    Request subscribe=SipUtils.MSG_FACTORY.createRequest(requestURI,Request.SUBSCRIBE,callIdHeader,cseqHeader,fromHeader,toHeader,dialog.getSipStack().getViaHeaders(),SipUtils.buildMaxForwardsHeader());    Vector<String> route=dialog.getRoute();    for (int i=0; i < route.size(); i++) {      Header routeHeader=SipUtils.HEADER_FACTORY.createHeader(RouteHeader.NAME,route.elementAt(i));      subscribe.addHeader(routeHeader);    }    ExpiresHeader expHeader=SipUtils.HEADER_FACTORY.createExpiresHeader((int)(expirePeriod / SECONDS_TO_MILLISECONDS_CONVERSION_RATE));    subscribe.addHeader(expHeader);    subscribe.addHeader(SipUtils.buildUserAgentHeader());    subscribe.addHeader(dialog.getSipStack().getContact());    SipUtils.buildAllowHeader(subscribe);    ViaHeader viaHeader=(ViaHeader)subscribe.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(subscribe);  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  public static StringBuilder describeParameterizable(StringBuilder buf,Class<?> pcls,int width,String indent){  try {    println(buf,width,"Description for class " + pcls.getName(),"");    String title=DocumentationUtil.getTitle(pcls);    if (title != null && title.length() > 0) {      println(buf,width,title,"");    }    String desc=DocumentationUtil.getDescription(pcls);    if (desc != null && desc.length() > 0) {      println(buf,width,desc,"  ");    }    Reference ref=DocumentationUtil.getReference(pcls);    if (ref != null) {      if (ref.prefix().length() > 0) {        println(buf,width,ref.prefix(),"");      }      println(buf,width,ref.authors() + ":","");      println(buf,width,ref.title(),"  ");      println(buf,width,"in: " + ref.booktitle(),"");      if (ref.url().length() > 0) {        println(buf,width,"see also: " + ref.url(),"");      }    }    SerializedParameterization config=new SerializedParameterization();    TrackParameters track=new TrackParameters(config);    @SuppressWarnings("unused") Object p=ClassGenericsUtil.tryInstantiate(Object.class,pcls,track);    Collection<TrackedParameter> options=track.getAllParameters();    if (!options.isEmpty()) {      OptionUtil.formatForConsole(buf,width,indent,options);    }    return buf;  } catch (  Exception e) {    LoggingUtil.exception("Error instantiating class to describe.",e.getCause());    buf.append("No description available: ").append(e);    return buf;  }}  }
class C{  public boolean matches(Entry other){  return matches(other.spec);}  }
class C{  private static ProcessingResult tryToIndentToRight(@NotNull ChangeIndentContext context){  int targetLineIndent=getLineIndent(context,context.targetLine);  List<LineInfo> lineInfos=collectIndentsGreaterOrEqualToCurrent(context,context.targetLine);  int newIndent=-1;  for (int i=lineInfos.size() - 1; i >= 0; i--) {    LineInfo lineInfo=lineInfos.get(i);    if (lineInfo.indent == targetLineIndent) {      continue;    }    newIndent=lineInfo.indent;    break;  }  if (newIndent == targetLineIndent || newIndent < 0) {    return ProcessingResult.CONTINUE;  }  changeIndent(context,newIndent);  return ProcessingResult.STOP_SUCCESSFUL;}  }
class C{  public MultiClassificationPerformance(int type){  this.type=type;}  }
class C{  protected void restoreState() throws MqttException {  final String methodName="restoreState";  Enumeration messageKeys=persistence.keys();  MqttPersistable persistable;  String key;  int highestMsgId=nextMsgId;  Vector orphanedPubRels=new Vector();  log.fine(CLASS_NAME,methodName,"600");  while (messageKeys.hasMoreElements()) {    key=(String)messageKeys.nextElement();    persistable=persistence.get(key);    MqttWireMessage message=restoreMessage(key,persistable);    if (message != null) {      if (key.startsWith(PERSISTENCE_RECEIVED_PREFIX)) {        log.fine(CLASS_NAME,methodName,"604",new Object[]{key,message});        inboundQoS2.put(new Integer(message.getMessageId()),message);      } else       if (key.startsWith(PERSISTENCE_SENT_PREFIX)) {        MqttPublish sendMessage=(MqttPublish)message;        highestMsgId=Math.max(sendMessage.getMessageId(),highestMsgId);        if (persistence.containsKey(getSendConfirmPersistenceKey(sendMessage))) {          MqttPersistable persistedConfirm=persistence.get(getSendConfirmPersistenceKey(sendMessage));          MqttPubRel confirmMessage=(MqttPubRel)restoreMessage(key,persistedConfirm);          if (confirmMessage != null) {            log.fine(CLASS_NAME,methodName,"605",new Object[]{key,message});            outboundQoS2.put(new Integer(confirmMessage.getMessageId()),confirmMessage);          } else {            log.fine(CLASS_NAME,methodName,"606",new Object[]{key,message});          }        } else {          sendMessage.setDuplicate(true);          if (sendMessage.getMessage().getQos() == 2) {            log.fine(CLASS_NAME,methodName,"607",new Object[]{key,message});            outboundQoS2.put(new Integer(sendMessage.getMessageId()),sendMessage);          } else {            log.fine(CLASS_NAME,methodName,"608",new Object[]{key,message});            outboundQoS1.put(new Integer(sendMessage.getMessageId()),sendMessage);          }        }        MqttDeliveryToken tok=tokenStore.restoreToken(sendMessage);        tok.internalTok.setClient(clientComms.getClient());        inUseMsgIds.put(new Integer(sendMessage.getMessageId()),new Integer(sendMessage.getMessageId()));      } else       if (key.startsWith(PERSISTENCE_SENT_BUFFERED_PREFIX)) {        MqttPublish sendMessage=(MqttPublish)message;        highestMsgId=Math.max(sendMessage.getMessageId(),highestMsgId);        if (sendMessage.getMessage().getQos() == 2) {          log.fine(CLASS_NAME,methodName,"607",new Object[]{key,message});          outboundQoS2.put(new Integer(sendMessage.getMessageId()),sendMessage);        } else         if (sendMessage.getMessage().getQos() == 1) {          log.fine(CLASS_NAME,methodName,"608",new Object[]{key,message});          outboundQoS1.put(new Integer(sendMessage.getMessageId()),sendMessage);        } else {          log.fine(CLASS_NAME,methodName,"511",new Object[]{key,message});          outboundQoS0.put(new Integer(sendMessage.getMessageId()),sendMessage);          persistence.remove(key);        }        MqttDeliveryToken tok=tokenStore.restoreToken(sendMessage);        tok.internalTok.setClient(clientComms.getClient());        inUseMsgIds.put(new Integer(sendMessage.getMessageId()),new Integer(sendMessage.getMessageId()));      } else       if (key.startsWith(PERSISTENCE_CONFIRMED_PREFIX)) {        MqttPubRel pubRelMessage=(MqttPubRel)message;        if (!persistence.containsKey(getSendPersistenceKey(pubRelMessage))) {          orphanedPubRels.addElement(key);        }      }    }  }  messageKeys=orphanedPubRels.elements();  while (messageKeys.hasMoreElements()) {    key=(String)messageKeys.nextElement();    log.fine(CLASS_NAME,methodName,"609",new Object[]{key});    persistence.remove(key);  }  nextMsgId=highestMsgId;}  }
class C{  public List registerInterestList(List keys,InterestResultPolicy policy,boolean isDurable,boolean receiveUpdatesAsInvalidates,final byte regionDataPolicy){  final RegisterInterestTracker rit=this.pool.getRITracker();  List result=null;  boolean finished=false;  try {    rit.addInterestList(this.region,keys,policy,isDurable,receiveUpdatesAsInvalidates);    result=RegisterInterestListOp.execute(this.pool,this.regionName,keys,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);    finished=true;    if (PoolImpl.AFTER_REGISTER_CALLBACK_FLAG) {      ClientServerObserver bo=ClientServerObserverHolder.getInstance();      bo.afterInterestRegistration();    }    return result;  }  finally {    if (!finished) {      rit.removeInterestList(this.region,keys,isDurable,receiveUpdatesAsInvalidates);    }  }}  }
class C{  public static String toString(boolean value){  return String.valueOf(value);}  }
class C{  public RasterPlotComponent(final String name){  super(name);  model=new RasterModel();  initializeAttributes();  addListener();  model.defaultInit();}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(CodeSearchEntry.class,File.getDefaultDescription());  extProfile.declare(CodeSearchEntry.class,Package.getDefaultDescription());  extProfile.declare(CodeSearchEntry.class,Match.getDefaultDescription());}  }
class C{  public static int calcTextWidth(Paint paint,String demoText){  return (int)paint.measureText(demoText);}  }
class C{  public SecretKey engineLookupAndResolveSecretKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  KeyResolverSpi tmp=cloneIfNeeded();  if (!tmp.engineCanResolve(element,baseURI,storage)) {    return null;  }  return tmp.engineResolveSecretKey(element,baseURI,storage);}  }
class C{  private Organization createOrganization(String organizationId) throws NonUniqueBusinessKeyException {  Organization org=new Organization();  org.setOrganizationId(organizationId);  org.setName("The supplier organization");  org.setAddress("my address is a very long string, which is stored in the database \n with line delimiters\n.");  org.setEmail("organization@organization.com");  org.setPhone("012345/678");  org.setLocale(Locale.ENGLISH.toString());  org.setCutOffDay(1);  mgr.persist(org);  return org;}  }
class C{  public static ConfigurationJMX newInstance(){  return new ConfigurationJMX();}  }
class C{  public float dot(float x,float y,float z){  return this.x * x + this.y * y + this.z * z;}  }
class C{  public void mark(){  mark(1);}  }
class C{  public TFloatDoubleHashMapDecorator(TFloatDoubleHashMap map){  super();  this._map=map;}  }
class C{  public TermsBuilder valueType(Terms.ValueType valueType){  this.valueType=valueType;  return this;}  }
class C{  public boolean isDirty(){  return this.dirty;}  }
class C{  public static Object[] polar2CartesianArray(Double r,Double alpha){  double x=r.doubleValue() * Math.cos(alpha.doubleValue());  double y=r.doubleValue() * Math.sin(alpha.doubleValue());  return new Object[]{new Double(x),new Double(y)};}  }
class C{  public IndentingWriter(Writer out,int indentStep){  this(out,indentStep,8);}  }
class C{  public void addDataSource(){  Integer currentSize=dataset.getSeriesCount();  dataset.addSeries(new XYSeries(currentSize + 1));  this.fireDataSourceAdded(currentSize);}  }
class C{  public static XMLTreeLocation afterAnyOf(String... names){  if (names.length == 0) {    throw new IllegalArgumentException("Required not empty elements names");  }  return disjunctionChain(LocationType.AFTER,names);}  }
class C{  public KernelGaussian(double sigma){  if (sigma <= 0)   throw new IllegalArgumentException("Sigma must be > 0");  this.sigma=sigma;}  }
class C{  public int mergeTable(String TableName,String ColumnName,int from_ID,int to_ID){  log.fine(TableName + "." + ColumnName+ " - From="+ from_ID+ ",To="+ to_ID);  String sql="UPDATE " + TableName + " SET "+ ColumnName+ "="+ to_ID+ " WHERE "+ ColumnName+ "="+ from_ID;  boolean delete=false;  for (int i=0; i < m_deleteTables.length; i++) {    if (m_deleteTables[i].equals(TableName)) {      delete=true;      sql="DELETE " + TableName + " WHERE "+ ColumnName+ "="+ from_ID;    }  }  if (delete && X_M_Cost.Table_Name.equals(TableName) && M_PRODUCT_ID.equals(ColumnName)) {    sql+=" AND " + X_M_Cost.COLUMNNAME_CurrentCostPrice + "=0"+ " AND "+ X_M_Cost.COLUMNNAME_CurrentQty+ "=0"+ " AND "+ X_M_Cost.COLUMNNAME_CumulatedAmt+ "=0"+ " AND "+ X_M_Cost.COLUMNNAME_CumulatedQty+ "=0";  }  int count=DB.executeUpdate(sql,m_trx.getTrxName());  if (count < 0) {    count=-1;    m_errorLog.append(Env.NL).append(delete ? "DELETE " : "UPDATE ").append(TableName).append(" - ").append(" - ").append(sql);    log.config(m_errorLog.toString());    m_trx.rollback();  }  log.fine(count + (delete ? " -Delete- " : " -Update- ") + TableName);  return count;}  }
class C{  private CodeSwitchLanguageModel reestimateLM(int[] languageCounts,CodeSwitchLanguageModel lm){  long nanoTime=System.nanoTime();  List<Tuple2<SingleLanguageModel,Double>> newSubModelsAndPriors=new ArrayList<Tuple2<SingleLanguageModel,Double>>();  double languageCountSum=0;  for (int language=0; language < languageCounts.length; ++language) {    double newPrior=languageCounts[language];    newSubModelsAndPriors.add(Tuple2(lm.get(language),newPrior));    languageCountSum+=newPrior;  }  CodeSwitchLanguageModel newLM=new BasicCodeSwitchLanguageModel(newSubModelsAndPriors,lm.getCharacterIndexer(),lm.getLanguageIndexer(),lm.getProbKeepSameLanguage(),lm.getMaxOrder());  StringBuilder sb=new StringBuilder("Updating language probabilities: ");  for (int language=0; language < languageCounts.length; ++language)   sb.append(lm.getLanguageIndexer().getObject(language)).append("->").append(languageCounts[language] / languageCountSum).append("  ");  System.out.println(sb);  System.out.println("New LM: " + (System.nanoTime() - nanoTime) / 1000000 + "ms");  return newLM;}  }
class C{  public boolean removeThirdPartyIDPUser(String tenantName,PrincipalId userId) throws Exception {  return getService().removeThirdPartyIDPUser(tenantName,userId,this.getServiceContext());}  }
class C{  private ITuple processOneInputTuple(ITuple inputTuple) throws DataFlowException {  if (inputTuple == null) {    return null;  }  List<Span> matchingResults=new ArrayList<>();  for (  Attribute attribute : attributeList) {    String fieldName=attribute.getFieldName();    FieldType fieldType=attribute.getFieldType();    String fieldValue=inputTuple.getField(fieldName).getValue().toString();    if (fieldType != FieldType.STRING && fieldType != FieldType.TEXT) {      throw new DataFlowException("KeywordMatcher: Fields other than STRING and TEXT are not supported yet");    }switch (regexEngine) {case JavaRegex:      matchingResults.addAll(javaRegexMatch(fieldValue,fieldName));    break;case RE2J:  matchingResults.addAll(re2jRegexMatch(fieldValue,fieldName));break;}}if (matchingResults.isEmpty()) {return null;}List<Span> spanList=(List<Span>)inputTuple.getField(SchemaConstants.SPAN_LIST).getValue();spanList.addAll(matchingResults);return inputTuple;}  }
class C{  public ReasonFlags(DerValue derVal) throws IOException {  this.bitString=derVal.getUnalignedBitString(true).toBooleanArray();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void removeAll(Collection<? extends Figure> figures){  willChange();  for (  Figure f : new LinkedList<Figure>(figures)) {    remove(f);  }  changed();}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){  Log.w(LOG_TAG,"onFailure(int, Header[], Throwable, JSONObject) was not overriden, but callback was received",throwable);}  }
class C{  public byte loadByte(Offset offset){  return (byte)0;}  }
class C{  public SQLiteCustomFunction(String name,int numArgs,SQLiteDatabase.CustomFunction callback){  if (name == null) {    throw new IllegalArgumentException("name must not be null.");  }  this.name=name;  this.numArgs=numArgs;  this.callback=callback;}  }
class C{  private void generateBlackPixels(){  log.info("Converting image to monochrome");  BufferedImage bi=bufferedImage;  int h=bi.getHeight();  int w=bi.getWidth();  int[] rgbPixels=bi.getRGB(0,0,w,h,null,0,w);  int i=0;  boolean[] pixels=new boolean[rgbPixels.length];  for (  int rgbpixel : rgbPixels) {    pixels[i++]=languageType.requiresImageOutputInverted() ? !isBlack(rgbpixel) : isBlack(rgbpixel);  }  setImageAsBooleanArray(pixels);}  }
class C{  @Override public String toString(){  return String.format(FMT_TO_STRING,Integer.valueOf(System.identityHashCode(this)),String.valueOf(getObject()));}  }
class C{  public static ConfigUtils instance(){  if (!instance.isInitialized) {synchronized (ConfigUtils.class) {      if (!instance.isInitialized) {        throw new IllegalStateException("ConfigUtils is not initialized.");      }    }  }  return instance;}  }
class C{  public void addSharedContextUser(Context sharedContext,User user){  this.getContextPanel(sharedContext.getIndex()).getUsersTableModel().addUser(user);}  }
class C{  public Configuration loadConfiguration(String configPath){  Configuration config=null;  try {    int p=configPath.lastIndexOf("/dert/");    String landPath=configPath.substring(0,p);    File file=new File(configPath).getCanonicalFile();    if (file.exists()) {      Console.getInstance().println("Loading configuration from " + file.getAbsolutePath());      ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file));      Object obj=ois.readObject();      ois.close();      if (obj instanceof HashMap<?,?>) {        config=new Configuration((HashMap<String,Object>)obj);        config.setLandscapePath(landPath);        addRecent(configPath);      } else {        JOptionPane.showMessageDialog(null,"Configuration for " + landPath + " is invalid.");      }    } else {      JOptionPane.showMessageDialog(null,"Configuration for " + landPath + " does not exist.");    }  } catch (  Exception e) {    Console.getInstance().println("Unable to load configuration " + configPath + ", see log.");    e.printStackTrace();  }  return (config);}  }
class C{  private static void skipMemoryAccess(final OperandOrderIterator iter){  do {    if (iter.current().getType() == ExpressionType.MEMDEREF) {      iter.next();      while (iter.current().getType() != ExpressionType.IMMEDIATE_INTEGER) {        iter.next();      }      return;    }  } while (iter.next());}  }
class C{  void implCompress(byte[] buf,int ofs){  b2iBig64(buf,ofs,W);  for (int t=16; t <= 79; t++) {    int temp=W[t - 3] ^ W[t - 8] ^ W[t - 14]^ W[t - 16];    W[t]=(temp << 1) | (temp >>> 31);  }  int a=state[0];  int b=state[1];  int c=state[2];  int d=state[3];  int e=state[4];  for (int i=0; i < 20; i++) {    int temp=((a << 5) | (a >>> (32 - 5))) + ((b & c) | ((~b) & d)) + e+ W[i]+ round1_kt;    e=d;    d=c;    c=((b << 30) | (b >>> (32 - 30)));    b=a;    a=temp;  }  for (int i=20; i < 40; i++) {    int temp=((a << 5) | (a >>> (32 - 5))) + (b ^ c ^ d) + e+ W[i]+ round2_kt;    e=d;    d=c;    c=((b << 30) | (b >>> (32 - 30)));    b=a;    a=temp;  }  for (int i=40; i < 60; i++) {    int temp=((a << 5) | (a >>> (32 - 5))) + ((b & c) | (b & d) | (c & d)) + e+ W[i]+ round3_kt;    e=d;    d=c;    c=((b << 30) | (b >>> (32 - 30)));    b=a;    a=temp;  }  for (int i=60; i < 80; i++) {    int temp=((a << 5) | (a >>> (32 - 5))) + (b ^ c ^ d) + e+ W[i]+ round4_kt;    e=d;    d=c;    c=((b << 30) | (b >>> (32 - 30)));    b=a;    a=temp;  }  state[0]+=a;  state[1]+=b;  state[2]+=c;  state[3]+=d;  state[4]+=e;}  }
class C{  public WeakValueHashMap(int capacity){  references=new HashMap<>(capacity);  gcQueue=new ReferenceQueue<>();}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix2D other){  if (other instanceof SelectedSparseDoubleMatrix2D) {    SelectedSparseDoubleMatrix2D otherMatrix=(SelectedSparseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseDoubleMatrix2D) {    SparseDoubleMatrix2D otherMatrix=(SparseDoubleMatrix2D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  private void persistServerURI(String serverURI){  File fileDir=newConnection.getFilesDir();  File presited=new File(fileDir,"hosts.txt");  BufferedWriter bfw=null;  try {    bfw=new BufferedWriter(new FileWriter(presited));    bfw.write(serverURI);    bfw.newLine();  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (bfw != null) {        bfw.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public int hashCode(){  if (this.affineX != null) {    return affineX.hashCode() * 31 + affineY.hashCode();  }  return 11;}  }
class C{  public <T>JsonStringMap<T> createMapDtoFromJson(String json,Class<T> dtoInterface){  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final Map<String,JsonElement> map=gson.fromJson(json,mapTypeCache.getUnchecked(JsonElement.class));  final Map<String,T> result=new LinkedHashMap<>(map.size());  for (  Map.Entry<String,JsonElement> e : map.entrySet()) {    result.put(e.getKey(),dtoProvider.fromJson(e.getValue()));  }  return new JsonStringMapImpl<>(result);}  }
class C{  public static <T>T[] toArray(Iterable<? extends T> iterable,Class<T> type){  Collection<? extends T> collection=toCollection(iterable);  T[] array=ObjectArrays.newArray(type,collection.size());  return collection.toArray(array);}  }
class C{  void attribTypeVariables(List<JCTypeParameter> typarams,Env<AttrContext> env){  for (  JCTypeParameter tvar : typarams) {    TypeVar a=(TypeVar)tvar.type;    a.tsym.flags_field|=UNATTRIBUTED;    a.bound=Type.noType;    if (!tvar.bounds.isEmpty()) {      List<Type> bounds=List.of(attribType(tvar.bounds.head,env));      for (      JCExpression bound : tvar.bounds.tail)       bounds=bounds.prepend(attribType(bound,env));      types.setBounds(a,bounds.reverse());    } else {      types.setBounds(a,List.of(syms.objectType));    }    a.tsym.flags_field&=~UNATTRIBUTED;  }  for (  JCTypeParameter tvar : typarams) {    chk.checkNonCyclic(tvar.pos(),(TypeVar)tvar.type);  }}  }
class C{  public DrawerBuilder withDrawerGravity(int gravity){  this.mDrawerGravity=gravity;  return this;}  }
class C{  public static String innerClassString(int flags){  return humanHelper(flags,INNER_CLASS_FLAGS,CONV_CLASS);}  }
class C{  public void testResourcesAvailable(){  new DanishAnalyzer().close();}  }
class C{  protected OMGraphic createLine(MysqlLine myLine){  OMPoly ompoly=new OMPoly(myLine.getCoordinateArray(),OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_STRAIGHT);  drawingAttributes.setTo(ompoly);  return ompoly;}  }
class C{  @Override public void keyTyped(char par1,int par2){  super.keyTyped(par1,par2);  this.textFieldFrequency.textboxKeyTyped(par1,par2);  try {    int newFrequency=Math.max(0,Integer.parseInt(this.textFieldFrequency.getText()));    this.textFieldFrequency.setText(newFrequency + "");    if (((IItemFrequency)this.itemStack.getItem()).getFrequency(this.itemStack) != newFrequency) {      ((IItemFrequency)this.itemStack.getItem()).setFrequency(newFrequency,this.itemStack);      ArrayList data=new ArrayList();      data.add(newFrequency);      DefenseTech.netHandler.sendToServer(new ItemMessage(data));    }  } catch (  NumberFormatException e) {  }}  }
class C{  public T caseStructuralTypeRef(StructuralTypeRef object){  return null;}  }
class C{  private String generateSignatureBaseString(String httpsURL,String requestMethod,Map<String,SortedSet<String>> baseParameters){  URI requestUri=parseUrl(httpsURL);  String encodedBaseString;  encodedBaseString=encode(requestMethod.toUpperCase()) + AMP + encode(normalizeUrl(requestUri))+ AMP+ encode(normalizeParameters(httpsURL,baseParameters));  return encodedBaseString;}  }
class C{  public ConnectException(String detailMessage){  super(detailMessage);}  }
class C{  public XhtmlFrameSetDocument appendHead(String value){  head.addElement(value);  return (this);}  }
class C{  boolean canRunInCurrentRunState(boolean periodic){  return isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown : executeExistingDelayedTasksAfterShutdown);}  }
class C{  public void doWindowClose(){  okToAbandon();}  }
class C{  public void add(double x,double y,double yLow,double yHigh,boolean notify){  super.add(new YIntervalDataItem(x,y,yLow,yHigh),notify);}  }
class C{  @Inline @Entrypoint public static byte byteArrayRead(byte[] ref,int index){  if (NEEDS_BYTE_GC_READ_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index);    return Selected.Mutator.get().byteRead(array,array.toAddress().plus(offset),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof ExecPermission))   return false;  ExecPermission that=(ExecPermission)p;  return fp.implies(that.fp);}  }
class C{  public void addMacro(String name) throws LexerException {  addMacro(name,"1");}  }
class C{  public void clearAnimation(){  rotationAnimator.cancel();}  }
class C{  public void updatePlayers(){  String introduction="The best maze runners:\n";  SignFromHallOfFameLoader loader=new SignFromHallOfFameLoader(this,introduction,"M",SIGN_LENGTH,false,true);  TurnNotifier.get().notifyInTurns(0,loader);}  }
class C{  boolean isAlpha(char ch){  return ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'));}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  LookupTables.setupItypes(request,true);  LookupTables.setupPrefLevels(request);  return mapping.findForward(mapping.getInput());}  }
class C{  public Object visit(ASTText node,Object data){  return showNode(node,data);}  }
class C{  public NioDatagramAcceptor(Executor executor){  this(new DefaultDatagramSessionConfig(),executor);}  }
class C{  public void remove(DocumentFilter.FilterBypass fb,int offset,int length) throws BadLocationException {  if (offset == 0 && length != fb.getDocument().getLength()) {    fb.replace(0,length,"\n",lexer.defaultStyle);    parseDocument(offset,2);    fb.remove(offset,1);  } else {    fb.remove(offset,length);    if (offset + 1 < fb.getDocument().getLength()) {      parseDocument(offset,1);    } else     if (offset - 1 > 0) {      parseDocument(offset - 1,1);    } else {      mlTextRunSet.clear();    }  }}  }
class C{  public InterruptedException(){}  }
class C{  public void requestAllContactsCapabilities() throws RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException {  try {    mApi.requestAllContactsCapabilities();  } catch (  Exception e) {    RcsServiceNotRegisteredException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public TFloatDoubleHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void addEntry(EntryEventImpl ev){  this.putAllData[this.putAllDataSize]=new PutAllEntryData(ev);  this.putAllDataSize+=1;}  }
class C{  protected void atCastToRtype(CastExpr expr) throws CompileError {  CtClass returnType=codeGen.returnType;  expr.getOprand().accept(this);  if (exprType == VOID || CodeGen.isRefType(exprType) || arrayDim > 0)   compileUnwrapValue(returnType); else   if (returnType instanceof CtPrimitiveType) {    CtPrimitiveType pt=(CtPrimitiveType)returnType;    int destType=MemberResolver.descToType(pt.getDescriptor());    exprType=destType;    arrayDim=0;    className=null;  }}  }
class C{  public long append(Entry entry){  Assert.notNull(entry,"entry");  Assert.stateNot(isFull(),"segment is full");  long index=nextIndex();  Assert.index(index == entry.getIndex(),"inconsistent index: %s",entry.getIndex());  long offset=relativeOffset(index);  long term=entry.getTerm();  long lastTerm=termIndex.term();  Assert.arg(term > 0 && term >= lastTerm,"term must be monotonically increasing");  long position=buffer.mark().position();  boolean skipTerm=term == lastTerm;  int headerLength=Bytes.INTEGER + Bytes.LONG + Bytes.BOOLEAN+ (skipTerm ? 0 : Bytes.LONG);  serializer.writeObject(entry,buffer.skip(headerLength));  int length=(int)(buffer.position() - (position + headerLength));  entry.setSize(length);  buffer.reset().writeInt(length).writeLong(offset);  if (skipTerm) {    buffer.writeBoolean(false).skip(length);  } else {    buffer.writeBoolean(true).writeLong(entry.getTerm()).skip(length);  }  offsetIndex.index(offset,position);  if (term > lastTerm) {    termIndex.index(offset,term);  }  skip=0;  return index;}  }
class C{  private void doLoad(HttpServletRequest request,InstructorEditForm frm,DepartmentalInstructor inst,String instructorId){  frm.setInstructorId(instructorId);  frm.setName(Constants.toInitialCase(inst.getFirstName(),"-".toCharArray()) + " " + ((inst.getMiddleName() == null) ? "" : Constants.toInitialCase(inst.getMiddleName(),"-".toCharArray()))+ " "+ Constants.toInitialCase(inst.getLastName(),"-".toCharArray()));  if (inst.getExternalUniqueId() != null) {    frm.setPuId(inst.getExternalUniqueId());  }  frm.setDeptName(inst.getDepartment().getName().trim());  if (inst.getPositionType() != null) {    frm.setPosType(inst.getPositionType().getUniqueId().toString());  }  if (inst.getCareerAcct() != null) {    frm.setCareerAcct(inst.getCareerAcct().trim());  }  frm.setEmail(inst.getEmail());  if (inst.getNote() != null) {    frm.setNote(inst.getNote().trim());  }  try {    DepartmentalInstructor previous=inst.getPreviousDepartmentalInstructor(sessionContext,Right.InstructorPreferences);    frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());    DepartmentalInstructor next=inst.getNextDepartmentalInstructor(sessionContext,Right.InstructorPreferences);    frm.setNextId(next == null ? null : next.getUniqueId().toString());  } catch (  Exception e) {    Debug.error(e);  }}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  public boolean isCompressionLossless(){  if (!canWriteCompressed()) {    throw new UnsupportedOperationException("Compression not supported");  }  if (getCompressionMode() != MODE_EXPLICIT) {    throw new IllegalStateException("Compression mode not MODE_EXPLICIT!");  }  if ((getCompressionTypes() != null) && (getCompressionType() == null)) {    throw new IllegalStateException("No compression type set!");  }  return true;}  }
class C{  public void clear(){  lineItems.clear();}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(env));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/dist/assets/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/dist/scripts/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  public void removeAttributes(String name){  removeAttributes(name,null);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  private void insertAdobeMarkerSegment(AdobeMarkerSegment newGuy){  boolean hasJFIF=(findMarkerSegment(JFIFMarkerSegment.class,true) != null);  int lastUnknown=findLastUnknownMarkerSegmentPosition();  if (hasJFIF) {    markerSequence.add(1,newGuy);  } else   if (lastUnknown != -1) {    markerSequence.add(lastUnknown + 1,newGuy);  } else {    markerSequence.add(0,newGuy);  }}  }
class C{  public Collection<GridClientNode> nodes(Iterable<UUID> ids) throws GridClientException {  assert ids != null;  Collection<GridClientNode> res=new LinkedList<>();  lock.readLock().lock();  try {    if (lastError != null)     throw new GridClientDisconnectedException("Latest topology update failed.",lastError);    for (    UUID id : ids) {      GridClientNodeImpl node=nodes.get(id);      if (node != null)       res.add(node);    }    return res;  }  finally {    lock.readLock().unlock();  }}  }
class C{  public static int paramSize(String desc){  return -dataSize(desc,false);}  }
class C{  public static String typeToStringShort(Attribute att){  return typeToStringShort(att.type());}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public KeywordLiteral(int pos,int len,int nodeType){  super(pos,len);  setType(nodeType);}  }
class C{  public boolean isTailSplit(){  if (!initView) {    getView();  }  return tailSplit;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CommHeader(String sync,short messageLength,String sender,String receiver,int sequenceNo){  super();  this.sync=sync;  this.messageLength=messageLength;  this.sender=sender;  this.receiver=receiver;  this.sequenceNo=sequenceNo;}  }
class C{  private void buildClassPath() throws InterruptedException, IOException, CheckedAnalysisException {  IClassPathBuilder builder=classFactory.createClassPathBuilder(bugReporter);{    HashSet<String> seen=new HashSet<String>();    for (    String path : project.getFileArray()) {      if (seen.add(path)) {        builder.addCodeBase(classFactory.createFilesystemCodeBaseLocator(path),true);      }    }    for (    String path : project.getAuxClasspathEntryList()) {      if (seen.add(path)) {        builder.addCodeBase(classFactory.createFilesystemCodeBaseLocator(path),false);      }    }  }  builder.scanNestedArchives(analysisOptions.scanNestedArchives);  builder.build(classPath,progress);  appClassList=builder.getAppClassList();  if (PROGRESS) {    System.out.println(appClassList.size() + " classes scanned");  }  for (Iterator<? extends ICodeBase> i=classPath.appCodeBaseIterator(); i.hasNext(); ) {    ICodeBase appCodeBase=i.next();    if (appCodeBase.containsSourceFiles()) {      String pathName=appCodeBase.getPathName();      if (pathName != null) {        project.addSourceDir(pathName);      }    }    project.addTimestamp(appCodeBase.getLastModifiedTime());  }}  }
class C{  public void endEntity(String name) throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endEntity(name);}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){}  }
class C{  public HGRemoveRefusedException(HGHandle atom,Object reason){  super("Remove of hypergraph atom failed");  this.atom=atom;  this.reason=reason;}  }
class C{  public double totalCount(){  return entries.sum();}  }
class C{  private String readPropName(ByteBuffer buffer){  int nameLength=buffer.getShort();  byte[] nameBytes=ByteUtil.getBytes(buffer,nameLength);  return ColumnImpl.decodeUncompressedText(nameBytes,_database.getCharset());}  }
class C{  public void flush() throws Exception {  if (writingChannel != null) {    sequentialFile.position(0);    writingChannel.writerIndex(writingChannel.capacity());    sequentialFile.writeDirect(writingChannel.toByteBuffer(),true);    sequentialFile.close();    newDataFiles.add(currentFile);  }  writingChannel=null;}  }
class C{  private void load(File file) throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String[] tokens=reader.readLine().split("\\s+");    if (tokens.length != 3) {      throw new IOException("expected 3 values on first line");    }    n=Integer.parseInt(tokens[0]);    k=Integer.parseInt(tokens[1]);    overlap=Integer.parseInt(tokens[2]);    checkArguments();    int numberOfFunctions=(n - k) / (k - overlap) + 1;    function=new double[numberOfFunctions][1 << k];    tokens=reader.readLine().split("\\s+");    if (tokens.length != numberOfFunctions * (1 << k)) {      throw new IOException("incorrect number of values on second line, expected " + (numberOfFunctions * (1 << k)));    }    for (int i=0; i < numberOfFunctions; i++) {      for (int j=0; j < (1 << k); j++) {        function[i][j]=Double.parseDouble(tokens[i * (1 << k) + j]);      }    }    reader.readLine();    permutation=new int[n];    tokens=reader.readLine().split("\\s+");    if (tokens.length != n) {      throw new IOException("incorrect number of values on fourth line, expected " + n);    }    for (int i=0; i < n; i++) {      permutation[i]=Integer.parseInt(tokens[i]);    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public BaseItemProviderAdapterFactory(){  supportedTypes.add(IEditingDomainItemProvider.class);  supportedTypes.add(IStructuredItemContentProvider.class);  supportedTypes.add(ITreeItemContentProvider.class);  supportedTypes.add(IItemLabelProvider.class);  supportedTypes.add(IItemPropertySource.class);}  }
class C{  public void clear(){synchronized (keyInfoMap) {    for (    final WatchKey key : keyInfoMap.keySet())     key.cancel();    keyInfoMap.clear();  }}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public DeleteSubscriptionsResponse DeleteSubscriptions(RequestHeader RequestHeader,UnsignedInteger... SubscriptionIds) throws ServiceFaultException, ServiceResultException {  DeleteSubscriptionsRequest req=new DeleteSubscriptionsRequest(RequestHeader,SubscriptionIds);  return (DeleteSubscriptionsResponse)channel.serviceRequest(req);}  }
class C{  @Override public void mouseExited(MouseEvent e){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return node == null ? null : node.getFinalDescendants();}  }
class C{  public CollectRequestedItemsAction(String itemName,String quest,String questionForMore,String alreadyBrought,ChatAction completionAction,ConversationStates stateAfterCompletion){  this.itemName=checkNotNull(itemName);  this.questSlot=checkNotNull(quest);  this.questionForMore=checkNotNull(questionForMore);  this.alreadyBrought=checkNotNull(alreadyBrought);  this.toExecuteOnCompletion=checkNotNull(completionAction);  this.stateAfterCompletion=checkNotNull(stateAfterCompletion);}  }
class C{  public SnackbarBuilder appendMessage(@StringRes int messageResId){  return appendMessage(context.getString(messageResId));}  }
class C{  public WFActivity(AMenu menu){  super();  log.config("");  try {    dynInit(0);    jbInit();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  m_menu=menu;}  }
class C{  public static String replace(String inString,String oldPattern,String newPattern){  if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {    return inString;  }  StringBuilder sb=new StringBuilder();  int pos=0;  int index=inString.indexOf(oldPattern);  int patLen=oldPattern.length();  while (index >= 0) {    sb.append(inString.substring(pos,index));    sb.append(newPattern);    pos=index + patLen;    index=inString.indexOf(oldPattern,pos);  }  sb.append(inString.substring(pos));  return sb.toString();}  }
class C{  public T putCache(String key,T value){  return cache.put(key,value);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void sendDebugReportToAuthor(){  String theLine;  String theTrace="";  try {    BufferedReader theReader=new BufferedReader(new InputStreamReader(mAct.openFileInput(EXCEPTION_REPORT_FILENAME)));    while ((theLine=theReader.readLine()) != null) {      theTrace+=theLine + "\n";    }    if (sendDebugReportToAuthor(theTrace)) {      mAct.deleteFile(EXCEPTION_REPORT_FILENAME);    }  } catch (  IOException eIo) {  }}  }
class C{  public static void updateNumberOfScreens(boolean isAdding){  if (isAdding) {    totalNumberScreens++;    numberScreensOnBackStack++;    Crashlytics.setInt(NUMBER_OF_SCREENS,totalNumberScreens);    Crashlytics.setInt(NUMBER_OF_SCREENS_ON_BACK_STACK,numberScreensOnBackStack);  } else {    numberScreensOnBackStack--;    Crashlytics.setInt(NUMBER_OF_SCREENS_ON_BACK_STACK,numberScreensOnBackStack);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  protected boolean removeSubtree(E comparable){  if (comparable == null)   return false;  if (this.root == null)   return false;  BinarySearchTreeNode<E> node=this.root;  while (node != null) {    int diff=comparable.compareTo(node.comparable);    if (diff < 0) {      node=node.left;    } else     if (diff > 0) {      node=node.right;    } else {      if (node.comparable.equals(comparable)) {        if (node.isLeftChild()) {          node.parent.left=null;        } else {          node.parent.right=null;        }        this.size-=this.size(node);        if (this.selfBalancing)         this.balanceTree(node.parent);        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.778 -0500",hash_original_method="B45A9D19151CAED15569D78F83AD2095",hash_generated_method="643ADB5C95A2E9CDD4F158DFE1BAB0C5") public void clearPassword(){  this.password=null;}  }
class C{  private void refreshProject(final List<EditorPartPresenter> openedEditors){  projectExplorer.reloadChildren();  for (  EditorPartPresenter partPresenter : openedEditors) {    final VirtualFile file=partPresenter.getEditorInput().getFile();    eventBus.fireEvent(new FileContentUpdateEvent(file.getPath()));  }}  }
class C{  public LayerDrawable(@NonNull Drawable[] layers){  this(layers,null);}  }
class C{  public static Date executeTimestampQuery(String sql) throws AdeException {  return executeTimestampQuery(sql,AdeInternal.getDefaultConnection(),true);}  }
class C{  public void addField(XTIFFField field){  fieldIndex.put(new Integer(field.tag),field);}  }
class C{  public static TypeReference newTryCatchReference(int tryCatchBlockIndex){  return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));}  }
class C{  public static String toHexString(byte[] byteArray){  if (byteArray != null && byteArray.length != 0) {    StringBuilder builder=new StringBuilder(byteArray.length * 3);    for (int i=0; i < byteArray.length; i++) {      builder.append(String.format("%02X",0xFF & byteArray[i]));      if (i < byteArray.length - 1) {        builder.append(' ');      }    }    return builder.toString();  } else {    return "--";  }}  }
class C{  public void addTotalStartedThreadCount(long totalStartedThreadCount){  this.totalTotalStartedThreadCount+=totalStartedThreadCount;}  }
class C{  public boolean isField(){  return testAllFlags(IS_FIELD);}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("session.general"));  this.add(getPanelSession(),getPanelSession().getName());}  }
class C{  public static Set<String> assertValidCipherSuites(Set<String> expected,String[] cipherSuites){  assertNotNull(cipherSuites);  assertTrue(cipherSuites.length != 0);  Set remainingCipherSuites=new HashSet<String>(expected);  Set unknownCipherSuites=new HashSet<String>();  for (  String cipherSuite : cipherSuites) {    boolean removed=remainingCipherSuites.remove(cipherSuite);    if (!removed) {      unknownCipherSuites.add(cipherSuite);    }  }  assertEquals("Unknown cipher suites",Collections.EMPTY_SET,unknownCipherSuites);  return remainingCipherSuites;}  }
class C{  @Override public void onCommit(List<? extends IndexCommit> list) throws IOException {  List<IndexCommitWrapper> wrapperList=wrap(list);  deletionPolicy.onCommit(wrapperList);  updateCommitPoints(wrapperList);  cleanReserves();}  }
class C{  private Diff generateFullRevision(final Revision revision) throws UnsupportedEncodingException {  Diff diff=new Diff();  RevisionCodecData codecData=new RevisionCodecData();  part=new DiffPart(DiffAction.FULL_REVISION_UNCOMPRESSED);  text=revision.getRevisionText();  revCurrent=text.toCharArray();  part.setText(text);  codecData.checkBlocksizeL(text.getBytes(WIKIPEDIA_ENCODING).length);  diff.add(part);  diff.setCodecData(codecData);  return diff;}  }
class C{  void addEntry(int hash,K key,V value,int bucketIndex){  createEntry(hash,key,value,bucketIndex);  Entry<K,V> eldest=header.after;  if (removeEldestEntry(eldest)) {    removeEntryForKey(eldest.key);  } else {    if (size >= threshold)     resize(2 * table.length);  }}  }
class C{  public synchronized void retireJob(ReplicationJob job){  ReplicationJob removedJob=idToReplicationJob.remove(job.getId());  if (removedJob == null) {    throw new RuntimeException("Couldn't find id: " + job.getId() + " in the registry!");  }  if (removedJob != job) {    throw new RuntimeException("Replication jobs with the same ID " + "are not equal: %s and %s");  }  if (retiredJobs.size() + 1 > MAX_RETIRED_JOBS) {    retiredJobs.remove(0);  }  retiredJobs.add(removedJob);}  }
class C{  public optgroup addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  protected String checkProduction(final Territory to,final Collection<Unit> units,final PlayerID player){  final List<Territory> producers=getAllProducers(to,player,units);  if (producers.isEmpty()) {    return "No factory in or adjacent to " + to.getName();  }  Collections.sort(producers,getBestProducerComparator(to,units,player));  if (!getCanAllUnitsWithRequiresUnitsBePlacedCorrectly(units,to)) {    return "Cannot place more units which require units, than production capacity of territories with the required units";  }  final int maxUnitsToBePlaced=getMaxUnitsToBePlaced(units,to,player,true);  if ((maxUnitsToBePlaced != -1) && (maxUnitsToBePlaced < units.size())) {    return "Cannot place " + units.size() + " more units in "+ to.getName();  }  return null;}  }
class C{  public GamlDefinition createGamlDefinition(){  GamlDefinitionImpl gamlDefinition=new GamlDefinitionImpl();  return gamlDefinition;}  }
class C{  public static int hash(int hash,float item){  return hash * prime + Float.floatToIntBits(item);}  }
class C{  public boolean disableStatePersistence(){  for (  ClusterBlock clusterBlock : global) {    if (clusterBlock.disableStatePersistence()) {      return true;    }  }  return false;}  }
class C{  public void resolve(TemplateVariable variable,TemplateContext context){  String type=variable.getType();  TemplateVariableResolver resolver=(TemplateVariableResolver)fResolvers.get(type);  if (resolver == null)   resolver=new TemplateVariableResolver(type,"");  resolver.resolve(variable,context);}  }
class C{  private void updateServerSettingsFile(){  Map<String,String> propertiesMap=currentSettings.propertiesMap();  if (propertiesMap.isEmpty()) {    return;  }  File oldFile=new File(NEO4J_CONF);  try {    debug("Changing server properties file (for next start): " + oldFile.getCanonicalPath());    for (    Map.Entry<String,String> property : propertiesMap.entrySet()) {      String name=property.getKey();      Object value=property.getValue();      debug("%s=%s",name,value);    }    updateProperties(oldFile,propertiesMap,currentSettings.excludes());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean hasSecondChanged(WatchFaceTime otherTime){  return second != otherTime.second;}  }
class C{  static GrantorInfo checkLockGrantorInfo(String serviceName,InternalDistributedSystem system){  GrantorInfo gi=GrantorRequestProcessor.peekGrantor(serviceName,system);  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[checkLockGrantorId] returning {}",gi);  }  return gi;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_EXPRESSION__ANNOTATION_LIST:    return annotationList != null;case N4JSPackage.FUNCTION_EXPRESSION__TYPE_VARS:  return typeVars != null && !typeVars.isEmpty();case N4JSPackage.FUNCTION_EXPRESSION__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  public static Extent chunkAlign(Extent bytes,boolean down){  return alignWord(bytes.toWord(),VMLayoutConstants.LOG_BYTES_IN_CHUNK,down).toExtent();}  }
class C{  public WrappedSyntaxView(Element elem){  super(elem,Y_AXIS);  s=new Segment();  drawSeg=new Segment();  tempRect=new Rectangle();}  }
class C{  public boolean isDirectory(){  return getName().endsWith("/");}  }
class C{  public static Script createOpReturnScript(byte[] data){  checkArgument(data.length <= 80);  return new ScriptBuilder().op(OP_RETURN).data(data).build();}  }
class C{  protected ElementParser(AltFormat altFormat,Class<T> resultType){  super(altFormat,resultType);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_executorPool != null && (m_executorPool.getQueue().size() > 0 || m_executorPool.getActiveCount() > 0)) {    newVector.addElement("Stop");  }  if ((m_executorPool == null || (m_executorPool.getQueue().size() == 0 && m_executorPool.getActiveCount() == 0)) && m_Classifier != null) {    newVector.addElement("Save model");  }  if (m_executorPool == null || (m_executorPool.getQueue().size() == 0 && m_executorPool.getActiveCount() == 0)) {    newVector.addElement("Load model");  }  return newVector.elements();}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public static IStatus validateMethodName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  public void onDestroy(){}  }
class C{  public LogisticGrowthModel(Parameter N0Parameter,Parameter growthRateParameter,Parameter shapeParameter,double alpha,Type units,boolean usingGrowthRate){  this(LogisticGrowthModelParser.LOGISTIC_GROWTH_MODEL,N0Parameter,growthRateParameter,shapeParameter,alpha,units,usingGrowthRate);}  }
class C{  private void heapifyDown(double cur,long val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best < twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur >= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public static String encodeValue(Value value){  if (value instanceof BNode) {    return "_:" + ((BNode)value).getID();  }  return NTriplesUtil.toNTriplesString(value);}  }
class C{  public FlatBufferBuilder forceDefaults(boolean forceDefaults){  this.force_defaults=forceDefaults;  return this;}  }
class C{  private String createQueryString(){  StringBuffer retval=new StringBuffer(RecipeUtil.RECIPE_ITEMTYPE_QUERY);  if (queryClean != null) {    retval.append(queryClean);  }  appendAttributeCondition(retval,"main ingredient",mainIngredient,true);  appendAttributeCondition(retval,"cuisine",cuisine,false);  if (cookingTime != null) {    Collection<String> cookingTimes=new ArrayList<String>();    cookingTimes.add("0.." + cookingTime + " min");    cookingTimes.add("0.." + cookingTime + " minutes");    appendAttributeCondition(retval,"cooking time",cookingTimes,false);  }  return retval.toString();}  }
class C{  public DateTimeFormatterBuilder appendYearOfEra(int minDigits,int maxDigits){  return appendDecimal(DateTimeFieldType.yearOfEra(),minDigits,maxDigits);}  }
class C{  public boolean containsHeader(String name){  for (int i=0; i < headers.size(); i++) {    Header header=(Header)headers.get(i);    if (header.getName().equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public MaterialEditText icon(int resId){  mInputIconId=resId;  mIcon.setImageResource(mInputIconId);  mIcon.setVisibility(VISIBLE);  mIcon.setAlpha(0f);  mEditText.setPadding(DimensUtils.dp2px(mContext,40),mEditText.getPaddingTop(),mEditText.getPaddingRight(),mEditText.getPaddingBottom());  return this;}  }
class C{  public void removeRelated(String relationName) throws GenericEntityException {  this.getDelegator().removeRelated(relationName,this);}  }
class C{  public double normInf(){  double f=0;  for (int i=0; i < m; i++) {    double s=0;    for (int j=0; j < n; j++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  @Override public ArrayList<String> reportDenseFeatures(int index){  denseFeatureIndex=index;  ArrayList<String> names=new ArrayList<>();  for (int i=0; i < phrase_weights.length; i++)   names.add(String.format("tm_%s_%d",owner,i));  return names;}  }
class C{  public Component findDropTargetAt(int x,int y){  int count=getComponentCount();  for (int i=count - 1; i >= 0; i--) {    Component cmp=getComponentAt(i);    if (cmp.contains(x,y)) {      if (cmp.isDropTarget()) {        return cmp;      }      if (cmp instanceof Container) {        Component component=((Container)cmp).findDropTargetAt(x,y);        if (component != null) {          return component;        }      }    }  }  return null;}  }
class C{  static void moveToForeignTarget(Path source,Path target,CopyOption... options) throws IOException {  copyToForeignTarget(source,target,convertMoveToCopyOptions(options));  Files.delete(source);}  }
class C{  public static String canonicalizePath(String path,boolean discardRelativePrefix){  int segmentStart=0;  int deletableSegments=0;  for (int i=0; i <= path.length(); ) {    int nextSegmentStart;    if (i == path.length()) {      nextSegmentStart=i;    } else     if (path.charAt(i) == '/') {      nextSegmentStart=i + 1;    } else {      i++;      continue;    }    if (i == segmentStart + 1 && path.regionMatches(segmentStart,".",0,1)) {      path=path.substring(0,segmentStart) + path.substring(nextSegmentStart);      i=segmentStart;    } else     if (i == segmentStart + 2 && path.regionMatches(segmentStart,"..",0,2)) {      if (deletableSegments > 0 || discardRelativePrefix) {        deletableSegments--;        int prevSegmentStart=path.lastIndexOf('/',segmentStart - 2) + 1;        path=path.substring(0,prevSegmentStart) + path.substring(nextSegmentStart);        i=segmentStart=prevSegmentStart;      } else {        i++;        segmentStart=i;      }    } else {      if (i > 0) {        deletableSegments++;      }      i++;      segmentStart=i;    }  }  return path;}  }
class C{  @Before public void beforTest() throws Exception {  validateAssumption();  CreateQueueRequest createQueueRequest=new CreateQueueRequest().withQueueName(getCurrentQueueName());  currentQueueUrl=sqs.createQueue(createQueueRequest).getQueueUrl();}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  public Builder withZkChroot(String zkChroot){  this.zkChroot=zkChroot;  return this;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public InvalidDnDOperationException(){  super(dft_msg);}  }
class C{  private static void weakHashLength32WithSeeds(byte[] bytes,int offset,long seedA,long seedB,long[] output){  long part1=load64(bytes,offset);  long part2=load64(bytes,offset + 8);  long part3=load64(bytes,offset + 16);  long part4=load64(bytes,offset + 24);  seedA+=part1;  seedB=rotateRight(seedB + seedA + part4,21);  long c=seedA;  seedA+=part2;  seedA+=part3;  seedB+=rotateRight(seedA,44);  output[0]=seedA + part4;  output[1]=seedB + c;}  }
class C{  public boolean intersects(S2Loop b){  if (!bound.intersects(b.getRectBound())) {    return false;  }  if (b.getRectBound().lng().getLength() > bound.lng().getLength()) {    return b.intersects(this);  }  if (contains(b.vertex(0)) && findVertex(b.vertex(0)) < 0) {    return true;  }  if (checkEdgeCrossings(b,new S2EdgeUtil.WedgeIntersects()) < 0) {    return true;  }  if (b.getRectBound().contains(bound)) {    if (b.contains(vertex(0)) && b.findVertex(vertex(0)) < 0) {      return true;    }  }  return false;}  }
class C{  public void testGridMultiPolygonsHolesRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  MultiPolygon[] pt=new MultiPolygon[100];  STRUCT[] st=new STRUCT[100];  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(10);  pgc.setNumberHoles(4);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiPolygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    MultiPolygon pt2=(MultiPolygon)or.read(st[i]);    assertTrue("The input MultiPolygon is not the same as the output MultiPolygon",pt[i].equals(pt2));    i++;  }}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (graph == null) {    throw new NullPointerException();  }  if (nodes == null) {    throw new NullPointerException();  }  if (parameters == null) {    throw new NullPointerException();  }  if (variableNodes == null) {    throw new NullPointerException();  }  if (paramComparisons == null) {    throw new NullPointerException();  }  if (tIndex < 0) {    throw new IllegalStateException("TIndex out of range: " + tIndex);  }  if (mIndex < 0) {    throw new IllegalStateException("MIndex out of range: " + mIndex);  }  if (bIndex < 0) {    throw new IllegalStateException("BIndex out of range: " + bIndex);  }}  }
class C{  private void encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[0];  for (int i=1; i < ROUNDS; i+=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i + 1];  }  xr^=P[ROUNDS + 1];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.872 -0400",hash_original_method="C366AABFB464B05ADB50C836A40C4BAE",hash_generated_method="5A0462484410C7D0FF9FB0F000ABDD57") @DSSafe(DSCat.SAFE_LIST) @Deprecated public static IOFileFilter andFileFilter(IOFileFilter filter1,IOFileFilter filter2){  return new AndFileFilter(filter1,filter2);}  }
class C{  public final Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  if (mode != UNWRAP_MODE) {    throw new IllegalStateException();  }  return spiImpl.engineUnwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public void release(){synchronized (LoginManager.class) {    if (refCount == 0)     throw new IllegalStateException("release called on LoginManager with refCount == 0"); else     if (refCount == 1) {      CACHED_INSTANCES.remove(loginType);      login.shutdown();    }    --refCount;  }}  }
class C{  public DependencySortedWrapper(final Element element,final int sortOrder){  super(element,sortOrder);}  }
class C{  public static ProgressDialog createActionLoading(Context context){  ProgressDialog dialog=new ProgressDialog(context);  dialog.setCanceledOnTouchOutside(false);  dialog.setCancelable(false);  dialog.setMessage(context.getString(R.string.loading));  return dialog;}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot,Message struct) throws org.apache.thrift.TException {  struct.validate();  oprot.writeStructBegin(STRUCT_DESC);  if (struct.receivers != null) {    oprot.writeFieldBegin(RECEIVERS_FIELD_DESC);    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,struct.receivers.size()));    for (    String _iter10 : struct.receivers) {      oprot.writeString(_iter10);    }    oprot.writeListEnd();    oprot.writeFieldEnd();  }  if (struct.sender != null) {    oprot.writeFieldBegin(SENDER_FIELD_DESC);    oprot.writeString(struct.sender);    oprot.writeFieldEnd();  }  if (struct.subject != null) {    if (struct.isSetSubject()) {      oprot.writeFieldBegin(SUBJECT_FIELD_DESC);      oprot.writeString(struct.subject);      oprot.writeFieldEnd();    }  }  if (struct.messageType != null) {    if (struct.isSetMessageType()) {      oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);      oprot.writeString(struct.messageType);      oprot.writeFieldEnd();    }  }  if (struct.extendAttrs != null) {    if (struct.isSetExtendAttrs()) {      oprot.writeFieldBegin(EXTEND_ATTRS_FIELD_DESC);      oprot.writeString(struct.extendAttrs);      oprot.writeFieldEnd();    }  }  if (struct.attachments != null) {    if (struct.isSetAttachments()) {      oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);      oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.attachments.size()));      for (      Attachment _iter11 : struct.attachments) {        _iter11.write(oprot);      }      oprot.writeListEnd();      oprot.writeFieldEnd();    }  }  if (struct.params != null) {    if (struct.isSetParams()) {      oprot.writeFieldBegin(PARAMS_FIELD_DESC);      oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,struct.params.size()));      for (      Map.Entry<String,String> _iter12 : struct.params.entrySet()) {        oprot.writeString(_iter12.getKey());        oprot.writeString(_iter12.getValue());      }      oprot.writeMapEnd();      oprot.writeFieldEnd();    }  }  oprot.writeFieldStop();  oprot.writeStructEnd();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof YIntervalRenderer)) {    return false;  }  YIntervalRenderer that=(YIntervalRenderer)obj;  if (!ObjectUtilities.equal(this.additionalItemLabelGenerator,that.additionalItemLabelGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public Object clone(){  return new StateInfo(this);}  }
class C{  public void addColumn(Column column){  if (!allTableColumns.contains(column)) {    allTableColumns.add(column);  }}  }
class C{  public static void main(String[] args){  ClassCache cache=new ClassCache();  Enumeration<String> packages=cache.packages();  while (packages.hasMoreElements()) {    String key=packages.nextElement();    System.out.println(key + ": " + cache.getClassnames(key).size());  }}  }
class C{  public void save(Context context){  if (_id == null) {    _id=CPOrm.insert(context,this);  } else   CPOrm.update(context,this);}  }
class C{  protected int findWrapPos(String text,int width,int startPos){  int pos=-1;  if (((pos=text.indexOf('\n',startPos)) != -1 && pos <= width) || ((pos=text.indexOf('\t',startPos)) != -1 && pos <= width)) {    return pos + 1;  } else   if (startPos + width >= text.length()) {    return -1;  }  pos=startPos + width;  char c;  while ((pos >= startPos) && ((c=text.charAt(pos)) != ' ') && (c != '\n')&& (c != '\r')) {    --pos;  }  if (pos > startPos) {    return pos;  }  pos=startPos + width;  while ((pos <= text.length()) && ((c=text.charAt(pos)) != ' ') && (c != '\n')&& (c != '\r')) {    ++pos;  }  return (pos == text.length()) ? (-1) : pos;}  }
class C{  public void testGetThenReset(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  ai.accumulate(2.0);  assertEquals(2.0,ai.get());  assertEquals(2.0,ai.getThenReset());  assertEquals(0.0,ai.get());}  }
class C{  protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.size() - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  private String generateMessageId(LinuxSyslogLineParser lineParser,IThresholdSetter thresholdSetter) throws AdeException {  if (thresholdSetter == null) {    thresholdSetter=new TextClusteringComponentModel.SimpleThresholdSetter();  }  final TextClusteringModel model=m_textClusteringComponentModel.getTextClusteringModel(lineParser.m_component,thresholdSetter);  return model.getComponentName() + "_" + model.getOrAddCluster(lineParser.m_text,lineParser.m_msgTime).getClusterId();}  }
class C{  public SmoothOverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
