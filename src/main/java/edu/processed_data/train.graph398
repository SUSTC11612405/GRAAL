class C{  public boolean isPersistent(){  return isPersistent;}  }
class C{  private StringAttributeRule(String name,String description,String example,boolean optional,int minLength,int maxLength){  setName(name);  setAttributeClass(String.class);  setOptional(optional);  setDescription(description);  this.example=example;  this.minLength=minLength;  this.maxLength=maxLength;}  }
class C{  public static int[] objectAsIntArray(Object object){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  return (int[])object;}  }
class C{  private void prepareDirectories(File file,Boolean createPathIfMissing,Boolean removeOldOutput){  File outputDirectory;  if (file.isDirectory()) {    outputDirectory=file;  } else {    outputDirectory=file.getParentFile();  }  if (!outputDirectory.exists() && createPathIfMissing) {    if (!outputDirectory.mkdirs()) {      logger.info("Failed to create directory: " + outputDirectory);    }  }  if (removeOldOutput) {    try {      FileUtils.cleanDirectory(outputDirectory);    } catch (    IOException ioe) {      logger.error("Failed to clean directory: " + outputDirectory,ioe);    }  }}  }
class C{  private PrintElement layoutTable(MPrintFormat format,PrintData printData,int xOffset){  log.info(format.getName() + " - " + printData.getName());  MPrintTableFormat tf=format.getTableFormat();  HashMap<Point,Font> rowColFont=new HashMap<Point,Font>();  MPrintFont printFont=MPrintFont.get(format.getAD_PrintFont_ID());  rowColFont.put(new Point(TableElement.ALL,TableElement.ALL),printFont.getFont());  tf.setStandard_Font(printFont.getFont());  rowColFont.put(new Point(TableElement.HEADER_ROW,TableElement.ALL),tf.getHeader_Font());  HashMap<Point,Color> rowColColor=new HashMap<Point,Color>();  MPrintColor printColor=MPrintColor.get(getCtx(),format.getAD_PrintColor_ID());  rowColColor.put(new Point(TableElement.ALL,TableElement.ALL),printColor.getColor());  rowColColor.put(new Point(TableElement.HEADER_ROW,TableElement.ALL),tf.getHeaderFG_Color());  HashMap<Point,Color> rowColBackground=new HashMap<Point,Color>();  rowColBackground.put(new Point(TableElement.HEADER_ROW,TableElement.ALL),tf.getHeaderBG_Color());  boolean multiLineHeader=tf.isMultiLineHeader();  int pageNoStart=m_pageNo;  int repeatedColumns=1;  Rectangle firstPage=new Rectangle(m_content);  firstPage.x+=xOffset;  firstPage.width-=xOffset;  int yOffset=(int)m_position[AREA_CONTENT].y - m_content.y;  firstPage.y+=yOffset;  firstPage.height-=yOffset;  Rectangle nextPages=new Rectangle(m_content);  nextPages.x+=xOffset;  nextPages.width-=xOffset;  int columnCount=0;  for (int c=0; c < format.getItemCount(); c++) {    if (format.getItem(c).isPrinted())     columnCount++;  }  ValueNamePair[] columnHeader=new ValueNamePair[columnCount];  int[] columnMaxWidth=new int[columnCount];  int[] columnMaxHeight=new int[columnCount];  boolean[] fixedWidth=new boolean[columnCount];  boolean[] colSuppressRepeats=new boolean[columnCount];  String[] columnJustification=new String[columnCount];  HashMap<Integer,Integer> additionalLines=new HashMap<Integer,Integer>();  int col=0;  for (int c=0; c < format.getItemCount(); c++) {    MPrintFormatItem item=format.getItem(c);    if (item.isPrinted()) {      if (item.isNextLine() && item.getBelowColumn() != 0) {        additionalLines.put(new Integer(col),new Integer(item.getBelowColumn() - 1));        if (!item.isSuppressNull()) {          item.setIsSuppressNull(true);          item.saveEx();        }      }      columnHeader[col]=new ValueNamePair(item.getColumnName(),item.getPrintName(format.getLanguage()));      columnMaxWidth[col]=item.getMaxWidth();      fixedWidth[col]=(columnMaxWidth[col] != 0 && item.isFixedWidth());      colSuppressRepeats[col]=item.isSuppressRepeats();      if (item.isSuppressNull()) {        if (columnMaxWidth[col] == 0)         columnMaxWidth[col]=-1; else         columnMaxWidth[col]*=-1;      }      columnMaxHeight[col]=item.getMaxHeight();      if (item.isHeightOneLine())       columnMaxHeight[col]=-1;      columnJustification[col]=item.getFieldAlignmentType();      if (columnJustification[col] == null || columnJustification[col].equals(MPrintFormatItem.FIELDALIGNMENTTYPE_Default))       columnJustification[col]=MPrintFormatItem.FIELDALIGNMENTTYPE_LeadingLeft;      if (item.getAD_PrintFont_ID() != 0 && item.getAD_PrintFont_ID() != format.getAD_PrintFont_ID()) {        MPrintFont font=MPrintFont.get(item.getAD_PrintFont_ID());        rowColFont.put(new Point(TableElement.ALL,col),font.getFont());      }      if (item.getAD_PrintColor_ID() != 0 && item.getAD_PrintColor_ID() != format.getAD_PrintColor_ID()) {        MPrintColor color=MPrintColor.get(getCtx(),item.getAD_PrintColor_ID());        rowColColor.put(new Point(TableElement.ALL,col),color.getColor());      }      col++;    }  }  int rows=printData.getRowCount();  Object[][] data=new Object[rows][columnCount];  KeyNamePair[] pk=new KeyNamePair[rows];  String pkColumnName=null;  ArrayList<Integer> functionRows=new ArrayList<Integer>();  ArrayList<Integer> pageBreak=new ArrayList<Integer>();  for (int row=0; row < rows; row++) {    printData.setRowIndex(row);    if (printData.isFunctionRow()) {      functionRows.add(new Integer(row));      rowColFont.put(new Point(row,TableElement.ALL),tf.getFunct_Font());      rowColColor.put(new Point(row,TableElement.ALL),tf.getFunctFG_Color());      rowColBackground.put(new Point(row,TableElement.ALL),tf.getFunctBG_Color());      if (printData.isPageBreak()) {        pageBreak.add(new Integer(row));        log.finer("PageBreak row=" + row);      }    } else {      int levelNo=printData.getLineLevelNo();      if (levelNo != 0) {        if (levelNo < 0)         levelNo=-levelNo;        Font base=printFont.getFont();        if (levelNo == 1)         rowColFont.put(new Point(row,TableElement.ALL),new Font(base.getName(),Font.ITALIC,base.getSize() - levelNo)); else         if (levelNo == 2)         rowColFont.put(new Point(row,TableElement.ALL),new Font(base.getName(),Font.PLAIN,base.getSize() - levelNo));      }    }    col=0;    for (int c=0; c < format.getItemCount(); c++) {      MPrintFormatItem item=format.getItem(c);      Object dataElement=null;      if (item.isPrinted()) {        if (item.isTypeImage()) {          if (item.isImageField())           data[row][col]=createImageElement(item); else           if (item.isImageIsAttached())           data[row][col]=ImageElement.get(item.get_ID()); else           data[row][col]=ImageElement.get(item.getImageURL());          if (data[row][col] != null)           ((ImageElement)data[row][col]).layout(item.getMaxWidth(),item.getMaxHeight(),false,item.getFieldAlignmentType());        } else         if (item.isBarcode()) {          Object obj=null;          if (item.getAD_Column_ID() > 0)           obj=printData.getNode(new Integer(item.getAD_Column_ID()));          if (obj == null)           ; else           if (obj instanceof PrintDataElement) {            PrintDataElement pde=(PrintDataElement)obj;            String value=null;            Object o=pde.getValue();            if (o == null)             value="";            if (o instanceof KeyNamePair)             value=((KeyNamePair)o).getID(); else             value=o.toString();            BarcodeElement element=new BarcodeElement(value,item);            if (element.isValid())             data[row][col]=element;          }          if (data[row][col] != null)           ((BarcodeElement)data[row][col]).layout(item.getMaxWidth(),item.getMaxHeight(),false,item.getFieldAlignmentType());        } else         if (item.isTypeText()) {          data[row][col]=item.getPrintName(format.getLanguage());        } else         if (item.isTypeField()) {          Object obj=null;          if (item.getAD_Column_ID() > 0)           obj=printData.getNode(new Integer(item.getAD_Column_ID()));          if (obj == null)           ; else           if (obj instanceof PrintDataElement) {            PrintDataElement pde=(PrintDataElement)obj;            if (pde.isID() || pde.isYesNo())             dataElement=pde.getValue(); else             dataElement=pde.getValueDisplay(format.getLanguage());          } else           log.log(Level.SEVERE,"Element not PrintDataElement " + obj.getClass());          data[row][col]=dataElement;        } else         if (item.isTypePrintFormat()) {          m_currPage.addElement(includeFormat(item,printData));        } else {          log.warning("Unsupported: " + (item.isTypeBox() ? "Box" : "PrintFormat") + " in Table: "+ item);        }        col++;      }    }    PrintDataElement pde=printData.getPKey();    if (pde != null) {      pk[row]=(KeyNamePair)pde.getValue();      if (pkColumnName == null)       pkColumnName=pde.getColumnName();    }  }  TableElement table=new TableElement(columnHeader,columnMaxWidth,columnMaxHeight,columnJustification,fixedWidth,functionRows,multiLineHeader,data,pk,pkColumnName,pageNoStart,firstPage,nextPages,repeatedColumns,additionalLines,rowColFont,rowColColor,rowColBackground,tf,pageBreak,colSuppressRepeats);  table.layout(0,0,false,MPrintFormatItem.FIELDALIGNMENTTYPE_LeadingLeft);  if (m_tableElement == null)   m_tableElement=table;  return table;}  }
class C{  private void validateProperties(ResultFileReader reader,Properties properties) throws IOException {  while (reader.hasNext()) {    Assert.assertEquals(properties,reader.next().getProperties());  }}  }
class C{  public static float wallpaperTravelToScreenWidthRatio(int width,int height){  float aspectRatio=width / (float)height;  final float ASPECT_RATIO_LANDSCAPE=16 / 10f;  final float ASPECT_RATIO_PORTRAIT=10 / 16f;  final float WALLPAPER_WIDTH_TO_SCREEN_RATIO_LANDSCAPE=1.5f;  final float WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT=1.2f;  final float x=(WALLPAPER_WIDTH_TO_SCREEN_RATIO_LANDSCAPE - WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT) / (ASPECT_RATIO_LANDSCAPE - ASPECT_RATIO_PORTRAIT);  final float y=WALLPAPER_WIDTH_TO_SCREEN_RATIO_PORTRAIT - x * ASPECT_RATIO_PORTRAIT;  return x * aspectRatio + y;}  }
class C{  public static String encrypt(final String password,String message) throws GeneralSecurityException {  try {    final SecretKeySpec key=generateKey(password);    byte[] cipherText=encrypt(key,ivBytes,message.getBytes(CHARSET));    String encoded=Base64.encodeToString(cipherText,Base64.NO_WRAP);    return encoded;  } catch (  UnsupportedEncodingException e) {    throw new GeneralSecurityException(e);  }}  }
class C{  public MoreLikeThisQueryBuilder analyzer(String analyzer){  this.analyzer=analyzer;  return this;}  }
class C{  public static <S extends HasShowContextMenuHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ShowContextMenuEvent event=new ShowContextMenuEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public static <T>T implement(Class<T> type,Object object){  if (type.isInstance(object)) {    return type.cast(object);  }  return type.cast(Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},new DuckType(object)));}  }
class C{  public void typedEquals() throws IOException {  print("typedEquals",null);}  }
class C{  public static String randomlyRecaseCodePoints(Random random,String str){  StringBuilder builder=new StringBuilder();  int pos=0;  while (pos < str.length()) {    int codePoint=str.codePointAt(pos);    pos+=Character.charCount(codePoint);switch (nextInt(random,0,2)) {case 0:      builder.appendCodePoint(Character.toUpperCase(codePoint));    break;case 1:  builder.appendCodePoint(Character.toLowerCase(codePoint));break;case 2:builder.appendCodePoint(codePoint);}}return builder.toString();}  }
class C{  public void showAndDismiss(Duration dismissDelay){  if (isTrayShowing()) {    dismiss();  } else {    stage.show();    onShown();    animator.playSequential(dismissDelay);  }  onDismissed();}  }
class C{  private void verifyBlockSnapshotMigration() throws Exception {  log.info("Verifying BlockSnapshot migration.");  Iterator<BlockSnapshot> blockSnapshotItr=_dbClient.queryIterativeObjects(BlockSnapshot.class,blockSnapshotURIs);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (blockSnapshotItr.hasNext()) {    blockObjects.add(blockSnapshotItr.next());  }  verifyBlockObjects(blockObjects);}  }
class C{  public void compact(){  ConstPool cp=compact0();  ArrayList list=methods;  int n=list.size();  for (int i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    minfo.compact(cp);  }  list=fields;  n=list.size();  for (int i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    finfo.compact(cp);  }  attributes=AttributeInfo.copyAll(attributes,cp);  constPool=cp;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof ExecPermission))   return false;  Enumeration<Permission> e=permissions.elements();  while (e.hasMoreElements()) {    ExecPermission x=(ExecPermission)e.nextElement();    if (x.implies(permission)) {      return true;    }  }  return false;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","njutcm");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void testTimestampEscapeSequence() throws Exception {  check("'2016-08-26 13:15:08'","{ts '2016-08-26 13:15:08'}");  check("'2016-08-26 13:15:08.123456'","{ts '2016-08-26 13:15:08.123456'}");  check("select '2016-08-26 13:15:08'","select {ts '2016-08-26 13:15:08'}");  check("select '2016-08-26 13:15:08' from table;","select {ts '2016-08-26 13:15:08'} from table;");}  }
class C{  private void recreateAllGCActivityNames(){  allGCActivityNames=new GCActivityNames();  for (  GCTrace trace : this) {    GCActivityNames gcActivityNames=trace.getGCActivityNames();    allGCActivityNames.merge(gcActivityNames);  }}  }
class C{  public static boolean isCodePointPrintable(int codePoint){  if (Character.isISOControl(codePoint))   return false;  int category=Character.getType(codePoint);  return !(category == Character.CONTROL || category == Character.FORMAT || category == Character.UNASSIGNED || category == Character.PRIVATE_USE || category == Character.SURROGATE);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(3);  testEmployee.removeAttribute("class");  attrValue=testEmployee.getAttribute("class");  assertEquals("attrValue","",attrValue);}  }
class C{  private ODGFigure createEnhancedGeometryRectangleFigure(Rectangle2D.Double bounds,Map<AttributeKey,Object> a) throws IOException {  ODGRectFigure figure=new ODGRectFigure();  figure.setBounds(bounds);  figure.setAttributes(a);  return figure;}  }
class C{  public URLConnection openConnection() throws IOException {  return streamHandler.openConnection(this);}  }
class C{  @SuppressWarnings("unused") public boolean isUpdateClusterClientsOnRemove(){  return this.updateClusterClientsOnRemove;}  }
class C{  public ContentManager(XBLOMShadowTreeElement s,XBLManager xm){  shadowTree=s;  xblManager=(DefaultXBLManager)xm;  xblManager.setContentManager(s,this);  boundElement=xblManager.getXblBoundElement(s);  contentElementDomAttrModifiedEventListener=new ContentElementDOMAttrModifiedEventListener();  XBLEventSupport es=(XBLEventSupport)shadowTree.initializeEventSupport();  shadowTreeNodeInsertedListener=new ShadowTreeNodeInsertedListener();  shadowTreeNodeRemovedListener=new ShadowTreeNodeRemovedListener();  shadowTreeSubtreeModifiedListener=new ShadowTreeSubtreeModifiedListener();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",shadowTreeNodeInsertedListener,true);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",shadowTreeNodeRemovedListener,true);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",shadowTreeSubtreeModifiedListener,true);  es=(XBLEventSupport)((AbstractNode)boundElement).initializeEventSupport();  domAttrModifiedEventListener=new DOMAttrModifiedEventListener();  domNodeInsertedEventListener=new DOMNodeInsertedEventListener();  domNodeRemovedEventListener=new DOMNodeRemovedEventListener();  domSubtreeModifiedEventListener=new DOMSubtreeModifiedEventListener();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedEventListener,true);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedEventListener,true);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedEventListener,true);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",domSubtreeModifiedEventListener,false);  update(true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrprevioussiblingnull.class,args);}  }
class C{  protected void applyPatch(State currentState,State patchState){  if (patchState.taskInfo != null) {    if (patchState.taskInfo.stage != currentState.taskInfo.stage || patchState.taskInfo.subStage != currentState.taskInfo.subStage) {      ServiceUtils.logInfo(this,"moving stage to %s:%s",patchState.taskInfo.stage,patchState.taskInfo.subStage);    }    if (patchState.taskInfo.subStage != null) {      adjustStat(patchState.taskInfo.subStage.toString(),1);    }    currentState.taskInfo=patchState.taskInfo;  }  if (patchState.dataStoreCount != null) {    currentState.dataStoreCount=patchState.dataStoreCount;  }  if (patchState.finishedCopies != null) {    currentState.finishedCopies=patchState.finishedCopies;  }  if (patchState.failedOrCanceledCopies != null) {    currentState.failedOrCanceledCopies=patchState.failedOrCanceledCopies;  }}  }
class C{  public Buffer(int initialCapacity){  bytes=new byte[initialCapacity];  length=0;  offset=0;  value=null;}  }
class C{  public static Driver driver(String uri,AuthToken authToken,Config config){  return driver(URI.create(uri),authToken,config);}  }
class C{  private int[] multiply(int[] a,int[] b){  int[] mult1, mult2;  if (computeDegree(a) < computeDegree(b)) {    mult1=b;    mult2=a;  } else {    mult1=a;    mult2=b;  }  mult1=normalForm(mult1);  mult2=normalForm(mult2);  if (mult2.length == 1) {    return multWithElement(mult1,mult2[0]);  }  int d1=mult1.length;  int d2=mult2.length;  int[] result=new int[d1 + d2 - 1];  if (d2 != d1) {    int[] res1=new int[d2];    int[] res2=new int[d1 - d2];    System.arraycopy(mult1,0,res1,0,res1.length);    System.arraycopy(mult1,d2,res2,0,res2.length);    res1=multiply(res1,mult2);    res2=multiply(res2,mult2);    res2=multWithMonomial(res2,d2);    result=add(res1,res2);  } else {    d2=(d1 + 1) >>> 1;    int d=d1 - d2;    int[] firstPartMult1=new int[d2];    int[] firstPartMult2=new int[d2];    int[] secondPartMult1=new int[d];    int[] secondPartMult2=new int[d];    System.arraycopy(mult1,0,firstPartMult1,0,firstPartMult1.length);    System.arraycopy(mult1,d2,secondPartMult1,0,secondPartMult1.length);    System.arraycopy(mult2,0,firstPartMult2,0,firstPartMult2.length);    System.arraycopy(mult2,d2,secondPartMult2,0,secondPartMult2.length);    int[] helpPoly1=add(firstPartMult1,secondPartMult1);    int[] helpPoly2=add(firstPartMult2,secondPartMult2);    int[] res1=multiply(firstPartMult1,firstPartMult2);    int[] res2=multiply(helpPoly1,helpPoly2);    int[] res3=multiply(secondPartMult1,secondPartMult2);    res2=add(res2,res1);    res2=add(res2,res3);    res3=multWithMonomial(res3,d2);    result=add(res2,res3);    result=multWithMonomial(result,d2);    result=add(result,res1);  }  return result;}  }
class C{  protected int index(double val){  byte[] states=_states;  double[] set=_set;  int length=states.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] != FREE && (states[index] == REMOVED || set[index] != val));  }  return states[index] == FREE ? -1 : index;}  }
class C{  @Override public void initialize(ResourceManager rm){  tagger=new POSTagger();}  }
class C{  public static void checkURI(String uri) throws IOException {  try {    URI ur=new URI(uri);    if (ur.getScheme() == null || ur.getRawSchemeSpecificPart().isEmpty()) {      throw new IOException("No scheme or scheme-specific-part in uniformResourceIdentifier: " + uri);    }    if (!ur.isAbsolute()) {      throw new IOException("Relative uniformResourceIdentifier: " + uri);    }  } catch (  URISyntaxException e) {    throw (IOException)new IOException("Bad representation of uniformResourceIdentifier: " + uri).initCause(e);  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public int indexOf(CstType type){  if (type == null) {    throw new NullPointerException("type == null");  }  return indexOf(type.getClassType());}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  int size=timeSeries.size();  double max=timeSeries.getValue(0);  for (int i=1; i < size; i++) {    double next=timeSeries.getValue(i);    if (next > max) {      max=next;    }  }  functionValueMap.add(this,max);}  }
class C{  public void comment(String comment) throws SAXException {  if (m_firstTagNotEmitted && m_firstElementName != null) {    emitFirstTag();  } else   if (m_needToCallStartDocument) {    m_handler.startDocument();    m_needToCallStartDocument=false;  }  m_handler.comment(comment);}  }
class C{  public Boolean isFailoverOnInitialConnection(){  if (ActiveMQResourceAdapter.trace) {    ActiveMQRALogger.LOGGER.trace("isFailoverOnInitialConnection()");  }  return raProperties.isFailoverOnInitialConnection();}  }
class C{  public static OnlineOptimizer<IString,String> configureOptimizer(String optimizerAlg,String[] optimizerFlags,int tuneSetSize,int expectedNumFeatures){  if (optimizerAlg == null)   throw new IllegalArgumentException();switch (optimizerAlg) {case "mira-1best":    return new MIRA1BestHopeFearOptimizer(optimizerFlags);case "pro-sgd":  return new PairwiseRankingOptimizerSGD(tuneSetSize,expectedNumFeatures,optimizerFlags);case "expectedBLEU":return new ExpectedBLEUOptimizer(tuneSetSize,expectedNumFeatures,optimizerFlags);case "crossentropy":return new CrossEntropyOptimizer(tuneSetSize,expectedNumFeatures,optimizerFlags);default :throw new IllegalArgumentException("Unsupported optimizer: " + optimizerAlg);}}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  protected void startStopwatch(){  startTstamp=U.currentTimeMillis();}  }
class C{  protected boolean position(Projection proj){  if (proj == null) {    if (DEBUG) {      logger.fine("OMScalingRaster: null projection in position!");    }    return false;  }  point1=(Point)proj.forward(lat,lon,new Point());  point2=(Point)proj.forward(lat2,lon2,new Point());  corners=null;  if (point1.x > point2.x) {    double[] coords=new double[]{lat,lon,lat,lon2,lat2,lon2,lat2,lon,lat,lon};    if (proj instanceof GeoProj) {      corners=((GeoProj)proj).forwardPoly(ProjMath.arrayDegToRad(coords),OMGraphic.LINETYPE_STRAIGHT,-1,true);    } else {      corners=proj.forwardPoly(coords,true);    }    if (corners != null && corners.size() > 2) {      float[] xs=corners.get(0);      float[] ys=corners.get(1);      point1.setLocation(xs[0],ys[0]);      point2.setLocation(xs[2],ys[2]);    }  }  setNeedToReposition(false);  return true;}  }
class C{  @ZeppelinApi public boolean containsKey(String name){  ResourcePool resourcePool=interpreterContext.getResourcePool();  Resource resource=resourcePool.get(name);  return resource != null;}  }
class C{  public void put(long val,int bytes) throws ArrayIndexOutOfBoundsException {  if (m_index + bytes > m_content.length)   throw new ArrayIndexOutOfBoundsException(m_content.length - m_index + " < " + bytes);  for (int i=0; i < bytes; ++i)   m_content[m_index++]=(byte)(val >> 8 * i);  debugAppendNumber(val,bytes);}  }
class C{  public void throttle(){  if (currentCommandStart == 0) {    currentCommandStart=System.currentTimeMillis();  }  if (throttle == 0) {    return;  }  long time=System.currentTimeMillis();  if (lastThrottle + Constants.THROTTLE_DELAY > time) {    return;  }  lastThrottle=time + throttle;  try {    Thread.sleep(throttle);  } catch (  Exception e) {  }}  }
class C{  public void execute(){  IKnowledge knowledge=(IKnowledge)getParams().get("knowledge",new Knowledge2());  String targetName=getParams().getString("targetName",null);  DataSet dataSet=(DataSet)getDataModelList().get(0);  SemBicScore score=new SemBicScore(new CovarianceMatrixOnTheFly(dataSet));  score.setPenaltyDiscount(getParams().getDouble("alpha",0.001));  FgsMb search=new FgsMb(score);  search.setFaithfulnessAssumed(true);  Graph searchGraph=search.search(dataSet.getVariable(targetName));  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(searchGraph,getSourceGraph());  } else   if (knowledge.isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(searchGraph,knowledge);  } else {    GraphUtils.circleLayout(searchGraph,200,200,150);  }  setResultGraph(searchGraph);}  }
class C{  public static Shape3D createShape3D(double[] data,int realDataIndex,int[] stripCount,Color color,boolean filled){  try {    double[] newData=new double[realDataIndex];    System.arraycopy(data,0,newData,0,realDataIndex);    if (filled) {      return createFilled(newData,stripCount,color);    } else {      return createEdges(newData,color);    }  } catch (  java.lang.IllegalArgumentException iae) {    Debug.error("OMGraphicUtil.createShape3D():  IllegalArgumentException caught: \n" + iae.toString());    StringBuffer sb=new StringBuffer();    for (int i=0; i < stripCount.length; i++) {      sb.append("{" + stripCount[i] + "}");    }    Debug.output("Something funny happened on " + (filled ? "filled" : "edge") + " data["+ data.length+ "], reflecting "+ data.length / 3 + " nodes, with stripCount[" + stripCount.length + "] " + sb.toString());  }  return null;}  }
class C{  private SymmetricalWordAlignment phraseAlignmentToWordAlignmentGrid(RichTranslation<IString,String> translation){  final Featurizable<IString,String> featurizable=translation.getFeaturizable();  SymmetricalWordAlignment alignment=new SymmetricalWordAlignment(featurizable.sourceSentence,translation.translation);  for (Featurizable<IString,String> f=featurizable; f != null; f=f.prior) {    int srcPosition=f.sourcePosition;    int tgtPosition=f.targetPosition;    int tgtLength=f.targetPhrase.size();    int srcLength=f.sourcePhrase.size();    for (int i=0, size=Math.min(srcLength,tgtLength); i < size; ++i) {      final int tgtIndex=tgtPosition + i;      int srcIndex=srcPosition + i;      alignment.addAlign(srcIndex,tgtIndex);    }    if (srcLength < tgtLength) {      final int srcIndex=srcPosition + srcLength - 1;      for (int i=srcLength; i < tgtLength; ++i) {        final int tgtIndex=tgtPosition + i;        alignment.addAlign(srcIndex,tgtIndex);      }    } else {      final int tgtIndex=tgtPosition + tgtLength - 1;      for (int i=tgtLength; i < srcLength; ++i) {        final int srcIndex=srcPosition + i;        alignment.addAlign(srcIndex,tgtIndex);      }    }  }  return alignment;}  }
class C{  public double[][] convertToDoubleMatrix(String input,String meta) throws IOException {  try {    JSONObject jmtd=new JSONObject(meta);    int rows=jmtd.getInt(DataExpression.READROWPARAM);    int cols=jmtd.getInt(DataExpression.READCOLPARAM);    String format=jmtd.getString(DataExpression.FORMAT_TYPE);    if (!(DataExpression.FORMAT_TYPE_VALUE_TEXT.equals(format) || DataExpression.FORMAT_TYPE_VALUE_MATRIXMARKET.equals(format))) {      throw new IOException("Invalid input format (expected: text or mm): " + format);    }    return convertToDoubleMatrix(input,rows,cols);  } catch (  Exception ex) {    throw new IOException(ex);  }}  }
class C{  public static void main(String[] args){  showPanel(new SimpleCLIPanel(),args);}  }
class C{  public void testFileDirectory() throws Exception {  Properties properties=loadProperties("test-file-directory/test-subfolder");  assertEquals("@cargo.servlet.port@",properties.getProperty("cargo.servlet.port"));}  }
class C{  public void remove(MemoryChunk memoryChunk){  if (memoryChunk.previous != null) {    memoryChunk.previous.next=memoryChunk.next;  }  if (memoryChunk.next != null) {    memoryChunk.next.previous=memoryChunk.previous;  }  if (low == memoryChunk) {    low=memoryChunk.next;  }  if (high == memoryChunk) {    high=memoryChunk.previous;  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private static String positionToXml(final long reqTime,final double lng,final double lat,final double alt,final double head,final double speed,final double acc,final String type){  return String.format(POSITION_XML,reqTime,lng,lat,alt,head,speed,acc,type);}  }
class C{  public Matrix4x3d translationRotateScale(Vector3dc translation,Quaterniond quat,Vector3dc scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x,quat.y,quat.z,quat.w,scale.x(),scale.y(),scale.z());}  }
class C{  public void notationDecl(String name,String publicId,String systemId){  getCurrentProcessor().notationDecl(this,name,publicId,systemId);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:22.112 -0500",hash_original_method="05F3A695AC32E3040A89EFF8F81F947F",hash_generated_method="44C4EAF8F805AD8A16BDEAF474184EDB") public void sendMessage(SIPMessage sipMessage) throws IOException {  byte[] msg=sipMessage.encodeAsBytes(this.getTransport());  long time=System.currentTimeMillis();  this.sendMessage(msg,true);  if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES))   logMessage(sipMessage,peerAddress,peerPort,time);}  }
class C{  public boolean existsFdrsInArch(String entidad) throws Exception {  boolean exists=false;  if (_logger.isDebugEnabled())   _logger.debug("existsFdrsInArch");  DbConnection dbConn=new DbConnection();  try {    if (_id == ISicresAdminDefsKeys.NULL_ID)     ISicresAdminBasicException.throwException(ISicresAdminArchiveKeys.EC_ARCH_NO_ID);    dbConn.open(DBSessionManager.getSession());    _tblPrefix="A" + Integer.toString(_id);    exists=existsFdrs(entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return exists;}  }
class C{  public static String convertHTMLCharEntity(String charEntity){  return convertCharEntity(charEntity,true,null);}  }
class C{  public void write(BytesRef term,TermsEnum termsEnum) throws IOException {  postingsEnum=termsEnum.postings(postingsEnum,PostingsEnum.PAYLOADS);  builder.startTerm(term);  int docFreq=0;  while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {    int docID=postingsEnum.docID();    for (int i=0; i < postingsEnum.freq(); i++) {      postingsEnum.nextPosition();      assert postingsEnum.getPayload() != null;      BytesRef payload=postingsEnum.getPayload();      ByteArrayDataInput input=new ByteArrayDataInput(payload.bytes,payload.offset,payload.length);      int len=input.readVInt();      scratch.grow(len);      scratch.setLength(len);      input.readBytes(scratch.bytes(),0,scratch.length());      long weight=input.readVInt() - 1;      maxWeight=Math.max(maxWeight,weight);      minWeight=Math.min(minWeight,weight);      byte type=input.readByte();      if (first) {        this.type=type;        first=false;      } else       if (this.type != type) {        throw new IllegalArgumentException("single field name has mixed types");      }      builder.addEntry(docID,scratch.get(),weight);    }    docFreq++;    docCount=Math.max(docCount,docFreq + 1);  }  builder.finishTerm();}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y){  canvas.drawCircle(x,y,size,paint);}  }
class C{  protected final void CMP_ZERO(Instruction s,Operator op,RegisterOperand def,Operand left,ConditionOperand cond){  if (VM.VerifyAssertions)   VM._assert(!cond.isUNSIGNED());  if (!def.getRegister().spansBasicBlock()) {    def.setRegister(regpool.getPhysicalRegisterSet().asPPC().getTemp());  }  EMIT(MIR_Unary.create(op,def,left));  EMIT(MIR_CondBranch.mutate(s,PPC_BCOND,CR(0),new PowerPCConditionOperand(cond),IfCmp.getTarget(s),IfCmp.getBranchProfile(s)));}  }
class C{  public static void openView(MethodModel inputElement){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  PointsToViewPart view=(PointsToViewPart)activePage.findView(VIEW_ID);  if (view == null) {    try {      view=(PointsToViewPart)activePage.showView(VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  view.setInputElement(inputElement);  activePage.activate(view);}  }
class C{  public boolean isAdditiveNumber(String num){  int n=num.length();  for (int i=1; i <= n / 2; i++) {    if (num.charAt(0) == '0' && i > 1) {      return false;    }    BigInteger num1=new BigInteger(num.substring(0,i));    for (int j=1; Math.max(i,j) <= n - i - j; j++) {      if (num.charAt(i) == '0' && j > 1) {        break;      }      BigInteger num2=new BigInteger(num.substring(i,i + j));      if (isAdditiveNumber(num1,num2,i + j,num)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isJumping(){  if (steps.size() > 0) {    boolean jump=false;    for (    MoveStep step : steps) {      if (step.getType() == MovePath.MoveStepType.START_JUMP) {        jump=true;      }    }    return jump;  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getDXVAName(DShowTVPlayer.getDxvaMpegMode());}  }
class C{  public FullscreenParallaxPage firstParallaxFactor(float factor){  this.firstParallaxFactor=factor;  return this;}  }
class C{  public JSONWriter value(long l) throws JSONException {  return this.append(Long.toString(l));}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public final boolean isNoSelect(){  return noSelect;}  }
class C{  public static Policy yieldPolicy(Thread thread){switch (Harness.policy.policy()) {case FIXED:    int yieldInterval=Harness.yieldInterval.getValue();  if (yieldInterval == 1) {    return new YieldAlways(thread);  }return new YieldEvery(thread,yieldInterval);case RANDOM:return new YieldRandomly(thread,Harness.randomPolicySeed.getValue(),Harness.randomPolicyLength.getValue(),Harness.randomPolicyMin.getValue(),Harness.randomPolicyMax.getValue());case NEVER:return new YieldNever(thread);default :throw new RuntimeException("Unknown scheduler policy");}}  }
class C{  void tick(){  this.counter++;  this.runTick();}  }
class C{  public static Optional<PGPPublicKey> lookupPublicSubkey(PGPPublicKeyRing ring,KeyRequirement want){  @SuppressWarnings("unchecked") Iterator<PGPPublicKey> keys=ring.getPublicKeys();  while (keys.hasNext()) {    PGPPublicKey key=keys.next();switch (want) {case ENCRYPT:      if (key.isEncryptionKey()) {        return Optional.of(key);      }    break;case SIGN:  if (isSigningKey(key)) {    return Optional.of(key);  }break;case ENCRYPT_SIGN:if (key.isEncryptionKey() && isSigningKey(key)) {return Optional.of(key);}break;default :throw new AssertionError();}}return Optional.absent();}  }
class C{  private void addNewLineAtTop(RecyclerView.Recycler recycler){  int x=layoutStartPoint().x, bottom=getDecoratedTop(getChildAt(getMaxHeightLayoutPositionInLine(0))), y;  int height=0;  List<View> lineChildren=new LinkedList<>();  int currentAdapterPosition=0;  int endAdapterPosition=getChildAdapterPosition(0) - 1;  Rect rect=new Rect();  boolean newline;  boolean firstItem=true;  LayoutContext layoutContext=LayoutContext.fromLayoutOptions(flowLayoutOptions);  int firstItemAdapterPosition=getChildAdapterPosition(0);  if (cacheHelper.hasPreviousLineCached(firstItemAdapterPosition)) {    int previousLineIndex=cacheHelper.itemLineIndex(firstItemAdapterPosition) - 1;    Line previousLine=cacheHelper.getLine(previousLineIndex);    int firstNewItemAdapterPosition=cacheHelper.firstItemIndex(previousLineIndex);    for (int i=0; i < previousLine.itemCount; i++) {      View newView=recycler.getViewForPosition(firstNewItemAdapterPosition + i);      addView(newView,i);      lineChildren.add(newView);    }    height=previousLine.maxHeight;  } else {    while (currentAdapterPosition <= endAdapterPosition) {      View newChild=recycler.getViewForPosition(currentAdapterPosition);      newline=calcChildLayoutRect(newChild,x,0,height,layoutContext,rect);      cacheHelper.setItem(currentAdapterPosition,new Point(rect.width(),rect.height()));      addView(newChild,lineChildren.size());      if (newline && !firstItem) {        for (        View viewToRecycle : lineChildren) {          removeAndRecycleView(viewToRecycle,recycler);        }        lineChildren.clear();        x=advanceInSameLine(layoutStartPoint().x,rect,layoutContext);        height=rect.height();        layoutContext.currentLineItemCount=1;      } else {        x=advanceInSameLine(x,rect,layoutContext);        height=Math.max(height,rect.height());        firstItem=false;        layoutContext.currentLineItemCount++;      }      lineChildren.add(newChild);      currentAdapterPosition++;    }  }  x=layoutStartPoint().x;  y=bottom - height;  firstItem=true;  layoutContext=LayoutContext.fromLayoutOptions(flowLayoutOptions);  for (int i=0; i < lineChildren.size(); i++) {    View childView=lineChildren.get(i);    newline=calcChildLayoutRect(childView,x,y,height,layoutContext,rect);    if (newline && firstItem) {      int rectHeight=rect.height();      rect.top-=rectHeight;      rect.bottom-=rectHeight;      firstItem=false;    }    layoutDecorated(childView,rect.left,rect.top,rect.right,rect.bottom);    x=advanceInSameLine(x,rect,layoutContext);  }}  }
class C{  protected void onDaemonDead(){  IDaemonStrategy.Fetcher.fetchStrategy().onDaemonDead();}  }
class C{  public static int compareIntegers(String int1,String int2){  int1=normalizeInteger(int1);  int2=normalizeInteger(int2);  return compareCanonicalIntegers(int1,int2);}  }
class C{  public void testBug33594() throws Exception {  if (!versionMeetsMinimum(5,0,7)) {    return;  }  boolean max_key_l_bug=false;  try {    createTable("bug33594","(fid varchar(255) not null primary key, id INT, geom linestring, name varchar(255))");  } catch (  SQLException sqlEx) {    if (sqlEx.getMessage().indexOf("max key length") != -1) {      createTable("bug33594","(fid varchar(180) not null primary key, id INT, geom linestring, name varchar(255))");      max_key_l_bug=true;    }  }  Properties props=new Properties();  props.put("useInformationSchema","false");  props.put("useCursorFetch","false");  props.put("defaultFetchSize","100");  Connection conn1=null;  try {    conn1=getConnectionWithProps(props);    DatabaseMetaData metaData=conn1.getMetaData();    this.rs=metaData.getColumns(null,null,"bug33594",null);    this.rs.next();    assertEquals("bug33594",this.rs.getString("TABLE_NAME"));    assertEquals("fid",this.rs.getString("COLUMN_NAME"));    assertEquals("VARCHAR",this.rs.getString("TYPE_NAME"));    if (!max_key_l_bug) {      assertEquals("255",this.rs.getString("COLUMN_SIZE"));    } else {      assertEquals("180",this.rs.getString("COLUMN_SIZE"));    }    Properties props2=new Properties();    props2.put("useInformationSchema","false");    props2.put("useCursorFetch","true");    props2.put("defaultFetchSize","100");    Connection conn2=null;    try {      conn2=getConnectionWithProps(props2);      DatabaseMetaData metaData2=conn2.getMetaData();      this.rs=metaData2.getColumns(null,null,"bug33594",null);      this.rs.next();      assertEquals("bug33594",this.rs.getString("TABLE_NAME"));      assertEquals("fid",this.rs.getString("COLUMN_NAME"));      assertEquals("VARCHAR",this.rs.getString("TYPE_NAME"));      if (!max_key_l_bug) {        assertEquals("255",this.rs.getString("COLUMN_SIZE"));      } else {        assertEquals("180",this.rs.getString("COLUMN_SIZE"));      }      assertEquals("1",getSingleIndexedValueWithQuery(conn2,2,"SHOW SESSION STATUS LIKE 'Com_stmt_prepare'").toString());    }  finally {      if (conn2 != null) {        conn2.close();      }    }  }  finally {    if (conn1 != null) {      conn1.close();    }  }}  }
class C{  protected boolean isSelectableInteraction(){  return false;}  }
class C{  private void removeButtonActionPerformed(){  if (!isEnabled() || (profiles.profiles.size() == 0)) {    return;  }  setEnabled(false);  Profile profile;  profile=(Profile)profilesComboBox.getSelectedItem();  Object[] options={"Remove","Cancel"};  Integer confirmRemoveProfile=JOptionPane.showOptionDialog(this,"This will permanently remove a user profile from your local list of accounts.\n" + "It will not delete an account on any servers.\n" + "Are you sure you want to remove \'" + profile.getUser() + "@"+ profile.getHost()+ "\' profile?","Remove user profile from local list of accounts",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[1]);  if (confirmRemoveProfile == 0) {    profiles.remove(profile);    saveProfiles(profiles);    profiles=loadProfiles();    populateProfiles(profiles);  }  setEnabled(true);}  }
class C{  public DepartmentExample(DepartmentObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getName() != null) {    criteria.andNameEqualTo(sample.getName());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getCustomOrder() != null) {    criteria.andCustomOrderEqualTo(sample.getCustomOrder());  }}  }
class C{  private void encodeFullRevisionUncompressed(final DiffPart part) throws UnsupportedEncodingException, EncodingException {  data.writeBit(0);  data.writeBit(0);  data.writeBit(1);  String text=part.getText();  byte[] bText=text.getBytes(WIKIPEDIA_ENCODING);  data.writeValue(codecData.getBlocksizeL(),bText.length);  data.write(bText);}  }
class C{  public static boolean isFloat(ClassNode type){  return float_TYPE == type;}  }
class C{  public static float dpToPx(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public void open(String fileName) throws IOException {  table.open(fileName);}  }
class C{  public boolean removeAll() throws IOException {  return getWrappedPath().removeAll();}  }
class C{  public DebuggerTemplate(final int debuggerId,final String name,final String host,final int port,final SQLProvider sqlProvider){  Preconditions.checkArgument(debuggerId > 0,"IE00796: ID argument must be positive");  debuggerTemplateName=Preconditions.checkNotNull(name,"IE00797: Name argument can not be null");  debugClientHost=Preconditions.checkNotNull(host,"IE00798: Host argument can not be null");  Preconditions.checkArgument(NetHelpers.isValidPort(port),"IE00799: Invalid port argument");  this.sqlProvider=Preconditions.checkNotNull(sqlProvider,"IE00800: SQL provider argument can not be null");  debuggerTemplateId=debuggerId;  debugClientPort=port;}  }
class C{  public long findLeafAddr(final byte[] key){  if (key == null)   throw new IllegalArgumentException();  assert rangeCheck(key,true);  final int height=getStore().getCheckpoint().height;  if (height == 0) {    return getStore().getCheckpoint().addrRoot;  }  final IndexSegmentAddressManager am=getStore().getAddressManager();  AbstractNode<?> node=getRootOrFinger(key);  int i=0;  while (true) {    final int childIndex=((Node)node).findChild(key);    final long childAddr=((Node)node).getChildAddr(childIndex);    if (am.isLeafAddr(childAddr)) {      return childAddr;    }    node=(Node)((Node)node).getChild(childIndex);    i++;    assert i <= height : "Exceeded tree height";  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public GmlPoint(){}  }
class C{  private Geometry doManualTransformation(Geometry geometry){  for (  Coordinate coordinate : geometry.getCoordinates()) {    coordinate.x=targetBBOX.getMinX() + ((coordinate.x - sourceBBOX.getMinX()) * xScale);    coordinate.y=targetBBOX.getMinY() + (targetBBOX.getHeight() - ((coordinate.y - sourceBBOX.getMinY()) * yScale));  }  return geometry;}  }
class C{  static void removeLogicalDuplicates(SortedSet<String> packages){  Iterator<String> iterator=packages.iterator();  if (!iterator.hasNext()) {    return;  }  String last=iterator.next();  while (iterator.hasNext()) {    String current=iterator.next();    if (current.startsWith(last)) {      iterator.remove();    } else {      last=current;    }  }}  }
class C{  public Router createRouter(){  RouterImpl router=new RouterImpl();  return router;}  }
class C{  public static Range<Byte> valueOfByte(String str){  return Range.valueOf(str,null);}  }
class C{  public void expandPath(TreePath path){  TreeModel model=getModel();  if (path != null && model != null && !model.isLeaf(path.getLastPathComponent())) {    setExpandedState(path,true);  }}  }
class C{  @Override public int hashCode(){  return time.hashCode() ^ offset.hashCode();}  }
class C{  public MLOutput execute(String dmlScriptFilePath,scala.collection.immutable.Map<String,String> namedArgs,boolean parsePyDML) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,new HashMap<String,String>(scala.collection.JavaConversions.mapAsJavaMap(namedArgs)),parsePyDML);}  }
class C{  public static List<Action> failure(){  return Collections.emptyList();}  }
class C{  public String readLine(final String charset) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.readLine()");  assertOpen();  return HttpParser.readLine(inputStream,charset);}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer("MField[");  sb.append(m_vo.ColumnName).append("=").append(m_value).append(",DisplayType=").append(getDisplayType()).append("]");  return sb.toString();}  }
class C{  @Override public byte[] toByteArray() throws IOException {  ByteBuffer bb=ByteBuffer.wrap(new byte[4 * 8]).order(ByteOrder.BIG_ENDIAN);  bb.putLong(instanceModulus);  bb.putLong(instanceRemainder);  bb.putLong(threadModulus);  bb.putLong(threadRemainder);  return bb.array();}  }
class C{  public MinLengthValidator(@NonNull final CharSequence errorMessage,final int minLength){  super(errorMessage);  setMinLength(minLength);}  }
class C{  public void testBug75956() throws Exception {  createTable("bug75956","(id int not null primary key auto_increment, dt1 datetime, dt2 datetime)");  Connection sspsConn=getConnectionWithProps("useCursorFetch=true,useLegacyDatetimeCode=false");  this.pstmt=sspsConn.prepareStatement("insert into bug75956 (dt1, dt2) values (?, ?)");  this.pstmt.setTimestamp(1,new Timestamp(System.currentTimeMillis()));  this.pstmt.setTimestamp(2,new Timestamp(System.currentTimeMillis()));  this.pstmt.addBatch();  this.pstmt.clearParameters();  this.pstmt.setTimestamp(1,new Timestamp(System.currentTimeMillis()));  this.pstmt.setTimestamp(2,null);  this.pstmt.addBatch();  this.pstmt.setTimestamp(1,new Timestamp(System.currentTimeMillis()));  this.pstmt.setTimestamp(2,new Timestamp(System.currentTimeMillis()));  this.pstmt.addBatch();  this.pstmt.executeBatch();  this.pstmt.close();  this.rs=sspsConn.createStatement().executeQuery("select count(*) from bug75956 where dt2 is NULL");  this.rs.next();  assertEquals(1,this.rs.getInt(1));  sspsConn.close();}  }
class C{  @PATCH @Path("{path:.*}") @Consumes("application/vnd.api+json") public Response patch(@HeaderParam("Content-Type") String contentType,@HeaderParam("accept") String accept,@PathParam("path") String path,@Context SecurityContext securityContext,String jsonapiDocument){  return build(elide.patch(contentType,accept,path,jsonapiDocument,getUser.apply(securityContext)));}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  protected void clearEvents(){  for (int i=0; i < timeEvents.length; i++) {    timeEvents[i]=false;  }}  }
class C{  public static double AHfitness(boolean useTrainingData,GEPIndividual ind,double precision[]){  if (precision.length != 1)   System.err.println("Warning: 2nd arg to AHfitness method expected to have 1 double value (precision) but has " + precision.length);  double AH=AHrawFitness(useTrainingData,ind,0,precision[0]);  return (AH);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TYPE___IS_PROVIDED_BY_RUNTIME:    return isProvidedByRuntime();case TypesPackage.TYPE___IS_POLYFILL:  return isPolyfill();case TypesPackage.TYPE___IS_STATIC_POLYFILL:return isStaticPolyfill();case TypesPackage.TYPE___IS_FINAL:return isFinal();case TypesPackage.TYPE___IS_DYNAMIZABLE:return isDynamizable();case TypesPackage.TYPE___IS_ARRAY_LIKE:return isArrayLike();case TypesPackage.TYPE___GET_ELEMENT_TYPE:return getElementType();case TypesPackage.TYPE___GET_TYPE_ACCESS_MODIFIER:return getTypeAccessModifier();case TypesPackage.TYPE___IS_GENERIC:return isGeneric();case TypesPackage.TYPE___GET_TYPE_VARS:return getTypeVars();case TypesPackage.TYPE___GET_VARIANCE_OF_TYPE_VAR__INT:return getVarianceOfTypeVar((Integer)arguments.get(0));case TypesPackage.TYPE___GET_RAW_TYPE_AS_STRING:return getRawTypeAsString();case TypesPackage.TYPE___GET_TYPE_AS_STRING:return getTypeAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public UserPrincipal(String name){  if (name == null) {    throw new NullPointerException("null name is illegal");  }  this.name=name;}  }
class C{  private boolean containsSamtTopicsOnly(ControlGroup group){  if (group.getChildren().size() == 0) {    return false;  }  for (  CnATreeElement child : group.getChildren()) {    if (!(child instanceof SamtTopic)) {      return false;    }  }  return true;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     p_AD_Client_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_Workflow_ID"))     p_AD_Workflow_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public <T extends B>T putInstance(Class<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public static String forceCharset(String text,String charset){  String result=text;  try {    result=new String(text.getBytes(charset));  } catch (  UnsupportedEncodingException e) {    logger.error(e.getMessage(),e);  }  return result;}  }
class C{  public void testUnsizedLongsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.longs().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  @LayoutlibDelegate static long elapsedRealtimeNanos(){  return System.nanoTime() - sBootTimeNano;}  }
class C{  private void print(String displayValue,JspWriter out) throws JspException {  try {    if (maxLength != -1 && displayValue.length() > maxLength) {      String newValue;      if (ellipsisRight) {        newValue=displayValue.substring(0,maxLength - 3) + "...";      } else {        newValue="..." + displayValue.substring(displayValue.length() - maxLength + 3);      }      String title=StringEscapeUtils.escapeHtml4(displayValue);      out.print("<span title=\"" + title + "\">"+ newValue+ "</span>");    } else {      out.print(displayValue);    }  } catch (  IOException e) {    throw new JspException(e);  }}  }
class C{  protected void activateLink(final HyperlinkEvent ev){  String text;  final URL url=ev.getURL();  if (url != null) {    if (url.getProtocol().equals("say")) {      text=url.getPath();      try {        text=URLDecoder.decode(text,"UTF-8");      } catch (      final UnsupportedEncodingException ex) {      }    } else {      getToolkit().beep();      return;    }  } else {    text=ev.getDescription();    if (text.startsWith("say:")) {      text=text.substring(4);      try {        text=URLDecoder.decode(text,"UTF-8");      } catch (      final UnsupportedEncodingException ex) {      }    }  }  final RPAction rpaction=new RPAction();  rpaction.put("type","chat");  rpaction.put("text",text);  StendhalClient.get().send(rpaction);}  }
class C{  public FieldOption(String value,String title){  this.value=value;  this.title=title;}  }
class C{  private void resetConsumer(@Nullable final Consumer<String> newConsumer){synchronized (myConsumerSemaphore) {    myCurrentConsumer=newConsumer;  }}  }
class C{  public CatalogPreferencesRestRep updatePreferences(CatalogPreferencesUpdateParam input){  UriBuilder builder=client.uriBuilder(PathConstants.CATALOG_PREFERENCES);  return client.putURI(CatalogPreferencesRestRep.class,input,builder.build());}  }
class C{  public boolean match(ExpressionStatement node,Object other){  if (!(other instanceof ExpressionStatement)) {    return false;  }  ExpressionStatement o=(ExpressionStatement)other;  return safeSubtreeMatch(node.getExpression(),o.getExpression());}  }
class C{  public void closeContacts(final EvolutionState state,final int result){  return;}  }
class C{  private void addNextState(TLCState s,long fp,BTGraphNode node,OrderOfSolution os,BEGraph bgraph){  TBGraphNode tnode=node.getTNode(os.getTableau());  int slen=os.getCheckState().length;  int alen=os.getCheckAction().length;  boolean[] checkStateRes=null;  boolean[] checkActionRes=null;  for (int i=0; i < actions.length; i++) {    Action curAction=actions[i];    StateVec nextStates=myTool.getNextStates(curAction,s);    for (int j=0; j < nextStates.size(); j++) {      TLCState s1=nextStates.elementAt(j);      long fp1=s1.fingerPrint();      boolean[] checkActionRes1=null;      for (int k=0; k < tnode.nextSize(); k++) {        TBGraphNode tnode1=tnode.nextAt(k);        BTGraphNode destNode=bgraph.allNodes.getBTNode(fp1,tnode1.getIndex());        if (destNode == null) {          if (tnode1.isConsistent(s1,myTool)) {            destNode=new BTGraphNode(fp1,tnode1.getIndex());            if (checkStateRes == null) {              checkStateRes=os.checkState(s1);            }            if (checkActionRes == null) {              checkActionRes=os.checkAction(s,s1);            }            destNode.setCheckState(checkStateRes);            node.addTransition(destNode,slen,alen,checkActionRes);            if (checkActionRes1 == null) {              checkActionRes1=os.checkAction(s1,s1);            }            addNodesForStut(s1,fp1,destNode,checkStateRes,checkActionRes1,os,bgraph);            int idx=bgraph.allNodes.putBTNode(destNode);            if (bgraph.allNodes.isDone(idx)) {              addNextState(s1,fp1,destNode,os,bgraph);            }          }        } else         if (!node.transExists(destNode)) {          if (checkActionRes == null) {            checkActionRes=os.checkAction(s,s1);          }          node.addTransition(destNode,slen,alen,checkActionRes);        }      }    }  }}  }
class C{  private void sendRecvAndCompareProps(TungstenProperties props) throws IOException, FileNotFoundException {  TungstenProperties propsReceived=sendRecvOverPipedIO(props);  Assert.assertEquals("Received properties differ from sent ones using PipedIOs",props,propsReceived);  propsReceived=sendRecvOverFile(props);  Assert.assertEquals("Received properties differ from sent ones using file",props,propsReceived);}  }
class C{  public void process() throws MessagingException {  if (getLogger().isDebugEnabled()) {    StringBuilder logMessageBuffer=new StringBuilder("Attempting delivery of message with id. ");    logMessageBuffer.append(getMessageIn().getMessageID());    getLogger().debug(logMessageBuffer.toString());  }  MailAddress intendedRecipient=getIntendedRecipient();  setRecipientNotFound(null == intendedRecipient);  if (isRecipientNotFound()) {    if (isDeferRecipientNotFound()) {      String messageID=getMessageIn().getMessageID();      if (!getDeferredRecipientNotFoundMessageIDs().contains(messageID)) {        getDeferredRecipientNotFoundMessageIDs().add(messageID);        if (getLogger().isDebugEnabled()) {          StringBuilder messageBuffer=new StringBuilder("Deferred processing of message for which the intended recipient could not be found. Message ID: ");          messageBuffer.append(messageID);          getLogger().debug(messageBuffer.toString());        }        return;      } else {        getDeferredRecipientNotFoundMessageIDs().remove(messageID);        if (getLogger().isDebugEnabled()) {          StringBuilder messageBuffer=new StringBuilder("Processing deferred message for which the intended recipient could not be found. Message ID: ");          messageBuffer.append(messageID);          getLogger().debug(messageBuffer.toString());        }      }    }    if (isRejectRecipientNotFound()) {      rejectRecipientNotFound();      return;    }    intendedRecipient=getRecipient();    StringBuilder messageBuffer=new StringBuilder("Intended recipient not found. Using configured recipient as new envelope recipient - ");    messageBuffer.append(intendedRecipient);    messageBuffer.append('.');    logStatusInfo(messageBuffer.toString());  }  setBlacklistedRecipient(isBlacklistedRecipient(intendedRecipient));  setRemoteRecipient(!isLocalServer(intendedRecipient));  try {    setUserUndefined(!isLocalRecipient(intendedRecipient));  } catch (  UsersRepositoryException e) {    throw new MessagingException("Unable to access USersRepository",e);  }  if (isRejectBlacklisted() && isBlacklistedRecipient()) {    rejectBlacklistedRecipient(intendedRecipient);    return;  }  if (isRejectRemoteRecipient() && isRemoteRecipient()) {    rejectRemoteRecipient(intendedRecipient);    return;  }  if (isRejectUserUndefined() && isUserUndefined()) {    rejectUserUndefined(intendedRecipient);    return;  }  if (isRejectMaxMessageSizeExceeded() && isMaxMessageSizeExceeded()) {    rejectMaxMessageSizeExceeded(getMessageIn().getSize());    return;  }  if (isRejectRemoteReceivedHeaderInvalid() && isRemoteReceivedHeaderInvalid()) {    rejectRemoteReceivedHeaderInvalid();    return;  }  Mail mail;  try {    mail=createMail(createMessage(),intendedRecipient);  } catch (  ParseException ex) {    handleParseException(ex);    return;  }catch (  UnknownHostException ex) {    handleUnknownHostException(ex);    return;  }  addMailAttributes(mail);  addErrorMessages(mail);  if (isBouncing()) {    handleBouncing(mail);    return;  }  sendMail(mail);}  }
class C{  public FiveRegisterDecodedInstruction(InstructionCodec format,int opcode,int index,IndexType indexType,int target,long literal,int a,int b,int c,int d,int e){  super(format,opcode,index,indexType,target,literal);  this.a=a;  this.b=b;  this.c=c;  this.d=d;  this.e=e;}  }
class C{  private final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void forgetOldModel(){  this.oldModel=null;}  }
class C{  public static void writeFile(InputStream inStream,OutputStream outStream) throws IOException {  try {    byte[] buf=new byte[BUFF_SIZE];    int len=inStream.read(buf);    while (len > 0) {      outStream.write(buf,0,len);      len=inStream.read(buf);    }  }  finally {    if (inStream != null) {      inStream.close();    }    if (outStream != null) {      outStream.close();    }  }}  }
class C{  private Document loadCruxPage(InputStream file,String filename,String device){  try {    Document document=documentBuilder.parse(file);    return preprocess(document,device);  } catch (  Exception e) {    log.error("Error parsing file: [" + filename + "] for DeviceAdaptive interface ["+ device+ "]: "+ e.getMessage(),e);    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public ASTFunNode(int id){  super(id);}  }
class C{  public static boolean isUsageACL(String acl){  return (acl.equalsIgnoreCase(ACL.USE.toString()));}  }
class C{  public MInvoice(MInvoiceBatch batch,MInvoiceBatchLine line){  this(line.getCtx(),0,line.get_TrxName());  setClientOrg(line);  setDocumentNo(line.getDocumentNo());  setIsSOTrx(batch.isSOTrx());  MBPartner bp=new MBPartner(line.getCtx(),line.getC_BPartner_ID(),line.get_TrxName());  setBPartner(bp);  setIsTaxIncluded(line.isTaxIncluded());  setC_Currency_ID(batch.getC_Currency_ID());  setC_ConversionType_ID(batch.getC_ConversionType_ID());  setDescription(batch.getDescription());  setAD_OrgTrx_ID(line.getAD_OrgTrx_ID());  setC_Project_ID(line.getC_Project_ID());  setC_Activity_ID(line.getC_Activity_ID());  setUser1_ID(line.getUser1_ID());  setUser2_ID(line.getUser2_ID());  setC_DocTypeTarget_ID(line.getC_DocType_ID());  setDateInvoiced(line.getDateInvoiced());  setDateAcct(line.getDateAcct());  setSalesRep_ID(batch.getSalesRep_ID());  setC_BPartner_ID(line.getC_BPartner_ID());  setC_BPartner_Location_ID(line.getC_BPartner_Location_ID());  setAD_User_ID(line.getAD_User_ID());}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public <U>Exceptional<U> map(ThrowableFunction<? super T,? extends U,Throwable> mapper){  if (throwable != null) {    return new Exceptional<U>(null,throwable);  }  Objects.requireNonNull(mapper);  try {    return new Exceptional<U>(mapper.apply(value),null);  } catch (  Throwable t) {    return new Exceptional<U>(null,t);  }}  }
class C{  public long skipBytes(long n) throws IOException {  return inputReader.skipBytes(n);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected final void startElement(CharArray uri,CharArray localName,CharArray qName,org.xml.sax.Attributes atts) throws SAXException {  throw new UnsupportedOperationException();}  }
class C{  public OrganizationAuthoritiesException(){  super();}  }
class C{  public ContentLengthInputStream(final SessionInputBuffer in,long contentLength){  super();  if (in == null) {    throw new IllegalArgumentException("Input stream may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.in=in;  this.contentLength=contentLength;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.QUANTIFIER__NON_GREEDY:    return isNonGreedy();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private TemplateBuffer parse(String string) throws TemplateException {  fErrorMessage=null;  final StringBuffer buffer=new StringBuffer(string.length());  final Matcher matcher=ESCAPE_PATTERN.matcher(string);  final Map variables=new LinkedHashMap();  int complete=0;  while (matcher.find()) {    buffer.append(string.substring(complete,matcher.start()));    if ("$".equals(matcher.group())) {      fail("Template has incomplete variables. Type '$$' to enter the dollar character.");    } else     if ("$$".equals(matcher.group())) {      buffer.append('$');    } else {      String name=matcher.group(1);      String typeName=matcher.group(2);      String params=matcher.group(3);      TemplateVariableType type=createType(typeName,params);      updateOrCreateVariable(variables,name,type,buffer.length());      buffer.append(name);    }    complete=matcher.end();  }  buffer.append(string.substring(complete));  TemplateVariable[] vars=createVariables(variables);  return new TemplateBuffer(buffer.toString(),vars);}  }
class C{  public SafeAsyncTask(){  this.executor=DEFAULT_EXECUTOR;}  }
class C{  public final synchronized void shutdownEngine(){  if (uciEngine != null) {    engineMonitor.interrupt();    engineMonitor=null;    uciEngine.shutDown();    uciEngine=null;  }  engineState.setState(MainState.DEAD);}  }
class C{  public static void solve(TSPInstance instance){  TSPPanel panel=new TSPPanel(instance);  panel.setAutoRepaint(false);  StringBuilder progress=new StringBuilder();  JTextArea progressText=new JTextArea();  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);  splitPane.setTopComponent(panel);  splitPane.setBottomComponent(new JScrollPane(progressText));  splitPane.setDividerLocation(300);  splitPane.setResizeWeight(1.0);  JFrame frame=new JFrame(instance.getName());  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(splitPane,BorderLayout.CENTER);  frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  frame.setSize(500,400);  frame.setLocationRelativeTo(null);  frame.setIconImages(Settings.getIconImages());  frame.setVisible(true);  Problem problem=new TSPProblem(instance);  Properties properties=new Properties();  properties.setProperty("swap.rate","0.7");  properties.setProperty("insertion.rate","0.9");  properties.setProperty("pmx.rate","0.4");  Algorithm algorithm=AlgorithmFactory.getInstance().getAlgorithm("NSGAII",properties,problem);  int iteration=0;  while (frame.isVisible()) {    algorithm.step();    iteration++;    panel.clearTours();    if (algorithm instanceof EvolutionaryAlgorithm) {      EvolutionaryAlgorithm ea=(EvolutionaryAlgorithm)algorithm;      for (      Solution solution : ea.getPopulation()) {        panel.displayTour(toTour(solution),lightGray);      }    }    Tour best=toTour(algorithm.getResult().get(0));    panel.displayTour(best,Color.RED,new BasicStroke(2.0f));    progress.insert(0,"Iteration " + iteration + ": "+ best.distance(instance)+ "\n");    progressText.setText(progress.toString());    panel.repaint();  }}  }
class C{  public ClockPane(int hour,int minute,int second){  this.hour=hour;  this.minute=minute;  this.second=second;  paintClock();  animation=new Timeline(new KeyFrame(Duration.millis(1000),null));  animation.setCycleCount(Timeline.INDEFINITE);  animation.play();}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public FunctionException(String msg){  super(msg);}  }
class C{  public double npv(final Leg cashflows,final Handle<YieldTermStructure> discountCurve,final Date settlementDate,final Date npvDate,final int exDividendDays){  Date date=settlementDate;  if (date.isNull()) {    date=discountCurve.currentLink().referenceDate();  }  double totalNPV=0.0;  for (int i=0; i < cashflows.size(); ++i) {    if (!cashflows.get(i).hasOccurred(date.add(exDividendDays))) {      totalNPV+=cashflows.get(i).amount() * discountCurve.currentLink().discount(cashflows.get(i).date());    }  }  if (npvDate.isNull())   return totalNPV; else   return totalNPV / discountCurve.currentLink().discount(npvDate);}  }
class C{  public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport){  return addMessageToUri(resolver,uri,address,body,subject,date,read,deliveryReport,-1L);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.767 -0400",hash_original_method="45A7DB6D0E51F61500372E7D66178EF3",hash_generated_method="CC299A24F1B408C9BA22030D92327A98") @Override public boolean accept(File file,String name){  for (  String prefix : prefixes) {    if (caseSensitivity.checkStartsWith(name,prefix)) {      return true;    }  }  return false;}  }
class C{  public void addParameterContentData(ParameterContentData parameterContent){  if (null == parameterContentData) {    parameterContentData=new HashSet<ParameterContentData>();  }  parameterContentData.add(parameterContent);}  }
class C{  protected void onFieldBits(final Object obj,final Field field,final Bin annotation,final JBBPBitNumber bitNumber,final int value){}  }
class C{  @SuppressWarnings("unchecked") public <T>T read(String localName,String uri) throws XMLStreamException {  return (T)_xml.get(localName,uri);}  }
class C{  public T caseTMethod(TMethod object){  return null;}  }
class C{  final public MutableString replace(final char c,final MutableString s){  final int length=length();  char[] a=array;  int i, j, l, newLength=length;  if (s.length() == 0)   throw new IllegalArgumentException("You cannot use the empty string as a replacement");  i=length;  boolean found=false;  while (i-- != 0)   if (a[i] == c) {    newLength+=s.length() - 1;    found=true;  }  if (!found)   return this;  expand(newLength);  a=array;  i=newLength;  j=length;  while (j-- != 0) {    if (a[j] == c) {      l=s.length();      System.arraycopy(s.array,0,a,i-=l,l);    } else     a[--i]=a[j];  }  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public void cancelBySign(Object sign){synchronized (mUnFinishQueue) {    for (    DownloadRequest downloadRequest : mUnFinishQueue)     downloadRequest.cancelBySign(sign);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{taskId}/rollback") @CheckPermission(roles={Role.TENANT_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},acls={ACL.OWN,ACL.ALL}) public Response rollbackTask(@PathParam("taskId") URI taskId){  Task task=queryResource(taskId);  if (task.getTenant().equals(TenantOrg.SYSTEM_TENANT)) {    verifySystemAdmin();  } else {    verifyUserHasAccessToTenants(Lists.newArrayList(task.getTenant()));  }  Workflow workflow=validateWorkflow(task);  String opId=UUID.randomUUID().toString();  WorkflowService.initTaskStatus(_dbClient,workflow,opId,Operation.Status.pending,ResourceOperationTypeEnum.WORKFLOW_ROLLBACK);  getWorkflowController().rollbackWorkflow(workflow.getId(),taskId.toString());  return Response.ok().build();}  }
class C{  public static Supply fromValue(final long value){  return new Supply(value);}  }
class C{  public void testDbLevelJavaObjectSerializer() throws Exception {  DbLevelJavaObjectSerializer.testBaseRef=this;  try {    deleteDb("javaSerializer");    Connection conn=getConnection("javaSerializer");    conn.createStatement().execute("SET JAVA_OBJECT_SERIALIZER '" + DbLevelJavaObjectSerializer.class.getName() + "'");    Statement stat=conn.createStatement();    stat.execute("create table t1(id identity, val other)");    PreparedStatement ins=conn.prepareStatement("insert into t1(val) values(?)");    ins.setObject(1,100500,Types.JAVA_OBJECT);    assertEquals(1,ins.executeUpdate());    Statement s=conn.createStatement();    ResultSet rs=s.executeQuery("select val from t1");    assertTrue(rs.next());    assertEquals(100500,((Integer)rs.getObject(1)).intValue());    assertEquals(new byte[]{1,2,3},rs.getBytes(1));    conn.close();    deleteDb("javaSerializer");  }  finally {    DbLevelJavaObjectSerializer.testBaseRef=null;  }}  }
class C{  public boolean isReference(){  return true;}  }
class C{  public StorageEntity createStorageEntity(String storageName,String storagePlatformCode,String attributeName,String attributeValue){  List<Attribute> attributes=new ArrayList<>();  attributes.add(new Attribute(attributeName,attributeValue));  return createStorageEntity(storageName,storagePlatformCode,attributes);}  }
class C{  private KeyNavigationUtil(){}  }
class C{  @Override public T selectPlan(final HasPlansAndId<T,I> person){  int cntUnscored=0;  for (  T plan : person.getPlans()) {    if (plan.getScore() == null) {      cntUnscored++;    }  }  if (cntUnscored > 0) {    int idxUnscored=MatsimRandom.getRandom().nextInt(cntUnscored);    cntUnscored=0;    for (    T plan : person.getPlans()) {      if (plan.getScore() == null) {        if (cntUnscored == idxUnscored) {          return plan;        }        cntUnscored++;      }    }  }  return null;}  }
class C{  void doGrapple(){  if (((Mech)ce()).getGrappled() == Entity.NONE) {    grapple(false);  } else {    breakGrapple();  }}  }
class C{  public void organizeArticle(final JSONObject article) throws RepositoryException {  toArticleDate(article);  genArticleAuthor(article);  String title=article.optString(Article.ARTICLE_TITLE).replace("<","&lt;").replace(">","&gt;");  title=Markdowns.clean(title,"");  article.put(Article.ARTICLE_TITLE,title);  article.put(Article.ARTICLE_T_TITLE_EMOJI,Emotions.convert(title));  if (Article.ARTICLE_STATUS_C_INVALID == article.optInt(Article.ARTICLE_STATUS)) {    article.put(Article.ARTICLE_TITLE,langPropsService.get("articleTitleBlockLabel"));    article.put(Article.ARTICLE_T_TITLE_EMOJI,langPropsService.get("articleTitleBlockLabel"));    article.put(Article.ARTICLE_CONTENT,langPropsService.get("articleContentBlockLabel"));  }  final String articleId=article.optString(Keys.OBJECT_ID);  Integer viewingCnt=ArticleChannel.ARTICLE_VIEWS.get(articleId);  if (null == viewingCnt) {    viewingCnt=0;  }  article.put(Article.ARTICLE_T_HEAT,viewingCnt);  final int viewCnt=article.optInt(Article.ARTICLE_VIEW_CNT);  final double views=(double)viewCnt / 1000;  if (views >= 1) {    final DecimalFormat df=new DecimalFormat("#.#");    article.put(Article.ARTICLE_T_VIEW_CNT_DISPLAY_FORMAT,df.format(views) + "K");  }}  }
class C{  public void writeFeatures(PrintWriter fout) throws IOException {  fout.println(Integer.toString(features.size()));  for (int i=0; i < features.size(); i++) {    Feature f=(Feature)features.get(i);    fout.println(f.toString(data.cpInt2Str,data.lbInt2Str));  }  fout.println(Option.modelSeparator);}  }
class C{  @Override protected void optimizeJoinGroup(final AST2BOpContext ctx,final StaticAnalysis sa,final IBindingSet[] bSets,final JoinGroupNode group){  boolean rangeSafe=false;  for (  IQueryNode node : group) {    if (!(node instanceof StatementPatternNode))     continue;    final StatementPatternNode sp=(StatementPatternNode)node;    rangeSafe|=sp.getQueryHintAsBoolean(QueryHints.RANGE_SAFE,false);  }  if (!rangeSafe)   return;  final Map<VarNode,RangeNode> ranges=new LinkedHashMap<VarNode,RangeNode>();  for (  IQueryNode node : group) {    if (!(node instanceof FilterNode))     continue;    final FilterNode filter=(FilterNode)node;    if (log.isDebugEnabled())     log.debug(filter);    if (!(filter.getValueExpressionNode() instanceof FunctionNode))     continue;    final FunctionNode function=(FunctionNode)filter.getValueExpressionNode();    if (log.isDebugEnabled())     log.debug(function);    processFunction(function,ranges);  }  if (ranges.isEmpty())   return;  final GlobalAnnotations globals=new GlobalAnnotations(ctx.getLexiconNamespace(),ctx.getTimestamp());  for (  IQueryNode node : group) {    if (!(node instanceof StatementPatternNode))     continue;    final StatementPatternNode sp=(StatementPatternNode)node;    if (!sp.getQueryHintAsBoolean(QueryHints.RANGE_SAFE,false))     continue;    if (!sp.o().isVariable())     continue;    final VarNode v=(VarNode)sp.o();    if (!ranges.containsKey(v))     continue;    final RangeNode range=ranges.get(v);    final RangeBOp bop=toRangeBOp(ctx.getBOpContext(),range,globals);    if (log.isDebugEnabled()) {      log.debug("attaching a range:\n" + range + "\n to statement pattern: "+ sp);    }    range.setRangeBOp(bop);    sp.setRange(range);  }}  }
class C{  public void insert(double key,double value,double pmiss){  TableEntry e, ne;  TableEntry[] table=m_Table;  int hash=hashCode(key);  int index=(hash & 0x7FFFFFFF) % table.length;  for (e=table[index]; e != null; e=e.next) {    if ((e.hash == hash) && (Math.abs(e.key - key) < EPSILON)) {      return;    }  }  ne=new TableEntry(hash,key,value,pmiss,table[index]);  table[index]=ne;  m_Count++;  if (m_Count >= m_Threshold) {    rehash();  }}  }
class C{  @Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){  if (buttonView == mShowAllDisplaysCheckbox) {    mDisplayListAdapter.updateContents();  } else {    final Display display=(Display)buttonView.getTag();    if (isChecked) {      DemoPresentationContents contents=new DemoPresentationContents(getNextPhoto());      showPresentation(display,contents);    } else {      hidePresentation(display);    }    mDisplayListAdapter.updateContents();  }}  }
class C{  private static Double computeAngle(final GeoPoint point,final double sinLatitude,final double cosLatitude,final double sinLongitude,final double cosLongitude){  final double x1=point.x * cosLongitude + point.y * sinLongitude;  final double y1=-point.x * sinLongitude + point.y * cosLongitude;  final double z1=point.z;  final double y2=y1;  final double z2=-x1 * sinLatitude + z1 * cosLatitude;  if (Math.sqrt(y2 * y2 + z2 * z2) < Vector.MINIMUM_RESOLUTION) {    return null;  }  return Math.atan2(z2,y2);}  }
class C{  public JSONArray put(Map<?,?> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public int nodeSize(){  if (root != null)   return root.nodeSize();  return 0;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  private boolean allocateFromPrezonedPortsOnly(URI virtualArrayUri,String storageSystemType,boolean backend){  return _networkScheduler.portAllocationUseExistingZones(storageSystemType,backend) && !NetworkScheduler.isZoningRequired(_dbClient,virtualArrayUri);}  }
class C{  public AllureIntegration allure(){  return allureIntegration;}  }
class C{  public static int hashCode(float[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  private Object writeReplace() throws ObjectStreamException {  return new KeyRep(KeyRep.Type.SECRET,getAlgorithm(),getFormat(),getEncoded());}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,int size,SelectorProvider selectorProvider){  this(processorType,null,size,selectorProvider);}  }
class C{  public void onLevelChange(Player player){  getAndCheckAchievementsInCategory(player,Category.EXPERIENCE);}  }
class C{  public boolean sameLineAndFile(SourcePosition other){  return (line == other.line) && ((sourceFile == other.sourceFile) || ((sourceFile != null) && sourceFile.equals(other.sourceFile)));}  }
class C{  public int truncateToPage(int addr){  return (addr >> OFFSET_BITS) << OFFSET_BITS;}  }
class C{  public static void shutDown(){  isShutDown=true;  JobPoller.getInstance().stop();}  }
class C{  public void delete(Record[] records){  for (int i=0; i < records.length; i++)   delete(records[i]);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (list_1: ");  result.append(list_1);  result.append(", name_1: ");  result.append(name_1);  result.append(", type_1: ");  result.append(type_1);  result.append(')');  return result.toString();}  }
class C{  protected final void endOfInput(boolean streamCancelled) throws IOException {  if (cacheRequest != null) {    cacheBody.close();  }  httpEngine.release(streamCancelled);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum < 2)   reportWrongNumberArgs();}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void delete(){  this.status=StandingInstructionStatus.DELETED.getValue();  this.name=this.name + "_deleted_" + this.getId();}  }
class C{  private PsiAnnotation[] toPsi(ParameterAnnotations parameterAnnotations){  if (parameterAnnotations.notNull) {    return new PsiAnnotation[]{getNotNullAnnotation()};  } else   if (parameterAnnotations.nullable) {    return new PsiAnnotation[]{getNullableAnnotation()};  }  return PsiAnnotation.EMPTY_ARRAY;}  }
class C{  public boolean holdsPolyfill(N4JSClassValidator validator,N4ClassDeclaration n4Class){  boolean isStaticPolyFill=isStaticPolyfill(n4Class);  if (isStaticPolyFill || isPolyfill(n4Class)) {    PolyfillValidationState state=new PolyfillValidationState();    state.host=validator;    state.n4Class=n4Class;    state.name=n4Class.getName();    if (state.name == null || !(n4Class.getDefinedType() instanceof TClass)) {      return true;    }    state.polyType=(TClass)n4Class.getDefinedType();    if (state.polyType == null || state.name == null) {      return true;    }    if (!holdsExpliciteExtends(state)) {      return false;    }    final Type superType=n4Class.getSuperClassRef().getDeclaredType();    if (!(superType instanceof TClassifier)) {      return true;    }    state.filledType=(TClassifier)superType;    if (!isStaticPolyFill) {      if (!(holdPolyfillName(state) && holdsProvidedByRuntime(state) && holdsNoImplementsOrConsumes(state)&& holdsEqualModifiers(state)&& holdsEqualTypeVariables(state)&& holdsSinglePolyfillSource(state))) {        return false;      }    } else {      if (!(holdPolyfillName(state) && holdsFilledClassIsStaticPolyfillAware(state) && holdsSameJavascriptVariant(state)&& holdsEqualModifiers(state)&& holdsEqualTypeVariables(state)&& holdsSinglePolyfillSource(state))) {        return false;      }    }  }  if (!isStaticPolyFill && isContainedInStaticPolyfillModule(n4Class)) {    validator.addIssue(getMessageForPOLY_STATIC_POLYFILL_MODULE_ONLY_FILLING_CLASSES(),n4Class,N4_TYPE_DECLARATION__NAME,POLY_STATIC_POLYFILL_MODULE_ONLY_FILLING_CLASSES);    return false;  }  return true;}  }
class C{  HasAliasView(Document parent,Map<String,Object> data,Class<? extends Document> mainInterface){  super(parent,data,mainInterface);}  }
class C{  public boolean isOnlyFirstAndLastTickLabelVisible(){  return null == onlyFirstAndLastTickLabelVisible ? _onlyFirstAndLastTickLabelVisible : onlyFirstAndLastTickLabelVisible.get();}  }
class C{  public boolean checkCommunity(String community){  for (Enumeration<AclEntry> e=entryList.elements(); e.hasMoreElements(); ) {    AclEntryImpl ent=(AclEntryImpl)e.nextElement();    if (ent.checkCommunity(community))     return true;  }  return false;}  }
class C{  protected void prepareGraphics(Graphics2D g){  if (m_transform != null) {    g.transform(m_transform);  }  setRenderingHints(g);}  }
class C{  @Nullable private Eml readMetadata(String shortname,Archive archive,ActionLogger alog){  Eml eml;  File emlFile=archive.getMetadataLocationFile();  try {    if (emlFile == null || !emlFile.exists()) {      emlFile=new File(archive.getLocation(),DataDir.EML_XML_FILENAME);    }    if (emlFile.exists()) {      eml=copyMetadata(shortname,emlFile);      alog.info("manage.resource.read.eml.metadata");      return eml;    } else {      log.warn("Cant find any eml metadata to import");    }  } catch (  ImportException e) {    String msg="Cant read basic archive metadata: " + e.getMessage();    log.warn(msg);    alog.warn(msg);    return null;  }catch (  Exception e) {    log.warn("Cant read archive eml metadata",e);  }  try {    eml=convertMetadataToEml(archive.getMetadata());    alog.info("manage.resource.read.basic.metadata");    return eml;  } catch (  Exception e) {    log.warn("Cant read basic archive metadata: " + e.getMessage());  }  alog.warn("manage.resource.read.problem");  return null;}  }
class C{  public void constValueIndex(short value) throws IOException {  constValueIndex('S',pool.addIntegerInfo(value));}  }
class C{  public String sqlObjectDetail_modifyColumnType(String vendorName,String catalogName,String schemaName,String tableName,String columnName,String dataType){  columnName=normalizeColumnName(vendorName,columnName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_modifyColumnType(catalogName,schemaName,tableName,columnName,dataType);}  }
class C{  public void reset(){  mSmilDocument=new SmilDocumentImpl();  mCurrentNode=mSmilDocument;}  }
class C{  public int indexSubTableArrayOffset(){  return this.internalReadData().readULongAsInt(Offset.bitmapSizeTable_indexSubTableArrayOffset.offset);}  }
class C{  public static void doSetup(){  new TypesStandaloneSetup().createInjectorAndDoEMFRegistration();}  }
class C{  public static BigInteger decodeInteger(final byte[] pArray){  return new BigInteger(1,decodeBase64(pArray));}  }
class C{  public static Bitmap blurEffectsOnBitmap(Context mContext,Bitmap bitmap){  return BlurEffect.fastblur(mContext,bitmap,12);}  }
class C{  public <T>void addFooterAdapter(IndexableFooterAdapter<T> adapter){  adapter.registerDataSetObserver(mHeaderFooterDataSetObserver);  mRealAdapter.addIndexableFooterAdapter(adapter);}  }
class C{  private Boolean sendIndividualMail(int bPartnerId,String unSubscribe){  try {    MBPartner employee=new MBPartner(getCtx(),bPartnerId,null);    String message=mailText.getMailText(true);    if (unSubscribe != null)     message+=unSubscribe;    StringBuffer whereClause=new StringBuffer();    whereClause.append(MBPartnerLocation.COLUMNNAME_C_BPartner_ID).append(" = ? AND ").append(MBPartnerLocation.COLUMNNAME_ContactType).append("=?");    MBPartnerLocation location=new Query(getCtx(),MBPartnerLocation.Table_Name,whereClause.toString(),get_TrxName()).setOnlyActiveRecords(true).setParameters(bPartnerId,MBPartnerLocation.CONTACTTYPE_Primary).first();    if (location == null) {      addLog(0,null,null,employee.getName() + " @Email@ @NotFound@");      return false;    }    MClient client=MClient.get(getCtx());    String smtp=client.getSMTPHost();    String eMailFrom=client.getRequestEMail();    String emailFrom=location.get_ValueAsString("EMail");    String userMailFrom=client.getRequestUser();    String password=client.getRequestUserPW();    EMail email=new EMail(getCtx(),smtp,eMailFrom,emailFrom,mailText.getMailHeader(),message);    if (mailText.isHtml())     email.setMessageHTML(mailText.getMailHeader(),message); else {      email.setSubject(mailText.getMailHeader());      email.setMessageText(message);    }    email.addAttachment(CreatePDF(bPartnerId));    if (!email.isValid() && !email.isValid(true)) {      log.warning("NOT VALID - " + email);      employee.setIsActive(false);      employee.save();      return Boolean.FALSE;    }    email.createAuthenticator(userMailFrom,password);    boolean OK=EMail.SENT_OK.equals(email.send());    if (OK) {      addLog(0,null,null,employee.getName() + " @Email@ @OK@");      log.fine(employee.getURL());    } else     log.warning("FAILURE - " + employee.getURL());    addLog(0,null,null,(OK ? "@OK@" : "@ERROR@") + " - " + emailFrom);    return OK;  } catch (  Exception e) {    return Boolean.FALSE;  }}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,short[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public boolean copyNeededFiles(File tempFolder1){  String pure=this.origJar.getName().substring(0,this.origJar.getName().lastIndexOf("."));  File tempFolder=new File(tempFolder1.getAbsolutePath() + File.separator + pure);  this.tempJar=new File(tempFolder.getAbsolutePath() + File.separator + origJar.getName());  this.tempOdex=new File(tempFolder.getAbsolutePath() + File.separator + origOdex.getName());  smaliFolder=new File(tempFolder.getName() + File.separator + origJar.getName().substring(0,origJar.getName().lastIndexOf(".")));  classes=new File(tempFolder.getAbsolutePath() + File.separator + S.CLASSES);  Logger.appendLog("[JarLegacy][I] about to copy " + origJar.getAbsolutePath() + " to "+ tempJar.getAbsolutePath());  boolean sucess=FilesUtils.copyFileRecurcively(origJar,tempJar);  Logger.appendLog("[JarLegacy][I]  copy " + origJar.getAbsolutePath() + " to "+ tempJar.getAbsolutePath()+ (sucess ? " Success" : " Failed"));  Logger.appendLog("[JarLegacy][I] about to copy " + origOdex.getAbsolutePath() + " to "+ tempOdex.getAbsolutePath());  sucess=FilesUtils.copyFileRecurcively(origOdex,tempOdex);  Logger.appendLog("[JarLegacy][I] copy " + origOdex.getAbsolutePath() + " to "+ tempOdex.getAbsolutePath()+ (sucess ? " Success" : " Failed"));  return tempJar.exists() && tempOdex.exists();}  }
class C{  public void autoscroll(Point pt){  int nRow=getRowForLocation(pt.x,pt.y);  if (nRow < 0) {    return;  }  Rectangle raOuter=getBounds();  nRow=((pt.y + raOuter.y) <= AUTOSCROLL_MARGIN) ? (nRow <= 0 ? 0 : nRow - 1) : (nRow < (getRowCount() - 1) ? nRow + 1 : nRow);  scrollRowToVisible(nRow);}  }
class C{  public Vector3d mul(Matrix3dc mat){  return mul(mat,this);}  }
class C{  protected byte[] engineSign() throws SignatureException {  BigInteger r=null;  BigInteger s=null;  BigInteger k=null;  BigInteger p, q, g, x;  BigInteger digestBI;  byte[] randomBytes;  byte[] rBytes;  byte[] sBytes;  byte[] signature;  int n, n1, n2;  DSAParams params;  if (appRandom == null) {    appRandom=new SecureRandom();  }  params=dsaKey.getParams();  p=params.getP();  q=params.getQ();  g=params.getG();  x=((DSAPrivateKey)dsaKey).getX();  digestBI=new BigInteger(1,msgDigest.digest());  randomBytes=new byte[20];  for (; ; ) {    appRandom.nextBytes(randomBytes);    k=new BigInteger(1,randomBytes);    if (k.compareTo(q) != -1) {      continue;    }    r=g.modPow(k,p).mod(q);    if (r.signum() == 0) {      continue;    }    s=k.modInverse(q).multiply(digestBI.add(x.multiply(r)).mod(q)).mod(q);    if (s.signum() != 0) {      break;    }  }  rBytes=r.toByteArray();  n1=rBytes.length;  if ((rBytes[0] & 0x80) != 0) {    n1++;  }  sBytes=s.toByteArray();  n2=sBytes.length;  if ((sBytes[0] & 0x80) != 0) {    n2++;  }  signature=new byte[6 + n1 + n2];  signature[0]=(byte)0x30;  signature[1]=(byte)(4 + n1 + n2);  signature[2]=(byte)0x02;  signature[3]=(byte)n1;  signature[4 + n1]=(byte)0x02;  signature[5 + n1]=(byte)n2;  if (n1 == rBytes.length) {    n=4;  } else {    n=5;  }  System.arraycopy(rBytes,0,signature,n,rBytes.length);  if (n2 == sBytes.length) {    n=6 + n1;  } else {    n=7 + n1;  }  System.arraycopy(sBytes,0,signature,n,sBytes.length);  return signature;}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(tex);  createFramebufferTexture();}  }
class C{  private KeyStore loadKeystore(InputStream is){  KeyStore keystore=null;  try {    keystore=KeyStore.getInstance(KeyStore.getDefaultType());    keystore.load(is,null);  } catch (  RuntimeException e) {    e.printStackTrace();  }catch (  KeyStoreException e) {    e.printStackTrace();  }catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }catch (  CertificateException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    try {      is.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  return keystore;}  }
class C{  public ConditionedExampleSet(ExampleSet parent,Condition condition) throws ExpressionEvaluationException {  this(parent,condition,false);}  }
class C{  protected Boolean isRemoteReceivedHeaderInvalid() throws MessagingException {  Boolean isInvalid;  if (null == (isInvalid=isRemoteReceivedHeaderInvalidBasic())) {    updateRemoteReceivedHeaderInvalid();    return isRemoteReceivedHeaderInvalid();  }  return isInvalid;}  }
class C{  public boolean isExpressCheckoutEnabled(){  return expressCheckoutEnabled;}  }
class C{  public MutableInt3D(final Int2D p){  x=p.x;  y=p.y;  z=0;}  }
class C{  private void browseBtnListener(){  FileDialog dialog=new FileDialog(this.getShell());  String[] extensions={"*.CER","*.cer"};  dialog.setFilterExtensions(extensions);  String file=dialog.open();  if (file != null) {    certTxt.setText(file.replace('\\','/'));    certInfoTxt.setText(getCertInfo(certTxt.getText()));  }}  }
class C{  public final void run(final Population population,final int iteration,final ReplanningContext replanningContext){  delegate.handleChangeRequests(iteration);  run(population,replanningContext);}  }
class C{  public static boolean isAbsolutePath(String systemId){  if (systemId == null)   return false;  final File file=new File(systemId);  return file.isAbsolute();}  }
class C{  public static Test suite(){  return new TestSuite(TestBooleanFunction.class);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 > z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 > constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 > constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void updateGui(){  final IDebugger debugger=m_debugger.getCurrentSelectedDebugger();  final TargetProcessThread activeThread=debugger == null ? null : debugger.getProcessManager().getActiveThread();  final boolean connected=(debugger != null) && debugger.isConnected();  final boolean suspended=connected && (activeThread != null);  m_startAction.setEnabled(!connected);  final boolean haltBeforeCommunicating=(debugger != null) && connected && (debugger.getProcessManager().getTargetInformation() != null)&& debugger.getProcessManager().getTargetInformation().getDebuggerOptions().mustHaltBeforeCommunicating();  m_detachAction.setEnabled(connected && (!haltBeforeCommunicating || suspended));  m_terminateAction.setEnabled(connected);  m_stepIntoAction.setEnabled(connected && suspended);  m_stepIntoAction.setEnabled(connected && suspended);  m_stepOverAction.setEnabled(connected && suspended);  m_stepBlockAction.setEnabled(connected && suspended);  m_stepEndAction.setEnabled(connected && suspended);  m_resumeAction.setEnabled(connected && suspended);  m_haltAction.setEnabled(connected && !suspended);  final boolean tracing=(debugger != null) && m_debugger.getTraceLogger(debugger).hasEchoBreakpoints();  m_startTraceAction.setEnabled(connected && (!haltBeforeCommunicating || suspended));  m_stopTraceAction.setEnabled(connected && tracing && (!haltBeforeCommunicating || suspended));}  }
class C{  public static <V,E>Map<V,Double> clusteringCoefficients(Graph<V,E> graph){  Map<V,Double> coefficients=new HashMap<V,Double>();  for (  V v : graph.getVertices()) {    int n=graph.getNeighborCount(v);    if (n < 2)     coefficients.put(v,new Double(0)); else {      ArrayList<V> neighbors=new ArrayList<V>(graph.getNeighbors(v));      double edge_count=0;      for (int i=0; i < n; i++) {        V w=neighbors.get(i);        for (int j=i + 1; j < n; j++) {          V x=neighbors.get(j);          edge_count+=graph.isNeighbor(w,x) ? 1 : 0;        }      }      double possible_edges=(n * (n - 1)) / 2.0;      coefficients.put(v,new Double(edge_count / possible_edges));    }  }  return coefficients;}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2.0f) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public static void main(String args[]) throws Exception {  try {    startup();    loadConfigurations();    startServices();  } catch (  Exception ex) {    log.error("Proxy failed to start",ex);    throw ex;  } finally {    shutdown();  }}  }
class C{  @Override public void stateChanged(ChangeEvent event){  lastValue=(Double)getValue();}  }
class C{  public ByteArrayOutputStream(){  buf=new byte[32];}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  private static ArrayMap<Triangle,Array<Edge>> createIsolatedEdgesMap(ArrayMap<Triangle,Array<Edge>> connectionMap){  ArrayMap<Triangle,Array<Edge>> disconnectionMap=new ArrayMap<Triangle,Array<Edge>>();  for (int i=0; i < connectionMap.size; i++) {    Triangle tri=connectionMap.getKeyAt(i);    Array<Edge> connectedEdges=connectionMap.getValueAt(i);    Array<Edge> disconnectedEdges=new Array<Edge>();    disconnectionMap.put(tri,disconnectedEdges);    if (connectedEdges.size < 3) {      boolean ab=true;      boolean bc=true;      boolean ca=true;      for (      Edge edge : connectedEdges) {        if (edge.rightVertex == tri.a && edge.leftVertex == tri.b)         ab=false; else         if (edge.rightVertex == tri.b && edge.leftVertex == tri.c)         bc=false; else         if (edge.rightVertex == tri.c && edge.leftVertex == tri.a)         ca=false;      }      if (ab)       disconnectedEdges.add(new Edge(tri,null,tri.a,tri.b));      if (bc)       disconnectedEdges.add(new Edge(tri,null,tri.b,tri.c));      if (ca)       disconnectedEdges.add(new Edge(tri,null,tri.c,tri.a));    }    int totalEdges=(connectedEdges.size + disconnectedEdges.size);    if (totalEdges != 3) {      Gdx.app.debug(TAG,"Wrong number of edges (" + totalEdges + ") in triangle "+ tri.getIndex());    }  }  return disconnectionMap;}  }
class C{  public int hashCode(){  return value;}  }
class C{  @NotNull @Override public ModuleDeploymentSource load(@NotNull Element tag,@NotNull Project project){  UserSpecifiedPathDeploymentSource userSpecifiedSource=new UserSpecifiedPathDeploymentSource(ModulePointerManager.getInstance(project).create(UserSpecifiedPathDeploymentSource.moduleName));  userSpecifiedSource.setProjectName(tag.getAttributeValue(PROJECT_ATTRIBUTE));  userSpecifiedSource.setVersion(tag.getAttributeValue(VERSION_ATTRIBUTE));  Element settings=tag.getChild(DeployToServerRunConfiguration.SETTINGS_ELEMENT);  if (settings != null) {    String filePath=settings.getAttributeValue(AppEngineDeploymentConfiguration.USER_SPECIFIED_ARTIFACT_PATH_ATTRIBUTE);    if (!StringUtil.isEmpty(filePath)) {      userSpecifiedSource.setFilePath(filePath);      return userSpecifiedSource;    }  }  return userSpecifiedSource;}  }
class C{  public void free(){synchronized (this) {    if (freed) {      throw new IllegalStateException("Already freed.");    }    freed=true;    freeBuffers.clear();    freeBuffers=null;  }}  }
class C{  @Override public boolean isAnnotationPresent(String annotation){  return getAccessibleObject().isAnnotationPresent(annotation,getClassAccessor());}  }
class C{  public static int nextIDfunc(int AD_Sequence_ID,String System) throws SQLException {  return nextID(AD_Sequence_ID,System);}  }
class C{  public T tuple(){  return tuple;}  }
class C{  private static String parseRunSetting(String value){  final String RUN_ARRAY_START="[";  final String RUN_ARRAY_END="]";  final String RUN_ARRAY_DELIM=";";  final int MIN_LENGTH=3;  if (!value.startsWith(RUN_ARRAY_START) || !value.endsWith(RUN_ARRAY_END) || runIndex < 0 || value.length() < MIN_LENGTH) {    return value;  }  value=value.substring(1,value.length() - 1);  String[] valueArr=value.split(RUN_ARRAY_DELIM);  int arrIndex=runIndex % valueArr.length;  value=valueArr[arrIndex].trim();  return value;}  }
class C{  public boolean isSuccessorEdge(LabelRef edge){  assert lir != null;  AbstractBlockBase<?>[] order=lir.codeEmittingOrder();  assert order[currentBlockIndex] == edge.getSourceBlock();  AbstractBlockBase<?> nextBlock=LIR.getNextBlock(order,currentBlockIndex);  return nextBlock == edge.getTargetBlock();}  }
class C{  public static void mount(FileSystem fs,Path mountPoint,Map<String,String> mountOptions) throws IOException {  mount(fs,mountPoint,false,false,mountOptions);}  }
class C{  private void updateColor(){  int[] rgb=new int[4];  HSL.hsl2rgb(hsl,rgb);  rgb[0]=0xff;  super.setSelectedColor(new Color(ARGB.mergeRgb(rgb)));}  }
class C{  public static void clearIndexCaches(Database database){  for (  Session s : database.getSessions(true)) {    s.clearViewIndexCache();  }}  }
class C{  public int missingNumber1(int[] nums){  int res=nums.length * (nums.length + 1) / 2;  for (  int n : nums)   res-=n;  return res;}  }
class C{  public boolean isCompactDatabase(){  return compactDatabase;}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Object rVal=null;  if (valueToConvert instanceof Decimal) {    rVal=JavaTypeTranslator.convert(targetType,valueToConvert.toString());  } else {    throw new JavaTypeTranslatorException("Value to convert must be a Decimal");  }  return (rVal);}  }
class C{  public Object clone(){  try {    StringCharacterIterator other=(StringCharacterIterator)super.clone();    return other;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mListId=getArguments().getString(Constants.KEY_LIST_ID);  mListOwner=getArguments().getString(Constants.KEY_LIST_OWNER);  mSharedWith=(HashMap)getArguments().getSerializable(Constants.KEY_SHARED_WITH_USERS);}  }
class C{  protected void eleminateSharedPartialPaths(ElemTemplateElement psuedoVarRecipient,Vector paths){  MultistepExprHolder list=createMultistepExprList(paths);  if (null != list) {    if (DIAGNOSE_MULTISTEPLIST)     list.diagnose();    boolean isGlobal=(paths == m_absPaths);    int longestStepsCount=list.m_stepCount;    for (int i=longestStepsCount - 1; i >= 1; i--) {      MultistepExprHolder next=list;      while (null != next) {        if (next.m_stepCount < i)         break;        list=matchAndEliminatePartialPaths(next,list,isGlobal,i,psuedoVarRecipient);        next=next.m_next;      }    }  }}  }
class C{  public Connection accept(ListenKey listener,long acceptTimeout,long handshakeTimeout) throws IOException {  if (acceptTimeout < 0 || handshakeTimeout < 0) {    throw new IllegalArgumentException("timeout is negative");  }  if (!(listener instanceof SocketListenKey)) {    throw new IllegalArgumentException("Invalid listener");  }  ServerSocket ss;synchronized (listener) {    ss=((SocketListenKey)listener).socket();    if (ss.isClosed()) {      throw new IllegalArgumentException("Invalid listener");    }  }  ss.setSoTimeout((int)acceptTimeout);  Socket s;  try {    s=ss.accept();  } catch (  SocketTimeoutException x) {    throw new TransportTimeoutException("timeout waiting for connection");  }  handshake(s,handshakeTimeout);  return new SocketConnection(s);}  }
class C{  public void testKeyPairGenerator06() throws NoSuchProviderException, NoSuchAlgorithmException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator kpg;  for (int i=0; i < algs.length; i++) {    kpg=KeyPairGenerator.getInstance(algs[i],validProviderName);    assertEquals("Incorrect algorithm",kpg.getAlgorithm().toUpperCase(),algs[i].toUpperCase());    assertEquals("Incorrect provider",kpg.getProvider().getName(),validProviderName);  }}  }
class C{  protected TextAnchor calculateTextAnchor(double angleDegrees){  TextAnchor ta=TextAnchor.CENTER;  double offset=this.angleOffset;  while (offset < 0.0) {    offset+=360.0;  }  double normalizedAngle=(((this.counterClockwise ? -1 : 1) * angleDegrees) + offset) % 360;  while (this.counterClockwise && (normalizedAngle < 0.0)) {    normalizedAngle+=360.0;  }  if (normalizedAngle == 0.0) {    ta=TextAnchor.CENTER_LEFT;  } else   if (normalizedAngle > 0.0 && normalizedAngle < 90.0) {    ta=TextAnchor.TOP_LEFT;  } else   if (normalizedAngle == 90.0) {    ta=TextAnchor.TOP_CENTER;  } else   if (normalizedAngle > 90.0 && normalizedAngle < 180.0) {    ta=TextAnchor.TOP_RIGHT;  } else   if (normalizedAngle == 180) {    ta=TextAnchor.CENTER_RIGHT;  } else   if (normalizedAngle > 180.0 && normalizedAngle < 270.0) {    ta=TextAnchor.BOTTOM_RIGHT;  } else   if (normalizedAngle == 270) {    ta=TextAnchor.BOTTOM_CENTER;  } else   if (normalizedAngle > 270.0 && normalizedAngle < 360.0) {    ta=TextAnchor.BOTTOM_LEFT;  }  return ta;}  }
class C{  void scrollToChild(int i){  CarouselItemImage view=(CarouselItemImage)getAdapter().getView(i,null,null);  float angle=view.getCurrentAngle();  if (angle == 0)   return;  if (angle > 180.0f)   angle=360.0f - angle; else   angle=-angle;  mFlingRunnable.startUsingDistance(angle);}  }
class C{  protected void dist_split(Stack<DistanceNode> point_set,Stack<DistanceNode> new_point_set,DistanceNode new_point,int max_scale){  int new_index=0;  double fmax=dist_of_scale(max_scale);  for (int i=0; i < point_set.length; i++) {    double new_d=Math.sqrt(m_DistanceFunction.distance(new_point.q(),point_set.element(i).q(),fmax * fmax));    if (new_d <= fmax) {      point_set.element(i).dist.push(new_d);      new_point_set.push(point_set.element(i));    } else {      point_set.set(new_index++,point_set.element(i));    }  }  List<DistanceNode> l=new java.util.LinkedList<DistanceNode>();  for (int i=0; i < new_index; i++) {    l.add(point_set.element(i));  }  point_set.clear();  point_set.addAll(l);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.PROPERTY__PRESENCE:    setPresence((Presence)null);  return;case DatatypePackage.PROPERTY__MULTIPLICITY:setMultiplicity(MULTIPLICITY_EDEFAULT);return;case DatatypePackage.PROPERTY__NAME:setName(NAME_EDEFAULT);return;case DatatypePackage.PROPERTY__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;case DatatypePackage.PROPERTY__CONSTRAINT_RULE:setConstraintRule((ConstraintRule)null);return;case DatatypePackage.PROPERTY__TYPE:setType((PropertyType)null);return;case DatatypePackage.PROPERTY__PROPERTY_ATTRIBUTES:getPropertyAttributes().clear();return;}super.eUnset(featureID);}  }
class C{  private void bindEntityFields(Class<?> cls,String type,Collection<AccessibleObject> fieldOrMethodList){  for (  AccessibleObject fieldOrMethod : fieldOrMethodList) {    bindTriggerIfPresent(OnCreate.class,fieldOrMethod);    bindTriggerIfPresent(OnDelete.class,fieldOrMethod);    bindTriggerIfPresent(OnUpdate.class,fieldOrMethod);    bindTriggerIfPresent(OnCommit.class,fieldOrMethod);    if (fieldOrMethod.isAnnotationPresent(Id.class)) {      bindEntityId(cls,type,fieldOrMethod);    } else     if (fieldOrMethod.isAnnotationPresent(Transient.class) && !fieldOrMethod.isAnnotationPresent(ComputedAttribute.class) && !fieldOrMethod.isAnnotationPresent(ComputedRelationship.class)) {      continue;    } else     if (!fieldOrMethod.isAnnotationPresent(Exclude.class)) {      if (fieldOrMethod instanceof Field && Modifier.isTransient(((Field)fieldOrMethod).getModifiers())) {        continue;      }      if (fieldOrMethod instanceof Method && Modifier.isTransient(((Method)fieldOrMethod).getModifiers())) {        continue;      }      if (fieldOrMethod instanceof Field && !fieldOrMethod.isAnnotationPresent(Column.class) && Modifier.isStatic(((Field)fieldOrMethod).getModifiers())) {        continue;      }      bindAttrOrRelation(cls,fieldOrMethod);    }  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.609 -0500",hash_original_method="AD8204C7E0D7DFC602B3A996AAF9AC40",hash_generated_method="9ACD4602144599915DF0E9850F80A4D8") @Override public void removeHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    throw new IllegalArgumentException("Provided listener is not registered");  }  if (!listeners.remove(listener)) {    throw new IllegalArgumentException("Provided listener is not registered");  }}  }
class C{  private void createFormatOptions(Composite parent){  Group group=new Group(parent,SWT.NONE);  group.setText(TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_group_label);  GridLayout layout=new GridLayout();  layout.numColumns=3;  group.setLayout(layout);  group.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_insertSpaceAfterCommaDelimiter,PREF_FORMAT_OPTIONS_INSERT_SPACE_AFTER_COMMA_DELIMITER,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_insertSpaceAfterSemicolonInForStatements,PREF_FORMAT_OPTIONS_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR_STATEMENTS,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_insertSpaceBeforeAndAfterBinaryOperators,PREF_FORMAT_OPTIONS_INSERT_SPACE_BEFORE_AND_AFTER_BINARY_OPERATORS,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_insertSpaceAfterKeywordsInControlFlowStatements,PREF_FORMAT_OPTIONS_INSERT_SPACE_AFTER_KEYWORDS_IN_CONTROL_FLOW_STATEMENTS,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_insertSpaceAfterFunctionKeywordForAnonymousFunctions,PREF_FORMAT_OPTIONS_INSERT_SPACE_AFTER_FUNCTION_KEYWORD_FOR_ANONYMOUS_FUNCTIONS,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis,PREF_FORMAT_OPTIONS_INSERT_SPACE_AFTER_OPENING_AND_BEFORE_CLOSING_NONEMPTY_PARENTHESIS,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets,PREF_FORMAT_OPTIONS_INSERT_SPACE_AFTER_OPENING_AND_BEFORE_CLOSING_NONEMPTY_BRACKETS,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_placeOpenBraceOnNewLineForFunctions,PREF_FORMAT_OPTIONS_PLACE_OPEN_BRACE_ON_NEW_LINE_FOR_FUNCTIONS,new String[]{"true","false"},0);  addCheckBox(group,TypeScriptUIMessages.FormatterConfigurationBlock_formatOptions_placeOpenBraceOnNewLineForControlBlocks,PREF_FORMAT_OPTIONS_PLACE_OPEN_BRACE_ON_NEW_LINE_FOR_CONTROL_BLOCKS,new String[]{"true","false"},0);}  }
class C{  public void cancel(){  lock.lock();  timer.cancel();  timer.purge();  lock.unlock();}  }
class C{  public static LowMemoryWatcher register(@NotNull Runnable runnable){  return new LowMemoryWatcher(runnable);}  }
class C{  public FieldAnalysisRequest(){  super(METHOD.GET,"/analysis/field");}  }
class C{  private Converter lookup(Type type,Value value) throws Exception {  Class real=type.getType();  if (value != null) {    real=value.getType();  }  return registry.lookup(real);}  }
class C{  public static boolean isUnavailable(@NonNull Context context){  return !isAvailable(context);}  }
class C{  public void saveDefaultDevice(Device device){  defaultDevice.set(device.id());}  }
class C{  protected ArgumentDefinitionImpl(){  super();}  }
class C{  void restore(){  state0=stateSave0;  state1=stateSave1;}  }
class C{  public long startTime(){  return DistributionStats.getStatTime();}  }
class C{  public void java_lang_ClassLoader_findLoadedClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  private void checkTLSClient(X509Certificate cert) throws CertificateException {  Set<String> exts=getCriticalExtensions(cert);  if (checkKeyUsage(cert,KU_SIGNATURE) == false) {    throw new ValidatorException("KeyUsage does not allow digital signatures",ValidatorException.T_EE_EXTENSIONS,cert);  }  if (checkEKU(cert,exts,OID_EKU_TLS_CLIENT) == false) {    throw new ValidatorException("Extended key usage does not " + "permit use for TLS client authentication",ValidatorException.T_EE_EXTENSIONS,cert);  }  if (!SimpleValidator.getNetscapeCertTypeBit(cert,NSCT_SSL_CLIENT)) {    throw new ValidatorException("Netscape cert type does not permit use for SSL client",ValidatorException.T_EE_EXTENSIONS,cert);  }  exts.remove(SimpleValidator.OID_KEY_USAGE);  exts.remove(SimpleValidator.OID_EXTENDED_KEY_USAGE);  exts.remove(SimpleValidator.OID_NETSCAPE_CERT_TYPE);  checkRemainingExtensions(exts);}  }
class C{  public Bindings addOptComponent(String property,Class clazz,JToggleButton c){  return addOptComponent(property,clazz,c,false);}  }
class C{  public void removeProcessStepByProcessId(List<StepAllowance> removeListStepAllowance) throws PortalException, SystemException {  for (  StepAllowance step : removeListStepAllowance) {    stepAllowancePersistence.remove(step);  }}  }
class C{  public CandidateHarvesterSet(){}  }
class C{  public ZyGraphDisplaySettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE02016: Type argument can't be null");  m_type=type;}  }
class C{  private void initDotsCoordinates(){  float intervalWidth=(getWidth() - (mThumb.getRadius() * 2)) / (mDots.size() - 1);  for (  Dot dot : mDots) {    dot.mX=(int)(mThumb.getRadius() + intervalWidth * (dot.id));  }}  }
class C{  public void quickSortFromTo(int from,int to){  countSortFromTo(from,to);}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  protected CharSet(String[] set){  super();  int sz=set.length;  for (int i=0; i < sz; i++) {    add(set[i]);  }}  }
class C{  @Override public void add(final IBindingSet[] e){  if (!open)   throw new BufferClosedException();  if (SolutionsLog.INFO) {    SolutionsLog.log(q.getQueryId(),q.getBOp(bopId),bopId,partitionId,(IBindingSet[])e);  }  if (false) {  } else {    if (reorderSolutions) {      addReorderAllowed(e);    } else {      addReorderNotAllowed(e);    }  }}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  @Override public boolean equals(@Nullable Object object){  if (object == this) {    return true;  }  if (object instanceof InternetDomainName) {    InternetDomainName that=(InternetDomainName)object;    return this.name.equals(that.name);  }  return false;}  }
class C{  public final void testGetEncoded02() throws IOException {  byte[] encoding=getDerEncoding();  byte[] encodingCopy=encoding.clone();  PolicyQualifierInfo i=new PolicyQualifierInfo(encodingCopy);  byte[] encodingRet=i.getEncoded();  encodingRet[0]=(byte)0;  byte[] encodingRet1=i.getEncoded();  assertTrue(Arrays.equals(encoding,encodingRet1));}  }
class C{  @Override public void acquire(int permits) throws IllegalArgumentException, RegulationException, InterruptedException {  if (this.firstPermitDate == null) {    this.firstPermitDate=new Date();  }  if ((this.maxAllowedPermits >= 0) && ((this.totalAcquiredPermits + permits) > this.maxAllowedPermits)) {    String user_name="--anonymous--";    if (parameters.getUser() != null) {      user_name=parameters.getUser().getUsername();    }    throw new RegulationException("Maximum size of " + this.maxAllowedPermits + " bytes for a single flow achieved by the user \""+ user_name+ "\"");  }  this.totalAcquiredPermits+=permits;  if (this.rateLimiter != null) {    this.rateLimiter.acquire(permits);  }  super.acquire(permits);}  }
class C{  protected static long[] known_N_compute_B_and_K_quick(long N,double epsilon){  if (epsilon <= 0.0) {    long[] result=new long[2];    result[0]=1;    result[1]=N;    return result;  }  final int maxBuffers=50;  final int maxHeight=50;  final double N_double=(double)N;  final double c=N_double * epsilon * 2.0;  int[] heightMaximums=new int[maxBuffers - 1];  for (int b=2; b <= maxBuffers; b++) {    int h=3;    while (h <= maxHeight && (h - 2) * ((double)Math.round(binomial(b + h - 2,h - 1))) - ((double)Math.round(binomial(b + h - 3,h - 3))) + ((double)Math.round(binomial(b + h - 3,h - 2))) - c > 0.0) {      h++;    }    while (h <= maxHeight && (h - 2) * ((double)Math.round(binomial(b + h - 2,h - 1))) - ((double)Math.round(binomial(b + h - 3,h - 3))) + ((double)Math.round(binomial(b + h - 3,h - 2))) - c <= 0.0) {      h++;    }    h--;    int hMax;    if (h >= maxHeight && (h - 2) * ((double)Math.round(binomial(b + h - 2,h - 1))) - ((double)Math.round(binomial(b + h - 3,h - 3))) + ((double)Math.round(binomial(b + h - 3,h - 2))) - c > 0.0) {      hMax=Integer.MIN_VALUE;    } else {      hMax=h;    }    heightMaximums[b - 2]=hMax;  }  long[] kMinimums=new long[maxBuffers - 1];  for (int b=2; b <= maxBuffers; b++) {    int h=heightMaximums[b - 2];    long kMin=Long.MAX_VALUE;    if (h > Integer.MIN_VALUE) {      double value=((double)Math.round(binomial(b + h - 2,h - 1)));      long tmpK=ceiling(N_double / value);      if (tmpK <= Long.MAX_VALUE) {        kMin=tmpK;      }    }    kMinimums[b - 2]=kMin;  }  long multMin=Long.MAX_VALUE;  int minB=-1;  for (int b=2; b <= maxBuffers; b++) {    if (kMinimums[b - 2] < Long.MAX_VALUE) {      long mult=((long)b) * ((long)kMinimums[b - 2]);      if (mult < multMin) {        multMin=mult;        minB=b;      }    }  }  long b, k;  if (minB != -1) {    b=minB;    k=kMinimums[minB - 2];  } else {    b=1;    k=N;  }  long[] result=new long[2];  result[0]=b;  result[1]=k;  return result;}  }
class C{  public void start(){  Util.validateMainThread();  thread=new HandlerThread(TAG);  thread.start();  handler=new Handler(thread.getLooper(),callback);  running=true;  requestNextPreview();}  }
class C{  public static Ed25519GroupElement addGroupElements(final Ed25519GroupElement g1,final Ed25519GroupElement g2){  if ((g1.getCoordinateSystem() != CoordinateSystem.P2 && g1.getCoordinateSystem() != CoordinateSystem.P3) || (g2.getCoordinateSystem() != CoordinateSystem.P2 && g2.getCoordinateSystem() != CoordinateSystem.P3)) {    throw new IllegalArgumentException("g1 and g2 must have coordinate system P2 or P3");  }  final BigInteger g1X=toBigInteger(g1.getX().encode());  final BigInteger g1Y=toBigInteger(g1.getY().encode());  final BigInteger g1Z=toBigInteger(g1.getZ().encode());  final BigInteger g2X=toBigInteger(g2.getX().encode());  final BigInteger g2Y=toBigInteger(g2.getY().encode());  final BigInteger g2Z=toBigInteger(g2.getZ().encode());  final BigInteger g1x=g1X.multiply(g1Z.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);  final BigInteger g1y=g1Y.multiply(g1Z.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);  final BigInteger g2x=g2X.multiply(g2Z.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);  final BigInteger g2y=g2Y.multiply(g2Z.modInverse(Ed25519Field.P)).mod(Ed25519Field.P);  final BigInteger dx1x2y1y2=D.multiply(g1x).multiply(g2x).multiply(g1y).multiply(g2y).mod(Ed25519Field.P);  final BigInteger x3=g1x.multiply(g2y).add(g2x.multiply(g1y)).multiply(BigInteger.ONE.add(dx1x2y1y2).modInverse(Ed25519Field.P)).mod(Ed25519Field.P);  final BigInteger y3=g1x.multiply(g2x).add(g1y.multiply(g2y)).multiply(BigInteger.ONE.subtract(dx1x2y1y2).modInverse(Ed25519Field.P)).mod(Ed25519Field.P);  final BigInteger t3=x3.multiply(y3).mod(Ed25519Field.P);  return Ed25519GroupElement.p3(toFieldElement(x3),toFieldElement(y3),Ed25519Field.ONE,toFieldElement(t3));}  }
class C{  public String format(Date timestamp){  long millisFromNow=getMillisFromNow(timestamp);  long minutesFromNow=TimeUnit.MILLISECONDS.toMinutes(millisFromNow);  if (minutesFromNow < 1) {    return "just now";  }  long hoursFromNow=TimeUnit.MILLISECONDS.toHours(millisFromNow);  if (hoursFromNow < 1) {    return formatMinutes(minutesFromNow);  }  long daysFromNow=TimeUnit.MILLISECONDS.toDays(millisFromNow);  if (daysFromNow < 1) {    return formatHours(hoursFromNow);  }  long weeksFromNow=TimeUnit.MILLISECONDS.toDays(millisFromNow) / 7;  if (weeksFromNow < 1) {    return formatDays(daysFromNow);  }  long monthsFromNow=TimeUnit.MILLISECONDS.toDays(millisFromNow) / 30;  if (monthsFromNow < 1) {    return formatWeeks(weeksFromNow);  }  long yearsFromNow=TimeUnit.MILLISECONDS.toDays(millisFromNow) / 365;  if (yearsFromNow < 1) {    return formatMonths(monthsFromNow);  }  return formatYears(yearsFromNow);}  }
class C{  private void showPopupMenu(final MouseEvent event){  final JPopupMenu menu=new CFieldMenu(getFilterField());  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  private static String createLibraryExtension(){  OSType osType=calculateOS();switch (osType) {case APPLE:    return "dylib";case ANDROID:case LINUX:case SUN:  return "so";case WINDOWS:return "dll";default :break;}return "";}  }
class C{  public static void intToBytesLittleEndian(final int i,final byte[] dest,final int offset){  dest[offset]=(byte)(i & 0xFF);  dest[offset + 1]=(byte)((i >> 8) & 0xFF);  dest[offset + 2]=(byte)((i >> 16) & 0xFF);  dest[offset + 3]=(byte)((i >> 24) & 0xFF);}  }
class C{  public int addChildEdge(int parent,int child){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  protected boolean activateMagnetometer(){  return (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD),(int)(PLConstants.kDefaultMagnetometerInterval * 1000.0f)));}  }
class C{  public void updateSkybox(int front,int right,int back,int left,int up,int down) throws Exception {  if (mSkyboxTexture.getClass() != CubeMapTexture.class)   throw new Exception("The skybox texture cannot be updated. It is not a cube map texture.");  int[] resourceIds=new int[]{front,right,back,left,up,down};  CubeMapTexture cubemap=(CubeMapTexture)mSkyboxTexture;  cubemap.setResourceIds(resourceIds);  mRenderer.getTextureManager().replaceTexture(cubemap);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:18.132 -0500",hash_original_method="FF485081EB7D7D498FB9DCE337B88F15",hash_generated_method="FF485081EB7D7D498FB9DCE337B88F15") LayerDrawable(Drawable[] layers,LayerState state){  this(state,null);  int length=layers.length;  ChildDrawable[] r=new ChildDrawable[length];  for (int i=0; i < length; i++) {    r[i]=new ChildDrawable();    r[i].mDrawable=layers[i];    layers[i].setCallback(this);    mLayerState.mChildrenChangingConfigurations|=layers[i].getChangingConfigurations();  }  mLayerState.mNum=length;  mLayerState.mChildren=r;  ensurePadding();}  }
class C{  public static InetAddress increment(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0xff) {    addr[i]=0;    i--;  }  Preconditions.checkArgument(i >= 0,"Incrementing %s would wrap.",address);  addr[i]++;  return bytesToInetAddress(addr);}  }
class C{  public static void deleteAsocRegsSec(UseCaseConf useCaseConf,Integer bookIdSec,Integer folderIdSec) throws Exception {  List lista=FolderAsocSession.getAsocRegFdr(useCaseConf.getSessionID(),bookIdSec,folderIdSec.intValue(),useCaseConf.getEntidadId());  if (lista != null && !lista.isEmpty()) {    for (Iterator iterator=lista.iterator(); iterator.hasNext(); ) {      ScrRegasoc scrRegasoc=(ScrRegasoc)iterator.next();      if (scrRegasoc.getIdArchsec() == bookIdSec.intValue() && scrRegasoc.getIdFdrsec() == folderIdSec.intValue()) {        FolderAsocSession.deleteAsocRegFdr(useCaseConf.getSessionID(),useCaseConf.getEntidadId(),scrRegasoc);        break;      }    }  }}  }
class C{  public static InlineQueryResultVideoBuilder builder(){  return new InlineQueryResultVideoBuilder();}  }
class C{  public FriendlySwitchCompat(Context context){  this(context,null);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> putAll(RangeMap<K,? extends V> rangeMap){  for (  Entry<Range<K>,? extends V> entry : rangeMap.asMapOfRanges().entrySet()) {    put(entry.getKey(),entry.getValue());  }  return this;}  }
class C{  public <U extends T,A>InitialMatching1<T,U,A> when(DecomposableMatchBuilder1<U,A> decomposableMatchBuilder){  return new InitialMatching1<>(decomposableMatchBuilder.build(),value);}  }
class C{  public File forcedGlossary(){  return forcedGlossary;}  }
class C{  private Response delete(int scriptId){  ResponseBuilder responseBuilder=Response.noContent();  ScriptDao dao=new ScriptDao();  try {    Script script=dao.findById(scriptId);    if (script == null) {      LOG.warn("Script with id " + scriptId + " does not exist.");      responseBuilder.status(Status.BAD_REQUEST);      responseBuilder.entity("Script with id " + scriptId + "does not exist.");    } else {      dao.delete(script);    }  } catch (  RuntimeException e) {    LOG.error("Error deleting project : " + e,e);    responseBuilder.status(Status.INTERNAL_SERVER_ERROR);    responseBuilder.entity("An error occurred while deleting the Script");  }  return responseBuilder.build();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.PRIMITIVE_PROPERTY_TYPE__TYPE:    setType(TYPE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public TechnicalServiceNotAliveException(Reason reason,Object[] params,Throwable t){  super(reason.toString(),t,params);  setMessageKey(getMessageKey() + "." + reason);}  }
class C{  public XmlFragmentWhitespacingDocumentReader(String corpusName,String sourceDirectory) throws Exception {  super(CorpusReaderConfigurator.buildResourceManager(corpusName,sourceDirectory));  taBuilder=new TokenizerTextAnnotationBuilder(new IllinoisTokenizer());}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  private void genCondBranch(byte cond,int bTarget){  int mTarget=bytecodeMap[bTarget];  if (!VM.runningTool && ((BaselineCompiledMethod)compiledMethod).hasCounterArray()) {    int entry=edgeCounterIdx;    edgeCounterIdx+=2;    ForwardReference notTaken=asm.forwardJcc(asm.flipCode(cond));    incEdgeCounter(T1,null,entry + EdgeCounts.TAKEN);    asm.emitJMP_ImmOrLabel(mTarget,bTarget);    notTaken.resolve(asm);    incEdgeCounter(T1,null,entry + EdgeCounts.NOT_TAKEN);  } else {    asm.emitJCC_Cond_ImmOrLabel(cond,mTarget,bTarget);  }}  }
class C{  public DefNodeRemovedListener(Element imp){  importElement=imp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.470 -0500",hash_original_method="84333F22D2F662ECF0F56FB718F0C6D4",hash_generated_method="FE929F51FF07516C02FFA30619A24C07") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int expn(String name) throws IOException {  return sendCommand(SMTPCommand.EXPN,name);}  }
class C{  public CFlags(){  this(null,System.out,System.err);}  }
class C{  public static OptionalParameter.Byte newSarSegmentSeqnum(int value){  return newSarSegmentSeqnum((byte)value);}  }
class C{  public static JobDefinition manuallyTriggerableJobDefinition(final String jobType,final String jobName,final String description,final int restarts,final Optional<Duration> maxAge){  return new DefaultJobDefinition(jobType,jobName,description,maxAge,Optional.empty(),Optional.empty(),restarts,0,Optional.empty());}  }
class C{  protected boolean isClassPathChange(IJavaElementDelta delta){  if (delta.getElement().getElementType() != IJavaElement.PACKAGE_FRAGMENT_ROOT)   return false;  int flags=delta.getFlags();  return (delta.getKind() == IJavaElementDelta.CHANGED && ((flags & IJavaElementDelta.F_ADDED_TO_CLASSPATH) != 0) || ((flags & IJavaElementDelta.F_REMOVED_FROM_CLASSPATH) != 0) || ((flags & IJavaElementDelta.F_REORDER) != 0));}  }
class C{  public static void logAndShow(Activity activity,String tag,String message){  Log.e(tag,message);  showError(activity,message);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,2)) {    return makeNetworkedCall(stack);  }  Object o=stack.pop();  int x=getInt(stack);  Playlist p=getPlaylist(stack);  if (p == null)   return null;  if (!Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr()) && p != stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   return null;  if (o instanceof Playlist)   p.insertIntoPlaylist((Playlist)o,x); else   if (o instanceof Album)   p.insertIntoPlaylist((Album)o,x); else   if (o instanceof MediaFile) {    if (p.getID() == 0 && ((MediaFile)o).getGeneralType() == MediaFile.MEDIAFILE_LOCAL_PLAYBACK)     p.insertIntoPlaylist((MediaFile)o,x); else     p.insertIntoPlaylist(((MediaFile)o).getContentAiring(),x);  } else   if (o instanceof Airing)   p.insertIntoPlaylist((Airing)o,x);  if (stack.getUIMgrSafe() != null && p == stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   stack.getUIMgrSafe().getVideoFrame().kick();  sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  return null;}  }
class C{  private void showAnimationMarker(int i){  if (i >= 0 && i < mAnimationMarkers.length) {    mAnimationMarkers[i].setPosition(mLocation);    mAnimationMarkers[i].setVisible(true);  }  if (i - 1 < 0) {    mMovementMarker.setVisible(false);  } else   if (i - 1 < mAnimationMarkers.length) {    mAnimationMarkers[i - 1].setVisible(false);  }}  }
class C{  private static int toUnsigned(byte b){  int value=b & 0x7F;  if ((b & 0x80) != 0) {    value|=0x80;  }  return value;}  }
class C{  public ScriptDependency(String localName,String actualName,EObject type,TModule module){  this.localName=localName;  this.actualName=actualName;  this.type=type;  this.dependencyModule=module;}  }
class C{  @Override public void destroy(){  if (timerFilterThread != null) {    timerFilterThread.setStopped();    timerFilterThread=null;  }  Filter filter=null;  for (int i=0; i < filterFactory.getAllFilter().size(); i++) {    filter=filterFactory.getAllFilter().get(i);    try {      filter.destroy();    } catch (    Exception e) {    }  }}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  public FmBand(int band){switch (band) {case BAND_US:    this.mMinFrequency=87900;  this.mMaxFrequency=107900;this.mDefaultFrequency=87900;this.mChannelOffset=200;break;case BAND_EU:this.mMinFrequency=87500;this.mMaxFrequency=108000;this.mDefaultFrequency=87500;this.mChannelOffset=100;break;case BAND_JAPAN:this.mMinFrequency=76000;this.mMaxFrequency=90000;this.mDefaultFrequency=76000;this.mChannelOffset=100;break;case BAND_CHINA:this.mMinFrequency=70000;this.mMaxFrequency=108000;this.mDefaultFrequency=70000;this.mChannelOffset=50;break;case BAND_EU_50K_OFFSET:this.mMinFrequency=87500;this.mMaxFrequency=108000;this.mDefaultFrequency=87500;this.mChannelOffset=50;break;default :throw new IllegalArgumentException("Wrong band identifier");}}  }
class C{  public static boolean isSolarisX86(){  return solaris && x86;}  }
class C{  public List<TileDirectory> tilesInRegion(float n,float s,float e,float w){  if (containedTiles == null) {    return null;  }  List<TileDirectory> retval=new ArrayList<TileDirectory>();  int numTiles=containedTiles.length;  for (int i=0; i < numTiles; i++) {    TileDirectory tile=containedTiles[i];    if (tile != null && tile.inRegion(n,s,e,w)) {      retval.add(tile);    }  }  return retval;}  }
class C{  private InputStream openResponseEntity(State state,HttpResponse response) throws StopRequest {  try {    return response.getEntity().getContent();  } catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while getting entity: " + ex.toString(),ex);  }}  }
class C{  private void fireSelectionSync(SelectionListener[] array,int oldSelection,int newSelection){  int alen=array.length;  for (int iter=0; iter < alen; iter++) {    array[iter].selectionChanged(oldSelection,newSelection);  }}  }
class C{  public void modify(CheServiceImpl service,@Nullable List<String> agentKeys) throws AgentException {  for (  AgentKey agentKey : sorter.sort(agentKeys)) {    Agent agent=agentRegistry.getAgent(agentKey);    addEnv(service,agent.getProperties());    addExposedPorts(service,agent.getProperties());  }}  }
class C{  private void testRemoveTemporaryFiles(int numFiles,String baseTemporaryFilename) throws Exception {  PipelineOptions options=PipelineOptionsFactory.create();  SimpleSink.SimpleWriteOperation writeOp=buildWriteOperation(baseTemporaryFilename);  List<File> temporaryFiles=new ArrayList<>();  List<File> outputFiles=new ArrayList<>();  for (int i=0; i < numFiles; i++) {    File tmpFile=tmpFolder.newFile(FileBasedWriteOperation.buildTemporaryFilename(baseTemporaryFilename,"" + i));    temporaryFiles.add(tmpFile);    File outputFile=tmpFolder.newFile(baseOutputFilename + i);    outputFiles.add(outputFile);  }  writeOp.removeTemporaryFiles(options);  for (int i=0; i < numFiles; i++) {    assertFalse(temporaryFiles.get(i).exists());    assertTrue(outputFiles.get(i).exists());  }}  }
class C{  public void stateChanged(ChangeEvent e){  int index=tabbedPane.getSelectedIndex();  m_selectionActive=(index == 0);}  }
class C{  public static double[][] generateNonZeroTestMatrix(int rows,int cols,double min,double max,long seed){  double[][] matrix=new double[rows][cols];  Random random;  if (seed == -1)   random=TestUtils.random; else   random=new Random(seed);  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      double randValue;      do {        randValue=random.nextDouble();      } while (randValue == 0);      matrix[i][j]=(randValue * (max - min) + min);    }  }  return matrix;}  }
class C{  private void compactEntries(Segment segment,Segment compactSegment){  for (long i=segment.firstIndex(); i <= segment.lastIndex(); i++) {    checkEntry(i,segment,compactSegment);  }}  }
class C{  public SIPHeader parse() throws ParseException {  ServiceRouteList serviceRouteList=new ServiceRouteList();  if (debug)   dbg_enter("ServiceRouteParser.parse");  try {    this.lexer.match(TokenTypes.SERVICE_ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      ServiceRoute serviceRoute=new ServiceRoute();      super.parse(serviceRoute);      serviceRouteList.add(serviceRoute);      this.lexer.SPorHT();      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (lexer.lookAhead(0) == '\n')       break; else       throw createParseException("unexpected char");    }    return serviceRouteList;  }  finally {    if (debug)     dbg_leave("ServiceRouteParser.parse");  }}  }
class C{  public OfflineAuthenticator(String playerName){  Objects.requireNonNull(playerName);  this.playerName=playerName;  if (this.playerName.length() == 0) {    throw new IllegalArgumentException("Player name cannot be empty");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean afterMigration(Properties ctx){  MSystem system=MSystem.get(ctx);  if (!system.isJustMigrated())   return false;  log.info("Role");  String sql="SELECT * FROM AD_Role";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      MRole role=new MRole(ctx,rs,null);      role.updateAccessRecords();    }  } catch (  Exception e) {    log.log(Level.SEVERE,"(1)",e);  } finally {    close(rs);    close(pstmt);    rs=null;    pstmt=null;  }  try {    Class<?> clazz=Class.forName("org.compiere.MigrateData");    clazz.newInstance();  } catch (  Exception e) {    log.log(Level.SEVERE,"Data",e);  }  log.info("Language");  MLanguage.maintain(ctx);  log.info("Sequence");  SequenceCheck.validate(ctx);  log.info("Costing");  MAcctSchema[] ass=MAcctSchema.getClientAcctSchema(ctx,0);  for (int i=0; i < ass.length; i++) {    ass[i].checkCosting();    ass[i].saveEx();  }  system.setIsJustMigrated(false);  return system.save();}  }
class C{  public boolean addViewAllocToInitLayout_ID(String strId){  return addViewAllocToInitLayout_ID(strId,false);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.REACTION__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case SexecPackage.REACTION__CHECK:  return check != null;case SexecPackage.REACTION__EFFECT:return effect != null;case SexecPackage.REACTION__TRANSITION:return transition != TRANSITION_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public void run(){  amIActive=true;  String inputTextFile=null;  String inputRasterFiles=null;  String outputTextFile=null;  boolean interpolateValues=false;  boolean includeStatistics=false;  String[] gatHeaderFile;  List<WhiteboxRaster> gatGrids=new ArrayList<>();  String fileName;  int numberOfLines=0;  int counter;  String tempLine;  String[] line;  int id;  double xCoord;  double yCoord;  String name;  int xGridcell;  int yGridcell;  double deltaX;  double deltaY;  int dXi;  int dYi;  double average;  double w;  double[] ww=new double[4];  double value;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double min;  double max;  double sum;  int sumCount;  double mean=0;  double neighbourValue;  FileWriter streamWriter=null;  String outputLine;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputTextFile=args[i];    } else     if (i == 1) {      inputRasterFiles=args[i];    } else     if (i == 2) {      outputTextFile=args[i];    } else     if (i == 3) {      interpolateValues=Boolean.parseBoolean(args[i]);    } else     if (i == 4) {      includeStatistics=Boolean.parseBoolean(args[i]);    }  }  if ((inputTextFile == null) || (inputRasterFiles == null) || (outputTextFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    gatHeaderFile=inputRasterFiles.split(";");    for (int i=0; i <= gatHeaderFile.length - 1; i++) {      WhiteboxRaster gatGrid=new WhiteboxRaster(gatHeaderFile[i],"r");      gatGrids.add(gatGrid);    }    BufferedReader bufferedReader=new BufferedReader(new FileReader(inputTextFile));    streamWriter=new FileWriter(outputTextFile,false);    outputLine="ID" + "\t" + "X"+ "\t"+ "Y";    for (    WhiteboxRaster gatGrid : gatGrids) {      fileName=gatGrid.getShortHeaderFile();      outputLine=outputLine + "\t" + fileName;      if (includeStatistics) {        outputLine=outputLine + "\t" + fileName+ "_min"+ "\t"+ fileName+ "_max"+ "\t"+ fileName+ "_mean";      }    }    outputLine=outputLine + "\t" + "Name";    streamWriter.write(outputLine + System.lineSeparator());    while ((tempLine=bufferedReader.readLine()) != null) {      numberOfLines=numberOfLines + 1;    }    bufferedReader.close();    bufferedReader=new BufferedReader(new FileReader(inputTextFile));    tempLine=bufferedReader.readLine();    counter=1;    while ((tempLine=bufferedReader.readLine()) != null) {      line=tempLine.split("\t");      counter=counter + 1;      if ((line.length != 3) && (line.length != 4)) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains an unexpected number of elements.");        return;      }      if (!IsInteger(line[0]) || !IsDouble(line[1]) || !IsDouble(line[2])) {        JOptionPane.showMessageDialog(null,"Error in input file. Line " + counter + " contains a value of an expected type.");        return;      }      id=Integer.parseInt(line[0]);      xCoord=Double.parseDouble(line[1]);      yCoord=Double.parseDouble(line[2]);      if (line.length == 4) {        name=line[3];      } else {        name="";      }      outputLine=id + "\t" + xCoord+ "\t"+ yCoord;      for (      WhiteboxRaster gatGrid : gatGrids) {        gridRes=gatGrid.getCellSizeX();        xGridcell=(int)((xCoord - gatGrid.getWest()) / gridRes);        yGridcell=(int)((yCoord - gatGrid.getSouth()) / gridRes);        deltaX=xCoord - ((xGridcell + 0.5) * gridRes + gatGrid.getWest());        deltaY=yCoord - ((yGridcell + 0.5) * gridRes + gatGrid.getSouth());        yGridcell=InvertYCoord(gatGrid,yGridcell);        if (deltaX > 0) {          dXi=1;        } else {          dXi=-1;        }        if (deltaY > 0) {          dYi=-1;        } else {          dYi=1;        }        deltaX=Math.abs(deltaX);        deltaY=Math.abs(deltaY);        if (interpolateValues) {          if ((gatGrid.getValue(yGridcell,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell + dYi,xGridcell) == gatGrid.getNoDataValue()) || (gatGrid.getValue(yGridcell,xGridcell + dXi) == gatGrid.getNoDataValue())|| (gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) == gatGrid.getNoDataValue())) {            value=gatGrid.getNoDataValue();          } else           if (deltaX == 0 && deltaY == 0) {            value=gatGrid.getValue(yGridcell,xGridcell);          } else {            ww[0]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(deltaY,2));            average=gatGrid.getValue(yGridcell,xGridcell) * ww[0];            w=ww[0];            ww[1]=1 / Math.sqrt(Math.pow(deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell) * ww[1];            w=w + ww[1];            ww[2]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(deltaY,2));            average=average + gatGrid.getValue(yGridcell,xGridcell + dXi) * ww[2];            w=w + ww[2];            ww[3]=1 / Math.sqrt(Math.pow(gridRes - deltaX,2) + Math.pow(gridRes - deltaY,2));            average=average + gatGrid.getValue(yGridcell + dYi,xGridcell + dXi) * ww[3];            w=w + ww[3];            value=average / w;          }        } else {          value=gatGrid.getValue(yGridcell,xGridcell);        }        outputLine=outputLine + "\t" + value;        if (includeStatistics) {          value=gatGrid.getValue(yGridcell,xGridcell);          if (value == gatGrid.getNoDataValue()) {            min=Double.MAX_VALUE;            max=Double.MIN_VALUE;            sum=0;            sumCount=0;            mean=gatGrid.getNoDataValue();          } else {            min=value;            max=value;            sum=value;            sumCount=1;          }          for (int c=0; c < 8; c++) {            neighbourValue=gatGrid.getValue(yGridcell + yd[c],xGridcell + xd[c]);            if (neighbourValue != gatGrid.getNoDataValue()) {              if (neighbourValue < min) {                min=neighbourValue;              }              if (neighbourValue > max) {                max=neighbourValue;              }              sum=sum + neighbourValue;              sumCount=sumCount + 1;            }          }          if (sumCount == 0) {            min=gatGrid.getNoDataValue();            max=gatGrid.getNoDataValue();          } else {            mean=sum / sumCount;          }          outputLine=outputLine + "\t" + min+ "\t"+ max+ "\t"+ mean;        }      }      if (name != "") {        outputLine=outputLine + "\t" + name;      }      streamWriter.write(outputLine + System.lineSeparator());      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / numberOfLines);      updateProgress("",(int)progress);    }    for (    WhiteboxRaster gatGrid : gatGrids) {      gatGrid.close();    }    streamWriter.close();  } catch (  IOException|HeadlessException|NumberFormatException e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private static String convertAsciiHDSWwn(String wwn){  if (wwn.length() % 2 != 0) {    return null;  }  StringBuilder output=new StringBuilder();  for (int i=0; i < wwn.length(); i+=2) {    String str=wwn.substring(i,i + 2);    output.append((char)Integer.parseInt(str,16));  }  return output.toString();}  }
class C{  @Bean public FanoutExchange authenticationExchange(){  return new FanoutExchange(AmqpSettings.AUTHENTICATION_EXCHANGE,false,true);}  }
class C{  public static void applyBindings(Map<Property,RDFNode> map,Map<String,RDFNode> bindings){  for (  Property property : new ArrayList<Property>(map.keySet())) {    RDFNode value=map.get(property);    Variable var=SPINFactory.asVariable(value);    if (var != null) {      String varName=var.getName();      RDFNode b=bindings.get(varName);      if (b != null) {        map.put(property,b);      }    }  }}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener,FunctionTable aTable) throws javax.xml.transform.TransformerException {  m_funcTable=aTable;  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();  m_patternString=exprString;  XPathParser parser=new XPathParser(errorListener,locator);  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver); else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver); else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));  Expression expr=compiler.compile(0);  this.setExpression(expr);  if ((null != locator) && locator instanceof ExpressionNode) {    expr.exprSetParent((ExpressionNode)locator);  }}  }
class C{  public void showProgress(boolean show){  mCircle.showRing(show);}  }
class C{  public option[] addElement(String[] element){  option[] option=new option[element.length];  for (int x=0; x < element.length; x++) {    option[x]=new option().addElement(element[x]);  }  return (option);}  }
class C{  public Matrix zoomOut(float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(0.7f,0.7f,x,y);  return save;}  }
class C{  public String toString(){  return buffer.toString();}  }
class C{  public boolean isRepeatable(){  return true;}  }
class C{  public static int countNonZeroBeginning(final double[] data){  int i=data.length - 1;  while (i >= 0) {    if (data[i--] != 0) {      break;    }  }  return i + 2;}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  @Transactional public void processSuccessMsg(final ReceiptHeader onlinePaymentReceiptHeader,final PaymentResponse paymentResponse){  final List<ReceiptDetail> existingReceiptDetails=new ArrayList<ReceiptDetail>(0);  for (  final ReceiptDetail receiptDetail : onlinePaymentReceiptHeader.getReceiptDetails())   if (!FinancialsUtil.isRevenueAccountHead(receiptDetail.getAccounthead(),chartOfAccountsHibernateDAO.getBankChartofAccountCodeList(),persistenceService)) {    final ReceiptDetail newReceiptDetail=new ReceiptDetail();    if (receiptDetail.getOrdernumber() != null)     newReceiptDetail.setOrdernumber(receiptDetail.getOrdernumber());    if (receiptDetail.getDescription() != null)     newReceiptDetail.setDescription(receiptDetail.getDescription());    if (receiptDetail.getIsActualDemand() != null)     newReceiptDetail.setIsActualDemand(receiptDetail.getIsActualDemand());    if (receiptDetail.getFunction() != null)     newReceiptDetail.setFunction(receiptDetail.getFunction());    if (receiptDetail.getCramountToBePaid() != null)     newReceiptDetail.setCramountToBePaid(receiptDetail.getCramountToBePaid());    newReceiptDetail.setCramount(receiptDetail.getCramount());    newReceiptDetail.setAccounthead(receiptDetail.getAccounthead());    newReceiptDetail.setDramount(receiptDetail.getDramount());    newReceiptDetail.setPurpose(receiptDetail.getPurpose());    existingReceiptDetails.add(newReceiptDetail);  }  final List<ReceiptDetail> reconstructedList=collectionsUtil.reconstructReceiptDetail(onlinePaymentReceiptHeader,existingReceiptDetails);  ReceiptDetail debitAccountDetail=null;  if (reconstructedList != null)   debitAccountDetail=collectionCommon.addDebitAccountHeadDetails(onlinePaymentReceiptHeader.getTotalAmount(),onlinePaymentReceiptHeader,BigDecimal.ZERO,onlinePaymentReceiptHeader.getTotalAmount(),CollectionConstants.INSTRUMENTTYPE_ONLINE);  receiptHeaderService.reconcileOnlineSuccessPayment(onlinePaymentReceiptHeader,paymentResponse.getTxnDate(),paymentResponse.getTxnReferenceNo(),paymentResponse.getTxnAmount(),paymentResponse.getAuthStatus(),reconstructedList,debitAccountDetail);  LOGGER.debug("Persisted receipt after receiving success message from the payment gateway");}  }
class C{  static TextLine recycle(TextLine tl){  tl.mText=null;  tl.mPaint=null;  tl.mDirections=null;  tl.mMetricAffectingSpanSpanSet.recycle();  tl.mCharacterStyleSpanSet.recycle();  tl.mReplacementSpanSpanSet.recycle();synchronized (sCached) {    for (int i=0; i < sCached.length; ++i) {      if (sCached[i] == null) {        sCached[i]=tl;        break;      }    }  }  return null;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean isLIFO(){  return this.algorithm.isLIFO();}  }
class C{  public static boolean validateHostname(Collection<String> dnsServers,String hostname){  for (  String dnsServer : dnsServers) {    if (validateHostname(dnsServer,hostname)) {      return true;    }  }  return false;}  }
class C{  private DoubleFactor createQueryFactor(Query query){  List<DoubleFactor> factors=new LinkedList<DoubleFactor>();  Collection<String> queryVars=query.getQueryVars();  Assignment evidence=query.getEvidence();  for (  BNode n : query.getFilteredSortedNodes()) {    DoubleFactor basicFactor=makeFactor(n,evidence);    if (!basicFactor.isEmpty()) {      factors.add(basicFactor);      if (!queryVars.contains(n.getId())) {        factors=sumOut(n.getId(),factors);      }    }  }  DoubleFactor finalProduct=pointwiseProduct(factors);  finalProduct=addEvidencePairs(finalProduct,query);  finalProduct.trim(queryVars);  return finalProduct;}  }
class C{  public static synchronized void sendSimpleResponseProto(int reqResult,Socket socket){  Logging.log("Sending simple server response... ");  ServerResp respMsg=buildServerRespMsg(reqResult);  sendMsgProto(MsgType.SERVER_RESP,respMsg,socket);}  }
class C{  public static void copy(File fromFile,File toFile,int bufSize) throws IOException {  FileInputStream fis=new FileInputStream(fromFile);  FileOutputStream fos=new FileOutputStream(toFile);  if (bufSize <= 0) {    bufSize=1024;  }  byte[] bytes=new byte[bufSize];  int numRead;  while ((numRead=fis.read(bytes)) > 0) {    fos.write(bytes,0,numRead);  }  fis.close();  fos.close();}  }
class C{  public void create(View view){  DomainConfig instance=new DomainConfig();  saveProperties(instance);  Spinner spin=(Spinner)findViewById(R.id.creationModeSpin);  instance.creationMode=(String)spin.getSelectedItem();  HttpAction action=new HttpCreateAction(this,instance);  action.execute();}  }
class C{  @Override public boolean shouldFilter(){  String requestUri=RequestContext.getCurrentContext().getRequest().getRequestURI();  for (  Route route : routeLocator.getRoutes()) {    String serviceUrl=route.getFullPath();    String serviceName=route.getId();    if (requestUri.startsWith(serviceUrl.substring(0,serviceUrl.length() - 2))) {      if (isAuthorizedRequest(serviceUrl,serviceName,requestUri)) {        return false;      }    }  }  return true;}  }
class C{  @ToString public String toString(){  return ISODateTimeFormat.yearMonth().print(this);}  }
class C{  public PopupDialog(Shell parent,int shellStyle,boolean takeFocusOnOpen,boolean persistSize,boolean persistLocation,boolean showDialogMenu,boolean showPersistActions,String titleText,String infoText){  this(parent,shellStyle,takeFocusOnOpen,persistSize,persistLocation,showDialogMenu,showPersistActions,titleText,infoText,true);}  }
class C{  public Configuration build(){  return new Configuration(this.encoding,this.decorator);}  }
class C{  public void extractZipEntries(byte[] zipFileData) throws IOException {  byte[] buffer=new byte[1024];  ;  new File(getTempDirName()).mkdirs();  ZipInputStream zis=new ZipInputStream(new ByteArrayInputStream(zipFileData));  ZipEntry ze=zis.getNextEntry();  while (ze != null) {    if (!ze.isDirectory()) {      String fileName=ze.getName();      File newFile=new File(getTempDirName() + File.separator + fileName);      new File(newFile.getParent()).mkdirs();      FileOutputStream fos=new FileOutputStream(newFile);      int len;      while ((len=zis.read(buffer)) > 0) {        fos.write(buffer,0,len);      }      fos.close();      if (LOG.isDebugEnabled()) {        LOG.debug("File unzipped: " + newFile.getAbsoluteFile());      }    }    ze=zis.getNextEntry();  }  zis.closeEntry();  zis.close();}  }
class C{  private CharArrayList(final char... a){  this(a,0,a.length);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getAllSeriesInfo();}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public void test_simple_optional_01() throws Exception {  new TestHelper("simple-optional-01","simple-optional-01.rq","simple-optional-01.ttl","simple-optional-01.srx").runTest();}  }
class C{  public MultiDirFilePropertyEditor(){}  }
class C{  public NorwegianLightStemFilter(TokenStream input,int flags){  super(input);  stemmer=new NorwegianLightStemmer(flags);}  }
class C{  public void testRemoveJobClassNotFound() throws Exception {  String DB_NAME="XmlDeleteNonExistsJobTestDatasase";  String SCHEDULER_NAME="XmlDeleteNonExistsJobTestScheduler";  JdbcQuartzTestUtilities.createDatabase(DB_NAME);  JobStoreTX jobStore=new JobStoreTX();  jobStore.setDataSource(DB_NAME);  jobStore.setTablePrefix("QRTZ_");  jobStore.setInstanceId("AUTO");  DirectSchedulerFactory.getInstance().createScheduler(SCHEDULER_NAME,"AUTO",new SimpleThreadPool(4,Thread.NORM_PRIORITY),jobStore);  Scheduler scheduler=SchedulerRepository.getInstance().lookup(SCHEDULER_NAME);  try {    JobDetail jobDetail=JobBuilder.newJob(MyJob.class).withIdentity("testjob1","DEFAULT").usingJobData("foo","foo").build();    Trigger trigger=TriggerBuilder.newTrigger().withIdentity("testjob1","DEFAULT").withSchedule(CronScheduleBuilder.cronSchedule("* * * * * ?")).build();    scheduler.scheduleJob(jobDetail,trigger);    JobDetail jobDetail2=scheduler.getJobDetail(jobDetail.getKey());    Trigger trigger2=scheduler.getTrigger(trigger.getKey());    Assert.assertThat(jobDetail2.getJobDataMap().getString("foo"),Matchers.is("foo"));    Assert.assertThat(trigger2,Matchers.instanceOf(CronTrigger.class));    modifyStoredJobClassName();    ClassLoadHelper clhelper=new CascadingClassLoadHelper();    clhelper.initialize();    XMLSchedulingDataProcessor processor=new XMLSchedulingDataProcessor(clhelper);    processor.processFileAndScheduleJobs("org/quartz/xml/delete-no-jobclass.xml",scheduler);    jobDetail2=scheduler.getJobDetail(jobDetail.getKey());    trigger2=scheduler.getTrigger(trigger.getKey());    Assert.assertThat(trigger2,Matchers.nullValue());    Assert.assertThat(jobDetail2,Matchers.nullValue());    jobDetail2=scheduler.getJobDetail(new JobKey("job1","DEFAULT"));    trigger2=scheduler.getTrigger(new TriggerKey("job1","DEFAULT"));    Assert.assertThat(jobDetail2.getJobDataMap().getString("foo"),Matchers.is("bar"));    Assert.assertThat(trigger2,Matchers.instanceOf(SimpleTrigger.class));  }  finally {    scheduler.shutdown(false);    JdbcQuartzTestUtilities.destroyDatabase(DB_NAME);  }}  }
class C{  public boolean isSetTaskId(){  return EncodingUtils.testBit(issetBitfield,TASKID_ISSET_ID);}  }
class C{  public void write(File file) throws Exception {  write(new BufferedWriter(new FileWriter(file)));}  }
class C{  @Override public String toString(){  return (getClass().getSimpleName() + "[]");}  }
class C{  protected void fireManagedAccountsUpdated(String accountNumber){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).managedAccountsUpdated(accountNumber);    }  }}  }
class C{  public void mouseEntered(MouseEvent e){  getHandler().mouseEntered(e);}  }
class C{  public Column objective(boolean objective){  this.objective=objective;  return this;}  }
class C{  public void end(){  if (total == UNKNOWN && getCount() > 0) {    wakeUp();  }}  }
class C{  public void startCDATA(Augmentations augs) throws XNIException {  try {    if (fLexicalHandler != null) {      fLexicalHandler.startCDATA();    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public PacketOutputStream writeStringLength(final String str){  try {    final byte[] strBytes=str.getBytes("UTF-8");    assureBufferCapacity(strBytes.length + 9);    writeFieldLength(strBytes.length);    buffer.put(strBytes);  } catch (  UnsupportedEncodingException u) {  }  return this;}  }
class C{  public boolean isForWritePng(){  return adapter2png != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void onProgressUpdate(Renderable... renderables){  super.onProgressUpdate(renderables);  Renderable shape=renderables[0];  statusText.setText("Added " + shape.getDisplayName() + " feature...");  shapesLayer.addRenderable(shape);  getWorldWindow().requestRedraw();}  }
class C{  @Override public void drawBytes(byte[] data,int offset,int length,int x,int y){  drawString(new String(data,offset,length),x,y);}  }
class C{  protected void drawCenterText(Canvas c){  String centerText=mChart.getCenterText();  if (mChart.isDrawCenterTextEnabled() && centerText != null) {    PointF center=mChart.getCenterCircleBox();    String[] lines=centerText.split("\n");    float maxlineheight=0f;    for (    String line : lines) {      float curHeight=Utils.calcTextHeight(mCenterTextPaint,line);      if (curHeight > maxlineheight)       maxlineheight=curHeight;    }    float linespacing=maxlineheight * 0.25f;    float totalheight=maxlineheight * lines.length - linespacing * (lines.length - 1);    int cnt=lines.length;    float y=center.y;    for (int i=0; i < lines.length; i++) {      String line=lines[lines.length - i - 1];      c.drawText(line,center.x,y + maxlineheight * cnt - totalheight / 2f,mCenterTextPaint);      cnt--;      y-=linespacing;    }  }}  }
class C{  public void recompilationAborted(CompilationPlan plan){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix("Failed recompiling (at level " + plan.options.getOptLevel() + " "+ plan.method);  }}  }
class C{  public static Angle midAngle(Angle a1,Angle a2){  if (a1 == null || a2 == null) {    throw new IllegalArgumentException("Angle Is Null");  }  return Angle.fromDegrees(0.5 * (a1.degrees + a2.degrees));}  }
class C{  protected void newCertBtnListener(){  NewCertificateDialogData data=new NewCertificateDialogData();  NewCertificateDialog dialog=new NewCertificateDialog(getShell(),data,"");  int returnCode=dialog.open();  if (returnCode == Window.OK) {    String certPath=data.getCerFilePath();    certTxt.setText(certPath != null ? certPath.replace('\\','/') : certPath);    certInfoTxt.setText(getCertInfo(certTxt.getText()));  }}  }
class C{  protected L10NManager(String language,String locale){  this.language=language;  this.locale=locale;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.885 -0500",hash_original_method="76DC40F01B1B28CF1F7E32C3EB72CACA",hash_generated_method="92CF2FE8CC2C838B673167A60F18DE24") public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mCapabilities.size());  for (  Entry<Integer,String> entry : mCapabilities.entrySet()) {    dest.writeInt(entry.getKey().intValue());    dest.writeString(entry.getValue());  }}  }
class C{  public boolean isApplication(){  return ((tag & 0x0c0) == 0x040);}  }
class C{  public void addPartAtIndex(@NonNull String part,int index){  this.mParts.set(index,part);  this.mInsertedParts++;  Log.d(TAG,"Inserting part " + part + " at index "+ index);}  }
class C{  public static Db open(DataSource ds){  try {    return new Db(ds.getConnection());  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  public static double[] v3Normalize(double[] vector,double norm){  double im=1 / (isZero(norm) ? v3Length(vector) : norm);  return new double[]{vector[0] * im,vector[1] * im,vector[2] * im};}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  void hideSecurityButton(){  if (mSecurityButton.getVisibility() == View.GONE)   return;  if (mSecurityButtonHideAnimator.isRunning())   return;  mSecurityButtonHideAnimator.start();}  }
class C{  private Encoders(){}  }
class C{  public boolean isSetOrderEnum(){  return this.orderEnum != null;}  }
class C{  public boolean equals(X509CertInfo other){  if (this == other) {    return (true);  } else   if (rawCertInfo == null || other.rawCertInfo == null) {    return (false);  } else   if (rawCertInfo.length != other.rawCertInfo.length) {    return (false);  }  for (int i=0; i < rawCertInfo.length; i++) {    if (rawCertInfo[i] != other.rawCertInfo[i]) {      return (false);    }  }  return (true);}  }
class C{  public void itemStateChanged(ItemEvent e){  DefaultCellEditor.this.stopCellEditing();}  }
class C{  public void assertAbsolute(final File expectedParentDir,final String expectedChildName){  assertAbsolute(new File(expectedParentDir,expectedChildName).getPath());}  }
class C{  protected CompletionQuery(Term term,BitsProducer filter){  validate(term.text());  this.term=term;  this.filter=filter;}  }
class C{  public DNSIncoming(DatagramPacket packet) throws IOException {  super(0,0,packet.getPort() == DNSConstants.MDNS_PORT);  this._packet=packet;  InetAddress source=packet.getAddress();  this._messageInputStream=new MessageInputStream(packet.getData(),packet.getLength());  this._receivedTime=System.currentTimeMillis();  this._senderUDPPayload=DNSConstants.MAX_MSG_TYPICAL;  try {    this.setId(_messageInputStream.readUnsignedShort());    this.setFlags(_messageInputStream.readUnsignedShort());    if (this.getOperationCode() > 0) {      throw new IOException("Received a message with a non standard operation code. Currently unsupported in the specification.");    }    int numQuestions=_messageInputStream.readUnsignedShort();    int numAnswers=_messageInputStream.readUnsignedShort();    int numAuthorities=_messageInputStream.readUnsignedShort();    int numAdditionals=_messageInputStream.readUnsignedShort();    if (logger.isLoggable(Level.FINER)) {      logger.finer("DNSIncoming() questions:" + numQuestions + " answers:"+ numAnswers+ " authorities:"+ numAuthorities+ " additionals:"+ numAdditionals);    }    if ((numQuestions * 5 + (numAnswers + numAuthorities + numAdditionals) * 11) > packet.getLength()) {      throw new IOException("questions:" + numQuestions + " answers:"+ numAnswers+ " authorities:"+ numAuthorities+ " additionals:"+ numAdditionals);    }    if (numQuestions > 0) {      for (int i=0; i < numQuestions; i++) {        _questions.add(this.readQuestion());      }    }    if (numAnswers > 0) {      for (int i=0; i < numAnswers; i++) {        DNSRecord rec=this.readAnswer(source);        if (rec != null) {          _answers.add(rec);        }      }    }    if (numAuthorities > 0) {      for (int i=0; i < numAuthorities; i++) {        DNSRecord rec=this.readAnswer(source);        if (rec != null) {          _authoritativeAnswers.add(rec);        }      }    }    if (numAdditionals > 0) {      for (int i=0; i < numAdditionals; i++) {        DNSRecord rec=this.readAnswer(source);        if (rec != null) {          _additionals.add(rec);        }      }    }    if (_messageInputStream.available() > 0) {      throw new IOException("Received a message with the wrong length.");    }  } catch (  Exception e) {    logger.log(Level.WARNING,"DNSIncoming() dump " + print(true) + "\n exception ",e);    IOException ioe=new IOException("DNSIncoming corrupted message");    ioe.initCause(e);    throw ioe;  }}  }
class C{  public SearchRequest(String... indices){  indices(indices);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.407 -0400",hash_original_method="43BF27BC739D1713ADFA799FFFBC5AF3",hash_generated_method="C32EF07222AD72865E861229065BF230") public static short readSwappedShort(byte[] data,int offset){  return (short)(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));}  }
class C{  public VersionDependency(String version){  _version=version;}  }
class C{  public AccountHeaderBuilder withThreeSmallProfileImages(boolean threeSmallProfileImages){  this.mThreeSmallProfileImages=threeSmallProfileImages;  return this;}  }
class C{  private boolean __waitEspDeviceDisconnected() throws InterruptedException {  for (int retry=0; retry < 20; retry++) {    String ssid=EspBaseApiUtil.getWifiConnectedSsid();    log.error("ssid: " + ssid);    if (ssid != null && !(isESPDevice(ssid) && !isESPDevice2(ssid))) {      return true;    } else {      Thread.sleep(1000);    }  }  return false;}  }
class C{  public EntitySource createEntitySource(){  EntitySourceImpl entitySource=new EntitySourceImpl();  return entitySource;}  }
class C{  public int addHistogramPlot(String name,Color color,double[][] XY,double[] dX){  return ((Plot2DCanvas)plotCanvas).addHistogramPlot(name,color,XY,dX);}  }
class C{  private static Class<? extends Activity> guessErrorActivityClass(Context context){  Class<? extends Activity> resolvedActivityClass;  resolvedActivityClass=CustomActivityOnCrash.getErrorActivityClassWithIntentFilter(context);  if (resolvedActivityClass == null) {    resolvedActivityClass=DefaultErrorActivity.class;  }  return resolvedActivityClass;}  }
class C{  void updateMfgListContents(String specific){  if (mMfgListener != null) {    mMfgList.removeListSelectionListener(mMfgListener);  }  String currentValue=mMfgList.getSelectedValue();  List<String> allMfgList=DecoderIndexFile.instance().getMfgNameList();  List<String> theMfgList=new ArrayList<>();  for (int i=0; i < allMfgList.size(); i++) {    if ((specific != null && (allMfgList.get(i).equals(specific))) || (0 != DecoderIndexFile.instance().matchingDecoderList(allMfgList.get(i),null,null,null,null,null).size())) {      theMfgList.add(allMfgList.get(i));    }  }  mMfgList.setListData(theMfgList.toArray(new String[0]));  mMfgList.setSelectedValue(currentValue,true);  if (mMfgListener != null) {    mMfgList.addListSelectionListener(mMfgListener);  }}  }
class C{  public Source(String filename){  this.filename=filename;}  }
class C{  @EventHandler(ignoreCancelled=true) public void onHangingBreakByEntity(HangingBreakByEntityEvent event){  if (event.getEntity() instanceof Player && !canInteract((Player)event.getEntity())) {    event.setCancelled(true);  }}  }
class C{  protected static void close_files() throws java.io.IOException {  if (input_file != null)   input_file.close();  if (parser_class_file != null)   parser_class_file.close();  if (symbol_class_file != null)   symbol_class_file.close();}  }
class C{  protected void finalize(){  close();}  }
class C{  private static void addAll(final List<Byte> list,final byte[] data){  for (  final byte b : data) {    list.add(b);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatasubstringexceedsvalue.class,args);}  }
class C{  public Entry(final String name,final ErrorInformation error){  this.id=null;  this.name=name;  this.size=-1;  this.error=error;}  }
class C{  public CLabel(String text){  super(text,DEFAULT_ALIGNMENT);  init();}  }
class C{  public void removeListener(final IZyGraphLayoutSettingsListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static void notify(final Image image,final String title,final String text,final NotifierTheme theme){  final Shell shell=createNotificationWindow(image,title,text,NotifierColorsFactory.getColorsForTheme(theme));  makeShellAppears(shell);}  }
class C{  public static byte[] signMessage(PrivateKey key,byte[] message){  lock.lock();  byte[] result=null;  try {    if (signatureEngine == null) {      signatureEngine=Signature.getInstance("SHA1withRSA");    }    signatureEngine.initSign(key);    signatureEngine.update(message);    result=signatureEngine.sign();  } catch (  Exception e) {    e.printStackTrace();  }  lock.unlock();  return result;}  }
class C{  public void testParserDelegate() throws IOException {  JsonParser jp=new JsonFactory().createJsonParser("[ 1, true ]");  assertNull(jp.getCurrentToken());  assertToken(JsonToken.START_ARRAY,jp.nextToken());  assertEquals("[",jp.getText());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertEquals(1,jp.getIntValue());  assertToken(JsonToken.VALUE_TRUE,jp.nextToken());  assertTrue(jp.getBooleanValue());  assertToken(JsonToken.END_ARRAY,jp.nextToken());  jp.close();  assertTrue(jp.isClosed());}  }
class C{  public static double[][] buildRotationMatrix(EvolutionState state,long rotationSeed,int N){  if (rotationSeed == ROTATION_SEED)   state.output.warnOnce("Default rotation seed being used (" + rotationSeed + ")");  MersenneTwisterFast rand=new MersenneTwisterFast(rotationSeed);  for (int i=0; i < 624 * 4; i++)   rand.nextInt();  double o[][]=new double[N][N];  for (int i=0; i < N; i++)   for (int k=0; k < N; k++)   o[i][k]=rand.nextGaussian();  for (int i=0; i < N; i++) {    double[] no=new double[N];    for (int k=0; k < N; k++)     no[k]=o[i][k];    for (int j=0; j < i; j++) {      double d=dot(o[i],o[j]);      double[] val=scalarMul(d,o[j]);      no=sub(no,val);    }    o[i]=normalize(no);  }  return o;}  }
class C{  boolean recover(int stage){  if (trace.isDebugEnabled()) {    trace.debug("log recover stage: " + stage);  }  if (stage == RECOVERY_STAGE_ALLOCATE) {    PageInputStream in=new PageInputStream(store,logKey,firstTrunkPage,firstDataPage);    usedLogPages=in.allocateAllPages();    in.close();    return true;  }  PageInputStream pageIn=new PageInputStream(store,logKey,firstTrunkPage,firstDataPage);  DataReader in=new DataReader(pageIn);  int logId=0;  Data data=store.createData();  boolean isEmpty=true;  try {    int pos=0;    while (true) {      int x=in.readByte();      if (x < 0) {        break;      }      pos++;      isEmpty=false;      if (x == UNDO) {        int pageId=in.readVarInt();        int size=in.readVarInt();        if (size == 0) {          in.readFully(data.getBytes(),store.getPageSize());        } else         if (size == 1) {          Arrays.fill(data.getBytes(),0,store.getPageSize(),(byte)0);        } else {          in.readFully(compressBuffer,size);          try {            compress.expand(compressBuffer,0,size,data.getBytes(),0,store.getPageSize());          } catch (          ArrayIndexOutOfBoundsException e) {            DbException.convertToIOException(e);          }        }        if (stage == RECOVERY_STAGE_UNDO) {          if (!undo.get(pageId)) {            if (trace.isDebugEnabled()) {              trace.debug("log undo {0}",pageId);            }            store.writePage(pageId,data);            undo.set(pageId);            undoAll.set(pageId);          } else {            if (trace.isDebugEnabled()) {              trace.debug("log undo skip {0}",pageId);            }          }        }      } else       if (x == ADD) {        int sessionId=in.readVarInt();        int tableId=in.readVarInt();        Row row=readRow(store.getDatabase().getRowFactory(),in,data);        if (stage == RECOVERY_STAGE_UNDO) {          store.allocateIfIndexRoot(pos,tableId,row);        } else         if (stage == RECOVERY_STAGE_REDO) {          if (isSessionCommitted(sessionId,logId,pos)) {            if (trace.isDebugEnabled()) {              trace.debug("log redo + table: " + tableId + " s: "+ sessionId+ " "+ row);            }            store.redo(tableId,row,true);          } else {            if (trace.isDebugEnabled()) {              trace.debug("log ignore s: " + sessionId + " + table: "+ tableId+ " "+ row);            }          }        }      } else       if (x == REMOVE) {        int sessionId=in.readVarInt();        int tableId=in.readVarInt();        long key=in.readVarLong();        if (stage == RECOVERY_STAGE_REDO) {          if (isSessionCommitted(sessionId,logId,pos)) {            if (trace.isDebugEnabled()) {              trace.debug("log redo - table: " + tableId + " s:"+ sessionId+ " key: "+ key);            }            store.redoDelete(tableId,key);          } else {            if (trace.isDebugEnabled()) {              trace.debug("log ignore s: " + sessionId + " - table: "+ tableId+ " "+ key);            }          }        }      } else       if (x == TRUNCATE) {        int sessionId=in.readVarInt();        int tableId=in.readVarInt();        if (stage == RECOVERY_STAGE_REDO) {          if (isSessionCommitted(sessionId,logId,pos)) {            if (trace.isDebugEnabled()) {              trace.debug("log redo truncate table: " + tableId);            }            store.redoTruncate(tableId);          } else {            if (trace.isDebugEnabled()) {              trace.debug("log ignore s: " + sessionId + " truncate table: "+ tableId);            }          }        }      } else       if (x == PREPARE_COMMIT) {        int sessionId=in.readVarInt();        String transaction=in.readString();        if (trace.isDebugEnabled()) {          trace.debug("log prepare commit " + sessionId + " "+ transaction+ " pos: "+ pos);        }        if (stage == RECOVERY_STAGE_UNDO) {          int page=pageIn.getDataPage();          setPrepareCommit(sessionId,page,transaction);        }      } else       if (x == ROLLBACK) {        int sessionId=in.readVarInt();        if (trace.isDebugEnabled()) {          trace.debug("log rollback " + sessionId + " pos: "+ pos);        }      } else       if (x == COMMIT) {        int sessionId=in.readVarInt();        if (trace.isDebugEnabled()) {          trace.debug("log commit " + sessionId + " pos: "+ pos);        }        if (stage == RECOVERY_STAGE_UNDO) {          setLastCommitForSession(sessionId,logId,pos);        }      } else       if (x == NOOP) {      } else       if (x == CHECKPOINT) {        logId++;      } else       if (x == FREE_LOG) {        int count=in.readVarInt();        for (int i=0; i < count; i++) {          int pageId=in.readVarInt();          if (stage == RECOVERY_STAGE_REDO) {            if (!usedLogPages.get(pageId)) {              store.free(pageId,false);            }          }        }      } else {        if (trace.isDebugEnabled()) {          trace.debug("log end");          break;        }      }    }  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.FILE_CORRUPTED_1) {      trace.debug("log recovery stopped");    } else {      throw e;    }  }catch (  IOException e) {    trace.debug("log recovery completed");  }  undo=new BitField();  if (stage == RECOVERY_STAGE_REDO) {    usedLogPages=null;  }  return isEmpty;}  }
class C{  public static MarketplaceRemovedException convertToApi(org.oscm.internal.types.exception.MarketplaceRemovedException oldEx){  return convertExceptionToApi(oldEx,MarketplaceRemovedException.class);}  }
class C{  public ProjectionComponent(final ProjectionModel model,final String name){  super(name);  projectionModel=model;  int numPoints=projectionModel.getProjector().getNumPoints();  for (int i=0; i < numPoints; i++) {    DataPoint point=projectionModel.getProjector().getDownstairs().getPoint(i);    if (point != null) {      projectionModel.addPoint(point.get(0),point.get(1));    }  }  initializeConsumers();  addListener();}  }
class C{  public N4StatusAreaProvider(final WorkbenchStatusDialogManagerImpl manager){  this.manager=manager;}  }
class C{  public static void main(String[] args) throws Exception {  new SetContribution().start(args);}  }
class C{  private void warmup(){  MergeSort mergeSort=new MergeSort(Runtime.getRuntime().availableProcessors());  for (int i=0; i < 1000; i++) {    mergeSort.sort(generateArray(1000));  }}  }
class C{  public boolean remove(AbstractPlugin plugin){  return plugins.remove(plugin);}  }
class C{  public TCPInputStream(MultiplexingSocket socket){  if (socket == null)   throw new NullPointerException("socket");  this.socket=socket;}  }
class C{  public String initialCountTipText(){  return "Initial class value count.";}  }
class C{  public final void waitToProcess(TXLockId lk,DM dm){  waitForMemberToDepart(lk.getMemberId(),dm);  final TXCommitMessage mess;synchronized (this.txInProgress) {    mess=(TXCommitMessage)this.txInProgress.get(lk);  }  if (mess != null) {synchronized (mess) {      while (!mess.wasProcessed()) {        try {          mess.wait();        } catch (        InterruptedException ie) {          Thread.currentThread().interrupt();          logger.error(LocalizedMessage.create(LocalizedStrings.TxFarSideTracker_WAITING_TO_COMPLETE_ON_MESSAGE_0_CAUGHT_AN_INTERRUPTED_EXCEPTION,mess),ie);          break;        }      }    }  } else {    for (int i=this.txHistory.length - 1; i >= 0; --i) {      if (lk.equals(this.txHistory[i])) {        return;      }    }  }}  }
class C{  private AndRule(final Rule first,final Rule second){  super();  this.firstRule=first;  this.secondRule=second;}  }
class C{  private static int compareVersions(String v1,String v2){  String[] parts1=v1.split("\\.");  String[] parts2=v2.split("\\.");  int len=Math.max(parts1.length,parts2.length);  for (int i=0; i < len; i++) {    int p1=0;    int p2=0;    try {      p1=Integer.parseInt(parts1[i],10);    } catch (    Exception ex) {    }    try {      p2=Integer.parseInt(parts2[i],10);    } catch (    Exception ex) {    }    int comp=p1 - p2;    if (comp != 0)     return comp;  }  return 0;}  }
class C{  public static void hideFab(FloatingActionButton fab){  fab.hide();  fab.animate().translationY(fab.getHeight() + 100).setInterpolator(new AccelerateInterpolator(2)).start();}  }
class C{  protected void joinRows(Map<String,Object> row1,Map<String,Object> row2){  Map<String,Object> join=new HashMap<String,Object>();  if (row1 != null) {    for (    Index index : table1Columns) {      index.filter(row1,join);    }  }  if (row2 != null) {    for (    Index index : table2Columns) {      index.filter(row2,join);    }  }  outport.emit(join);}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  ((CanListener)client).reply((CanReply)r);}  }
class C{  public synchronized void rollbackTo(long version){  checkOpen();  if (version == 0) {    for (    MVMap<?,?> m : maps.values()) {      m.close();    }    meta.clear();    chunks.clear();    if (fileStore != null) {      fileStore.clear();    }    maps.clear();    freedPageSpace.clear();    currentVersion=version;    setWriteVersion(version);    metaChanged=false;    return;  }  DataUtils.checkArgument(isKnownVersion(version),"Unknown version {0}",version);  for (  MVMap<?,?> m : maps.values()) {    m.rollbackTo(version);  }  for (long v=currentVersion; v >= version; v--) {    if (freedPageSpace.size() == 0) {      break;    }    freedPageSpace.remove(v);  }  meta.rollbackTo(version);  metaChanged=false;  boolean loadFromFile=false;  ArrayList<Integer> remove=new ArrayList<Integer>();  Chunk keep=null;  for (  Chunk c : chunks.values()) {    if (c.version > version) {      remove.add(c.id);    } else     if (keep == null || keep.id < c.id) {      keep=c;    }  }  if (remove.size() > 0) {    Collections.sort(remove,Collections.reverseOrder());    revertTemp(version);    loadFromFile=true;    for (    int id : remove) {      Chunk c=chunks.remove(id);      long start=c.block * BLOCK_SIZE;      int length=c.len * BLOCK_SIZE;      fileStore.free(start,length);      WriteBuffer buff=getWriteBuffer();      buff.limit(length);      Arrays.fill(buff.getBuffer().array(),(byte)0);      write(start,buff.getBuffer());      releaseWriteBuffer(buff);      sync();    }    lastChunk=keep;    writeStoreHeader();    readStoreHeader();  }  for (  MVMap<?,?> m : New.arrayList(maps.values())) {    int id=m.getId();    if (m.getCreateVersion() >= version) {      m.close();      maps.remove(id);    } else {      if (loadFromFile) {        m.setRootPos(getRootPos(meta,id),-1);      }    }  }  if (lastChunk != null) {    for (    Chunk c : chunks.values()) {      meta.put(Chunk.getMetaKey(c.id),c.asString());    }  }  currentVersion=version;  setWriteVersion(version);}  }
class C{  public void registerInstallation(){  try {    File timestampFile=new File(getExtractDir(),".cargo");    BufferedWriter bw=new BufferedWriter(new FileWriter(timestampFile));    bw.write("Do not remove this file");    bw.close();  } catch (  Exception e) {  }}  }
class C{  public static short[] copyOf(short[] original,int newLength){  short[] copy=new short[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  @SuppressWarnings("unchecked") public static Stream<? extends Document> traverseOver(Document document){  requireNonNull(document);  return Trees.traverse(document,null,Trees.TraversalOrder.DEPTH_FIRST_PRE);}  }
class C{  private String nextAT() throws IOException {  hasQE=false;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if (pos == chars.length) {    return null;  }  beg=pos;  pos++;  for (; pos < chars.length && chars[pos] != '=' && chars[pos] != ' '; pos++) {  }  if (pos >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  end=pos;  if (chars[pos] == ' ') {    for (; pos < chars.length && chars[pos] != '=' && chars[pos] == ' '; pos++) {    }    if (chars[pos] != '=' || pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }  }  pos++;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if ((end - beg > 4) && (chars[beg + 3] == '.') && (chars[beg] == 'O' || chars[beg] == 'o')&& (chars[beg + 1] == 'I' || chars[beg + 1] == 'i')&& (chars[beg + 2] == 'D' || chars[beg + 2] == 'd')) {    beg+=4;  }  return new String(chars,beg,end - beg);}  }
class C{  private void createOneGpxFile(){  String fileName=GPX_FILE_TRACK_NAME + "." + TrackFileFormat.GPX.getExtension();  String fileContent="<?xml version=\"1.0\" encoding=\"UTF-8\"?> " + "<gpx " + "version=\"1.1\" "+ "creator=\"Created by Google My Tracks on Android.\" "+ "xmlns=\"http://www.topografix.com/GPX/1/1\" "+ "xmlns:topografix=\"http://www.topografix.com/GPX/Private/TopoGrafix/0/1\" "+ "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "+ "xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1"+ " http://www.topografix.com/GPX/1/1/gpx.xsd"+ " http://www.topografix.com/GPX/Private/TopoGrafix/0/1"+ " http://www.topografix.com/GPX/Private/TopoGrafix/0/1/topografix.xsd\"> "+ "<metadata> "+ "<name><![CDATA[" + GPX_FILE_TRACK_NAME + "]]></name> "+ "<desc><![CDATA[testTrackDescription1373523959524]]></desc> "+ "</metadata> "+ "<trk> "+ "<name><![CDATA["+ GPX_FILE_TRACK_NAME+ "]]></name> "+ "<desc><![CDATA[testTrackDescription1373523959524]]></desc> "+ "<type><![CDATA[TestActivityType]]></type> "+ "<extensions><topografix:color>c0c0c0</topografix:color></extensions> "+ "<trkseg> "+ "<trkpt lat=\""+ GPX_FILE_INIT_LATITUDE+ "\" lon=\""+ GPX_FILE_INIT_LONGITUDE+ "\"> "+ "<time>2013-07-10T08:00:00.000Z</time> <ele>"+ GPX_FILE_ELEVATION_MIN+ "</ele>"+ "</trkpt> "+ "<trkpt lat=\"39.2995\" lon=\"116.0005\"> "+ "<time>2013-07-10T08:00:01.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.299\" lon=\"116.001\"> "+ "<time>2013-07-10T08:00:02.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.2985\" lon=\"116.0015\"> "+ "<time>2013-07-10T08:00:03.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.298\" lon=\"116.002\"> "+ "<time>2013-07-10T08:00:04.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.2975\" lon=\"116.0025\"> "+ "<time>2013-07-10T08:00:05.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.297\" lon=\"116.003\"> "+ "<time>2013-07-10T08:00:06.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.2965\" lon=\"116.0035\"> "+ "<time>2013-07-10T08:00:07.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.296\" lon=\"116.004\"> "+ "<time>2013-07-10T08:00:08.000Z</time> "+ "</trkpt> "+ "<trkpt lat=\"39.2955\" lon=\"116.0045\"> "+ "<time>2013-07-10T08:00:09.000Z</time> <ele>"+ GPX_FILE_ELEVATION_MAX+ "</ele>"+ "</trkpt> "+ "</trkseg> "+ "</trk> "+ "</gpx>";  FileOutputStream fileOutputStream=null;  try {    File file=new File(FileUtils.getPath(TrackFileFormat.GPX.getExtension()) + File.separator + fileName);    if (!file.exists()) {      file.createNewFile();    }    fileOutputStream=new FileOutputStream(file);    fileOutputStream.write(fileContent.getBytes());    fileOutputStream.flush();  } catch (  IOException e) {    Log.e(TAG,"Unable to write GPX file",e);    fail();  } finally {    if (fileOutputStream != null) {      try {        fileOutputStream.close();      } catch (      IOException e) {        Log.e(TAG,"Unable to close GPX file",e);        fail();      }    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProject[").append(get_ID()).append("-").append(getValue()).append(",ProjectCategory=").append(getProjectCategory()).append("]");  return sb.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void processDigest(byte[] digest,int offset){  int i, j;  int lastWord;  long nBits=messageLength << 3;  engineUpdate((byte)0x80);  i=0;  lastWord=(buffer[BYTES_OFFSET] + 3) >> 2;  if (buffer[BYTES_OFFSET] != 0) {    if (lastWord < 15) {      i=lastWord;    } else {      if (lastWord == 15) {        buffer[15]=0;      }      SHA1Impl.computeHash(buffer);      i=0;    }  }  Arrays.fill(buffer,i,14,0);  buffer[14]=(int)(nBits >>> 32);  buffer[15]=(int)(nBits & 0xFFFFFFFF);  SHA1Impl.computeHash(buffer);  j=offset;  for (i=HASH_OFFSET; i < HASH_OFFSET + 5; i++) {    int k=buffer[i];    digest[j]=(byte)(k >>> 24);    digest[j + 1]=(byte)(k >>> 16);    digest[j + 2]=(byte)(k >>> 8);    digest[j + 3]=(byte)(k);    j+=4;  }  engineReset();}  }
class C{  public void doImportInternal(final JobContext context) throws IOException {  doDataImport(context);}  }
class C{  public static boolean isValidEmail(CharSequence target){  return !TextUtils.isEmpty(target) && android.util.Patterns.EMAIL_ADDRESS.matcher(target).matches();}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  public PubControl(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public WeatherLayerRenderer(String weather,Color color,Composite blend){  SpriteStore sr=SpriteStore.get();  String name="data/sprites/weather/" + weather + ".png";  Sprite template;  if (sr.getSprite(name) == sr.getFailsafe()) {    template=new EmptySprite(1024,1024,null);    Logger.getLogger(WeatherLayerRenderer.class).warn("Weather sprite not found:" + name);  } else {    template=sr.getModifiedSprite(name,color,blend);  }  Tileset ts=new SpriteTileset(sr,template,template.getHeight());  TilesetGroupAnimationMap animationMap=TileStore.getAnimationMap();  if (animationMap != null && animationMap.get(name) != null) {    this.weather=animationMap.get(name).getSprite(ts,0);  } else {    this.weather=ts.getSprite(0);  }}  }
class C{  public static Position pos(int line,int column){  return new Position(line,column);}  }
class C{  public void init(OutputStream os){  _digest.init();  _os=os;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MonthDateFormat)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  MonthDateFormat that=(MonthDateFormat)obj;  if (!Arrays.equals(this.months,that.months)) {    return false;  }  if (!Arrays.equals(this.showYear,that.showYear)) {    return false;  }  if (!this.yearFormatter.equals(that.yearFormatter)) {    return false;  }  return true;}  }
class C{  public Object readCollection(Element node) throws Exception {  Collection<Object> coll;  Vector<Object> v;  Vector<Element> children;  Element child;  int i;  int index;  int currIndex;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  children=XMLDocument.getChildTags(node);  v=new Vector<Object>();  index=children.size() - 1;  for (i=0; i < children.size(); i++) {    child=children.get(i);    currIndex=Integer.parseInt(child.getAttribute(ATT_NAME));    if (currIndex > index) {      index=currIndex;    }  }  v.setSize(index + 1);  for (i=0; i < children.size(); i++) {    child=children.get(i);    v.set(Integer.parseInt(child.getAttribute(ATT_NAME)),invokeReadFromXML(child));  }  coll=Utils.cast(Class.forName(node.getAttribute(ATT_CLASS)).newInstance());  coll.addAll(v);  return coll;}  }
class C{  private View obtainView(int position,boolean[] isScrap){  isScrap[0]=false;  View scrapView;  scrapView=mRecycleBin.getScrapView(position);  View child;  if (scrapView != null) {    if (DBG)     Log.d(TAG,"getView from scrap position:" + position);    child=mAdapter.getView(position,scrapView,this);    if (child != scrapView) {      mRecycleBin.addScrapView(scrapView,position);    } else {      isScrap[0]=true;    }  } else {    if (DBG)     Log.d(TAG,"getView position:" + position);    child=mAdapter.getView(position,null,this);  }  return child;}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public boolean attempt(Address old,Address value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  @Override public V remove(Object key){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public boolean isValid(String value){  if (value == null) {    return false;  }  Matcher urlMatcher=URL_PATTERN.matcher(value);  if (!urlMatcher.matches()) {    return false;  }  String scheme=urlMatcher.group(PARSE_URL_SCHEME);  if (!isValidScheme(scheme)) {    return false;  }  String authority=urlMatcher.group(PARSE_URL_AUTHORITY);  if ("file".equals(scheme) && "".equals(authority)) {  } else {    if (!isValidAuthority(authority)) {      return false;    }  }  if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {    return false;  }  if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {    return false;  }  if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {    return false;  }  return true;}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearPrevModifiedTime(){  fieldSetFlags()[7]=false;  return this;}  }
class C{  public boolean isPermanentState(){  return mPermanentState;}  }
class C{  @Nullable public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity,@NotNull AnalysisScope scope,@NotNull InspectionManager manager,@NotNull GlobalInspectionContext globalContext){  return null;}  }
class C{  public static BlockMirror checkIfBlockMirrorExistsInDB(String mirrorNativeGuid,DbClient dbClient){  List<BlockMirror> activeMirrors=CustomQueryUtility.getActiveBlockMirrorByNativeGuid(dbClient,mirrorNativeGuid);  Iterator<BlockMirror> mirrorItr=activeMirrors.iterator();  return mirrorItr.hasNext() ? mirrorItr.next() : null;}  }
class C{  public int innerClassIndex(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 2);}  }
class C{  @Override public void reset(){  super.reset();  this.setOverAlpha(mDefaultOverAlpha);}  }
class C{  @Util public static void addReferrer(){  String referrer=getReferrer();  if (StringUtils.isNotBlank(referrer)) {    renderArgs.put(REFERRER,referrer);  }}  }
class C{  public DrawerBuilder withShowDrawerOnFirstLaunch(boolean showDrawerOnFirstLaunch){  this.mShowDrawerOnFirstLaunch=showDrawerOnFirstLaunch;  return this;}  }
class C{  @SuppressWarnings("unchecked") protected String doIt() throws Exception {  MView viewFrom=new MView(getCtx(),p_AD_View_ID,get_TrxName());  MView viewTo=new MView(getCtx(),p_Record_ID,get_TrxName());  String name=viewTo.getName();  String value=viewTo.getValue();  viewTo.copyValues(viewFrom,viewTo);  viewTo.setName(name);  viewTo.setValue(value);  viewTo.saveEx();  for (  MViewDefinition viewDefinitionFrom : viewFrom.getViewDefinitions()) {    MViewDefinition viewDefinitionTo=new MViewDefinition(getCtx(),0,get_TrxName());    viewDefinitionTo.copyValues(viewDefinitionFrom,viewDefinitionTo);    viewDefinitionTo.setAD_View_ID(viewTo.getAD_View_ID());    viewDefinitionTo.saveEx();    for (    MViewColumn viewColumnFrom : viewDefinitionFrom.getADViewColunms()) {      MViewColumn viewColumnTo=new MViewColumn(getCtx(),0,get_TrxName());      viewColumnTo.copyValues(viewColumnFrom,viewColumnTo);      viewColumnTo.setAD_View_Definition_ID(viewDefinitionTo.getAD_View_Definition_ID());      viewColumnTo.saveEx();    }  }  return "@Ok@";}  }
class C{  public XmlParser(boolean validating,boolean namespaceAware,boolean allowDocTypeDeclaration) throws ParserConfigurationException, SAXException {  SAXParserFactory factory=FactorySupport.createSaxParserFactory();  factory.setNamespaceAware(namespaceAware);  this.namespaceAware=namespaceAware;  factory.setValidating(validating);  setQuietly(factory,XMLConstants.FEATURE_SECURE_PROCESSING,true);  setQuietly(factory,"http://apache.org/xml/features/disallow-doctype-decl",!allowDocTypeDeclaration);  reader=factory.newSAXParser().getXMLReader();}  }
class C{  public Instant plus(ReadableDuration duration){  return withDurationAdded(duration,1);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.147 -0500",hash_original_method="6E517A9D20FAB02C8C7ECBD26B835783",hash_generated_method="C55B90E5292B86C7CB54EE3BBC993E7C") @Override public void flush() throws IOException {synchronized (lock) {    out.flush();  }}  }
class C{  private void initPresets(){  Map<String,String> defaultColors=new HashMap<>();  defaultColors.put("backgroundColor","#FAFAFA");  defaultColors.put("foregroundColor","#111111");  defaultColors.put("infoColor","#001480");  defaultColors.put("compactColor","#A0A0A0");  defaultColors.put("highlightColor","Red");  defaultColors.put("inputBackgroundColor","White");  defaultColors.put("inputForegroundColor","Black");  defaultColors.put("searchResultColor","LightYellow");  defaultColors.put("searchResultColor2","#FFFF80");  presets.put("default",defaultColors);  Map<String,String> darkColors=new HashMap<>();  darkColors.put("backgroundColor","#111111");  darkColors.put("foregroundColor","LightGrey");  darkColors.put("infoColor","DeepSkyBlue");  darkColors.put("compactColor","#A0A0A0");  darkColors.put("highlightColor","Red");  darkColors.put("inputBackgroundColor","#222222");  darkColors.put("inputForegroundColor","White");  darkColors.put("searchResultColor","DarkSlateBlue");  darkColors.put("searchResultColor2","SlateBlue");  presets.put("dark",darkColors);  Map<String,String> darkColors2=new HashMap<>();  darkColors2.put("backgroundColor","Black");  darkColors2.put("foregroundColor","White");  darkColors2.put("infoColor","#FF9900");  darkColors2.put("compactColor","#FFCC00");  darkColors2.put("highlightColor","#66FF66");  darkColors2.put("inputBackgroundColor","#FFFFFF");  darkColors2.put("inputForegroundColor","#000000");  darkColors2.put("searchResultColor","#333333");  darkColors2.put("searchResultColor2","#555555");  presets.put("dark2",darkColors2);}  }
class C{  public double distance(Envelope env){  if (intersects(env))   return 0;  double dx=0.0;  if (maxx < env.minx)   dx=env.minx - maxx; else   if (minx > env.maxx)   dx=minx - env.maxx;  double dy=0.0;  if (maxy < env.miny)   dy=env.miny - maxy; else   if (miny > env.maxy)   dy=miny - env.maxy;  if (dx == 0.0)   return dy;  if (dy == 0.0)   return dx;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static <T0,T1,T2,T3,T4,T5,T6>void print(T0 object0,T1 object1,T2 object2,T3 object3,T4 object4,T5 object5,T6 object6){  System.out.println("" + (object0 == null ? "NullType" : object0) + " "+ (object1 == null ? "NullType" : object1)+ " "+ (object2 == null ? "NullType" : object2)+ " "+ (object3 == null ? "NullType" : object3)+ " "+ (object4 == null ? "NullType" : object4)+ " "+ (object5 == null ? "NullType" : object5)+ " "+ (object6 == null ? "NullType" : object6));}  }
class C{  public void connect() throws IOException {  delegate.connect();}  }
class C{  public void put(Object tree,int flags,int startPc,int endPc){  entries.append(new CRTEntry(tree,flags,startPc,endPc));}  }
class C{  public synchronized void weakAssociateAll(Vertex associate,Vertex target,Vertex type,float correctnessMultiplier){  Collection<Relationship> relationships=getRelationships(associate);  if (relationships == null) {    return;  }  for (  Relationship relationship : relationships) {    relationship.getTarget().addWeakRelationship(type,target,correctnessMultiplier);  }}  }
class C{  public synchronized boolean removeAll(Collection<?> c){  return super.removeAll(c);}  }
class C{  protected ToolTipAction(){  super("ToolTip Control");}  }
class C{  public ModeledGuacamoleConfiguration(){}  }
class C{  static Issue saveIssue(IMAPMessage message,Project project) throws MessagingException, PermissionDenied, IOException, NoSuchAlgorithmException {  User sender=IMAPMessageUtil.extractSender(message);  if (!AccessControl.isProjectResourceCreatable(sender,project,ResourceType.ISSUE_POST)) {    throw new PermissionDenied(cannotCreateMessage(sender,project,ResourceType.ISSUE_POST));  }  Content parsedMessage=extractContent(message);  String messageId=message.getMessageID();  Address[] recipients=message.getAllRecipients();  String subject=message.getSubject();  return saveIssue(subject,project,sender,parsedMessage,messageId,recipients);}  }
class C{  @Override public ImmutableRangeSet<C> subRangeSet(Range<C> range){  if (!isEmpty()) {    Range<C> span=span();    if (range.encloses(span)) {      return this;    } else     if (range.isConnected(span)) {      return new ImmutableRangeSet<C>(intersectRanges(range));    }  }  return of();}  }
class C{  public byte[] toByteArrayNoPreamble(){  byte[] retVal=new byte[fields.numBytesToSerialize()];  fields.intoByteArray(retVal,0);  return retVal;}  }
class C{  protected void engineInit(int strength,SecureRandom random){  if ((strength >= 512) && (strength <= 1024) && (strength % 64 == 0)) {    this.valueN=160;  } else   if (strength == 2048) {    this.valueN=224;  } else {    throw new InvalidParameterException("Prime size should be 512 - 1024, or 2048");  }  this.valueL=strength;  this.seedLen=valueN;  this.random=random;}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  @SuppressWarnings("unused") protected void storeToken(@NonNull Account account,@NonNull String tokenType,@NonNull String token,@Nullable String refreshToken){  accountManager.setAuthToken(account,tokenType,token);  if (refreshToken != null) {    accountManager.setAuthToken(account,String.format("%s_refresh",tokenType),refreshToken);  }}  }
class C{  public PeriodType withWeeksRemoved(){  return withFieldRemoved(2,"NoWeeks");}  }
class C{  public static void scaleM(double[] m,int mOffset,double x,double y,double z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[mi]*=x;    m[4 + mi]*=y;    m[8 + mi]*=z;  }}  }
class C{  public void buscarProcedimientoGenericaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedasHelper.buscarProcedimientoComunLogic(mappings,(BusquedaElementosForm)form,request,response);  PrecondicionesBusquedaFondosGenerica precondiciones=(PrecondicionesBusquedaFondosGenerica)getFromTemporalSession(request,FondosConstants.PRECONDICIONES_BUSQUEDA_KEY);  setReturnActionFordward(request,mappings.findForward(precondiciones.getForwardListado()));}  }
class C{  public static Binding asBinding(final QuerySolution map){  if (map != null) {    BindingHashMap result=new BindingHashMap();    Iterator<String> varNames=map.varNames();    while (varNames.hasNext()) {      String varName=varNames.next();      RDFNode node=map.get(varName);      if (node != null) {        result.add(Var.alloc(varName),node.asNode());      }    }    return result;  } else {    return null;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenomodificationallowederrEE.class,args);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  WIFILockInfoDao.createTable(db,ifNotExists);}  }
class C{  protected void bcsPreDeserializationHook(ObjectInputStream ois) throws IOException, ClassNotFoundException {}  }
class C{  public static String encodeMD5(String s){  try {    MessageDigest digest=MessageDigest.getInstance("MD5");    digest.update(s.getBytes());    byte messageDigest[]=digest.digest();    return toHexString(messageDigest);  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return "";}  }
class C{  public void testMiddleDelimiter() throws Exception {  byte[] delim=array(F.t(wrap(2),8));  byte[] data=array(F.t(wrap(1),8),F.t(delim,1),F.t(wrap(1),8));  assertSplit(0,4,0,16,data,delim);  assertSplit(0,8,0,16,data,delim);  assertSplit(0,12,0,16,data,delim);  assertSplit(0,16,0,16,data,delim);  assertSplit(0,20,0,24,data,delim);  assertSplit(0,24,0,24,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);  assertSplitNull(2,10,data,delim);  assertSplitNull(2,14,data,delim);  assertSplit(2,18,16,8,data,delim);  assertSplit(2,22,16,8,data,delim);  assertSplitNull(8,4,data,delim);  assertSplitNull(8,8,data,delim);  assertSplit(8,12,16,8,data,delim);  assertSplit(8,16,16,8,data,delim);  assertSplitNull(10,2,data,delim);  assertSplitNull(10,6,data,delim);  assertSplit(10,10,16,8,data,delim);  assertSplit(10,14,16,8,data,delim);  assertSplit(16,4,16,8,data,delim);  assertSplit(16,8,16,8,data,delim);  assertSplitNull(18,2,data,delim);  assertSplitNull(18,6,data,delim);}  }
class C{  public void rollback(){  checkNotClosed();  store.rollbackTo(this,logId,0);  store.endTransaction(this);}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  public static Script pydmlFromUrl(URL scriptUrl){  return scriptFromUrl(scriptUrl,ScriptType.PYDML);}  }
class C{  public static <T>LazyQueueX<T> fromIterable(Iterable<T> it){  return fromIterable(QueueX.<T>defaultCollector(),it);}  }
class C{  public void addField(String fieldName,String type,short flags){  short fieldNameIndex=itsConstantPool.addUtf8(fieldName);  short typeIndex=itsConstantPool.addUtf8(type);  itsFields.add(new ClassFileField(fieldNameIndex,typeIndex,flags));}  }
class C{  @Override public void addTopCount(CarbonDimensionLevel dimensionLevel,CarbonMeasure measure,int count){  topCounts.add(new TopCount(dimensionLevel,measure,count,TopCount.TopNType.TOP));}  }
class C{  static void update(SynthContext state,Graphics g){  paintRegion(state,g,null);}  }
class C{  protected BeanConnection createBeanConnection(int sourcePos,int targetPos,String event,boolean hidden) throws Exception {  BeanConnection result;  BeanInfo compInfo;  EventSetDescriptor[] esds;  int i;  BeanInstance instSource;  BeanInstance instTarget;  result=null;  if ((sourcePos == -1) || (targetPos == -1)) {    return result;  }  instSource=(BeanInstance)m_BeanInstances.get(sourcePos);  instTarget=(BeanInstance)m_BeanInstances.get(targetPos);  compInfo=Introspector.getBeanInfo(((BeanInstance)m_BeanInstances.get(sourcePos)).getBean().getClass());  esds=compInfo.getEventSetDescriptors();  for (i=0; i < esds.length; i++) {    if (esds[i].getName().equals(event)) {      result=new BeanConnection(instSource,instTarget,esds[i],m_vectorIndex);      result.setHidden(hidden);      break;    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.168 -0500",hash_original_method="1EA8AE44B2BF05DF27C07019783A5F43",hash_generated_method="FE4B58D9741614D3DCF53109A5ACB4F6") public void layerProtocol(HttpContext context,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (!this.tracker.isTunnelled()) {    throw new IllegalStateException("Protocol layering without a tunnel not supported.");  }  if (this.tracker.isLayered()) {    throw new IllegalStateException("Multiple protocol layering not supported.");  }  final HttpHost target=tracker.getTargetHost();  connOperator.updateSecureConnection(this.connection,target,context,params);  this.tracker.layerProtocol(this.connection.isSecure());}  }
class C{  public void testInvalidShift() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  addPointToDoc("field",document,80,-65);  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(0,searcher.count(newRectQuery("field",90,90,-180,0)));  reader.close();  writer.close();  dir.close();}  }
class C{  private void heapify(){  Object[] array=queue;  int n=size;  int half=(n >>> 1) - 1;  Comparator<? super E> cmp=comparator;  if (cmp == null) {    for (int i=half; i >= 0; i--)     siftDownComparable(i,(E)array[i],array,n);  } else {    for (int i=half; i >= 0; i--)     siftDownUsingComparator(i,(E)array[i],array,n,cmp);  }}  }
class C{  @Override public Void call() throws Exception {  MulticastSocket datagramSocket=null;  ExecutorService service=null;  try {    datagramSocket=new MulticastSocket(port);    datagramSocket.joinGroup(group);    service=Executors.newSingleThreadScheduledExecutor(new DaemonThreadFactory("GangliaListener"));    final byte[] buffer=new byte[BUFFER_SIZE];    final DatagramPacket packet=new DatagramPacket(buffer,0,buffer.length);    listening=true;    while (true) {      try {        datagramSocket.receive(packet);        if (Thread.interrupted()) {          break;        }        final IGangliaMessage msg=decodeRecord(packet.getData(),packet.getOffset(),packet.getLength());        if (msg != null) {          service.submit(new DispatchTask(handler,msg));        }      } catch (      Throwable t) {        log.warn(t,t);      }    }    return (Void)null;  }  finally {    if (service != null) {      service.shutdown();    }    if (datagramSocket != null) {      datagramSocket.close();    }    listening=false;  }}  }
class C{  protected AbstractLayoutCache createLayoutCache(){  if (isLargeModel() && getRowHeight() > 0) {    return new FixedHeightLayoutCache();  }  return new VariableHeightLayoutCache();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Carny.getInstance().isLoveAir(getAir(stack)));}  }
class C{  public EcuCodeList(){  this("com.fr3ts0n.ecu.prot.obd.res.codes");}  }
class C{  private static Object cloneClass2(Object obj,RVMType type) throws OutOfMemoryError {  RVMClass cls=type.asClass();  Object newObj=resolvedNewScalar(cls);  for (  RVMField f : cls.getInstanceFields()) {    if (f.isReferenceType()) {      f.setObjectValueUnchecked(newObj,f.getObjectValueUnchecked(obj));    } else {      TypeReference fieldType=f.getType();      if (Barriers.NEEDS_BOOLEAN_PUTFIELD_BARRIER && fieldType.isBooleanType()) {        f.setBooleanValueUnchecked(newObj,f.getBooleanValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_BYTE_PUTFIELD_BARRIER && fieldType.isByteType()) {        f.setByteValueUnchecked(newObj,f.getByteValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_CHAR_PUTFIELD_BARRIER && fieldType.isCharType()) {        f.setCharValueUnchecked(newObj,f.getCharValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_DOUBLE_PUTFIELD_BARRIER && fieldType.isDoubleType()) {        f.setDoubleValueUnchecked(newObj,f.getDoubleValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_FLOAT_PUTFIELD_BARRIER && fieldType.isFloatType()) {        f.setFloatValueUnchecked(newObj,f.getFloatValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_INT_PUTFIELD_BARRIER && fieldType.isIntType()) {        f.setIntValueUnchecked(newObj,f.getIntValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_LONG_PUTFIELD_BARRIER && fieldType.isLongType()) {        f.setLongValueUnchecked(newObj,f.getLongValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_SHORT_PUTFIELD_BARRIER && fieldType.isShortType()) {        f.setShortValueUnchecked(newObj,f.getShortValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_WORD_PUTFIELD_BARRIER && fieldType.isWordType()) {        f.setWordValueUnchecked(newObj,f.getWordValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_ADDRESS_PUTFIELD_BARRIER && fieldType.isAddressType()) {        f.setAddressValueUnchecked(newObj,f.getAddressValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_EXTENT_PUTFIELD_BARRIER && fieldType.isExtentType()) {        f.setExtentValueUnchecked(newObj,f.getExtentValueUnchecked(obj));        continue;      } else       if (Barriers.NEEDS_OFFSET_PUTFIELD_BARRIER && fieldType.isOffsetType()) {        f.setOffsetValueUnchecked(newObj,f.getOffsetValueUnchecked(obj));        continue;      } else {        int size=f.getSize();        Offset offset=f.getOffset();        if (VM.BuildFor32Addr) {          if (size == BYTES_IN_INT) {            int bits=Magic.getIntAtOffset(obj,offset);            Magic.setIntAtOffset(newObj,offset,bits);            continue;          } else           if (size == BYTES_IN_LONG) {            long bits=Magic.getLongAtOffset(obj,offset);            Magic.setLongAtOffset(newObj,offset,bits);            continue;          }        } else {          if (size == BYTES_IN_LONG) {            long bits=Magic.getLongAtOffset(obj,offset);            Magic.setLongAtOffset(newObj,offset,bits);            continue;          } else           if (size == BYTES_IN_INT) {            int bits=Magic.getIntAtOffset(obj,offset);            Magic.setIntAtOffset(newObj,offset,bits);            continue;          }        }        if (size == BYTES_IN_CHAR) {          char bits=Magic.getCharAtOffset(obj,offset);          Magic.setCharAtOffset(newObj,offset,bits);        } else {          if (VM.VerifyAssertions)           VM._assert(size == BYTES_IN_BYTE);          byte bits=Magic.getByteAtOffset(obj,offset);          Magic.setByteAtOffset(newObj,offset,bits);        }      }    }  }  return newObj;}  }
class C{  public boolean isWriteSetted(int acceptor){  updateArrays();  int p=this.controller.getCurrentViewPos(acceptor);  if (p >= 0) {    return write[p] != null;  } else {    return false;  }}  }
class C{  public SerialException(String msg){  super(msg);}  }
class C{  public int countStatusByType(StatusType statusType){  int count=0;  for (  Status status : statuses) {    if (status.getStatusType() == statusType) {      count+=1;    }  }  return count;}  }
class C{  Context2(Context2 parent){  if (parent == null) {    prefixTable=new Hashtable();    uriTable=new Hashtable();    elementNameTable=null;    attributeNameTable=null;  } else   setParent(parent);}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,getComponent());}  }
class C{  public ASN1ValueCollection(int tagNumber,ASN1Type type){  super(tagNumber);  this.type=type;}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public Source(String url){  super(url);}  }
class C{  public RegistrationAspect(final TaskExecutor taskExecutor,final PassPhrazeGenerator phrazeGenerator,final HashHelper passwordHashHelper,final MailService mailService,final MailComposer mailComposer,final ThemeService themeService){  super(taskExecutor);  this.passwordHashHelper=passwordHashHelper;  this.phrazeGenerator=phrazeGenerator;  this.mailService=mailService;  this.mailComposer=mailComposer;  this.themeService=themeService;}  }
class C{  public void removeListener(Listener<Dibit> listener){  mBroadcaster.removeListener(listener);}  }
class C{  public void add(double[] values){  for (  double value : values) {    add(value);  }}  }
class C{  public boolean isInitOK(){  return m_initOK;}  }
class C{  public final AC shrinkWeight(float w,int... indexes){  return shrink(w,indexes);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.max(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.max(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.max(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  super(fixNoHttpResponseException,httpPort,httpsPort);}  }
class C{  public static void translate(MapWidget v,Location location,Point point){  MapCalibrationData calibration=v.getConfig().getGpsConfig().getCalibration();  if (calibration == null) {    Log.w("GeoUtils","Can't translate. No calibration data!");  }  calibration.translate(location,point);}  }
class C{  public static synchronized void printFinalMethodStats(PrintStream log){  final int MAX_BIT_PATTERN=7;  int[] summaryArray=new int[MAX_BIT_PATTERN + 1];  int[] recompsAtLevel2Array=new int[MAX_BIT_PATTERN + 1];  int totalRecompsAtLevel2=0;  for (  RVMMethod meth : table.keys()) {    LinkedList<ControllerPlan> planList=table.get(meth);    int bitPattern=0;    int recompsAtLevel2=0;    for (    ControllerPlan plan : planList) {      byte status=plan.getStatus();      if (status == ControllerPlan.COMPLETED || status == ControllerPlan.OUTDATED) {        int optLevel=plan.getCompPlan().options.getOptLevel();        if (optLevel == 2 && bitIsSet(bitPattern,2)) {          recompsAtLevel2++;        }        bitPattern=setBitPattern(bitPattern,optLevel);      }    }    if (Controller.options.LOGGING_LEVEL >= 2) {      log.println("Method: " + meth + ", bitPattern: "+ bitPattern+ ", recompsAtLevel2: "+ recompsAtLevel2);    }    summaryArray[bitPattern]++;    recompsAtLevel2Array[bitPattern]+=recompsAtLevel2;  }  int totalUniqueMethods=0;  for (int i=1; i <= MAX_BIT_PATTERN; i++) {    log.print("    Base");    for (int optLevel=0; optLevel <= 2; optLevel++) {      if (bitIsSet(i,optLevel)) {        log.print(" -> " + optLevel);      }    }    log.print(": " + summaryArray[i]);    if (recompsAtLevel2Array[i] > 0) {      totalRecompsAtLevel2+=recompsAtLevel2Array[i];      log.println(" (" + recompsAtLevel2Array[i] + " opt level 2 recomps)");    } else {      log.println();    }    totalUniqueMethods=totalUniqueMethods + summaryArray[i];  }  log.println("  Num recompilations At level 2: " + totalRecompsAtLevel2);  log.println("  Num unique methods recompiled: " + totalUniqueMethods + "\n");}  }
class C{  @Override public Properties trackEnrollClicked(String courseId,boolean email_opt_in){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  aEvent.data.putValue(Keys.COURSE_ID,courseId);  aEvent.data.putValue(Keys.EMAIL_OPT_IN,email_opt_in);  aEvent.properties.putValue(Keys.NAME,Values.USER_COURSE_ENROLL);  aEvent.setAppNameContext();  aEvent.properties=addCategoryToBiEvents(aEvent.properties,Values.CONVERSION,courseId);  tracker.track(Events.ENROLL_COURSES,aEvent.properties);  return aEvent.properties;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SKILL_REF__REF:    if (resolve)     return getRef();  return basicGetRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static List<DashboardDto> transformToDto(List<Dashboard> dashboards){  if (dashboards == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<DashboardDto> result=new ArrayList<DashboardDto>();  for (  Dashboard dashboard : dashboards) {    result.add(transformToDto(dashboard));  }  return result;}  }
class C{  public final boolean isInternal(final String strName){  return m_globalDB.isInternal(strName);}  }
class C{  @Override public void detachSingleVolumeMirror(StorageSystem storage,URI mirror,TaskCompleter taskCompleter) throws DeviceControllerException {  NamedURI sourceVolumeURI=null;  try {    BlockMirror mirrorObj=dbClient.queryObject(BlockMirror.class,mirror);    Volume source=dbClient.queryObject(Volume.class,mirrorObj.getSource());    sourceVolumeURI=mirrorObj.getSource();    boolean status=hdsProtectionOperations.modifyShadowImagePair(storage,source.getNativeId(),mirrorObj.getNativeId(),HDSApiProtectionManager.ShadowImageOperationType.split);    if (status) {      String taskId=UUID.randomUUID().toString();      TaskCompleter completer=new SimpleTaskCompleter(BlockMirror.class,mirror,taskId);      HDSJob syncjob=new HDSReplicationSyncJob(storage.getId(),source.getNativeId(),mirrorObj.getNativeId(),ReplicationStatus.SPLIT,completer);      hdsCommandHelper.waitForAsyncHDSJob(syncjob);    } else {      log.info("Replication info is not available on pair management server");    }    hdsProtectionOperations.deleteShadowImagePair(storage,source,mirrorObj);    hdsProtectionOperations.removeDummyLunPath(storage,mirror);    taskCompleter.ready(dbClient);  } catch (  Exception e) {    String errorMsg=String.format(DETACH_ERROR_MSG_FORMAT,mirror,sourceVolumeURI != null ? sourceVolumeURI.toString() : HDSConstants.SPACE_STR);    log.error(errorMsg,e);    ServiceError serviceError=DeviceControllerErrors.hds.methodFailed("detachSingleVolumeMirror",e.getMessage());    taskCompleter.error(dbClient,serviceError);  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.382 -0400",hash_original_method="6E26F3926C5C4BE64BEC3614C2578ECF",hash_generated_method="DCA5893E95EBCAA6A167DCC40A92D6C6") @Override public int read(byte[] b,int off,int len) throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  long maxRead=max >= 0 ? Math.min(len,max - pos) : len;  int bytesRead=in.read(b,off,(int)maxRead);  if (bytesRead == -1) {    return -1;  }  pos+=bytesRead;  return bytesRead;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ABSTRACT_METHOD_DECLARATION___TYPE_1:    setType_1(TYPE_1_EDEFAULT);  return;case UmplePackage.ABSTRACT_METHOD_DECLARATION___METHOD_DECLARATOR_1:getMethodDeclarator_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void addRosterListener(RosterExchangeListener rosterExchangeListener){synchronized (rosterExchangeListeners) {    if (!rosterExchangeListeners.contains(rosterExchangeListener)) {      rosterExchangeListeners.add(rosterExchangeListener);    }  }}  }
class C{  boolean completedQuietPeriod(){  if (shutdownStartTimeNanos == null) {    shutdownStartTimeNanos=ticker.read();  }  if (pendingResCount != 0 || !completedBlockingTasks()) {    return false;  }  final long shutdownStartTimeNanos=this.shutdownStartTimeNanos;  final long currentTimeNanos=ticker.read();  final long duration;  if (updatedLastResTimeNanos) {    duration=Math.min(currentTimeNanos - shutdownStartTimeNanos,currentTimeNanos - lastResTimeNanos);  } else {    duration=currentTimeNanos - shutdownStartTimeNanos;  }  return duration >= quietPeriodNanos;}  }
class C{  public static void deleteCookieWebUser(HttpServletRequest request,HttpServletResponse response,String COOKIE_NAME){  Cookie cookie=new Cookie(COOKIE_NAME," ");  cookie.setComment("adempiere Web User");  cookie.setPath(request.getContextPath());  cookie.setMaxAge(1);  response.addCookie(cookie);}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback){  sendUpdate(obj,keepCallback,PluginResult.Status.OK);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (derivedFeatureID) {case TypesPackage.TSTRUCT_FIELD__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  @Override public void restoreState(){  partialBufferHelper.restoreState();  diffusionProcessDelegate.restoreState();  branchNormalization=storedBranchNormalization;}  }
class C{  public static Location moduleLocation(String moduleName){  return new Location(UniqueString.uniqueStringOf(moduleName),0,0,0,0);}  }
class C{  protected List<String> toArgList(){  List<String> argList=new ArrayList<>(args.size() * 2);  args.asMap().forEach(null);  return argList;}  }
class C{  public LocalTaskImpl(){}  }
class C{  public static void checkDecimal(Double expected,IonValue actual){  checkType(IonType.DECIMAL,actual);  IonDecimal i=(IonDecimal)actual;  if (expected == null) {    assertTrue("expected null value",actual.isNullValue());  } else {    assertEquals("decimal content",expected.doubleValue(),i.doubleValue(),0d);  }}  }
class C{  public SVGFilterDescriptor toSVG(BufferedImageOp filter,Rectangle filterRect){  if (filter instanceof RescaleOp)   return toSVG((RescaleOp)filter); else   return null;}  }
class C{  public GetAllServersResponse(){  super();}  }
class C{  public void endPutSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(putSendInProgressId,-1);  int endPutSendId;  if (failed) {    endPutSendId=putSendFailedId;  } else {    endPutSendId=putSendId;  }  this.sendStats.incInt(endPutSendId,1);  this.stats.incLong(putSendDurationId,duration);}  }
class C{  public static boolean compareCursors(Cursor c1,Cursor c2){  if (c1 == null || c2 == null) {    return false;  }  int numColumns=c1.getColumnCount();  if (numColumns != c2.getColumnCount()) {    return false;  }  if (c1.getCount() != c2.getCount()) {    return false;  }  c1.moveToPosition(-1);  c2.moveToPosition(-1);  while (c1.moveToNext() && c2.moveToNext()) {    for (int i=0; i < numColumns; i++) {      if (!TextUtils.equals(c1.getString(i),c2.getString(i))) {        return false;      }    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public <T>T[] toArray(T[] a){  if (a.length < size)   return (T[])Arrays.copyOf(elementData,size,a.getClass());  System.arraycopy(elementData,0,a,0,size);  if (a.length > size)   a[size]=null;  return a;}  }
class C{  public boolean hasClasspathProblems(){  return m_ClasspathProblems;}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  @Override public boolean isActive(){  return false;}  }
class C{  public final CellRecord loadCellById(final int id){  CellRecord cell=null;  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(ContentProvider.CONTENT_URI_CELL,id),null,null,null,null);  if (cursor.moveToNext()) {    cell=cursorToCell(cursor);  }  cursor.close();  return cell;}  }
class C{  @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override public boolean isRunning(){synchronized (mDownloaders) {    return mIsRunning;  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static byte[] certHash(byte[] bytes) throws Exception {  return calculateDigest(DEFAULT_CERT_HASH_ALGORITHM_ID,bytes);}  }
class C{  private void init_key(){  P=(int[])P_orig.clone();  S=(int[])S_orig.clone();}  }
class C{  private void removePropertyStrings(Service s){  String type=s.getType();  String algorithm=s.getAlgorithm();  super.remove(type + "." + algorithm);  for (  String alias : s.getAliases()) {    super.remove(ALIAS_PREFIX + type + "."+ alias);  }  for (  Map.Entry<UString,String> entry : s.attributes.entrySet()) {    String key=type + "." + algorithm+ " "+ entry.getKey();    super.remove(key);  }}  }
class C{  public URL generateURL() throws MalformedURLException {  return computeCompositeUpdateSiteURL(GdtExtPlugin.FEATURE_UPDATE_SITE_URL,null,null,null,null,null);}  }
class C{  public void putObject(String key,Object obj){  checkForNullKey(key);  Gson gson=new Gson();  putString(key,gson.toJson(obj));}  }
class C{  public static Border createRidgeBorder(int thickness,int color){  return createCSSBorder(TYPE_RIDGE,thickness,color);}  }
class C{  public File build(UserCredential credentials) throws GitException {  File askScriptDirectory=new File(System.getProperty("java.io.tmpdir") + "/" + EnvironmentContext.getCurrent().getUser().getName());  if (!askScriptDirectory.exists()) {    askScriptDirectory.mkdirs();  }  File gitAskPassScript=new File(askScriptDirectory,GIT_ASK_PASS_SCRIPT);  try (FileOutputStream fos=new FileOutputStream(gitAskPassScript)){    String actualGitAskPassTemplate=gitAskPassTemplate.replace("$self",gitAskPassScript.getAbsolutePath()).replace("$password",credentials.getPassword()).replace("$username",credentials.getUserName());    fos.write(actualGitAskPassTemplate.getBytes());  } catch (  IOException e) {    LOG.error("It is not possible to store " + gitAskPassScript + " credentials",e);    throw new GitException("Can't store credentials");  }  if (!gitAskPassScript.setExecutable(true)) {    LOG.error("Can't make " + gitAskPassScript + " executable");    throw new GitException("Can't set permissions to credentials");  }  return gitAskPassScript;}  }
class C{  public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {  if (top != frame.top) {    throw new AnalyzerException(null,"Incompatible stack heights");  }  boolean changes=false;  for (int i=0; i < locals + top; ++i) {    V v=interpreter.merge(values[i],frame.values[i]);    if (!v.equals(values[i])) {      values[i]=v;      changes=true;    }  }  return changes;}  }
class C{  @VisibleForTesting int computeResize(int available,int needed,int length){  assert available < needed : "available (" + available + ") >= needed ("+ needed+ ")";  assert available < length : "available (" + available + ") >= length ("+ length+ ")";  long additional=0;  for (int i=1; additional + available < needed; i++) {    additional=(long)length * ((1 << i) - 1);  }  int newLength=(int)Math.min(length + additional,MAX_BUFFER_SIZE);  if (newLength - (length - available) - 1 < needed) {    return -1;  } else {    return newLength;  }}  }
class C{  public int length(){  return entries.length();}  }
class C{  public static boolean wordBreak(String s,Set<String> dict){  if (s == null || dict == null)   return false;  if (s.equals("") || dict.contains(s))   return true;  for (int i=1; i <= s.length(); i++) {    String pre=s.substring(0,i);    System.out.println("pre: " + pre);    if (dict.contains(pre)) {      String post=s.substring(i);      System.out.println("post: " + post);      if (wordBreak(post,dict))       return true;    }  }  return false;}  }
class C{  public Scheme(final String name,final SocketFactory factory,final int port){  if (name == null) {    throw new IllegalArgumentException("Scheme name may not be null");  }  if (factory == null) {    throw new IllegalArgumentException("Socket factory may not be null");  }  if ((port <= 0) || (port > 0xffff)) {    throw new IllegalArgumentException("Port is invalid: " + port);  }  this.name=name.toLowerCase(Locale.ENGLISH);  this.socketFactory=factory;  this.defaultPort=port;  this.layered=(factory instanceof LayeredSocketFactory);}  }
class C{  protected void generateHeaders() throws BadElementException {  Iterator iterator=this.model.getHeaderCellList().iterator();  while (iterator.hasNext()) {    HeaderCell headerCell=(HeaderCell)iterator.next();    String columnHeader=headerCell.getTitle();    if (columnHeader == null) {      columnHeader=StringUtils.capitalize(headerCell.getBeanPropertyName());    }    Cell hdrCell=getCell(columnHeader);    hdrCell.setGrayFill(0.9f);    hdrCell.setHeader(true);    tablePDF.addCell(hdrCell);  }}  }
class C{  public Model(){  triggers=new LinkedList<Template>();  rules=new LinkedList<Rule>();  id="model" + idCounter;  idCounter++;}  }
class C{  public int usePos(int index){  return list.get(index << 1);}  }
class C{  protected int engineGetDigestLength(){  return DIGEST_LENGTH;}  }
class C{  private void initializeNode(int nodeIndex,DirichletBayesIm oldBayesIm,double symmetricAlpha){  Node node=nodes[nodeIndex];  Graph graph=getBayesPm().getDag();  List<Node> parentList=new ArrayList<>(graph.getParents(node));  int[] parentArray=new int[parentList.size()];  for (int i=0; i < parentList.size(); i++) {    parentArray[i]=getNodeIndex(parentList.get(i));  }  Arrays.sort(parentArray);  parents[nodeIndex]=parentArray;  int[] dims=new int[parentArray.length];  for (int i=0; i < dims.length; i++) {    Node parNode=nodes[parentArray[i]];    dims[i]=getBayesPm().getNumCategories(parNode);  }  int numRows=1;  for (  int dim : dims) {    numRows*=dim;  }  int numCols=getBayesPm().getNumCategories(node);  parentDims[nodeIndex]=dims;  pseudocounts[nodeIndex]=new double[numRows][numCols];  for (int rowIndex=0; rowIndex < numRows; rowIndex++) {    if (oldBayesIm == null) {      overwriteRow(nodeIndex,rowIndex,symmetricAlpha);    } else {      retainOldRowIfPossible(nodeIndex,rowIndex,oldBayesIm,symmetricAlpha);    }  }}  }
class C{  private void closeOutboundInternal(){  if ((debug != null) && Debug.isOn("ssl")) {    System.out.println(Thread.currentThread().getName() + ", closeOutboundInternal()");  }  if (writer.isOutboundDone()) {    return;  }switch (connectionState) {case cs_START:    writer.closeOutbound();  inboundDone=true;break;case cs_ERROR:case cs_CLOSED:break;default :warning(Alerts.alert_close_notify);writer.closeOutbound();break;}writeCipher.dispose();connectionState=cs_CLOSED;}  }
class C{  public CoreferenceChain_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_first=jcas.getRequiredFeatureDE(casType,"first","de.tudarmstadt.ukp.dkpro.core.api.coref.type.CoreferenceLink",featOkTst);  casFeatCode_first=(null == casFeat_first) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_first).getCode();}  }
class C{  private void buildImageDatastoreSweeperService(ImageDatastoreSweeperService.TaskState.TaskStage stage) throws Throwable {  ImageDatastoreSweeperService.State task=new ImageDatastoreSweeperService.State();  task.parentLink=TestHost.SERVICE_URI;  task.imageCreateWatermarkTime=System.currentTimeMillis();  task.imageDeleteWatermarkTime=System.currentTimeMillis();  task.datastore="data-store-id";  task.isSelfProgressionDisabled=true;  task.taskState=new ImageDatastoreSweeperService.TaskState();  task.taskState.stage=stage;  if (stage == ImageDatastoreSweeperService.TaskState.TaskStage.FAILED) {    task.taskState.failure=new ServiceErrorResponse();    task.taskState.failure.message="ImageDatastoreSweeperService failed";  }  String documentLink=String.format("/image-datastore-cleaners/%s",UUID.randomUUID().toString());  host.startServiceSynchronously(new ImageDatastoreSweeperService(),task,documentLink);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String updatePaymentInfo(){  String result;  try {    paymentInfo=getAccountService().savePaymentInfo(paymentInfo);    addMessage(BaseBean.INFO_PAYMENT_INFO_SAVED);    result=BaseBean.OUTCOME_SUCCESS;  } catch (  Exception exc) {    result=BaseBean.OUTCOME_ERROR;  } finally {    paymentInfoBean.resetCachedPaymentInfo();  }  return result;}  }
class C{  public void createIfNeeded(){  _setupWindowHolder=new SetupWindowHolder();  windows=new LinkedList<SetupWindow>();  SaveStatus saveDirectoryStatus=shouldShowSaveDirectoryWindow();  if (saveDirectoryStatus != SaveStatus.NO) {    windows.add(new BitTorrentSettingsWindow(this));  }  if (!InstallSettings.SPEED.getValue() || !InstallSettings.START_STARTUP.getValue() && GUIUtils.shouldShowStartOnStartupWindow()) {    windows.add(new MiscWindow(this));  }  if (shouldShowAssociationsWindow()) {    windows.add(new AssociationsWindow(this));  }  if (windows.size() > 0) {    windows.add(new SocialRecommendationsWindow(this));  }  IntentWindow intentWindow=new IntentWindow(this);  if (!intentWindow.isConfirmedWillNot()) {    windows.add(intentWindow);  } else {    UXStats.instance().log(UXAction.CONFIGURATION_WIZARD_AFTER_UPDATE);  }  if (windows.size() == 0) {    return;  }  boolean partial=ApplicationSettings.INSTALLED.getValue();  windows.add(0,new WelcomeWindow(this,partial));  holderPreferredSize=new Dimension(0,0);  SetupWindow prior=null;  for (  SetupWindow current : windows) {    _setupWindowHolder.add(current);    if (prior == null) {      current.setPrevious(current);    } else {      current.setPrevious(prior);    }    if (prior != null) {      prior.setNext(current);    }    prior=current;    Dimension d=current.calculatePreferredSize();    if (d.width > holderPreferredSize.width) {      holderPreferredSize.width=d.width;    }    if (d.height > holderPreferredSize.height) {      holderPreferredSize.height=d.height;    }  }  holderPreferredSize.width+=20;  holderPreferredSize.height+=20;  if (holderPreferredSize.width > 900) {    holderPreferredSize.width=900;  }  if (holderPreferredSize.height > 750) {    holderPreferredSize.height=750;  }  assert prior != null;  prior.setNext(prior);  createDialog(windows.get(0));}  }
class C{  public void closeJDBCStatement(Statement stmt){  try {    if (stmt != null) {      stmt.close();    }  } catch (  SQLException sqle) {    subclassLogWrapper("Unexpected exception while closing database statement.");  }}  }
class C{  public Model asReadOnlyModel(Model m){  return m;}  }
class C{  public void testFuzzy() throws Exception {  Query regular=new TermQuery(new Term("field","foobar"));  Query expected=new FuzzyQuery(new Term("field","foobar"),2);  assertEquals(expected,parse("foobar~2"));  assertEquals(regular,parse("foobar~"));  assertEquals(regular,parse("foobar~a"));  assertEquals(regular,parse("foobar~1a"));  BooleanQuery.Builder bool=new BooleanQuery.Builder();  FuzzyQuery fuzzy=new FuzzyQuery(new Term("field","foo"),LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);  bool.add(fuzzy,Occur.MUST);  bool.add(new TermQuery(new Term("field","bar")),Occur.MUST);  assertEquals(bool.build(),parse("foo~" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1+ " bar"));}  }
class C{  protected Anonymous_methodBody_1_Impl(){  super();}  }
class C{  public static void ensureObject(JsonNode resource){  if (ensureDataNode(resource).isArray()) {    throw new IllegalArgumentException("'data' node is not an object!");  }}  }
class C{  public void writeHeaderPart(AnnotatedOutput out){  throwIfNotPrepared();  int sz=methodIds.size();  int offset=(sz == 0) ? 0 : getFileOffset();  if (out.annotates()) {    out.annotate(4,"method_ids_size: " + Hex.u4(sz));    out.annotate(4,"method_ids_off:  " + Hex.u4(offset));  }  out.writeInt(sz);  out.writeInt(offset);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void deleteReviewInt(ProductReview reviewToBeRemoved,boolean mplMarketplaceOwnerDelete,String reason,boolean needsPermissionCheck) throws OperationNotPermittedException {  if (needsPermissionCheck) {    if (!(isAuthor(reviewToBeRemoved) || isAdminOfAuthor(reviewToBeRemoved)) && !mplMarketplaceOwnerDelete)     throw new OperationNotPermittedException("You must be author or admin for the organization of the reviewer.");    if (mplMarketplaceOwnerDelete && !(hasMarketplaceOwnerRights(reviewToBeRemoved)))     throw new OperationNotPermittedException("You must have marketplace owner role for the organization the review was published.");  }  ProductFeedback feedback=reviewToBeRemoved.getProductFeedback();  feedback.getProductReviews().remove(reviewToBeRemoved);  dm.remove(reviewToBeRemoved);  feedback.updateAverageRating();  if (mplMarketplaceOwnerDelete) {    String serviceId=localizer.getLocalizedTextFromDatabase(reviewToBeRemoved.getPlatformUser().getLocale(),feedback.getProduct().getKey(),LocalizedObjectTypes.PRODUCT_MARKETING_NAME);    if (serviceId.equals("")) {      serviceId=feedback.getProduct().getProductId();    }    String[] params=new String[2];    params[0]=serviceId;    params[1]=reason;    try {      Marketplace marketplace=this.getMarketplaceOwned(reviewToBeRemoved);      cs.sendMail(reviewToBeRemoved.getPlatformUser(),EmailType.REVIEW_REMOVED_BY_MARKETPLACE_ADMIN,params,marketplace);    } catch (    MailOperationException e) {      logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_MAIL_OPERATION_FAILED);    }  }}  }
class C{  public void remoteControlDisplayUsesBitmapSize(IRemoteControlDisplay rcd,int w,int h){synchronized (mRCStack) {    final Iterator<DisplayInfoForServer> displayIterator=mRcDisplays.iterator();    boolean artworkSizeUpdate=false;    while (displayIterator.hasNext() && !artworkSizeUpdate) {      final DisplayInfoForServer di=(DisplayInfoForServer)displayIterator.next();      if (di.mRcDisplay.asBinder().equals(rcd.asBinder())) {        if ((di.mArtworkExpectedWidth != w) || (di.mArtworkExpectedHeight != h)) {          di.mArtworkExpectedWidth=w;          di.mArtworkExpectedHeight=h;          artworkSizeUpdate=true;        }      }    }    if (artworkSizeUpdate) {      final Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();      while (stackIterator.hasNext()) {        final RemoteControlStackEntry rcse=stackIterator.next();        if (rcse.mRcClient != null) {          try {            rcse.mRcClient.setBitmapSizeForDisplay(rcd,w,h);          } catch (          RemoteException e) {            Log.e(TAG,"Error setting bitmap size for RCD on RCC: ",e);          }        }      }    }  }}  }
class C{  public Random(long seed){  setSeed(seed);}  }
class C{  static public void assertEquals(long expected,long actual){  assertEquals(null,expected,actual);}  }
class C{  private void initAndEdit(){  initiateSharedPreferences();  edit();}  }
class C{  @Override public Void visitMethod(MethodTree node,AnnotatedTypeMirror p){  return super.visitMethod(node,p);}  }
class C{  private void discoverConnectivity(ProtectionSystem protectionSystem){  ConnectivityUtil.updateRpSystemConnectivity(protectionSystem,_dbClient);}  }
class C{  public synchronized void notifyZoomResetListeners(){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomReset();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.STATE__LOCAL_REACTIONS:    return getLocalReactions();case SGraphPackage.STATE__SCOPES:  return getScopes();case SGraphPackage.STATE__NAMESPACE:return getNamespace();case SGraphPackage.STATE__NAME:return getName();case SGraphPackage.STATE__PARENT_REGION:if (resolve) return getParentRegion();return basicGetParentRegion();case SGraphPackage.STATE__INCOMING_TRANSITIONS:return getIncomingTransitions();case SGraphPackage.STATE__OUTGOING_TRANSITIONS:return getOutgoingTransitions();case SGraphPackage.STATE__REGIONS:return getRegions();case SGraphPackage.STATE__DOCUMENTATION:return getDocumentation();case SGraphPackage.STATE__ORTHOGONAL:return isOrthogonal();case SGraphPackage.STATE__SIMPLE:return isSimple();case SGraphPackage.STATE__COMPOSITE:return isComposite();case SGraphPackage.STATE__LEAF:return isLeaf();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Clustering<Model> run(Relation<?> relation){  HashMap<String,DBIDs> labelMap=multiple ? multipleAssignment(relation) : singleAssignment(relation);  ModifiableDBIDs noiseids=DBIDUtil.newArray();  Clustering<Model> result=new Clustering<>("By Label Clustering","bylabel-clustering");  for (  Entry<String,DBIDs> entry : labelMap.entrySet()) {    DBIDs ids=entry.getValue();    if (ids.size() <= 1) {      noiseids.addDBIDs(ids);      continue;    }    Cluster<Model> c=new Cluster<Model>(entry.getKey(),ids,ClusterModel.CLUSTER);    if (noisepattern != null && noisepattern.matcher(entry.getKey()).find()) {      c.setNoise(true);    }    result.addToplevelCluster(c);  }  if (noiseids.size() > 0) {    Cluster<Model> c=new Cluster<Model>("Noise",noiseids,ClusterModel.CLUSTER);    c.setNoise(true);    result.addToplevelCluster(c);  }  return result;}  }
class C{  public AdditiveRulePanel(){  super();  this.add(tabbedPane);  JTextField tfLambda=createTextField(null,null);  JTextField tfResistance=createTextField(null,null);  mainTab.addItem("Lambda",tfLambda);  mainTab.addItem("Resistance",tfResistance);  mainTab.addItem("Add noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(randTab,"Noise");}  }
class C{  public void insertSleepTime(){  ScriptStep sleepTimeScriptStep=ScriptStepFactory.createSleepTime(getSleepTime());  steps.add(getInsertIndex(),sleepTimeScriptStep);  sleepTime="";  reindexScriptSteps();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EventStoreBuilder tcpSendBufferSize(int size){  tcpSettingsBuilder.sendBufferSize(size);  return this;}  }
class C{  public void append(Value v,int idx,boolean prio){  if (values.length == count) {    Value[] newval=new Value[count * 2];    int[] newidx=new int[count * 2];    boolean[] newprio=new boolean[count * 2];    System.arraycopy(values,0,newval,0,count);    System.arraycopy(indexes,0,newidx,0,count);    System.arraycopy(priorities,0,newprio,0,count);    values=newval;    indexes=newidx;    priorities=newprio;  }  for (int i=0; i < count; i++) {    if (indexes[i] == idx) {      if (prio || (priorities[i] == prio)) {        values[i]=v;        priorities[i]=prio;      }      return;    }  }  values[count]=v;  indexes[count]=idx;  priorities[count]=prio;  count++;}  }
class C{  public SeriesGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,java.util.Vector inDescendants){  super(inSource,inParent,inGroupLabel,DATATYPE_VIRTUAL,null,inDescendants);}  }
class C{  public static void failNotEquals(String message,Object expected,Object actual){  fail(format(message,expected,actual,false));}  }
class C{  public void incBroadcastMessagesTime(long nanos){  if (enableClockStats) {    this.stats.incLong(broadcastMessagesTimeId,nanos);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isRoleGranted(Role grantedRole){  if (grantedRole == this) {    return true;  }  if (grantedRoles != null) {    for (    Role role : grantedRoles.keySet()) {      if (role == grantedRole) {        return true;      }      if (role.isRoleGranted(grantedRole)) {        return true;      }    }  }  return false;}  }
class C{  public static <T>void addFirstItem(JComboBox<T> combobox,T item){  int idx=-1;  DefaultComboBoxModel<T> model=(DefaultComboBoxModel<T>)combobox.getModel();  for (int i=0; i < model.getSize(); i++) {    T t=model.getElementAt(i);    if (Objects.equals(t,item)) {      idx=i;      break;    }  }  model.insertElementAt(item,0);  if (idx >= 0) {    model.removeElementAt(idx + 1);  }}  }
class C{  public void updateClob(int columnIndex,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  private void $$$setupUI$$$(){  overallPanel=new JPanel();  overallPanel.setLayout(new BorderLayout(0,0));  overallPanel.setPreferredSize(new Dimension(800,800));  codeAndResultsSplitPane=new JSplitPane();  codeAndResultsSplitPane.setContinuousLayout(true);  codeAndResultsSplitPane.setOrientation(0);  codeAndResultsSplitPane.setResizeWeight(0.5);  overallPanel.add(codeAndResultsSplitPane,BorderLayout.CENTER);  origVsBuffedSplitPane=new JSplitPane();  origVsBuffedSplitPane.setContinuousLayout(true);  origVsBuffedSplitPane.setDividerLocation(400);  origVsBuffedSplitPane.setResizeWeight(0.0);  codeAndResultsSplitPane.setLeftComponent(origVsBuffedSplitPane);  final JPanel panel1=new JPanel();  panel1.setLayout(new BorderLayout(0,0));  origVsBuffedSplitPane.setLeftComponent(panel1);  final JLabel label1=new JLabel();  label1.setHorizontalAlignment(0);  label1.setText("Original source");  panel1.add(label1,BorderLayout.NORTH);  final JScrollPane scrollPane1=new JScrollPane();  panel1.add(scrollPane1,BorderLayout.CENTER);  origTextPane=new JTextPane();  origTextPane.setEditable(false);  origTextPane.setMinimumSize(new Dimension(200,100));  origTextPane.setText("Buffed text");  scrollPane1.setViewportView(origTextPane);  final JPanel panel2=new JPanel();  panel2.setLayout(new BorderLayout(0,0));  origVsBuffedSplitPane.setRightComponent(panel2);  final JLabel label2=new JLabel();  label2.setHorizontalAlignment(0);  label2.setText("Formatted output");  panel2.add(label2,BorderLayout.NORTH);  final JScrollPane scrollPane2=new JScrollPane();  panel2.add(scrollPane2,BorderLayout.CENTER);  formattedTextPane=new JTextPane();  formattedTextPane.setEditable(false);  formattedTextPane.setMinimumSize(new Dimension(200,100));  formattedTextPane.setText("original");  scrollPane2.setViewportView(formattedTextPane);  analysisTabbedPane=new JTabbedPane();  codeAndResultsSplitPane.setRightComponent(analysisTabbedPane);  injectNLTab=new JPanel();  injectNLTab.setLayout(new BorderLayout(0,0));  analysisTabbedPane.addTab("Inject \\n",injectNLTab);  final JScrollPane scrollPane3=new JScrollPane();  scrollPane3.setVerticalScrollBarPolicy(20);  injectNLTab.add(scrollPane3,BorderLayout.CENTER);  injectNLConsole=new JTextArea();  injectNLConsole.setEditable(false);  scrollPane3.setViewportView(injectNLConsole);  alignTab=new JPanel();  alignTab.setLayout(new BorderLayout(0,0));  analysisTabbedPane.addTab("Alignment",alignTab);  final JScrollPane scrollPane4=new JScrollPane();  alignTab.add(scrollPane4,BorderLayout.CENTER);  alignConsole=new JTextArea();  scrollPane4.setViewportView(alignConsole);}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  if (qName.equals(TAG_ROOT)) {  } else   if (qName.equals(TAG_GROUP) || qName.equals(TAG_PROPERTY)) {    SettingsItem item=itemStack.remove(itemStack.size() - 1);    settingsItems.put(item.getKey(),item);  } else {    throw new SAXException("Unknown tag or usage: " + localName);  }}  }
class C{  protected UncheckedExecutionException(@Nullable String message){  super(message);}  }
class C{  public SkeletonNotFoundException(String s){  super(s);}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  public void checkLocalsAverageCorrectly(int algNumber) throws Exception {  ConditionalMutualInfoCalculatorMultiVariateKraskov miCalc=getNewCalc(algNumber);  String kraskov_K="4";  miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  super.testLocalsAverageCorrectly(miCalc,2,100);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (obj instanceof ScaledDurationField) {    ScaledDurationField other=(ScaledDurationField)obj;    return (getWrappedField().equals(other.getWrappedField())) && (getType() == other.getType()) && (iScalar == other.iScalar);  }  return false;}  }
class C{  public DoubleVector plusEquals(DoubleVector v){  for (int i=0; i < size(); i++) {    V[i]+=v.V[i];  }  return this;}  }
class C{  public T caseS_Other(S_Other object){  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public FlyweightEntity(String name,String text){  this.name=name;  this.text=text;}  }
class C{  static MovieToMpNfoConnector createInstanceFromMovie(Movie movie){  MovieToMpNfoConnector mp=new MovieToMpNfoConnector();  mp.title=movie.getTitle();  mp.originaltitle=movie.getOriginalTitle();  mp.sorttitle=movie.getSortTitle();  if (StringUtils.isBlank(mp.sorttitle)) {    mp.sorttitle=movie.getTitleSortable();  }  mp.rating=movie.getRating();  mp.votes=movie.getVotes();  mp.year=movie.getYear();  mp.premiered=movie.getReleaseDateFormatted();  mp.plot=movie.getPlot();  if (StringUtils.isNotBlank(mp.plot) && mp.plot.length() > 200) {    int spaceIndex=mp.plot.indexOf(" ",200);    if (spaceIndex > 0) {      mp.outline=mp.plot.substring(0,spaceIndex) + "...";    } else {      mp.outline=mp.plot;    }  } else   if (StringUtils.isNotBlank(mp.plot)) {    mp.outline=mp.plot;  }  mp.tagline=movie.getTagline();  mp.runtime=String.valueOf(movie.getRuntime());  mp.thumb=FilenameUtils.getName(movie.getArtworkFilename(MediaFileType.POSTER));  List<MediaFile> extrafanarts=movie.getMediaFiles(MediaFileType.EXTRAFANART);  if (extrafanarts.size() > 0) {    for (int i=0; i < extrafanarts.size(); i++) {      MediaFile mf=extrafanarts.get(i);      Path fanart=mf.getFileAsPath();      String fanartPath=movie.getPathNIO().relativize(fanart).toString();      mp.fanart.add(fanartPath);      if (i == 4) {        break;      }    }  } else {    mp.fanart.add(FilenameUtils.getName(movie.getArtworkFilename(MediaFileType.FANART)));  }  mp.imdb=movie.getImdbId();  mp.ids.putAll(movie.getIds());  mp.studio=movie.getProductionCompany();  mp.country=movie.getCountry();  mp.watched=movie.isWatched();  if (mp.watched) {    mp.playcount=1;  } else {    mp.playcount=0;  }  if (movie.getCertification() != null) {    mp.mpaa=CertificationStyle.formatCertification(movie.getCertification(),MovieModuleManager.MOVIE_SETTINGS.getMovieCertificationStyle());  }  if (movie.getMediaSource() != MediaSource.UNKNOWN) {    mp.source=movie.getMediaSource().name();  }  mp.director=movie.getDirector();  mp.credits=movie.getWriter();  for (  MovieActor cast : movie.getActors()) {    mp.addActor(cast.getName(),cast.getCharacter(),cast.getThumbUrl());  }  for (  MovieProducer producer : movie.getProducers()) {    mp.addProducer(producer.getName(),producer.getRole(),producer.getThumbUrl());  }  for (  MediaGenres genre : movie.getGenres()) {    mp.genres.add(genre.toString());  }  if (movie.getMovieSet() != null) {    MovieSet movieSet=movie.getMovieSet();    mp.set=movieSet.getTitle();  } else {    mp.set="";  }  return mp;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_NAME_VALUE_PAIR__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  static void testSetUp() throws Exception {  InstallSDE.install(new File(System.getProperty("test.classes","."),op + "Mangle.class"),new File(System.getProperty("test.src","."),"Mangle.sde"));}  }
class C{  @Override public int hashCode(){  return super.hashCode() ^ (int)gregorianCutoverDate;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.586 -0500",hash_original_method="9699024F392D458CCB5B62F4AD905856",hash_generated_method="4AFD451E2BF26CC0F159647EEFC1B89B") public void elementType(String name,int model,int memberOf,int flags){  ElementType e=new ElementType(name,model,memberOf,flags,this);  theElementTypes.put(name.toLowerCase(),e);  if (memberOf == M_ROOT)   theRoot=e;}  }
class C{  static void testToRealPath(Path dir) throws IOException {  final Path file=Files.createFile(dir.resolve("foo"));  final Path link=dir.resolve("link");  assertTrue(Files.isSameFile(file.toRealPath(),file.toRealPath(NOFOLLOW_LINKS)));  Path doesNotExist=dir.resolve("DoesNotExist");  try {    doesNotExist.toRealPath();    throw new RuntimeException("IOException expected");  } catch (  IOException expected) {  }  try {    doesNotExist.toRealPath(NOFOLLOW_LINKS);    throw new RuntimeException("IOException expected");  } catch (  IOException expected) {  }  if (supportsLinks) {    Files.createSymbolicLink(link,file.toAbsolutePath());    assertTrue(link.toRealPath().equals(file.toRealPath()));    Files.delete(link);  }  if (supportsLinks) {    Files.createSymbolicLink(link,file.toAbsolutePath());    assertTrue(link.toRealPath(NOFOLLOW_LINKS).getFileName().equals(link.getFileName()));    Files.delete(link);  }  if (supportsLinks) {    Path broken=Files.createSymbolicLink(link,doesNotExist);    assertTrue(link.toRealPath(NOFOLLOW_LINKS).getFileName().equals(link.getFileName()));    Files.delete(link);  }  assertTrue(dir.resolve(".").toRealPath().equals(dir.toRealPath()));  assertTrue(dir.resolve(".").toRealPath(NOFOLLOW_LINKS).equals(dir.toRealPath(NOFOLLOW_LINKS)));  Path subdir=Files.createDirectory(dir.resolve("subdir"));  assertTrue(subdir.resolve("..").toRealPath().equals(dir.toRealPath()));  assertTrue(subdir.resolve("..").toRealPath(NOFOLLOW_LINKS).equals(dir.toRealPath(NOFOLLOW_LINKS)));  Files.delete(subdir);  Files.delete(file);}  }
class C{  public static byte[] join(byte[]... arrays){  if (arrays.length == 0) {    return new byte[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  byte[] array : arrays) {    length+=array.length;  }  byte[] result=new byte[length];  length=0;  for (  byte[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreatepi1.class,args);}  }
class C{  @SuppressWarnings("unchecked") public T deserialize(){  ObjectInputStream ois=null;  try {    File file=new File(fileName);    if (!file.exists()) {      throw new IllegalStateException("Attempting to deserialize from a file + " + fileName + ", however no file exists by this name.");    }    if (!file.canRead()) {      throw new IllegalStateException("The file " + file.getAbsolutePath() + " is not readable.  Please check file permissions on this file.");    }    if (!file.isFile()) {      throw new IllegalStateException("The file " + file.getAbsolutePath() + " is not a normal file (it may be a directory or other file type) and so cannot be deserialized to an object");    }    ois=(compressedUsingGzip) ? new ObjectInputStream(new BufferedInputStream(new GZIPInputStream(new FileInputStream(file)))) : new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));    return (T)ois.readObject();  } catch (  ClassNotFoundException e) {    throw new IllegalStateException("The class of object being deserialized cannot be found.",e);  }catch (  IOException e) {    throw new IllegalStateException("An IOException occurred when attempting to read in a Serialized object.",e);  } finally {    if (ois != null) {      try {        ois.close();      } catch (      IOException e) {        throw new IllegalStateException("Unable to close the handle on the ObjectInputStream.");      }    }  }}  }
class C{  public static int chooseFreePort() throws IOException {  try (ServerSocket socket=new ServerSocket(0,0)){    return socket.getLocalPort();  } }  }
class C{  private TreeLayoutUtil(){}  }
class C{  JPopupMenu addToMenu(JPopupMenu popupMenu,SearchResultDataLine[] lines){  if (lines.length == 0) {    return popupMenu;  }  for (int i=1; i < lines.length; i++) {    if (!lines[i - 1].isSameKindAs(lines[i])) {      SearchResultDataLine[] newLines=new SearchResultDataLine[i - 1];      System.arraycopy(lines,0,newLines,0,i - 1);      lines=newLines;      break;    }  }  return lines[0].getSearchResult().createMenu(popupMenu,lines,PANEL);}  }
class C{  public CSSOneOfAttributeCondition(String localName,String namespaceURI,boolean specified,String value){  super(localName,namespaceURI,specified,value);}  }
class C{  protected void collectRequiredProjects(IJavaProject proj,List<IJavaProject> res) throws JavaModelException {  if (!res.contains(proj)) {    res.add(proj);    IJavaModel model=proj.getJavaModel();    IClasspathEntry[] entries=proj.getRawClasspath();    for (int i=0; i < entries.length; i++) {      IClasspathEntry curr=entries[i];      if (curr.getEntryKind() == IClasspathEntry.CPE_PROJECT) {        IJavaProject ref=model.getJavaProject(curr.getPath().segment(0));        if (ref.exists()) {          collectRequiredProjects(ref,res);        }      }    }  }}  }
class C{  public String xamzId2(){  return this.xamzId2;}  }
class C{  public CollationKeyAnalyzer(Collator collator){  this.factory=new CollationAttributeFactory(collator);}  }
class C{  public Vector3f mul(float x,float y,float z){  this.x*=x;  this.y*=y;  this.z*=z;  return this;}  }
class C{  public jMatrix inverse(){  return solve(identity(m,m));}  }
class C{  public static synchronized void remove(MXSession session){  instances.remove(session);}  }
class C{  public void turnChecksOn(){  m_checksTurnedOff=false;}  }
class C{  public ExecutionResult execute(TestCase tc){  ExecutionResult result=execute(tc,Properties.TIMEOUT);  return result;}  }
class C{  protected void addColumn(String name,Column col){  int idx=getColumnNumber(name);  if (idx >= 0 && idx < m_columns.size()) {    throw new IllegalArgumentException("Table already has column with name \"" + name + "\"");  }  m_columns.add(col);  m_names.add(name);  m_lastCol=m_columns.size() - 1;  ColumnEntry entry=new ColumnEntry(m_lastCol,col,new ColumnMetadata(this,name));  ColumnEntry oldEntry=(ColumnEntry)m_entries.put(name,entry);  if (oldEntry != null)   oldEntry.dispose();  invalidateSchema();  col.addColumnListener(this);  fireTableEvent(m_rows.getMinimumRow(),m_rows.getMaximumRow(),m_lastCol,TableModelEvent.INSERT);}  }
class C{  private void processNewline(){}  }
class C{  public double distancePerpendicular(Coordinate p){  return CGAlgorithms.distancePointLinePerpendicular(p,p0,p1);}  }
class C{  public void putIcon(String extension,Icon icon){  icons.put(extension,icon);}  }
class C{  public void addLabel(String text,double lat,double lon,String font,String color){  GlobeAnnotation ga=new GlobeAnnotation(text,Position.fromDegrees(lat,lon,0),Font.decode(font),Color.decode(color));  ga.getAttributes().setBackgroundColor(Color.BLACK);  ga.getAttributes().setDrawOffset(new Point(0,0));  ga.getAttributes().setFrameShape(AVKey.SHAPE_NONE);  ga.getAttributes().setEffect(AVKey.TEXT_EFFECT_OUTLINE);  ga.getAttributes().setTextAlign(AVKey.CENTER);  this.labelsLayer.addRenderable(ga);}  }
class C{  public SplitAction(DrawingEditor editor){  super(editor,new ODGPathFigure());  labels.configureAction(this,ID);}  }
class C{  public void cancel(String tag){  if (triggerBinder == null && pendingList.containsKey(tag)) {    pendingList.remove(tag);  } else {    triggerBinder.cancel(tag);  }}  }
class C{  public Vector2 add(Vector2 v){  x+=v.x;  y+=v.y;  return this;}  }
class C{  public CIDR(long ip,short bits){  if (ip < 0)   throw new IllegalArgumentException("CIDR(" + ip + "/"+ bits+ ") cannot accept a negative argument!");  if (ip > maxIP)   throw new IllegalArgumentException("CIDR(" + ip + "/"+ bits+ ") cannot accept an argument > "+ maxIP+ "!");  if (bits <= 0)   throw new IllegalArgumentException("CIDR(" + ip + "/"+ bits+ ") cannot accept a negative # of bits!");  if (bits > maxBits)   throw new IllegalArgumentException("CIDR(" + ip + "/"+ bits+ ") cannot accept a #bits > "+ maxBits+ "!");  this.firstIP=ip;  this.bits=bits;}  }
class C{  public int orElseGet(IntSupplier supplier){  return isPresent ? value : supplier.getAsInt();}  }
class C{  @Override public void saveRep(Repository rep,ObjectId idTransformation,ObjectId idStep) throws KettleException {  try {    rep.saveStepAttribute(idTransformation,idStep,"TableName",tabelName);    rep.saveStepAttribute(idTransformation,idStep,"MDKeySize",mdkeySize);    rep.saveStepAttribute(idTransformation,idStep,"Measurecount",measureCount);    rep.saveStepAttribute(idTransformation,idStep,"HeirAndKeySize",heirAndKeySize);    rep.saveStepAttribute(idTransformation,idStep,"cubeName",cubeName);    rep.saveStepAttribute(idTransformation,idStep,"schemaName",schemaName);    rep.saveStepAttribute(idTransformation,idStep,"isGroupByEnabled",groupByEnabled);    rep.saveStepAttribute(idTransformation,idStep,"aggregatorClassString",aggregatorClassString);    rep.saveStepAttribute(idTransformation,idStep,"aggregatorString",aggregatorString);    rep.saveStepAttribute(idTransformation,idStep,"factDimLensString",factDimLensString);    rep.saveStepAttribute(idTransformation,idStep,"levelAnddataTypeString",levelAnddataTypeString);    rep.saveStepAttribute(idTransformation,idStep,"currentRestructNumber",currentRestructNumber);    rep.saveStepAttribute(idTransformation,idStep,"partitionID",partitionID);    rep.saveStepAttribute(idTransformation,idStep,"segmentId",segmentId);    rep.saveStepAttribute(idTransformation,idStep,"taskNo",taskNo);  } catch (  Exception e) {    throw new KettleException(BaseMessages.getString(PKG,"TemplateStep.Exception.UnableToSaveStepInfoToRepository") + idStep,e);  }}  }
class C{  public void revokePermission(String userName,VecsPermission.AccessMask accessMask){  int error=VecsAdapter.VecsRevokePermissionW(_storeHandle,userName,accessMask.getValue());  BAIL_ON_ERROR(error,"Revoking permission of store '%s' for user '%s' failed. [Server: %s, User: %s]",_storeName,userName,_serverName,_userName);}  }
class C{  private void checkHash(Object o,int code){  int i=GridClientConsistentHash.hash(o);  assertEquals("Check affinity for object: " + o,code,i);}  }
class C{  private UnManagedConsistencyGroup createUnManagedCG(VolumeConsistencyGroup driverCG,com.emc.storageos.db.client.model.StorageSystem storageSystem,DbClient dbClient){  UnManagedConsistencyGroup unManagedCG=new UnManagedConsistencyGroup();  unManagedCG.setId(URIUtil.createId(UnManagedConsistencyGroup.class));  unManagedCG.setLabel(driverCG.getDeviceLabel());  unManagedCG.setName(driverCG.getDeviceLabel());  String unManagedCGNativeGuid=NativeGUIDGenerator.generateNativeGuidForCG(storageSystem.getNativeGuid(),driverCG.getNativeId());  unManagedCG.setNativeGuid(unManagedCGNativeGuid);  unManagedCG.setNativeId(driverCG.getNativeId());  unManagedCG.setStorageSystemUri(storageSystem.getId());  dbClient.createObject(unManagedCG);  return unManagedCG;}  }
class C{  public Iterator<Edge> edgesInto(MethodOrMethodContext m){  return new CallersOfMethodIterator(m);}  }
class C{  @Override public EmotionalState currentEmotionalState(){  EmotionalState state=EmotionalState.NONE;  float max=0;  float value=0;  Emotion maxEmotion=null;  if (emotions != null) {    for (    Emotion emotion : getEmotions().values()) {      if (Math.abs(emotion.getState()) > max) {        value=emotion.getState();        max=Math.abs(value);        maxEmotion=emotion;      }    }  }  if (max >= 0.3) {    state=maxEmotion.evaluate(value);  }  return state;}  }
class C{  public void removeMasterHost(String hostPortPair) throws SQLException {  this.removeMasterHost(hostPortPair,true);}  }
class C{  public DOMRetrievalMethod(String uri,String type,List<? extends Transform> transforms){  if (uri == null) {    throw new NullPointerException("uri cannot be null");  }  if (transforms == null || transforms.isEmpty()) {    this.transforms=Collections.emptyList();  } else {    this.transforms=Collections.unmodifiableList(new ArrayList<Transform>(transforms));    for (int i=0, size=this.transforms.size(); i < size; i++) {      if (!(this.transforms.get(i) instanceof Transform)) {        throw new ClassCastException("transforms[" + i + "] is not a valid type");      }    }  }  this.uri=uri;  if (!uri.equals("")) {    try {      new URI(uri);    } catch (    URISyntaxException e) {      throw new IllegalArgumentException(e.getMessage());    }  }  this.type=type;}  }
class C{  public static void multiplyMV(float[] output,int outputOffset,float[] lhs,int lhsOffset,float[] rhs,int rhsOffset){  output[outputOffset + 0]=lhs[lhsOffset + 0] * rhs[rhsOffset + 0] + lhs[lhsOffset + 4] * rhs[rhsOffset + 1] + lhs[lhsOffset + 8] * rhs[rhsOffset + 2] + lhs[lhsOffset + 12] * rhs[rhsOffset + 3];  output[outputOffset + 1]=lhs[lhsOffset + 1] * rhs[rhsOffset + 0] + lhs[lhsOffset + 5] * rhs[rhsOffset + 1] + lhs[lhsOffset + 9] * rhs[rhsOffset + 2] + lhs[lhsOffset + 13] * rhs[rhsOffset + 3];  output[outputOffset + 2]=lhs[lhsOffset + 2] * rhs[rhsOffset + 0] + lhs[lhsOffset + 6] * rhs[rhsOffset + 1] + lhs[lhsOffset + 10] * rhs[rhsOffset + 2] + lhs[lhsOffset + 14] * rhs[rhsOffset + 3];  output[outputOffset + 3]=lhs[lhsOffset + 3] * rhs[rhsOffset + 0] + lhs[lhsOffset + 7] * rhs[rhsOffset + 1] + lhs[lhsOffset + 11] * rhs[rhsOffset + 2] + lhs[lhsOffset + 15] * rhs[rhsOffset + 3];}  }
class C{  private static String printPosition(StackTraceElement frame){  if (frame.isNativeMethod())   return String.format("    at %s.%s (native method)%n",frame.getClassName(),frame.getMethodName()); else   return String.format("    at %s.%s:%d (%s)%n",frame.getClassName(),frame.getMethodName(),frame.getLineNumber(),frame.getFileName());}  }
class C{  public Recall(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.485 -0500",hash_original_method="B158B358DBE9E580DC539CC61ABD0BEA",hash_generated_method="C47E3BBBC709FD56F3EC8334F23C2758") public Object parseObject(PemObject obj) throws IOException {  try {    EncryptedPrivateKeyInfo info=EncryptedPrivateKeyInfo.getInstance(ASN1Object.fromByteArray(obj.getContent()));    AlgorithmIdentifier algId=info.getEncryptionAlgorithm();    if (pFinder == null) {      throw new PEMException("no PasswordFinder specified");    }    if (PEMUtilities.isPKCS5Scheme2(algId.getAlgorithm())) {      PBES2Parameters params=PBES2Parameters.getInstance(algId.getParameters());      KeyDerivationFunc func=params.getKeyDerivationFunc();      EncryptionScheme scheme=params.getEncryptionScheme();      PBKDF2Params defParams=(PBKDF2Params)func.getParameters();      int iterationCount=defParams.getIterationCount().intValue();      byte[] salt=defParams.getSalt();      String algorithm=scheme.getAlgorithm().getId();      SecretKey key=PEMUtilities.generateSecretKeyForPKCS5Scheme2(algorithm,pFinder.getPassword(),salt,iterationCount);      Cipher cipher=Cipher.getInstance(algorithm,symProvider);      AlgorithmParameters algParams=AlgorithmParameters.getInstance(algorithm,symProvider);      algParams.init(scheme.getParameters().getDERObject().getEncoded());      cipher.init(Cipher.DECRYPT_MODE,key,algParams);      PrivateKeyInfo pInfo=PrivateKeyInfo.getInstance(ASN1Object.fromByteArray(cipher.doFinal(info.getEncryptedData())));      PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(pInfo.getEncoded());      KeyFactory keyFact=KeyFactory.getInstance(pInfo.getAlgorithmId().getAlgorithm().getId(),asymProvider);      return keyFact.generatePrivate(keySpec);    } else     if (PEMUtilities.isPKCS12(algId.getAlgorithm())) {      PKCS12PBEParams params=PKCS12PBEParams.getInstance(algId.getParameters());      String algorithm=algId.getAlgorithm().getId();      PBEKeySpec pbeSpec=new PBEKeySpec(pFinder.getPassword());      SecretKeyFactory secKeyFact=SecretKeyFactory.getInstance(algorithm,symProvider);      PBEParameterSpec defParams=new PBEParameterSpec(params.getIV(),params.getIterations().intValue());      Cipher cipher=Cipher.getInstance(algorithm,symProvider);      cipher.init(Cipher.DECRYPT_MODE,secKeyFact.generateSecret(pbeSpec),defParams);      PrivateKeyInfo pInfo=PrivateKeyInfo.getInstance(ASN1Object.fromByteArray(cipher.doFinal(info.getEncryptedData())));      PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(pInfo.getEncoded());      KeyFactory keyFact=KeyFactory.getInstance(pInfo.getAlgorithmId().getAlgorithm().getId(),asymProvider);      return keyFact.generatePrivate(keySpec);    } else     if (PEMUtilities.isPKCS5Scheme1(algId.getAlgorithm())) {      PBEParameter params=PBEParameter.getInstance(algId.getParameters());      String algorithm=algId.getAlgorithm().getId();      PBEKeySpec pbeSpec=new PBEKeySpec(pFinder.getPassword());      SecretKeyFactory secKeyFact=SecretKeyFactory.getInstance(algorithm,symProvider);      PBEParameterSpec defParams=new PBEParameterSpec(params.getSalt(),params.getIterationCount().intValue());      Cipher cipher=Cipher.getInstance(algorithm,symProvider);      cipher.init(Cipher.DECRYPT_MODE,secKeyFact.generateSecret(pbeSpec),defParams);      PrivateKeyInfo pInfo=PrivateKeyInfo.getInstance(ASN1Object.fromByteArray(cipher.doFinal(info.getEncryptedData())));      PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(pInfo.getEncoded());      KeyFactory keyFact=KeyFactory.getInstance(pInfo.getAlgorithmId().getAlgorithm().getId(),asymProvider);      return keyFact.generatePrivate(keySpec);    } else {      throw new PEMException("Unknown algorithm: " + algId.getAlgorithm());    }  } catch (  IOException e) {    throw e;  }catch (  Exception e) {    throw new PEMException("problem parsing ENCRYPTED PRIVATE KEY: " + e.toString(),e);  }}  }
class C{  public boolean loadFromAsset(String filename){  InputStream inputStream;  BitmapFactory.Options options=new BitmapFactory.Options();  options.inPreferredConfig=Bitmap.Config.ARGB_8888;  try {    inputStream=gameIO.readAsset(filename);    e_bitmap=BitmapFactory.decodeStream(inputStream,null,options);    inputStream.close();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public BuildTaskDescriptor cancel() throws BuilderException, NotFoundException {  final BuildTaskDescriptor descriptor=getBuildTaskDescriptor();  final Link link=descriptor.getLink(Constants.LINK_REL_CANCEL);  if (link == null) {switch (descriptor.getStatus()) {case SUCCESSFUL:case FAILED:case CANCELLED:      LOG.debug("Can't cancel build, status is {}",descriptor.getStatus());    return descriptor;default :  throw new BuilderException("Can't cancel task. Cancellation link is not available");}}return builderRequest(requestFactory.fromLink(link)).asDto(BuildTaskDescriptor.class);}  }
class C{  public boolean processCC() throws IllegalArgumentException {  log.fine(p_mpp.getHostAddress() + ":" + p_mpp.getHostPort()+ ", Timeout="+ getTimeout()+ "; Proxy="+ p_mpp.getProxyAddress()+ ":"+ p_mpp.getProxyPort()+ " "+ p_mpp.getProxyLogon()+ " "+ p_mpp.getProxyPassword());  setEncoded(true);  String urlString=p_mpp.getHostAddress();  if (p_mpp.getHostPort() != 0)   urlString+=":" + p_mpp.getHostPort();  StringBuffer param=new StringBuffer(200);  param.append(createPair(MERCHANT_ID,p_mpp.getUserID(),80)).append(AMP).append(createPair(MERCHANT_PWD,p_mpp.getPassword(),20)).append(AMP).append(createPair(ACCOUNT_ID,p_mpp.getPartnerID(),10));  param.append(AMP).append(createPair(CARD_TYPE,"VI",6));  param.append(AMP).append(createPair(CARD_NUMBER,p_mp.getCreditCardNumber(),19));  param.append(AMP).append(createPair(CARD_EXPIRATION,p_mp.getCreditCardExp("/"),5));  param.append(AMP).append(createPair(AMOUNT,p_mp.getPayAmtInCents(),10));  param.append(AMP).append(createPair(OPERATION,OPERATION_Purchase,1));  param.append(AMP).append(createPair(MERCHANT_TXN,p_mp.getC_Payment_ID(),255));  param.append(AMP).append(createPair(CLIENT_VERSION,_CLIENT_VERSION,4));  param.append(AMP).append(createPair(CUST_NAME1,p_mp.getA_Name(),255));  param.append(AMP).append(createPair(STREET,p_mp.getA_Street(),255));  param.append(AMP).append(createPair(CITY,p_mp.getA_City(),255));  param.append(AMP).append(createPair(PROVINCE,p_mp.getA_State(),2));  param.append(AMP).append(createPair(ZIP,p_mp.getA_Zip(),10));  param.append(AMP).append(createPair(COUNTRY,p_mp.getA_Country(),2));  param.append(AMP).append(createPair("&email",p_mp.getA_EMail(),40));  param.append(AMP).append(createPair(CVD_INDICATOR,CVD_INDICATOR_Provided,1));  param.append(AMP).append(createPair(CVD_VALUE,"123",4));  try {    log.fine("-> " + param.toString());    Properties prop=getConnectPostProperties(urlString,param.toString());    m_ok=prop != null;    if (m_ok) {      String status=prop.getProperty(STATUS);      m_ok=status != null && status.equals("SP");      String authCode=prop.getProperty(AUTH_CODE);      String authTime=prop.getProperty(AUTH_TIME);      String errCode=prop.getProperty(ERROR_CODE);      String errString=prop.getProperty(ERROR_STRING);      String subError=prop.getProperty(SUB_ERROR);      String subErrorString=prop.getProperty(SUB_ERROR_STRING);      String actionCode=prop.getProperty("actionCode");      String authorisedAmount=prop.getProperty(CURRENT_AMOUNT);      String amount=prop.getProperty(AMOUNT);      String avsInfo=prop.getProperty(AVS_INFO);      String cvdInfo=prop.getProperty(CVD_INFO);      log.fine("<- Status=" + status + ", AuthCode="+ authCode+ ", Error="+ errString);    }    if (!m_ok)     log.warning("<- " + prop);  } catch (  Exception e) {    log.log(Level.SEVERE,param.toString(),e);    m_ok=false;  }  return m_ok;}  }
class C{  static int mkDirectionKey(Direction dir){  if (dir == Out) {    return 0;  } else   if (dir == NullableOut) {    return 1;  } else   if (dir == Pure) {    return 2;  } else   if (dir instanceof In) {    In in=(In)dir;    return 3 + 8 * in.paramId() + in.nullityMask;  } else {    InOut inOut=(InOut)dir;    return 3 + 8 * inOut.paramId() + 2 + inOut.valueId();  }}  }
class C{  @SuppressWarnings("unchecked") protected void registerImplementation(RegistrationKey key,String objectClassName){  try {    Class<T> objectClass=(Class<T>)this.getClass().getClassLoader().loadClass(objectClassName);    registerImplementation(key,objectClass);  } catch (  Exception e) {    this.rejectedMappings.put(key,objectClassName);    getLogger().warn("Not registering class [" + objectClassName + "] as there was an error: ["+ e.getMessage()+ "]",this.getClass().getName());  }}  }
class C{  public void applyParams(){  if (mShaderFragments != null)   for (int i=0; i < mShaderFragments.size(); i++)   mShaderFragments.get(i).applyParams();}  }
class C{  public void testMethodNameWithSpecialCharacter(){  doTest();}  }
class C{  public RoundBorder stroke(float stroke,boolean mm){  strokeThickness=stroke;  if (strokeThickness == 0) {    this.stroke=null;    return this;  }  strokeMM=mm;  if (mm) {    stroke=Display.getInstance().convertToPixels(stroke);  }  return stroke(new Stroke(stroke,Stroke.CAP_SQUARE,Stroke.JOIN_MITER,1));}  }
class C{  protected void doRender(KMLTraversalContext tc,DrawContext dc){}  }
class C{  public boolean shouldParseId(){  return shouldParseId;}  }
class C{  public DNSOutgoing addAnswer(DNSIncoming in,InetAddress addr,int port,DNSOutgoing out,DNSRecord rec) throws IOException {  DNSOutgoing newOut=out;  if (newOut == null) {    newOut=new DNSOutgoing(DNSConstants.FLAGS_QR_RESPONSE | DNSConstants.FLAGS_AA,false,in.getSenderUDPPayload());  }  try {    newOut.addAnswer(in,rec);  } catch (  final IOException e) {    newOut.setFlags(newOut.getFlags() | DNSConstants.FLAGS_TC);    newOut.setId(in.getId());    send(newOut);    newOut=new DNSOutgoing(DNSConstants.FLAGS_QR_RESPONSE | DNSConstants.FLAGS_AA,false,in.getSenderUDPPayload());    newOut.addAnswer(in,rec);  }  return newOut;}  }
class C{  @Override public Object[] readRow(Object[] data){  return data;}  }
class C{  public Matrix arrayRightDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] / B.A[i][j];    }  }  return X;}  }
class C{  public Control(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public void reset(){  init();}  }
class C{  public synchronized Relationship addRelationship(Vertex type,Vertex target,int index){  return addRelationship(type,target,index,false);}  }
class C{  public PCA(int maxPCs,double threshold){  setMaxPCs(maxPCs);  setThreshold(threshold);}  }
class C{  public static <E>WorkQueueProcessor<E> create(String name,int bufferSize,WaitStrategy strategy,boolean autoCancel){  return new WorkQueueProcessor<>(name,bufferSize,strategy == null ? WaitStrategy.liteBlocking() : strategy,false,autoCancel);}  }
class C{  private Boolean isUpdateAvailableWeb(){  String webVersion=null, webVersionInt=null;  try {    final Document doc=Jsoup.connect("https://play.google.com/store/apps/details?id=" + mPackageName + "&hl=en").timeout(30000).userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6").referrer("http://www.google.com").get();    if (doc != null) {      webVersion=doc.select("div[itemprop=softwareVersion]").first().ownText();      webVersionInt=doc.select("button.dropdown-child").select("[data-dropdown-value]").select(":contains(Latest Version)").first().attr("data-dropdown-value");      Log.i(UpdateChecker.class.getSimpleName(),"Version Code Check, web: " + webVersionInt + " vs current: "+ mCurrentVersionCode);      Log.i(UpdateChecker.class.getSimpleName(),"isUpdateAvailableWeb() webVersion: " + webVersion);    }  } catch (  Exception e) {    Log.i(UpdateChecker.class.getSimpleName(),"isUpdateAvailableWeb() Exception: " + e.getMessage());    return null;  }  if (TextUtils.isEmpty(webVersionInt) && TextUtils.isEmpty(webVersion))   return null; else {    setLastTimeUpdateCheckedVersion(mContext,webVersion);    if (!TextUtils.isEmpty(webVersionInt) && TextUtils.isDigitsOnly(webVersionInt)) {      int weVersionCode=0;      try {        weVersionCode=Integer.valueOf(webVersionInt);        return weVersionCode > mCurrentVersionCode;      } catch (      NumberFormatException e) {      }    }    return isNewerVersionAvailable(mCurrentVersion,webVersion);  }}  }
class C{  public byte[] toByteArray(String ascii){  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  return fromAscii(ascii.toCharArray());}  }
class C{  void warning(String key,Object... args){  log.printRawLines(ownName + ": " + log.localize(PrefixKind.JAVAC,key,args));}  }
class C{  public synchronized void clearGaussian(){  __haveNextNextGaussian=false;}  }
class C{  public final float length(){  return length(x,y);}  }
class C{  void exclude(String methodName){  excludedMethods.add(methodName);}  }
class C{  public HistogramBuilder minDocCount(long minDocCount){  this.minDocCount=minDocCount;  return this;}  }
class C{  public MediaWikiParserFactory(){  initVariables();}  }
class C{  public RxDataSource<DataType> updateDataSet(List<DataType> dataSet){  mDataSet=dataSet;  return this;}  }
class C{  static String sqlToRegexSimilar(String sqlPattern,char escapeChar){  similarEscapeRuleChecking(sqlPattern,escapeChar);  boolean insideCharacterEnumeration=false;  final StringBuilder javaPattern=new StringBuilder(sqlPattern.length() * 2);  final int len=sqlPattern.length();  for (int i=0; i < len; i++) {    char c=sqlPattern.charAt(i);    if (c == escapeChar) {      if (i == (len - 1)) {        throw invalidEscapeSequence(sqlPattern,i);      }      char nextChar=sqlPattern.charAt(i + 1);      if (SQL_SIMILAR_SPECIALS.indexOf(nextChar) >= 0) {        if (JAVA_REGEX_SPECIALS.indexOf(nextChar) >= 0) {          javaPattern.append('\\');        }        javaPattern.append(nextChar);      } else       if (nextChar == escapeChar) {        javaPattern.append(nextChar);      } else {        throw invalidEscapeSequence(sqlPattern,i);      }      i++;    } else {switch (c) {case '_':        javaPattern.append('.');      break;case '%':    javaPattern.append('.');  javaPattern.append('*');break;case '[':javaPattern.append('[');insideCharacterEnumeration=true;i=sqlSimilarRewriteCharEnumeration(sqlPattern,javaPattern,i,escapeChar);break;case ']':if (!insideCharacterEnumeration) {throw invalidRegularExpression(sqlPattern,i);}insideCharacterEnumeration=false;javaPattern.append(']');break;case '\\':javaPattern.append("\\\\");break;case '$':javaPattern.append("\\$");break;default :javaPattern.append(c);}}}if (insideCharacterEnumeration) {throw invalidRegularExpression(sqlPattern,len);}return javaPattern.toString();}  }
class C{  static <K,V>RegularImmutableMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){  checkPositionIndex(n,entryArray.length);  Entry<K,V>[] entries;  if (n == entryArray.length) {    entries=entryArray;  } else {    entries=createEntryArray(n);  }  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);  ImmutableMapEntry<K,V>[] table=createEntryArray(tableSize);  int mask=tableSize - 1;  for (int entryIndex=0; entryIndex < n; entryIndex++) {    Entry<K,V> entry=entryArray[entryIndex];    K key=entry.getKey();    V value=entry.getValue();    checkEntryNotNull(key,value);    int tableIndex=Hashing.smear(key.hashCode()) & mask;    @Nullable ImmutableMapEntry<K,V> existing=table[tableIndex];    ImmutableMapEntry<K,V> newEntry;    if (existing == null) {      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);    } else {      newEntry=new NonTerminalImmutableMapEntry<K,V>(key,value,existing);    }    table[tableIndex]=newEntry;    entries[entryIndex]=newEntry;    checkNoConflictInKeyBucket(key,newEntry,existing);  }  return new RegularImmutableMap<K,V>(entries,table,mask);}  }
class C{  void copyValue(MutableBigInteger src){  int len=src.intLen;  if (value.length < len)   value=new int[len];  System.arraycopy(src.value,src.offset,value,0,len);  intLen=len;  offset=0;}  }
class C{  public final void addStrategy(final GenericPlanStrategy<T,I> strategy,final String subpopulation,final double weight){  final StrategyWeights<T,I> weights=getStrategyWeights(subpopulation);  if (weights.strategies.contains(strategy)) {    log.error("Strategy " + strategy + " is already defined for subpopulation "+ subpopulation);    log.error("This can lead to undefined behavior. Please only specify each strategy once");    throw new IllegalStateException("Strategy " + strategy + " is already defined for subpopulation "+ subpopulation);  }  weights.strategies.add(strategy);  weights.weights.add(weight);  weights.totalWeights+=weight;}  }
class C{  Object key(FacetLabel name){  return name;}  }
class C{  private File renameFile(File aFrom,File aTo) throws IOException {  if (!aFrom.renameTo(aTo)) {    throw new IOException("Cannot renamed file [" + aFrom + "] to ["+ aTo+ "]");  }  return new File(aTo.getPath());}  }
class C{  public void testCoordination() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createTable("testCoordination","(field1 int) ENGINE=InnoDB");  Connection conn1=null;  Connection conn2=null;  XAConnection xaConn1=null;  XAConnection xaConn2=null;  try {    xaConn1=getXAConnection();    XAResource xaRes1=xaConn1.getXAResource();    conn1=xaConn1.getConnection();    xaConn2=getXAConnection();    XAResource xaRes2=xaConn2.getXAResource();    conn2=xaConn2.getConnection();    Xid xid1=createXid();    Xid xid2=createXid(xid1);    xaRes1.start(xid1,XAResource.TMNOFLAGS);    xaRes2.start(xid2,XAResource.TMNOFLAGS);    conn1.createStatement().executeUpdate("INSERT INTO testCoordination VALUES (1)");    conn2.createStatement().executeUpdate("INSERT INTO testCoordination VALUES (2)");    xaRes1.end(xid1,XAResource.TMSUCCESS);    xaRes2.end(xid2,XAResource.TMSUCCESS);    xaRes1.prepare(xid1);    xaRes2.prepare(xid2);    xaRes1.commit(xid1,false);    xaRes2.commit(xid2,false);    this.rs=this.stmt.executeQuery("SELECT field1 FROM testCoordination ORDER BY field1");    assertTrue(this.rs.next());    assertEquals(1,this.rs.getInt(1));    assertTrue(this.rs.next());    assertEquals(2,this.rs.getInt(1));    this.stmt.executeUpdate("TRUNCATE TABLE testCoordination");    xid1=createXid();    xid2=createXid(xid1);    xaRes1.start(xid1,XAResource.TMNOFLAGS);    xaRes2.start(xid2,XAResource.TMNOFLAGS);    conn1.createStatement().executeUpdate("INSERT INTO testCoordination VALUES (1)");    assertEquals("1",getSingleIndexedValueWithQuery(conn1,1,"SELECT field1 FROM testCoordination WHERE field1=1").toString());    conn2.createStatement().executeUpdate("INSERT INTO testCoordination VALUES (2)");    assertEquals("2",getSingleIndexedValueWithQuery(conn2,1,"SELECT field1 FROM testCoordination WHERE field1=2").toString());    xaRes1.end(xid1,XAResource.TMSUCCESS);    xaRes2.end(xid2,XAResource.TMSUCCESS);    xaRes1.prepare(xid1);    xaRes2.prepare(xid2);    xaRes1.rollback(xid1);    xaRes2.rollback(xid2);    this.rs=this.stmt.executeQuery("SELECT field1 FROM testCoordination ORDER BY field1");    assertTrue(!this.rs.next());  }  finally {    if (conn1 != null) {      conn1.close();    }    if (conn2 != null) {      conn2.close();    }    if (xaConn1 != null) {      xaConn1.close();    }    if (xaConn2 != null) {      xaConn2.close();    }  }}  }
class C{  protected static void printMapProperties(MapBean mapBean,PrintStream ps,Properties createdProperties){  com.bbn.openmap.proj.Proj proj=mapBean.projection;  ps.println("\n### OpenMap initial Map Settings ###");  Point2D llp=proj.getCenter();  printProperties(Environment.Latitude,Double.toString(llp.getY()),ps,createdProperties);  printProperties(Environment.Longitude,Double.toString(llp.getX()),ps,createdProperties);  printProperties(Environment.Scale,Float.toString(proj.getScale()),ps,createdProperties);  printProperties(Environment.Projection,proj.getName(),ps,createdProperties);  printProperties(Environment.BackgroundColor,Integer.toHexString(mapBean.getBackground().getRGB()),ps,createdProperties);}  }
class C{  public int indexOf(Object o){  int index=0;  if (o == null) {    for (Entry e=header.next; e != header; e=e.next) {      if (e.element == null)       return index;      index++;    }  } else {    for (Entry e=header.next; e != header; e=e.next) {      if (o.equals(e.element))       return index;      index++;    }  }  return -1;}  }
class C{  public static Usericon parseModIcon(String json){  try {    JSONParser parser=new JSONParser();    JSONObject o=(JSONObject)parser.parse(json);    JSONObject room=(JSONObject)o.get("room");    String roomId=(String)room.get("id");    String modBadgeUrl=(String)room.get("moderator_badge");    if (modBadgeUrl == null) {      return null;    }    return UsericonFactory.createTwitchLikeIcon(Usericon.Type.MOD,roomId,modBadgeUrl,Usericon.SOURCE_FFZ,"Moderator (FFZ Icon)");  } catch (  ParseException|ClassCastException|NullPointerException ex) {  }  return null;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static WritableByteChannel newChannel(final OutputStream out){  checkNotNull(out,"out");  if (out instanceof FileOutputStream && FileOutputStream.class.equals(out.getClass())) {    return ((FileOutputStream)out).getChannel();  }  return new WritableByteChannelImpl(out);}  }
class C{  public boolean purchase(Activity activity){  if (notOnMainThread()) {    throw new IllegalStateException("must be invoked from the main thread");  }  if (!mIsBillingAvailable || null == activity) {    return false;  }  try {    final String payload=UUID.randomUUID().toString();    final Bundle bundle=mService.getBuyIntent(3,mPackageName,mSku,BILLING_TYPE,payload);    final int response=bundle.getInt(RESPONSE_CODE);    if (BILLING_RESPONSE_RESULT_OK == response) {      mPreferences.edit().putString(PREMIUMER_PURCHASE_PAYLOAD,payload).commit();      final PendingIntent pendingIntent=bundle.getParcelable(RESPONSE_BUY_INTENT);      activity.startIntentSenderForResult(pendingIntent.getIntentSender(),PREMIUMER_ACTIVITY_RESULT_ID,new Intent(),0,0,0);      return true;    }  } catch (  RemoteException|IntentSender.SendIntentException ignore) {  }  return false;}  }
class C{  public static void assertReturnsNonConstant(String viewName,ExprNode expression,int index) throws ViewParameterException {  if (expression.isConstantResult()) {    String message="Invalid view parameter expression " + index + getViewDesc(viewName)+ ", the expression returns a constant result value, are you sure?";    log.error(message);    throw new ViewParameterException(message);  }}  }
class C{  private static void writeEnumInt(BinaryRawWriter w,Enum e,Enum def){  assert def != null;  w.writeInt(e == null ? def.ordinal() : e.ordinal());}  }
class C{  NimbusStyle(String prefix,JComponent c){  if (c != null) {    this.component=new WeakReference<JComponent>(c);  }  this.prefix=prefix;  this.painter=new SynthPainterImpl(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.239 -0500",hash_original_method="8331D41600BE6136ABFAAFB9EC7881F5",hash_generated_method="324750FBBE8C80F17D896F967175A5D6") public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  public int findReferencePosition(int offset,int nextToken){  boolean danglingElse=false;  boolean unindent=false;  boolean indent=false;  boolean matchBrace=false;  boolean matchParen=false;  boolean matchCase=false;  boolean throwsClause=false;  if (offset < fDocument.getLength()) {    try {      IRegion line=fDocument.getLineInformationOfOffset(offset);      int lineOffset=line.getOffset();      int prevPos=Math.max(offset - 1,0);      boolean isFirstTokenOnLine=fDocument.get(lineOffset,prevPos + 1 - lineOffset).trim().length() == 0;      int prevToken=fScanner.previousToken(prevPos,JavaHeuristicScanner.UNBOUND);      boolean bracelessBlockStart=fScanner.isBracelessBlockStart(prevPos,JavaHeuristicScanner.UNBOUND);switch (nextToken) {case Symbols.TokenELSE:        danglingElse=true;      break;case Symbols.TokenDEFAULT:    fScanner.nextToken(offset,lineOffset + line.getLength());  int next=fScanner.nextToken(fScanner.getPosition(),JavaHeuristicScanner.UNBOUND);if (next != Symbols.TokenCOLON) {  break;}case Symbols.TokenCASE:if (isFirstTokenOnLine) matchCase=true;break;case Symbols.TokenLBRACE:if (bracelessBlockStart && !fPrefs.prefIndentBracesForBlocks) unindent=true; else if ((prevToken == Symbols.TokenCOLON || prevToken == Symbols.TokenEQUAL) && !fPrefs.prefIndentBracesForArrays) unindent=true; else if (!bracelessBlockStart && fPrefs.prefIndentBracesForMethods) indent=true;break;case Symbols.TokenRBRACE:if (isFirstTokenOnLine) matchBrace=true;break;case Symbols.TokenRPAREN:if (isFirstTokenOnLine) matchParen=true;break;case Symbols.TokenTHROWS:throwsClause=true;break;case Symbols.TokenPLUS:if (isStringContinuation(offset)) {if (isSecondLineOfStringContinuation(offset)) {fAlign=JavaHeuristicScanner.NOT_FOUND;fIndent=fPrefs.prefContinuationIndent;} else {int previousLineOffset=fDocument.getLineOffset(fDocument.getLineOfOffset(offset) - 1);fAlign=fScanner.findNonWhitespaceForwardInAnyPartition(previousLineOffset,JavaHeuristicScanner.UNBOUND);}return fPosition;}break;}} catch (BadLocationException e) {}} else {danglingElse=false;}int ref=findReferencePosition(offset,danglingElse,matchBrace,matchParen,matchCase,throwsClause);if (unindent) fIndent--;if (indent) fIndent++;return ref;}  }
class C{  public static File storeOnCacheDir(Context context,Bitmap bitmap,String path,String filename,Bitmap.CompressFormat format,int quality){  File dir=new File(context.getCacheDir(),path);  FileUtils.makeDirsIfNeeded(dir);  File file=new File(dir,filename);  if (!storeAsFile(bitmap,file,format,quality)) {    return null;  }  return file;}  }
class C{  public TLongHash(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  HugeEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;  bits=new long[(enums.length + BIT_IN_LONG - 1) / BIT_IN_LONG];}  }
class C{  public final boolean isPrivate(){  return Modifier.isPrivate(getModifiers());}  }
class C{  public static void appendToOid(SnmpOid source,SnmpOid dest){  if (source.getLength() != 1) {    throw new IllegalArgumentException();  }  dest.append(source);}  }
class C{  private void deleteSubscriptionAndUdas(Subscription subscription){  Long historyModificationTime=Long.valueOf(DateFactory.getInstance().getTransactionTime());  subscription.setHistoryModificationTime(historyModificationTime);  Query query=dm.createNamedQuery("Uda.getByTargetTypeAndKey");  query.setParameter("targetKey",Long.valueOf(subscription.getKey()));  query.setParameter("targetType",UdaTargetType.CUSTOMER_SUBSCRIPTION);  for (  Uda uda : ParameterizedTypes.iterable(query.getResultList(),Uda.class)) {    uda.setHistoryModificationTime(historyModificationTime);    dm.remove(uda);  }  dm.remove(subscription);}  }
class C{  public int read() throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (pos >= contentLength) {    return -1;  }  pos++;  return this.in.read();}  }
class C{  public static boolean hasSpecificUnit(final AnnotatedTypeMirror annoType,final AnnotationMirror unitsAnnotation){  if (annoType == null || unitsAnnotation == null) {    return false;  }  return AnnotationUtils.containsSame(annoType.getAnnotations(),unitsAnnotation);}  }
class C{  public DatagramConnection createDatagramConnection(int timeout){  return new AndroidDatagramConnection(timeout);}  }
class C{  protected boolean processErrorOrFailure(Response response,Request request,TransactionID transactionID){  return false;}  }
class C{  public void test_GET_accessPath_delete_p_o_URI() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(null,RDF.TYPE,new URIImpl("http://xmlns.com/foaf/0.1/Person")));  assertEquals(3,result);}  }
class C{  @Override public void addCookie(Cookie c){  boolean changed=true;  Cookie existing=getCookie(c.getName());  if (existing != null) {    changed=!c.getValue().equals(existing.getValue());  }  super.addCookie(c);  if (!controlCookieAdded && changed) {    long date=currentTimeMillis() / 1000 * 1000;    String value=String.valueOf(date);    Cookie cookie=new Cookie(LAST_MODIFIED_COOKIE,value);    String contextPath=req.getContextPath();    if (contextPath == null) {      cookie.setPath("/");    } else {      cookie.setPath(contextPath);    }    super.addCookie(cookie);    super.setDateHeader(HEADER_LASTMOD,date);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_constraintBody_1_();}  }
class C{  public HistoryEventFieldList clone(){  HistoryEventFieldList result=new HistoryEventFieldList();  result.EventFields=EventFields == null ? null : EventFields.clone();  return result;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  put(key,new Double(value));  return this;}  }
class C{  private void writeRequestBody(IBasicRequest request,OutputStream outputStream) throws IOException {  Logger.i("-------Send request data start-------");  OutputStream realOutputStream=IOUtils.toBufferedOutputStream(outputStream);  request.onWriteRequestBody(realOutputStream);  IOUtils.closeQuietly(realOutputStream);  Logger.i("-------Send request data end-------");}  }
class C{  public void createExternalForeignKeys(Database database,StringBuilder ddl){  for (int idx=0; idx < database.getTableCount(); idx++) {    createExternalForeignKeys(database,database.getTable(idx),ddl);  }}  }
class C{  private FieldTypeSignature[] parseBounds(){  List<FieldTypeSignature> fts=new ArrayList<>(3);  if (current() == ':') {    advance();switch (current()) {case ':':      break;default :    fts.add(parseFieldTypeSignature());}while (current() == ':') {  advance();  fts.add(parseFieldTypeSignature());}} else error("Bound expected");return fts.toArray(new FieldTypeSignature[fts.size()]);}  }
class C{  public String storageClass(){  return storageClass;}  }
class C{  public java.security.cert.Certificate engineGenerateCertificate(InputStream in) throws CertificateException {  if (currentStream == null) {    currentStream=in;    sData=null;    sDataObjectCount=0;  } else   if (currentStream != in) {    currentStream=in;    sData=null;    sDataObjectCount=0;  }  try {    if (sData != null) {      if (sDataObjectCount != sData.size()) {        return getCertificate();      } else {        sData=null;        sDataObjectCount=0;        return null;      }    }    PushbackInputStream pis=new PushbackInputStream(in);    int tag=pis.read();    if (tag == -1) {      return null;    }    pis.unread(tag);    if (tag != 0x30) {      return readPEMCertificate(pis);    } else {      return readDERCertificate(new ASN1InputStream(pis));    }  } catch (  Exception e) {    throw new ExCertificateException(e);  }}  }
class C{  public void clickAt(){  clickAt("1,1");}  }
class C{  public boolean visitingField(){  return visitingField;}  }
class C{  public int taskCount(){  return taskCount;}  }
class C{  public CStopTraceListener(final IDebugger debugger,final TraceLogger logger){  Preconditions.checkNotNull(logger,"IE01565: Logger argument can not be null");  m_debugger=debugger;  m_logger=logger;  debugger.addListener(m_debuggerListener);}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return true;}  }
class C{  public void test_setILjava_lang_Object(){  Object o=new Object();  tVector.set(23,o);  assertTrue("Failed to set Object",tVector.get(23) == o);  try {    tVector.set(-5,"Wrong position");    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.set(tVector.size() + 1,"Wrong position");    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  try {    data=new HashMap<>(JsonUtil.parseJson(in.readUTF()));    in.defaultReadObject();  } catch (  JoseException ex) {    throw new AcmeProtocolException("Cannot deserialize",ex);  }}  }
class C{  final private void updateLocation(){  simulation.updateLocation(this);}  }
class C{  public tr addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void addSigners(SignerInformationStore signerStore){  Iterator it=signerStore.getSigners().iterator();  while (it.hasNext()) {    _signers.add(it.next());  }}  }
class C{  public Set<Group> findGroupsInGroup(String tenantName,PrincipalId groupId,String searchString,int limit) throws Exception {  return getService().findGroupsInGroup(tenantName,groupId,searchString,limit,this.getServiceContext());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isCommitted(){  return committed;}  }
class C{  static void nativeUpdateCursor(Component heavy){  XGlobalCursorManager.getCursorManager().updateCursorLater(heavy);}  }
class C{  @Override public void remove(){  try {    repo.close();    super.remove();  } catch (  IOException e) {  }}  }
class C{  public org.json.JSONArray names(){  org.json.JSONArray ja=new org.json.JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  protected int incrementThreadCount(){  return threadCount.incrementAndGet();}  }
class C{  public double calculateLogLikelihood(){  boolean inModel=false;  int modelCode=(int)modelIndicator.getParameterValue(0);  for (int i=0; i < models.length; i++) {    if (models[i] == modelCode) {      inModel=true;      break;    }  }  if (inModel) {    distribution=prior;  } else {    distribution=pseudoPrior;  }  double logL=super.calculateLogLikelihood();  return logL;}  }
class C{  public void close(){  dbHelper.close();  database.close();}  }
class C{  public void commit(CloudResponse<Integer> response){  if (storageQueue.size() > 0) {    if (CloudPersona.getCurrentPersona().getToken() == null) {      CloudPersona.createAnonymous();    }    StorageRequest req=new StorageRequest();    req.response=response;    req.setContentType("multipart/form-data");    req.setUrl(SERVER_URL + "/objStoreCommit");    req.setPost(true);    NetworkManager.getInstance().addToQueue(req);  }}  }
class C{  public boolean is2byte(){  char c=currentChar();  return c == 'D' || c == 'J';}  }
class C{  public boolean stopped(){  return true;}  }
class C{  public BillingAdapterNotFoundException(){}  }
class C{  private void startSorting() throws CarbonSortKeyAndGroupByException {  LOGGER.info("Number of temp file: " + this.fileCounter);  createRecordHolderQueue(mergerParameters.getIntermediateFiles());  LOGGER.info("Started adding first record from each file");  SortTempFileChunkHolder sortTempFileChunkHolder=null;  for (  File tempFile : mergerParameters.getIntermediateFiles()) {    sortTempFileChunkHolder=new SortTempFileChunkHolder(tempFile,mergerParameters.getDimColCount(),mergerParameters.getComplexDimColCount(),mergerParameters.getMeasureColCount(),mergerParameters.getFileReadBufferSize(),mergerParameters.getNoDictionaryCount(),mergerParameters.getAggType(),mergerParameters.getIsNoDictionaryDimensionColumn());    sortTempFileChunkHolder.initialize();    sortTempFileChunkHolder.readRow();    this.totalNumberOfRecords+=sortTempFileChunkHolder.getEntryCount();    this.recordHolderHeap.add(sortTempFileChunkHolder);  }  LOGGER.info("Heap Size" + this.recordHolderHeap.size());}  }
class C{  public boolean isManufactured(boolean ignoreSupplierProducts){  List<GenericValue> supplierProducts=null;  try {    supplierProducts=product.getRelated("SupplierProduct",UtilMisc.toMap("supplierPrefOrderId","10_MAIN_SUPPL"),UtilMisc.toList("minimumOrderQuantity"),false);  } catch (  GenericEntityException gee) {    Debug.logError("Problem in BOMNode.isManufactured()",module);  }  supplierProducts=EntityUtil.filterByDate(supplierProducts,UtilDateTime.nowTimestamp(),"availableFromDate","availableThruDate",true);  return childrenNodes.size() > 0 && (ignoreSupplierProducts || UtilValidate.isEmpty(supplierProducts));}  }
class C{  public void load(){}  }
class C{  public DTMDefaultBaseIterators(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing);}  }
class C{  public void connectPort(SpeedoPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  }  controller=p;}  }
class C{  private WindowsPath(WindowsFileSystem fs,WindowsPathType type,String root,String path){  this.fs=fs;  this.type=type;  this.root=root;  this.path=path;}  }
class C{  public Mat dst2(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dst2(scale);  return new Mat(dm.toArray());}  }
class C{  public IgfsPath path(){  return path;}  }
class C{  private void validateVolumeLabels(String baseVolumeLabel,Project project,VirtualPoolCapabilityValuesWrapper vPoolCapabilities,Map<String,List<VPlexRecommendation>> varrayRecomendationsMap){  int varrayCount=0;  Iterator<String> varrayIter=varrayRecomendationsMap.keySet().iterator();  while (varrayIter.hasNext()) {    String varrayId=varrayIter.next();    s_logger.info("Processing recommendations for virtual array {}",varrayId);    int volumeCounter=0;    int totalResourceCount=0;    for (    VPlexRecommendation recommendation : varrayRecomendationsMap.get(varrayId)) {      totalResourceCount+=recommendation.getResourceCount();    }    Iterator<VPlexRecommendation> recommendationsIter=varrayRecomendationsMap.get(varrayId).iterator();    while (recommendationsIter.hasNext()) {      VPlexRecommendation recommendation=recommendationsIter.next();      URI storagePoolURI=recommendation.getSourceStoragePool();      VirtualPool volumeVpool=recommendation.getVirtualPool();      s_logger.info("Volume virtual pool is {}",volumeVpool.getId().toString());      vPoolCapabilities.put(VirtualPoolCapabilityValuesWrapper.AUTO_TIER__POLICY_NAME,volumeVpool.getAutoTierPolicyName());      s_logger.info("Recommendation is for {} resources in pool {}",recommendation.getResourceCount(),storagePoolURI.toString());      for (int i=0; i < recommendation.getResourceCount(); i++) {        String volumeLabel=generateVolumeLabel(baseVolumeLabel,varrayCount,volumeCounter,totalResourceCount);        validateVolumeLabel(volumeLabel,project);        s_logger.info("Volume label is {}",volumeLabel);        volumeCounter++;      }    }    varrayCount++;  }}  }
class C{  public void v(Object str){  if (debug) {    if (logLevel <= Log.VERBOSE) {      String name=getFunctionName();      if (name != null) {        Log.v(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.v(tag,str.toString());      }    }  }}  }
class C{  public void addAccessibleSelection(int i){  int j=getSelectionModel().getSelectedIndex();  if (i == j) {    return;  }  if (j >= 0 && j < getMenuCount()) {    JMenu menu=getMenu(j);    if (menu != null) {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }  }  getSelectionModel().setSelectedIndex(i);  JMenu menu=getMenu(i);  if (menu != null) {    MenuElement me[]=new MenuElement[3];    me[0]=JMenuBar.this;    me[1]=menu;    me[2]=menu.getPopupMenu();    MenuSelectionManager.defaultManager().setSelectedPath(me);  }}  }
class C{  public static int sendRewriteCmd(final PacketOutputStream writer,final List<byte[]> queryParts,ParameterHolder[] parameters,int currentIndex,int paramCount,List<ParameterHolder[]> parameterList,boolean rewriteValues) throws IOException {  writer.startPacket(0);  writer.buffer.put(Packet.COM_QUERY);  byte[] firstPart=queryParts.get(0);  byte[] secondPart=queryParts.get(1);  if (!rewriteValues) {    writer.write(firstPart,0,firstPart.length);    writer.write(secondPart,0,secondPart.length);    int staticLength=1;    for (int i=0; i < queryParts.size(); i++)     staticLength+=queryParts.get(i).length;    for (int i=0; i < paramCount; i++) {      parameters[i].writeTo(writer);      writer.write(queryParts.get(i + 2));    }    writer.write(queryParts.get(paramCount + 2));    while (currentIndex < parameterList.size()) {      parameters=parameterList.get(currentIndex);      int parameterLength=0;      boolean knownParameterSize=true;      for (      ParameterHolder parameter : parameters) {        long paramSize=parameter.getApproximateTextProtocolLength();        if (paramSize == -1) {          knownParameterSize=false;          break;        }        parameterLength+=paramSize;      }      if (knownParameterSize) {        if (writer.checkRewritableLength(staticLength + parameterLength)) {          writer.assureBufferCapacity(staticLength + parameterLength);          writer.buffer.put((byte)';');          writer.buffer.put(firstPart,0,firstPart.length);          writer.buffer.put(secondPart,0,secondPart.length);          for (int i=0; i < paramCount; i++) {            parameters[i].writeUnsafeTo(writer);            writer.writeUnsafe(queryParts.get(i + 2));          }          writer.writeUnsafe(queryParts.get(paramCount + 2));          currentIndex++;        } else {          break;        }      } else {        writer.write(';');        writer.write(firstPart,0,firstPart.length);        writer.write(secondPart,0,secondPart.length);        for (int i=0; i < paramCount; i++) {          parameters[i].writeTo(writer);          writer.write(queryParts.get(i + 2));        }        writer.write(queryParts.get(paramCount + 2));        currentIndex++;      }    }  } else {    writer.write(firstPart,0,firstPart.length);    writer.write(secondPart,0,secondPart.length);    int lastPartLength=queryParts.get(paramCount + 2).length;    int intermediatePartLength=queryParts.get(1).length;    for (int i=0; i < paramCount; i++) {      parameters[i].writeTo(writer);      writer.write(queryParts.get(i + 2));      intermediatePartLength+=queryParts.get(i + 2).length;    }    while (currentIndex < parameterList.size()) {      parameters=parameterList.get(currentIndex);      int parameterLength=0;      boolean knownParameterSize=true;      for (      ParameterHolder parameter : parameters) {        long paramSize=parameter.getApproximateTextProtocolLength();        if (paramSize == -1) {          knownParameterSize=false;          break;        }        parameterLength+=paramSize;      }      if (knownParameterSize) {        if (writer.checkRewritableLength(1 + parameterLength + intermediatePartLength+ lastPartLength)) {          writer.assureBufferCapacity(1 + parameterLength + intermediatePartLength+ lastPartLength);          writer.buffer.put((byte)',');          writer.buffer.put(secondPart,0,secondPart.length);          for (int i=0; i < paramCount; i++) {            parameters[i].writeUnsafeTo(writer);            byte[] addPart=queryParts.get(i + 2);            writer.buffer.put(addPart,0,addPart.length);          }          currentIndex++;        } else {          break;        }      } else {        writer.write((byte)',');        writer.write(secondPart,0,secondPart.length);        for (int i=0; i < paramCount; i++) {          parameters[i].writeTo(writer);          writer.write(queryParts.get(i + 2));        }        currentIndex++;      }    }    writer.write(queryParts.get(paramCount + 2));  }  writer.finishPacketWithoutRelease(true);  return currentIndex;}  }
class C{  public EWMA(double alpha,long interval,TimeUnit intervalUnit){  this.interval=intervalUnit.toNanos(interval);  this.alpha=alpha;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testtestIsLast() throws SQLException {  assertFalse(target.isLast());  target.absolute(-1);  assertTrue(target.isLast());  assertFalse(emptyTarget.isLast());  assertFalse(emptyTarget.next());  assertFalse(emptyTarget.isLast());  try {    target.close();    target.isLast();    fail("Should get SQLException");  } catch (  SQLException e) {  }}  }
class C{  private void processIpLeaseDocuments(final State current){  if (current.nextPageLink == null) {    finishTask(current);    return;  }  Operation getOnePageOfIpLeaseDocuments=Operation.createGet(UriUtils.buildUri(getHost(),current.nextPageLink));  getOnePageOfIpLeaseDocuments.setCompletion(null).sendWith(this);}  }
class C{  public ObjectFactory(){}  }
class C{  public static void createErrorPage(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,String message) throws ServletException, IOException {  log.info(message);  WebSessionCtx wsc=WebSessionCtx.get(request);  String windowTitle="Error";  if (wsc != null)   windowTitle=Msg.getMsg(wsc.ctx,"Error");  if (message != null)   windowTitle+=": " + message;  WebDoc doc=WebDoc.create(windowTitle);  body b=doc.getBody();  b.addElement(new p(servlet.getServletName(),AlignType.CENTER));  b.addElement(new br());  createResponse(request,response,servlet,null,doc,false);}  }
class C{  @Override public void generatePartition(Instances data) throws Exception {  buildClassifier(data);}  }
class C{  public static <V,E>Graph<V,E> foldHypergraphEdges(Hypergraph<V,E> h,Supplier<Graph<V,E>> graph_factory,Supplier<E> edge_factory){  Graph<V,E> target=graph_factory.get();  for (  V v : h.getVertices())   target.addVertex(v);  for (  E e : h.getEdges()) {    ArrayList<V> incident=new ArrayList<V>(h.getIncidentVertices(e));    for (int i=0; i < incident.size(); i++)     for (int j=i + 1; j < incident.size(); j++)     target.addEdge(edge_factory.get(),incident.get(i),incident.get(j));  }  return target;}  }
class C{  public void addForeignKeyRelationship(ERDAssociation rel,boolean reflect){  if (foreignKeyRelationships == null) {    foreignKeyRelationships=new ArrayList<>();  }  foreignKeyRelationships.add(rel);  if (reflect) {    firePropertyChange(OUTPUT,null,rel);  }}  }
class C{  long readFrameRef(){  return readID(vm.sizeofFrameRef);}  }
class C{  @Override public int compareTo(Route o){  return ((Integer)switchPorts.size()).compareTo(o.switchPorts.size());}  }
class C{  public LogicalRelationExpression createLogicalRelationExpression(){  LogicalRelationExpressionImpl logicalRelationExpression=new LogicalRelationExpressionImpl();  return logicalRelationExpression;}  }
class C{  @Beta public static <K,V>ImmutableListMultimap<K,V> copyOf(Iterable<? extends Entry<? extends K,? extends V>> entries){  return new Builder<K,V>().putAll(entries).build();}  }
class C{  public boolean hasUsage(){  return super.hasAttribute(USAGE);}  }
class C{  public final void putAll(Map s){  for (Iterator iter=s.keySet().iterator(); iter.hasNext(); ) {    Object key=iter.next();    this.put(key,s.get(key));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.181 -0400",hash_original_method="748D1A540DB2B1DDAB82E141347FF66A",hash_generated_method="54308915F1E0DB790CAAAD516F7BDF04") public static char[] toCharArray(InputStream is,String encoding) throws IOException {  return toCharArray(is,Charsets.toCharset(encoding));}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public ExtractedMachineAndSoftwares extractMachineAndSoftwares(MachineRepository mr,SoftwareRepository sr) throws InvalidMameArgumentsException, IOException, InterruptedException {  ExtractedMachineAndSoftwares ems=new ExtractedMachineAndSoftwares();  String[] cmdArgs=this.commandLine.getArgs();  if (cmdArgs.length > 2) {    throw new InvalidMameArgumentsException("Too many non option args");  }  Machine m=null;  if (cmdArgs.length >= 1) {    try {      m=mr.findByName(cmdArgs[0]);      ems.setMachine(m);    } catch (    MachineDoesntExistException e) {      throw (InvalidMameArgumentsException)new InvalidMameArgumentsException(e.getMessage()).initCause(e);    }    if (cmdArgs.length > 1) {      if (this.isRegularSoftwareFile(cmdArgs[1])) {        throw new InvalidMameArgumentsException("The software must be a software name from software" + " list and not a regular file");      }      try {        ems.getSoftwares().add(sr.findByMachineAndByName(m,cmdArgs[1]));      } catch (      MachineHasNoSoftwareListException|SoftwareNotFoundInSoftwareListsException|MachineDoesntExistException e) {        throw (InvalidMameArgumentsException)new InvalidMameArgumentsException(e.getMessage()).initCause(e);      }    } else {      for (      MediaDevice md : m.getMediaDevices()) {        if (this.commandLine.hasOption(md.getBriefname())) {          String softwareName=this.commandLine.getOptionValue(md.getBriefname());          Software s;          if (this.isRegularSoftwareFile(softwareName)) {            s=new Software(m,md,softwareName);          } else {            try {              s=sr.findByMachineAndAndByMediaTypeAndByName(m,md,softwareName);            } catch (            MachineHasNoSoftwareListException|SoftwareNotFoundInSoftwareListsException|MachineDoesntExistException e) {              throw (InvalidMameArgumentsException)new InvalidMameArgumentsException(e.getMessage()).initCause(e);            }          }          ems.getSoftwares().add(s);        }      }    }  }  return ems;}  }
class C{  protected boolean readSendDelay(){  try {    sendDelay=Integer.parseInt(sendDelayField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error19"));    statusText1.setVisible(true);    sendDelay=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (sendDelay < 0) {    statusText1.setText(rb.getString("Error20"));    statusText1.setVisible(true);    sendDelay=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  if (sendDelay > 65535) {    statusText1.setText(rb.getString("Error21"));    statusText1.setVisible(true);    sendDelay=0;    errorInStatus1=true;    resetNotes2();    return (false);  }  return true;}  }
class C{  public void waitIfExclusiveModeEnabled(){  if (database.getLobSession() == this) {    return;  }  while (true) {    Session exclusive=database.getExclusiveSession();    if (exclusive == null || exclusive == this) {      break;    }    if (Thread.holdsLock(exclusive)) {      break;    }    try {      Thread.sleep(100);    } catch (    InterruptedException e) {    }  }}  }
class C{  public boolean isRevealed(Commitment commitment,byte[] message){  if (message.length + commitment.getSecret().length != byteLength) {    throw new DataLengthException("Message and witness secret lengths do not match.");  }  byte[] calcCommitment=calculateCommitment(commitment.getSecret(),message);  return Arrays.constantTimeAreEqual(commitment.getCommitment(),calcCommitment);}  }
class C{  public boolean canDeleteData(){  return iseditable && m_bd.canDeleteData();}  }
class C{  public static void check(final CFlags flags,final String... contains){  Assert.assertNotNull(flags);  final StringBuilder problems=new StringBuilder();  try {    CheckSpelling.setSpelling(problems);    for (    final Flag f : flags.getRequired()) {      checkDescriptionConstraints(f);    }    for (    final Flag f : flags.getOptional()) {      checkDescriptionConstraints(f);    }    if (problems.length() > 0) {      Assert.fail(problems.toString());    }  } catch (  final IOException e) {    Assert.fail(e.getMessage());  }  final String usage=flags.getUsageString().replaceAll("    --","\\\\0, --").replaceAll("\\s+"," ");  Assert.assertNotNull(usage);  if (contains != null) {    TestUtils.containsAll(usage,contains);  }}  }
class C{  public void onBackPressed(){  if (!mFragments.popBackStackImmediate()) {    finish();  }}  }
class C{  @Override public void init(FilterConfig filterConfig) throws ServletException {}  }
class C{  public String brokenRecordsStr(int year,String abbr){  StringBuilder sb=new StringBuilder();  for (  Map.Entry<String,Record> r : records.entrySet()) {    if (r.getValue() != null && r.getValue().getHolder().split(" ")[0].equals(abbr) && r.getValue().getYear() == year && !r.getKey().split(" ")[0].equals("Career")) {      sb.append(r.getValue().getHolder() + " broke the record for " + r.getKey()+ " with "+ r.getValue().getNumber()+ "!\n");    }  }  return sb.toString();}  }
class C{  public void removeStackingInformation(){  setStacking(0);  setStackingMarker("");}  }
class C{  @SuppressWarnings("unchecked") private List<Product> executeObjectQuery(){  Query query=dm.createNativeQuery(sql,Product.class);  setParameters(query);  if (listCriteria.getOffset() > 0) {    query.setFirstResult(listCriteria.getOffset());    doCountQuery=true;  }  if (listCriteria.getLimit() >= 0) {    query.setMaxResults(listCriteria.getLimit());    doCountQuery=true;  }  List<Product> result=query.getResultList();  return result;}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public AbstractValidatorImplementation(final CharSequence errorMessage,final boolean result){  super(errorMessage);  this.result=result;}  }
class C{  private PageDataOverflow(PageStore store,int pageId,Data data){  this.store=store;  setPos(pageId);  this.data=data;}  }
class C{  long determineContext(String name) throws PlayerDebugException {  long id=Value.UNKNOWN_ID;  if (m_current != null) {    id=toValue().getId();  } else   if (name == null)   ; else {    long baseId=Value.BASE_ID;    int depth=((Integer)m_cache.get(DebugCLI.DISPLAY_FRAME_NUMBER)).intValue();    baseId-=depth;    Variable contextVar=null;    Value contextVal=null;    Value val=null;    if ((val=locateParentForNamed(baseId,name,false)) != null)     ; else     if (((contextVar=locateForNamed(baseId,"this",false)) != null) && (setName("this") && (val=locateParentForNamed(contextVar.getValue().getId(),name,true)) != null))     ; else     if (setName("_root") && (val=locateParentForNamed(Value.ROOT_ID,name,true)) != null)     ; else     if (setName("_global") && (val=locateParentForNamed(Value.GLOBAL_ID,name,true)) != null)     ; else     if (((contextVal=locate(Value.GLOBAL_ID,getCurrentPackageName(),false)) != null) && (setName("_global." + getCurrentPackageName()) && (val=locateParentForNamed(contextVal.getId(),name,true)) != null))     ;    if (val != null) {      id=val.getId();      pushName(name);      lockName();    }  }  return id;}  }
class C{  public cite addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static String osString(){  return osStr;}  }
class C{  private static void adjustForCurrencyDefaultFractionDigits(DecimalFormat format,DecimalFormatSymbols symbols){  Currency currency=symbols.getCurrency();  if (currency == null) {    try {      currency=Currency.getInstance(symbols.getInternationalCurrencySymbol());    } catch (    IllegalArgumentException e) {    }  }  if (currency != null) {    int digits=currency.getDefaultFractionDigits();    if (digits != -1) {      int oldMinDigits=format.getMinimumFractionDigits();      if (oldMinDigits == format.getMaximumFractionDigits()) {        format.setMinimumFractionDigits(digits);        format.setMaximumFractionDigits(digits);      } else {        format.setMinimumFractionDigits(Math.min(digits,oldMinDigits));        format.setMaximumFractionDigits(digits);      }    }  }}  }
class C{  @SuppressWarnings("unused") @Deprecated protected void executeServicesOperation(ServiceRequestBuffer srb) throws SQLException {  try (FbService service=attachServiceManager()){    service.startServiceAction(srb);    queueService(service);  } catch (  IOException ioe) {    throw new SQLException(ioe);  }}  }
class C{  public void onKernalStart() throws IgniteCheckedException {}  }
class C{  public static boolean rectIntersects(final double aMinX,final double aMinY,final double aMaxX,final double aMaxY,final double bMinX,final double bMinY,final double bMaxX,final double bMaxY){  return !((aMaxX < bMinX || aMinX > bMaxX || aMaxY < bMinY || aMinY > bMaxY));}  }
class C{  public synchronized OMGraphicList prepare(){  if (mifl != null) {    OMGraphicList list=mifl.getList();    if (list != null) {      list.generate(getProjection());    }    return list;  } else {    return new OMGraphicList();  }}  }
class C{  static void addSerializer(final Node node,final com.redhat.ceylon.model.typechecker.model.Class d,final GenerateJsVisitor gen){}  }
class C{  private void uploadCsvToLordn(String urlPath,String csvData) throws IOException {  String url=tmchMarksdbUrl + urlPath;  logger.infofmt("LORDN upload task %s: Sending to URL: %s ; data: %s",actionLogId,url,csvData);  HTTPRequest req=new HTTPRequest(new URL(url),POST,validateCertificate().setDeadline(60d));  lordnRequestInitializer.initialize(req,tld);  setPayloadMultipart(req,"file","claims.csv",CSV_UTF_8,csvData);  HTTPResponse rsp=fetchService.fetch(req);  logger.infofmt("LORDN upload task %s response: HTTP response code %d, response data: %s",actionLogId,rsp.getResponseCode(),rsp.getContent());  if (rsp.getResponseCode() != SC_ACCEPTED) {    throw new UrlFetchException(String.format("LORDN upload task %s error: Failed to upload LORDN claims to MarksDB",actionLogId),req,rsp);  }  Optional<String> location=getHeaderFirst(rsp,LOCATION);  if (!location.isPresent()) {    throw new UrlFetchException(String.format("LORDN upload task %s error: MarksDB failed to provide a Location header",actionLogId),req,rsp);  }  getQueue(NordnVerifyAction.QUEUE).add(makeVerifyTask(new URL(location.get()),csvData));}  }
class C{  public boolean isSetEnd_in_both(){  return EncodingUtils.testBit(__isset_bitfield,__END_IN_BOTH_ISSET_ID);}  }
class C{  protected IntegerSyntax(int value,int lowerBound,int upperBound){  if (lowerBound > value || value > upperBound) {    throw new IllegalArgumentException("Value " + value + " not in range "+ lowerBound+ ".."+ upperBound);  }  this.value=value;}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 2:case 1:    return true;default :  break;}return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private boolean anyPortsMatchStorageDevice(URIQueryResultList ports,String systemUri){  boolean isMatched=false;  for (  URI spUri : ports) {    StoragePort storagePort=_dbClient.queryObject(StoragePort.class,spUri);    if (storagePort != null) {      URI system=storagePort.getStorageDevice();      if (system != null && system.toString().equals(systemUri)) {        isMatched=true;        break;      }    }  }  return isMatched;}  }
class C{  public boolean isPrimary(){  Object oo=get_Value(COLUMNNAME_IsPrimary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void verify(Date periods[][],BigDecimal expectedPrice,int paramTestMonth) throws Exception {  verify(SUBSCRIPTION_ID,periods,expectedPrice,paramTestMonth);}  }
class C{  public void fillBuckets(){  RoutingTable table=routingTableCOW;  for (int i=0; i < table.size(); i++) {    RoutingTableEntry entry=table.get(i);    int num=entry.bucket.getNumEntries();    if (num > 0 && num < DHTConstants.MAX_ENTRIES_PER_BUCKET) {      dht.fillBucket(entry.prefix.createRandomKeyFromPrefix(),entry.bucket,null);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element lastEmployee;  NodeList lastempList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("em");  expectedResult.add("strong");  expectedResult.add("code");  expectedResult.add("sup");  expectedResult.add("var");  expectedResult.add("acronym");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  lastEmployee=(Element)elementList.item(4);  lastempList=lastEmployee.getElementsByTagName("*");  for (int indexN10067=0; indexN10067 < lastempList.getLength(); indexN10067++) {    child=(Node)lastempList.item(indexN10067);    childName=child.getNodeName();    result.add(childName);  }  assertEqualsAutoCase("element","tagNames",expectedResult,result);}  }
class C{  public boolean isInRadius(double x,double y,double z){  return MathHelper.pointDistanceSpace(x,y,z,focalPoint.posX,focalPoint.posY,focalPoint.posZ) <= MAX_DISTANCE;}  }
class C{  public DoubleMetaphone(){  super();}  }
class C{  private void processMapMultInstruction(Class<? extends MatrixValue> valueClass,CachedValueMap cachedValues,IndexedMatrixValue in1,IndexedMatrixValue in2,int blockRowFactor,int blockColFactor) throws DMLRuntimeException {  boolean removeOutput=true;  if (_cacheType.isRightCache()) {    DistributedCacheInput dcInput=MRBaseForCommonInstructions.dcValues.get(input2);    long in2_cols=dcInput.getNumCols();    long in2_colBlocks=(long)Math.ceil(((double)in2_cols) / dcInput.getNumColsPerBlock());    for (int bidx=1; bidx <= in2_colBlocks; bidx++) {      IndexedMatrixValue in2Block=dcInput.getDataBlock((int)in1.getIndexes().getColumnIndex(),bidx);      MatrixValue in2BlockValue=in2Block.getValue();      MatrixIndexes in2BlockIndex=in2Block.getIndexes();      IndexedMatrixValue out=cachedValues.holdPlace(output,valueClass);      OperationsOnMatrixValues.performAggregateBinary(in1.getIndexes(),in1.getValue(),in2BlockIndex,in2BlockValue,out.getIndexes(),out.getValue(),((AggregateBinaryOperator)optr));      removeOutput&=(!_outputEmptyBlocks && out.getValue().isEmpty());    }  } else {    DistributedCacheInput dcInput=MRBaseForCommonInstructions.dcValues.get(input1);    long in1_rows=dcInput.getNumRows();    long in1_rowsBlocks=(long)Math.ceil(((double)in1_rows) / dcInput.getNumRowsPerBlock());    for (int bidx=1; bidx <= in1_rowsBlocks; bidx++) {      IndexedMatrixValue in1Block=dcInput.getDataBlock(bidx,(int)in2.getIndexes().getRowIndex());      MatrixValue in1BlockValue=in1Block.getValue();      MatrixIndexes in1BlockIndex=in1Block.getIndexes();      IndexedMatrixValue out=cachedValues.holdPlace(output,valueClass);      OperationsOnMatrixValues.performAggregateBinary(in1BlockIndex,in1BlockValue,in2.getIndexes(),in2.getValue(),out.getIndexes(),out.getValue(),((AggregateBinaryOperator)optr));      removeOutput&=(!_outputEmptyBlocks && out.getValue().isEmpty());    }  }  if (removeOutput)   cachedValues.remove(output);}  }
class C{  private void updateMagneticCorrection(){  magneticDeclinationCalculator.setLocationAndTime(location,getTimeMillis());}  }
class C{  private Plan buildPlan1(){  Plan plan=PopulationUtils.createPlan();  Activity a=PopulationUtils.createActivityFromCoord("a",CoordUtils.createCoord(0.0,0.0));  a.setEndTime(Time.parseTime("16:00:00"));  plan.addActivity(a);  plan.addLeg(PopulationUtils.createLeg("truck"));  double travelTime=Time.parseTime("16:00:00");  double distance=Math.round((travelTime * ChainChopper.AVERAGE_SPEED) / ChainChopper.CROWFLY_FACTOR);  Activity b=PopulationUtils.createActivityFromCoord("b",CoordUtils.createCoord(distance,2.0));  plan.addActivity(b);  return plan;}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=true;  if (!(unit instanceof BattleArmor)) {    result=false;  } else   if (-1 != troopers) {    result=false;  } else {    result=((BattleArmor)unit).hasMagneticClamps();  }  return result;}  }
class C{  private void importOldBlockDb(){  loadBlockDb();  PackageManager pm=mContext.getPackageManager();  for (  String pkg : mBlockedPackages) {    PackageInfo info=null;    try {      info=pm.getPackageInfo(pkg,0);      setNotificationsEnabledForPackage(pkg,info.applicationInfo.uid,false);    } catch (    NameNotFoundException e) {    }  }  mBlockedPackages.clear();  if (mPolicyFile != null) {    mPolicyFile.delete();  }}  }
class C{  public void rotate(float angle,float vx,float vy,float vz){  g.rotate(angle,vx,vy,vz);}  }
class C{  @Override public boolean isRunning(){  return running;}  }
class C{  public void addDoubleClickListener(IDoubleClickListener listener){  doubleClickListenerList.add(listener);}  }
class C{  private void copyBitMap(int extramapindex,int index){  if (VM.TraceStkMaps) {    VM.sysWriteln(" copyBitMap from map index = ",index," copyBitMap from value = ",jsrInfo.unusualReferenceMaps[index]);  }  for (int i=0; i < bytesPerMap(); i++) {    jsrInfo.unusualReferenceMaps[extramapindex + i]=jsrInfo.unusualReferenceMaps[index + i];  }  if (VM.TraceStkMaps) {    VM.sysWriteln(" extraUnusualBitMap index = ",extramapindex," extraunusualBitMap value = ",jsrInfo.unusualReferenceMaps[extramapindex]);  }}  }
class C{  public void incrementRoundCount(){  roundCount++;}  }
class C{  public void onAddFriendPressed(View view){  Intent intent=new Intent(ShareListActivity.this,AddFriendActivity.class);  startActivity(intent);}  }
class C{  public NioDatagramConnector(){  super(new DefaultDatagramSessionConfig(),NioProcessor.class);}  }
class C{  public RestrictedUsageDescription(IEObjectDescription delegate,JavaScriptVariant jsVariant){  super(delegate);  this.jsVariant=jsVariant;}  }
class C{  public static Map<Unit,Unit> mapTransports(final Route route,final Collection<Unit> units,final Collection<Unit> transportsToLoad){  if (route.isLoad()) {    return mapTransportsToLoad(units,transportsToLoad);  }  if (route.isUnload()) {    return mapTransportsAlreadyLoaded(units,route.getStart().getUnits().getUnits());  }  return mapTransportsAlreadyLoaded(units,units);}  }
class C{  public static int decodeHighBits(long l){  long key=l & 0xFFFFFFFF00000000L;  key>>=32;  return (int)key;}  }
class C{  public void createScheduler(String schedulerName,String schedulerInstanceId,ThreadPool threadPool,ThreadExecutor threadExecutor,JobStore jobStore,Map<String,SchedulerPlugin> schedulerPluginMap,String rmiRegistryHost,int rmiRegistryPort,long idleWaitTime,long dbFailureRetryInterval,boolean jmxExport,String jmxObjectName) throws SchedulerException {  createScheduler(schedulerName,schedulerInstanceId,threadPool,DEFAULT_THREAD_EXECUTOR,jobStore,schedulerPluginMap,rmiRegistryHost,rmiRegistryPort,idleWaitTime,dbFailureRetryInterval,jmxExport,jmxObjectName,DEFAULT_BATCH_MAX_SIZE,DEFAULT_BATCH_TIME_WINDOW);}  }
class C{  protected OrderedCube makeOrderedRenderable(DrawContext dc){  if (dc.getFrameTimeStamp() != this.frameTimestamp || dc.isContinuous2DGlobe()) {    OrderedCube orderedCube=new OrderedCube();    if (dc.is2DGlobe()) {      orderedCube.placePoint=dc.getGlobe().computePointFromPosition(this.position.getLatitude(),this.position.getLongitude(),0);    } else {      orderedCube.placePoint=dc.getGlobe().computePointFromPosition(this.position);    }    orderedCube.eyeDistance=dc.getView().getEyePoint().distanceTo3(orderedCube.placePoint);    orderedCube.extent=new Sphere(orderedCube.placePoint,Math.sqrt(3.0) * this.size / 2.0);    this.frameTimestamp=dc.getFrameTimeStamp();    this.currentFramesOrderedCube=orderedCube;    return orderedCube;  } else {    return this.currentFramesOrderedCube;  }}  }
class C{  public boolean isOverload(){  return (this.toString().indexOf("!O") >= 0);}  }
class C{  private void addDeduplicationCapability(StorageCapabilities storageCapabilities,Boolean deduplication){  if (deduplication) {    DeduplicationCapabilityDefinition capabilityDefinition=new DeduplicationCapabilityDefinition();    Map<String,List<String>> capabilityProperties=new HashMap<>();    capabilityProperties.put(DeduplicationCapabilityDefinition.PROPERTY_NAME.ENABLED.name(),Collections.singletonList(Boolean.TRUE.toString()));    CapabilityInstance dedupCapability=new CapabilityInstance(capabilityDefinition.getId(),capabilityDefinition.getId(),capabilityProperties);    CommonStorageCapabilities commonCapabilities=storageCapabilities.getCommonCapabilitis();    if (commonCapabilities == null) {      commonCapabilities=new CommonStorageCapabilities();      storageCapabilities.setCommonCapabilitis(commonCapabilities);    }    List<DataStorageServiceOption> dataStorageSvcOptions=commonCapabilities.getDataStorage();    if (dataStorageSvcOptions == null) {      dataStorageSvcOptions=new ArrayList<>();      commonCapabilities.setDataStorage(dataStorageSvcOptions);    }    DataStorageServiceOption dataStorageSvcOption=new DataStorageServiceOption(Collections.singletonList(dedupCapability));    dataStorageSvcOptions.add(dataStorageSvcOption);  }}  }
class C{  @Override public String toString(){  return toStringSortedByKeys();}  }
class C{  public static String cleanseMmsSubject(Context context,String subject){  if (TextUtils.isEmpty(subject)) {    return subject;  }  if (sNoSubjectStrings == null) {    sNoSubjectStrings=context.getResources().getStringArray(R.array.empty_subject_strings);  }  final int len=sNoSubjectStrings.length;  for (int i=0; i < len; i++) {    if (subject.equalsIgnoreCase(sNoSubjectStrings[i])) {      return null;    }  }  return subject;}  }
class C{  public static boolean isNumeric(String datatypeURI){  return numericDatatypeURIs.contains(datatypeURI);}  }
class C{  @Override public ChatEvent parse(String text){  if (text.length() < 600 && text.startsWith(NOTIFICATION) || text.startsWith(NOTIFICATION,1)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(text," ");    if (tok.hasMoreTokens()) {      tok.nextToken();      if (tok.hasMoreTokens()) {        String source=tok.nextToken();        return new ChatEvent(IcsUtils.stripTitles(source).trim(),text.contains(DEPARTED) ? ChatType.NOTIFICATION_DEPARTURE : ChatType.NOTIFICATION_ARRIVAL,text.trim());      }    }    return null;  }  return null;}  }
class C{  public static boolean isUdhiAndReplyPath(byte esmClass){  return isSpecificFeatures(esmClass,SMPPConstant.ESMCLS_UDHI_REPLY_PATH);}  }
class C{  @Nullable public E addx(E e){  ConcurrentMap<E,E> m=(ConcurrentMap<E,E>)map;  return m.putIfAbsent(e,e);}  }
class C{  protected void dilate(boolean isInverted){  int currIdx=0;  int maxIdx=pixels.length;  int[] out=new int[maxIdx];  if (!isInverted) {    while (currIdx < maxIdx) {      int currRowIdx=currIdx;      int maxRowIdx=currIdx + width;      while (currIdx < maxRowIdx) {        int colOrig, colOut;        colOrig=colOut=pixels[currIdx];        int idxLeft=currIdx - 1;        int idxRight=currIdx + 1;        int idxUp=currIdx - width;        int idxDown=currIdx + width;        if (idxLeft < currRowIdx)         idxLeft=currIdx;        if (idxRight >= maxRowIdx)         idxRight=currIdx;        if (idxUp < 0)         idxUp=0;        if (idxDown >= maxIdx)         idxDown=currIdx;        int colUp=pixels[idxUp];        int colLeft=pixels[idxLeft];        int colDown=pixels[idxDown];        int colRight=pixels[idxRight];        int currLum=77 * (colOrig >> 16 & 0xff) + 151 * (colOrig >> 8 & 0xff) + 28 * (colOrig & 0xff);        int lumLeft=77 * (colLeft >> 16 & 0xff) + 151 * (colLeft >> 8 & 0xff) + 28 * (colLeft & 0xff);        int lumRight=77 * (colRight >> 16 & 0xff) + 151 * (colRight >> 8 & 0xff) + 28 * (colRight & 0xff);        int lumUp=77 * (colUp >> 16 & 0xff) + 151 * (colUp >> 8 & 0xff) + 28 * (colUp & 0xff);        int lumDown=77 * (colDown >> 16 & 0xff) + 151 * (colDown >> 8 & 0xff) + 28 * (colDown & 0xff);        if (lumLeft > currLum) {          colOut=colLeft;          currLum=lumLeft;        }        if (lumRight > currLum) {          colOut=colRight;          currLum=lumRight;        }        if (lumUp > currLum) {          colOut=colUp;          currLum=lumUp;        }        if (lumDown > currLum) {          colOut=colDown;          currLum=lumDown;        }        out[currIdx++]=colOut;      }    }  } else {    while (currIdx < maxIdx) {      int currRowIdx=currIdx;      int maxRowIdx=currIdx + width;      while (currIdx < maxRowIdx) {        int colOrig, colOut;        colOrig=colOut=pixels[currIdx];        int idxLeft=currIdx - 1;        int idxRight=currIdx + 1;        int idxUp=currIdx - width;        int idxDown=currIdx + width;        if (idxLeft < currRowIdx)         idxLeft=currIdx;        if (idxRight >= maxRowIdx)         idxRight=currIdx;        if (idxUp < 0)         idxUp=0;        if (idxDown >= maxIdx)         idxDown=currIdx;        int colUp=pixels[idxUp];        int colLeft=pixels[idxLeft];        int colDown=pixels[idxDown];        int colRight=pixels[idxRight];        int currLum=77 * (colOrig >> 16 & 0xff) + 151 * (colOrig >> 8 & 0xff) + 28 * (colOrig & 0xff);        int lumLeft=77 * (colLeft >> 16 & 0xff) + 151 * (colLeft >> 8 & 0xff) + 28 * (colLeft & 0xff);        int lumRight=77 * (colRight >> 16 & 0xff) + 151 * (colRight >> 8 & 0xff) + 28 * (colRight & 0xff);        int lumUp=77 * (colUp >> 16 & 0xff) + 151 * (colUp >> 8 & 0xff) + 28 * (colUp & 0xff);        int lumDown=77 * (colDown >> 16 & 0xff) + 151 * (colDown >> 8 & 0xff) + 28 * (colDown & 0xff);        if (lumLeft < currLum) {          colOut=colLeft;          currLum=lumLeft;        }        if (lumRight < currLum) {          colOut=colRight;          currLum=lumRight;        }        if (lumUp < currLum) {          colOut=colUp;          currLum=lumUp;        }        if (lumDown < currLum) {          colOut=colDown;          currLum=lumDown;        }        out[currIdx++]=colOut;      }    }  }  System.arraycopy(out,0,pixels,0,maxIdx);}  }
class C{  static public String join(String str[],String separator){  StringBuffer buffer=new StringBuffer();  for (int i=0; i < str.length; i++) {    if (i != 0)     buffer.append(separator);    buffer.append(str[i]);  }  return buffer.toString();}  }
class C{  public Bitmap toBitmap(){  setDrawingCacheEnabled(false);  if (!isDrawingCacheEnabled()) {    setDrawingCacheEnabled(true);  }  if (mRenderer.isApplyBackgroundColor()) {    setDrawingCacheBackgroundColor(mRenderer.getBackgroundColor());  }  setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);  return getDrawingCache(true);}  }
class C{  private void addUnitTaxCalculationInfoClone(final TaxCalculationInfo taxCalInfo,final TaxCalculationInfo clone){  final List<UnitTaxCalculationInfo> units=new ArrayList<UnitTaxCalculationInfo>();  final List<UnitTaxCalculationInfo> unitsByDate=new ArrayList<UnitTaxCalculationInfo>();  for (  final UnitTaxCalculationInfo unitInfo : taxCalInfo.getUnitTaxCalculationInfos()) {    final UnitTaxCalculationInfo newUnitInfo=getUnitTaxCalculationInfoClone(unitInfo);    unitsByDate.add(newUnitInfo);  }  clone.setUnitTaxCalculationInfo(units);}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  public final static void closeEL(final OutputStream os){  try {    if (os != null)     os.close();  } catch (  final Throwable e) {  }}  }
class C{  @Override public boolean isInside(Point point){  return entityRect.contains(point.x,point.y);}  }
class C{  String cleanSelectorString(String selector){  boolean lastWasSpace=true;  for (int counter=0, maxCounter=selector.length(); counter < maxCounter; counter++) {switch (selector.charAt(counter)) {case ' ':      if (lastWasSpace) {        return _cleanSelectorString(selector);      }    lastWasSpace=true;  break;case '\n':case '\r':case '\t':return _cleanSelectorString(selector);default :lastWasSpace=false;}}if (lastWasSpace) {return _cleanSelectorString(selector);}return selector;}  }
class C{  private void startTimer(int resolution){  if (timer != null) {    timer.stop();    timer.setDelay(resolution);  } else {    timer=new Timer(resolution,this);  }  timer.start();}  }
class C{  public static void reset(View v){  v.setTranslationX(0f);  v.setTranslationY(0f);  v.setScaleX(1f);  v.setScaleY(1f);  v.setAlpha(1f);}  }
class C{  public TimeoutException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  public boolean offer(E o){  if (o == null) {    throw new NullPointerException("o == null");  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  public static boolean intersectRayCircle(Vector2dc origin,Vector2dc dir,Vector2dc center,double radiusSquared,Vector2d result){  return intersectRayCircle(origin.x(),origin.y(),dir.x(),dir.y(),center.x(),center.y(),radiusSquared,result);}  }
class C{  public boolean isForceOutput(){  return isForceOutput;}  }
class C{  protected LogSegmentMetadata doCompleteAndCloseLogSegment(String inprogressZnodeName,long logSegmentSeqNo,long ledgerId,long firstTxId,long lastTxId,int recordCount,long lastEntryId,long lastSlotId) throws IOException {  Promise<LogSegmentMetadata> promise=new Promise<LogSegmentMetadata>();  doCompleteAndCloseLogSegment(inprogressZnodeName,logSegmentSeqNo,ledgerId,firstTxId,lastTxId,recordCount,lastEntryId,lastSlotId,promise);  return FutureUtils.result(promise);}  }
class C{  public static void makeGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  final SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  final ClassCastException exc) {    throw new IllegalArgumentException("The first argument to makeGrid must use SpringLayout.",exc);  }  final Spring xPadSpring=Spring.constant(xPad);  final Spring yPadSpring=Spring.constant(yPad);  final Spring initialXSpring=Spring.constant(initialX);  final Spring initialYSpring=Spring.constant(initialY);  final int max=rows * cols;  Spring maxWidthSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  Spring maxHeightSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  for (int i=1; i < max; i++) {    final SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    maxWidthSpring=Spring.max(maxWidthSpring,cons.getWidth());    maxHeightSpring=Spring.max(maxHeightSpring,cons.getHeight());  }  for (int i=0; i < max; i++) {    final SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    cons.setWidth(maxWidthSpring);    cons.setHeight(maxHeightSpring);  }  SpringLayout.Constraints lastCons=null;  SpringLayout.Constraints lastRowCons=null;  for (int i=0; i < max; i++) {    final SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    if (i % cols == 0) {      lastRowCons=lastCons;      cons.setX(initialXSpring);    } else {      cons.setX(Spring.sum(lastCons.getConstraint(SpringLayout.EAST),xPadSpring));    }    if (i / cols == 0) {      cons.setY(initialYSpring);    } else {      cons.setY(Spring.sum(lastRowCons.getConstraint(SpringLayout.SOUTH),yPadSpring));    }    lastCons=cons;  }  final SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,Spring.sum(Spring.constant(yPad),lastCons.getConstraint(SpringLayout.SOUTH)));  pCons.setConstraint(SpringLayout.EAST,Spring.sum(Spring.constant(xPad),lastCons.getConstraint(SpringLayout.EAST)));}  }
class C{  protected Border createNonRolloverBorder(){  Object border=UIManager.get("ToolBar.nonrolloverBorder");  if (border != null) {    return (Border)border;  }  UIDefaults table=UIManager.getLookAndFeelDefaults();  return new CompoundBorder(new BasicBorders.ButtonBorder(table.getColor("Button.shadow"),table.getColor("Button.darkShadow"),table.getColor("Button.light"),table.getColor("Button.highlight")),new BasicBorders.RolloverMarginBorder());}  }
class C{  public int compare(IMultiPoint o1,IMultiPoint o2){  return FloatingPoint.compare(o1.getCoordinate(d),o2.getCoordinate(d));}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return false;  String sql="SELECT count(*) FROM AD_Package_Exp_Detail WHERE AD_Package_Exp_ID = ?";  int recordCount=DB.getSQLValue(get_TrxName(),sql,getAD_Package_Exp_ID());  if (recordCount == 0) {    sql="SELECT * FROM AD_Package_Exp_Common";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,get_TrxName());      rs=pstmt.executeQuery();      int i=1;      while (rs.next()) {        X_AD_Package_Exp_Detail PackDetail=new X_AD_Package_Exp_Detail(Env.getCtx(),0,null);        PackDetail.setAD_Client_ID(this.getAD_Client_ID());        PackDetail.setAD_Org_ID(this.getAD_Org_ID());        PackDetail.setAD_Package_Exp_ID(getAD_Package_Exp_ID());        PackDetail.setType(rs.getString("TYPE"));        PackDetail.setFileName(rs.getString("FILENAME"));        PackDetail.setDescription(rs.getString("DESCRIPTION"));        PackDetail.setTarget_Directory(rs.getString("TARGET_DIRECTORY"));        PackDetail.setFile_Directory(rs.getString("FILE_DIRECTORY"));        PackDetail.setDestination_Directory(rs.getString("DESTINATION_DIRECTORY"));        PackDetail.setSQLStatement(rs.getString("SQLSTATEMENT"));        PackDetail.setAD_Workflow_ID(rs.getInt("AD_WORKFLOW_ID"));        PackDetail.setAD_Window_ID(rs.getInt("AD_WINDOW_ID"));        PackDetail.setAD_Role_ID(rs.getInt("AD_ROLE_ID"));        PackDetail.setAD_Process_ID(rs.getInt("AD_PROCESS_ID"));        PackDetail.setAD_Menu_ID(rs.getInt("AD_MENU_ID"));        PackDetail.setDBType(rs.getString("DBTYPE"));        PackDetail.setAD_ImpFormat_ID(rs.getInt("AD_IMPFORMAT_ID"));        PackDetail.setAD_Workbench_ID(rs.getInt("AD_WORKBENCH_ID"));        PackDetail.setAD_Table_ID(rs.getInt("AD_TABLE_ID"));        PackDetail.setAD_Form_ID(rs.getInt("AD_FORM_ID"));        PackDetail.setAD_ReportView_ID(rs.getInt("AD_REPORTVIEW_ID"));        PackDetail.setLine(i * 10);        PackDetail.saveEx();        i++;      }    } catch (    Exception e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  return true;}  }
class C{  @Override public int indexOf(Object object){  return indexOf(object,0);}  }
class C{  public String hosts(){  return Strings.join(";",all());}  }
class C{  protected int countSteps(LocPathIterator lpi){  if (lpi instanceof WalkingIterator) {    WalkingIterator wi=(WalkingIterator)lpi;    AxesWalker aw=wi.getFirstWalker();    int count=0;    while (null != aw) {      count++;      aw=aw.getNextWalker();    }    return count;  } else   return 1;}  }
class C{  private void ctrlSelect(D nodeData){  int insertionIndex=getInsertionIndex(nodeData);  insertAndSelectNode(nodeData,insertionIndex,!nodeData.equals(selectedNodes.get(insertionIndex)));}  }
class C{  public static Process runCommand(String command,Consumer<String> stdoutConsumer,Runnable errorHandler,String... args){  return runCommand(command,null,false,stdoutConsumer,null,errorHandler,args);}  }
class C{  public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public FastBooleanBuffer append(boolean[] array){  return append(array,0,array.length);}  }
class C{  public static boolean isBLANK_NODE_LABEL_Char(int codePoint){  return isPN_CHARS(codePoint) || codePoint == '.';}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.633 -0400",hash_original_method="FE76F52B20D2DBCABA13ACBB8614BB4C",hash_generated_method="627EDEF17B98C63D09AAAC452528F09B") public AgeFileFilter(File cutoffReference){  this(cutoffReference,true);}  }
class C{  protected boolean isValidPath(String path){  if (path == null) {    return false;  }  if (!PATH_PATTERN.matcher(path).matches()) {    return false;  }  int slash2Count=countToken("//",path);  if (isOff(ALLOW_2_SLASHES) && (slash2Count > 0)) {    return false;  }  int slashCount=countToken("/",path);  int dot2Count=countToken("..",path);  if (dot2Count > 0 && (slashCount - slash2Count - 1) <= dot2Count) {    return false;  }  return true;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public void write(Writer out,Document doc,int pos,int len) throws IOException, BadLocationException {  throw new IOException("RTF is an 8-bit format");}  }
class C{  private void popIlev(){  ilev=ilev >>> 4;}  }
class C{  private int checkBusy(Collection<CollisionJobContext> waitJobs,Collection<CollisionJobContext> activeJobs){  int activeSize=activeJobs.size();  int waitSize=waitJobs.size();  waitingNum=waitJobs.size();  runningNum=activeSize;  IgniteSpiContext ctx=getSpiContext();  int activated=0;  int rejected=0;  Collection<CollisionJobContext> waitPriJobs=sortJobs(waitJobs,waitSize);  int activeJobsThreshold0=activeJobsThreshold;  int waitJobsThreshold0=waitJobsThreshold;  for (  CollisionJobContext waitCtx : waitPriJobs) {    if (activeJobs.size() < activeJobsThreshold0) {      activated++;synchronized (waitCtx.getJobContext()) {        waitCtx.activate();      }    } else     if (stealReqs.get() > 0) {      if (waitCtx.getJob().getClass().isAnnotationPresent(JobStealingDisabled.class))       continue;      Integer stealingCnt=waitCtx.getJobContext().getAttribute(STEALING_ATTEMPT_COUNT_ATTR);      if (stealingCnt != null) {        if (stealingCnt >= maxStealingAttempts) {          if (log.isDebugEnabled())           log.debug("Waiting job exceeded stealing attempts and won't be rejected " + "(will try other jobs on waiting list): " + waitCtx);          continue;        }      } else       stealingCnt=0;      int jobsToReject=waitPriJobs.size() - activated - rejected- waitJobsThreshold0;      if (log.isDebugEnabled())       log.debug("Jobs to reject count [jobsToReject=" + jobsToReject + ", waitCtx="+ waitCtx+ ']');      if (jobsToReject <= 0)       break;      Integer pri=waitCtx.getJobContext().getAttribute(STEALING_PRIORITY_ATTR);      if (pri == null)       pri=DFLT_JOB_PRIORITY;      for (Iterator<Entry<UUID,MessageInfo>> iter=rcvMsgMap.entrySet().iterator(); iter.hasNext() && stealReqs.get() > 0; ) {        Entry<UUID,MessageInfo> entry=iter.next();        UUID nodeId=entry.getKey();        if (ctx.node(nodeId) == null) {          iter.remove();          continue;        }        MessageInfo info=entry.getValue();synchronized (info) {          int jobsAsked=info.jobsToSteal();          assert jobsAsked >= 0;          if (jobsAsked == 0)           continue;          if (info.expired()) {            stealReqs.addAndGet(-info.jobsToSteal());            info.reset(0);            continue;          }          boolean found=false;          for (          UUID id : waitCtx.getTaskSession().getTopology()) {            if (id.equals(nodeId)) {              found=true;              break;            }          }          if (!found) {            if (log.isDebugEnabled())             log.debug("Thief node does not belong to task topology [thief=" + nodeId + ", task="+ waitCtx.getTaskSession()+ ']');            continue;          }          if (stealReqs.get() <= 0)           break;synchronized (waitCtx.getJobContext()) {            boolean cancel=waitCtx.getJobContext().getAttribute(THIEF_NODE_ATTR) == null;            if (cancel) {              waitCtx.getJobContext().setAttribute(THIEF_NODE_ATTR,nodeId);              waitCtx.getJobContext().setAttribute(STEALING_ATTEMPT_COUNT_ATTR,stealingCnt + 1);              waitCtx.getJobContext().setAttribute(STEALING_PRIORITY_ATTR,pri + 1);              if (log.isDebugEnabled())               log.debug("Will try to reject job due to steal request [ctx=" + waitCtx + ", thief="+ nodeId+ ']');              int i=stealReqs.decrementAndGet();              if (i >= 0 && waitCtx.cancel()) {                rejected++;                info.reset(jobsAsked - 1);                if (log.isDebugEnabled())                 log.debug("Rejected job due to steal request [ctx=" + waitCtx + ", nodeId="+ nodeId+ ']');              } else {                if (log.isDebugEnabled())                 log.debug("Failed to reject job [i=" + i + ']');                waitCtx.getJobContext().setAttribute(THIEF_NODE_ATTR,null);                waitCtx.getJobContext().setAttribute(STEALING_ATTEMPT_COUNT_ATTR,stealingCnt);                waitCtx.getJobContext().setAttribute(STEALING_PRIORITY_ATTR,pri);                stealReqs.incrementAndGet();              }            }          }          break;        }      }    } else     break;  }  return rejected;}  }
class C{  public synchronized String resolve(String host){  String addr=resolved.get(host);  if (addr != null) {    return addr;  }  if (EvoIPAddressUtil.textToNumericFormatV4(host) != null) {    return host;  }  if (counter.get() > 255) {    return null;  }  addr=MASK + counter.getAndIncrement();  resolved.put(host,addr);  return addr;}  }
class C{  private boolean mergeDataTable(int AD_Table_ID,String TableName,int AD_ReplicationTable_ID) throws Exception {  RemoteMergeDataVO data=new RemoteMergeDataVO();  data.Test=m_test;  data.TableName=TableName;  StringBuffer sql=new StringBuffer("SELECT * FROM ").append(TableName).append(" WHERE AD_Client_ID=").append(m_replication.getRemote_Client_ID());  if (m_replication.getRemote_Org_ID() != 0)   sql.append(" AND AD_Org_ID IN (0,").append(m_replication.getRemote_Org_ID()).append(")");  if (m_replication.getDateLastRun() != null)   sql.append(" AND Updated >= ").append(DB.TO_DATE(m_replication.getDateLastRun(),false));  sql.append(" ORDER BY ");  data.KeyColumns=getKeyColumns(AD_Table_ID);  if (data.KeyColumns == null || data.KeyColumns.length == 0) {    log.log(Level.SEVERE,"mergeDataTable - No KeyColumns for " + TableName);    m_replicated=false;    return false;  }  for (int i=0; i < data.KeyColumns.length; i++) {    if (i > 0)     sql.append(",");    sql.append(data.KeyColumns[i]);  }  data.Sql=sql.toString();  data.CentralData=getRowSet(data.Sql,null);  if (data.CentralData == null) {    log.fine("mergeDataTable - CentralData is Null - " + TableName);    m_replicated=false;    return false;  }  ProcessInfo pi=new ProcessInfo("MergeData",0);  pi.setClassName(REMOTE);  pi.setSerializableObject(data);  pi=m_serverRemote.process(new Properties(),pi);  ProcessInfoLog[] logs=pi.getLogs();  String msg="< ";  if (logs != null && logs.length > 0)   msg+=logs[0].getP_Msg();  log.info("mergeDataTable - " + pi);  MReplicationLog rLog=new MReplicationLog(getCtx(),m_replicationRun.getAD_Replication_Run_ID(),AD_ReplicationTable_ID,msg,get_TrxName());  if (pi.isError()) {    log.severe("mergeDataTable Error - " + pi);    m_replicated=false;    rLog.setIsReplicated(false);  } else {    RowSet sourceRS=(RowSet)pi.getSerializableObject();    RowSet targetRS=getRowSet(data.Sql,null);    Object result=doIt(START,"sync",new Object[]{data.TableName,data.KeyColumns,sourceRS,targetRS,m_test,Boolean.TRUE});    boolean replicated=isReplicated(result);    if (replicated)     log.fine("mergeDataTable -> " + TableName + " - "+ result); else {      m_replicated=false;      log.severe("mergeDataTable -> " + TableName + " - "+ result);    }    rLog.setIsReplicated(replicated);    if (result != null)     rLog.setP_Msg("< " + result.toString());    sourceRS.close();    sourceRS=null;    targetRS.close();    targetRS=null;  }  rLog.saveEx();  return !pi.isError();}  }
class C{  public void registerDenseFeatures(ArrayList<FeatureFunction> featureFunctions){  for (  FeatureFunction feature : featureFunctions) {    ArrayList<String> names=feature.reportDenseFeatures(denseFeatures.size());    for (    String name : names) {      DENSE_FEATURE_NAMES.add(name);      denseFeatures.add(getSparse(name));      sparseFeatures.remove(name);    }  }}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  public NodeIterator nodeset() throws javax.xml.transform.TransformerException {  return (m_origObj instanceof NodeIterator) ? (NodeIterator)m_origObj : super.nodeset();}  }
class C{  public void log(String format,Object... params){  int id=logCntr.getAndIncrement();  try (Formatter formatter=new Formatter()){    records.get().put(id,formatter.format(format,params).toString());  } }  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean hasTableColumn(DBObject table,String columnName){  boolean result=false;  HashMap<Integer,DBObjectDefinition> columns=table.getContents();  for (Iterator<Integer> it=columns.keySet().iterator(); it.hasNext(); ) {    int key=it.next();    DBObject_Table_Column column=(DBObject_Table_Column)columns.get(key);    String currentColumn=column.getName();    if (currentColumn.equalsIgnoreCase(columnName)) {      result=true;      break;    }  }  return result;}  }
class C{  public int[] nextElement(){  int[] result=new int[2];  result[0]=chars[p++];  result[1]=chars[p++];  return result;}  }
class C{  public boolean hasBlockedOnUpdates(){  return hasRepeatingExtension(BlockedOnUpdate.class);}  }
class C{  public static void writeLocal(@Nonnull IndentingWriter writer,@Nullable String name,@Nullable String type,@Nullable String signature) throws IOException {  if (name != null) {    ReferenceFormatter.writeStringReference(writer,name);  } else {    writer.write("null");  }  writer.write(':');  if (type != null) {    writer.write(type);  } else {    writer.write("V");  }  if (signature != null) {    writer.write(", ");    ReferenceFormatter.writeStringReference(writer,signature);  }}  }
class C{  public TextFormat(){  this(null);}  }
class C{  public static TransactionSignature dummy(){  BigInteger val=ECKey.HALF_CURVE_ORDER;  return new TransactionSignature(val,val);}  }
class C{  public String debugPassword(){  return debugPassword;}  }
class C{  public static void assertJQ(String request,String... tests) throws Exception {  assertJQ(request,JSONTestUtil.DEFAULT_DELTA,tests);}  }
class C{  public static String extractClassname(String fullname){  return fullname.replaceFirst("^.*[.]","");}  }
class C{  public void fillCollectionProperty(Object entity,Set<String> keySet,StructuralProperty property,Field field,String node,Map<String,Object> map) throws ODataException {  for (  String target : keySet) {    if (node.equalsIgnoreCase(target)) {      Iterable subValues=(Iterable)map.get(target);      List<Object> valueList=new ArrayList<>();      for (      Object subValue : subValues) {        Object value=getFieldValueByType(property.getElementTypeName(),subValue,map,true);        if (value != null) {          valueList.add(value);        }      }      setFieldValue(field,entity,valueList);      break;    }  }}  }
class C{  @Override public boolean supportsOpenCursorsAcrossCommit(){  debugCodeCall("supportsOpenCursorsAcrossCommit");  return false;}  }
class C{  int keepaliveThreadRead(ReadStream is,long timeoutConn) throws IOException {  if (isClosed()) {    return -1;  }  int available=is.availableBuffer();  if (available > 0) {    return available;  }  long timeout=Math.min(getKeepaliveTimeout(),getSocketTimeout());  if (timeoutConn > 0) {    timeout=Math.min(timeout,timeoutConn);  }  int keepaliveThreadCount=_keepaliveThreadCount.incrementAndGet();  try {    int result;    if (isKeepaliveAsyncEnabled() && _pollManager != null) {      timeout=Math.min(timeout,getBlockingTimeoutForPoll());      if (keepaliveThreadCount > 32) {        if (isAsyncThrottle()) {          return 0;        } else {          timeout=Math.min(timeout,100);        }      }    }    if (timeout <= 0) {      return 0;    }    _keepaliveThreadMeter.start();    try {      result=is.fillWithTimeout(timeout);    }  finally {      _keepaliveThreadMeter.end();    }    if (isClosed()) {      return -1;    }    return result;  } catch (  IOException e) {    if (isClosed()) {      log.log(Level.FINEST,e.toString(),e);      return -1;    }    throw e;  } finally {    _keepaliveThreadCount.decrementAndGet();  }}  }
class C{  public void execute(String... commandWithParameters) throws IOException {  myTest.runHg(new File(myDirFixture.getTempDirPath()),commandWithParameters);}  }
class C{  public Hessian2Output createHessian2Output(){  Hessian2Output out=_freeHessian2Output.allocate();  if (out == null) {    out=new Hessian2Output();    out.setSerializerFactory(getSerializerFactory());  }  return out;}  }
class C{  private String processHost(String host){  if (host != null) {    if (ValidationUtil.isFunction(host)) {      host=FunctionHandler.executeFunction(host,variables);    } else     if (ValidationUtil.isVariable(host)) {      host=variables.getVariable(host);    }    host=variables.evaluate(host);  }  return host;}  }
class C{  @SuppressWarnings("unchecked") public List pos2VOs(Class<?> type,List pos) throws Exception {  List voList=new ArrayList();  for (  Object po : pos) {    Object vo=po2VO(type,po);    voList.add(vo);  }  return voList;}  }
class C{  public static long handleKeyDown(long state,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    return press(state,META_SHIFT_ON,META_SHIFT_MASK,META_CAP_LOCKED,META_CAP_PRESSED,META_CAP_RELEASED,META_CAP_USED);  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    return press(state,META_ALT_ON,META_ALT_MASK,META_ALT_LOCKED,META_ALT_PRESSED,META_ALT_RELEASED,META_ALT_USED);  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    return press(state,META_SYM_ON,META_SYM_MASK,META_SYM_LOCKED,META_SYM_PRESSED,META_SYM_RELEASED,META_SYM_USED);  }  return state;}  }
class C{  public static Class<?> determineCommonAncestor(Class<?> clazz1,Class<?> clazz2){  if (clazz1 == null) {    return clazz2;  }  if (clazz2 == null) {    return clazz1;  }  if (clazz1.isAssignableFrom(clazz2)) {    return clazz1;  }  if (clazz2.isAssignableFrom(clazz1)) {    return clazz2;  }  Class<?> ancestor=clazz1;  do {    ancestor=ancestor.getSuperclass();    if (ancestor == null || Object.class.equals(ancestor)) {      return null;    }  } while (!ancestor.isAssignableFrom(clazz2));  return ancestor;}  }
class C{  void yield(ThreadQueue queue){  assert current != null;  Trace.trace(Item.SCHED_DETAIL,"%s: Yielded onto queue %s with %d members",Thread.currentThread().getName(),queue.getName(),queue.size());  assert queue.size() <= mutators.size() + collectors.size() : "yielded to queue size " + queue.size() + " where there are "+ mutators.size()+ " m and "+ collectors.size()+ "c";  current.yieldThread(queue);}  }
class C{  public final static boolean inside_polygon(float[] xpts,float[] ypts,double ptx,double pty){  int j, inside_flag=0;  int numverts=xpts.length;  if (numverts <= 2)   return false;  Point2D vtx0=new Point2D.Float(), vtx1=new Point2D.Float();  double dv0;  int crossings=0;  boolean xflag0=false, yflag0=false, yflag1=false;  vtx0.setLocation(xpts[numverts - 1],ypts[numverts - 1]);  yflag0=((dv0=vtx0.getY() - pty) >= 0);  for (j=0; j < numverts; j++) {    if ((j & 0x1) != 0) {      vtx0.setLocation(xpts[j],ypts[j]);      yflag0=((dv0=vtx0.getY() - pty) >= 0);    } else {      vtx1.setLocation(xpts[j],ypts[j]);      yflag1=(vtx1.getY() >= pty);    }    if (yflag0 != yflag1) {      if ((xflag0=(vtx0.getX() >= ptx)) == (vtx1.getX() >= ptx)) {        if (xflag0)         crossings++;      } else {        crossings+=((vtx0.getX() - dv0 * (vtx1.getX() - vtx0.getX()) / (vtx1.getY() - vtx0.getY())) >= ptx) ? 1 : 0;      }    }    inside_flag=crossings & 0x01;  }  return (inside_flag != 0);}  }
class C{  public static float sigmoid(float x){  float esubx=(float)Math.pow(Math.E,-x);  return 1 / (1 + esubx);}  }
class C{  Collection<Integer> markRead(int id,boolean isCategory){  Set<Integer> ret=null;  if (!isDBAvailable())   return null;  StringBuilder where=new StringBuilder();  StringBuilder feedIds=new StringBuilder();switch (id) {case Data.VCAT_ALL:    where.append(" 1 ");  break;case Data.VCAT_FRESH:long time=System.currentTimeMillis() - Controller.getInstance().getFreshArticleMaxAge();where.append(" updateDate > ").append(time);break;case Data.VCAT_PUB:where.append(" isPublished > 0 ");break;case Data.VCAT_STAR:where.append(" isStarred > 0 ");break;default :if (isCategory) {feedIds.append("SELECT _id FROM ").append(TABLE_FEEDS).append(" WHERE categoryId=").append(id);} else {feedIds.append(id);}where.append(" feedId IN (").append(feedIds).append(") ");break;}where.append(" and isUnread>0 ");Cursor c=null;SQLiteDatabase db=getOpenHelper().getReadableDatabase();read.lock();try {c=db.query(TABLE_ARTICLES,new String[]{"_id"},where.toString(),null,null,null,null);int count=c.getCount();if (count > 0) {ret=new HashSet<>(count);while (c.moveToNext()) {ret.add(c.getInt(0));}}}  finally {close(c);read.unlock();}if (ret != null && !ret.isEmpty()) {markArticles(ret,"isUnread",0);}return ret;}  }
class C{  void addNode(T node){  Node<T> digraphNode=new Node<T>(node);  nodes.add(digraphNode);  nodesMap.put(node,digraphNode);}  }
class C{  public void draw3DRect(int x,int y,int width,int height,boolean raised){  g.draw3DRect(x,y,width,height,raised);}  }
class C{  public void addDirtyRegion(DirtyRegion dr){  final DirtyRegion lastDR=getLastDirtyRegion();  boolean wasMerged=false;  if (lastDR != null) {    if (nullSafeStringsEquals(lastDR.getType(),dr.getType())) {      if (DirtyRegion.INSERT.equals(lastDR.getType())) {        if (lastDR.getOffset() + lastDR.getLength() == dr.getOffset()) {          lastDR.mergeWith(dr);          wasMerged=true;        }      } else       if (DirtyRegion.REMOVE.equals(lastDR.getType())) {        if (dr.getOffset() + dr.getLength() == lastDR.getOffset()) {          lastDR.mergeWith(dr);          wasMerged=true;        }      }    }  }  if (!wasMerged) {    fDirtyRegions.add(dr);  }}  }
class C{  public final void invalidate(){  adapter.notifyDataSetChanged();}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){  if (o == null) {    for (int i=index; i >= 0; i--) {      if (elements[i] == null) {        return i;      }    }  } else {    for (int i=index; i >= 0; i--) {      if (o.equals(elements[i])) {        return i;      }    }  }  return -1;}  }
class C{  public DelphiProject(File xml){  try {    parseFile(xml);  } catch (  IOException e) {    DelphiUtils.LOG.error("Could not find .dproj file: " + xml.getAbsolutePath());  }catch (  IllegalArgumentException e) {    DelphiUtils.LOG.error("No .dproj file to parse. (null)");  }catch (  XMLStreamException e) {    DelphiUtils.LOG.error(".dproj xml error: " + e.getMessage());  }catch (  SAXException e) {    DelphiUtils.LOG.error(".dproj xml error: " + e.getMessage());  }}  }
class C{  public HDR remove(int index){  return this.hlist.remove(index);}  }
class C{  @Override public final String toString(){  return Double.toString(this.degrees) + '\u00B0';}  }
class C{  public void sameLocals(int pos,int offsetDelta,int stackTag,int stackData) throws BadBytecode {}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.BOOTSTRAP_MODULE__MODULE_SPECIFIER_WITH_WILDCARD:    setModuleSpecifierWithWildcard(MODULE_SPECIFIER_WITH_WILDCARD_EDEFAULT);  return;case N4mfPackage.BOOTSTRAP_MODULE__SOURCE_PATH:setSourcePath(SOURCE_PATH_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public int hash(String symbol){  int code=0;  int length=symbol.length();  for (int i=0; i < length; i++) {    code=code * 37 + symbol.charAt(i);  }  return code & 0x7FFFFFF;}  }
class C{  protected boolean frontier(Fact fact){  int t=fact.getIteration();  Resource dNode=null;  if (fact.isInference()) {    dNode=fact.getDerivation().getNode();  }  return (minIteration == 0) || (t == currentIteration) || (t >= minIteration && !this.node.equals(dNode));}  }
class C{  public static void uiImpl(){  UIManager.put("MenuBar.border",BorderFactory.createEmptyBorder());  UIManager.put("CheckBoxMenuItem.margin",new InsetsUIResource(0,0,0,0));  UIManager.put("RadioButtonMenuItem.margin",new InsetsUIResource(0,0,0,0));  UIManager.put("Menu.margin",new InsetsUIResource(0,0,0,0));  UIManager.put("MenuItem.margin",new InsetsUIResource(0,0,0,0));  UIManager.put("Menu.border",new BorderUIResource(BorderFactory.createEmptyBorder(4,3,5,3)));  UIManager.put("MenuItem.border",new BorderUIResource(BorderFactory.createEmptyBorder(4,3,5,3)));  UIManager.put("CheckBoxMenuItem.border",new BorderUIResource(BorderFactory.createEmptyBorder(4,3,5,3)));  UIManager.put("RadioButtonMenuItem.border",new BorderUIResource(BorderFactory.createEmptyBorder(4,3,5,3)));  UIManager.put("MenuBar.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("RadioButtonMenuItem.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("Menu.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("PopupMenu.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("CheckBoxMenuItem.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("MenuItem.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("MenuBar.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("Menu.background",new ColorUIResource(new Color(255,255,255,0)));  UIManager.put("PopupMenu.background",new ColorUIResource(new Color(255,255,255,0)));  UIManager.put("RadioButtonMenuItem.disabledForeground",new ColorUIResource(BeautyEyeLNFHelper.commonDisabledForegroundColor));  UIManager.put("MenuItem.disabledForeground",new ColorUIResource(BeautyEyeLNFHelper.commonDisabledForegroundColor));  UIManager.put("Menu.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionForegroundColor));  UIManager.put("MenuItem.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionForegroundColor));  UIManager.put("CheckBoxMenuItem.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionForegroundColor));  UIManager.put("RadioButtonMenuItem.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionForegroundColor));  UIManager.put("Menu.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("MenuItem.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("CheckBoxMenuItem.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("RadioButtonMenuItem.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("Menu.menuPopupOffsetX",-3);  UIManager.put("Menu.menuPopupOffsetY",2);  UIManager.put("Menu.submenuPopupOffsetX",-2);  UIManager.put("Menu.submenuPopupOffsetY",-5);  UIManager.put("CheckBoxMenuItem.checkIcon",new org.jb2011.lnf.beautyeye.ch9_menu.BECheckBoxMenuItemUI.CheckBoxMenuItemIcon());  UIManager.put("RadioButtonMenuItem.checkIcon",new org.jb2011.lnf.beautyeye.ch9_menu.BERadioButtonMenuItemUI.RadioButtonMenuItemIcon());  UIManager.put("MenuBar.height",30);  UIManager.put("MenuItem.disabledAreNavigable",false);  UIManager.put("MenuBarUI",org.jb2011.lnf.beautyeye.ch9_menu.BEMenuBarUI.class.getName());  UIManager.put("MenuUI",org.jb2011.lnf.beautyeye.ch9_menu.BEMenuUI.class.getName());  UIManager.put("MenuItemUI",org.jb2011.lnf.beautyeye.ch9_menu.BEMenuItemUI.class.getName());  UIManager.put("RadioButtonMenuItemUI",org.jb2011.lnf.beautyeye.ch9_menu.BERadioButtonMenuItemUI.class.getName());  UIManager.put("CheckBoxMenuItemUI",org.jb2011.lnf.beautyeye.ch9_menu.BECheckBoxMenuItemUI.class.getName());  UIManager.put("PopupMenuSeparatorUI",org.jb2011.lnf.beautyeye.ch9_menu.BEPopupMenuSeparatorUI.class.getName());  UIManager.put("PopupMenuUI",org.jb2011.lnf.beautyeye.ch9_menu.BEPopupMenuUI.class.getName());}  }
class C{  public void synchronizeStatus(){  if (!Utils.isConnected(cm))   return;  long time=System.currentTimeMillis();  String[] marks=new String[]{DBHelper.MARK_READ,DBHelper.MARK_STAR,DBHelper.MARK_PUBLISH};  for (  String mark : marks) {    Set<Integer> idsMark=DBHelper.getInstance().getMarked(mark,1);    Set<Integer> idsUnmark=DBHelper.getInstance().getMarked(mark,0);    if (DBHelper.MARK_READ.equals(mark)) {      if (Controller.getInstance().getConnector().setArticleRead(idsMark,1))       DBHelper.getInstance().setMarked(idsMark,mark);      if (Controller.getInstance().getConnector().setArticleRead(idsUnmark,0))       DBHelper.getInstance().setMarked(idsUnmark,mark);    }    if (DBHelper.MARK_STAR.equals(mark)) {      if (Controller.getInstance().getConnector().setArticleStarred(idsMark,1))       DBHelper.getInstance().setMarked(idsMark,mark);      if (Controller.getInstance().getConnector().setArticleStarred(idsUnmark,0))       DBHelper.getInstance().setMarked(idsUnmark,mark);    }    if (DBHelper.MARK_PUBLISH.equals(mark)) {      if (Controller.getInstance().getConnector().setArticlePublished(idsMark,1))       DBHelper.getInstance().setMarked(idsMark,mark);      if (Controller.getInstance().getConnector().setArticlePublished(idsUnmark,0))       DBHelper.getInstance().setMarked(idsUnmark,mark);    }  }  Map<Integer,String> notesMarked=DBHelper.getInstance().getMarkedNotes();  if (notesMarked.size() > 0) {    if (Controller.getInstance().getConnector().setArticleNote(notesMarked))     DBHelper.getInstance().setMarkedNotes(notesMarked);  }  Log.d(TAG,String.format("Syncing Status took %sms",(System.currentTimeMillis() - time)));}  }
class C{  public void writeStartVCard() throws IOException {  if (generator == null) {    init();  }  if (open) {    writeEndVCard();  }  generator.writeStartArray();  generator.writeString("vcard");  generator.writeStartArray();  open=true;}  }
class C{  public void makeActionSentence(Action a,int t){  if (a instanceof Climb) {    tell(newSymbol(Climb.CLIMB_ACTION_NAME,t));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(Climb.CLIMB_ACTION_NAME,t)));  }  if (a instanceof Forward) {    tell(newSymbol(Forward.FORWARD_ACTION_NAME,t));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(Forward.FORWARD_ACTION_NAME,t)));  }  if (a instanceof Grab) {    tell(newSymbol(Grab.GRAB_ACTION_NAME,t));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(Grab.GRAB_ACTION_NAME,t)));  }  if (a instanceof Shoot) {    tell(newSymbol(Shoot.SHOOT_ACTION_NAME,t));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(Shoot.SHOOT_ACTION_NAME,t)));  }  if (a instanceof TurnLeft) {    tell(newSymbol(TurnLeft.TURN_LEFT_ACTION_NAME,t));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(TurnLeft.TURN_LEFT_ACTION_NAME,t)));  }  if (a instanceof TurnRight) {    tell(newSymbol(TurnRight.TURN_RIGHT_ACTION_NAME,t));  } else {    tell(new ComplexSentence(Connective.NOT,newSymbol(TurnRight.TURN_RIGHT_ACTION_NAME,t)));  }}  }
class C{  public boolean isActive(){synchronized (statemachine) {    return statemachine.isActive();  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (hasLoopInTree()) {    log.saveError("Error",Msg.getMsg(getCtx(),"ProductCategoryLoopDetected"));    return false;  }  return true;}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public WebView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  protected void constructRateMap(){  int u, v, i1, j1, k1, i2, j2, k2, ts, tv, non;  byte rateClass;  int[] codon;  int cs1, cs2, aa1, aa2;  int i=0;  rateMap=new byte[rateCount];  for (u=0; u < stateCount; u++) {    codon=codonDataType.getTripletStates(u);    i1=codon[0];    j1=codon[1];    k1=codon[2];    cs1=codonDataType.getState(i1,j1,k1);    aa1=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs1));    for (v=u + 1; v < stateCount; v++) {      ts=0;      tv=0;      non=0;      rateClass=-1;      codon=codonDataType.getTripletStates(v);      i2=codon[0];      j2=codon[1];      k2=codon[2];      cs2=codonDataType.getState(i2,j2,k2);      aa2=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs2));      if (i1 != i2) {        if ((i1 == 0 && i2 == 2) || (i1 == 2 && i2 == 0) || (i1 == 1 && i2 == 3)|| (i1 == 3 && i2 == 1)) {          ts++;        } else {          tv++;        }      }      if (j1 != j2) {        if ((j1 == 0 && j2 == 2) || (j1 == 2 && j2 == 0) || (j1 == 1 && j2 == 3)|| (j1 == 3 && j2 == 1)) {          ts++;        } else {          tv++;        }      }      if (k1 != k2) {        if ((k1 == 0 && k2 == 2) || (k1 == 2 && k2 == 0) || (k1 == 1 && k2 == 3)|| (k1 == 3 && k2 == 1)) {          ts++;        } else {          tv++;        }      }      if (aa1 != aa2) {        non=1;      }switch (ts) {case 0:switch (tv) {case 1:          rateClass=3;        break;case 2:      rateClass=9;    break;case 3:  rateClass=17;break;default :break;}break;case 1:switch (tv) {case 0:rateClass=1;break;case 1:rateClass=7;break;case 2:rateClass=15;break;default :break;}break;case 2:switch (tv) {case 0:rateClass=5;break;case 1:rateClass=13;break;default :break;}break;case 3:rateClass=11;break;default :break;}if (non == 1) {rateClass+=1;}rateMap[i]=rateClass;i++;}}}  }
class C{  public void storageType(int type){  closedStorage=type;}  }
class C{  public static ProtectionSet findOrCreateProtectionSet(IngestionRequestContext requestContext,UnManagedVolume unManagedVolume,UnManagedProtectionSet umpset,DbClient dbClient){  ProtectionSet pset=null;  StringSetMap unManagedCGInformation=umpset.getCGInformation();  String rpProtectionId=PropertySetterUtil.extractValueFromStringSet(SupportedCGInformation.PROTECTION_ID.toString(),unManagedCGInformation);  RecoverPointVolumeIngestionContext rpContext=null;  if (requestContext instanceof RecoverPointVolumeIngestionContext) {    rpContext=(RecoverPointVolumeIngestionContext)requestContext;  } else   if (requestContext.getVolumeContext(unManagedVolume.getNativeGuid()) instanceof RecoverPointVolumeIngestionContext) {    rpContext=(RecoverPointVolumeIngestionContext)requestContext.getVolumeContext(unManagedVolume.getNativeGuid());  }  if (rpContext != null) {    pset=rpContext.findExistingProtectionSet(umpset.getCgName(),rpProtectionId,umpset.getProtectionSystemUri(),umpset.getNativeGuid());  }  if (pset == null) {    pset=new ProtectionSet();    pset.setId(URIUtil.createId(ProtectionSet.class));    pset.setLabel(umpset.getCgName());    pset.setProtectionId(rpProtectionId);    pset.setProtectionStatus(ProtectionStatus.ENABLED.toString());    pset.setProtectionSystem(umpset.getProtectionSystemUri());    pset.setNativeGuid(umpset.getNativeGuid());  }  if (umpset.getManagedVolumeIds() != null) {    for (    String volumeID : umpset.getManagedVolumeIds()) {      if (pset.getVolumes() == null) {        pset.setVolumes(new StringSet());      }      pset.getVolumes().add(volumeID);      Volume volume=null;      BlockObject bo=requestContext.getRootIngestionRequestContext().findCreatedBlockObject(URI.create(volumeID));      if (bo != null && bo instanceof Volume) {        volume=(Volume)bo;      }      if (volume == null) {        _logger.error("Unable to retrieve volume : " + volumeID + " from database or created volumes.  Ignoring in protection set ingestion.");        continue;      }      if (pset.getProject() == null) {        pset.setProject(volume.getProject().getURI());      }    }  }  _logger.info("Created new protection set: " + pset.getId().toString());  return pset;}  }
class C{  public static void load(File configFile,Object holder){  if (!configFile.exists()) {    try {      configFile.getParentFile().mkdirs();      configFile.createNewFile();    } catch (    IOException e) {      e.printStackTrace();    }  }  com.typesafe.config.Config parsed=ConfigFactory.parseFile(configFile);  com.typesafe.config.Config config=handle(parsed,holder,"");  if (!parsed.equals(config)) {    String hocon=config.root().render(renderOpts);    try (FileWriter writer=new FileWriter(configFile)){      writer.write(hocon);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private Stream<T> toStream(){  return Stream.of(element);}  }
class C{  private void formatArrayIndices(Deque<ExpressionTree> indices){  if (indices.isEmpty()) {    return;  }  builder.open(ZERO);  do {    token("[");    builder.breakToFill();    scan(indices.removeLast(),null);    token("]");  } while (!indices.isEmpty());  builder.close();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  int[] kc=Catbert.getKeystrokeFromString(getString(stack));  stack.getUIMgrSafe().getRouter().setKBPrefs(kc[0],kc[1],UserEvent.getEvtCodeForName(s),true);  return null;}  }
class C{  public CounterMap(boolean weak){  if (weak) {    map=new WeakHashMap<T,Integer>();  } else {    map=new HashMap<T,Integer>();  }}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  public static Input.Tok startTok(Token token){  for (  Input.Tok tok : token.getToksBefore()) {    if (tok.getIndex() >= 0) {      return tok;    }  }  return token.getTok();}  }
class C{  public final void transpose(){  double temp;  temp=this.m10;  this.m10=this.m01;  this.m01=temp;  temp=this.m20;  this.m20=this.m02;  this.m02=temp;  temp=this.m21;  this.m21=this.m12;  this.m12=temp;}  }
class C{  public static boolean isRR(int type){switch (type) {case OPT:case TKEY:case TSIG:case IXFR:case AXFR:case MAILB:case MAILA:case ANY:    return false;default :  return true;}}  }
class C{  public static Map<String,List<double[]>> readUCRData(String fileName) throws IOException, NumberFormatException {  Map<String,List<double[]>> res=new HashMap<String,List<double[]>>();  BufferedReader br=new BufferedReader(new FileReader(new File(fileName)));  String line="";  while ((line=br.readLine()) != null) {    if (line.trim().length() == 0) {      continue;    }    String[] split=line.trim().split("[\\,\\s]+");    String label=split[0];    Double num=parseValue(label);    String seriesType=label;    if (!(Double.isNaN(num))) {      seriesType=String.valueOf(num.intValue());    }    double[] series=new double[split.length - 1];    for (int i=1; i < split.length; i++) {      series[i - 1]=Double.valueOf(split[i].trim()).doubleValue();    }    if (!res.containsKey(seriesType)) {      res.put(seriesType,new ArrayList<double[]>());    }    res.get(seriesType).add(series);  }  br.close();  return res;}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public void parse(String xml) throws IllegalStateException {  try {    InputSource inSrc=new InputSource(new StringReader(xml));    sp.parse(inSrc,getHandler());  } catch (  SAXException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public <T extends Comparable<T>>IndexTable(List<T> list){  this(list,defaultComp);}  }
class C{  public List(){  head=tail=null;  size=0;}  }
class C{  protected void connectionDown(){  if (connectedStatus != null) {    connectedStatus.setText(STATUS_IDLE);    connectedStatus.setBackground(Color.red);  }}  }
class C{  public boolean hasBack(){  if (index > 0) {    return true;  } else {    return false;  }}  }
class C{  private void populateComputeStateAndNetworksForUpdates(AWSComputeServiceCreationContext context,Instance instance,ComputeState existingComputeState){  ComputeService.ComputeState computeState=mapInstanceToComputeState(instance,context.computeState.parentComputeLink,context.computeState.resourcePoolLink,existingComputeState.descriptionLink,context.computeState.tenantLinks);  String existingNICLink=null;  if (instance.getPrivateIpAddress() != null) {    existingNICLink=getExistingNetworkInterfaceLink(existingComputeState,false);    NetworkInterfaceState privateNICState=mapIPAddressToNetworkInterfaceState(instance,false,context.computeState.tenantLinks,existingNICLink);    Operation privateNICOperation=createOperationToUpdateOrCreateNetworkInterface(existingComputeState,privateNICState,context.computeState.tenantLinks,this,false);    context.enumerationOperations.add(privateNICOperation);    computeState.networkInterfaceLinks=new ArrayList<String>();    computeState.networkInterfaceLinks.add(UriUtils.buildUriPath(NetworkInterfaceService.FACTORY_LINK,privateNICState.documentSelfLink));  }  if (instance.getPublicIpAddress() != null) {    existingNICLink=getExistingNetworkInterfaceLink(existingComputeState,true);    NetworkInterfaceState publicNICState=mapIPAddressToNetworkInterfaceState(instance,true,context.computeState.tenantLinks,existingNICLink);    Operation postPublicNetworkInterfaceOperation=createOperationToUpdateOrCreateNetworkInterface(existingComputeState,publicNICState,context.computeState.tenantLinks,this,true);    context.enumerationOperations.add(postPublicNetworkInterfaceOperation);    computeState.networkInterfaceLinks.add(UriUtils.buildUriPath(NetworkInterfaceService.FACTORY_LINK,publicNICState.documentSelfLink));  } else {    existingNICLink=getExistingNetworkInterfaceLink(existingComputeState,true);    if (existingNICLink != null) {      removeNetworkLinkAndDocument(this,existingComputeState,existingNICLink,context.enumerationOperations);    }  }  Operation patchComputeState=createPatchOperation(this,computeState,existingComputeState.documentSelfLink);  context.enumerationOperations.add(patchComputeState);}  }
class C{  public TestSuite(final String name){  this.name=name;}  }
class C{  public ShapeData(DrawContext dc,AntennaModel shape){  super(dc,shape.minExpiryTime,shape.maxExpiryTime);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultDrawingSupplier)) {    return false;  }  DefaultDrawingSupplier that=(DefaultDrawingSupplier)obj;  if (!Arrays.equals(this.paintSequence,that.paintSequence)) {    return false;  }  if (this.paintIndex != that.paintIndex) {    return false;  }  if (!Arrays.equals(this.outlinePaintSequence,that.outlinePaintSequence)) {    return false;  }  if (this.outlinePaintIndex != that.outlinePaintIndex) {    return false;  }  if (!Arrays.equals(this.strokeSequence,that.strokeSequence)) {    return false;  }  if (this.strokeIndex != that.strokeIndex) {    return false;  }  if (!Arrays.equals(this.outlineStrokeSequence,that.outlineStrokeSequence)) {    return false;  }  if (this.outlineStrokeIndex != that.outlineStrokeIndex) {    return false;  }  if (!equalShapes(this.shapeSequence,that.shapeSequence)) {    return false;  }  if (this.shapeIndex != that.shapeIndex) {    return false;  }  return true;}  }
class C{  public static float parseFloat(java.lang.String s) throws java.lang.NumberFormatException {  return 0.0f;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public StructImpl(int type,int initialCapacity){  if (type == TYPE_WEAKED)   map=new SyncMap<Collection.Key,Object>(new WeakHashMapPro<Collection.Key,Object>(initialCapacity)); else   if (type == TYPE_SOFT)   map=new SyncMap<Collection.Key,Object>(new MapProWrapper<Collection.Key,Object>(new ReferenceMap<Collection.Key,Object>(HARD,SOFT,initialCapacity,0.75f),new SerializableObject())); else   if (type == TYPE_LINKED)   map=new SyncMap<Collection.Key,Object>(new LinkedHashMapPro<Collection.Key,Object>(initialCapacity)); else   if (type == TYPE_LINKED_NOT_SYNC)   map=new LinkedHashMapPro<Collection.Key,Object>(initialCapacity); else   map=MapFactory.getConcurrentMap(initialCapacity);}  }
class C{  public ComplexFIRFilter_CB_CB(float[] coefficients,float gain){  super(coefficients,gain);}  }
class C{  public void add(String methodName,List<Expression> parameters){  chain.add(new DotExpressionItem(methodName,parameters,false));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void testEmailAddressWithContextParameter(){  assertNotNull(Validators.emailAddress(getContext()));}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  public EventBinder<E> after(String name){  after.add(name);  return this;}  }
class C{  protected int[] splitSentence(String sentence){  String[] w=sentence.split("\\s+");  int[] words=new int[w.length];  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);  return words;}  }
class C{  public static Gender none(){  return new Gender(NONE);}  }
class C{  protected ObjectMatrix1D viewSelectionLike(int[] offsets){  return new SelectedDenseObjectMatrix1D(this.elements,offsets);}  }
class C{  private int hexToValue(final char c){  if ((c >= 'A') && (c <= 'F')) {    return (c - 'A') + 10;  } else   if ((c >= 'a') && (c <= 'f')) {    return (c - 'a') + 10;  } else {    return c - '0';  }}  }
class C{  public static int beS1(byte[] data,int bci){  return data[bci];}  }
class C{  public MyLogarithmicAxis(String label){  super(label);}  }
class C{  public void close(Handler<Void> closeHandler){  delegate.close(closeHandler);}  }
class C{  void reset(Component owner,Component contents,int ownerX,int ownerY){  super.reset(owner,contents,ownerX,ownerY);  JComponent component=(JComponent)getComponent();  component.setOpaque(contents.isOpaque());  component.setLocation(ownerX,ownerY);  component.add(contents,BorderLayout.CENTER);  contents.invalidate();  pack();}  }
class C{  private void initializeOtherInformation(LinuxAdeExtProperties adeExtProperties,String parseReportFilename) throws AdeException {  m_parserStartTime=System.nanoTime();  m_lineParsers=new LinuxSyslogLineParser[]{new LinuxSyslog5424ParserBase(),new LinuxSyslog3164ParserWithMark(),new LinuxSyslog3164ParserWithCompAndPid(),new LinuxSyslog3164ParserFreeForm()};  m_adeExtProperties=adeExtProperties;  LinuxSyslog3164ParserBase.setAdeExtProperties(m_adeExtProperties);  setParsingQualityReporterIfRequested(parseReportFilename);  try {    if (m_adeExtProperties.isGmtOffsetDefined()) {      m_info=new ManagedSystemInfo(m_adeExtProperties.getGmtOffset(),"linux");    } else {      m_info=new ManagedSystemInfo(GMT_OFFSET_INVALID,"linux");    }  } catch (  IllegalArgumentException e) {    throw new AdeUsageException("Invalid SysInfo argument(s)",e);  }}  }
class C{  public static Writer leftShift(Socket self,Object value) throws IOException {  return IOGroovyMethods.leftShift(self.getOutputStream(),value);}  }
class C{  <T>T optional(Object obj,Class<T> clazz,String part) throws ParseException {  if (obj == null) {    return null;  }  return expect(obj,clazz,part);}  }
class C{  public boolean neq(final Period another){  return !this.equals(another);}  }
class C{  public synchronized void release(){  if (mRecorder != null) {    if (mRecorder.getRecordingState() == SpeechRecord.RECORDSTATE_RECORDING) {      stop();    }    mRecorder.release();    mRecorder=null;  }}  }
class C{  public void skipNextSuperCall(){  this.performSuperCall.set(false);}  }
class C{  private void loadPaymentRuleInfo(){  ValueNamePair pp=(ValueNamePair)fPaymentRule.getSelectedItem();  if (pp == null)   return;  String PaymentRule=pp.getValue();  log.info("PaymentRule=" + PaymentRule);  fNoPayments.setText(" ");  String msg=loadPaymentRuleInfo(m_C_PaySelection_ID,PaymentRule);  if (noPayments != null)   fNoPayments.setText(noPayments);  bProcess.setEnabled(PaymentRule.equals("T"));  if (documentNo != null)   fDocumentNo.setValue(documentNo);  if (msg != null && msg.length() > 0)   ADialog.error(m_WindowNo,panel,msg);}  }
class C{  public long reservedStore(){  return m_size * m_totalSlots;}  }
class C{  public static int toInt(byte[] bytes,int index){  return (((bytes[index + 3]) << 24) | ((bytes[index + 2] & 0xff) << 16) | ((bytes[index + 1] & 0xff) << 8)| ((bytes[index] & 0xff)));}  }
class C{  public final int matchData(String type,String scheme,Uri data){  final ArrayList<String> types=mDataTypes;  final ArrayList<String> schemes=mDataSchemes;  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;  final ArrayList<PatternMatcher> paths=mDataPaths;  int match=MATCH_CATEGORY_EMPTY;  if (types == null && schemes == null) {    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);  }  if (schemes != null) {    if (schemes.contains(scheme != null ? scheme : "")) {      match=MATCH_CATEGORY_SCHEME;    } else {      return NO_MATCH_DATA;    }    if (authorities != null) {      int authMatch=matchDataAuthority(data);      if (authMatch >= 0) {        if (paths == null) {          match=authMatch;        } else         if (hasDataPath(data.getPath())) {          match=MATCH_CATEGORY_PATH;        } else {          return NO_MATCH_DATA;        }      } else {        return NO_MATCH_DATA;      }    }  } else {    if (scheme != null && !"".equals(scheme) && !"content".equals(scheme) && !"file".equals(scheme)) {      return NO_MATCH_DATA;    }  }  if (types != null) {    if (findMimeType(type)) {      match=MATCH_CATEGORY_TYPE;    } else {      return NO_MATCH_TYPE;    }  } else {    if (type != null) {      return NO_MATCH_TYPE;    }  }  return match + MATCH_ADJUSTMENT_NORMAL;}  }
class C{  protected void checkFeature(String featureId) throws XMLConfigurationException {  if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {    final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();    if (suffixLength == Constants.DYNAMIC_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.DYNAMIC_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE.length() && featureId.endsWith(Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.VALIDATE_CONTENT_MODELS_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_CONTENT_MODELS_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.LOAD_DTD_GRAMMAR_FEATURE.length() && featureId.endsWith(Constants.LOAD_DTD_GRAMMAR_FEATURE)) {      return;    }    if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() && featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {      return;    }    if (suffixLength == Constants.VALIDATE_DATATYPES_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_DATATYPES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.SCHEMA_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.SCHEMA_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.SCHEMA_FULL_CHECKING.length() && featureId.endsWith(Constants.SCHEMA_FULL_CHECKING)) {      return;    }    if (suffixLength == Constants.SCHEMA_NORMALIZED_VALUE.length() && featureId.endsWith(Constants.SCHEMA_NORMALIZED_VALUE)) {      return;    }    if (suffixLength == Constants.SCHEMA_ELEMENT_DEFAULT.length() && featureId.endsWith(Constants.SCHEMA_ELEMENT_DEFAULT)) {      return;    }    if (suffixLength == Constants.PARSER_SETTINGS.length() && featureId.endsWith(Constants.PARSER_SETTINGS)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }  }  super.checkFeature(featureId);}  }
class C{  public void checkVersion(){  String url=getQueryUrl();  AjaxCallback<JSONObject> cb=new AjaxCallback<JSONObject>();  cb.url(url).type(JSONObject.class).handler(handler,"marketCb").fileCache(!force).expire(expire);  aq.progress(progress).ajax(cb);}  }
class C{  public void resetDocumentLocator(String publicid,String systemid){  thePublicid=publicid;  theSystemid=systemid;  theLastLine=theLastColumn=theCurrentLine=theCurrentColumn=0;}  }
class C{  @Override public void translate(PLPosition position){  if (position != null) {    this.setX(position.x);    this.setY(position.y);    this.setZ(position.z);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public synchronized static DockerMachineClient instance(){  if (instance == null) {    instance=new DockerMachineClient();  }  return instance;}  }
class C{  public HashMap<Unit,IntegerMap<RepairRule>> waitForRepair(final boolean bid,final Collection<PlayerID> allowedPlayersToRepair){  return m_repairPanel.waitForRepair(bid,allowedPlayersToRepair);}  }
class C{  private Subject createSubject(PrincipalAttribute identityAttribute,Date tokenEndTime,Confirmation confirmation,TokenDelegate lastDelegate){  assert identityAttribute != null;  assert tokenEndTime != null;  assert confirmation != null;  String[] tokenIdentityValue=identityAttribute.getValues();  assert tokenIdentityValue.length == 1;  String tokenSubject=tokenIdentityValue[0];  String tokenSubjectFormat=identityAttribute.getName();  Subject subject=new SubjectBuilder().buildObject();  subject.setNameID(createNameId(tokenSubject,tokenSubjectFormat));  subject.getSubjectConfirmations().add(createSubjectConfirmation(tokenEndTime,confirmation,lastDelegate));  log.debug("Subject created : {}.",subject);  return subject;}  }
class C{  @Override public boolean isEmpty(){  purgeBeforeRead();  return super.isEmpty();}  }
class C{  protected int readShort(){  return read() | (read() << 8);}  }
class C{  public TDoubleDoubleHashMap normalizedDistribution(double binsize){  return normalizedDistribution(absoluteDistribution(binsize));}  }
