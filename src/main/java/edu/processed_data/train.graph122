class C{  public void done() throws ReplicatorException, InterruptedException {  filter.release(context);}  }
class C{  public byte lookup(Segment text,int offset,int length){  if (length == 0)   return Token.NULL;  Keyword k=map[getSegmentMapKey(text,offset,length)];  while (k != null) {    if (length != k.keyword.length) {      k=k.next;      continue;    }    if (SyntaxUtilities.regionMatches(ignoreCase,text,offset,k.keyword))     return k.id;    k=k.next;  }  return Token.NULL;}  }
class C{  public void click(long time,float x,float y,boolean fromMouse,int buttons){  resetResizeTimeout(false);  if (mNewTabButton.click(x,y) && mModel != null) {    mTabCreator.launchNTP();    return;  }  final StripLayoutTab clickedTab=getTabAtPosition(x);  if (clickedTab == null || clickedTab.isDying())   return;  if (clickedTab.checkCloseHitTest(x,y) || (fromMouse && (buttons & MotionEvent.BUTTON_TERTIARY) != 0)) {    startAnimation(buildTabClosedAnimation(clickedTab),true);    clickedTab.setIsDying(true);    Tab nextTab=mModel.getNextTabIfClosed(clickedTab.getId());    if (nextTab != null)     tabSelected(time,nextTab.getId(),clickedTab.getId());    boolean lastTab=mStripTabs.length == 0 || mStripTabs[mStripTabs.length - 1].getId() == clickedTab.getId();    resizeTabStrip(!lastTab);  } else {    int newIndex=TabModelUtils.getTabIndexById(mModel,clickedTab.getId());    TabModelUtils.setIndex(mModel,newIndex);  }}  }
class C{  public AccountMetaData(final Deserializer deserializer){  this.status=AccountStatus.readFrom(deserializer,"status");  this.remoteStatus=AccountRemoteStatus.readFrom(deserializer,"remoteStatus");  this.cosignatoryOf=deserializer.readObjectArray("cosignatoryOf",null);  this.cosignatories=deserializer.readObjectArray("cosignatories",null);}  }
class C{  @Override public int read(byte b[]) throws IOException {  if (bb == null) {    throw new IOException("read on a closed InputStream");  }  return read(b,0,b.length);}  }
class C{  @Override public void onButtonClicked(boolean isPrimaryButton){  onButtonClicked(ActionType.OK,"");}  }
class C{  public void clear(){  _list.clear(DEFAULT_CAPACITY);}  }
class C{  public boolean isUseASP(){  Object oo=get_Value(COLUMNNAME_IsUseASP);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void validateMessages(List<TaskMessage> messages){  if (messages == null) {    SaaSSystemException sse=new SaaSSystemException("The list of task messages are not initialized!");    logger.logWarn(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_LIST_OF_MESSAGES_NOT_INITIALIZED);    throw sse;  }  for (  TaskMessage message : messages) {    if (message.getHandlerClass() == null) {      SaaSSystemException sse=new SaaSSystemException("Handler class of the message is empty!");      logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_HANDLER_OF_MESSAGE_EMPTY);      throw sse;    }    if (message.getPayload() == null) {      SaaSSystemException sse=new SaaSSystemException("Payload of the message is empty!");      logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_PAYLOAD_OF_MESSAGE_EMPTY);      throw sse;    }  }}  }
class C{  protected int engineDoFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  private RUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public CreateTerrainVisualPanel1(){  initComponents();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return mf == null ? null : mf.getThumbnail(stack.getUIComponent());}  }
class C{  public static Map<String,String> data(Map<String,String[]> params,Map.Entry<String,String>... others){  Map<String,String> result=new HashMap<>();  for (  Map.Entry<String,String[]> entry : params.entrySet()) {    if (entry.getValue() == null || entry.getValue().length == 0)     continue; else     if (entry.getValue().length == 1 && !entry.getKey().endsWith("[]"))     result.put(entry.getKey(),entry.getValue()[0]); else {      for (int i=0; i < entry.getValue().length; i++) {        String key=entry.getKey().replaceAll("\\[\\]$","") + "[" + i+ "]";        result.put(key,entry.getValue()[i]);      }    }  }  for (  Map.Entry<String,String> entry : others) {    result.put(entry.getKey(),entry.getValue());  }  return result;}  }
class C{  public void actionPerformed(ActionEvent e){  JFileChooser fileChooser=jmri.jmrit.XmlFile.userFileChooser(Bundle.getMessage("PromptXmlFileTypes"),"xml");  fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);  fileChooser.setCurrentDirectory(new File(ThrottleFrame.getDefaultThrottleFolder()));  java.io.File file=StoreXmlConfigAction.getFileName(fileChooser);  if (file == null) {    return;  }  saveThrottlesLayout(file);}  }
class C{  public static double[][] add(double[][] M,double a){  for (int i=0; i < M.length; i++)   for (int j=0; j < M[i].length; j++)   M[i][j]=M[i][j] + a;  return M;}  }
class C{  public void visitUnitProduction(Nonterminal a,UnitProduction p){  try {    Nonterminal rhs=p.getNonterminal();    if (isRecursive(rhs)) {      addCoeff(rhs,RE.epsilon);    } else {      RE rhsRE=getRE(rhs);      addTerm(rhsRE);    }  } catch (  InterruptedException e) {    throw new RuntimeException();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.354 -0500",hash_original_method="C3A5E8A0EB9514669B9D33BF4F941F8F",hash_generated_method="26B8BE5F6403E0CBE1CB70D001532533") public static void cursorDoubleToContentValues(Cursor cursor,String field,ContentValues values,String key){  int colIndex=cursor.getColumnIndex(field);  if (!cursor.isNull(colIndex)) {    values.put(key,cursor.getDouble(colIndex));  } else {    values.put(key,(Double)null);  }}  }
class C{  private void skipComment(){  int dashesToRead=2;  while (dashesToRead > 0) {    char ch=this.readChar();    if (ch == '-') {      dashesToRead-=1;    } else {      dashesToRead=2;    }  }  if (this.readChar() != '>') {    throw this.expectedInput(">");  }}  }
class C{  public static boolean isProcessing(){  return isProcessing;}  }
class C{  public boolean isRequiresIndex(){  return isRequiresIndex;}  }
class C{  public String sanitizeFilename(String name){  name=name.trim().replaceAll(" ","_").replaceAll("[.]+",".");  StringBuilder filename=new StringBuilder();  for (  char c : name.toCharArray()) {    if (c == '.' || Character.isJavaIdentifierPart(c)) {      filename.append(c);    }  }  return filename.toString();}  }
class C{  public void put(int key,char value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      char[] nvalues=new char[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean onlyInterolateInteriorHoles=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z == noData) {          output.setValue(row,col,1);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 6: ",progress);    }    if (onlyInterolateInteriorHoles) {      int[] scanFilter=new int[]{6,7,0,5};      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress("Loop 2 of 6: ",progress);      }      scanFilter=new int[]{4,3,2,1};      for (row=(rows - 1); row >= 0; row--) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z == 1) {            for (int a=0; a < 4; a++) {              x=col + dX[scanFilter[a]];              y=row + dY[scanFilter[a]];              z=output.getValue(y,x);              if (z == -1 || x < 0 || x >= cols || y < 0 || y >= rows) {                output.setValue(row,col,-1);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * 1 - row / (rows - 1));        updateProgress("Loop 3 of 6: ",progress);      }    }    int k=0;    boolean neighboursNoData=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            k++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 4 of 6: ",progress);    }    KdTree<Double> tree=new KdTree.SqrEuclid<Double>(2,k);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          neighboursNoData=false;          for (i=0; i < 8; i++) {            if (output.getValue(row + dY[i],col + dX[i]) == 1) {              neighboursNoData=true;              break;            }          }          if (neighboursNoData) {            double[] entry={row,col};            tree.addPoint(entry,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 5 of 6: ",progress);    }    List<KdTree.Entry<Double>> results;    double sumWeights;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output.getValue(row,col);        if (z == 1) {          double[] entry={row,col};          results=tree.nearestNeighbor(entry,6,true);          sumWeights=0;          for (i=0; i < results.size(); i++) {            sumWeights+=1 / (results.get(i).distance);          }          val=0;          for (i=0; i < results.size(); i++) {            val+=(1 / (results.get(i).distance)) / sumWeights * results.get(i).value;          }          output.setValue(row,col,val);        } else {          output.setValue(row,col,image.getValue(row,col));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 6 of 6: ",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DerivedAttribute_ createDerivedAttribute_(){  DerivedAttribute_Impl derivedAttribute_=new DerivedAttribute_Impl();  return derivedAttribute_;}  }
class C{  public void trace(String message){  say(this.toString(),message);}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    if ((mProperty == null) && AnimatorProxy.NEEDS_PROXY && (mTarget instanceof View)&& PROXY_PROPERTIES.containsKey(mPropertyName)) {      setProperty(PROXY_PROPERTIES.get(mPropertyName));    }    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  @Override @NotNull public String toString(){  return values.toString();}  }
class C{  private List<Integer> defaultTableOrdering(){  if (this.hasTable(Tag.CFF)) {    return Font.CFF_TABLE_ORDERING;  }  return Font.TRUE_TYPE_TABLE_ORDERING;}  }
class C{  public static Name fromAddress(String addr,int family) throws UnknownHostException {  byte[] array=Address.toByteArray(addr,family);  if (array == null)   throw new UnknownHostException("Invalid IP address");  return fromAddress(array);}  }
class C{  private IOException syntaxError(String message) throws IOException {  throw new MalformedJsonException(message + " at line " + getLineNumber()+ " column "+ getColumnNumber());}  }
class C{  public void addOutEdgeSample(final Resource v){  VertexSample s=samples.get(v);  if (s == null) {    samples.put(v,s=new VertexSample(v,0,1));    indexOf.put(samples.size() - 1,s);  }}  }
class C{  private static Bitmap cropForRotatedImage(Bitmap bitmap,float[] points,Rect rect,int degreesRotated,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY){  if (degreesRotated % 90 != 0) {    int adjLeft=0, adjTop=0, width=0, height=0;    double rads=Math.toRadians(degreesRotated);    int compareTo=degreesRotated < 90 || (degreesRotated > 180 && degreesRotated < 270) ? rect.left : rect.right;    for (int i=0; i < points.length; i+=2) {      if (points[i] >= compareTo - 1 && points[i] <= compareTo + 1) {        adjLeft=(int)Math.abs(Math.sin(rads) * (rect.bottom - points[i + 1]));        adjTop=(int)Math.abs(Math.cos(rads) * (points[i + 1] - rect.top));        width=(int)Math.abs((points[i + 1] - rect.top) / Math.sin(rads));        height=(int)Math.abs((rect.bottom - points[i + 1]) / Math.cos(rads));        break;      }    }    rect.set(adjLeft,adjTop,adjLeft + width,adjTop + height);    if (fixAspectRatio) {      fixRectForAspectRatio(rect,aspectRatioX,aspectRatioY);    }    Bitmap bitmapTmp=bitmap;    bitmap=Bitmap.createBitmap(bitmap,rect.left,rect.top,rect.width(),rect.height());    if (bitmapTmp != bitmap) {      bitmapTmp.recycle();    }  }  return bitmap;}  }
class C{  OFChannelHandler(@Nonnull IOFSwitchManager switchManager,@Nonnull INewOFConnectionListener newConnectionListener,@Nonnull ChannelPipeline pipeline,@Nonnull IDebugCounterService debugCounters,@Nonnull Timer timer,@Nonnull List<U32> ofBitmaps,@Nonnull OFFactory defaultFactory){  Preconditions.checkNotNull(switchManager,"switchManager");  Preconditions.checkNotNull(newConnectionListener,"connectionOpenedListener");  Preconditions.checkNotNull(pipeline,"pipeline");  Preconditions.checkNotNull(timer,"timer");  Preconditions.checkNotNull(debugCounters,"debugCounters");  this.pipeline=pipeline;  this.debugCounters=debugCounters;  this.newConnectionListener=newConnectionListener;  this.counters=switchManager.getCounters();  this.state=new InitState();  this.timer=timer;  this.ofBitmaps=ofBitmaps;  this.factory=defaultFactory;  log.debug("constructor on OFChannelHandler {}",String.format("%08x",System.identityHashCode(this)));}  }
class C{  public static ReilInstruction createMod(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.MOD,firstOperand,secondOperand,thirdOperand);}  }
class C{  protected Node newNode(){  return new SVGOMToBeImplementedElement();}  }
class C{  public void add(final int start,final int end,final byte status){  final int s=start - mStart;  if (s < mInterval.length && end > mStart) {    Arrays.fill(mInterval,Math.max(s,0),Math.min(end - mStart,mInterval.length),status);  }}  }
class C{  public TourDisplaySetting(Paint paint,Stroke stroke){  super();  this.paint=paint;  this.stroke=stroke;}  }
class C{  private void clampStartingPosition(){  final float cX=mBounds.exactCenterX();  final float cY=mBounds.exactCenterY();  final float dX=mStartingX - cX;  final float dY=mStartingY - cY;  final float r=mTargetRadius;  if (dX * dX + dY * dY > r * r) {    final double angle=Math.atan2(dY,dX);    mClampedStartingX=cX + (float)(Math.cos(angle) * r);    mClampedStartingY=cY + (float)(Math.sin(angle) * r);  } else {    mClampedStartingX=mStartingX;    mClampedStartingY=mStartingY;  }}  }
class C{  private boolean isOpen(){  return str != null;}  }
class C{  private PhysicalNAS findPhysicalNasByNativeId(StorageSystem system,String nativeId){  URIQueryResultList results=new URIQueryResultList();  PhysicalNAS physicalNas=null;  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nativeId,NativeGUIDGenerator.PHYSICAL_NAS);  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getPhysicalNasByNativeGuidConstraint(nasNativeGuid),results);  Iterator<URI> iter=results.iterator();  while (iter.hasNext()) {    PhysicalNAS tmpNas=_dbClient.queryObject(PhysicalNAS.class,iter.next());    if (tmpNas != null && !tmpNas.getInactive()) {      physicalNas=tmpNas;      _logger.info("found physical NAS {}",physicalNas.getNativeGuid() + ":" + physicalNas.getNasName());      break;    }  }  return physicalNas;}  }
class C{  public Size(int width,int height){  mWidth=width;  mHeight=height;}  }
class C{  protected void handleCSSPropertyChanged(int property){switch (property) {case SVGCSSEngine.FILL_INDEX:case SVGCSSEngine.FILL_OPACITY_INDEX:case SVGCSSEngine.STROKE_INDEX:case SVGCSSEngine.STROKE_OPACITY_INDEX:case SVGCSSEngine.STROKE_WIDTH_INDEX:case SVGCSSEngine.STROKE_LINECAP_INDEX:case SVGCSSEngine.STROKE_LINEJOIN_INDEX:case SVGCSSEngine.STROKE_MITERLIMIT_INDEX:case SVGCSSEngine.STROKE_DASHARRAY_INDEX:case SVGCSSEngine.STROKE_DASHOFFSET_INDEX:case SVGCSSEngine.TEXT_DECORATION_INDEX:    rebuildACI();  break;case SVGCSSEngine.VISIBILITY_INDEX:rebuildACI();super.handleCSSPropertyChanged(property);break;case SVGCSSEngine.TEXT_RENDERING_INDEX:{RenderingHints hints=node.getRenderingHints();hints=CSSUtilities.convertTextRendering(e,hints);if (hints != null) {node.setRenderingHints(hints);}break;}case SVGCSSEngine.COLOR_RENDERING_INDEX:{RenderingHints hints=node.getRenderingHints();hints=CSSUtilities.convertColorRendering(e,hints);if (hints != null) {node.setRenderingHints(hints);}break;}default :super.handleCSSPropertyChanged(property);}}  }
class C{  public Coupling(final Producer<E> Producer){  super();  this.producer=Producer;}  }
class C{  public boolean hasUserDetails(){  return userDetails != null;}  }
class C{  public static void experimenterFromString(OFFlowMod.Builder fmb,String inst,Logger log){}  }
class C{  private static ConditionNode convert(final CommonTree ast) throws RecognitionException {  if (ast == null) {    throw new RecognitionException();  }switch (ast.getType()) {case 0:    return convert((CommonTree)ast.getChild(0));case ConditionParser.SUB_EXPRESSION:  return new SubNode(convert((CommonTree)ast.getChild(0)));case ConditionParser.MEMORY_EXPRESSION:return new MemoryNode(convert((CommonTree)ast.getChild(0)));case ConditionParser.NUMBER:try {return new NumberNode(Long.valueOf(ast.getText()));} catch (final NumberFormatException exception) {throw new RecognitionException();}case ConditionParser.HEX_NUMBER:try {return new NumberNode(Long.valueOf(ast.getText().substring(2),16));} catch (final NumberFormatException exception) {throw new RecognitionException();}case ConditionParser.IDENTIFIER:return new IdentifierNode(ast.getText());case ConditionParser.EQ_SIGN:case ConditionParser.GEQ_SIGN:case ConditionParser.LEQ_SIGN:case ConditionParser.GT_SIGN:case ConditionParser.LT_SIGN:case ConditionParser.NEQ_SIGN:case ConditionParser.NEQ_SIGN_2:return new RelationNode(ast.getText(),convert((CommonTree)ast.getChild(0)),convert((CommonTree)ast.getChild(1)));case ConditionParser.AND:case ConditionParser.OR:return new ExpressionNode(ast.getText(),createOperator(ast));case ConditionParser.ADD:case ConditionParser.SUB:case ConditionParser.MULT:case ConditionParser.DIV:case ConditionParser.MOD:case ConditionParser.LSH:case ConditionParser.RSH:case ConditionParser.B_AND:case ConditionParser.B_OR:case ConditionParser.B_XOR:return new FormulaNode(ast.getText(),createOperator(ast));}throw new IllegalStateException("IE01140: Not yet implemented (" + ast.getType() + ")");}  }
class C{  public GrantorInfo peekGrantor(String serviceName){synchronized (this) {    GrantorInfo gi=(GrantorInfo)this.nameToInfo.get(serviceName);    if (gi != null) {      waitWhileInitiatingTransfer(gi);      InternalDistributedMember currentGrantor=gi.getId();      if (currentGrantor != null && this.dm.getDistributionManagerIds().contains(currentGrantor)) {        return gi;      } else {        return new GrantorInfo(null,0,0,true);      }    } else {      return new GrantorInfo(null,0,0,false);    }  }}  }
class C{  private void normaliseResourceChildren(IFile serializationFile,ResourceProxy resourceProxy,IFolder syncDirectory,Repository repository) throws CoreException {  try {    SerializationKindManager skm=new SerializationKindManager();    skm.init(repository);    String primaryType=(String)resourceProxy.getProperties().get(Repository.JCR_PRIMARY_TYPE);    List<String> mixinTypesList=getMixinTypes(resourceProxy);    SerializationKind serializationKind=skm.getSerializationKind(primaryType,mixinTypesList);    if (serializationKind == SerializationKind.METADATA_FULL) {      return;    }  } catch (  RepositoryException e) {    throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,"Failed creating a " + SerializationDataBuilder.class.getName(),e));  }  IPath serializationDirectoryPath=serializationFile.getFullPath().removeLastSegments(1);  Iterator<ResourceProxy> childIterator=resourceProxy.getChildren().iterator();  Map<String,IResource> extraChildResources=new HashMap<String,IResource>();  for (  IResource member : serializationFile.getParent().members()) {    if (member.equals(serializationFile)) {      continue;    }    extraChildResources.put(member.getName(),member);  }  while (childIterator.hasNext()) {    ResourceProxy child=childIterator.next();    String childName=PathUtil.getName(child.getPath());    String osPath=serializationManager.getOsPath(childName);    extraChildResources.remove(osPath);    if (resourceProxy.covers(child.getPath())) {      continue;    }    IPath childPath=serializationDirectoryPath.append(osPath);    VirtualFile myFile=serializationFile.getVirtualFile().getFileSystem().findFileByPath(childPath.toOSString());    if (myFile == null) {      Activator.getDefault().getPluginLogger().trace("For resource at with serialization data {0} the serialized child resource at {1} does not exist in the filesystem and will be ignored",serializationFile,childPath);      childIterator.remove();    }  }  for (  IResource extraChildResource : extraChildResources.values()) {    IPath extraChildResourcePath=extraChildResource.getFullPath().makeRelativeTo(syncDirectory.getFullPath()).makeAbsolute();    String path2=serializationManager.getRepositoryPath(extraChildResourcePath.toPortableString());    if (path2.contains(":/") && path2.startsWith("/")) {      path2=path2.substring(1);    }    String path3=syncDirectory.getFullPath().toPortableString();    int length=path3.length();    String path=path2.substring(length);    if (!path.equals("") && !path.equals(resourceProxy.getPath())) {      resourceProxy.addChild(new ResourceProxy(path));      Activator.getDefault().getPluginLogger().trace("For resource at with serialization data {0} the found a child resource at {1} which is not listed in the serialized child resources and will be added",serializationFile,extraChildResource);    }  }}  }
class C{  public static PatternAndExpr and(){  return new PatternAndExpr();}  }
class C{  public DateTimeFormatterBuilder appendFractionOfDay(int minDigits,int maxDigits){  return appendFraction(DateTimeFieldType.dayOfYear(),minDigits,maxDigits);}  }
class C{  public boolean hasMouse(){  return false;}  }
class C{  public static <E>SortedSet<E> constrainedSortedSet(SortedSet<E> sortedSet,Constraint<? super E> constraint){  return new ConstrainedSortedSet<E>(sortedSet,constraint);}  }
class C{  public static Bound<String> withoutValidation(){  return new Bound<>(DEFAULT_TEXT_CODER).withoutValidation();}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public static void regenerateGlobalOutputProperties(){  if (GLOBAL_CREATOR != null) {    try {      GLOBAL_CREATOR.execute(false,false);      GLOBAL_INPUT_PROPERTIES=GLOBAL_CREATOR.getInputProperties();      GLOBAL_OUTPUT_PROPERTIES=GLOBAL_CREATOR.getOutputProperties();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public DRand(){  this(DEFAULT_SEED);}  }
class C{  public Boolean isAutoClaimStorage(){  return autoClaimStorage;}  }
class C{  public void start(){  try {    serviceDiscovery.start();    cache.start();    updateState();  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    throw new IllegalStateException("Unable to start",e);  }}  }
class C{  public void putCharArray(String key,char[] value){  unparcel();  mMap.put(key,value);}  }
class C{  @Override public String open(){  Shell shell=new Shell(getParent(),getStyle());  shell.setText(getText());  createContents(shell);  shell.pack();  errorText.setText(getMessage());  SWTUtils.center(shell);  shell.open();  Display display=getParent().getDisplay();  while (!shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }  return input;}  }
class C{  private void checkNonNullParam(Location location,ConstantPoolGen cpg,TypeDataflow typeDataflow,InvokeInstruction invokeInstruction,BitSet nullArgSet,BitSet definitelyNullArgSet){  if (inExplictCatchNullBlock(location)) {    return;  }  boolean caught=inIndirectCatchNullBlock(location);  if (caught && skipIfInsideCatchNull()) {    return;  }  XMethod m=XFactory.createXMethod(invokeInstruction,cpg);  INullnessAnnotationDatabase db=AnalysisContext.currentAnalysisContext().getNullnessAnnotationDatabase();  SignatureParser sigParser=new SignatureParser(invokeInstruction.getSignature(cpg));  for (int i=nullArgSet.nextSetBit(0); i >= 0; i=nullArgSet.nextSetBit(i + 1)) {    if (db.parameterMustBeNonNull(m,i)) {      boolean definitelyNull=definitelyNullArgSet.get(i);      if (DEBUG_NULLARG) {        System.out.println("Checking " + m);        System.out.println("QQQ2: " + i + " -- "+ i+ " is null");        System.out.println("QQQ nullArgSet: " + nullArgSet);        System.out.println("QQQ dnullArgSet: " + definitelyNullArgSet);      }      BugAnnotation variableAnnotation=null;      try {        ValueNumberFrame vnaFrame=classContext.getValueNumberDataflow(method).getFactAtLocation(location);        ValueNumber valueNumber=vnaFrame.getArgument(invokeInstruction,cpg,i,sigParser);        variableAnnotation=ValueNumberSourceInfo.findAnnotationFromValueNumber(method,location,valueNumber,vnaFrame,"VALUE_OF");      } catch (      DataflowAnalysisException e) {        AnalysisContext.logError("error",e);      }catch (      CFGBuilderException e) {        AnalysisContext.logError("error",e);      }      int priority=definitelyNull ? HIGH_PRIORITY : NORMAL_PRIORITY;      if (caught) {        priority++;      }      if (m.isPrivate() && priority == HIGH_PRIORITY) {        priority=NORMAL_PRIORITY;      }      String description=definitelyNull ? "INT_NULL_ARG" : "INT_MAYBE_NULL_ARG";      WarningPropertySet<WarningProperty> propertySet=new WarningPropertySet<WarningProperty>();      Set<Location> derefLocationSet=Collections.singleton(location);      addPropertiesForDereferenceLocations(propertySet,derefLocationSet,false);      boolean duplicated=isDuplicated(propertySet,location.getHandle().getPosition(),false);      if (duplicated) {        return;      }      BugInstance warning=new BugInstance(this,"NP_NONNULL_PARAM_VIOLATION",priority).addClassAndMethod(classContext.getJavaClass(),method).addMethod(m).describe(MethodAnnotation.METHOD_CALLED).addParameterAnnotation(i,description).addOptionalAnnotation(variableAnnotation).addSourceLine(classContext,method,location);      propertySet.decorateBugInstance(warning);      bugReporter.reportBug(warning);    }  }}  }
class C{  public SQFPrivateDeclParams(@NotNull SQFVariable privateVariable,@NotNull SQFParamsStatement declarationElement){  super(privateVariable,declarationElement);}  }
class C{  public GridClientDisconnectedException(String msg,GridClientException cause){  super(msg,cause);}  }
class C{  public void testDivideRoundHalfEvenPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void addGraphMLNode(String id,String nodeLabel){  GraphMLNode node=GraphMLNode.build(id,nodeLabel);  graphMLNodes.put(node.id,node);}  }
class C{  public static final double[] labelCardinalities(Instances D){  int L=D.classIndex();  double lc[]=new double[L];  for (int j=0; j < L; j++) {    int count=0;    for (int i=0; i < D.numInstances(); i++) {      if (!D.instance(i).isMissing(j)) {        lc[j]+=D.instance(i).value(j);        count++;      }    }    lc[j]/=count;  }  return lc;}  }
class C{  public static boolean cs_qrsol(int order,Dcs A,double[] b){  double x[];  Dcss S;  Dcsn N;  Dcs AT=null;  int k, m, n;  boolean ok;  if (!Dcs_util.CS_CSC(A) || b == null)   return (false);  n=A.n;  m=A.m;  if (m >= n) {    S=Dcs_sqr.cs_sqr(order,A,true);    N=Dcs_qr.cs_qr(A,S);    x=new double[S != null ? S.m2 : 1];    ok=(S != null && N != null);    if (ok) {      Dcs_ipvec.cs_ipvec(S.pinv,b,x,m);      for (k=0; k < n; k++) {        Dcs_happly.cs_happly(N.L,k,N.B[k],x);      }      Dcs_usolve.cs_usolve(N.U,x);      Dcs_ipvec.cs_ipvec(S.q,x,b,n);    }  } else {    AT=Dcs_transpose.cs_transpose(A,true);    S=Dcs_sqr.cs_sqr(order,AT,true);    N=Dcs_qr.cs_qr(AT,S);    x=new double[S != null ? S.m2 : 1];    ok=(AT != null && S != null && N != null);    if (ok) {      Dcs_pvec.cs_pvec(S.q,b,x,m);      Dcs_utsolve.cs_utsolve(N.U,x);      for (k=m - 1; k >= 0; k--) {        Dcs_happly.cs_happly(N.L,k,N.B[k],x);      }      Dcs_pvec.cs_pvec(S.pinv,x,b,n);    }  }  return (ok);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.877 -0400",hash_original_method="C4ABC201E55DEBFDD8CAB3CEFF58A52D",hash_generated_method="F5B892B890450DB62CBA403E87AD0284") public static IOFileFilter asFileFilter(FilenameFilter filter){  return new DelegateFileFilter(filter);}  }
class C{  public synchronized static void initServer(){  while (storageMap.isEmpty()) {    try {      InputStream is=getConfig(true);      parse(is);      LogFactory.info("Server initialization success...",StorageConfig.class);      break;    } catch (    Exception e) {      LogFactory.error("Server init failed:" + e.getMessage(),StorageConfig.class);      try {        Thread.sleep(10000);      } catch (      InterruptedException ex) {        break;      }    }  }}  }
class C{  @Override public boolean isItemValidForSlot(int index,ItemStack stack){  return true;}  }
class C{  public double gradientNormValue(){  return this.squaredNorm_;}  }
class C{  @PrePersist protected void prePersist(){  this.orderState=OrderState.CREATED;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildLichPalace(zone);}  }
class C{  protected void removeHostedTXStatesForClients(){synchronized (this.hostedTXStates) {    Iterator<Entry<TXId,TXStateProxy>> iterator=this.hostedTXStates.entrySet().iterator();    while (iterator.hasNext()) {      Entry<TXId,TXStateProxy> entry=iterator.next();      if (entry.getValue().isOnBehalfOfClient()) {        entry.getValue().close();        if (logger.isDebugEnabled()) {          logger.debug("Cleaning up TXStateProxy for {}",entry.getKey());        }        iterator.remove();      }    }  }}  }
class C{  public void logInfo(Object message){  logInternal(INFO,message,null);}  }
class C{  public void addEnumClass(String name,Class c){  enumClassToNameMap.put(c,name);  nameToEnumClassMap.put(name,c);}  }
class C{  public static CCLabel makeLabel(String string,String fontname,float fontsize,int fontStyle){  return new CCLabel(string,CGSize.make(0,0),TextAlignment.CENTER,fontname,fontsize,fontStyle);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void done(){  logRecord.done();  logRecord=null;}  }
class C{  public static void logError(String message){  ILog log=getDefault().getLog();  IStatus status=new Status(IStatus.ERROR,PLUGIN_ID,0,message,null);  log.log(status);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.FEATURE_CALL;}  }
class C{  List<BillingPeriodData> sortBillingPeriods(Map<Long,List<Long>> billingPeriodMap){  List<BillingPeriodData> billingPeriodData=new ArrayList<>();  List<Long> billingEndDateList=new ArrayList<>(billingPeriodMap.keySet());  Collections.sort(billingEndDateList);  for (  Long billingEndDate : billingEndDateList) {    List<Long> subscriptionKeys=billingPeriodMap.get(billingEndDate);    long billingStartDate=addMonths(billingEndDate.longValue(),-1);    int fromIndex=0;    do {      int toIndex=Math.min((fromIndex + getSubscriptionChunkSize()),subscriptionKeys.size());      List<Long> subscriptionKeyChunk=subscriptionKeys.subList(fromIndex,toIndex);      billingPeriodData.add(new BillingPeriodData(billingStartDate,billingEndDate.longValue(),subscriptionKeyChunk));      fromIndex=toIndex;    } while (fromIndex < subscriptionKeys.size());  }  return billingPeriodData;}  }
class C{  public boolean isMaxXSet(int scale){  return mMaxX[scale] != -MathHelper.NULL_VALUE;}  }
class C{  public boolean isMainRelease(){  return this.mainRelease;}  }
class C{  public void decreaseDiskStoreStats(Statistics stats){synchronized (statsMap) {    queueSize-=statsMap.get(StatsKey.DISK_QUEUE_SIZE).intValue();    backupsInProgress-=statsMap.get(StatsKey.BACKUPS_IN_PROGRESS).intValue();    ;    removed=true;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TYPE_DEFS__TYPES:    getTypes().clear();  return;}super.eUnset(featureID);}  }
class C{  private synchronized void garbageCollectPeer(Peer peer){  Log.d(TAG,"Garbage collected peer " + peer);  mCurrentPeers.remove(peer);}  }
class C{  @Override public boolean playSong(final String ref) throws RemoteException {  mLocalProvider.playSong(ref);  return true;}  }
class C{  public void markLocked(){  locked=true;}  }
class C{  public static Map<Option,String> parseOptions(String optionLine){  Map<Option,String> options=new HashMap<Option,String>();  for (  String s : optionLine.split("\\s+")) {    if (s.length() > 0) {      boolean valid=false;      for (      OptionParser h : optionHandlers) {        if (h.handle(options,s)) {          valid=true;          break;        }      }      if (!valid) {        throw new Profiler4JError("Unknown rule option '" + s + "'");      }    }  }  return options;}  }
class C{  public void moveTo(double x1,double y1){  if (size() != 0) {    throw new IllegalPathStateException("moveTo only allowed when empty");  }  Node node=new Node(x1,y1);  node.keepColinear=false;  add(node);}  }
class C{  public ToStringBuilder append(final String fieldName,final Object obj){  style.append(buffer,fieldName,obj,null);  return this;}  }
class C{  public void addResources(Resources resources){  addProperty(resources);}  }
class C{  @Override public void updateScreen(){  ((GuiButton)buttonList.get(0)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(3)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(4)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(5)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;}  }
class C{  public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  String cookieDomain=cookie.getDomain();  if (!domainMatch(host,cookieDomain)) {    return false;  }  String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());  return effectiveHostWithoutDomain.indexOf('.') == -1;}  }
class C{  protected int redeploymentPause(){  return 0;}  }
class C{  static boolean removeAllImpl(Set<?> set,Iterator<?> iterator){  boolean changed=false;  while (iterator.hasNext()) {    changed|=set.remove(iterator.next());  }  return changed;}  }
class C{  public boolean addPart(PduPart part){  if (null == part) {    throw new NullPointerException();  }  putPartToMaps(part);  return mParts.add(part);}  }
class C{  public static byte[] encodeObjlnk(ObjectLink value){  ByteBuffer objlnkBuffer=ByteBuffer.allocate(4).order(ByteOrder.BIG_ENDIAN);  objlnkBuffer.putShort(0,(short)value.getObjectId());  objlnkBuffer.putShort(2,(short)value.getObjectInstanceId());  return objlnkBuffer.array();}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public void addChangeListener(ChangeListener cl){  if (!m_listeners.contains(cl))   m_listeners.add(cl);}  }
class C{  public static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public static boolean isCassandraCompatibleTypes(Class type1,Class type2){  if (type1 == null || type2 == null)   return false;  DataType.Name t1=PropertyMappingHelper.getCassandraType(type1);  DataType.Name t2=PropertyMappingHelper.getCassandraType(type2);  return t1 != null && t2 != null && t1.equals(t2);}  }
class C{  public void add(String name,StatisticsChart other) throws AdeInternalException {  if (other.m_doubleStats != null) {    for (    Map.Entry<String,Double> val : other.m_doubleStats.entrySet()) {      setStat(name + "." + val.getKey(),val.getValue());    }  }  if (other.m_stringStats != null) {    for (    Map.Entry<String,String> val : other.m_stringStats.entrySet()) {      setStat(name + "." + val.getKey(),val.getValue());    }  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws ClassNotFoundException, IOException {  throw new UnsupportedOperationException("JDBC data sources cannot be serialized.");}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  protected Object invoke(Method method,Object[] args){  for (int i=0; i < args.length; i++) {    if (args[i] instanceof Wrapper) {      args[i]=((Wrapper)args[i]).core;    }  }  ClassLoader cl=Thread.currentThread().getContextClassLoader();  Thread.currentThread().setContextClassLoader(TomcatEmbedded.this.classLoader);  try {    return method.invoke(core,args);  } catch (  IllegalAccessException e) {    throw new ContainerException("Tomcat reported an error: " + e.getMessage(),e);  }catch (  InvocationTargetException e) {    throw new ContainerException("Tomcat reported an error: " + e.getMessage(),e);  } finally {    Thread.currentThread().setContextClassLoader(cl);  }}  }
class C{  public static void zipFolder(File srcFolder,File destZipFile) throws IOException {  ZipOutputStream zip=null;  try {    zip=new ZipOutputStream(new FileOutputStream(destZipFile));    for (    File file : srcFolder.getAbsoluteFile().listFiles()) {      addToZip(zip,srcFolder.getAbsoluteFile(),file);    }    zip.flush();  }  finally {    closeQuietly(zip);  }}  }
class C{  public MemoryRegion(Memory memory,long memOffsetBytes,long capacityBytes,MemoryRequest memReq){  assertBounds(memOffsetBytes,capacityBytes,memory.getCapacity());  mem_=memory;  memOffsetBytes_=memOffsetBytes;  capacityBytes_=capacityBytes;  memReq_=memReq;}  }
class C{  public void testPosNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=-1;  byte rBytes[]={0,-6,-80,72,8,75,2,-79,34,16,-119};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  static String formatElapsedTime(long elapsedTimeMs){  long seconds=TimeUnit.MILLISECONDS.toSeconds(elapsedTimeMs) % 60;  long minutes=TimeUnit.MILLISECONDS.toMinutes(elapsedTimeMs) % 60;  long hours=TimeUnit.MILLISECONDS.toHours(elapsedTimeMs);  StringBuilder time=new StringBuilder();  if (hours > 0) {    time.append(hours);    time.append("h ");  }  if (minutes > 0) {    time.append(minutes);    time.append("m ");  }  time.append(seconds);  time.append("s");  return time.toString();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void addCommand(PDFCmd cmd){synchronized (commands) {    commands.add(cmd);  }  updateImages();}  }
class C{  public MappingResult mappingResult(List<BinaryAnnotation> binaryAnnotations){  if (binaryAnnotations == null) {    return new MappingResult();  }  List<String> componentTypes=new ArrayList<>();  List<String> endpointTypes=new ArrayList<>();  MappingResult.Builder mappingBuilder=MappingResult.builder();  for (  BinaryAnnotation binaryAnnotation : binaryAnnotations) {    if (binaryAnnotation.getKey() == null) {      continue;    }    BinaryAnnotationMapping mapping=mappingStorage.getKeyBasedMappings().get(binaryAnnotation.getKey());    if (mapping != null && mapping.isIgnore()) {      continue;    }    if (mapping == null || mapping.getProperty() == null) {      mappingBuilder.addProperty(new Property(binaryAnnotation.getKey(),binaryAnnotation.getValue(),AnnotationTypeUtil.toPropertyType(binaryAnnotation.getType())));    }    if (mapping != null) {      if (mapping.getComponentType() != null) {        componentTypes.add(mapping.getComponentType());      }      if (mapping.getEndpointType() != null) {        endpointTypes.add(mapping.getEndpointType());      }      if (mapping.getProperty() != null && !mapping.getProperty().isExclude()) {        String key=mapping.getProperty().getKey() != null ? mapping.getProperty().getKey() : binaryAnnotation.getKey();        mappingBuilder.addProperty(new Property(key,binaryAnnotation.getValue(),AnnotationTypeUtil.toPropertyType(binaryAnnotation.getType())));      }    }  }  if (!componentTypes.isEmpty()) {    mappingBuilder.withComponentType(componentTypes.get(0));  }  if (!endpointTypes.isEmpty()) {    mappingBuilder.withEndpointType(endpointTypes.get(0));  }  return mappingBuilder.build();}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  ArrayList<Attribute> atts;  ArrayList<String> values;  Instances result;  int i;  m_Attributes.setUpper(inputFormat.numAttributes() - 1);  m_AttributeIndices=m_Attributes.getSelection();  for (i=0; i < m_AttributeIndices.length; i++) {    if (m_AttributeIndices[i] == inputFormat.classIndex()) {      m_AttributeIndices[i]=NON_NUMERIC;      continue;    }    if (!inputFormat.attribute(m_AttributeIndices[i]).isNumeric()) {      m_AttributeIndices[i]=NON_NUMERIC;    }  }  atts=new ArrayList<Attribute>();  for (i=0; i < inputFormat.numAttributes(); i++) {    atts.add(inputFormat.attribute(i));  }  if (!getDetectionPerAttribute()) {    m_OutlierAttributePosition=new int[1];    m_OutlierAttributePosition[0]=atts.size();    values=new ArrayList<String>();    values.add("no");    values.add("yes");    atts.add(new Attribute("Outlier",values));    values=new ArrayList<String>();    values.add("no");    values.add("yes");    atts.add(new Attribute("ExtremeValue",values));  } else {    m_OutlierAttributePosition=new int[m_AttributeIndices.length];    for (i=0; i < m_AttributeIndices.length; i++) {      if (m_AttributeIndices[i] == NON_NUMERIC) {        continue;      }      m_OutlierAttributePosition[i]=atts.size();      values=new ArrayList<String>();      values.add("no");      values.add("yes");      atts.add(new Attribute(inputFormat.attribute(m_AttributeIndices[i]).name() + "_Outlier",values));      values=new ArrayList<String>();      values.add("no");      values.add("yes");      atts.add(new Attribute(inputFormat.attribute(m_AttributeIndices[i]).name() + "_ExtremeValue",values));      if (getOutputOffsetMultiplier()) {        atts.add(new Attribute(inputFormat.attribute(m_AttributeIndices[i]).name() + "_Offset"));      }    }  }  result=new Instances(inputFormat.relationName(),atts,0);  result.setClassIndex(inputFormat.classIndex());  return result;}  }
class C{  public SeparatorPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);}  }
class C{  public TransferTransaction(final TimeInstant timeStamp,final Account sender,final Account recipient,final Amount amount,final TransferTransactionAttachment attachment){  this(CURRENT_VERSION,timeStamp,sender,recipient,amount,attachment);}  }
class C{  public Boolean isTraversable(File f){  return null;}  }
class C{  public static Map<String,Object> capturePaymentsByInvoice(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String invoiceId=(String)context.get("invoiceId");  Locale locale=(Locale)context.get("locale");  GenericValue invoice=null;  try {    invoice=EntityQuery.use(delegator).from("Invoice").where("invoiceId",invoiceId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Trouble looking up Invoice #" + invoiceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceNotFound",UtilMisc.toMap("invoiceId",invoiceId),locale));  }  if (invoice == null) {    Debug.logError("Could not locate invoice #" + invoiceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceNotFound",UtilMisc.toMap("invoiceId",invoiceId),locale));  }  List<GenericValue> orderItemBillings=null;  try {    orderItemBillings=invoice.getRelated("OrderItemBilling",null,null,false);  } catch (  GenericEntityException e) {    Debug.logError("Trouble getting OrderItemBilling(s) from Invoice #" + invoiceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemLookingUpOrderItemBilling",UtilMisc.toMap("billFields",invoiceId),locale));  }  String billingAccountId=invoice.getString("billingAccountId");  String testOrderId=null;  boolean allSameOrder=true;  if (orderItemBillings != null) {    Iterator<GenericValue> oii=orderItemBillings.iterator();    while (oii.hasNext()) {      GenericValue oib=oii.next();      String orderId=oib.getString("orderId");      if (testOrderId == null) {        testOrderId=orderId;      } else {        if (!orderId.equals(testOrderId)) {          allSameOrder=false;          break;        }      }    }  }  if (testOrderId == null || !allSameOrder) {    Debug.logWarning("Attempt to settle Invoice #" + invoiceId + " which contained none/multiple orders",module);    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"AccountingInvoiceCannotBeSettle",UtilMisc.toMap("invoiceId",invoiceId),locale));  }  BigDecimal invoiceTotal=InvoiceWorker.getInvoiceNotApplied(invoice);  if (Debug.infoOn())   Debug.logInfo("(Capture) Invoice [#" + invoiceId + "] total: "+ invoiceTotal,module);  Map<String,Object> serviceContext=UtilMisc.toMap("userLogin",userLogin,"orderId",testOrderId,"invoiceId",invoiceId,"captureAmount",invoiceTotal);  if (UtilValidate.isNotEmpty(billingAccountId)) {    serviceContext.put("billingAccountId",billingAccountId);  }  try {    return dispatcher.runSync("captureOrderPayments",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Trouble running captureOrderPayments service",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentCannotBeCaptured",locale));  }}  }
class C{  public static MediaType create(String type,String subtype){  return create(type,subtype,ImmutableListMultimap.<String,String>of());}  }
class C{  public static <T>LazySetX<T> generate(long limit,Supplier<T> s){  return fromStreamS(ReactiveSeq.generate(s).limit(limit));}  }
class C{  @SuppressWarnings("unchecked") private void addDeviceGroupNamesToSetUsedInVerifyingFASTPolicyRelationShipExistence(String policyRuleName,Map<String,Object> keyMap,String provisioningType){  List<String> deviceNamesPolicyRelationExistence=(List<String>)keyMap.get(Constants.USED_IN_CHECKING_GROUPNAMES_TO_FASTPOLICY);  if (AutoTieringPolicy.ProvisioningType.ThicklyProvisioned.toString().equalsIgnoreCase(provisioningType)) {    deviceNamesPolicyRelationExistence.add(policyRuleName + Constants.HYPHEN + Constants.THICKDEVICEGROUP);  } else   if (AutoTieringPolicy.ProvisioningType.ThinlyProvisioned.toString().equalsIgnoreCase(provisioningType)) {    deviceNamesPolicyRelationExistence.add(policyRuleName + Constants.HYPHEN + Constants.THINDEVICEGROUP);  } else   if (AutoTieringPolicy.ProvisioningType.All.toString().equalsIgnoreCase(provisioningType)) {    deviceNamesPolicyRelationExistence.add(policyRuleName + Constants.HYPHEN + Constants.THINANDTHICKDEVICEGROUP);  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  @Override public void teardown(){}  }
class C{  public boolean status(){  return opened;}  }
class C{  public boolean createPeriods(){  int sumDays=0;  int C_Calendar_ID=DB.getSQLValueEx(get_TrxName(),"SELECT C_Calendar_ID FROM C_Year WHERE C_Year_ID = ?",getC_Year_ID());  if (C_Calendar_ID <= 0)   return false;  Timestamp StartDate=null;  Timestamp EndDate=null;  MHRPayroll payroll=new MHRPayroll(getCtx(),getHR_Payroll_ID(),get_TrxName());  for (int period=1; period <= getQty(); period++) {    if ((12 == getQty()) && (28 == getNetDays() || 29 == getNetDays() || 30 == getNetDays() || 31 == getNetDays())) {      if (period > 1) {        StartDate=TimeUtil.addDays(EndDate,1);      } else {        StartDate=TimeUtil.addDays(getStartDate(),0);      }      EndDate=TimeUtil.getMonthLastDay(StartDate);    } else {      sumDays=period == 1 ? 0 : (period - 1) * (getNetDays());      StartDate=TimeUtil.addDays(getStartDate(),sumDays);      EndDate=TimeUtil.addDays(StartDate,getNetDays() - 1);    }    int C_Period_ID=DB.getSQLValueEx(get_TrxName(),"SELECT C_Period_ID FROM C_Period p " + " INNER JOIN C_Year y ON (p.C_Year_ID=y.C_Year_ID) " + " WHERE "+ " ? BETWEEN p.startdate AND p.endDate"+ " AND y.C_Calendar_ID=?",EndDate,C_Calendar_ID);    if (C_Period_ID <= 0)     return false;    MPeriod m_period=MPeriod.get(getCtx(),C_Period_ID);    MHRPeriod HR_Period=new MHRPeriod(getCtx(),0,get_TrxName());    HR_Period.setAD_Org_ID(getAD_Org_ID());    HR_Period.setHR_Year_ID(getHR_Year_ID());    HR_Period.setHR_Payroll_ID(getHR_Payroll_ID());    HR_Period.setName(StartDate.toString().substring(0,10) + " " + Msg.translate(getCtx(),"To")+ " "+ EndDate.toString().substring(0,10));    HR_Period.setDescription(Msg.translate(getCtx(),"HR_Payroll_ID") + " " + payroll.getName().trim()+ " "+ Msg.translate(getCtx(),"From")+ " "+ period+ " "+ Msg.translate(getCtx(),"To")+ " "+ StartDate.toString().substring(0,10)+ " al "+ EndDate.toString().substring(0,10));    HR_Period.setPeriodNo(period);    HR_Period.setC_Period_ID(C_Period_ID);    HR_Period.setC_Year_ID(m_period.getC_Year_ID());    HR_Period.setStartDate(StartDate);    HR_Period.setEndDate(EndDate);    HR_Period.setDateAcct(EndDate);    HR_Period.setIsActive(true);    HR_Period.saveEx();  }  return true;}  }
class C{  public static SelectClause createStreamWildcard(String streamName){  List<SelectClauseElement> selectList=new ArrayList<SelectClauseElement>();  selectList.add(new SelectClauseStreamWildcard(streamName,null));  return new SelectClause(StreamSelector.ISTREAM_ONLY,selectList);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public StatusInfo(){  this(OK,null);}  }
class C{  @Override public void acceptInstance(InstanceEvent e){  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    m_connectedFormat=e.getStructure();    m_stopRequested.set(false);    try {      init(new Instances(e.getStructure(),0));    } catch (    IllegalArgumentException ex) {      if (m_log != null) {        String message="ERROR: There is a problem with the incoming instance structure";        stopWithErrorMessage(message,ex);        return;      }    }    String buffSize=m_bufferSize;    try {      buffSize=m_env.substitute(buffSize);      m_bufferSizeI=Integer.parseInt(buffSize);    } catch (    Exception ex) {      ex.printStackTrace();    }    m_incrementalBuffer=new ArrayList<InstanceHolder>(m_bufferSizeI);    m_bufferFiles=new ArrayList<File>();    m_streamCounter=0;    return;  }  m_busy=true;  if (e.getInstance() != null) {    if (m_streamCounter == 0) {      if (m_log != null) {        m_log.statusMessage(statusMessagePrefix() + "Starting streaming sort...");        m_log.logMessage("[Sorter] " + statusMessagePrefix() + " Using streaming buffer size: "+ m_bufferSizeI);      }    }    InstanceHolder tempH=new InstanceHolder();    tempH.m_instance=e.getInstance();    tempH.m_fileNumber=-1;    if (m_stringAttIndexes != null) {      copyStringAttVals(tempH);    }    m_incrementalBuffer.add(tempH);    m_streamCounter++;  }  if (e.getInstance() == null || e.getStatus() == InstanceEvent.BATCH_FINISHED) {    emitBufferedInstances();    return;  } else   if (m_incrementalBuffer.size() == m_bufferSizeI) {    try {      sortBuffer(true);    } catch (    Exception ex) {      String msg=statusMessagePrefix() + "ERROR: unable to write to temp file.";      stopWithErrorMessage(msg,ex);      m_busy=false;      return;    }  }  m_busy=false;}  }
class C{  boolean sameInputMethod(InputMethodLocator other){  if (other == this) {    return true;  }  if (other == null) {    return false;  }  if (!descriptor.getClass().equals(other.descriptor.getClass())) {    return false;  }  if (loader == null && other.loader != null || loader != null && !loader.equals(other.loader)) {    return false;  }  return true;}  }
class C{  public void mark(long n){  tickIfNecessary();  count.addAndGet(n);  m1Rate.update(n);  m5Rate.update(n);  m15Rate.update(n);}  }
class C{  public static StringBuilder prefix(StringBuilder query){  return query.append("PREFIX rdfs: <").append(NAMESPACE).append(">\n");}  }
class C{  public AbstractResource(String mimetype){  this(mimetype,System.currentTimeMillis());}  }
class C{  public void incrementResponseCount(){  responseCount++;  incrementCommentCount();}  }
class C{  public ConnectionTcp findConnectionByThreadId(long threadId){  for (  PortTcp listener : getPorts()) {    ConnectionTcp conn=listener.findConnectionByThreadId(threadId);    if (conn != null)     return conn;  }  return null;}  }
class C{  public void checkHeaders() throws ParseException {  if (getCSeq() == null) {    throw new ParseException(CSeq.NAME + " Is missing ",0);  }  if (getTo() == null) {    throw new ParseException(To.NAME + " Is missing ",0);  }  if (getFrom() == null) {    throw new ParseException(From.NAME + " Is missing ",0);  }  if (getViaHeaders() == null) {    throw new ParseException(Via.NAME + " Is missing ",0);  }  if (getCallId() == null) {    throw new ParseException(CallID.NAME + " Is missing ",0);  }  if (getStatusCode() > 699) {    throw new ParseException("Unknown error code!" + getStatusCode(),0);  }}  }
class C{  public ValueSequence(int length){  this.dataPoints=new float[length];  for (int i=0; i < length; i++) {    this.dataPoints[i]=0.0f;  }}  }
class C{  public static void writeMatrix(final String[][] data,final File theFile){  FileOutputStream f=null;  try {    f=new FileOutputStream(theFile);  } catch (  Exception e) {    System.out.println("Could not open file stream: " + e.toString());  }  if (f == null) {    return;  }  CSVPrinter thePrinter=new CSVPrinter(f);  thePrinter.printlnComment("");  thePrinter.printlnComment("File: " + theFile.getName());  thePrinter.printlnComment("");  thePrinter.println();  thePrinter.println(data);  thePrinter.println();}  }
class C{  public VisualizationTask(String name,VisualizerContext context,Object result,Relation<?> relation,VisFactory factory){  super();  this.name=name;  this.context=context;  this.result=result;  this.relation=relation;  this.factory=factory;}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,String dhcpClientName,Collection<AttachmentPoint> oldAPs,Collection<AttachmentPoint> attachmentPoints,Collection<Entity> entities,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.dhcpClientName=dhcpClientName;  this.entities=entities.toArray(new Entity[entities.size()]);  this.oldAPs=null;  this.attachmentPoints=null;  if (oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(oldAPs);  }  if (attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(attachmentPoints);  }  this.macAddressString=HexString.toHexString(this.entities[0].getMacAddress(),6);  this.entityClass=entityClass;  Arrays.sort(this.entities);  vlanIds=computeVlandIds();}  }
class C{  public void buildComponentAndInject(FragmentNavigationDemoApplication app){  graph=DaggerMainComponent.Initializer.init(app);  graph.inject(app);}  }
class C{  @Override public RankedPath rankPath(MovePath path,IGame game,int maxRange,double fallTolerance,int distanceHome,List<Entity> enemies,Coords friendsCoords){  final String METHOD_NAME="rankPath(MovePath, IGame, Targetable, int, double, int, int, List<Entity>, Coords)";  getOwner().methodBegin(getClass(),METHOD_NAME);  Entity movingUnit=path.getEntity();  StringBuilder formula=new StringBuilder("Calculation: {");  try {    if (movingUnit instanceof Aero || movingUnit instanceof VTOL) {      boolean isVTOL=(movingUnit instanceof VTOL);      boolean isSpheroid=isVTOL ? false : ((Aero)movingUnit).isSpheroid();      RankedPath aeroRankedPath=doAeroSpecificRanking(path,isVTOL,isSpheroid);      if (aeroRankedPath != null) {        return aeroRankedPath;      }    }    MovePath pathCopy=path.clone();    double successProbability=getMovePathSuccessProbability(pathCopy,formula);    double utility=-calculateFallMod(successProbability,formula);    double maximumDamageDone=0;    double maximumPhysicalDamage=0;    double expectedDamageTaken=checkPathForHazards(pathCopy,movingUnit,game);    boolean extremeRange=game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_RANGE);    boolean losRange=game.getOptions().booleanOption(OptionsConstants.AC_TAC_OPS_LOS_RANGE);    for (    Entity enemy : enemies) {      if (enemy instanceof MechWarrior) {        continue;      }      if (enemy.isOffBoard() || (enemy.getPosition() == null) || !game.getBoard().contains(enemy.getPosition())) {        continue;      }      if (getOwner().getHonorUtil().isEnemyBroken(enemy.getId(),enemy.getOwnerId(),getOwner().getForcedWithdrawal())) {        continue;      }      EntityEvaluationResponse eval;      if ((!enemy.isSelectableThisTurn()) || enemy.isImmobile() || (enemy instanceof Aero)) {        eval=evaluateMovedEnemy(enemy,pathCopy,game);      } else {        eval=evaluateUnmovedEnemy(enemy,path,extremeRange,losRange);      }      if (maximumDamageDone < eval.getMyEstimatedDamage()) {        maximumDamageDone=eval.getMyEstimatedDamage();      }      if (maximumPhysicalDamage < eval.getMyEstimatedPhysicalDamage()) {        maximumPhysicalDamage=eval.getMyEstimatedPhysicalDamage();      }      expectedDamageTaken+=eval.getEstimatedEnemyDamage();    }    for (int i=0; i < getOwner().getFireControl().getAdditionalTargets().size(); i++) {      Targetable target=getOwner().getFireControl().getAdditionalTargets().get(i);      if (target.isOffBoard() || (target.getPosition() == null) || !game.getBoard().contains(target.getPosition())) {        continue;      }      FiringPlan myFiringPlan=fireControl.guessBestFiringPlanWithTwists(path.getEntity(),new EntityState(path),target,null,game);      double myDamagePotential=myFiringPlan.getUtility();      if (myDamagePotential > maximumDamageDone) {        maximumDamageDone=myDamagePotential;      }      if (path.getEntity() instanceof Mech) {        PhysicalInfo myKick=new PhysicalInfo(path.getEntity(),new EntityState(path),target,null,PhysicalAttackType.RIGHT_KICK,game,getOwner(),true);        double expectedKickDamage=myKick.getExpectedDamageOnHit() * myKick.getProbabilityToHit();        if (expectedKickDamage > maximumPhysicalDamage) {          maximumPhysicalDamage=expectedKickDamage;        }      }    }    if (game.getOptions().booleanOption("no_clan_physical") && path.getEntity().isClan()) {      maximumPhysicalDamage=0;    }    maximumDamageDone+=maximumPhysicalDamage;    double braveryValue=getOwner().getBehaviorSettings().getBraveryValue();    double braveryMod=successProbability * ((maximumDamageDone * braveryValue) - expectedDamageTaken);    formula.append(" + braveryMod [").append(LOG_DECIMAL.format(braveryMod)).append(" = ").append(LOG_PERCENT.format(successProbability)).append(" * ((").append(LOG_DECIMAL.format(maximumDamageDone)).append(" * ").append(LOG_DECIMAL.format(braveryValue)).append(") - ").append(LOG_DECIMAL.format(expectedDamageTaken)).append("]");    utility+=braveryMod;    if (path.getEntity() instanceof Aero) {    } else {      utility-=calculateAggreesionMod(movingUnit,pathCopy,game,formula);      utility-=calculateHerdingMod(friendsCoords,pathCopy,formula);    }    double facingMod=calculateFacingMod(movingUnit,game,pathCopy,formula);    if (facingMod == -10000) {      return new RankedPath(facingMod,pathCopy,formula.toString());    }    utility-=facingMod;    utility-=calculateSelfPreservationMod(movingUnit,pathCopy,game,formula);    return new RankedPath(utility,pathCopy,formula.toString());  }  finally {    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public void benchHasParentSingleTerm(){  QueryBuilder lookupQuery;  TermsByQueryRequestBuilder stringFilter=this.newTermsByQueryRequestBuilder();  stringFilter.setIndices(PARENT_INDEX).setTypes(PARENT_TYPE).setField("id").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  TermsByQueryRequestBuilder longFilter=this.newTermsByQueryRequestBuilder();  longFilter.setIndices(PARENT_INDEX).setTypes(PARENT_TYPE).setField("num").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  long tookString=0;  long tookLong=0;  long expected=1;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS PARENT SINGLE TERM ====");  for (int i=0; i < NUM_QUERIES; i++) {    lookupQuery=boolQuery().filter(termQuery("name","test" + (random.nextInt(NUM_PARENTS) + 1)));    stringFilter.setQuery(lookupQuery);    longFilter.setQuery(lookupQuery);    tookString+=runQuery("string",i,expected,stringFilter);    tookLong+=runQuery("long",i,expected,longFilter);  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long: " + (tookLong / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  public static void updateCategory(Context context,Category category){  if (mCategories != null && mCategories.contains(category)) {    final int location=mCategories.indexOf(category);    mCategories.remove(location);    mCategories.add(location,category);  }  SQLiteDatabase writableDatabase=getWritableDatabase(context);  ContentValues categoryValues=createContentValuesFor(category);  writableDatabase.update(CategoryTable.NAME,categoryValues,CategoryTable.COLUMN_ID + "=?",new String[]{category.getId()});  final List<Quiz> quizzes=category.getQuizzes();  updateQuizzes(writableDatabase,quizzes);}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  public static byte[][] EVP_BytesToKey(int key_len,int iv_len,MessageDigest md,byte[] salt,byte[] data,int count){  byte[][] both=new byte[2][];  byte[] key=new byte[key_len];  int key_ix=0;  byte[] iv=new byte[iv_len];  int iv_ix=0;  both[0]=key;  both[1]=iv;  byte[] md_buf=null;  int nkey=key_len;  int niv=iv_len;  int i=0;  if (data == null) {    return both;  }  int addmd=0;  for (; ; ) {    md.reset();    if (addmd++ > 0) {      md.update(md_buf);    }    md.update(data);    if (null != salt) {      md.update(salt,0,8);    }    md_buf=md.digest();    for (i=1; i < count; i++) {      md.reset();      md.update(md_buf);      md_buf=md.digest();    }    i=0;    if (nkey > 0) {      for (; ; ) {        if (nkey == 0)         break;        if (i == md_buf.length)         break;        key[key_ix++]=md_buf[i];        nkey--;        i++;      }    }    if (niv > 0 && i != md_buf.length) {      for (; ; ) {        if (niv == 0)         break;        if (i == md_buf.length)         break;        iv[iv_ix++]=md_buf[i];        niv--;        i++;      }    }    if (nkey == 0 && niv == 0) {      break;    }  }  for (i=0; i < md_buf.length; i++) {    md_buf[i]=0;  }  return both;}  }
class C{  @Override public String toString(){  return label;}  }
class C{  public synchronized void add(Object listener){  if (listener == null)   throw new IllegalArgumentException();  final int oldSize=listeners.length;  for (int i=0; i < oldSize; ++i) {    Object listener2=listeners[i];    if (identity ? listener == listener2 : listener.equals(listener2))     return;  }  Object[] newListeners=new Object[oldSize + 1];  System.arraycopy(listeners,0,newListeners,0,oldSize);  newListeners[oldSize]=listener;  this.listeners=newListeners;}  }
class C{  public void fireConnectionClosed(){  ConnectionEvent event=new ConnectionEvent(this);  CopyOnWriteArrayList<ConnectionEventListener> copyListeners=new CopyOnWriteArrayList<ConnectionEventListener>(connectionEventListeners);  for (  ConnectionEventListener listener : copyListeners) {    listener.connectionClosed(event);  }}  }
class C{  public static void establecerBotones(PrestamoVO prestamo,AppUser appUser,HttpServletRequest request,Collection detallesPrestamos){  boolean conPermisosGestionPrestamos=isConPermisosGestionPrestamos(appUser,prestamo);  boolean conPermisosEntregaUdocs=isConPermisosGestionEntregaUdocs(appUser,prestamo);  if (prestamo.isAbierto() && detallesPrestamos != null && !detallesPrestamos.isEmpty() && appUser.getId().equals(prestamo.getIdusrgestor())) {    request.setAttribute(PrestamosConstants.VER_BOTON_ENVIAR_SOLICITAR,new Boolean(true));    request.setAttribute(PrestamosConstants.VER_BOTON_VER_DISPONIBILIDAD,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_ENVIAR_SOLICITAR,new Boolean(false));  }  if (prestamo.isSolicitado() && conPermisosGestionPrestamos) {    if (detallesPrestamos != null && !detallesPrestamos.isEmpty()) {      Iterator todosDetalles=detallesPrestamos.iterator();      boolean todostratados=true;      while (todostratados && todosDetalles.hasNext())       todostratados=((DetallePrestamoVO)todosDetalles.next()).getEstado() != PrestamosConstants.ESTADO_SOLICITUD_PENDIENTE;      request.setAttribute(PrestamosConstants.VER_BOTON_ENVIAR_DENEGAR_AUTORIZAR,new Boolean(todostratados));      request.setAttribute(PrestamosConstants.VER_BOTON_VER_DISPONIBILIDAD,new Boolean(true));    }  }  if (prestamo.isAutorizado() && conPermisosEntregaUdocs) {    request.setAttribute(PrestamosConstants.VER_BOTON_ENTREGAR,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_ENTREGAR,new Boolean(false));  }  if (ConfigConstants.getInstance().getMostrarEtiquetasPrestamo()) {    if ((appUser.hasPermission(AppPermissions.ENTREGA_UNIDADES_DOCUMENTALES) || appUser.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA)) && (prestamo.getEstado() == PrestamosConstants.ESTADO_PRESTAMO_ENTREGADO && prestamo.getNumreclamaciones() == 0)) {      request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_ETIQUETAS,new Boolean(true));    }  }  if (prestamo.isEntregado() && prestamo.isNoReclamado() && conPermisosEntregaUdocs) {    request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_SALIDA,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_SALIDA,new Boolean(false));  }  if (prestamo.isDevueltoCompletoIncompleto() && conPermisosEntregaUdocs) {    request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_ENTRADA,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_ENTRADA,new Boolean(false));  }  if (prestamo.isNoDevuelto() && prestamo.isConReclamaciones() && conPermisosGestionPrestamos) {    if (prestamo.isReclamadoUnaVez())     request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_RECLAMACION_1,new Boolean(true)); else     request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_RECLAMACION_2,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_IMPRIMIR_RECLAMACION_2,new Boolean(false));  }  if (prestamo.isAbierto() && appUser.getId().equals(prestamo.getIdusrgestor())) {    request.setAttribute(PrestamosConstants.VER_BOTON_EDITAR,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_EDITAR,new Boolean(false));    if (appUser.isUsuarioArchivo()) {      request.setAttribute(PrestamosConstants.PERMITIR_EDITAR_OBSERVACIONES,new Boolean(true));    }  }  if ((prestamo.isAbierto() || prestamo.isReservado()) && appUser.getId().equals(prestamo.getIdusrgestor())) {    request.setAttribute(PrestamosConstants.VER_BOTON_ELIMINAR,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_ELIMINAR,new Boolean(false));  }  if (prestamo.isAbierto() && appUser.getId().equals(prestamo.getIdusrgestor())) {    request.setAttribute(PrestamosConstants.VER_BOTON_ANADIR_DETALLE,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_ANADIR_DETALLE,new Boolean(false));  }  if (prestamo.isAbierto() && (detallesPrestamos != null && !detallesPrestamos.isEmpty()) && appUser.getId().equals(prestamo.getIdusrgestor())) {    request.setAttribute(PrestamosConstants.VER_BOTON_ELIMINAR_DETALLE,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_ELIMINAR_DETALLE,new Boolean(false));  }  if (prestamo.isSolicitado() && conPermisosGestionPrestamos) {    request.setAttribute(PrestamosConstants.VER_BOTON_AUTORIZAR_DETALLE,new Boolean(true));    request.setAttribute(PrestamosConstants.VER_BOTON_DENEGAR_DETALLE,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_AUTORIZAR_DETALLE,new Boolean(false));    request.setAttribute(PrestamosConstants.VER_BOTON_DENEGAR_DETALLE,new Boolean(false));  }  if (prestamo.isNoDevuelto() && conPermisosGestionPrestamos) {    request.setAttribute(PrestamosConstants.VER_BOTON_DEVOLVER,new Boolean(true));  } else   request.setAttribute(PrestamosConstants.VER_BOTON_DEVOLVER,new Boolean(false));  if (appUser.isUsuarioArchivo() || (prestamo.isAbierto() || prestamo.isSolicitado()) && appUser.getId().equals(prestamo.getIdusrgestor())) {    request.setAttribute(PrestamosConstants.VER_BOTON_MODIFICAR_COLUMNA_OBSERVACIONES,new Boolean(true));  } else   request.setAttribute(PrestamosConstants.VER_BOTON_MODIFICAR_COLUMNA_OBSERVACIONES,new Boolean(false));  if ((prestamo.isAbierto() || prestamo.isSolicitado()) && appUser.getId().equals(prestamo.getIdusrgestor())) {    request.setAttribute(PrestamosConstants.VER_BOTON_MODIFICAR_COLUMNA_EXPEDIENTEFS,new Boolean(true));  } else {    request.setAttribute(PrestamosConstants.VER_BOTON_MODIFICAR_COLUMNA_EXPEDIENTEFS,new Boolean(false));  }}  }
class C{  private void checkFrequencyInSettings(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_recording));  assertTrue(EndToEndTestUtils.SOLO.searchText(trackListActivity.getString(R.string.menu_voice_frequency),1,true,true));  assertTrue(EndToEndTestUtils.SOLO.searchText(trackListActivity.getString(R.string.menu_split_frequency),1,true,true));  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();}  }
class C{  @Override public void onReceive(Context context,Intent intent){  new WeatherTimeoutCache(context).removeExpiredWeatherData();}  }
class C{  public void addLabel(Label label){  getLabels().add(label);}  }
class C{  @SuppressWarnings("unchecked") static final <K,V>HashEntry<K,V> entryAt(HashEntry<K,V>[] tab,int i){  return (tab == null) ? null : (HashEntry<K,V>)UNSAFE.getObjectVolatile(tab,((long)i << TSHIFT) + TBASE);}  }
class C{  private void decreaseSize(int removed){  end-=removed;}  }
class C{  public Vertex createQuestion(String text,Primitive primitive,Network network){  Vertex meaning=network.createVertex(primitive);  meaning.setName(text);  meaning.addRelationship(Primitive.INSTANTIATION,Primitive.QUESTION);  Vertex word=createWord(text,meaning,network,Primitive.QUESTION);  return word;}  }
class C{  public void engineStore(OutputStream stream,char[] password) throws IOException, NoSuchAlgorithmException, CertificateException {synchronized (entries) {    if (password == null) {      throw new IllegalArgumentException("password can't be null");    }    byte[] encoded;    MessageDigest md=getPreKeyedHash(password);    DataOutputStream dos=new DataOutputStream(new DigestOutputStream(stream,md));    ObjectOutputStream oos=null;    try {      dos.writeInt(JCEKS_MAGIC);      dos.writeInt(VERSION_2);      dos.writeInt(entries.size());      Enumeration<String> e=entries.keys();      while (e.hasMoreElements()) {        String alias=e.nextElement();        Object entry=entries.get(alias);        if (entry instanceof PrivateKeyEntry) {          PrivateKeyEntry pentry=(PrivateKeyEntry)entry;          dos.writeInt(1);          dos.writeUTF(alias);          dos.writeLong(pentry.date.getTime());          dos.writeInt(pentry.protectedKey.length);          dos.write(pentry.protectedKey);          int chainLen;          if (pentry.chain == null) {            chainLen=0;          } else {            chainLen=pentry.chain.length;          }          dos.writeInt(chainLen);          for (int i=0; i < chainLen; i++) {            encoded=pentry.chain[i].getEncoded();            dos.writeUTF(pentry.chain[i].getType());            dos.writeInt(encoded.length);            dos.write(encoded);          }        } else         if (entry instanceof TrustedCertEntry) {          dos.writeInt(2);          dos.writeUTF(alias);          dos.writeLong(((TrustedCertEntry)entry).date.getTime());          encoded=((TrustedCertEntry)entry).cert.getEncoded();          dos.writeUTF(((TrustedCertEntry)entry).cert.getType());          dos.writeInt(encoded.length);          dos.write(encoded);        } else {          dos.writeInt(3);          dos.writeUTF(alias);          dos.writeLong(((SecretKeyEntry)entry).date.getTime());          oos=new ObjectOutputStream(dos);          oos.writeObject(((SecretKeyEntry)entry).sealedKey);        }      }      byte digest[]=md.digest();      dos.write(digest);      dos.flush();    }  finally {      if (oos != null) {        oos.close();      } else {        dos.close();      }    }  }}  }
class C{  public void componentShown(ComponentEvent e){}  }
class C{  private void loadDynamicProperties() throws ReplicatorException {  if (dynamicPropertiesFile.exists()) {    logger.debug("Reading dynamic properties file: " + dynamicPropertiesFile.getAbsolutePath());    dynamicProperties=loadProperties(dynamicPropertiesFile);  } else   dynamicProperties=new TungstenProperties();}  }
class C{  public MultiplexingSocket(String host,int port,InetAddress localAddr,int localPort){  this((Socket)null);}  }
class C{  public char[][] toArray(){  char[][] result=new char[max + 1][];  for (  Map.Entry<Character,String> entry : map.entrySet()) {    result[entry.getKey()]=entry.getValue().toCharArray();  }  return result;}  }
class C{  public ShadowRenderer(){  this(5,0.5f,Color.BLACK);}  }
class C{  public void header(int version,long length,int twipsWidth,int twipsHeight,int frameRate,int frameCount) throws IOException {  this.version=version;  tags.header(version,-1,twipsWidth,twipsHeight,frameRate,frameCount);}  }
class C{  void edit(){  IStructuredSelection selection=(IStructuredSelection)fTableViewer.getSelection();  String location=selection.getFirstElement().toString();  File file=new File(location);  String newloc=null;  if (file.isDirectory()) {    newloc=getDirectory(location);  }  if (newloc != null) {    fLocationList.remove(location);    addLocation(newloc);  }}  }
class C{  protected void generateOpenNetworkConfig(){  if (security != SECURITY_NONE)   throw new IllegalStateException();  if (mConfig != null)   return;  mConfig=new WifiConfiguration();  mConfig.SSID=AccessPoint.convertToQuotedString(ssid);  mConfig.allowedKeyManagement.set(KeyMgmt.NONE);}  }
class C{  private void loadPaymentRuleInfo(){  if (fPaymentRule.getSelectedItem() == null)   return;  ValueNamePair pp=fPaymentRule.getSelectedItem().toValueNamePair();  if (pp == null)   return;  String PaymentRule=pp.getValue();  log.info("PaymentRule=" + PaymentRule);  fNoPayments.setText(" ");  int HR_PaySelection_ID=fPaySelect.getSelectedItem().toKeyNamePair().getKey();  String msg=loadPaymentRuleInfo(HR_PaySelection_ID,PaymentRule);  if (noPayments != null)   fNoPayments.setText(noPayments);  bProcess.setEnabled(PaymentRule.equals("T"));  if (documentNo != null)   fDocumentNo.setValue(documentNo);  if (documentNo != null) {    MHRPaySelection hrps=new MHRPaySelection(Env.getCtx(),HR_PaySelection_ID,null);    if (hrps.get_ValueAsInt("CheckNo") > 0)     fDocumentNo.setValue(hrps.get_ValueAsInt("CheckNo")); else     fDocumentNo.setValue(documentNo);  }  if (msg != null && msg.length() > 0)   FDialog.error(m_WindowNo,form,msg);}  }
class C{  protected void checkParameters() throws BuildException {  if (this.moduleSet.getModules().isEmpty()) {    throw new BuildException("You must specify a <module> or <moduleset>");  }}  }
class C{  private CRC detectAndCorrect(int start,int end){  BitSet original=mMessage.get(start,end);  CRC retVal=CRCFleetsync.check(original);  if (retVal == CRC.FAILED_PARITY) {    int[] errorBitPositions=CRCFleetsync.findBitErrors(original);    if (errorBitPositions != null) {      for (      int errorBitPosition : errorBitPositions) {        mMessage.flip(start + errorBitPosition);      }      retVal=CRC.CORRECTED;    }  }  return retVal;}  }
class C{  public Builder lineNumber(final int lineNumber){  this.lineNumber=lineNumber;  return this;}  }
class C{  @Override public void afterStatement(final Statement statement,final Scope scope,final Throwable exception){  if (statement instanceof AssignmentStatement) {    final AssignmentStatement assign=(AssignmentStatement)statement;    final VariableReference left=assign.getReturnValue();    if (left instanceof FieldReference) {      final FieldReference fieldRef=(FieldReference)left;      final GenericField field=fieldRef.getField();      FieldRegistry.notifyModification(field.isStatic() ? null : scope.getObject(fieldRef.getSource()),this.captureId,Type.getInternalName(field.getDeclaringClass()),field.getName(),Type.getDescriptor(field.getField().getType()));      this.captureId-=2;    }  }}  }
class C{  private void fineLocationPermissionGranted(){  UtilityService.addGeofences(this);  UtilityService.requestLocation(this);}  }
class C{  private void checkForFragmentID(Attributes attributes){  if (!m_shouldProcess) {    if ((null != attributes) && (null != m_fragmentIDString)) {      int n=attributes.getLength();      for (int i=0; i < n; i++) {        String name=attributes.getQName(i);        if (name.equals(Constants.ATTRNAME_ID)) {          String val=attributes.getValue(i);          if (val.equalsIgnoreCase(m_fragmentIDString)) {            m_shouldProcess=true;            m_fragmentID=m_elementID;          }        }      }    }  }}  }
class C{  public Result(PrincipalId principalId,Date authnInstant,AuthnMethod authnMethod){  this(principalId,authnInstant,authnMethod,null);}  }
class C{  public boolean hasComments(){  return hasExtension(Comments.class);}  }
class C{  public static MySQLConnection forTestDatabase(String databaseName,String username,String password){  return new MySQLConnection(JdbcConfiguration.copy(Configuration.fromSystemProperties("database.")).withDatabase(databaseName).withUser(username).withPassword(password).with("useSSL",false).build());}  }
class C{  private static Map<String,String> buildStationInfo(){  Map<String,String> stations=new Hashtable<String,String>();  stations.put("1108413","SDRoute1");  stations.put("1108699","SDRoute2");  stations.put("1108702","SDRoute2");  return stations;}  }
class C{  public boolean useCandidateReceived(){  return useCandidate;}  }
class C{  public static <K,V extends Comparable<V>>List<K> sortMapAndLimitToList(Map<K,V> map,int k,boolean keepHighest){  List<Entry<K,V>> sorted=sortByValue(map);  if (keepHighest)   Collections.reverse(sorted);  List<K> res=new ArrayList<>();  int count=0;  for (  Map.Entry<K,V> e : sorted) {    if (count >= k)     break; else     res.add(e.getKey());    count++;  }  return res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.727 -0500",hash_original_method="5C96E87F662C45E10B5AFAE4378612EB",hash_generated_method="5958670D7599BB8FAB22387E6D0811E7") protected String encodeBody(){  StringBuffer encoding=new StringBuffer();  if (languageRange != null) {    encoding.append(languageRange);  }  if (!parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding.toString();}  }
class C{  @SuppressWarnings("unchecked") @Override protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs,Object managedData) throws SolrException {  if (managedData == null) {    return;  }  List<Object> managedList=(List<Object>)managedData;  for (  Object next : managedList) {    Map<String,String> info=(Map<String,String>)next;    String implClass=info.get("class");    String resourceId=info.get("resourceId");    Class<? extends ManagedResource> clazz=solrResourceLoader.findClass(implClass,ManagedResource.class);    ManagedResourceRegistration existingReg=restManager.registry.registered.get(resourceId);    if (existingReg == null) {      restManager.registry.registerManagedResource(resourceId,clazz,null);    }  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", namespace: ");  result.append(namespace);  result.append(", version: ");  result.append(version);  result.append(", description: ");  result.append(description);  result.append(", displayname: ");  result.append(displayname);  result.append(", category: ");  result.append(category);  result.append(')');  return result.toString();}  }
class C{  private static void mat4_util_load_rotate(float[] outMatrix,float eulerRadiansX,float eulerRadiansY,float eulerRadiansZ){  float cos_rx=(float)Math.cos(eulerRadiansX);  float cos_ry=(float)Math.cos(eulerRadiansY);  float cos_rz=(float)Math.cos(eulerRadiansZ);  float sin_rx=(float)Math.sin(eulerRadiansX);  float sin_ry=(float)Math.sin(eulerRadiansY);  float sin_rz=(float)Math.sin(eulerRadiansZ);  outMatrix[0]=cos_rz * cos_ry;  outMatrix[1]=sin_rz * cos_ry;  outMatrix[2]=-sin_ry;  outMatrix[3]=0.0f;  outMatrix[4]=-sin_rz * cos_rx + cos_rz * sin_ry * sin_rx;  outMatrix[5]=cos_rz * cos_rx + sin_rz * sin_ry * sin_rx;  outMatrix[6]=cos_ry * sin_rx;  outMatrix[7]=0.0f;  outMatrix[8]=sin_rz * sin_rx + cos_rz * sin_ry * cos_rx;  outMatrix[9]=-cos_rz * sin_rx + sin_rz * sin_ry * cos_rx;  outMatrix[10]=cos_ry * cos_rx;  outMatrix[11]=0.0f;  outMatrix[12]=0.0f;  outMatrix[13]=0.0f;  outMatrix[14]=0.0f;  outMatrix[15]=1.0f;}  }
class C{  private void writeLiveData(){  lock.lock(false);  try {    this.ifLiveRecordCount=0;    this.ifTotalRecordCount=0;    writeDiskStoreId();    saveGemfireVersion();    saveInstantiators();    saveDataSerializers();    saveCrfIds();    saveDrfIds();    saveKrfIds();    for (    DiskRegionView drv : this.drMap.values()) {      writeLiveData(drv);    }    for (    DiskRegionView drv : this.parent.getDiskRegions()) {      writeLiveData(drv);    }    savePRConfigs();    saveCanonicalIds();    saveRevokedMembers();    if (logger.isDebugEnabled()) {      logger.debug("After compacting init file lrc={} trc={}",this.ifLiveRecordCount,this.ifTotalRecordCount);    }  }  finally {    lock.unlock();  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);}  }
class C{  public static void cbc_encrypt(byte[] input,byte[] output,byte[] key,byte[] ivec,boolean encrypt) throws KrbCryptoException {  Cipher cipher=null;  try {    cipher=Cipher.getInstance("DES/CBC/NoPadding");  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException("JCE provider may not be installed. " + e.getMessage());    ke.initCause(e);    throw ke;  }  IvParameterSpec params=new IvParameterSpec(ivec);  SecretKeySpec skSpec=new SecretKeySpec(key,"DES");  try {    SecretKeyFactory skf=SecretKeyFactory.getInstance("DES");    SecretKey sk=(SecretKey)skSpec;    if (encrypt)     cipher.init(Cipher.ENCRYPT_MODE,sk,params); else     cipher.init(Cipher.DECRYPT_MODE,sk,params);    byte[] result;    result=cipher.doFinal(input);    System.arraycopy(result,0,output,0,result.length);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:52.577 -0400",hash_original_method="FF2C15D5C77CB986FFC483C5693D319F",hash_generated_method="8FC17E37CE7826FC731CFDA2E6F6822A") @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View v=super.newView(context,cursor,parent);  v.setTag(new ChildViewCache(v));  return v;}  }
class C{  public Map<String,ManagedObjectReference> inContainerByType(ManagedObjectReference folder,String morefType,RetrieveOptions retrieveOptions) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg {  init();  RetrieveResult rslts=containerViewByType(folder,morefType,retrieveOptions);  return toMap(rslts);}  }
class C{  public Preface(PrefaceBO prefaceBO,GenericPackage primaryPackage,ContentStorage contentStorage){  this.prefaceBO=prefaceBO;  this.primaryPackage=primaryPackage;  this.contentStorage=contentStorage;}  }
class C{  public void onBaudRateQueryResponse(OneSheeldDevice device,SupportedBaudRate supportedBaudRate){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.SWITCH_STATEMENT__EXPRESSION:    return basicSetExpression(null,msgs);case N4JSPackage.SWITCH_STATEMENT__CASES:  return ((InternalEList<?>)getCases()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void decreaseValue(final int value){  this.setSelection(this.getSelection() - value);}  }
class C{  public static Population readObjectives(BufferedReader reader) throws IOException {  Population population=new Population();  String line=null;  while ((line=reader.readLine()) != null) {    String[] tokens=line.trim().split("\\s+");    double[] values=new double[tokens.length];    for (int i=0; i < tokens.length; i++) {      values[i]=Double.parseDouble(tokens[i]);    }    population.add(new Solution(values));  }  return population;}  }
class C{  protected SortingFocusTraversalPolicy(){}  }
class C{  public Builder<T> ge(T value){  start=value;  excludeLower=false;  return this;}  }
class C{  public void addMsgWaiting(MwiType type,int count,MwiProfile profile,boolean storeMessage){  if (count > 255) {    count=255;  }  messages_.add(new MsgWaiting(type,count,profile,storeMessage));}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendLine=SerialUtilities.readShape(stream);}  }
class C{  private void handleNetworkChangeVideoPlayback(){  hideNetworkError();  try {    if (player != null) {      if (!curMessageTypes.contains(VideoNotPlayMessageType.IS_VIDEO_MESSAGE_DISPLAYED)) {        if ((!player.isPaused() && !player.isPlaying() && !player.isPlayingLocally()) || (player.isInError() || player.isReset())) {          showProgress();        }      }      if (player.isInError() || player.isReset()) {        player.restart(currentPosition);      }    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public void log(Level logLevel,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  @Override public void postInitialize(AbstractSession session) throws DescriptorException {  super.postInitialize(session);  if (getReferenceDescriptor() != null) {    getReferenceDescriptor().getCachePolicy().setCacheIsolation(this.descriptor.getCachePolicy().getCacheIsolation());    if (getDescriptor().getObjectChangePolicy().getClass().equals(DeferredChangeDetectionPolicy.class)) {      getReferenceDescriptor().setObjectChangePolicy(new DeferredChangeDetectionPolicy());    } else     if (getDescriptor().getObjectChangePolicy().getClass().equals(ObjectChangeTrackingPolicy.class) && getReferenceDescriptor().getObjectChangePolicy().getClass().equals(AttributeChangeTrackingPolicy.class)) {      getReferenceDescriptor().setObjectChangePolicy(new ObjectChangeTrackingPolicy());    }    if (getReferenceDescriptor().isAggregateDescriptor()) {      getReferenceDescriptor().getObjectBuilder().setPrimaryKeyClassifications(this.getDescriptor().getObjectBuilder().getPrimaryKeyClassifications());      getReferenceDescriptor().setHasSimplePrimaryKey(this.getDescriptor().hasSimplePrimaryKey());    }    getReferenceDescriptor().postInitialize(session);  }}  }
class C{  public void lighterColor(int factor){  int color=getColor();  int r=color >> 16 & 0xff;  int g=color >> 8 & 0xff;  int b=color & 0xff;  r=Math.min(0xff,r + factor);  g=Math.min(0xff,g + factor);  b=Math.min(0xff,b + factor);  setColor(((r << 16) & 0xff0000) | ((g << 8) & 0xff00) | (b & 0xff));}  }
class C{  public void handleDOMAttrModifiedEvent(MutationEvent evt){}  }
class C{  private MultiDocValues(){}  }
class C{  public ExecuteRequest(final int objectId,final int objectInstanceId,final int resourceId,final String parameters){  this(new LwM2mPath(objectId,objectInstanceId,resourceId),parameters);}  }
class C{  private View generateHierarchy(Context context){  Resources resources=getResources();  FrameLayout.LayoutParams params;  int fivePx=dpToPx(5,resources);  int tenPx=dpToPx(10,resources);  int twentyPx=dpToPx(20,resources);  TableLayout.LayoutParams tableLayoutParams=new TableLayout.LayoutParams(0,ViewGroup.LayoutParams.WRAP_CONTENT,1f);  tableLayoutParams.setMargins(0,0,fivePx,0);  LinearLayout seekWrapper;  FrameLayout root=new FrameLayout(context);  params=createLayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,dpToPx(300,resources));  root.setLayoutParams(params);  FrameLayout container=new FrameLayout(context);  params=createMatchParams();  params.setMargins(0,twentyPx,0,0);  container.setLayoutParams(params);  container.setBackgroundColor(Color.argb(100,0,0,0));  root.addView(container);  mSpringSelectorSpinner=new Spinner(context,Spinner.MODE_DIALOG);  params=createMatchWrapParams();  params.gravity=Gravity.TOP;  params.setMargins(tenPx,tenPx,tenPx,0);  mSpringSelectorSpinner.setLayoutParams(params);  container.addView(mSpringSelectorSpinner);  LinearLayout linearLayout=new LinearLayout(context);  params=createMatchWrapParams();  params.setMargins(0,0,0,dpToPx(80,resources));  params.gravity=Gravity.BOTTOM;  linearLayout.setLayoutParams(params);  linearLayout.setOrientation(LinearLayout.VERTICAL);  container.addView(linearLayout);  seekWrapper=new LinearLayout(context);  params=createMatchWrapParams();  params.setMargins(tenPx,tenPx,tenPx,twentyPx);  seekWrapper.setPadding(tenPx,tenPx,tenPx,tenPx);  seekWrapper.setLayoutParams(params);  seekWrapper.setOrientation(LinearLayout.HORIZONTAL);  linearLayout.addView(seekWrapper);  mTensionSeekBar=new SeekBar(context);  mTensionSeekBar.setLayoutParams(tableLayoutParams);  seekWrapper.addView(mTensionSeekBar);  mTensionLabel=new TextView(getContext());  mTensionLabel.setTextColor(mTextColor);  params=createLayoutParams(dpToPx(50,resources),ViewGroup.LayoutParams.MATCH_PARENT);  mTensionLabel.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);  mTensionLabel.setLayoutParams(params);  mTensionLabel.setMaxLines(1);  seekWrapper.addView(mTensionLabel);  seekWrapper=new LinearLayout(context);  params=createMatchWrapParams();  params.setMargins(tenPx,tenPx,tenPx,twentyPx);  seekWrapper.setPadding(tenPx,tenPx,tenPx,tenPx);  seekWrapper.setLayoutParams(params);  seekWrapper.setOrientation(LinearLayout.HORIZONTAL);  linearLayout.addView(seekWrapper);  mFrictionSeekBar=new SeekBar(context);  mFrictionSeekBar.setLayoutParams(tableLayoutParams);  seekWrapper.addView(mFrictionSeekBar);  mFrictionLabel=new TextView(getContext());  mFrictionLabel.setTextColor(mTextColor);  params=createLayoutParams(dpToPx(50,resources),ViewGroup.LayoutParams.MATCH_PARENT);  mFrictionLabel.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);  mFrictionLabel.setLayoutParams(params);  mFrictionLabel.setMaxLines(1);  seekWrapper.addView(mFrictionLabel);  View nub=new View(context);  params=createLayoutParams(dpToPx(60,resources),dpToPx(40,resources));  params.gravity=Gravity.TOP | Gravity.CENTER;  nub.setLayoutParams(params);  nub.setOnTouchListener(new OnNubTouchListener());  nub.setBackgroundColor(Color.argb(255,0,164,209));  root.addView(nub);  return root;}  }
class C{  protected void print(String str){  if (jta != null) {    jta.append(str);  }}  }
class C{  private synchronized void updateCachedTokenKeys(TokenKeysBundle bundle){  _cachedTokenKeysBundle=bundle;}  }
class C{  public Atan(){  super("atan",1);}  }
class C{  private static int length(double[] u,double[] v){  if (u.length != v.length) {    throw new IllegalArgumentException("vectors must have same length");  }  return u.length;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", simpleName: ");  result.append(simpleName);  result.append(')');  return result.toString();}  }
class C{  public static SequencesReader createMemorySequencesReader(final File dir,final boolean loadNames,boolean loadFullNames,LongRange region) throws IOException {  if (dir == null) {    return null;  }  final SequencesReader r=CompressedMemorySequencesReader.createSequencesReader(dir,loadNames,loadFullNames,region);  logSDF(r);  return r;}  }
class C{  @Beta public static String toString(byte x){  return toString(x,10);}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  private boolean testJDBC(String url,String uid,String pwd){  try {    @SuppressWarnings("unused") Connection conn=p_db.getDriverConnection(url,uid,pwd);  } catch (  Exception e) {    log.severe(e.toString());    return false;  }  return true;}  }
class C{  private OracleCollection openCollection(String collectionName,CollectionDescriptor options) throws OracleException {  if (collectionName == null) {    throw SODAUtils.makeException(SODAMessage.EX_ARG_CANNOT_BE_NULL,"collectionName");  }  OracleCollectionImpl coll=null;  if (localCollectionCache != null) {    coll=localCollectionCache.get(collectionName);  }  if (coll != null) {    if (options != null && !coll.matches(options)) {      throw SODAUtils.makeException(SODAMessage.EX_MISMATCHED_DESCRIPTORS);    }    return (coll);  }  CollectionDescriptor desc=getDescriptorFromCaches(collectionName);  if (desc == null) {    desc=loadCollection(collectionName);  }  boolean createFlag=false;  if (desc != null) {    if (options != null && !desc.matches(options)) {      throw SODAUtils.makeException(SODAMessage.EX_MISMATCHED_DESCRIPTORS);    }    createFlag=true;  }  if (createFlag) {    if (desc.dbObjectType == CollectionDescriptor.DBOBJECT_PACKAGE) {      throw new IllegalStateException();    } else {      coll=new TableCollectionImpl(this,collectionName,desc);    }    if (localCollectionCache != null) {      localCollectionCache.put(collectionName,coll);    }  }  return (coll);}  }
class C{  public boolean isLocal(){  return (serverIndex == null) || (serverIndex.getValue() == 0);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new TurkishAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public static boolean isAvailable(Context context){  final PackageManager pm=context.getPackageManager();  return checkAppSignature(pm,TWITTER_PACKAGE_NAME,TWITTER_SIGNATURE) || checkAppSignature(pm,DOGFOOD_PACKAGE_NAME,DOGFOOD_SIGNATURE);}  }
class C{  private void dynInit(){  Locale locale=Locale.getDefault();  Currency currency=Currency.getInstance(locale);  String sql="SELECT C_Currency_ID, Description, ISO_Code FROM C_Currency ORDER BY 2";  Statement stmt=null;  ResultSet rs=null;  try {    stmt=DB.createStatement();    rs=stmt.executeQuery(sql);    while (rs.next()) {      fCurrency.addItem(new KeyNamePair(rs.getInt(1),rs.getString(2)));      if (currency != null && currency.getCurrencyCode().equals(rs.getString(3)))       fCurrency.setSelectedIndex(fCurrency.getItemCount() - 1);    }  } catch (  SQLException e1) {    log.log(Level.SEVERE,"VSetup.dynInit -currency",e1);  } finally {    DB.close(rs,stmt);    rs=null;    stmt=null;  }  int C_Country_ID=0;  sql="SELECT C_Country_ID, Name, CountryCode FROM C_Country ORDER BY 2";  try {    stmt=DB.createStatement();    rs=stmt.executeQuery(sql);    while (rs.next()) {      fCountry.addItem(new KeyNamePair(rs.getInt(1),rs.getString(2)));      if (locale.getCountry().equals(rs.getString(3))) {        fCountry.setSelectedIndex(fCountry.getItemCount() - 1);        C_Country_ID=rs.getInt(1);      }    }  } catch (  SQLException e1) {    log.log(Level.SEVERE,"VSetup.dynInit -country",e1);  } finally {    DB.close(rs,stmt);    rs=null;    stmt=null;  }  sql="SELECT C_Region_ID, Name, C_Country_ID FROM C_Region ORDER BY C_Country_ID, Name";  boolean isSelected=false;  try {    fRegion.addItem(new KeyNamePair(0," "));    stmt=DB.createStatement();    rs=stmt.executeQuery(sql);    while (rs.next()) {      fRegion.addItem(new KeyNamePair(rs.getInt(1),rs.getString(2)));      if (!isSelected && rs.getInt(3) == C_Country_ID) {        fRegion.setSelectedIndex(fRegion.getItemCount() - 1);        isSelected=true;      }    }  } catch (  SQLException e1) {    log.log(Level.SEVERE,"VSetup.dynInit -region",e1);  } finally {    DB.close(rs,stmt);    rs=null;    stmt=null;  }  confirmPanel.addActionListener(this);  buttonLoadAcct.addActionListener(this);  confirmPanel.getOKButton().setEnabled(false);}  }
class C{  public synchronized void flush() throws IOException {  if (closed) {    return;  }  flushBuffer();  out.flush();  lastActivityTime=System.currentTimeMillis();}  }
class C{  public List(int rows,boolean multipleMode) throws HeadlessException {  GraphicsEnvironment.checkHeadless();  this.rows=(rows != 0) ? rows : DEFAULT_VISIBLE_ROWS;  this.multipleMode=multipleMode;}  }
class C{  public Maybe<Zipper<A>> maybeToPosition(int index){  Zipper<A> result=this;  while (index != result.position) {    if (result.position < index && !result.isEnd()) {      result=result.forwards();    } else     if (result.position > index && !result.isStart()) {      result=result.backwards();    } else {      return Maybe.Nothing();    }  }  return Maybe.Just(result);}  }
class C{  public void init() throws MailetException {  attributeName=getInitParameter(ATTRIBUTE_PARAMETER_NAME);  if (attributeName == null) {    throw new MailetException(ATTRIBUTE_PARAMETER_NAME + " is a mandatory parameter");  }  log("RecoverAttachment is initialised with attribute [" + attributeName + "]");}  }
class C{  public NamespacedProperties(String prefix,Properties props){  this(prefix,props,false);}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public SchemeRoot put(String scheme,SchemeRoot root){  return getUpdateMap().put(scheme,root);}  }
class C{  public boolean isAmount(){  Object oo=get_Value(COLUMNNAME_IsAmount);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isCompatible(ModuleInterface required){  if (!this.getId().equals(required.getId())) {    return false;  }  int[] t=this.versionParts(this.version);  int[] r=this.versionParts(required.version);  if (t[0] != r[0]) {    return false;  }  if (t[1] < r[1]) {    return false;  }  if (t[1] == r[1] && r[2] >= 0 && t[2] < r[2]) {    return false;  }  return true;}  }
class C{  private boolean indexIsInFieldList(FormIndex index){  int event=getEvent(index);  if (event == FormEntryController.EVENT_QUESTION) {    FormEntryCaption[] captions=getCaptionHierarchy(index);    if (captions.length < 2) {      return false;    }    FormEntryCaption grp=captions[captions.length - 2];    return groupIsFieldList(grp.getIndex());  } else   if (event == FormEntryController.EVENT_GROUP) {    return groupIsFieldList(index);  } else   if (event == FormEntryController.EVENT_REPEAT) {    return repeatIsFieldList(index);  } else {    return false;  }}  }
class C{  public String requestStatistics(){  sb.setLength(0);  makeStringBuffer(sb);  return sb.toString();}  }
class C{  public mxModelCodec(Object template,String[] exclude,String[] idrefs,Map<String,String> mapping){  super(template,exclude,idrefs,mapping);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.SegmentType buildSegment(UUID id,org.smpte_ra.schemas.st2067_2_2013.UserTextType annotationText){  org.smpte_ra.schemas.st2067_2_2013.SegmentType segment=new org.smpte_ra.schemas.st2067_2_2013.SegmentType();  segment.setId(UUIDHelper.fromUUID(uuid));  segment.setAnnotation(annotationText);  org.smpte_ra.schemas.st2067_2_2013.SegmentType.SequenceList sequenceList=new org.smpte_ra.schemas.st2067_2_2013.SegmentType.SequenceList();  segment.setSequenceList(sequenceList);  this.segments.add(segment);  return segment;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public void testDoublesCompare(){  BytesRef left=new BytesRef(new byte[Double.BYTES]);  BytesRef right=new BytesRef(new byte[Double.BYTES]);  for (int i=0; i < 10000; i++) {    double leftValue=Double.longBitsToDouble(TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE));    NumericUtils.longToSortableBytes(NumericUtils.doubleToSortableLong(leftValue),left.bytes,left.offset);    double rightValue=Double.longBitsToDouble(TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE));    NumericUtils.longToSortableBytes(NumericUtils.doubleToSortableLong(rightValue),right.bytes,right.offset);    assertEquals(Integer.signum(Double.compare(leftValue,rightValue)),Integer.signum(left.compareTo(right)));  }}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  protected void annotateClass(Class<?> cl) throws IOException {  writeLocation(java.rmi.server.RMIClassLoader.getClassAnnotation(cl));}  }
class C{  protected ShaderVar addConst(String name,float value){  return addConst(name,new RFloat(value));}  }
class C{  public Config loadConfig(final String configfile,final ConfigGroup... customGroups){  Config config;  if (configfile != null) {    config=ConfigUtils.loadConfig(configfile,customGroups);  } else {    config=ConfigUtils.createConfig(customGroups);  }  this.outputDirectory=getOutputDirectory();  config.controler().setOutputDirectory(this.outputDirectory);  return config;}  }
class C{  @Override public void executorLost(SchedulerDriver driver,Protos.ExecutorID executorId,Protos.SlaveID slaveId,int status){  System.out.println("Executor " + executorId.getValue() + " lost, status="+ status);}  }
class C{  public boolean isDelegation(){  return (type == DELEGATION);}  }
class C{  @Override public int hashCode(){  return opr.hashCode();}  }
class C{  public void urem(int size,Register dst,Register n,Register d){  super.udiv(size,dst,n,d);  super.msub(size,dst,dst,d,n);}  }
class C{  public static boolean demo3(Dproblem Prob){  Dcs A, C, W=null, WW, WT, E=null, W2;  int n, k, Li[], Lp[], Wi[], Wp[], p1, p2, p[]=null;  boolean ok;  double b[], x[], resid[], y[]=null, Lx[], Wx[], s, t, t1;  Dcss S=null;  Dcsn N=null;  if (Prob == null || Prob.sym == 0 || Prob.A.n == 0)   return (false);  A=Prob.A;  C=Prob.C;  b=Prob.b;  x=Prob.x;  resid=Prob.resid;  n=A.n;  if (Prob.sym == 0 || n == 0)   return (true);  rhs(x,b,n);  System.out.print("\nchol then update/downdate ");  print_order(1);  y=new double[n];  t=tic();  S=Dcs_schol.cs_schol(1,C);  System.out.print(String.format("\nsymbolic chol time %8.2f ms\n",toc(t)));  t=tic();  N=Dcs_chol.cs_chol(C,S);  System.out.print(String.format("numeric  chol time %8.2f ms\n",toc(t)));  if (S == null || N == null)   return (false);  t=tic();  Dcs_ipvec.cs_ipvec(S.pinv,b,y,n);  Dcs_lsolve.cs_lsolve(N.L,y);  Dcs_ltsolve.cs_ltsolve(N.L,y);  Dcs_pvec.cs_pvec(S.pinv,y,x,n);  System.out.print(String.format("solve    chol time %8.2f ms\n",toc(t)));  System.out.println("original: ");  print_resid(true,C,x,b,resid);  k=n / 2;  W=Dcs_util.cs_spalloc(n,1,n,true,false);  Lp=N.L.p;  Li=N.L.i;  Lx=N.L.x;  Wp=W.p;  Wi=W.i;  Wx=W.x;  Wp[0]=0;  p1=Lp[k];  Wp[1]=Lp[k + 1] - p1;  s=Lx[p1];  Random r=new Random(1);  for (; p1 < Lp[k + 1]; p1++) {    p2=p1 - Lp[k];    Wi[p2]=Li[p1];    Wx[p2]=s * r.nextDouble();  }  t=tic();  ok=Dcs_updown.cs_updown(N.L,+1,W,S.parent);  t1=toc(t);  System.out.print(String.format("update:   time: %8.2f ms\n",t1));  if (!ok)   return (false);  t=tic();  Dcs_ipvec.cs_ipvec(S.pinv,b,y,n);  Dcs_lsolve.cs_lsolve(N.L,y);  Dcs_ltsolve.cs_ltsolve(N.L,y);  Dcs_pvec.cs_pvec(S.pinv,y,x,n);  t=toc(t);  p=Dcs_pinv.cs_pinv(S.pinv,n);  W2=Dcs_permute.cs_permute(W,p,null,true);  WT=Dcs_transpose.cs_transpose(W2,true);  WW=Dcs_multiply.cs_multiply(W2,WT);  WT=null;  W2=null;  E=Dcs_add.cs_add(C,WW,1,1);  WW=null;  if (E == null || p == null)   return (false);  System.out.print(String.format("update:   time: %8.2f ms(incl solve) ",t1 + t));  print_resid(true,E,x,b,resid);  N=null;  t=tic();  N=Dcs_chol.cs_chol(E,S);  if (N == null)   return (false);  Dcs_ipvec.cs_ipvec(S.pinv,b,y,n);  Dcs_lsolve.cs_lsolve(N.L,y);  Dcs_ltsolve.cs_ltsolve(N.L,y);  Dcs_pvec.cs_pvec(S.pinv,y,x,n);  t=toc(t);  System.out.print(String.format("rechol:   time: %8.2f ms(incl solve) ",t));  print_resid(true,E,x,b,resid);  t=tic();  ok=Dcs_updown.cs_updown(N.L,-1,W,S.parent);  t1=toc(t);  if (!ok)   return (false);  System.out.print(String.format("downdate: time: %8.2f\n",t1));  t=tic();  Dcs_ipvec.cs_ipvec(S.pinv,b,y,n);  Dcs_lsolve.cs_lsolve(N.L,y);  Dcs_ltsolve.cs_ltsolve(N.L,y);  Dcs_pvec.cs_pvec(S.pinv,y,x,n);  t=toc(t);  System.out.print(String.format("downdate: time: %8.2f ms(incl solve) ",t1 + t));  print_resid(true,C,x,b,resid);  return (true);}  }
class C{  public Object clone() throws CloneNotSupportedException {  return new IntVector(this);}  }
class C{  boolean isBold(){  return bold;}  }
class C{  @Override public <A extends Annotation>ExpressionResult checkPermission(Class<A> annotationClass,PersistentResource resource){  return checkPermission(annotationClass,resource,null);}  }
class C{  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool,SegmentState[] segStates,boolean success,long gen) throws IOException {  int numReaders=segStates.length;  Throwable firstExc=null;  List<SegmentCommitInfo> allDeleted=null;  long totDelCount=0;  for (int j=0; j < numReaders; j++) {    SegmentState segState=segStates[j];    if (success) {      totDelCount+=segState.rld.getPendingDeleteCount() - segState.startDelCount;      segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);      int fullDelCount=segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();      assert fullDelCount <= segState.rld.info.info.maxDoc();      if (fullDelCount == segState.rld.info.info.maxDoc()) {        if (allDeleted == null) {          allDeleted=new ArrayList<>();        }        allDeleted.add(segState.reader.getSegmentInfo());      }    }    try {      segStates[j].finish(pool);    } catch (    Throwable th) {      if (firstExc != null) {        firstExc=th;      }    }  }  if (success) {    IOUtils.reThrow(firstExc);  }  if (infoStream.isEnabled("BD")) {    infoStream.message("BD","applyDeletes: " + totDelCount + " new deleted documents");  }  return new ApplyDeletesResult(totDelCount > 0,gen,allDeleted);}  }
class C{  public Lexicon removeLowCoverageWords(double coverage){  int minDf=(int)(numDocs * coverage);  return removeLowDfWords(minDf);}  }
class C{  public void parse(final String osmFilename){  parse(osmFilename,null);}  }
class C{  @DSComment("no suspicious activity, only creates object") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.305 -0500",hash_original_method="7C7F7287E74EAB9B8232F0908501FA89",hash_generated_method="F7CF3F71550B5F629D892F23E6C2C4EC") public DOMSource(Node n){  setNode(n);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double z=0;  double gridRes=0;  double currentVal=0;  double maxValDist=0;  double maxDist=0;  double lineSlope=0;  double azimuth=0;  double deltaX=0;  double deltaY=0;  double x=0;  int x1=0;  int x2=0;  double y=0;  int y1=0;  int y2=0;  double z1=0;  double z2=0;  double dist=0;  double oldDist=0;  double yIntercept=0;  int xStep=0;  int yStep=0;  double noData=0;  boolean flag=false;  double heightIncrement=0;  double currentMaxVal=0;  maxDist=Double.MAX_VALUE;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      azimuth=Double.parseDouble(args[i]);      if (azimuth > 360 || azimuth < 0) {        azimuth=0.1;      }      if (azimuth == 0) {        azimuth=0.1;      }      if (azimuth == 180) {        azimuth=179.9;      }      if (azimuth == 360) {        azimuth=359.9;      }      if (azimuth < 180) {        lineSlope=Math.tan(Math.toRadians(90 - azimuth));      } else {        lineSlope=Math.tan(Math.toRadians(270 - azimuth));      }    } else     if (i == 3) {      heightIncrement=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    if (azimuth > 0 && azimuth <= 90) {      xStep=1;      yStep=1;    } else     if (azimuth <= 180) {      xStep=1;      yStep=-1;    } else     if (azimuth <= 270) {      xStep=-1;      yStep=-1;    } else {      xStep=-1;      yStep=1;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        currentVal=DEM.getValue(row,col);        if (currentVal != noData) {          yIntercept=-row - lineSlope * col;          currentMaxVal=0;          maxValDist=0;          x=col;          flag=true;          do {            x=x + xStep;            if (x < 0 || x >= cols) {              flag=false;              break;            }            y=(lineSlope * x + yIntercept) * -1;            if (y < 0 || y >= rows) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            y1=(int)(y);            y2=y1 + yStep * -1;            z1=DEM.getValue(y1,(int)x);            z2=DEM.getValue(y2,(int)x);            z=z1 + (y - y1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              maxValDist=dist;              flag=false;            }          } while (flag);          oldDist=dist;          y=-row;          flag=true;          do {            y=y + yStep;            if (-y < 0 || -y >= rows) {              flag=false;              break;            }            x=(y - yIntercept) / lineSlope;            if (x < 0 || x >= cols) {              flag=false;              break;            }            deltaX=(x - col) * gridRes;            deltaY=(-y - row) * gridRes;            dist=Math.sqrt(deltaX * deltaX + deltaY * deltaY);            if (dist > maxDist) {              flag=false;              break;            }            x1=(int)x;            x2=x1 + xStep;            if (x2 < 0 || x2 >= cols) {              flag=false;              break;            }            z1=DEM.getValue((int)-y,x1);            z2=DEM.getValue((int)y,x2);            z=z1 + (x - x1) * (z2 - z1);            if (z >= currentVal + dist * heightIncrement) {              if (dist < maxValDist || maxValDist == 0) {                maxValDist=dist;              }              flag=false;            }          } while (flag);          if (maxValDist == 0) {            if (dist > oldDist) {              maxValDist=-dist;            } else {              maxValDist=-oldDist;            }          }          output.setValue(row,col,maxValDist);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String callbackUrl(){  return callbackUrl;}  }
class C{  public void testLongOptions(){  ArgumentParser parser=new ArgumentParser(new String[]{"--a","--bc","--def=ghj","--kl=mn op","=","--qr=","--=","--=st","--=uv=wxy z"},true);  Iterator<String> iter=parser.iterator();  assertEquals("--a",iter.next());  assertEquals("--bc",iter.next());  assertEquals("--def",iter.next());  assertEquals("ghj",iter.next());  assertEquals("--kl",iter.next());  assertEquals("mn op",iter.next());  assertEquals("=",iter.next());  assertEquals("--qr",iter.next());  assertEquals("",iter.next());  assertEquals("--=",iter.next());  assertEquals("--=st",iter.next());  assertEquals("--=uv=wxy z",iter.next());  assertIteratorAtEnd(iter);}  }
class C{  public static IPackageFragmentRoot addClassFolderWithImport(IJavaProject jproject,String containerName,IPath sourceAttachPath,IPath sourceAttachRoot,File zipFile) throws IOException, CoreException, InvocationTargetException {  ZipFile file=new ZipFile(zipFile);  try {    IPackageFragmentRoot root=addClassFolder(jproject,containerName,sourceAttachPath,sourceAttachRoot);    importFilesFromZip(file,root.getPath(),null);    return root;  }  finally {    if (file != null) {      file.close();    }  }}  }
class C{  public void removeNotification(@NotNull Notification notification){  notification.removeObserver(this);  notifications.remove(notification);  notificationContainer.removeNotification(notification);  notificationMessageStack.removeNotification(notification);  onValueChanged();}  }
class C{  public static String encodeHighLevel(String msg){  return encodeHighLevel(msg,SymbolShapeHint.FORCE_NONE,null,null);}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  void doConstrainedViterbiInsideScores(Grammar grammar,boolean level0grammar){  short[] numSubStatesArray=grammar.numSubStates;  for (int diff=1; diff <= length; diff++) {    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      final int lastState=(level0grammar) ? 1 : numSubStatesArray.length;      for (int pState=0; pState < lastState; pState++) {        if (diff == 1)         continue;        if (!grammarTags[pState])         continue;        if (!vAllowedStates[start][end])         continue;        double oldIScore=viScore[start][end][pState];        double bestIScore=oldIScore;        BinaryRule[] parentRules=grammar.splitRulesWithP(pState);        for (int i=0; i < parentRules.length; i++) {          BinaryRule r=parentRules[i];          int lState=r.leftChildState;          int rState=r.rightChildState;          int narrowR=narrowRExtent[start][lState];          boolean iPossibleL=(narrowR < end);          if (!iPossibleL) {            continue;          }          int narrowL=narrowLExtent[end][rState];          boolean iPossibleR=(narrowL >= narrowR);          if (!iPossibleR) {            continue;          }          int min1=narrowR;          int min2=wideLExtent[end][rState];          int min=(min1 > min2 ? min1 : min2);          if (min > narrowL) {            continue;          }          int max1=wideRExtent[start][lState];          int max2=narrowL;          int max=(max1 < max2 ? max1 : max2);          if (min > max) {            continue;          }          double[][][] scores=r.getScores2();          double pS=Double.NEGATIVE_INFINITY;          if (scores[0][0] != null)           pS=scores[0][0][0];          if (pS == Double.NEGATIVE_INFINITY)           continue;          for (int split=min; split <= max; split++) {            if (!vAllowedStates[start][split])             continue;            if (!vAllowedStates[split][end])             continue;            double lS=viScore[start][split][lState];            if (lS == Double.NEGATIVE_INFINITY)             continue;            double rS=viScore[split][end][rState];            if (rS == Double.NEGATIVE_INFINITY)             continue;            double tot=pS + lS + rS;            if (tot >= bestIScore) {              bestIScore=tot;            }          }        }        if (bestIScore > oldIScore) {          viScore[start][end][pState]=bestIScore;          if (oldIScore == Double.NEGATIVE_INFINITY) {            if (start > narrowLExtent[end][pState]) {              narrowLExtent[end][pState]=start;              wideLExtent[end][pState]=start;            } else {              if (start < wideLExtent[end][pState]) {                wideLExtent[end][pState]=start;              }            }            if (end < narrowRExtent[start][pState]) {              narrowRExtent[start][pState]=end;              wideRExtent[start][pState]=end;            } else {              if (end > wideRExtent[start][pState]) {                wideRExtent[start][pState]=end;              }            }          }        }      }      final int lastStateU=(level0grammar && diff > 1) ? 1 : numSubStatesArray.length;      for (int pState=0; pState < lastStateU; pState++) {        if (!grammarTags[pState])         continue;        if (diff != 1 && !vAllowedStates[start][end])         continue;        UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(pState);        double oldIScore=viScore[start][end][pState];        double bestIScore=oldIScore;        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if ((pState == cState))           continue;          double iS=viScore[start][end][cState];          if (iS == Double.NEGATIVE_INFINITY)           continue;          double[][] scores=ur.getScores2();          double pS=Double.NEGATIVE_INFINITY;          if (scores[0] != null)           pS=scores[0][0];          if (pS == Double.NEGATIVE_INFINITY)           continue;          double tot=iS + pS;          if (tot >= bestIScore) {            bestIScore=tot;          }        }        if (bestIScore > oldIScore) {          viScore[start][end][pState]=bestIScore;          if (oldIScore == Double.NEGATIVE_INFINITY) {            if (start > narrowLExtent[end][pState]) {              narrowLExtent[end][pState]=start;              wideLExtent[end][pState]=start;            } else {              if (start < wideLExtent[end][pState]) {                wideLExtent[end][pState]=start;              }            }            if (end < narrowRExtent[start][pState]) {              narrowRExtent[start][pState]=end;              wideRExtent[start][pState]=end;            } else {              if (end > wideRExtent[start][pState]) {                wideRExtent[start][pState]=end;              }            }          }        }      }    }  }}  }
class C{  private void findLongRunningThreads(){  TreePath[] paths=tree.getSelectionPaths();  if ((paths == null) || (paths.length < 2)) {    JOptionPane.showMessageDialog(this.getRootPane(),"You must select at least two dumps for long thread run detection!\n","Error",JOptionPane.ERROR_MESSAGE);  } else {    DefaultMutableTreeNode mergeRoot=fetchTop(tree.getSelectionPath());    Map dumpMap=dumpStore.getFromDumpFiles(mergeRoot.getUserObject().toString());    LongThreadDialog longThreadDialog=new LongThreadDialog(this,paths,mergeRoot,dumpMap);    longThreadDialog.reset();    longThreadDialog.pack();    longThreadDialog.setLocationRelativeTo(frame);    longThreadDialog.setVisible(true);  }}  }
class C{  public void testFailoverDefaultSettings() throws Exception {  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props);  Statement testStmt1=null, testStmt2=null;  try {    assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());    testStmt1=testConn.createStatement();    testStmt2=testConn.createStatement();    assertSingleValueQuery(testStmt1,"SELECT 1",1L);    assertSingleValueQuery(testStmt2,"SELECT 2",2L);    UnreliableSocketFactory.downHost(HOST_1);    assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);    assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);    assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);    testStmt1=testConn.createStatement();    testStmt2=testConn.createStatement();    assertSingleValueQuery(testStmt1,"SELECT 1",1L);    assertSingleValueQuery(testStmt2,"SELECT 2",2L);    UnreliableSocketFactory.downHost(HOST_2);    assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);    assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);    assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);    UnreliableSocketFactory.dontDownHost(HOST_1);    UnreliableSocketFactory.dontDownHost(HOST_2);    testStmt1=testConn.createStatement();    testStmt2=testConn.createStatement();    assertSingleValueQuery(testStmt1,"SELECT 1",1L);    assertSingleValueQuery(testStmt2,"SELECT 2",2L);    UnreliableSocketFactory.downHost(HOST_3);    assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt2,"SELECT 2",COMM_LINK_ERR_PATTERN);    assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);    assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);    testStmt1=testConn.createStatement();    testStmt2=testConn.createStatement();    assertSingleValueQuery(testStmt1,"SELECT 1",1L);    assertSingleValueQuery(testStmt2,"SELECT 2",2L);    UnreliableSocketFactory.downHost(HOST_2);    assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);    assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());    assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);    assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);    testStmt1=testConn.createStatement();    testStmt2=testConn.createStatement();    assertSingleValueQuery(testStmt1,"SELECT 1",1L);    assertSingleValueQuery(testStmt2,"SELECT 2",2L);    assertConnectionsHistory(HOST_1_OK,HOST_2_OK,HOST_3_OK,HOST_2_OK,HOST_3_FAIL,HOST_2_FAIL,HOST_3_FAIL,HOST_1_OK);  }  finally {    if (testStmt1 != null) {      testStmt1.close();    }    if (testStmt2 != null) {      testStmt2.close();    }    if (testConn != null) {      testConn.close();    }  }}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public synchronized boolean clearHighlighting(final int level){  if (m_highlighting.isEmpty()) {    return false;  }  for (  final CHighlighting highlighting : new ArrayList<CHighlighting>(m_highlighting)) {    if (highlighting.getLevel() == level) {      m_highlighting.remove(highlighting);      return true;    }  }  return false;}  }
class C{  public boolean isPDF(){  return isPDF;}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  private synchronized long trimToFit(){  int ageSeconds=Settings.Global.getInt(mContentResolver,Settings.Global.DROPBOX_AGE_SECONDS,DEFAULT_AGE_SECONDS);  int maxFiles=Settings.Global.getInt(mContentResolver,Settings.Global.DROPBOX_MAX_FILES,DEFAULT_MAX_FILES);  long cutoffMillis=System.currentTimeMillis() - ageSeconds * 1000;  while (!mAllFiles.contents.isEmpty()) {    EntryFile entry=mAllFiles.contents.first();    if (entry.timestampMillis > cutoffMillis && mAllFiles.contents.size() < maxFiles)     break;    FileList tag=mFilesByTag.get(entry.tag);    if (tag != null && tag.contents.remove(entry))     tag.blocks-=entry.blocks;    if (mAllFiles.contents.remove(entry))     mAllFiles.blocks-=entry.blocks;    if (entry.file != null)     entry.file.delete();  }  long uptimeMillis=SystemClock.uptimeMillis();  if (uptimeMillis > mCachedQuotaUptimeMillis + QUOTA_RESCAN_MILLIS) {    int quotaPercent=Settings.Global.getInt(mContentResolver,Settings.Global.DROPBOX_QUOTA_PERCENT,DEFAULT_QUOTA_PERCENT);    int reservePercent=Settings.Global.getInt(mContentResolver,Settings.Global.DROPBOX_RESERVE_PERCENT,DEFAULT_RESERVE_PERCENT);    int quotaKb=Settings.Global.getInt(mContentResolver,Settings.Global.DROPBOX_QUOTA_KB,DEFAULT_QUOTA_KB);    mStatFs.restat(mDropBoxDir.getPath());    int available=mStatFs.getAvailableBlocks();    int nonreserved=available - mStatFs.getBlockCount() * reservePercent / 100;    int maximum=quotaKb * 1024 / mBlockSize;    mCachedQuotaBlocks=Math.min(maximum,Math.max(0,nonreserved * quotaPercent / 100));    mCachedQuotaUptimeMillis=uptimeMillis;  }  if (mAllFiles.blocks > mCachedQuotaBlocks) {    int unsqueezed=mAllFiles.blocks, squeezed=0;    TreeSet<FileList> tags=new TreeSet<FileList>(mFilesByTag.values());    for (    FileList tag : tags) {      if (squeezed > 0 && tag.blocks <= (mCachedQuotaBlocks - unsqueezed) / squeezed) {        break;      }      unsqueezed-=tag.blocks;      squeezed++;    }    int tagQuota=(mCachedQuotaBlocks - unsqueezed) / squeezed;    for (    FileList tag : tags) {      if (mAllFiles.blocks < mCachedQuotaBlocks)       break;      while (tag.blocks > tagQuota && !tag.contents.isEmpty()) {        EntryFile entry=tag.contents.first();        if (tag.contents.remove(entry))         tag.blocks-=entry.blocks;        if (mAllFiles.contents.remove(entry))         mAllFiles.blocks-=entry.blocks;        try {          if (entry.file != null)           entry.file.delete();          enrollEntry(new EntryFile(mDropBoxDir,entry.tag,entry.timestampMillis));        } catch (        IOException e) {          Slog.e(TAG,"Can't write tombstone file",e);        }      }    }  }  return mCachedQuotaBlocks * mBlockSize;}  }
class C{  public void generateOptimizedBoolean(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }  Constant cst=this.right.constant;  if (cst != Constant.NotAConstant && cst.booleanValue() == true) {    this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }  cst=this.left.optimizedBooleanConstant();  boolean leftIsConst=cst != Constant.NotAConstant;  boolean leftIsTrue=leftIsConst && cst.booleanValue() == true;  cst=this.right.optimizedBooleanConstant();  boolean rightIsConst=cst != Constant.NotAConstant;  generateOperands: {    if (falseLabel == null) {      if (trueLabel != null) {        BranchLabel internalFalseLabel=new BranchLabel();        this.left.generateOptimizedBoolean(currentScope,null,internalFalseLabel,!leftIsConst);        if (leftIsConst && !leftIsTrue) {          break generateOperands;        }        this.right.generateOptimizedBoolean(currentScope,trueLabel,null,valueRequired && !rightIsConst);      }    } else {      if (trueLabel == null) {        this.left.generateOptimizedBoolean(currentScope,null,falseLabel,!leftIsConst);        if (leftIsConst && !leftIsTrue) {          break generateOperands;        }        if (this.rightInitStateIndex != -1) {        }        this.right.generateOptimizedBoolean(currentScope,null,falseLabel,valueRequired && !rightIsConst);      } else {      }    }  }}  }
class C{  public boolean checkLocalUserName(String username){  String ufrag=null;  int colon=username.indexOf(":");  if (colon < 0) {    ufrag=username;  } else {    ufrag=username.substring(0,colon);  }  return ufrag.equals(parentAgent.getLocalUfrag());}  }
class C{  private void verifyRpVplexConsistencyGroupMigration() throws Exception {  log.info("Verifying RP+VPlex BlockConsistencyGroup and associated volume migration.");  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  BlockConsistencyGroup rpVplexPrimaryCg=_dbClient.queryObject(BlockConsistencyGroup.class,rpVplexPrimaryConsistencyGroupURI);  verifyConsistencyGroupMigration(rpVplexPrimaryCg,Types.RP.name(),Types.VPLEX.name());  Assert.assertNotNull("The RP+VPlex BlockConsistencyGroup.systemConsistencyGroups field should be populated.",rpVplexPrimaryCg.getSystemConsistencyGroups());  Assert.assertNotNull("The RP+VPlex BlockConsistencyGroup.systemConsistencyGroups field should contain an entry for " + protectionSystemURI.toString(),rpVplexPrimaryCg.getSystemConsistencyGroups().get(protectionSystemURI.toString()));  Assert.assertTrue("The RP+VPlex BlockConsistencyGroup.systemConsistencyGroups field should contain a mapping for " + protectionSystemURI.toString() + "-> ViPR-"+ rpVplexPrimaryCg.getLabel(),rpVplexPrimaryCg.getSystemConsistencyGroups().get(protectionSystemURI.toString()).contains("ViPR-" + rpVplexPrimaryCg.getLabel()));  for (  URI rpVplexVolumeId : rpVplexVolumeToCgMapping.keySet()) {    Volume rpVplexVolume=_dbClient.queryObject(Volume.class,rpVplexVolumeId);    blockObjects.add(rpVplexVolume);    URI cgUri=rpVplexVolumeToCgMapping.get(rpVplexVolumeId);    BlockConsistencyGroup vplexCg=_dbClient.queryObject(BlockConsistencyGroup.class,cgUri);    String cgName=vplexCg.getLabel();    String clusterName=getVPlexClusterFromVolume(rpVplexVolume);    String storageSystem=rpVplexVolume.getStorageController().toString();    String clusterCgName=BlockConsistencyGroupUtils.buildClusterCgName(clusterName,cgName);    Assert.assertTrue("The RP+VPlex BlockConsistencyGroup.systemConsistencyGroups field should contain a mapping for " + storageSystem + "->"+ clusterCgName,rpVplexPrimaryCg.getSystemConsistencyGroups().get(storageSystem).contains(clusterCgName));    Assert.assertTrue("The VPlex BlockConsistencyGroup " + vplexCg.getLabel() + "should be inactive.",vplexCg.getInactive());  }  verifyBlockObjects(blockObjects);}  }
class C{  @Override public PLVector3 clone(){  return new PLVector3(x,y,z);}  }
class C{  public MultipartEntity(HttpMultipartMode mode,String boundary,Charset charset){  super();  if (boundary == null) {    boundary=generateBoundary();  }  this.boundary=boundary;  if (mode == null) {    mode=HttpMultipartMode.STRICT;  }  this.charset=charset != null ? charset : MIME.DEFAULT_CHARSET;  this.multipart=new HttpMultipart(multipartSubtype,this.charset,this.boundary,mode);  this.contentType=new BasicHeader(HTTP.CONTENT_TYPE,generateContentType(this.boundary,this.charset));  this.dirty=true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  int find(RowCursor cursor){  int rowOffset=_rowHead;  int sortOffset=_rowSortHead;  int rowLength=cursor.length();  int removeLength=cursor.removeLength();  byte[] buffer=_buffer;  while (rowOffset < sortOffset) {    int code=buffer[rowOffset] & CODE_MASK;switch (code) {case INSERT:      if (cursor.compareKeyRow(buffer,rowOffset) == 0) {        return rowOffset;      } else {        rowOffset+=rowLength;        break;      }case INSERT_DEAD:    rowOffset+=rowLength;  break;case REMOVE:if (cursor.compareKeyRemove(buffer,rowOffset) == 0) {  return rowOffset;} else {  rowOffset+=removeLength;  break;}default :throw new IllegalStateException(L.l("Corrupted block {0} offset {1} code {2}\n",this,rowOffset,code));}}if (sortOffset < BLOCK_SIZE) {return findSorted(cursor);}return PageLeafImpl.INDEX_UNMATCH;}  }
class C{  public boolean canUseEnergy(double amount){  return energyStored >= amount;}  }
class C{  public void valueChanged(int value){  Logger.d("IRemoteServiceCallback,valueChanged,value=%d",value);  mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG,value,0));}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public ChunkedArrayIterator(final int n,final E[] a,final IKeyOrder<E> keyOrder){  if (a == null)   throw new IllegalArgumentException();  if (n < 0 || n > a.length)   throw new IllegalArgumentException();  this.buffer=a;  this.bufferCount=n;  this.keyOrder=keyOrder;}  }
class C{  public static String arrayListToString(ArrayList<String> list){  String strValue=null;  StringBuilder sb=new StringBuilder();  for (  String s : list) {    sb.append(s).append(",");    strValue=sb.toString();  }  if (strValue != null && strValue.length() > 0 && strValue.charAt(strValue.length() - 1) == ',') {    strValue=strValue.substring(0,strValue.length() - 1);  }  return strValue;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof ExecOptionPermission))   return false;  ExecOptionPermission p=(ExecOptionPermission)permission;  if (all_allowed)   return true;  String pname=p.getName();  Permission x=permissions.get(pname);  if (x != null)   return x.implies(permission);  int last, offset;  offset=pname.length() - 1;  while ((last=pname.lastIndexOf(".",offset)) != -1) {    pname=pname.substring(0,last + 1) + "*";    x=permissions.get(pname);    if (x != null) {      return x.implies(permission);    }    offset=last - 1;  }  pname=p.getName();  offset=pname.length() - 1;  while ((last=pname.lastIndexOf("=",offset)) != -1) {    pname=pname.substring(0,last + 1) + "*";    x=permissions.get(pname);    if (x != null) {      return x.implies(permission);    }    offset=last - 1;  }  return false;}  }
class C{  public COpenFunctionAction(final CGraphWindow parent,final IViewContainer container,final INaviFunction function){  super(String.format("Open function %s",function.getName()));  Preconditions.checkNotNull(parent,"IE02163: Parent argument can not be null");  Preconditions.checkNotNull(container,"IE02164: Container argument can not be null");  m_parent=parent;  m_container=container;  m_function=function;}  }
class C{  public void addNewEQPreset(String presetName,int fiftyHertz,int oneThirtyHertz,int threeTwentyHertz,int eightHundredHertz,int twoKilohertz,int fiveKilohertz,int twelvePointFiveKilohertz,short virtualizer,short bassBoost,short reverb){  ContentValues values=new ContentValues();  values.put(PRESET_NAME,presetName);  values.put(EQ_50_HZ,fiftyHertz);  values.put(EQ_130_HZ,threeTwentyHertz);  values.put(EQ_320_HZ,threeTwentyHertz);  values.put(EQ_800_HZ,eightHundredHertz);  values.put(EQ_2000_HZ,twoKilohertz);  values.put(EQ_5000_HZ,fiveKilohertz);  values.put(EQ_12500_HZ,twelvePointFiveKilohertz);  values.put(VIRTUALIZER,virtualizer);  values.put(BASS_BOOST,bassBoost);  values.put(REVERB,reverb);  getDatabase().insert(EQUALIZER_PRESETS_TABLE,null,values);}  }
class C{  public void onDebug(PnRTCMessage message){}  }
class C{  public boolean containsKey(K key){  return contains(key);}  }
class C{  public QuickOpenIntIntHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  public void tryToDeleteVideoSharings(){  mVideoSharingDeleteOperationHandler.post(new VideoSharingDeleteTask(mVideoSharingService,this,mLocalContentResolver));}  }
class C{  private void handleNewOneToOneChatMessage(Intent messageIntent,String msgId){  String mimeType=messageIntent.getStringExtra(OneToOneChatIntent.EXTRA_MIME_TYPE);  if (mimeType == null) {    if (LogUtils.isActive) {      Log.e(LOGTAG,"Cannot read message mime-type");    }    return;  }  ChatMessageDAO msgDAO=ChatMessageDAO.getChatMessageDAO(this,msgId);  if (msgDAO == null) {    Log.e(LOGTAG,"Cannot find group chat message with ID=".concat(msgId));    return;  }  if (LogUtils.isActive) {    Log.d(LOGTAG,"One to one chat message ".concat(msgDAO.toString()));  }  forwardSingleChatMessage2UI(messageIntent,msgDAO);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void loadAssociatedGefaehrdungen(){  try {    LoadAssociatedGefaehrdungen command=new LoadAssociatedGefaehrdungen(cnaElement);    command=ServiceFactory.lookupCommandService().executeCommand(command);    List<GefaehrdungsUmsetzung> associatedGefaehrdungen=command.getAssociatedGefaehrdungen();    for (    GefaehrdungsUmsetzung gefaehrdung : associatedGefaehrdungen) {      if (!associatedGefExistant(gefaehrdung)) {        this.finishedRiskLists.addAssociatedGefahr(gefaehrdung);      }    }  } catch (  CommandException e) {    ExceptionUtil.log(e,Messages.RiskAnalysisWizard_5);  }}  }
class C{  private void sendEMail(){  DocAction doc=(DocAction)m_po;  MMailText text=new MMailText(getCtx(),m_node.getR_MailText_ID(),null);  text.setPO(m_po,true);  String subject=doc.getDocumentInfo() + ": " + text.getMailHeader();  String message=text.getMailText(true) + "\n-----\n" + doc.getDocumentInfo()+ "\n"+ doc.getSummary();  File pdf=doc.createPDF();  MClient client=MClient.get(doc.getCtx(),doc.getAD_Client_ID());  sendEMail(client,0,m_node.getEMail(),subject,message,pdf,text.isHtml());  String recipient=m_node.getEMailRecipient();  if (recipient == null || recipient.length() == 0)   sendEMail(client,doc.getDoc_User_ID(),null,subject,message,pdf,text.isHtml()); else   if (recipient.equals(MWFNode.EMAILRECIPIENT_DocumentBusinessPartner)) {    int index=m_po.get_ColumnIndex("AD_User_ID");    if (index > 0) {      Object oo=m_po.get_Value(index);      if (oo instanceof Integer) {        int AD_User_ID=((Integer)oo).intValue();        if (AD_User_ID != 0)         sendEMail(client,AD_User_ID,null,subject,message,pdf,text.isHtml()); else         log.fine("No User in Document");      } else       log.fine("Empty User in Document");    } else     log.fine("No User Field in Document");  } else   if (recipient.equals(MWFNode.EMAILRECIPIENT_DocumentOwner))   sendEMail(client,doc.getDoc_User_ID(),null,subject,message,pdf,text.isHtml()); else   if (recipient.equals(MWFNode.EMAILRECIPIENT_WFResponsible)) {    MWFResponsible resp=getResponsible();    if (resp.isInvoker())     sendEMail(client,doc.getDoc_User_ID(),null,subject,message,pdf,text.isHtml()); else     if (resp.isHuman())     sendEMail(client,resp.getAD_User_ID(),null,subject,message,pdf,text.isHtml()); else     if (resp.isRole()) {      MRole role=resp.getRole();      if (role != null) {        MUser[] users=MUser.getWithRole(role);        for (int i=0; i < users.length; i++)         sendEMail(client,users[i].getAD_User_ID(),null,subject,message,pdf,text.isHtml());      }    } else     if (resp.isOrganization()) {      MOrgInfo org=MOrgInfo.get(getCtx(),m_po.getAD_Org_ID(),get_TrxName());      if (org.getSupervisor_ID() == 0)       log.fine("No Supervisor for AD_Org_ID=" + m_po.getAD_Org_ID()); else       sendEMail(client,org.getSupervisor_ID(),null,subject,message,pdf,text.isHtml());    }  }}  }
class C{  public void add(String property,JsonElement value){  if (value == null) {    value=JsonNull.INSTANCE;  }  members.put(property,value);}  }
class C{  public boolean write(Node nodeArg,LSOutput destination) throws LSException {  if (destination == null) {    String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));    }    throw new LSException(LSException.SERIALIZE_ERR,msg);  }  if (nodeArg == null) {    return false;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    fEncoding=destination.getEncoding();    if (fEncoding == null) {      fEncoding=getInputEncoding(nodeArg);      fEncoding=fEncoding != null ? fEncoding : getXMLEncoding(nodeArg) == null ? "UTF-8" : getXMLEncoding(nodeArg);    }    if (!Encodings.isRecognizedEncoding(fEncoding)) {      String msg=Utils.messages.createMessage(MsgKey.ER_UNSUPPORTED_ENCODING,null);      if (fDOMErrorHandler != null) {        fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_UNSUPPORTED_ENCODING));      }      throw new LSException(LSException.SERIALIZE_ERR,msg);    }    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,fEncoding);    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  try {    Writer writer=destination.getCharacterStream();    if (writer == null) {      OutputStream outputStream=destination.getByteStream();      if (outputStream == null) {        String uri=destination.getSystemId();        if (uri == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);          if (fDOMErrorHandler != null) {            fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));          }          throw new LSException(LSException.SERIALIZE_ERR,msg);        } else {          String absoluteURI=SystemIDResolver.getAbsoluteURI(uri);          URL url=new URL(absoluteURI);          OutputStream urlOutStream=null;          String protocol=url.getProtocol();          String host=url.getHost();          if (protocol.equalsIgnoreCase("file") && (host == null || host.length() == 0 || host.equals("localhost"))) {            urlOutStream=new FileOutputStream(getPathWithoutEscapes(url.getPath()));          } else {            URLConnection urlCon=url.openConnection();            urlCon.setDoInput(false);            urlCon.setDoOutput(true);            urlCon.setUseCaches(false);            urlCon.setAllowUserInteraction(false);            if (urlCon instanceof HttpURLConnection) {              HttpURLConnection httpCon=(HttpURLConnection)urlCon;              httpCon.setRequestMethod("PUT");            }            urlOutStream=urlCon.getOutputStream();          }          serializer.setOutputStream(urlOutStream);        }      } else {        serializer.setOutputStream(outputStream);      }    } else {      serializer.setWriter(writer);    }    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  UnsupportedEncodingException ue) {    String msg=Utils.messages.createMessage(MsgKey.ER_UNSUPPORTED_ENCODING,null);    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_UNSUPPORTED_ENCODING,ue));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,ue).fillInStackTrace();  }catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return true;}  }
class C{  public static void main(String[] args){  TestSuperClassInSerialForm tester=new TestSuperClassInSerialForm();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private void ensureOpen() throws IOException {  if (out == null)   throw new IOException("Stream closed");}  }
class C{  public QDate(TimeZone zone,long now){  _timeZone=zone;  if (zone == _gmtTimeZone) {    _stdName=_gmtStdName;    _dstName=_gmtDstName;  } else   if (zone == _localTimeZone) {    _stdName=_localStdName;    _dstName=_localDstName;  } else {    _stdName=_timeZone.getDisplayName(false,TimeZone.SHORT);    _dstName=_timeZone.getDisplayName(true,TimeZone.SHORT);  }  _calendar=new GregorianCalendar(_timeZone);  if (zone == _gmtTimeZone)   setGMTTime(now); else   setLocalTime(now);}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  void releaseAckSem(){  if (this.isBackToBackUserAgent) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("releaseAckSem]" + this);    }    this.ackSem.release();  }}  }
class C{  public final void testGetMessageDigest(){  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      DigestInputStream dis=new DigestInputStream(null,md);      assertTrue(dis.getMessageDigest() == md);      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void addRaster(float lt,float ln,int offset_x1,int offset_y1,ImageIcon ii,LinkProperties properties) throws IOException, InterruptedException {  LinkRaster.write(lt,ln,offset_x1,offset_y1,ii,properties,link.dos);}  }
class C{  public CertStatus(){  tagNo=0;  value=DERNull.INSTANCE;}  }
class C{  public static byte[] fromBase58WithChecksum(String s) throws HyperLedgerException {  byte[] b=fromBase58(s);  if (b.length < 4) {    throw new HyperLedgerException("Too short for checksum " + s);  }  byte[] cs=new byte[4];  System.arraycopy(b,b.length - 4,cs,0,4);  byte[] data=new byte[b.length - 4];  System.arraycopy(b,0,data,0,b.length - 4);  byte[] h=new byte[4];  System.arraycopy(Hash.hash(data),0,h,0,4);  if (Arrays.equals(cs,h)) {    return data;  }  throw new HyperLedgerException("Checksum mismatch " + s);}  }
class C{  public static float convertRatio(String v){  float d=1;  if (v.endsWith("%")) {    v=v.substring(0,v.length() - 1);    d=100;  }  float r=Float.parseFloat(v) / d;  if (r < 0) {    r=0;  } else   if (r > 1) {    r=1;  }  return r;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String path="";  int userid=0;  String school="";  school=(String)request.getSession().getAttribute("school");  if (school == null || "".equals(school)) {    response.sendRedirect("../index.jsp");    return;  }  try {    String id=request.getSession().getAttribute("userid").toString();    userid=Integer.parseInt(id);  } catch (  Exception e) {    response.sendRedirect("../" + school);    return;  }  CoursesTimetableSql timetableSql=new CoursesTimetableSql(school);  TimeTable timeTable=new TimeTable();  DateTool dateTool=new DateTool();  timeTable=dateTool.setSchool(timeTable);  List<TimeTable> list=timetableSql.searchForInfo(userid,timeTable.getSchoolyear(),timeTable.getSemester());  for (int i=0; i < list.size(); i++) {    TimeTable table=list.get(i);    for (int j=i + 1; j < list.size(); j++) {      TimeTable temp=list.get(j);      if (table.getCourseName().endsWith(temp.getCourseName())) {        temp.setId(table.getId());      }    }  }  request.setAttribute("timetableList",list);  XmlManage xmlManage=new XmlManage();  String schoolType=xmlManage.getType(school);  if ("t".equals(schoolType)) {    path="../jsp/timetableAlone.jsp";  } else   if ("s".equals(schoolType)) {    path="ScoreServlet";  } else {    path="../jsp/timetable.jsp";  }  RequestDispatcher dispatcher=request.getRequestDispatcher(path);  dispatcher.forward(request,response);}  }
class C{  public String toString(){  long ncompleted;  int nworkers, nactive;  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    ncompleted=completedTaskCount;    nactive=0;    nworkers=workers.size();    for (    Worker w : workers) {      ncompleted+=w.completedTasks;      if (w.isLocked())       ++nactive;    }  }  finally {    mainLock.unlock();  }  int c=ctl.get();  String rs=(runStateLessThan(c,SHUTDOWN) ? "Running" : (runStateAtLeast(c,TERMINATED) ? "Terminated" : "Shutting down"));  return super.toString() + "[" + rs+ ", pool size = "+ nworkers+ ", active threads = "+ nactive+ ", queued tasks = "+ workQueue.size()+ ", completed tasks = "+ ncompleted+ "]";}  }
class C{  static public String[] concatenateTypeLists(@Nonnull String[] types){  List<String> outTypes=new LinkedList<String>();  boolean noFeedbackWanted=false;  for (int i=0; i < types.length; ++i) {    if (types[i] == "NoFeedback") {      noFeedbackWanted=true;    } else     if (types[i] == null || types[i].equals("")) {      log.warn("null or empty operation name returned from turnout manager");    } else     if (!outTypes.contains(types[i])) {      outTypes.add(types[i]);    }  }  if (noFeedbackWanted) {    outTypes.add("NoFeedback");  }  return outTypes.toArray(new String[0]);}  }
class C{  public List<N> nodes(@Nullable Object key,int cnt){  return nodes(key,cnt,null,null);}  }
class C{  public boolean isValidInet6Address(String inet6Address){  boolean containsCompressedZeroes=inet6Address.contains("::");  if (containsCompressedZeroes && inet6Address.indexOf("::") != inet6Address.lastIndexOf("::")) {    return false;  }  if (inet6Address.startsWith(":") && !inet6Address.startsWith("::") || inet6Address.endsWith(":") && !inet6Address.endsWith("::")) {    return false;  }  String[] octets=inet6Address.split(":");  if (containsCompressedZeroes) {    List<String> octetList=new ArrayList<String>(Arrays.asList(octets));    if (inet6Address.endsWith("::")) {      octetList.add("");    } else     if (inet6Address.startsWith("::") && !octetList.isEmpty()) {      octetList.remove(0);    }    octets=octetList.toArray(new String[octetList.size()]);  }  if (octets.length > IPV6_MAX_HEX_GROUPS) {    return false;  }  int validOctets=0;  int emptyOctets=0;  for (int index=0; index < octets.length; index++) {    String octet=octets[index];    if (octet.length() == 0) {      emptyOctets++;      if (emptyOctets > 1) {        return false;      }    } else {      emptyOctets=0;      if (octet.contains(".")) {        if (!inet6Address.endsWith(octet)) {          return false;        }        if (index > octets.length - 1 || index > 6) {          return false;        }        if (!isValidInet4Address(octet)) {          return false;        }        validOctets+=2;        continue;      }      if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {        return false;      }      int octetInt=0;      try {        octetInt=Integer.valueOf(octet,BASE_16).intValue();      } catch (      NumberFormatException e) {        return false;      }      if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {        return false;      }    }    validOctets++;  }  if (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes) {    return false;  }  return true;}  }
class C{  private static boolean isMoreAbove(String src,int index){  int ch;  int cc;  int len=src.length();  for (int i=index + Character.charCount(src.codePointAt(index)); i < len; i+=Character.charCount(ch)) {    ch=src.codePointAt(i);    cc=Normalizer.getCombiningClass(ch);    if (cc == COMBINING_CLASS_ABOVE) {      return true;    } else     if (cc == 0) {      return false;    }  }  return false;}  }
class C{  public MethodInvocationStream addParameter(Expression parameterExpression){  parameterExpressions.add(parameterExpression);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.953 -0500",hash_original_method="B42987DBDBA12D8A1BC8285C2A945786",hash_generated_method="C11482D97B3933DFF07329C83C87588F") public ReferredByParser(String referBy){  super(referBy);}  }
class C{  public static String printRangeValue(String leftValue,String rightValue,String separator){  StringBuilder sb=new StringBuilder();  sb.append(leftValue + " ");  sb.append(separator);  sb.append(" " + rightValue);  return sb.toString();}  }
class C{  public void intersection(Clip c){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(c);    status=INUSE;    return;  }  clip[0]=Math.max(clip[0],c.clip[0]);  clip[1]=Math.max(clip[1],c.clip[1]);  clip[6]=Math.min(clip[6],c.clip[6]);  clip[7]=Math.min(clip[7],c.clip[7]);}  }
class C{  public SQLTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private void preInit(int index,int AD_Column_ID,int displayType,String ColumnName){  m_columnName[index]=ColumnName;  String what=Msg.translate(Env.getCtx(),ColumnName);  m_label[index]=new CLabel(what);  m_from[index]=new VLookup(ColumnName,false,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,displayType));  m_to[index]=new VLookup(ColumnName,false,false,true,MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,displayType));}  }
class C{  private void updateProgress(int currentPosition,int duration){synchronized (mMiniControllers) {    for (    final IMiniController controller : mMiniControllers) {      controller.setProgress(currentPosition,duration);    }  }}  }
class C{  public MoveAction(){  super(MOVE_CMD);}  }
class C{  public static String encodeQuery(final String unescaped,final String charset) throws URIException {  return encode(unescaped,URI.allowed_query,charset);}  }
class C{  public void removeFocusListener(FocusListener l){  getTextComponent().removeFocusListener(l);}  }
class C{  public int[] toArray(){  return members.clone();}  }
class C{  public void testGetF3(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF3();  assertEquals(expResult,result);}  }
class C{  public void write(DataOutputStream out) throws IOException {  int i, n;  out.writeInt(0xCAFEBABE);  out.writeShort(minor);  out.writeShort(major);  constPool.write(out);  out.writeShort(accessFlags);  out.writeShort(thisClass);  out.writeShort(superClass);  if (interfaces == null)   n=0; else   n=interfaces.length;  out.writeShort(n);  for (i=0; i < n; ++i)   out.writeShort(interfaces[i]);  ArrayList list=fields;  n=list.size();  out.writeShort(n);  for (i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    finfo.write(out);  }  list=methods;  n=list.size();  out.writeShort(n);  for (i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    minfo.write(out);  }  out.writeShort(attributes.size());  AttributeInfo.writeAll(attributes,out);}  }
class C{  void dumpToConsole(){  for (Iterator<Map.Entry<String,SSLInstruction>> iter=instructions.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry<String,SSLInstruction> entry=iter.next();    SSLInstruction instr=entry.getValue();    System.out.println(instr.toString() + ": " + instr.getBody());  }}  }
class C{  public static PLCameraParameters checkCameraParametersWithMask(int mask){  PLCameraParameters parameters=PLCameraParameters.PLCameraParametersMake();  if ((mask & PLCameraParameterTypeAtvMin) == PLCameraParameterTypeAtvMin)   parameters.atvMin=true;  if ((mask & PLCameraParameterTypeAtvMax) == PLCameraParameterTypeAtvMax)   parameters.atvMax=true;  if ((mask & PLCameraParameterTypeAthMin) == PLCameraParameterTypeAthMin)   parameters.athMin=true;  if ((mask & PLCameraParameterTypeAthMax) == PLCameraParameterTypeAthMax)   parameters.athMax=true;  if ((mask & PLCameraParameterTypeReverseRotation) == PLCameraParameterTypeReverseRotation)   parameters.reverseRotation=true;  if ((mask & PLCameraParameterTypeRotationSensitivity) == PLCameraParameterTypeRotationSensitivity)   parameters.rotationSensitivity=true;  if ((mask & PLCameraParameterTypeVLookAt) == PLCameraParameterTypeVLookAt)   parameters.vLookAt=true;  if ((mask & PLCameraParameterTypeHLookAt) == PLCameraParameterTypeHLookAt)   parameters.hLookAt=true;  if ((mask & PLCameraParameterTypeZoomLevels) == PLCameraParameterTypeZoomLevels)   parameters.zoomLevels=true;  if ((mask & PLCameraParameterTypeFovMin) == PLCameraParameterTypeFovMin)   parameters.fovMin=true;  if ((mask & PLCameraParameterTypeFovMax) == PLCameraParameterTypeFovMax)   parameters.fovMax=true;  if ((mask & PLCameraParameterTypeFovSensitivity) == PLCameraParameterTypeFovSensitivity)   parameters.fovSensitivity=true;  if ((mask & PLCameraParameterTypeFov) == PLCameraParameterTypeFov)   parameters.fov=true;  return parameters;}  }
class C{  int computeWriteSize(){  int writeSize=getWorstCaseWriteSize();  rawStackMap=new byte[writeSize];  computeRawStackMap();  return rawStackMapTop + 2;}  }
class C{  static String sanitizeHeader(String inString){  return inString.replaceAll("#CL .*" + StringUtils.LS,"").replaceAll("#Version .*" + StringUtils.LS,"");}  }
class C{  public static void ensureClusteringResult(final Database db,final Result result){  Collection<Clustering<?>> clusterings=ResultUtil.filterResults(db.getHierarchy(),result,Clustering.class);  if (clusterings.isEmpty()) {    ClusteringAlgorithm<Clustering<Model>> split=new ByLabelOrAllInOneClustering();    Clustering<Model> c=split.run(db);    addChildResult(db,c);  }}  }
class C{  public Polynomial plus(double c){  Polynomial retval=new Polynomial(order);  System.arraycopy(a,0,retval.a,0,a.length);  retval.a[0]+=c;  return retval;}  }
class C{  private void failOnErrors(ArrayList<Issue> allErrorsAndWarnings,String projectId) throws N4JSCompileErrorException {  ArrayList<Issue> errors=new ArrayList<>();  Iterables.addAll(errors,Iterables.filter(allErrorsAndWarnings,null));  if (errors.size() != 0) {    allErrorsAndWarnings.stream().filter(null).forEach(null);    String msg="ERROR: cannot compile project " + projectId + " due to "+ errors.size()+ " errors.";    for (    Issue err : errors) {      msg=msg + "\n  " + err;    }    throw new N4JSCompileErrorException(msg,projectId);  }}  }
class C{  protected List<CnATreeElement> createInsertList(final List<String> uuidList){  final List<CnATreeElement> tempList=new ArrayList<CnATreeElement>();  final List<CnATreeElement> insertList=new ArrayList<CnATreeElement>();  final int depth=0;  final int removed=0;  if (uuidList.size() > 1) {    for (    final String uuid : uuidList) {      final CnATreeElement element=getDao().findByUuid(uuid,RetrieveInfo.getChildrenInstance());      createInsertList(element,tempList,insertList,depth,removed);    }  } else {    final CnATreeElement element=getDao().findByUuid(uuidList.get(0),RetrieveInfo.getChildrenInstance());    insertList.add(element);  }  return insertList;}  }
class C{  private ImageIconCache(){  super();}  }
class C{  public final boolean isDocComment(){  return (this instanceof Javadoc);}  }
class C{  protected int addNode(int type,int expandedTypeID,int parentIndex,int previousSibling,int dataOrPrefix,boolean canHaveFirstChild){  int nodeIndex=m_size++;  if (m_dtmIdent.size() == (nodeIndex >>> DTMManager.IDENT_DTM_NODE_BITS)) {    addNewDTMID(nodeIndex);  }  m_firstch.addElement(canHaveFirstChild ? NOTPROCESSED : DTM.NULL);  m_nextsib.addElement(NOTPROCESSED);  m_parent.addElement(parentIndex);  m_exptype.addElement(expandedTypeID);  m_dataOrQName.addElement(dataOrPrefix);  if (m_prevsib != null) {    m_prevsib.addElement(previousSibling);  }  if (DTM.NULL != previousSibling) {    m_nextsib.setElementAt(nodeIndex,previousSibling);  }  if (m_locator != null && m_useSourceLocationProperty) {    setSourceLocation();  }switch (type) {case DTM.NAMESPACE_NODE:    declareNamespaceInContext(parentIndex,nodeIndex);  break;case DTM.ATTRIBUTE_NODE:break;default :if (DTM.NULL == previousSibling && DTM.NULL != parentIndex) {m_firstch.setElementAt(nodeIndex,parentIndex);}break;}return nodeIndex;}  }
class C{  public static boolean isMonogamous(Collection<Family> families){  final HashSet<String> parents=new HashSet<>();  for (  Family f : families) {    if (!parents.add(f.getFather())) {      return false;    }    if (!parents.add(f.getMother())) {      return false;    }  }  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  log.info("Cmd=" + e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  }  if (cmbDocType.equals(e.getSource())) {    executeQuery();    return;  }  saveSelection();  if (selection != null && selection.size() > 0 && m_selectionActive && m_M_Warehouse_ID != null) {    generateShipments();  } else   dispose();}  }
class C{  public static void orthoM(double[] m,int mOffset,double left,double right,double bottom,double top,double near,double far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (bottom == top) {    throw new IllegalArgumentException("bottom == top");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  final double r_width=1.0f / (right - left);  final double r_height=1.0f / (top - bottom);  final double r_depth=1.0f / (far - near);  final double x=2.0f * (r_width);  final double y=2.0f * (r_height);  final double z=-2.0f * (r_depth);  final double tx=-(right + left) * r_width;  final double ty=-(top + bottom) * r_height;  final double tz=-(far + near) * r_depth;  m[mOffset + 0]=x;  m[mOffset + 5]=y;  m[mOffset + 10]=z;  m[mOffset + 12]=tx;  m[mOffset + 13]=ty;  m[mOffset + 14]=tz;  m[mOffset + 15]=1.0f;  m[mOffset + 1]=0.0f;  m[mOffset + 2]=0.0f;  m[mOffset + 3]=0.0f;  m[mOffset + 4]=0.0f;  m[mOffset + 6]=0.0f;  m[mOffset + 7]=0.0f;  m[mOffset + 8]=0.0f;  m[mOffset + 9]=0.0f;  m[mOffset + 11]=0.0f;}  }
class C{  public void openOrder(int orderId,final Contract contract,final TradeOrder tradeOrder,final OrderState orderState){  try {    TradeOrder transientInstance=m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());    if (null == transientInstance) {      error(orderId,3170,"Warning Order not found for Order Key: " + orderId + " make sure Client ID: "+ 0+ " is not the master in TWS. On openOrder update.");      return;    }    if (BackTestBrokerModel.updateTradeOrder(tradeOrder,orderState,transientInstance)) {      if (OrderStatus.FILLED.equals(transientInstance.getStatus())) {        _log.debug("Order Key: " + transientInstance.getOrderKey() + " filled.");        BackTestBrokerModel.logOrderState(orderState);        BackTestBrokerModel.logTradeOrder(tradeOrder);        TradeOrder updatedOrder=m_tradePersistentModel.persistTradeOrder(transientInstance);        if (updatedOrder.hasTradePosition() && !updatedOrder.getTradePosition().isOpen()) {          this.firePositionClosed(updatedOrder.getTradePosition());        }      } else {        _log.debug("Order key: " + transientInstance.getOrderKey() + " state changed. Status:"+ orderState.m_status);        BackTestBrokerModel.logOrderState(orderState);        BackTestBrokerModel.logTradeOrder(tradeOrder);        TradeOrder updatedOrder=m_tradePersistentModel.persistTradeOrder(transientInstance);        if (OrderStatus.CANCELLED.equals(updatedOrder.getStatus())) {          this.fireTradeOrderCancelled(updatedOrder);        }      }    }  } catch (  Exception ex) {    error(orderId,3180,"Errors updating open order: " + ex.getMessage());  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (constructorRef: ");  result.append(constructorRef);  result.append(')');  return result.toString();}  }
class C{  public static @EnsuresNonNull("#1") <T extends Object>T[][] castNonNullDeep(T[][] arr){  return (T[][])castNonNullArray(arr);}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);  this.lastMillisecond=getLastMillisecond(calendar);}  }
class C{  public boolean isHotGrowable(){  return hotGrowable;}  }
class C{  public CML makeVersionable(ISicresAbstractDocumentVO document){  Reference reference=new Reference(STORE,document.getId(),null);  Predicate predicate=new Predicate(new Reference[]{reference},null,null);  CMLAddAspect addAspect=new CMLAddAspect(Constants.ASPECT_VERSIONABLE,null,predicate,null);  CML cml=new CML();  cml.setAddAspect(new CMLAddAspect[]{addAspect});  return cml;}  }
class C{  public MaterialNavSection(){  super();  setHideOn(HideOn.HIDE_ON_MED_DOWN);}  }
class C{  private void prepareParameters(){  List<VOParameter> parameters=new ArrayList<VOParameter>();  if (selectedService.getTechnicalService().getParameterDefinitions() != null) {    for (    VOParameterDefinition paramDef : selectedService.getTechnicalService().getParameterDefinitions()) {      VOParameter parameter=findParameter(selectedService.getParameters(),paramDef.getParameterType(),paramDef.getParameterId());      if (parameter == null) {        parameter=new VOParameter(paramDef);      }      parameters.add(parameter);    }    selectedService.setParameters(parameters);  }  initParameterRows(parameters,false);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.729 -0500",hash_original_method="DE6B6B5588954C6A35AB00A23B1617FE",hash_generated_method="24D8AF97881FC81FD7824F1A915C2F48") public Socket(){  this.impl=factory != null ? factory.createSocketImpl() : new PlainSocketImpl();  this.proxy=null;}  }
class C{  public XMLDecoder(InputStream in,Object owner,ExceptionListener exceptionListener,ClassLoader cl){  this(new InputSource(in),owner,exceptionListener,cl);}  }
class C{  protected void init(){  if (isInEditMode())   return;  this.shouldAutoplay=false;  this.currentState=State.IDLE;  this.fullscreen=false;  this.initialConfigOrientation=-1;  this.setBackgroundColor(Color.BLACK);  initObjects();}  }
class C{  public boolean validate(){  boolean ok=true;  if (getC_SubAcct_ID() != 0) {    X_C_SubAcct sa=new X_C_SubAcct(getCtx(),getC_SubAcct_ID(),get_TrxName());    if (sa.getC_ElementValue_ID() != getAccount_ID()) {      log.saveError("Error","C_SubAcct.C_ElementValue_ID=" + sa.getC_ElementValue_ID() + "<>Account_ID="+ getAccount_ID());      ok=false;    }  }  return ok;}  }
class C{  private static void handleClassInitializer(GetStaticGraph staticUsageTree,ClassNode cn,MethodNode mn,String owner,int depth){  if (!staticUsageTree.hasStaticMethodCall(cn.name,mn.name + mn.desc,owner,CLASS_INIT_NAME)) {    staticUsageTree.addStaticMethodCall(cn.name,mn.name + mn.desc,owner,CLASS_INIT_NAME);    handle(staticUsageTree,owner,CLASS_INIT_NAME,depth);  }}  }
class C{  private void validateSourceURL(){  if (sourceURL.startsWith(mergeTarget.getURL())) {    view.setError("Cannot merge directory itself");    view.enableMergeButton(false);    return;  }  if (mergeTarget.getURL().startsWith(sourceURL)) {    view.setError("Cannot merge with parent directory");    view.enableMergeButton(false);    return;  }  view.setError(null);  view.enableMergeButton(true);}  }
class C{  protected int defaultNumClusters(){  return 4;}  }
class C{  public static GetNumberOfServiceSessionsE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetNumberOfServiceSessionsE object=new GetNumberOfServiceSessionsE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","getNumberOfServiceSessions").equals(reader.getName())) {          object.setGetNumberOfServiceSessions(GetNumberOfServiceSessions.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private static boolean hasText(AccessibilityNodeInfoCompat node){  return node != null && (!TextUtils.isEmpty(node.getText()) || !TextUtils.isEmpty(node.getContentDescription()));}  }
class C{  public static final boolean isDefaultMode(byte esmClass){  return isMessagingMode(esmClass,SMPPConstant.ESMCLS_DEFAULT_MODE);}  }
class C{  public VerticalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter){  this(viewAdapter,DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD,DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK,DEFAULT_DECELERATE_FACTOR);}  }
class C{  protected AbstractBean(PropertyChangeSupport pcs,VetoableChangeSupport vcs){  if (pcs == null) {    throw new NullPointerException("PropertyChangeSupport must not be null");  }  if (vcs == null) {    throw new NullPointerException("VetoableChangeSupport must not be null");  }  this.pcs=pcs;  this.vcs=vcs;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  mFragments.attachActivity(this,mContainer,null);  if (getLayoutInflater().getFactory() == null) {    getLayoutInflater().setFactory(this);  }  super.onCreate(savedInstanceState);  NonConfigurationInstances nc=(NonConfigurationInstances)getLastNonConfigurationInstance();  if (nc != null) {    mAllLoaderManagers=nc.loaders;  }  if (savedInstanceState != null) {    Parcelable p=savedInstanceState.getParcelable(FRAGMENTS_TAG);    mFragments.restoreAllState(p,nc != null ? nc.fragments : null);  }  mFragments.dispatchCreate();}  }
class C{  public void run(){  int rc=-1;  String ipAddr=(String)ipAddress.getSelectedItem();  String portNum=(String)port.getSelectedItem();  String connStr="";  try {    if (ipAddr.indexOf("://") < 0) {      connStr="tcp://" + ipAddr + ":"+ portNum;    } else {      connStr=ipAddr;    }    connect(connStr,optionsComp.isPersistenceSelected());    updateComboBoxList(ipAddress,ipAddr);    updateComboBoxList(port,portNum);    connected=true;    led.setGreen();    setConnected(true);  } catch (  NumberFormatException nfe) {    JOptionPane.showMessageDialog(frame,"Invalid port number !","MQTT Connect Exception",JOptionPane.ERROR_MESSAGE);  }catch (  MqttException mqe) {    setTitleText("MQTT connect failed !");    Throwable e=mqe.getCause();    String msg="";    if (e == null) {      e=mqe;    } else     if (mqe.getMessage() != null) {      msg+=mqe.getMessage() + "\n";    }    msg+=e;    JOptionPane.showMessageDialog(frame,msg,"MQTT Connect Exception",JOptionPane.ERROR_MESSAGE);    e.printStackTrace();  }catch (  Exception ex) {    setTitleText("MQTT connect failed !");    JOptionPane.showMessageDialog(frame,ex,"MQTT Connect Exception",JOptionPane.ERROR_MESSAGE);    ex.printStackTrace();  }  if (!connected) {    led.setRed();    setConnected(false);  }synchronized (this) {    if (connected) {      writeLogln("WebSphere MQ Telemetry transport connected to " + mqtt.getServerURI());    } else {      writeLogln("ERROR:WebSphere MQ Telemetry transport failed to connect to " + connStr);    }  }}  }
class C{  public DrawerBuilder withRecyclerView(@NonNull RecyclerView recyclerView){  this.mRecyclerView=recyclerView;  return this;}  }
class C{  public static double diff(double ang1,double ang2){  double delAngle;  if (ang1 < ang2) {    delAngle=ang2 - ang1;  } else {    delAngle=ang1 - ang2;  }  if (delAngle > Math.PI) {    delAngle=(2 * Math.PI) - delAngle;  }  return delAngle;}  }
class C{  public static Map<String,String> parseQuery(String queryString) throws Exception {  if (queryString != null && !queryString.isEmpty()) {    Map<String,String> rc=new HashMap<>();    String[] parameters=queryString.split("&");    for (    String parameter : parameters) {      int p=parameter.indexOf("=");      if (p >= 0) {        String name=URLDecoder.decode(parameter.substring(0,p),"UTF-8");        String value=URLDecoder.decode(parameter.substring(p + 1),"UTF-8");        rc.put(name,value);      } else {        rc.put(parameter,null);      }    }    return rc;  }  return Collections.emptyMap();}  }
class C{  public void ensureLoaded() throws UnsatisfiedLinkError {  if (!loadLibraries()) {    throw mLinkError;  }}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + (this.name == null ? 0 : this.name.hashCode());  result=mult * result + (this.clazz == null ? 0 : this.clazz.hashCode());  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.601 -0500",hash_original_method="F89FCCC7DAC3DDDECFBD90C73C53D5D4",hash_generated_method="C51DFADEAB1B13B537F0BA3C3E95F6E1") public static boolean isVoiceMailNumber(String number){  String vmNumber;  try {    vmNumber=TelephonyManager.getDefault().getVoiceMailNumber();  } catch (  SecurityException ex) {    return false;  }  number=extractNetworkPortionAlt(number);  return !TextUtils.isEmpty(number) && compare(number,vmNumber);}  }
class C{  public static int[] sort(double[] array){  int[] index=new int[array.length];  array=(double[])array.clone();  for (int i=0; i < index.length; i++) {    index[i]=i;    if (Double.isNaN(array[i])) {      array[i]=Double.MAX_VALUE;    }  }  quickSort(array,index,0,array.length - 1);  return index;}  }
class C{  public org.eclipse.vorto.core.api.model.datatype.Enum createEnum(){  EnumImpl enum_=new EnumImpl();  return enum_;}  }
class C{  @Override public void clearUndo(){  ((ArffSortedTableModel)m_TableArff.getModel()).clearUndo();}  }
class C{  byte[] doFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  byte[] output=null;  try {    output=new byte[getOutputSizeByOperation(inputLen,true)];    int len=doFinal(input,inputOffset,inputLen,output,0);    if (len < output.length) {      return Arrays.copyOf(output,len);    } else {      return output;    }  } catch (  ShortBufferException e) {    throw new ProviderException("Unexpected exception",e);  }}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public static Object execute(ExecutablePool pool,LocalRegion region,Object key,Object expectedOldValue,Operation operation,EntryEventImpl event,Object callbackArg,boolean prSingleHopEnabled){  if (logger.isDebugEnabled()) {    logger.debug("Preparing DestroyOp for {} operation={}",key,operation);  }  DestroyOpImpl op=new DestroyOpImpl(region,key,expectedOldValue,operation,event,callbackArg,prSingleHopEnabled);  if (prSingleHopEnabled) {    ClientMetadataService cms=region.getCache().getClientMetadataService();    ServerLocation server=cms.getBucketServerLocation(region,Operation.DESTROY,key,null,callbackArg);    if (server != null) {      try {        PoolImpl poolImpl=(PoolImpl)pool;        boolean onlyUseExistingCnx=((poolImpl.getMaxConnections() != -1 && poolImpl.getConnectionCount() >= poolImpl.getMaxConnections()) ? true : false);        op.setAllowDuplicateMetadataRefresh(!onlyUseExistingCnx);        return pool.executeOn(server,op,true,onlyUseExistingCnx);      } catch (      AllConnectionsInUseException e) {      }catch (      ServerConnectivityException e) {        if (e instanceof ServerOperationException) {          throw e;        }        cms.removeBucketServerLocation(server);      }    }  }  return pool.execute(op);}  }
class C{  public NodeMetaData(final String platform,final String application){  this(platform,application,null,0,0);}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public void reset(){  mGestureDetector.reset();  mPreviousTransform.reset();  mActiveTransform.reset();}  }
class C{  public boolean useLinearRGBColorInterpolation(){  CSSEngine eng=((SVGOMDocument)getOwnerDocument()).getCSSEngine();  Value v=eng.getComputedStyle(this,null,SVGCSSEngine.COLOR_INTERPOLATION_INDEX);  return v.getStringValue().charAt(0) == 'l';}  }
class C{  private int readLimit(int desiredReadCount){  return desiredReadCount > buffered ? buffered : desiredReadCount;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void onSearchResultsLoaded(boolean wasPrefetch){  if (mHasExpanded || mHasMaximized) {    assert mSearchViewStartTimeNs != 0;    long durationMs=(System.nanoTime() - mSearchViewStartTimeNs) / 1000000;    logSearchPanelLoadDuration(wasPrefetch,durationMs);  }  mIsSearchPanelFullyPreloaded=true;}  }
class C{  static String plurales(final String s,final Integer i){  return i == null ? UNKNOWN + " " + s+ "es" : i.intValue() != 1 ? i + " " + s+ "es" : "one " + s;}  }
class C{  protected boolean isMinimizeInternal(){  return isMinimizeForProcessor(getDecoratedObject());}  }
class C{  public static <T>ResourceList<T> formalizePageLinks(ResourceList<T> resourceList,String apiRoute){  if (resourceList != null) {    if (resourceList.getNextPageLink() != null) {      resourceList.setNextPageLink(apiRoute + "?pageLink=" + resourceList.getNextPageLink());    }    if (resourceList.getPreviousPageLink() != null) {      resourceList.setPreviousPageLink(apiRoute + "?pageLink=" + resourceList.getPreviousPageLink());    }  }  return resourceList;}  }
class C{  public static SoapMessageImpl createRequest(String queryDir,String fileName) throws Exception {  Soap message=createSoapMessage(queryDir,fileName);  if (!(message instanceof SoapMessageImpl)) {    throw new RuntimeException("Got " + message.getClass() + " instead of SoapMessage");  }  if (((SoapMessageImpl)message).isResponse()) {    throw new RuntimeException("Got response instead of request");  }  return (SoapMessageImpl)message;}  }
class C{  public FeatureTypeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean checkAfterCondition(UniformPair<EventBean[]> newOldEvents,StatementContext statementContext){  return afterConditionState.checkUpdateAfterCondition(newOldEvents,statementContext);}  }
class C{  public static void shutdownActive(ShutdownModeAmp mode,ExitCode exitCode,String msg,Result<String> result){  ShutdownSystem shutdown=_activeService.get();  if (shutdown != null) {    shutdown.shutdown(mode,exitCode,msg,result);    return;  }  shutdown=getCurrent();  if (shutdown != null) {    shutdown.shutdown(mode,exitCode,msg,result);    return;  }  msg=ShutdownSystem.class.getSimpleName() + " is not active:\n  " + msg;  log.warning(msg);  System.out.println(msg);  if (result != null) {    result.ok(msg);  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public static String zipFileToString(final File file) throws IOException {  try (Reader reader=new InputStreamReader(GzipUtils.createGzipInputStream(new FileInputStream(file)))){    return FileHelper.readerToString(reader);  } }  }
class C{  public CSSPropertiesChangedListener(){}  }
class C{  public static boolean canOpenCloseReg(String sessionID,Integer bookID) throws ValidationException, SecurityException {  boolean result=false;  try {    result=canOpenCloseReg(sessionID);  } catch (  SessionException e) {    log.error("No se puede obtener los permisos para abrir/cerrar registro",e);  }  return result;}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  public static JdkMarshaller jdkMarshaller(@Nullable String nodeName){  JdkMarshaller marsh=new JdkMarshaller();  setNodeName(new JdkMarshaller(),nodeName);  return marsh;}  }
class C{  public int recordReturnType(CtClass type,boolean useResultVar) throws CompileError {  gen.recordType(type);  return gen.recordReturnType(type,"$r",(useResultVar ? resultVarName : null),stable);}  }
class C{  private Object parseValue(GridField field,Object in){  if (in == null)   return null;  int dt=field.getDisplayType();  try {    if (dt == DisplayType.Integer || (DisplayType.isID(dt) && field.getColumnName().endsWith("_ID"))) {      if (in instanceof Integer)       return in;      int i=Integer.parseInt(in.toString());      return new Integer(i);    } else     if (DisplayType.isNumeric(dt)) {      if (in instanceof BigDecimal)       return in;      return DisplayType.getNumberFormat(dt).parse(in.toString());    } else     if (DisplayType.isDate(dt)) {      if (in instanceof Timestamp)       return in;      long time=0;      try {        time=DisplayType.getDateFormat_JDBC().parse(in.toString()).getTime();        return new Timestamp(time);      } catch (      Exception e) {        log.log(Level.SEVERE,in + "(" + in.getClass()+ ")"+ e);        time=DisplayType.getDateFormat(dt).parse(in.toString()).getTime();      }      return new Timestamp(time);    } else     if (in instanceof Boolean)     return ((Boolean)in).booleanValue() ? "Y" : "N";  } catch (  Exception ex) {    log.log(Level.SEVERE,"Object=" + in,ex);    String error=ex.getLocalizedMessage();    if (error == null || error.length() == 0)     error=ex.toString();    StringBuffer errMsg=new StringBuffer();    errMsg.append(field.getColumnName()).append(" = ").append(in).append(" - ").append(error);    ADialog.error(0,this,"ValidationError",errMsg.toString());    return null;  }  return in;}  }
class C{  public void send(String message){}  }
class C{  public static <T>List<T> splice(List<T> list,int index,int deleteCount){  return spliceImpl(list,index,deleteCount,false,null);}  }
class C{  private void configureBounds(boolean changed){  if (mDrawable == null || !mHaveLayout) {    return;  }  final int dwidth=mDrawable.getIntrinsicWidth();  final int dheight=mDrawable.getIntrinsicHeight();  final int vwidth=getWidth();  final int vheight=getHeight();  final boolean fits=(dwidth < 0 || vwidth == dwidth) && (dheight < 0 || vheight == dheight);  mDrawable.setBounds(0,0,dwidth,dheight);  if (changed || (mMinScale == 0 && mDrawable != null && mHaveLayout)) {    generateMatrix();    generateScale();  }  mMatrix.postRotate(getRotationDegree(),getWidth() / 2,getHeight() / 2);  if (fits || mMatrix.isIdentity()) {    mDrawMatrix=null;  } else {    mDrawMatrix=mMatrix;  }}  }
class C{  public void onError(CqEvent aCqEvent){}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  try {    completeElement();    started=true;    out.write("<" + qName);    if (atts != null) {      int count=atts.getLength();      for (int i=0; i < count; i++) {        String name=atts.getQName(i);        String value=atts.getValue(i);        out.write(" " + name + "='"+ normalize(value.toCharArray(),0,value.length())+ "'");      }    }  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public Set entrySet(){  if (entrySet == null)   entrySet=Collections.synchronizedSet(new EntrySet(),this);  return entrySet;}  }
class C{  public KMLPolyStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  public Instrumenter attachHypervolumeCollector(){  includeHypervolume=true;  return this;}  }
class C{  public String nodeLabel(){  return "NEGMAX: " + Formatter.convert(value);}  }
class C{  public static BNetwork extractBayesianNetworkFromString(String fullString){  InputSource is=new InputSource(new StringReader(fullString));  Document doc=XMLUtils.getXMLDocument(is);  Node mainNode=XMLUtils.getMainNode(doc);  if (mainNode.getNodeName().equals("state")) {    return getBayesianNetwork(mainNode);  }  for (int i=0; i < mainNode.getChildNodes().getLength(); i++) {    Node childNode=mainNode.getChildNodes().item(i);    if (childNode.getNodeName().equals("state")) {      return getBayesianNetwork(childNode);    }  }  log.warning("string does not contain 'xml' tag: " + fullString);  return new BNetwork();}  }
class C{  public StandardPCPolicy(OMGraphicHandlerLayer layer){  this(layer,true);}  }
class C{  public ASN1InputStream(byte[] input){  this(new ByteArrayInputStream(input),input.length);}  }
class C{  public TextBuilder(){  _capacity=C0;  _low=new char[C0];  _high=new char[1][];  _high[0]=_low;}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected int countAncestors(ElemTemplateElement elem){  int count=0;  while (null != elem) {    count++;    elem=elem.getParentElem();  }  return count;}  }
class C{  public static int dayFromDateValue(long x){  return (int)(x & 31);}  }
class C{  public void pointRenderer(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info,ContourPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,ColorBar colorBar,ContourDataset data,CrosshairState crosshairState){  RectangularShape entityArea;  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  RectangularShape rect=new Ellipse2D.Double();  Object antiAlias=g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  Number[] xNumber=data.getXValues();  Number[] yNumber=data.getYValues();  Number[] zNumber=data.getZValues();  double[] x=new double[xNumber.length];  double[] y=new double[yNumber.length];  for (int i=0; i < x.length; i++) {    x[i]=xNumber[i].doubleValue();    y[i]=yNumber[i].doubleValue();  }  double transX;  double transDX;  double transY;  double transDY;  double size=dataArea.getWidth() * this.ptSizePct;  for (int k=0; k < x.length; k++) {    transX=domainAxis.valueToJava2D(x[k],dataArea,RectangleEdge.BOTTOM) - 0.5 * size;    transY=rangeAxis.valueToJava2D(y[k],dataArea,RectangleEdge.LEFT) - 0.5 * size;    transDX=size;    transDY=size;    rect.setFrame(transX,transY,transDX,transDY);    if (zNumber[k] != null) {      g2.setPaint(colorBar.getPaint(zNumber[k].doubleValue()));      g2.fill(rect);    } else     if (this.missingPaint != null) {      g2.setPaint(this.missingPaint);      g2.fill(rect);    }    entityArea=rect;    if (entities != null) {      String tip=null;      if (getToolTipGenerator() != null) {        tip=this.toolTipGenerator.generateToolTip(data,k);      }      String url=null;      ContourEntity entity=new ContourEntity((RectangularShape)entityArea.clone(),tip,url);      entity.setIndex(k);      entities.add(entity);    }    if (plot.isDomainCrosshairLockedOnData()) {      if (plot.isRangeCrosshairLockedOnData()) {        crosshairState.updateCrosshairPoint(x[k],y[k],transX,transY,PlotOrientation.VERTICAL);      } else {        crosshairState.updateCrosshairX(transX);      }    } else {      if (plot.isRangeCrosshairLockedOnData()) {        crosshairState.updateCrosshairY(transY);      }    }  }  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,antiAlias);}  }
class C{  protected void engineInitVerify(PublicKey publicKey) throws InvalidKeyException {  BigInteger p, q, y;  int n1;  if (publicKey == null || !(publicKey instanceof DSAPublicKey)) {    throw new InvalidKeyException("publicKey is not an instance of DSAPublicKey");  }  DSAParams params=((DSAPublicKey)publicKey).getParams();  p=params.getP();  q=params.getQ();  y=((DSAPublicKey)publicKey).getY();  n1=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n1 < 512 || n1 > 1024 || (n1 & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 || q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (y.signum() != 1) {    throw new InvalidKeyException("y <= 0");  }  dsaKey=(DSAKey)publicKey;  msgDigest.reset();}  }
class C{  public synchronized void toXml(XmlSerializer serializer) throws IOException {  serializer.startTag(null,"trkpt");  serializer.attribute(null,"lat",String.format(Locale.US,"%f",latitude));  serializer.attribute(null,"lon",String.format(Locale.US,"%f",longitude));  if (hasAltitude()) {    serializer.startTag(null,"ele").text(String.format(Locale.US,"%f",altitude)).endTag(null,"ele");  }  calendarInstance.setTimeInMillis(time);  String timestamp=ISO8601FORMAT.format(new Date(time));  serializer.startTag(null,"time").text(timestamp).endTag(null,"time");  serializer.endTag(null,"trkpt");}  }
class C{  @SuppressWarnings("unused") void update(final Map<E,Object> __,final O o){}  }
class C{  public static ClientBuilder builder(ClientConfig config){  return new FeignJaxRsClientBuilder(config);}  }
class C{  public static boolean isMarked(HalfEdge e){  return ((MarkHalfEdge)e).isMarked();}  }
class C{  protected void handleMarkSeenNotPermanent() throws MessagingException {  getMessageIn().setFlag(Flags.Flag.SEEN,true);  logStatusWarn("Message marked as SEEN, but the folder does not support a permanent SEEN flag.");}  }
class C{  public static String formatNameForClassLoading(String name){  if (name == null) {    return "java.lang.Object;";  }  if (name.equals("int") || name.equals("long") || name.equals("short")|| name.equals("float")|| name.equals("double")|| name.equals("byte")|| name.equals("char")|| name.equals("boolean")|| name.equals("void")) {    return name;  }  if (name.startsWith("[")) {    return name.replace('/','.');  }  if (name.startsWith("L")) {    name=name.substring(1);    if (name.endsWith(";")) {      name=name.substring(0,name.length() - 1);    }    return name.replace('/','.');  }  String prefix="";  if (name.endsWith("[]")) {    prefix="[";    name=name.substring(0,name.length() - 2);    if (name.equals("int")) {      return prefix + "I";    } else     if (name.equals("long")) {      return prefix + "J";    } else     if (name.equals("short")) {      return prefix + "S";    } else     if (name.equals("float")) {      return prefix + "F";    } else     if (name.equals("double")) {      return prefix + "D";    } else     if (name.equals("byte")) {      return prefix + "B";    } else     if (name.equals("char")) {      return prefix + "C";    } else     if (name.equals("boolean")) {      return prefix + "Z";    } else {      return prefix + "L" + name.replace('/','.')+ ";";    }  }  return name.replace('/','.');}  }
class C{  public RunQueue(ThreadGroup tg,boolean isDaemon,int priority,boolean autoStart){  super(tg,nextThreadName());  setDaemon(isDaemon);  setPriority(priority);  if (autoStart) {    start();  }}  }
class C{  public boolean fireMapMouseExited(MouseEvent evt){  if (DEBUG) {    logger.fine("MapMouseSupport: fireMapMouseExited");  }  boolean consumed=false;  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_EXITED) > 0) {    evt=new MapMouseEvent(getParentMode(),evt);    for (    MapMouseListener listener : this) {      listener.mouseExited(evt);      consumed=true;    }  }  if (proxy != null && !evt.isShiftDown()) {    proxy.mouseExited(evt);    consumed=true;  }  return consumed;}  }
class C{  public void resetBuffer(boolean errorsOnly){  checkContext();  LinkedList<LogRecord> m_logs=(LinkedList<LogRecord>)Env.getCtx().get(LOGS_KEY);  LinkedList<LogRecord> m_errors=(LinkedList<LogRecord>)Env.getCtx().get(ERRORS_KEY);  LinkedList<LogRecord[]> m_history=(LinkedList<LogRecord[]>)Env.getCtx().get(HISTORY_KEY);synchronized (m_errors) {    m_errors.clear();    m_history.clear();  }  if (!errorsOnly) {synchronized (m_logs) {      m_logs.clear();    }  }}  }
class C{  public static char[] encodeHex(byte[] data){  int l=data.length;  char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=DIGITS[(0xF0 & data[i]) >>> 4];    out[j++]=DIGITS[0x0F & data[i]];  }  return out;}  }
class C{  public WrappedByteBuffer putShort(short v){  _autoExpand(2);  _buf.putShort(v);  return this;}  }
class C{  public static int execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot);}  }
class C{  public OFBigSwitchVendorData(int dataType){  super();  this.dataType=dataType;}  }
class C{  public boolean toggleBookmark(int line) throws BadLocationException {  return iconArea.toggleBookmark(line);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:31.865 -0500",hash_original_method="51433E3131C29EA8B44042173638BB72",hash_generated_method="E05F314DF7DFFD505332A4BF546B7755") public NoHttpResponseException(String message){  super(message);}  }
class C{  private void writeComparison(final List<CaseStudyResult> results){  this.scenarioComparisonLines.add("casestudy\tn_{agents}\tscore_{avg}\tt_{trip, avg}\td_{trip, avg}[m]");  for (  CaseStudyResult result : results) {    this.scenarioComparisonLines.add(result.getName() + "\t" + result.getRouteSwitchers().getPersons().size()+ "\t"+ result.getRouteSwitchersAverageScore().getAverage()+ "\t"+ Time.writeTime(result.calcLegTimes.getAverageTripDuration())+ "\t"+ result.getCalcAverageTripLength().getAverageTripLength());  }}  }
class C{  public static boolean connectToNewNetwork(final Context ctx,final WifiManager wifiMgr,final ScanResult scanResult,final String password,final int numOpenNetworksKept){  final String security=ConfigSec.getScanResultSecurity(scanResult);  if (ConfigSec.isOpenNetwork(security)) {    checkForExcessOpenNetworkAndSave(wifiMgr,numOpenNetworksKept);  }  WifiConfiguration config=new WifiConfiguration();  config.SSID=convertToQuotedString(scanResult.SSID);  config.BSSID=scanResult.BSSID;  ConfigSec.setupSecurity(config,security,password);  int id=-1;  try {    id=wifiMgr.addNetwork(config);  } catch (  NullPointerException e) {    Log.e(TAG,"Weird!! Really!! What's wrong??",e);  }  if (id == -1) {    return false;  }  if (!wifiMgr.saveConfiguration()) {    return false;  }  config=getWifiConfiguration(wifiMgr,config,security);  if (config == null) {    return false;  }  return connectToConfiguredNetwork(ctx,wifiMgr,config,true);}  }
class C{  public byte verify(Message m,byte[] b,int length,TSIGRecord old){  m.tsigState=Message.TSIG_FAILED;  TSIGRecord tsig=m.getTSIG();  HMAC hmac=new HMAC(digest,digestBlockLength,key);  if (tsig == null)   return Rcode.FORMERR;  if (!tsig.getName().equals(name) || !tsig.getAlgorithm().equals(alg)) {    if (Options.check("verbose"))     System.err.println("BADKEY failure");    return Rcode.BADKEY;  }  long now=System.currentTimeMillis();  long then=tsig.getTimeSigned().getTime();  long fudge=tsig.getFudge();  if (Math.abs(now - then) > fudge * 1000) {    if (Options.check("verbose"))     System.err.println("BADTIME failure");    return Rcode.BADTIME;  }  if (old != null && tsig.getError() != Rcode.BADKEY && tsig.getError() != Rcode.BADSIG) {    DNSOutput out=new DNSOutput();    out.writeU16(old.getSignature().length);    hmac.update(out.toByteArray());    hmac.update(old.getSignature());  }  m.getHeader().decCount(Section.ADDITIONAL);  byte[] header=m.getHeader().toWire();  m.getHeader().incCount(Section.ADDITIONAL);  hmac.update(header);  int len=m.tsigstart - header.length;  hmac.update(b,header.length,len);  DNSOutput out=new DNSOutput();  tsig.getName().toWireCanonical(out);  out.writeU16(tsig.dclass);  out.writeU32(tsig.ttl);  tsig.getAlgorithm().toWireCanonical(out);  long time=tsig.getTimeSigned().getTime() / 1000;  int timeHigh=(int)(time >> 32);  long timeLow=(time & 0xFFFFFFFFL);  out.writeU16(timeHigh);  out.writeU32(timeLow);  out.writeU16(tsig.getFudge());  out.writeU16(tsig.getError());  if (tsig.getOther() != null) {    out.writeU16(tsig.getOther().length);    out.writeByteArray(tsig.getOther());  } else {    out.writeU16(0);  }  hmac.update(out.toByteArray());  byte[] signature=tsig.getSignature();  int digestLength=hmac.digestLength();  int minDigestLength=digest.equals("md5") ? 10 : digestLength / 2;  if (signature.length > digestLength) {    if (Options.check("verbose"))     System.err.println("BADSIG: signature too long");    return Rcode.BADSIG;  } else   if (signature.length < minDigestLength) {    if (Options.check("verbose"))     System.err.println("BADSIG: signature too short");    return Rcode.BADSIG;  } else   if (!hmac.verify(signature,true)) {    if (Options.check("verbose"))     System.err.println("BADSIG: signature verification");    return Rcode.BADSIG;  }  m.tsigState=Message.TSIG_VERIFIED;  return Rcode.NOERROR;}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        spannable.setSpan(new ImageSpan(context,entry.getValue()),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  public Vector3f add(float addX,float addY,float addZ){  return new Vector3f(x + addX,y + addY,z + addZ);}  }
class C{  @SuppressWarnings("unchecked") private void rehash(HashEntry<K,V> node){  HashEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  int newCapacity=oldCapacity << 1;  threshold=(int)(newCapacity * loadFactor);  HashEntry<K,V>[] newTable=(HashEntry<K,V>[])new HashEntry<?,?>[newCapacity];  int sizeMask=newCapacity - 1;  for (int i=0; i < oldCapacity; i++) {    HashEntry<K,V> e=oldTable[i];    if (e != null) {      HashEntry<K,V> next=e.next;      int idx=e.hash & sizeMask;      if (next == null)       newTable[idx]=e; else {        HashEntry<K,V> lastRun=e;        int lastIdx=idx;        for (HashEntry<K,V> last=next; last != null; last=last.next) {          int k=last.hash & sizeMask;          if (k != lastIdx) {            lastIdx=k;            lastRun=last;          }        }        newTable[lastIdx]=lastRun;        for (HashEntry<K,V> p=e; p != lastRun; p=p.next) {          V v=p.value;          int h=p.hash;          int k=h & sizeMask;          HashEntry<K,V> n=newTable[k];          newTable[k]=new HashEntry<K,V>(h,p.key,v,n);        }      }    }  }  int nodeIndex=node.hash & sizeMask;  node.setNext(newTable[nodeIndex]);  newTable[nodeIndex]=node;  table=newTable;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public boolean free(T value){  if (_freeRing.free(value))   return true; else   return _freeRingSoft.free(value);}  }
class C{  int incServiceInvocation(){  return serviceInvocationCount++;}  }
class C{  @Override public void processOtherContent(Wrapper<Content> content){  if (processFirstOtherContent) {    builder.append(baseIndent).append("otherContentList=").append("\n");    processFirstOtherContent=false;  }  builder.append(content.toString(baseIndent)).append("\n");}  }
class C{  public void clearYTextLabels(int scale){  mYTextLabels.get(scale).clear();}  }
class C{  private void initMenu(TypedArray ta){  int listTextAppearance;  int gridTextAppearance;  int tintColor;  listTextAppearance=ta.getResourceId(2,R.style.BottomSheet_ListItem_TextAppearance);  gridTextAppearance=ta.getResourceId(3,R.style.BottomSheet_GridItem_TextAppearance);  tintColor=ta.getColor(7,Integer.MIN_VALUE);  adapter=new GridAdapter(getContext(),builder.menuItems,builder.isGrid,listTextAppearance,gridTextAppearance,tintColor);  grid.setAdapter(adapter);}  }
class C{  public void update(EventBean[] newData,EventBean[] oldData){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputProcessNonBuffered(newData,oldData);  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processViewResult(newData,oldData,isGenerateSynthetic);  if ((!isGenerateSynthetic) && (!isGenerateNatural)) {    if (AuditPath.isAuditEnabled) {      OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);    }    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aOutputProcessNonBuffered();    }    return;  }  boolean forceOutput=false;  if ((newData == null) && (oldData == null) && ((newOldEvents == null) || (newOldEvents.getFirst() == null && newOldEvents.getSecond() == null))) {    forceOutput=true;  }  if (childView != null) {    postProcess(forceOutput,newOldEvents,childView);  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputProcessNonBuffered();  }}  }
class C{  public XhtmlFrameSetDocument appendHead(Element value){  head.addElement(value);  return (this);}  }
class C{  public void loadCvModel(VariableTableModel varModel,CvTableModel cvModel,IndexedCvTableModel iCvModel){  if (cvModel == null) {    log.error("loadCvModel must be given a non-null argument");    return;  }  if (mRootElement == null) {    log.error("loadCvModel called before readFile() succeeded");    return;  }  try {    if (varModel != null) {      LocoFile.loadVariableModel(mRootElement.getChild("locomotive"),varModel);    }    LocoFile.loadCvModel(mRootElement.getChild("locomotive"),cvModel,iCvModel,getDecoderFamily());  } catch (  Exception ex) {    log.error("Error reading roster entry",ex);    try {      JOptionPane.showMessageDialog(null,ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("ErrorReadingText"),ResourceBundle.getBundle("jmri.jmrit.roster.JmritRosterBundle").getString("ErrorReadingTitle"),JOptionPane.ERROR_MESSAGE);    } catch (    HeadlessException he) {    }  }}  }
class C{  private Long initMasterData() throws NonUniqueBusinessKeyException, ObjectNotFoundException {  Long initialCustomerAdminKey=null;  tpAndSupplier=Organizations.createOrganization(mgr,OrganizationRoleType.SUPPLIER,OrganizationRoleType.TECHNOLOGY_PROVIDER);  mp=Marketplaces.ensureMarketplace(tpAndSupplier,tpAndSupplier.getOrganizationId(),mgr);  Marketplaces.grantPublishing(tpAndSupplier,mp,mgr,false);  supplierOrgId=tpAndSupplier.getOrganizationId();  TechnicalProduct tProd=TechnicalProducts.createTechnicalProduct(mgr,tpAndSupplier,"TP_ID",false,ServiceAccessType.LOGIN);  prepareTechnicalProduct(tProd);  SupportedCurrency sc=new SupportedCurrency();  sc.setCurrency(Currency.getInstance("EUR"));  mgr.persist(sc);  addProducts(tpAndSupplier,tProd,13,testProducts,mp);  ProductReference pref;  pref=new ProductReference(testProducts.get(10),testProducts.get(11));  mgr.persist(pref);  pref=new ProductReference(testProducts.get(10),testProducts.get(12));  mgr.persist(pref);  tProd=TechnicalProducts.createTechnicalProduct(mgr,tpAndSupplier,"TP_ID_ASYNC",true,ServiceAccessType.LOGIN);  prepareTechnicalProduct(tProd);  addProducts(tpAndSupplier,tProd,2,asyncTestProducts,mp);  Organization cust=null;  for (int i=1; i <= 2; i++) {    cust=Organizations.createOrganization(mgr,OrganizationRoleType.CUSTOMER);    OrganizationReference ref=new OrganizationReference(tpAndSupplier,cust,OrganizationReferenceType.SUPPLIER_TO_CUSTOMER);    mgr.persist(ref);    testOrganizations.add(cust);    ArrayList<PlatformUser> userlist=new ArrayList<PlatformUser>();    testUsers.put(cust,userlist);    PlatformUser admin=Organizations.createUserForOrg(mgr,cust,true,"admin");    if (initialCustomerAdminKey == null) {      initialCustomerAdminKey=Long.valueOf(admin.getKey());    }    userlist.add((PlatformUser)ReflectiveClone.clone(admin));    for (int j=1; j <= 5; j++) {      PlatformUser user=Organizations.createUserForOrg(mgr,cust,false,"user" + j);      userlist.add((PlatformUser)ReflectiveClone.clone(user));    }    UserGroup unit1=new UserGroup();    unit1.setName(UNIT1 + cust.getOrganizationId());    unit1.setOrganization_tkey(cust.getKey());    unit1.setOrganization(cust);    mgr.persist(unit1);    UserGroup unit2=new UserGroup();    unit2.setName(UNIT2 + cust.getOrganizationId());    unit2.setOrganization_tkey(cust.getKey());    unit2.setOrganization(cust);    mgr.persist(unit2);  }  supplierUser=Organizations.createUserForOrg(mgr,tpAndSupplier,true,"admin");  UserGroup unit_supplier=new UserGroup();  unit_supplier.setName(UNIT_OTHER_ORG + tpAndSupplier.getOrganizationId());  unit_supplier.setOrganization_tkey(tpAndSupplier.getKey());  unit_supplier.setOrganization(tpAndSupplier);  mgr.persist(unit_supplier);  return initialCustomerAdminKey;}  }
class C{  public void addOrRemoveRequestingVDC(Operation op,String tokenId,String requestingVDC){  InterProcessLock tokenLock=null;  String lockName=String.format(TOKEN_MAP_LOCK_PREFIX,tokenId.toString());  try {    tokenLock=coordinator.getLock(lockName);    if (tokenLock == null) {      log.error("Could not acquire lock for requested token map update");      throw SecurityException.fatals.couldNotAcquireRequestedTokenMapCaching();    }    tokenLock.acquire();    if (op == Operation.ADD_VDC) {      addRequestingVDC(tokenId,requestingVDC);    } else {      removeRequestingVDC(tokenId,requestingVDC);    }  } catch (  Exception ex) {    log.error("Could not acquire lock while trying to update requested token map.",ex);  } finally {    try {      if (tokenLock != null) {        tokenLock.release();      }    } catch (    Exception ex) {      log.error("Unable to release requested token map lock",ex);    }  }}  }
class C{  private BinlogPosition findHeartbeat(MaxwellReplicator r) throws Exception {  r.startReplicator();  for (RowMap row=r.getRow(); row != null; row=r.getRow()) {    if (Objects.equals(r.getLastHeartbeatRead(),recoveryInfo.heartbeat))     return row.getPosition();  }  return null;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public Set<String> knownMethods(String className){  Set<String> r=new HashSet<String>();  Map<String,List<Branch>> methods=branchMap.get(className);  if (methods != null)   r.addAll(methods.keySet());  return r;}  }
class C{  public void recreateReplicationSets(Map<String,RecreateReplicationSetRequestParams> rsetParams) throws RecoverPointException {  if (rsetParams != null && !rsetParams.isEmpty()) {    List<String> volumeWWNs=new ArrayList<String>();    try {      RecreateReplicationSetRequestParams param=rsetParams.values().iterator().next();      ConsistencyGroupUID cgID=param.getConsistencyGroupUID();      functionalAPI.rescanSANVolumesInAllClusters(true);      ConsistencyGroupSettingsChangesParam cgSettingsParam=new ConsistencyGroupSettingsChangesParam();      ActivationSettingsChangesParams cgActivationSettings=new ActivationSettingsChangesParams();      cgActivationSettings.setEnable(true);      cgActivationSettings.setStartTransfer(true);      cgSettingsParam.setActivationParams(cgActivationSettings);      cgSettingsParam.setGroupUID(cgID);      for (      Entry<String,RecreateReplicationSetRequestParams> entry : rsetParams.entrySet()) {        RecreateReplicationSetRequestParams rsetParam=entry.getValue();        logger.info("Adding replication set: " + rsetParam.getName());        ReplicationSetSettingsChangesParam repSetSettings=new ReplicationSetSettingsChangesParam();        repSetSettings.setName(rsetParam.getName());        repSetSettings.setShouldAttachAsClean(false);        for (        CreateRSetVolumeParams volume : rsetParam.getVolumes()) {          UserVolumeSettingsChangesParam volSettings=new UserVolumeSettingsChangesParam();          volSettings.setNewVolumeID(volume.getDeviceUID());          volSettings.setCopyUID(volume.getConsistencyGroupCopyUID());          volSettings.getCopyUID().setGroupUID(cgID);          repSetSettings.getVolumesChanges().add(volSettings);        }        cgSettingsParam.getReplicationSetsChanges().add(repSetSettings);        volumeWWNs.add(entry.getKey());      }      functionalAPI.setConsistencyGroupSettings(cgSettingsParam);      logger.info("Checking for volumes unattached to splitters");      RecoverPointUtils.verifyCGVolumesAttachedToSplitter(functionalAPI,cgID);      RecoverPointImageManagementUtils rpiMgmt=new RecoverPointImageManagementUtils();      logger.info("Waiting for links to become active for CG ");      rpiMgmt.waitForCGLinkState(functionalAPI,cgID,RecoverPointImageManagementUtils.getPipeActiveState(functionalAPI,cgID),PipeState.PAUSED);    } catch (    FunctionalAPIActionFailedException_Exception e) {      throw RecoverPointException.exceptions.failedToRecreateReplicationSet(volumeWWNs.toString(),e);    }catch (    FunctionalAPIInternalError_Exception e) {      throw RecoverPointException.exceptions.failedToRecreateReplicationSet(volumeWWNs.toString(),e);    }  }}  }
class C{  protected boolean canPathsBeRemoved(TreePath[] paths){  if (rowMapper == null || selection == null || selectionMode == TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION)   return true; else {    BitSet bitSet=new BitSet();    int counter;    int pathCount=paths.length;    int anIndex;    int min=-1;    int validCount=0;    TreePath[] tempPath=new TreePath[1];    int[] rows;    lastPaths.clear();    for (counter=0; counter < pathCount; counter++) {      if (paths[counter] != null) {        lastPaths.put(paths[counter],Boolean.TRUE);      }    }    for (counter=selection.length - 1; counter >= 0; counter--) {      if (lastPaths.get(selection[counter]) == null) {        tempPath[0]=selection[counter];        rows=rowMapper.getRowsForPaths(tempPath);        if (rows != null && rows[0] != -1 && !bitSet.get(rows[0])) {          validCount++;          if (min == -1)           min=rows[0]; else           min=Math.min(min,rows[0]);          bitSet.set(rows[0]);        }      }    }    lastPaths.clear();    if (validCount > 1) {      for (counter=min + validCount - 1; counter >= min; counter--)       if (!bitSet.get(counter))       return false;    }  }  return true;}  }
class C{  public Object exec(List arguments) throws TemplateModelException {  Object key=unwrap((TemplateModel)arguments.get(0));  return wrap(((Map)object).get(key));}  }
class C{  public void collapseBuilding(Building bldg){  buildings.removeElement(bldg);  Enumeration<Coords> bldgCoords=bldg.getCoords();  while (bldgCoords.hasMoreElements()) {    final Coords coords=bldgCoords.nextElement();    collapseBuilding(coords);  }}  }
class C{  public int size(){  return size;}  }
class C{  @Override public void run(){  if (asInitiator) {    log.info("About to send friends.");    sendFriends();    log.info("Sent friends. About to send messages.");    sendMessages();    log.info("Sent messages. About to receive friends.");    receiveFriends();    log.info("Received friends. About to receive messages.");    receiveMessages();  } else {    receiveFriends();    receiveMessages();    sendFriends();    sendMessages();  }  if (getExchangeStatus() == Status.IN_PROGRESS) {    setExchangeStatus(Status.SUCCESS);  }  if (callback == null) {    log.warn("No callback provided to exchange.");    return;  }  if (getExchangeStatus() == Status.SUCCESS) {    callback.success(this);    return;  } else   if (getExchangeStatus() == Status.ERROR_RECOVERABLE) {    callback.recover(this,mErrorMessage);    return;  } else {    callback.failure(this,mErrorMessage);    return;  }}  }
class C{  private void checkResourceBundleExistence(){  localizer.checkExistenceOfBundleFiles();}  }
class C{  public void initializeIterations(){  eigenvalue=Double.NaN;  int n=matrix.columns();  double[] eigenvectorComponents=new double[n];  for (int i=0; i < n; i++) {    eigenvectorComponents[i]=1.0;  }  eigenvector=new Vector(eigenvectorComponents);  n=matrix.rows();  eigenvectorComponents=new double[n];  for (int i=0; i < n; i++) {    eigenvectorComponents[i]=1.0;  }  transposedEigenvector=new Vector(eigenvectorComponents);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public String mapIndexToDisplayName(int index){  String valueTypeString=mapIndex(index);  valueTypeString=valueTypeString.replaceAll("_"," ");  valueTypeString=String.valueOf(valueTypeString.charAt(0)).toUpperCase() + valueTypeString.substring(1);  return valueTypeString;}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  public boolean close(){  return naviView.close();}  }
class C{  public boolean isGlobal(){  return global;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  boolean isLocalAuthenticationValid(){  if (localPrivateKey != null) {    try {      localPrivateKey.getAlgorithm();    } catch (    Exception e) {      invalidate();      return false;    }  }  return true;}  }
class C{  static ParameterDefinitionBuilder implicitParameter(AbstractTransformer gen,String name){  return new ParameterDefinitionBuilder(gen,name);}  }
class C{  public DatabaseHelper(final Context appContext){  super(appContext,DB_NAME,null,RadioBeacon.DATABASE_VERSION);  Log.i(TAG,"Database scheme version " + RadioBeacon.DATABASE_VERSION);  mContext=appContext.getApplicationContext();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMMLS");  translateAll(environment,instruction,"SMMLS",instructions);}  }
class C{  public void resetOficina(){  this.estadoOficina=null;  this.posOficina=null;  this.idOficinaAsunto=null;  this.idOficina=null;  this.codigoOficina=null;  this.nombreOficina=null;  this.idPerfil=null;  this.nombrePerfil=null;}  }
class C{  private List<KeyValue> filter(Filter filter,List<KeyValue> kvs) throws IOException {  filter.reset();  List<KeyValue> tmp=new ArrayList<KeyValue>(kvs.size());  tmp.addAll(kvs);  boolean filteredOnRowKey=false;  List<KeyValue> nkvs=new ArrayList<KeyValue>(tmp.size());  for (  KeyValue kv : tmp) {    if (filter.filterRowKey(kv.getBuffer(),kv.getRowOffset(),kv.getRowLength())) {      filteredOnRowKey=true;      break;    }    Filter.ReturnCode filterResult=filter.filterKeyValue(kv);    if (filterResult == Filter.ReturnCode.INCLUDE) {      nkvs.add(kv);    } else     if (filterResult == Filter.ReturnCode.NEXT_ROW) {      break;    } else     if (filterResult == Filter.ReturnCode.NEXT_COL || filterResult == Filter.ReturnCode.SKIP) {      continue;    }  }  if (filter.hasFilterRow() && !filteredOnRowKey) {    filter.filterRow(nkvs);  }  if (filter.filterRow() || filteredOnRowKey) {    nkvs.clear();  }  tmp=nkvs;  return tmp;}  }
class C{  public ImageSource dimensions(int sWidth,int sHeight){  if (bitmap == null) {    this.sWidth=sWidth;    this.sHeight=sHeight;  }  setInvariants();  return this;}  }
class C{  public String binarizeNumericAttributesTipText(){  return "Just binarize numeric attributes instead of properly discretizing them.";}  }
class C{  public void marketDataType(int reqId,int marketDataType){  _log.debug("marketDataType: " + reqId + " "+ marketDataType);}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:56.536 -0500",hash_original_method="635B8E92CCDF8F873CC8B4D59C2B03E9",hash_generated_method="070B6C6F29C5E439FA17334A1ABD91F5") public GridLayoutAnimationController(Animation animation){  this(animation,0.5f,0.5f);}  }
class C{  public static GeoArea makeGeoArea(final PlanetModel planetModel,final double topLat,final double bottomLat,final double leftLon,final double rightLon){  return GeoBBoxFactory.makeGeoBBox(planetModel,topLat,bottomLat,leftLon,rightLon);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void appendInstruction(OFFlowMod.Builder fmb,OFInstruction inst){  List<OFInstruction> newIl=new ArrayList<OFInstruction>();  List<OFInstruction> oldIl=fmb.getInstructions();  if (oldIl != null) {    newIl.addAll(fmb.getInstructions());  }  for (  OFInstruction i : newIl) {    if (i.getType() == inst.getType()) {      newIl.remove(i);    }  }  newIl.add(inst);  fmb.setInstructions(newIl);}  }
class C{  @Override public void endWindow(){  if (!debug) {    return;  }  if (tuple_count == 0) {    return;  }  long elapsedTime=System.currentTimeMillis() - windowStartTime;  if (elapsedTime == 0) {    elapsedTime=1;  }  long average;  long tuples_per_sec=(tuple_count * 1000) / elapsedTime;  if (rollingwindowcount == 1) {    average=tuples_per_sec;  } else {    long slots;    if (count_denominator == rollingwindowcount) {      tuple_numbers[tuple_index]=tuple_count;      time_numbers[tuple_index]=elapsedTime;      slots=rollingwindowcount;      tuple_index++;      if (tuple_index == rollingwindowcount) {        tuple_index=0;      }    } else {      tuple_numbers[count_denominator - 1]=tuple_count;      time_numbers[count_denominator - 1]=elapsedTime;      slots=count_denominator;      count_denominator++;    }    long time_slot=0;    long numtuples=0;    for (int i=0; i < slots; i++) {      numtuples+=tuple_numbers[i];      time_slot+=time_numbers[i];    }    average=(numtuples * 1000) / time_slot;  }  log.debug(String.format("\nWindowid (%d), Time (%d ms): The rate for %d tuples is %d. This window had %d tuples_per_sec ",count_windowid++,elapsedTime,tuple_count,average,tuples_per_sec));}  }
class C{  private void exportBannerMaterial(String materialName,int baseColorIndex){  File mtlfile=new File(Options.outputDir,Options.mtlFileName);  Color baseColor=getColorById(baseColorIndex);  try (PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(mtlfile,true)))){    out.println("");    out.println("");    out.println("newmtl " + materialName);    out.println("Kd " + intChannel2Float(baseColor.getRed()) + " "+ intChannel2Float(baseColor.getGreen())+ " "+ intChannel2Float(baseColor.getBlue()));    out.println("Ks 0.0000 0.0000 0.0000");    out.println("map_Kd tex/" + materialName + ".png");    out.print("map_Kd tex/banner_base_a.png");  } catch (  IOException e) {    throw new RuntimeException("Unexpected error apending material file");  }}  }
class C{  public void updateUI(){  setUI((ScrollBarUI)UIManager.getUI(this));}  }
class C{  protected void truncatedDropCar(PrintWriter file,Car car,boolean isManifest){  if (isLocalMove(car)) {    return;  }  dropCar(file,car,new StringBuffer(Setup.getDropCarPrefix()),Setup.getDropTruncatedManifestMessageFormat(),false,isManifest);}  }
class C{  public void addErrorMessage(Object key,String messageText,String pageId,int type,Control control){  if (control != null) {    for (int i=0; i < pagesToAdd.length; i++) {      pagesToAdd[i].getManagedForm().getMessageManager().addMessage(key,messageText,pageId,type,control);    }  }}  }
class C{  public void output(OutputStream out){  if (doctype != null) {    doctype.output(out);    try {      out.write('\n');    } catch (    Exception e) {    }  }  html.output(out);}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  super.endCompose(sroot);  m_frameSize=cstate.getFrameSize();  cstate.resetStackFrameSize();}  }
class C{  public DataSource(InputStream stream){  super();  m_BatchBuffer=null;  m_Loader=new ArffLoader();  try {    m_Loader.setSource(stream);  } catch (  Exception e) {    m_Loader=null;  }  m_File=null;  m_URL=null;  m_Incremental=(m_Loader instanceof IncrementalConverter);  initBatchBuffer();}  }
class C{  public static OrderByClause create(String... properties){  return new OrderByClause(properties);}  }
class C{  private final Object arenaExchange(Object item,boolean timed,long ns){  Node[] a=arena;  Node p=participant.get();  for (int i=p.index; ; ) {    int b, m, c;    long j;    Node q=(Node)U.getObjectVolatile(a,j=(i << ASHIFT) + ABASE);    if (q != null && U.compareAndSwapObject(a,j,q,null)) {      Object v=q.item;      q.match=item;      Thread w=q.parked;      if (w != null)       U.unpark(w);      return v;    } else     if (i <= (m=(b=bound) & MMASK) && q == null) {      p.item=item;      if (U.compareAndSwapObject(a,j,null,p)) {        long end=(timed && m == 0) ? System.nanoTime() + ns : 0L;        Thread t=Thread.currentThread();        for (int h=p.hash, spins=SPINS; ; ) {          Object v=p.match;          if (v != null) {            U.putOrderedObject(p,MATCH,null);            p.item=null;            p.hash=h;            return v;          } else           if (spins > 0) {            h^=h << 1;            h^=h >>> 3;            h^=h << 10;            if (h == 0)             h=SPINS | (int)t.getId(); else             if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)             Thread.yield();          } else           if (U.getObjectVolatile(a,j) != p)           spins=SPINS; else           if (!t.isInterrupted() && m == 0 && (!timed || (ns=end - System.nanoTime()) > 0L)) {            U.putObject(t,BLOCKER,this);            p.parked=t;            if (U.getObjectVolatile(a,j) == p)             U.park(false,ns);            p.parked=null;            U.putObject(t,BLOCKER,null);          } else           if (U.getObjectVolatile(a,j) == p && U.compareAndSwapObject(a,j,p,null)) {            if (m != 0)             U.compareAndSwapInt(this,BOUND,b,b + SEQ - 1);            p.item=null;            p.hash=h;            i=p.index>>>=1;            if (Thread.interrupted())             return null;            if (timed && m == 0 && ns <= 0L)             return TIMED_OUT;            break;          }        }      } else       p.item=null;    } else {      if (p.bound != b) {        p.bound=b;        p.collides=0;        i=(i != m || m == 0) ? m : m - 1;      } else       if ((c=p.collides) < m || m == FULL || !U.compareAndSwapInt(this,BOUND,b,b + SEQ + 1)) {        p.collides=c + 1;        i=(i == 0) ? m : i - 1;      } else       i=m + 1;      p.index=i;    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.444 -0400",hash_original_method="CECA15CD5926CD1CCF5DBC543CFC909D",hash_generated_method="159894D458809E73B0695BC5746BF16C") protected void processChars(char[] chars,int offset,int length){}  }
class C{  protected void sequence_PropertySetterDeclaration(ISerializationContext context,PropertySetterDeclaration semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.PROPERTY_NAME_OWNER__DECLARED_NAME));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.SETTER_DECLARATION__FPAR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.SETTER_DECLARATION__FPAR));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.FUNCTION_OR_FIELD_ACCESSOR__BODY) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.FUNCTION_OR_FIELD_ACCESSOR__BODY));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0(),semanticObject.getDeclaredName());  feeder.accept(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_2_0(),semanticObject.getFpar());  feeder.accept(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_4_0(),semanticObject.getBody());  feeder.finish();}  }
class C{  @Override public boolean isCancelled(){  return cancelled;}  }
class C{  public static boolean isFloatCmpConstant(Value val,Condition condition,boolean unorderedIsTrue){  if (!(condition == Condition.EQ && unorderedIsTrue || condition == Condition.NE && !unorderedIsTrue)) {    return false;  }  return isJavaConstant(val) && asJavaConstant(val).isDefaultForKind();}  }
class C{  @Override public void clearAnswer(){  DateTime ldt=new DateTime();  mDatePicker.init(ldt.getYear(),ldt.getMonthOfYear() - 1,ldt.getDayOfMonth(),mDateListener);  mTimePicker.setCurrentHour(ldt.getHourOfDay());  mTimePicker.setCurrentMinute(ldt.getMinuteOfHour());  mSeconds=ldt.getSecondOfMinute();}  }
class C{  public double percentFromTo(float from,float to){  return phi(to) - phi(from);}  }
class C{  protected static void handleColorInterpolationFilters(Filter filter,Element filterElement){  if (filter instanceof FilterColorInterpolation) {    boolean isLinear=CSSUtilities.convertColorInterpolationFilters(filterElement);    ((FilterColorInterpolation)filter).setColorSpaceLinear(isLinear);  }}  }
class C{  @Override final public boolean isKeys(){  return true;}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  public static ComponentUI createUI(JComponent bar){  return new StyledProgressBarUI(StyleUtil.getStyle());}  }
class C{  @Snippet public static Object instanceofPrimary(KlassPointer hub,Object object,@ConstantParameter int superCheckOffset,Object trueValue,Object falseValue){  if (probability(NOT_FREQUENT_PROBABILITY,object == null)) {    isNull.inc();    return falseValue;  }  GuardingNode anchorNode=SnippetAnchorNode.anchor();  KlassPointer objectHub=loadHubIntrinsic(PiNode.piCastNonNull(object,anchorNode));  if (probability(NOT_LIKELY_PROBABILITY,objectHub.readKlassPointer(superCheckOffset,PRIMARY_SUPERS_LOCATION).notEqual(hub))) {    displayMiss.inc();    return falseValue;  }  displayHit.inc();  return trueValue;}  }
class C{  private void retrieveExternalCSS(Audit audit){  if (persistOnTheFly) {    externalCssMap.put(audit.getId(),contentDataService.getExternalStylesheetFromAudit(audit));  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Retrieved " + externalCssMap.get(audit.getId()).size() + " external css  for the audit n "+ audit.getId());  }}  }
class C{  public static boolean checkAndCreateWorkspaceRoot(final String wsRoot){  try {    final File fRoot=new File(wsRoot);    if (!fRoot.exists()) {      return false;    }    File dotFile=new File(wsRoot + File.separator + WorkspacePreferences.WS_IDENTIFIER);    if (!dotFile.exists()) {      final boolean created=dotFile.createNewFile();      if (!created) {        return false;      }      dotFile=new File(wsRoot + File.separator + WorkspacePreferences.MODEL_IDENTIFIER);      dotFile.createNewFile();    }    return true;  } catch (  final Exception err) {    err.printStackTrace();    return false;  }}  }
class C{  public static List singletonList(Object o){  return new SingletonList(o);}  }
class C{  @Override protected void doAction(){  File csrFile=null;  FileOutputStream fos=null;  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    Provider provider=history.getExplicitProvider();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());    String keyPairAlg=privateKey.getAlgorithm();    KeyPairType keyPairType=KeyPairUtil.getKeyPairType(privateKey);    if (keyPairType == null) {      throw new CryptoException(MessageFormat.format(res.getString("GenerateCsrAction.NoCsrForKeyPairAlg.message"),keyPairAlg));    }    String path=CurrentDirectory.get().getAbsolutePath();    File keyStoreFile=history.getFile();    if (keyStoreFile != null) {      path=keyStoreFile.getAbsoluteFile().getParent();    }    DGenerateCsr dGenerateCsr=new DGenerateCsr(frame,alias,privateKey,keyPairType,path,provider);    dGenerateCsr.setLocationRelativeTo(frame);    dGenerateCsr.setVisible(true);    if (!dGenerateCsr.generateSelected()) {      return;    }    CsrType format=dGenerateCsr.getFormat();    SignatureType signatureType=dGenerateCsr.getSignatureType();    String challenge=dGenerateCsr.getChallenge();    String unstructuredName=dGenerateCsr.getUnstructuredName();    boolean useCertificateExtensions=dGenerateCsr.isAddExtensionsWanted();    csrFile=dGenerateCsr.getCsrFile();    X509Certificate firstCertInChain=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)))[0];    fos=new FileOutputStream(csrFile);    if (format == CsrType.PKCS10) {      String csr=Pkcs10Util.getCsrEncodedDerPem(Pkcs10Util.generateCsr(firstCertInChain,privateKey,signatureType,challenge,unstructuredName,useCertificateExtensions,provider));      fos.write(csr.getBytes());    } else {      SpkacSubject subject=new SpkacSubject(X500NameUtils.x500PrincipalToX500Name(firstCertInChain.getSubjectX500Principal()));      PublicKey publicKey=firstCertInChain.getPublicKey();      Spkac spkac=new Spkac(challenge,signatureType,subject,publicKey,privateKey);      spkac.output(fos);    }  } catch (  FileNotFoundException ex) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("GenerateCsrAction.NoWriteFile.message"),csrFile),res.getString("GenerateCsrAction.GenerateCsr.Title"),JOptionPane.WARNING_MESSAGE);    return;  }catch (  Exception ex) {    DError.displayError(frame,ex);    return;  } finally {    IOUtils.closeQuietly(fos);  }  JOptionPane.showMessageDialog(frame,res.getString("GenerateCsrAction.CsrGenerationSuccessful.message"),res.getString("GenerateCsrAction.GenerateCsr.Title"),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public int lineno(StreamTokenizer stok){  return getAlgLineNum() + stok.lineno();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.809 -0500",hash_original_method="B98E5D45204294650F3F1CE04E4B9F56",hash_generated_method="6DB0E7689EB3EEE02057D1BF22BCF5E0") static String retrieveAlphaId(ComprehensionTlv ctlv) throws ResultException {  if (ctlv != null) {    byte[] rawValue=ctlv.getRawValue();    int valueIndex=ctlv.getValueIndex();    int length=ctlv.getLength();    if (length != 0) {      try {        return IccUtils.adnStringFieldToString(rawValue,valueIndex,length);      } catch (      IndexOutOfBoundsException e) {        throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);      }    } else {      return CatService.STK_DEFAULT;    }  } else {    return CatService.STK_DEFAULT;  }}  }
class C{  public void createConnection(NetworkInterface anotherInterface){  if (!isConnected(anotherInterface) && (this != anotherInterface)) {    Connection con=new VBRConnection(this.host,this,anotherInterface.getHost(),anotherInterface);    connect(con,anotherInterface);  }}  }
class C{  public WildFlyExistingLocalConfigurationCapability(){  super();  this.propertySupportMap.remove(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,Boolean.TRUE);}  }
class C{  private List doReturn(int minSize,int maxSize){  acquireReadLock();  try {    int numToReturn=this.idsAvailable.size();    if (numToReturn < minSize) {      return null;    }    if (numToReturn > maxSize) {      numToReturn=maxSize;    }    return getBatchAndUpdateThreadContext(numToReturn);  }  finally {    releaseReadLock();  }}  }
class C{  public void init(final boolean readOnly){  this.readOnly=readOnly;  init();}  }
class C{  public Dirichlet(Vec alphas){  setAlphas(alphas);}  }
class C{  public void reloadData(){  if (dataHandlers != null) {    for (    LocationHandler dataHandler : dataHandlers) {      dataHandler.reloadData();    }  }}  }
class C{  public boolean isHidden(){  return sizeRequestedByUser && preferredSize != null && preferredSize.getWidth() == 0 && preferredSize.getHeight() == 0;}  }
class C{  public NamedRunner(Class<?> klass) throws InitializationError {  super(klass);}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public void printUnit(JCCompilationUnit tree,JCClassDecl cdef) throws IOException {  if (tree.pid != null) {    print("package ");    printExpr(tree.pid);    print(";");    println();  }  boolean firstImport=true;  for (List<JCTree> l=tree.defs; l.nonEmpty() && (cdef == null || l.head.hasTag(IMPORT)); l=l.tail) {    if (l.head.hasTag(IMPORT)) {      JCImport imp=(JCImport)l.head;      Name name=TreeInfo.name(imp.qualid);      if (name == name.table.names.asterisk || cdef == null || isUsed(TreeInfo.symbol(imp.qualid),cdef)) {        if (firstImport) {          firstImport=false;          println();        }        printStat(imp);      }    } else {      printStat(l.head);    }  }  if (cdef != null) {    printStat(cdef);    println();  }}  }
class C{  private CCriteriumExecuter(){}  }
class C{  public T1Glyph(final Vector_Path cached_current_path){  this.cached_current_path=cached_current_path;}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,Vector3 normal,double eccentricity,double angle){  super();  mFocalPoint=focalPoint;  mPeriapsis=periapsis;  mNormal=normal.clone();  mEccentricity=eccentricity;  mAngle=angle;  mDirection=(mAngle < 0) ? OrbitDirection.CLOCKWISE : OrbitDirection.COUNTERCLOCKWISE;  mAngle=Math.abs(mAngle);}  }
class C{  public void evaluate(XPathContext xctxt,FastStringBuffer buf,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException {  XObject xobj=m_xpath.execute(xctxt,context,nsNode);  if (null != xobj) {    xobj.appendToFsb(buf);  }}  }
class C{  public C lowerEndpoint(){  return lowerBound.endpoint();}  }
class C{  public static Set<RawProtein<PIRSFHmmer2RawMatch>> parse(String pathToFile) throws IOException {  File file=new File(pathToFile);  if (file == null) {    throw new NullPointerException("PIRSF temporary file resource is null");  }  if (!file.exists()) {    throw new IllegalStateException(file.getName() + " does not exist");  }  if (!file.canRead()) {    throw new IllegalStateException(file.getName() + " is not readable");  }  final Set<RawProtein<PIRSFHmmer2RawMatch>> data=new HashSet<RawProtein<PIRSFHmmer2RawMatch>>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String line;    while ((line=reader.readLine()) != null) {      Matcher modelStart=PATTERN.matcher(line);      if (modelStart.find()) {        String[] text=line.split(",");        if (text != null && text.length != 11) {          LOGGER.warn("Unexpected line format in blast matches file: " + line);        } else {          String[] proteinIdModelId=text[0].split("-");          if (proteinIdModelId != null && proteinIdModelId.length != 2) {            LOGGER.warn("Unexpected line format in blast matches file: " + line);          } else {            String proteinId=proteinIdModelId[0];            String modelId=proteinIdModelId[1];            try {              PIRSFHmmer2RawMatch bestMatch=new PIRSFHmmer2RawMatch(proteinId,modelId,SignatureLibrary.PIRSF,text[1],Integer.parseInt(text[2]),Integer.parseInt(text[3]),Double.parseDouble(text[4]),Double.parseDouble(text[5]),Integer.parseInt(text[6]),Integer.parseInt(text[7]),text[8],Double.parseDouble(text[9]),Double.parseDouble(text[10]));              RawProtein<PIRSFHmmer2RawMatch> protein=new RawProtein<PIRSFHmmer2RawMatch>(proteinId);              protein.addMatch(bestMatch);              data.add(protein);            } catch (            NumberFormatException e) {              LOGGER.error("Error parsing PIRSF temporary match file line (ignoring): " + line + " - Exception "+ e.getMessage());            }          }        }      } else {        LOGGER.warn("Unexpected line format in blast matches file: " + line);      }    }  }  finally {    if (reader != null) {      reader.close();    }  }  return data;}  }
class C{  public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  public void restartDownload(long... ids){  Cursor cursor=query(new Query().setFilterById(ids));  try {    for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {      int status=cursor.getInt(cursor.getColumnIndex(COLUMN_STATUS));      if (status != STATUS_SUCCESSFUL && status != STATUS_FAILED) {        throw new IllegalArgumentException("Cannot restart incomplete download: " + cursor.getLong(cursor.getColumnIndex(COLUMN_ID)));      }    }  }  finally {    cursor.close();  }  ContentValues values=new ContentValues();  values.put(DownloadContract.Downloads.COLUMN_CURRENT_BYTES,0);  values.put(DownloadContract.Downloads.COLUMN_TOTAL_BYTES,-1);  values.putNull(DownloadContract.Downloads.COLUMN_DATA);  values.put(DownloadContract.Downloads.COLUMN_STATUS,DownloadStatus.PENDING);  values.put(DownloadContract.Downloads.COLUMN_FAILED_CONNECTIONS,0);  contentResolver.update(baseUri,values,getWhereClauseFor(ids,DownloadContract.Downloads._ID),longArrayToStringArray(ids));}  }
class C{  public static int intersectLineSegmentAab(double p0X,double p0Y,double p0Z,double p1X,double p1Y,double p1Z,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,Vector2d result){  double dirX=p1X - p0X, dirY=p1Y - p0Y, dirZ=p1Z - p0Z;  double invDirX=1.0 / dirX, invDirY=1.0 / dirY, invDirZ=1.0 / dirZ;  double tNear, tFar, tymin, tymax, tzmin, tzmax;  if (invDirX >= 0.0) {    tNear=(minX - p0X) * invDirX;    tFar=(maxX - p0X) * invDirX;  } else {    tNear=(maxX - p0X) * invDirX;    tFar=(minX - p0X) * invDirX;  }  if (invDirY >= 0.0) {    tymin=(minY - p0Y) * invDirY;    tymax=(maxY - p0Y) * invDirY;  } else {    tymin=(maxY - p0Y) * invDirY;    tymax=(minY - p0Y) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return OUTSIDE;  if (invDirZ >= 0.0) {    tzmin=(minZ - p0Z) * invDirZ;    tzmax=(maxZ - p0Z) * invDirZ;  } else {    tzmin=(maxZ - p0Z) * invDirZ;    tzmax=(minZ - p0Z) * invDirZ;  }  if (tNear > tzmax || tzmin > tFar)   return OUTSIDE;  tNear=tymin > tNear || Double.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Double.isNaN(tFar) ? tymax : tFar;  tNear=tzmin > tNear ? tzmin : tNear;  tFar=tzmax < tFar ? tzmax : tFar;  int type=OUTSIDE;  if (tNear < tFar && tNear <= 1.0 && tFar >= 0.0) {    if (tNear > 0.0 && tFar > 1.0) {      tFar=tNear;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0 && tFar < 1.0) {      tNear=tFar;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0 && tFar > 1.0) {      type=INSIDE;    } else {      type=TWO_INTERSECTION;    }    result.x=tNear;    result.y=tFar;  }  return type;}  }
class C{  protected void append(String s){  BufferedWriter writer;  if (m_LogFile == null)   return;  try {    writer=new BufferedWriter(new FileWriter(m_LogFile,true));    writer.write(s);    writer.flush();    writer.close();  } catch (  Exception e) {  }}  }
class C{  private ShellUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public ErrorResponse(ErrorCode errorCode,String bucketName,String objectName,String resource,String requestId,String hostId) throws XmlPullParserException {  this();  this.errorCode=errorCode;  this.code=errorCode.code();  this.message=errorCode.message();  this.bucketName=bucketName;  this.objectName=objectName;  this.resource=resource;  this.requestId=requestId;  this.hostId=hostId;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public boolean isConsistent(List<Constraint> constraints){  for (  Constraint cons : constraints)   if (!cons.isSatisfiedWith(this))   return false;  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void solve(){  maybeParseHeader();  while (true) {    try {      if (checkProofOfWork(false))       return;      setNonce(getNonce() + 1);    } catch (    VerificationException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public long lowestOnBit(){  return id & -id;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,Easing.EasingOption easingX,Easing.EasingOption easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easingY));  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easingX));  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  protected void processIgnoreSection(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  if (!XMLUtil.checkLiteral(reader,"NORE")) {    XMLUtil.skipTag(reader);    return;  }  XMLUtil.skipWhitespace(reader,null);  String str=XMLUtil.read(reader,'%');  char ch=str.charAt(0);  if (ch != '[') {    XMLUtil.skipTag(reader);    return;  }  Reader subreader=new CDATAReader(reader);  subreader.close();}  }
class C{  public boolean intersectsAny(Iterable<? extends Sector> sectors){  if (sectors == null) {    String msg=Logging.getMessage("nullValue.SectorListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  for (  Sector s : sectors) {    if (s != null && s.intersects(this))     return true;  }  return false;}  }
class C{  public static Sail openSail(final String file,final boolean create){  if (!new File(file).exists()) {    if (!create) {      throw new IllegalArgumentException("journal does not exist at specified location");    } else {      return createSail(file);    }  } else {    final Properties props=new Properties();    props.setProperty("com.bigdata.journal.AbstractJournal.file",file);    final Sail sail=getSailProviderInstance(props);    return sail;  }}  }
class C{  private static X509Certificate[] createCertChain(byte[][] certificatesBytes) throws IOException {  if (certificatesBytes == null) {    return null;  }  X509Certificate[] certificates=new X509Certificate[certificatesBytes.length];  for (int i=0; i < certificatesBytes.length; i++) {    certificates[i]=OpenSSLX509Certificate.fromX509Der(certificatesBytes[i]);  }  return certificates;}  }
class C{  public MultiplePathsFromGCRootsRecord[] nextLevel(){  int new_level=level + 1;  HashMapIntObject<MultiplePathsFromGCRootsRecord> nextLevelRecords=new HashMapIntObject<MultiplePathsFromGCRootsRecord>();  for (  int[] path : paths) {    if (path != null && (path.length - new_level - 1 >= 0)) {      MultiplePathsFromGCRootsRecord record=nextLevelRecords.get(path[path.length - new_level - 1]);      if (record == null) {        record=new MultiplePathsFromGCRootsRecord(path[path.length - new_level - 1],new_level,snapshot);        nextLevelRecords.put(path[path.length - new_level - 1],record);      }      record.addPath(path);    }  }  return nextLevelRecords.getAllValues(new MultiplePathsFromGCRootsRecord[0]);}  }
class C{  public final boolean atEnd(CharSequence csq){  return index >= csq.length();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.554 -0500",hash_original_method="7C280C0D6BD3CA85A908B9065390FD08",hash_generated_method="DB971D5BC54B5A31AD0846AFF0400420") public ColorMatrix(){  reset();}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms);  }}  }
class C{  public MentionToken nextMention(){  if (!hasNextMention())   throw new IllegalStateException("No more mentions found!");  Token t=nextRegex(anyMentionPattern);  final int lessThan=t.getStartIndex();  final int greaterThan=t.getEndIndex();  final String matched=t.getContent();  final char type=matched.charAt(1);  if (type == '@') {    if (matched.charAt(2) == '&') {      return new RoleMentionToken(this,lessThan,greaterThan);    }    return new UserMentionToken(this,lessThan,greaterThan);  } else   if (type == '#') {    return new ChannelMentionToken(this,lessThan,greaterThan);  }  throw new IllegalStateException("Couldn't find a mention even though it was found!");}  }
class C{  protected void visitNode(final Node n,final DijkstraNodeData data,final RouterPriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink){  data.visit(outLink,cost,time,getIterationId());  pendingNodes.add(n,getPriority(data));}  }
class C{  private long computeAge(long nowMillis){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,TimeUnit.SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  public void addTopGroup(@NotNull XValueGroup group){  myTopGroups.add(group);}  }
class C{  public boolean caseInsensitive(){  return !caseSensitive;}  }
class C{  public boolean hasDeleted(){  return hasExtension(Deleted.class);}  }
class C{  public static Element drawCosine(SVGPlot svgp,Projection2D proj,NumberVector mid,double angle){  double[] pointOfOrigin=proj.fastProjectDataToRenderSpace(new double[proj.getInputDimensionality()]);  double[] selPoint=proj.fastProjectDataToRenderSpace(mid);  double[] range1, range2;{    double[] p1=proj.fastProjectRenderToDataSpace(selPoint[0] + 10,selPoint[1]);    double[] p2=proj.fastProjectRenderToDataSpace(selPoint[0],selPoint[1] + 10);    double[] pm=mid.toArray();    VMath.minusEquals(p1,pm);    VMath.minusEquals(p2,pm);    VMath.timesEquals(p1,1. / VMath.euclideanLength(p1));    VMath.timesEquals(p2,1. / VMath.euclideanLength(p2));{      double test=VMath.scalarProduct(p1,p2);      if (Math.abs(test) > 1E-10) {        LoggingUtil.warning("Projection does not seem to be orthogonal?");      }    }    double l1=VMath.scalarProduct(pm,p1), l2=VMath.scalarProduct(pm,p2);    final double cangle=Math.cos(angle), sangle=MathUtil.cosToSin(angle,cangle);    double r11=+cangle * l1 - sangle * l2, r12=+sangle * l1 + cangle * l2;    double r21=+cangle * l1 + sangle * l2, r22=-sangle * l1 + cangle * l2;    double[] r1=VMath.copy(pm), r2=VMath.copy(pm);    VMath.plusTimesEquals(r1,p1,-l1 + r11);    VMath.plusTimesEquals(r1,p2,-l2 + r12);    VMath.plusTimesEquals(r2,p1,-l1 + r21);    VMath.plusTimesEquals(r2,p2,-l2 + r22);    range1=proj.fastProjectDataToRenderSpace(r1);    range2=proj.fastProjectDataToRenderSpace(r2);  }{    CanvasSize viewport=proj.estimateViewport();    VMath.minusEquals(range1,pointOfOrigin);    VMath.minusEquals(range2,pointOfOrigin);    VMath.timesEquals(range1,viewport.continueToMargin(pointOfOrigin,range1));    VMath.timesEquals(range2,viewport.continueToMargin(pointOfOrigin,range2));    VMath.plusEquals(range1,pointOfOrigin);    VMath.plusEquals(range2,pointOfOrigin);    double[] start1=VMath.minus(pointOfOrigin,range1);    double[] start2=VMath.minus(pointOfOrigin,range2);    VMath.timesEquals(start1,viewport.continueToMargin(range1,start1));    VMath.timesEquals(start2,viewport.continueToMargin(range2,start2));    VMath.plusEquals(start1,range1);    VMath.plusEquals(start2,range2);    SVGPath path=new SVGPath();    path.moveTo(start1);    path.lineTo(range1);    path.moveTo(start2);    path.lineTo(range2);    return path.makeElement(svgp);  }}  }
class C{  public static boolean inverse(DoubleMatrix2D A){  Property.DEFAULT.checkSquare(A);  boolean isNonSingular=true;  for (int i=A.rows(); --i >= 0; ) {    double v=A.getQuick(i,i);    isNonSingular&=(v != 0);    A.setQuick(i,i,1 / v);  }  return isNonSingular;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STATE___STATE_NAME_1:    return getStateName_1();case UmplePackage.STATE___STATE_INTERNAL_1:  return getStateInternal_1();case UmplePackage.STATE___FINAL_1:return isFinal_1();case UmplePackage.STATE___ANONYMOUS_STATE_11:return getAnonymous_state_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Override public String toString(){  try {    return "TxOut of " + Utils.bitcoinValueToFriendlyString(value) + " to "+ getScriptPubKey().getToAddress(params).toString()+ " script:"+ getScriptPubKey().toString();  } catch (  ScriptException e) {    throw new RuntimeException(e);  }}  }
class C{  default B addCanPlaceOnMaterials(final BlockItemMeta src){  final Collection<BlockMaterialData> mats=src.getCanPlaceOnMaterials();  if ((mats == null) || mats.isEmpty()) {    return this.getBuilder();  }  this.meta().addCanPlaceOnMaterials(mats);  return this.getBuilder();}  }
class C{  public static TreeNode build(List<Class<?>> choices,String rootpkg){  MutableTreeNode root=new PackageNode(rootpkg,rootpkg);  HashMap<String,MutableTreeNode> lookup=new HashMap<>();  if (rootpkg != null) {    lookup.put(rootpkg,root);  }  lookup.put("de.lmu.ifi.dbs.elki",root);  lookup.put("",root);  String prefix=rootpkg != null ? rootpkg + "." : null;  for (  Class<?> impl : choices) {    String name=impl.getName();    name=(prefix != null && name.startsWith(prefix)) ? name.substring(prefix.length()) : name;    int plen=(impl.getPackage() != null) ? impl.getPackage().getName().length() + 1 : 0;    MutableTreeNode c=new ClassNode(impl.getName().substring(plen),name);    MutableTreeNode p=null;    int l=name.lastIndexOf('.');    while (p == null) {      if (l < 0) {        p=root;        break;      }      String pname=name.substring(0,l);      p=lookup.get(pname);      if (p != null) {        break;      }      l=pname.lastIndexOf('.');      MutableTreeNode tmp=new PackageNode(l >= 0 ? pname.substring(l + 1) : pname,pname);      tmp.insert(c,0);      c=tmp;      lookup.put(pname,tmp);      name=pname;    }    p.insert(c,p.getChildCount());  }  for (int i=0; i < root.getChildCount(); i++) {    MutableTreeNode c=(MutableTreeNode)root.getChildAt(i);    MutableTreeNode c2=simplifyTree(c,null);    if (c != c2) {      root.remove(i);      root.insert(c2,i);    }  }  return root;}  }
class C{  public UF4(){  this(30);}  }
class C{  public Swagger2MarkupConfigBuilder withSeparatedDefinitions(){  config.separatedDefinitionsEnabled=true;  return this;}  }
class C{  private static Typeface createByName(final String fontName){  try {    final Typeface typeface=Typeface.create(fontName,Typeface.BOLD_ITALIC);    if (typeface != null && Typeface.BOLD_ITALIC == typeface.getStyle()) {      return null;    }    return typeface;  } catch (  Exception e) {    LogUtil.e("create typeface " + fontName + " by name failed",e);    return null;  }}  }
class C{  protected int scoreByFormat(Option<FormatOption> formatOption,MediaType requiredMediaType){  if (!formatOption.isDefined()) {    return DEFAULT_SCORE;  }  if (formatOption.get().mediaType().matches(requiredMediaType)) {    return MAXIMUM_FORMAT_SCORE;  }  return DEFAULT_SCORE;}  }
class C{  public void bindIfStarted(){  bindService(false);}  }
class C{  public static int[] copyOf(int[] original,int newLength){  int[] copy=new int[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  @Override protected void checkIfReplicatedAndLocalDestroy(EntryEventImpl event){}  }
class C{  private AvroIO(){}  }
class C{  public static boolean awaitState(Job job,Job.State state,long timeout,TimeUnit unit){  long endWait=-1;  if (timeout != -1) {    endWait=System.currentTimeMillis() + unit.toMillis(timeout);  }  while (true) {    Job.State curState=job.getCurrentState();    if (curState == state)     return true;    if (endWait != -1) {      long now=System.currentTimeMillis();      if (now >= endWait)       return false;    }    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      return false;    }  }}  }
class C{  public static int binarySearchFloor(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  public static ImdnDocument parseCpimDeliveryReport(String cpim) throws SAXException, ParserConfigurationException, ParseFailureException {  ImdnDocument imdn=null;  CpimParser cpimParser=new CpimParser(cpim);  CpimMessage cpimMsg=cpimParser.getCpimMessage();  if (cpimMsg != null) {    String contentType=cpimMsg.getContentType();    if ((contentType != null) && isMessageImdnType(contentType)) {      imdn=parseDeliveryReport(cpimMsg.getMessageContent());    }  }  return imdn;}  }
class C{  protected static boolean isCglibGetCallbacks(AnnotatedMethod am){  Class<?> rt=am.getRawType();  if (rt == null || !rt.isArray()) {    return false;  }  Class<?> compType=rt.getComponentType();  Package pkg=compType.getPackage();  if (pkg != null) {    String pname=pkg.getName();    if (pname.startsWith("net.sf.cglib") || pname.startsWith("org.hibernate.repackage.cglib")) {      return true;    }  }  return false;}  }
class C{  public final void testValidateFails(){  NotEmptyValidator notEmptyValidator=new NotEmptyValidator("foo");  assertFalse(notEmptyValidator.validate(""));}  }
class C{  public List<JobInfo> findJobs(final Optional<String> type,final int count){  if (type.isPresent()) {    return repository.findLatestBy(type.get(),count);  } else {    return repository.findLatest(count);  }}  }
class C{  public ResumeReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  private static StreamHolder holder() throws IgniteInterruptedCheckedException {  StreamHolder holder=holders.get();  if (holder == null)   holders.set(holder=new StreamHolder());  return holder;}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder();  s.append(" block: \n");  s.append("   hash: ").append(getHashAsString()).append('\n');  s.append("   version: ").append(version);  String bips=Joiner.on(", ").skipNulls().join(isBIP34() ? "BIP34" : null,isBIP66() ? "BIP66" : null,isBIP65() ? "BIP65" : null);  if (!bips.isEmpty())   s.append(" (").append(bips).append(')');  s.append('\n');  s.append("   previous block: ").append(getPrevBlockHash()).append("\n");  s.append("   merkle root: ").append(getMerkleRoot()).append("\n");  s.append("   time: ").append(time).append(" (").append(Utils.dateTimeFormat(time * 1000)).append(")\n");  s.append("   difficulty target (nBits): ").append(difficultyTarget).append("\n");  s.append("   nonce: ").append(nonce).append("\n");  if (transactions != null && transactions.size() > 0) {    s.append("   with ").append(transactions.size()).append(" transaction(s):\n");    for (    Transaction tx : transactions) {      s.append(tx);    }  }  return s.toString();}  }
class C{  public void keepZoomPickerVisible(){  ZoomControlBase control=getCurrentZoomControl();  if (control != null && control == mExternalZoomControl) {    control.show();  }}  }
class C{  private static void makeToast(String msg,int duration,int gravity,int xOffset,int yOffset){  mToast=getToast();  mToast.setGravity(gravity,xOffset,(yOffset == Integer.MAX_VALUE ? mToast.getYOffset() : yOffset));  mToast.setText(msg);  mToast.setDuration(duration);  mToast.show();}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  private void checkParameters(File lexFile) throws MojoExecutionException {  if (lexFile == null) {    throw new MojoExecutionException("<lexDefinition> is empty. Please define input file with <lexDefinition>input.jflex</lexDefinition>");  }  assert lexFile.isAbsolute() : lexFile;  if (!lexFile.isFile()) {    throw new MojoExecutionException("Input file does not exist: " + lexFile);  }}  }
class C{  public void clearCouplings(){  couplingList.clear();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String delim=" / ";  if (curNumberOfParameters == 2)   delim=getString(stack);  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getCategoriesString(delim);  Album al=getAlbumObj(obj);  if (al != null)   return al.getGenre();  SeriesInfo si=getSeriesInfoObj(obj);  return (si == null) ? "" : si.getCategory();}  }
class C{  public UnconfirmedTransactionMetaDataPair(final Deserializer deserializer){  super("transaction","meta",TransactionFactory.VERIFIABLE,null,deserializer);}  }
class C{  private DictionaryTable(final Set<String> set){  super();  init(set.size(),1);  int i=0;  for (Iterator<String> iterator=set.iterator(); iterator.hasNext(); ) {    String token=(String)iterator.next();    setLogicalValue(i,0,token,false);    i++;  }  fireTableDataChanged();}  }
class C{  public void onJobPrepare(long ts){  assert nodeId != null;  evts.add(new T2<>("JOB prepare " + nodeId,ts));}  }
class C{  public MekaDialog(Dialog owner,ModalityType modality){  this(owner,"",modality);}  }
class C{  public final double splitCritValue(Distribution bags,double totalNoInst){  double numerator;  double noUnknown;  double unknownRate;  noUnknown=totalNoInst - bags.total();  unknownRate=noUnknown / totalNoInst;  numerator=(oldEnt(bags) - newEnt(bags));  numerator=(1 - unknownRate) * numerator;  if (Utils.eq(numerator,0)) {    return 0;  }  return numerator / bags.total();}  }
class C{  public static TaskResourceRep toCompletedTask(DataObject resource,String taskId,Operation operation){  Task task=operation.getTask(resource.getId());  if (task != null) {    task.setProgress(100);    task.setStatus(Operation.Status.ready.name());    getConfig().getDbClient().persistObject(task);    return toTask(task);  } else {    task=TaskUtils.findTaskForRequestId(getConfig().getDbClient(),resource.getId(),taskId);    if (task != null) {      task.setProgress(100);      task.setStatus(Operation.Status.ready.name());      getConfig().getDbClient().persistObject(task);      return toTask(task);    } else {      throw new IllegalStateException(String.format("Task not found for resource %s, op %s in either the operation or the database",resource.getId(),taskId));    }  }}  }
class C{  @Override public void closingOK(){  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();  for (int i=0; i < m_listModel.size(); i++) {    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);    specs.add(a);  }  if (m_modifyL != null) {    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);  }  m_filter.setAttributeSpecs(specs);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.304 -0500",hash_original_method="0FBB80F13AF6F3A9057E687D9BCE4FB9",hash_generated_method="B5B7EC09E12205DC8F08FC85B42E3C26") static ResourceBundle loadResourceBundle(String resourceBundleName){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  cl=ClassLoader.getSystemClassLoader();  if (cl != null) {    try {      return ResourceBundle.getBundle(resourceBundleName,Locale.getDefault(),cl);    } catch (    MissingResourceException ignored) {    }  }  throw new MissingResourceException("Failed to load the specified resource bundle \"" + resourceBundleName + "\"",resourceBundleName,null);}  }
class C{  CompositeGoal(Goal[] allGoals){  if (allGoals.length < 2) {    throw new IllegalArgumentException("Require at least 2 subgoals: " + Arrays.asList(allGoals));  }  this.allGoals=allGoals;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.239 -0500",hash_original_method="8051F011270999D9228A08818EFD61DD",hash_generated_method="8DA6C0EB41A062AF1C6AD942B2D3E8C3") private void addValue(String key,int value,Bundle results){  if (results.containsKey(key)) {    List<Integer> list=results.getIntegerArrayList(key);    if (list != null) {      list.add(value);    }  } else {    ArrayList<Integer> list=new ArrayList<Integer>();    list.add(value);    results.putIntegerArrayList(key,list);  }}  }
class C{  public Metadata(){  metadata=new HashMap<String,String[]>();}  }
class C{  protected void addEntry(final HashEntry<K,V> entry,final int hashIndex){  data[hashIndex]=entry;}  }
class C{  long checkSccs(BEGraphNode node){  long lowlink=firstNum++;  node.setNumber(lowlink);  comStack.push(node);  int nsz=node.nextSize();  for (int i=0; i < nsz; i++) {    BEGraphNode destNode=node.nextAt(i);    long destNum=destNode.getNumber();    if (destNum == 0) {      destNum=checkSccs(destNode);    }    if (destNum < lowlink) {      lowlink=destNum;    }  }  if (lowlink == node.getNumber()) {    checkComponent(node);  }  return lowlink;}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  HashCode hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    int h=(hc=threadHashCode.get()).code;    if (as == null || (n=as.length) < 1 || (a=as[(n - 1) & h]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public JsonWriter(final Writer writer,final Format format){  this(writer,0,format);}  }
class C{  public void finishDocumentProcess(){  if (documentTimerContext != null) {    documentTimerContext.stop();    documentTimerContext=null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Iterator<E> inOrderIterator(){  return new BinarySearchTreeIterator<E>(this.root,true);}  }
class C{  public CollectionIterator(Object iterateOverMe){  iterator=createIterator(iterateOverMe);}  }
class C{  public void run(final String[] args){  parseArguments(args);  Scenario scenario;  this.config=ConfigUtils.loadConfig(this.configfile);  MatsimRandom.reset(this.config.global().getRandomSeed());  scenario=ScenarioUtils.createScenario(this.config);  this.network=scenario.getNetwork();  new MatsimNetworkReader(scenario.getNetwork()).readFile(this.config.network().getInputFile());  prepare();  if (this.eventsfile == null) {    this.eventsfile=this.config.getParam("events","inputFile");  }  System.out.println("reading events from " + this.eventsfile);  File file=new File(this.eventsfile);  String outputDir=file.getParent() + "/";  loadSnapshotWriters(outputDir);  new MatsimEventsReader(this.events).readFile(this.eventsfile);  this.visualizer.finish();  System.out.println("done.");}  }
class C{  private void resetTabInfo(){  if (this.m_lookup == null)   return;  String col=m_lookup.getColumnName();  if (col.indexOf('.') != -1)   col=col.substring(col.indexOf('.') + 1);  final String[] infoNames;  if (col.equals("M_Product_ID")) {    infoNames=new String[]{"M_Product_ID","M_AttributeSetInstance_ID","M_Locator_ID","M_Lookup_ID"};  } else   if (col.equals("C_BPartner_ID")) {    infoNames=new String[]{"C_BPartner_ID","AD_User_ID","C_BPartner_Location_ID"};  } else {    infoNames=new String[]{};  }  for (  String name : infoNames) {    Env.setContext(Env.getCtx(),m_lookup.getWindowNo(),Env.TAB_INFO,name,null);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void deleteQueue(String queueUrl) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.deleteQueue(queueUrl);}  }
class C{  protected boolean doesTableExist(String tableName) throws DataAccessException {  try {    DescribeTableRequest request=new DescribeTableRequest().withTableName(USER_TABLE);    DescribeTableResult result=ddb.describeTable(request);    return "ACTIVE".equals(result.getTable().getTableStatus());  } catch (  ResourceNotFoundException e) {    return false;  }catch (  AmazonClientException e) {    throw new DataAccessException("Failed to get status of table: " + tableName,e);  }}  }
class C{  public void finishTracking(){  progressMonitor.unregisterSource(this);}  }
class C{  @Override public void onReceive(Context context,Intent pong){  Integer count=pong.getIntExtra("COUNT",0);  Log.d(TAG,"onReceive() called with count of " + count);  UiUtils.showToast(context,"Pong " + count);  final PendingResult result=goAsync();  sAsyncHandler.post(null);}  }
class C{  public static void editReport(File file,String name){  BufferedReader in=null;  try {    in=new BufferedReader(new InputStreamReader(new FileInputStream(file),"UTF-8"));  } catch (  FileNotFoundException e) {    log.error("Build file doesn't exist");    return;  }catch (  UnsupportedEncodingException e) {    log.error("Doesn't support UTF-8 encoding");    return;  }  PrintWriter out;  File buildReport=TrainManagerXml.instance().createTrainBuildReportFile(Bundle.getMessage("Report") + " " + name);  try {    out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(buildReport),"UTF-8")),true);  } catch (  IOException e) {    log.error("Can not create build report file");    try {      in.close();    } catch (    IOException ee) {    }    return;  }  String line=" ";  while (true) {    try {      line=in.readLine();      if (line == null) {        break;      }      line=filterBuildReport(line,Setup.isBuildReportIndentEnabled());      if (line.equals("")) {        continue;      }      out.println(line);    } catch (    IOException e) {      log.debug("Print read failed");      break;    }  }  try {    in.close();  } catch (  IOException e) {    log.debug("Close failed");  }  out.close();  openDesktopEditor(buildReport);}  }
class C{  public static double normalizeZeroTwoPiFast(double angle){  if ((angle >= 0.0) && (angle <= 2 * Math.PI)) {    return angle;  }  double angleMinusPiPiOrSo=remainderTwoPiFast(angle);  if (angleMinusPiPiOrSo < 0.0) {    return angleMinusPiPiOrSo + 2 * Math.PI;  } else {    return angleMinusPiPiOrSo;  }}  }
class C{  public static boolean isPowerOf2(int n){  if (n <= 0)   return false; else   return (n & (n - 1)) == 0;}  }
class C{  JCExpression cast(JCExpression tree,Type target){  int oldpos=make.pos;  make.at(tree.pos);  if (!types.isSameType(tree.type,target)) {    if (!resolve.isAccessible(env,target.tsym))     resolve.logAccessErrorInternal(env,tree,target);    tree=make.TypeCast(make.Type(target),tree).setType(target);  }  make.pos=oldpos;  return tree;}  }
class C{  public synchronized void saveToKeyStore(OutputStream os,char[] password) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidKeySpecException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, KeyStoreException, CertificateException, IOException {  mKeyStore.engineStore(os,password);}  }
class C{  public boolean isReconnectionNeeded(){  return reconnectionNeeded;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void activateEmbeddedFrame(){  assert Display.getCurrent() != null;  final Shell activeShell=globalHandler.getActiveShell();  final SwingControl activeBorderless=globalHandler.getActiveEmbedded();  if (!borderless.isDisposed() && activeShell == borderless.getShell() && borderless == display.getFocusControl() && (activeBorderless == null || activeBorderless == borderless)) {    EventQueue.invokeLater(null);  }}  }
class C{  protected void validateAlternateName(java.lang.String[] param){}  }
class C{  public LayerTreeModel(LayerList layerList){  this(layerList,false);}  }
class C{  @Override public boolean isTimeIncluded(long timeStamp){  if (super.isTimeIncluded(timeStamp) == false) {    return false;  }  java.util.Calendar day=createJavaCalendar(timeStamp);  return !(isDayExcluded(day));}  }
class C{  public void addItemBoundsListener(ItemBoundsListener ibl){  if (m_bounders == null) {    m_bounders=new CopyOnWriteArrayList();  }  m_bounders.add(ibl);}  }
class C{  public UnresolvedFontFamily(String familyName){  this(new GVTFontFace(familyName));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardXYURLGenerator)) {    return false;  }  StandardXYURLGenerator that=(StandardXYURLGenerator)obj;  if (!ObjectUtilities.equal(that.prefix,this.prefix)) {    return false;  }  if (!ObjectUtilities.equal(that.seriesParameterName,this.seriesParameterName)) {    return false;  }  if (!ObjectUtilities.equal(that.itemParameterName,this.itemParameterName)) {    return false;  }  return true;}  }
class C{  public Neg(){  super("neg",1);}  }
class C{  public boolean isCostingLevelBatch(){  return COSTINGLEVEL_BatchLot.equals(getCostingLevel());}  }
class C{  public void trimTrailingWhitespace(){  while (length > 0 && Character.isWhitespace(c[length - 1])) {    length--;  }}  }
class C{  protected long computeSVUID() throws IOException {  ByteArrayOutputStream bos;  DataOutputStream dos=null;  long svuid=0;  try {    bos=new ByteArrayOutputStream();    dos=new DataOutputStream(bos);    dos.writeUTF(name.replace('/','.'));    dos.writeInt(access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_INTERFACE| Opcodes.ACC_ABSTRACT));    Arrays.sort(interfaces);    for (int i=0; i < interfaces.length; i++) {      dos.writeUTF(interfaces[i].replace('/','.'));    }    writeItems(svuidFields,dos,false);    if (hasStaticInitializer) {      dos.writeUTF("<clinit>");      dos.writeInt(Opcodes.ACC_STATIC);      dos.writeUTF("()V");    }    writeItems(svuidConstructors,dos,true);    writeItems(svuidMethods,dos,true);    dos.flush();    byte[] hashBytes=computeSHAdigest(bos.toByteArray());    for (int i=Math.min(hashBytes.length,8) - 1; i >= 0; i--) {      svuid=(svuid << 8) | (hashBytes[i] & 0xFF);    }  }  finally {    if (dos != null) {      dos.close();    }  }  return svuid;}  }
class C{  public boolean execute(String action,String rawArgs,CallbackContext callbackContext) throws JSONException {  JSONArray args=new JSONArray(rawArgs);  return execute(action,args,callbackContext);}  }
class C{  public JMXPrincipal(String name){  validate(name);  this.name=name;}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public ObjectFactory(){}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SSPECIES;}  }
class C{  public static Occurred compare(VectorClock v1,VectorClock v2){  if (v1 == null || v2 == null)   throw new IllegalArgumentException("Can't compare null vector clocks!");  boolean v1Bigger=false;  boolean v2Bigger=false;  int p1=0;  int p2=0;  while (p1 < v1.versions.size() && p2 < v2.versions.size()) {    ClockEntry ver1=v1.versions.get(p1);    ClockEntry ver2=v2.versions.get(p2);    if (ver1.getNodeId() == ver2.getNodeId()) {      if (ver1.getVersion() > ver2.getVersion())       v1Bigger=true; else       if (ver2.getVersion() > ver1.getVersion())       v2Bigger=true;      p1++;      p2++;    } else     if (ver1.getNodeId() > ver2.getNodeId()) {      v2Bigger=true;      p2++;    } else {      v1Bigger=true;      p1++;    }  }  if (p1 < v1.versions.size())   v1Bigger=true; else   if (p2 < v2.versions.size())   v2Bigger=true;  if (!v1Bigger && !v2Bigger)   return Occurred.BEFORE; else   if (v1Bigger && !v2Bigger)   return Occurred.AFTER; else   if (!v1Bigger && v2Bigger)   return Occurred.BEFORE; else   return Occurred.CONCURRENTLY;}  }
class C{  public Hotel(){  super();}  }
class C{  public IgniteDataStreamerTimeoutException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public SignerId(X500Name issuer,BigInteger serialNumber){  this(issuer,serialNumber,null);}  }
class C{  private int mirror(int x){  if (fLTR) {    return x;  }  return ARROW_SIZE - x - 1;}  }
class C{  public void verifyComputeImageServer(URI imageServerId,String stepId){  log.info("entering method verifyComputeImageServer");  WorkflowStepCompleter.stepExecuting(stepId);  ComputeImageServer imageServer=dbClient.queryObject(ComputeImageServer.class,imageServerId);  if (verifyImageServer(imageServer)) {    imageServer.setComputeImageServerStatus(ComputeImageServer.ComputeImageServerStatus.AVAILABLE.name());    dbClient.updateObject(imageServer);    WorkflowStepCompleter.stepSucceded(stepId);  } else {    log.error("Unable to verify imageserver");    imageServer.setComputeImageServerStatus(ComputeImageServer.ComputeImageServerStatus.NOT_AVAILABLE.name());    dbClient.updateObject(imageServer);    WorkflowStepCompleter.stepFailed(stepId,ImageServerControllerException.exceptions.unexpectedException(OperationTypeEnum.IMAGESERVER_VERIFY_IMPORT_IMAGES.name(),new Exception("Unable to verify imageserver")));  }}  }
class C{  private boolean receiveResult(String submissionID){  File zipfile=null;  FileOutputStream output=null;  try {    File resultDir=new File(resultDirName);    if (!resultDir.exists())     resultDir.mkdirs();    zipfile=File.createTempFile("jplagtmpresult",".zip");    output=new FileOutputStream(zipfile);    StartResultDownloadData srdd=stub.startResultDownload(submissionID);    int filesize=srdd.getFilesize();    int loadedsize=srdd.getData().length;    initProgressBar(srdd.getFilesize());    output.write(srdd.getData());    setProgressBarValue(loadedsize);    while (loadedsize < filesize) {      byte[] data=stub.continueResultDownload(0);      output.write(data);      loadedsize+=data.length;      setProgressBarValue(loadedsize);    }    output.close();    ZipUtil.unzip(zipfile,resultDir);    zipfile.delete();  } catch (  Exception e) {    if (output != null) {      try {        output.close();      } catch (      Exception ex) {      }    }    if (zipfile != null)     zipfile.delete();    checkException(e);    return false;  }  return true;}  }
class C{  public static String invalidMessage(){  throw new UnsupportedOperationException();}  }
class C{  public static String escape(String source,char escapeChar,char[] specialCharacters){  if (source == null) {    return null;  }  StringBuilder b=new StringBuilder();  for (  char c : source.toCharArray()) {    if (c == escapeChar) {      b.append(escapeChar);    } else {      for (      char s : specialCharacters) {        if (c == s) {          b.append(escapeChar);          break;        }      }    }    b.append(c);  }  return b.toString();}  }
class C{  static protected String[] splitLineCSV(String line){  char[] c=line.toCharArray();  int rough=1;  boolean quote=false;  for (int i=0; i < c.length; i++) {    if (!quote && (c[i] == ',')) {      rough++;    } else     if (c[i] == '\"') {      quote=!quote;    }  }  String[] pieces=new String[rough];  int pieceCount=0;  int offset=0;  while (offset < c.length) {    int start=offset;    int stop=nextComma(c,offset);    offset=stop + 1;    if (c[start] == '\"' && c[stop - 1] == '\"') {      start++;      stop--;    }    int i=start;    int ii=start;    while (i < stop) {      if (c[i] == '\"') {        i++;      }      if (i != ii) {        c[ii]=c[i];      }      i++;      ii++;    }    String s=new String(c,start,ii - start);    pieces[pieceCount++]=s;  }  for (int i=pieceCount; i < pieces.length; i++) {    pieces[i]="";  }  return pieces;}  }
class C{  public String changeDirectory(String directoryName) throws ManagerResponseException {  checkConnectedAndInFileExplorer();  String url=authentificationUtils.finalHost + "/file/container/" + currentContainerId+ "?path="+ currentPath;  String json=restUtils.sendGetCommand(url,authentificationUtils.getMap()).get("body");  JsonConverter.getFileUnits(json);  currentPath=directoryName;  statusCommand.setExitStatut(0);  return "Current directory is " + directoryName;}  }
class C{  private void addTerm(RE tm) throws InterruptedException {  terms.addAll(tm.getAlts());}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  return g.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);}  }
class C{  private ConfigManager(final String filename){  this.filename=filename;  properties=new TypedPropertiesWrapper(new Properties());  databases=Lists.newArrayList();  generalSettings=new GeneralSettingsConfigItem();  colors=new ColorsConfigItem();  debuggerColors=new DebugColorsConfigItem();  callGraphSettings=new CallGraphSettingsConfigItem();  flowGraphSettings=new FlowGraphSettingsConfigItem();}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getCompletionDao() : null;}  }
class C{  public LZ6(){  super(10,3,31,32,1);}  }
class C{  public static Shape mergeClip(Graphics g,Shape clip){  Shape oldClip=g.getClip();  if (oldClip == null) {    g.setClip(clip);    return null;  }  Area area=new Area(oldClip);  area.intersect(new Area(clip));  g.setClip(area);  return oldClip;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public final void initialize(byte[] bytes,Version version){  this.bytes=bytes;  this.nBytes=bytes.length;  this.pos=0;  this.version=version;}  }
class C{  public void drawOval(int x,int y,int width,int height){  g.drawOval(x,y,width,height);}  }
class C{  public SingletonAssembler() throws AssemblyException, ActivationException {  zest=new Energy4Java();  applicationInstance=zest.newApplication(null);  try {    beforeActivation(applicationInstance);    applicationInstance.activate();  } catch (  Exception e) {    if (e instanceof ActivationException) {      throw ((ActivationException)e);    }    throw new ActivationException("Could not activate application",e);  }  moduleInstance=applicationInstance.findModule("Layer 1","Module 1");}  }
class C{  public static String nextString(String s){  if (isAllzs(s)) {    return allAs(s.length() + 1);  }  char[] charVersion=s.toCharArray();  incrementCharArray(charVersion,charVersion.length - 1);  return new String(charVersion);}  }
class C{  public static Result restJobExecResult(String jobExecId){  if (jobExecId == null || jobExecId.isEmpty()) {    return badRequest("No job exec url provided.");  }  List<AppResult> result=AppResult.find.select("*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").where().eq(AppResult.TABLE.JOB_EXEC_ID,jobExecId).findList();  if (result.size() == 0) {    return notFound("Unable to find record on job exec url: " + jobExecId);  }  return ok(Json.toJson(result));}  }
class C{  public int compareTo(Phrase other){  int length=size();  int otherLength=other.size();  for (int i=0; i < length; i++) {    if (i < otherLength) {      int difference=getWordID(i) - other.getWordID(i);      if (difference != 0)       return difference;    } else {      return 1;    }  }  if (length < otherLength) {    return -1;  } else {    return 0;  }}  }
class C{  private void resize(){  assert limit < 0;  limit=limit * 2;  int limit=this.limit;  if (limit < 0)   limit=-limit;  if (log.isInfoEnabled()) {    log.info("resizing buffers: ntuples=" + ntuples + ", new limit="+ limit);  }  if (this.keys != null) {    this.keys=((AbstractRaba)this.keys).resize(limit);  }  if (this.vals != null) {    this.vals=((AbstractRaba)this.vals).resize(limit);  }  if (this.deleteMarkers != null) {    final byte[] deleteMarkers=new byte[limit];    System.arraycopy(this.deleteMarkers,0,deleteMarkers,0,ntuples);    this.deleteMarkers=deleteMarkers;  }  if (this.versionTimestamps != null) {    final long[] versionTimestamps=new long[limit];    System.arraycopy(this.versionTimestamps,0,versionTimestamps,0,ntuples);    this.versionTimestamps=versionTimestamps;  }  if (this.sourceIndices != null) {    final byte[] sourceIndices=new byte[limit];    System.arraycopy(this.sourceIndices,0,sourceIndices,0,ntuples);    this.sourceIndices=sourceIndices;  }}  }
class C{  public boolean isNext(char c){  if (!hasNext())   return false;  return lcText[pos + 1] == c;}  }
class C{  public void clearWarnings() throws SQLException {  checkState();  rs.clearWarnings();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  public StorageEntity createStorageEntityWithAttributes(String attributeName,String attributeValue){  return createStorageEntity("StorageTest" + AbstractDaoTest.getRandomSuffix(),StoragePlatformEntity.S3,attributeName,attributeValue);}  }
class C{  public RectF execute(PDFRenderer state){  RectF rect=state.drawNativeText(text,bounds);  return rect;}  }
class C{  public InstallerPanel(GameSettingsPanel gsp,InstallerType installerType){  initComponents();  TableRowSorter<TableModel> sorter=new TableRowSorter<TableModel>(lstInstallers.getModel());  VerComparator verComparator=new VerComparator();  for (int i=0; i < lstInstallers.getColumnCount(); i++) {    sorter.setComparator(i,verComparator);  }  lstInstallers.setRowSorter(sorter);  setOpaque(false);  this.gsp=gsp;  id=installerType;  list=Settings.getInstance().getDownloadSource().getProvider().getInstallerByType(id);}  }
class C{  private void validateProviderConnection(final StorageProvider smisProvider,final CimConnection connection,final List<URI> activeProviderURIList) throws ConnectionManagerException {  _log.debug("In validateProviderConnection()");  if (!smisProvider.getInactive()) {    _log.info("{} is the active smis provider",smisProvider.getId());    try {      if (checkConnectionliveness(connection)) {        if (StorageProvider.ConnectionStatus.NOTCONNECTED.toString().equalsIgnoreCase(smisProvider.getConnectionStatus())) {          recordStorageProviderEvent(OperationTypeEnum.STORAGE_PROVIDER_UP,STORAGE_PROVIDER_UP_DESCRIPTION,smisProvider.getId());        }        smisProvider.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.toString());        activeProviderURIList.add(smisProvider.getId());      } else {        if (StorageProvider.ConnectionStatus.CONNECTED.toString().equalsIgnoreCase(smisProvider.getConnectionStatus())) {          recordStorageProviderEvent(OperationTypeEnum.STORAGE_PROVIDER_DOWN,STORAGE_PROVIDER_DOWN_DESCRIPTION,smisProvider.getId());        }        _connectionManager.removeConnection(smisProvider.getIPAddress(),smisProvider.getPortNumber());        _log.error("Connection Liveness Failed {}",smisProvider.getIPAddress());        smisProvider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.toString());      }      _dbClient.persistObject(smisProvider);    } catch (    DatabaseException ioEx) {      _log.error("Not able to update connectionStatus for Provider due to ",ioEx);    }  } else {    _log.info("{} is not the active smis provider",smisProvider.getId());    if (null != connection) {      _connectionManager.removeConnection(smisProvider.getIPAddress(),smisProvider.getPortNumber());    }  }}  }
class C{  public void initializeAround(int x,int y){  initializeHex(x,y);  for (int i=0; i < 6; i++) {    initializeInDir(x,y,i);  }}  }
class C{  public synchronized int instanceCount(int tenantID){  Tenant t=tenantCache.asMap().get(tenantID);  return t == null ? 0 : t.instances.size();}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public boolean isVersion2(){  return hasParameter("ns") && OPENID2_NS.equals(getParameterValue("ns"));}  }
class C{  String readAmPmMarker(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i).toLowerCase();  String markers[]=getDateFormatSymbols().getAmPmStrings();  for (  String marker : markers) {    if (fragment.startsWith(marker)) {      return source.substring(ofs,ofs + marker.length());    }  }  for (  String marker : markers) {    if (fragment.charAt(0) == marker.charAt(0)) {      return source.substring(ofs,ofs + 1);    }  }  return null;}  }
class C{  public static int installSilent(Context context,String filePath){  return installSilent(context,filePath," -r " + getInstallLocationParams());}  }
class C{  public void logWarning(Throwable e,String message){  LogUtils.log(log,IStatus.WARNING,IStatus.OK,message,e);}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && equalsTo(getClass().cast(other));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.556 -0500",hash_original_method="2F8EB035FA41CD52820ED0B16262B2FB",hash_generated_method="D7BCE97E898F8816BB517278F6C61E70") public boolean diff(WorkSource other){  int N=mNum;  if (N != other.mNum) {    return true;  }  final int[] uids1=mUids;  final int[] uids2=other.mUids;  for (int i=0; i < N; i++) {    if (uids1[i] != uids2[i]) {      return true;    }  }  return false;}  }
class C{  public AnimationChain(Runnable next,Activity activity){  mNext=next;  mActivity=activity;}  }
class C{  public boolean onTrackballEvent(MotionEvent event){  return false;}  }
class C{  static DateTime toDateOrDateTime(String text){  if (text == null) {    return null;  }  return DateTime.parseDateTimeChoice(text);}  }
class C{  public void informSearchIsFinished(Object population_data){  sendFinalMessage(Messages.FINISHED_COMPUTATION,population_data);}  }
class C{  @Override public void onFinishInflate(){  if (!alreadyInflated_) {    alreadyInflated_=true;    inflate(getContext(),layout.lv_toc,this);    onViewChangedNotifier_.notifyViewChanged(this);  }  super.onFinishInflate();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="k:local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private void updateLeafCalc(){  byte[] buf=new byte[messDigestOTS.getDigestSize()];  for (int s=0; s < steps + 10000; s++) {    if (i == keysize && j == two_power_w - 1) {      messDigestOTS.update(concHashs,0,concHashs.length);      leaf=new byte[messDigestOTS.getDigestSize()];      messDigestOTS.doFinal(leaf,0);      return;    } else     if (i == 0 || j == two_power_w - 1) {      i++;      j=0;      this.privateKeyOTS=gmssRandom.nextSeed(seed);    } else {      messDigestOTS.update(privateKeyOTS,0,privateKeyOTS.length);      privateKeyOTS=buf;      messDigestOTS.doFinal(privateKeyOTS,0);      j++;      if (j == two_power_w - 1) {        System.arraycopy(privateKeyOTS,0,concHashs,mdsize * (i - 1),mdsize);      }    }  }  throw new IllegalStateException("unable to updateLeaf in steps: " + steps + " "+ i+ " "+ j);}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScrollHorizontally()) {    if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {      View currentFocused=findFocus();      if (currentFocused == this) {        currentFocused=null;      }      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_RIGHT);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_RIGHT);    }    return false;  }  if (!canScrollVertically()) {    if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {      View currentFocused=findFocus();      if (currentFocused == this) {        currentFocused=null;      }      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_DOWN);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_DOWN);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:      if (!event.isAltPressed()) {        handled=arrowScrollHorizontally(View.FOCUS_LEFT);      } else {        handled=fullScroll(View.FOCUS_LEFT);      }    break;case KeyEvent.KEYCODE_DPAD_RIGHT:  if (!event.isAltPressed()) {    handled=arrowScrollHorizontally(View.FOCUS_RIGHT);  } else {    handled=fullScroll(View.FOCUS_RIGHT);  }break;case KeyEvent.KEYCODE_DPAD_UP:if (!event.isAltPressed()) {handled=arrowScrollVertically(View.FOCUS_UP);} else {handled=fullScroll(View.FOCUS_UP);}break;case KeyEvent.KEYCODE_DPAD_DOWN:if (!event.isAltPressed()) {handled=arrowScrollVertically(View.FOCUS_DOWN);} else {handled=fullScroll(View.FOCUS_DOWN);}break;case KeyEvent.KEYCODE_SPACE:if (event.isCtrlPressed()) {pageScroll(event.isShiftPressed() ? View.FOCUS_LEFT : View.FOCUS_RIGHT);} else {pageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);}break;}}return handled;}  }
class C{  public static String toHexString(int i){  return IntegralToString.intToHexString(i,false,0);}  }
class C{  public static String replaceSubPath(int depth,String path,String subPath){  StringBuffer newPath=new StringBuffer("/");  path.replace("\\","/");  String[] pathArray=path.split("/");  String[] subPathArray=subPath.split("/");  int iterations=pathArray.length - depth;  if (pathArray.length >= iterations) {    for (int i=0; i < iterations; i++)     if (!pathArray[i].equalsIgnoreCase(""))     newPath.append(pathArray[i] + "/");    for (int i=0; i < subPathArray.length; i++)     if (!subPathArray[i].equalsIgnoreCase(""))     newPath.append(subPathArray[i] + "/");    newPath.deleteCharAt(newPath.length() - 1);    return newPath.toString().trim();  }  return null;}  }
class C{  private static boolean processArgs(Log log,String[] args,ArrayList<String> osJarPath,String[] osDestJar){  boolean needs_dest=true;  for (int i=0; i < args.length; i++) {    String s=args[i];    if (s.equals("-v")) {      log.setVerbose(true);    } else     if (s.equals("-p")) {      sOptions.generatePublicAccess=false;    } else     if (s.equals("--list-deps")) {      sOptions.listAllDeps=true;      needs_dest=false;    } else     if (s.equals("--missing-deps")) {      sOptions.listOnlyMissingDeps=true;      needs_dest=false;    } else     if (!s.startsWith("-")) {      if (needs_dest && osDestJar[0] == null) {        osDestJar[0]=s;      } else {        osJarPath.add(s);      }    } else {      log.error("Unknow argument: %s",s);      return false;    }  }  if (osJarPath.isEmpty()) {    log.error("Missing parameter: path to input jar");    return false;  }  if (needs_dest && osDestJar[0] == null) {    log.error("Missing parameter: path to output jar");    return false;  }  sOptions.generatePublicAccess=false;  return true;}  }
class C{  public int[] toArray(){  SpinedBuffer.OfInt b=new SpinedBuffer.OfInt();  forEach(b);  return b.asPrimitiveArray();}  }
class C{  @Override public void endWindow(){}  }
class C{  private void checkPropagation() throws Exception {  byte[] testData1=new byte[]{0,1,2,3,4,5,6,7};  byte[] testData2=new byte[]{8,9,10,11};  byte[] testData=Arrays.copyOf(testData1,testData1.length + testData2.length);  U.arrayCopy(testData2,0,testData,testData1.length,testData2.length);  setSecondaryFs=true;  startUp();  boolean primaryNotUsed=mode == PROXY;  boolean secondaryUsed=mode != PRIMARY;  IgfsPath dir=new IgfsPath("/dir");  IgfsPath file=new IgfsPath("/dir/file");  igfs.mkdirs(dir);  IgfsOutputStream os=igfs.create(file,1024,true,null,0,2048,null);  os.write(testData1);  os.close();  os=igfs.append(file,1024,false,null);  os.write(testData2);  os.close();  IgfsInputStream is=igfs.open(file);  assertEquals(testData.length,is.length());  byte[] data=new byte[testData.length];  is.read(data,0,testData.length);  is.close();  assert Arrays.equals(testData,data);  if (secondaryUsed) {    assert igfsSecondary.exists(dir);    assert igfsSecondary.exists(file);    for (int i=0; i < 20; i++) {      IgfsInputStream isSecondary=null;      try {        isSecondary=igfsSecondary.open(file);        if (isSecondary.length() == testData.length)         break; else         U.sleep(100);      }  finally {        U.closeQuiet(isSecondary);      }    }    IgfsInputStream isSecondary=igfsSecondary.open(file);    assertEquals(testData.length,isSecondary.length());    isSecondary.read(data,0,testData.length);    assert Arrays.equals(testData,data);  } else {    assert !igfsSecondary.exists(dir);    assert !igfsSecondary.exists(file);  }  int cacheSize=grid.cachex("partitioned").size();  if (primaryNotUsed)   assert cacheSize == 0; else   assert cacheSize != 0;  igfs.delete(dir,true);  assert !igfs.exists(dir);  assert !igfs.exists(file);  assert !igfsSecondary.exists(dir);  assert !igfsSecondary.exists(file);}  }
class C{  private Expression parseChompExpression() throws ParseException {  int chompOffset=lexer.getCurrentOffset();  String chompTokenString=lexer.getTokenString();  if (token == Token.NUMBER) {    String numberString=lexer.getTokenString();    Expression exp=new ConstantExpression(convertNumber(numberString));    nextToken();    return exp;  }  if (token == Token.PARAMETER) {    if (lexer.getTokenString().equals("pi") || lexer.getTokenString().equals("PI")) {      nextToken();      return ConstantExpression.PI;    }    if (lexer.getTokenString().equals("e") || lexer.getTokenString().equals("E")) {      nextToken();      return ConstantExpression.E;    }    String stringToken=this.lexer.getTokenString();    if (getRestrictionType() == RestrictionType.MAY_ONLY_CONTAIN) {      if (!this.restrictionParameters.contains(stringToken)) {        throw new ParseException("Variable " + stringToken + " is not known.",chompOffset);      }    } else     if (getRestrictionType() == RestrictionType.MAY_NOT_CONTAIN) {      if (this.restrictionParameters.contains(stringToken)) {        throw new ParseException("Variable " + stringToken + " may not be used in this expression.",chompOffset);      }    }    this.parameters.add(stringToken);    VariableExpression exp=new VariableExpression(stringToken);    nextToken();    if (this.token == Token.EQUATION) {      return parseEvaluation(exp);    }    return exp;  }  if (token == Token.OPERATOR) {    ExpressionDescriptor descriptor=getDescriptor();    nextToken();    Expression[] expressions;    if (token == Token.LPAREN) {      nextToken();      if (token == Token.RPAREN) {        nextToken();        expressions=new Expression[0];      } else {        List<Expression> expressionList=parseExpressionList();        expect(Token.RPAREN);        expressions=expressionList.toArray(new Expression[expressionList.size()]);      }    } else     if ("+".equals(chompTokenString) || "-".equals(chompTokenString)) {      List<Expression> expressionList=parseSingleExpression();      expressions=expressionList.toArray(new Expression[expressionList.size()]);    } else {      throw new ParseException("Expecting a parenthesized list of arguments.",chompOffset);    }    try {      return descriptor.createExpression(expressions);    } catch (    ExpressionInitializationException e) {      throw new ParseException("Wrong number of arguments: " + expressions.length + " "+ token,chompOffset);    }  }  if (token == Token.LPAREN) {    nextToken();    Expression exp=parseExpression();    expect(Token.RPAREN);    return exp;  }  throw new ParseException("Unexpected token: " + lexer.getTokenString(),this.lexer.getCurrentOffset());}  }
class C{  public String read(Link link) throws IOException {  return link.readDelimiter(false);}  }
class C{  public void browseClickedUrl(View view){  String url=view.getContentDescription().toString();  startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(url)));}  }
class C{  protected void sequence_PatternCharacter(ISerializationContext context,PatternCharacter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (Date.class.equals(targetType)) {    rVal=true;  }  return (rVal);}  }
class C{  boolean removeParent(O parent){  if (parents == EMPTY) {    return false;  }  for (int i=0; i < nump; i++) {    if (parent.equals(parents[i])) {      --nump;      System.arraycopy(parents,i + 1,parents,i,nump - i);      parents[nump]=null;      if (nump == 0) {        parents=EMPTY;      }      return true;    }  }  return false;}  }
class C{  static <T extends Comparable>GeneralRange<T> from(Range<T> range){  @Nullable T lowerEndpoint=range.hasLowerBound() ? range.lowerEndpoint() : null;  BoundType lowerBoundType=range.hasLowerBound() ? range.lowerBoundType() : OPEN;  @Nullable T upperEndpoint=range.hasUpperBound() ? range.upperEndpoint() : null;  BoundType upperBoundType=range.hasUpperBound() ? range.upperBoundType() : OPEN;  return new GeneralRange<T>(Ordering.natural(),range.hasLowerBound(),lowerEndpoint,lowerBoundType,range.hasUpperBound(),upperEndpoint,upperBoundType);}  }
class C{  public final synchronized double rootValue(){  if (VM.VerifyAssertions)   VM._assert(!isEmpty());  return queue[1].priority;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.310 -0400",hash_original_method="9F945461B80E9E8AE77060DD726B4B61",hash_generated_method="20289F4599D2CA7C7A97594ED47DC465") public DSAPublicKeyImpl(X509EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  SubjectPublicKeyInfo subjectPublicKeyInfo=null;  byte[] encoding=keySpec.getEncoded();  String alg, algName;  try {    subjectPublicKeyInfo=(SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    y=new BigInteger((byte[])ASN1Integer.getInstance().decode(subjectPublicKeyInfo.getSubjectPublicKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=subjectPublicKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=(DSAParams)(new DSAParameterSpec(p,q,g));  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  @Override public boolean hasInstance(Scriptable instance){  Object protoProp=ScriptableObject.getProperty(this,"prototype");  if (protoProp instanceof Scriptable) {    return ScriptRuntime.jsDelegatesTo(instance,(Scriptable)protoProp);  }  throw ScriptRuntime.typeError1("msg.instanceof.bad.prototype",getFunctionName());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.233 -0500",hash_original_method="553A2E860A4F6148EE15CCC8CC3C5F34",hash_generated_method="E371B19500089A404A3F7B6A779D7ED9") private static boolean isTypingKey(KeyEvent keyEvent){  return keyEvent.getUnicodeChar() > 0;}  }
class C{  public static BufferedWriter newWriter(Path self) throws IOException {  return Files.newBufferedWriter(self,Charset.defaultCharset());}  }
class C{  protected void writeDDSHeader(DDSHeader header,java.nio.ByteBuffer buffer){  int pos=buffer.position();  buffer.putInt(header.getSize());  buffer.putInt(header.getFlags());  buffer.putInt(header.getHeight());  buffer.putInt(header.getWidth());  buffer.putInt(header.getLinearSize());  buffer.putInt(header.getDepth());  buffer.putInt(header.getMipMapCount());  buffer.position(buffer.position() + 44);  this.writeDDSPixelFormat(header.getPixelFormat(),buffer);  buffer.putInt(header.getCaps());  buffer.putInt(header.getCaps2());  buffer.putInt(header.getCaps3());  buffer.putInt(header.getCaps4());  buffer.position(buffer.position() + 4);  buffer.position(pos + header.getSize());}  }
class C{  public static Circle from2Points(Vec2D p1,Vec2D p2){  Vec2D m=p1.interpolateTo(p2,0.5f);  return new Circle(m,m.distanceTo(p1));}  }
class C{  public void send(WebSocket session,HeadersAmp headers,String to,String methodName,PodRef podCaller,Object... args) throws IOException {}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(30,5,"98665");  childData=child.getData();  assertEquals("characterdataReplaceDataEndAssert","1230 North Ave. Dallas, Texas 98665",childData);}  }
class C{  public Component add(Component component,int index){  if (!(component instanceof UIResource)) {    insertTab(component.getName(),null,component,null,index == -1 ? getTabCount() : index);  } else {    super.add(component,index);  }  return component;}  }
class C{  private static OFActionSetDlDst decode_set_dst_mac(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+)\\:(\\p{XDigit}+))").matcher(actionToDecode);  if (n.matches()) {    MacAddress macaddr=MacAddress.of(get_mac_addr(n,actionToDecode,log));    if (macaddr != null) {      OFActionSetDlDst.Builder ab=OFFactories.getFactory(version).actions().buildSetDlDst();      ab.setDlAddr(macaddr);      log.debug("action {}",ab.build());      return ab.build();    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  public TaskResults<T> executeParallel(){  Preconditions.checkArgument(!CollectionUtil.isCollectionEmpty(tasks),"No task found for execution");  Set<TaskResult<T>> results=executeParallel(tasks,false);  tasks.clear();  return new TaskResults<>(results);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.YIELD_EXPRESSION__EXPRESSION:    return getExpression();case N4JSPackage.YIELD_EXPRESSION__MANY:  return isMany();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public double calculateSimilarity(PatternReference pattern){  final int[] otherTF=pattern.getTermFrequency();  double score=0;  for (int i=0; i < termFrequency.length; i++) {    score+=termFrequency[i] * otherTF[i];  }  return score / (pattern.getTFMagnitude() * getTFMagnitude());}  }
class C{  public static void dump(String message,StackTraceElement[] stackTrace){  dump(message,Arrays.asList(stackTrace));}  }
class C{  @Override int nextOffset(int size,boolean isReference){  if (VM.VerifyAssertions)   VM._assert((size & (size - 1)) == 0);  adjustAlignment(size);  int logSize=log2(size);  int result=0;  for (int i=logSize; i <= LOG_MAX_SLOT_SIZE; i++) {    int slot=get(i);    if (slot != 0 || i == LOG_MAX_SLOT_SIZE) {      result=slot;      set(i,0);      for (i=i - 1; i >= logSize; i--) {        if (VM.VerifyAssertions)         VM._assert(get(i) == 0);        set(i,result + (1 << i));      }      break;    }  }  ensureObjectSize(result + size);  if (DEBUG) {    VM.sysWrite("  field: & offset ",result," New object size = ",getObjectSize());    VM.sysWrite(" slots: ");    for (int i=0; i < LOG_MAX_SLOT_SIZE; i++) {      VM.sysWrite(get(i),i == LOG_MAX_SLOT_SIZE - 1 ? "" : ", ");    }    VM.sysWriteln();  }  if (result >= Short.MAX_VALUE) {    VM.sysFail("Scalar class size exceeds offset width");  }  return result;}  }
class C{  public boolean startCall(int channel,MuxInputStream in,MuxOutputStream out) throws IOException {  in.init(this,channel);  out.init(this,channel);  return true;}  }
class C{  public FolderTokenFdrLink findById(int id) throws Exception {  int idx;  FolderTokenFdrLink link=null;  idx=super.findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  link=get(idx);  return link;}  }
class C{  public void testNotInlineSimpleFilterEqLiteralRev(){  final BigdataValueFactory f=store.getValueFactory();  final BigdataLiteral fooLit=f.createLiteral("foo");  final IV foo=makeIV(fooLit);  final BigdataValue[] values=new BigdataValue[]{fooLit};  store.getLexiconRelation().addTerms(values,values.length,false);  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionVar(new VarNode("p"));    projection.addProjectionVar(new VarNode("o"));    given.setProjection(projection);    final JoinGroupNode whereClause=new JoinGroupNode();    given.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS));    whereClause.addChild(new FilterNode(FunctionNode.EQ(new ConstantNode(foo),new VarNode("o"))));  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionVar(new VarNode("p"));    projection.addProjectionVar(new VarNode("o"));    expected.setProjection(projection);    final JoinGroupNode whereClause=new JoinGroupNode();    expected.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS));    whereClause.addChild(new FilterNode(FunctionNode.EQ(new ConstantNode(foo),new VarNode("o"))));  }  final IASTOptimizer rewriter=new ASTStaticBindingsOptimizer();  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void test_search04(){  int nkeys=0;  int maxKeys=4;  byte[][] keys=new byte[][]{};  doSearchTest04(new MutableKeyBuffer(nkeys,keys));}  }
class C{  public static boolean isServerUpgraded(Context context){  SharedPreferences pref=context.getSharedPreferences(UPGRADE_PREF_FILENAME,Context.MODE_PRIVATE);  if (pref.getBoolean(UPGRADE_PREF_KEY,false)) {    return true;  }  if (checkServerUpgrade(context)) {    pref.edit().putBoolean(UPGRADE_PREF_KEY,true).commit();    return true;  }  return false;}  }
class C{  public Builder executorService(final ExecutorService executorService){  this.executorService=executorService;  return this;}  }
class C{  public int capacity(){  return buffer.length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.211 -0500",hash_original_method="C3C9B07DEC7C1A6A9535E620A84F019D",hash_generated_method="9430F8637E78E5012E729DA0023F57BD") protected int findTokenStart(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  while (!found && (this.currentHeader != null)) {    final int to=this.currentHeader.length();    while (!found && (from < to)) {      final char ch=this.currentHeader.charAt(from);      if (isTokenSeparator(ch) || isWhitespace(ch)) {        from++;      } else       if (isTokenChar(this.currentHeader.charAt(from))) {        found=true;      } else {        throw new ParseException("Invalid character before token (pos " + from + "): "+ this.currentHeader);      }    }    if (!found) {      if (this.headerIt.hasNext()) {        this.currentHeader=this.headerIt.nextHeader().getValue();        from=0;      } else {        this.currentHeader=null;      }    }  }  return found ? from : -1;}  }
class C{  public boolean has(String memberName){  return members.containsKey(memberName);}  }
class C{  public static String resourcePathToHandle(final String project,final IPath resourcePath){  if (project != null && !"".equals(project) && resourcePath.segmentCount() != 1)   if (resourcePath.segment(0).equals(project)) {    return resourcePath.removeFirstSegments(1).toPortableString();  }  return resourcePath.toPortableString();}  }
class C{  private TableCell cell(String content,int rowSpan,int colSpan,boolean noWrap,String align,String valign){  TableCell cell=new TableCell();  cell.setRowSpan(rowSpan);  cell.setColSpan(colSpan);  cell.setNoWrap(noWrap);  cell.setAlign(align);  cell.setValign(valign);  cell.addContent("<font size=\"-1\">");  cell.addContent(content);  cell.addContent("</font>");  return (cell);}  }
class C{  public TypeValue copyType(){  return new TypeValue(this);}  }
class C{  private void filterInitiators(Collection<Initiator> initiators){  Iterator<Initiator> initiatorIterator=initiators.iterator();  while (initiatorIterator.hasNext()) {    Initiator initiator=initiatorIterator.next();    if (!initiator.getProtocol().equals(Initiator.Protocol.ScaleIO.name()) && !initiator.getProtocol().equals(Initiator.Protocol.iSCSI.name())) {      initiatorIterator.remove();    }  }}  }
class C{  public CGAffineTransform(float[] matrix){  this.type=TYPE_UNKNOWN;  m00=matrix[0];  m10=matrix[1];  m01=matrix[2];  m11=matrix[3];  if (matrix.length > 4) {    m02=matrix[4];    m12=matrix[5];  }}  }
class C{  public ConnectionConsumer createConnectionConsumer(final Destination destination,final ServerSessionPool pool,final int maxMessages) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createConnectionConsumer(" + destination + ", "+ pool+ ", "+ maxMessages+ ")");  }  throw new IllegalStateException(ISE);}  }
class C{  private static ImmutableList<IFlowgraphView> loadModuleFlowgraphs(final AbstractSQLProvider provider,final CModule module,final CTagManager viewTagManager,final CTagManager nodeTagManager,final ViewType viewType) throws CouldntLoadDataException {  checkArguments(provider,module,viewTagManager);  final String query=" SELECT * FROM load_module_flow_graphs(?, ?) ";  final CConnection connection=provider.getConnection();  try {    final PreparedStatement statement=connection.getConnection().prepareStatement(query);    statement.setInt(1,module.getConfiguration().getId());    statement.setObject(2,viewType == ViewType.Native ? "native" : "non-native",Types.OTHER);    final ResultSet resultSet=statement.executeQuery();    final Map<Integer,Set<CTag>> tags=loadTags(connection,module,viewTagManager);    return new ImmutableList.Builder<IFlowgraphView>().addAll(processQueryResults(resultSet,module,tags,nodeTagManager,provider,new ArrayList<CView>(),viewType,GraphType.FLOWGRAPH)).build();  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public static synchronized Level parse(String name) throws IllegalArgumentException {  name.length();  KnownLevel level;  level=KnownLevel.findByName(name);  if (level != null) {    return level.levelObject;  }  try {    int x=Integer.parseInt(name);    level=KnownLevel.findByValue(x);    if (level == null) {      Level levelObject=new Level(name,x);      level=KnownLevel.findByValue(x);    }    return level.levelObject;  } catch (  NumberFormatException ex) {  }  level=KnownLevel.findByLocalizedLevelName(name);  if (level != null) {    return level.levelObject;  }  throw new IllegalArgumentException("Bad level \"" + name + "\"");}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.411 -0500",hash_original_method="BCE7B8322CC2320F24F40E1C57B1D6A6",hash_generated_method="25936BC200236774CFBBA514A187D197") public TransformerException(Throwable e){  super(e.toString());  this.containedException=e;  this.locator=null;}  }
class C{  public void writeHttpResponse(String contentType,String response) throws IOException {  writeHttpResponse(contentType,response.getBytes("UTF-8"));}  }
class C{  public String next(int n){  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw new RuntimeException("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  protected long doHighlightingTest(String filename){  return myFixture.testHighlighting(true,true,true,getTestDataPath() + File.separator + filename);}  }
class C{  public boolean isPaid(){  Object oo=get_Value(COLUMNNAME_IsPaid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.472 -0500",hash_original_method="9F24053A4EC94DBA8AA05836E657F81D",hash_generated_method="D4C120861F559D2401C5E583DE1491F6") public void unlockCanvas(Canvas canvas){  addTaint(canvas.getTaint());}  }
class C{  public void removeValue() throws IllegalArgumentException {  setPayloadElement(signedElement);  log().info("Has payload? " + hasPayload());}  }
class C{  public VerifyRepositoryRequest(String name){  this.name=name;}  }
class C{  @Override public String toAscii(){  if (alphabeticalSort) {    Collections.sort(entries);  }  StringBuilder sb=new StringBuilder();  for (  AsciiFormEntry entry : entries) {    String title=getFormatterMode().formatFormTitle(entry.getName(),new MyAsciiFormInfo(this));    String value=getFormatterMode().formatFormValue(entry.getValue(),new MyAsciiFormInfo(this));    sb.append(String.format("%s%s%n",title,value));  }  return sb.toString();}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  protected void computeNorms(){  int N=continuousData.length;  xNorms=new double[N][N];  for (int t=0; t < N; t++) {    for (int t2=0; t2 < N; t2++) {      if (t2 == t) {        xNorms[t][t2]=Double.POSITIVE_INFINITY;        continue;      }      xNorms[t][t2]=normCalculator.norm(continuousData[t],continuousData[t2]);    }  }}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public void update(final Sketch<S> sketchIn){  final boolean isFirstCall=isFirstCall_;  isFirstCall_=false;  if (sketchIn == null) {    isEmpty_=true;    sketch_=null;    return;  }  theta_=min(theta_,sketchIn.getThetaLong());  isEmpty_|=sketchIn.isEmpty();  if (isEmpty_ || sketchIn.getRetainedEntries() == 0) {    sketch_=null;    return;  }  if (isFirstCall) {    sketch_=new QuickSelectSketch<S>(sketchIn.getRetainedEntries(),0,summaryFactory_);    SketchIterator<S> it=sketchIn.iterator();    while (it.next()) {      S summary=it.getSummary().copy();      sketch_.insert(it.getKey(),summary);    }  } else {    final int matchSize=min(sketch_.getRetainedEntries(),sketchIn.getRetainedEntries());    final long[] matchKeys=new long[matchSize];    @SuppressWarnings("unchecked") final S[] matchSummaries=(S[])Array.newInstance(summaryFactory_.newSummary().getClass(),matchSize);    int matchCount=0;    SketchIterator<S> it=sketchIn.iterator();    while (it.next()) {      S summary=sketch_.find(it.getKey());      if (summary != null) {        matchKeys[matchCount]=it.getKey();        matchSummaries[matchCount]=summaryFactory_.getSummarySetOperations().intersection(summary,it.getSummary());        matchCount++;      }    }    sketch_=null;    if (matchCount > 0) {      sketch_=new QuickSelectSketch<S>(matchCount,0,summaryFactory_);      for (int i=0; i < matchCount; i++)       sketch_.insert(matchKeys[i],matchSummaries[i]);    }  }  if (sketch_ != null) {    sketch_.setThetaLong(theta_);    sketch_.setNotEmpty();  }}  }
class C{  private void messageArrivedAction(Bundle data){  if (callback != null) {    String messageId=data.getString(MqttServiceConstants.CALLBACK_MESSAGE_ID);    String destinationName=data.getString(MqttServiceConstants.CALLBACK_DESTINATION_NAME);    ParcelableMqttMessage message=(ParcelableMqttMessage)data.getParcelable(MqttServiceConstants.CALLBACK_MESSAGE_PARCEL);    try {      if (messageAck == Ack.AUTO_ACK) {        callback.messageArrived(destinationName,message);        mqttService.acknowledgeMessageArrival(clientHandle,messageId);      } else {        message.messageId=messageId;        callback.messageArrived(destinationName,message);      }    } catch (    Exception e) {    }  }}  }
class C{  public static Cursor createGlobal(CursorType cursorType,DateTime cursorTime){  return create(cursorType,cursorTime,EntityGroupRoot.getCrossTldKey());}  }
class C{  synchronized void insertExtendedStyleAt(Style attr,int index){  insertAttributeSetAt(attr,extendedIndex + index);}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public static GetExecInfoParams create(@NotNull String execId){  return new GetExecInfoParams().withExecId(execId);}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String[] args){  StdDraw.square(.2,.8,.1);  StdDraw.filledSquare(.8,.8,.2);  StdDraw.circle(.8,.2,.2);  StdDraw.setPenColor(StdDraw.BOOK_RED);  StdDraw.setPenRadius(.02);  StdDraw.arc(.8,.2,.1,200,45);  StdDraw.setPenRadius();  StdDraw.setPenColor(StdDraw.BOOK_BLUE);  double[] x={.1,.2,.3,.2};  double[] y={.2,.3,.2,.1};  StdDraw.filledPolygon(x,y);  StdDraw.setPenColor(StdDraw.BLACK);  StdDraw.text(0.2,0.5,"black text");  StdDraw.setPenColor(StdDraw.WHITE);  StdDraw.text(0.8,0.8,"white text");}  }
class C{  public boolean hasGivenName(){  return hasExtension(GivenName.class);}  }
class C{  @Deprecated public Scenario loadScenario(){  String currentDir=new File("tmp").getAbsolutePath();  currentDir=currentDir.substring(0,currentDir.length() - 3);  log.info("loading scenario from base directory: " + currentDir);  this.loadNetwork();  this.loadActivityFacilities();  this.loadPopulation();  if (this.config.households().getInputFile() != null) {    this.loadHouseholds();  }  if (this.config.transit().isUseTransit()) {    this.loadTransit();  }  if (this.config.vehicles().getVehiclesFile() != null) {    this.loadVehicles();  }  if (this.config.network().getLaneDefinitionsFile() != null) {    this.loadLanes();  }  return this.scenario;}  }
class C{  public List<ListItem> makeListItems(){  List<ResolveInfo> list=onQueryPackageManager(mIntent);  onSortResultList(list);  ArrayList<ListItem> result=new ArrayList<ListItem>(list.size());  int listSize=list.size();  for (int i=0; i < listSize; i++) {    ResolveInfo resolveInfo=list.get(i);    result.add(new ListItem(mPackageManager,resolveInfo,null));  }  return result;}  }
class C{  public void testHeartList() throws IOException {  Query q=new TermQuery(new Term(FIELD_BODY,"heart"));  for (  SimilarityBase sim : sims) {    searcher.setSimilarity(sim);    TopDocs topDocs=searcher.search(q,1000);    assertEquals("Failed: " + sim.toString(),3,topDocs.totalHits);  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 98) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public SQLTransientConnectionException(){}  }
class C{  public void removeExceptionsAttribute(){  AttributeInfo.remove(attribute,ExceptionsAttribute.tag);}  }
class C{  public static DecomposableMatchBuilder0<Short> caseShort(short s){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(s));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Short.class));}  }
class C{  public Builder statsLogger(StatsLogger statsLogger){  this.statsLogger=statsLogger;  return this;}  }
class C{  public int put(String[] entry){  short leftId=Short.parseShort(entry[1]);  short rightId=Short.parseShort(entry[2]);  short wordCost=Short.parseShort(entry[3]);  StringBuilder sb=new StringBuilder();  for (int i=4; i < 8; i++) {    String part=entry[i];    assert part.length() > 0;    if (!"*".equals(part)) {      if (sb.length() > 0) {        sb.append('-');      }      sb.append(part);    }  }  String posData=sb.toString();  sb.setLength(0);  sb.append(CSVUtil.quoteEscape(posData));  sb.append(',');  if (!"*".equals(entry[8])) {    sb.append(CSVUtil.quoteEscape(entry[8]));  }  sb.append(',');  if (!"*".equals(entry[9])) {    sb.append(CSVUtil.quoteEscape(entry[9]));  }  String fullPOSData=sb.toString();  String baseForm=entry[10];  String reading=entry[11];  String pronunciation=entry[12];  int left=buffer.remaining();  int worstCase=4 + 3 + 2 * (baseForm.length() + reading.length() + pronunciation.length());  if (worstCase > left) {    ByteBuffer newBuffer=ByteBuffer.allocate(ArrayUtil.oversize(buffer.limit() + worstCase - left,1));    buffer.flip();    newBuffer.put(buffer);    buffer=newBuffer;  }  int flags=0;  if (!("*".equals(baseForm) || baseForm.equals(entry[0]))) {    flags|=BinaryDictionary.HAS_BASEFORM;  }  if (!reading.equals(toKatakana(entry[0]))) {    flags|=BinaryDictionary.HAS_READING;  }  if (!pronunciation.equals(reading)) {    flags|=BinaryDictionary.HAS_PRONUNCIATION;  }  assert leftId == rightId;  assert leftId < 4096;  int toFill=1 + leftId - posDict.size();  for (int i=0; i < toFill; i++) {    posDict.add(null);  }  String existing=posDict.get(leftId);  assert existing == null || existing.equals(fullPOSData);  posDict.set(leftId,fullPOSData);  buffer.putShort((short)(leftId << 3 | flags));  buffer.putShort(wordCost);  if ((flags & BinaryDictionary.HAS_BASEFORM) != 0) {    assert baseForm.length() < 16;    int shared=sharedPrefix(entry[0],baseForm);    int suffix=baseForm.length() - shared;    buffer.put((byte)(shared << 4 | suffix));    for (int i=shared; i < baseForm.length(); i++) {      buffer.putChar(baseForm.charAt(i));    }  }  if ((flags & BinaryDictionary.HAS_READING) != 0) {    if (isKatakana(reading)) {      buffer.put((byte)(reading.length() << 1 | 1));      writeKatakana(reading);    } else {      buffer.put((byte)(reading.length() << 1));      for (int i=0; i < reading.length(); i++) {        buffer.putChar(reading.charAt(i));      }    }  }  if ((flags & BinaryDictionary.HAS_PRONUNCIATION) != 0) {    if (isKatakana(pronunciation)) {      buffer.put((byte)(pronunciation.length() << 1 | 1));      writeKatakana(pronunciation);    } else {      buffer.put((byte)(pronunciation.length() << 1));      for (int i=0; i < pronunciation.length(); i++) {        buffer.putChar(pronunciation.charAt(i));      }    }  }  return buffer.position();}  }
class C{  public void updateEdgeDrawingState(){  if (m_graph.getSettings().getEdgeSettings().getEdgeHidingMode() == EdgeHidingMode.HIDE_ON_THRESHOLD) {    final boolean drawEdges=CEdgeDrawingFunctions.calcDrawSloppyEdges(m_graph);    if (m_areEdgesVisible != drawEdges) {      setEdgeDrawing(drawEdges);      m_areEdgesVisible=drawEdges;    }  }}  }
class C{  protected BallNode makeBallTree(TempNode node,int startidx,int endidx,int[] instList,int depth,final double rootRadius) throws Exception {  BallNode ball=null;  Instance pivot;  if (m_MaxDepth < depth)   m_MaxDepth=depth;  if (node.points.length > m_MaxInstancesInLeaf && (rootRadius == 0 ? false : node.radius / rootRadius >= m_MaxRelLeafRadius) && node.left != null && node.right != null) {    ball=new BallNode(startidx,endidx,m_NumNodes,(pivot=BallNode.calcCentroidPivot(startidx,endidx,instList,m_Instances)),BallNode.calcRadius(startidx,endidx,instList,m_Instances,pivot,m_DistanceFunction));    m_NumNodes+=1;    ball.m_Left=makeBallTree(node.left,startidx,startidx + node.left.points.length - 1,instList,depth + 1,rootRadius);    ball.m_Right=makeBallTree(node.right,startidx + node.left.points.length,endidx,instList,depth + 1,rootRadius);  } else {    ball=new BallNode(startidx,endidx,m_NumNodes,(pivot=BallNode.calcCentroidPivot(startidx,endidx,instList,m_Instances)),BallNode.calcRadius(startidx,endidx,instList,m_Instances,pivot,m_DistanceFunction));    m_NumNodes+=1;    m_NumLeaves++;  }  return ball;}  }
class C{  public UserDTO(String firstName,String lastName,String userName,String emailAddress){  super();  this.firstName=firstName;  this.lastName=lastName;  this.userName=userName;  this.emailAddress=emailAddress;}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return prj.compute();}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  protected final PointPair calculateEdge(DisplayNode comp1,DisplayNode comp2){  Rectangle r1=comp1.getBounds();  Rectangle r2=comp2.getBounds();  Point c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));  Point c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));  double angle=Math.atan2(c1.y - c2.y,c1.x - c2.x);  angle+=Math.PI / 2;  Point d=new Point((int)(offset * Math.cos(angle)),(int)(offset * Math.sin(angle)));  c1.translate(d.x,d.y);  c2.translate(d.x,d.y);  Point p1=getBoundaryIntersection(comp1,c1,c2);  Point p2=getBoundaryIntersection(comp2,c2,c1);  if ((p1 == null) || (p2 == null)) {    c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));    c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));    p1=getBoundaryIntersection(comp1,c1,c2);    p2=getBoundaryIntersection(comp2,c2,c1);  }  if ((p1 == null) || (p2 == null)) {    return null;  }  return new PointPair(p1,p2);}  }
class C{  public void add(lalr_item_set other) throws internal_error {  not_null(other);  for (Enumeration e=other.all(); e.hasMoreElements(); )   add((lalr_item)e.nextElement());}  }
class C{  public static void exportAsSvg(final JFrame parent,final ZyGraph graph){  Preconditions.checkNotNull(parent,"IE01737: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01738: Graph argument can not be null");  final LastDirFileChooser fileChooser=new LastDirFileChooser();  final int retval=fileChooser.showSaveDialog(parent);  if (retval == JFileChooser.APPROVE_OPTION) {    try {      if (!GraphExporters.exportAllAsSVG(graph,fileChooser.getSelectedFile().getAbsolutePath())) {        throw new IOException("Failed to save SVG");      }    } catch (    final IOException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00195: " + "Could not save view to SVG file";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be written to the file '%s'.",graph.getViewName(),fileChooser.getSelectedFile().getAbsolutePath()),new String[]{"There was a problem writing the PNG file."},new String[]{"The view was not written to the PNG file."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public void testIntegration5(){  boolean res;  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  String originalAppIdName=mAppIdName;  String originalContentTypeName=mContentTypeName;  String originalClassName=mClassName;  byte[] originalMessageBody=mMessageBody;  Random rd=new Random();  IWapPushManager iwapman=getInterface();  IDataVerify dataverify=getVerifyInterface();  mClassName="com.android.smspush.unitTests.ReceiverService";  for (int i=0; i < OMA_APPLICATION_ID_VALUES.length + OMA_CONTENT_TYPE_VALUES.length; i++) {    mAppIdValue=OMA_APPLICATION_ID_VALUES[rd.nextInt(OMA_APPLICATION_ID_VALUES.length)];    mContentTypeValue=OMA_CONTENT_TYPE_VALUES[rd.nextInt(OMA_CONTENT_TYPE_VALUES.length)];    mMessageBody=new byte[100 + rd.nextInt(100)];    rd.nextBytes(mMessageBody);    byte[] pdu=createPDU(3);    byte[] wappushPdu=retrieveWspBody();    try {      dataverify.resetData();      if (isContentTypeMapped(mContentTypeValue)) {        mContentTypeName=getContentTypeName(mContentTypeValue);        Log.d(LOG_TAG,"mContentTypeValue mapping " + mContentTypeValue + ":"+ mContentTypeName);      } else {        mContentTypeName=Integer.toString(mContentTypeValue);      }      iwapman.addPackage(Integer.toString(mAppIdValue),mContentTypeName,mPackageName,mClassName,WapPushManagerParams.APP_TYPE_SERVICE,false,false);      dispatchWapPdu(wappushPdu,iwapman);      iwapman.deletePackage(Integer.toString(mAppIdValue),mContentTypeName,mPackageName,mClassName);      if (mContentTypeName.equals(WspTypeDecoder.CONTENT_TYPE_B_PUSH_CO)) {        assertTrue(dataverify.verifyData(wappushPdu));      } else {        assertTrue(dataverify.verifyData(mMessageBody));      }    } catch (    RemoteException e) {    }  }  mClassName=originalClassName;  mAppIdName=originalAppIdName;  mContentTypeName=originalContentTypeName;  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  mMessageBody=originalMessageBody;}  }
class C{  protected static void indexExistingRows(Connection conn,String schema,String table) throws SQLException {  FullText.FullTextTrigger existing=new FullText.FullTextTrigger();  existing.init(conn,schema,null,table,false,Trigger.INSERT);  String sql="SELECT * FROM " + StringUtils.quoteIdentifier(schema) + "."+ StringUtils.quoteIdentifier(table);  ResultSet rs=conn.createStatement().executeQuery(sql);  int columnCount=rs.getMetaData().getColumnCount();  while (rs.next()) {    Object[] row=new Object[columnCount];    for (int i=0; i < columnCount; i++) {      row[i]=rs.getObject(i + 1);    }    existing.fire(conn,null,row);  }}  }
class C{  public static String exportAscii(PublicKeyStore securityKey) throws PGPException {  PGPPublicKey pgpKey=convert(securityKey);  return PGPKeyUtil.exportAscii(pgpKey);}  }
class C{  public static void validate(CertPath path,PKIXParameters params) throws Exception {  CertPathValidator validator=CertPathValidator.getInstance("PKIX");  CertPathValidatorResult cpvr=validator.validate(path,params);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().hasRemoteFSSupport()) {    return new Boolean(((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).fsDeletePath(getString(stack)));  } else   return Boolean.valueOf(getFile(stack).delete());}  }
class C{  @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.setContentType("text/plain");  String msg=req.getParameter("msg");  resp.getWriter().write("Echo:" + msg);}  }
class C{  public boolean wasFinished(){  return isFinished;}  }
class C{  public boolean hasBreakpoint(){  return hasBreakpoint(BreakpointListener.BREAKPOINT_BEFORE) || hasBreakpoint(BreakpointListener.BREAKPOINT_AFTER);}  }
class C{  public boolean isSymmetric(){  return arrayEquals(tcW,tcB);}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.PARENTHESIZED_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  protected void requestDemand(){  ctx.read();}  }
class C{  public boolean isCellEditable(EventObject anEvent){  if (!m_mField.isEditable(true))   return false;  log.fine(m_mField.getHeader());  if (anEvent instanceof MouseEvent && ((MouseEvent)anEvent).getClickCount() < CLICK_TO_START)   return false;  if (m_editor == null)   createEditor();  return true;}  }
class C{  public final CC growPrio(int... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  growPrioY(widthHeight[1]);case 1:growPrioX(widthHeight[0]);}return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.146 -0500",hash_original_method="35710279C92937D6002494F8923AF4C7",hash_generated_method="6E9348F7EFB5AD81FB65B907A9AA86BD") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public synchronized void write(byte buffer[],int offset,int length) throws IOException {  while (length-- > 0)   write(buffer[offset++]);}  }
class C{  @Override public void update(Observable o,Object arg){  Node current=new Node(ent.getX(),ent.getY());  if (current.equals(position)) {    finish();  } else {    path=new FixedPath(Path.searchPath(ent,position.getX(),position.getY()),false);    if (path.getNodeList().size() == 0) {      finish();    } else {      if (s) {        s=false;        finish();      } else {        ent.pathnotifier.setObserver(this);        ent.setPath(path);        s=true;      }    }  }}  }
class C{  public int size(){  return set.size();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  public void testFileChannel() throws IOException {  InfoStreamListener stream=new InfoStreamListener("newFileChannel");  Path dir=wrap(createTempDir(),stream);  FileChannel channel=FileChannel.open(dir.resolve("foobar"),StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE);  assertTrue(stream.sawMessage());  channel.close();  try {    FileChannel.open(dir.resolve("foobar"),StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE);    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  public int next(){  int node=_currentNode;  _currentNode=m_traverser.next(_startNode,_currentNode);  return returnNode(node);}  }
class C{  public static String replace(String source,String substring,String newsubstring){  StringBuffer sb=new StringBuffer(source);  int idx=-1;  int len1=substring.length();  int len2=newsubstring.length();  while ((idx=(sb.toString().indexOf(substring,idx))) >= 0) {    sb.replace(idx,idx + len1,newsubstring);    idx+=len2;  }  return sb.toString();}  }
class C{  private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){  if (p != null) {    if (g instanceof Graphics2D) {      Graphics2D gfx=(Graphics2D)g;      if (transform != null) {        gfx.transform(transform);      }      gfx.translate(x,y);      p.paint(gfx,ctx.getComponent(),w,h);      gfx.translate(-x,-y);      if (transform != null) {        try {          gfx.transform(transform.createInverse());        } catch (        NoninvertibleTransformException e) {          e.printStackTrace();        }      }    } else {      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);      Graphics2D gfx=img.createGraphics();      if (transform != null) {        gfx.transform(transform);      }      p.paint(gfx,ctx.getComponent(),w,h);      gfx.dispose();      g.drawImage(img,x,y,null);      img=null;    }  }}  }
class C{  private PrintElement layoutParameter(){  if (m_query == null || !m_query.isActive())   return null;  ParameterElement pe=new ParameterElement(m_query,m_printCtx,m_format.getTableFormat());  pe.layout(0,0,false,null);  return pe;}  }
class C{  @Deprecated public void unsetNoteApplicationDataEntry(String guid,String key,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"unsetNoteApplicationDataEntry",mAuthenticationToken,guid,key);}  }
class C{  public void parseForClass(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    parseClassSignature();  } else {    if (genericDecl instanceof Class) {      Class c=(Class)genericDecl;      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;      this.superclassType=c.getSuperclass();      Class<?>[] interfaces=c.getInterfaces();      if (interfaces.length == 0) {        this.interfaceTypes=ListOfTypes.EMPTY;      } else {        this.interfaceTypes=new ListOfTypes(interfaces);      }    } else {      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;      this.superclassType=Object.class;      this.interfaceTypes=ListOfTypes.EMPTY;    }  }}  }
class C{  public String goForward(){  if (pointer < messages.size() - 1) {    pointer++;  } else {    return "";  }  if (messages.size() > 0) {    return messages.get(pointer);  }  return null;}  }
class C{  public void add(int data,boolean obscure){  if (obscure) {    obscuredIndexes.put(new Integer(tagData.size()),new Boolean(true));  }  tagData.addElement(String.valueOf(data));}  }
class C{  public Enumeration productions(){  return _productions.elements();}  }
class C{  private boolean processGpsPoint(double dist,int lastLpfLonm,int lastLpfLatm,GpsLocationRow lastGpsLocRow,int lpfLonm,int lpfLatm,GpsLocationRow currGpsLocRow,int minDepth,boolean isVeryFirst){  int lastTimeSec=(int)(lastGpsLocRow.getTime() / 1000);  int timeSec=(int)(currGpsLocRow.getTime() / 1000);  if (lastTimeSec >= timeSec - 2) {    return false;  }  if (currGpsLocRow.getTime() < lastGpsLocRow.getTime()) {    return false;  }  int lastX=AreaPanel.convertLonmToX(lastLpfLonm);  int lastY=AreaPanel.convertLatmToY(lastLpfLatm);  int x=AreaPanel.convertLonmToX(lpfLonm);  int y=AreaPanel.convertLatmToY(lpfLatm);  if (lastX == x && lastY == y) {    return false;  }  GTG.apCache.getTopRow().addPoint(currGpsLocRow.id,isVeryFirst ? null : GTG.apCache.getTopRow(),lastX,lastY,x,y,lastTimeSec,timeSec,dist);  viewNodeThreadManager.registerWritingThread();  if (headVn.status != null)   headVn.addPointToHead(x,y,lastTimeSec,timeSec,minDepth);  viewNodeThreadManager.unregisterWritingThread();  return true;}  }
class C{  public String go(){  StringWriter sw=new StringWriter();  try {    go(sw);  } catch (  IOException e) {    throw new RuntimeException(e);  }  return sw.toString();}  }
class C{  private boolean configurePrevision(PrevisionVO prevision){  prevision.setFondoCanBeChanged(permitidaModificacionFondo(prevision));  prevision.setFondoCanBeChanged(permitidaModificacionFondo(prevision));  prevision.setArchivoRemitenteCanBeChanged(permitidaModificacionArchivoRemitente(prevision));  prevision.setArchivoReceptorCanBeChanged(permitidaModificacionArchivoReceptor(prevision));  prevision.setPuedeSerEnviada(puedeSerEnviada(prevision));  prevision.setPuedeSerEliminada(puedeSerEliminada(prevision));  prevision.setPuedeSerEditada(puedeSerEditada(prevision));  prevision.setPuedeSerAceptada(puedeSerAceptada(prevision));  prevision.setAceptaRelaciones(aceptaRelaciones(prevision));  prevision.setPuedeSerModificada(puedeSerModificada(prevision));  prevision.setPermitidaSeleccionProcedimiento(permitidaSeleccionProcedimiento(prevision));  return errorCode != -1;}  }
class C{  public Timer(Timeable owner,long interval){  this.owner=owner;  this.interval=interval;  remainingTime=interval;  regular=true;  sleepUntil=System.currentTimeMillis();  stopped=true;synchronized (getClass()) {    if (timerThread == null) {      timerThread=new TimerThread();    }  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","xzit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void removeCheckpoint(){  checkpointIndex=-1;}  }
class C{  public void clearInputs(){  inputs.clear();  inputParameters.clear();  inputVariables.clear();  inputMetadata.clear();}  }
class C{  public void subscribe(EventSubscriber<?> subscriber){  final Class<?> eventType=getEventType(subscriber);  doSubscribe(subscriber,eventType);}  }
class C{  @Deprecated static public final SprogSlotMonFrame instance(){  return null;}  }
class C{  public void withdraw(double amount){  if (getBalance() - amount > overdraftLimit) {    setBalance(getBalance() - amount);  } else   System.out.println("Error! Amount exceeds overdraft limit.");}  }
class C{  public int kthSmallest(TreeNode root,int k){  count=k;  traverse(root);  return res;}  }
class C{  public int lastIndexOf(int c){  return lastIndexOf(c,count - 1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns04.class,args);}  }
class C{  public static void main(String args[]) throws Exception {  Instances D=new Instances(new FileReader(args[0]));  Instance x=D.lastInstance();  D.remove(D.numInstances() - 1);  int L=Integer.parseInt(args[1]);  D.setClassIndex(L);  double y[]=new double[L];  Random r=new Random();  int s[]=new int[]{1,0,2};  int PA_J[][]=new int[][]{{},{},{0,1}};  for (  int j : s) {    int pa_j[]=PA_J[j];    System.out.println("PARENTS = " + Arrays.toString(pa_j));    System.out.println("**** TRAINING ***");    CNode n=new CNode(j,null,pa_j);    n.build(D,new SMO());    System.out.println("============== D_" + j + " / class = "+ n.T.classIndex()+ " =");    System.out.println("" + n.T);    System.out.println("**** TESTING ****");    Instance x_=n.transform(x,y);    System.out.println("" + x_);    y[j]=1;  }}  }
class C{  public CCUpdateableTest(String name){  super(name);}  }
class C{  public void put(String id,Bitmap bitmap){  try {    if (cache.containsKey(id))     size.set(size.get() - getSizeInBytes(cache.get(id)));    cache.put(id,bitmap);    size.set(size.get() + getSizeInBytes(bitmap));    checkSize();  } catch (  Throwable th) {    th.printStackTrace();  }}  }
class C{  public static Symtab instance(Context context){  Symtab instance=context.get(symtabKey);  if (instance == null)   instance=new Symtab(context);  return instance;}  }
class C{  public static int growSize(int currentSize){  return currentSize <= 4 ? 8 : currentSize * 2;}  }
class C{  public Alarm(){  this(Repetition.ONCE,ZonedDateTime.now().plus(5,ChronoUnit.MINUTES),true,"",null,Clock.DARK_COLOR);}  }
class C{  public int lineToY(int line){  FontMetrics fm=painter.getFontMetrics();  return (line - firstLine) * fm.getHeight() - (fm.getLeading() + fm.getMaxDescent());}  }
class C{  public Builder modules(DebugModule... drawerItems){  return this;}  }
class C{  public void testSetF22Momentary(){  boolean f22Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF22Momentary(f22Momentary);}  }
class C{  public TraceInterval splitParent(){  assert splitParent.isSplitParent() : "not a split parent: " + this;  return splitParent;}  }
class C{  private OkHttpClient copyWithDefaults(){  OkHttpClient result=new OkHttpClient(this);  result.proxy=proxy;  result.proxySelector=proxySelector != null ? proxySelector : ProxySelector.getDefault();  result.cookieHandler=cookieHandler != null ? cookieHandler : CookieHandler.getDefault();  result.responseCache=responseCache != null ? responseCache : ResponseCache.getDefault();  result.sslSocketFactory=sslSocketFactory != null ? sslSocketFactory : HttpsURLConnection.getDefaultSSLSocketFactory();  result.hostnameVerifier=hostnameVerifier != null ? hostnameVerifier : OkHostnameVerifier.INSTANCE;  result.authenticator=authenticator != null ? authenticator : HttpAuthenticator.SYSTEM_DEFAULT;  result.connectionPool=connectionPool != null ? connectionPool : ConnectionPool.getDefault();  result.followProtocolRedirects=followProtocolRedirects;  result.transports=transports != null ? transports : DEFAULT_TRANSPORTS;  result.connectTimeout=connectTimeout;  result.readTimeout=readTimeout;  return result;}  }
class C{  public ArithmaticExpression add(String propertyName){  this.getChildren().add(new PropertyValueExpression(propertyName));  return this;}  }
class C{  public List queryEquijoinCondition(IndexProtocol indx,ExecutionContext context) throws TypeMismatchException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  long start=updateIndexUseStats();  ((AbstractIndex)indx).updateIndexUseStats();  List data=new ArrayList();  Iterator inner=null;  try {    Iterator outer=entriesSet.iterator();    if (indx instanceof CompactRangeIndex) {      inner=((CompactRangeIndex)indx).getIndexStorage().iterator(null);    } else {      inner=((RangeIndex)indx).getValueToEntriesMap().entrySet().iterator();    }    Map.Entry outerEntry=null;    Object innerEntry=null;    Object outerKey=null;    Object innerKey=null;    boolean incrementInner=true;    outer:     while (outer.hasNext()) {      outerEntry=(Map.Entry)outer.next();      outerKey=outerEntry.getKey();      inner:       while (!incrementInner || inner.hasNext()) {        if (incrementInner) {          innerEntry=inner.next();          if (innerEntry instanceof IndexStoreEntry) {            innerKey=((IndexStoreEntry)innerEntry).getDeserializedKey();          } else {            innerKey=((Map.Entry)innerEntry).getKey();          }        }        int compare=((Comparable)outerKey).compareTo(innerKey);        if (compare == 0) {          Object innerValue=null;          if (innerEntry instanceof IndexStoreEntry) {            innerValue=((CompactRangeIndex)indx).getIndexStorage().get(outerKey);          } else {            innerValue=((Map.Entry)innerEntry).getValue();          }          populateListForEquiJoin(data,outerEntry.getValue(),innerValue,context,innerKey);          incrementInner=true;          continue outer;        } else         if (compare < 0) {          incrementInner=false;          continue outer;        } else {          incrementInner=true;        }      }      break;    }    return data;  }  finally {    ((AbstractIndex)indx).updateIndexUseEndStats(start);    updateIndexUseEndStats(start);    if (inner != null && indx instanceof CompactRangeIndex) {      ((CloseableIterator<IndexStoreEntry>)inner).close();    }  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public FloatRangeField(String name,final float[] min,final float[] max){  super(name,getType(min.length));  setRangeValues(min,max);}  }
class C{  private boolean isDisabledView(final MPartDescriptor descriptor){  return VIEW_BLACKLIST.contains(descriptor.getElementId()) || VIEW_CATEGORY_BLACKLIST.contains(descriptor.getCategory());}  }
class C{  public static @ColorInt int scrimify(@ColorInt int color,boolean isDark,@FloatRange(from=0f,to=1f) float lightnessMultiplier){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  if (!isDark) {    lightnessMultiplier+=1f;  } else {    lightnessMultiplier=1f - lightnessMultiplier;  }  hsl[2]=MathUtils.constrain(0f,1f,hsl[2] * lightnessMultiplier);  return android.support.v4.graphics.ColorUtils.HSLToColor(hsl);}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  public byte[] toNativeArray(){  return toNativeArray(0,_pos);}  }
class C{  public String useAICTipText(){  return "The AIC is used to determine when to stop LogitBoost iterations. " + "The default is not to use AIC.";}  }
class C{  public void subtract(Rect toSubtract){  int size=list.size();  ObjectPool.Entry<ArrayList<ObjectPool.Entry<Rect>>> listEntry=listRectsPool.reserve();  ArrayList<ObjectPool.Entry<Rect>> newList=listEntry.get();  newList.clear();  for (int i=0; i < size; i++) {    ObjectPool.Entry<Rect> entry=list.get(i);    Rect rect=entry.get();switch (nonOverlappingPortion.overlap(rect,toSubtract)) {case SAME:      pool.release(entry);    newList.clear();  list.remove(i);return;case CONTAINED_BY:pool.release(entry);list.remove(i);i--;size--;break;case NONE:break;case COALESCIBLE:if (!nonOverlappingPortion.verticalOverlap || !nonOverlappingPortion.horizontalOverlap) break;case CONTAINS:nonOverlappingPortion.setCornerOwnership();case PARTIAL:{ObjectPool.Entry<NonOverlappingRects> rectsEntry=nonOverlappingRectsPool.reserve();NonOverlappingRects rects=rectsEntry.get();rects.Populate(nonOverlappingPortion,pool,nonOverlappingPortion.r1Owns);pool.release(entry);list.remove(i);i--;size--;for (int j=0; j < rects.count; j++) {newList.add(rects.rectEntries[j]);}nonOverlappingRectsPool.release(rectsEntry);}}}size=newList.size();for (int i=0; i < size; i++) {recursiveAdd(newList.get(i),0);}listRectsPool.release(listEntry);}  }
class C{  private void checkZkStepToWorkflowSize() throws Exception {  int zkStep2WorkflowSize=WorkflowService.getZkStep2WorkflowSize();  if (zkStep2WorkflowSize > MAX_WORKFLOW_STEPS) {    _log.error("Queue is too busy. More than " + MAX_WORKFLOW_STEPS + " zookeeper step2workflow found.");    throw ClientControllerException.retryables.queueToBusy();  }}  }
class C{  protected void resetAttribute(SVGItem item){}  }
class C{  @Transactional(readOnly=true) public NucleotideSequence retrieveByXrefIdentifier(String identifier){  final Query query=entityManager.createQuery("SELECT s FROM NucleotideSequence s INNER JOIN s.xrefs x " + "WHERE x.identifier = :identifier");  query.setParameter("identifier",identifier);  @SuppressWarnings("unchecked") List<NucleotideSequence> list=query.getResultList();  if (list != null && !list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public final void println(Object o) throws IOException {  if (o == null)   println("null"); else   println(o.toString());}  }
class C{  public static AlertExecutor[] createAlertExecutors(Config config,AlertDefinitionDAO alertDefDAO,List<String> streamNames,String alertExecutorId) throws Exception {  int numPartitions=1;  String partitionerCls=DefaultPolicyPartitioner.class.getCanonicalName();  String alertExecutorConfigsKey="alertExecutorConfigs";  if (config.hasPath(alertExecutorConfigsKey)) {    Map<String,ConfigValue> alertExecutorConfigs=config.getObject(alertExecutorConfigsKey);    if (alertExecutorConfigs != null && alertExecutorConfigs.containsKey(alertExecutorConfigs)) {      Map<String,Object> alertExecutorConfig=(Map<String,Object>)alertExecutorConfigs.get(alertExecutorId).unwrapped();      int parts=0;      if (alertExecutorConfig.containsKey("parallelism"))       parts=(int)(alertExecutorConfig.get("parallelism"));      numPartitions=parts == 0 ? 1 : parts;      if (alertExecutorConfig.containsKey("partitioner"))       partitionerCls=(String)alertExecutorConfig.get("partitioner");    }  }  return createAlertExecutors(alertDefDAO,streamNames,alertExecutorId,numPartitions,partitionerCls);}  }
class C{  public FancyLruCache(Context context,int cachePercentage){  if (cachePercentage < 1 || cachePercentage > 80) {    throw new IllegalArgumentException("cache percentage must be " + "between 1 and 80");  }  mCache=new LinkedHashMap<Integer,Bitmap>();  mMaxSize=getDefaultCacheSize(context,cachePercentage);}  }
class C{  public double slope(){  return intercept;}  }
class C{  public boolean isReadOnly(){  return true;}  }
class C{  private boolean onActionBarItemSelected(int itemId){  if (itemId == R.id.action_done) {    if (EditEventHelper.canModifyEvent(mModel) || EditEventHelper.canRespond(mModel)) {      if (mView != null && mView.prepareForSave()) {        if (mModification == Utils.MODIFY_UNINITIALIZED) {          mModification=Utils.MODIFY_ALL;        }        mOnDone.setDoneCode(Utils.DONE_SAVE | Utils.DONE_EXIT);        mOnDone.run();      } else {        mOnDone.setDoneCode(Utils.DONE_REVERT);        mOnDone.run();      }    } else     if (EditEventHelper.canAddReminders(mModel) && mModel.mId != -1 && mOriginalModel != null && mView.prepareForSave()) {      saveReminders();      mOnDone.setDoneCode(Utils.DONE_EXIT);      mOnDone.run();    } else {      mOnDone.setDoneCode(Utils.DONE_REVERT);      mOnDone.run();    }  } else   if (itemId == R.id.action_cancel) {    mOnDone.setDoneCode(Utils.DONE_REVERT);    mOnDone.run();  }  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof Locale))   return false;  BaseLocale otherBase=((Locale)obj).baseLocale;  if (!baseLocale.equals(otherBase)) {    return false;  }  if (localeExtensions == null) {    return ((Locale)obj).localeExtensions == null;  }  return localeExtensions.equals(((Locale)obj).localeExtensions);}  }
class C{  public EipModelWizardNewFileCreationPage(String pageId,IStructuredSelection selection){  super(pageId,selection);}  }
class C{  private int initialAssignToNearestCluster(Relation<V> relation,double[][] means,double[][] sums,List<ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,WritableDoubleDataStore upper,WritableDoubleDataStore lower){  assert (k == means.length);  final NumberVectorDistanceFunction<? super V> df=getDistanceFunction();  boolean issquared=(df instanceof SquaredEuclideanDistanceFunction);  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    V fv=relation.get(it);    double min1=Double.POSITIVE_INFINITY, min2=Double.POSITIVE_INFINITY;    int minIndex=-1;    for (int i=0; i < k; i++) {      double dist=df.distance(fv,DoubleVector.wrap(means[i]));      if (dist < min1) {        minIndex=i;        min2=min1;        min1=dist;      } else       if (dist < min2) {        min2=dist;      }    }    if (issquared) {      min1=Math.sqrt(min1);      min2=Math.sqrt(min2);    }    ModifiableDBIDs newc=clusters.get(minIndex);    newc.add(it);    assignment.putInt(it,minIndex);    double[] newmean=sums[minIndex];    for (int d=0; d < fv.getDimensionality(); d++) {      newmean[d]+=fv.doubleValue(d);    }    upper.putDouble(it,min1);    lower.putDouble(it,min2);  }  return relation.size();}  }
class C{  public boolean verify() throws SpkacException {  try {    byte[] publicKeyAndChallenge=createPublicKeyAndChallengeForSigning();    Signature sig=Signature.getInstance(getSignatureAlgorithm().jce());    sig.initVerify(getPublicKey());    sig.update(publicKeyAndChallenge);    return sig.verify(signature);  } catch (  GeneralSecurityException ex) {    throw new SpkacException(res.getString("NoVerifySpkacSignature.exception.message"),ex);  }}  }
class C{  public void checkBlocksizeL(final int value){  if (value > blocksize_L) {    this.blocksize_L=value;  }  this.countL++;  this.countT+=value;}  }
class C{  protected void updateSIGMA(){  Matrix SIGMA_inv=PHI_t.times(PHI_t.transpose());  SIGMA_inv.timesEquals(beta);  SIGMA_inv.plusEquals(A);  SECholeskyDecomposition CD=new SECholeskyDecomposition(SIGMA_inv.getArray());  Matrix U=CD.getPTR().times(CD.getL());  SIGMA_chol=U.inverse();  SIGMA=(SIGMA_chol.transpose()).times(SIGMA_chol);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","2.0");  assertTrue("throw_True",state);}  }
class C{  public synchronized String init(){synchronized (this) {    buffer=new StringBuffer();    notify();  }  return getInitialState();}  }
class C{  public boolean fullyMatchesDisk(){synchronized (this) {    return mCacheFullyMatchesDisk;  }}  }
class C{  public String _append(String str){  if (offset + size + 1 > arr.length)   enlargeCapacity(size + 1);  arr[offset + size]=str;  size++;  return str;}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/vpool") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) @Deprecated public TaskResourceRep changeVolumeVirtualPool(@PathParam("id") URI id,VirtualPoolChangeParam param) throws InternalException, APIException {  _log.info("Request to change VirtualPool for volume {}",id);  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume volume=queryVolumeResource(id);  _log.info("Found volume");  BlockServiceUtils.validateNotAnInternalBlockObject(volume,false);  VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume(volume,ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VPOOL,_dbClient);  URI projectURI=volume.getProject().getURI();  Project project=_permissionsHelper.getObjectById(projectURI,Project.class);  ArgValidator.checkEntity(project,projectURI,false);  _log.info("Found volume project {}",projectURI);  BlockServiceUtils.verifyUserIsAuthorizedForRequest(project,getUserFromContext(),_permissionsHelper);  _log.info("User is authorized for volume's project");  VirtualPool vpool=getVirtualPoolForRequest(project,param.getVirtualPool(),_dbClient,_permissionsHelper);  _log.info("Found new VirtualPool {}",vpool.getId());  verifyVirtualPoolChangeSupportedForVolumeAndVirtualPool(volume,vpool);  _log.info("VirtualPool change is supported for requested volume and VirtualPool");  verifyAllVolumesInCGRequirement(Arrays.asList(volume),vpool);  if (!CapacityUtils.validateVirtualPoolQuota(_dbClient,vpool,volume.getProvisionedCapacity())) {    throw APIException.badRequests.insufficientQuotaForVirtualPool(vpool.getLabel(),"volume");  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Volume.class,id,taskId,ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VPOOL);  try {    BlockServiceApi blockServiceAPI=getBlockServiceImplForVirtualPoolChange(volume,vpool);    _log.info("Got block service implementation for VirtualPool change request");    blockServiceAPI.changeVolumeVirtualPool(Arrays.asList(volume),vpool,param,taskId);    _log.info("Executed VirtualPool change for volume.");  } catch (  InternalException|APIException e) {    String errorMsg=String.format("Volume VirtualPool change error: %s",e.getMessage());    op=new Operation(Operation.Status.error.name(),errorMsg);    _dbClient.updateTaskOpStatus(Volume.class,id,taskId,op);    throw e;  }  auditOp(OperationTypeEnum.CHANGE_VOLUME_VPOOL,true,AuditLogManager.AUDITOP_BEGIN,volume.getLabel(),1,volume.getVirtualArray().toString(),volume.getProject().toString());  return toTask(volume,taskId,op);}  }
class C{  static MediaType createImageType(String subtype){  return create(IMAGE_TYPE,subtype);}  }
class C{  public static void transform(InputStream source,InputStream xslt,OutputStream destination,Map<String,String> arguments) throws TransformerException {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer(new StreamSource(xslt));  if (arguments != null) {    for (    Map.Entry<String,String> entry : arguments.entrySet()) {      if (entry.getKey() != null && entry.getValue() != null) {        transformer.setParameter(entry.getKey(),entry.getValue());      }    }  }  transformer.transform(new StreamSource(source),new StreamResult(destination));}  }
class C{  public BeaconAnalysis analyzeFrame(Mat img,Mat gray){  return analyzeFrame(this.redDetector,this.blueDetector,img,gray,ScreenOrientation.LANDSCAPE);}  }
class C{  protected void toStringChildren(int tab,StringBuffer buffer,Object info){  if (tab == 0) {    super.toStringChildren(tab,buffer,info);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.778 -0400",hash_original_method="D4BB7C1FCBF61AF182F5688B35493AE7",hash_generated_method="37EDB1A38E653EB2C31AE442C1E02306") private void onDeviceCreated(String deviceObjectPath){  String address=mBluetoothService.getAddressFromObjectPath(deviceObjectPath);  if (!mBluetoothService.isRemoteDeviceInCache(address)) {    String[] properties=mBluetoothService.getRemoteDeviceProperties(address);    if (properties != null) {      addDevice(address,properties);    }  }  return;}  }
class C{  public RSSMediaContent(String url,String type,String medium,String expression,String duration,String width,String height){  this.setUrl(url);  this.setType(type);  this.setMedium(medium);  this.setExpression(expression);  this.setDuration(duration);  this.setWidth(width);  this.setHeight(height);}  }
class C{  private void possExpand(int bits){  if ((mPos + bits) < mEnd)   return;  byte[] newBuf=new byte[(mPos + bits) >>> 2];  System.arraycopy(mBuf,0,newBuf,0,mEnd >>> 3);  mBuf=newBuf;  mEnd=newBuf.length << 3;}  }
class C{  public QueryExecutionLowMemoryException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static Clusters kMeansCluster(ObjectVector[] objectVectors,FlagConfig flagConfig){  Clusters clusters=new Clusters();  clusters.clusterMappings=new int[objectVectors.length];  clusters.centroids=new Vector[flagConfig.numclusters()];  Random rand=new Random();  logger.info("Initializing clusters ...");  for (int i=0; i < objectVectors.length; ++i) {    int randInt=rand.nextInt();    while (randInt == Integer.MIN_VALUE) {      randInt=rand.nextInt();    }    clusters.clusterMappings[i]=Math.abs(randInt) % flagConfig.numclusters();  }  logger.info("Iterating k-means assignment ...");  while (true) {    for (int i=0; i < clusters.centroids.length; ++i) {      clusters.centroids[i]=VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension());    }    for (int i=0; i < objectVectors.length; ++i) {      clusters.centroids[clusters.clusterMappings[i]].superpose(objectVectors[i].getVector(),1,null);    }    for (int i=0; i < flagConfig.numclusters(); ++i) {      clusters.centroids[i].normalize();    }    boolean changeFlag=false;    for (int i=0; i < objectVectors.length; i++) {      int j=VectorUtils.getNearestVector(objectVectors[i].getVector(),clusters.centroids);      if (j != clusters.clusterMappings[i]) {        changeFlag=true;        clusters.clusterMappings[i]=j;      }    }    if (changeFlag == false) {      break;    }  }  logger.info("Got to stable clusters ...");  return clusters;}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  private static CalendarEventEntry addReminder(CalendarEventEntry entry,int numMinutes,Method methodType) throws ServiceException, IOException {  Reminder reminder=new Reminder();  reminder.setMinutes(numMinutes);  reminder.setMethod(methodType);  entry.getReminder().add(reminder);  return entry.update();}  }
class C{  @Deprecated public static <T,X extends Throwable>FutureW<T> fromTry(final Try<T,X> value,final Executor ex){  return FutureW.ofSupplier(value,ex);}  }
class C{  void onEachDirectory(Consumer<File> consumer){  consumer.accept(getStateDirectory());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute02.class,args);}  }
class C{  public boolean isBequeath(){  return m_bequeath;}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  if (m_tracer != null) {    super.fireStartElem(name);    this.firePseudoAttributes();  }  return;}  }
class C{  public static VPFDatabase fromFile(String filePath){  if (WWUtil.isEmpty(filePath)) {    String message=Logging.getMessage("nullValue.FilePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  File file=new File(filePath);  if (!file.exists()) {    String message=Logging.getMessage("generic.FileNotFound",filePath);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  VPFBufferedRecordData dht=VPFUtils.readTable(file);  if (dht == null) {    String message=Logging.getMessage("VPF.DatabaseHeaderTableMissing");    throw new WWRuntimeException(message);  }  VPFBufferedRecordData lat=VPFUtils.readTable(new File(file.getParent(),VPFConstants.LIBRARY_ATTRIBUTE_TABLE));  if (lat == null) {    String message=Logging.getMessage("VPF.LibraryAttributeTableMissing");    throw new WWRuntimeException(message);  }  VPFDatabase database=new VPFDatabase(file.getParent());  database.setDatabaseHeaderTable(dht);  database.setLibraryAttributeTable(lat);  VPFRecord record=dht.getRecord(1);  if (record != null) {    VPFUtils.checkAndSetValue(record,"database_name",AVKey.DISPLAY_NAME,database);    VPFUtils.checkAndSetValue(record,"database_desc",AVKey.DESCRIPTION,database);  }  Collection<VPFLibrary> col=createLibraries(database,lat);  if (col != null)   database.setLibraries(col);  return database;}  }
class C{  @Override public void mouseExited(MouseEvent e){  if (!events.isEmpty()) {    int dragAction=mapDragOperationFromModifiers(e);    if (dragAction == DnDConstants.ACTION_NONE) {      events.clear();    }  }}  }
class C{  public List<NamedRelatedResourceRep> listByNetwork(URI networkId){  return getList(PathConstants.IP_INTERFACES_BY_NETWORK_URL,networkId);}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  private Set<String> includedIn(final Collection<RevCommit> tips,int limit) throws IOException, MissingObjectException, IncorrectObjectTypeException {  Set<String> result=new HashSet<>();  for (  RevCommit tip : tips) {    boolean commitFound=false;    rw.resetRetain(RevFlag.UNINTERESTING,containsTarget);    rw.markStart(tip);    for (    RevCommit commit : rw) {      if (commit.equals(target) || commit.has(containsTarget)) {        commitFound=true;        tip.add(containsTarget);        result.addAll(commitToRef.get(tip));        break;      }    }    if (!commitFound) {      rw.markUninteresting(tip);    } else     if (0 < limit && limit < result.size()) {      break;    }  }  return result;}  }
class C{  public MexicanHat(){  super();  setAmplitude(defaultAmplitude());  setMinRange(defaultMinRange());  setMaxRange(defaultMaxRange());  setNoiseRate(defaultNoiseRate());  setNoiseVariance(defaultNoiseVariance());}  }
class C{  public boolean isStopped(){  return stopped;}  }
class C{  private static void registerEntityClasses(Iterable<Class<? extends ImmutableObject>> entityClasses){  for (  Class<?> clazz : Iterables.concat(Iterables.filter(entityClasses,hasAnnotation(Entity.class)),Iterables.filter(entityClasses,not(hasAnnotation(Entity.class))))) {    String kind=Key.getKind(clazz);    boolean registered=factory().getMetadata(kind) != null;    if (clazz.isAnnotationPresent(Entity.class)) {      checkState(!registered,"Kind '%s' already registered, cannot register new @Entity %s",kind,clazz.getCanonicalName());    } else     if (clazz.isAnnotationPresent(EntitySubclass.class)) {      checkState(registered,"No base entity for kind '%s' registered yet, cannot register new @EntitySubclass %s",kind,clazz.getCanonicalName());    }    com.googlecode.objectify.ObjectifyService.register(clazz);    checkState(!factory().getMetadata(clazz).getKeyMetadata().isIdGeneratable(),"Can't register %s: Autogenerated ids (@Id on a Long) are not supported.",kind);  }}  }
class C{  Selector(String selector) throws IncompleteSelectorException, UnterminatedSelectorException, EmptySelectorBodyException {  String[] parts=selector.split("\\{");  if (parts.length < 2) {    throw new IncompleteSelectorException(selector);  }  this.selector=parts[0].trim();  this.selector=this.selector.replaceAll("\\s?(\\+|~|,|=|~=|\\^=|\\$=|\\*=|\\|=|>)\\s?","$1");  if (parts.length > 2) {    this.subSelectors=new Vector<>();    parts=selector.split("(\\s*\\{\\s*)|(\\s*\\}\\s*)");    for (int i=1; i < parts.length; i+=2) {      parts[i]=parts[i].trim();      parts[i + 1]=parts[i + 1].trim();      if (!(parts[i].equals("") || (parts[i + 1].equals("")))) {        this.subSelectors.addElement(new Selector(parts[i] + "{" + parts[i + 1]+ "}"));      }    }  } else {    String contents=parts[parts.length - 1].trim();    if (CSSMin.debugLogging) {      LOG.info("Parsing selector: " + this.selector);      LOG.info("\t" + contents);    }    if (contents.charAt(contents.length() - 1) != '}') {      throw new UnterminatedSelectorException(selector);    }    if (contents.length() == 1) {      throw new EmptySelectorBodyException(selector);    }    contents=contents.substring(0,contents.length() - 2);    this.properties=new Property[0];    this.properties=parseProperties(contents).toArray(this.properties);    sortProperties(this.properties);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.784 -0500",hash_original_method="8B041FBF651D4DFB0C8BE59922C68E87",hash_generated_method="70E3A2AE9C28BAEAD11A6A6328DB424F") public XMLReaderAdapter(XMLReader xmlReader){  setup(xmlReader);}  }
class C{  public static FreeCellNode goal(){  FreeCellNode goal=new FreeCellNode();  goal.insertFoundation((short)49);  goal.insertFoundation((short)50);  goal.insertFoundation((short)51);  goal.insertFoundation((short)52);  return goal;}  }
class C{  public static String convertMethodSignature(XMethod xmethod){  @DottedClassName String className=xmethod.getClassName();  assert className.indexOf('/') == -1;  return convertMethodSignature(className,xmethod.getName(),xmethod.getSignature());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static int tryGetISODigit(char ch){  if ('0' <= ch && ch <= '9') {    return ch - '0';  } else {    return -1;  }}  }
class C{  private static int[][] computeLcs(List<ApiField> sequenceA,List<ApiField> sequenceB){  int[][] lcs=new int[sequenceA.size() + 1][sequenceB.size() + 1];  for (int i=0; i < sequenceA.size(); i++) {    for (int j=0; j < sequenceB.size(); j++) {      if (sequenceA.get(i).compareTo(sequenceB.get(j)) == 0) {        lcs[i + 1][j + 1]=lcs[i][j] + 1;      } else {        lcs[i + 1][j + 1]=Math.max(lcs[i][j + 1],lcs[i + 1][j]);      }    }  }  return lcs;}  }
class C{  @Scheduled(fixedRate=10000) public void saveCountingsInBatch(){  if (changeList.size(CACHE_CHANGE_LIST) > 0) {    saveCountings(10);  }}  }
class C{  JavacScope(Env<AttrContext> env){  env.getClass();  this.env=env;}  }
class C{  private String makeMethodKey(Method method){  Class[] parameterTypes=method.getParameterTypes();  StringBuffer methodKey=new StringBuffer(method.getName());  for (int j=0; j < parameterTypes.length; j++) {    if (parameterTypes[j].isPrimitive()) {      if (parameterTypes[j].equals(Boolean.TYPE))       methodKey.append("java.lang.Boolean"); else       if (parameterTypes[j].equals(Byte.TYPE))       methodKey.append("java.lang.Byte"); else       if (parameterTypes[j].equals(Character.TYPE))       methodKey.append("java.lang.Character"); else       if (parameterTypes[j].equals(Double.TYPE))       methodKey.append("java.lang.Double"); else       if (parameterTypes[j].equals(Float.TYPE))       methodKey.append("java.lang.Float"); else       if (parameterTypes[j].equals(Integer.TYPE))       methodKey.append("java.lang.Integer"); else       if (parameterTypes[j].equals(Long.TYPE))       methodKey.append("java.lang.Long"); else       if (parameterTypes[j].equals(Short.TYPE))       methodKey.append("java.lang.Short");    } else {      methodKey.append(parameterTypes[j].getName());    }  }  return methodKey.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void onSurfaceCreated(GL10 glUnused,EGLConfig config){  Log.d(TAG,"onSurfaceCreated");  mProgram=createProgram(mVertexShader,mFragmentShader);  if (mProgram == 0) {    return;  }  maPositionHandle=GLES20.glGetAttribLocation(mProgram,"aPosition");  checkGlError("glGetAttribLocation aPosition");  if (maPositionHandle == -1) {    throw new RuntimeException("Could not get attrib location for aPosition");  }  maTextureHandle=GLES20.glGetAttribLocation(mProgram,"aTextureCoord");  checkGlError("glGetAttribLocation aTextureCoord");  if (maTextureHandle == -1) {    throw new RuntimeException("Could not get attrib location for aTextureCoord");  }  muMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uMVPMatrix");  checkGlError("glGetUniformLocation uMVPMatrix");  if (muMVPMatrixHandle == -1) {    throw new RuntimeException("Could not get attrib location for uMVPMatrix");  }  muSTMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uSTMatrix");  checkGlError("glGetUniformLocation uSTMatrix");  if (muSTMatrixHandle == -1) {    throw new RuntimeException("Could not get attrib location for uSTMatrix");  }  int[] textures=new int[1];  GLES20.glGenTextures(1,textures,0);  mTextureID=textures[0];  GLES20.glBindTexture(GL_TEXTURE_EXTERNAL_OES,mTextureID);  checkGlError("glBindTexture mTextureID");  GLES20.glTexParameterf(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameterf(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  checkGlError("glTexParameteri mTextureID");  mSurface=new SurfaceTexture(mTextureID);  mSurface.setOnFrameAvailableListener(this);  Surface surface=new Surface(mSurface);  mMediaPlayer.setSurface(surface);  surface.release();  try {    mMediaPlayer.prepare();  } catch (  IOException t) {    Log.e(TAG,"media player prepare failed");  }synchronized (this) {    updateSurface=false;  }}  }
class C{  public static PrivateKey load(InputStream is) throws CryptoException, IOException {  byte[] streamContents=ReadUtil.readFully(is);  EncryptionType encType=getEncryptionType(new ByteArrayInputStream(streamContents));  if (encType == null) {    throw new CryptoException(res.getString("NotValidOpenSsl.exception.message"));  }  if (encType == ENCRYPTED) {    throw new PrivateKeyEncryptedException(res.getString("OpenSslIsEncrypted.exception.message"));  }  PemInfo pemInfo=PemUtil.decode(new ByteArrayInputStream(streamContents));  if (pemInfo != null) {    streamContents=pemInfo.getContent();  }  try {    ASN1InputStream asn1InputStream=new ASN1InputStream(streamContents);    ASN1Primitive openSsl=asn1InputStream.readObject();    asn1InputStream.close();    if (openSsl instanceof ASN1Sequence) {      ASN1Sequence sequence=(ASN1Sequence)openSsl;      for (int i=0; i < sequence.size(); i++) {        ASN1Encodable obj=sequence.getObjectAt(i);        if (!(obj instanceof ASN1Integer)) {          throw new CryptoException(res.getString("OpenSslSequenceContainsNonIntegers.exception.message"));        }      }      if (sequence.size() == 9) {        BigInteger version=((ASN1Integer)sequence.getObjectAt(0)).getValue();        BigInteger modulus=((ASN1Integer)sequence.getObjectAt(1)).getValue();        BigInteger publicExponent=((ASN1Integer)sequence.getObjectAt(2)).getValue();        BigInteger privateExponent=((ASN1Integer)sequence.getObjectAt(3)).getValue();        BigInteger primeP=((ASN1Integer)sequence.getObjectAt(4)).getValue();        BigInteger primeQ=((ASN1Integer)sequence.getObjectAt(5)).getValue();        BigInteger primeExponentP=((ASN1Integer)sequence.getObjectAt(6)).getValue();        BigInteger primeExponenetQ=((ASN1Integer)sequence.getObjectAt(7)).getValue();        BigInteger crtCoefficient=((ASN1Integer)sequence.getObjectAt(8)).getValue();        if (!version.equals(VERSION)) {          throw new CryptoException(MessageFormat.format(res.getString("OpenSslVersionIncorrect.exception.message"),"" + VERSION.intValue(),"" + version.intValue()));        }        RSAPrivateCrtKeySpec rsaPrivateCrtKeySpec=new RSAPrivateCrtKeySpec(modulus,publicExponent,privateExponent,primeP,primeQ,primeExponentP,primeExponenetQ,crtCoefficient);        KeyFactory keyFactory=KeyFactory.getInstance("RSA");        return keyFactory.generatePrivate(rsaPrivateCrtKeySpec);      } else       if (sequence.size() == 6) {        BigInteger version=((ASN1Integer)sequence.getObjectAt(0)).getValue();        BigInteger primeModulusP=((ASN1Integer)sequence.getObjectAt(1)).getValue();        BigInteger primeQ=((ASN1Integer)sequence.getObjectAt(2)).getValue();        BigInteger generatorG=((ASN1Integer)sequence.getObjectAt(3)).getValue();        sequence.getObjectAt(4);        BigInteger secretExponentX=((ASN1Integer)sequence.getObjectAt(5)).getValue();        if (!version.equals(VERSION)) {          throw new CryptoException(MessageFormat.format(res.getString("OpenSslVersionIncorrect.exception.message"),"" + VERSION.intValue(),"" + version.intValue()));        }        DSAPrivateKeySpec dsaPrivateKeySpec=new DSAPrivateKeySpec(secretExponentX,primeModulusP,primeQ,generatorG);        KeyFactory keyFactory=KeyFactory.getInstance("DSA");        return keyFactory.generatePrivate(dsaPrivateKeySpec);      } else {        throw new CryptoException(MessageFormat.format(res.getString("OpenSslSequenceIncorrectSize.exception.message"),"" + sequence.size()));      }    } else {      throw new CryptoException(res.getString("OpenSslSequenceNotFound.exception.message"));    }  } catch (  GeneralSecurityException ex) {    throw new CryptoException(res.getString("NoLoadOpenSslPrivateKey.exception.message"),ex);  }}  }
class C{  @Override public void stop() throws RunnerException {  if (process == null) {    throw new IllegalStateException("Process is not started yet");  }  process.destroy();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(((Agent)stack.pop()).getAgentFlag(Agent.KEEP_AT_MOST_MASK));}  }
class C{  public void unsetFlag(int bit){  checkFlag(bit);  flags&=~(1 << (15 - bit));}  }
class C{  public String toSource(String objectname){  return toSource(objectname,0);}  }
class C{  @Override protected boolean analyzeTraces(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,List<ExecutionResult> results,Set<String> calledMethods){  boolean hasTimeoutOrTestException=false;  for (  ExecutionResult result : results) {    if (result.hasTimeout() || result.hasTestException()) {      hasTimeoutOrTestException=true;    }    List<Integer> exceptionPositions=asSortedList(result.getPositionsWhereExceptionsWereThrown());    for (    Statement stmt : result.test) {      if (!isValidPosition(exceptionPositions,stmt.getPosition()))       break;      if ((stmt instanceof MethodStatement || stmt instanceof ConstructorStatement) && (!exceptionPositions.contains(stmt.getPosition()))) {        EntityWithParametersStatement ps=(EntityWithParametersStatement)stmt;        String className=ps.getDeclaringClassName();        String methodDesc=ps.getDescriptor();        String methodName=ps.getMethodName() + methodDesc;        String fullName=className + "." + methodName;        if (!methods.contains(fullName) || removedMethods.contains(fullName))         continue;        if (methodCoverageMap.containsKey(fullName)) {          calledMethods.add(fullName);          result.test.addCoveredGoal(methodCoverageMap.get(fullName));          if (Properties.TEST_ARCHIVE) {            TestsArchive.instance.putTest(this,methodCoverageMap.get(fullName),result);            toRemoveMethods.add(fullName);            suite.isToBeUpdated(true);          }        }      }    }  }  return hasTimeoutOrTestException;}  }
class C{  static void printClassRefs(ClassRef[] classes,boolean justClasses){  if (!justClasses) {    out.println("Classes:");  }  for (int i=0; i < classes.length; i++) {    ClassRef ref=classes[i];    out.println(descriptorToDot(ref.getName()));  }}  }
class C{  void print(String msg){  System.out.print(msg);}  }
class C{  public static void race(final Runnable r1,final Runnable r2,Scheduler s){  final AtomicInteger count=new AtomicInteger(2);  final CountDownLatch cdl=new CountDownLatch(2);  final Throwable[] errors={null,null};  s.schedule(null);  if (count.decrementAndGet() != 0) {    while (count.get() != 0) {    }  }  try {    try {      r2.run();    } catch (    Throwable ex) {      errors[1]=ex;    }  }  finally {    cdl.countDown();  }  try {    if (!cdl.await(5,TimeUnit.SECONDS)) {      throw new AssertionError("The wait timed out!");    }  } catch (  InterruptedException ex) {    throw new RuntimeException(ex);  }  if (errors[0] != null && errors[1] == null) {    throw Exceptions.propagate(errors[0]);  }  if (errors[0] == null && errors[1] != null) {    throw Exceptions.propagate(errors[1]);  }  if (errors[0] != null && errors[1] != null) {    errors[0].addSuppressed(errors[1]);    throw Exceptions.propagate(errors[0]);  }}  }
class C{  @Override public void mapClickAction(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  PrintStream outOld=null;  PrintStream outNew=null;  String outFilename=null;  if (m_CommandArgs.length > 2) {    String action=m_CommandArgs[m_CommandArgs.length - 2];    if (action.equals(">")) {      outOld=System.out;      try {        outFilename=m_CommandArgs[m_CommandArgs.length - 1];        if (outFilename.startsWith("~")) {          outFilename=outFilename.replaceFirst("~",System.getProperty("user.home"));        }        outNew=new PrintStream(new File(outFilename));        System.setOut(outNew);        m_CommandArgs[m_CommandArgs.length - 2]="";        m_CommandArgs[m_CommandArgs.length - 1]="";        String[] newArgs=new String[m_CommandArgs.length - 2];        System.arraycopy(m_CommandArgs,0,newArgs,0,m_CommandArgs.length - 2);        m_CommandArgs=newArgs;      } catch (      Exception e) {        System.setOut(outOld);        outOld=null;      }    }  }  try {    Object[] args={m_CommandArgs};    m_MainMethod.invoke(null,args);    if (isInterrupted()) {      System.err.println("[...Interrupted]");    }  } catch (  Exception ex) {    if (ex.getMessage() == null) {      System.err.println("[...Killed]");    } else {      System.err.println("[Run exception] " + ex.getMessage());    }  } finally {    m_RunThread=null;  }  if (outOld != null) {    outNew.flush();    outNew.close();    System.setOut(outOld);    System.out.println("Finished redirecting output to '" + outFilename + "'.");  }}  }
class C{  public Counter<E> asCounter(){  PriorityQueue<E> pq=clone();  Counter<E> counter=new Counter<E>();  while (pq.hasNext()) {    double priority=pq.getPriority();    E element=pq.next();    counter.incrementCount(element,priority);  }  return counter;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=left.checkAssignOp(env,ctx,vset,exp,this);  vset=right.checkValue(env,ctx,vset,exp);  int tm=left.type.getTypeMask() | right.type.getTypeMask();  if ((tm & TM_ERROR) != 0) {    return vset;  }  selectType(env,ctx,tm);  if (!type.isType(TC_ERROR)) {    convert(env,ctx,itype,left);  }  updater=left.getUpdater(env,ctx);  return vset;}  }
class C{  protected static boolean eq(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(this.getModifiers());}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case USE:    j2DClient.get().switchToSpellState(this.entity.getRPObject());  break;default :super.onAction(at);break;}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void onCancelContractDetails(Contract contract){}  }
class C{  public static <T>List<Path<T>> intersectPrefixPaths(Automaton a,FST<T> fst) throws IOException {  assert a.isDeterministic();  final List<Path<T>> queue=new ArrayList<>();  final List<Path<T>> endNodes=new ArrayList<>();  if (a.getNumStates() == 0) {    return endNodes;  }  queue.add(new Path<>(0,fst.getFirstArc(new FST.Arc<T>()),fst.outputs.getNoOutput(),new IntsRefBuilder()));  final FST.Arc<T> scratchArc=new FST.Arc<>();  final FST.BytesReader fstReader=fst.getBytesReader();  Transition t=new Transition();  while (queue.size() != 0) {    final Path<T> path=queue.remove(queue.size() - 1);    if (a.isAccept(path.state)) {      endNodes.add(path);      continue;    }    IntsRefBuilder currentInput=path.input;    int count=a.initTransition(path.state,t);    for (int i=0; i < count; i++) {      a.getNextTransition(t);      final int min=t.min;      final int max=t.max;      if (min == max) {        final FST.Arc<T> nextArc=fst.findTargetArc(t.min,path.fstNode,scratchArc,fstReader);        if (nextArc != null) {          final IntsRefBuilder newInput=new IntsRefBuilder();          newInput.copyInts(currentInput.get());          newInput.append(t.min);          queue.add(new Path<>(t.dest,new FST.Arc<T>().copyFrom(nextArc),fst.outputs.add(path.output,nextArc.output),newInput));        }      } else {        FST.Arc<T> nextArc=Util.readCeilArc(min,fst,path.fstNode,scratchArc,fstReader);        while (nextArc != null && nextArc.label <= max) {          assert nextArc.label <= max;          assert nextArc.label >= min : nextArc.label + " " + min;          final IntsRefBuilder newInput=new IntsRefBuilder();          newInput.copyInts(currentInput.get());          newInput.append(nextArc.label);          queue.add(new Path<>(t.dest,new FST.Arc<T>().copyFrom(nextArc),fst.outputs.add(path.output,nextArc.output),newInput));          final int label=nextArc.label;          nextArc=nextArc.isLast() ? null : fst.readNextRealArc(nextArc,fstReader);          assert nextArc == null || label < nextArc.label : "last: " + label + " next: "+ nextArc.label;        }      }    }  }  return endNodes;}  }
class C{  public boolean lookForDominatedInstruction(){  return patternElement.getDominatedBy() != null && matchCount == 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:49.104 -0500",hash_original_method="9A2D216346AB85B0A920CEE255CF28A0",hash_generated_method="27D4F7B871BA01C7D691AD14677A22C6") public static AuthenticatorDescription newKey(String type){  if (type == null)   throw new IllegalArgumentException("type cannot be null");  return new AuthenticatorDescription(type);}  }
class C{  public static void putKeyValuePair(Cursor realCursor,final Integer key,final String value){  realCursor.put(new DatabaseEntry(new ByteArrayConverterForInteger().toByteArray(key)),new DatabaseEntry(new ByteArrayConverterForString().toByteArray(value)));}  }
class C{  private static void launchTests(int pid,Path clientTmpDir) throws Throwable {  final String sep=File.separator;  String classpath=System.getProperty("test.class.path","") + File.pathSeparator + System.getProperty("test.jdk",".")+ sep+ "lib"+ sep+ "tools.jar";  String[] tmpDirArg=null;  if (clientTmpDir != null) {    tmpDirArg=new String[]{"-Djava.io.tmpdir=" + clientTmpDir};  }  String[] args=RunnerUtil.concat(tmpDirArg,new String[]{"-classpath",classpath,"TempDirTest$TestMain",Integer.toString(pid)});  OutputAnalyzer output=ProcessTools.executeTestJvm(args);  output.shouldHaveExitValue(0);}  }
class C{  public void testPlusNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String c="-92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.plus());}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 44:    break;case 34:{    int temp=zzStartRead;    addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);    addToken(temp,zzMarkedPos - 1,Token.VARIABLE);    start=zzMarkedPos;  }case 45:break;case 39:{if (start == zzStartRead) {  addToken(Token.COMMENT_DOCUMENTATION);  yybegin(YYINITIAL);}}case 46:break;case 26:{addToken(Token.ERROR_NUMBER_FORMAT);}case 47:break;case 11:{start=zzMarkedPos - 1;yybegin(STRING);}case 48:break;case 36:{if (start == zzStartRead) {addToken(Token.PREPROCESSOR);addNullToken();return firstToken;}}case 49:break;case 32:{addToken(Token.FUNCTION);}case 50:break;case 30:{addToken(Token.VARIABLE);}case 51:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 52:break;case 24:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 53:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 54:break;case 29:{addToken(Token.PREPROCESSOR);addNullToken();return firstToken;}case 55:break;case 38:{if (start == zzStartRead) {int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}}case 56:break;case 42:{start=zzStartRead;yybegin(HEREDOC_EOF_SINGLE_QUOTED);}case 57:break;case 43:{start=zzStartRead;yybegin(HEREDOC_EOT_SINGLE_QUOTED);}case 58:break;case 40:{start=zzStartRead;yybegin(HEREDOC_EOF_UNQUOTED);}case 59:break;case 13:{}case 60:break;case 18:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 61:break;case 28:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 62:break;case 21:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 63:break;case 6:{addToken(Token.WHITESPACE);}case 64:break;case 10:{start=zzMarkedPos - 1;yybegin(CHAR_LITERAL);}case 65:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 66:break;case 33:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 67:break;case 20:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_BACKQUOTE);}case 68:break;case 15:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 69:break;case 16:{}case 70:break;case 23:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 71:break;case 35:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addToken(temp,zzMarkedPos - 1,Token.VARIABLE);start=zzMarkedPos;}case 72:break;case 37:{addToken(Token.COMMENT_EOL);start=zzMarkedPos;yybegin(POD);}case 73:break;case 31:{addToken(Token.RESERVED_WORD);}case 74:break;case 19:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 75:break;case 8:{addToken(Token.SEPARATOR);}case 76:break;case 5:{addNullToken();return firstToken;}case 77:break;case 7:{addToken(Token.OPERATOR);}case 78:break;case 17:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 79:break;case 25:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_POD);return firstToken;}case 80:break;case 27:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 81:break;case 41:{start=zzStartRead;yybegin(HEREDOC_EOT_UNQUOTED);}case 82:break;case 9:{start=zzMarkedPos - 1;yybegin(BACKTICKS);}case 83:break;case 12:{}case 84:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 85:break;case 22:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 86:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case HEREDOC_EOF_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_SINGLE_QUOTED);return firstToken;}case 574:break;case HEREDOC_EOT_SINGLE_QUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_SINGLE_QUOTED);return firstToken;}case 575:break;case HEREDOC_EOT_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOT_UNQUOTED);return firstToken;}case 576:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 577:break;case BACKTICKS:{addToken(start,zzStartRead - 1,Token.LITERAL_BACKQUOTE);return firstToken;}case 578:break;case YYINITIAL:{addNullToken();return firstToken;}case 579:break;case HEREDOC_EOF_UNQUOTED:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_HEREDOC_EOF_UNQUOTED);return firstToken;}case 580:break;case CHAR_LITERAL:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 581:break;case POD:{addToken(start,zzStartRead - 1,Token.COMMENT_DOCUMENTATION);addEndToken(INTERNAL_POD);return firstToken;}case 582:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void countDown(){  sync.releaseShared(1);}  }
class C{  public ToChildBlockJoinQuery(Query parentQuery,BitSetProducer parentsFilter){  super();  this.origParentQuery=parentQuery;  this.parentQuery=parentQuery;  this.parentsFilter=parentsFilter;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.514 -0500",hash_original_method="3F318C6E0F37B53192FF4A33987FF921",hash_generated_method="FE79E8BA5AF6257B211C93119EFF9427") public void putStringArray(String key,String[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public void createEquiAngle(float radius,int numRotations,int numSamples,float jitter,Callback2d callback){  float spacing=radius / numRotations;  for (int sample=0; sample < numSamples; sample++) {    float angle=2.0f * (float)Math.PI * (sample * numRotations) / numSamples;    float r=radius * sample / (numSamples - 1) + (rnd.nextFloat() * 2.0f - 1.0f) * spacing * jitter;    float x=(float)Math.sin_roquen_9(angle + 0.5f * (float)Math.PI) * r;    float y=(float)Math.sin_roquen_9(angle) * r;    callback.onNewSample(x,y);  }}  }
class C{  private void testLoadWithRefresh(final Folder folder,Integer expectedDataEntryCount,Integer expectedSubFolderCount,String... expectedEntries) throws InterruptedException, ExecutionException {  int threadCount=50;  startSignal=new CountDownLatch(1);  List<Future<Integer>> getDataEntriesCalls=new ArrayList<>();  List<Future<Integer>> getSubfolderEntriesCalls=new ArrayList<>();  Map<String,Future<Boolean>> containsEntryCalls=new HashMap<>();  ExecutorService executorService=Executors.newFixedThreadPool(threadCount * 2);  for (int i=0; i < threadCount; i++) {    getDataEntriesCalls.add(executorService.submit(folder_getDataEntries(folder)));    getSubfolderEntriesCalls.add(executorService.submit(folder_getSubfolders(folder)));    if (random.nextDouble() < REFRESH_CALL_RATIO) {      executorService.submit(folder_refresh(folder));    }    if (expectedEntries != null) {      for (      final String entryName : expectedEntries) {        containsEntryCalls.put(entryName + " " + i,executorService.submit(folder_containsEntry(folder,entryName)));      }    }  }  startSignal.countDown();  for (  Future<Integer> test : getDataEntriesCalls) {    Assert.assertEquals("data entry count mismatch",expectedDataEntryCount,test.get());  }  for (  Entry<String,Future<Boolean>> entry : containsEntryCalls.entrySet()) {    Assert.assertTrue("expected entry not found: " + entry.getKey(),entry.getValue().get());  }  executorService.shutdown();  executorService.awaitTermination(5,TimeUnit.SECONDS);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notation;  String nullNS=null;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notation=(Notation)notations.getNamedItemNS(nullNS,"notation1");  assertNull("notationNull",notation);}  }
class C{  public String replace(final String source,final int offset,final int length){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(length).append(source,offset,length);  if (substitute(buf,0,length) == false) {    return source.substring(offset,offset + length);  }  return buf.toString();}  }
class C{  private void popContentSource(){  buffer=nextContentSource.buffer;  position=nextContentSource.position;  limit=nextContentSource.limit;  nextContentSource=nextContentSource.next;}  }
class C{  public void writeToXml(XmlSerializer serializer) throws IOException {  int N=countActions();  for (int i=0; i < N; i++) {    serializer.startTag(null,ACTION_STR);    serializer.attribute(null,NAME_STR,mActions.get(i));    serializer.endTag(null,ACTION_STR);  }  N=countCategories();  for (int i=0; i < N; i++) {    serializer.startTag(null,CAT_STR);    serializer.attribute(null,NAME_STR,mCategories.get(i));    serializer.endTag(null,CAT_STR);  }  N=countDataTypes();  for (int i=0; i < N; i++) {    serializer.startTag(null,TYPE_STR);    String type=mDataTypes.get(i);    if (type.indexOf('/') < 0)     type=type + "/*";    serializer.attribute(null,NAME_STR,type);    serializer.endTag(null,TYPE_STR);  }  N=countDataSchemes();  for (int i=0; i < N; i++) {    serializer.startTag(null,SCHEME_STR);    serializer.attribute(null,NAME_STR,mDataSchemes.get(i));    serializer.endTag(null,SCHEME_STR);  }  N=countDataAuthorities();  for (int i=0; i < N; i++) {    serializer.startTag(null,AUTH_STR);    AuthorityEntry ae=mDataAuthorities.get(i);    serializer.attribute(null,HOST_STR,ae.getHost());    if (ae.getPort() >= 0) {      serializer.attribute(null,PORT_STR,Integer.toString(ae.getPort()));    }    serializer.endTag(null,AUTH_STR);  }  N=countDataPaths();  for (int i=0; i < N; i++) {    serializer.startTag(null,PATH_STR);    PatternMatcher pe=mDataPaths.get(i);switch (pe.getType()) {case PatternMatcher.PATTERN_LITERAL:      serializer.attribute(null,LITERAL_STR,pe.getPath());    break;case PatternMatcher.PATTERN_PREFIX:  serializer.attribute(null,PREFIX_STR,pe.getPath());break;case PatternMatcher.PATTERN_SIMPLE_GLOB:serializer.attribute(null,SGLOB_STR,pe.getPath());break;}serializer.endTag(null,PATH_STR);}}  }
class C{  public static boolean isInitialized(){  return ACCESSOR != null;}  }
class C{  public void refreshTheme(boolean merge){  refreshTheme(getUIID(),merge);  initLaf(getUIManager());}  }
class C{  boolean checkUserPasswordReadOnly(String userName){  return userName.equals(this.readUserName);}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public static boolean isDirectorySync(@NonNull File file){  assertIoOperationOnNonThread();  return file.isDirectory();}  }
class C{  private boolean isProjectAssignedWithVNasServers(Project project){  if (project.getAssignedVNasServers() != null && !project.getAssignedVNasServers().isEmpty()) {    for (    String vnasId : project.getAssignedVNasServers()) {      VirtualNAS vnas=_permissionsHelper.getObjectById(URI.create(vnasId),VirtualNAS.class);      if (vnas != null && !vnas.getInactive()) {        _log.debug("project {} has been assigned with vnas server {}",project.getLabel(),vnas.getNasName());        return true;      }    }  }  _log.info("No active vnas servers assigned to project {}",project.getLabel());  return false;}  }
class C{  public RibbonIterator(Geo v1,Geo v2,double radius){  this(v1,v2,radius,2.0 * radius);}  }
class C{  public void onMouseOut(){  if (pressed) {    return;  }  if (enabled && hasVisibleItems) {    element.setClassName(css.menuBarItem());  } else {    element.setClassName(css.menuBarItemDisabled());  }}  }
class C{  public boolean[] right(int bitCount){  return getBits(mSize - bitCount - 1);}  }
class C{  @Deprecated public Date(int year,int month,int date){  this(year,month,date,0,0,0);}  }
class C{  public void buildTopSort(){  if (!forwardTopSorted) {    TopSort.buildTopological(this,true);  }}  }
class C{  private void persistVolumeNativeID(DbClient dbClient,URI volumeId,String nativeID,Calendar creationTime) throws IOException {  Volume volume=dbClient.queryObject(Volume.class,volumeId);  volume.setCreationTime(creationTime);  volume.setNativeId(nativeID);  volume.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,volume));  dbClient.updateObject(volume);}  }
class C{  public boolean isChild(){  return parent != null;}  }
class C{  private double computeTransformedLogsum(double betaWalkTT,double betaWalkTD,double cijTT,double cjk1TT,double cjk2TT,double cjk3TT,double cijTD,double cjk1TD,double cjk2TD,double cjk3TD){  double Vij=betaWalkTT * cijTT + betaWalkTD * cijTD;  double Vjk1=betaWalkTT * cjk1TT + betaWalkTD * cjk1TD;  double Vjk2=betaWalkTT * cjk2TT + betaWalkTD * cjk2TD;  double Vjk3=betaWalkTT * cjk3TT + betaWalkTD * cjk3TD;  double Sumjk=Math.exp(Vjk1) + Math.exp(Vjk2) + Math.exp(Vjk3);  double Ai2=Math.log(Math.exp(Vij) * Sumjk);  System.out.println(Ai2);  return Ai2;}  }
class C{  public boolean hasBaseUrl(){  return fieldSetFlags()[0];}  }
class C{  protected void updateView(@Nullable View oldValue,@Nullable View newValue){  if (view == null) {    if (oldValue != null) {      uninstallViewListeners(oldValue);    }    if (newValue != null) {      installViewListeners(newValue);    }    firePropertyChange(VIEW_PROPERTY,oldValue,newValue);    updateEnabled();    updateView();  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'NOTE' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'IMAGE' TEXT  ,"+ "'JIAGE' TEXT  ,"+ "'MIAOSHU' TEXT  ,"+ "'SHANGPINID' TEXT  ,"+ "'SHIJIAN' TEXT ,"+ "'TITLE' TEXT  ,"+ "'DEALID' TEXT  ,"+ "'BUYID' TEXT  ,"+ "'ZHUANGTAI' TEXT  ,"+ "'LIANXI' TEXT,"+ "'QUFU' TEXT,"+ "'JIAOYIFANGSHI' TEXT);");}  }
class C{  public LevelRenderer(){  super();  this.itemMargin=DEFAULT_ITEM_MARGIN;  this.maxItemWidth=1.0;  setBaseLegendShape(new Rectangle2D.Float(-5.0f,-1.0f,10.0f,2.0f));  setBaseOutlinePaint(new Color(0,0,0,0));}  }
class C{  public Div3(){  super("div3",3);}  }
class C{  public void showFeedback(String title,double x,double y){  int startY=(int)(y - getLocationOnScreen().getY() - 40);  feedbackLabel.setLocation((int)(x - getLocationOnScreen().getX()),startY);  feedbackLabel.setVisible(true);  feedbackLabel.setText(title);}  }
class C{  public static MStatusCategory createDefault(Properties ctx){  int AD_Client_ID=Env.getAD_Client_ID(ctx);  MStatusCategory retValue=new MStatusCategory(ctx,0,null);  retValue.setClientOrg(AD_Client_ID,0);  retValue.setName(Msg.getMsg(ctx,"Standard"));  retValue.setIsDefault(true);  if (!retValue.save())   return null;  String sql="UPDATE R_Status SET R_StatusCategory_ID=" + retValue.getR_StatusCategory_ID() + " WHERE R_StatusCategory_ID IS NULL AND AD_Client_ID="+ AD_Client_ID;  int no=DB.executeUpdate(sql,null);  s_log.info("Default for AD_Client_ID=" + AD_Client_ID + " - Status #"+ no);  return retValue;}  }
class C{  public boolean right(){  if (mColumn == 6) {    mRow++;    mColumn=0;  } else {    mColumn++;  }  if (isWithinCurrentMonth(mRow,mColumn)) {    return false;  }  nextMonth();  mRow=0;  mColumn=0;  while (!isWithinCurrentMonth(mRow,mColumn)) {    mColumn++;  }  return true;}  }
class C{  private static void deleteCalendar(CalendarEntry calendar) throws IOException, ServiceException {  System.out.println("Deleting the secondary calendar");  calendar.delete();}  }
class C{  static void removeSoIfExit(String libName,int version){  String file=_targetSoFile(libName,version);  File a=new File(file);  if (a.exists()) {    a.delete();  }}  }
class C{  public void stopWatching(String fileName){synchronized (mObservedChildren) {    mObservedChildren.remove(fileName);    if (mObservedChildren.isEmpty()) {      stopWatching();      Log_OC.d(TAG,"Stopped watching parent folder " + mPath + "/");    }  }}  }
class C{  @Uninterruptible public GCMapIterator selectIterator(CompiledMethod compiledMethod){switch (compiledMethod.getCompilerType()) {case CompiledMethod.TRAP:    return hardwareTrapIterator;case CompiledMethod.BASELINE:  return baselineIterator;case CompiledMethod.OPT:return optIterator;case CompiledMethod.JNI:return jniIterator;}if (VM.VerifyAssertions) {VM._assert(VM.NOT_REACHED,"GCMapIteratorGroup.selectIterator: Unknown type of compiled method");}return null;}  }
class C{  public TerminalPosition withRelativeRow(int delta){  if (delta == 0) {    return this;  }  return withRow(row + delta);}  }
class C{  public static boolean[] append(boolean buffer[],boolean newElement){  boolean[] t=resize(buffer,buffer.length + 1);  t[buffer.length]=newElement;  return t;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {  SCHEMES.get(iprot.getScheme()).getScheme().read(iprot,this);}  }
class C{  public void initialise(int dimensions,double kernelWidth){  this.kernelWidth=kernelWidth;  mvke.initialise(dimensions,kernelWidth);  lastEntropy=0.0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.521 -0500",hash_original_method="F6D22E1C9E233B4CE6C95173573B1ADC",hash_generated_method="6BCA618D48FCE08050F1572F5B36E241") public AllocationBuilder addIndexSetAllocation(Allocation a,Primitive p){  Entry indexType=new Entry();  indexType.a=a;  indexType.prim=p;  mIndexTypes.addElement(indexType);  return this;}  }
class C{  public CertificatePolicies(PolicyInformation name){  this.policyInformation=new PolicyInformation[]{name};}  }
class C{  public static void countFrequencies(int[] freq,byte[] data){  for (  byte x : data) {    freq[x & 0xff]++;  }}  }
class C{  private String errorMessage(){  return errorMessage(null);}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target){  final Entity ae=game.getEntity(attackerId);  if ((target.getTargetType() != Targetable.TYPE_BUILDING) && (target.getTargetType() != Targetable.TYPE_FUEL_TANK)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can only target buildings");  }  if (ae == null)   return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't attack from a null entity!");  if (!(ae instanceof Infantry))   return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is not infantry");  Infantry inf=(Infantry)ae;  if (inf.turnsLayingExplosives > 0)   return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"STOP: Expected Damage: " + getDamageFor(ae));  boolean ok=false;  for (  Mounted m : ae.getMisc()) {    if (m.getType().hasFlag(MiscType.F_TOOLS) && m.getType().hasSubType(MiscType.S_DEMOLITION_CHARGE)) {      ok=true;      break;    }  }  if (!ok)   return new ToHitData(TargetRoll.IMPOSSIBLE,"No explosives carried");  return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"START: Can't move or fire while laying explosives");}  }
class C{  protected FinalizableSoftReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public Vec2D relativeTo(Vec2D otherVector){  return subtract(otherVector);}  }
class C{  public static String leakInfo(Context context,HeapDump heapDump,AnalysisResult result){  PackageManager packageManager=context.getPackageManager();  String packageName=context.getPackageName();  PackageInfo packageInfo;  try {    packageInfo=packageManager.getPackageInfo(packageName,0);  } catch (  PackageManager.NameNotFoundException e) {    throw new RuntimeException(e);  }  String versionName=packageInfo.versionName;  int versionCode=packageInfo.versionCode;  String info="In " + packageName + ":"+ versionName+ ":"+ versionCode+ ".\n";  if (result.leakFound) {    if (result.excludedLeak) {      info+="* LEAK CAN BE IGNORED.\n";    }    info+="* " + result.className;    if (!heapDump.referenceName.equals("")) {      info+=" (" + heapDump.referenceName + ")";    }    info+=" has leaked:\n" + result.leakTrace.toString() + "\n";  } else   if (result.failure != null) {    info+="* FAILURE:\n" + Log.getStackTraceString(result.failure) + "\n";  } else {    info+="* NO LEAK FOUND.\n\n";  }  info+="* Reference Key: " + heapDump.referenceKey + "\n"+ "* Device: "+ Build.MANUFACTURER+ " "+ Build.BRAND+ " "+ Build.MODEL+ " "+ Build.PRODUCT+ "\n"+ "* Android Version: "+ Build.VERSION.RELEASE+ " API: "+ Build.VERSION.SDK_INT+ "\n"+ "* Durations: watch="+ heapDump.watchDurationMs+ "ms, gc="+ heapDump.gcDurationMs+ "ms, heap dump="+ heapDump.heapDumpDurationMs+ "ms, analysis="+ result.analysisDurationMs+ "ms"+ "\n";  return info;}  }
class C{  @Override public String readLine() throws IOException {  StringBuilder sb=new StringBuilder();  int intch;  boolean prevWasCR=false;synchronized (lock) {    while ((intch=read()) != -1) {      if (prevWasCR && intch == LF) {        return sb.substring(0,sb.length() - 1);      }      if (intch == CR) {        prevWasCR=true;      } else {        prevWasCR=false;      }      sb.append((char)intch);    }  }  String string=sb.toString();  if (string.length() == 0) {    return null;  }  return string;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Property secondOfDay(){  return new Property(this,getChronology().secondOfDay());}  }
class C{  public static MosaicDefinition createMosaicDefinition(final int id){  return createMosaicDefinition(id,createMosaicProperties());}  }
class C{  public static HttpResponse doPut(String host,String path,String method,Map<String,String> headers,Map<String,String> querys,String body) throws Exception {  HttpClient httpClient=wrapClient(host);  HttpPut request=new HttpPut(buildUrl(host,path,querys));  for (  Map.Entry<String,String> e : headers.entrySet()) {    request.addHeader(e.getKey(),e.getValue());  }  if (StringUtils.isNotBlank(body)) {    request.setEntity(new StringEntity(body,"utf-8"));  }  return httpClient.execute(request);}  }
class C{  int itemsDisplayed(){  return (Math.min(items.size() - vsb.getValue(),itemsInWindow()));}  }
class C{  public static int pow(int a,int e){  int result=1;  while (e > 0) {    if ((e & 1) == 1) {      result*=a;    }    a*=a;    e>>>=1;  }  return result;}  }
class C{  public void addAssignmentForDuplicate(Column column,Expression expression){  if (duplicateKeyAssignmentMap == null) {    duplicateKeyAssignmentMap=New.hashMap();  }  if (duplicateKeyAssignmentMap.containsKey(column)) {    throw DbException.get(ErrorCode.DUPLICATE_COLUMN_NAME_1,column.getName());  }  duplicateKeyAssignmentMap.put(column,expression);}  }
class C{  public boolean removeProperty(String property){  return getPropertyHandler().removeProperty(property);}  }
class C{  public Analyzer showIndividualValues(){  showIndividualValues=true;  return this;}  }
class C{  public boolean wasNoopSituationDetected(){  return myNoopSituation;}  }
class C{  public static String generateNativeGuid(ComputeSystem cs,ComputeElement computeElement){  return String.format("%s+%s+%s",_deviceTypeMap.get(cs.getSystemType()),cs.getIpAddress(),computeElement.getLabel());}  }
class C{  @NotNull public static ArrayList<HKey> mkInOutKeys(@NotNull PsiMethod psiMethod,@NotNull HKey primaryKey){  PsiParameter[] parameters=psiMethod.getParameterList().getParameters();  ArrayList<HKey> keys=new ArrayList<HKey>(parameters.length * 2 + 2);  keys.add(primaryKey);  keys.add(primaryKey.updateDirection(mkDirectionKey(Pure)));  for (int i=0; i < parameters.length; i++) {    if (!(parameters[i].getType() instanceof PsiPrimitiveType)) {      keys.add(primaryKey.updateDirection(mkDirectionKey(new InOut(i,Value.NotNull))));      keys.add(primaryKey.updateDirection(mkDirectionKey(new InOut(i,Value.Null))));    }  }  return keys;}  }
class C{  public XYBarRendererState(PlotRenderingInfo info){  super(info);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == Statement.class) {switch (baseFeatureID) {default :    return -1;}}if (baseClass == IterationStatement.class) {switch (baseFeatureID) {case N4JSPackage.ITERATION_STATEMENT__STATEMENT:  return N4JSPackage.FOR_STATEMENT__STATEMENT;case N4JSPackage.ITERATION_STATEMENT__EXPRESSION:return N4JSPackage.FOR_STATEMENT__EXPRESSION;default :return -1;}}if (baseClass == VariableEnvironmentElement.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  if (mf != null && mf.isPicture() && sage.media.format.MediaFormat.JPEG.equals(mf.getContainerFormat()) && Permissions.hasPermission(Permissions.PERMISSION_PICTUREROTATION,stack.getUIMgr())) {    if (mf.getContentAiring().getOrientation() > 1) {      java.io.File srcFile=mf.getFile(0);      if (Sage.getBoolean("temp_backup_picture_file_before_rotateflip",true) && !new java.io.File(srcFile.toString() + ".original").isFile()) {        IOUtils.copyFile(srcFile,new java.io.File(srcFile.toString() + ".original"));      }      String jheadToolPath=sage.Sage.getToolPath("jhead");      String[] jheadArgs=new String[]{jheadToolPath,"-autorot",srcFile.toString()};      if (IOUtils.exec2(jheadArgs) == 0) {        if (Sage.DBG)         System.out.println("Successfully auto-rotated jpeg image");        MetaImage.clearFromCache(new MetaImage.MediaFileThumbnail(mf));        MetaImage.clearFromCache(mf);        mf.reinitializeMetadata(true,true,mf.getName().substring(0,mf.getName().length() - srcFile.getName().length()));        return Boolean.TRUE;      } else {        if (Sage.DBG)         System.out.println("ERROR Autorotation of JPEG file failed");      }    }  }  return Boolean.FALSE;}  }
class C{  public static String camelCaseToUnderscored(String camelCaseName){  int i=0;  while (i < camelCaseName.length() && Character.isLowerCase(camelCaseName.charAt(i))) {    i++;  }  if (i == camelCaseName.length()) {    return camelCaseName;  }  StringBuilder sb=new StringBuilder();  sb.append(camelCaseName.substring(0,i));  while (i < camelCaseName.length()) {    final char c=camelCaseName.charAt(i);    if (isUpperUSASCII(c)) {      sb.append('_');      sb.append(Character.toLowerCase(c));    } else {      sb.append(c);    }    i++;  }  return sb.toString();}  }
class C{  private void createLine(MDDOrder order,MDDOrderLine orderLine,BigDecimal qty,MStorage[] storages,boolean force){  if (m_lastC_BPartner_Location_ID != order.getC_BPartner_Location_ID())   completeMovement();  m_lastC_BPartner_Location_ID=order.getC_BPartner_Location_ID();  if (m_movement == null) {    MLocator locator=MLocator.get(getCtx(),orderLine.getM_Locator_ID());    m_movement=createMovement(order,m_movementDate);    m_movement.setAD_Org_ID(locator.getAD_Org_ID());    m_movement.setIsInTransit(true);    m_movement.setDD_Order_ID(order.getDD_Order_ID());    if (order.getC_BPartner_ID() != order.getC_BPartner_ID())     m_movement.setC_BPartner_ID(order.getC_BPartner_ID());    if (order.getC_BPartner_Location_ID() != order.getC_BPartner_Location_ID())     m_movement.setC_BPartner_Location_ID(order.getC_BPartner_Location_ID());    int docTypeDO_ID=getDocType(MDocType.DOCBASETYPE_MaterialMovement,m_movement.getAD_Org_ID());    if (docTypeDO_ID > 0)     m_movement.setC_DocType_ID(docTypeDO_ID);    if (!m_movement.save())     throw new IllegalStateException("Could not create Movement");  }  if (storages == null) {    MMovementLine line=new MMovementLine(m_movement);    line.setOrderLine(orderLine,Env.ZERO,false);    line.setMovementQty(qty);    if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)     line.setMovementQty(qty.multiply(orderLine.getQtyEntered()).divide(orderLine.getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP));    line.setLine(m_line + orderLine.getLine());    if (!line.save())     throw new IllegalStateException("Could not create Shipment Line");    log.fine(line.toString());    return;  }  MProduct product=orderLine.getProduct();  boolean linePerASI=false;  if (product.getM_AttributeSet_ID() != 0) {    MAttributeSet mas=MAttributeSet.get(getCtx(),product.getM_AttributeSet_ID());    linePerASI=mas.isInstanceAttribute();  }  ArrayList<MMovementLine> list=new ArrayList<MMovementLine>();  BigDecimal toDeliver=qty;  for (int i=0; i < storages.length; i++) {    MStorage storage=storages[i];    BigDecimal deliver=toDeliver;    if (deliver.compareTo(storage.getQtyOnHand()) > 0 && storage.getQtyOnHand().signum() >= 0) {      if (!force || (force && i + 1 != storages.length))       deliver=storage.getQtyOnHand();    }    if (deliver.signum() == 0)     continue;    int M_Locator_ID=storage.getM_Locator_ID();    MMovementLine line=null;    if (!linePerASI) {      for (int ll=0; ll < list.size(); ll++) {        MMovementLine test=(MMovementLine)list.get(ll);        if (test.getM_Locator_ID() == M_Locator_ID) {          line=test;          break;        }      }    }    if (line == null) {      line=new MMovementLine(m_movement);      line.setOrderLine(orderLine,deliver,false);      line.setMovementQty(deliver);      list.add(line);    } else     line.setMovementQty(line.getMovementQty().add(deliver));    if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)     line.setMovementQty(line.getMovementQty().multiply(orderLine.getQtyEntered()).divide(orderLine.getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP));    line.setLine(m_line + orderLine.getLine());    if (linePerASI)     line.setM_AttributeSetInstance_ID(storage.getM_AttributeSetInstance_ID());    if (!line.save())     throw new IllegalStateException("Could not create Shipment Line");    log.fine("ToDeliver=" + qty + "/"+ deliver+ " - "+ line);    toDeliver=toDeliver.subtract(deliver);    storage.setQtyOnHand(storage.getQtyOnHand().subtract(deliver));    if (toDeliver.signum() == 0)     break;  }  if (toDeliver.signum() != 0)   throw new IllegalStateException("Not All Delivered - Remainder=" + toDeliver);}  }
class C{  public Object read(InputNode node,Object list) throws Exception {  int length=Array.getLength(list);  for (int pos=0; true; pos++) {    Position line=node.getPosition();    InputNode next=node.getNext();    if (next == null) {      return list;    }    if (pos >= length) {      throw new ElementException("Array length missing or incorrect for %s at %s",type,line);    }    read(next,list,pos);  }}  }
class C{  void associateVplexVolumeWithMigratedTarget(Migration migration,URI virtualVolumeURI){  Volume virtualVolume=getDataObject(Volume.class,virtualVolumeURI,_dbClient);  StringSet assocVolumes=virtualVolume.getAssociatedVolumes();  if ((assocVolumes != null) && (!assocVolumes.isEmpty())) {    if (migration.getSource() != null) {      assocVolumes.remove(migration.getSource().toString());    }    assocVolumes.add(migration.getTarget().toString());  } else {    assocVolumes=new StringSet();    assocVolumes.add(migration.getTarget().toString());    virtualVolume.setAssociatedVolumes(assocVolumes);  }  _dbClient.updateObject(virtualVolume);  _log.info("Updated virtual volume.");}  }
class C{  public static List<DnsCacheEntry> listDnsCache(){  try {    return InetAddressCacheUtil.listInetAddressCache().getCache();  } catch (  Exception e) {    throw new DnsCacheManipulatorException("Fail to listDnsCache, cause: " + e.toString(),e);  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public T caseAlwaysEvent(AlwaysEvent object){  return null;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void refresh(Map<String,Double> varMap){  for (  Map.Entry<String,Variable> entry : this.entrySet()) {    if (varMap.containsKey(entry.getKey())) {      entry.getValue().setValue(varMap.get(entry.getKey()).doubleValue());    } else {      entry.getValue().setValue(0d);    }  }}  }
class C{  public boolean isEmpty(){  return min == null;}  }
class C{  private ClientSocket connect(){  if (_maxConnections <= _activeCount.get() + _startingCount.get()) {    if (log.isLoggable(Level.WARNING)) {      log.warning(this + " connect exceeded max-connections" + "\n  max-connections="+ _maxConnections+ "\n  activeCount="+ _activeCount.get()+ "\n  startingCount="+ _startingCount.get());    }    return null;  }  _startingCount.incrementAndGet();  State state=_state;  if (!state.isInit()) {    _startingCount.decrementAndGet();    IllegalStateException e=new IllegalStateException(L.l("'{0}' connection cannot be opened because the server pool has not been started.",this));    log.log(Level.WARNING,e.toString(),e);    throw e;  }  if (getPort() <= 0) {    return null;  }  long connectionStartTime=CurrentTime.currentTime();  try {    ReadWritePair pair=openTCPPair();    ReadStreamOld rs=pair.getReadStream();    rs.setEnableReadTime(true);    _activeCount.incrementAndGet();    _connectCountTotal.incrementAndGet();    ClientSocket stream=new ClientSocket(this,_streamCount++,rs,pair.getWriteStream());    if (log.isLoggable(Level.FINER))     log.finer("connect " + stream);    if (_firstSuccessTime <= 0) {      if (_state.isStarting()) {        if (_loadBalanceWarmupTime > 0)         _state=State.WARMUP; else         _state=State.ACTIVE;        _firstSuccessTime=CurrentTime.currentTime();      }      if (_warmupState < 0)       _warmupState=0;    }    return stream;  } catch (  IOException e) {    if (log.isLoggable(Level.FINEST))     log.log(Level.FINEST,this + " " + e.toString(),e); else     log.finer(this + " " + e.toString());    failConnect(connectionStartTime);    return null;  } finally {    _startingCount.decrementAndGet();  }}  }
class C{  public static void shutdown(){  DEFAULT_REGISTRY.shutdown();  JmxReporter.shutdownDefault();  Runtime.getRuntime().removeShutdownHook(SHUTDOWN_HOOK);}  }
class C{  protected void updateFromSelection(){  DBIDSelection sel=context.getSelection();  if (sel != null) {    this.dbids=DBIDUtil.newArray(sel.getSelectedIds());    this.dbids.sort();  } else {    this.dbids=DBIDUtil.newArray();  }}  }
class C{  public final void testValidateFails(){  IPv4AddressValidator iPv4AddressValidator=new IPv4AddressValidator("foo");  assertFalse(iPv4AddressValidator.validate("10.10.10"));  assertFalse(iPv4AddressValidator.validate("10.10"));  assertFalse(iPv4AddressValidator.validate("10"));  assertFalse(iPv4AddressValidator.validate("a.a.a.a"));  assertFalse(iPv4AddressValidator.validate("10.0.0.a"));  assertFalse(iPv4AddressValidator.validate("10.10.10.256"));  assertFalse(iPv4AddressValidator.validate("222.222.2.999"));  assertFalse(iPv4AddressValidator.validate("999.10.10.20"));  assertFalse(iPv4AddressValidator.validate("2222.22.22.22"));  assertFalse(iPv4AddressValidator.validate("22.2222.22.2"));}  }
class C{  public static long round(double value){  if (USE_JDK_MATH) {    return Math.round(value);  }  double roundedValue=FastMath.floor(value + 0.5);  if (Math.abs(roundedValue) <= (double)Integer.MAX_VALUE) {    return (long)(int)roundedValue;  } else {    return (long)roundedValue;  }}  }
class C{  public AppInfo(Context context,LauncherActivityInfoCompat info,UserHandleCompat user,IconCache iconCache){  this(context,info,user,iconCache,UserManagerCompat.getInstance(context).isQuietModeEnabled(user));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/san-fabrics/{fabricId}/san-zones") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep addSanZones(SanZoneCreateParam sanZones,@PathParam("id") URI id,@PathParam("fabricId") String fabricId) throws InternalException {  String task=UUID.randomUUID().toString();  String fabricWwn=null;  if (WWNUtility.isValidWWN(fabricId)) {    fabricWwn=fabricId;    fabricId=fabricId.replaceAll(":","");  }  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  NetworkSystem device=queryResource(id);  List<Zone> zones=new ArrayList<Zone>();  for (  SanZone sz : sanZones.getZones()) {    Zone zone=new Zone(sz.getName());    validateZoneName(sz.getName(),device.getSystemType());    zones.add(zone);    for (    String szm : sz.getMembers()) {      ZoneMember member=createZoneMember(szm);      zone.getMembers().add(member);    }    ArgValidator.checkFieldNotEmpty(zone.getMembers(),"zone members");    auditOp(OperationTypeEnum.ADD_SAN_ZONE,true,AuditLogManager.AUDITOP_BEGIN,zone.getName(),device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  }  ArgValidator.checkFieldNotEmpty(zones,"zones");  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,device.getId(),task,ResourceOperationTypeEnum.ADD_SAN_ZONE);  NetworkController controller=getNetworkController(device.getSystemType());  controller.addSanZones(device.getId(),fabricId,fabricWwn,zones,false,task);  return toTask(device,task,op);}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmpLen < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;    tmpLen=newSize;    tmpBase=0;  }  return tmp;}  }
class C{  public void testSetPublicKey() throws Exception {  IdentitySubclass sub=new IdentitySubclass("test",new IdentityScopeSubclass());  sub.setPublicKey(getPubKey());  PublicKey returnedPubKey=sub.getPublicKey();  assertEquals("Wrong PublicKey returned",getPubKey(),returnedPubKey);  sub.setPublicKey(null);  assertEquals("Wrong PublicKey returned",null,sub.getPublicKey());}  }
class C{  @LargeTest public void testKeyScrollingToTouchMode(){  Instrumentation inst=getInstrumentation();  int firstVisiblePosition=arrowScroll(inst);  TouchUtils.dragQuarterScreenUp(this);  inst.sendCharacterSync(KeyEvent.KEYCODE_BACK);  inst.waitForIdleSync();  assertTrue("List did not change to touch mode",mListView.isInTouchMode());  assertTrue("List did not preserve scroll position",firstVisiblePosition == mListView.getFirstVisiblePosition());}  }
class C{  private AntUtils(){}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public void initTime(int hour,int minutes){  this.hour=hour;  this.minutes=minutes;  this.firstRun=true;  mStr=(minutes < 10) ? "0" + minutes : minutes + "";  if (hourFormat) {    amPmStr="";    degrees=((hour % 24) * 15) + ((minutes % 60) / 4);  } else {    if (hour == 0)     hour=12;    if ((hour == 12 && previousHour == 11) || (hour == 11 && previousHour == 12))     amPm=!amPm;    amPmStr=amPm ? "AM" : "PM";    degrees=((hour % 12) * 30) + ((minutes % 60) / 2);  }  angle=Math.toRadians(degrees) - (Math.PI / 2);  firstRun=false;}  }
class C{  public boolean hasAttribute(String name){  if (name == null) {    return false;  }  return attributes.containsKey(name);}  }
class C{  protected Object newInitialFlow(){  LocalTypeSet ret=(LocalTypeSet)emptySet.clone();  ret.setAllBits();  return ret;}  }
class C{  protected void addThenStepPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_If_thenStep_feature"),getString("_UI_PropertyDescriptor_description","_UI_If_thenStep_feature","_UI_If_type"),SexecPackage.Literals.IF__THEN_STEP,true,false,true,null,null,null));}  }
