class C{  public int responseCode(){  return responseCode;}  }
class C{  public static byte[] toByteArray(final int[] input,int length){  final int intLen=input.length;  byte[] result=new byte[length];  int index=0;  for (int i=0; i <= intLen - 2; i++, index+=4) {    I2OSP(input[i],result,index);  }  I2OSP(input[intLen - 1],result,index,length - index);  return result;}  }
class C{  public static AgentConfig defineAgent(){  return new AgentConfigImpl();}  }
class C{  public boolean isWhiteSpace(){  return getText().trim().length() == 0;}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public String resolveTaskName(int taskNameHash){  if (taskNameHash == 0)   return null;  assert ctx.security().enabled();  try {    return taskMetaCache().localPeek(new GridTaskNameHashKey(taskNameHash),CachePeekModes.ONHEAP_ONLY,null);  } catch (  IgniteCheckedException e) {    throw new IgniteException(e);  }}  }
class C{  public Builder cacheSize(int mb){  return set("cacheSize",mb);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static File createTmpFile(String pathToFile) throws IOException {  File file=new File(pathToFile);  if (file.exists()) {    file.delete();  }  if (!file.createNewFile()) {    LOGGER.warn("Couldn't create new File! Maybe the file " + file.getAbsolutePath() + " already exists!");  }  return file;}  }
class C{  @Inject public DefaultServiceManagementService(AuditService auditService,SystemConfiguration _sysConfig){  super(auditService,_sysConfig);}  }
class C{  private boolean useCompression(){  if (authenticated) {    throw new IllegalStateException("Compression should be negotiated before authentication.");  }  if ((compressionHandler=maybeGetCompressionHandler()) != null) {    requestStreamCompression(compressionHandler.getCompressionMethod());synchronized (this) {      try {        this.wait(SmackConfiguration.getPacketReplyTimeout() * 5);      } catch (      InterruptedException e) {      }    }    return isUsingCompression();  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean startUpWorker(int priority){  return true;}  }
class C{  public void updateObject(int columnIndex,Object x,int scale) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateObject(columnIndex,x,scale);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DelegatingGuacamoleTunnel(GuacamoleTunnel tunnel){  this.tunnel=tunnel;}  }
class C{  public Support_TestProvider(){  super(NAME,VERSION,INFO);  registerServices();}  }
class C{  public Set<String> addContent(ProbDistribution distrib){  if (!paused) {    curState.addToState(distrib);    return update();  } else {    log.info("system is paused, ignoring content " + distrib);    return Collections.emptySet();  }}  }
class C{  public void reverseTransition(int duration){  final long time=SystemClock.uptimeMillis();  if (time - mStartTimeMillis > mDuration) {    if (mTo == 0) {      mFrom=0;      mTo=255;      mAlpha=0;      mReverse=false;    } else {      mFrom=255;      mTo=0;      mAlpha=255;      mReverse=true;    }    mDuration=mOriginalDuration=duration;    mTransitionState=TRANSITION_STARTING;    invalidateSelf();    return;  }  mReverse=!mReverse;  mFrom=mAlpha;  mTo=mReverse ? 0 : 255;  mDuration=(int)(mReverse ? time - mStartTimeMillis : mOriginalDuration - (time - mStartTimeMillis));  mTransitionState=TRANSITION_STARTING;}  }
class C{  @Override public boolean isScraped(){  if (!scraped && !plot.isEmpty() && firstAired != null && getSeason() > -1 && getEpisode() > -1) {    return true;  }  return scraped;}  }
class C{  private int countLines(Process process) throws IOException {  logErrors(process);  InputStream in=process.getInputStream();  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  int count=0;  while (reader.readLine() != null) {    count++;  }  return count;}  }
class C{  public void activatePreviousFrame(){  switchFrame(false);}  }
class C{  public static String cleanNonTerminal(String nt){  if (isNonterminal(nt)) {    if (isIndexedNonTerminal(nt)) {      return nt.substring(1,nt.indexOf(INDEX_SEPARATOR));    }    return nt.substring(1,nt.length() - 1);  }  return nt;}  }
class C{  @Override public boolean onUnbind(Intent intent){  Timber.d("Unbinded from service");  return super.onUnbind(intent);}  }
class C{  public ZipLong(byte[] bytes){  this(bytes,0);}  }
class C{  private void init(){  clearCaches();}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public static CompressionCodec.Type stringToType(String compressionString){  if (compressionString.equals(LZ4)) {    return CompressionCodec.Type.LZ4;  } else   if (compressionString.equals(NONE)) {    return CompressionCodec.Type.NONE;  } else {    return CompressionCodec.Type.UNKNOWN;  }}  }
class C{  public void terminateAllSessions() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Terminate all sessions");  }  terminateAllSessions(TerminationReason.TERMINATION_BY_SYSTEM);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.333 -0400",hash_original_method="04A5EF324FF7075A4D71ED932007FA11",hash_generated_method="32884BC722F0D7A896496B0BFB4CF57B") private boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=m.compare(k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  int n=m.size();  if (n == 0)   return;  if (n > size)   resize(capacity(n));  for (  Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  protected IoBufferWrapper(IoBuffer buf){  if (buf == null) {    throw new IllegalArgumentException("buf");  }  this.buf=buf;}  }
class C{  private void stashRequestUser(RequestAndResponse requestAndResponse){  if (requestAndResponse.wasUserAlreadyStashed) {    return;  }  requestAndResponse.wasUserAlreadyStashed=true;  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));  if (user != null) {    requestAndResponse.userIsAdmin=user.getIsAdmin();    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();    requestAndResponse.userOptions=user.getOptions();  } else {    requestAndResponse.userOptions="{}";  }}  }
class C{  private String sanitizeKey(String key){  return key.replaceAll("\\W","_");}  }
class C{  boolean isBOTTOM(){  return !TOP && (size == 0);}  }
class C{  public NotLinkException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  public static void updateHighlighting(final ZyGraph graph,final INaviInstruction startInstruction,final String trackedRegister,final List<CInstructionResult> instructionResults){  Preconditions.checkNotNull(graph,"IE01529: Graph argument can not be null");  Preconditions.checkNotNull(startInstruction,"IE01687: Start instruction argument can not be null");  Preconditions.checkNotNull(trackedRegister,"IE01688: Tracked register argument can not be null");  Preconditions.checkNotNull(instructionResults,"IE01540: Instruction results argument can not be null");  clearHighlighting(graph);  highlightInstructions(graph,startInstruction,trackedRegister,instructionResults);}  }
class C{  private String createWorkflowStepForDeleteReplicationSet(Workflow workflow,ProtectionSystem rpSystem,List<Volume> vplexVolumes,String waitFor){  List<URI> vplexVolumeURIs=new ArrayList<>();  Map<String,RecreateReplicationSetRequestParams> params=getRecreateReplicationSetParams(rpSystem,vplexVolumes,vplexVolumeURIs);  acquireRPWorkflowLock(workflow,rpSystem.getId(),vplexVolumeURIs);  Workflow.Method executeMethod=new Workflow.Method(RPDeviceController.METHOD_DELETE_RSET_STEP,rpSystem.getId(),vplexVolumeURIs);  Workflow.Method rollbackMethod=new Workflow.Method(RPDeviceController.METHOD_RECREATE_RSET_STEP,rpSystem.getId(),vplexVolumeURIs,params);  workflow.createStep(RPDeviceController.STEP_PRE_VOLUME_RESTORE,"Delete RP replication set step for snapshot session restore",waitFor,rpSystem.getId(),rpSystem.getSystemType(),RPDeviceController.class,executeMethod,rollbackMethod,null);  return RPDeviceController.STEP_PRE_VOLUME_RESTORE;}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new JSONArray().put(value));  } else   if (object instanceof JSONArray) {    this.put(key,((JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  private void initVars(){  actualMode=Mode.SELECTION;  activeNode=null;  activeLink=null;  activeLink=null;  net=null;  controls=null;  line=new LineOnBoard();  move=new MoveOnBoard();  selectionSquare=new SquareOnBoard();  selectedLinkList=new ArrayList<Link>();  isControlPressed=false;  tolerance=0.03;  initCounts();  try {    Toolkit toolkit=Toolkit.getDefaultToolkit();    Image image=ImageIO.read(getClass().getResource("/org/matsim/contrib/networkEditor/images/pencil.gif"));    Point hotSpot=new Point(0,0);    this.pencilCursor=toolkit.createCustomCursor(image,hotSpot,"Pencil");    image=ImageIO.read(getClass().getResource("/org/matsim/contrib/networkEditor/images/move.png"));    hotSpot=new Point(0,0);    this.moveCursor=toolkit.createCustomCursor(image,hotSpot,"Move");    image=ImageIO.read(getClass().getResource("/org/matsim/contrib/networkEditor/images/scissors.png"));    hotSpot=new Point(20,10);    this.scissorCursor=toolkit.createCustomCursor(image,hotSpot,"Scissor");  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private EvictionThread ensureEvictionThreadIsRunning(){  EvictionThread eThread=evictor;  if (eThread != null) {    return eThread;  }synchronized (this) {    if (evictor == null) {      eThread=new EvictionThread("CacheEvictionThread-" + id());      eThread.setPriority(Thread.MIN_PRIORITY);      eThread.setDaemon(true);      eThread.setUncaughtExceptionHandler(eThread);      eThread.start();      evictor=eThread;      logger.info(id() + " Eviction Thread started");    } else {      eThread=evictor;    }  }  return eThread;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.STATUS__PROPERTIES:    getProperties().clear();  getProperties().addAll((Collection<? extends Property>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.061 -0500",hash_original_method="A2F64A06EC646B0B6CC4F19E5E317D3C",hash_generated_method="B65CC9595F8C152168EA0D7A0AF56977") public SocketTimeoutException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private static int skipCommentsAndQuotes(final char[] statement,final int position){  for (int i=0; i < ParsedSql.START_SKIP.length; i++) {    if (statement[position] == ParsedSql.START_SKIP[i].charAt(0)) {      boolean match=true;      for (int j=1; j < ParsedSql.START_SKIP[i].length(); j++) {        if (!(statement[position + j] == ParsedSql.START_SKIP[i].charAt(j))) {          match=false;          break;        }      }      if (match) {        int offset=ParsedSql.START_SKIP[i].length();        for (int m=position + offset; m < statement.length; m++) {          if (statement[m] == ParsedSql.STOP_SKIP[i].charAt(0)) {            boolean endMatch=true;            int endPos=m;            for (int n=1; n < ParsedSql.STOP_SKIP[i].length(); n++) {              if (m + n >= statement.length)               return statement.length;              if (!(statement[m + n] == ParsedSql.STOP_SKIP[i].charAt(n))) {                endMatch=false;                break;              }              endPos=m + n;            }            if (endMatch) {              return endPos + 1;            }          }        }        return statement.length;      }    }  }  return position;}  }
class C{  private void checkAuthPlainSupport() throws AuthenticationNotSupportedException {  String mechanismsString=smartClient.getExtensions().get("AUTH");  if (mechanismsString == null) {    throw new AuthenticationNotSupportedException("Cannot authenticate, because the AUTH extension is " + "not supported by the server. Maybe the server expects " + "TLS first");  }  Set<String> mechanisms=parseMechanismsList(mechanismsString);  if (!mechanisms.contains("PLAIN")) {    throw new AuthenticationNotSupportedException("Cannot authenticate, because the PLAIN mechanism is " + "not supported by the server. Maybe the server expects " + "TLS first");  }}  }
class C{  public static Object objectToJsonString(Object obj){  if (obj instanceof Collection || obj instanceof Map || obj instanceof Object[]|| obj instanceof Record) {    try {      return new ObjectMapper().writeValueAsString(obj);    } catch (    JsonProcessingException ex) {      return obj;    }  }  return obj;}  }
class C{  public static final void drawMotorJoint(GL2 gl,MotorJoint joint){  gl.glColor4f(1.0f,0.0f,0.0f,1.0f);  Vector2 target=joint.getBody1().getWorldVector(joint.getLinearTarget());  RenderUtilities.fillRectangleFromCenter(gl,target.x,target.y,0.1,0.1);}  }
class C{  public void put(TableKelp table,StreamSource ss,PutType putType,Result<Boolean> result){  if (ss == null) {    result.ok(false);    return;  }  try (InputStream is=ss.getInputStream()){    if (is.available() < 1) {      System.err.println("BAD_STREAM: " + is + " "+ ss+ " "+ System.identityHashCode(ss)+ " "+ table);      throw new IOException(L.l("unexpected empty stream {0} for {1} [{2}]",is,table,AmpSystem.currentManager()));    }    table.put(is,putType,result);  } catch (  Throwable e) {    e.printStackTrace();    result.fail(e);  }}  }
class C{  private void saveCacheToDisk(){  File file=fileResolver.getClassHashCacheFile().getAbsoluteFile();  if (file.exists()) {    if (!file.delete()) {      log.warn("Unable to delete the existing class cache file: " + file.getAbsolutePath());    }  } else {    File parentDir=file.getParentFile();    if (!parentDir.exists()) {      if (!parentDir.mkdirs()) {        log.warn("Unable to create needed directory for the cache file: " + file.getParentFile().getAbsolutePath());      }    }  }  FileOutputStream fileOutputStream=null;  try {    fileOutputStream=new FileOutputStream(file);    Output output=new Output(fileOutputStream);    Map<String,Collection<String>> fqnWithHashes=new HashMap<String,Collection<String>>();    for (    Entry<String,ClassEntry> entry : fqnToClassEntryMap.entrySet()) {      fqnWithHashes.put(entry.getKey(),entry.getValue().getHashes());    }    serializationManager.serialize(fqnWithHashes,output);  } catch (  Throwable t) {    log.warn("Unable to save sending classes cache to disk.",t);  } finally {    if (null != fileOutputStream) {      try {        fileOutputStream.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public Registration create(Session session) throws AcmeException {  LOG.debug("create");  try (Connection conn=session.provider().connect()){    ClaimBuilder claims=new ClaimBuilder();    claims.putResource(Resource.NEW_REG);    if (!contacts.isEmpty()) {      claims.put("contact",contacts);    }    int rc=conn.sendSignedRequest(session.resourceUri(Resource.NEW_REG),claims,session);    if (rc != HttpURLConnection.HTTP_CREATED) {      conn.throwAcmeException();    }    URI location=conn.getLocation();    URI tos=conn.getLink("terms-of-service");    return new Registration(session,location,tos);  } catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  @Override public synchronized void close() throws SecurityException {  super.close();  if (sock != null) {    try {      sock.close();    } catch (    IOException ix) {    }  }  sock=null;}  }
class C{  public void pauseTime(){  timeTravelClock.pauseTime();}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  Node(){  key=null;  hash=-1;  next=prev=this;}  }
class C{  private void initMem(int size,int startAddress){  variables=new Hashtable<>();  constants=new Hashtable<>();  MEMSIZE=(size + 3) - ((size + 3) % 4);  memory=new Memory(MEMSIZE,startAddress);  memAddressStart=startAddress;  nextReservableAddress=startAddress;  memInfo=new TreeMap<>();}  }
class C{  protected void matchLevelAndReportImportRef(ImportReference importRef,Binding binding,MatchLocator locator) throws CoreException {  int level=resolveLevel(binding);  if (level >= INACCURATE_MATCH) {    matchReportImportRef(importRef,binding,locator.createImportHandle(importRef),level == ACCURATE_MATCH ? SearchMatch.A_ACCURATE : SearchMatch.A_INACCURATE,locator);  }}  }
class C{  public static CachedFile addCachedFile(File parent,String childname){  if (Helper.isNullOrEmpty(parent) || Helper.isNullOrEmpty(childname)) {    if (logger.isTraceEnabled())     logger.trace("addCachedFile(parent,childname) - unexpected null parameter");    return null;  }  return addCachedFile(new File(parent,childname));}  }
class C{  protected void sequence_ProvidedRuntimeLibraries(ISerializationContext context,ProvidedRuntimeLibraries semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void info(String format,Object arg1,Object arg2){  formatAndLog(Log.INFO,format,arg1,arg2);}  }
class C{  public PcLocalRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);  this.sourceGraph=dataWrapper.getSourceGraph();}  }
class C{  public long factConditional(long n){  if (n == 0) {    return 1;  } else {    return n * factConditional(n - 1);  }}  }
class C{  public JSplitPane(){  this(JSplitPane.HORIZONTAL_SPLIT,UIManager.getBoolean("SplitPane.continuousLayout"),new JButton(UIManager.getString("SplitPane.leftButtonText")),new JButton(UIManager.getString("SplitPane.rightButtonText")));}  }
class C{  @Override final public boolean isMinus(){  return false;}  }
class C{  public boolean isCachedMemory(){  return true;}  }
class C{  protected void rotateOrthogonal(){  Iterator<Entry<String,NamedIcon>> it=_iconMap.entrySet().iterator();  while (it.hasNext()) {    Entry<String,NamedIcon> entry=it.next();    entry.getValue().setRotation(entry.getValue().getRotation() + 1,this);  }  updateSize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.080 -0500",hash_original_method="4A23FA304401B8212AFFCC6CDE5C960E",hash_generated_method="0B989C678E10304D5CEDB8C17EA77594") public Base64OutputStream(OutputStream out,boolean doEncode,int lineLength,byte[] lineSeparator){  super(out);  this.doEncode=doEncode;  this.base64=new Base64(lineLength,lineSeparator);}  }
class C{  public void reset(){  firstTime=true;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.269 -0500",hash_original_method="EECBC8862767167AF0CABDC3594E6347",hash_generated_method="39275A257DB50D61A6E49D9313454A28") public final void writeBytes(String str) throws IOException {  byte[] bytes=new byte[str.length()];  for (int index=0; index < str.length(); index++) {    bytes[index]=(byte)(str.charAt(index) & 0xFF);  }  write(bytes);}  }
class C{  @GenerateLink(rel="download artifact") @GET @Path("/download/{artifact}/{version}") @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response download(@PathParam("artifact") final String artifact,@PathParam("version") final String version){  try {    String userId=userManager.getCurrentUser().getUserId();    return doDownloadArtifact(artifact,version,userId);  } catch (  ArtifactNotFoundException e) {    return Response.status(Response.Status.NOT_FOUND).entity("Unexpected error. Can't download the artifact " + artifact + ":"+ version+ ". "+ e.getMessage()).build();  }catch (  Exception e) {    LOG.error(e.getMessage(),e);    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Unexpected error. Can't download the artifact " + artifact + ":"+ version+ ". "+ e.getMessage()).build();  }}  }
class C{  static final public String binary(char what){  return binary(what,16);}  }
class C{  public void afterCartesianOfGroupJunctionsInCompositeGroupJunctionOfType_AND(){}  }
class C{  public void bringToSignatures(SootClass sc){  if (sc.resolvingLevel() >= SootClass.SIGNATURES)   return;  bringToHierarchy(sc);  if (Options.v().debug_resolver())   G.v().out.println("bringing to SIGNATURES: " + sc);  sc.setResolvingLevel(SootClass.SIGNATURES);  for (Iterator fIt=sc.getFields().iterator(); fIt.hasNext(); ) {    final SootField f=(SootField)fIt.next();    addToResolveWorklist(f.getType(),SootClass.HIERARCHY);  }  for (Iterator mIt=sc.getMethods().iterator(); mIt.hasNext(); ) {    final SootMethod m=(SootMethod)mIt.next();    addToResolveWorklist(m.getReturnType(),SootClass.HIERARCHY);    for (Iterator ptypeIt=m.getParameterTypes().iterator(); ptypeIt.hasNext(); ) {      final Type ptype=(Type)ptypeIt.next();      addToResolveWorklist(ptype,SootClass.HIERARCHY);    }    for (    SootClass exception : m.getExceptions()) {      addToResolveWorklist(exception,SootClass.HIERARCHY);    }  }  if (sc.hasSuperclass())   addToResolveWorklist(sc.getSuperclass(),SootClass.SIGNATURES);  for (Iterator ifaceIt=sc.getInterfaces().iterator(); ifaceIt.hasNext(); ) {    final SootClass iface=(SootClass)ifaceIt.next();    addToResolveWorklist(iface,SootClass.SIGNATURES);  }}  }
class C{  public IMouseState createEdgeEnterState(final Edge e,final MouseEvent event){  final CEdgeEnterState state=new CEdgeEnterState(this,m_graph,e);  m_factory.createEdgeEnterAction().execute(state,event);  return state;}  }
class C{  public static void putDataPrefixToLayerList(String dataPrefix,Properties props,String layerListProperty){  Vector<String> layersValue=parseSpacedMarkers(props.getProperty(layerListProperty));  for (Iterator<String> it=layersValue.iterator(); it.hasNext(); ) {    String markerName=getScopedPropertyPrefix(it.next());    props.setProperty(markerName + Layer.DataPathPrefixProperty,dataPrefix);  }}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0) {    uri="http://" + uri;  } else   if (isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  @SuppressWarnings("regex") public static PatternSyntaxException regexException(String s,int groups){  try {    Pattern p=Pattern.compile(s);    int actualGroups=getGroupCount(p);    if (actualGroups < groups) {      return new PatternSyntaxException(regexErrorMessage(s,groups,actualGroups),s,-1);    }  } catch (  PatternSyntaxException pse) {    return pse;  }  return null;}  }
class C{  @Transactional public void addCommentThankNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_POINT_COMMENT_THANK);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=comment_thank] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  int k_max=knnDistances.length;  out.writeInt(k_max);  for (int i=0; i < k_max; i++) {    out.writeDouble(knnDistances[i]);  }}  }
class C{  public EuclideanUtils(String normToUse){  setNormToUse(normToUse);}  }
class C{  private static TokenSpec findTokenIn(String line,int pos,String[] tokArray){  int tokIdx;  for (int i=0; i < tokArray.length; i++) {    tokIdx=tokArray[i].indexOf(line.charAt(pos),0);    while (tokIdx != -1) {      int ftlft=pos - tokIdx;      int ftrt=pos - tokIdx + tokArray[i].length();      if (tokArray[i].equals(line.substring(ftlft,ftrt))) {        return new TokenSpec(tokArray[i],ftlft,ftrt);      }      tokIdx=tokArray[i].indexOf(line.charAt(pos),tokIdx + 1);    }  }  return null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildZooArea(zone);}  }
class C{  @Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){  List<Project> newProjectList=new LinkedList<>();  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);  projectsToAdd.forEach(null);  try {    if (PropertyUtils.getProperty(task,fieldName) != null) {      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);      projects.forEach(null);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }  try {    PropertyUtils.setProperty(task,fieldName,newProjectList);  } catch (  Exception e) {    throw new RuntimeException(e);  }  taskRepository.save(task);}  }
class C{  public void copyString(String encoding,String s) throws UnsupportedEncodingException {  super.setContentEncoding(encoding);  content=s.getBytes(encoding);}  }
class C{  private void play(){  AudibleCircleArea area=new AudibleCircleArea(Algebra.vecf((float)x,(float)y),radius / 2.0f,radius);  sound=group.play(soundName,volume,0,area,fadingDuration,true,true);}  }
class C{  protected ConnectFuture fireConnected(final IoSession session){  future.setSession(session);  return future;}  }
class C{  public void wiggleSort(int[] A){  if (A == null || A.length == 0)   return;  for (int i=1; i < A.length - 1; i++) {    int m1=Math.min(A[i - 1],Math.min(A[i],A[i + 1]));    int m3=Math.max(A[i - 1],Math.max(A[i],A[i + 1]));    int m2=A[i - 1] + A[i] + A[i + 1] - m1 - m3;    if (A[i - 1] > A[i]) {      A[i - 1]=m3;      A[i]=m1;      A[i + 1]=m2;    } else {      A[i - 1]=m1;      A[i]=m3;      A[i + 1]=m2;    }  }}  }
class C{  public CZoomSourceAction(final ZyGraph graph,final NaviEdge edge){  super("Zoom to Source Node");  Preconditions.checkNotNull(graph,"IE00961: Graph argument can't be null");  Preconditions.checkNotNull(edge,"IE00962: Edge argument can't be null");  m_graph=graph;  m_edge=edge;}  }
class C{  ExportPathParams validateAndCreateExportPathParam(ExportPathParameters param,ExportGroup exportGroup,Collection<URI> blockObjectURIs){  if ((param.getMinPaths() != null || param.getPathsPerInitiator() != null) && param.getMaxPaths() == null) {    throw APIException.badRequests.maxPathsRequired();  }  if (param.getMaxPaths() != null) {    ArgValidator.checkFieldMinimum(param.getMaxPaths(),1,"max_paths");  } else {    param.setMaxPaths(2);  }  if (param.getMinPaths() != null) {    ArgValidator.checkFieldMinimum(param.getMinPaths(),1,"min_paths");  } else {    param.setMinPaths(1);  }  if (param.getPathsPerInitiator() != null) {    ArgValidator.checkFieldMinimum(param.getPathsPerInitiator(),1,"paths_per_initiator");  } else {    param.setPathsPerInitiator(1);  }  if (param.getMinPaths() > param.getMaxPaths()) {    throw APIException.badRequests.minPathsGreaterThanMaxPaths();  }  if (param.getPathsPerInitiator() > param.getMaxPaths()) {    throw APIException.badRequests.pathsPerInitiatorGreaterThanMaxPaths();  }  Set<URI> storageArrays=new HashSet<URI>();  for (  URI blockObjectURI : blockObjectURIs) {    BlockObject blockObject=BlockObject.fetch(_dbClient,blockObjectURI);    if (blockObject == null) {      continue;    }    storageArrays.add(blockObject.getStorageController());  }  validateExportPathParmPorts(param,exportGroup,storageArrays);  ExportPathParams pathParam=new ExportPathParams();  pathParam.setId(URIUtil.createId(ExportPathParams.class));  pathParam.setLabel(exportGroup.getLabel());  pathParam.setMaxPaths(param.getMaxPaths());  pathParam.setMinPaths(param.getMinPaths());  pathParam.setPathsPerInitiator(param.getPathsPerInitiator());  if (param.getStoragePorts() != null) {    pathParam.setStoragePorts(StringSetUtil.uriListToStringSet(param.getStoragePorts()));  }  pathParam.setExplicitlyCreated(false);  validateNoConflictingExports(exportGroup,storageArrays,pathParam);  return pathParam;}  }
class C{  public SortingNode<T> deepSort(Comparator<SortingNode<T>> comparator){  if (!hasChild()) {    return this;  }  ImmutableList<SortingNode<T>> sorted=children.stream().map(null).sorted(comparator).collect(MoreCollectors.toImmutableList());  return new SortingNode<>(value,parent,sorted);}  }
class C{  public void decQueueSize(int delta){  this.stats.incInt(eventQueueSizeId,-delta);}  }
class C{  private static void DisplayHelpAndExit(EXIT_CODE exitCode){  HelpFormatter formatter=new HelpFormatter();  formatter.setWidth(120);  formatter.printHelp("tpasswd",pwd.options);  Exit(exitCode);}  }
class C{  @Override protected void onSetUp() throws Exception {  super.onSetUp();  EncodingHelper.setJVMEncodingToUTF8();  DefaultTransactionDefinition def=new DefaultTransactionDefinition();  def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);  if (isTransactionNeeded()) {    this.txStatus=this.transactionManager.getTransaction(def);  }  this.onSetUpInTransaction();}  }
class C{  public SwingTerminalFrame addAutoCloseTrigger(TerminalEmulatorAutoCloseTrigger autoCloseTrigger){  if (autoCloseTrigger != null) {    this.autoCloseTriggers.add(autoCloseTrigger);  }  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  modelEClass=createEClass(MODEL);  createEAttribute(modelEClass,MODEL__NAME);  createEAttribute(modelEClass,MODEL__NAMESPACE);  createEAttribute(modelEClass,MODEL__VERSION);  createEReference(modelEClass,MODEL__REFERENCES);  createEAttribute(modelEClass,MODEL__DESCRIPTION);  createEAttribute(modelEClass,MODEL__DISPLAYNAME);  createEAttribute(modelEClass,MODEL__CATEGORY);  modelReferenceEClass=createEClass(MODEL_REFERENCE);  createEAttribute(modelReferenceEClass,MODEL_REFERENCE__VERSION);  createEAttribute(modelReferenceEClass,MODEL_REFERENCE__IMPORTED_NAMESPACE);}  }
class C{  protected int defineFont2(Movie movie,SWFTagTypes tagwriter) throws IOException {  int id=getNextId(movie);  int glyphCount=glyphList.size();  int[] codes=new int[glyphCount];  Rect[] bounds=new Rect[glyphCount];  int[] advances=new int[glyphCount];  int i=0;  for (Iterator it=glyphList.iterator(); it.hasNext(); ) {    FontDefinition.Glyph g=(FontDefinition.Glyph)it.next();    codes[i]=g.getCode();    advances[i]=(int)(g.getAdvance() * SWFConstants.TWIPS);    double[] bound=g.getShape().getBoundingRectangle();    bounds[i]=new Rect((int)(bound[0] * SWFConstants.TWIPS),(int)(bound[1] * SWFConstants.TWIPS),(int)(bound[2] * SWFConstants.TWIPS),(int)(bound[3] * SWFConstants.TWIPS));    i++;  }  List kerns=fontDef.getKerningPairList();  int kernCount=kerns.size();  int[] kern1=new int[kernCount];  int[] kern2=new int[kernCount];  int[] kernOff=new int[kernCount];  i=0;  for (Iterator it=kerns.iterator(); it.hasNext(); ) {    FontDefinition.KerningPair pair=(FontDefinition.KerningPair)it.next();    kern1[i]=pair.getCode1();    kern2[i]=pair.getCode2();    kernOff[i]=(int)(pair.getAdjustment() * SWFConstants.TWIPS);    i++;  }  int flags=0;  if (fontDef.hasMetrics()) {    flags|=SWFConstants.FONT2_HAS_LAYOUT;  }  if (fontDef.isShiftJIS()) {    flags|=SWFConstants.FONT2_SHIFTJIS;  }  if (fontDef.isUnicode()) {    flags|=SWFConstants.FONT2_UNICODE;  }  if (fontDef.isAnsi()) {    flags|=SWFConstants.FONT2_ANSI;  }  if (fontDef.isItalic()) {    flags|=SWFConstants.FONT2_ITALIC;  }  if (fontDef.isBold()) {    flags|=SWFConstants.FONT2_BOLD;  }  SWFVectors vecs=tagwriter.tagDefineFont2(id,flags,fontDef.getName(),glyphCount,(int)(fontDef.getAscent() * SWFConstants.TWIPS),(int)(fontDef.getDescent() * SWFConstants.TWIPS),(int)(fontDef.getLeading() * SWFConstants.TWIPS),codes,advances,bounds,kern1,kern2,kernOff);  for (Iterator it=glyphList.iterator(); it.hasNext(); ) {    FontDefinition.Glyph g=(FontDefinition.Glyph)it.next();    Shape s=g.getShape();    s.writeGlyph(vecs);  }  return id;}  }
class C{  public StorageUnitEntity createStorageUnitEntity(String storageName,String namespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String partitionValue,List<String> subPartitionValues,Integer businessObjectDataVersion,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode,String storageUnitStatus,String storageDirectoryPath){  return createStorageUnitEntity(storageName,new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,subPartitionValues,businessObjectDataVersion),businessObjectDataLatestVersion,businessObjectDataStatusCode,storageUnitStatus,storageDirectoryPath);}  }
class C{  public static void copy(Reader reader,boolean closeIn,Writer writer,boolean closeOut) throws IOException {  try {    try {      IOUtils.copy(reader,writer);    }  finally {      if (closeIn)       IOUtils.closeQuietly(reader);    }  }  finally {    if (closeOut)     IOUtils.closeQuietly(writer);  }}  }
class C{  public boolean containsKey(long key){  return contains(key);}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  public void remove(int index){  if (index < clusters.size()) {    clusters.remove(index);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION___INLINE_ASSOCIATION_END_1:    return ((InternalEList<?>)getInlineAssociationEnd_1()).basicRemove(otherEnd,msgs);case UmplePackage.INLINE_ASSOCIATION___ASSOCIATION_END_1:  return ((InternalEList<?>)getAssociationEnd_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  void checkRetransmissionRatio(List status){  double threshold=this.config.getMaxRetransmissionRatio();  int mcastMessages=this.dmStats.getMcastWrites();  if (mcastMessages > 100000) {    double ratio=(this.dmStats.getMcastRetransmits() * 1.0) / (this.dmStats.getMcastWrites() * 1.0);    if (ratio > threshold) {      String s="The number of message retransmissions (" + ratio + ") exceeds the threshold ("+ threshold+ ")";      status.add(okayHealth(s));    }  }}  }
class C{  private SwaggerModelProperty handleCollectionType(Field property,HashMap<String,SwaggerModel> models,SwaggerModelProperty modelProperty){  String type=property.getType().getSimpleName();  if (COLLECTION_TYPES.contains(type)) {    ParameterizedType parameterizedType=(ParameterizedType)property.getGenericType();    Type[] genericTypes=parameterizedType.getActualTypeArguments();    if (genericTypes.length > 0) {      Class genericClass=(Class)genericTypes[0];      addModel(models,genericClass);      HashMap<String,String> items=new HashMap<>();      if (PRIMITIVE_TYPES.contains(genericClass.getSimpleName())) {        items.put("type",genericClass.getSimpleName());      } else {        items.put(REFERENCE_TYPE,genericClass.getSimpleName());      }      modelProperty.setItems(items);    }  }  return modelProperty;}  }
class C{  @Override public void releaseView(){  mView=null;}  }
class C{  public static Object oneOrMany(final Collection<?> collection){switch (size(collection)) {case 0:    return null;case 1:  return collection.iterator().next();default :return collection;}}  }
class C{  private void handleEndOfStream() throws AdeException {  if (m_parsingQualityReport != null) {    m_parsingQualityReport.close();  }  printStatEof();}  }
class C{  private static <T>SortedSet<T> cast(Iterable<T> iterable){  return (SortedSet<T>)iterable;}  }
class C{  public List<ClusterRestRep> searchByName(String clusterName){  return search().byName(clusterName).run();}  }
class C{  public static void main(String[] args){  int N=2098;  if (args.length > 0)   if (args[0].matches("\\d+"))   N=Integer.parseInt(args[0]);  meteor puzzle=new meteor();  Date start;  Date end;  long time;  SortedSet<String> solutions;  start=new Date();  solutions=puzzle.solve();  end=new Date();  time=end.getTime() - start.getTime();  if (solutions.size() > N)   System.out.println("ERROR"); else   if (solutions.size() < N)   System.out.println("TIMEOUT"); else {    if (DEBUG) {      System.out.println("START    : " + start);      System.out.println("END      : " + end);      System.out.println("TIME     : " + time);      System.out.println("SOLUTIONS: " + solutions.size());      System.out.println("FIRST    : " + solutions.first());      System.out.println("LAST     : " + solutions.last());      System.out.println();    }    System.out.print(solutions.size() + " solutions found\n\n");    print(solutions.first());    System.out.print("\n");    print(solutions.last());    System.out.print("\n");  }}  }
class C{  public static LatLon locationFromUTMCoord(int zone,String hemisphere,double easting,double northing){  UTMCoord coord=UTMCoord.fromUTM(zone,hemisphere,easting,northing);  return new LatLon(coord.getLatitude(),coord.getLongitude());}  }
class C{  public static int roundsUntilReturn(IGame game,Entity en){  if (!(en instanceof Aero)) {    return -1;  }  if (!game.getOptions().booleanOption("return_flyover")) {    return -1;  }  Aero a=(Aero)en;  int turns=1 + (int)Math.ceil(a.getCurrentVelocity() / 4.0);  if (a.isOutControlTotal()) {    turns+=2;  }  return turns;}  }
class C{  public void dequeueSound(Uri uri){  mAudioQueue.remove(new AudioQueueItem(uri,null));}  }
class C{  protected double applyOperator(double first,double second){switch (m_operator) {case '+':    return (first + second);case '-':  return (first - second);case '*':return (first * second);case '/':return (first / second);case '^':return Math.pow(first,second);}return Double.NaN;}  }
class C{  public DataPoint(int NFE,double value){  super();  this.NFE=NFE;  this.value=value;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  LogicalCompare<Integer> oper=new LogicalCompare<Integer>(){  };  CollectorTestSink eSink=new CollectorTestSink();  CollectorTestSink neSink=new CollectorTestSink();  CollectorTestSink gtSink=new CollectorTestSink();  CollectorTestSink gteSink=new CollectorTestSink();  CollectorTestSink ltSink=new CollectorTestSink();  CollectorTestSink lteSink=new CollectorTestSink();  oper.equalTo.setSink(eSink);  oper.notEqualTo.setSink(neSink);  oper.greaterThan.setSink(gtSink);  oper.greaterThanOrEqualTo.setSink(gteSink);  oper.lessThan.setSink(ltSink);  oper.lessThanOrEqualTo.setSink(lteSink);  Pair<Integer,Integer> gtuple=new Pair<Integer,Integer>(2,1);  Pair<Integer,Integer> etuple=new Pair<Integer,Integer>(2,2);  Pair<Integer,Integer> ltuple=new Pair<Integer,Integer>(2,3);  oper.beginWindow(0);  oper.input.process(gtuple);  oper.input.process(etuple);  oper.input.process(ltuple);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,eSink.collectedTuples.size());  Assert.assertEquals("tuples were",eSink.collectedTuples.get(0).equals(etuple),true);  Assert.assertEquals("number emitted tuples",2,neSink.collectedTuples.size());  Assert.assertEquals("tuples were",neSink.collectedTuples.get(0).equals(gtuple),true);  Assert.assertEquals("tuples were",neSink.collectedTuples.get(1).equals(ltuple),true);  Assert.assertEquals("number emitted tuples",1,gtSink.collectedTuples.size());  Assert.assertEquals("tuples were",gtSink.collectedTuples.get(0).equals(gtuple),true);  Assert.assertEquals("number emitted tuples",2,gteSink.collectedTuples.size());  Assert.assertEquals("tuples were",gteSink.collectedTuples.get(0).equals(gtuple),true);  Assert.assertEquals("tuples were",gteSink.collectedTuples.get(1).equals(etuple),true);  Assert.assertEquals("number emitted tuples",1,ltSink.collectedTuples.size());  Assert.assertEquals("tuples were",ltSink.collectedTuples.get(0).equals(ltuple),true);  Assert.assertEquals("number emitted tuples",2,lteSink.collectedTuples.size());  Assert.assertEquals("tuples were",lteSink.collectedTuples.get(0).equals(etuple),true);  Assert.assertEquals("tuples were",lteSink.collectedTuples.get(1).equals(ltuple),true);}  }
class C{  public CertificateMessage(HandshakeIODataStream in,int length) throws IOException {  int l=in.readUint24();  if (l == 0) {    if (length != 3) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");    }    certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    this.length=3;    return;  }  CertificateFactory cf;  try {    cf=CertificateFactory.getInstance("X509");  } catch (  CertificateException e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    return;  }  ArrayList<X509Certificate> certsList=new ArrayList<X509Certificate>();  int size=0;  int enc_size=0;  while (l > 0) {    size=in.readUint24();    l-=3;    try {      certsList.add((X509Certificate)cf.generateCertificate(in));    } catch (    CertificateException e) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR",e);    }    l-=size;    enc_size+=size;  }  certs=certsList.toArray(new X509Certificate[certsList.size()]);  this.length=3 + 3 * certs.length + enc_size;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");  }}  }
class C{  protected Var mapValueExprToVar(ValueExpr valueExpr){  if (valueExpr instanceof Var) {    return (Var)valueExpr;  } else   if (valueExpr instanceof ValueConstant) {    Var v=TupleExprs.createConstVar(((ValueConstant)valueExpr).getValue());    return v;  } else   if (valueExpr == null) {    throw new IllegalArgumentException("valueExpr is null");  } else {    throw new IllegalArgumentException("valueExpr is a: " + valueExpr.getClass());  }}  }
class C{  public BaleenManagerServlet(BaleenManager manager){  super(LOGGER,BaleenManagerServlet.class);  this.manager=manager;}  }
class C{  public GuacamoleResourceNotFoundException(String message){  super(message);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CommandAPDU(int cla,int ins,int p1,int p2,byte[] data,int ne){  this(cla,ins,p1,p2,data,0,arrayLength(data),ne);}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.RETURN_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Script_IM createScript_IM(){  Script_IMImpl script_IM=new Script_IMImpl();  return script_IM;}  }
class C{  @Override public void updateBytes(int columnIndex,byte[] x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBytes(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueBytes.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  public final Matrix multiply(Matrix b){  try {    return new Matrix(getMatrix().times(b.getMatrix()).getArrayCopy());  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public ResourceLineage(ResourceLineage sharedLineage,PersistentResource next){  resourceMap=new LinkedMap<>(sharedLineage.resourceMap);  addRecord(next);}  }
class C{  public Matrix4f rotationX(float ang){  float sin, cos;  sin=(float)Math.sin(ang);  cos=(float)Math.cos(ang);  MemUtil.INSTANCE.identity(this);  this._m11(cos);  this._m12(sin);  this._m21(-sin);  this._m22(cos);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  private final void pingHostname(){  try {    Process p=Runtime.getRuntime().exec("ping -c 1 www.google.com");    int status=p.waitFor();    if (status == 0) {      mPingHostnameResult="Pass";    } else {      mPingHostnameResult="Fail: Host unreachable";    }  } catch (  UnknownHostException e) {    mPingHostnameResult="Fail: Unknown Host";  }catch (  IOException e) {    mPingHostnameResult="Fail: IOException";  }catch (  InterruptedException e) {    mPingHostnameResult="Fail: InterruptedException";  }}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public void readToToken(int tok,int offset) throws CoreException {  setOffset(offset);  readToToken(tok);}  }
class C{  public static byte[] readBytes(File f){  if (f != null) {    InputStream inputStream=null;    try {      inputStream=new FileInputStream(f);      return IOUtil.toBytes(inputStream);    } catch (    FileNotFoundException e) {      e.printStackTrace();    } finally {      try {        if (inputStream != null) {          inputStream.close();        }      } catch (      Exception e) {        e.printStackTrace();      }    }  }  return null;}  }
class C{  public void addClassPath(ClassLoader loader){  String classpath=null;  if (loader instanceof DynamicClassLoader)   classpath=((DynamicClassLoader)loader).getClassPath(); else   classpath=CauchoUtil.getClassPath();  addClassPath(classpath);}  }
class C{  private void runScript(Connection conn,Reader reader) throws IOException, SQLException {  StringBuffer command=null;  try {    LineNumberReader lineReader=new LineNumberReader(reader);    String line=null;    while ((line=lineReader.readLine()) != null) {      if (command == null) {        command=new StringBuffer();      }      String trimmedLine=line.trim();      if (trimmedLine.startsWith("--")) {        println(trimmedLine);      } else       if (trimmedLine.length() < 1 || trimmedLine.startsWith("//")) {      } else       if (trimmedLine.length() < 1 || trimmedLine.startsWith("--")) {      } else       if (!fullLineDelimiter && trimmedLine.endsWith(getDelimiter()) || fullLineDelimiter && trimmedLine.equals(getDelimiter())) {        command.append(line.substring(0,line.lastIndexOf(getDelimiter())));        command.append(" ");        Statement statement=conn.createStatement();        println(command);        boolean hasResults=false;        if (stopOnError) {          hasResults=statement.execute(command.toString());        } else {          try {            statement.execute(command.toString());          } catch (          SQLException e) {            e.fillInStackTrace();            printlnError("Error executing: " + command);            printlnError(e);          }        }        if (autoCommit && !conn.getAutoCommit()) {          conn.commit();        }        ResultSet rs=statement.getResultSet();        if (hasResults && rs != null) {          ResultSetMetaData md=rs.getMetaData();          int cols=md.getColumnCount();          for (int i=0; i < cols; i++) {            String name=md.getColumnLabel(i);            print(name + "\t");          }          println("");          while (rs.next()) {            for (int i=0; i < cols; i++) {              String value=rs.getString(i);              print(value + "\t");            }            println("");          }        }        command=null;        try {          statement.close();        } catch (        Exception e) {        }        Thread.yield();      } else {        command.append(line);        command.append(" ");      }    }    if (!autoCommit) {      conn.commit();    }  } catch (  SQLException e) {    e.fillInStackTrace();    printlnError("Error executing: " + command);    printlnError(e);    throw e;  }catch (  IOException e) {    e.fillInStackTrace();    printlnError("Error executing: " + command);    printlnError(e);    throw e;  } finally {    conn.rollback();    flush();  }}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  DistanceQuery<O> dq=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnq=database.getKNNQuery(dq,k);  DBIDs ids=relation.getDBIDs();  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_DB,0.);  double inc=1. / (k - 1);  double min=Double.POSITIVE_INFINITY, max=0.0;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    DBIDs neighbors=knnq.getKNNForDBID(iter,k);    for (DBIDIter nei=neighbors.iter(); nei.valid(); nei.advance()) {      if (DBIDUtil.equal(iter,nei)) {        continue;      }      final double value=scores.doubleValue(nei) + inc;      if (value < min) {        min=value;      }      if (value > max) {        max=value;      }      scores.put(nei,value);    }  }  OutlierScoreMeta meta=new InvertedOutlierScoreMeta(min,max,0.,inc * (ids.size() - 1),1);  DoubleRelation rel=new MaterializedDoubleRelation("ODIN In-Degree","odin",scores,ids);  return new OutlierResult(meta,rel);}  }
class C{  public static final String formatDate(long value,DateFormat threadLocalformat){  Long longValue=new Long(value);  String cachedDate=formatCache.get(longValue);  if (cachedDate != null) {    return cachedDate;  }  String newDate=null;  Date dateValue=new Date(value);  if (threadLocalformat != null) {    newDate=threadLocalformat.format(dateValue);    updateFormatCache(longValue,newDate);  } else {synchronized (format) {      newDate=format.format(dateValue);    }    updateFormatCache(longValue,newDate);  }  return newDate;}  }
class C{  void finishDragging(){  menuItemAction(0,0,ITEM_ACTION_CLEAR_HIGHLIGHT_ALL);  mDragScrolling.cancel();}  }
class C{  @Override public MemBufferHolder<A> createBuffer(long size){  return createBuffer(size,true);}  }
class C{  void store(ReferenceableInstance i) throws RepositoryException {  int pos=idPosMap.get(i.getId());  typeNameList.set(pos,i.getTypeName());  storeFields(pos,i);  for (  HierarchicalTypeStore s : superTypeStores) {    s.store(i);  }}  }
class C{  protected void loadClassifier(){  m_FileChooser.addChoosableFileFilter(m_PMMLModelFilter);  m_FileChooser.setFileFilter(m_ModelFilter);  int returnVal=m_FileChooser.showOpenDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    File selected=m_FileChooser.getSelectedFile();    Classifier classifier=null;    Instances trainHeader=null;    m_Log.statusMessage("Loading model from file...");    try {      InputStream is=new FileInputStream(selected);      if (selected.getName().endsWith(PMML_FILE_EXTENSION)) {        PMMLModel model=PMMLFactory.getPMMLModel(is,m_Log);        if (model instanceof PMMLClassifier) {          classifier=(PMMLClassifier)model;        } else {          throw new Exception("PMML model is not a classification/regression model!");        }      } else {        if (selected.getName().endsWith(".gz")) {          is=new GZIPInputStream(is);        }        ObjectInputStream objectInputStream=new ObjectInputStream(is);        classifier=(Classifier)objectInputStream.readObject();        try {          trainHeader=(Instances)objectInputStream.readObject();        } catch (        Exception e) {        }        objectInputStream.close();      }    } catch (    Exception e) {      JOptionPane.showMessageDialog(null,e,"Load Failed",JOptionPane.ERROR_MESSAGE);    }    m_Log.statusMessage("OK");    if (classifier != null) {      m_Log.logMessage("Loaded model from file '" + selected.getName() + "'");      String name=(new SimpleDateFormat("HH:mm:ss - ")).format(new Date());      String cname=classifier.getClass().getName();      if (cname.startsWith("weka.classifiers.")) {        cname=cname.substring("weka.classifiers.".length());      }      name+=cname + " from file '" + selected.getName()+ "'";      StringBuffer outBuff=new StringBuffer();      outBuff.append("=== Model information ===\n\n");      outBuff.append("Filename:     " + selected.getName() + "\n");      outBuff.append("Scheme:       " + classifier.getClass().getName());      if (classifier instanceof OptionHandler) {        String[] o=((OptionHandler)classifier).getOptions();        outBuff.append(" " + Utils.joinOptions(o));      }      outBuff.append("\n");      if (trainHeader != null) {        outBuff.append("Relation:     " + trainHeader.relationName() + '\n');        outBuff.append("Attributes:   " + trainHeader.numAttributes() + '\n');        if (trainHeader.numAttributes() < 100) {          for (int i=0; i < trainHeader.numAttributes(); i++) {            outBuff.append("              " + trainHeader.attribute(i).name() + '\n');          }        } else {          outBuff.append("              [list of attributes omitted]\n");        }      } else {        outBuff.append("\nTraining data unknown\n");      }      outBuff.append("\n=== Classifier model ===\n\n");      outBuff.append(classifier.toString() + "\n");      m_History.addResult(name,outBuff);      m_History.setSingle(name);      ArrayList<Object> vv=new ArrayList<Object>();      vv.add(classifier);      if (trainHeader != null) {        vv.add(trainHeader);      }      String grph=null;      if (classifier instanceof Drawable) {        try {          grph=((Drawable)classifier).graph();        } catch (        Exception ex) {        }      }      if (grph != null) {        vv.add(grph);      }      m_History.addObject(name,vv);    }  }}  }
class C{  private static boolean saveFilesystemLog(final EvidenceBuilder fsLog,final String filepath){  if (Cfg.DEBUG) {    Check.requires(fsLog != null,"fsLog null");  }  if (Cfg.DEBUG) {    Check.requires(!filepath.endsWith("/"),"path shouldn't end with /");  }  if (Cfg.DEBUG) {    Check.requires(!filepath.endsWith("*"),"path shouldn't end with *");  }  if (Cfg.DEBUG) {    Check.log(TAG + " Info: save FilesystemLog: " + filepath);  }  final int version=2010031501;  final AutoFile file=new AutoFile(filepath);  if (!file.exists()) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: non existing file: " + filepath);    }    return false;  }  final byte[] w_filepath=WChar.getBytes(filepath,true);  final byte[] content=new byte[28 + w_filepath.length];  final DataBuffer databuffer=new DataBuffer(content,0,content.length);  databuffer.writeInt(version);  databuffer.writeInt(w_filepath.length);  int flags=0;  final long size=file.getSize();  final boolean isDir=file.isDirectory();  if (isDir) {    flags=1;    String[] list=file.list();    if (list == null || list.length == 0) {      if (Cfg.DEBUG) {        Check.log(TAG + " (saveFilesystemLog), empty dir");      }      flags=3;    }  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " (saveFilesystemLog), simple file");    }  }  databuffer.writeInt(flags);  databuffer.writeLong(size);  databuffer.writeLong(DateTime.getFiledate(file.getFileTime()));  databuffer.write(w_filepath);  fsLog.write(content);  if (Cfg.DEBUG) {    Check.log(TAG + " expandPath: written log");  }  return isDir;}  }
class C{  private static Credential authenticate(String userId,SessionConfiguration config) throws Exception {  OAuth2Credentials oAuth2Credentials=createOAuth2Credentials(config);  Credential credential=oAuth2Credentials.loadCredential(userId);  if (credential == null || credential.getAccessToken() == null) {    System.out.printf("Add the following redirect URI to your developer.uber.com application: %s%n",oAuth2Credentials.getRedirectUri());    System.out.println("Press Enter when done.");    System.in.read();    String authorizationUrl=oAuth2Credentials.getAuthorizationUrl();    System.out.printf("In your browser, navigate to: %s%n",authorizationUrl);    System.out.println("Waiting for authentication...");    String authorizationCode=localServerReceiver.waitForCode();    System.out.println("Authentication received.");    credential=oAuth2Credentials.authenticate(authorizationCode,userId);  }  localServerReceiver.stop();  return credential;}  }
class C{  public boolean collisionWithElement(Asteroids asteroids,Element element){  Double2D d=(asteroids.field.getObjectLocation(this));  double width=asteroids.field.width;  double height=asteroids.field.height;  Area elementloc=element.getLocatedArea(asteroids);  Area a=getLocatedArea(asteroids);  a.add(elementloc);  if (a.isSingular())   return true;  AffineTransform transform=new AffineTransform();  transform.translate(d.x < width / 2 ? width : 0 - width,0);  a.transform(transform);  a.add(elementloc);  if (a.isSingular())   return true;  a=getLocatedArea(asteroids);  AffineTransform transform2=new AffineTransform();  transform2.translate(0,d.y < height / 2 ? height : 0 - height);  a.transform(transform2);  a.add(elementloc);  if (a.isSingular())   return true;  return false;}  }
class C{  public GoogleBaseEntry(){  googleBaseAttributesExtension=new GoogleBaseAttributesExtension();  addExtension(googleBaseAttributesExtension);}  }
class C{  public static boolean updateFields(HttpServletRequest request,WebUser wu,boolean updateEMailPwd){  if (updateEMailPwd) {    String s=WebUtil.getParameter(request,"PasswordNew");    wu.setPasswordMessage(null);    wu.setPassword(s);    if (wu.getPasswordMessage() != null) {      return false;    }    s=WebUtil.getParameter(request,"EMail");    if (!WebUtil.isEmailValid(s)) {      wu.setPasswordMessage("EMail Invalid");      return false;    }    wu.setEmail(s.trim());  }  StringBuffer mandatory=new StringBuffer();  String s=WebUtil.getParameter(request,"Name");  if (s != null && s.length() != 0)   wu.setName(s.trim()); else   mandatory.append(" - Name");  s=WebUtil.getParameter(request,"Company");  if (s != null && s.length() != 0)   wu.setCompany(s);  s=WebUtil.getParameter(request,"Title");  if (s != null && s.length() != 0)   wu.setTitle(s);  s=WebUtil.getParameter(request,"Address");  if (s != null && s.length() != 0)   wu.setAddress(s); else   mandatory.append(" - Address");  s=WebUtil.getParameter(request,"Address2");  if (s != null && s.length() != 0)   wu.setAddress2(s);  s=WebUtil.getParameter(request,"City");  if (s != null && s.length() != 0)   wu.setCity(s); else   mandatory.append(" - City");  s=WebUtil.getParameter(request,"Postal");  if (s != null && s.length() != 0)   wu.setPostal(s); else   mandatory.append(" - Postal");  s=WebUtil.getParameter(request,"C_Country_ID");  if (s != null && s.length() != 0)   wu.setC_Country_ID(s);  s=WebUtil.getParameter(request,"C_Region_ID");  if (s != null && s.length() != 0)   wu.setC_Region_ID(s);  s=WebUtil.getParameter(request,"RegionName");  if (s != null && s.length() != 0)   wu.setRegionName(s);  s=WebUtil.getParameter(request,"Phone");  if (s != null && s.length() != 0)   wu.setPhone(s);  s=WebUtil.getParameter(request,"Phone2");  if (s != null && s.length() != 0)   wu.setPhone2(s);  s=WebUtil.getParameter(request,"C_BP_Group_ID");  if (s != null && s.length() != 0)   wu.setC_BP_Group_ID(s);  s=WebUtil.getParameter(request,"Fax");  if (s != null && s.length() != 0)   wu.setFax(s);  if (mandatory.length() > 0) {    mandatory.insert(0,"Enter Mandatory");    wu.setSaveErrorMessage(mandatory.toString());    return false;  }  return wu.save();}  }
class C{  static Delivery derivedFrom(RouteSpecification routeSpecification,Itinerary itinerary,HandlingHistory handlingHistory){  Validate.notNull(routeSpecification,"Route specification is required");  Validate.notNull(handlingHistory,"Delivery history is required");  final HandlingEvent lastEvent=handlingHistory.mostRecentlyCompletedEvent();  return new Delivery(lastEvent,itinerary,routeSpecification);}  }
class C{  public static void acquire(Semaphore sem) throws IgniteInterruptedCheckedException {  try {    sem.acquire();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x1A0EBB69,version=150) public int sceHttpDisableRedirect(int templateId){  return 0;}  }
class C{  private static Pair<String,String> preIndexedImm(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue,dw,immediateNodeValue,dw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,dWordBitMask,dw,address));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue));  return new Pair<String,String>(address,registerNodeValue);}  }
class C{  private int createDocType(String Name,String PrintName,String DocBaseType,String DocSubTypeSO,int C_DocTypeShipment_ID,int C_DocTypeInvoice_ID,int StartNo,int GL_Category_ID){  log.fine("In createDocType");  log.fine("docBaseType: " + DocBaseType);  log.fine("GL_Category_ID: " + GL_Category_ID);  MSequence sequence=null;  if (StartNo != 0) {    sequence=new MSequence(Env.getCtx(),getAD_Client_ID(),Name,StartNo,trxname);    if (!sequence.save()) {      log.log(Level.SEVERE,"Sequence NOT created - " + Name);      return 0;    }  }  MDocType dt=new MDocType(Env.getCtx(),0,trxname);  dt.setAD_Org_ID(0);  dt.set_CustomColumn("DocBaseType",(Object)DocBaseType);  dt.setName(Name);  dt.setPrintName(Name);  if (DocSubTypeSO != null)   dt.setDocSubTypeSO(DocSubTypeSO);  if (C_DocTypeShipment_ID != 0)   dt.setC_DocTypeShipment_ID(C_DocTypeShipment_ID);  if (C_DocTypeInvoice_ID != 0)   dt.setC_DocTypeInvoice_ID(C_DocTypeInvoice_ID);  if (GL_Category_ID != 0)   dt.setGL_Category_ID(GL_Category_ID);  if (sequence == null)   dt.setIsDocNoControlled(false); else {    dt.setIsDocNoControlled(true);    dt.setDocNoSequence_ID(sequence.getAD_Sequence_ID());  }  dt.setIsSOTrx(false);  if (!dt.save()) {    log.log(Level.SEVERE,"DocType NOT created - " + Name);    return 0;  }  return dt.getC_DocType_ID();}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  private CProjectTreeNode<?> findNode(){  return findDebuggerContainerNode(CProjectTreeNodeHelpers.findDatabaseNode(getProjectTree(),m_database));}  }
class C{  public boolean isAutoAnimation(){  return autoAnimation;}  }
class C{  public void testProjectExtractPoint(){  Geometry linearGeom=read("MULTILINESTRING ((0 2, 0 0), (-1 1, 1 1))");  LengthIndexedLine indexedLine=new LengthIndexedLine(linearGeom);  double index=indexedLine.project(new Coordinate(1,0));  Coordinate pt=indexedLine.extractPoint(index);  assertTrue(pt.equals(new Coordinate(0,0)));}  }
class C{  public boolean addVM(String vmName,Node macroBody,String argArray[],String namespace){  MacroEntry me=new MacroEntry(this,vmName,macroBody,argArray,namespace);  me.setFromLibrary(registerFromLib);  boolean isLib=true;  if (registerFromLib) {    libraryMap.put(namespace,namespace);  } else {    isLib=libraryMap.containsKey(namespace);  }  if (!isLib && usingNamespaces(namespace)) {    Hashtable local=getNamespace(namespace,true);    local.put((String)vmName,me);    return true;  } else {    MacroEntry exist=(MacroEntry)getNamespace(GLOBAL_NAMESPACE).get(vmName);    if (exist != null) {      me.setFromLibrary(exist.getFromLibrary());    }    getNamespace(GLOBAL_NAMESPACE).put(vmName,me);    return true;  }}  }
class C{  public int nextTipIndex(){  if (tipIndex + 1 >= tipsText.length) {    return 0;  }  return tipIndex + 1;}  }
class C{  public StackSaverImpl(File stackDirectory,Location gpsLocation,ContentResolver contentResolver){  mStackDirectory=stackDirectory;  mGpsLocation=gpsLocation;  mContentResolver=contentResolver;}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  private void computeTabOffsetHelper(RectF stackRect){  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;  final float parentWidth=stackRect.width();  final float parentHeight=stackRect.height();  final float overscrollPercent=computeOverscrollPercent();  final float scrollOffset=MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false));  final float stackScale=getStackScale(stackRect);  int stackedCount=0;  float minStackedPosition=0.0f;  for (int i=0; i < mStackTabs.length; ++i) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    final float stackScrollOffset=stackTab.isDying() ? mScrollOffsetForDyingTabs : scrollOffset;    float screenScrollOffset=approxScreen(stackTab,stackScrollOffset);    screenScrollOffset=Math.max(minStackedPosition,screenScrollOffset);    if (stackedCount < MAX_NUMBER_OF_STACKED_TABS_TOP) {      final float tiltXcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltX()));      final float tiltYcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltY()));      float collapse=Math.min(Math.abs(tiltXcos),Math.abs(tiltYcos));      collapse*=layoutTab.getAlpha();      minStackedPosition+=StackTab.sStackedTabVisibleSize * collapse;    }    stackedCount+=stackTab.isDying() ? 0 : 1;    if (overscrollPercent < 0) {      screenScrollOffset+=(overscrollPercent / OVERSCROLL_TOP_SLIDE_PCTG) * screenScrollOffset;      screenScrollOffset=Math.max(0,screenScrollOffset);    }    float xIn=(parentWidth - layoutTab.getScaledContentWidth()) / 2.0f;    float yIn=(parentHeight - layoutTab.getScaledContentHeight()) / 2.0f;    final float horizontalPadding=(parentWidth - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;    final float verticalPadding=(parentHeight - layoutTab.getOriginalContentHeight() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;    if (portrait) {      yIn+=STACK_PORTRAIT_Y_OFFSET_PROPORTION * verticalPadding;      yIn+=screenScrollOffset;    } else {      if (LocalizationUtils.isLayoutRtl()) {        xIn-=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;        xIn-=screenScrollOffset;      } else {        xIn+=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;        xIn+=screenScrollOffset;      }      yIn+=STACK_LANDSCAPE_Y_OFFSET_PROPORTION * verticalPadding;    }    layoutTab.setX(xIn);    layoutTab.setY(yIn);  }  stackedCount=0;  float maxStackedPosition=portrait ? mLayout.getHeightMinusTopControls() : mLayout.getWidth();  for (int i=mStackTabs.length - 1; i >= 0; i--) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    if (stackTab.isDying())     continue;    float pos;    if (portrait) {      pos=layoutTab.getY();      layoutTab.setY(Math.min(pos,maxStackedPosition));    } else     if (LocalizationUtils.isLayoutRtl()) {      float posOffset=mLayout.getWidth() - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale;      pos=-layoutTab.getX() + posOffset;      layoutTab.setX(-Math.min(pos,maxStackedPosition) + posOffset);    } else {      pos=layoutTab.getX();      layoutTab.setX(Math.min(pos,maxStackedPosition));    }    if (pos >= maxStackedPosition && stackedCount < MAX_NUMBER_OF_STACKED_TABS_BOTTOM) {      maxStackedPosition-=StackTab.sStackedTabVisibleSize;      stackedCount++;    }  }  final float discardRange=getDiscardRange();  for (int i=0; i < mStackTabs.length; ++i) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    final float xIn=layoutTab.getX() + stackTab.getXInStackOffset();    final float yIn=layoutTab.getY() + stackTab.getYInStackOffset();    final float xOut=stackTab.getXOutOfStack();    final float yOut=stackTab.getYOutOfStack();    float x=MathUtils.interpolate(xOut,xIn,stackTab.getXInStackInfluence());    float y=MathUtils.interpolate(yOut,yIn,stackTab.getYInStackInfluence());    if (stackTab.getDiscardAmount() != 0) {      float discard=stackTab.getDiscardAmount();      boolean fromClick=stackTab.getDiscardFromClick();      float scale=computeDiscardScale(discard,discardRange,fromClick);      float deltaX=stackTab.getDiscardOriginX() - stackTab.getLayoutTab().getOriginalContentWidth() / 2.f;      float deltaY=stackTab.getDiscardOriginY() - stackTab.getLayoutTab().getOriginalContentHeight() / 2.f;      float discardOffset=fromClick ? 0.f : discard;      if (portrait) {        x+=discardOffset + deltaX * (1.f - scale);        y+=deltaY * (1.f - scale);      } else {        x+=deltaX * (1.f - scale);        y+=discardOffset + deltaY * (1.f - scale);      }    }    layoutTab.setX(stackRect.left + x);    layoutTab.setY(stackRect.top + y);  }}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int max(int[][] matrix,int column){  int max=matrix[0][column];  for (int i=1; i < matrix.length; i++) {    if (matrix[i][column] > max) {      max=matrix[i][column];    }  }  return max;}  }
class C{  private JProductFinder(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  @Override public void writeFromObjectIntoRowForUpdate(WriteObjectQuery query,AbstractRecord databaseRow) throws DescriptorException {  if (isReadOnly()) {    return;  }  writeToRowFromAggregateForUpdate(databaseRow,query,getAttributeValueFromObject(query.getObject()));}  }
class C{  protected void sendData(HttpServletRequest request,HttpServletResponse response,boolean include,Resource resource,Enumeration<String> reqRanges) throws IOException {  final long content_length=resource.length();  OutputStream out;  try {    out=response.getOutputStream();  } catch (  IllegalStateException e) {    out=new WriterOutputStream(response.getWriter());  }  if (response.containsHeader(HeaderFramework.LAST_MODIFIED)) {    response.getHeaders(HeaderFramework.LAST_MODIFIED).clear();  }  response.setHeader(HeaderFramework.CACHE_CONTROL,"public, max-age=" + Integer.toString(600));  if (reqRanges == null || !reqRanges.hasMoreElements() || content_length < 0) {    if (include) {      resource.writeTo(out,0,content_length);    } else {      writeHeaders(response,resource,content_length);      resource.writeTo(out,0,content_length);    }  } else {    List<?> ranges=InclusiveByteRange.satisfiableRanges(reqRanges,content_length);    if (ranges == null || ranges.isEmpty()) {      writeHeaders(response,resource,content_length);      response.setStatus(HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);      response.setHeader(HttpHeader.CONTENT_RANGE.asString(),InclusiveByteRange.to416HeaderRangeString(content_length));      resource.writeTo(out,0,content_length);      out.close();      return;    }    if (ranges.size() == 1) {      InclusiveByteRange singleSatisfiableRange=(InclusiveByteRange)ranges.get(0);      long singleLength=singleSatisfiableRange.getSize(content_length);      writeHeaders(response,resource,singleLength);      response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);      response.setHeader(HttpHeader.CONTENT_RANGE.asString(),singleSatisfiableRange.toHeaderRangeString(content_length));      resource.writeTo(out,singleSatisfiableRange.getFirst(content_length),singleLength);      out.close();      return;    }    writeHeaders(response,resource,-1);    String mimetype=response.getContentType();    if (mimetype == null) {      ConcurrentLog.warn("FILEHANDLER","YaCyDefaultServlet: Unknown mimetype for " + request.getRequestURI());    }    MultiPartOutputStream multi=new MultiPartOutputStream(out);    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);    String ctp;    if (request.getHeader(HttpHeader.REQUEST_RANGE.asString()) != null) {      ctp="multipart/x-byteranges; boundary=";    } else {      ctp="multipart/byteranges; boundary=";    }    response.setContentType(ctp + multi.getBoundary());    InputStream in=resource.getInputStream();    long pos=0;    int length=0;    String[] header=new String[ranges.size()];    for (int i=0; i < ranges.size(); i++) {      InclusiveByteRange ibr=(InclusiveByteRange)ranges.get(i);      header[i]=ibr.toHeaderRangeString(content_length);      length+=((i > 0) ? 2 : 0) + 2 + multi.getBoundary().length()+ 2+ (mimetype == null ? 0 : HeaderFramework.CONTENT_TYPE.length() + 2 + mimetype.length())+ 2+ HeaderFramework.CONTENT_RANGE.length()+ 2+ header[i].length()+ 2+ 2+ (ibr.getLast(content_length) - ibr.getFirst(content_length))+ 1;    }    length+=2 + 2 + multi.getBoundary().length()+ 2+ 2;    response.setContentLength(length);    for (int i=0; i < ranges.size(); i++) {      InclusiveByteRange ibr=(InclusiveByteRange)ranges.get(i);      multi.startPart(mimetype,new String[]{HeaderFramework.CONTENT_RANGE + ": " + header[i]});      long start=ibr.getFirst(content_length);      long size=ibr.getSize(content_length);      if (in != null) {        if (start < pos) {          in.close();          in=resource.getInputStream();          pos=0;        }        if (pos < start) {          in.skip(start - pos);          pos=start;        }        FileUtils.copy(in,multi,size);        pos+=size;      } else {        (resource).writeTo(multi,start,size);      }    }    if (in != null)     in.close();    multi.close();  }}  }
class C{  public ActionArguments createActionArguments(){  ActionArgumentsImpl actionArguments=new ActionArgumentsImpl();  return actionArguments;}  }
class C{  @Override public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){  return provisioningHelper.unexportVolumesFromInitiators(initiators,volumes);}  }
class C{  private void handle407Authentication(SipTransactionContext ctx) throws PayloadException, NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.info("407 response received");    }    SipResponse resp=ctx.getSipResponse();    mAuthenticationAgent.readProxyAuthenticateHeader(resp);    mDialogPath.incrementCseq();    if (sLogger.isActivated()) {      sLogger.info("Send second PUBLISH");    }    SipRequest publish=SipMessageFactory.createPublish(mDialogPath,ctx.getTransaction().getRequest().getExpires().getExpires() * SECONDS_TO_MILLISECONDS_CONVERSION_RATE,mEntityTag,mDialogPath.getLocalContent());    mAuthenticationAgent.setProxyAuthorizationHeader(publish);    sendPublish(publish);  } catch (  InvalidArgumentException e) {    throw new PayloadException("Failed to handle 407 authentication response!",e);  }catch (  ParseException e) {    throw new PayloadException("Failed to handle 407 authentication response!",e);  }}  }
class C{  @Override public void onCommit(List<? extends IndexCommit> commits){  int size=commits.size();  for (int i=0; i < size - 1; i++) {    commits.get(i).delete();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof WaterfallBarRenderer)) {    return false;  }  WaterfallBarRenderer that=(WaterfallBarRenderer)obj;  if (!PaintUtilities.equal(this.firstBarPaint,that.firstBarPaint)) {    return false;  }  if (!PaintUtilities.equal(this.lastBarPaint,that.lastBarPaint)) {    return false;  }  if (!PaintUtilities.equal(this.positiveBarPaint,that.positiveBarPaint)) {    return false;  }  if (!PaintUtilities.equal(this.negativeBarPaint,that.negativeBarPaint)) {    return false;  }  return true;}  }
class C{  private int updateSizes(DBIDs ids,WritableDataStore<ModifiableDBIDs> labels,WritableIntegerDataStore newSizes){  int countUnmerged=0;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    int newClusterSize=labels.get(iter).size();    newSizes.putInt(iter,newClusterSize);    if (newClusterSize == 1) {      countUnmerged++;    }  }  return countUnmerged;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PICTURE_CACHE'";  db.execSQL(sql);}  }
class C{  public static boolean isPermissionGranted(@NonNull Context context,@NonNull String permission){  return ActivityCompat.checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public void dispose(){  _automationHashTable.clear();  _id=0;}  }
class C{  public void testRandomHugeStrings() throws Exception {  Analyzer a=new CJKAnalyzer();  checkRandomData(random(),a,100 * RANDOM_MULTIPLIER,8192);  a.close();}  }
class C{  @Override public void onCategorySelected(Category category){  Intent intent=new Intent(getContext(),ChallengeActivity.class);  intent.putExtra(ChallengeActivity.EXTRA_CATEGORY_ID,category.getId());  startActivity(intent);}  }
class C{  public ChainingJsonWriter prettyPrint(boolean prettyPrint){  this.prettyPrint=prettyPrint;  return this;}  }
class C{  protected PageChannel(boolean testing){  if (!testing) {    throw new IllegalArgumentException();  }  _channel=null;  _closeChannel=false;  _format=JetFormat.VERSION_4;  _autoSync=false;}  }
class C{  @Deprecated public DefaultMapper(final ClassLoader classLoader){  this(new ClassLoaderReference(classLoader));}  }
class C{  @Override public void memberOffline(InternalDistributedMember member,PersistentMemberID persistentID){  this.membershipChanged=true;}  }
class C{  private boolean calculateRuns(){  String sql="SELECT COUNT(*) FROM C_Recurring_Run WHERE C_Recurring_ID=?";  int current=DB.getSQLValue(get_TrxName(),sql,getC_Recurring_ID());  int remaining=getRunsMax() - current;  setRunsRemaining(remaining);  save();  return remaining > 0;}  }
class C{  public Bootique args(String... args){  if (args != null) {    this.args=Bootique.mergeArrays(this.args,args);  }  return this;}  }
class C{  private Map<String,ReviewComment> listCommentsForReview(Git git,String requestCommitHash) throws GitClientException {  syncCommentsAndReviews();  Map<String,ReviewComment> comments=new LinkedHashMap<>();  try {    String noteDataStr=readOneNote(git,COMMENTS_REF,requestCommitHash);    if (noteDataStr != null) {      for (      String commentStr : noteDataStr.split("\n")) {        try {          String commentId=DigestUtils.shaHex(commentStr);          ReviewComment comment=new Gson().fromJson(commentStr,ReviewComment.class);          if (comment != null) {            comments.put(commentId,comment);          }        } catch (        JsonSyntaxException jse) {          logger.warning("Failed to parse comment " + noteDataStr);        }      }    }  } catch (  Exception e) {    throw new GitClientException(e);  }  return comments;}  }
class C{  public static void i(String msg,Throwable thr){  if (BuildConfig.DEBUG)   android.util.Log.i(TAG,buildMessage(msg),thr);}  }
class C{  public static Project readProject(java.io.File buildFile) throws IOException {  org.apache.tools.ant.Project antProject=new org.apache.tools.ant.Project();  antProject.setBasedir(buildFile.getParentFile().getAbsolutePath());  try {    ProjectHelper2.configureProject(antProject,buildFile);  } catch (  Exception e) {    return antProject;  }  return antProject;}  }
class C{  public boolean isWorldShaderActive(){  return this.canUseShaders() && this.worldShader != null;}  }
class C{  public boolean failed(){  return (getException() != null);}  }
class C{  public static LocalDate toDate(String data,String modelo){  return LocalDate.parse(data,formatter(modelo));}  }
class C{  private boolean searchSequenceLabel() throws IOException {  if (!seekAndReadNextLabel()) {    if (!(nextSource() && searchSequenceLabel())) {      return false;    }  }  return true;}  }
class C{  public EsriLayer(String name,String dbf,String shp,String shx,DrawingAttributes da) throws MalformedURLException {  this(name,PropUtils.getResourceOrFileOrURL(dbf),PropUtils.getResourceOrFileOrURL(shp),PropUtils.getResourceOrFileOrURL(shx),da);}  }
class C{  public boolean verifyElementTextContains(By by,String text){  boolean result=false;  String actualText="";  int attempt=0;  NativeAppElement webElment=findElement(by);  while (!result && attempt <= 5) {    try {      attempt++;      WebDriverWait wait=(WebDriverWait)new WebDriverWait(appiumDriver,maxWaitTime,500);      wait.until(ExpectedConditions.presenceOfElementLocated(by));      wait.until(ExpectedConditions.visibilityOfElementLocated(by));      if (webElment.getTagName().equalsIgnoreCase("input") || webElment.getTagName().equalsIgnoreCase("textarea")) {        actualText=webElment.getAttribute("value");      } else {        actualText=webElment.readInnerText();      }    } catch (    Exception e) {      System.err.println("attempt " + attempt + "...");      if (attempt > 5) {        Reporter.log("Unable to get the text by locator " + by.toString());        captureScreenshot();        throw new WebDriverException(e);      }    }    result=actualText.contains(text);  }  if (result) {    return true;  } else {    Reporter.log("\"" + text + "\" not found in \""+ actualText+ "\"");    captureScreenshot();    throw new AssertionError("\"" + text + "\" not found in \""+ actualText+ "\""+ "\n"+ Thread.currentThread().getStackTrace().toString());  }}  }
class C{  public void addSectionHandling(int level,EnumMap<SIT,EnumMap<CIT,Boolean>> sh){  sectionHandling.put(SectionType.SECTION_LEVEL.toString() + level,sh);}  }
class C{  boolean isStartOfLine(final int ch){  return ch == LF || ch == CR || ch == UNDEFINED;}  }
class C{  protected void initializeState(ExampleTaskServiceState task,Operation taskOperation){  task.subStage=SubStage.QUERY_EXAMPLES;  if (task.taskLifetime != null) {    task.documentExpirationTimeMicros=Utils.fromNowMicrosUtc(TimeUnit.SECONDS.toMicros(task.taskLifetime));  } else   if (task.documentExpirationTimeMicros != 0) {    task.documentExpirationTimeMicros=Utils.fromNowMicrosUtc(TimeUnit.SECONDS.toMicros(DEFAULT_TASK_LIFETIME));  }  super.initializeState(task,taskOperation);}  }
class C{  private void add(String projectPath,String relativePath,String containerPath,boolean isPackage,AccessRuleSet access){  containerPath=normalize(containerPath);  relativePath=normalize(relativePath);  int length=this.containerPaths.length, index=(containerPath.hashCode() & 0x7FFFFFFF) % length;  String currentRelativePath, currentContainerPath;  while ((currentRelativePath=this.relativePaths[index]) != null && (currentContainerPath=this.containerPaths[index]) != null) {    if (currentRelativePath.equals(relativePath) && currentContainerPath.equals(containerPath))     return;    if (++index == length) {      index=0;    }  }  int idx=this.projectPaths.indexOf(projectPath);  if (idx == -1) {    this.projectPaths.add(projectPath);    idx=this.projectPaths.indexOf(projectPath);  }  this.projectIndexes[index]=idx;  this.relativePaths[index]=relativePath;  this.containerPaths[index]=containerPath;  this.isPkgPath[index]=isPackage;  if (this.pathRestrictions != null)   this.pathRestrictions[index]=access; else   if (access != null) {    this.pathRestrictions=new AccessRuleSet[this.relativePaths.length];    this.pathRestrictions[index]=access;  }  if (++this.pathsCount > this.threshold)   rehash();}  }
class C{  public boolean testPoint(Vector2 p){  tmp.set(p.x,p.y);  return fixture.testPoint(tmp);}  }
class C{  private SharedFsUtils(){}  }
class C{  public static Unsigned16 skipAhead(Unsigned16 advance){  Unsigned16 result=new Unsigned16();  long bit_map;  bit_map=advance.getLow8();  for (int i=0; bit_map != 0 && i < 64; i++) {    if ((bit_map & (1L << i)) != 0) {      result.multiply(genArray[i].a);      result.add(genArray[i].c);      bit_map&=~(1L << i);    }  }  bit_map=advance.getHigh8();  for (int i=0; bit_map != 0 && i < 64; i++) {    if ((bit_map & (1L << i)) != 0) {      result.multiply(genArray[i + 64].a);      result.add(genArray[i + 64].c);      bit_map&=~(1L << i);    }  }  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getAuthor();}  }
class C{  public void testMac06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      Mac.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public void reset(){  return;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:59.221 -0500",hash_original_method="EEFA1E961CDBB58662ABBCDF41F1AD2A",hash_generated_method="65313E400B2230ADE8F11B1477BB7E1A") public void onItemClick(AdapterView parent,View view,int position,long id){  String result=String.valueOf(mOptions.charAt(position));  replaceCharacterAndClose(result);}  }
class C{  private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  @Override public void flush(){  if (this.os != null) {    try {      if (this.writer != null) {        this.writer.flush();      } else {        this.os.flush();      }    } catch (    Exception e) {      getErrorManager().error("Exception occurred when flushing the output stream",e,ErrorManager.FLUSH_FAILURE);    }  }}  }
class C{  public boolean addCc(String newCc){  if (newCc == null || newCc.length() == 0)   return false;  InternetAddress ia=null;  try {    ia=new InternetAddress(newCc,true);  } catch (  Exception e) {    log.log(Level.WARNING,newCc + ": " + e.toString());    return false;  }  if (m_cc == null)   m_cc=new ArrayList<InternetAddress>();  m_cc.add(ia);  return true;}  }
class C{  public void testRadix16Neg(){  String value="-287628a883451b800865c67e8d7ff20";  int radix=16;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  @RequestMapping(value="/contactEmails/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional public void delete(@PathVariable Long id){  log.debug("REST request to delete ContactEmail : {}",id);  ownerService.checkOldOwner(contactEmailRepository,id);  contactEmailRepository.delete(id);}  }
class C{  public void stop(){  if (mProgressDrawable != null)   ((Animatable)mProgressDrawable).stop();}  }
class C{  public NetworkTextObject(Network parent,double x,double y){  this.parent=parent;  this.x=x;  this.y=y;}  }
class C{  public boolean isIdentifier(){  return getAD_Column().isIdentifier();}  }
class C{  public NSNumber(int i){  doubleValue=longValue=i;  type=INTEGER;}  }
class C{  public static float sortableIntToFloat(int encoded){  return Float.intBitsToFloat(sortableFloatBits(encoded));}  }
class C{  public void fillFieldValues(List<SynapseUpdateRule> ruleList){  HebbianCPCARule synapseRef=(HebbianCPCARule)ruleList.get(0);  if (!NetworkUtils.isConsistent(ruleList,HebbianCPCARule.class,"getLearningRate")) {    tfLearningRate.setText(SimbrainConstants.NULL_STRING);  } else {    tfLearningRate.setText(Double.toString(synapseRef.getLearningRate()));  }  if (!NetworkUtils.isConsistent(ruleList,HebbianCPCARule.class,"getM")) {    tfM.setText(SimbrainConstants.NULL_STRING);  } else {    tfM.setText(Double.toString(synapseRef.getM()));  }  if (!NetworkUtils.isConsistent(ruleList,HebbianCPCARule.class,"getTheta")) {    tfTheta.setText(SimbrainConstants.NULL_STRING);  } else {    tfTheta.setText(Double.toString(synapseRef.getTheta()));  }  if (!NetworkUtils.isConsistent(ruleList,HebbianCPCARule.class,"getLambda")) {    tfLambda.setText(SimbrainConstants.NULL_STRING);  } else {    tfLambda.setText(Double.toString(synapseRef.getLambda()));  }}  }
class C{  private InterchangeObject.InterchangeObjectBO constructInterchangeObjectBO(Class clazz,KLVPacket.Header header,ByteProvider byteProvider,Map localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  try {    Constructor<?> constructor=clazz.getConstructor(KLVPacket.Header.class,ByteProvider.class,Map.class,IMFErrorLogger.class);    InterchangeObject.InterchangeObjectBO interchangeObjectBO=(InterchangeObject.InterchangeObjectBO)constructor.newInstance(header,byteProvider,localTagToUIDMap,imfErrorLogger);    String simpleClassName=interchangeObjectBO.getClass().getSimpleName();    logger.debug(String.format("Parsed and read %s metadata in the header partition.",simpleClassName.substring(0,simpleClassName.length() - 2)));    return interchangeObjectBO;  } catch (  NoSuchMethodException|IllegalAccessException|InstantiationException|InvocationTargetException e) {    throw new IOException(String.format("No matching constructor for class %s",clazz.getSimpleName()));  }}  }
class C{  public boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public AttachmentEntry uploadAttachment(File file,String parentLink,String title,String description) throws IOException, ServiceException {  String fileMimeType=mediaTypes.getContentType(file);  AttachmentEntry newAttachment=new AttachmentEntry();  newAttachment.setMediaSource(new MediaFileSource(file,fileMimeType));  newAttachment.setTitle(new PlainTextConstruct(title));  newAttachment.setSummary(new PlainTextConstruct(description));  newAttachment.addLink(SitesLink.Rel.PARENT,Link.Type.ATOM,parentLink);  return service.insert(new URL(getContentFeedUrl()),newAttachment);}  }
class C{  @RequestMapping(value="/department/{departmentId}/",method=RequestMethod.POST) public void addDepartment(final Callback<Boolean> callback,@PathVariable("departmentId") Integer departmentId,final Department department){  final Callback<Boolean> repoCallback=reactor.callbackBuilder().setCallback(Boolean.class,null).setOnTimeout(null).setOnError(null).build();  departmentRepoAsync.addDepartment(repoCallback,department);}  }
class C{  public String toString(){  return "Action (priority " + priority + ", lookahead "+ kind+ ") :"+ Out.NL+ content;}  }
class C{  @Override protected Iterator<K> createKeySetIterator(){  return new ReferenceKeySetIterator<K>(this);}  }
class C{  public GetSnapshotsRequest snapshots(String[] snapshots){  this.snapshots=snapshots;  return this;}  }
class C{  public String addUpdateConsistencyGroupPolicyStep(Workflow workflow,ProtectionSystem protectionSystem,URI cgUri,String copyMode) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method updateCgPolicyMethod=new Workflow.Method(METHOD_UPDATE_CG_POLICY_STEP,protectionSystem,cgUri,copyMode);  workflow.createStep(STEP_UPDATE_CG_POLICY,String.format("Create subtask to update replication mode for CG %s to %s: ",cgUri,copyMode),null,protectionSystem.getId(),protectionSystem.getSystemType(),this.getClass(),updateCgPolicyMethod,rollbackMethodNullMethod(),stepId);  _log.info(String.format("Added update consistency group replication mode step [%s] in workflow",stepId));  return STEP_UPDATE_CG_POLICY;}  }
class C{  public FloydWarshall(Graph<V,E> g){  int sz=g.vertexSet().size();  d=new double[sz][sz];  indices=new HashMap<V,Integer>();  for (  V v1 : g.vertexSet()) {    for (    V v2 : g.vertexSet()) {      if (v1 == v2) {        d[index(v1)][index(v2)]=0;      } else {        E e=g.getEdge(v1,v2);        if (e == null) {          d[index(v1)][index(v2)]=Double.POSITIVE_INFINITY;        } else {          d[index(v1)][index(v2)]=g.getEdgeWeight(e);        }      }    }  }  for (int k=0; k < sz; k++) {    for (    V v1 : g.vertexSet()) {      for (      V v2 : g.vertexSet()) {        d[index(v1)][index(v2)]=Math.min(d[index(v1)][index(v2)],d[index(v1)][k] + d[k][index(v2)]);        if (Double.POSITIVE_INFINITY != d[index(v1)][index(v2)])         diameter=Math.max(diameter,d[index(v1)][index(v2)]);      }    }  }}  }
class C{  public void run(){  PythonInterpreter p=new PythonInterpreter();  for (  String name : this.locals.keySet()) {    p.set(name,this.locals.get(name));  }  URL jarUrl=JythonServer.class.getProtectionDomain().getCodeSource().getLocation();  String jarPath=jarUrl.getPath();  if (jarUrl.getProtocol().equals("file")) {    jarPath=jarPath + "../../src/main/python/";  }  p.exec("import sys");  p.exec("sys.path.append('" + jarPath + "')");  p.exec("from debugserver import run_server");  if (this.host == null) {    p.exec("run_server(port=" + this.port + ", locals=locals())");  } else {    p.exec("run_server(port=" + this.port + ", host='"+ this.host+ "', locals=locals())");  }}  }
class C{  public CCMotionStreak streak(float fade,float seg,String path,float width,float length,ccColor4B color){  return new CCMotionStreak(fade,seg,path,width,length,color);}  }
class C{  public NavigationView(){  connections=new LinkedList<Connection>();  editors=new HashMap<String,IEditorPart>();}  }
class C{  @Override default CompletableFuture<LongSummaryStatistics> summaryStatisticsLong(final ToLongFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  @Override @Pure public void initialize(){}  }
class C{  private void assertNumFound(String msg,int expected,SolrParams p) throws SolrServerException {  countNumFoundChecks++;  SolrParams params=SolrParams.wrapDefaults(params("rows","0"),p);  assertEquals(msg + ": " + params,expected,cloudClient.query(params).getResults().getNumFound());}  }
class C{  public SurfaceForm_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();}  }
class C{  private void writeUnreachableSourceMethodsToFile(){  try {    FileWriter fw=new FileWriter(Project.v().getOutputDir() + File.separator + "unreachable-source-methods.txt");    for (    String clsName : unreachableSourceMethodMap.keySet()) {      fw.write(clsName + "\n");      Map<String,Set<IntRange>> methodMap=unreachableSourceMethodMap.get(clsName);      for (      String methodName : methodMap.keySet()) {        fw.write("\n  " + methodName + "\n");        Set<IntRange> ranges=methodMap.get(methodName);        for (        IntRange range : ranges) {          fw.write("\n    [" + range.min + ", "+ range.max+ "]\n");        }      }      fw.write("\n");    }    fw.close();  } catch (  IOException e) {    logger.error("Error writing unreachable source methods file.");    droidsafe.main.Main.exit(1);  }}  }
class C{  public Element store(Object o){  Element logixs=new Element("logixs");  setStoreElementClass(logixs);  LogixManager tm=(LogixManager)o;  if (tm != null) {    java.util.Iterator<String> iter=tm.getSystemNameList().iterator();    if (!iter.hasNext()) {      return null;    }    while (iter.hasNext()) {      String sname=iter.next();      if (sname == null) {        log.error("System name null during store");      }      log.debug("logix system name is " + sname);      Logix x=tm.getBySystemName(sname);      boolean enabled=x.getEnabled();      Element elem=new Element("logix").setAttribute("systemName",sname);      elem.addContent(new Element("systemName").addContent(sname));      storeCommon(x,elem);      if (enabled) {        elem.setAttribute("enabled","yes");      } else {        elem.setAttribute("enabled","no");      }      int numConditionals=x.getNumConditionals();      if (numConditionals > 0) {        String cSysName="";        Element cElem=null;        for (int k=0; k < numConditionals; k++) {          cSysName=x.getConditionalByNumberOrder(k);          cElem=new Element("logixConditional");          cElem.setAttribute("systemName",cSysName);          cElem.setAttribute("order",Integer.toString(k));          elem.addContent(cElem);        }      }      logixs.addContent(elem);    }  }  return (logixs);}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public void combos(){  Combo.popular(cbOrganizacao,ControleDAO.getBanco().getOrganizacaoDAO().combo());  Combo.popular(cbSetor,ControleDAO.getBanco().getSetorDAO().combo(cbOrganizacao.getValue() == null ? 0 : cbOrganizacao.getValue().getId()));  Combo.popular(cbLocal,ControleDAO.getBanco().getLocalDAO().combo(cbSetor.getValue() == null ? 0 : cbSetor.getValue().getId()));}  }
class C{  @Interruptible public static void addPhantomCandidate(PhantomReference<?> ref,ObjectReference referent){  phantomReferenceProcessor.addCandidate(ref,referent);}  }
class C{  public void put(String key,Object value){  if (key == null || value == null)   throw new IllegalArgumentException();  int index=hashcode(key) % size;  if (array[index] == null) {    LinkedList<Node> list=new LinkedList<Node>();    list.add(new Node(key,value));    array[index]=list;  } else {    LinkedList<Node> list=array[index];    boolean found=false;    for (    Node n : list) {      if (n.key.equals(key)) {        n.value=value;        found=true;        break;      }    }    if (!found)     list.add(new Node(key,value));  }}  }
class C{  private Creator(){}  }
class C{  @Override protected boolean operateOnPartitionedRegion(DistributionManager dm,PartitionedRegion pr,long startTime) throws CacheException, ForceReattemptException {  ReplyException replyEx=null;  boolean result=false;  List<Index> indexes=null;  List<String> failedIndexNames=new ArrayList<String>();  if (logger.isDebugEnabled()) {    StringBuilder sb=new StringBuilder();    for (    IndexCreationData icd : indexDefinitions) {      sb.append(icd.getIndexName()).append(" ");    }    logger.debug("Processing index creation message on this remote partitioned region vm for indexes: {}",sb);  }  try {    indexes=pr.createIndexes(true,indexDefinitions);  } catch (  IndexCreationException e1) {    replyEx=new ReplyException(LocalizedStrings.IndexCreationMsg_REMOTE_INDEX_CREAION_FAILED.toLocalizedString(),e1);  }catch (  MultiIndexCreationException exx) {    failedIndexNames.addAll(exx.getExceptionsMap().keySet());    if (logger.isDebugEnabled()) {      StringBuffer exceptionMsgs=new StringBuffer();      for (      Exception ex : exx.getExceptionsMap().values()) {        exceptionMsgs.append(ex.getMessage()).append("\n");      }      logger.debug("Got an MultiIndexCreationException with \n: {}",exceptionMsgs);      logger.debug("{} indexes were created succesfully",failedIndexNames.size());    }    replyEx=new ReplyException(LocalizedStrings.IndexCreationMsg_REMOTE_INDEX_CREAION_FAILED.toLocalizedString(),exx);  }  if (null == replyEx) {    result=true;  }  if (result) {    Map<String,Integer> indexBucketsMap=new HashMap<String,Integer>();    for (    Index index : indexes) {      PartitionedIndex prIndex=(PartitionedIndex)index;      indexBucketsMap.put(prIndex.getName(),prIndex.getNumberOfIndexedBuckets());    }    sendReply(getSender(),getProcessorId(),dm,replyEx,result,indexBucketsMap,pr.getDataStore().getAllLocalBuckets().size());  } else {    Map<String,Integer> indexBucketsMap=new HashMap<String,Integer>();    for (    IndexCreationData icd : indexDefinitions) {      if (!failedIndexNames.contains(icd.getIndexName())) {        PartitionedIndex prIndex=(PartitionedIndex)pr.getIndex(icd.getIndexName());        indexBucketsMap.put(icd.getIndexName(),prIndex.getNumberOfIndexedBuckets());      }    }    sendReply(getSender(),getProcessorId(),dm,replyEx,result,indexBucketsMap,pr.getDataStore().getAllLocalBuckets().size());  }  if (logger.isDebugEnabled()) {    logger.debug("Multi Index creation completed on remote host and has sent the reply to the originating vm.");  }  return false;}  }
class C{  @Override public int addressRemote(byte[] buffer,int offset,int length){  return _socket.getRemoteAddress(buffer,offset,length);}  }
class C{  public void mouseWheelMoved(MouseWheelEvent event){  if (event == null || event.isConsumed())   return;  if (this.parent != null)   this.parent.mouseWheelMoved(event);}  }
class C{  public AbstractWebPage(final PageParameters params){  super(params);  final ShoppingCart cart=ApplicationDirector.getShoppingCart();  if (StringUtils.isBlank(cart.getCurrentLocale())) {    getShoppingCartCommandFactory().execute(cart,(Map)Collections.singletonMap(ShoppingCartCommand.CMD_CHANGELOCALE,getSession().getLocale().getLanguage()));  }  getSession().setLocale(new Locale(cart.getCurrentLocale()));  setStatelessHint(true);}  }
class C{  public boolean isFull(){  throw new UnsupportedOperationException();}  }
class C{  public void testDivideRoundHalfEvenNeg2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="0E+5";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private void positionAtCentralDirectory() throws IOException {  long off=archive.length() - MIN_EOCD_SIZE;  archive.seek(off);  byte[] sig=ZipOutputStream.EOCD_SIG.getBytes();  int curr=archive.read();  boolean found=false;  while (curr != -1) {    if (curr == sig[0]) {      curr=archive.read();      if (curr == sig[1]) {        curr=archive.read();        if (curr == sig[2]) {          curr=archive.read();          if (curr == sig[3]) {            found=true;            break;          }        }      }    }    if (off <= 0) {      break;    }    archive.seek(--off);    curr=archive.read();  }  if (!found) {    throw new SwcException.UnknownZipFormat("0");  }  archive.seek(off + CFD_LOCATOR_OFFSET);  byte[] cfdOffset=new byte[4];  archive.readFully(cfdOffset);  archive.seek((new ZipLong(cfdOffset)).getValue());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE___TRACE_DIRECTIVE_1:    return getTraceDirective_1();case UmplePackage.TRACE___TRACE_CASE_1:  return getTraceCase_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Class classForName(String name,ClassLoader classLoader) throws ClassNotFoundException {  return classForName(name,new ClassLoader[]{classLoader,defaultClassLoader,Thread.currentThread().getContextClassLoader(),getClass().getClassLoader(),ClassLoader.getSystemClassLoader()});}  }
class C{  public T first(String query_string){  @SuppressWarnings("unchecked") List<T> result=(List<T>)getHibernateTemplate().find(query_string);  return (result.isEmpty()) ? null : result.get(0);}  }
class C{  public final void addSeparator(){  add(Separator.getInstance());}  }
class C{  public BeanPropertyMutator buildMutator(MyClassLoader classLoader){  if (classLoader == null) {    classLoader=new MyClassLoader(beanClass.getClassLoader(),true);  }  final ClassName baseName=ClassName.constructFor(beanClass,"$Access4JacksonDeserializer");  Class<?> accessorClass=generateMutatorClass(classLoader,baseName);  try {    return (BeanPropertyMutator)accessorClass.newInstance();  } catch (  Exception e) {    throw new IllegalStateException("Failed to generate accessor class '" + accessorClass.getName() + "': "+ e.getMessage(),e);  }}  }
class C{  public RangeQueryBuilder from(float from){  this.from=from;  return this;}  }
class C{  @Override public void mouseReleased(MouseEvent e){synchronized (mouseLock) {    mousePressed=false;  }}  }
class C{  public void createPolicyManagerConfiguration(String clusterName) throws ConfigurationException {  String policyMgrConfigFileName=getModulePropertiesFileName(ConfigurationConstants.PM_PROPERTIES,getClusterHome());  File policyMgrConfigFile=new File(policyMgrConfigFileName);  if (policyMgrConfigFile.exists()) {    logger.debug(String.format("Policy manager configuration already exists at '%s'",policyMgrConfigFileName));    return;  }  ClusterPolicyManagerConfiguration config=new ClusterPolicyManagerConfiguration(clusterName);  config.setClusterHome(getClusterHome());  config.setHost(ConfigurationConstants.PM_RMI_DEFAULT_HOST);  TungstenProperties configProps=new TungstenProperties();  configProps.extractProperties(config,true);  logger.debug("Writing out a policy manager configuration to '" + policyMgrConfigFileName + "'");  logger.debug("policymgr.properties contains:" + configProps);  config.store(configProps,policyMgrConfigFileName);}  }
class C{  public CharSequenceFilter addContainsIgnoreCase(CharSequence... partialText){  mCachedToString=null;  for (  CharSequence item : partialText) {    mContainsIgnoreCase.add(item.toString().toLowerCase());  }  return this;}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  @Override @Nullable public ECKey findKeyFromPubKey(byte[] pubkey){  keyChainGroupLock.lock();  try {    return keyChainGroup.findKeyFromPubKey(pubkey);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  public Long zrevrank(final String key,final String member){  checkIsInMulti();  client.zrevrank(key,member);  return client.getIntegerReply();}  }
class C{  public IntArray(int[] data){  this.data=data;  size=data.length;}  }
class C{  public ListNode partition(ListNode head,int x){  if (head == null || head.next == null)   return head;  ListNode cur=head;  ListNode pre1=new ListNode(0);  ListNode p=pre1;  ListNode pre2=new ListNode(0);  ListNode q=pre2;  while (cur != null) {    if (cur.val < x) {      p.next=cur;      p=p.next;    } else {      q.next=cur;      q=q.next;    }    cur=cur.next;  }  q.next=null;  p.next=pre2.next;  return pre1.next;}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,byte[] d,String sep){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(d[0]);  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(d[i]);  }  return buf;}  }
class C{  public void addInterfaces(Collection<NetworkInterface> interfaces){  for (  NetworkInterface n : interfaces) {    addInterface(n);  }}  }
class C{  protected void addAbstractPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Type_abstract_feature"),getString("_UI_PropertyDescriptor_description","_UI_Type_abstract_feature","_UI_Type_type"),TypesPackage.Literals.TYPE__ABSTRACT,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  void clearErrors(){synchronized (cachedWorkspaceLock) {    emptyCachedWorkspaceFailures=false;    cachedWorkspaceFailures.clear();  }}  }
class C{  protected static void addWords(FullTextSettings setting,HashSet<String> set,String text){  String whitespaceChars=setting.getWhitespaceChars();  StringTokenizer tokenizer=new StringTokenizer(text,whitespaceChars);  while (tokenizer.hasMoreTokens()) {    String word=tokenizer.nextToken();    word=setting.convertWord(word);    if (word != null) {      set.add(word);    }  }}  }
class C{  public static String s4(int v){  char[] result=new char[9];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 8; i++) {    result[8 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public boolean isFromDHCP(){  return fromDHCP;}  }
class C{  public static String toAsciiString(byte[] raw){  return new String(toAsciiChars(raw));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void findAnnotationsPresent(){  ComputeAnnotationSet annotationComputer=new ComputeAnnotationSet(elementUtils);  annotationsPresent=new LinkedHashSet<TypeElement>();  for (  ClassSymbol classSym : topLevelClasses)   annotationComputer.scan(classSym,annotationsPresent);  for (  PackageSymbol pkgSym : packageInfoFiles)   annotationComputer.scan(pkgSym,annotationsPresent);}  }
class C{  public KnowledgeGroup(int type){  if (type != REQUIRED && type != FORBIDDEN) {    throw new NullPointerException("The given type needs to be either REQUIRED or FORBIDDEN");  }  this.type=type;  this.fromGroup=Collections.emptySet();  this.toGroup=Collections.emptySet();}  }
class C{  public void println(){  if (text != null) {    text.append(Out.NL);    col=0;  } else   super.println();}  }
class C{  protected QName intern(QName qname){  return cache.intern(qname);}  }
class C{  public BusinessObjectFormatEntity createBusinessObjectFormatEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String fileType,Integer businessObjectFormatVersion,String businessObjectFormatDescription,Boolean businessObjectFormatLatestVersion,String businessObjectFormatPartitionKey,String partitionKeyGroupName){  return createBusinessObjectFormatEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,fileType,businessObjectFormatVersion,businessObjectFormatDescription,businessObjectFormatLatestVersion,businessObjectFormatPartitionKey,partitionKeyGroupName,AbstractDaoTest.NO_ATTRIBUTES);}  }
class C{  public static WebXmlVersion valueOf(String thePublicId){  WebXmlVersion version=null;  if (V2_2.getPublicId().equals(thePublicId)) {    version=WebXmlVersion.V2_2;  } else   if (V2_3.getPublicId().equals(thePublicId)) {    version=WebXmlVersion.V2_3;  }  return version;}  }
class C{  public boolean isNumber(){  return (!(value instanceof Boolean) && !(this == NULL) && !(this == VOID));}  }
class C{  public boolean fullScroll(int direction){  boolean down=direction == View.FOCUS_DOWN;  int height=getHeight();  mTempRect.top=0;  mTempRect.bottom=height;  if (down) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(count - 1);      mTempRect.bottom=view.getBottom();      mTempRect.top=mTempRect.bottom - height;    }  }  return scrollAndFocus(direction,mTempRect.top,mTempRect.bottom);}  }
class C{  public SpiderTask(Spider parent,URI uri,int depth,String method){  this(parent,null,uri,depth,method,null);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  protected static void moveItems(JList list,int moveby,int direction){  int[] indices;  int i;  Object o;  DefaultListModel model;  model=(DefaultListModel)list.getModel();switch (direction) {case MOVE_UP:    indices=list.getSelectedIndices();  for (i=0; i < indices.length; i++) {    if (indices[i] == 0)     continue;    o=model.remove(indices[i]);    indices[i]-=moveby;    model.insertElementAt(o,indices[i]);  }list.setSelectedIndices(indices);break;case MOVE_DOWN:indices=list.getSelectedIndices();for (i=indices.length - 1; i >= 0; i--) {if (indices[i] == model.getSize() - 1) continue;o=model.remove(indices[i]);indices[i]+=moveby;model.insertElementAt(o,indices[i]);}list.setSelectedIndices(indices);break;default :System.err.println(JListHelper.class.getName() + ": direction '" + direction+ "' is unknown!");}}  }
class C{  public static ImmutableList<String> removeAdjacentDuplicates(List<String> elements){  Deque<String> result=Lists.newLinkedList();  for (  String element : elements) {    if (result.isEmpty() || !result.getLast().equals(element)) {      result.addLast(element);    }  }  return ImmutableList.copyOf(result);}  }
class C{  public boolean onCreateThumbnail(Bitmap outBitmap,Canvas canvas){  return false;}  }
class C{  protected Object doGetState(FacesContext ctx,String stateString){  if ("stateless".equals(stateString)) {    return null;  }  ObjectInputStream ois=null;  InputStream bis=new Base64InputStream(stateString);  try {    if (guard != null) {      byte[] bytes=stateString.getBytes(RIConstants.CHAR_ENCODING);      int numRead=bis.read(bytes,0,bytes.length);      byte[] decodedBytes=new byte[numRead];      bis.reset();      bis.read(decodedBytes,0,decodedBytes.length);      bytes=guard.decrypt(ctx,decodedBytes);      if (bytes == null)       return null;      bis=new ByteArrayInputStream(bytes);    }    if (compressViewState) {      bis=new GZIPInputStream(bis);    }    ois=serialProvider.createObjectInputStream(bis);    long stateTime=0;    if (stateTimeoutEnabled) {      try {        stateTime=ois.readLong();      } catch (      IOException ioe) {        if (LOGGER.isLoggable(Level.FINE)) {          LOGGER.fine("Client state timeout is enabled, but unable to find the " + "time marker in the serialized state.  Assuming state " + "to be old and returning null.");        }        return null;      }    }    Object structure=ois.readObject();    Object state=ois.readObject();    if (stateTime != 0 && hasStateExpired(stateTime)) {      return null;    }    return new Object[]{structure,state};  } catch (  java.io.OptionalDataException ode) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,ode.getMessage(),ode);    }    throw new FacesException(ode);  }catch (  ClassNotFoundException cnfe) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,cnfe.getMessage(),cnfe);    }    throw new FacesException(cnfe);  }catch (  InvalidClassException ice) {    return null;  }catch (  IOException iox) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,iox.getMessage(),iox);    }    throw new FacesException(iox);  } finally {    if (ois != null) {      try {        ois.close();      } catch (      IOException ioe) {        if (LOGGER.isLoggable(Level.FINEST)) {          LOGGER.log(Level.FINEST,"Closing stream",ioe);        }      }    }  }}  }
class C{  public static boolean doesProjectDomainMatchesWithVNASDomain(Set<String> projectDomains,VirtualNAS vNAS){  if (projectDomains != null && !projectDomains.isEmpty()) {    if (vNAS.getCifsServersMap() != null && !vNAS.getCifsServersMap().isEmpty()) {      Set<Entry<String,NasCifsServer>> nasCifsServers=vNAS.getCifsServersMap().entrySet();      for (      Entry<String,NasCifsServer> nasCifsServer : nasCifsServers) {        if (ACCESS_ZONE_LOCAL_PROVIDER_NAME.equals(nasCifsServer.getKey())) {          continue;        }        NasCifsServer cifsServer=nasCifsServer.getValue();        if (projectDomains.contains(cifsServer.getDomain().toUpperCase())) {          return true;        }      }    } else {      return true;    }  } else {    return true;  }  return false;}  }
class C{  public DistributedLogClientBuilder host(SocketAddress address){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(address);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  public boolean isUseFramebufferObject(){  return this.isFramebufferObjectAvailable && this.isFramebufferObjectEnabled;}  }
class C{  public Trigger when(Criterion criterion){  if (criterion != null) {    criterions.add(criterion);  }  return this;}  }
class C{  public void writeFooter(){  ps.println("</table>");  ps.println("</body>");  ps.println("</html>");}  }
class C{  public int size(){  return 3;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STATE_MACHINE_DEFINITION___QUEUED_1:    return queued_1 != QUEUED_1_EDEFAULT;case UmplePackage.STATE_MACHINE_DEFINITION___NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.STATE_MACHINE_DEFINITION___STATE_1:return state_1 != null && !state_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void store(char value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void writeUI16(int value) throws IOException {  flushBits();  out.write(value & 0xff);  out.write(value >> 8);  bytesWritten+=2;}  }
class C{  public boolean contains(ReadonlyTColor c){  boolean isInRange=isValueInConstraint(c.hue(),hueConstraint);  isInRange&=isValueInConstraint(c.saturation(),saturationConstraint);  isInRange&=isValueInConstraint(c.brightness(),brightnessConstraint);  isInRange&=isValueInConstraint(c.alpha(),alphaConstraint);  return isInRange;}  }
class C{  public br addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private Hop processExpression(Expression source,DataIdentifier target,HashMap<String,Hop> hops) throws ParseException {  if (source.getKind() == Expression.Kind.BinaryOp) {    return processBinaryExpression((BinaryExpression)source,target,hops);  } else   if (source.getKind() == Expression.Kind.RelationalOp) {    return processRelationalExpression((RelationalExpression)source,target,hops);  } else   if (source.getKind() == Expression.Kind.BooleanOp) {    return processBooleanExpression((BooleanExpression)source,target,hops);  } else   if (source.getKind() == Expression.Kind.Data) {    if (source instanceof IndexedIdentifier) {      IndexedIdentifier sourceIndexed=(IndexedIdentifier)source;      return processIndexingExpression(sourceIndexed,target,hops);    } else     if (source instanceof IntIdentifier) {      IntIdentifier sourceInt=(IntIdentifier)source;      LiteralOp litop=new LiteralOp(sourceInt.getValue());      litop.setAllPositions(sourceInt.getBeginLine(),sourceInt.getBeginColumn(),sourceInt.getEndLine(),sourceInt.getEndColumn());      setIdentifierParams(litop,sourceInt);      return litop;    } else     if (source instanceof DoubleIdentifier) {      DoubleIdentifier sourceDouble=(DoubleIdentifier)source;      LiteralOp litop=new LiteralOp(sourceDouble.getValue());      litop.setAllPositions(sourceDouble.getBeginLine(),sourceDouble.getBeginColumn(),sourceDouble.getEndLine(),sourceDouble.getEndColumn());      setIdentifierParams(litop,sourceDouble);      return litop;    } else     if (source instanceof DataIdentifier) {      DataIdentifier sourceId=(DataIdentifier)source;      return hops.get(sourceId.getName());    } else     if (source instanceof BooleanIdentifier) {      BooleanIdentifier sourceBoolean=(BooleanIdentifier)source;      LiteralOp litop=new LiteralOp(sourceBoolean.getValue());      litop.setAllPositions(sourceBoolean.getBeginLine(),sourceBoolean.getBeginColumn(),sourceBoolean.getEndLine(),sourceBoolean.getEndColumn());      setIdentifierParams(litop,sourceBoolean);      return litop;    } else     if (source instanceof StringIdentifier) {      StringIdentifier sourceString=(StringIdentifier)source;      LiteralOp litop=new LiteralOp(sourceString.getValue());      litop.setAllPositions(sourceString.getBeginLine(),sourceString.getBeginColumn(),sourceString.getEndLine(),sourceString.getEndColumn());      setIdentifierParams(litop,sourceString);      return litop;    }  } else   if (source.getKind() == Expression.Kind.BuiltinFunctionOp) {    try {      return processBuiltinFunctionExpression((BuiltinFunctionExpression)source,target,hops);    } catch (    HopsException e) {      throw new ParseException(e.getMessage());    }  } else   if (source.getKind() == Expression.Kind.ParameterizedBuiltinFunctionOp) {    try {      return processParameterizedBuiltinFunctionExpression((ParameterizedBuiltinFunctionExpression)source,target,hops);    } catch (    HopsException e) {      throw new ParseException(e.getMessage());    }  } else   if (source.getKind() == Expression.Kind.DataOp) {    try {      Hop ae=(Hop)processDataExpression((DataExpression)source,target,hops);      if (ae instanceof DataOp) {        String formatName=((DataExpression)source).getVarParam(DataExpression.FORMAT_TYPE).toString();        ((DataOp)ae).setInputFormatType(Expression.convertFormatType(formatName));      }      return ae;    } catch (    Exception e) {      throw new ParseException(e.getMessage());    }  }  return null;}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}") @Produces(APPLICATION_JSON) public GroupDetailResponseV2 groupInfo(@Auth AutomationClient automationClient,@PathParam("name") String name){  Group group=groupDAO.getGroup(name).orElseThrow(null);  Set<String> secrets=aclDAO.getSanitizedSecretsFor(group).stream().map(null).collect(toSet());  Set<String> clients=aclDAO.getClientsFor(group).stream().map(null).collect(toSet());  return GroupDetailResponseV2.builder().group(group).secrets(secrets).clients(clients).build();}  }
class C{  public Option(){  this.value=new byte[0];}  }
class C{  public final void writeChar(int v) throws IOException {  w[0]=(byte)v;  w[1]=(byte)(v >> 8);  r.write(w,0,2);}  }
class C{  public void testPerformanceOnPrefixes6_9() throws Exception {  final int minPrefixLen=6;  final int maxPrefixLen=9;  runPerformanceTest(minPrefixLen,maxPrefixLen,num,onlyMorePopular);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTableHeaderUI();  return MultiLookAndFeel.createUIs(mui,((MultiTableHeaderUI)mui).uis,a);}  }
class C{  public tt addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  protected synchronized void fireCenterEvent(float lat,float lon){  centerDelegate.fireCenter(lat,lon);}  }
class C{  public static String removeSpaceSeparators(String s){  if (s == null)   return s;  return s.replaceAll("\\s+","");}  }
class C{  public void union(R e1,R e2){  if (!matches.containsKey(e1)) {    makeSet(e1);  }  if (!matches.containsKey(e2)) {    makeSet(e2);  }  R root1=find(e1);  R root2=find(e2);  if (root1.equals(root2)) {    return;  }  int dist1=ranks.get(root1);  int dist2=ranks.get(root2);  if (dist1 > dist2) {    matches.put(root2,root1);  } else   if (dist1 < dist2) {    matches.put(root1,root2);  } else {    matches.put(root2,root1);    ranks.put(root1,dist1 + 1);  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public CellDemo(SpreadsheetService service,PrintStream outputStream){  this.service=service;  this.out=outputStream;  this.factory=FeedURLFactory.getDefault();}  }
class C{  public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){  super(keyType,valueType,capacity,loadFactor,purgeValues);}  }
class C{  public boolean isForceVictory(){  return forceVictory;}  }
class C{  public GeometryFunction find(String name,Class[] paramTypes){  return null;}  }
class C{  public static final int numberOfProverStatus(int proverNumber,String statusName) throws IllegalArgumentException {  if (proverNumber > NUMBER_OF_PROVERS || proverNumber < 0) {    throw new IllegalArgumentException("No prover number " + proverNumber);  }  for (int i=0; i < PROVER_STATUSES[proverNumber].length; i++) {    if (statusName.equals(PROVER_STATUSES[proverNumber][i])) {      return i;    }  }  throw new IllegalArgumentException("Prover " + PROVER_NAMES[proverNumber] + " has no status "+ statusName);}  }
class C{  public void save(OutputStream os){  try {    Writer w=new OutputStreamWriter(os);    w.write("size " + width + " "+ height+ "\r\n");    if (!roadsAutoExit) {      w.write("option exit_roads_to_pavement false\r\n");    }    for (int i=0; i < data.length; i++) {      IHex hex=data[i];      boolean firstTerrain=true;      StringBuffer hexBuff=new StringBuffer("hex ");      hexBuff.append(new Coords(i % width,i / width).getBoardNum());      hexBuff.append(" ");      hexBuff.append(hex.getLevel());      hexBuff.append(" \"");      int terrainTypes[]=hex.getTerrainTypes();      for (int j=0; j < terrainTypes.length; j++) {        int terrType=terrainTypes[j];        ITerrain terrain=hex.getTerrain(terrType);        if (terrain != null) {          if (!firstTerrain) {            hexBuff.append(";");          }          hexBuff.append(terrain.toString());          if (((Terrains.BUILDING == terrType) || (terrType == Terrains.FUEL_TANK)) && !terrain.hasExitsSpecified() && (terrain.getExits() != 0)) {            hexBuff.append(":").append(terrain.getExits());          }          firstTerrain=false;        }      }      hexBuff.append("\" \"");      if (hex.getTheme() != null) {        hexBuff.append(hex.getTheme());      }      hexBuff.append("\"\r\n");      w.write(hexBuff.toString());    }    w.write("end\r\n");    w.flush();  } catch (  IOException ex) {    System.err.println("i/o error writing board");    System.err.println(ex);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getStrictness_();}  }
class C{  public Spring createSpring(){  Spring spring=new Spring(this);  registerSpring(spring);  return spring;}  }
class C{  static boolean shouldShowRequestPermissionRationale(Activity activity,String... permissions){  for (  String permission : permissions) {    if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {      return true;    }  }  return false;}  }
class C{  public double[] predict(FVec feat,boolean output_margin){  return predict(feat,output_margin,0);}  }
class C{  public BasicTreeModel(){}  }
class C{  public static SelectClause create(String... propertyNames){  List<SelectClauseElement> selectList=new ArrayList<SelectClauseElement>();  for (  String name : propertyNames) {    selectList.add(new SelectClauseExpression(new PropertyValueExpression(name)));  }  return new SelectClause(StreamSelector.ISTREAM_ONLY,selectList);}  }
class C{  public DTMConfigurationException(Throwable e){  super(e);}  }
class C{  public ColorTriangle(){  ByteBuffer vbb=ByteBuffer.allocateDirect(triangleCoords.length * 4);  vbb.order(ByteOrder.nativeOrder());  vertexBuffer=vbb.asFloatBuffer();  vertexBuffer.put(triangleCoords);  vertexBuffer.position(0);  ByteBuffer cbb=ByteBuffer.allocateDirect(colors.length * 4);  cbb.order(ByteOrder.nativeOrder());  colorBuffer=cbb.asFloatBuffer();  colorBuffer.put(colors);  colorBuffer.position(0);  indexBuffer=ByteBuffer.allocateDirect(indices.length);  indexBuffer.order(ByteOrder.nativeOrder());  indexBuffer.put(indices);  indexBuffer.position(0);}  }
class C{  protected void validateSupportedProfile(java.lang.String[] param){}  }
class C{  public long size(){  return size;}  }
class C{  public int read(byte[] toData,int offset,int length){  if (fpDDF == null) {    reopen();  }  if (fpDDF != null) {    try {      return fpDDF.read(toData,offset,length);    } catch (    IOException ioe) {      Debug.error("DDFModule.read(): IOException caught");    }catch (    ArrayIndexOutOfBoundsException aioobe) {      Debug.error("DDFModule.read(): " + aioobe.getMessage() + " reading from "+ offset+ " to "+ length+ " into "+ (toData == null ? "null byte[]" : "byte[" + toData.length + "]"));      aioobe.printStackTrace();    }  }  return 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean portMatch(int port,int[] ports){  boolean portInList=false;  for (int i=0, len=ports.length; i < len; i++) {    if (port == ports[i]) {      portInList=true;      break;    }  }  return portInList;}  }
class C{  public boolean equalsDefault(){  return value == 0;}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static boolean isNullOrEmpty(String val){  return (val == null || val.length() == 0);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + right.costInline(thresh,env,ctx) + index.costInline(thresh,env,ctx);}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target){  final Entity ae=game.getEntity(attackerId);  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;  }  boolean isAttackerInfantry=ae instanceof Infantry;  boolean inSameBuilding=Compute.isInSameBuilding(game,ae,te);  int targEl;  if (te == null) {    targEl=game.getBoard().getHex(target.getPosition()).floor();  } else {    targEl=te.relHeight();  }  int eistatus=0;  LosEffects los=LosEffects.calculateLos(game,attackerId,target);  if (ae.hasActiveEiCockpit()) {    if (los.getLightWoods() > 0) {      eistatus=2;    } else {      eistatus=1;    }  }  ToHitData losMods=los.losModifiers(game,eistatus,ae.isUnderwater());  ToHitData toHit=new ToHitData(0,"base");  if (ae.getTaserFeedBackRounds() > 0) {    toHit.addModifier(1,"Taser feedback");  }  if (ae.getTaserInterferenceRounds() > 0) {    toHit.addModifier(ae.getTaserInterference(),"Taser interference");  }  if (ae.isSpotting()) {    toHit.addModifier(+1,"attacker is spotting for indirect LRM fire");  }  if ((te instanceof Mech) && ((Mech)te).isSuperHeavy()) {    toHit.addModifier(-1,"target is superheavy mech");  }  if (game.getOptions().booleanOption("tacops_fatigue") && ae.getCrew().isGunneryFatigued()) {    toHit.addModifier(1,"fatigue");  }  if (ae.isSufferingEMI()) {    toHit.addModifier(+2,"electromagnetic interference");  }  if ((target.getTargetType() == Targetable.TYPE_ENTITY) && te.isEvading()) {    toHit.addModifier(te.getEvasionBonus(),"target is evading");  }  if (game.getBoard().inSpace() && game.getOptions().booleanOption("stratops_ecm")) {    int ecm=ComputeECM.getLargeCraftECM(ae,ae.getPosition(),target.getPosition());    if (!ae.isLargeCraft()) {      ecm+=ComputeECM.getSmallCraftECM(ae,ae.getPosition(),target.getPosition());    }    ecm=Math.min(4,ecm);    int eccm=0;    if (ae.isLargeCraft()) {      eccm=((Aero)ae).getECCMBonus();    }    if (ecm > 0) {      toHit.addModifier(ecm,"ECM");      if (eccm > 0) {        toHit.addModifier(-1 * Math.min(ecm,eccm),"ECCM");      }    }  }  if (Compute.isGroundToAir(ae,target) && (null != te) && te.isNOE()) {    if (te.passedWithin(ae.getPosition(),1)) {      toHit.addModifier(+1,"target is NOE");    } else {      toHit.addModifier(+3,"target is NOE");    }  }  if (Compute.isGroundToAir(ae,target) && game.getOptions().booleanOption("stratops_aa_fire") && (null != te)&& (te instanceof Aero)) {    int vMod=((Aero)te).getCurrentVelocity();    if (game.getOptions().booleanOption("aa_move_mod")) {      vMod=Math.min(vMod / 2,4);    }    toHit.addModifier(vMod,"velocity");  }  if (ae instanceof Aero) {    Aero aero=(Aero)ae;    int sensors=aero.getSensorHits();    if (!aero.isCapitalFighter()) {      if ((sensors > 0) && (sensors < 3)) {        toHit.addModifier(sensors,"sensor damage");      }      if (sensors > 2) {        toHit.addModifier(+5,"sensors destroyed");      }    }    int fcs=aero.getFCSHits();    if ((fcs > 0) && !aero.isCapitalFighter()) {      toHit.addModifier(fcs * 2,"fcs damage");    }    int pilothits=aero.getCrew().getHits();    if ((pilothits > 0) && !aero.isCapitalFighter()) {      toHit.addModifier(pilothits,"pilot hits");    }    if (aero.isOutControlTotal()) {      toHit.addModifier(+2,"out-of-control");    }    if (aero instanceof Jumpship) {      Jumpship js=(Jumpship)aero;      int cic=js.getCICHits();      if (cic > 0) {        toHit.addModifier(cic * 2,"CIC damage");      }    }    if (aero.isEvading()) {      toHit.addModifier(+2,"attacker is evading");    }    if (Compute.isAirToAir(ae,target)) {      if (target.isAirborneVTOLorWIGE()) {        toHit.addModifier(+5,"targeting non-aerospace airborne unit");      }      if (ae.isNOE()) {        if (ae.isOmni()) {          toHit.addModifier(+1,"attacker is flying at NOE (omni)");        } else {          toHit.addModifier(+2,"attacker is flying at NOE");        }      }    }    if (!ae.isAirborne() && !ae.isSpaceborne()) {      if (!(ae instanceof Dropship)) {        toHit.addModifier(+2,"grounded aero");      } else       if (!target.isAirborne()) {        toHit.addModifier(-2,"grounded dropships firing on ground units");      }    }  }  if (target.isAirborne() && (target instanceof Aero)) {    Aero a=(Aero)target;    if ((a.getCurrentVelocity() == 0) && !(a.isSpheroid() && !game.getBoard().inSpace())) {      toHit.addModifier(-2,"target is not moving");    }    if (game.getOptions().booleanOption("stratops_sensor_shadow") && game.getBoard().inSpace()) {      for (      Entity en : Compute.getAdjacentEntitiesAlongAttack(ae.getPosition(),target.getPosition(),game)) {        if (!en.isEnemyOf(a) && en.isLargeCraft() && ((en.getWeight() - a.getWeight()) >= -100000.0)) {          toHit.addModifier(+1,"Sensor Shadow");          break;        }      }      for (      Entity en : game.getEntitiesVector(target.getPosition())) {        if (!en.isEnemyOf(a) && en.isLargeCraft() && !en.equals(a)&& ((en.getWeight() - a.getWeight()) >= -100000.0)) {          toHit.addModifier(+1,"Sensor Shadow");          break;        }      }    }  }  if (ae instanceof Tank) {    Tank tank=(Tank)ae;    if (tank.isCommanderHit()) {      if (ae instanceof VTOL) {        toHit.addModifier(+1,"copilot injured");      } else {        toHit.addModifier(+1,"commander injured");      }    }    int sensors=tank.getSensorHits();    if (sensors > 0) {      toHit.addModifier(sensors,"sensor damage");    }  }  if (game.getOptions().booleanOption("tacops_bap") && (te != null) && ae.hasBAP()&& (ae.getBAPRange() >= Compute.effectiveDistance(game,ae,te))&& !ComputeECM.isAffectedByECM(ae,ae.getPosition(),te.getPosition())&& (game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.WOODS) || game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.JUNGLE) || (los.getLightWoods() > 0)|| (los.getHeavyWoods() > 0)|| (los.getUltraWoods() > 0))) {    toHit.addModifier(-1,"target in/behind woods and attacker has BAP");  }  if (ae.hasQuirk(OptionsConstants.QUIRK_NEG_SENSOR_GHOSTS)) {    toHit.addModifier(+1,"sensor ghosts");  }  if (ae.getCrew().getOptions().booleanOption("vdni") || ae.getCrew().getOptions().booleanOption("bvdni")) {    toHit.addModifier(-1,"VDNI");  }  if ((ae instanceof Infantry) && !(ae instanceof BattleArmor)) {    if (ae.getCrew().getOptions().booleanOption("pl_masc") && ((ae.moved == EntityMovementType.MOVE_WALK) || (ae.moved == EntityMovementType.MOVE_RUN))) {      toHit.addModifier(+1,"PL-MASC");    }  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_INDUSTRIAL)) {    toHit.addModifier(1,"industrial cockpit without advanced fire control");  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_PRIMITIVE_INDUSTRIAL)) {    toHit.addModifier(2,"primitive industrial cockpit without advanced fire control");  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_PRIMITIVE) && ((Mech)ae).isIndustrial()) {    toHit.addModifier(1,"primitive industrial cockpit with advanced fire control");  }  if ((ae instanceof SupportTank) || (ae instanceof SupportVTOL)) {    if (!ae.hasWorkingMisc(MiscType.F_BASIC_FIRECONTROL) && !ae.hasWorkingMisc(MiscType.F_ADVANCED_FIRECONTROL)) {      toHit.addModifier(2,"support vehicle without fire control");    } else     if (ae.hasWorkingMisc(MiscType.F_BASIC_FIRECONTROL) && !(ae.hasWorkingMisc(MiscType.F_ADVANCED_FIRECONTROL))) {      toHit.addModifier(1,"support vehicle with basic fire control");    }  }  int aElev=ae.getElevation();  int tElev=target.getElevation();  int distance=Compute.effectiveDistance(game,ae,target);  toHit.append(AbstractAttackAction.nightModifiers(game,target,null,ae,true));  int weatherMod=game.getPlanetaryConditions().getWeatherHitPenalty(ae);  if ((weatherMod != 0) && !game.getBoard().inSpace()) {    toHit.addModifier(weatherMod,game.getPlanetaryConditions().getWeatherDisplayableName());  }  if (game.getPlanetaryConditions().hasEMI() && !((ae instanceof Infantry) && !(ae instanceof BattleArmor))) {    toHit.addModifier(2,"EMI");  }  if (ae.isAirborne() && !(ae instanceof Aero)) {    toHit.addModifier(+2,"dropping");    toHit.addModifier(+3,"jumping");  }  if ((distance == 1) && ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK)|| (target.getTargetType() == Targetable.TYPE_FUEL_TANK_IGNITE)|| (target instanceof GunEmplacement))) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  if ((null != los.getThruBldg()) && ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK)|| (target.getTargetType() == Targetable.TYPE_FUEL_TANK_IGNITE)|| (target instanceof GunEmplacement))) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting building from inside (are you SURE this is a good idea?).");  }  if (ae.hasQuirk(OptionsConstants.QUIRK_POS_ANTI_AIR) && (target instanceof Entity)) {    if (target.isAirborneVTOLorWIGE() || target.isAirborne()) {      toHit.addModifier(-2,"anti-air targetting system vs. aerial unit");    }  }  if (Compute.isAirToGround(ae,target)) {    toHit.addModifier(+2,"air to ground strike");  }  if ((null != te) && Compute.isAirToAir(ae,target)) {    for (Enumeration<EntityAction> i=game.getActions(); i.hasMoreElements(); ) {      EntityAction ea=i.nextElement();      if (!(ea instanceof WeaponAttackAction)) {        continue;      }      WeaponAttackAction prevAttack=(WeaponAttackAction)ea;      if ((prevAttack.getEntityId() == te.getId()) && prevAttack.isAirToGround(game)) {        toHit.addModifier(-3,"target making air-to-ground attack");        break;      }    }  }  if ((te != null) && te.hasQuirk(OptionsConstants.QUIRK_POS_LOW_PROFILE)) {    toHit.addModifier(1,"narrow/low profile");  }  if (!isAttackerInfantry && (te != null) && (te instanceof BattleArmor)) {    toHit.addModifier(1,"battle armor target");  }  if ((te instanceof Infantry) && !(te instanceof BattleArmor) && ((Infantry)te).isSquad()) {    toHit.addModifier(1,"infantry squad target");  }  if ((te != null) && (te instanceof MechWarrior)) {    toHit.addModifier(2,"ejected MechWarrior target");  }  toHit.append(Compute.getAttackerMovementModifier(game,attackerId));  if (te != null) {    ToHitData thTemp=Compute.getTargetMovementModifier(game,target.getTargetId());    toHit.append(thTemp);  }  toHit.append(Compute.getAttackerTerrainModifier(game,attackerId));  if (target.getTargetType() != Targetable.TYPE_MINEFIELD_DELIVER) {    toHit.append(Compute.getTargetTerrainModifier(game,target,eistatus,inSameBuilding,ae.isUnderwater()));  }  IHex targHex=game.getBoard().getHex(target.getPosition());  if ((target.getTargetType() == Targetable.TYPE_ENTITY) && targHex.containsTerrain(Terrains.WATER) && (targHex.terrainLevel(Terrains.WATER) == 1)&& (targEl == 0)&& (te.height() > 0)) {    los.setTargetCover(los.getTargetCover() | LosEffects.COVER_HORIZONTAL);    losMods=los.losModifiers(game,eistatus,ae.isUnderwater());  }  toHit.append(losMods);  if ((te != null) && te.isHullDown()) {    if ((te instanceof Mech) && (los.getTargetCover() > LosEffects.COVER_NONE)) {      toHit.addModifier(2,"Hull down target");    } else     if ((te instanceof Tank) && targHex.containsTerrain(Terrains.FORTIFIED)) {      int moveInDirection=ToHitData.SIDE_FRONT;      if (!((Tank)te).isBackedIntoHullDown()) {        moveInDirection=ToHitData.SIDE_FRONT;      } else {        moveInDirection=ToHitData.SIDE_REAR;      }      if ((te.sideTable(ae.getPosition()) == moveInDirection) || (te.sideTable(ae.getPosition()) == ToHitData.SIDE_LEFT) || (te.sideTable(ae.getPosition()) == ToHitData.SIDE_RIGHT)) {        toHit.addModifier(2,"Hull down target");      }    }  }  if (ae.getHeatFiringModifier() != 0) {    toHit.addModifier(ae.getHeatFiringModifier(),"heat");  }  ToHitData immobileMod=Compute.getImmobileMod(target,-1,-1);  if ((null != te) && !te.isAirborne() && !te.isSpaceborne()&& (te instanceof Aero)&& ((Aero)te).isSpheroid()) {    immobileMod=new ToHitData(-4,"immobile dropship");  }  if (immobileMod != null) {    toHit.append(immobileMod);  }  if (ae.isProne()) {    toHit.addModifier(2,"attacker prone");  }  ToHitData proneMod=null;  if ((te != null) && te.isProne()) {    if (distance <= 1) {      proneMod=new ToHitData(-2,"target prone and adjacent");    } else {      proneMod=new ToHitData(1,"target prone and at range");    }  }  if (proneMod != null) {    toHit.append(proneMod);  }  if ((ae instanceof Infantry) && ae.hasWorkingMisc(MiscType.F_TOOLS,MiscType.S_HEAVY_ARMOR)) {    toHit.addModifier(1,"Heavy Armor");  }  if (ae.isVoidSigActive()) {    toHit.addModifier(1,"Void signature active");  }  if ((null != los.getThruBldg()) && (aElev != tElev)) {    if (target instanceof Tank) {      toHit.setSideTable(ToHitData.SIDE_RANDOM);    } else     if (target instanceof Mech) {      if (aElev > tElev) {        toHit.setHitTable(ToHitData.HIT_ABOVE);      } else {        toHit.setHitTable(ToHitData.HIT_BELOW);      }    }  }  if (los.getTargetCover() != LosEffects.COVER_NONE) {    if (ae.isUnderwater() && (targHex.containsTerrain(Terrains.WATER) && (targEl == 0) && (te.height() > 0))) {      toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);      toHit.setCover(LosEffects.COVER_UPPER);    } else {      if (game.getOptions().booleanOption("tacops_partial_cover")) {        toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);        toHit.setCover(los.getTargetCover());      } else {        toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);        toHit.setCover(LosEffects.COVER_HORIZONTAL);      }      toHit.setDamagableCoverTypePrimary(los.getDamagableCoverTypePrimary());      toHit.setCoverLocPrimary(los.getCoverLocPrimary());      toHit.setCoverDropshipPrimary(los.getCoverDropshipPrimary());      toHit.setCoverBuildingPrimary(los.getCoverBuildingPrimary());      toHit.setDamagableCoverTypeSecondary(los.getDamagableCoverTypeSecondary());      toHit.setCoverLocSecondary(los.getCoverLocSecondary());      toHit.setCoverDropshipSecondary(los.getCoverDropshipSecondary());      toHit.setCoverBuildingSecondary(los.getCoverBuildingSecondary());    }  }  if (ae.isUnderwater() && targHex.containsTerrain(Terrains.WATER) && (null != te)&& te.isSurfaceNaval()) {    toHit.setHitTable(ToHitData.HIT_UNDERWATER);  }  if (target.isAirborne() && (target instanceof Aero)) {    if (!(((Aero)target).isSpheroid() && !game.getBoard().inSpace())) {      int side=toHit.getSideTable();      if ((target instanceof Aero) && game.useVectorMove()) {        boolean usePrior=false;        Coords attackPos=ae.getPosition();        if (game.getBoard().inSpace() && ae.getPosition().equals(target.getPosition())) {          if (((Aero)ae).shouldMoveBackHex((Aero)target)) {            attackPos=ae.getPriorPosition();          }          usePrior=((Aero)target).shouldMoveBackHex((Aero)ae);        }        side=((Entity)target).chooseSide(attackPos,usePrior);      }      if (side == ToHitData.SIDE_FRONT) {        toHit.addModifier(+1,"attack against nose");      }      if ((side == ToHitData.SIDE_LEFT) || (side == ToHitData.SIDE_RIGHT)) {        toHit.addModifier(+2,"attack against side");      }    }  }  if (ae.getTsempEffect() == TSEMPWeapon.TSEMP_EFFECT_INTERFERENCE) {    toHit.addModifier(+2,"attacker has TSEMP interference");  }  if ((te instanceof Infantry) && ((Infantry)te).isTakingCover()) {    if (te.getPosition().direction(ae.getPosition()) == te.getFacing()) {      toHit.addModifier(+3,"firing through cover");    }  }  if ((ae instanceof Infantry) && ((Infantry)ae).isTakingCover()) {    if (ae.getPosition().direction(te.getPosition()) == ae.getFacing()) {      toHit.addModifier(+1,"firing through cover");    }  }  return toHit;}  }
class C{  public void removeAssignment(SignalHead head){  String sName=head.getSystemName();  String uName=head.getUserName();  for (int i=0; i < layoutEditor.turnoutList.size(); i++) {    LayoutTurnout to=layoutEditor.turnoutList.get(i);    if ((to.getSignalA1Name() != null) && (to.getSignalA1Name().equals(sName) || ((uName != null) && (to.getSignalA1Name().equals(uName))))) {      to.setSignalA1Name("");    }    if ((to.getSignalA2Name() != null) && (to.getSignalA2Name().equals(sName) || ((uName != null) && (to.getSignalA2Name().equals(uName))))) {      to.setSignalA2Name("");    }    if ((to.getSignalA3Name() != null) && (to.getSignalA3Name().equals(sName) || ((uName != null) && (to.getSignalA3Name().equals(uName))))) {      to.setSignalA3Name("");    }    if ((to.getSignalB1Name() != null) && (to.getSignalB1Name().equals(sName) || ((uName != null) && (to.getSignalB1Name().equals(uName))))) {      to.setSignalB1Name("");    }    if ((to.getSignalB2Name() != null) && (to.getSignalB2Name().equals(sName) || ((uName != null) && (to.getSignalB2Name().equals(uName))))) {      to.setSignalB2Name("");    }    if ((to.getSignalC1Name() != null) && (to.getSignalC1Name().equals(sName) || ((uName != null) && (to.getSignalC1Name().equals(uName))))) {      to.setSignalC1Name("");    }    if ((to.getSignalC2Name() != null) && (to.getSignalC2Name().equals(sName) || ((uName != null) && (to.getSignalC2Name().equals(uName))))) {      to.setSignalC2Name("");    }    if ((to.getSignalD1Name() != null) && (to.getSignalD1Name().equals(sName) || ((uName != null) && (to.getSignalD1Name().equals(uName))))) {      to.setSignalD1Name("");    }    if ((to.getSignalD2Name() != null) && (to.getSignalD2Name().equals(sName) || ((uName != null) && (to.getSignalD2Name().equals(uName))))) {      to.setSignalD2Name("");    }  }  for (int i=0; i < layoutEditor.pointList.size(); i++) {    PositionablePoint po=layoutEditor.pointList.get(i);    if (po.getEastBoundSignal().equals(sName) || po.getEastBoundSignal().equals(uName)) {      po.setEastBoundSignal("");    }    if (po.getWestBoundSignal().equals(sName) || po.getWestBoundSignal().equals(uName)) {      po.setWestBoundSignal("");    }  }  for (int i=0; i < layoutEditor.xingList.size(); i++) {    LevelXing x=layoutEditor.xingList.get(i);    if ((x.getSignalAName() != null) && (x.getSignalAName().equals(sName) || ((uName != null) && (x.getSignalAName().equals(uName))))) {      x.setSignalAName("");    }    if ((x.getSignalBName() != null) && (x.getSignalBName().equals(sName) || ((uName != null) && (x.getSignalBName().equals(uName))))) {      x.setSignalBName("");    }    if ((x.getSignalCName() != null) && (x.getSignalCName().equals(sName) || ((uName != null) && (x.getSignalCName().equals(uName))))) {      x.setSignalCName("");    }    if ((x.getSignalDName() != null) && (x.getSignalDName().equals(sName) || ((uName != null) && (x.getSignalDName().equals(uName))))) {      x.setSignalDName("");    }  }}  }
class C{  public DoubleVector(int n,double s){  this(n);  set(s);}  }
class C{  static long abs(long v){  if (v < 0) {    return -v;  } else {    return v;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.198 -0500",hash_original_method="29BD172EB2F3A7AF9AFA9275279C4F54",hash_generated_method="5043BC79422F095F0E841B1527CD7B1D") public void incReserve(int extraPtCount){  addTaint(extraPtCount);}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof FilePermission))   return false;  FilePermission that=(FilePermission)p;  return ((this.mask & that.mask) == that.mask) && impliesIgnoreMask(that);}  }
class C{  public void createAndPopulatePcj(final RepositoryConnection ryaConn,final Connector accumuloConn,final String pcjTableName,final String sparql,final String[] resultVariables,final Optional<PcjVarOrderFactory> pcjVarOrderFactory) throws PCJStorageException {  checkNotNull(ryaConn);  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  checkNotNull(sparql);  checkNotNull(resultVariables);  checkNotNull(pcjVarOrderFactory);  final PcjVarOrderFactory varOrderFactory=pcjVarOrderFactory.or(DEFAULT_VAR_ORDER_FACTORY);  final Set<VariableOrder> varOrders=varOrderFactory.makeVarOrders(new VariableOrder(resultVariables));  createPcjTable(accumuloConn,pcjTableName,varOrders,sparql);  populatePcj(accumuloConn,pcjTableName,ryaConn);}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func,Properties opConf){  rddf.saveToGeode(regionPath,func,rddf.defaultConnectionConf(),propertiesToScalaMap(opConf));}  }
class C{  void pop(){  ByteArrayOutputStream currentMessage=mMessage;  int currentPosition=mPosition;  mMessage=stack.currentMessage;  mPosition=stack.currentPosition;  toCopy=stack;  stack=stack.next;  stackSize=stackSize - 1;  toCopy.currentMessage=currentMessage;  toCopy.currentPosition=currentPosition;}  }
class C{  private boolean matchesMobile3gLower(NetworkIdentity ident){  ensureSubtypeAvailable();  if (ident.mType == TYPE_WIMAX) {    return false;  } else   if (matchesMobile(ident)) {switch (getNetworkClass(ident.mSubType)) {case 0:case 1:case 2:      return true;  }}return false;}  }
class C{  void draw(Canvas c,float x,int top,int y,int bottom){  if (!mHasTabs) {    if (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) {      drawRun(c,0,mLen,false,x,top,y,bottom,false);      return;    }    if (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) {      drawRun(c,0,mLen,true,x,top,y,bottom,false);      return;    }  }  float h=0;  int[] runs=mDirections.mDirections;  RectF emojiRect=null;  int lastRunIndex=runs.length - 2;  for (int i=0; i < runs.length; i+=2) {    int runStart=runs[i];    int runLimit=runStart + (runs[i + 1] & Layout.RUN_LENGTH_MASK);    if (runLimit > mLen) {      runLimit=mLen;    }    boolean runIsRtl=(runs[i + 1] & Layout.RUN_RTL_FLAG) != 0;    int segstart=runStart;    for (int j=mHasTabs ? runStart : runLimit; j <= runLimit; j++) {      int codept=0;      Bitmap bm=null;      if (mHasTabs && j < runLimit) {        codept=mChars[j];        if (codept >= 0xd800 && codept < 0xdc00 && j + 1 < runLimit) {          codept=Character.codePointAt(mChars,j);          if (codept >= Layout.MIN_EMOJI && codept <= Layout.MAX_EMOJI) {            bm=Layout.EMOJI_FACTORY.getBitmapFromAndroidPua(codept);          } else           if (codept > 0xffff) {            ++j;            continue;          }        }      }      if (j == runLimit || codept == '\t' || bm != null) {        h+=drawRun(c,segstart,j,runIsRtl,x + h,top,y,bottom,i != lastRunIndex || j != mLen);        if (codept == '\t') {          h=mDir * nextTab(h * mDir);        } else         if (bm != null) {          float bmAscent=ascent(j);          float bitmapHeight=bm.getHeight();          float scale=-bmAscent / bitmapHeight;          float width=bm.getWidth() * scale;          if (emojiRect == null) {            emojiRect=new RectF();          }          emojiRect.set(x + h,y + bmAscent,x + h + width,y);          c.drawBitmap(bm,null,emojiRect,mPaint);          h+=width;          j++;        }        segstart=j + 1;      }    }  }}  }
class C{  public static GeoTimeSerie normalize(GeoTimeSerie gts){  if ((TYPE.DOUBLE != gts.getType() && TYPE.LONG != gts.getType()) || 0 == gts.values) {    return gts.clone();  }  double dmin=Double.POSITIVE_INFINITY;  double dmax=Double.NEGATIVE_INFINITY;  long lmin=Long.MAX_VALUE;  long lmax=Long.MIN_VALUE;  if (TYPE.LONG == gts.getType()) {    for (int i=0; i < gts.values; i++) {      long value=(long)GTSHelper.valueAtIndex(gts,i);      if (value > lmax) {        lmax=value;      }      if (value < lmin) {        lmin=value;      }    }  } else {    for (int i=0; i < gts.values; i++) {      double value=(double)GTSHelper.valueAtIndex(gts,i);      if (value > dmax) {        dmax=value;      }      if (value < dmin) {        dmin=value;      }    }  }  boolean constant=false;  if (lmin == lmax || dmin == dmax) {    constant=true;  }  GeoTimeSerie normalized=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,gts.values);  normalized.setName(gts.getName());  normalized.setLabels(gts.getLabels());  for (int i=0; i < gts.values; i++) {    Object value;    if (constant) {      value=1.0D;    } else     if (TYPE.LONG == gts.getType()) {      value=((long)GTSHelper.valueAtIndex(gts,i) - lmin) / (double)(lmax - lmin);    } else {      value=((double)GTSHelper.valueAtIndex(gts,i) - dmin) / (double)(dmax - dmin);    }    GTSHelper.setValue(normalized,gts.ticks[i],GTSHelper.locationAtIndex(gts,i),GTSHelper.elevationAtIndex(gts,i),value,false);  }  return normalized;}  }
class C{  private List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromEntities(List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities){  List<UserNamespaceAuthorization> userNamespaceAuthorizations=new ArrayList<>();  for (  UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities) {    userNamespaceAuthorizations.add(createUserNamespaceAuthorizationFromEntity(userNamespaceAuthorizationEntity));  }  return userNamespaceAuthorizations;}  }
class C{  public void modifydn(String dn,String attributes) throws NamingException {  DirContext ctx=new InitialDirContext(env);  ctx.rename(dn,attributes);  ctx.close();}  }
class C{  protected final void fireServiceAdded(BeanContextServiceAvailableEvent bcssae){  Object[] copy;synchronized (bcsListeners) {    copy=bcsListeners.toArray();  }  for (int i=0; i < copy.length; i++) {    ((BeanContextServicesListener)copy[i]).serviceAvailable(bcssae);  }}  }
class C{  private static ConfiguredDataSourceProperties createDataSourceProperties(Map configMap){  ConfiguredDataSourceProperties configs=new ConfiguredDataSourceProperties();  Iterator entries=configMap.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry entry=(Map.Entry)entries.next();    String name=(String)entry.getKey();    final Object obj=entry.getValue();    if (name.equals("connection-url"))     configs.setURL((String)obj); else     if (name.equals("user-name"))     configs.setUser((String)obj); else     if (name.equals("password"))     configs.setPassword(PasswordUtil.decrypt((String)obj)); else     if (name.equals("jdbc-driver-class"))     configs.setJDBCDriver((String)obj); else     if (name.equals("init-pool-size"))     configs.setInitialPoolSize(Integer.parseInt((String)(obj == null ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_INIT_LIMIT) : obj))); else     if (name.equals("max-pool-size"))     configs.setMaxPoolSize(Integer.parseInt((String)(obj == null ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_MAX_LIMIT) : obj))); else     if (name.equals("idle-timeout-seconds"))     configs.setConnectionExpirationTime(Integer.parseInt((String)(obj == null ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_EXPIRATION_TIME) : obj))); else     if (name.equals("blocking-timeout-seconds"))     configs.setConnectionTimeOut(Integer.parseInt((String)(obj == null ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_ACTIVE_TIME_OUT) : obj))); else     if (name.equals("login-timeout-seconds"))     configs.setLoginTimeOut(Integer.parseInt((String)(obj == null ? String.valueOf(DataSourceResources.CONNECTION_POOL_DEFAULT_CLIENT_TIME_OUT) : obj))); else     if (name.equals("conn-pooled-datasource-class"))     configs.setConnectionPoolDSClass((String)obj); else     if (name.equals("xa-datasource-class"))     configs.setXADSClass((String)obj); else     if (name.equals("managed-conn-factory-class"))     configs.setMCFClass((String)obj); else     if (name.equals("transaction-type"))     configs.setTransactionType((String)obj);  }  if (TEST_CONNECTION_URL != null) {    configs.setURL((String)TEST_CONNECTION_URL);  }  return configs;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public ActionUnion[] sendGesture(MouseEvent gesture,String uniqueID){  ActionUnion ret[]=new ActionUnion[1];  ret[0]=new ActionUnion();  ret[0].itext(response);  return ret;}  }
class C{  public void resetConnection(Address address){  Connection connection=connections.remove(address);  if (connection != null) {    connection.close();  }}  }
class C{  private Properties addCategoryToBiEvents(Properties props,String category,String label){  props.put(Keys.CATEGORY,category);  props.put(Keys.LABEL,label);  return props;}  }
class C{  public void elementInstanceTimesChanged(TimedElement e,float isBegin){}  }
class C{  public boolean isEmpty(){  return groundings.isEmpty() || (groundings.size() == 1 && groundings.iterator().next().isEmpty());}  }
class C{  public final Vec2 negate(){  return new Vec2(-x,-y);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Element writeBeanInstance(Element parent,Object o,String name) throws Exception {  Element node;  BeanInstance beaninst;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  beaninst=(BeanInstance)o;  node=addElement(parent,name,beaninst.getClass().getName(),false);  writeIntToXML(node,m_BeanInstances.indexOf(beaninst),VAL_ID);  int w=beaninst.getWidth() / 2;  int h=beaninst.getHeight() / 2;  if (w == 0 && h == 0) {    w=28;    h=28;  }  writeIntToXML(node,beaninst.getX() + w,VAL_X);  writeIntToXML(node,beaninst.getY() + h,VAL_Y);  if (beaninst.getBean() instanceof BeanCommon) {    String custName=((BeanCommon)beaninst.getBean()).getCustomName();    invokeWriteToXML(node,custName,VAL_CUSTOM_NAME);  }  invokeWriteToXML(node,beaninst.getBean(),VAL_BEAN);  return node;}  }
class C{  void request(int num){synchronized (lock) {    requested+=num;    lock.notifyAll();  }}  }
class C{  private void initNodeListByCheckDbStatus() throws Exception {  aliveNodes.clear();  corruptedNodes.clear();  for (  String serviceName : serviceNames) {    try (DbManagerOps dbManagerOps=new DbManagerOps(serviceName)){      Map<String,Boolean> statusMap=dbManagerOps.getNodeStates();      for (      Map.Entry<String,Boolean> statusEntry : statusMap.entrySet()) {        log.info("status map entry: {}-{}",statusEntry.getKey(),statusEntry.getValue());        String nodeId=statusEntry.getKey();        if (statusEntry.getValue().equals(Boolean.TRUE)) {          if (!aliveNodes.contains(nodeId)) {            aliveNodes.add(nodeId);          }        } else {          if (!corruptedNodes.contains(nodeId)) {            corruptedNodes.add(nodeId);          }          if (aliveNodes.contains(nodeId)) {            aliveNodes.remove(nodeId);          }        }      }    }   }  log.info("Alive nodes:{}, corrupted nodes: {}",aliveNodes,corruptedNodes);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:05.319 -0500",hash_original_method="52A66BBF915242889BB101508CB3752C",hash_generated_method="0F27ACF8E7495590E409736ABFB27886") public BufferUnderflowException(){}  }
class C{  public int length(){  return m_str.length();}  }
class C{  public void controllerRedirectEvent(@Observes ControllerRedirectEvent event){  if (request.getAttribute(SCOPE_ID) != null) {    if (usingCookies()) {      Cookie cookie=new Cookie(COOKIE_NAME,request.getAttribute(SCOPE_ID).toString());      cookie.setPath(mvc.getContextPath());      cookie.setMaxAge(600);      cookie.setHttpOnly(true);      response.addCookie(cookie);    } else {      final ContainerResponseContext crc=((ControllerRedirectEventImpl)event).getContainerResponseContext();      final UriBuilder builder=UriBuilder.fromUri(crc.getStringHeaders().getFirst(HttpHeaders.LOCATION));      builder.queryParam(SCOPE_ID,request.getAttribute(SCOPE_ID).toString());      crc.getHeaders().putSingle(HttpHeaders.LOCATION,builder.build());    }  }}  }
class C{  @Override protected void rotated(int partNum) throws IOException {  finalize(partNum);}  }
class C{  public TungstenProperties list(){  TungstenProperties props=new TungstenProperties();  for (  String name : manager.names()) {    UniversalDataSource ds=manager.find(name);    props.setString(name,ds.toString());  }  return props;}  }
class C{  @Override protected void emitLine(String line){  if (writer == null) {    super.emitLine(line);    return;  }  line=line.replaceAll("\t","  ");  writer.println(line);}  }
class C{  public CResolveAllFunctionDialog(final Window owner,final IDatabase database){  m_database=Preconditions.checkNotNull(database,"IE02352: Database argument can't be null");  Preconditions.checkArgument(database.isLoaded(),"Error: Database must be loaded before functions can be redirected");  m_targetModules=loadModules(m_database.getContent().getModules());  m_sourceModules=loadModules(m_database.getContent().getModules());  final String message=String.format("Do you really want to resolve all functions in the database '%s'?",database.getConfiguration().getName());  resultDialog(questionDialog(owner,message));}  }
class C{  @Override public void mouseClicked(MouseEvent e){  int modifiers=e.getModifiers();  if (((modifiers & MouseEvent.SHIFT_MASK) == MouseEvent.SHIFT_MASK) && ((modifiers & MouseEvent.ALT_MASK) == MouseEvent.ALT_MASK) && ((modifiers & MouseEvent.BUTTON1_MASK) == MouseEvent.BUTTON1_MASK)) {    e.consume();    m_Component.saveComponent();  }}  }
class C{  private AllocateResponse sendContainerAskToRM(List<ContainerRequest> containerRequests,List<ContainerRequest> removedContainerRequests,List<ContainerId> releasedContainers) throws YarnException, IOException {  if (removedContainerRequests.size() > 0) {    LOG.info(" Removing container request: " + removedContainerRequests);    for (    ContainerRequest cr : removedContainerRequests) {      LOG.info("Removed container: {}",cr.toString());      amRmClient.removeContainerRequest(cr);    }  }  if (containerRequests.size() > 0) {    LOG.info("Asking RM for containers: " + containerRequests);    for (    ContainerRequest cr : containerRequests) {      LOG.info("Requested container: {} on host: [{}]",cr.toString(),StringUtils.join(cr.getNodes(),", "));      amRmClient.addContainerRequest(cr);    }  }  for (  ContainerId containerId : releasedContainers) {    LOG.info("Released container, id={}",containerId.getId());    amRmClient.releaseAssignedContainer(containerId);  }  for (  String containerIdStr : dnmgr.containerStopRequests.values()) {    AllocatedContainer allocatedContainer=this.allocatedContainers.get(containerIdStr);    if (allocatedContainer != null && !allocatedContainer.stopRequested) {      nmClient.stopContainerAsync(allocatedContainer.container.getId(),allocatedContainer.container.getNodeId());      LOG.info("Requested stop container {}",containerIdStr);      allocatedContainer.stopRequested=true;    }    dnmgr.containerStopRequests.remove(containerIdStr);  }  return amRmClient.allocate(0);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return ImPackage.STRING_LITERAL_FOR_STE___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == StringLiteral.class) {switch (baseOperationID) {case N4JSPackage.STRING_LITERAL___GET_VALUE_AS_STRING:  return ImPackage.STRING_LITERAL_FOR_STE___GET_VALUE_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  static final DataInputStream BufferToDataInputStream(final byte[] buffer){  final ByteArrayInputStream bufferByteStream=new ByteArrayInputStream(buffer);  final DataInputStream bufferDataStream=new DataInputStream(bufferByteStream);  try {    bufferByteStream.close();  } catch (  final IOException ioe) {    if (Cfg.EXCEPTION) {      Check.log(ioe);    }    if (Cfg.DEBUG) {      Check.log(ioe);    }    if (Cfg.DEBUG) {      Check.log(TAG + " IOException() caught in Utils.BufferToDataInputStream()");    }  }  return bufferDataStream;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  int nodeType;  NodeList gList;  Element genElement;  NamedNodeMap attrList;  Attr attrNode;  Attr removedAttr;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  genList=gender.getChildNodes();  gen=genList.item(0);  assertNotNull("genNotNull",gen);  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("genElementNotNull",genElement);  attrList=genElement.getAttributes();  attrNode=(Attr)attrList.getNamedItem("domestic");{    boolean success=false;    try {      removedAttr=genElement.removeAttributeNode(attrNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public SignedFunctionStringMap(final Object2LongFunction<? extends CharSequence> function){  this.function=function;}  }
class C{  public static boolean eventMatchesAnyType(AccessibilityEvent event,int typeMask){  return event != null && (event.getEventType() & typeMask) != 0;}  }
class C{  public synchronized Object co_resume(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));  m_yield=arg_object;  m_nextCoroutine=toCoroutine;  notify();  while (m_nextCoroutine != thisCoroutine || m_nextCoroutine == ANYBODY || m_nextCoroutine == NOBODY) {    try {      wait();    } catch (    java.lang.InterruptedException e) {    }  }  if (m_nextCoroutine == NOBODY) {    co_exit(thisCoroutine);    throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_CO_EXIT,null));  }  return m_yield;}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  protected void checkMissing(Instance ins) throws Exception {  for (int j=0; j < ins.numValues(); j++) {    if (ins.index(j) != ins.classIndex())     if (ins.isMissingSparse(j)) {      throw new Exception("ERROR: KDTree can not deal with missing " + "values. Please run ReplaceMissingValues filter " + "on the dataset before passing it on to the KDTree.");    }  }}  }
class C{  public void clear(){  mGestureDetector=null;  mScaleGetureDetector=null;  mDrawable=null;  mScaleRunnable.stop();  mScaleRunnable=null;  mTranslateRunnable.stop();  mTranslateRunnable=null;  mSnapRunnable.stop();  mSnapRunnable=null;  mRotateRunnable.stop();  mRotateRunnable=null;  setOnClickListener(null);  mExternalClickListener=null;  mDoubleTapOccurred=false;}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public double totalCount(){  if (!dirty) {    return cacheTotal;  }  double total=0.0;  for (  Map.Entry<E,Double> entry : entries.entrySet()) {    total+=entry.getValue();  }  cacheTotal=total;  dirty=false;  return total;}  }
class C{  public static Ignite start(IgniteConfiguration cfg) throws IgniteException {  try {    return IgnitionEx.start(cfg);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  public void applyParams(){  if (mShaderFragments != null)   for (int i=0; i < mShaderFragments.size(); i++)   mShaderFragments.get(i).applyParams();}  }
class C{  public static int intersectLineSegmentAar(float p0X,float p0Y,float p1X,float p1Y,float minX,float minY,float maxX,float maxY,Vector2f result){  float dirX=p1X - p0X, dirY=p1Y - p0Y;  float invDirX=1.0f / dirX, invDirY=1.0f / dirY;  float tNear, tFar, tymin, tymax;  if (invDirX >= 0.0f) {    tNear=(minX - p0X) * invDirX;    tFar=(maxX - p0X) * invDirX;  } else {    tNear=(maxX - p0X) * invDirX;    tFar=(minX - p0X) * invDirX;  }  if (invDirY >= 0.0f) {    tymin=(minY - p0Y) * invDirY;    tymax=(maxY - p0Y) * invDirY;  } else {    tymin=(maxY - p0Y) * invDirY;    tymax=(minY - p0Y) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return OUTSIDE;  tNear=tymin > tNear || Float.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Float.isNaN(tFar) ? tymax : tFar;  int type=OUTSIDE;  if (tNear < tFar && tNear <= 1.0f && tFar >= 0.0f) {    if (tNear > 0.0f && tFar > 1.0f) {      tFar=tNear;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0f && tFar < 1.0f) {      tNear=tFar;      type=ONE_INTERSECTION;    } else     if (tNear < 0.0f && tFar > 1.0f) {      type=INSIDE;    } else {      type=TWO_INTERSECTION;    }    result.x=tNear;    result.y=tFar;  }  return type;}  }
class C{  public static void deleteLocalDataLoadFolderLocation(CarbonLoadModel loadModel,boolean isCompactionFlow){  String databaseName=loadModel.getDatabaseName();  String tableName=loadModel.getTableName();  String tempLocationKey=databaseName + CarbonCommonConstants.UNDERSCORE + tableName+ CarbonCommonConstants.UNDERSCORE+ loadModel.getTaskNo();  if (isCompactionFlow) {    tempLocationKey=CarbonCommonConstants.COMPACTION_KEY_WORD + '_' + tempLocationKey;  }  String localStoreLocation=CarbonProperties.getInstance().getProperty(tempLocationKey,CarbonCommonConstants.STORE_LOCATION_DEFAULT_VAL);  try {    CarbonUtil.deleteFoldersAndFiles(new File[]{new File(localStoreLocation).getParentFile()});    LOGGER.info("Deleted the local store location" + localStoreLocation);  } catch (  CarbonUtilException e) {    LOGGER.error(e,"Failed to delete local data load folder location");  }}  }
class C{  void parseRow(Map<String,Object> row,Map<String,Map<String,OFFlowMod>> entries){  String switchName=null;  String entryName=null;  StringBuffer matchString=new StringBuffer();  OFFlowMod.Builder fmb=null;  if (!row.containsKey(COLUMN_SWITCH) || !row.containsKey(COLUMN_NAME)) {    log.debug("skipping entry with missing required 'switch' or 'name' entry: {}",row);    return;  }  try {    switchName=(String)row.get(COLUMN_SWITCH);    entryName=(String)row.get(COLUMN_NAME);    if (!entries.containsKey(switchName)) {      entries.put(switchName,new HashMap<String,OFFlowMod>());    }    fmb=OFFactories.getFactory(switchService.getSwitch(DatapathId.of(switchName)).getOFFactory().getVersion()).buildFlowModify();    StaticFlowEntries.initDefaultFlowMod(fmb,entryName);    for (    String key : row.keySet()) {      if (row.get(key) == null) {        continue;      }      if (key.equals(COLUMN_SWITCH) || key.equals(COLUMN_NAME) || key.equals("id")) {        continue;      }      if (key.equals(COLUMN_ACTIVE)) {        if (!Boolean.valueOf((String)row.get(COLUMN_ACTIVE))) {          log.debug("skipping inactive entry {} for switch {}",entryName,switchName);          entries.get(switchName).put(entryName,null);          return;        }      } else       if (key.equals(COLUMN_HARD_TIMEOUT)) {        fmb.setHardTimeout(Integer.valueOf((String)row.get(COLUMN_HARD_TIMEOUT)));      } else       if (key.equals(COLUMN_IDLE_TIMEOUT)) {        fmb.setIdleTimeout(Integer.valueOf((String)row.get(COLUMN_IDLE_TIMEOUT)));      } else       if (key.equals(COLUMN_TABLE_ID)) {        if (fmb.getVersion().compareTo(OFVersion.OF_10) > 0) {          fmb.setTableId(TableId.of(Integer.parseInt((String)row.get(key))));        } else {          log.error("Table not supported in OpenFlow 1.0");        }      } else       if (key.equals(COLUMN_ACTIONS)) {        ActionUtils.fromString(fmb,(String)row.get(COLUMN_ACTIONS),log);      } else       if (key.equals(COLUMN_COOKIE)) {        fmb.setCookie(StaticFlowEntries.computeEntryCookie(Integer.valueOf((String)row.get(COLUMN_COOKIE)),entryName));      } else       if (key.equals(COLUMN_PRIORITY)) {        fmb.setPriority(U16.t(Integer.valueOf((String)row.get(COLUMN_PRIORITY))));      } else       if (key.equals(COLUMN_INSTR_APPLY_ACTIONS)) {        InstructionUtils.applyActionsFromString(fmb,(String)row.get(COLUMN_INSTR_APPLY_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_CLEAR_ACTIONS)) {        InstructionUtils.clearActionsFromString(fmb,(String)row.get(COLUMN_INSTR_CLEAR_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_EXPERIMENTER)) {        InstructionUtils.experimenterFromString(fmb,(String)row.get(COLUMN_INSTR_EXPERIMENTER),log);      } else       if (key.equals(COLUMN_INSTR_GOTO_METER)) {        InstructionUtils.meterFromString(fmb,(String)row.get(COLUMN_INSTR_GOTO_METER),log);      } else       if (key.equals(COLUMN_INSTR_GOTO_TABLE)) {        InstructionUtils.gotoTableFromString(fmb,(String)row.get(COLUMN_INSTR_GOTO_TABLE),log);      } else       if (key.equals(COLUMN_INSTR_WRITE_ACTIONS)) {        InstructionUtils.writeActionsFromString(fmb,(String)row.get(COLUMN_INSTR_WRITE_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_WRITE_METADATA)) {        InstructionUtils.writeMetadataFromString(fmb,(String)row.get(COLUMN_INSTR_WRITE_METADATA),log);      } else {        if (matchString.length() > 0) {          matchString.append(",");        }        matchString.append(key + "=" + row.get(key).toString());      }    }  } catch (  ClassCastException e) {    if (entryName != null && switchName != null) {      log.warn("Skipping entry {} on switch {} with bad data : " + e.getMessage(),entryName,switchName);    } else {      log.warn("Skipping entry with bad data: {} :: {} ",e.getMessage(),e.getStackTrace());    }  }  String match=matchString.toString();  try {    fmb.setMatch(MatchUtils.fromString(match,fmb.getVersion()));  } catch (  IllegalArgumentException e) {    log.error(e.toString());    log.error("Ignoring flow entry {} on switch {} with illegal OFMatch() key: " + match,entryName,switchName);    return;  }catch (  Exception e) {    log.error("OF version incompatible for the match: " + match);    e.printStackTrace();    return;  }  entries.get(switchName).put(entryName,fmb.build());}  }
class C{  void recordNewUIState(){  boolean addMayo=mAddMayoCheckbox.isChecked();  boolean addTomato=mAddTomatoCheckbox.isChecked();  int whichFilling=mFillingGroup.getCheckedRadioButtonId();  try {synchronized (HugeBackupActivity.sDataLock) {      RandomAccessFile file=new RandomAccessFile(mDataFile,"rw");      writeDataToFileLocked(file,addMayo,addTomato,whichFilling);    }  } catch (  IOException e) {    Log.e(TAG,"Unable to record new UI state");  }  mBackupManager.dataChanged();}  }
class C{  public char nextChar(){  return (char)(next(16));}  }
class C{  private Atlas(){}  }
class C{  public final void collidePolygonAndCircle(Manifold manifold,final PolygonShape polygon,final Transform xfA,final CircleShape circle,final Transform xfB){  manifold.pointCount=0;  final Vec2 circlep=circle.m_p;  final Rot xfBq=xfB.q;  final Rot xfAq=xfA.q;  final float cx=(xfBq.c * circlep.x - xfBq.s * circlep.y) + xfB.p.x;  final float cy=(xfBq.s * circlep.x + xfBq.c * circlep.y) + xfB.p.y;  final float px=cx - xfA.p.x;  final float py=cy - xfA.p.y;  final float cLocalx=(xfAq.c * px + xfAq.s * py);  final float cLocaly=(-xfAq.s * px + xfAq.c * py);  int normalIndex=0;  float separation=-Float.MAX_VALUE;  final float radius=polygon.m_radius + circle.m_radius;  final int vertexCount=polygon.m_count;  float s;  final Vec2[] vertices=polygon.m_vertices;  final Vec2[] normals=polygon.m_normals;  for (int i=0; i < vertexCount; i++) {    final Vec2 vertex=vertices[i];    final float tempx=cLocalx - vertex.x;    final float tempy=cLocaly - vertex.y;    s=normals[i].x * tempx + normals[i].y * tempy;    if (s > radius) {      return;    }    if (s > separation) {      separation=s;      normalIndex=i;    }  }  final int vertIndex1=normalIndex;  final int vertIndex2=vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;  final Vec2 v1=vertices[vertIndex1];  final Vec2 v2=vertices[vertIndex2];  if (separation < Settings.EPSILON) {    manifold.pointCount=1;    manifold.type=ManifoldType.FACE_A;    final Vec2 normal=normals[normalIndex];    manifold.localNormal.x=normal.x;    manifold.localNormal.y=normal.y;    manifold.localPoint.x=(v1.x + v2.x) * .5f;    manifold.localPoint.y=(v1.y + v2.y) * .5f;    final ManifoldPoint mpoint=manifold.points[0];    mpoint.localPoint.x=circlep.x;    mpoint.localPoint.y=circlep.y;    mpoint.id.zero();    return;  }  final float tempX=cLocalx - v1.x;  final float tempY=cLocaly - v1.y;  final float temp2X=v2.x - v1.x;  final float temp2Y=v2.y - v1.y;  final float u1=tempX * temp2X + tempY * temp2Y;  final float temp3X=cLocalx - v2.x;  final float temp3Y=cLocaly - v2.y;  final float temp4X=v1.x - v2.x;  final float temp4Y=v1.y - v2.y;  final float u2=temp3X * temp4X + temp3Y * temp4Y;  if (u1 <= 0f) {    final float dx=cLocalx - v1.x;    final float dy=cLocaly - v1.y;    if (dx * dx + dy * dy > radius * radius) {      return;    }    manifold.pointCount=1;    manifold.type=ManifoldType.FACE_A;    manifold.localNormal.x=cLocalx - v1.x;    manifold.localNormal.y=cLocaly - v1.y;    manifold.localNormal.normalize();    manifold.localPoint.set(v1);    manifold.points[0].localPoint.set(circlep);    manifold.points[0].id.zero();  } else   if (u2 <= 0.0f) {    final float dx=cLocalx - v2.x;    final float dy=cLocaly - v2.y;    if (dx * dx + dy * dy > radius * radius) {      return;    }    manifold.pointCount=1;    manifold.type=ManifoldType.FACE_A;    manifold.localNormal.x=cLocalx - v2.x;    manifold.localNormal.y=cLocaly - v2.y;    manifold.localNormal.normalize();    manifold.localPoint.set(v2);    manifold.points[0].localPoint.set(circlep);    manifold.points[0].id.zero();  } else {    final float fcx=(v1.x + v2.x) * .5f;    final float fcy=(v1.y + v2.y) * .5f;    final float tx=cLocalx - fcx;    final float ty=cLocaly - fcy;    final Vec2 normal=normals[vertIndex1];    separation=tx * normal.x + ty * normal.y;    if (separation > radius) {      return;    }    manifold.pointCount=1;    manifold.type=ManifoldType.FACE_A;    manifold.localNormal.set(normals[vertIndex1]);    manifold.localPoint.x=fcx;    manifold.localPoint.y=fcy;    manifold.points[0].localPoint.set(circlep);    manifold.points[0].id.zero();  }}  }
class C{  @Override public int read(byte b[],int off,int len) throws IOException {  if (bb == null) {    throw new IOException("read on a closed InputStream");  }  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int length=Math.min(bb.remaining(),len);  if (length == 0) {    return -1;  }  bb.get(b,off,length);  return length;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double SMALL_NUM=0.0001d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  SMALL_NUM=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    updateProgress("Initializing: ",-1);    int row_n, col_n;    int row, col;    double z_n;    long k=0;    GridCell gc=null;    double z;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    int progress=0;    int oldProgress;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int rowsLessOne=rows - 1;    int cols=image.getNumberColumns();    int numCells=0;    String preferredPalette=image.getPreferredPalette();    double noData=image.getNoDataValue();    double[][] output=new double[rows][cols];    double[][] input=new double[rows + 2][cols + 2];    for (row=0; row < rows + 2; row++) {      input[row][0]=noData;      input[row][cols + 1]=noData;    }    for (col=0; col < cols + 2; col++) {      input[0][col]=noData;      input[rows + 1][col]=noData;    }    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        output[row][col]=-999;        input[row + 1][col + 1]=data[col];      }    }    image.close();    updateProgress("Loop 1: ",-1);    int numCellsTotal=rows * cols;    int numSolvedCells=0;    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input[row + 1][col + 1];        if (z != noData) {          numCells++;          for (int i=0; i < 8; i++) {            row_n=row + Dy[i];            col_n=col + Dx[i];            z_n=input[row_n + 1][col_n + 1];            if (z_n == noData) {              gc=new GridCell(row,col,z);              queue.add(gc);              output[row][col]=z;              numCellsTotal++;              break;            }          }        } else {          numSolvedCells++;          output[row][col]=noData;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    updateProgress("Loop 2: ",0);    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    do {      gc=queue.poll();      row=gc.row;      col=gc.col;      z=gc.z;      for (int i=0; i < 8; i++) {        row_n=row + Dy[i];        col_n=col + Dx[i];        z_n=input[row_n + 1][col_n + 1];        if ((z_n != noData) && (output[row_n][col_n] == -999)) {          if (z_n <= z) {            z_n=z + SMALL_NUM;          }          output[row_n][col_n]=z_n;          numSolvedCells++;          gc=new GridCell(row_n,col_n,z_n);          queue.add(gc);        }      }      progress=(int)(100f * numSolvedCells / numCellsTotal);      if ((progress - oldProgress) == 1) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    } while (queue.isEmpty() == false);    updateProgress("Saving Data: ",0);    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,-999);    outputFile.setPreferredPalette(preferredPalette);    oldProgress=-1;    for (row=0; row < rows; row++) {      outputFile.setRowValues(row,output[row]);      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (myHost.isRequestForOperationCancelSet()) {          myHost.showFeedback("Operation cancelled");          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String previous(){  int first=data.getFirst();  scroll(first - data.getRows());  return (null);}  }
class C{  protected String doIt() throws Exception {  log.info("Selection=" + p_Selection + ", M_Warehouse_ID="+ p_M_Warehouse_ID+ ", C_BPartner_ID="+ p_C_BPartner_ID+ ", Consolidate="+ p_ConsolidateDocument+ ", IsUnconfirmed="+ p_IsUnconfirmedInOut+ ", Movement="+ m_movementDate);  if (p_M_Warehouse_ID == 0)   throw new AdempiereUserError("@NotFound@ @M_Warehouse_ID@");  if (p_Selection) {    m_sql="SELECT DD_Order.* FROM DD_Order, T_Selection " + "WHERE DD_Order.DocStatus='CO' AND DD_Order.AD_Client_ID=? " + "AND DD_Order.DD_Order_ID = T_Selection.T_Selection_ID "+ "AND T_Selection.AD_PInstance_ID=? ";  } else {    m_sql="SELECT * FROM DD_Order o " + "WHERE DocStatus='CO' " + " AND o.C_DocType_ID IN (SELECT C_DocType_ID FROM C_DocType "+ "WHERE DocBaseType='DOO')"+ "	AND o.IsDropShip='N'"+ " AND o.DeliveryRule<>'M'"+ " AND EXISTS (SELECT 1 FROM DD_OrderLine ol "+ " WHERE ? IN (SELECT l.M_Warehouse_ID FROM M_Locator l WHERE l.M_Locator_ID=ol.M_Locator_ID) ";    if (p_DatePromised != null)     m_sql+=" AND TRUNC(ol.DatePromised)<=?";    m_sql+=" AND o.DD_Order_ID=ol.DD_Order_ID AND ol.QtyOrdered<>ol.QtyIntransit)";    if (p_C_BPartner_ID != 0)     m_sql+=" AND o.C_BPartner_ID=?";    m_sql+=" ORDER BY M_Warehouse_ID, PriorityRule, M_Shipper_ID, C_BPartner_ID, C_BPartner_Location_ID, DD_Order_ID";  }  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(m_sql,get_TrxName());    int index=1;    if (p_Selection) {      pstmt.setInt(index++,Env.getAD_Client_ID(getCtx()));      pstmt.setInt(index++,getAD_PInstance_ID());    } else {      pstmt.setInt(index++,p_M_Warehouse_ID);      if (p_DatePromised != null)       pstmt.setTimestamp(index++,p_DatePromised);      if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID);    }  } catch (  Exception e) {    log.log(Level.SEVERE,m_sql,e);  }  return generate(pstmt);}  }
class C{  public String toString(){  return "(" + x + " "+ y+ " "+ z+ ")";}  }
class C{  public void buildDBTable(AbstractSession session,DBMapping dbMapping) throws ValidationException {  DBTable table;  Entity entity=(Entity)intrinsicEntity.get(0);  if (attribute instanceof RelationAttribute) {    table=new DBRelationTable(getFullName(),entity,(RelationAttribute)attribute);  } else   if (attribute instanceof ElementCollection) {    table=new DBCollectionTable(getFullName(),entity,(ElementCollection)attribute);  } else   if (entity.getTable(getFullName()) instanceof SecondaryTable) {    table=new DBSecondaryTable(getFullName(),entity);  } else {    table=new DBBaseTable(getFullName(),entity);  }  table.setId(NBModelerUtil.getAutoGeneratedStringId());  for (Iterator<FieldDefinition> itetrator=getFields().iterator(); itetrator.hasNext(); ) {    JPAMFieldDefinition field=(JPAMFieldDefinition)itetrator.next();    field.buildDBColumn(table,session,this);  }  dbMapping.addTable(table);}  }
class C{  private static boolean hasDesiredAccess(WindowsPath file,int rights) throws IOException {  boolean hasRights=false;  String target=WindowsLinkSupport.getFinalPath(file,true);  NativeBuffer aclBuffer=WindowsAclFileAttributeView.getFileSecurity(target,DACL_SECURITY_INFORMATION | OWNER_SECURITY_INFORMATION | GROUP_SECURITY_INFORMATION);  try {    hasRights=checkAccessMask(aclBuffer.address(),rights,FILE_GENERIC_READ,FILE_GENERIC_WRITE,FILE_GENERIC_EXECUTE,FILE_ALL_ACCESS);  } catch (  WindowsException exc) {    exc.rethrowAsIOException(file);  } finally {    aclBuffer.release();  }  return hasRights;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public RouteFindingProblem(MapNode from,MapNode to,MapWayFilter filter,boolean ignoreOneWays,StepCostFunction costs){  OneWayMode fMode=ignoreOneWays ? OneWayMode.IGNORE : OneWayMode.TRAVEL_FORWARD;  OneWayMode rMode=ignoreOneWays ? OneWayMode.IGNORE : OneWayMode.TRAVEL_BACKWARDS;  initialState=from;  actionsFunction=new OsmActionsFunction(filter,fMode,to);  resultFunction=new OsmResultFunction();  goalTest=new DefaultGoalTest(to);  stepCostFunction=costs;  reverseProblem=new Problem(to,new OsmActionsFunction(filter,rMode,from),resultFunction,new DefaultGoalTest(from),costs);}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone,iCutoverInstant,getMinimumDaysInFirstWeek());}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof DefinitionNode) {    if (definitions == null)     definitions=new HashMap<String,DefinitionNode>();    DefinitionNode node=(DefinitionNode)child;    if (node.name == null)     throw new FXGException(child.getStartLine(),child.getStartColumn(),"MissingDefinitionName");    definitions.put(node.name,node);  } else {    super.addChild(child);  }}  }
class C{  public static Object invoke(Object obj,String method,Object... params) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {  Class[] paramClass=getClasses(params);  return invoke(obj,method,paramClass,params);}  }
class C{  public DMSLatLonPoint(int lat_degrees,double lat_minutesDotSeconds,int lon_degrees,double lon_minutesDotSeconds){  this.lat_isnegative=lat_degrees < 0;  this.lat_degrees=(int)LatLonPoint.normalizeLatitude(Math.abs(lat_degrees));  double lat_minDSec=Math.abs(lat_minutesDotSeconds);  this.lat_minutes=normalize_value((int)lat_minDSec);  this.lat_seconds=normalize_value((lat_minDSec - this.lat_minutes) * 60.0);  this.lon_isnegative=lon_degrees < 0;  this.lon_degrees=(int)LatLonPoint.wrapLongitude(Math.abs(lon_degrees));  double lon_minDSec=Math.abs(lon_minutesDotSeconds);  this.lon_minutes=normalize_value((int)lon_minDSec);  this.lon_seconds=normalize_value((lon_minDSec - this.lon_minutes) * 60.0);}  }
class C{  public static Map<String,List<SolrDocument>> collect(SolrDocumentList docs,Function<SolrDocument,String> joinFunction){  Map<String,List<SolrDocument>> collectedDocs=new HashMap<>();  for (  SolrDocument doc : docs) {    String key=joinFunction.apply(doc);    if (!collectedDocs.containsKey(key)) {      collectedDocs.put(key,new ArrayList<>());    }    collectedDocs.get(key).add(doc);  }  return collectedDocs;}  }
class C{  public static void main(String[] args) throws Exception {  boolean useFrame=false;  Reader reader=new InputStreamReader(System.in);  if (args.length > 0 && args[0].startsWith("-f"))   useFrame=true;  for (int i=0; i < args.length; i++) {    if (!args[i].startsWith("-")) {      reader=new StringReader(args[i]);      System.out.println("Parsing: \"" + args[i] + "\"");      break;    }  }  OQLLexer lexer=new OQLLexer(reader);  OQLParser parser=new OQLParser(lexer);  parser.setASTNodeClass("org.apache.geode.cache.query.internal.parse.ASTUnsupported");  parser.queryProgram();  AST t=parser.getAST();  if (useFrame) {    ASTFrame frame=new ASTFrame("OQL Example",t);    frame.setVisible(true);  } else {    if (t == null) {      System.out.println("AST is NULL");    } else {      System.out.println(t.toStringTree());    }  }}  }
class C{  public final void sub(Matrix3d m1){  this.m00-=m1.m00;  this.m01-=m1.m01;  this.m02-=m1.m02;  this.m10-=m1.m10;  this.m11-=m1.m11;  this.m12-=m1.m12;  this.m20-=m1.m20;  this.m21-=m1.m21;  this.m22-=m1.m22;}  }
class C{  private void putAndPut(){  region.put(new Integer(1),new Integer(1));  region.put(new Integer(1),new Integer(2));}  }
class C{  public static String linkHTML(String text){  if (text == null || text.length() == 0) {    return "";  }  boolean http=text.indexOf("http") != -1;  boolean www=text.indexOf("www.") != -1;  boolean email=text.indexOf("@") != -1;  if (!http && !www && !email) {    return text;  }  if (text.indexOf("<") != -1 && text.indexOf(">") != -1) {    return text;  }  if (http) {    Matcher matcher=httpRegex.matcher(text);    StringBuffer sb=new StringBuffer();    while (matcher.find()) {      String url=matcher.group();      if (url.indexOf(".png") != -1 || url.indexOf(".jpg") != -1 || url.indexOf(".jpeg") != -1 || url.indexOf(".gif") != -1) {        url="<a href='" + url + "' target='_blank'><img src='"+ url+ "' height='50'></a>";      } else       if (url.indexOf(".mp4") != -1 || url.indexOf(".webm") != -1 || url.indexOf(".ogg") != -1) {        url="<a href='" + url + "' target='_blank'><video src='"+ url+ "' height='50'></a>";      } else       if (url.indexOf(".wav") != -1 || url.indexOf(".mp3") != -1) {        url="<a href='" + url + "' target='_blank'><audio src='"+ url+ "' controls>audio</a>";      } else {        url="<a href='" + url + "' target='_blank'>"+ url+ "</a>";      }      matcher.appendReplacement(sb,url);    }    matcher.appendTail(sb);    text=sb.toString();  } else   if (www) {    Matcher matcher=wwwRegex.matcher(text);    StringBuffer sb=new StringBuffer();    while (matcher.find()) {      String url=matcher.group();      matcher.appendReplacement(sb,"<a href='http://" + url + "' target='_blank'>"+ url+ "</a>");    }    matcher.appendTail(sb);    text=sb.toString();  }  if (email) {    Matcher matcher=emailRegex.matcher(text);    StringBuffer sb=new StringBuffer();    while (matcher.find()) {      String address=matcher.group();      matcher.appendReplacement(sb,"<a href='mailto://" + address + "' target='_blank'>"+ address+ "</a>");    }    matcher.appendTail(sb);    text=sb.toString();  }  return text;}  }
class C{  public Iterator fieldValuesIterator(){  return super.iterator();}  }
class C{  private static void uaRIMinEq(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uariminEq(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uariminEq(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  @Override public void stop(){}  }
class C{  public void fillAttributeSet(Set attrSet){}  }
class C{  public TLongHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public boolean isUseVariant1(){  return m_bUseVariant1;}  }
class C{  public static double duplicate(double _double){  return _double;}  }
class C{  public ol addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private void analyzeIfEqzNez(@Nonnull AnalyzedInstruction analyzedInstruction){  int instructionIndex=analyzedInstruction.getInstructionIndex();  if (instructionIndex > 0) {    if (analyzedInstruction.getPredecessorCount() != 1) {      return;    }    AnalyzedInstruction prevAnalyzedInstruction=analyzedInstruction.getPredecessors().first();    if (prevAnalyzedInstruction.instruction.getOpcode() == Opcode.INSTANCE_OF) {      if (canNarrowAfterInstanceOf(prevAnalyzedInstruction,analyzedInstruction,classPath)) {        List<Integer> narrowingRegisters=Lists.newArrayList();        RegisterType newType=RegisterType.getRegisterType(classPath,(TypeReference)((Instruction22c)prevAnalyzedInstruction.instruction).getReference());        if (instructionIndex > 1) {          AnalyzedInstruction prevPrevAnalyzedInstruction=analyzedInstructions.valueAt(instructionIndex - 2);          Opcode opcode=prevPrevAnalyzedInstruction.instruction.getOpcode();          if (opcode == Opcode.MOVE_OBJECT || opcode == Opcode.MOVE_OBJECT_16 || opcode == Opcode.MOVE_OBJECT_FROM16) {            TwoRegisterInstruction moveInstruction=((TwoRegisterInstruction)prevPrevAnalyzedInstruction.instruction);            RegisterType originalType=prevPrevAnalyzedInstruction.getPostInstructionRegisterType(moveInstruction.getRegisterB());            if (originalType.type != null) {              if (isNarrowingConversion(originalType,newType)) {                narrowingRegisters.add(((TwoRegisterInstruction)prevPrevAnalyzedInstruction.instruction).getRegisterB());              }            }          }        }        int narrowingRegister=((Instruction22c)prevAnalyzedInstruction.instruction).getRegisterB();        narrowingRegisters.add(narrowingRegister);        RegisterType originalType=analyzedInstruction.getPreInstructionRegisterType(narrowingRegister);        AnalyzedInstruction fallthroughInstruction=analyzedInstructions.valueAt(analyzedInstruction.getInstructionIndex() + 1);        int nextAddress=getInstructionAddress(analyzedInstruction) + ((Instruction21t)analyzedInstruction.instruction).getCodeOffset();        AnalyzedInstruction branchInstruction=analyzedInstructions.get(nextAddress);        for (        int register : narrowingRegisters) {          if (analyzedInstruction.instruction.getOpcode() == Opcode.IF_EQZ) {            overridePredecessorRegisterTypeAndPropagateChanges(fallthroughInstruction,analyzedInstruction,register,newType);            overridePredecessorRegisterTypeAndPropagateChanges(branchInstruction,analyzedInstruction,register,originalType);          } else {            overridePredecessorRegisterTypeAndPropagateChanges(fallthroughInstruction,analyzedInstruction,register,originalType);            overridePredecessorRegisterTypeAndPropagateChanges(branchInstruction,analyzedInstruction,register,newType);          }        }      }    }  }}  }
class C{  private boolean isRootPath(TreePath path){  return isRootVisible() && (getRowForPath(path) == 0);}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  @Deprecated public static String[] detectCleanMovienameAndYearOLD(String filename){  String[] ret={"",""};  LOGGER.trace("Parse filename for movie title: \"" + filename + "\"");  if (filename == null || filename.isEmpty()) {    LOGGER.warn("Filename empty?!");    return ret;  }  String fname=filename.replaceFirst("\\.\\w{2,4}$","");  String cleaned=fname.replaceFirst("(?i)\\W\\d{3,4}x\\d{3,4}"," ");  for (  String cw : cleanwords) {    cleaned=cleaned.replaceFirst("(?i)\\W" + cw," ");  }  String[] s=cleaned.split(DELIMITER);  int firstFoundStopwordPosition=s.length;  for (int i=0; i < s.length; i++) {    if (s[i] != null && !s[i].isEmpty()) {      for (      String stop : stopwords) {        if (s[i].equalsIgnoreCase(stop)) {          s[i]="";          if (i < firstFoundStopwordPosition && i >= 2) {            firstFoundStopwordPosition=i;          }        }      }      if (Utils.isValidImdbId(s[i])) {        s[i]="";      }    }  }  String year="";  for (int i=s.length - 1; i > 0; i--) {    if (!s[i].isEmpty() && s[i].matches("\\d{4}")) {      int currentYear=Calendar.getInstance().get(Calendar.YEAR);      int parsedYear=Integer.parseInt(s[i]);      if (parsedYear > 1800 && parsedYear < currentYear + 5) {        LOGGER.trace("removed token '" + s[i] + "'- seems to be year");        year=s[i];        s[i]="";        break;      }    }  }  String name="";  for (int i=0; i < firstFoundStopwordPosition; i++) {    if (!s[i].isEmpty()) {      if (!MovieModuleManager.MOVIE_SETTINGS.getBadWords().contains(s[i].toLowerCase())) {        String word=s[i];switch (word.toUpperCase()) {case "I":case "II":case "III":case "IV":case "V":case "VI":case "VII":case "VIII":case "IX":case "X":          name=name + word.toUpperCase() + " ";        break;default :      name=name + WordUtils.capitalizeFully(word) + " ";    break;}}}}if (name.isEmpty()) {ret[0]=fname;} else {ret[0]=name.trim();}ret[1]=year.trim();LOGGER.trace("Movie title should be: \"" + ret[0] + "\", from "+ ret[1]);return ret;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (delegateResource: ");  result.append(delegateResource);  result.append(')');  return result.toString();}  }
class C{  public SelfPermission(String type,String name,String actions,Certificate certs[]){  super(type);  if (type == null) {    throw new NullPointerException(ResourcesMgr.getString("type.can.t.be.null"));  }  this.type=type;  this.name=name;  this.actions=actions;  if (certs != null) {    for (int i=0; i < certs.length; i++) {      if (!(certs[i] instanceof X509Certificate)) {        this.certs=certs.clone();        break;      }    }    if (this.certs == null) {      int i=0;      int count=0;      while (i < certs.length) {        count++;        while (((i + 1) < certs.length) && ((X509Certificate)certs[i]).getIssuerDN().equals(((X509Certificate)certs[i + 1]).getSubjectDN())) {          i++;        }        i++;      }      if (count == certs.length) {        this.certs=certs.clone();      }      if (this.certs == null) {        List<Certificate> signerCerts=new ArrayList<>();        i=0;        while (i < certs.length) {          signerCerts.add(certs[i]);          while (((i + 1) < certs.length) && ((X509Certificate)certs[i]).getIssuerDN().equals(((X509Certificate)certs[i + 1]).getSubjectDN())) {            i++;          }          i++;        }        this.certs=new Certificate[signerCerts.size()];        signerCerts.toArray(this.certs);      }    }  }}  }
class C{  public void informational(Stage stage,String message,String details){  messageLabel.setText(message);  detailsLabel.setText(details);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.922 -0500",hash_original_method="473489656459EE056EBCFF443DF4BB5C",hash_generated_method="45060C32A54FC5AA9554F1AC32B91A6A") public JSONStringer key(String name) throws JSONException {  if (name == null) {    throw new JSONException("Names must be non-null");  }  beforeKey();  string(name);  return this;}  }
class C{  public int addColumn(Object newCol,int length) throws FitsException {  if (this.nFields > 0 && Array.getLength(newCol) != this.nRows) {    throw new FitsException("New column has different number of rows");  }  if (this.nFields == 0) {    this.nRows=Array.getLength(newCol);  }  Object[] newData=new Object[this.nFields + 1];  int[] newOffsets=new int[this.nFields + 1];  int[] newLengths=new int[this.nFields + 1];  Class<?>[] newTypes=new Class[this.nFields + 1];  String[] newNulls=new String[this.nFields + 1];  System.arraycopy(this.data,0,newData,0,this.nFields);  System.arraycopy(this.offsets,0,newOffsets,0,this.nFields);  System.arraycopy(this.lengths,0,newLengths,0,this.nFields);  System.arraycopy(this.types,0,newTypes,0,this.nFields);  System.arraycopy(this.nulls,0,newNulls,0,this.nFields);  this.data=newData;  this.offsets=newOffsets;  this.lengths=newLengths;  this.types=newTypes;  this.nulls=newNulls;  newData[this.nFields]=newCol;  this.offsets[this.nFields]=this.rowLen + 1;  this.lengths[this.nFields]=length;  this.types[this.nFields]=ArrayFuncs.getBaseClass(newCol);  this.rowLen+=length + 1;  if (this.isNull != null) {    boolean[] newIsNull=new boolean[this.nRows * (this.nFields + 1)];    int add=0;    for (int i=0; i < this.isNull.length; i+=1) {      if (i % this.nFields == 0) {        add+=1;      }      if (this.isNull[i]) {        newIsNull[i + add]=true;      }    }    this.isNull=newIsNull;  }  this.nFields+=1;  this.buffer=null;  return this.nFields;}  }
class C{  public void clear(){  LinkedListNode node=getLast();  while (node != null) {    node.remove();    node=getLast();  }  head.next=head.previous=head;}  }
class C{  public void testDefaultParameterSettings(){  setDefaultParameters();  assertEquals(10.0,this.simulator.getDishDishVariability(),0.0001);  assertEquals(4,this.simulator.getNumSamplesPerDish());  assertEquals(0.025,this.simulator.getSampleSampleVariability(),0.0001);  assertEquals(0.1,this.simulator.getChipChipVariability(),0.0001);  assertEquals(0.025,this.simulator.getPixelDigitalization(),0.0001);  assertEquals(1,this.simulator.getNumDishes());  assertEquals(10000,this.simulator.getNumCellsPerDish());  assertEquals(4,this.simulator.getStepsGenerated());  assertEquals(1,this.simulator.getFirstStepStored());  assertEquals(1,this.simulator.getInterval());  assertEquals(false,this.simulator.isRawDataSaved());  assertEquals(true,this.simulator.isInitSync());  int[] timeSteps=this.simulator.getTimeSteps();  assertEquals(4,timeSteps.length);  for (int i=0; i < timeSteps.length; i++) {    assertEquals(i + 1,timeSteps[i]);  }}  }
class C{  public boolean hasHobbies(){  return hasRepeatingExtension(Hobby.class);}  }
class C{  protected JvmRTLibraryPathEntryMeta createJvmRTLibraryPathEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmRTLibraryPathEntryMeta(mib,objectserver);}  }
class C{  private void updateUiConfiguration(boolean aIsTakenImageDisplayed,int aImageOrigin){  mIsTakenImageDisplayed=aIsTakenImageDisplayed;  mTakenImageOrigin=aImageOrigin;  if (!aIsTakenImageDisplayed) {    mSelectedGalleryItemsList.clear();  }  if (aIsTakenImageDisplayed) {    mImagePreviewLayout.setVisibility(View.VISIBLE);    mPreviewScrollView.setVisibility(View.GONE);  } else {    mPreviewScrollView.setVisibility(View.VISIBLE);    mImagePreviewLayout.setVisibility(View.GONE);  }}  }
class C{  public void closeDB(){  if (mSQLiteDatabase != null && mSQLiteDatabase.isOpen()) {    mSQLiteDatabase.close();  }}  }
class C{  public ReadInputDiscretesRequest(){  super();  setFunctionCode(Modbus.READ_INPUT_DISCRETES);  setDataLength(4);}  }
class C{  public byte[] generateSignature() throws CryptoException {  int digSize=digest.getDigestSize();  int t=0;  int delta=0;  if (trailer == TRAILER_IMPLICIT) {    t=8;    delta=block.length - digSize - 1;    digest.doFinal(block,delta);    block[block.length - 1]=(byte)TRAILER_IMPLICIT;  } else {    t=16;    delta=block.length - digSize - 2;    digest.doFinal(block,delta);    block[block.length - 2]=(byte)(trailer >>> 8);    block[block.length - 1]=(byte)trailer;  }  byte header=0;  int x=(digSize + messageLength) * 8 + t + 4 - keyBits;  if (x > 0) {    int mR=messageLength - ((x + 7) / 8);    header=0x60;    delta-=mR;    System.arraycopy(mBuf,0,block,delta,mR);  } else {    header=0x40;    delta-=messageLength;    System.arraycopy(mBuf,0,block,delta,messageLength);  }  if ((delta - 1) > 0) {    for (int i=delta - 1; i != 0; i--) {      block[i]=(byte)0xbb;    }    block[delta - 1]^=(byte)0x01;    block[0]=(byte)0x0b;    block[0]|=header;  } else {    block[0]=(byte)0x0a;    block[0]|=header;  }  byte[] b=cipher.processBlock(block,0,block.length);  clearBlock(mBuf);  clearBlock(block);  return b;}  }
class C{  public int hashCode(){  int ret=0;  CompositeTransaction ct=(CompositeTransaction)lineage_.peek();  ret=ct.getTid().hashCode();  return ret;}  }
class C{  public void onAsyncTaskCompleted(int aSuccessCount,int aTotalCount,String aSavedPath){  successCount=aSuccessCount;  totalCount=aTotalCount;  savedPath=aSavedPath;  removeDialog(DIALOG_PROGRESS_ID);  if (playTrack && successCount == 1 && totalCount == 1 && savedPath != null) {    startActivity(GoogleEarthUtils.getPlayInEarthIntent(this,savedPath));    finish();  } else {    showDialog(DIALOG_RESULT_ID);  }}  }
class C{  @LargeTest public void testCursorWindowFailureWhenTooManyCursorWindowsLeftOpen(){  mDatabase.execSQL("CREATE TABLE test (_id INTEGER PRIMARY KEY, data TEXT);");  mDatabase.execSQL("INSERT INTO test values(1, 'test');");  int N=1024;  ArrayList<Cursor> cursorList=new ArrayList<Cursor>();  for (int i=0; i < N; i++) {    try {      Cursor cursor=mDatabase.rawQuery("select * from test",null);      cursor.getCount();      cursorList.add(cursor);    } catch (    CursorWindowAllocationException e) {      break;    }catch (    Exception e) {      fail("unexpected exception: " + e.getMessage());      e.printStackTrace();      break;    }  }  for (  Cursor c : cursorList) {    c.close();  }}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 != z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 != constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 != constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  RangeSeekBar<Integer> rangeSeekBar=new RangeSeekBar<Integer>(this);  rangeSeekBar.setRangeValues(15,90);  rangeSeekBar.setSelectedMinValue(20);  rangeSeekBar.setSelectedMaxValue(88);  LinearLayout layout=(LinearLayout)findViewById(R.id.seekbar_placeholder);  layout.addView(rangeSeekBar);  RangeSeekBar rangeSeekBarTextColorWithCode=(RangeSeekBar)findViewById(R.id.rangeSeekBarTextColorWithCode);  rangeSeekBarTextColorWithCode.setTextAboveThumbsColorResource(android.R.color.holo_blue_bright);}  }
class C{  public boolean parsingStillNeeded(){  return idParsingStillNeeded() || routingParsingStillNeeded() || timestampParsingStillNeeded();}  }
class C{  public boolean isKeepAspect(){  return null == keepAspect ? _keepAspect : keepAspect.get();}  }
class C{  public void update(){  sensorConfig.setMinLevel(levelCombo.getText());}  }
class C{  public Enumeration<? extends Principal> members(){  Vector<Principal> v=new Vector<Principal>(1);  v.addElement(this);  return v.elements();}  }
class C{  final boolean isTransient(){  return Modifier.isTransient(getModifiers());}  }
class C{  public void addLayoutComponent(String name,Component child){}  }
class C{  @Override public void onStart(){  super.onStart();  EventBus.getDefault().register(this);  if (ctlr != null) {    ctlr.start();  }}  }
class C{  @Override public void close() throws IOException {  if ((state == State.CLOSED)) {    return;  }  try {    if (errorCount == 0) {      if (state != State.READY) {        throw new IllegalStateException("Cannot close TFile in the middle of key-value insertion.");      }      finishDataBlock(true);      BlockAppender outMeta=writerBCF.prepareMetaBlock(TFileMeta.BLOCK_NAME,COMPRESSION_NONE);      try {        tfileMeta.write(outMeta);      }  finally {        outMeta.close();      }      BlockAppender outIndex=writerBCF.prepareMetaBlock(TFileIndex.BLOCK_NAME);      try {        tfileIndex.write(outIndex);      }  finally {        outIndex.close();      }      writerBCF.close();    }  }  finally {    IOUtils.cleanup(LOG,blkAppender,writerBCF);    blkAppender=null;    writerBCF=null;    state=State.CLOSED;  }}  }
class C{  public HostAddress(int new_addrType,byte[] new_address) throws KrbApErrException, UnknownHostException {switch (new_addrType) {case Krb5.ADDRTYPE_INET:    if (new_address.length != 4)     throw new KrbApErrException(0,"Invalid Internet address");  break;case Krb5.ADDRTYPE_CHAOS:if (new_address.length != 2) throw new KrbApErrException(0,"Invalid CHAOSnet address");break;case Krb5.ADDRTYPE_ISO:break;case Krb5.ADDRTYPE_IPX:if (new_address.length != 6) throw new KrbApErrException(0,"Invalid XNS address");break;case Krb5.ADDRTYPE_APPLETALK:if (new_address.length != 3) throw new KrbApErrException(0,"Invalid DDP address");break;case Krb5.ADDRTYPE_DECNET:if (new_address.length != 2) throw new KrbApErrException(0,"Invalid DECnet Phase IV address");break;case Krb5.ADDRTYPE_INET6:if (new_address.length != 16) throw new KrbApErrException(0,"Invalid Internet IPv6 address");break;}addrType=new_addrType;if (new_address != null) {address=new_address.clone();}if (DEBUG) {if (addrType == Krb5.ADDRTYPE_INET || addrType == Krb5.ADDRTYPE_INET6) {System.out.println("Host address is " + InetAddress.getByAddress(address));}}}  }
class C{  public Word or(Word w2){  return null;}  }
class C{  protected void loadChildren(ViewFactory f){  Element e=getElement();  int n=e.getElementCount();  if (n > 0) {    View[] added=new View[n];    for (int i=0; i < n; i++) {      added[i]=new WrappedLine(e.getElement(i));    }    replace(0,0,added);  }}  }
class C{  public static void recordAction(int action){  assert action >= 0 && action < SIGNIN_PROMO_COUNT;  RecordHistogram.recordEnumeratedHistogram("Signin.AndroidSigninPromoAction",action,SIGNIN_PROMO_COUNT);}  }
class C{  public int size(){  return size;}  }
class C{  @LargeTest public void testThumbnailForMP4VGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,MediaItem.RENDERING_MODE_BLACK_BORDER);  final int outWidth=mediaVideoItem.getWidth();  final int outHeight=mediaVideoItem.getHeight();  final long atTime=mediaVideoItem.getDuration() / 2;  final long atTime1=atTime + 100;  final long atTime2=atTime + 200;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);  final Bitmap thumbNailBmpAt100=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime1);  validateThumbnail(thumbNailBmpAt100,outWidth,outHeight);  final Bitmap thumbNailBmpAt200=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime2);  validateThumbnail(thumbNailBmpAt200,outWidth,outHeight);}  }
class C{  public static double P_RecallMicro(int Y[][],int Ypred[][]){  return P_Recall(MatrixUtils.flatten(Y),MatrixUtils.flatten(Ypred));}  }
class C{  public static boolean isHistoricalDay(DateTime date){  DateTime todayMidnight=new DateTime().withTimeAtStartOfDay();  return todayMidnight.isAfter(date.getMillis());}  }
class C{  void writeTreeModel(PartitionTreeModel model,XMLWriter writer){  setModelPrefix(model.getPrefix());  final String treeModelName=modelPrefix + TreeModel.TREE_MODEL;  writer.writeComment("Generate a tree model");  writer.writeTag(TreeModel.TREE_MODEL,new Attribute.Default<String>(XMLParser.ID,treeModelName),false);  final String STARTING_TREE=InitialTreeGenerator.STARTING_TREE;switch (model.getStartingTreeType()) {case USER:    writer.writeIDref("tree",modelPrefix + STARTING_TREE);  break;case UPGMA:writer.writeIDref(UPGMATreeParser.UPGMA_TREE,modelPrefix + STARTING_TREE);break;case RANDOM:writer.writeIDref(OldCoalescentSimulatorParser.COALESCENT_TREE,modelPrefix + STARTING_TREE);break;default :throw new IllegalArgumentException("Unknown StartingTreeType");}writer.writeOpenTag(TreeModelParser.ROOT_HEIGHT);writer.writeTag(ParameterParser.PARAMETER,new Attribute.Default<String>(XMLParser.ID,treeModelName + "." + OldCoalescentSimulatorParser.ROOT_HEIGHT),true);writer.writeCloseTag(TreeModelParser.ROOT_HEIGHT);writer.writeOpenTag(TreeModelParser.NODE_HEIGHTS,new Attribute.Default<String>(TreeModelParser.INTERNAL_NODES,"true"));writer.writeTag(ParameterParser.PARAMETER,new Attribute.Default<String>(XMLParser.ID,treeModelName + "." + "internalNodeHeights"),true);writer.writeCloseTag(TreeModelParser.NODE_HEIGHTS);writer.writeOpenTag(TreeModelParser.NODE_HEIGHTS,new Attribute[]{new Attribute.Default<String>(TreeModelParser.INTERNAL_NODES,"true"),new Attribute.Default<String>(TreeModelParser.ROOT_NODE,"true")});writer.writeTag(ParameterParser.PARAMETER,new Attribute.Default<String>(XMLParser.ID,treeModelName + "." + "allInternalNodeHeights"),true);writer.writeCloseTag(TreeModelParser.NODE_HEIGHTS);generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_TREE_MODEL,model,writer);writer.writeCloseTag(TreeModel.TREE_MODEL);if (model.getDataType().getType() == DataType.MICRO_SAT) {for (AbstractPartitionData partitionData : options.getDataPartitions(model)) {writer.writeComment("Generate a microsatellite tree model");writer.writeTag(MicrosatelliteSamplerTreeModelParser.TREE_MICROSATELLITE_SAMPLER_MODEL,new Attribute.Default<String>(XMLParser.ID,partitionData.getName() + "." + MicrosatelliteSamplerTreeModelParser.TREE_MICROSATELLITE_SAMPLER_MODEL),false);writer.writeOpenTag(MicrosatelliteSamplerTreeModelParser.TREE);writer.writeIDref(TreeModel.TREE_MODEL,treeModelName);writer.writeCloseTag(MicrosatelliteSamplerTreeModelParser.TREE);writer.writeOpenTag(MicrosatelliteSamplerTreeModelParser.INTERNAL_VALUES);writer.writeTag(ParameterParser.PARAMETER,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,partitionData.getName() + "." + MicrosatelliteSamplerTreeModelParser.TREE_MICROSATELLITE_SAMPLER_MODEL+ ".internalNodesParameter"),new Attribute.Default<Integer>(ParameterParser.DIMENSION,model.getDimension())},true);writer.writeCloseTag(MicrosatelliteSamplerTreeModelParser.INTERNAL_VALUES);writer.writeOpenTag(MicrosatelliteSamplerTreeModelParser.EXTERNAL_VALUES);writer.writeIDref(MicrosatellitePatternParser.MICROSATPATTERN,partitionData.getName());writer.writeCloseTag(MicrosatelliteSamplerTreeModelParser.EXTERNAL_VALUES);writer.writeCloseTag(MicrosatelliteSamplerTreeModelParser.TREE_MICROSATELLITE_SAMPLER_MODEL);}}}  }
class C{  void showHistory(){}  }
class C{  public GraphicsNode previousGraphicsNode(){  GraphicsNode result=getPreviousGraphicsNode(currentNode);  if (result != null) {    currentNode=result;  }  return result;}  }
class C{  public boolean isGreaterThan(Years other){  if (other == null) {    return getValue() > 0;  }  return getValue() > other.getValue();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.336 -0500",hash_original_method="AE207FC542F592796C7137A1F40A9FC2",hash_generated_method="A79ADE4DE1D184572ED0C7C3E91386CD") private Bookmarks(){}  }
class C{  private void checkMapPartitionToNode(Affinity testAff,Affinity aff){  assertEquals(aff.partitions(),testAff.partitions());  for (int part=0; part < aff.partitions(); ++part) {    assertEquals(testAff.mapPartitionToNode(part).id(),aff.mapPartitionToNode(part).id());    checkEqualCollection(testAff.mapPartitionToPrimaryAndBackups(part),aff.mapPartitionToPrimaryAndBackups(part));  }}  }
class C{  public WriteMultipleRegistersRequest(){  setFunctionCode(Modbus.WRITE_MULTIPLE_REGISTERS);}  }
class C{  public void testGetNameWhenEarHasExtension(){  EAR ear=new EAR("c:/some/path/to/ear/test.ear");  assertEquals("test",ear.getName());}  }
class C{  public static void validate(String uri,boolean useStrictValidation) throws ApplicationError {  validate(uri,useStrictValidation ? STRICT_URI : LOOSE_URI);}  }
class C{  private File buildFile(int userId){  StringBuilder fileNameBuilder=new StringBuilder();  fileNameBuilder.append(this.cacheDir.getPath());  fileNameBuilder.append(File.separator);  fileNameBuilder.append(DEFAULT_FILE_NAME);  fileNameBuilder.append(userId);  return new File(fileNameBuilder.toString());}  }
class C{  public void dispose(){  quadTree=null;  factory.dispose();  for (int i=0; i < layerList.length; ++i) {    if (layerList[i] != null) {      layerList[i].dispose();    }  }}  }
class C{  public static void fieldValueChanged(Object newValue,String owner,String fieldName,int lineNumber){  System.out.println("FieldValue " + owner + "#"+ fieldName+ " changed in line "+ lineNumber+ " to value: "+ newValue);}  }
class C{  public UsePosList(int initialCapacity){  list=new IntList(initialCapacity * 2);}  }
class C{  public SpanManager delete(int start,int end){  sb.delete(start,end);  adjustLists(start,start - end);  if (calculateSrcPositions)   for (int i=0; i < end - start; i++)   ib.remove(start);  return this;}  }
class C{  public void addDOMListeners(){  SVGOMDocument doc=(SVGOMDocument)document;  domAttrModifiedEventListener=new DOMAttrModifiedEventListener();  doc.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedEventListener,true,null);  domNodeInsertedEventListener=new DOMNodeInsertedEventListener();  doc.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedEventListener,true,null);  domNodeRemovedEventListener=new DOMNodeRemovedEventListener();  doc.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedEventListener,true,null);  domCharacterDataModifiedEventListener=new DOMCharacterDataModifiedEventListener();  doc.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",domCharacterDataModifiedEventListener,true,null);  animatedAttributeListener=new AnimatedAttrListener();  doc.addAnimatedAttributeListener(animatedAttributeListener);  focusManager=new FocusManager(document);  CSSEngine cssEngine=doc.getCSSEngine();  cssPropertiesChangedListener=new CSSPropertiesChangedListener();  cssEngine.addCSSEngineListener(cssPropertiesChangedListener);}  }
class C{  public static void main(String[] args){  SpringApplication.run(UAAStarter.class,args);}  }
class C{  public JPAMTableCreator generateFilteredDefaultTableCreator(AbstractSession session) throws DatabaseException {  JPAMTableCreator tblCreator=generateDefaultTableCreator();  try {    java.sql.Connection conn=null;    if (session.isServerSession()) {      conn=((ServerSession)session).getDefaultConnectionPool().acquireConnection().getConnection();    } else     if (session.isDatabaseSession()) {      conn=((DatabaseSessionImpl)session).getAccessor().getConnection();    }    if (conn == null) {      return tblCreator;    }    DatabaseMetaData dbMetaData=conn.getMetaData();    ResultSet resultSet=dbMetaData.getTables(null,dbMetaData.getUserName(),null,new String[]{"TABLE"});    List tablesInDatabase=new ArrayList();    while (resultSet.next()) {      tablesInDatabase.add(resultSet.getString("TABLE_NAME"));    }    resultSet.close();    List existedTables=new ArrayList();    List existedTableNames=new ArrayList();    Iterator tblDefIter=tblCreator.getTableDefinitions().iterator();    while (tblDefIter.hasNext()) {      TableDefinition tblDef=(TableDefinition)tblDefIter.next();      if (tablesInDatabase.contains(tblDef.getFullName())) {        existedTables.add(tblDef);        existedTableNames.add(tblDef.getFullName());      }    }    if (!existedTableNames.isEmpty()) {      session.getSessionLog().log(SessionLog.FINEST,SessionLog.DDL,"skip_create_existing_tables",existedTableNames);      tblCreator.getTableDefinitions().removeAll(existedTables);    }  } catch (  SQLException sqlEx) {    throw DatabaseException.errorRetrieveDbMetadataThroughJDBCConnection();  }  return tblCreator;}  }
class C{  private PyPullUpPresenterImpl configureByClass(@NotNull final String name){  final PyClass childClass=getClassByName(name);  final PyMemberInfoStorage storage=new PyMemberInfoStorage(childClass);  return new PyPullUpPresenterImpl(myView,storage,childClass);}  }
class C{  public static IStatus validateFieldName(String name){  return validateIdentifier(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public void testSize2SharedMode() throws Exception {}  }
class C{  private void checkAndAddSize(final MediaSizeName name){  final PrintRequestAttributeSet attributes=new HashPrintRequestAttributeSet();  if (!printService.isAttributeValueSupported(name,new DocFlavor.BYTE_ARRAY(DocFlavor.BYTE_ARRAY.PNG.getMimeType()),attributes)) {    return;  }  final String o=paperNames.get(name.toString());  final String printDescription;  if (o != null) {    printDescription=o;  } else {    printDescription=name.toString();  }  final MediaSize size=MediaSize.getMediaSizeForName(name);  double pX=size.getX(MediaSize.MM);  double pY=size.getY(MediaSize.MM);  attributes.add(name);  final MediaPrintableArea[] area=(MediaPrintableArea[])printService.getSupportedAttributeValues(MediaPrintableArea.class,null,attributes);  if (area.length == 0) {    return;  }  int useArea=0;  if (area[useArea] == null) {    for (int i=0; i != area.length && area[useArea] == null; i++) {      useArea=i;    }  }  final float[] values=area[useArea].getPrintableArea(MediaPrintableArea.MM);  if (values[2] > pX - 0.5 && values[2] < pX + 0.5) {    values[2]=(float)pX;  }  if (values[3] > pY - 0.5 && values[3] < pY + 0.5) {    values[3]=(float)pY;  }  if (values[2] > pX ^ values[3] > pY) {    final double temp=pX;    pX=pY;    pY=temp;  }  final MarginPaper paper=new MarginPaper();  paper.setSize(pX * mmToSubInch,pY * mmToSubInch);  paper.setMinImageableArea(values[0] * mmToSubInch,values[1] * mmToSubInch,values[2] * mmToSubInch,values[3] * mmToSubInch);  paperDefinitions.put(printDescription,paper);  paperList.add(printDescription);}  }
class C{  public GetIndexedScriptRequest scriptLang(@Nullable String type){  this.scriptLang=type;  return this;}  }
class C{  public MessageStoreImpl(int maxConcurrentReqeusts){  if (maxConcurrentReqeusts > 0) {    this.maxSize=maxConcurrentReqeusts;  } else {    this.maxSize=DEFAULT_MAX_CONCURRENT_REQUEST;  }  this.messages=new LinkedList<Message>();  this.readWriteLock=new ReentrantReadWriteLock();  this.readLock=this.readWriteLock.readLock();  this.writeLock=this.readWriteLock.writeLock();}  }
class C{  public void addElement(TableCellElement c){  ((ListElement)e).addElement(c);}  }
class C{  public RequestBuilder query(Object... args){  return with(queryParams,args);}  }
class C{  private void snap(){  if (mScrollTrend >= 0 && mAnimationType == PULL_UP_SHADE) {    snapShadeTo(mHeight,ALPHA_FULLY_OPAQUE);  } else   if (mScrollTrend <= 0 && mAnimationType == PULL_DOWN_SHADE) {    snapShadeTo(-mHeight,ALPHA_FULLY_OPAQUE);  } else   if (mScrollTrend < 0 && mAnimationType == PULL_UP_SHADE) {    snapShadeTo(0,ALPHA_FULLY_TRANSPARENT,false);  } else   if (mScrollTrend > 0 && mAnimationType == PULL_DOWN_SHADE) {    snapShadeTo(0,ALPHA_FULLY_TRANSPARENT,false);  }}  }
class C{  public static int scan(PerfilesVO perfiles,String code,String pathFile,ParametrosVO parametrosVO){  int numImages=-1;  PerfilVO perfilVO=(PerfilVO)perfiles.getHashPerfiles().get(perfiles.getSelectName());  try {    try {      scanner.closeDS();    } catch (    Exception e) {    }    scanner.openDS(perfilVO.getDevice());    boolean showUI=perfilVO.isEnableUI();    if (parametrosVO.getDummy() != null && parametrosVO.getDummy().equals("1")) {      showUI=false;    }    if (!showUI) {      chargeProperties(perfilVO);    }    while (numImages == -1) {      numImages=scanner.acquireToFile(code,true,pathFile,showUI);    }    scanner.closeDS();    return numImages;  } catch (  ScannerIOException e) {    try {      scanner.closeDS();    } catch (    ScannerIOException e1) {      e1.printStackTrace();    }    e.printStackTrace();    return 0;  }}  }
class C{  @Override public void onConnected(Bundle bundle){  final Location location=LocationServices.FusedLocationApi.getLastLocation(googleApiClient);  if (location != null) {    lat.setText("" + location.getLatitude());    longitude.setText("" + location.getLongitude());  } else {    lat.setText("Not Available");    longitude.setText("Not Available");  }}  }
class C{  private void update(){  dataControl.setFirstRow(1);  dataControl.setLastRow(Math.min(dataControl.getMaxRows(),getDefaultMaximumNumber("rowlimit",dataControl.getMaxRows())));  dataControl.setFirstColumn(1);  dataControl.setLastColumn(Math.min(dataControl.getMaxColumns(),getDefaultMaximumNumber("columnlimit",dataControl.getMaxColumns())));  dataControl.update();}  }
class C{  public void testExampleKeystorePath(){  assertNotNull("Example keystore is null, meaning that something has changed in the " + "structure of the example configs and/or ExternalPaths.java - " + "SSL randomization is broken",SSLTestConfig.TEST_KEYSTORE);}  }
class C{  public void testNoParents() throws Exception {  ensureNoMembers("NoParentsAllowed");}  }
class C{  public Playlist(PlayMusicManager playMusicManager){  super(playMusicManager);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.979 -0500",hash_original_method="2AD282CF508D37D852086ADCE714282E",hash_generated_method="776F4278129F815F7D3D233435C9582D") public static String valueOf(char[] data){  return new String(data,0,data.length);}  }
class C{  public Rule(Rule that,Pattern pattern){  this.mode=that.mode;  this.importPrecedence=that.importPrecedence;  this.priority=that.priority;  this.appearenceCount=that.appearenceCount;  this.action=that.action;  this.pattern=pattern;}  }
class C{  public StepExecution createStepExecution(){  return new StepExecution(this);}  }
class C{  public double lngDegrees(){  return 180.0 / Math.PI * lngRadians;}  }
class C{  @Override public void call(SceKernelThreadInfo thread,IAction afterAction){  setArgument(0,notifyCount);  setArgument(1,notifyArg);  setArgument(2,callbackArgument);  notifyCount=0;  notifyArg=0;  super.call(thread,afterAction);}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,boolean secure){  this(local,target,null,secure,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  public void xMaxYMid() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMID;}  }
class C{  public AbsoluteSizeSpan(int size){  mSize=size;}  }
class C{  private CriticalDefinitions(){}  }
class C{  public String toString(int offset){  StringBuilder result=new StringBuilder();  for (int d=0; d < vec.getDimensionality(); d++) {    if (d != 0) {      result.append(" + \n");      FormatUtil.whitespace(result,offset);    }    result.append(vec.doubleValue(d));    for (int j=0; j < d; j++) {      result.append(" * sin(a_").append(j + 1).append(')');    }    if (d != vec.getDimensionality() - 1) {      result.append(" * cos(a_").append(d + 1).append(')');    }  }  return result.toString();}  }
class C{  public int hashCode(){  int hash;  try {    hash=getAddress().hashCode();  } catch (  UnknownHostException uhe) {    hash=getServer().toUpperCase().hashCode();  }  getUncPath0();  return hash + canon.toUpperCase().hashCode();}  }
class C{  static boolean isEndTag(String tokenText){  return tokenText.length() >= 2 && tokenText.charAt(1) == '/';}  }
class C{  public Map<RPConsistencyGroup,Set<RPBookmark>> findRPBookmarks(FunctionalAPIImpl impl,Set<RPConsistencyGroup> rpCGSet,CreateBookmarkRequestParams request) throws RecoverPointException {  Map<RPConsistencyGroup,Set<RPBookmark>> returnMap=new HashMap<RPConsistencyGroup,Set<RPBookmark>>();  final int numRetries=6;  final int secondsToWaitForRetry=5;  RecoverPointCopyType rpCopyType=RecoverPointCopyType.UNKNOWN_PROTECTION;  boolean wantCDP=false;  boolean wantCRR=false;  boolean acceptAnyCopy=false;  if (rpCopyType == null || rpCopyType == RecoverPointCopyType.UNKNOWN_PROTECTION) {    acceptAnyCopy=true;  } else {    if (rpCopyType == RecoverPointCopyType.CDP_PROTECTION) {      wantCDP=true;    } else     if (rpCopyType == RecoverPointCopyType.CRR_PROTECTION) {      wantCRR=true;    } else     if (rpCopyType == RecoverPointCopyType.CRR_PROTECTION) {      wantCRR=true;      wantCDP=true;    }  }  boolean tooManyRetries=false;  for (  RPConsistencyGroup rpCG : rpCGSet) {    if (tooManyRetries) {      break;    }    for (int i=0; i < numRetries; i++) {      logger.info(String.format("Getting event markers for CG: %s.  Attempt number %d.  Copy type: %s",rpCG.getName() != null ? rpCG.getName() : rpCG.getCGUID().getId(),i,rpCopyType.toString()));      Set<RPBookmark> rpEventMarkersForCG=getBookmarksForMostRecentBookmarkName(impl,request,rpCG.getCGUID());      if (rpEventMarkersForCG != null) {        if (acceptAnyCopy && (!rpEventMarkersForCG.isEmpty())) {          returnMap.put(rpCG,rpEventMarkersForCG);          break;        } else         if ((wantCDP && wantCRR) && rpEventMarkersForCG.size() > 1) {          returnMap.put(rpCG,rpEventMarkersForCG);          break;        } else         if ((wantCDP && wantCRR) && rpEventMarkersForCG.size() < 2) {          logger.error("Didn't find enough bookmarks for CG: " + rpCG.getName() + ". Going to sleep and retry.");        } else         if (!rpEventMarkersForCG.isEmpty()) {          returnMap.put(rpCG,rpEventMarkersForCG);          break;        } else {          logger.error("Didn't find enough bookmarks for CG: " + rpCG.getName() + ". Going to sleep and retry.");        }      } else {        logger.error("Didn't find any bookmarks for CG: " + rpCG.getName() + ". Going to sleep and retry.");      }      try {        Thread.sleep(Long.valueOf((secondsToWaitForRetry * numMillisInSecond)));      } catch (      InterruptedException e) {      }    }  }  if (returnMap.size() != rpCGSet.size()) {    throw RecoverPointException.exceptions.failedToFindExpectedBookmarks();  }  return returnMap;}  }
class C{  @Override public void validateObject() throws InvalidObjectException {  fireDatasetChanged();}  }
class C{  public TreeMaker at(DiagnosticPosition pos){  this.pos=(pos == null ? Position.NOPOS : pos.getStartPosition());  return this;}  }
class C{  public SimpleDataSet generateData(int samples){  int totalClasses=1;  for (  int d : dimensions)   totalClasses*=d;  catDataInfo=new CategoricalData[]{new CategoricalData(totalClasses)};  List<DataPoint> dataPoints=new ArrayList<DataPoint>(totalClasses * samples);  int[] curClassPointer=new int[1];  for (int i=0; i < dimensions[0]; i++) {    int[] curDim=new int[dimensions.length];    curDim[0]=i;    addSamples(curClassPointer,0,samples,dataPoints,curDim);  }  return new SimpleDataSet(dataPoints);}  }
class C{  public static void verifyRegionNotDestroyed(){  assertTrue(cache.getRegion(REGION_NAME) != null);}  }
class C{  static public void assertEquals(double expected,double actual,double delta){  assertEquals(null,expected,actual,delta);}  }
class C{  public Configuration(InputParam param) throws IOException {  mWhiteList=new HashMap<>();  mOldResMapping=new HashMap<>();  mOldFileMapping=new HashMap<>();  mCompressPatterns=new HashSet<>();  if (param.useSign) {    setSignData(param.signFile,param.keypass,param.storealias,param.storepass);  }  if (param.mappingFile != null) {    mUseKeepMapping=true;    setKeepMappingData(param.mappingFile);  }  for (  String item : param.whiteList) {    mUseWhiteList=true;    addWhiteList(item);  }  mUse7zip=param.use7zip;  mKeepRoot=param.keepRoot;  mMetaName=param.metaName;  for (  String item : param.compressFilePattern) {    mUseCompress=true;    addToCompressPatterns(item);  }  this.m7zipPath=param.sevenZipPath;  this.mZipalignPath=param.zipAlignPath;}  }
class C{  @Override public void fill3DRect(int x,int y,int width,int height,boolean raised){  fillRect(x,y,width,height);}  }
class C{  public static void saveRunOutputs(Scenario scenario){  log.info("Saving UrbanSim and MATSim outputs ...");  UrbanSimParameterConfigModuleV3 uspModule=M4UConfigUtils.getUrbanSimParameterConfigAndPossiblyConvert(scenario.getConfig());  int currentYear=uspModule.getYear();  String saveDirectory="run" + currentYear;  String savePath=Paths.checkPathEnding(uspModule.getMATSim4OpusBackup() + saveDirectory);  File saveDir=new File(savePath);  if (!saveDir.exists())   if (!saveDir.mkdirs())   log.error("Creating the backup directory " + savePath + " failed!");  throw new RuntimeException("BackupMATSimOutput functionality is disabled.  If this is needed, " + "please re-implement using FileUtils.copyDirectory, see " + "http://stackoverflow.com/questions/5368724/how-to-copy-a-folder-and-all-its-subfolders-and-files-into-another-folder");}  }
class C{  void cancel(){  dispose();}  }
class C{  public boolean isDeliverOn(){  return parseBoolean(getFieldValue(SubscribeOptionFields.deliver));}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testGetUnsignedLong() throws Exception {  ByteBuffer bb=ByteBuffer.allocate(8);  bb.put((byte)0xff).put((byte)0xff).put((byte)0xff).put((byte)0xff);  bb.put((byte)0xff).put((byte)0xff).put((byte)0xff).put((byte)0xff);  bb.position(0);  bb.limit(8);  BigInteger bi=Unsigned.getUnsignedLong(bb);  BigInteger uLongMax=new BigInteger(ULONG_MAX);  for (int i=0; i < uLongMax.bitCount(); ++i) {    TestCase.assertTrue("Bit: " + i + " should be: "+ uLongMax.testBit(i),uLongMax.testBit(i) == bi.testBit(i));  }  TestCase.assertEquals(ULONG_MAX,bi.toString());  bb=ByteBuffer.allocate(10);  bb.put((byte)0x00);  bb.put((byte)0xff).put((byte)0xff).put((byte)0xff).put((byte)0xff);  bb.put((byte)0xff).put((byte)0xff).put((byte)0xff).put((byte)0xff);  bb.put((byte)0x00);  bb.position(0);  bb.limit(10);  bi=Unsigned.getUnsignedLong(bb,1);  uLongMax=new BigInteger(ULONG_MAX);  for (int i=0; i < uLongMax.bitCount(); ++i) {    TestCase.assertTrue("Bit: " + i + " should be: "+ uLongMax.testBit(i),uLongMax.testBit(i) == bi.testBit(i));  }  TestCase.assertEquals(ULONG_MAX,bi.toString());}  }
class C{  public Vector3f(){}  }
class C{  public Enumeration names(){  return states.keys();}  }
class C{  @Override public int compareTo(Value o){  return hashCode() - o.hashCode();}  }
class C{  public static NameMatcher<TriggerKey> triggerNameEndsWith(String compareTo){  return NameMatcher.nameEndsWith(compareTo);}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public static void runAccountSettings(String adminEmail,String password,String domainName){  System.out.println("Intiating demo run");  try {    DomainSettingsService client=new DomainSettingsService(adminEmail,password,domainName,"test");    System.out.println("Enter full path to logo file");    Scanner in=new Scanner(System.in);    String file=in.nextLine();    client.setDomainLogo(EncodeUtil.encodeBinaryFile(file));    String countryCode=client.getCountryCodeForDomain();    LOGGER.log(Level.INFO,"Retrieved CountryCode: " + countryCode);    String customerPIN=client.getCustomerPIN();    LOGGER.log(Level.INFO,"Retrieved customerPIN: " + customerPIN);    String defaultLanguage=client.getDefaultLanguage();    LOGGER.log(Level.INFO,"Retrieved defaultLanguage: " + defaultLanguage);    String domainCreationTime=client.getDomainCreationTime();    LOGGER.log(Level.INFO,"Retrieved domainCreationTime: " + domainCreationTime);    String domainEdition=client.getDomainEdition();    LOGGER.log(Level.INFO,"Retrieved domainEdition: " + domainEdition);    String domainSecondaryEmailAddress=client.getDomainSecondaryEmailAddress();    LOGGER.log(Level.INFO,"Retrieved domainSecondaryEmailAddress: " + domainSecondaryEmailAddress);    String domainVerificationStatus=client.getDomainVerificationStatus();    LOGGER.log(Level.INFO,"Retrieved domainVerificationStatus: " + domainVerificationStatus);    int maxUserCount=client.getMaxUserCount();    LOGGER.log(Level.INFO,"Retrieved maxUserCount: " + maxUserCount);    String organizationName=client.getOrganizationName();    LOGGER.log(Level.INFO,"Retrieved organizationName: " + organizationName);    String supportPin=client.getSupportPIN();    LOGGER.log(Level.INFO,"Retrieved supportPin: " + supportPin);    System.out.println("Enter a secondary email ID for your domain:");    String secondaryEmail=in.nextLine();    LOGGER.log(Level.INFO,"Changing secondary email address to admin email: " + secondaryEmail);    client.setDomainSecondaryEmailAddress(secondaryEmail);    LOGGER.log(Level.INFO,"Changed secondary email address to : " + client.getDomainSecondaryEmailAddress());    LOGGER.log(Level.INFO,"Changing organization name to newOrg:");    client.setOrganizationName("newOrg");    LOGGER.log(Level.INFO,"Changed organization name: " + client.getOrganizationName());    LOGGER.log(Level.INFO,"Changing default language to fr:");    client.setDefaultLanguage("fr");    LOGGER.log(Level.INFO,"Changed default language: " + client.getDefaultLanguage());    client.setDefaultLanguage(defaultLanguage);    client.setDomainSecondaryEmailAddress(domainSecondaryEmailAddress);    client.setOrganizationName(organizationName);  } catch (  AuthenticationException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  IllegalArgumentException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  ServiceException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  MalformedURLException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }catch (  IOException e) {    LOGGER.log(Level.SEVERE,e.getMessage(),e);  }}  }
class C{  @Override protected int readHeader() throws IOException {  short LZO_LIBRARY_VERSION=0x2060;  Log LOG=LogFactory.getLog(LzopInputStream.class);  byte[] LZOP_MAGIC=new byte[]{-119,'L','Z','O',0,'\r','\n','\032','\n'};  byte[] buf=new byte[9];  readBytes(buf,0,9);  if (!Arrays.equals(buf,LZOP_MAGIC))   throw new IOException("Invalid LZO header");  Arrays.fill(buf,(byte)0);  Adler32 adler=new Adler32();  CRC32 crc32=new CRC32();  int hitem=readHeaderItem(buf,2,adler,crc32);  if (hitem > LzopConstants.LZOP_VERSION) {    LOG.debug("Compressed with later version of lzop: " + Integer.toHexString(hitem) + " (expected 0x"+ Integer.toHexString(LzopConstants.LZOP_VERSION)+ ")");  }  hitem=readHeaderItem(buf,2,adler,crc32);  if (hitem > LZO_LIBRARY_VERSION) {    throw new IOException("Compressed with incompatible lzo version: 0x" + Integer.toHexString(hitem) + " (expected 0x"+ Integer.toHexString(LzoVersion.LZO_LIBRARY_VERSION)+ ")");  }  hitem=readHeaderItem(buf,2,adler,crc32);  if (hitem > LzopConstants.LZOP_VERSION) {    throw new IOException("Compressed with incompatible lzop version: 0x" + Integer.toHexString(hitem) + " (expected 0x"+ Integer.toHexString(LzopConstants.LZOP_VERSION)+ ")");  }  hitem=readHeaderItem(buf,1,adler,crc32);switch (hitem) {case LzopConstants.M_LZO1X_1:case LzopConstants.M_LZO1X_1_15:case LzopConstants.M_LZO1X_999:    break;default :  throw new IOException("Invalid strategy " + Integer.toHexString(hitem));}readHeaderItem(buf,1,adler,crc32);int flags=readHeaderItem(buf,4,adler,crc32);boolean useCRC32=(flags & LzopConstants.F_H_CRC32) != 0;boolean extraField=(flags & LzopConstants.F_H_EXTRA_FIELD) != 0;if ((flags & LzopConstants.F_MULTIPART) != 0) throw new IOException("Multipart lzop not supported");if ((flags & LzopConstants.F_H_FILTER) != 0) throw new IOException("lzop filter not supported");if ((flags & LzopConstants.F_RESERVED) != 0) throw new IOException("Unknown flags in header");readHeaderItem(buf,4,adler,crc32);readHeaderItem(buf,4,adler,crc32);readHeaderItem(buf,4,adler,crc32);hitem=readHeaderItem(buf,1,adler,crc32);if (hitem > 0) {byte[] tmp=(hitem > buf.length) ? new byte[hitem] : buf;readHeaderItem(tmp,hitem,adler,crc32);}int checksum=(int)(useCRC32 ? crc32.getValue() : adler.getValue());hitem=readHeaderItem(buf,4,adler,crc32);if (hitem != checksum) {throw new IOException("Invalid header checksum: " + Long.toHexString(checksum) + " (expected 0x"+ Integer.toHexString(hitem)+ ")");}if (extraField) {LOG.debug("Extra header field not processed");adler.reset();crc32.reset();hitem=readHeaderItem(buf,4,adler,crc32);readHeaderItem(new byte[hitem],hitem,adler,crc32);checksum=(int)(useCRC32 ? crc32.getValue() : adler.getValue());if (checksum != readHeaderItem(buf,4,adler,crc32)) {  throw new IOException("Invalid checksum for extra header field");}}return flags;}  }
class C{  public static void write(float centerLat,float centerLon,float scale,int height,int width,LinkBoundingPoly[] boundingPolys,LinkProperties props,Link link) throws IOException {  int i;  link.start(Link.MAP_REQUEST_HEADER);  link.dos.writeFloat(version);  link.dos.writeFloat(centerLat);  link.dos.writeFloat(centerLon);  link.dos.writeFloat(scale);  link.dos.writeInt(height);  link.dos.writeInt(width);  link.dos.writeInt(boundingPolys.length);  for (i=0; i < boundingPolys.length; i++) {    boundingPolys[i].write(link.dos);  }  props.write(link);  link.end(Link.END_TOTAL);  if (Debug.debugging("link")) {    System.out.println("LinkMapRequest wrote:");    System.out.println(" version = " + version);    System.out.println(" lat = " + centerLat);    System.out.println(" lon = " + centerLon);    System.out.println(" scale = " + scale);    System.out.println(" height = " + height);    System.out.println(" width = " + width);    System.out.println(" bounding polys:");    for (i=0; i < boundingPolys.length; i++) {      System.out.println(boundingPolys[i]);    }    System.out.println(" Args:");    System.out.println(props);  }}  }
class C{  public static void appendMap(StringBuilder buff,String key,Object value){  if (buff.length() > 0) {    buff.append(',');  }  buff.append(key).append(':');  String v;  if (value instanceof Long) {    v=Long.toHexString((Long)value);  } else   if (value instanceof Integer) {    v=Integer.toHexString((Integer)value);  } else {    v=value.toString();  }  if (v.indexOf(',') < 0 && v.indexOf('\"') < 0) {    buff.append(v);  } else {    buff.append('\"');    for (int i=0, size=v.length(); i < size; i++) {      char c=v.charAt(i);      if (c == '\"') {        buff.append('\\');      }      buff.append(c);    }    buff.append('\"');  }}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private final int inBuffer(final long index,final long filesize) throws IOException {  if (index >= filesize && index < filesize + this.buffercount) {    return (int)(index - filesize);  }  return -1;}  }
class C{  public void addArc(String sParent,String sChild) throws Exception {  int nParent=getNode(sParent);  int nChild=getNode(sChild);  addArc(nParent,nChild);}  }
class C{  public Analyzer analyzer(){  return this.analyzer;}  }
class C{  public static <A extends Comparable<? super A>>PriorityQueue<A> maxQueue(A... as){  return new PriorityQueue<>(Comparator.<A>reverseOrder(),0,Heap.empty(),QueueType.MAX).plus(as);}  }
class C{  @Override protected void registerListeners(){}  }
class C{  public void testAuthenticateUser() throws ConfigurationException {  PasswordManager pwd=null;  try {    pwd=new PasswordManager("sample.security.properties",ClientApplicationType.RMI_JMX);  } catch (  ConfigurationException e) {    assertTrue(false);  }  boolean authOK=pwd.authenticateUser("tungsten","secret");  assertTrue(authOK);  authOK=pwd.authenticateUser("tungsten","wrong_password");  assertFalse(authOK);  try {    authOK=pwd.authenticateUser("non_existing_user","wrong_password");    assertTrue("Try with a non existing user: call should have raised an exception",false);  } catch (  ServerRuntimeException sre) {    assertTrue(true);  }}  }
class C{  protected void returnAttributeValue(String name){  ownerMessage.addEvent(Type.CLIENT_UPDATE_DATA,name,getAttribute(name));}  }
class C{  public void testDatabaseDriverPropertiesUsernamePropertySetsUserOnDataSource(){  String driverPropertyString="user=APP;CreateDatabase=create";  String propertyString=DatasourcePropertySet.CONNECTION_PROPERTIES + "=" + driverPropertyString;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("APP",ds.getUsername());}  }
class C{  public boolean isRFlag(){  return rFlag;}  }
class C{  public static String shortenText(String text,int maxNumberOfChars){  if (text == null) {    return null;  }  String trimmedText=text.trim();  if (trimmedText.length() > maxNumberOfChars) {    return trimmedText.substring(0,maxNumberOfChars - 3) + "...";  }  return trimmedText;}  }
class C{  public AppEvent(EventType type){  super(type);}  }
class C{  private void fillDensities(KNNQuery<O> knnq,DBIDs ids,WritableDoubleDataStore dens){  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Densities",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final KNNList neighbors=knnq.getKNNForDBID(iter,k);    dens.putDouble(iter,neighbors.getKNNDistance());    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);}  }
class C{  protected BuiltinEventSpecImpl(){  super();}  }
class C{  public void configureTable(JTable slotTable){  slotTable.getTableHeader().setReorderingAllowed(true);  slotTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  for (int i=0; i < slotTable.getColumnCount(); i++) {    int width=getPreferredWidth(i);    slotTable.getColumnModel().getColumn(i).setPreferredWidth(width);  }  slotTable.sizeColumnsToFit(-1);  setColumnToHoldButton(slotTable,SlotMonDataModel.DISPCOLUMN);  setColumnToHoldEStopButton(slotTable,SlotMonDataModel.ESTOPCOLUMN);}  }
class C{  static byte[] decode_base64(String s,int maxolen) throws IllegalArgumentException {  ByteArrayOutputStream out=new ByteArrayOutputStream(maxolen);  int off=0, slen=s.length(), olen=0;  byte c1, c2, c3, c4, o;  if (maxolen <= 0) {    throw new IllegalArgumentException("Invalid maxolen");  }  while (off < slen - 1 && olen < maxolen) {    c1=char64(s.charAt(off++));    c2=char64(s.charAt(off++));    if (c1 == -1 || c2 == -1) {      break;    }    o=(byte)(c1 << 2);    o|=(c2 & 0x30) >> 4;    out.write(o);    if (++olen >= maxolen || off >= slen) {      break;    }    c3=char64(s.charAt(off++));    if (c3 == -1) {      break;    }    o=(byte)((c2 & 0x0f) << 4);    o|=(c3 & 0x3c) >> 2;    out.write(o);    if (++olen >= maxolen || off >= slen) {      break;    }    c4=char64(s.charAt(off++));    o=(byte)((c3 & 0x03) << 6);    o|=c4;    out.write(o);    ++olen;  }  return out.toByteArray();}  }
class C{  public GridifyDefaultTask(Class<?> cls){  assert cls != null;  p2pCls=cls;  clsLdr=U.detectClassLoader(cls);}  }
class C{  @Override protected Void doTask() throws Exception {  ran.compareAndSet(false,true);  while (true) {    if (Thread.interrupted()) {      if (log.isInfoEnabled())       log.info("Interrupted.");      throw new InterruptedException("Task was interrupted");    }    Thread.sleep(Long.MAX_VALUE);  }}  }
class C{  private void copyNodesAndLabels(int argIndex){  for (Iterator i=arg[argIndex].getNodeIterator(); i.hasNext(); ) {    Node graphNode=(Node)i.next();    Node newNode=nodes.addNode(graphNode.getCoordinate());    newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"movsd");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a movsd instruction (invalid number of operands)");  }  new MovsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.DWORD,instructions);}  }
class C{  public static void processMapping(FirebirdConnectionProperties connectionProperties,Properties info) throws FBResourceException {  for (  String isolationName : ISOLATION_LEVEL_NAMES) {    String property=info.getProperty(isolationName);    if (property == null)     continue;    connectionProperties.setTransactionParameters(getTransactionIsolationLevel(isolationName),processMapping(property));  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SpiderWebPlot)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  SpiderWebPlot that=(SpiderWebPlot)obj;  if (!this.dataExtractOrder.equals(that.dataExtractOrder)) {    return false;  }  if (this.headPercent != that.headPercent) {    return false;  }  if (this.interiorGap != that.interiorGap) {    return false;  }  if (this.startAngle != that.startAngle) {    return false;  }  if (!this.direction.equals(that.direction)) {    return false;  }  if (this.maxValue != that.maxValue) {    return false;  }  if (this.webFilled != that.webFilled) {    return false;  }  if (this.axisLabelGap != that.axisLabelGap) {    return false;  }  if (!PaintUtilities.equal(this.axisLinePaint,that.axisLinePaint)) {    return false;  }  if (!this.axisLineStroke.equals(that.axisLineStroke)) {    return false;  }  if (!ShapeUtilities.equal(this.legendItemShape,that.legendItemShape)) {    return false;  }  if (!PaintUtilities.equal(this.seriesPaint,that.seriesPaint)) {    return false;  }  if (!this.seriesPaintList.equals(that.seriesPaintList)) {    return false;  }  if (!PaintUtilities.equal(this.baseSeriesPaint,that.baseSeriesPaint)) {    return false;  }  if (!PaintUtilities.equal(this.seriesOutlinePaint,that.seriesOutlinePaint)) {    return false;  }  if (!this.seriesOutlinePaintList.equals(that.seriesOutlinePaintList)) {    return false;  }  if (!PaintUtilities.equal(this.baseSeriesOutlinePaint,that.baseSeriesOutlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.seriesOutlineStroke,that.seriesOutlineStroke)) {    return false;  }  if (!this.seriesOutlineStrokeList.equals(that.seriesOutlineStrokeList)) {    return false;  }  if (!this.baseSeriesOutlineStroke.equals(that.baseSeriesOutlineStroke)) {    return false;  }  if (!this.labelFont.equals(that.labelFont)) {    return false;  }  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {    return false;  }  if (!this.labelGenerator.equals(that.labelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.toolTipGenerator,that.toolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.urlGenerator,that.urlGenerator)) {    return false;  }  return true;}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  private void testStreamedLoading(int numImmediate,int[] outcomes,int[] dhInteraction){  FakeDraweeController controller=new FakeDraweeController(mDeferredReleaser,mUiThreadExecutor,mDataSourceSupplier,"id_streamed",mCallerContext);  int n=outcomes.length;  SimpleDataSource<FakeImage> dataSource=SimpleDataSource.create();  when(mDataSourceSupplier.get()).thenReturn(dataSource);  List<FakeImage> images=new ArrayList<>();  for (int i=0; i < n; i++) {    images.add(FakeImage.create(mock(Drawable.class),mock(FakeImageInfo.class)));  }  for (int i=0; i < numImmediate; i++) {    finish(dataSource,images.get(i),outcomes[i]);  }  controller.setHierarchy(mDraweeHierarchy);  controller.onAttach();  verify(mDraweeHierarchy).setProgress(0,true);  for (int i=numImmediate; i < n; i++) {    finish(dataSource,images.get(i),outcomes[i]);  }  verify(mDataSourceSupplier).get();  for (int i=0; i < n; i++) {    verifyDhInteraction(dhInteraction[i],images.get(i).getDrawable(),0 < numImmediate);  }  assertTrue(dataSource.isClosed());  controller.onDetach();  for (int i=0; i < n; i++) {    assertTrue(images.get(i).isOpened() == images.get(i).isClosed());  }  verifyNoMoreInteractions(mDataSourceSupplier);}  }
class C{  public static void valueToDocument(Value value,String rootNodeName,Document document,XSType type){  Element root=document.createElement(rootNodeName);  document.appendChild(root);  _valueToDocument(value,root,document,type);}  }
class C{  private static void SetFloatArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetFloatArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    float[] destinationArray=(float[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex << LOG_BYTES_IN_FLOAT),bufAddress,length << LOG_BYTES_IN_FLOAT);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected CoverageFormat2(RandomAccessFile raf) throws IOException {  rangeCount=raf.readUnsignedShort();  rangeRecords=new RangeRecord[rangeCount];  for (int i=0; i < rangeCount; i++) {    rangeRecords[i]=new RangeRecord(raf);  }}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.Scale.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.Scale.defaultLabelVisible",Boolean.toString(defaultLabelVisible));  properties.setProperty("MapElement.Scale.defaultAutoLabel",Boolean.toString(defaultAutoLabel));  properties.setProperty("MapElement.Scale.defaultCellCount",Integer.toString(defaultCellCount));  properties.setProperty("MapElement.Scale.defaultAzimuth",Double.toString(defaultAzimuth));  properties.setProperty("MapElement.Scale.defaultTilt",Double.toString(defaultTilt));}  }
class C{  private static void checkIgniteHome(String igniteHome){  URL jarUrl=U.class.getProtectionDomain().getCodeSource().getLocation();  try {    Path jar=Paths.get(jarUrl.toURI());    Path igHome=Paths.get(igniteHome);    if (!jar.startsWith(igHome))     exit("Ignite JAR files are not under IGNITE_HOME.",null);  } catch (  Exception e) {    exit(e.getMessage(),e);  }}  }
class C{  public static QueryArrays parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryArrays object=new QueryArrays();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryArrays".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryArrays)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","arrayUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","arrayUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setArrayUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void testMissingLast() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  iw.addDocument(doc);  doc=new Document();  doc.add(new LatLonDocValuesField("location",40.718266,-74.007819));  iw.addDocument(doc);  doc=new Document();  doc.add(new LatLonDocValuesField("location",40.7051157,-74.0088305));  iw.addDocument(doc);  IndexReader reader=iw.getReader();  IndexSearcher searcher=newSearcher(reader);  iw.close();  Sort sort=new Sort(LatLonDocValuesField.newDistanceSort("location",40.7143528,-74.0059731));  TopDocs td=searcher.search(new MatchAllDocsQuery(),3,sort);  FieldDoc d=(FieldDoc)td.scoreDocs[0];  assertEquals(462.1028401330431D,(Double)d.fields[0],0.0D);  d=(FieldDoc)td.scoreDocs[1];  assertEquals(1054.9842850974826,(Double)d.fields[0],0.0D);  d=(FieldDoc)td.scoreDocs[2];  assertEquals(Double.POSITIVE_INFINITY,(Double)d.fields[0],0.0D);  reader.close();  dir.close();}  }
class C{  protected SuperLiteralImpl(){  super();}  }
class C{  public String encodeBody(){  return Integer.toString(majorVersion) + DOT + Integer.toString(minorVersion);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void close() throws OperatorException {  if (isReading) {    shouldStop=true;  }}  }
class C{  private void syncFlashIndicator(){  ButtonManager buttonManager=mController.getButtonManager();  if ((buttonManager.isEnabled(ButtonManager.BUTTON_FLASH) && buttonManager.isVisible(ButtonManager.BUTTON_FLASH)) || (buttonManager.isEnabled(ButtonManager.BUTTON_TORCH) && buttonManager.isVisible(ButtonManager.BUTTON_TORCH))) {    int modeIndex=mController.getCurrentModuleIndex();    if (modeIndex == mController.getAndroidContext().getResources().getInteger(R.integer.camera_mode_video)) {      setIndicatorState(mController.getCameraScope(),Keys.KEY_VIDEOCAMERA_FLASH_MODE,mFlashIndicator,mFlashIndicatorVideoIcons,false);    } else     if (modeIndex == mController.getAndroidContext().getResources().getInteger(R.integer.camera_mode_gcam)) {      setIndicatorState(mController.getCameraScope(),Keys.KEY_HDR_PLUS_FLASH_MODE,mFlashIndicator,mFlashIndicatorPhotoIcons,false);    } else {      setIndicatorState(mController.getCameraScope(),Keys.KEY_FLASH_MODE,mFlashIndicator,mFlashIndicatorPhotoIcons,false);    }  } else {    changeVisibility(mFlashIndicator,View.GONE);  }}  }
class C{  public CategoryLabelEntity(Comparable key,Shape area,String toolTipText,String urlText){  super(area,toolTipText,urlText);  this.key=key;}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  final DBIDs ids=relation.getDBIDs();  DistanceQuery<O> distFunc=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnq=database.getKNNQuery(distFunc,k,DatabaseQuery.HINT_HEAVY_USE);  RangeQuery<O> rnnQuery=database.getRangeQuery(distFunc,DatabaseQuery.HINT_HEAVY_USE);  StepProgress stepProg=LOG.isVerbose() ? new StepProgress("DWOF",2) : null;  WritableDoubleDataStore dwofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_DB | DataStoreFactory.HINT_HOT,0.);  if (stepProg != null) {    stepProg.beginStep(1,"Initializing objects' Radii",LOG);  }  WritableDoubleDataStore radii=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT,0.);  initializeRadii(ids,knnq,distFunc,radii);  WritableIntegerDataStore oldSizes=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_HOT,1);  WritableIntegerDataStore newSizes=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_HOT,1);  int countUnmerged=relation.size();  if (stepProg != null) {    stepProg.beginStep(2,"Clustering-Evaluating Cycles.",LOG);  }  IndefiniteProgress clusEvalProgress=LOG.isVerbose() ? new IndefiniteProgress("Evaluating DWOFs",LOG) : null;  while (countUnmerged > 0) {    LOG.incrementProcessed(clusEvalProgress);    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      radii.putDouble(iter,radii.doubleValue(iter) * delta);    }    WritableDataStore<ModifiableDBIDs> labels=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_TEMP,ModifiableDBIDs.class);    clusterData(ids,rnnQuery,radii,labels);    WritableIntegerDataStore temp=newSizes;    newSizes=oldSizes;    oldSizes=temp;    countUnmerged=updateSizes(ids,labels,newSizes);    labels.destroy();    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      double newScore=(newSizes.intValue(iter) > 0) ? ((double)(oldSizes.intValue(iter) - 1) / (double)newSizes.intValue(iter)) : 0.0;      dwofs.putDouble(iter,dwofs.doubleValue(iter) + newScore);    }  }  LOG.setCompleted(clusEvalProgress);  LOG.setCompleted(stepProg);  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    minmax.put(dwofs.doubleValue(iter));  }  OutlierScoreMeta meta=new InvertedOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY);  DoubleRelation rel=new MaterializedDoubleRelation("Dynamic-Window Outlier Factors","dwof-outlier",dwofs,ids);  return new OutlierResult(meta,rel);}  }
class C{  @Ignore public void testMondayThroughFridayTranslations() throws ParseException {  verifyFillInExceptions(this.mondayFridayTimeline,US_HOLIDAYS,DATE_FORMAT);  verifyTranslations(this.mondayFridayTimeline,this.monday.getTime().getTime());}  }
class C{  public void testRandom() throws Exception {  for (int iters=0; iters < 100; iters++) {    doRandomTest(10,100);  }}  }
class C{  private void writeStuffed(int b) throws IOException {  out.write(0xff);  if (b == 0xff) {    out.write(0);  }}  }
class C{  public void init_scan_tables(){  int i;  for (i=0; i < 16; i++) {    this.zigzag_scan[i]=(H264Data.zigzag_scan[i] >> 2) | ((H264Data.zigzag_scan[i] << 2) & 0x0F);    this.field_scan[i]=(H264Data.field_scan[i] >> 2) | ((H264Data.field_scan[i] << 2) & 0x0F);  }  for (i=0; i < 64; i++) {    this.zigzag_scan8x8[i]=(ff_zigzag_direct[i] >> 3) | ((ff_zigzag_direct[i] & 7) << 3);    this.zigzag_scan8x8_cavlc[i]=(H264Data.zigzag_scan8x8_cavlc[i] >> 3) | ((H264Data.zigzag_scan8x8_cavlc[i] & 7) << 3);    this.field_scan8x8[i]=(H264Data.field_scan8x8[i] >> 3) | ((H264Data.field_scan8x8[i] & 7) << 3);    this.field_scan8x8_cavlc[i]=(H264Data.field_scan8x8_cavlc[i] >> 3) | ((H264Data.field_scan8x8_cavlc[i] & 7) << 3);  }  if (this.sps.transform_bypass != 0) {    this.zigzag_scan_q0=H264Data.zigzag_scan;    this.zigzag_scan8x8_q0=ff_zigzag_direct;    this.zigzag_scan8x8_cavlc_q0=H264Data.zigzag_scan8x8_cavlc;    this.field_scan_q0=H264Data.field_scan;    this.field_scan8x8_q0=H264Data.field_scan8x8;    this.field_scan8x8_cavlc_q0=H264Data.field_scan8x8_cavlc;  } else {    this.zigzag_scan_q0=this.zigzag_scan;    this.zigzag_scan8x8_q0=this.zigzag_scan8x8;    this.zigzag_scan8x8_cavlc_q0=this.zigzag_scan8x8_cavlc;    this.field_scan_q0=this.field_scan;    this.field_scan8x8_q0=this.field_scan8x8;    this.field_scan8x8_cavlc_q0=this.field_scan8x8_cavlc;  }}  }
class C{  public FontChooserHandler(DrawingEditor editor,AttributeKey<Font> key,JFontChooser fontChooser,JPopupMenu popupMenu){  super(editor);  this.key=key;  this.fontChooser=fontChooser;  this.popupMenu=popupMenu;  fontChooser.addActionListener(this);  fontChooser.addPropertyChangeListener(this);  updateEnabledState();}  }
class C{  public SpiderWebPlot(CategoryDataset dataset,TableOrder extract){  super();  ParamChecks.nullNotPermitted(extract,"extract");  this.dataset=dataset;  if (dataset != null) {    dataset.addChangeListener(this);  }  this.dataExtractOrder=extract;  this.headPercent=DEFAULT_HEAD;  this.axisLabelGap=DEFAULT_AXIS_LABEL_GAP;  this.axisLinePaint=Color.black;  this.axisLineStroke=new BasicStroke(1.0f);  this.interiorGap=DEFAULT_INTERIOR_GAP;  this.startAngle=DEFAULT_START_ANGLE;  this.direction=Rotation.CLOCKWISE;  this.maxValue=DEFAULT_MAX_VALUE;  this.seriesPaint=null;  this.seriesPaintList=new PaintList();  this.baseSeriesPaint=null;  this.seriesOutlinePaint=null;  this.seriesOutlinePaintList=new PaintList();  this.baseSeriesOutlinePaint=DEFAULT_OUTLINE_PAINT;  this.seriesOutlineStroke=null;  this.seriesOutlineStrokeList=new StrokeList();  this.baseSeriesOutlineStroke=DEFAULT_OUTLINE_STROKE;  this.labelFont=DEFAULT_LABEL_FONT;  this.labelPaint=DEFAULT_LABEL_PAINT;  this.labelGenerator=new StandardCategoryItemLabelGenerator();  this.legendItemShape=DEFAULT_LEGEND_ITEM_CIRCLE;}  }
class C{  public static String encodePath(String value){  return encodeValue(value,pathEncoding);}  }
class C{  public boolean remove(HttpConnection connection){  TimeValues times=connectionToTimes.remove(connection);  if (times == null) {    log.warn("Removing a connection that never existed!");    return true;  } else {    return System.currentTimeMillis() <= times.timeExpires;  }}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void hideRingingNotification(){  sNotificationManager.cancel(NOTIFICATION_STOP_RINGING);}  }
class C{  public CloneNotSupportedException(){  super();}  }
class C{  public String convertSWFToHTML(File in) throws Exception {  return convertSWFToHTML(new FileInputStream(in));}  }
class C{  public void close(){  _isClosed=true;}  }
class C{  private void loadAES(final String password) throws IOException {  String decoded;  decoded=AES_256_CBC.decrypt(mStoreFile,password);  mProperties.load(new ByteArrayInputStream(decoded.getBytes()));}  }
class C{  public void processOutputFormats(final Map<String,String> params,final String[] outputFormats){  List<String> outputFormatList=new ArrayList<>();  if (outputFormats != null && outputFormats.length > 0) {    Collections.addAll(outputFormatList,outputFormats);  } else {    if (LOGGER.isInfoEnabled()) {      LOGGER.info("No valid output formats specified, therefore use the default (all for sequence type " + this.sequenceType + ")");    }    for (    FileOutputFormat outputFormat : FileOutputFormat.values()) {      String extension=outputFormat.getFileExtension();      if (extension.equalsIgnoreCase(FileOutputFormat.SVG.getFileExtension()) || extension.equalsIgnoreCase(FileOutputFormat.HTML.getFileExtension()) || extension.equalsIgnoreCase(FileOutputFormat.RAW.getFileExtension())|| extension.equalsIgnoreCase(FileOutputFormat.GFF3_PARTIAL.getFileExtension())|| extension.equalsIgnoreCase(FileOutputFormat.XML_SLIM.getFileExtension())) {        continue;      }      outputFormatList.add(extension);    }  }  params.put(WriteOutputStep.OUTPUT_FILE_FORMATS,StringUtils.collectionToCommaDelimitedString(outputFormatList));}  }
class C{  public void resendNode(final String nodeId){synchronized (this) {    TopologyMemberImpl memberInput=topology.get(nodeId);    if (memberInput != null) {      memberInput.setUniqueEventID(System.currentTimeMillis());      sendMemberUp(nodeId,memberInput);    }  }}  }
class C{  public static void main(String[] argv){  Debug.init();  ArgParser ap=new ArgParser("RpfDataPathWanderer");  if (argv.length == 0) {    ap.bail("",true);  }  String[] dirs=argv;  RpfDataPathWanderer wanderer=new RpfDataPathWanderer();  for (int i=0; i < dirs.length; i++) {    wanderer.handleEntry(new File(dirs[i]));  }  for (  String path : wanderer.getDataPaths()) {    System.out.println("found: " + path);  }}  }
class C{  public GPUImageFilterGroup(){  this(null);}  }
class C{  protected boolean shouldSwapInputs(NodeValueMap nodeValueMap){  final boolean xHasOtherUsages=getX().hasUsagesOtherThan(this,nodeValueMap);  final boolean yHasOtherUsages=getY().hasUsagesOtherThan(this,nodeValueMap);  if (!getY().isConstant() && !yHasOtherUsages) {    if (xHasOtherUsages == yHasOtherUsages) {      return getY() instanceof ValuePhiNode && getY().inputs().contains(this);    } else {      return true;    }  }  return false;}  }
class C{  @ObjectiveCName("bindRawFileWithReference:autoStart:withCallback:") public void bindRawFile(FileReference fileReference,boolean isAutoStart,FileCallback callback){  modules.getFilesModule().bindFile(fileReference,isAutoStart,callback);}  }
class C{  private static void addCommentLines(final ZyLabelContent content,final INaviViewNode node,final List<IComment> localComment,final List<IComment> globalComment){  Preconditions.checkNotNull(content,"IE01530: Content argument can't be null");  final ColorsConfigItem colorSettings=ConfigManager.instance().getColorSettings();  if (localComment != null) {    addCommentLines(content,localComment,colorSettings.getLocalCommentColor(),new CLocalNodeCommentWrapper(node));  }  if (globalComment != null) {    addCommentLines(content,globalComment,colorSettings.getGlobalCommentColor(),new CGlobalNodeCommentWrapper(node));  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_complexAttribute_1_();}  }
class C{  public int readByte() throws DecodingException {  skip();  if (input == null || inputIndex >= input.length) {    return -1;  }  return 0xFF & input[inputIndex++];}  }
class C{  public static byte hexDigitToByte(char hDigit){  if (hDigit <= '9')   return (byte)(hDigit - '0');  if (hDigit <= 'G')   return (byte)(hDigit - ('A' - 10));  return (byte)(hDigit - ('a' - 10));}  }
class C{  Node<E> first(){  restartFromHead:   for (; ; ) {    for (Node<E> h=head, p=h, q; ; ) {      boolean hasItem=(p.item != null);      if (hasItem || (q=p.next) == null) {        updateHead(h,p);        return hasItem ? p : null;      } else       if (p == q)       continue restartFromHead; else       p=q;    }  }}  }
class C{  public synchronized boolean fileNameExists(String name){  for (  LogIndexEntry indexEntry : index) {    if (indexEntry.fileName.equals(name))     return true;  }  return false;}  }
class C{  public SphereConstraint(Sphere sphere,boolean isBoundary){  this.sphere=sphere;  this.isBoundingSphere=isBoundary;}  }
class C{  public SceneAnalysis analyzeScene(Mat scene,ObjectAnalysis analysis) throws IllegalArgumentException {  MatOfKeyPoint keypointsScene=new MatOfKeyPoint();  detector.detect(scene,keypointsScene);  Mat descriptorsScene=new Mat();  extractor.compute(scene,keypointsScene,descriptorsScene);  if (analysis == null) {    throw new IllegalArgumentException("Analysis must not be null!");  }  if (analysis.descriptors.cols() != descriptorsScene.cols() || analysis.descriptors.type() != descriptorsScene.type()) {    throw new IllegalArgumentException("Object and scene descriptors do not match in cols() or type().");  }  MatOfDMatch matches=new MatOfDMatch();  matcher.match(analysis.descriptors,descriptorsScene,matches);  return new SceneAnalysis(keypointsScene,descriptorsScene,matches,scene);}  }
class C{  @ObjectiveCName("sendMessageWithPeer:withText:") public void sendMessage(@NotNull Peer peer,@NotNull String text){  sendMessage(peer,text,null,null,true);}  }
class C{  public static CCTwirl action(CGPoint pos,int t,float amp,ccGridSize gridSize,float d){  return new CCTwirl(pos,t,amp,gridSize,d);}  }
class C{  private JMenu createEditMenu(){  JMenu edit=new JMenu("Edit");  JMenuItem copy=new JMenuItem(new CopySubgraphAction(this));  JMenuItem paste=new JMenuItem(new PasteSubgraphAction(this));  copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));  paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK));  edit.add(copy);  edit.add(paste);  return edit;}  }
class C{  public static long msToAppWindowCount(OperatorContext context,long millis){  Preconditions.checkArgument(millis > 0);  long appWindowDurationMS=getAppWindowDurationMs(context);  long appWindowCount=millis / appWindowDurationMS;  if (millis % appWindowDurationMS != 0) {    appWindowCount++;  }  return appWindowCount;}  }
class C{  private double[] evaluate(double[] x_var){  double[] y_obj=new double[numberOfObjectives];  if (numberOfObjectives == 2) {    if ((lType == 21) || (lType == 22) || (lType == 23)|| (lType == 24)|| (lType == 26)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 2 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else     if (lType == 25) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 3 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else         if (n % 3 == 1) {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        } else {          double c=psfunc2(x_var[n],x_var[0],n,3);          if (n % 2 == 0) {            aa.add(c);          } else {            bb.add(c);          }        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else {      throw new IllegalStateException();    }  } else   if (numberOfObjectives == 3) {    if ((lType == 31) || (lType == 32)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      List<Double> cc=new ArrayList<Double>();      for (int n=2; n < numberOfVariables; n++) {        double a=psfunc3(x_var[n],x_var[0],x_var[1],n);        if (n % 3 == 0) {          aa.add(a);        } else         if (n % 3 == 1) {          bb.add(a);        } else {          cc.add(a);        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double e=betafunction(toArray(cc));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;      y_obj[2]=alpha[2] + e;    } else {      throw new IllegalStateException();    }  } else {    throw new IllegalStateException();  }  return y_obj;}  }
class C{  public GaussianNormalInit(double stndDev){  this.stndDev=stndDev;}  }
class C{  public Source<String> numeric(){  return numericBetween(Integer.MIN_VALUE,Integer.MAX_VALUE);}  }
class C{  public void addSeries(float[] values,int seriesNumber,Comparable seriesKey){  invalidateRangeInfo();  int i;  if (values == null) {    throw new IllegalArgumentException("TimeSeriesDataset.addSeries(): " + "cannot add null array of values.");  }  if (seriesNumber >= this.valueHistory.length) {    throw new IllegalArgumentException("TimeSeriesDataset.addSeries(): " + "cannot add more series than specified in c'tor");  }  if (this.valueHistory[seriesNumber] == null) {    this.valueHistory[seriesNumber]=new ValueSequence(this.historyCount);    this.seriesCount++;  }  int srcLength=values.length;  int copyLength=this.historyCount;  boolean fillNeeded=false;  if (srcLength < this.historyCount) {    fillNeeded=true;    copyLength=srcLength;  }  for (i=0; i < copyLength; i++) {    this.valueHistory[seriesNumber].enterData(i,values[i]);  }  if (fillNeeded) {    for (i=copyLength; i < this.historyCount; i++) {      this.valueHistory[seriesNumber].enterData(i,0.0f);    }  }  if (seriesKey != null) {    this.seriesKeys[seriesNumber]=seriesKey;  }  fireSeriesChanged();}  }
class C{  protected boolean hasCompressedThumbnail(){  return mThumbnail != null;}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  return new Builder<K,V>(Ordering.natural()).put(k1,v1).put(k2,v2).put(k3,v3).put(k4,v4).build();}  }
class C{  public NoteComment(Note note,String description){  this.note=note;  text=description;  timestamp=new Date();}  }
class C{  public Document readDocument(Reader reader,String systemId) throws XMLStreamException {  XMLEventReader eventReader=inputFactory.createXMLEventReader(systemId,reader);  try {    return readDocument(eventReader);  }  finally {    eventReader.close();  }}  }
class C{  public void enumerateGrammarTree(GrammarNode gn){  Queue q=new LinkedList();  int gnIndex=0;  int fIndex=0;  int rIndex=0;  ruleHeadToIndex.put(gn.getHead(),rIndex++);  q.add(gn);  while (!q.isEmpty()) {    GrammarNode temp=(GrammarNode)q.remove();    for (int i=0; i < temp.children.size(); i++) {      GrammarRuleNode grn=new GrammarRuleNode(temp.head);      GrammarNode child=((GrammarRuleNode)temp).getChoice(i);      grn.children.add(child);      productionRuleList.add(grn);      indexToRule.put(gnIndex,grn);      ruleToIndex.put(grn,gnIndex);      gnIndex++;      if (child instanceof GrammarRuleNode) {        ruleHeadToIndex.put(child.getHead(),rIndex++);        q.add(child);      } else       if (child instanceof GrammarFunctionNode)       functionHeadToIndex.put(child.getHead(),fIndex++);    }  }  String oldHead=((GrammarNode)indexToRule.get(Integer.valueOf(0))).getHead();  absIndexToRelIndex.put(new Integer(0),new Integer(0));  for (int absIndex=1, relIndex=1; absIndex < indexToRule.size(); absIndex++) {    String currentHead=((GrammarNode)indexToRule.get(new Integer(absIndex))).getHead();    if (!currentHead.equals(oldHead))     relIndex=0;    absIndexToRelIndex.put(new Integer(absIndex),new Integer(relIndex++));    oldHead=currentHead;  }}  }
class C{  private <T extends EppResource>void assertForeignKeyIndexFor(final T resource){  assertThat(ForeignKeyIndex.load(resource.getClass(),resource.getForeignKey(),clock.nowUtc())).isNotNull();}  }
class C{  public Frame(final Frame<? extends V> src){  this(src.locals,src.values.length - src.locals);  init(src);}  }
class C{  public boolean containsTradingday(Tradingday tradingday){synchronized (this.tradingdays) {    for (    Tradingday item : this.tradingdays) {      if (item.equals(tradingday))       return true;    }  }  return false;}  }
class C{  public JsonArray add(boolean value){  values.add(Json.value(value));  return this;}  }
class C{  public static int convertToIntInLongArray(final byte[] src,final int sFrom,final int sTo,final long[] dest,final int dFrom,final int dTo){  final int sLength=sTo - sFrom;  checkSource(sLength,4);  checkDestination(sLength,dTo - dFrom,4);  return convertToIntInLongArrayInternal(src,sFrom,sTo,dest,dFrom);}  }
class C{  @Override public void execute(){  try {    for (    final FileSet fileset : filesets) {      final DirectoryScanner ds=fileset.getDirectoryScanner(getProject());      final String[] includedFiles=ds.getIncludedFiles();      for (      final String filename : includedFiles) {        System.out.println(ds.getBasedir().getAbsolutePath() + File.separator + filename);        convert(ds.getBasedir().getAbsolutePath() + File.separator + filename);      }    }  } catch (  final Exception e) {    throw new BuildException(e);  }}  }
class C{  public String instancesIndicesTipText(){  return "The range of instances to select. First and last are valid indexes.";}  }
class C{  public final TestSubscriber assertComplete(){  String prefix="";  boolean passed=true;  if (done.getCount() != 0) {    prefix="Subscriber still running! ";    fail("subscriber still running");    passed=false;  }  long c=completions;  if (c == 0) {    fail(prefix,"Not completed",errors);    fail("not complete");    passed=false;  } else   if (c > 1) {    fail(prefix,"Multiple completions: " + c,errors);    fail("multiple completes");    passed=false;  }  pass("assert Complete",passed);  return this;}  }
class C{  public void testNestedNotRegistered() throws Exception {  checkNested(false);}  }
class C{  public boolean isNot(){  return not;}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public void info(){  DecimalFormat format=DisplayType.getNumberFormat(DisplayType.Amount);  BigDecimal total=new BigDecimal(0.0);  int rows=window.getWListbox().getRowCount();  int count=0;  for (int i=0; i < rows; i++) {    if (((Boolean)window.getWListbox().getValueAt(i,0)).booleanValue()) {      total=total.add((BigDecimal)window.getWListbox().getValueAt(i,4));      count++;    }  }  window.setStatusLine(count,Msg.getMsg(Env.getCtx(),"Sum") + "  " + format.format(total));}  }
class C{  public static Geometry convertGeoJsonToJtsGeometry(GeoJsonObject geoJsonGeom) throws UnsupportedGeometryException {  if (geoJsonGeom instanceof org.geojson.Point) {    org.geojson.Point geoJsonPoint=(org.geojson.Point)geoJsonGeom;    return geometryFactory.createPoint(new Coordinate(geoJsonPoint.getCoordinates().getLongitude(),geoJsonPoint.getCoordinates().getLatitude()));  } else   if (geoJsonGeom instanceof org.geojson.Polygon) {    org.geojson.Polygon geoJsonPolygon=(org.geojson.Polygon)geoJsonGeom;    LinearRing shell=geometryFactory.createLinearRing(convertPath(geoJsonPolygon.getExteriorRing()));    LinearRing[] holes=new LinearRing[geoJsonPolygon.getInteriorRings().size()];    int i=0;    for (    List<LngLatAlt> hole : geoJsonPolygon.getInteriorRings()) {      holes[i++]=geometryFactory.createLinearRing(convertPath(hole));    }    return geometryFactory.createPolygon(shell,holes);  } else   if (geoJsonGeom instanceof org.geojson.MultiPolygon) {    org.geojson.MultiPolygon geoJsonMultiPolygon=(org.geojson.MultiPolygon)geoJsonGeom;    Polygon[] jtsPolygons=new Polygon[geoJsonMultiPolygon.getCoordinates().size()];    int i=0;    for (    List<List<LngLatAlt>> geoJsonRings : geoJsonMultiPolygon.getCoordinates()) {      org.geojson.Polygon geoJsonPoly=new org.geojson.Polygon();      for (      List<LngLatAlt> geoJsonRing : geoJsonRings)       geoJsonPoly.add(geoJsonRing);      jtsPolygons[i++]=(Polygon)convertGeoJsonToJtsGeometry(geoJsonPoly);    }    return geometryFactory.createMultiPolygon(jtsPolygons);  } else   if (geoJsonGeom instanceof org.geojson.LineString) {    org.geojson.LineString geoJsonLineString=(org.geojson.LineString)geoJsonGeom;    return geometryFactory.createLineString(convertPath(geoJsonLineString.getCoordinates()));  } else   if (geoJsonGeom instanceof org.geojson.MultiLineString) {    org.geojson.MultiLineString geoJsonMultiLineString=(org.geojson.MultiLineString)geoJsonGeom;    LineString[] jtsLineStrings=new LineString[geoJsonMultiLineString.getCoordinates().size()];    int i=0;    for (    List<LngLatAlt> geoJsonPath : geoJsonMultiLineString.getCoordinates()) {      org.geojson.LineString geoJsonLineString=new org.geojson.LineString(geoJsonPath.toArray(new LngLatAlt[geoJsonPath.size()]));      jtsLineStrings[i++]=(LineString)convertGeoJsonToJtsGeometry(geoJsonLineString);    }    return geometryFactory.createMultiLineString(jtsLineStrings);  }  throw new UnsupportedGeometryException(geoJsonGeom.getClass().toString());}  }
class C{  public void clearDiskCache(){  if (null != mFileCache) {    try {      mFileCache.getDiskCache().clear();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  @POST @Path("/{id}/deactivate") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deactivateCustomConfig(@PathParam("id") URI id){  CustomConfig customConfig=getCustomConfigById(id,true);  ArgValidator.checkReference(CustomConfig.class,id,checkForDelete(customConfig));  if (customConfig.getSystemDefault()) {    throw APIException.badRequests.systemDefaultConfigCouldNotBeModifiedOrDeactivated(customConfig.getId());  }  customConfig.setRegistered(false);  _dbClient.markForDeletion(customConfig);  auditOp(OperationTypeEnum.DELETE_CONFIG,true,null,id.toString(),customConfig.getLabel(),customConfig.getScope());  return Response.ok().build();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static ESRIBoundingBox readBox(byte[] b,int off){  ESRIBoundingBox bb=new ESRIBoundingBox();  bb.min=readPoint(b,off);  bb.max=readPoint(b,off + 16);  return bb;}  }
class C{  public double errorValue(NeuralNode node){  NeuralConnection[] outputs=node.getOutputs();  int[] oNums=node.getOutputNums();  double error=0;  for (int noa=0; noa < node.getNumOutputs(); noa++) {    error+=outputs[noa].errorValue(true) * outputs[noa].weightValue(oNums[noa]);  }  double value=node.outputValue(false);  error*=value * (1 - value);  return error;}  }
class C{  public byte[] rowKey(String profile,String entity,ProfilePeriod period,List<Object> groups){  byte[] salt=getSalt(period,saltDivisor);  byte[] prefixKey=prefixKey(profile,entity);  byte[] groupKey=groupKey(groups);  byte[] timeKey=timeKey(period);  int capacity=salt.length + prefixKey.length + groupKey.length+ timeKey.length;  return ByteBuffer.allocate(capacity).put(salt).put(prefixKey).put(groupKey).put(timeKey).array();}  }
class C{  private boolean evaluateResult(String actualValue,String expectedValue,String condition,Variables variables){  if (condition == null) {    return false;  }  boolean testResult=true;  expectedValue=processVariable(variables,expectedValue);  expectedValue=processFunction(expectedValue,variables);  expectedValue=variables.evaluate(expectedValue);  ValidationType validationType=ValidationType.getValidationType(condition);  if (validationType == ValidationType.empty) {    testResult=StringUtils.isEmpty(actualValue);  } else   if (validationType == ValidationType.notempty) {    testResult=!StringUtils.isEmpty(actualValue);  } else   if (validationType == ValidationType.equals) {    testResult=expectedValue.equalsIgnoreCase(actualValue);  } else   if (validationType == ValidationType.notequals) {    testResult=!expectedValue.equalsIgnoreCase(actualValue);  } else   if (validationType == ValidationType.contains) {    testResult=!StringUtils.isEmpty(actualValue) && actualValue.toLowerCase().contains(expectedValue.toLowerCase());  } else   if (validationType == ValidationType.doesnotcontain) {    testResult=actualValue == null || !actualValue.toLowerCase().contains(expectedValue.toLowerCase());  } else   if (validationType == ValidationType.lessthan) {    testResult=compare(actualValue,expectedValue) < 0;  } else   if (validationType == ValidationType.greaterthan) {    testResult=compare(actualValue,expectedValue) > 0;  } else {    testResult=false;  }  return testResult;}  }
class C{  private static void sort(char[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        char ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        char a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      char last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    char t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    char t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    char t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    char t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    char pivot1=a[e2];    char pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      char ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        char ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    char pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      char ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  @Override public Blorp deleteBack(){  Node back=getBackNode();  if (back == sentinel) {    return null;  }  Node p=sentinel;  while (p.next != back) {    p=p.next;  }  p.next=null;  return back.item;}  }
class C{  public Environment.Variable createSysProperty(String key,Path path){  Environment.Variable var=new Environment.Variable();  var.setKey(key);  var.setPath(path);  return var;}  }
class C{  protected void assertNotEnded(){  if (this.ended) {    throw new IllegalStateException(JBBPOut.class.getSimpleName() + " has been ended");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.783 -0500",hash_original_method="A082C8E505553F853E56AAFC11CF0CDA",hash_generated_method="471E50739C85C5CEFB84FC22E144AB1A") public final void scale(float scale){  nativeScale(mNativePtr,scale);}  }
class C{  public static void delete(String f){  delete(new File(f));}  }
class C{  @Override public boolean isSigned(int param) throws SQLException {  try {    debugCodeCall("isSigned",param);    getParameter(param);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final static boolean isUppercaseAlpha(char c){  return (c >= 'A') && (c <= 'Z');}  }
class C{  private VoicemailContract(){}  }
class C{  public static boolean updatePreferenceToSpecificActivityOrRemove(Context context,PreferenceGroup parentPreferenceGroup,String preferenceKey,int flags){  Preference preference=parentPreferenceGroup.findPreference(preferenceKey);  if (preference == null) {    return false;  }  Intent intent=preference.getIntent();  if (intent != null) {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> list=pm.queryIntentActivities(intent,0);    int listSize=list.size();    for (int i=0; i < listSize; i++) {      ResolveInfo resolveInfo=list.get(i);      if ((resolveInfo.activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {        preference.setIntent(new Intent().setClassName(resolveInfo.activityInfo.packageName,resolveInfo.activityInfo.name));        if ((flags & UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY) != 0) {          preference.setTitle(resolveInfo.loadLabel(pm));        }        return true;      }    }  }  parentPreferenceGroup.removePreference(preference);  return false;}  }
class C{  public void populateModule(final DistributionSet distributionSet){  removeAllItems();  if (null != distributionSet) {    if (isUnassignSoftModAllowed && permissionChecker.hasUpdateDistributionPermission()) {      try {        isTargetAssigned=false;      } catch (      final EntityLockedException exception) {        isTargetAssigned=true;        LOG.info("Target already assigned for the distribution set: " + distributionSet.getName(),exception);      }    }    final Set<SoftwareModuleType> swModuleMandatoryTypes=distributionSet.getType().getMandatoryModuleTypes();    final Set<SoftwareModuleType> swModuleOptionalTypes=distributionSet.getType().getOptionalModuleTypes();    if (null != swModuleMandatoryTypes && !swModuleMandatoryTypes.isEmpty()) {      swModuleMandatoryTypes.forEach(null);    }    if (null != swModuleOptionalTypes && !swModuleOptionalTypes.isEmpty()) {      swModuleOptionalTypes.forEach(null);    }  }}  }
class C{  public void p(String s) throws IOException {  write(s);}  }
class C{  public static synchronized void resetUniqueIdCounter(){  synch_counter=0;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:01.641 -0500",hash_original_method="A937CDF4977A6CFA8A3A1B3C5B973338",hash_generated_method="C837F7FAA76CC9E5CBEA50EF512EA5E0") public static final void sendString(Context c,String stringToSend,String chooserDialogTitle){  Intent send=new Intent(Intent.ACTION_SEND);  send.setType("text/plain");  send.putExtra(Intent.EXTRA_TEXT,stringToSend);  try {    Intent i=Intent.createChooser(send,chooserDialogTitle);    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    c.startActivity(i);  } catch (  android.content.ActivityNotFoundException ex) {  }}  }
class C{  public static boolean isBlank(String param){  return param == null || param.trim().isEmpty();}  }
class C{  @HLEFunction(nid=0xD0AEEE87,version=150) public int sceKernelStopVTimer(@CheckArgument("checkVTimerID") int vtimerUid){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  if (sceKernelVTimerInfo.active == SceKernelVTimerInfo.ACTIVE_STOPPED) {    return 0;  }  stopVTimer(sceKernelVTimerInfo);  return 1;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  void addTestClass(String classname){  if (classname.length() > 0) {    setOption("testclass",classname);    classnames.add(classname);  } else {    throw new IllegalArgumentException("class name may not be empty string");  }}  }
class C{  @Override public void put(int msgLevel,StringId msgId,Object[] params,Throwable ex){  String msg=msgId.toLocalizedString(params);  put(msgLevel,msg,ex);}  }
class C{  public static boolean memoryIsLow(){  return availableMemory() * 100 < RUNTIME.totalMemory() * 5;}  }
class C{  public TranslationImportException(String details){  super("Import Failed",new Object[]{details});  bean.setDetails(details);}  }
class C{  @Override public void run(){  amIActive=true;  String accumHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double channelizationThreshold=0;  double backValue=0;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      accumHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      channelizationThreshold=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().equals("nodata")) {        flag=true;      } else {        backValue=Double.parseDouble(args[i]);      }    }  }  if ((accumHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(accumHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (flag) {      backValue=noData;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",accumHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    double[] data=null;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > channelizationThreshold && data[col] != noData) {          output.setValue(row,col,1);        } else {          output.setValue(row,col,backValue);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (flaggedUsedInCode: ");  result.append(flaggedUsedInCode);  result.append(')');  return result.toString();}  }
class C{  public static boolean isConnected(NetworkInfo networkInfo){  return networkInfo != null && networkInfo.isAvailable() && networkInfo.isConnected();}  }
class C{  public TimeSynchronizationResult(final Deserializer deserializer){  this.timeStamp=UnixTime.fromDateString(deserializer.readString("dateTime"),new TimeInstant(0)).getTimeInstant();  this.currentTimeOffset=TimeOffset.readFrom(deserializer,"currentTimeOffset");  this.change=TimeOffset.readFrom(deserializer,"change");}  }
class C{  public void testWARAndEARDifference(){  WAR war=new WAR("/some/path/to/file.war");  EAR ear=new EAR("/file.ear");  assertNotSame(war.getType(),ear.getType());  assertTrue(war.getType() != ear.getType());}  }
class C{  public final void add(final URI serviceURI,final ServiceFactory factory){synchronized (this) {    if (aliases.containsKey(serviceURI)) {      throw new UnsupportedOperationException("Already declared.");    }    if (services.putIfAbsent(serviceURI,factory) != null) {      throw new UnsupportedOperationException("Already declared.");    }    if (factory instanceof CustomServiceFactory) {      customServices.add((CustomServiceFactory)factory);    }  }}  }
class C{  protected VersionConstraintImpl(){  super();}  }
class C{  public StateContext<S,E> preTransition(StateContext<S,E> stateContext){  for (  StateMachineInterceptor<S,E> interceptor : interceptors) {    if ((stateContext=interceptor.preTransition(stateContext)) == null) {      break;    }  }  return stateContext;}  }
class C{  public static void remove(MonKey key){  factory.remove(key);}  }
class C{  public URI relativize(URI uri){  if (isOpaque() || uri.isOpaque()) {    return uri;  }  if (getScheme() == null || uri.getScheme() == null || getScheme().equals(uri.getScheme()) == false) {    return uri;  }  String thisAuthority=null;  String thatAuthority=null;  String thisPath=null;  String thatPath=null;  if ((thisAuthority=getAuthority()) == null || (thatAuthority=uri.getAuthority()) == null || thisAuthority.equals(thatAuthority) == false) {    return uri;  }  if ((thisPath=getPath()) == null || (thatPath=uri.getPath()) == null || thatPath.startsWith(thisPath + PATH_SEPARATOR) == false) {    return uri;  }  try {    return new URI(null,null,thatPath.substring(thisPath.length() + 1),uri.getQuery(),uri.getFragment());  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public Lucene60Codec(Mode mode){  super("Lucene60");  this.storedFieldsFormat=new Lucene50StoredFieldsFormat(Objects.requireNonNull(mode));}  }
class C{  public void paint(Graphics g){  g.drawImage(splashImage,0,0,this);  if (!paintCalled) {    paintCalled=true;synchronized (this) {      notifyAll();    }  }}  }
class C{  @Override public ODataResponse readEntityComplexProperty(GetComplexPropertyUriInfo uri_info,String content_type) throws ODataException {  EdmProperty target=uri_info.getPropertyPath().get(uri_info.getPropertyPath().size() - 1);  String entityTarget=uri_info.getTargetEntitySet().getName();  Map<String,Object> values=V1Model.getEntitySet(entityTarget).getComplexProperty(uri_info);  return EntityProvider.writeProperty(content_type,target,values);}  }
class C{  @Override public void sync(){}  }
class C{  public void addType(String type){  listCarLoads.put(type,new ArrayList<CarLoad>());}  }
class C{  private String retrieveRpCopyName(VirtualPool vpool,VirtualArray varray,BlockConsistencyGroup consistencyGroup,boolean productionCopy){  String copyName="";  String existingCopyName=RPHelper.getCgCopyName(_dbClient,consistencyGroup,varray.getId(),productionCopy);  if (existingCopyName != null) {    copyName=existingCopyName;  } else {    copyName=varray.getLabel();    if (productionCopy) {      if (VirtualPool.vPoolSpecifiesMetroPoint(vpool)) {        VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,VPlexUtil.getHAVarray(vpool));        if (haVarray != null && haVarray.getId().equals(varray.getId())) {          copyName=copyName + MP_STANDBY_COPY_SUFFIX;        } else {          copyName=copyName + MP_ACTIVE_COPY_SUFFIX;        }      } else {        copyName=copyName + SRC_COPY_SUFFIX;      }    }  }  return copyName;}  }
class C{  protected void read(){}  }
class C{  public SessionEndedEvent(final String sessionId){  super(sessionId);}  }
class C{  public AnnotationFormatError(String message,Throwable cause){  super(message,cause);}  }
class C{  public P2Model copy(){  P2Model copy=new P2Model();  copy.copyFrom(this);  return copy;}  }
class C{  public boolean isConnected(){  return process != null;}  }
class C{  @Override public void navigateTo(String absolutePath){  if (Global.debugEnabled) {    Log.i(Global.LOG_CONTEXT,mDebugPrefix + " navigateTo : " + absolutePath);  }  mCurrentPath=absolutePath;  reloadDirGuiIfAvailable("navigateTo " + absolutePath);}  }
class C{  public void testRepetitiveIncreasingSloppiness3WithHoles() throws Exception {  Term t=randomTerm();  int pos1=1 + random().nextInt(3);  int pos2=pos1 + 1 + random().nextInt(3);  for (int i=0; i < 10; i++) {    PhraseQuery.Builder builder=new PhraseQuery.Builder();    builder.add(t,0);    builder.add(t,pos1);    builder.add(t,pos2);    builder.setSlop(i);    PhraseQuery q1=builder.build();    builder.setSlop(i + 1);    PhraseQuery q2=builder.build();    assertSubsetOf(q1,q2);    assertSubsetOf(q1,q2);  }}  }
class C{  default Literal toLiteral(final Object value){  final ValueFactory vf=Defaults.VF;  if (value instanceof Float) {    return vf.createLiteral((Float)value);  } else   if (value instanceof Double) {    return vf.createLiteral((Double)value);  } else   if (value instanceof Integer) {    return vf.createLiteral((Integer)value);  } else   if (value instanceof Long) {    return vf.createLiteral((Long)value);  } else   if (value instanceof Boolean) {    return vf.createLiteral((Boolean)value);  } else   if (value instanceof Short) {    return vf.createLiteral((Short)value);  } else   if (value instanceof Byte) {    return vf.createLiteral((Byte)value);  } else   if (value instanceof String) {    return vf.createLiteral((String)value);  } else {    throw new IllegalArgumentException(String.format("not supported: %s",value));  }}  }
class C{  public EsriPolylineMList(){  super();}  }
class C{  public static Object extractInnerConnectionFromSQLR(Object sqlrConnection) throws IOException {  if (logger.isTraceEnabled())   logger.trace("Getting SQL-Router inner connection");  try {    Field connectionField=sqlrConnection.getClass().getDeclaredField("realConnection");    connectionField.setAccessible(true);    sqlrConnection=connectionField.get(sqlrConnection);  } catch (  Exception e) {    throw new IOException(e.getLocalizedMessage());  }  return sqlrConnection;}  }
class C{  public boolean removeParameter(final String paramName,final String paramValue) throws IllegalArgumentException {  LOG.trace("enter PostMethod.removeParameter(String, String)");  if (paramName == null) {    throw new IllegalArgumentException("Parameter name may not be null");  }  if (paramValue == null) {    throw new IllegalArgumentException("Parameter value may not be null");  }  final Iterator iter=params.iterator();  while (iter.hasNext()) {    final NameValuePair pair=(NameValuePair)iter.next();    if (paramName.equals(pair.getName()) && paramValue.equals(pair.getValue())) {      iter.remove();      return true;    }  }  return false;}  }
class C{  public Iterator items(){  return items((Predicate)null);}  }
class C{  public static <T>Set<T> singleton(T o){  return new SingletonSet<>(o);}  }
class C{  private void findNextSample(ParsableByteArray pesBuffer){  byte[] adtsData=pesBuffer.data;  int position=pesBuffer.getPosition();  int endOffset=pesBuffer.limit();  while (position < endOffset) {    int data=adtsData[position++] & 0xFF;    if (matchState == MATCH_STATE_FF && data >= 0xF0 && data != 0xFF) {      hasCrc=(data & 0x1) == 0;      setReadingAdtsHeaderState();      pesBuffer.setPosition(position);      return;    }switch (matchState | data) {case MATCH_STATE_START | 0xFF:      matchState=MATCH_STATE_FF;    break;case MATCH_STATE_START | 'I':  matchState=MATCH_STATE_I;break;case MATCH_STATE_I | 'D':matchState=MATCH_STATE_ID;break;case MATCH_STATE_ID | '3':setReadingId3HeaderState();pesBuffer.setPosition(position);return;default :if (matchState != MATCH_STATE_START) {matchState=MATCH_STATE_START;position--;}break;}}pesBuffer.setPosition(position);}  }
class C{  public Dimension2DDouble(Dimension2DDouble d){  this(d.width,d.height);}  }
class C{  public void addParamQuery(String name,String value){  addParam(name,value,NameValuePair.TYPE_QUERY_STRING);}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,long[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putLongArray(name,value);  return this;}  }
class C{  synchronized protected void fastDisplayTimeout(){  if (Math.abs(targetSpeed - currentSpeed) < Math.abs(incSpeed)) {    currentSpeed=targetSpeed;  } else {    currentSpeed+=incSpeed;  }  if (currentSpeed < 0.01F) {    currentSpeed=0.0F;  }  showSpeed();}  }
class C{  private void updateQuest(){  PaperChase paperChase=(PaperChase)StendhalQuestSystem.get().getQuest("PaperChase");  if (paperChase != null) {    paperChase.setSign(sign);  }}  }
class C{  public boolean isFtsInContents(){  return ftsInContents;}  }
class C{  @TargetApi(LOLLIPOP) private BonjourEvent newBonjourEvent(BonjourEvent.Type type,NsdServiceInfo serviceInfo){  BonjourService.Builder serviceBuilder=new BonjourService.Builder(serviceInfo.getServiceName(),serviceInfo.getServiceType());  if (Build.VERSION.SDK_INT >= LOLLIPOP) {    Map<String,byte[]> attributes=serviceInfo.getAttributes();    for (    String key : attributes.keySet()) {      serviceBuilder.addTxtRecord(key,new String(attributes.get(key),Charset.forName("UTF-8")));    }  }  serviceBuilder.addAddress(serviceInfo.getHost());  serviceBuilder.setPort(serviceInfo.getPort());  return new BonjourEvent(type,serviceBuilder.build());}  }
class C{  public boolean closeDurableClientProxy(String durableClientId) throws CacheException {  CacheClientProxy ccp=getClientProxy(durableClientId);  if (ccp == null) {    return false;  }  if (ccp.isPaused() && !ccp.isConnected()) {    ccp.setKeepAlive(false);    closeDeadProxies(Collections.singletonList(ccp),true);    return true;  } else {    if (logger.isDebugEnabled()) {      logger.debug("Cannot close running durable client: {}",durableClientId);    }    throw new CacheException("Cannot close a running durable client : " + durableClientId){    };  }}  }
class C{  public static void paint3Deffect(Graphics2D g2D,JComponent c,boolean round,boolean out){  GradientPaint topPaint=null;  if (out)   topPaint=new GradientPaint(0,0,COL_1TOP,0,c.getHeight() / 2,COL_1END); else   topPaint=new GradientPaint(0,0,COL_2END,0,c.getHeight() / 2,COL_2TOP);  g2D.setPaint(topPaint);  RectangularShape topRec=null;  if (round)   topRec=new RoundRectangle2D.Float(0,0,c.getWidth(),c.getHeight() / 2,15,15); else   topRec=new Rectangle(0,0,c.getWidth(),c.getHeight() / 2);  g2D.fill(topRec);  GradientPaint endPaint=null;  if (out)   endPaint=new GradientPaint(0,c.getHeight() / 2,COL_2TOP,0,c.getHeight(),COL_2END); else   endPaint=new GradientPaint(0,c.getHeight() / 2,COL_1END,0,c.getHeight(),COL_1TOP);  g2D.setPaint(endPaint);  RectangularShape endRec=null;  if (round)   endRec=new RoundRectangle2D.Float(0,c.getHeight() / 2,c.getWidth(),c.getHeight() / 2,15,15); else   endRec=new Rectangle(0,c.getHeight() / 2,c.getWidth(),c.getHeight() / 2);  g2D.fill(endRec);}  }
class C{  public void loadProjectionAndLayers(MapHandler mapHandler,Properties props){  MapBean mapBean=(MapBean)mapHandler.get("com.bbn.openmap.MapBean");  LayerHandler layerHandler=(LayerHandler)mapHandler.get("com.bbn.openmap.LayerHandler");  if (layerHandler != null) {    layerHandler.removeAll();    layerHandler.init(Environment.OpenMapPrefix,props);  } else {    logger.warning("Can't load new layers - can't find LayerHandler");  }  if (mapBean != null) {    mapBean.setProjection(mapBean.getProjectionFactory().getDefaultProjectionFromEnvironment(Environment.getInstance(),mapBean.getWidth(),mapBean.getHeight()));  } else {    logger.warning("Can't load new projection - can't find MapBean");  }}  }
class C{  public void block(){synchronized (this) {    while (!mCondition) {      try {        this.wait();      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public byte[] engineCanonicalizeXPathNodeSet(Set<Node> xpathNodeSet,String inclusiveNamespaces) throws CanonicalizationException {  inclusiveNSSet=InclusiveNamespaces.prefixStr2Set(inclusiveNamespaces);  return super.engineCanonicalizeXPathNodeSet(xpathNodeSet);}  }
class C{  @Override public long estimate(DateRange range){  return chain.get(chain.size() - 1).estimate(range);}  }
class C{  public static Map<String,Object> migrateWorkEffortEventReminders(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  ModelEntity modelEntity=delegator.getModelEntity("WorkEffortEventReminder");  if (modelEntity != null && modelEntity.getField("recurrenceOffset") != null) {    List<GenericValue> eventReminders=null;    try {      eventReminders=EntityQuery.use(delegator).from("WorkEffortEventReminder").queryList();      for (      GenericValue reminder : eventReminders) {        if (UtilValidate.isNotEmpty(reminder.get("recurrenceOffset"))) {          reminder.set("reminderOffset",reminder.get("recurrenceOffset"));          reminder.store();        }      }    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"WorkEffortEventRemindersMigrationError",UtilMisc.toMap("errorString",e),locale));    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public static byte[] readFile(File file){  RandomAccessFile ra=null;  try {    ra=new RandomAccessFile(file,"r");    long len=ra.length();    if (len >= Integer.MAX_VALUE) {      throw new RuntimeException("File " + file.getPath() + " is too large");    }    byte[] buffer=new byte[(int)len];    ra.readFully(buffer);    ra.close();    return buffer;  } catch (  IOException e) {    throw new RuntimeException("Error reading from file " + file,e);  } finally {    if (ra != null) {      try {        ra.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public OpenForReadResult openForRead(Uri uri) throws IOException {  return openForRead(uri,false);}  }
class C{  public void estilo(Node no,String estilo){  no.getStyleClass().remove(3);  no.getStyleClass().add(estilo);}  }
class C{  public static byte[] encodeInteger(Number number){  ByteBuffer iBuf=null;  long lValue=number.longValue();  if (lValue >= Byte.MIN_VALUE && lValue <= Byte.MAX_VALUE) {    iBuf=ByteBuffer.allocate(1);    iBuf.put((byte)lValue);  } else   if (lValue >= Short.MIN_VALUE && lValue <= Short.MAX_VALUE) {    iBuf=ByteBuffer.allocate(2);    iBuf.putShort((short)lValue);  } else   if (lValue >= Integer.MIN_VALUE && lValue <= Integer.MAX_VALUE) {    iBuf=ByteBuffer.allocate(4);    iBuf.putInt((int)lValue);  } else {    iBuf=ByteBuffer.allocate(8);    iBuf.putLong(lValue);  }  return iBuf.array();}  }
class C{  @Override public boolean visit(IResourceDelta delta) throws CoreException {  IPath settingsFolderProjectRelativePath=this.gradleProjectValidator.getSettingsFolder().getProjectRelativePath();  IPath preferencesFileProjectRelativePath=this.gradleProjectValidator.getPreferencesFile().getProjectRelativePath();  if (delta.getProjectRelativePath().equals(settingsFolderProjectRelativePath)) {    if (delta.getKind() == IResourceDelta.ADDED || delta.getKind() == IResourceDelta.REMOVED) {      validate();      return false;    }  } else   if (delta.getProjectRelativePath().equals(preferencesFileProjectRelativePath)) {    if (delta.getKind() == IResourceDelta.ADDED || delta.getKind() == IResourceDelta.REMOVED || delta.getKind() == IResourceDelta.CHANGED) {      validate();      return false;    }  }  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:08.140 -0500",hash_original_method="0A7E6003101ED48A94DA0D4F2E79183E",hash_generated_method="5A29D53EB005C97126A1E9F2282E7B30") public String toPattern(){  StringBuffer buffer=new StringBuffer();  for (int i=0; i <= maxOffset; i++) {    appendQuoted(buffer,strings[i]);    buffer.append('{');    buffer.append(argumentNumbers[i]);    Format format=formats[i];    String pattern=null;    if (format instanceof ChoiceFormat) {      buffer.append(",choice,");      pattern=((ChoiceFormat)format).toPattern();    } else     if (format instanceof DecimalFormat) {      pattern=decodeDecimalFormat(buffer,format);    } else     if (format instanceof SimpleDateFormat) {      pattern=decodeSimpleDateFormat(buffer,format);    } else     if (format != null) {      throw new IllegalArgumentException("Unknown format");    }    if (pattern != null) {      boolean quote=false;      int index=0, length=pattern.length(), count=0;      while (index < length) {        char ch=pattern.charAt(index++);        if (ch == '\'') {          quote=!quote;        }        if (!quote) {          if (ch == '{') {            count++;          }          if (ch == '}') {            if (count > 0) {              count--;            } else {              buffer.append("'}");              ch='\'';            }          }        }        buffer.append(ch);      }    }    buffer.append('}');  }  if (maxOffset + 1 < strings.length) {    appendQuoted(buffer,strings[maxOffset + 1]);  }  return buffer.toString();}  }
class C{  public boolean isEmpty(){  return _pos == 0;}  }
class C{  public static synchronized boolean isBodyLabeled(){  return bodyLabeled;}  }
class C{  void processOFMessage(OFMessage m) throws IOException {  if (!state.channelHandshakeComplete) {switch (m.getType()) {case HELLO:      processOFHello((OFHello)m);    break;case ERROR:  processOFError((OFErrorMsg)m);break;case FEATURES_REPLY:processOFFeaturesReply((OFFeaturesReply)m);break;case EXPERIMENTER:processOFExperimenter((OFExperimenter)m);break;case ECHO_REPLY:processOFEchoReply((OFEchoReply)m);break;case ECHO_REQUEST:processOFEchoRequest((OFEchoRequest)m);break;default :illegalMessageReceived(m);break;}} else {switch (m.getType()) {case ECHO_REPLY:processOFEchoReply((OFEchoReply)m);break;case ECHO_REQUEST:processOFEchoRequest((OFEchoRequest)m);break;default :sendMessageToConnection(m);break;}}}  }
class C{  public void focusWindow(){  stage.requestFocus();}  }
class C{  public long restart(){  long start=_startTimeNanos;  _startTimeNanos=System.nanoTime();  return _startTimeNanos - start;}  }
class C{  public void clear(){  objects.clear();  for (int i=0; i < nodes.length; i++) {    if (nodes[i] != null) {      nodes[i].clear();      nodes[i]=null;    }  }}  }
class C{  public boolean isAutoFinalize(){  return autoFinalize.getSelection();}  }
class C{  public boolean isEventCondition(){  return false;}  }
class C{  public TableDataElement(String s){  super("td",new StringElement(s));}  }
class C{  private void createResourcePoolComputeHostAndVMState() throws Throwable {  this.outPool=createDefaultResourcePool(this.host);  ResourceGroupState resourceGroup=createDefaultResourceGroup(this.host,this.projectID);  this.computeHost=createDefaultComputeHost(this.host,this.userEmail,this.privateKey,this.zoneID,this.outPool.documentSelfLink,resourceGroup.documentSelfLink);  this.vmState=createDefaultVMResource(this.host,this.userEmail,this.privateKey,this.zoneID,this.gcpVMName,this.computeHost.documentSelfLink,this.outPool.documentSelfLink);}  }
class C{  public List<FunctionWrapper> compileFunctions(ImportStack importStack,Context context,Object object){  Class<?> functionClass=object.getClass();  Method[] methods=functionClass.getDeclaredMethods();  List<FunctionDeclaration> declarations=new LinkedList<>();  for (  Method method : methods) {    int modifiers=method.getModifiers();    if (!Modifier.isPublic(modifiers)) {      continue;    }    FunctionDeclaration declaration=createDeclaration(importStack,context,object,method);    declarations.add(declaration);  }  return declarations.stream().map(null).collect(Collectors.toList());}  }
class C{  private void leader(Player player,Player targetPlayer){  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group == null) {    player.sendPrivateText(NotificationType.ERROR,"You are not a member of a group.");    return;  }  group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (!group.hasLeader(player.getName())) {    player.sendPrivateText(NotificationType.ERROR,"Only the group leader may define a new leader.");    return;  }  if (!group.hasMember(targetPlayer.getName())) {    player.sendPrivateText(NotificationType.ERROR,targetPlayer.getName() + " is not a member of your group.");    return;  }  group.setLeader(targetPlayer.getName());}  }
class C{  protected void _addMixUnders(Method src,AnnotatedMethod target){  for (  Annotation a : src.getDeclaredAnnotations()) {    if (_annotationIntrospector.isHandled(a)) {      target.addIfNotPresent(a);    }  }}  }
class C{  public int availableBuffer() throws IOException {  return _readLength - _readOffset;}  }
class C{  public void write(OutputNode node,Object item) throws Exception {  Class expect=type.getType();  String key=entry.getKey();  if (entry.isAttribute()) {    throw new ElementException("Can not have %s as an attribute for %s",expect,entry);  }  if (key == null) {    key=context.getName(expect);  }  String name=style.getElement(key);  root.write(node,item,expect,name);}  }
class C{  @Override public void accept(ISourceType[] sourceTypes,PackageBinding packageBinding,AccessRestriction accessRestriction){  this.problemReporter.abortDueToInternalError(Messages.instance.abort_againstSourceModel(String.valueOf(sourceTypes[0].getName()),String.valueOf(sourceTypes[0].getFileName())));}  }
class C{  public static boolean hasIntersection(StringSet a,StringSet b){  if (a == null || b == null) {    return false;  }  if (a.isEmpty() || b.isEmpty()) {    return false;  }  for (  String s : a) {    if (b.contains(s)) {      return true;    }  }  return false;}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  if (img == null) {    return true;  }  int width=dx2 - dx1;  int height=dy2 - dy1;  addDrawingRect(dx1,dy1,width,height);  mPrintMetrics.drawImage(this,img);  return mGraphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (deep: ");  result.append(deep);  result.append(')');  return result.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  boolean validateIntensityReference(int actionType,String intReference){  if (intReference == null || intReference.trim().length() == 0) {    displayBadNumberReference(actionType);    return false;  }  try {    return validateIntensity(Integer.valueOf(intReference).intValue());  } catch (  NumberFormatException e) {    String intRef=intReference;    if (intReference.length() > 1 && intReference.charAt(0) == '@') {      intRef=intRef.substring(1);    }    if (!confirmIndirectMemory(intRef)) {      return false;    }    intRef=validateMemoryReference(intRef);    if (intRef != null) {      Memory m=InstanceManager.memoryManagerInstance().getByUserName(intRef);      if (m == null) {        m=InstanceManager.memoryManagerInstance().getBySystemName(intRef);      }      try {        validateIntensity(Integer.valueOf((String)m.getValue()).intValue());      } catch (      NumberFormatException ex) {        javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error24"),intReference),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);      }      return true;    }    displayBadNumberReference(actionType);  }  return false;}  }
class C{  public NamingExceptionEvent(EventContext source,NamingException exc){  super(source);  exception=exc;}  }
class C{  @Override public boolean isNumerical(){  return true;}  }
class C{  public static IonRunner serializableInstance(){  return new IonRunner(new GraphWrapper(new EdgeListGraph()),new Parameters());}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_search);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);}  }
class C{  public void initUI(){  if (GeneralUtil.isMacOSX()) {    try {      System.setProperty("apple.laf.useScreenMenuBar","true");      System.setProperty("com.apple.mrj.application.apple.menu.about.name","FS Browser");    } catch (    Exception ex) {      try {        logger.log(Level.SEVERE,"error initalizing the mac properties",ex);      } catch (      Exception ex2) {      }    }  } else {    setLookAndFeel();  }  JFrame frame=new JFrame();  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  this.frame=frame;  logger.info("creating UI");  actions=new BrowserActions(this);  actions.init();  panel=new BrowserPanel(this,new FrameBrowserPanelListener());  panel.init();  panel.createActions();  menu=new BrowserMenuBar(this);  menu.init();  menu.createLayout();  menu.createActions();  frame.setJMenuBar(menu);  frame.getContentPane().add(panel.toolbar,BorderLayout.PAGE_START);  frame.getContentPane().add(panel,BorderLayout.CENTER);  panel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));  frame.getContentPane().add(panel.status,BorderLayout.PAGE_END);  frame.pack();  frame.setSize(1024,768);}  }
class C{  public static MGRSCoord fromLatLon(Angle latitude,Angle longitude){  return fromLatLon(latitude,longitude,5);}  }
class C{  public BeanContextSupport(){  this(null,null,false,true);}  }
class C{  public boolean isSaved(){  if (changedRows.isEmpty()) {    return true;  } else {    return false;  }}  }
class C{  private void iconify(){  Frame frame=getFrame();  if (frame != null) {    frame.setExtendedState(state | Frame.ICONIFIED);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override protected void doAction(){  try {    Desktop.getDesktop().browse(URI.create(websiteAddress));  } catch (  IOException ex) {    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("WebsiteAction.NoLaunchBrowser.message"),websiteAddress),KSE.getApplicationName(),JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  public static void reset(){  semas.reset();  eventFlags.reset();  fpl.reset();  vpl.reset();  mutex.reset();  lwmutex.reset();  msgPipes.reset();  modules.reset();  systime.reset();  mbx.reset();  intr.reset();}  }
class C{  public DialogService(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  void disable(){  if (isEnabled())   setRawCounter(getToggledCounter(mCounter));}  }
class C{  public static void arraycopy(Object array1,int start1,Object array2,int start2,int length){  VMCommonLibrarySupport.arraycopy(array1,start1,array2,start2,length);}  }
class C{  public Object addDesignation(Object entity,URI type) throws RepositoryException {  return addDesignations(entity,type);}  }
class C{  private void step1(DBIDRef id,WritableDBIDDataStore pi,WritableDoubleDataStore lambda){  pi.put(id,id);}  }
class C{  @Override public Map<BytesRef,Query> loadQueries(final IndexService indexService,PercolatorQueriesRegistry percolator){  final String ksName=indexService.indexSettings().get(IndexMetaData.SETTING_KEYSPACE,indexService.index().name());  final String cql=String.format("SELECT \"_id\", query FROM \"%s\".\"%s\"",ksName,ClusterService.Utils.PERCOLATOR_TABLE);  UntypedResultSet results=QueryProcessor.executeInternal(cql);  Map<BytesRef,Query> queries=new HashMap<BytesRef,Query>();  if (!results.isEmpty()) {    for (    Row row : results) {      String query=row.getString("query");      String id=row.getString("_id");      try {      } catch (      Exception e) {        logger.warn("failed to add query [{}]",e,id);      }    }  }  return queries;}  }
class C{  @Override public final boolean remove(final Object obj){  return collection.remove(obj);}  }
class C{  public static int EPFNOSUPPORT(){  return Errno.EPFNOSUPPORT.intValue();}  }
class C{  public long send(Object data){  long seq=NumberSequencer.getNextSequence();  Notification note=new Notification(this.getEvent(),this,seq,System.currentTimeMillis(),"Event notification " + this.getEvent());  note.setUserData(data);  super.sendNotification(note);  return seq;}  }
class C{  @Override public void onBuildHeaders(List<Header> target){  loadHeadersFromResource(R.xml.preference_headers,target);}  }
class C{  public MouseDelegator(){  this(null);}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  if (DBG)   log("writeToParcel(Parcel, int): " + toString());  super.writeToParcel(dest,flags,TYPE_LTE);  mCellIdentityLte.writeToParcel(dest,flags);  mCellSignalStrengthLte.writeToParcel(dest,flags);}  }
class C{  protected void assertEquals(float expected,float actual){  if (expected != actual) {    if (Float.isNaN(expected) && Float.isNaN(actual)) {    } else {      fail("Expected: " + expected + " actual: "+ actual);    }  }}  }
class C{  public void parse(ElementHandler rootHandler,String rootNamespace,String rootElementName) throws IOException, ParseException {  throw new IllegalStateException("No content source defined");}  }
class C{  public void nextBytes(byte[] bytes){  super.nextBytes(bytes);  println("nextBytes=" + Utils.arrayToString(bytes));}  }
class C{  private AppInfo findApplicationInfoLocked(String packageName,UserHandleCompat user,String className){  for (  AppInfo info : data) {    final ComponentName component=info.intent.getComponent();    if (user.equals(info.user) && packageName.equals(component.getPackageName()) && className.equals(component.getClassName())) {      return info;    }  }  return null;}  }
class C{  private Object readTemplate(String value,Class type) throws Exception {  String text=context.getProperty(value);  if (text != null) {    return factory.getInstance(text,type);  }  return null;}  }
class C{  protected NamedImportSpecifierImpl(){  super();}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public static ComputeService.ComputeState createDefaultComputeHost(VerificationHost host,String userEmail,String privateKey,String zoneId,String resourcePoolLink,String resourceGroupLink) throws Throwable {  AuthCredentialsService.AuthCredentialsServiceState auth=new AuthCredentialsService.AuthCredentialsServiceState();  auth.type=DEFAULT_AUTH_TYPE;  auth.userEmail=userEmail;  auth.privateKey=privateKey;  auth.documentSelfLink=UUID.randomUUID().toString();  TestUtils.doPost(host,auth,AuthCredentialsService.AuthCredentialsServiceState.class,UriUtils.buildUri(host,AuthCredentialsService.FACTORY_LINK));  String authLink=UriUtils.buildUriPath(AuthCredentialsService.FACTORY_LINK,auth.documentSelfLink);  ComputeDescriptionService.ComputeDescription gcpHostDescription=new ComputeDescriptionService.ComputeDescription();  gcpHostDescription.id=UUID.randomUUID().toString();  gcpHostDescription.name=gcpHostDescription.id;  gcpHostDescription.documentSelfLink=gcpHostDescription.id;  gcpHostDescription.enumerationAdapterReference=UriUtils.buildUri(host,GCPUriPaths.GCP_ENUMERATION_ADAPTER);  gcpHostDescription.statsAdapterReference=UriUtils.buildUri(host,GCPUriPaths.GCP_STATS_ADAPTER);  gcpHostDescription.zoneId=zoneId;  gcpHostDescription.authCredentialsLink=authLink;  gcpHostDescription.groupLinks=new HashSet<>();  gcpHostDescription.groupLinks.add(resourceGroupLink);  TestUtils.doPost(host,gcpHostDescription,ComputeDescriptionService.ComputeDescription.class,UriUtils.buildUri(host,ComputeDescriptionService.FACTORY_LINK));  ComputeService.ComputeState gcpComputeHost=new ComputeService.ComputeState();  gcpComputeHost.id=UUID.randomUUID().toString();  gcpComputeHost.name=gcpHostDescription.name;  gcpComputeHost.documentSelfLink=gcpComputeHost.id;  gcpComputeHost.descriptionLink=UriUtils.buildUriPath(ComputeDescriptionService.FACTORY_LINK,gcpHostDescription.id);  gcpComputeHost.resourcePoolLink=resourcePoolLink;  return TestUtils.doPost(host,gcpComputeHost,ComputeService.ComputeState.class,UriUtils.buildUri(host,ComputeService.FACTORY_LINK));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void tearDown() throws Exception {  if (consumer != null) {    consumer.stop();  }  if (producer != null) {    producer.stop();  }  if (context != null) {    context.destroy();  }}  }
class C{  public Builder addToken(Builder requestBuilder,String token){  return addTokens(requestBuilder,token,null);}  }
class C{  public LonerDistributionManager(InternalDistributedSystem system,InternalLogWriter logger){  this.system=system;  this.logger=logger;  this.id=generateMemberId();  this.allIds=Collections.singleton(id);  this.viewMembers=new ArrayList<InternalDistributedMember>(allIds);  DistributionStats.enableClockStats=this.system.getConfig().getEnableTimeStatistics();}  }
class C{  public static long decodeSignedLong(CustomBuffer buffer){  long unsigned=decodeUnsignedLong(buffer);  long signed=(((unsigned << 63) >> 63) ^ unsigned) >> 1;  return signed ^ (unsigned & (1L << 63));}  }
class C{  public void displayBrowserContent(String content){  MapHandler mh=(MapHandler)getBeanContext();  Frame frame=null;  if (mh != null) {    frame=(Frame)mh.get(java.awt.Frame.class);  }  com.bbn.openmap.gui.MiniBrowser.display(frame,"text/html",content);}  }
class C{  public LoggerFilter(String loggerName,Boolean exclude){  this.loggerName=Lists.newArrayList(loggerName);  this.exclude=exclude;}  }
class C{  public File[] checkFilesExist() throws BaleenException {  final File[] files=new File(mucPath).listFiles(null);  if (files == null || files.length == 0) {    getMonitor().info("No MUC files found is the path correct: {}",mucPath);    throw new BaleenException("No MUC files found to process");  }  return files;}  }
class C{  protected static void main(String args[]){  int from=Integer.parseInt(args[0]);  int to=Integer.parseInt(args[1]);  statistics(from,to);}  }
class C{  public void add(List<Node> nodes){  insert(roots,roots.getChildren().size(),nodes);}  }
class C{  public void writeRawBinary(BinaryRawWriter writer) throws BinaryObjectException {  BinaryUtils.writeIgniteUuid(writer,affKey);  writer.writeInt(status);  writer.writeLong(startOff);  writer.writeLong(endOff);}  }
class C{  public void testFindLocations(){  IRegion[] regions=ModelHelper.findLocations(random + location + random2+ location+ random);  assertEquals(2,regions.length);  assertEquals(random.length(),regions[0].getOffset());  assertEquals(random.length() + location.length() + random2.length(),regions[1].getOffset());}  }
class C{  private ValueGraphVertex findOrCreateVertex(ConstantOperand op){  Object name;  if (op.isAddressConstant()) {    name=(VM.BuildFor32Addr) ? op.asAddressConstant().value.toInt() : op.asAddressConstant().value.toLong();  } else   if (op.isIntConstant()) {    name=op.asIntConstant().value;  } else   if (op.isFloatConstant()) {    name=op.asFloatConstant().value;  } else   if (op.isLongConstant()) {    name=op.asLongConstant().value;  } else   if (op.isDoubleConstant()) {    name=op.asDoubleConstant().value;  } else   if (op instanceof ObjectConstantOperand) {    name=op.asObjectConstant().value;  } else   if (op instanceof TIBConstantOperand) {    name=op.asTIBConstant().value;  } else   if (op.isNullConstant()) {    name=op;  } else   if (op instanceof TrueGuardOperand) {    name=op;  } else   if (op instanceof UnreachableOperand) {    name=op;  } else {    throw new OptimizingCompilerException("ValueGraph.findOrCreateVertex: unexpected constant operand: " + op);  }  ValueGraphVertex v=getVertex(name);  if (v == null) {    v=new ValueGraphVertex(op);    v.setLabel(op,0);    graph.addGraphNode(v);    nameMap.put(name,v);  }  return v;}  }
class C{  public JSONStringer key(String name) throws JSONException {  if (name == null) {    throw new JSONException("Names must be non-null");  }  beforeKey();  string(name);  return this;}  }
class C{  protected ISOTransformationStrategy(boolean prefixFree){  this.prefixFree=prefixFree;}  }
class C{  private static <E>int calculateSize(List<E> sortedInputList,Comparator<? super E> comparator){  long permutations=1;  int n=1;  int r=1;  while (n < sortedInputList.size()) {    int comparison=comparator.compare(sortedInputList.get(n - 1),sortedInputList.get(n));    if (comparison < 0) {      permutations*=binomial(n,r);      r=0;      if (!isPositiveInt(permutations)) {        return Integer.MAX_VALUE;      }    }    n++;    r++;  }  permutations*=binomial(n,r);  if (!isPositiveInt(permutations)) {    return Integer.MAX_VALUE;  }  return (int)permutations;}  }
class C{  public MWFProcess start(ProcessInfo pi,String trxName){  MWFProcess retValue=null;  Trx localTrx=null;  if (trxName == null)   localTrx=Trx.get(Trx.createTrxName("WFP"),true);  try {    retValue=new MWFProcess(this,pi,trxName != null ? trxName : localTrx.getTrxName());    retValue.saveEx();    pi.setSummary(Msg.getMsg(getCtx(),"Processing"));    retValue.startWork();    if (localTrx != null)     localTrx.commit(true);  } catch (  Exception e) {    if (localTrx != null)     localTrx.rollback();    log.log(Level.SEVERE,e.getLocalizedMessage(),e);    pi.setSummary(e.getMessage(),true);    retValue=null;  } finally {    if (localTrx != null)     localTrx.close();  }  return retValue;}  }
class C{  public void extend(String variable,Collection<Value> vals){  Set<Assignment> newGroundings=new HashSet<Assignment>();  for (  Assignment g : groundings) {    for (    Value v : vals) {      newGroundings.add(new Assignment(g,variable,v));    }  }  groundings=newGroundings;}  }
class C{  public static String generateGlobalUniqueId(){  String encoded=Base64.getUrlEncoder().encodeToString(IdentifierUtil.toByteArray(UUID.randomUUID()));  while (encoded.charAt(encoded.length() - 1) == '=')   encoded=encoded.substring(0,encoded.length() - 1);  return encoded;}  }
class C{  public void testFictionalProgressSfxMomentParsing(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createSfxMomentWithFictionalProgressXML("start",null,"path/to/something","Fictional progress.");  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals(1,mMissionData.getMomentFromId("start").getFictionalProgress().size());  Assert.assertEquals("Fictional progress.",mMissionData.getMomentFromId("start").getFictionalProgress().get(0));}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  public LockedDoor(final String key,final String clazz){  this(key,clazz,1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.141 -0500",hash_original_method="1CA41B58715410C4216B9DE6C43BB9D4",hash_generated_method="E7DA843D8557D10445E3B5AB05073926") private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public final boolean doNext(TLCState curState,ObjLongTable counts,final Worker worker) throws Throwable {  if (this.cancellationFlag) {    return false;  }  boolean deadLocked=true;  TLCState succState=null;  SetOfStates liveNextStates=null;  if (this.checkLiveness) {    liveNextStates=new SetOfStates(INITIAL_CAPACITY * threadLocal.get());  }  try {    int k=0;    for (int i=0; i < this.actions.length; i++) {      if (this.cancellationFlag) {        return false;      }      StateVec nextStates=this.tool.getNextStates(this.actions[i],curState);      int sz=nextStates.size();      worker.incrementStatesGenerated(sz);      deadLocked=deadLocked && (sz == 0);      SUCCESSORS:       for (int j=0; j < sz; j++) {        succState=nextStates.elementAt(j);        if (!this.tool.isGoodState(succState)) {synchronized (this) {            if (this.setErrState(curState,succState,false)) {              MP.printError(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT);              this.trace.printTrace(curState,succState);              this.theStateQueue.finishAll();              this.notify();            }            return true;          }        }        if (TLCGlobals.coverageInterval >= 0) {          ((TLCStateMutSource)succState).addCounts(counts);        }        final boolean inModel=(this.tool.isInModel(succState) && this.tool.isInActions(curState,succState));        boolean seen=false;        if (inModel) {          long fp=succState.fingerPrint();          seen=this.theFPSet.put(fp);          this.allStateWriter.writeState(curState,succState,!seen);          if (!seen) {            long loc=this.trace.writeState(curState,fp);            succState.uid=loc;          }          if (this.checkLiveness) {            liveNextStates.put(fp,succState);          }        }        if (!seen) {          try {            int len=this.invariants.length;            INVARIANTS:             for (k=0; k < len; k++) {              if (this.cancellationFlag) {                return false;              }              if (!tool.isValid(this.invariants[k],succState)) {synchronized (this) {                  if (TLCGlobals.continuation) {                    MP.printError(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,this.tool.getInvNames()[k]);                    this.trace.printTrace(curState,succState);                    break INVARIANTS;                  } else {                    if (this.setErrState(curState,succState,false)) {                      MP.printError(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,this.tool.getInvNames()[k]);                      this.trace.printTrace(curState,succState);                      this.theStateQueue.finishAll();                      this.notify();                    }                    return true;                  }                }              }            }            if (k < len) {              if (inModel && !seen) {                this.theStateQueue.sEnqueue(succState);              }              continue SUCCESSORS;            }          } catch (          Exception e) {synchronized (this) {              if (this.setErrState(curState,succState,true)) {                MP.printError(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[k],(e.getMessage() == null) ? e.toString() : e.getMessage()});                this.trace.printTrace(curState,succState);                this.theStateQueue.finishAll();                this.notify();              }              throw e;            }          }        }        try {          int len=this.impliedActions.length;          IMPLIED:           for (k=0; k < len; k++) {            if (this.cancellationFlag) {              return false;            }            if (!tool.isValid(this.impliedActions[k],curState,succState)) {synchronized (this) {                if (TLCGlobals.continuation) {                  MP.printError(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,this.tool.getImpliedActNames()[k]);                  this.trace.printTrace(curState,succState);                  break IMPLIED;                } else {                  if (this.setErrState(curState,succState,false)) {                    MP.printError(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,this.tool.getImpliedActNames()[k]);                    this.trace.printTrace(curState,succState);                    this.theStateQueue.finishAll();                    this.notify();                  }                  return true;                }              }            }          }          if (k < len) {            if (inModel && !seen) {              this.theStateQueue.sEnqueue(succState);            }            continue SUCCESSORS;          }        } catch (        Exception e) {synchronized (this) {            if (this.setErrState(curState,succState,true)) {              MP.printError(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[k],(e.getMessage() == null) ? e.toString() : e.getMessage()});              this.trace.printTrace(curState,succState);              this.theStateQueue.finishAll();              this.notify();            }            throw e;          }        }        if (inModel && !seen) {          this.theStateQueue.sEnqueue(succState);        }      }      succState=null;    }    if (deadLocked && this.checkDeadlock) {synchronized (this) {        if (this.setErrState(curState,null,false)) {          MP.printError(EC.TLC_DEADLOCK_REACHED);          this.trace.printTrace(curState,null);          this.theStateQueue.finishAll();          this.notify();        }      }      return true;    }    if (this.checkLiveness) {      final long curStateFP=curState.fingerPrint();      liveNextStates.put(curStateFP,curState);      this.allStateWriter.writeState(curState,curState,true,IStateWriter.Visualization.STUTTERING);      liveCheck.addNextState(curState,curStateFP,liveNextStates);      final int multiplier=threadLocal.get();      if (liveNextStates.capacity() > (multiplier * INITIAL_CAPACITY)) {        threadLocal.set(multiplier + 1);      }    }    return false;  } catch (  Throwable e) {    boolean keep=((e instanceof StackOverflowError) || (e instanceof OutOfMemoryError) || (e instanceof AssertionError));synchronized (this) {      if (this.setErrState(curState,succState,!keep)) {        if (e instanceof StackOverflowError) {          MP.printError(EC.SYSTEM_STACK_OVERFLOW,e);        } else         if (e instanceof OutOfMemoryError) {          MP.printError(EC.SYSTEM_OUT_OF_MEMORY,e);        } else         if (e instanceof AssertionError) {          MP.printError(EC.TLC_BUG,e);        } else         if (e.getMessage() != null) {          MP.printError(EC.GENERAL,e);        }        this.trace.printTrace(curState,succState);        this.theStateQueue.finishAll();        this.notify();      }    }    throw e;  }}  }
class C{  public static double deriv2(double pred,double y){  final double x=y * pred;  if (x >= 30)   return 0; else   if (x <= -30)   return 0;  final double p=1 / (1 + exp(y * pred));  return p * (1 - p);}  }
class C{  public Builder withMaxEntries(int maxEntries){  buffer.writeInt(28,maxEntries);  return this;}  }
class C{  public static boolean isHTML(Object content){  if (content == null)   return false;  String s=content.toString();  if (s.length() < 20)   return false;  s=s.trim().toUpperCase();  if (s.startsWith("<HTML>"))   return true;  return false;}  }
class C{  public void testSpinnerHiddenAfterSyncCompletes(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  mFakeSyncManager.setSyncing(true);  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mFakeEventBus.post(new SyncSucceededEvent());  verify(mMockFragmentUi).setBusyLoading(false);}  }
class C{  public static SpannableString typeface(Context context,int strResId,TypefaceCollection collection,int style){  return typeface(context.getString(strResId),collection,style);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void drawGrid(Canvas canvas,int width,int height,int offsetX,int offsetY){  mTempRect.set(offsetX - GRID_RADIUS,offsetY - GRID_RADIUS,width + offsetX,height + offsetY);  canvas.drawRect(mTempRect,mGridPaint);}  }
class C{  public Filter addAttribute(String attribute,Object entity){  put(attribute,entity);  return (this);}  }
class C{  public Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  ArrayList<Certificate> result=new ArrayList<Certificate>();  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    byte[] encoding=null;    int second_asn1_tag=-1;    inStream.mark(1);    int ch;    while ((ch=inStream.read()) != -1) {      if (ch == '-') {        encoding=decodePEM(inStream,FREE_BOUND_SUFFIX);      } else       if (ch == 0x30) {        encoding=null;        inStream.reset();        inStream.mark(CERT_CACHE_SEED_LENGTH);      } else {        if (result.size() == 0) {          throw new CertificateException("Unsupported encoding");        } else {          inStream.reset();          return result;        }      }      BerInputStream in=(encoding == null) ? new BerInputStream(inStream) : new BerInputStream(encoding);      second_asn1_tag=in.next();      if (encoding == null) {        inStream.reset();      }      if (second_asn1_tag != ASN1Constants.TAG_C_SEQUENCE) {        if (result.size() == 0) {          break;        } else {          return result;        }      } else {        if (encoding == null) {          result.add(getCertificate(inStream));        } else {          result.add(getCertificate(encoding));        }      }      inStream.mark(1);    }    if (result.size() != 0) {      return result;    } else     if (ch == -1) {      return result;    }    if (second_asn1_tag == ASN1Constants.TAG_OID) {      ContentInfo info=(ContentInfo)((encoding != null) ? ContentInfo.ASN1.decode(encoding) : ContentInfo.ASN1.decode(inStream));      SignedData data=info.getSignedData();      if (data == null) {        throw new CertificateException("Invalid PKCS7 data provided");      }      List<org.apache.harmony.security.x509.Certificate> certs=data.getCertificates();      if (certs != null) {        for (        org.apache.harmony.security.x509.Certificate cert : certs) {          result.add(new X509CertImpl(cert));        }      }      return result;    }    throw new CertificateException("Unsupported encoding");  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  protected int[] find(boolean findAtts){  int i;  int[] result;  ArrayList<Integer> indices;  indices=new ArrayList<Integer>();  if (findAtts) {    for (i=0; i < m_Attributes.size(); i++) {      if (m_Attributes.get(i))       indices.add(new Integer(i));    }  } else {    for (i=0; i < m_Locators.size(); i++) {      if (m_Locators.get(i) != null)       indices.add(new Integer(i));    }  }  result=new int[indices.size()];  for (i=0; i < indices.size(); i++)   result[i]=((Integer)indices.get(i)).intValue();  return result;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (dirichletBayesIm == null) {    throw new NullPointerException();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.608 -0500",hash_original_method="921E97B7A015080CE0A01C361479BF49",hash_generated_method="E90500B5A498AD228C58A5454954722F") private Object readLiteral() throws JSONException {  String literal=nextToInternal("{}[]/\\:,=;# \t\f");  if (literal.length() == 0) {    throw syntaxError("Expected literal value");  } else   if ("null".equalsIgnoreCase(literal)) {    return JSONObject.NULL;  } else   if ("true".equalsIgnoreCase(literal)) {    return Boolean.TRUE;  } else   if ("false".equalsIgnoreCase(literal)) {    return Boolean.FALSE;  }  if (literal.indexOf('.') == -1) {    int base=10;    String number=literal;    if (number.startsWith("0x") || number.startsWith("0X")) {      number=number.substring(2);      base=16;    } else     if (number.startsWith("0") && number.length() > 1) {      number=number.substring(1);      base=8;    }    try {      long longValue=Long.parseLong(number,base);      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        return (int)longValue;      } else {        return longValue;      }    } catch (    NumberFormatException e) {    }  }  try {    return Double.valueOf(literal);  } catch (  NumberFormatException ignored) {  }  return new String(literal);}  }
class C{  @Override public void awaitOperational(){  awaitOperational(false);}  }
class C{  protected Complex evaluate(double omega){  if (T == null)   computeTransferFunction();  return T.evaluate(new Complex(0.0,omega));}  }
class C{  private void emitInfraredPacket(final short value){  final EnumFacing facing=Face.toEnumFacing(getFace());  final BlockPos blockPos=getCasing().getPosition().offset(facing);  final World world=getCasing().getCasingWorld();  final Vec3 position=new Vec3(blockPos.getX() + 0.5,blockPos.getY() + 0.5,blockPos.getZ() + 0.5);  final Vec3 direction=new Vec3(facing.getFrontOffsetX(),facing.getFrontOffsetY(),facing.getFrontOffsetZ());  InfraredAPI.sendPacket(world,position,direction,value);}  }
class C{  public byte[] decryptRaw(byte[] baseKey,int usage,byte[] ivec,byte[] ciphertext,int start,int len) throws GeneralSecurityException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  byte[] output=decryptCTS(baseKey,usage,ivec,ciphertext,start,len,false);  return output;}  }
class C{  @Override public void chartMouseMoved(ChartMouseEventFX event){  System.out.println(event);}  }
class C{  public NewArrayInstanceEvaluator(Evaluator arrayTypeEvaluator,Evaluator dimensionEvaluator,Evaluator initializerEvaluator){  myArrayTypeEvaluator=arrayTypeEvaluator;  myDimensionEvaluator=dimensionEvaluator;  myInitializerEvaluator=initializerEvaluator;}  }
class C{  public void prevCharacter(){  if (currentOffset - 1 >= 0 && currentField.getArgument(currentOffset - 1) != null && currentField.getArgument(currentOffset - 1) instanceof MathContainer && ((MathContainer)currentField.getArgument(currentOffset - 1)).hasChildren()) {    MathComponent component=currentField.getArgument(currentOffset - 1);    lastField((MathContainer)component);  } else   if (currentOffset > 0) {    currentOffset--;  } else {    prevField();  }}  }
class C{  public T caseGuard(Guard object){  return null;}  }
class C{  public T media(String value){  return attr("media",value);}  }
class C{  private void rebuildNode(){  m_realizer.regenerate();  m_graph.updateViews();}  }
class C{  public boolean write(Type type,Object value,NodeMap<OutputNode> node,Map map) throws Exception {  boolean reference=strategy.write(type,value,node,map);  if (!reference) {    return write(type,value,node);  }  return reference;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case INPUT_METHOD_TEXT_CHANGED:    typeStr="INPUT_METHOD_TEXT_CHANGED";  break;case CARET_POSITION_CHANGED:typeStr="CARET_POSITION_CHANGED";break;default :typeStr="unknown type";}String textString;if (text == null) {textString="no text";} else {StringBuilder textBuffer=new StringBuilder("\"");int committedCharacterCount=this.committedCharacterCount;char c=text.first();while (committedCharacterCount-- > 0) {textBuffer.append(c);c=text.next();}textBuffer.append("\" + \"");while (c != CharacterIterator.DONE) {textBuffer.append(c);c=text.next();}textBuffer.append("\"");textString=textBuffer.toString();}String countString=committedCharacterCount + " characters committed";String caretString;if (caret == null) {caretString="no caret";} else {caretString="caret: " + caret.toString();}String visiblePositionString;if (visiblePosition == null) {visiblePositionString="no visible position";} else {visiblePositionString="visible position: " + visiblePosition.toString();}return typeStr + ", " + textString+ ", "+ countString+ ", "+ caretString+ ", "+ visiblePositionString;}  }
class C{  public Sequence(Schema schema,int id,String name,Long startValue,Long increment,Long cacheSize,Long minValue,Long maxValue,boolean cycle,boolean belongsToTable){  initSchemaObjectBase(schema,id,name,Trace.SEQUENCE);  this.increment=increment != null ? increment : 1;  this.minValue=minValue != null ? minValue : getDefaultMinValue(startValue,this.increment);  this.maxValue=maxValue != null ? maxValue : getDefaultMaxValue(startValue,this.increment);  this.value=startValue != null ? startValue : getDefaultStartValue(this.increment);  this.valueWithMargin=value;  this.cacheSize=cacheSize != null ? Math.max(1,cacheSize) : DEFAULT_CACHE_SIZE;  this.cycle=cycle;  this.belongsToTable=belongsToTable;  if (!isValid(this.value,this.minValue,this.maxValue,this.increment)) {    throw DbException.get(ErrorCode.SEQUENCE_ATTRIBUTES_INVALID,name,String.valueOf(this.value),String.valueOf(this.minValue),String.valueOf(this.maxValue),String.valueOf(this.increment));  }}  }
class C{  public boolean hasHeaders(){  return fieldSetFlags()[18];}  }
class C{  private void upgradeCategory(CatalogCategory currentCategory,com.emc.sa.catalog.CategoryDef newCategory){  if (newCategory.categories != null) {    List<CatalogCategory> subCategories=client.catalogCategories().findSubCatalogCategories(currentCategory.getId());    for (    com.emc.sa.catalog.CategoryDef newSubCategory : newCategory.categories) {      String label=StringUtils.deleteWhitespace(getMessage(getLabel(newSubCategory)));      CatalogCategory currentSubCategory=findSubCategory(subCategories,label);      if (currentSubCategory == null) {        log.info(String.format("CREATING Missing Category : %s for tenant:%s",label,currentCategory.getTenant()));        createCategory(currentCategory.getTenant(),newSubCategory,currentCategory);      } else {        upgradeCategory(currentSubCategory,newSubCategory);      }    }  }  upgradeServices(currentCategory,newCategory);}  }
class C{  public static boolean isSoapBodyLoggingEnabled(){  return "true".equalsIgnoreCase(System.getProperty(SOAP_BODY_LOGGING_ENABLED,"false"));}  }
class C{  public void updateJavaCFX(String name,ClassDefinition cd) throws PageException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_CFX_SETTING);  if (!hasAccess)   throw new SecurityException("no access to change cfx settings");  if (name == null || name.length() == 0)   throw new ExpressionException("class name can't be a empty value");  renameOldstyleCFX();  Element tags=_getRootElement("ext-tags");  Element[] children=XMLConfigWebFactory.getChildren(tags,"ext-tag");  for (int i=0; i < children.length; i++) {    String n=children[i].getAttribute("name");    if (n != null && n.equalsIgnoreCase(name)) {      Element el=children[i];      if (!"java".equalsIgnoreCase(el.getAttribute("type")))       throw new ExpressionException("there is already a c++ cfx tag with this name");      setClass(el,CustomTag.class,"",cd);      el.setAttribute("type","java");      return;    }  }  Element el=doc.createElement("ext-tag");  tags.appendChild(el);  setClass(el,CustomTag.class,"",cd);  el.setAttribute("name",name);  el.setAttribute("type","java");}  }
class C{  public void testSumThenReset(){  LongAdder ai=new LongAdder();  ai.add(2);  assertEquals(2,ai.sum());  assertEquals(2,ai.sumThenReset());  assertEquals(0,ai.sum());}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  public static void invokeFinalize(Object o) throws Throwable {  o.finalize();}  }
class C{  public static void decodeIgnoreWhitespace(Reader r,OutputStream os) throws IOException {  while (true) {    int ch0=readNonWhitespace(r);    int ch1=readNonWhitespace(r);    int ch2=readNonWhitespace(r);    int ch3=readNonWhitespace(r);    if (ch1 < 0)     break;    if (ch2 < 0)     ch2='=';    if (ch3 < 0)     ch3='=';    int chunk=((_decode[ch0] << 18) + (_decode[ch1] << 12) + (_decode[ch2] << 6)+ (_decode[ch3]));    os.write((byte)((chunk >> 16) & 0xff));    if (ch2 != '=' && ch2 != -1)     os.write((byte)((chunk >> 8) & 0xff));    if (ch3 != '=' && ch3 != -1)     os.write((byte)((chunk & 0xff))); else     break;  }  os.flush();}  }
class C{  public int compareTo(Object obj){  Dog daUddaDog=(Dog)obj;  return this.size - daUddaDog.size;}  }
class C{  public PendingResponse(long timeout){  this.timeout=timeout;}  }
class C{  private static int charVal(char c){  return ((c >= '0') && (c <= '9')) ? (c - '0') : (((c >= 'A') && (c <= 'Z')) ? (c - 'A' + 10) : (c - 'a' + 10));}  }
class C{  public Pair SE(){  char d2=(char)(diagonal + 1);  int r2=row + 1;  return new Pair(d2,r2);}  }
class C{  @Override public void initialize(URL url,ResourceBundle rb){  notification.setText(message);  notification.setGraphic(createGlyph());  notification.getStyleClass().add(palette.name().toLowerCase());}  }
class C{  public void success(String message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  private boolean isValidParentId(int parentId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tblName=table.getDirTableName();    qual=table.getLoadDirQual(parentId);    if (parentId == 0)     valid=true; else {      count=DbSelectFns.selectCount(dbConn,tblName,qual);      if (count > 0)       valid=true;    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  @Override public AnnotationStyle clone(){  return new AnnotationStyle(getAnnotationColor(),getAnnotationAlignment());}  }
class C{  private void drawNeedle(Canvas canvas,double angle,int centerX,int centerY,double radius,boolean arrow,Paint paint){  double diff=Math.toRadians(90);  int needleSinValue=(int)(NEEDLE_RADIUS * Math.sin(angle - diff));  int needleCosValue=(int)(NEEDLE_RADIUS * Math.cos(angle - diff));  int needleX=(int)(radius * Math.sin(angle));  int needleY=(int)(radius * Math.cos(angle));  int needleCenterX=centerX + needleX;  int needleCenterY=centerY + needleY;  float[] points;  if (arrow) {    int arrowBaseX=centerX + (int)(radius * 0.85 * Math.sin(angle));    int arrowBaseY=centerY + (int)(radius * 0.85 * Math.cos(angle));    points=new float[]{arrowBaseX - needleSinValue,arrowBaseY - needleCosValue,needleCenterX,needleCenterY,arrowBaseX + needleSinValue,arrowBaseY + needleCosValue};    float width=paint.getStrokeWidth();    paint.setStrokeWidth(5);    canvas.drawLine(centerX,centerY,needleCenterX,needleCenterY,paint);    paint.setStrokeWidth(width);  } else {    points=new float[]{centerX - needleSinValue,centerY - needleCosValue,needleCenterX,needleCenterY,centerX + needleSinValue,centerY + needleCosValue};  }  drawPath(canvas,points,paint,true);}  }
class C{  @Override public void mouseReleased(MouseEvent e){  if (m_mouseState == 1) {    m_clickAvailable=true;  } else {    m_clickAvailable=false;  }  if (m_mouseState == 2 && mouseInBounds(e)) {    m_mouseState=0;    Dimension ns=new Dimension(m_viewSize.width / 2,m_viewSize.height / 2);    if (ns.width < 10) {      ns.width=10;    }    if (ns.height < 10) {      ns.height=10;    }    Dimension d=getSize();    Dimension np=new Dimension((int)(d.width / 2 - ((double)d.width / 2 - m_viewPos.width) / 2),(int)(d.height / 2 - ((double)d.height / 2 - m_viewPos.height) / 2));    animateScaling(np,ns,10);  } else   if (m_mouseState == 3) {    m_mouseState=0;    Graphics g=getGraphics();    if (m_ZoomBoxColor == null) {      g.setColor(Color.black);    } else {      g.setColor(m_ZoomBoxColor);    }    if (m_ZoomBoxXORColor == null) {      g.setXORMode(Color.white);    } else {      g.setXORMode(m_ZoomBoxXORColor);    }    g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);    g.dispose();    int cw=m_newMousePos.width - m_oldMousePos.width;    int ch=m_newMousePos.height - m_oldMousePos.height;    if (cw >= 1 && ch >= 1) {      if (mouseInBounds(e) && (getSize().width / cw) <= 6 && (getSize().height / ch) <= 6) {        Dimension ns=new Dimension();        Dimension np=new Dimension();        double nvsw=getSize().width / (double)(cw);        double nvsh=getSize().height / (double)(ch);        np.width=(int)((m_oldMousePos.width - m_viewPos.width) * -nvsw);        np.height=(int)((m_oldMousePos.height - m_viewPos.height) * -nvsh);        ns.width=(int)(m_viewSize.width * nvsw);        ns.height=(int)(m_viewSize.height * nvsh);        animateScaling(np,ns,10);      }    }  } else   if (m_mouseState == 0 && m_scaling == 0) {    m_mouseState=0;    setFont(new Font("A Name",0,12));    int s=-1;    for (int noa=0; noa < m_numNodes; noa++) {      if (m_nodes[noa].m_quad == 18) {        calcScreenCoords(noa);        if (e.getX() <= m_nodes[noa].m_center + m_nodes[noa].m_side && e.getX() >= m_nodes[noa].m_center - m_nodes[noa].m_side && e.getY() >= m_nodes[noa].m_top && e.getY() <= m_nodes[noa].m_top + m_nodes[noa].m_height) {          s=noa;        }        m_nodes[noa].m_top=32000;      }    }    if (s == -1) {      m_winMenu.show(this,e.getX(),e.getY());    } else {      m_focusNode=s;      m_nodeMenu.show(this,e.getX(),e.getY());    }    setFont(m_currentFont);  } else   if (m_mouseState == 1) {    m_mouseState=0;    m_frameLimiter.stop();    repaint();  }}  }
class C{  public static String decode(AbstractMessage msg){  StringBuilder buf=new StringBuilder();  int bytes;  int value;  String format=opcodeMap.get(msg.getElement(0));  if (format == null) {    return "Reserved opcode";  }  String[] fields=format.split(",");  int idx=1;  for (int i=0; i < fields.length; i++) {    if (fields[i].startsWith("%")) {      value=0;      bytes=Integer.parseInt(fields[i].substring(1,2));      for (; bytes > 0; bytes--) {        value=value * 256 + msg.getElement(idx++);      }      fields[i]=String.valueOf(value);    }    buf.append(fields[i]);  }  return buf.toString();}  }
class C{  public void testBug11879() throws Exception {  if (runMultiHostTests()) {    Connection replConn=null;    try {      replConn=getMasterSlaveReplicationConnection();      replConn.setReadOnly(true);      replConn.setReadOnly(false);    }  finally {      if (replConn != null) {        replConn.close();      }    }  }}  }
class C{  public NodeSet(Node node){  this(32);  addNode(node);}  }
class C{  private static String removeSubTrailers(String decodedSubject){  int subStringStart=0;  int subStringEnd=decodedSubject.length();  int originalSize=decodedSubject.length();  int curPos=originalSize - 1;  while (true) {    char c=decodedSubject.charAt(curPos--);    if (c == WS) {      subStringEnd--;    } else {      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {        subStringEnd-=FWD_PARENS.length();      }      break;    }  }  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);  return decodedSubject;}  }
class C{  public RectF drawNativeText(String text,RectF bounds){  Paint paint=state.fillPaint.getPaint();  g.save();  Matrix m;  Matrix mOrig=g.getMatrix();  m=new Matrix(mOrig);  m.preScale(1.0f,-1.0f,bounds.left,bounds.top);  g.setMatrix(m);  g.drawText(text,bounds.left,bounds.top,paint);  g.restore();  return bounds;}  }
class C{  private void clearActiveLineRange(){  iconArea.clearActiveLineRange();}  }
class C{  public static boolean isFloat(String s,boolean allowNegative,boolean allowPositive,int minDecimal,int maxDecimal){  if (isEmpty(s))   return defaultEmptyOK;  try {    float temp=Float.parseFloat(s);    if (!allowNegative && temp < 0)     return false;    if (!allowPositive && temp > 0)     return false;    int decimalPoint=s.indexOf(".");    if (decimalPoint == -1) {      if (minDecimal > 0)       return false;      return true;    }    int numDecimals=s.length() - decimalPoint - 1;    if (minDecimal >= 0 && numDecimals < minDecimal)     return false;    if (maxDecimal >= 0 && numDecimals > maxDecimal)     return false;    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void resetAxisMaxValue(){  mCustomAxisMax=Float.NaN;}  }
class C{  public SignalServiceDataMessage(long timestamp,List<SignalServiceAttachment> attachments,String body,int expiresInSeconds){  this(timestamp,null,attachments,body,expiresInSeconds);}  }
class C{  public ExceptionWithContext(Throwable cause){  this(cause,null);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  if (UserCertificateUtil.getUserData(request) == null) {    return mapping.findForward(ERROR_FORWARD);  }  String cReferencia=(String)request.getParameter(ieci.tecdoc.sgm.pe.Constantes.REFERENCIA_KEY);  File oFile=null;  InputStream oInputStream=null;  OutputStream oOutputStream=null;  try {    Liquidacion oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,cReferencia);    if (!Liquidacion.ESTADO_PAGADO.equals(oLiquidacion.getEstado())) {      return mapping.findForward(ERROR_FORWARD);    }    String cXML=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,cReferencia);    oFile=FormCreator.crearJustificantePago(oLiquidacion.getTasa(),cXML,request);    response.setContentType(JUSTIFICANTE_CONTENT_TYPE);    oInputStream=new FileInputStream(oFile);    oOutputStream=response.getOutputStream();    byte[] buffer=new byte[BUFFER_SIZE];    int count=0;    int n=0;    while (-1 != (n=oInputStream.read(buffer))) {      oOutputStream.write(buffer,0,n);      count+=n;    }  } catch (  Throwable e) {    logger.error(e.getMessage(),e);    try {      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    } catch (    IOException e1) {      return null;    }  } finally {    if (oInputStream != null) {      try {        oInputStream.close();      } catch (      IOException e) {        logger.error("Error cerrando input stream.");      }    }    if (oFile != null) {      if ((oFile.exists()) && (oFile.isFile()) && (!oFile.delete())) {        StringBuffer sbError=new StringBuffer("Error borrando archivo temporal: ");        sbError.append(oFile.getAbsolutePath());        logger.error(sbError.toString());      }    }  }  return null;}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  @Autowired public CreateTellerCommandHandler(final TellerWritePlatformService writePlatformService){  this.writePlatformService=writePlatformService;}  }
class C{  int partition(short order,long qAddr){  return lrus[order].partition(qAddr);}  }
class C{  protected Iterator<V> createValuesIterator(){  return new ReferenceValuesIterator<K,V>(this);}  }
class C{  public static IItemsList adaptValues(String[] aFields){  ExpressionList values=new ExpressionList();  for (int i=0; i < aFields.length; i++) {    values.addExpression(new JdbcParameter());  }  return values;}  }
class C{  @Deprecated public ScriptSortBuilder(String script,String type){  this.scriptString=script;  this.type=type;}  }
class C{  public void processAll() throws IOException {  for (Iterator<Entry> i=imageList.iterator(); i.hasNext(); ) {    Entry entry=(Entry)i.next();    if (!entry.written) {      entry.written=true;      PDFStream img=pdf.openStream(entry.name);      img.entry("Subtype",pdf.name("Image"));      if (entry.maskName != null)       img.entry("SMask",pdf.ref(entry.maskName));      img.image(entry.image,entry.bkg,entry.writeAs);      pdf.close(img);      if (entry.maskName != null) {        PDFStream mask=pdf.openStream(entry.maskName);        mask.entry("Subtype",pdf.name("Image"));        mask.imageMask(entry.image,entry.writeAs);        pdf.close(mask);      }    }  }}  }
class C{  protected JPAEntity(PrincipalUser creator){  this.id=null;  this.createdBy=creator;  this.modifiedBy=creator;  this.createdDate=null;  this.modifiedDate=null;}  }
class C{  public static NumberUnit<Integer> toIntUnit(String string){  if (string == null) {    return null;  }  int firstSpace=findFirstSpace(string);  String beforeSpace=beforeSpace(string,firstSpace);  return new NumberUnit<Integer>(new Integer(beforeSpace),parseUnit(string,firstSpace));}  }
class C{  public <T>void addToRequestQueue(Request<T> req){  getRequestQueue().add(req);}  }
class C{  protected void addExpressionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Aggregator_expression_feature"),getString("_UI_PropertyDescriptor_description","_UI_Aggregator_expression_feature","_UI_Aggregator_type"),EipPackage.Literals.AGGREGATOR__EXPRESSION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void updateUI(){  setUI((ColorChooserUI)UIManager.getUI(this));}  }
class C{  public void write(int b){  try {synchronized (this) {      ensureOpen();      out.write(b);      if ((b == '\n') && autoFlush)       out.flush();    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  public StampFilter(){  this(0.5f);}  }
class C{  public static String unescapeJava(String str){  if (str == null) {    return null;  }  try {    StringWriter writer=new StringWriter(str.length());    unescapeJava(writer,str);    return writer.toString();  } catch (  IOException ioe) {    throw new UnhandledException(ioe);  }}  }
class C{  private RegionVersionHolder buildHolder(BitSet bs){  RegionVersionHolder vh=new RegionVersionHolder(member);  recordVersions(vh,bs);  compareWithBitSet(bs,vh);  return vh;}  }
class C{  public void insert(){  List<ScriptStep> selectedSteps=scriptEditor.getSelectedSteps();  ScriptStep aggregatorStart=getAggregatorStep(true);  ScriptStep aggregatorStop=getAggregatorStep(false);  setAggregatorPair(aggregatorStop,aggregatorStart.getUuid());  setAggregatorPair(aggregatorStart,aggregatorStop.getUuid());  scriptEditor.insert(aggregatorStop,selectedSteps.get(selectedSteps.size() - 1).getStepIndex());  scriptEditor.insert(aggregatorStart,selectedSteps.get(0).getStepIndex() - 1);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private void subscribe(){  String actionTaken=context.getString(R.string.toast_sub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);}  }
class C{  public double y(){  return y;}  }
class C{  public String displayOutputVariables(){  return MLContextUtil.displaySet("Output Variables",outputVariables);}  }
class C{  public PieChart(CategorySeries dataset,DefaultRenderer renderer){  super(dataset,renderer);  mPieMapper=new PieMapper();}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(this.toString(this.getClass()));  buffer.append("[UseDefault=");  buffer.append(this.isUseDefault());  buffer.append(", UseLocaleFormat=");  buffer.append(this.useLocaleFormat);  if (this.displayPatterns != null) {    buffer.append(", Patterns={");    buffer.append(this.displayPatterns);    buffer.append('}');  }  if (this.locale != null) {    buffer.append(", Locale=");    buffer.append(this.locale);  }  if (this.timeZone != null) {    buffer.append(", TimeZone=");    buffer.append(this.timeZone);  }  buffer.append(']');  return buffer.toString();}  }
class C{  public Dumper(Pdu.Origin origin,Writer out){  this.origin=origin;  this.out=out;}  }
class C{  public int compareTo(Object3D another){  if (mForcedDepth)   return -1;  if (mPosition.z < another.getZ())   return 1; else   if (mPosition.z > another.getZ())   return -1; else   return 0;}  }
class C{  private void sendCONNECTRequest() throws IOException {  int port=url.getPort();  requests.set(0,HTTP_CONNECT + " " + connectRequestURI(url)+ " "+ httpVersion,null);  requests.setIfNotSet("User-Agent",userAgent);  String host=url.getHost();  if (port != -1 && port != url.getDefaultPort()) {    host+=":" + String.valueOf(port);  }  requests.setIfNotSet("Host",host);  requests.setIfNotSet("Accept",acceptString);  if (http.getHttpKeepAliveSet()) {    requests.setIfNotSet("Proxy-Connection","keep-alive");  }  setPreemptiveProxyAuthentication(requests);  if (logger.isLoggable(PlatformLogger.Level.FINE)) {    logger.fine(requests.toString());  }  http.writeRequests(requests,null);}  }
class C{  public void removeFromTo(int from,int to){  elements.removeFromTo(from,to);  size-=to - from + 1;}  }
class C{  public boolean isCellEditable(int row,int column){  Tradestrategy element=getData().getTradestrategies().get(row);  if (null != element) {    if (!element.getTradeOrders().isEmpty()) {      return false;    }  }  if ((columnNames[column] == DATE) || (columnNames[column] == STRATEGY_MGR) || (columnNames[column] == PERCENTCHGFRCLOSE)|| (columnNames[column] == PERCENTCHGFROPEN)|| (columnNames[column] == STATUS)) {    return false;  }  return true;}  }
class C{  public static boolean isDestructibleImpl(final String id){  return id.startsWith("Destructible");}  }
class C{  public static double[] flatten(double M[][]){  double v[]=new double[M.length * M[0].length];  int k=0;  for (int i=0; i < M.length; i++) {    for (int j=0; j < M[i].length; j++) {      v[k++]=M[i][j];    }  }  return v;}  }
class C{  public void evaluateCrossValidation(int folds,Random rand){  if (folds < 2)   throw new UntrainedModelException("Model could not be evaluated because " + folds + " is < 2, and not valid for cross validation");  List<RegressionDataSet> lcds=dataSet.cvSet(folds,rand);  evaluateCrossValidation(lcds);}  }
class C{  private static boolean isEqual(BufferedImage image1,BufferedImage image2){  DataBufferInt buf1=(DataBufferInt)image1.getRaster().getDataBuffer();  DataBufferInt buf2=(DataBufferInt)image2.getRaster().getDataBuffer();  if (buf1.getSize() != buf2.getSize()) {    return false;  }  int[] data1=buf1.getData();  int[] data2=buf2.getData();  for (int i=0; i < data1.length; i++) {    int color1=data1[i];    int color2=data2[i];    if (color1 != color2) {      return false;    }  }  return true;}  }
class C{  public boolean containsValue(Object value,boolean identity){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return true;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return true;  } else   if (identity) {    if (value == zeroValue)     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return true;  } else {    if (hasZeroValue && value.equals(zeroValue))     return true;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return true;  }  return false;}  }
class C{  public Parameter pop(){  int x=param.lastIndexOf(delimiter);  if (x == -1)   return null; else   return new Parameter(param.substring(0,x));}  }
class C{  public static boolean isIdCardNumber(String str){  return isRegexMatch(str,REGEX_ID_CARD);}  }
class C{  public static void main(String[] args) throws IgniteException {  try {    Server.createTcpServer("-tcpDaemon").start();    populateDatabase();    JdbcConnectionPool dataSrc=JdbcConnectionPool.create("jdbc:h2:tcp://localhost/mem:ExampleDb","sa","");    RunScript.execute(dataSrc.getConnection(),new StringReader(CREATE_PERSON_TABLE));    RunScript.execute(dataSrc.getConnection(),new StringReader(POPULATE_PERSON_TABLE));  } catch (  SQLException e) {    throw new IgniteException("Failed to start database TCP server",e);  }  try {    do {      System.out.println("Type 'q' and press 'Enter' to stop H2 TCP server...");    } while ('q' != System.in.read());  } catch (  IOException ignored) {  }}  }
class C{  private static OFActionSetTpSrc decode_set_src_port(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        TransportPort portnum=TransportPort.of(get_int(n.group(1)));        OFActionSetTpSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetTpSrc();        ab.setTpPort(portnum);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid src-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  private boolean isSystemPackage(PackageInfo packageInfo){  return ((packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void dataAggregationProcessorWritting(){  IAggregator<TimerData> aggregator=mock(IAggregator.class);  when(aggregator.getAggregationKey(Matchers.<TimerData>anyObject())).thenReturn(1L);  DataAggregatorProcessor<TimerData> dataProcessor=new DataAggregatorProcessor<>(TimerData.class,1000,1,aggregator,false);  IWriter writer=mock(IWriter.class);  dataProcessor.setStorageWriter(writer);  TimerData timerData1=new TimerData();  timerData1.setId(1L);  timerData1.setTimeStamp(new Timestamp(new Date().getTime()));  when(aggregator.getClone(Matchers.<TimerData>anyObject())).thenReturn(new AggregatedTimerData());  dataProcessor.process(timerData1);  dataProcessor.process(timerData1);  verify(aggregator,times(2)).aggregate(Matchers.<IAggregatedData<TimerData>>anyObject(),eq(timerData1));  verifyNoMoreInteractions(writer);  Timestamp newTimestamp=new Timestamp(timerData1.getTimeStamp().getTime() + 2000L);  timerData1.setTimeStamp(newTimestamp);  dataProcessor.process(timerData1);  ArgumentCaptor<DefaultData> writtenObject=ArgumentCaptor.forClass(DefaultData.class);  ArgumentCaptor<Map> kryoMap=ArgumentCaptor.forClass(Map.class);  verify(writer,times(1)).write(writtenObject.capture(),kryoMap.capture());  assertThat(writtenObject.getValue(),is(instanceOf(AggregatedTimerData.class)));  assertThat(((AggregatedTimerData)writtenObject.getValue()).getId(),is(1L));  assertThat(((Map<String,Boolean>)kryoMap.getValue()),hasEntry(KryoSerializationPreferences.WRITE_INVOCATION_AFFILIATION_DATA,Boolean.FALSE));}  }
class C{  public Quaternionf fromAxisAngleRad(Vector3fc axis,float angle){  return fromAxisAngleRad(axis.x(),axis.y(),axis.z(),angle);}  }
class C{  public void fastNormalize(){  multiply((float)(1.95f - magnitudeSquared()));}  }
class C{  public void scale(float x,float y,float z){  showMissingWarning("scale");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.217 -0400",hash_original_method="43F5E066353E431B2C9AD7CD0397BCCF",hash_generated_method="F3752548F85DBDF2C8EDC6A522B89411") private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  private static void testBridgeMethods() throws Exception {  generateInterfaces();  compileCaller();  StackTraceElement[] frames=call("Caller","callStringMaker");  verifyFrames(frames,"Caller\\..*","Caller.callStringMaker");  frames=call("Caller","callMaker");  verifyFrames(frames,"Caller\\..*","Caller.callMaker");}  }
class C{  public boolean intersects(S2Cell cell,S2Point[] vertices){  if (height >= 1) {    return false;  }  if (isEmpty()) {    return false;  }  if (cell.contains(axis)) {    return true;  }  double sin2Angle=height * (2 - height);  for (int k=0; k < 4; ++k) {    S2Point edge=cell.getEdgeRaw(k);    double dot=axis.dotProd(edge);    if (dot > 0) {      continue;    }    if (dot * dot > sin2Angle * edge.norm2()) {      return false;    }    S2Point dir=S2Point.crossProd(edge,axis);    if (dir.dotProd(vertices[k]) < 0 && dir.dotProd(vertices[(k + 1) & 3]) > 0) {      return true;    }  }  return false;}  }
class C{  public StatusBar(){  setLayout(LookAndFeelTweaks.createHorizontalPercentLayout());  idToZones=new Hashtable();  setZoneBorder(BorderFactory.createLineBorder(Color.lightGray));}  }
class C{  public void dispose(){  m_debugPerspectiveModel.removeListener(m_listener);  synchronizeDebuggers(m_debugPerspectiveModel.getCurrentSelectedDebugger(),null);}  }
class C{  private void doBack(){  if (getBinding().web.canGoBack()) {    getBinding().web.goBack();  }}  }
class C{  private int parseFeatureFriday(String json){  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    int set=((Number)root.get("set")).intValue();    featureFridayChannel=(String)root.get("channel");    return set;  } catch (  ParseException|NullPointerException|ClassCastException ex) {  }  featureFridayChannel=null;  return -1;}  }
class C{  public void add(GroupCommand command){  _values.add(command);}  }
class C{  public SocialShare video(Uri videoUri){  if (videoUri == null)   throw new IllegalArgumentException("videoUri == null");  if (this.uri != null)   throw new IllegalStateException("Not allowed multiple uri's");  this.uri=videoUri;  this.mimeType=Mime.ANY_VIDEO;  return this;}  }
class C{  public void testQueryStorageCapabilities() throws java.lang.Exception {  com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilities request=(com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilities)getTestObject(com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilities.class);  useExistingSession();  request.setCapabilityUniqueId(storageCapabilityIds);  QueryStorageCapabilitiesResponse response=_stub.queryStorageCapabilities(request);  assertTrue(response.get_return().length > 0);}  }
class C{  @SuppressWarnings("unused") public UnsupportedIO(DataflowRunner runner,PubsubUnboundedSink<?> transform){  this.transform=transform;}  }
class C{  public SummaryAndConfigPanel(String summaryTitleText,String configButtonText,ActionListener configButtonActionListener){  super(new GridBagLayout());  this.summaryTitleText=summaryTitleText;  configButton=new JButton(configButtonText);  configButton.setIcon(new ImageIcon(SummaryAndConfigPanel.class.getResource("/resource/icon/16/041.png")));  configButton.addActionListener(configButtonActionListener);  this.add(configButton,LayoutHelper.getGBC(1,0,1,1,0.0D,0.0D));  summaryArea=new JEditorPane();  summaryArea.setContentType("text/html");  summaryArea.setEnabled(false);  setSummaryContent("");  this.add(summaryArea,LayoutHelper.getGBC(0,0,1,2,1.0D,new Insets(3,3,3,3)));}  }
class C{  public IsilonList<IsilonSnapshot> listSnapshots(String resumeToken,String pathBaseDir) throws IsilonException {  URI uri=URI_SNAPSHOTS;  if (pathBaseDir != null) {    StringBuffer URLBuffer=new StringBuffer(_baseUrl.resolve(uri).toString());    URLBuffer.append("?path=").append(pathBaseDir).append("&recurse_path_children=true");    uri=URI.create(URLBuffer.toString());    sLogger.info("get list of snapshots for pathbaseDir {} and uri {} .",pathBaseDir,uri.toString());  } else {    uri=_baseUrl.resolve(uri);  }  return list(uri,"snapshots",IsilonSnapshot.class,resumeToken);}  }
class C{  public YearMonthDay withChronologyRetainFields(Chronology newChronology){  newChronology=DateTimeUtils.getChronology(newChronology);  newChronology=newChronology.withUTC();  if (newChronology == getChronology()) {    return this;  } else {    YearMonthDay newYearMonthDay=new YearMonthDay(this,newChronology);    newChronology.validate(newYearMonthDay,getValues());    return newYearMonthDay;  }}  }
class C{  public VerticaDataSource(){}  }
class C{  public static int order(int g,int p){  int b, j;  b=g % p;  j=1;  if (b == 0) {    throw new IllegalArgumentException(g + " is not an element of Z/(" + p+ "Z)^*; it is not meaningful to compute its order.");  }  while (b != 1) {    b*=g;    b%=p;    if (b < 0) {      b+=p;    }    j++;  }  return j;}  }
class C{  protected double[] distributionForInstanceAverage(Instance instance) throws Exception {  double[] probs=new double[instance.numClasses()];  double numPredictions=0;  for (int i=0; i < m_Classifiers.length; i++) {    double[] dist=getClassifier(i).distributionForInstance(instance);    if (!instance.classAttribute().isNumeric() || !Utils.isMissingValue(dist[0])) {      for (int j=0; j < dist.length; j++) {        probs[j]+=dist[j];      }      numPredictions++;    }  }  for (int i=0; i < m_preBuiltClassifiers.size(); i++) {    double[] dist=m_preBuiltClassifiers.get(i).distributionForInstance(instance);    if (!instance.classAttribute().isNumeric() || !Utils.isMissingValue(dist[0])) {      for (int j=0; j < dist.length; j++) {        probs[j]+=dist[j];      }      numPredictions++;    }  }  if (instance.classAttribute().isNumeric()) {    if (numPredictions == 0) {      probs[0]=Utils.missingValue();    } else {      for (int j=0; j < probs.length; j++) {        probs[j]/=numPredictions;      }    }  } else {    if (Utils.sum(probs) > 0) {      Utils.normalize(probs);    }  }  return probs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.297 -0500",hash_original_method="CB42C1424760C62123C05E2F8CB60B35",hash_generated_method="D4E29284985BDC12CE5A30B884928967") public ErrorInfoHeader createErrorInfoHeader(URI errorInfo){  if (errorInfo == null)   throw new NullPointerException("null arg");  return new ErrorInfo((GenericURI)errorInfo);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void stop(){  if (process != null) {    process.destroy();  }}  }
class C{  public static BigDecimal deriveRate(Properties ctx,int C_UOM_ID,int C_UOM_To_ID){  if (C_UOM_ID == C_UOM_To_ID)   return Env.ONE;  MUOM from=MUOM.get(ctx,C_UOM_ID);  MUOM to=MUOM.get(ctx,C_UOM_To_ID);  if (from == null || to == null)   return null;  if (from.isMinute()) {    if (to.isHour())     return new BigDecimal(1.0 / 60.0);    if (to.isDay())     return new BigDecimal(1.0 / 1440.0);    if (to.isWorkDay())     return new BigDecimal(1.0 / 480.0);    if (to.isWeek())     return new BigDecimal(1.0 / 10080.0);    if (to.isMonth())     return new BigDecimal(1.0 / 43200.0);    if (to.isWorkMonth())     return new BigDecimal(1.0 / 9600.0);    if (to.isYear())     return new BigDecimal(1.0 / 525600.0);  }  if (from.isHour()) {    if (to.isMinute())     return new BigDecimal(60.0);    if (to.isDay())     return new BigDecimal(1.0 / 24.0);    if (to.isWorkDay())     return new BigDecimal(1.0 / 8.0);    if (to.isWeek())     return new BigDecimal(1.0 / 168.0);    if (to.isMonth())     return new BigDecimal(1.0 / 720.0);    if (to.isWorkMonth())     return new BigDecimal(1.0 / 160.0);    if (to.isYear())     return new BigDecimal(1.0 / 8760.0);  }  if (from.isDay()) {    if (to.isMinute())     return new BigDecimal(1440.0);    if (to.isHour())     return new BigDecimal(24.0);    if (to.isWorkDay())     return new BigDecimal(3.0);    if (to.isWeek())     return new BigDecimal(1.0 / 7.0);    if (to.isMonth())     return new BigDecimal(1.0 / 30.0);    if (to.isWorkMonth())     return new BigDecimal(1.0 / 20.0);    if (to.isYear())     return new BigDecimal(1.0 / 365.0);  }  if (from.isWorkDay()) {    if (to.isMinute())     return new BigDecimal(480.0);    if (to.isHour())     return new BigDecimal(8.0);    if (to.isDay())     return new BigDecimal(1.0 / 3.0);    if (to.isWeek())     return new BigDecimal(1.0 / 5);    if (to.isMonth())     return new BigDecimal(1.0 / 20.0);    if (to.isWorkMonth())     return new BigDecimal(1.0 / 20.0);    if (to.isYear())     return new BigDecimal(1.0 / 240.0);  }  if (from.isWeek()) {    if (to.isMinute())     return new BigDecimal(10080.0);    if (to.isHour())     return new BigDecimal(168.0);    if (to.isDay())     return new BigDecimal(7.0);    if (to.isWorkDay())     return new BigDecimal(5.0);    if (to.isMonth())     return new BigDecimal(1.0 / 4.0);    if (to.isWorkMonth())     return new BigDecimal(1.0 / 4.0);    if (to.isYear())     return new BigDecimal(1.0 / 50.0);  }  if (from.isMonth()) {    if (to.isMinute())     return new BigDecimal(43200.0);    if (to.isHour())     return new BigDecimal(720.0);    if (to.isDay())     return new BigDecimal(30.0);    if (to.isWorkDay())     return new BigDecimal(20.0);    if (to.isWeek())     return new BigDecimal(4.0);    if (to.isWorkMonth())     return new BigDecimal(1.5);    if (to.isYear())     return new BigDecimal(1.0 / 12.0);  }  if (from.isWorkMonth()) {    if (to.isMinute())     return new BigDecimal(9600.0);    if (to.isHour())     return new BigDecimal(160.0);    if (to.isDay())     return new BigDecimal(20.0);    if (to.isWorkDay())     return new BigDecimal(20.0);    if (to.isWeek())     return new BigDecimal(4.0);    if (to.isMonth())     return new BigDecimal(20.0 / 30.0);    if (to.isYear())     return new BigDecimal(1.0 / 12.0);  }  if (from.isYear()) {    if (to.isMinute())     return new BigDecimal(518400.0);    if (to.isHour())     return new BigDecimal(8640.0);    if (to.isDay())     return new BigDecimal(365.0);    if (to.isWorkDay())     return new BigDecimal(240.0);    if (to.isWeek())     return new BigDecimal(50.0);    if (to.isMonth())     return new BigDecimal(12.0);    if (to.isWorkMonth())     return new BigDecimal(12.0);  }  return null;}  }
class C{  public void updateValue(final Object value,final boolean isSelected,boolean sync){  if (isReadOnly()) {    return;  }  if (GenericFormFactory.isTextForm(formType)) {    textString=(String)value;    if (textString != null && textString.equals(lastTextString)) {      sync=false;    }    lastTextString=textString;  } else {    textString=(String)value;    this.isSelected=isSelected;    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {      sync=false;    }    lastTextString=textString;    lastIsSelected=isSelected;  }  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {    syncGUI(value);  }}  }
class C{  public Node compose(Reader yaml){  Composer composer=new Composer(new ParserImpl(new StreamReader(yaml)),resolver);  constructor.setComposer(composer);  return composer.getSingleNode();}  }
class C{  private static String[] expandTargetPlayerToken(String[] pathlist,Configuration configuration){  final String[] processed=new String[pathlist.length];  final String targetPlayerMajorVersion=String.valueOf(configuration.getTargetPlayerMajorVersion());  final String targetPlayerMinorVersion=String.valueOf(configuration.getTargetPlayerMinorVersion());  for (int i=0; i < pathlist.length; i++) {    processed[i]=StringUtils.substitute(pathlist[i],TARGET_PLAYER_MAJOR_VERSION_TOKEN,targetPlayerMajorVersion);    processed[i]=StringUtils.substitute(processed[i],TARGET_PLAYER_MINOR_VERSION_TOKEN,targetPlayerMinorVersion);  }  return processed;}  }
class C{  public DataStreamConnection(String host,int port,int id){  super(host,port,id);}  }
class C{  public final void collideCircles(Manifold manifold,final CircleShape circle1,final Transform xfA,final CircleShape circle2,final Transform xfB){  manifold.pointCount=0;  Vec2 circle1p=circle1.m_p;  Vec2 circle2p=circle2.m_p;  float pAx=(xfA.q.c * circle1p.x - xfA.q.s * circle1p.y) + xfA.p.x;  float pAy=(xfA.q.s * circle1p.x + xfA.q.c * circle1p.y) + xfA.p.y;  float pBx=(xfB.q.c * circle2p.x - xfB.q.s * circle2p.y) + xfB.p.x;  float pBy=(xfB.q.s * circle2p.x + xfB.q.c * circle2p.y) + xfB.p.y;  float dx=pBx - pAx;  float dy=pBy - pAy;  float distSqr=dx * dx + dy * dy;  final float radius=circle1.m_radius + circle2.m_radius;  if (distSqr > radius * radius) {    return;  }  manifold.type=ManifoldType.CIRCLES;  manifold.localPoint.set(circle1p);  manifold.localNormal.setZero();  manifold.pointCount=1;  manifold.points[0].localPoint.set(circle2p);  manifold.points[0].id.zero();}  }
class C{  private CBreakpointRemovalDialog(final JFrame parent,final Iterable<Pair<RelocatedAddress,Integer>> failedAddresses){  super(parent,Constants.DEFAULT_WINDOW_TITLE,true);  new CDialogEscaper(this);  CIconInitializer.initializeWindowIcons(this);  setLayout(new BorderLayout());  final JPanel upperPanel=new JPanel();  upperPanel.add(new JLabel("The following breakpoints could not be removed from the target process:"));  add(upperPanel,BorderLayout.NORTH);  final StringBuilder stringBuilder=new StringBuilder();  for (  final Pair<RelocatedAddress,Integer> pair : failedAddresses) {    stringBuilder.append(pair.first().getAddress().toHexString());    stringBuilder.append('\n');  }  final JTextArea textArea=new JTextArea(stringBuilder.toString());  textArea.setEditable(false);  textArea.setFont(GuiHelper.MONOSPACED_FONT);  add(new JScrollPane(textArea));  final JPanel lowerPanel=new JPanel(new BorderLayout());  final JButton button=new JButton(new InternalButtonAction());  lowerPanel.add(button,BorderLayout.EAST);  add(lowerPanel,BorderLayout.SOUTH);  setSize(500,300);}  }
class C{  @Override public void add(EnvironmentAlertHandler environmentAlertHandler,AlertHandler alertHandler){  if (environmentAlertHandler == null || environmentAlertHandler.getAlertHandlerId() == null || environmentAlertHandler.getAlertHandlerPriority() == null) {    throw new IllegalArgumentException("Invalid alert handler id.");  }  this.handlers.put(environmentAlertHandler,alertHandler);}  }
class C{  public List<ResourceNode> ls(String sessionID,String path,boolean doRecurse) throws DirectoryNotFoundException {  ResourceNode startNode=null;  startNode=getStartNode(sessionID,path);  List<ResourceNode> entries=new LinkedList<ResourceNode>();  if (!startNode.isContainer()) {    entries.add(startNode);    return entries;  }  getEntries(startNode,entries,doRecurse);  return entries;}  }
class C{  @Override protected void onPostExecute(String file_url){  pDialog.dismiss();}  }
class C{  public ShortConverter(final Object defaultValue){  super(false,defaultValue);}  }
class C{  public static char gsmExtendedToChar(int gsmChar){  if (gsmChar == GSM_EXTENDED_ESCAPE) {    return ' ';  } else   if (gsmChar >= 0 && gsmChar < 128) {    char c=sLanguageShiftTables[0].charAt(gsmChar);    if (c == ' ') {      return sLanguageTables[0].charAt(gsmChar);    } else {      return c;    }  } else {    return ' ';  }}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  protected boolean shouldDistributeInvalidateRegion(RegionEventImpl event){  return event.isDistributed() && !event.isOriginRemote();}  }
class C{  public void testPlain() throws Exception {  check(EntityPlain.class);}  }
class C{  @Override public void insert(Blorp item,int position){  if (sentinel.next == null || position == 0) {    insertFront(item);    return;  }  Node currentNode=sentinel.next.next;  while (position > 1 && currentNode.next != null) {    position-=1;    currentNode=currentNode.next;  }  Node newNode=new Node(item,currentNode.next);  currentNode.next=newNode;}  }
class C{  public void mouseLiberalDoubleClick(MouseEvent e){}  }
class C{  protected boolean select(MethodIdent methodIdent){  return !hideInactiveInstrumentations || methodIdent.hasActiveSensorTypes();}  }
class C{  public static void putInt(Context context,String key,int value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putInt(key,value);  editor.commit();}  }
class C{  public void add(Geometry geom){  geom.apply(ccFilter);  commonCoord=ccFilter.getCommonCoordinate();}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int len=((size - 1) / 32);  int oldBitsLen=len + 1;  for (int i=0; i < oldBitsLen; i++) {    long x=(long)bits[i];    x=((x >> 1) & 0x55555555L) | ((x & 0x55555555L) << 1);    x=((x >> 2) & 0x33333333L) | ((x & 0x33333333L) << 2);    x=((x >> 4) & 0x0f0f0f0fL) | ((x & 0x0f0f0f0fL) << 4);    x=((x >> 8) & 0x00ff00ffL) | ((x & 0x00ff00ffL) << 8);    x=((x >> 16) & 0x0000ffffL) | ((x & 0x0000ffffL) << 16);    newBits[len - i]=(int)x;  }  if (size != oldBitsLen * 32) {    int leftOffset=oldBitsLen * 32 - size;    int mask=1;    for (int i=0; i < 31 - leftOffset; i++) {      mask=(mask << 1) | 1;    }    int currentInt=(newBits[0] >> leftOffset) & mask;    for (int i=1; i < oldBitsLen; i++) {      int nextInt=newBits[i];      currentInt|=nextInt << (32 - leftOffset);      newBits[i - 1]=currentInt;      currentInt=(nextInt >> leftOffset) & mask;    }    newBits[oldBitsLen - 1]=currentInt;  }  bits=newBits;}  }
class C{  public MacroValue(Process process){  super("process.macro",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS);  handler=process.getMacroHandler();}  }
class C{  public boolean hasLeadingTagComment(char[] commentPrefixTag,int rangeEnd){  int iComment=this.scanner.commentPtr;  if (iComment < 0)   return false;  int iStatement=this.astLengthPtr;  if (iStatement < 0 || this.astLengthStack[iStatement] <= 1)   return false;  ASTNode lastNode=this.astStack[this.astPtr];  int rangeStart=lastNode.sourceEnd;  previousComment:   for (; iComment >= 0; iComment--) {    int commentStart=this.scanner.commentStarts[iComment];    if (commentStart < 0)     commentStart=-commentStart;    if (commentStart < rangeStart)     return false;    if (commentStart > rangeEnd)     continue previousComment;    char[] source=this.scanner.source;    int charPos=commentStart + 2;    for (; charPos < rangeEnd; charPos++) {      char c=source[charPos];      if (c >= ScannerHelper.MAX_OBVIOUS || (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_JLS_SPACE) == 0) {        break;      }    }    for (int iTag=0, length=commentPrefixTag.length; iTag < length; iTag++, charPos++) {      if (charPos >= rangeEnd)       return false;      if (source[charPos] != commentPrefixTag[iTag])       return false;    }    return true;  }  return false;}  }
class C{  protected void updateViewTitle(View v,JFrame f){  String title;  URI uri=v.getURI();  if (uri == null) {    title=labels.getString("unnamedFile");  } else {    title=URIUtil.getName(uri);  }  v.setTitle(labels.getFormatted("frame.title",title,getName(),v.getMultipleOpenId()));  f.setTitle(v.getTitle());  if (uri != null && uri.getScheme() != null && uri.getScheme().equals("file")) {    f.getRootPane().putClientProperty("Window.documentFile",new File(uri));  } else {    f.getRootPane().putClientProperty("Window.documentFile",null);  }}  }
class C{  private static entryInfo parseListData(final String line){  final Matcher tokens=lsStyle.matcher(line);  if (tokens.matches() && tokens.groupCount() == 6) {    filetype type=filetype.file;    if (tokens.group(1).startsWith("d"))     type=filetype.directory;    if (tokens.group(1).startsWith("l"))     type=filetype.link;    long size=-1;    try {      size=Long.parseLong(tokens.group(2));    } catch (    final NumberFormatException e) {      log.warn("not a number in list-entry: ",e);      return null;    }    String time;    String year;    if (tokens.group(5).contains(":")) {      time=tokens.group(5);      year=String.valueOf(Calendar.getInstance().get(Calendar.YEAR));    } else {      time="00:00";      year=tokens.group(5);    }    Date date;    final String dateString=tokens.group(3) + " " + tokens.group(4)+ " "+ year+ " "+ time;    try {synchronized (lsDateFormat) {        date=lsDateFormat.parse(dateString);      }    } catch (    final ParseException e) {      log.warn("---- Error: not ls date-format '" + dateString,e);      date=new Date();    }    final String filename=tokens.group(6);    return new entryInfo(type,size,date,filename);  }  return null;}  }
class C{  void addNext(Node<T> n){  nextNodes.add(n);  Collections.sort(nextNodes,isVertical ? verticalComparator : horizontalComparator);}  }
class C{  protected void updateSize(){  resetMapping();  if (framePeer != null) {    framePeer.reshapeMenubarPeer();  }}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  public void aggregateData(AbstractScannedResult scannedResult,MeasureAggregator[] aggregators){  for (int i=0; i < dimensionDataAggergatorList.size(); i++) {    dimensionDataAggergatorList.get(i).aggregateDimensionData(scannedResult,aggregators);  }  expressionAggregator.aggregateExpression(scannedResult,aggregators);  measureAggregator.aggregateMeasure(scannedResult,aggregators);}  }
class C{  public WaveHeader(short format,short numChannels,int sampleRate,short bitsPerSample,int numBytes){  mFormat=format;  mSampleRate=sampleRate;  mNumChannels=numChannels;  mBitsPerSample=bitsPerSample;  mNumBytes=numBytes;}  }
class C{  public static Coordinate[] createCircle(double basex,double basey,double size,int nPts){  Coordinate[] pts=new Coordinate[nPts + 1];  int iPt=0;  double len=size / 2.0;  for (int i=0; i < nPts; i++) {    double ang=i * (2 * Math.PI / nPts);    double x=len * Math.cos(ang) + basex;    double y=len * Math.sin(ang) + basey;    Coordinate pt=new Coordinate(x,y);    pts[iPt++]=pt;  }  pts[iPt]=pts[0];  return pts;}  }
class C{  public void addKeyMapping(IgniteTxKey key,ClusterNode node){  GridDistributedTxMapping m=mappings.get(node.id());  if (m == null)   mappings.put(m=new GridDistributedTxMapping(node));  IgniteTxEntry txEntry=entry(key);  assert txEntry != null;  txEntry.nodeId(node.id());  m.add(txEntry);  if (log.isDebugEnabled())   log.debug("Added mappings to transaction [locId=" + cctx.localNodeId() + ", key="+ key+ ", node="+ node+ ", tx="+ this+ ']');}  }
class C{  public static double[] increment(double begin,double pitch,double end){  double[] array=new double[(int)((end - begin) / pitch) + 1];  for (int i=0; i < array.length; i++) {    array[i]=begin + i * pitch;  }  return array;}  }
class C{  public static boolean isPersianLeapYear(int persianYear){  return PersianCalendarUtils.ceil((38D + (PersianCalendarUtils.ceil(persianYear - 474L,2820L) + 474L)) * 682D,2816D) < 682L;}  }
class C{  public static RefactoringStatus createInfoStatus(String msg){  return createStatus(INFO,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  protected void stopRemoteListen(){  if (rmtLsnrId != null)   IgniteGrid.getIgnite().events(IgniteGrid.getIgnite().cluster().forCacheNodes(cacheName)).stopRemoteListen(rmtLsnrId);  rmtLsnrId=null;}  }
class C{  static public String join(String str[],char separator){  return join(str,String.valueOf(separator));}  }
class C{  public static final float asinh(float x){  return (float)Math.log(x + Math.sqrt(x * x + 1));}  }
class C{  public ByteBuffer(){  this(64);}  }
class C{  private Map<AggregationKey,AggregationValue> process(Map<AggregationKey,AggregationValue> map,GraphType type){  long nowTruncatedToPeriod=System.currentTimeMillis() / type.period;  List<AggregationKey> keys=new ArrayList<>(map.keySet());  Collections.sort(keys,AggregationKey.AGGREGATION_KEY_COMPARATOR);  Map<AggregationKey,AggregationValue> removedKeys=new HashMap<>();  for (  AggregationKey keyToRemove : keys) {    if (keyToRemove.isOutdated(nowTruncatedToPeriod)) {      AggregationValue value=map.get(keyToRemove);      try {        final Path userReportFolder=Paths.get(reportingPath,keyToRemove.username);        if (Files.notExists(userReportFolder)) {          Files.createDirectories(userReportFolder);        }        String fileName=generateFilename(keyToRemove.dashId,keyToRemove.pinType,keyToRemove.pin,type);        Path filePath=Paths.get(userReportFolder.toString(),fileName);        write(filePath,value.calcAverage(),keyToRemove.getTs(type));        final AggregationValue removedValue=map.remove(keyToRemove);        removedKeys.put(keyToRemove,removedValue);      } catch (      IOException ioe) {        log.error("Error open user data reporting file. Reason : {}",ioe.getMessage());      }    }  }  return removedKeys;}  }
class C{  public TextAreaOutputStream(JTextArea textArea){  this.textArea=textArea;  lengthWritten=textArea.getText().length();}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  if (extns == null) {    return false;  }  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);  return !extns.isEmpty();}  }
class C{  public static void onResume(Context context,String appkey,String channel){  init(context);  if (!TextUtils.isEmpty(appkey)) {    setAppKey(appkey);  }  if (!TextUtils.isEmpty(channel)) {    setChannel(channel);  }  start_date=deviceHelper.getTime();  start=Long.valueOf(System.currentTimeMillis());  isCreateNewSessionID();  if (activityTrack) {    current_activity=deviceHelper.getActivityName();  }}  }
class C{  private void messageDeliveredAction(Bundle data){  IMqttToken token=removeMqttToken(data);  if (token != null) {    if (callback != null) {      Status status=(Status)data.getSerializable(MqttServiceConstants.CALLBACK_STATUS);      if (status == Status.OK) {        callback.deliveryComplete((IMqttDeliveryToken)token);      }    }  }}  }
class C{  public final AC shrinkWeight(float w){  return shrink(w);}  }
class C{  public DatagramConnection createDatagramConnection(){  return new AndroidDatagramConnection();}  }
class C{  public void addDatatype(Class<?> type,String datatype) throws ObjectStoreConfigException {  addDatatype(type,vf.createURI(datatype));}  }
class C{  public static int parseInteger(String text){  try {    return Integer.parseInt(text);  } catch (  NumberFormatException e) {    return 0;  }}  }
class C{  boolean adjustSB(int x,int y,boolean checkLoc){  int innerR=getWheelRadius() - getWheelWidth();  boolean resetXY=false;  y=-y;  if (checkLoc && (x < -innerR || x > innerR || y < -innerR || y > innerR)) {    return false;  }  int triangleSize=innerR * 3 / 2;  double x1=Math.cos(angle) * x - Math.sin(angle) * y;  double y1=Math.sin(angle) * x + Math.cos(angle) * y;  if (x1 < -(innerR / 2)) {    if (checkLoc) {      return false;    }    x1=-innerR / 2;    resetXY=true;  } else   if ((int)x1 > innerR) {    if (checkLoc) {      return false;    }    x1=innerR;    resetXY=true;  }  int maxY=(int)((triangleSize - x1 - innerR / 2.0) * Math.tan(Math.toRadians(30.0)));  if (y1 <= -maxY) {    if (checkLoc) {      return false;    }    y1=-maxY;    resetXY=true;  } else   if (y1 > maxY) {    if (checkLoc) {      return false;    }    y1=maxY;    resetXY=true;  }  double x2=Math.cos(Math.toRadians(-30.0)) * x1 - Math.sin(Math.toRadians(-30.0)) * y1;  double y2=Math.sin(Math.toRadians(-30.0)) * x1 + Math.cos(Math.toRadians(-30.0)) * y1;  float value=Math.min(1.0f,(float)((innerR - y2) / (double)triangleSize));  float maxX=(float)(Math.tan(Math.toRadians(30)) * (innerR - y2));  float saturation=Math.min(1.0f,(float)(x2 / maxX / 2 + .5));  setFlag(FLAGS_SETTING_COLOR,true);  if (resetXY) {    setSaturationAndBrightness(saturation,value);  } else {    setSaturationAndBrightness(saturation,value,x + getWheelXOrigin(),getWheelYOrigin() - y);  }  GTKColorChooserPanel.this.setSaturationAndBrightness(saturation,value,true);  setFlag(FLAGS_SETTING_COLOR,false);  return true;}  }
class C{  @Override public String toString(){  if (!hasRequiredRoles()) {    return "RequiredRoles(none)";  } else {    final StringBuffer sb=new StringBuffer();    sb.append("RequiredRoles(");    boolean comma=false;    for (Iterator<Role> iter=this.requiredRoles.iterator(); iter.hasNext(); ) {      if (comma)       sb.append(",");      Role role=iter.next();      sb.append(role.getName());      comma=true;    }    sb.append("); Policy:");    sb.append(this.lossAction.toString());    sb.append("; Action:");    sb.append(this.resumptionAction.toString());    return sb.toString();  }}  }
class C{  public String toString(){  return String.valueOf(value);}  }
class C{  public boolean hasSpanWithId(String id){  TraceState ts=traceState.get();  if (ts != null) {    String currentId=ts.peekId();    if (log.isLoggable(Level.FINEST)) {      log.finest("Has span with id = " + id + "? "+ currentId.equals(id));    }    return currentId.equals(id);  }  return false;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public ObjectIdentifier(int[] oid,String name,Object oidGroup){  this(oid);  if (oidGroup == null) {    throw new NullPointerException("oidGroup == null");  }  this.group=oidGroup;  this.name=name;  toOIDString();}  }
class C{  public boolean isEmpty(){  return table.isEmpty();}  }
class C{  public boolean publish(final String publicationTopic,final byte[] payload,final int qos,final boolean retained){  if (canPublish()) {    try {      logger.info("Publishing message on topic \"" + publicationTopic + "\". Payload size = "+ payload.length);      client.publish(publicationTopic,payload,qos,retained);      logger.trace("Published message on topic \"" + publicationTopic + "\". Payload size = "+ payload.length);      return true;    } catch (    MqttException e) {      logger.error("Cannot publish message on " + publicationTopic,e);    }  } else {    logger.warn("Publication attempt failure - no connection available...");  }  return false;}  }
class C{  private void handleActionFoo(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  protected static int parseValueLength(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  int first=temp & 0xFF;  if (first <= SHORT_LENGTH_MAX) {    return first;  } else   if (first == LENGTH_QUOTE) {    return parseUnsignedInt(pduDataStream);  }  throw new RuntimeException("Value length > LENGTH_QUOTE!");}  }
class C{  static double ensureNonNegative(double value){  checkArgument(!isNaN(value));  if (value > 0.0) {    return value;  } else {    return 0.0;  }}  }
class C{  public static boolean hasGingerbread(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD;}  }
class C{  static private String LONG_Min(){  long tempValue=Long.MIN_VALUE;  return String.valueOf(tempValue);}  }
class C{  public static Stopwatch createStarted(Ticker ticker){  return new Stopwatch(ticker).start();}  }
class C{  private void positionOverlayControls(){  if (isVisible()) {    Dimension controlsSize=overlayControls.getSize();    Dimension windowSize=getSize();    Point windowPos=getLocationOnScreen();    Point controlPos=new Point();    controlPos.x=(int)((windowSize.width - controlsSize.width) * 0.5 + windowPos.x);    controlPos.y=(int)((windowSize.height - controlsSize.height) - 20 + windowPos.y);    overlayControls.setLocation(controlPos);  }}  }
class C{  public MLContext(SparkContext sc,boolean monitorPerformance){  initMLContext(sc,monitorPerformance);}  }
class C{  @SpecializedMethodInvoke @NoInline public static void invoke(int id,Object object,TransitiveClosure trace){  fallback(object,trace);}  }
class C{  public void activate(){  activated=true;  hologram.removeLine(1);  hologram.appendTextLine(Utils.color("&fACTIVATED"));}  }
class C{  public SolrPing(){  super(METHOD.GET,CommonParams.PING_HANDLER);  params=new ModifiableSolrParams();}  }
class C{  public final Vec3D invert(){  x*=-1;  y*=-1;  z*=-1;  return this;}  }
class C{  public SortableProductDataProvider(final ProductSearchResultPageDTO products){  this.products=products;}  }
class C{  @Override public void onViewCreated(View view,Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  final LayoutInflater inflater=LayoutInflater.from(getActivity());  final View child=inflater.inflate(R.layout.fragment_course_detail,mCourseDetailLayout,false);  mShortDescription=(TextView)child.findViewById(R.id.course_detail_short_description);  if (courseDetail.short_description == null || courseDetail.short_description.isEmpty()) {    ((ViewGroup)mShortDescription.getParent()).removeView(mShortDescription);  }  mCourseDetailLayout.addView(child);  mEnrollButton=(Button)child.findViewById(R.id.button_enroll_now);  configureEnrollButton();  courseDetailFieldLayout=(LinearLayout)view.findViewById(R.id.course_detail_fields);  if (courseDetail.effort != null && !courseDetail.effort.isEmpty()) {    ViewHolder holder=createCourseDetailFieldViewHolder(inflater,mCourseDetailLayout);    holder.rowIcon.setIcon(FontAwesomeIcons.fa_dashboard);    holder.rowFieldName.setText(R.string.effort_field_name);    holder.rowFieldText.setText(courseDetail.effort);  }  courseAbout=(FrameLayout)view.findViewById(R.id.course_detail_course_about);  courseAboutWebView=(EdxWebView)courseAbout.findViewById(R.id.course_detail_course_about_webview);}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  public static Constant merge(Constant a,Constant b){  if (!a.isConstant() || !b.isConstant()) {    return NOT_CONSTANT;  }  if (a.value.getClass() != b.value.getClass() || !a.value.equals(b.value)) {    return NOT_CONSTANT;  }  return a;}  }
class C{  protected void sendTestMessage(QsiMessage m){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,null);  return;}  }
class C{  public void testHasAttribute1() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",builder);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(4);  state=testNode.hasAttribute("domestic");  assertFalse("throw_False",state);}  }
class C{  public boolean containsSPKIData(){  return this.lengthSPKIData() > 0;}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public boolean visit(MoveTargetEdit edit){  return visitNode(edit);}  }
class C{  static public void assertEquals(String message,char expected,char actual){  assertEquals(message,new Character(expected),new Character(actual));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BINARY_LOGICAL_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.BINARY_LOGICAL_EXPRESSION__OP:setOp((BinaryLogicalOperator)newValue);return;case N4JSPackage.BINARY_LOGICAL_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void addBugPatternToFilter(BugPattern pattern){  elementChecked(pattern,true);}  }
class C{  public KMLDocument(String namespaceURI){  super(namespaceURI);}  }
class C{  public int numParameters(){  return idx[f.length];}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.CONSTRAINT__TYPE:    return type != TYPE_EDEFAULT;case DatatypePackage.CONSTRAINT__CONSTRAINT_VALUES:  return CONSTRAINT_VALUES_EDEFAULT == null ? constraintValues != null : !CONSTRAINT_VALUES_EDEFAULT.equals(constraintValues);}return super.eIsSet(featureID);}  }
class C{  public static BlockObject fetchExportMaskBlockObject(DbClient dbClient,URI blockURI){  BlockObject bo=null;  if (URIUtil.isType(blockURI,Volume.class)) {    bo=dbClient.queryObject(Volume.class,blockURI);  } else   if (URIUtil.isType(blockURI,BlockSnapshot.class)) {    BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,blockURI);    if (snapshot != null && snapshot.getParent() != null && NullColumnValueGetter.isNotNullValue(snapshot.getTechnologyType()) && snapshot.getTechnologyType().equals(TechnologyType.RP.name())) {      Volume parent=dbClient.queryObject(Volume.class,snapshot.getParent().getURI());      if (parent.getRpTargets() != null) {        for (        String targetIdStr : parent.getRpTargets()) {          Volume targetVolume=dbClient.queryObject(Volume.class,URI.create(targetIdStr));          if (targetVolume != null && targetVolume.getVirtualArray().equals(snapshot.getVirtualArray())) {            return snapshot;          }        }      }      return null;    }    bo=snapshot;  } else   if (URIUtil.isType(blockURI,BlockMirror.class)) {    BlockMirror mirror=dbClient.queryObject(BlockMirror.class,blockURI);    bo=mirror;  }  return bo;}  }
class C{  private boolean isSubstitute(Method m){  if (Modifier.isStatic(m.getModifiers()) && m.getName().equals(name)) {    if (parameters.length == m.getParameterCount()) {      Class<?>[] mparams=m.getParameterTypes();      int start=0;      if (!originalIsStatic) {        start=1;        if (!mparams[0].isAssignableFrom(resolveType(parameters[0],false))) {          return false;        }      }      for (int i=start; i < mparams.length; i++) {        if (mparams[i] != resolveType(parameters[i],false)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public static MPayment createPayment(Properties ctx,MInvoice invoice,String docBaseType,String tenderType,BigDecimal amount,String trxName) throws OperationException {  if (tenderType == null) {    throw new IllegalArgumentException("Tender type is invalid");  }  if (docBaseType == null) {    throw new IllegalArgumentException("Document Base Type is invalid");  }  MPayment payment=new MPayment(ctx,0,trxName);  payment.setC_BPartner_ID(invoice.getC_BPartner_ID());  payment.setC_Currency_ID(invoice.getC_Currency_ID());  payment.setC_Order_ID(invoice.getC_Order_ID());  MDocType[] docTypes=MDocType.getOfDocBaseType(ctx,docBaseType);  if (docTypes.length == 0)   throw new OperationException("not document type found for payment");  payment.setC_Invoice_ID(invoice.get_ID());  payment.setC_DocType_ID(docTypes[0].get_ID());  payment.setTenderType(tenderType);  payment.setPayAmt(amount);  if (MDocType.DOCBASETYPE_APPayment.equals(docBaseType)) {    payment.setIsReceipt(false);    payment.setDescription("(AP Payment) Payment Made");  } else   if (MDocType.DOCBASETYPE_ARReceipt.equals(docBaseType)) {    payment.setIsReceipt(true);    payment.setDescription("(AR Receipt) Payment Received");  } else {    throw new IllegalArgumentException("Invalid Document Base Type, DocBaseType: " + docBaseType);  }  if (MPayment.TENDERTYPE_Cash.equals(tenderType)) {    int cashbookId=POSTerminalManager.getCashBookId(ctx);    payment.setC_CashBook_ID(cashbookId);  } else {    int bankAccountId=POSTerminalManager.getBankAccountId(ctx,payment.getTenderType());    payment.setC_BankAccount_ID(bankAccountId);  }  PoManager.save(payment);  payment.setIsPrepayment(false);  PoManager.save(payment);  invoice.setC_Payment_ID(payment.get_ID());  PoManager.save(invoice);  return payment;}  }
class C{  public static void destroyRegion(String dsName,File[] dsDirs,String regName) throws Exception {  try {    DiskStoreImpl dsi=createForOffline(dsName,dsDirs);    dsi.destroyRegion(regName);  }  finally {    cleanupOffline();  }}  }
class C{  public void addHitEffects(Coord4D coord,MovingObjectPosition mop){}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.firstBarPaint,stream);  SerialUtilities.writePaint(this.lastBarPaint,stream);  SerialUtilities.writePaint(this.positiveBarPaint,stream);  SerialUtilities.writePaint(this.negativeBarPaint,stream);}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  synchronized void clearConnectedHandler(){  this.connectedHandler=null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.857 -0500",hash_original_method="7812A944CC6B2EE743043503F380EB35",hash_generated_method="0E8D7F2E1F7528C3F12D33E967E2B234") private boolean addWorker(Runnable firstTask,boolean core){  retry:   for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;    for (; ; ) {      int wc=workerCountOf(c);      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;      if (compareAndIncrementWorkerCount(c))       break retry;      c=ctl.get();      if (runStateOf(c) != rs)       continue retry;    }  }  Worker w=new Worker(firstTask);  Thread t=w.thread;  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    int c=ctl.get();    int rs=runStateOf(c);    if (t == null || (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null))) {      decrementWorkerCount();      tryTerminate();      return false;    }    workers.add(w);    int s=workers.size();    if (s > largestPoolSize)     largestPoolSize=s;  }  finally {    mainLock.unlock();  }  t.start();  if (runStateOf(ctl.get()) == STOP && !t.isInterrupted())   t.interrupt();  return true;}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public Response login(@Valid LoginRequest request){  String username=request.username();  String password=String.copyValueOf(request.password());  Optional<User> optionalUser=Optional.empty();  try {    optionalUser=userAuthenticator.authenticate(new BasicCredentials(username,password));  } catch (  AuthenticationException e) {    logger.warn("User authenticator threw something weird.",e);  }  if (!optionalUser.isPresent()) {    logger.info("User authentication failed at login for {}",username);    throw new NotAuthorizedException("");  }  logger.info("User logged in: {}",username);  Response.ResponseBuilder response=Response.seeOther(URI.create("/ui/index.html")).cacheControl(CacheControl.valueOf("no-cache"));  cookiesForUser(optionalUser.get()).forEach(null);  return response.build();}  }
class C{  public PreDestroyApplicationEvent(FacesContext facesContext,Application application){  super(facesContext,application);}  }
class C{  @LargeTest public void testThumbnailForH264WVGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";  final int outWidth=64;  final int outHeight=64;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final long atTime=mediaVideoItem.getDuration() / 2;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {  String retVal="";  try (StringWriter writer=new StringWriter()){    toXml(toConvert,writer,prettyXml);    retVal=writer.toString();    return retVal;  } }  }
class C{  public void testDeploymentPlanHotDeployment() throws Exception {  setContainer(createContainer(createConfiguration(ConfigurationType.STANDALONE)));  String urlInternal=this.fileHandler.createDirectory(getInstalledLocalContainer().getHome(),"repositories/url-internal");  this.fileHandler.copyFile(getTestData().getTestDataFileFor("simple-war"),urlInternal + "/cargo-simple-war.war");  Deployable deploymentPlan=new DefaultDeployableFactory().createDeployable(getContainer().getId(),"target/test-classes/jonas-deploymentplan.xml",DeployableType.FILE);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/cargo-simple-war/index.jsp");  getLocalContainer().start();  PingUtils.assertPingFalse("simple war should not be started at this point",warPingURL,getLogger());  Deployer deployer=createDeployer(getContainer());  DeployableMonitor deployableMonitor=new URLDeployableMonitor(warPingURL);  deployableMonitor.setLogger(this.getLogger());  deployer.deploy(deploymentPlan,deployableMonitor);  PingUtils.assertPingTrue("simple war should have been started at this point",warPingURL,getLogger());  deployer.undeploy(deploymentPlan,deployableMonitor);  PingUtils.assertPingFalse("simple war should have been stopped at this point",warPingURL,getLogger());  getLocalContainer().stop();}  }
class C{  public static void show(final Window owner,final String shortMessage,final String description){  show(owner,shortMessage,description,null);}  }
class C{  public void tick(){  final long count=uncounted.sumThenReset();  final double instantRate=count / interval;  if (initialized) {    rate+=(alpha * (instantRate - rate));  } else {    rate=instantRate;    initialized=true;  }}  }
class C{  static void checkCompatible(FieldInfo fieldInfo){  if (fieldInfo.getPointDimensionCount() != 0 && fieldInfo.getPointDimensionCount() != TYPE.pointDimensionCount()) {    throw new IllegalArgumentException("field=\"" + fieldInfo.name + "\" was indexed with numDims="+ fieldInfo.getPointDimensionCount()+ " but this point type has numDims="+ TYPE.pointDimensionCount()+ ", is the field really a LatLonPoint?");  }  if (fieldInfo.getPointNumBytes() != 0 && fieldInfo.getPointNumBytes() != TYPE.pointNumBytes()) {    throw new IllegalArgumentException("field=\"" + fieldInfo.name + "\" was indexed with bytesPerDim="+ fieldInfo.getPointNumBytes()+ " but this point type has bytesPerDim="+ TYPE.pointNumBytes()+ ", is the field really a LatLonPoint?");  }}  }
class C{  public static void openEffectsPanel(final Activity context){  try {    final Intent effects=new Intent(AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL);    effects.putExtra(AudioEffect.EXTRA_AUDIO_SESSION,MusicUtils.getAudioSessionId());    context.startActivity(effects);  } catch (  final ActivityNotFoundException notFound) {    AppMsg.makeText(context,context.getString(R.string.no_effects_for_you),AppMsg.STYLE_ALERT);  }}  }
class C{  public String parseNext(){  StringBuilder result=new StringBuilder();  if (signature.startsWith("[")) {    int dimensions=0;    do {      ++dimensions;      signature=signature.substring(1);    } while (signature.charAt(0) == '[');    result.append(parseNext());    while (dimensions-- > 0) {      result.append("[]");    }  } else   if (signature.startsWith("L")) {    int semi=signature.indexOf(';');    if (semi < 0) {      throw new IllegalStateException("missing semicolon in signature " + signature);    }    result.append(signature.substring(1,semi).replace('/','.'));    signature=signature.substring(semi + 1);  } else {switch (signature.charAt(0)) {case 'B':      result.append("byte");    break;case 'C':  result.append("char");break;case 'D':result.append("double");break;case 'F':result.append("float");break;case 'I':result.append("int");break;case 'J':result.append("long");break;case 'S':result.append("short");break;case 'Z':result.append("boolean");break;case 'V':result.append("void");break;default :throw new IllegalArgumentException("bad signature " + signature);}skip();}return result.toString();}  }
class C{  public Long zrem(final byte[] key,final byte[]... members){  checkIsInMulti();  client.zrem(key,members);  return client.getIntegerReply();}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(getHandle().getModifiers());}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){}  }
class C{  public static void showConfirmSheet(Component parentComponent,Object message,int optionType,SheetListener listener){  showConfirmSheet(parentComponent,message,optionType,JOptionPane.QUESTION_MESSAGE,listener);}  }
class C{  @DSComment("InputStreamReader class") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.978 -0500",hash_original_method="FE46DA5B445A82E67613621D1604074D",hash_generated_method="64568DB66E5B89ACA9154E9C002982F9") @Override public void close() throws IOException {synchronized (lock) {    if (decoder != null) {      decoder.reset();    }    decoder=null;    if (in != null) {      in.close();      in=null;    }  }}  }
class C{  public void subscribersOn(String channel){  if (onChannel(channel,true)) {    sendMessage(channel,".subscribers","Trying to turn on subscribers mode..");  }}  }
class C{  public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  bundle.putParcelableArrayList(key,value);  return this;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("TransitionRule[").append(offsetBefore.compareTo(offsetAfter) > 0 ? "Gap " : "Overlap ").append(offsetBefore).append(" to ").append(offsetAfter).append(", ");  if (dow != null) {    if (dom == -1) {      buf.append(dow.name()).append(" on or before last day of ").append(month.name());    } else     if (dom < 0) {      buf.append(dow.name()).append(" on or before last day minus ").append(-dom - 1).append(" of ").append(month.name());    } else {      buf.append(dow.name()).append(" on or after ").append(month.name()).append(' ').append(dom);    }  } else {    buf.append(month.name()).append(' ').append(dom);  }  buf.append(" at ").append(timeEndOfDay ? "24:00" : time.toString()).append(" ").append(timeDefinition).append(", standard offset ").append(standardOffset).append(']');  return buf.toString();}  }
class C{  public UnionMemberDescriptionWithError(IEObjectDescription delegate,ComposedTypeRef composedTypeRef,IScope[] subScopes,boolean writeAccess){  super(delegate);  this.composedTypeRef=composedTypeRef;  this.subScopes=subScopes;  max=subScopes.length;  this.writeAccess=writeAccess;}  }
