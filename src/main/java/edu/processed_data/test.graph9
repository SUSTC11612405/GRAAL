class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private static List<LoadMetadataDetails> checkPreserveSegmentsPropertyReturnRemaining(List<LoadMetadataDetails> segments){  int numberOfSegmentsToBePreserved=0;  numberOfSegmentsToBePreserved=CarbonProperties.getInstance().getNumberOfSegmentsToBePreserved();  return CarbonDataMergerUtil.getValidLoadDetailsWithRetaining(segments,numberOfSegmentsToBePreserved);}  }
class C{  public ZWaveVersionCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  private boolean checkRedundancy(int code,RectangleNode pnew){  if (code == GeometricManager.ONE_TO_ONE)   pnew.L_prime=pnew.L;  for (int i=code; i <= GeometricManager.MANY_TO_MANY; ++i) {    SegmentNode p=header[i];    while (p != null) {switch (i) {case GeometricManager.ONE_TO_ONE:        if ((p.I2 - p.I1) == (pnew.I2 - pnew.I1)) {          if (pnew.I1 >= p.I1 && (pnew.I1 + pnew.L) <= (p.I1 + p.L))           return true;        }      break;case GeometricManager.MANY_TO_MANY:    if (pnew.I1 >= p.I1 && pnew.I2 >= p.I2) {      if ((pnew.I1 + pnew.L) <= (p.I1 + p.L) && (pnew.I2 + pnew.L_prime) <= (p.I2 + ((RectangleNode)p).L_prime))       return true;    }  break;}p=p.next;}}return false;}  }
class C{  @Override public boolean supportsFifoOrder(){  return true;}  }
class C{  public AuthenticationException(String s){  super(s);}  }
class C{  public INSECTCategoryDB(){}  }
class C{  public Iterator<Interval> periodIterator(ReadablePeriod readablePeriod){  List<Iterator<? extends Interval>> periodIterators=this.stream().map(null).collect(Collectors.toList());  return IteratorUtils.chainedIterator(periodIterators);}  }
class C{  public boolean entails(Abstraction other){  if (accessPath == null) {    if (other.accessPath != null)     return false;  } else   if (!accessPath.entails(other.accessPath))   return false;  return localEquals(other);}  }
class C{  @Nullable public String evaluate(@NonNull String expression,@NonNull Map<String,Object> inputs){  try {    myCurrentExpression=expression;    Template inputsTemplate=myFreemarker.getTemplate(expression);    StringWriter out=new StringWriter();    Map<String,Object> args=com.android.tools.idea.templates.Template.createParameterMap(inputs);    inputsTemplate.process(args,out);    out.flush();    return out.toString();  } catch (  Exception e) {    return null;  }}  }
class C{  public boolean hasAttributeWithValue(final WebElement element,final String attribute,final String value){  boolean result=true;  try {    bobcatWait.withTimeout(Timeouts.SMALL).until(null);  } catch (  TimeoutException e) {    result=false;  }  return result;}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  private void finish(){  Activity container=getActivity();  container.finish();}  }
class C{  public GroupsEditQuery audio(GroupsEditAudio value){  return unsafeParam("audio",value);}  }
class C{  protected MarketGetByIdQuery itemIds(List<String> value){  return unsafeParam("item_ids",value);}  }
class C{  @NotNull public static List<Color> resolveMultipleColors(@NotNull RenderResources resources,@Nullable ResourceValue value,@NotNull Project project){  return resolveMultipleColors(resources,value,project,0);}  }
class C{  public void remove(ProtocolNode node){  if (node == null)   return;  Iterator<Entry<Integer,ProtocolNode>> i=_nodes.entrySet().iterator();  while (i.hasNext()) {    ProtocolNode testNode=i.next().getValue();    if (node == testNode) {      i.remove();    } else     if (testNode instanceof PacketFamilly) {      ((PacketFamilly)testNode).remove(node);    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public VoidType fullCopy(){  VoidType tree=(VoidType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private boolean skipSeparator(boolean spaceRequired,boolean lookForPERefs) throws IOException, XNIException {  int depth=fPEDepth;  boolean sawSpace=fEntityScanner.skipSpaces();  if (!lookForPERefs || !fEntityScanner.skipChar('%')) {    return !spaceRequired || sawSpace || (depth != fPEDepth);  }  while (true) {    String name=fEntityScanner.scanName();    if (name == null) {      reportFatalError("NameRequiredInPEReference",null);    } else     if (!fEntityScanner.skipChar(';')) {      reportFatalError("SemicolonRequiredInPEReference",new Object[]{name});    }    startPE(name,false);    fEntityScanner.skipSpaces();    if (!fEntityScanner.skipChar('%'))     return true;  }}  }
class C{  public QuestCursor queryQuests(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_QUESTS;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new QuestCursor(wrapJoinHelper(builderQuest(),qh));}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public ConvergenceException(Throwable cause){  super(cause);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public PhotosEditQuery deletePlace(Boolean value){  return unsafeParam("delete_place",value);}  }
class C{  @Override public void onEvent(int event,String path){  Log_OC.d(TAG,"Got event " + event + " on FOLDER "+ mPath+ " about "+ ((path != null) ? path : ""));  boolean shouldSynchronize=false;synchronized (mObservedChildren) {    if (path != null && path.length() > 0 && mObservedChildren.containsKey(path)) {      if (((event & FileObserver.MODIFY) != 0) || ((event & FileObserver.ATTRIB) != 0) || ((event & FileObserver.MOVED_TO) != 0)) {        if (mObservedChildren.get(path) != true) {          mObservedChildren.put(path,Boolean.valueOf(true));        }      }      if ((event & FileObserver.CLOSE_WRITE) != 0 && mObservedChildren.get(path)) {        mObservedChildren.put(path,Boolean.valueOf(false));        shouldSynchronize=true;      }    }  }  if (shouldSynchronize) {    startSyncOperation(path);  }  if ((event & IN_IGNORE) != 0 && (path == null || path.length() == 0)) {    Log_OC.d(TAG,"Stopping the observance on " + mPath);  }}  }
class C{  public AemDialog ok(){  return clickDialogFooterButton(OK_BUTTON_TEXT);}  }
class C{  public void write(long[] data){  for (  long l : data) {    writeLong(l);  }}  }
class C{  public AnchorUpdateControl(Layout layout,String action){  this(new Layout[]{layout},action);}  }
class C{  public boolean hasReportParams(){  return reportParams != null && reportParams.isSet();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_MY(String skillcaster){  return new SM_SYSTEM_MESSAGE(1210005,skillcaster);}  }
class C{  private void utah(int row,int col,int pos){  module(row - 2,col - 2,pos,1);  module(row - 2,col - 1,pos,2);  module(row - 1,col - 2,pos,3);  module(row - 1,col - 1,pos,4);  module(row - 1,col,pos,5);  module(row,col - 2,pos,6);  module(row,col - 1,pos,7);  module(row,col,pos,8);}  }
class C{  public boolean isAutoRelation(){  return isAutoRelation;}  }
class C{  @Override public boolean isPanelEnabled(){  if (groupCheckbox == null) {    return true;  } else {    return groupCheckbox.isSelected();  }}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapFlight && getFlightId().equals(((AirMapFlight)o).getFlightId());}  }
class C{  public Granularity resolveAcceptingGrain(DataApiRequest apiRequest,TemplateDruidQuery query){  Granularity requestGranularity=apiRequest.getGranularity();  ZonelessTimeGrain queryGrain=query.getInnermostQuery().getTimeGrain();  if (queryGrain == null) {    return requestGranularity;  }  if (requestGranularity.satisfiedBy(queryGrain)) {    return queryGrain.buildZonedTimeGrain(apiRequest.getTimeZone());  }  LOG.error(QUERY_GRAIN_NOT_SATISFIED.format(queryGrain,requestGranularity));  throw new IllegalArgumentException(QUERY_GRAIN_NOT_SATISFIED.format(queryGrain,requestGranularity));}  }
class C{  public void onDestroy(){  if (!players.isEmpty()) {    onLastPlayerReleased();  }  for (  AudioPlayer audio : this.players.values()) {    audio.destroy();  }  this.players.clear();}  }
class C{  public boolean isNumber(){  return value instanceof Number;}  }
class C{  public double run(){  try {    AudioInputStream inInput=AudioSystem.getAudioInputStream(files[0]);    AudioFeature audioFeatureInput=(AudioFeature)featureExtractorInput.calculate(inInput);  } catch (  Exception e) {  }  double avgDistance=0;  for (int i=0; i < arrayFeatureExtractorTrainSet.size(); i++) {    double distance2DB=audioThreadDistance(featureExtractorInput.getMFCC(),arrayFeatureExtractorTrainSet.get(i));    Log.i("size","Different distance " + distance2DB);    avgDistance+=distance2DB;  }  Log.i("size","average distance " + (avgDistance / arrayFeatureExtractorTrainSet.size()));  return avgDistance / arrayFeatureExtractorTrainSet.size();}  }
class C{  public String toUuidString(){  String result=String.join("-",contentAsHex(0,4),contentAsHex(4,6),contentAsHex(6,8),contentAsHex(8,10),contentAsHex(10,16));  return result.toLowerCase();}  }
class C{  public FilenameUtils(){  super();}  }
class C{  public int readUnsignedByte() throws IOException, EOFException {  return in.read();}  }
class C{  public ZoomToFitControl(String group){  this.m_group=group;}  }
class C{  protected MessagesGetLastActivityQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public void markHeaderViewHeight(View view){  this.mHeaderView=view;  mHeaderViewHeight=mHeaderView.getHeight();  if (mHeaderViewHeight <= 0) {    mHeaderViewHeight=mHeaderView.getLayoutParams().height;  } else {    mHeaderView.getLayoutParams().height=mHeaderViewHeight;  }  mHeaderViewMaxHeight=mHeaderViewExpandHeight < 0 ? mHeaderViewHeight * 2 : mHeaderViewHeight + mHeaderViewExpandHeight;}  }
class C{  private void skipToNextBlock(){  while (!builder.eof()) {    if (atTokenSequence(ProjectViewTokenType.NEWLINE,ProjectViewTokenType.IDENTIFIER)) {      builder.advanceLexer();      return;    }    builder.advanceLexer();  }}  }
class C{  public AdsGetAdsLayoutQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  private void handleSmallClause(CTNode np,CTNode ec){  CTNode s=np.getParent();  CTNode prd=s.getFirstChild(PTBLib.M_PRD);  if (prd != null && (!s.hasFunctionTag() || s.hasFunctionTag(PTBTag.F_CLR))) {    s.clearFunctionTags();    s.addFunctionTag(DEPTagEn.DEP_OPRD);  }  removeNode(ec);}  }
class C{  public synchronized ZooKeeperClientBuilder zkAclId(String zkAclId){  this.zkAclIdSet=true;  this.zkAclId=zkAclId;  return this;}  }
class C{  private void doPrint(PrintStream writer,List<String> args){  String rootPath=mAppContext.getApplicationInfo().dataDir + "/shared_prefs";  String offsetPrefix=args.isEmpty() ? "" : args.get(0);  String keyPrefix=(args.size() > 1) ? args.get(1) : "";  printRecursive(writer,rootPath,"",offsetPrefix,keyPrefix);}  }
class C{  void hide(){  if (!mIsVisible)   return;  mIsVisible=false;  mHeightPx=0.f;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  public boolean IsEqual(Z z1,Z z2){  return z1.re == z2.re && z1.im == z2.im;}  }
class C{  public static Map<String,Object> createBinaryFile(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=null;  try {    result=createBinaryFileMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }  return result;}  }
class C{  public void unlockUserInput(){  locked=false;  getCommandManager().setEnableCritical(true);  searchManager.getFindDialogAsToolBar().setEnableCritical(true);  if (bottomToolBar != null)   bottomToolBar.setEnabled(true);  setCursor(Cursor.getDefaultCursor());  getContentPane().setCursor(Cursor.getDefaultCursor());}  }
class C{  public OutputStream bindStream(OutputStream output){  OutputStream stream=m_streams.get();  m_streams.set(output);  return stream;}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public int size(){  return 5;}  }
class C{  public KdeProxySearchStrategy(){  this(new KdeSettingsParser());}  }
class C{  public Fraction divide(final int i){  return divide(new Fraction(i));}  }
class C{  private PointValuePair evaluateNewSimplex(final MultivariateFunction evaluationFunction,final PointValuePair[] original,final double coeff,final Comparator<PointValuePair> comparator){  final double[] xSmallest=original[0].getPointRef();  setPoint(0,original[0]);  final int dim=getDimension();  for (int i=1; i < getSize(); i++) {    final double[] xOriginal=original[i].getPointRef();    final double[] xTransformed=new double[dim];    for (int j=0; j < dim; j++) {      xTransformed[j]=xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);    }    setPoint(i,new PointValuePair(xTransformed,Double.NaN,false));  }  evaluate(evaluationFunction,comparator);  return getPoint(0);}  }
class C{  @Override public int hashCode(){  return (matcher == null ? 0 : matcher.hashCode()) ^ (action == null ? 0 : action.hashCode());}  }
class C{  public static StartupSettings fromJSONFile(File jsonFile) throws JSONException, FileNotFoundException, IOException, URISyntaxException {  StringBuffer buffer=new StringBuffer();  try (BufferedReader br=new BufferedReader(new FileReader(jsonFile))){    String line;    while ((line=br.readLine()) != null) {      buffer.append(line.trim());    }  }   JSONObject jsonObject=new JSONArray(buffer.toString()).getJSONObject(0);  String uri=jsonObject.getString("uri");  String id=jsonObject.getString("id");  int gossipInterval=jsonObject.getInt("gossip_interval");  int cleanupInterval=jsonObject.getInt("cleanup_interval");  String cluster=jsonObject.getString("cluster");  if (cluster == null) {    throw new IllegalArgumentException("cluster was null. It is required");  }  URI uri2=new URI(uri);  StartupSettings settings=new StartupSettings(id,uri2,new GossipSettings(gossipInterval,cleanupInterval),cluster);  String configMembersDetails="Config-members [";  JSONArray membersJSON=jsonObject.getJSONArray("members");  for (int i=0; i < membersJSON.length(); i++) {    JSONObject memberJSON=membersJSON.getJSONObject(i);    URI uri3=new URI(memberJSON.getString("uri"));    RemoteGossipMember member=new RemoteGossipMember(memberJSON.getString("cluster"),uri3,"",0);    settings.addGossipMember(member);    configMembersDetails+=member.getAddress();    if (i < (membersJSON.length() - 1))     configMembersDetails+=", ";  }  log.info(configMembersDetails + "]");  return settings;}  }
class C{  CommandResult(Process process,Command command){  this.process=process;  this.command=command;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  private void applyConfigurationElement(ConfigurationElement element,Map<Long,List<Change>> processLists,Map<Long,ConfigurationElement> elementPlaceholder,Map<Long,ConfigurationElementReport> daqReportPlaceholder,ConfigurationReport report,Integer configId,final ConfigProgressMonitor configProgressMonitor){  AtomicInteger progressCounter=new AtomicInteger(1);  if (!cancelRequested) {    ConfigurationElementReport elementReport=new ConfigurationElementReport(element.getAction(),element.getEntity(),element.getEntityId());    report.addElementReport(elementReport);    List<ProcessChange> processChanges;    try {      processChanges=applyConfigElement(element,elementReport);      if (processChanges != null) {        for (        ProcessChange processChange : processChanges) {          Long processId=processChange.getProcessId();          if (processChange.processActionRequired()) {            if (!processLists.containsKey(processId)) {              processLists.put(processId,new ArrayList<>());            }            processLists.get(processId).add((Change)processChange.getChangeEvent());            if (processChange.hasNestedSubReport()) {              elementReport.addSubReport(processChange.getNestedSubReport());              daqReportPlaceholder.put(processChange.getChangeEvent().getChangeId(),processChange.getNestedSubReport());            } else {              daqReportPlaceholder.put(processChange.getChangeEvent().getChangeId(),elementReport);            }            elementPlaceholder.put(processChange.getChangeEvent().getChangeId(),element);            element.setDaqStatus(Status.RESTART);          } else           if (processChange.requiresReboot()) {            if (log.isDebugEnabled()) {              log.debug(configId + " RESTART for " + processChange.getProcessId()+ " required");            }            element.setDaqStatus(Status.RESTART);            report.addStatus(Status.RESTART);            report.addProcessToReboot(processCache.get(processId).getName());            element.setStatus(Status.RESTART);            processFacade.requiresReboot(processId,Boolean.TRUE);          }        }      }    } catch (    Exception ex) {      String errMessage=configId + " Exception caught while applying the configuration change (Action, Entity, " + "Entity id) = ("+ element.getAction()+ "; "+ element.getEntity()+ "; "+ element.getEntityId()+ ")";      log.error(errMessage,ex.getMessage());      elementReport.setFailure("Exception caught while applying the configuration change.",ex);      element.setStatus(Status.FAILURE);      report.addStatus(Status.FAILURE);      report.setStatusDescription("Failure: see details below.");    }    if (configProgressMonitor != null) {      configProgressMonitor.onServerProgress(progressCounter.getAndIncrement());    }  } else {    log.info(configId + " Interrupting configuration due to cancel request.");  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200744,skillcaster,skillname);}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  protected MarketEditQuery price(float value){  return unsafeParam("price",value);}  }
class C{  public static Map<String,Object> linkParty(DispatchContext dctx,Map<String,? extends Object> context){  Delegator _delegator=dctx.getDelegator();  Delegator delegator=_delegator.cloneDelegator();  Locale locale=(Locale)context.get("locale");  delegator.setEntityEcaHandler(null);  String partyIdTo=(String)context.get("partyIdTo");  String partyId=(String)context.get("partyId");  Timestamp now=UtilDateTime.nowTimestamp();  if (partyIdTo.equals(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotLinkPartyToItSelf",locale));  }  GenericValue partyTo;  try {    partyTo=EntityQuery.use(delegator).from("Party").where("partyId",partyIdTo).queryOne();  } catch (  GenericEntityException e) {    Debug.logInfo(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (partyTo == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyToDoesNotExists",locale));  }  if ("PARTY_DISABLED".equals(partyTo.get("statusId"))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotMergeDisabledParty",locale));  }  GenericValue party;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logInfo(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyFromDoesNotExists",locale));  }  try {    delegator.storeByCondition("PartyContactMech",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("PartyContactMechPurpose",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("PartyNote",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("InventoryItem",UtilMisc.toMap("ownerPartyId",partyIdTo),EntityCondition.makeCondition("ownerPartyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("Subscription",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("UserLogin",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  List<GenericValue> rolesToMove;  try {    rolesToMove=EntityQuery.use(delegator).from("PartyRole").where("partyId",partyId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  for (  GenericValue attr : rolesToMove) {    attr.set("partyId",partyIdTo);    try {      if (EntityQuery.use(delegator).from("PartyRole").where(attr.getPrimaryKey()).queryOne() == null) {        attr.create();      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }  }  try {    delegator.storeByCondition("OrderRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("InvoiceRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("DataResourceRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("ContentRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("FinAccountRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("ProductStoreRole",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("CommunicationEventRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.removeByAnd("PartyRole",UtilMisc.toMap("partyId",partyId));  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  List<GenericValue> attrsToMove;  try {    attrsToMove=EntityQuery.use(delegator).from("PartyAttribute").where("partyId",partyId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  for (  GenericValue attr : attrsToMove) {    attr.set("partyId",partyIdTo);    try {      if (EntityQuery.use(delegator).from("PartyAttribute").where(attr.getPrimaryKey()).queryOne() == null) {        attr.create();      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }  }  try {    delegator.removeByAnd("PartyAttribute",UtilMisc.toMap("partyId",partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  GenericValue linkAttr=delegator.makeValue("PartyAttribute");  linkAttr.set("partyId",partyId);  linkAttr.set("attrName","LINKED_TO");  linkAttr.set("attrValue",partyIdTo);  try {    delegator.create(linkAttr);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  String currentStatus=party.getString("statusId");  if (currentStatus == null || !"PARTY_DISABLED".equals(currentStatus)) {    party.set("statusId","PARTY_DISABLED");    try {      party.store();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error setting disable mode on partyId: " + partyId,module);      return ServiceUtil.returnError(e.getMessage());    }  }  Map<String,Object> resp=ServiceUtil.returnSuccess();  resp.put("partyId",partyIdTo);  return resp;}  }
class C{  public static EntityQuery use(Delegator delegator){  return new EntityQuery(delegator);}  }
class C{  public Builder fillColor(String fillColor){  this.fillColor=fillColor;  return this;}  }
class C{  public static double[][] centerAndScale(double[][] matrix){  final double[][] result=matrix.clone();  final int nRows=result.length;  final int nCols=result[0].length;  if (nRows < 2 || nCols == 0)   return result;  for (int col=0; col < nCols; col++) {    double mean=0;    for (    double[] aRow : result) {      mean+=aRow[col];    }    mean/=nRows;    for (    double[] aRow : result) {      aRow[col]-=mean;    }  }  for (int col=0; col < nCols; col++) {    double sumOfSquares=0;    for (    double[] aRow : result) {      sumOfSquares+=aRow[col] * aRow[col];    }    double value=Math.sqrt(sumOfSquares / (nRows - 1));    if (value != 0) {      for (      double[] aRow : result) {        aRow[col]/=value;      }    }  }  return result;}  }
class C{  @TargetApi(11) public void zoomAndCenterAnimated(float scaleX,float scaleY,float xValue,float yValue,AxisDependency axis,long duration){  if (android.os.Build.VERSION.SDK_INT >= 11) {    PointD origin=getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop(),axis);    Runnable job=new AnimatedZoomJob(mViewPortHandler,this,getTransformer(axis),getAxis(axis),mXAxis.getValues().size(),scaleX,scaleY,mViewPortHandler.getScaleX(),mViewPortHandler.getScaleY(),xValue,yValue,(float)origin.x,(float)origin.y,duration);    addViewportJob(job);  } else {    Log.e(LOG_TAG,"Unable to execute zoomAndCenterAnimated(...) on API level < 11");  }}  }
class C{  public EquipmentCommandHandler(final long equipmentId,final RequestController requestController){  this.equipmentId=equipmentId;  this.requestController=requestController;}  }
class C{  public void handleCheckXtnStatusInTm(CheckXtnStatusInTmBusPackect packet){  boolean aliveInTm=false;  int state;  try {    state=packet.getTx().getState();    aliveInTm=state != TransactionConstants.ABORTED;  } catch (  Exception ex) {  }synchronized (packet.getNotifyObj()) {    packet.setNotAbortedLiveTxn(aliveInTm);    packet.setHasAnswer(true);    packet.getNotifyObj().notify();  }}  }
class C{  public void caseInstanceOfExpr(InstanceOfExpr v){  Node nop1=fetchNode(v.getOp());  Value op2=new TypeValueWrapper(v.getCheckType());  Node nop2=fetchNode(op2);  List<Node> children=new ArrayList<Node>();  children.add(nop1);  children.add(nop2);  setResult(new Node(v,true,children));}  }
class C{  @Override public boolean compareAndSet(long expectedValue,long newValue){  throw new UnsupportedOperationException();}  }
class C{  public GroupsEditQuery email(String value){  return unsafeParam("email",value);}  }
class C{  public static String millisToText(long millis){  return Strings.millisToString(millis,true);}  }
class C{  public void onDestroy(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onDestroy();    }  }}  }
class C{  public MarketEditCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  public void add(Object o){  if (!contains(o)) {    elementSet.add(o);    elementVector.add(o);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("move dir=up;");}  }
class C{  private static void writeln(String line){  try {    writer.write(line);    writer.write("\n");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public IntColumn(){  this(0,10,-1);}  }
class C{  protected void ac(Object expected,Object actual){  ae(expected.getClass(),actual.getClass());}  }
class C{  public static boolean equals(double x,double y,double eps){  return equals(x,y) || (Math.abs(y - x) <= eps);}  }
class C{  @PostConstruct public void init(){  LOGGER.debug("Registering short-term-log module for supervision updates");  listenerContainer=supervisionNotifier.registerAsListener(this);}  }
class C{  public <T extends CoreItem>void addItem(@IntRange(from=0) int position,@NonNull T item){  if (position > items.size()) {    throw new IndexOutOfBoundsException();  }  items.add(position,item);  notifyItemInserted(position);}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Pair other=(Pair)obj;  if (left == null) {    if (other.left != null) {      return false;    }  } else   if (!left.equals(other.left)) {    return false;  }  if (right == null) {    if (other.right != null) {      return false;    }  } else   if (!right.equals(other.right)) {    return false;  }  return true;}  }
class C{  public void createCheckpoint(){  if (logger.isLoggable(Level.INFO))   logger.info("Start creating checkpoint");  if (MY_METHOD == METHOD_MONITOR) {    if (VanillaDb.txMgr().getNextTxNum() - lastTxNum > TX_COUNT_TO_CHECKPOINT) {      Transaction tx=VanillaDb.txMgr().newTransaction(Connection.TRANSACTION_SERIALIZABLE,false);      VanillaDb.txMgr().createCheckpoint(tx);      tx.commit();      lastTxNum=VanillaDb.txMgr().getNextTxNum();    }  } else   if (MY_METHOD == METHOD_PERIODIC) {    Transaction tx=VanillaDb.txMgr().newTransaction(Connection.TRANSACTION_SERIALIZABLE,false);    VanillaDb.txMgr().createCheckpoint(tx);    tx.commit();  }  if (logger.isLoggable(Level.INFO))   logger.info("A checkpoint created");}  }
class C{  public static boolean isAndroidProjectWithoutGradleFacet(@NotNull JpsProject project){  return isAndroidProjectWithoutGradleFacet(project.getModules());}  }
class C{  public static final void drawVector(GL2 gl,Vector2 s,Vector2 d,double l){  RenderUtilities.drawVector(gl,s.x,s.y,d.x,d.y,l);}  }
class C{  private void processLE(final char ch[],int offset,final int count){  int curPos=0;  for (int i=0; i < count; ++i) {    final int b0=fBuffer[curPos++] & 0xff;    final int b1=fBuffer[curPos++] & 0xff;    ch[offset++]=(char)((b1 << 8) | b0);  }}  }
class C{  public SparseArray(){  this(10);}  }
class C{  public Observable<FirebaseChildEvent> observeChildMoved(final Query firebaseRef){  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.MOVED));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_SKILL_HEAL_ME_to_B(String protector,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201178,protector,num0,skilltarget,skillname);}  }
class C{  public void fireInitializationEvent(final IterationEvent e){  for (  IterationListener l : listeners) {    l.initializationPerformed(e);  }}  }
class C{  @SuppressWarnings({"rawtypes"}) public void fileWrite(final Component c,final String parent,final BufferedWriter bw) throws IOException {  if (c instanceof JTextField) {    if (null != c.getName()) {      bw.write(parent);      bw.write(" : ");      bw.write(c.getName());      bw.write(" : ");      bw.write(((JTextField)c).getText());      bw.newLine();    }  }  if (c instanceof JComboBox) {    if (null != c.getName()) {      bw.write(parent);      bw.write(" : ");      bw.write(c.getName());      bw.write(" : ");      bw.write(((JComboBox)c).getSelectedItem().toString());      bw.newLine();    }  }}  }
class C{  public void sendToFilterModule(final SourceDataTag currentSourceDataTag,final ValueUpdate update,final SourceDataTagQuality quality,final int filterType){  doSendToFilterModule(currentSourceDataTag,update,quality,false,filterType);}  }
class C{  private static int metadata_end_cmp_(MetaData x,MetaData y){  return x.getEnd().compareTo(y.getEnd());}  }
class C{  public boolean isApplicable(){  return false;}  }
class C{  public Builder weight(Number weight){  this.weight=weight;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffPhysical_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200664,skillcaster,skillname);}  }
class C{  @Override public final void writeInt(final int i){  bos.writeByte((byte)(i & 0xFF));  bos.writeByte((byte)((i >>> 8) & 0xFF));  bos.writeByte((byte)((i >>> 16) & 0xFF));  bos.writeByte((byte)((i >>> 24) & 0xFF));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_COMPLETE_ROUND_IDARENA(String value0){  return new SM_SYSTEM_MESSAGE(1400929,value0);}  }
class C{  private byte[] SHA256hash(byte[] tobeHashed){  SHA256Digest digester=new SHA256Digest();  byte[] retValue=new byte[digester.getDigestSize()];  digester.update(tobeHashed,0,tobeHashed.length);  digester.doFinal(retValue,0);  return retValue;}  }
class C{  public ObjectFactory(){}  }
class C{  public PagesClearCacheQuery clearCache(UserActor actor,String url){  return new PagesClearCacheQuery(getClient(),actor,url);}  }
class C{  public void mouseReleased(@AndroidCoordinate int x,@AndroidCoordinate int y){  if (myMouseInteraction != null) {    myMouseInteraction.mouseReleased(pxToDp(x),pxToDp(y));  }  myConstraintModel.requestRender();}  }
class C{  public static SortedSet<Interval> findFullAvailabilityGaps(Set<Interval> availableIntervals,Set<Interval> neededIntervals){  Comparator<Interval> intervalStartComparator=new IntervalStartComparator();  SortedSet<Interval> sortedAvailableIntervals=new TreeSet<>(intervalStartComparator);  sortedAvailableIntervals.addAll(availableIntervals);  SortedSet<Interval> sortedNeededIntervals=new TreeSet<>(intervalStartComparator);  sortedNeededIntervals.addAll(neededIntervals);  Iterator<Interval> availableIntervalsIterator=sortedAvailableIntervals.iterator();  if (!availableIntervalsIterator.hasNext()) {    return sortedNeededIntervals;  }  Interval available=availableIntervalsIterator.next();  SortedSet<Interval> missingIntervals=new TreeSet<>(intervalStartComparator);  for (  Interval needed : sortedNeededIntervals) {    while (!canDetermineAvailability(available,needed) && availableIntervalsIterator.hasNext()) {      available=availableIntervalsIterator.next();    }    if (available.contains(needed)) {      continue;    }    missingIntervals.add(needed);  }  return missingIntervals;}  }
class C{  private void adjustTargetLocation(Target plus,Target star){  if (plus == null || plus.segment() == null || plus.timing() == -1 || star == null || star.segment() == null || star.timing() == -1)   return;  Element prosody=(Element)DomUtils.getAncestor(plus.segment(),MaryXML.PROSODY);  if (prosody == null)   return;  ProsodicSettings settings=prosodyMap.get(prosody);  assert settings != null;  int accentSlope=settings.accentSlope();  if (accentSlope == 100)   return; else   if (accentSlope == 0)   accentSlope=1;  int plusTime=plus.getTargetTime();  int starTime=star.getTargetTime();  if (plusTime == -1 || starTime == -1)   return;  int distance=starTime - plusTime;  int newDistance=100 * distance / accentSlope;  int newPlusTime=starTime - newDistance;  if (newPlusTime < 0)   newPlusTime=0;  String oldSegment=plus.segment().getAttribute("p");  boolean success=plus.setTargetTime(newPlusTime);  if (success) {    Log.d(Mary.LOG,"Accent slope: moved \"plus\" target from [" + oldSegment + "] at "+ plusTime+ " ms to ["+ plus.segment().getAttribute("p")+ "] at "+ plus.getTargetTime()+ " ms.");  }}  }
class C{  public boolean contains(Object obj){  return index((T)obj) >= 0;}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  PackageManager packageManager=context.getPackageManager();  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  if (headers != null)   delete.setHeaders(headers);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public static int currentState(){  return currentState;}  }
class C{  Buffer pin(BlockId blk){synchronized (prepareAnchor(blk)) {    Buffer buff=findExistingBuffer(blk);    if (buff == null) {      int lastReplacedBuff=this.lastReplacedBuff;      int currBlk=(lastReplacedBuff + 1) % bufferPool.length;      while (currBlk != lastReplacedBuff) {        buff=bufferPool[currBlk];        if (buff.getExternalLock().tryLock()) {          try {            if (!buff.isPinned()) {              this.lastReplacedBuff=currBlk;              BlockId oldBlk=buff.block();              if (oldBlk != null)               blockMap.remove(oldBlk);              buff.assignToBlock(blk);              blockMap.put(blk,buff);              if (!buff.isPinned())               numAvailable.decrementAndGet();              buff.pin();              return buff;            }          }  finally {            buff.getExternalLock().unlock();          }        }        currBlk=(currBlk + 1) % bufferPool.length;      }      return null;    } else {      buff.getExternalLock().lock();      try {        if (buff.block().equals(blk)) {          if (!buff.isPinned())           numAvailable.decrementAndGet();          buff.pin();          return buff;        }        return pin(blk);      }  finally {        buff.getExternalLock().unlock();      }    }  }}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  public void loadUrl(String url,Map<String,String> additionalHttpHeaders,CallBackFunction returnCallback){  mWebView.loadUrl(url,additionalHttpHeaders,returnCallback);}  }
class C{  public long readLong() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readLong();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public ValueComboBoxData(String key,ImageIcon imageIcon,Class<?> panelId){  super();  this.key=key;  this.imageIcon=imageIcon;  this.panelId=panelId;  this.vendorOptionVersion=VendorOptionManager.getInstance().getDefaultVendorOptionVersion();}  }
class C{  @Override public boolean containsSymbol(char[] buffer,int offset,int length){  int bucket=hash(buffer,offset,length) % fTableSize;  OUTER:   for (SREntry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    SREntryData data=(SREntryData)entry.get();    if (data == null) {      continue;    }    if (length == data.characters.length) {      for (int i=0; i < length; i++) {        if (buffer[offset + i] != data.characters[i]) {          continue OUTER;        }      }      return true;    }  }  return false;}  }
class C{  public boolean contains(BasicBlock b){  return b.inq;}  }
class C{  public LongColumn(int nrows){  this(nrows,nrows,0L);}  }
class C{  public PalicoWeaponCursor queryPalicoWeapons(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_PALICO_WEAPONS;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=S.COLUMN_ITEMS_RARITY;  qh.Limit=null;  return new PalicoWeaponCursor(wrapJoinHelper(builderPalicoWeapon(),qh));}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  quietCount=quietCount < startPattern ? quietCount : startPattern;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  @Override public void run(){  firstWavePath.reset();  secondWavePath.reset();  shift=shift + speed;  invalidate();  handler.postDelayed(new WaveRunnable(),16);}  }
class C{  @PostConstruct protected void init(){  logger.debug("Create the RestTemplate instance that will be wrapped");  makeRestTemplateWithCustomObjectMapper(restTemplate);  logger.debug("Set interceptor for authentication");  List<ClientHttpRequestInterceptor> interceptors=Collections.<ClientHttpRequestInterceptor>singletonList(formLoginAuthenticationCsrfTokenInterceptor);  restTemplate.setRequestFactory(new InterceptingClientHttpRequestFactory(restTemplate.getRequestFactory(),interceptors));}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  double sumLog=Double.NaN;  if (MathArrays.verifyValues(values,begin,length,true)) {    sumLog=0.0;    for (int i=begin; i < begin + length; i++) {      sumLog+=FastMath.log(values[i]);    }  }  return sumLog;}  }
class C{  protected ResourcePool(IResourceFactory<R> resourceFactory,int minResources,int maxResources,R[] initialResources){  _resourceFactory=resourceFactory;  _maxResources=maxResources;  if (initialResources != null && initialResources.length > maxResources)   throw new IllegalArgumentException("initialResources length cannot exceed maxResources");  _resourcesPool=(R[])new IResource[maxResources];  int i=0;  if (initialResources != null) {    for (; i < initialResources.length; ++i) {      _resourcesPool[i]=initialResources[i];      _resourcesPool[i].setFromPool(true);    }  }  for (; i < minResources; ++i) {    _resourcesPool[i]=_resourceFactory.allocate();    _resourcesPool[i].setFromPool(true);  }  _nextFreeIndex=new AtomicInteger(i);}  }
class C{  private String generateFilename(){  String filename=filenamePattern;  Matcher matcher=FILE_PATTERN_PROPERTY_MATCHER.matcher(filename);  while (matcher.find()) {    String propertyName=matcher.group(1);    String propertyValue=resolveProperty(propertyName);    if (propertyValue == null) {      reportError("Could not find system property specified in log filename pattern '" + propertyName + "'",new RuntimeException(),ErrorManager.FORMAT_FAILURE);    } else {      if (!propertyName.equals(HOMEDIR_PROP)) {        propertyValue=removeIllegalFileCharacters(propertyValue);      }      filename=filename.substring(0,matcher.start()) + propertyValue + filename.substring(matcher.end());      matcher.reset(filename);    }  }  return filename;}  }
class C{  protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N,AbstractionWithSourceStmt,M,V,I> problem,String debugName){  return new SingleDirectionSolver(problem,debugName);}  }
class C{  public BufferedResourceNode(IResource resource){  super(resource);}  }
class C{  public JsonObject add(String name,String value){  add(name,Json.value(value));  return this;}  }
class C{  protected DfpDec(final DfpField factory,int x){  super(factory,x);}  }
class C{  public OrSpacePredicate(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  super(leftPredicate,rightPredicate);}  }
class C{  protected void deleteAssignmentOld(Experiment.ID experimentID,User.ID userID,Context context,Application.Name appName,Bucket.Label bucketLabel){  final String CQL="delete from user_assignment where experiment_id = ? and user_id = ? and context = ?";  try {    PreparedCqlQuery<ExperimentsKeyspace.UserAssignmentComposite,String> query=driver.getKeyspace().prepareQuery(keyspace.userAssignmentCF()).withCql(CQL).asPreparedStatement().withByteBufferValue(experimentID,ExperimentIDSerializer.get()).withByteBufferValue(userID,UserIDSerializer.get()).withStringValue(context.getContext());    query.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not delete user assignment for Experiment:" + experimentID + " and User "+ userID,e);  }}  }
class C{  public StatelessHibernateSpaceDataSourceConfigurer augmentInitialLoadEntries(boolean augmentInitialLoadEntries){  this.augmentInitialLoadEntries=augmentInitialLoadEntries;  return this;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Override public Set<String> vertexMatchPatternLabels(){  return labels.size() == 1 ? labels : Collections.emptySet();}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen,int bufSize){  this.file=file;  this.delayMillis=delayMillis;  this.end=end;  this.inbuf=new byte[bufSize];  this.listener=listener;  listener.init(this);  this.reOpen=reOpen;}  }
class C{  public final Observable<T> readNullable(){  return Observable.defer(null).onErrorResumeNext(null);}  }
class C{  public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  public static double readDouble(byte[] bytes,int start){  return WritableComparator.readDouble(bytes,start);}  }
class C{  public boolean isAssociated(int node,int endpoint){  int associationCnt=associations.size();  for (int index=0; index < associationCnt; index++) {    ZWaveAssociation association=associations.get(index);    if (association.getNode() == node && association.getEndpoint() == endpoint) {      return true;    }  }  return false;}  }
class C{  public String provideQualifier(){  return "unknown";}  }
class C{  public Trie(boolean caseSensitive){  this.caseSensitive=caseSensitive;}  }
class C{  private boolean hasRolePermission(String application,String action,String entityName,EntityCondition condition,GenericValue userLogin){  if (userLogin == null) {    return false;  }  if (hasEntityPermission(application,action,userLogin)) {    return true;  }  if (entityName == null || condition == null) {    return false;  }  if (hasEntityPermission(application + "_ROLE",action,userLogin)) {    try {      List<GenericValue> roleTest=EntityQuery.use(delegator).from(entityName).where(condition).queryList();      if (!roleTest.isEmpty()) {        return true;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Problems doing role security lookup on entity [" + entityName + "] using ["+ condition+ "]",module);      return false;    }  }  return false;}  }
class C{  public Speaker persist(final Speaker speaker){  final String id=UUID.randomUUID().toString();  speaker.setId(id);  this.speakers.put(id,speaker);  return speaker;}  }
class C{  public static String determineInitialCheckOutPage(ShoppingCart cart){  String page=DEFAULT_INIT_CHECKOUT_PAGE;  if (cart == null)   return page;  if (!cart.shippingApplies()) {    cart.setAllShipmentMethodTypeId("NO_SHIPPING");    cart.setAllCarrierPartyId("_NA_");    page="payment";  }  return page;}  }
class C{  public FileTreeNode(File parent,String name) throws SecurityException, FileNotFoundException {  this(parent.toPath(),name);}  }
class C{  public static <K,V>Map<K,V> createMap(List<K> keys,List<V> values){  if (keys == null || values == null || keys.size() != values.size()) {    throw new IllegalArgumentException("Keys and Values cannot be null and must be the same size");  }  Map<K,V> newMap=new HashMap<K,V>();  for (int i=0; i < keys.size(); i++) {    newMap.put(keys.get(i),values.get(i));  }  return newMap;}  }
class C{  public static cn.nukkit.inventory.Inventory toNukkit(Inventory inventory){  if (inventory == null) {    return null;  }  if (inventory instanceof PokkitLiveInventory) {    return ((PokkitLiveInventory)inventory).nukkit;  }  throw new IllegalArgumentException("Cannot convert inventory " + inventory.getClass() + " to a Nukkit inventory");}  }
class C{  public FriendsSearchQuery search(UserActor actor,int userId){  return new FriendsSearchQuery(getClient(),actor,userId);}  }
class C{  public boolean isContinuousFeature(int index){  index-=numByteFeatures;  index-=numShortFeatures;  return 0 <= index && index < numContinuousFeatures;}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public GenericPrincipal(String userName,String password){  this(userName,password,null);}  }
class C{  private void recordSimpleJavaEdit(){synchronized (myLock) {    mySeenLocalJavaChanges=true;  }}  }
class C{  public LikesGetListQuery(VkApiClient client,LikesType type){  super(client,"likes.getList",GetListResponse.class);  type(type);}  }
class C{  private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  count=0;}  }
class C{  public MapEntryInfoKey(Object value,Object key){  super(value);  _hashCode=_hashCode ^ key.hashCode();  _key=key;}  }
class C{  public void updateStackVisiblityValue(float stackVisibility){  mCacheStackVisibility=stackVisibility;  mOrderSortingValue=computeOrderSortingValue(mCachedIndexDistance,mCacheStackVisibility);  mVisiblitySortingValue=computeVisibilitySortingValue(mCachedVisibleArea,mOrderSortingValue,mCacheStackVisibility);}  }
class C{  private static Alert combine_alert_with_past_(Alert alert,Map<GroupName,Alert> previous){  Alert result=Optional.ofNullable(previous.get(alert.getName())).map(null).orElse(alert);  logger.log(Level.FINE,"emitting alert {0} -> {1}",new Object[]{result.getName(),result.getAlertState().name()});  return result;}  }
class C{  public static ProbeItemDescriptor discreteLineFillItem(String name,String description,ItemValueFormatter formatter){  return discreteOutlineItem(name,description,formatter,1d,0,MAX_VALUE_UNDEFINED,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,DEFAULT_COLOR);}  }
class C{  protected boolean checkAttributesOfOtherToken(String tag,Element currentRulePart,int position,NodeList tokens){  Element otherToken=null;  if (tag.equals("nextAttributes")) {    if (position < tokens.getLength() - 1) {      otherToken=(Element)tokens.item(position + 1);    }  }  if (nextPlusXAttributesPattern.matcher(tag).find()) {    String tempString=tag.replaceAll("nextPlus","");    String newString=tempString.replaceAll("Attributes","");    int num=Integer.parseInt(newString);    if (position < tokens.getLength() - (num + 1)) {      otherToken=(Element)tokens.item(position + 1 + num);    }  }  if (tag.equals("previousAttributes")) {    if (position > 0) {      otherToken=(Element)tokens.item(position - 1);    }  }  if (previousMinusXAttributesPattern.matcher(tag).find()) {    String tempString=tag.replaceAll("previousMinus","");    String newString=tempString.replaceAll("Attributes","");    int num=Integer.parseInt(newString);    if (position > num) {      otherToken=(Element)tokens.item(position - (num + 1));    }  }  return checkAttributes(currentRulePart,otherToken);}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public static int sizeOfType(Type t){  if (t instanceof DoubleWordType || t instanceof LongType || t instanceof DoubleType)   return 2; else   if (t instanceof VoidType)   return 0; else   return 1;}  }
class C{  public boolean hasMultiple(){  return multiple;}  }
class C{  @Override public void refreshClusterStats(){  log.debug("refreshClusterStats()");  client.admin().indices().prepareRefresh().execute().actionGet();  checkYellowStatus();}  }
class C{  public void start(){  ThreadUtils.assertOnUiThread();  if (AndroidSyncSettings.isMasterSyncEnabled(mContext)) {    Log.d(TAG,"Enabling sync");    InvalidationController.get(mContext).ensureStartedAndUpdateRegisteredTypes();    mProfileSyncService.requestStart();    AndroidSyncSettings.enableChromeSync(mContext);  }}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  public synchronized void writeLock(){  while (activeWriter || activeReaders != 0 || waitingPriorityWriters != 0) {    try {      waitingWriters++;      try {        wait();      }  finally {        waitingWriters--;      }    } catch (    InterruptedException e) {      throw new ConcurrentLockException("write lock interrupted in thread");    }  }  activeWriter=true;}  }
class C{  public static void addGlue(JComponent b,int layout){  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalGlue() : Box.createVerticalGlue());}  }
class C{  public static void addSubscriber(Workflow workflow,Consumer<Object> onNext){  addSubscriber(workflow,onNext,null);}  }
class C{  public double nextDouble(){  int y;  int z;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];    }    for (; kk < N - 1; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];    }    z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];    mti=0;  }  z=mt[mti++];  z^=z >>> 11;  z^=(z << 7) & TEMPERING_MASK_B;  z^=(z << 15) & TEMPERING_MASK_C;  z^=(z >>> 18);  return ((((long)(y >>> 6)) << 27) + (z >>> 5)) / (double)(1L << 53);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_GIVEUP(){  return new SM_SYSTEM_MESSAGE(1300610);}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{-2.226325228634938,-1.156887023657177,-0.643949578356075,-0.2027950777320613,0.305827808237559,+6.42632522863494,5.35688702365718,4.843949578356074,4.40279507773206,3.89417219176244};}  }
class C{  public synchronized boolean isActive(){  return this.active;}  }
class C{  public JSearchPanel(SearchTupleSet search,String field){  this(search,field,false);}  }
class C{  public void test(int eventType) throws MathIllegalArgumentException, MathIllegalStateException {  double e=1e-15;  ODEIntegrator integrator=new DormandPrince853Integrator(e,100.0,1e-7,1e-7);  BaseSecantSolver rootSolver=new PegasusSolver(e,e);  ODEEventHandler evt1=new Event(0,eventType);  ODEEventHandler evt2=new Event(1,eventType);  integrator.addEventHandler(evt1,0.1,e,999,rootSolver);  integrator.addEventHandler(evt2,0.1,e,999,rootSolver);  double t=0.0;  double tEnd=9.75;  double[] y={0.0,0.0};  List<Double> events1=new ArrayList<Double>();  List<Double> events2=new ArrayList<Double>();  while (t < tEnd) {    final ODEStateAndDerivative finalState=integrator.integrate(this,new ODEState(t,y),tEnd);    t=finalState.getTime();    y=finalState.getPrimaryState();    if (y[0] >= 1.0) {      y[0]=0.0;      events1.add(t);    }    if (y[1] >= 1.0) {      y[1]=0.0;      events2.add(t);    }  }  Assert.assertEquals(EVENT_TIMES1.length,events1.size());  Assert.assertEquals(EVENT_TIMES2.length,events2.size());  for (int i=0; i < EVENT_TIMES1.length; i++) {    Assert.assertEquals(EVENT_TIMES1[i],events1.get(i),1e-7);  }  for (int i=0; i < EVENT_TIMES2.length; i++) {    Assert.assertEquals(EVENT_TIMES2[i],events2.get(i),1e-7);  }}  }
class C{  public static Field findClassField(Class<?> beanClass,String fieldName){  Class<?> currentClass=beanClass;  while (currentClass != null && currentClass != Object.class) {    for (    Field field : currentClass.getDeclaredFields()) {      if (field.isSynthetic()) {        continue;      }      if (field.getName().equals(fieldName)) {        return field;      }    }    currentClass=currentClass.getSuperclass();  }  return null;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public boolean performFinish(){  String fs=mainPage.getFilesystemFile();  IFile ws=mainPage.getWorkspaceFile();  int type=mainPage.getSaveType();  boolean eclipseFormat=optionsPage.isMultiPatch();  boolean projectRelative=optionsPage.isProjectRelative();  try {    if (type != mainPage.CLIPBOARD) {      File file=new File(fs != null ? fs : ws.getLocation().toOSString());      if (file.exists()) {        String title=Policy.bind("GenerateSVNDiff.overwriteTitle");        String msg=Policy.bind("GenerateSVNDiff.overwriteMsg");        final MessageDialog dialog=new MessageDialog(getShell(),title,null,msg,MessageDialog.QUESTION,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.CANCEL_LABEL},0);        dialog.open();        if (dialog.getReturnCode() != 0) {          return false;        }      }      GenerateDiffFileOperation generateDiffFileOperation=new GenerateDiffFileOperation(getResources(),getUnaddedResources(),file,false,false,eclipseFormat,projectRelative,getShell());      generateDiffFileOperation.setSelectedResources(selectedResources);      getContainer().run(true,true,generateDiffFileOperation);      if (type == mainPage.WORKSPACE) {        ws.getParent().refreshLocal(IResource.DEPTH_ONE,null);      }    } else {      GenerateDiffFileOperation generateDiffFileOperation=new GenerateDiffFileOperation(getResources(),getUnaddedResources(),null,true,false,eclipseFormat,projectRelative,getShell());      generateDiffFileOperation.setSelectedResources(selectedResources);      getContainer().run(true,true,generateDiffFileOperation);    }    return true;  } catch (  InterruptedException e1) {    return true;  }catch (  CoreException e) {    SVNUIPlugin.openError(getShell(),Policy.bind("GenerateSVNDiff.error"),null,e);    return false;  }catch (  InvocationTargetException e2) {    SVNUIPlugin.openError(getShell(),Policy.bind("GenerateSVNDiff.error"),null,e2);    return false;  }}  }
class C{  public static void showString(String title,String content,Dimension dimension){  JTextArea area=new JTextArea(content);  area.setEditable(false);  JScrollPane scroll=new JScrollPane(area);  scroll.setPreferredSize(dimension);  JOptionPane.showMessageDialog(null,scroll,title,JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public SpaceTypeDescriptorBuilder addIndex(SpaceIndex index){  if (index == null)   throw new IllegalArgumentException("Argument cannot be null - 'index'.");  if (_indexes.containsKey(index.getName()))   throw new IllegalArgumentException("Cannot add index '" + index.getName() + "' - an index with the same name is already defined.");  if (_superTypeDescriptor != null && _superTypeDescriptor.getIndexes().containsKey(index.getName()))   throw new IllegalArgumentException("Cannot add index '" + index.getName() + "' - an index with the same name is defined in the super type.");  _indexes.put(index.getName(),index);  return this;}  }
class C{  @Override public boolean test(Interval testInterval){  skipAhead(testInterval.getStart());  return (activeInterval != null) ? testPredicate.test(testInterval,activeInterval) : defaultValue;}  }
class C{  public BaseMessage(final long id,final String topic){  this(MessageIdGenerator.getNewId(),topic,null,new Date());}  }
class C{  @Override public void messageArrived(String topic,MqttMessage message) throws Exception {  String messageString=message.toString();  System.out.println("TrafficService: " + messageString);  if (topic.contains("/alert/")) {    receivedTraffic(messageString,AirMapTraffic.TrafficType.Alert);  } else   if (topic.contains("/sa/")) {    receivedTraffic(messageString,AirMapTraffic.TrafficType.SituationalAwareness);  }}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  private static BigInteger parseBigInteger(String whole,String part,int index) throws IllegalArgumentException {  if (part == null) {    return null;  }  part=part.substring(0,part.length() - 1);  return new BigInteger(part);}  }
class C{  public Player findPlayer(int objectId){  return allPlayers.get(objectId);}  }
class C{  private Graphic createGraphic(URL url,StyleFactory styleFactory){  List<GraphicalSymbol> symbolList=new ArrayList<GraphicalSymbol>();  ExternalGraphic externalGraphic=styleFactory.createExternalGraphic(url,"image/png");  symbolList.add(externalGraphic);  Graphic graphicFill=styleFactory.graphicFill(symbolList,null,null,null,null,null);  return graphicFill;}  }
class C{  public long parseLongBinary(){  ASTNode$State state=state();  try {    long val=0;    if (digits.length() > 64) {      for (int i=0; i < digits.length() - 64; i++)       if (digits.charAt(i) != '0')       throw new NumberFormatException("");    }    for (int i=0; i < digits.length(); ++i) {      if (digits.charAt(i) == '1')       val|=1L << (digits.length() - i - 1);    }    return val;  }  finally {  }}  }
class C{  public ArrayRealVector append(ArrayRealVector v){  return new ArrayRealVector(this,v);}  }
class C{  private Options createOptions(){  Options options=new Options();  Option optionHelp=new Option("h","help",false,"Print out the help documentation for this command line execution");  optionHelp.setRequired(false);  options.addOption(optionHelp);  Option optionLocalPropFile=new Option("localPropFile",LOCALPROPFILE,true,"Optional local properties file");  optionLocalPropFile.setRequired(false);  optionLocalPropFile.setArgName(LOCALPROPFILE);  optionLocalPropFile.setType(String.class);  options.addOption(optionLocalPropFile);  Option optionHDFSPropDir=new Option("hdfsPropsDir",HDFSPROPDIR,true,"Optional location of directory in hdfs containing properties file(s)");  optionHDFSPropDir.setRequired(false);  optionHDFSPropDir.setArgName(HDFSPROPDIR);  optionHDFSPropDir.setType(String.class);  options.addOption(optionHDFSPropDir);  Option optionHDFSPropFile=new Option("hdfsPropsFile",HDFSPROPFILE,true,"Optional location of properties file(s) in hdfs");  optionHDFSPropFile.setRequired(false);  optionHDFSPropFile.setArgName(HDFSPROPFILE);  optionHDFSPropFile.setType(String.class);  options.addOption(optionHDFSPropFile);  Option optionPlatform=new Option("p",ResponderProps.PLATFORM,true,"required -- 'mapreduce', 'spark', 'sparkstreaming', 'storm', or 'standalone' : Processing platform technology for the responder");  optionPlatform.setRequired(false);  optionPlatform.setArgName(ResponderProps.PLATFORM);  optionPlatform.setType(String.class);  options.addOption(optionPlatform);  Option optionQueryInput=new Option("q",ResponderProps.QUERYINPUT,true,"required -- Fully qualified dir in hdfs of Query files");  optionQueryInput.setRequired(false);  optionQueryInput.setArgName(ResponderProps.QUERYINPUT);  optionQueryInput.setType(String.class);  options.addOption(optionQueryInput);  Option optionDataInputFormat=new Option("d",ResponderProps.DATAINPUTFORMAT,true,"required -- 'base', 'elasticsearch', or 'standalone' : Specify the input format");  optionDataInputFormat.setRequired(false);  optionDataInputFormat.setArgName(ResponderProps.DATAINPUTFORMAT);  optionDataInputFormat.setType(String.class);  options.addOption(optionDataInputFormat);  Option optionInputData=new Option("i",ResponderProps.INPUTDATA,true,"required -- Fully qualified name of input file/directory in hdfs; used if inputFormat = 'base'");  optionInputData.setRequired(false);  optionInputData.setArgName(ResponderProps.INPUTDATA);  optionInputData.setType(String.class);  options.addOption(optionInputData);  Option optionBaseInputFormat=new Option("bif",ResponderProps.BASEINPUTFORMAT,true,"required if baseInputFormat = 'base' -- Full class name of the InputFormat to use when reading in the data - must extend BaseInputFormat");  optionBaseInputFormat.setRequired(false);  optionBaseInputFormat.setArgName(ResponderProps.BASEINPUTFORMAT);  optionBaseInputFormat.setType(String.class);  options.addOption(optionBaseInputFormat);  Option optionBaseQuery=new Option("j",ResponderProps.BASEQUERY,true,"optional -- ElasticSearch-like query if using 'base' input format - used to filter records in the RecordReader");  optionBaseQuery.setRequired(false);  optionBaseQuery.setArgName(ResponderProps.BASEQUERY);  optionBaseQuery.setType(String.class);  options.addOption(optionBaseQuery);  Option optionEsResource=new Option("er",ResponderProps.ESRESOURCE,true,"required if baseInputFormat = 'elasticsearch' -- Requires the format <index>/<type> : Elasticsearch resource where data is read and written to");  optionEsResource.setRequired(false);  optionEsResource.setArgName(ResponderProps.ESRESOURCE);  optionEsResource.setType(String.class);  options.addOption(optionEsResource);  Option optionEsQuery=new Option("eq",ResponderProps.ESQUERY,true,"required if baseInputFormat = 'elasticsearch' -- ElasticSearch query if using 'elasticsearch' input format");  optionEsQuery.setRequired(false);  optionEsQuery.setArgName(ResponderProps.ESQUERY);  optionEsQuery.setType(String.class);  options.addOption(optionEsQuery);  Option optionEsNodes=new Option("en",ResponderProps.ESNODES,true,"required if baseInputFormat = 'elasticsearch' -- ElasticSearch node in the cluster");  optionEsNodes.setRequired(false);  optionEsNodes.setArgName(ResponderProps.ESNODES);  optionEsNodes.setType(String.class);  options.addOption(optionEsNodes);  Option optionEsPort=new Option("ep",ResponderProps.ESPORT,true,"required if baseInputFormat = 'elasticsearch' -- ElasticSearch cluster port");  optionEsPort.setRequired(false);  optionEsPort.setArgName(ResponderProps.ESPORT);  optionEsPort.setType(String.class);  options.addOption(optionEsPort);  Option optionOutputFile=new Option("o",ResponderProps.OUTPUTFILE,true,"required -- Fully qualified name of output file in hdfs");  optionOutputFile.setRequired(false);  optionOutputFile.setArgName(ResponderProps.OUTPUTFILE);  optionOutputFile.setType(String.class);  options.addOption(optionOutputFile);  Option optionStopListFile=new Option("sf",ResponderProps.STOPLISTFILE,true,"optional (unless using StopListFilter) -- Fully qualified file in hdfs containing stoplist terms; used by the StopListFilter");  optionStopListFile.setRequired(false);  optionStopListFile.setArgName(ResponderProps.STOPLISTFILE);  optionStopListFile.setType(String.class);  options.addOption(optionStopListFile);  Option optionNumReduceTasks=new Option("nr",ResponderProps.NUMREDUCETASKS,true,"optional -- Number of reduce tasks");  optionNumReduceTasks.setRequired(false);  optionNumReduceTasks.setArgName(ResponderProps.NUMREDUCETASKS);  optionNumReduceTasks.setType(String.class);  options.addOption(optionNumReduceTasks);  Option optionUseLocalCache=new Option("ulc",ResponderProps.USELOCALCACHE,true,"optional -- 'true' or 'false : Whether or not to use the local cache for modular exponentiation; Default is 'true'");  optionUseLocalCache.setRequired(false);  optionUseLocalCache.setArgName(ResponderProps.USELOCALCACHE);  optionUseLocalCache.setType(String.class);  options.addOption(optionUseLocalCache);  Option optionLimitHitsPerSelector=new Option("lh",ResponderProps.LIMITHITSPERSELECTOR,true,"optional -- 'true' or 'false : Whether or not to limit the number of hits per selector; Default is 'true'");  optionLimitHitsPerSelector.setRequired(false);  optionLimitHitsPerSelector.setArgName(ResponderProps.LIMITHITSPERSELECTOR);  optionLimitHitsPerSelector.setType(String.class);  options.addOption(optionLimitHitsPerSelector);  Option optionMaxHitsPerSelector=new Option("mh",ResponderProps.MAXHITSPERSELECTOR,true,"optional -- Max number of hits encrypted per selector");  optionMaxHitsPerSelector.setRequired(false);  optionMaxHitsPerSelector.setArgName(ResponderProps.MAXHITSPERSELECTOR);  optionMaxHitsPerSelector.setType(String.class);  options.addOption(optionMaxHitsPerSelector);  Option optionMapMemory=new Option("mm",ResponderProps.MAPMEMORY,true,"optional -- Amount of memory (in MB) to allocate per map task; Default is 3000");  optionMapMemory.setRequired(false);  optionMapMemory.setArgName(ResponderProps.MAPMEMORY);  optionMapMemory.setType(String.class);  options.addOption(optionMapMemory);  Option optionReduceMemory=new Option("rm",ResponderProps.REDUCEMEMORY,true,"optional -- Amount of memory (in MB) to allocate per reduce task; Default is 3000");  optionReduceMemory.setRequired(false);  optionReduceMemory.setArgName(ResponderProps.REDUCEMEMORY);  optionReduceMemory.setType(String.class);  options.addOption(optionReduceMemory);  Option optionMapOpts=new Option("mjo",ResponderProps.MAPJAVAOPTS,true,"optional -- Amount of heap (in MB) to allocate per map task; Default is -Xmx2800m");  optionMapOpts.setRequired(false);  optionMapOpts.setArgName(ResponderProps.MAPJAVAOPTS);  optionMapOpts.setType(String.class);  options.addOption(optionMapOpts);  Option optionReduceOpts=new Option("rjo",ResponderProps.REDUCEJAVAOPTS,true,"optional -- Amount of heap (in MB) to allocate per reduce task; Default is -Xmx2800m");  optionReduceOpts.setRequired(false);  optionReduceOpts.setArgName(ResponderProps.REDUCEJAVAOPTS);  optionReduceOpts.setType(String.class);  options.addOption(optionReduceOpts);  Option optionDataSchemas=new Option("ds",ResponderProps.DATASCHEMAS,true,"required -- Comma separated list of data schema file names");  optionDataSchemas.setRequired(false);  optionDataSchemas.setArgName(ResponderProps.DATASCHEMAS);  optionDataSchemas.setType(String.class);  options.addOption(optionDataSchemas);  Option optionQuerySchemas=new Option("qs",ResponderProps.QUERYSCHEMAS,true,"required -- Comma separated list of query schema file names");  optionQuerySchemas.setRequired(false);  optionQuerySchemas.setArgName(ResponderProps.QUERYSCHEMAS);  optionQuerySchemas.setType(String.class);  options.addOption(optionQuerySchemas);  Option optionExpParts=new Option("expParts",ResponderProps.NUMEXPLOOKUPPARTS,true,"optional -- Number of partitions for the exp lookup table");  optionExpParts.setRequired(false);  optionExpParts.setArgName(ResponderProps.NUMEXPLOOKUPPARTS);  optionExpParts.setType(String.class);  options.addOption(optionExpParts);  Option optionHdfsExp=new Option("hdfsExp",ResponderProps.USEHDFSLOOKUPTABLE,true,"optional -- 'true' or 'false' - Whether or not to generate and use the hdfs lookup table" + " for modular exponentiation");  optionHdfsExp.setRequired(false);  optionHdfsExp.setArgName(ResponderProps.USEHDFSLOOKUPTABLE);  optionHdfsExp.setType(String.class);  options.addOption(optionHdfsExp);  Option optionDataParts=new Option("dataParts",ResponderProps.NUMDATAPARTITIONS,true,"optional -- Number of partitions for the input data");  optionDataParts.setRequired(false);  optionDataParts.setArgName(ResponderProps.NUMDATAPARTITIONS);  optionDataParts.setType(String.class);  options.addOption(optionDataParts);  Option optionModExpJoin=new Option("useModExpJoin",ResponderProps.USEMODEXPJOIN,true,"optional -- 'true' or 'false' -- Spark only -- Whether or not to " + "pre-compute the modular exponentiation table and join it to the data partitions when performing the encrypted row calculations");  optionModExpJoin.setRequired(false);  optionModExpJoin.setArgName(ResponderProps.USEMODEXPJOIN);  optionModExpJoin.setType(String.class);  options.addOption(optionModExpJoin);  Option optionNumColMultPartitions=new Option("numColMultParts",ResponderProps.NUMCOLMULTPARTITIONS,true,"optional, Spark only -- Number of partitions to " + "use when performing column multiplication");  optionNumColMultPartitions.setRequired(false);  optionNumColMultPartitions.setArgName(ResponderProps.NUMCOLMULTPARTITIONS);  optionNumColMultPartitions.setType(String.class);  options.addOption(optionNumColMultPartitions);  Option optionColMultReduceByKey=new Option("colMultRBK",ResponderProps.COLMULTREDUCEBYKEY,true,"optional -- 'true' or 'false' -- Spark only -- " + "If true, uses reduceByKey in performing column multiplication; if false, uses groupByKey -> reduce");  optionColMultReduceByKey.setRequired(false);  optionColMultReduceByKey.setArgName(ResponderProps.COLMULTREDUCEBYKEY);  optionColMultReduceByKey.setType(String.class);  options.addOption(optionColMultReduceByKey);  Option optionAllowEmbeddedQS=new Option("allowEmbeddedQS",ResponderProps.ALLOWEMBEDDEDQUERYSCHEMAS,true,"optional -- 'true' or 'false'  (defaults to 'false') -- " + "If true, allows embedded QuerySchemas for a query.");  optionAllowEmbeddedQS.setRequired(false);  optionAllowEmbeddedQS.setArgName(ResponderProps.ALLOWEMBEDDEDQUERYSCHEMAS);  optionAllowEmbeddedQS.setType(String.class);  options.addOption(optionAllowEmbeddedQS);  Option optionEmbedQS=new Option("embedQS",ResponderProps.EMBEDQUERYSCHEMA,true,"optional -- 'true' or 'false'  (defaults to 'false') -- " + "If true, the embedded QuerySchema for the query.");  optionEmbedQS.setRequired(false);  optionEmbedQS.setArgName(ResponderProps.EMBEDQUERYSCHEMA);  optionEmbedQS.setType(String.class);  options.addOption(optionEmbedQS);  Option optionBatchSeconds=new Option("batchSeconds",ResponderProps.BATCHSECONDS,true,"optional -- Number of seconds per batch in Spark Streaming; defaults to 30");  optionBatchSeconds.setRequired(false);  optionBatchSeconds.setArgName(ResponderProps.BATCHSECONDS);  optionBatchSeconds.setType(String.class);  options.addOption(optionBatchSeconds);  Option optionWindowLength=new Option("windowLength",ResponderProps.WINDOWLENGTH,true,"optional -- Number of seconds per window in Spark Streaming; defaults to 60");  optionWindowLength.setRequired(false);  optionWindowLength.setArgName(ResponderProps.WINDOWLENGTH);  optionWindowLength.setType(String.class);  options.addOption(optionWindowLength);  Option optionMaxBatches=new Option("maxBatches",ResponderProps.MAXBATCHES,true,"optional -- Max batches to process in Spark Streaming; defaults to -1 - unlimited");  optionMaxBatches.setRequired(false);  optionMaxBatches.setArgName(ResponderProps.MAXBATCHES);  optionMaxBatches.setType(String.class);  options.addOption(optionMaxBatches);  Option optionStopGracefully=new Option("stopGracefully",ResponderProps.STOPGRACEFULLY,true,"optional -- Whether or not to stop gracefully in Spark Streaming; defaults to false");  optionStopGracefully.setRequired(false);  optionStopGracefully.setArgName(ResponderProps.STOPGRACEFULLY);  optionStopGracefully.setType(String.class);  options.addOption(optionStopGracefully);  Option optionUseQueueStream=new Option("queueStream",ResponderProps.USEQUEUESTREAM,true,"optional -- Whether or not to use a queue stream in Spark Streaming; defaults to false");  optionUseQueueStream.setRequired(false);  optionUseQueueStream.setArgName(ResponderProps.USEQUEUESTREAM);  optionUseQueueStream.setType(String.class);  options.addOption(optionUseQueueStream);  return options;}  }
class C{  Collection<? extends ClientRequestResult> handleDeviceClassNamesRequest(final ClientRequest deviceClassNamesRequest){  Collection<DeviceClassNameResponse> classNames=new ArrayList<>();  Collection<String> names=deviceClassFacade.getDeviceClassNames();  for (  String name : names) {    classNames.add(TransferObjectFactory.createTransferDeviceName(name));  }  return classNames;}  }
class C{  public String tableName(){  return tblName;}  }
class C{  private void calcFollowList(CMNode nodeCur){  if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_CHOICE) {    calcFollowList(((CMBinOp)nodeCur).getLeft());    calcFollowList(((CMBinOp)nodeCur).getRight());  } else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_SEQ) {    calcFollowList(((CMBinOp)nodeCur).getLeft());    calcFollowList(((CMBinOp)nodeCur).getRight());    final CMStateSet last=((CMBinOp)nodeCur).getLeft().lastPos();    final CMStateSet first=((CMBinOp)nodeCur).getRight().firstPos();    for (int index=0; index < fLeafCount; index++) {      if (last.getBit(index))       fFollowList[index].union(first);    }  } else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE || nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE) {    calcFollowList(((CMUniOp)nodeCur).getChild());    final CMStateSet first=nodeCur.firstPos();    final CMStateSet last=nodeCur.lastPos();    for (int index=0; index < fLeafCount; index++) {      if (last.getBit(index))       fFollowList[index].union(first);    }  } else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE) {    calcFollowList(((CMUniOp)nodeCur).getChild());  }}  }
class C{  public Properties readSettings() throws ProxyException {  Properties settings=new Properties();  try {    parseSettings(settings);  } catch (  IOException e) {    Logger.log(getClass(),LogLevel.ERROR,"Gnome settings read error.",e);    throw new ProxyException(e);  }  return settings;}  }
class C{  public static <T>Map<String,T> convertDxToOperand(Map<String,T> valueMap){  Map<String,T> map=Maps.newHashMap();  for (  Entry<String,T> entry : valueMap.entrySet()) {    map.put(entry.getKey().replaceFirst(DimensionalObject.DIMENSION_SEP,DimensionalObjectUtils.COMPOSITE_DIM_OBJECT_PLAIN_SEP),entry.getValue());  }  return map;}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  public AddTypeIndexesResponseInfo(){}  }
class C{  @Override public void rightMouseButton(Object selectedItem,MouseEvent e){}  }
class C{  public Map<Integer,Integer> apply() throws CanceledException {  Map<Integer,Integer> orphan2AncestorMapping=new HashMap<>();  progressListener.setMaximum(tree.getNumberOfNodes());  progressListener.setProgress(0);  Set<Integer> orphans=new HashSet<>();  computeOrphan2AncestorMappingRec(tree.getRoot(),orphan2AncestorMapping,orphans);  for (  Integer id : orphans) {    orphan2AncestorMapping.put(id,IdMapper.UNASSIGNED_ID);  }  orphans.clear();  return orphan2AncestorMapping;}  }
class C{  private boolean hasCurrentAccountChanged(){  Account account=AccountUtils.getCurrentOwnCloudAccount(this);  if (account == null) {    return true;  } else {    return !mOriginalCurrentAccount.equals(account.name);  }}  }
class C{  public static List<Entry> loadEntriesFromFile(String path){  File sdcard=Environment.getExternalStorageDirectory();  File file=new File(sdcard,path);  List<Entry> entries=new ArrayList<Entry>();  try {    @SuppressWarnings("resource") BufferedReader br=new BufferedReader(new FileReader(file));    String line;    while ((line=br.readLine()) != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(Integer.parseInt(split[split.length - 1]),vals));      }    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  }  return entries;}  }
class C{  public String reportError(XMLLocator location,String domain,String key,Object[] arguments,short severity) throws XNIException {  return reportError(location,domain,key,arguments,severity,null);}  }
class C{  private void startLoadingData(){  Random random=new Random();  mHandler.postDelayed(null,1000 + random.nextInt(2000));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_ME_TO_B(String skillname){  return new SM_SYSTEM_MESSAGE(1200458,skillname);}  }
class C{  public ShoppingCartItem findCartItem(int index){  if (cartLines.size() <= index) {    return null;  }  return cartLines.get(index);}  }
class C{  public static int retryable(Throwable t){  if (logger.isLoggable(Level.FINEST)) {    logger.log(Level.FINEST,"Inside ThrowableConstants.retryable() ",t);  }  if (t == null)   throw new NullPointerException("Must pass a non-null Throwable");  if (t instanceof RuntimeException) {    return BAD_INVOCATION;  }  if (t instanceof Error) {    if ((t instanceof OutOfMemoryError) || (t instanceof LinkageError)) {      return INDEFINITE;    }    if (t instanceof StackOverflowError)     return BAD_INVOCATION;    return BAD_OBJECT;  }  if (t instanceof RemoteException) {    final RemoteException re=(RemoteException)t;    if (re instanceof NoSuchObjectException || re instanceof UnexpectedException || re instanceof UnknownHostException|| re instanceof ConnectException) {      return BAD_OBJECT;    }    final Throwable detail=re.detail;    if (detail == null)     return INDEFINITE;    if (re instanceof MarshalException || re instanceof UnmarshalException) {      if (detail instanceof ObjectStreamException)       return BAD_INVOCATION;      final int drs=retryable(detail);      if (drs == BAD_OBJECT || drs == BAD_INVOCATION)       return BAD_INVOCATION;      return INDEFINITE;    }    if (re instanceof ConnectIOException) {      if (detail instanceof NoRouteToHostException || detail instanceof PortUnreachableException || detail instanceof ProtocolException) {        return BAD_OBJECT;      }      if (detail instanceof UnsupportedConstraintException || detail instanceof ObjectStreamException) {        return BAD_INVOCATION;      }      return INDEFINITE;    }    if (re instanceof ServerException) {      final int drs=retryable(detail);      if (drs == BAD_OBJECT)       return BAD_INVOCATION;      return drs;    }    if (re instanceof ServerError) {      return retryable(detail);    }    return INDEFINITE;  }  return UNCATEGORIZED;}  }
class C{  @Override public void printStackTrace(){  printStackTrace(new java.io.PrintWriter(System.err,true));}  }
class C{  public static AttributeSelection createAttributes(Class<?> expectedDataType,FieldConfigBase field,boolean rasterSymbol){  AttributeSelection obj=new AttributeSelection(expectedDataType,field);  obj.updateAttributeSelection(rasterSymbol);  return obj;}  }
class C{  public static <T extends GenericEntity>List<T> filterByOr(List<T> values,List<? extends EntityCondition> exprs){  if (values == null)   return null;  if (UtilValidate.isEmpty(exprs)) {    return values;  }  List<T> result=new LinkedList<T>();  for (  T value : values) {    boolean include=false;    for (    EntityCondition condition : exprs) {      include=condition.entityMatches(value);      if (include)       break;    }    if (include) {      result.add(value);    }  }  return result;}  }
class C{  public MovieSaveException(Exception e){  super(e);}  }
class C{  public static ModelRelation create(ModelEntity modelEntity,Element relationElement,boolean isAutoRelation){  String type=relationElement.getAttribute("type").intern();  String title=relationElement.getAttribute("title").intern();  String relEntityName=relationElement.getAttribute("rel-entity-name").intern();  String fkName=relationElement.getAttribute("fk-name").intern();  String description=UtilXml.childElementValue(relationElement,"description");  List<ModelKeyMap> keyMaps=Collections.emptyList();  List<? extends Element> elementList=UtilXml.childElementList(relationElement,"key-map");  if (!elementList.isEmpty()) {    keyMaps=new ArrayList<ModelKeyMap>(elementList.size());    for (    Element keyMapElement : elementList) {      keyMaps.add(new ModelKeyMap(keyMapElement));    }    keyMaps=Collections.unmodifiableList(keyMaps);  }  return new ModelRelation(modelEntity,description,type,title,relEntityName,fkName,keyMaps,isAutoRelation);}  }
class C{  public Logit(double lo,double hi){  this.lo=lo;  this.hi=hi;}  }
class C{  @Override protected int isUnchangedByNormalization(XMLString value){  int end=value.offset + value.length;  for (int i=value.offset; i < end; ++i) {    int c=value.ch[i];    if (XMLChar.isSpace(c)) {      return i - value.offset;    }  }  return -1;}  }
class C{  @Bean public Auth0Client auth0Client(){  return new Auth0Client(clientId,issuer);}  }
class C{  private void processFullPassCode(){  if (ACTION_CHECK.equals(getIntent().getAction())) {    if (checkPassCode()) {      hideSoftKeyboard();      finish();    } else {      showErrorAndRestart(R.string.pass_code_wrong,R.string.pass_code_enter_pass_code,View.INVISIBLE);    }  } else   if (ACTION_CHECK_WITH_RESULT.equals(getIntent().getAction())) {    if (checkPassCode()) {      Intent resultIntent=new Intent();      resultIntent.putExtra(KEY_CHECK_RESULT,true);      setResult(RESULT_OK,resultIntent);      hideSoftKeyboard();      finish();    } else {      showErrorAndRestart(R.string.pass_code_wrong,R.string.pass_code_enter_pass_code,View.INVISIBLE);    }  } else   if (ACTION_REQUEST_WITH_RESULT.equals(getIntent().getAction())) {    if (!mConfirmingPassCode) {      requestPassCodeConfirmation();    } else     if (confirmPassCode()) {      savePassCodeAndExit();    } else {      showErrorAndRestart(R.string.pass_code_mismatch,R.string.pass_code_configure_your_pass_code,View.VISIBLE);    }  }}  }
class C{  private static int determineMaxTaxonomicRankIndex(NodeSet selectedNodes){  int maxRankIndex=-1;  for (  Node v : selectedNodes) {    int rank=TaxonomyData.getTaxonomicRank((Integer)v.getInfo());    if (rank != 0) {      String rankName=TaxonomicLevels.getName(rank);      int index=Basic.getIndex(rankName,ranks);      if (index > maxRankIndex)       maxRankIndex=index;    }  }  return maxRankIndex;}  }
class C{  public int skip(int len) throws IllegalArgumentException, IOException {  int bytesRead=0;  int bytesToRead=0;  int total=0;  if (len < 0)   throw new IllegalArgumentException("len must be a positve value");  int blockSize=inputBuffer.length;  bytesToRead=len * frameSize;  while (total < bytesToRead) {    if (blockSize > bytesToRead - total)     blockSize=bytesToRead - total;    bytesRead=read(blockSize);    total+=bytesRead;    if (blockSize != bytesRead)     return total / frameSize;  }  return total / frameSize;}  }
class C{  private FactorialLog(int numValues,double[] cache){  if (numValues < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,numValues,0);  }  LOG_FACTORIALS=new double[numValues];  final int beginCopy=2;  final int endCopy=cache == null || cache.length <= beginCopy ? beginCopy : cache.length <= numValues ? cache.length : numValues;  for (int i=beginCopy; i < endCopy; i++) {    LOG_FACTORIALS[i]=cache[i];  }  for (int i=endCopy; i < numValues; i++) {    LOG_FACTORIALS[i]=LOG_FACTORIALS[i - 1] + FastMath.log(i);  }}  }
class C{  @CalledByNative private static InfoBar show(int enumeratedIconId,String messageText,int inlineLinkRangeStart,int inlineLinkRangeEnd,String buttonLabel){  return new GeneratedPasswordSavedInfoBar(ResourceId.mapToDrawableId(enumeratedIconId),messageText,inlineLinkRangeStart,inlineLinkRangeEnd,buttonLabel);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_FAIL_ALREADY_CHARGED(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400889,value0,value1);}  }
class C{  private ArrayList<OWASPResult> loadDatabase(){  ArrayList<OWASPResult> database=new ArrayList<>();  try {    Gson gson=new GsonBuilder().create();    OWASPResult[] myArray=gson.fromJson(new FileReader(this.DATABASEPATH),OWASPResult[].class);    database=new ArrayList<>(Arrays.asList(myArray));  } catch (  FileNotFoundException|JsonSyntaxException ex) {    System.out.println(ex);  }  return database;}  }
class C{  private static int hashOf(final int key){  final int h=key ^ ((key >>> 20) ^ (key >>> 12));  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  @VisibleForTesting void reset(){  setRawCounter(0);}  }
class C{  private void readHeaderPage(){  int numBytesRead=0;  Page headerPage=this.allocator.fetchPage(0);  int numFields=ByteBuffer.wrap(headerPage.readBytes(numBytesRead,4)).getInt();  numBytesRead+=4;  List<Integer> fieldNameLengths=new ArrayList<Integer>();  for (int i=0; i < numFields; i++) {    fieldNameLengths.add(ByteBuffer.wrap(headerPage.readBytes(numBytesRead,4)).getInt());    numBytesRead+=4;  }  List<String> fieldNames=new ArrayList<String>();  for (  int fieldNameLength : fieldNameLengths) {    byte[] bytes=headerPage.readBytes(numBytesRead,fieldNameLength);    fieldNames.add(new String(bytes,Charset.forName("UTF-8")));    numBytesRead+=fieldNameLength;  }  List<DataType> fieldTypes=new ArrayList<DataType>();  for (int i=0; i < numFields; i++) {    int ordinal=ByteBuffer.wrap(headerPage.readBytes(numBytesRead,4)).getInt();    DataType.Types type=DataType.Types.values()[ordinal];    numBytesRead+=4;switch (type) {case INT:      fieldTypes.add(new IntDataType());    break;case STRING:  int len=ByteBuffer.wrap(headerPage.readBytes(numBytesRead,4)).getInt();numBytesRead+=4;fieldTypes.add(new StringDataType(len));break;case BOOL:fieldTypes.add(new BoolDataType());break;case FLOAT:fieldTypes.add(new FloatDataType());break;}}this.schema=new Schema(fieldNames,fieldTypes);}  }
class C{  public static boolean saveTime(){  log.info("Game time saved...");  return DAOManager.getDAO(ServerVariablesDAO.class).store("time",getGameTime().getTime());}  }
class C{  public static Map<String,Object> conditionTrueService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("conditionReply",Boolean.TRUE);  return result;}  }
class C{  public String nextToken() throws JSONException {  char c;  char q;  StringBuilder sb=new StringBuilder();  do {    c=next();  } while (Character.isWhitespace(c));  if (c == '"' || c == '\'') {    q=c;    for (; ; ) {      c=next();      if (c < ' ') {        throw syntaxError("Unterminated string.");      }      if (c == q) {        return sb.toString();      }      sb.append(c);    }  }  for (; ; ) {    if (c == 0 || Character.isWhitespace(c)) {      return sb.toString();    }    sb.append(c);    c=next();  }}  }
class C{  public static boolean isWatchFaceApp(@NotNull AndroidFacet facet){  if (AndroidFacet.getInstance(facet.getModule()) == null) {    Logger.getInstance(LaunchUtils.class).warn("calling isWatchFaceApp when facet is not ready yet");    return false;  }  MergedManifest info=MergedManifest.get(facet);  if (!info.getActivities().isEmpty()) {    return false;  }  final List<Element> services=info.getServices();  if (services.size() != 1) {    return false;  }  Element service=services.get(0);  List<Element> filters=LintUtils.getChildren(service);  return filters.size() == 1 && ActivityLocatorUtils.containsAction(filters.get(0),AndroidUtils.WALLPAPER_SERVICE_ACTION_NAME) && ActivityLocatorUtils.containsCategory(filters.get(0),AndroidUtils.WATCHFACE_CATEGORY_NAME);}  }
class C{  @Override public Estimate estimateRate(final long number_impressions,final long number_actions){  if (number_impressions < 0) {    throw new IllegalArgumentException("Number of unique impressions must be nonnegative.");  }  if (number_actions < 0) {    throw new IllegalArgumentException("Number of unique actions must be nonnegative.");  }  if (number_actions > number_impressions) {    throw new IllegalArgumentException("Number of unique actions cannot exceed number of unique impressions.");  }  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);  double mid=(number_actions + 0.5 * zval * zval) / (number_impressions + zval * zval);  double confint=zval * sqrt(mid * (1 - mid) / (number_impressions + zval * zval));  return new Estimate.Builder().withEstimate(1.0 * number_actions / number_impressions).withLowerBound(mid - confint).withUpperBound(mid + confint).build();}  }
class C{  public boolean isTextPresentInWebElement(WebElement element,String text,int timeout){  return isConditionMet(textToBePresentInElement(element,text),timeout);}  }
class C{  public JLookupSwitchStmt(Value key,List<IntConstant> lookupValues,List<? extends Unit> targets,Unit defaultTarget){  this(Jimple.v().newImmediateBox(key),lookupValues,getTargetBoxesArray(targets),Jimple.v().newStmtBox(defaultTarget));}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public void addLine(@NotNull RangedContinuousSeries series,@NotNull LineConfig config){  mLinesConfig.put(series,config);}  }
class C{  protected void handleFile(File file,int depth,Collection<T> results) throws IOException {}  }
class C{  private String nextHost(){  currentHost++;  if (currentHost == hostsArray.length) {    currentHost=0;  }  return hostsArray[currentHost];}  }
class C{  public PagesSaveQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  private AudioOption createOption2(ChannelType... channels){  AudioOption option=new AudioOption();  Stream.of(createTrack(new Channel(FL.name(),channels[0])),createTrack(new Channel(FR.name(),channels[1])),createTrack(new Channel(FC.name(),channels[2])),createTrack(new Channel(LFE.name(),channels[3])),createTrack(new Channel(SL.name(),channels[4])),createTrack(new Channel(SR.name(),channels[5])),createTrack(new Channel(FL.name(),channels[6])),createTrack(new Channel(FR.name(),channels[7]))).forEach(null);  return option;}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {  if (fPerformValidation && fElementDepth >= 0 && fDTDGrammar != null) {    fDTDGrammar.getElementDecl(fCurrentElementIndex,fTempElementDecl);    if (fTempElementDecl.type == XMLElementDecl.TYPE_EMPTY) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_CONTENT_INVALID_SPECIFIED",new Object[]{fCurrentElement.rawname,"EMPTY","comment"},XMLErrorReporter.SEVERITY_ERROR);    }  }  if (fDocumentHandler != null) {    fDocumentHandler.comment(text,augs);  }}  }
class C{  public V put(K key,V value){  return putInternal(key,value,expireTimeNanos);}  }
class C{  private int peekButOne() throws CompileException, IOException {  if (this.nextButOneChar != -1)   return this.nextButOneChar;  this.peek();  try {    return (this.nextButOneChar=this.internalRead());  } catch (  UnicodeUnescapeException ex) {    throw new CompileException(ex.getMessage(),this.location(),ex);  }}  }
class C{  public void putAuxiliaryData(Map<String,byte[]> label2data) throws IOException {  (new RMA2File(file)).replaceAuxiliaryData(label2data);}  }
class C{  private boolean isAllowAllMethodsConfigured(){  if (VendorExtensionUtils.hasExtension(swagger.getVendorExtensions(),VendorExtensionUtils.X_GOOGLE_ALLOW,String.class,this)) {    String allowMethodsExtensionValue=(String)swagger.getVendorExtensions().get(VendorExtensionUtils.X_GOOGLE_ALLOW);    if (allowMethodsExtensionValue.equalsIgnoreCase("all")) {      return true;    } else     if (allowMethodsExtensionValue.equalsIgnoreCase("configured")) {      return false;    } else {      addDiag(Diag.error(new SimpleLocation(VendorExtensionUtils.X_GOOGLE_ALLOW),"Only allowed values for %s are %s",VendorExtensionUtils.X_GOOGLE_ALLOW,"all|configured"));      return false;    }  }  return false;}  }
class C{  public AnchorUpdateControl(Layout[] layout,String action){  this(layout,action,true);}  }
class C{  public static Object cloneWithSerialization(Object o){  if (o == null) {    return null;  }  try {    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();    ObjectOutputStream objOut=new ObjectOutputStream(outputStream);    objOut.writeObject(o);    ByteArrayInputStream inputStream=new ByteArrayInputStream(outputStream.toByteArray());    ObjectInputStream objIn=new ObjectInputStream(inputStream);    return objIn.readObject();  } catch (  Exception e) {    return null;  }}  }
class C{  public void update(final Long pId,final Object pValue,final String pValueDesc,final Timestamp pTimestamp){  final RuleBufferObject bufferObj;  LOG.trace(pId + " entering update()");synchronized (BUFFER_LOCK) {    if (!RULE_OBJECT_BUF.containsKey(pId)) {      bufferObj=new RuleBufferObject(pId,pValue,pValueDesc,pTimestamp);      RULE_OBJECT_BUF.put(pId,bufferObj);    } else {      bufferObj=(RuleBufferObject)RULE_OBJECT_BUF.get(pId);      bufferObj.update(pValue,pValueDesc,pTimestamp);    }    scheduleCacheUpdaterTask(pId);  }  LOG.trace(pId + " leaving update()");}  }
class C{  public boolean isStartVisible(int row){  return getBoolean(row,VisualItem.STARTVISIBLE);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static boolean testFileExists(String name){  boolean status;  if ((testSaveLocationExists()) && (!name.equals(""))) {    File path=Environment.getExternalStorageDirectory();    File newPath=constructFilePaths(path.toString(),name);    status=newPath.exists();  } else {    status=false;  }  return status;}  }
class C{  private String proxyToString(Object proxy){  Class[] interfaces=proxy.getClass().getInterfaces();  Class iface=null;  for (int i=interfaces.length; --i >= 0; iface=interfaces[i]) {    if (interfaces[i] == RemoteMethodControl.class) {      break;    }  }  if (iface == null) {    return "Proxy[" + this + "]";  }  String n=iface.getName();  int dot=n.lastIndexOf('.');  if (dot >= 0) {    n=n.substring(dot + 1);  }  return "Proxy[" + n + ","+ this+ "]";}  }
class C{  protected VideoReportQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean matchName(String queryName,byte[] line,int lineLength){  int start=0;  if (line[start] == '>' || line[0] == '@')   start++;  while (Character.isWhitespace(line[start]) && start < lineLength)   start++;  int end=start;  while (!Character.isWhitespace(line[end]) && end < lineLength) {    end++;  }  if (end - start != queryName.length())   return false;  for (int i=0; i < queryName.length(); i++) {    if (queryName.charAt(i) != (char)line[start + i])     return false;  }  return true;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @Override public boolean equals(Object other){  if (this == other) {    return true;  } else   if (other == null) {    return false;  } else   if (!(other instanceof WebSiteProperties)) {    return false;  }  WebSiteProperties o=(WebSiteProperties)other;  return sameFields(this.httpHost,o.httpHost) && sameFields(this.httpPort,o.httpPort) && sameFields(this.httpsHost,o.httpsHost)&& sameFields(this.httpsPort,o.httpsPort)&& (this.enableHttps == o.enableHttps);}  }
class C{  public Builder doubleColumnsMathOp(String newColumnName,MathOp mathOp,String... columnNames){  return transform(new DoubleColumnsMathOpTransform(newColumnName,mathOp,columnNames));}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public SpaceTypeDescriptorBuilder addPathIndex(String path,SpaceIndexType indexType){  return addPathIndex(path,indexType,false);}  }
class C{  private SpaceTypeDescriptorBuilder addFixedProperty(SpacePropertyDescriptor property){  if (property == null)   throw new IllegalArgumentException("Argument cannot be null - 'property'.");  if (_fixedProperties.containsKey(property.getName()))   throw new IllegalArgumentException("Cannot add fixed property '" + property.getName() + "' - a property with the same name is already defined.");  if (_superTypeDescriptor != null && _superTypeDescriptor.getFixedPropertyPosition(property.getName()) != -1)   throw new IllegalArgumentException("Cannot add fixed property '" + property.getName() + "' - a property with the same name is defined in the super type.");  _fixedProperties.put(property.getName(),property);  return this;}  }
class C{  public int length(){  java.util.Iterator iIter=java.util.Arrays.asList(NGramGraphArray).iterator();  int iCnt=0;  while (iIter.hasNext())   iCnt+=((UniqueVertexGraph)iIter.next()).getEdgesCount();  return iCnt;}  }
class C{  public ResourcesPoet indent(boolean indent){  this.indent=indent;  return this;}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  public OutputStream put(String key) throws FileNotFoundException {  return new xFileOutputStream(mCache.newFile(key));}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @ManagedOperation(description="Republish all non-published alarms (use if alarm publication thread did not shutdown correctly)") public void publishUnpublishedAlarms(){  LOGGER.info("Publishing all unpublished alarms to LASER and re-publishing to clients.");  for (  Long key : alarmCache.getKeys()) {    alarmCache.acquireWriteLockOnKey(key);    try {      Alarm alarm=alarmCache.get(key);      alarmCache.notifyListenersOfUpdate(alarm);    } catch (    Exception e) {      LOGGER.error("Exception caught while checking for unpublished alarms",e);    } finally {      alarmCache.releaseWriteLockOnKey(key);    }  }}  }
class C{  public boolean isApplicable(){  final ChartViewer viewer=(ChartViewer)getViewer();  return viewer.getActiveLabelsJList() != null && viewer.getActiveLabelsJList().getSelectedIndex() != -1;}  }
class C{  public void moveEvent(MouseEvent e){  Display d=(Display)e.getSource();  d.getAbsoluteCoordinate(e.getPoint(),m_tmp);  for (int i=0; i < m_layouts.length; i++)   m_layouts[i].setLayoutAnchor(m_tmp);  runAction(e);}  }
class C{  public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  public boolean hadAnnotations(){  return hadAnnotations;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public static boolean isEmpty(@Nullable String s){  return s == null || s.isEmpty();}  }
class C{  private List<IntervalFeature> findAllChromMatchInGenome(String query,GenomicCoords currentGc) throws IOException, InvalidGenomicCoordsException {  List<IntervalFeature> matchedFeatures=new ArrayList<IntervalFeature>();  List<String> chromSearchOrder=null;  if (this.intervalMap != null) {    chromSearchOrder=getChromListStartingAt(this.intervalMap.keySet(),currentGc.getChrom());  } else   if (this.isTabix) {    chromSearchOrder=getChromListStartingAt(this.tabixReader.getChromosomes(),currentGc.getChrom());  } else {    throw new RuntimeException("Cannot init chroms");  }  chromSearchOrder.add(currentGc.getChrom());  for (  String curChrom : chromSearchOrder) {    if (this.intervalMap != null) {      List<IntervalFeature> featuresList=this.intervalMap.get(curChrom);      for (      IntervalFeature x : featuresList) {        boolean matched=Pattern.compile(query).matcher(x.getRaw()).find();        if (matched && this.featureIsVisible(x)) {          matchedFeatures.add(x);        }      }    } else     if (this.isTabix) {      Iterator iter=this.tabixReader.query(curChrom,0,Integer.MAX_VALUE);      while (true) {        String line=iter.next();        if (line == null)         break;        boolean matched=Pattern.compile(query).matcher(line).find();        if (matched) {          IntervalFeature x=new IntervalFeature(line,this.type);          if (this.featureIsVisible(x)) {            matchedFeatures.add(x);          }        }      }    }    if (matchedFeatures.size() > 0) {      if (matchedFeatures.get(0).getChrom().equals(currentGc.getChrom()) && matchedFeatures.get(0).getFrom() == currentGc.getFrom() && matchedFeatures.get(matchedFeatures.size() - 1).getTo() == currentGc.getTo()) {        matchedFeatures=new ArrayList<IntervalFeature>();      } else {        break;      }    }  }  return matchedFeatures;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  public JmxApplicationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean isUpgraded(){  return upgraded;}  }
class C{  public MessagesSearchDialogsQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  private static void fitToRectangle(final PhyloTreeView treeView,final Rectangle rect){  final PhyloTree tree=treeView.getPhyloTree();  double minX=Integer.MAX_VALUE;  double minY=Integer.MAX_VALUE;  double maxX=Integer.MIN_VALUE;  double maxY=Integer.MIN_VALUE;  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {    final Point2D loc=treeView.getLocation(v);    minX=Math.min(minX,loc.getX());    minY=Math.min(minY,loc.getY());    maxX=Math.max(maxX,loc.getX());    maxY=Math.max(maxY,loc.getY());  }  final double mX=((maxX - minX) != 0 ? rect.getWidth() / (maxX - minX) : 0);  final double mY=((maxY - minY) != 0 ? rect.getHeight() / (maxY - minY) : 0);  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {    final Point2D loc=treeView.getLocation(v);    treeView.setLocation(v,rect.getX() + mX * (loc.getX() - minX),rect.getY() + mY * (loc.getY() - minY));  }}  }
class C{  private void kill(FlowSet inSet,Unit u,FlowSet outSet){  FlowSet kills=emptySet.clone();  for (  ValueBox defBox : u.getDefBoxes()) {    if (defBox.getValue() instanceof Local) {      Iterator<BinopExpr> inIt=inSet.iterator();      while (inIt.hasNext()) {        BinopExpr e=inIt.next();        Iterator<ValueBox> eIt=e.getUseBoxes().iterator();        while (eIt.hasNext()) {          ValueBox useBox=eIt.next();          if (useBox.getValue() instanceof Local && useBox.getValue().equivTo(defBox.getValue()))           kills.add(e);        }      }    }  }  inSet.difference(kills,outSet);}  }
class C{  private void initOptions(Context context,AttributeSet attrs){  TypedArray typedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.WeatherView,0,0);  int startingWeather, lifeTime, fadeOutTime, numParticles;  try {    startingWeather=typedArray.getInt(R.styleable.WeatherView_startingWeather,0);    lifeTime=typedArray.getInt(R.styleable.WeatherView_lifeTime,-1);    fadeOutTime=typedArray.getInt(R.styleable.WeatherView_fadeOutTime,-1);    numParticles=typedArray.getInt(R.styleable.WeatherView_numParticles,-1);    setWeather(Constants.weatherStatus.values()[startingWeather],lifeTime,fadeOutTime,numParticles);  }  finally {    typedArray.recycle();  }}  }
class C{  public void expand(DefaultMutableTreeNode v){  if (v == null)   v=(DefaultMutableTreeNode)fileTree.getModel().getRoot();  for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {    v=(DefaultMutableTreeNode)descendants.nextElement();    fileTree.expandPath(new TreePath(v.getPath()));  }}  }
class C{  public final static boolean isEjbQlIdentifier(String s){  if (s == null || s.length() == 0) {    return false;  }  for (int i=0; i < ejbQlIdentifiers.length; i++) {    if (ejbQlIdentifiers[i].equalsIgnoreCase(s)) {      return true;    }  }  return false;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void add(String name,LogSegmentMetadata metadata){synchronized (logSegments) {    if (!logSegments.containsKey(name)) {      logSegments.put(name,metadata);      LOG.info("{} added log segment ({} : {}) to cache.",new Object[]{streamName,name,metadata});    }    LogSegmentMetadata oldMetadata=lid2LogSegments.remove(metadata.getLedgerId());    if (null == oldMetadata) {      lid2LogSegments.put(metadata.getLedgerId(),metadata);    } else {      if (oldMetadata.isInProgress() && !metadata.isInProgress()) {        lid2LogSegments.put(metadata.getLedgerId(),metadata);      } else {        lid2LogSegments.put(oldMetadata.getLedgerId(),oldMetadata);      }    }  }}  }
class C{  public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){  return clickListeners.remove(itemClickListener);}  }
class C{  public static int computePercentIdentity(DAAMatchRecord match){  return match.getIdentities() * 100 / match.getLen();}  }
class C{  protected MessagesSetChatPhotoQuery file(String value){  return unsafeParam("file",value);}  }
class C{  protected static String stripTrimMapExprDelims(String mapExpr){  if (mapExpr != null && !mapExpr.isEmpty()) {    Matcher m=Pattern.compile("^\\s*\\{\\s*(.*)\\s*\\}\\s*$").matcher(mapExpr);    if (m.matches()) {      mapExpr=m.group(1);    } else {      mapExpr=mapExpr.trim();    }    return mapExpr;  } else {    return "";  }}  }
class C{  public void removeModule(@NotNull String modulePath){  checkInitialized();  commitDocumentChanges();  boolean removedAnyIncludes=false;  for (  GrMethodCall includeStatement : getMethodCalls(myGroovyFile,INCLUDE_METHOD)) {    for (    GrLiteral lit : getLiteralArguments(includeStatement)) {      if (modulePath.equals(lit.getValue())) {        lit.delete();        removedAnyIncludes=true;        if (getArguments(includeStatement).length == 0) {          includeStatement.delete();        }      }    }  }  if (removedAnyIncludes) {    for (    Pair<String,GrAssignmentExpression> pair : getAllProjectLocationStatements()) {      if (modulePath.equals(pair.first)) {        pair.second.delete();      }    }  }}  }
class C{  private ConstrainableTxnMgrProxy(TxnManager txnMgr,Uuid id,MethodConstraints methodConstraints){  super(constrainServer(txnMgr,methodConstraints),id);}  }
class C{  protected MarketSearchQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public void leftClick() throws InterruptedException {  click(InputEvent.BUTTON1_MASK);}  }
class C{  public void resetPotential(){  final int rank=Randomizer.nextInt(100) < 4 ? (Randomizer.nextInt(100) < 4 ? -UNIQUE : -EPIC) : -RARE;  resetPotentialWithRank(rank,10);}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public double lngDegrees(){  return 180.0 / Math.PI * lngRadians;}  }
class C{  public FragmentManageObject(){  this.fragmentList=new ArrayList<>();}  }
class C{  public void renderBeginningBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    writer.append(this.buildBoundaryComment("Begin",widgetType,modelWidget.getBoundaryCommentName()));  }}  }
class C{  public Matrix4f multLocal(Matrix4f in2){  return mult(in2,this);}  }
class C{  public static String trim(final String string){  String result=null;  if (string == null) {    result=BLANK;  } else {    result=string.trim();  }  return result;}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  public void clear(){  coveringView=null;  touchPoint=null;}  }
class C{  public static INDArray concat(INDArray[] history){  INDArray arr=Nd4j.concat(0,history);  if (arr.shape().length > 2)   arr.muli(1 / 256f);  return arr;}  }
class C{  public XMLGrammarCachingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public SQLQuery(String typeName,String sqlExpression,Object... parameters){  this(sqlExpression,typeName,null,DEFAULT_QUERY_RESULT_TYPE,parameters);}  }
class C{  private static boolean match(String s,byte[] bytes,int start,int end){  int length=s.length();  if (start + length > end) {    return false;  }  for (int i=0; i < length; i++) {    if ((char)bytes[start + i] != s.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public static String createReceivedMessageLog(final FormattedMqttMessage message,final MessageLog messageLogOptions){  final StringBuffer logMessage=new StringBuffer();  logMessage.append("<MqttMessage");  appendAttribute(logMessage,"id",String.valueOf(message.getId()));  appendAttribute(logMessage,"timestamp",String.valueOf(message.getDate().getTime()));  appendAttribute(logMessage,"topic",message.getTopic());  if (messageLogOptions.isLogQos()) {    appendAttribute(logMessage,"qos",String.valueOf(message.getQoS()));  }  if (messageLogOptions.isLogRetained()) {    appendAttribute(logMessage,"retained",String.valueOf(message.isRetained()));  }  if (messageLogOptions.isLogConnection()) {    appendAttribute(logMessage,"connection",message.getConnection().getMqttConnectionDetails().getName());  }  if (messageLogOptions.isLogSubscription() && message.getMatchingSubscriptionTopics() != null && message.getMatchingSubscriptionTopics().size() > 0) {    appendAttribute(logMessage,"subscription",message.getMatchingSubscriptionTopics().get(0));  }  populatePayload(logMessage,message,messageLogOptions);  logMessage.append("</MqttMessage>");  return logMessage.toString();}  }
class C{  public boolean hasInitialSeeds(){  return !this.initialSeeds.isEmpty();}  }
class C{  public VideoPutTagQuery(VkApiClient client,UserActor actor,int userId,int videoId){  super(client,"video.putTag",Integer.class);  accessToken(actor.getAccessToken());  userId(userId);  videoId(videoId);}  }
class C{  @Override @Transactional(value="cacheTransactionManager",propagation=Propagation.REQUIRES_NEW) public ProcessChange doUpdateControlTag(Long id,Properties elementProperties){  LOGGER.trace("Updating ControlTag " + id);  Change controlTagUpdate;  tagCache.acquireWriteLockOnKey(id);  try {    ControlTag controlTagCopy=tagCache.getCopy(id);    Long eqId=controlTagCopy.getEquipmentId();    Long processId=controlTagCopy.getProcessId();    ((ControlTagCacheObject)controlTagCopy).setEquipmentId(null);    controlTagUpdate=commonTagFacade.updateConfig(controlTagCopy,elementProperties);    configurableDAO.updateConfig(controlTagCopy);    ((ControlTagCacheObject)controlTagCopy).setEquipmentId(eqId);    ((ControlTagCacheObject)controlTagCopy).setProcessId(processId);    tagCache.putQuiet(controlTagCopy);    if (((ControlTagFacade)commonTagFacade).isInProcessList(controlTagCopy)) {      tagCache.releaseWriteLockOnKey(id);      return getProcessChanges((DataTagUpdate)controlTagUpdate,id);    } else {      return new ProcessChange();    }  } catch (  CacheElementNotFoundException ex) {    throw ex;  }catch (  Exception ex) {    LOGGER.error("Exception caught while updating a ControlTag - rolling back DB transaction",ex);    throw new UnexpectedRollbackException("Unexpected exception caught while updating a ControlTag configuration",ex);  } finally {    if (tagCache.isWriteLockedByCurrentThread(id)) {      tagCache.releaseWriteLockOnKey(id);    }  }}  }
class C{  public BoardEditCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  protected void registerLeakDetection(Node parent){  Optional<WeakRef<Node>> parentReference=map.keySet().stream().filter(null).findFirst();  WeakRef<Node> weakRef=new WeakRef<Node>(parent);  ChangeListener<Scene> sceneListener=null;  listeners.add(sceneListener);  parent.sceneProperty().addListener(new WeakChangeListener<>(sceneListener));}  }
class C{  static private boolean connectionNetwork(){  boolean result=false;  HttpURLConnection httpUrl=null;  try {    httpUrl=(HttpURLConnection)new URL("http://www.baidu.com").openConnection();    httpUrl.setConnectTimeout(TIMEOUT);    httpUrl.connect();    result=true;  } catch (  IOException e) {  } finally {    if (null != httpUrl) {      httpUrl.disconnect();    }    httpUrl=null;  }  return result;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static @ColorInt int scrimify(@ColorInt int color,boolean isDark,@FloatRange(from=0f,to=1f) float lightnessMultiplier){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  if (!isDark) {    lightnessMultiplier+=1f;  } else {    lightnessMultiplier=1f - lightnessMultiplier;  }  hsl[2]=MathUtils.constrain(0f,1f,hsl[2] * lightnessMultiplier);  return android.support.v4.graphics.ColorUtils.HSLToColor(hsl);}  }
class C{  public CatchItemResult useItem(ItemId item) throws LoginFailedException, RemoteServerException {  return AsyncHelper.toBlocking(useItemAsync(item));}  }
class C{  public static boolean isValidIPAddress(String IPAddress){  return Patterns.IP_ADDRESS.matcher(IPAddress).matches();}  }
class C{  public GroupsGetQueryWithExtended filter(List<GroupsGetFilter> value){  return unsafeParam("filter",value);}  }
class C{  public String readString(){  return scanner.next();}  }
class C{  public boolean registerClassLoaderStateListener(Long classLoaderKey,IClassLoaderCacheStateListener listener){  ClassLoaderContext classLoaderContext=_classLoaders.get(classLoaderKey);  if (classLoaderContext == null)   return false;  if (classLoaderContext.getRepresents() != Represent.REGULAR)   return false;  return classLoaderContext.addListener(listener);}  }
class C{  public static NullSpacePredicate isNull(){  return NULL;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200618,skillcaster,skillname);}  }
class C{  @NotNull public ListPersonGroupsAction listGroups(){  return new ListPersonGroupsAction(cognitiveContext);}  }
class C{  public int performReplication(Context context){  if (context.isActiveBlobStoreBulk() && _cacheManager.isDirectPersistencyEmbeddedtHandlerUsed() && !context.isFromReplication()) {    context.getBlobStoreBulkInfo().bulk_flush(context,false,false);  }  final IReplicationOutContext replicationContext=context.getReplicationContext();  if (replicationContext != null) {    return context.getReplicationContext().setCompleted(getReplicationNode().execute(replicationContext));  }  return 0;}  }
class C{  public final void storeDataBack(final List data) throws SQLException {  for (int i=0; i < data.size(); i++) {    if (data.get(i) instanceof FallbackImpl) {      if (!((FallbackImpl)data.get(i)).toString().equals(FallbackImpl.ERROR)) {        storage.add(storage);      } else {        throw new SQLException("Connection to the DB has been lost");      }    }  }}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  private static DummyFreeTTSVoice createFreeTTSVoice(Voice maryVoice){  DummyFreeTTSVoice freeTTSVoice;  if (maryVoice.getLocale() != null && maryVoice.getLocale().equals(Locale.US)) {    try {      freeTTSVoice=(DummyFreeTTSVoice)Class.forName("marytts.language.en.DummyFreeTTSVoice").newInstance();    } catch (    InstantiationException e) {      throw new RuntimeException(e);    }catch (    IllegalAccessException e) {      throw new RuntimeException(e);    }catch (    ClassNotFoundException e) {      throw new RuntimeException(e);    }    freeTTSVoice.initialise(maryVoice,null);  } else {    freeTTSVoice=new DummyFreeTTSVoice(maryVoice,null);  }  return freeTTSVoice;}  }
class C{  @Override public Node insertBefore(Node newChild,Node refChild) throws DOMException {  int type=newChild.getNodeType();  if (errorChecking) {    if (needsSyncChildren()) {      synchronizeChildren();    }    if ((type == Node.ELEMENT_NODE && docElement != null) || (type == Node.DOCUMENT_TYPE_NODE && docType != null)) {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);    }  }  if (newChild.getOwnerDocument() == null && newChild instanceof DocumentTypeImpl) {    ((DocumentTypeImpl)newChild).ownerDocument=this;  }  super.insertBefore(newChild,refChild);  if (type == Node.ELEMENT_NODE) {    docElement=(ElementImpl)newChild;  } else   if (type == Node.DOCUMENT_TYPE_NODE) {    docType=(DocumentTypeImpl)newChild;  }  return newChild;}  }
class C{  public void logout() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("REIN");    FTPReply r=communication.readFTPReply();    if (!r.isSuccessCode()) {      throw new FTPException(r);    } else {      stopAutoNoopTimer();      authenticated=false;      username=null;      password=null;    }  }}  }
class C{  public ResourcesPoet addBool(String name,String value){  Element element=document.createElement("bool");  element.setAttribute("name",name);  element.appendChild(document.createTextNode(value));  resourceElement.appendChild(element);  return this;}  }
class C{  public SerialMessage stopLevelChangeMessage(){  logger.debug("NODE {}: Creating new message for command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE",getNode().getNodeId());  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE};  result.setMessagePayload(newPayload);  return result;}  }
class C{  public OrdersGetAmountQuery(VkApiClient client,UserActor actor,int userId,String... votes){  super(client,"orders.getAmount",Amount.class);  accessToken(actor.getAccessToken());  userId(userId);  votes(votes);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MoveBehindATK_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200379,num0,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSpellATK_Instant_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200657,skillcaster,skillname);}  }
class C{  public void addSingleOpt(String key){  StringTokenizer st=new StringTokenizer(key);  while (st.hasMoreTokens()) {    String token=st.nextToken();    getList().add(token);  }}  }
class C{  private void checkForError(final Document document,List<String> expectedCodes) throws DASTProxyException {  LOGGER.debug("Inside AppScanEnterpriseRestService.checkForError function.");  final Element rootElement=document.getDocumentElement();  LOGGER.debug("Inside AppScanEnterpriseRestService.checkForError function...rootElement=" + rootElement);  if ("error".equalsIgnoreCase(rootElement.getTagName())) {    LOGGER.debug("Error has occured on request to ASE");    LOGGER.debug("Returned Error Codes are:");    final NodeList nodes=rootElement.getChildNodes();    for (int i=0; i < nodes.getLength(); i++) {      final Node node=nodes.item(i);      final String nodeName=node.getLocalName();      if ("code".equalsIgnoreCase(nodeName)) {        final String code=node.getChildNodes().item(0).getNodeValue();        LOGGER.debug(code);        if (expectedCodes != null && expectedCodes.contains(code)) {          LOGGER.debug("Expected error code found. Returning to normal execution");          return;        }      } else       if ("message".equalsIgnoreCase(nodeName)) {        LOGGER.debug(node.getChildNodes().item(0).getNodeValue());      } else       if ("help".equalsIgnoreCase(nodeName)) {        LOGGER.debug(node.getAttributes().item(0).getNodeValue());      }    }    LOGGER.debug("Inside AppScanEnterpriseRestService.checkForError function...exception..." + document.toString());    throw new DASTProxyException("Unexpected error on return of response from ASE");  }  LOGGER.debug("Inside AppScanEnterpriseRestService.checkForError function...no error");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHate_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200949,skilltarget,skillcaster,skillname);}  }
class C{  @Override public int daysCompleteTheTask(){  int k=0;  for (int i=1; i <= daysOfCurrentMonth(); i++) {    k+=data[i] ? 1 : 0;  }  return k;}  }
class C{  public SumOfLogs(){  value=0d;  n=0;}  }
class C{  public boolean isIgnoreSensors(){  return this.ignoreSensors;}  }
class C{  @Override public void evaluate() throws Throwable {  Throwable failureReason=null;  final Retry retry=method.getAnnotation(Retry.class);  if (retry == null) {    singleTryStatement.evaluate();  } else {    final int numRetries=retry.value();    for (int i=0; i < numRetries; ++i) {      try {        singleTryStatement.evaluate();        return;      } catch (      Throwable t) {        failureReason=t;      }    }    throw failureReason;  }}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (comboBox != null) {    ValueComboBoxData data=comboBox.getSelectedData();    if (data != null) {      FieldConfigBase fieldConfig=fieldConfigMap.get(data.getPanelId());      if (fieldConfig == null) {        ConsoleManager.getInstance().error(this,"Failed to find field for :" + data.getPanelId().getName());      } else {        expression=fieldConfig.getExpression();        if ((expression == null) && fieldConfig.isASingleValue()) {          ValueComboBoxData value=getEnumValue();          if (value != null) {            expression=getFilterFactory().literal(value.getKey());          }        }      }    }  }  return expression;}  }
class C{  private void spawnBaby(){  EntityVillager baby=this.villager.createChild(this.mate);  if (baby != null) {    this.villager.setGrowingAge(6000);    this.mate.setGrowingAge(6000);    this.villager.setIsWillingToMate(false);    this.mate.setIsWillingToMate(false);    baby.setGrowingAge(-24000);    baby.setLocationAndAngles(this.villager.posX,this.villager.posY,this.villager.posZ,0.0F,0.0F);    boolean profession=world.rand.nextBoolean();    baby.setProfession(profession ? villager.getProfessionForge() : mate.getProfessionForge());    this.world.spawnEntityInWorld(baby);    Random random=this.villager.getRNG();    for (int i=0; i < 7; ++i) {      double d0=random.nextGaussian() * 0.02D;      double d1=random.nextGaussian() * 0.02D;      double d2=random.nextGaussian() * 0.02D;      double d3=random.nextDouble() * (double)this.villager.width * 2.0D - (double)this.villager.width;      double d4=0.5D + random.nextDouble() * (double)this.villager.height;      double d5=random.nextDouble() * (double)this.villager.width * 2.0D - (double)this.villager.width;      this.world.spawnParticle(EnumParticleTypes.HEART,this.villager.posX + d3,this.villager.posY + d4,this.villager.posZ + d5,d0,d1,d2,new int[0]);    }    if (this.world.getGameRules().getBoolean("doMobLoot")) {      this.world.spawnEntityInWorld(new EntityXPOrb(this.world,this.villager.posX,this.villager.posY,this.villager.posZ,random.nextInt(7) + 1));    }  }}  }
class C{  public GroupsEditManagerQuery contactPosition(String value){  return unsafeParam("contact_position",value);}  }
class C{  public static void main(String[] args){  if (args.length != 5) {    System.err.println("wrong number of arguments");    System.exit(1);  }  try {    AbbrevCollector.collect(args[0],args[1],args[2],args[3],args[4]);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public StorageGetQuery key(String value){  return unsafeParam("key",value);}  }
class C{  public static void sampleInstallTinker(ApplicationLike appLike){  if (isInstalled) {    TinkerLog.w(TAG,"install tinker, but has installed, ignore");    return;  }  TinkerInstaller.install(appLike);  isInstalled=true;}  }
class C{  public boolean isInMemory(){  return !isThresholdExceeded();}  }
class C{  public boolean implies(ProtectionDomain domain,Permission permission){  return (domain == myDomain) || getCurrentSubPolicy().implies(domain,permission);}  }
class C{  public static Map<String,Object> cancelProductionRun(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String productionRunId=(String)context.get("productionRunId");  ProductionRun productionRun=new ProductionRun(productionRunId,delegator,dispatcher);  if (!productionRun.exist()) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunNotExists",locale));  }  String currentStatusId=productionRun.getGenericValue().getString("currentStatusId");  if (currentStatusId.equals("PRUN_CREATED") || currentStatusId.equals("PRUN_DOC_PRINTED") || currentStatusId.equals("PRUN_SCHEDULED")) {    try {      List<ProductionRun> mandatoryWorkEfforts=FastList.newInstance();      ProductionRunHelper.getLinkedProductionRuns(delegator,dispatcher,productionRunId,mandatoryWorkEfforts);      for (int i=1; i < mandatoryWorkEfforts.size(); i++) {        GenericValue mandatoryWorkEffort=(mandatoryWorkEfforts.get(i)).getGenericValue();        if (!(mandatoryWorkEffort.getString("currentStatusId").equals("PRUN_CANCELLED"))) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChangedMandatoryProductionRunFound",locale));        }      }      Map<String,Object> serviceContext=FastMap.newInstance();      serviceContext.put("workEffortId",productionRunId);      serviceContext.put("currentStatusId","PRUN_CANCELLED");      serviceContext.put("userLogin",userLogin);      dispatcher.runSync("updateWorkEffort",serviceContext);      List<GenericValue> products=EntityQuery.use(delegator).from("WorkEffortGoodStandard").where("workEffortId",productionRunId,"workEffortGoodStdTypeId","PRUN_PROD_DELIV","statusId","WEGS_CREATED").queryList();      if (!UtilValidate.isEmpty(products)) {        for (        GenericValue product : products) {          product.set("statusId","WEGS_CANCELLED");          product.store();        }      }      List<GenericValue> tasks=productionRun.getProductionRunRoutingTasks();      String taskId=null;      for (      GenericValue oneTask : tasks) {        taskId=oneTask.getString("workEffortId");        serviceContext.clear();        serviceContext.put("workEffortId",taskId);        serviceContext.put("currentStatusId","PRUN_CANCELLED");        serviceContext.put("userLogin",userLogin);        dispatcher.runSync("updateWorkEffort",serviceContext);        List<GenericValue> components=EntityQuery.use(delegator).from("WorkEffortGoodStandard").where("workEffortId",taskId,"workEffortGoodStdTypeId","PRUNT_PROD_NEEDED","statusId","WEGS_CREATED").queryList();        if (!UtilValidate.isEmpty(components)) {          for (          GenericValue component : components) {            component.set("statusId","WEGS_CANCELLED");            component.store();          }        }      }    } catch (    Exception e) {      Debug.logError(e,"Problem calling the updateWorkEffort service",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusNotChanged",locale));    }    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"ManufacturingProductionRunStatusChanged",UtilMisc.toMap("newStatusId","PRUN_DOC_PRINTED"),locale));    return result;  }  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingProductionRunCannotBeCancelled",locale));}  }
class C{  public String toString(){  return "ServerMinPrincipal" + Constraint.toString(principals);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200415,num0,skillname);}  }
class C{  public static void checkFinite(final double x) throws MathIllegalArgumentException {  if (Double.isInfinite(x) || Double.isNaN(x)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);  }}  }
class C{  private void addIndicatorValues(DataQueryParams params,Grid grid){  if (!params.getIndicators().isEmpty() && !params.isSkipData()) {    DataQueryParams dataSourceParams=DataQueryParams.newBuilder(params).retainDataDimension(DataDimensionItemType.INDICATOR).withIncludeNumDen(false).build();    List<Indicator> indicators=asTypedList(dataSourceParams.getIndicators());    Period filterPeriod=dataSourceParams.getFilterPeriod();    Map<String,Double> constantMap=constantService.getConstantMap();    Map<String,Map<String,Integer>> permutationOrgUnitTargetMap=getOrgUnitTargetMap(dataSourceParams,indicators);    List<List<DimensionItem>> dimensionItemPermutations=dataSourceParams.getDimensionItemPermutations();    Map<String,Map<DimensionalItemObject,Double>> permutationDimensionalItemValueMap=getPermutationDimensionalItemValueMap(dataSourceParams);    for (    Indicator indicator : indicators) {      for (      List<DimensionItem> dimensionItems : dimensionItemPermutations) {        String permKey=DimensionItem.asItemKey(dimensionItems);        Map<DimensionalItemObject,Double> valueMap=permutationDimensionalItemValueMap.get(permKey);        if (valueMap == null) {          continue;        }        Period period=filterPeriod != null ? filterPeriod : (Period)DimensionItem.getPeriodItem(dimensionItems);        OrganisationUnit unit=(OrganisationUnit)DimensionItem.getOrganisationUnitItem(dimensionItems);        String ou=unit != null ? unit.getUid() : null;        Map<String,Integer> orgUnitCountMap=permutationOrgUnitTargetMap != null ? permutationOrgUnitTargetMap.get(ou) : null;        IndicatorValue value=expressionService.getIndicatorValueObject(indicator,period,valueMap,constantMap,orgUnitCountMap);        if (value != null) {          List<DimensionItem> row=new ArrayList<>(dimensionItems);          row.add(DX_INDEX,new DimensionItem(DATA_X_DIM_ID,indicator));          grid.addRow();          grid.addValues(DimensionItem.getItemIdentifiers(row));          grid.addValue(AnalyticsUtils.getRoundedValue(dataSourceParams,indicator.getDecimals(),value.getValue()));          if (params.isIncludeNumDen()) {            grid.addValue(AnalyticsUtils.getRoundedValue(dataSourceParams,indicator.getDecimals(),value.getNumeratorValue()));            grid.addValue(AnalyticsUtils.getRoundedValue(dataSourceParams,indicator.getDecimals(),value.getDenominatorValue()));            grid.addValue(AnalyticsUtils.getRoundedValue(dataSourceParams,indicator.getDecimals(),value.getFactorAnnualizedValue()));          }        }      }    }  }}  }
class C{  public static void main(String[] args){  SymbolicGraph sg=new SymbolicGraph(1,6);  String s1=args.length > 0 ? args[0] : "smart";  String s2=args.length > 1 ? args[1] : "stupid";  String s3=args.length > 2 ? args[2] : "This is a pretty good day. Nice. It's really beautiful.";  sg.setDataString(s1 + " " + s2+ " "+ s3);  SemanticIndex si=new SemanticIndex(sg);  try {    si.MeaningExtractor=new LocalWordNetMeaningExtractor();  } catch (  IOException ex) {    Logger.getLogger(SemanticIndex.class.getName()).log(Level.SEVERE,null,ex);  }  WordDefinition wd1=si.getMeaning(s1);  WordDefinition wd2=si.getMeaning(s2);  if (wd1 == null) {    System.err.println("No definition found for:" + s1);    return;  }  if (wd2 == null) {    System.err.println("No definition found for:" + s2);    return;  }  System.out.println("Result of comparison between '" + s1 + "' and '"+ s2+ "':"+ SemanticIndex.compareWordDefinitions(wd1,wd2));  System.out.println(SemanticIndex.meaningToString(si.getMeaning(s3)));}  }
class C{  public static Variation attemptToGetAsVariant(String part,ItemStack is){  if (is.getItem() instanceof ItemBlock) {    ItemBlock ib=(ItemBlock)(is.getItem());    IBlockState bs=ib.block.getStateFromMeta(is.getMetadata());    for (    IProperty prop : (java.util.Set<IProperty>)bs.getProperties().keySet()) {      Comparable<?> comp=bs.getValue(prop);      Variation var=attemptToGetAsVariant(comp.toString());      if (var != null)       return var;    }    return null;  } else   return attemptToGetAsVariant(part);}  }
class C{  public BisectionSolver(double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  public VideoRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){  super(client,"video.removeFromAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  videoId(videoId);}  }
class C{  CommitRecord(ParticipantHandle parts[]){  if (parts == null)   throw new IllegalArgumentException("CommitRecord: must specify " + "a non-null parts array");  this.parts=parts;}  }
class C{  public AccountLookupContactsQuery lookupContacts(UserActor actor,AccountLookupContactsService service){  return new AccountLookupContactsQuery(getClient(),actor,service);}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  private void notifyDataSourceLoaded(){  List<DataSourceUpdatedInterface> copyListenerList=new ArrayList<DataSourceUpdatedInterface>(listenerList);  for (  DataSourceUpdatedInterface listener : copyListenerList) {    listener.dataSourceLoaded(getGeometryType(),this.connectedToDataSourceFlag);  }}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public void uploadFile(TRSHttpRequest request,TRSFileUploadHttpCallback callback){  mProvider.uploadFile(request,callback);}  }
class C{  public static boolean isAnyInfinity(double[] x){  for (  double value : x) {    if (Double.isInfinite(value)) {      return true;    }  }  return false;}  }
class C{  public void clearHeaderCache(){  mHeaderCache.clear();}  }
class C{  public synchronized void doneAppending(){  doneAppending=true;  notifyAll();}  }
class C{  public void navigateToMain(){  activity.startActivity(new Intent(activity,MainActivity.class));  activity.finish();}  }
class C{  public Builder(){  this(new TraversableHashMap<>());}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {}  }
class C{  public boolean containsKey(DataType key){  return lookupKey(key).hasNext();}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public void dropClass(String typeName) throws DropClassException {  if (typeName == null || typeName.equals(IServerTypeDesc.ROOT_TYPE_NAME))   throw new DropClassException("Invalid class name specified",typeName);synchronized (_typeDescLock) {    IServerTypeDesc typeDesc=_typeMap.get(typeName);    if (typeDesc == null || typeDesc.isInactive())     return;    for (    IServerTypeDesc subTypeDesc : typeDesc.getAssignableTypes()) {      if (subTypeDesc.getTypeName().equals(typeName))       continue;      if (subTypeDesc.isActive())       throw new DropClassException("Drop class failed. " + typeName + " class has an active subclass = "+ subTypeDesc.getTypeName(),typeName);    }    Map<String,IServerTypeDesc> typeMapCopy=cloneTypeMap(_typeMap,typeDesc.getTypeDesc().isSystemType());    typeDesc=typeMapCopy.get(typeName);    if (typeDesc == null)     throw new DirectoryInternalSpaceException("internal error - dropClass " + typeName + " class does not exist");    if (typeDesc.isInactive())     throw new DirectoryInternalSpaceException("internal error - dropClass " + typeName + " class not active");    typeDesc.inactivateType();    for (    IServerTypeDescListener listener : _typeDescListeners)     listener.onTypeDeactivated(typeDesc);    _typeMap=typeMapCopy;    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"setting " + typeDesc.getTypeName() + " to inActive");  }}  }
class C{  public void removeEffect(int skillid){  for (  Effect effect : abnormalEffectMap.values()) {    if (effect.getSkillId() == skillid) {      effect.endEffect();    }  }  for (  Effect effect : passiveEffectMap.values()) {    if (effect.getSkillId() == skillid) {      effect.endEffect();    }  }  for (  Effect effect : noshowEffects.values()) {    if (effect.getSkillId() == skillid) {      effect.endEffect();    }  }}  }
class C{  public String toString(){  return "ClientMinPrincipalType" + Constraint.toString(classes);}  }
class C{  private void createDictionaryByteArrayToSurrogateKeyMap(int initialMapSize){  dictionaryByteArrayToSurrogateKeyMap=new ConcurrentHashMap<>(initialMapSize);}  }
class C{  public Authentication(String firstName,String lastName,String mobile,String email,String password,String userType){  this.firstName=firstName;  this.lastName=lastName;  this.mobile=mobile;  this.email=email;  this.password=password;  this.userType=userType;}  }
class C{  public static boolean validatePin(Delegator delegator,String finAccountId,String pinNumber){  GenericValue finAccount=null;  try {    finAccount=EntityQuery.use(delegator).from("FinAccount").where("finAccountId",finAccountId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,module);  }  if (finAccount != null) {    String dbPin=finAccount.getString("finAccountCode");    Debug.logInfo("FinAccount Pin Validation: [Sent: " + pinNumber + "] [Actual: "+ dbPin+ "]",module);    if (dbPin != null && dbPin.equals(pinNumber)) {      return true;    }  } else {    Debug.logInfo("FinAccount record not found (" + finAccountId + ")",module);  }  return false;}  }
class C{  protected FieldConverters initializeSketchConverter(){  return new SketchFieldConverter();}  }
class C{  public static PhasedBackoffWaitStrategy withSleep(long spinTimeout,long yieldTimeout,TimeUnit units){  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new SleepingWaitStrategy(0));}  }
class C{  protected AdsDeleteClientsQuery ids(String value){  return unsafeParam("ids",value);}  }
class C{  private void createInfosCard(){  InfosItem[] infosCard=new InfosItem[infoTitle.length];  for (int i=0; i < infoTitle.length; i++)   infosCard[i]=new InfosItem(infoTitle[i],info[i]);  infoRecycler.setLayoutManager(new LinearLayoutManager(context));  infoRecycler.setAdapter(new InfosAdapter(infosCard,context));  infoRecycler.setHasFixedSize(true);}  }
class C{  public MarketReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId,ReportReason reason){  super(client,"market.reportComment",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  commentId(commentId);  reason(reason);}  }
class C{  protected void writeImpl(AionConnection con){}  }
class C{  public RoleAlreadyExistsException(){  super();}  }
class C{  public AirMapControlledAirspaceProperties(JSONObject propertiesJson){  constructFromJson(propertiesJson);}  }
class C{  public void showErrorNotification(final int errorCode,final Context context){  GoogleApiAvailability.getInstance().showErrorNotification(context,errorCode);}  }
class C{  @deprecated RuleBasedTransliterator(String ID,Data data,UnicodeFilter filter){  super(ID,filter);  this.data=data;  setMaximumContextLength(data.ruleSet.getMaximumContextLength());}  }
class C{  public static void main(String[] args){  Distribution dDist=new Distribution();  dDist.setValue(1,0.9);  dDist.setValue(2,0.1);  System.out.println("Entropy: " + entropy(dDist));}  }
class C{  private static String escapeTagValue(String tag_value){  return tag_value.replace("\"","\\\"");}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  double max=Double.NaN;  if (MathArrays.verifyValues(values,begin,length)) {    max=values[begin];    for (int i=begin; i < begin + length; i++) {      if (!Double.isNaN(values[i])) {        max=(max > values[i]) ? max : values[i];      }    }  }  return max;}  }
class C{  public BlockingResourcePool(IResourceFactory<R> resourceFactory,int minResources,int maxResources,R[] initialResources){  super(resourceFactory,minResources,maxResources,initialResources);  waitingQueue=new ConcurrentLinkedQueue<Thread>();}  }
class C{  private FunctionUtils(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonServant_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200884,skillcaster,value0,skillname);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  final ClusterViewer viewer=getViewer();  int max=viewer.getPcoaTab().getPCoA().getLoadingVectorsBiPlot().size();  np.matchIgnoreCase("set biplotSize=");  int number=np.getInt(0,max);  np.matchIgnoreCase(";");  viewer.getPcoaTab().setBiplotSize(number);}  }
class C{  @Deployment(resources="org/activiti/engine/test/api/event/ActivityEventsTest.testActivityMessageBoundaryEventsOnSubProcess.bpmn20.xml") public void testActivityMessageBoundaryEventsOnSubProcessForCancel() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("messageOnSubProcess");  assertNotNull(processInstance);  Execution executionWithMessage=runtimeService.createExecutionQuery().activityId("boundaryMessageEventCatching").singleResult();  assertNotNull(executionWithMessage);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  taskService.complete(task.getId());  assertEquals(2,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);  ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);  messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_CANCELLED,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING);}  }
class C{  private void clearFKValueInAssociatedTable(DataSupport baseObj){  List<String> associatedTableNames=baseObj.getListToClearAssociatedFK();  for (  String associatedTableName : associatedTableNames) {    String fkColumnName=getForeignKeyColumnName(baseObj.getTableName());    ContentValues values=new ContentValues();    values.putNull(fkColumnName);    String whereClause=fkColumnName + " = " + baseObj.getBaseObjId();    mDatabase.update(associatedTableName,values,whereClause,null);  }}  }
class C{  public int skipBytes(int n) throws IOException {  int remaining=n;  while (remaining > 0) {    remaining-=(int)bif.skip(remaining);  }  position+=n;  return n;}  }
class C{  private ResponseBuilder createResponseBuilder(ResultSet resultSet,ResponseContext responseContext,ResponseFormatType responseFormatType,UriInfo uriInfo){  @SuppressWarnings("unchecked") Map<String,URI> bodyLinks=(Map<String,URI>)responseContext.get(PAGINATION_LINKS_CONTEXT_KEY.getName());  if (bodyLinks == null) {    bodyLinks=Collections.emptyMap();  }  Pagination pagination=(Pagination)responseContext.get(PAGINATION_CONTEXT_KEY.getName());  if (responseFormatType == null) {    responseFormatType=ResponseFormatType.JSON;  }  LinkedHashMap<String,LinkedHashSet<DimensionField>> dimensionToDimensionFieldMap=(LinkedHashMap<String,LinkedHashSet<DimensionField>>)responseContext.get(REQUESTED_API_DIMENSION_FIELDS.getName());  LinkedHashMap<Dimension,LinkedHashSet<DimensionField>> requestedApiDimensionFields=dimensionToDimensionFieldMap.entrySet().stream().collect(Collectors.toMap(null,null,null,null));  Response response=new Response(resultSet,(LinkedHashSet<String>)responseContext.get(API_METRIC_COLUMN_NAMES.getName()),requestedApiDimensionFields,responseFormatType,getPartialIntervalsWithDefault(responseContext),getVolatileIntervalsWithDefault(responseContext),bodyLinks,pagination,objectMappers);  ResponseBuilder rspBuilder=javax.ws.rs.core.Response.ok(response.getResponseStream());switch (responseFormatType) {case CSV:    return rspBuilder.header(HttpHeaders.CONTENT_TYPE,"text/csv; charset=utf-8").header(HttpHeaders.CONTENT_DISPOSITION,ResponseFormat.getCsvContentDispositionValue(uriInfo));case JSON:default :  return rspBuilder.header(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON + "; charset=utf-8");}}  }
class C{  private void addHeaders(DataQueryParams params,Grid grid){  if (!params.isSkipData() && !params.isSkipHeaders()) {    for (    DimensionalObject col : params.getDimensions()) {      grid.addHeader(new GridHeader(col.getDimension(),col.getDisplayName(),String.class.getName(),false,true));    }    grid.addHeader(new GridHeader(VALUE_ID,VALUE_HEADER_NAME,Double.class.getName(),false,false));    if (params.isIncludeNumDen()) {      grid.addHeader(new GridHeader(NUMERATOR_ID,NUMERATOR_HEADER_NAME,Double.class.getName(),false,false));      grid.addHeader(new GridHeader(DENOMINATOR_ID,DENOMINATOR_HEADER_NAME,Double.class.getName(),false,false));      grid.addHeader(new GridHeader(FACTOR_ID,FACTOR_HEADER_NAME,Double.class.getName(),false,false));    }  }}  }
class C{  public void logStatisticsAsTableDriver(){synchronized (lock) {    Iterator<Map.Entry<String,List<QueryStatistic>>> entries=queryStatisticsMap.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry<String,List<QueryStatistic>> entry=entries.next();      String queryId=entry.getKey();      if (StringUtils.isEmpty(queryId)) {        entries.remove();      } else {        long interval=System.nanoTime() - Long.parseLong(queryId);        if (interval > QueryStatisticsConstants.CLEAR_STATISTICS_TIMEOUT) {          entries.remove();        } else {          if (entry.getValue().size() >= 2) {            String tableInfo=collectDriverStatistics(entry.getValue(),queryId);            if (null != tableInfo) {              LOGGER.statistic(tableInfo);              entries.remove();            }          }        }      }    }  }}  }
class C{  public void onResume(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onResume(multitasking);    }  }}  }
class C{  public ChangeSet lease(long lease){  _lease=lease;  return this;}  }
class C{  private void updateTrafficProjections(){  List<AirMapTraffic> updated=new ArrayList<>();  for (  AirMapTraffic traffic : allTraffic) {    if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) {      allTraffic.remove(traffic);      Coordinate projected=projectedCoordinate(traffic);      traffic.setCoordinate(projected);      traffic.setShowAlert(false);      allTraffic.add(traffic);      updated.add(traffic);    }  }  notifyUpdated(updated);}  }
class C{  protected GroupsGetCallbackServerSettingsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @Override public void listSummaryRec(NodeSet selectedNodes,Node v,int indent,Writer outs) throws IOException {  int id=(Integer)v.getInfo();  final String name=classification.getName2IdMap().get(id);  NodeData data=(super.getNodeData(v));  if ((selectedNodes == null || selectedNodes.contains(v))) {    if (data.getCountSummarized() > 0) {      for (int i=0; i < indent; i++)       outs.write(" ");      outs.write(name + ": " + data.getCountSummarized()+ "\n");    }  }  if (getCollapsedIds().contains(id)) {    return;  }  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {    listSummaryRec(selectedNodes,f.getOpposite(v),indent + 2,outs);  }}  }
class C{  protected AdsImportTargetContactsQuery contacts(String value){  return unsafeParam("contacts",value);}  }
class C{  public static String makeDotNodeLabel(Node n,Predicate<Node> p){  String color="";  String label;  if (p.test(n))   color=", color=red";  if (n instanceof LocalVarNode) {    label=makeLabel((LocalVarNode)n);  } else   if (n instanceof AllocNode) {    label=makeLabel((AllocNode)n);  } else   if (n instanceof FieldRefNode) {    label=makeLabel((FieldRefNode)n);  } else {    label=n.toString();  }  return makeNodeName(n) + "[label=\"" + label+ "\""+ color+ "];";}  }
class C{  public FieldVector3D<T> scalarMultiply(final double a){  return new FieldVector3D<T>(x.multiply(a),y.multiply(a),z.multiply(a));}  }
class C{  public void watchMonitoredHostCache(PreferenceChangeListener pcl){  addListener(INT_KEY_MONHOST_CACHE,pcl);}  }
class C{  public String toFastA(){  return toFastA(false,0,0,getNumberOfSequences() - 1,getLength());}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  Relation targetRelation=utterance.getRelation(Relation.TARGET);  if (targetRelation == null) {    throw new IllegalStateException("DiphonePitchmarkGenerator: Target relation does not exist");  }  SampleInfo sampleInfo;  sampleInfo=(SampleInfo)utterance.getObject(SampleInfo.UTT_NAME);  if (sampleInfo == null) {    throw new IllegalStateException("DiphonePitchmarkGenerator: SampleInfo does not exist");  }  float pos, lpos=0, f0, m=0;  final float lf0=120;  double time=0;  int pitchMarks=0;  LPCResult lpcResult;  IntLinkedList timesList=new IntLinkedList();  for (Item targetItem=targetRelation.getHead(); targetItem != null; targetItem=targetItem.getNext()) {    FeatureSet featureSet=targetItem.getFeatures();    pos=featureSet.getFloat("pos");    f0=featureSet.getFloat("f0");    if (time == pos) {      continue;    }    m=(f0 - lf0) / pos;    for (; time < pos; pitchMarks++) {      time+=1 / (lf0 + (time * m));      timesList.add((int)(time * sampleInfo.getSampleRate()));    }  }  lpcResult=new LPCResult();  lpcResult.resizeFrames(pitchMarks);  pitchMarks=0;  int[] targetTimes=lpcResult.getTimes();  timesList.resetIterator();  for (; pitchMarks < targetTimes.length; pitchMarks++) {    targetTimes[pitchMarks]=timesList.nextInt();  }  utterance.setObject("target_lpcres",lpcResult);}  }
class C{  private Stream<String> resolve(String template,CSVReader reader) throws IOException {  String[] header=reader.readNext();  return partitionedStream(reader.iterator()).map(null).map(null);}  }
class C{  public static Vector3f interpolateCatmullRom(float u,float T,Vector3f p0,Vector3f p1,Vector3f p2,Vector3f p3){  Vector3f res=new Vector3f();  res.x=interpolateCatmullRom(u,T,p0.x,p1.x,p2.x,p3.x);  res.y=interpolateCatmullRom(u,T,p0.y,p1.y,p2.y,p3.y);  res.z=interpolateCatmullRom(u,T,p0.z,p1.z,p2.z,p3.z);  return res;}  }
class C{  ShimpleBody(Body body,Map options){  super(body.getMethod());  if (!(body instanceof JimpleBody || body instanceof ShimpleBody))   throw new RuntimeException("Cannot construct ShimpleBody from given Body type.");  if (Options.v().verbose())   G.v().out.println("[" + getMethod().getName() + "] Constructing ShimpleBody...");  this.options=new ShimpleOptions(options);  unitChain=new SPatchingChain(this,new HashChain());  importBodyContentsFrom(body);  sbb=new ShimpleBodyBuilder(this);  if (body instanceof ShimpleBody)   rebuild(true); else   rebuild(false);}  }
class C{  protected String toString(Vector values,int start,int length){  if (length == 0) {    return "";  }  if (length == 1) {    return String.valueOf(values.elementAt(start));  }  StringBuffer str=new StringBuffer();  for (int i=0; i < length; i++) {    if (i > 0) {      str.append(',');    }    str.append(values.elementAt(start + i));  }  return str.toString();}  }
class C{  @Override public String toString(){  return name;}  }
class C{  @Override public int compareTo(CopyJob _other){  SimpleCopyJob other=(SimpleCopyJob)_other;  if (highPriority != other.highPriority) {    return highPriority ? -1 : 1;  } else   if (ord < other.ord) {    return -1;  } else   if (ord > other.ord) {    return 1;  } else {    return 0;  }}  }
class C{  public static List<String> asStringList(Collection<? extends Object> objects){  List<String> list=new ArrayList<>();  for (  Object object : objects) {    list.add(String.valueOf(object));  }  return list;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static boolean nullEquals(String s1,String s2){  return (s1 == null ? s2 == null : s1.equals(s2));}  }
class C{  public void write(short u0,short u1,short u2,short u3){  write(u0);  write(u1);  write(u2);  write(u3);}  }
class C{  @Nullable protected Map<String,byte[]> generateBytecodes(String name) throws ClassNotFoundException {  if (this.iClassLoader.loadIClass(Descriptor.fromClassName(name)) == null)   return null;  Map<String,byte[]> bytecodes=new HashMap<String,byte[]>();  Set<UnitCompiler> compiledUnitCompilers=new HashSet<UnitCompiler>();  COMPILE_UNITS:   for (; ; ) {    for (    UnitCompiler uc : this.iClassLoader.getUnitCompilers()) {      if (!compiledUnitCompilers.contains(uc)) {        ClassFile[] cfs;        try {          cfs=uc.compileUnit(this.debugSource,this.debugLines,this.debugVars);        } catch (        CompileException ex) {          throw new ClassNotFoundException(ex.getMessage(),ex);        }        for (        ClassFile cf : cfs)         bytecodes.put(cf.getThisClassName(),cf.toByteArray());        compiledUnitCompilers.add(uc);        continue COMPILE_UNITS;      }    }    return bytecodes;  }}  }
class C{  public static byte[] CPQMessage(byte message){  PacketWriter pw=new PacketWriter();  pw.writeShort(SendPacketOpcode.MONSTER_CARNIVAL_MESSAGE.getValue());  pw.write(message);  return pw.getPacket();}  }
class C{  @Override public void onPreferenceSettingsChanged(SharedPreferences sharedPreferences,String name){  Toast.makeText(this,"preference with key " + name + " changed",Toast.LENGTH_LONG).show();}  }
class C{  public Dfp newInstance(final int x){  return new Dfp(getField(),x);}  }
class C{  public void invalidate(){  status=INVALID;}  }
class C{  public SegmentNode addNewFigure(int code,RectangleNode pnew){  SegmentNode p;  if (checkRedundancy(code,pnew))   return null;  filterOutDuplicates(code,pnew);  if (code == GeometricManager.ONE_TO_ONE) {    p=getSegmentNode();    p.copySegment(pnew);  } else {    p=getRectangleNode();    ((RectangleNode)p).copyRectangle(pnew);  }  hasNewFigure=true;  p.next=header[code];  header[code]=p;  size[code]++;  return p;}  }
class C{  public static AztecCode encode(byte[] data){  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);}  }
class C{  public static Map<String,Object> discVirtualsWithDiscVariants(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  Locale locale=(Locale)context.get("locale");  String errMsg=null;  try {    EntityCondition conditionOne=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("isVariant",EntityOperator.EQUALS,"Y"),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.NOT_EQUAL,null),EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.LESS_THAN_EQUAL_TO,nowTimestamp)),EntityOperator.AND);    EntityListIterator eliOne=EntityQuery.use(delegator).from("Product").where(conditionOne).queryIterator();    GenericValue productOne=null;    int numSoFarOne=0;    while ((productOne=eliOne.next()) != null) {      String virtualProductId=ProductWorker.getVariantVirtualId(productOne);      GenericValue virtualProduct=EntityQuery.use(delegator).from("Product").where("productId",virtualProductId).queryOne();      if (virtualProduct == null) {        continue;      }      List<GenericValue> passocList=EntityQuery.use(delegator).from("ProductAssoc").where("productId",virtualProductId,"productIdTo",productOne.get("productId"),"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();      if (passocList.size() > 0) {        for (        GenericValue passoc : passocList) {          passoc.set("thruDate",nowTimestamp);          passoc.store();        }        numSoFarOne++;        if (numSoFarOne % 500 == 0) {          Debug.logInfo("Expired variant ProductAssocs for " + numSoFarOne + " sales discontinued variant products.",module);        }      }    }    eliOne.close();    EntityCondition condition=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("isVirtual",EntityOperator.EQUALS,"Y"),EntityCondition.makeCondition(EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp))),EntityOperator.AND);    EntityListIterator eli=EntityQuery.use(delegator).from("Product").where(condition).queryIterator();    GenericValue product=null;    int numSoFar=0;    while ((product=eli.next()) != null) {      List<GenericValue> passocList=EntityQuery.use(delegator).from("ProductAssoc").where("productId",product.get("productId"),"productAssocTypeId","PRODUCT_VARIANT").filterByDate().queryList();      if (passocList.size() == 0) {        product.set("salesDiscontinuationDate",nowTimestamp);        delegator.store(product);        numSoFar++;        if (numSoFar % 500 == 0) {          Debug.logInfo("Sales discontinued " + numSoFar + " virtual products that have no valid variants.",module);        }      }    }    eli.close();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productutilservices.entity_error_running_discVirtualsWithDiscVariants",messageMap,locale);    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  return ServiceUtil.returnSuccess();}  }
class C{  void deleteNode(){  vertex.edges(Direction.BOTH).forEachRemaining(null);  mindmapsGraph.getConceptLog().removeConcept(this);  vertex.remove();  vertex=null;}  }
class C{  @Override public void ttfValueUpdated(){  setCachedExpression(generateExpression());  checkSymbolIsValid();  FieldConfigBase parent=getParent();  if (parent != null) {    parent.valueUpdated();  }}  }
class C{  @Deprecated public String catalogClassName(){  return getCatalogClassName();}  }
class C{  public MetricInstance withName(String metricName){  return new MetricInstance(metricName,maker,dependencyMetricNames.toArray(new String[dependencyMetricNames.size()]));}  }
class C{  public ActivateReferencesWindow waitToBeDisplayed(){  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(currentScope));  return this;}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j,boolean pureBarcode){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ) && (!pureBarcode || crossCheckDiagonal((int)centerI,(int)centerJ,stateCount[2],stateCountTotal))) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  public HeadRule(String dir,String rule){  String[] tmp=P_TAGSETS.split(rule);  int i, size=tmp.length;  b_r2l=dir.equals(DIR_RIGHT_TO_LEFT);  a_tagSets=new HeadTagSet[size];  for (i=0; i < size; i++)   a_tagSets[i]=new HeadTagSet(tmp[i]);}  }
class C{  public String exec(MethodContext methodContext) throws MiniLangException {  if (methodContext.isTraceOn()) {    outputTraceMessage(methodContext,"Begin simple-method. Script is running as " + (methodContext.getMethodType() == MethodContext.EVENT ? "an event." : "a service."));  }  Locale locale=methodContext.getLocale();  GenericValue userLogin=methodContext.getUserLogin();  if (loginRequired) {    if (userLogin == null) {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("shortDescription",shortDescription);      String errMsg=UtilProperties.getMessage(SimpleMethod.err_resource,"simpleMethod.must_logged_process",messageMap,locale) + ".";      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"login-required attribute set to \"true\" but UserLogin GenericValue was not found, returning error message:",errMsg);      }      return returnError(methodContext,errMsg);    }  }  if (userLogin != null) {    methodContext.putEnv(getUserLoginEnvName(),userLogin);  }  methodContext.putEnv("nullField",GenericEntity.NULL_FIELD);  methodContext.putEnv(getDelegatorEnvName(),methodContext.getDelegator());  methodContext.putEnv(getSecurityEnvName(),methodContext.getSecurity());  methodContext.putEnv(getDispatcherEnvName(),methodContext.getDispatcher());  methodContext.putEnv("locale",locale);  methodContext.putEnv(getParameterMapName(),methodContext.getParameters());  if (methodContext.getMethodType() == MethodContext.EVENT) {    methodContext.putEnv(eventRequestName,methodContext.getRequest());    methodContext.putEnv(eventSessionName,methodContext.getRequest().getSession());    methodContext.putEnv(eventResponseName,methodContext.getResponse());  }  methodContext.putEnv("simpleMethod",this);  methodContext.putEnv("methodName",this.getMethodName());  methodContext.putEnv("methodShortDescription",this.getShortDescription());  boolean beganTransaction=false;  if (useTransaction) {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"use-transaction attribute set to \"true\", beginning transaction.");    }    try {      beganTransaction=TransactionUtil.begin();    } catch (    GenericTransactionException e) {      String errMsg=UtilProperties.getMessage(SimpleMethod.err_resource,"simpleMethod.error_begin_transaction",locale) + ": " + e.getMessage();      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"An exception was thrown while beginning a transaction, returning error message:",errMsg);      }      return returnError(methodContext,errMsg);    }  }  String errorMsg="";  boolean finished=false;  try {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"Begin running sub-elements.");    }    finished=runSubOps(methodOperations,methodContext);  } catch (  Throwable t) {    String errMsg=UtilProperties.getMessage(SimpleMethod.err_resource,"simpleMethod.error_running",locale) + ": " + t.getMessage();    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"An exception was thrown while running sub-elements, error message was:",errMsg);    }    finished=false;    errorMsg+=errMsg;  }  if (methodContext.isTraceOn()) {    outputTraceMessage(methodContext,"End running sub-elements.");  }  String returnValue=null;  String response=null;  StringBuilder summaryErrorStringBuffer=new StringBuilder();  if (methodContext.getMethodType() == MethodContext.EVENT) {    boolean forceError=false;    String tempErrorMsg=(String)methodContext.getEnv(eventErrorMessageName);    if (errorMsg.length() > 0 || UtilValidate.isNotEmpty(tempErrorMsg)) {      errorMsg+=tempErrorMsg;      methodContext.getRequest().setAttribute("_ERROR_MESSAGE_",errorMsg);      forceError=true;      summaryErrorStringBuffer.append(errorMsg);    }    List<Object> tempErrorMsgList=UtilGenerics.checkList(methodContext.getEnv(eventErrorMessageListName));    if (UtilValidate.isNotEmpty(tempErrorMsgList)) {      methodContext.getRequest().setAttribute("_ERROR_MESSAGE_LIST_",tempErrorMsgList);      forceError=true;      summaryErrorStringBuffer.append("; ");      summaryErrorStringBuffer.append(tempErrorMsgList.toString());    }    String eventMsg=(String)methodContext.getEnv(eventEventMessageName);    if (UtilValidate.isNotEmpty(eventMsg)) {      methodContext.getRequest().setAttribute("_EVENT_MESSAGE_",eventMsg);    }    List<String> eventMsgList=UtilGenerics.checkList(methodContext.getEnv(eventEventMessageListName));    if (UtilValidate.isNotEmpty(eventMsgList)) {      methodContext.getRequest().setAttribute("_EVENT_MESSAGE_LIST_",eventMsgList);    }    response=(String)methodContext.getEnv(eventResponseCodeName);    if (UtilValidate.isEmpty(response)) {      if (forceError) {        Debug.logInfo("No response code string found, but error messages found so assuming error; returning code [" + defaultErrorCode + "]",module);        response=defaultErrorCode;      } else {        Debug.logInfo("No response code string or errors found, assuming success; returning code [" + defaultSuccessCode + "]",module);        response=defaultSuccessCode;      }    } else     if ("null".equalsIgnoreCase(response)) {      response=null;    }    returnValue=response;  } else {    boolean forceError=false;    String tempErrorMsg=(String)methodContext.getEnv(serviceErrorMessageName);    if (errorMsg.length() > 0 || UtilValidate.isNotEmpty(tempErrorMsg)) {      errorMsg+=tempErrorMsg;      methodContext.putResult(ModelService.ERROR_MESSAGE,errorMsg);      forceError=true;      summaryErrorStringBuffer.append(errorMsg);    }    List<Object> errorMsgList=UtilGenerics.checkList(methodContext.getEnv(serviceErrorMessageListName));    if (UtilValidate.isNotEmpty(errorMsgList)) {      methodContext.putResult(ModelService.ERROR_MESSAGE_LIST,errorMsgList);      forceError=true;      summaryErrorStringBuffer.append("; ");      summaryErrorStringBuffer.append(errorMsgList.toString());    }    Map<String,Object> errorMsgMap=UtilGenerics.checkMap(methodContext.getEnv(serviceErrorMessageMapName));    if (UtilValidate.isNotEmpty(errorMsgMap)) {      methodContext.putResult(ModelService.ERROR_MESSAGE_MAP,errorMsgMap);      forceError=true;      summaryErrorStringBuffer.append("; ");      summaryErrorStringBuffer.append(errorMsgMap.toString());    }    String successMsg=(String)methodContext.getEnv(serviceSuccessMessageName);    if (UtilValidate.isNotEmpty(successMsg)) {      methodContext.putResult(ModelService.SUCCESS_MESSAGE,successMsg);    }    List<Object> successMsgList=UtilGenerics.checkList(methodContext.getEnv(serviceSuccessMessageListName));    if (UtilValidate.isNotEmpty(successMsgList)) {      methodContext.putResult(ModelService.SUCCESS_MESSAGE_LIST,successMsgList);    }    response=(String)methodContext.getEnv(serviceResponseMessageName);    if (UtilValidate.isEmpty(response)) {      if (forceError) {        Debug.logVerbose("No response code string found, but error messages found so assuming error; returning code [" + defaultErrorCode + "]",module);        response=defaultErrorCode;      } else {        Debug.logVerbose("No response code string or errors found, assuming success; returning code [" + defaultSuccessCode + "]",module);        response=defaultSuccessCode;      }    }    methodContext.putResult(ModelService.RESPONSE_MESSAGE,response);    returnValue=response;  }  boolean doCommit=true;  if (!finished && defaultErrorCode.equals(response)) {    doCommit=false;  }  if (doCommit) {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"Begin commit transaction.");    }    try {      TransactionUtil.commit(beganTransaction);    } catch (    GenericTransactionException e) {      String errMsg="Error trying to commit transaction, could not process method: " + e.getMessage();      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"An exception was thrown while committing a transaction, returning error message:",errMsg);      }      errorMsg+=errMsg;    }  } else {    if (methodContext.isTraceOn()) {      outputTraceMessage(methodContext,"Begin roll back transaction.");    }    try {      TransactionUtil.rollback(beganTransaction,"Error in simple-method [" + this.getShortDescription() + "]: "+ summaryErrorStringBuffer,null);    } catch (    GenericTransactionException e) {      String errMsg="Error trying to rollback transaction, could not process method: " + e.getMessage();      if (methodContext.isTraceOn()) {        outputTraceMessage(methodContext,"An exception was thrown while rolling back a transaction, returning error message:",errMsg);      }      errorMsg+=errMsg;    }  }  if (methodContext.isTraceOn()) {    outputTraceMessage(methodContext,"End simple-method.");  }  return returnValue;}  }
class C{  public static boolean audit(){  return audit.get() == null ? true : audit.get();}  }
class C{  public static void stopTiming(String timePhaseName){  TimedPhase timePhase=RLOG.get().times.get(timePhaseName);  if (timePhase == null) {    LOG.warn("Tried to stop non-existent phase: {}",timePhaseName);    return;  }  timePhase.stop();}  }
class C{  public ChromeWindow(ChromeActivity activity){  super(activity);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_WHISPER_REFUSE(String value0){  return new SM_SYSTEM_MESSAGE(1300629,value0);}  }
class C{  public boolean isClassDirectSubclassOf(SootClass c,SootClass c2){  throw new RuntimeException("Not implemented yet!");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201135,value0);}  }
class C{  public GroupsIsMemberQueryWithUserIds isMember(String groupId,List<Integer> userIds){  return new GroupsIsMemberQueryWithUserIds(getClient(),groupId,userIds);}  }
class C{  private final static byte hibyte(int val){  return (byte)(val >>> 8);}  }
class C{  public void clear(){  currentOutput="";  accruedInput.setLength(0);  accruedInputWithoutFormatting.setLength(0);  formattingTemplate.setLength(0);  lastMatchPosition=0;  currentFormattingPattern="";  prefixBeforeNationalNumber.setLength(0);  extractedNationalPrefix="";  nationalNumber.setLength(0);  ableToFormat=true;  inputHasFormatting=false;  positionToRemember=0;  originalPosition=0;  isCompleteNumber=false;  isExpectingCountryCallingCode=false;  possibleFormats.clear();  shouldAddSpaceAfterNationalPrefix=false;  if (!currentMetadata.equals(defaultMetadata)) {    currentMetadata=getMetadataForRegion(defaultCountry);  }}  }
class C{  private void executeMacroReal(Appendable writer,String macroName,Map<String,Object> macroParameters) throws IOException, TemplateException {  StringBuilder sb=new StringBuilder("<@");  sb.append(macroName);  if (macroParameters != null) {    for (    Map.Entry<String,Object> parameter : macroParameters.entrySet()) {      sb.append(' ');      sb.append(parameter.getKey());      sb.append("=");      Object value=parameter.getValue();      if (value instanceof String) {        sb.append(ftlFmt.makeStringLiteral((String)value));      } else {        sb.append(value);      }    }  }  sb.append(" />");  if (Debug.verboseOn()) {    Debug.logVerbose("Executing macro: " + sb,module);  }  executeMacro(writer,sb.toString());}  }
class C{  private Vector2D create(){  final double t=randomDataGenerator.nextUniform(0,MathUtils.TWO_PI);  final double pX=randomDataGenerator.nextNormal(x,xSigma) + radius * FastMath.cos(t);  final double pY=randomDataGenerator.nextNormal(y,ySigma) + radius * FastMath.sin(t);  return new Vector2D(pX,pY);}  }
class C{  public static int count(String string,String mark){  if (!TextUtils.isEmpty(string) && !TextUtils.isEmpty(mark)) {    int count=0;    int index=string.indexOf(mark);    while (index != -1) {      count++;      string=string.substring(index + mark.length());      index=string.indexOf(mark);    }    return count;  }  return 0;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static void deleteTask(Context context,long taskId){  Intent intent=new Intent(context,NagboxService.class);  intent.setAction(ACTION_DELETE_TASK);  intent.putExtra(EXTRA_TASK_ID,taskId);  context.startService(intent);}  }
class C{  protected void securityCheck(){  ConfigService configService=ConfigServiceFactory.getConfigService(configManagerType,jdbcRef);  String on=configService.getProperty(LionKey.getDatabaseSecuritySwitchKey());  if ("true".equalsIgnoreCase(on)) {    String database=jdbcRef;    int pos=jdbcRef.indexOf('.');    if (pos > 0) {      database=jdbcRef.substring(0,pos);    }    String property=configService.getProperty(LionKey.getDatabaseSecurityConfigKey(database));    if (StringUtils.isNotBlank(property)) {      String appName=AppPropertiesUtils.getAppName();      if (!property.contains(appName)) {        throw new ZebraException("Access deny ! Your app is not allowed to access this database, please register your app on http://zebra.dp/");      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GenericMethodDecl fullCopy(){  GenericMethodDecl tree=(GenericMethodDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void showAnnotations(ISVNRemoteFile svnFile,Collection svnAnnotateBlocks,InputStream contents,boolean useHistoryView) throws PartInitException {  disconnect();  Control[] oldChildren=top.getChildren();  if (oldChildren != null) {    for (int i=0; i < oldChildren.length; i++) {      oldChildren[i].dispose();    }  }  viewer=new ListViewer(top,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL);  viewer.setContentProvider(new ArrayContentProvider());  viewer.setLabelProvider(new LabelProvider());  viewer.addSelectionChangedListener(this);  viewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));  PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(),IHelpContextIds.ANNOTATIONS_VIEW);  top.layout();  this.svnFile=svnFile;  this.contents=contents;  this.svnAnnotateBlocks=svnAnnotateBlocks;  page=SVNUIPlugin.getActivePage();  viewer.setInput(svnAnnotateBlocks);  editor=(ITextEditor)openEditor();  IDocumentProvider provider=editor.getDocumentProvider();  document=provider.getDocument(editor.getEditorInput());  setPartName(Policy.bind("SVNAnnotateView.showFileAnnotation",new Object[]{svnFile.getName()}));  setTitleToolTip(svnFile.getName());  if (!useHistoryView) {    return;  }  historyView=(IHistoryView)page.showView(ISVNUIConstants.HISTORY_VIEW_ID);  if (historyView != null) {    historyView.showHistoryFor(svnFile);  }}  }
class C{  public UpdateScan open(){  return new TableScan(ti,tx);}  }
class C{  public String syllabify(String phones){  Syllabifier sfr=new Syllabifier(this.allophoneSet,this.removeTrailingOneFromPhones);  return sfr.syllabify(phones);}  }
class C{  public void inflateDefaultOverlappingViews(){  if (!mAreDefaultViewsInflated) {    mAreDefaultViewsInflated=true;    Context context=getContext();    mErrorView=new ErrorView(context);    mLoadingView=new LoadingView(context);    mNoConnectionView=new NoConnectionView(context);    mSuccessView=new SuccessView(context);    mErrorView.setVisibility(GONE);    mLoadingView.setVisibility(GONE);    mNoConnectionView.setVisibility(GONE);    mSuccessView.setVisibility(GONE);    addOverlappingView(mErrorView);    addOverlappingView(mLoadingView);    addOverlappingView(mNoConnectionView);    addOverlappingView(mSuccessView);    if (mInitialViewId != NONE_VIEW) {switch (mInitialViewId) {case SUCCESS_VIEW:        showSuccess();      break;case ERROR_VIEW:    showErrorMessage();  break;case NO_CONNECTION_VIEW:showNoConnection();break;case LOADING_VIEW:showLoading();break;default :break;}}}}  }
class C{  @Override public void run(){  clusterCache.acquireWriteLockOnKey(LAST_ALIVE_TIMER_CHECK_LONG);  try {    Long lastCheck=(Long)clusterCache.getCopy(LAST_ALIVE_TIMER_CHECK_LONG);    if (System.currentTimeMillis() - lastCheck.longValue() < 9000) {      LOGGER.debug("Skipping alive check as already performed.");    } else {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("run() : checking alive timers ... ");      }      short aliveDownCount=0;      try {        for (        Long currentId : aliveTimerCache.getKeys()) {          AliveTimer aliveTimerCopy=null;          boolean aliveExpiration=false;          aliveTimerCopy=aliveTimerCache.getCopy(currentId);          if (aliveTimerCopy.isActive()) {            if (aliveTimerFacade.hasExpired(currentId)) {              aliveTimerFacade.stop(currentId);              aliveExpiration=true;              aliveDownCount++;            }          } else {            aliveDownCount++;          }          if (aliveExpiration) {            onAliveTimerExpiration(currentId);          }        }        if (!alarmActive && aliveDownCount > WARNING_THRESHOLD) {          alarmActive=true;          SMS_LOGGER.warn("Over " + WARNING_THRESHOLD + " DAQ/Equipment are currently down.");        } else         if (alarmActive && warningSwitchOffCountDown.decrementAndGet() == 0) {          SMS_LOGGER.warn("DAQ/Equipment status back to normal (" + aliveDownCount + " detected as down)");          alarmActive=false;          warningSwitchOffCountDown=new AtomicInteger(SWITCH_OFF_COUNTDOWN);        }      } catch (      CacheElementNotFoundException cacheEx) {        LOGGER.warn("Failed to locate alive timer in cache on expiration check (may happen exceptionally if just removed).",cacheEx);      }catch (      Exception e) {        LOGGER.error("Unexpected exception when checking the alive timers",e);      }      lastCheck=Long.valueOf(System.currentTimeMillis());      clusterCache.put(LAST_ALIVE_TIMER_CHECK_LONG,lastCheck);      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("run() : finished checking alive timers ... ");      }    }  }  finally {    clusterCache.releaseWriteLockOnKey(LAST_ALIVE_TIMER_CHECK_LONG);  }}  }
class C{  public ApplicationSnapshot(File directory,Storage storage){  super(directory,ApplicationSnapshotsSupport.getInstance().getCategory());  this.storage=storage;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200743,skillcaster,skillname);}  }
class C{  public static String escapeQuotedSwitch(String value){  return value.replaceAll("'","'\"'\"'");}  }
class C{  private Constants(){}  }
class C{  @Override public Expression createExpression(FunctionName functionName){  if (functionName == null) {    return null;  }  List<Expression> parameters=null;  Literal fallback=null;  Function function=functionFactory.function(functionName.getFunctionName(),parameters,fallback);  return function;}  }
class C{  @Override public void close(){}  }
class C{  public String toString(){  return "CMUVoice";}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParSuperConstructorAccess fullCopy(){  ParSuperConstructorAccess tree=(ParSuperConstructorAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void removeSliderAt(int position){  if (getRealAdapter() != null) {    getRealAdapter().removeSliderAt(position);    mViewPager.setCurrentItem(mViewPager.getCurrentItem(),false);  }}  }
class C{  private void sendValueWithTimeDeadbandCheck(final SourceDataTag sourceDataTag,final ValueUpdate castedUpdate,final SourceDataTagQuality newSDQuality){  if (sourceDataTag.getAddress().isTimeDeadbandEnabled()) {    this.equipmentLogger.debug("sendInvalidTag - passing update to time-deadband scheduler for tag " + sourceDataTag.getId());    this.equipmentTimeDeadband.addToTimeDeadband(sourceDataTag,castedUpdate,newSDQuality);  } else {    if (this.equipmentTimeDeadband.getSdtTimeDeadbandSchedulers().containsKey(sourceDataTag.getId())) {      this.equipmentLogger.debug("sendInvalidTag - remove time-deadband scheduler for tag " + sourceDataTag.getId());      this.equipmentTimeDeadband.removeFromTimeDeadband(sourceDataTag);    }    this.equipmentLogger.debug(format("sendInvalidTag - invalidating and sending invalid tag (%d) update to the server",sourceDataTag.getId()));    SourceDataTagValue newSDValue=sourceDataTag.update(castedUpdate,newSDQuality);    if (newSDValue == null) {      this.equipmentLogger.warn("sendInvalidTag - method called with 0(OK) quality code for tag " + sourceDataTag.getId() + ". This should normally not happen! sendTagFiltered() method should have been called before.");    } else {      this.processMessageSender.addValue(newSDValue);      this.dynamicTimeDeadbandFilterer.recordTag(sourceDataTag);    }  }}  }
class C{  public boolean hasGroups(){  for (  String sampleName : sampleOrder) {    if (getGroupId(sampleName) != null)     return true;  }  return false;}  }
class C{  public ElasticListView enableUpdateHeader(boolean enable) throws IllegalStateException {  if (enable) {    if (!mEnableUpdater) {      if (getHeaderViewsCount() > 0) {        throw new IllegalStateException("Make sure there is no " + "other headers in ListView before enable update header");      }      super.addHeaderView(mUpdateHeader,null,true);    }  } else {    if (mEnableUpdater) {      removeHeaderView(mUpdateHeader);    }  }  mEnableUpdater=enable;  return this;}  }
class C{  public void saveLegendImage(BufferedImage image,String extension,File fileToSave){  try {    saveGridImage(image,extension,fileToSave,legendOptionData.getDpi());  } catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);  }}  }
class C{  public Trap newTrap(SootClass exception,Unit beginUnit,Unit endUnit,Unit handlerUnit){  return new BTrap(exception,beginUnit,endUnit,handlerUnit);}  }
class C{  public void enqueueBlocked(E o){  try {    this.execute(new TaskWrapper<E>(o,_consumerObject));  } catch (  RejectedExecutionException ree) {    if (_logger.isLoggable(Level.INFO)) {      _logger.log(Level.INFO,"Task cannot be accepted for execution.",ree);    }  }}  }
class C{  private void tabCreatedInBackground(int id,int sourceId,boolean newIsIncognito,float originX,float originY){  LayoutTab newLayoutTab=createLayoutTab(id,newIsIncognito,NO_CLOSE_BUTTON,NEED_TITLE);  assert mLayoutTabs.length == 1;  LayoutTab sourceLayoutTab=mLayoutTabs[0];  mLayoutTabs=new LayoutTab[]{sourceLayoutTab,newLayoutTab};  updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id,sourceId)));  forceAnimationToFinish();  newLayoutTab.setBorderAlpha(0.0f);  final float scale=StackAnimation.SCALE_AMOUNT;  final float margin=Math.min(getWidth(),getHeight()) * (1.0f - scale) / 2.0f;  addToAnimation(sourceLayoutTab,LayoutTab.Property.SCALE,1.0f,scale,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.X,0.0f,margin,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.Y,0.0f,margin,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_SCALE,1.0f / scale,1.0f,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_ALPHA,0.0f,1.0f,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.TRANSFORM_CURVE);  float pauseX=margin;  float pauseY=margin;  if (getOrientation() == Orientation.PORTRAIT) {    pauseY=BACKGROUND_COVER_PCTG * getHeight();  } else {    pauseX=BACKGROUND_COVER_PCTG * getWidth();  }  addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,0.0f,1.0f,BACKGROUND_STEP1_DURATION / 2,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.SCALE,0.f,scale,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.X,originX,pauseX,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.Y,originY,pauseY,BACKGROUND_STEP1_DURATION,0,false,BakedBezierInterpolator.FADE_IN_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.SCALE,scale,1.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.X,margin,0.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.Y,margin,0.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_SCALE,1.0f,1.0f / scale,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(sourceLayoutTab,LayoutTab.Property.BORDER_ALPHA,1.0f,0.0f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.TRANSFORM_CURVE);  addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,1.f,0.f,BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.FADE_OUT_CURVE);  if (getOrientation() == Orientation.PORTRAIT) {    addToAnimation(newLayoutTab,LayoutTab.Property.Y,pauseY,getHeight(),BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.FADE_OUT_CURVE);  } else {    addToAnimation(newLayoutTab,LayoutTab.Property.X,pauseX,getWidth(),BACKGROUND_STEP3_DURATION,BACKGROUND_STEP3_START,true,BakedBezierInterpolator.FADE_OUT_CURVE);  }  mTabModelSelector.selectModel(newIsIncognito);  startHiding(sourceId,false);}  }
class C{  public UseItemXpBoostResponse useLuckyEgg() throws RemoteServerException, LoginFailedException {  UseItemXpBoostMessage xpMsg=UseItemXpBoostMessage.newBuilder().setItemId(ItemId.ITEM_LUCKY_EGG).build();  ServerRequest req=new ServerRequest(RequestType.USE_ITEM_XP_BOOST,xpMsg);  api.getRequestHandler().sendServerRequests(req);  try {    UseItemXpBoostResponse response=UseItemXpBoostResponse.parseFrom(req.getData());    Log.i("Main","Use incense result: " + response.getResult());    return response;  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }}  }
class C{  @Override @Transactional(value="cacheTransactionManager") public ProcessChange doCreateDataTag(final ConfigurationElement element) throws IllegalAccessException {  checkId(element.getEntityId());  tagCache.acquireWriteLockOnKey(element.getEntityId());  try {    LOGGER.trace("Creating DataTag " + element.getEntityId());    DataTag dataTag=(DataTag)commonTagFacade.createCacheObject(element.getEntityId(),element.getElementProperties());    try {      configurableDAO.insert(dataTag);    } catch (    Exception e) {      LOGGER.error("Exception caught while inserting a new DataTag into the DB - rolling back changes",e);      throw new UnexpectedRollbackException("Unexpected exception while creating a DataTag: rolling back the change",e);    }    try {      tagCache.putQuiet(dataTag);      if (dataTag.getEquipmentId() != null) {        DataTagAdd dataTagAdd=new DataTagAdd(element.getSequenceId(),dataTag.getEquipmentId(),((DataTagFacade)commonTagFacade).generateSourceDataTag(dataTag));        return new ProcessChange(equipmentFacade.getProcessIdForAbstractEquipment(dataTag.getEquipmentId()),dataTagAdd);      }      if (dataTag.getSubEquipmentId() != null) {        DataTagAdd dataTagAdd=new DataTagAdd(element.getSequenceId(),subEquipmentFacade.getEquipmentIdForSubEquipment(dataTag.getSubEquipmentId()),((DataTagFacade)commonTagFacade).generateSourceDataTag(dataTag));        return new ProcessChange(subEquipmentFacade.getProcessIdForAbstractEquipment(dataTag.getSubEquipmentId()),dataTagAdd);      }      throw new IllegalArgumentException("No (sub)equipment id set in datatag (" + dataTag.getId() + ") configuration.");    } catch (    Exception ex) {      LOGGER.error("Exception caught when attempting to create a DataTag - rolling back the DB transaction and undoing cache changes.");      tagCache.remove(dataTag.getId());      throw new UnexpectedRollbackException("Unexpected exception while creating a DataTag: rolling back the change",ex);    }  }  finally {    tagCache.releaseWriteLockOnKey(element.getEntityId());  }}  }
class C{  public static boolean checkStartConditions(QuestEnv env,boolean warn){  try {    return checkStartConditionsImpl(env,warn);  } catch (  Exception ex) {    log.error("QE: exception in checkStartCondition",ex);  }  return false;}  }
class C{  public void clearGroups(){  groups.clear();}  }
class C{  private EncryptedProperties(String password){  PBEParameterSpec ps=new javax.crypto.spec.PBEParameterSpec(salt,20);  SecretKeyFactory kf;  try {    kf=SecretKeyFactory.getInstance("PBEWithMD5AndDES");    SecretKey k=kf.generateSecret(new javax.crypto.spec.PBEKeySpec(password.toCharArray()));    encrypter=Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");    decrypter=Cipher.getInstance("PBEWithMD5AndDES/CBC/PKCS5Padding");    encrypter.init(Cipher.ENCRYPT_MODE,k,ps);    decrypter.init(Cipher.DECRYPT_MODE,k,ps);  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }catch (  NoSuchPaddingException e) {    e.printStackTrace();  }catch (  InvalidKeySpecException e) {    e.printStackTrace();  }catch (  InvalidKeyException e) {    e.printStackTrace();  }catch (  InvalidAlgorithmParameterException e) {    e.printStackTrace();  }}  }
class C{  public void leftClick(int delay) throws InterruptedException {  click(InputEvent.BUTTON1_MASK,delay);}  }
class C{  @Override public void onErrorResponse(VolleyError error){  Toast.makeText(HurlGsonActivity.this,error != null && error.getMessage() != null ? error.getMessage() : "No error message",Toast.LENGTH_LONG).show();  Log.d("GsonRequest",error != null && error.getMessage() != null ? error.getMessage() : "No error message");}  }
class C{  public static boolean testSaveLocationExists(){  String sDCardStatus=Environment.getExternalStorageState();  boolean status;  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {    status=true;  } else {    status=false;  }  return status;}  }
class C{  @deprecated protected int write(int offset,int length){  int newLength=this.charsLength + length;  ensureCapacity(newLength);  this.charsLength=newLength;  int charsOffset=this.chars.length - this.charsLength;  while (length > 0) {    this.chars[(charsOffset++)]=this.strings.charAt(offset++);    length--;  }  return this.charsLength;}  }
class C{  public boolean contains(Object o){  return elementSet.contains(o);}  }
class C{  public static boolean isCurrentParent(List<? extends IdentifiableObject> objects){  for (  IdentifiableObject object : objects) {    if (object != null && object instanceof OrganisationUnit && ((OrganisationUnit)object).isCurrentParent()) {      return true;    }  }  return false;}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  @Override protected void doPostDbLoading(SubEquipment subEquipment){  Equipment parent=equipmentCache.get(subEquipment.getParentId());  Long processId=parent.getProcessId();  if (processId == null) {    throw new NullPointerException(String.format("Equipment %s (%d) has no associated Process id - this should never happen!",parent.getName(),parent.getId()));  }  Long aliveTagId=subEquipment.getAliveTagId();  if (aliveTagId != null) {    ControlTag aliveTagCopy=controlCache.getCopy(aliveTagId);    if (aliveTagCopy != null) {      setSubEquipmentId((ControlTagCacheObject)aliveTagCopy,subEquipment.getId(),processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Alive tag (#%d) found for Sub-Equipment %s (#%d).",aliveTagId,subEquipment.getName(),subEquipment.getId()));    }  }  Long commFaultTagId=subEquipment.getCommFaultTagId();  if (commFaultTagId != null) {    ControlTag commFaultTagCopy=controlCache.getCopy(commFaultTagId);    if (commFaultTagCopy != null) {      setSubEquipmentId((ControlTagCacheObject)commFaultTagCopy,subEquipment.getId(),processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No CommFault tag (%s) found for sub-equipment #%d (%s).",commFaultTagId,subEquipment.getId(),subEquipment.getName()));    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No CommFault tag for Sub-Equipment %s (#%d) defined.",subEquipment.getName(),subEquipment.getId()));  }  Long statusTagId=subEquipment.getStateTagId();  if (statusTagId != null) {    ControlTag statusTagCopy=controlCache.getCopy(statusTagId);    if (statusTagCopy != null) {      setSubEquipmentId((ControlTagCacheObject)statusTagCopy,subEquipment.getId(),processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag (%s) found for Sub-Equipment %s (#%d).",statusTagId,subEquipment.getName(),subEquipment.getId()));    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag for Sub-Equipment %s (#%d) defined.",subEquipment.getName(),subEquipment.getId()));  }}  }
class C{  public RenderUpdate(float partialTicks){  this.partialTicks=partialTicks;}  }
class C{  public static String clearEnsureCart(HttpServletRequest request,HttpServletResponse response){  String result;  result=clearCart(request,response);  if (!"success".equals(result)) {    return "error";  }  ShoppingCart cart=getCartObject(request);  if (cart == null) {    return "error";  }  return "success";}  }
class C{  public DOMInputImpl(String publicId,String systemId,String baseSystemId,Reader charStream,String encoding){  fPublicId=publicId;  fSystemId=systemId;  fBaseSystemId=baseSystemId;  fCharStream=charStream;  fEncoding=encoding;}  }
class C{  private final void raise(IOException exception) throws JMSException {  JMSException error=new JMSException(exception.toString());  error.setLinkedException(exception);  throw error;}  }
class C{  public static boolean isEmpty(final File file,final Charset charset) throws IOException {  boolean empty=false;  BufferedReader reader=null;  boolean threw=true;  try {    reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),charset));    final String line=reader.readLine();    empty=line == null;    threw=false;  }  finally {    Closeables.close(reader,threw);  }  return empty;}  }
class C{  @ObjectiveCName("isDiscardAck:") private boolean isDiscardAck(Message message){  Event event=Event.getEvent(message.data[0]);  if (event == Event.MESSAGE_DENIED && Actions.getAction(message.data[2]) == Actions.DELETE) {    return true;  }  Actions action=Actions.getAction(message.data[0]);  return action == Actions.DELETE || action == Actions.UNSUBSCRIBE;}  }
class C{  @Override public void close(){}  }
class C{  public static SortedMap<EnumSet<HashSupport>,HashProvider> search(HashParameters params,EnumSet<HashSupport> required){  final SortedMap<EnumSet<HashSupport>,HashProvider> result=new TreeMap<>(new HashSupport.SetComparator());  for (  final HashProvider provider : ALL_PROVIDERS) {    final EnumSet<HashSupport> support=provider.querySupport(params);    if (support.containsAll(required))     result.put(support,provider);  }  return result;}  }
class C{  public void addOperationListener(OnRemoteOperationListener listener,Handler callbackHandler){synchronized (mBoundListeners) {    mBoundListeners.put(listener,callbackHandler);  }}  }
class C{  public static void unregisterSpaceMBean(String spaceName,String containerName){  if (m_MBeanServer == null)   return;  try {    String fullSpaceName=JSpaceUtilities.createFullSpaceName(containerName,spaceName);    ObjectInstance objInst=m_MBeansRepository.remove(fullSpaceName);    if (objInst != null) {      m_MBeanServer.unregisterMBean(objInst.getObjectName());    }    objInst=m_MBeansRepository.remove(fullSpaceName + "Ext");    if (objInst != null) {      m_MBeanServer.unregisterMBean(objInst.getObjectName());    }    if (_logger.isLoggable(Level.CONFIG)) {      _logger.config("Space <" + containerName + ":"+ spaceName+ "> MBean was unregister successfully.");    }  } catch (  Exception ex) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,"Failed to unregister MBean for <" + containerName + ":"+ spaceName+ "> space.",ex);    }  }}  }
class C{  public MaxNTree(Timer timer,IScoreConverter converter){  this.sorter=new TreeNodeSorter<>(converter);  this.timer=timer;}  }
class C{  @Override public boolean accept(File file){  return file.isFile();}  }
class C{  public INDArray toBgr(InputStream inputStream){  try {    BufferedImage image=ImageIO.read(inputStream);    return toBgr(image);  } catch (  IOException e) {    throw new RuntimeException("Unable to load image",e);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("show histogram taxonId=");  int taxId=np.getInt();  np.matchIgnoreCase(";");  Document doc=getDir().getDocument();  int[] values=computeHistogram(taxId,doc);  System.err.println("Histogram for taxonId=" + taxId + ":");  for (  int value : values) {    System.err.println(value);  }}  }
class C{  public CountModifiers(){}  }
class C{  @Nullable public RestMethod addMethod(RestMethod method){  return methods.put(method.getRestMethodName(),method);}  }
class C{  public void onUpOrCancel(long time){  if (mModelSelectorButton.onUpOrCancel() && mTabModelSelector != null) {    getActiveStripLayoutHelper().finishAnimation();    if (!mModelSelectorButton.isVisible())     return;    mTabModelSelector.selectModel(!mTabModelSelector.isIncognitoSelected());    return;  }  getActiveStripLayoutHelper().onUpOrCancel(time);}  }
class C{  @Override public int read(byte[] bts,int st,int end) throws IOException {  int n=super.read(bts,st,end);  if (n != -1) {    branch.write(bts,st,n);  }  return n;}  }
class C{  @AndroidCoordinate public int height(){  return top + bottom;}  }
class C{  public AudioMoveToAlbumQuery moveToAlbum(UserActor actor,List<Integer> audioIds){  return new AudioMoveToAlbumQuery(getClient(),actor,audioIds);}  }
class C{  private static Integer[] newZeroedIntegerArray(int size){  Integer[] result=new Integer[size];  for (int i=0; i < size; i++)   result[i]=0;  return result;}  }
class C{  public Thread execute(OwnCloudClient client,FileDataStorageManager storageManager,OnRemoteOperationListener listener,Handler listenerHandler){  if (storageManager == null) {    throw new IllegalArgumentException("Trying to execute a sync operation " + "with a NULL storage manager");  }  mStorageManager=storageManager;  return super.execute(client,listener,listenerHandler);}  }
class C{  protected void populateStandardData(FeatureTypeStyle featureTypeStyle){  StandardData standardData=new StandardData();  if (featureTypeStyle != null) {    standardData.name=featureTypeStyle.getName();    standardData.description=featureTypeStyle.getDescription();  }  populateStandardData(standardData);}  }
class C{  private void checkHead(){  assert Thread.holdsLock(contents);  final Ticket oldHead=head;  if (contents.isEmpty())   head=null; else   head=(Ticket)contents.first();  if (head == oldHead)   return;  contents.notifyAll();}  }
class C{  public Builder maxColumn(String... columns){  return add(ReduceOp.Max,columns);}  }
class C{  protected SimilarityArray calcSimilarityMeasures(CategorizedFileEntry cfeCur,List dsModelSet,boolean bOutput,PrintStream pOut,Semaphore sSem,String sDocumentClass,String sEvaluatorClass,int NGramSize_Min,int NGramSize_Max,int Dmax,boolean bSilent){  if (pOut == null)   pOut=System.out;  SimilarityArray saRes=new SimilarityArray();  ILoadableTextPrint ndNDoc1=null;  try {    int iIdx=getConstructor(DocumentClass,3);    if (iIdx > -1)     ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax); else {      iIdx=getConstructor(DocumentClass,5);      ndNDoc1=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax,NGramSize_Min,NGramSize_Max);    }  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (ndNDoc1 == null)   return new SimilarityArray();  ndNDoc1.loadDataStringFromFile(cfeCur.getFileName());  SimilarityComparatorListener sdcNComparator=null;  try {    int iIdx=getConstructor(ComparatorClass,1);    if (iIdx > -1)     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClass).getConstructors()[iIdx].newInstance(1.0); else     sdcNComparator=(SimilarityComparatorListener)Class.forName(ComparatorClass).newInstance();  } catch (  IllegalArgumentException ex) {    ex.printStackTrace(System.err);  }catch (  SecurityException ex) {    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);  }catch (  InstantiationException ex) {    ex.printStackTrace(System.err);  }catch (  IllegalAccessException ex) {    ex.printStackTrace(System.err);  }catch (  InvocationTargetException ex) {    ex.printStackTrace(System.err);  }  if (sdcNComparator == null)   return new SimilarityArray();  Iterator iOtherIter=dsModelSet.iterator();  while (iOtherIter.hasNext()) {    CategorizedFileEntry cfeOther=(CategorizedFileEntry)iOtherIter.next();    String sSumName=new File(cfeOther.getFileName()).getName();    String sModelName=new File(cfeCur.getFileName()).getName();    if (sSumName.equals(sModelName)) {      if (!bSilent) synchronized (System.err) {        System.err.println("Ignoring identically named files:" + cfeOther.getFileName() + " , "+ cfeCur.getFileName());      }      continue;    }    if (!bSilent) synchronized (System.err) {      System.err.println("Comparing files:" + cfeOther.getFileName() + " , "+ cfeCur.getFileName());    }    ILoadableTextPrint ndNDoc2=null;synchronized (hModelCache) {      if (hModelCache.containsKey(cfeOther.getFileName()))       ndNDoc2=(ILoadableTextPrint)hModelCache.get(cfeOther.getFileName()); else {        try {          int iIdx=getConstructor(DocumentClass,3);          if (iIdx > -1)           ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax); else {            iIdx=getConstructor(DocumentClass,5);            ndNDoc2=(ILoadableTextPrint)Class.forName(DocumentClass).getConstructors()[iIdx].newInstance(NGramSize_Min,NGramSize_Max,Dmax,NGramSize_Min,NGramSize_Max);          }        } catch (        IllegalArgumentException ex) {          ex.printStackTrace(System.err);        }catch (        SecurityException ex) {          ex.printStackTrace(System.err);        }catch (        ClassNotFoundException ex) {          ex.printStackTrace(System.err);        }catch (        InstantiationException ex) {          ex.printStackTrace(System.err);        }catch (        IllegalAccessException ex) {          ex.printStackTrace(System.err);        }catch (        InvocationTargetException ex) {          ex.printStackTrace(System.err);        }        if (ndNDoc2 == null)         return new SimilarityArray();        ndNDoc2.loadDataStringFromFile(cfeOther.getFileName());        hModelCache.put(cfeOther.getFileName(),ndNDoc2);      }    }    Thread.yield();    try {      GraphSimilarity sSimil=null;      sSimil=(GraphSimilarity)sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);      String[] sFileNameData=new File(cfeCur.getFileName()).getName().split("\\.");      String sID=sFileNameData[0] + "\t" + sFileNameData[4];      if (bOutput) {        if (sSem != null)         try {          sSem.acquire();        } catch (        InterruptedException ie) {          return null;        }        try {          pOut.print(sID + "\t");          pOut.print(sSimil.ContainmentSimilarity + "\t" + sSimil.ValueSimilarity+ "\t"+ sSimil.SizeSimilarity+ "\t"+ "0.0\t"+ "0.0\t"+ "0.0\t"+ sSimil.getOverallSimilarity());          pOut.println();          pOut.flush();        }  finally {          if (sSem != null)           sSem.release();        }      }    } catch (    InvalidClassException iceE) {      System.err.println("Cannot compare...");    }    Thread.yield();  }  return saRes;}  }
class C{  public void unlockUserInput(){  locked=false;  samplesSpreadSheet.unlockUserInput();  getCommandManager().setEnableCritical(true);  frame.setCursor(Cursor.getDefaultCursor());  searchManager.getFindDialogAsToolBar().setEnableCritical(true);  frame.setCursor(Cursor.getDefaultCursor());  updateStatusBar();}  }
class C{  @Override public long skip(long n) throws IOException {  while (n > 0 && readFirstBytes() >= 0) {    n--;  }  return in.skip(n);}  }
class C{  public static Predicate<ItemStack> matcherOf(ItemStack value){  return matcherOf(value,false);}  }
class C{  public int writeGraphToFile(byte[] img,File to){  try {    FileOutputStream fos=new FileOutputStream(to);    fos.write(img);    fos.close();  } catch (  java.io.IOException ioe) {    return -1;  }  return 1;}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapAirportProperties && getIcao().equals(((AirMapAirportProperties)o).getIcao());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_PARTYNOTICE_DICE(String value0,String value3,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1390266,value0,value3,value1,value2);}  }
class C{  public void reset(){  if (!isSourcesModified()) {    if (myInitialItems == null) {      refreshUi();    }    return;  }  myConfigurable.getRepoManager().getSources(new StudioDownloader(),myLogger,true);  myInitialItems=null;  refreshUi();}  }
class C{  private static void createOutputMap(Map<String,List<Distributable>> outputMap,int blocksPerNode,Set<Distributable> uniqueBlocks,Map<String,List<Distributable>> nodeAndBlockMapping,List<String> activeNodes){  ArrayList<NodeMultiBlockRelation> multiBlockRelations=new ArrayList<>(nodeAndBlockMapping.size());  for (  Map.Entry<String,List<Distributable>> entry : nodeAndBlockMapping.entrySet()) {    multiBlockRelations.add(new NodeMultiBlockRelation(entry.getKey(),entry.getValue()));  }  Collections.sort(multiBlockRelations);  for (  NodeMultiBlockRelation nodeMultiBlockRelation : multiBlockRelations) {    String nodeName=nodeMultiBlockRelation.getNode();    String activeExecutor=nodeName;    if (null != activeNodes) {      activeExecutor=getActiveExecutor(activeNodes,nodeName);      if (null == activeExecutor) {        continue;      }    }    int nodeCapacity=0;    for (    Distributable block : nodeMultiBlockRelation.getBlocks()) {      if (uniqueBlocks.contains(block)) {        if (null == outputMap.get(activeExecutor)) {          List<Distributable> list=new ArrayList<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);          outputMap.put(activeExecutor,list);        }        if (nodeCapacity < blocksPerNode) {          List<Distributable> infos=outputMap.get(activeExecutor);          infos.add(block);          nodeCapacity++;          uniqueBlocks.remove(block);        } else {          break;        }      }    }  }}  }
class C{  public AbstractEntryType(ITypeDesc typeDesc){  this._typeDesc=typeDesc == null ? DUMMY_TYPE_TABLE_ENTRY : typeDesc;}  }
class C{  private void finishKbMode(){  mInKbMode=false;  if (!mTypedTimes.isEmpty()) {    int values[]=getEnteredTime(null);    mRadialTimePickerView.setCurrentHour(values[0]);    mRadialTimePickerView.setCurrentMinute(values[1]);    if (!mIs24HourView) {      mRadialTimePickerView.setAmOrPm(values[2]);    }    mTypedTimes.clear();  }  updateDisplay(false);  mRadialTimePickerView.setInputEnabled(true);}  }
class C{  public static boolean hasJellyBeanMr1(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;}  }
class C{  public TLongObjectHashMap(){  super();}  }
class C{  public boolean with_rectarray(){  return soot.PhaseOptions.getBoolean(options,"with-rectarray");}  }
class C{  public static AionClientPacket handle(ByteBuffer data,LoginConnection client){  AionClientPacket msg=null;  State state=client.getState();  int id=data.get() & 0xff;switch (state) {case CONNECTED:{switch (id) {case 0x07:        msg=new CM_AUTH_GG(data,client);      break;case 0x08:    msg=new CM_UPDATE_SESSION(data,client);  break;default :unknownPacket(state,id);}break;}case AUTHED_GG:{switch (id) {case 0x0B:msg=new CM_LOGIN(data,client);break;default :unknownPacket(state,id);}break;}case AUTHED_LOGIN:{switch (id) {case 0x05:msg=new CM_SERVER_LIST(data,client);break;case 0x02:msg=new CM_PLAY(data,client);break;default :unknownPacket(state,id);}break;}}return msg;}  }
class C{  public double magnitude(){  return Math.sqrt(w * w + x * x + y * y + z * z);}  }
class C{  public static String toQualifiedName(String internal){  return internal.replace('/','.');}  }
class C{  public void trimToSize(){  int cap=idealCapacity(length);  if (cap < capacity()) {    buffer=resize(buffer,cap);  }}  }
class C{  public boolean equals(char[] ch,int offset,int length){  if (ch == null) {    return false;  }  if (this.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (this.ch[this.offset + i] != ch[offset + i]) {      return false;    }  }  return true;}  }
class C{  public boolean isMinScaleSet(){  return !ScaleUtil.isNotSet(minScale);}  }
class C{  public GeneralException(String msg,List<String> messages,Throwable nested){  super(msg,nested);  this.messages=messages;}  }
class C{  public void loadColorTableFromDataTable(){  if (getDataTable().getColorTable() != null) {    getChartColorManager().setColorTable(getDataTable().getColorTable(),getDataTable().isColorByPosition());    if (getDataTable().getColorTableHeatMap() != null) {      getChartColorManager().setHeatMapTable(getDataTable().getColorTableHeatMap());      getDataTable().setColorTableHeatMap(getChartColorManager().getHeatMapTable().getName());    }  }  if (!getChartColorManager().isUsingProgramColors())   getChartColorManager().loadColorEdits(getDataTable().getColorEdits());}  }
class C{  public void addArgument(Access node){  List<Access> list=(parent == null || state == null) ? getArgumentListNoTransform() : getArgumentList();  list.addChild(node);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public StringLiteral fullCopy(){  StringLiteral tree=(StringLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public IOUtils(){  super();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENCHANT_ITEM_IT_CAN_NOT_BE_ENCHANTED_MORE_TIME(String value0){  return new SM_SYSTEM_MESSAGE(1300454,value0);}  }
class C{  private int[] computeHistogram(int classId,Document doc) throws IOException {  IConnector connector=doc.getMeganFile().getDataConnector();  Map<String,Integer> matched2count=new HashMap<>();  for (IReadBlockIterator it=connector.getReadsIterator(ClassificationType.Taxonomy.toString(),classId,doc.getMinScore(),doc.getMaxExpected(),false,true); it.hasNext(); ) {    IReadBlock readBlock=it.next();    for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {      IMatchBlock matchBlock=readBlock.getMatchBlock(i);      if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {        String firstLine=matchBlock.getText().split("\n")[0];        Integer count=matched2count.get(firstLine);        if (count == null)         matched2count.put(firstLine,1); else         matched2count.put(firstLine,count + 1);      }    }  }  int[] values=new int[matched2count.size()];  int i=0;  for (  Integer count : matched2count.values()) {    values[i++]=count;  }  Arrays.sort(values);  return values;}  }
class C{  public boolean isDynamic(){  return this.mass.getType() != MassType.INFINITE;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200809,skillcaster,num0,skillname);}  }
class C{  protected boolean isValidAuthority(String authority){  if (authority == null) {    return false;  }  if (authorityValidator != null && authorityValidator.isValid(authority)) {    return true;  }  final String authorityASCII=DomainValidator.unicodeToASCII(authority);  Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authorityASCII);  if (!authorityMatcher.matches()) {    return false;  }  String hostLocation=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);  DomainValidator domainValidator=DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));  if (!domainValidator.isValid(hostLocation)) {    InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();    if (!inetAddressValidator.isValid(hostLocation)) {      return false;    }  }  String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);  if (port != null && !PORT_PATTERN.matcher(port).matches()) {    return false;  }  String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);  if (extra != null && extra.trim().length() > 0) {    return false;  }  return true;}  }
class C{  public final void seek(final long offset){  try {    bs.seek(offset);  } catch (  IOException e) {    System.err.println("Seek failed" + e);  }}  }
class C{  private void restoreNaNs(double[] ranks,List<Integer> nanPositions){  if (nanPositions.size() == 0) {    return;  }  Iterator<Integer> iterator=nanPositions.iterator();  while (iterator.hasNext()) {    ranks[iterator.next().intValue()]=Double.NaN;  }}  }
class C{  @Override public boolean canAccessSubscription(OwnedSubscription subscription){  return _ownerId.equals(subscription.getOwnerId()) || _internalAuthorizer.hasPermissionByInternalId(_ownerId,Permissions.assumeDatabusSubscriptionOwnership(new NamedResource(subscription.getName())));}  }
class C{  public void removeUselessSegments(){  SegmentNode p=header[GeometricManager.ONE_TO_ONE];  SegmentNode q=null;  int countAll=0;  while (p != null) {    SegmentNode temp=p.next;    if (!isContainedInRectangles(p)) {      p.next=q;      q=p;      ++countAll;    } else {      reclaimSegmentNode(p);    }    p=temp;  }  size[GeometricManager.ONE_TO_ONE]=countAll;  header[GeometricManager.ONE_TO_ONE]=q;}  }
class C{  public static void runTask(String id,Runnable task,long delay){  if ("".equals(id)) {    HANDLER.postDelayed(task,delay);    return;  }  long time=SystemClock.uptimeMillis() + delay;  HANDLER.postAtTime(task,nextToken(id),time);}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  public VideoEditCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  public StableRandomGenerator(final RandomGenerator generator,final double alpha,final double beta) throws MathIllegalArgumentException, NullArgumentException {  if (generator == null) {    throw new NullArgumentException();  }  if (!(alpha > 0d && alpha <= 2d)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_LEFT,alpha,0,2);  }  MathUtils.checkRangeInclusive(beta,-1,1);  this.generator=generator;  this.alpha=alpha;  this.beta=beta;  if (alpha < 2d && beta != 0d) {    zeta=beta * FastMath.tan(FastMath.PI * alpha / 2);  } else {    zeta=0d;  }}  }
class C{  @NotNull public ImageOverlayBuilder identify(@NotNull IdentificationSet identificationSet){  return identify(identificationSet,RectangleTextPosition.TOP_OF);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  void register(RTEditTextListener listener,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){  mListener=listener;  mMediaFactory=mediaFactory;}  }
class C{  private List<Result> makeGroupByResults(JsonNode jsonResult,Set<DimensionColumn> dimensionColumns,Set<MetricColumn> metricColumns,DateTimeZone dateTimeZone){  List<Result> results=new ArrayList<>();  for (  JsonNode record : jsonResult) {    DateTime timeStamp=new DateTime(record.get("timestamp").asText(),dateTimeZone);    JsonNode event=record.get("event");    LinkedHashMap<DimensionColumn,DimensionRow> dimensionRows=extractDimensionRows(dimensionColumns,event);    LinkedHashMap<MetricColumn,Object> metricValues=extractMetricValues(metricColumns,event);    results.add(new Result(dimensionRows,metricValues,timeStamp));  }  return results;}  }
class C{  public void train(){  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistributionDocument dCur=DistroDocs.get(iCnt);    if (dCur != null)     dCur.setDataString(FullTextDataString,iCnt,true);  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistributionWordDocument dWordCur=DistroWordDocs.get(iCnt);    if (dWordCur != null)     dWordCur.setDataString(FullTextDataString,iCnt,true);  }}  }
class C{  public void preclose(){  preclosed=true;}  }
class C{  public GeoServerLayerHeadingNode(FileSystemInterface handler,GeoServerConnection connection,String title){  super(title);  this.handler=handler;  this.connection=connection;  this.title=title;}  }
class C{  public boolean streamToSpeech(InputStream is){  boolean ok;  voice.startBatch();  ok=voice.speak(is);  voice.endBatch();  return ok;}  }
class C{  private void drawDividerDrawable(Canvas c,RecyclerView parent){  int headersCount=0;  int footerCount=0;  int itemViewCount;  FamiliarRecyclerView curFamiliarRecyclerView=null;  if (parent instanceof FamiliarRecyclerView) {    curFamiliarRecyclerView=(FamiliarRecyclerView)parent;    headersCount=curFamiliarRecyclerView.getHeaderViewsCount();    footerCount=curFamiliarRecyclerView.getFooterViewsCount();    itemViewCount=curFamiliarRecyclerView.getAdapter().getItemCount() - headersCount - footerCount;  } else {    itemViewCount=parent.getAdapter().getItemCount();  }  final int parentLeft=parent.getPaddingLeft();  final int parentRight=parent.getWidth() - parent.getPaddingRight();  final int parentTop=parent.getPaddingTop();  final int parentBottom=parent.getHeight() - parent.getPaddingBottom();  boolean isGridItemLayoutLastRow, isGridItemLayoutFirstRow, isGridItemLayoutLastColumn;  boolean isGridLayoutLastNum=false;  for (int i=0; i < parent.getChildCount(); i++) {    View childView=parent.getChildAt(i);    RecyclerView.LayoutParams childViewParams=(RecyclerView.LayoutParams)childView.getLayoutParams();    int position=childViewParams.getViewAdapterPosition();    if (isInterceptFilter(position,headersCount,footerCount,itemViewCount))     continue;    if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_LINEAR && (!isHeaderDividersEnabled || headersCount == 0) && position - headersCount == 0) {      continue;    }    int traX=(int)(ViewCompat.getTranslationX(childView));    int traY=(int)(ViewCompat.getTranslationY(childView));    boolean isEmptyView=isEmptyView(curFamiliarRecyclerView,position,headersCount);    if (isHeadViewPos(headersCount,position) || isFooterViewPos(headersCount,footerCount,itemViewCount,position) || isEmptyView) {      if (isEmptyView && (!isHeaderDividersEnabled || headersCount == 0)) {        continue;      }      if (mOrientation == OrientationHelper.HORIZONTAL) {        final int left=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;        final int right=left + mVerticalDividerDrawableHeight;        mVerticalDividerDrawable.setBounds(left + traX,parentTop + traY,right + traX,parentBottom + traY);        mVerticalDividerDrawable.draw(c);      } else {        final int top=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;        final int bottom=top + mHorizontalDividerDrawableHeight;        mHorizontalDividerDrawable.setBounds(parentLeft + traX,top + traY,parentRight + traX,bottom + traY);        mHorizontalDividerDrawable.draw(c);      }      continue;    }switch (mLayoutManagerType) {case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_LINEAR:      if (mOrientation == OrientationHelper.VERTICAL) {        int left=parentLeft;        int right=parentRight;        if (mItemViewBothSidesMargin > 0 && position - headersCount > 0) {          left+=mItemViewBothSidesMargin;          right-=mItemViewBothSidesMargin;        }        final int top=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;        final int bottom=top + mHorizontalDividerDrawableHeight;        mHorizontalDividerDrawable.setBounds(left + traX,top + traY,right + traX,bottom + traY);        mHorizontalDividerDrawable.draw(c);      } else {        int top=parentTop;        int bottom=parentBottom;        if (mItemViewBothSidesMargin > 0 && position - headersCount > 0) {          top+=mItemViewBothSidesMargin;          bottom-=mItemViewBothSidesMargin;        }        final int left=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;        final int right=left + mVerticalDividerDrawableHeight;        mVerticalDividerDrawable.setBounds(left + traX,top + traY,right + traX,bottom + traY);        mVerticalDividerDrawable.draw(c);      }    break;case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID:case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID:  isGridItemLayoutLastRow=isGridItemLayoutLastRow(position,itemViewCount,headersCount);isGridItemLayoutLastColumn=isGridItemLayoutLastColumn(position,headersCount,childView);isGridItemLayoutFirstRow=isGridItemLayoutFirstRow(position,headersCount);if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && position == (itemViewCount + headersCount - 1)) {isGridLayoutLastNum=true;}if (mOrientation == OrientationHelper.HORIZONTAL) {if (!isNotShowGridEndDivider || (!isGridLayoutLastNum && !isGridItemLayoutLastColumn)) {int horizontalLeft=childView.getLeft() - childViewParams.leftMargin;int horizontalTop=childView.getBottom() + childViewParams.bottomMargin;int horizontalRight=childView.getRight() + childViewParams.rightMargin;int horizontalBottom=horizontalTop + mHorizontalDividerDrawableHeight;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID && !isGridItemLayoutLastRow) {horizontalRight+=mVerticalDividerDrawableHeight;}mHorizontalDividerDrawable.setBounds(horizontalLeft + traX,horizontalTop + traY,horizontalRight + traX,horizontalBottom + traY);mHorizontalDividerDrawable.draw(c);}if ((!isHeaderDividersEnabled || headersCount == 0) && isGridItemLayoutFirstRow) {continue;}int verticalTop;int verticalBottom;if (isGridItemLayoutFirstRow) {if (position - headersCount == 0) {verticalTop=parent.getTop();verticalBottom=parent.getBottom();} else {continue;}} else if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && isGridItemLayoutLastRow) {if (isGridItemLayoutFirstColumn(position,headersCount,childView)) {verticalTop=parent.getTop() + mItemViewBothSidesMargin;verticalBottom=parent.getBottom() - mItemViewBothSidesMargin;} else {continue;}} else {verticalTop=childView.getTop() - childViewParams.topMargin;verticalBottom=childView.getBottom() + childViewParams.bottomMargin;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridItemLayoutLastColumn) {verticalBottom+=mHorizontalDividerDrawableHeight;}}int verticalLeft=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;int verticalRight=verticalLeft + mVerticalDividerDrawableHeight;mVerticalDividerDrawable.setBounds(verticalLeft + traX,verticalTop + traY,verticalRight + traX,verticalBottom + traY);mVerticalDividerDrawable.draw(c);} else {if (!isNotShowGridEndDivider || (!isGridItemLayoutLastColumn && ((mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridLayoutLastNum) || mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID))) {int verticalLeft=childView.getRight() + childViewParams.rightMargin;int verticalTop=childView.getTop() - childViewParams.topMargin;int verticalRight=verticalLeft + mVerticalDividerDrawableHeight;int verticalBottom=childView.getBottom() + childViewParams.bottomMargin;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID && !isGridItemLayoutLastRow) {verticalBottom+=mHorizontalDividerDrawableHeight;}mVerticalDividerDrawable.setBounds(verticalLeft + traX,verticalTop + traY,verticalRight + traX,verticalBottom + traY);mVerticalDividerDrawable.draw(c);}if ((!isHeaderDividersEnabled || headersCount == 0) && isGridItemLayoutFirstRow) {continue;}int horizontalLeft;int horizontalRight;if (isGridItemLayoutFirstRow) {if (position - headersCount == 0) {horizontalLeft=parent.getLeft();horizontalRight=parent.getRight();} else {continue;}} else if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && isGridItemLayoutLastRow) {if (isGridItemLayoutFirstColumn(position,headersCount,childView)) {horizontalLeft=parent.getLeft() + mItemViewBothSidesMargin;horizontalRight=parent.getRight() - mItemViewBothSidesMargin;} else {continue;}} else {horizontalLeft=childView.getLeft() - childViewParams.leftMargin;horizontalRight=childView.getRight() + childViewParams.rightMargin;if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridItemLayoutLastColumn) {horizontalRight+=mVerticalDividerDrawableHeight;}}int horizontalTop=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;int horizontalBottom=horizontalTop + mHorizontalDividerDrawableHeight;mHorizontalDividerDrawable.setBounds(horizontalLeft + traX,horizontalTop + traY,horizontalRight + traX,horizontalBottom + traY);mHorizontalDividerDrawable.draw(c);}break;}}}  }
class C{  private int[] pickAutoDetectedLocalAddress() throws IOException {  InetAddress addressObj=InetAddress.getLocalHost();  byte[] addr=addressObj.getAddress();  int b1=addr[0] & 0xff;  int b2=addr[1] & 0xff;  int b3=addr[2] & 0xff;  int b4=addr[3] & 0xff;  int[] ret={b1,b2,b3,b4};  return ret;}  }
class C{  static public ScoutCandidateGroup create(Rectangle group,ScoutWidget[] list,Rectangle[] rectList){  BitSet set=new BitSet();  int count=0;  int groupArea=group.width * group.height;  int widgetArea=0;  for (int i=1; i < list.length; i++) {    if (group.intersects(rectList[i]) && !group.contains(rectList[i])) {      return null;    }    if (group.contains(rectList[i])) {      set.set(i);      count++;      widgetArea+=rectList[i].height * rectList[i].width;    }  }  if (count < 4) {    return null;  }  if (widgetArea * 2 < groupArea) {    return null;  }  ScoutCandidateGroup c=new ScoutCandidateGroup();  c.mNorth=group.y;  c.mSouth=group.y + group.height;  c.mEast=group.x + group.width;  c.mWest=group.x;  c.mContainSet=set;  c.mCount=count;  c.mGroupArea=groupArea;  c.mWidgetArea=widgetArea;  c.mRect=new Rectangle(group);  c.mRectList=buildRectList(set,rectList);  return c;}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  public static Map<String,Object> createContactMech(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  if (result.size() > 0)   return result;  String contactMechTypeId=(String)context.get("contactMechTypeId");  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_id_generation_failure",locale));  }  GenericValue tempContactMech=delegator.makeValue("ContactMech",UtilMisc.toMap("contactMechId",newCmId,"contactMechTypeId",contactMechTypeId));  toBeStored.add(tempContactMech);  if (!partyId.equals("_NA_")) {    toBeStored.add(delegator.makeValue("PartyContactMech",UtilMisc.toMap("partyId",partyId,"contactMechId",newCmId,"fromDate",now,"roleTypeId",context.get("roleTypeId"),"allowSolicitation",context.get("allowSolicitation"),"extension",context.get("extension"))));  }  if ("POSTAL_ADDRESS".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_createContactMech_not_be_used_for_POSTAL_ADDRESS",locale));  } else   if ("TELECOM_NUMBER".equals(contactMechTypeId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.service_createContactMech_not_be_used_for_TELECOM_NUMBER",locale));  } else {    tempContactMech.set("infoString",context.get("infoString"));  }  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("contactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  @Override public void readNBT(NBTTagCompound compound){  super.readNBT(compound);  if (compound.hasKey("foodExhaustionTimer")) {    this.exhaustionTimer=compound.getInteger("foodExhaustionTimer");  }  if (!compound.hasKey("bwmAdjustedFoodStats")) {    setFoodLevel(getFoodLevel() * 3);    setSaturation(0);  }  if (getFoodLevel() > 60)   setFoodLevel(60);  if (getSaturationLevel() > 20)   setSaturation(20);}  }
class C{  public void click(long time,float x,float y){  if (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.UNDISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL) {    return;  }  int clicked=getTabIndexAtPositon(x,y,LayoutTab.getTouchSlop());  if (clicked >= 0) {    boolean isRtl=!((mCurrentMode == Orientation.PORTRAIT) ^ LocalizationUtils.isLayoutRtl());    if (mStackTabs[clicked].getLayoutTab().checkCloseHitTest(x,y,isRtl)) {      StackTab tab=mStackTabs[clicked];      final float halfCloseBtnWidth=LayoutTab.CLOSE_BUTTON_WIDTH_DP / 2.f;      final float halfCloseBtnHeight=mBorderTopPadding / 2.f;      final float contentWidth=tab.getLayoutTab().getOriginalContentWidth();      tab.setDiscardOriginY(halfCloseBtnHeight);      tab.setDiscardOriginX(isRtl ? halfCloseBtnWidth : contentWidth - halfCloseBtnWidth);      tab.setDiscardFromClick(true);      mLayout.uiRequestingCloseTab(time,tab.getId());      RecordUserAction.record("MobileStackViewCloseTab");      RecordUserAction.record("MobileTabClosed");    } else {      mLayout.uiSelectingTab(time,mStackTabs[clicked].getId());    }  }}  }
class C{  protected AbstractProjectStructureChange(@NotNull DataNode<T> data,@NotNull String dataDescription){  myData=data;  myDataDescription=dataDescription;}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public HarmonicOscillator(double amplitude,double omega,double phase){  this.amplitude=amplitude;  this.omega=omega;  this.phase=phase;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuff_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200509,skilltarget,skillname);}  }
class C{  public static boolean isBeforeToday(Calendar _calendar){  return _calendar.before(Calendar.getInstance());}  }
class C{  private static int correctErrors(int[] codewords,int[] erasures,int numECCodewords) throws ChecksumException {  if (erasures != null && erasures.length > numECCodewords / 2 + MAX_ERRORS || numECCodewords < 0 || numECCodewords > MAX_EC_CODEWORDS) {    throw ChecksumException.getChecksumInstance();  }  return errorCorrection.decode(codewords,numECCodewords,erasures);}  }
class C{  public void importNewlyCreatedProject(@NotNull String projectName,@NotNull File projectRootDirPath,@Nullable GradleSyncListener listener,@Nullable Project project,@Nullable LanguageLevel initialLanguageLevel) throws IOException, ConfigurationException {  doImport(projectName,projectRootDirPath,new ImportOptions(true,false,false,false),listener,project,initialLanguageLevel);}  }
class C{  @SuppressWarnings("unused") private int doUpdateAssociations(DataSupport baseObj,long id,ContentValues values){  int rowsAffected=0;  analyzeAssociations(baseObj);  updateSelfTableForeignKey(baseObj,values);  rowsAffected+=updateAssociatedTableForeignKey(baseObj,id);  return rowsAffected;}  }
class C{  @Override public int compareTo(Fraction object){  long nOd=((long)numerator) * object.denominator;  long dOn=((long)denominator) * object.numerator;  return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);}  }
class C{  public void addTableListener(TableListener listnr){  if (!m_listeners.contains(listnr))   m_listeners.add(listnr);}  }
class C{  public static boolean isFile(String fileName){  File f=new File(fileName);  return f.isFile();}  }
class C{  public static Document openDocument(OutputStream outputStream,Rectangle pageSize){  try {    Document document=new Document(pageSize);    PdfWriter.getInstance(document,outputStream);    document.open();    return document;  } catch (  DocumentException ex) {    throw new RuntimeException("Failed to open PDF document",ex);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_EXP_GAIN_VITAL_BONUS(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1400345,value0,num1);}  }
class C{  private void computeRoots(Matrix3f mat,double[] rootsStore){  double a=mat.m00, b=mat.m01, c=mat.m02, d=mat.m11, e=mat.m12, f=mat.m22;  double char0=a * d * f + 2.0 * b * c* e - a * e * e - d * c * c - f * b * b;  double char1=a * d - b * b + a * f - c * c + d * f - e * e;  double char2=a + d + f;  double char2Div3=char2 * ONE_THIRD_DOUBLE;  double abcDiv3=(char1 - char2 * char2Div3) * ONE_THIRD_DOUBLE;  if (abcDiv3 > 0.0) {    abcDiv3=0.0;  }  double mbDiv2=0.5 * (char0 + char2Div3 * (2.0 * char2Div3 * char2Div3 - char1));  double q=mbDiv2 * mbDiv2 + abcDiv3 * abcDiv3 * abcDiv3;  if (q > 0.0) {    q=0.0;  }  double magnitude=Math.sqrt(-abcDiv3);  double angle=Math.atan2(Math.sqrt(-q),mbDiv2) * ONE_THIRD_DOUBLE;  double cos=Math.cos(angle);  double sin=Math.sin(angle);  double root0=char2Div3 + 2.0 * magnitude * cos;  double root1=char2Div3 - magnitude * (cos + ROOT_THREE_DOUBLE * sin);  double root2=char2Div3 - magnitude * (cos - ROOT_THREE_DOUBLE * sin);  if (root1 >= root0) {    rootsStore[0]=root0;    rootsStore[1]=root1;  } else {    rootsStore[0]=root1;    rootsStore[1]=root0;  }  if (root2 >= rootsStore[1]) {    rootsStore[2]=root2;  } else {    rootsStore[2]=rootsStore[1];    if (root2 >= rootsStore[0]) {      rootsStore[1]=root2;    } else {      rootsStore[1]=rootsStore[0];      rootsStore[0]=root2;    }  }}  }
class C{  public static boolean shouldWriteValue(@Nullable Object currentValue,@Nullable Object newValue){  if (Objects.equal(currentValue,newValue)) {    return false;  }  if (!(currentValue instanceof List && newValue instanceof List)) {    return true;  }  List currentList=(List)currentValue;  List newList=(List)newValue;  if (currentList.size() != newList.size()) {    return true;  }  for (int i=0; i < currentList.size(); i++) {    Object currentObj=currentList.get(i);    Object newObj=newList.get(i);    if (!currentObj.equals(newObj) && !(currentObj instanceof UnparseableStatement && newObj instanceof UnparseableStatement)) {      return true;    }  }  return false;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  setMeasuredDimension(getResources().getDisplayMetrics().widthPixels,DisplayUtils.getNavigationBarHeight(getContext()));}  }
class C{  public static String execute(String command,String cwd){  return execute(command,new File(cwd));}  }
class C{  private void updateSolverWidgetFromComponent(@NotNull NlComponent component,boolean deepUpdate){  ConstraintWidget widget=myWidgetsScene.getWidget(component);  if (USE_GUIDELINES_DURING_DND) {    if (myDragDropWidget != null) {      WidgetCompanion companion=(WidgetCompanion)myDragDropWidget.getCompanionWidget();      if (companion.getWidgetModel() == component) {        saveToXML(true);        myDragDropWidget=null;        return;      }    }  }  ConstraintUtilities.updateWidget(this,widget,component);  for (  NlComponent child : component.getChildren()) {    updateSolverWidgetFromComponent(child,deepUpdate);  }}  }
class C{  public MessagesGetChatUsersQueryWithChatIdsFields(VkApiClient client,UserActor actor,List<Integer> chatIds,UserField... fields){  super(client,"messages.getChatUsers",GetChatUsersChatIdsFieldsResponse.class);  accessToken(actor.getAccessToken());  chatIds(chatIds);  fields(fields);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public int hashCode(){  return (int)(value ^ (value >>> 32));}  }
class C{  public void toAllInRadius(int dimension,Vec3d pos,double radius){  toAllInRadius(OpenModLoader.getSidedHandler().getServer().worldServerForDimension(dimension),pos,radius);}  }
class C{  public PlusActionProvider(Context context){  super(context);  this.context=context;}  }
class C{  public ObjectFactory(){}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end){  return create(file,listener,delayMillis,end,DEFAULT_BUFSIZE);}  }
class C{  private synchronized void disconnectQuietly(){  connected=false;  for (  Map.Entry<String,MessageListenerWrapper> entry : topicToWrapper.entrySet()) {    entry.getValue().stop();  }  if (connection != null) {    try {      connection.close();    } catch (    JMSException jmsEx) {      LOGGER.error("disconnect() - Exception caught while attempting to disconnect from JMS - aborting this attempt.",jmsEx);    }  }}  }
class C{  public static float compareEquivalance(Bitmap bitmap1,Bitmap bitmap2){  if (bitmap1 == null || bitmap2 == null || bitmap1.getWidth() != bitmap2.getWidth() || bitmap1.getHeight() != bitmap2.getHeight()) {    return 0f;  }  ByteBuffer buffer1=ByteBuffer.allocate(bitmap1.getHeight() * bitmap1.getRowBytes());  bitmap1.copyPixelsToBuffer(buffer1);  ByteBuffer buffer2=ByteBuffer.allocate(bitmap2.getHeight() * bitmap2.getRowBytes());  bitmap2.copyPixelsToBuffer(buffer2);  byte[] array1=buffer1.array();  byte[] array2=buffer2.array();  int len=array1.length;  int count=0;  for (int i=0; i < len; i++) {    if (array1[i] == array2[i]) {      count++;    }  }  return ((float)(count)) / len;}  }
class C{  WebContents takePrerenderedUrl(IBinder session,String url,String referrer){  ThreadUtils.assertOnUiThread();  if (mPrerender == null || session == null || !session.equals(mPrerender.mSession)) {    return null;  }  WebContents webContents=mPrerender.mWebContents;  String prerenderedUrl=mPrerender.mUrl;  String prerenderReferrer=mPrerender.mReferrer;  if (referrer == null)   referrer="";  if (TextUtils.equals(prerenderedUrl,url) && TextUtils.equals(prerenderReferrer,referrer)) {    mPrerender=null;    return webContents;  } else {    cancelPrerender(session);  }  return null;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public DefaultJsonFeeder(Charset charset,int capacity){  byteBuf=ByteBuffer.allocate(capacity);  charBuf=CharBuffer.allocate(capacity * 2);  charBuf.limit(0);  decoder=charset.newDecoder();}  }
class C{  public AppsDeleteAppRequestsQuery(VkApiClient client,UserActor actor){  super(client,"apps.deleteAppRequests",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static String addAdditionalParty(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  String partyId=request.getParameter("additionalPartyId");  String roleTypeId[]=request.getParameterValues("additionalRoleTypeId");  List<String> eventList=new LinkedList<String>();  Locale locale=UtilHttp.getLocale(request);  int i;  if (UtilValidate.isEmpty(partyId) || UtilValidate.isEmpty(roleTypeId) || roleTypeId.length < 1) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderPartyIdAndOrRoleTypeIdNotDefined",locale));    return "error";  }  if (request.getAttribute("_EVENT_MESSAGE_LIST_") != null) {    List<String> msg=UtilGenerics.checkList(request.getAttribute("_EVENT_MESSAGE_LIST_"));    eventList.addAll(msg);  }  for (i=0; i < roleTypeId.length; i++) {    try {      cart.addAdditionalPartyRole(partyId,roleTypeId[i]);    } catch (    Exception e) {      eventList.add(e.getLocalizedMessage());    }  }  request.removeAttribute("_EVENT_MESSAGE_LIST_");  request.setAttribute("_EVENT_MESSAGE_LIST_",eventList);  return "success";}  }
class C{  @Override public List<GroupConfigInterface> convertParameters(Class<?> panelId,FunctionName functionName){  List<GroupConfigInterface> groupConfigList=new ArrayList<GroupConfigInterface>();  if (functionName != null) {    GroupConfig groupConfig=new GroupConfig();    StringBuilder funcPrototypeStringBuilder=new StringBuilder();    funcPrototypeStringBuilder.append(functionName.getName());    funcPrototypeStringBuilder.append("(");    int argCount=functionName.getArgumentCount();    if (functionName.getArgumentCount() < 0) {      argCount*=-1;    }    for (int index=0; index < argCount; index++) {      int argIndex=index;      if (argIndex >= functionName.getArguments().size()) {        argIndex=functionName.getArguments().size() - 1;      }      String label=functionName.getArgumentNames().get(argIndex);      Parameter<?> parameterType=functionName.getArguments().get(argIndex);      boolean valueOnly=false;      FieldIdEnum id=FieldIdEnum.UNKNOWN;      if (index > 0) {        funcPrototypeStringBuilder.append(", ");      }      Class<?> type=parameterType.getType();      funcPrototypeStringBuilder.append(type.getSimpleName());      FieldConfigBase fieldConfig=null;      FieldConfigCommonData commonData=new FieldConfigCommonData(panelId,id,label,valueOnly);      if (type == java.lang.Number.class) {        fieldConfig=new FieldConfigDouble(commonData);      } else       if (type == Double.class) {        fieldConfig=new FieldConfigDouble(commonData);      } else       if (type == Float.class) {        fieldConfig=new FieldConfigDouble(commonData);      } else       if (type == Integer.class) {        fieldConfig=new FieldConfigInteger(commonData);      } else       if (type == Long.class) {        fieldConfig=new FieldConfigInteger(commonData);      } else       if (type == String.class) {        fieldConfig=new FieldConfigString(commonData,null);      } else       if (type == Object.class) {        fieldConfig=new FieldConfigString(commonData,null);      } else       if (type == Boolean.class) {        fieldConfig=new FieldConfigBoolean(commonData);      } else       if (type == Geometry.class) {        fieldConfig=new FieldConfigGeometry(commonData,null);      } else       if (type == LineString.class) {        fieldConfig=new FieldConfigGeometry(commonData,null);      } else       if (type == Date.class) {        fieldConfig=new FieldConfigDate(commonData);      } else       if (type == Class.class) {        fieldConfig=new FieldConfigString(commonData,null);      } else       if (type == Classifier.class) {        fieldConfig=new FieldConfigString(commonData,null);      } else       if (type == Unit.class) {        fieldConfig=new FieldConfigMapUnits(commonData);      } else       if (type == Comparable.class) {        fieldConfig=new FieldConfigString(commonData,null);      } else {        ConsoleManager.getInstance().error(this,Localisation.getField(ExpressionPanelv2.class,"FilterManager.error1") + type.getName());      }      groupConfig.addField(fieldConfig);    }    funcPrototypeStringBuilder.append(")");    groupConfig.setLabel(funcPrototypeStringBuilder.toString());    groupConfigList.add(groupConfig);  }  return groupConfigList;}  }
class C{  private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  @Override public boolean accept(File file){  if (file.isDirectory()) {    File[] files=file.listFiles();    return files == null || files.length == 0;  } else {    return file.length() == 0;  }}  }
class C{  private void expectException(){  expectedException.expect(IllegalArgumentException.class);  expectedException.expectMessage(EMPTY_ERROR_MESSAGE);}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{0,0.5,1};}  }
class C{  public PullException(String msg){  super(msg);}  }
class C{  private boolean queryRelativeCatalogs(){  if (resources == null)   readProperties();  if (resources == null)   return defaultRelativeCatalogs;  try {    String allow=resources.getString("relative-catalogs");    return (allow.equalsIgnoreCase("true") || allow.equalsIgnoreCase("yes") || allow.equalsIgnoreCase("1"));  } catch (  MissingResourceException e) {    return defaultRelativeCatalogs;  }}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  Stream<Concept> insertAll(Map<String,Concept> results){  concepts.clear();  concepts.putAll(new HashMap<>(results));  return vars.stream().map(null);}  }
class C{  public java_cup.runtime.Symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$parser$do_action(act_num,parser,stack,top);}  }
class C{  public static <T>T make(Class<T> shieldClass,RxJava2ObsHub rxJava2ObsHub){  return inst.make(shieldClass,rxJava2ObsHub,RxJava2ObsHub.class);}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  public boolean hasAccess(String... name){  if (this.getId() == 0L) {    return true;  }  if (role == null) {    getRole();  }  return role.hasAccess(name);}  }
class C{  public SimpleDominatorsFinder(DirectedGraph<N> graph){  this.graph=graph;  SimpleDominatorsAnalysis<N> analysis=new SimpleDominatorsAnalysis<N>(graph);{    nodeToDominators=new HashMap<N,FlowSet<N>>(graph.size() * 2 + 1,0.7f);    for (Iterator<N> nodeIt=graph.iterator(); nodeIt.hasNext(); ) {      N node=nodeIt.next();      FlowSet<N> set=analysis.getFlowAfter(node);      nodeToDominators.put(node,set);    }  }}  }
class C{  public void update(float deltaTime){  if (!isPaused && !defeated) {    timeTilVictory-=deltaTime;    currentDelay-=deltaTime;    if (timeTilVictory <= 0.0f) {      defeated=true;    } else     if (currentDelay <= this.min_delay && !playersWarned) {      turnOnTracks(chooseNextTrackCodeByPlayers());      playersWarned=true;    } else     if (currentDelay <= 1.0f && !trainsSummoned) {      callTrains(nextTrainCode);      trainsSummoned=true;    } else     if (currentDelay <= 0.0625f && !imminentDanger) {      turnOffAllTracks();      imminentDanger=true;    } else     if (currentDelay <= 0.0f) {      turnOffAllTracks();      playersWarned=false;      imminentDanger=false;      trainsSummoned=false;      activeDelays.remove();      currentDelay=activeDelays.peek();    }  }}  }
class C{  public RevealBuilder from(@NonNull final View fromView){  this.mFromView=fromView;  return this;}  }
class C{  public boolean strictlyPositive(){  if (isNaN()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    dotrap(DfpField.FLAG_INVALID,LESS_THAN_TRAP,this,newInstance(getZero()));    return false;  }  return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());}  }
class C{  public static <T extends GenericEntity>List<T> filterByAnd(List<T> values,Map<String,? extends Object> fields){  if (values == null)   return null;  List<T> result=null;  if (UtilValidate.isEmpty(fields)) {    result=new LinkedList<T>();    result.addAll(values);  } else {    result=new LinkedList<T>();    for (    T value : values) {      if (value.matchesFields(fields)) {        result.add(value);      }    }  }  return result;}  }
class C{  protected MarketGetQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public ConsoleOutStream(final LogController logController){  super();  this.logController=logController;  try {    final File f=new File(System.getProperty("user.dir"),logName);    if (!f.exists()) {      f.createNewFile();    }    filestream=new PrintStream(new FileOutputStream(f,true));  } catch (  final IOException e) {    ConsolePrintStream.printException(e);  }}  }
class C{  public static Item ParseItemType(String s,boolean checkBlocks){  if (s == null)   return null;  Item item=(Item)Item.itemRegistry.getObject(new ResourceLocation(s));  if (item == null && checkBlocks) {    IBlockState block=MinecraftTypeHelper.ParseBlockType(s);    item=(block != null && block.getBlock() != null) ? Item.getItemFromBlock(block.getBlock()) : null;  }  return item;}  }
class C{  public static boolean exists(W q){  try {    return Helper.exists(q,User.class);  } catch (  Exception e1) {    log.error(e1.getMessage(),e1);  }  return false;}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public Label(double newTime,int newStatus,String newPhn,double newll){  this(newTime,newStatus,newPhn,newll,null,null);}  }
class C{  @Override protected void parseOptimizationData(OptimizationData... optData){  super.parseOptimizationData(optData);  for (  OptimizationData data : optData) {    if (data instanceof AbstractSimplex) {      simplex=(AbstractSimplex)data;      break;    }  }}  }
class C{  private void openTestAction(String className) throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String name=className.substring(className.lastIndexOf("") + 1);  int option=JOptionPane.showConfirmDialog(this,Messages.getString("dialog.test.open.warning.text"),MessageFormat.format(Messages.getString("dialog.test.open.warning.title"),name),JOptionPane.YES_NO_CANCEL_OPTION);  if (option == JOptionPane.YES_OPTION) {    Class<?> clazz=Class.forName(className);    CompiledSimulation simulation=(CompiledSimulation)clazz.newInstance();synchronized (Simulation.LOCK) {      this.simulation=simulation;      this.pnlSimulation.setSimulation(this.simulation);      this.pnlContacts.setContactCounter(this.simulation.getContactCounter());    }    this.clearAllSnapshots();    this.setTitle(this.getWindowTitle() + " - " + name);    this.setCompiledSimulation(true);  }}  }
class C{  public double distanceSquared(Vector3 point){  double xd=this.x - point.x;  double yd=this.y - point.y;  double zd=this.z - point.z;  return xd * xd + yd * yd + zd * zd;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public static boolean exists(String where,Object[] args,Class<? extends Bean> t) throws Exception {  Table mapping=(Table)t.getAnnotation(Table.class);  if (mapping == null) {    if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion");    return false;  }  return exists(mapping.name(),where,args);}  }
class C{  public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,int... albumIds){  return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);}  }
class C{  public void clear(){  this.n=0;  minImpl.clear();  maxImpl.clear();  sumImpl.clear();  sumLogImpl.clear();  sumSqImpl.clear();  geoMeanImpl.clear();  meanImpl.clear();  covarianceImpl.clear();}  }
class C{  public synchronized EntityListIterator queryStartupJobs(EntityCondition commonCondition) throws GenericEntityException {  EntityListIterator res=null;  if (!startupJobsQueued) {    res=queryStartupJobsAlways(commonCondition);    startupJobsQueued=true;  }  return res;}  }
class C{  public static void syncNetworkFormatting2Summary(ClusterViewer clusterViewer,DataTable megan4Table){  System.err.println("syncNetworkFormatting2Summary(): not implemented");}  }
class C{  protected MessagesGetChatUsersQueryWithChatIds chatIds(List<Integer> value){  return unsafeParam("chat_ids",value);}  }
class C{  public final float readFloat(){  return Float.intBitsToFloat(readInt());}  }
class C{  @Override public Result map(Result result,Schema schema){  Granularity grain=schema.getGranularity();  if (grain.equals(AllGranularity.INSTANCE)) {    return !volatileIntervalSupply.get().isEmpty() || missingIntervals.isEmpty() ? result : null;  }  Interval resultInterval=new Interval(result.getTimeStamp(),((TimeGrain)grain).getPeriod());  return getMissingNotVolatile().stream().anyMatch(null) ? null : result;}  }
class C{  public long optLong(int index){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return 0l;  if (token.type == LazyNode.VALUE_NULL)   return 0l;  return token.getLongValue(cbuf);}  }
class C{  public static final Polygon flip(Polygon polygon,Vector2 axis){  return Geometry.flip(polygon,axis,null);}  }
class C{  public NGramDocumentComparatorAgent(){  super();}  }
class C{  private void centerOnOriginAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();synchronized (Simulation.LOCK) {        body.translateToOrigin();      }    }  }}  }
class C{  public static boolean isRestricted(Player player,Class<? extends Restrictions> callingRestriction){  if (player == null) {    return true;  }  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.isRestricted.ordinal()]) {    if (!restrictions.isRestricted(player,callingRestriction)) {      return false;    }  }  return false;}  }
class C{  public void applyTo(final T[] in,final T[] out){  final T x=in[0];  final T y=in[1];  final T z=in[2];  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  out[0]=q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);  out[1]=q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);  out[2]=q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200772,skillcaster,skillname);}  }
class C{  @Override public void unsubscribe(String topic) throws AWSIotException {  super.unsubscribe(topic);}  }
class C{  private static void computeGappedSequenceBlastX(String readName,String readSequence,String text,Collection<Pair<Integer,String>> insertions,boolean showInsertions,Single<char[]> referenceSequence,Single<char[]> originalReferenceSequence,Alignment alignment) throws IOException {  int length=Basic.parseInt(grabNext(text,"Length =","Length="));  if (length == 0)   length=10000;  if (referenceSequence.get() == null)   referenceSequence.set(new char[3 * length]);  if (originalReferenceSequence.get() == null) {    originalReferenceSequence.set(new char[length]);    for (int i=0; i < length; i++) {      originalReferenceSequence.get()[i]='?';    }  }  final int frame=Basic.parseInt(grabNext(text,"Frame =","Frame="));  int startQuery=Basic.parseInt(grabNext(text,"Query:","Query"));  int endQuery=Basic.parseInt(grabLastInLinePassedScore(text,"Query"));  if (readSequence == null)   throw new IOException("Read '" + readName + "': sequence not found");  if (readSequence.length() < Math.max(startQuery,endQuery)) {    throw new IOException("Read '" + readName + "': read length too short: "+ readSequence.length()+ " < "+ Math.max(startQuery,endQuery));  }  int startSubject=Basic.parseInt(grabNext(text,"Sbjct:","Sbjct"));  int endSubject=Basic.parseInt(grabLastInLinePassedScore(text,"Sbjct"));  String queryString=grabQueryString(text);  String subjectString=grabSubjectString(text);  int p=startSubject;  for (int i=0; i < subjectString.length(); i++) {    if (subjectString.charAt(i) != '-') {      referenceSequence.get()[3 * (p - 1)]=subjectString.charAt(i);      originalReferenceSequence.get()[p - 1]=subjectString.charAt(i);      p++;    }  }  if (frame < 0) {    readName+=" (rev)";    startQuery=readSequence.length() - startQuery + 1;    endQuery=readSequence.length() - endQuery + 1;    readSequence=SequenceUtils.getReverseComplement(readSequence);  }  int pos=startQuery - 1;  int alignPos=3 * (startSubject - 1);  Pair<Integer,String> insertion=null;  StringWriter w=new StringWriter();  for (int mPos=0; mPos < queryString.length(); mPos++) {    if (queryString.charAt(mPos) == '-') {      if (insertion != null) {        insertion=null;      }      w.write("---");      alignPos+=3;    } else     if (subjectString.charAt(mPos) == '-') {      if (showInsertions) {        if (insertion == null) {          insertion=new Pair<>(alignPos - 1,readSequence.substring(pos,pos + 3));          insertions.add(insertion);        } else {          insertion.setSecond(insertion.getSecond() + readSequence.substring(pos,pos + 3));        }      }      pos+=3;      alignPos+=3;    } else {      if (insertion != null) {        insertion=null;      }      if (pos < 0) {        throw new IOException("pos too small: " + pos);      }      if (pos >= readSequence.length()) {        throw new IOException("pos overrun end of read: " + pos + " >= "+ readSequence.length());      } else {        w.write(readSequence.charAt(pos++));        w.write(readSequence.charAt(pos++));        w.write(readSequence.charAt(pos++));        alignPos+=3;      }    }  }  final String block=w.toString();  final int leadingGaps=3 * (startSubject - 1);  final int trailingGaps=3 * (length - endSubject);  final String unalignedPrefix=readSequence.substring(0,startQuery);  final String unalignedSuffix=readSequence.substring(endQuery,readSequence.length());  alignment.addSequence(readName,text,null,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix);}  }
class C{  public ScrollPaneAdjuster(JScrollPane scrollPane){  this(scrollPane,null);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_AUCTION_MY_HOUSE(int address){  return new SM_SYSTEM_MESSAGE(1401268,address);}  }
class C{  public static boolean isServiceRunning(Context context,String className){  boolean isRunning=false;  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningServiceInfo> servicesList=activityManager.getRunningServices(Integer.MAX_VALUE);  for (  ActivityManager.RunningServiceInfo si : servicesList) {    if (className.equals(si.service.getClassName())) {      isRunning=true;    }  }  return isRunning;}  }
class C{  private static void populatePayload(final StringBuffer logMessage,final FormattedMqttMessage message,final MessageLog messageLogOptions){  boolean encoded=MessageLogEnum.XML_WITH_ENCODED_PAYLOAD.equals(messageLogOptions.getValue());  final String payload=new String(message.getPayload());  if (!encoded && (payload.contains(ConversionUtils.LINE_SEPARATOR_LINUX) || payload.contains(ConversionUtils.LINE_SEPARATOR_MAC) || payload.contains(ConversionUtils.LINE_SEPARATOR_WIN))) {    logger.debug("Message on topic {} contains a new line separator, so it needs to be encoded",message.getTopic());    encoded=true;  }  if (encoded) {    appendAttribute(logMessage,"encoded","true");  }  logMessage.append(">");  if (encoded) {    appendValue(logMessage,Base64.encodeBase64String(message.getRawMessage().getPayload()));  } else {    final boolean useCData=XML_CHARS.matcher(payload).find();    if (useCData) {      appendValue(logMessage,"<![CDATA[" + payload + "]]>");    } else {      appendValue(logMessage,payload);    }  }}  }
class C{  public PreviewWidgetBehavior(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public WallPostQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public void sortPickingQueue(){  sort(pitems,pscores,psize);  psorted=true;}  }
class C{  public ZWaveMeterTblConfigurationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static boolean isServletInitStatusReached(){  return servletInitStatusReached;}  }
class C{  private boolean isValidRegistryBasedAuthority(String authority){  int index=0;  int end=authority.length();  char testChar;  while (index < end) {    testChar=authority.charAt(index);    if (testChar == '%') {      if (index + 2 >= end || !isHex(authority.charAt(index + 1)) || !isHex(authority.charAt(index + 2))) {        return false;      }      index+=2;    } else     if (!isPathCharacter(testChar)) {      return false;    }    ++index;  }  return true;}  }
class C{  public ArrayRealVector(RealVector v1,ArrayRealVector v2){  final int l1=v1.getDimension();  final int l2=v2.data.length;  data=new double[l1 + l2];  for (int i=0; i < l1; ++i) {    data[i]=v1.getEntry(i);  }  System.arraycopy(v2.data,0,data,l1,l2);}  }
class C{  protected Status(StatusType severity){  this.severity=severity;}  }
class C{  public boolean loadConfiguration(final File file){  try {    configuration=(MqttSpyDaemonConfiguration)parser.loadFromFile(file);    populateDefaults();    return true;  } catch (  XMLException e) {    logger.error("Cannot process the configuration file at " + file.getAbsolutePath(),e);  }catch (  FileNotFoundException e) {    logger.error("Cannot read the configuration file from " + file.getAbsolutePath(),e);  }  return false;}  }
class C{  public VideoCreateCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  public NotesGetCommentsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public ArrayFieldVector<T> ebeDivide(ArrayFieldVector<T> v) throws MathIllegalArgumentException, MathRuntimeException {  checkVectorDimensions(v.data.length);  T[] out=MathArrays.buildArray(field,data.length);  for (int i=0; i < data.length; i++) {    try {      out[i]=data[i].divide(v.data[i]);    } catch (    final MathRuntimeException e) {      throw new MathRuntimeException(LocalizedCoreFormats.INDEX,i);    }  }  return new ArrayFieldVector<T>(field,out,false);}  }
class C{  public void clear(){  m_map.clear();}  }
class C{  private ResultSet columnScan(DeltaPlacement placement,TableDDL tableDDL,ByteBuffer rowKey,Range<RangeTimeUUID> columnRange,boolean ascending,int limit,ConsistencyLevel consistency){  Select.Where where=selectFrom(tableDDL).where(eq(tableDDL.getRowKeyColumnName(),rowKey));  if (columnRange.hasLowerBound()) {    if (columnRange.lowerBoundType() == BoundType.CLOSED) {      where=where.and(gte(tableDDL.getChangeIdColumnName(),columnRange.lowerEndpoint().getUuid()));    } else {      where=where.and(gt(tableDDL.getChangeIdColumnName(),columnRange.lowerEndpoint().getUuid()));    }  }  if (columnRange.hasUpperBound()) {    if (columnRange.upperBoundType() == BoundType.CLOSED) {      where=where.and(lte(tableDDL.getChangeIdColumnName(),columnRange.upperEndpoint().getUuid()));    } else {      where=where.and(lt(tableDDL.getChangeIdColumnName(),columnRange.upperEndpoint().getUuid()));    }  }  Statement statement=where.orderBy(ascending ? asc(tableDDL.getChangeIdColumnName()) : desc(tableDDL.getChangeIdColumnName())).limit(limit).setFetchSize(_singleRowFetchSize).setConsistencyLevel(consistency);  return placement.getKeyspace().getCqlSession().execute(statement);}  }
class C{  protected void jimplifyStatic(DexBody body){  invocation=Jimple.v().newStaticInvokeExpr(getStaticSootMethodRef(),buildParameters(body,true));  body.setDanglingInstruction(this);}  }
class C{  public boolean isUsePercentValuesEnabled(){  return mUsePercentValues;}  }
class C{  private void addSymbol(EsriSymbolInterface symbolObj){  logger.debug("\t" + symbolObj.getName());  symbolMap.put(symbolObj.getName(),symbolObj);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public Boolean isRetained(){  return retained;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  TreePath[] paths=inspectorWindow.getDataTree().getSelectionPaths();  if (paths != null)   inspectorWindow.collapse(paths); else {    for (    NodeBase root : inspectorWindow.getClassification2RootNode().values()) {      inspectorWindow.collapse(root);    }  }}  }
class C{  public static void launchSettingsPage(Context context,String fragmentName){  Intent intent=createIntentForSettingsPage(context,fragmentName);  context.startActivity(intent);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ArrayTypeWithSizeAccess fullCopy(){  ArrayTypeWithSizeAccess tree=(ArrayTypeWithSizeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void syncImmediately(Context context){  Bundle bundle=new Bundle();  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.data_provider_authority),bundle);}  }
class C{  protected String values(Token[] tokens){  StringBuilder buffer=new StringBuilder();  for (  Token token : tokens) {    if (isIgnored(token.kind)) {      continue;    }    if (buffer.length() > 0) {      buffer.append(' ');    }    buffer.append(token.kind.name());    if (token.kind != TokenKind.WHITESPACE && token.value != null) {      buffer.append('(').append(token.value).append(')');    }  }  return buffer.toString();}  }
class C{  private void writeHeader(tsfile_header hdr,ByteBuffer useBuffer) throws OncRpcException, IOException {  try (XdrEncodingFileWriter writer=new XdrEncodingFileWriter(new Crc32AppendingFileWriter(new SizeVerifyingWriter(new FileChannelWriter(file.get(),0),ALL_HDR_CRC_LEN),4),useBuffer)){    Const.writeMimeHeader(writer);    hdr.xdrEncode(writer);  } }  }
class C{  public static WxNewsMediaResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxNewsMediaResult.class);}  }
class C{  public void disable(){  LOGGER.debug("disable listener");  setEnabled(false);}  }
class C{  public boolean intersects(BoundingVolume bv){  return bv.intersectsBoundingBox(this);}  }
class C{  public String guards(){  return soot.PhaseOptions.getString(options,"guards");}  }
class C{  public static void writeBitmapToUri(Context context,Bitmap bitmap,Uri uri,Bitmap.CompressFormat compressFormat,int compressQuality) throws FileNotFoundException {  OutputStream outputStream=null;  try {    outputStream=context.getContentResolver().openOutputStream(uri);    bitmap.compress(compressFormat,compressQuality,outputStream);  }  finally {    closeSafe(outputStream);  }}  }
class C{  @Override protected void finalize(){  if (catfile != null) {    try {      catfile.close();    } catch (    IOException e) {    }  }  catfile=null;}  }
class C{  public FilterNameParameter(String name,ExpressionTypeEnum expressionType,Class<?> dataType){  super();  this.name=name;  this.expressionType=expressionType;  this.dataType=dataType;}  }
class C{  public JpaRelationshipRepository(JpaModule module,Class<S> sourceResourceClass,Class<T> targetResourceClass){  super(module,targetResourceClass);  this.sourceResourceClass=sourceResourceClass;  JpaMapping<?,S> sourceMapping=module.getMapping(sourceResourceClass);  if (sourceMapping != null) {    this.sourceEntityClass=sourceMapping.getEntityClass();    this.sourceMapper=sourceMapping.getMapper();  } else {    this.sourceEntityClass=sourceResourceClass;    this.sourceMapper=IdentityMapper.newInstance();  }  this.entityMeta=module.getMetaLookup().getMeta(sourceEntityClass).asEntity();}  }
class C{  public NameFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public void insert(int offset,short[] values,int valOffset,int len){  if (offset == _pos) {    add(values,valOffset,len);    return;  }  ensureCapacity(_pos + len);  System.arraycopy(_data,offset,_data,offset + len,_pos - offset);  System.arraycopy(values,valOffset,_data,offset,len);  _pos+=len;}  }
class C{  public boolean isGlobalFindable(){  return true;}  }
class C{  private static void start(Context context,Class<?> daemonClazzName,int interval){  String cmd=context.getDir(BIN_DIR_NAME,Context.MODE_PRIVATE).getAbsolutePath() + File.separator + DAEMON_BIN_NAME;  StringBuilder cmdBuilder=new StringBuilder();  cmdBuilder.append(cmd);  cmdBuilder.append(" -p ");  cmdBuilder.append(context.getPackageName());  cmdBuilder.append(" -s ");  cmdBuilder.append(daemonClazzName.getName());  cmdBuilder.append(" -t ");  cmdBuilder.append(interval);  try {    Runtime.getRuntime().exec(cmdBuilder.toString()).waitFor();  } catch (  IOException|InterruptedException e) {    Log.e(TAG,"start daemon error: " + e.getMessage());  }}  }
class C{  public boolean jimplify(cp_info constant_pool[],int this_class,BootstrapMethods_attribute bootstrap_methods_attribute,JimpleBody listBody){  this.bootstrap_methods_attribute=bootstrap_methods_attribute;  Chain<Unit> units=listBody.getUnits();  this.listBody=listBody;  this.units=units;  instructionToFirstStmt=new HashMap<Instruction,Stmt>();  instructionToLastStmt=new HashMap<Instruction,Stmt>();  jmethod=listBody.getMethod();  cm=Scene.v();  Set<Local> initialLocals=new ArraySet<Local>();  List<Type> parameterTypes=jmethod.getParameterTypes();{    Code_attribute ca=method.locate_code_attribute();    LocalVariableTable_attribute la=ca.findLocalVariableTable();    LocalVariableTypeTable_attribute lt=ca.findLocalVariableTypeTable();    Util.v().bodySetup(la,lt,constant_pool);    boolean isStatic=Modifier.isStatic(jmethod.getModifiers());    int currentLocalIndex=0;{      if (!isStatic) {        Local local=Util.v().getLocalForParameter(listBody,currentLocalIndex);        currentLocalIndex++;        units.add(Jimple.v().newIdentityStmt(local,Jimple.v().newThisRef(jmethod.getDeclaringClass().getType())));      }    }{      Iterator<Type> typeIt=parameterTypes.iterator();      int argCount=0;      while (typeIt.hasNext()) {        Local local=Util.v().getLocalForParameter(listBody,currentLocalIndex);        Type type=typeIt.next();        initialLocals.add(local);        units.add(Jimple.v().newIdentityStmt(local,Jimple.v().newParameterRef(type,argCount)));        if (type.equals(DoubleType.v()) || type.equals(LongType.v())) {          currentLocalIndex+=2;        } else {          currentLocalIndex+=1;        }        argCount++;      }    }    Util.v().resetEasyNames();  }  jimplify(constant_pool,this_class);  return true;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set edgeWidth=");  int width=np.getInt(0,1000);  np.matchIgnoreCase(";");  if (getViewer() instanceof GraphView) {    boolean changed=false;    GraphView viewer=(GraphView)getViewer();    for (    Edge e : viewer.getSelectedEdges()) {      viewer.setLineWidth(e,width);      changed=true;    }    if (changed) {      viewer.repaint();    }  }}  }
class C{  @DELETE @Path("/{experimentID}") @ApiOperation(value="Removes a favorite.",response=Response.class,httpMethod="DELETE",protocols="https") @Timed(name="deleteFavorite") public Response deleteFavorite(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authHeader,@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID){  UserInfo.Username userName=authorization.getUser(authHeader);  List<Experiment.ID> favoriteList=favorites.deleteFavorite(userName,experimentID);  return httpHeader.headers(Response.Status.OK).entity(prepareResponseEntity(favoriteList)).build();}  }
class C{  public AudioAddQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public boolean print_debug(){  return soot.PhaseOptions.getBoolean(options,"print-debug");}  }
class C{  private static void pushTransactionStartStamp(Transaction t){  Map<Transaction,Timestamp> map=suspendedTxStartStamps.get();  Timestamp stamp=transactionStartStamp.get();  if (stamp != null) {    map.put(t,stamp);  } else {    Debug.logError("Error in transaction handling - no start stamp to push.",module);  }}  }
class C{  void simplifyInside(){  Set<PurityNode> r=new HashSet<PurityNode>();  internalPassNodes(paramNodes,r,true);  internalPassNodes(ret,r,true);  internalPassNodes(globEscape,r,true);  internalPassNode(PurityGlobalNode.node,r,true);  Iterator it=nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (n.isLoad())     internalPassNode(n,r,true);  }  it=(new LinkedList(nodes)).iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (n.isInside() && !r.contains(n))     removeNode(n);  }  if (doCheck)   sanityCheck();}  }
class C{  public Iterator edges(Node node){  nodeCheck(node,true);  return m_edgeTuples.iterator(edgeRows(node.getRow(),UNDIRECTED));}  }
class C{  private int postTreeBuildInit(CMNode nodeCur,int curIndex){  nodeCur.setMaxStates(fLeafCount);  if ((nodeCur.type() & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY || (nodeCur.type() & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL || (nodeCur.type() & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {    QName qname=new QName(null,null,null,((CMAny)nodeCur).getURI());    fLeafList[curIndex]=new CMLeaf(qname,((CMAny)nodeCur).getPosition());    fLeafListType[curIndex]=nodeCur.type();    curIndex++;  } else   if ((nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_CHOICE) || (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_SEQ)) {    curIndex=postTreeBuildInit(((CMBinOp)nodeCur).getLeft(),curIndex);    curIndex=postTreeBuildInit(((CMBinOp)nodeCur).getRight(),curIndex);  } else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE || nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE || nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE) {    curIndex=postTreeBuildInit(((CMUniOp)nodeCur).getChild(),curIndex);  } else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_LEAF) {    final QName node=((CMLeaf)nodeCur).getElement();    if (node.localpart != fEpsilonString) {      fLeafList[curIndex]=(CMLeaf)nodeCur;      fLeafListType[curIndex]=XMLContentSpec.CONTENTSPECNODE_LEAF;      curIndex++;    }  } else {    throw new RuntimeException("ImplementationMessages.VAL_NIICM: type=" + nodeCur.type());  }  return curIndex;}  }
class C{  public AboutDialog(){  createUI();}  }
class C{  public static byte[] objectToByteBuffer(Object obj) throws Exception {  byte[] result=null;synchronized (outStream) {    outStream.reset();    ObjectOutputStream out=new ObjectOutputStream(outStream);    out.writeObject(obj);    out.flush();    result=outStream.toByteArray();    out.close();  }  return result;}  }
class C{  @Override public int available() throws IOException {  int av=super.available();  if (av <= 0)   return av;  return av / inputChannels;}  }
class C{  public void reset(){  isRender=false;  fractionValue=-1;  radiusSize=0;  originalColorValue=0;}  }
class C{  private LayoutMetadata(){}  }
class C{  public void clear(){  final DefaultTreeModel model=(DefaultTreeModel)dataTree.getModel();  for (  NodeBase root : classification2RootNode.values()) {    root.removeAllChildren();    model.nodeStructureChanged(root);  }}  }
class C{  public void registerForUpdates(){  SigninManager manager=SigninManager.get(getContext());  manager.addSignInAllowedObserver(this);  ProfileDownloader.addObserver(this);  FirstRunSignInProcessor.updateSigninManagerFirstRunCheckDone(getContext());}  }
class C{  @Override public Data read(@Nonnull final String data){  Check.notNull(data,"data");  return readXml(new ByteArrayInputStream(data.getBytes(DEFAULT_CHARSET)),DEFAULT_CHARSET);}  }
class C{  public GameTimeUpdater(GameTime time){  this.time=time;}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public StatusSetQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  protected AdsDeleteCampaignsQuery ids(String value){  return unsafeParam("ids",value);}  }
class C{  public JsonObject toJson(){  JsonObject json=new JsonObject();  json.put("statusCode",statusCode.code());  if (body != null) {    json.put("body",body.toString());  }  json.put("headers",headers.names().stream().map(null).reduce(new JsonArray(),null,null));  return json;}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public static String extractDefaultMajorVersionFromPackageName(String packageName){  String[] segs=packageName.split("\\.");  String lastSeg=segs[segs.length - 1];  Matcher matcher=MAJOR_VERSION_REGEX_PATTERN.matcher(lastSeg);  if (matcher.find()) {    return matcher.group(1);  } else {    return "v1";  }}  }
class C{  private String normalize(String s){  StringBuffer str=new StringBuffer();  int length=s.length();  for (int i=0; i < length; i++) {    char c=s.charAt(i);switch (c) {case '\n':{        str.append("\\n");        break;      }default :{      str.append(c);    }}}return str.toString();}  }
class C{  private void internal_updateSymbolBooleanField(Map<String,String> options,FieldIdEnum field,String key){  boolean value=fieldConfigVisitor.getBoolean(field);  Boolean defaultValue=(Boolean)getDefaultFieldValue(field);  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value != defaultValue) {    options.put(key,String.valueOf(value));  }}  }
class C{  private Closeables(){}  }
class C{  static Class[] reduce(Collection c,boolean keepSupers){  try {    return reduce0((Class[])c.toArray(new Class[c.size()]),keepSupers);  } catch (  ArrayStoreException e) {    throw new IllegalArgumentException("element of collection is not a Class");  }}  }
class C{  public void addColumn(String name,Class type){  addColumn(name,type,null);}  }
class C{  private OtherText copy(OtherText otherText){  if (otherText == null)   return null;  OtherTextImpl copy=new OtherTextImpl();  copy.setTarget(otherText.getTarget());  copy.setText(copy(otherText.getText()));  return copy;}  }
class C{  public Set<Type> usedTypes(){  Set<Type> types=new HashSet<Type>();  for (  DexlibAbstractInstruction i : instructions)   types.addAll(i.introducedTypes());  if (tries != null) {    for (    TryBlock<? extends ExceptionHandler> tryItem : tries) {      List<? extends ExceptionHandler> hList=tryItem.getExceptionHandlers();      for (      ExceptionHandler handler : hList) {        String exType=handler.getExceptionType();        if (exType == null)         continue;        types.add(DexType.toSoot(exType));      }    }  }  return types;}  }
class C{  public static String[] nullToBlank(final String[] stringArray){  String[] result=stringArray;  if (stringArray == null) {    result=new String[]{};  }  return result;}  }
class C{  private String runEditor() throws IOException {  Map<String,String> env=System.getenv();  String editor=Optional.ofNullable(env.get("EDITOR")).orElse(DEFAULT_EDITOR);  ProcessBuilder builder=new ProcessBuilder("/bin/bash","-c",editor + " </dev/tty >/dev/tty " + tempFile.getAbsolutePath());  try {    builder.start().waitFor();  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }  return String.join("\n",Files.readAllLines(tempFile.toPath()));}  }
class C{  public boolean contains(T obj){  lock.lock();  try {    return contains_impl(obj);  }  finally {    lock.unlock();  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public int count(){synchronized (mDiskCacheLock) {    return mLruEntries.size();  }}  }
class C{  public static int parseNormalizedTo(String parameterString){  try {    if (parameterString != null) {      NexusStreamParser np=new NexusStreamParser(new StringReader(parameterString));      while (np.peekNextToken() != NexusStreamParser.TT_EOF) {        if (np.peekMatchIgnoreCase("normalizedTo=")) {          np.matchIgnoreCase("normalizedTo=");          return np.getInt();        }        if (np.peekMatchIgnoreCase("normalized_to=")) {          np.matchIgnoreCase("normalized_to=");          return np.getInt();        }        np.getWordRespectCase();      }    }  } catch (  Exception ex) {  }  return 0;}  }
class C{  void addLogEntry(Collection<LogEntry> browserLogEntries){  logEntries.addAll(browserLogEntries);}  }
class C{  @Override public void computeTargetFeatures(Target target){  if (!(target instanceof DiphoneTarget)) {    tcfForHalfphones.computeTargetFeatures(target);  } else {    DiphoneTarget dt=(DiphoneTarget)target;    tcfForHalfphones.computeTargetFeatures(dt.left);    tcfForHalfphones.computeTargetFeatures(dt.right);  }}  }
class C{  public static User createUser(String name){  return new User(name);}  }
class C{  public FriendsGetOnlineQuery listId(Integer value){  return unsafeParam("list_id",value);}  }
class C{  public NotesEditCommentQuery editComment(UserActor actor,int commentId){  return new NotesEditCommentQuery(getClient(),actor,commentId);}  }
class C{  public PhotosMakeCoverQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private void showNotification(){  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,MainActivity.class),0);  Notification notification=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_notification_app_logo).setWhen(System.currentTimeMillis()).setContentIntent(contentIntent).setCustomContentView(getSmallContentView()).setCustomBigContentView(getBigContentView()).setPriority(NotificationCompat.PRIORITY_MAX).setOngoing(true).build();  startForeground(NOTIFICATION_ID,notification);}  }
class C{  private boolean strictlyAfter(final double t1,final double t2){  return forward ? t1 < t2 : t2 < t1;}  }
class C{  public float angleBetween(Vector2f otherVector){  float angle=FastMath.atan2(otherVector.y,otherVector.x) - FastMath.atan2(y,x);  return angle;}  }
class C{  public boolean isSpringDamper(){  return this.frequency > 0.0 && this.dampingRatio > 0.0;}  }
class C{  public static void sendEMail(final Context context,final String dialogTitle,final String to,final String subject,final String body){  final Intent send=new Intent(Intent.ACTION_SENDTO);  final String uriText="mailto:" + Uri.encode(to) + "?subject="+ Uri.encode(subject)+ "&body="+ Uri.encode(body);  send.setData(Uri.parse(uriText));  context.startActivity(Intent.createChooser(send,dialogTitle));}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private void createLayout(){  this.pnlPanel.removeAll();  GroupLayout layout=new GroupLayout(this.pnlPanel);  this.pnlPanel.setLayout(layout);  layout.setAutoCreateContainerGaps(true);  layout.setAutoCreateGaps(false);  int size=this.pointPanels.size();  ParallelGroup hGroup=layout.createParallelGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    hGroup.addComponent(panel);    if (i < 3) {      panel.btnRemove.setEnabled(false);    } else {      panel.btnRemove.setEnabled(true);    }  }  SequentialGroup vGroup=layout.createSequentialGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    vGroup.addComponent(panel);  }  layout.setHorizontalGroup(hGroup);  layout.setVerticalGroup(vGroup);}  }
class C{  public Pair(K k,V v){  key=k;  value=v;}  }
class C{  public void cleanPatchByVersion(File patchFile){  if (patchDirectory == null || patchFile == null || !patchFile.exists()) {    return;  }  String versionName=SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5(patchFile));  cleanPatchByVersion(versionName);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static float defaultColourOpacity(){  return DEFAULT_COLOUR_OPACITY;}  }
class C{  public void clearDiscCache(){  checkConfiguration();  configuration.discCache.clear();}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public Builder watch(Boolean watch){  this.watch=watch;  return this;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  private String appendNationalNumber(String nationalNumber){  int prefixBeforeNationalNumberLength=prefixBeforeNationalNumber.length();  if (shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > 0 && prefixBeforeNationalNumber.charAt(prefixBeforeNationalNumberLength - 1) != SEPARATOR_BEFORE_NATIONAL_NUMBER) {    return new String(prefixBeforeNationalNumber) + SEPARATOR_BEFORE_NATIONAL_NUMBER + nationalNumber;  } else {    return prefixBeforeNationalNumber + nationalNumber;  }}  }
class C{  public void onProgressBarStarted(){}  }
class C{  public final void finalize(){  try {    closeFallbackInputStream();    closeFallbackOutputStream();    closeCounterDataInputStream();    closeCounterDataOutputStream();  } catch (  Exception e) {    LOG.error("finalize() - The opened streams to the files could not be closed");  }}  }
class C{  public static void shuffle(int[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public SaveSLDTool(){  createUI();}  }
class C{  private void addField(Box parentBox,FieldConfigBase parentField,FieldConfigBase field){  if (field != null) {    field.createUI();    addFieldConfig(field);    fieldConfigManager.addField(field);    if (parentBox != null) {      parentBox.add(field.getPanel());      if (field.getCustomPanels() != null) {        for (        Component component : field.getCustomPanels()) {          parentBox.add(component);        }      }    }  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  display.getSize(theScreenResolution);  screenResolution=theScreenResolution;  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  public VideoGetCommentsQueryWithExtended sort(VideoGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  public CarouselOptions maxScrollingDistance(int maxScrollingDistance){  mMaxScrollingDistance=maxScrollingDistance;  return this;}  }
class C{  public long durationInMillis(){  return this.end.getTime() - this.start.getTime();}  }
class C{  public LockableFileWriter(File file,Charset encoding,boolean append,String lockDir) throws IOException {  super();  file=file.getAbsoluteFile();  if (file.getParentFile() != null) {    FileUtils.forceMkdir(file.getParentFile());  }  if (file.isDirectory()) {    throw new IOException("File specified is a directory");  }  if (lockDir == null) {    lockDir=System.getProperty("java.io.tmpdir");  }  File lockDirFile=new File(lockDir);  FileUtils.forceMkdir(lockDirFile);  testLockDir(lockDirFile);  lockFile=new File(lockDirFile,file.getName() + LCK);  createLock();  out=initWriter(file,encoding,append);}  }
class C{  protected VideoRestoreQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public void addNewValue(int row){  ProcessFunctionParameterValue value=getValue(row);  if (value != null) {    ProcessFunctionParameterValue newValue=new ProcessFunctionParameterValue(value);    valueList.add(row,newValue);    this.fireTableDataChanged();  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  protected void normalizeWhitespace(XMLString value,int fromIndex){  int end=value.offset + value.length;  for (int i=value.offset + fromIndex; i < end; ++i) {    int c=value.ch[i];    if (c < 0x20) {      value.ch[i]=' ';    }  }}  }
class C{  public static String formatPercentage(double percentage){  return percentageDecimalFormat.format(percentage);}  }
class C{  public Object clone(){  throw new RuntimeException();}  }
class C{  public SimpleLogFile(String name,LogRemovalManager logMgr){  init(name,0,logMgr);  readonly=true;}  }
class C{  protected Augmentations modifyAugmentations(Augmentations augs,boolean force){  if (force || isTopLevelIncludedItem()) {    if (augs == null) {      augs=new AugmentationsImpl();    }    augs.putItem(XINCLUDE_INCLUDED,Boolean.TRUE);  }  return augs;}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  public static ChannelBuilder create(String name){  if (exists(name))   throw new IllegalArgumentException(String.format("Channel %s already exists",name));  return new ChannelBuilder(name);}  }
class C{  public static Thread start(long timeout){  return start(Thread.currentThread(),timeout);}  }
class C{  public EigenvalueDecomposition eig(){  return new EigenvalueDecomposition(this);}  }
class C{  public XML11Configuration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(parentSettings);  fComponents=new ArrayList();  fXML11Components=new ArrayList();  fCommonComponents=new ArrayList();  fRecognizedFeatures=new ArrayList();  fRecognizedProperties=new ArrayList();  fFeatures=new HashMap();  fProperties=new HashMap();  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,LOAD_EXTERNAL_DTD,VALIDATION,NAMESPACES,NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SCHEMA_AUGMENT_PSVI,GENERATE_SYNTHETIC_ANNOTATIONS,VALIDATE_ANNOTATIONS,HONOUR_ALL_SCHEMALOCATIONS,NAMESPACE_GROWTH,TOLERATE_DUPLICATES,IGNORE_XSI_TYPE,ID_IDREF_CHECKING,IDENTITY_CONSTRAINT_CHECKING,UNPARSED_ENTITY_CHECKING,USE_GRAMMAR_POOL_ONLY,XMLSCHEMA_VALIDATION,XMLSCHEMA_FULL_CHECKING,EXTERNAL_GENERAL_ENTITIES,EXTERNAL_PARAMETER_ENTITIES,PARSER_SETTINGS};  addRecognizedFeatures(recognizedFeatures);  fFeatures.put(VALIDATION,Boolean.FALSE);  fFeatures.put(NAMESPACES,Boolean.TRUE);  fFeatures.put(EXTERNAL_GENERAL_ENTITIES,Boolean.TRUE);  fFeatures.put(EXTERNAL_PARAMETER_ENTITIES,Boolean.TRUE);  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);  fFeatures.put(LOAD_EXTERNAL_DTD,Boolean.TRUE);  fFeatures.put(SCHEMA_ELEMENT_DEFAULT,Boolean.TRUE);  fFeatures.put(NORMALIZE_DATA,Boolean.TRUE);  fFeatures.put(SCHEMA_AUGMENT_PSVI,Boolean.TRUE);  fFeatures.put(GENERATE_SYNTHETIC_ANNOTATIONS,Boolean.FALSE);  fFeatures.put(VALIDATE_ANNOTATIONS,Boolean.FALSE);  fFeatures.put(HONOUR_ALL_SCHEMALOCATIONS,Boolean.FALSE);  fFeatures.put(NAMESPACE_GROWTH,Boolean.FALSE);  fFeatures.put(TOLERATE_DUPLICATES,Boolean.FALSE);  fFeatures.put(IGNORE_XSI_TYPE,Boolean.FALSE);  fFeatures.put(ID_IDREF_CHECKING,Boolean.TRUE);  fFeatures.put(IDENTITY_CONSTRAINT_CHECKING,Boolean.TRUE);  fFeatures.put(UNPARSED_ENTITY_CHECKING,Boolean.TRUE);  fFeatures.put(USE_GRAMMAR_POOL_ONLY,Boolean.FALSE);  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);  final String[] recognizedProperties={SYMBOL_TABLE,ERROR_HANDLER,ENTITY_RESOLVER,ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_PROCESSOR,DTD_VALIDATOR,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,SCHEMA_VALIDATOR,XML_STRING,XMLGRAMMAR_POOL,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE,SCHEMA_LOCATION,SCHEMA_NONS_LOCATION,LOCALE,ROOT_TYPE_DEF,ROOT_ELEMENT_DECL,SCHEMA_DV_FACTORY};  addRecognizedProperties(recognizedProperties);  if (symbolTable == null) {    symbolTable=new SymbolTable();  }  fSymbolTable=symbolTable;  fProperties.put(SYMBOL_TABLE,fSymbolTable);  fGrammarPool=grammarPool;  if (fGrammarPool != null) {    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);  }  fEntityManager=new XMLEntityManager();  fProperties.put(ENTITY_MANAGER,fEntityManager);  addCommonComponent(fEntityManager);  fErrorReporter=new XMLErrorReporter();  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());  fProperties.put(ERROR_REPORTER,fErrorReporter);  addCommonComponent(fErrorReporter);  fNamespaceScanner=new XMLNSDocumentScannerImpl();  fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);  addComponent(fNamespaceScanner);  fDTDScanner=new XMLDTDScannerImpl();  fProperties.put(DTD_SCANNER,fDTDScanner);  addComponent((XMLComponent)fDTDScanner);  fDTDProcessor=new XMLDTDProcessor();  fProperties.put(DTD_PROCESSOR,fDTDProcessor);  addComponent(fDTDProcessor);  fDTDValidator=new XMLNSDTDValidator();  fProperties.put(DTD_VALIDATOR,fDTDValidator);  addComponent(fDTDValidator);  fDatatypeValidatorFactory=DTDDVFactory.getInstance();  fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  fValidationManager=new ValidationManager();  fProperties.put(VALIDATION_MANAGER,fValidationManager);  fVersionDetector=new XMLVersionDetector();  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {    XMLMessageFormatter xmft=new XMLMessageFormatter();    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);  }  try {    setLocale(Locale.getDefault());  } catch (  XNIException e) {  }  fConfigUpdated=false;}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  public StartRecord(long txNum){  this.txNum=txNum;  this.lsn=null;}  }
class C{  public boolean remove(String str){  hasChanged=true;  return (bList.remove(str));}  }
class C{  public boolean contains(final P point){  return point.distance(center) <= radius;}  }
class C{  public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {  Document document=builder.parse(xmlFile);  return (parseConfiguration(document));}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.item_about_app_container:switch (id) {case 1:      IntroduceActivity.watchAllIntroduce(Mysplash.getInstance().getTopActivity());    break;case 2:  Uri github=Uri.parse("https://github.com/WangDaYeeeeee");v.getContext().startActivity(new Intent(Intent.ACTION_VIEW,github));break;case 3:Uri email=Uri.parse("mailto:wangdayeeeeee@gmail.com");v.getContext().startActivity(new Intent(Intent.ACTION_SENDTO,email));break;case 4:Uri mysplash=Uri.parse("https://github.com/WangDaYeeeeee/MySplash");v.getContext().startActivity(new Intent(Intent.ACTION_VIEW,mysplash));break;}break;}}  }
class C{  public void ignoreTestGetUserFriendlyErrorWithOldGradleVersion(){  ClassNotFoundException rootCause=new ClassNotFoundException(ToolingModelBuilderRegistry.class.getName());  Throwable error=new Throwable(rootCause);  RuntimeException realCause=myErrorHandler.getUserFriendlyError(error,myProjectPath,null);  assertNotNull(realCause);  assertTrue(realCause.getMessage().contains("old, unsupported version of Gradle"));}  }
class C{  Future<LogSegmentMetadata> completeAndCloseLogSegment(final BKLogSegmentWriter writer){  final Promise<LogSegmentMetadata> promise=new Promise<LogSegmentMetadata>();  completeAndCloseLogSegment(writer,promise);  return promise;}  }
class C{  public void incrShortFor(Quaternion other){  double cosom=this.dotProduct(other);  if (cosom < 0) {    incrScale(-1);  }}  }
class C{  public void allow(PermissionFlag flag){  generalPermissions.remove(flag);}  }
class C{  private void loadSpacesFromXMLFile(DocumentBuilder builder) throws Exception {  JSpaceAttributes spaceAttr=null;  String spaceSchemaName=null;  String customSchemaProperties=null;  boolean isLoadOnStartup=false;  FileInputStream is=new FileInputStream(m_ContainerFile);  m_containerFileDocument=builder.parse(is);  m_rootContainerElement=m_containerFileDocument.getDocumentElement();  JSpaceUtilities.normalize(m_rootContainerElement);  m_rootSpaceElement=(Element)m_rootContainerElement.getFirstChild();  Element spaceElement=(Element)m_rootSpaceElement.getFirstChild();  while (spaceElement != null) {    spaceAttr=null;    spaceSchemaName=null;    customSchemaProperties=null;    String spaceName=spaceElement.getNodeName();    if (spaceElement.getFirstChild() != null) {      spaceSchemaName=getNodeValueIfExists(spaceElement,SCHEMA_ELEMENT);      String isLoadOnStartupStr=getNodeValueIfExists(spaceElement,Constants.IS_SPACE_LOAD_ON_STARTUP);      isLoadOnStartupStr=JProperties.getPropertyFromSystem(isLoadOnStartupStr,Boolean.FALSE.toString());      isLoadOnStartup=Boolean.valueOf(isLoadOnStartupStr).booleanValue();      customSchemaProperties=getNodeValueIfExists(spaceElement,SpaceURL.PROPERTIES_FILE_NAME);      if ((_spaceName != null && !_spaceName.equals(spaceName) && !isLoadOnStartup)) {        spaceElement=(Element)spaceElement.getNextSibling();        continue;      }      spaceAttr=new JSpaceAttributes(spaceSchemaName,isLoadOnStartup);      if (customSchemaProperties != null) {        spaceAttr.setCustomProperties(ResourceLoader.findCustomPropertiesObj(customSchemaProperties));        if (spaceAttr.getCustomProperties() != null)         spaceAttr.getCustomProperties().setProperty(SpaceURL.PROPERTIES_FILE_NAME,customSchemaProperties);      }    }    try {      if (spaceAttr == null) {        spaceAttr=new JSpaceAttributes();        if (_customProperties != null) {          spaceAttr.setCustomProperties(_customProperties);        }      }      loadSpace(spaceName,spaceAttr);    } catch (    Exception ex) {      if (_logger.isLoggable(Level.WARNING)) {        _logger.log(Level.WARNING,"Exception occurs during loading " + spaceName + " from xml.",ex);      }    }    spaceElement=(Element)spaceElement.getNextSibling();  }  JSpaceAttributes spaceAttributes=_containerEntry.getSpaceAttributes();  boolean isPrivate=spaceAttributes != null && spaceAttributes.isPrivate();  if (!isPrivate)   m_LookupMng.register(_containerEntry.getClusteredSpaceProxy(),_containerName);}  }
class C{  @Override public void updateValue(String key,int count,String value){  String updatedKey=String.format("%s%s%d",key,DELIMETER,count);  updateValue(updatedKey,value);}  }
class C{  public static ConstraintTableLayout inferGroup(ArrayList<ConstraintWidget> widgets){  ScoutGroup group=new ScoutGroup(widgets.toArray(new ConstraintWidget[widgets.size()]));  ConstraintTableLayout ret=new ConstraintTableLayout();  if (group.mCols * group.mRows >= widgets.size()) {    ret.setNumRows(group.mRows);    ret.setNumCols(group.mCols);  }  if (group.mSupported) {    for (int i=0; i < group.mCols; i++) {      ret.setColumnAlignment(i,group.mColAlign[i]);    }  }  return ret;}  }
class C{  private static ExternalSystem resetBasicFields(ExternalSystem input){  input.setUsername(null);  input.setPassword(null);  return input;}  }
class C{  int size(BinarySearchTreeNode<E> node){  if (node == null)   return 0;  if (node.left == null && node.right == null)   return 1;  return 1 + this.size(node.left) + this.size(node.right);}  }
class C{  private void clearAssociatedModelSaveState(DataSupport baseObj,Collection<AssociationsInfo> associationInfos){  try {    for (    AssociationsInfo associationInfo : associationInfos) {      if (associationInfo.getAssociationType() == Const.Model.MANY_TO_ONE && !baseObj.getClassName().equals(associationInfo.getClassHoldsForeignKey())) {        Collection<DataSupport> associatedModels=getAssociatedModels(baseObj,associationInfo);        if (associatedModels != null && !associatedModels.isEmpty()) {          for (          DataSupport model : associatedModels) {            if (model != null) {              model.clearSavedState();            }          }        }      } else       if (associationInfo.getAssociationType() == Const.Model.ONE_TO_ONE) {        DataSupport model=getAssociatedModel(baseObj,associationInfo);        if (model != null) {          model.clearSavedState();        }      }    }  } catch (  Exception e) {    throw new DataSupportException(e.getMessage());  }}  }
class C{  public static Pose toOpenGlCameraPose(TangoPoseData devicePose,DeviceExtrinsics extrinsics){  Matrix4 startServiceTdevice=tangoPoseToMatrix(devicePose);  Matrix4 openglTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTdevice);  Matrix4 openglWorldTOpenglCamera=openglTDevice.multiply(extrinsics.getDeviceTColorCamera()).multiply(COLOR_CAMERA_T_OPENGL_CAMERA);  return matrixToPose(openglWorldTOpenglCamera);}  }
class C{  public static Shape parse(String s,ShapeFormat shapeFormat){  try {    return fromSpatial4JShape(getReader(shapeFormat).read(s));  } catch (  IOException e) {    throw new IllegalStateException("Failed to parse shape using " + shapeFormat,e);  }catch (  ParseException e) {    throw new IllegalArgumentException("Failed to parse shape using " + shapeFormat,e);  }}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,ProxyInvocationHandler handler,boolean allowCache) throws IllegalArgumentException {  if (loader == null)   loader=AbstractProxy.class.getClassLoader();  Class definedClass=_proxyCache.findInCache(loader,interfaces);  try {    if (definedClass == null) {      String packageName=getPackageName(interfaces);      String className=packageName + ".$GSProxy" + _proxyID.getAndIncrement();      String classInternalName=className.replace('.','/');      String[] interfacesName=new String[interfaces.length];      for (int i=0; i < interfaces.length; ++i) {        interfacesName[i]=Type.getInternalName(interfaces[i]);      }      ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);      cw.visit(Opcodes.V1_5,Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,classInternalName,null,AbstractProxy.INTERNAL_NAME,interfacesName);      MethodHolder[] uniqueMethods=AbstractProxy.getUniqueMethodHolders(interfaces);      createStaticCtor(cw,classInternalName);      createCtor(cw);      createMethods(cw,uniqueMethods,classInternalName);      cw.visitEnd();      byte[] b=cw.toByteArray();      definedClass=ASMFactoryUtils.defineClass(loader,className,b);      _proxyCache.add(loader,interfaces,definedClass);    }    Constructor ctor=definedClass.getConstructor(ProxyInvocationHandler.class,boolean.class);    AbstractProxy proxy=(AbstractProxy)ctor.newInstance(handler,allowCache);    return proxy;  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }}  }
class C{  private PreferenceLayout createPreferenceLayout(Preference preference,PreferenceLayout in){  PreferenceLayout pl=in != null ? in : new PreferenceLayout();  pl.name=preference.getClass().getName();  pl.resId=preference.getLayoutResource();  pl.widgetResId=preference.getWidgetLayoutResource();  return pl;}  }
class C{  @Override public long addUserRole(UserRole userRole){  return sessionTemplate.insert(NAMESPACE + ".addUserRole",userRole);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_HEAL_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201228,skilltarget,skillname);}  }
class C{  protected boolean resetOccurred(){  return resetOccurred;}  }
class C{  private void addRegion(final SubHyperplane<S> sub,final List<Region<T>> list){  if (sub != null) {    @SuppressWarnings("unchecked") final Region<T> region=((AbstractSubHyperplane<S,T>)sub).getRemainingRegion();    if (region != null) {      list.add(region);    }  }}  }
class C{  protected LuaObject(LuaState L,int index){synchronized (L) {    this.L=L;    registerValue(index);  }}  }
class C{  public void resume(){}  }
class C{  public List<ProcessFunctionParameterValue> extractParameters(FunctionName functionName,ProcessFunction selectedProcessFunctionData){  List<ProcessFunctionParameterValue> valueList=new ArrayList<ProcessFunctionParameterValue>();  if (functionName != null) {    for (    Parameter<?> parameter : functionName.getArguments()) {      ProcessFunctionParameterValue value=new ProcessFunctionParameterValue();      populateParameterDefinition(parameter,value);      valueList.add(value);    }  }  if (selectedProcessFunctionData != null) {    for (    Expression parameter : selectedProcessFunctionData.getParameters()) {      List<Expression> parameterList=ParameterFunctionUtils.getExpressionList(parameter);      if ((parameterList != null) && !parameterList.isEmpty()) {        Expression paramName=parameterList.get(0);        ProcessFunctionParameterValue value=findParameterValue(valueList,paramName.toString());        if ((parameterList.size() > 1) && (value != null)) {          Expression paramValue=parameterList.get(1);          value.value=paramValue;        }      }    }  }  return valueList;}  }
class C{  public void reset() throws XNIException {  fNamespaceContext.reset();  fValidationManager.reset();  fEntityManager.reset(this);  fErrorReporter.reset(this);  fSchemaValidator.reset(this);  fConfigUpdated=false;}  }
class C{  @RequestMapping(value="/page",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<BookDTO>> findAll(@RequestBody PageRequestByExample<BookDTO> prbe) throws URISyntaxException {  PageResponse<BookDTO> pageResponse=bookDTOService.findAll(prbe);  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  public void showLoadingDialog(){  LoadingDialog loading=new LoadingDialog(getResources().getString(R.string.log_progress_dialog_text));  FragmentManager fm=getSupportFragmentManager();  FragmentTransaction ft=fm.beginTransaction();  loading.show(ft,DIALOG_WAIT_TAG);}  }
class C{  @Override public void undo(Transaction tx){  Buffer buff=tx.bufferMgr().pin(blk);  LogSeqNum lsn=tx.recoveryMgr().logSetValClr(this.txNum,buff,offset,val,this.lsn);  VanillaDb.logMgr().flush(lsn);  buff.setVal(offset,val,tx.getTransactionNumber(),null);  tx.bufferMgr().unpin(buff);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  private static boolean isPossibleEquippedStigma(Player player,Item item){  if (player == null || (item == null || !item.getItemTemplate().isStigma()))   return false;  long itemSlotToEquip=item.getEquipmentSlot();  if (ItemSlot.isRegularStigma(itemSlotToEquip)) {    int stigmaCount=getPossibleStigmaCount(player);    if (stigmaCount > 0) {      if (stigmaCount == 1) {        if (itemSlotToEquip == ItemSlot.STIGMA1.getSlotIdMask())         return true;      } else       if (stigmaCount == 2) {        if (itemSlotToEquip == ItemSlot.STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA2.getSlotIdMask())         return true;      } else       if (stigmaCount == 3) {        if (itemSlotToEquip == ItemSlot.STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA2.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA3.getSlotIdMask())         return true;      } else       if (stigmaCount == 4) {        if (itemSlotToEquip == ItemSlot.STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA2.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA3.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA4.getSlotIdMask())         return true;      } else       if (stigmaCount == 5) {        if (itemSlotToEquip == ItemSlot.STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA2.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA3.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA4.getSlotIdMask() || itemSlotToEquip == ItemSlot.STIGMA5.getSlotIdMask())         return true;      } else       if (stigmaCount == 6) {        return true;      }    }  } else   if (ItemSlot.isAdvancedStigma(itemSlotToEquip)) {    int advStigmaCount=getPossibleAdvencedStigmaCount(player);    if (advStigmaCount > 0) {      if (advStigmaCount == 1) {        if (itemSlotToEquip == ItemSlot.ADV_STIGMA1.getSlotIdMask())         return true;      } else       if (advStigmaCount == 2) {        if (itemSlotToEquip == ItemSlot.ADV_STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA2.getSlotIdMask())         return true;      } else       if (advStigmaCount == 3) {        if (itemSlotToEquip == ItemSlot.ADV_STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA2.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA3.getSlotIdMask())         return true;      } else       if (advStigmaCount == 4) {        if (itemSlotToEquip == ItemSlot.ADV_STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA2.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA3.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA4.getSlotIdMask())         return true;      } else       if (advStigmaCount == 5) {        if (itemSlotToEquip == ItemSlot.ADV_STIGMA1.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA2.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA3.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA4.getSlotIdMask() || itemSlotToEquip == ItemSlot.ADV_STIGMA5.getSlotIdMask())         return true;      } else       if (advStigmaCount == 6) {        return true;      }    }  }  return false;}  }
class C{  private void textSelectionChanged(ITextSelection selection){  lastSelectionWasText=true;  AnnotateBlock match=null;  for (Iterator iterator=svnAnnotateBlocks.iterator(); iterator.hasNext(); ) {    AnnotateBlock block=(AnnotateBlock)iterator.next();    if (block.contains(selection.getStartLine())) {      match=block;      break;    }  }  if (match == null) {    return;  }  StructuredSelection listSelection=new StructuredSelection(match);  viewer.setSelection(listSelection,true);}  }
class C{  void finishEndElement(){  fInEndElement=false;  fElementAugs=null;}  }
class C{  public String process(Item seg) throws ProcessException {  Item s=seg.getItemAs(Relation.SYLLABLE_STRUCTURE);  if (s == null) {    return "coda";  }  s=s.getNext();  while (s != null) {    if ("+".equals(getPhoneFeature(s,"vc"))) {      return "onset";    }    s=s.getNext();  }  return "coda";}  }
class C{  private void attemptClaimDrag(){  mParent=getParent();  if (mParent != null) {    mParent.requestDisallowInterceptTouchEvent(true);  }}  }
class C{  public static boolean isAccountExpired(Account account){  AccountTime accountTime=account.getAccountTime();  return accountTime != null && accountTime.getExpirationTime() != null && accountTime.getExpirationTime().getTime() < System.currentTimeMillis();}  }
class C{  public IDBPersistenceException(final String msg,final int committed){  super(msg);  this.committed=committed;}  }
class C{  public BackwardFlowAnalysis(DirectedGraph<N> graph){  super(graph);}  }
class C{  public static Pattern convertPerlRegexToPattern(@Nonnull final String regex,@Nonnull final boolean faultTolerant){  Check.notNull(regex,"regex");  String pattern=regex.trim();  final Matcher matcher=faultTolerant ? PERL_STYLE_TOLERANT.matcher(pattern) : PERL_STYLE.matcher(pattern);  if (!matcher.matches()) {    throw new IllegalArgumentException("The given regular expression '" + pattern + "' seems to be not in PERL style or has unsupported modifiers.");  }  pattern=pattern.substring(1);  final int lastIndex=pattern.lastIndexOf('/');  pattern=pattern.substring(0,lastIndex);  final int flags=Flag.convertToBitmask(Flag.parse(matcher.group(1)));  return Pattern.compile(pattern,flags);}  }
class C{  public SM_LOGIN_OK(SessionKey key){  super(3);  this.accountId=key.accountId;  this.loginOk=key.loginOk;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public void insertBefore(E toInsert,E point){  point.redirectJumpsToThisTo(toInsert);  innerChain.insertBefore(toInsert,point);}  }
class C{  public static double weaveDps(final Pokemon p,final int additionalDelay){  return weaveDps(p.getPokemonId(),p.getMove1(),p.getMove2(),additionalDelay);}  }
class C{  public void addLast(E u){  innerChain.addLast(u);}  }
class C{  public static void assertStages(Collection<Key<?>> stages,Element element){  Collection<String> errors=validate(stages,element);  if (!errors.isEmpty()) {    Assert.fail(String.format("Stage validation failed: %s",Joiner.on("\n").join(errors)));  }}  }
class C{  public Access substituted(Collection<TypeVariable> original,List<TypeVariable> substitution){  ASTNode$State state=state();  try {    TypeDecl decl=decl();    int i=0;    for (    TypeVariable typeVar : original) {      if (typeVar == decl)       return new TypeAccess(substitution.getChild(i).getID());      i+=1;    }    return super.substituted(original,substitution);  }  finally {  }}  }
class C{  private void updateLimitedRanks(){  updateAllRanksForRace(Race.ASMODIANS,AbyssRankEnum.GRADE9_SOLDIER.getRequiredAp(),RankingConfig.TOP_RANKING_MAX_OFFLINE_DAYS);  updateAllRanksForRace(Race.ELYOS,AbyssRankEnum.GRADE9_SOLDIER.getRequiredAp(),RankingConfig.TOP_RANKING_MAX_OFFLINE_DAYS);}  }
class C{  @Override public void updateValue(String key,boolean value){  updateValue(key,value ? TRUE : FALSE);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private void sendRequestToServer(HttpURLConnection urlConnection,String xml) throws RequestFailureException {  try {    OutputStream out=new BufferedOutputStream(urlConnection.getOutputStream());    OutputStreamWriter writer=new OutputStreamWriter(out);    writer.write(xml,0,xml.length());    writer.close();    checkServerResponseCode(urlConnection);  } catch (  IOException e) {    throw new RequestFailureException("Failed to write request to server: ",e);  }}  }
class C{  private void moveItemUp(){  moveItem(true);}  }
class C{  public static Map<String,Object> updateEftAccount(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_UPDATE","ACCOUNTING","_UPDATE");  if (result.size() > 0)   return result;  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  GenericValue paymentMethod=null;  GenericValue newPm=null;  GenericValue eftAccount=null;  GenericValue newEa=null;  String paymentMethodId=(String)context.get("paymentMethodId");  try {    eftAccount=EntityQuery.use(delegator).from("EftAccount").where("paymentMethodId",paymentMethodId).queryOne();    paymentMethod=EntityQuery.use(delegator).from("PaymentMethod").where("paymentMethodId",paymentMethodId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdatedReadFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (eftAccount == null || paymentMethod == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("errorString",paymentMethodId),locale));  }  if (!paymentMethod.getString("partyId").equals(partyId) && !security.hasEntityPermission("PAY_INFO","_UPDATE",userLogin) && !security.hasEntityPermission("ACCOUNTING","_UPDATE",userLogin)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("partyId",partyId,"paymentMethodId",paymentMethodId),locale));  }  newPm=GenericValue.create(paymentMethod);  toBeStored.add(newPm);  newEa=GenericValue.create(eftAccount);  toBeStored.add(newEa);  String newPmId=null;  try {    newPmId=delegator.getNextSeqId("PaymentMethod");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeCreated",locale));  }  newPm.set("partyId",partyId);  newPm.set("fromDate",context.get("fromDate"),false);  newPm.set("thruDate",context.get("thruDate"));  newPm.set("description",context.get("description"));  newEa.set("bankName",context.get("bankName"));  newEa.set("routingNumber",context.get("routingNumber"));  newEa.set("accountType",context.get("accountType"));  newEa.set("accountNumber",context.get("accountNumber"));  newEa.set("nameOnAccount",context.get("nameOnAccount"));  newEa.set("companyNameOnAccount",context.get("companyNameOnAccount"));  newEa.set("contactMechId",context.get("contactMechId"));  if (!newEa.equals(eftAccount) || !newPm.equals(paymentMethod)) {    newPm.set("paymentMethodId",newPmId);    newEa.set("paymentMethodId",newPmId);    newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));    isModified=true;  }  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId)) {    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (isModified) {    if (newPartyContactMechPurpose != null)     toBeStored.add(newPartyContactMechPurpose);    paymentMethod.set("thruDate",now);    toBeStored.add(paymentMethod);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeUpdated",UtilMisc.toMap("errorString",e.getMessage()),locale));    }  } else {    result.put("paymentMethodId",paymentMethodId);    result.put("oldPaymentMethodId",paymentMethodId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"AccountingNoChangesMadeNotUpdatingEftAccount",locale));    return result;  }  result.put("paymentMethodId",newEa.getString("paymentMethodId"));  result.put("oldPaymentMethodId",paymentMethodId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public Builder splitSequence(SequenceSplit split){  actionList.add(new DataAction(split));  return this;}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data found when attempting to " + "deserialize MailboxProxy instance");}  }
class C{  public ActionSwitch(){  m_switchVal=0;}  }
class C{  public String scanName() throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(scanName: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  if (XMLChar.isNameStart(fCurrentEntity.ch[offset])) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=fCurrentEntity.ch[offset];      offset=0;      if (load(1,false)) {        fCurrentEntity.columnNumber++;        String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);        if (DEBUG_BUFFER) {          System.out.print(")scanName: ");          XMLEntityManager.print(fCurrentEntity);          System.out.println(" -> " + String.valueOf(symbol));        }        return symbol;      }    }    while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {      if (++fCurrentEntity.position == fCurrentEntity.count) {        int length=fCurrentEntity.position - offset;        if (length == fCurrentEntity.ch.length) {          char[] tmp=new char[fCurrentEntity.ch.length << 1];          System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);          fCurrentEntity.ch=tmp;        } else {          System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);        }        offset=0;        if (load(length,false)) {          break;        }      }    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  if (DEBUG_BUFFER) {    System.out.print(")scanName: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> " + String.valueOf(symbol));  }  return symbol;}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public S2LatLng mul(final double m){  return new S2LatLng(latRadians * m,lngRadians * m);}  }
class C{  public boolean isSetSample(){  return __isset_bit_vector.get(__SAMPLE_ISSET_ID);}  }
class C{  public WallEditCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"wall.editComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  public boolean canBeCollidedWith(){  return !this.isDead;}  }
class C{  public java.lang.Boolean isEscaped(){  return escaped;}  }
class C{  public void resetNodePool(){  ((SchemaParsingConfig)config).resetNodePool();}  }
class C{  protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){  String jobName=clazz.getName();  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();  JobDetail job=new JobDetail(jobName,jobGroup,clazz);  job.setDurability(false);  job.setVolatility(true);  job.setDescription(jobName);  try {    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);    if (scheduler == null) {      if (schedulerProperties == null) {        schedulerProperties=getDefaultSchedulerProperties();      }      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();      scheduler.start();    }    Date date=scheduler.scheduleJob(job,trigger);    Logger.info(this,"Scheduled job " + jobName + ", next trigger is on "+ date);  } catch (  ParseException e) {    Logger.error(this,"Cron expression '" + cronExpression + "' has an exception. Throwing IllegalArgumentException",e);    throw new IllegalArgumentException(e);  }catch (  SchedulerException e) {    Logger.error(this,"Unable to schedule job " + jobName,e);  }}  }
class C{  public double len(){  return Math.sqrt(x * x + y * y);}  }
class C{  public AnnouncementListener() throws IOException {  super("GS-multicast-discovery-announcement-listener");  setDaemon(true);  try {    sock=new MulticastSocket(Constants.getDiscoveryPort());  } catch (  IOException e) {    IOException e1=new IOException("Failed to create multicast socket on [" + Constants.getDiscoveryPort() + "], host address:"+ SystemInfo.singleton().network().getHostId());    e1.initCause(e);    throw e1;  }switch (nicsToUse) {case NICS_USE_ALL:    for (int i=0; i < nics.length; i++) {      try {        sock.setNetworkInterface(nics[i]);        sock.joinGroup(Constants.getAnnouncementAddress());      } catch (      IOException e) {        if (retryNics == null) {          retryNics=new ArrayList(nics.length);        }        retryNics.add(nics[i]);        if (logger.isLoggable(Levels.HANDLED)) {          LogRecord logRec=new LogRecord(Levels.HANDLED,"network interface " + "is bad or not configured " + "for multicast: {0}");          logRec.setParameters(new Object[]{nics[i]});          logRec.setThrown(e);          logger.log(logRec);        }      }    }  break;case NICS_USE_LIST:for (int i=0; i < nics.length; i++) {  try {    sock.setNetworkInterface(nics[i]);    sock.joinGroup(Constants.getAnnouncementAddress());  } catch (  IOException e) {    if (retryNics == null) {      retryNics=new ArrayList(nics.length);    }    retryNics.add(nics[i]);    if (logger.isLoggable(Level.SEVERE)) {      LogRecord logRec=new LogRecord(Level.SEVERE,"network interface is bad or " + "not configured for " + "multicast: {0}");      logRec.setParameters(new Object[]{nics[i]});      logRec.setThrown(e);      logger.log(logRec);    }  }}break;case NICS_USE_SYS:try {sock.joinGroup(Constants.getAnnouncementAddress());} catch (IOException e) {retryNics=new ArrayList(0);if (logger.isLoggable(Level.SEVERE)) {logger.log(Level.SEVERE,"system default network " + "interface is bad or not configured " + "for multicast",e);}}break;case NICS_USE_NONE:break;default :throw new AssertionError("nicsToUse flag out of range " + "(0-3): " + nicsToUse);}}  }
class C{  public static ToolbarTapTarget forToolbarNavigationIcon(android.widget.Toolbar toolbar,CharSequence title){  return forToolbarNavigationIcon(toolbar,title,null);}  }
class C{  private static Writer initWriter(File file,Object encoding,boolean append) throws IOException {  if (file == null) {    throw new NullPointerException("File is missing");  }  if (encoding == null) {    throw new NullPointerException("Encoding is missing");  }  boolean fileExistedAlready=file.exists();  OutputStream stream=null;  Writer writer=null;  try {    stream=new FileOutputStream(file,append);    if (encoding instanceof Charset) {      writer=new OutputStreamWriter(stream,(Charset)encoding);    } else     if (encoding instanceof CharsetEncoder) {      writer=new OutputStreamWriter(stream,(CharsetEncoder)encoding);    } else {      writer=new OutputStreamWriter(stream,(String)encoding);    }  } catch (  IOException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }catch (  RuntimeException ex) {    IOUtils.closeQuietly(writer);    IOUtils.closeQuietly(stream);    if (fileExistedAlready == false) {      FileUtils.deleteQuietly(file);    }    throw ex;  }  return writer;}  }
class C{  public static DefaultColumnEntity of(String name,Column... columns){  if (columns.length == 0) {    return new DefaultColumnEntity(name);  }  return of(name,Arrays.asList(columns));}  }
class C{  public double[] apply(double[] signal){  return new FIROutput(new BufferedDoubleDataSource(signal)).getAllData();}  }
class C{  public String toString(){  return val ? "ServerAuthentication.YES" : "ServerAuthentication.NO";}  }
class C{  public DateTimeColumn atTime(TimeColumn c){  DateTimeColumn newColumn=DateTimeColumn.create(this.name() + " " + c.name());  for (int r=0; r < this.size(); r++) {    int c1=this.getInt(r);    int c2=c.getInt(r);    if (c1 == MISSING_VALUE || c2 == TimeColumn.MISSING_VALUE) {      newColumn.add(DateTimeColumn.MISSING_VALUE);    } else {      LocalDate value1=PackedLocalDate.asLocalDate(c1);      LocalTime time=PackedLocalTime.asLocalTime(c2);      newColumn.add(PackedLocalDateTime.pack(value1,time));    }  }  return newColumn;}  }
class C{  public List<Contentlet> executeSafe(){  Logger.debug(this,"Executing query: " + query.toString());  Logger.debug(this,"Use Paging: " + this.usePaging + ", Limit: "+ this.limit+ ", Offset: "+ this.offset+ ", Sort By: "+ this.sortBy);  try {    if (this.usePaging) {      if (!exactFieldLimitations.isEmpty()) {        Logger.warn(this,"Can't use exact matching in paginated search");      }      PaginatedArrayList<Contentlet> contentlets=ContentUtils.pullPagenated(query.toString(),this.limit,this.offset,this.sortBy,APILocator.getUserAPI().getSystemUser(),null);      this.totalResults=contentlets.getTotalResults();      Logger.debug(this,"Number Of Results: " + contentlets.size() + ", Total Results: "+ contentlets.getTotalResults());      return contentlets;    } else {      List<Contentlet> contentlets=APILocator.getContentletAPI().search(query.toString(),this.limit,this.offset,this.sortBy,APILocator.getUserAPI().getSystemUser(),false);      contentlets=removeNonExactMatches(contentlets);      if (Logger.isDebugEnabled(this.getClass())) {        if (contentlets == null) {          Logger.debug(this,"Contentlets == null");        } else {          Logger.debug(this,"Number Of Results: " + contentlets.size());        }      }      return contentlets;    }  } catch (  DotDataException|DotSecurityException e) {    Logger.warn(this,"Exception while executing query",e);  }  return new ArrayList<Contentlet>();}  }
class C{  public void updateView(){  dir.execute("update reinduce=true;select nodes=previous;",dir.getMainViewer().getCommandManager());}  }
class C{  public PhotosRestoreQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.restore",OkResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  public AudioEditQuery(VkApiClient client,UserActor actor,int ownerId,int audioId){  super(client,"audio.edit",Integer.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  audioId(audioId);}  }
class C{  public void close(){  if (blk != null) {    tx.bufferMgr().unpin(currentBuff);    blk=null;    currentBuff=null;  }}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  @Provides @Singleton @SystemDataStore DataStore provideSystemDataStore(DataCenterConfiguration config,Client jerseyClient,@Named("AdminKey") String apiKey,MetricRegistry metricRegistry){  ServiceFactory<DataStore> clientFactory=DataStoreClientFactory.forClusterAndHttpClient(_configuration.getCluster(),jerseyClient).usingCredentials(apiKey);  URI uri=config.getSystemDataCenterServiceUri();  ServiceEndPoint endPoint=new ServiceEndPointBuilder().withServiceName(clientFactory.getServiceName()).withId(config.getSystemDataCenter()).withPayload(new PayloadBuilder().withUrl(uri.resolve(DataStoreClient.SERVICE_PATH)).withAdminUrl(uri).toString()).build();  return ServicePoolBuilder.create(DataStore.class).withMetricRegistry(metricRegistry).withHostDiscovery(new FixedHostDiscovery(endPoint)).withServiceFactory(clientFactory).buildProxy(new ExponentialBackoffRetry(30,1,10,TimeUnit.SECONDS));}  }
class C{  @ObjectiveCName("respond:data:") void respond(String rpcName,String data){  Object convertedData=MessageParser.convertTyped(data,this.client);  this.callback.onRpcSuccess(rpcName,convertedData);  this.clearTimeouts();}  }
class C{  public XwavesLabelfileReader(Reader reader) throws IOException {  this.reader=new BufferedReader(reader);  parseLabels();  reader.close();}  }
class C{  private IOException syntaxError(String message) throws IOException {  throw new MalformedJsonException(message + locationString());}  }
class C{  public static List<String> extractUrls(String text){  String lines[]=text.split("\\s+");  List<String> containedUrls=new ArrayList<String>();  String urlRegex="((https?|ftp|gopher|telnet|file):((//)|(\\\\))+[\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&]*)";  Pattern pattern=Pattern.compile(urlRegex,Pattern.CASE_INSENSITIVE);  for (  String line : lines) {    Matcher urlMatcher=pattern.matcher(line);    while (urlMatcher.find()) {      containedUrls.add(line.substring(urlMatcher.start(0),urlMatcher.end(0)));    }  }  return containedUrls;}  }
class C{  public VideoAddAlbumQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public InsufficientDataException(Localizable pattern,Object... arguments){  super(pattern,arguments);}  }
class C{  protected UtilsCheckLinkQuery url(String value){  return unsafeParam("url",value);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + JensenShannonDivergence.SqrtJensenShannonDivergence + ";");}  }
class C{  public boolean isIgnoreSensors(){  return sensors;}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public NewsfeedAddBanQuery groupIds(List<Integer> value){  return unsafeParam("group_ids",value);}  }
class C{  private static InvocationConstraint[] reduce(InvocationConstraint[] constraints){  verify(constraints,2);  int n=reduce0(constraints);  if (n == 1) {    throw new IllegalArgumentException("reduced to less than 2 elements");  }  return (InvocationConstraint[])Constraint.trim(constraints,n);}  }
class C{  public Expression whenCondition(Expression exp,Value val){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public boolean isTrustedObject(Object obj,TrustVerifier.Context ctx) throws RemoteException {  return obj instanceof ConstrainableLookupLocator;}  }
class C{  public void addWords(String[] words){  for (  String word : words)   lexicon.addWord(word);}  }
class C{  public static BigFraction parseEditRate(String editRate){  editRate=editRate.contains("/") ? rFrameRateToEditRate(editRate) : editRate;  String[] parts=editRate.split(" ");  try {    if (parts.length == 2) {      return new BigFraction(Long.parseLong(parts[0]),Long.parseLong(parts[1]));    } else     if (parts.length == 1) {      return new BigFraction(Long.parseLong(parts[0]));    }  } catch (  NumberFormatException e) {    throw new ConversionHelperException("Incorrect edit rate! Edit rate must consist of two numbers.",e);  }  throw new ConversionHelperException("Incorrect edit rate! Edit rate must consist of two values.");}  }
class C{  @MainThread public static boolean isRunning(@NonNull final String jobId,@NonNull final String componentId){  checkMainThread();  HashMap<String,Thinr> instances=componentIdToThinrInstances.get(componentId);  if (instances != null) {    Thinr instance=instances.get(jobId);    if (instance != null && !instance.canceled) {      return true;    }  }  return false;}  }
class C{  public boolean equals(Object otherFlow){  if (sameType(otherFlow)) {    @SuppressWarnings("unchecked") DavaFlowSet<T> other=(DavaFlowSet<T>)otherFlow;    if (other.numElements != this.numElements)     return false;    int size=this.numElements;    for (int i=0; i < size; i++)     if (!other.contains(this.elements[i]))     return false;    return true;  } else   return super.equals(otherFlow);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CLIENT_APPKEY:    return isSetClientAppkey();case TRACE_ID:  return isSetTraceId();case SPAN_ID:return isSetSpanId();case ROOT_MESSAGE_ID:return isSetRootMessageId();case CURRENT_MESSAGE_ID:return isSetCurrentMessageId();case SERVER_MESSAGE_ID:return isSetServerMessageId();case DEBUG:return isSetDebug();case SAMPLE:return isSetSample();case CLIENT_IP:return isSetClientIp();}throw new IllegalStateException();}  }
class C{  public boolean simulate_natives(){  return soot.PhaseOptions.getBoolean(options,"simulate-natives");}  }
class C{  private void addToQueue(SerialMessage serialMessage){  if (serialMessage == null) {    return;  }  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {    msgQueue.add(serialMessage);  }  sendMessage();}  }
class C{  public SimpleLockStoredList(boolean Support_Random_Scans,IReusableResourcePool<ReadWriteLock> locksPool){  super(Support_Random_Scans);  lock=new ReentrantSimpleLock();}  }
class C{  public boolean intersects(S2Cell cell,S2Point[] vertices){  if (height >= 1) {    return false;  }  if (isEmpty()) {    return false;  }  if (cell.contains(axis)) {    return true;  }  double sin2Angle=height * (2 - height);  for (int k=0; k < 4; ++k) {    S2Point edge=cell.getEdgeRaw(k);    double dot=axis.dotProd(edge);    if (dot > 0) {      continue;    }    if (dot * dot > sin2Angle * edge.norm2()) {      return false;    }    S2Point dir=S2Point.crossProd(edge,axis);    if (dir.dotProd(vertices[k]) < 0 && dir.dotProd(vertices[(k + 1) & 3]) > 0) {      return true;    }  }  return false;}  }
class C{  private boolean drawComponent(@NotNull Graphics2D gc,@NotNull NlComponent component,boolean parentHandlesPainting){  if (component.viewInfo != null) {    ViewHandler handler=component.getViewHandler();    boolean handlesPainting=false;    if (handler != null && handler instanceof ViewGroupHandler) {      ViewGroupHandler viewGroupHandler=(ViewGroupHandler)handler;      if (viewGroupHandler.handlesPainting()) {        viewGroupHandler.drawGroup(gc,myScreenView,component);        handlesPainting=true;      }    }    if (handler != null) {      handler.paintConstraints(myScreenView,gc,component);    }  }  boolean needsRepaint=false;  for (  NlComponent child : component.getChildren()) {    needsRepaint|=drawComponent(gc,child,parentHandlesPainting);  }  return needsRepaint;}  }
class C{  public static Map<String,Object> sendOrderCompleteNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_COMPLETE");}  }
class C{  private static int hashOf(final int key){  final int h=key ^ ((key >>> 20) ^ (key >>> 12));  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public static void pickImage(Context context,Fragment fragment){  pickImage(context,fragment,REQUEST_PICK);}  }
class C{  public void sendRestorePasswordEmail(final String subject,final String[] recipients,final String url,final String login){  MimeMessagePreparator preparator=null;  this.send(preparator);}  }
class C{  @Internal protected void buildExtraJdbcUrlParams(GroupDataSourceConfig newGroupConfig){  Object extraJdbcUrlParamsObject=this.springProperties.get(Constants.SPRING_PROPERTY_EXTRA_JDBC_URL_PARAMS);  if (extraJdbcUrlParamsObject instanceof String) {    String extraJdbcUrlParams=(String)extraJdbcUrlParamsObject;    if (!StringUtils.isBlank(extraJdbcUrlParams)) {      for (      DataSourceConfig cfg : newGroupConfig.getDataSourceConfigs().values()) {        String[] urlInfo=cfg.getJdbcUrl().split("\\?");        String url=urlInfo[0];        String param=urlInfo.length > 1 ? urlInfo[1] : null;        if (StringUtils.isBlank(param) && StringUtils.isBlank(extraJdbcUrlParams)) {          continue;        }        Map<String,String> map=new HashMap<String,String>();        StringUtils.splitStringToMap(map,param);        StringUtils.splitStringToMap(map,extraJdbcUrlParams);        cfg.setJdbcUrl(String.format("%s?%s",url,StringUtils.joinMapToString(map)));      }    }  }}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public boolean isValid(Date startDate,Date date){  return isValid(startDate.getTime(),date.getTime());}  }
class C{  public Instruction disassemble_bytecode(byte bc[],int index){  byte b=bc[index];  boolean isWide=false;  Instruction i;  int x;  x=(b) & 0xff;switch (x) {case BIPUSH:    i=new Instruction_Bipush();  break;case SIPUSH:i=new Instruction_Sipush();break;case LDC1:i=new Instruction_Ldc1();break;case LDC2:i=new Instruction_Ldc2();break;case LDC2W:i=new Instruction_Ldc2w();break;case ACONST_NULL:i=new Instruction_Aconst_null();break;case ICONST_M1:i=new Instruction_Iconst_m1();break;case ICONST_0:i=new Instruction_Iconst_0();break;case ICONST_1:i=new Instruction_Iconst_1();break;case ICONST_2:i=new Instruction_Iconst_2();break;case ICONST_3:i=new Instruction_Iconst_3();break;case ICONST_4:i=new Instruction_Iconst_4();break;case ICONST_5:i=new Instruction_Iconst_5();break;case LCONST_0:i=new Instruction_Lconst_0();break;case LCONST_1:i=new Instruction_Lconst_1();break;case FCONST_0:i=new Instruction_Fconst_0();break;case FCONST_1:i=new Instruction_Fconst_1();break;case FCONST_2:i=new Instruction_Fconst_2();break;case DCONST_0:i=new Instruction_Dconst_0();break;case DCONST_1:i=new Instruction_Dconst_1();break;case ILOAD:i=new Instruction_Iload();break;case ILOAD_0:i=new Instruction_Iload_0();break;case ILOAD_1:i=new Instruction_Iload_1();break;case ILOAD_2:i=new Instruction_Iload_2();break;case ILOAD_3:i=new Instruction_Iload_3();break;case LLOAD:i=new Instruction_Lload();break;case LLOAD_0:i=new Instruction_Lload_0();break;case LLOAD_1:i=new Instruction_Lload_1();break;case LLOAD_2:i=new Instruction_Lload_2();break;case LLOAD_3:i=new Instruction_Lload_3();break;case FLOAD:i=new Instruction_Fload();break;case FLOAD_0:i=new Instruction_Fload_0();break;case FLOAD_1:i=new Instruction_Fload_1();break;case FLOAD_2:i=new Instruction_Fload_2();break;case FLOAD_3:i=new Instruction_Fload_3();break;case DLOAD:i=new Instruction_Dload();break;case DLOAD_0:i=new Instruction_Dload_0();break;case DLOAD_1:i=new Instruction_Dload_1();break;case DLOAD_2:i=new Instruction_Dload_2();break;case DLOAD_3:i=new Instruction_Dload_3();break;case ALOAD:i=new Instruction_Aload();break;case ALOAD_0:i=new Instruction_Aload_0();break;case ALOAD_1:i=new Instruction_Aload_1();break;case ALOAD_2:i=new Instruction_Aload_2();break;case ALOAD_3:i=new Instruction_Aload_3();break;case ISTORE:i=new Instruction_Istore();break;case ISTORE_0:i=new Instruction_Istore_0();break;case ISTORE_1:i=new Instruction_Istore_1();break;case ISTORE_2:i=new Instruction_Istore_2();break;case ISTORE_3:i=new Instruction_Istore_3();break;case LSTORE:i=new Instruction_Lstore();break;case LSTORE_0:i=new Instruction_Lstore_0();break;case LSTORE_1:i=new Instruction_Lstore_1();break;case LSTORE_2:i=new Instruction_Lstore_2();break;case LSTORE_3:i=new Instruction_Lstore_3();break;case FSTORE:i=new Instruction_Fstore();break;case FSTORE_0:i=new Instruction_Fstore_0();break;case FSTORE_1:i=new Instruction_Fstore_1();break;case FSTORE_2:i=new Instruction_Fstore_2();break;case FSTORE_3:i=new Instruction_Fstore_3();break;case DSTORE:i=new Instruction_Dstore();break;case DSTORE_0:i=new Instruction_Dstore_0();break;case DSTORE_1:i=new Instruction_Dstore_1();break;case DSTORE_2:i=new Instruction_Dstore_2();break;case DSTORE_3:i=new Instruction_Dstore_3();break;case ASTORE:i=new Instruction_Astore();break;case ASTORE_0:i=new Instruction_Astore_0();break;case ASTORE_1:i=new Instruction_Astore_1();break;case ASTORE_2:i=new Instruction_Astore_2();break;case ASTORE_3:i=new Instruction_Astore_3();break;case IINC:i=new Instruction_Iinc();break;case WIDE:{int nextIndex=(bc[index + 1]) & 0xff;switch (nextIndex) {case ILOAD:i=new Instruction_Iload();break;case FLOAD:i=new Instruction_Fload();break;case ALOAD:i=new Instruction_Aload();break;case LLOAD:i=new Instruction_Lload();break;case DLOAD:i=new Instruction_Dload();break;case ISTORE:i=new Instruction_Istore();break;case FSTORE:i=new Instruction_Fstore();break;case ASTORE:i=new Instruction_Astore();break;case LSTORE:i=new Instruction_Lstore();break;case DSTORE:i=new Instruction_Dstore();break;case RET:i=new Instruction_Ret();break;case IINC:i=new Instruction_Iinc();break;default :throw new RuntimeException("invalid wide instruction: " + nextIndex);}((Instruction_bytevar)i).isWide=true;isWide=true;}break;case NEWARRAY:i=new Instruction_Newarray();break;case ANEWARRAY:i=new Instruction_Anewarray();break;case MULTIANEWARRAY:i=new Instruction_Multianewarray();break;case ARRAYLENGTH:i=new Instruction_Arraylength();break;case IALOAD:i=new Instruction_Iaload();break;case LALOAD:i=new Instruction_Laload();break;case FALOAD:i=new Instruction_Faload();break;case DALOAD:i=new Instruction_Daload();break;case AALOAD:i=new Instruction_Aaload();break;case BALOAD:i=new Instruction_Baload();break;case CALOAD:i=new Instruction_Caload();break;case SALOAD:i=new Instruction_Saload();break;case IASTORE:i=new Instruction_Iastore();break;case LASTORE:i=new Instruction_Lastore();break;case FASTORE:i=new Instruction_Fastore();break;case DASTORE:i=new Instruction_Dastore();break;case AASTORE:i=new Instruction_Aastore();break;case BASTORE:i=new Instruction_Bastore();break;case CASTORE:i=new Instruction_Castore();break;case SASTORE:i=new Instruction_Sastore();break;case NOP:i=new Instruction_Nop();break;case POP:i=new Instruction_Pop();break;case POP2:i=new Instruction_Pop2();break;case DUP:i=new Instruction_Dup();break;case DUP2:i=new Instruction_Dup2();break;case DUP_X1:i=new Instruction_Dup_x1();break;case DUP_X2:i=new Instruction_Dup_x2();break;case DUP2_X1:i=new Instruction_Dup2_x1();break;case DUP2_X2:i=new Instruction_Dup2_x2();break;case SWAP:i=new Instruction_Swap();break;case IADD:i=new Instruction_Iadd();break;case LADD:i=new Instruction_Ladd();break;case FADD:i=new Instruction_Fadd();break;case DADD:i=new Instruction_Dadd();break;case ISUB:i=new Instruction_Isub();break;case LSUB:i=new Instruction_Lsub();break;case FSUB:i=new Instruction_Fsub();break;case DSUB:i=new Instruction_Dsub();break;case IMUL:i=new Instruction_Imul();break;case LMUL:i=new Instruction_Lmul();break;case FMUL:i=new Instruction_Fmul();break;case DMUL:i=new Instruction_Dmul();break;case IDIV:i=new Instruction_Idiv();break;case LDIV:i=new Instruction_Ldiv();break;case FDIV:i=new Instruction_Fdiv();break;case DDIV:i=new Instruction_Ddiv();break;case IREM:i=new Instruction_Irem();break;case LREM:i=new Instruction_Lrem();break;case FREM:i=new Instruction_Frem();break;case DREM:i=new Instruction_Drem();break;case INEG:i=new Instruction_Ineg();break;case LNEG:i=new Instruction_Lneg();break;case FNEG:i=new Instruction_Fneg();break;case DNEG:i=new Instruction_Dneg();break;case ISHL:i=new Instruction_Ishl();break;case ISHR:i=new Instruction_Ishr();break;case IUSHR:i=new Instruction_Iushr();break;case LSHL:i=new Instruction_Lshl();break;case LSHR:i=new Instruction_Lshr();break;case LUSHR:i=new Instruction_Lushr();break;case IAND:i=new Instruction_Iand();break;case LAND:i=new Instruction_Land();break;case IOR:i=new Instruction_Ior();break;case LOR:i=new Instruction_Lor();break;case IXOR:i=new Instruction_Ixor();break;case LXOR:i=new Instruction_Lxor();break;case I2L:i=new Instruction_I2l();break;case I2F:i=new Instruction_I2f();break;case I2D:i=new Instruction_I2d();break;case L2I:i=new Instruction_L2i();break;case L2F:i=new Instruction_L2f();break;case L2D:i=new Instruction_L2d();break;case F2I:i=new Instruction_F2i();break;case F2L:i=new Instruction_F2l();break;case F2D:i=new Instruction_F2d();break;case D2I:i=new Instruction_D2i();break;case D2L:i=new Instruction_D2l();break;case D2F:i=new Instruction_D2f();break;case INT2BYTE:i=new Instruction_Int2byte();break;case INT2CHAR:i=new Instruction_Int2char();break;case INT2SHORT:i=new Instruction_Int2short();break;case IFEQ:i=new Instruction_Ifeq();break;case IFNULL:i=new Instruction_Ifnull();break;case IFLT:i=new Instruction_Iflt();break;case IFLE:i=new Instruction_Ifle();break;case IFNE:i=new Instruction_Ifne();break;case IFNONNULL:i=new Instruction_Ifnonnull();break;case IFGT:i=new Instruction_Ifgt();break;case IFGE:i=new Instruction_Ifge();break;case IF_ICMPEQ:i=new Instruction_If_icmpeq();break;case IF_ICMPLT:i=new Instruction_If_icmplt();break;case IF_ICMPLE:i=new Instruction_If_icmple();break;case IF_ICMPNE:i=new Instruction_If_icmpne();break;case IF_ICMPGT:i=new Instruction_If_icmpgt();break;case IF_ICMPGE:i=new Instruction_If_icmpge();break;case LCMP:i=new Instruction_Lcmp();break;case FCMPL:i=new Instruction_Fcmpl();break;case FCMPG:i=new Instruction_Fcmpg();break;case DCMPL:i=new Instruction_Dcmpl();break;case DCMPG:i=new Instruction_Dcmpg();break;case IF_ACMPEQ:i=new Instruction_If_acmpeq();break;case IF_ACMPNE:i=new Instruction_If_acmpne();break;case GOTO:i=new Instruction_Goto();break;case GOTO_W:i=new Instruction_Goto_w();break;case JSR:i=new Instruction_Jsr();break;case JSR_W:i=new Instruction_Jsr_w();break;case RET:i=new Instruction_Ret();break;case RET_W:i=new Instruction_Ret_w();break;case RETURN:i=new Instruction_Return();break;case IRETURN:i=new Instruction_Ireturn();break;case LRETURN:i=new Instruction_Lreturn();break;case FRETURN:i=new Instruction_Freturn();break;case DRETURN:i=new Instruction_Dreturn();break;case ARETURN:i=new Instruction_Areturn();break;case BREAKPOINT:i=new Instruction_Breakpoint();break;case TABLESWITCH:i=(Instruction)new Instruction_Tableswitch();break;case LOOKUPSWITCH:i=(Instruction)new Instruction_Lookupswitch();break;case PUTFIELD:i=(Instruction)new Instruction_Putfield();break;case GETFIELD:i=(Instruction)new Instruction_Getfield();break;case PUTSTATIC:i=(Instruction)new Instruction_Putstatic();break;case GETSTATIC:i=(Instruction)new Instruction_Getstatic();break;case INVOKEVIRTUAL:i=(Instruction)new Instruction_Invokevirtual();break;case INVOKENONVIRTUAL:i=(Instruction)new Instruction_Invokenonvirtual();break;case INVOKESTATIC:i=(Instruction)new Instruction_Invokestatic();break;case INVOKEINTERFACE:i=(Instruction)new Instruction_Invokeinterface();break;case INVOKEDYNAMIC:i=(Instruction)new Instruction_Invokedynamic();break;case ATHROW:i=(Instruction)new Instruction_Athrow();break;case NEW:i=(Instruction)new Instruction_New();break;case CHECKCAST:i=(Instruction)new Instruction_Checkcast();break;case INSTANCEOF:i=(Instruction)new Instruction_Instanceof();break;case MONITORENTER:i=(Instruction)new Instruction_Monitorenter();break;case MONITOREXIT:i=(Instruction)new Instruction_Monitorexit();break;default :i=(Instruction)new Instruction_Unknown(b);break;}i.label=index;if (isWide) i.parse(bc,index + 2); else i.parse(bc,index + 1);return i;}  }
class C{  public NelderMeadSimplex(final double[][] referenceSimplex,final double rho,final double khi,final double gamma,final double sigma){  super(referenceSimplex);  this.rho=rho;  this.khi=khi;  this.gamma=gamma;  this.sigma=sigma;}  }
class C{  public Matrix minus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] - B.A[i][j];    }  }  return X;}  }
class C{  public void resize(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("maxSize <= 0");  }synchronized (this) {    this.maxSize=maxSize;  }  trimToSize(maxSize);}  }
class C{  public AdsGetTargetingStatsQuery adFormat(Integer value){  return unsafeParam("ad_format",value);}  }
class C{  private void launchPicker(Promise contactsPromise,int requestCode){  mContactsPromise=contactsPromise;  Intent intent=new Intent(Intent.ACTION_PICK);  intent.setType(ContactsContract.Contacts.CONTENT_TYPE);  mCtx=getCurrentActivity();  if (intent.resolveActivity(mCtx.getPackageManager()) != null) {    mCtx.startActivityForResult(intent,requestCode);  }}  }
class C{  public static byte[] drawableToByte(Drawable d){  return bitmapToByte(drawableToBitmap(d));}  }
class C{  protected VideoEditAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height / 2);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) / 2 : -((iGen + 1) / 2));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public final TestSubscriber<T> assertNotTerminated(){  if (cdl.getCount() == 0) {    throw new AssertionError("Terminated",null);  }  return this;}  }
class C{  protected void appleStyleAfterCreated(WXEditText editText){  String alignStr=(String)mDomObj.style.get(WXDomPropConstant.WX_TEXTALIGN);  int textAlign=getTextAlign(alignStr);  if (textAlign <= 0) {    textAlign=Gravity.LEFT;  }  editText.setGravity(textAlign | Gravity.CENTER_VERTICAL);  int colorInt=WXResourceUtils.getColor("#999999");  if (colorInt != Integer.MIN_VALUE) {    editText.setHintTextColor(colorInt);  }  editText.setTextSize(TypedValue.COMPLEX_UNIT_PX,WXStyle.getFontSize(mDomObj.style));  editText.setText((String)mDomObj.attr.get("value"));}  }
class C{  public JobStatus(JobStatus rescheduling,long newEarliestRuntimeElapsedMillis,long newLatestRuntimeElapsedMillis,int backoffAttempt){  this(rescheduling.job,rescheduling.getUid(),backoffAttempt);  earliestRunTimeElapsedMillis=newEarliestRuntimeElapsedMillis;  latestRunTimeElapsedMillis=newLatestRuntimeElapsedMillis;}  }
class C{  private String detectScriptUrlPerDNS() throws IOException {  String result=null;  String fqdn=InetAddress.getLocalHost().getCanonicalHostName();  Logger.log(getClass(),LogLevel.TRACE,"Searching per DNS guessing.");  int index=fqdn.indexOf('.');  while (index != -1 && result == null) {    fqdn=fqdn.substring(index + 1);    if (fqdn.indexOf('.') == -1) {      break;    }    try {      URL lookupURL=new URL("http://wpad." + fqdn + "/wpad.dat");      Logger.log(getClass(),LogLevel.TRACE,"Trying url: {0}",lookupURL);      HttpURLConnection con=(HttpURLConnection)lookupURL.openConnection(Proxy.NO_PROXY);      con.setInstanceFollowRedirects(true);      con.setRequestProperty("accept","application/x-ns-proxy-autoconfig");      if (con.getResponseCode() == 200) {        result=lookupURL.toString();      }      con.disconnect();    } catch (    UnknownHostException e) {      Logger.log(getClass(),LogLevel.DEBUG,"Not available!");    }    index=fqdn.indexOf('.');  }  return result;}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (fileName.startsWith("!!!"))   return true;  if (!super.accept(directory,fileName))   return false;  String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && firstLine.startsWith("BLASTN");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_WITH_DIFFICULTY_OPENED(String worldname1,String value2,int num0){  return new SM_SYSTEM_MESSAGE(1400357,worldname1,value2,num0);}  }
class C{  public OptimisticLinkedQueue(){}  }
class C{  private static short rangeCheck(long value) throws NumberFormatException {  if (value < MIN_VALUE || value > MAX_VALUE) {    throw new NumberFormatException("Value is out of range : " + value);  }  return (short)value;}  }
class C{  private void writeAll(DynamicBatchWriter dynamicBatchWriter,int numElements) throws InterruptedException {  TableId tableId=TableId.of("test_dataset","test_table");  List<InsertAllRequest.RowToInsert> elements=new ArrayList<>();  for (int i=0; i < numElements; i++) {    elements.add(null);  }  dynamicBatchWriter.writeAll(tableId,elements,null,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_PARTY_SIZE(String value0){  return new SM_SYSTEM_MESSAGE(1300567,value0);}  }
class C{  public static String prettyPrintNagDuration(Context context,long since,long to){  int fullMinutes=(int)((to - since) / android.text.format.DateUtils.MINUTE_IN_MILLIS);  if (fullMinutes < 60) {    return context.getResources().getQuantityString(R.plurals.notification_nag_duration_minutes,fullMinutes,fullMinutes);  } else {    int hours=fullMinutes % 60;    int minutes=fullMinutes / 60;    if (minutes == 0) {      return context.getResources().getQuantityString(R.plurals.notification_nag_duration_hours,hours,hours);    } else {      return context.getString(R.string.notification_nag_duration_hours_minutes,hours,minutes);    }  }}  }
class C{  private void openDownloadsPage(Context context){  Intent pageView=new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS);  pageView.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  try {    context.startActivity(pageView);  } catch (  ActivityNotFoundException e) {    Log.e(TAG,"Cannot find Downloads app",e);  }}  }
class C{  public static DatabusClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new DatabusClientFactory(clusterName,client);}  }
class C{  public Item(Relation relation,ItemContents sharedContents){  ownerRelation=relation;  if (sharedContents != null) {    contents=sharedContents;  } else {    contents=new ItemContents();  }  parent=null;  daughter=null;  next=null;  prev=null;  getSharedContents().addItemRelation(relation.getName(),this);}  }
class C{  private void initializeGooglePlusVariables(){  GoogleSignInOptions gso=new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestEmail().requestProfile().build();  mGoogleApiClient=new GoogleApiClient.Builder(this).enableAutoManage(this,this).addApi(Auth.GOOGLE_SIGN_IN_API,gso).build();}  }
class C{  public void removeEquipmentId(final ProcessCacheObject processCacheObject,final Long pEquipmentId){  if (processCacheObject.getEquipmentIds().contains(pEquipmentId)) {    processCacheObject.getEquipmentIds().remove(pEquipmentId);  }}  }
class C{  private void moveItemDown(){  moveItem(false);}  }
class C{  public int match_main(String text,String pattern,int loc){  if (text == null || pattern == null) {    throw new IllegalArgumentException("Null inputs. (match_main)");  }  loc=Math.max(0,Math.min(loc,text.length()));  if (text.equals(pattern)) {    return 0;  } else   if (text.length() == 0) {    return -1;  } else   if (loc + pattern.length() <= text.length() && text.substring(loc,loc + pattern.length()).equals(pattern)) {    return loc;  } else {    return match_bitap(text,pattern,loc);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case AVERAGE_LOAD:    return isSetAverageLoad();case OLD_GC:  return isSetOldGC();case THREAD_NUM:return isSetThreadNum();case QUEUE_SIZE:return isSetQueueSize();case METHOD_QPS_MAP:return isSetMethodQpsMap();}throw new IllegalStateException();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP2(long num0){  return new SM_SYSTEM_MESSAGE(1370002,num0);}  }
class C{  public Builder migrations(List<MigrationCache> migrationsCache){  this.migrationsCache=migrationsCache;  return this;}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId){  String resolved=null;  if (systemId != null && systemMap.containsKey(systemId)) {    resolved=(String)systemMap.get(systemId);  } else   if (publicId != null && publicMap.containsKey(publicId)) {    resolved=(String)publicMap.get(publicId);  }  if (resolved != null) {    try {      InputSource iSource=new InputSource(resolved);      iSource.setPublicId(publicId);      URL url=new URL(resolved);      InputStream iStream=url.openStream();      iSource.setByteStream(iStream);      return iSource;    } catch (    Exception e) {      return null;    }  }  return null;}  }
class C{  public TrustSource add(X509Certificate... trustedCertificates){  if (trustedCertificates == null || trustedCertificates.length == 0) {    return this;  }  X509Certificate[] newTrustedCAs=ObjectArrays.concat(trustedCAs,trustedCertificates,X509Certificate.class);  return new TrustSource(newTrustedCAs);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public AdsGetTargetGroupsQuery clientId(Integer value){  return unsafeParam("client_id",value);}  }
class C{  public Boolean isLogSubscription(){  return logSubscription;}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<?>> max(String varName){  return new MaxAggregate(varName);}  }
class C{  public synchronized void begin(Vector2 currentOffset,Vector2 mousePosition,Component component){  this.active=true;  this.offset=currentOffset;  component.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));  this.beginPosition=mousePosition;}  }
class C{  protected GroupsSetCallbackServerQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  protected void showIndeterminate(final CharSequence message){  dismissProgress();  progress=new MaterialDialog.Builder(context).content(message).progress(true,0).build();  progress.show();}  }
class C{  public void initialiseMenu(List<ValueComboBoxDataGroup> dataSelectionList){  this.menu=createMenu(dataSelectionList);  Color color=UIManager.getColor("Menu.selectionBackground");  UIManager.put("Menu.selectionBackground",UIManager.getColor("Menu.background"));  menu.updateUI();  UIManager.put("Menu.selectionBackground",color);  MenuItemListener listener=new MenuItemListener();  setListener(menu,listener);  add(menu);}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.activity_login_closeBtn:    finish();  overridePendingTransition(0,R.anim.activity_slide_out_bottom);break;case R.id.activity_login_loginBtn:{Uri uri=Uri.parse(Mysplash.UNSPLASH_LOGIN_URL);startActivity(new Intent(Intent.ACTION_VIEW,uri));break;}case R.id.activity_login_joinBtn:{Uri uri=Uri.parse(Mysplash.UNSPLASH_JOIN_URL);startActivity(new Intent(Intent.ACTION_VIEW,uri));break;}}}  }
class C{  public void initializeDocument(Document doc){  Map<String,Double> d=new Hashtable<String,Double>();  double numDocs=wordlex == null ? 0 : wordlex.getNumDocs();  for (int i=0; i < doc.tags.length; i++) {    if (wordlex == null) {      int rindex=random.nextInt(doc.words.length + 1);      if (rindex < doc.words.length) {        doc.reason[i]=doc.words[rindex];      } else {        doc.reason[i]=TagAllocationModel.NOISE;      }    } else {      d.clear();      double sampleWeight=0;      for (int j=0; j < doc.words.length; j++) {        Word w=wordlex.getWord(doc.words[j]);        if (w != null) {          double idf=numDocs / w.getDocumentFrequency();          d.put(doc.words[j],idf);          sampleWeight+=idf;        }      }      d.put(TagAllocationModel.NOISE,sampleWeight / d.size());      doc.reason[i]=sample(d);    }    if (!locked) {      ntw.inc(doc.tags[i],doc.reason[i],1);    }  }  for (  String word : doc.words) {    nw.inc(word,doc.tags.length);  }}  }
class C{  public static String chooseRepr(String src,String dst,boolean temp){  URL srcUrl;  URL dstUrl;  try {    srcUrl=new URL(src);    dstUrl=new URL(dst);  } catch (  MalformedURLException e) {    return dst;  }  String srcDomain=URLUtil.getDomainName(srcUrl);  String dstDomain=URLUtil.getDomainName(dstUrl);  String srcHost=srcUrl.getHost();  String dstHost=dstUrl.getHost();  String srcFile=srcUrl.getFile();  String dstFile=dstUrl.getFile();  boolean srcRoot=(srcFile.equals("/") || srcFile.length() == 0);  boolean destRoot=(dstFile.equals("/") || dstFile.length() == 0);  if (!srcDomain.equals(dstDomain)) {    return dst;  }  if (!temp) {    if (srcRoot) {      return src;    } else {      return dst;    }  } else {    if (srcRoot && !destRoot) {      return src;    } else     if (!srcRoot && destRoot) {      return dst;    } else     if (!srcRoot && !destRoot && (srcHost.equals(dstHost))) {      int numSrcPaths=srcFile.split("/").length;      int numDstPaths=dstFile.split("/").length;      if (numSrcPaths != numDstPaths) {        return (numDstPaths < numSrcPaths ? dst : src);      } else {        int srcPathLength=srcFile.length();        int dstPathLength=dstFile.length();        return (dstPathLength < srcPathLength ? dst : src);      }    } else {      int numSrcSubs=srcHost.split("\\.").length;      int numDstSubs=dstHost.split("\\.").length;      return (numDstSubs < numSrcSubs ? dst : src);    }  }}  }
class C{  public VideoSaveQuery(VkApiClient client,UserActor actor){  super(client,"video.save",SaveResult.class);  accessToken(actor.getAccessToken());}  }
class C{  @CallSuper @Override public void onViewDetachedFromWindow(){  if (unbinder != null) {    unbinder.unbind();    unbinder=null;  }}  }
class C{  public void addCurrency(String name,int amount) throws InvalidCurrencyException {  try {    currencies.put(Currency.valueOf(name),amount);  } catch (  Exception e) {    throw new InvalidCurrencyException();  }}  }
class C{  public Builder tileSize(Number tileSize){  this.tileSize=tileSize;  return this;}  }
class C{  public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method,List<? extends Value> args){  return new JInterfaceInvokeExpr(base,method,args);}  }
class C{  static void handleException(final Throwable e){  if (e instanceof Error && !(e instanceof LinkageError || e instanceof OutOfMemoryError || e instanceof StackOverflowError)) {    throw (Error)e;  }  logger.log(Level.INFO,"unmarshalling failure",e);}  }
class C{  public Builder inertia(Boolean inertia){  this.inertia=inertia;  return this;}  }
class C{  private void clearPendingOMADownload(long downloadId,String installNotifyURI){  ClearPendingOMADownloadTask task=new ClearPendingOMADownloadTask(downloadId,installNotifyURI);  task.execute();}  }
class C{  @Override public int compare(PhysicalTable left,PhysicalTable right){  long missingDurationLeft=IntervalUtils.getTotalDuration(partialDataHandler.findMissingTimeGrainIntervals(request,query,Collections.singleton(left),new SimplifiedIntervalList(request.getIntervals()),request.getGranularity()));  long missingDurationRight=IntervalUtils.getTotalDuration(partialDataHandler.findMissingTimeGrainIntervals(request,query,Collections.singleton(right),new SimplifiedIntervalList(request.getIntervals()),request.getGranularity()));  long difference=missingDurationLeft - missingDurationRight;  return (int)Math.max(Math.min(Integer.MAX_VALUE,difference),Integer.MIN_VALUE);}  }
class C{  public void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){  preferences.registerOnSharedPreferenceChangeListener(listener);}  }
class C{  public DynamicTemplateParameterContext addParameter(String paramName,String paramValue){  return addParameter(paramName,paramValue,ContextInfo.EMPTY);}  }
class C{  public FreedomImageView(Context context){  super(context);}  }
class C{  private void put(@NotNull String key,@NotNull DeveloperService service){  if (myServiceCache.containsKey(key)) {    List<DeveloperService> developerServices=myServiceCache.get(key);    developerServices.add(service);    return;  }  DeveloperServiceList services=new DeveloperServiceList();  services.add(service);  myServiceCache.put(key,services);}  }
class C{  public static final int encodeOpcodec(int op){  return (op + 0xD0) ^ 0xD1;}  }
class C{  public boolean isCancelled(){  return cancelled != null && cancelled;}  }
class C{  public void validateKey(){  Validate.notNull(defaultValue,"Missing default of DefaultedMappedRegistry: " + defaultValueKey);}  }
class C{  public void writeTo(PrintWriter out,boolean writeWeights){  out.println("ByteValuedFeatureProcessors");  for (int i=0; i < numByteFeatures; i++) {    if (writeWeights) {      out.print(featureWeights[i] + " | ");    }    out.print(getFeatureName(i));    for (int v=0, vmax=getNumberOfValues(i); v < vmax; v++) {      out.print(" ");      String val=getFeatureValueAsString(i,v);      out.print(val);    }    out.println();  }  out.println("ShortValuedFeatureProcessors");  for (int i=0; i < numShortFeatures; i++) {    if (writeWeights) {      out.print(featureWeights[numByteFeatures + i] + " | ");    }    out.print(getFeatureName(numByteFeatures + i));    for (int v=0, vmax=getNumberOfValues(numByteFeatures + i); v < vmax; v++) {      out.print(" ");      String val=getFeatureValueAsString(numByteFeatures + i,v);      out.print(val);    }    out.println();  }  out.println("ContinuousFeatureProcessors");  for (int i=0; i < numContinuousFeatures; i++) {    if (writeWeights) {      out.print(featureWeights[numByteFeatures + numShortFeatures + i]);      out.print(" ");      out.print(floatWeightFuncts[i]);      out.print(" | ");    }    out.print(getFeatureName(numByteFeatures + numShortFeatures + i));    out.println();  }}  }
class C{  public void restoreRemovedStateManagers(Collection<OpenJPAStateManager> stateManagersToRestore){  for (  OpenJPAStateManager sm : stateManagersToRestore) {    sm.getPersistenceCapable().pcReplaceStateManager(sm);  }}  }
class C{  @Override public Iterator<Pair<K,V>> iterator(){  return backedSet.iterator();}  }
class C{  private void swapWithNextLevel(int level){  List<DataApprovalLevel> dataApprovalLevels=getAllDataApprovalLevels();  int index=level - 1;  DataApprovalLevel d2=dataApprovalLevels.get(index);  DataApprovalLevel d1=dataApprovalLevels.get(index + 1);  dataApprovalLevels.set(index,d1);  dataApprovalLevels.set(index + 1,d2);  update(d1,index);  update(d2,index + 1);}  }
class C{  public static double computePearsonsCorrelation(Collection<Pair<Number,Number>> pairs){  double[] mean=new double[2];  for (  Pair<Number,Number> pair : pairs) {    mean[0]+=pair.get1().doubleValue();    mean[1]+=pair.get2().doubleValue();  }  mean[0]/=pairs.size();  mean[1]/=pairs.size();  double[] stddev=new double[2];  for (  Pair<Number,Number> pair : pairs) {    stddev[0]+=(pair.get1().doubleValue() - mean[0]) * (pair.get1().doubleValue() - mean[0]);    stddev[1]+=(pair.get2().doubleValue() - mean[1]) * (pair.get2().doubleValue() - mean[1]);  }  stddev[0]=Math.sqrt(stddev[0] / pairs.size());  stddev[1]=Math.sqrt(stddev[1] / pairs.size());  double cor=0;  for (  Pair<Number,Number> pair : pairs) {    cor+=(pair.get1().doubleValue() - mean[0]) * (pair.get2().doubleValue() - mean[1]) / (stddev[0] * stddev[1]);  }  cor/=pairs.size();  return cor;}  }
class C{  public void removePassiveEffect(int skillid){  for (  Effect effect : passiveEffectMap.values()) {    if (effect.getSkillId() == skillid) {      effect.endEffect();    }  }}  }
class C{  public RecurrenceRule(GenericValue rule) throws RecurrenceRuleException {  this.rule=rule;  if (!rule.getEntityName().equals("RecurrenceRule"))   throw new RecurrenceRuleException("Invalid RecurrenceRule Value object.");  init();}  }
class C{  public static byte[] writeDouble(double d){  return ByteBuffer.allocate(8).putDouble(d).array();}  }
class C{  public static int hash(double value){  assert !Double.isNaN(value) : "Values of NaN are not supported.";  long bits=Double.doubleToLongBits(value);  return (int)(bits ^ (bits >>> 32));}  }
class C{  protected <T>Response formatResponse(ApiRequest apiRequest,Stream<T> rows,String jsonName,List<String> csvColumnNames){  StreamingOutput output;  Response.ResponseBuilder builder;switch (apiRequest.getFormat()) {case CSV:    builder=apiRequest.getBuilder().header(HttpHeaders.CONTENT_TYPE,"text/csv; charset=utf-8").header(HttpHeaders.CONTENT_DISPOSITION,ResponseFormat.getCsvContentDispositionValue(apiRequest.getUriInfo()));  output=new CsvResponse<>(rows,apiRequest.getPagination(),apiRequest.getUriInfo(),csvColumnNames,objectMappers).getResponseStream();break;case JSON:default :builder=apiRequest.getBuilder().header(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON + "; charset=utf-8");output=new JsonResponse<>(rows,apiRequest.getPagination(),apiRequest.getUriInfo(),jsonName,objectMappers).getResponseStream();break;}return builder.entity(output).build();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public BoardGetTopicsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public CounterMovingAverage(final int numberOfCounters){  counters=new int[numberOfCounters];}  }
class C{  public IsGreaterThanOrEqualToExtended(Expression expression1,Expression expression2,boolean matchCase){  super(expression1,expression2,matchCase);}  }
class C{  public Handler(){}  }
class C{  public WrapLayout(){  super();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200854,skillcaster,skillname);}  }
class C{  public synchronized void createTable(Schema s,String tableName) throws DatabaseException {  if (this.tableLookup.containsKey(tableName)) {    throw new DatabaseException("Table name already exists");  }  this.tableLookup.put(tableName,new Table(s,tableName,this.fileDir));}  }
class C{  public List<GradleCoordinate> resolveDynamicSdkDependencies(@NotNull Multimap<String,GradleCoordinate> dependencies,@Nullable String supportLibVersionFilter,@NotNull AndroidSdkData sdk){  FileOp fileOp=FileOpUtils.create();  List<GradleCoordinate> result=Lists.newArrayListWithCapacity(dependencies.size());  for (  String key : dependencies.keySet()) {    GradleCoordinate highest=Collections.max(dependencies.get(key),COMPARE_PLUS_LOWER);    if (highest.getGroupId() == null || highest.getArtifactId() == null) {      return null;    }    if (!ApplicationManager.getApplication().isUnitTestMode() || Boolean.getBoolean("force.gradlemerger.repository.check")) {      String filter=highest.getGroupId() != null && ImportModule.SUPPORT_GROUP_ID.equals(highest.getGroupId()) ? supportLibVersionFilter : null;      String version=getLibraryRevision(highest.getGroupId(),highest.getArtifactId(),filter,true,sdk.getLocation(),fileOp);      if (version == null && filter != null) {        version=getLibraryRevision(highest.getGroupId(),highest.getArtifactId(),null,true,sdk.getLocation(),fileOp);      }      if (version != null) {        String libraryCoordinate=highest.getId() + ":" + version;        GradleCoordinate available=GradleCoordinate.parseCoordinateString(libraryCoordinate);        if (available != null) {          File archiveFile=getArchiveForCoordinate(available,sdk.getLocation(),fileOp);          if (((archiveFile != null && archiveFile.exists()) || SupportLibrary.forGradleCoordinate(available) == null) && COMPARE_PLUS_LOWER.compare(available,highest) >= 0) {            highest=available;          }        }      }    }    result.add(highest);  }  return result;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  @PUT @Path("{experimentID}/buckets/{bucketLabel}/state/{desiredState}") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Update a bucket state",notes="Can only close a bucket which is not in DRAFT state",response=Bucket.class) @Timed public Response putBucketState(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@PathParam("bucketLabel") @ApiParam(value="Bucket Label") final Bucket.Label bucketLabel,@PathParam("desiredState") @ApiParam(value="Desired Bucket State") final Bucket.State desiredState,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),UPDATE);  UserInfo user=authorization.getUserInfo(userName);  Bucket bucket=buckets.updateBucketState(experimentID,bucketLabel,desiredState,user);  assert bucket != null : "Error updating bucket state";  return httpHeader.headers().entity(bucket).build();}  }
class C{  public boolean containsKey(final int key){  final int hash=hashOf(key);  int index=hash & mask;  if (containsKey(key,index)) {    return true;  }  if (states[index] == FREE) {    return false;  }  int j=index;  for (int perturb=perturb(hash); states[index] != FREE; perturb>>=PERTURB_SHIFT) {    j=probe(perturb,j);    index=j & mask;    if (containsKey(key,index)) {      return true;    }  }  return false;}  }
class C{  @Override public void dispose(){}  }
class C{  public static long hash64(final String text){  final byte[] bytes=text.getBytes();  return hash64(bytes,bytes.length);}  }
class C{  final PriorityQueue<SweepLineVertex> initialize(Vector2[] points){  this.dcel=new DoubleEdgeList(points);  int size=points.length;  PriorityQueue<SweepLineVertex> queue=new PriorityQueue<SweepLineVertex>(size);  SweepLineVertex rootVertex=null;  SweepLineVertex prevVertex=null;  SweepLineEdge rootEdge=null;  SweepLineEdge prevEdge=null;  for (int i=0; i < size; i++) {    Vector2 point=points[i];    SweepLineVertex vertex=new SweepLineVertex(point,i);    vertex.type=SweepLineVertexType.REGULAR;    vertex.prev=prevVertex;    if (prevVertex != null) {      prevVertex.next=vertex;    }    if (rootVertex == null) {      rootVertex=vertex;    }    Vector2 point1=points[i + 1 == size ? 0 : i + 1];    Vector2 point0=points[i == 0 ? size - 1 : i - 1];    vertex.type=this.getType(point0,point,point1);    prevVertex=vertex;    queue.offer(vertex);    SweepLineEdge e=new SweepLineEdge(this.referenceY);    e.v0=vertex;    double my=point.y - point1.y;    if (my == 0.0) {      e.slope=Double.POSITIVE_INFINITY;    } else {      double mx=point.x - point1.x;      e.slope=(mx / my);    }    if (prevEdge != null) {      prevEdge.v1=vertex;    }    if (rootEdge == null) {      rootEdge=e;    }    vertex.left=e;    vertex.right=prevEdge;    prevEdge=e;  }  prevEdge.v1=rootEdge.v0;  rootVertex.right=prevEdge;  rootVertex.prev=prevVertex;  prevVertex.next=rootVertex;  return queue;}  }
class C{  private void add(String world,PermissionHolder holder,String permission){  try {    if (world != null && !world.equals("")) {      holder.setPermission(permission,true,server,world);    } else {      holder.setPermission(permission,true,server);    }  } catch (  ObjectAlreadyHasException ignored) {  }  save(holder);}  }
class C{  public Builder withRevision(long revision){  this.revision=revision;  return this;}  }
class C{  public SAXParser createSAXParser(){  SymbolTable symbolTable=fShadowSymbolTable ? new ShadowedSymbolTable(fSynchronizedSymbolTable) : fSynchronizedSymbolTable;  XMLGrammarPool grammarPool=fShadowGrammarPool ? new ShadowedGrammarPool(fSynchronizedGrammarPool) : fSynchronizedGrammarPool;  return new SAXParser(symbolTable,grammarPool);}  }
class C{  public static boolean isInitialized(){  return SdkProperties.isInitialized();}  }
class C{  public void dump(Writer writer){  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));  pw.println("#========== Wave ==========");  pw.println("#Type: NULL");  pw.println("#Sample_Rate: " + (int)audioFormat.getSampleRate());  pw.println("#Num_of_Samples: " + samples.length / 2);  pw.println("#Num_of_Channels: " + audioFormat.getChannels());  if (samples != null) {    for (int i=0; i < samples.length; i+=2) {      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));    }  }  pw.flush();}  }
class C{  public ResourceUnavailableException(String s){  super(s);}  }
class C{  public DatabaseGetCitiesByIdQuery cityIds(Integer... value){  return unsafeParam("city_ids",value);}  }
class C{  @Override @SuppressWarnings("ThrowsUncheckedException") public final void writeExternal(Element element) throws WriteExternalException {  for (  RunConfigurationState state : states) {    state.writeExternal(element);  }}  }
class C{  public void addRedefinedGroupDecl(XSGroupDecl derived,XSGroupDecl base,SimpleLocator locator){  if (fRGCount == fRedefinedGroupDecls.length) {    fRedefinedGroupDecls=resize(fRedefinedGroupDecls,fRGCount << 1);    fRGLocators=resize(fRGLocators,fRGCount);  }  fRGLocators[fRGCount / 2]=locator;  fRedefinedGroupDecls[fRGCount++]=derived;  fRedefinedGroupDecls[fRGCount++]=base;}  }
class C{  public static void omitField(JsonNode node,String fieldName,ObjectMapper mapper){  if (node.has("context")) {    ((ObjectNode)node).replace(fieldName,mapper.createObjectNode());  }  for (  JsonNode child : node) {    omitField(child,fieldName,mapper);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_TO_EQUIP_STONE_LEARN_PRESKILL(String value0){  return new SM_SYSTEM_MESSAGE(1400213,value0);}  }
class C{  public void testIndexCSVBig() throws Exception {  createIndex();  send("registerFields","{fields: {id: {type: atom, store: true, sort: true}, id2: {type: atom, store: true, sort: true}, body: {type: text, store: true, highlight: true}}}");  send("startIndex");  StringBuilder b=new StringBuilder();  int size=atLeast(512);  for (int i=0; i < 256 * size; i++) {    b.append("wordy ");  }  b.append(" document");  String body=b.toString();  assertTrue(body.length() > 512 * 1024);  byte[] bytes=server.sendBinary("bulkCSVAddDocument",toUTF8("," + server.curIndexName + "\nid,id2,body\n0,1,"+ body+ "\n"));  JSONObject result=parseJSONObject(new String(bytes,StandardCharsets.UTF_8));  assertEquals(1,getInt(result,"indexedDocumentCount"));  refresh();  assertEquals(1,getInt(send("search","{queryText: document}"),"totalHits"));  send("stopIndex");  send("deleteIndex");}  }
class C{  public MessagesGetHistoryAttachmentsQuery startFrom(String value){  return unsafeParam("start_from",value);}  }
class C{  public static String makeLinkAuto(HttpServletRequest request,HttpServletResponse response,String uri,Boolean absPath,Boolean interWebapp,String webSiteId,Boolean controller,Boolean fullPath,Boolean secure,Boolean encode){  RequestHandler rh=RequestHandler.getRequestHandler(request.getServletContext());  return rh.makeLinkAuto(request,response,uri,absPath,interWebapp,webSiteId,controller,fullPath,secure,encode);}  }
class C{  public static void updateAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<AirMapAircraft> callback){  PilotService.updateAircraft(aircraft,callback);}  }
class C{  public XmlStreamReaderException(String msg,String bomEnc,String xmlGuessEnc,String xmlEnc){  this(msg,null,null,bomEnc,xmlGuessEnc,xmlEnc);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_BUY_ITEM_MULTI(String value1,String value0s){  return new SM_SYSTEM_MESSAGE(1300785,value1,value0s);}  }
class C{  public MarketCreateCommentQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){  super(client,"market.createComment",Integer.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);}  }
class C{  public static void main(String[] args) throws Exception {  FlagFieldRegistry registry=Flagz.parse(args);  JmxFlagFieldRegistrar jmx=new JmxFlagFieldRegistrar(registry);  jmx.register(ManagementFactory.getPlatformMBeanServer());  while (running.get()) {    System.out.println("test_some_int: " + someInt.get().toString());    System.out.println("test_some_list: " + someStrings.get());    System.out.println("test_some_map: " + someMap.get());    System.out.println();    Thread.sleep(1000);  }  System.out.println("Bye!");}  }
class C{  private void startPenaltySkill(){  int penaltySkill=skillTemplate.getPenaltySkillId();  if (penaltySkill == 0) {    return;  }  SkillEngine.getInstance().applyEffectDirectly(penaltySkill,firstTarget,effector,0);}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  @Override public void quit(){  if (reusable) {    cleanDriver();    sendEvent(false);  } else {    super.quit();    alive=false;    sendEvent(true);  }}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY){  this(context,interpolator,true);}  }
class C{  public static long readLong(){  return scanner.nextLong();}  }
