class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.837 -0500",hash_original_method="70271B544C5D122FB5ABE2DE9A460926",hash_generated_method="2C7F5A6016FB2375F5ECCDF33662112A") public void readEnumerated() throws IOException {  if (tag != ASN1Constants.TAG_ENUM) {    throw expected("enumerated");  }  if (length == 0) {    throw new ASN1Exception("ASN.1 enumerated: wrong length for identifier at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    int bits=buffer[contentOffset] & 0xFF;    if (buffer[contentOffset + 1] < 0) {      bits+=0x100;    }    if (bits == 0 || bits == 0x1FF) {      throw new ASN1Exception("ASN.1 enumerated: wrong content at [" + contentOffset + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  protected void unregisterResourceListener(final IEditorInput input){  if (input != null && inputListener != null) {    inputListener.stop();    inputListener=null;  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/resynchronize") public TaskList resynchronizeFullCopy(@PathParam("id") URI fullCopyURI) throws InternalException {  Volume fullCopyVolume=queryFullCopy(fullCopyURI);  checkForPendingTasks(Arrays.asList(fullCopyVolume.getTenant().getURI()),Arrays.asList(fullCopyVolume));  return getFullCopyManager().resynchronizeFullCopy(fullCopyVolume.getAssociatedSourceVolume(),fullCopyURI);}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  m_resultContentHandler.endElement(uri,localName,qName);}  }
class C{  public static void doDeactivateVcenterDataCenter(DbClient dbClient,VcenterDataCenter dataCenter){  List<NamedElementQueryResultList.NamedElement> hostUris=listChildren(dbClient,dataCenter.getId(),Host.class,"label","vcenterDataCenter");  Set<URI> doNotDeleteclusters=new HashSet<URI>();  for (  NamedElementQueryResultList.NamedElement hostUri : hostUris) {    Host host=dbClient.queryObject(Host.class,hostUri.getId());    if (host != null && !host.getInactive()) {      if (NullColumnValueGetter.isNullURI(host.getComputeElement())) {        doDeactivateHost(dbClient,host);      } else {        host.setVcenterDataCenter(NullColumnValueGetter.getNullURI());        dbClient.persistObject(host);        if (!NullColumnValueGetter.isNullURI(host.getCluster())) {          doNotDeleteclusters.add(host.getCluster());        }      }    }  }  List<NamedElementQueryResultList.NamedElement> clustersUris=listChildren(dbClient,dataCenter.getId(),Cluster.class,"label","vcenterDataCenter");  for (  NamedElementQueryResultList.NamedElement clusterUri : clustersUris) {    Cluster cluster=dbClient.queryObject(Cluster.class,clusterUri.getId());    if (cluster != null && !cluster.getInactive()) {      if (doNotDeleteclusters.contains(cluster.getId())) {        cluster.setVcenterDataCenter(NullColumnValueGetter.getNullURI());        cluster.setExternalId(NullColumnValueGetter.getNullStr());        dbClient.persistObject(cluster);      } else {        dbClient.markForDeletion(cluster);        EventUtils.deleteResourceEvents(dbClient,cluster.getId());      }    }  }  _log.info("marking DC for deletion: {} {}",dataCenter.getLabel(),dataCenter.getId());  dbClient.markForDeletion(dataCenter);  EventUtils.deleteResourceEvents(dbClient,dataCenter.getId());}  }
class C{  public void replaceSequences() throws EclipseLinkException {  createOrReplaceSequences(false);}  }
class C{  private void actionValidate(){  MUser user=MUser.get(Env.getCtx());  if (!user.isAdministrator()) {    fResult.setText("Not Administrator");    return;  }  m_script.setScript(editor.getText());  Exception e=null;  try {    m_script.validate();  } catch (  ParseException e1) {    e=e1;  }  if (e != null) {    ADialog.error(m_WindowNo,this,"ScriptError",e.toString());    fResult.setText("Syntax errors detected.");  } else   fResult.setText("No syntax errors detected.");}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public static double blackFormulaCashItmProbability(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@StdDev final double stddev,@Real final double displacement){  return blackFormulaCashItmProbability(payoff.optionType(),strike,forward,stddev,displacement);}  }
class C{  private void buildObjectGraph(Object3D parent,StringBuffer sb,String prefix){  sb.append(prefix).append("-->").append((parent.isContainer() ? "GROUP " : "") + parent.getName()).append('\n');  for (int i=0; i < parent.getNumChildren(); i++) {    buildObjectGraph(parent.getChildAt(i),sb,prefix + "\t");  }}  }
class C{  public AppCardBuilder iPadId(String appIPadId){  this.appIPadId=appIPadId;  return this;}  }
class C{  public void testEncode(){  byte[] expectedReturn=binMessagesFixture.chngReqTestValue1;  changeRequestAttribute=new ChangeRequestAttribute();  changeRequestAttribute.setChangeIpFlag(MsgFixture.CHANGE_IP_FLAG_1);  changeRequestAttribute.setChangePortFlag(MsgFixture.CHANGE_PORT_FLAG_1);  byte[] actualReturn=changeRequestAttribute.encode();  assertTrue("Object did not encode properly.",Arrays.equals(expectedReturn,actualReturn));  expectedReturn=binMessagesFixture.chngReqTestValue2;  changeRequestAttribute=new ChangeRequestAttribute();  changeRequestAttribute.setChangeIpFlag(MsgFixture.CHANGE_IP_FLAG_2);  changeRequestAttribute.setChangePortFlag(MsgFixture.CHANGE_PORT_FLAG_2);  actualReturn=changeRequestAttribute.encode();  assertTrue("Object did not encode properly.",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public void updateSelectionText(long[] sel){  if (isDisposed() || position.isDisposed())   return;  String selText=CoreMessages.editor_binary_hex_status_line_selection + sel[0] + " (0x"+ Long.toHexString(sel[0])+ ") - "+ sel[1]+ " (0x"+ Long.toHexString(sel[1])+ ")";  position.setText(selText);}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  public long checksum(){  if (!this.checksumSet) {    computeChecksum();  }  return this.checksum;}  }
class C{  public static CreatePlatformSession parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreatePlatformSession object=new CreatePlatformSession();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createPlatformSession".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreatePlatformSession)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","sessionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void calculateVolumeLevel(byte[] buffer,float[] spectrum){  long currentMaxDb=getMaxDecibels(buffer);  float coefficient=(float)currentMaxDb / maxVolumeDb;  float maxCoefficient=0;  for (int i=0; i < NUMBER_OF_FREQ_BARS; i++) {    if (maxCoefficient < spectrum[i]) {      maxCoefficient=spectrum[i];    }  }  if (maxCoefficient > 0) {    coefficient/=maxCoefficient;    for (int i=0; i < NUMBER_OF_FREQ_BARS; i++) {      spectrum[i]*=coefficient;    }  }}  }
class C{  private static boolean canEliminateLop(Lop node,ArrayList<Lop> execNodes){  if (!node.isAligner())   return false;  int ret=getChildAlignment(node,execNodes,ExecLocation.MapAndReduce);  if (ret == CHILD_BREAKS_ALIGNMENT)   return false; else   if (ret == CHILD_DOES_NOT_BREAK_ALIGNMENT)   return true; else   if (ret == MRCHILD_NOT_FOUND)   return false; else   if (ret == MR_CHILD_FOUND_BREAKS_ALIGNMENT)   return false; else   if (ret == MR_CHILD_FOUND_DOES_NOT_BREAK_ALIGNMENT)   return true; else   throw new RuntimeException("Should not happen. \n");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static int determineConsecutiveBinaryCount(CharSequence msg,byte[] bytes,int startpos) throws WriterException {  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    int textCount=0;    while (textCount < 5 && isText(ch)) {      textCount++;      int i=idx + textCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (textCount >= 5) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (bytes[idx] == 63 && ch != '?') {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Annotation other=(Annotation)obj;  if (!super.equals(other)) {    return false;  }  if ((_type == null) ? (other._type != null) : !_type.equals(other._type)) {    return false;  }  if ((_timestamp == null) ? (other._timestamp != null) : !_timestamp.equals(other._timestamp)) {    return false;  }  if ((_source == null) ? (other._source != null) : !_source.equals(other._source)) {    return false;  }  if ((_id == null) ? (other._id != null) : !_id.equals(other._id)) {    return false;  }  return true;}  }
class C{  protected Person(ElementKey<?,?> key){  super(key);}  }
class C{  public Fixture createFixture(Shape shape,float density){  org.jbox2d.dynamics.Fixture f=body.createFixture(shape.shape,density);  Fixture fixture=new Fixture(this,f);  fixtures.add(fixture);  world.fixtures.put(f,fixture);  return fixture;}  }
class C{  public ConvexHull(double[] x,double[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("x and y have different lengths!");  }  lowerHull=new int[x.length];  upperHull=new int[x.length];  determineLowerAndUpperHull(x,y);}  }
class C{  private static RetryParams retryParams(){  return RetryParams.builder().retryMaxAttempts(3).maxRetryDelayMillis(30000).totalRetryPeriodMillis(120000).initialRetryDelayMillis(250).build();}  }
class C{  public final void fatal(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,null);  }}  }
class C{  public void initHostInfo(String hostDef){  String hostInfo;  if (hostDef.startsWith("/htmlspeed/withfirstplus/")) {    _isWithFirstPlus=true;    hostInfo=hostDef.substring(25);  } else {    _isWithFirstPlus=false;    hostInfo=hostDef.substring(11);  }  if (hostInfo.endsWith("/")) {    _isWithIframe=true;    hostInfo=hostInfo.substring(0,hostInfo.length() - 1);  } else {    _isWithIframe=false;  }  ServiceUtils.setWithIframe(_isWithIframe);  if (hostInfo.indexOf(',') < 0) {    ServiceUtils.setHostInfo(new String[]{hostInfo});  } else {    String[] parts=hostInfo.split(",");    ServiceUtils.setHostInfo(parts);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagnameaccessnodelist.class,args);}  }
class C{  public EndpointV2 prepareNewCinderEndpoint(String region,String serviceId,Boolean isCinderv2){  String url="";  String clusterVIP=getVIP();  if (clusterVIP == null) {    _log.error("Could not retrieve cluster Virtual IP");    throw APIException.internalServerErrors.targetIsNullOrEmpty("Virtual IP");  }  _log.debug("Cluster VIP: {}",clusterVIP);  if (isCinderv2) {    url=CinderConstants.HTTPS_URL + clusterVIP + CinderConstants.COPRHD_URL_V2;  } else {    url=CinderConstants.HTTPS_URL + clusterVIP + CinderConstants.COPRHD_URL_V1;  }  EndpointV2 endpoint=new EndpointV2();  endpoint.setRegion(region);  endpoint.setServiceId(serviceId);  endpoint.setPublicURL(url);  endpoint.setAdminURL(url);  endpoint.setInternalURL(url);  return endpoint;}  }
class C{  @Override public int sumAdjacent(Quadrant quad1,Quadrant quad2,int size){  QuadTreeNode child1=quad1.child(this);  QuadTreeNode child2=quad2.child(this);  size=size / 2;  return child1.sumAdjacent(quad1,quad2,size) + child2.sumAdjacent(quad1,quad2,size);}  }
class C{  public void enableImageTransforms(boolean enable){  mTransformsEnabled=enable;  if (!mTransformsEnabled) {    resetTransformations();  }}  }
class C{  public void acceptType(int modifiers,char[] packageName,char[] simpleTypeName,char[][] enclosingTypeNames,String path){}  }
class C{  public void flip(BufferedReader reader,PrintStream out) throws IOException {  String line=reader.readLine();  while (line != null) {    if (!line.startsWith("-")) {      line=new StringBuilder(line).reverse().toString().replace('>','G').replace('<','>').replace('G','<');    }    out.println(line);    line=reader.readLine();  }}  }
class C{  private void printCollectedMessages(){  if (buffer.isEmpty()) {    return;  }  int firstMessageNum=0;  if (buffer.size() > LIMIT) {    firstMessageNum=buffer.size() - LIMIT;    printLine("--------------------------------------------------------------------------------------");    printLine("-------------------------------- " + firstMessageNum + " MESSAGES MISSED --------------------------------");    consoleArea.add(getFullLogsWidget(getFullLogsLink()));    printLine("--------------------------------------------------------------------------------------");  }  final ListIterator<String> iterator=buffer.listIterator(firstMessageNum);  while (iterator.hasNext()) {    printLine(iterator.next());  }  buffer.clear();  scrollBottom();}  }
class C{  public BasicTransformer(){  super();  viewTransformer.addChangeListener(this);  layoutTransformer.addChangeListener(this);}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  invalidateLayout(comp.getParent());}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  private static void load(final File actionsLogFile) throws IOException {  final List<String> lines=FileUtils.readTextfileLines(actionsLogFile);  for (  final String line : lines) {    final String[] parts=line.split(":");    if (parts.length == 2) {      m_countMap.put(Long.valueOf(parts[0]),Integer.valueOf(parts[1]));    }  }}  }
class C{  public void printStackTrace(PrintWriter out){  Throwable throwable=this.nestable;  if (ExceptionUtils.isThrowableNested()) {    if (throwable instanceof Nestable) {      ((Nestable)throwable).printPartialStackTrace(out);    } else {      throwable.printStackTrace(out);    }    return;  }  List stacks=new ArrayList();  while (throwable != null) {    String[] st=getStackFrames(throwable);    stacks.add(st);    throwable=ExceptionUtils.getCause(throwable);  }  String separatorLine="Caused by: ";  if (!topDown) {    separatorLine="Rethrown as: ";    Collections.reverse(stacks);  }  if (trimStackFrames) {    trimStackFrames(stacks);  }synchronized (out) {    for (Iterator iter=stacks.iterator(); iter.hasNext(); ) {      String[] st=(String[])iter.next();      for (int i=0, len=st.length; i < len; i++) {        out.println(st[i]);      }      if (iter.hasNext()) {        out.print(separatorLine);      }    }  }}  }
class C{  public VariableReference createObject(TestCase test,Type type,int position,int recursionDepth,VariableReference generatorRefToExclude,boolean allowNull,boolean canUseFunctionalMocks,boolean canReuseVariables) throws ConstructionFailedException {  GenericClass clazz=new GenericClass(type);  logger.debug("Going to create object for type {}",type);  VariableReference ret;  if (canUseFunctionalMocks && TimeController.getInstance().getPhasePercentage() >= Properties.FUNCTIONAL_MOCKING_PERCENT && Randomness.nextDouble() < Properties.P_FUNCTIONAL_MOCKING && FunctionalMockStatement.canBeFunctionalMocked(type)) {    logger.debug("Creating functional mock for {}",type);    ret=addFunctionalMock(test,type,position,recursionDepth + 1);  } else {    GenericAccessibleObject<?> o=TestCluster.getInstance().getRandomGenerator(clazz,currentRecursion,test,position,generatorRefToExclude,recursionDepth);    currentRecursion.add(o);    if (o == null) {      if (!TestCluster.getInstance().hasGenerator(clazz)) {        logger.debug("We have no generator for class {}",type);      }      if (!canReuseVariables) {        throw new ConstructionFailedException("Cannot currently instantiate type " + type);      }      for (int i=position - 1; i >= 0; i--) {        Statement statement=test.getStatement(i);        VariableReference var=statement.getReturnValue();        if (!allowNull && ConstraintHelper.isNull(var,test)) {          continue;        }        if (var.isAssignableTo(type) && !(statement instanceof FunctionalMockStatement)) {          logger.debug("Reusing variable at position {}",var.getStPosition());          return var;        }      }      if (canUseFunctionalMocks && Properties.P_FUNCTIONAL_MOCKING > 0 && FunctionalMockStatement.canBeFunctionalMocked(type)) {        logger.debug("Using mock for type {}",type);        ret=addFunctionalMock(test,type,position,recursionDepth + 1);      } else {        throw new ConstructionFailedException("Have no generator for " + type + " canUseFunctionalMocks="+ canUseFunctionalMocks+ ", canBeMocked: "+ FunctionalMockStatement.canBeFunctionalMocked(type));      }    } else     if (o.isField()) {      logger.debug("Attempting generating of {} via field of type {}",type,type);      ret=addField(test,(GenericField)o,position,recursionDepth + 1);    } else     if (o.isMethod()) {      logger.debug("Attempting generating of " + type + " via method "+ (o)+ " of type "+ type);      ret=addMethod(test,(GenericMethod)o,position,recursionDepth + 1);      logger.debug("Success in generating type {} using method \"{}\"",type,o);    } else     if (o.isConstructor()) {      if (logger.isDebugEnabled()) {        logger.debug("Attempting generating of " + type + " via constructor "+ (o)+ " of type "+ type+ ", with constructor type "+ o.getOwnerType()+ ", at position "+ position);      }      ret=addConstructor(test,(GenericConstructor)o,type,position,recursionDepth + 1);    } else {      logger.debug("No generators found for type {}",type);      throw new ConstructionFailedException("No generator found for type " + type);    }  }  ret.setDistance(recursionDepth + 1);  logger.debug("Success in generation of type {} at position {}",type,position);  return ret;}  }
class C{  public static IProject projectRename(final IProject project,final String aNewName,final IProgressMonitor aMonitor){  try {    final IProjectDescription description=project.getDescription();    final IPath basePath=description.getLocation().removeLastSegments(1).removeTrailingSeparator();    final IPath newPath=basePath.append(aNewName.concat(TOOLBOX_DIRECTORY_SUFFIX)).addTrailingSeparator();    description.setLocation(newPath);    description.setName(aNewName);    project.refreshLocal(IResource.DEPTH_INFINITE,aMonitor);    project.copy(description,IResource.NONE | IResource.SHALLOW,aMonitor);    project.delete(IResource.NONE,aMonitor);    return ResourcesPlugin.getWorkspace().getRoot().getProject(aNewName);  } catch (  CoreException e) {    Activator.getDefault().logError("Error renaming a specification",e);  }  return null;}  }
class C{  public Duration toDurationFrom(ReadableInstant startInstant){  long startMillis=DateTimeUtils.getInstantMillis(startInstant);  Chronology chrono=DateTimeUtils.getInstantChronology(startInstant);  long endMillis=chrono.add(this,startMillis,1);  return new Duration(startMillis,endMillis);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMUseElement(prefix,(AbstractDocument)doc);}  }
class C{  public BoundsClippingPanel(final List<Neuron> neuronList,final Window parent){  this.neuronList=neuronList;  this.parent=parent;  clippingDropDown.addActionListener(null);  boundsPanel.setLayout(new BoxLayout(boundsPanel,BoxLayout.Y_AXIS));  GridLayout gl=new GridLayout(0,2);  gl.setVgap(2);  clippingPanel.setLayout(gl);  clippingPanel.add(new JLabel("Clipping: "));  clippingPanel.add(clippingDropDown);  clippingPanel.setAlignmentX(CENTER_ALIGNMENT);  boundsPanel.add(clippingPanel);  boundsPanel.add(Box.createVerticalStrut(5));  JPanel sbp2=new JPanel(gl);  sbp2.add(upperBound);  sbp2.add(tfCeiling);  sbp2.add(lowerBound);  sbp2.add(tfFloor);  sbp2.setAlignmentX(CENTER_ALIGNMENT);  boundsPanel.add(sbp2);  boundsPanel.add(Box.createVerticalStrut(5));  boundsPanel.setAlignmentX(CENTER_ALIGNMENT);  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  this.add(clippingPanel);  this.add(boundsPanel);}  }
class C{  @Override public String answer(){  return getString(ANSWER_KEY);}  }
class C{  public Swagger2MarkupConfigBuilder withParameterOrdering(Comparator<Parameter> parameterOrdering){  Validate.notNull(parameterOrdering,"%s must not be null","parameterOrdering");  config.parameterOrderBy=OrderBy.CUSTOM;  config.parameterOrdering=parameterOrdering;  return this;}  }
class C{  protected int toIndex(double index){  if (index == 0) {    return 0;  }  int i=(int)index;  return i == 0 ? 1 : i;}  }
class C{  boolean isContextDependent(){  return modeMap != null;}  }
class C{  public String signature(int i){  return descriptor(i);}  }
class C{  public void attachLocalMediaStream(MediaStream mediaStream){  this.pcClient.setLocalMediaStream(mediaStream);}  }
class C{  public static void main(String... args) throws IOException {  new Player().run(args);}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  public static byte[] decode(String input) throws AddressFormatException {  if (input.length() == 0) {    return new byte[0];  }  byte[] input58=new byte[input.length()];  for (int i=0; i < input.length(); ++i) {    char c=input.charAt(i);    int digit=c < 128 ? INDEXES[c] : -1;    if (digit < 0) {      throw new AddressFormatException("Illegal character " + c + " at position "+ i);    }    input58[i]=(byte)digit;  }  int zeros=0;  while (zeros < input58.length && input58[zeros] == 0) {    ++zeros;  }  byte[] decoded=new byte[input.length()];  int outputStart=decoded.length;  for (int inputStart=zeros; inputStart < input58.length; ) {    decoded[--outputStart]=divmod(input58,inputStart,58,256);    if (input58[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < decoded.length && decoded[outputStart] == 0) {    ++outputStart;  }  return Arrays.copyOfRange(decoded,outputStart - zeros,decoded.length);}  }
class C{  private static JsonNode toErrorNode(String detail,Integer status){  ObjectNode formattedError=JsonNodeFactory.instance.objectNode();  formattedError.set("detail",JsonNodeFactory.instance.textNode(detail));  if (status != null) {    formattedError.set("status",JsonNodeFactory.instance.numberNode(status));  }  return formattedError;}  }
class C{  protected void init(boolean createVBOs){}  }
class C{  private ExprOrOpArgNode generateExprOrOpArg(SymbolNode mainOp,TreeNode mainSTN,int argPosition,TreeNode argRoot,ModuleNode mn) throws AbortException {  SymbolNode argOp=null;  int argArity;  int arityExpected;  if (mainOp == null) {    errors.addError(mainSTN.getLocation(),"Unable to generate expression or operator argument; " + "this is probably because of previously reported errors.");    return nullOAN;  }  if (mainOp instanceof ModuleNode) {    errors.addError(mainSTN.getLocation(),"Module name '" + mainOp.getName() + "' used as operator.");    return nullOAN;  }  if (argPosition + 1 > mainOp.getArity()) {    errors.addError(mainSTN.getLocation(),"Too many arguments for operator '" + mainOp.getName() + "'.  There should be only "+ mainOp.getArity()+ ".");    return nullOAN;  }  if ((mainOp.getKind() == UserDefinedOpKind) || (mainOp.getKind() == ModuleInstanceKind)) {    arityExpected=((OpDefNode)mainOp).getParams()[argPosition].getArity();  } else {    arityExpected=0;  }  ;  if (arityExpected == 0) {    return generateExpression(argRoot,mn);  } else {    if (!(argRoot.getImage().equals("N_GeneralId") || argRoot.getImage().equals("N_GenInfixOp") || argRoot.getImage().equals("N_GenNonExpPrefixOp")|| argRoot.getImage().equals("N_GenPostfixOp")|| argRoot.getImage().equals("N_GenPrefixOp")|| argRoot.getImage().equals("N_Lambda"))) {      errors.addError(argRoot.getLocation(),"An expression appears as argument number " + (argPosition + 1) + " (counting from 1) to operator '"+ mainOp.getName()+ "', in a position an operator is required.");      return nullOAN;    }    if (argRoot.getKind() == N_Lambda) {      argOp=generateLambda(argRoot,mn);      if (arityExpected == argOp.getArity()) {        return new OpArgNode(argOp,argRoot,mn);      } else {        errors.addError(mainSTN.getLocation(),"Lambda expression with arity " + argOp.getArity() + " used as argument "+ (argPosition + 1)+ " of operator `"+ mainOp.getName()+ "', \nbut an operator of arity "+ arityExpected+ " is required.");        return nullOpArg;      }    } else {      if (argRoot.getKind() == N_GeneralId) {        return (ExprOrOpArgNode)selectorToNode(genIdToSelector((SyntaxTreeNode)argRoot),arityExpected,false,false,mn);      }      ;      GenID genID=generateGenID(argRoot,mn);      argOp=genID.getFullyQualifiedOp();      ;      if (argOp == null)       return nullOAN;      argArity=argOp.getArity();      if (arityExpected == argArity && genID.getArgs().length == 0) {        return new OpArgNode(genID.getFullyQualifiedOp(),argRoot,mn);      } else       if (genID.getArgs().length > 0) {        errors.addError(mainSTN.getLocation(),"Expression used in argument position " + (argPosition + 1) + " (counting from 1) of operator `"+ mainOp.getName()+ "', whereas an operator of arity "+ arityExpected+ " is required.");        return nullOpArg;      } else {        errors.addError(mainSTN.getLocation(),"Operator with incorrect arity passed as argument. " + "\nOperator '" + argOp.getName() + "' of arity "+ argArity+ " is argument number "+ (argPosition + 1)+ " (counting from 1) to operator `"+ mainOp+ "', \nbut an operator of arity "+ arityExpected+ " was expected.");        return nullOpArg;      }    }  }}  }
class C{  private static void applyComponentActionPermission(Window window,String screenId,Integer permissionValue,String componentId){  final Matcher matcher=COMPONENT_ACTION_PATTERN.matcher(componentId);  if (matcher.find()) {    final String customComponentId=matcher.group(1);    final String actionId=matcher.group(2);    final Component actionHolderComponent=window.getComponent(customComponentId);    if (actionHolderComponent != null) {      if (actionHolderComponent instanceof Component.SecuredActionsHolder) {        ActionsPermissions permissions=((Component.SecuredActionsHolder)actionHolderComponent).getActionsPermissions();        if (permissionValue == UiPermissionValue.HIDE.getValue()) {          permissions.addHiddenActionPermission(actionId);        } else         if (permissionValue == UiPermissionValue.READ_ONLY.getValue()) {          permissions.addDisabledActionPermission(actionId);        }      } else {        log.warn(String.format("Couldn't apply permission on action %s for component %s in window %s",actionId,customComponentId,screenId));      }    } else {      log.info(String.format("Couldn't find component %s in window %s",componentId,screenId));    }  } else {    log.warn(String.format("Incorrect permission definition for component %s in window %s",componentId,screenId));  }}  }
class C{  public void createTables(org.eclipse.persistence.sessions.DatabaseSession session){  createTables(session,new JPAMSchemaManager(session));}  }
class C{  public int writeTelegram(char[] buffer){  return (writeTelegram(buffer,0,null));}  }
class C{  public void fAAccountsCompleted(){}  }
class C{  public void test_DELETE_accessPath_delete_p() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,new URIImpl("http://www.w3.org/2000/01/rdf-schema#label"),null);  assertEquals(2,mutationResult);}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  public static boolean equalsIgnoreWhitespace(String string1,String string2,boolean ignoreCase){  string1=ALL_WHITESPACE_PATTERN.matcher(string1).replaceAll("");  string2=ALL_WHITESPACE_PATTERN.matcher(string2).replaceAll("");  return (ignoreCase ? string1.equalsIgnoreCase(string2) : string1.equals(string2));}  }
class C{  public static POUserGroup toPOUserGroup(UserGroup userGroup){  return toPOUserGroup(userGroup,PerformanceHint.ALL_FIELDS);}  }
class C{  public void addStats(int decay,float saturationModifier){  this.decayLevel=MathHelper.clamp_int(this.decayLevel + decay,0,20);  this.decaySaturationLevel=MathHelper.clamp_float(this.decaySaturationLevel + (float)-decay * saturationModifier * 2.0F,0.0F,(float)(20 - this.decayLevel) / 4.0F);  if (this.capability != null)   this.capability.markDirty();}  }
class C{  public void dismiss(int position){  int height=touchListener.dismiss(position);  if (height > 0) {    touchListener.handlerPendingDismisses(height);  } else {    int[] dismissPositions=new int[1];    dismissPositions[0]=position;    onDismiss(dismissPositions);    touchListener.resetPendingDismisses();  }}  }
class C{  void update(String val){  this.val=val;}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  public Item transform(RPObject rpobject){  if (rpobject.get("type").equals("item")) {    final String name=UpdateConverter.updateItemName(rpobject.get("name"));    final Item item=UpdateConverter.updateItem(name);    if (item == null) {      return null;    }    item.setID(rpobject.getID());    boolean autobind=item.has("autobind");    if (rpobject.has("persistent") && (rpobject.getInt("persistent") == 1)) {      final RPClass rpclass=item.getRPClass();      item.fill(rpobject);      item.setRPClass(rpclass);      item.put("name",name);      if (autobind) {        item.put("autobind","");      }    }    if (item instanceof StackableItem) {      int quantity=1;      if (rpobject.has("quantity")) {        quantity=rpobject.getInt("quantity");      } else {        logger.warn("Adding quantity=1 to " + rpobject + ". Most likely cause is that this item was not stackable in the past");      }      ((StackableItem)item).setQuantity(quantity);      if (quantity <= 0) {        logger.warn("Ignoring item " + name + " because this item has an invalid quantity: "+ quantity);        return null;      }    }    final String[] individualAttributes={"infostring","description","bound","undroppableondeath"};    for (    final String attribute : individualAttributes) {      if (rpobject.has(attribute)) {        item.put(attribute,rpobject.get(attribute));      }    }    if (rpobject.has("logid")) {      item.put("logid",rpobject.get("logid"));    }    for (    RPSlot slot : rpobject.slots()) {      RPSlot itemSlot=item.getSlot(slot.getName());      for (      RPObject obj : slot) {        itemSlot.add(transform(obj));      }    }    return item;  } else {    logger.warn("Non-item object found: " + rpobject);    return null;  }}  }
class C{  @Override public void insertRow() throws SQLException {  try {    debugCodeCall("insertRow");    checkUpdatable();    if (insertRow == null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    getUpdatableRow().insertRow(insertRow);    insertRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void resetUnitState(final IDelegateBridge aBridge){  final Change change=MoveDelegate.getResetUnitStateChange(getData());  if (!change.isEmpty()) {    m_bridge.getHistoryWriter().startEvent("Cleaning up unit state.");    m_bridge.addChange(change);  }}  }
class C{  public static byte[] formatMessageForSigning(String message){  try {    ByteArrayOutputStream bos=new ByteArrayOutputStream();    bos.write(BITCOIN_SIGNED_MESSAGE_HEADER_BYTES.length);    bos.write(BITCOIN_SIGNED_MESSAGE_HEADER_BYTES);    byte[] messageBytes=message.getBytes(Charsets.UTF_8);    VarInt size=new VarInt(messageBytes.length);    bos.write(size.encode());    bos.write(messageBytes);    return bos.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public DriverTask createConsistencyGroup(VolumeConsistencyGroup consistencyGroup){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_CREATE_CONSISTENCY_GROUP);  return cgHelper.createConsistencyGroup(consistencyGroup,task,this.driverRegistry);}  }
class C{  private NetworkModule createNetworkModule(String address,MqttConnectOptions options) throws MqttException, MqttSecurityException {  final String methodName="createNetworkModule";  log.fine(CLASS_NAME,methodName,"115",new Object[]{address});  NetworkModule netModule;  String shortAddress;  String host;  int port;  SocketFactory factory=options.getSocketFactory();  int serverURIType=MqttConnectOptions.validateURI(address);switch (serverURIType) {case MqttConnectOptions.URI_TYPE_TCP:    shortAddress=address.substring(6);  host=getHostName(shortAddress);port=getPort(shortAddress,1883);if (factory == null) {factory=SocketFactory.getDefault();} else if (factory instanceof SSLSocketFactory) {throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_SOCKET_FACTORY_MISMATCH);}netModule=new TCPNetworkModule(factory,host,port,clientId);((TCPNetworkModule)netModule).setConnectTimeout(options.getConnectionTimeout());break;case MqttConnectOptions.URI_TYPE_SSL:shortAddress=address.substring(6);host=getHostName(shortAddress);port=getPort(shortAddress,8883);SSLSocketFactoryFactory factoryFactory=null;if (factory == null) {factoryFactory=new SSLSocketFactoryFactory();Properties sslClientProps=options.getSSLProperties();if (null != sslClientProps) factoryFactory.initialize(sslClientProps,null);factory=factoryFactory.createSocketFactory(null);} else if ((factory instanceof SSLSocketFactory) == false) {throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_SOCKET_FACTORY_MISMATCH);}netModule=new SSLNetworkModule((SSLSocketFactory)factory,host,port,clientId);((SSLNetworkModule)netModule).setSSLhandshakeTimeout(options.getConnectionTimeout());if (factoryFactory != null) {String[] enabledCiphers=factoryFactory.getEnabledCipherSuites(null);if (enabledCiphers != null) {((SSLNetworkModule)netModule).setEnabledCiphers(enabledCiphers);}}break;case MqttConnectOptions.URI_TYPE_WS:shortAddress=address.substring(5);host=getHostName(shortAddress);port=getPort(shortAddress,80);if (factory == null) {factory=SocketFactory.getDefault();} else if (factory instanceof SSLSocketFactory) {throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_SOCKET_FACTORY_MISMATCH);}netModule=new WebSocketNetworkModule(factory,address,host,port,clientId);((WebSocketNetworkModule)netModule).setConnectTimeout(options.getConnectionTimeout());break;case MqttConnectOptions.URI_TYPE_WSS:shortAddress=address.substring(6);host=getHostName(shortAddress);port=getPort(shortAddress,443);SSLSocketFactoryFactory wSSFactoryFactory=null;if (factory == null) {wSSFactoryFactory=new SSLSocketFactoryFactory();Properties sslClientProps=options.getSSLProperties();if (null != sslClientProps) wSSFactoryFactory.initialize(sslClientProps,null);factory=wSSFactoryFactory.createSocketFactory(null);} else if ((factory instanceof SSLSocketFactory) == false) {throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_SOCKET_FACTORY_MISMATCH);}netModule=new WebSocketSecureNetworkModule((SSLSocketFactory)factory,address,host,port,clientId);((WebSocketSecureNetworkModule)netModule).setSSLhandshakeTimeout(options.getConnectionTimeout());if (wSSFactoryFactory != null) {String[] enabledCiphers=wSSFactoryFactory.getEnabledCipherSuites(null);if (enabledCiphers != null) {((SSLNetworkModule)netModule).setEnabledCiphers(enabledCiphers);}}break;case MqttConnectOptions.URI_TYPE_LOCAL:netModule=new LocalNetworkModule(address.substring(8));break;default :netModule=null;}return netModule;}  }
class C{  private void addConfigOptions(String prefix,Parameter[] desiredConfigMap,Map<String,String> actualConfigMap){  for (  Parameter param : desiredConfigMap) {    if (actualConfigMap.containsKey(param.ovfName)) {      esxCloudVmx.configuration.put(prefix + param.vmxName,actualConfigMap.get(param.ovfName));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.337 -0500",hash_original_method="F37BBAD929816040B3EA007E6DF28502",hash_generated_method="018C0671FAE463264117FE764EEADF62") public Iterator<NameValue> iterator(){  return this.hmap.values().iterator();}  }
class C{  public SelectionBuilder reset(){  mTable=null;  mSelection.setLength(0);  mSelectionArgs.clear();  return this;}  }
class C{  @SideOnly(Side.CLIENT) public void renderItem(int xPos,int yPos,ItemStack stack,boolean hasSpecialTooltip,boolean addPageLink,Item book){  RenderItem render=Minecraft.getMinecraft().getRenderItem();  GlStateManager.pushMatrix();  GlStateManager.enableBlend();  GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA,GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);  RenderHelper.enableGUIStandardItemLighting();  GlStateManager.enableRescaleNormal();  GlStateManager.enableDepth();  render.renderItemAndEffectIntoGUI(stack,xPos,yPos);  render.renderItemOverlayIntoGUI(Minecraft.getMinecraft().fontRendererObj,stack,xPos,yPos,null);  RenderHelper.disableStandardItemLighting();  GlStateManager.popMatrix();  boolean shouldShowTooltip=false;  if (addPageLink) {    int lengthBefore=pageLinks.size();    PageLink link=new PageLink(xPos,yPos,16,16,stack,book);    if (link.category != null)     pageLinks.add(link);    shouldShowTooltip=pageLinks.size() > lengthBefore;  }  if (!hasSpecialTooltip && mouseX >= xPos && mouseY >= yPos && mouseX <= xPos + 16 && mouseY <= yPos + 16) {    if (stack != null) {      List<String> tooltipData=stack.getTooltip(Minecraft.getMinecraft().thePlayer,false);      List<String> parsedTooltip=new ArrayList();      boolean first=true;      if (addPageLink && shouldShowTooltip)       tooltipData.add("Open guide book entry");      for (      String s : tooltipData) {        String s_=s;        if (!first)         s_=ChatFormatting.GRAY + s;        parsedTooltip.add(s_);        first=false;      }      renderTooltip(mouseX,mouseY,parsedTooltip,0xffffff,0xf0100010);    }  }  GlStateManager.disableLighting();}  }
class C{  @Override public double eval(int id1,int id2,Instance inst1) throws Exception {  if (m_Debug && id1 > -1 && id2 > -1) {    System.err.println("\nEvaluation of string kernel for");    System.err.println(m_data.instance(id1).stringValue(m_strAttr));    System.err.println("and");    System.err.println(m_data.instance(id2).stringValue(m_strAttr));  }  if (id1 == id2 && m_normalize) {    return 1.0;  }  double result=0;  long key=-1;  int location=-1;  if ((id1 >= 0) && (m_keys != null)) {    if (id1 > id2) {      key=(long)id1 * m_numInsts + id2;    } else {      key=(long)id2 * m_numInsts + id1;    }    if (key < 0) {      throw new Exception("Cache overflow detected!");    }    location=(int)(key % m_keys.length);    if (m_keys[location] == (key + 1)) {      if (m_Debug) {        System.err.println("result (cached): " + m_storage[location]);      }      return m_storage[location];    }  }  m_kernelEvals++;  long start=System.currentTimeMillis();  Instance inst2=m_data.instance(id2);  char[] s1=inst1.stringValue(m_strAttr).toCharArray();  char[] s2=inst2.stringValue(m_strAttr).toCharArray();  if (s1.length == 0 || s2.length == 0) {    return 0;  }  if (m_normalize) {    result=normalizedKernel(s1,s2);  } else {    result=unnormalizedKernel(s1,s2);  }  if (m_Debug) {    long duration=System.currentTimeMillis() - start;    System.err.println("result: " + result);    System.err.println("evaluation time:" + duration + "\n");  }  if (key != -1) {    m_storage[location]=result;    m_keys[location]=(key + 1);  }  return result;}  }
class C{  SunCertPathBuilderResult(CertPath certPath,TrustAnchor trustAnchor,PolicyNode policyTree,PublicKey subjectPublicKey,AdjacencyList adjList){  super(certPath,trustAnchor,policyTree,subjectPublicKey);  this.adjList=adjList;}  }
class C{  public void deleteReplicationSets(List<RecoverPointVolumeProtectionInfo> volumeInfoList) throws RecoverPointException {  List<String> volumeWWNs=new ArrayList<String>();  Map<Long,String> rsetNames=new HashMap<Long,String>();  List<Long> rsetIDsToValidate=new ArrayList<Long>();  try {    ConsistencyGroupUID cgID=new ConsistencyGroupUID();    cgID.setId(volumeInfoList.get(0).getRpVolumeGroupID());    ConsistencyGroupSettingsChangesParam cgSettingsParam=new ConsistencyGroupSettingsChangesParam();    cgSettingsParam.setGroupUID(cgID);    ConsistencyGroupSettings groupSettings=functionalAPI.getGroupSettings(cgID);    List<ReplicationSetSettings> replicationSetSettings=groupSettings.getReplicationSetsSettings();    for (    RecoverPointVolumeProtectionInfo volumeInfo : volumeInfoList) {      boolean found=false;      for (      ReplicationSetSettings replicationSet : replicationSetSettings) {        if (replicationSet.getReplicationSetUID().getId() == volumeInfo.getRpVolumeRSetID()) {          rsetNames.put(volumeInfo.getRpVolumeRSetID(),replicationSet.getReplicationSetName());          found=true;          break;        }      }      if (!found) {        logger.warn(String.format("No matching replication set for volume [%s] with replication set ID [%s] found." + " This will need to be checked on the RP System.",volumeInfo.getRpVolumeWWN(),volumeInfo.getRpVolumeRSetID()));        continue;      }      ReplicationSetUID repSetUID=new ReplicationSetUID();      repSetUID.setId(volumeInfo.getRpVolumeRSetID());      repSetUID.setGroupUID(cgID);      if (!containsRepSetUID(cgSettingsParam.getRemovedReplicationSets(),repSetUID)) {        cgSettingsParam.getRemovedReplicationSets().add(repSetUID);        rsetIDsToValidate.add(repSetUID.getId());      }      volumeWWNs.add(volumeInfo.getRpVolumeWWN());      logger.info(String.format("Adding replication set [%s] (%d) to be removed from RP CG [%s] (%d)",rsetNames.get(volumeInfo.getRpVolumeRSetID()),volumeInfo.getRpVolumeRSetID(),groupSettings.getName(),cgID.getId()));    }    if (cgSettingsParam.getRemovedReplicationSets() != null && !cgSettingsParam.getRemovedReplicationSets().isEmpty()) {      if (replicationSetSettings.size() == cgSettingsParam.getRemovedReplicationSets().size()) {        disableConsistencyGroup(cgID);      }      functionalAPI.setConsistencyGroupSettings(cgSettingsParam);      validateRSetsRemoved(rsetIDsToValidate,cgID,volumeWWNs);      logger.info("Request to delete replication sets " + rsetNames.toString() + " from RP CG "+ groupSettings.getName()+ " completed.");    } else {      logger.warn(String.format("No replication sets found to be deleted from RP CG [%s] (%d)",groupSettings.getName(),cgID.getId()));    }  } catch (  Exception e) {    throw RecoverPointException.exceptions.failedToDeleteReplicationSet(volumeWWNs.toString(),e);  }}  }
class C{  public static boolean isTransient(int flags){  return (flags & AccTransient) != 0;}  }
class C{  public AbAnalogClock(Context context,Drawable dial,Drawable hourHand,Drawable minuteHand,Drawable secondHand){  super(context);  mDial=dial;  mHourHand=hourHand;  mMinuteHand=minuteHand;  mSecondHand=secondHand;  mCalendar=new Time();  mDialWidth=mDial.getIntrinsicWidth();  mDialHeight=mDial.getIntrinsicHeight();}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof ZipFileIndexFileObject))   return false;  ZipFileIndexFileObject o=(ZipFileIndexFileObject)other;  return zfIndex.getAbsoluteFile().equals(o.zfIndex.getAbsoluteFile()) && name.equals(o.name);}  }
class C{  @Override public void onPageSelected(int page){  updateStateColors();}  }
class C{  public String directionTipText(){  return "Set the direction of the search.";}  }
class C{  protected BasicDirImpl(int id,String name){  _id=id;  _name=name;}  }
class C{  public void updateSelection(boolean active){  this.active=active;  for (int i=0, n=selectedNodes.size(); i < n; i++) {    D nodeData=selectedNodes.get(i);    TreeNodeElement<D> renderedNode=dataAdapter.getRenderedTreeNode(nodeData);    if (renderedNode != null) {      renderedNode.setSelected(true,active,css);    }  }}  }
class C{  public SQLWarning(Throwable cause){  super(cause);}  }
class C{  public String useLowerOrderTipText(){  return "Whether to use lower-order terms.";}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();}throw new IllegalStateException();}  }
class C{  @Override protected boolean checkExecutionState() throws Exception {  checkArgument(REGISTRAR_PATTERN.matcher(registrar).matches(),"Registrar name is invalid (see usage text for requirements).");  boolean warned=false;  if (RegistryEnvironment.get() != RegistryEnvironment.SANDBOX && RegistryEnvironment.get() != RegistryEnvironment.UNITTEST) {    System.err.printf("WARNING: Running against %s environment. Are " + "you sure you didn\'t mean to run this against sandbox (e.g. \"-e SANDBOX\")?%n",RegistryEnvironment.get());    warned=true;  }  if (warned && !promptForYes("Proceed despite warnings?")) {    System.out.println("Command aborted.");    return false;  }  loadCertificate(certFile.toAbsolutePath());  return true;}  }
class C{  @SuppressWarnings("unchecked") CompositeTransaction createSubTransaction(CompositeTransaction parent){  if (Configuration.getConfigProperties().getAllowSubTransactions()) {    CompositeTransactionImp ret=null;    Stack<CompositeTransaction> lineage=(Stack<CompositeTransaction>)parent.getLineage().clone();    lineage.push(parent);    String tid=tidmgr_.get();    CoordinatorImp ccParent=(CoordinatorImp)parent.getCompositeCoordinator();    CoordinatorImp cc=createCC(null,tid,false,ccParent.prefersHeuristicCommit(),parent.getTimeout());    ret=createCT(tid,cc,lineage,parent.isSerial());    ret.noLocalAncestors=false;    return ret;  } else {    throw new SysException("Subtransactions not allowed - set config property com.atomikos.icatch.allow_subtransactions=true to enable");  }}  }
class C{  public DisambiguationResponse(final AccountType accountType,final String account){  mAccountType=accountType;  mAccount=account;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public boolean isRunning(){  return isRunning(getState());}  }
class C{  static synchronized String genId(){  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();  for (  StackTraceElement frame : stackTrace) {    if (frame.getMethodName().equals("<clinit>")) {      int counter=staticInits.add(frame.getClassName(),1);      return frame.getClassName() + "#" + counter;    }  }  String nonce=Long.toHexString(RANDOM.nextLong());  String caller=stackTrace.length >= 4 ? stackTrace[3].getClassName() + "." + stackTrace[3].getMethodName()+ ":"+ stackTrace[3].getLineNumber() : "unknown";  return caller + "#" + nonce;}  }
class C{  public double createGaussian(final double mean,final double stdv){  return generator.nextGaussian() * stdv + mean;}  }
class C{  public void updateTime(int columnIndex,java.sql.Time x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public boolean isAncestorOf(TypeComposition typeComposition){  Boolean ancestor;  SingleBranchTypeComposition that=(SingleBranchTypeComposition)typeComposition;  if (this == that) {    ancestor=Boolean.TRUE;  } else {    ancestor=ancestorOf.get(that.rowType);    if (ancestor == null) {      ancestor=Boolean.TRUE;      for (      Table table : that.tables) {        if (this.tables.contains(table)) {          ancestor=Boolean.FALSE;        }      }      if (ancestor) {        ancestor=levelsApart(that) > 0;      }      ancestorOf.put(that.rowType,ancestor);    }  }  return ancestor;}  }
class C{  public static void save(){  if (!loaded) {    load();  }  try {    Files.write(gson.toJson(map),saveFile,charset);  } catch (  IOException e) {    SpongeImpl.getLogger().error("Failed to save username cache to file!",e);  }}  }
class C{  public ITurnOrdered nextWarshipElement(){  return this.getTurnWSEnum().nextElement();}  }
class C{  @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW) public void initTimers_internal(){  Collection<?> timers=timerService.getTimers();  if (timers.isEmpty()) {    logger.info("Timer create.");    try {      String timerIntervalSetting=configService.getProxyConfigurationSetting(PlatformConfigurationKey.APP_TIMER_INTERVAL);      long interval=Long.parseLong(timerIntervalSetting);      timerService.createTimer(0,interval,APP_TIMER_INFO);    } catch (    ConfigurationException e) {      timerService.createTimer(0,DEFAULT_TIMER_INTERVAL,APP_TIMER_INFO);      logger.info("Timer interval not set, switch to default 15 sec.");    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String documentFragmentName;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  documentFragmentName=docFragment.getNodeName();  assertEquals("nodeDocumentFragmentNodeNameAssert1","#document-fragment",documentFragmentName);}  }
class C{  public static void waitForCompletion(Future<?>[] futures){  int size=futures.length;  try {    for (int j=0; j < size; j++) {      futures[j].get();    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public DrawerBuilder withOnDrawerListener(@NonNull Drawer.OnDrawerListener onDrawerListener){  this.mOnDrawerListener=onDrawerListener;  return this;}  }
class C{  public static void readyGoForResult(Fragment fragment,Class<?> className,Bundle bundle,int requestCode){  fragment.startActivityForResult(getIntent(fragment.getActivity(),className).putExtras(bundle),requestCode);}  }
class C{  public File createNewFolder(File containingDir) throws IOException {  if (containingDir == null) {    throw new IOException("Containing directory is null:");  }  File newFolder=createFileObject(containingDir,newFolderString);  int i=2;  while (newFolder.exists() && i < 100) {    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));    i++;  }  if (newFolder.exists()) {    throw new IOException("Directory already exists:" + newFolder.getAbsolutePath());  } else {    newFolder.mkdirs();  }  return newFolder;}  }
class C{  public static boolean exists(String test){  if (test == null)   return false;  return test.length() > 0;}  }
class C{  public XMLSignatureException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  private void repaintPeerTarget(WComponentPeer peer){  Component target=(Component)peer.getTarget();  Rectangle bounds=AWTAccessor.getComponentAccessor().getBounds(target);  peer.handlePaint(0,0,bounds.width,bounds.height);}  }
class C{  private JMenuItem createButtonGroupMenuItem(JMenu menu,String label,String mnemonic,String accessibleDescription,Action action,ButtonGroup buttonGroup){  JRadioButtonMenuItem mi=(JRadioButtonMenuItem)menu.add(new JRadioButtonMenuItem(getString(label)));  buttonGroup.add(mi);  mi.setMnemonic(getMnemonic(mnemonic));  mi.getAccessibleContext().setAccessibleDescription(getString(accessibleDescription));  mi.addActionListener(action);  return mi;}  }
class C{  public void clearChanged(){  changed=false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_LEVEL___TRACE_LEVEL_1:    return TRACE_LEVEL_1_EDEFAULT == null ? trace_level_1 != null : !TRACE_LEVEL_1_EDEFAULT.equals(trace_level_1);}return super.eIsSet(featureID);}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public void testIdentityEquals() throws Exception {  String name="nnn";  PublicKey pk=new PublicKeyStub("aaa","fff",new byte[]{1,2,3,4,5});  IdentityStub i=new IdentityStub(name);  i.setPublicKey(pk);  Object[] value={new IdentityStub("111"),Boolean.FALSE,new IdentityStub(name),Boolean.FALSE,new IdentityStub(name,IdentityScope.getSystemScope()),Boolean.FALSE,i,Boolean.TRUE,new IdentityStub(name,pk),Boolean.TRUE};  for (int k=0; k < value.length; k+=2) {    assertEquals(value[k + 1],new Boolean(i.identityEquals((Identity)value[k])));    if (Boolean.TRUE.equals(value[k + 1]))     assertEquals(i.hashCode(),value[k].hashCode());  }  Identity i2=IdentityScope.getSystemScope().getIdentity(name);  i2.setPublicKey(pk);  assertTrue(i.identityEquals(i2));}  }
class C{  public void activate(boolean activate){  if (getGrid() != null && activate) {    Grid gridCurrent=getGrid();    ((HtmlBasedComponent)gridCurrent).setStyle("border-left: 6px solid #fa962f; ");    gridCurrent.setWidth("99.1%");  } else   if (getGrid() != null && !activate) {    Grid gridtPrevious=getGrid();    ((HtmlBasedComponent)gridtPrevious).setStyle("border:none;");    gridtPrevious.setWidth("100%");    gridtPrevious.setHeight("100%");  }  if (getListPanel() != null && activate) {    GridPanel gridPanel=getListPanel();    ((HtmlBasedComponent)gridPanel).setStyle("border-left: 6px solid #fa962f; ");    gridPanel.setWidth("99.1%");  } else   if (getListPanel() != null && !activate) {    GridPanel gridPanel=getListPanel();    ((HtmlBasedComponent)gridPanel).setStyle("border:none;");    gridPanel.setWidth("100%");    gridPanel.setHeight("100%");  }  for (  EmbeddedPanel ep : includedPanel) {    activateChild(activate,ep);  }  for (  HorizontalEmbeddedPanel ep : horizontalIncludedPanel) {    activateChild(activate,ep);  }  active=activate;  if (listPanel.isVisible()) {    if (activate)     listPanel.activate(gridTab); else     listPanel.deactivate();  } else {    if (activate) {      formComponent.setVisible(activate);      setFocusToField();    }  }}  }
class C{  public String toString(){  return String.format("temporal_offset = %d, key_frame_offset = %d, flags = 0x%x, stream_offset = 0x%x%n",this.temporal_offset,this.key_frame_offset,this.flags,this.stream_offset);}  }
class C{  public CommitRecordIndexTupleSerializer(){  super();  this.ser=new Entry.EntrySerializer();}  }
class C{  public FocusControl(int clicks){  ccount=clicks;}  }
class C{  public static Map<String,Object> sendOrderPayRetryNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_PAYRETRY");}  }
class C{  private void leak1(){  Drawable drawable=getResources().getDrawable(R.drawable.img1);  mTv.setBackgroundDrawable(drawable);  Singleton.INSTANCE.cache(drawable);}  }
class C{  ZoneOffsetTransitionRule(int month,int dayOfMonthIndicator,int dayOfWeek,LocalTime time,boolean timeEndOfDay,TimeDefinition timeDefnition,ZoneOffset standardOffset,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  Objects.requireNonNull(time,"time");  Objects.requireNonNull(timeDefnition,"timeDefnition");  Objects.requireNonNull(standardOffset,"standardOffset");  Objects.requireNonNull(offsetBefore,"offsetBefore");  Objects.requireNonNull(offsetAfter,"offsetAfter");  if (month < 1 || month > 12) {    throw new IllegalArgumentException("month must be between 1 and 12");  }  if (dayOfMonthIndicator < -28 || dayOfMonthIndicator > 31 || dayOfMonthIndicator == 0) {    throw new IllegalArgumentException("Day of month indicator must be between -28 and 31 inclusive excluding zero");  }  if (timeEndOfDay && time.equals(LocalTime.MIDNIGHT) == false) {    throw new IllegalArgumentException("Time must be midnight when end of day flag is true");  }  this.month=month;  this.dom=(byte)dayOfMonthIndicator;  this.dow=dayOfWeek;  this.time=time;  this.timeEndOfDay=timeEndOfDay;  this.timeDefinition=timeDefnition;  this.standardOffset=standardOffset;  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  public void clearWrite(){  _next.clearWrite();}  }
class C{  public String format(int indentFactor){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    return this.write(sw,indentFactor,0).toString();  }}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i + 1]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  float xoffset=mYAxis.getXOffset();  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,"A") / 2.5f + mYAxis.getYOffset();  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float xPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.offsetLeft() - xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.offsetLeft() + xoffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      mAxisLabelPaint.setTextAlign(Align.LEFT);      xPos=mViewPortHandler.contentRight() + xoffset;    } else {      mAxisLabelPaint.setTextAlign(Align.RIGHT);      xPos=mViewPortHandler.contentRight() - xoffset;    }  }  drawYLabels(c,xPos,positions,yoffset);}  }
class C{  public AppletServer(String port) throws IOException, NotFoundException, CannotCompileException {  this(Integer.parseInt(port));}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  private ThreadInterruptedException(){}  }
class C{  public static List<Integer> createListOfNonExistentFields(List<String> list,JavacNode type,boolean excludeStandard,boolean excludeTransient){  boolean[] matched=new boolean[list.size()];  for (  JavacNode child : type.down()) {    if (list.isEmpty())     break;    if (child.getKind() != Kind.FIELD)     continue;    JCVariableDecl field=(JCVariableDecl)child.get();    if (excludeStandard) {      if ((field.mods.flags & Flags.STATIC) != 0)       continue;      if (field.name.toString().startsWith("$"))       continue;    }    if (excludeTransient && (field.mods.flags & Flags.TRANSIENT) != 0)     continue;    int idx=list.indexOf(child.getName());    if (idx > -1)     matched[idx]=true;  }  ListBuffer<Integer> problematic=new ListBuffer<Integer>();  for (int i=0; i < list.size(); i++) {    if (!matched[i])     problematic.append(i);  }  return problematic.toList();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  protected String validateTextOnChange(String text,DocumentEvent e){  return null;}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  protected static String quoteTime(java.sql.Time x){  if (x == null) {    return "null";  }  return "Time.valueOf(\"" + x.toString() + "\")";}  }
class C{  protected CassandraDaemonStatus(final Protos.TaskStatus status){  super(status);}  }
class C{  synchronized protected void timeout(){  if (progState != NOTPROGRAMMING) {    if (log.isDebugEnabled()) {      log.debug("timeout!");    }    progState=NOTPROGRAMMING;    cleanup();    notifyProgListenerEnd(_val,jmri.ProgListener.FailedTimeout);  }}  }
class C{  public static Predicate<String> grep(final String pattern){  Objects.requireNonNull(pattern,"The pattern must not be null");  return contains(pattern);}  }
class C{  public static void renderWidgets(Context context,int[] appWidgetIds){  final AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);  WidgetRenderer renderer=new WidgetRenderer(context);  for (  int appWidgetId : appWidgetIds) {    Options options=new Options();    options.appWidgetId=appWidgetId;    options.target=Options.TARGET_HOME_SCREEN;    options.minWidthDp=Integer.MAX_VALUE;    options.minHeightDp=Integer.MAX_VALUE;    Bundle widgetOptions=appWidgetManager.getAppWidgetOptions(appWidgetId);    if (widgetOptions != null) {      options.minWidthDp=widgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);      options.minHeightDp=widgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);      options.target=(AppWidgetProviderInfo.WIDGET_CATEGORY_KEYGUARD == widgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_HOST_CATEGORY)) ? Options.TARGET_LOCK_SCREEN : Options.TARGET_HOME_SCREEN;    }    options.foregroundColor=AppearanceConfig.getForegroundColor(context,options.target);    renderer.setOptions(options);    appWidgetManager.updateAppWidget(appWidgetId,(RemoteViews)renderer.renderWidget(null));    appWidgetManager.notifyAppWidgetViewDataChanged(appWidgetId,R.id.expanded_extensions);  }}  }
class C{  public static int parseDecimalValue(String s) throws NumberFormatException {  int value=-1;  if (s.length() > 0) {    value=Integer.parseInt(s,10);  }  return value;}  }
class C{  public static double round(Double number,int precision){  return Math.floor(number * Math.pow(10,precision) + 0.5) / Math.pow(10,precision);}  }
class C{  public boolean containsVar(String var){  return map.containsKey(var);}  }
class C{  public double measureMaxDepth(){  return m_TreeConstructor.getMaxDepth();}  }
class C{  public void removeRowSetListener(RowSetListener listener){  crsInternal.removeRowSetListener(listener);}  }
class C{  private static boolean deepEmpty(final String[] strings){  if (strings != null) {    for (    final String s : strings) {      if (StringUtils.isNotEmpty(s)) {        return false;      }    }  }  return true;}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  @Override public String format(double value,int formatNumber){  if (formatNumber % 2 == 0) {    return format.format(value);  } else {    return null;  }}  }
class C{  public EnumRowStatus(long valueIndex) throws IllegalArgumentException {  this((int)valueIndex);}  }
class C{  protected final AspectContainer clearAspects(IAspectType type){  List<InternalAspect> entries=this.getEntries(type);  int prevStaticAmounts=this.getAmount(type,false);  int prevAmounts=this.getAmount(type,true) + prevStaticAmounts;  entries.clear();  entries.add(new InternalAspect(type,0,false,prevStaticAmounts != 0));  entries.add(new InternalAspect(type,0,true,true));  if (prevAmounts > 0)   this.onChanged();  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.EXPRESSION_STATEMENT__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testLeakOutputStream() throws IOException {  Path dir=wrap(createTempDir());  OutputStream leak=Files.newOutputStream(dir.resolve("leaky"));  try {    dir.getFileSystem().close();    fail("should have gotten exception");  } catch (  Exception e) {    assertTrue(e.getMessage().contains("file handle leaks"));  }  leak.close();}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  static byte[] toBytes(long data,int length){  if (data == 0) {    return null;  }  byte[] res=new byte[length];  for (int i=0; i < length; i++, data++) {    res[i]=getByte(data);  }  return res;}  }
class C{  protected void sequence_ModelBlock(ISerializationContext context,Block semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667;  H2=0xbb67ae85;  H3=0x3c6ef372;  H4=0xa54ff53a;  H5=0x510e527f;  H6=0x9b05688c;  H7=0x1f83d9ab;  H8=0x5be0cd19;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public static void i(String tag,String msg){  if (sIsLogEnabled) {    Log.i(tag,getContent(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  @SuppressWarnings("rawtypes") public void startDrag(IEntity entity){  if (entity != null) {    Entity2DView<IEntity> dragged=(Entity2DView<IEntity>)EntityViewFactory.create(entity);    dragged.setContained(true);    if (dragged instanceof StackableItem2DView) {      ((StackableItem2DView)dragged).setShowQuantity(false);    }    this.dragged=dragged;  }}  }
class C{  public T caseExactQuantifier(ExactQuantifier object){  return null;}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){  this.typeUtils=typeUtils;  Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types);  if (base != null) {    typesPlusBase.add(base);  }  Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase);  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base);  this.imports=findImports(typeUtils,packageName,referenced,defined);}  }
class C{  public boolean undo(INode staten){  if (!(staten instanceof FifteenPuzzleNode)) {    throw new IllegalArgumentException("SlideMove expects state objects of class EightPuzzleNode");  }  FifteenPuzzleNode state=(FifteenPuzzleNode)staten;  return state.swap(toC,toR,fromC,fromR);}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putOctetString(address);}  }
class C{  public void combine(Configuration c){  for (Iterator i=c.getKeys(); i.hasNext(); ) {    String key=(String)i.next();    setProperty(key,c.get(key));  }}  }
class C{  public static List<ReilInstruction> translateInstruction(final NativeArchitecture architecture,final Instruction instruction) throws InternalTranslationException {  Preconditions.checkNotNull(architecture,"Error: Architecture argument can not be null");  Preconditions.checkNotNull(instruction,"Error: Instruction argument can't be null");  final List<ReilInstruction> instructions=new ArrayList<ReilInstruction>();  final StandardEnvironment environment=new StandardEnvironment();  try {    for (    final com.google.security.zynamics.reil.ReilInstruction reilInstruction : getTranslator(architecture).translate(environment,instruction.getNative(),new ArrayList<ITranslationExtension<INaviInstruction>>())) {      instructions.add(new ReilInstruction(reilInstruction));    }    return instructions;  } catch (  final com.google.security.zynamics.reil.translators.InternalTranslationException e) {    throw new InternalTranslationException(e,instruction);  }}  }
class C{  @Override public void clear(){  super.clear();  long[] keys=_set;  long[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public static void authenticated(){  if (StringUtils.isBlank(getAuthToken())) {    renderJSON(false);  }  try {    UserInfo user=getUserInfo();    renderJSON(user != null);  } catch (  ViPRHttpException e) {    Logger.error(e,"HTTP Error: %s %s",e.getHttpCode(),e.getMessage());    if (e.getHttpCode() == HttpStatus.SC_UNAUTHORIZED) {      renderJSON(false);    }    error(e.getHttpCode(),e.getMessage());  }catch (  Exception e) {    Logger.error(e,"Error getting user info");    renderJSON("error");  }}  }
class C{  public EaseOutIn(){}  }
class C{  final void advance(){  if (next == null)   throw new NoSuchElementException();  lastReturned=next;  for (; ; ) {    next=next.next;    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public Tabs addTab(String title,Image icon,Image pressedIcon,Component component){  int index=tabsContainer.getComponentCount();  insertTab(title,icon,component,index);  setTabSelectedIcon(index,pressedIcon);  return this;}  }
class C{  private void searchSMS(String message,String contactName){  ArrayList<Contact> contacts;  send(R.string.chat_sms_search_start);  contacts=ContactsManager.getMatchingContacts(sContext,contactName);  if (contacts.size() > 0) {    send(R.string.chat_sms_search,message,contacts.size());    for (    Contact contact : contacts) {      ArrayList<Sms> smsList=mSmsManager.getSms(ContactsManager.getPhones(sContext,contact.ids),message);      Collections.sort(smsList);      if (smsList.size() > 0) {        sendSmsListOnXmpp(smsList,contact.name,null);      }    }    send("Done");  } else {    send(R.string.chat_no_match_for,message);  }}  }
class C{  public static void constantPlusExpressionAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (!MiniLangUtil.isConstantPlusExpressionAttribute(attributeValue)) {      handleError("Constant+expr attribute \"" + name + "\" is missing a constant value (expression-only constants are not allowed).",method,element);    }    if (MiniLangUtil.containsScript(attributeValue)) {      handleError("Constant+expr attribute \"" + name + "\" cannot contain a script (remove script).",method,element);    }  }}  }
class C{  public void tagSoundStreamBlock(byte[] soundData) throws IOException {  startTag(TAG_SOUNDSTREAMBLOCK,true);  out.write(soundData);  completeTag();}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  public void exprSetParent(ExpressionNode n){  setParentElem((ElemTemplateElement)n);}  }
class C{  protected boolean isError(Node that,Message message){  return !(message instanceof UsageWarning);}  }
class C{  public MinProjectionExpression(boolean isDistinct,boolean isEver){  this.distinct=isDistinct;  this.ever=isEver;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public LongMessageDialog(Window owner,String i18nKey,String message,Object... i18nArgs){  super(owner,i18nKey,ModalityType.APPLICATION_MODAL,i18nArgs);  JEditorPane textComponent=new ExtendedHTMLJEditorPane("text/html",message);  textComponent.setFocusable(false);  StyleSheet css=((HTMLEditorKit)textComponent.getEditorKit()).getStyleSheet();  css.addRule("body { margin : 0; font-family : sans-serif; font-size : 9px; font-style : normal; }");  css.addRule(".error { font-weight:bold; color:red; font-style:plain; }");  css.addRule("code { font-weight:bold; color:#000088; }");  textComponent.setEditable(false);  JScrollPane scrollPane=new ExtendedJScrollPane(textComponent);  scrollPane.setBorder(createBorder());  layoutDefault(scrollPane,NORMAL,makeCloseButton());}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xD5279339,version=271) public int sceUsbCamGetReverseMode(TPointer32 reverseModeAddr){  int reverseMode=0;  if (mirror) {    reverseMode|=PSP_USBCAM_MIRROR;  }  if (flip) {    reverseMode|=PSP_USBCAM_FLIP;  }  reverseModeAddr.setValue(reverseMode);  return 0;}  }
class C{  public static _WeekNumberEnum fromString(final String value) throws SOAPSerializationException {  return (_WeekNumberEnum)Enumeration.fromString(value,_WeekNumberEnum.VALUES_TO_INSTANCES);}  }
class C{  public void addSequenceElement(SequenceElement elem){  for (  Fragment comment : openFragments) {    comment.addElement(elem);  }  for (  Fragment comment : closingFragments) {    comment.addElement(elem);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  static public String replaceNullValue(String value){  return value == null ? "" : value;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public String toString(){  StringBuffer bf=new StringBuffer();  bf.append("p: ");  for (int i=0; i < points.length; i++)   if (i != 0)   bf.append(", " + points[i]); else   bf.append("" + points[i]);  return bf.toString();}  }
class C{  public static double[] raise(double[] v1,double n){  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=Math.pow(v1[i],n);  return array;}  }
class C{  @Override public synchronized boolean relative(int rows) throws SQLException {  return super.relative(rows);}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    finish();    this.out.flush();  }}  }
class C{  private void closeServerSocket(){  if (mServerSocket != null) {    try {      mServerSocket.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private static void expandResultOfCall(Instruction call,boolean isSysCall,IR ir){  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  if (MIR_Call.hasResult(call)) {    RegisterOperand result1=MIR_Call.getClearResult(call);    if (result1.getType().isFloatType() || result1.getType().isDoubleType()) {      if (VM.BuildFor32Addr && SSE2_FULL && isSysCall) {        byte size=(byte)(result1.getType().isFloatType() ? 4 : 8);        RegisterOperand st0=new RegisterOperand(phys.getST0(),result1.getType());        MIR_Call.setResult(call,st0);        RegisterOperand pr=ir.regpool.makeTROp();        MemoryOperand scratch=new MemoryOperand(pr,null,(byte)0,Entrypoints.scratchStorageField.getOffset(),size,new LocationOperand(Entrypoints.scratchStorageField),null);        Instruction pop=MIR_Move.create(IA32_FSTP,scratch,st0.copyRO());        call.insertAfter(pop);        if (result1.getType().isFloatType()) {          pop.insertAfter(MIR_Move.create(IA32_MOVSS,result1,scratch.copy()));        } else {          if (VM.VerifyAssertions)           VM._assert(result1.getType().isDoubleType());          pop.insertAfter(MIR_Move.create(IA32_MOVSD,result1,scratch.copy()));        }      } else {        Register r=phys.getReturnFPR();        RegisterOperand physical=new RegisterOperand(r,result1.getType());        MIR_Call.setResult(call,physical.copyRO());        Instruction tmp;        if (SSE2_FULL) {          if (result1.getType().isFloatType()) {            tmp=MIR_Move.create(IA32_MOVSS,result1,physical);          } else {            tmp=MIR_Move.create(IA32_MOVSD,result1,physical);          }        } else {          tmp=MIR_Move.create(IA32_FMOV,result1,physical);        }        call.insertAfter(tmp);      }    } else {      Register r=phys.getFirstReturnGPR();      RegisterOperand physical=new RegisterOperand(r,result1.getType());      Instruction tmp=MIR_Move.create(IA32_MOV,result1,physical);      call.insertAfter(tmp);      MIR_Call.setResult(call,physical.copyRO());    }  }  if (MIR_Call.hasResult2(call)) {    if (VM.VerifyAssertions)     VM._assert(VM.BuildFor32Addr);    RegisterOperand result2=MIR_Call.getClearResult2(call);    Register r=phys.getSecondReturnGPR();    RegisterOperand physical=new RegisterOperand(r,result2.getType());    Instruction tmp=MIR_Move.create(IA32_MOV,result2,physical);    call.insertAfter(tmp);    MIR_Call.setResult2(call,physical.copyRO());  }}  }
class C{  public static int calculateItemSizeInBytes(Map<String,AttributeValue> item){  int size=0;  if (item == null) {    return size;  }  for (  Map.Entry<String,AttributeValue> entry : item.entrySet()) {    String name=entry.getKey();    AttributeValue value=entry.getValue();    size+=name.getBytes(BootstrapConstants.UTF8).length;    size+=calculateAttributeSizeInBytes(value);  }  return size;}  }
class C{  private boolean isVisibleOf(View view){  return view.getVisibility() == View.VISIBLE;}  }
class C{  public void buildName(String buildName,String sessionId){  update("build",buildName,sessionId);}  }
class C{  public InvalidCredentialsException(){  super();}  }
class C{  public boolean containsCycle() throws WikiApiException {  DefaultEdge edge=findCycle();  if (edge != null) {    Category sourceCat=wiki.getCategory(categoryGraph.getGraph().getEdgeSource(edge));    Category targetCat=wiki.getCategory(categoryGraph.getGraph().getEdgeTarget(edge));    logger.info("Cycle: " + sourceCat.getTitle() + " - "+ targetCat.getTitle());    return true;  } else {    return false;  }}  }
class C{  public final void pushPair(Node v1,Node v2){  if (null == m_map) {    m_map=new Node[m_blocksize];    m_mapSize=m_blocksize;  } else {    if ((m_firstFree + 2) >= m_mapSize) {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree);      m_map=newMap;    }  }  m_map[m_firstFree]=v1;  m_map[m_firstFree + 1]=v2;  m_firstFree+=2;}  }
class C{  @Override public String stem(String word){  String result;  Object[] args;  if (m_Stemmer == null) {    result=new String(word);  } else {    if (m_SetCurrentMethod == null) {      setStemmer(getStemmer());    }    try {      args=new Object[1];      args[0]=word;      m_SetCurrentMethod.invoke(m_Stemmer,args);      args=new Object[0];      m_StemMethod.invoke(m_Stemmer,args);      args=new Object[0];      result=(String)m_GetCurrentMethod.invoke(m_Stemmer,args);    } catch (    Exception e) {      e.printStackTrace();      result=word;    }  }  return result;}  }
class C{  public synchronized boolean hasRegularDisplayNick(){  return hasRegularDisplayNick;}  }
class C{  public boolean usingRepeat(){  return usingRepeat;}  }
class C{  @After public void tearDown(){  value=null;}  }
class C{  public SignalServiceDataMessage(long timestamp,SignalServiceGroup group,List<SignalServiceAttachment> attachments,String body,int expiresInSeconds){  this(timestamp,group,attachments,body,false,expiresInSeconds,false);}  }
class C{  public void hide(){  if (mAnchor != null && mShowing) {    mAnchor.removeView(this);    mHandler.removeMessages(SHOW_PROGRESS);    mShowing=false;  }}  }
class C{  public GroupResource group(){  return group;}  }
class C{  public Boolean isBoundaryOffset(){  return boundaryOffset;}  }
class C{  public UnsupportedOperationException(String message){  super(message);}  }
class C{  public boolean charge(ItemStack stack){  if (stack == null || !Info.isIc2Available())   return false;  double amount=ElectricItem.manager.charge(stack,energyStored,tier,false,false);  energyStored-=amount;  return amount > 0;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  Person.registerMetadata(registry);  ElementCreator builder=registry.build(KEY);}  }
class C{  public double computeAverageJointEntropy(){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=mvkeJoint.getProbability(sourceObservations[b],destObservations[b],b);    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  public ClassRunner(Class<?> theClass,String[] commandArgs) throws Exception {  setDaemon(true);  Class<?>[] argTemplate={String[].class};  m_CommandArgs=commandArgs;  m_MainMethod=theClass.getMethod("main",argTemplate);  if (((m_MainMethod.getModifiers() & Modifier.STATIC) == 0) || (m_MainMethod.getModifiers() & Modifier.PUBLIC) == 0) {    throw new NoSuchMethodException("main(String[]) method of " + theClass.getName() + " is not public and static.");  }}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  public static VOServiceDetails toVOProductDetails(final Product product,final List<ParameterDefinition> platformParamterDefinitions,final List<Event> platformEvents,boolean imageDefined,final LocalizerFacade facade){  VOServiceDetails result=new VOServiceDetails();  updateValueObject(result,product);  fillAllFields(product,facade,result,PerformanceHint.ALL_FIELDS);  fillVOServiceDetails(product,platformParamterDefinitions,platformEvents,imageDefined,facade,result);  return result;}  }
class C{  public boolean isPopupTrigger(MouseEvent a){  boolean returnValue=((PopupMenuUI)(uis.elementAt(0))).isPopupTrigger(a);  for (int i=1; i < uis.size(); i++) {    ((PopupMenuUI)(uis.elementAt(i))).isPopupTrigger(a);  }  return returnValue;}  }
class C{  public static BitmapRegionDecoderCompat newInstance(FileDescriptor fd,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(fd,isShareable) : BitmapRegionDecoderGinger.newInstance(fd,isShareable));}  }
class C{  public void updateStatus(ScanProgressItem item){  this.item=item;  this.changeIcon();}  }
class C{  public int resolvePort(final int port){  return port <= 0 ? getDefaultPort() : port;}  }
class C{  public Set<Class<? extends BindableLayout>> viewClasses(){  buildCachedData();  return cachedViewClasses;}  }
class C{  private void configureTransformer(){  final MultiViewParallaxTransformer transformer=new MultiViewParallaxTransformer();  transformer.withParallaxView(R.id.page_fragment_imageHolderFront,1.2f);  setPageTransformer(false,transformer);}  }
class C{  public void testMissingApplication() throws Exception {  mEnabled=Collections.singleton(MainActivityDetector.ISSUE);  String expected="AndroidManifest.xml: Error: Expecting AndroidManifest.xml to have an " + "<activity> tag. [MainActivityDetector]\n" + "1 errors, 0 warnings\n";  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          xmlns:android=\"http://schemas.android.com/apk/res/android\">\n"+ "</manifest>"));  assertEquals(expected,result);}  }
class C{  public final CC hideMode(int mode){  setHideMode(mode);  return this;}  }
class C{  public void assignContactFromPhone(String phoneNumber,boolean lazyLookup,Bundle extras){  mContactPhone=phoneNumber;  mExtras=extras;  if (!lazyLookup) {    mQueryHandler.startQuery(TOKEN_PHONE_LOOKUP,null,Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,mContactPhone),PHONE_LOOKUP_PROJECTION,null,null,null);  } else {    mContactUri=null;    onContactUriChanged();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.AUTO_TRANSITION___AUTO_TRANSITION_BLOCK_1:    getAutoTransitionBlock_1().clear();  return;case UmplePackage.AUTO_TRANSITION___ACTIVITY_1:getActivity_1().clear();return;}super.eUnset(featureID);}  }
class C{  private table createTabs(String selTab){  td tabbar=new td("windowCenter",AlignType.LEFT,AlignType.MIDDLE,false);  a tab=new a("#",new span("Find"));  if (selTab.equals("Find")) {    tab.setID("tabSelected");  } else {    tab.setID("tab");    tab.setHref("/adempiere/WFindAdv?PTab=Find");  }  tab.setOnMouseOver("status='Find';return true;");  tabbar.addElement(tab);  tab=new a("#",new span("FindAdv"));  if (selTab.equals("FindAdv")) {    tab.setID("tabSelected");  } else {    tab.setID("tab");    tab.setHref("/adempiere/WFindAdv?PTab=FindAdv");  }  tab.setOnMouseOver("status='FindAdv';return true;");  tabbar.addElement(tab);  table topTable=new table("0","0","0","100%",null);  topTable.setID("WFindAdv.topTable");  topTable.addElement(new tr(tabbar));  return topTable;}  }
class C{  public boolean isCovers(){  boolean hasPointInCommon=isTrue(matrix[Location.INTERIOR][Location.INTERIOR]) || isTrue(matrix[Location.INTERIOR][Location.BOUNDARY]) || isTrue(matrix[Location.BOUNDARY][Location.INTERIOR])|| isTrue(matrix[Location.BOUNDARY][Location.BOUNDARY]);  return hasPointInCommon && matrix[Location.EXTERIOR][Location.INTERIOR] == Dimension.FALSE && matrix[Location.EXTERIOR][Location.BOUNDARY] == Dimension.FALSE;}  }
class C{  public static boolean isPhoneNumber(String str){  return isRegexMatch(str,REGEX_PHONE_NUMBER);}  }
class C{  public static Border createEtchedBorder(Color highlight,Color shadow){  return new EtchedBorder(highlight,shadow);}  }
class C{  public OrionEditorInit(final TextEditorConfiguration configuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){  this.configuration=configuration;  this.codeAssistantFactory=codeAssistantFactory;  this.quickAssist=quickAssist;  this.textEditor=textEditor;}  }
class C{  public boolean isSelfSigned(){  return myCertificate.getIssuerX500Principal().equals(myCertificate.getSubjectX500Principal());}  }
class C{  public void manualResolve(){  this.manualResolve=true;}  }
class C{  public void print(Object x){  out.print(x);  out.flush();}  }
class C{  public final void automaticallyReleaseConnectionToPool(){  automaticallyReleaseConnectionToPool=true;  if (connection != null && connectionReleased) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static int computeMinImageSampleSize(ImageSize srcSize){  final int srcWidth=srcSize.getWidth();  final int srcHeight=srcSize.getHeight();  final int targetWidth=maxBitmapSize.getWidth();  final int targetHeight=maxBitmapSize.getHeight();  final int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);  final int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);  return Math.max(widthScale,heightScale);}  }
class C{  private void addExternalFieldReferences(ClassRef[] sparseRefs){  for (int i=0; i < mFieldIds.length; i++) {    if (!mTypeIds[mFieldIds[i].classIdx].internal) {      FieldIdItem fieldId=mFieldIds[i];      FieldRef newFieldRef=new FieldRef(classNameFromTypeIndex(fieldId.classIdx),classNameFromTypeIndex(fieldId.typeIdx),mStrings[fieldId.nameIdx]);      sparseRefs[mFieldIds[i].classIdx].addField(newFieldRef);    }  }}  }
class C{  public Anonymous_enum_1_ createAnonymous_enum_1_(){  Anonymous_enum_1_Impl anonymous_enum_1_=new Anonymous_enum_1_Impl();  return anonymous_enum_1_;}  }
class C{  public boolean parseNestedElement(PerlBuilder b,int l){  return false;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  protected void makeLayerElement(){  plotwidth=StyleLibrary.SCALE;  plotheight=StyleLibrary.SCALE / optics.getOPTICSPlot(context).getRatio();  final double margin=context.getStyleLibrary().getSize(StyleLibrary.MARGIN);  layer=SVGUtil.svgElement(svgp.getDocument(),SVGConstants.SVG_G_TAG);  final String transform=SVGUtil.makeMarginTransform(getWidth(),getHeight(),plotwidth,plotheight,margin * .5,margin * .5,margin * 1.5,margin * .5);  SVGUtil.setAtt(layer,SVGConstants.SVG_TRANSFORM_ATTRIBUTE,transform);}  }
class C{  private void mapCustomProperties(DiskState diskState,Volume volume){  diskState.customProperties=new HashMap<String,String>();  if (volume.getSnapshotId() != null) {    diskState.customProperties.put(SNAPSHOT_ID,volume.getSnapshotId());  }  if (volume.getIops() != null) {    diskState.customProperties.put(DISK_IOPS,volume.getIops().toString());  }  if (volume.getEncrypted() != null) {    diskState.customProperties.put(DISK_ENCRYPTED_FLAG,volume.getEncrypted().toString());  }  diskState.customProperties.put(VOLUME_TYPE,volume.getVolumeType());  diskState.customProperties.put(SOURCE_TASK_LINK,ResourceEnumerationTaskService.FACTORY_LINK);}  }
class C{  public NoHttpResponseException(String message){  super(message);}  }
class C{  public static ASTQueryContainer parseQuery(String query) throws TokenMgrError, ParseException {  SyntaxTreeBuilder stb=new SyntaxTreeBuilder(new StringReader(query));  stb.jj_input_stream.setTabSize(1);  ASTQueryContainer container=stb.QueryContainer();  container.setSourceString(query);  return container;}  }
class C{  public static String expand(CharSequence self){  return expand(self,8);}  }
class C{  protected void addVolumeToClusterConsistencyGroup(Volume vplexVolume,Map<ClusterConsistencyGroupWrapper,List<URI>> clusterConsistencyGroupVolumes,BlockConsistencyGroup cg) throws Exception {  ClusterConsistencyGroupWrapper clusterConsistencyGroup=getClusterConsistencyGroup(vplexVolume,cg);  if (!clusterConsistencyGroupVolumes.containsKey(clusterConsistencyGroup)) {    clusterConsistencyGroupVolumes.put(clusterConsistencyGroup,new ArrayList<URI>());  }  clusterConsistencyGroupVolumes.get(clusterConsistencyGroup).add(vplexVolume.getId());}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public long count(){  return count;}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearTitle(){  title=null;  fieldSetFlags()[13]=false;  return this;}  }
class C{  private void resolveSymbols(){  Iterator<UnresolvedSymbol> sIter=unresolvedSymbols.iterator();  while (sIter.hasNext()) {    UnresolvedSymbol unresolvedSymbol=sIter.next();    ExportedSymbol symbol=exportedSymbols.get(removeDecoration(unresolvedSymbol.getName()));    if (symbol != null) {      logger.debug("Resolving symbol " + unresolvedSymbol.getName());      unresolvedSymbol.resolve(symbol.getAddress());      sIter.remove();    }  }}  }
class C{  public void testAttIs(){  m_Filter=getFilter("ATT1 is 'r'");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(12,result.numInstances());}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public SolrInstance(String name,Integer port){  this.name=name;  this.port=port;}  }
class C{  private String resolveSettingValue(String orgSettingValue,String platformSettingValue){  if (orgSettingValue != null && orgSettingValue.length() == 0) {    return platformSettingValue;  }  return orgSettingValue;}  }
class C{  protected void rollbackTransaction() throws SQLException {  try {    conn.rollback();  } catch (  SQLException e) {    logger.error("Failed to rollback",e);    throw e;  } finally {    conn.setAutoCommit(true);  }}  }
class C{  public static Result oldFlowHistory(){  return getFlowHistory(Version.OLD);}  }
class C{  public boolean isConsumed(){  return consumed;}  }
class C{  public DrawerBuilder withOnDrawerNavigationListener(@NonNull Drawer.OnDrawerNavigationListener onDrawerNavigationListener){  this.mOnDrawerNavigationListener=onDrawerNavigationListener;  return this;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoLdapUserRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_ldapGuid = ").append(m_ldapGuid);  buffer.append(", m_ldapFullName = ").append(m_ldapFullName);  buffer.append("]");  return buffer.toString();}  }
class C{  private String generateTasteCatalogIfNeededAndGetType(EchoNest echoNest){  String type;  if (mUseTaste) {    if (DEBUG)     Log.d(TAG,"Generating taste profile...");    try {      mCatalog=echoNest.createTemporaryTasteProfile();    } catch (    EchoNestException e) {      Log.e(TAG,"Unable to create the taste profile",e);      mSessionError=true;    } finally {      if ((mMoods == null || mMoods.length == 0) && (mStyles == null || mStyles.length == 0)) {        type="catalog-radio";      } else {        type="artist-description";      }      if (DEBUG)       Log.d(TAG,"Taste profile generation succeeded.");    }  } else {    type="artist-description";  }  return type;}  }
class C{  protected void calculateStatesPartialsPruning(int[] states1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3,int[] matrixMap){  throw new RuntimeException("calculateStatesStatesPruning not implemented using matrixMap");}  }
class C{  private static ArrayList<Object> readAmfStrictArray(ParsableByteArray data){  int count=data.readUnsignedIntToInt();  ArrayList<Object> list=new ArrayList<>(count);  for (int i=0; i < count; i++) {    int type=readAmfType(data);    list.add(readAmfData(data,type));  }  return list;}  }
class C{  default String genericsSuffix(){  return " ";}  }
class C{  public void unusePages(int pages){  lock();  reserved-=pages;  committed-=pages;  unlock();}  }
class C{  public static void filledCircle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public synchronized void resetChallenges(){  challenges=null;}  }
class C{  public static boolean isConstraintProperty(Property property){  if (SPIN.constraint.equals(property)) {    return true;  } else   if (JenaUtil.hasSuperProperty(property,property.getModel().getProperty(SPIN.constraint.getURI()))) {    return true;  } else {    return false;  }}  }
class C{  public static StrategyData create(final Tradestrategy tradestrategy){  CandleDataset candleDataset=new CandleDataset();  CandleSeries candleSeries=new CandleSeries(tradestrategy.getContract().getSymbol(),tradestrategy.getContract(),tradestrategy.getBarSize(),tradestrategy.getTradingday().getOpen(),tradestrategy.getTradingday().getClose());  candleDataset.addSeries(candleSeries);  return new StrategyData(tradestrategy.getStrategy(),candleDataset);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject expr1=m_left.execute(xctxt);  if (expr1.bool()) {    XObject expr2=m_right.execute(xctxt);    return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;  } else   return XBoolean.S_FALSE;}  }
class C{  private int random(int x){  x+=(int)(255 * (2 * this.randomNumbers.nextFloat() - 1) * this.amount);  if (x < 0) {    x=0;  } else   if (x > 0xff) {    x=0xff;  }  return x;}  }
class C{  public static byte[] fetchClass(String host,int port,String directory,String classname) throws IOException {  byte[] b;  URLConnection con=fetchClass0(host,port,directory + classname.replace('.','/') + ".class");  int size=con.getContentLength();  InputStream s=con.getInputStream();  try {    if (size <= 0)     b=ClassPoolTail.readStream(s); else {      b=new byte[size];      int len=0;      do {        int n=s.read(b,len,size - len);        if (n < 0)         throw new IOException("the stream was closed: " + classname);        len+=n;      } while (len < size);    }  }  finally {    s.close();  }  return b;}  }
class C{  protected void addUsage(Symbol sym){  Name n=sym.getSimpleName();  List<Symbol> conflicts=nameClashes.get(n);  if (conflicts == null) {    conflicts=List.nil();  }  if (!conflicts.contains(sym))   nameClashes.put(n,conflicts.append(sym));}  }
class C{  @Override public boolean addAll(Collection<? extends T> c){  throw new UnsupportedOperationException("cannot add to Empty Ranges");}  }
class C{  private void addUsersToGroup(String groupName,Collection<PrincipalId> users) throws Exception {  for (  PrincipalId userId : users) {    getIDMClient().addUserToGroup(tenant,userId,groupName);  }}  }
class C{  public TupleQueryResultFormat(String name,Collection<String> mimeTypes,Charset charset,Collection<String> fileExtensions,IRI standardURI){  super(name,mimeTypes,charset,fileExtensions,standardURI);}  }
class C{  private PointPair calculateEdge(Component comp1,Component comp2){  Rectangle r1=comp1.getBounds();  Rectangle r2=comp2.getBounds();  Point c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));  Point c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));  double angle=Math.atan2(c1.y - c2.y,c1.x - c2.x);  angle+=Math.PI / 2;  Point d=new Point((int)(offset * Math.cos(angle)),(int)(offset * Math.sin(angle)));  c1.translate(d.x,d.y);  c2.translate(d.x,d.y);  Point p1=getBoundaryIntersection(comp1,c1,c2);  Point p2=getBoundaryIntersection(comp2,c2,c1);  if ((p1 == null) || (p2 == null)) {    c1=new Point((int)(r1.x + r1.width / 2.0),(int)(r1.y + r1.height / 2.0));    c2=new Point((int)(r2.x + r2.width / 2.0),(int)(r2.y + r2.height / 2.0));    p1=getBoundaryIntersection(comp1,c1,c2);    p2=getBoundaryIntersection(comp2,c2,c1);  }  if ((p1 == null) || (p2 == null)) {    return null;  }  return new PointPair(p1,p2);}  }
class C{  public static double loss(double pred,double y,double c){  final double x=y - pred;  if (Math.abs(x) <= c)   return x * x * 0.5; else   return c * (Math.abs(x) - c / 2);}  }
class C{  @Override public String[] sentenceFinalPunctuationTags(){  return pennSFPunctTags;}  }
class C{  private static int calculateCheckBitsMask(int type_class,int workflow){  assert (INHERITANCE == type_class || NAMESPACES == type_class || TYPES == type_class || EXPRESSIONS == type_class);  int type_class_base_shift=(type_class - 1) * 4;  int workflow_offset=0;switch (workflow) {case parse2:    workflow_offset=0;  break;case analyze2:workflow_offset=1;break;case analyze3:workflow_offset=2;break;case analyze4:workflow_offset=3;break;default :assert false;}return 1 << (type_class_base_shift + workflow_offset);}  }
class C{  private void addToPanel(FlowPanel panel,Action action,PresentationFactory presentationFactory){  Presentation presentation=presentationFactory.getPresentation(action);  if (action instanceof Separator) {    panel.add(new SeparatorItem(resources.menuCss().panelSeparator()));  } else   if (action instanceof CustomComponentAction) {    CustomComponentAction customComponentAction=(CustomComponentAction)action;    Widget component=customComponentAction.createCustomComponent(presentation);    component.addStyleName(resources.menuCss().customComponent());    panel.add(component);  }}  }
class C{  public SQLTimeoutException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public void scan(JCTree tree){  if (tree != null)   tree.accept(this);}  }
class C{  public static HeapConfig parse(CassandraProtos.HeapConfig heap){  return create(heap.getSizeMb(),heap.getNewMb(),GC_TYPE.values()[heap.getGcType()]);}  }
class C{  public static boolean isGoUp(KeyEvent event){  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_UP || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_8));}  }
class C{  private String replaceUsernameToken(Matcher matcher,String string){  return matcher != null ? matcher.replaceAll(username) : string;}  }
class C{  public String brpoplpush(String source,String destination,int timeout){  client.brpoplpush(source,destination,timeout);  client.setTimeoutInfinite();  String reply=client.getBulkReply();  client.rollbackTimeout();  return reply;}  }
class C{  private static Id<Link> useCloserRefLinkForChildStopFacility(TransitSchedule schedule,Network network,TransitRoute transitRoute,TransitStopFacility stopFacility,Collection<? extends Link> comparingLinks){  double minDist=CoordTools.distanceStopFacilityToLink(stopFacility,network.getLinks().get(stopFacility.getLinkId()));  Link minLink=null;  for (  Link comparingLink : comparingLinks) {    double distCompare=CoordTools.distanceStopFacilityToLink(stopFacility,comparingLink);    if (distCompare < minDist) {      minDist=distCompare;      minLink=comparingLink;    }  }  if (minLink != null) {    TransitStopFacility newChildStopFacility;    String[] split=stopFacility.getId().toString().split(suffixChildStopFacilitiesRegex);    Id<TransitStopFacility> newChildStopFacilityId=Id.create(split[0] + suffixChildStopFacilities + minLink.getId(),TransitStopFacility.class);    if (schedule.getFacilities().containsKey(newChildStopFacilityId)) {      newChildStopFacility=schedule.getFacilities().get(newChildStopFacilityId);    } else {      newChildStopFacility=schedule.getFactory().createTransitStopFacility(newChildStopFacilityId,stopFacility.getCoord(),false);      newChildStopFacility.setName(stopFacility.getName());      newChildStopFacility.setStopPostAreaId(stopFacility.getStopPostAreaId());      newChildStopFacility.setLinkId(minLink.getId());      schedule.addStopFacility(newChildStopFacility);    }    transitRoute.getStop(stopFacility).setStopFacility(newChildStopFacility);    return minLink.getId();  } else {    return null;  }}  }
class C{  private boolean fileExists(String fileName){  return new File(fileName).exists();}  }
class C{  private TestUtils(){}  }
class C{  public Quaterniond rotateLocalY(double angle){  return rotateLocalY(angle,this);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.AFTER_CODE___OPERATION_NAME_1:    setOperationName_1(OPERATION_NAME_1_EDEFAULT);  return;case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_11:getAnonymous_afterCode_1_1().clear();return;case UmplePackage.AFTER_CODE___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_21:getAnonymous_afterCode_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null && !(mAdapter instanceof HeaderViewListAdapter)) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (mAdapter != null && mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  public boolean isStaleConnectionCheck(){  return staleConnectionCheck;}  }
class C{  public void onMarkReferenced(RefElement refWhat,RefElement refFrom,boolean referencedFromClassInitializer){}  }
class C{  @Override public void startElement(String ns,String ln,String qn,Attributes attrs){  maybeSnagTLPrefixes(qn,attrs);  validatorInfo.setNameSpace(ns);  validatorInfo.setLocalName(ln);  validatorInfo.setQName(qn);  validatorInfo.setAttributes(attrs);  validatorInfo.setValidator(CoreValidator.this);  idTagParser.parseStartElement();  if (idTagParser.hasFailed()) {    failed=true;  }  coreTagParser.parseStartElement();  if (coreTagParser.hasFailed()) {    failed=true;  }}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public static WritableByteChannel newChannel(OutputStream outputStream){  return new OutputStreamChannel(outputStream);}  }
class C{  private IBuffer mapSource(SourceMapper mapper,IBinaryType info,IClassFile bufferOwner){  char[] contents=mapper.findSource(getType(),info);  if (contents != null) {    IBuffer buffer=BufferManager.createBuffer(bufferOwner);    if (buffer == null)     return null;    BufferManager bufManager=getBufferManager();    bufManager.addBuffer(buffer);    if (buffer.getCharacters() == null) {      buffer.setContents(contents);    }    buffer.addBufferChangedListener(this);    mapper.mapSource(getOuterMostEnclosingType(),contents,info);    return buffer;  } else {    IBuffer buffer=BufferManager.createNullBuffer(bufferOwner);    if (buffer == null)     return null;    BufferManager bufManager=getBufferManager();    bufManager.addBuffer(buffer);    buffer.addBufferChangedListener(this);    return buffer;  }}  }
class C{  public static <T>List<List<T>> allCombinations(List<List<T>> inputs){  if (inputs.isEmpty()) {    ArrayList<List<T>> result=new ArrayList<>(1);    result.add(new ArrayList<T>(1));    return result;  }  List<T> lastList=inputs.get(inputs.size() - 1);  List<List<T>> result=new ArrayList<>();  for (int i=0; i < lastList.size(); i++) {    List<List<T>> tails=allCombinations(inputs.subList(0,inputs.size() - 1));    T x=lastList.get(i);    for (    List<T> tail : tails) {      tail.add(x);    }    result.addAll(tails);  }  return result;}  }
class C{  public CModuleTransferable(final List<INaviModule> modules){  Preconditions.checkNotNull(modules,"IE01151: Modules argument can't be null");  m_modules=new ArrayList<INaviModule>(modules);}  }
class C{  public static void removeStatusFromModule(IResource module){  try {    module.deleteMarkers(STEP_STATUS_MARKER,true,IResource.DEPTH_ZERO);  } catch (  CoreException e) {    ProverUIActivator.getDefault().logError("Error removing status markers from module " + module,e);  }}  }
class C{  public synchronized StringBuffer insert(int index,char ch){  insert0(index,ch);  return this;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.EXPRESSION_ANNOTATION_LIST___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  public void combineSets(HashMap<String,Set<String>> containerAffinities,OperatorPair pair){  Set<String> set1=containerAffinities.get(pair.first);  Set<String> set2=containerAffinities.get(pair.second);  set1.addAll(set2);  containerAffinities.put(pair.first,set1);  containerAffinities.put(pair.second,set1);}  }
class C{  public static void generateOOME(){  List<Object> bigLeak=new LinkedList<Object>();  boolean oome=false;  System.out.print("Filling the heap");  try {    for (int i=0; true; i++) {      bigLeak.add(new byte[1024 * 1024]);      System.out.print(".");      if (i % 10 == 0) {        System.gc();        try {          Thread.sleep(100);        } catch (        InterruptedException e) {          e.printStackTrace();        }      }    }  } catch (  OutOfMemoryError e) {    bigLeak=null;    oome=true;  }  System.out.println("");  if (!oome) {    throw new RuntimeException("Problem with test case - never got OOME");  }  System.out.println("Got OOME");}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  double x1, y1, x2, y2;  double lower=0.0, upper=0.0;  int n=xData.getCount();  if (hasQuantiles) {    lower=raw.getQuantile(quantiles);    upper=raw.getQuantile(1.0 - quantiles);  } else   if (hasIntervals) {    lower=lowerInterval;    upper=upperInterval;  }  g2.setStroke(lineStroke);  for (int i=0; i < n; i+=2) {    x1=(Double)xData.get(i);    y1=(Double)yData.get(i);    x2=(Double)xData.get(i + 1);    y2=(Double)yData.get(i + 1);    if (y1 != y2) {      if (barPaint != null) {        if (hasQuantiles || hasIntervals) {          if (x1 < lower) {            if (x2 <= lower) {              g2.setPaint(quantilePaint);              fillRect(g2,x1,y1,x2,y2);            } else {              g2.setPaint(quantilePaint);              fillRect(g2,x1,y1,lower,y2);              g2.setPaint(barPaint);              fillRect(g2,lower,y1,x2,y2);            }          } else           if (x2 > upper) {            if (x1 >= upper) {              g2.setPaint(quantilePaint);              fillRect(g2,x1,y1,x2,y2);            } else {              g2.setPaint(barPaint);              fillRect(g2,x1,y1,upper,y2);              g2.setPaint(quantilePaint);              fillRect(g2,upper,y1,x2,y2);            }          } else {            g2.setPaint(barPaint);            fillRect(g2,x1,y1,x2,y2);          }        } else         if (hasIncredibleSet) {          if (traceDistribution.inCredibleSetContains((int)x1) || traceDistribution.inCredibleSetContains((int)x2)) {            g2.setPaint(quantilePaint);          } else {            g2.setPaint(barPaint);          }          fillRect(g2,x1,y1,x2,y2);        } else {          g2.setPaint(barPaint);          fillRect(g2,x1,y1,x2,y2);        }      }      if (lineStroke != null && linePaint != null) {        g2.setStroke(lineStroke);        g2.setPaint(linePaint);        drawRect(g2,x1,y1,x2,y2);      }    }  }}  }
class C{  public void alignBottom(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignBottomAction(nodes));  }  int nMaxY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY > nMaxY || iNode == 0) {      nMaxY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,nMaxY);  }}  }
class C{  public static byte[] toByteArray(int[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(byte)array[i];  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public NoFocusButton(String uiKey){  setFocusPainted(false);  setMargin(new Insets(0,0,0,0));  setFocusable(false);  this.uiKey=uiKey;}  }
class C{  public void removeLastInput(){  if (!inputAnchors.isEmpty()) {    ChoiceInputAnchor arg=inputAnchors.remove(inputAnchors.size() - 1);    arg.anchor.removeConnections();    inputSpace.getChildren().remove(arg);    lanes.forEach(null);    initiateConnectionChanges();  }  if (inputAnchors.isEmpty()) {    inputSpace.setMinHeight(BASELINE_OFFSET_SAME_AS_HEIGHT);  }}  }
class C{  @Override public boolean onJsPrompt(WebView view,String url,String message,String defaultValue,JsPromptResult result){  if (defaultValue != null && defaultValue.startsWith("gap")) {    if (defaultValue.startsWith("gap-iab://")) {      PluginResult scriptResult;      String scriptCallbackId=defaultValue.substring(10);      if (scriptCallbackId.startsWith("InAppBrowser")) {        if (message == null || message.length() == 0) {          scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray());        } else {          try {            scriptResult=new PluginResult(PluginResult.Status.OK,new JSONArray(message));          } catch (          JSONException e) {            scriptResult=new PluginResult(PluginResult.Status.JSON_EXCEPTION,e.getMessage());          }        }        this.webView.sendPluginResult(scriptResult,scriptCallbackId);        result.confirm("");        return true;      }    } else {      LOG.w(LOG_TAG,"InAppBrowser does not support Cordova API calls: " + url + " "+ defaultValue);      result.cancel();      return true;    }  }  return false;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public long readUnsignedInt(){  return (data[position++] & 0xFFL) << 24 | (data[position++] & 0xFFL) << 16 | (data[position++] & 0xFFL) << 8 | (data[position++] & 0xFFL);}  }
class C{  @Inject public DaemonMode(final CassandraExecutor executor){  this.executor=executor;}  }
class C{  private void pushToIntermediate(String uuid,String key,String val){  try {    Intermediate intermediate=new Intermediate();    IntermediateId intermediateId=new IntermediateId();    intermediateId.setInterKey(key);    intermediateId.setUuid(uuid);    intermediate.setId(intermediateId);    intermediate.setInterValue(val);    LOGGER.debug(key + ":" + val);    intermediateDAO.insert(intermediate);  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public static Component createRigidArea(Dimension d){  return new Filler(d,d,d);}  }
class C{  protected void create_y_axis(int i,String y,int size){  float ver_height=((graphheight / size) * i) + border;  Log.e("index vlaue",i + "   " + size+ "   "+ height+ "  "+ graphheight+ "   "+ ver_height);  if (i == size)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint); else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);  paint.setColor(Color.BLACK);  paint.setTextAlign(Paint.Align.RIGHT);  canvas.drawText(y + "",horstart - 15,ver_height - 10,paint);  paint.setTextAlign(Paint.Align.LEFT);}  }
class C{  public void receiveErrorrecordEventForSubscription(java.lang.Exception e){}  }
class C{  public DViewAsn1Dump(JDialog parent,PrivateKey privateKey) throws Asn1Exception, IOException {  super(res.getString("DViewAsn1Dump.PrivateKey.Title"));  this.privateKey=privateKey;  initComponents();}  }
class C{  @Override public void process(ArrayList<K> tuple){  processTuple(tuple);}  }
class C{  public static String formatCurrentDate(){  SimpleDateFormat sdf=new SimpleDateFormat("MMM  dd ");  Calendar c=Calendar.getInstance();  return sdf.format(c.getTime());}  }
class C{  public void closeFile(){  try {    FileFactory.getFactory().updateMediaStorage(getUri().getEncodedPath());  }  finally {    CloseableUtils.tryToClose(mOut);  }}  }
class C{  public BlackVolatilityTermStructure(final int settlementDays,final Calendar cal){  super(settlementDays,cal,BusinessDayConvention.Following,new DayCounter());}  }
class C{  public final boolean preparePanel(PanelFeatureState st,KeyEvent event){  if (isDestroyed()) {    return false;  }  if (st.isPrepared) {    return true;  }  if ((mPreparedPanel != null) && (mPreparedPanel != st)) {    closePanel(mPreparedPanel,false);  }  final Callback cb=getCallback();  if (cb != null) {    st.createdPanelView=cb.onCreatePanelView(st.featureId);  }  final boolean isActionBarMenu=(st.featureId == FEATURE_OPTIONS_PANEL || st.featureId == FEATURE_ACTION_BAR);  if (isActionBarMenu && mActionBar != null) {    mActionBar.setMenuPrepared();  }  if (st.createdPanelView == null) {    if (st.menu == null || st.refreshMenuContent) {      if (st.menu == null) {        if (!initializePanelMenu(st) || (st.menu == null)) {          return false;        }      }      if (isActionBarMenu && mActionBar != null) {        if (mActionMenuPresenterCallback == null) {          mActionMenuPresenterCallback=new ActionMenuPresenterCallback();        }        mActionBar.setMenu(st.menu,mActionMenuPresenterCallback);      }      st.menu.stopDispatchingItemsChanged();      if ((cb == null) || !cb.onCreatePanelMenu(st.featureId,st.menu)) {        st.setMenu(null);        if (isActionBarMenu && mActionBar != null) {          mActionBar.setMenu(null,mActionMenuPresenterCallback);        }        return false;      }      st.refreshMenuContent=false;    }    st.menu.stopDispatchingItemsChanged();    if (st.frozenActionViewState != null) {      st.menu.restoreActionViewStates(st.frozenActionViewState);      st.frozenActionViewState=null;    }    if (!cb.onPreparePanel(st.featureId,st.createdPanelView,st.menu)) {      if (isActionBarMenu && mActionBar != null) {        mActionBar.setMenu(null,mActionMenuPresenterCallback);      }      st.menu.startDispatchingItemsChanged();      return false;    }    KeyCharacterMap kmap=KeyCharacterMap.load(event != null ? event.getDeviceId() : KeyCharacterMap.VIRTUAL_KEYBOARD);    st.qwertyMode=kmap.getKeyboardType() != KeyCharacterMap.NUMERIC;    st.menu.setQwertyMode(st.qwertyMode);    st.menu.startDispatchingItemsChanged();  }  st.isPrepared=true;  st.isHandled=false;  mPreparedPanel=st;  return true;}  }
class C{  public static String scanIdentifier(Reader in) throws IOException {  StringBuffer buf=new StringBuffer();  while (true) {    if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9'))|| (c == '_')) {      buf.append((char)c);      c=in.read();    } else {      return buf.toString();    }  }}  }
class C{  public void dragMouseMoved(DragSourceDragEvent dsde){  ((DragSourceMotionListener)a).dragMouseMoved(dsde);  ((DragSourceMotionListener)b).dragMouseMoved(dsde);}  }
class C{  public FastShortBuffer append(short[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  public void testScanQueryFailedMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  ScanQuery<String,Integer> qry=new ScanQuery<>(Integer.MAX_VALUE);  testQueryFailedMetrics(cache,qry);}  }
class C{  public BeanContextSupport(BeanContext peer,Locale lcle){  this(peer,lcle,false,true);}  }
class C{  public final int x(){  return (int)FastMath.floor(position().getX());}  }
class C{  public boolean isPopupTrigger(MouseEvent e){  return getUI().isPopupTrigger(e);}  }
class C{  public byte[] intToBytesLittleEndian(int value){  byte[] bytes=new byte[4];  bytes[0]=(byte)((value) & 0xff);  bytes[1]=(byte)((value >> 8) & 0xff);  bytes[2]=(byte)((value >> 16) & 0xff);  bytes[3]=(byte)((value >> 24) & 0xff);  return bytes;}  }
class C{  MembershipKey checkMembership(InetAddress group,NetworkInterface interf,InetAddress source){  if (groups != null) {    List<MembershipKeyImpl> keys=groups.get(group);    if (keys != null) {      for (      MembershipKeyImpl key : keys) {        if (key.networkInterface().equals(interf)) {          if (source == null) {            if (key.sourceAddress() == null)             return key;            throw new IllegalStateException("Already a member to receive all packets");          }          if (key.sourceAddress() == null)           throw new IllegalStateException("Already have source-specific membership");          if (source.equals(key.sourceAddress()))           return key;        }      }    }  }  return null;}  }
class C{  public SanStorage(String name,double capacity,double bandwidth,double networkLatency) throws ParameterException {  super(name,capacity);  this.bandwidth=bandwidth;  this.networkLatency=networkLatency;}  }
class C{  private void _serializeComponent(Component c,StringBuilder sb,Set<Object> done) throws ConverterException {  ComponentSpecificAccess cw=new ComponentSpecificAccess(Component.ACCESS_PRIVATE,c);  sb.append(goIn());  try {    sb.append("evaluateComponent(").append(QUOTE_CHR).append(c.getAbsName()).append(QUOTE_CHR).append(',').append(QUOTE_CHR).append(ComponentUtil.md5(c)).append(QUOTE_CHR).append(",{");  } catch (  Exception e) {    throw toConverterException(e);  }  boolean doIt=false;  Object member;{    Iterator<Entry<Key,Object>> it=cw.entryIterator();    deep++;    Entry<Key,Object> e;    while (it.hasNext()) {      e=it.next();      member=e.getValue();      if (member instanceof UDF)       continue;      if (doIt)       sb.append(',');      doIt=true;      sb.append(QUOTE_CHR);      sb.append(escape(e.getKey().getString()));      sb.append(QUOTE_CHR);      sb.append(':');      _serialize(member,sb,done);    }    sb.append("}");    deep--;  }{    boolean isPeristent=c.isPersistent();    ComponentScope scope=c.getComponentScope();    Iterator<Entry<Key,Object>> it=scope.entryIterator();    sb.append(",{");    deep++;    doIt=false;    Property p;    Boolean remotingFetch;    Struct props=ignoreRemotingFetch ? null : ComponentUtil.getPropertiesAsStruct(c,false);    Entry<Key,Object> e;    Key k;    while (it.hasNext()) {      e=it.next();      k=e.getKey();      if (KeyConstants._THIS.equalsIgnoreCase(k))       continue;      if (!ignoreRemotingFetch) {        p=(Property)props.get(k,null);        if (p != null) {          remotingFetch=Caster.toBoolean(p.getDynamicAttributes().get(REMOTING_FETCH,null),null);          if (remotingFetch == null) {            if (isPeristent && ORMUtil.isRelated(p))             continue;          } else           if (!remotingFetch.booleanValue())           continue;        }      }      member=e.getValue();      if (member instanceof UDF)       continue;      if (doIt)       sb.append(',');      doIt=true;      sb.append(QUOTE_CHR);      sb.append(escape(k.getString()));      sb.append(QUOTE_CHR);      sb.append(':');      _serialize(member,sb,done);    }    sb.append("}");    deep--;  }  sb.append(")");}  }
class C{  private void autoScale(){  int dist;  Dimension temp=new Dimension(10,10);  if (m_numNodes <= 1) {    return;  }  dist=(m_nodes[0].m_height + 40) * m_numLevels;  if (dist > temp.height) {    temp.height=dist;  }  for (int noa=0; noa < m_numNodes - 1; noa++) {    calcScreenCoords(noa);    calcScreenCoords(noa + 1);    if (m_nodes[noa + 1].m_change) {    } else {      dist=m_nodes[noa + 1].m_center - m_nodes[noa].m_center;      if (dist <= 0) {        dist=1;      }      dist=((6 + m_nodes[noa].m_side + m_nodes[noa + 1].m_side) * m_viewSize.width) / dist;      if (dist > temp.width) {        temp.width=dist;      }    }    dist=(m_nodes[noa + 1].m_height + 40) * m_numLevels;    if (dist > temp.height) {      temp.height=dist;    }  }  int y1, y2, xa, xb;  y1=m_nodes[m_edges[0].m_parent].m_top;  y2=m_nodes[m_edges[0].m_child].m_top;  dist=y2 - y1;  if (dist <= 0) {    dist=1;  }  dist=((60 + m_edges[0].m_height + m_nodes[m_edges[0].m_parent].m_height) * m_viewSize.height) / dist;  if (dist > temp.height) {    temp.height=dist;  }  for (int noa=0; noa < m_numNodes - 2; noa++) {    if (m_nodes[m_edges[noa + 1].m_child].m_change) {    } else {      xa=m_nodes[m_edges[noa].m_child].m_center - m_nodes[m_edges[noa].m_parent].m_center;      xa/=2;      xa+=m_nodes[m_edges[noa].m_parent].m_center;      xb=m_nodes[m_edges[noa + 1].m_child].m_center - m_nodes[m_edges[noa + 1].m_parent].m_center;      xb/=2;      xb+=m_nodes[m_edges[noa + 1].m_parent].m_center;      dist=xb - xa;      if (dist <= 0) {        dist=1;      }      dist=((12 + m_edges[noa].m_side + m_edges[noa + 1].m_side) * m_viewSize.width) / dist;      if (dist > temp.width) {        temp.width=dist;      }    }    y1=m_nodes[m_edges[noa + 1].m_parent].m_top;    y2=m_nodes[m_edges[noa + 1].m_child].m_top;    dist=y2 - y1;    if (dist <= 0) {      dist=1;    }    dist=((60 + m_edges[noa + 1].m_height + m_nodes[m_edges[noa + 1].m_parent].m_height) * m_viewSize.height) / dist;    if (dist > temp.height) {      temp.height=dist;    }  }  Dimension e=getSize();  Dimension np=new Dimension();  np.width=(int)(e.width / 2 - (((double)e.width / 2) - m_viewPos.width) / (m_viewSize.width) * temp.width);  np.height=(int)(e.height / 2 - (((double)e.height / 2) - m_viewPos.height) / (m_viewSize.height) * temp.height);  for (int noa=0; noa < m_numNodes; noa++) {    m_nodes[noa].m_top=32000;  }  animateScaling(np,temp,10);}  }
class C{  private IRI buildResourceFromLocalName(String localName) throws RDFParseException {  return resolveURI("#" + localName);}  }
class C{  public Matrix arrayLeftDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=B.A[i][j] / A[i][j];    }  }  return X;}  }
class C{  private void deleteProfile(File file,ModelMap model){  if (file.getName().equals(getCurrentProfile())) {    model.addAttribute("success",false);    model.addAttribute("message","Cannot delete the currently active profile.");  } else   if (file.delete()) {    model.addAttribute("success",true);    model.addAttribute("message","Success deleting profile: " + file.getName());  } else {    model.addAttribute("success",false);    model.addAttribute("message","Error deleting profile: " + file.getName());    log.error("Error deleting profile: " + file.getName());  }}  }
class C{  private MatrixBlock collectBinaryCellInput(Iterable<Writable> valueList) throws IOException {  MatrixBlock partition=null;  if (_tSparseCol)   partition=new MatrixBlock(_clen,_rlen,true); else   partition=new MatrixBlock(_rlen,_clen,false);switch (_dpf) {case ROW_WISE:    while (valueList.iterator().hasNext()) {      PairWritableCell pairValue=(PairWritableCell)valueList.iterator().next();      if (pairValue.indexes.getColumnIndex() < 0)       continue;      partition.quickSetValue(0,(int)pairValue.indexes.getColumnIndex() - 1,pairValue.cell.getValue());    }  break;case COLUMN_WISE:while (valueList.iterator().hasNext()) {  PairWritableCell pairValue=(PairWritableCell)valueList.iterator().next();  if (pairValue.indexes.getRowIndex() < 0)   continue;  if (_tSparseCol)   partition.appendValue(0,(int)pairValue.indexes.getRowIndex() - 1,pairValue.cell.getValue()); else   partition.quickSetValue((int)pairValue.indexes.getRowIndex() - 1,0,pairValue.cell.getValue());}break;default :throw new IOException("Partition format not yet supported in fused partition-execute: " + _dpf);}cleanupCollectedMatrixPartition(partition,_tSparseCol);return partition;}  }
class C{  private void startHttpProtocol() throws IgniteCheckedException {  try {    Class<?> cls=Class.forName(HTTP_PROTO_CLS);    Constructor<?> ctor=cls.getConstructor(GridKernalContext.class);    GridRestProtocol proto=(GridRestProtocol)ctor.newInstance(ctx);    startProtocol(proto);  } catch (  ClassNotFoundException ignored) {    if (log.isDebugEnabled())     log.debug("Failed to initialize HTTP REST protocol (consider adding ignite-rest-http " + "module to classpath).");  }catch (  NoSuchMethodException|InvocationTargetException|InstantiationException|IllegalAccessException e) {    throw new IgniteCheckedException("Failed to initialize HTTP REST protocol.",e);  }}  }
class C{  public WampClientBuilder withAuthId(String authId){  this.authId=authId;  return this;}  }
class C{  public BOVWBuilder(IndexReader reader,LireFeature lireFeature,int numDocsForVocabulary,int numClusters){  this.numDocsForVocabulary=numDocsForVocabulary;  this.numClusters=numClusters;  this.reader=reader;  this.lireFeature=lireFeature;}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  public void run(){  try {    ILaunchConfiguration config=fTab.getLaunchConfiguration();    ILaunchConfigurationWorkingCopy copy=null;    if (config.isWorkingCopy()) {      copy=(ILaunchConfigurationWorkingCopy)config;    } else {      copy=config.getWorkingCopy();    }    getViewer().setCustomEntries(new IRuntimeClasspathEntry[0]);    copy.removeAttribute(customAttributeName);  } catch (  CoreException e) {    return;  }}  }
class C{  public static Document toDocument(String xml) throws SAXException {  try {    return toDocument(new StringReader(xml));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static char[] toAsciiChars(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_CHAR_ARRAY;  }  char[] l_ascii=new char[raw.length << 3];  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if ((raw[ii] & BITS[bits]) == 0) {        l_ascii[jj - bits]='0';      } else {        l_ascii[jj - bits]='1';      }    }  }  return l_ascii;}  }
class C{  public void markVolumesInactive(List<URI> volumes,String stepId){  try {    for (    URI uri : volumes) {      Volume volume=_dbClient.queryObject(Volume.class,uri);      if (volume == null) {        continue;      }      URI fullCopySourceVolumeURI=volume.getAssociatedSourceVolume();      if (!NullColumnValueGetter.isNullURI(fullCopySourceVolumeURI)) {        Volume fullCopySourceVolume=_dbClient.queryObject(Volume.class,fullCopySourceVolumeURI);        if ((fullCopySourceVolume != null) && (!fullCopySourceVolume.getInactive())) {          StringSet fullCopyIds=fullCopySourceVolume.getFullCopies();          if (fullCopyIds != null) {            if (fullCopyIds.contains(volume.getId().toString())) {              fullCopyIds.remove(volume.getId().toString());              _dbClient.updateObject(fullCopySourceVolume);            }          }        }      }      if (!volume.getInactive()) {        _log.info("Marking volume in-active: " + volume.getId());        _dbClient.markForDeletion(volume);      }    }  }  finally {    WorkflowStepCompleter.stepSucceded(stepId);  }}  }
class C{  private static boolean validateType(String propertyValue,PropertyMetadata metaData){  if (metaData.getType().equalsIgnoreCase(IPADDR)) {    return validateIpv4Addr(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(IPV6ADDR)) {    return validateIpv6Addr(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(EMAIL)) {    return validateEmail(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(EMAILLIST)) {    return validateEmailList(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(URL)) {    return validateUrl(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(UINT64)) {    return validateUint64(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(UINT32)) {    return validateUint32(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(UINT16)) {    return validateUint16(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(UINT8)) {    return validateUint8(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(BOOLEAN)) {    return validateBoolean(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(PERCENT)) {    return validatePercent(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(HOSTNAME)) {    return validateHostName(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(STRICTHOSTNAME)) {    return validateStrictHostName(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(IPLIST)) {    return validateIpList(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(IPPORTLIST)) {    return validateIpPortList(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(ENCRYPTEDSTRING)) {    return true;  } else   if (metaData.getType().equalsIgnoreCase(ENCRYPTEDTEXT)) {    return true;  } else   if (metaData.getType().equalsIgnoreCase(STRING)) {    return validateString(propertyValue);  } else   if (metaData.getType().equalsIgnoreCase(TEXT)) {    return true;  }  return false;}  }
class C{  public static void e(String tag,String s,Object... args){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,String.format(s,args));}  }
class C{  protected static void dispose(){}  }
class C{  public Connector(Object core){  super(core);}  }
class C{  public boolean isGameActive(){  return playerName != null;}  }
class C{  private static void checkFromToBounds(int arrayLength,int origin,int fence){  if (origin > fence) {    throw new ArrayIndexOutOfBoundsException("origin(" + origin + ") > fence("+ fence+ ")");  }  if (origin < 0) {    throw new ArrayIndexOutOfBoundsException(origin);  }  if (fence > arrayLength) {    throw new ArrayIndexOutOfBoundsException(fence);  }}  }
class C{  private void sortAddItem(ValueNamePair vn){  sortBy1.appendItem(vn.getName(),vn);  sortBy2.appendItem(vn.getName(),vn);  sortBy3.appendItem(vn.getName(),vn);  sortBy4.appendItem(vn.getName(),vn);}  }
class C{  public void windowClosed(WindowEvent e){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void testIsCheckSumValid(){  Em18RfidProtocol instance=new Em18RfidProtocol();  assertEquals(true,instance.isCheckSumValid(msgStandalone));  assertEquals(false,instance.isCheckSumValid(msgBadChkSumStandalone));}  }
class C{  @Override public Set<Statement> gather(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Value u,final Statement e){  return Collections.singleton(e);}  }
class C{  public void skipTo(int desiredPosition){  desiredPosition=Math.max(0,desiredPosition);  for (int i=0; i < desiredPosition; i++)   skip();}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public String toString(){  return name;}  }
class C{  protected void addFromChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_fromChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_fromChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__FROM_CHANNELS,true,false,true,null,null,null));}  }
class C{  public String toString(){  return ":" + getLocalName();}  }
class C{  private int decodeSpectrumAndDequant(float coef[],float sf[],boolean pulsePresent,Pulse pulse,IndividualChannelStream ics,int bandType[]){  int idx=0;  final int c=1024 / ics.numWindows;  final int offsets[]=ics.swbOffset;  for (int g=0; g < ics.numWindows; g++) {    Arrays.fill(coef,g * 128 + offsets[ics.maxSfb],g * 128 + c,0f);  }  int coefOffset=0;  for (int g=0; g < ics.numWindowGroups; g++) {    int gLen=ics.groupLen[g];    for (int i=0; i < ics.maxSfb; i++, idx++) {      final int cbtM1=bandType[idx] == 0 ? Integer.MAX_VALUE : bandType[idx] - 1;      int cfo=coefOffset + offsets[i];      int offLen=offsets[i + 1] - offsets[i];      if (cbtM1 >= INTENSITY_BT2 - 1) {        for (int group=0; group < gLen; group++, cfo+=128) {          Arrays.fill(coef,cfo,cfo + offLen,0f);        }      } else       if (cbtM1 == NOISE_BT - 1) {        for (int group=0; group < gLen; group++, cfo+=128) {          for (int k=0; k < offLen; k++) {            ac.randomState=lcgRandom(ac.randomState);            coef[cfo + k]=ac.randomState;          }          float bandEnergy=FloatDSP.scalarproduct(coef,cfo,coef,cfo,offLen);          float scale=sf[idx] / (float)sqrt(bandEnergy);          FloatDSP.vectorFmulScalar(coef,cfo,coef,cfo,scale,offLen);        }      } else {        final float vq[]=ff_aac_codebook_vector_vals[cbtM1];        final int cbVertexIdx[]=ff_aac_codebook_vector_idx[cbtM1];        VLC vlc=vlc_spectral[cbtM1];switch (cbtM1 >> 1) {case 0:          for (int group=0; group < gLen; group++, cfo+=128) {            int cf=cfo;            for (int len=offLen; len != 0; len-=4) {              int code=vlc.getVLC2(br,2);              int cbIdx=cbVertexIdx[code];              cf=VMUL4(coef,cf,vq,0,cbIdx,sf[idx]);            }          }        break;case 1:      for (int group=0; group < gLen; group++, cfo+=128) {        int cf=cfo;        for (int len=offLen; len != 0; len-=4) {          int code=vlc.getVLC2(br,2);          int cbIdx=cbVertexIdx[code];          int nnz=(cbIdx >> 8) & 15;          int bits=nnz != 0 ? br.peek(32) : 0;          br.skip(nnz);          cf=VMUL4S(coef,cf,vq,0,cbIdx,bits,sf[idx]);        }      }    break;case 2:  for (int group=0; group < gLen; group++, cfo+=128) {    int cf=cfo;    for (int len=offLen; len != 0; len-=2) {      int code=vlc.getVLC2(br,2);      int cbIdx=cbVertexIdx[code];      cf=VMUL2(coef,cf,vq,0,cbIdx,sf[idx]);    }  }break;case 3:case 4:for (int group=0; group < gLen; group++, cfo+=128) {int cf=cfo;for (int len=offLen; len != 0; len-=2) {  int code=vlc.getVLC2(br,2);  int cbIdx=cbVertexIdx[code];  int nnz=(cbIdx >> 8) & 15;  int sign=nnz != 0 ? (br.peek(nnz) << (cbIdx >> 12)) : 0;  br.skip(nnz);  cf=VMUL2S(coef,cf,vq,0,cbIdx,sign,sf[idx]);}}break;default :for (int group=0; group < gLen; group++, cfo+=128) {int icf=cfo;for (int len=offLen; len != 0; len-=2) {int code=vlc.getVLC2(br,2);if (code == 0) {coef[icf++]=0f;coef[icf++]=0f;continue;}int cbIdx=cbVertexIdx[code];int nnz=cbIdx >> 12;int nzt=cbIdx >> 8;int bits=br.read(nnz) << (32 - nnz);for (int j=0; j < 2; j++) {if ((nzt & (1 << j)) != 0) {  int b=br.peek(32);  b=31 - avLog2(~b);  if (b > 8) {    log.error(String.format("error in spectral data, ESC overflow"));    return AAC_ERROR;  }  br.skip(b + 1);  b+=4;  int n=(1 << b) + br.read(b);  coef[icf++]=Float.intBitsToFloat(cbrt_tab[n] | (bits & (1 << 31)));  bits<<=1;} else {  float v=vq[cbIdx & 15];  if (v == 0f) {    coef[icf++]=0f;  } else {    if ((bits & (1 << 31)) != 0) {      v=-v;    }    coef[icf++]=v;    bits<<=1;  }}cbIdx>>=4;}}FloatDSP.vectorFmulScalar(coef,cfo,coef,cfo,sf[idx],offLen);}break;}}}coefOffset+=gLen << 7;}if (pulsePresent) {idx=0;for (int i=0; i < pulse.numPulse; i++) {float co=coef[pulse.pos[i]];while (offsets[idx + 1] <= pulse.pos[i]) {idx++;}if (bandType[idx] != NOISE_BT && sf[idx] != 0f) {float ico=-pulse.amp[i];if (co != 0f) {co/=sf[idx];ico=co / (float)Math.sqrt(Math.sqrt(Math.abs(co))) + (co > 0f ? -ico : ico);}coef[pulse.pos[i]]=(float)Math.cbrt(Math.abs(ico)) * ico * sf[idx];}}}return 0;}  }
class C{  @After public void after(){  for (  Class<?> plugin : pluginsToStore) {    String key=DurianPlugins.PROPERTY_PREFIX + plugin.getCanonicalName();    Optional<String> value=state.get(plugin);    if (value.isPresent()) {      System.setProperty(key,value.get());    } else {      System.clearProperty(key);    }  }  DurianPlugins.resetForTesting();}  }
class C{  public static URI canonicalURI(URI uri){  if (uri == null)   return null;  if (EFS.SCHEME_FILE.equals(uri.getScheme())) {    final IPath inputPath=URIUtil.toPath(uri);    final IPath canonicalPath=canonicalPath(inputPath);    if (inputPath == canonicalPath)     return uri;    return URIUtil.toURI(canonicalPath);  }  return uri;}  }
class C{  public int updateJobData(Connection conn,JobDetail job) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeJobData(job.getJobDataMap());  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_JOB_DATA));    setBytes(ps,1,baos);    ps.setString(2,job.getKey().getName());    ps.setString(3,job.getKey().getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public void testCameraPairwiseScenario26() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.MAX,WhiteBalance.AUTO,SceneMode.PARTY,PictureSize.MEDIUM,Geotagging.ON);}  }
class C{  public LongSparseArray(int initialCapacity){  initialCapacity=idealLongArraySize(initialCapacity);  mKeys=new long[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  void tokenize(String pat,Vector targetStrings) throws javax.xml.transform.TransformerException {  m_compiler.m_currentPattern=pat;  m_patternMapSize=0;  int initTokQueueSize=((pat.length() < OpMap.MAXTOKENQUEUESIZE) ? pat.length() : OpMap.MAXTOKENQUEUESIZE) * 5;  m_compiler.m_opMap=new OpMapVector(initTokQueueSize,OpMap.BLOCKTOKENQUEUESIZE * 5,OpMap.MAPINDEX_LENGTH);  int nChars=pat.length();  int startSubstring=-1;  int posOfNSSep=-1;  boolean isStartOfPat=true;  boolean isAttrName=false;  boolean isNum=false;  int nesting=0;  for (int i=0; i < nChars; i++) {    char c=pat.charAt(i);switch (c) {case '\"':{        if (startSubstring != -1) {          isNum=false;          isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);          isAttrName=false;          if (-1 != posOfNSSep) {            posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);          } else {            addToTokenQueue(pat.substring(startSubstring,i));          }        }        startSubstring=i;        for (i++; (i < nChars) && ((c=pat.charAt(i)) != '\"'); i++)         ;        if (c == '\"' && i < nChars) {          addToTokenQueue(pat.substring(startSubstring,i + 1));          startSubstring=-1;        } else {          m_processor.error(XPATHErrorResources.ER_EXPECTED_DOUBLE_QUOTE,null);        }      }    break;case '\'':  if (startSubstring != -1) {    isNum=false;    isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);    isAttrName=false;    if (-1 != posOfNSSep) {      posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);    } else {      addToTokenQueue(pat.substring(startSubstring,i));    }  }startSubstring=i;for (i++; (i < nChars) && ((c=pat.charAt(i)) != '\''); i++) ;if (c == '\'' && i < nChars) {addToTokenQueue(pat.substring(startSubstring,i + 1));startSubstring=-1;} else {m_processor.error(XPATHErrorResources.ER_EXPECTED_SINGLE_QUOTE,null);}break;case 0x0A:case 0x0D:case ' ':case '\t':if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;if (-1 != posOfNSSep) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);} else {addToTokenQueue(pat.substring(startSubstring,i));}startSubstring=-1;}break;case '@':isAttrName=true;case '-':if ('-' == c) {if (!(isNum || (startSubstring == -1))) {break;}isNum=false;}case '(':case '[':case ')':case ']':case '|':case '/':case '*':case '+':case '=':case ',':case '\\':case '^':case '!':case '$':case '<':case '>':if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;if (-1 != posOfNSSep) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,i);} else {addToTokenQueue(pat.substring(startSubstring,i));}startSubstring=-1;} else if (('/' == c) && isStartOfPat) {isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);} else if ('*' == c) {isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);isAttrName=false;}if (0 == nesting) {if ('|' == c) {if (null != targetStrings) {recordTokenString(targetStrings);}isStartOfPat=true;}}if ((')' == c) || (']' == c)) {nesting--;} else if (('(' == c) || ('[' == c)) {nesting++;}addToTokenQueue(pat.substring(i,i + 1));break;case ':':if (i > 0) {if (posOfNSSep == (i - 1)) {if (startSubstring != -1) {if (startSubstring < (i - 1)) addToTokenQueue(pat.substring(startSubstring,i - 1));}isNum=false;isAttrName=false;startSubstring=-1;posOfNSSep=-1;addToTokenQueue(pat.substring(i - 1,i + 1));break;} else {posOfNSSep=i;}}default :if (-1 == startSubstring) {startSubstring=i;isNum=Character.isDigit(c);} else if (isNum) {isNum=Character.isDigit(c);}}}if (startSubstring != -1) {isNum=false;isStartOfPat=mapPatternElemPos(nesting,isStartOfPat,isAttrName);if ((-1 != posOfNSSep) || ((m_namespaceContext != null) && (m_namespaceContext.handlesNullPrefixes()))) {posOfNSSep=mapNSTokens(pat,startSubstring,posOfNSSep,nChars);} else {addToTokenQueue(pat.substring(startSubstring,nChars));}}if (0 == m_compiler.getTokenQueueSize()) {m_processor.error(XPATHErrorResources.ER_EMPTY_EXPRESSION,null);} else if (null != targetStrings) {recordTokenString(targetStrings);}m_processor.m_queueMark=0;}  }
class C{  protected boolean nameMatches(String searchName,ICompilationUnit cu,boolean partialMatch){  if (partialMatch) {    return cu.getElementName().toLowerCase().startsWith(searchName);  } else {    return Util.equalsIgnoreJavaLikeExtension(cu.getElementName(),searchName);  }}  }
class C{  static boolean isInstantiatorUntyped(Declaration model){  return generateInstantiator(model) && Decl.isAncestorLocal(model);}  }
class C{  public GtfsParser(String network,String schedule){  this.sc=parseSchedule(schedule,network);  this.trConfig=new TransitRouterConfig(sc.getConfig());  this.trRouter=new TransitRouterImpl(this.trConfig,sc.getTransitSchedule());}  }
class C{  public HttpPost(String path,ParameterMap params){  super(path,null);  this.httpMethod=HttpMethod.POST;  this.path=path;  this.contentType=URLENCODED;  if (params != null) {    this.content=params.urlEncodedBytes();  }}  }
class C{  public SnapshotArray(Class<T> componentType){  this.componentType=componentType;  array=createArray(0);}  }
class C{  public Collection<String> split(){  String s=ident;  Set<String> result=new HashSet<String>();  while (s.length() > 0) {    StringBuilder buf=new StringBuilder();    char first=s.charAt(0);    buf.append(first);    int i=1;    if (s.length() > 1) {      boolean camelWord;      if (Character.isLowerCase(first)) {        camelWord=true;      } else {        char next=s.charAt(i++);        buf.append(next);        camelWord=Character.isLowerCase(next);      }      while (i < s.length()) {        char c=s.charAt(i);        if (Character.isUpperCase(c)) {          if (camelWord) {            break;          }        } else         if (!camelWord) {          break;        }        buf.append(c);        ++i;      }      if (!camelWord && i < s.length()) {        buf.deleteCharAt(buf.length() - 1);        --i;      }    }    result.add(buf.toString().toLowerCase(Locale.US));    s=s.substring(i);  }  return result;}  }
class C{  private String validateInputs(){  IResource container=ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(getContainerName()));  String fileName=getFileName();  if (getContainerName().length() == 0) {    return "File container must be specified";  }  if (container == null || (container.getType() & (IResource.PROJECT | IResource.FOLDER)) == 0) {    return "File container must exist";  }  if (!container.isAccessible()) {    return "Project must be writable";  }  if (fileName.length() == 0) {    return "File name must be specified";  }  if (fileName.replace('\\','/').indexOf('/',1) > 0) {    return "File name must be valid";  }  int dotLoc=fileName.lastIndexOf('.');  if (dotLoc != -1) {    String ext=fileName.substring(dotLoc + 1);    if (!ext.equalsIgnoreCase(GraphDocument.EXTENSION)) {      return "File extension must be \"." + GraphDocument.EXTENSION + "\"";    }  }  return null;}  }
class C{  public void writeBits(final int value,final JBBPBitNumber bitNumber) throws IOException {  if (this.bitBufferCount == 0 && bitNumber == JBBPBitNumber.BITS_8) {    write(value);  } else {    final int initialMask;    int mask;    initialMask=1;    mask=initialMask << this.bitBufferCount;    int accum=value;    int i=bitNumber.getBitNumber();    while (i > 0) {      this.bitBuffer=this.bitBuffer | ((accum & 1) == 0 ? 0 : mask);      accum>>=1;      mask=mask << 1;      i--;      this.bitBufferCount++;      if (this.bitBufferCount == 8) {        this.bitBufferCount=0;        writeByte(this.bitBuffer);        mask=initialMask;        this.bitBuffer=0;      }    }  }}  }
class C{  public MaterialIcon(IconType iconType,String textColor,String bgColor){  this();  setIconType(iconType);  setTextColor(textColor);  setBackgroundColor(bgColor);}  }
class C{  public final Object lastElement(){  return m_Objects[m_Size - 1];}  }
class C{  public static Instances matrixToInstances(Matrix mat,Instances patternInst){  Instances result=new Instances(patternInst);  for (int i=0; i < mat.getRowDimension(); i++) {    double[] row=mat.getArray()[i];    DenseInstance denseInst=new DenseInstance(1.0,row);    result.add(denseInst);  }  return result;}  }
class C{  public PathImpl put(String scheme,PathImpl path){  SchemeRoot oldRoot=getUpdateMap().put(scheme,new SchemeRoot(path));  return oldRoot != null ? oldRoot.getRoot() : null;}  }
class C{  private static boolean isLoadIgnored(final LoadInstruction instruction){  return Stream.of(VARIABLE_NAMES_TO_IGNORE).anyMatch(null);}  }
class C{  public LZMAInputStream(InputStream in,int memoryLimit) throws IOException {  DataInputStream inData=new DataInputStream(in);  byte propsByte=inData.readByte();  int dictSize=0;  for (int i=0; i < 4; ++i)   dictSize|=inData.readUnsignedByte() << (8 * i);  long uncompSize=0;  for (int i=0; i < 8; ++i)   uncompSize|=(long)inData.readUnsignedByte() << (8 * i);  int memoryNeeded=getMemoryUsage(dictSize,propsByte);  if (memoryLimit != -1 && memoryNeeded > memoryLimit)   throw new MemoryLimitException(memoryNeeded,memoryLimit);  initialize(in,uncompSize,propsByte,dictSize,null);}  }
class C{  public void convertToString() throws IOException {  print("convertToString",null);}  }
class C{  public static void load(final PropertiesFile properties,final GUIFactory currentGUI){  String value=properties.getValue("sideTabBarCollapseLength");  if (value != null && !value.isEmpty()) {    int iValue=Integer.parseInt(value);    currentGUI.setStartSize(iValue);  }  value=properties.getValue("sideTabBarExpandLength");  if (value != null && !value.isEmpty()) {    GUI.expandedSize=Integer.parseInt(value);    currentGUI.reinitialiseTabs(false);  }  NodeList tags=properties.getChildren("*");  loadNodeList(tags,currentGUI);}  }
class C{  public void checkComputeSignificanceDoesntAlterAverage(int algNumber) throws Exception {  ConditionalMutualInfoCalculatorMultiVariateKraskov condMiCalc=getNewCalc(algNumber);  String kraskov_K="4";  condMiCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  super.testComputeSignificanceDoesntAlterAverage(condMiCalc,2,100);}  }
class C{  public boolean equals(Object obj){  return obj != null && obj.getClass() == getClass() && ((Action)obj).modeUsage.equals(modeUsage);}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  @Override public V put(K key,V value){  if (key == null) {    return putValueForNullKey(value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      preModify(e);      V oldValue=e.value;      e.value=value;      return oldValue;    }  }  modCount++;  if (size++ > threshold) {    tab=doubleCapacity();    index=hash & (tab.length - 1);  }  addNewEntry(key,value,hash,index);  return null;}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private void init(){  holder=this.getHolder();  holder.addCallback(surfaceCallback);}  }
class C{  private void initCropWindow(Rect bitmapRect){  if (initializedCropWindow == false)   initializedCropWindow=true;  if (mFixAspectRatio) {    if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > mTargetAspectRatio) {      Edge.TOP.setCoordinate(bitmapRect.top);      Edge.BOTTOM.setCoordinate(bitmapRect.bottom);      final float centerX=getWidth() / 2f;      final float cropWidth=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),Edge.BOTTOM.getCoordinate(),mTargetAspectRatio));      if (cropWidth == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.MIN_CROP_LENGTH_PX) / (Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate());      final float halfCropWidth=cropWidth / 2f;      Edge.LEFT.setCoordinate(centerX - halfCropWidth);      Edge.RIGHT.setCoordinate(centerX + halfCropWidth);    } else {      Edge.LEFT.setCoordinate(bitmapRect.left);      Edge.RIGHT.setCoordinate(bitmapRect.right);      final float centerY=getHeight() / 2f;      final float cropHeight=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateHeight(Edge.LEFT.getCoordinate(),Edge.RIGHT.getCoordinate(),mTargetAspectRatio));      if (cropHeight == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate()) / Edge.MIN_CROP_LENGTH_PX;      final float halfCropHeight=cropHeight / 2f;      Edge.TOP.setCoordinate(centerY - halfCropHeight);      Edge.BOTTOM.setCoordinate(centerY + halfCropHeight);    }  } else {    final float horizontalPadding=0.1f * bitmapRect.width();    final float verticalPadding=0.1f * bitmapRect.height();    Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);    Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);    Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);    Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);  }}  }
class C{  public List<Node> listAvailableMutations(Node node){  List<Node> result=new ArrayList<Node>();  for (  Node mutation : availableNodes) {    if (isMutationCompatible(node,mutation)) {      result.add(mutation);    }  }  return result;}  }
class C{  private PollMessage.OneTime createOneTimePollMessage(DomainApplication application,HistoryEntry historyEntry,ReservationType reservationType){  return new PollMessage.OneTime.Builder().setClientId(historyEntry.getClientId()).setEventTime(now).setMsg(reservationType == ReservationType.NAME_COLLISION ? COLLISION_MESSAGE : "Domain was allocated").setResponseData(ImmutableList.of(DomainPendingActionNotificationResponse.create(targetId,true,application.getCreationTrid(),now))).setResponseExtensions(ImmutableList.of(new LaunchInfoResponseExtension.Builder().setApplicationId(application.getForeignKey()).setPhase(application.getPhase()).setApplicationStatus(ApplicationStatus.ALLOCATED).build())).setParent(historyEntry).build();}  }
class C{  public boolean abort(){  if (super.abort()) {    if (m_server != null && m_server.isAlive()) {      try {        m_server.interrupt();      } catch (      Exception e) {      }    }    log.info("abort - done");    return true;  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void doPostRequest(HttpServletRequest req,HttpServletResponse resp) throws IOException {  doPost(req,resp);}  }
class C{  public static HttpPollerProcessor generateSampleHttpPoller(){  String pollerType="CronusAgentPoller";  String successRegex=".*\"progress\"\\s*:\\s*(100).*}";  String failureRegex=".*\"error\"\\s*:\\s*(.*).*}";  String jobIdRegex=".*\"/status/(.*?)\".*";  String progressRegex=".*\"progress\"\\s*:\\s*([0-9]*).*}";  int progressStuckTimeoutSeconds=600;  int maxPollError=5;  long pollIntervalMillis=2000L;  String jobIdPlaceHolder="$JOB_ID";  String pollerRequestTemplate="/status/" + jobIdPlaceHolder;  HttpPollerProcessor httpPollerProcessor=new HttpPollerProcessor(pollerType,successRegex,failureRegex,jobIdRegex,progressRegex,progressStuckTimeoutSeconds,pollIntervalMillis,pollerRequestTemplate,jobIdPlaceHolder,maxPollError);  return httpPollerProcessor;}  }
class C{  public ServiceProcess addProcess(String processNo,String processName,String description,long dossierTemplateId,ServiceContext context) throws PortalException, SystemException {  long serviceProcessId=counterLocalService.increment(ServiceProcess.class.getName());  ServiceProcess serviceProcess=serviceProcessPersistence.create(serviceProcessId);  Date now=new Date();  if (Validator.isNotNull(serviceProcess)) {    serviceProcess.setCompanyId(context.getCompanyId());    serviceProcess.setGroupId(context.getScopeGroupId());    serviceProcess.setCreateDate(now);    serviceProcess.setModifiedDate(now);    serviceProcess.setUserId(context.getUserId());    serviceProcess.setProcessNo(processNo);    serviceProcess.setProcessName(processName);    serviceProcess.setDescription(description);    serviceProcess.setDossierTemplateId(dossierTemplateId);    serviceProcessPersistence.update(serviceProcess);  }  return serviceProcess;}  }
class C{  public static ExampleSet createExampleSet(double[][] data){  return createExampleSet(data,null);}  }
class C{  protected void init(){  saslNegotiated=false;  saslFailed=false;  resourceBinded=false;  sessionSupported=false;}  }
class C{  public boolean isEmpty(){  return fMap.isEmpty();}  }
class C{  public void checkCanceled(){  throttle();  if (cancelAt == 0) {    return;  }  long time=System.currentTimeMillis();  if (time >= cancelAt) {    cancelAt=0;    throw DbException.get(ErrorCode.STATEMENT_WAS_CANCELED);  }}  }
class C{  @Deprecated public void saveInfoToFile(String key,JSONObject object){  JSONObject existJSON=null;  try {    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) && DeviceHelper.getInstance(context).checkPermissions("android.permission.WRITE_EXTERNAL_STORAGE")) {      File cacheRoot=new File(getSdcardPath(),packageName);      if (!cacheRoot.exists()) {        cacheRoot.mkdirs();        Ln.i("cacheRoot path","no path");      }      File cacheFile=new File(cacheRoot,"mobclick_agent_cached_" + packageName);      if (!cacheFile.exists()) {        cacheFile.createNewFile();        Ln.i("cacheFile path","no path createNewFile");      }      FileInputStream in=new FileInputStream(cacheFile);      StringBuffer sb=new StringBuffer();      int i=0;      byte[] s=new byte[1024 * 4];      while ((i=in.read(s)) != -1) {        sb.append(new String(s,0,i));      }      in.close();      if (sb.length() != 0) {        existJSON=new JSONObject(sb.toString());      } else {        existJSON=new JSONObject();      }      if (existJSON.has(key)) {        JSONArray newDataArray=existJSON.getJSONArray(key);        Ln.i("SaveInfo",object + "");        newDataArray.put(object);      } else {        JSONArray newArray=new JSONArray();        newArray.put(0,object);        existJSON.put(key,newArray);        Ln.i("SaveInfo","jsonobject" + existJSON);      }      Ln.i("SaveInfo","save json data to the cached file!");      FileOutputStream fileOutputStream=new FileOutputStream(cacheFile,false);      fileOutputStream.write(existJSON.toString().getBytes());      fileOutputStream.flush();      fileOutputStream.close();    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  @Deprecated public static double[] readDoubles(){  return readAllDoubles();}  }
class C{  public ExponentialGenerator(double mean){  _gamma=1.0 / mean;}  }
class C{  public boolean isEnd(){switch (compareType) {case Comparison.EQUAL:case Comparison.EQUAL_NULL_SAFE:case Comparison.SMALLER_EQUAL:case Comparison.SMALLER:    return true;default :  return false;}}  }
class C{  public void updateTitle(JasDocument doc){  int index=DocTab.indexOfComponent(doc);  if (index != -1) {    DocTab.setTitleAt(index,doc.getTitle());  }}  }
class C{  @Override protected IFitsHeader[] columnKeyStems(){  return BinaryTableHDU.KEY_STEMS;}  }
class C{  public static long fromString(String val){  String clean=val.replaceAll("\\D+","");  return Long.parseLong(clean);}  }
class C{  public static void printMessage(int errorCode,String[] parameters){  recorder.record(errorCode,(Object[])parameters);  DebugPrinter.print("entering printMessage(int, String[]) with errorCode " + errorCode);  ToolIO.out.println(getMessage(NONE,errorCode,parameters));  DebugPrinter.print("leaving printError(int, String[]) with errorCode ");}  }
class C{  public IndexedLagGraph(LagGraph lagGraph,boolean excludeSelfOneBack){  if (lagGraph == null) {    throw new NullPointerException("Lag graph must not be null.");  }  this.factors=new ArrayList<>(lagGraph.getFactors());  this.parents=new IndexedParent[this.factors.size()][];  for (int i=0; i < this.factors.size(); i++) {    String factor=this.factors.get(i);    SortedSet<LaggedFactor> factorParents=lagGraph.getParents(factor);    List<IndexedParent> list=new ArrayList<>();    for (    LaggedFactor factorParent1 : factorParents) {      int index=this.factors.indexOf(factorParent1.getFactor());      int lag=factorParent1.getLag();      if (excludeSelfOneBack && index == i && lag == 1) {        continue;      }      IndexedParent parent=new IndexedParent(index,lag);      list.add(parent);    }    IndexedParent[] _parents=new IndexedParent[list.size()];    for (int i2=0; i2 < list.size(); i2++) {      _parents[i2]=list.get(i2);    }    parents[i]=_parents;  }}  }
class C{  @Override public boolean contains(final IScope scope,final Object o) throws GamaRuntimeException {  return o == null ? key == null || value == null : o.equals(key) || o.equals(value);}  }
class C{  protected int estimateElementsLen(final HeaderElement[] elems){  if ((elems == null) || (elems.length < 1))   return 0;  int result=(elems.length - 1) * 2;  for (int i=0; i < elems.length; i++) {    result+=estimateHeaderElementLen(elems[i]);  }  return result;}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] array=queue;    for (int i=0, n=size; i < n; i++) {      if (o == array[i]) {        removeAt(i);        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public boolean removeAll(AbstractDoubleList other){  if (!(other instanceof DoubleArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  double[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    DoubleArrayList sortedList=(DoubleArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  @Override public void handleEvent(Event evt){  Element e=(Element)evt.getTarget();  SVGUtil.removeCSSClass(e,cssclass);}  }
class C{  public void format(TemplateBuffer buffer,CompilationUnitContext context) throws BadLocationException {  try {    VariableTracker tracker=new VariableTracker(buffer);    IDocument document=tracker.getDocument();    internalFormat(document,context);    convertLineDelimiters(document);    if (!(context instanceof JavaDocContext) && !isReplacedAreaEmpty(context))     trimStart(document);    tracker.updateBuffer();  } catch (  MalformedTreeException e) {    throw new BadLocationException();  }}  }
class C{  public static ImageFeaturesData newInstance(InputStream metadata,InputStream stream,Integer width,Integer height,List<Filter> filters){  if (stream == null) {    throw new IllegalArgumentException("Image stream can not be null");  }  return new ImageFeaturesData(metadata,stream,width,height,filters);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new PersonalChest(getSlot(ctx));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.CALL__STEP:    return basicSetStep(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void onFieldByte(final Object obj,final Field field,final Bin annotation,final boolean signed,final int value){}  }
class C{  public void mouseReleased(MouseEvent e){  if (dragger != null) {    if (e.getSource() == splitPane) {      dragger.completeDrag(e.getX(),e.getY());    } else     if (e.getSource() == BasicSplitPaneDivider.this) {      Point ourLoc=getLocation();      dragger.completeDrag(e.getX() + ourLoc.x,e.getY() + ourLoc.y);    } else     if (e.getSource() == hiddenDivider) {      Point hDividerLoc=hiddenDivider.getLocation();      int ourX=e.getX() + hDividerLoc.x;      int ourY=e.getY() + hDividerLoc.y;      dragger.completeDrag(ourX,ourY);    }    dragger=null;    e.consume();  }}  }
class C{  @Ignore public static FloatArray instance(float[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public void dup2(){  mv.visitInsn(Opcodes.DUP2);}  }
class C{  public int next(){  int c;  try {    c=this.read();    if (c == '\r') {      int c1=this.read();      if (c1 == '\n') {        c='\n';      } else {        this.unread(c1);        c='\n';      }    }    if (c == '\n')     this.lineCount++;    return c;  } catch (  java.io.IOException e) {    throw new HandleError(e);  }}  }
class C{  private float calculateCurrentPositionFromIndexY(float indexY){  return mWidth * indexY;}  }
class C{  protected WS.WSRequest newRequest(String authToken,Object request,String path,String... args){  WS.WSRequest wsReq=WS.url(encodeUrl(apiUrlFactory.getUrl() + path,args));  wsReq.timeout(TIMEOUT);  if (authToken != null) {    wsReq.setHeader(AUTH_TOKEN_KEY,authToken);  }  wsReq.setHeader("Accept","application/json");  if (request != null) {    String json=gson.toJson(request);    wsReq.setHeader("Content-Type","application/json");    wsReq.body(json);  }  return wsReq;}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return true;}  }
class C{  public CircuitBreakerBuilder minimumRequestThreshold(long minimumRequestThreshold){  if (minimumRequestThreshold < 0) {    throw new IllegalArgumentException("minimumRequestThreshold: " + minimumRequestThreshold + " (expected: >= 0)");  }  this.minimumRequestThreshold=minimumRequestThreshold;  return this;}  }
class C{  public static CompiledMethod compile(NativeMethod method){  Callbacks.notifyMethodCompile(method,CompiledMethod.JNI);  long start=0;  CompiledMethod cm=null;  try {    if (VM.MeasureCompilation || VM.BuildForAdaptiveSystem) {      start=Time.nanoTime();    }    if (VM.BuildForIA32) {      cm=org.jikesrvm.jni.ia32.JNICompiler.compile(method);    } else {      if (VM.VerifyAssertions)       VM._assert(VM.BuildForPowerPC);      cm=org.jikesrvm.jni.ppc.JNICompiler.compile(method);    }    if (VM.verboseJNI) {      VM.sysWriteln("[Dynamic-linking native method " + method.getDeclaringClass() + "."+ method.getName()+ " "+ method.getDescriptor());    }  }  finally {    if (VM.MeasureCompilation || VM.BuildForAdaptiveSystem) {      long end=Time.nanoTime();      if (cm != null) {        double compileTime=Time.nanosToMillis(end - start);        cm.setCompilationTime(compileTime);        record(JNI_COMPILER,method,cm);      }    }  }  return cm;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.SERVICE_INVOCATION__CONTEXT:    return getContext();case EipPackage.SERVICE_INVOCATION__OPERATION_NAME:  return getOperationName();case EipPackage.SERVICE_INVOCATION__SERVICE_REF:if (resolve) return getServiceRef();return basicGetServiceRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void checkRole(AppContext ctx,Persistent<?> object,Role role){  Role objectRole=object.getUserRole();  boolean hasRole;  if (objectRole != null) {    hasRole=(maxRole(role,objectRole) == objectRole);  } else {    hasRole=hasRole(ctx.getUser(),object.getAccessRights(),role);  }  if (!hasRole) {    throw new InvalidCredentialsAPIException("Insufficient privileges : caller hasn't " + role.name() + " role on "+ object.getId(),ctx.isNoError());  }}  }
class C{  public void show(PeekViewActivity activity,MotionEvent motionEvent){  PeekView peek;  if (layout == null) {    peek=new PeekView(activity,options,layoutRes,callbacks);  } else {    peek=new PeekView(activity,options,layout,callbacks);  }  peek.setOffsetByMotionEvent(motionEvent);  activity.showPeek(peek,motionEvent.getRawY());}  }
class C{  private void checkIfOtherTenantsUsingTheVcenter(Vcenter vcenter){  if (!isSystemAdmin() && !CollectionUtils.isEmpty(vcenter.getAcls()) && vcenter.getAcls().size() > 1) {    throw APIException.forbidden.tenantAdminCannotDeleteVcenter(getUserFromContext().getName(),vcenter.getLabel());  }}  }
class C{  private void commonInit(MUser from,String to,String subject,String message,File attachment){  m_client=MClient.get(Env.getCtx());  try {    int WindowNo=0;    int AD_Column_ID=0;    Lookup lookup=MLookupFactory.get(Env.getCtx(),WindowNo,AD_Column_ID,DisplayType.Search,Env.getLanguage(Env.getCtx()),"AD_User_ID",0,false,"EMail IS NOT NULL");    fUser=new WSearchEditor(lookup,"AD_User_ID","",false,false,true);    fUser.addValueChangeListener(this);    fCcUser=new WSearchEditor(lookup,"AD_User_ID","",false,false,true);    fCcUser.addValueChangeListener(this);    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"EMailDialog",ex);  }  set(from,to,subject,message);  setAttachment(attachment);  AEnv.showCenterScreen(this);}  }
class C{  void addAssociatedComponent(Component cmp){  if (comps == null) {    comps=new Vector();  }  comps.addElement(cmp);}  }
class C{  public boolean canSetDate(){  return canSet(Date.class);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  float[] oldSet=_set;  byte[] oldStates=_states;  _set=new float[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      float o=oldSet[i];      int index=insertionIndex(o);      _set[index]=o;      _states[index]=FULL;    }  }}  }
class C{  @Deprecated public PlanStrategyImpl(final PlanSelector<Plan,Person> planSelector){  super(planSelector);}  }
class C{  public Request(final byte[] initiator,final DigestURL url,final byte[] referrerhash,final String name,final Date appdate,final String profileHandle,final int depth,final int timezoneOffset){  assert url != null;  assert profileHandle == null || profileHandle.length() == Word.commonHashLength : profileHandle + " != " + Word.commonHashLength;  url.removeRef();  this.initiator=(initiator == null) ? null : ((initiator.length == 0) ? null : initiator);  this.url=url;  this.refhash=referrerhash;  this.name=(name == null) ? "" : name;  this.appdate=(appdate == null) ? 0 : appdate.getTime();  this.profileHandle=profileHandle;  this.depth=depth;  this.timezoneOffset=timezoneOffset;  this.flags=new Bitfield(rowdef.width(10));  this.statusMessage="loaded(args)";  this.initialHash=url.hashCode();  this.status=WorkflowJob.STATUS_INITIATED;}  }
class C{  public boolean isField(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.FIELD);}  }
class C{  public final boolean isFlowX(){  return flowX;}  }
class C{  private void defaultDialogSize(JFrame owner){  this.setBounds(owner.getX() + owner.getWidth(),owner.getY(),MQTTFrame.FRAME_WIDTH,MQTTFrame.FRAME_HEIGHT);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putFloat(get(rowNumber)).array();}  }
class C{  public void strategyStarted(String strategyClassName,final Tradestrategy tradestrategy){}  }
class C{  @Override public boolean isSigned(int column) throws SQLException {  try {    debugCodeCall("isSigned",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static Userprofiles merge(Userprofiles... userprofiles){  Userprofiles result=new Userprofiles();  Map<String,Boolean> existMap=new HashMap<String,Boolean>();  for (  Userprofiles userprofilesContainer : userprofiles) {    for (    Userprofile up : userprofilesContainer.getUserprofile()) {      if (!existMap.containsKey(up.getLogin())) {        existMap.put(up.getLogin(),Boolean.TRUE);        result.getUserprofile().add(up);      }    }  }  return result;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.PARAMETER__TYPE_SPECIFIER:    setTypeSpecifier((TypeSpecifier)newValue);  return;case TypesPackage.PARAMETER__NAME:setName((String)newValue);return;case TypesPackage.PARAMETER__ANNOTATIONS:getAnnotations().clear();getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;case TypesPackage.PARAMETER__OWNING_OPERATION:setOwningOperation((Operation)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public synchronized int size() throws InterruptedException {  return _data.size();}  }
class C{  public void scheduleAtFixedRate(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay,period,true);}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (!isCyclic && ((currentItem == 0 && scrollingOffset > 0) || (currentItem == itemCount - 1 && scrollingOffset < 0))) {    scrollingOffset=0;  }  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public boolean canUnloadUnits(){  return doors > unloadedThisTurn;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testNextLongBounded(){  SplittableRandom sr=new SplittableRandom();  for (long bound=2; bound < MAX_LONG_BOUND; bound+=15485863) {    long f=sr.nextLong(bound);    assertTrue(0 <= f && f < bound);    int i=0;    long j;    while (i < NCALLS && (j=sr.nextLong(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public String sprintf(final int x) throws IllegalArgumentException {  final Iterator<ConversionSpecification> e=vFmt.iterator();  ConversionSpecification cs;  char c;  final StringBuilder sb=new StringBuilder();  while (e.hasNext()) {    cs=e.next();    c=cs.getConversionCharacter();    if (c == '\0') {      sb.append(cs.getLiteral());    } else     if (c == '%') {      sb.append('%');    } else {      sb.append(cs.internalsprintf(x));    }  }  return sb.toString();}  }
class C{  public SearchQueryNamed(final String searchQueryName,final String countQueryName,final List<Object> params){  this.searchQueryName=searchQueryName;  this.countQueryName=countQueryName;  if (params != null) {    this.params=params.toArray();  }}  }
class C{  public InsulatedCargoBay(double space,int doors,int bayNumber){  totalSpace=space * 0.87;  weight=space;  currentSpace=space * 0.87;  this.doors=doors;  this.bayNumber=bayNumber;}  }
class C{  public String minimumFractionOfWeightInfoGainTipText(){  return "Minimum fraction of weight required down at least two branches " + "for info gain splitting.";}  }
class C{  public String print() throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  this.print(baos);  return new Utf8String(baos.toByteArray()).string();}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);}  }
class C{  public IgniteSpiException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  public static void println(){  out.println();}  }
class C{  public ObjectNode objectNode(){  return new ObjectNode(this);}  }
class C{  @Override public boolean onDragEvent(DragEvent event){  boolean result=false;switch (event.getAction()) {case DragEvent.ACTION_DRAG_STARTED:{      Log.i(TAG,"Drag started, event=" + event);      mDragInProgress=true;      mAcceptsDrag=result=true;      if (mAcceptsDrag) {        invalidate();      }    }  break;case DragEvent.ACTION_DRAG_ENDED:{  Log.i(TAG,"Drag ended.");  if (mAcceptsDrag) {    invalidate();  }  mDragInProgress=false;  mHovering=false;}break;case DragEvent.ACTION_DRAG_LOCATION:{Log.i(TAG,"... seeing drag locations ...");result=mAcceptsDrag;}break;case DragEvent.ACTION_DROP:{Log.i(TAG,"Got a drop! dot=" + this + " event="+ event);if (mAnrType == ANR_DROP) {sleepSixSeconds();}processDrop(event);result=true;}break;case DragEvent.ACTION_DRAG_ENTERED:{Log.i(TAG,"Entered dot @ " + this);mHovering=true;invalidate();}break;case DragEvent.ACTION_DRAG_EXITED:{Log.i(TAG,"Exited dot @ " + this);mHovering=false;invalidate();}break;default :Log.i(TAG,"other drag event: " + event);result=mAcceptsDrag;break;}return result;}  }
class C{  public boolean isPrimitive(){  return this.data instanceof Primitive;}  }
class C{  public boolean isCapacityExceeded(LicenseInfoExt licenseInfo){  double currentCapacityUsed=0;  double licenseCapacity=Double.parseDouble(licenseInfo.getStorageCapacity());  try {    if (licenseInfo.getLicenseType().equals(LicenseType.CONTROLLER)) {      currentCapacityUsed=getTotalControllerCapacity();    } else {      return false;    }    Object[] args=new Object[]{licenseInfo.getModelId(),currentCapacityUsed,licenseCapacity};    _log.info("Capacity currently used by {}: {}, licensed capacity: {}",args);    return currentCapacityUsed > licenseCapacity;  } catch (  Exception e) {    _log.warn("Internal server error occurred while getting capacity: {}",e);  }  return false;}  }
class C{  private void handleException(final Call call,final Exception e,final Callback callback){  if (call.isCanceled()) {    callback.onCancellation();  } else {    callback.onFailure(e);  }}  }
class C{  public URLReaderSource(URL url,CompilerConfiguration configuration){  super(configuration);  this.url=url;}  }
class C{  private HashUtil(){  instanceNotAllowed(getClass());}  }
class C{  private int matchValidateAt(final List<Entry> rates,final Date date){  final Valid_at va=new Valid_at(date);  for (int i=0; i < rates.size(); i++) {    if (va.operator(rates.get(i)))     return i;  }  return -1;}  }
class C{  private Long id(YokeRequest request){  String strId=request.getParameter(ID,"").trim();  return strId.isEmpty() ? null : Long.valueOf(strId);}  }
class C{  private void stopScan(){  if (mIsScanning) {    mScanButton.setText(R.string.scanner_action_scan);    final BluetoothLeScannerCompat scanner=BluetoothLeScannerCompat.getScanner();    scanner.stopScan(scanCallback);    mIsScanning=false;  }}  }
class C{  public T clicked(Object handler,String method){  Common common=new Common().forward(handler,method,true,ON_CLICK_SIG);  return clicked(common);}  }
class C{  public static String encode(final boolean b){  return b ? "T" : "F";}  }
class C{  public Dtg(){  super(DATETIME_REGEX,false,1.0);}  }
class C{  public synchronized String createCacheEntry() throws SessionException {  CacheBag cacheBag=new CacheBag();  cacheBag.setSessionID(IDGeneratorFactory.getIDGenerator().getSessionID());  cache.putInCache(cacheBag.getSessionID(),cacheBag,cacheBag);  generatedSessionsID.add(cacheBag.getSessionID());  sessionCount++;  return cacheBag.getSessionID();}  }
class C{  public DisruptionSpawn(String unlocalizedName,DeityType deity,Class<? extends EntityLivingBase> entity){  super(unlocalizedName,deity);  this.entity=entity;}  }
class C{  private static void processDeselectionMap(final IBitArray mask,final List<Integer[]> selection){  if (mask != null)   for (int i=Math.min(selection.size() - 1,mask.getCount() - 1); i >= 0; i--)   if (mask.getBit(i))   selection.remove(i);}  }
class C{  protected boolean afterDelete(boolean success){  if (success) {    deleteAccessRecords();  }  return success;}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  public int numElements(){  return m_number;}  }
class C{  public static double[] computeMinMax(List<? extends SpatialComparable> objs){  final int dim=objs.get(0).getDimensionality();  double[] mm=new double[dim << 1];{    for (int d=0, d2=0; d < dim; d++, d2+=2) {      mm[d2]=Double.POSITIVE_INFINITY;      mm[d2 + 1]=Double.NEGATIVE_INFINITY;    }    for (    SpatialComparable obj : objs) {      for (int d=0, d2=0; d < dim; d++, d2+=2) {        mm[d2]=Math.min(mm[d2],obj.getMin(d));        mm[d2 + 1]=Math.max(mm[d2 + 1],obj.getMax(d));      }    }    for (int d=0, d2=0; d < dim; d++, d2+=2) {      assert (mm[d2] <= mm[d2 + 1]) : ("Min > Max in dim " + d + ": "+ mm[d2]+ " "+ mm[d2 + 1]);    }  }  return mm;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.546 -0500",hash_original_method="9BEBBB6A7E36A898084CFD13E6678C15",hash_generated_method="D33A34F7753A9832F3E175389FBAA7AF") public void print(char[] charArray){  print(new String(charArray,0,charArray.length));}  }
class C{  public InvalidKeyException(String msg){  super(msg);}  }
class C{  public DebugMessageIntegerArgument(final int value){  super(DebugArgumentType.INTEGER);  appendInt(value);}  }
class C{  public static long stringToBytes(String formattedString){  if (formattedString == null) {    return 0L;  }  Matcher matcher=REGEX_MATCHER.matcher(formattedString);  if (!matcher.matches()) {    throw new IllegalArgumentException("The formatted string [" + formattedString + "] does not match with the regex /"+ REGEX_MATCHER.toString()+ "/");  }  if (matcher.groupCount() != 1 && matcher.groupCount() != 2) {    throw new IllegalArgumentException();  }  double numPart=Double.parseDouble(matcher.group(1));  if (numPart < 0) {    throw new IllegalArgumentException("The number part of the memory cannot be less than zero: [" + numPart + "].");  }  String unitPart=matcher.groupCount() == 2 ? matcher.group(2).toUpperCase() : "";  if (!unitPart.endsWith("B")) {    unitPart+="B";  }  for (int i=0; i < UNITS.length; i++) {    if (unitPart.equals(UNITS[i].getName())) {      return (long)(numPart * UNITS[i].getBytes());    }  }  throw new IllegalArgumentException("The formatted string [" + formattedString + "] 's unit part ["+ unitPart+ "] does not match any unit. The supported units are (case-insensitive, and also the 'B' is ignorable): ["+ StringUtils.join(UNITS)+ "].");}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GROUP_LOCAL_DEVICE_DB' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'GROUP_ID' INTEGER NOT NULL ,"+ "'BSSID' TEXT NOT NULL );");}  }
class C{  public boolean satisfiedBasedOnChildren(boolean[] childValues){  if (this.isLeaf) {    return false;  }  return satisfiedBasedOnChildrenValues(childValues);}  }
class C{  public APIAuthenticationResult(String authToken,String username,String dataSource,List<String> availableDataSources){  this.authToken=authToken;  this.username=username;  this.dataSource=dataSource;  this.availableDataSources=Collections.unmodifiableList(availableDataSources);}  }
class C{  private ExpectedPartitionValueInformation createExpectedPartitionValueInformationFromEntity(ExpectedPartitionValueEntity expectedPartitionValueEntity){  ExpectedPartitionValueInformation expectedPartitionValueInformation=new ExpectedPartitionValueInformation();  ExpectedPartitionValueKey expectedPartitionValueKey=new ExpectedPartitionValueKey();  expectedPartitionValueInformation.setExpectedPartitionValueKey(expectedPartitionValueKey);  expectedPartitionValueKey.setPartitionKeyGroupName(expectedPartitionValueEntity.getPartitionKeyGroup().getPartitionKeyGroupName());  expectedPartitionValueKey.setExpectedPartitionValue(expectedPartitionValueEntity.getPartitionValue());  return expectedPartitionValueInformation;}  }
class C{  private void createColocatedPRs(final String colocatedWith){  Cache cache=getCache();  DiskStore ds=cache.findDiskStore("disk");  if (ds == null) {    ds=cache.createDiskStoreFactory().setDiskDirs(getDiskDirs()).create("disk");  }  AttributesFactory af=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  paf.setRedundantCopies(0);  af.setPartitionAttributes(paf.create());  af.setDataPolicy(DataPolicy.PERSISTENT_PARTITION);  af.setDiskStoreName("disk");  cache.createRegion("region1",af.create());  cache.createRegion("region2",af.create());  if (colocatedWith != null) {    paf.setColocatedWith(colocatedWith);  }  af.setPartitionAttributes(paf.create());  cache.createRegion("region3",af.create());}  }
class C{  @Override protected void onPostCreate(Bundle savedInstanceState){  super.onPostCreate(savedInstanceState);  if (mainView == null) {    throw new IllegalStateException("mainView is null, did you set this view?");  }  root.addView(mainView);  if (prismView == null) {    prismView=new FrameLayout(getApplicationContext());    prismView.setId(prismView.getClass().hashCode());  }  root.addView(prismView,FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT);  initializePositions();}  }
class C{  public void AppExit(Context context){  try {    finishAllActivities();    ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);    activityManager.restartPackage(context.getPackageName());    System.exit(0);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static void main(String[] args){  StoreScheduler ss=new StoreScheduler();  TimeBlock key1=new TimeBlock(2,540,780);  TimeBlock key2=new TimeBlock(2,660,1080);  TimeBlock key3=new TimeBlock(2,720,1200);  ss.add(key1,new Employee("Alice"));  ss.add(key2,new Employee("Bob"));  ss.add(key3,new Employee("Carl"));  for (Iterator<EmployeeInterval> it=ss.employees(new TimeBlock(2,600,661)); it.hasNext(); ) {    EmployeeInterval empl=it.next();    System.out.println(empl);  }}  }
class C{  public void addLocalMap(MyMap localMap){  if (!getLocalMapNameList().contains(localMap.getMapName())) {    this.localMaps.add(localMap);  }}  }
class C{  public static int calcTextHeight(Paint paint,String demoText){  Rect r=new Rect();  paint.getTextBounds(demoText,0,demoText.length(),r);  return r.height();}  }
class C{  public void invalidateVisualState(){  arguments.forEach(null);  result.invalidateVisualState();}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  public static FileTemplate createMetaDataTemplate(String scriptDirectory,String hostname){  Map<String,String> parameters=new HashMap();  parameters.put("$INSTANCE_ID",hostname);  parameters.put("$LOCAL_HOSTNAME",hostname);  FileTemplate template=new FileTemplate();  template.filePath=Paths.get(scriptDirectory,META_DATA_TEMPLATE).toString();  template.parameters=parameters;  return template;}  }
class C{  protected void updateTracks(){  MapEnvironment mEnv=getMapEnv();  if (mEnv != null)   for (  Agent a : mEnv.getAgents()) {    List<String> aTrack=getTrack(a);    String aLoc=mEnv.getAgentLocation(a);    if (aTrack == null) {      aTrack=new ArrayList<String>();      agentTracks.put(a,aTrack);    }    if (aTrack.isEmpty() || !aTrack.get(aTrack.size() - 1).equals(aLoc))     aTrack.add(aLoc);  }}  }
class C{  private final boolean shouldProposeGenerics(IJavaProject project){  String sourceVersion;  if (project != null)   sourceVersion=project.getOption(JavaCore.COMPILER_SOURCE,true); else   sourceVersion=JavaCore.getOption(JavaCore.COMPILER_SOURCE);  return JavaModelUtil.is50OrHigher(sourceVersion);}  }
class C{  public T save(T object){  currentSession().save(object);  return object;}  }
class C{  private static String combineLibs(String[] list1,String[] list2){  StringBuilder result=new StringBuilder(300);  boolean first=true;  if (list1 != null) {    for (    String s : list1) {      if (first) {        first=false;      } else {        result.append(':');      }      result.append(s);    }  }  boolean dupCheck=!first;  if (list2 != null) {    for (    String s : list2) {      if (dupCheck && ArrayUtils.contains(list1,s)) {        continue;      }      if (first) {        first=false;      } else {        result.append(':');      }      result.append(s);    }  }  return result.toString();}  }
class C{  @Override public void inc(){  inc(1);}  }
class C{  protected void parsePreserveAspectRatio() throws ParseException, IOException {  fragmentIdentifierHandler.startPreserveAspectRatio();  align: switch (current) {case 'n':    current=reader.read();  if (current != 'o') {    reportCharacterExpectedError('o',current);    skipIdentifier();    break align;  }current=reader.read();if (current != 'n') {reportCharacterExpectedError('n',current);skipIdentifier();break align;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break align;}current=reader.read();skipSpaces();fragmentIdentifierHandler.none();break;case 'x':current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}current=reader.read();if (current != 'Y') {reportCharacterExpectedError('Y',current);skipIdentifier();break align;}current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break align;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}fragmentIdentifierHandler.xMaxYMax();current=reader.read();break;case 'i':current=reader.read();switch (current) {case 'd':fragmentIdentifierHandler.xMaxYMid();current=reader.read();break;case 'n':fragmentIdentifierHandler.xMaxYMin();current=reader.read();break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}}break;case 'i':current=reader.read();switch (current) {case 'd':current=reader.read();if (current != 'Y') {reportCharacterExpectedError('Y',current);skipIdentifier();break align;}current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break align;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}fragmentIdentifierHandler.xMidYMax();current=reader.read();break;case 'i':current=reader.read();switch (current) {case 'd':fragmentIdentifierHandler.xMidYMid();current=reader.read();break;case 'n':fragmentIdentifierHandler.xMidYMin();current=reader.read();break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}}break;case 'n':current=reader.read();if (current != 'Y') {reportCharacterExpectedError('Y',current);skipIdentifier();break align;}current=reader.read();if (current != 'M') {reportCharacterExpectedError('M',current);skipIdentifier();break align;}current=reader.read();switch (current) {case 'a':current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);skipIdentifier();break align;}fragmentIdentifierHandler.xMinYMax();current=reader.read();break;case 'i':current=reader.read();switch (current) {case 'd':fragmentIdentifierHandler.xMinYMid();current=reader.read();break;case 'n':fragmentIdentifierHandler.xMinYMin();current=reader.read();break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}}break;default :reportUnexpectedCharacterError(current);skipIdentifier();break align;}break;default :reportUnexpectedCharacterError(current);skipIdentifier();}break;default :if (current != -1) {reportUnexpectedCharacterError(current);skipIdentifier();}}skipCommaSpaces();switch (current) {case 'm':current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break;}current=reader.read();if (current != 't') {reportCharacterExpectedError('t',current);skipIdentifier();break;}fragmentIdentifierHandler.meet();current=reader.read();break;case 's':current=reader.read();if (current != 'l') {reportCharacterExpectedError('l',current);skipIdentifier();break;}current=reader.read();if (current != 'i') {reportCharacterExpectedError('i',current);skipIdentifier();break;}current=reader.read();if (current != 'c') {reportCharacterExpectedError('c',current);skipIdentifier();break;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);skipIdentifier();break;}fragmentIdentifierHandler.slice();current=reader.read();}fragmentIdentifierHandler.endPreserveAspectRatio();}  }
class C{  private static int determineDBVendor(String dbVendor) throws Exception {  if (dbVendor.indexOf(DbEngine.SQLSERVER_STR) != -1)   return DbEngine.SQLSERVER; else   if (dbVendor.indexOf(DbEngine.ORACLE_STR) != -1)   return DbEngine.ORACLE; else   if (dbVendor.indexOf(DbEngine.MYSQL_STR) != -1)   return DbEngine.MYSQL; else   if (dbVendor.indexOf(DbEngine.POSTGRESQL_STR) != 1)   return DbEngine.POSTGRESQL; else   if (dbVendor.indexOf(DbEngine.DB2_STR) != -1)   return DbEngine.DB2;  throw new IeciTdException(DbError.EC_INVALID_ENGINE,DbError.EM_INVALID_ENGINE);}  }
class C{  public static boolean isValidCodePoint(int codePoint){  return (MIN_CODE_POINT <= codePoint && MAX_CODE_POINT >= codePoint);}  }
class C{  public int charAt(int position){  if (position > this.length) {    return -1;  }  if (position < 0) {    return -1;  }  ByteBuffer bb=(ByteBuffer)ByteBuffer.wrap(bytes).position(position);  return bytesToCodePoint(bb.slice());}  }
class C{  public final Object copy(){  FastVector copy=new FastVector(m_Objects.length,m_CapacityIncrement,m_CapacityMultiplier);  copy.m_Size=m_Size;  System.arraycopy(m_Objects,0,copy.m_Objects,0,m_Size);  return copy;}  }
class C{  public static X509CRL loadCrl(String asciiCrl) throws GeneralSecurityException {  ByteArrayInputStream input=new ByteArrayInputStream(asciiCrl.getBytes(US_ASCII));  try {    return Iterables.getOnlyElement(FluentIterable.from(CertificateFactory.getInstance("X.509").generateCRLs(input)).filter(X509CRL.class));  } catch (  NoSuchElementException e) {    throw new CRLException("No X509CRL found.");  }catch (  IllegalArgumentException e) {    throw new CRLException("Multiple X509CRL found.");  }}  }
class C{  public synchronized boolean add(Object o){  modCount++;  ensureCapacityHelper(elementCount + 1);  elementData[elementCount++]=o;  return true;}  }
class C{  @Override public boolean filterResult(long resultNode,SmallArrayBasedLongToDoubleMap[] socialProofs){  return originalTimeStampFromTweetId(resultNode) < cutoff;}  }
class C{  public static byte[] composeString(final byte[] oldString,final byte newString){  final int length=oldString.length;  final byte[] string=new byte[length + 1];  System.arraycopy(oldString,0,string,0,length);  string[length]=newString;  return string;}  }
class C{  public void refreshRemoveDividers() throws Exception {  m_dividers.refreshRemoveNodes();}  }
class C{  private EdgeRing findEdgeRingContaining(EdgeRing testEr,List shellList){  LinearRing testRing=testEr.getLinearRing();  Envelope testEnv=testRing.getEnvelopeInternal();  Coordinate testPt=testRing.getCoordinateN(0);  EdgeRing minShell=null;  Envelope minEnv=null;  for (Iterator it=shellList.iterator(); it.hasNext(); ) {    EdgeRing tryShell=(EdgeRing)it.next();    LinearRing tryRing=tryShell.getLinearRing();    Envelope tryEnv=tryRing.getEnvelopeInternal();    if (minShell != null)     minEnv=minShell.getLinearRing().getEnvelopeInternal();    boolean isContained=false;    if (tryEnv.contains(testEnv) && CGAlgorithms.isPointInRing(testPt,tryRing.getCoordinates()))     isContained=true;    if (isContained) {      if (minShell == null || minEnv.contains(tryEnv)) {        minShell=tryShell;      }    }  }  return minShell;}  }
class C{  public static int countSetBitsFromMinusNtoN(int n){  return n * 32 + CountSetBits.countSetBits((long)n);}  }
class C{  private float rotateAnchor(float u,float v){switch (mRotation) {case 0:    return u;case 1:  return 1 - v;case 2:return 1 - u;case 3:return v;default :}throw new IllegalStateException();}  }
class C{  @Override public void resume(){  RUN_ACTION.setState(process.getProcessState());}  }
class C{  public PriceModelException(final String message){  super(message);}  }
class C{  @Nullable public static PsiDirectory stepBackFrom(PsiFile base,int depth){  if (depth == 0) {    return base.getContainingDirectory();  }  PsiDirectory result;  if (base != null) {    base=base.getOriginalFile();    result=base.getContainingDirectory();    int count=1;    while (result != null && PyUtil.isPackage(result,base)) {      if (count >= depth)       return result;      result=result.getParentDirectory();      count+=1;    }  }  return null;}  }
class C{  public SignificantTermsBuilder shardMinDocCount(int shardMinDocCount){  bucketCountThresholds.setShardMinDocCount(shardMinDocCount);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTABLE_PROPERTY_ASSIGNMENT;}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  int col=0;  int ncells=getViewCount();  for (int cell=0; cell < ncells; cell++) {    View cv=getView(cell);    if (skipComments && !(cv instanceof CellView)) {      continue;    }    for (; isFilled(col); col++)     ;    int colSpan=getColumnsOccupied(cv);    spans[cell]=columnSpans[col];    offsets[cell]=columnOffsets[col];    if (colSpan > 1) {      int n=columnSpans.length;      for (int j=1; j < colSpan; j++) {        if ((col + j) < n) {          spans[cell]+=columnSpans[col + j];          spans[cell]+=cellSpacing;        }      }      col+=colSpan - 1;    }    col++;  }}  }
class C{  private void saveBucket(AutoMixBucket bucket){  if (!bucket.isPlaylistSessionError()) {    SharedPreferences prefs=getPrefs();    SharedPreferences.Editor editor=prefs.edit();    final String id=bucket.getSessionId();    if (id != null) {      editor.putString(PREF_PREFIX_NAME + id,bucket.mName);      editor.putFloat(PREF_PREFIX_ADVENTUROUS + id,bucket.mAdventurousness);      editor.putFloat(PREF_PREFIX_ENERGY + id,bucket.mEnergy);      editor.putFloat(PREF_PREFIX_FAMILIAR + id,bucket.mFamiliar);      editor.putString(PREF_PREFIX_MOODS + id,Utils.implode(bucket.mMoods,","));      editor.putString(PREF_PREFIX_SONG_TYPES + id,Utils.implode(bucket.mSongTypes,","));      editor.putFloat(PREF_PREFIX_SPEECHINESS + id,bucket.mSpeechiness);      editor.putString(PREF_PREFIX_STYLES + id,Utils.implode(bucket.mStyles,","));      editor.putBoolean(PREF_PREFIX_TASTE + id,bucket.mUseTaste);      Set<String> set=new TreeSet<>(prefs.getStringSet(PREF_BUCKETS_IDS,new TreeSet<String>()));      set.add(id);      editor.putStringSet(PREF_BUCKETS_IDS,set);      editor.apply();    }  } else {    Log.e(TAG,"Cannot save bucket: playlist session is in error state");  }}  }
class C{  public static boolean isLocalFileUri(Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_FILE_SCHEME.equals(scheme);}  }
class C{  public static float ccpCross(final CGPoint v1,final CGPoint v2){  return v1.x * v2.y - v1.y * v2.x;}  }
class C{  public static Corpus load(String folderPath) throws IOException {  Corpus corpus=new Corpus();  File folder=new File(folderPath);  for (  File file : folder.listFiles()) {    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file),"UTF-8"));    String line;    List<String> wordList=new LinkedList<String>();    while ((line=br.readLine()) != null) {      String[] words=line.split(" ");      for (      String word : words) {        if (word.trim().length() < 2)         continue;        wordList.add(word);      }    }    br.close();    corpus.addDocument(wordList);  }  if (corpus.getVocabularySize() == 0)   return null;  return corpus;}  }
class C{  public static void heapSort(int[] a){  buildMaxHeap(a);  for (int i=a.length - 1; i > 0; i--) {    swap(a,0,i);    maxHeapify(a,0,i);  }}  }
class C{  public boolean match(final Dictionary<String,?> values){  if (operator == AND_OPERATOR) {    final Filter[] operandArray=operands.toArray(new Filter[operands.size()]);    for (int i=0; i < operandArray.length; i++) {      if (!operandArray[i].match(values)) {        return false;      }    }    return true;  } else   if (operator == OR_OPERATOR) {    final Filter[] operandArray=operands.toArray(new Filter[operands.size()]);    for (int i=0; i < operandArray.length; i++) {      if (operandArray[i].match(values)) {        return true;      }    }    return false;  } else   if (operator == NOT_OPERATOR) {    return !operands.get(0).match(values);  }  throw new IllegalStateException("PARSER ERROR");}  }
class C{  public Object[] toArray(){  fullyLock();  try {    int size=count.get();    Object[] a=new Object[size];    int k=0;    for (Node<E> p=head.next; p != null; p=p.next)     a[k++]=p.item;    return a;  }  finally {    fullyUnlock();  }}  }
class C{  protected void debugCodeAssign(String className,int newType,int newId,String value){  if (trace.isDebugEnabled()) {    trace.debugCode(className + " " + PREFIX[newType]+ newId+ " = "+ getTraceObjectName()+ "."+ value+ ";");  }}  }
class C{  public static void putString(Context context,String key,String value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(key,value);  editor.commit();}  }
class C{  public Network parse(File file){  try {    return parse(new URL("file:///" + file.getAbsolutePath()));  } catch (  Exception exception) {    throw new BotException("Parsing error while parsing network xml file.",exception);  }}  }
class C{  @Override public void requestMoveTest(T source,T target,Position p){  if (!isLocked())   return;  engine.testDropElement(this,interimLayoutSnapshot,layoutCopy.getNode(layoutCopy.get(source)),layout.getNode(layout.get(target)),p);}  }
class C{  public static void main(String[] args){  try {    StringBuilder builder=new StringBuilder();    builder.append("<root attr=\"");    for (int i=0; i < 200; i++) {      builder.append("\n");    }    builder.append("foo.");    builder.append("\" />");    final XMLReader reader=XMLReaderFactory.createXMLReader();    System.out.println(reader.getClass().getName());    reader.parse(new InputSource(new StringReader(builder.toString())));  } catch (  ArrayIndexOutOfBoundsException e) {    throw new RuntimeException("Test failed: ArrayIndexOutOfBoundsException " + e.getMessage());  }catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }}  }
class C{  public static Test suite(){  return (new TestSuite(MessagesRenderITCase.class));}  }
class C{  public static org.oscm.vo.VOImageResource convertToApi(org.oscm.internal.vo.VOImageResource oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOImageResource newVO=new org.oscm.vo.VOImageResource();  newVO.setBuffer(oldVO.getBuffer());  newVO.setContentType(oldVO.getContentType());  newVO.setImageType(EnumConverter.convert(oldVO.getImageType(),org.oscm.types.enumtypes.ImageType.class));  return newVO;}  }
class C{  @Override public long ramBytesUsed(){  if (fst == null) {    return 0;  }  return fst.ramBytesUsed();}  }
class C{  public static void assertGreaterThan(long great,long small,String message){  if (great <= small) {    throw new IllegalArgumentException("assertion failed: " + message);  }}  }
class C{  public static boolean isPowerOfTwo(int number){  return (number > 0) && (number & (number - 1)) == 0;}  }
class C{  public String timerString(int level,String message){  StringBuilder retStringBuf=new StringBuilder();  for (int i=0; i < level; i++) {    retStringBuf.append("| ");  }  retStringBuf.append("(");  String timeSinceStartStr=String.valueOf(timeSinceStart());  retStringBuf.append(timeSinceStartStr + ",");  String timeSinceLastStr=String.valueOf(timeSinceLast());  retStringBuf.append(timeSinceLastStr);  retStringBuf.append(")");  int spacecount=12 + (2 * level) - retStringBuf.length();  for (int i=0; i < spacecount; i++) {    retStringBuf.append(' ');  }  retStringBuf.append(message);  lastMessageTime=System.currentTimeMillis();  String retString=retStringBuf.toString();  if (log && Debug.timingOn())   Debug.logTiming(retString,module);  return retString;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  public boolean isActive(){  return _systemManager.isActive();}  }
class C{  public String toTextTable(){  StringBuilder buffer=new StringBuilder();  int numCols=this.getColumnCount();  int numRows=this.getRowCount();  List<String> formatterList=new ArrayList<>();  List<ArrayList<String>> allTableRows=new ArrayList<>();  ArrayList<String> currTableRow=new ArrayList<>();  int longestWordSize=10;  for (int i=0; i < 2 * numCols + 1; i++) {    if (i % 2 == 0) {      formatterList.add("%-2s ");      currTableRow.add("|");    } else {      longestWordSize=Math.max(this.getColumnName(i / 2).length(),longestWordSize);      formatterList.add("%-10s ");      currTableRow.add(this.getColumnName(i / 2));    }  }  allTableRows.add(currTableRow);  formatterList.set(formatterList.size() - 1,"%-2s%n");  for (int row=0; row < numRows; row++) {    currTableRow=new ArrayList<>();    for (int i=0; i < numCols * 2 + 1; i++) {      if (i % 2 == 0) {        currTableRow.add("|");      } else {        longestWordSize=Math.max(this.getValueAt(row,i / 2).toString().length(),longestWordSize);        currTableRow.add(this.getValueAt(row,i / 2).toString());      }    }    allTableRows.add(currTableRow);  }  if (longestWordSize > 10) {    for (int i=1; i < formatterList.size(); i+=2) {      formatterList.set(i,"%-" + longestWordSize + "s ");    }  }  String formatterString="";  for (int i=0; i < formatterList.size(); i++) {    formatterString+=formatterList.get(i);  }  int lenColSep=0;  for (int i=0; i < allTableRows.size(); i++) {    if (i == 1) {      char[] colSepArr=new char[lenColSep - 4];      Arrays.fill(colSepArr,'-');      String colSep=new String(colSepArr);      buffer.append("|");      buffer.append(colSep);      buffer.append("|\n");    }    String appendStr=String.format(formatterString,(allTableRows.get(i)).toArray());    buffer.append(appendStr);    if (i == 0) {      lenColSep=appendStr.length();    }  }  return buffer.toString();}  }
class C{  void addUnstarted(){synchronized (this) {    if (destroyed) {      throw new IllegalThreadStateException();    }    nUnstartedThreads++;  }}  }
class C{  public boolean isStatic(){  return (this.isDeclaredStatic() || this.isConst());}  }
class C{  public Http1ClientCodec(int maxInitialLineLength,int maxHeaderSize,int maxChunkSize){  this(maxInitialLineLength,maxHeaderSize,maxChunkSize,false);}  }
class C{  private void removeFailedTestsInTestNG(final ITestContext tc){  IResultMap returnValue=tc.getFailedTests();  ResultMap removeMap=new ResultMap();  for (  ITestResult result : returnValue.getAllResults()) {    boolean isFailed=false;    for (    ITestResult resultToCheck : failedTests.get(tc.getName()).getAllResults()) {      if (result.getMethod().equals(resultToCheck.getMethod()) && result.getEndMillis() == resultToCheck.getEndMillis()) {        isFailed=true;        break;      }    }    if (!isFailed) {      System.out.println("Removed failed cases:" + result.getMethod().getMethodName());      removeMap.addResult(result,result.getMethod());    }  }  for (  ITestResult result : removeMap.getAllResults()) {    ITestResult removeResult=null;    for (    ITestResult resultToCheck : returnValue.getAllResults()) {      if (result.getMethod().equals(resultToCheck.getMethod()) && result.getEndMillis() == resultToCheck.getEndMillis()) {        removeResult=resultToCheck;        break;      }    }    if (removeResult != null) {      returnValue.getAllResults().remove(removeResult);    }  }}  }
class C{  @Override public void onClick(View view){  if ((Camera != null) && (!Camera.isRecording())) {switch (view.getId()) {case R.id.button_yuv_low:case R.id.button_yuv_medium:case R.id.button_yuv_high:case R.id.button_raw_low:case R.id.button_raw_medium:case R.id.button_raw_high:      selectQualityAndFormat(view);    break;case R.id.button_quality:  toggleQualityAndFormatSelector(view);break;case R.id.button_switch_to_overview:if (Listener != null) Listener.onFragmentSignal(this,"OVERVIEW");break;default :Log.w(LOGTAG,"Click event from unknown/unhandled source");break;}}}  }
class C{  private static void validateNumber(String fieldName,String value){  validateRegex(fieldName,value,NUMBER_REGEX,MessagesUtils.get(INVALID_NUMBER_KEY));}  }
class C{  protected boolean beforeDelete(){  if (isSystemMaintained()) {    log.saveError("Error","You cannot delete a System maintained entity");    return false;  }  s_entityTypes=null;  return true;}  }
class C{  static Varargs gmatch(Varargs args){  LuaString src=args.checkstring(1);  LuaString pat=args.checkstring(2);  return new GMatchAux(args,src,pat);}  }
class C{  public MeanDistance(DistanceMetric dm){  this.dm=dm;}  }
class C{  private void drawHline(WritableRaster raster,int x,int y,int width,Color color){  for (int i=0; i < width; i++)   putPixel(raster,x + i,y,color);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.393 -0500",hash_original_method="99193C77E68A5ABE715A7A9AC8040C34",hash_generated_method="78FECFA4560A366D127A1848EDF5547E") public void sendMessage(SIPMessage sipMessage) throws IOException {  byte[] msg=sipMessage.encodeAsBytes(this.getTransport());  long time=System.currentTimeMillis();  this.sendMessage(msg,sipMessage instanceof SIPRequest);  if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES))   logMessage(sipMessage,peerAddress,peerPort,time);}  }
class C{  public boolean contains(Object elem){  return indexOf(elem) >= 0;}  }
class C{  public <T extends Number & Comparable>NumberRange by(T stepSize){  if (!Integer.valueOf(1).equals(this.stepSize)) {    throw new IllegalStateException("by only allowed on ranges with original stepSize = 1 but found " + this.stepSize);  }  return new NumberRange(comparableNumber(from),comparableNumber(to),stepSize,inclusive);}  }
class C{  protected Instance normalizeInstance(Instance instance) throws Exception {  if ((m_nNonDiscreteAttribute > -1) && (instance.attribute(m_nNonDiscreteAttribute).type() != Attribute.NOMINAL)) {    m_DiscretizeFilter.input(instance);    instance=m_DiscretizeFilter.output();  }  m_MissingValuesFilter.input(instance);  instance=m_MissingValuesFilter.output();  return instance;}  }
class C{  public boolean isBinding(){  return binding;}  }
class C{  public static void uniteSameRoutesWithJustDifferentDepartures(TransitSchedule schedule){  log.info("Combining TransitRoutes with identical stop sequence...");  long totalNumberOfDepartures=0;  long departuresWithChangedSchedules=0;  long totalNumberOfStops=0;  long stopsWithChangedTimes=0;  double changedTotalTimeAtStops=0.;  List<Double> timeChanges=new ArrayList<>();  for (  TransitLine line : schedule.getTransitLines().values()) {    final Map<String,List<TransitRoute>> routeProfiles=new HashMap<>();    for (    TransitRoute transitRoute : line.getRoutes().values()) {      totalNumberOfDepartures+=transitRoute.getDepartures().size();      totalNumberOfStops+=transitRoute.getDepartures().size() * transitRoute.getStops().size();      String routeProfile=transitRoute.getStops().get(0).getStopFacility().getId().toString();      for (int i=1; i < transitRoute.getStops().size(); i++) {        routeProfile=routeProfile + "-" + transitRoute.getStops().get(i).getStopFacility().getId().toString();      }      MapUtils.getList(routeProfile,routeProfiles).add(transitRoute);    }    for (    List<TransitRoute> routesToUnite : routeProfiles.values()) {      TransitRoute finalRoute=routesToUnite.get(0);      for (int i=1; i < routesToUnite.size(); i++) {        TransitRoute routeToAdd=routesToUnite.get(i);        for (        Departure departure : routeToAdd.getDepartures().values()) {          finalRoute.addDeparture(departure);        }        line.removeRoute(routeToAdd);        int numberOfDepartures=routeToAdd.getDepartures().size();        boolean departureWithChangedDepartureTimes=false;        for (int j=0; j < finalRoute.getStops().size(); j++) {          double changedTotalTimeAtStop=Math.abs(finalRoute.getStops().get(j).getArrivalOffset() - routeToAdd.getStops().get(j).getArrivalOffset()) + Math.abs(finalRoute.getStops().get(j).getDepartureOffset() - routeToAdd.getStops().get(j).getDepartureOffset());          if (changedTotalTimeAtStop > 0) {            stopsWithChangedTimes+=numberOfDepartures;            changedTotalTimeAtStops+=changedTotalTimeAtStop * numberOfDepartures;            for (int k=0; k < numberOfDepartures; k++) {              timeChanges.add(changedTotalTimeAtStop);            }            departureWithChangedDepartureTimes=true;          }        }        if (departureWithChangedDepartureTimes) {          departuresWithChangedSchedules+=numberOfDepartures;        }      }    }  }  log.info("   Total Number of Departures: " + totalNumberOfDepartures);  log.info("   Number of Departures with changed schedule: " + departuresWithChangedSchedules);  log.info("   Total Number of Stops: " + totalNumberOfStops);  log.info("   Number of Stops with changed departure or arrival times: " + stopsWithChangedTimes);  log.info("   Total time difference caused by changed departure or arrival times: " + changedTotalTimeAtStops);  log.info("   Average time difference caused by changed times: " + (changedTotalTimeAtStops / stopsWithChangedTimes));  log.info("   Average time difference over all stops caused by changed times: " + (changedTotalTimeAtStops / totalNumberOfStops));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.053 -0400",hash_original_method="FAEDC6A34DDF69892256309EA97E7CD3",hash_generated_method="E49CDB19A0AE3B003E170829C6DC2BAC") private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  return info != 0 && getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  public List<Integer> emit(List<Object> tuple,Object messageId){  return emit(Utils.DEFAULT_STREAM_ID,tuple,messageId);}  }
class C{  private long checkKey(Key key){  CRC32 checksum=new CRC32();  checksum.update(key.type);  checksum.update((int)(key.id & 0xffff));  checksum.update((int)((key.id >> 32) & 0xffff));  if (!TextUtils.isEmpty(key.name)) {    checksum.update(key.name.getBytes());  }  return checksum.getValue();}  }
class C{  public CoapEndpoint(final InetSocketAddress address,final NetworkConfig config,final MessageExchangeStore exchangeStore){  this(createUDPConnector(address,config),config,exchangeStore);}  }
class C{  public ZkClusterData fetchAllCollectionMetadata() throws KeeperException, InterruptedException, IOException, CollectionNotFoundException {  Collection<String> collections=getZkClusterData().getCollections();  ObjectMapper mapper=new ObjectMapper();  for (  String collection : collections) {    String zkPath="/collections/" + collection;    if (getZookeeperHandle().exists(zkPath,false) == null) {      logger.info("Skipping collection as it is no longer in zk node... " + collection);      continue;    }    byte[] collectionMetadata=getZookeeperHandle().getData(zkPath,null,null);    if (collectionMetadata == null) {      throw new CollectionNotFoundException("Can't get data for collection " + collection);    }    String collectionMetadataString=new String(collectionMetadata);    HashMap<String,Object> collectionMetadataOutput=mapper.readValue(collectionMetadataString,HashMap.class);    String configName=(String)collectionMetadataOutput.get("configName");    if (getZkClusterData().getCollectionToConfigMapping() == null) {      getZkClusterData().setCollectionToConfigMapping(new HashMap<String,String>());    }    getZkClusterData().getCollectionToConfigMapping().put(collection,configName);  }  return getZkClusterData();}  }
class C{  public boolean visit(TypeDeclarationStatement node){  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void service(Mail mail) throws javax.mail.MessagingException {  MimeMessage response=(MimeMessage)mail.getMessage().reply(false);  response.setSubject("The time is now...");  String textBuffer="This mail server thinks it's " + (new java.util.Date()).toString() + ".";  response.setText(textBuffer);  if (response.getFrom() == null) {    response.setFrom(mail.getRecipients().iterator().next().toInternetAddress());  }  if (response.getAllRecipients() == null) {    response.setRecipients(MimeMessage.RecipientType.TO,mail.getSender().toString());  }  response.saveChanges();  getMailetContext().sendMail(response);}  }
class C{  public void testNestedNegationRewritingAndSplit(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final FunctionNode filterANot1=FunctionNode.NOT(new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o")}));    final FunctionNode filterANot2=FunctionNode.NOT(filterANot1);    final FunctionNode filterANot3=FunctionNode.NOT(filterANot2);    final FunctionNode filterBNot1=FunctionNode.NOT(new FunctionNode(FunctionRegistry.EQ,null,new ValueExpressionNode[]{new VarNode("s"),new VarNode("o")}));    final FunctionNode filterBNot2=FunctionNode.NOT(filterBNot1);    final FunctionNode filterBNot3=FunctionNode.NOT(filterBNot2);    final FunctionNode filterBNot4=FunctionNode.NOT(filterBNot3);    final FilterNode filterNode=new FilterNode(FunctionNode.NOT(FunctionNode.OR(filterANot3,filterBNot4)));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final FunctionNode bound=new FunctionNode(FunctionRegistry.BOUND,null,new ValueExpressionNode[]{new VarNode("o")});    final FunctionNode neq=new FunctionNode(FunctionRegistry.NE,null,new ValueExpressionNode[]{new VarNode("s"),new VarNode("o")});    whereClause.addChild(new FilterNode(bound));    whereClause.addChild(new FilterNode(neq));  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  protected String escapeElementEntities(String text){  char[] block=null;  int i;  int last=0;  int size=text.length();  for (i=0; i < size; i++) {    String entity=null;    char c=text.charAt(i);switch (c) {case '<':      entity="&lt;";    break;case '>':  entity="&gt;";break;case '&':entity="&amp;";break;case '\t':case '\n':case '\r':if (preserve) {entity=String.valueOf(c);}break;default :if ((c < 32) || shouldEncodeChar(c)) {entity="&#" + (int)c + ";";}break;}if (entity != null) {if (block == null) {block=text.toCharArray();}buffer.append(block,last,i - last);buffer.append(entity);last=i + 1;}}if (last == 0) {return text;}if (last < size) {if (block == null) {block=text.toCharArray();}buffer.append(block,last,i - last);}String answer=buffer.toString();buffer.setLength(0);return answer;}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (Iterator<E> it=q.iterator(); it.hasNext(); ) {      if (o == it.next()) {        it.remove();        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.WILDCARD__DECLARED_UPPER_BOUND:    return getDeclaredUpperBound();case TypeRefsPackage.WILDCARD__DECLARED_LOWER_BOUND:  return getDeclaredLowerBound();case TypeRefsPackage.WILDCARD__USING_IN_OUT_NOTATION:return isUsingInOutNotation();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Synchronizer(SynchronizerConf sync_conf){  Objects.requireNonNull(sync_conf);  this.syncConf=sync_conf;}  }
class C{  public void testAddDiffScaleNegPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1231212478987482988429808779810457634781459480137916301878791834798.7234564568";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.add(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  protected boolean isWithinHoles(final GeoPoint point){  if (holes != null) {    for (    final GeoPolygon hole : holes) {      if (!hole.isWithin(point)) {        return true;      }    }  }  return false;}  }
class C{  private void run(){switch (state.nextOp()) {case PROCESS:    process();  break;case WINDOW:window();break;case COMMIT:commit();break;case END_OF_STREAM:endOfStream();break;default :break;}}  }
class C{  private V doPut(K kkey,V value,boolean onlyIfAbsent){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n != null) {        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        int c=key.compareTo(n.key);        if (c > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value))           return (V)v; else           break;        }      }      Node<K,V> z=new Node<K,V>(kkey,value,n);      if (!b.casNext(n,z))       break;      int level=randomLevel();      if (level > 0)       insertIndex(z,level);      return null;    }  }}  }
class C{  public static boolean searchInArray(int[] data,int key){  for (int i=0; i < data.length; i++) {    if (key == data[i]) {      return true;    }  }  return false;}  }
class C{  public LinearBatch(LossFunc loss,double lambda0,double tolerance){  this(loss,lambda0,tolerance,null);}  }
class C{  public static boolean isWindowsVista(){  return osName.indexOf("Windows") > -1 && osVersion.equals("6.0");}  }
class C{  public AcroRenderer(){}  }
class C{  public DViewCertCsrPem(JFrame parent,String title,PKCS10CertificationRequest pkcs10Csr) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.pkcs10Csr=pkcs10Csr;  initComponents();}  }
class C{  private Builder logger(final ILogger logger){  mClient.setLogger(logger);  return this;}  }
class C{  public AccountHeaderBuilder withHeightDp(int heightDp){  this.mHeight=DimenHolder.fromDp(heightDp);  return this;}  }
class C{  public boolean isRuleSupport(){  return ruleSupport;}  }
class C{  @Override public Double remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public static <U extends Key<?>>OrMatcher<U> or(Matcher<U> leftOperand,Matcher<U> rightOperand){  return new OrMatcher<U>(leftOperand,rightOperand);}  }
class C{  private void startDistributedSystem(FilterConfig config){  final String cacheType=config.getInitParameter(INIT_PARAM_CACHE_TYPE);  if (CACHE_TYPE_CLIENT_SERVER.equals(cacheType)) {    distributedCache=ClientServerCache.getInstance();  } else   if (CACHE_TYPE_PEER_TO_PEER.equals(cacheType)) {    distributedCache=PeerToPeerCache.getInstance();  } else {    LOG.error("No 'cache-type' initialization param set. " + "Cache will not be started");    return;  }  if (!distributedCache.isStarted()) {    for (Enumeration<String> e=config.getInitParameterNames(); e.hasMoreElements(); ) {      String param=e.nextElement();      if (!param.startsWith(GEMFIRE_PROPERTY)) {        continue;      }      String gemfireProperty=param.substring(GEMFIRE_PROPERTY.length());      LOG.info("Setting gemfire property: {} = {}",gemfireProperty,config.getInitParameter(param));      distributedCache.setProperty(gemfireProperty,config.getInitParameter(param));    }    distributedCache.lifecycleEvent(LifecycleTypeAdapter.START);  }}  }
class C{  public void put(String key,MqttPersistable message) throws MqttPersistenceException {  checkIsOpen();  File file=new File(clientDir,key + MESSAGE_FILE_EXTENSION);  File backupFile=new File(clientDir,key + MESSAGE_FILE_EXTENSION + MESSAGE_BACKUP_FILE_EXTENSION);  if (file.exists()) {    boolean result=file.renameTo(backupFile);    if (!result) {      backupFile.delete();      file.renameTo(backupFile);    }  }  try {    FileOutputStream fos=new FileOutputStream(file);    fos.write(message.getHeaderBytes(),message.getHeaderOffset(),message.getHeaderLength());    if (message.getPayloadBytes() != null) {      fos.write(message.getPayloadBytes(),message.getPayloadOffset(),message.getPayloadLength());    }    fos.getFD().sync();    fos.close();    if (backupFile.exists()) {      backupFile.delete();    }  } catch (  IOException ex) {    throw new MqttPersistenceException(ex);  } finally {    if (backupFile.exists()) {      boolean result=backupFile.renameTo(file);      if (!result) {        file.delete();        backupFile.renameTo(file);      }    }  }}  }
class C{  private void writeOutput(final Task<Diff> result){  try {    long time, start=System.currentTimeMillis();    dumpWriter.process(result);    time=System.currentTimeMillis() - start;    SQLConsumerLogMessages.logDiffProcessed(logger,result,time);  } catch (  SQLConsumerException e) {    SQLConsumerLogMessages.logSQLConsumerException(logger,e);    e.printStackTrace();  }catch (  ConfigurationException e) {    throw new RuntimeException(e);  }catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void parse(final String osmFilename) throws UncheckedIOException {  OsmParser parser=new OsmParser();  parser.addHandler(new OsmXmlParser(this.nodes,this.ways,this.relations,this.transform,this.wayIds));  parser.readFile(osmFilename);  this.convert();  log.info("= conversion statistics: ==========================");  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  if (this.unknownRailways.size() > 0) {    log.info("The following railway-types had no defaults set and were thus NOT converted:");    for (    String railwayType : this.unknownRailways) {      log.info("- \"" + railwayType + "\"");    }  }  if (this.unknownPTs.size() > 0) {    log.info("The following PT-types had no defaults set and were thus NOT converted:");    for (    String ptType : this.unknownPTs) {      log.info("- \"" + ptType + "\"");    }  }  if (this.unknownWays.size() > 0) {    log.info("The way-types with the following tags had no defaults set and were thus NOT converted:");    for (    String wayType : this.unknownWays) {      log.info("- \"" + wayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes());    }    output.write(lineEnding.getBytes());  }}  }
class C{  protected static Object primitiveArrayGet(Object self,int idx){  return Array.get(self,normaliseIndex(idx,Array.getLength(self)));}  }
class C{  public void uninitialized(int pos,int offset){}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null && uiComp.isFocusable()) {    return uiComp.setFocus() ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  protected boolean isValidFragment(String fragmentName){  return PreferenceFragment.class.getName().equals(fragmentName) || GeneralPreferenceFragment.class.getName().equals(fragmentName) || RemoteControlPreferenceFragment.class.getName().equals(fragmentName);}  }
class C{  @Override public void run(){  if (!status.getDone()) {    try {      backgroundWork();    } catch (    Throwable e) {      AQUtility.debug(e);      status.code(AjaxStatus.NETWORK_ERROR).done();    }    if (!status.getReauth()) {      if (uiCallback) {        AQUtility.post(this);      } else {        afterWork();      }    }  } else {    afterWork();  }}  }
class C{  public static Class<?> wrapperToPrimitive(final Class<?> cls){  return ClassUtils.wrapperPrimitiveMap.get(cls);}  }
class C{  private void createNonUnique(Table t) throws SQLException {  boolean comma=false;  int indexNumber=1;  Iterator<Key> j=t.getKeys().iterator();  while (j.hasNext()) {    Key key=j.next();    if (key.getType() == Key.NonUnique) {      String SQL="CREATE INDEX " + t.getName() + "_"+ indexNumber;      SQL+=" ON " + t.getSchema() + "."+ t.getName()+ "(";      Iterator<Column> i=key.getColumns().iterator();      comma=false;      while (i.hasNext()) {        Column c=i.next();        SQL+=(comma ? ", " : "") + c.getName();        comma=true;      }      indexNumber++;      SQL+=")";      execute(SQL);    }  }}  }
class C{  @OnClick(R.id.accept) public void onAcceptClick(View view){  int position=getAdapterPosition();  cardPosition=getCardPosition(position);  offerToAccept=offers.get(cardPosition);  if (offerToAccept.isShareCard()) {    ((MainActivity)context).tryToTweet(offerToAccept.getBody());    removeFromMyPlanUI(cardPosition);  } else {    acceptOffer();    transformToShareCard();  }}  }
class C{  private void increaseHashTable() throws IOException {  long oldTableSize=HEADER_LENGTH + (long)bucketCount * recordSize;  long newTableSize=HEADER_LENGTH + (long)bucketCount * recordSize * 2;  long oldFileSize=nioFile.size();  File tmpFile=new File(getFile().getParentFile(),"rehash_" + getFile().getName());  RandomAccessFile tmpRaf=createEmptyFile(tmpFile);  FileChannel tmpChannel=tmpRaf.getChannel();  nioFile.transferTo(oldTableSize,oldFileSize - oldTableSize,tmpChannel);  writeEmptyBuckets(oldTableSize,bucketCount);  bucketCount*=2;  nioFile.truncate(newTableSize);  ByteBuffer bucket=ByteBuffer.allocate(recordSize);  ByteBuffer newBucket=ByteBuffer.allocate(recordSize);  for (long bucketOffset=HEADER_LENGTH; bucketOffset < oldTableSize; bucketOffset+=recordSize) {    nioFile.read(bucket,bucketOffset);    boolean bucketChanged=false;    long newBucketOffset=0L;    for (int slotNo=0; slotNo < bucketSize; slotNo++) {      int id=bucket.getInt(ITEM_SIZE * slotNo + 4);      if (id != 0) {        int hash=bucket.getInt(ITEM_SIZE * slotNo);        long newOffset=getBucketOffset(hash);        if (newOffset != bucketOffset) {          newBucket.putInt(hash);          newBucket.putInt(id);          bucket.putInt(ITEM_SIZE * slotNo,0);          bucket.putInt(ITEM_SIZE * slotNo + 4,0);          bucketChanged=true;          newBucketOffset=newOffset;        }      }    }    if (bucketChanged) {      newBucket.flip();      nioFile.write(newBucket,newBucketOffset);      newBucket.clear();    }    if (bucket.getInt(ITEM_SIZE * bucketSize) != 0) {      bucket.putInt(ITEM_SIZE * bucketSize,0);      bucketChanged=true;    }    if (bucketChanged) {      bucket.rewind();      nioFile.write(bucket,bucketOffset);    }    bucket.clear();  }  long tmpFileSize=tmpChannel.size();  for (long bucketOffset=0L; bucketOffset < tmpFileSize; bucketOffset+=recordSize) {    tmpChannel.read(bucket,bucketOffset);    for (int slotNo=0; slotNo < bucketSize; slotNo++) {      int id=bucket.getInt(ITEM_SIZE * slotNo + 4);      if (id != 0) {        int hash=bucket.getInt(ITEM_SIZE * slotNo);        long newBucketOffset=getBucketOffset(hash);        storeID(newBucketOffset,hash,id);      }    }    bucket.clear();  }  tmpRaf.close();  tmpFile.delete();}  }
class C{  protected void printBug(BugInstance bugInstance){  if (showRank) {    int rank=BugRanker.findRank(bugInstance);    outputStream.printf("%2d ",rank);  }switch (bugInstance.getPriority()) {case Priorities.EXP_PRIORITY:    outputStream.print("E ");  break;case Priorities.LOW_PRIORITY:outputStream.print("L ");break;case Priorities.NORMAL_PRIORITY:outputStream.print("M ");break;case Priorities.HIGH_PRIORITY:outputStream.print("H ");break;default :assert false;}BugPattern pattern=bugInstance.getBugPattern();if (pattern != null) {String categoryAbbrev=null;BugCategory bcat=DetectorFactoryCollection.instance().getBugCategory(pattern.getCategory());if (bcat != null) {categoryAbbrev=bcat.getAbbrev();}if (categoryAbbrev == null) {categoryAbbrev=OTHER_CATEGORY_ABBREV;}outputStream.print(categoryAbbrev);outputStream.print(" ");}if (useLongBugCodes) {outputStream.print(bugInstance.getType());outputStream.print(" ");}if (reportUserDesignations) {outputStream.print(bugInstance.getUserDesignationKey());outputStream.print(" ");}if (reportHistory) {long first=bugInstance.getFirstVersion();long last=bugInstance.getLastVersion();outputStream.print(first);outputStream.print(" ");outputStream.print(last);outputStream.print(" ");}SourceLineAnnotation line=bugInstance.getPrimarySourceLineAnnotation();outputStream.println(bugInstance.getMessage().replace('\n',' ') + "  " + line.toString());}  }
class C{  public void createConstraints(DatabaseSession session,JPAMSchemaManager schemaManager){  createConstraints(session,schemaManager,true);}  }
class C{  public static String reqExpEscape(String str){  char[] arr=str.toCharArray();  StringBuilder sb=new StringBuilder(str.length() * 2);  for (int i=0; i < arr.length; i++) {    sb.append('\\');    sb.append(arr[i]);  }  return sb.toString();}  }
class C{  public void addContext(CharSequence context){  addContext(context,1f,true);}  }
class C{  public MySqlDdlParser(){  super(";");}  }
class C{  public SetProgressAction(String text,boolean ongoing,int percentage,Context context){  this.text=text;  this.ongoing=ongoing;  this.percentage=percentage;  this.context=context;}  }
class C{  @Override public void keyPressed(KeyEvent e){synchronized (keyLock) {    keysDown.add(e.getKeyCode());  }  for (  DrawListener listener : listeners)   listener.keyPressed(e.getKeyCode());}  }
class C{  public static boolean hasConnection(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo wifiNetwork=connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  if (wifiNetwork != null && wifiNetwork.isConnected()) {    return true;  }  NetworkInfo mobileNetwork=connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  if (mobileNetwork != null && mobileNetwork.isConnected()) {    return true;  }  NetworkInfo activeNetwork=connectivityManager.getActiveNetworkInfo();  if (activeNetwork != null && activeNetwork.isConnected()) {    return true;  }  return false;}  }
class C{  private void assertBefore(final long t1,final long t2){  ClocksNotSynchronizedException.assertBefore(serviceId1,serviceId2,t1,t2,maxSkew);}  }
class C{  @Nullable public String fileName(){  return JavaLogger.fileName(delegate);}  }
class C{  public static final WritableFontData createWritableFontData(byte[] b){  ByteArray<?> ba=new MemoryByteArray(b);  WritableFontData wfd=new WritableFontData(ba);  return wfd;}  }
class C{  public RequestMemoryMapCommand(final int packetId){  super(DebugCommandType.CMD_MEMMAP,packetId);}  }
class C{  @PrePersist @PreUpdate public void updateModificationDate(){  setModificationDate(new Date().getTime());}  }
class C{  private static boolean WriteAST(AST ast){  Vector astFile=new Vector();  astFile.addElement("------ MODULE AST -------");  astFile.addElement("EXTENDS TLC");  astFile.addElement("fairness == \"" + PcalParams.FairnessOption + "\"");  astFile.addElement(" ");  astFile.addElement("ast == ");  astFile.addElement(ast.toString());  astFile.addElement("==========================");  try {    WriteStringVectorToFile(astFile,"AST.tla");  } catch (  StringVectorToFileException e) {    PcalDebug.reportError(e);    return false;  }  PcalDebug.reportInfo("Wrote file AST.tla.");  return true;}  }
class C{  protected TAnnotableElementImpl(){  super();}  }
class C{  @Deprecated static public XNetLightManager instance(){  return null;}  }
class C{  public double eval(double params[]){  return (params[0] * params[1] * params[2]* params[3]);}  }
class C{  private void connectLeafNodes(TopologyTree root,Collection<PhysicalNode> nodes){  ImmutableMap<Mac,Set<Port>> occurences=new ImmutableMap(null);  nodes.stream().flatMap(null).forEach(null);  nodes.stream().flatMap(null).map(null).forEach(null);  occurences.entrySet().removeIf(null);  Map<Mac,Set<Port>> incompleteTopologyPoints=new ImmutableMap<>(null);  occurences.forEach(null);  Map<Port,List<TopologyNode>> cloudGroups=new ImmutableMap<>(null);  occurences.forEach(null);  cloudGroups.forEach(null);}  }
class C{  private static MatrixBlock[] computeEigen(MatrixObject in) throws DMLRuntimeException {  if (in.getNumRows() != in.getNumColumns()) {    throw new DMLRuntimeException("Eigen Decomposition can only be done on a square matrix. Input matrix is rectangular (rows=" + in.getNumRows() + ", cols="+ in.getNumColumns()+ ")");  }  Array2DRowRealMatrix matrixInput=DataConverter.convertToArray2DRowRealMatrix(in);  EigenDecomposition eigendecompose=new EigenDecomposition(matrixInput);  RealMatrix eVectorsMatrix=eigendecompose.getV();  double[][] eVectors=eVectorsMatrix.getData();  double[] eValues=eigendecompose.getRealEigenvalues();  int n=eValues.length;  for (int i=0; i < n; i++) {    int k=i;    double p=eValues[i];    for (int j=i + 1; j < n; j++) {      if (eValues[j] < p) {        k=j;        p=eValues[j];      }    }    if (k != i) {      eValues[k]=eValues[i];      eValues[i]=p;      for (int j=0; j < n; j++) {        p=eVectors[j][i];        eVectors[j][i]=eVectors[j][k];        eVectors[j][k]=p;      }    }  }  MatrixBlock mbValues=DataConverter.convertToMatrixBlock(eValues,true);  MatrixBlock mbVectors=DataConverter.convertToMatrixBlock(eVectors);  return new MatrixBlock[]{mbValues,mbVectors};}  }
class C{  public void clearPosition(){  _position=-_writeLength;}  }
class C{  public ContentValues(){  mValues=new HashMap<String,Object>(8);}  }
class C{  @Override public void updateString(String columnLabel,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateString(" + quote(columnLabel) + ", "+ quote(x)+ ");");    }    update(columnLabel,x == null ? ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public String toString(){  return this.id + " Status: " + this.status+ " Dialed: "+ this.dialed+ " Received: "+ this.received+ " Type: "+ this.type;}  }
class C{  public boolean hasFeedLink(){  return hasExtension(FeedLink.class);}  }
class C{  public InorderTraversal(IBinaryTreeNode<T> node){  super(node);}  }
class C{  public WindowEvent(Window source,int id,int oldState,int newState){  this(source,id,null,oldState,newState);}  }
class C{  public boolean supportsNamedParameters() throws SQLException {  return false;}  }
class C{  static public final float map(float value,float istart,float istop,float ostart,float ostop){  return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));}  }
class C{  protected JTextComponent createEditor(){  JTextComponent c=new JTextArea();  c.setDragEnabled(true);  c.setFont(new Font("monospaced",Font.PLAIN,12));  return c;}  }
class C{  public SVGFeFuncBElementBridge(){}  }
class C{  @SuppressWarnings("deprecation") protected View onGLSurfaceViewCreated(GLSurfaceView glSurfaceView){  for (int i=0; i < kMaxTouches; i++)   mInternalTouches.add(new UITouch(glSurfaceView,new CGPoint(0.0f,0.0f)));  mContentLayout=new RelativeLayout(activity);  mContentLayout.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT));  mContentLayout.addView(glSurfaceView,new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT));  LayoutParams progressBarLayoutParams=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  progressBarLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);  mProgressBar=new ProgressBar(activity);  mProgressBar.setIndeterminate(true);  mProgressBar.setVisibility(View.GONE);  mContentLayout.addView(mProgressBar,progressBarLayoutParams);  return this.onContentViewCreated(mContentLayout);}  }
class C{  public static Object invokeTarget(Object target,Method method,Object[] args,final String requestName) throws IllegalAccessException, InvocationTargetException {  boolean systemError=false;  try {    SERVICES_COUNTER.bindContextIncludingCpu(requestName);    return method.invoke(target,args);  } catch (  final InvocationTargetException e) {    if (e.getCause() instanceof Error) {      systemError=true;    }    throw e;  } finally {    SERVICES_COUNTER.addRequestForCurrentContext(systemError);  }}  }
class C{  public Builder withEventIndex(long eventIndex){  request.eventIndex=Assert.argNot(eventIndex,eventIndex < 0,"eventIndex cannot be negative");  return this;}  }
class C{  public DrawerBuilder withDelayOnDrawerClose(int delayOnDrawerClose){  this.mDelayOnDrawerClose=delayOnDrawerClose;  return this;}  }
class C{  protected VarNode anonVar(final String anon){  VarNode v=new VarNode(anon + UUID.randomUUID().toString());  v.setAnonymous(true);  return v;}  }
class C{  public Class loadTagFile() throws JasperException {  try {    ctxt.compile();    if (reload) {      tagHandlerClass=ctxt.load();    }  } catch (  ClassNotFoundException ex) {  }catch (  FileNotFoundException ex) {    log.log(Level.SEVERE,Localizer.getMessage("jsp.error.compiling"));    throw new JasperException(ex);  }  return tagHandlerClass;}  }
class C{  public static void serializeGroupReply(List<OFGroupStatsReply> groupReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupStatsReply groupReply=groupReplies.get(0);  jGen.writeStringField("version",groupReply.getVersion().toString());  jGen.writeFieldName("group");  jGen.writeStartArray();  for (  OFGroupStatsEntry entry : groupReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("groupNumber",entry.getGroup().toString());    jGen.writeNumberField("refCount",entry.getRefCount());    jGen.writeNumberField("packetCount",entry.getPacketCount().getValue());    jGen.writeNumberField("byteCount",entry.getByteCount().getValue());    jGen.writeFieldName("bucketCounters");    jGen.writeStartArray();    for (    OFBucketCounter bCounter : entry.getBucketStats()) {      jGen.writeStartObject();      jGen.writeNumberField("packetCount",bCounter.getPacketCount().getValue());      jGen.writeNumberField("byteCount",bCounter.getByteCount().getValue());      jGen.writeEndObject();    }    jGen.writeEndArray();    if (OFVersion.OF_13 == entry.getVersion()) {      jGen.writeNumberField("durationSec",entry.getDurationSec());      jGen.writeNumberField("durationNsec",entry.getDurationNsec());    }    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  @Override public ObjectMessage createObjectMessage(final Serializable object) throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createObjectMessage(" + object + ")"+ session);  }  return session.createObjectMessage(object);}  }
class C{  public static boolean isSolaris(){  return isOS(SOLARIS_OS_NAME);}  }
class C{  public static UploadRequestBuilder upload(){  return new UploadRequestBuilder();}  }
class C{  public AccountResult create(){  final Result result=validate();  if (result != null) {    return new AccountResult(result,username);  }  return insertIntoDatabase();}  }
class C{  public void sendShieldFrame(ShieldFrame frame,boolean waitIfInACallback){  if (frame == null)   throw new NullPointerException("The passed frame is null, have you checked its validity?");  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  if (!waitIfInACallback) {    sendFrame(frame);    return;  }  boolean inACallback;synchronized (arduinoCallbacksLock) {    inACallback=isInACallback;  }  if (inACallback) {    queuedFrames.add(frame);  } else {    if (queuedFrames.isEmpty()) {      sendFrame(frame);    } else {      queuedFrames.add(frame);    }  }}  }
class C{  public void testConnect_Unresolved() throws IOException {  assertFalse(this.channel1.isConnected());  InetSocketAddress unresolved=new InetSocketAddress("unresolved address",1080);  try {    this.channel1.connect(unresolved);    fail("Should throw an UnresolvedAddressException here.");  } catch (  UnresolvedAddressException e) {  }}  }
class C{  void blockMessages(){  block=true;}  }
class C{  @SuppressWarnings({"LockAcquiredButNotSafelyReleased"}) public void block(){  lock.writeLock().lock();}  }
class C{  public boolean isCompassRose(){  return (compassRose);}  }
class C{  public static float svgHorizontalCoordinateToUserSpace(String s,String attr,Context ctx){  return svgToUserSpace(s,attr,HORIZONTAL_LENGTH,ctx);}  }
class C{  public boolean isSame(FileInfo fileInfo){  if (numberOfParts != fileInfo.numberOfParts)   return false;  if (partBytes != fileInfo.partBytes)   return false;  if (!name.equals(fileInfo.name))   return false;  if (partSize != null) {    if (!partSize.equals(fileInfo.partSize))     return false;  } else {    if (fileInfo.partSize != null)     return false;  }  return metadata.isSame(fileInfo.metadata);}  }
class C{  private void updateVolumesInConsistencyGroup(){  log.info("Migrating SRDF volumes in CG");  DbClient dbClient=getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,true);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  int totalVolumes=0;  int volumesUpdated=0;  while (volumes.hasNext()) {    totalVolumes++;    Volume volume=volumes.next();    URI cgUri=volume.getConsistencyGroup();    URI storageUri=volume.getStorageController();    if (!NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {      BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,cgUri);      StorageSystem system=dbClient.queryObject(StorageSystem.class,storageUri);      if (cg == null || system == null) {        log.warn(String.format("Volume %s is being skipped because the refrenced CG or storage system is null; cgUri: %s; storageUri: %s",volume.getId().toString(),cgUri.toString(),storageUri.toString()));        continue;      }      if (volume.getSrdfParent() != null || volume.getSrdfTargets() != null) {        String replicationGroupName=cg.getCgNameOnStorageSystem(volume.getStorageController());        if (replicationGroupName != null && !replicationGroupName.isEmpty() && NullColumnValueGetter.isNullValue(volume.getReplicationGroupInstance())) {          log.info("updating the SRDF volume {} replicationgroup {}",volume.getLabel(),replicationGroupName);          volume.setReplicationGroupInstance(replicationGroupName);          dbClient.updateObject(volume);          volumesUpdated++;        }      }    }  }  log.info(String.format("%d volumes updated out of a total of %d volumes",volumesUpdated,totalVolumes));}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public static void showPermissibleParentsDialog(final Class modelClass,final JComponent centeringComp,boolean warning,boolean onlyModel){  TetradApplicationConfig config=TetradApplicationConfig.getInstance();  final SessionNodeConfig nodeConfig=config.getSessionNodeConfig(modelClass);  if (nodeConfig == null) {    throw new NullPointerException("No configuration for model: " + modelClass);  }  final SessionNodeModelConfig modelConfig=nodeConfig.getModelConfig(modelClass);  String[][] parentCombinations=SessionUtils.possibleParentCombinations(modelClass);  StringBuilder b=new StringBuilder();  b.append("<html>");  b.append("The combinations of parent models you can use for ").append(modelConfig.getName()).append(" are:");  for (int i=0; i < parentCombinations.length; i++) {    String[] parentCombination=parentCombinations[i];    b.append("\n  " + (i + 1) + ". ");    if (parentCombination.length == 0) {      b.append("No inputs");    } else {      for (int j=0; j < parentCombination.length; j++) {        b.append(parentCombination[j]);        if (j < parentCombination.length - 1) {          b.append(" + ");        }      }    }  }  int messageType=warning ? JOptionPane.INFORMATION_MESSAGE : JOptionPane.INFORMATION_MESSAGE;  JOptionPane.showMessageDialog(centeringComp,b.toString(),"Information on \"" + modelConfig.getName() + "\"",messageType);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BESeparatorUI();}  }
class C{  public Boolean isSAMLToken(){  return samlToken;}  }
class C{  private void initializeMBean() throws AdminException {  this.mbeanName=new StringBuffer("GemFire.CacheVm:").append("id=").append(MBeanUtil.makeCompliantMBeanNameProperty(getId())).append(",type=").append(MBeanUtil.makeCompliantMBeanNameProperty(getType().getName())).toString();  this.objectName=MBeanUtil.createMBean(this,addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));  AdminDistributedSystemJmxImpl sysJmx=(AdminDistributedSystemJmxImpl)system;  if (sysJmx.getRefreshInterval() > 0)   this.refreshInterval=sysJmx.getRefreshInterval();}  }
class C{  public void readStream(InputStream is) throws IOException {  _row.readStream(is,_data,0,this);}  }
class C{  public int compareTo(CubePruneState another){  if (this.computeNodeResult.getPruningEstimate() < another.computeNodeResult.getPruningEstimate()) {    return 1;  } else   if (this.computeNodeResult.getPruningEstimate() == another.computeNodeResult.getPruningEstimate()) {    return 0;  } else {    return -1;  }}  }
class C{  private boolean checkLoadRemoteClass(String clsName,GridDeploymentMetadata meta){  assert clsName != null;  assert meta != null;  assert meta.participants() == null;  Map<String,Boolean> ldrRsrcCache=rsrcCache.get(meta.classLoaderId());  if (ldrRsrcCache != null) {    Boolean res=ldrRsrcCache.get(clsName);    if (res != null)     return res;  }  if (deadClsLdrs.contains(meta.classLoaderId()))   return false;  int lockId=clsName.hashCode() * 31 + meta.classLoaderId().hashCode();  loadRmtLock.lock(lockId);  try {    ldrRsrcCache=rsrcCache.get(meta.classLoaderId());    if (ldrRsrcCache != null) {      Boolean res=ldrRsrcCache.get(clsName);      if (res != null)       return res;    }    if (deadClsLdrs.contains(meta.classLoaderId()))     return false;    ClassLoader temp=new GridDeploymentClassLoader(IgniteUuid.fromUuid(ctx.localNodeId()),meta.userVersion(),meta.deploymentMode(),true,ctx,ctx.config().getClassLoader() != null ? ctx.config().getClassLoader() : U.gridClassLoader(),meta.classLoaderId(),meta.senderNodeId(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),0,false,true);    String path=U.classNameToResourceName(clsName);    InputStream rsrcIn=null;    try {      rsrcIn=temp.getResourceAsStream(path);      boolean found=rsrcIn != null;      if (found || missedRsrcCacheSize > 0) {        if (ldrRsrcCache == null)         ldrRsrcCache=F.addIfAbsent(rsrcCache,meta.classLoaderId(),new ConcurrentHashMap8<String,Boolean>());        if (deadClsLdrs.contains(meta.classLoaderId())) {          rsrcCache.remove(meta.classLoaderId());          return false;        } else         ldrRsrcCache.put(clsName,found);      }      return found;    }  finally {      U.closeQuiet(rsrcIn);    }  }  finally {    loadRmtLock.unlock(lockId);  }}  }
class C{  private void shadowOperatorsWhileDragging(final Graphics2D g,final WorkflowAnnotation anno,final boolean printing){  if (printing) {    return;  }  AnnotationDragHelper dragged=model.getDragged();  if (!dragged.isUnsnapped() || !dragged.isDragInProgress()) {    return;  }  Graphics2D g2=(Graphics2D)g.create();  for (  Operator op : anno.getProcess().getOperators()) {    if (anno instanceof OperatorAnnotation) {      if (op.equals(((OperatorAnnotation)anno).getAttachedTo())) {        continue;      }    }    WorkflowAnnotations annotations=rendererModel.getOperatorAnnotations(op);    if (annotations != null && !annotations.isEmpty()) {      overshadowRect(rendererModel.getOperatorRect(op),g2);    }  }  g2.dispose();}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);}  }
class C{  protected void generateNode(ICubePrimer cube,long seed,CubePos generatedCubePos,double caveX,double caveY,double caveZ,float baseCaveSize,float horizDirAngle,float vertDirAngle,int startWalkedDistance,int maxWalkedDistance,double vertCaveSizeMod){  Random rand=new Random(seed);  float horizDirChange=0.0F;  float vertDirChange=0.0F;  if (maxWalkedDistance <= 0) {    int maxBlockRadius=cubeToMinBlock(this.range - 1);    maxWalkedDistance=maxBlockRadius - rand.nextInt(maxBlockRadius / 4);  }  boolean finalStep=false;  int walkedDistance;  if (startWalkedDistance == -1) {    walkedDistance=maxWalkedDistance / 2;    finalStep=true;  } else {    walkedDistance=startWalkedDistance;  }  int splitPoint=rand.nextInt(maxWalkedDistance / 2) + maxWalkedDistance / 4;  for (; walkedDistance < maxWalkedDistance; ++walkedDistance) {    float fractionWalked=walkedDistance / (float)maxWalkedDistance;    double caveSizeHoriz=CAVE_SIZE_ADD + sin(fractionWalked * (float)Math.PI) * baseCaveSize;    double caveSizeVert=caveSizeHoriz * vertCaveSizeMod;    float xzDirectionFactor=cos(vertDirAngle);    float yDirectionFactor=sin(vertDirAngle);    caveX+=cos(horizDirAngle) * xzDirectionFactor;    caveY+=yDirectionFactor;    caveZ+=sin(horizDirAngle) * xzDirectionFactor;    if (rand.nextInt(STEEP_STEP_RARITY) == 0) {      vertDirAngle*=STEEPER_FLATTEN_FACTOR;    } else {      vertDirAngle*=FLATTEN_FACTOR;    }    vertDirAngle+=vertDirChange * DIRECTION_CHANGE_FACTOR;    horizDirAngle+=horizDirChange * DIRECTION_CHANGE_FACTOR;    vertDirChange*=PREV_VERT_DIRECTION_CHANGE_WEIGHT;    horizDirChange*=PREV_HORIZ_DIRECTION_CHANGE_WEIGHT;    vertDirChange+=(rand.nextFloat() - rand.nextFloat()) * rand.nextFloat() * MAX_ADD_DIRECTION_CHANGE_VERT;    horizDirChange+=(rand.nextFloat() - rand.nextFloat()) * rand.nextFloat() * MAX_ADD_DIRECTION_CHANGE_HORIZ;    if (!finalStep && walkedDistance == splitPoint && baseCaveSize > 1.0F) {      this.generateNode(cube,rand.nextLong(),generatedCubePos,caveX,caveY,caveZ,rand.nextFloat() * 0.5F + 0.5F,horizDirAngle - ((float)Math.PI / 2F),vertDirAngle / 3.0F,walkedDistance,maxWalkedDistance,1.0D);      this.generateNode(cube,rand.nextLong(),generatedCubePos,caveX,caveY,caveZ,rand.nextFloat() * 0.5F + 0.5F,horizDirAngle + ((float)Math.PI / 2F),vertDirAngle / 3.0F,walkedDistance,maxWalkedDistance,1.0D);      return;    }    if (rand.nextInt(CARVE_STEP_RARITY) == 0 && !finalStep) {      continue;    }    double xDist=caveX - generatedCubePos.getXCenter();    double yDist=caveY - generatedCubePos.getYCenter();    double zDist=caveZ - generatedCubePos.getZCenter();    double maxStepsDist=maxWalkedDistance - walkedDistance;    double maxDistToCube=baseCaveSize * max(1,vertCaveSizeMod) + CAVE_SIZE_ADD + Cube.SIZE;    if (xDist * xDist + yDist * yDist + zDist * zDist - maxStepsDist * maxStepsDist > maxDistToCube * maxDistToCube) {      return;    }    tryCarveBlocks(cube,generatedCubePos,caveX,caveY,caveZ,caveSizeHoriz,caveSizeVert);    if (finalStep) {      return;    }  }}  }
class C{  public CompiledMethod(NormalMethod method){  this.name=method.getName();  this.decls=method.getDecls();}  }
class C{  void force(SurfacePriviledged<T> surface,ChangeType changeType){  setOffset(surface);  surface.notifyChange(changeType,t,stringID,new Rectangle2D.Double(copy.x,copy.y,copy.width,copy.height),new Rectangle2D.Double(r.x,r.y,r.width,r.height));  copy.setFrame(r);}  }
class C{  public void handleProperty(String property){  propertyName=property;}  }
class C{  public void rejectedExecution(Runnable r,java.util.concurrent.ThreadPoolExecutor e){  throw new RejectedExecutionException();}  }
class C{  public void stop(){  if (!running) {    return;  }  teardownSpringServlets();  running=false;}  }
class C{  @Override public void onPrepared(MediaPlayer mp){  mState=State.PLAYING;  mp.start();  notifyPlayerStarted(mp.getDuration(),mp.getCurrentPosition());}  }
class C{  public static void main(String... a) throws Exception {  TestBase t=TestBase.createCaller().init();  t.config.memory=true;  t.test();}  }
class C{  public static void writeReverseInt(IoBuffer out,int value){  byte[] bytes=new byte[4];  IoBuffer rev=IoBuffer.allocate(4);  rev.putInt(value);  rev.flip();  bytes[3]=rev.get();  bytes[2]=rev.get();  bytes[1]=rev.get();  bytes[0]=rev.get();  out.put(bytes);  rev.free();  rev=null;}  }
class C{  public void addDeco(DecoBase deco,boolean allowed){  if (allowed) {    if (!deco.properlyDefined())     throw new RuntimeException(deco.toString());    if (deco instanceof DecoBaseBiomeDecorations) {      for (int i=0; i < this.decos.size(); i++) {        if (this.decos.get(i) instanceof DecoBaseBiomeDecorations) {          this.decos.remove(i);          break;        }      }    }    this.decos.add(deco);  }}  }
class C{  private void doUnload(List<ObjectToFragment> result,URI resourceURI){  for (  ObjectToFragment elementToUnload : result) {    unload(elementToUnload,resourceURI);  }}  }
class C{  private static boolean isFormatPlayable(Format format,String[] allowedContainerMimeTypes,boolean filterHdFormats,int maxDecodableFrameSize){  if (allowedContainerMimeTypes != null && !Util.contains(allowedContainerMimeTypes,format.mimeType)) {    return false;  }  if (filterHdFormats && (format.width >= 1280 || format.height >= 720)) {    return false;  }  if (format.width > 0 && format.height > 0) {    if (format.width * format.height > maxDecodableFrameSize) {      return false;    }  }  return true;}  }
class C{  @Override protected double solveImpl(final Ops.DoubleOp f,final double xAccuracy){  double dx, xMid, fMid;  if (fxMin < 0.0) {    dx=xMax - xMin;    root=xMin;  } else {    dx=xMin - xMax;    root=xMax;  }  while (evaluationNumber <= getMaxEvaluations()) {    dx/=2.0;    xMid=root + dx;    fMid=f.op(xMid);    evaluationNumber++;    if (fMid <= 0.0)     root=xMid;    if (Math.abs(dx) < xAccuracy || fMid == 0.0)     return root;  }  throw new ArithmeticException("maximum number of function evaluations exceeded");}  }
class C{  public void addSet(String name,TupleSet set){  if (hasSet(name)) {    throw new IllegalArgumentException("Name already in use: " + name);  }  m_map.put(name,set);  m_sets.add(set);  m_count+=set.getTupleCount();  if (m_lstnr != null)   set.addTupleSetListener(m_lstnr);}  }
class C{  public void reset(){  mLastLongPressIndex=null;}  }
class C{  private static List<BlockNode> cleanBlockList(List<BlockNode> list){  List<BlockNode> ret=new ArrayList<BlockNode>(list.size());  for (  BlockNode block : list) {    if (!isBlockMustBeCleared(block)) {      ret.add(block);    }  }  return ret;}  }
class C{  public void println(String output){  m_Output.append(output).append('\n');}  }
class C{  protected void sendSelfPatch(T task){  Operation patch=Operation.createPatch(getUri()).setBody(task);  sendRequest(patch);}  }
class C{  public static boolean checkSignature(Transaction transaction,int index,TransactionOutput outputToSpend,ECKey key,byte[] signature){  Sha256Hash hash=transaction.hashForSignature(index,outputToSpend.getScriptBytes(),SigHash.ALL,false);  return key.verify(hash,ECDSASignature.decodeFromDER(signature));}  }
class C{  private void processResourceRequest(UUID nodeId,GridDeploymentRequest req){  if (log.isDebugEnabled())   log.debug("Received peer class/resource loading request [node=" + nodeId + ", req="+ req+ ']');  if (req.responseTopic() == null) {    try {      req.responseTopic(marsh.unmarshal(req.responseTopicBytes(),U.resolveClassLoader(ctx.config())));    } catch (    IgniteCheckedException e) {      U.error(log,"Failed to process deployment request (will ignore): " + req,e);      return;    }  }  GridDeploymentResponse res=new GridDeploymentResponse();  GridDeployment dep=ctx.deploy().getDeployment(req.classLoaderId());  if (dep != null) {    ClassLoader ldr=dep.classLoader();    if (!(ldr instanceof GridDeploymentClassLoader)) {      try {        String clsName=req.resourceName().replace('/','.');        int idx=clsName.indexOf(".class");        if (idx >= 0)         clsName=clsName.substring(0,idx);        Class<?> cls=Class.forName(clsName,true,ldr);        if (U.getAnnotation(cls,IgniteNotPeerDeployable.class) != null) {          String errMsg="Attempt to peer deploy class that has @GridNotPeerDeployable " + "annotation: " + clsName;          U.error(log,errMsg);          res.errorMessage(errMsg);          res.success(false);          sendResponse(nodeId,req.responseTopic(),res);          return;        }      } catch (      ClassNotFoundException ignore) {      }    }    InputStream in=ldr.getResourceAsStream(req.resourceName());    if (in == null) {      String errMsg="Requested resource not found (ignoring locally): " + req.resourceName();      if (log.isDebugEnabled())       log.debug(errMsg);      res.success(false);      res.errorMessage(errMsg);    } else {      try {        GridByteArrayList bytes=new GridByteArrayList(1024);        bytes.readAll(in);        res.success(true);        res.byteSource(bytes);      } catch (      IOException e) {        String errMsg="Failed to read resource due to IO failure: " + req.resourceName();        U.error(log,errMsg,e);        res.errorMessage(errMsg);        res.success(false);      } finally {        U.close(in,log);      }    }  } else {    String errMsg="Failed to find local deployment for peer request: " + req;    U.warn(log,errMsg);    res.success(false);    res.errorMessage(errMsg);  }  sendResponse(nodeId,req.responseTopic(),res);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private StringBuilder replaceGroupNameWithIndex(StringBuilder input,java.util.regex.Pattern pattern,String prefix){  java.util.regex.Matcher m=pattern.matcher(input);  while (m.find()) {    if (isEscapedChar(input.toString(),m.start())) {      continue;    }    int index=indexOf(m.group(INDEX_GROUP_NAME));    if (index >= 0) {      index++;    } else {      throw new PatternSyntaxException("unknown group name",input.toString(),m.start(INDEX_GROUP_NAME));    }    input.replace(m.start(),m.end(),prefix + index);    m.reset(input);  }  return input;}  }
class C{  @Override public String toString(){  String pattern="start={0,number,#}&end={1,number,#}&m=avg:{2}{3}&ms=true&show_tsuids=true";  long start=Math.max(0,getStartTimestamp() - 1);  long end=Math.max(start,getEndTimestamp() + 1);  String scope=DefaultTSDBService.toAnnotationKey(_scope,_metric,_type,_tags);  String tsdbMetricName=DefaultTSDBService.constructTSDBMetricName(new Metric(scope,_type));  Map<String,String> tags=new HashMap<>(getTags());  try {    return MessageFormat.format(pattern,start,end,tsdbMetricName,toTagParameterArray(tags));  } catch (  UnsupportedEncodingException ex) {    throw new SystemException(ex);  }}  }
class C{  public boolean isSynchronous(){  return _synch;}  }
class C{  private void validate(int hourOfDay,int minute,int second,int millis){  if (hourOfDay < 0 || hourOfDay > 23) {    throw new IllegalArgumentException(invalidHourOfDay + hourOfDay);  }  if (minute < 0 || minute > 59) {    throw new IllegalArgumentException(invalidMinute + minute);  }  if (second < 0 || second > 59) {    throw new IllegalArgumentException(invalidSecond + second);  }  if (millis < 0 || millis > 999) {    throw new IllegalArgumentException(invalidMillis + millis);  }}  }
class C{  public int size(){  return parameters.size();}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose(); else   if (e.getActionCommand().equals(ConfirmPanel.A_REFRESH) || e.getActionCommand().equals(ConfirmPanel.A_OK))   refresh(); else   if (e.getActionCommand().equals(ConfirmPanel.A_ZOOM))   zoom();}  }
class C{  @Override public Invocation.Builder header(String name,Object value){  clientRequestContext.getHeaders().add(name,value.toString());  return this;}  }
class C{  public OrganizationAlreadyExistsException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Inject public StatusCommandPresenter(GitServiceClient service,AppContext appContext,GitOutputPartPresenter console,GitLocalizationConstant constant,NotificationManager notificationManager){  this.service=service;  this.appContext=appContext;  this.console=console;  this.constant=constant;  this.notificationManager=notificationManager;}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  String blastInputFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,fastaFilePathTemplate);  List<String> command=new ArrayList<String>();  command.add(binary);  command.addAll(this.getBinarySwitchesAsList());  command.add("-d");  command.add(blastDbFileResourceString);  command.add("-i");  command.add(blastInputFilePathName);  return command;}  }
class C{  protected void themeSelectionChanged(ListSelectionEvent e){  if (m_setting)   return;  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  ValueNamePair laf=(ValueNamePair)lookList.getSelectedValue();  ValueNamePair theme=(ValueNamePair)themeList.getSelectedValue();  LookAndFeel currentLaf=UIManager.getLookAndFeel();  MetalTheme currentTheme=MetalLookAndFeel.getCurrentTheme();  AdempierePLAF.setPLAF(laf,theme,false);  previewPanel.refresh(currentLaf,currentTheme);  SwingUtilities.updateComponentTreeUI(previewPanel);  updatePreviewComponents();  setLFSelection();  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  this.repaint();}  }
class C{  public static int[][] loadGIFFile(InputStream str) throws IOException {  return loadPNGFile(str);}  }
class C{  protected int exec(String callback){  int ret=0;  try {    boolean doLog=log.isDebugEnabled();    if (doLog) {      log.debug("About to exec " + cmd[0]);    }    final Process proc;    try {      proc=Runtime.getRuntime().exec(cmd,envp,dir);    } catch (    Error err) {      if (err.getMessage() != null && (err.getMessage().contains("posix_spawn") || err.getMessage().contains("UNIXProcess"))) {        Error newErr=new Error("Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): " + err.getMessage());        newErr.setStackTrace(err.getStackTrace());        err=newErr;      }      throw err;    }    if (wait) {      try {        ret=proc.waitFor();      } catch (      InterruptedException e) {        SolrException.log(log,e);        ret=INVALID_PROCESS_RETURN_CODE;      }    }    if (wait && doLog) {      log.debug("Executable " + cmd[0] + " returned "+ ret);    }  } catch (  IOException e) {    SolrException.log(log,e);    ret=INVALID_PROCESS_RETURN_CODE;  }  return ret;}  }
class C{  private boolean checkBackupDelay(long backupDelay){  long ago=System.currentTimeMillis() - lastBackup;  return ago > backupDelay;}  }
class C{  public AboutTetradAction(){  super("About Tetrad " + Version.currentViewableVersion());}  }
class C{  public static int arraySize(final int expected,final float f){  final long s=Math.max(2,nextPowerOfTwo((long)Math.ceil(expected / f)));  if (s > (1 << 30))   throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor "+ f+ ")");  return (int)s;}  }
class C{  public FtfcSearchEditor(FtfcRunner runner){  this(runner,"Result MAG");}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getSingleton_();}  }
class C{  public synchronized void write(byte[] data,int offset,int length) throws IOException {  out.write(data,offset,length);  written+=length;}  }
class C{  public final void info(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,t);  }}  }
class C{  public byte[] decode(byte[] data,byte[] uncompData,int h){  if (data[0] == (byte)0x00 && data[1] == (byte)0x01) {    throw new UnsupportedOperationException("TIFFLZWDecoder0");  }  initializeStringTable();  this.data=data;  this.h=h;  this.uncompData=uncompData;  bytePointer=0;  bitPointer=0;  dstIndex=0;  nextData=0;  nextBits=0;  int code, oldCode=0;  byte[] string;  while (((code=getNextCode()) != 257) && dstIndex != uncompData.length) {    if (code == 256) {      initializeStringTable();      code=getNextCode();      if (code == 257) {        break;      }      writeString(stringTable[code]);      oldCode=code;    } else {      if (code < tableIndex) {        string=stringTable[code];        writeString(string);        addStringToTable(stringTable[oldCode],string[0]);        oldCode=code;      } else {        string=stringTable[oldCode];        string=composeString(string,string[0]);        writeString(string);        addStringToTable(string);        oldCode=code;      }    }  }  if (predictor == 2) {    int count;    for (int j=0; j < h; j++) {      count=samplesPerPixel * (j * w + 1);      for (int i=samplesPerPixel; i < w * samplesPerPixel; i++) {        uncompData[count]+=uncompData[count - samplesPerPixel];        count++;      }    }  }  return uncompData;}  }
class C{  public static long nextPowerOfTwo(long x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return (x | x >> 32) + 1;}  }
class C{  @SuppressWarnings("unchecked") public static <E>ResettableIterator<E> resettableEmptyIterator(){  return (ResettableIterator<E>)RESETTABLE_INSTANCE;}  }
class C{  public static long negHalfWidth(long min,long max){  if (min > max) {    throw new IllegalArgumentException("min [" + min + "] must be <= max ["+ max+ "]");  }  long mean=meanLow(min,max);  return min - mean - ((min ^ max) & 1);}  }
class C{  public T caseTypableElement(TypableElement object){  return null;}  }
class C{  public <T>Command addOptionalArgument(String argument,Class<T> type){  IArgumentParser<T> argumentParser=CommandHandler.INSTANCE.getParserForType(type);  if (argumentParser != null) {    this.optionalArguments.put(argument,argumentParser);  } else {    LLibrary.LOGGER.error("Unable to find argument parser for type " + type + ". Skipping argument.");  }  return this;}  }
class C{  private GoogleCredential newCredential() throws Exception {  return new GoogleCredential.Builder().setTransport(HTTP_TRANSPORT).setJsonFactory(JSON_FACTORY).setServiceAccountId(bigqueryServiceAccountEmail).setServiceAccountScopes(BigqueryScopes.all()).setServiceAccountPrivateKeyFromP12File(bigqueryServiceAccountKeyFile.toFile()).build();}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public synchronized void update(Object[] newData,Object[] oldData){  this.oldDataList.add(oldData);  this.newDataList.add(newData);  this.lastNewData=newData;  this.lastOldData=oldData;  isInvoked=true;}  }
class C{  private CoreComponent primaryInjector(final CoreEarlyComponent early,final HeroicConfig config,final HeroicCoreInstance instance){  log.info("Building Primary Injector");  final List<LifeCycle> life=new ArrayList<>();  final StatisticsComponent statistics=config.getStatistics().module(early);  life.add(statistics.life());  final HeroicReporter reporter=statistics.reporter();  final CorePrimaryComponent primary=DaggerCorePrimaryComponent.builder().coreEarlyComponent(early).primaryModule(new PrimaryModule(instance,config.getFeatures(),reporter)).build();  final Optional<HttpServer> server;  if (setupService) {    final InetSocketAddress bindAddress=setupBindAddress(config);    final HttpServerComponent serverComponent=DaggerHttpServerComponent.builder().primaryComponent(primary).httpServerModule(new HttpServerModule(bindAddress,config.isEnableCors(),config.getCorsAllowOrigin(),config.getConnectors())).build();    life.add(serverComponent.life());    server=Optional.of(serverComponent.server());  } else {    server=Optional.empty();  }  final CacheComponent cache=config.getCache().module(primary);  life.add(cache.cacheLife());  final AnalyticsComponent analytics=config.getAnalytics().module(primary);  life.add(analytics.analyticsLife());  final CoreMetadataComponent metadata=DaggerCoreMetadataComponent.builder().primaryComponent(primary).metadataManagerModule(config.getMetadata()).build();  life.add(metadata.metadataLife());  final CoreSuggestComponent suggest=DaggerCoreSuggestComponent.builder().primaryComponent(primary).suggestManagerModule(config.getSuggest()).build();  life.add(suggest.suggestLife());  final CoreMetricComponent metric=DaggerCoreMetricComponent.builder().corePrimaryComponent(primary).metadataComponent(metadata).analyticsComponent(analytics).metricManagerModule(config.getMetric()).build();  life.add(metric.metricLife());  final IngestionComponent ingestion=config.getIngestion().module(primary,suggest,metadata,metric);  life.add(ingestion.ingestionLife());  buildShellServer(config).ifPresent(null);  final CoreClusterComponent cluster=DaggerCoreClusterComponent.builder().primaryComponent(primary).metricComponent(metric).metadataComponent(metadata).suggestComponent(suggest).clusterManagerModule(config.getCluster()).clusterDiscoveryComponent(config.getCluster().getDiscovery().module(primary)).build();  life.add(cluster.clusterLife());  if (startupPing.isPresent() && startupId.isPresent()) {    final StartupPingerComponent pinger=DaggerStartupPingerComponent.builder().corePrimaryComponent(primary).clusterComponent(cluster).startupPingerModule(new StartupPingerModule(startupPing.get(),startupId.get(),server)).build();    life.add(pinger.startupPingerLife());  }  final ConsumersComponent consumer=DaggerCoreConsumersComponent.builder().coreConsumersModule(new CoreConsumersModule(reporter,config.getConsumers(),primary,ingestion)).corePrimaryComponent(primary).build();  life.add(consumer.consumersLife());  final QueryComponent query=DaggerCoreQueryComponent.builder().queryModule(new QueryModule(config.getMetric().getGroupLimit())).corePrimaryComponent(primary).clusterComponent(cluster).cacheComponent(cache).build();  life.add(query.queryLife());  final GeneratorComponent generator=config.getGenerator().module(primary);  life.add(generator.generatorLife());  final LifeCycle combined=LifeCycle.combined(life);  combined.install();  return DaggerCoreComponent.builder().primaryComponent(primary).analyticsComponent(analytics).consumersComponent(consumer).metricComponent(metric).metadataComponent(metadata).suggestComponent(suggest).queryComponent(query).ingestionComponent(ingestion).clusterComponent(cluster).generatorComponent(generator).build();}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public void init(BigInteger N,BigInteger g,Digest digest){  this.N=N;  this.g=g;  this.digest=digest;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return (al == null) ? "" : al.getGenre();}  }
class C{  public boolean isGUI(){  return GUI;}  }
class C{  public static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  public String asString(String charset) throws IOException {  Reader reader=buildReader(charset);  return consumeReader(reader);}  }
class C{  @Override public void visitSource(String source,String debug){  if (mainClass.getFullyQualifiedName().contains("$")) {    return;  }  dl.newDep(fileNode,mainClass,JavaRelation.CLASSFILE);}  }
class C{  private boolean moveSelection(int direction){  PathMatcherTerm term=getSelection();  int initialPosition=getElementIndex(term);  if (initialPosition < 0) {    return false;  }  if ((direction == SWT.UP) && (initialPosition > 0)) {    moveWithinMatchers(term,initialPosition - 1);    return true;  }  if ((direction == SWT.DOWN) && (initialPosition < (pathMatchers.getTable().getItemCount() - 1))) {    moveWithinMatchers(term,initialPosition + 1);    return true;  }  return false;}  }
class C{  private CiphertextHeaders createCiphertextHeaders(final ContentType contentType,final int frameSize){  final byte[] headerNonce=new byte[nonceLen_];  RND.nextBytes(headerNonce);  final byte[] encryptionContextBytes=EncryptionContextSerializer.serialize(encryptionContext_);  final CiphertextHeaders ciphertextHeaders=new CiphertextHeaders(version_,type_,cryptoAlgo_,encryptionContextBytes,keyBlobs_,contentType,frameSize);  ciphertextHeaders.setHeaderNonce(headerNonce);  return ciphertextHeaders;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.ANNOTATION__PROPERTIES:    getProperties().clear();  return;case TypesPackage.ANNOTATION__TARGETS:getTargets().clear();return;}super.eUnset(featureID);}  }
class C{  private URL buildUrl(String path,String[] parameters) throws MalformedURLException, DocumentListException {  if (path == null) {    throw new DocumentListException("null path");  }  return buildUrl(host,path,parameters);}  }
class C{  public boolean wasPressed(){  return m_current && !m_last;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public static void main(String[] args){  KDDCLIApplication.runCLIApplication(KDDCLIApplication.class,args);}  }
class C{  private void parseDescriptor(String descriptor) throws VmdkFormatException {  String[] lines=descriptor.split("\r\n");  for (  String line : lines) {    String trimmed=line.trim();    if (trimmed.isEmpty()) {      continue;    }    if (!trimmed.startsWith("ddb.")) {      continue;    }    String[] keyValue=trimmed.substring(4).split("=");    if (keyValue.length != 2) {      throw new VmdkFormatException("Invalid ddb entry in descriptor");    }    if ("adaptertype".equalsIgnoreCase(keyValue[0])) {      adapterType=keyValue[1];    }    ddb.put(keyValue[0],keyValue[1]);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case MappingPackage.MAPPING_RULE__TARGET:    return basicSetTarget(null,msgs);case MappingPackage.MAPPING_RULE__SOURCES:  return ((InternalEList<?>)getSources()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void removeLocalTempTable(Table table){  localTempTables.remove(table.getName());}  }
class C{  @Ignore(MARIONETTE) @Test @NeedsLocalEnvironment public void crossDomainHistoryNavigationWithAProxiedHost(){  testServer1.start();  testServer2.start();  pacFileServer.setPacFileContents(Joiner.on('\n').join("function FindProxyForURL(url, host) {","  if (host.indexOf('example') != -1) {","    return 'PROXY " + testServer2.getHostAndPort() + "';","  }","  return 'DIRECT';"," }"));  pacFileServer.start();  WebDriver driver=customDriverFactory.createDriver(pacFileServer.getBaseUrl());  String page1Url=buildPage1Url(testServer1,"http://www.example.com" + buildPage2Url());  String page2Url=buildPage2Url("http://www.example.com",buildPage3Url(testServer1));  String page3Url=buildPage3Url(testServer1);  performNavigation(driver,page1Url);  assertEquals(ImmutableList.of(new HttpRequest(page1Url,null),new HttpRequest(page3Url,page2Url)),testServer1.getRequests());  assertEquals(ImmutableList.of(new HttpRequest(page2Url,page1Url)),testServer2.getRequests());}  }
class C{  private static boolean isPlotConfigurationCompatible(PlotConfiguration plotConfiguration,DataTable dataTable){  for (  ValueSource valueSource : plotConfiguration.getAllValueSources()) {    for (    SeriesUsageType usageType : valueSource.getDefinedUsageTypes()) {      DataTableColumn column=valueSource.getDataTableColumn(usageType);      if (column != null) {        DataTableColumnIndex columnIdx=new DataTableColumnIndex(column,dataTable);        if (columnIdx.getIndex() < 0) {          return false;        }      }    }  }  for (  DefaultDimensionConfig defaultDimensionConfig : plotConfiguration.getDefaultDimensionConfigs().values()) {    DataTableColumn column=defaultDimensionConfig.getDataTableColumn();    DataTableColumnIndex columnIdx=new DataTableColumnIndex(column,dataTable);    if (columnIdx.getIndex() < 0) {      return false;    }  }  DataTableColumn column=plotConfiguration.getDomainConfigManager().getDataTableColumn();  DataTableColumnIndex columnIdx=new DataTableColumnIndex(column,dataTable);  if (columnIdx.getIndex() < 0) {    return false;  }  return true;}  }
class C{  private boolean mergeEntities(Entity entity,Entity targetEntity){  ReferenceTarget targetRef=targetEntity.getReferent();  ReferenceTarget entityRef=entity.getReferent();  if (mergeDistinctEntities || isSameTarget(targetRef,entityRef)) {    addMergeToHistory(targetEntity,entity);    for (    Relation r : getRelations(entity)) {      if (r.getSource() == entity) {        r.setSource(targetEntity);      }      if (r.getTarget() == entity) {        r.setTarget(targetEntity);      }    }    remove(entity);    return true;  } else {    monitor.info("Not merging objects {} and {} as they have different referents",targetEntity.getInternalId(),entity.getInternalId());    return false;  }}  }
class C{  public final void update(byte b) throws SignatureException {  if (state == VERIFY || state == SIGN) {    engineUpdate(b);  } else {    throw new SignatureException("object not initialized for " + "signature or verification");  }}  }
class C{  public static double compareExceptionDiffs(Map<Integer,Throwable> originalExceptionMapping,Map<Integer,Throwable> regressionExceptionMapping){  double exDiff=Math.abs((double)(originalExceptionMapping.size() - regressionExceptionMapping.size()));  if (exDiff == 0) {    for (    Entry<Integer,Throwable> origException : originalExceptionMapping.entrySet()) {      boolean skip=false;      try {        if (origException.getValue() == null || origException.getValue().getMessage() == null) {          originalExceptionMapping.remove(origException.getKey());          skip=true;        }      } catch (      Throwable t) {        continue;      }      try {        Throwable x=origException.getValue();        Class<?> ex=getExceptionClassToUse(x);        String sourceClass=RegressionAssertionCounter.getSourceClassName(x);        if (sourceClass != null && isValidSource(sourceClass) && isExceptionToAssertThrownBy(ex)) {          Throwable otherX=regressionExceptionMapping.get(origException.getKey());          String otherSourceClass=RegressionAssertionCounter.getSourceClassName(otherX);          if (sourceClass != otherSourceClass) {            exDiff++;          }        }      } catch (      Throwable t) {      }      try {        if (regressionExceptionMapping.containsKey(origException.getKey()) && (regressionExceptionMapping.get(origException.getKey()) == null || regressionExceptionMapping.get(origException.getKey()).getMessage() == null)) {          regressionExceptionMapping.remove(origException.getKey());          skip=true;        }      } catch (      Throwable t) {        continue;      }      if (!skip && regressionExceptionMapping.get(origException.getKey()) != null) {        String origExceptionMessage=origException.getValue().getMessage();        String regExceptionMessage=regressionExceptionMapping.get(origException.getKey()).getMessage();        int diffIndex=StringUtils.indexOfDifference(origExceptionMessage,regExceptionMessage);        if (diffIndex > 0) {          if (origExceptionMessage.charAt(diffIndex - 1) == '@') {            originalExceptionMapping.remove(origException.getKey());            regressionExceptionMapping.remove(origException.getKey());            skip=true;          } else {            int howFarBack=10;            if (diffIndex > howFarBack) {              String last10=origExceptionMessage.substring(diffIndex - howFarBack,diffIndex);              if (last10.contains("@")) {                originalExceptionMapping.remove(origException.getKey());                regressionExceptionMapping.remove(origException.getKey());                skip=true;              }            }          }        }      }      if (!skip && origException.getValue().getMessage().contains("Security manager blocks")) {        originalExceptionMapping.remove(origException.getKey());        regressionExceptionMapping.remove(origException.getKey());        skip=true;      }      if (skip)       continue;      if (!regressionExceptionMapping.containsKey(origException.getKey()) || (!regressionExceptionMapping.get(origException.getKey()).getMessage().equals(origException.getValue().getMessage()))) {        exDiff++;      }    }    for (    Entry<Integer,Throwable> regException : regressionExceptionMapping.entrySet()) {      if (!originalExceptionMapping.containsKey(regException.getKey()))       exDiff++;    }  }  return exDiff;}  }
class C{  @Command(description="Lists all tokens") public void listTokens() throws Exception {  List<TokenInfo> tokens=SignerClient.execute(new ListTokens());  tokens.forEach(null);}  }
class C{  private static void SetFloatField(JNIEnvironment env,int objJREF,int fieldID,float value){  if (traceJNI)   VM.sysWrite("JNI called: SetFloatField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setFloatValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public EntryDestroyedException(){  super();}  }
class C{  private static byte[] lmHash(String password) throws Exception {  byte[] oemPassword=password.toUpperCase().getBytes("US-ASCII");  int length=Math.min(oemPassword.length,14);  byte[] keyBytes=new byte[14];  System.arraycopy(oemPassword,0,keyBytes,0,length);  Key lowKey=createDESKey(keyBytes,0);  Key highKey=createDESKey(keyBytes,7);  Cipher des=Cipher.getInstance("DES/ECB/NoPadding");  des.init(Cipher.ENCRYPT_MODE,lowKey);  byte[] lowHash=des.doFinal(LM_HASH_MAGIC_CONSTANT);  des.init(Cipher.ENCRYPT_MODE,highKey);  byte[] highHash=des.doFinal(LM_HASH_MAGIC_CONSTANT);  byte[] lmHash=new byte[16];  System.arraycopy(lowHash,0,lmHash,0,8);  System.arraycopy(highHash,0,lmHash,8,8);  return lmHash;}  }
class C{  public FastAdapterDialog<Item> add(Item item){  mFastItemAdapter.add(item);  return this;}  }
class C{  public boolean isAcceptable(List<GeneralName> names){  if (permitted_names == null) {    prepareNames();  }  boolean[] types_presented=new boolean[9];  boolean[] permitted_found=new boolean[9];  for (  GeneralName name : names) {    int type=name.getTag();    if (excluded_names[type] != null) {      for (int i=0; i < excluded_names[type].size(); i++) {        if (excluded_names[type].get(i).isAcceptable(name)) {          return false;        }      }    }    if ((permitted_names[type] != null) && (!permitted_found[type])) {      types_presented[type]=true;      for (int i=0; i < permitted_names[type].size(); i++) {        if (permitted_names[type].get(i).isAcceptable(name)) {          permitted_found[type]=true;        }      }    }  }  for (int type=0; type < 9; type++) {    if (types_presented[type] && !permitted_found[type]) {      return false;    }  }  return true;}  }
class C{  public static boolean launchOrEnqueueFile(final File file,boolean audioLaunched){  return launchFile(file,false,audioLaunched);}  }
class C{  private void touchLastSeekingTime(){  lastSeekingTime=new Date();}  }
class C{  public Finished(byte[] bytes){  data=bytes;  length=data.length;}  }
class C{  public void doStop(){  mStop=true;}  }
class C{  public Node(Node parent,Object name,Map attributes){  this(parent,name,attributes,new NodeList());}  }
class C{  public static boolean isRequestType(char type){  return ((type & 0x0110) == STUN_REQUEST);}  }
class C{  protected ModuleFilterSpecifierImpl(){  super();}  }
class C{  public String saveStage() throws SaaSApplicationException {  try {    getBrandManagementService().setMarketplaceStage(stageContent,getMarketplaceBean().getMarketplaceId(),locale);  } catch (  SaaSApplicationException e) {    marketplaceBean.checkMarketplaceDropdownAndMenuVisibility(e);    throw e;  } finally {    setDirtyStage(false);    stages=null;    setShowConfirm(false);  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_MARKETPLACE_STAGE_SAVED);  return null;}  }
class C{  @Override @Deprecated public final void onRemoved(final RPObject object){}  }
class C{  public ImageIcon createArrowIcon(BasicStroke stroke,int width,int height,int arrowHeadType){  BufferedImage bigImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  Graphics2D g=(Graphics2D)bigImage.getGraphics();  int middleY=height / 2;  g.setBackground(OMColor.clear);  g.setPaint(OMColor.clear);  g.fillRect(0,0,width,height);  g.setPaint(Color.black);  g.setStroke(stroke);  g.drawLine(0,middleY,width,middleY);  int upTip=(int)((float)height * .25);  int downTip=(int)((float)height * .75);  Polygon poly=null;  if (arrowHeadType == OMArrowHead.ARROWHEAD_DIRECTION_FORWARD || arrowHeadType == OMArrowHead.ARROWHEAD_DIRECTION_BOTH) {    int rightWingX=(int)((float)width * .75);    poly=new Polygon(new int[]{width,rightWingX,rightWingX},new int[]{middleY,upTip,downTip},3);    g.fill(poly);    g.draw(poly);  }  if (arrowHeadType == OMArrowHead.ARROWHEAD_DIRECTION_BACKWARD || arrowHeadType == OMArrowHead.ARROWHEAD_DIRECTION_BOTH) {    int leftWingX=(int)((float)width * .25);    poly=new Polygon(new int[]{0,leftWingX,leftWingX},new int[]{middleY,upTip,downTip},3);    g.fill(poly);    g.draw(poly);  }  return new ImageIcon(bigImage);}  }
class C{  protected void sendOnOffCommand(int newState){  if (log.isDebugEnabled()) {    log.debug("sendOnOff(" + newState + ") Current: "+ mState);  }  int function;  double newDim;  if (newState == ON) {    function=X10Sequence.FUNCTION_ON;    newDim=1;  } else   if (newState == OFF) {    function=X10Sequence.FUNCTION_OFF;    newDim=0;  } else {    log.warn("illegal state requested for Light: " + getSystemName());    return;  }  if (log.isDebugEnabled()) {    log.debug("set state " + newState + " house "+ X10Sequence.houseCodeToText(housecode)+ " device "+ devicecode);  }  X10Sequence out=new X10Sequence();  out.addAddress(housecode,devicecode);  out.addFunction(housecode,function,0);  tc.sendX10Sequence(out,null);  if (log.isDebugEnabled()) {    log.debug("sendOnOff(" + newDim + ")  house "+ X10Sequence.houseValueToText(housecode)+ " device "+ devicecode+ " funct: "+ function);  }}  }
class C{  @Nullable public static String detectLineSeparator(@NotNull VirtualFile file,boolean checkFile){  String lineSeparator=getDetectedLineSeparator(file);  if (lineSeparator == null && checkFile) {    try {      getTextByBinaryPresentation(file.contentsToByteArray(),file);      lineSeparator=getDetectedLineSeparator(file);    } catch (    IOException e) {    }  }  return lineSeparator;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.PACKAGE_MEMBER__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void registerRecipe(FusionReactorRecipe reactorRecipe){  reactorRecipes.add(reactorRecipe);}  }
class C{  public CActionGraphScripting(final CGraphPanel graphPanel){  super("New Scripting Window");  m_graphPanel=graphPanel;}  }
class C{  public static CrawlerPack start(){  if (null == defaultCrawler)   defaultCrawler=new CrawlerPack();  return defaultCrawler;}  }
class C{  public List<List<Integer>> kSum(int[] num,int k,int target){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (num == null || num.length == 0 || num.length < k)   return res;  Arrays.sort(num);  return kSum(num,k,target,0);}  }
class C{  public boolean containsKeyName(){  return this.lengthKeyName() > 0;}  }
class C{  public static TranClob createClob(String string){  return new TranClob(new ClobImpl(string),false);}  }
class C{  protected void sendSelfPatch(T taskState,TaskState.TaskStage stage,Consumer<T> updateTaskState){  if (taskState.taskInfo == null) {    taskState.taskInfo=new TaskState();  }  taskState.taskInfo.stage=stage;  if (updateTaskState != null) {    updateTaskState.accept(taskState);  }  sendSelfPatch(taskState);}  }
class C{  public WeightSorter(Individual individual){  this.individual=individual;}  }
class C{  public RDFFormat(String name,Collection<String> mimeTypes,Charset charset,Collection<String> fileExtensions,boolean supportsNamespaces,boolean supportsContexts){  this(name,mimeTypes,charset,fileExtensions,null,supportsNamespaces,supportsContexts);}  }
class C{  private static JButton findArrowButton(JComboBox c){  for (int i=0, n=c.getComponentCount(); i < n; i++) {    final Component comp=c.getComponent(i);    if (comp instanceof JButton)     return (JButton)comp;  }  return null;}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  if (m_table == null)   return;  log.fine(e.getPropertyName() + "=" + e.getNewValue());  ((GridTable)m_table.getModel()).setChanged(true);}  }
class C{  @LargeTest public void testBinaryDownloadToSystemCache() throws Exception {  int fileSize=1024;  byte[] blobData=generateData(fileSize,DataType.BINARY);  long dlRequest=doBasicDownload(blobData,DOWNLOAD_TO_SYSTEM_CACHE);  verifyDownload(dlRequest,blobData);  mDownloadManager.remove(dlRequest);}  }
class C{  @Override public MapStream<K,V> filter(Predicate<? super Map.Entry<K,V>> predicate){  inner=inner.filter(predicate);  return this;}  }
class C{  protected void waitForDownloadsOrTimeout(long poll,long timeoutMillis) throws TimeoutException, InterruptedException {  doWaitForDownloadsOrTimeout(new Query(),poll,timeoutMillis);}  }
class C{  private boolean limitScale(Matrix transform,float pivotX,float pivotY,@LimitFlag int limitTypes){  if (!shouldLimit(limitTypes,LIMIT_SCALE)) {    return false;  }  float currentScale=getMatrixScaleFactor(transform);  float targetScale=limit(currentScale,mMinScaleFactor,mMaxScaleFactor);  if (targetScale != currentScale) {    float scale=targetScale / currentScale;    transform.postScale(scale,scale,pivotX,pivotY);    return true;  }  return false;}  }
class C{  public Matrix sample_Z(Matrix X){  Matrix P_Z=prob_Z(X);  return MatrixUtils.sample(P_Z,m_R);}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(String[] args){  if (args.length == 0) {    System.out.println("Usage: java Search n target");    System.out.println("   n is the number of random permutations of " + baseString + " to use as collection.");    System.out.println("   target is ideally a string of six characters\n");    System.exit(-1);  }  int n=Integer.valueOf(args[0]);  String target=args[1];  String[] els=buildInput(n);  long now=System.currentTimeMillis();  boolean b=search(els,target);  long time=System.currentTimeMillis() - now;  System.out.println("search time in ms:" + time);  System.out.println("search result:" + b);}  }
class C{  private int stripSourceRoute(String address,int pos){  if (pos < address.length()) {    if (address.charAt(pos) == '@') {      int i=address.indexOf(':');      if (i != -1) {        pos=i + 1;      }    }  }  return pos;}  }
class C{  @Override public void writeFromObjectIntoRowForUpdateAfterShallowInsert(Object object,AbstractRecord row,AbstractSession session,DatabaseTable table){  if (isReadOnly() || !getFields().get(0).getTable().equals(table) || isPrimaryKeyMapping()) {    return;  }  writeToRowFromAggregateForUpdateAfterShallowInsert(row,object,getAttributeValueFromObject(object),session,table);}  }
class C{  public DNSOutgoing(int flags,boolean multicast,int senderUDPPayload){  super(flags,0,multicast);  _names=new HashMap<String,Integer>();  _maxUDPPayload=(senderUDPPayload > 0 ? senderUDPPayload : DNSConstants.MAX_MSG_TYPICAL);  _questionsBytes=new MessageOutputStream(senderUDPPayload,this);  _answersBytes=new MessageOutputStream(senderUDPPayload,this);  _authoritativeAnswersBytes=new MessageOutputStream(senderUDPPayload,this);  _additionalsAnswersBytes=new MessageOutputStream(senderUDPPayload,this);}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (data != null) {    onReleaseResources(data);    data=null;  }}  }
class C{  public static Validator<CharSequence> letterOrNumber(@NonNull final Context context,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  return new LetterOrNumberValidator(context,R.string.default_error_message,caseSensitivity,allowSpaces,allowedCharacters);}  }
class C{  public NodesStatsRequest clear(){  this.indices.clear();  this.os=false;  this.process=false;  this.jvm=false;  this.threadPool=false;  this.fs=false;  this.transport=false;  this.http=false;  this.breaker=false;  this.script=false;  return this;}  }
class C{  public DoubleMatrix1D assign(double value){  int index=index(0);  int s=this.stride;  double[] elems=this.elements;  for (int i=size; --i >= 0; ) {    elems[index]=value;    index+=s;  }  return this;}  }
class C{  public SusiThought deduce(String q){  if (q == null)   return new SusiThought();  q=q.trim();  for (  Map.Entry<Pattern,Function<Matcher,SusiThought>> pe : this.entrySet()) {    Pattern p=pe.getKey();    Matcher m=p.matcher(q);    if (m.find())     try {      SusiThought json=pe.getValue().apply(m);      if (json != null) {        json.setProcess(p.pattern());        return json;      }    } catch (    Throwable e) {    }  }  return new SusiThought();}  }
class C{  public int size(){  return metadata.size();}  }
class C{  private static String a_an(final String noun){  String lowerCaseString=noun.toLowerCase();  final char initial;  if (lowerCaseString.length() == 0) {    return "a ";  } else {    initial=lowerCaseString.charAt(0);  }  if (lowerCaseString.length() == 1) {    if (isVowel(initial) && initial != 'u') {      return "an ";    } else {      return "a ";    }  }  if ("eu".equals(lowerCaseString.substring(0,2))) {    return "a ";  }  if (isVowel(initial)) {    return "an ";  }  if ((initial == 'y') && isConsonant(lowerCaseString.charAt(1))) {    return "an ";  }  return "a ";}  }
class C{  private void checkIfCollectionExistsinSource(ZkClusterData sourceZkClusterData,String collectionName) throws CollectionNotFoundException {  if (!sourceZkClusterData.getCollections().contains(collectionName)) {    throw new CollectionNotFoundException("ERROR: source zookeeper does not have collection: " + collectionName + " ... SourceZK: "+ sourceZKClient.getZkHost());  }}  }
class C{  public GridClientConfiguration(Properties in) throws GridClientException {  this("ignite.client",in);}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=loader.getResource(classnameAsResource);  return it != null ? it.toString() : null;}  }
class C{  public boolean hasSquidbOption(String option){  return squidbOptions.contains(option);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object payload=null;  if (curNumberOfParameters == 2)   payload=stack.pop();  String cmd=getString(stack);  stack.getUIMgrSafe().doUserEvent2(UserEvent.getEvtCodeForName(cmd),payload);  return null;}  }
class C{  public final Double2D normalize(){  return resize(1.0);}  }
class C{  public BloomFilter(NetworkParameters params,byte[] payloadBytes) throws ProtocolException {  super(params,payloadBytes,0);}  }
class C{  protected boolean clearSpecial(DatabaseConnection connection,Logger logger){  NestedConnection currentSaved=specialConnection.get();  boolean cleared=false;  if (connection == null) {  } else   if (currentSaved == null) {    logger.error("no connection has been saved when clear() called");  } else   if (currentSaved.connection == connection) {    if (currentSaved.decrementAndGet() == 0) {      specialConnection.set(null);    }    cleared=true;  } else {    logger.error("connection saved {} is not the one being cleared {}",currentSaved.connection,connection);  }  return cleared;}  }
class C{  public void abort(){  if (getCount() == 0)   return;  this.aborted=true;  while (getCount() > 0)   countDown();}  }
class C{  public SolrQuery(String q){  this();  this.set(CommonParams.Q,q);}  }
class C{  public void accessKeySVG12(float offset,String keyName){  TimingSpecifier ts=new AccesskeyTimingSpecifier(owner,isBegin,offset,keyName);  timingSpecifiers.add(ts);}  }
class C{  public static List<ServiceDetailDescriptor> findLayerSPI(LayerDetailDescriptor descriptor){  return new SPIFinder().findLayerSPI(descriptor);}  }
class C{  public void close() throws IOException {  randomAccessFile.close();}  }
class C{  public BackupSnapshot(ExecutorDriver driver,CassandraDaemonProcess daemon,BackupSnapshotTask cassandraTask){  this.daemon=daemon;  this.driver=driver;  this.cassandraTask=cassandraTask;}  }
class C{  public static Intent newIntent(Context context,String extraURL,String extraTitle){  Intent intent=new Intent(context,WebActivity.class);  intent.putExtra(EXTRA_URL,extraURL);  intent.putExtra(EXTRA_TITLE,extraTitle);  return intent;}  }
class C{  public MailBuilder cc(String name,String email){  return param("cc",name + " <" + email+ ">");}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  public Matrix3d rotateY(double ang){  return rotateY(ang,this);}  }
class C{  public static double dirac(double[] values,double[] prob){  double[] prob_cumul=new double[values.length];  prob_cumul[0]=prob[0];  for (int i=1; i < values.length; i++) {    prob_cumul[i]=prob_cumul[i - 1] + prob[i];  }  double y=raw();  double x=0;  for (int i=0; i < values.length - 1; i++) {    if ((y > prob_cumul[i]) && (y < prob_cumul[i + 1])) {      x=values[i];    }  }  return x;}  }
class C{  public CLIOutputResponse proplist(final PropertyListRequest request) throws IOException, ServerException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  uArgs.add("proplist");  final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(request.getPath()));  List<String> output;  if (result.getStdout() != null && result.getStdout().size() > 0) {    output=result.getStdout().subList(1,result.getStdout().size());  } else {    output=result.getStdout();  }  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(output);}  }
class C{  private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){  long lastTime=timed ? System.nanoTime() : 0L;  Thread w=Thread.currentThread();  int spins=-1;  ThreadLocalRandom randomYields=null;  for (; ; ) {    Object item=s.item;    if (item != e) {      s.forgetContents();      return this.<E>cast(item);    }    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {      unsplice(pred,s);      return e;    }    if (spins < 0) {      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();    } else     if (spins > 0) {      --spins;      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();    } else     if (s.waiter == null) {      s.waiter=w;    } else     if (timed) {      long now=System.nanoTime();      if ((nanos-=now - lastTime) > 0)       LockSupport.parkNanos(this,nanos);      lastTime=now;    } else {      LockSupport.park(this);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Test suite(){  return (new TestSuite(AjaxRequestITCase.class));}  }
class C{  public void testGetName(){  System.out.println("getName");  String expResult="testName";  Table instance=new Table(new TableHelper(null),expResult,"123");  String result=instance.getName();  assertTrue(expResult.equals(result));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.526 -0500",hash_original_method="683433A1D2226A93C6C052E4367B337E",hash_generated_method="E878B686A2591643DAA083868B7AD669") private void adjustForBottomFadingEdge(View childInSelectedRow,int topSelectionPixel,int bottomSelectionPixel){  if (childInSelectedRow.getBottom() > bottomSelectionPixel) {    int spaceAbove=childInSelectedRow.getTop() - topSelectionPixel;    int spaceBelow=childInSelectedRow.getBottom() - bottomSelectionPixel;    int offset=Math.min(spaceAbove,spaceBelow);    offsetChildrenTopAndBottom(-offset);  }}  }
class C{  public void shutdown() throws ConnectionManagerException {  s_logger.info("Shutting down CIM adapter.");  connectionLock.lock();  try {    closeAllConnections();    if (_listener != null) {      _listener.stop();      _listener=null;    }    executorService.shutdown();  } catch (  Exception e) {    throw new ConnectionManagerException("An error occurred shutting down the connection manager",e);  } finally {    connectionLock.unlock();  }}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  return COLUMN_EDITABLE[columnIndex];}  }
class C{  public void save(){  log.info("Saving " + homeFile);  try (PduOutputStream out=new PduOutputStream(new FileOutputStream(homeFile),NOOP_CIPHER)){    out.write(messageFactory.toPdu(getOwnHomeData()));  } catch (  IOException e) {    log.error("Couldn't save home village: " + e);  }}  }
class C{  public String minNumObjTipText(){  return "The minimum number of instances per rule.";}  }
class C{  public static void commandLineCompile(String[] args,boolean lookupUnnamedFiles) throws Exception {  Options options=createCompilationOptions();  CommandLineParser cliParser=new DefaultParser();  CommandLine cli;  cli=cliParser.parse(options,args);  if (cli.hasOption('h')) {    displayHelp(options);    return;  }  if (cli.hasOption('v')) {    displayVersion();    return;  }  displayStackTraceOnError=cli.hasOption('e');  CompilerConfiguration configuration=generateCompilerConfigurationFromOptions(cli);  String[] filenames=generateFileNamesFromOptions(cli);  boolean fileNameErrors=filenames == null;  if (!fileNameErrors && (filenames.length == 0)) {    displayHelp(options);    return;  }  fileNameErrors=fileNameErrors && !validateFiles(filenames);  if (!fileNameErrors) {    doCompilation(configuration,null,filenames,lookupUnnamedFiles);  }}  }
class C{  private int xnBins(){  return cdf.length - 1;}  }
class C{  public SamplingAlgorithm(int nbSamples,long maxSamplingTime){  this.nbSamples=nbSamples;  this.maxSamplingTime=maxSamplingTime;}  }
class C{  public kbd addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public void onQueryComplete(int taskId,Object cookie,Cursor cursor){}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public Object onMessage(String id,Object data){  if ("onReceivedError".equals(id)) {    JSONObject d=(JSONObject)data;    try {      this.onReceivedError(d.getInt("errorCode"),d.getString("description"),d.getString("url"));    } catch (    JSONException e) {      e.printStackTrace();    }  } else   if ("exit".equals(id)) {    finish();  }  return null;}  }
class C{  public void put(String fieldName,Double value){  if (value == null) {    _put(fieldName,nullNode());  } else {    _put(fieldName,numberNode(value.doubleValue()));  }}  }
class C{  protected void logThrowable(Throwable t){  print("Exception: " + t.getClass().getName() + " - "+ t.getMessage(),ERROR);  Thread thr=Thread.currentThread();  if (thr instanceof CodenameOneThread && ((CodenameOneThread)thr).hasStackFrame()) {    print(((CodenameOneThread)thr).getStack(t),ERROR);  }  t.printStackTrace();  try {synchronized (this) {      Writer w=getWriter();      Util.getImplementation().printStackTraceToStream(t,w);      w.flush();    }  } catch (  IOException err) {    err.printStackTrace();  }}  }
class C{  public void reset(){  count=0;  System.arraycopy(IV,0,FR,0,FR.length);  cipher.reset();}  }
class C{  public void showParameters(boolean showParameters){  this.showParameters=showParameters;  if (states.containsKey(CURRENT)) {    refresh(mainFrame.getSystem().getState(),mainFrame.getSystem().getState().getParameterIds());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonefalsenocopytext.class,args);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SDEFINITION__TKEY:    return getTkey();case GamlPackage.SDEFINITION__ARGS:  return getArgs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void writeStartDocument(String version) throws XMLStreamException {  log.log(Level.FINE,"writeStartDocument({0})",version);  writeStartDocument(this.encoding,null);}  }
class C{  public void assignExportPolicyToQtree(String qtreeName,String fsName,String exportPath){  try {    NaElement result=null;    String qtreePolicyName=fsName + "_" + qtreeName;    NaElement qtreeElem=new NaElement("qtree-modify");    qtreeElem.addNewChild("export-policy",qtreePolicyName);    qtreeElem.addNewChild("volume",fsName);    qtreeElem.addNewChild("qtree",qtreeName);    result=server.invokeElem(qtreeElem);  } catch (  IllegalArgumentException e) {    String msg="Failed to modify volume on path: " + (mountPath != null ? mountPath : exportPath);    log.error(msg,e);    throw new NetAppCException(msg,e);  }catch (  Exception e) {    String msg="Failed to modify volume on path: " + (mountPath != null ? mountPath : exportPath);    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the capability service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the capability service!",e);    }  }  Intent serviceIntent=new Intent(ICapabilityService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  static int compareParameterTypes(final Class<?>[] left,final Class<?>[] right,final Class<?>[] actual){  final float leftCost=getTotalTransformationCost(actual,left);  final float rightCost=getTotalTransformationCost(actual,right);  return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;}  }
class C{  public Vector2d mul(Vector2dc v){  x*=v.x();  y*=v.y();  return this;}  }
class C{  public static <S extends HasClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ClickEvent event=new ClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.203 -0500",hash_original_method="30705697D50ADB9D51B01BF1D1A7F736",hash_generated_method="283227C74339C960563B2FCBB51B1CC4") public void onNewPicture(WebViewCore.DrawData drawData){  final int viewWidth=mWebView.getViewWidth();  final boolean zoomOverviewWidthChanged=setupZoomOverviewWidth(drawData,viewWidth);  final float newZoomOverviewScale=getZoomOverviewScale();  WebSettings settings=mWebView.getSettings();  if (zoomOverviewWidthChanged && settings.isNarrowColumnLayout() && settings.getUseFixedViewport()&& (mInitialZoomOverview || mInZoomOverview)) {    if (exceedsMinScaleIncrement(mTextWrapScale,mDefaultScale) || exceedsMinScaleIncrement(newZoomOverviewScale,mDefaultScale)) {      mTextWrapScale=getReadingLevelScale();    } else {      mTextWrapScale=newZoomOverviewScale;    }  }  if (!mMinZoomScaleFixed || settings.getUseWideViewPort()) {    mMinZoomScale=newZoomOverviewScale;    mMaxZoomScale=Math.max(mMaxZoomScale,mMinZoomScale);  }  boolean scaleHasDiff=exceedsMinScaleIncrement(newZoomOverviewScale,mActualScale);  boolean scaleLessThanOverview=(newZoomOverviewScale - mActualScale) >= MINIMUM_SCALE_INCREMENT;  boolean mobileSiteInOverview=mInZoomOverview && !exceedsMinScaleIncrement(newZoomOverviewScale,mDefaultScale);  if (!mWebView.drawHistory() && ((scaleLessThanOverview && settings.getUseWideViewPort()) || ((mInitialZoomOverview || mobileSiteInOverview) && scaleHasDiff && zoomOverviewWidthChanged))) {    mInitialZoomOverview=false;    setZoomScale(newZoomOverviewScale,!willScaleTriggerZoom(mTextWrapScale) && !mWebView.getSettings().getUseFixedViewport());  } else {    mInZoomOverview=!scaleHasDiff;  }  if (drawData.mFirstLayoutForNonStandardLoad && settings.getLoadWithOverviewMode()) {    mInitialZoomOverview=mInZoomOverview;  }}  }
class C{  private static int bit(int i){  int ret=(1 << (i & LOW_ORDER_BITMASK));  return ret;}  }
class C{  private Dimension layoutSize(Container target,boolean preferred){synchronized (target.getTreeLock()) {    int targetWidth=target.getSize().width;    if (targetWidth == 0) {      targetWidth=Integer.MAX_VALUE;    }    int hgap=getHgap();    int vgap=getVgap();    Insets insets=target.getInsets();    int horizontalInsetsAndGap=insets.left + insets.right + (hgap * 2);    int maxWidth=targetWidth - horizontalInsetsAndGap;    Dimension dim=new Dimension(0,0);    int rowWidth=0;    int rowHeight=0;    int nmembers=target.getComponentCount();    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();        if (rowWidth + d.width > maxWidth) {          addRow(dim,rowWidth,rowHeight);          rowWidth=0;          rowHeight=0;        }        if (rowWidth != 0) {          rowWidth+=hgap;        }        rowWidth+=d.width;        rowHeight=Math.max(rowHeight,d.height);      }    }    addRow(dim,rowWidth,rowHeight);    dim.width+=horizontalInsetsAndGap;    dim.height+=insets.top + insets.bottom + vgap * 2;    Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);    if (scrollPane != null) {      dim.width-=(hgap + 1);    }    return dim;  }}  }
class C{  protected void saveExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de saveExecuteLogic");  ActionErrors errores=form.validate(mapping,request);  if ((errores == null) || errores.isEmpty()) {    logger.info("Formulario validado");    GestionDescripcionBI descripcionBI=getGestionDescripcionBI(request);    ListaDescrVO listaDescriptora=new ListaDescrVO();    ((ListaDescriptoraForm)form).populate(listaDescriptora);    if (StringUtils.isBlank(listaDescriptora.getId())) {      listaDescriptora=descripcionBI.insertListaDescriptora(listaDescriptora);      ((ListaDescriptoraForm)form).set(listaDescriptora);      popLastInvocation(request);    } else {      descripcionBI.updateListaDescriptora(listaDescriptora);    }    setReturnActionFordward(request,redirectForwardMethod(request,"method","retrieve&id=" + listaDescriptora.getId()));  } else {    logger.info("Formulario inv\u00E1lido");    obtenerErrores(request,true).add(errores);    request.setAttribute(DescripcionConstants.FICHAS_DESCRIPCION_KEY,getGestionDescripcionBI(request).getFichasByTiposNivel(new int[]{ElementoCuadroClasificacion.TIPO_DESCRIPTOR,ElementoCuadroClasificacion.TIPO_ALL}));    request.setAttribute(DescripcionConstants.FICHAS_CLF_DOC_KEY,getGestionDocumentosElectronicosBI(request).getFichas());    cargarListaRepositoriosECM(request);    setReturnActionFordward(request,mapping.findForward("editar_lista_descriptora"));  }}  }
class C{  @Override protected void draw(Graphics2D g2d,int x,int y,int width,int height){  super.draw(g2d,x,y,width,height);  TextSprite positionSprite=TextSprite.createTextSprite(getPositionInSlot(),Color.WHITE);  DrawingHelper.drawAlignedSprite(g2d,positionSprite,HorizontalAlignment.LEFT,VerticalAlignment.TOP,x,y,width,height);}  }
class C{  public T caseArray(Array object){  return null;}  }
class C{  private void onMouseOver(){}  }
class C{  public void typedLessThan() throws IOException {  writeCode(TYPED_LESS_THAN);}  }
class C{  public static String collapseQualifier(String qualifier,boolean includeDots){  StringTokenizer tokenizer=new StringTokenizer(qualifier,".");  String collapsed=Character.toString(tokenizer.nextToken().charAt(0));  while (tokenizer.hasMoreTokens()) {    if (includeDots) {      collapsed+='.';    }    collapsed+=tokenizer.nextToken().charAt(0);  }  return collapsed;}  }
class C{  StructSet(StructBag bag){  this.contents=new ObjectOpenCustomHashSet(new ObjectArrayHashingStrategy());  this.structType=(StructType)bag.elementType;  if (bag.hasLimitIterator) {    Iterator itr=bag.fieldValuesIterator();    while (itr.hasNext()) {      addFieldValues((Object[])itr.next());    }  } else {    Set keys=bag.map.keySet();    for (    Object key : keys) {      addFieldValues((Object[])key);    }  }}  }
class C{  public static void putOperationInvocation(final Message message,final String resourceName,final String operationName,final Object... parameters) throws JMSException {  try {    ManagementHelper.putOperationInvocation(JMSManagementHelper.getCoreMessage(message),resourceName,operationName,parameters);  } catch (  Exception e) {    throw JMSManagementHelper.convertFromException(e);  }}  }
class C{  public boolean isIncludeInSenderChannel(){  return includeInSenderChannel;}  }
class C{  @DSComment("Data serialization/deserialization") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.480 -0500",hash_original_method="1666E21FDEAC3D0C57D8E38C022A7AD2",hash_generated_method="2400F64B7D1A1D47FB478A0CEC8DD502") public void putParcelableArray(String key,Parcelable[] value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  static boolean writeOutText(GlyphData glyphData,float[][] Trm,boolean hasContent,final float currentWidth,final StringBuffer textData,final String spaces){  final String unicodeValue=glyphData.getUnicodeValue();  final float fontScale=glyphData.getFontScale();  if (!unicodeValue.isEmpty()) {    if (DecoderOptions.embedWidthData) {      final float xx=Trm[2][0];      final float yy=Trm[2][1];      textData.append(spaces);      if (glyphData.isHorizontal()) {        textData.append(PdfData.marker);        textData.append(xx);        textData.append(PdfData.marker);      } else {        textData.append(PdfData.marker);        textData.append(yy);        textData.append(PdfData.marker);      }      textData.append(currentWidth * fontScale);      textData.append(PdfData.marker);    } else {      textData.append(spaces);    }    final int length=unicodeValue.length();    char next;    boolean isXMLExtraction=glyphData.isXMLExtraction();    for (int ii=0; ii < length; ii++) {      next=unicodeValue.charAt(ii);      hasContent=true;      if (next == 9) {        next=32;      }      if (next == '<' && isXMLExtraction) {        textData.append("&lt;");      } else       if (next == '>' && isXMLExtraction) {        textData.append("&gt;");      } else       if (next == 64258) {        textData.append("fl");      } else       if (next > 31) {        textData.append(next);      } else       if (next == 13 || next == 10) {        textData.append(' ');      } else {        textData.append(hex[next]);      }    }  } else {    textData.append(spaces);  }  return hasContent;}  }
class C{  public void showMark(long position){  lastLocationPosition=position;  if (position < 0)   return;  position=position - position % bytesPerLine;  textAreasStart=position;  if (numberOfLines > 2)   textAreasStart=position - (numberOfLines / 2) * bytesPerLine;  ensureWholeScreenIsVisible();  redrawTextAreas(true);  updateScrollBar();}  }
class C{  public static boolean isCurveAvailable(String curveName,KeyStoreType keyStoreType){  if (isBouncyCastleKeyStore(keyStoreType)) {    return true;  }  if (availableSunCurves.length == 0) {    return false;  }  for (  String curve : availableSunCurves) {    if (curve.contains(curveName)) {      return true;    }  }  return false;}  }
class C{  public static EventBean[] addToArray(EventBean[] array,EventBean eventToAdd){  EventBean[] newArray=new EventBean[array.length + 1];  System.arraycopy(array,0,newArray,0,array.length);  newArray[newArray.length - 1]=eventToAdd;  return newArray;}  }
class C{  public void risTranspose(int genome[][],MersenneTwisterFast srt,GEPSpecies s){  try {    int headsize=s.headSize;    int index=srt.nextInt(genome.length);    int gf[]=genome[index];    int gfStart=srt.nextInt(headsize);    while (gfStart < headsize && (s.symbolSet.symbols[gf[gfStart]] instanceof GEPTerminalSymbol))     gfStart++;    if (gfStart >= headsize)     return;    int gfSize=srt.nextInt(headsize < gf.length - gfStart ? headsize : gf.length - gfStart) + 1;    index=srt.nextInt(genome.length);    int gt[]=genome[index];    int temp[]=new int[gfSize];    int i;    for (i=0; i < gfSize; i++)     temp[i]=gf[gfStart + i];    for (i=headsize - gfSize - 1; i >= 0; i--)     gt[i + gfSize]=gt[i];    for (i=0; i < gfSize; i++)     gt[i]=temp[i];  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public static int toInt(String str,int defValue){  try {    return Integer.parseInt(str);  } catch (  Exception e) {  }  return defValue;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public void componentResized(ComponentEvent e){  getHandler().componentResized(e);}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public Pageable createPageable(){  return new DrawingPageable(view.getDrawing());}  }
class C{  public InterruptedException(@Nullable String s){  super(s);}  }
class C{  private void executeAdvancedSearch(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length <= 1) {    printMessage(COMMAND_HELP_ASEARCH);    return;  }  HashMap<String,String> searchParameters=new HashMap<String,String>();  for (int i=1; i < args.length; ++i) {    searchParameters.put(args[i].substring(0,args[i].indexOf("=")),args[i].substring(args[i].indexOf("=") + 1));  }  DocumentListFeed feed=documentList.search(searchParameters);  out.println("Results for advanced search:");  for (  DocumentListEntry entry : feed.getEntries()) {    printDocumentEntry(entry);  }}  }
class C{  public void mouseClicked(MouseEvent e){  if (e.getClickCount() < 2)   return;  log.finer(e.toString());  Rectangle hitRect=new Rectangle(e.getX() - 1,e.getY() - 1,3,3);  int dayIndex=e.getX() / m_dayWidth;  if (dayIndex >= m_noDays)   dayIndex=m_noDays - 1;  int timeIndex=m_timePanel.getTimeSlotIndex(e.getY());  for (int i=0; i < m_slots.length; i++) {    if (m_where[i].intersects(hitRect)) {      MAssignmentSlot mas=m_slots[i];      System.out.println("Existing=" + mas.getInfo());      if (!mas.isAssignment())       return;      VAssignmentDialog vad=new VAssignmentDialog(Env.getFrame(this),m_slots[i].getMAssignment(),false,m_createNew);      m_infoSchedule.mAssignmentCallback(vad.getMResourceAssignment());      return;    }  }  if (m_createNew) {    MResourceAssignment ma=new MResourceAssignment(Env.getCtx(),0,null);    ma.setS_Resource_ID(m_S_Resource_ID);    ma.setAssignDateFrom(TimeUtil.getDayTime(TimeUtil.addDays(m_startDate,dayIndex),m_timePanel.getTimeSlot(timeIndex).getStartTime()));    ma.setQty(new BigDecimal(1));    VAssignmentDialog vad=new VAssignmentDialog(Env.getFrame(this),ma,false,m_createNew);    m_infoSchedule.mAssignmentCallback(vad.getMResourceAssignment());    return;  }}  }
class C{  public boolean isSmapDumped(){  return isSmapDumped;}  }
class C{  public static void write(float lt,float ln,String url,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeByte(COLORMODEL_URL);  dos.writeFloat(lt);  dos.writeFloat(ln);  properties.setProperty(LPC_LINKRASTERIMAGEURL,url);  properties.write(dos);}  }
class C{  public void addLastDecrementRunnable(Runnable r){  boolean ensureLastDecrement=(mCount == 0);  if (ensureLastDecrement)   increment();  mLastDecRunnables.add(r);  if (ensureLastDecrement)   decrement();}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append("Token[");switch (ttype) {case TT_EOF:    result.append("EOF");  break;case TT_EOL:result.append("EOL");break;case TT_NUMBER:result.append("n=");result.append(nval);break;case TT_WORD:result.append(sval);break;default :if (ttype == TT_UNKNOWN || tokenTypes[ttype] == TOKEN_QUOTE) {result.append(sval);} else {result.append('\'');result.append((char)ttype);result.append('\'');}}result.append("], line ");result.append(lineNumber);return result.toString();}  }
class C{  protected boolean isSingleLineComment(String line){  return line.startsWith("--");}  }
class C{  public int indexOf(String string){  return indexOf(string,0);}  }
class C{  public PropertyNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void restorePreferences(BackupDataInput data) throws IOException {  int dataSize=data.getDataSize();  byte[] dataBuffer=new byte[dataSize];  int read=data.readEntityData(dataBuffer,0,dataSize);  if (read != dataSize) {    throw new IOException("Failed to read all the preferences data");  }  SharedPreferences preferences=this.getSharedPreferences(Constants.SETTINGS_NAME,Context.MODE_PRIVATE);  PreferenceBackupHelper importer=createPreferenceBackupHelper();  importer.importPreferences(dataBuffer,preferences);}  }
class C{  public boolean generate(Function<BiomeDecoratorBetweenlands,Boolean> generator){  return this.generate(1,generator);}  }
class C{  static public IApplicationThread asInterface(IBinder obj){  if (obj == null) {    return null;  }  IApplicationThread in=(IApplicationThread)obj.queryLocalInterface(descriptor);  if (in != null) {    return in;  }  return new ApplicationThreadProxy(obj);}  }
class C{  public void addDownloadTask(TmmTask task){  if (downloadExecutor == null) {    downloadExecutor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new TmmThreadFactory("download-task"));    downloadExecutor.allowCoreThreadTimeOut(true);  }  task.addListener(this);  task.setState(TaskState.QUEUED);  downloadExecutor.execute(task);}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public boolean isIncoming(){  return m_isIncoming;}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (_table == null) {    return;  }  int row=_table.getSelectedRow();  if (log.isDebugEnabled()) {    log.debug("Table valueChanged: row= " + row);  }  if (row >= 0) {    if (_updateButton != null) {      _updateButton.setEnabled(true);      _updateButton.setToolTipText(null);    }    NamedBean bean=getDeviceNamedBean();    _reporter.setReporter(bean.getDisplayName());  } else {    if (_updateButton != null) {      _updateButton.setEnabled(false);      _updateButton.setToolTipText(Bundle.getMessage("ToolTipPickFromTable"));    }  }  validate();}  }
class C{  public static boolean hasUniqueObject(Collection<?> collection){  if (isEmpty(collection)) {    return false;  }  boolean hasCandidate=false;  Object candidate=null;  for (  Object elem : collection) {    if (!hasCandidate) {      hasCandidate=true;      candidate=elem;    } else     if (candidate != elem) {      return false;    }  }  return true;}  }
class C{  public WebLogic8xConfigurationBuilder(String serverName){  this.setServerName(serverName);  try {    DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();    builder=domFactory.newDocumentBuilder();  } catch (  Exception e) {    throw new CargoException("Cannot initialize XML DOM document builder",e);  }}  }
class C{  public void removeContentProvider(IBinder connection,boolean stable){  enforceNotIsolatedCaller("removeContentProvider");synchronized (this) {    ContentProviderConnection conn;    try {      conn=(ContentProviderConnection)connection;    } catch (    ClassCastException e) {      String msg="removeContentProvider: " + connection + " not a ContentProviderConnection";      Slog.w(TAG,msg);      throw new IllegalArgumentException(msg);    }    if (conn == null) {      throw new NullPointerException("connection is null");    }    if (decProviderCountLocked(conn,null,null,stable)) {      updateOomAdjLocked();    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW:    getOwnedMembersRaw().clear();  getOwnedMembersRaw().addAll((Collection<? extends N4MemberDeclaration>)newValue);return;case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPING_STRATEGY:setTypingStrategy((TypingStrategy)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isTo(WordToken token){  return token.equals(to);}  }
class C{  public int handlerPc(int nth){  ExceptionTableEntry e=(ExceptionTableEntry)entries.get(nth);  return e.handlerPc;}  }
class C{  Object processNCNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    AVT avt=null;    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (!XML11Char.isXML11ValidNCName(value))) {        handleError(handler,XSLTErrorResources.INVALID_NCNAME,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (!XML11Char.isXML11ValidNCName(value)) {      handleError(handler,XSLTErrorResources.INVALID_NCNAME,new Object[]{name,value},null);      return null;    }    return value;  }}  }
class C{  public PrimitiveDefaultValue(PrimitiveType type,String defaultOverride){  this(type);  this.defaultOverride=Optional.ofNullable(defaultOverride);}  }
class C{  public final void init(KeyStore ks,char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {  spiImpl.engineInit(ks,password);}  }
class C{  public void show(){  this.setDialogContainer(dialogContainer);  animation.play();}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  @After public void tearDown(){  population=null;}  }
class C{  public void listaNivelesArchivoExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  goListaNivelesArchivo(request,mappings);}  }
class C{  public static double load(){  return ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage();}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return;    }    if (len >= nChars) {      flushBuffer();      out.write(cbuf,off,len);      return;    }    int b=off, t=off + len;    while (b < t) {      int d=min(nChars - nextChar,t - b);      System.arraycopy(cbuf,b,cb,nextChar,d);      b+=d;      nextChar+=d;      if (nextChar >= nChars)       flushBuffer();    }  }}  }
class C{  protected void resetAttribute(){  super.resetAttribute();  missing=false;  malformed=false;}  }
class C{  public int hashCode(){  int retval=0;  for (int i=1; i < rawCertInfo.length; i++) {    retval+=rawCertInfo[i] * i;  }  return (retval);}  }
class C{  private void sincronizarBase(){  listaEmprestimo=ControleDAO.getBanco().getEmprestimoDAO().listar();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.396 -0400",hash_original_method="836D9E0757F7D4B08E6ED6703657F196",hash_generated_method="07A902D5D01E26BFBD47BF579A749696") protected boolean isJdk13LumberjackAvailable(){  return isLogLibraryAvailable("Jdk13Lumberjack","org.apache.commons.logging.impl.Jdk13LumberjackLogger");}  }
class C{  public static void main(String[] argv){  Debug.init();  boolean Dchum=false;  ArgParser ap=new ArgParser("MakeToc");  ap.add("absolute","Use absolute paths in A.TOC - Use for multiple RPF Directories");  ap.add("boundary","Maximum frames on a boundary edge (Default 200)",1);  ap.add("dchum","DCHUM files are included.");  ap.add("log","Pathname of log file to list A.TOC creation output.",1);  ap.add("output","Path to directory to place A.TOC file. (Default is current directory)",1);  ap.add("producer","The producer of the frames (Default DMAAC).  Five letter code.",1);  ap.add("verbose","Print out progress");  ap.add("extraverbose","Print out ALL progress");  ap.add("nw","Don't put up swing progress window (Use this if you are getting weird exceptions)");  ap.add("paths","Space separated paths to RPF directory or directories.  Should be last.  If more than one directory is listed, then absolute paths are used in the A.TOC file.",ArgParser.TO_END);  if (!ap.parse(argv)) {    ap.printUsage();    System.exit(0);  }  String outputFile="." + File.separator + RpfTocHandler.RPF_TOC_FILE_NAME;  String arg[];  arg=ap.getArgValues("output");  if (arg != null) {    outputFile=arg[0] + File.separator + RpfTocHandler.RPF_TOC_FILE_NAME;  }  arg=ap.getArgValues("log");  if (arg != null) {    String logfile=arg[0];    Debug.directOutput(logfile,false,true);    Debug.output("MakeToc: Creating log at " + logfile + " at "+ java.util.Calendar.getInstance().getTime());  }  arg=ap.getArgValues("dchum");  if (arg != null) {    Dchum=true;  }  arg=ap.getArgValues("verbose");  if (arg != null) {    Debug.put("maketoc");  }  arg=ap.getArgValues("extraverbose");  if (arg != null) {    Debug.put("maketoc");    Debug.put("maketocdetail");  }  String[] paths=null;  arg=ap.getArgValues("paths");  if (arg != null) {    paths=arg;  } else {    paths=ap.getRest();  }  if (paths == null || paths.length == 0) {    Debug.output("MakeToc: need a path to start searching for RPF frames.");    System.exit(0);  }  MakeToc mt=new MakeToc();  arg=ap.getArgValues("nw");  if (arg == null) {    try {      mt.addProgressListener(new com.bbn.openmap.gui.ProgressListenerGauge("RPF A.TOC File Creation"));    } catch (    RuntimeException re) {    }  }  boolean argFlagged=false;  arg=ap.getArgValues("absolute");  if (arg != null) {    argFlagged=true;  }  arg=ap.getArgValues("producer");  if (arg != null) {    mt.setProducer(arg[0]);  }  if ((paths != null && paths.length > 1) || argFlagged) {    Debug.output("MakeToc:  creating A.TOC with absolute path names.");    mt.setRelativeFramePaths(false);  }  arg=ap.getArgValues("boundary");  int max_side=DEFAULT_MAX_SIDE;  if (arg != null) {    try {      max_side=Integer.parseInt(arg[0]);      if (max_side <= DEFAULT_MAX_SIDE) {        Debug.output("MakeToc: Boundary number specified (" + max_side + ") is too small.  Using default of 200.");        max_side=DEFAULT_MAX_SIDE;      }    } catch (    NumberFormatException nfe) {      Debug.output("MakeToc: Tried to pass a bogus integer (" + arg[0] + ") as a boundary limit.  Using default of 200.");      max_side=DEFAULT_MAX_SIDE;    }  }  mt.setMaxSide(max_side);  mt.fireProgressUpdate(ProgressEvent.START,"Searching for RPF frames",0,100);  paths=mt.searchForRpfFiles(paths);  try {    mt.create(paths,outputFile,Dchum);  } catch (  MakeTocException mte) {    Debug.error("Problem creating A.TOC file: \n" + mte.getMessage());  }  System.exit(0);}  }
class C{  public synchronized int addPeers(List<Peer> newPeers){  int nonDuplicateCount=0;  for (  Peer p : newPeers) {    if (addPeer(p)) {      nonDuplicateCount++;    }  }  return nonDuplicateCount;}  }
class C{  public static void main(String[] argv){  runFilter(new RemoveMisclassified(),argv);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.925 -0500",hash_original_method="225E7940DFC3CDF11421E5A31C692555",hash_generated_method="E9F4A4633FFFB712F3C91CCD1598E010") public X509Name(String dirName,X509NameEntryConverter converter){  this(DefaultReverse,DefaultLookUp,dirName,converter);}  }
class C{  @Override public Properties trackDownloadComplete(String videoId,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonProperties(videoId,Values.VIDEO_DOWNLOADED);  aEvent.setCourseContext(courseId,unitUrl,Values.DOWNLOAD_MODULE);  tracker.track(Events.VIDEO_DOWNLOADED,aEvent.properties);  return aEvent.properties;}  }
class C{  private int minCollisions(){  int min=table.tableSize;  for (  int i : intHashTable) {    if (i < min) {      min=i;    }  }  return min;}  }
class C{  protected synchronized void releaseProxy(){  proxy=null;  proxyDistributionMask=0;}  }
class C{  private boolean validateNodeMessage(HadoopProcessDescriptor desc,HadoopMessage msg){  if (!nodeDesc.processId().equals(desc.processId())) {    log.warning("Received process control request from unknown process (will ignore) [desc=" + desc + ", msg="+ msg+ ']');    return false;  }  return true;}  }
class C{  private static int checkTypeArgument(final String signature,int pos){  char c=getChar(signature,pos);  if (c == '*') {    return pos + 1;  } else   if (c == '+' || c == '-') {    pos++;  }  return checkFieldTypeSignature(signature,pos);}  }
class C{  public Orange newOrange(String name) throws RemoteException {  try {    String threadName=Thread.currentThread().getName();    logger.log(Level.FINEST,threadName + ": " + toString()+ ".newOrange("+ name+ "): BEGIN");    Orange orange=new OrangeImpl(name);    logger.log(Level.FINEST,threadName + ": " + toString()+ ".newOrange("+ name+ "): END");    return orange;  } catch (  RuntimeException e) {    logger.log(Level.SEVERE,toString() + ".newOrange():",e);    throw e;  }}  }
class C{  private static float lerp(float a,float b,float t){  return a + (b - a) * t;}  }
class C{  public void build(String type,String owner) throws AndroidAgentException {  device=new Device();  Device.EnrolmentInfo info=new Device.EnrolmentInfo();  info.setOwner(owner);  info.setOwnership(type.equals(Constants.OWNERSHIP_BYOD) ? Device.EnrolmentInfo.OwnerShip.BYOD : Device.EnrolmentInfo.OwnerShip.COPE);  device.setEnrolmentInfo(info);  getInfo();}  }
class C{  @Override public void onDestroy(){  if (mWebView != null) {    mWebView.destroy();    mWebView=null;  }  super.onDestroy();}  }
class C{  public static double euclideanNorm(double[] x1,double[] x2){  double distance=0.0;  for (int d=0; d < x1.length; d++) {    double difference=x1[d] - x2[d];    distance+=difference * difference;  }  return Math.sqrt(distance);}  }
class C{  public String create(){  append("CREATE NEW ROW button pressed");  clear();  List<CustomerBean> list=getCustomers();  if (list != null) {    CustomerBean customer=new CustomerBean();    list.add(customer);    int index=data.getRowIndex();    data.setRowIndex(list.size() - 1);    created.setSelected(true);    data.setRowIndex(index);  }  scroll(list.size());  return (null);}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length() + 3];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t') {      buf[p++]=c;    }  }  while ((p % 4) != 0) {    buf[p++]='0';  }  return decode(buf,0,p);}  }
class C{  public static void registerMeasure(int measureType,String measureName,Class<? extends DistanceMeasure> measureClass){  String[] newTypeNames=new String[MEASURE_ARRAYS[measureType].length + 1];  System.arraycopy(MEASURE_ARRAYS[measureType],0,newTypeNames,0,MEASURE_ARRAYS[measureType].length);  newTypeNames[newTypeNames.length - 1]=measureName;  MEASURE_ARRAYS[measureType]=newTypeNames;  Class[] newTypeClasses=new Class[MEASURE_CLASS_ARRAYS[measureType].length + 1];  System.arraycopy(MEASURE_CLASS_ARRAYS[measureType],0,newTypeClasses,0,MEASURE_CLASS_ARRAYS[measureType].length);  newTypeClasses[newTypeClasses.length - 1]=measureClass;  MEASURE_CLASS_ARRAYS[measureType]=newTypeClasses;}  }
class C{  public void remove(String organizationId) throws ServerException {  requireNonNull(organizationId,"Required non-null organization id");  organizationDao.remove(organizationId);}  }
class C{  public void writeEmptyElement(String localName) throws XMLStreamException {  if (_currentEle != null && _currentEle.getState() == ELEMENT_STARTTAG_OPEN) {    closeStartTag();  }  _currentEle=new Element(_currentEle,localName,true);  openStartTag();  _writer.write(localName);}  }
class C{  public static SparseBitmap createFromSortedData(final int... bitsToSet){  return new SparseBitmap(EWAHCompressedBitmap.bitmapOf(bitsToSet));}  }
class C{  public synchronized void freeInstance(Object obj){  freeStack.add(obj);}  }
class C{  private Button createButton(Composite owner,String label,int style){  Button newButton=new Button(owner,style);  newButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  newButton.setText(label);  return newButton;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected Delimiter changeDelimiterIfNecessary(String line,Delimiter delimiter){  return delimiter;}  }
class C{  public KeyedValueComparator(KeyedValueComparatorType type,SortOrder order){  ParamChecks.nullNotPermitted(type,"type");  ParamChecks.nullNotPermitted(order,"order");  this.type=type;  this.order=order;}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  public COperandTreeNode(final int nodeId,final int type,final String value,final INaviReplacement replacement,final List<IReference> references,final SQLProvider provider,final TypeManager typeManager,final TypeInstanceContainer instanceContainer){  this.provider=Preconditions.checkNotNull(provider,"IE02212: Provider argument can not be null");  Preconditions.checkNotNull(value,"IE00214: Value can not be null");  this.references=new ArrayList<IReference>(Preconditions.checkNotNull(references,"IE02211: References argument can not be null"));  id=nodeId;  for (  final IReference reference : references) {    Preconditions.checkNotNull(reference,"IE00215: Invalid reference in reference list");  }  Preconditions.checkNotNull(typeManager,"Type manager can not be null.");  Preconditions.checkNotNull(instanceContainer,"Type instance container can not be null");  initValue(type,value);  if (expressionValue == null) {    throw new IllegalArgumentException(String.format("IE00216: Unknown operand value '%s'",value));  }  this.replacement=replacement;  if (replacement != null) {    replacement.addListener(listener);    displayStyle=OperandDisplayStyle.OFFSET;  }  instanceContainer.addListener(typeInstanceContainerListener);}  }
class C{  public static void doInvalidates(){  Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  for (int i=0; i < TOTAL_PUTS; i++) {    try {      region1.invalidate("key-" + i);    } catch (    Exception e) {      fail("Test failed due to unexpected exception during INVALIDATESs : " + e);    }  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (!isSummary()) {    checkElements();    checkTemplateTable();  }  if (newRecord) {    StringBuffer sb=new StringBuffer("INSERT INTO AD_TreeNodeCMS " + "(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, " + "AD_Tree_ID, Node_ID, Parent_ID, SeqNo) "+ "VALUES (").append(getAD_Client_ID()).append(",0, 'Y', SysDate, 0, SysDate, 0,").append(getAD_Tree_ID()).append(",").append(get_ID()).append(", 0, 999)");    int no=DB.executeUpdate(sb.toString(),get_TrxName());    if (no > 0)     log.fine("#" + no + " - TreeType=CMS"); else     log.warning("#" + no + " - TreeType=CMS");    return no > 0;  }  return success;}  }
class C{  public StateEdit(StateEditable anObject,String name){  super();  init(anObject,name);}  }
class C{  private void executeDownload(String[] args) throws IOException, ServiceException, DocumentListException {  if (args.length == 3) {    String docType=documentList.getResourceIdPrefix(args[1]);    if (docType.equals("spreadsheet")) {      String format=documentList.getDownloadFormat(args[1],getTypeFromFilename(args[2]));      documentList.downloadSpreadsheet(args[1],args[2],format);    } else     if (docType.equals("presentation")) {      String format=documentList.getDownloadFormat(args[1],getTypeFromFilename(args[2]));      documentList.downloadPresentation(args[1],args[2],format);    } else     if (docType.equals("document")) {      String format=documentList.getDownloadFormat(args[1],getTypeFromFilename(args[2]));      documentList.downloadDocument(args[1],args[2],format);    } else {      MediaContent mc=(MediaContent)documentList.getDocsListEntry(args[1]).getContent();      String fileExtension=mc.getMimeType().getSubType();      URL exportUrl=new URL(mc.getUri());      String requestedFormat=args[2].substring(args[2].lastIndexOf(".") + 1);      if (!requestedFormat.equals(fileExtension)) {        String[] formatWarning={"Warning: " + mc.getMimeType().getMediaType() + " cannot be downloaded as a "+ requestedFormat+ ". Using ."+ fileExtension+ " instead."};        printMessage(formatWarning);      }      String newFilePath=args[2].substring(0,args[2].lastIndexOf(".") + 1) + fileExtension;      documentList.downloadFile(exportUrl,newFilePath);    }  } else {    printMessage(COMMAND_HELP_DOWNLOAD);  }}  }
class C{  public void load(Element element,Object o){  LayoutEditor p=(LayoutEditor)o;  String name=element.getAttribute("ident").getValue();  double x=0.0;  double y=0.0;  try {    x=element.getAttribute("xcen").getFloatValue();    y=element.getAttribute("ycen").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert levelxing center  attribute");  }  LevelXing l=new LevelXing(name,new Point2D.Double(x,y),p);  Attribute a=element.getAttribute("blocknameac");  if (a != null) {    l.tBlockNameAC=a.getValue();  }  a=element.getAttribute("blocknamebd");  if (a != null) {    l.tBlockNameBD=a.getValue();  }  a=element.getAttribute("connectaname");  if (a != null) {    l.connectAName=a.getValue();  }  a=element.getAttribute("connectbname");  if (a != null) {    l.connectBName=a.getValue();  }  a=element.getAttribute("connectcname");  if (a != null) {    l.connectCName=a.getValue();  }  a=element.getAttribute("connectdname");  if (a != null) {    l.connectDName=a.getValue();  }  a=element.getAttribute("signalaname");  if (a != null) {    l.setSignalAName(a.getValue());  }  a=element.getAttribute("signalbname");  if (a != null) {    l.setSignalBName(a.getValue());  }  a=element.getAttribute("signalcname");  if (a != null) {    l.setSignalCName(a.getValue());  }  a=element.getAttribute("signaldname");  if (a != null) {    l.setSignalDName(a.getValue());  }  try {    x=element.getAttribute("xa").getFloatValue();    y=element.getAttribute("ya").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert levelxing a coords attribute");  }  l.setCoordsA(new Point2D.Double(x,y));  try {    x=element.getAttribute("xb").getFloatValue();    y=element.getAttribute("yb").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert levelxing b coords attribute");  }  l.setCoordsB(new Point2D.Double(x,y));  if (element.getChild("signalAMast") != null) {    String mast=element.getChild("signalAMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalAMast(mast);    }  }  if (element.getChild("signalBMast") != null) {    String mast=element.getChild("signalBMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalBMast(mast);    }  }  if (element.getChild("signalCMast") != null) {    String mast=element.getChild("signalCMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalCMast(mast);    }  }  if (element.getChild("signalDMast") != null) {    String mast=element.getChild("signalDMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalDMast(mast);    }  }  if (element.getChild("sensorA") != null) {    String sensor=element.getChild("sensorA").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorAName(sensor);    }  }  if (element.getChild("sensorB") != null) {    String sensor=element.getChild("sensorB").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorBName(sensor);    }  }  if (element.getChild("sensorC") != null) {    String sensor=element.getChild("sensorC").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorCName(sensor);    }  }  if (element.getChild("sensorD") != null) {    String sensor=element.getChild("sensorD").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorDName(sensor);    }  }  p.xingList.add(l);}  }
class C{  public Spot(final StendhalRPZone zone,final int x,final int y){  this.zone=zone;  this.x=x;  this.y=y;}  }
class C{  protected static PreparedStatement prepareStatement(ReviewDb db,String sql) throws SQLException {  return ((JdbcSchema)db).getConnection().prepareStatement(sql);}  }
class C{  public static int mutatorRendezvous(String name,int expected){  try {    Clock.stop();    return model.mutatorRendezvous(name,expected);  }  finally {    Clock.start();  }}  }
class C{  public boolean isShowLegendItem(){  return mShowLegendItem;}  }
class C{  protected long calculateStunHarvestRTO(){  return Math.max(100,calculateTa() * 2 * countHostCandidates());}  }
class C{  public static void reset(View v){  v.setTranslationX(0f);  v.setTranslationY(0f);  v.setTranslationZ(0f);  v.setScaleX(1f);  v.setScaleY(1f);  v.setAlpha(1f);}  }
class C{  public boolean contains(char c){  final int i=c >> 6;  return i < _mapping.length ? (_mapping[i] & (1L << (c & 63))) != 0 : false;}  }
class C{  public void addFile(String path) throws IOException {  File newFile=new File(path);  if (!newFile.exists()) {    throw new IOException("Could not add file to project: " + newFile.getAbsolutePath());  }  if (DelphiUtils.acceptFile(newFile.getAbsolutePath())) {    files.add(newFile);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void resolvePrefixTables() throws TransformerException {  setPrefixTable(null);  if (null != this.m_declaredPrefixes) {    StylesheetRoot stylesheet=this.getStylesheetRoot();    int n=m_declaredPrefixes.size();    for (int i=0; i < n; i++) {      XMLNSDecl decl=(XMLNSDecl)m_declaredPrefixes.get(i);      String prefix=decl.getPrefix();      String uri=decl.getURI();      if (null == uri)       uri="";      boolean shouldExclude=excludeResultNSDecl(prefix,uri);      if (null == m_prefixTable)       setPrefixTable(new ArrayList());      NamespaceAlias nsAlias=stylesheet.getNamespaceAliasComposed(uri);      if (null != nsAlias) {        decl=new XMLNSDecl(nsAlias.getStylesheetPrefix(),nsAlias.getResultNamespace(),shouldExclude);      } else       decl=new XMLNSDecl(prefix,uri,shouldExclude);      m_prefixTable.add(decl);    }  }  ElemTemplateElement parent=this.getParentNodeElem();  if (null != parent) {    List prefixes=parent.m_prefixTable;    if (null == m_prefixTable && !needToCheckExclude()) {      setPrefixTable(parent.m_prefixTable);    } else {      int n=prefixes.size();      for (int i=0; i < n; i++) {        XMLNSDecl decl=(XMLNSDecl)prefixes.get(i);        boolean shouldExclude=excludeResultNSDecl(decl.getPrefix(),decl.getURI());        if (shouldExclude != decl.getIsExcluded()) {          decl=new XMLNSDecl(decl.getPrefix(),decl.getURI(),shouldExclude);        }        addOrReplaceDecls(decl);      }    }  } else   if (null == m_prefixTable) {    setPrefixTable(new ArrayList());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void rewriteStackLocations(){  ESPOffset=getFrameFixedSize() + WORDSIZE;  Register ESP=((PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet()).getESP();  boolean seenReturn=false;  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.isReturn()) {      seenReturn=true;      continue;    }    if (s.isBranch()) {      moveESPBefore(s,0);      continue;    }    if (s.operator() == BBEND) {      if (seenReturn) {        seenReturn=false;        ESPOffset=0;      } else {        moveESPBefore(s,0);      }      continue;    }    if (s.operator() == ADVISE_ESP) {      ESPOffset=MIR_UnaryNoRes.getVal(s).asIntConstant().value;      continue;    }    if (s.operator() == REQUIRE_ESP) {      moveESPBefore(s,MIR_UnaryNoRes.getVal(s).asIntConstant().value);      continue;    }    if (s.operator() == YIELDPOINT_PROLOGUE || s.operator() == YIELDPOINT_BACKEDGE || s.operator() == YIELDPOINT_EPILOGUE) {      moveESPBefore(s,0);      continue;    }    if (s.operator() == IA32_MOV) {      rewriteMoveInstruction(s);    }    if (s.operator() == IA32_POP) {      ESPOffset+=WORDSIZE;    }    for (Enumeration<Operand> ops=s.getOperands(); ops.hasMoreElements(); ) {      Operand op=ops.nextElement();      if (op instanceof StackLocationOperand) {        StackLocationOperand sop=(StackLocationOperand)op;        int offset=sop.getOffset();        if (sop.isFromTop()) {          offset=FPOffset2SPOffset(offset);        }        offset-=ESPOffset;        byte size=sop.getSize();        MemoryOperand M=MemoryOperand.BD(new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD),Offset.fromIntSignExtend(offset),size,null,null);        s.replaceOperand(op,M);      } else       if (op instanceof MemoryOperand) {        MemoryOperand M=op.asMemory();        if ((M.base != null && M.base.getRegister() == ESP) || (M.index != null && M.index.getRegister() == ESP)) {          M.disp=M.disp.minus(ESPOffset);        }      }    }    if (s.operator() == IA32_PUSH) {      ESPOffset-=WORDSIZE;    }  }}  }
class C{  private static XmlGlobal toXmlGlobal(String value,String get,String set,SimplyAttribute[] attributes,Class<?>[] classes,String[] excluded){  XmlGlobal xmlGlobal=new XmlGlobal();  if (!isEmpty(value))   xmlGlobal.value=new XmlTargetAttribute(value);  if (!isEmpty(get))   xmlGlobal.value.get=get;  if (!isEmpty(set))   xmlGlobal.value.set=set;  if (!isEmpty(attributes)) {    xmlGlobal.attributes=new ArrayList<XmlTargetAttribute>();    for (    SimplyAttribute attribute : attributes)     xmlGlobal.attributes.add(new XmlTargetAttribute(attribute));  }  if (!isEmpty(classes)) {    xmlGlobal.classes=new ArrayList<XmlTargetClass>();    for (    Class<?> clazz : classes)     xmlGlobal.classes.add(new XmlTargetClass(clazz.getName()));  }  if (!isEmpty(excluded)) {    xmlGlobal.excluded=new ArrayList<XmlExcludedAttribute>();    for (    String attribute : excluded)     xmlGlobal.excluded.add(new XmlExcludedAttribute(attribute));  }  return xmlGlobal;}  }
class C{  void handleServiceConnected(){  Log.d(TAG,"handleServiceConnected()");  if (!mBoundToService) {    Log.d(TAG,"Dropping startUi() in handleServiceConnected() because no longer bound");    return;  }  try {    mService.registerCallback(mFaceUnlockCallback);  } catch (  RemoteException e) {    Log.e(TAG,"Caught exception connecting to Face Unlock: " + e.toString());    mService=null;    mBoundToService=false;    mIsRunning=false;    return;  }  if (mFaceUnlockView != null) {    IBinder windowToken=mFaceUnlockView.getWindowToken();    if (windowToken != null) {      mKeyguardScreenCallback.userActivity(0);      int[] position;      position=new int[2];      mFaceUnlockView.getLocationInWindow(position);      startUi(windowToken,position[0],position[1],mFaceUnlockView.getWidth(),mFaceUnlockView.getHeight());    } else {      Log.e(TAG,"windowToken is null in handleServiceConnected()");    }  }}  }
class C{  public int compareTo(ChargeLog otherChargeLog){  if (startChargingTime > otherChargeLog.getStartChargingTime()) {    return 1;  } else   if (startChargingTime < otherChargeLog.getStartChargingTime()) {    return -1;  } else {    log.error("A car cannot charge using the same starting time twice...");    System.exit(-1);    return 0;  }}  }
class C{  public void showDocumentation(){  System.out.println("\nAvailable Commands:\n\n");  int i=1;  for (  Method elem : type.getMethods()) {    if (Modifier.isStatic(elem.getModifiers())) {      if (elem.isAnnotationPresent(CommandIgnore.class))       continue;      printMethodSignature(i,elem);      i++;    }  }}  }
class C{  public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){  if (getMaxKilobits(drive) == -1)   return null;  int stored=getAmountStored(drive,stack);  int amountGiven=Math.min(amountWanted,stored);  if (amountGiven > 0) {    setAmountStored(drive,stack,stored - amountGiven);    stack.stackSize+=amountGiven;    markDirty(drive);  }  return stack;}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.399 -0500",hash_original_method="448A5F7926670D54885C01A1388DB100",hash_generated_method="19F13777886CC7C0DB1DF14622F244BF") public static boolean compare(String a,String b){  return compare(a,b,false);}  }
class C{  private PlacemarkType createPlacemark(final String stopid,final CountSimComparison csc,final double relativeError,final int timestep,String countsType){  StringBuffer stringBuffer=new StringBuffer();  PlacemarkType placemark=kmlObjectFactory.createPlacemarkType();  stringBuffer.delete(0,stringBuffer.length());  stringBuffer.append(STOP);  stringBuffer.append(stopid);  placemark.setDescription(createPlacemarkDescription(stopid,csc,relativeError,timestep,countsType));  StringBuffer name=new StringBuffer();  if (countsType.equals("board")) {    name.append("B: ");  } else {    name.append("A: ");  }  if (this.stopID2lineIdMap.get(stopid) != null) {    for (    String line : this.stopID2lineIdMap.get(stopid)) {      name.append(line + " ");    }  } else {    log.warn(stopid + " is not served by any line!?");  }  if (this.writePlacemarkName == true) {    placemark.setName(name.toString());  }  return placemark;}  }
class C{  default boolean isStarted(){  return false;}  }
class C{  public static void cursorLongToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getLong(index));  }}  }
class C{  private double piHat1(int indices[],int v[],SemIm semIm){  double stdE[]=new double[indices.length];  double stdU[]=new double[indices.length];  double coeff[]=new double[indices.length];  Node etaNode=semIm.getSemPm().getGraph().getNode("eta");  double varEta=semIm.getParamValue(etaNode,etaNode);  double stdEta=Math.sqrt(semIm.getParamValue(etaNode,etaNode));  for (int i=0; i < indices.length; i++) {    Node uNode=semIm.getSemPm().getGraph().getNode("xi" + i);    Node uParent=null, uError=null;    for (Iterator<Node> it=semIm.getSemPm().getGraph().getParents(uNode).iterator(); it.hasNext(); ) {      Node parent=it.next();      if (parent.getNodeType() == NodeType.LATENT) {        uParent=parent;      } else {        uError=parent;      }    }    if (i == 0) {      coeff[i]=1.;    } else {      coeff[i]=semIm.getParamValue(uParent,uNode);    }    stdE[i]=Math.sqrt(semIm.getParamValue(uError,uError));    stdU[i]=Math.sqrt(coeff[i] * coeff[i] * varEta + semIm.getParamValue(uError,uError));  }  double l=0.;  for (int t=0; t < GHY.length; t++) {    double tValue=GHW[t];    for (int i=0; i < indices.length; i++) {      int numValues=this.values[indices[i]].length;      if (v[i] == 0) {        tValue*=ProbUtils.normalCdf((this.thresholds[indices[i]][0] * stdU[i] - coeff[i] * GHY[t] * stdEta) / stdE[i]);      } else       if (v[i] == numValues - 1) {        tValue*=(1. - ProbUtils.normalCdf((this.thresholds[indices[i]][numValues - 2] * stdU[i] - coeff[i] * GHY[t] * stdEta) / stdE[i]));      } else {        tValue*=ProbUtils.normalCdf((this.thresholds[indices[i]][v[i]] * stdU[i] - coeff[i] * GHY[t] * stdEta) / stdE[i]) - ProbUtils.normalCdf((this.thresholds[indices[i]][v[i] - 1] * stdU[i] - coeff[i] * GHY[t] * stdEta) / stdE[i]);      }    }    l+=tValue;  }  return l;}  }
class C{  public int[] intersection(int[] nums1,int[] nums2){  if (nums1.length > nums2.length)   intersection(nums2,nums1);  Set<Integer> set=new HashSet<>(nums1.length);  for (  int n : nums1) {    set.add(n);  }  Set<Integer> intersect=new HashSet<>(nums1.length);  for (  int n : nums2) {    if (set.contains(n)) {      intersect.add(n);    }  }  int[] result=new int[intersect.size()];  int i=0;  for (  Integer num : intersect) {    result[i++]=num;  }  return result;}  }
class C{  public void test_HASSTMT_readWriteTx() throws Exception {  doInsertbyURL("POST",packagePath + "test_estcard.ttl");  assertTrue(m_repo.hasStatement(null,RDFS.LABEL,null,false));  final long mutationCount=m_repo.remove(new RemoveOp(null,RDFS.LABEL,null));  assertEquals(2,mutationCount);  assertFalse(m_repo.hasStatement(null,RDFS.LABEL,null,false));}  }
class C{  public void close(){  mGeolocSharingCache.clear();  if (sLogger.isActivated()) {    sLogger.info("Geoloc sharing service API is closed");  }}  }
class C{  @Deprecated public boolean isFillBelowLine(){  return mFillBelowLine.size() > 0;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public <T extends DataObject>T deserialize(Class<T> clazz,Row<String,CompositeColumnName> row,IndexCleanupList cleanupList){  return deserialize(clazz,row,cleanupList,null);}  }
class C{  @Override protected Void doInBackground(Void... voids){  HttpsURLConnection con=null;  InputStream inputStream=null;  FileOutputStream outputStream=null;  try {    con=NetCipher.getHttpsURLConnection(fileURL);    int responseCode=con.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_OK) {      fileSize=con.getContentLength();      inputStream=new BufferedInputStream(con.getInputStream());      outputStream=new FileOutputStream(saveFilePath);      int bufferSize=8192;      int downloaded=0;      int bytesRead=-1;      byte[] buffer=new byte[bufferSize];      while ((bytesRead=inputStream.read(buffer)) != -1) {        outputStream.write(buffer,0,bytesRead);        downloaded+=bytesRead;        if (downloaded % 50000 < bufferSize) {          publishProgress(downloaded);        }      }      publishProgress(bufferSize);    } else {      Log.i(TAG,"No file to download. Server replied HTTP code: " + responseCode);    }  } catch (  IOException e) {    Log.e(TAG,"No file to download. Server replied HTTP code: ",e);    e.printStackTrace();  } finally {    try {      if (outputStream != null) {        outputStream.close();      }      if (inputStream != null) {        inputStream.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (con != null) {      con.disconnect();    }  }  return null;}  }
class C{  public void clearTransactions(int fromHeight){  lock.lock();  try {    if (fromHeight == 0) {      unspent.clear();      spent.clear();      pending.clear();      dead.clear();      transactions.clear();    } else {      throw new UnsupportedOperationException();    }  }  finally {    lock.unlock();  }}  }
class C{  public static Location createLocation(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return locationConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public static void v(String msg){  if (BuildConfig.DEBUG)   android.util.Log.v(TAG,buildMessage(msg));}  }
class C{  private ParsePosition next(final ParsePosition pos){  pos.setIndex(pos.getIndex() + 1);  return pos;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.STATECHART__SCOPES:    getScopes().clear();  return;case SGraphPackage.STATECHART__NAMESPACE:setNamespace(NAMESPACE_EDEFAULT);return;case SGraphPackage.STATECHART__REGIONS:getRegions().clear();return;case SGraphPackage.STATECHART__NAME:setName(NAME_EDEFAULT);return;case SGraphPackage.STATECHART__DOCUMENTATION:setDocumentation(DOCUMENTATION_EDEFAULT);return;case SGraphPackage.STATECHART__DOMAIN_ID:setDomainID(DOMAIN_ID_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public final boolean isBracketMatchingEnabled(){  return bracketMatchingEnabled;}  }
class C{  protected final IMocksControl createMockControl(){  IMocksControl mockControl=EasyMock.createControl();  assertTrue("Adding mock control failed",mockControls.add(mockControl));  return mockControl;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.639 -0400",hash_original_method="A3922F798A699BD1261828ED58232695",hash_generated_method="E31C392EAAE382AF74C455E2DB2BCA76") public void connectProfile(BluetoothAdapter adapter,BluetoothDevice device,int profile,String methodName){  if (methodName == null) {    methodName=String.format("connectProfile(profile=%d, device=%s)",profile,device);  }  int mask=(ConnectProfileReceiver.STATE_CONNECTING_FLAG | ConnectProfileReceiver.STATE_CONNECTED_FLAG);  long start=-1;  if (!adapter.isEnabled()) {    fail(String.format("%s bluetooth not enabled",methodName));  }  if (!adapter.getBondedDevices().contains(device)) {    fail(String.format("%s device not paired",methodName));  }  BluetoothProfile proxy=connectProxy(adapter,profile);  assertNotNull(proxy);  ConnectProfileReceiver receiver=getConnectProfileReceiver(device,profile,mask);  int state=proxy.getConnectionState(device);switch (state) {case BluetoothProfile.STATE_CONNECTED:    removeReceiver(receiver);  return;case BluetoothProfile.STATE_CONNECTING:mask=0;break;case BluetoothProfile.STATE_DISCONNECTED:case BluetoothProfile.STATE_DISCONNECTING:start=System.currentTimeMillis();if (profile == BluetoothProfile.A2DP) {assertTrue(((BluetoothA2dp)proxy).connect(device));} else if (profile == BluetoothProfile.HEADSET) {assertTrue(((BluetoothHeadset)proxy).connect(device));} else if (profile == BluetoothProfile.INPUT_DEVICE) {assertTrue(((BluetoothInputDevice)proxy).connect(device));}break;default :removeReceiver(receiver);fail(String.format("%s invalid state: state=%d",methodName,state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < CONNECT_DISCONNECT_PROFILE_TIMEOUT) {state=proxy.getConnectionState(device);if (state == BluetoothProfile.STATE_CONNECTED && (receiver.getFiredFlags() & mask) == mask) {long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));} else {writeOutput(String.format("%s completed",methodName));}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",methodName,state,BluetoothProfile.STATE_CONNECTED,firedFlags,mask));}  }
class C{  static StringBuilder newStringBuilderForCollection(int size){  checkNonnegative(size,"size");  return new StringBuilder((int)Math.min(size * 8L,Ints.MAX_POWER_OF_TWO));}  }
class C{  public static RoleDefinition addRoleDefinition(String roleIdentifier,TechnicalProduct tProd,DataService mgr) throws NonUniqueBusinessKeyException {  return addRoleDefinition(roleIdentifier,tProd,mgr,null);}  }
class C{  public boolean hasPostalAddress(){  return hasExtension(PostalAddress.class);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.443 -0400",hash_original_method="EF9CB7E560194B697D530C283E40B2D2",hash_generated_method="77F0C979A8BAD2A8318EE5127D64E6AC") public Object encode(Object obj) throws EncoderException {  if (!(obj instanceof String)) {    throw new EncoderException("DoubleMetaphone encode parameter is not of type String");  }  return doubleMetaphone((String)obj);}  }
class C{  public void edit(Cast c) throws CannotCompileException {}  }
class C{  public ModelException(String msg){  super(msg);}  }
class C{  public MiniDrawer withEnableProfileClick(boolean enableProfileClick){  this.mEnableProfileClick=enableProfileClick;  return this;}  }
class C{  private boolean renderFrame(Canvas canvas,int frameNumber,int frameMonotonicNumber){  CloseableReference<Bitmap> bitmapReference=mAnimatedDrawableBackend.getBitmapForFrame(frameNumber);  if (bitmapReference != null) {    canvas.drawBitmap(bitmapReference.get(),0f,0f,mPaint);    if (mLastDrawnFrame != null) {      mLastDrawnFrame.close();    }    if (mIsRunning && frameMonotonicNumber > mLastDrawnFrameMonotonicNumber) {      int droppedFrames=frameMonotonicNumber - mLastDrawnFrameMonotonicNumber - 1;      mAnimatedDrawableDiagnostics.incrementDrawnFrames(1);      mAnimatedDrawableDiagnostics.incrementDroppedFrames(droppedFrames);      if (droppedFrames > 0) {        FLog.v(TAG,"(%s) Dropped %d frames",mLogId,droppedFrames);      }    }    mLastDrawnFrame=bitmapReference;    mLastDrawnFrameNumber=frameNumber;    mLastDrawnFrameMonotonicNumber=frameMonotonicNumber;    FLog.v(TAG,"(%s) Drew frame %d",mLogId,frameNumber);    return true;  }  return false;}  }
class C{  @Override @Deprecated public Note createNote(Note note,LinkedNotebook linkedNotebook) throws EDAMUserException, EDAMSystemException, TException, EDAMNotFoundException {  AsyncLinkedNoteStoreClient sharedNoteStore=getClientFactory().createLinkedNoteStoreClient(linkedNotebook);  SharedNotebook sharedNotebook=sharedNoteStore.getAsyncClient().getClient().getSharedNotebookByAuth(sharedNoteStore.getAuthenticationToken());  note.setNotebookGuid(sharedNotebook.getNotebookGuid());  sharedNoteStore.getAsyncClient().getClient().createNote(sharedNoteStore.getAuthenticationToken(),note);  return note;}  }
class C{  private void initializeProximityBrowser(){  if ((m_rawView.getType() == ViewType.Native) && (m_rawView.getNodeCount() >= m_settings.getProximitySettings().getProximityBrowsingActivationThreshold())) {    initializeProximityBrowserNative();  } else   if ((m_rawView.getType() == ViewType.NonNative) && m_settings.getProximitySettings().getProximityBrowsing()) {    initializeProximityBrowserNonNative();  }  if ((m_rawView.getType() == ViewType.Native) && (visibleNodeCount() >= m_settings.getLayoutSettings().getAutolayoutDeactivationThreshold())) {    m_settings.getLayoutSettings().setAutomaticLayouting(false);  }  if (m_settings.getLayoutSettings().getAutomaticLayouting()) {    doLayout();  }}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public void doHandle(ConfigEvent event,Context context,AmazonConfig configClient) throws IOException {  JsonNode invokingEvent=new ObjectMapper().readTree(event.getInvokingEvent());  failForIncompatibleEventTypes(invokingEvent);  Evaluation evaluation=new Evaluation().withComplianceResourceId(getResourceId(invokingEvent)).withComplianceResourceType(getResourceType(invokingEvent)).withOrderingTimestamp(getCiCapturedTime(invokingEvent)).withComplianceType(evaluateCompliance(event));  doPutEvaluations(configClient,event,evaluation);}  }
class C{  @Override protected void statement_executeErrorAfter(StatementProxy statement,String sql,Throwable error){  String sqlMsg="{conn-" + statement.getConnectionProxy().getId() + ", "+ stmtId(statement)+ "} execute error. "+ getExcuteSql((PreparedStatementProxy)statement);  statementLogError(sqlMsg,error);  saveMsg2Cache(sqlMsg);}  }
class C{  public Boolean isCheckBeacon(){  return checkBeacon;}  }
class C{  @SuppressLint("InlinedApi") private void createCameraSource(boolean autoFocus,boolean useFlash){  Context context=getApplicationContext();  BarcodeDetector barcodeDetector=new BarcodeDetector.Builder(context).build();  BarcodeTrackerFactory barcodeFactory=new BarcodeTrackerFactory(mGraphicOverlay);  barcodeDetector.setProcessor(new MultiProcessor.Builder<>(barcodeFactory).build());  if (!barcodeDetector.isOperational()) {    Log.w(TAG,"Detector dependencies are not yet available.");    IntentFilter lowstorageFilter=new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);    boolean hasLowStorage=registerReceiver(null,lowstorageFilter) != null;    if (hasLowStorage) {      Toast.makeText(this,R.string.low_storage_error,Toast.LENGTH_LONG).show();      Log.w(TAG,getString(R.string.low_storage_error));    }  }  CameraSource.Builder builder=new CameraSource.Builder(getApplicationContext(),barcodeDetector).setFacing(CameraSource.CAMERA_FACING_BACK).setRequestedPreviewSize(1600,1024).setRequestedFps(15.0f);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    builder=builder.setFocusMode(autoFocus ? Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE : null);  }  mCameraSource=builder.setFlashMode(useFlash ? Camera.Parameters.FLASH_MODE_TORCH : null).build();}  }
class C{  public boolean isLongClickable(){  return false;}  }
class C{  public String toString(){  return image;}  }
class C{  public static void divideInPlace(float[] vector,float val){  int length=vector.length;  for (int i=0; i < length; i++) {    vector[i]/=val;  }}  }
class C{  public Command prepareLocal(String sql){  if (closed) {    throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"session closed");  }  Command command;  if (queryCacheSize > 0) {    if (queryCache == null) {      queryCache=SmallLRUCache.newInstance(queryCacheSize);    } else {      command=queryCache.get(sql);      if (command != null && command.canReuse()) {        command.reuse();        return command;      }    }  }  Parser parser=new Parser(this);  command=parser.prepareCommand(sql);  if (queryCache != null) {    if (command.isCacheable()) {      queryCache.put(sql,command);    }  }  return command;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder("(");  buf.append(kind == LOCAL ? 'L' : 'S');  buf.append(num).append(" , ");  char tcode=(char)typeCode;  buf.append(tcode).append(" , ");  buf.append(valueType).append(" , ");  buf.append("0x").append(Long.toHexString(value.toLong())).append(" , ");  buf.append(operand).append(")");  if (VM.BuildFor32Addr && (tcode == LongTypeCode)) {    buf.append("(").append(_otherHalf.valueType).append(" , ");    buf.append("0x").append(Integer.toHexString(_otherHalf.value.toInt())).append(")");  }  return buf.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_CLASSIFIER_DECLARATION;}  }
class C{  protected void toAppendNVPTo(final StringBuilder nvps,final String name,final String value){  if (nvps.length() > 0) {    nvps.append(AND);  }  nvps.append(name).append(EQ).append(value);}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 15:{        addToken(start,zzStartRead - 1,Token.PREPROCESSOR);        addEndToken(INTERNAL_COMPILER_DIRECTIVE);        return firstToken;      }case 35:    break;case 4:{    addToken(Token.PREPROCESSOR);  }case 36:break;case 5:{addNullToken();return firstToken;}case 37:break;case 27:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 38:break;case 6:{addToken(Token.WHITESPACE);}case 39:break;case 21:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 40:break;case 20:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 41:break;case 26:{addToken(Token.RESERVED_WORD);}case 42:break;case 16:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.PREPROCESSOR);}case 43:break;case 9:{addToken(Token.SEPARATOR);}case 44:break;case 17:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_COMPILER_DIRECTIVE2);return firstToken;}case 45:break;case 2:{addToken(Token.IDENTIFIER);}case 46:break;case 18:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 47:break;case 25:{start=zzMarkedPos - 2;yybegin(EOL_COMMENT);}case 48:break;case 30:{addToken(Token.FUNCTION);}case 49:break;case 7:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 50:break;case 14:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_MLC2);return firstToken;}case 51:break;case 32:{addToken(Token.DATA_TYPE);}case 52:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 53:break;case 31:{addToken(Token.LITERAL_BOOLEAN);}case 54:break;case 22:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 55:break;case 34:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 56:break;case 29:{start=zzMarkedPos - 3;yybegin(COMPILER_DIRECTIVE2);}case 57:break;case 24:{start=zzMarkedPos - 2;yybegin(MLC2);}case 58:break;case 33:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 59:break;case 19:{addToken(Token.ERROR_NUMBER_FORMAT);}case 60:break;case 28:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 61:break;case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.COMMENT_MULTILINE);}case 62:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 63:break;case 10:{addToken(Token.OPERATOR);}case 64:break;case 8:{start=zzMarkedPos - 1;yybegin(MLC);}case 65:break;case 23:{start=zzMarkedPos - 2;yybegin(COMPILER_DIRECTIVE);}case 66:break;case 11:{}case 67:break;case 12:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 68:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case COMPILER_DIRECTIVE:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_COMPILER_DIRECTIVE);return firstToken;}case 438:break;case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 439:break;case YYINITIAL:{addNullToken();return firstToken;}case 440:break;case COMPILER_DIRECTIVE2:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);addEndToken(INTERNAL_COMPILER_DIRECTIVE2);return firstToken;}case 441:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 442:break;case MLC2:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_MLC2);return firstToken;}case 443:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static byte[] fileToBytes(String fileName) throws Exception {  return IOUtils.toByteArray(newQueryInputStream(fileName));}  }
class C{  public TemporaryLookupException(){  super();}  }
class C{  public boolean isTrue(){  return value == true;}  }
class C{  static public void assertGroupNotContains(ViewGroup parent,View child){  final int count=parent.getChildCount();  assertTrue("Child count should be >= 0",count >= 0);  for (int i=0; i < count; i++) {    if (parent.getChildAt(i) == child) {      assertTrue("child " + child + " is found in parent",false);    }  }}  }
class C{  public int readUnsignedExpGolombCodedInt(){  return readExpGolombCodeNum();}  }
class C{  private String generatePolicyKey(ExportMaskPolicy policy){  Set<String> sortedPolicyNames=(policy.getTierPolicies() != null && policy.getTierPolicies().isEmpty()) ? new TreeSet<>(policy.getTierPolicies()) : Collections.<String>emptySet();  String sortedPolicyNamesString=Joiner.on(';').join(sortedPolicyNames);  return String.format("type=%s,ig=%s,localTier=%s,policies=%s,cascaded=%s,simple=%s,hostIObw=%d,hostIOPs=%d",policy.getExportType(),policy.getIgType(),policy.getLocalTierPolicy(),sortedPolicyNamesString,policy.isCascadedIG(),policy.isSimpleMask(),policy.getHostIOLimitBandwidth(),policy.getHostIOLimitIOPs());}  }
class C{  private boolean conjContainsExists(OpApplNode node){  ExprOrOpArgNode[] conjuncts=node.getArgs();  for (int i=0; i < conjuncts.length; i++) {    if (conjuncts[i] instanceof OpApplNode) {      OpApplNode curNode=(OpApplNode)conjuncts[i];      if ((curNode.getOperator().getKind() == ASTConstants.UserDefinedOpKind) && ((OpDefNode)curNode.getOperator()).getBody() instanceof OpApplNode) {        curNode=(OpApplNode)((OpDefNode)curNode.getOperator()).getBody();      }      if (curNode.getOperator() instanceof OpDefNode) {        UniqueString opId=((OpDefNode)curNode.getOperator()).getName();        String opName=opId.toString();        if ((opId == ASTConstants.OP_be) || (opId == ASTConstants.OP_ue) || (((opId == ASTConstants.OP_cl) || opName.equals("\\land")) && conjContainsExists(curNode))) {          return true;        }      }    }  }  return false;}  }
class C{  public EventObject(Object source){  if (source == null) {    throw new IllegalArgumentException("null source");  }  this.source=source;}  }
class C{  public ProcessExecutor(boolean redirectStdErr){  this.redirectStdErr=true;}  }
class C{  public int remove(int index){  checkRange(index);  int oldval=array[index];  int numtomove=size - index - 1;  if (numtomove > 0) {    System.arraycopy(array,index + 1,array,index,numtomove);  }  size--;  return oldval;}  }
