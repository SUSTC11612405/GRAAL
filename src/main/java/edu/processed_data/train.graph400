class C{  public static boolean isSSN(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedSSN=stripCharsInBag(s,SSNDelimiters);  return (isInteger(normalizedSSN) && normalizedSSN.length() == digitsInSocialSecurityNumber);}  }
class C{  private Event filter(Event event){  if (tags.isEmpty() && ttl == 0) {    return event;  }  final String host=event.getHost() != null ? event.getHost() : this.host;  final Map<String,String> mergedTags=Maps.newHashMap(tags);  mergedTags.putAll(event.getTags());  final Set<String> mergedRiemannTags=Sets.newHashSet(riemannTags);  mergedRiemannTags.addAll(event.getRiemannTags());  final Date time=event.getTime() != null ? event.getTime() : new Date();  final Long ttl=event.getTtl() != 0 ? event.getTtl() : this.ttl;  return new Event(event.getKey(),event.getValue(),time,ttl,event.getState(),event.getDescription(),host,mergedRiemannTags,mergedTags);}  }
class C{  public String addStepsForAddingVolumesToRG(Workflow workflow,String waitFor,URI cgURI,List<URI> volumeListToAdd,String replicationGroup,String taskId) throws InternalException {  log.info(String.format("addStepsForAddingVolumesToRG %s",replicationGroup));  List<Volume> volumesToAdd=ControllerUtils.queryVolumesByIterativeQuery(_dbClient,volumeListToAdd);  if (!volumesToAdd.isEmpty()) {    Volume firstVolume=volumesToAdd.get(0);    if (!ControllerUtils.isVmaxVolumeUsing803SMIS(firstVolume,_dbClient) && !ControllerUtils.isVnxVolume(firstVolume,_dbClient)) {      return waitFor;    }    URI storage=firstVolume.getStorageController();    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    List<Volume> existingRGVolumes=ControllerUtils.getVolumesPartOfRG(storage,replicationGroup,_dbClient);    if (existingRGVolumes.isEmpty()) {      return waitFor;    }    if (checkIfCGHasCloneReplica(existingRGVolumes)) {      log.info("Adding clone steps for adding volumes");      Set<String> repGroupNames=ControllerUtils.getCloneReplicationGroupNames(existingRGVolumes,_dbClient);      for (      String repGroupName : repGroupNames) {        waitFor=addClonesToReplicationGroupStep(workflow,waitFor,storageSystem,volumesToAdd,repGroupName,cgURI);      }    }    if (checkIfCGHasMirrorReplica(existingRGVolumes)) {      log.info("Adding mirror steps for adding volumes");      Set<String> repGroupNames=ControllerUtils.getMirrorReplicationGroupNames(existingRGVolumes,_dbClient);      for (      String repGroupName : repGroupNames) {        waitFor=addMirrorToReplicationGroupStep(workflow,waitFor,storageSystem,volumesToAdd,repGroupName,cgURI);      }    }    List<BlockSnapshotSession> sessions=getSnapSessionsForCGVolume(existingRGVolumes.get(0));    boolean isExistingCGSnapShotAvailable=checkIfCGHasSnapshotReplica(existingRGVolumes);    boolean isExistingCGSnapSessionAvailable=sessions != null && !sessions.isEmpty();    boolean isVMAX3ExistingVolume=existingRGVolumes.get(0).isVmax3Volume(_dbClient);    if (isVMAX3ExistingVolume) {      if (isVMAX3VolumeHasSessionOnly(isExistingCGSnapSessionAvailable,isExistingCGSnapShotAvailable)) {        log.info("Existing CG only has Snap Session, adding snap session steps for adding volumes");        processSnapSessions(existingRGVolumes,workflow,waitFor,volumesToAdd);      } else       if (isVMAX3VolumeHasSnapshotOnly(isExistingCGSnapSessionAvailable,isExistingCGSnapShotAvailable)) {        Set<String> snapGroupNames=ControllerUtils.getSnapshotReplicationGroupNames(existingRGVolumes,_dbClient);        for (        String snapGroupName : snapGroupNames) {          log.info("Existing CG only has Snapshots, adding snapshot steps for existing snap group {} adding volumes",snapGroupName);          waitFor=addSnapshotsToReplicationGroupStep(workflow,waitFor,storageSystem,volumesToAdd,snapGroupName,cgURI);        }      } else       if (isVMAX3VolumeHasSessionAndSnapshot(isExistingCGSnapSessionAvailable,isExistingCGSnapShotAvailable)) {        log.info("Existing CG has both Sessions and linked targets, adding snapshot and session steps");        processSnapSessionsAndLinkedTargets(existingRGVolumes,workflow,waitFor,volumesToAdd,cgURI);      }    } else     if (isExistingCGSnapShotAvailable) {      log.info("Adding snapshot steps for adding volumes");      Set<String> snapGroupNames=ControllerUtils.getSnapshotReplicationGroupNames(existingRGVolumes,_dbClient);      for (      String snapGroupName : snapGroupNames) {        waitFor=addSnapshotsToReplicationGroupStep(workflow,waitFor,storageSystem,volumesToAdd,snapGroupName,cgURI);      }    }  }  return waitFor;}  }
class C{  private void testAdvancePastNextSyncMarkerAt(int position,int size) throws IOException {  byte sentinel=(byte)0xFF;  byte[] marker=new byte[]{1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6};  byte[] haystack=createHaystack(marker,position,size);  PushbackInputStream stream=new PushbackInputStream(new ByteArrayInputStream(haystack),marker.length);  if (position + marker.length < size) {    haystack[position + marker.length]=sentinel;    assertEquals(position + marker.length,AvroReader.advancePastNextSyncMarker(stream,marker));    assertEquals(sentinel,(byte)stream.read());  } else {    assertEquals(size,AvroReader.advancePastNextSyncMarker(stream,marker));    assertEquals(-1,stream.read());  }}  }
class C{  public static void initSamRg(CFlags flags){  initSamRg(flags,"ILLUMINA",CommonFlagCategories.REPORTING);}  }
class C{  protected final InternalAggregations bucketAggregations(long bucket) throws IOException {  final InternalAggregation[] aggregations=new InternalAggregation[subAggregators.length];  for (int i=0; i < subAggregators.length; i++) {    aggregations[i]=subAggregators[i].buildAggregation(bucket);  }  return new InternalAggregations(Arrays.asList(aggregations));}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public final synchronized Object removeEnvVariable(final String varName){  return m_envVarTbl.remove(varName);}  }
class C{  private long zigzagToLong(long n){  return (n >>> 1) ^ -(n & 1);}  }
class C{  public double distance(Coordinate p){  return CGAlgorithms.distancePointLine(p,p0,p1);}  }
class C{  public static List<String> prefix(String prefix,List<String> lines){  List<String> result=new ArrayList<>(lines.size());  for (  String line : lines) {    result.add(prefix + line);  }  return result;}  }
class C{  public SslContextFactory createContextFactory(){  if (!isSSLMode()) {    return null;  }  SslContextFactory factory=new SslContextFactory(false);  if (getKeyStore() != null)   factory.setKeyStorePath(getKeyStore());  if (getKeyStorePassword() != null)   factory.setKeyStorePassword(getKeyStorePassword());  factory.setNeedClientAuth(isClientAuthMode());  if (isClientAuthMode()) {    if (getTrustStore() != null)     factory.setTrustStorePath(getTrustStore());    if (getTrustStorePassword() != null)     factory.setTrustStorePassword(getTrustStorePassword());  }  return factory;}  }
class C{  void checkPrintable(final char[] chars,final int begin,final int end){  for (int i=begin; i < end; i++) {    final char c=chars[i];    if (isPrintable(c)) {      continue;    }    int position=this.index + this.buffer.length() - this.pointer + i;    throw new ReaderException(name,position,c,"special characters are not allowed");  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private Set<TestFitnessFunction> filterSupportedGoals(Set<TestFitnessFunction> goals){  return goals.stream().filter(null).collect(Collectors.toSet());}  }
class C{  protected FinalizableWeakReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  @Override public void validateAllocator(){  if (topSize < 0) {    return;  }  traverseAndCheck();  for (int i=0; i < smallBins.length; i++) {    checkSmallBin(i);  }  for (int i=0; i < treeBins.length; i++) {    checkTreeBin(i);  }}  }
class C{  public List<URI> refreshConnectionStatusForAllVPlexManagementServers(){  List<URI> activeMgmntServers=new ArrayList<URI>();  List<StorageProvider> vplexMnmgtServers=CustomQueryUtility.getActiveStorageProvidersByInterfaceType(_dbClient,StorageProvider.InterfaceType.vplex.name());  for (  StorageProvider vplexMnmgtServer : vplexMnmgtServers) {    try {      VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexMnmgtServer,_dbClient);      client.verifyConnectivity();      activeMgmntServers.add(vplexMnmgtServer.getId());      vplexMnmgtServer.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.toString());    } catch (    Exception e) {      _log.warn("Can't connect to VPLEX management server {}",vplexMnmgtServer.getIPAddress());      vplexMnmgtServer.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.toString());    } finally {      _dbClient.updateObject(vplexMnmgtServer);    }  }  return activeMgmntServers;}  }
class C{  public static int allocateAppWidgetIdForSystem(int hostId,int userId){  checkCallerIsSystem();  try {    if (sService == null) {      bindService();    }    Context systemContext=(Context)ActivityThread.currentActivityThread().getSystemContext();    String packageName=systemContext.getPackageName();    return sService.allocateAppWidgetId(packageName,hostId,userId);  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  CacheResourceCore createCore(String path,String name,int type) throws IOException {  CacheResourceCore value=new CacheResourceCore(type,path,name);  getCache().put(toKey(path,name),value,null,null);  return value;}  }
class C{  public static <U,W>AtomicReferenceFieldUpdater<U,W> newAtomicReferenceFieldUpdater(Class<U> tClass,Class<W> vClass,String fieldName){  try {    return new UnsafeAtomicReferenceFieldUpdater<>(JUnsafe.getUnsafe(),tClass,fieldName);  } catch (  Throwable t) {    return AtomicReferenceFieldUpdater.newUpdater(tClass,vClass,fieldName);  }}  }
class C{  public void openLink(SVGAElement elt){}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  reach(env,vset);  CheckContext destctx=(CheckContext)new CheckContext(ctx,this).getContinueContext(lbl);  if (destctx != null) {switch (destctx.node.op) {case FOR:case DO:case WHILE:      if (destctx.frameNumber != ctx.frameNumber) {        env.error(where,"branch.to.uplevel",lbl);      }    destctx.vsContinue=destctx.vsContinue.join(vset);  break;default :env.error(where,"invalid.continue");}} else {if (lbl != null) {env.error(where,"label.not.found",lbl);} else {env.error(where,"invalid.continue");}}CheckContext exitctx=ctx.getTryExitContext();if (exitctx != null) {exitctx.vsTryExit=exitctx.vsTryExit.join(vset);}return DEAD_END;}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source){  zoomRangeAxes(factor,info,source,false);}  }
class C{  public static final JIPFunctor create(final String strName,final JIPCons params){  if (params == null)   return new JIPFunctor(new Functor(new StringBuilder(strName).append("/0").toString(),null)); else {    final ConsCell cons=(ConsCell)params.getTerm();    return new JIPFunctor(new Functor(new StringBuilder(strName).append('/').append(cons.getHeight()).toString(),cons));  }}  }
class C{  public void add(Integer line,String propertyName,int code,Object... args){  String message=Messages.INSTANCE.getParseMessage(code,args);  add(line,propertyName,message);}  }
class C{  private long toSubnet(InetAddress address){  if (address instanceof Inet4Address) {    return toInt(address) & (int)subnetMask;  } else {    return toLong(address) & subnetMask;  }}  }
class C{  public SimpleConstant(String name,String stringValue,String annotation,boolean invisible){  this(name,stringValue,annotation);  this.invisible=invisible;}  }
class C{  public BinaryFormatException(String binaryString){  super(binaryString + " is not a binary string");  this.binaryString=binaryString;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.035 -0500",hash_original_method="A7E5E6D8B0352E19D2CAFB651CA3375F",hash_generated_method="6CBDC8D77E8A0CBB5C04485ADF00FF9B") public static void fill(long[] array,int start,int end,long value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public InternalFunctionException(String msg){  super(msg);}  }
class C{  public Output compileString(String string,URI inputPath,URI outputPath,Options options) throws CompilationException {  StringContext context=new StringContext(string,inputPath,outputPath,options);  return compile(context);}  }
class C{  public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  public final double doOperation() throws OperatorFailedException {  final double scale=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));  int goingUp=0, goingDown=0;  if (upParameter != null) {    for (    Scalable.Default up : upParameter) {      goingUp+=up.scaleAllAndNotify(scale,-1);    }  }  if (downParameter != null) {    for (    Scalable.Default dn : downParameter) {      goingDown+=dn.scaleAllAndNotify(1.0 / scale,-1);    }  }  return (goingUp - goingDown - 2) * Math.log(scale);}  }
class C{  public static KnowledgeBoxModel serializableInstance(){  return new KnowledgeBoxModel(new KnowledgeBoxInput[]{GraphWrapper.serializableInstance()},new Parameters());}  }
class C{  public CFMetaData(String keyspace,String name,ColumnFamilyType type,CellNameType comp){  this(keyspace,name,type,comp,null);}  }
class C{  public boolean isToolDoneAfterCreation(){  return isToolDoneAfterCreation;}  }
class C{  public void addResource(Class<?> cls){  rsrcs.add(cls);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes){  this(reader,separator,quotechar,escape,line,strictQuotes,CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE);}  }
class C{  public static void fillMatrix_3D(int n1,int n2,int n3,float[] m){  Random r=new Random(2);  int sliceStride=n2 * n3;  int rowStride=n3;  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      for (int k=0; k < n3; k++) {        m[i * sliceStride + j * rowStride + k]=r.nextFloat();      }    }  }}  }
class C{  public double scannumber(int base){  if (base < 2 || base > 36)   return Double.NaN;  int i=m_offset, j=m_offset + m_length;  while (i < j && m_bytes[i] == ' ')   ++i;  while (i < j && m_bytes[j - 1] == ' ')   --j;  if (i >= j)   return Double.NaN;  return scanlong(base,i,j);}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder("OsrTypeInfo(");  for (int i=0, n=localTypeCodes.length; i < n; i++) {    buf.append((char)localTypeCodes[i]);  }  buf.append(",");  for (int i=0, n=stackTypeCodes.length; i < n; i++) {    buf.append((char)stackTypeCodes[i]);  }  buf.append(")");  return buf.toString();}  }
class C{  public CompareResult<InetAddress> compareDnses(LinkProperties target){  CompareResult<InetAddress> result=new CompareResult<InetAddress>();  result.removed=new ArrayList<InetAddress>(mDnses);  result.added.clear();  if (target != null) {    for (    InetAddress newAddress : target.getDnses()) {      if (!result.removed.remove(newAddress)) {        result.added.add(newAddress);      }    }  }  return result;}  }
class C{  public DoubleMatrix[] jblas_symmetricGeneralizedEigenvectors(double[][] B){  return org.jblas.Eigen.symmetricGeneralizedEigenvectors(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  public KmlGroundOverlay(GroundOverlay overlay){  this();  GeoPoint p=overlay.getPosition();  GeoPoint pN=p.destinationPoint(overlay.getHeight() / 2,0.0f);  GeoPoint pS=p.destinationPoint(overlay.getHeight() / 2,180.0f);  GeoPoint pE=p.destinationPoint(overlay.getWidth() / 2,90.0f);  GeoPoint pW=p.destinationPoint(overlay.getWidth() / 2,-90.0f);  mCoordinates=new ArrayList<GeoPoint>(2);  mCoordinates.add(new GeoPoint(pN.getLatitude(),pW.getLongitude()));  mCoordinates.add(new GeoPoint(pS.getLatitude(),pE.getLongitude()));  mIcon=((BitmapDrawable)overlay.getImage()).getBitmap();  mRotation=-overlay.getBearing();  mColor=255 - Color.alpha((int)(overlay.getTransparency() * 255));  mVisibility=overlay.isEnabled();}  }
class C{  private static final void provision(GeoTimeSerie gts,Object value,long location,long elevation){  if (TYPE.UNDEFINED != gts.type && gts.values < gts.ticks.length) {    if (GeoTimeSerie.NO_LOCATION == location && GeoTimeSerie.NO_ELEVATION == elevation) {      return;    }    if (null == gts.locations && GeoTimeSerie.NO_LOCATION != location) {      gts.locations=new long[gts.ticks.length];      Arrays.fill(gts.locations,GeoTimeSerie.NO_LOCATION);    }    if (null == gts.elevations && GeoTimeSerie.NO_ELEVATION != elevation) {      gts.elevations=new long[gts.ticks.length];      Arrays.fill(gts.elevations,GeoTimeSerie.NO_ELEVATION);    }    return;  } else   if (TYPE.UNDEFINED != gts.type) {    int newlen=gts.ticks.length + (int)Math.min(GeoTimeSerie.MAX_ARRAY_GROWTH,Math.max(GeoTimeSerie.MIN_ARRAY_GROWTH,gts.ticks.length * GeoTimeSerie.ARRAY_GROWTH_FACTOR));    if (newlen < gts.sizehint) {      newlen=gts.sizehint;    }    gts.ticks=Arrays.copyOf(gts.ticks,newlen);    if (null != gts.locations || GeoTimeSerie.NO_LOCATION != location) {      if (null == gts.locations) {        gts.locations=new long[gts.ticks.length];        Arrays.fill(gts.locations,GeoTimeSerie.NO_LOCATION);      } else {        gts.locations=Arrays.copyOf(gts.locations,gts.ticks.length);      }    }    if (null != gts.elevations || GeoTimeSerie.NO_ELEVATION != elevation) {      if (null == gts.elevations) {        gts.elevations=new long[gts.ticks.length];        Arrays.fill(gts.elevations,GeoTimeSerie.NO_ELEVATION);      } else {        gts.elevations=Arrays.copyOf(gts.elevations,gts.ticks.length);      }    }    if (TYPE.LONG == gts.type) {      gts.longValues=Arrays.copyOf(gts.longValues,gts.ticks.length);    } else     if (TYPE.DOUBLE == gts.type) {      gts.doubleValues=Arrays.copyOf(gts.doubleValues,gts.ticks.length);    } else     if (TYPE.STRING == gts.type) {      gts.stringValues=Arrays.copyOf(gts.stringValues,gts.ticks.length);    }  } else   if (TYPE.UNDEFINED == gts.type) {    if (null == gts.ticks) {      gts.ticks=new long[gts.sizehint > 0 ? gts.sizehint : GeoTimeSerie.MIN_ARRAY_GROWTH];    }    if (GeoTimeSerie.NO_LOCATION == location) {      gts.locations=null;    } else     if (null == gts.locations || gts.locations.length < gts.ticks.length) {      gts.locations=new long[gts.ticks.length];    }    if (GeoTimeSerie.NO_ELEVATION == elevation) {      gts.elevations=null;    } else     if (null == gts.elevations || gts.elevations.length < gts.ticks.length) {      gts.elevations=new long[gts.ticks.length];    }    if (value instanceof Boolean) {      gts.type=TYPE.BOOLEAN;      if (null == gts.booleanValues || gts.booleanValues.size() < gts.ticks.length) {        gts.booleanValues=new BitSet(gts.ticks.length);      }    } else     if (value instanceof Long || value instanceof Integer || value instanceof Short|| value instanceof Byte|| value instanceof BigInteger) {      gts.type=TYPE.LONG;      if (null == gts.longValues || gts.longValues.length < gts.ticks.length) {        gts.longValues=new long[gts.ticks.length];      }    } else     if (value instanceof Float || value instanceof Double || value instanceof BigDecimal) {      gts.type=TYPE.DOUBLE;      if (null == gts.doubleValues || gts.doubleValues.length < gts.ticks.length) {        gts.doubleValues=new double[gts.ticks.length];      }    } else     if (value instanceof String) {      gts.type=TYPE.STRING;      if (null == gts.stringValues || gts.stringValues.length < gts.ticks.length) {        gts.stringValues=new String[gts.ticks.length];      }    } else {      gts.type=TYPE.BOOLEAN;      gts.booleanValues=new BitSet(gts.ticks.length);    }  }}  }
class C{  public Color redf(float red){  return rgba(colorConvert(red),green(),blue(),alpha());}  }
class C{  public boolean hasSubAttributes(){  return subAttributes != null && !subAttributes.isEmpty();}  }
class C{  public static boolean isNotEmpty(final float[] array){  return array != null && array.length != 0;}  }
class C{  public void uncaughtException(Thread thread,Throwable exception){  try {    handleException(thread,exception);  } catch (  Throwable t) {    LOG.log(Level.SEVERE,"Failed to handle exception. Process halting",t);    Runtime.getRuntime().halt(1);  }}  }
class C{  public void load(ByteArrayBuffer buffer) throws IOException {synchronized (this) {    Source classPath=getClassPath();    buffer.clear();    int retry=3;    for (int i=0; i < retry; i++) {      long length=-1;      try (InputStream is=classPath.inputStream()){        length=classPath.length();        long lastModified=classPath.getLastModified();        if (length < 0)         throw new IOException("class loading failed because class file '" + classPath + "' does not have a positive length.  Possibly the file has been overwritten");        buffer.setLength((int)length);        int results=IoUtil.readAll(is,buffer.getBuffer(),0,(int)length);        if (results == length && length == classPath.length() && lastModified == classPath.getLastModified()) {          return;        }        log.warning(L.l("{0}: class file length mismatch expected={1} received={2}.  The class file may have been modified concurrently.",this,length,results));      }     }  }}  }
class C{  public void addZoomListener(ZoomListener listener,boolean onButtons,boolean onPinch){  if (onButtons) {    if (mZoomIn != null) {      mZoomIn.addZoomListener(listener);      mZoomOut.addZoomListener(listener);    }    if (onPinch) {      mTouchHandler.addZoomListener(listener);    }  }}  }
class C{  public void testDontTrackOpenResources() throws Exception {  Properties props=new Properties();  props.setProperty("dontTrackOpenResources","true");  Connection noTrackConn=null;  Statement noTrackStatement=null;  PreparedStatement noTrackPstmt=null;  ResultSet rs2=null;  try {    noTrackConn=getConnectionWithProps(props);    noTrackStatement=noTrackConn.createStatement();    noTrackPstmt=noTrackConn.prepareStatement("SELECT 1");    rs2=noTrackPstmt.executeQuery();    rs2.next();    this.rs=noTrackStatement.executeQuery("SELECT 1");    this.rs.next();    noTrackConn.close();    this.rs.getString(1);    rs2.getString(1);  }  finally {    if (rs2 != null) {      rs2.close();    }    if (noTrackStatement != null) {      noTrackStatement.close();    }    if (noTrackConn != null && !noTrackConn.isClosed()) {      noTrackConn.close();    }  }}  }
class C{  private WindowConfiguration(final String name){  this.name=name;}  }
class C{  public static boolean isClassResource(String resourceName){  return resourceName.endsWith(".class");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CODE_LANGS___ANONYMOUS_CODE_LANGS_11:    return ((InternalEList<?>)getAnonymous_codeLangs_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public RouteTracker(HttpRoute route){  this(route.getTargetHost(),route.getLocalAddress());}  }
class C{  private boolean isTreeSymbolEffectivelyFinalOrUnmodifiable(Tree tree){  Element elem=InternalUtils.symbol(tree);  ElementKind ek=elem.getKind();  return ek == ElementKind.PACKAGE || ek == ElementKind.CLASS || ek == ElementKind.METHOD || ElementUtils.isEffectivelyFinal(elem);}  }
class C{  public Fixture createFixture(FixtureDef def){  org.jbox2d.dynamics.FixtureDef fd=def.toJBox2d();  org.jbox2d.dynamics.Fixture f=body.createFixture(fd);  Fixture fixture=new Fixture(this,f);  fixtures.add(fixture);  world.fixtures.put(f,fixture);  return fixture;}  }
class C{  public CharCharMap(final int expected){  this(expected,DEFAULT_LOAD_FACTOR);}  }
class C{  public boolean isDestroyed(){  return dead;}  }
class C{  public synchronized String obfuscate(String str,SecretKey key,boolean createiv) throws ObfuscationException {  logger.debug("Obfuscator(" + this.shareName + ") Obfuscate(String, key): "+ str+ " with createiv=? "+ createiv);  String encryptedName=null;  if (cachedObfuscatedNames.containsKey(str)) {    encryptedName=cachedObfuscatedNames.get(str);  } else {    byte[] iv=createIV(str,key);    try {      encryptedName=encryptFileName(str,key,iv,zip,EncodingType.BASE64);    } catch (    InvalidKeyException|NoSuchAlgorithmException|NoSuchPaddingException|InvalidAlgorithmParameterException|IllegalBlockSizeException|BadPaddingException|IOException e) {      logger.error("Could not obfuscate string: " + str,e);      throw new ObfuscationException("Could not obfuscate string: " + str,e);    }    if (createiv) {      createIVFile(iv,encryptedName,key);      cachedObfuscatedNames.put(str,encryptedName);    }  }  logger.debug("Obfuscator(" + this.shareName + ") Obfuscate(String, key)-return: "+ encryptedName);  return encryptedName;}  }
class C{  public void testBug24706() throws Exception {  if (!versionMeetsMinimum(6,0)) {    return;  }  Properties props=new Properties();  props.setProperty("elideSetAutoCommits","true");  props.setProperty("logger","StandardLogger");  props.setProperty("profileSQL","true");  Connection c=null;  StandardLogger.startLoggingToBuffer();  try {    c=getConnectionWithProps(props);    c.setAutoCommit(true);    c.createStatement().execute("SELECT 1");    c.setAutoCommit(true);    c.setAutoCommit(false);    c.createStatement().execute("SELECT 1");    c.setAutoCommit(false);    String log=StandardLogger.getBuffer().toString();    int searchFrom=0;    int count=0;    int found=0;    while ((found=log.indexOf("SET autocommit=",searchFrom)) != -1) {      searchFrom=found + 1;      count++;    }    assertEquals(2,count);  }  finally {    StandardLogger.dropBuffer();    if (c != null) {      c.close();    }  }}  }
class C{  public void startGatherMode(SaxHandlerBase.GatheringElementType elem){  gatheringElement=elem;  gatherBuffer=new ArrayList();  gatherMode=true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static ServiceAccountJwtAccessCredentials fromJson(Map<String,Object> json,URI defaultAudience) throws IOException {  String clientId=(String)json.get("client_id");  String clientEmail=(String)json.get("client_email");  String privateKeyPkcs8=(String)json.get("private_key");  String privateKeyId=(String)json.get("private_key_id");  if (clientId == null || clientEmail == null || privateKeyPkcs8 == null || privateKeyId == null) {    throw new IOException("Error reading service account credential from JSON, " + "expecting  'client_id', 'client_email', 'private_key' and 'private_key_id'.");  }  return fromPkcs8(clientId,clientEmail,privateKeyPkcs8,privateKeyId,defaultAudience);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:49.521 -0500",hash_original_method="9D4F0360D229F71B4914DA14E59850F0",hash_generated_method="DF81E847F0CB6237B109B3D92602C5BF") public int sectorToBlock(int sectorIndex){  if (sectorIndex < 32) {    return sectorIndex * 4;  } else {    return 32 * 4 + (sectorIndex - 32) * 16;  }}  }
class C{  protected boolean isPrefix(String prefix,String string){  if (prefix == null || string == null || prefix.length() > string.length())   return false;  String start=string.substring(0,prefix.length());  return start.equalsIgnoreCase(prefix) || isCamelCaseMatching() && CharOperation.camelCaseMatch(prefix.toCharArray(),string.toCharArray());}  }
class C{  public static final ObjectName makeMBeanName(Class clazz,String name){  try {    return ObjectName.getInstance(makeSingletonName(clazz).toString() + ",name=" + name);  } catch (  MalformedObjectNameException x) {    final IllegalArgumentException iae=new IllegalArgumentException(String.valueOf(name),x);    throw iae;  }}  }
class C{  public static Builder builder(AcceptResponse response){  return new Builder(response);}  }
class C{  public static org.oscm.vo.VOUser convertToApi(org.oscm.internal.vo.VOUser oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOUser newVO=new org.oscm.vo.VOUser();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setOrganizationId(oldVO.getOrganizationId());  newVO.setUserId(oldVO.getUserId());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.UserAccountStatus.class));  newVO.setOrganizationRoles(EnumConverter.convertSet(oldVO.getOrganizationRoles(),org.oscm.types.enumtypes.OrganizationRoleType.class));  newVO.setUserRoles(EnumConverter.convertSet(oldVO.getUserRoles(),org.oscm.types.enumtypes.UserRoleType.class));  return newVO;}  }
class C{  public void removeAttribute(String name){  if (_stream != null)   _stream.removeAttribute(name);}  }
class C{  public ExtendedBufferedReader(Reader r,int bufSize){  super(r,bufSize);}  }
class C{  public Boolean isLogSubscription(){  return logSubscription;}  }
class C{  public double outsideDistance(final DistanceStyle distanceStyle,final double x,final double y,final double z){  return distanceStyle.computeDistance(this.point,x,y,z);}  }
class C{  public static void reportRamUsage(String measurementPoint){  logger.info("");  logger.info("Java VM RAM Usage " + measurementPoint);  logger.info(String.format("   %-20s %-15s%10s%10s%10s%10s","NAME","TYPE","COMMITTED","INIT","MAX","USED"));  for (int i=0; i < ramPoolType.length; i++) {    logger.info(String.format("   %-20s %-15s%10d MB%7d MB%7d MB%7d MB",ramPoolName[i],ramPoolType[i],ramPoolCommitted[i] / (2 << 20),ramPoolInit[i] / (2 << 20),ramPoolMax[i] / (2 << 20),ramPoolUsed[i] / (2 << 20)));  }  logger.info("");}  }
class C{  protected boolean hasLargeTotalResults(OptNode pn,ArrayList<String> resultVars,LocalVariableMap vars,boolean checkSize) throws DMLRuntimeException {  double totalSize=0;  PTaskPartitioner tp=PTaskPartitioner.valueOf(pn.getParam(ParamType.TASK_PARTITIONER));  int k=pn.getK();  long W=estimateNumTasks(tp,_N,k);  for (  String var : resultVars) {    Data dat=vars.get(var);    if (dat != null && dat instanceof MatrixObject) {      MatrixObject mo=(MatrixObject)vars.get(var);      long rows=mo.getNumRows();      long cols=mo.getNumColumns();      long nnz=mo.getNnz();      if (nnz > 0) {        totalSize+=W * OptimizerUtils.estimateSizeExactSparsity(rows,cols,1.0);      } else {        totalSize+=OptimizerUtils.estimateSizeExactSparsity(rows,cols,1.0);      }    }  }  return (totalSize >= _lm);}  }
class C{  @Override public void onTabReselected(TabLayout.Tab tab){}  }
class C{  private int calculateRecordSize(String partitionKey,String explicitHashKey,byte[] data){  int messageSize=0;  if (!this.partitionKeys.contains(partitionKey)) {    int pkLength=partitionKey.length();    messageSize+=1;    messageSize+=calculateVarintSize(pkLength);    messageSize+=pkLength;  }  if (!this.explicitHashKeys.contains(explicitHashKey)) {    int ehkLength=explicitHashKey.length();    messageSize+=1;    messageSize+=calculateVarintSize(ehkLength);    messageSize+=ehkLength;  }  long innerRecordSize=0;  innerRecordSize+=1;  innerRecordSize+=calculateVarintSize(this.partitionKeys.getPotentialIndex(partitionKey));  if (explicitHashKey != null) {    innerRecordSize+=1;    innerRecordSize+=calculateVarintSize(this.explicitHashKeys.getPotentialIndex(explicitHashKey));  }  innerRecordSize+=1;  innerRecordSize+=calculateVarintSize(data.length);  innerRecordSize+=data.length;  messageSize+=1;  messageSize+=calculateVarintSize(innerRecordSize);  messageSize+=innerRecordSize;  return messageSize;}  }
class C{  @Override public void openElement(String tagName) throws IOException {  ArrayList list=current.getChildren();  for (int i=0; i < list.size(); i++) {    XMLElement node=(XMLElement)list.get(i);    if (node.getName().equals(tagName)) {      stack.push(current);      current=node;      return;    }  }  throw new IOException("no such element:" + tagName);}  }
class C{  public TodolistObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public <T>void put(Class<T> type,PrefabValueFactory<T> factory){  if (type != null) {    cache.put(type,factory);  }}  }
class C{  @Inject public DefaultHistoryService(SystemConfiguration sysConfig){  super(null,sysConfig);}  }
class C{  public void deleteBucket(GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  public JobConf jobConf(){  return jobConf;}  }
class C{  public SQLTemplatesPage(final SQLEditorBase sqlEditor){  super(sqlEditor,sqlEditor.getViewer());  this.sqlEditor=sqlEditor;  IPageSite ps=new ProxyPageSite(sqlEditor.getSite());  init(ps);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_11:    return anonymous_constantDeclaration_1_1 != null && !anonymous_constantDeclaration_1_1.isEmpty();case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_21:  return anonymous_constantDeclaration_2_1 != null && !anonymous_constantDeclaration_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void assertEquals(int expected,int actual){  Assert.assertEquals(expected,actual);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:52.200 -0500",hash_original_method="CD9FBA57A59BA88E6E945379741E0233",hash_generated_method="9C12D3286368CC127062F658E5D732BE") public static Object fromIntValue(int value){  return BigInteger.valueOf(value).toByteArray();}  }
class C{  @Override protected void doWork(){  if (cs == CacheState.NOT_TRIED) {    updateCacheState();  }  if (!respondedToCallback) {    if (cs == CacheState.OK || cs == CacheState.FRESH) {      respondToCallbackWithCache();    } else     if (ns == NetworkState.NOT_TRIED) {      requestFromNetwork();      stWait(0,RequestTask.this);      return;    } else     if (ns == NetworkState.FAIL) {      if (cs != CacheState.CORRUPT_OR_MISSING) {        respondToCallbackWithCache();      } else {        cb.onFailure(networkFailRequest,networkFailException);        stExit();        return;      }    } else {      respondToCallbackWithResponse();    }  } else   if (ns == NetworkState.SUCCESS && !savedNetworkResponseToCache) {    saveNetworkResponseToCache();  } else {    stExit();    return;  }}  }
class C{  public Map<String,Object> write(final Schema schema,final Map<String,Object> propertySet){  return write(schema,propertySet,AUTO_TIMESTAMP_UNIQUE,null,null).asMap();}  }
class C{  public int readSectors(int sectorNumber,int numberSectors,byte[] buffer,int offset) throws IOException {  if (sectorNumber < 0 || (sectorNumber + numberSectors) > numSectors) {    Arrays.fill(buffer,offset,offset + numberSectors * sectorLength,(byte)0);    Emulator.log.warn(String.format("Sectors start=%d, end=%d out of ISO (numSectors=%d)",sectorNumber,sectorNumber + numberSectors,numSectors));    return numberSectors;  }  return sectorDevice.readSectors(sectorNumber,numberSectors,buffer,offset);}  }
class C{  private void fillIDValues(){  for (  X_I_Movement imove : getRecords(false,m_IsImportOnlyNoErrors)) {    imove.setAD_Org_ID(getID(MOrg.Table_Name,"Value = ?",new Object[]{imove.getOrgValue()}));    if (imove.getM_Product_ID() == 0)     imove.setM_Product_ID(getID(MProduct.Table_Name,"Value = ?",new Object[]{imove.getProductValue()}));    imove.setM_Locator_ID(getID(MLocator.Table_Name,"Value = ?",new Object[]{imove.getLocatorValue()}));    imove.setM_LocatorTo_ID(getID(MLocator.Table_Name,"Value = ?",new Object[]{imove.getLocatorToValue()}));    if (imove.getC_DocType_ID() == 0)     imove.setC_DocType_ID(getID(MDocType.Table_Name,"Name=?",new Object[]{imove.getDocTypeName()}));    if (imove.getC_BPartner_ID() == 0)     imove.setC_BPartner_ID(getID(MBPartner.Table_Name,"Value =?",new Object[]{imove.getBPartnerValue()}));    if (imove.getM_Shipper_ID() == 0)     imove.setM_Shipper_ID(getID(MShipper.Table_Name,"Name = ?",new Object[]{imove.getShipperName()}));    if (imove.getC_Project_ID() == 0)     imove.setC_Project_ID(getID(MProject.Table_Name,"Value = ?",new Object[]{imove.getProjectValue()}));    if (imove.getC_Campaign_ID() == 0)     imove.setC_Campaign_ID(getID(MCampaign.Table_Name,"Value = ?",new Object[]{imove.getCampaignValue()}));    if (imove.getAD_OrgTrx_ID() == 0)     imove.setAD_OrgTrx_ID(getID(MOrg.Table_Name,"Value = ?",new Object[]{imove.getOrgTrxValue()}));    imove.saveEx();    StringBuffer err=new StringBuffer("");    if (imove.getAD_Org_ID() <= 0)     err.append(" @AD_Org_ID@ @NotFound@,");    if (imove.getM_Product_ID() <= 0)     err.append(" @M_Product_ID@ @NotFound@,");    if (imove.getM_Locator_ID() <= 0)     err.append(" @M_Locator_ID@ @NotFound@,");    if (imove.getM_LocatorTo_ID() <= 0)     err.append(" @M_LocatorTo_ID@ @NotFound@,");    if (imove.getC_DocType_ID() <= 0)     err.append(" @C_DocType_ID@ @NotFound@,");    if (err.toString() != null && err.toString().length() > 0) {      notimported++;      imove.setI_ErrorMsg(Msg.parseTranslation(getCtx(),err.toString()));      imove.saveEx();    }  }}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public String generate(DIDLContent content) throws Exception {  return generate(content,false);}  }
class C{  protected void saveSessionData(HttpServletRequest request,UseCaseConf useCaseConf,Map persistFields){  HttpSession session=request.getSession(true);  session.setAttribute(Keys.J_USECASECONF,useCaseConf);  session.setAttribute(Keys.J_USERNAME,getName(request));  session.setAttribute(Keys.J_IDIOMA,IdiomaUtils.getInstance().getIdioma(request));  session.setAttribute(Keys.J_NUM_IDIOMA,IdiomaUtils.getInstance().getNumIdioma(request));  session.setAttribute(Keys.J_PERSISTFIELDS,persistFields);}  }
class C{  public void updateBackgroundWithDelay(URI uri){  mBackgroundURI=uri;  startBackgroundTimer();}  }
class C{  static public long unpackLong(byte[] ba){  return unpackLong(ba,0);}  }
class C{  @Override public Enumeration<URL> findResources(final String name) throws IOException {  if (name == null) {    return null;  }  ArrayList<URL> result=new ArrayList<URL>();  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    handler.findResources(name,result);  }  return Collections.enumeration(result);}  }
class C{  public void removeListeners(){  mAnimator.removeAllUpdateListeners();}  }
class C{  public LengthExpr newLengthExpr(Value op){  return new JLengthExpr(op);}  }
class C{  public static boolean hasParentType(Delegator delegator,String entityName,String primaryKey,String childType,String parentTypeField,String parentType){  GenericValue childTypeValue=null;  try {    childTypeValue=EntityQuery.use(delegator).from(entityName).where(primaryKey,childType).cache(true).queryOne();  } catch (  GenericEntityException e) {    Debug.logError("Error finding " + entityName + " record for type "+ childType,module);  }  if (childTypeValue != null) {    if (parentType.equals(childTypeValue.getString(primaryKey)))     return true;    if (childTypeValue.getString(parentTypeField) != null) {      if (parentType.equals(childTypeValue.getString(parentTypeField))) {        return true;      } else {        return hasParentType(delegator,entityName,primaryKey,childTypeValue.getString(parentTypeField),parentTypeField,parentType);      }    }  }  return false;}  }
class C{  public OMWarpingImage(OMScalingRaster omsr,GeoCoordTransformation transform){  if (omsr != null) {    ImageWarp iw=omsr.getImageWarp(transform);    if (iw != null) {      setWarp(iw);    }  }}  }
class C{  public static boolean isComplexScored(VcfRecord rec){  return rec.getInfo().keySet().contains("XRX");}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  @Override protected void initData(){}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target,int leg){  final Entity ae=game.getEntity(attackerId);  if (ae == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't attack from a null entity!");  }  if (!(ae instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Non-'Mechs can't kick.");  }  String impossible=PhysicalAttackAction.toHitIsImpossible(game,ae,target);  if (impossible != null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  IHex attHex=game.getBoard().getHex(ae.getPosition());  IHex targHex=game.getBoard().getHex(target.getPosition());  final int attackerElevation=ae.getElevation() + attHex.getLevel();  final int targetElevation=target.getElevation() + targHex.getLevel();  final int targetHeight=targetElevation + target.getHeight();  int mule=0;  int[] kickLegs=new int[2];  if (ae.entityIsQuad()) {    if ((leg == KickAttackAction.LEFTMULE) || (leg == KickAttackAction.RIGHTMULE)) {      kickLegs[0]=Mech.LOC_RLEG;      kickLegs[1]=Mech.LOC_LLEG;      mule=1;    } else {      kickLegs[0]=Mech.LOC_RARM;      kickLegs[1]=Mech.LOC_LARM;    }  } else {    kickLegs[0]=Mech.LOC_RLEG;    kickLegs[1]=Mech.LOC_LLEG;  }  final int legLoc=((leg == KickAttackAction.RIGHTMULE) || (leg == KickAttackAction.RIGHT)) ? kickLegs[0] : kickLegs[1];  ToHitData toHit;  if ((leg != KickAttackAction.RIGHT) && (leg != KickAttackAction.LEFT) && (leg != KickAttackAction.RIGHTMULE)&& (leg != KickAttackAction.LEFTMULE)) {    throw new IllegalArgumentException("Leg must be one of LEFT, RIGHT, LEFTMULE, or RIGHTMULE");  }  if (!(ae instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Non-mechs can't kick");  }  if (ae.isLocationBad(Mech.LOC_LLEG) || ae.isLocationBad(Mech.LOC_LLEG) || (ae.entityIsQuad() && (ae.isLocationBad(Mech.LOC_LARM) || ae.isLocationBad(Mech.LOC_RARM)))) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Leg missing");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_LLEG) || !ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_RLEG) || (ae.entityIsQuad() && (!ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_LARM) || !ae.hasWorkingSystem(Mech.ACTUATOR_HIP,Mech.LOC_RARM)))) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Hip destroyed");  }  for (  Mounted mounted : ae.getWeaponList()) {    if (mounted.isUsedThisRound() && (mounted.getLocation() == legLoc)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Weapons fired from leg this turn");    }  }  final int range=ae.getPosition().distance(target.getPosition());  if (target.isAirborneVTOLorWIGE()) {    if (targetElevation - attackerElevation != 0) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Target elevation not in range");    }  } else   if ((attackerElevation < targetElevation) || (attackerElevation > targetHeight)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target elevation not in range");  }  if ((0 != range) && (mule != 1) && !Compute.isInArc(ae.getPosition(),ae.getFacing(),target,Compute.ARC_FORWARD)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in arc");  }  if ((0 != range) && (mule == 1) && !Compute.isInArc(ae.getPosition(),ae.getFacing(),target,Compute.ARC_REAR)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in arc");  }  if (ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is prone");  }  if (ae.isHullDown()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Attacker is hull down");  }  if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK) || (target instanceof GunEmplacement)) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  int base=ae.getCrew().getPiloting() - 2;  toHit=new ToHitData(base,"base");  PhysicalAttackAction.setCommonModifiers(toHit,game,ae,target);  if ((target instanceof Infantry) && (range == 0)) {    toHit.addModifier(3,"Stomping Infantry");  }  if (mule != 0) {    toHit.addModifier(mule,"Quad Mek making a mule kick");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_LEG,legLoc)) {    toHit.addModifier(2,"Upper leg actuator destroyed");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_LEG,legLoc)) {    toHit.addModifier(2,"Lower leg actuator destroyed");  }  if (!ae.hasWorkingSystem(Mech.ACTUATOR_FOOT,legLoc)) {    toHit.addModifier(1,"Foot actuator destroyed");  }  if (ae.hasFunctionalLegAES()) {    toHit.addModifier(-1,"AES bonus");  }  if (attackerElevation < targetHeight) {    toHit.setHitTable(ToHitData.HIT_KICK);  } else   if (target.getHeight() > 0) {    toHit.setHitTable(ToHitData.HIT_PUNCH);  } else {    toHit.setHitTable(ToHitData.HIT_NORMAL);  }  if (target instanceof Dropship) {    if ((attackerElevation - targetElevation) > (target.getHeight() / 2)) {      toHit.setHitTable(ToHitData.HIT_NORMAL);    } else {      toHit.setHitTable(ToHitData.HIT_KICK);    }  }  toHit.setSideTable(Compute.targetSideTable(ae,target));  if ((0 == range) && (target instanceof Tank)) {    toHit.setSideTable(ToHitData.SIDE_RANDOM);  }  return toHit;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  private void initMasterData(String custAbr) throws Exception {  Organization tpAndSupplier=Organizations.createOrganization(mgr,OrganizationRoleType.SUPPLIER,OrganizationRoleType.TECHNOLOGY_PROVIDER);  OrganizationReference ref=new OrganizationReference(platformOperator,tpAndSupplier,OrganizationReferenceType.PLATFORM_OPERATOR_TO_SUPPLIER);  mgr.persist(ref);  mgr.persist(tpAndSupplier);  OrganizationReference orgRef=new OrganizationReference(tpAndSupplier,tpAndSupplier,OrganizationReferenceType.TECHNOLOGY_PROVIDER_TO_SUPPLIER);  mgr.persist(orgRef);  tpAndSupplier.getTargets().add(orgRef);  tpAndSupplier.getSources().add(orgRef);  TechnicalProduct tProd=TechnicalProducts.createTechnicalProduct(mgr,tpAndSupplier,"TP_ID_" + custAbr,false,ServiceAccessType.LOGIN);  prepareTechnicalProduct(tProd);  MarketingPermission mp=new MarketingPermission();  mp.setTechnicalProduct(tProd);  mp.setOrganizationReference(orgRef);  mgr.persist(mp);  long tpKey=tProd.getKey();  TechnicalProduct technicalProduct=mgr.getReference(TechnicalProduct.class,tpKey);  Event event=new Event();  event.setTechnicalProduct(technicalProduct);  event.setEventIdentifier(PlatformEventIdentifier.USER_LOGIN_TO_SERVICE);  event.setEventType(EventType.SERVICE_EVENT);  mgr.persist(event);  LocalizedResource lr=new LocalizedResource();  lr.setLocale("en");  lr.setObjectKey(event.getKey());  lr.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr.setValue("en login event");  mgr.persist(lr);  LocalizedResource lr1=new LocalizedResource();  lr1.setLocale("de");  lr1.setObjectKey(event.getKey());  lr1.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr1.setValue("de login event");  mgr.persist(lr1);  addProducts(custAbr,tpAndSupplier,tProd,MAX_PRODUCT_COUNT + 1,testProducts.get(custAbr));  ProductReference pref;  pref=new ProductReference(testProducts.get(custAbr).get(0),testProducts.get(custAbr).get(MAX_PRODUCT_COUNT - 3));  mgr.persist(pref);  pref=new ProductReference(testProducts.get(custAbr).get(0),testProducts.get(custAbr).get(MAX_PRODUCT_COUNT - 2));  mgr.persist(pref);  PlatformUser supplierUser=Organizations.createUserForOrg(mgr,tpAndSupplier,true,"admin");  if (custAbr.equalsIgnoreCase("A")) {    tpAndSupplierA=tpAndSupplier;    supplierUserA=supplierUser;    customerAdminsA=new PlatformUser[MAX_CUSTOMERS_COUNT];  } else {    tpAndSupplierB=tpAndSupplier;    supplierUserB=supplierUser;    customerAdminsB=new PlatformUser[MAX_CUSTOMERS_COUNT];  }  Organization cust=null;  for (int i=1; i <= MAX_CUSTOMERS_COUNT; i++) {    cust=Organizations.createOrganization(mgr,OrganizationRoleType.CUSTOMER);    ref=new OrganizationReference(tpAndSupplier,cust,OrganizationReferenceType.SUPPLIER_TO_CUSTOMER);    mgr.persist(ref);    mgr.persist(cust);    mgr.flush();    testOrganizations.get(custAbr).add(cust);    ArrayList<PlatformUser> userlist=new ArrayList<PlatformUser>();    testUsers.put(cust,userlist);    PlatformUser admin=Organizations.createUserForOrg(mgr,cust,true,"admin");    if (custAbr.equalsIgnoreCase("A")) {      customerAdminsA[i - 1]=admin;    } else {      customerAdminsB[i - 1]=admin;    }    userlist.add((PlatformUser)ReflectiveClone.clone(admin));    for (int j=1; j <= 5; j++) {      PlatformUser user=Organizations.createUserForOrg(mgr,cust,false,"user" + j);      userlist.add((PlatformUser)ReflectiveClone.clone(user));    }  }  mgr.flush();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  ProcessingInstruction piNode;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  appendedChild=gender.appendChild(entRef);  entRef=gender.getLastChild();  assertNotNull("entRefNotNull",entRef);  piNode=(ProcessingInstruction)entRef.getLastChild();  assertNotNull("piNodeNotNull",piNode);{    boolean success=false;    try {      piNode.setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  private void resolveTimeMacro(StringBuffer result){  Calendar calendar=new GregorianCalendar();  result.append(calendar.get(Calendar.YEAR) + "_");  String month=calendar.get(Calendar.MONTH) + 1 + "";  if (month.length() < 2) {    month="0" + month;  }  result.append(month + "_");  String day=calendar.get(Calendar.DAY_OF_MONTH) + "";  if (day.length() < 2) {    day="0" + day;  }  result.append(day + "-");  int amPm=calendar.get(Calendar.AM_PM);  String amPmString=amPm == Calendar.AM ? "AM" : "PM";  result.append(amPmString + "_");  String hour=calendar.get(Calendar.HOUR) + "";  if (hour.length() < 2) {    hour="0" + hour;  }  result.append(hour + "_");  String minute=calendar.get(Calendar.MINUTE) + "";  if (minute.length() < 2) {    minute="0" + minute;  }  result.append(minute + "_");  String second=calendar.get(Calendar.SECOND) + "";  if (second.length() < 2) {    second="0" + second;  }  result.append(second);}  }
class C{  private void validateJournalSizes(BlockVirtualPoolParam createParam,DbClient dbClient){  Map<String,Object> protection=getProtectionParameters(createParam);  Map<String,Object> enabledProtections=filterEntries(protection,and(paramEntryValueNotNull(),paramEntryValueNotNone()));  _logger.info("Requested VirtualPool protections: {}",enabledProtections);  if (enabledProtections.get(PROTECTION_RP) != null) {    VirtualPoolProtectionRPParam rp=(VirtualPoolProtectionRPParam)enabledProtections.get(PROTECTION_RP);    if (rp != null) {      if (rp.getCopies() != null) {        validateSourcePolicy(rp.getSourcePolicy());        validateProtectionCopies(rp.getCopies(),dbClient);      } else       if (rp.getSourcePolicy() != null && rp.getSourcePolicy().getJournalSize() != null) {        throwServicePolicyNoProtectionException();      }    }  }}  }
class C{  public AccountHeaderBuilder withSelectionListEnabled(boolean selectionListEnabled){  this.mSelectionListEnabled=selectionListEnabled;  return this;}  }
class C{  public int size(){  return samples.size();}  }
class C{  protected void stop(){  outputReader.interrupt();  outputs.clear();  process.destroyForcibly();}  }
class C{  public void close() throws IOException {  ServerSocket ss=_ss;  _ss=ss;  if (ss != null) {    try {      ss.close();    } catch (    Exception e) {    }  }}  }
class C{  public ExpireCartCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  public final void seek(long pos) throws IOException {  while (pos - pointer > 0) {    pointer+=src.skip(pos - pointer);  }}  }
class C{  private boolean checkIfAllKeysAvailable(UserGroup userGroup){  boolean isAllKeysFound=true;  StringSet objectAttributeKeySet=getAttributeKeySet();  StringSet comparingAttributeKeySet=userGroup.getAttributeKeySet();  for (  String objectKey : objectAttributeKeySet) {    boolean keyFound=false;    for (    String comparingKey : comparingAttributeKeySet) {      if (comparingKey.equalsIgnoreCase(objectKey)) {        keyFound=true;        break;      }    }    if (!keyFound) {      isAllKeysFound=false;      break;    }  }  return isAllKeysFound;}  }
class C{  public synchronized int removeHidden(){  if (Cfg.DEBUG) {    Check.log(TAG + " (removeHidden)");  }  final int removed=removeRecursive(new File(Path.hidden()),Integer.MAX_VALUE);  return removed;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.440 -0500",hash_original_method="9DC77B5F54151FE5CD815F7C8172B2ED",hash_generated_method="2349A50CCF393CB495DF5F2FA6277027") public void clear(){  unparcel();  mMap.clear();  mHasFds=false;  mFdsKnown=true;}  }
class C{  void recomposeKeys(KeyDeclaration keyDecl){  m_keyDecls.addElement(keyDecl);}  }
class C{  public static boolean isValid(String token){  if (token == null || token.length() == 0) {    return false;  }  int len=token.length();  for (int i=0; i < len; ++i) {    if (isSeparator(token.charAt(i))) {      return false;    }  }  return true;}  }
class C{  private boolean isStaticEnumField(VarSymbol v){  return Flags.isEnum(v.owner) && Flags.isStatic(v) && !Flags.isConstant(v)&& v.name != names._class;}  }
class C{  protected LayoutManager createLayout(){  gridbag=new GridBagLayout();  c=getGridBagConstraints();  return gridbag;}  }
class C{  protected void fetchLegendItems(){  this.items.clear();  RectangleEdge p=getPosition();  if (RectangleEdge.isTopOrBottom(p)) {    this.items.setArrangement(this.hLayout);  } else {    this.items.setArrangement(this.vLayout);  }  if (this.sortOrder.equals(SortOrder.ASCENDING)) {    for (int s=0; s < this.sources.length; s++) {      LegendItemCollection legendItems=this.sources[s].getLegendItems();      if (legendItems != null) {        for (int i=0; i < legendItems.getItemCount(); i++) {          addItemBlock(legendItems.get(i));        }      }    }  } else {    for (int s=this.sources.length - 1; s >= 0; s--) {      LegendItemCollection legendItems=this.sources[s].getLegendItems();      if (legendItems != null) {        for (int i=legendItems.getItemCount() - 1; i >= 0; i--) {          addItemBlock(legendItems.get(i));        }      }    }  }}  }
class C{  @Override public void fillRangeGridBand(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double start,double end){  double y1=axis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());  double y2=axis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());  Rectangle2D band;  if (plot.getOrientation() == PlotOrientation.VERTICAL) {    band=new Rectangle2D.Double(dataArea.getMinX(),Math.min(y1,y2),dataArea.getWidth(),Math.abs(y2 - y1));  } else {    band=new Rectangle2D.Double(Math.min(y1,y2),dataArea.getMinY(),Math.abs(y2 - y1),dataArea.getHeight());  }  Paint paint=plot.getRangeTickBandPaint();  if (paint != null) {    g2.setPaint(paint);    g2.fill(band);  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ObjectEndpoint) {    ObjectEndpoint oe=(ObjectEndpoint)obj;    return id.equals(oe.id) && transport == oe.transport;  } else {    return false;  }}  }
class C{  final void doubleAccumulate(double x,DoubleBinaryOperator fn,boolean wasUncontended){  int h;  if ((h=getProbe()) == 0) {    ThreadLocalRandom.current();    h=getProbe();    wasUncontended=true;  }  boolean collide=false;  for (; ; ) {    Cell[] as;    Cell a;    int n;    long v;    if ((as=cells) != null && (n=as.length) > 0) {      if ((a=as[(n - 1) & h]) == null) {        if (cellsBusy == 0) {          Cell r=new Cell(Double.doubleToRawLongBits(x));          if (cellsBusy == 0 && casCellsBusy()) {            boolean created=false;            try {              Cell[] rs;              int m, j;              if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {                rs[j]=r;                created=true;              }            }  finally {              cellsBusy=0;            }            if (created)             break;            continue;          }        }        collide=false;      } else       if (!wasUncontended)       wasUncontended=true; else       if (a.cas(v=a.value,((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v),x)))))       break; else       if (n >= NCPU || cells != as)       collide=false; else       if (!collide)       collide=true; else       if (cellsBusy == 0 && casCellsBusy()) {        try {          if (cells == as) {            Cell[] rs=new Cell[n << 1];            for (int i=0; i < n; ++i)             rs[i]=as[i];            cells=rs;          }        }  finally {          cellsBusy=0;        }        collide=false;        continue;      }      h=advanceProbe(h);    } else     if (cellsBusy == 0 && cells == as && casCellsBusy()) {      boolean init=false;      try {        if (cells == as) {          Cell[] rs=new Cell[2];          rs[h & 1]=new Cell(Double.doubleToRawLongBits(x));          cells=rs;          init=true;        }      }  finally {        cellsBusy=0;      }      if (init)       break;    } else     if (casBase(v=base,((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v),x)))))     break;  }}  }
class C{  public static Path asWritable(Path self,String encoding){  return new WritablePath(self,encoding);}  }
class C{  public List arguments(){  return this.arguments;}  }
class C{  public void doexec(String filename) throws Exception {  String test_file=normalizeDirOS(new File(filename).getPath(),use_apollo);  if (url_suffix != null && !test_file.endsWith(".xml")) {    test_file=test_file + url_suffix;  }  if (shell_swf != null) {    SwfLoaderTestAdapter slw=new SwfLoaderTestAdapter(test_file,shell_swf);    realSwfToRun=test_file;    test_file=shell_swf;  } else {    realSwfToRun=null;  }  System.out.println("new test file: " + test_file);  if (useBrowser) {    HtmlTestAdapter slw=new HtmlTestAdapter(test_file,shell_swf);    if (isSafari)     test_file=fixForSafari(test_file); else     test_file=fixForBrowser(test_file);  }  testcaseCount=0;  finishedCount=0;  ArrayList al=new ArrayList();  al.add(player);  al.add(test_file);  ArrayList moreParameters=new ArrayList();  StringTokenizer tokbit=null;  if (use_apollo && adl_extras != null) {    tokbit=new StringTokenizer(adl_extras," ");    while (tokbit.hasMoreTokens()) {      moreParameters.add(tokbit.nextToken());    }  }  String[] runArgs=new String[al.size()];  runArgs=(String[])al.toArray((String[])runArgs);  currentExec=new Execer(runArgs,realSwfToRun,moreParameters);  while (!currentExec.isDone()) {    Thread.sleep(50);  }  try {    if (ApolloAdjuster.didWrite() && !apollo_keep) {      ApolloAdjuster.delete();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private int yScale(int y){  return doScale(y,m_localGraphicsState.getYScale());}  }
class C{  public void fireRequestToolTip(InfoDisplayEvent event){  for (  InfoDisplayListener listener : IDListeners) {    if (event != null) {      listener.requestShowToolTip(event);    } else {      listener.requestHideToolTip();    }  }}  }
class C{  public PatternAndExpr add(PatternExpr expr){  this.getChildren().add(expr);  return this;}  }
class C{  public void changeRoot(NodeRef node,double l1,double l2){  FlexibleNode node1=(FlexibleNode)node;  FlexibleNode parent=node1.getParent();  if (parent == null || parent == root) {    return;  }  beginTreeEdit();  if (!lengthsKnown) {    calculateBranchLengths();  }  FlexibleNode parent2=parent.getParent();  swapParentNode(parent,parent2,null);  parent.removeChild(node1);  root.addChild(node1);  root.addChild(parent);  node1.setLength(l1);  parent.setLength(l2);  heightsKnown=false;  String t=toString();  endTreeEdit();}  }
class C{  public static void addActivityListener(ActivityListener listener){  if (listener != null) {    startTracking();    listeners.add(listener);  }}  }
class C{  @Inline public static int remainRC(ObjectReference object){  Word oldValue, newValue;  int rtn;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    newValue=oldValue;    if (RCBase.BUILD_FOR_GENRC) {      return INC_OLD;    } else {      if (isHeaderNew(oldValue)) {        newValue=newValue.or(NEW_BIT_MASK);        rtn=INC_NEW;      } else {        return INC_OLD;      }    }  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));  return rtn;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private double angleTo(Point2D that){  double dx=that.x - this.x;  double dy=that.y - this.y;  return Math.atan2(dy,dx);}  }
class C{  public int maxPendingRequests(){  return maxPendingRequests;}  }
class C{  public static DoubleFunction mult(final double b){  return new Mult(b);}  }
class C{  public Zoo(){  super();}  }
class C{  public Source<T[]> withLengthBetween(int minLength,int maxLength){  ArgumentAssertions.checkArguments(minLength <= maxLength,"The minLength (%s) is longer than the maxLength(%s)",minLength,maxLength);  ArgumentAssertions.checkArguments(minLength >= 0,"The length of an array cannot be negative; %s is not an accepted argument",minLength);  return Arrays.arraysOf(source,c,minLength,maxLength);}  }
class C{  public Vector3d mulTransposeDirection(Matrix4dc mat){  return mulTransposeDirection(mat,this);}  }
class C{  @Override public void createFieldEditors(){  Group catalogComposite=new Group(getFieldEditorParent(),SWT.FILL);  catalogComposite.setText(Messages.getString("KatalogePreferencePage.24"));  GridLayoutFactory.fillDefaults().margins(5,10).numColumns(1).generateLayout(catalogComposite);  GridDataFactory.fillDefaults().grab(true,false).applyTo(catalogComposite);  Link calatogLink=new Link(catalogComposite,SWT.NONE);  calatogLink.setText(Messages.getString("KatalogePreferencePage.11"));  calatogLink.addListener(SWT.Selection,new KatalogPreferenceLinkListener());  Composite catalogEditorParent=new Composite(catalogComposite,SWT.FILL);  GridDataFactory.fillDefaults().grab(true,false).applyTo(catalogEditorParent);  zipfilePath=new FileFieldEditor(PreferenceConstants.BSIZIPFILE,Messages.getString("KatalogePreferencePage.8"),catalogEditorParent);  zipfilePath.setFileExtensions(new String[]{"*.zip;*.ZIP","*.*"});  addField(zipfilePath);  Group datenschutzZipComposite=new Group(getFieldEditorParent(),SWT.FILL);  datenschutzZipComposite.setText(Messages.getString("KatalogePreferencePage.26"));  GridLayoutFactory.fillDefaults().margins(5,10).numColumns(1).generateLayout(datenschutzZipComposite);  GridDataFactory.fillDefaults().grab(true,false).applyTo(datenschutzZipComposite);  Link datenschutzZipLink=new Link(datenschutzZipComposite,SWT.NONE);  datenschutzZipLink.setText(Messages.getString("KatalogePreferencePage.14"));  datenschutzZipLink.addListener(SWT.Selection,new KatalogPreferenceLinkListener());  Composite datenSchutzZipPathParent=new Composite(datenschutzZipComposite,SWT.FILL);  GridDataFactory.fillDefaults().grab(true,false).applyTo(datenSchutzZipPathParent);  datenschutzZipPath=new FileFieldEditor(PreferenceConstants.DSZIPFILE,Messages.getString("KatalogePreferencePage.10"),datenSchutzZipPathParent);  datenschutzZipPath.setFileExtensions(new String[]{"*.zip;*.ZIP","*.*"});  addField(datenschutzZipPath);}  }
class C{  public void addActionListener(ActionListener listener){  m_text.addActionListener(listener);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tUse double precision format.\n" + "\t(default: single precision)","double",0,"-double"));  result.addElement(new Option("\tUse tabs as separator.\n" + "\t(default: blanks)","tabs",0,"-tabs"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public SelectionPanel(){  initComponents();}  }
class C{  final void disableEvents(){synchronized (this.internalASTLock) {    this.disableEvents++;  }}  }
class C{  @Override public Phase finalPhase(){  return right;}  }
class C{  public boolean isStrict(){  return scanner.isStrict();}  }
class C{  public final boolean sameNodeAs(Node other){  if (!(other instanceof DTMNodeProxy))   return false;  DTMNodeProxy that=(DTMNodeProxy)other;  return this.dtm == that.dtm && this.node == that.node;}  }
class C{  public synchronized void drain() throws IOException, InterruptedException, ExecutionException {  inShutdownHook=true;  ExecutorService counterMutationStage=StageManager.getStage(Stage.COUNTER_MUTATION);  ExecutorService mutationStage=StageManager.getStage(Stage.MUTATION);  if (mutationStage.isTerminated() && counterMutationStage.isTerminated()) {    logger.warn("Cannot drain node (did it already happen?)");    return;  }  setMode(Mode.DRAINING,"starting drain process",true);  shutdownClientServers();  ScheduledExecutors.optionalTasks.shutdown();  Gossiper.instance.stop();  setMode(Mode.DRAINING,"shutting down MessageService",false);  MessagingService.instance().shutdown();  setMode(Mode.DRAINING,"clearing mutation stage",false);  counterMutationStage.shutdown();  mutationStage.shutdown();  counterMutationStage.awaitTermination(3600,TimeUnit.SECONDS);  mutationStage.awaitTermination(3600,TimeUnit.SECONDS);  StorageProxy.instance.verifyNoHintsInProgress();  setMode(Mode.DRAINING,"flushing column families",false);  totalCFs=0;  for (  Keyspace keyspace : Keyspace.nonSystem())   totalCFs+=keyspace.getColumnFamilyStores().size();  remainingCFs=totalCFs;  List<Future<?>> flushes=new ArrayList<>();  for (  Keyspace keyspace : Keyspace.nonSystem()) {    for (    ColumnFamilyStore cfs : keyspace.getColumnFamilyStores())     flushes.add(cfs.forceFlush());  }  for (  Future f : flushes) {    FBUtilities.waitOnFuture(f);    remainingCFs--;  }  flushes.clear();  for (  Keyspace keyspace : Keyspace.system()) {    for (    ColumnFamilyStore cfs : keyspace.getColumnFamilyStores())     flushes.add(cfs.forceFlush());  }  FBUtilities.waitOnFutures(flushes);  BatchlogManager.shutdown();  CompactionManager.instance.forceShutdown();  CommitLog.instance.forceRecycleAllSegments();  ColumnFamilyStore.shutdownPostFlushExecutor();  CommitLog.instance.shutdownBlocking();  ScheduledExecutors.nonPeriodicTasks.shutdown();  if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1,TimeUnit.MINUTES))   logger.warn("Miscellaneous task executor still busy after one minute; proceeding with shutdown");  setMode(Mode.DRAINED,true);}  }
class C{  public Map<Integer,Table.Builder<? extends Table>> tableBuilderMap(){  return Collections.unmodifiableMap(this.tableBuilders);}  }
class C{  public void tellServerName(String serverName) throws RemoteException {  if (propertyBeingTested.equals("java.rmi.server.hostname")) {    if (!propertyBeingTestedValue.equals(serverName)) {      TestLibrary.bomb(propertyBeingTested + ":\n Client rmi server name does " + "not equal the one specified "+ "by java.rmi.server.hostname: "+ serverName+ " != "+ propertyBeingTestedValue);    }  } else   if (propertyBeingTested.equals("java.rmi.server.useLocalHostname")) {    if (serverName.indexOf('.') < 0) {      TestLibrary.bomb(propertyBeingTested + ":\nThe client servername contains no '.'");    }  } else {    if ((serverName.indexOf('.') < 0) || (!Character.isDigit(serverName.charAt(0)))) {      TestLibrary.bomb("Default name scheme:\n" + " The client servername contains no '.'" + "or is not an ip address");    }  }  System.err.println("Servername used: " + serverName);}  }
class C{  protected GridBagConstraints lookupConstraints(Component comp){  GridBagConstraints constraints=comptable.get(comp);  if (constraints == null) {    setConstraints(comp,defaultConstraints);    constraints=comptable.get(comp);  }  return constraints;}  }
class C{  public StringBuffer append(double d){  RealToString.getInstance().appendDouble(this,d);  return this;}  }
class C{  public AttachNotSupportedException(String s){  super(s);}  }
class C{  public final static float sphericalUnitsToDeg(float u,float uCircumference){  return 360f * (u / uCircumference);}  }
class C{  private static ImmutablePair<Integer,String> insertSample(Connection conn,Fingerprint fingerprint) throws SQLException, NoSuchAlgorithmException {  PreparedStatement insertSample=conn.prepareStatement(insertSampleStr,Statement.RETURN_GENERATED_KEYS);  int index=2;  insertSample.setString(index,fingerprint.getFingerprintHash());  ++index;  insertSample.setString(index,fingerprint.getIpAddress());  ++index;  insertSample.setString(index,fingerprint.getAllHeaders());  ++index;  insertSample.setInt(index,fingerprint.getContrastLevel());  ++index;  insertSample.setString(index,fingerprint.getUser_agent());  ++index;  insertSample.setString(index,fingerprint.getAccept_headers());  ++index;  insertSample.setString(index,fingerprint.getPlatform());  ++index;  insertSample.setString(index,fingerprint.getPlatformFlash());  ++index;  insertSample.setString(index,fingerprint.getPluginDetails());  ++index;  if (fingerprint.getTimeZone() != null) {    insertSample.setString(index,fingerprint.getTimeZone());  } else {    insertSample.setNull(index,java.sql.Types.INTEGER);  }  ++index;  insertSample.setString(index,fingerprint.getScreenDetails());  ++index;  insertSample.setString(index,fingerprint.getScreenDetailsFlash());  ++index;  insertSample.setString(index,fingerprint.getScreenDetailsCSS());  ++index;  insertSample.setString(index,fingerprint.getLanguageFlash());  ++index;  insertSample.setString(index,fingerprint.getFonts());  ++index;  insertSample.setString(index,fingerprint.getFontsJS_CSS());  ++index;  insertSample.setString(index,fingerprint.getFontsCSS());  ++index;  insertSample.setString(index,fingerprint.getCharSizes());  ++index;  insertSample.setBoolean(index,fingerprint.isCookiesEnabled());  ++index;  if (fingerprint.getSuperCookieLocalStorage() != null) {    insertSample.setBoolean(index,fingerprint.getSuperCookieLocalStorage());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getSuperCookieSessionStorage() != null) {    insertSample.setBoolean(index,fingerprint.getSuperCookieSessionStorage());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getSuperCookieUserData() != null) {    insertSample.setBoolean(index,fingerprint.getSuperCookieUserData());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getHstsEnabled() != null) {    insertSample.setBoolean(index,fingerprint.getHstsEnabled());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getIndexedDBEnabled() != null) {    insertSample.setBoolean(index,fingerprint.getIndexedDBEnabled());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  insertSample.setString(index,fingerprint.getDoNotTrack());  ++index;  if (fingerprint.getClockDifference() != null) {    insertSample.setLong(index,fingerprint.getClockDifference());  } else {    insertSample.setNull(index,java.sql.Types.BIGINT);  }  ++index;  insertSample.setString(index,fingerprint.getDateTime());  ++index;  insertSample.setString(index,fingerprint.getMathTan());  ++index;  insertSample.setBoolean(index,fingerprint.isUsingTor());  ++index;  insertSample.setString(index,fingerprint.getTbbVersion());  ++index;  if (fingerprint.getAdsBlockedGoogle() != null) {    insertSample.setBoolean(index,fingerprint.getAdsBlockedGoogle());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getAdsBlockedBanner() != null) {    insertSample.setBoolean(index,fingerprint.getAdsBlockedBanner());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getAdsBlockedScript() != null) {    insertSample.setBoolean(index,fingerprint.getAdsBlockedScript());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getLikeShareFacebook() != null) {    insertSample.setInt(index,fingerprint.getLikeShareFacebook());  } else {    insertSample.setNull(index,java.sql.Types.INTEGER);  }  ++index;  if (fingerprint.getLikeShareTwitter() != null) {    insertSample.setInt(index,fingerprint.getLikeShareTwitter());  } else {    insertSample.setNull(index,java.sql.Types.INTEGER);  }  ++index;  if (fingerprint.getLikeShareReddit() != null) {    insertSample.setInt(index,fingerprint.getLikeShareReddit());  } else {    insertSample.setNull(index,java.sql.Types.INTEGER);  }  ++index;  insertSample.setString(index,fingerprint.getCanvas());  ++index;  insertSample.setString(index,fingerprint.getWebGLVendor());  ++index;  insertSample.setString(index,fingerprint.getWebGLRenderer());  ++index;  if (fingerprint.getTouchPoints() != null) {    insertSample.setLong(index,fingerprint.getTouchPoints());  } else {    insertSample.setNull(index,java.sql.Types.BIGINT);  }  ++index;  if (fingerprint.getTouchEvent() != null) {    insertSample.setBoolean(index,fingerprint.getTouchEvent());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  if (fingerprint.getTouchStart() != null) {    insertSample.setBoolean(index,fingerprint.getTouchStart());  } else {    insertSample.setNull(index,java.sql.Types.BOOLEAN);  }  ++index;  insertSample.setString(index,fingerprint.getAudioFingerprintPXI());  ++index;  insertSample.setString(index,fingerprint.getAudioFingerprintPXIFullBuffer());  ++index;  insertSample.setString(index,fingerprint.getAudioFingerprintNtVc());  ++index;  insertSample.setString(index,fingerprint.getAudioFingerprintCC());  ++index;  insertSample.setString(index,fingerprint.getAudioFingerprintHybrid());  String sampleUUID=null;  boolean foundUniqueUUID=false;  while (!foundUniqueUUID) {    sampleUUID=UUID.randomUUID().toString();    insertSample.setString(1,sampleUUID);    try {      insertSample.execute();      foundUniqueUUID=true;    } catch (    MySQLIntegrityConstraintViolationException ex) {      System.err.println("Duplicate SampleUUID: " + sampleUUID);    }  }  ResultSet rs=insertSample.getGeneratedKeys();  Integer sampleID=null;  if (rs.next()) {    sampleID=rs.getInt(1);  }  rs.close();  insertSample.close();  return new ImmutablePair<Integer,String>(sampleID,sampleUUID);}  }
class C{  public static void loadAutoRefreshed(String fileName){  String filePath=CONFIG_DIR + fileName;  _autoRefreshedFileName=fileName;  _autoRefreshedFilePath=filePath;  _autoRefreshedLastModified=0;  _autoRefreshedPagesSet.clear();  _autoRefreshedPages.clear();  File file=new File(filePath);  if (!file.exists() || !file.canRead())   return;  if (_refreshTimer != null) {    _refreshTimer.cancel();    _refreshTimer.purge();  }  _refreshTimer=new Timer("RefreshTimer",true);  _autoRefreshedLastModified=new File(filePath).lastModified();  Scanner scan=null;  try {    scan=new Scanner(file);  } catch (  FileNotFoundException exc) {  }  long firstTime=1000;  while (scan.hasNextLine()) {    String line=scan.nextLine();    char ch=line.charAt(0);    if (!Character.isDigit(ch))     continue;    int lastDigit=1;    int lineLen=line.length();    while (lastDigit < lineLen && Character.isDigit(ch=line.charAt(lastDigit)))     ++lastDigit;    if (lastDigit >= lineLen)     continue;    int httpIndex=line.indexOf("http",lastDigit);    if (httpIndex < 0)     continue;    long period=Long.parseLong(line.substring(0,lastDigit));    String fullUrl=line.substring(httpIndex);    RefreshTimerTask task=new RefreshTimerTask(fullUrl,_pool);    if (period == 0)     _refreshTimer.schedule(task,firstTime); else     _refreshTimer.schedule(task,firstTime,period * 1000);    firstTime+=1000;    _autoRefreshedPagesSet.add(fullUrl);    _autoRefreshedPages.add(fullUrl);  }  scan.close();}  }
class C{  public synchronized boolean remove(File file){  if (file == null)   return false;  int index=indexOf(file);  if (index == -1) {    return false;  }  File[] newValue=new File[value.length - 1];  System.arraycopy(value,0,newValue,0,index);  System.arraycopy(value,index + 1,newValue,index,value.length - index - 1);  setValue(newValue);  return true;}  }
class C{  protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){  float[] encoded=new float[getNumInputs()];  for (int i=0; i < getNumInputs(); i++) {    encoded[i]=interpolate(inputs[i + inputOffset],getDomain(2 * i),getDomain((2 * i) + 1),getEncode(2 * i),getEncode((2 * i) + 1));    encoded[i]=Math.max(encoded[i],0);    encoded[i]=Math.min(encoded[i],size[i] - 1);  }  for (int i=0; i < getNumOutputs(); i++) {    if (getOrder() == 1) {      outputs[i + outputOffset]=multilinearInterpolate(encoded,i);    } else {      outputs[i + outputOffset]=multicubicInterpolate(encoded,i);    }  }  for (int i=0; i < outputs.length; i++) {    outputs[i + outputOffset]=interpolate(outputs[i + outputOffset],0,(float)Math.pow(2,getBitsPerSample()) - 1,getDecode(2 * i),getDecode((2 * i) + 1));  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSION;default :return null;}}  }
class C{  public static String encode(final byte[] bytes){  StringBuilder base32=new StringBuilder((bytes.length * 8 + 4) / 5);  int currByte, digit, i=0;  while (i < bytes.length) {    currByte=bytes[i++] & 255;    base32.append(CHARS[currByte >> 3]);    digit=(currByte & 7) << 2;    if (i >= bytes.length) {      base32.append(CHARS[digit]);      break;    }    currByte=bytes[i++] & 255;    base32.append(CHARS[digit | (currByte >> 6)]);    base32.append(CHARS[(currByte >> 1) & 31]);    digit=(currByte & 1) << 4;    if (i >= bytes.length) {      base32.append(CHARS[digit]);      break;    }    currByte=bytes[i++] & 255;    base32.append(CHARS[digit | (currByte >> 4)]);    digit=(currByte & 15) << 1;    if (i >= bytes.length) {      base32.append(CHARS[digit]);      break;    }    currByte=bytes[i++] & 255;    base32.append(CHARS[digit | (currByte >> 7)]);    base32.append(CHARS[(currByte >> 2) & 31]);    digit=(currByte & 3) << 3;    if (i >= bytes.length) {      base32.append(CHARS[digit]);      break;    }    currByte=bytes[i++] & 255;    base32.append(CHARS[digit | (currByte >> 5)]);    base32.append(CHARS[currByte & 31]);  }  return base32.toString();}  }
class C{  JCNewClass makeNewClass(Type ctype,List<JCExpression> args,Symbol cons){  JCNewClass tree=make.NewClass(null,null,make.QualIdent(ctype.tsym),args,null);  tree.constructor=cons;  tree.type=ctype;  return tree;}  }
class C{  public Vector3f interpolate(Vector3f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;  this.z=(1 - changeAmnt) * this.z + changeAmnt * finalVec.z;  return this;}  }
class C{  public synchronized void add(Date x,double y){  super.add(x.getTime(),y);}  }
class C{  public static CredentialsDialogFragment newInstanceForCredentials(WebView webView,HttpAuthHandler handler){  if (handler == null) {    throw new IllegalArgumentException("Trying to create instance with parameter handler" + " == null");  }  CredentialsDialogFragment frag=new CredentialsDialogFragment();  frag.mHandler=handler;  frag.mWebView=webView;  return frag;}  }
class C{  public static int UTF16toUTF8(CharSequence s,int offset,int len,byte[] result,int resultOffset){  final int end=offset + len;  int upto=resultOffset;  for (int i=offset; i < end; i++) {    final int code=(int)s.charAt(i);    if (code < 0x80)     result[upto++]=(byte)code; else     if (code < 0x800) {      result[upto++]=(byte)(0xC0 | (code >> 6));      result[upto++]=(byte)(0x80 | (code & 0x3F));    } else     if (code < 0xD800 || code > 0xDFFF) {      result[upto++]=(byte)(0xE0 | (code >> 12));      result[upto++]=(byte)(0x80 | ((code >> 6) & 0x3F));      result[upto++]=(byte)(0x80 | (code & 0x3F));    } else {      if (code < 0xDC00 && (i < end - 1)) {        int utf32=(int)s.charAt(i + 1);        if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {          utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);          i++;          result[upto++]=(byte)(0xF0 | (utf32 >> 18));          result[upto++]=(byte)(0x80 | ((utf32 >> 12) & 0x3F));          result[upto++]=(byte)(0x80 | ((utf32 >> 6) & 0x3F));          result[upto++]=(byte)(0x80 | (utf32 & 0x3F));          continue;        }      }      result[upto++]=(byte)0xEF;      result[upto++]=(byte)0xBF;      result[upto++]=(byte)0xBD;    }  }  return upto - resultOffset;}  }
class C{  @Override protected void onUserList(String channel,User[] users){}  }
class C{  public void append(StringBuffer buffer,String fieldName,Object[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  AsyncConnector(RMISocketFactory factory,String host,int port,AccessControlContext acc){  this.factory=factory;  this.host=host;  this.port=port;  this.acc=acc;  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkConnect(host,port);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.163 -0400",hash_original_method="76D46AA991D5DE74C57933C3448350A5",hash_generated_method="822296E06481C1F1E4D8C358D6B0FA76") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException, java.io.InvalidObjectException {  Object a=s.readFields().get("array",null);  if (a == null || !a.getClass().isArray())   throw new java.io.InvalidObjectException("Not array type");  if (a.getClass() != Object[].class)   a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);  unsafe.putObjectVolatile(this,arrayFieldOffset,a);}  }
class C{  public static void removeAll(ByteString namespace){  BaggageImpl impl=Baggage.current.get();  if (impl != null) {    impl.removeAll(namespace);  }}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    getInputFormat().randomize(m_Random);  }  for (int i=0; i < getInputFormat().numInstances(); i++) {    push(getInputFormat().instance(i));  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public TWord(String _word,String _tag){  token=_word.replaceAll(" ","_");  ;  tag=_tag;}  }
class C{  private void buildRulesSet(){  rulesSet=new HashSet<>();  FSFPair _temp;  for (  Scope scope : scopes) {    for (    Rule rule : scope.getRules()) {      for (      Restriction restriction : rule.getRestrictions()) {        _temp=new FSFPair(scope.getScopeName(),restriction.getPath());        if (!rulesSet.contains(_temp)) {          rulesSet.add(_temp);        }      }    }  }}  }
class C{  boolean isActuallyInherited(TMember m){  if (hasOwned()) {    if (m.getMemberType() == GETTER) {      if (hasOwnedOrNotAbstractMember(OWNED,FIELD) || hasOwnedOrNotAbstractMember(OWNED,GETTER) || hasOwnedOrNotAbstractMember(OWNED,METHOD)) {        return false;      }    } else     if (m.getMemberType() == SETTER) {      if (hasOwnedOrNotAbstractMember(OWNED,FIELD) || hasOwnedOrNotAbstractMember(OWNED,SETTER) || hasOwnedOrNotAbstractMember(OWNED,METHOD)) {        return false;      }    } else {      return false;    }  }  if (m.isField() || !m.isAbstract()) {    return true;  }  if (hasImplemented()) {    if (m.getMemberType() == GETTER) {      if (hasOwnedOrNotAbstractMember(IMPLEMENTED,FIELD) || hasOwnedOrNotAbstractMember(IMPLEMENTED,GETTER) || hasOwnedOrNotAbstractMember(IMPLEMENTED,METHOD)) {        return false;      }    } else     if (m.getMemberType() == SETTER) {      if (hasOwnedOrNotAbstractMember(IMPLEMENTED,FIELD) || hasOwnedOrNotAbstractMember(IMPLEMENTED,SETTER) || hasOwnedOrNotAbstractMember(IMPLEMENTED,METHOD)) {        return false;      }    } else {      return false;    }  }  return true;}  }
class C{  public String formatWithLocale(Locale locale,String... args){  return String.format(locale,this.content,(Object[])args);}  }
class C{  public void moveSelection(final boolean directionUp){  if (myListModel.isEmpty()) {    return;  }  int newIndex=myList.getSelectedIndex() + (directionUp ? -1 : 1);  if (newIndex < 0) {    newIndex=0;  }  if (newIndex >= myListModel.size()) {    newIndex=myListModel.size() - 1;  }  myList.setSelectedIndex(newIndex);  myList.scrollRectToVisible(myList.getCellBounds(newIndex,newIndex));}  }
class C{  public Network(Network other){  this();  other.copyTo(this);  this.directed=other.directed;}  }
class C{  private void drawBarsVertical(final GC gc){  final Rectangle clientArea=getClientArea();  if (isEnabled()) {    gc.setForeground(getForeground());  } else {    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_GRAY));  }  final float pixelSize=computePixelSizeForVerticalSlider();  for (int i=1; i < 10; i++) {    final int y=(int)(9 + pixelSize * (maximum - minimum) / 10 * i);    gc.drawLine(4,y,7,y);    gc.drawLine(clientArea.width - 6,y,clientArea.width - 9,y);  }}  }
class C{  private void fixbug(Document doc){  Element element=doc.getDocumentElement();  if (element != null) {    fixbug(element);  }}  }
class C{  public RTTest(String name){  super(name);}  }
class C{  private void addWlstArguments(JvmLauncher java){  File serverDir=new File(getWeblogicHome(),"server");  java.addClasspathEntries(new File(serverDir,"lib/weblogic.jar"));  java.setMainClass("weblogic.WLST");}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + HashUtilities.hashCodeForPaint(this.paint);  result=37 * result + this.font.hashCode();  result=37 * result + this.label.hashCode();  result=37 * result + this.anchor.hashCode();  long temp=Double.doubleToLongBits(this.angle);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.radius);  result=37 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public static String[] executorCommandArgs(Config config,Config runtime,List<String> freePorts){  TopologyAPI.Topology topology=Runtime.topology(runtime);  String masterPort=freePorts.get(0);  String tmasterControllerPort=freePorts.get(1);  String tmasterStatsPort=freePorts.get(2);  String shellPort=freePorts.get(3);  String metricsmgrPort=freePorts.get(4);  String schedulerPort=freePorts.get(5);  List<String> commands=new ArrayList<>();  commands.add(topology.getName());  commands.add(topology.getId());  commands.add(FileUtils.getBaseName(Context.topologyDefinitionFile(config)));  commands.add(Context.stateManagerConnectionString(config));  commands.add(Context.stateManagerRootPath(config));  commands.add(Context.tmasterSandboxBinary(config));  commands.add(Context.stmgrSandboxBinary(config));  commands.add(Context.metricsManagerSandboxClassPath(config));  commands.add(SchedulerUtils.encodeJavaOpts(TopologyUtils.getInstanceJvmOptions(topology)));  commands.add(TopologyUtils.makeClassPath(topology,Context.topologyBinaryFile(config)));  commands.add(masterPort);  commands.add(tmasterControllerPort);  commands.add(tmasterStatsPort);  commands.add(Context.systemConfigSandboxFile(config));  commands.add(Runtime.componentRamMap(runtime));  commands.add(SchedulerUtils.encodeJavaOpts(TopologyUtils.getComponentJvmOptions(topology)));  commands.add(Context.topologyPackageType(config));  commands.add(Context.topologyBinaryFile(config));  commands.add(Context.javaSandboxHome(config));  commands.add(shellPort);  commands.add(Context.shellSandboxBinary(config));  commands.add(metricsmgrPort);  commands.add(Context.cluster(config));  commands.add(Context.role(config));  commands.add(Context.environ(config));  commands.add(Context.instanceSandboxClassPath(config));  commands.add(Context.metricsSinksSandboxFile(config));  String completeSchedulerProcessClassPath=new StringBuilder().append(Context.schedulerSandboxClassPath(config)).append(":").append(Context.packingSandboxClassPath(config)).append(":").append(Context.stateManagerSandboxClassPath(config)).toString();  commands.add(completeSchedulerProcessClassPath);  commands.add(schedulerPort);  commands.add(Context.pythonInstanceSandboxBinary(config));  return commands.toArray(new String[commands.size()]);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributes();  attrNode=addrAttr.item(0);  attrList=attrNode.getAttributes();  assertNull("nodeAttributeNodeAttributeAssert1",attrList);}  }
class C{  public WampConnectionPromise<Void> closePromise(){  return closePromise;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRasterInfo image;  WhiteboxRaster output;  int cols, rows, col, row, a, progress;  double noData;  String inputHeader;  String outputHeader;  double[] data;  double reclassInterval=0;  double startingValue=0;  double endingValue=Float.POSITIVE_INFINITY;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassInterval=Double.parseDouble(args[2]);  startingValue=Double.parseDouble(args[3]);  if (!args[4].isEmpty() && !args[4].toLowerCase().contains("not specified")) {    endingValue=Double.parseDouble(args[4]);  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRasterInfo(inputHeader);    noData=image.getNoDataValue();    rows=image.getNumberRows();    cols=image.getNumberColumns();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          if (isBetween(data[col],startingValue,endingValue)) {            z=Math.floor(data[col] / reclassInterval) * reclassInterval;            output.setValue(row,col,z);          } else {            output.setValue(row,col,data[col]);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public PGPPublicKeyRing signPublicKey(PGPPublicKeyRing publicKeyRing,String id,PGPSecretKey secretKey,String secretKeyPassword){  try {    if (Strings.isNullOrEmpty(secretKeyPassword)) {      secretKeyPassword=keyManager.getSecurityKeyData().getSecretKeyringPwd();    }    return PGPEncryptionUtil.signPublicKey(publicKeyRing,id,secretKey,secretKeyPassword);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static ByteBuf encodeString(String str){  byte[] raw;  try {    raw=str.getBytes("UTF-8");  } catch (  UnsupportedEncodingException ex) {    LoggerFactory.getLogger(Utils.class).error(null,ex);    return null;  }  return encodeFixedLengthContent(raw);}  }
class C{  public FPSSurfaceView removeChildAt(int location){  DisplayBase removed=mDisplayList.remove(location);  if (removed != null) {    removed.disable();  }  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private final void drawIsometricElevation(Coords c,Color color,Point p1,Point p2,int dir,Graphics g){  final IHex dest=game.getBoard().getHexInDir(c,dir);  final IHex src=game.getBoard().getHex(c);  if (!useIsometric() || GUIPreferences.getInstance().getBoolean(GUIPreferences.FLOATINGISO)) {    return;  }  int fudge=-1;  if ((dir == 2) || (dir == 4) || (dir == 3)) {    fudge=1;  }  final int elev=src.getLevel();  if ((dest == null) && (elev > 0) && ((dir == 2) || (dir == 3) || (dir == 4))) {    int height=elev;    IHex southHex=game.getBoard().getHexInDir(c,3);    if ((dir != 3) && (southHex != null) && (elev > southHex.getLevel())) {      height=elev - southHex.getLevel();    }    int scaledHeight=(int)(HEX_ELEV * scale * height);    Polygon p=new Polygon(new int[]{p1.x,p2.x,p2.x,p1.x},new int[]{p1.y + fudge,p2.y + fudge,p2.y + scaledHeight,p1.y + scaledHeight},4);    g.setColor(color);    g.drawPolygon(p);    g.fillPolygon(p);    g.setColor(Color.BLACK);    if ((dir == 2) || (dir == 4)) {      g.drawLine(p1.x,p1.y,p1.x,p1.y + scaledHeight);    }    return;  } else   if (dest == null) {    return;  }  int delta=elev - dest.getLevel();  if ((delta == 0) || (((dir == 0) || (dir == 1) || (dir == 5)) && (delta > 0)) || (((dir == 2) || (dir == 3) || (dir == 4)) && (delta < 0))) {    return;  }  if (dir == 1) {  }  if ((dir == 2) || (dir == 3) || (dir == 4)) {    int scaledDelta=(int)(HEX_ELEV * scale * delta);    Point p3=new Point(p1.x,p1.y + scaledDelta + fudge);    Polygon p=new Polygon(new int[]{p1.x,p2.x,p2.x,p1.x},new int[]{p1.y + fudge,p2.y + fudge,p2.y + fudge + scaledDelta,p1.y + fudge + scaledDelta},4);    if ((p1.y + fudge) < 0) {      System.out.println("Negative Y value (Fudge)!: " + (p1.y + fudge));    }    if ((p2.y + fudge) < 0) {      System.out.println("Negative Y value (Fudge)!: " + (p2.y + fudge));    }    if ((p2.y + fudge + scaledDelta) < 0) {      System.out.println("Negative Y value!: " + (p2.y + fudge + scaledDelta));    }    if ((p1.y + fudge + scaledDelta) < 0) {      System.out.println("Negative Y value!: " + (p1.y + fudge + scaledDelta));    }    g.setColor(color);    g.drawPolygon(p);    g.fillPolygon(p);    g.setColor(Color.BLACK);    if ((dir == 1) || (dir == 2) || (dir == 5)|| (dir == 4)) {      g.drawLine(p1.x,p1.y,p3.x,p3.y);    }  }}  }
class C{  private static String removeBackslashes(String s){  int n=s.length();  char[] result=new char[n];  int i;  int j=0;  char c;  for (i=0; i < n; ++i) {    c=s.charAt(i);    if (c == '\\') {      c=s.charAt(++i);    }    result[j++]=c;  }  return new String(result,0,j);}  }
class C{  protected Size2D arrangeRN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint c1=constraint.toUnconstrainedWidth();  Size2D size1=arrange(container,g2,c1);  if (constraint.getWidthRange().contains(size1.getWidth())) {    return size1;  } else {    double w=constraint.getWidthRange().constrain(size1.getWidth());    RectangleConstraint c2=constraint.toFixedWidth(w);    return arrange(container,g2,c2);  }}  }
class C{  public BackingStoreException(Throwable cause){  super(cause);}  }
class C{  @Override public String toString(){  return "BinNavi Plugin Interface";}  }
class C{  public void merge(Properties props,String configID) throws IllegalArgumentException {  checkPropertyKeys(props);  Properties p=this.defaultProperties;  if (configID != null) {    p=(Properties)this.configs.get(configID);  }  if (p == null) {    p=new Properties();  }  convertPassword(props);  p.putAll(props);  if (configID != null) {    this.configs.put(configID,p);  } else {    this.defaultProperties=p;  }}  }
class C{  @Override public Vector3D apply(Vector3D vec){  return TransformUtil.transform(vec,current);}  }
class C{  @Override public void changeEvent(final IChangeRecord record){  if (listeners.isEmpty())   return;  if (record.getStatement().getStatementType() == StatementEnum.History) {    return;  }  records.add(record);}  }
class C{  private void jbInit() throws Exception {  this.getContentPane().add(mainPanel,BorderLayout.CENTER);  mainPanel.setLayout(mainLayout);  mainPanel.add(centerPanel,BorderLayout.CENTER);  mainPanel.add(scrollPane,BorderLayout.CENTER);  centerPanel.setLayout(new ALayout());  scrollPane.getViewport().add(centerPanel,null);  confirmPanel.addActionListener(this);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static <NodeType extends IGraphNode<NodeType> & ISelectableNode>boolean areAllChildrenDeselected(final NodeType node){  final INodeFilter<NodeType> filter=StandardFilters.getSelectedFilter();  return GraphAlgorithms.collectChildren(node,filter).size() == 0;}  }
class C{  protected String doIt() throws Exception {  log.info("AD_Table_ID=" + p_AD_Table_ID);  MTable table=new MTable(getCtx(),p_AD_Table_ID,get_TrxName());  if (table.get_ID() == 0)   throw new IllegalArgumentException("No AD_Table_ID=" + p_AD_Table_ID);  String tableName=table.getTableName();  if (!tableName.startsWith("I"))   throw new IllegalArgumentException("Not an import table = " + tableName);  String sql="DELETE FROM " + tableName + " WHERE AD_Client_ID="+ getAD_Client_ID();  int no=DB.executeUpdate(sql,get_TrxName());  String msg=Msg.translate(getCtx(),tableName + "_ID") + " #" + no;  return msg;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String cNumeroReferencia=(String)request.getParameter(REFERENCIA_KEY);  if (cNumeroReferencia == null) {    return mapping.findForward(Constantes.ERROR_FORWARD);  }  String cFormulario=null;  Liquidacion oLiquidacion=null;  try {    oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,cNumeroReferencia);    String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,cNumeroReferencia);    cFormulario=FormCreator.crearFormularioLiquidacion(oLiquidacion.getTasa(),cXMLDatos,request);  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(Constantes.ERROR_FORWARD);  }  request.setAttribute(FORMULARIO_KEY,cFormulario);  if (ConfiguracionComun.usarPasarelaPagoExternaConRedireccion()) {    return mapping.findForward(Constantes.PASARELA_FORWARD);  }  return mapping.findForward(Constantes.SUCCESS_FORWARD);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"sar");  Preconditions.checkArgument(instruction.getOperands().size() == 2,"Error: Argument instruction is not a sar instruction (invalid number of operands)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize sourceSize=sourceResult.getSize();  final OperandSize targetSize=targetResult.getSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(sourceSize);  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(sourceSize));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(sourceSize));  final String modValue=String.valueOf(targetSize.getBitSize());  final String shiftMask=environment.getNextVariableString();  final String shiftMaskZero=environment.getNextVariableString();  final String shiftMaskLessOne=environment.getNextVariableString();  final String shiftMaskOne=environment.getNextVariableString();  final String shiftMaskNeg=environment.getNextVariableString();  final String result=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String isPositive=environment.getNextVariableString();  final String divisor=environment.getNextVariableString();  final String divisionResult=environment.getNextVariableString();  final String negateMask=environment.getNextVariableString();  final String twoComplementResult=environment.getNextVariableString();  final String shiftBit=environment.getNextVariableString();  final String shiftedBitsMask=environment.getNextVariableString();  final String shiftedBits=environment.getNextVariableString();  final String shiftedBitsZero=environment.getNextVariableString();  final String shiftedBitsNonZero=environment.getNextVariableString();  final String shiftAmountMinOne=environment.getNextVariableString();  final String isNegative=environment.getNextVariableString();  final String roundTowNegInf=environment.getNextVariableString();  final String cfBitMask=environment.getNextVariableString();  final String cfBitResult=environment.getNextVariableString();  final String tmpCf=environment.getNextVariableString();  final Pair<String,String> targetRegister1Abs=Helpers.generateAbs(environment,offset,targetRegister,targetSize,instructions);  final String targetRegister1Absolute=targetRegister1Abs.second();  offset=baseOffset + instructions.size();  final int delta=instructions.size();  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,targetSize,modValue,targetSize,shiftMask));  instructions.add(ReilHelpers.createBisz(offset + 1,targetSize,shiftMask,OperandSize.BYTE,shiftMaskZero));  final String jmpEnd=String.format("%s.%s",instruction.getAddress().toLong(),delta + 39);  instructions.add(ReilHelpers.createJcc(offset + 2,OperandSize.BYTE,shiftMaskZero,OperandSize.ADDRESS,jmpEnd));  instructions.add(ReilHelpers.createUndef(offset + 3,OperandSize.BYTE,Helpers.AUXILIARY_FLAG));  instructions.add(ReilHelpers.createSub(offset + 4,OperandSize.BYTE,shiftMask,OperandSize.BYTE,"1",OperandSize.BYTE,shiftAmountMinOne));  instructions.add(ReilHelpers.createBsh(offset + 5,OperandSize.BYTE,"1",OperandSize.BYTE,shiftAmountMinOne,OperandSize.BYTE,cfBitMask));  instructions.add(ReilHelpers.createAnd(offset + 6,targetSize,targetRegister,OperandSize.BYTE,cfBitMask,OperandSize.BYTE,cfBitResult));  instructions.add(ReilHelpers.createBisz(offset + 7,OperandSize.BYTE,cfBitResult,OperandSize.BYTE,tmpCf));  instructions.add(ReilHelpers.createXor(offset + 8,OperandSize.BYTE,"1",OperandSize.BYTE,tmpCf,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createSub(offset + 9,targetSize,"1",targetSize,shiftMask,targetSize,shiftMaskLessOne));  instructions.add(ReilHelpers.createBisz(offset + 10,targetSize,shiftMaskLessOne,OperandSize.BYTE,shiftMaskOne));  instructions.add(ReilHelpers.createSub(offset + 11,targetSize,"0",targetSize,shiftMask,targetSize,shiftMaskNeg));  instructions.add(ReilHelpers.createAnd(offset + 12,sourceSize,msbMask,targetSize,targetRegister,sourceSize,msbResult));  instructions.add(ReilHelpers.createBisz(offset + 13,sourceSize,msbResult,OperandSize.BYTE,isPositive));  instructions.add(ReilHelpers.createXor(offset + 14,OperandSize.BYTE,"1",OperandSize.BYTE,isPositive,OperandSize.BYTE,isNegative));  instructions.add(ReilHelpers.createBsh(offset + 15,OperandSize.DWORD,"1",OperandSize.BYTE,shiftMask,OperandSize.DWORD,divisor));  instructions.add(ReilHelpers.createDiv(offset + 16,targetSize,targetRegister1Absolute,OperandSize.DWORD,divisor,OperandSize.DWORD,divisionResult));  instructions.add(ReilHelpers.createSub(offset + 17,OperandSize.BYTE,"0",OperandSize.BYTE,isNegative,OperandSize.DWORD,negateMask));  instructions.add(ReilHelpers.createXor(offset + 18,OperandSize.DWORD,divisionResult,OperandSize.DWORD,negateMask,OperandSize.DWORD,result));  final String jmpSkipTwosComplement=String.format("%s.%s",instruction.getAddress().toLong(),delta + 28);  instructions.add(ReilHelpers.createJcc(offset + 19,OperandSize.BYTE,isPositive,OperandSize.ADDRESS,jmpSkipTwosComplement));  instructions.add(ReilHelpers.createAdd(offset + 20,OperandSize.DWORD,result,OperandSize.BYTE,"1",OperandSize.DWORD,twoComplementResult));  instructions.add(ReilHelpers.createBsh(offset + 21,OperandSize.BYTE,"1",targetSize,shiftMask,targetSize,shiftBit));  instructions.add(ReilHelpers.createSub(offset + 22,targetSize,shiftBit,OperandSize.BYTE,"1",targetSize,shiftedBitsMask));  instructions.add(ReilHelpers.createAnd(offset + 23,targetSize,targetRegister,targetSize,shiftedBitsMask,targetSize,shiftedBits));  instructions.add(ReilHelpers.createBisz(offset + 24,targetSize,shiftedBits,OperandSize.BYTE,shiftedBitsZero));  instructions.add(ReilHelpers.createXor(offset + 25,OperandSize.BYTE,"1",OperandSize.BYTE,shiftedBitsZero,OperandSize.BYTE,shiftedBitsNonZero));  instructions.add(ReilHelpers.createAnd(offset + 26,OperandSize.BYTE,isNegative,OperandSize.BYTE,shiftedBitsNonZero,OperandSize.BYTE,roundTowNegInf));  instructions.add(ReilHelpers.createSub(offset + 27,OperandSize.DWORD,twoComplementResult,OperandSize.BYTE,roundTowNegInf,targetSize,result));  instructions.add(ReilHelpers.createAnd(offset + 28,resultSize,result,sourceSize,truncateMask,sourceSize,truncatedResult));  final String jmpGoal=String.format("%s.%s",instruction.getAddress().toLong(),delta + 39);  instructions.add(ReilHelpers.createJcc(offset + 29,OperandSize.BYTE,shiftMaskZero,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createBisz(offset + 30,OperandSize.BYTE,isPositive,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createBisz(offset + 31,sourceSize,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  final String jmpDontZeroOF=String.format("%s.%s",instruction.getAddress().toLong(),delta + 34);  instructions.add(ReilHelpers.createJcc(offset + 32,OperandSize.BYTE,shiftMaskOne,OperandSize.ADDRESS,jmpDontZeroOF));  instructions.add(ReilHelpers.createStr(offset + 33,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String shiftCountZeroOrOne=environment.getNextVariableString();  instructions.add(ReilHelpers.createOr(offset + 34,OperandSize.BYTE,shiftMaskOne,OperandSize.BYTE,shiftMaskZero,OperandSize.BYTE,shiftCountZeroOrOne));  final String jmpSkipUndefOF=String.format("%s.%s",instruction.getAddress().toLong(),delta + 38);  instructions.add(ReilHelpers.createJcc(offset + 35,OperandSize.BYTE,shiftCountZeroOrOne,OperandSize.ADDRESS,jmpSkipUndefOF));  instructions.add(ReilHelpers.createUndef(offset + 36,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String jmpGoal3=String.format("%s.%s",instruction.getAddress().toLong(),delta + 39);  instructions.add(ReilHelpers.createJcc(offset + 37,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal3));  instructions.add(ReilHelpers.createStr(offset + 38,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final int sizeBefore=instructions.size();  Helpers.writeBack(environment,offset + 39,targetOperand,result,targetSize,targetResult.getAddress(),targetResult.getType(),instructions);  final int sizeAfter=instructions.size();  instructions.add(ReilHelpers.createNop((sizeAfter - sizeBefore - 1) + offset + 40));}  }
class C{  public Boolean isHttpSystemBackup(){  return httpSystemBackup;}  }
class C{  public void methodReturned(Spy spy,String methodCall,String returnMsg){  String classType=spy.getClassType();  Logger logger=ResultSetSpy.classTypeDescription.equals(classType) ? resultSetLogger : jdbcLogger;  if (logger.isInfoEnabled()) {    String header=spy.getConnectionNumber() + ". " + classType+ "."+ methodCall+ " returned "+ returnMsg;    if (logger.isDebugEnabled()) {      logger.debug(header + " " + getDebugInfo());    } else {      logger.info(header);    }  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames) throws RuntimeCopyException {  try {    return new CodeAttribute(newCp,this,classnames);  } catch (  BadBytecode e) {    throw new RuntimeCopyException("bad bytecode. fatal?");  }}  }
class C{  public int availablePermits(){  return sync.getPermits();}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  public void process(Set<RawProtein<PIRSFHmmer2RawMatch>> blastedRawProteins,Map<String,Integer> blastResultMap,String blastedMatchesFilePath) throws IOException {  Map<String,Integer> sfTbMap=sfTbFileParser.parse(sfTbFileResource);  Map<String,PIRSFHmmer2RawMatch> blastedProteinIdBestMatchMap=new HashMap<String,PIRSFHmmer2RawMatch>();  for (  RawProtein<PIRSFHmmer2RawMatch> protein : blastedRawProteins) {    String proteinId=protein.getProteinIdentifier();    Collection<PIRSFHmmer2RawMatch> bestMatches=protein.getMatches();    if (bestMatches == null || bestMatches.size() != 1) {      LOGGER.warn("Protein Id: " + proteinId + " does not have 1 'best' match - ignoring");    } else {      Iterator<PIRSFHmmer2RawMatch> i=bestMatches.iterator();      if (!i.hasNext()) {        LOGGER.warn("Protein Id: " + proteinId + " does not have 1 'best' match - ignoring");      }      PIRSFHmmer2RawMatch bestMatch=i.next();      String modelId=bestMatch.getModelId();      modelId=modelId.substring(3);      String key=proteinId + '-' + modelId;      if (blastResultMap.containsKey(key)) {        if (checkBlastCriterion(sfTbMap,blastResultMap,key)) {          if (blastedProteinIdBestMatchMap.containsKey(String.valueOf(proteinId))) {            LOGGER.warn("Protein Id: " + proteinId + ", model Id: "+ modelId+ " already present in passed blasted proteins map - ignored");          }          blastedProteinIdBestMatchMap.put(proteinId,bestMatch);        }      }    }  }  PirsfFileUtil.writeProteinBestMatchesToFile(blastedMatchesFilePath,blastedProteinIdBestMatchMap);}  }
class C{  public void shutdown(){  logger.info("Shutting down echo server");  shutdownRequested=true;  socketService.close();  serverThread.interrupt();  try {    serverThread.join(5000);  } catch (  InterruptedException e) {    logger.warn("Unable to shut down echo server");  }}  }
class C{  public static void checkScript(String text){  if (containsScript(text)) {    throw new BotException("For security reasons, script and iframe tags are not allowed");  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.097 -0500",hash_original_method="EC9B4AFBEF6A967243E7EC5889FB4591",hash_generated_method="EC9B4AFBEF6A967243E7EC5889FB4591") void init(AccessibilityRecord record){  mSealed=record.mSealed;  mBooleanProperties=record.mBooleanProperties;  mCurrentItemIndex=record.mCurrentItemIndex;  mItemCount=record.mItemCount;  mFromIndex=record.mFromIndex;  mToIndex=record.mToIndex;  mScrollX=record.mScrollX;  mScrollY=record.mScrollY;  mMaxScrollX=record.mMaxScrollX;  mMaxScrollY=record.mMaxScrollY;  mAddedCount=record.mAddedCount;  mRemovedCount=record.mRemovedCount;  mClassName=record.mClassName;  mContentDescription=record.mContentDescription;  mBeforeText=record.mBeforeText;  mParcelableData=record.mParcelableData;  mText.addAll(record.mText);  mSourceWindowId=record.mSourceWindowId;  mSourceViewId=record.mSourceViewId;  mConnectionId=record.mConnectionId;}  }
class C{  public static ProjectConfigDto asDto(RegisteredProject project){  return newDto(ProjectConfigDto.class).withName(project.getName()).withPath(project.getPath()).withDescription(project.getDescription()).withSource(asDto(project.getSource())).withAttributes(project.getAttributes()).withType(project.getProjectType().getId()).withMixins(project.getMixinTypes().keySet().stream().collect(Collectors.toList())).withProblems(project.getProblems().stream().map(null).collect(Collectors.toList()));}  }
class C{  public Get(Class<?> type,String name){  super(type);  this.name=name;}  }
class C{  public void writeAll(ResultSet rs,boolean includeColumnNames) throws SQLException, IOException {  writeAll(rs,includeColumnNames,false);}  }
class C{  private void validationSecurityUser(HttpSession session,Integer bookID,Integer folderID,UseCaseConf useCaseConf) throws BookException, SessionException, ValidationException {  ScrRegstate scrregstate=BookSession.getBook(useCaseConf.getSessionID(),bookID);  if (scrregstate.getState() == ISicresKeys.BOOK_STATE_CLOSED) {    _logger.warn("El libro [" + bookID + "] esta cerrado no se puede modificar el registro ["+ folderID+ "]");    throw new BookException(BookException.ERROR_BOOK_CLOSE);  }  Integer idFolderAux=null;  if (folderID == null) {    idFolderAux=(Integer)session.getAttribute(Keys.J_REGISTER);  } else {    idFolderAux=folderID;  }  if ((idFolderAux != null) && (idFolderAux.intValue() != -1)) {    int size=FolderSession.getCountRegisterByIdReg(useCaseConf.getSessionID(),useCaseConf.getEntidadId(),bookID,idFolderAux);    if (size == 0) {      _logger.warn("El usuario [" + useCaseConf.getUserName() + "] no tiene acceso al registro ["+ idFolderAux+ "] del Libro ["+ bookID+ "] con lo que no puede modificarlo");      throw new BookException(BookException.ERROR_UPDATE_FOLDER);    }  }}  }
class C{  public CSVFieldChunkReader(String filename,char delimiter,char quote,int skip,int field) throws FileNotFoundException {  this.csvReader=new PeekableCSVReader(new FileReader(filename),delimiter,quote,skip);  this.field=field;  readyNextChunk();}  }
class C{  @Override public int run(String[] args) throws Exception {  final long time=System.currentTimeMillis();  final HadoopIndexerOptions options=new HadoopIndexerOptions();  final CmdLineParser parser=new CmdLineParser(options);  try {    parser.parseArgument(args);  } catch (  final CmdLineException e) {    parser.printUsage(System.err);    logger.fatal(e.getMessage());    logger.fatal(usage());    return 1;  }  if (Files.exists(options.getOutputPathString()) && Index.existsIndex(options.getOutputPathString(),ApplicationSetup.TERRIER_INDEX_PREFIX)) {    logger.fatal("Cannot index while index exists at " + options.getOutputPathString() + ","+ ApplicationSetup.TERRIER_INDEX_PREFIX);    return 1;  }  final Job job=createJob(options);  job.getConfiguration().setStrings(INDEXER_ARGS_STRING,args);  options.configureFilterMode(job.getConfiguration());  JobID jobId=null;  boolean ranOK=true;  try {    ranOK=job.waitForCompletion(true);    jobId=job.getJobID();  } catch (  final Exception e) {    logger.error("Problem running job",e);    ranOK=false;  }  if (jobId != null) {    deleteTaskFiles(options.getOutputPathString(),jobId);  }  if (ranOK) {    if (!options.isDocumentPartitionMode()) {      if (job.getNumReduceTasks() > 1) {        mergeLexiconInvertedFiles(options.getOutputPathString(),job.getNumReduceTasks());      }    }    finish(options.getOutputPathString(),options.isDocumentPartitionMode() ? job.getNumReduceTasks() : 1,job.getConfiguration());  }  System.out.println("Time Taken = " + ((System.currentTimeMillis() - time) / 1000) + " seconds");  return 0;}  }
class C{  public static void register(String eventType,Class<? extends Event> eventClass){  typesByString.put(eventType,eventClass);}  }
class C{  public void add(int index,E element){  checkPositionIndex(index);  if (index == size)   linkLast(element); else   linkBefore(element,node(index));}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  Toast.getToast().shutdownSafely();}  }
class C{  public SchematicCommands(final WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  public DelegatingDatagramSocket(int port) throws SocketException {  this(null,new InetSocketAddress(port));}  }
class C{  @Override public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition pos){  String l_hex=Long.toHexString(number).toUpperCase();  int l_pad=this.m_numDigits - l_hex.length();  l_pad=(0 < l_pad) ? l_pad : 0;  StringBuffer l_extended=new StringBuffer("0x");  for (int i=0; i < l_pad; i++) {    l_extended.append(0);  }  l_extended.append(l_hex);  return l_extended;}  }
class C{  private AggregatorUtils(){}  }
class C{  static private byte[] toBytes(ASN1OctetString[] octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.length; i++) {    try {      DEROctetString o=(DEROctetString)octs[i];      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs[i].getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  public static int calcAfterLineEnd(Editor editor){  Document document=editor.getDocument();  CaretModel caretModel=editor.getCaretModel();  LogicalPosition logicalPosition=caretModel.getLogicalPosition();  int lineNumber=logicalPosition.line;  int columnNumber=logicalPosition.column;  if (lineNumber >= document.getLineCount()) {    return columnNumber;  }  int caretOffset=caretModel.getOffset();  int anchorLineEndOffset=document.getLineEndOffset(lineNumber);  List<? extends SoftWrap> softWraps=editor.getSoftWrapModel().getSoftWrapsForLine(logicalPosition.line);  for (  SoftWrap softWrap : softWraps) {    if (!editor.getSoftWrapModel().isVisible(softWrap)) {      continue;    }    int softWrapOffset=softWrap.getStart();    if (softWrapOffset == caretOffset) {      VisualPosition position=editor.offsetToVisualPosition(caretOffset - 1);      VisualPosition visualCaret=caretModel.getVisualPosition();      if (position.line == visualCaret.line) {        return visualCaret.column - position.column - 1;      }    }    if (softWrapOffset > caretOffset) {      anchorLineEndOffset=softWrapOffset;      break;    }    if (softWrapOffset == caretOffset) {      boolean visuallyBeforeSoftWrap=caretModel.getVisualPosition().line < editor.offsetToVisualPosition(caretOffset).line;      if (visuallyBeforeSoftWrap) {        anchorLineEndOffset=softWrapOffset;        break;      }    }  }  int lineEndColumnNumber=editor.offsetToLogicalPosition(anchorLineEndOffset).column;  return columnNumber - lineEndColumnNumber;}  }
class C{  public String Frie_Status(String value){  String retValue="N";  if (value != null && value.equals("A"))   retValue="Y";  return retValue;}  }
class C{  public JSONObject serialize() throws JSONException {  JSONObject data=new JSONObject();  data.put(KEY_VISIBLE,mVisible);  data.put(KEY_ICON,mIcon);  data.put(KEY_ICON_URI,(mIconUri == null ? null : mIconUri.toString()));  data.put(KEY_STATUS,mStatus);  data.put(KEY_EXPANDED_TITLE,mExpandedTitle);  data.put(KEY_EXPANDED_BODY,mExpandedBody);  data.put(KEY_CLICK_INTENT,(mClickIntent == null) ? null : mClickIntent.toUri(0));  data.put(KEY_CONTENT_DESCRIPTION,mContentDescription);  return data;}  }
class C{  public static Object invokeStaticMethod(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {  Interpreter.debug("invoke static Method");  Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true);  return invokeMethod(method,null,args);}  }
class C{  public static String readTemplate(String resource){  InputStream in=MailHelper.class.getResourceAsStream(resource);  try {    return IOUtils.toString(in,"UTF-8");  } catch (  IOException e) {    throw new Error(e);  }}  }
class C{  public void onDestroy(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onDestroy();    }  }}  }
class C{  public void test3() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00",new BigDecimal(2.0D));  VOMarketplace marketplace=supplierData.getMarketplace(0);  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customer=registerCustomer(supplierData);  VOServiceDetails srv1=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1");  VOServiceDetails srv2=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv2");  updateMarketplaceRevenueShare(10.0D,marketplace.getMarketplaceId());  VOSubscriptionDetails subscr=subscribe(customer.getAdminUser(),"srv1_subscr1",srv1,"2013-08-01 12:00:00","ADMIN");  VOServiceDetails upgrSrv1=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,srv1,"srv1" + "_upgr");  upgrade(customer.getAdminUser(),subscr,upgrSrv1,"2013-08-08 15:00:00");  subscribe(customer.getAdminUser(),"srv2_subscr1",srv2,"2013-08-12 12:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("test3",new TestData(supplierData));}  }
class C{  public UnicastRef(LiveRef liveRef){  ref=liveRef;}  }
class C{  public RecursiveTreeItem(final T value,Callback<RecursiveTreeObject<T>,ObservableList<T>> func){  this(value,(Node)null,func);}  }
class C{  public void save(){  saved_pos=pos;}  }
class C{  public CharSeq toLowerCase(){  return new CharSeq(str.toLowerCase());}  }
class C{  public static ArchiveFld createArchiveFld(){  return new ArchiveFldImpl();}  }
class C{  public int filterRGB(int x,int y,int rgb){  return (rgb & 0xff000000) | (filter(rgb >> 16) << 16) | (filter(rgb >> 8) << 8)| (filter(rgb));}  }
class C{  @Override public String encode(String alignment){  if (alignment == null) {    throw new NullPointerException("Alignment must not be null");  }  if (alignment.length() == 0) {    throw new IllegalArgumentException("Alignment must not be empty");  }  StringBuilder sb=new StringBuilder();  for (  char c : alignment.toCharArray()) {    String s;    if (Character.isUpperCase(c)) {      s=MATCH_STR;    } else     if (Character.isLowerCase(c)) {      s=INSERT_STR;    } else     if (c == DELETE_SYMBOL) {      s=DELETE_STR;    } else     if (c == '.') {      s=null;    } else {      throw new IllegalArgumentException("Alignment contains unrecognised characters " + "(must contain letters or " + String.valueOf(DELETE_SYMBOL) + "): "+ alignment);    }    if (s != null) {      sb.append(s);    }  }  return RunLengthEncoding.encode(sb.toString());}  }
class C{  public final DoubleGrid3D multiply(IntGrid3D withThis){  checkBounds(withThis);  int[][][] otherField=withThis.field;  int[][] ofieldx=null;  int[] ofieldxy=null;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++) {      ofieldxy=ofieldx[y];      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]*=ofieldxy[z];    }  }  return this;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public StreamingJsonBuilder(Writer writer){  this.writer=writer;  generator=JsonOutput.DEFAULT_GENERATOR;}  }
class C{  private ExtensionMapping migrateExtensionMapping(ExtensionMapping extensionMapping,Extension newer,Set<ExtensionProperty> deprecated){  log.debug("Migrating extension mapping...");  extensionMapping.setExtension(newer);  for (  ExtensionProperty deprecatedProperty : deprecated) {    Term replacedBy=TERMS_REPLACED_BY_ANOTHER_TERM.get(deprecatedProperty.qualifiedName());    if (replacedBy != null && newer.getProperty(replacedBy) != null && !extensionMapping.isMapped(replacedBy)) {      PropertyMapping pm=extensionMapping.getField(deprecatedProperty.qualifiedName());      ExtensionProperty ep=newer.getProperty(replacedBy);      if (pm != null && ep != null) {        pm.setTerm(ep);        log.debug("Mapping to deprecated term " + deprecatedProperty.qualifiedName() + " has been migrated to term "+ replacedBy.qualifiedName());      }    } else {      log.debug("Mapping to deprecated term " + deprecatedProperty.qualifiedName() + " cannot be migrated therefore it is being removed!");      removePropertyMapping(extensionMapping,deprecatedProperty.qualifiedName());    }  }  return extensionMapping;}  }
class C{  public boolean cached(){  return cached;}  }
class C{  private void saveAndClose(){  String savedMusicottUserFolder=preferences.getMusicottUserFolder();  String newMusicottUserFolder=folderLocationTextField.getText();  if (!savedMusicottUserFolder.equals(newMusicottUserFolder))   changeMusicottUserFolder(newMusicottUserFolder);  String policy=itunesImportPolicyCheckBox.getSelectionModel().getSelectedItem();  if (policy.equals(ITUNES_INFO))   preferences.setItunesImportMetadataPolicy(ITUNES_DATA_POLICY); else   if (policy.equals(METADATA_INFO))   preferences.setItunesImportMetadataPolicy(METADATA_POLICY);  ObservableList<String> checkedItems=extensionsCheckComboBox.getCheckModel().getCheckedItems();  String[] newExtensions=new String[checkedItems.size()];  newExtensions=checkedItems.toArray(newExtensions);  preferences.setImportFilterExtensions(newExtensions);  preferences.setItunesImportHoldPlaycount(holdPlayCountCheckBox.isSelected());  preferences.setItunesImportPlaylists(importPlaylistsCheckBox.isSelected());  okButton.getScene().getWindow().hide();}  }
class C{  protected PlusMult(final double multiplicator){  this.multiplicator=multiplicator;}  }
class C{  public int lookupId(String featureName){  int featureHash=getFeatureHash(featureName);  return feature2Id.get(featureHash);}  }
class C{  protected boolean beforeDelete(){  if (isStoreAttachmentsOnFileSystem) {    for (int i=0; i < m_items.size(); i++) {      final MAttachmentEntry entry=m_items.get(i);      final File file=entry.getFile();      if (file != null && file.exists()) {        if (!file.delete()) {          log.warning("unable to delete " + file.getAbsolutePath());        }      }    }    final File folder=new File(m_attachmentPathRoot + getAttachmentPathSnippet());    if (folder.exists()) {      if (!folder.delete()) {        log.warning("unable to delete " + folder.getAbsolutePath());      }    }  }  return true;}  }
class C{  public boolean shouldClearDFAs(){  return cmd != null && cmd.hasOption(Messages.PURGE_OPT);}  }
class C{  public LLVMAddress allocate(){  return allocate(STACK_SIZE_BYTE);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void readObject(){}  }
class C{  public BinaryTupleOperator(TupleExpr leftArg,TupleExpr rightArg){  setLeftArg(leftArg);  setRightArg(rightArg);}  }
class C{  public boolean unregisterClient(UnregisterProfile profile,ServerConfig utils,Context context,APIResultCallBack apiResultCallback) throws AndroidAgentException {  StringBuilder endPoint=new StringBuilder();  endPoint.append(utils.getAPIServerURL(context));  endPoint.append(Constants.DYNAMIC_CLIENT_REGISTER_ENDPOINT);  endPoint.append("?" + USER_ID + "="+ profile.getUserId());  endPoint.append("&" + CONSUMER_KEY + "="+ profile.getConsumerKey());  endPoint.append("&" + APPLICATION_NAME + "="+ profile.getApplicationName());  EndPointInfo endPointInfo=new EndPointInfo();  endPointInfo.setHttpMethod(org.wso2.emm.agent.proxy.utils.Constants.HTTP_METHODS.DELETE);  endPointInfo.setEndPoint(endPoint.toString());  sendRequest(endPointInfo,apiResultCallback,Constants.DYNAMIC_CLIENT_UNREGISTER_REQUEST_CODE);  return true;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public BatchFraction defaultJobRepository(final JDBCJobRepository<?> jobRepository){  return defaultJobRepository(jobRepository.getKey());}  }
class C{  public BubbleXYItemLabelGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat,NumberFormat zFormat){  super(formatString,xFormat,yFormat);  ParamChecks.nullNotPermitted(zFormat,"zFormat");  this.zFormat=zFormat;}  }
class C{  public void doFinalOrientation(Graph graph){  if (completeRuleSetUsed) {    zhangFinalOrientation(graph);  } else {    spirtesFinalOrientation(graph);  }}  }
class C{  private void doEM() throws Exception {  if (m_verbose) {    System.out.println("Seed: " + getSeed());  }  m_rr=new Random(getSeed());  for (int i=0; i < 10; i++) {    m_rr.nextDouble();  }  m_num_instances=m_theInstances.numInstances();  m_num_attribs=m_theInstances.numAttributes();  if (m_verbose) {    System.out.println("Number of instances: " + m_num_instances + "\nNumber of atts: "+ m_num_attribs+ "\n");  }  startExecutorPool();  if (m_initialNumClusters == -1) {    if (m_theInstances.numInstances() > 9) {      CVClusters();      m_rr=new Random(getSeed());      for (int i=0; i < 10; i++) {        m_rr.nextDouble();      }    } else {      m_num_clusters=1;    }  }  EM_Init(m_theInstances);  double loglikely=iterate(m_theInstances,m_verbose);  if (m_Debug) {    System.err.println("Current log-likelihood: " + loglikely);  }  m_executorPool.shutdown();}  }
class C{  public void openPart(PartPresenter part,PartStackType type,Constraints constraint){  PartStack destPartStack=partStacks.get(type.toString());  destPartStack.addPart(part,constraint);}  }
class C{  public final ByteBuffer order(ByteOrder byteOrder){  order=byteOrder;  return this;}  }
class C{  public GVTFontFace(String familyName,float unitsPerEm,String fontWeight,String fontStyle,String fontVariant,String fontStretch,float slope,String panose1,float ascent,float descent,float strikethroughPosition,float strikethroughThickness,float underlinePosition,float underlineThickness,float overlinePosition,float overlineThickness){  this.familyName=familyName;  this.unitsPerEm=unitsPerEm;  this.fontWeight=fontWeight;  this.fontStyle=fontStyle;  this.fontVariant=fontVariant;  this.fontStretch=fontStretch;  this.slope=slope;  this.panose1=panose1;  this.ascent=ascent;  this.descent=descent;  this.strikethroughPosition=strikethroughPosition;  this.strikethroughThickness=strikethroughThickness;  this.underlinePosition=underlinePosition;  this.underlineThickness=underlineThickness;  this.overlinePosition=overlinePosition;  this.overlineThickness=overlineThickness;}  }
class C{  @Override public String toString(){  return type instanceof Class<?> ? ((Class<?>)type).getName() : type.toString();}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  public void modPositive(int modulus){  mod(modulus);  ensurePositive(modulus);}  }
class C{  public void beforeEmitGetter(JavaFileWriter writer,PropertyGenerator propertyGenerator,MethodDeclarationParameters getterParams) throws IOException {}  }
class C{  public BufferedImage createImage(int width,int height){  return new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);}  }
class C{  protected int hstrcmp(char[] s,int si,char[] t,int ti){  for (; s[si] == t[ti]; si++, ti++) {    if (s[si] == 0) {      return 0;    }  }  if (t[ti] == 0) {    return 0;  }  return s[si] - t[ti];}  }
class C{  @Override protected void drawGridBandsHorizontal(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,boolean firstGridBandIsDark,List ticks){  double yy=dataArea.getY();  double xx1, xx2;  double outlineStrokeWidth;  if (getPlot().getOutlineStroke() != null) {    outlineStrokeWidth=((BasicStroke)getPlot().getOutlineStroke()).getLineWidth();  } else {    outlineStrokeWidth=1d;  }  Iterator iterator=ticks.iterator();  ValueTick tick;  Rectangle2D band;  while (iterator.hasNext()) {    tick=(ValueTick)iterator.next();    int weightIndex=(int)tick.getValue();    xx1=valueToJava2D(tick.getValue() - 0.5d,dataArea,RectangleEdge.BOTTOM);    xx2=valueToJava2D(tick.getValue() + 0.5d,dataArea,RectangleEdge.BOTTOM);    g2.setColor(PlotterAdapter.getWeightColor(this.weights[weightIndex],this.maxWeight));    band=new Rectangle2D.Double(xx1,yy + outlineStrokeWidth,xx2 - xx1,dataArea.getMaxY() - yy - outlineStrokeWidth);    g2.fill(band);  }  g2.setPaintMode();}  }
class C{  public PlainTextDictionary(Path path) throws IOException {  in=Files.newBufferedReader(path,StandardCharsets.UTF_8);}  }
class C{  public void stop(){  if (engine.isProcessing()) {    LOGGER.info("Stopping and killing pipeline {}",name);    BaseCollectionReader collectionReader=engine.getCollectionReader();    try {      if (collectionReader != null) {        collectionReader.close();      }    } catch (    IOException e) {      LOGGER.warn("Unable to close the collection reader on stop",e);    }    engine.stop();    engine.kill();    try {      if (collectionReader != null) {        collectionReader.destroy();      }    } catch (    Exception e) {      LOGGER.debug("Exception destroying the collection reader on finish",e);    }    metrics.getCounter("stopped").inc();  } else {    LOGGER.debug("Pipeline {} is not processing, and so cannot be stopped",name);  }}  }
class C{  protected void sequence_TypeRefWithModifiers_UnionTypeExpression_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void addURL(URL url,boolean isScanned){  if (containsURL(url)) {    return;  }  super.addURL(url,isScanned);  if (isScanned)   _pendingScanRoots.add(new ScanRoot(url,null));}  }
class C{  public static MVStore open(String fileName){  HashMap<String,Object> config=New.hashMap();  config.put("fileName",fileName);  return new MVStore(config);}  }
class C{  static void toast(Context context,CharSequence text,int duration){  Toast toast=Toast.makeText(context,text,duration);  toast.show();}  }
class C{  public void removeLayoutComponent(Component comp){  m_ComponentToConstraint.remove(comp);}  }
class C{  public Set<ShardId> findAllShardIds(final Index index) throws IOException {  assert index != null;  if (nodePaths == null || locks == null) {    throw new IllegalStateException("node is not configured to store local location");  }  assert assertEnvIsLocked();  final Set<ShardId> shardIds=Sets.newHashSet();  String indexName=index.name();  for (  final NodePath nodePath : nodePaths) {    Path location=nodePath.indicesPath;    if (Files.isDirectory(location)) {      try (DirectoryStream<Path> indexStream=Files.newDirectoryStream(location)){        for (        Path indexPath : indexStream) {          if (indexName.equals(indexPath.getFileName().toString())) {            shardIds.addAll(findAllShardsForIndex(indexPath));          }        }      }     }  }  return shardIds;}  }
class C{  public static double[][] nextWishart(double df,double[][] scaleMatrix){  int dim=scaleMatrix.length;  double[][] draw=new double[dim][dim];  double[][] z=new double[dim][dim];  for (int i=0; i < dim; i++) {    for (int j=0; j < i; j++) {      z[i][j]=MathUtils.nextGaussian();    }  }  for (int i=0; i < dim; i++)   z[i][i]=Math.sqrt(MathUtils.nextGamma((df - i) * 0.5,0.5));  double[][] cholesky=new double[dim][dim];  for (int i=0; i < dim; i++) {    for (int j=i; j < dim; j++)     cholesky[i][j]=cholesky[j][i]=scaleMatrix[i][j];  }  try {    cholesky=(new CholeskyDecomposition(cholesky)).getL();  } catch (  IllegalDimension illegalDimension) {    throw new RuntimeException("Numerical exception in WishartDistribution");  }  double[][] result=new double[dim][dim];  for (int i=0; i < dim; i++) {    for (int j=0; j < dim; j++) {      for (int k=0; k < dim; k++)       result[i][j]+=cholesky[i][k] * z[k][j];    }  }  for (int i=0; i < dim; i++) {    for (int j=0; j < dim; j++) {      for (int k=0; k < dim; k++)       draw[i][j]+=result[i][k] * result[j][k];    }  }  return draw;}  }
class C{  @Override public PathImpl lookupImpl(String userPath,Map<String,Object> newAttributes,boolean isAllowRoot){  return getWrappedPath().lookupImpl(userPath,newAttributes,isAllowRoot);}  }
class C{  public MAVLinkMessage(MAVLinkSchema schema,String msgName,int systemID,int componentID){  this.schema=schema;  this.definition=schema.getMessageDefinition(msgName);  if (definition == null) {    throw new RuntimeException("Unknown mavlink message name: " + msgName);  }  this.payload=new byte[definition.payloadLength];  this.payloadBB=ByteBuffer.wrap(payload);  payloadBB.order(schema.getByteOrder());  this.systemID=systemID;  this.componentID=componentID;  this.msgID=definition.id;}  }
class C{  public boolean hasPasswordChanged(){  return (persistedPassword.equals(password));}  }
class C{  public static ReuseResult loadReuseExact(Uri uri,Context context,Bitmap dest) throws ImageLoadException {  return loadBitmapReuseExact(new UriSource(uri,context),dest);}  }
class C{  protected void doTestInvalidAuthenticator(final boolean multiUser) throws Exception {  CredentialGenerator gen=new DummyCredentialGenerator();  Properties extraProps=gen.getSystemProperties();  Properties javaProps=gen.getJavaProperties();  String authInit=gen.getAuthInit();  getLogWriter().info("testInvalidAuthenticator: Using scheme: " + gen.classCode());  getLogWriter().info("testInvalidAuthenticator: Using authinit: " + authInit);  int locPort1=getLocatorPort();  String locString=getAndClearLocatorString();  server1.invoke(null);}  }
class C{  public DataSourceJNDISpringImpl(){}  }
class C{  public static <T extends PointerBase>T max(T x,T y){  return (((Pointer)x).aboveOrEqual((Pointer)y)) ? x : y;}  }
class C{  public boolean installBackupPackage(final SlingHttpServletRequest request,final String packageName){  return installPackage(request,BACKUP_GROUP,packageName,BACKUP_VERSION,ImportMode.REPLACE,AccessControlHandling.IGNORE);}  }
class C{  @Override protected void onRemoveTopicProtection(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_remove_topic_protection,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  static int compareAltFormat(AltFormat a,AltFormat b){  return compareString((a == null) ? null : a.getName(),(b == null) ? null : b.getName());}  }
class C{  public ASN1InputStream(byte[] input,boolean lazyEvaluate){  this(new ByteArrayInputStream(input),input.length,lazyEvaluate);}  }
class C{  public static IProposalComputer newUiFieldProposalComputer(ContentAssistRequest contentAssistRequest,IJavaProject javaProject){  IDOMAttr attribute=XmlContentAssistUtilities.getAttribute(contentAssistRequest);  if (attribute == null || attribute.getOwnerElement() == null) {    return null;  }  if (!attribute.equals(UiBinderXmlModelUtilities.getFieldAttribute(attribute.getOwnerElement()))) {    return null;  }  IFile f=SseUtilities.resolveFile(contentAssistRequest.getDocumentRegion().getParentDocument());  Set<IType> subtypes=UiBinderUtilities.getSubtypesFromXml(f,javaProject);  if (subtypes.isEmpty()) {    return null;  }  String attrValue=XmlContentAssistUtilities.getAttributeValueUsingMatchString(contentAssistRequest);  return new UiFieldProposalComputer(subtypes,UiBinderXmlModelUtilities.computeQualifiedWidgetTypeName(attribute.getOwnerElement()),javaProject,attrValue,XmlContentAssistUtilities.getAttributeValueOffset(contentAssistRequest),attrValue.length());}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @Override public String toString(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append(String.format("%s - %s - %s",getValidationEventSeverity(),getLineNumber(),getErrorMessage()));  return stringBuilder.toString();}  }
class C{  Vect constructBEGraph(OrderOfSolution os){  Vect initNodes=new Vect(1);  int slen=os.getCheckState().length;  int alen=os.getCheckAction().length;  TLCState srcState=stateTrace.elementAt(0);  long srcFP=srcState.fingerPrint();  boolean[] checkStateRes=os.checkState(srcState);  boolean[] checkActionRes=os.checkAction(srcState,srcState);  if (!os.hasTableau()) {    LongObjTable allNodes=new LongObjTable(127);    BEGraphNode srcNode=new BEGraphNode(srcFP);    srcNode.setCheckState(checkStateRes);    srcNode.addTransition(srcNode,slen,alen,checkActionRes);    allNodes.put(srcFP,srcNode);    initNodes.addElement(srcNode);    for (int i=1; i < stateTrace.size(); i++) {      TLCState destState=stateTrace.elementAt(i);      long destFP=destState.fingerPrint();      BEGraphNode destNode=(BEGraphNode)allNodes.get(destFP);      if (destNode == null) {        destNode=new BEGraphNode(destFP);        destNode.setCheckState(os.checkState(srcState));        destNode.addTransition(destNode,slen,alen,os.checkAction(destState,destState));        srcNode.addTransition(destNode,slen,alen,os.checkAction(srcState,destState));        allNodes.put(destFP,destNode);      } else       if (!srcNode.transExists(destNode)) {        srcNode.addTransition(destNode,slen,alen,os.checkAction(srcState,destState));      }      srcNode=destNode;      srcState=destState;    }  } else {    LongObjTable allNodes=new LongObjTable(255);    Vect srcNodes=new Vect();    int initCnt=os.getTableau().getInitCnt();    for (int i=0; i < initCnt; i++) {      TBGraphNode tnode=os.getTableau().getNode(i);      if (tnode.isConsistent(srcState,myTool)) {        BEGraphNode destNode=new BTGraphNode(srcFP,tnode.getIndex());        destNode.setCheckState(checkStateRes);        initNodes.addElement(destNode);        srcNodes.addElement(destNode);        allNodes.put(FP64.Extend(srcFP,tnode.getIndex()),destNode);      }    }    for (int i=0; i < srcNodes.size(); i++) {      BEGraphNode srcNode=(BEGraphNode)srcNodes.elementAt(i);      TBGraphNode tnode=srcNode.getTNode(os.getTableau());      for (int j=0; j < tnode.nextSize(); j++) {        TBGraphNode tnode1=tnode.nextAt(j);        long destFP=FP64.Extend(srcFP,tnode1.getIndex());        BEGraphNode destNode=(BEGraphNode)allNodes.get(destFP);        if (destNode != null) {          srcNode.addTransition(destNode,slen,alen,checkActionRes);        }      }    }    for (int i=1; i < stateTrace.size(); i++) {      Vect destNodes=new Vect();      TLCState destState=stateTrace.elementAt(i);      long destStateFP=destState.fingerPrint();      checkStateRes=os.checkState(destState);      checkActionRes=os.checkAction(srcState,destState);      for (int j=0; j < srcNodes.size(); j++) {        BEGraphNode srcNode=(BEGraphNode)srcNodes.elementAt(j);        TBGraphNode tnode=srcNode.getTNode(os.getTableau());        for (int k=0; k < tnode.nextSize(); k++) {          TBGraphNode tnode1=tnode.nextAt(k);          long destFP=FP64.Extend(destStateFP,tnode1.getIndex());          BEGraphNode destNode=(BEGraphNode)allNodes.get(destFP);          if (destNode == null) {            if (tnode1.isConsistent(destState,myTool)) {              destNode=new BTGraphNode(destStateFP,tnode1.getIndex());              destNode.setCheckState(checkStateRes);              srcNode.addTransition(destNode,slen,alen,checkActionRes);              destNodes.addElement(destNode);              allNodes.put(destFP,destNode);            }          } else           if (!srcNode.transExists(destNode)) {            srcNode.addTransition(destNode,slen,alen,checkActionRes);          }        }      }      checkActionRes=os.checkAction(destState,destState);      for (int j=0; j < destNodes.size(); j++) {        BEGraphNode srcNode=(BEGraphNode)destNodes.elementAt(j);        TBGraphNode tnode=srcNode.getTNode(os.getTableau());        for (int k=0; k < tnode.nextSize(); k++) {          TBGraphNode tnode1=tnode.nextAt(k);          long destFP=FP64.Extend(destStateFP,tnode1.getIndex());          BEGraphNode destNode=(BEGraphNode)allNodes.get(destFP);          if (destNode == null) {            if (tnode1.isConsistent(destState,myTool)) {              destNode=new BTGraphNode(destStateFP,tnode1.getIndex());              destNode.setCheckState(checkStateRes);              srcNode.addTransition(destNode,slen,alen,checkActionRes);              destNodes.addElement(destNode);              allNodes.put(destFP,destNode);            }          } else           if (!srcNode.transExists(destNode)) {            srcNode.addTransition(destNode,slen,alen,checkActionRes);          }        }      }      srcNodes=destNodes;      srcState=destState;    }  }  return initNodes;}  }
class C{  public boolean isHoverStyled(Element e){  return _matcher.isHoverStyled(e);}  }
class C{  public boolean isGroup(){  return group;}  }
class C{  public static Builder create(){  return new Builder();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.UNIT_NAME__REF:    setRef((UnitFakeDefinition)null);  return;}super.eUnset(featureID);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void run(){  this.delegate.run();}  }
class C{  private double calculateUseFitnessForCompleteTrace(){  if (hasEntriesForId(result.getTrace().getPassedUses(goalUse.getVariableName()),goalUse.getUseId()))   return 0.0;  double fitness=goalUseFitness.getFitness(individual,result);  if (fitness == 0.0)   return 1.0;  return normalize(fitness);}  }
class C{  public static String generate(String cubeName,String rowCount,String linkableRatio,String randomSeed) throws Exception {  if (rowCount == null)   rowCount="10000";  if (linkableRatio == null)   linkableRatio="0.6";  FactTableGenerator generator=new FactTableGenerator();  long seed;  if (randomSeed != null) {    seed=Long.parseLong(randomSeed);  } else {    Random r=new Random();    seed=r.nextLong();  }  generator.init(cubeName,Integer.parseInt(rowCount),5,Double.parseDouble(linkableRatio),seed);  generator.prepare();  return generator.cookData();}  }
class C{  public double[][] readDoubleMatrix(String fname) throws IOException {  try {    String fnamemtd=DataExpression.getMTDFileName(fname);    JSONObject jmtd=new DataExpression().readMetadataFile(fnamemtd,false);    long rows=jmtd.getLong(DataExpression.READROWPARAM);    long cols=jmtd.getLong(DataExpression.READCOLPARAM);    int brlen=jmtd.containsKey(DataExpression.ROWBLOCKCOUNTPARAM) ? jmtd.getInt(DataExpression.ROWBLOCKCOUNTPARAM) : -1;    int bclen=jmtd.containsKey(DataExpression.COLUMNBLOCKCOUNTPARAM) ? jmtd.getInt(DataExpression.COLUMNBLOCKCOUNTPARAM) : -1;    long nnz=jmtd.containsKey(DataExpression.READNUMNONZEROPARAM) ? jmtd.getLong(DataExpression.READNUMNONZEROPARAM) : -1;    String format=jmtd.getString(DataExpression.FORMAT_TYPE);    InputInfo iinfo=InputInfo.stringExternalToInputInfo(format);    return readDoubleMatrix(fname,iinfo,rows,cols,brlen,bclen,nnz);  } catch (  Exception ex) {    throw new IOException(ex);  }}  }
class C{  public static long parse(String[] options,char option,long defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  private void addArg(String arg){  findbugsEngine.createArg().setValue(arg);}  }
class C{  public Output(String css,String sourceMap){  this.css=css;  this.sourceMap=sourceMap;}  }
class C{  public byte[] engineCanonicalizeSubTree(Node rootNode,String inclusiveNamespaces,Node excl) throws CanonicalizationException {  inclusiveNSSet=InclusiveNamespaces.prefixStr2Set(inclusiveNamespaces);  return super.engineCanonicalizeSubTree(rootNode,excl);}  }
class C{  void disconnect(long quiesceTimeout,String invocationContext,String activityToken){  service.traceDebug(TAG,"disconnect()");  disconnected=true;  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.DISCONNECT_ACTION);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.disconnect(quiesceTimeout,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.DISCONNECT_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  if (connectOptions != null && connectOptions.isCleanSession()) {    service.messageStore.clearArrivedMessages(clientHandle);  }  releaseWakeLock();}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  @Override protected Object resolve(final Object arg0){  final byte[] bytes=((ITuple)arg0).getValue();  return IVUtility.decode(bytes);}  }
class C{  public Item(@NonNull final Context context,final int id,@StringRes final int resourceId){  this(id,context.getText(resourceId));}  }
class C{  String readLiteral(String source,int ofs,String token){  return source.substring(ofs,ofs + token.length());}  }
class C{  @SuppressWarnings({"static-access"}) public int run(String[] args) throws Exception {  Options options=new Options();  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("input path").create(INPUT));  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("output path").create(OUTPUT));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("number of nodes").create(NUM_NODES));  CommandLine cmdline;  CommandLineParser parser=new GnuParser();  try {    cmdline=parser.parse(options,args);  } catch (  ParseException exp) {    System.err.println("Error parsing command line: " + exp.getMessage());    return -1;  }  if (!cmdline.hasOption(INPUT) || !cmdline.hasOption(OUTPUT) || !cmdline.hasOption(NUM_NODES)) {    System.out.println("args: " + Arrays.toString(args));    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp(this.getClass().getName(),options);    ToolRunner.printGenericCommandUsage(System.out);    return -1;  }  String inputPath=cmdline.getOptionValue(INPUT);  String outputPath=cmdline.getOptionValue(OUTPUT);  int n=Integer.parseInt(cmdline.getOptionValue(NUM_NODES));  LOG.info("Tool name: " + BuildPageRankRecords.class.getSimpleName());  LOG.info(" - inputDir: " + inputPath);  LOG.info(" - outputDir: " + outputPath);  LOG.info(" - numNodes: " + n);  Configuration conf=getConf();  conf.setInt(NODE_CNT_FIELD,n);  conf.setInt("mapred.min.split.size",1024 * 1024 * 1024);  Job job=Job.getInstance(conf);  job.setJobName(BuildPageRankRecords.class.getSimpleName() + ":" + inputPath);  job.setJarByClass(BuildPageRankRecords.class);  job.setNumReduceTasks(0);  FileInputFormat.addInputPath(job,new Path(inputPath));  FileOutputFormat.setOutputPath(job,new Path(outputPath));  job.setInputFormatClass(TextInputFormat.class);  job.setOutputFormatClass(SequenceFileOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(PageRankNode.class);  job.setOutputKeyClass(IntWritable.class);  job.setOutputValueClass(PageRankNode.class);  job.setMapperClass(MyMapper.class);  FileSystem.get(conf).delete(new Path(outputPath),true);  job.waitForCompletion(true);  return 0;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean isRejectMaxMessageSizeExceeded(){  return fieldRejectMaxMessageSizeExceeded;}  }
class C{  public static boolean writeFile(String filePath,InputStream stream){  OutputStream o=null;  try {    o=new FileOutputStream(filePath);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (o != null) {      try {        o.close();        stream.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  public static org.opcfoundation.ua.transport.security.KeyPair renewApplicationInstanceCertificate(String commonName,String organisation,String applicationUri,int validityTime,org.opcfoundation.ua.transport.security.KeyPair oldKeys,org.opcfoundation.ua.transport.security.KeyPair issuerKeys,String... hostNames) throws IOException, IllegalStateException, GeneralSecurityException {  if (applicationUri == null)   throw new NullPointerException("applicationUri must not be null");  PublicKey certPubKey=oldKeys.getCertificate().getCertificate().getPublicKey();  RSAPrivateKey certPrivKey=oldKeys.getPrivateKey().getPrivateKey();  X509Certificate cert=generateCertificate("CN=" + commonName + (organisation == null ? "" : ", O=" + organisation),validityTime,applicationUri,new KeyPair(certPubKey,certPrivKey),issuerKeys,hostNames);  Cert certificate=new Cert(cert);  org.opcfoundation.ua.transport.security.PrivKey UAkey=new org.opcfoundation.ua.transport.security.PrivKey((RSAPrivateKey)certPrivKey);  return new org.opcfoundation.ua.transport.security.KeyPair(certificate,UAkey);}  }
class C{  public void internalBegin() throws ResourceException {  if (xid != null) {    if (mc.isXidActive(xid))     throw new FBResourceTransactionException("Local transaction active: can't begin another",SQLStateConstants.SQL_STATE_TRANSACTION_ACTIVE);  }  xid=new FBLocalXid();  try {    mc.internalStart(xid,XAResource.TMNOFLAGS);  } catch (  XAException|SQLException ex) {    xid=null;    throw new FBResourceException(ex);  }  if (beginEvent != null)   mc.notify(FBManagedConnection.localTransactionStartedNotifier,beginEvent);}  }
class C{  public Period normalizedStandard(){  return normalizedStandard(PeriodType.standard());}  }
class C{  protected final void CALL(Instruction s){  Operand target=Call.getClearAddress(s);  MethodOperand meth=Call.getClearMethod(s);  int numParams=Call.getNumberOfParams(s);  int longParams=0;  if (VM.BuildFor32Addr) {    for (int pNum=0; pNum < numParams; pNum++) {      if (Call.getParam(s,pNum).getType().isLongType()) {        longParams++;      }    }  }  RegisterOperand result=Call.getClearResult(s);  RegisterOperand result2=null;  if (VM.BuildFor32Addr) {    if (result != null && result.getType().isLongType()) {      result2=I(regpool.getSecondReg(result.getRegister()));    }  }  Operator callOp;  if (target instanceof RegisterOperand) {    Register ctr=regpool.getPhysicalRegisterSet().asPPC().getCTR();    EMIT(MIR_Move.create(PPC_MTSPR,A(ctr),(RegisterOperand)target));    target=null;    callOp=PPC_BCTRL;  } else   if (target instanceof BranchOperand) {    callOp=PPC_BL;  } else {    throw new OptimizingCompilerException("Unexpected target operand " + target + " to call "+ s);  }  Operand[] params=new Operand[numParams];  for (int i=0; i < numParams; i++) {    params[i]=Call.getClearParam(s,i);  }  BranchOperand callTarget=(BranchOperand)target;  EMIT(MIR_Call.mutate(s,callOp,result,result2,callTarget,meth,numParams + longParams));  for (int paramIdx=0, mirCallIdx=0; paramIdx < numParams; ) {    Operand param=params[paramIdx++];    MIR_Call.setParam(s,mirCallIdx++,param);    if (VM.BuildFor32Addr) {      if (param instanceof RegisterOperand) {        RegisterOperand rparam=(RegisterOperand)param;        if (rparam.getType().isLongType()) {          MIR_Call.setParam(s,mirCallIdx++,L(regpool.getSecondReg(rparam.getRegister())));        }      }    }  }}  }
class C{  public void onClick(View v){  if (v == mPopupView) {    switchViews(true);  }}  }
class C{  public void onPurchased(boolean withFingerprint,@Nullable FingerprintManager.CryptoObject cryptoObject){  if (withFingerprint) {    assert cryptoObject != null;    tryEncrypt(cryptoObject.getCipher());  } else {    showConfirmation(null);  }}  }
class C{  public Resources(AssetManager assets,DisplayMetrics metrics,Configuration config,CompatibilityInfo compInfo){  mAssets=assets;  mMetrics.setToDefaults();  mCompatibilityInfo=compInfo;  updateConfiguration(config,metrics);  assets.ensureStringBlocks();}  }
class C{  public static <W>ArrayEncodedCachingLmWrapper<W> wrapWithCacheNotThreadSafe(final ArrayEncodedNgramLanguageModel<W> lm){  return wrapWithCacheNotThreadSafe(lm,18);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.586 -0400",hash_original_method="7C6E04592353FCD39AE43BAC80FC89F3",hash_generated_method="FBC2392DE9BFB96CFE30E428C34214D9") public static Thread start(long timeout){  return start(Thread.currentThread(),timeout);}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  public void testRewriteAndMtq() throws IOException {  indexWriter.addDocument(newDoc("alpha bravo charlie - charlie bravo alpha"));  initReaderSearcherHighlighter();  SpanNearQuery snq=new SpanNearQuery(new SpanQuery[]{new SpanTermQuery(new Term("body","bravo")),new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term("body","ch")))},0,true);  BooleanQuery query=new BooleanQuery.Builder().add(snq,BooleanClause.Occur.MUST).add(new PrefixQuery(new Term("body","al")),BooleanClause.Occur.MUST).add(newPhraseQuery("body","alpha bravo"),BooleanClause.Occur.MUST).add(newPhraseQuery("title","bravo alpha"),BooleanClause.Occur.SHOULD).build();  TopDocs topDocs=searcher.search(query,10,Sort.INDEXORDER);  String[] snippets=highlighter.highlight("body",query,topDocs);  assertArrayEquals(new String[]{"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo <b>alpha</b>"},snippets);  highlighter.setHandleMultiTermQuery(false);  topDocs=searcher.search(query,10,Sort.INDEXORDER);  snippets=highlighter.highlight("body",query,topDocs);  assertArrayEquals(new String[]{"<b>alpha</b> <b>bravo</b> charlie - charlie bravo alpha"},snippets);}  }
class C{  protected String paramString(){  String rootPaneString=(rootPane != null ? rootPane.toString() : "");  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  return super.paramString() + ",rootPane=" + rootPaneString+ ",rootPaneCheckingEnabled="+ rootPaneCheckingEnabledString;}  }
class C{  public static double mean(double[] vector){  double sum=0;  if (vector.length == 0) {    return 0;  }  for (  double element : vector) {    sum+=element;  }  return sum / vector.length;}  }
class C{  public Boolean isAllow(){  return allow;}  }
class C{  public Wine runBackground(String executableToRun,List<String> arguments,Map<String,String> environment) throws ScriptFailureException {  runBackground(this.prefix.getWinePrefixDirectory(),executableToRun,arguments,environment);  return this;}  }
class C{  public ClientResponse post(URI uri,String body){  return client.resource(uri).type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class,body);}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.writeObject(iInstant);  oos.writeObject(iField.getType());}  }
class C{  static public void assertEquals(String message,char expected,char actual){  assertEquals(message,new Character(expected),new Character(actual));}  }
class C{  public ChangeableHighlightPainter(Paint paint,boolean rounded){  this(paint,rounded,1.0f);}  }
class C{  public void ping(){}  }
class C{  @RolesAllowed({"PLATFORM_OPERATOR"}) public String checkAreAllItemsTranslated(List<Map<String,Properties>> propertiesMaps,String importLanguageCode) throws PropertiesImportException, ObjectNotFoundException {  String defaultLanguageCode=getDefaultLanguage() + StandardLanguage.COLUMN_HEADING_SUFFIX;  for (  Map<String,Properties> propertiesMap : propertiesMaps) {    Properties defaultLanguageProperties=propertiesMap.get(defaultLanguageCode);    Properties importLanguageProperties=propertiesMap.get(importLanguageCode);    Set<Object> keys=defaultLanguageProperties.keySet();    for (    Object key : keys) {      String defaultPropertyValue=defaultLanguageProperties.get(key.toString()).toString().trim();      if (defaultPropertyValue.length() == 0) {        continue;      }      if (importLanguageProperties.containsKey(key)) {        Object importPropertyValue=importLanguageProperties.get(key.toString());        if (importPropertyValue != null && importPropertyValue.toString().length() > 0) {          continue;        }      }      PropertiesImportException propertiesImportException=new PropertiesImportException(PropertiesImportException.Reason.TRANSLATIONS_MISSING);      logger.logWarn(Log4jLogger.SYSTEM_LOG,propertiesImportException,LogMessageIdentifier.WARN_TRANSLATIONS_MISSING_FOR_IMPORT_PROPERTIES);      return propertiesImportException.getMessageKey();    }  }  return null;}  }
class C{  public DelegatingDebugConfig(DebugConfig delegate){  this.delegate=delegate;}  }
class C{  static boolean primingNeedsParens(SemanticNode node){  if (!(node instanceof OpApplNode)) {    return false;  }  if (((OpApplNode)node).getArgs().length == 0) {    return false;  }  SymbolNode ops=((OpApplNode)node).getOperator();  if (ops instanceof OpDefNode) {    OpDefNode odn=(OpDefNode)ops;    return (odn.getKind() == ASTConstants.BuiltInKind) || !StringHelper.isIdentifier(odn.getName().toString());  } else {    return false;  }}  }
class C{  public final void deleteConfirmed(final int id){  if (id == RadioBeacon.SESSION_NOT_TRACKING) {    return;  }  Log.i(TAG,"Deleting session " + id);  EventBus.getDefault().post(new onStopTracking());  mDataHelper.deleteSession(id);  final boolean skipDelete=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(Preferences.KEY_KEEP_XML,Preferences.VAL_KEEP_XML);  if (!skipDelete) {    TempFileUtils.cleanTempFiles(this);  }  updateUI();  Toast.makeText(getBaseContext(),R.string.deleted,Toast.LENGTH_SHORT).show();}  }
class C{  @Override public int hashCode(){  if (0 == hashCode)   hashCode=holder.hashCode();  return hashCode;}  }
class C{  private void updateForeground(Color color){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  if (color == null) {    if (style.getAttribute(StyleConstants.Foreground) != null) {      style.removeAttribute(StyleConstants.Foreground);    }  } else {    if (!color.equals(StyleConstants.getForeground(style))) {      StyleConstants.setForeground(style,color);    }  }}  }
class C{  public static byte sum(byte[] array){  byte sum=0;  for (  byte x : array) {    sum+=x;  }  return sum;}  }
class C{  static public void putConsist(Locale locale,DccLocoAddress address,JsonNode data) throws JsonException {  try {    if (!InstanceManager.getDefault(jmri.ConsistManager.class).getConsistList().contains(address)) {      InstanceManager.getDefault(jmri.ConsistManager.class).getConsist(address);      setConsist(locale,address,data);    }  } catch (  NullPointerException ex) {    throw new JsonException(503,Bundle.getMessage(locale,"ErrorNoConsistManager"));  }}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  public BaseThumbnailSetCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public MqttPersistenceException(Throwable cause){  super(cause);}  }
class C{  @Override void onShutdown(){  BlockingQueue<Runnable> q=super.getQueue();  boolean keepDelayed=getExecuteExistingDelayedTasksAfterShutdownPolicy();  boolean keepPeriodic=getContinueExistingPeriodicTasksAfterShutdownPolicy();  if (!keepDelayed && !keepPeriodic) {    for (    Object e : q.toArray())     if (e instanceof RunnableScheduledFuture<?>)     ((RunnableScheduledFuture<?>)e).cancel(false);    q.clear();  } else {    for (    Object e : q.toArray()) {      if (e instanceof RunnableScheduledFuture) {        RunnableScheduledFuture<?> t=(RunnableScheduledFuture<?>)e;        if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) {          if (q.remove(t))           t.cancel(false);        }      }    }  }  tryTerminate();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void drawAttachedSprites(Graphics2D g2d,int x,int y){  Collection<AttachedSprite> sprites=attachedSprites;  if (sprites != null) {    for (    AttachedSprite sprite : sprites) {      sprite.draw(g2d,x,y);    }  }}  }
class C{  public LogRecord(long txid,byte[] payload){  this.txid=txid;  this.payload=payload;  this.metadata=0;}  }
class C{  public java.lang.String toString(){  return internal.toString();}  }
class C{  private StringBuilder createTableOfContents(){  final StringBuilder directory=new StringBuilder();  String element;  int s=0;  int level=1;  int level1=0;  int level2=0;  int level3=0;  int level4=0;  int level5=0;  int level6=0;  int doubles=0;  String anchorext=EMPTY;  if ((s=this.tableOfContents.size()) > 2) {    directory.append("<table><tr><td><div class=\"WikiTOCBox\">\n");    for (int i=0; i < s; i++) {      if (i >= this.tableOfContents.size()) {        break;      }      element=this.tableOfContents.get(i);      if (element == null) {        continue;      }      doubles=0;      for (int j=0; j < i; j++) {        if (j >= this.tableOfContents.size()) {          break;        }        final String d=this.tableOfContents.get(j);        if (d == null || d.isEmpty()) {          continue;        }        final String a=REGEX_NOT_CHAR_NUM_OR_UNDERSCORE_PATTERN.matcher(SPACE_PATTERN.matcher(d.substring(1)).replaceAll("_")).replaceAll(EMPTY);        final String b=REGEX_NOT_CHAR_NUM_OR_UNDERSCORE_PATTERN.matcher(SPACE_PATTERN.matcher(element.substring(1)).replaceAll("_")).replaceAll(EMPTY);        if (a.equals(b)) {          doubles++;        }      }      if (doubles > 0) {        anchorext="_" + (doubles + 1);      }      final char l=element.charAt(0);      String temp="";      if (Arrays.binarySearch(HEADLINE_LEVEL,l) >= 0 && !element.isEmpty()) {switch (l) {case SIX:{            if (level < 6) {              level=6;              level6=0;            }            level6++;            temp=element.substring(1);            element=level1 + "." + level2+ "."+ level3+ "."+ level4+ "."+ level5+ "."+ level6+ " "+ temp;            directory.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#");            break;          }case FIVE:{          if (level == 1) {            level2=0;            level=2;          }          if (level == 3) {            level=2;          }          level5++;          temp=element.substring(1);          element=level1 + "." + level2+ "."+ level3+ "."+ level4+ "."+ level5+ " "+ temp;          directory.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#");          break;        }case FOUR:{        if (level == 1) {          level2=0;          level=2;        }        if (level == 3) {          level=2;        }        level4++;        temp=element.substring(1);        element=level1 + "." + level2+ "."+ level3+ "."+ level4+ " "+ temp;        directory.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#");        break;      }case THREE:{      if (level == 1) {        level2=0;        level=2;      }      if (level == 3) {        level=2;      }      level3++;      temp=element.substring(1);      element=level1 + "." + level2+ "."+ level3+ " "+ temp;      directory.append("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#");      break;    }case TWO:{    if (level == 1) {      level2=0;      level=2;    }    if (level == 3) {      level=2;    }    level2++;    temp=element.substring(1);    element=level1 + "." + level2+ " "+ temp;    directory.append("&nbsp;&nbsp;<a href=\"#");    break;  }case ONE:{  if (level > 1) {    level=1;    level2=0;    level3=0;    level4=0;    level5=0;    level6=0;  }  level1++;  temp=element.substring(1);  element=level1 + ". " + temp;  directory.append("<a href=\"#");  break;}default :{throw new IllegalArgumentException("illegal headline level: " + l);}}directory.append(REGEX_NOT_CHAR_NUM_OR_UNDERSCORE_PATTERN.matcher(SPACE_PATTERN.matcher(temp).replaceAll("_")).replaceAll(EMPTY));directory.append(anchorext);directory.append("\" class=\"WikiTOC\">");directory.append(element);directory.append("</a><br />\n");}anchorext=EMPTY;}directory.append("</div></td></tr></table>\n");}return directory;}  }
class C{  @Override public void respond(String response){  getChannel().send().message(response);}  }
class C{  public ClientOptionValue<T> newValue(T value){  requireNonNull(value,"value");  return new ClientOptionValue<>(this,value);}  }
class C{  public boolean isV2_0(){  return ICAL.equals(maxVersion);}  }
class C{  private boolean isEditingMeasuredVariablesAllowed(){  return editingMeasuredVariablesAllowed;}  }
class C{  public synchronized long lastOnlineAgo(){  return (System.currentTimeMillis() - lastOnline) / 1000;}  }
class C{  public ElementType rootElementType(){  return theRoot;}  }
class C{  private void parseWithActualParser(File file){  Parser parser=new Parser();  parser.setProgram(new jplag.StrippedProgram());  parser.parse(null,new String[]{file.toString()});}  }
class C{  public Node item(int index){  runTo(index);  return (Node)this.elementAt(index);}  }
class C{  public void list(){  System.out.println(toString());  if (m_lines == null)   return;  for (int i=0; i < m_lines.length; i++)   m_lines[i].list();}  }
class C{  public void applySettings(){  saveSettings();  if (Settings.CUSTOM_CLIENT_SIZE)   Game.getInstance().resizeFrameWithContents();  Settings.fovUpdateRequired=true;  Settings.checkSoftwareCursor();  Camera.setDistance(Settings.VIEW_DISTANCE);}  }
class C{  public HashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  private boolean airAppTerminated(ProcessListener pl){  if (pl != null) {    if (pl.isAIRApp()) {      if (pl.isProcessDead()) {        return true;      }    }  }  return false;}  }
class C{  @Override public void run(){  _log.info("SendEventScheduler::run() start");  try {    if (!_callHomeEventManager.canSendEvent()) {      return;    }    int totalSleep=0;    while (true) {      if (_licenseManager.getTargetInfoLock()) {        try {          performSendEvents();        } catch (        Exception e) {          _log.error("Exception sending events to SYR: {} ",e);          break;        } finally {          _licenseManager.releaseTargetVersionLock();        }        break;      } else {        _log.info("Cannot acquire TargetLock. Sleeping 5s before retrying...");        if (totalSleep >= CallHomeConstants.MAX_LOCK_WAIT_TIME_MS) {          _log.warn("Cannot acquire TargetLock in {}ms. So quitting SendEventScheduler",CallHomeConstants.MAX_LOCK_WAIT_TIME_MS);          break;        }        Thread.sleep(CallHomeConstants.LOCK_WAIT_TIME_MS);        totalSleep+=CallHomeConstants.LOCK_WAIT_TIME_MS;      }    }  } catch (  APIException i) {    _log.info("ConnectEMC is not configured. Ending SendEventScheduler.");  }catch (  Exception e) {    _log.error("Exception while running event scheduler: {} ",e);  }  _log.info("SendEventScheduler::run() end");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.190 -0500",hash_original_method="B4F97B229D6634102324704B9EDD8365",hash_generated_method="4787AD74B822C866DA500AC5E0C375E7") public void removeNmeaListener(GpsStatus.NmeaListener listener){  try {    GpsStatusListenerTransport transport=mNmeaListeners.remove(listener);    if (transport != null) {      mService.removeGpsStatusListener(transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in unregisterGpsStatusListener: ",e);  }}  }
class C{  private boolean isAmmoRequired(ItemStack stack,EntityPlayer player){  return !player.capabilities.isCreativeMode && EnchantmentHelper.getEnchantmentLevel(Enchantments.INFINITY,stack) == 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean open(int kind,Shell parent,String title,String message,int style){  DialogWithUrls dialog=new DialogWithUrls(parent,title,null,message,kind,getButtonLabels(kind),0);  style&=SWT.SHEET;  dialog.setShellStyle(dialog.getShellStyle() | style);  return dialog.open() == 0;}  }
class C{  @SafeVarargs public final Zipper<A> insertBefore(A... as){  return new Zipper<>(front.plus(as),back,position + as.length);}  }
class C{  public void touch(Date date){  lastSeen=(Date)date.clone();}  }
class C{  public HashPrintJobAttributeSet(){  super(PrintJobAttribute.class);}  }
class C{  void playScroll(View chaserView,int dx,int dy,int x,int y){  boolean changed=false;  for (  ScrollChoreography c : myScrollChoreography) {    changed=changed || c.playScroll(chaserView,dx,dy,x,y);  }  if (changed) {    for (    View v : childChoreography.keySet()) {      childChoreography.get(v).playChase(chaserView,v);    }  }}  }
class C{  public T contentDescription(String value){  setString(CONTENT_DESCRIPTION,value);  return (T)this;}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public CViewDragHandler(final CViewsTable table){  Preconditions.checkNotNull(table,"IE01932: Table argument can't be null");  m_table=table;}  }
class C{  public void removeNotify(){synchronized (getTreeLock()) {    ListPeer peer=(ListPeer)this.peer;    if (peer != null) {      selected=peer.getSelectedIndexes();    }    super.removeNotify();  }}  }
class C{  public static Favicon create(BufferedImage image){  if (image.getWidth() != 64 || image.getHeight() != 64) {    throw new IllegalArgumentException("Server icon must be exactly 64x64 pixels");  }  byte[] imageBytes;  try {    ByteArrayOutputStream stream=new ByteArrayOutputStream();    ImageIO.write(image,"PNG",stream);    imageBytes=stream.toByteArray();  } catch (  IOException e) {    throw new AssertionError(e);  }  String encoded="data:image/png;base64," + BaseEncoding.base64().encode(imageBytes);  if (encoded.length() > Short.MAX_VALUE) {    throw new IllegalArgumentException("Favicon file too large for server to process");  }  return new Favicon(encoded);}  }
class C{  public static String digestString(String pass,String algorithm) throws NoSuchAlgorithmException {  MessageDigest md;  ByteArrayOutputStream bos;  try {    md=MessageDigest.getInstance(algorithm);    byte[] digest=md.digest(pass.getBytes("iso-8859-1"));    bos=new ByteArrayOutputStream();    OutputStream encodedStream=MimeUtility.encode(bos,"base64");    encodedStream.write(digest);    return bos.toString("iso-8859-1");  } catch (  IOException ioe) {    throw new RuntimeException("Fatal error: " + ioe);  }catch (  MessagingException me) {    throw new RuntimeException("Fatal error: " + me);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected Node newNode(){  return new SVGOMFontFaceSrcElement();}  }
class C{  public static String writeActionsToString(OFInstructionWriteActions inst,Logger log) throws Exception {  return ActionUtils.actionsToString(inst.getActions(),log);}  }
class C{  public static double RSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public void append(String inner,String outer,String name,int flags){  int i=constPool.addClassInfo(inner);  int o=constPool.addClassInfo(outer);  int n=constPool.addUtf8Info(name);  append(i,o,n,flags);}  }
class C{  public boolean isCacheVm(){  return this.equals(CACHE_VM);}  }
class C{  public boolean existsTrek(Node node1,Node node2){  for (  Node node3 : getNodes()) {    Node node=(node3);    if (isAncestorOf(node,node1) && isAncestorOf(node,node2)) {      return true;    }  }  return false;}  }
class C{  public void ask(MovieUI ui){  ui.ask(this);}  }
class C{  public T caseModuleFilterSpecifier(ModuleFilterSpecifier object){  return null;}  }
class C{  public boolean start(Runnable task){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  boolean isPriority=false;  boolean isQueue=false;  boolean isWake=true;  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);}  }
class C{  public static String computeWindingOrderOfLocations(Iterable<? extends LatLon> locations){  if (locations == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  java.util.Iterator<? extends LatLon> iter=locations.iterator();  if (!iter.hasNext())   return AVKey.COUNTER_CLOCKWISE;  if (LatLon.locationsCrossDateLine(locations))   iter=LatLon.makeDatelineCrossingLocationsPositive(locations).iterator();  double area=0;  LatLon firstLocation=iter.next();  LatLon location=firstLocation;  while (iter.hasNext()) {    LatLon nextLocation=iter.next();    area+=location.getLongitude().degrees * nextLocation.getLatitude().degrees;    area-=nextLocation.getLongitude().degrees * location.getLatitude().degrees;    location=nextLocation;  }  if (!location.equals(firstLocation)) {    area+=location.getLongitude().degrees * firstLocation.getLatitude().degrees;    area-=firstLocation.getLongitude().degrees * location.getLatitude().degrees;  }  return (area < 0) ? AVKey.CLOCKWISE : AVKey.COUNTER_CLOCKWISE;}  }
class C{  public void addIceServers(PeerConnection.IceServer iceServers){  if (this.iceServers == null) {    this.iceServers=new ArrayList<PeerConnection.IceServer>();  }  this.iceServers.add(0,iceServers);}  }
class C{  public boolean isTermsOfUseAccepted(){  return termsOfUseAccepted;}  }
class C{  private static void putGet(IgniteCache<Integer,Organization> cache){  Organization org=new Organization("Microsoft",new Address("1096 Eddy Street, San Francisco, CA",94109),OrganizationType.PRIVATE,new Timestamp(System.currentTimeMillis()));  cache.put(1,org);  Organization orgFromCache=cache.get(1);  System.out.println();  System.out.println(">>> Retrieved organization instance from cache: " + orgFromCache);}  }
class C{  public void deleteGeolocSharings() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteGeolocSharings();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  @Override public void createFileSystems(List<FileDescriptor> fileDescriptors,String taskId) throws ControllerException {  Workflow workflow=null;  List<URI> fsUris=FileDescriptor.getFileSystemURIs(fileDescriptors);  FileCreateWorkflowCompleter completer=new FileCreateWorkflowCompleter(fsUris,taskId,fileDescriptors);  try {    workflow=_workflowService.getNewWorkflow(this,CREATE_FILESYSTEMS_WF_NAME,false,taskId);    String waitFor=null;    s_logger.info("Generating steps for create FileSystem");    waitFor=_fileDeviceController.addStepsForCreateFileSystems(workflow,waitFor,fileDescriptors,taskId);    waitFor=_fileReplicationDeviceController.addStepsForCreateFileSystems(workflow,waitFor,fileDescriptors,taskId);    String successMessage="Create filesystems successful for: " + fsUris.toString();    Object[] callbackArgs=new Object[]{fsUris};    workflow.executePlan(completer,successMessage,new WorkflowCallback(),callbackArgs,null,null);  } catch (  Exception ex) {    s_logger.error("Could not create filesystems: " + fsUris,ex);    releaseWorkflowLocks(workflow);    String opName=ResourceOperationTypeEnum.CREATE_FILE_SYSTEM.getName();    ServiceError serviceError=DeviceControllerException.errors.createFileSharesFailed(fsUris.toString(),opName,ex);    completer.error(s_dbClient,_locker,serviceError);  }}  }
class C{  static String scanSystemID(IXMLReader reader) throws IOException, XMLParseException {  if (!XMLUtil.checkLiteral(reader,"YSTEM")) {    return null;  }  XMLUtil.skipWhitespace(reader,null);  return XMLUtil.scanString(reader,'\0',null);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getMagnitude() == null) ? 0 : getMagnitude().hashCode());  result=prime * result + ((getUnitType() == null) ? 0 : getUnitType().hashCode());  return result;}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!MPeriod.isOpen(getCtx(),getDateReport(),MDocType.DOCBASETYPE_APInvoice,getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  MTimeExpenseLine[] lines=getLines(false);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  BigDecimal amt=Env.ZERO;  for (int i=0; i < lines.length; i++) {    MTimeExpenseLine line=lines[i];    amt=amt.add(line.getApprovalAmt());  }  setApprovalAmt(amt);  for (int i=0; i < lines.length; i++) {    MTimeExpenseLine line=lines[i];    if (line.isInvoiced() && line.getC_BPartner_ID() == 0) {      m_processMsg="@Line@ " + line.getLine() + ": Invoiced, but no Business Partner";      return DocAction.STATUS_Invalid;    }  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  @Override public long maxAge(){  return this.maxAge * 1000;}  }
class C{  public MExtensionFileFilter(){  super();  this.filters=new HashMap<>(0);}  }
class C{  public final int incrementAndGet(){  return unsafe.getAndAddInt(this,valueOffset,1) + 1;}  }
class C{  public void addResource(String alias,Class<?> cls){  rsrcsByAlias.put(alias,cls);  rsrcs.add(cls);}  }
class C{  @Override public Segment intersect(long from,long to){  long start=Math.max(from,this.segmentStart);  long end=Math.min(to,this.segmentEnd);  if (start <= end) {    return new SegmentRange(start,end);  } else {    return null;  }}  }
class C{  public boolean isClickEnabled(){  return mClickEnabled;}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public IntToIntPairArrayIndexBasedMap(int expectedNumNodes,int defaultReturnValue,StatsReceiver statsReceiver){  StatsReceiver scopedStatsReceiver=statsReceiver.scope(this.getClass().getSimpleName());  int arraySize=Math.max(expectedNumNodes << 1,8);  this.array=new ShardedBigIntArray(arraySize,ShardedBigIntArray.PREFERRED_EDGES_PER_SHARD,defaultReturnValue,scopedStatsReceiver);  this.defaultReturnValue=defaultReturnValue;  numStoredKeysCounter=scopedStatsReceiver.counter("numStoredKeys");}  }
class C{  @Override public void cascadePerformRemovePrivateOwnedObjectFromChangeSetIfRequired(Object object,UnitOfWorkImpl uow,Map visitedObjects){  Object attributeValue=getAttributeValueFromObject(object);  if (attributeValue == null) {    return;  }  if (!visitedObjects.containsKey(attributeValue)) {    visitedObjects.put(attributeValue,attributeValue);    ObjectBuilder builder=getReferenceDescriptor(attributeValue,uow).getObjectBuilder();    builder.cascadePerformRemovePrivateOwnedObjectFromChangeSet(attributeValue,uow,visitedObjects);  }}  }
class C{  public boolean isImageDefined(Product product){  boolean flag=irm.read(product.getKey(),ImageType.SERVICE_IMAGE) != null;  return flag;}  }
class C{  public void removeRelationFromMembers(final Relation relation){  for (  RelationMember rm : relation.getMembers()) {    OsmElement e=rm.getElement();    if (e != null) {      undo.save(e);      e.removeParentRelation(relation);    }  }}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof FillNode)   fill=(FillNode)child; else   if (child instanceof StrokeNode)   stroke=(StrokeNode)child; else   super.addChild(child);}  }
class C{  public Tasks<UnManagedVolumeRestRep> ingest(VolumeIngest input){  TaskList tasks=client.post(TaskList.class,input,baseUrl + "/ingest");  return new Tasks<>(client,tasks.getTaskList(),resourceClass);}  }
class C{  public static String unescape(String in){  StringBuilder out=new StringBuilder();  char last=0;  for (  char c : in.toCharArray()) {    if (c == ESC) {      if (last != 0 && last == ESC)       out.append(c);    } else     out.append(c);    last=c;  }  return out.toString();}  }
class C{  public void chmodDir(String permissions,String dir){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.chmodDir"),permissions,dir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  public double area(){  return semiMajorAxis() * semiMinorAxis() * Math.PI;}  }
class C{  public ScreenBrowserBalloon(String text,Point point){  super(text);  if (point == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.screenLocation=point;}  }
class C{  private void checkArmorContents(){  assertArrayEquals("Mismatch in armor contents",TEST_ARMOR,inventory.getArmorContents());  assertEquals("Mismatch in boots slot",TEST_BOOTS,inventory.getBoots());  assertEquals("Mismatch in leggings slot",TEST_LEGGINGS,inventory.getLeggings());  assertEquals("Mismatch in chestplate slot",TEST_CHESTPLATE,inventory.getChestplate());  assertEquals("Mismatch in helmet slot",TEST_HELMET,inventory.getHelmet());}  }
class C{  protected void sendAppendRequest(MemberState member,AppendRequest request){  member.setHeartbeatStartTime(heartbeatTime);  super.sendAppendRequest(member,request);}  }
class C{  public BinaryTable(ColumnTable<?> tabIn){  @SuppressWarnings("unchecked") ColumnTable<SaveState> tab=(ColumnTable<SaveState>)tabIn;  SaveState extra=tab.getExtraState();  this.columnList=new ArrayList<ColumnDesc>();  for (  ColumnDesc col : extra.columns) {    ColumnDesc copy=(ColumnDesc)col.clone();    copy.column=null;    this.columnList.add(copy);  }  try {    this.table=tab.copy();  } catch (  Exception e) {    throw new IllegalStateException("Unexpected Exception",e);  }  this.heap=extra.heap.copy();  this.nRow=tab.getNRows();  saveExtraState();}  }
class C{  public AssociativeHashTable(int tableSize){  this(tableSize,new StandardHash<K>(tableSize));}  }
class C{  private void configRateListPreference(boolean metricUnits){  @SuppressWarnings("deprecation") ListPreference listPreference=(ListPreference)findPreference(getString(R.string.stats_rate_key));  String value=PreferencesUtils.getString(this,R.string.stats_rate_key,PreferencesUtils.STATS_RATE_DEFAULT);  String[] values=getResources().getStringArray(R.array.stats_rate_values);  String[] options=getResources().getStringArray(metricUnits ? R.array.stats_rate_metric_options : R.array.stats_rate_imperial_options);  configureListPreference(listPreference,options,options,values,value,null);}  }
class C{  public void firePTPropertyChangeListeners(final PTProperty property){  for (  final PTPropertyChangeListener listener : changeListeners) {    listener.propertyHasChanged(property);  }}  }
class C{  public RangeQueryBuilder gt(String from){  this.from=from;  this.includeLower=false;  return this;}  }
class C{  @Override public boolean validate(Class<? extends C> obj) throws ParameterException {  if (obj == null) {    throw new UnspecifiedParameterException(this);  }  if (!restrictionClass.isAssignableFrom(obj)) {    throw new WrongParameterValueException(this,obj.getName(),"Given class not a subclass / implementation of " + restrictionClass.getName());  }  if (!super.validate(obj)) {    return false;  }  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_1__CONSTRAINT_EXPR_1:    return ((InternalEList<?>)getConstraintExpr_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void checkCUT(String cut) throws IllegalArgumentException {  ClassInfo info=data.getClassInfo(cut);  if (info == null) {    throw new IllegalArgumentException("Class " + cut + " is not part of the SUT");  }  if (!info.isTestable()) {    throw new IllegalArgumentException("Class " + cut + " belongs to the SUT, but it is not a CUT (ie testable)");  }}  }
class C{  public static boolean isXML11NameCharacter(char c){  return (NAME11_CHARACTER[c / 32] & (1 << (c % 32))) != 0;}  }
class C{  public void addWithLayout(FontBuilder fontBuilder,double height,String text,Color color,int xOffset,int yOffset,Rectangle2D bounds) throws IOException {  fontBuilders.add(fontBuilder);  BufferedReader reader=new BufferedReader(new StringReader(text));  String line;  char[] chars;  int yCount=0;  while (true) {    line=reader.readLine();    if ((line == null) || (line.length() == 0))     break;    TextRecord tr=getStyleRecord(fontBuilder,height,color,xOffset,(int)(yOffset + yCount * height * SwfConstants.TWIPS_PER_PIXEL));    chars=line.toCharArray();    tr.entries=new GlyphEntry[chars.length];    for (int i=0; i < chars.length; i++) {      char c=chars[i];      GlyphEntry ge=(GlyphEntry)fontBuilder.getGlyph(c).clone();      ge.advance=(int)((ge.advance / 1024f) * tr.height);      tr.entries[i]=ge;    }    tag.records.add(tr);    yCount++;  }  double x1=bounds.getX();  double y1=bounds.getY();  double rect_width=bounds.getWidth();  double rect_height=bounds.getHeight();  double x2=x1 + rect_width;  double y2=y1 + rect_height;  x1=x1 * SwfConstants.TWIPS_PER_PIXEL;  x2=x2 * SwfConstants.TWIPS_PER_PIXEL;  y1=y1 * SwfConstants.TWIPS_PER_PIXEL;  y2=y2 * SwfConstants.TWIPS_PER_PIXEL;  if (x1 > Integer.MAX_VALUE)   x1=0;  if (x2 > Integer.MAX_VALUE)   x2=0;  if (y1 > Integer.MAX_VALUE)   y1=0;  if (y2 > Integer.MAX_VALUE)   y2=0;  tag.bounds=new Rect((int)x1,(int)x2,(int)y1,(int)y2);}  }
class C{  public void fireQueueSimulationAfterSimStepEvent(final double simTime){  MobsimAfterSimStepEvent<Mobsim> event=new MobsimAfterSimStepEvent<Mobsim>(sim,simTime);  MobsimAfterSimStepListener[] listener=this.listenerList.getListeners(MobsimAfterSimStepListener.class);  for (int i=0; i < listener.length; i++) {    listener[i].notifyMobsimAfterSimStep(event);  }}  }
class C{  protected StorageHADomain checkAdapterExistsInDB(String nativeGuid) throws IOException {  StorageHADomain adapter=null;  List<StorageHADomain> adapterInDB=CustomQueryUtility.getActiveStorageHADomainByNativeGuid(_dbClient,nativeGuid);  if (adapterInDB != null && !adapterInDB.isEmpty()) {    adapter=adapterInDB.get(0);  }  return adapter;}  }
class C{  public void makeShape(){  setShape(new Rectangle2D.Double(0,0,_width,_height));}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public static long abs(long l){  return (l < 0) ? -l : l;}  }
class C{  protected void addTopics(final URIMetadataNode resultEntry){  if ((resultEntry.url() == null) || (resultEntry.title() == null))   return;  final String[] descrcomps=MultiProtocolURL.splitpattern.split(resultEntry.title());  addTopic(descrcomps);}  }
class C{  private void startDrag(Bitmap b,int screenX,int screenY,int textureLeft,int textureTop,int textureWidth,int textureHeight,DragSource source,Object dragInfo,DragBehavior dragBehavior){  if (mInputMethodManager == null) {    mInputMethodManager=(InputMethodManager)mContext.getSystemService(Context.INPUT_METHOD_SERVICE);  }  mInputMethodManager.hideSoftInputFromWindow(mWindowToken,0);  if (mListener != null) {    mListener.onDragStart(source,dragInfo,dragBehavior);  }  final int registrationX=((int)mMotionDownX) - screenX;  final int registrationY=((int)mMotionDownY) - screenY;  mTouchOffsetX=mMotionDownX - screenX;  mTouchOffsetY=mMotionDownY - screenY;  mDragging=true;  mDragSource=source;  mDragInfo=dragInfo;  mDragView=new DragView(mContext,b,registrationX,registrationY,textureLeft,textureTop,textureWidth,textureHeight);  mDragView.show(mWindowToken,(int)mMotionDownX,(int)mMotionDownY);}  }
class C{  private void doTransfers(){  BitSet stopsTouchedByTransfer=new BitSet(network.transitLayer.getStopCount());  double walkSpeedMillimetersPerSecond=request.walkSpeed * 1000;  for (int stop=touchedStops.nextSetBit(0); stop >= 0; stop=touchedStops.nextSetBit(stop + 1)) {    TIntList transfers=network.transitLayer.transfersForStop.get(stop);    for (    McRaptorState state : bestStates.get(stop).getNonTransferStates()) {      for (int transfer=0; transfer < transfers.size(); transfer+=2) {        int toStop=transfers.get(transfer);        int distanceMillimeters=transfers.get(transfer + 1);        int walkTimeSeconds=(int)(distanceMillimeters / walkSpeedMillimetersPerSecond);        if (addState(toStop,-1,-1,state.time + walkTimeSeconds,-1,-1,state)) {          String to=network.transitLayer.stopNames.get(transfers.get(transfer));          stopsTouchedByTransfer.set(toStop);        }      }    }  }  touchedStops.or(stopsTouchedByTransfer);}  }
class C{  public void testPermissionsClosedInputBooksSigem(){  ISWebServiceBooksSoap client=(ISWebServiceBooksSoap)this.applicationContext.getBean("clientWebServiceBooks");  Security security=new Security();  UsernameTokenClass value=new UsernameTokenClass();  value.setUsername("sigem");  value.setPassword("sigem");  security.setUsernameToken(value);  ArrayOfWSBook inputBooks=client.wsGetInputBooks(security);  assertNotNull(inputBooks);  for (  WSBook wsBook : inputBooks.getWSBook()) {    System.out.println(wsBook.getName() + " - " + wsBook.getId());    System.out.println("Can Create: " + wsBook.isCanCreate());    System.out.println("Can Modify: " + wsBook.isCanModify());    System.out.println("Is Readonly: " + wsBook.isReadOnly());    if (wsBook.isReadOnly()) {      assertEquals(wsBook.isCanModify(),false);      assertEquals(wsBook.isCanCreate(),false);    }    if (wsBook.getId() == 5) {      assertFalse(wsBook.isCanModify());      assertFalse(wsBook.isCanCreate());      assertTrue(wsBook.isReadOnly());    }  }  ArrayOfWSBook outputBooks=client.wsGetOutputBooks(security);  assertNotNull(outputBooks);  for (  WSBook wsBook : outputBooks.getWSBook()) {    System.out.println(wsBook.getName() + " - " + wsBook.getId());    System.out.println("Can Create: " + wsBook.isCanCreate());    System.out.println("Can Modify: " + wsBook.isCanModify());    System.out.println("Is Readonly: " + wsBook.isReadOnly());    if (wsBook.isReadOnly()) {      assertEquals(wsBook.isCanModify(),false);      assertEquals(wsBook.isCanCreate(),false);    }  }}  }
class C{  private boolean tryToUpdateExistingHeapNode(AStarNode parent,AStarNode checkedOne){  Iterator<AStarNode> iter=queue.iterator();  AStarNode itNode;  while (iter.hasNext()) {    itNode=iter.next();    if (itNode.equals(checkedOne)) {      itNode.updateDistance(checkedOne.getG(),parent);      return true;    }  }  return false;}  }
class C{  @Override public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append(property).append(":");  for (  final Value v : values) {    sb.append(v.toString()).append(",");  }  sb.deleteCharAt(sb.length() - 1);  sb.append(";");  return sb.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isCellEditable(int row,int column){  return false;}  }
class C{  public ListNode mergeSort(ListNode preHead,ListNode head,int len){  if (head == null || len <= 1)   return head;  int left=len / 2;  int right=len - left;  head=mergeSort(preHead,head,left);  ListNode pMid=head;  for (int i=0; i < left - 1; i++)   pMid=pMid.next;  mergeSort(pMid,pMid.next,right);  ListNode pre1=preHead;  ListNode p1=head;  ListNode pre2=pMid;  ListNode p2=pMid.next;  if (p1.val > p2.val)   head=p2;  while (left > 0 && right > 0) {    if (p1.val > p2.val) {      pre2.next=p2.next;      p2.next=p1;      pre1.next=p2;      pre1=p2;      p2=pre2.next;      right--;    } else {      pre1=p1;      p1=p1.next;      left--;    }  }  return head;}  }
class C{  public ClassifierReference(QualifiedName qualifiedName,URI uri){  this.classifierName=qualifiedName.getLastSegment();  List<String> frontSegments=qualifiedName.getSegments();  if (frontSegments.size() > 0) {    StringJoiner joiner=new StringJoiner(N4JSQualifiedNameConverter.DELIMITER);    for (    String segment : frontSegments.subList(0,frontSegments.size() - 1)) {      joiner.add(segment);    }    this.classifierModuleSpecifier=joiner.toString();  } else {    this.classifierModuleSpecifier="";  }  this.uri=uri;}  }
class C{  private void complete(Method method){  if (complete == null) {    complete=getFunction(method);  }}  }
class C{  public OrganizationAuthoritiesException(String message,Object[] params){  super(message,params);}  }
class C{  public void addUnknownElement(Element element){  this.constructionElement.appendChild(element);  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  @Override public void manipulateChildElements(List<HierarchyWrapper> children){  if (!children.isEmpty()) {    builder.append(baseIndent).append("children=").append("\n");  }}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  public DocTreeMaker at(int pos){  this.pos=pos;  return this;}  }
class C{  public static void initialPutKeyValue(){  try {    region.put(UPDATE_KEY,UPDATE_VALUE1);    region.put(INVALIDATE_KEY,INVALIDATE_VALUE);    region.put(DESTROY_KEY,DESTROY_VALUE);  } catch (  Exception e) {    Assert.fail(" Test failed due to " + e,e);  }}  }
class C{  private void writeOccupancy(String outputFolder,HashMap<String,Counts<Link>> paxCounts,HashMap<String,Counts<Link>> capCounts){  for (  Entry<String,Counts<Link>> mode2CapCounts : capCounts.entrySet()) {    String fileName=outputFolder + this.createFilename(mode2CapCounts.getKey(),TravelStatsAnalyzer.OCCUPANCY);    try {      BufferedWriter bw=new BufferedWriter(new FileWriter(new File(fileName)));      bw.write(this.header);      for (int i=0; i < 25; i++) {        bw.write(separator + i);      }      for (      Entry<Id<Link>,Count<Link>> linkId2Count : mode2CapCounts.getValue().getCounts().entrySet()) {        bw.newLine();        bw.write(linkId2Count.getKey().toString());        Link link=this.scenario.getNetwork().getLinks().get(linkId2Count.getKey());        bw.write(separator + link.getFromNode().getCoord().getX());        bw.write(separator + link.getFromNode().getCoord().getY());        bw.write(separator + link.getToNode().getCoord().getX());        bw.write(separator + link.getToNode().getCoord().getY());        double capSum=0.0;        for (        Volume volume : linkId2Count.getValue().getVolumes().values()) {          capSum+=volume.getValue();        }        double paxSum=0.0;        for (        Volume volume : paxCounts.get(mode2CapCounts.getKey()).getCounts().get(linkId2Count.getKey()).getVolumes().values()) {          paxSum+=volume.getValue();        }        if (capSum == 0.0) {          bw.write(separator + 0.0);        } else {          bw.write(separator + paxSum / capSum);        }        for (int i=0; i < 25; i++) {          double capValue=0.0;          if (linkId2Count.getValue().getVolume(i) != null) {            capValue=linkId2Count.getValue().getVolume(i).getValue();          }          double paxValue=0.0;          if (paxCounts.get(mode2CapCounts.getKey()).getCounts().get(linkId2Count.getKey()).getVolume(i) != null) {            paxValue=paxCounts.get(mode2CapCounts.getKey()).getCounts().get(linkId2Count.getKey()).getVolume(i).getValue();          }          if (capValue == 0.0) {            bw.write(separator + 0.0);          } else {            bw.write(separator + paxValue / capValue);          }        }      }      bw.close();      log.info("Output written to " + fileName);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public String toString(){  return name;}  }
class C{  protected void drawMapTiles(final Graphics g,final int zoom,Rectangle viewportBounds){  int size=getTileFactory().getTileSize(zoom);  Dimension mapSize=getTileFactory().getMapSize(zoom);  int numWide=viewportBounds.width / size + 2;  int numHigh=viewportBounds.height / size + 2;  TileFactoryInfo info=getTileFactory().getInfo();  int tpx=(int)Math.floor(viewportBounds.getX() / info.getTileSize(0));  int tpy=(int)Math.floor(viewportBounds.getY() / info.getTileSize(0));  for (int x=0; x <= numWide; x++) {    for (int y=0; y <= numHigh; y++) {      int itpx=x + tpx;      int itpy=y + tpy;      if (g.getClipBounds().intersects(new Rectangle(itpx * size - viewportBounds.x,itpy * size - viewportBounds.y,size,size))) {        Tile tile=getTileFactory().getTile(itpx,itpy,zoom);        int ox=((itpx * getTileFactory().getTileSize(zoom)) - viewportBounds.x);        int oy=((itpy * getTileFactory().getTileSize(zoom)) - viewportBounds.y);        if (isTileOnMap(itpx,itpy,mapSize)) {          if (isOpaque()) {            g.setColor(getBackground());            g.fillRect(ox,oy,size,size);          }        } else         if (tile.isLoaded()) {          g.drawImage(tile.getImage(),ox,oy,null);        } else {          Tile superTile=getTileFactory().getTile(itpx / 2,itpy / 2,zoom + 1);          if (superTile.isLoaded()) {            int offX=(itpx % 2) * size / 2;            int offY=(itpy % 2) * size / 2;            g.drawImage(superTile.getImage(),ox,oy,ox + size,oy + size,offX,offY,offX + size / 2,offY + size / 2,null);          } else {            int imageX=(getTileFactory().getTileSize(zoom) - getLoadingImage().getWidth(null)) / 2;            int imageY=(getTileFactory().getTileSize(zoom) - getLoadingImage().getHeight(null)) / 2;            g.setColor(Color.GRAY);            g.fillRect(ox,oy,size,size);            g.drawImage(getLoadingImage(),ox + imageX,oy + imageY,null);          }        }        if (isDrawTileBorders()) {          g.setColor(Color.black);          g.drawRect(ox,oy,size,size);          g.drawRect(ox + size / 2 - 5,oy + size / 2 - 5,10,10);          g.setColor(Color.white);          g.drawRect(ox + 1,oy + 1,size,size);          String text=itpx + ", " + itpy+ ", "+ getZoom();          g.setColor(Color.BLACK);          g.drawString(text,ox + 10,oy + 30);          g.drawString(text,ox + 10 + 2,oy + 30 + 2);          g.setColor(Color.WHITE);          g.drawString(text,ox + 10 + 1,oy + 30 + 1);        }      }    }  }}  }
class C{  public synchronized List<Map<String,String>> listChannelAssignments() throws ReplicatorException {  assertActive();  List<Map<String,String>> channels=null;  try {    channels=channelTable.list(getConnection());  } catch (  SQLException e) {    accessFailures++;    if (logger.isDebugEnabled())     logger.debug("Channel table access failed",e);    channels=new ArrayList<Map<String,String>>();  }  return channels;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity){  return createStorageEntity(storageName,storagePlatformEntity,null);}  }
class C{  public final CC y2(String y2){  return corrPos(y2,3);}  }
class C{  public static void multRow(Matrix A,int i,int start,int to,double[] c){  for (int j=start; j < to; j++)   A.set(i,j,A.get(i,j) * c[j]);}  }
class C{  public static void reset(){  mapHandler=new MapHandler();}  }
class C{  public boolean removeAll(AbstractFloatList other){  if (!(other instanceof FloatArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  float[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    FloatArrayList sortedList=(FloatArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public static void addFile(String s) throws IOException {  File f=new File(s);  addFile(f);}  }
class C{  public final synchronized int readInteger(){  String input="";  int value=0;  try {    input=in.readLine();  } catch (  IOException e) {  }  if (input != null) {    try {      value=Integer.parseInt(input);    } catch (    NumberFormatException e) {    }  }  return value;}  }
class C{  private static void ReleaseByteArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseByteArrayElements  releaseMode=",releaseMode);  RuntimeEntrypoints.checkJNICountDownToGC();  try {    byte[] sourceArray=(byte[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if (traceJNI)       VM.sysWrite(" size=",size);      if ((releaseMode == 0 || releaseMode == 1) && size != 0) {        Memory.memcopy(Magic.objectAsAddress(sourceArray),copyBufferAddress,size);      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    } else {    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }  if (traceJNI)   VM.sysWrite("\n");}  }
class C{  protected final V wrapKey(Object o){  return (V)o;}  }
class C{  public LMSNetworkNode(NetworkPanel networkPanel,LMSNetwork group){  super(networkPanel,group);  setContextMenu();}  }
class C{  public static ANRequest.DeleteRequestBuilder delete(String url){  return new ANRequest.DeleteRequestBuilder(url);}  }
class C{  public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute){  boolean was_added;  int index;  if (localName == null || uri == null || uri.length() == 0)   index=m_attributes.getIndex(rawName); else {    index=m_attributes.getIndex(uri,localName);  }  if (index >= 0) {    m_attributes.setValue(index,value);    was_added=false;  } else {    m_attributes.addAttribute(uri,localName,rawName,type,value);    was_added=true;  }  return was_added;}  }
class C{  public static AlertLevel fromOrdinal(int ordinal){  return VALUES[ordinal];}  }
class C{  public void drawWindowIfNeededLocked(){  recomputeBoundsLocked();  mWindow.drawIfNeeded();}  }
class C{  public OFByteArrayVendorData(byte[] bytes){  this.bytes=bytes;}  }
class C{  protected Task<?> unregisterReminder(String reminderName){  return runtime.unregisterReminder((Remindable)reference,reminderName);}  }
class C{  public void addFixedTimeStatistic(String message,long timetaken){  this.timeTaken=timetaken;  this.message=message;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isChecked(){  return checked;}  }
class C{  public static void fillTranslationData(BaseDanmaku item,float beginX,float beginY,float endX,float endY,long translationDuration,long translationStartDelay,float scaleX,float scaleY){  if (item.getType() != BaseDanmaku.TYPE_SPECIAL)   return;  ((SpecialDanmaku)item).setTranslationData(beginX * scaleX,beginY * scaleY,endX * scaleX,endY * scaleY,translationDuration,translationStartDelay);  updateSpecicalDanmakuDuration(item);}  }
class C{  public boolean isConnected(){  return connection != null && !connection.isDisconnected();}  }
class C{  public BaseProgramBuilder addConstant(Type t) throws IllegalStateException {  if (mConstantCount >= MAX_CONSTANT) {    throw new RSIllegalArgumentException("Max input count exceeded.");  }  if (t.getElement().isComplex()) {    throw new RSIllegalArgumentException("Complex elements not allowed.");  }  mConstants[mConstantCount]=t;  mConstantCount++;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_SINGLE_IS_A1__EXTENDS_NAME_1:    setExtendsName_1(EXTENDS_NAME_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private LegendItemCollection createLegendItems(){  LegendItemCollection result=new LegendItemCollection();  return result;}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_GETTER_DECLARATION__OWNER:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwner((N4ClassifierDefinition)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static Date round(final Object date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (date instanceof Date) {    return round((Date)date,field);  } else   if (date instanceof Calendar) {    return round((Calendar)date,field).getTime();  } else {    throw new ClassCastException("Could not round " + date);  }}  }
class C{  private Class loadFromSystem(String className) throws ClassNotFoundException {  return getParent().loadClass(className);}  }
class C{  public OrionStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.LOGGING,Boolean.FALSE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.CONNECTION_TYPE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);}  }
class C{  private void dispose(){  for (int i=0; i < m_fields.size(); i++)   ((GridField)m_fields.get(i)).dispose();  m_fields.clear();  m_fields=null;  m_vetoableChangeSupport=null;  m_parameterSELECT.clear();  m_parameterSELECT=null;  m_parameterWHERE.clear();  m_parameterWHERE=null;  m_buffer=null;  m_virtualBuffer=null;  m_sort=null;  m_rowData=null;  m_oldValue=null;  m_loader=null;  m_loaderThread=null;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (!(params instanceof RC5Parameters)) {    throw new IllegalArgumentException("invalid parameter passed to RC564 init - " + params.getClass().getName());  }  RC5Parameters p=(RC5Parameters)params;  this.forEncryption=forEncryption;  _noRounds=p.getRounds();  setKey(p.getKey());}  }
class C{  public void add(NetObject obj){  super.add(obj);}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Sage.putBoolean("mmc/pentium_4_fix",evalBool(stack.pop()));  return null;}  }
class C{  public JarOutputStream(OutputStream out,Manifest man) throws IOException {  super(out);  if (man == null) {    throw new NullPointerException("man");  }  ZipEntry e=new ZipEntry(JarFile.MANIFEST_NAME);  putNextEntry(e);  man.write(new BufferedOutputStream(this));  closeEntry();}  }
class C{  protected int index(int val){  int[] set=_set;  Object[] values=_values;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {    int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val));  }  return isFree(values,index) ? -1 : index;}  }
class C{  public EntryStream<K,V> collapseKeys(BinaryOperator<V> merger){  BinaryOperator<Entry<K,V>> entryMerger=null;  return new EntryStream<>(new CollapseSpliterator<>(equalKeys(),Function.identity(),entryMerger,entryMerger,spliterator()),context);}  }
class C{  public final Array currentValue(){  return this.currentValue_;}  }
class C{  public HLL(final int log2m,final int regwidth,final int expthresh,final boolean sparseon,final HLLType type){  this.log2m=log2m;  if ((log2m < MINIMUM_LOG2M_PARAM) || (log2m > MAXIMUM_LOG2M_PARAM)) {    throw new IllegalArgumentException("'log2m' must be at least " + MINIMUM_LOG2M_PARAM + " and at most "+ MAXIMUM_LOG2M_PARAM+ " (was: "+ log2m+ ")");  }  this.regwidth=regwidth;  if ((regwidth < MINIMUM_REGWIDTH_PARAM) || (regwidth > MAXIMUM_REGWIDTH_PARAM)) {    throw new IllegalArgumentException("'regwidth' must be at least " + MINIMUM_REGWIDTH_PARAM + " and at most "+ MAXIMUM_REGWIDTH_PARAM+ " (was: "+ regwidth+ ")");  }  this.m=(1 << log2m);  this.mBitsMask=m - 1;  this.valueMask=(1 << regwidth) - 1;  this.pwMaxMask=HLLUtil.pwMaxMask(regwidth);  this.alphaMSquared=HLLUtil.alphaMSquared(m);  this.smallEstimatorCutoff=HLLUtil.smallEstimatorCutoff(m);  this.largeEstimatorCutoff=HLLUtil.largeEstimatorCutoff(log2m,regwidth);  if (expthresh == -1) {    this.explicitAuto=true;    this.explicitOff=false;    final long fullRepresentationSize=(this.regwidth * (long)this.m + 7) / Byte.SIZE;    final int numLongs=(int)(fullRepresentationSize / 8);    if (numLongs > MAXIMUM_EXPLICIT_THRESHOLD) {      this.explicitThreshold=MAXIMUM_EXPLICIT_THRESHOLD;    } else {      this.explicitThreshold=numLongs;    }  } else   if (expthresh == 0) {    this.explicitAuto=false;    this.explicitOff=true;    this.explicitThreshold=0;  } else   if ((expthresh > 0) && (expthresh <= MAXIMUM_EXPTHRESH_PARAM)) {    this.explicitAuto=false;    this.explicitOff=false;    this.explicitThreshold=(1 << (expthresh - 1));  } else {    throw new IllegalArgumentException("'expthresh' must be at least " + MINIMUM_EXPTHRESH_PARAM + " and at most "+ MAXIMUM_EXPTHRESH_PARAM+ " (was: "+ expthresh+ ")");  }  this.shortWordLength=(regwidth + log2m);  this.sparseOff=!sparseon;  if (this.sparseOff) {    this.sparseThreshold=0;  } else {    final int largestPow2LessThanCutoff=(int)NumberUtil.log2((this.m * this.regwidth) / this.shortWordLength);    this.sparseThreshold=(1 << largestPow2LessThanCutoff);  }  initializeStorage(type);}  }
class C{  public int indexOf(int offset,long value){  for (int i=offset; i < _pos; i++) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  public long run(String[] args) throws Exception {  int depth=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[] trees=genTrees(depth,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,trees,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,trees,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public void reset(){  for (int i=0; i < 16; i++) {    data[i]=0;  }  data[0]=data[5]=data[10]=data[15]=1;  type=TYPE_IDENTITY;}  }
class C{  public void sort(int a[],int lo0,int hi0) throws Exception {  int lo=lo0;  int hi=hi0;  if (lo >= hi) {    return;  } else   if (lo == hi - 1) {    if (a[lo] > a[hi]) {      int T=a[lo];      a[lo]=a[hi];      a[hi]=T;    }    return;  }  int pivot=a[(lo + hi) / 2];  a[(lo + hi) / 2]=a[hi];  a[hi]=pivot;  while (lo < hi) {    while (a[lo] <= pivot && lo < hi) {      lo++;    }    while (pivot <= a[hi] && lo < hi) {      hi--;    }    if (lo < hi) {      int T=a[lo];      a[lo]=a[hi];      a[hi]=T;    }  }  a[hi0]=a[hi];  a[hi]=pivot;  sort(a,lo0,lo - 1);  sort(a,hi + 1,hi0);}  }
class C{  protected void removeValues() throws Exception {  int i, j;  int flag, count;  count=m_vals.size();  j=0;  for (i=0; i < count; i++) {    flag=m_editFlags.get(j);    if ((flag == FolderEditFlag.NONE) || (flag == FolderEditFlag.UPDATE)) {      flag=FolderEditFlag.REMOVE;      m_editFlags.set(j,flag);      j=j + 1;    } else     if (flag == FolderEditFlag.NEW) {      m_editFlags.remove(j);      m_vals.remove(j);    }  }}  }
class C{  private void addTemplateTestCases(){  String template;  for (int i=1; ; i++) {    template=testProperties.getProperty(getTemplateTestKey(i));    if (template != null) {      System.out.println("Adding TemplateTestCase : " + template);      addTest(new TemplateTestCase(template));    } else {      break;    }  }}  }
class C{  public static RIcon my(final String name){  return new RIcon(hu.sllauncher.gui.icon.LIcons.ResUtil.my_(name));}  }
class C{  private DocLine[] loadLines(MInOut inout){  ArrayList<DocLine> list=new ArrayList<DocLine>();  MInOutLine[] lines=inout.getLines(false);  for (int i=0; i < lines.length; i++) {    MInOutLine line=lines[i];    if (line.isDescription() || line.getM_Product_ID() == 0 || line.getMovementQty().signum() == 0) {      log.finer("Ignored: " + line);      continue;    }    DocLine docLine=new DocLine(line,this);    BigDecimal Qty=line.getMovementQty();    docLine.setReversalLine_ID(line.getReversalLine_ID());    docLine.setQty(Qty,getDocumentType().equals(DOCTYPE_MatShipment));    String sql="SELECT PP_Cost_Collector_ID  FROM C_OrderLine WHERE C_OrderLine_ID=? AND PP_Cost_Collector_ID IS NOT NULL";    int PP_Cost_Collector_ID=DB.getSQLValueEx(getTrxName(),sql,new Object[]{line.getC_OrderLine_ID()});    docLine.setPP_Cost_Collector_ID(PP_Cost_Collector_ID);    log.fine(docLine.toString());    list.add(docLine);  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.118 -0500",hash_original_method="A45115A32F8DEBE95546FC38EF8925EC",hash_generated_method="1570FD12AEB4D29F4D58F624DC257169") private void readContentSpec() throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == '(') {    int depth=0;    do {      if (c == '(') {        depth++;      } else       if (c == ')') {        depth--;      }      position++;      c=peekCharacter();    } while (depth > 0);    if (c == '*' || c == '?' || c == '+') {      position++;    }  } else   if (c == EMPTY[0]) {    read(EMPTY);  } else   if (c == ANY[0]) {    read(ANY);  } else {    throw new XmlPullParserException("Expected element content spec",this,null);  }}  }
class C{  public ConversionHandler load(ConversionAnalyzer analyzer){  this.methodDefined=analyzer.getMethod();  this.membership=analyzer.getMembership();  this.configClass=membership == Membership.DESTINATION ? destinationClass : sourceClass;  this.configurationType=analyzer.getConfigurationType();  return this;}  }
class C{  public X509CertPath(final CertPath certPath){  if (certPath.getType() != TYPE_X509) {    throw new IllegalArgumentException("Cert path must contain X.509 certificates only");  } else   if (certPath.getCertificates().isEmpty()) {    throw new IllegalArgumentException("Cert path must not be empty");  } else {    this.path=certPath;    this.target=(X509Certificate)certPath.getCertificates().get(0);  }}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  for (  ScriptChunk chunk : chunks) {    if (chunk.isOpCode()) {      buf.append(getOpCodeName(chunk.data[0]));      buf.append(" ");    } else {      buf.append("[");      buf.append(bytesToHexString(chunk.data));      buf.append("] ");    }  }  return buf.toString().trim();}  }
class C{  private static final String normalizeMoveString(String str){  if (str.length() > 0) {    char lastChar=str.charAt(str.length() - 1);    if ((lastChar == '#') || (lastChar == '+')) {      str=str.substring(0,str.length() - 1);    }  }  return str;}  }
class C{  public Company endDate(SafeCalendar endDate){  this.endDate=endDate;  return this;}  }
class C{  public UpdateRequest doc(String field,Object value){  safeDoc().source(field,value);  return this;}  }
class C{  public static <T extends BitcoinHeader>Block fromWire(WireFormat.Reader reader,WireFormatter formatter,Class<T> type) throws HyperLedgerException, IOException {  Header header;  if (HeaderWithSignatures.class.isAssignableFrom(type)) {    header=HeaderWithSignatures.fromWire(reader);  } else   if (BitcoinHeader.class.isAssignableFrom(type)) {    header=BitcoinHeader.fromWire(reader);  } else {    throw new IllegalArgumentException("Unsupported header type: " + type);  }  long nt=reader.readVarInt();  List<Transaction> transactions=new ArrayList<>();  for (int i=0; i < nt; ++i) {    transactions.add(formatter.fromWire(reader));  }  MerkleRoot calculatedMerkleRoot=MerkleTree.computeMerkleRoot(transactions);  if (!header.getMerkleRoot().equals(calculatedMerkleRoot)) {    String s=String.format("Transaction list not consistent with merkle root in header, prevHash: %s, txCount: %d, merkleRoot: %s, calculatedMerkleRoot: %s",header.getPreviousID(),nt,header.getMerkleRoot(),calculatedMerkleRoot);    throw new HyperLedgerException(s);  }  return new Block(header,transactions);}  }
class C{  public IOContainer copy(){  List<IOObject> clones=new LinkedList<>();  Iterator<IOObject> i=ioObjects.iterator();  while (i.hasNext()) {    clones.add((i.next()).copy());  }  return new IOContainer(clones);}  }
class C{  protected void initTransportLayer() throws IOException {  input=super.getInputStream();  output=super.getOutputStream();}  }
class C{  private static String arrayToString(double[] array){  StringBuilder result=new StringBuilder("[");  for (int index=0; index < array.length - 1; ++index) {    result.append(array[index]).append(",");  }  if (array.length > 0) {    result.append(array[array.length - 1]);  }  result.append("]");  return result.toString();}  }
class C{  public Builder clear(){  result=new Field();  return this;}  }
class C{  protected void actualizarAvanzadoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  FichasForm fichasForm=(FichasForm)form;  ActionErrors errors=fichasForm.validateAvanzado(request);  if (errors == null || errors.isEmpty()) {    MapDescUDocVO mapDescUDocVO=new MapDescUDocVO(fichasForm.getId(),fichasForm.getDefinicionMapeo());    getGestionDescripcionBI(request).updateMapeoDescripcion(mapDescUDocVO);    setReturnActionFordward(request,mapping.findForward("editAvanzado"));  } else {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("editAvanzado"));  }}  }
class C{  public static INarcPod idToInstance(int id){  return new INarcPod((id & 0xFFF0) >>> 4,(id & 0x000F),0);}  }
class C{  public void testFieldSortSpecifiedAsFunction() throws Exception {  final long A=Long.MIN_VALUE;  final long B=A + 1L;  final long C=B + 1L;  final long Z=Long.MAX_VALUE;  final long Y=Z - 1L;  final long X=Y - 1L;  assertEquals("WTF? small longs cast to double aren't equivilent?",(double)A,(double)B,0.0D);  assertEquals("WTF? small longs cast to double aren't equivilent?",(double)A,(double)C,0.0D);  assertEquals("WTF? big longs cast to double aren't equivilent?",(double)Z,(double)Y,0.0D);  assertEquals("WTF? big longs cast to double aren't equivilent?",(double)Z,(double)X,0.0D);  int docId=0;  for (int i=0; i < 3; i++) {    assertU(adoc(sdoc("id",++docId,"primary_tl1",X,"secondary_tl1",i,"multi_l_dv",X,"multi_l_dv",A)));    assertU(adoc(sdoc("id",++docId,"primary_tl1",Y,"secondary_tl1",i,"multi_l_dv",Y,"multi_l_dv",B)));    assertU(adoc(sdoc("id",++docId,"primary_tl1",Z,"secondary_tl1",i,"multi_l_dv",Z,"multi_l_dv",C)));  }  assertU(commit());  for (  String primarySort : getFieldFunctionClausesToTest()) {    assertQ(req("q","*:*","sort",primarySort + " asc, secondary_tl1 asc"),"//*[@numFound='9']","//result/doc[1]/long[@name='primary_tl1'][.='" + X + "']","//result/doc[1]/long[@name='secondary_tl1'][.='0']","//result/doc[2]/long[@name='primary_tl1'][.='" + X + "']","//result/doc[2]/long[@name='secondary_tl1'][.='1']","//result/doc[3]/long[@name='primary_tl1'][.='" + X + "']","//result/doc[3]/long[@name='secondary_tl1'][.='2']","//result/doc[4]/long[@name='primary_tl1'][.='" + Y + "']","//result/doc[4]/long[@name='secondary_tl1'][.='0']","//result/doc[5]/long[@name='primary_tl1'][.='" + Y + "']","//result/doc[5]/long[@name='secondary_tl1'][.='1']","//result/doc[6]/long[@name='primary_tl1'][.='" + Y + "']","//result/doc[6]/long[@name='secondary_tl1'][.='2']","//result/doc[7]/long[@name='primary_tl1'][.='" + Z + "']","//result/doc[7]/long[@name='secondary_tl1'][.='0']","//result/doc[8]/long[@name='primary_tl1'][.='" + Z + "']","//result/doc[8]/long[@name='secondary_tl1'][.='1']","//result/doc[9]/long[@name='primary_tl1'][.='" + Z + "']","//result/doc[9]/long[@name='secondary_tl1'][.='2']");  }}  }
class C{  @Override public void paintComponent(Graphics gr){  Graphics2D g=(Graphics2D)gr;  setViewRenderingHints(g);  drawBackground(g);  drawCanvas(g);  drawConstrainer(g);  if (isDrawingDoubleBuffered()) {    if (isWindows) {      drawDrawingNonvolatileBuffered(g);    } else {      drawDrawingVolatileBuffered(g);    }  } else {    drawDrawing(g);  }  drawHandles(g);  drawTool(g);}  }
class C{  protected TypedElementImpl(){  super();}  }
class C{  public void clearAdminConstraint(){  setAdminConstraint(ADMIN_ANY);}  }
class C{  public static void closeAll(){  FullTextSettings.closeAll();}  }
class C{  protected void startTimer(){  restartTimer(TIMEOUT);}  }
class C{  public void lower(){  for (int i=0; i < count; i++) {    if (data[i] != null) {      data[i]=data[i].toLowerCase();    }  }}  }
class C{  private void selectObjects(ISelection savedSelections){  List<Object> selectedElements=new ArrayList<Object>();  if (savedSelections != null && savedSelections instanceof IStructuredSelection) {    IStructuredSelection structuredSelection=((IStructuredSelection)savedSelections);    for (    Object selection : structuredSelection.toList()) {      if (selection instanceof TreeElement<?,?>) {        TreeElement<?,?> element=(TreeElement<?,?>)selection;        if (element.getData() instanceof IModelChangeSupport) {          IModelChangeSupport modelObject=(IModelChangeSupport)element.getData();          TreeElement<?,?> newTreeElement=findTreeElementForModelObject(modelObject);          if (newTreeElement != null) {            selectedElements.add(newTreeElement);          }        }      }    }  }  if (!selectedElements.isEmpty()) {    fTreeViewer.setSelection(new StructuredSelection(selectedElements),true);  }}  }
class C{  public boolean isTransformerUpgradable(){  return false;}  }
class C{  @Override public void glCurrentPaletteMatrixOES(int matrixpaletteindex){  mGL11Ext.glCurrentPaletteMatrixOES(matrixpaletteindex);}  }
class C{  @Override public void finish() throws IOException {  super.finish();  writeLong(crc.getValue());  writeLong(crc.tbytes);}  }
class C{  public Date date(){  return this.date.toDate();}  }
class C{  protected void add(int idx,FolderTokenDocTreeNode node){  m_nodes.add(idx,node);}  }
class C{  public static void closeSilently(Reader reader){  if (reader != null) {    try {      reader.close();    } catch (    Exception e) {    }  }}  }
class C{  @Override public boolean equals(Object object){  if (object instanceof Field) {    Field that=(Field)object;    return this.vmField == that.vmField;  } else {    return false;  }}  }
class C{  protected String paramString(){  String optimizedDrawingPossibleString=(optimizedDrawingPossible ? "true" : "false");  return super.paramString() + ",optimizedDrawingPossible=" + optimizedDrawingPossibleString;}  }
class C{  void loadConstants(Prototype f) throws IOException {  int n=loadInt();  LuaValue[] values=n > 0 ? new LuaValue[n] : NOVALUES;  for (int i=0; i < n; i++) {switch (is.readByte()) {case LUA_TNIL:      values[i]=LuaValue.NIL;    break;case LUA_TBOOLEAN:  values[i]=(0 != is.readUnsignedByte() ? LuaValue.TRUE : LuaValue.FALSE);break;case LUA_TINT:values[i]=LuaInteger.valueOf(loadInt());break;case LUA_TNUMBER:values[i]=loadNumber();break;case LUA_TSTRING:values[i]=loadString();break;default :throw new IllegalStateException("bad constant");}}f.k=values;n=loadInt();Prototype[] protos=n > 0 ? new Prototype[n] : NOPROTOS;for (int i=0; i < n; i++) protos[i]=loadFunction(f.source);f.p=protos;}  }
class C{  public static String unhash(int target){  StringBuilder answer=new StringBuilder();  if (target < 0) {    answer.append("\\u0915\\u0009\\u001e\\u000c\\u0002");    if (target == Integer.MIN_VALUE) {      return answer.toString();    }    target=target & Integer.MAX_VALUE;  }  unhash0(answer,target);  return answer.toString();}  }
class C{  @Override public void init(Configuration conf,AbstractYarnScheduler yarnScheduler,RMContext rmContext) throws IOException {  try {    Main.initialize(conf,yarnScheduler,rmContext,registry);  } catch (  Exception e) {    throw new RuntimeException("Failed to initialize myriad",e);  }  LOGGER.info("Initialized myriad.");}  }
class C{  public static byte[] generateExpTable(short[] logTable){  final byte[] result=new byte[FIELD_SIZE * 2 - 2];  for (int i=1; i < FIELD_SIZE; i++) {    int log=logTable[i];    result[log]=(byte)i;    result[log + FIELD_SIZE - 1]=(byte)i;  }  return result;}  }
class C{  @SuppressWarnings({"StringEquality"}) protected int computeNumberOfPointsEstimate(){  final int numRecords=this.getNumberOfRecords();  if (numRecords < 0)   return (this.getLength() - HEADER_LENGTH) / 16;  int overhead=HEADER_LENGTH + numRecords * 12;  String shapeType=this.getShapeType();  if (shapeType == SHAPE_POINT || shapeType == SHAPE_POINT_M)   return (this.getLength() - overhead) / 16;  if (shapeType == SHAPE_MULTI_POINT || shapeType == SHAPE_MULTI_POINT_M)   return (this.getLength() - (overhead + numRecords * (32 + 4))) / 16;  if (shapeType == SHAPE_POLYLINE || shapeType == SHAPE_POLYGON || shapeType == SHAPE_POLYLINE_M || shapeType == SHAPE_POLYGON_M)   return (this.getLength() - (overhead + numRecords * (32 + 8))) / 16;  if (shapeType == SHAPE_POINT_Z)   return (this.getLength() - overhead) / 24;  if (shapeType == SHAPE_MULTI_POINT_Z)   return (this.getLength() - (overhead + numRecords * (48 + 4))) / 24;  if (shapeType == SHAPE_POLYLINE_Z || shapeType == SHAPE_POLYGON_Z)   return (this.getLength() - (overhead + numRecords * (48 + 8))) / 24;  throw new WWRuntimeException(Logging.getMessage("SHP.UnsupportedShapeType",shapeType));}  }
class C{  public void next(int count){  pos+=count;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MWFNodeNext[");  sb.append(getSeqNo()).append(":Node=").append(getAD_WF_Node_ID()).append("->Next=").append(getAD_WF_Next_ID());  if (m_conditions != null)   sb.append(",#").append(m_conditions.length);  if (getDescription() != null && getDescription().length() > 0)   sb.append(",").append(getDescription());  sb.append("]");  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:27.478 -0500",hash_original_method="150D62CB24782FBFD68E18019E7202DB",hash_generated_method="01059C04D62A95D12C039037E6C7745F") public HttpVersion(int major,int minor){  super(HTTP,major,minor);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.577 -0500",hash_original_method="76CDF956056DDB53150BD0C17057AE41",hash_generated_method="EF384F15E69216FA548C14063E1F1D22") protected void onSignalStrengthResult(AsyncResult ar){  SignalStrength oldSignalStrength=mSignalStrength;  if (ar.exception != null) {    setSignalStrengthDefaultValues();  } else {    int[] ints=(int[])ar.result;    int offset=2;    int cdmaDbm=(ints[offset] > 0) ? -ints[offset] : -120;    int cdmaEcio=(ints[offset + 1] > 0) ? -ints[offset + 1] : -160;    int evdoRssi=(ints[offset + 2] > 0) ? -ints[offset + 2] : -120;    int evdoEcio=(ints[offset + 3] > 0) ? -ints[offset + 3] : -1;    int evdoSnr=((ints[offset + 4] > 0) && (ints[offset + 4] <= 8)) ? ints[offset + 4] : -1;    mSignalStrength=new SignalStrength(99,-1,cdmaDbm,cdmaEcio,evdoRssi,evdoEcio,evdoSnr,false);  }  try {    phone.notifySignalStrength();  } catch (  NullPointerException ex) {    loge("onSignalStrengthResult() Phone already destroyed: " + ex + "SignalStrength not notified");  }}  }
class C{  public static Method counter(){  return create(COUNTER);}  }
class C{  private void encryptionProgressInit(){  Log.d(TAG,"Encryption progress screen initializing.");  if (mWakeLock == null) {    Log.d(TAG,"Acquiring wakelock.");    PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);    mWakeLock=pm.newWakeLock(PowerManager.FULL_WAKE_LOCK,TAG);    mWakeLock.acquire();  }  ((ProgressBar)findViewById(R.id.progress_bar)).setIndeterminate(true);  setBackFunctionality(false);  updateProgress();}  }
class C{  public void clear(int i){  assert consistent(i);  final int i4096=i >>> 12;  final int i64=i >>> 6;  and(i4096,i64,~(1L << i));}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  ObjectOutputStream.PutField fields=out.putFields();  fields.put("language",baseLocale.getLanguage());  fields.put("script",baseLocale.getScript());  fields.put("country",baseLocale.getRegion());  fields.put("variant",baseLocale.getVariant());  fields.put("extensions",localeExtensions == null ? "" : localeExtensions.getID());  fields.put("hashcode",-1);  out.writeFields();}  }
class C{  private void gc() throws Exception {  Runtime rt=Runtime.getRuntime();  long freeMem0=rt.freeMemory();  long freeMem=Long.MAX_VALUE;  int cnt=0;  while (freeMem0 < freeMem && cnt < GC_CALL_CNT) {    System.gc();    U.sleep(WAIT_TIME);    cnt++;    freeMem=freeMem0;    freeMem0=rt.freeMemory();  }}  }
class C{  public Instances transform(Instances D) throws Exception {  int L=D.classIndex();  d=D.numAttributes() - L;  int keep[]=A.append(this.paY,j);  Arrays.sort(keep);  int remv[]=A.invert(keep,L);  Arrays.sort(remv);  map=new int[L];  for (int j=0; j < L; j++) {    map[j]=Arrays.binarySearch(keep,j);  }  Instances D_=F.remove(new Instances(D),remv,false);  D_.setClassIndex(map[this.j]);  return D_;}  }
class C{  public static List<GenericValue> makeTrackingCodeOrders(HttpServletRequest request){  Delegator delegator=(Delegator)request.getAttribute("delegator");  java.sql.Timestamp nowStamp=UtilDateTime.nowTimestamp();  List<GenericValue> trackingCodeOrders=FastList.newInstance();  Cookie[] cookies=request.getCookies();  Timestamp affiliateReferredTimeStamp=null;  String siteId=null;  String isBillable=null;  String trackingCodeId=null;  if (cookies != null && cookies.length > 0) {    for (int i=0; i < cookies.length; i++) {      String cookieName=cookies[i].getName();      if ("Ofbiz.TKCD.SiteId".equals(cookieName)) {        siteId=cookies[i].getValue();      }      if ("Ofbiz.TKCD.UpdatedTimeStamp".equals(cookieName)) {        String affiliateReferredTime=cookies[i].getValue();        if (affiliateReferredTime != null && !affiliateReferredTime.equals("")) {          try {            affiliateReferredTimeStamp=Timestamp.valueOf(affiliateReferredTime);          } catch (          IllegalArgumentException e) {            Debug.logError(e,"Error parsing affiliateReferredTimeStamp value from cookie",module);          }        }      }      if (cookieName.startsWith("TKCDB_")) {        isBillable="Y";        trackingCodeId=cookies[i].getValue();      } else       if (cookieName.startsWith("TKCDT_")) {        isBillable="N";        trackingCodeId=cookies[i].getValue();      }    }  }  GenericValue trackingCode=null;  try {    trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);  }  if (trackingCode != null) {    if (trackingCode.get("fromDate") != null && nowStamp.before(trackingCode.getTimestamp("fromDate"))) {      if (Debug.infoOn())       Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has not yet gone into effect, ignoring this trackingCodeId",module);    }    if (trackingCode.get("thruDate") != null && nowStamp.after(trackingCode.getTimestamp("thruDate"))) {      if (Debug.infoOn())       Debug.logInfo("The TrackingCode with ID [" + trackingCodeId + "] has expired, ignoring this trackingCodeId",module);    }    GenericValue trackingCodeOrder=delegator.makeValue("TrackingCodeOrder",UtilMisc.toMap("trackingCodeTypeId",trackingCode.get("trackingCodeTypeId"),"trackingCodeId",trackingCodeId,"isBillable",isBillable,"siteId",siteId,"hasExported","N","affiliateReferredTimeStamp",affiliateReferredTimeStamp));    Debug.logInfo(" trackingCodeOrder is " + trackingCodeOrder,module);    trackingCodeOrders.add(trackingCodeOrder);  } else {    if (trackingCodeId != null) {      Debug.logError("TrackingCode not found for trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId.",module);    }  }  return trackingCodeOrders;}  }
class C{  public StartupException(){  super();}  }
class C{  public void help(final Command command){  if (Command.isUnspecified(command)) {    usage();  } else {    info(StringUtils.wrap(helpMap.get(command.getName()),80,""));    info("\n\nusage: \n\n");    info(StringUtils.wrap("> java ... " + getClass().getName() + " "+ usageMap.get(command),80,"\t\t"));    info("\n\noptions: \n\n");    for (    String option : command.getOptions()) {      info(StringUtils.wrap("--" + option + ": "+ helpMap.get(option)+ "\n",80,"\t"));    }    info("\n\n");  }}  }
class C{  void scheduleMessageReceived(NextFilter nextFilter,Object message){  messageReceivedEventQueue.add(new IoFilterEvent(nextFilter,IoEventType.MESSAGE_RECEIVED,session,message));}  }
class C{  public Vector<String> makeVector(String[] stringArray){  Vector<String> newVect=new Vector<String>();  int c=0;  try {    for (c=0; c < stringArray.length; c++) {      stringArray[c]=stringArray[c].trim();      newVect.add(stringArray[c]);    }  } catch (  ArrayIndexOutOfBoundsException e) {    return newVect;  }  return newVect;}  }
class C{  @Override public boolean ready() throws IOException {synchronized (lock) {    checkNotClosed();    return ((end - pos) > 0) || in.ready();  }}  }
class C{  public Uri addOutgoingGeolocSharing(ContactId contact,String sharingId,Geoloc geoloc,GeolocSharing.State state,GeolocSharing.ReasonCode reasonCode,long timestamp){  ContentValues values=new ContentValues();  values.put(GeolocSharingData.KEY_SHARING_ID,sharingId);  values.put(GeolocSharingData.KEY_CONTACT,contact.toString());  values.put(GeolocSharingData.KEY_MIME_TYPE,MimeType.GEOLOC_MESSAGE);  values.put(GeolocSharingData.KEY_CONTENT,geoloc.toString());  values.put(GeolocSharingData.KEY_DIRECTION,Direction.OUTGOING.toInt());  values.put(GeolocSharingData.KEY_STATE,state.toInt());  values.put(GeolocSharingData.KEY_REASON_CODE,reasonCode.toInt());  values.put(GeolocSharingData.KEY_TIMESTAMP,timestamp);  return mLocalContentResolver.insert(GeolocSharingData.CONTENT_URI,values);}  }
class C{  public JSONAPIDocument(T data,ObjectMapper deserializer){  this(data);  this.deserializer=deserializer;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void registerConstant(String label){  if (!constants.containsKey(label)) {    constants.put(label,0L);  }  if (variables.containsKey(label)) {    System.out.println(label + " is now a constant!");    variables.remove(label);  }}  }
class C{  public ComponentName(Context pkg,Class<?> cls){  mPackage=pkg.getPackageName();  mClass=cls.getName();}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new VerticalLineGenerator(Double.valueOf(args[0]));}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void gc() throws RemoteException {  System.gc();}  }
class C{  private static void logOsInfo(){  Logger.appendLog("[Main][I]User Os is " + Cfg.getOs());  Logger.appendLog("[Main][I]Os name : " + Os.getOsName());  Logger.appendLog("[Main][I]User Platform is : " + Os.platform());  Logger.appendLog("[Main][I]JAVA version : " + System.getProperty("java.version"));  Logger.appendLog("[Main][I]Available cores (cpu) = " + HostInfo.availableCpus());  Logger.appendLog("[Main][I]Max allocated memory = " + HostInfo.getMaxMemory() + " bytes");}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/san-aliases/remove") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep removeAliases(WwnAliasesDeleteParam aliases,@PathParam("id") URI id) throws InternalException {  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  ArgValidator.checkFieldNotEmpty(aliases.getAliases(),"aliases");  NetworkSystem device=queryResource(id);  String fabricId=aliases.getFabricId();  if (Type.brocade.toString().equals(device.getSystemType())) {    ArgValidator.checkFieldNotEmpty(fabricId,"fabric-id");  }  String fabricWwn=null;  if (WWNUtility.isValidWWN(fabricId)) {    fabricWwn=fabricId;    fabricId=fabricId.replaceAll(":","");  }  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,device.getId(),task,ResourceOperationTypeEnum.REMOVE_ALIAS);  List<ZoneWwnAlias> zoneAliases=new ArrayList<ZoneWwnAlias>();  for (  WwnAliasParam alias : aliases.getAliases()) {    validateAlias(alias,false);    zoneAliases.add(new ZoneWwnAlias(alias.getName(),alias.getAddress()));    auditOp(OperationTypeEnum.REMOVE_ALIAS,true,AuditLogManager.AUDITOP_BEGIN,alias.getName(),device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  }  NetworkController controller=getNetworkController(device.getSystemType());  controller.removeAliases(device.getId(),fabricId,fabricWwn,zoneAliases,task);  return toTask(device,task,op);}  }
class C{  public MosaicSupplyChangeNotification(final Account supplier,final MosaicId mosaicId,final Supply delta,final MosaicSupplyType supplyType){  super(NotificationType.MosaicSupplyChange);  this.supplier=supplier;  this.mosaicId=mosaicId;  this.delta=delta;  this.supplyType=supplyType;}  }
class C{  public static int hashCode(int pre,double d){  long l=Double.doubleToLongBits(d);  return 37 * pre + (int)(l ^ (l >>> 32));}  }
class C{  public static String encode(String string){  byte[] bytes;  try {    bytes=string.getBytes(PREFERRED_ENCODING);  } catch (  UnsupportedEncodingException e) {    bytes=string.getBytes();  }  return encodeBytes(bytes);}  }
class C{  public static String quantityplnoun(final int quantity,final String noun,final String one){  final String word=plnoun(quantity,noun);  if (quantity == 1) {    if (one.equals("a")) {      return a_noun(word);    } else     if (one.equals("A")) {      return A_noun(word);    } else     if (one.equals("")) {      return word;    } else {      return one + " " + word;    }  } else {    return Integer.toString(quantity) + " " + plural(noun);  }}  }
class C{  public void endElement(String name,String nsPrefix,String nsURI){  IXMLElement elt=(IXMLElement)this.stack.pop();  if (elt.getChildrenCount() == 1) {    IXMLElement child=elt.getChildAtIndex(0);    if (child.getName() == null) {      elt.setContent(child.getContent());      elt.removeChildAtIndex(0);    }  }}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  private void populateData(Region region,Object[] data){  logger.info("PRQueryRegionClosedJUnitTest#populateData: Populating Data in the PR Region ");  for (int j=0; j < data.length; j++) {    region.put(new Integer(j),data[j]);  }}  }
class C{  public double[] computeLocalUsingPreviousObservations(double[] source,double[] destination) throws Exception {  return computeLocalUsingPreviousObservations(source,destination,false);}  }
class C{  protected DefFmtElementoEtiquetaDato createElementoEtiquetaDato(String valorPredeterminado,String id,String mostrarScroll){  DefFmtElementoEtiquetaDato elemento=null;  if (mostrarScroll != null)   elemento=new DefFmtElementoEtiquetaDato(mostrarScroll); else   elemento=new DefFmtElementoEtiquetaDato();  elemento.setEtiqueta(createEtiqueta(valorPredeterminado));  elemento.setCampo(createCampo(id));  return elemento;}  }
class C{  public static Properties loadProperties(File f){  if (f == null || !f.isFile() || !f.exists()) {    return null;  }  InputStream fis=null;  try {    Properties props=new Properties();    fis=new FileInputStream(f);    props.load(fis);    return props;  } catch (  Exception e) {    if (log.isDebugEnabled()) {      log.debug("erron on load file: [" + f + "], msg:"+ e);    }    return null;  } finally {    CloseUtil.close(fis);  }}  }
class C{  private boolean isInstalled(ComponentName globalSearch){  Intent intent=new Intent(SearchManager.INTENT_ACTION_GLOBAL_SEARCH);  intent.setComponent(globalSearch);  List<ResolveInfo> activities=queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);  if (activities != null && !activities.isEmpty()) {    return true;  }  return false;}  }
class C{  @UiConstructor public MaterialNavBrand(){  super(Document.get().createElement("a"),"brand-logo");}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_singleIsA_1_();}  }
class C{  void transform(){  if (transformed || nvert <= 0) {    return;  }  if (tvert == null || tvert.length < nvert * 3) {    tvert=new int[nvert * 3];  }  mat.transform(vert,tvert,nvert);  transformed=true;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENUM_MAPPING_MODEL;}  }
class C{  public static void notifyTypeInstantiated(RVMType type){  for (int i=0; i < numSpecializedMethods; i++) {    if (methods[i] == null) {      initializeSpecializedMethod(i);    }    type.setSpecializedMethod(i,methods[i].specializeMethod(type));  }}  }
class C{  public void testGetBaseURI() throws IOException, SAXException {  File f=Support_Resources.resourceToTempFile("/simple.xml");  Document d=db.parse(f);  assertTrue(d.getDocumentElement().getBaseURI().startsWith("file://"));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public MandatoryUdaMissingException(String message,Object[] params){  super(message,params);}  }
class C{  protected JSONObject(JSONTokener x){  this();  char c;  String key;  if (x.nextClean() != '{') {    throw new RuntimeException("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw new RuntimeException("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c == '=') {if (x.next() != '>') {x.back();}} else if (c != ':') {throw new RuntimeException("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw new RuntimeException("Expected a ',' or '}'");}}}  }
class C{  public DcwCrossTileID(int currentTileKey,int nextTileID,int nextTileKey){  this.currentTileKey=currentTileKey;  this.nextTileID=nextTileID;  this.nextTileKey=nextTileKey;}  }
class C{  public static void registerApp(int application,String appName) throws AppIDException {  if ((application & APP_ID_MASK) != application) {    throw new InvalidAppIDValueException(application);  }  String oldApp=appIdMap.putIfAbsent(application,appName);  if (oldApp != null && !oldApp.equals(appName)) {    throw new AppIDInUseException(application,oldApp,appName);  }}  }
class C{  public GraphicsNodeRable createGraphicsNodeRable(GraphicsNode node){  return (GraphicsNodeRable)node.getGraphicsNodeRable(true);}  }
class C{  @SuppressWarnings({"RedundantIfStatement"}) public boolean isInsideGridZone(){  if (!this.isPositionInside(this.nw))   return false;  if (!this.isPositionInside(this.ne))   return false;  if (!this.isPositionInside(this.sw))   return false;  if (!this.isPositionInside(this.se))   return false;  return true;}  }
class C{  public RangeQueryBuilder lt(double to){  this.to=to;  this.includeUpper=false;  return this;}  }
class C{  public void close(){  closeResources();  valid=false;  LOGGER.info("Log: Closed file " + file.toAbsolutePath());}  }
class C{  private Base64(){}  }
class C{  public static void main(String[] args){  TestRunner.run(RouterTest.class);}  }
class C{  public void configure(){  Mx1CommandStation cs=new Mx1CommandStation();  this.getSystemConnectionMemo().setCommandStation(cs);  Mx1Packetizer packets=new Mx1Packetizer(cs,Mx1Packetizer.ASCII);  packets.connectPort(this);  this.getSystemConnectionMemo().setMx1TrafficController(packets);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public List<Statistics> _queryUser_Statistics(long userId){synchronized (this) {    if (user_StatisticsQuery == null) {      QueryBuilder<Statistics> queryBuilder=queryBuilder();      queryBuilder.where(Properties.UserId.eq(null));      user_StatisticsQuery=queryBuilder.build();    }  }  Query<Statistics> query=user_StatisticsQuery.forCurrentThread();  query.setParameter(0,userId);  return query.list();}  }
class C{  @SuppressWarnings("unused") @Test public void testCompositeStateExitSequence(){  Statechart sc=_createStatechart("cs");{    Scope scope=_createInterfaceScope("interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createExitAssignment(v1,s1,1);        Region r1_s1=_createRegion("r1",s1);{          Entry e=_createEntry(EntryKind.INITIAL,null,r1_s1);          State s2=_createState("s2",r1_s1);          State s3=_createState("s3",r1_s1);          _createTransition(e,s2);          _createTransition(s2,s3);        }        Region r2_s1=_createRegion("r2",s1);{          Entry e=_createEntry(EntryKind.INITIAL,null,r2_s1);          State s4=_createState("s4",r2_s1);          State s5=_createState("s5",r2_s1);          State s6=_createState("s6",r2_s1);          _createTransition(e,s4);        }      }    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("s1",_s1.getSimpleName());  ExecutionState _s2=flow.getStates().get(1);  assertEquals("s2",_s2.getSimpleName());  ExecutionState _s3=flow.getStates().get(2);  assertEquals("s3",_s3.getSimpleName());  ExecutionState _s4=flow.getStates().get(3);  assertEquals("s4",_s4.getSimpleName());  ExecutionState _s5=flow.getStates().get(4);  assertEquals("s5",_s5.getSimpleName());  ExecutionState _s6=flow.getStates().get(5);  assertEquals("s6",_s6.getSimpleName());  assertNotNull(_s1.getExitAction());  assertNotNull(_s1.getExitSequence());  assertEquals(3,_s1.getExitSequence().getSteps().size());  Sequence _r1_s1=_s2.getSuperScope().getExitSequence();  assertCall(_s1.getExitSequence(),0,_r1_s1);  Sequence _r2_s1=_s4.getSuperScope().getExitSequence();  assertCall(_s1.getExitSequence(),1,_r2_s1);  Step _switch=_r1_s1.getSteps().get(0);  assertStateSwitch(_switch,_s2,_s3);  assertCall(assertedSequence(assertedStateCase(_switch,_s2).getStep()),0,_s2.getExitSequence());  assertCall(assertedSequence(assertedStateCase(_switch,_s3).getStep()),0,_s3.getExitSequence());  _switch=_r2_s1.getSteps().get(0);  assertStateSwitch(_switch,_s4,_s5,_s6);  assertCall(assertedSequence(assertedStateCase(_switch,_s4).getStep()),0,_s4.getExitSequence());  assertCall(assertedSequence(assertedStateCase(_switch,_s5).getStep()),0,_s5.getExitSequence());  assertCall(assertedSequence(assertedStateCase(_switch,_s6).getStep()),0,_s6.getExitSequence());  assertCall(_s1.getExitSequence(),2,_s1.getExitAction());}  }
class C{  public DDAG(Classifier baseClassifier,boolean concurrentTrain){  super(baseClassifier,concurrentTrain);}  }
class C{  public static boolean isTomorrow(DateTime date){  DateTime tomorrowMidnight=new DateTime().withTimeAtStartOfDay().plusDays(1);  DateTime twoDaysMidnight=new DateTime().withTimeAtStartOfDay().plusDays(2);  return ((tomorrowMidnight.getMillis() == date.getMillis() || tomorrowMidnight.isAfter(date.getMillis())) && twoDaysMidnight.isBefore(date.getMillis()));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.USE_STATEMENT___USE_1:    setUse_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void main(String[] args) throws Exception {  String parsePluginFile=null;  String usage="ParsePluginsReader [--file <parse plugin file location>]";  if ((args.length != 0 && args.length != 2) || (args.length == 2 && !"--file".equals(args[0]))) {    System.err.println(usage);    System.exit(1);  }  for (int i=0; i < args.length; i++) {    if (args[i].equals("--file")) {      parsePluginFile=args[++i];    }  }  ParsePluginsReader reader=new ParsePluginsReader();  if (parsePluginFile != null) {    reader.setFParsePluginsFile(parsePluginFile);  }  ParsePluginList prefs=reader.parse(NutchConfiguration.create());  for (  String mimeType : prefs.getSupportedMimeTypes()) {    System.out.println("MIMETYPE: " + mimeType);    List<String> plugList=prefs.getPluginList(mimeType);    System.out.println("EXTENSION IDs:");    for (    String j : plugList) {      System.out.println(j);    }  }}  }
class C{  public static boolean isInteger(String number){  if (isNullOrEmpty(number)) {    return false;  }  try {    Integer.parseInt(number);    return true;  } catch (  NumberFormatException ex) {    return false;  }}  }
class C{  @Override public String inactiveTabBackground(){  return "#484848";}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  private static boolean hasValidJarContent(final InputStream inputStream){  JarInputStream jarInputStream=null;  boolean valid=false;  try {    jarInputStream=new JarInputStream(inputStream);    valid=(jarInputStream.getNextJarEntry() != null);  } catch (  IOException ignore) {  } finally {    try {      jarInputStream.close();    } catch (    IOException ioex) {    }  }  return valid;}  }
class C{  private Socket openDataConnection(String cmd) throws sun.net.ftp.FtpProtocolException, IOException {  Socket clientSocket;  if (passiveMode) {    try {      return openPassiveDataConnection(cmd);    } catch (    sun.net.ftp.FtpProtocolException e) {      String errmsg=e.getMessage();      if (!errmsg.startsWith("PASV") && !errmsg.startsWith("EPSV")) {        throw e;      }    }  }  ServerSocket portSocket;  InetAddress myAddress;  String portCmd;  if (proxy != null && proxy.type() == Proxy.Type.SOCKS) {    throw new sun.net.ftp.FtpProtocolException("Passive mode failed");  }  portSocket=new ServerSocket(0,1,server.getLocalAddress());  try {    myAddress=portSocket.getInetAddress();    if (myAddress.isAnyLocalAddress()) {      myAddress=server.getLocalAddress();    }    portCmd="EPRT |" + ((myAddress instanceof Inet6Address) ? "2" : "1") + "|"+ myAddress.getHostAddress()+ "|"+ portSocket.getLocalPort()+ "|";    if (!issueCommand(portCmd) || !issueCommand(cmd)) {      portCmd="PORT ";      byte[] addr=myAddress.getAddress();      for (int i=0; i < addr.length; i++) {        portCmd=portCmd + (addr[i] & 0xFF) + ",";      }      portCmd=portCmd + ((portSocket.getLocalPort() >>> 8) & 0xff) + ","+ (portSocket.getLocalPort() & 0xff);      issueCommandCheck(portCmd);      issueCommandCheck(cmd);    }    if (connectTimeout >= 0) {      portSocket.setSoTimeout(connectTimeout);    } else {      if (defaultConnectTimeout > 0) {        portSocket.setSoTimeout(defaultConnectTimeout);      }    }    clientSocket=portSocket.accept();    if (readTimeout >= 0) {      clientSocket.setSoTimeout(readTimeout);    } else {      if (defaultSoTimeout > 0) {        clientSocket.setSoTimeout(defaultSoTimeout);      }    }  }  finally {    portSocket.close();  }  if (useCrypto) {    try {      clientSocket=sslFact.createSocket(clientSocket,serverAddr.getHostName(),serverAddr.getPort(),true);    } catch (    Exception ex) {      throw new IOException(ex.getLocalizedMessage());    }  }  return clientSocket;}  }
class C{  public ChangeableHighlightPainter(Paint paint,boolean rounded){  this(paint,rounded,1.0f);}  }
class C{  public static void copyString(Reader source,OutputStream target) throws IOException {  char[] buff=new char[Constants.IO_BUFFER_SIZE];  Data d=new Data(new byte[3 * Constants.IO_BUFFER_SIZE]);  while (true) {    int l=source.read(buff);    if (l < 0) {      break;    }    d.writeStringWithoutLength(buff,l);    target.write(d.data,0,d.pos);    d.reset();  }}  }
class C{  public void resume(){  engine.resume();}  }
class C{  public void printPush(Vertex expression,Writer writer,String indent,Set<Vertex> elements,List<Vertex> newVariables,List<Vertex> newFunctions,List<Vertex> newStates,Network network) throws IOException {  Vertex state=expression.getRelationship(Primitive.ARGUMENT);  writer.write(indent);  writer.write("push ");  if (!elements.contains(state)) {    newStates.add(state);    elements.add(state);  }  printElement(state,writer,indent,newFunctions,newVariables,elements,network);  writer.write(";\r\n\r\n");}  }
class C{  @Override public void refresh(){  mLogger.logDebug("Refreshing access token...");  final MSAAccountInfo newInfo=(MSAAccountInfo)mAuthenticator.loginSilent();  mSession=newInfo.mSession;}  }
class C{  public boolean isDeclaredPolyfill(){  return declaredPolyfill;}  }
class C{  public double nextDouble(double least,double bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextDouble() * (bound - least) + least;}  }
class C{  private static boolean containedIn(final Rectangle2D r,final Collection<Polygon> shapes){  for (  final Shape item : shapes) {    if (item.contains(r)) {      return true;    }  }  return false;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  private void updateUDPPacketIn(){  this.testUDPPacketSrld=this.testUDPPacket.serialize();  this.testUDPPacketIn=OFFactories.getFactory(OFVersion.OF_13).buildPacketIn().setBufferId(OFBufferId.NO_BUFFER).setMatch(OFFactories.getFactory(OFVersion.OF_13).buildMatch().setExact(MatchField.IN_PORT,OFPort.of(3)).build()).setData(this.testUDPPacketSrld).setReason(OFPacketInReason.NO_MATCH).build();}  }
class C{  public void clip(Path s){  g.clipPath(s);}  }
class C{  public static double clamp(double value,double min,double max){  if (value <= max && value >= min) {    return value;  } else   if (max < value) {    return max;  } else {    return min;  }}  }
class C{  public boolean loadFile(String parentDir){  boolean ret=true;  String upperCaseVersion=parentDir + "/" + RPF_TOC_FILE_NAME;  String lowerCaseVersion=parentDir + "/" + LITTLE_RPF_TOC_FILE_NAME;  try {    if (BinaryFile.exists(upperCaseVersion)) {      binFile=new BinaryBufferedFile(upperCaseVersion);      aTocFilePath=upperCaseVersion;    } else     if (BinaryFile.exists(lowerCaseVersion)) {      binFile=new BinaryBufferedFile(lowerCaseVersion);      aTocFilePath=lowerCaseVersion;    }    if (binFile == null) {      return false;    }    if (DEBUG_RPFTOC) {      Debug.output("RpfTocHandler: TOC file is in " + parentDir);    }    dir=parentDir + "/";    if (!parseToc(binFile)) {      ret=false;      Debug.error("RpfTocHandler: loadFile(): error parsing A.TOC file!!");    }    aTocByteOrder=binFile.byteOrder();    binFile.close();  } catch (  IOException e) {    ret=false;  }  binFile=null;  return ret;}  }
class C{  public static boolean containsBreaks(String text){  return CharMatcher.anyOf("\n\r").matchesAnyOf(text);}  }
class C{  private void skipWhitespace(ByteArrayInputStream input){  int ch=readChar(input);  while (ch == ' ' || ch == '\n' || ch == '\r') {    ch=readChar(input);  }  buffer.insertElementAt(Integer.valueOf(ch),0);}  }
class C{  public void draw(Shape s){  addStrokeShape(s);  mPrintMetrics.draw(this);}  }
class C{  private void ok(){  int keepalive;  int timeout;  Intent intent=new Intent();  if (resultData == null) {    resultData=new Bundle();    resultData.putString(ActivityConstants.message,ActivityConstants.empty);    resultData.putString(ActivityConstants.topic,ActivityConstants.empty);    resultData.putInt(ActivityConstants.qos,ActivityConstants.defaultQos);    resultData.putBoolean(ActivityConstants.retained,ActivityConstants.defaultRetained);  }  intent.putExtras(resultData);  String username=((EditText)findViewById(R.id.uname)).getText().toString();  String password=((EditText)findViewById(R.id.password)).getText().toString();  String sslkey=null;  boolean ssl=((CheckBox)findViewById(R.id.sslCheckBox)).isChecked();  if (ssl) {    sslkey=((EditText)findViewById(R.id.sslKeyLocaltion)).getText().toString();  }  try {    timeout=Integer.parseInt(((EditText)findViewById(R.id.timeout)).getText().toString());  } catch (  NumberFormatException nfe) {    timeout=ActivityConstants.defaultTimeOut;  }  try {    keepalive=Integer.parseInt(((EditText)findViewById(R.id.keepalive)).getText().toString());  } catch (  NumberFormatException nfe) {    keepalive=ActivityConstants.defaultKeepAlive;  }  intent.putExtra(ActivityConstants.username,username);  intent.putExtra(ActivityConstants.password,password);  intent.putExtra(ActivityConstants.timeout,timeout);  intent.putExtra(ActivityConstants.keepalive,keepalive);  intent.putExtra(ActivityConstants.ssl,ssl);  intent.putExtra(ActivityConstants.ssl_key,sslkey);  advanced.setResult(RESULT_OK,intent);  advanced.finish();}  }
class C{  public static ConnectContainerToNetworkParams create(@NotNull String netId,@NotNull ConnectContainer connectContainer){  return new ConnectContainerToNetworkParams().withNetworkId(netId).withConnectContainer(connectContainer);}  }
class C{  @Override final public void updateCounter(long delta){  super.updateCounter(delta);}  }
class C{  public static byte[] decode(String base64){  Preconditions.checkNotNull(base64,"base64");  return org.apache.commons.codec.binary.Base64.decodeBase64(base64);}  }
class C{  public static <T>T withWriterAppend(Path self,String charset,boolean writeBom,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return IOGroovyMethods.withWriter(newWriter(self,charset,true,writeBom),closure);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void createIssue(MPPOrder order,int PP_OrderBOMLine_ID,Timestamp movementdate,BigDecimal qty,BigDecimal qtyScrap,BigDecimal qtyReject,MStorage[] storages,boolean forceIssue){  if (qty.signum() == 0)   return;  MPPOrderBOMLine PP_orderbomLine=new MPPOrderBOMLine(order.getCtx(),PP_OrderBOMLine_ID,order.get_TrxName());  BigDecimal toIssue=qty.add(qtyScrap);  for (  MStorage storage : storages) {    if (storage.getQtyOnHand().signum() == 0)     continue;    BigDecimal qtyIssue=toIssue.min(storage.getQtyOnHand());    if (qtyIssue.signum() != 0 || qtyScrap.signum() != 0 || qtyReject.signum() != 0) {      String CostCollectorType=MPPCostCollector.COSTCOLLECTORTYPE_ComponentIssue;      if (PP_orderbomLine.isComponentType(MPPOrderBOMLine.COMPONENTTYPE_Co_Product)) {        CostCollectorType=MPPCostCollector.COSTCOLLECTORTYPE_MixVariance;      }      MPPCostCollector.createCollector(order,PP_orderbomLine.getM_Product_ID(),storage.getM_Locator_ID(),storage.getM_AttributeSetInstance_ID(),order.getS_Resource_ID(),PP_OrderBOMLine_ID,0,MDocType.getDocType(MDocType.DOCBASETYPE_ManufacturingCostCollector),CostCollectorType,movementdate,qtyIssue,qtyScrap,qtyReject,0,Env.ZERO);      PP_orderbomLine.load(order.get_TrxName());      if (PP_orderbomLine.getQtyBatch().signum() == 0 && PP_orderbomLine.getQtyBOM().signum() == 0) {        order.createMethodChangeVariance(PP_orderbomLine);      }    }    toIssue=toIssue.subtract(qtyIssue);    if (toIssue.signum() == 0)     break;  }  if (forceIssue && toIssue.signum() != 0) {    MPPCostCollector.createCollector(order,PP_orderbomLine.getM_Product_ID(),PP_orderbomLine.getM_Locator_ID(),PP_orderbomLine.getM_AttributeSetInstance_ID(),order.getS_Resource_ID(),PP_OrderBOMLine_ID,0,MDocType.getDocType(MDocType.DOCBASETYPE_ManufacturingCostCollector),MPPCostCollector.COSTCOLLECTORTYPE_ComponentIssue,movementdate,toIssue,Env.ZERO,Env.ZERO,0,Env.ZERO);    return;  }  if (toIssue.signum() != 0) {    throw new AdempiereException("Should not happen toIssue=" + toIssue);  }}  }
class C{  @Override public String toString(){  return Base64.encodeToString(getConfidentialityKey().getEncoded(),BASE64_FLAGS) + ":" + Base64.encodeToString(getIntegrityKey().getEncoded(),BASE64_FLAGS);}  }
class C{  boolean isInitValueValid(int v){  if ((v < Integer.MIN_VALUE) || (v > Integer.MAX_VALUE)) {    return false;  }  return true;}  }
class C{  public void train(String name){  assert mTrained == false;  assert mPointDifferences.size() > 0;  if (mPoints >= mMinimalPointsPerCluster) {    if (m_debugPrint) {      if (name != null) {        logger.info("trainig last seen model for " + name);      }      for (      Entry<Integer,Integer> pointDiff : mPointDifferences.entrySet()) {        logger.info("  " + pointDiff.getKey() + ", "+ pointDiff.getValue());      }    }    computeScores();  }  mPointDifferences=null;  mTrained=true;}  }
class C{  public void anonymize(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    if (theAtts.getType(i).equals("ID") || theAtts.getQName(i).equals("name")) {      theAtts.removeAttribute(i);    }  }}  }
class C{  public int size(){  return segments.size();}  }
class C{  void start(){  if (!mRunning) {    mTriggerPercentage=0;    mStartTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=true;    mParent.postInvalidate();  }}  }
class C{  public ToStringBuilder append(final String fieldName,final short[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  public void readSequenceOf(ASN1SequenceOf sequenceOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCEOF) {    throw expected("sequenceOf");  }  decodeValueCollection(sequenceOf);}  }
class C{  public PrintStream(java.io.OutputStream out){}  }
class C{  private Object result(Collection<?> res){  assert res != null;  assert res.size() == 1;  return res.iterator().next();}  }
class C{  public CylinderPortrayal3D(){  this(1f);}  }
class C{  @SuppressWarnings("LockAcquiredButNotSafelyReleased") public boolean onJobLock(){  lock.readLock().lock();  if (done) {    lock.readLock().unlock();    return false;  } else   return true;}  }
class C{  public CCSprite(String spriteFrameName,boolean isFrame){  assert spriteFrameName != null : "Invalid spriteFrameName for sprite";  CCSpriteFrame frame=CCSpriteFrameCache.sharedSpriteFrameCache().getSpriteFrame(spriteFrameName);  init(frame);}  }
class C{  public static Transport bindAwait(){  return bindAwait(TransportConfig.defaultConfig());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.538 -0500",hash_original_method="DB9E0507E0CFF6D3A6878FC813F638FB",hash_generated_method="E72FA9AB21EB9DEC849D67C832120E3A") private Organization(){}  }
class C{  public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpeg == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  s=getExifWriterStream(exifOutFileName);  s.write(jpeg,0,jpeg.length);  s.flush();  s.close();}  }
class C{  private Option createSingleArgOpt(String longOpt,String argName,String desc){  return Option.builder().longOpt(longOpt).hasArg().argName(argName).desc(desc).build();}  }
class C{  public static double dot(double[] u,double[] v){  int n=length(u,v);  double dot=0.0;  for (int i=0; i < n; i++) {    dot+=u[i] * v[i];  }  return dot;}  }
class C{  public Map<String,Integer> ts2Shingles(double[] series,int windowSize,int paaSize,int alphabetSize,NumerosityReductionStrategy strategy,double nrThreshold,int shingleSize) throws SAXException {  String[] alphabet=new String[alphabetSize];  for (int i=0; i < alphabetSize; i++) {    alphabet[i]=String.valueOf(TSProcessor.ALPHABET[i]);  }  String[] allShingles=getAllPermutations(alphabet,shingleSize);  HashMap<String,Integer> res=new HashMap<String,Integer>(allShingles.length);  for (  String s : allShingles) {    res.put(s,0);  }  SAXRecords saxData=ts2saxViaWindow(series,windowSize,paaSize,na.getCuts(alphabetSize),strategy,nrThreshold);  for (  SAXRecord sr : saxData) {    String word=String.valueOf(sr.getPayload());    int frequency=sr.getIndexes().size();    for (int i=0; i <= word.length() - shingleSize; i++) {      String shingle=word.substring(i,i + shingleSize);      res.put(shingle,res.get(shingle) + frequency);    }  }  return res;}  }
class C{  @NotNull public static List<? extends VcsFullCommitDetails> history(@NotNull final Project project,@NotNull final VirtualFile root,int limit,@NotNull List<String> parameters,boolean silent) throws VcsException {  HgVcs hgvcs=HgVcs.getInstance(project);  assert hgvcs != null;  final HgVersion version=hgvcs.getVersion();  String[] templates=HgBaseLogParser.constructFullTemplateArgument(true,version);  HgCommandResult result=getLogResult(project,root,version,limit,parameters,HgChangesetUtil.makeTemplate(templates));  return createFullCommitsFromResult(project,root,result,version,silent);}  }
class C{  private void goForward(){  if (this.inAppWebView.canGoForward()) {    this.inAppWebView.goForward();  }}  }
class C{  public static long estimateSize(long nnz2,long rows){  long sizeofValArray=(Sizeof.DOUBLE) * nnz2;  long sizeofRowPtrArray=(Sizeof.INT) * (rows + 1);  long sizeofColIndArray=(Sizeof.INT) * nnz2;  long sizeofDescr=(Sizeof.INT) * 4;  long tot=sizeofValArray + sizeofRowPtrArray + sizeofColIndArray+ sizeofDescr;  return tot;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    ExamPeriodEditForm myForm=(ExamPeriodEditForm)form;    sessionContext.checkPermission(Right.ExaminationPeriods);    String op=(myForm.getOp() != null ? myForm.getOp() : request.getParameter("op"));    if (op == null && request.getParameter("op2") != null) {      op=request.getParameter("op2");      myForm.setOp(op);    }    if (op == null) {      myForm.load(null,sessionContext);      myForm.setOp("List");    }    List<ExamType> types=ExamType.findAll();    if (!sessionContext.hasPermission(Right.StatusIndependent) && sessionContext.getUser().getCurrentAuthority().hasRight(Right.ExaminationSolver)) {      for (Iterator<ExamType> i=types.iterator(); i.hasNext(); ) {        ExamType t=i.next();        ExamStatus status=ExamStatus.findStatus(sessionContext.getUser().getCurrentAcademicSessionId(),t.getUniqueId());        if (status != null && !status.getManagers().isEmpty()) {          boolean hasManager=false;          for (          TimetableManager m : status.getManagers()) {            if (sessionContext.getUser().getCurrentAuthority().hasQualifier(m)) {              hasManager=true;              break;            }          }          if (!hasManager)           i.remove();        }      }    }    request.setAttribute("examTypes",types);    if ("Back".equals(op)) {      if (myForm.getUniqueId() != null)       request.setAttribute("hash",myForm.getUniqueId());      myForm.load(null,sessionContext);      myForm.setOp("List");    }    if ("Add Period".equals(op)) {      myForm.load(null,sessionContext);      myForm.setOp("Save");    }    for (    ExamType type : ExamTypeDAO.getInstance().findAll()) {      if ((type.getLabel() + " Periods").equals(op) && myForm.getCanAutoSetup(type.getUniqueId())) {        myForm.setAutoSetup(true);        myForm.setExamType(type.getUniqueId());        myForm.setOp("Save");      }    }    if ("Update".equals(op) || "Save".equals(op)) {      ActionMessages errors=myForm.validate(mapping,request);      if (errors.size() > 0) {        saveErrors(request,errors);        if (myForm.getAutoSetup())         myForm.setDays(request);        myForm.setOp(myForm.getUniqueId().longValue() < 0 ? "Save" : "Update");      } else {        Transaction tx=null;        try {          org.hibernate.Session hibSession=(new ExamPeriodDAO()).getSession();          if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())           tx=hibSession.beginTransaction();          ExamPeriod ep=myForm.saveOrUpdate(request,sessionContext,hibSession);          if (ep != null) {            ChangeLog.addChange(hibSession,sessionContext,ep,ChangeLog.Source.EXAM_PERIOD_EDIT,("Save".equals(op) ? ChangeLog.Operation.CREATE : ChangeLog.Operation.UPDATE),null,null);          }          if (tx != null)           tx.commit();        } catch (        Exception e) {          e.printStackTrace();          if (tx != null)           tx.rollback();          throw e;        }        myForm.setOp("List");        if (myForm.getUniqueId() != null)         request.setAttribute("hash",myForm.getUniqueId());      }    }    if ("Edit".equals(op)) {      String id=request.getParameter("id");      ActionMessages errors=new ActionMessages();      if (id == null || id.trim().length() == 0) {        errors.add("key",new ActionMessage("errors.invalid","Unique Id : " + id));        saveErrors(request,errors);        return mapping.findForward("list");      } else {        ExamPeriod ep=(new ExamPeriodDAO()).get(new Long(id));        if (ep == null) {          errors.add("name",new ActionMessage("errors.invalid","Unique Id : " + id));          saveErrors(request,errors);          return mapping.findForward("list");        } else {          myForm.load(ep,sessionContext);        }      }    }    if ("Delete".equals(op)) {      Transaction tx=null;      try {        org.hibernate.Session hibSession=(new ExamPeriodDAO()).getSession();        if (hibSession.getTransaction() == null || !hibSession.getTransaction().isActive())         tx=hibSession.beginTransaction();        ExamPeriod ep=(new ExamPeriodDAO()).get(myForm.getUniqueId(),hibSession);        ChangeLog.addChange(hibSession,sessionContext,ep,ChangeLog.Source.EXAM_PERIOD_EDIT,ChangeLog.Operation.DELETE,null,null);        myForm.delete(sessionContext,hibSession);        tx.commit();      } catch (      Exception e) {        e.printStackTrace();        if (tx != null)         tx.rollback();        throw e;      }      myForm.load(null,sessionContext);      myForm.setOp("List");    }    if ("List".equals(myForm.getOp())) {      getExamPeriods(request);      return mapping.findForward("list");    }    if ("Reload".equals(myForm.getOp())) {      if (myForm.getExamType() != null && myForm.getExamType() >= 0) {        sessionContext.setAttribute("Exam.Type",myForm.getExamType());        myForm.load(null,sessionContext);      } else {        myForm.reset(mapping,request);        myForm.setEditable(true);      }      myForm.setOp("Save");    }    return mapping.findForward(myForm.getAutoSetup() ? "midterm" : myForm.getUniqueId().longValue() < 0 ? "add" : "edit");  } catch (  Exception e) {    Debug.error(e);    throw e;  }}  }
class C{  public int dataSize(){  return rawData.size();}  }
class C{  public static Collection flatten(float[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  private String toHex(int i){  String hex=Integer.toHexString(i).toUpperCase();  if (hex.length() == 1)   return "0" + hex; else   return hex;}  }
class C{  protected MultilineComment_Impl(){  super();}  }
class C{  @Override public Version version(){  return VersionUtil.versionFor(getClass());}  }
class C{  public void print(String message){  String[] lines=message.split("\n");  for (  String line : lines) {    view.print(line);  }  view.scrollBottom();  PartPresenter activePart=partStack.getActivePart();  if (activePart == null || !activePart.equals(this)) {    isUnread=true;  }}  }
class C{  public final int readUnsignedByte() throws java.io.IOException {  int temp=in.read();  if (temp < 0) {    throw new EOFException();  }  return temp;}  }
class C{  public TStructuralType basicGetStructuralType(){  return structuralType;}  }
class C{  public Complex divide(Complex secondComplex){  return new Complex((a * secondComplex.a + b * secondComplex.b) / (Math.pow(secondComplex.a,2) + Math.pow(secondComplex.b,2)),(b * secondComplex.a - a * secondComplex.b) / (Math.pow(secondComplex.a,2) + Math.pow(secondComplex.b,2)));}  }
class C{  public void addFillOutsideLine(FillOutsideLine fill){  mFillBelowLine.add(fill);}  }
class C{  private static boolean eq(double v1,double v2){  return v1 == v2;}  }
class C{  public void testBug69746() throws Exception {  Connection testConnection;  Statement testStatement;  ResultSet testResultSet;  testConnection=getConnectionWithProps("dontTrackOpenResources=true");  testStatement=testConnection.createStatement();  testResultSet=testStatement.executeQuery("SELECT 1");  assertFalse("Connection should not be closed.",testConnection.isClosed());  assertFalse("Statement should not be closed.",isStatementClosedForTestBug69746(testStatement));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  testConnection.close();  assertTrue("Connection should be closed.",testConnection.isClosed());  assertFalse("Statement should not be closed.",isStatementClosedForTestBug69746(testStatement));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  testStatement.close();  assertTrue("Connection should be closed.",testConnection.isClosed());  assertTrue("Statement should be closed.",isStatementClosedForTestBug69746(testStatement));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  testResultSet.close();  assertTrue("Connection should be closed.",testConnection.isClosed());  assertTrue("Statement should be closed.",isStatementClosedForTestBug69746(testStatement));  assertTrue("ResultSet should be closed.",isResultSetClosedForTestBug69746(testResultSet));  createProcedure("testBug69746_proc","() BEGIN SELECT 1; SELECT 2; SELECT 3; END");  createTable("testBug69746_tbl","(fld1 INT NOT NULL AUTO_INCREMENT, fld2 INT, PRIMARY KEY(fld1))");  testConnection=getConnectionWithProps("dontTrackOpenResources=true");  testStatement=testConnection.createStatement();  testResultSet=testStatement.executeQuery("SELECT 1");  this.rs=testStatement.executeQuery("CALL testBug69746_proc");  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  ResultSet testResultSet2=testStatement.getResultSet();  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet2));  testStatement.getMoreResults();  ResultSet testResultSet3=testStatement.getResultSet();  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet2));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet3));  testStatement.getMoreResults(Statement.KEEP_CURRENT_RESULT);  ResultSet testResultSet4=testStatement.getResultSet();  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet2));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet3));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet4));  testStatement.getMoreResults(Statement.CLOSE_ALL_RESULTS);  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet2));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet3));  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet4));  testStatement.addBatch("INSERT INTO testBug69746_tbl (fld2) VALUES (1)");  testStatement.addBatch("INSERT INTO testBug69746_tbl (fld2) VALUES (2)");  testStatement.executeBatch();  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  this.rs=testStatement.executeQuery("SELECT 2");  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  testStatement.executeUpdate("INSERT INTO testBug69746_tbl (fld2) VALUES (3)");  assertFalse("ResultSet should not be closed.",isResultSetClosedForTestBug69746(testResultSet));  testResultSet.close();  testResultSet2.close();  testResultSet3.close();  testResultSet4.close();  testStatement.close();  testConnection.close();}  }
class C{  public PKCS8EncodedKeySpec(byte[] encodedKey){  super(encodedKey);}  }
class C{  private static int addToBuffer(Writer out,char[] buffer,int bufferIndex,int bufferLength,char[] toAdd) throws IOException {  if (bufferIndex >= bufferLength || (toAdd.length + bufferIndex >= bufferLength)) {    out.write(buffer,0,bufferIndex);    bufferIndex=0;  }  System.arraycopy(toAdd,0,buffer,bufferIndex,toAdd.length);  return bufferIndex + toAdd.length;}  }
class C{  public JenkinsHttpClient(URI uri,String username,String password){  this(uri);  if (isNotBlank(username)) {    CredentialsProvider provider=client.getCredentialsProvider();    AuthScope scope=new AuthScope(uri.getHost(),uri.getPort(),AuthScope.ANY_REALM);    UsernamePasswordCredentials credentials=new UsernamePasswordCredentials(username,password);    provider.setCredentials(scope,credentials);    localContext=new BasicHttpContext();    localContext.setAttribute("preemptive-auth",new BasicScheme());    client.addRequestInterceptor(new PreemptiveAuth(),0);  }}  }
class C{  public static final double copysign(final double x,final double y){  return copySign(x,y);}  }
class C{  public static int commonHalfPlane(int quad1,int quad2){  if (quad1 == quad2)   return quad1;  int diff=(quad1 - quad2 + 4) % 4;  if (diff == 2)   return -1;  int min=(quad1 < quad2) ? quad1 : quad2;  int max=(quad1 > quad2) ? quad1 : quad2;  if (min == 0 && max == 3)   return 3;  return min;}  }
class C{  public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {  DataOutputStream dataOutputStream=null;  ByteArrayOutputStream blockDataArray=null;  int totalSize=0;  int recordSize=0;  try {    recordSize=(measureCount * CarbonCommonConstants.DOUBLE_SIZE_IN_BYTE) + (dimensionCount * CarbonCommonConstants.INT_SIZE_IN_BYTE);    totalSize=records.length * recordSize;    blockDataArray=new ByteArrayOutputStream(totalSize);    dataOutputStream=new DataOutputStream(blockDataArray);    UnCompressedTempSortFileWriter.writeDataOutputStream(records,dataOutputStream,measureCount,dimensionCount,noDictionaryCount,complexDimensionCount);    stream.writeInt(records.length);    byte[] byteArray=SnappyByteCompression.INSTANCE.compress(blockDataArray.toByteArray());    stream.writeInt(byteArray.length);    stream.write(byteArray);  } catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException(e);  } finally {    CarbonUtil.closeStreams(blockDataArray);    CarbonUtil.closeStreams(dataOutputStream);  }}  }
class C{  public static boolean isSynthetic(SootClass clz){  for (  Tag tag : clz.getTags()) {    if (tag instanceof SyntheticTag) {      return true;    }  }  if ((clz.getModifiers() & 0x1000) != 0)   return true;  return false;}  }
class C{  public void testSendWithLoss(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setLoss(10);  test.doTestTransfer(100000);}  }
class C{  public boolean markSupported(){  return in.markSupported();}  }
class C{  public DerValue(byte[] buf) throws IOException {  data=init(true,new ByteArrayInputStream(buf));}  }
class C{  private String printFFormat(final double x){  return fFormatString(x);}  }
class C{  public PathImpl fsWalk(String userPath,Map<String,Object> attributes,String path){  return new ClasspathPath(_root,userPath,path);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public int binarySearch(Object key){  return this.binarySearchFromTo(key,0,size - 1);}  }
class C{  public void addService(Class<? extends IFloodlightService> clazz,IFloodlightService service){  serviceMap.put(clazz,service);}  }
class C{  public static boolean isSimpleValue(Object value){  return (value instanceof Number) || (value instanceof Locale) || (value instanceof TimeZone)|| (value instanceof String)|| (value instanceof Boolean)|| (value instanceof Date)|| ((value instanceof Castable) && !(value instanceof Objects) && !(value instanceof Collection));}  }
class C{  public static int convert1DtoY(final int index,final int arrayWidth){  return index / arrayWidth;}  }
class C{  public static DataSet readDiscrete(File file,char delimiter) throws IOException {  return readInDiscreteData(file,delimiter,Collections.singleton("MULT"));}  }
class C{  public static void fireClipboardChanged(){  for (Iterator i=listenerList.iterator(); i.hasNext(); ) {    ClipboardListener listener=(ClipboardListener)i.next();    listener.clipboardChanged();  }}  }
class C{  public final void appendDef(SemanticNode s){  definitions.addElement(s);}  }
class C{  private static int streamtoword(final byte data[],final int offp[]){  int i;  int word=0;  int off=offp[0];  for (i=0; i < 4; i++) {    word=word << 8 | data[off] & 0xff;    off=(off + 1) % data.length;  }  offp[0]=off;  return word;}  }
class C{  public static void logStartArticleProcessing(final Logger logger,final Task<Revision> article,long time,long transmittingTime){  logger.logMessage(Level.FINE,"Start Procssing Task\t" + article.toString());}  }
class C{  public Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap(){  List<ItemSet> itemSets=learn();  Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap=new Object2DoubleOpenHashMap<>(itemSets.size());  for (  ItemSet itemSet : itemSets) {    IntRBTreeSet itemSetCopy=new IntRBTreeSet(itemSet.items);    confidenceMap.put(itemSetCopy,itemSet.support / (double)setCount);  }  return confidenceMap;}  }
class C{  protected void assertSenderConfig(String config) throws Exception {  context=new ClassPathXmlApplicationContext(config);  consumer=(SpringConsumer)context.getBean("consumer");  assertTrue("Found a valid consumer",consumer != null);  consumer.start();  producer=(SpringProducer)context.getBean("producer");  assertTrue("Found a valid producer",producer != null);  consumer.flushMessages();  producer.start();  consumer.waitForMessagesToArrive(producer.getMessageCount());  List<Message> messages=consumer.flushMessages();  LOG.info("Consumer has received messages....");  for (  Message message : messages) {    LOG.info("Received: " + message);  }  assertEquals("Message count",producer.getMessageCount(),messages.size());}  }
class C{  void onShutdown(){}  }
class C{  public static String formatPaddLeft(String s,String col){  String res=padd + s;  return res.substring(res.length() - col.length());}  }
class C{  private ServiceRequestBuffer createDefaultRepairSRB(FbService service){  return createRepairSRB(service,0);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.382 -0500",hash_original_method="C488B13192B412621BF84C3D483CEE4F",hash_generated_method="C488B13192B412621BF84C3D483CEE4F") void fakeHoldBeforeDial(){  if (parent != null) {    parent.detach(this);  }  parent=owner.backgroundCall;  parent.attachFake(this,GsmCall.State.HOLDING);  onStartedHolding();}  }
class C{  public String loginAC2DM() throws IOException {  HttpEntity c2dmResponseEntity=executePost(URL_LOGIN,new String[][]{{"Email",this.getEmail()},{"Passwd",this.password},{"service","ac2dm"},{"add_account","1"},{"accountType",ACCOUNT_TYPE_HOSTED_OR_GOOGLE},{"has_permission","1"},{"source","android"},{"app","com.google.android.gsf"},{"device_country","us"},{"lang","en"},{"sdk_version","17"}},null);  Map<String,String> c2dmAuth=Utils.parseResponse(new String(Utils.readAll(c2dmResponseEntity.getContent())));  return c2dmAuth.get("Auth");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:01.266 -0400",hash_original_method="50AA210C134272535C2F18DAB643D1FD",hash_generated_method="CDD9E1E4FDCE8292D9BA85C44A9A69CE") public PrinterId(ComponentName serviceName,String localId){  mServiceName=serviceName;  mLocalId=localId;}  }
class C{  public void skipElement(double version,String uri,String localName){  scanner.skipElement(version,uri,localName);}  }
class C{  @Deprecated public void updateLinkedNotebook(LinkedNotebook linkedNotebook,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"updateLinkedNotebook",mAuthenticationToken,linkedNotebook);}  }
class C{  public BalancedBinaryNode<K,V> lastNode(){  BalancedBinaryNode<K,V> p=root;  if (p != null)   while (p.right != null)   p=p.right;  return p;}  }
class C{  public Name addAll(int posn,Name n) throws InvalidNameException {  if (n instanceof CompoundName) {    impl.addAll(posn,n.getAll());    return this;  } else {    throw new InvalidNameException("Not a compound name: " + n.toString());  }}  }
class C{  private void updateProgress(int progressVal){  progressBar.setValue(progressVal);}  }
class C{  private void saveFile(IFile file,IProgressMonitor monitor,String opLabel){  if (null != monitor)   monitor.setTaskName("Writing file " + file.getName());  try {    saveViewDocument(file,viewInfo);  } catch (  IOException err) {    logger.log(Level.SEVERE,"Unable to " + opLabel + " "+ file.getName(),err);    if (null != monitor)     monitor.setCanceled(true);  }  try {    file.refreshLocal(1,monitor);  } catch (  CoreException errCore) {    logger.log(Level.WARNING,"Failed resource refresh after " + opLabel + " to "+ file.getFullPath().toString(),errCore);  }  setDirtyState(false);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private boolean isVersionNewEnough(BytesRef indexedDocId,Object newUserVersion) throws IOException {  assert null != indexedDocId;  assert null != newUserVersion;  oldSolrVersion=-1;  newUserVersion=convertFieldValueUsingType(userVersionField,newUserVersion);  Object oldUserVersion=null;  SolrInputDocument oldDoc=null;  if (useFieldCache) {    oldDoc=RealTimeGetComponent.getInputDocumentFromTlog(core,indexedDocId);    if (oldDoc == RealTimeGetComponent.DELETED) {      return true;    }    if (oldDoc == null) {      RefCounted<SolrIndexSearcher> newestSearcher=core.getRealtimeSearcher();      try {        SolrIndexSearcher searcher=newestSearcher.get();        long lookup=searcher.lookupId(indexedDocId);        if (lookup < 0) {          return true;        }        ValueSource vs=solrVersionField.getType().getValueSource(solrVersionField,null);        Map context=ValueSource.newContext(searcher);        vs.createWeight(context,searcher);        FunctionValues fv=vs.getValues(context,searcher.getTopReaderContext().leaves().get((int)(lookup >> 32)));        oldSolrVersion=fv.longVal((int)lookup);        vs=userVersionField.getType().getValueSource(userVersionField,null);        context=ValueSource.newContext(searcher);        vs.createWeight(context,searcher);        fv=vs.getValues(context,searcher.getTopReaderContext().leaves().get((int)(lookup >> 32)));        oldUserVersion=fv.objectVal((int)lookup);      } catch (      IOException e) {        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error reading version from index",e);      } finally {        if (newestSearcher != null) {          newestSearcher.decref();        }      }    }  } else {    oldDoc=RealTimeGetComponent.getInputDocument(core,indexedDocId);    if (null == oldDoc) {      return true;    }  }  if (oldDoc != null) {    oldUserVersion=oldDoc.getFieldValue(versionFieldName);    oldUserVersion=convertFieldValueUsingType(userVersionField,oldUserVersion);    Object o=oldDoc.getFieldValue(solrVersionField.getName());    if (o == null) {      throw new SolrException(SERVER_ERROR,"No _version_ for document " + oldDoc);    }    oldSolrVersion=o instanceof Number ? ((Number)o).longValue() : Long.parseLong(o.toString());  }  if (null == oldUserVersion) {    throw new SolrException(SERVER_ERROR,"Doc exists in index, but has null versionField: " + versionFieldName);  }  if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {    throw new SolrException(BAD_REQUEST,"old version and new version are not comparable: " + oldUserVersion.getClass() + " vs "+ newUserVersion.getClass());  }  try {    if (0 < ((Comparable)newUserVersion).compareTo((Comparable)oldUserVersion)) {      return true;    }    if (ignoreOldUpdates) {      if (log.isDebugEnabled()) {        log.debug("Dropping update since user version is not high enough: " + newUserVersion + "; old user version="+ oldUserVersion);      }      return false;    } else {      throw new SolrException(CONFLICT,"user version is not high enough: " + newUserVersion);    }  } catch (  ClassCastException e) {    throw new SolrException(BAD_REQUEST,"old version and new version are not comparable: " + oldUserVersion.getClass() + " vs "+ newUserVersion.getClass()+ ": "+ e.getMessage(),e);  }}  }
class C{  public final void testGetServerName(){  LDAPCertStoreParameters cp=new LDAPCertStoreParameters("serverName");  assertNotNull(cp.getServerName());}  }
class C{  public void terminate() throws PayloadException, NetworkException, ContactManagerException {  if (sLogger.isActivated()) {    sLogger.info("Terminate the IMS connection manager");  }  if (mBatteryLevelListener != null) {    mCtx.unregisterReceiver(mBatteryLevelListener);    mBatteryLevelListener=null;  }  if (mNetworkStateListener != null) {    mCtx.unregisterReceiver(mNetworkStateListener);    mNetworkStateListener=null;  }  stopImsConnection(TerminationReason.TERMINATION_BY_SYSTEM);  mCurrentNetworkInterface.unregister();  if (sLogger.isActivated()) {    sLogger.info("IMS connection manager has been terminated");  }}  }
class C{  public boolean hasRelationship(Primitive type,Primitive target){  return hasRelationship(this.network.createVertex(type),this.network.createVertex(target));}  }
class C{  static public void assertNotNull(Object object){  assertNotNull(null,object);}  }
class C{  public void ensureCapacity(int minCapacity){  int oldCapacity=capacity;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity)     newCapacity=minCapacity;    BitVector vector=toBitVector();    vector.setSize(newCapacity * bitsPerElement);    this.bits=vector.elements();    this.capacity=newCapacity;  }}  }
class C{  public Element current(){  if (elementStack == null) {    return first();  }  if (!elementStack.empty()) {    StackItem item=elementStack.peek();    Element elem=item.getElement();    int index=item.getIndex();    if (index == -1) {      return elem;    }    return elem.getElement(index);  }  return null;}  }
class C{  public static String addZeros(int i,int size){  String rtn=Caster.toString(i);  if (rtn.length() < size)   return repeatString("0",size - rtn.length()) + rtn;  return rtn;}  }
class C{  public ChannelSecurityToken clone(){  ChannelSecurityToken result=new ChannelSecurityToken();  result.ChannelId=ChannelId;  result.TokenId=TokenId;  result.CreatedAt=CreatedAt;  result.RevisedLifetime=RevisedLifetime;  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:00.354 -0500",hash_original_method="8A23448EE3E63F2FDD1EDADC770A872E",hash_generated_method="4BBE606056C3BCB2A6E6D86FC214144D") private Security(){}  }
class C{  public SimpleMqttMessageWrapper(final SimpleMqttMessage message){  this.message=message;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ObjectIdentifier(int[] oid){  validateOid(oid);  this.oid=oid;}  }
class C{  public static void verifyBytes(long offset,byte expected,byte actual){  assert expected == actual : "File offset " + offset + " contains "+ (actual & 0xff)+ ", expected "+ (expected & 0xff);}  }
class C{  public ProtectedProperties(Properties props){  Enumeration<?> propEnum=props.propertyNames();  while (propEnum.hasMoreElements()) {    String propName=(String)propEnum.nextElement();    String propValue=props.getProperty(propName);    super.setProperty(propName,propValue);  }  closed=true;}  }
class C{  public ArcCalc(double aa,boolean putArcUp){  arcAngle=aa;  arcUp=putArcUp;  if (aa < 0) {    arcAngle*=-1.0;    arcUp=!arcUp;  }  if (arcAngle > Math.PI) {    arcAngle=Math.PI;  }}  }
class C{  public SaaSApplicationException(String message){  super(message);  init();}  }
class C{  protected void linearSolver(int b,float[] x,float[] x0,float a,float c){  c=1f / c;  for (int k=0; k < numIterations; k++) {    for (int i=1, idx=1 + totalWidth, j=1; j <= height; ) {      x[idx]=(a * (x[idx - 1] + x[idx + 1] + x[idx - totalWidth]+ x[idx + totalWidth]) + x0[idx]) * c;      if (i < width) {        i++;        idx++;      } else {        i=1;        j++;        idx=j * totalWidth + 1;      }    }    setBoundary(b,x);  }}  }
class C{  public Status(int severity,String pluginId,int code,String message,Throwable exception){  setSeverity(severity);  setPlugin(pluginId);  setCode(code);  setMessage(message);  setException(exception);}  }
class C{  public int loadActivities(){  resetDisplay(null);  while (selTableModel.getRowCount() > 0)   selTableModel.removeRow(0);  long start=System.currentTimeMillis();  ArrayList<MWFActivity> list=new ArrayList<MWFActivity>();  String sql="SELECT * FROM AD_WF_Activity a " + "WHERE a.Processed='N' AND a.WFState='OS' AND (" + " a.AD_User_ID=?"+ " OR EXISTS (SELECT * FROM AD_WF_Responsible r WHERE a.AD_WF_Responsible_ID=r.AD_WF_Responsible_ID"+ " AND COALESCE(r.AD_User_ID,0)=0 AND COALESCE(r.AD_Role_ID,0)=0 AND (a.AD_User_ID=? OR a.AD_User_ID IS NULL))"+ " OR EXISTS (SELECT * FROM AD_WF_Responsible r WHERE a.AD_WF_Responsible_ID=r.AD_WF_Responsible_ID"+ " AND r.AD_User_ID=?)"+ " OR EXISTS (SELECT * FROM AD_WF_Responsible r INNER JOIN AD_User_Roles ur ON (r.AD_Role_ID=ur.AD_Role_ID)"+ " WHERE a.AD_WF_Responsible_ID=r.AD_WF_Responsible_ID AND ur.AD_User_ID=?)"+ ") ORDER BY a.Priority DESC, Created";  int AD_User_ID=Env.getAD_User_ID(Env.getCtx());  MRole role=MRole.get(Env.getCtx(),Env.getAD_Role_ID(Env.getCtx()));  sql=role.addAccessSQL(sql,"a",true,false);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_User_ID);    pstmt.setInt(2,AD_User_ID);    pstmt.setInt(3,AD_User_ID);    pstmt.setInt(4,AD_User_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      MWFActivity activity=new MWFActivity(Env.getCtx(),rs,null);      Object[] rowData=new Object[4];      rowData[0]=new IDColumn(activity.get_ID());      rowData[1]=activity.getPriority();      rowData[2]=activity.getNodeName();      rowData[3]=activity.getSummary();      selTableModel.addRow(rowData);      if (list.size() > MAX_ACTIVITIES_IN_LIST) {        log.warning("More than " + MAX_ACTIVITIES_IN_LIST + " Activities - ignored");        break;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  selTable.autoSize(false);  log.fine("#" + selTable.getModel().getRowCount() + "("+ (System.currentTimeMillis() - start)+ "ms)");  return selTable.getModel().getRowCount();}  }
class C{  private long triggerTime(long delay,TimeUnit unit){  return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));}  }
class C{  public List<String> compactExtension(String value){  return compactExtension(value,0);}  }
class C{  private boolean isUniqueName(ServiceForm service,String name){  String parentId=service.owningCategoryId;  return isUniqueServiceName(service.id,name,parentId) && isUniqueCategoryName(null,name,parentId);}  }
class C{  public static String handleFailedJavadocFetch(CoreException e){  IStatus status=e.getStatus();  if (JavaCore.PLUGIN_ID.equals(status.getPlugin())) {    Throwable cause=e.getCause();    int code=status.getCode();    if (code == IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC_TIMEOUT || (code == IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC && (cause instanceof FileNotFoundException || cause instanceof SocketException || cause instanceof UnknownHostException|| cause instanceof ProtocolException)))     return CorextMessages.JavaDocLocations_error_gettingAttachedJavadoc;  }  LOG.error(e.getMessage(),e);  return CorextMessages.JavaDocLocations_error_gettingJavadoc;}  }
class C{  public Builder logFormatter(LogFlattener logFlattener){  this.logFlattener=logFlattener;  return this;}  }
class C{  public static int nextPow2(int x){  if (x < 1)   throw new IllegalArgumentException("x must be greater or equal 1");  if ((x & (x - 1)) == 0) {    return x;  }  x|=(x >>> 1);  x|=(x >>> 2);  x|=(x >>> 4);  x|=(x >>> 8);  x|=(x >>> 16);  x|=(x >>> 32);  return x + 1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MLPolicyEvaluator(Config config,String policyName,AbstractPolicyDefinition policyDef,String[] sourceStreams,boolean needValidation){  this.config=config;  this.policyName=policyName;  this.sourceStreams=sourceStreams;  LOG.info("Initializing policy named: " + policyName);  this.context=new HashMap<>();  this.context.put(AlertConstants.SOURCE_STREAMS,StringUtils.join(sourceStreams,","));  this.init(policyDef);}  }
class C{  public Rational(BigInteger numerator,BigInteger denominator){  BigInteger gcd=gcd(numerator,denominator);  r[0]=(denominator.compareTo(BigInteger.ZERO) > 0 ? BigInteger.ONE : new BigInteger("-1")).multiply(numerator.divide(gcd));  r[1]=denominator.divide(gcd);}  }
class C{  public synchronized void clear(){  Entry tab[]=table;  for (int index=tab.length; --index >= 0; ) {    tab[index]=null;  }  count=0;}  }
class C{  public void clearParseIssues(){  parseIssues.clear();}  }
class C{  public AllUsesEnum(IR ir,Instruction instr){  this.instr=instr;  instructionOperands=instr.getUses();  if (instr.operator().getNumberOfImplicitUses() > 0) {    implicitUses=GenericPhysicalDefUse.enumerate(instr.operator().implicitUses,ir);  } else {    implicitUses=null;  }  if (ir.inSSAForm() && (instr.operator() != PHI)) {    heapOperands=ir.HIRInfo.dictionary.getHeapUses(instr);  } else {    heapOperands=null;  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    Loger.debug(String.format("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key)));  }}  }
class C{  private void checkUri(final String ourUriString,final String tokenUriString) throws SignatureException {  if (!tokenUriString.equalsIgnoreCase(ourUriString)) {    throw new SignatureException("Wrong audience URI");  }}  }
class C{  public ResourceConverter(ObjectMapper mapper,Class<?>... classes){  this.configuration=new ConverterConfiguration(classes);  if (mapper != null) {    objectMapper=mapper;  } else {    objectMapper=new ObjectMapper();  }  objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  resourceCache=new ResourceCache();}  }
class C{  public void add(String expr,int color){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,color);}  }
class C{  @Override public final void moveTo(final float x,final float y){  elements.add(new MoveTo(x,y));  currentPos[0]=x;  currentPos[1]=y;}  }
class C{  public static <S extends HasDragMoveHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragMoveEvent event=new DragMoveEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.ENTITY_SOURCE__MODEL:    setModel((Entity)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public TextureData newTextureData(final GLProfile glp,final InputStream stream,final int internalFormat,final int pixelFormat,final boolean mipmap,final String fileSuffix) throws IOException {  return null;}  }
class C{  public int hashCode(){  return name.hashCode() ^ (value == null ? 0 : value.hashCode());}  }
class C{  public void createSnapshot() throws BackupException {  logger.debug("Creating snapshot: " + this.snapshotName);  processHelper.exec("Creating file system snapshot",lvcreateCmd);}  }
class C{  public void readXML(File file) throws IOException, DocumentException {  project.setCurrentWorkingDirectory(file.getParentFile());  dataSource=file.getAbsolutePath();  InputStream in=progessMonitoredInputStream(file,"Loading analysis");  try {    readXML(in,file);  } catch (  IOException e) {    throw newIOException(file,e);  }catch (  DocumentException e) {    throw new DocumentException("Failing reading " + file,e);  }}  }
class C{  public static boolean isUnprintable(int c){  return !(c >= 0x20 && c <= 0x7E);}  }
class C{  public boolean isFileTransferStoreForwardSupported(){  return mFileTransferStoreForward;}  }
class C{  public static void main(String[] args){  runCLIApplication(CacheDoubleDistanceRangeQueries.class,args);}  }
class C{  public static String escapeXml(String str){  if (str == null) {    return null;  }  return Entities.XML.escape(str);}  }
class C{  public fieldset addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static void cursorLongToContentValues(Cursor cursor,String field,ContentValues values,String key){  int colIndex=cursor.getColumnIndex(field);  if (!cursor.isNull(colIndex)) {    Long value=Long.valueOf(cursor.getLong(colIndex));    values.put(key,value);  } else {    values.put(key,(Long)null);  }}  }
class C{  private static void version(){  System.out.println("smali " + VERSION + " (http://smali.googlecode.com)");  System.out.println("Copyright (C) 2010 Ben Gruver (JesusFreke@JesusFreke.com)");  System.out.println("BSD license (http://www.opensource.org/licenses/bsd-license.php)");  System.exit(0);}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateStartState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      processStartedStage(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  @Override public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  if (isKmlDefault) {    w.setDefaultNamespace(DataConstants.KML_NAMESPACE);  }  super.generateAtom(w,extProfile);}  }
class C{  public void updateValues(int type,float w,float h){  this.movementType=type;  this.offsetWidth=w;  this.offsetHeight=h;  init();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public FBDriverNotCapableException(){  this("Not yet implemented.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.007 -0500",hash_original_method="39D4FA4E53CEE799776950AA9CB6A596",hash_generated_method="A41F7A84816F870251D88012C856C818") final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {  boolean retValue=false;synchronized (aytMonitor) {synchronized (this) {      aytFlag=false;      _output_.write(_COMMAND_AYT);      _output_.flush();    }    try {      aytMonitor.wait(timeout);      if (aytFlag == false) {        retValue=false;        aytFlag=true;      } else {        retValue=true;      }    } catch (    IllegalMonitorStateException e) {      System.err.println("Exception processing AYT:" + e.getMessage());    }  }  return (retValue);}  }
class C{  public T frameborder(String value){  return attr("frameborder",value);}  }
class C{  public void addAll(Properties properties){  this.properties.putAll(properties);}  }
class C{  public boolean hasRemoves(){  return !removedClusters.isEmpty() || !removedHosts.isEmpty() || !removedInitiators.isEmpty();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.419 -0400",hash_original_method="579088CE1A9EFB8794C68173F5B284BE",hash_generated_method="1198FBA4330043A6BECAF73039B77310") public static long readSwappedLong(InputStream input) throws IOException {  byte[] bytes=new byte[8];  for (int i=0; i < 8; i++) {    bytes[i]=(byte)read(input);  }  return readSwappedLong(bytes,0);}  }
class C{  public void unsetMatchColumn(int columnIdx) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public synchronized void engineSetEntry(String alias,KeyStore.Entry entry,KeyStore.ProtectionParameter protParam) throws KeyStoreException {  token.ensureValid();  checkWrite();  if (protParam != null && protParam instanceof KeyStore.PasswordProtection && ((KeyStore.PasswordProtection)protParam).getPassword() != null && !token.config.getKeyStoreCompatibilityMode()) {    throw new KeyStoreException(new UnsupportedOperationException("ProtectionParameter must be null"));  }  if (token.isWriteProtected()) {    throw new KeyStoreException("token write-protected");  }  if (entry instanceof KeyStore.TrustedCertificateEntry) {    if (useSecmodTrust == false) {      throw new KeyStoreException(new UnsupportedOperationException("trusted certificates may only be set by " + "token initialization application"));    }    Module module=token.provider.nssModule;    if ((module.type != ModuleType.KEYSTORE) && (module.type != ModuleType.FIPS)) {      throw new KeyStoreException("Trusted certificates can only be " + "added to the NSS KeyStore module");    }    Certificate cert=((TrustedCertificateEntry)entry).getTrustedCertificate();    if (cert instanceof X509Certificate == false) {      throw new KeyStoreException("Certificate must be an X509Certificate");    }    X509Certificate xcert=(X509Certificate)cert;    AliasInfo info=aliasMap.get(alias);    if (info != null) {      deleteEntry(alias);    }    try {      storeCert(alias,xcert);      module.setTrust(token,xcert);      mapLabels();    } catch (    PKCS11Exception|CertificateException e) {      throw new KeyStoreException(e);    }  } else {    if (entry instanceof KeyStore.PrivateKeyEntry) {      PrivateKey key=((KeyStore.PrivateKeyEntry)entry).getPrivateKey();      if (!(key instanceof P11Key) && !(key instanceof RSAPrivateKey) && !(key instanceof DSAPrivateKey)&& !(key instanceof DHPrivateKey)&& !(key instanceof ECPrivateKey)) {        throw new KeyStoreException("unsupported key type: " + key.getClass().getName());      }      Certificate[] chain=((KeyStore.PrivateKeyEntry)entry).getCertificateChain();      if (!(chain instanceof X509Certificate[])) {        throw new KeyStoreException(new UnsupportedOperationException("unsupported certificate array type: " + chain.getClass().getName()));      }      try {        boolean updatedAlias=false;        Set<String> aliases=aliasMap.keySet();        for (        String oldAlias : aliases) {          AliasInfo aliasInfo=aliasMap.get(oldAlias);          if (aliasInfo.type == ATTR_CLASS_PKEY && aliasInfo.cert.getPublicKey().equals(chain[0].getPublicKey())) {            updatePkey(alias,aliasInfo.id,(X509Certificate[])chain,!aliasInfo.cert.equals(chain[0]));            updatedAlias=true;            break;          }        }        if (!updatedAlias) {          engineDeleteEntry(alias);          storePkey(alias,(KeyStore.PrivateKeyEntry)entry);        }      } catch (      PKCS11Exception|CertificateException pe) {        throw new KeyStoreException(pe);      }    } else     if (entry instanceof KeyStore.SecretKeyEntry) {      KeyStore.SecretKeyEntry ske=(KeyStore.SecretKeyEntry)entry;      SecretKey skey=ske.getSecretKey();      try {        AliasInfo aliasInfo=aliasMap.get(alias);        if (aliasInfo != null) {          engineDeleteEntry(alias);        }        storeSkey(alias,ske);      } catch (      PKCS11Exception pe) {        throw new KeyStoreException(pe);      }    } else {      throw new KeyStoreException(new UnsupportedOperationException("unsupported entry type: " + entry.getClass().getName()));    }    try {      mapLabels();      if (debug != null) {        dumpTokenMap();      }    } catch (    PKCS11Exception|CertificateException pe) {      throw new KeyStoreException(pe);    }  }  if (debug != null) {    debug.println("engineSetEntry added new entry for [" + alias + "] to token");  }}  }
class C{  public html removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private void saveCurrentState(){  if (currentPage != null && pageComposite.getChildren().length > 0) {    final TeamExplorerPageConfig page=configuration.getPage(currentNavItem.getTargetPageID());    if (page != null) {      final Object pageState=currentPage.saveState();      if (pageState != null) {        stateMap.put(page.getID(),pageState);      }      final TeamExplorerSectionConfig[] sections=configuration.getPageSections(page.getID());      if (sections != null) {        for (        final TeamExplorerSectionConfig section : sections) {          if (teamExplorerSectionMap.get(section.getID()) != null) {            final ITeamExplorerSection sectionInstance=teamExplorerSectionMap.get(section.getID());            sectionExpandStateMap.put(section.getID(),sectionMap.get(section.getID()).isExpanded());            final Object sectionState=sectionInstance.saveState();            if (sectionState != null) {              stateMap.put(section.getID(),sectionState);            }          }        }      }    }    teamExplorerSectionMap.clear();    currentPage=null;  }}  }
class C{  public static Collection flatten(int[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (categoriesCopy == null) {    throw new NullPointerException();  }  if (discreteVariableType == null) {    throw new NullPointerException();  }  if (nodeType == null) {    throw new NullPointerException();  }}  }
class C{  public static boolean delete(@Nullable File file){  if (file == null)   return false;  boolean res=true;  if (file.isDirectory()) {    File[] files=file.listFiles();    if (files != null && files.length > 0)     for (    File file1 : files)     if (file1.isDirectory())     res&=delete(file1); else     if (file1.getName().endsWith("jar"))     try {      new JarFile(file1,false).close();      res&=file1.delete();    } catch (    IOException ignore) {    } else     res&=file1.delete();    res&=file.delete();  } else   res=file.delete();  return res;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (derivedFeatureID) {case TypesPackage.TSTRUCT_GETTER__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public ClassRef(String className){  mClassName=className;  mFieldRefs=new ArrayList<FieldRef>();  mMethodRefs=new ArrayList<MethodRef>();}  }
class C{  public boolean start(float velocityX,float velocityY){  if (mRunning) {    return false;  }  mLastRunTime=NEVER;  mVelocityX=velocityX;  mVelocityY=velocityY;  mStop=false;  mRunning=true;  mHeader.post(this);  return true;}  }
class C{  default Task<?> postActivation(AbstractActor<?> actor){  return Task.done();}  }
class C{  public boolean remove(T element){  Node<T> prev=null;  Node<T> node=head;  while (node != null && node.value != element) {    prev=node;    node=node.next;  }  if (node == null) {    return false;  }  if (node.next != null) {    node.next.delay+=node.delay;  }  if (prev == null) {    head=node.next;  } else {    prev.next=node.next;  }  size--;  return true;}  }
class C{  public static <T>T showDialog(WindowBasedTextGUI textGUI,String title,String description,T... items){  return showDialog(textGUI,title,description,null,items);}  }
class C{  public static double symmetricalUncertainty(double matrix[][]){  double sumForColumn, sumForRow, total=0, columnEntropy=0, rowEntropy=0, entropyConditionedOnRows=0, infoGain=0;  for (int i=0; i < matrix[0].length; i++) {    sumForColumn=0;    for (int j=0; j < matrix.length; j++) {      sumForColumn+=matrix[j][i];    }    columnEntropy+=lnFunc(sumForColumn);    total+=sumForColumn;  }  columnEntropy-=lnFunc(total);  for (int i=0; i < matrix.length; i++) {    sumForRow=0;    for (int j=0; j < matrix[0].length; j++) {      sumForRow+=matrix[i][j];      entropyConditionedOnRows+=lnFunc(matrix[i][j]);    }    rowEntropy+=lnFunc(sumForRow);  }  entropyConditionedOnRows-=rowEntropy;  rowEntropy-=lnFunc(total);  infoGain=columnEntropy - entropyConditionedOnRows;  if (Utils.eq(columnEntropy,0) || Utils.eq(rowEntropy,0))   return 0;  return 2.0 * (infoGain / (columnEntropy + rowEntropy));}  }
class C{  public FileClassLoader(final String filePrefix){  this.filePrefix=filePrefix;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public static final String extractIplIdentitySlaveFrimwareRev(LocoNetMessage m){  StringBuilder s=new StringBuilder();  s.append(Integer.toString((m.getElement(10) & 0x78) >> 3) + ((m.getElement(9) & 0x1) << 5));  s.append(".");  s.append(Integer.toString((m.getElement(10) & 0x07)));  return s.toString();}  }
class C{  public SymbolicRegression(UnivariateFunction function,double lowerBound,double upperBound,int steps){  super(1,1);  this.function=function;  this.lowerBound=lowerBound;  this.upperBound=upperBound;  this.steps=steps;  symbol="x";  rules=new Rules();  rules.add(new Add());  rules.add(new Multiply());  rules.add(new Subtract());  rules.add(new Divide());  rules.add(new Sin());  rules.add(new Cos());  rules.add(new Exp());  rules.add(new Log());  rules.add(new Get(Number.class,symbol));  rules.setReturnType(Number.class);  rules.setMaxVariationDepth(10);  x=new double[steps];  y=new double[steps];  for (int i=0; i < steps; i++) {    x[i]=lowerBound + (i / (steps - 1.0)) * (upperBound - lowerBound);    y[i]=function.value(x[i]);  }}  }
class C{  private void switchToSpellCastingState(KeyEvent e){  screen.switchToSpellCasting(e);}  }
class C{  public void storeDevice(Device d){  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  writeUpdatedDeviceToStorage(d);  lastWriteTimes.put(d.getDeviceKey(),now);}  }
class C{  public Type4(Type1 model1,Parameters parameters){}  }
class C{  private static void updateStopButton(Context context,RemoteViews remoteViews,boolean isRecording){  remoteViews.setImageViewResource(R.id.track_widget_stop_button,isRecording ? R.drawable.button_stop : R.drawable.ic_button_stop_disabled);  remoteViews.setBoolean(R.id.track_widget_stop_button,"setEnabled",isRecording);  if (isRecording) {    Intent intent=new Intent(context,ControlRecordingService.class).setAction(context.getString(R.string.track_action_end));    PendingIntent pendingIntent=PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);    remoteViews.setOnClickPendingIntent(R.id.track_widget_stop_button,pendingIntent);  }}  }
class C{  public PowerContainerSelectionPolicyCor(final PowerContainerSelectionPolicy fallbackPolicy){  super();  setFallbackPolicy(fallbackPolicy);}  }
class C{  private void scan(Method method,Annotation label,Annotation[] list) throws Exception {  if (label instanceof Attribute) {    process(method,label,list);  }  if (label instanceof ElementUnion) {    process(method,label,list);  }  if (label instanceof ElementListUnion) {    process(method,label,list);  }  if (label instanceof ElementMapUnion) {    process(method,label,list);  }  if (label instanceof ElementList) {    process(method,label,list);  }  if (label instanceof ElementArray) {    process(method,label,list);  }  if (label instanceof ElementMap) {    process(method,label,list);  }  if (label instanceof Element) {    process(method,label,list);  }  if (label instanceof Version) {    process(method,label,list);  }  if (label instanceof Text) {    process(method,label,list);  }  if (label instanceof Transient) {    remove(method,label,list);  }}  }
class C{  public static byte[] intToBytes(final int x){  final ByteBuffer buffer=ByteBuffer.allocate(4);  buffer.putInt(x);  return buffer.array();}  }
class C{  public void strategyComplete(String strategyClassName,Tradestrategy tradestrategy){  try {    if (m_brokerModel.isConnected()) {      tradestrategy=m_tradePersistentModel.findTradestrategyById(tradestrategy.getIdTradeStrategy());      m_tradingdays.getTradestrategy(tradestrategy.getIdTradeStrategy()).setStatus(tradestrategy.getStatus());      contractPanel.doRefresh(tradestrategy);    }    tradingdayPanel.removeStrategyWorker(strategyClassName + tradestrategy.getIdTradeStrategy());  } catch (  Exception ex) {    this.setErrorMessage("Error strategyComplete : ",ex.getMessage(),ex);  }}  }
class C{  private int convertInstancewoDocNorm(Instance instance,ArrayList<Instance> v){  TreeMap<Integer,Double> contained=new TreeMap<Integer,Double>();  int firstCopy=0;  for (int i=0; i < getInputFormat().numAttributes(); i++) {    if (!m_SelectedRange.isInRange(i)) {      if (getInputFormat().attribute(i).type() != Attribute.STRING && getInputFormat().attribute(i).type() != Attribute.RELATIONAL) {        if (instance.value(i) != 0.0) {          contained.put(new Integer(firstCopy),new Double(instance.value(i)));        }      } else {        if (instance.isMissing(i)) {          contained.put(new Integer(firstCopy),new Double(Utils.missingValue()));        } else         if (getInputFormat().attribute(i).type() == Attribute.STRING) {          if (outputFormatPeek().attribute(firstCopy).numValues() == 0) {            outputFormatPeek().attribute(firstCopy).addStringValue("Hack to defeat SparseInstance bug");          }          int newIndex=outputFormatPeek().attribute(firstCopy).addStringValue(instance.stringValue(i));          contained.put(new Integer(firstCopy),new Double(newIndex));        } else {          if (outputFormatPeek().attribute(firstCopy).numValues() == 0) {            Instances relationalHeader=outputFormatPeek().attribute(firstCopy).relation();            outputFormatPeek().attribute(firstCopy).addRelation(relationalHeader);          }          int newIndex=outputFormatPeek().attribute(firstCopy).addRelation(instance.relationalValue(i));          contained.put(new Integer(firstCopy),new Double(newIndex));        }      }      firstCopy++;    }  }  for (int j=0; j < instance.numAttributes(); j++) {    if (m_SelectedRange.isInRange(j) && (instance.isMissing(j) == false)) {      m_Tokenizer.tokenize(instance.stringValue(j));      while (m_Tokenizer.hasMoreElements()) {        String word=m_Tokenizer.nextElement();        if (this.m_lowerCaseTokens == true) {          word=word.toLowerCase();        }        word=m_Stemmer.stem(word);        Integer index=m_Dictionary.get(word);        if (index != null) {          if (m_OutputCounts) {            Double count=contained.get(index);            if (count != null) {              contained.put(index,new Double(count.doubleValue() + 1.0));            } else {              contained.put(index,new Double(1));            }          } else {            contained.put(index,new Double(1));          }        }      }    }  }  if (m_TFTransform == true) {    Iterator<Integer> it=contained.keySet().iterator();    for (; it.hasNext(); ) {      Integer index=it.next();      if (index.intValue() >= firstCopy) {        double val=contained.get(index).doubleValue();        val=Math.log(val + 1);        contained.put(index,new Double(val));      }    }  }  if (m_IDFTransform == true) {    Iterator<Integer> it=contained.keySet().iterator();    for (; it.hasNext(); ) {      Integer index=it.next();      if (index.intValue() >= firstCopy) {        double val=contained.get(index).doubleValue();        val=val * Math.log(m_NumInstances / (double)m_DocsCounts[index.intValue()]);        contained.put(index,new Double(val));      }    }  }  double[] values=new double[contained.size()];  int[] indices=new int[contained.size()];  Iterator<Integer> it=contained.keySet().iterator();  for (int i=0; it.hasNext(); i++) {    Integer index=it.next();    Double value=contained.get(index);    values[i]=value.doubleValue();    indices[i]=index.intValue();  }  Instance inst=new SparseInstance(instance.weight(),values,indices,outputFormatPeek().numAttributes());  inst.setDataset(outputFormatPeek());  v.add(inst);  return firstCopy;}  }
class C{  public Instrumenter(){  super();  frequency=100;  customCollectors=new ArrayList<Collector>();}  }
class C{  public AllStatsTableMulti(DatasetGenerator datasetGenerator,Locker locker){  ArgumentChecking.notNull(datasetGenerator,"datasetGenerator");  initComponents();  table.setDefaultRenderer(JLabel.class,new Renderer());  table.setColumnSelectionAllowed(false);  table.setRowSelectionAllowed(false);  table.setGridColor(GRID_COLOR);  JTableHeader header=table.getTableHeader();  header.setReorderingAllowed(false);  GUIUtilities.setTableHeader(header);  model=new Model(datasetGenerator);  table.setModel(model);  this.locker=locker;}  }
class C{  public static boolean isReadExternalStoragePermissionsRequired(@NonNull Context context,@NonNull Uri uri){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED && isUriRequiresPermissions(context,uri);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetlastchild.class,args);}  }
class C{  public static void deleteGlobalCodeNodeComment(final SQLProvider provider,final INaviCodeNode codeNode,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE02465: provider argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02466: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE02467: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE02468: userId argument can not be null");  final String function=" { ? = call delete_global_code_node_comment(?, ?, ?, ?, ?) } ";  try {    final CallableStatement deleteCommentStatement=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentStatement.registerOutParameter(1,Types.INTEGER);      deleteCommentStatement.setInt(2,codeNode.getParentFunction().getModule().getConfiguration().getId());      deleteCommentStatement.setInt(3,codeNode.getId());      deleteCommentStatement.setObject(4,codeNode.getAddress().toBigInteger(),Types.BIGINT);      deleteCommentStatement.setInt(5,commentId);      deleteCommentStatement.setInt(6,userId);      deleteCommentStatement.execute();      deleteCommentStatement.getInt(1);      if (deleteCommentStatement.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned by the database was null");      }    } catch (    final MaybeNullException exception) {      throw new CouldntDeleteException(exception);    } finally {      deleteCommentStatement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  void seek(int i) throws DecodeException {  if (offset + i > bufsize || offset + i < 0) {    throw new DecodeException("array index out of bounds");  }  offset+=i;}  }
class C{  public RefQueueWorker(ReferenceQueue<?> queue,RefQueueHandler handler){  if (queue == null) {    throw new IllegalArgumentException("Queue must not be null.");  }  if (handler == null) {    throw new IllegalArgumentException("Handler must not be null.");  }  refQueue=queue;  refHandler=handler;}  }
class C{  protected boolean stepsEqual(WalkingIterator iter1,WalkingIterator iter2,int numSteps){  AxesWalker aw1=iter1.getFirstWalker();  AxesWalker aw2=iter2.getFirstWalker();  for (int i=0; (i < numSteps); i++) {    if ((null == aw1) || (null == aw2))     return false;    if (!aw1.deepEquals(aw2))     return false;    aw1=aw1.getNextWalker();    aw2=aw2.getNextWalker();  }  assertion((null != aw1) || (null != aw2),"Total match is incorrect!");  return true;}  }
class C{  protected void initActionBar(boolean showHomeButton,String title){  if (getActivity() != null && getActivity() instanceof BaseActivity) {    ActionBar supportActionBar=((BaseActivity)getActivity()).getSupportActionBar();    supportActionBar.setHomeButtonEnabled(showHomeButton);    supportActionBar.setTitle(title);  }}  }
class C{  public int parameterCount(){  return ptypes.length;}  }
class C{  private static String[] makeLines(int n){  String[] ret=new String[n];  for (int i=0; i < n; ++i) {    ret[i]="word" + i;  }  return ret;}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public void privateMethod(){}  }
class C{  protected Scheduler _refreshJobSchedule(Scheduler scheduler){  _disposeScheduler(scheduler);  String schedulerName=null;  Properties props=new Properties();  props.put(QUARTZ_THREADPOOL_COUNT,_configuration.getValue(Property.QUARTZ_THREADPOOL_COUNT.getName(),Property.QUARTZ_THREADPOOL_COUNT.getDefaultValue()));  props.put(QUARTZ_THREAD_PRIORITY,QUARTZ_THREAD_PRIORITY_VALUE);  props.put(StdSchedulerFactory.PROP_SCHED_SCHEDULER_THREADS_INHERIT_CONTEXT_CLASS_LOADER_OF_INITIALIZING_THREAD,true);switch (Thread.currentThread().getName()) {case "schedule-alerts":default :    schedulerName="AlertScheduler";}props.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME,schedulerName);SchedulerFactory schedulerFactory;Scheduler result=null;try {  schedulerFactory=new StdSchedulerFactory(props);  result=schedulerFactory.getScheduler();} catch (Exception e) {  _logger.error("Exception in setting up scheduler: {}",e);  return result;}for (CronJob job : getEnabledJobs()) {  _logger.debug("Adding job to scheduler: {}",job);  try {    String quartzCronEntry="0 " + job.getCronEntry().substring(0,job.getCronEntry().length() - 1) + "?";    JobDetail jobDetail=JobBuilder.newJob(RunnableJob.class).build();    CronTrigger cronTrigger=TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedule(quartzCronEntry)).build();    jobDetail.getJobDataMap().put(RunnableJob.CRON_JOB,job);    jobDetail.getJobDataMap().put(RunnableJob.LOCK_TYPE,lockType);    jobDetail.getJobDataMap().put("AlertService",_alertService);    jobDetail.getJobDataMap().put("AuditService",_auditService);    result.scheduleJob(jobDetail,cronTrigger);  } catch (  Exception ex) {    String msg="Failed to schedule job {0} : {1}";    JPAEntity entity=JPAEntity.class.cast(job);    _auditService.createAudit(msg,entity,entity,ex.getMessage());    _logger.error("Failed to schedule job {} : {}",job,ex.getMessage());  }}try {  result.start();} catch (SchedulerException e) {  _logger.error("Exception in starting scheduler: {}",e);}_logger.info("Job schedule refreshed.");return result;}  }
class C{  public static ReflectedFromAttribute createReflectedFromAttribute(TransportAddress address){  ReflectedFromAttribute attribute=new ReflectedFromAttribute();  attribute.setAddress(address);  return attribute;}  }
class C{  public static final void removeLoggingBehavior(LoggingBehavior behavior){synchronized (loggingBehaviors) {    loggingBehaviors.remove(behavior);  }}  }
class C{  public final double max(){  double max=Double.NEGATIVE_INFINITY;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (max < fieldxy[z])       max=fieldxy[z];    }  }  return max;}  }
class C{  public String operationName(){  return operationName;}  }
class C{  private void addBackendVolumes(Volume volume,boolean isAdd,List<URI> allVolumes,Set<URI> vplexVolumes){  if (RPHelper.isVPlexVolume(volume,_dbClient)) {    StringSet backends=volume.getAssociatedVolumes();    if (null == backends || backends.isEmpty()) {      _log.error("VPLEX volume {} has no backend volumes.",volume.forDisplay());      throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(volume.forDisplay());    }    for (    String backendId : backends) {      URI backendUri=URI.create(backendId);      allVolumes.add(backendUri);      if (isAdd && !vplexVolumes.contains(volume.getId())) {        Volume backVol=_dbClient.queryObject(Volume.class,backendUri);        if (backVol != null && !backVol.getInactive() && NullColumnValueGetter.isNullValue(backVol.getReplicationGroupInstance())) {          vplexVolumes.add(volume.getId());        }      }    }  } else {    allVolumes.add(volume.getId());  }}  }
class C{  public String repository(){  return this.repository;}  }
class C{  public void removeSurroundingEmptyLines(){  if (this.lines != null) {    this.removeTrailingEmptyLines();    this.removeLeadingEmptyLines();  }}  }
class C{  Scope createScope(int nelems){  Scope s=new Scope(symtab.noSymbol);  for (int i=0; i < nelems; i++) {    Symbol sym=new TypeSymbol(0,names.fromString("s" + i),null,null);    s.enter(sym);    elems=elems.prepend(sym);    List<Symbol> shadowed=shadowedMap.get(sym.name);    if (shadowed == null) {      shadowed=List.nil();    }    shadowedMap.put(sym.name,shadowed.prepend(sym));  }  return s;}  }
class C{  protected int nonWhiteSpaceOffset(String string){  for (int i=0; i < string.length(); i++) {    char charAt=string.charAt(i);    if (!Character.isWhitespace(charAt))     return i;  }  return string.length();}  }
class C{  public void inject(GridDeployment dep,ComputeTask<?,?> task,GridTaskSessionImpl ses,ComputeLoadBalancer balancer,ComputeTaskContinuousMapper mapper) throws IgniteCheckedException {  if (log.isDebugEnabled())   log.debug("Injecting resources: " + task);  Object obj=unwrapTarget(task);  inject(obj,GridResourceIoc.AnnotationSet.TASK,dep,null,ses,balancer,mapper);}  }
class C{  public static void main(String[] args){  ResultMatrix matrix;  int i;  int n;  matrix=new ResultMatrixCSV(3,3);  matrix.addHeader("header1","value1");  matrix.addHeader("header2","value2");  matrix.addHeader("header2","value3");  for (i=0; i < matrix.getRowCount(); i++) {    for (n=0; n < matrix.getColCount(); n++) {      matrix.setMean(n,i,(i + 1) * n);      matrix.setStdDev(n,i,((double)(i + 1) * n) / 100);      if (i == n) {        if (i % 2 == 1)         matrix.setSignificance(n,i,SIGNIFICANCE_WIN); else         matrix.setSignificance(n,i,SIGNIFICANCE_LOSS);      }    }  }  System.out.println("\n\n--> " + matrix.getDisplayName());  System.out.println("\n1. complete\n");  System.out.println(matrix.toStringHeader() + "\n");  System.out.println(matrix.toStringMatrix() + "\n");  System.out.println(matrix.toStringKey());  System.out.println("\n2. complete with std deviations\n");  matrix.setShowStdDev(true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n3. cols numbered\n");  matrix.setPrintColNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n4. second col missing\n");  matrix.setColHidden(1,true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n5. last row missing, rows numbered too\n");  matrix.setRowHidden(2,true);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n6. mean prec to 3\n");  matrix.setMeanPrec(3);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public PrinterAbortException(){  super();}  }
class C{  public void testReadBII() throws Exception {  CipherInputStream stream=new CipherInputStream(null,new NullCipher());  try {    stream.read(new byte[1],1,0);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public IntLiteral createIntLiteral(){  IntLiteralImpl intLiteral=new IntLiteralImpl();  return intLiteral;}  }
class C{  public void add(EdgeEnd e){  Coordinate p=e.getCoordinate();  Node n=addNode(p);  n.add(e);}  }
class C{  @Override public List<EvaluationStatistics> read(){  List<EvaluationStatistics> result;  try {    result=(List<EvaluationStatistics>)SerializationHelper.read(m_File.getAbsolutePath());  } catch (  Exception e) {    result=null;    handleException("Failed to read serialized statistics from: " + m_File,e);  }  return result;}  }
class C{  private CertificateBody(DERApplicationSpecific obj) throws IOException {  setIso7816CertificateBody(obj);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ELEMENT_POSITION___X1:    setX_1(X1_EDEFAULT);  return;case UmplePackage.ELEMENT_POSITION___Y1:setY_1(Y1_EDEFAULT);return;case UmplePackage.ELEMENT_POSITION___WIDTH_1:setWidth_1(WIDTH_1_EDEFAULT);return;case UmplePackage.ELEMENT_POSITION___HEIGHT_1:setHeight_1(HEIGHT_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void removeSerialNumber(String snKey){  _snMap.remove(snKey);}  }
class C{  private void emitTypeIndex(CstType type) throws IOException {  if ((type == null) || (file == null)) {    output.writeUleb128(0);  } else {    output.writeUleb128(1 + file.getTypeIds().indexOf(type));  }  if (DEBUG) {    System.err.printf("Emit type %s\n",type == null ? "<null>" : type.toHuman());  }}  }
class C{  public static void readSSLProperties(Map<String,String> env){  readSSLProperties(env,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(internalSubset01.class,args);}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length < 2 * (wordSize / 8)) {    throw new IllegalArgumentException("iv.length < 2 * (wordSize / 8)");  }  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=new byte[2 * (wordSize / 8)];  System.arraycopy(iv,0,this.iv,0,2 * (wordSize / 8));}  }
class C{  static String internalToBinaryClassName(String className){  if (className == null) {    return null;  } else {    return className.replace('/','.');  }}  }
class C{  @Ignore @Test public void test_DR_PGS_1Nodes_Put_Receiver_2() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    createCacheInVMs(nyPort,vm2);    vm2.invoke(null);    vm2.invoke(null);    createCacheInVMs(lnPort,vm4);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm2.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  public THLEvent deserializeEvent() throws ReplicatorException {  try {    THLEvent thlEvent=serializer.deserializeEvent(dis);    return thlEvent;  } catch (  IOException e) {    throw new THLException("Unable to deserialize event",e);  }}  }
class C{  public void completeFutures(){  while (blockedFutures.size() > 0) {    final Pair<CompletableFuture,Object> pair=blockedFutures.poll();    if (pair != null) {      pair.getLeft().complete(pair.getRight());    }  }}  }
class C{  public String mediaType(){  return mediaType;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_PA_SLA_Measure_ID=getRecord_ID();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static Query intQuery(String field,int id){  return NumericRangeQuery.newIntRange(field,id,id,true,true);}  }
class C{  public int hashCode(){  return getName().hashCode();}  }
class C{  public boolean isScanHeadersAllRequests(){  return scanHeadersAllRequests;}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  protected void onScrollY(int scrollY){}  }
class C{  public VerletParticle2D addConstraint(ParticleConstraint2D c){  if (constraints == null) {    constraints=new ArrayList<ParticleConstraint2D>(1);  }  constraints.add(c);  return this;}  }
class C{  static GenomeRelationships loadFile(File file) throws IOException {  try (BufferedReader reader=new BufferedReader(new FileReader(file))){    return RelationshipsFileParser.load(reader);  } }  }
class C{  public static byte[] hashTwice(byte[] input,int offset,int length){  MessageDigest digest=newDigest();  digest.update(input,offset,length);  return digest.digest(digest.digest());}  }
class C{  private int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  private void initRoleSpecificUserPrice(){  int roleCount=roles.size();  priceModelPricedRoles=new VOPricedRole[roleCount];  for (int i=0; i < roleCount; i++) {    priceModelPricedRoles[i]=new VOPricedRole();  }  if (priceModel != null) {    List<VOPricedRole> roleSpecificUserPrice=priceModel.getRoleSpecificUserPrices();    if (roleSpecificUserPrice != null) {      for (int i=0; i < roleCount; i++) {        VORoleDefinition curRole=roles.get(i);        for (int j=0; j < roleSpecificUserPrice.size(); j++) {          VOPricedRole curUserPrice=roleSpecificUserPrice.get(j);          if (curRole.getRoleId().equals(curUserPrice.getRole().getRoleId())) {            priceModelPricedRoles[i]=curUserPrice;          }        }      }    }  }}  }
class C{  protected void addBean(TestContainer container,Object bean) throws Exception {  container.addBean(bean);}  }
class C{  public void removeFocusListener(FocusListener l){}  }
class C{  void write(ImageOutputStream ios) throws IOException {  length=14;  writeTag(ios);  byte[] id={0x41,0x64,0x6F,0x62,0x65};  ios.write(id);  write2bytes(ios,version);  write2bytes(ios,flags0);  write2bytes(ios,flags1);  ios.write(transform);}  }
class C{  @Override public V remove(Object key){  processQueue();  SoftReference<V> ref=map.remove(key);  return ref == null ? null : ref.get();}  }
class C{  public TermQueryBuilder(String name,float value){  this(name,(Object)value);}  }
class C{  public boolean isHighlightAreas(){  return null == highlightAreas ? _highlightAreas : highlightAreas.get();}  }
class C{  public void addAttachment(Attachment attachment){  addProperty(attachment);}  }
class C{  void feMessage(Throwable ex){  out.println(ex.getMessage());}  }
class C{  public static String makeFromClause(ModelEntity modelEntity,ModelFieldTypeReader modelFieldTypeReader,Datasource datasourceInfo) throws GenericEntityException {  StringBuilder sql=new StringBuilder(" FROM ");  if (modelEntity instanceof ModelViewEntity) {    ModelViewEntity modelViewEntity=(ModelViewEntity)modelEntity;    if ("ansi".equals(datasourceInfo.getJoinStyle()) || "ansi-no-parenthesis".equals(datasourceInfo.getJoinStyle())) {      boolean useParenthesis=true;      if ("ansi-no-parenthesis".equals(datasourceInfo.getJoinStyle())) {        useParenthesis=false;      }      Set<String> joinedAliasSet=new TreeSet<String>();      StringBuilder openParens=null;      if (useParenthesis)       openParens=new StringBuilder();      StringBuilder restOfStatement=new StringBuilder();      for (int i=0; i < modelViewEntity.getViewLinksSize(); i++) {        if (i > 0 && useParenthesis)         openParens.append('(');        ModelViewEntity.ModelViewLink viewLink=modelViewEntity.getViewLink(i);        ModelEntity linkEntity=modelViewEntity.getMemberModelEntity(viewLink.getEntityAlias());        ModelEntity relLinkEntity=modelViewEntity.getMemberModelEntity(viewLink.getRelEntityAlias());        if (i == 0) {          restOfStatement.append(makeViewTable(linkEntity,modelFieldTypeReader,datasourceInfo));          restOfStatement.append(" ");          restOfStatement.append(viewLink.getEntityAlias());          joinedAliasSet.add(viewLink.getEntityAlias());        } else {          if (!joinedAliasSet.contains(viewLink.getEntityAlias())) {            throw new GenericModelException("Tried to link the " + viewLink.getEntityAlias() + " alias to the "+ viewLink.getRelEntityAlias()+ " alias of the "+ modelViewEntity.getEntityName()+ " view-entity, but it is not the first view-link and has not been included in a previous view-link. In other words, the left/main alias isn't connected to the rest of the member-entities yet.");          }        }        joinedAliasSet.add(viewLink.getRelEntityAlias());        if (viewLink.isRelOptional()) {          restOfStatement.append(" LEFT OUTER JOIN ");        } else {          restOfStatement.append(" INNER JOIN ");        }        restOfStatement.append(makeViewTable(relLinkEntity,modelFieldTypeReader,datasourceInfo));        restOfStatement.append(" ");        restOfStatement.append(viewLink.getRelEntityAlias());        restOfStatement.append(" ON ");        StringBuilder condBuffer=new StringBuilder();        for (int j=0; j < viewLink.getKeyMapsSize(); j++) {          ModelKeyMap keyMap=viewLink.getKeyMap(j);          ModelField linkField=linkEntity.getField(keyMap.getFieldName());          if (linkField == null) {            throw new GenericModelException("Invalid field name in view-link key-map for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity; the field ["+ keyMap.getFieldName()+ "] does not exist on the ["+ linkEntity.getEntityName()+ "] entity.");          }          ModelField relLinkField=relLinkEntity.getField(keyMap.getRelFieldName());          if (relLinkField == null) {            throw new GenericModelException("Invalid related field name in view-link key-map for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity; the field ["+ keyMap.getRelFieldName()+ "] does not exist on the ["+ relLinkEntity.getEntityName()+ "] entity.");          }          if (condBuffer.length() > 0) {            condBuffer.append(" AND ");          }          condBuffer.append(viewLink.getEntityAlias());          condBuffer.append(".");          condBuffer.append(linkField.getColName());          condBuffer.append(" = ");          condBuffer.append(viewLink.getRelEntityAlias());          condBuffer.append(".");          condBuffer.append(relLinkField.getColName());        }        if (condBuffer.length() == 0) {          throw new GenericModelException("No view-link/join key-maps found for the " + viewLink.getEntityAlias() + " and the "+ viewLink.getRelEntityAlias()+ " member-entities of the "+ modelViewEntity.getEntityName()+ " view-entity.");        }        ModelViewEntity.ViewEntityCondition viewEntityCondition=viewLink.getViewEntityCondition();        if (viewEntityCondition != null) {          EntityCondition whereCondition=viewEntityCondition.getWhereCondition(modelFieldTypeReader,null);          if (whereCondition != null) {            condBuffer.append(" AND ");            condBuffer.append(whereCondition.makeWhereString(modelEntity,null,datasourceInfo));          }        }        restOfStatement.append(condBuffer.toString());        if (i < (modelViewEntity.getViewLinksSize() - 1) && useParenthesis)         restOfStatement.append(')');      }      if (useParenthesis)       sql.append(openParens.toString());      sql.append(restOfStatement.toString());      boolean fromEmpty=restOfStatement.length() == 0;      for (      String aliasName : modelViewEntity.getMemberModelMemberEntities().keySet()) {        ModelEntity fromEntity=modelViewEntity.getMemberModelEntity(aliasName);        if (!joinedAliasSet.contains(aliasName)) {          if (!fromEmpty)           sql.append(", ");          fromEmpty=false;          sql.append(makeViewTable(fromEntity,modelFieldTypeReader,datasourceInfo));          sql.append(" ");          sql.append(aliasName);        }      }    } else     if ("theta-oracle".equals(datasourceInfo.getJoinStyle()) || "theta-mssql".equals(datasourceInfo.getJoinStyle())) {      Iterator<String> meIter=modelViewEntity.getMemberModelMemberEntities().keySet().iterator();      while (meIter.hasNext()) {        String aliasName=meIter.next();        ModelEntity fromEntity=modelViewEntity.getMemberModelEntity(aliasName);        sql.append(makeViewTable(fromEntity,modelFieldTypeReader,datasourceInfo));        sql.append(" ");        sql.append(aliasName);        if (meIter.hasNext())         sql.append(", ");      }    } else {      throw new GenericModelException("The join-style " + datasourceInfo.getJoinStyle() + " is not yet supported");    }  } else {    sql.append(modelEntity.getTableName(datasourceInfo));  }  return sql.toString();}  }
class C{  public ManualAssociationWorkingSet(final Iterable<String> projectNames,final String name,final WorkingSetManager manager){  super(name,manager);  this.projectNames=newHashSet(projectNames);}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  public void afterPropertiesSet() throws Exception {  if (configurationMappings != null) {    for (    String key : configurationMappings.keySet()) {      String value=configurationMappings.get(key);      registerConfiguration(key,getConfiguration(value));    }  }}  }
class C{  public void test_simplePrematureClose(){  Striterator iter=new Striterator(m_data.iterator());  int i=0;  while (iter.hasNext()) {    iter.next();    if (++i == 10) {      iter.close();      assertTrue(!iter.hasNext());    }  }  assertTrue(!iter.isOpen());  assertTrue(i == 10);}  }
class C{  public DosStatusFrame(AttackModel model){  this.model=model;  initComponents();  this.model.addAttackListener((AttackListener)jProgressBar1);  this.model.addAttackListener(jButtonAbort);  this.model.addAttackListener(jButtonStart);  this.model.addAttackListener(jButtonClose);  this.model.addAttackListener(jButtonFinalize);  this.model.addAttackListener(jLabelStatusView);}  }
class C{  private static void usage(){  System.out.printf("Usage: WriteFileRecordTest connection unit file record value [value ...]");  System.exit(1);}  }
class C{  public static void main(String argv[]){  String dtd_home=System.getProperty("dtd_home") + File.separator;  if (dtd_home == null) {    System.err.println("Must set property 'dtd_home'");    return;  }  DTDBuilder dtd=null;  try {    dtd=new DTDBuilder(argv[0]);    mapping=new PublicMapping(dtd_home,"public.map");    String path=mapping.get(argv[0]);    new DTDParser().parse(new FileInputStream(path),dtd);  } catch (  IOException e) {    System.err.println("Could not open DTD file " + argv[0]);    e.printStackTrace(System.err);    System.exit(1);  }  try {    DataOutputStream str=new DataOutputStream(System.out);    dtd.save(str,argv[0]);    str.close();  } catch (  IOException ex) {    ex.printStackTrace();    System.exit(1);  }}  }
class C{  public void clear(RegionVersionVector rvv){  if (rvv != null) {    return;  }synchronized (this.lock) {    if (bucketRegion != null) {      this.stats.decrementCounter(bucketRegion.getCounter());      bucketRegion.resetCounter();    } else {      this.stats.resetCounter();    }    initHeadAndTail();  }}  }
class C{  public static SolidToast make(Activity activity,CharSequence text){  return make(activity,text,null,DURATION_SHORT,GRAVITY_DEFAULT);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/{applicationName}/alias/{alias}",method=RequestMethod.DELETE) public JsonResponse removeAlias(JsonInput jsonInput) throws ServiceException, CheckException {  String applicationName=jsonInput.getApplicationName();  String alias=jsonInput.getAlias();  if (logger.isDebugEnabled()) {    logger.debug("application.name=" + applicationName);    logger.debug("alias.name=" + alias);  }  if (applicationName != null) {    applicationName=applicationName.toLowerCase();  }  if (alias != null) {    alias=alias.toLowerCase();  }  User user=this.authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  authentificationUtils.canStartNewAction(user,null,Locale.ENGLISH);  applicationService.removeAlias(application,alias);  return new HttpOk();}  }
class C{  public LinkedCaseInsensitiveMap(Locale locale){  super();  this.caseInsensitiveKeys=new HashMap<String,String>();  this.locale=(locale != null ? locale : Locale.getDefault());}  }
class C{  public boolean hasSelection(boolean allowFolders){  if (!allowFolders && (enforceValidRepositoryEntryName && locationFieldRepositoryEntry.getText().isEmpty() || !enforceValidRepositoryEntryName && locationField.getText().isEmpty() || enforceValidRepositoryEntryName && !RepositoryLocation.isNameValid(locationFieldRepositoryEntry.getText()) || enforceValidRepositoryEntryName && tree.getSelectedEntry() == null || !enforceValidRepositoryEntryName && tree.getSelectedEntry() == null)) {    return false;  } else {    try {      getRepositoryLocation();      return true;    } catch (    MalformedRepositoryLocationException e) {      LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.repository.gui.RepositoryLocationChooser.malformed_repository_location",e),e);      return false;    }  }}  }
class C{  public Module(String moduleName,String url){  super();  Assert.hasText(moduleName,"Not allowed to set the moduleName to null or an empty String");  this.moduleName=moduleName;  this.url=url;}  }
class C{  public Builder initializeAsFromDangling(IndexMetaData indexMetaData){  return initializeEmpty(indexMetaData,new UnassignedInfo(UnassignedInfo.Reason.DANGLING_INDEX_IMPORTED,null));}  }
class C{  private static boolean removeSourceRoots(@NotNull Sdk sdk,@NotNull SdkModificator modificator){  final VirtualFile[] sourceRoots=sdk.getRootProvider().getFiles(OrderRootType.SOURCES);  if (sourceRoots.length > 0) {    modificator.removeRoots(OrderRootType.SOURCES);    return true;  }  return false;}  }
class C{  public DisplayText(int type,String text){  if (text.length() > DISPLAY_TEXT_MAXIMUM_SIZE) {    text=text.substring(0,DISPLAY_TEXT_MAXIMUM_SIZE);  }  contentType=type;switch (type) {case CONTENT_TYPE_IA5STRING:    contents=new DERIA5String(text);  break;case CONTENT_TYPE_UTF8STRING:contents=new DERUTF8String(text);break;case CONTENT_TYPE_VISIBLESTRING:contents=new DERVisibleString(text);break;case CONTENT_TYPE_BMPSTRING:contents=new DERBMPString(text);break;default :contents=new DERUTF8String(text);break;}}  }
class C{  public void interrupt(){  return;}  }
class C{  @Override public int compareTo(Object o){  double result=comparator.compare(this,(PerformanceVector)o);  if (result < 0.0) {    return -1;  } else   if (result > 0.0) {    return +1;  } else {    return 0;  }}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void lockJournal(){  throw new UnsupportedOperationException();}  }
class C{  private HyperLogLogPlusCounter(int p,HashFunction hashFunc){  this.p=p;  this.m=1 << p;  this.hashFunc=hashFunc;  this.registers=new byte[m];  this.singleBucket=-1;}  }
class C{  public static <E>E parse(InputStream is,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).parse(is);}  }
class C{  public static boolean asBoolean(Enumeration enumeration){  return enumeration.hasMoreElements();}  }
class C{  public boolean isInRange(int value,int min,int max){  return INTEGER_VALIDATOR.isInRange(value,min,max);}  }
class C{  static String serialClassName(Serializable obj){  ByteArrayOutputStream out=new ByteArrayOutputStream();  try (ObjectOutputStream oos=new ObjectOutputStream(out)){    oos.writeObject(obj);  } catch (  IOException e) {    throw new RuntimeException("Serialization failed: " + e);  }  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());  try (DataInputStream dis=new DataInputStream(in)){    dis.readShort();    dis.readShort();    dis.readByte();    dis.readByte();    return dis.readUTF();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean isProtected(int mod){  return Modifier.isProtected(mod);}  }
class C{  public XObject executeRelativePathPattern(XPathContext xctxt,StepPattern prevStep) throws javax.xml.transform.TransformerException {  XObject score=NodeTest.SCORE_NONE;  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  if (null != dtm) {    int predContext=xctxt.getCurrentNode();    DTMAxisTraverser traverser;    int axis=m_axis;    boolean needToTraverseAttrs=WalkerFactory.isDownwardAxisOfMany(axis);    boolean iterRootIsAttr=(dtm.getNodeType(xctxt.getIteratorRoot()) == DTM.ATTRIBUTE_NODE);    if ((Axis.PRECEDING == axis) && iterRootIsAttr) {      axis=Axis.PRECEDINGANDANCESTOR;    }    traverser=dtm.getAxisTraverser(axis);    for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {      try {        xctxt.pushCurrentNode(relative);        score=execute(xctxt);        if (score != NodeTest.SCORE_NONE) {          if (executePredicates(xctxt,dtm,context))           return score;          score=NodeTest.SCORE_NONE;        }        if (needToTraverseAttrs && iterRootIsAttr && (DTM.ELEMENT_NODE == dtm.getNodeType(relative))) {          int xaxis=Axis.ATTRIBUTE;          for (int i=0; i < 2; i++) {            DTMAxisTraverser atraverser=dtm.getAxisTraverser(xaxis);            for (int arelative=atraverser.first(relative); DTM.NULL != arelative; arelative=atraverser.next(relative,arelative)) {              try {                xctxt.pushCurrentNode(arelative);                score=execute(xctxt);                if (score != NodeTest.SCORE_NONE) {                  if (score != NodeTest.SCORE_NONE)                   return score;                }              }  finally {                xctxt.popCurrentNode();              }            }            xaxis=Axis.NAMESPACE;          }        }      }  finally {        xctxt.popCurrentNode();      }    }  }  return score;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Statement)) {    return false;  }  if (this == obj) {    return true;  }  Statement s=(Statement)obj;  if (!operation.equals(s.operation)) {    return false;  }  if (inputs.size() != s.inputs.size()) {    return false;  }  for (int j=0; j < inputs.size(); j++) {    if (!inputs.get(j).equals(s.inputs.get(j))) {      return false;    }  }  return true;}  }
class C{  public EventTimer(){  if (Cfg.DEBUG) {    Check.log(TAG + " TimerEvent constructor");  }}  }
class C{  @OnOpen public void onConnect(final Session session){  final String articleId=(String)Channels.getHttpParameter(session,Article.ARTICLE_T_ID);  if (StringUtils.isBlank(articleId)) {    return;  }  SESSIONS.add(session);synchronized (ARTICLE_VIEWS) {    if (!ARTICLE_VIEWS.containsKey(articleId)) {      ARTICLE_VIEWS.put(articleId,1);    } else {      final int count=ARTICLE_VIEWS.get(articleId);      ARTICLE_VIEWS.put(articleId,count + 1);    }  }  final JSONObject message=new JSONObject();  message.put(Article.ARTICLE_T_ID,articleId);  message.put(Common.OPERATION,"+");  ArticleListChannel.notifyHeat(message);  notifyHeat(message);  final JSONObject user=(JSONObject)Channels.getHttpSessionAttribute(session,User.USER);  if (null == user) {    return;  }  final String userName=user.optString(User.USER_NAME);  final LatkeBeanManager beanManager=LatkeBeanManagerImpl.getInstance();  final ArticleRepository articleRepository=beanManager.getReference(ArticleRepository.class);  final LangPropsService langPropsService=beanManager.getReference(LangPropsServiceImpl.class);  final TimelineMgmtService timelineMgmtService=beanManager.getReference(TimelineMgmtService.class);  try {    final JSONObject article=articleRepository.get(articleId);    String articleTitle=Jsoup.parse(article.optString(Article.ARTICLE_TITLE)).text();    articleTitle=Emotions.convert(articleTitle);    final String articlePermalink=Latkes.getServePath() + article.optString(Article.ARTICLE_PERMALINK);    final JSONObject timeline=new JSONObject();    timeline.put(Common.TYPE,Article.ARTICLE);    String content=langPropsService.get("timelineInArticleLabel");    content=content.replace("{user}","<a target='_blank' rel='nofollow' href='" + Latkes.getServePath() + "/member/"+ userName+ "'>"+ userName+ "</a>").replace("{article}","<a target='_blank' rel='nofollow' href='" + articlePermalink + "'>"+ articleTitle+ "</a>");    timeline.put(Common.CONTENT,content);    timelineMgmtService.addTimeline(timeline);  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Timeline error",e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.316 -0500",hash_original_method="B5444C1DC99A243E7A135E83B11C8EBC",hash_generated_method="87226959DF4E37DE7AA84EE43652034D") private boolean isLoggable(){  return Log.isLoggable(tag,level);}  }
class C{  private GridBagConstraints gbcLicenseField(){  gbc.gridx=1;  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.weightx=400;  gbc.insets=new Insets(0,10,5,10);  return gbc;}  }
class C{  public GenericByteArrayPool(MemoryTrimmableRegistry memoryTrimmableRegistry,PoolParams poolParams,PoolStatsTracker poolStatsTracker){  super(memoryTrimmableRegistry,poolParams,poolStatsTracker);  final SparseIntArray bucketSizes=poolParams.bucketSizes;  mBucketSizes=new int[bucketSizes.size()];  for (int i=0; i < bucketSizes.size(); ++i) {    mBucketSizes[i]=bucketSizes.keyAt(i);  }  initialize();}  }
class C{  public void pvChanged(PvChangeEvent event){  if (event.getValue() instanceof ProcessVar) {    writePv((ProcessVar)event.getValue());  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return S;default :  return null;}}  }
class C{  public void unsetReceivers(){  this.receivers=null;}  }
class C{  public void addCRL(X509CRLHolder crl){  crls.add(crl.toASN1Structure());}  }
class C{  private void generateAndTestWithCoverage(TestEnvironment environment,RandoopOptions options,ExpectedTests expectedRegression,ExpectedTests expectedError,CoverageChecker coverageChecker){  RandoopRunStatus runStatus=generateAndCompile(environment,options,false);  String packageName=options.getPackageName();  TestRunStatus regressionRunDesc=runRegressionTests(environment,options,expectedRegression,runStatus,packageName);  TestRunStatus errorRunDesc=runErrorTests(environment,options,expectedError,runStatus,packageName);  coverageChecker.checkCoverage(regressionRunDesc,errorRunDesc);}  }
class C{  public NodeSorter(XPathContext p){  m_execContext=p;}  }
class C{  public void clamp(){  FloatVectorSpecies _species=(FloatVectorSpecies)species;  for (int i=0; i < genomeLength(); i++) {    double minGene=_species.minGene(i);    if (genome[i] < minGene)     genome[i]=minGene; else {      double maxGene=_species.maxGene(i);      if (genome[i] > maxGene)       genome[i]=maxGene;    }  }}  }
class C{  public static <T extends Key<T>>GroupMatcher<T> anyGroup(){  return new GroupMatcher<T>("",StringOperatorName.ANYTHING);}  }
class C{  public boolean isCellularExperimentEnabled(){  return mSharedPreferences.getBoolean(PREF_CELLULAR_EXPERIMENT,false);}  }
class C{  public STAXEventWriter(File file) throws XMLStreamException, IOException {  consumer=outputFactory.createXMLEventWriter(new FileWriter(file));}  }
class C{  public InternalCallResolver(final ICallResolverTarget target,final JFrame parent){  super(target,parent);}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  contentPane=new JPanel();  contentPane.setLayout(new GridLayoutManager(9,2,new Insets(0,0,0,0),-1,-1));  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Name"));  contentPane.add(label1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  name=new JTextField();  contentPane.add(name,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Server"));  contentPane.add(label2,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  server=new JLabel();  server.setText("https://");  contentPane.add(server,new GridConstraints(3,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JLabel label3=new JLabel();  this.$$$loadLabelText$$$(label3,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Owner"));  contentPane.add(label3,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  owner=new JLabel();  owner.setText("domain\\user");  contentPane.add(owner,new GridConstraints(4,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JLabel label4=new JLabel();  this.$$$loadLabelText$$$(label4,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Computer"));  contentPane.add(label4,new GridConstraints(5,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  computer=new JLabel();  computer.setText("localhost");  contentPane.add(computer,new GridConstraints(5,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JLabel label5=new JLabel();  this.$$$loadLabelText$$$(label5,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Comment"));  contentPane.add(label5,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JBScrollPane jBScrollPane1=new JBScrollPane();  contentPane.add(jBScrollPane1,new GridConstraints(2,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  comment=new JTextArea();  comment.setLineWrap(true);  comment.setRows(3);  comment.setText("");  jBScrollPane1.setViewportView(comment);  workingFoldersLabel=new JLabel();  this.$$$loadLabelText$$$(workingFoldersLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.WorkingFolders"));  contentPane.add(workingFoldersLabel,new GridConstraints(7,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  contentPane.add(spacer1,new GridConstraints(6,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(-1,10),null,0,false));  final JLabel label6=new JLabel();  this.$$$loadLabelText$$$(label6,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("WorkspaceDialog.Location"));  contentPane.add(label6,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  location=new ComboBox();  location.setEditable(false);  contentPane.add(location,new GridConstraints(1,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  contentPane.add(workingFolderPanel,new GridConstraints(8,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  label1.setLabelFor(name);  label5.setLabelFor(comment);  label6.setLabelFor(name);}  }
class C{  private void updateFitness(TestSuiteChromosome individual,List<FitnessFunction<? extends Chromosome>> fitnessFunctions){  for (  FitnessFunction<? extends Chromosome> ff : fitnessFunctions) {    ((TestSuiteFitnessFunction)ff).getFitness(individual);  }}  }
class C{  public static NbtOutputStream writeInflated(NbtTag tag,File file,boolean append) throws IOException {  createFile(file);  NbtOutputStream out=new NbtOutputStream(new InflaterOutputStream(new FileOutputStream(file,append)));  out.write(tag);  return out;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.DISJUNCTION__ELEMENTS:    getElements().clear();  getElements().addAll((Collection<? extends Pattern>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  int maxn(){  return m_instances.numAttributes();}  }
class C{  SSLServerSocketFactoryImpl(SSLContextImpl context){  this.context=context;}  }
class C{  public final int size(){  return m_index + 1;}  }
class C{  public static String toArrayComponent(String desc,int dim){  return desc.substring(dim);}  }
class C{  public int addAllAbsent(Collection<? extends E> c){  Object[] cs=c.toArray();  if (cs.length == 0)   return 0;  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    int added=0;    for (int i=0; i < cs.length; ++i) {      Object e=cs[i];      if (indexOf(e,elements,0,len) < 0 && indexOf(e,cs,0,added) < 0)       cs[added++]=e;    }    if (added > 0) {      Object[] newElements=Arrays.copyOf(elements,len + added);      System.arraycopy(cs,0,newElements,len,added);      setArray(newElements);    }    return added;  }  finally {    lock.unlock();  }}  }
class C{  public void verbose(CharSequence message,Throwable e){  log(Level.INFO,message,e);}  }
class C{  public ProcessExecutionOperatorExceptionError(Operator operator,UserError cause){  super(operator,972,operator.getName(),cause.getMessage());  this.cause=cause;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  static final <T>void validateValues(final T[] values,final Comparator<? super T> comparator){  final int lenM1=values.length - 1;  for (int j=0; j < lenM1; j++) {    if (values[j] != null && values[j + 1] != null && comparator.compare(values[j],values[j + 1]) < 0) {      continue;    }    throw new SketchesArgumentException("Values must be unique, monotonically increasing and not null.");  }}  }
class C{  private void autoClear(){  if (this.autoClearOverlay) {    this.clearOverlays();  }}  }
class C{  private void addZipkinBinaryAnnotations(zipkin.Span.Builder zipkinSpan,Span span,Endpoint ep){  for (  Map.Entry<String,String> e : span.tags().entrySet()) {    BinaryAnnotation binaryAnn=BinaryAnnotation.builder().type(BinaryAnnotation.Type.STRING).key(e.getKey()).value(e.getValue().getBytes(UTF_8)).endpoint(ep).build();    zipkinSpan.addBinaryAnnotation(binaryAnn);  }}  }
class C{  protected void readHeader(){  String id="";  for (int i=0; i < 6; i++) {    id+=(char)read();  }  if (!id.startsWith("GIF")) {    status=STATUS_FORMAT_ERROR;    return;  }  readLSD();  if (gctFlag && !err()) {    gct=readColorTable(gctSize);    bgColor=gct[bgIndex];  }}  }
class C{  public static Object map(final JBBPFieldStruct rootStructure,final Object mappingClassInstance,final JBBPMapperCustomFieldProcessor customFieldProcessor,final int flags){  JBBPUtils.assertNotNull(rootStructure,"The Root structure must not be null");  JBBPUtils.assertNotNull(mappingClassInstance,"The Mapping class instance must not be null");  final Class<?> mappingClass=mappingClassInstance.getClass();  final Bin defaultAnno=mappingClass.getAnnotation(Bin.class);  final List<Class<?>> listOfClassHierarchy=new ArrayList<Class<?>>();  Class<?> current=mappingClassInstance.getClass();  while (current != java.lang.Object.class) {    listOfClassHierarchy.add(current);    current=current.getSuperclass();  }  for (  final Class<?> processingClazz : listOfClassHierarchy) {    for (    final Field mappingField : processingClazz.getDeclaredFields()) {      final int modifiers=mappingField.getModifiers();      if (Modifier.isTransient(modifiers) || Modifier.isStatic(modifiers)) {        continue;      }      if (!mappingField.isAccessible()) {        JBBPUtils.makeAccessible(mappingField);      }      final Bin fieldAnno=mappingField.getAnnotation(Bin.class);      final Bin mappedAnno;      if ((fieldAnno == null && defaultAnno == null) || mappingField.getName().indexOf('$') >= 0) {        continue;      }      mappedAnno=fieldAnno == null ? defaultAnno : fieldAnno;      if (mappedAnno.custom()) {        JBBPUtils.assertNotNull(customFieldProcessor,"There is a custom mapping field, in the case you must provide a custom mapping field processor");        final Object value=customFieldProcessor.prepareObjectForMapping(rootStructure,mappedAnno,mappingField);        setFieldValue(mappingClassInstance,mappingField,null,value);      } else {        final BinType fieldType;        final JBBPBitNumber mappedBitNumber=mappedAnno.outBitNumber();        if (mappedAnno.type() == BinType.UNDEFINED) {          BinType thetype=BinType.findCompatible(mappingField.getType());          if (thetype == null) {            throw new JBBPMapperException("Can't find compatible type for a mapping field",rootStructure,mappingClass,mappingField,null);          } else           if (mappedBitNumber.getBitNumber() < 8 && !(thetype == BinType.STRUCT || thetype == BinType.STRUCT_ARRAY)) {            thetype=thetype.isArray() ? BinType.BIT_ARRAY : BinType.BIT;          }          fieldType=thetype;        } else {          fieldType=mappedAnno.type();        }        final boolean bitWideField=fieldType == BinType.BIT || fieldType == BinType.BIT_ARRAY;        final String fieldName=mappedAnno.name().length() == 0 ? mappingField.getName() : mappedAnno.name();        final String fieldPath=mappedAnno.path();        final JBBPAbstractField binField;        if (fieldPath.length() == 0) {          binField=fieldName.length() == 0 ? rootStructure.findFieldForType(fieldType.getFieldClass()) : rootStructure.findFieldForNameAndType(fieldName,fieldType.getFieldClass());        } else {          binField=rootStructure.findFieldForPathAndType(fieldPath,fieldType.getFieldClass());        }        if (binField == null) {          if ((flags & FLAG_IGNORE_MISSING_VALUES) != 0) {            continue;          }          throw new JBBPMapperException("Can't find value to be mapped to a mapping field [" + mappingField + ']',null,mappingClass,mappingField,null);        }        if (bitWideField && mappedBitNumber != JBBPBitNumber.BITS_8 && ((BitEntity)binField).getBitWidth() != mappedBitNumber) {          throw new JBBPMapperException("Can't map value to a mapping field for different field bit width [" + mappedBitNumber + "!="+ ((BitEntity)binField).getBitWidth().getBitNumber()+ ']',null,mappingClass,mappingField,null);        }        if (mappingField.getType().isArray()) {          if (binField instanceof JBBPAbstractArrayField) {            if (binField instanceof JBBPFieldArrayStruct) {              final JBBPFieldArrayStruct structArray=(JBBPFieldArrayStruct)binField;              final Class<?> componentType=mappingField.getType().getComponentType();              Object valueArray=getFieldValue(mappingClassInstance,mappingField);              valueArray=valueArray == null ? Array.newInstance(componentType,structArray.size()) : valueArray;              if (Array.getLength(valueArray) != structArray.size()) {                throw new JBBPMapperException("Can't map an array field for different expected size [" + Array.getLength(valueArray) + "!="+ structArray.size()+ ']',binField,mappingClass,mappingField,null);              }              for (int i=0; i < structArray.size(); i++) {                final Object curInstance=Array.get(valueArray,i);                if (curInstance == null) {                  Array.set(valueArray,i,map(structArray.getElementAt(i),componentType,customFieldProcessor));                } else {                  Array.set(valueArray,i,map(structArray.getElementAt(i),curInstance,customFieldProcessor));                }              }              setFieldValue(mappingClassInstance,mappingField,binField,valueArray);            } else {              mapArrayField(mappingClassInstance,mappingField,(JBBPAbstractArrayField<?>)binField,mappedAnno.bitOrder() == JBBPBitOrder.MSB0);            }          } else {            throw new JBBPMapperException("Can't map a non-array value to an array mapping field",binField,mappingClass,mappingField,null);          }        } else {          if (binField instanceof JBBPNumericField) {            mapNumericField(mappingClassInstance,mappingField,(JBBPNumericField)binField,mappedAnno.bitOrder() == JBBPBitOrder.MSB0);          } else           if (binField instanceof JBBPFieldStruct) {            if (mappingField.getType().isPrimitive()) {              throw new JBBPMapperException("Can't map a structure to a primitive mapping field",binField,mappingClass,mappingField,null);            } else {              final Object curValue=getFieldValue(mappingClassInstance,mappingField);              if (curValue == null) {                setFieldValue(mappingClassInstance,mappingField,binField,map((JBBPFieldStruct)binField,mappingField.getType(),customFieldProcessor));              } else {                setFieldValue(mappingClassInstance,mappingField,binField,map((JBBPFieldStruct)binField,curValue,customFieldProcessor));              }            }          } else {            boolean processed=false;            if (mappingField.getType() == String.class && binField instanceof JBBPAbstractArrayField) {              final String convertedValue=convertFieldValueToString((JBBPAbstractArrayField<?>)binField);              if (convertedValue != null) {                setFieldValue(mappingClassInstance,mappingField,binField,convertedValue);                processed=true;              }            }            if (!processed) {              throw new JBBPMapperException("Can't map a field for its value incompatibility",binField,mappingClass,mappingField,null);            }          }        }      }    }  }  return mappingClassInstance;}  }
class C{  public static Map<String,Object> dayStartCapacityAvailable(GenericValue techDataCalendarWeek,int dayStart){  Map<String,Object> result=FastMap.newInstance();  int moveDay=0;  Double capacity=null;  Time startTime=null;  while (capacity == null || capacity.doubleValue() == 0) {switch (dayStart) {case Calendar.MONDAY:      capacity=techDataCalendarWeek.getDouble("mondayCapacity");    startTime=techDataCalendarWeek.getTime("mondayStartTime");  break;case Calendar.TUESDAY:capacity=techDataCalendarWeek.getDouble("tuesdayCapacity");startTime=techDataCalendarWeek.getTime("tuesdayStartTime");break;case Calendar.WEDNESDAY:capacity=techDataCalendarWeek.getDouble("wednesdayCapacity");startTime=techDataCalendarWeek.getTime("wednesdayStartTime");break;case Calendar.THURSDAY:capacity=techDataCalendarWeek.getDouble("thursdayCapacity");startTime=techDataCalendarWeek.getTime("thursdayStartTime");break;case Calendar.FRIDAY:capacity=techDataCalendarWeek.getDouble("fridayCapacity");startTime=techDataCalendarWeek.getTime("fridayStartTime");break;case Calendar.SATURDAY:capacity=techDataCalendarWeek.getDouble("saturdayCapacity");startTime=techDataCalendarWeek.getTime("saturdayStartTime");break;case Calendar.SUNDAY:capacity=techDataCalendarWeek.getDouble("sundayCapacity");startTime=techDataCalendarWeek.getTime("sundayStartTime");break;}if (capacity == null || capacity.doubleValue() == 0) {moveDay+=1;dayStart=(dayStart == 7) ? 1 : dayStart + 1;}}result.put("capacity",capacity);result.put("startTime",startTime);result.put("moveDay",Integer.valueOf(moveDay));return result;}  }
class C{  public boolean isEmpty(){  if (priorEventMap != null) {    priorEventMap.isEmpty();  }  return true;}  }
class C{  private static long skipBytes(FileInputStream fis,int toSkip,long space) throws IOException {  long skip=fis.skip(toSkip);  if (skip != toSkip) {    throw new RuntimeException("skip() returns " + skip + " but expected "+ toSkip);  }  long newSpace=space - toSkip;  long remaining=newSpace > 0 ? newSpace : 0;  int avail=fis.available();  if (avail != remaining) {    throw new RuntimeException("available() returns " + avail + " but expected "+ remaining);  }  System.out.println("Skipped " + skip + " bytes "+ " available() returns "+ avail);  return newSpace;}  }
class C{  @Override public byte[] decrypt(EncryptedData dataToDecrypt,KeyParameter aesKey) throws KeyCrypterException {  checkNotNull(dataToDecrypt);  checkNotNull(aesKey);  try {    ParametersWithIV keyWithIv=new ParametersWithIV(new KeyParameter(aesKey.getKey()),dataToDecrypt.initialisationVector);    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));    cipher.init(false,keyWithIv);    byte[] cipherBytes=dataToDecrypt.encryptedBytes;    byte[] decryptedBytes=new byte[cipher.getOutputSize(cipherBytes.length)];    final int length1=cipher.processBytes(cipherBytes,0,cipherBytes.length,decryptedBytes,0);    final int length2=cipher.doFinal(decryptedBytes,length1);    return Arrays.copyOf(decryptedBytes,length1 + length2);  } catch (  Exception e) {    throw new KeyCrypterException("Could not decrypt bytes",e);  }}  }
class C{  public String boundvectorfile(){  return boundvectorfile;}  }
class C{  synchronized void hideSelectedFrames(){  Object[] vals=frameListDisplay.getSelectedValues();  for (int x=0; x < vals.length; x++) {    ((JFrame)(vals[x])).setVisible(false);  }  frameListDisplay.repaint();}  }
class C{  private static void SetObjectArrayElement(JNIEnvironment env,int arrayJREF,int index,int objectJREF){  if (traceJNI)   VM.sysWrite("JNI called: SetObjectArrayElement  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object[] sourceArray=(Object[])env.getJNIRef(arrayJREF);    Object elem=env.getJNIRef(objectJREF);    sourceArray[index]=elem;  } catch (  Throwable e) {    env.recordException(e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static boolean automaticProcessP(final SeedDB seedDB,final NewsDB.Record record){  if (record == null) {    return false;  }  if (record.category() == null) {    return true;  }  final long created=record.created().getTime();  final long duration=System.currentTimeMillis() - created;  String cat=record.category();switch (cat) {case CATEGORY_WIKI_UPDATE:case CATEGORY_BLOG_ADD:case CATEGORY_PROFILE_UPDATE:    if (duration > (3L * MILLISECONDS_PER_DAY)) {      return true;    }  break;case CATEGORY_CRAWL_START:if (duration > (3L * MILLISECONDS_PER_DAY)) {  final Seed seed=seedDB.get(record.originator());  if (seed == null)   return true;  try {    return (Integer.parseInt(seed.get(Seed.ISPEED,"-")) < 10);  } catch (  final NumberFormatException ee) {    return true;  }}break;case CATEGORY_TRANSLATION_ADD:case CATEGORY_TRANSLATION_VOTE_ADD:if (duration > (7L * MILLISECONDS_PER_DAY)) {return true;}break;default :if (duration > MILLISECONDS_PER_DAY) {return true;}}return false;}  }
class C{  public NotificationChain basicSetLowerVersion(DeclaredVersion newLowerVersion,NotificationChain msgs){  DeclaredVersion oldLowerVersion=lowerVersion;  lowerVersion=newLowerVersion;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.VERSION_CONSTRAINT__LOWER_VERSION,oldLowerVersion,newLowerVersion);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static String makeLabel(final Context context,final int pluralInt,final int number){  return context.getResources().getQuantityString(pluralInt,number,number);}  }
class C{  private ContainerPanel createContainerPanel(){  ContainerPanel containerPanel=new ContainerPanel();  containerPanel.setAnimated(false);  containerPanel.setMinimumSize(new Dimension(0,0));  character=new Character();  containerPanel.addRepaintable(character);  inventory=new SlotWindow("bag",3,4);  inventory.setAcceptedTypes(EntityMap.getClass("item",null,null));  inventory.setCloseable(false);  containerPanel.addRepaintable(inventory);  keyring=new KeyRing();  keyring.setAcceptedTypes(EntityMap.getClass("item",null,null));  containerPanel.addRepaintable(keyring);  userContext.addFeatureChangeListener(keyring);  spells=new Spells();  spells.setAcceptedTypes(EntityMap.getClass("spell",null,null));  containerPanel.addRepaintable(spells);  userContext.addFeatureChangeListener(spells);  return containerPanel;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[4];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    pts[0]=l.getLimit();    pts[2]=l.getLimit();    mTrans.pointValuesToPixel(pts);    pts[1]=mViewPortHandler.contentTop();    pts[3]=mViewPortHandler.contentBottom();    limitLinePath.moveTo(pts[0],pts[1]);    limitLinePath.lineTo(pts[2],pts[3]);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=l.getLineWidth();      float add=Utils.convertDpToPixel(4f);      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      float yOffset=Utils.calcTextHeight(mLimitLinePaint,label) + add / 2f;      if (l.getLabelPosition() == LimitLabelPosition.POS_RIGHT) {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentBottom() - add,mLimitLinePaint);      } else {        c.drawText(label,pts[0] + xOffset,mViewPortHandler.contentTop() + yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public boolean isArrayAccess(){  return arrayAccess;}  }
class C{  private void appendLoad(BasicBlock bb,IR ir){  if (DEBUG)   VM.sysWrite("Adding load to " + bb + "\n");  Instruction load=null;  if (ir.options.ADAPTIVE_PROCESSOR_SPECIFIC_COUNTER) {    if (ir.isHIR()) {      VM.sysFail("Not implemented yet.");    } else {      if (VM.VerifyAssertions)       VM._assert(ir.isLIR());      load=Load.create(INT_LOAD,cbsReg.copyRO(),ir.regpool.makeTROp(),IRTools.AC(AosEntrypoints.threadCBSField.getOffset()),new LocationOperand(AosEntrypoints.threadCBSField));      bb.appendInstruction(load);    }  } else {    if (ir.isHIR()) {      Operand offsetOp=new AddressConstantOperand(AosEntrypoints.globalCBSField.getOffset());      load=GetStatic.create(GETSTATIC,cbsReg.copyRO(),offsetOp,new LocationOperand(AosEntrypoints.globalCBSField));      bb.appendInstruction(load);    } else {      Instruction dummy=Load.create(INT_LOAD,null,null,null,null);      bb.appendInstruction(dummy);      load=Load.create(INT_LOAD,cbsReg.copyRO(),ir.regpool.makeJTOCOp(),IRTools.AC(AosEntrypoints.globalCBSField.getOffset()),new LocationOperand(AosEntrypoints.globalCBSField));      dummy.insertBefore(load);      dummy.remove();    }  }}  }
class C{  public void testMoveRenameFileSourceParentRoot() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE_NEW.name());  create(igfs,paths(DIR_NEW,SUBDIR_NEW),paths(file));  igfs.rename(file,FILE_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  public void addFile(String filename){synchronized (files) {    if (!files.contains(filename)) {      files.add(filename);    }  }}  }
class C{  public DefaultDiskStorage(File rootDirectory,int version,CacheErrorLogger cacheErrorLogger){  Preconditions.checkNotNull(rootDirectory);  mRootDirectory=rootDirectory;  mVersionDirectory=new File(mRootDirectory,getVersionSubdirectoryName(version));  mCacheErrorLogger=cacheErrorLogger;  recreateDirectoryIfVersionChanges();  mClock=SystemClock.get();}  }
class C{  @Override public V put(Float key,V value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  void startTLSReceived(boolean required){  if (required && config.getSecurityMode() == ConnectionConfiguration.SecurityMode.disabled) {    notifyConnectionError(new IllegalStateException("TLS required by server but not allowed by connection configuration"));    return;  }  if (config.getSecurityMode() == ConnectionConfiguration.SecurityMode.disabled) {    return;  }  try {    writer.write("<starttls xmlns=\"urn:ietf:params:xml:ns:xmpp-tls\"/>");    writer.flush();  } catch (  IOException e) {    notifyConnectionError(e);  }}  }
class C{  public void paintCheckBoxMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Iterable<Point2D> hull(){  Stack<Point2D> s=new Stack<Point2D>();  for (  Point2D p : hull)   s.push(p);  return s;}  }
class C{  private final ActivityRecord resetTaskIfNeededLocked(ActivityRecord taskTop,ActivityRecord newActivity){  boolean forceReset=(newActivity.info.flags & ActivityInfo.FLAG_CLEAR_TASK_ON_LAUNCH) != 0;  if (ACTIVITY_INACTIVE_RESET_TIME > 0 && taskTop.task.getInactiveDuration() > ACTIVITY_INACTIVE_RESET_TIME) {    if ((newActivity.info.flags & ActivityInfo.FLAG_ALWAYS_RETAIN_TASK_STATE) == 0) {      forceReset=true;    }  }  final TaskRecord task=taskTop.task;  ActivityRecord target=null;  int targetI=0;  int taskTopI=-1;  int replyChainEnd=-1;  int lastReparentPos=-1;  ActivityOptions topOptions=null;  boolean canMoveOptions=true;  for (int i=mHistory.size() - 1; i >= -1; i--) {    ActivityRecord below=i >= 0 ? mHistory.get(i) : null;    if (below != null && below.finishing) {      continue;    }    if (below != null && below.userId != taskTop.userId) {      break;    }    if (target == null) {      target=below;      targetI=i;      replyChainEnd=-1;      continue;    }    final int flags=target.info.flags;    final boolean finishOnTaskLaunch=(flags & ActivityInfo.FLAG_FINISH_ON_TASK_LAUNCH) != 0;    final boolean allowTaskReparenting=(flags & ActivityInfo.FLAG_ALLOW_TASK_REPARENTING) != 0;    if (target.task == task) {      if (taskTopI < 0) {        taskTopI=targetI;      }      if (below != null && below.task == task) {        final boolean clearWhenTaskReset=(target.intent.getFlags() & Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET) != 0;        if (!finishOnTaskLaunch && !clearWhenTaskReset && target.resultTo != null) {          if (replyChainEnd < 0) {            replyChainEnd=targetI;          }        } else         if (!finishOnTaskLaunch && !clearWhenTaskReset && allowTaskReparenting&& target.taskAffinity != null && !target.taskAffinity.equals(task.affinity)) {          ActivityRecord p=mHistory.get(0);          if (target.taskAffinity != null && target.taskAffinity.equals(p.task.affinity)) {            target.setTask(p.task,p.thumbHolder,false);            if (DEBUG_TASKS)             Slog.v(TAG,"Start pushing activity " + target + " out to bottom task "+ p.task);          } else {            mService.mCurTask++;            if (mService.mCurTask <= 0) {              mService.mCurTask=1;            }            target.setTask(new TaskRecord(mService.mCurTask,target.info,null),null,false);            target.task.affinityIntent=target.intent;            if (DEBUG_TASKS)             Slog.v(TAG,"Start pushing activity " + target + " out to new task "+ target.task);          }          mService.mWindowManager.setAppGroupId(target.appToken,task.taskId);          if (replyChainEnd < 0) {            replyChainEnd=targetI;          }          int dstPos=0;          ThumbnailHolder curThumbHolder=target.thumbHolder;          boolean gotOptions=!canMoveOptions;          for (int srcPos=targetI; srcPos <= replyChainEnd; srcPos++) {            p=mHistory.get(srcPos);            if (p.finishing) {              continue;            }            if (DEBUG_TASKS)             Slog.v(TAG,"Pushing next activity " + p + " out to target's task "+ target.task);            p.setTask(target.task,curThumbHolder,false);            curThumbHolder=p.thumbHolder;            canMoveOptions=false;            if (!gotOptions && topOptions == null) {              topOptions=p.takeOptionsLocked();              if (topOptions != null) {                gotOptions=true;              }            }            if (DEBUG_ADD_REMOVE) {              RuntimeException here=new RuntimeException("here");              here.fillInStackTrace();              Slog.i(TAG,"Removing and adding activity " + p + " to stack at "+ dstPos,here);            }            mHistory.remove(srcPos);            mHistory.add(dstPos,p);            mService.mWindowManager.moveAppToken(dstPos,p.appToken);            mService.mWindowManager.setAppGroupId(p.appToken,p.task.taskId);            dstPos++;            if (VALIDATE_TOKENS) {              validateAppTokensLocked();            }            i++;          }          if (taskTop == p) {            taskTop=below;          }          if (taskTopI == replyChainEnd) {            taskTopI=-1;          }          replyChainEnd=-1;        } else         if (forceReset || finishOnTaskLaunch || clearWhenTaskReset) {          if (clearWhenTaskReset) {            replyChainEnd=targetI + 1;            while (replyChainEnd < mHistory.size() && (mHistory.get(replyChainEnd)).task == task) {              replyChainEnd++;            }            replyChainEnd--;          } else           if (replyChainEnd < 0) {            replyChainEnd=targetI;          }          ActivityRecord p=null;          boolean gotOptions=!canMoveOptions;          for (int srcPos=targetI; srcPos <= replyChainEnd; srcPos++) {            p=mHistory.get(srcPos);            if (p.finishing) {              continue;            }            canMoveOptions=false;            if (!gotOptions && topOptions == null) {              topOptions=p.takeOptionsLocked();              if (topOptions != null) {                gotOptions=true;              }            }            if (finishActivityLocked(p,srcPos,Activity.RESULT_CANCELED,null,"reset",false)) {              replyChainEnd--;              srcPos--;            }          }          if (taskTop == p) {            taskTop=below;          }          if (taskTopI == replyChainEnd) {            taskTopI=-1;          }          replyChainEnd=-1;        } else {          replyChainEnd=-1;        }      } else {        replyChainEnd=-1;      }    } else     if (target.resultTo != null && (below == null || below.task == target.task)) {      if (replyChainEnd < 0) {        replyChainEnd=targetI;      }    } else     if (taskTopI >= 0 && allowTaskReparenting && task.affinity != null && task.affinity.equals(target.taskAffinity)) {      if (forceReset || finishOnTaskLaunch) {        if (replyChainEnd < 0) {          replyChainEnd=targetI;        }        ActivityRecord p=null;        if (DEBUG_TASKS)         Slog.v(TAG,"Finishing task at index " + targetI + " to "+ replyChainEnd);        for (int srcPos=targetI; srcPos <= replyChainEnd; srcPos++) {          p=mHistory.get(srcPos);          if (p.finishing) {            continue;          }          if (finishActivityLocked(p,srcPos,Activity.RESULT_CANCELED,null,"reset",false)) {            taskTopI--;            lastReparentPos--;            replyChainEnd--;            srcPos--;          }        }        replyChainEnd=-1;      } else {        if (replyChainEnd < 0) {          replyChainEnd=targetI;        }        if (DEBUG_TASKS)         Slog.v(TAG,"Reparenting task at index " + targetI + " to "+ replyChainEnd);        for (int srcPos=replyChainEnd; srcPos >= targetI; srcPos--) {          ActivityRecord p=mHistory.get(srcPos);          if (p.finishing) {            continue;          }          if (lastReparentPos < 0) {            lastReparentPos=taskTopI;            taskTop=p;          } else {            lastReparentPos--;          }          if (DEBUG_ADD_REMOVE) {            RuntimeException here=new RuntimeException("here");            here.fillInStackTrace();            Slog.i(TAG,"Removing and adding activity " + p + " to stack at "+ lastReparentPos,here);          }          mHistory.remove(srcPos);          p.setTask(task,null,false);          mHistory.add(lastReparentPos,p);          if (DEBUG_TASKS)           Slog.v(TAG,"Pulling activity " + p + " from "+ srcPos+ " to "+ lastReparentPos+ " in to resetting task "+ task);          mService.mWindowManager.moveAppToken(lastReparentPos,p.appToken);          mService.mWindowManager.setAppGroupId(p.appToken,p.task.taskId);          if (VALIDATE_TOKENS) {            validateAppTokensLocked();          }        }        replyChainEnd=-1;        if (target.info.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {          for (int j=lastReparentPos - 1; j >= 0; j--) {            ActivityRecord p=mHistory.get(j);            if (p.finishing) {              continue;            }            if (p.intent.getComponent().equals(target.intent.getComponent())) {              if (finishActivityLocked(p,j,Activity.RESULT_CANCELED,null,"replace",false)) {                taskTopI--;                lastReparentPos--;              }            }          }        }      }    } else     if (below != null && below.task != target.task) {      replyChainEnd=-1;    }    target=below;    targetI=i;  }  if (topOptions != null) {    if (taskTop != null) {      taskTop.updateOptionsLocked(topOptions);    } else {      topOptions.abort();    }  }  return taskTop;}  }
class C{  private Object optimalGet(Object k){  Object object=null;  try {    object=getValueInVMOrDiskWithoutFaultIn(k);    if (object != null && object instanceof CachedDeserializable) {      object=((CachedDeserializable)object).getDeserializedValue(this,this.getRegionEntry(k));    }  } catch (  EntryNotFoundException ok) {  }  if (object == Token.TOMBSTONE) {    object=null;  }  return object;}  }
class C{  private void attemptAuthentication(boolean getPasswdFromSharedState) throws LoginException {  String encryptedPassword=null;  getUsernamePassword(getPasswdFromSharedState);  try {    InitialContext iCtx=new InitialContext();    ctx=(DirContext)iCtx.lookup(userProvider);    SearchControls controls=new SearchControls();    NamingEnumeration<SearchResult> ne=ctx.search("","(uid=" + username + ")",controls);    if (ne.hasMore()) {      SearchResult result=ne.next();      Attributes attributes=result.getAttributes();      Attribute pwd=attributes.get(USER_PWD);      String encryptedPwd=new String((byte[])pwd.get(),"UTF8");      encryptedPassword=encryptedPwd.substring(CRYPT.length());      if (verifyPassword(encryptedPassword,new String(password)) == true) {        if (debug)         System.out.println("\t\t[JndiLoginModule] " + "attemptAuthentication() succeeded");      } else {        if (debug)         System.out.println("\t\t[JndiLoginModule] " + "attemptAuthentication() failed");        throw new FailedLoginException("Login incorrect");      }      if (storePass && !sharedState.containsKey(NAME) && !sharedState.containsKey(PWD)) {        sharedState.put(NAME,username);        sharedState.put(PWD,password);      }      userPrincipal=new UnixPrincipal(username);      Attribute uid=attributes.get(USER_UID);      String uidNumber=(String)uid.get();      UIDPrincipal=new UnixNumericUserPrincipal(uidNumber);      if (debug && uidNumber != null) {        System.out.println("\t\t[JndiLoginModule] " + "user: '" + username + "' has UID: "+ uidNumber);      }      Attribute gid=attributes.get(USER_GID);      String gidNumber=(String)gid.get();      GIDPrincipal=new UnixNumericGroupPrincipal(gidNumber,true);      if (debug && gidNumber != null) {        System.out.println("\t\t[JndiLoginModule] " + "user: '" + username + "' has GID: "+ gidNumber);      }      ctx=(DirContext)iCtx.lookup(groupProvider);      ne=ctx.search("",new BasicAttributes("memberUid",username));      while (ne.hasMore()) {        result=ne.next();        attributes=result.getAttributes();        gid=attributes.get(GROUP_ID);        String suppGid=(String)gid.get();        if (!gidNumber.equals(suppGid)) {          UnixNumericGroupPrincipal suppPrincipal=new UnixNumericGroupPrincipal(suppGid,false);          supplementaryGroups.add(suppPrincipal);          if (debug && suppGid != null) {            System.out.println("\t\t[JndiLoginModule] " + "user: '" + username + "' has Supplementary Group: "+ suppGid);          }        }      }    } else {      if (debug) {        System.out.println("\t\t[JndiLoginModule]: User not found");      }      throw new FailedLoginException("User not found");    }  } catch (  NamingException ne) {    if (debug) {      System.out.println("\t\t[JndiLoginModule]:  User not found");      ne.printStackTrace();    }    throw new FailedLoginException("User not found");  }catch (  java.io.UnsupportedEncodingException uee) {    if (debug) {      System.out.println("\t\t[JndiLoginModule]:  " + "password incorrectly encoded");      uee.printStackTrace();    }    throw new LoginException("Login failure due to incorrect " + "password encoding in the password database");  }}  }
class C{  Object findNextMatch(String substring){  int max=list.size();  if (max == 0) {    return null;  }  int counter=index;  do {    Object value=list.get(counter);    String string=value.toString();    if (string != null && string.startsWith(substring)) {      return value;    }    counter=(counter + 1) % max;  } while (counter != index);  return null;}  }
class C{  public FrameLayout create(){  if (mCreatedOttLayer != null) {    destroy();  }  if (mWeakActivity == null) {    throw new OverTheTopLayerException("Could not create the layer as not activity reference was provided.");  }  Activity activity=mWeakActivity.get();  if (activity != null) {    ViewGroup attachingView=null;    if (mWeakRootView != null && mWeakRootView.get() != null) {      attachingView=mWeakRootView.get();    } else {      attachingView=(ViewGroup)activity.findViewById(android.R.id.content);    }    ImageView imageView=new ImageView(activity);    imageView.setImageBitmap(mBitmap);    int minWidth=mBitmap.getWidth();    int minHeight=mBitmap.getHeight();    imageView.measure(View.MeasureSpec.makeMeasureSpec(minWidth,View.MeasureSpec.AT_MOST),View.MeasureSpec.makeMeasureSpec(minHeight,View.MeasureSpec.AT_MOST));    FrameLayout.LayoutParams params=(FrameLayout.LayoutParams)imageView.getLayoutParams();    if (params == null) {      params=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,FrameLayout.LayoutParams.WRAP_CONTENT,Gravity.TOP);      imageView.setLayoutParams(params);    }    int xPosition=mDrawLocation[0];    int yPosition=mDrawLocation[1];    params.width=minWidth;    params.height=minHeight;    params.leftMargin=xPosition;    params.topMargin=yPosition;    imageView.setLayoutParams(params);    FrameLayout ottLayer=new FrameLayout(activity);    FrameLayout.LayoutParams topLayerParam=new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT,Gravity.TOP);    ottLayer.setLayoutParams(topLayerParam);    ottLayer.addView(imageView);    attachingView.addView(ottLayer);    mCreatedOttLayer=ottLayer;  } else {    Log.e(OverTheTopLayer.class.getSimpleName(),"Could not create the layer. Reference to the activity was lost");  }  return mCreatedOttLayer;}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean equals(Object obj){  if (!(SpatialObjectPair.class.isInstance(obj))) {    return false;  }  SpatialObjectPair other=(SpatialObjectPair)obj;  if (!isExpandable) {    return this.entry1.equals(other.entry1);  } else {    return this.entry1.equals(other.entry1) && this.entry2.equals(other.entry2);  }}  }
class C{  private Marketplace loadMarketplace(String marketplaceId) throws ObjectNotFoundException {  Marketplace marketplace=new Marketplace(marketplaceId);  return (Marketplace)dm.getReferenceByBusinessKey(marketplace);}  }
class C{  Route flipTlsMode(){  return new Route(address,proxy,inetSocketAddress,!modernTls);}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  public void environmentConfigure(EnvironmentClassLoader loader){}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){}  }
class C{  public void propagateAuthentication(final CommonsDataLoader commonsDataLoader){  for (  final Map.Entry<HttpHost,UsernamePasswordCredentials> credentialsEntry : authenticationMap.entrySet()) {    final HttpHost httpHost=credentialsEntry.getKey();    final UsernamePasswordCredentials credentials=credentialsEntry.getValue();    commonsDataLoader.addAuthentication(httpHost.getHostName(),httpHost.getPort(),httpHost.getSchemeName(),credentials.getUserName(),credentials.getPassword());  }}  }
class C{  @Override public void onDownloadProgress(DownloadProgressInfo progress){  mAverageSpeed.setText(getString(R.string.kilobytes_per_second,Helpers.getSpeedString(progress.mCurrentSpeed)));  mTimeRemaining.setText(getString(R.string.time_remaining,Helpers.getTimeRemaining(progress.mTimeRemaining)));  progress.mOverallTotal=progress.mOverallTotal;  mPB.setMax((int)(progress.mOverallTotal >> 8));  mPB.setProgress((int)(progress.mOverallProgress >> 8));  mProgressPercent.setText(Long.toString(progress.mOverallProgress * 100 / progress.mOverallTotal) + "%");  mProgressFraction.setText(Helpers.getDownloadProgressString(progress.mOverallProgress,progress.mOverallTotal));}  }
class C{  public DistributionBasedConfig(List<Integer> degrees){  super(degrees);}  }
class C{  public void testNormal(){  final PlatformDefaultJavaObjectFactory factory=new PlatformDefaultJavaObjectFactory();  Map<String,Object> props=new HashMap<>();  props.put("fBoolean",true);  props.put("fByte",(byte)1);  props.put("fShort",(short)2);  props.put("fChar",'3');  props.put("fInt",4);  props.put("fLong",5L);  props.put("fFloat",6.6f);  props.put("fDouble",7.7d);  UUID obj=UUID.randomUUID();  props.put("fObj",obj);  props.put("fIntBoxed",10);  factory.initialize(CLS_NAME,props);  Object val=factory.create();  TestJavaObject expVal=new TestJavaObject().setBoolean(true).setByte((byte)1).setShort((short)2).setChar('3').setInt(4).setLong(5L).setFloat(6.6f).setDouble(7.7d).setObject(obj).setIntBoxed(10);  assertEquals(expVal,val);}  }
class C{  void writeComment(String string) throws IOException {  write("<!--");  if (string != null) {    write(string);  }  write("-->");  writeLineSeparator();  indentSmart();}  }
class C{  public static void execute(ExecutablePool pool,int id,EnumInfo ei){  AbstractOp op=new AddPdxEnumOpImpl(id,ei);  pool.execute(op);  ;}  }
class C{  public static void exportAllAsGIF(final Graph2DView view,final String filename) throws IOException {  final y.io.GIFIOHandler gif=new y.io.GIFIOHandler();  gif.setAntialiasingEnabled(true);  exportGraphToImageFileFormat(view.getGraph2D(),gif,filename,gif.createDefaultGraph2DView(view.getGraph2D()));}  }
class C{  public static boolean interfaceExists(String hostname){  try {    Class<?> networkInterfaceClass=Class.forName("java.net.NetworkInterface");    return networkInterfaceClass.getMethod("getByName",(Class[])null).invoke(networkInterfaceClass,new Object[]{hostname}) != null;  } catch (  Throwable t) {    return false;  }}  }
class C{  public SecurityTokenServiceImpl(SoapBinding binding,SecurityTokenServiceConfig config){  ValidateUtil.validateNotNull(binding,"Soap binding");  ValidateUtil.validateNotNull(config,"STS configuration");  this.binding=binding;  this.stsConfig=config;  this.parserProvider=new RequestParserFactoryProvider(stsConfig);}  }
class C{  public void testTxLocalOptimisticRepeatableRead() throws Exception {  checkTx(LOCAL,OPTIMISTIC,REPEATABLE_READ);}  }
class C{  public void startElement(String uri,String lname,String qname,org.xml.sax.Attributes attributes) throws org.xml.sax.SAXException {  if (uri == null) {    String msg=Logging.getMessage("nullValue.URIIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (lname == null) {    String msg=Logging.getMessage("nullValue.LNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (qname == null) {    String msg=Logging.getMessage("nullValue.QNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (attributes == null) {    String msg=Logging.getMessage("nullValue.org.xml.sax.AttributesIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.currentElement != null)   this.currentElement.startElement(uri,lname,qname,attributes); else   this.doStartElement(uri,lname,qname,attributes);}  }
class C{  public void removeSessionParticipant(String sessionParticipantIndex){  Validate.notNull(sessionParticipantIndex);  if (participants.containsKey(sessionParticipantIndex)) {    String relyingParty=this.participants.get(sessionParticipantIndex).getRelyingPartyUrl();    this.participants.remove(sessionParticipantIndex);    this.participantsByUrl.remove(relyingParty);  }}  }
class C{  public double areaUnderROC(int classIndex){  return m_delegate.areaUnderROC(classIndex);}  }
class C{  private void sendEvent(TriangulationProcessEvent event){  for (  TriangulationProcessListener l : _listeners) {    l.triangulationEvent(event,_tcx.getTriangulatable());  }}  }
class C{  public static File buildPath(File base,String... segments){  File cur=base;  for (  String segment : segments) {    if (cur == null) {      cur=new File(segment);    } else {      cur=new File(cur,segment);    }  }  return cur;}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  super(false,httpPort,httpsPort);}  }
class C{  @Inline @Uninterruptible public static void makeLogged(ObjectReference object){  Word value=VM.objectModel.readAvailableBitsWord(object);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(value.and(LOGGING_MASK).NE(LOGGED));  VM.objectModel.writeAvailableBitsWord(object,value.and(LOGGING_MASK.not()));}  }
class C{  @Override public ServiceHost start() throws Throwable {  super.start();  startDefaultCoreServicesSynchronously();  super.startService(new RootNamespaceService());  super.startService(new SimpleStatelessService());  super.startService(SimpleStatefulService.createFactory(PerfUtils.SimpleState.class));  super.startService(PersistedService.createFactory(PerfUtils.SimpleState.class));  super.startService(ReplicatedService.createFactory(PerfUtils.SimpleState.class));  super.startService(OwnerSelectedService.createFactory(PerfUtils.SimpleState.class));  super.startService(FullCapService.createFactory(PerfUtils.SimpleState.class));  super.startFactory(ExampleService.class,null);  return this;}  }
class C{  public void testIntersectRandom(){  int iters=atLeast(10);  for (int i=0; i < iters; i++) {    Polygon polygon=nextPolygon();    Polygon2D impl=Polygon2D.create(polygon);    for (int j=0; j < 100; j++) {      Rectangle rectangle=GeoTestUtil.nextBoxNear(polygon);      if (impl.relate(rectangle.minLat,rectangle.maxLat,rectangle.minLon,rectangle.maxLon) == Relation.CELL_OUTSIDE_QUERY) {        for (int k=0; k < 1000; k++) {          double point[]=GeoTestUtil.nextPointNear(rectangle);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertFalse(impl.contains(latitude,longitude));          }        }        for (int k=0; k < 100; k++) {          double point[]=GeoTestUtil.nextPointNear(polygon);          double latitude=point[0];          double longitude=point[1];          if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {            assertFalse(impl.contains(latitude,longitude));          }        }      }    }  }}  }
class C{  protected void estimateDensities(Relation<O> rel,KNNQuery<O> knnq,final DBIDs ids,WritableDataStore<double[]> densities){  final int dim=dimensionality(rel);  final int knum=kmax + 1 - kmin;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    densities.put(iter,new double[knum]);  }  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Computing densities",ids.size(),LOG) : null;  double iminbw=(minBandwidth > 0.) ? 1. / (minBandwidth * scale) : Double.POSITIVE_INFINITY;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    KNNList neighbors=knnq.getKNNForDBID(iter,kmax + 1);    int k=1, idx=0;    double sum=0.;    for (DoubleDBIDListIter kneighbor=neighbors.iter(); k <= kmax && kneighbor.valid(); kneighbor.advance(), k++) {      sum+=kneighbor.doubleValue();      if (k < kmin) {        continue;      }      final double ibw=Math.min(k / (sum * scale),iminbw);      final double sca=MathUtil.powi(ibw,dim);      for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {        final double dens;        if (sca < Double.POSITIVE_INFINITY) {          dens=sca * kernel.density(neighbor.doubleValue() * ibw);        } else {          dens=neighbor.doubleValue() == 0. ? 1. : 0.;        }        densities.get(neighbor)[idx]+=dens;        if (dens < CUTOFF) {          break;        }      }      ++idx;    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);}  }
class C{  public void addAccount(Activity activity,int result){  activity.startActivityForResult(createAddAccountIntent(),result);}  }
class C{  public void paintTextPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public Request<Workspace> withName(String name){  checkNotNull(name);  final Invocation request=getWebTarget().path(KEY_DELIMITER + name).request().accept(APPLICATION_JSON).buildGet();  return new SimpleRequest<Workspace>(request,DefaultWorkspace.class,getAuthenticationManager());}  }
class C{  public FillinOptionNotSupportedException(final String message){  super(message);}  }
class C{  public PrefixExpression newPrefixExpression(){  PrefixExpression result=new PrefixExpression(this);  return result;}  }
class C{  private static void process(final Player player,final ZoneEventType type){  final String key=type.name().toLowerCase();  if (player.getKeyedSlot("!tutorial",key) == null) {    player.setKeyedSlot("!tutorial",key,"1");    new DelayedPlayerTextSender(player,type.getMessage(),2);  }}  }
class C{  private QueryBuilderKraken parseExplain(){  Token token=scanToken();  if (token != Token.SELECT) {    throw error("Explain requires SELECT at {0}",token);  }  return parseSelect(new QueryBuilderExplain(_tableManager,_sql));}  }
class C{  private void handleEnvRemoveButtonSelected(){  IStructuredSelection sel=(IStructuredSelection)environmentTable.getSelection();  try {    for (Iterator<?> i=sel.iterator(); i.hasNext(); ) {      EnvironmentVariable var=(EnvironmentVariable)i.next();      getFieldValue().envVars.remove(var.getName());    }  }  finally {  }  notifyFieldChanged();}  }
class C{  private Token matchOne(Set keyWords) throws ParserException, IOException {  if ((lookahead.ttype == StreamTokenizer.TT_WORD) && keyWords.contains(lookahead.sval)) {    Token t=lookahead;    nextToken();    return t;  }  throw new SyntaxException(st.lineno(),keyWords,lookahead);}  }
class C{  public boolean isEmpty(){  return status == EMPTY;}  }
class C{  public void draw(GL10 gl){  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glColor4f(color[0],color[1],color[2],color[3]);  gl.glVertexPointer(COORDS_PER_VERTEX,GL10.GL_FLOAT,0,vertexBuffer);  gl.glDrawElements(GL10.GL_TRIANGLES,drawOrder.length,GL10.GL_UNSIGNED_SHORT,drawListBuffer);  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);}  }
class C{  @Override public int intValue(){  return numerator / denominator;}  }
class C{  public SimpleGrouperAiringNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,String inGroupType,Object inGroupObject,java.util.Vector inDescendants,boolean channelPrimary){  super(inSource,inParent,inGroupLabel,inGroupType,inGroupObject);  descendants=inDescendants == null ? new java.util.Vector() : inDescendants;  this.channelPrimary=channelPrimary;}  }
class C{  public static java.sql.Timestamp toTimestamp(String dateTime){  java.util.Date newDate=toDate(dateTime);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  protected HexEscapeSequenceImpl(){  super();}  }
class C{  public String globalInfo(){  return "This Bayes Network learning algorithm uses cross validation to estimate " + "classification accuracy.";}  }
class C{  protected void fireZoomChanged(NavigationEvent<Double> event){  for (  NavigationListener l : navigationListeners) {    l.zoomChanged(event);  }}  }
class C{  public boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  protected int postOperationFix(int headIdx,List<Tree<String>> daughterTrees){  return headIdx;}  }
class C{  protected AbstractContinousDistribution(){}  }
class C{  private void doQuery() throws Exception {  long transactionId=fed.getTransactionService().newTx(ITx.READ_COMMITTED);  try {    final AbstractTripleStore tripleStore=openTripleStore(fed,transactionId);    final BigdataSail sail=new BigdataSail(tripleStore);    final Repository repo=new BigdataSailRepository(sail);    repo.initialize();    RepositoryConnection cxn=repo.getConnection();    try {      final TupleQuery tupleQuery=cxn.prepareTupleQuery(QueryLanguage.SPARQL,query);      tupleQuery.setIncludeInferred(true);      TupleQueryResult result=tupleQuery.evaluate();      int resultCount=0;      while (result.hasNext()) {        BindingSet bindingSet=result.next();        resultCount++;      }      log.info(resultCount + " results");    }  finally {      cxn.close();    }    repo.shutDown();  }  finally {    fed.getTransactionService().abort(transactionId);  }}  }
class C{  public void deleteByIdTipoDocVit(String idTipoDocVit){  String qual=new StringBuffer().append("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_TIPO_DOC,idTipoDocVit)).toString();  deleteVO(qual,TABLE_NAME);}  }
class C{  public void log(Level level,String sourceClass,String sourceMethod,String msg,Object[] params){  params=chomp(params);  if (!(level.equals(Level.WARNING) && msg.equals("migrateDoNotInterrupt")))   m_logger.logp(level,sourceClass,sourceMethod,msg,params);  output(level,sourceClass,sourceMethod,msg,params);  if (level.intValue() == Level.SEVERE.intValue())   flush();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.SCRIPT_IM__SYMBOL_TABLE:    return basicSetSymbolTable(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean blockHasLessChildrenThan(int maxChildren){  int counter=-2;  ASTNode childNode=myNode.getFirstChildNode();  while (childNode != null) {    IElementType nodeType=childNode.getElementType();    if (nodeType != TokenType.WHITE_SPACE && nodeType != COMMENT_LINE && nodeType != SEMICOLON) {      if (++counter >= maxChildren) {        return false;      }    }    childNode=childNode.getTreeNext();  }  return true;}  }
class C{  private static ChunkIndex parseSidx(ParsableByteArray atom,long inputPosition){  atom.setPosition(Atom.HEADER_SIZE);  int fullAtom=atom.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  atom.skipBytes(4);  long timescale=atom.readUnsignedInt();  long earliestPresentationTime;  long offset=inputPosition;  if (version == 0) {    earliestPresentationTime=atom.readUnsignedInt();    offset+=atom.readUnsignedInt();  } else {    earliestPresentationTime=atom.readUnsignedLongToLong();    offset+=atom.readUnsignedLongToLong();  }  atom.skipBytes(2);  int referenceCount=atom.readUnsignedShort();  int[] sizes=new int[referenceCount];  long[] offsets=new long[referenceCount];  long[] durationsUs=new long[referenceCount];  long[] timesUs=new long[referenceCount];  long time=earliestPresentationTime;  long timeUs=Util.scaleLargeTimestamp(time,C.MICROS_PER_SECOND,timescale);  for (int i=0; i < referenceCount; i++) {    int firstInt=atom.readInt();    int type=0x80000000 & firstInt;    if (type != 0) {      throw new IllegalStateException("Unhandled indirect reference");    }    long referenceDuration=atom.readUnsignedInt();    sizes[i]=0x7fffffff & firstInt;    offsets[i]=offset;    timesUs[i]=timeUs;    time+=referenceDuration;    timeUs=Util.scaleLargeTimestamp(time,C.MICROS_PER_SECOND,timescale);    durationsUs[i]=timeUs - timesUs[i];    atom.skipBytes(4);    offset+=sizes[i];  }  return new ChunkIndex(sizes,offsets,durationsUs,timesUs);}  }
class C{  public Observable<String> retry(Observable<String> data){  return data.retry();}  }
