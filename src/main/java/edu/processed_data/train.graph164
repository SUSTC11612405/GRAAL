class C{  @SuppressWarnings("unchecked") public static Iterator<BOp> postOrderIterator(final BOp op){  return new Striterator(postOrderIterator2(op)).append(new SingleValueIterator(op));}  }
class C{  public boolean skipReferral(){  if (debug)   System.out.println("LdapReferralException.skipReferral");  skipThisReferral=true;  try {    getNextReferral();  } catch (  ReferralException e) {  }  return (hasMoreReferrals() || hasMoreReferralExceptions());}  }
class C{  public Intent putExtra(String name,short[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putShortArray(name,value);  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.605 -0500",hash_original_method="C1FAFD7F8C25A27903905826E99B3CB4",hash_generated_method="DD04442C13079199BDA087C439488FE5") private Directory(){}  }
class C{  @Override public int clipSecondaryFacing(int dir){  if (isValidSecondaryFacing(dir)) {    return dir;  }  final int rotate=(dir + (6 - getFacing())) % 6;  return rotate >= 3 ? (getFacing() + 5) % 6 : (getFacing() + 1) % 6;}  }
class C{  public final void reset(){  m_lastChunk=0;  m_firstFree=0;  FastStringBuffer innermost=this;  while (innermost.m_innerFSB != null) {    innermost=innermost.m_innerFSB;  }  m_chunkBits=innermost.m_chunkBits;  m_chunkSize=innermost.m_chunkSize;  m_chunkMask=innermost.m_chunkMask;  m_innerFSB=null;  m_array=new char[16][0];  m_array[0]=new char[m_chunkSize];}  }
class C{  public String query(String request) throws Exception {  return getResponse(new HttpGet(getBaseURL() + request));}  }
class C{  public UploadSingleInitiationRequest createUploadSingleInitiationRequest(String sourceNamespaceCode,String sourceBusinessObjectDefinitionName,String sourceBusinessObjectFormatUsage,String sourceBusinessObjectFormatFileType,Integer sourceBusinessObjectFormatVersion,String targetNamespaceCode,String targetBusinessObjectDefinitionName,String targetBusinessObjectFormatUsage,String targetBusinessObjectFormatFileType,Integer targetBusinessObjectFormatVersion,String fileName){  UploadSingleInitiationRequest request=new UploadSingleInitiationRequest();  request.setSourceBusinessObjectFormatKey(new BusinessObjectFormatKey(sourceNamespaceCode,sourceBusinessObjectDefinitionName,sourceBusinessObjectFormatUsage,sourceBusinessObjectFormatFileType,sourceBusinessObjectFormatVersion));  request.setTargetBusinessObjectFormatKey(new BusinessObjectFormatKey(targetNamespaceCode,targetBusinessObjectDefinitionName,targetBusinessObjectFormatUsage,targetBusinessObjectFormatFileType,targetBusinessObjectFormatVersion));  request.setBusinessObjectDataAttributes(businessObjectDefinitionServiceTestHelper.getNewAttributes());  request.setFile(new File(fileName,AbstractServiceTest.FILE_SIZE_1_KB));  return request;}  }
class C{  private void safeDamageRange(final Position p0,final Position p1){  safeDamager.damageRange(p0,p1);}  }
class C{  public void clear(){  trace=new ExecutionTraceProxy();  BooleanHelper.clearStack();  num_statements=0;}  }
class C{  public boolean isManagingComponent(Component c){  return scrConstrMap.containsKey(c);}  }
class C{  public static TimeInstant readFrom(final Deserializer deserializer,final String label){  return new TimeInstant(deserializer.readInt(label));}  }
class C{  private static boolean equalsHandlesNulls(Object a,Object b){  return (a == null) ? (b == null) : a.equals(b);}  }
class C{  public void warn(Object message){}  }
class C{  private void _findByName(List target,List source,String name){  for (int i=0; i < source.size(); i++) {    Object o=source.get(i);    if (o instanceof Map) {      _findByName(target,(Map)o,name);    } else     if (o instanceof List) {      _findByName(target,(List)o,name);    }  }}  }
class C{  public void keyReleased(KeyEvent e){}  }
class C{  private void updateActions(){  if (leftActionGroup != null) {    List<Utils.VisibleActionGroup> newLeftVisibleGroupActions=Utils.renderActionGroup(leftActionGroup,presentationFactory,actionManager,managerProvider.get());    if (newLeftVisibleGroupActions != null && !leftVisibleGroupActions.equals(newLeftVisibleGroupActions)) {      leftVisibleGroupActions=newLeftVisibleGroupActions;      leftToolbar.clear();      leftToolbar.add(createToolbarPart(leftVisibleGroupActions));    }  }  if (centerActionGroup != null) {    List<Utils.VisibleActionGroup> newCenterVisibleGroupActions=Utils.renderActionGroup(centerActionGroup,presentationFactory,actionManager,managerProvider.get());    if (newCenterVisibleGroupActions != null && !centerVisibleGroupActions.equals(newCenterVisibleGroupActions)) {      centerVisibleGroupActions=newCenterVisibleGroupActions;      centerToolbar.clear();      centerToolbar.add(createToolbarPart(centerVisibleGroupActions));    }  }  if (rightActionGroup != null) {    List<Utils.VisibleActionGroup> newRightVisibleGroupActions=Utils.renderActionGroup(rightActionGroup,presentationFactory,actionManager,managerProvider.get());    if (newRightVisibleGroupActions != null && !rightVisibleGroupActions.equals(newRightVisibleGroupActions)) {      rightVisibleGroupActions=newRightVisibleGroupActions;      rightToolbar.clear();      rightToolbar.add(createToolbarPart(rightVisibleGroupActions));    }  }}  }
class C{  public Builder deleteNickName(){  deleteFields.add("nickName");  return this;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  protected void doReadObject(ObjectInputStream input) throws IOException, ClassNotFoundException {  this.keyType=input.readInt();  this.valueType=input.readInt();  this.purgeValues=input.readBoolean();  this.loadFactor=input.readFloat();  int capacity=input.readInt();  init();  data=new HashEntry[capacity];  while (true) {    Object key=input.readObject();    if (key == null) {      break;    }    Object value=input.readObject();    put(key,value);  }  threshold=calculateThreshold(data.length,loadFactor);}  }
class C{  private ArrayDequeSpliterator(ArrayDeque<E> deq,int origin,int fence){  this.deq=deq;  this.index=origin;  this.fence=fence;}  }
class C{  protected int index(int row,int column){  return rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  @Override public RuntimeAnnotationHandler scan(Class<?> clazz){  if (delegate != null) {    return delegate.scan(clazz);  }  return null;}  }
class C{  @Override public V remove(Object key){  if (key == null) {    key=NULL_OBJECT;  }  boolean hashedOk;  int index, next, hash;  Object result, object;  index=next=findIndex(key,elementData);  if (elementData[index] != key) {    return null;  }  result=elementData[index + 1];  int length=elementData.length;  while (true) {    next=(next + 2) % length;    object=elementData[next];    if (object == null) {      break;    }    hash=getModuloHash(object,length);    hashedOk=hash > index;    if (next < index) {      hashedOk=hashedOk || (hash <= next);    } else {      hashedOk=hashedOk && (hash <= next);    }    if (!hashedOk) {      elementData[index]=object;      elementData[index + 1]=elementData[next + 1];      index=next;    }  }  size--;  modCount++;  elementData[index]=null;  elementData[index + 1]=null;  return massageValue(result);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void outputAnnotationIndex(PrintWriter writer){  for (  String ann : annotationIndex.keySet()) {    writer.print(ann);    writer.print(": ");    Set<String> classes=annotationIndex.get(ann);    Iterator<String> it=classes.iterator();    while (it.hasNext()) {      writer.print(it.next());      if (it.hasNext()) {        writer.print(", ");      }    }    writer.println();  }}  }
class C{  public boolean isAnimating(){  int size=anims.size();  if (size == 0) {    return false;  }  if (size > 1) {    return true;  }  return anims.get(0).isInProgress();}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  updateTimer.purge();switch (item.getItemId()) {case R.id.day_night_mode:    prefs.edit().putBoolean(NIGHT_MODE,!isNightMode()).apply();  return true;case R.id.secure_connect_scan:setMode(MODE.ONLINE);return true;case R.id.reset_preselections:clearPreselections();recreate();return true;case R.id.disconnect:if (mCommService != null) mCommService.stop();setMode(MODE.OFFLINE);return true;case R.id.settings:Intent settingsIntent=new Intent(this,SettingsActivity.class);startActivityForResult(settingsIntent,REQUEST_SETTINGS);return true;case R.id.chart_selected:setDataViewMode(DATA_VIEW_MODE.CHART);return true;case R.id.hud_selected:setDataViewMode(DATA_VIEW_MODE.HEADUP);return true;case R.id.dashboard_selected:setDataViewMode(DATA_VIEW_MODE.DASHBOARD);return true;case R.id.filter_selected:setDataViewMode(DATA_VIEW_MODE.FILTERED);return true;case R.id.unfilter_selected:setDataViewMode(DATA_VIEW_MODE.LIST);return true;case R.id.save:fileHelper.saveDataThreaded();return true;case R.id.load:setMode(MODE.FILE);return true;case R.id.service_none:setObdService(ObdProt.OBD_SVC_NONE,item.getTitle());return true;case R.id.service_data:setObdService(ObdProt.OBD_SVC_DATA,item.getTitle());return true;case R.id.service_vid_data:setObdService(ObdProt.OBD_SVC_VEH_INFO,item.getTitle());return true;case R.id.service_freezeframes:setObdService(ObdProt.OBD_SVC_FREEZEFRAME,item.getTitle());return true;case R.id.service_codes:setObdService(ObdProt.OBD_SVC_READ_CODES,item.getTitle());return true;case R.id.service_permacodes:setObdService(ObdProt.OBD_SVC_PERMACODES,item.getTitle());return true;case R.id.service_pendingcodes:setObdService(ObdProt.OBD_SVC_PENDINGCODES,item.getTitle());return true;case R.id.service_clearcodes:clearObdFaultCodes();setObdService(ObdProt.OBD_SVC_READ_CODES,item.getTitle());return true;}return super.onOptionsItemSelected(item);}  }
class C{  public final double perClass(int classIndex){  return m_perClass[classIndex];}  }
class C{  private void linearScan(Relation<? extends O> relation,DBIDIter iter,O obj,double range,ModifiableDoubleDBIDList result){  while (iter.valid()) {    final double similarity=rawsim.similarity(obj,relation.get(iter));    if (similarity >= range) {      result.add(similarity,iter);    }    iter.advance();  }}  }
class C{  public static void distanceBetween(double startLatitude,double startLongitude,double endLatitude,double endLongitude,float[] results){  if (results == null || results.length < 1) {    throw new IllegalArgumentException("results is null or has length < 1");  }  computeDistanceAndBearing(startLatitude,startLongitude,endLatitude,endLongitude,results);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  panel.wasModified(evt);  if (editor != null)   editor.setValue(targetBean);  if (beanBox != null)   beanBox.beanChanged(targetBean,evt.getPropertyName());}  }
class C{  private void addValues(Region region,int numValues) throws IMQException {  for (int i=0; i < numValues; i++) {    String regionKey="" + i;    RegionEntry re=VMThinRegionEntryHeap.getEntryFactory().createEntry((RegionEntryContext)region,regionKey,new Portfolio(i));    entries.add(i,new IndexRegionTestEntry(re));    indexDataStructure.addMapping(regionKey,re);  }}  }
class C{  public MekaClassAttributesTest(String name){  super(name);}  }
class C{  private Ref number() throws PageException {  StringBuilder rtn=new StringBuilder(6);  if (cfml.isCurrent('.'))   rtn.append('0'); else   digit(rtn);  if (cfml.forwardIfCurrent('.')) {    rtn.append('.');    int before=cfml.getPos();    digit(rtn);    if (before < cfml.getPos() && cfml.forwardIfCurrent('e')) {      Boolean expOp=null;      if (cfml.forwardIfCurrent('+'))       expOp=Boolean.TRUE; else       if (cfml.forwardIfCurrent('-'))       expOp=Boolean.FALSE;      if (cfml.isCurrentDigit()) {        if (expOp == Boolean.FALSE)         rtn.append("e-"); else         if (expOp == Boolean.TRUE)         rtn.append("e+"); else         rtn.append('e');        digit(rtn);      } else {        if (expOp != null)         cfml.previous();        cfml.previous();      }    }    if (before == cfml.getPos())     throw new InterpreterException("Number can't end with [.]");  }  cfml.removeSpace();  mode=STATIC;  return new LNumber(rtn.toString());}  }
class C{  @Override public StringBuffer format(long value,StringBuffer buffer,FieldPosition field){  return format((double)value,buffer,field);}  }
class C{  public boolean hasFlicker(){  return this.flicker;}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv,int offset){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException("offset < 0: " + offset);  }  if (iv.length - offset < 2 * (wordSize / 8)) {    throw new IllegalArgumentException("iv.length - offset < 2 * (wordSize / 8)");  }  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=new byte[offset + 2 * (wordSize / 8)];  System.arraycopy(iv,offset,this.iv,0,2 * (wordSize / 8));}  }
class C{  @Deprecated public final void resume(){  getProcess().resume();}  }
class C{  public RGBColorValue(Value r,Value g,Value b){  red=r;  green=g;  blue=b;}  }
class C{  public final Matrix add(Matrix other){  try {    return new Matrix(m_Matrix.plus(other.getMatrix()).getArrayCopy());  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public synchronized boolean registerFrame(JFrame frame){  frameList.add(frame);  frameListDisplay.setListData(frameList);  return true;}  }
class C{  public CTTest(String name){  super(name);}  }
class C{  public CLabel(){  super("",DEFAULT_ALIGNMENT);  init();}  }
class C{  public void addButton(URL url,String info,ActionListener al){  JButton b=new JButton(new ImageIcon(url,info));  b.setToolTipText(info);  b.setMargin(new Insets(0,0,0,0));  b.addActionListener(al);  b.setBorderPainted(false);  add(b);}  }
class C{  public Timer start(){  baseTime=System.currentTimeMillis();  return this;}  }
class C{  private void parseQualities(String message){  message=message.replaceAll("\\([^)]*\\)","");  String[] split=message.split(":");  if (split.length == 2) {    String[] split2=split[1].split(",");    buttonPanel.removeAll();    for (    String part : split2) {      String q=part.trim();      JButton button=new JButton(q);      button.addActionListener(qualityButtonListener);      buttonPanel.add(button);    }    if (getWidth() < buttonPanel.getPreferredSize().width) {      pack();    }    info.setText("Click button to select quality.");  }}  }
class C{  public LinearRegression(float[] x,float[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("array lengths are not equal");  }  N=x.length;  double sumx=0.0, sumy=0.0, sumx2=0.0;  for (int i=0; i < N; i++)   sumx+=x[i];  for (int i=0; i < N; i++)   sumx2+=x[i] * x[i];  for (int i=0; i < N; i++)   sumy+=y[i];  double xbar=sumx / N;  double ybar=sumy / N;  double xxbar=0.0, yybar=0.0, xybar=0.0;  for (int i=0; i < N; i++) {    xxbar+=(x[i] - xbar) * (x[i] - xbar);    yybar+=(y[i] - ybar) * (y[i] - ybar);    xybar+=(x[i] - xbar) * (y[i] - ybar);  }  beta=xybar / xxbar;  alpha=ybar - beta * xbar;  double rss=0.0;  double ssr=0.0;  for (int i=0; i < N; i++) {    double fit=beta * x[i] + alpha;    rss+=(fit - y[i]) * (fit - y[i]);    ssr+=(fit - ybar) * (fit - ybar);  }  int degreesOfFreedom=N - 2;  R2=ssr / yybar;  svar=rss / degreesOfFreedom;  svar1=svar / xxbar;  svar0=svar / N + xbar * xbar * svar1;}  }
class C{  public final void testIsStatePreserved1(){  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};  EncodedKeySpec meks=new MyEncodedKeySpec(encodedKey);  encodedKey[3]=(byte)5;  byte[] ek=meks.getEncoded();  assertTrue(ek[3] == (byte)4);}  }
class C{  public static void removeClassFactory(ClassFactory classFactory){  getUserClassFactories().remove(classFactory);}  }
class C{  private boolean permissible(Coverage coverage,int begin,int end){  int firstZero=coverage.firstZero();  if (config.reordering_limit < 0)   return true;  if (begin == firstZero)   return true;  return end - firstZero <= config.reordering_limit;}  }
class C{  private void updateVolumeInfoAfterCommitExtentMigration(String originalVolumeName,VPlexMigrationInfo migrationInfo,List<VPlexClusterInfo> clusterInfoList,boolean rename){  s_logger.info("Updating volume information after committing extent migration for volume {}",originalVolumeName);  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterInfo.getName(),originalVolumeName,false);    if (virtualVolumeInfo != null) {      break;    }  }  if (virtualVolumeInfo == null) {    s_logger.warn("Could not find virtual volume {}",originalVolumeName);    return;  }  if (rename) {    boolean isDistributed=VPlexVirtualVolumeInfo.Locality.distributed.name().equals(virtualVolumeInfo.getLocality());    if (volumeHasDefaultNamingConvention(originalVolumeName,isDistributed)) {      renameVolumeAfterExtentMigration(virtualVolumeInfo,migrationInfo);      renameSupportingDevicesAfterExtentMigration(virtualVolumeInfo,migrationInfo);    } else     if (supportingDeviceHasDefaultNamingConvention(virtualVolumeInfo.getSupportingDevice(),isDistributed)) {      renameSupportingDevicesAfterExtentMigration(virtualVolumeInfo,migrationInfo);    }  }}  }
class C{  public X509Ext(String oid,byte[] value,boolean critical){  this(new ASN1ObjectIdentifier(oid),value,critical);}  }
class C{  public TXStateProxy masqueradeAs(Message msg,InternalDistributedMember memberId,boolean probeOnly) throws InterruptedException {  if (msg.getTransactionId() == NOTX) {    return null;  }  TXId key=new TXId(memberId,msg.getTransactionId());  TXStateProxy val;  val=this.hostedTXStates.get(key);  if (val == null) {synchronized (this.hostedTXStates) {      val=this.hostedTXStates.get(key);      if (val == null) {        if (msg instanceof TransactionMessage && ((TransactionMessage)msg).isTransactionDistributed()) {          val=new DistTXStateProxyImplOnDatanode(this,key,memberId);        } else {          val=new TXStateProxyImpl(this,key,memberId);        }        this.hostedTXStates.put(key,val);      }    }  }  if (!probeOnly) {    if (val != null) {      if (!val.getLock().isHeldByCurrentThread()) {        val.getLock().lock();synchronized (this.hostedTXStates) {          this.hostedTXStates.put(key,val);        }      }    }    setTXState(val);  }  return val;}  }
class C{  private int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  public static Attribute[] createFourAttributes(){  Attribute[] attributes=new Attribute[4];  attributes[0]=ExampleTestTools.attributeDogCatMouse();  attributes[1]=ExampleTestTools.attributeYesNo();  attributes[2]=ExampleTestTools.attributeInt();  attributes[3]=ExampleTestTools.attributeReal();  for (int i=0; i < attributes.length; i++)   attributes[i].setTableIndex(i);  return attributes;}  }
class C{  protected void displayConnectionErrorDialog(String repositoryName,String repositoryURL){  SwingTools.showVerySimpleErrorMessage("configurable_controller_connection_failed",repositoryName,repositoryURL);}  }
class C{  public PiecewiseConstantPopulation(double[] intervals,double[] thetas,Type units){  super(units);  setIntervals(intervals,thetas);}  }
class C{  public T first(){  if (filter == null) {    List<SearchResultResourceRep> resultRefs=resources.performSearch(parameters);    if (resultRefs.isEmpty()) {      return null;    }    return resources.get(resultRefs.get(0));  } else {    List<T> items=run();    if (items.isEmpty()) {      return null;    }    return items.get(0);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:07.221 -0500",hash_original_method="FE58CB5D6CE6A2E9688AD17CCBB6B897",hash_generated_method="8496BD84730B5DD604BC36EA0D058875") public static BerTlv decode(byte[] data) throws ResultException {  int curIndex=0;  int endIndex=data.length;  int tag, length=0;  try {    tag=data[curIndex++] & 0xff;    if (tag == BER_PROACTIVE_COMMAND_TAG) {      int temp=data[curIndex++] & 0xff;      if (temp < 0x80) {        length=temp;      } else       if (temp == 0x81) {        temp=data[curIndex++] & 0xff;        if (temp < 0x80) {          throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);        }        length=temp;      } else {        throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);      }    } else {      if (ComprehensionTlvTag.COMMAND_DETAILS.value() == (tag & ~0x80)) {        tag=BER_UNKNOWN_TAG;        curIndex=0;      }    }  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);  }catch (  ResultException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }  if (endIndex - curIndex < length) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }  List<ComprehensionTlv> ctlvs=ComprehensionTlv.decodeMany(data,curIndex);  return new BerTlv(tag,ctlvs);}  }
class C{  public void testFindUserGroupsSunDirectoryManagerWithEmptyBase() throws Exception {  LdapManager mgr=getLdapSunDirectoryServer();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new EqualsFilter(mgr.getGroupsReturningAttribute(LdapGroupAttributeConstants.LDAP_GROUP_ATTRIBUTE_MEMBER),"uid=nacho,ou=Users,dc=iecisa,dc=corp"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setBase("");    searchMgrVO.setAddGroupClasses(true);    ret=mgr.findUserGroups(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(1,ret.size());}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  @Override public boolean equals(Object obj){  if ((obj == null) || !(obj.getClass().equals(this.getClass()))) {    return false;  }  ClusterEvaluation cmp=(ClusterEvaluation)obj;  if ((m_classToCluster != null) != (cmp.m_classToCluster != null)) {    return false;  }  if (m_classToCluster != null) {    for (int i=0; i < m_classToCluster.length; i++) {      if (m_classToCluster[i] != cmp.m_classToCluster[i]) {        return false;      }    }  }  if ((m_clusterAssignments != null) != (cmp.m_clusterAssignments != null)) {    return false;  }  if (m_clusterAssignments != null) {    for (int i=0; i < m_clusterAssignments.length; i++) {      if (m_clusterAssignments[i] != cmp.m_clusterAssignments[i]) {        return false;      }    }  }  if (Double.isNaN(m_logL) != Double.isNaN(cmp.m_logL)) {    return false;  }  if (!Double.isNaN(m_logL)) {    if (m_logL != cmp.m_logL) {      return false;    }  }  if (m_numClusters != cmp.m_numClusters) {    return false;  }  String clusteringResults1=m_clusteringResults.toString().replaceAll("Elapsed time.*","");  String clusteringResults2=cmp.m_clusteringResults.toString().replaceAll("Elapsed time.*","");  if (!clusteringResults1.equals(clusteringResults2)) {    return false;  }  return true;}  }
class C{  public static KeyPair generateRSAKeyPair() throws NoSuchAlgorithmException {  KeyPairGenerator gen=KeyPairGenerator.getInstance("RSA");  gen.initialize(2048);  KeyPair pair=gen.generateKeyPair();  return pair;}  }
class C{  public void addSection(final Section SECTION){  if (null == SECTION)   return;  sections.add(SECTION);  Collections.sort(sections,new SectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          if (dataSize % 2 == 1) {            z=data.get((dataSize + 1) / 2 - 1);          } else {            double lower=data.get(dataSize / 2 - 1);            double upper=data.get(dataSize / 2);            z=(lower + upper) / 2.0;          }          outputFile.setValue(row,col,z);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testBadSegment() throws IOException {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(new MockAnalyzer(random())));  Document document=new Document();  FieldType customType=new FieldType(TextField.TYPE_NOT_STORED);  customType.setStoreTermVectors(true);  document.add(newField("tvtest","",customType));  iw.addDocument(document);  iw.close();  dir.close();}  }
class C{  private static List<ICallgraphEdge> loadEdges(final CConnection connection,final int callgraphId,final Map<Integer,CCallgraphNode> nodeMap) throws SQLException {  final List<ICallgraphEdge> edges=new ArrayList<ICallgraphEdge>();  final String edgeQuery="SELECT source_node_id, target_node_id" + " FROM " + CTableNames.NODES_TABLE + " JOIN "+ CTableNames.EDGES_TABLE+ " ON "+ CTableNames.NODES_TABLE+ ".id = "+ CTableNames.EDGES_TABLE+ ".source_node_id"+ " WHERE view_id = "+ callgraphId;  final ResultSet edgeResult=connection.executeQuery(edgeQuery,true);  try {    while (edgeResult.next()) {      final CCallgraphNode source=nodeMap.get(edgeResult.getInt("source_node_id"));      final CCallgraphNode target=nodeMap.get(edgeResult.getInt("target_node_id"));      CCallgraphNode.link(source,target);      edges.add(new CCallgraphEdge(source,target));    }  }  finally {    edgeResult.close();  }  return edges;}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  public void skipValue() throws IOException {  int count=0;  do {    int p=peeked;    if (p == PEEKED_NONE) {      p=doPeek();    }    if (p == PEEKED_BEGIN_ARRAY) {      push(JsonScope.EMPTY_ARRAY);      count++;    } else     if (p == PEEKED_BEGIN_OBJECT) {      push(JsonScope.EMPTY_OBJECT);      count++;    } else     if (p == PEEKED_END_ARRAY) {      stackSize--;      count--;    } else     if (p == PEEKED_END_OBJECT) {      stackSize--;      count--;    } else     if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED) {      skipUnquotedValue();    } else     if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME) {      skipQuotedValue('\'');    } else     if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME) {      skipQuotedValue('"');    } else     if (p == PEEKED_NUMBER) {      pos+=peekedNumberLength;    }    peeked=PEEKED_NONE;  } while (count != 0);  pathIndices[stackSize - 1]++;  pathNames[stackSize - 1]="null";}  }
class C{  public NeighborIterator(Node n,Iterator edges){  m_node=n;  m_edges=edges;}  }
class C{  private void addSdkOptionsToCombo(){  List<GwtSdk> sdks=GWTPreferences.getSdkManager().getSdksSortedList();  comboViewer.setInput(sdks);  comboViewer.refresh();  if (comboViewerCombo.getSelectionIndex() < 0 && sdks.size() > 0) {    GwtSdk defaultSdk=GWTPreferences.getDefaultRuntime();    model.setProperty(GWT_SDK,defaultSdk);    ISelection selection=new StructuredSelection(defaultSdk);    comboViewer.setSelection(selection,true);  }}  }
class C{  @Override @SuppressWarnings("unchecked") public Iterator<AbstractPage> postOrderNodeIterator(final boolean dirtyNodesOnly,final boolean nodesOnly){  if (dirtyNodesOnly && !dirty) {    return EmptyIterator.DEFAULT;  }  return new Striterator(postOrderIterator1(dirtyNodesOnly,nodesOnly)).append(new SingleValueIterator(this));}  }
class C{  private int[] findMinAndMax(double[] values){  int minIdx=0, maxIdx=0;  for (int i=1; i < values.length; i++) {    if (values[i] < values[minIdx]) {      minIdx=i;    } else     if (values[i] > values[maxIdx]) {      maxIdx=i;    }  }  return new int[]{minIdx,maxIdx};}  }
class C{  private ModuleMarshal marshalImpl(Class<?> sourceType){  Class<?> targetType=getTargetType(_targetLoader,sourceType,Object.class);  if (targetType == null) {    if (ProxyHandleAmp.class.isAssignableFrom(sourceType)) {      Class<?> targetProxy=getTargetProxy(sourceType);      return new MarshalProxy(targetProxy);    }    targetType=Object.class;  }  return marshal(sourceType,targetType,targetType);}  }
class C{  public static void assertThrowsMissingPropertyException(final Supplier<Object> consumer,final String propertyName){  ExceptionAssert.assertThrows(null,MissingRequiredPropertyException.class,null);}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  public static void main(String[] args){  Course math101=new Course("math101");  math101.addStudent("Mark");  math101.addStudent("Tom");  math101.addStudent("Joan");  math101.dropStudent("Tom");  System.out.println("\nThe students in the course " + math101.getCourseName() + ":");  String[] students=math101.getStudents();  for (int i=0; i < math101.getNumberOfStudents(); i++) {    System.out.print(students[i] + " ");  }  System.out.println();}  }
class C{  public void add(final RPObject object,final Player player){  add(object,player,true);}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public DateTimeFormatterBuilder append(DateTimePrinter printer){  checkPrinter(printer);  return append0(printer,null);}  }
class C{  public ResourceNode locate(String sessionID,String path,ResourceNode startNode) throws DirectoryNotFoundException {  if (path == null) {    return getCurrentNode(sessionID);  } else   if (path.startsWith(PROTOCOL)) {    path=path.substring(PROTOCOL.length());  } else   if (path.startsWith(ROOT_ELEMENT) && path.length() > ROOT_ELEMENT.length()) {    startNode=getRootNode();    path=path.substring(ROOT_ELEMENT.length());  }  if (path.equals(CURRENT_ELEMENT))   return getCurrentNode(sessionID); else   if (path.equals(ROOT_ELEMENT))   return getRootNode();  ResourceNode foundNode=null;  ResourceNode nodeToSearch=startNode;  String pathElements[]=path.split(PATH_SEPARATOR);  if (pathElements.length == 0) {    return getRootNode();  }  for (  String element : pathElements) {    if (element.length() == 0)     continue;    if (element.equals(PARENT_ELEMENT)) {      if ((foundNode=nodeToSearch.getParent()) != null) {        nodeToSearch=nodeToSearch.getParent();      } else {        throw new DirectoryNotFoundException(String.format("element '%s' not found",path));      }    } else {      Map<String,ResourceNode> children=nodeToSearch.getChildren();      if (element.equals(ANY_ELEMENT)) {        if (nodeToSearch.getType() == ResourceType.CLUSTER) {          foundNode=children.get(memberName);        } else         if (children.size() > 0) {          foundNode=getFirst(children);        } else {          throw new DirectoryNotFoundException(String.format("the element '%s' of path '%s' resolves to more than one element",element,path));        }      } else {        foundNode=children.get(element);      }      if (foundNode == null) {        throw new DirectoryNotFoundException(String.format("element '%s' not found in path '%s' while searching for entry '%s'",element,formatPath(getAbsolutePath(getRootNode(),nodeToSearch,true),true),path));      }      nodeToSearch=foundNode;    }  }  return foundNode;}  }
class C{  public static synchronized void beforeAll(UnsafeBlock block){  isValidContext("beforeAll");  contexts.get().current().addBeforeAll(block);}  }
class C{  public InputStream openClassfile(String classname){  String cname=classname.replace('.','/') + ".class";  ClassLoader cl=(ClassLoader)clref.get();  if (cl == null)   return null; else   return cl.getResourceAsStream(cname);}  }
class C{  public Path[] nodeDataPaths(){  assert assertEnvIsLocked();  if (nodePaths == null || locks == null) {    throw new IllegalStateException("node is not configured to store local location");  }  Path[] paths=new Path[nodePaths.length];  for (int i=0; i < paths.length; i++) {    paths[i]=nodePaths[i].path;  }  return paths;}  }
class C{  @Override public synchronized Object clone() throws CloneNotSupportedException {  final URI instance=(URI)super.clone();  instance._uri=_uri;  instance._scheme=_scheme;  instance._opaque=_opaque;  instance._authority=_authority;  instance._userinfo=_userinfo;  instance._host=_host;  instance._port=_port;  instance._path=_path;  instance._query=_query;  instance._fragment=_fragment;  instance.protocolCharset=protocolCharset;  instance._is_hier_part=_is_hier_part;  instance._is_opaque_part=_is_opaque_part;  instance._is_net_path=_is_net_path;  instance._is_abs_path=_is_abs_path;  instance._is_rel_path=_is_rel_path;  instance._is_reg_name=_is_reg_name;  instance._is_server=_is_server;  instance._is_hostname=_is_hostname;  instance._is_IPv4address=_is_IPv4address;  instance._is_IPv6reference=_is_IPv6reference;  return instance;}  }
class C{  public SparseIntegerVector(TIntDoubleMap values,int dimensionality) throws IllegalArgumentException {  if (values.size() > dimensionality) {    throw new IllegalArgumentException("values.size() > dimensionality!");  }  this.indexes=new int[values.size()];  this.values=new int[values.size()];{    TIntDoubleIterator iter=values.iterator();    for (int i=0; iter.hasNext(); i++) {      iter.advance();      this.indexes[i]=iter.key();    }    Arrays.sort(this.indexes);  }{    for (int i=0; i < values.size(); i++) {      this.values[i]=(int)values.get(this.indexes[i]);    }  }  this.dimensionality=dimensionality;  final int maxdim=getMaxDim();  if (maxdim > dimensionality) {    throw new IllegalArgumentException("Given dimensionality " + dimensionality + " is too small w.r.t. the given values (occurring maximum: "+ maxdim+ ").");  }}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void updateLong(String columnName,long x) throws SQLException {  checkUpdatable();  getField(columnName).setLong(x);}  }
class C{  public ServerSocket createServerSocket(int nport,int backlog) throws IOException {  return createServerSocket(nport,backlog,null);}  }
class C{  protected DMLStatementNode bindAndTransform(DMLStatementNode stmt){  try {    binder.bind(stmt);    stmt=(DMLStatementNode)booleanNormalizer.normalize(stmt);    typeComputer.compute(stmt);    stmt=subqueryFlattener.flatten(stmt);    if (Boolean.parseBoolean(getProperty("eliminate-distincts","true")))     stmt=distinctEliminator.eliminate(stmt);    return stmt;  } catch (  StandardException ex) {    throw new SQLParserInternalException(ex);  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.086 -0500",hash_original_method="75A6708119FD051685C400EDBE70E7B1",hash_generated_method="FA5E98C53996F1C8C9BECBAA845B2245") public static boolean copyToFile(InputStream inputStream,File destFile){  try {    if (destFile.exists()) {      destFile.delete();    }    FileOutputStream out=new FileOutputStream(destFile);    try {      byte[] buffer=new byte[4096];      int bytesRead;      while ((bytesRead=inputStream.read(buffer)) >= 0) {        out.write(buffer,0,bytesRead);      }    }  finally {      out.flush();      try {        out.getFD().sync();      } catch (      IOException e) {      }      out.close();    }    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  public static byte[] spoFormat(final RyaStatement triple) throws TripleRowResolverException {  checkNotNull(triple);  final Map<TABLE_LAYOUT,TripleRow> serialized=TRIPLE_RESOLVER.serialize(triple);  final TripleRow spoRow=serialized.get(TABLE_LAYOUT.SPO);  return spoRow.getRow();}  }
class C{  protected void auditField(final ChangeSpec changeSpec){  final String fieldName=changeSpec.getFieldName();  Audit[] annotations=dictionary.getAttributeOrRelationAnnotations(getResourceClass(),Audit.class,fieldName);  if (annotations == null || annotations.length == 0) {    auditClass(Audit.Action.UPDATE,changeSpec);    return;  }  for (  Audit annotation : annotations) {    if (annotation.action().length == 1 && annotation.action()[0] == Audit.Action.UPDATE) {      LogMessage message=new LogMessage(annotation,this,Optional.of(changeSpec));      getRequestScope().getAuditLogger().log(message);    } else {      throw new InvalidSyntaxException("Only Audit.Action.UPDATE is allowed on fields.");    }  }}  }
class C{  private void loadOrgAccess(boolean reload){  if (!(reload || m_orgAccess == null))   return;  ArrayList<OrgAccess> list=new ArrayList<OrgAccess>();  if (isUseUserOrgAccess())   loadOrgAccessUser(list); else   loadOrgAccessRole(list);  m_orgAccess=new OrgAccess[list.size()];  list.toArray(m_orgAccess);  log.fine("#" + m_orgAccess.length + (reload ? " - reload" : ""));  if (Ini.isClient()) {    StringBuffer sb=new StringBuffer();    for (int i=0; i < m_orgAccess.length; i++) {      if (i > 0)       sb.append(",");      sb.append(m_orgAccess[i].AD_Org_ID);    }    Env.setContext(Env.getCtx(),"#User_Org",sb.toString());  }}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  public static int toInt(byte b){  return b & 0xFF;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  return readBytes(b,off,len);}  }
class C{  public static <T>SortedSet<T> asSynchronized(SortedSet<T> self){  return Collections.synchronizedSortedSet(self);}  }
class C{  protected AbstractElementSelector(String uri,String name){  namespaceURI=uri;  localName=name;}  }
class C{  public boolean isPartitionTag(String field){  if (partitions == null || (!isTag(field))) {    return false;  }  for (  String partition : partitions) {    if (partition.equals(field)) {      return true;    }  }  return false;}  }
class C{  static public MimeMultipartReport create(String humanText,String reporting_UA_name,String reporting_UA_product,String original_recipient,String final_recipient,String original_message_id,Disposition disposition) throws MessagingException {  MimeMultipartReport multiPart=new MimeMultipartReport();  multiPart.setReportType("disposition-notification");  MimeBodyPart humanPart=new MimeBodyPart();  humanPart.setText(humanText);  multiPart.addBodyPart(humanPart);  StringBuilder mdnReport=new StringBuilder(128);  mdnReport.append("Reporting-UA: ");  mdnReport.append((reporting_UA_name == null ? "" : reporting_UA_name));  mdnReport.append("; ");  mdnReport.append((reporting_UA_product == null ? "" : reporting_UA_product));  mdnReport.append("\r\n");  if (null != original_recipient) {    mdnReport.append("Original-Recipient: ");    mdnReport.append("rfc822; ");    mdnReport.append(original_recipient);    mdnReport.append("\r\n");  }  mdnReport.append("Final-Recepient: ");  mdnReport.append("rfc822; ");  mdnReport.append((final_recipient == null ? "" : final_recipient));  mdnReport.append("\r\n");  mdnReport.append("Original-Message-ID: ");  mdnReport.append((original_message_id == null ? "" : original_message_id));  mdnReport.append("\r\n");  mdnReport.append(disposition.toString());  mdnReport.append("\r\n");  MimeBodyPart mdnPart=new MimeBodyPart();  mdnPart.setContent(mdnReport.toString(),"message/disposition-notification");  multiPart.addBodyPart(mdnPart);  return multiPart;}  }
class C{  public static String fixDecimalExponent(String dString){  int ePos=dString.indexOf('E');  if (ePos == -1) {    ePos=dString.indexOf('e');  }  if (ePos != -1) {    if (dString.length() > (ePos + 1)) {      char maybeMinusChar=dString.charAt(ePos + 1);      if (maybeMinusChar != '-' && maybeMinusChar != '+') {        StringBuilder strBuilder=new StringBuilder(dString.length() + 1);        strBuilder.append(dString.substring(0,ePos + 1));        strBuilder.append('+');        strBuilder.append(dString.substring(ePos + 1,dString.length()));        dString=strBuilder.toString();      }    }  }  return dString;}  }
class C{  public Size(){}  }
class C{  private boolean acquire(){  while (true) {    int cnt=activeCnt.get();    if (cnt == 0) {      if (log.isDebugEnabled())       log.debug("IPC IO not acquired (count was 0): " + this);      return false;    }    if (activeCnt.compareAndSet(cnt,cnt + 1)) {      if (log.isDebugEnabled())       log.debug("IPC IO acquired: " + this);      return true;    }  }}  }
class C{  @Util public static void addRenderArgsForVcenterObjects(){  renderTenantOptionsForVcenters();  String tenantId=Models.currentAdminTenantForVcenter();  String tenantName=TENANT;  if (Security.isSystemMonitor() || Security.isTenantAdmin() || Security.isSystemAdmin()) {    try {      tenantId=Models.currentAdminTenantForVcenter();      if (TenantUtils.getNoTenantSelector().equalsIgnoreCase(tenantId) || TenantUtils.getTenantSelectorForUnassigned().equalsIgnoreCase(tenantId)) {        tenantName=tenantId;      } else {        tenantName=getViprClient().tenants().get(uri(tenantId)).getName();      }    } catch (    ServiceErrorException tenantNotFound) {      Models.resetAdminTenantId();      tenantId=Models.currentAdminTenantForVcenter();      tenantName=getViprClient().tenants().get(uri(tenantId)).getName();    }  }  renderArgs.put(CURRENT_TENANT_ID,tenantId);  renderArgs.put(CURRENT_TENANT_NAME,tenantName);}  }
class C{  public Collection<EventBean> snapshot(FilterSpecCompiled optionalFilter,Annotation[] annotations){  VirtualDWView virtualDataWindow=null;  if (isVirtualDataWindow()) {    virtualDataWindow=getVirtualDataWindow();  }  return FireAndForgetQueryExec.snapshot(optionalFilter,annotations,virtualDataWindow,indexRepository,rootView.isQueryPlanLogging(),NamedWindowRootView.getQueryPlanLog(),rootView.getEventType().getName(),agentInstanceContext);}  }
class C{  public void markAsConsumed(){  isConsumed=true;}  }
class C{  public static boolean isChrome(RemoteWebDriver driver){  Preconditions.checkNotNull(driver);  Capabilities capabilities=driver.getCapabilities();  return "CHROME".equals(capabilities.getBrowserName().toUpperCase());}  }
class C{  public ScatterChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);  size=renderer.getPointSize();}  }
class C{  public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){  impl.drawRoundRect(nativeGraphics,xTranslate + x,yTranslate + y,width,height,arcWidth,arcHeight);}  }
class C{  public void addAllHaptic(Collection<? extends Integer> ids){  mHapticFeedback.addAll(ids);}  }
class C{  public BorderFilter(){}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("websphere85x",ContainerType.INSTALLED,WebSphere85xInstalledLocalContainer.class);}  }
class C{  public boolean isExtendedInfo(){  return extendedInfo;}  }
class C{  public SortedList(int initialCapacity){  elements=new ArrayList<T>(initialCapacity);}  }
class C{  public QueryEntity(){}  }
class C{  @Override public RegularTimePeriod next(){  Quarter result;  if (this.quarter < LAST_QUARTER) {    result=new Quarter(this.quarter + 1,this.year);  } else {    if (this.year < 9999) {      result=new Quarter(FIRST_QUARTER,this.year + 1);    } else {      result=null;    }  }  return result;}  }
class C{  public Date[] events(){  return this.datesInContent();}  }
class C{  protected Long wrapKey(long k){  return new Long(k);}  }
class C{  public boolean matches(final Relation relation,final boolean symmetric){  final Entity sourceEntity=relation.getSource();  final Entity targetEntity=relation.getTarget();  final String sourceType=sourceEntity.getTypeName();  final String targetType=targetEntity.getTypeName();  final boolean relationType=type.equalsIgnoreCase(relation.getRelationshipType()) && subType.equalsIgnoreCase(relation.getRelationSubType());  if (!symmetric) {    return relationType && typesEqual(sourceType,targetType);  } else {    return relationType && (typesEqual(sourceType,targetType) || typesEqual(targetType,sourceType));  }}  }
class C{  public static long parseTimestampUs(String timestamp) throws NumberFormatException {  long value=0;  String[] parts=timestamp.split("\\.",2);  String[] subparts=parts[0].split(":");  for (int i=0; i < subparts.length; i++) {    value=value * 60 + Long.parseLong(subparts[i]);  }  return (value * 1000 + Long.parseLong(parts[1])) * 1000;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:30.643 -0500",hash_original_method="FEC91070502C1195B6460B4D97DFCE73",hash_generated_method="3A5DAD87284B4DF46B7E9C6D018B6896") public int findIndex(String iface,int uid,int set,int tag){  for (int i=0; i < size; i++) {    if (uid == this.uid[i] && set == this.set[i] && tag == this.tag[i] && Objects.equal(iface,this.iface[i])) {      return i;    }  }  return -1;}  }
class C{  @Override protected void printComment(Writer stringWriter,Comment comment) throws IOException {  if (comment instanceof NewlineText) {    if (!indentBlankLines) {      clearIndentationForCurrentLine(stringWriter);    }  } else {    super.printComment(stringWriter,comment);  }}  }
class C{  private void checkSelector(CSSElement currentSelector,HTMLElement element,HTMLComponent htmlC,String className,String id,Vector nextNestedSelectors,Vector nextSiblingSelectors){  if (((currentSelector.getSelectorTag() == null) || ((!element.isTextElement()) && (currentSelector.getSelectorTag().equalsIgnoreCase(element.getTagName())))) && ((currentSelector.getSelectorClass() == null) || (containsClass(className,currentSelector.getSelectorClass()))) && ((currentSelector.getSelectorId() == null) || (currentSelector.getSelectorId().equalsIgnoreCase(id)))&& (((currentSelector.getSelectorPseudoClass() & (CSSElement.PC_FIRST_CHILD)) == 0) || (element.isFirstChild()))&& (currentSelector.matchAttributeSelections(element))) {    if (currentSelector.getNumChildren() == 0) {      if ((element.getTagId() != HTMLElement.TAG_A) || ((currentSelector.getSelectorPseudoClass() & (CSSElement.PC_LINK + CSSElement.PC_VISITED)) == 0) || ((element.getUi().size() > 0) && !(element.getUi().firstElement() instanceof HTMLLink))|| ((element.getUi().size() > 0) && (!((HTMLLink)element.getUi().firstElement()).linkVisited) && ((currentSelector.getSelectorPseudoClass() & CSSElement.PC_LINK) != 0))|| ((element.getUi().size() > 0) && ((HTMLLink)element.getUi().firstElement()).linkVisited) && ((currentSelector.getSelectorPseudoClass() & CSSElement.PC_VISITED) != 0)) {        applyStyle(element,currentSelector,htmlC);      }    } else {      CSSElement child=currentSelector.getCSSChildAt(0);      if (child.siblingSelector) {        if (!HTMLComponent.PROCESS_HTML_MP1_ONLY) {          nextSiblingSelectors.addElement(child);        }      } else {        nextNestedSelectors.addElement(child);        if (child.descendantSelector) {          CSSElement elem=new CSSElement("*");          elem.addChild(new CSSElement(child));          nextNestedSelectors.addElement(elem);        }      }    }  }}  }
class C{  public static GT_Tool_Item constructHardHammerItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aEntityDamage){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_HardHammer_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aEntityDamage);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,aEntityDamage,false);}  }
class C{  @Override public int clampViewPositionVertical(View child,int top,int dy){  return Math.min(Math.max(top,mConfigView.getPaddingTop()),mConfigView.getContainer().getHeight());}  }
class C{  public TVNavigatorView(){}  }
class C{  public VerletParticle3D clearConstraints(){  constraints.clear();  return this;}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public <K,V>void saveToGeode(String regionPath,PairFunction<T,K,V> func,GeodeConnectionConf connConf,Properties opConf){  rddf.saveToGeode(regionPath,func,connConf,propertiesToScalaMap(opConf));}  }
class C{  private SystemColor(byte index){  super(systemColors[index]);  this.index=index;}  }
class C{  public void addCorners(){  if (topLeft == null || topLeft.getParent() != this) {    topLeft=new Figure();    topLeft.setSize(1,1);    add(topLeft);  }  if (bottomRight == null || bottomRight.getParent() != this) {    bottomRight=new Figure();    bottomRight.setSize(1,1);    add(bottomRight);  }}  }
class C{  private int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  for (int i=0; i < blockSize; i++) {    cbcV[i]^=in[inOff + i];  }  int length=cipher.processBlock(cbcV,0,out,outOff);  System.arraycopy(out,outOff,cbcV,0,cbcV.length);  return length;}  }
class C{  public IntentBuilder skipConfirm(){  result.putExtra(EXTRA_CONFIRM,false);  return (this);}  }
class C{  public CDTTest(String name){  super(name);}  }
class C{  public static List<CAddressSpace> loadAddressSpaces(final AbstractSQLProvider provider,final INaviProject project,final DebuggerTemplateManager debuggerManager,final List<INaviModule> list) throws CouldntLoadDataException {  checkArguments(provider,project);  Preconditions.checkNotNull(debuggerManager,"IE01543: Debugger provider argument can not be null");  Preconditions.checkNotNull(list,"IE01545: Modules argument can not be null");  NaviLogger.info("Loading address spaces of project %s",project.getConfiguration().getName());  final CConnection connection=provider.getConnection();  final List<CAddressSpace> addressSpaces=new ArrayList<CAddressSpace>();  final String query="SELECT id, name, description, creation_date, modification_date, debugger_id " + " FROM " + CTableNames.ADDRESS_SPACES_TABLE + " WHERE project_id = "+ project.getConfiguration().getId();  try {    final ResultSet resultSet=connection.executeQuery(query,true);    try {      while (resultSet.next()) {        final int addressSpaceId=resultSet.getInt("id");        final Map<INaviModule,IAddress> imageBases=loadImageBases(connection,addressSpaceId,list);        final String name=PostgreSQLHelpers.readString(resultSet,"name");        final String description=PostgreSQLHelpers.readString(resultSet,"description");        final Timestamp creationDate=resultSet.getTimestamp("creation_date");        final Timestamp modificationDate=resultSet.getTimestamp("modification_date");        final DebuggerTemplate debuggerDescription=debuggerManager.findDebugger(resultSet.getInt("debugger_id"));        addressSpaces.add(new CAddressSpace(addressSpaceId,name,description,creationDate,modificationDate,imageBases,debuggerDescription,provider,project));      }      return addressSpaces;    }  finally {      resultSet.close();    }  } catch (  final SQLException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  private void createLdifFile(BufferedReader schemaExportReader,String ldapSchemaFileName) throws IOException, FileOperationFailedException {  _log.info("Ldif file {}",ldapSchemaFileName);  File ldapSchemaExportFile=new File(ldapSchemaFileName);  if (ldapSchemaExportFile.exists()) {    if (!ldapSchemaExportFile.delete()) {      throw new FileOperationFailedException("delete","file",ldapSchemaFileName);    }  }  if (!ldapSchemaExportFile.createNewFile()) {    throw new FileOperationFailedException("create","file",ldapSchemaFileName);  }  if (!ldapSchemaExportFile.setWritable(true)) {    throw new FileOperationFailedException("set writable","file",ldapSchemaFileName);  }  ldapSchemaExportFile.deleteOnExit();  BufferedWriter writer=new BufferedWriter(new FileWriter(ldapSchemaExportFile));  String line;  while ((line=schemaExportReader.readLine()) != null) {    writer.write(line);    writer.newLine();  }  writer.close();}  }
class C{  public Long addRoomWithModerationAndQuestions(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,Boolean allowUserQuestions) throws AxisFault {  return this.getRoomServiceProxy().addRoomWithModerationAndQuestions(SID,name,roomtypes_id,comment,numberOfPartizipants,ispublic,appointment,isDemoRoom,demoTime,isModeratedRoom,allowUserQuestions);}  }
class C{  public static <T extends Comparable<? super T>>MutableList<T> toSortedList(Iterable<T> iterable){  return Iterate.toSortedList(iterable,Comparators.naturalOrder());}  }
class C{  public void add(ClusterNode newNode){  if (node != null) {    nodes=new ArrayList<>(2);    nodes.add(node);    node=null;  }  nodes.add(newNode);}  }
class C{  public void testSuccessNotifications() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(3000);  HostAddress address=HostAddressService.getByName(InetAddress.getLocalHost().getHostName());  PingResponse response=has.isReachableByMethod(HostAddressService.PING,address);  assertEquals("Direct method invocation",1,response.getNotifications().size());  for (  PingNotification notification : response.getNotifications()) {    logger.info("Notification: " + notification.toString());  }  response=has.isReachable(address);  assertEquals("General invocation",1,response.getNotifications().size());  for (  PingNotification notification : response.getNotifications()) {    logger.info("Notification: " + notification.toString());  }}  }
class C{  public Vec2 normalize(){  double magnitude=this.magnitude();  if (magnitude != 0) {    this.x/=magnitude;    this.y/=magnitude;  }  return this;}  }
class C{  public void sync(){  force();  try {    RandomAccessFile file=getRandomAccessFile();    file.getChannel().force(true);  } catch (  IOException ignored) {  } finally {    releaseFile();  }}  }
class C{  public void init(@SwatchSize int size,int columns,OnColorSelectedListener listener){  mPreferredNumColumns=columns;  Resources res=getResources();  if (size == SIZE_LARGE) {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_large);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_large);  } else {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_small);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_small);  }  mOnColorSelectedListener=listener;  mDescription=res.getString(R.string.color_swatch_description);  mDescriptionSelected=res.getString(R.string.color_swatch_description_selected);}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  public HttpURL(final String user,final String password,final String host,final int port) throws URIException {  this(user,password,host,port,null,null,null);}  }
class C{  public void enableNativeMenu(boolean enable){  nativeMenu=enable;}  }
class C{  public GF2Polynomial multiply(GF2Polynomial b){  int n=Math.max(len,b.len);  expandN(n);  b.expandN(n);  return karaMult(b);}  }
class C{  public void changeTaskNameState(View view,AppCompatCheckedTextView taskNameText,boolean completed){  taskNameText.setChecked(completed);  if (completed) {    view.setBackgroundColor(ContextCompat.getColor(mContext,R.color.mt_gray5));    taskNameText.setTextColor(ContextCompat.getColor(mContext,R.color.mt_gray6));  } else {    view.setBackgroundColor(ContextCompat.getColor(mContext,android.R.color.white));    taskNameText.setTextColor(ContextCompat.getColor(mContext,R.color.mt_black));  }}  }
class C{  public BuddyLogoutEvent(final Player player){  super(RPCLASS_NAME);  put(NAME,player.getName());}  }
class C{  private void callDeleteApi(String wallId){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.DELETE_WALL);  retroCallbackList.add(retroCallback);  mYeloApi.deleteWall(wallId,retroCallback);  String selection=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;  getActivity().setProgressBarIndeterminate(true);  DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_WALL_POST,getTaskTag(),null,TableWallPosts.NAME,selection,new String[]{wallId},true,this);  DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_MY_WALL_POST,getTaskTag(),null,TableMyWallPosts.NAME,selection,new String[]{wallId},true,this);}  }
class C{  public static double length(CoordinateSequence pts){  int n=pts.size();  if (n <= 1)   return 0.0;  double len=0.0;  Coordinate p=new Coordinate();  pts.getCoordinate(0,p);  double x0=p.x;  double y0=p.y;  for (int i=1; i < n; i++) {    pts.getCoordinate(i,p);    double x1=p.x;    double y1=p.y;    double dx=x1 - x0;    double dy=y1 - y0;    len+=Math.sqrt(dx * dx + dy * dy);    x0=x1;    y0=y1;  }  return len;}  }
class C{  public boolean isAllowedToPauseTransfer() throws RcsGenericException {  try {    return mTransferInf.isAllowedToPauseTransfer();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  private void loadJobTypes(){  Document document=Utils.loadXMLDoc(JOB_TYPES_CONF);  JobTypeConfiguration conf=new JobTypeConfiguration(document.getDocumentElement());  _appTypeToJobTypes=conf.getAppTypeToJobTypeList();}  }
class C{  private String[] expandRuntimeTokens(String[] pathlist){  final String[] processed=new String[pathlist.length];  Properties envProperties=loadEnvPropertyFile();  String playerglobalHome=envProperties != null ? envProperties.getProperty("env.PLAYERGLOBAL_HOME",System.getenv("PLAYERGLOBAL_HOME")) : System.getenv("PLAYERGLOBAL_HOME");  if (playerglobalHome == null)   playerglobalHome=PLAYERGLOBAL_HOME_TOKEN;  String airHome=envProperties != null ? envProperties.getProperty("env.AIR_HOME",System.getenv("AIR_HOME")) : System.getenv("AIR_HOME");  if (airHome == null)   airHome=AIR_HOME_TOKEN;  for (int i=0; i < pathlist.length; i++) {    processed[i]=StringUtils.substitute(pathlist[i],PLAYERGLOBAL_HOME_TOKEN,playerglobalHome);    processed[i]=StringUtils.substitute(processed[i],AIR_HOME_TOKEN,airHome);  }  return processed;}  }
class C{  public static Geo center(Geo[] poly,Geo ret){  Geo c=new Geo(poly[0]);  for (int i=1; i < poly.length; i++) {    ret.initialize(poly[i]);    c=c.add(poly[i],c);  }  return c.normalize(ret);}  }
class C{  private void add(String settingName,Object value,int type,int subType,boolean save){  if (type == Setting.MAP || type == Setting.LIST) {    settings.put(settingName,new SubtypeSetting(value,type,subType,save,defaultFile));  } else {    settings.put(settingName,new Setting(value,type,save,defaultFile));  }}  }
class C{  public static double quantile(double val,double mu,double sigma,double xi){  if (val < 0.0 || val > 1.0) {    return Double.NaN;  }  if (xi == 0.) {    return mu - sigma * Math.log(1 - val);  }  return mu - sigma / xi * (1 - Math.pow(1 - val,-xi));}  }
class C{  public SpyVersions loadVersions() throws XMLException {  setLoading(true);  try {    final URL url=new URL(propertyLoader.getProperty(BasePropertyNames.VERSION_INFO_URL));    versions=(SpyVersions)loadFromInputStream(url.openStream());  } catch (  IOException|NullPointerException e) {    throw new XMLException("Cannot read version info from " + propertyLoader.getProperty(BasePropertyNames.VERSION_INFO_URL),e);  }  setLoading(false);  return versions;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static short toType(String strType) throws RegistryException {  if (strType.equals(REGDWORD_TOKEN))   return RegistryEntry.TYPE_DWORD; else   if (strType.equals(REGSTR_TOKEN))   return RegistryEntry.TYPE_STRING; else   if (strType.equals(REGKEY_TOKEN))   return RegistryEntry.TYPE_KEY;  throw new RegistryException(strType + " is not a valid Registry Type");}  }
class C{  private static boolean dateByWeek(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){  boolean reducedPrec=false;  if (fields.remove(DateTimeFieldType.weekyear())) {    bld.append(weekyearElement());    if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {      appendSeparator(bld,extended);      bld.appendLiteral('W');      bld.appendWeekOfWeekyear(2);      if (fields.remove(DateTimeFieldType.dayOfWeek())) {        appendSeparator(bld,extended);        bld.appendDayOfWeek(1);      } else {        reducedPrec=true;      }    } else {      if (fields.remove(DateTimeFieldType.dayOfWeek())) {        checkNotStrictISO(fields,strictISO);        appendSeparator(bld,extended);        bld.appendLiteral('W');        bld.appendLiteral('-');        bld.appendDayOfWeek(1);      } else {        reducedPrec=true;      }    }  } else   if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {    bld.appendLiteral('-');    bld.appendLiteral('W');    bld.appendWeekOfWeekyear(2);    if (fields.remove(DateTimeFieldType.dayOfWeek())) {      appendSeparator(bld,extended);      bld.appendDayOfWeek(1);    } else {      reducedPrec=true;    }  } else   if (fields.remove(DateTimeFieldType.dayOfWeek())) {    bld.appendLiteral('-');    bld.appendLiteral('W');    bld.appendLiteral('-');    bld.appendDayOfWeek(1);  }  return reducedPrec;}  }
class C{  AVT processAVT(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    AVT avt=new AVT(handler,uri,name,rawName,value,owner);    return avt;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public IoBuffer generateClientRequest1(){  log.debug("generateClientRequest1");  IoBuffer request=IoBuffer.allocate(Constants.HANDSHAKE_SIZE + 1);  if (handshakeType == RTMPConnection.RTMP_ENCRYPTED) {    request.put(RTMPConnection.RTMP_ENCRYPTED);    log.info("Creating client handshake part 1 for encryption");    IoBuffer buf=IoBuffer.allocate(Constants.HANDSHAKE_SIZE);    buf.put(handshakeBytes);    buf.flip();    KeyPair keyPair=generateKeyPair();    outgoingPublicKey=getPublicKey(keyPair);    byte[] dhPointer=getFourBytesFrom(buf,Constants.HANDSHAKE_SIZE - 4);    int dhOffset=calculateOffset(dhPointer,632,772);    buf.position(dhOffset);    buf.put(outgoingPublicKey);    byte[] digestPointer=getFourBytesFrom(buf,8);    int digestOffset=calculateOffset(digestPointer,728,12);    buf.rewind();    int messageLength=Constants.HANDSHAKE_SIZE - RTMPHandshake.DIGEST_LENGTH;    byte[] message=new byte[messageLength];    buf.get(message,0,digestOffset);    int afterDigestOffset=digestOffset + RTMPHandshake.DIGEST_LENGTH;    buf.position(afterDigestOffset);    buf.get(message,digestOffset,Constants.HANDSHAKE_SIZE - afterDigestOffset);    outgoingDigest=calculateHMAC_SHA256(message,CLIENT_CONST);    buf.position(digestOffset);    buf.put(outgoingDigest);    buf.rewind();    request.put(buf);  } else {    request.put(RTMPConnection.RTMP_NON_ENCRYPTED);    request.put(handshakeBytes);  }  request.flip();  return request;}  }
class C{  private void touchEventsCancelled(){  View mobileView=getViewForID(mMobileItemId);  if (mCellIsMobile) {    mAboveItemId=INVALID_ID;    mMobileItemId=INVALID_ID;    mBelowItemId=INVALID_ID;    mobileView.setVisibility(VISIBLE);    mHoverCell=null;    invalidate();  }  mCellIsMobile=false;  mIsMobileScrolling=false;  mActivePointerId=INVALID_POINTER_ID;}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public void valueChange(ValueChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("M_Warehouse_ID"))   setM_Warehouse_ID(e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    m_C_BPartner_ID=e.getNewValue();    fBPartner.setValue(m_C_BPartner_ID);  }  form.postQueryEvent();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:16.637 -0400",hash_original_method="CEB9AD97B508C9F5B760A0174B8C8DDA",hash_generated_method="E6616CEBD1A9EB9F862C3D87E621DB87") public void addSubjectAlternativeName(int tag,String name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  public boolean isTextPresent(String text){  boolean found=false;  found=findElement("css=body").getText().contains(text);  logger.info("INFO: Found '" + text + "' : "+ found);  return found;}  }
class C{  @Override public void execute(@NotNull String actionId){  Action action=actionManager.getAction(actionId);  if (action != null) {    ActionEvent e=new ActionEvent("",new Presentation(),actionManager,0);    action.actionPerformed(e);  }}  }
class C{  public static void showSomeBytes(String tag,byte[] bytes){  Log.i("enc: " + tag + ": length: "+ bytes.length);  String str="";  int len=bytes.length;  if (len > 0) {    for (int i=0; i < len && i < 5; i++) {      str+=Integer.toHexString(bytes[i]) + " ";    }    Log.i("enc: " + tag + ": hex: "+ str);  }}  }
class C{  @Override public boolean isBroadcastDomainPort(long sw,short port){  return isBroadcastDomainPort(sw,port,true);}  }
class C{  private void outputMetadataRecordForSize(ProcessContext c,KV<KV<K,W>,WindowedValue<V>> value,long uniqueKeyCount){  c.sideOutput(outputForSize,KV.of(ismCoder.hash(ImmutableList.of(IsmFormat.getMetadataKey(),value.getKey().getValue())),KV.of(value.getKey().getValue(),uniqueKeyCount)));}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static double[] smooth(double[] in){  final int length=in.length;  double[] out=new double[length];  double[] gammaStats=getNegBin(in);  double alpha=gammaStats[0];  double beta=gammaStats[1];  double mean=gammaStats[2];  if (beta == 0) {    for (int i=0; i < length; i++) {      out[i]=mean;    }  } else {    for (int i=0; i < length; i++) {      out[i]=(in[i] + alpha) / (1 + 1 / beta);    }  }  return out;}  }
class C{  public static void loadFieldReference(String code){  try {    String fieldRef=getPropAsString(code + FIELD_REFERENCE_SUFFIX);    if (null != fieldRef) {      fieldReferences.put(code,fieldRef);    }  } catch (  Exception e) {  }}  }
class C{  @SuppressWarnings("unchecked") public static void invokeSamplers(Object o){  Class<?> currentClass=o.getClass();  while (currentClass != null) {    List<ConstructorCallback<?>> samplers=samplerMap.get(currentClass);    if (samplers != null) {      for (      ConstructorCallback sampler : samplers) {        sampler.sample(o);      }      return;    } else {      if (!subclassesAlso) {        return;      }      currentClass=currentClass.getSuperclass();    }  }}  }
class C{  public static boolean isLoopback(Object host){  if (host instanceof InetAddress) {    return LOOPBACK.equals(host);  } else {    return isLoopback(InetAddressUtil.toInetAddress(host.toString()));  }}  }
class C{  public static Shape createShape(Reader r,int wr) throws IOException, ParseException {  PathParser p=new PathParser();  AWTPathProducer ph=new AWTPathProducer();  ph.setWindingRule(wr);  p.setPathHandler(ph);  p.parse(r);  return ph.getShape();}  }
class C{  public void removeMenuKeyListener(MenuKeyListener l){  listenerList.remove(MenuKeyListener.class,l);}  }
class C{  public LocalXSessionFactoryBuilder(DataSource dataSource,ClassLoader classLoader){  this(dataSource,new PathMatchingResourcePatternResolver(classLoader));}  }
class C{  public static void choose(int n,int[] results){  int k=results.length;  for (int i=0; i < k; i++) {    boolean done=false;    while (!done) {      results[i]=RANDOM.nextInt(n);      done=true;      for (int j=0; j < i; j++) {        if (results[j] == results[i]) {          done=false;        }      }    }  }}  }
class C{  public int update(E o){  int row=getRow(o);  _list.get(row).update();  fireTableRowsUpdated(row,row);  return row;}  }
class C{  public void initializeAtomsForFinite(List<Datum> data,String filename,Random random){  beta=new double[K];  dof=new double[K];  omega=new ArrayList<>(K);  if (filename != null) {    try {      loc=BatchMixtureModel.initializeClustersFromFile(filename,K);      if (loc.size() < K) {        loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(loc,data,K,random);      }    } catch (    FileNotFoundException e) {      e.printStackTrace();      loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(data,K,random);    }  } else {    loc=BatchMixtureModel.gonzalezInitializeMixtureCenters(data,K,random);  }  log.debug("initialized cluster centers as: {}",loc);  for (int k=0; k < this.K; k++) {    beta[k]=baseBeta;    dof[k]=baseNu;    omega.add(baseOmega);  }}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  int whichf=0;  while (index > (idx[whichf + 1] - 1))   whichf++;  Matrix loghyperi=loghyper.getMatrix(idx[whichf],idx[whichf + 1] - 1,0,0);  index-=idx[whichf];  return f[whichf].computeDerivatives(loghyperi,X,index);}  }
class C{  public void clearUploadMask(int mask,int w,int h){  if (mask == maskPicture) {    con.renderRectangle(maskPicture,XRUtils.PictOpClear,XRColor.NO_ALPHA,0,0,w,h);  }}  }
class C{  public static boolean contains(long[] self,Object value){  for (  long next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  public void lineTo(float x,float y){  mPoints.add(PathPoint.lineTo(x,y));}  }
class C{  protected void duplicarExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.DUPLICAR_FICHA,request);  FichasForm fichasForm=(FichasForm)form;  fichasForm.setIdFichaOrigen(fichasForm.getId());  fichasForm.setId(null);  fichasForm.setGuid(null);  setReturnActionFordward(request,mapping.findForward("duplicarFicha"));}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public AugmentedEyes eyes(){  return augmentedEyes;}  }
class C{  public static void main(String[] args){  runTokenizer(new WordTokenizer(),args);}  }
class C{  protected void randomInitialization(double[] out,Random rnd){  double l2=0.;  while (!(l2 > 0)) {    for (int d=0; d < out.length; d++) {      final double val=rnd.nextDouble();      out[d]=val;      l2+=val * val;    }  }  if (!(l2 > 0)) {    randomInitialization(out,rnd);    return;  }  final double s=1. / Math.sqrt(l2);  for (int d=0; d < out.length; d++) {    out[d]*=s;  }}  }
class C{  private void initComposite(){  if (showLabel) {    GridLayout gl=new GridLayout(2,false);    this.setLayout(gl);    new Label(this,SWT.NONE).setText("Enter number:");  } else {    GridLayout gl=new GridLayout(1,false);    this.setLayout(gl);  }  textBox=new Text(this,SWT.BORDER | SWT.RIGHT);  textBox.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));}  }
class C{  public MultilineField(String name){  super(name,Field.Type.MULTILINE);}  }
class C{  public URLField(String name,String value){  super(name,value,TYPE_STORED);}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public static String byteArrayToUNCString(byte[] data,int nStartPos,int nNumOfBytes){  nNumOfBytes&=~1;  int nAvailCapacity=data.length - nStartPos;  if (nAvailCapacity < nNumOfBytes)   nNumOfBytes=nAvailCapacity;  StringBuilder sbuf=new StringBuilder();  sbuf.setLength(nNumOfBytes >> 1);  int nSBufPos=0;  while (nNumOfBytes > 0) {    sbuf.setCharAt(nSBufPos++,(char)((data[nStartPos] << 8) | (data[nStartPos + 1] & 0x0ff)));    nStartPos+=2;    nNumOfBytes-=2;  }  return sbuf.toString();}  }
class C{  @Override public Pair<String[],IntPair[]> tokenizeSentence(String sentence){  Sentence lbjSentence=new Sentence(sentence);  LinkedVector wordSplit=lbjSentence.wordSplit();  String[] output=new String[wordSplit.size()];  IntPair[] offsets=new IntPair[wordSplit.size()];  for (int i=0; i < output.length; i++) {    LinkedChild linkedChild=wordSplit.get(i);    output[i]=linkedChild.toString();    offsets[i]=new IntPair(linkedChild.start,linkedChild.end + 1);  }  return new Pair<>(output,offsets);}  }
class C{  protected void loadChildren(Element parent){  if (!parent.isLeaf()) {    for (int counter=0, maxCounter=parent.getElementCount(); counter < maxCounter; counter++) {      Element e=parent.getElement(counter);      ElementInfo childInfo=createElementInfo(e,this);      if (childInfo != null) {        addChild(childInfo);      } else {        loadChildren(e);      }    }  }}  }
class C{  public static Boolean isTopActivity(Context context,String packageName){  if (context == null || TextUtils.isEmpty(packageName)) {    return null;  }  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningTaskInfo> tasksInfo=activityManager.getRunningTasks(1);  if (tasksInfo == null || tasksInfo.size() < 1) {    return null;  }  try {    return packageName.equals(tasksInfo.get(0).topActivity.getPackageName());  } catch (  Exception e) {    Logger.e(e);    return false;  }}  }
class C{  protected Map<String,String> computeEntry2DpidMap(Map<String,Map<String,OFFlowMod>> map){  Map<String,String> ret=new ConcurrentHashMap<String,String>();  for (  String dpid : map.keySet()) {    for (    String entry : map.get(dpid).keySet())     ret.put(entry,dpid);  }  return ret;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.SCRIPT__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;case N4JSPackage.SCRIPT__SCRIPT_ELEMENTS:getScriptElements().clear();getScriptElements().addAll((Collection<? extends ScriptElement>)newValue);return;case N4JSPackage.SCRIPT__MODULE:setModule((TModule)newValue);return;case N4JSPackage.SCRIPT__FLAGGED_USAGE_MARKING_FINISHED:setFlaggedUsageMarkingFinished((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isRevoked(Certificate cert){  if (!cert.getType().equals("X.509")) {    throw new RuntimeException("X.509 CRL used with non X.509 Cert");  }  TBSCertList.CRLEntry[] certs=c.getRevokedCertificates();  X500Name caName=c.getIssuer();  if (certs != null) {    BigInteger serial=((X509Certificate)cert).getSerialNumber();    for (int i=0; i < certs.length; i++) {      if (isIndirect && certs[i].hasExtensions()) {        Extension currentCaName=certs[i].getExtensions().getExtension(Extension.certificateIssuer);        if (currentCaName != null) {          caName=X500Name.getInstance(GeneralNames.getInstance(currentCaName.getParsedValue()).getNames()[0].getName());        }      }      if (certs[i].getUserCertificate().getValue().equals(serial)) {        X500Name issuer;        if (cert instanceof X509Certificate) {          issuer=X500Name.getInstance(((X509Certificate)cert).getIssuerX500Principal().getEncoded());        } else {          try {            issuer=org.bouncycastle.asn1.x509.Certificate.getInstance(cert.getEncoded()).getIssuer();          } catch (          CertificateEncodingException e) {            throw new RuntimeException("Cannot process certificate");          }        }        if (!caName.equals(issuer)) {          return false;        }        return true;      }    }  }  return false;}  }
class C{  public void updateRoutingEntry(final ShardRouting newRouting,final boolean persistState){  final ShardRouting currentRouting=this.shardRouting;  if (!newRouting.shardId().equals(shardId())) {    throw new IllegalArgumentException("Trying to set a routing entry with shardId [" + newRouting.shardId() + "] on a shard with shardId ["+ shardId()+ "]");  }  if ((currentRouting == null || newRouting.isSameAllocation(currentRouting)) == false) {    throw new IllegalArgumentException("Trying to set a routing entry with a different allocation. Current " + currentRouting + ", new "+ newRouting);  }  try {    if (currentRouting != null) {      if (!newRouting.primary() && currentRouting.primary()) {        logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");      }      if (currentRouting.equalsIgnoringMetaData(newRouting)) {        this.shardRouting=newRouting;        return;      }    }    if (state == IndexShardState.POST_RECOVERY) {      if (newRouting.state() == ShardRoutingState.STARTED || newRouting.state() == ShardRoutingState.RELOCATING) {        try {          engine().refresh("cluster_state_started");        } catch (        Throwable t) {          logger.debug("failed to refresh due to move to cluster wide started",t);        }        boolean movedToStarted=false;synchronized (mutex) {          if (state == IndexShardState.POST_RECOVERY) {            changeState(IndexShardState.STARTED,"global state is [" + newRouting.state() + "]");            movedToStarted=true;          } else {            logger.debug("state [{}] not changed, not in POST_RECOVERY, global state is [{}]",state,newRouting.state());          }        }        if (movedToStarted) {          indicesLifecycle.afterIndexShardStarted(this);        }      }    }    this.shardRouting=newRouting;    indicesLifecycle.shardRoutingChanged(this,currentRouting,newRouting);  }  finally {    if (persistState) {      persistMetadata(newRouting,currentRouting);    }  }}  }
class C{  public SVGOMTextPathElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  static void addSecDnsExtensionIfPresent(ImmutableList.Builder<ResponseExtension> extensions,ImmutableSet<DelegationSignerData> dsData){  if (!dsData.isEmpty()) {    extensions.add(SecDnsInfoExtension.create(dsData));  }}  }
class C{  public void writeLong(final long data,final int numBits){  if (numBits < 32 && data >= (1 << numBits)) {    throw new IllegalArgumentException(String.format("Truncating value %d to %d-bit integer",data,numBits));  }  for (int i=numBits - 1; i >= 0; i--) {    boolean bit=(data >> i & 1) != 0;    if (bit) {      currentByte|=(1 << currentBitIndex);    }    --currentBitIndex;    if (currentBitIndex < 0) {      writeCurrentByte();    }  }}  }
class C{  public boolean forceRegeneration(int x,int z){  GlowChunk chunk=getChunk(x,z);  if (chunk == null || !chunk.unload(false,false)) {    return false;  }  chunk.setPopulated(false);  try {    generateChunk(chunk,x,z);    populateChunk(x,z,false);  } catch (  Throwable ex) {    GlowServer.logger.log(Level.SEVERE,"Error while regenerating chunk (" + x + ","+ z+ ")",ex);    return false;  }  return true;}  }
class C{  public PointImpl(double x,double y){  this.x=x;  this.y=y;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.762 -0400",hash_original_method="C54F0CC2DA015E75B52724488AA233EF",hash_generated_method="A59A83563FF6FF0A8C9F9DDE17ECD4F9") public SwappedDataInputStream(InputStream input){  super(input);}  }
class C{  public void vertical(boolean setVerticalOrientation){  if (manager != null) {    if (setVerticalOrientation)     manager.setOrientation(LinearLayoutManager.VERTICAL);  }}  }
class C{  private static byte[] ip4MaskToIp6(byte[] ip4){  if (ip4.length != 4)   throw new IllegalArgumentException("IPv4 mask must be four octets");  byte[] ip6=new byte[16];  for (int i=0; i < 16 - 4; i++)   ip6[i]=(byte)0Xff;  for (int i=0; i < 4; i++)   ip6[12 + i]=ip4[i];  return ip6;}  }
class C{  public EntityMigrationBuilder addProperty(String property,Object defaultValue){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new AddProperty(property,defaultValue)));  return this;}  }
class C{  public static void checkFileNameIsNewStandard(CachedFile newfile,File oldfile){  if (!newfile.exists() && oldfile.exists()) {    oldfile.renameTo(newfile);    newfile.clearCachedInformation();    CachedFileManager.removeCachedFile(oldfile);    logger.info("File " + oldfile.getName() + " renamed to "+ newfile.getName());  }}  }
class C{  public Builder port(final int port){  this.port=port;  return this;}  }
class C{  public boolean isOverrideCameraControl(){  if (editTool != null) {    return editTool.isOverrideCameraControl();  } else {    return false;  }}  }
class C{  protected void parseWith(InStream in) throws IOException {  actions.startWith();  blockDepth++;}  }
class C{  @Override public void writeTo(OutputStream out) throws IOException {  out.write(buf,0,count);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static java.lang.Float valueOf(java.lang.String s) throws java.lang.NumberFormatException {  return null;}  }
class C{  public static Color parseColor(String colorString,boolean forceAlpha) throws NumberFormatException {  int value;  if (colorString.length() == 3) {    colorString=new StringBuilder().append(colorString.charAt(0)).append(colorString.charAt(0)).append(colorString.charAt(1)).append(colorString.charAt(1)).append(colorString.charAt(2)).append(colorString.charAt(2)).toString();  }  try {    value=(int)Long.parseLong(colorString,16);  } catch (  NumberFormatException nfe) {    value=Long.decode(colorString).intValue();  }  if (colorString.length() < 7 && !colorString.equals("0")) {    return new Color(value);  }  return createColor(value,forceAlpha);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);  unit=getArguments() == null ? null : (VideoBlockModel)getArguments().getSerializable(Router.EXTRA_COURSE_UNIT);  hasNextUnit=getArguments().getBoolean(HAS_NEXT_UNIT_ID);  hasPreviousUnit=getArguments().getBoolean(HAS_PREV_UNIT_ID);}  }
class C{  public ModuleVersion(int major,int minor,int micro){  this(major,minor,micro,null);}  }
class C{  public DEnvironmentVariables(JDialog parent,String title,Dialog.ModalityType modality){  super(parent,title,modality);  initComponents();}  }
class C{  public PrinterMakeAndModel(String makeAndModel,Locale locale){  super(makeAndModel,locale);}  }
class C{  private void translateModel(SecuritySpecification originalSpec){  for (  Method m : originalSpec.getWhitelist()) {    MethodModel model=new MethodModel(m);    this.whitelist.add(model);    model.addPropertyChangeListener(this);  }  Map<String,List<Hotspot>> signatureToHotspotMap=JSAStrings.v().getSignatureToHotspotMap();  for (  Map.Entry<Method,List<Method>> entry : originalSpec.getEventBlocks().entrySet()) {    Method inputEvent=entry.getKey();    List<Method> outputEvents=entry.getValue();    ArrayList<MethodModel> modelOutputEvents=new ArrayList<MethodModel>();    MethodModel model=new MethodModel(inputEvent);    if (this.inputEventBlocks.get(model) != null) {      logger.debug("Method {} already in event blocks",model);    }    this.inputEventBlocks.put(model,modelOutputEvents);    model.addPropertyChangeListener(this);    updateInfoFlowSummaryMap(model,inputEvent);    for (    Method outputEvent : outputEvents) {      MethodModel methodModel=new MethodModel(outputEvent);      modelOutputEvents.add(methodModel);      methodModel.addPropertyChangeListener(this);      updateInfoFlowSummaryMap(methodModel,outputEvent);      List<Hotspot> apiHotspots=signatureToHotspotMap.get(model.getSootMethodSignature());      Map<SourceLocationTag,List<HotspotModel>> map=computeSourceLocToHotspotsMap(apiHotspots);      for (      CodeLocationModel line : methodModel.getLines()) {        line.addPropertyChangeListener(this);        if (map != null) {          logger.debug("Hotspot for method {} is in map",methodModel);          for (          SourceLocationTag loc : map.keySet()) {            if (line.getClz().equals(loc.getClz()) && line.getLine() == loc.getLine()) {              line.addHotspots(map.get(loc));            }          }        }      }    }    Collections.sort(modelOutputEvents);  }}  }
class C{  public MyIdleHandler(TcpWorker tcpWorker){  super();  this.tcpWorker=tcpWorker;}  }
class C{  public static double modulus(double left,double right){  return left % right;}  }
class C{  public TLongLongHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public void requestBrowserContent(InfoDisplayEvent event){  displayBrowserContent(event.getInformation());}  }
class C{  public MP3Player(){  this(null);}  }
class C{  public void addCluster(GeneratorInterface c){  generators.add(c);}  }
class C{  public void addAll(Stats values){  if (values.count() == 0) {    return;  }  if (count == 0) {    count=values.count();    mean=values.mean();    sumOfSquaresOfDeltas=values.sumOfSquaresOfDeltas();    min=values.min();    max=values.max();  } else {    count+=values.count();    if (isFinite(mean) && isFinite(values.mean())) {      double delta=values.mean() - mean;      mean+=delta * values.count() / count;      sumOfSquaresOfDeltas+=values.sumOfSquaresOfDeltas() + delta * (values.mean() - mean) * values.count();    } else {      mean=calculateNewMeanNonFinite(mean,values.mean());      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,values.min());    max=Math.max(max,values.max());  }}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public static Filter createFilterForObjectClassAntAttrValue(final String objectClass,final String attr,final String value){  String[] objectClasses=processObjectClasses(objectClass);  return createFilterForObjectClassAndFilter(objectClasses,new EqualsFilter(attr,value));}  }
class C{  public final AC size(String s){  return size(s,curIx);}  }
class C{  public CAMatrix addNoise(float probability,int minState,int maxState){  if (rule != null) {    minState=MathUtils.clip(minState,0,rule.getStateCount());    maxState=MathUtils.clip(maxState,0,rule.getStateCount());    for (int x=0; x < width; x++) {      for (int y=0; y < height; y++) {        if (MathUtils.randomChance(probability)) {          int idx=y * width + x;          swap[idx]=matrix[idx]=MathUtils.random(minState,maxState);        }      }    }    return this;  }  throw new IllegalStateException("CA rule not yet initialized");}  }
class C{  public static Double convertBytesToGB(Long size){  if (size == null) {    return 0.0;  }  return size / (double)GB;}  }
class C{  public static ProgressDialog generateProgressDialog(Context context,boolean cancelable){  ProgressDialog progressDialog=new ProgressDialog(context,R.style.ProgressTheme);  progressDialog.setMessage(context.getString(R.string.Loading));  progressDialog.setCancelable(cancelable);  return progressDialog;}  }
class C{  public void pointerPressed(final int[] x,final int[] y){  if (impl.getCurrentForm() == null) {    return;  }  lastInteractionWasKeypad=false;  longPointerCharged=true;  longKeyPressTime=System.currentTimeMillis();  pointerX=x[0];  pointerY=y[0];  if (x.length == 1) {    addPointerEvent(POINTER_PRESSED,x[0],y[0]);  } else {    addPointerEvent(POINTER_PRESSED_MULTI,x,y);  }}  }
class C{  public void testBadStreamBounds(){  ThreadLocalRandom r=ThreadLocalRandom.current();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  testDoubleBadOriginBound(null);}  }
class C{  public boolean isRFC3489Compatible(){  return (transactionID.length == 16);}  }
class C{  public static void printRootCauseStackTrace(final Throwable throwable){  printRootCauseStackTrace(throwable,System.err);}  }
class C{  void destroy(){  if (!this.destroyed) {    this.destroyed=true;    this.dlock.getStats().incGrantTokens(-1);    if (this.pendingRequests != null) {      this.dlock.getStats().incPendingRequests(-this.pendingRequests.size());      this.dlock.getStats().incRequestQueues(-1);    }  }}  }
class C{  @Override synchronized public void shutdownNow(){  if (!isOpen())   return;  final QueryEngine queryEngine=this.queryEngine.get();  if (queryEngine != null) {    queryEngine.shutdownNow();  }  if (concurrencyManager != null) {    concurrencyManager.shutdownNow();  }  if (localTransactionManager != null) {    localTransactionManager.shutdownNow();  }  if (resourceManager != null) {    resourceManager.shutdownNow();  }  super.shutdownNow();}  }
class C{  @Override public Iterator<E> iterator(){  return new TObjectHashIterator<E>(this);}  }
class C{  private void deleteChildren(Element container){  while (container.hasChildNodes()) {    container.removeChild(container.getLastChild());  }}  }
class C{  public static void gracefullyDisposeOf(final Disposable... disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables) {      gracefullyDisposeOf(disposable);    }  }}  }
class C{  public void dontCallLoadPixels(){  loadPixelsEnabled=false;}  }
class C{  public final void onPause(){  logd("onPause");  mState=State.PAUSED;  mServiceListener=null;}  }
class C{  public void removeDistinct(Value[] values){  if (!distinct) {    DbException.throwInternalError();  }  ValueArray array=ValueArray.get(values);  distinctRows.remove(array);  rowCount=distinctRows.size();}  }
class C{  public SynchronizationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public GridClientNode balancedNode(Collection<? extends GridClientNode> nodes){  assert !nodes.isEmpty();  int size=nodes.size();  if (isPreferDirectNodes()) {    Collection<GridClientNode> direct=selectDirectNodes(nodes);    int directSize=direct.size();    if (directSize > 0 && directSize < size) {      nodes=direct;      size=nodes.size();    }  }  int idx=random.nextInt(size);  if (nodes instanceof List)   return ((List<GridClientNode>)nodes).get(idx); else {    Iterator<? extends GridClientNode> it=nodes.iterator();    while (idx > 0) {      it.next();      idx--;    }    return it.next();  }}  }
class C{  public Matrix4f sub(Matrix4f subtrahend){  return sub(subtrahend,this);}  }
class C{  long prePoll(){  lock.lock();  try {    long n=head;    while (n != 0) {      if (!polling(n)) {        polling(n,true);        break;      }      n=next(n);    }    return n;  }  finally {    lock.unlock();  }}  }
class C{  public static void registerImage(String key,String partialURL){  try {    ImageDescriptor id=ImageDescriptor.createFromURL(new URL(ICON_BASE_URL,partialURL));    registerImageDescriptor(key,id);  } catch (  Exception e) {    TypeScriptUIPlugin.log("Error while registering image " + key + " from "+ partialURL,e);  }}  }
class C{  public void sendActionStatusMessage(final String tenant,final ActionStatus actionStatus,final List<String> updateResultMessages,final Long actionId){  final Message message=createActionStatusMessage(tenant,actionStatus,updateResultMessages,actionId);  sendMessage(message);}  }
class C{  public void clear(){  this.added=0;  this.removed=0;  this.persisted=0;  this.sensed=0;  this.preSolve=0;  this.postSolve=0;}  }
class C{  private void testExportImportOne(TrackFileFormat trackFileFormat){  EndToEndTestUtils.changeToMetricUnits();  showGradeElevation();  addTrackFromGpxFile();  exportImport(trackFileFormat);  checkTrackFromGpxFile();}  }
class C{  @Nullable public GridCacheMvccCandidate addDhtLocal(UUID nearNodeId,GridCacheVersion nearVer,AffinityTopologyVersion topVer,long threadId,GridCacheVersion ver,@Nullable GridCacheVersion serOrder,@Nullable GridCacheVersion serReadVer,long timeout,boolean reenter,boolean tx,boolean implicitSingle) throws GridCacheEntryRemovedException, GridDistributedLockCancelledException {  assert serReadVer == null || serOrder != null;  assert !reenter || serOrder == null;  GridCacheMvccCandidate cand;  GridCacheMvccCandidate prev;  GridCacheMvccCandidate owner;  CacheObject val;synchronized (this) {    checkRemoved(ver);    checkRemoved(nearVer);    checkObsolete();    GridCacheMvcc mvcc=mvccExtras();    if (mvcc == null) {      mvcc=new GridCacheMvcc(cctx);      mvccExtras(mvcc);    }    prev=mvcc.anyOwner();    boolean emptyBefore=mvcc.isEmpty();    cand=mvcc.addLocal(this,nearNodeId,nearVer,threadId,ver,timeout,serOrder,reenter,tx,implicitSingle,true);    if (cand == null)     return null;    cand.topologyVersion(topVer);    owner=mvcc.anyOwner();    if (owner != null)     cand.ownerVersion(owner.version());    boolean emptyAfter=mvcc.isEmpty();    checkCallbacks(emptyBefore,emptyAfter);    val=this.val;    if (mvcc.isEmpty())     mvccExtras(null);  }  if (!cand.reentry())   cctx.mvcc().addNext(cctx,cand);  checkOwnerChanged(prev,owner,val);  return cand;}  }
class C{  static void putShort(long ptr,short data){  unsafe.putShort(ptr,data);}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public static Reference defaultReference(){  return ReferenceImpl.defaultInstance();}  }
class C{  @DSComment("Touch event tracking") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:14.351 -0500",hash_original_method="3EB8DC396E0D228312A300339405C305",hash_generated_method="06F1896A45565DE0EEB2186E14C17B70") public void clear(){  nativeClear(mPtr);}  }
class C{  public ActionEvent(Object source,int x,int y){  this.source=source;  this.keyEvent=x;  this.y=y;  this.trigger=Type.Pointer;}  }
class C{  private void extract(Detail detail,DefaultType access) throws Exception {  List<FieldDetail> fields=detail.getFields();  if (access == FIELD) {    for (    FieldDetail entry : fields) {      Annotation[] list=entry.getAnnotations();      Field field=entry.getField();      Class real=field.getType();      if (!isStatic(field) && !isTransient(field)) {        process(field,real,list);      }    }  }}  }
class C{  @Override public String generateContractorBillNumber(final ContractorBillRegister ContractorBillRegister){  ContractorBillNumberGenerator c=beanResolver.getAutoNumberServiceFor(ContractorBillNumberGenerator.class);  final String contractorBillNumber=c.getNextNumber(ContractorBillRegister);  return contractorBillNumber;}  }
class C{  public boolean isAncestor(T other){  if (getDepth() >= other.getDepth())   return false;  while (true) {    if (other == this)     return true;    other=other.getParent();    if (other == null)     return false;  }}  }
class C{  @SuppressWarnings("rawtypes") protected void assertDocExists(HttpSolrClient solr,String coll,String docId) throws Exception {  NamedList rsp=realTimeGetDocId(solr,docId);  String match=JSONTestUtil.matchObj("/id",rsp.get("doc"),new Integer(docId));  assertTrue("Doc with id=" + docId + " not found in "+ solr.getBaseURL()+ " due to: "+ match+ "; rsp="+ rsp,match == null);}  }
class C{  public boolean isPerfectSquareC(int num){  long t=num;  while (t * t > num) {    t=(t + num / t) / 2;  }  return t * t == num;}  }
class C{  public void put(long hash,byte[] encoding,Object object){  if (last_cached == cache_size) {    last_cached=0;    cache_is_full=true;  }  int index=last_cached++;  hash|=getSuffHash(encoding);  if (cache_is_full) {    long idx_hash=(hashes[index] | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      System.out.println("WARNING! " + idx);      idx=-(idx + 1);    }    long new_hash_idx=(hash | (index + 1));    int new_idx=Arrays.binarySearch(hashes_idx,new_hash_idx);    if (new_idx >= 0) {      if (idx != new_idx) {        System.out.println("WARNING: ");        System.out.println(">> idx: " + idx + " new_idx: "+ new_idx);      }    } else {      new_idx=-(new_idx + 1);      if (new_idx > idx) {        System.arraycopy(hashes_idx,idx + 1,hashes_idx,idx,new_idx - idx - 1);        hashes_idx[new_idx - 1]=new_hash_idx;      } else       if (idx > new_idx) {        System.arraycopy(hashes_idx,new_idx,hashes_idx,new_idx + 1,idx - new_idx);        hashes_idx[new_idx]=new_hash_idx;      } else {        hashes_idx[new_idx]=new_hash_idx;      }    }  } else {    long idx_hash=(hash | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      idx=-(idx + 1);    }    idx=idx - 1;    if (idx != cache_size - index - 1) {      System.arraycopy(hashes_idx,cache_size - index,hashes_idx,cache_size - index - 1,idx - (cache_size - index) + 1);    }    hashes_idx[idx]=idx_hash;  }  hashes[index]=hash;  encodings[index]=encoding;  cache[index]=object;}  }
class C{  public TaskProgress(TaskProgress other){  this.stageName=other.getStageName();  this.taskId=other.getTaskId();  this.applyLatencyMillis=other.getApplyLatencyMillis();  this.cancelled=other.isCancelled();  this.blockCount=other.getBlockCount();  this.endMillis=other.getEndMillis();  this.eventCount=other.getEventCount();  this.eventCountAtLastCommit=other.getEventCountAtLastCommit();  this.lastProcessedEvent=other.getLastProcessedEvent();  this.lastCommittedEvent=other.getLastCommittedEvent();  this.lastCommittedBlockSize=other.getLastCommittedBlockSize();  this.lastCommittedBlockMillis=other.getLastCommittedBlockMillis();  this.lastCommitMillis=other.getLastCommitMillis();  this.startMillis=other.getStartMillis();  this.state=other.getState();  this.totalApplyMillis=other.getTotalApplyMillis();  this.totalExtractMillis=other.getTotalExtractMillis();  this.totalFilterMillis=other.getTotalFilterMillis();}  }
class C{  @Deprecated public boolean isFillBelowLine(){  return mFillBelowLine.size() > 0;}  }
class C{  public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {  if (limit - position >= length) {    System.arraycopy(value,offset,buffer,position,length);    position+=length;  } else {    throw new OutOfSpaceException(position,limit);  }}  }
class C{  @Override public String toString(){  return super.toString() + " [Parent: " + parent+ " SDom: "+ semiDominator+ " Dom: "+ dominator+ "]";}  }
class C{  public boolean isGhostMode(){  return ghostmode;}  }
class C{  public void addElement(int id,byte[] data){  elements.add(new ExtensionElement(id,data));}  }
class C{  @Override public void featurizeSentence(SymmetricalWordAlignment sent,AlignmentGrid alGrid){}  }
class C{  static public void put(String msg,Throwable exception){  put(logWriter,msg,exception);}  }
class C{  public RegexValidatorTestCase(String name){  super(name);}  }
class C{  public void shape(char[] text,int start,int count){  if (isContextual()) {    contextualShape(text,start,count,fDefaultContextIndex);  } else {    nonContextualShape(text,start,count);  }}  }
class C{  public SpringContextLoader(){}  }
class C{  TaggerThread(BlockingQueue<AnnotationJob> queue){  this.jobqueue=queue;synchronized (counterlock) {    this.setName("Tagger-" + (counter++));  }}  }
class C{  protected void update(boolean applyConstraints){  Vec2D delta=b.sub(a);  float dist=delta.magnitude() + EPS;  float normDistStrength=(dist - restLength) / (dist * (a.invWeight + b.invWeight)) * strength;  if (!a.isLocked && !isALocked) {    a.addSelf(delta.scale(normDistStrength * a.invWeight));    if (applyConstraints) {      a.applyConstraints();    }  }  if (!b.isLocked && !isBLocked) {    b.addSelf(delta.scale(-normDistStrength * b.invWeight));    if (applyConstraints) {      b.applyConstraints();    }  }}  }
class C{  public boolean isAfter(MonthDay other){  return compareTo(other) > 0;}  }
class C{  public final void close(){  LuaValue[] old=array;  array=new LuaValue[]{old[index]};  old[index]=null;  index=0;}  }
class C{  public void updateInterface(){}  }
class C{  public HttpConnection(String host,int port){  this(null,-1,host,null,port,Protocol.getProtocol("http"));}  }
class C{  public Builder maxSubscriberCount(int maxSubscriberCount){  this.maxSubscriberCount=maxSubscriberCount;  return this;}  }
class C{  private void init(){  connectPanel.setLayout(new CardLayout());  connectorPanels[0]=new AllToAllPanel(allToAll,networkPanel);  connectorPanels[1]=new OneToOnePanel(oneToOne);  connectorPanels[2]=SparseConnectionPanel.createSparsityAdjustmentPanel(sparse,networkPanel);  connectPanel.add(connectorPanels[0],AllToAll.getName());  connectPanel.add(connectorPanels[1],OneToOne.getName());  connectPanel.add(connectorPanels[2],Sparse.getName());  ((CardLayout)connectPanel.getLayout()).show(connectPanel,AllToAll.getName());  JPanel cbPanel=new JPanel(new FlowLayout());  cbPanel.add(new JLabel("Connection Manager: "));  cbPanel.add(cbConnectionType);  mainPanel.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.fill=GridBagConstraints.NONE;  gbc.gridx=0;  gbc.gridy=0;  gbc.insets=new Insets(5,5,5,5);  mainPanel.add(cbPanel,gbc);  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.gridy=1;  gbc.gridwidth=4;  mainPanel.add(connectPanel,gbc);}  }
class C{  public static String changeReturnType(String classname,String desc){  int i=desc.indexOf(')');  if (i < 0)   return desc; else {    StringBuffer newdesc=new StringBuffer();    newdesc.append(desc.substring(0,i + 1));    newdesc.append('L');    newdesc.append(classname.replace('.','/'));    newdesc.append(';');    return newdesc.toString();  }}  }
class C{  @Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){  final Display display=(Display)parent.getTag();  final Display.Mode[] modes=display.getSupportedModes();  setPresentationDisplayMode(display,position >= 1 && position <= modes.length ? modes[position - 1].getModeId() : 0);}  }
class C{  private void persistBackupInfo(String backupTag) throws Exception {  File targetDir=new File(getBackupDir(),backupTag);  if (!targetDir.exists() || !targetDir.isDirectory()) {    return;  }  File infoFile=new File(targetDir,backupTag + BackupConstants.BACKUP_INFO_SUFFIX);  Date now=new Date();  try (OutputStream fos=new FileOutputStream(infoFile)){    Properties properties=new Properties();    properties.setProperty(BackupConstants.BACKUP_INFO_VERSION,getCurrentVersion());    properties.setProperty(BackupConstants.BACKUP_INFO_HOSTS,getHostsWithDualInetAddrs().values().toString());    properties.setProperty(BackupConstants.BACKUP_INFO_CREATE_TIME,Long.toString(now.getTime()));    DrUtil drutil=new DrUtil();    drutil.setCoordinator(coordinatorClient);    String siteId=drutil.getLocalSite().getUuid();    properties.setProperty(BackupConstants.BACKUP_INFO_SITE_ID,siteId);    String siteName=drutil.getLocalSite().getName();    properties.setProperty(BackupConstants.BACKUP_INFO_SITE_NAME,siteName);    properties.store(fos,null);    FileUtils.chown(infoFile,BackupConstants.STORAGEOS_USER,BackupConstants.STORAGEOS_GROUP);    FileUtils.chmod(infoFile,BACKUP_FILE_PERMISSION);  } catch (  Exception ex) {    log.error("Failed to record backup info",ex);    throw ex;  }}  }
class C{  void checkLabel(final Label label,final boolean checkVisited,final String msg){  if (label == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null)");  }  if (checkVisited && labels.get(label) == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must be visited first)");  }}  }
class C{  protected SimpleHashtable(RawPageSpace rps,int logSize,Extent es){  mask=Word.fromIntZeroExtend((1 << logSize) - 1);  entrySize=es.plus(BYTES_IN_WORD);  size=Extent.fromIntZeroExtend((1 << logSize) * entrySize.toInt());  base=Address.zero();  space=rps;  valid=false;}  }
class C{  public void flush() throws IOException {  this.flushBuffer();}  }
class C{  public void read(InputStream is) throws IOException {  FastInputStream fis=new FastInputStream(is);  byte[] lbuf=new byte[512];  attr.read(fis,lbuf);  int ecount=0, acount=0;  int asize=2;  int len;  String name=null;  boolean skipEmptyLines=true;  byte[] lastline=null;  while ((len=fis.readLine(lbuf)) != -1) {    if (lbuf[--len] != '\n') {      throw new IOException("manifest line too long");    }    if (len > 0 && lbuf[len - 1] == '\r') {      --len;    }    if (len == 0 && skipEmptyLines) {      continue;    }    skipEmptyLines=false;    if (name == null) {      name=parseName(lbuf,len);      if (name == null) {        throw new IOException("invalid manifest format");      }      if (fis.peek() == ' ') {        lastline=new byte[len - 6];        System.arraycopy(lbuf,6,lastline,0,len - 6);        continue;      }    } else {      byte[] buf=new byte[lastline.length + len - 1];      System.arraycopy(lastline,0,buf,0,lastline.length);      System.arraycopy(lbuf,1,buf,lastline.length,len - 1);      if (fis.peek() == ' ') {        lastline=buf;        continue;      }      name=new String(buf,0,buf.length,"UTF8");      lastline=null;    }    Attributes attr=getAttributes(name);    if (attr == null) {      attr=new Attributes(asize);      entries.put(name,attr);    }    attr.read(fis,lbuf);    ecount++;    acount+=attr.size();    asize=Math.max(2,acount / ecount);    name=null;    skipEmptyLines=true;  }}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  @HLEFunction(nid=0x224C5F44,version=150) public int sceNetResolverStartNtoA(@CheckArgument("checkRid") int rid,PspString hostname,TPointer32 addr,int timeout,int retry){  try {    InetAddress inetAddress=InetAddress.getByName(hostname.getString());    int resolvedAddress=sceNetInet.bytesToInternetAddress(inetAddress.getAddress());    addr.setValue(resolvedAddress);    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetResolverStartNtoA returning address 0x%08X('%s')",resolvedAddress,sceNetInet.internetAddressToString(resolvedAddress)));    } else     if (log.isInfoEnabled()) {      log.info(String.format("sceNetResolverStartNtoA resolved '%s' into '%s'",hostname.getString(),sceNetInet.internetAddressToString(resolvedAddress)));    }  } catch (  UnknownHostException e) {    log.error(e);    return SceKernelErrors.ERROR_NET_RESOLVER_INVALID_HOST;  }  return 0;}  }
class C{  public static boolean isValid(long creditCardNumber){  int i=findMatchingRange(creditCardNumber);  if (i < 0) {    return false;  }  if (ranges[i].hasCheckDigit) {    long number=creditCardNumber;    int checksum=0;    for (int place=0; place < 16; place++) {      int digit=(int)(number % 10);      number/=10;      if ((place & 1) == 0) {        checksum+=digit;      } else {        checksum+=z(digit);      }      if (number == 0) {        break;      }    }    return (checksum % 10) == 0;  }  return true;}  }
class C{  public static final FileTime winTimeToFileTime(long wtime){  return FileTime.from(wtime / 10 + WINDOWS_EPOCH_IN_MICROSECONDS,TimeUnit.MICROSECONDS);}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  @Override public String toString(){  return "MemoryCache " + this.name + " max size = "+ this.getCapacity()+ " current size = "+ this.currentUsedCapacity.get()+ " number of items: "+ this.getNumObjects();}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public X509Certificate generate(PrivateKey key,String provider,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=generateTbsCert();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,provider,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  try {    return generateJcaObject(tbsCert,signature);  } catch (  CertificateParsingException e) {    throw new ExtCertificateEncodingException("exception producing certificate object",e);  }}  }
class C{  public void validate(Password password){  if (changeInterval == 0) {    return;  }  long milliseconds=changeInterval * 60 * 1000;  long lastChangeTime=password.getLatestChangedTime();  long interval=System.currentTimeMillis() - lastChangeTime;  _log.info(MessageFormat.format("expect > {0} minutes, real = {1} minutes",changeInterval,interval / (60 * 1000)));  if (interval < milliseconds) {    _log.info("fail");    throw APIException.badRequests.passwordInvalidInterval(changeInterval);  }  _log.info("pass");}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public boolean visit(InsertEdit edit){  return visitNode(edit);}  }
class C{  private void resetDefinitionLists(){  udaDefinitions=null;  customerUdaDefinitions=null;  subscriptionUdaDefinitions=null;}  }
class C{  public void removeInvitationListener(InvitationListener listener){synchronized (invitationsListeners) {    if (invitationsListeners.contains(listener)) {      invitationsListeners.remove(listener);    }    if (invitationsListeners.size() == 0) {      cancel();    }  }}  }
class C{  public void start(){  lock.lock();  try {    if (indexerTask != null)     throw new IllegalStateException();    indexerTask=new FutureTask<Void>(new IndexerMainTask());    indexerService.submit(indexerTask);    parsing.set(true);  }  finally {    lock.unlock();  }}  }
class C{  private int _convertSurrogate(int firstPart,int secondPart){  if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {    throw new IllegalArgumentException("Broken surrogate pair: first char 0x" + Integer.toHexString(firstPart) + ", second 0x"+ Integer.toHexString(secondPart)+ "; illegal combination");  }  return 0x10000 + ((firstPart - SURR1_FIRST) << 10) + (secondPart - SURR2_FIRST);}  }
class C{  private void readDiffEncoding(final BufferedReader br) throws Exception {  String line, name, rawVal, base, val;  int code, ptr;  while ((line=br.readLine()) != null) {    line=line.trim();    if (line.startsWith("readonly")) {      break;    }    if (line.startsWith("dup") && line.contains("/")) {      final StringTokenizer info=new StringTokenizer(line," /");      if (info.countTokens() >= 3) {        info.nextToken();        rawVal=info.nextToken();        ptr=rawVal.indexOf('#');        if (ptr == -1) {          code=Integer.parseInt(rawVal);        } else {          base=rawVal.substring(0,ptr);          val=rawVal.substring(ptr + 1,rawVal.length());          code=Integer.parseInt(val,Integer.parseInt(base));        }        name=info.nextToken();        putChar(code,name);        final char c=name.charAt(0);        if (c == 'B' || c == 'C' || c == 'c' || c == 'G') {          int i=1;          final int l=name.length();          while (!isHex && i < l) {            isHex=Character.isLetter(name.charAt(i++));          }        }      }    }  }}  }
class C{  public void resetNew(){  setC_Payment_ID(0);  set_ValueNoCheck("DocumentNo",null);  setDocAction(DOCACTION_Prepare);  setDocStatus(DOCSTATUS_Drafted);  setProcessed(false);  setPosted(false);  setIsReconciled(false);  setIsAllocated(false);  setIsOnline(false);  setIsDelayedCapture(false);  setC_Invoice_ID(0);  setC_Order_ID(0);  setC_Charge_ID(0);  setC_Project_ID(0);  setIsPrepayment(false);}  }
class C{  private SecretKeySpec createRC4Key(byte[] keyBytes){  return new SecretKeySpec(keyBytes,KEY_RC4);}  }
class C{  private void actionZoom(){  int AD_Window_ID=MTable.get(Env.getCtx(),MLocator.Table_ID).getAD_Window_ID();  if (AD_Window_ID <= 0)   AD_Window_ID=139;  log.info("");  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  AWindow frame=new AWindow();  MQuery zoomQuery=new MQuery();  zoomQuery.addRestriction(MLocator.COLUMNNAME_M_Locator_ID,MQuery.EQUAL,getValue());  zoomQuery.setRecordCount(1);  if (!frame.initWindow(AD_Window_ID,zoomQuery))   return;  AEnv.addToWindowManager(frame);  AEnv.showCenterScreen(frame);  frame=null;  setCursor(Cursor.getDefaultCursor());}  }
class C{  public void checkServerTrusted(final X509Certificate[] certs,final String authType){}  }
class C{  public String stackCrawl(final Request entry){  byte[] handle=UTF8.getBytes(entry.profileHandle());  final CrawlProfile profile=this.crawler.get(handle);  String error;  if (profile == null) {    error="LOST STACKER PROFILE HANDLE '" + entry.profileHandle() + "' for URL "+ entry.url().toNormalform(true);    CrawlStacker.log.info(error);    return error;  }  error=checkAcceptanceChangeable(entry.url(),profile,entry.depth());  if (error != null)   return error;  error=checkAcceptanceInitially(entry.url(),profile);  if (error != null)   return error;  final boolean local=Base64Order.enhancedCoder.equal(entry.initiator(),UTF8.getBytes(this.peers.mySeed().hash));  final boolean proxy=(entry.initiator() == null || entry.initiator().length == 0 || ASCII.String(entry.initiator()).equals("------------")) && profile.handle().equals(this.crawler.defaultProxyProfile.handle());  final boolean remote=profile.handle().equals(this.crawler.defaultRemoteProfile.handle());  final boolean global=(profile.remoteIndexing()) && (entry.depth() == profile.depth()) && ((this.peers.mySeed().isSenior()) || (this.peers.mySeed().isPrincipal()));  if (!local && !global && !remote&& !proxy) {    error="URL '" + entry.url().toString() + "' cannot be crawled. initiator = "+ ((entry.initiator() == null) ? "" : ASCII.String(entry.initiator()))+ ", profile.handle = "+ profile.handle();    CrawlStacker.log.severe(error);    return error;  }  String warning=null;  if (TextParser.supportsExtension(entry.url()) != null) {    warning=this.nextQueue.noticeURL.push(NoticedURL.StackType.NOLOAD,entry,profile,this.robots);    return null;  }  if (global) {    if (proxy)     CrawlStacker.log.warn("URL '" + entry.url().toString() + "' has conflicting initiator properties: global = true, proxy = true, initiator = proxy"+ ", profile.handle = "+ profile.handle());    if (remote)     CrawlStacker.log.warn("URL '" + entry.url().toString() + "' has conflicting initiator properties: global = true, remote = true, initiator = "+ ASCII.String(entry.initiator())+ ", profile.handle = "+ profile.handle());    warning=this.nextQueue.noticeURL.push(NoticedURL.StackType.GLOBAL,entry,profile,this.robots);  } else   if (local) {    if (proxy)     CrawlStacker.log.warn("URL '" + entry.url().toString() + "' has conflicting initiator properties: local = true, proxy = true, initiator = proxy"+ ", profile.handle = "+ profile.handle());    if (remote)     CrawlStacker.log.warn("URL '" + entry.url().toString() + "' has conflicting initiator properties: local = true, remote = true, initiator = "+ ASCII.String(entry.initiator())+ ", profile.handle = "+ profile.handle());    warning=this.nextQueue.noticeURL.push(NoticedURL.StackType.LOCAL,entry,profile,this.robots);  } else   if (proxy) {    if (remote)     CrawlStacker.log.warn("URL '" + entry.url().toString() + "' has conflicting initiator properties: proxy = true, remote = true, initiator = "+ ASCII.String(entry.initiator())+ ", profile.handle = "+ profile.handle());    warning=this.nextQueue.noticeURL.push(NoticedURL.StackType.LOCAL,entry,profile,this.robots);  } else   if (remote) {    warning=this.nextQueue.noticeURL.push(NoticedURL.StackType.REMOTE,entry,profile,this.robots);  }  if (warning != null && CrawlStacker.log.isFine())   CrawlStacker.log.fine("CrawlStacker.stackCrawl of URL " + entry.url().toNormalform(true) + " - not pushed: "+ warning);  return null;}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (tabSize == 0)   return x;  int ntabs=(((int)x) - tabBase) / tabSize;  return tabBase + ((ntabs + 1) * tabSize);}  }
class C{  public static <V>Predicate<V> eq(final V value){  return null;}  }
class C{  @Override public boolean shouldFilter(){  HttpServletRequest req=RequestContext.getCurrentContext().getRequest();  return "GET".equalsIgnoreCase(getVerb(req)) && isConvergentUIRequest(req);}  }
class C{  public MechSearchFilter showDialog(){  MechSearchFilter currFilter=mechFilter;  mechFilter=new MechSearchFilter(currFilter);  txtEqExp.setText(mechFilter.getEquipmentExpression());  if ((filterToks == null) || (filterToks.size() == 0) || (filterToks.lastElement() instanceof OperationFT)) {    disableOperationButtons();    enableSelectionButtons();  } else {    enableOperationButtons();    disableSelectionButtons();  }  setVisible(true);  if (isCanceled) {    mechFilter=currFilter;  } else {    updateMechSearchFilter();  }  return mechFilter;}  }
class C{  private static int findRunContaining(int index,int[] starts){  for (int i=1; true; i++) {    if (starts[i] > index) {      return i - 1;    }  }}  }
class C{  public void receiveGroupFileDeliveryStatus(String chatId,ContactId contact,ImdnDocument imdn){  if (sLogger.isActivated()) {    sLogger.debug("Handle group file delivery status: fileTransferId=" + imdn.getMsgId() + " notification_type="+ imdn.getNotificationType()+ " status="+ imdn.getStatus()+ " contact="+ contact);  }  mFileTransferService.receiveGroupFileDeliveryStatus(chatId,imdn,contact);}  }
class C{  @Override public void close(){  super.close();  historyDao=null;  historyTextDao=null;}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public StateMachineModelConfigurer<S,E> configureModel(){  return adapter.modelBuilder;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public static NbtInputStream from(InputStream in,NbtLimiter limiter){  return new NbtInputStream(new DataInputStream(new BufferedInputStream(new NbtInputLimitedStream(in,limiter))));}  }
class C{  public static TestConfiguration buildDefaultConfiguration(String testSourcePath,File testFile,String checkerName,List<String> options,boolean shouldEmitDebugInfo){  List<File> javaFiles=Arrays.asList(testFile);  List<String> processors=Arrays.asList(checkerName);  return buildDefaultConfiguration(testSourcePath,javaFiles,processors,options,shouldEmitDebugInfo);}  }
class C{  @Override public Collection<Token> convert(String original){  if (original == null) {    return Collections.emptyList();  }  Collection<Token> result=new ArrayList<>();  Matcher matcher=QUERY_REGEX.matcher(original);  String nextWord=null;  int nextStartIndex=0;  String lastBooleanOp=null;  while (nextWord != null || matcher.find()) {    String word=null;    int startIndex=0;    if (nextWord != null) {      word=nextWord;      startIndex=nextStartIndex;      nextWord=null;    } else {      word=matcher.group(0);      startIndex=matcher.start();    }    if (matcher.find()) {      nextWord=matcher.group(0);      nextStartIndex=matcher.start();    }    if ("AND".equals(word) || "OR".equals(word) || "NOT".equals(word)) {      lastBooleanOp=word;      continue;    }    if ("AND".equals(nextWord) && original.length() > nextStartIndex + 7 && original.substring(nextStartIndex,nextStartIndex + 7).equals("AND NOT")) {      nextWord="NOT";    }    int flagValue=0;    if (word.charAt(0) == '-' || (startIndex > 0 && original.charAt(startIndex - 1) == '-')) {      flagValue=PROHIBITED_TERM_FLAG;    } else     if (word.charAt(0) == '+' || (startIndex > 0 && original.charAt(startIndex - 1) == '+')) {      flagValue=REQUIRED_TERM_FLAG;    } else     if (nextWord != null && lastBooleanOp != null && !nextWord.equals(lastBooleanOp) && ("AND".equals(nextWord) || "OR".equals(nextWord) || "NOT".equals(nextWord))) {      flagValue=TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG;    } else     if (nextWord != null && lastBooleanOp == null && !nextWord.equals(lastBooleanOp) && ("NOT".equals(nextWord))) {      flagValue=TERM_PRECEDES_NEW_BOOLEAN_OPERATOR_FLAG;    }    try {      analyze(result,word,startIndex,flagValue);    } catch (    IOException e) {    }  }  if (lastBooleanOp != null) {    for (    Token t : result) {      int f=t.getFlags();      t.setFlags(f|=QueryConverter.TERM_IN_BOOLEAN_QUERY_FLAG);    }  }  return result;}  }
class C{  public List<JCAnnotation> Annotations(List<Attribute.Compound> attributes){  if (attributes == null)   return List.nil();  ListBuffer<JCAnnotation> result=new ListBuffer<JCAnnotation>();  for (List<Attribute.Compound> i=attributes; i.nonEmpty(); i=i.tail) {    Attribute a=i.head;    result.append(Annotation(a));  }  return result.toList();}  }
class C{  public Invoke(IoBuffer data){  super(data);}  }
class C{  @Override public String toString(){  return "LegendItemEntity: seriesKey=" + this.seriesKey + ", dataset="+ this.dataset;}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  public static void sort(byte[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public FileSystemNotFoundException(){}  }
class C{  void writeTreePriorModel(PartitionTreePrior prior,XMLWriter writer){  setModelPrefix(prior.getPrefix());  String initialPopSize=null;  TreePriorType nodeHeightPrior=prior.getNodeHeightPrior();  Units.Type units=options.units;  TreePriorParameterizationType parameterization=prior.getParameterization();switch (nodeHeightPrior) {case CONSTANT:    writer.writeComment("A prior assumption that the population size has remained constant","throughout the time spanned by the genealogy.");  writer.writeOpenTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "constant"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(options.units))});writer.writeOpenTag(ConstantPopulationModelParser.POPULATION_SIZE);writeParameter("constant.popSize",prior,writer);writer.writeCloseTag(ConstantPopulationModelParser.POPULATION_SIZE);writer.writeCloseTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL);break;case EXPONENTIAL:writer.writeComment("A prior assumption that the population size has grown exponentially","throughout the time spanned by the genealogy.");writer.writeOpenTag(ExponentialGrowthModelParser.EXPONENTIAL_GROWTH_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "exponential"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(options.units))});writer.writeOpenTag(ExponentialGrowthModelParser.POPULATION_SIZE);writeParameter("exponential.popSize",prior,writer);writer.writeCloseTag(ExponentialGrowthModelParser.POPULATION_SIZE);if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {writer.writeOpenTag(ExponentialGrowthModelParser.GROWTH_RATE);writeParameter("exponential.growthRate",prior,writer);writer.writeCloseTag(ExponentialGrowthModelParser.GROWTH_RATE);} else {writer.writeOpenTag(ExponentialGrowthModelParser.DOUBLING_TIME);writeParameter("exponential.doublingTime",prior,writer);writer.writeCloseTag(ExponentialGrowthModelParser.DOUBLING_TIME);}writer.writeCloseTag(ExponentialGrowthModelParser.EXPONENTIAL_GROWTH_MODEL);break;case LOGISTIC:writer.writeComment("A prior assumption that the population size has grown logistically","throughout the time spanned by the genealogy.");writer.writeOpenTag(LogisticGrowthModelParser.LOGISTIC_GROWTH_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "logistic"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(options.units))});writer.writeOpenTag(LogisticGrowthModelParser.POPULATION_SIZE);writeParameter("logistic.popSize",prior,writer);writer.writeCloseTag(LogisticGrowthModelParser.POPULATION_SIZE);if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {writer.writeOpenTag(LogisticGrowthModelParser.GROWTH_RATE);writeParameter("logistic.growthRate",prior,writer);writer.writeCloseTag(LogisticGrowthModelParser.GROWTH_RATE);} else {writer.writeOpenTag(LogisticGrowthModelParser.DOUBLING_TIME);writeParameter("logistic.doublingTime",prior,writer);writer.writeCloseTag(LogisticGrowthModelParser.DOUBLING_TIME);}writer.writeOpenTag(LogisticGrowthModelParser.TIME_50);writeParameter("logistic.t50",prior,writer);writer.writeCloseTag(LogisticGrowthModelParser.TIME_50);writer.writeCloseTag(LogisticGrowthModelParser.LOGISTIC_GROWTH_MODEL);initialPopSize="logistic.popSize";break;case EXPANSION:writer.writeComment("A prior assumption that the population size has grown exponentially","from some ancestral population size in the past.");writer.writeOpenTag(ExpansionModelParser.EXPANSION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "expansion"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(options.units))});writeParameter(ExpansionModelParser.POPULATION_SIZE,"expansion.popSize",prior,writer);if (parameterization == TreePriorParameterizationType.GROWTH_RATE) {writeParameter(ExpansionModelParser.GROWTH_RATE,"expansion.growthRate",prior,writer);} else {writeParameter(ExpansionModelParser.DOUBLING_TIME,"expansion.doublingTime",prior,writer);}writeParameter(ExpansionModelParser.ANCESTRAL_POPULATION_PROPORTION,"expansion.ancestralProportion",prior,writer);writer.writeCloseTag(ExpansionModelParser.EXPANSION_MODEL);initialPopSize="expansion.popSize";break;case YULE:case YULE_CALIBRATION:if (nodeHeightPrior == TreePriorType.YULE_CALIBRATION) {writer.writeComment("Calibrated Yule: Heled J, Drummond AJ (2011), Syst Biol, doi: " + "10.1093/sysbio/syr087");} else {writer.writeComment("A prior on the distribution node heights defined given","a Yule speciation process (a pure birth process).");}writer.writeOpenTag(YuleModelParser.YULE_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + YuleModelParser.YULE),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(units))});writeParameter(YuleModelParser.BIRTH_RATE,"yule.birthRate",prior,writer);writer.writeCloseTag(YuleModelParser.YULE_MODEL);break;case BIRTH_DEATH:case BIRTH_DEATH_INCOMPLETE_SAMPLING:writer.writeComment("A prior on the distribution node heights defined given");writer.writeComment(nodeHeightPrior == TreePriorType.BIRTH_DEATH_INCOMPLETE_SAMPLING ? BirthDeathModelParser.getCitationRHO() : BirthDeathModelParser.getCitation());writer.writeOpenTag(BirthDeathModelParser.BIRTH_DEATH_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + BirthDeathModelParser.BIRTH_DEATH),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(units))});writeParameter(BirthDeathModelParser.BIRTHDIFF_RATE,BirthDeathModelParser.MEAN_GROWTH_RATE_PARAM_NAME,prior,writer);writeParameter(BirthDeathModelParser.RELATIVE_DEATH_RATE,BirthDeathModelParser.RELATIVE_DEATH_RATE_PARAM_NAME,prior,writer);if (nodeHeightPrior == TreePriorType.BIRTH_DEATH_INCOMPLETE_SAMPLING) {writeParameter(BirthDeathModelParser.SAMPLE_PROB,BirthDeathModelParser.BIRTH_DEATH + "." + BirthDeathModelParser.SAMPLE_PROB,prior,writer);}writer.writeCloseTag(BirthDeathModelParser.BIRTH_DEATH_MODEL);break;case BIRTH_DEATH_SERIAL_SAMPLING:writer.writeComment(BirthDeathSerialSamplingModelParser.getCitationPsiOrg());writer.writeOpenTag(BirthDeathSerialSamplingModelParser.BIRTH_DEATH_SERIAL_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + BirthDeathSerialSamplingModelParser.BDSS),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(units)),new Attribute.Default<Boolean>(BirthDeathSerialSamplingModelParser.HAS_FINAL_SAMPLE,false)});writeParameter(BirthDeathSerialSamplingModelParser.LAMBDA,BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.LAMBDA,prior,writer);writeParameter(BirthDeathSerialSamplingModelParser.RELATIVE_MU,BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.RELATIVE_MU,prior,writer);writeParameter(BirthDeathSerialSamplingModelParser.PSI,BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.PSI,prior,writer);writeParameter(BirthDeathSerialSamplingModelParser.ORIGIN,BirthDeathSerialSamplingModelParser.BDSS + "." + BirthDeathSerialSamplingModelParser.ORIGIN,prior,writer);writer.writeCloseTag(BirthDeathSerialSamplingModelParser.BIRTH_DEATH_SERIAL_MODEL);break;case BIRTH_DEATH_BASIC_REPRODUCTIVE_NUMBER:writer.writeComment(BirthDeathSerialSamplingModelParser.getCitationRT());writer.writeOpenTag(BirthDeathEpidemiologyModelParser.BIRTH_DEATH_EPIDEMIOLOGY,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + BirthDeathEpidemiologyModelParser.BIRTH_DEATH_EPIDEMIOLOGY),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(units))});writeParameter(BirthDeathEpidemiologyModelParser.R0,BirthDeathEpidemiologyModelParser.R0,prior,writer);writeParameter(BirthDeathEpidemiologyModelParser.RECOVERY_RATE,BirthDeathEpidemiologyModelParser.RECOVERY_RATE,prior,writer);writeParameter(BirthDeathEpidemiologyModelParser.SAMPLING_PROBABILITY,BirthDeathEpidemiologyModelParser.SAMPLING_PROBABILITY,prior,writer);writeParameter(BirthDeathEpidemiologyModelParser.ORIGIN,BirthDeathEpidemiologyModelParser.ORIGIN,prior,writer);writer.writeCloseTag(BirthDeathEpidemiologyModelParser.BIRTH_DEATH_EPIDEMIOLOGY);break;case SPECIES_BIRTH_DEATH:case SPECIES_YULE:case SPECIES_YULE_CALIBRATION:writer.writeComment("A prior assumption that the population size has remained constant");writer.writeComment("throughout the time spanned by the genealogy.");if (nodeHeightPrior == TreePriorType.SPECIES_YULE_CALIBRATION) writer.writeComment("Calibrated Yule: Heled J, Drummond AJ (2011), Syst Biol, doi: " + "10.1093/sysbio/syr087");writer.writeOpenTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "constant"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(options.units))});Parameter para=options.starBEASTOptions.getParameter(TraitData.TRAIT_SPECIES + "." + options.starBEASTOptions.POP_MEAN);prior.getParameter("constant.popSize").setInitial(para.getInitial());writer.writeOpenTag(ConstantPopulationModelParser.POPULATION_SIZE);writeParameter("constant.popSize",prior,writer);writer.writeCloseTag(ConstantPopulationModelParser.POPULATION_SIZE);writer.writeCloseTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL);break;}if ((!options.useStarBEAST) && nodeHeightPrior != TreePriorType.CONSTANT && nodeHeightPrior != TreePriorType.EXPONENTIAL) {writer.writeComment("This is a simple constant population size coalescent model","that is used to generate an initial tree for the chain.");writer.writeOpenTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "initialDemo"),new Attribute.Default<String>("units",Units.Utils.getDefaultUnitName(units))});writer.writeOpenTag(ConstantPopulationModelParser.POPULATION_SIZE);if (initialPopSize != null) {writer.writeIDref(ParameterParser.PARAMETER,modelPrefix + initialPopSize);} else {writeParameter(modelPrefix + "initialDemo.popSize",1,100.0,Double.NaN,Double.NaN,writer);}writer.writeCloseTag(ConstantPopulationModelParser.POPULATION_SIZE);writer.writeCloseTag(ConstantPopulationModelParser.CONSTANT_POPULATION_MODEL);}}  }
class C{  @Override public String toString(){  return currencyCode;}  }
class C{  private boolean checkThreadDumpStatData(ThreadDumpInfo tdi) throws IOException {  boolean finished=false;  boolean found=false;  StringBuffer hContent=new StringBuffer();  int heapLineCounter=0;  int lines=0;  while (getBis().ready() && !finished) {    String line=getNextLine();    if (!found && !line.equals("")) {      if (line.trim().startsWith("Heap")) {        found=true;      } else       if (lines >= getMaxCheckLines()) {        finished=true;      } else {        lines++;      }    } else     if (found) {      if (heapLineCounter < 7) {        hContent.append(line).append("\n");      } else {        finished=true;      }      heapLineCounter++;    }  }  if (hContent.length() > 0) {    tdi.setHeapInfo(new HeapInfo(hContent.toString()));  }  return (found);}  }
class C{  public DataBuffer(final byte[] content){  this(content,0,content.length);}  }
class C{  public void processMouseEvent(MouseEvent e,MenuElement path[],MenuSelectionManager manager){  processMenuDragMouseEvent(new MenuDragMouseEvent(e.getComponent(),e.getID(),e.getWhen(),e.getModifiers(),e.getX(),e.getY(),e.getXOnScreen(),e.getYOnScreen(),e.getClickCount(),e.isPopupTrigger(),path,manager));}  }
class C{  public boolean autoUrlDetect(){  return mAutoUrlDetect;}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof ParsedURL))   return false;  ParsedURL purl=(ParsedURL)obj;  return data.equals(purl.data);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Hypothesis) {    Hypothesis other=(Hypothesis)obj;    if (getLastSourceIndex() != other.getLastSourceIndex() || !getCoverage().equals(other.getCoverage()))     return false;    if (dpStates == null)     return (other.dpStates == null);    if (other.dpStates == null)     return false;    if (dpStates.size() != other.dpStates.size())     return false;    for (int i=0; i < dpStates.size(); i++) {      if (!dpStates.get(i).equals(other.dpStates.get(i)))       return false;    }    return true;  }  return false;}  }
class C{  private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,Rectangle2D bar,PlotOrientation orientation){  Point2D result=null;  double offset=getItemLabelAnchorOffset();  double x0=bar.getX() - offset;  double x1=bar.getX();  double x2=bar.getX() + offset;  double x3=bar.getCenterX();  double x4=bar.getMaxX() - offset;  double x5=bar.getMaxX();  double x6=bar.getMaxX() + offset;  double y0=bar.getMaxY() + offset;  double y1=bar.getMaxY();  double y2=bar.getMaxY() - offset;  double y3=bar.getCenterY();  double y4=bar.getMinY() + offset;  double y5=bar.getMinY();  double y6=bar.getMinY() - offset;  if (anchor == ItemLabelAnchor.CENTER) {    result=new Point2D.Double(x3,y3);  } else   if (anchor == ItemLabelAnchor.INSIDE1) {    result=new Point2D.Double(x4,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE2) {    result=new Point2D.Double(x4,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE3) {    result=new Point2D.Double(x4,y3);  } else   if (anchor == ItemLabelAnchor.INSIDE4) {    result=new Point2D.Double(x4,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE5) {    result=new Point2D.Double(x4,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE6) {    result=new Point2D.Double(x3,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE7) {    result=new Point2D.Double(x2,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE8) {    result=new Point2D.Double(x2,y2);  } else   if (anchor == ItemLabelAnchor.INSIDE9) {    result=new Point2D.Double(x2,y3);  } else   if (anchor == ItemLabelAnchor.INSIDE10) {    result=new Point2D.Double(x2,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE11) {    result=new Point2D.Double(x2,y4);  } else   if (anchor == ItemLabelAnchor.INSIDE12) {    result=new Point2D.Double(x3,y4);  } else   if (anchor == ItemLabelAnchor.OUTSIDE1) {    result=new Point2D.Double(x5,y6);  } else   if (anchor == ItemLabelAnchor.OUTSIDE2) {    result=new Point2D.Double(x6,y5);  } else   if (anchor == ItemLabelAnchor.OUTSIDE3) {    result=new Point2D.Double(x6,y3);  } else   if (anchor == ItemLabelAnchor.OUTSIDE4) {    result=new Point2D.Double(x6,y1);  } else   if (anchor == ItemLabelAnchor.OUTSIDE5) {    result=new Point2D.Double(x5,y0);  } else   if (anchor == ItemLabelAnchor.OUTSIDE6) {    result=new Point2D.Double(x3,y0);  } else   if (anchor == ItemLabelAnchor.OUTSIDE7) {    result=new Point2D.Double(x1,y0);  } else   if (anchor == ItemLabelAnchor.OUTSIDE8) {    result=new Point2D.Double(x0,y1);  } else   if (anchor == ItemLabelAnchor.OUTSIDE9) {    result=new Point2D.Double(x0,y3);  } else   if (anchor == ItemLabelAnchor.OUTSIDE10) {    result=new Point2D.Double(x0,y5);  } else   if (anchor == ItemLabelAnchor.OUTSIDE11) {    result=new Point2D.Double(x1,y6);  } else   if (anchor == ItemLabelAnchor.OUTSIDE12) {    result=new Point2D.Double(x3,y6);  }  return result;}  }
class C{  public EpsilonBoxDominanceArchive(double[] epsilon,Iterable<? extends Solution> iterable){  super(new EpsilonBoxDominanceComparator(epsilon),iterable);}  }
class C{  public static StringTag parseString(String mojangson){  Character lastChar=mojangson.charAt(mojangson.length() - 1);  Character firstChar=mojangson.charAt(0);  if (firstChar == STRING_QUOTES.getSymbol() && lastChar == STRING_QUOTES.getSymbol()) {    return new StringTag(mojangson.substring(1,mojangson.length() - 1));  } else {    return new StringTag(mojangson);  }}  }
class C{  public Move decideMove(IGameState board){  return move;}  }
class C{  private static int findMatchingRightParen(String line,int pos){  if (line.charAt(pos) != '(') {    return pos;  }  ;  return findMatchingRightInner(line,pos,0);}  }
class C{  public void testWriteReadObject() throws Exception {  check(EntityWriteReadObject.class);}  }
class C{  public boolean unloadQueuedChunks(){  return false;}  }
class C{  public void rendered(){  this.rendered=true;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  private void composePageSerialized(File outputFile) throws Exception {  if (bpp == ScanBitsPerPixelConstants.BLACK_WHITE) {    composePageSerializedBw(outputFile);  } else   if (bpp == ScanBitsPerPixelConstants.GRAYS) {    composePageSerializedGray(outputFile);  } else   if (bpp == ScanBitsPerPixelConstants.COLOR) {    composePageSerializedColor(outputFile);  }}  }
class C{  public synchronized void start(){  if (!mOpened) {    return;  }  if (mStarted) {    return;  }  if (!initNAL()) {    return;  }  mNalInit=false;  mTimeStamp=0;  mNalInit=false;  mNalRepeat=0;  mRtpSender.startSession();  mVideoStartTime=SystemClock.uptimeMillis();  mStarted=true;  mFrameProcess=new FrameProcess((int)mDefaultVideoCodec.getFrameRate());  mFrameProcess.start();  mEventListener.onPlayerStarted();}  }
class C{  public static void initializeStrictMode(){  initializeStrictMode(newVmPolicyBuilderWithDefaults(),newThreadPolicyBuilderWithDefaults());}  }
class C{  protected ApplicationUser buildUser(HttpServletRequest request,boolean includeRoles){  ApplicationUser applicationUser=new ApplicationUser(this.getClass());  applicationUser.setUserId(TRUSTED_USER_ID);  applicationUser.setFirstName(TRUSTED_USER_FIRST_NAME);  applicationUser.setLastName(TRUSTED_USER_LAST_NAME);  applicationUser.setEmail(TRUSTED_USER_EMAIL);  applicationUser.setSessionId(request.getSession().getId());  applicationUser.setNamespaceAuthorizations(userNamespaceAuthorizationHelper.getAllNamespaceAuthorizations());  if (includeRoles) {    Set<String> roles=new HashSet<>();    roles.add(TRUSTED_USER_ROLE);    applicationUser.setRoles(roles);  }  return applicationUser;}  }
class C{  public final boolean equals(char[] cb,int length){  if (length != _length)   return false;  int offset=_offset;  char[] buffer=_buffer;  for (int i=_length - 1; i >= 0; i--)   if (buffer[offset + i] != cb[i])   return false;  return true;}  }
class C{  private Number parse(final Class sourceType,final Class targetType,final String value,final NumberFormat format){  ParsePosition pos=new ParsePosition(0);  Number parsedNumber=format.parse(value,pos);  if (pos.getErrorIndex() >= 0 || pos.getIndex() != value.length() || parsedNumber == null) {    String msg="Error converting from '" + this.toString(sourceType) + "' to '"+ this.toString(targetType)+ "'";    if (format instanceof DecimalFormat) {      msg+=" using pattern '" + ((DecimalFormat)format).toPattern() + "'";    }    if (this.locale != null) {      msg+=" for locale=[" + this.locale + "]";    }    throw new ConversionException(msg);  }  return parsedNumber;}  }
class C{  public void addProgressListener(ProgressListener list){  getProgressSupport().add(list);}  }
class C{  public static InlineDecision guardedYES(RVMMethod target,byte guard,String reason){  RVMMethod[] targets=new RVMMethod[1];  byte[] guards=new byte[1];  targets[0]=target;  guards[0]=guard;  return new InlineDecision(targets,guards,Code.GUARDED_YES,reason);}  }
class C{  public CSVReader(Reader reader,char separator){  this(reader,separator,CSVParser.DEFAULT_QUOTE_CHARACTER,CSVParser.DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public static long highestOneBit(long v){  v|=(v >> 1);  v|=(v >> 2);  v|=(v >> 4);  v|=(v >> 8);  v|=(v >> 16);  v|=(v >> 32);  return v - (v >>> 1);}  }
class C{  public SortableTableHeaderView(final Context context){  super(context);}  }
class C{  public JH224(){}  }
class C{  public void destroy(){  mBookmarksModel.removeDeleteObserver(this);  mSnackbarManager.dismissSnackbar(false);}  }
class C{  public String[] discoverDatabases(String selected){  if (p_discovered != null)   return p_discovered;  ArrayList<String> list=new ArrayList<String>();  ArrayList<String> dblist=new ArrayList<String>();  String def=selected;  if (def != null && def.trim().length() == 0)   def=null;  if (def != null) {    list.add(def.toLowerCase());    dblist.add(def.toLowerCase());  }  if (m_XE) {    String serviceName="xe";    if (!list.contains(serviceName)) {      list.add(serviceName);      dblist.add(serviceName);    }  }  String path=System.getenv("ORACLE_HOME");  if (path == null) {    path=System.getProperty("java.library.path");    String[] entries=path.split(File.pathSeparator);    for (int e=0; e < entries.length; e++) {      String entry=entries[e].toLowerCase();      if (entry.indexOf("ora") != -1 && entry.endsWith("bin")) {        StringBuffer sb=getTNS_File(entries[e].substring(0,entries[e].length() - 4));        String[] tnsnames=getTNS_Names(sb,true);        String[] dbNames=getTNS_Names(sb,false);        if (dbNames == null)         dbNames=tnsnames;        if (tnsnames != null) {          for (int i=0; i < tnsnames.length; i++) {            String tns=tnsnames[i];            String db=(i < dbNames.length) ? dbNames[i] : tns;            if (!tns.equals(def)) {              list.add(tns);              dblist.add(db);            } else {              dblist.remove(0);              dblist.add(0,db);            }          }          break;        }      }    }  } else {    StringBuffer sb=getTNS_File(path);    String[] tnsnames=getTNS_Names(sb,true);    String[] dbNames=getTNS_Names(sb,false);    if (dbNames == null)     dbNames=tnsnames;    if (tnsnames != null) {      for (int i=0; i < tnsnames.length; i++) {        String tns=tnsnames[i];        String db=(i < dbNames.length) ? dbNames[i] : tns;        if (!tns.equals(def)) {          list.add(tns);          dblist.add(db);        } else {          dblist.remove(0);          dblist.add(0,db);        }      }    }  }  p_discovered=new String[list.size()];  list.toArray(p_discovered);  p_dbname=new String[dblist.size()];  dblist.toArray(p_dbname);  return p_discovered;}  }
class C{  public static boolean delFileOrFolder(String path){  return delFileOrFolder(new File(path));}  }
class C{  public long pack(int srcId,int tgtId){  return ((((long)srcId) & 0xffffffffL) << 32) | ((long)tgtId) & 0xffffffffL;}  }
class C{  public void end(){  try {    if (chunkseq.firstChunksNotYetRead())     readFirstChunks();    if (chunkseq.getIdatSet() != null && !chunkseq.getIdatSet().isDone())     chunkseq.getIdatSet().done();    while (!chunkseq.isDone())     if (streamFeeder.feed(chunkseq) <= 0)     break;  }  finally {    close();  }}  }
class C{  private String badRegister(long s){  return "Attempt to register more than " + MAX_PARTIES + " parties for "+ stateToString(s);}  }
class C{  public boolean hasHash(){  return this.hasHash;}  }
class C{  protected void sequence_YieldExpression(ISerializationContext context,YieldExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public int preceding(int offset){  CharacterIterator text=getText();  checkOffset(offset,text);  text.setIndex(offset);  return previous();}  }
class C{  @Override public String toString(){  if (_prefix != null)   return getClass().getSimpleName() + "[" + _path+ ",prefix="+ _prefix+ "]"; else   return getClass().getSimpleName() + "[" + _path+ "]";}  }
class C{  public N4SchemeURIBasedStorage(URI uri,BuiltInSchemeRegistrar schemeHelper){  super(uri);  this.schemeHelper=schemeHelper;}  }
class C{  public MosaicPane(){  this(null,null);}  }
class C{  static double ensureNonNegative(double value){  checkArgument(!isNaN(value));  if (value > 0.0) {    return value;  } else {    return 0.0;  }}  }
class C{  @Override public boolean isServiceRegistered(){  return ServerApiUtils.isImsConnected();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof WeakRef) {    if (obj == this)     return true;    Object referent=get();    return (referent != null) && (referent == ((WeakRef)obj).get());  } else {    return false;  }}  }
class C{  public GVTFont deriveFont(float size){  return new AWTGVTFont(awtFont,size / this.size);}  }
class C{  @Override public String toString(){  return "CUgraphicsResource[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  private void sendResponse(String contentType,HttpServletResponse res,Message responseMsg) throws AxisFault, IOException {  if (responseMsg == null) {    res.setStatus(HttpServletResponse.SC_NO_CONTENT);    if (isDebug) {      log.debug("NO AXIS MESSAGE TO RETURN!");    }  } else {    if (isDebug) {      log.debug("Returned Content-Type:" + contentType);    }    try {      ReqRspUtil.setContentType(res,contentType);      responseMsg.writeTo(res.getOutputStream());    } catch (    SOAPException e) {      logException(e);    }  }  if (!res.isCommitted()) {    res.flushBuffer();  }}  }
class C{  public static String normalizeInteger(String value){  return normalizeIntegerValue(value,null,null);}  }
class C{  private void addNature(){  NatureWorker worker=new NatureWorker(true);  worker.scheduleInteractive();}  }
class C{  public SVG12FocusManager(Document doc){  super(doc);}  }
class C{  public float computeDistanceTo(float x,float y){  final RectF bounds=getClickTargetBounds();  float dx=Math.max(bounds.left - x,x - bounds.right);  float dy=Math.max(bounds.top - y,y - bounds.bottom);  return Math.max(0.0f,Math.max(dx,dy));}  }
class C{  public final static int readRawUntil(final StringBuilder out,final String in,final int start,final char end){  int pos=start;  while (pos < in.length()) {    final char ch=in.charAt(pos);    if (ch == end) {      break;    }    out.append(ch);    pos++;  }  return (pos == in.length()) ? -1 : pos;}  }
class C{  public void rollOut(Operator operator){  map.put(operator,new InterpolatedValue(true,1d));  if (!timer.isRunning()) {    timer.start();  }}  }
class C{  public void add(final String clazz){  add(clazz,null);}  }
class C{  public Document readConfigXml(){  String configFile=getConfigXmlPath();  return xmlTool.loadXmlFromFile(configFile);}  }
class C{  public static String hashpw(String password,String salt){  BCrypt B;  String real_salt;  byte passwordb[], saltb[], hashed[];  char minor=(char)0;  int rounds, off=0;  StringBuilder rs=new StringBuilder();  int saltLength=salt.length();  if (saltLength < 28) {    throw new IllegalArgumentException("Invalid salt");  }  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {    throw new IllegalArgumentException("Invalid salt version");  }  if (salt.charAt(2) == '$') {    off=3;  } else {    minor=salt.charAt(2);    if (minor != 'a' || salt.charAt(3) != '$') {      throw new IllegalArgumentException("Invalid salt revision");    }    off=4;  }  if (saltLength - off < 25) {    throw new IllegalArgumentException("Invalid salt");  }  if (salt.charAt(off + 2) > '$') {    throw new IllegalArgumentException("Missing salt rounds");  }  rounds=Integer.parseInt(salt.substring(off,off + 2));  real_salt=salt.substring(off + 3,off + 25);  try {    passwordb=(password + (minor >= 'a' ? "\000" : "")).getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    throw new AssertionError("UTF-8 is not supported");  }  saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);  B=new BCrypt();  hashed=B.crypt_raw(passwordb,saltb,rounds);  rs.append("$2");  if (minor >= 'a') {    rs.append(minor);  }  rs.append("$");  if (rounds < 10) {    rs.append("0");  }  rs.append(rounds);  rs.append("$");  encode_base64(saltb,saltb.length,rs);  encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1,rs);  return rs.toString();}  }
class C{  public BundleResource resolve(){  return BundleResourceFinder.resolve(this);}  }
class C{  public Block cloneAsHeader(){  Block block=new Block(params,BLOCK_VERSION_GENESIS);  copyBitcoinHeaderTo(block);  return block;}  }
class C{  @NotNull private static String extractPrefix(CompletionParameters parameters){  String text=parameters.getOriginalFile().getText();  final int caretOffset=parameters.getOffset();  if (text.isEmpty() || caretOffset == 0) {    return "";  }  int stopAt=text.lastIndexOf('{',caretOffset - 1);  if (stopAt <= text.lastIndexOf('}',caretOffset - 1)) {    if (text.charAt(caretOffset - 1) == ':') {      stopAt=caretOffset - 1;    } else {      stopAt=text.lastIndexOf(' ',caretOffset - 1);    }  }  int prefixStart=stopAt + 1;  if (prefixStart < caretOffset && text.charAt(prefixStart) == '#') {    prefixStart++;  }  return StringUtil.trimLeading(text.substring(prefixStart,caretOffset));}  }
class C{  public void removeAll(){  Component[] children=getComponents();  Hashtable<Component,Integer> cToL=getComponentToLayer();  for (int counter=children.length - 1; counter >= 0; counter--) {    Component c=children[counter];    if (c != null && !(c instanceof JComponent)) {      cToL.remove(c);    }  }  super.removeAll();}  }
class C{  public static void putValue(String name,Object value){  values.put(name,value);}  }
class C{  public static String removeEmptyLines(String text){  text=text.replaceAll("^[ " + ChineseLanguageConstants.SPACE[0] + "\t\u000B\u000C\u00A0\uE5F1\r\n]*\n","");  text=text.replaceAll("[\r\n][ " + ChineseLanguageConstants.SPACE[0] + "\t\u000B\u000C\u00A0\uE5F1\r\n]*\n","\n");  return text;}  }
class C{  public void resetOptions(){  super.resetOptions();  setFileExtension(".bsi");}  }
class C{  @Override public boolean addAll(E... elements){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static void main(String[] argv){  runClassifier(new Bagging(),argv);}  }
class C{  public int compareTo(Object obj){  ObjectStreamField other=(ObjectStreamField)obj;  boolean isPrim=isPrimitive();  if (isPrim != other.isPrimitive()) {    return isPrim ? -1 : 1;  }  return name.compareTo(other.name);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static Intent newIntent(Context context){  return new Intent(context,NavigateActivity.class);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.618 -0500",hash_original_method="E76B205E92636F1E7B3FC6B2B934FE47",hash_generated_method="CB336D3608CC6D764C4BDC3C24CB76A2") private JSONArray readArray() throws JSONException {  JSONArray result=new JSONArray();  boolean hasTrailingSeparator=false;  while (true) {switch (nextCleanInternal()) {case -1:      throw syntaxError("Unterminated array");case ']':    if (hasTrailingSeparator) {      result.put(null);    }  return result;case ',':case ';':result.put(null);hasTrailingSeparator=true;continue;default :pos--;}result.put(nextValue());switch (nextCleanInternal()) {case ']':return result;case ',':case ';':hasTrailingSeparator=true;continue;default :throw syntaxError("Unterminated array");}}}  }
class C{  private ActionBarBackground fadeOut(){  Drawable background=getColoredBackground(android.R.color.transparent);  background.setAlpha(0);  fadeBackground(mOldBackground,background);  return this;}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public boolean isAllow_Info_CRP(){  Object oo=get_Value(COLUMNNAME_Allow_Info_CRP);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private List queryByHibernate(final String query) throws ApplicationRuntimeException {  List list=null;  try {    final Query qry=getCurrentSession().createQuery(query);    list=qry.list();  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching queryByHibernate",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching queryByHibernate",e);  }  return list;}  }
class C{  public JSONBuffer startArray(){  if (!stack.empty() && stack.peek() != Operand.ARRAY) {    throw new JSONException("startArray() is only allowed in an empty context.");  }  buffer.append("[");  stack.push(Operand.ARRAY);  return this;}  }
class C{  public void test_deleteFromSolutions_01() throws Exception {  if (!isSolutionSetUpdateEnabled()) {    return;  }  loadDataset(packagePath + "dataset-01.trig");{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("INSERT INTO %namedSet1\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  ?x rdf:type foaf:Person .\n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("DELETE FROM %namedSet1\n");    sb.append("SELECT * \n");    sb.append("WHERE { \n");    sb.append("   BIND(<http://www.bigdata.com/Mike> as ?x)\n");    sb.append("   BIND(\"Mike\" as ?name)\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  INCLUDE %namedSet1 .\n");    sb.append("}\n");    final TupleQueryResult ret=con.prepareTupleQuery(QueryLanguage.SPARQL,sb.toString()).evaluate();    final TupleQueryResult expected=readExpectedTupleQueryResult(packagePath + "test_deleteFromSolutions_01.srx");    compareTupleQueryResults(ret,expected);  }}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ ",rows="+ rows+ ",cols="+ cols+ ",rowFracs="+ fracsToString(rowFractions)+ ",colFracs="+ fracsToString(colFractions)+ "]";}  }
class C{  public static FloatBuffer createFloatBuffer(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  public BackwardsLineReader(InputStream is){  this(is,null);}  }
class C{  @Override public DriverTask deleteVolumeSnapshot(VolumeSnapshot snapshot){  LOG.info("Deleting volume snapshot {}.",snapshot);  return snapshotHelper.deleteVolumeSnapshot(snapshot);}  }
class C{  public Oc4jExistingLocalConfigurationCapability(){  this.propertySupportMap.put(Oc4jPropertySet.AUTO_DEPLOY_DIR,Boolean.TRUE);}  }
class C{  public void processEvent(Monitor mon){  list.addRow(mon.getJAMonDetailRow());}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  public void addInstalledData(final Element domElement,final AVList params){  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.addToWorldWindow(domElement,params);  String description=this.getDescription(domElement);  Sector sector=this.getSector(domElement);  Box box=Box.createHorizontalBox();  box.add(new JButton(new GoToSectorAction(sector)));  box.add(Box.createHorizontalStrut(10));  box.add(new JLabel(description));  this.dataConfigPanel.add(box);  this.revalidate();}  }
class C{  private void addToInputEventCombine(Method inputEvent,Method outputEvent){  if (inputEvent == null || outputEvent == null)   return;  if (!eventBlocks.containsKey(inputEvent))   eventBlocks.put(inputEvent,new ArrayList<Method>());  if (eventBlocks.get(inputEvent).contains(outputEvent))   return;  Method sameMethod=null;  for (  Method m : eventBlocks.get(inputEvent)) {    if (m.isSameMethod(outputEvent)) {      sameMethod=m;      break;    }  }  if (sameMethod != null)   sameMethod.incorporateMethod(outputEvent); else   eventBlocks.get(inputEvent).add(outputEvent);}  }
class C{  private static boolean needsExtraction(final ITranslationEnvironment environment,final String registerName) throws InternalTranslationException {  return (getRegisterSize(registerName) != environment.getArchitectureSize()) && !isSegment(registerName);}  }
class C{  void readFromFile() throws IOException {  final Counter counter=new CounterStorage(this).readFromFile();  if (counter != null) {    final Counter newCounter=clone();    startDate=counter.getStartDate();    requests.clear();    for (    final CounterRequest request : counter.getRequests()) {      requests.put(request.getName(),request);    }    if (errors != null) {      errors.clear();      errors.addAll(counter.getErrors());    }    addRequestsAndErrors(newCounter);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.183 -0500",hash_original_method="A6BF5F00A4A45564AACA34EE9DAEC5CF",hash_generated_method="46907B0190919553DD53D2F1687686EC") private void closeWindow(WebViewCore w){  mCallbackProxy.onCloseWindow(w.getWebView());}  }
class C{  protected void ensureParentless() throws IllegalStateException {  if (parent == null)   return;  throw new IllegalStateException(String.format("I (%s) already have a parent, so you can't add me to something else; clone or unparent me first.",this.getClass().getName()));}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private final static boolean transferUntil(final PushbackInputStream i,final OutputStream o,final byte[] pattern) throws IOException {  int b, bb;  boolean equal;  while ((b=i.read()) > 0) {    if ((b & 0xFF) == pattern[0]) {      equal=true;      lo:       for (int n=1; n < pattern.length; n++) {        if (((bb=i.read()) & 0xFF) != pattern[n]) {          i.unread(bb);          equal=false;          for (int nn=n - 1; nn > 0; nn--)           i.unread(pattern[nn]);          break lo;        }      }      if (equal)       return true;    }    o.write(b);  }  return false;}  }
class C{  public void addCheckConstraint(Session session,Expression expr){  if (expr == null) {    return;  }  resolver=new SingleColumnResolver(this);synchronized (this) {    String oldName=name;    if (name == null) {      name="VALUE";    }    expr.mapColumns(resolver,0);    name=oldName;  }  expr=expr.optimize(session);  resolver.setValue(ValueNull.INSTANCE);synchronized (this) {    expr.getValue(session);  }  if (checkConstraint == null) {    checkConstraint=expr;  } else {    checkConstraint=new ConditionAndOr(ConditionAndOr.AND,checkConstraint,expr);  }  checkConstraintSQL=getCheckConstraintSQL(session,name);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar){  this(reader,separator,quotechar,CSVParser.DEFAULT_ESCAPE_CHARACTER,DEFAULT_SKIP_LINES,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  protected void assertWriteCacheDisabled(final Stats baseline,final Stats syncio){  final double ratio=Math.round(100. * (syncio.writesPerSec / (double)baseline.writesPerSec)) / 100.;  final String msg="ratio=" + ratio + ", "+ baseline+ ", "+ syncio;  if (ratio > .5) {    fail("Write cache in effect: " + msg);  }  System.out.println(msg);}  }
class C{  public AcceptSecContextToken(Krb5Context context,Credentials serviceCreds,KrbApReq apReq,InputStream is) throws IOException, GSSException, KrbException {  int tokenId=((is.read() << 8) | is.read());  if (tokenId != Krb5Token.AP_REP_ID)   throw new GSSException(GSSException.DEFECTIVE_TOKEN,-1,"AP_REP token id does not match!");  byte[] apRepBytes=new sun.security.util.DerValue(is).toByteArray();  KrbApRep apRep=new KrbApRep(apRepBytes,serviceCreds,apReq);  EncryptionKey subKey=apRep.getSubKey();  if (subKey != null) {    context.setKey(Krb5Context.ACCEPTOR_SUBKEY,subKey);  }  Integer apRepSeqNumber=apRep.getSeqNumber();  int peerSeqNumber=(apRepSeqNumber != null ? apRepSeqNumber.intValue() : 0);  context.resetPeerSequenceNumber(peerSeqNumber);}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  double norm2=norm2(x_index,x_att,y_index,y_att);  double exp1=sigma1 == 0.0d ? 0.0d : Math.exp((-1) * norm2 / sigma1);  double exp2=sigma2 == 0.0d ? 0.0d : Math.exp((-1) * norm2 / sigma2);  double exp3=sigma3 == 0.0d ? 0.0d : Math.exp((-1) * norm2 / sigma3);  return exp1 + exp2 - exp3;}  }
class C{  static RandoopRunStatus generateAndCompile(TestEnvironment testEnvironment,RandoopOptions options,boolean allowRandoopFailure){  List<String> command=new ArrayList<>();  command.add("java");  command.add("-ea");  command.add("-classpath");  command.add(testEnvironment.getSystemTestClasspath());  command.add("randoop.main.Main");  command.add("gentests");  command.addAll(options.getOptions());  ProcessStatus randoopExitStatus=ProcessStatus.runCommand(command);  if (randoopExitStatus.exitStatus != 0) {    if (allowRandoopFailure) {      return getRandoopRunStatus(randoopExitStatus);    } else {      for (      String line : randoopExitStatus.outputLines) {        System.out.println(line);      }      fail("Randoop exited badly, exit value = " + randoopExitStatus.exitStatus);    }  }  String packagePathString=options.getPackageName().replace('.','/');  String regressionBasename=options.getRegressionBasename();  String errorBasename=options.getErrorBasename();  Path srcDir=testEnvironment.sourceDir.resolve(packagePathString);  List<File> testClassSourceFiles=getFiles(srcDir,"*.java",regressionBasename,errorBasename);  if (testClassSourceFiles.size() == 0) {    for (    String line : randoopExitStatus.outputLines) {      System.err.println(line);    }    fail("No test class source files found");  }  Path classDir=testEnvironment.classDir;  CompilationStatus compileStatus=CompilationStatus.compileTests(testClassSourceFiles,classDir.toString());  if (!compileStatus.succeeded) {    compileStatus.printDiagnostics(System.err);    fail("Compilation failed");  }  Path classFileDir=classDir.resolve(packagePathString);  List<File> testClassClassFiles=getFiles(classFileDir,"*.class",regressionBasename,errorBasename);  assertThat("Number of compiled tests equals source tests",testClassClassFiles.size(),is(equalTo(testClassSourceFiles.size())));  return getRandoopRunStatus(randoopExitStatus);}  }
class C{  public NoSuchMethodException(@Nullable String s){  super(s);}  }
class C{  @Dev public EquipRandomAmountOfItemAction(final String item,final int min,final int max,@Dev(defaultValue="1") final int multiplayer){  this.item=checkNotNull(item);  this.min=min;  this.max=max;  this.increment=multiplayer;}  }
class C{  public BitemporalCondition vtTo(Object vtTo){  this.vtTo=vtTo;  return this;}  }
class C{  @Override public void run(){  String lockName=String.format("DNS zone %s",tld);  if (!executeWithLocks(this,getClass(),tld,timeout,lockName)) {    throw new ServiceUnavailableException("Lock failure");  }}  }
class C{  public Node addCausedByCorrelationId(String id){  this.correlationIds.add(new CorrelationIdentifier(Scope.CausedBy,id));  return this;}  }
class C{  private void configureForClassAttribute(){  int classIndex=m_classAttBox.getSelectedIndex();  if (classIndex >= 0) {    if (!m_trainingInstances.attribute(classIndex).isNominal() || m_classifier == null) {      m_startBut.setEnabled(false);    } else {      m_startBut.setEnabled(true);    }    ArrayList<Color> colors=new ArrayList<Color>();    if (!m_trainingInstances.attribute(m_classAttBox.getSelectedIndex()).isNominal()) {      for (      Color element : BoundaryPanel.DEFAULT_COLORS) {        colors.add(element);      }    } else {      for (int i=0; i < m_trainingInstances.attribute(classIndex).numValues(); i++) {        colors.add(BoundaryPanel.DEFAULT_COLORS[i % BoundaryPanel.DEFAULT_COLORS.length]);      }    }    m_classPanel.setColours(colors);    m_boundaryPanel.setColors(colors);  }}  }
class C{  public void draw(Graphics g){}  }
class C{  public synchronized void registerRepository(HierarchicalConfiguration repConf) throws ConfigurationException {  String className=repConf.getString("[@class]");  boolean infoEnabled=getLogger().isInfoEnabled();  for (  String protocol : repConf.getStringArray("protocols.protocol")) {    HierarchicalConfiguration defConf=null;    if (repConf.getKeys("config").hasNext()) {      defConf=repConf.configurationAt("config");    }    if (infoEnabled) {      StringBuilder infoBuffer=new StringBuilder(128);      infoBuffer.append("Registering Repository instance of class ");      infoBuffer.append(className);      infoBuffer.append(" to handle ");      infoBuffer.append(protocol);      infoBuffer.append(" protocol requests for repositories with key ");      infoBuffer.append(protocol);      getLogger().info(infoBuffer.toString());    }    if (classes.get(protocol) != null) {      throw new ConfigurationException("The combination of protocol and type comprise a unique key for repositories.  This constraint has been violated.  Please check your repository configuration.");    }    classes.put(protocol,className);    if (defConf != null) {      defaultConfigs.put(protocol,defConf);    }  }}  }
class C{  protected void sequence_ArrayTypeRef_ParameterizedTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static void readZonas(String ZonasFile){  log.info("Reading zonas from file " + ZonasFile + "...");  final int idxZonaId=0;  final int idxCoordX=1;  final int idxCoordY=2;  BufferedReader reader=IOUtils.getBufferedReader(ZonasFile);  int counter=0;  try {    String line=reader.readLine();    while ((line=reader.readLine()) != null) {      String[] splittedLine=line.split(";");      String id=splittedLine[idxZonaId];      String x=splittedLine[idxCoordX].replace(",",".");      String y=splittedLine[idxCoordY].replace(",",".");      zonaId2Coord.put(id,new Coord(Double.parseDouble(x),Double.parseDouble(y)));      System.out.println("coordinates of zone: " + id + ": "+ zonaId2Coord.get(id));      counter++;    }    reader.close();  } catch (  IOException e) {    e.printStackTrace();  }  log.info("Read data of " + counter + " zonas...");}  }
class C{  @Override public void finalizeIndex(){  addToBuffer();  storeBuffer();}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  private static Resource createResource(int id,int createFailureId,int closeFailureBitMap,List<Integer> closedList) throws Resource.CreateFailException {  if (id > createFailureId)   throw new AssertionError("Resource " + id + " shouldn't be created");  boolean createSucceeds=id != createFailureId;  boolean closeSucceeds=(closeFailureBitMap & (1 << id)) == 0;  return new Resource(id,createSucceeds,closeSucceeds,closedList);}  }
class C{  public void addAudioPacketListener(Listener<AudioPacket> listener){  mAudioPacketListeners.add(listener);}  }
class C{  private void drawDayHeader(Canvas canvas){  if (!hasBg) {    mPaint.setColor(Color.rgb(150,195,70));    canvas.drawRect(rect,mPaint);  }  if (defaultTextBold) {    mPaint.setFakeBoldText(true);  }  mPaint.setColor(defaultTextColor);  for (int iDay=1; iDay < 8; iDay++) {    if (iDay == 1 || iDay == 7) {      mPaint.setColor(specialTextColor);    }    final String sDayName=getWeekDayName(iDay);    TextPaint mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);    mTextPaint.setTypeface(Typeface.DEFAULT_BOLD);    mTextPaint.setTextSize(defaultTextSize);    FontMetrics fm=mTextPaint.getFontMetrics();    int textHeight=(int)Math.ceil(fm.descent - fm.ascent);    int textWidth=(int)AbGraphicUtil.getStringWidth(sDayName,mTextPaint);    final int iPosX=(int)rect.left + cellWidth * (iDay - 1) + (cellWidth - textWidth) / 2;    final int iPosY=(int)(this.getHeight() - (this.getHeight() - textHeight) / 2 - mPaint.getFontMetrics().bottom);    canvas.drawText(sDayName,iPosX,iPosY,mPaint);    mPaint.setColor(defaultTextColor);  }}  }
class C{  public void paintComboBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static String humanReadableByteCount(long bytes){  int unit=1024;  if (bytes < unit) {    return bytes + " B";  } else {    int exp=(int)(Math.log(bytes) / Math.log(unit));    String pre=("KMGTPE").charAt(exp - 1) + "i";    return String.format("%.1f %sB",bytes / Math.pow(unit,exp),pre);  }}  }
class C{  public boolean isArmed(){  return other.isArmed();}  }
class C{  void addWorld(GlowWorld world){  worlds.addWorld(world);}  }
class C{  @Override public SSLEngineResult unwrap(ByteBuffer netData,ByteBuffer[] appData,int offset,int length) throws SSLException {  EngineArgs ea=new EngineArgs(netData,appData,offset,length);  try {synchronized (unwrapLock) {      return readNetRecord(ea);    }  } catch (  Exception e) {    fatal(Alerts.alert_internal_error,"problem unwrapping net record",e);    return null;  } finally {    ea.resetLim();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean deployExtension(Config config,ExtensionDefintion ed,Log log,boolean reload){  ConfigImpl ci=(ConfigImpl)config;  try {    if (XMLConfigAdmin.hasRHExtensions(ci,ed) != null)     return false;  } catch (  Throwable t) {  }  Iterator<RHExtension> it=getLocalExtensions(config).iterator();  RHExtension ext=null, tmp;  log.info("extension","installing the extension " + ed);  while (it.hasNext()) {    tmp=it.next();    if (ed.equals(tmp)) {      ext=tmp;      break;    }  }  if (ext != null && ed.getVersion() != null) {    try {      log.info("extension","installing the extension " + ed + " from local provider");      Resource res=SystemUtil.getTempFile("lex",true);      IOUtil.copy(ext.getExtensionFile(),res);      XMLConfigAdmin._updateRHExtension((ConfigImpl)config,res,reload);      return true;    } catch (    Throwable t) {      ext=null;      t.printStackTrace();    }  }  String apiKey=config.getIdentification().getApiKey();  RHExtensionProvider[] providers=ci.getRHExtensionProviders();  URL url;  if (ext != null) {    String content;    for (int i=0; i < providers.length; i++) {      try {        url=providers[i].getURL();        StringBuilder qs=new StringBuilder();        qs.append("?withLogo=false");        if (ed.getVersion() != null)         qs.append("&version=").append(ed.getVersion());        if (apiKey != null)         qs.append("&ioid=").append(apiKey);        url=new URL(url,"/rest/extension/provider/info/" + ed.getId() + qs);        HTTPResponse rsp=HTTPEngine.get(url,null,null,-1,false,"UTF-8","",null,new Header[]{new HeaderImpl("accept","application/json")});        if (rsp.getStatusCode() != 200)         continue;        content=rsp.getContentAsString();        Struct sct=Caster.toStruct(DeserializeJSON.call(null,content));        String remoteVersion=Caster.toString(sct.get(KeyConstants._version));        if (remoteVersion != null && remoteVersion.compareTo(ext.getVersion()) <= 0) {          log.info("extension","installing the extension " + ed + " from local provider");          Resource res=SystemUtil.getTempFile("lex",true);          IOUtil.copy(ext.getExtensionFile(),res);          XMLConfigAdmin._updateRHExtension((ConfigImpl)config,res,reload);          return true;        }      } catch (      Throwable t) {        t.printStackTrace();      }    }  }  if (ext != null) {    try {      log.info("extension","installing the extension " + ed + " from local provider");      Resource res=SystemUtil.getTempFile("lex",true);      IOUtil.copy(ext.getExtensionFile(),res);      XMLConfigAdmin._updateRHExtension((ConfigImpl)config,res,reload);      return true;    } catch (    Throwable t) {      t.printStackTrace();    }  }  log.info("extension","installing the extension " + ed + " from remote extension provider");  Resource res=downloadExtension(ci,ed,log);  if (res != null) {    try {      XMLConfigAdmin._updateRHExtension((ConfigImpl)config,res,reload);      return true;    } catch (    Throwable t) {      log.error("extension",t);    }  }  return false;}  }
class C{  public RootElement(String localName){  this("",localName);}  }
class C{  public void resizeCounters(int countersNeeded){  if (VM.VerifyAssertions) {    VM._assert(handle != -1);  }  counterManager.resizeCounterSpace(this.getHandle(),countersNeeded);  numCounters=countersNeeded;}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static boolean isSameDay(final Date date1,final Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar cal1=Calendar.getInstance();  cal1.setTime(date1);  final Calendar cal2=Calendar.getInstance();  cal2.setTime(date2);  return isSameDay(cal1,cal2);}  }
class C{  public ShortMemberValue(short s,ConstPool cp){  super('S',cp);  setValue(s);}  }
class C{  @Override public void onMarkerDrag(Marker marker){  handleMarkerEvent("didDragMarker",marker);}  }
class C{  public static void start(String name){  SystemProperties.set("ctl.start",name);}  }
class C{  public Dop(int opcode,int family,int nextOpcode,InsnFormat format,boolean hasResult){  if (!Opcodes.isValidShape(opcode)) {    throw new IllegalArgumentException("bogus opcode");  }  if (!Opcodes.isValidShape(family)) {    throw new IllegalArgumentException("bogus family");  }  if (!Opcodes.isValidShape(nextOpcode)) {    throw new IllegalArgumentException("bogus nextOpcode");  }  if (format == null) {    throw new NullPointerException("format == null");  }  this.opcode=opcode;  this.family=family;  this.nextOpcode=nextOpcode;  this.format=format;  this.hasResult=hasResult;}  }
class C{  private boolean showFileChooser(){  Class dstCategory=Destination.class;  Destination dst=(Destination)asCurrent.get(dstCategory);  if (dst == null) {    dst=(Destination)asOriginal.get(dstCategory);    if (dst == null) {      dst=(Destination)psCurrent.getDefaultAttributeValue(dstCategory);      if (dst == null) {        try {          dst=new Destination(new URI("file:out.prn"));        } catch (        URISyntaxException e) {        }      }    }  }  File fileDest;  if (dst != null) {    try {      fileDest=new File(dst.getURI());    } catch (    Exception e) {      fileDest=new File("out.prn");    }  } else {    fileDest=new File("out.prn");  }  ValidatingFileChooser jfc=new ValidatingFileChooser();  jfc.setApproveButtonText(getMsg("button.ok"));  jfc.setDialogTitle(getMsg("dialog.printtofile"));  jfc.setDialogType(JFileChooser.SAVE_DIALOG);  jfc.setSelectedFile(fileDest);  int returnVal=jfc.showDialog(this,null);  if (returnVal == JFileChooser.APPROVE_OPTION) {    fileDest=jfc.getSelectedFile();    try {      asCurrent.add(new Destination(fileDest.toURI()));    } catch (    Exception e) {      asCurrent.remove(dstCategory);    }  } else {    asCurrent.remove(dstCategory);  }  return (returnVal == JFileChooser.APPROVE_OPTION);}  }
class C{  private static boolean updateSkeletonsPath(@NotNull Sdk sdk,@NotNull SdkModificator modificator){  boolean changed=false;  final String skeletonsPath=PythonSdkType.getSkeletonsPath(PathManager.getSystemPath(),sdk.getHomePath());  if (skeletonsPath != null) {    final VirtualFile skeletonsDir=StandardFileSystems.local().refreshAndFindFileByPath(skeletonsPath);    if (skeletonsDir != null) {      LOG.info("Binary skeletons directory for SDK \"" + sdk.getName() + "\" ("+ sdk.getHomePath()+ "): "+ skeletonsDir.getPath());      final List<VirtualFile> sourceRoots=Arrays.asList(sdk.getRootProvider().getFiles(OrderRootType.CLASSES));      boolean skeletonsDirFound=false;      for (      VirtualFile root : sourceRoots) {        if (root.equals(skeletonsDir)) {          skeletonsDirFound=true;        }        if (PythonSdkType.isSkeletonsPath(root.getPath()) && !skeletonsDirFound) {          modificator.removeRoot(root,OrderRootType.CLASSES);          changed=true;        }      }      if (!skeletonsDirFound) {        modificator.addRoot(skeletonsDir,OrderRootType.CLASSES);        changed=true;      }    }  }  return changed;}  }
class C{  public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null) {    return filename1 == null && filename2 == null;  }  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  public boolean isItemDisabled(){  return (Boolean)getStateHelper().eval(PropertyKeys.itemDisabled,false);}  }
class C{  public mxCellState(){  this(null,null,null);}  }
class C{  public NoFocusButton(String uiKey){  setFocusPainted(false);  setMargin(new Insets(0,0,0,0));  setFocusable(false);  this.uiKey=uiKey;  setUI(SeaGlassButtonUI.createUI(this));}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public GenericEntityReference(String name,AbstractDocument owner){  super(name,owner);}  }
class C{  public RapidMinerLineReader(String separatorsRegExpr,char[] commentChars,boolean useQuotes,char quoteChar,char escapeChar,boolean trimLines,boolean skipErrorLines){  this.separatorPattern=Pattern.compile(separatorsRegExpr);  if (commentChars != null) {    this.commentChars=new String[commentChars.length];    for (int i=0; i < commentChars.length; i++) {      this.commentChars[i]=Character.toString(commentChars[i]);    }  }  this.useQuotes=useQuotes;  this.quoteChar=quoteChar;  this.escapeChar=escapeChar;  this.trimLines=trimLines;  this.skipErrorLines=skipErrorLines;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(YOMI);}  }
class C{  public static int computeRawMessageSetExtensionSize(final int fieldNumber,final ByteString value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeBytesSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  public int hashCode(){  return getClass().hashCode() + commandId;}  }
class C{  public static void openFolder(final Graph2D graph,final Node folderNode){  Preconditions.checkNotNull(graph,"Error: Graph argument can not be null");  Preconditions.checkNotNull(folderNode,"Error: Folder node argument can not be null");  final HierarchyManager hierarchy=graph.getHierarchyManager();  final double w=graph.getWidth(folderNode);  final double h=graph.getHeight(folderNode);  final NodeList folderNodes=new NodeList();  folderNodes.add(folderNode);  graph.firePreEvent();  for (final NodeCursor nc=folderNodes.nodes(); nc.ok(); nc.next()) {    final Graph2D innerGraph=(Graph2D)hierarchy.getInnerGraph(nc.node());    final YPoint folderP=graph.getLocation(nc.node());    final NodeList innerNodes=new NodeList(innerGraph.nodes());    hierarchy.openFolder(nc.node());    final Rectangle2D.Double gBox=graph.getRealizer(nc.node()).getBoundingBox();    LayoutTool.moveSubgraph(graph,innerNodes.nodes(),folderP.x - gBox.x,folderP.y - gBox.y);  }  graph.firePostEvent();  graph.unselectAll();  for (final NodeCursor nc=folderNodes.nodes(); nc.ok(); nc.next()) {    graph.setSelected(nc.node(),true);  }  if ((w != graph.getWidth(folderNode)) || (h != graph.getHeight(folderNode))) {    for (final EdgeCursor ec=folderNode.outEdges(); ec.ok(); ec.next()) {      graph.setSourcePointRel(ec.edge(),YPoint.ORIGIN);    }    for (final EdgeCursor ec=folderNode.inEdges(); ec.ok(); ec.next()) {      graph.setTargetPointRel(ec.edge(),YPoint.ORIGIN);    }  }  graph.updateViews();}  }
class C{  public void addListener(Animator.AnimatorListener listener){  mListeners.add(listener);}  }
class C{  private UnicodeBlock(String idName){  super(idName);  map.put(idName,this);}  }
class C{  public boolean hasTemporal(boolean isForMapKey){  return false;}  }
class C{  public void saveForumBotMode(BotModeConfig config){  config.addCredentials(this);  POST(this.url + "/save-forum-bot-mode",config.toXML());}  }
class C{  public static void checkState(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException();  }}  }
class C{  @Override public void limitFileSizeTo(int size){  this.fileLimitation=size;}  }
class C{  public void sendChunk(byte chunk[]) throws NetworkException {  if (mConnection.getSession().isFailureReportRequested()) {    mBuffer.putMessage(chunk);  } else {    sendChunkImmediately(chunk);  }}  }
class C{  public void update(){  if (this.lastUpdate < this.entityCapability.getTrackingTime()) {    this.lastUpdate++;  } else {    this.trackerReady=true;  }  if (this.trackerReady && this.entityCapability.isDirty()) {    this.lastUpdate=0;    this.trackerReady=false;    this.entityCapability.setDirty(false);    this.sendPacket();  }}  }
class C{  public SortedStructSet(StructTypeImpl structType){  if (structType == null) {    throw new IllegalArgumentException(LocalizedStrings.SortedStructSet_STRUCTTYPE_MUST_NOT_BE_NULL.toLocalizedString());  }  this.structType=structType;}  }
class C{  public boolean isManyToOne(){  return false;}  }
class C{  public boolean remove(Node child){  child.setParent(null);  return getParentList(this).remove(child);}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public static <E>ImmutableList<E> copyOf(E[] elements){switch (elements.length) {case 0:    return ImmutableList.of();case 1:  return new SingletonImmutableList<E>(elements[0]);default :return new RegularImmutableList<E>(checkElementsNotNull(elements.clone()));}}  }
class C{  public void registerResultObserver(ResultObserver resultObserver){  mResultObserver=resultObserver;}  }
class C{  public JdbcConnection(){}  }
class C{  void seek(int position) throws IOException {  mDexFile.seek(position);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.545 -0400",hash_original_method="25CAA756E143C0865A6637497CD6F2C1",hash_generated_method="3C38BB05E0B5167D561C92351BF342B4") public SimpleArrayMap(){  mHashes=ContainerHelpers.EMPTY_INTS;  mArray=ContainerHelpers.EMPTY_OBJECTS;  mSize=0;}  }
class C{  public KnowledgeSelection(IKnowledge knowledge){  if (knowledge == null) {    throw new NullPointerException("Knowledge must not be null.");  }  Object result;  try {    result=new MarshalledObject(knowledge).get();  } catch (  Exception e1) {    e1.printStackTrace();    throw new IllegalStateException("Could not clone.");  }  this.knowledge=(IKnowledge)result;}  }
class C{  public NbtTagList(){  this.tagList=new ArrayList<>(8);}  }
class C{  public void removeFriend(String friend){  try {    getConnection().destroyFriendship(friend);  } catch (  TwitterException exception) {    log(exception);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.704 -0500",hash_original_method="61AC833B412EB853D23C85E2B80FFC12",hash_generated_method="D48D459DC0052CF8C262EB9FE6AB3011") public LinkProperties rspLinkProperties(Message response){  LinkProperties retVal=(LinkProperties)response.obj;  if (DBG)   log("rspLinkProperties=" + retVal);  return retVal;}  }
class C{  public CodePosition addPositionChoice(int index,String entry,String prefix,Properties props){  CodeScheme cs=(CodeScheme)super.addPositionChoice(index,entry,prefix,props);  prefix=PropUtils.getScopedPropertyPrefix(prefix) + entry + ".";  String next=props.getProperty(prefix + NextProperty);  if (next != null) {    String nextClassName=props.getProperty(next + ".class");    if (nextClassName != null) {      CodePosition cp=(CodePosition)ComponentFactory.create(nextClassName);      if (DEBUG) {        Debug.output("CodeScheme created next class(" + next + "), "+ nextClassName);      }      if (cp != null) {        cs.nextPosition=cp;        cp.parsePositions(next,props);      }    } else {      if (DEBUG) {        Debug.output("CodeScheme couldn't create next class(" + next + "), "+ nextClassName);      }    }  }  cs.defaultSymbolCode=props.getProperty(prefix + DefaultSymbolCodeProperty);  cs.hierarchyAddition=props.getProperty(prefix + HierarchyCodeAdditionProperty,"");  return cs;}  }
class C{  public static MouseListener remove(MouseListener l,MouseListener oldl){  return (MouseListener)removeInternal(l,oldl);}  }
class C{  private void processResource(HttpMessage message){  List<SpiderParser> parsers=parent.getController().getParsers();  Source source=new Source(message.getResponseBody().toString());  String path=null;  try {    path=message.getRequestHeader().getURI().getPath();  } catch (  URIException e) {  } finally {    if (path == null)     path="";  }  boolean alreadyConsumed=false;  for (  SpiderParser parser : parsers) {    if (parser.canParseResource(message,path,alreadyConsumed)) {      if (log.isDebugEnabled())       log.debug("Parser " + parser + " can parse resource '"+ path+ "'");      if (parser.parseResource(message,source,depth))       alreadyConsumed=true;    } else {      if (log.isDebugEnabled())       log.debug("Parser " + parser + " cannot parse resource '"+ path+ "'");    }  }}  }
class C{  public static String descriptorToDot(String descr){  int targetLen=descr.length();  int offset=0;  int arrayDepth=0;  while (targetLen > 1 && descr.charAt(offset) == '[') {    offset++;    targetLen--;  }  arrayDepth=offset;  if (targetLen == 1) {    descr=primitiveTypeLabel(descr.charAt(offset));    offset=0;    targetLen=descr.length();  } else {    if (targetLen >= 2 && descr.charAt(offset) == 'L' && descr.charAt(offset + targetLen - 1) == ';') {      targetLen-=2;      offset++;    }  }  char[] buf=new char[targetLen + arrayDepth * 2];  int i;  for (i=0; i < targetLen; i++) {    char ch=descr.charAt(offset + i);    buf[i]=(ch == '/') ? '.' : ch;  }  while (arrayDepth-- > 0) {    buf[i++]='[';    buf[i++]=']';  }  assert i == buf.length;  return new String(buf);}  }
class C{  public boolean isInfinite(){  return Float.isInfinite(value);}  }
class C{  @Override final public NotExistsNode visit(final ASTNotExistsFunc node,Object data) throws VisitorException {  final VarNode anonvar=context.createAnonVar("-exists-");  final GroupGraphPattern parentGP=graphPattern;  graphPattern=scopedGroupGraphPattern(node);  @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> innerGraphPattern=(GraphPatternGroup<IGroupMemberNode>)node.jjtGetChild(0).jjtAccept(this,null);  final NotExistsNode fn=new NotExistsNode(anonvar,innerGraphPattern);  graphPattern=parentGP;  return fn;}  }
class C{  public boolean isInvalidSearchPhrase(){  return invalidSearchPhrase;}  }
class C{  private void validateBusinessObjectDataNotificationFilterBusinessObjectDefinitionFields(BusinessObjectDataNotificationFilter filter){  Assert.hasText(filter.getNamespace(),"A business object definition namespace must be specified.");  filter.setNamespace(filter.getNamespace().trim());  Assert.hasText(filter.getBusinessObjectDefinitionName(),"A business object definition name must be specified.");  filter.setBusinessObjectDefinitionName(filter.getBusinessObjectDefinitionName().trim());}  }
class C{  public void writeDataFile(String filename) throws DataFileException {  File outFile=new File(filename);  FileOutputStream fos=null;  try {    fos=new FileOutputStream(outFile);  } catch (  FileNotFoundException e) {    throw new DataFileException("Could not open file " + filename,e);  }  try {    writeDataFile(fos);  }  finally {    try {      if (fos != null)       fos.close();    } catch (    IOException e) {      throw new DataFileException("Could not close file " + filename + ", may not have written correctly;",e);    }  }}  }
class C{  @Override public int following(int offset){  CharacterIterator text=getText();  checkOffset(offset,text);  if (cachedBreakPositions == null || offset < cachedBreakPositions[0] || offset >= cachedBreakPositions[cachedBreakPositions.length - 1]) {    cachedBreakPositions=null;    return super.following(offset);  } else {    positionInCache=0;    while (positionInCache < cachedBreakPositions.length && offset >= cachedBreakPositions[positionInCache]) {      ++positionInCache;    }    text.setIndex(cachedBreakPositions[positionInCache]);    return text.getIndex();  }}  }
class C{  @Override public String toString(){  return "CUDA_MEMCPY2D[" + createString(",") + "]";}  }
class C{  public TraceList createTrace(final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(name,"IE00242: Name argument can't be null");  Preconditions.checkNotNull(description,"IE00246: Description argument can't be null");  final TraceList trace=m_provider.createTrace(m_project,name,description);  m_traces.add(trace);  for (  final IProjectListener listener : m_listeners) {    try {      listener.addedTrace(m_project,trace);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_project.getConfiguration().updateModificationDate();  return trace;}  }
class C{  public void reset(){  m_next=0;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e("OpenGlUtils",msg);    throw new RuntimeException(msg);  }}  }
class C{  public final void removeActivity(final int index){  if ((index % 2 != 0) || (index < 0) || (index > getPlanElements().size() - 1)) {    log.warn(this + "[index=" + index+ " is wrong. nothing removed]");  } else   if (getPlanElements().size() == 1) {    log.warn(this + "[index=" + index+ " only one act. nothing removed]");  } else {    if (index == 0) {      getPlanElements().remove(index + 1);      getPlanElements().remove(index);    } else     if (index == getPlanElements().size() - 1) {      getPlanElements().remove(index);      getPlanElements().remove(index - 1);    } else {      Leg prev_leg=(Leg)getPlanElements().get(index - 1);      prev_leg.setDepartureTime(Time.UNDEFINED_TIME);      prev_leg.setTravelTime(Time.UNDEFINED_TIME);      prev_leg.setTravelTime(Time.UNDEFINED_TIME - prev_leg.getDepartureTime());      prev_leg.setRoute(null);      getPlanElements().remove(index + 1);      getPlanElements().remove(index);    }  }}  }
class C{  private boolean skipBrackets(){  if (fToken == Symbols.TokenRBRACKET) {    nextToken();    if (fToken == Symbols.TokenLBRACKET) {      return true;    }  }  return false;}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {  boolean isValueNumeric=false;  try {    if (value.equals("0") || !value.endsWith("0")) {      Double.parseDouble(value);      isValueNumeric=true;    }  } catch (  NumberFormatException e) {    isValueNumeric=false;  }  if (json.charAt(json.length() - 1) != '{') {    json.append(',');  }  json.append(escapeJSON(key));  json.append(':');  if (isValueNumeric) {    json.append(value);  } else {    json.append(escapeJSON(value));  }}  }
class C{  public Object remove(int i){  boundsCheck(i);  if (i >= size)   throw new ArrayIndexOutOfBoundsException("LBJ: OVector: Can't remove element at index " + i + " as it is larger than the size ("+ size+ ")");  Object result=vector[i];  for (int j=i + 1; j < size; ++j)   vector[j - 1]=vector[j];  vector[--size]=null;  return result;}  }
class C{  public boolean supportsInsertReturning(){  return serverVersion.isEqualOrAbove(2,0);}  }
class C{  void checkCreated(int expected){  checkEventCount(expected,createdListenerFiredCount);}  }
class C{  public ParseResult(int status,SpecObj specObj,IResource parsedResource,Errors parseErrors,Errors semanticErrors,long parserCalled){  this.status=status;  this.specObj=specObj;  this.parsedResource=parsedResource;  this.parseErrors=parseErrors;  this.semanticErrors=semanticErrors;  this.detectedErrors=new Vector<TLAMarkerInformationHolder>();  this.parserCalled=parserCalled;}  }
class C{  public AppVersion(int major,int minor,int patch,int milestone,String modifier){  this.major=major;  this.minor=minor;  this.patch=patch;  this.milestone=milestone;  this.modifier=modifier;}  }
class C{  public GroupedInspector(Properties[] properties,Properties extraProperties,GUIState state,String name,String title,String[] groupNames){  buildGroupedInspector(properties,extraProperties,state,name,title,groupNames);}  }
class C{  public void validateCurrentFrame(){  setCurrentFrame(currentFrame);}  }
class C{  public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme!");  }  if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme-specific part!");  }  setScheme(p_scheme);  setPath(p_schemeSpecificPart);}  }
class C{  public String distributionSpreadTipText(){  return "The maximum class distribution spread. " + "(0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a " + "10:1 ratio between the classes).";}  }
class C{  public JmsTopicListener(Delegator delegator,String jndiServer,String jndiName,String topicName,String userName,String password){  super(delegator);  this.jndiServer=jndiServer;  this.jndiName=jndiName;  this.topicName=topicName;  this.userName=userName;  this.password=password;}  }
class C{  public boolean updateSensorConfig(ILoggingSensorConfig sensorConfig){  if (Objects.equals(this.sensorConfig.getClassName(),sensorConfig.getClassName())) {    this.sensorConfig=sensorConfig;    return true;  }  return false;}  }
class C{  public void stopPlaying(){  unregisterReceiver(mPingReceiver);  mPingReceiver=null;  ((NotificationManager)getSystemService(NOTIFICATION_SERVICE)).cancel(NOTIFICATION_ID);  mStartOrStopFab.setImageResource(android.R.drawable.ic_media_play);}  }
class C{  public static boolean isValidClassName(String className){  if (className.indexOf('(') >= 0) {    return false;  }  return true;}  }
class C{  private static double CallNonvirtualDoubleMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualDoubleMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Double,true);  return Reflection.unwrapDouble(returnObj);}  }
class C{  @Override public QueuableTask next() throws TaskQueueException {  if (iterator == null) {    iterator=tiers.iterator();    currTier=null;  }  if (currTier != null) {    final QueuableTask task=currTier.nextTaskToLaunch();    if (task != null)     return task;    currTier=null;  }  while (currTier == null && iterator.hasNext()) {    if (iterator.hasNext()) {      currTier=iterator.next();      final QueuableTask task=currTier.nextTaskToLaunch();      if (task != null)       return task; else       currTier=null;    }  }  return null;}  }
class C{  @Command(description="Imports a certificate") public void importCertificate(@Param(name="file",description="Certificate file (PEM)") String file,@Param(name="clientId",description="Member identifier") ClientId clientId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(CERT_FILE_NAME_PARAM,file);  logData.put(CLIENT_IDENTIFIER_PARAM,clientId);  try {    byte[] certBytes=fileToBytes(file);    ImportCertResponse response=SignerClient.execute(new ImportCert(certBytes,CertificateInfo.STATUS_REGISTERED,clientId));    logData.put(KEY_ID_PARAM,response.getKeyId());    AuditLogger.log(IMPORT_A_CERTIFICATE_FROM_THE_FILE,XROAD_USER,logData);    System.out.println(response.getKeyId());  } catch (  Exception e) {    AuditLogger.log(IMPORT_A_CERTIFICATE_FROM_THE_FILE,XROAD_USER,e.getMessage(),logData);    System.out.println("ERROR: " + e);  }}  }
class C{  public Region createDynamicRegion(String parentRegionName,String regionName) throws CacheException {  if (isClosed()) {    throw new IllegalStateException("Dynamic region factory is closed");  }  doBeforeRegionCreated(parentRegionName,regionName,null);  Region region=createDynamicRegionImpl(parentRegionName,regionName,true);  doAfterRegionCreated(region,false,false,null);  return region;}  }
class C{  public static ParamConstraintType serializableInstance(){  return ParamConstraintType.LT;}  }
class C{  @Override public void close() throws Exception {  sideEffects.close();}  }
class C{  public CatalogEntryRemovedException(){}  }
class C{  public String initFileTipText(){  return "The dataset to initialize the filter with.";}  }
class C{  protected Map<Id<Node>,Path> constructPaths(Node fromNode,Set<Node> toNodes,double startTime,Map<Id<Node>,Double> arrivalTimes){  Map<Id<Node>,Path> paths=new HashMap<Id<Node>,Path>();  for (  Node toNode : toNodes) {    Double arrivalTime=arrivalTimes.get(toNode.getId());    Path path=null;    if (arrivalTime != null) {      ArrayList<Node> nodes=new ArrayList<Node>();      ArrayList<Link> links=new ArrayList<Link>();      nodes.add(0,toNode);      Link tmpLink=getData(toNode).getPrevLink();      if (tmpLink != null) {        while (tmpLink.getFromNode() != fromNode) {          links.add(0,tmpLink);          nodes.add(0,tmpLink.getFromNode());          tmpLink=getData(tmpLink.getFromNode()).getPrevLink();        }        links.add(0,tmpLink);        nodes.add(0,tmpLink.getFromNode());      }      DijkstraNodeData toNodeData=getData(toNode);      path=new Path(nodes,links,arrivalTime - startTime,toNodeData.getCost());    }    paths.put(toNode.getId(),path);  }  return paths;}  }
class C{  public TransformerHandlerImpl(TransformerImpl transformer,boolean doFragment,String baseSystemID){  super();  m_transformer=transformer;  m_baseSystemID=baseSystemID;  XPathContext xctxt=transformer.getXPathContext();  DTM dtm=xctxt.getDTM(null,true,transformer,true,true);  m_dtm=dtm;  dtm.setDocumentBaseURI(baseSystemID);  m_contentHandler=dtm.getContentHandler();  m_dtdHandler=dtm.getDTDHandler();  m_entityResolver=dtm.getEntityResolver();  m_errorHandler=dtm.getErrorHandler();  m_lexicalHandler=dtm.getLexicalHandler();  m_incremental=transformer.getIncremental();  m_optimizer=transformer.getOptimize();  m_source_location=transformer.getSource_location();}  }
class C{  public JdbcConnection createDefaultJdbcConnection(){  JdbcConnection jdbcConnection=new JdbcConnection();  jdbcConnection.setUrl("jdbc:h2:mem:herdTestDb");  jdbcConnection.setUsername("");  jdbcConnection.setPassword("");  jdbcConnection.setDatabaseType(JdbcDatabaseType.POSTGRES);  return jdbcConnection;}  }
class C{  public void add(double value1[],double value2[]){  if ((value1 == null) || (value2 == null)) {    throw new NullPointerException();  }  if (value1.length != value2.length) {    throw new IllegalArgumentException("Arrays must be of the same length");  }  for (int i=0; i < value1.length; i++) {    add(value1[i],value2[i]);  }}  }
class C{  public final void free(){  _source=null;  TempBuffer tempWrite=_tempWrite;  _tempWrite=null;  _writeBuffer=null;  if (tempWrite != null) {    TempBuffer.free(tempWrite);  }}  }
class C{  public synchronized ArrayList<V> removeAll(@Nullable Predicate<K> predicate){  ArrayList<V> oldValues=new ArrayList<>();  Iterator<LinkedHashMap.Entry<K,V>> iterator=mMap.entrySet().iterator();  while (iterator.hasNext()) {    LinkedHashMap.Entry<K,V> entry=iterator.next();    if (predicate == null || predicate.apply(entry.getKey())) {      oldValues.add(entry.getValue());      mSizeInBytes-=getValueSizeInBytes(entry.getValue());      iterator.remove();    }  }  return oldValues;}  }
class C{  private List<KNNHeap> initHeaps(SpatialPrimitiveDistanceFunction<V> distFunction,N pr){  List<KNNHeap> pr_heaps=new ArrayList<>(pr.getNumEntries());  for (int j=0; j < pr.getNumEntries(); j++) {    pr_heaps.add(DBIDUtil.newHeap(k));  }  processDataPages(distFunction,pr_heaps,null,pr,pr);  return pr_heaps;}  }
class C{  @SuppressWarnings("unchecked") public void writeClob(Clob x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialClob(x));  }}  }
class C{  public SignatureFile(Manifest manifest,String name) throws JarException {  this(name,true);  this.manifest=manifest;  Enumeration<MessageHeader> enum_=manifest.entries();  while (enum_.hasMoreElements()) {    MessageHeader mh=enum_.nextElement();    String entryName=mh.findValue("Name");    if (entryName != null) {      add(entryName);    }  }}  }
class C{  protected int fillColumnNames(OneRowChange data) throws SQLException, ApplierException {  Table t;  t=getTableMetadata(data);  for (  Column column : t.getAllColumns()) {    ListIterator<OneRowChange.ColumnSpec> litr=data.getColumnSpec().listIterator();    for (; litr.hasNext(); ) {      OneRowChange.ColumnSpec cv=litr.next();      if (cv.getIndex() == column.getPosition()) {        cv.setName(column.getName());        if (column.isSignedSet())         cv.setSigned(column.isSigned());        cv.setTypeDescription(column.getTypeDescription());        if (cv.getLength() == 0)         cv.setLength((int)column.getLength());        if (cv.getType() == Types.BLOB)         cv.setBlob(column.isBlob());        break;      }    }    litr=data.getKeySpec().listIterator();    for (; litr.hasNext(); ) {      OneRowChange.ColumnSpec cv=litr.next();      if (cv.getIndex() == column.getPosition()) {        cv.setName(column.getName());        if (column.isSignedSet())         cv.setSigned(column.isSigned());        cv.setTypeDescription(column.getTypeDescription());        if (cv.getLength() == 0)         cv.setLength((int)column.getLength());        if (cv.getType() == Types.BLOB)         cv.setBlob(column.isBlob());        break;      }    }  }  return t.getColumnCount();}  }
class C{  @NotNull public TabBuilder tabType(@NotNull TabType tabType){  this.tabType=tabType;  return this;}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY,long time){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX,time);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY,time);  return spingbackX || spingbackY;}  }
class C{  public void write(byte tag,DerOutputStream out) throws IOException {  write(tag);  putLength(out.count);  write(out.buf,0,out.count);}  }
class C{  protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){  try {    InputStream is=clazz.getResourceAsStream(resource);    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));    Map<String,Step> steps=new HashMap<>();    String step;    while ((step=readLine(r)) != null) {      Step s=parseStep(r,step);      steps.put(s.name,s);    }    r.close();    return steps;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isInfinite(){  return Double.isInfinite(value);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  private void output(String msg){  PrintStream out=this.out instanceof PrintStream ? (PrintStream)this.out : new PrintStream(this.out,true);  out.println(msg);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public void resetGame(){  dots.clear();  try {    maze.setTo(TableLoader.loadPNMFile(PacMan.class.getResourceAsStream("images/maze" + (level - 1) % MAX_MAZES + ".pbm")));  } catch (  Exception e) {    e.printStackTrace();  }  dots.setObjectLocation(new Energizer(),new Double2D(1,5));  dots.setObjectLocation(new Energizer(),new Double2D(26,5));  dots.setObjectLocation(new Energizer(),new Double2D(1,25));  dots.setObjectLocation(new Energizer(),new Double2D(26,25));  for (int x=0; x < maze.getWidth(); x++)   for (int y=0; y < maze.getHeight(); y++)   if (maze.field[x][y] == 0 && !(y == 16 && x >= 12 && x <= 16))   dots.setObjectLocation(new Dot(),new Double2D(x,y));  resetAgents();}  }
class C{  public ArrayIntCompressed(int[] ints){  this(ints,0,ints.length);}  }
class C{  private double ARAMm_Update_Weights(double[] data,double[] labels,int category){  double weightChange=0;  for (int i=0; i < numFeatures; i++) {    if (data[i] < weightsA[category][i]) {      weightsA[category][i]=(learningRate * data[i]) + (1 - learningRate) * weightsA[category][i];    }  }  for (int i=0; i < numClasses; i++) {    if (weightblearnmethod == 0) {      weightsB[category][i]=labels[i] + weightsB[category][i];      weightChange=1;    } else {      if (labels[i] < weightsB[category][i]) {        weightsB[category][i]=(learningRate * labels[i]) + (1 - learningRate) * weightsB[category][i];        weightChange=1;      }    }  }  return weightChange;}  }
class C{  public boolean canShowAdAtPosition(int position,int fetchedAdsCount){  return isAdPosition(position) && isAdAvailable(position,fetchedAdsCount);}  }
class C{  public final void testGetCrtCoefficient(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getCrtCoefficient()));}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[j][i]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public boolean isReadyToPaint(){  for (  Component c : getLayers()) {    if (!((Layer)c).isReadyToPaint()) {      return false;    }  }  return true;}  }
class C{  private Transform matchFile(Class type) throws Exception {  if (type == File.class) {    return new FileTransform();  }  return null;}  }
class C{  public void add(final ConversationStates state,final String triggerString,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action){  Collection<Expression> triggerExpressions=createUniqueTriggerExpressions(state,Arrays.asList(triggerString),null,condition,reply,action);  add(triggerExpressions,state,condition,secondary,nextState,reply,action);}  }
class C{  public SpanManager replace(Span s,String str){  return replace(s.getStart(),s.getEnd(),str);}  }
class C{  private SectorAllocator scanForSectorWithFreeSpace(final int nbytes){  final byte tag=SectorAllocator.getTag(nbytes);  for (  SectorAllocator s : m_sectors) {    if (s.m_free[tag] > 0) {      if (log.isDebugEnabled())       log.debug("Can allocate from sector: " + s);      return s;    }  }  return null;}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public void clearYTextLabels(){  clearYTextLabels(0);}  }
class C{  public void write(ExceptionlessOutputStream out){  super.write(out);  write(out,table);}  }
class C{  @Override public boolean isValidEntity(Entity entity,IGame game,boolean useValidNonInfantryCheck){  final boolean oldDone=entity.done;  entity.done=false;  final boolean result=super.isValidEntity(entity,game,useValidNonInfantryCheck);  entity.done=oldDone;  return result;}  }
class C{  public static long cycleLeftC(long v,int shift,int len){  if (shift == 0) {    return v;  }  if (shift < 0) {    return cycleRightC(v,-shift,len);  }  final long ones=(1 << len) - 1;  return (((v) << (shift)) | ((v) >>> ((len) - (shift)))) & ones;}  }
class C{  @Override public void textSize(float size){  if (textFont == null) {    defaultFontOrDeath("textSize",size);  }  Typeface font=(Typeface)textFont.getNative();  if (font != null) {    fillPaint.setTextSize(size);  }  textSize=size;  textLeading=(textAscent() + textDescent()) * 1.275f;}  }
class C{  public TopHitsBuilder addHighlightedField(String name,int fragmentSize,int numberOfFragments){  highlightBuilder().field(name,fragmentSize,numberOfFragments);  return this;}  }
class C{  public SVGPath cubicTo(double c1x,double c1y,double c2x,double c2y,double x,double y){  append(SVGConstants.PATH_CUBIC_TO,c1x,c1y,c2x,c2y,x,y);  return this;}  }
class C{  public void createODKDirs() throws RuntimeException {  String cardstatus=Environment.getExternalStorageState();  if (!cardstatus.equals(Environment.MEDIA_MOUNTED)) {    throw new RuntimeException(Collect.getInstance().getApplication().getString(R.string.sdcard_unmounted,cardstatus));  }  String[] dirs={mOdkRoot,mFormsPath,mInstancesPath,mCachePath,mMetadataPath};  for (  String dirName : dirs) {    File dir=new File(dirName);    if (!dir.exists()) {      if (!dir.mkdirs()) {        RuntimeException e=new RuntimeException("ODK reports :: Cannot create directory: " + dirName);        throw e;      }    } else {      if (!dir.isDirectory()) {        RuntimeException e=new RuntimeException("ODK reports :: " + dirName + " exists, but is not a directory");        throw e;      }    }  }}  }
class C{  private void readObject(){}  }
class C{  public static void write(float latPoint,float lonPoint,float radius,int units,int nverts,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.CIRCLE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_CIRCLE);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeFloat(radius);  dos.writeByte(units);  dos.writeInt(nverts);  properties.write(dos);}  }
class C{  public static MmContent extractFileIcon(SipRequest request,RcsSettings rcsSettings) throws FileAccessException {  MmContent result=null;  try {    String content=request.getContent();    String boundary=request.getBoundaryContentType();    Multipart multi=new Multipart(content,boundary);    if (!multi.isMultipart()) {      return null;    }    String mimeType=FILEICON_MIMETYPE;    String data=multi.getPart(mimeType);    if (data == null) {      mimeType="image/png";      data=multi.getPart(mimeType);    }    if (data == null) {      return null;    }    String iconName=buildFileiconUrl(ChatUtils.getContributionId(request),mimeType);    Uri fileIconUri=Uri.fromFile(new File(rcsSettings.getFileIconRootDirectory().concat(iconName)));    byte[] fileIconData=Base64.decodeBase64(mimeType.getBytes(UTF8));    result=ContentManager.createMmContent(fileIconUri,mimeType,fileIconData.length,iconName);    result.writeData2File(fileIconData);    return result;  }  finally {    if (result != null) {      result.closeFile();    }  }}  }
class C{  private void addImg(byte[] in,HashMap<String,Integer> urlToOffset){  if (_inImg) {    ensureCapacity(IMG_INFO_LEN);    _out[_outLen]=IMG_KIND;    _out[_outLen + 1]=checkDuplicates(in,_out,urlToOffset,_srcAttrFirst,_srcAttrLast,_outLen + 1);    _out[_outLen + IMG_SRC_FIRST]=_srcAttrFirst;    _out[_outLen + IMG_SRC_LAST]=_srcAttrLast;    _outLen+=IMG_INFO_LEN;    _inImg=false;    _srcAttrFirst=(-1);    _srcAttrLast=(-1);  }}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public boolean isInside(Vec3i pos){  for (  AxisAlignedBB boundingBox : this.boundingBoxes) {    if (boundingBox.isVecInside(new Vec3d(pos.getX(),pos.getY(),pos.getZ()))) {      return true;    }  }  return false;}  }
class C{  Rule variableDefinition(){  return Sequence(group.types.type().label("type"),variableDefinitionPart().label("head"),ZeroOrMore(Sequence(Ch(','),group.basics.optWS(),variableDefinitionPart()).label("tail")),set(actions.createVariableDefinition(value("type"),value("head"),values("ZeroOrMore/tail"))));}  }
class C{  static int divideArrayByInt(int[] quotient,int[] dividend,final int dividendLength,final int divisor){  long rem=0;  long bLong=divisor & 0xffffffffL;  for (int i=dividendLength - 1; i >= 0; i--) {    long temp=(rem << 32) | (dividend[i] & 0xffffffffL);    long quot;    if (temp >= 0) {      quot=(temp / bLong);      rem=(temp % bLong);    } else {      long aPos=temp >>> 1;      long bPos=divisor >>> 1;      quot=aPos / bPos;      rem=aPos % bPos;      rem=(rem << 1) + (temp & 1);      if ((divisor & 1) != 0) {        if (quot <= rem) {          rem-=quot;        } else {          if (quot - rem <= bLong) {            rem+=bLong - quot;            quot-=1;          } else {            rem+=(bLong << 1) - quot;            quot-=2;          }        }      }    }    quotient[i]=(int)(quot & 0xffffffffL);  }  return (int)rem;}  }
class C{  @Override public void resetReferences(){  _refs.clear();}  }
class C{  public static String[] orderVersions(String versionA,String versionB){  if (DebianVersionComparator.compareVersions(versionA,versionB) > 0) {    String permute=versionA;    versionA=versionB;    versionB=permute;  }  return new String[]{versionA,versionB};}  }
class C{  public static void transformedBitwise(){  transformedBitwise++;}  }
class C{  public static String toLowerCase(final String value){  return (value == null ? null : value.toLowerCase());}  }
class C{  public AttributeDialog(){  initComponents();}  }
class C{  public void mockUnboundedSource(String inputFile,PipelineResult result){  startInjectorIfNeeded(inputFile);  waitToFinish(result);}  }
class C{  @Override public int[] executeBatch() throws SQLException {  try {    debugCodeCall("executeBatch");    if (batchParameters == null) {      batchParameters=New.arrayList();    }    int size=batchParameters.size();    int[] result=new int[size];    boolean error=false;    SQLException next=null;    checkClosed();    try {      for (int i=0; i < size; i++) {        Value[] set=batchParameters.get(i);        ArrayList<? extends ParameterInterface> parameters=command.getParameters();        for (int j=0; j < set.length; j++) {          Value value=set[j];          ParameterInterface param=parameters.get(j);          param.setValue(value,false);        }        try {          result[i]=executeUpdateInternal();        } catch (        Exception re) {          SQLException e=logAndConvert(re);          if (next == null) {            next=e;          } else {            e.setNextException(next);            next=e;          }          result[i]=Statement.EXECUTE_FAILED;          error=true;        }      }      batchParameters=null;      if (error) {        JdbcBatchUpdateException e=new JdbcBatchUpdateException(next,result);        throw e;      }      return result;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void openPopupMenu(){  lockLayer=new MenuLockLayer(this);  popupMenu=new PopupMenu(action,actionManager,managerProvider,presentationFactory,lockLayer,this,keyBindingAgent,"toolbar");  lockLayer.add(popupMenu);  int left=getAbsoluteLeft();  int top=getAbsoluteTop() + 24;  popupMenu.getElement().getStyle().setTop(top,com.google.gwt.dom.client.Style.Unit.PX);  popupMenu.getElement().getStyle().setLeft(left,com.google.gwt.dom.client.Style.Unit.PX);}  }
class C{  private void startDraining(boolean overflow){  byteBuffer.flip();  if (overflow && byteBuffer.remaining() == 0) {    byteBuffer=ByteBuffer.allocate(byteBuffer.capacity() * 2);  } else {    draining=true;  }}  }
class C{  public static BooleanGlassGenePm serializableInstance(){  return new BooleanGlassGenePm((ManualActiveLagGraph)ManualActiveLagGraph.serializableInstance());}  }
class C{  public boolean equalHeaders(Instances dataset){  return (equalHeadersMsg(dataset) == null);}  }
class C{  public void movNativeAddress(Register dst,long imm){  assert (imm & 0xFFFF_0000_0000_0000L) == 0;  boolean firstMove=true;  for (int offset=0; offset < 48; offset+=16) {    int chunk=(int)(imm >> offset) & NumUtil.getNbitNumberInt(16);    if (firstMove) {      movz(64,dst,chunk,offset);      firstMove=false;    } else {      movk(64,dst,chunk,offset);    }  }  assert !firstMove;}  }
class C{  public void print_hash_code(){  System.out.println("Hash val: " + hashCode());}  }
class C{  synchronized protected void timeout(){  if (log.isDebugEnabled()) {    log.debug("timeout!");  }  setStatus("Timeout");  if (timeoutcounter++ == 5) {    for (int i=0; i < _numRows; i++) {      readState[i]=NONE;      writeState[i]=NONE;    }    setStatus("Aborted");    setLIOVersion("<unknown>");    timeoutcounter=0;    stopTimer();  } else {    issueNextOperation();  }}  }
class C{  public void splitQuery(I invocation,String rawURI) throws IOException {  int p=rawURI.indexOf('?');  if (p > 0) {    invocation.setQueryString(rawURI.substring(p + 1));    rawURI=rawURI.substring(0,p);  }  invocation.setRawURI(rawURI);  String uri=normalizeUri(rawURI);  invocation.setURI(uri);}  }
class C{  public void updateLine(int x1,int y1,int x2,int y2,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkLine.write(x1,y1,x2,y2,properties,link.dos);}  }
class C{  public static void configurePeriodicSync(Context context,int syncInterval,int flexTime){  Account account=getSyncAccount(context);  String authority=context.getString(R.string.content_authority);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    SyncRequest request=new SyncRequest.Builder().syncPeriodic(syncInterval,flexTime).setSyncAdapter(account,authority).setExtras(new Bundle()).build();    ContentResolver.requestSync(request);  } else {    ContentResolver.addPeriodicSync(account,authority,new Bundle(),syncInterval);  }}  }
class C{  public boolean isSnapToGrid(){  return snapToGrid;}  }
class C{  public boolean hasRoutedNetworks(URI networkUri){  return _routedNetworks != null && !disableRouting && _routedNetworks.contains(networkUri.toString());}  }
class C{  public static MethodHandle unboxExact(Wrapper type){  return unbox(type,0);}  }
class C{  protected boolean isUseClassName(){  return useClassName;}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  UpdatableSketch(final int nomEntries,final int lgResizeFactor,final float samplingProbability,final SummaryFactory<S> summaryFactory){  super(nomEntries,lgResizeFactor,samplingProbability,summaryFactory);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TANNOTATION_STRING_ARGUMENT;}  }
class C{  @Override public void streamInfoStatusChanged(StreamInfo info,String newStatus){  String channel="#" + info.getStream();  if (isChannelOpen(channel)) {    if (settings.getBoolean("printStreamStatus")) {      g.printLine(channel,"~" + newStatus + "~");    }    g.setChannelNewStatus(channel,newStatus);    if (info.getOnline() && info.getTimeStartedWithPicnicAgo() < 15 * 60 * 1000 && getHostedChannel(channel) != null) {      if (settings.getBoolean("autoUnhost") && c.onChannel(channel) && (info.stream.equals(c.getUsername()) || settings.listContains("autoUnhostStreams",info.stream))) {        c.sendCommandMessage(channel,".unhost","Trying to turn off host mode.. (Auto-Unhost)");      } else {        g.printLine(channel,"** Still hosting another channel while streaming. **");      }    }  }  if (info.getOnline() || !settings.getBoolean("ignoreOfflineNotifications")) {    g.statusNotification(channel,newStatus);  }}  }
class C{  public ISicresAbstractDocumentVO updateCML(ISicresAbstractDocumentVO document,AuthoringServiceSoapBindingStub authoringService,ContentServiceSoapBindingStub contentRepository) throws Exception {  Reference reference=new Reference(STORE,document.getId(),null);  Predicate predicate=new Predicate(new Reference[]{reference},null,null);  CheckoutResult checkOutResult=authoringService.checkout(predicate,null);  Reference workingCopyReference=checkOutResult.getWorkingCopies()[0];  MimeTypes mimeTypes=new MimeTypes();  String mimeType=mimeTypes.getMimeType(document.getName());  ContentFormat format=new ContentFormat(mimeType,AlfrescoKeys.ENCODING_UTF8);  Content contentResult=contentRepository.write(workingCopyReference,Constants.PROP_CONTENT,document.getContent(),format);  byte[] bytes=UtilsFile.getByteContent(contentResult);  document.setContent(bytes);  Predicate predicate_working_copy=new Predicate(new Reference[]{workingCopyReference},null,null);  NamedValue[] comments=new NamedValue[]{Utils.createNamedValue("description","El contenido ha sido actualizado")};  authoringService.checkin(predicate_working_copy,comments,false);  return document;}  }
class C{  public void nodeAdded(SessionEvent event){  setEvent2Received(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.542 -0500",hash_original_method="F6DD6C3EA4EC095AD6C456C3C2A4311E",hash_generated_method="D0173F6A98A344AF92F85E29FE893017") @DSVerified("Potentially listening to other socket") @DSSpec(DSCat.INTERNET) public DatagramSocket createDatagramSocket(int port) throws SocketException {  return new DatagramSocket(port);}  }
class C{  public T caseEnumAttributeSource(EnumAttributeSource object){  return null;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder documentUrl(URL documentUrl){  this.document_url=documentUrl;  return this;}  }
class C{  static public void log(final RuleStats stats){  if (log.isInfoEnabled()) {    log.info(stats.toString());  }}  }
class C{  NodeTextRep decompSubstituteInNodeText(NodeRepresentation nodeRep,ExprNode sn,NodeTextRep nodeTextRep,NodeRepresentation originalNodeRep){  Decomposition decomp=nodeRep.decomposition;  StringSet prevDeclared=this.declaredIdentifiers.clone();  addDeclaredSymbols(prevDeclared,originalNodeRep);  addSymbolsDeclaredLater(prevDeclared,originalNodeRep,false);  Renaming rename=decomp.renaming.clone();  addToRenaming(rename,prevDeclared,sn);  int decompParamsLen=0;  if (decomp.formalParams != null) {    decompParamsLen=decomp.formalParams.length;  }  FormalParamNode[] formalParams=new FormalParamNode[decompParamsLen + rename.identifiers.size()];  String[] arguments=new String[formalParams.length];  boolean[] isBoundedIdRenaming=new boolean[formalParams.length];  SemanticNode[] argNodes=new SemanticNode[formalParams.length];  for (int i=0; i < decompParamsLen; i++) {    formalParams[i]=decomp.formalParams[i];    arguments[i]=decomp.arguments[i];    isBoundedIdRenaming[i]=false;    argNodes[i]=decomp.argNodes[i];  }  for (int i=0; i < rename.identifiers.size(); i++) {    formalParams[i + decompParamsLen]=rename.identifiers.elementAt(i);    arguments[i + decompParamsLen]=rename.newNames.elementAt(i);    isBoundedIdRenaming[i + decompParamsLen]=true;    argNodes[i + decompParamsLen]=null;  }  NodeTextRep result=substituteInNodeText(formalParams,arguments,isBoundedIdRenaming,argNodes,sn,nodeTextRep,decomp);  result.renaming=rename;  addToRenaming(this.state.renaming,prevDeclared,sn);  return result;}  }
class C{  public static void selectPredecessors(final ZyGraph graph,final NaviNode node){  Preconditions.checkNotNull(graph,"IE01838: Graph argument can not be null");  Preconditions.checkNotNull(node,"IE01839: Node argument can not be null");  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  if (graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {    GraphHelpers.selectPredecessors(selectableGraph,node);  } else {    graph.selectNodes(GraphConverters.convert(graph,GraphAlgorithms.getPredecessors(node.getRawNode())),true);  }}  }
class C{  public void putAttribute(final String attrId,final Object value){  if (map == null) {    map=new HashMap();  }  map.put(attrId.toLowerCase(),new LdapEntryAttributeVO(attrId.toLowerCase(),value));}  }
class C{  void prepareForClose(LocalRegion region,DiskRegion dr){  if (dr.isBackup()) {    forceFlush();  }}  }
class C{  static void paintComposedText(Graphics g,Rectangle alloc,GlyphView v){  if (g instanceof Graphics2D) {    Graphics2D g2d=(Graphics2D)g;    int p0=v.getStartOffset();    int p1=v.getEndOffset();    AttributeSet attrSet=v.getElement().getAttributes();    AttributedString as=(AttributedString)attrSet.getAttribute(StyleConstants.ComposedTextAttribute);    int start=v.getElement().getStartOffset();    int y=alloc.y + alloc.height - (int)v.getGlyphPainter().getDescent(v);    int x=alloc.x;    as.addAttribute(TextAttribute.FONT,v.getFont());    as.addAttribute(TextAttribute.FOREGROUND,v.getForeground());    if (StyleConstants.isBold(v.getAttributes())) {      as.addAttribute(TextAttribute.WEIGHT,TextAttribute.WEIGHT_BOLD);    }    if (StyleConstants.isItalic(v.getAttributes())) {      as.addAttribute(TextAttribute.POSTURE,TextAttribute.POSTURE_OBLIQUE);    }    if (v.isUnderline()) {      as.addAttribute(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_ON);    }    if (v.isStrikeThrough()) {      as.addAttribute(TextAttribute.STRIKETHROUGH,TextAttribute.STRIKETHROUGH_ON);    }    if (v.isSuperscript()) {      as.addAttribute(TextAttribute.SUPERSCRIPT,TextAttribute.SUPERSCRIPT_SUPER);    }    if (v.isSubscript()) {      as.addAttribute(TextAttribute.SUPERSCRIPT,TextAttribute.SUPERSCRIPT_SUB);    }    AttributedCharacterIterator aci=as.getIterator(null,p0 - start,p1 - start);    SwingUtilities2.drawString(getJComponent(v),g2d,aci,x,y);  }}  }
class C{  public PeriodicAmbientSoundSource(String sound,int radius,int volume,int minInterval,int maxInterval){  setRPClass("entity");  put("type","entity");  this.sounds=sound.split(", *");  this.radius=radius;  this.volume=volume;  this.minInterval=minInterval;  this.maxInterval=maxInterval;  setupNotifier();}  }
class C{  public void grantOwnership(Collection<String> jids) throws XMPPException {  changeAffiliationByAdmin(jids,"owner");}  }
class C{  public WalletAppKit useTor(){  this.useTor=true;  return this;}  }
class C{  protected QuadTree<Location> createData(){  QuadTree<Location> qt=new QuadTree<Location>(90.0f,-180.0f,-90.0f,180.0f,100,50f);  if (!checkIndexSettings()) {    return null;  }  int lineCount=0;  Object token=null;  boolean readHeader=!csvHasHeader;  try {    URL csvURL=PropUtils.getResourceOrFileOrURL(null,locationFile);    if (csvURL != null) {      BufferedReader streamReader=new BufferedReader(new InputStreamReader(csvURL.openStream()));      CSVTokenizer csvt=new CSVTokenizer(streamReader);      token=csvt.token();      List recordList=Collections.synchronizedList(new ArrayList(10));      while (!csvt.isEOF(token)) {        int i=0;        if (logger.isLoggable(Level.FINE)) {          logger.fine("CSVLocationHandler| Starting a line | have" + (readHeader ? " " : "n't ") + "read header");        }        recordList.clear();        while (!csvt.isNewline(token) && !csvt.isEOF(token)) {          if (readHeader) {            recordList.add(token);          }          token=csvt.token();          if (csvt.isEOF(token)) {            break;          }          i++;        }        if (!readHeader) {          readHeader=true;        } else {          lineCount++;          createLocation(recordList,qt);        }        token=csvt.token();      }      csvt.close();    } else {      if (logger.isLoggable(Level.FINE)) {        logger.fine("couldn't figure out file: " + locationFile);      }    }  } catch (  java.io.IOException ioe) {    throw new com.bbn.openmap.util.HandleError(ioe);  }catch (  ArrayIndexOutOfBoundsException aioobe) {    throw new com.bbn.openmap.util.HandleError(aioobe);  }catch (  NumberFormatException nfe) {    throw new com.bbn.openmap.util.HandleError(nfe);  }catch (  ClassCastException cce) {    logger.warning("Problem reading entries in " + locationFile + ", check your index settings, first column = 0.");    throw new com.bbn.openmap.util.HandleError(cce);  }catch (  NullPointerException npe) {    logger.warning("Problem reading location file, check " + locationFile);    throw new com.bbn.openmap.util.HandleError(npe);  }catch (  java.security.AccessControlException ace) {    throw new com.bbn.openmap.util.HandleError(ace);  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("CSVLocationHandler | Finished File:" + locationFile + ", read "+ lineCount+ " locations");  }  if (lineCount == 0 && readHeader) {    logger.fine("CSVLocationHandler has read file, but didn't find any data.\n  Check file for a header line, and make sure that the\n  properties (csvFileHasHeader) is set properly for this CSVLocationHandler. Trying again without header...");    csvHasHeader=!csvHasHeader;    return createData();  }  return qt;}  }
class C{  public void showScriptingDialog(){  if (!m_shownScriptingDialogBefore) {    GuiHelper.centerChildToParent(m_model.getParent(),m_scriptingDlg,true);  }  m_shownScriptingDialogBefore=true;  if (m_scriptingDlg.isVisible()) {    m_scriptingDlg.toFront();  } else {    m_scriptingDlg.setVisible(true);  }}  }
class C{  private TMultiplication(){}  }
class C{  private void drawLine(int e,Graphics g){  int p=m_edges[e].m_parent;  int c=m_edges[e].m_child;  calcScreenCoords(c);  calcScreenCoords(p);  if (m_LineColor == null) {    g.setColor(Color.black);  } else {    g.setColor(m_LineColor);  }  g.setPaintMode();  if (m_currentFont.getSize() < 2) {    g.drawLine(m_nodes[p].m_center,m_nodes[p].m_top + m_nodes[p].m_height,m_nodes[c].m_center,m_nodes[c].m_top);  } else {    int e_width=m_nodes[c].m_center - m_nodes[p].m_center;    int e_height=m_nodes[c].m_top - (m_nodes[p].m_top + m_nodes[p].m_height);    int e_width2=e_width / 2;    int e_height2=e_height / 2;    int e_centerx=m_nodes[p].m_center + e_width2;    int e_centery=m_nodes[p].m_top + m_nodes[p].m_height + e_height2;    int e_offset=m_edges[e].m_tb;    int tmp=(int)(((double)e_width / e_height) * (e_height2 - e_offset)) + m_nodes[p].m_center;    drawText(e_centerx - m_edges[e].m_side,e_centery - e_offset,e,true,g);    if (tmp > (e_centerx - m_edges[e].m_side) && tmp < (e_centerx + m_edges[e].m_side)) {      g.drawLine(m_nodes[p].m_center,m_nodes[p].m_top + m_nodes[p].m_height,tmp,e_centery - e_offset);      g.drawLine(e_centerx * 2 - tmp,e_centery + e_offset,m_nodes[c].m_center,m_nodes[c].m_top);    } else {      e_offset=m_edges[e].m_side;      if (e_width < 0) {        e_offset*=-1;      }      tmp=(int)(((double)e_height / e_width) * (e_width2 - e_offset)) + m_nodes[p].m_top + m_nodes[p].m_height;      g.drawLine(m_nodes[p].m_center,m_nodes[p].m_top + m_nodes[p].m_height,e_centerx - e_offset,tmp);      g.drawLine(e_centerx + e_offset,e_centery * 2 - tmp,m_nodes[c].m_center,m_nodes[c].m_top);    }  }}  }
class C{  public NewNeuronGroupAction(final NetworkPanel networkPanel){  super(networkPanel,"Convert to Neuron Group",EnablingCondition.NEURONS);  putValue(NAME,"Convert Neurons to Neuron Group");  putValue(SHORT_DESCRIPTION,"Convert selected neurons to a neuron group");}  }
class C{  public boolean addFieldValues(Object[] fieldValues){  return super.add(fieldValues);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  key=key.clone();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[inBuff >>> 18];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[inBuff >>> 18];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[inBuff >>> 18];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("jrun4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,JRun4xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jrun4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,JRun4xExistingLocalConfiguration.class);}  }
class C{  public static int findFirstEqual(char[] source,int index,char match){  for (int i=index; i < source.length; i++) {    if (source[i] == match) {      return i;    }  }  return -1;}  }
class C{  public Depend(PathImpl source,long lastModified,long length){  _source=source;  _lastModified=lastModified;  _length=length;}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public ContainerCreated createContainer(final CreateContainerParams params) throws IOException {  byte[] entityBytesArray=toJson(params.getContainerConfig()).getBytes(StandardCharsets.UTF_8);  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/containers/create").header("Content-Type",MediaType.APPLICATION_JSON).header("Content-Length",entityBytesArray.length).entity(entityBytesArray)){    addQueryParamIfNotNull(connection,"name",params.getContainerName());    final DockerResponse response=connection.request();    if (CREATED.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),ContainerCreated.class);  } }  }
class C{  static void errorWrongClosingTag(String systemID,int lineNr,String expectedName,String wrongName) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Closing tag does not match opening tag: `" + wrongName + "' != `"+ expectedName+ "'");}  }
class C{  static boolean isJavaVersionMatch(final String version,final String versionPrefix){  if (version == null) {    return false;  }  return version.startsWith(versionPrefix);}  }
class C{  public static AbstractMessage receiveCommitmentProto(){  AbstractMessage serverMsg=receiveMsgProto();  AbstractMessage comm=null;  if (serverMsg != null && serverMsg instanceof ServerResp) {    comm=(ServerResp)serverMsg;  } else   if (serverMsg != null && serverMsg instanceof Commitment) {    comm=(Commitment)serverMsg;  }  return comm;}  }
class C{  public void addEdge(String factor,LaggedFactor laggedFactor){  if (!existsEdge(factor,laggedFactor)) {    try {      if (laggedFactor.getLag() > getMaxLagAllowable()) {        setMaxLagAllowable(laggedFactor.getLag());      }      lagGraph.addEdge(factor,laggedFactor);      getPropertyChangeManager().firePropertyChange("edgeAdded",null,new LaggedEdge(factor,laggedFactor));    } catch (    Exception e) {    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {  in.defaultReadObject();  reexport();}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public synchronized void removeSeries(int index){  mSeries.remove(index);}  }
class C{  public static BigInteger decodeCompactBits(long compact){  int size=((int)(compact >> 24)) & 0xFF;  byte[] bytes=new byte[4 + size];  bytes[3]=(byte)size;  if (size >= 1)   bytes[4]=(byte)((compact >> 16) & 0xFF);  if (size >= 2)   bytes[5]=(byte)((compact >> 8) & 0xFF);  if (size >= 3)   bytes[6]=(byte)(compact & 0xFF);  return decodeMPI(bytes,true);}  }
class C{  public void snackBar(@StringRes int message,@StringRes int actionMessage,View.OnClickListener listener){  snackBar.message(message,actionMessage,listener,999);}  }
class C{  public Matrix4 multiplyByRotation(double x,double y,double z,double angleDegrees){  double rad=Math.toRadians(angleDegrees);  double c=Math.cos(rad);  double s=Math.sin(rad);  this.multiplyByMatrix(c + (1 - c) * x * x,(1 - c) * x * y - s * z,(1 - c) * x * z + s * y,0,(1 - c) * x * y + s * z,c + (1 - c) * y * y,(1 - c) * y * z - s * x,0,(1 - c) * x * z - s * y,(1 - c) * y * z + s * x,c + (1 - c) * z * z,0,0,0,0,1);  return this;}  }
class C{  public void testDescriptorComplexCrosslink() throws Exception {  FileDescriptorProto fileDescriptorProto=FileDescriptorProto.newBuilder().setName("foo.proto").addMessageType(DescriptorProto.newBuilder().setName("Foo").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_OPTIONAL).setType(FieldDescriptorProto.Type.TYPE_INT32).setName("foo").setNumber(1).build()).build()).addMessageType(DescriptorProto.newBuilder().setName("Bar").addField(FieldDescriptorProto.newBuilder().setLabel(FieldDescriptorProto.Label.LABEL_OPTIONAL).setTypeName("Foo").setName("Foo").setNumber(1).build()).build()).build();  FileDescriptor file=Descriptors.FileDescriptor.buildFrom(fileDescriptorProto,new FileDescriptor[0]);  assertNotNull(file);  List<Descriptor> msglist=file.getMessageTypes();  assertNotNull(msglist);  assertTrue(msglist.size() == 2);  boolean barFound=false;  for (  Descriptor desc : msglist) {    if (desc.getName().equals("Bar")) {      barFound=true;      assertNotNull(desc.getFields());      List<FieldDescriptor> fieldlist=desc.getFields();      assertNotNull(fieldlist);      assertTrue(fieldlist.size() == 1);      assertTrue(fieldlist.get(0).getType() == FieldDescriptor.Type.MESSAGE);      assertTrue(fieldlist.get(0).getMessageType().getName().equals("Foo"));    }  }  assertTrue(barFound);}  }
class C{  @Override public void finish(){  try {    log.info("Closing ...");    assert (accessibilityDataWriter != null);    accessibilityDataWriter.flush();    accessibilityDataWriter.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @SideOnly(Side.CLIENT) public boolean isInRangeToRenderDist(double p_70112_1_){  return false;}  }
class C{  public DataTable(TableModel model){  super(model);  setAutoResizeMode(JTable.AUTO_RESIZE_OFF);}  }
class C{  private String canClaimDraw(Position pos,long[] posHashList,int posHashListSize,Move move){  String drawStr="";  if (Search.canClaimDraw50(pos)) {    drawStr="draw 50";  } else   if (Search.canClaimDrawRep(pos,posHashList,posHashListSize,posHashListSize)) {    drawStr="draw rep";  } else {    String strMove=TextIO.moveToString(pos,move,false);    posHashList[posHashListSize++]=pos.zobristHash();    UndoInfo ui=new UndoInfo();    pos.makeMove(move,ui);    if (Search.canClaimDraw50(pos)) {      drawStr="draw 50 " + strMove;    } else     if (Search.canClaimDrawRep(pos,posHashList,posHashListSize,posHashListSize)) {      drawStr="draw rep " + strMove;    }    pos.unMakeMove(move,ui);  }  return drawStr;}  }
class C{  static void checkLicenseType(Map<String,String> serverVariables) throws SQLException {}  }
class C{  private void onTtsReady(){  Locale locale=Locale.getDefault();  int languageAvailability=tts.isLanguageAvailable(locale);  if (languageAvailability == TextToSpeech.LANG_MISSING_DATA || languageAvailability == TextToSpeech.LANG_NOT_SUPPORTED) {    Log.w(TAG,"Default locale not available, use English.");    locale=Locale.ENGLISH;  }  tts.setLanguage(locale);  tts.setSpeechRate(TTS_SPEECH_RATE);  tts.setOnUtteranceCompletedListener(utteranceListener);}  }
class C{  public static void clearLogFilters(){  if (filters == null || filters.isEmpty()) {    return;  }  filters.clear();}  }
class C{  public int readUnsignedInt24(){  return (data[position++] & 0xFF) << 16 | (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.JS_DOC_NODE__MARKERS:    getMarkers().clear();  return;}super.eUnset(featureID);}  }
class C{  private void selectMapLayer(int id){  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.track_detail_map_tab));  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_map_layer),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(id));  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_ok),true,true);  instrumentation.waitForIdleSync();}  }
class C{  public Matrix4d pick(double x,double y,double width,double height,int[] viewport){  return pick(x,y,width,height,viewport,this);}  }
class C{  @Override public Object nullSafeGet(ResultSet rs,String[] names,SessionImplementor session,Object owner) throws HibernateException, SQLException {  if (rs.getString(names[0]) == null) {    return null;  }  return rs.getString(names[0]);}  }
class C{  public Id<Link> convertToCrossingNodeId2LinkId(Id<DgCrossingNode> toCrossingNodeId){  Integer ksIntToCrossingNodeId=Integer.parseInt(toCrossingNodeId.toString());  String matsimStringLinkId=this.idPool.getStringId(ksIntToCrossingNodeId);  if (matsimStringLinkId.endsWith("99")) {    Id<Link> id=Id.create(matsimStringLinkId.substring(0,matsimStringLinkId.length() - 2),Link.class);    return id;  }  throw new IllegalStateException("Can not convert " + matsimStringLinkId + " to link id");}  }
class C{  public PanHandlerFX(String id,boolean altKey,boolean ctrlKey,boolean metaKey,boolean shiftKey){  super(id,altKey,ctrlKey,metaKey,shiftKey);}  }
class C{  public void preprocessRules(final EvolutionState state,final int thread){}  }
class C{  public final OperatorHook<T> doOnEach(Consumer<? super T> onNextCall,Consumer<? super Throwable> onErrorCall,Runnable onCompleteCall,Runnable onAfterTerminateCall){  return doOnSignal(null,onNextCall,onErrorCall,onCompleteCall,onAfterTerminateCall,null,null);}  }
class C{  public void showLoadingUI(){  removeCallbacks(mDelayedShow);  removeCallbacks(mDelayedHide);  setVisibility(VISIBLE);  setAlpha(1.0f);  mLoadingProgressBar.setVisibility(GONE);  postDelayed(mDelayedShow,LOADING_ANIMATION_DELAY_MS);}  }
class C{  private void animateMenu(int moveTo){  final float moveFrom=getMoveTo();  moveToAnimator=ObjectAnimator.ofFloat(this,MOVE_TO,moveFrom,moveTo);  moveToAnimator.setDuration(getResources().getInteger(R.integer.framework_animation_duration_medium));  moveToAnimator.setInterpolator(new Expo.EaseOut());  moveToAnimator.start();}  }
class C{  public StringBuffer insert(int index,int i){  return insert(index,Integer.toString(i));}  }
class C{  public OptimizedEdgeIterator(OptimizedEdgePool optimizedDegreeEdgePool){  this.optimizedDegreeEdgePool=optimizedDegreeEdgePool;}  }
class C{  HeapArrayOfDoublesCompactSketch(final Memory mem,final long seed){  super(mem.getByte(NUM_VALUES_BYTE));  seedHash_=mem.getShort(SEED_HASH_SHORT);  SerializerDeserializer.validateFamily(mem.getByte(FAMILY_ID_BYTE),mem.getByte(PREAMBLE_LONGS_BYTE));  SerializerDeserializer.validateType(mem.getByte(SKETCH_TYPE_BYTE),SerializerDeserializer.SketchType.ArrayOfDoublesCompactSketch);  final byte version=mem.getByte(SERIAL_VERSION_BYTE);  if (version != serialVersionUID) {    throw new SketchesArgumentException("Serial version mismatch. Expected: " + serialVersionUID + ", actual: "+ version);  }  final boolean isBigEndian=mem.isAllBitsSet(FLAGS_BYTE,(byte)(1 << Flags.IS_BIG_ENDIAN.ordinal()));  if (isBigEndian ^ ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN)) {    throw new SketchesArgumentException("Byte order mismatch");  }  Util.checkSeedHashes(seedHash_,Util.computeSeedHash(seed));  isEmpty_=mem.isAllBitsSet(FLAGS_BYTE,(byte)(1 << Flags.IS_EMPTY.ordinal()));  theta_=mem.getLong(THETA_LONG);  final boolean hasEntries=mem.isAllBitsSet(FLAGS_BYTE,(byte)(1 << Flags.HAS_ENTRIES.ordinal()));  if (hasEntries) {    final int count=mem.getInt(RETAINED_ENTRIES_INT);    keys_=new long[count];    values_=new double[count * numValues_];    mem.getLongArray(ENTRIES_START,keys_,0,count);    mem.getDoubleArray(ENTRIES_START + SIZE_OF_KEY_BYTES * count,values_,0,values_.length);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ObjectFactory(){}  }
class C{  public void writeln() throws IOException {  newLine();}  }
class C{  public LinearLocation[] indicesOf(Geometry subLine){  return LocationIndexOfLine.indicesOf(linearGeom,subLine);}  }
class C{  public Executor withCheckpointFrequency(int checkpointFrequency){  this.checkpointFrequency=checkpointFrequency;  return this;}  }
class C{  public BaseShareCollectionRequest(final String requestUrl,IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options,BaseShareCollectionResponse.class,IShareCollectionPage.class);}  }
class C{  public static Path createTempFile(String prefix,String suffix) throws IOException {  Path tempDirPath=Paths.get(SystemProperties.getTempFilesPath());  return createTempFile(tempDirPath,prefix,suffix);}  }
class C{  public ICalFloatFormatter(){  this(6);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.136 -0500",hash_original_method="56FAA78069677544853324F6F2B799B6",hash_generated_method="216A2132B4FB2F46B568765550051767") public void processRequest(SIPRequest transactionRequest,MessageChannel sourceChannel){  boolean toTu=false;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("processRequest: " + transactionRequest.getFirstLine());    sipStack.getStackLogger().logDebug("tx state = " + this.getRealState());  }  try {    if (getRealState() == null) {      setOriginalRequest(transactionRequest);      this.setState(TransactionState.TRYING);      toTu=true;      this.setPassToListener();      if (isInviteTransaction() && this.isMapped) {        sendMessage(transactionRequest.createResponse(100,"Trying"));      }    } else     if (isInviteTransaction() && TransactionState.COMPLETED == getRealState() && transactionRequest.getMethod().equals(Request.ACK)) {      this.setState(TransactionState.CONFIRMED);      disableRetransmissionTimer();      if (!isReliable()) {        enableTimeoutTimer(TIMER_I);      } else {        this.setState(TransactionState.TERMINATED);      }      if (sipStack.isNon2XXAckPassedToListener()) {        requestOf.processRequest(transactionRequest,this);      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("ACK received for server Tx " + this.getTransactionId() + " not delivering to application!");        }        this.semRelease();      }      return;    } else     if (transactionRequest.getMethod().equals(getOriginalRequest().getMethod())) {      if (TransactionState.PROCEEDING == getRealState() || TransactionState.COMPLETED == getRealState()) {        this.semRelease();        if (lastResponse != null) {          super.sendMessage(lastResponse);        }      } else       if (transactionRequest.getMethod().equals(Request.ACK)) {        if (requestOf != null)         requestOf.processRequest(transactionRequest,this); else         this.semRelease();      }      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("completed processing retransmitted request : " + transactionRequest.getFirstLine() + this+ " txState = "+ this.getState()+ " lastResponse = "+ this.getLastResponse());      return;    }    if (TransactionState.COMPLETED != getRealState() && TransactionState.TERMINATED != getRealState() && requestOf != null) {      if (getOriginalRequest().getMethod().equals(transactionRequest.getMethod())) {        if (toTu) {          requestOf.processRequest(transactionRequest,this);        } else         this.semRelease();      } else {        if (requestOf != null)         requestOf.processRequest(transactionRequest,this); else         this.semRelease();      }    } else {      if (((SIPTransactionStack)getSIPStack()).isDialogCreated(getOriginalRequest().getMethod()) && getRealState() == TransactionState.TERMINATED && transactionRequest.getMethod().equals(Request.ACK) && requestOf != null) {        SIPDialog thisDialog=(SIPDialog)this.dialog;        if (thisDialog == null || !thisDialog.ackProcessed) {          if (thisDialog != null) {            thisDialog.ackReceived(transactionRequest);            thisDialog.ackProcessed=true;          }          requestOf.processRequest(transactionRequest,this);        } else {          this.semRelease();        }      } else       if (transactionRequest.getMethod().equals(Request.CANCEL)) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Too late to cancel Transaction");        this.semRelease();        try {          this.sendMessage(transactionRequest.createResponse(Response.OK));        } catch (        IOException ex) {        }      }      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping request " + getRealState());    }  } catch (  IOException e) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("IOException ",e);    this.semRelease();    this.raiseIOExceptionEvent();  }}  }
class C{  public boolean equals(Object objectToCompare){  if (this == objectToCompare) {    return true;  }  if (objectToCompare == null) {    return false;  }  boolean rVal=false;  if ((objectToCompare != null) && (m_date != null)) {    java.time.ZonedDateTime cmpTo=null;    if (objectToCompare instanceof org.trade.core.valuetype.Date) {      cmpTo=((org.trade.core.valuetype.Date)objectToCompare).m_date;    } else     if (objectToCompare instanceof java.util.Date) {      cmpTo=(java.time.ZonedDateTime)objectToCompare;    }    if (cmpTo != null) {      if (m_date.equals(cmpTo)) {        rVal=true;      }    }  }  return (rVal);}  }
class C{  protected void finish(S state){  ServiceUtils.logInfo(this,"Finishing task service for workflow %s",state.documentSelfLink);  try {    TaskServiceUtils.complete(this,ServiceDocumentUtils.getTaskServiceState(state),null);  } catch (  Throwable t) {    fail(state,t);  }}  }
class C{  public static void closeAllShells() throws IOException {  Shell.closeAll();}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=createShader("org/lwjgl/demo/opengl/uniformarray-vs.glsl",GL_VERTEX_SHADER);  int fshader=createShader("org/lwjgl/demo/opengl/uniformarray-fs.glsl",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"position");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.program=program;}  }
class C{  public SubscriptionsRevenue retrieveSubscriptionsRevenue(){  if (subscriptionsRevenue == null) {    subscriptionsRevenue=new SubscriptionsRevenue();  }  return subscriptionsRevenue;}  }
class C{  public Map<Variable,Term> unify(FOLNode x,FOLNode y,Map<Variable,Term> theta){  if (theta == null) {    return null;  } else   if (x.equals(y)) {    return theta;  } else   if (x instanceof Variable) {    return unifyVar((Variable)x,y,theta);  } else   if (y instanceof Variable) {    return unifyVar((Variable)y,x,theta);  } else   if (isCompound(x) && isCompound(y)) {    return unify(args(x),args(y),unifyOps(op(x),op(y),theta));  } else {    return null;  }}  }
class C{  public void subtract(final int operand){  this.value-=operand;}  }
class C{  public static long readWordLittleEndian(final byte[] data,final int offset){  return ((data[offset + 1] & 0xFFL) * 0x100) + (data[offset + 0] & 0xFFL);}  }
class C{  public CpcRunner(GraphWrapper graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public FullVisitContext(FacesContext facesContext,Set<VisitHint> hints){  if (facesContext == null) {    throw new NullPointerException();  }  this.facesContext=facesContext;  EnumSet<VisitHint> hintsEnumSet=((hints == null) || (hints.isEmpty())) ? EnumSet.noneOf(VisitHint.class) : EnumSet.copyOf(hints);  this.hints=Collections.unmodifiableSet(hintsEnumSet);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean isInfo(){  return fSeverity == RefactoringStatus.INFO;}  }
class C{  public void changePolicyPriority(){  WebElement source=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.priority.list.element.first.span")));  WebElement target=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.priority.list.element.second.span")));  actions.clickAndHold(source).moveToElement(target).build().perform();  actions.moveByOffset(0,5).build().perform();  actions.release().build().perform();  driver.findElement(By.id(uiElementMapper.getElement("emm.policy.priority.save.button.id"))).click();  WebDriverWait wait=new WebDriverWait(driver,10);  By successMessageDiv=By.xpath(uiElementMapper.getElement("emm.policy.priority.updated.message.div"));  wait.until(ExpectedConditions.visibilityOfElementLocated(successMessageDiv));  String resultText=driver.findElement(successMessageDiv).getText();  if (!resultText.contains("Done. New Policy priorities were successfully updated.")) {    throw new IllegalStateException("Policy priority list was not updated.");  }}  }
class C{  public static Method refresh(){  return create(REFRESH);}  }
class C{  public void paintToolTipBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Object parse(URL url,Map params,String charset){  return parseURL(url,params,charset);}  }
class C{  public void animateReturn(int duration){  ObjectAnimator animatorTranslate;  if (context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {    animatorTranslate=ObjectAnimator.ofFloat(peekView,"translationY",0);  } else {    animatorTranslate=ObjectAnimator.ofFloat(peekView,"translationX",0);  }  ObjectAnimator animatorShrinkY=ObjectAnimator.ofFloat(peekView,"scaleY",0.75f);  ObjectAnimator animatorShrinkX=ObjectAnimator.ofFloat(peekView,"scaleX",0.75f);  animatorShrinkX.setInterpolator(new DecelerateInterpolator());  animatorShrinkY.setInterpolator(new DecelerateInterpolator());  animatorTranslate.setInterpolator(new DecelerateInterpolator());  animatorShrinkX.setDuration(duration);  animatorShrinkY.setDuration(duration);  animatorTranslate.setDuration(duration);  animatorShrinkX.start();  animatorShrinkY.start();  animatorTranslate.start();}  }
class C{  private int numCodedUnits(Channel chan){  chan.fillMode=br.read(2);  if (chan.fillMode == 0) {    chan.numCodedVals=ctx.numQuantUnits;  } else {    chan.numCodedVals=br.read(5);    if (chan.numCodedVals > ctx.numQuantUnits) {      log.error(String.format("Invalid number of transmitted units"));      return AT3P_ERROR;    }    if (chan.fillMode == 3) {      chan.splitPoint=br.read(2) + (chan.chNum << 1) + 1;    }  }  return 0;}  }
class C{  public CipherTextIvMac(byte[] c,byte[] i,byte[] h){  cipherText=new byte[c.length];  System.arraycopy(c,0,cipherText,0,c.length);  iv=new byte[i.length];  System.arraycopy(i,0,iv,0,i.length);  mac=new byte[h.length];  System.arraycopy(h,0,mac,0,h.length);}  }
class C{  private boolean isAllowedStatementBeginning(AST ast){  return HqlParser.SELECT == ast.getType() || HqlParser.FROM == ast.getType() || HqlParser.SELECT_FROM == ast.getType();}  }
class C{  private void updateCache(int size,double[] scratch,double[] bestd,int[] besti,int x,int y,int j,double d){  if (d <= bestd[j]) {    bestd[j]=d;    besti[j]=y;    return;  }  if (besti[j] == x || besti[j] == y) {    findBest(size,scratch,bestd,besti,j);  }}  }
class C{  LinkedList<Object> computeOrder(DirectedGraph g){  stmtToColor=new HashMap<Object,Integer>();  order=new LinkedList<Object>();  graph=g;{    Iterator stmtIt=g.iterator();    while (stmtIt.hasNext()) {      Object s=stmtIt.next();      stmtToColor.put(s,new Integer(WHITE));    }  }{    Iterator stmtIt=g.iterator();    while (stmtIt.hasNext()) {      Object s=stmtIt.next();      if (stmtToColor.get(s).intValue() == WHITE)       visitNode(s);    }  }  return order;}  }
class C{  private void calculateSegmentSize(){  DatabaseKelp db=_table.database();  _segmentSizeNew=calculateSegmentSize(db.getSegmentSizeFactorNew(),_segmentSizeNew);  _segmentSizeGc=calculateSegmentSize(db.getSegmentSizeFactorGc(),_segmentSizeGc);}  }
class C{  public TriggerBuilder<T> forJob(JobKey keyOfJobToFire){  this.jobKey=keyOfJobToFire;  return this;}  }
class C{  public static double sampleKurtosis(DoubleArrayList data,double mean,double sampleVariance){  return sampleKurtosis(data.size(),moment(data,4,mean),sampleVariance);}  }
class C{  public CharBuffer(String string,int offset,int length){  int capacity=Math.max(length,MIN_CAPACITY);  init(new char[capacity],0,length);  string.getChars(offset,length,buffer(),0);}  }
class C{  public void correctBounds(ComponentWrapper comp){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String filterSize="3 x 3 (1)";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=args[2].toLowerCase().replace("\u00D7","x");  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.equals("3 x 3 (1)")) {      weights=new double[]{0,-1,0,-1,4,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (2)")) {      weights=new double[]{0,-1,0,-1,5,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (3)")) {      weights=new double[]{-1,-1,-1,-1,8,-1,-1,-1,-1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (4)")) {      weights=new double[]{1,-2,1,-2,4,-2,1,-2,1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("5 x 5 (1)")) {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,17,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    } else {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,16,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final AssertSubscriber<T> assertFusionEnabled(){  if (establishedFusionMode != Fuseable.SYNC && establishedFusionMode != Fuseable.ASYNC) {    throw new AssertionError("Fusion was not enabled");  }  return this;}  }
class C{  public ASN1ObjectIdentifier branch(String branchID){  return new ASN1ObjectIdentifier(this,branchID);}  }
class C{  public void close() throws IOException {  flush();  pw.close();  rawWriter.close();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  String cloneName;  NodeList cloneChildren;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  cloneName=clonedNode.getNodeName();  assertEquals("name","employee",cloneName);  cloneChildren=clonedNode.getChildNodes();  length=(int)cloneChildren.getLength();  assertEquals("length",0,length);}  }
class C{  private void findOutliers(Relation<V> relation,List<MultivariateGaussianModel> models,ArrayList<ClusterCandidate> clusterCandidates,ModifiableDBIDs noise){  Iterator<MultivariateGaussianModel> it=models.iterator();  for (int c=0; it.hasNext(); c++) {    MultivariateGaussianModel model=it.next();    final ClusterCandidate candidate=clusterCandidates.get(c);    final int dof=BitsUtil.cardinality(candidate.dimensions);    final double threshold=ChiSquaredDistribution.quantile(1 - alpha,dof);    for (DBIDMIter iter=candidate.ids.iter(); iter.valid(); iter.advance()) {      final double distance=model.mahalanobisDistance(relation.get(iter));      if (distance >= threshold) {        noise.add(iter);        iter.remove();      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.731 -0500",hash_original_method="EF4712E80A9A6595AD0A1CEA8AD509AD",hash_generated_method="86CEEDE71FFD7D8241C3FB62BCD64C0C") public JoinParser(String callID){  super(callID);}  }
class C{  public void dispose(){  closing=true;  m_model.getGraph().getRawView().removeListener(m_viewListener);  m_model.getGraph().removeListener(m_graphListener);}  }
class C{  @Transactional public static ServiceManagementRecord updateServiceManagementRecord(EntityManager em,ServiceManagementRecord record){  SystemAssert.requireArgument(em != null,"Entity manager can not be null.");  SystemAssert.requireArgument(record != null,"ServiceManagementRecord cannot be null.");  TypedQuery<ServiceManagementRecord> query=em.createNamedQuery("ServiceManagementRecord.findByService",ServiceManagementRecord.class);  query.setParameter("service",record.getService());  try {    ServiceManagementRecord oldRecord=query.getSingleResult();    oldRecord.setEnabled(record.isEnabled());    return em.merge(oldRecord);  } catch (  NoResultException ex) {    return em.merge(record);  }}  }
class C{  public Object jsFunction_getReader(){  if (reader == null)   return null;  Scriptable parent=ScriptableObject.getTopLevelScope(this);  return Context.javaToJS(reader,parent);}  }
class C{  public COpenOriginalFunction(final CGraphWindow parent,final IViewContainer container,final INaviFunction function){  super(String.format("Open original function '%s'",function.getName()));  m_parent=parent;  m_container=container;  m_function=function;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns05.class,args);}  }
class C{  protected void rotateIfNecessary() throws IOException {  if (fileSystemWAL.inBatchMode && currentPointer.offset >= fileSystemWAL.maxLength) {    rotate(false);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void onConnected(Bundle bundle){  Wearable.MessageApi.addListener(mApiClient,this);  Wearable.DataApi.addListener(mApiClient,this);  sendMessage("bonjour","smartphone");}  }
class C{  byte[] slabTable(Address addr){  return slabTable(addr,true);}  }
class C{  public BooleanArrayList(boolean[] elements){  elements(elements);}  }
class C{  @Override public Bundle confirmCredentials(AccountAuthenticatorResponse response,Account account,Bundle options){  return null;}  }
class C{  public static LongRange valueOf(String string){  if (string.isEmpty()) {    return null;  }  String[] nums=null;  int i=0;  boolean firstMinus=string.charAt(0) == '-';  if (firstMinus) {    string=string.substring(1);  }  while ((i < ByteRange.SPLITS.length) && ((nums == null) || (nums.length != 2))) {    nums=StringUtils.splitByWholeSeparator(string,ByteRange.SPLITS[i++],2);  }  if ((nums == null) || (nums.length != 2)) {    return null;  }  Long min=DioriteMathUtils.asLong(firstMinus ? ("-" + nums[0]) : nums[0]);  if (min == null) {    return null;  }  Long max=DioriteMathUtils.asLong(nums[1]);  if ((max == null) || (min > max)) {    return null;  }  return new LongRange(min,max);}  }
class C{  private static String renderInstanceData(final BaseType baseType,final long offset,final Section section){  final int size=getRenderDataLength(baseType);  final StringBuilder builder=new StringBuilder();  builder.append("[");  final byte[] data=section.getData();  final int strideLength=(baseType.getCategory() == BaseTypeCategory.ARRAY) ? BaseTypeHelpers.getArrayElementByteSize(baseType) : size;  for (long currentOffset=offset; currentOffset < offset + size; ++currentOffset) {    if ((currentOffset - offset) != 0 && ((currentOffset - offset) % strideLength == 0)) {      builder.append(", ");    }    builder.append(String.format("%02X",data[(int)currentOffset]));  }  if (size == THRESHOLD) {    builder.append("...");  }  builder.append(']');  return builder.toString();}  }
class C{  @Override protected Experiment toExperiment(){  Experiment result;  MultiLabelClassifier[] classifiers;  File[] datasets;  LocalDatasetProvider provider;  int i;  RepeatedRuns runs;  CrossValidation cv;  PercentageSplit split;  result=(Experiment)ObjectUtils.deepCopy(m_Experiment);  classifiers=new MultiLabelClassifier[m_ModelClassifiers.getSize()];  for (i=0; i < m_ModelClassifiers.getSize(); i++) {    try {      classifiers[i]=OptionUtils.fromCommandLine(MultiLabelClassifier.class,m_ModelClassifiers.get(i));    } catch (    Exception e) {      handleException("Failed to instantiate classifier: " + m_ModelClassifiers.get(i),e);      classifiers[i]=new BR();    }  }  result.setClassifiers(classifiers);  datasets=new File[m_ModelDatasets.getSize()];  for (i=0; i < m_ModelDatasets.getSize(); i++)   datasets[i]=new File(m_ModelDatasets.get(i));  provider=new LocalDatasetProvider();  provider.setDatasets(datasets);  result.setDatasetProvider(provider);  runs=null;  if (((Integer)m_SpinnerNumRuns.getValue()) > 1) {    runs=new RepeatedRuns();    runs.setLowerRuns(1);    runs.setUpperRuns((Integer)m_SpinnerNumRuns.getValue());  }  cv=null;  split=null;  if (m_ComboBoxEvaluation.getSelectedIndex() == 0) {    cv=new CrossValidation();    cv.setNumFolds((Integer)m_SpinnerNumFolds.getValue());    cv.setPreserveOrder(m_CheckBoxPreserveOrder.isSelected());  } else {    split=new PercentageSplit();    split.setTrainPercentage(Double.parseDouble(m_TextPercentage.getText()));    split.setPreserveOrder(m_CheckBoxPreserveOrder.isSelected());  }  if (runs != null) {    if (cv != null)     runs.setEvaluator(cv); else     runs.setEvaluator(split);    result.setEvaluator(runs);  } else {    if (cv != null)     result.setEvaluator(cv); else     result.setEvaluator(split);  }  result.setStatisticsHandler((EvaluationStatisticsHandler)m_GOEStatisticsHandler.getValue());  result.setNotes(m_Notes);  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  protected PhysicalInfo(Princess owner){  this.owner=owner;}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  @Override public boolean isValidating(){  return false;}  }
class C{  public int processor(){  return Integer.parseInt(fields[38]);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.INTERFACE_SCOPE__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public GROUP_BY GROUP_BY(String groupBy){  return new GROUP_BY(this,groupBy);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void subscribeToSyncResellerService_changeServiceIdAfterBP() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForReseller");  VendorData resellerData=setupNewReseller("2013-01-03 08:10:00");  setCutOffDay(resellerData.getAdminKey(),1);  CustomerData resellerCustomerData=registerCustomer(resellerData,"resellerCustomer");  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails resellerService=grantResalePermission(supplierData,supplService,resellerData);  resellerService=publishActivateService(resellerData,resellerService);  subscribe(resellerCustomerData.getAdminUser(),"resellerSubscription2",resellerService,"2013-08-18 00:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  resetCutOffDay(resellerData.getAdminKey());  updateServiceId(supplierData,supplService,"supplSrvForReseller_new","2013-09-15 08:00:00");  cacheTestData("subscribeToSyncResellerService_changeServiceIdAfterBP",new TestData(supplierData,resellerData));}  }
class C{  public DelegatingDatagramSocket(int port,InetAddress laddr) throws SocketException {  this(null,new InetSocketAddress(laddr,port));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.315 -0500",hash_original_method="3D80A7A04F3988E3E464D888981C4A01",hash_generated_method="45D9D5658ADE04E7870C234E33A3805F") ObjectStreamField[] fields(){  if (fields == null) {    Class<?> forCl=forClass();    if (forCl != null && isSerializable() && !forCl.isArray()) {      buildFieldDescriptors(forCl.getDeclaredFields());    } else {      setFields(NO_FIELDS);    }  }  return fields;}  }
class C{  public static Trigger insteadOf(String name){  return new Trigger(name,TriggerType.INSTEAD);}  }
class C{  public void removeStat(String key) throws AdeInternalException {  if (!m_allKeys.remove(key)) {    throw new AdeInternalException("No statistic named " + key);  }  if (m_doubleStats.remove(key) == null && m_stringStats.remove(key) == null) {    throw new AdeInternalException("Internal consistency problem: no key found");  }}  }
class C{  @SuppressLint("InlinedApi") public static Bitmap blur(Context context,Bitmap sentBitmap,int radius){  if (radius < 0) {    radius=0;    if (DEBUG) {      LogUtils.w(TAG,"radius must be 0 < r < 25 , forcing radius=0");    }  } else   if (radius > 25) {    radius=25;    if (DEBUG) {      LogUtils.w(TAG,"radius must be 0 < r < 25 , forcing radius=25");    }  }  if (Build.VERSION.SDK_INT > 16) {    Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);    final RenderScript rs=RenderScript.create(context);    final Allocation input=Allocation.createFromBitmap(rs,sentBitmap,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);    final Allocation output=Allocation.createTyped(rs,input.getType());    final ScriptIntrinsicBlur script=ScriptIntrinsicBlur.create(rs,Element.U8_4(rs));    script.setRadius(radius);    script.setInput(input);    script.forEach(output);    output.copyTo(bitmap);    return bitmap;  }  Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  public void and(Capabilities c){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (handles(cap) && c.handles(cap)) {      m_Capabilities.add(cap);    } else {      m_Capabilities.remove(cap);    }    if (hasDependency(cap) && c.hasDependency(cap)) {      m_Dependencies.add(cap);    } else {      m_Dependencies.remove(cap);    }  }  if (c.getMinimumNumberInstances() > getMinimumNumberInstances()) {    setMinimumNumberInstances(c.getMinimumNumberInstances());  }}  }
class C{  public void removePanListener(PanListener listener){  if (mPan != null) {    mPan.removePanListener(listener);  }}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){  List<File> dirs=new ArrayList<File>();  dirs.add(dir);  return expandSpecWildcards(dirs,modules,forBackend);}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  protected void printSevere(final String message,final Object... args){  getGfsh().printAsSevere(String.format(message,args));}  }
class C{  public ISO9796d2Signer(AsymmetricBlockCipher cipher,Digest digest,boolean implicit){  this.cipher=cipher;  this.digest=digest;  if (implicit) {    trailer=TRAILER_IMPLICIT;  } else {    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());    if (trailerObj != null) {      trailer=trailerObj.intValue();    } else {      throw new IllegalArgumentException("no valid trailer for digest");    }  }}  }
class C{  public void log(String message,Level level,Object... arguments){  this.bot.log(this,message,level,arguments);}  }
class C{  public synchronized List<Call> queuedCalls(){  List<Call> result=new ArrayList<>();  for (  AsyncCall asyncCall : readyAsyncCalls) {    result.add(asyncCall.get());  }  return Collections.unmodifiableList(result);}  }
class C{  void afterWriting(){  if (conn != null) {    conn.afterWriting();  }}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  public static String generateFingerprint(X509Certificate cert) throws CertificateEncodingException, NoSuchAlgorithmException, CertificateEncodingException {  try {    return generateFingerprint(cert.getEncoded());  } catch (  CertificateEncodingException e) {    throw e;  }catch (  NoSuchAlgorithmException e) {    throw e;  }}  }
class C{  private List<FacetResult> drillSideways() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  DrillDownQuery q=new DrillDownQuery(config);  q.add("Publish Date","2010");  DrillSideways ds=new DrillSideways(searcher,config,taxoReader);  DrillSidewaysResult result=ds.search(q,10);  List<FacetResult> facets=result.facets.getAllDims(10);  indexReader.close();  taxoReader.close();  return facets;}  }
class C{  public IterationObject(){  super();}  }
class C{  @Deprecated public static boolean relocateFutureLegRoute(Leg leg,Id<Link> fromLinkId,Id<Link> toLinkId,Person person,Network network,TripRouter tripRouter){  Link fromLink=network.getLinks().get(fromLinkId);  Link toLink=network.getLinks().get(toLinkId);  Facility<ActivityFacility> fromFacility=new LinkWrapperFacility(fromLink);  Facility<ActivityFacility> toFacility=new LinkWrapperFacility(toLink);  List<? extends PlanElement> planElements=tripRouter.calcRoute(leg.getMode(),fromFacility,toFacility,leg.getDepartureTime(),person);  if (planElements.size() != 1) {    throw new RuntimeException("Expected a list of PlanElements containing exactly one element, " + "but the returned list contained " + planElements.size() + " elements.");  }  Leg newLeg=(Leg)planElements.get(0);  leg.setTravelTime(newLeg.getTravelTime());  leg.setRoute(newLeg.getRoute());  return true;}  }
class C{  private final Collection<String> handleNonArray(JsonParser jp,DeserializationContext ctxt,Collection<String> result) throws IOException, JsonProcessingException {  if (!ctxt.isEnabled(DeserializationConfig.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) {    throw ctxt.mappingException(_collectionType.getRawClass());  }  JsonDeserializer<String> valueDes=_valueDeserializer;  JsonToken t=jp.getCurrentToken();  String value;  if (t == JsonToken.VALUE_NULL) {    value=null;  } else {    value=(valueDes == null) ? jp.getText() : valueDes.deserialize(jp,ctxt);  }  result.add(value);  return result;}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  public CLIQUESubspace<V> join(CLIQUESubspace<V> other,double all,double tau){  long[] dimensions=joinLastDimensions(other);  if (dimensions == null) {    return null;  }  CLIQUESubspace<V> s=new CLIQUESubspace<>(dimensions);  for (  CLIQUEUnit<V> u1 : this.getDenseUnits()) {    for (    CLIQUEUnit<V> u2 : other.getDenseUnits()) {      CLIQUEUnit<V> u=u1.join(u2,all,tau);      if (u != null) {        s.addDenseUnit(u);      }    }  }  if (s.getDenseUnits().isEmpty()) {    return null;  }  return s;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.432 -0500",hash_original_method="20B392F81EB563515A5AD0702F74C046",hash_generated_method="EBE22081BF4F609A10ADE825A5E979C7") private static X509Certificate[] createCertChain(byte[][] certificatesBytes){  if (certificatesBytes == null) {    return null;  }  X509Certificate[] certificates=new X509Certificate[certificatesBytes.length];  for (int i=0; i < certificatesBytes.length; i++) {    try {      certificates[i]=new X509CertImpl(certificatesBytes[i]);    } catch (    IOException e) {      return null;    }  }  return certificates;}  }
class C{  public static <K extends Throwable>void rewrapAndThrowIfInstance(Throwable t,Class<K> clazz) throws K {  rewrapAndThrowIfInstance(t == null ? "null" : t.getMessage(),t,clazz);}  }
class C{  private void movePos(float deltaY){  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("has reached the top"));    }    return;  }  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;  if (mPtrIndicator.willOverTop(to)) {    if (DEBUG) {      PtrCLog.e(LOG_TAG,String.format("over top"));    }    to=PtrIndicator.POS_START;  }  mPtrIndicator.setCurrentPos(to);  int change=to - mPtrIndicator.getLastPosY();  updatePos(change);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  static public final float random(float range){  return random.nextFloat() * range;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocumenttype02.class,args);}  }
class C{  public void addImageView(CubeImageView imageView){  if (null == imageView) {    return;  }  if (null == mFirstImageViewHolder) {    mFirstImageViewHolder=new ImageViewHolder(imageView);    return;  }  ImageViewHolder holder=mFirstImageViewHolder;  for (; ; holder=holder.mNext) {    if (holder.contains(imageView)) {      return;    }    if (holder.mNext == null) {      break;    }  }  ImageViewHolder newHolder=new ImageViewHolder(imageView);  newHolder.mPrev=holder;  holder.mNext=newHolder;}  }
class C{  @Override protected void showPopUp(Positionable p,MouseEvent event){}  }
class C{  public int addRow(){  int r=m_rows.addRow();  updateRowCount();  fireTableEvent(r,r,TableModelEvent.ALL_COLUMNS,TableModelEvent.INSERT);  return r;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:    return getValueAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public void removeSocket(TransportAddress localAddr,TransportAddress remoteAddr){  cancelTransactionsForAddress(localAddr,remoteAddr);  netAccessManager.removeSocket(localAddr,remoteAddr);}  }
class C{  public int writeFixed(int index,int f){  return this.writeLong(index,f);}  }
class C{  protected boolean isFilled(){  return TacGrpSidc.FSUPP_ARS_C2ARS_NFA_RTG.equalsIgnoreCase(this.maskedSymbolCode) || TacGrpSidc.FSUPP_ARS_KLBOX_BLUE_RTG.equalsIgnoreCase(this.maskedSymbolCode) || TacGrpSidc.FSUPP_ARS_KLBOX_PURPLE_RTG.equalsIgnoreCase(this.maskedSymbolCode);}  }
class C{  public FacetLabel(String dim,String[] path){  components=new String[1 + path.length];  components[0]=dim;  System.arraycopy(path,0,components,1,path.length);  length=components.length;  checkComponents();}  }
class C{  protected void init(CollectorConfiguration config){  for (  String btxn : config.getBusinessTransactions().keySet()) {    BusinessTxnConfig btc=config.getBusinessTransactions().get(btxn);    init(btxn,btc);  }  onlyNamedTransactions=new Boolean(config.getProperty("HAWKULAR_APM_COLLECTOR_ONLYNAMED",Boolean.FALSE.toString()));}  }
class C{  public void applyUserPrefsToNetwork(){  try {    NetworkPanel.setBackgroundColor(new Color(SimbrainPreferences.getInt("networkBackgroundColor")));    EditMode.setWandRadius(SimbrainPreferences.getInt("networkWandRadius"));    NetworkPanel.setNudgeAmount(SimbrainPreferences.getDouble("networkNudgeAmount"));    Network.setSynapseVisibilityThreshold(SimbrainPreferences.getInt("networkSynapseVisibilityThreshold"));    NeuronNode.setHotColor(SimbrainPreferences.getFloat("networkHotNodeColor"));    NeuronNode.setCoolColor(SimbrainPreferences.getFloat("networkCoolNodeColor"));    NeuronNode.setSpikingColor(new Color(SimbrainPreferences.getInt("networkSpikingColor")));    SynapseNode.setExcitatoryColor(new Color(SimbrainPreferences.getInt("networkExcitatorySynapseColor")));    SynapseNode.setInhibitoryColor(new Color(SimbrainPreferences.getInt("networkInhibitorySynapseColor")));    SynapseNode.setZeroWeightColor(new Color(SimbrainPreferences.getInt("networkZeroWeightColor")));    SynapseNode.setMaxDiameter(SimbrainPreferences.getInt("networkSynapseMaxSize"));    SynapseNode.setMinDiameter(SimbrainPreferences.getInt("networkSynapseMinSize"));    resetColors();  } catch (  PropertyNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public AcceptAllCondition(){}  }
class C{  public HttpFileServiceBuilder maxCacheEntrySizeBytes(int maxCacheEntrySizeBytes){  this.maxCacheEntrySizeBytes=HttpFileServiceConfig.validateMaxCacheEntrySizeBytes(maxCacheEntrySizeBytes);  return this;}  }
class C{  private void endAtt(){  tag.setAttribute(att);  insideAtt=false;}  }
class C{  public void minLocal(Vector3f other){  x=other.x < x ? other.x : x;  y=other.y < y ? other.y : y;  z=other.z < z ? other.z : z;}  }
class C{  public BukkitChunk_1_8(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  public static void fullReset(){  resetRuntime();synchronized (readProperties) {    readProperties.clear();  }}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 6:case 5:case 4:case 3:case 2:case 1:case 7:    return true;default :  break;}return false;}  }
class C{  private static boolean verifyMagic(byte[] magic){  return Arrays.equals(magic,HeaderItem.DEX_FILE_MAGIC) || Arrays.equals(magic,HeaderItem.DEX_FILE_MAGIC_API_13);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.006 -0500",hash_original_method="5A32401256C252E56BBB94CC59C2BA04",hash_generated_method="7F4E00EEF1E928EE9AF3470BAD683697") public String charAsString(int nchars){  return buffer.substring(ptr,ptr + nchars);}  }
class C{  public static Ethernet DhcpDiscoveryRequestEthernet(MacAddress hostMac){  List<DHCPOption> optionList=new ArrayList<DHCPOption>();  byte[] requestValue=new byte[4];  requestValue[0]=requestValue[1]=requestValue[2]=requestValue[3]=0;  DHCPOption requestOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedIP.getValue()).setLength((byte)4).setData(requestValue);  byte[] msgTypeValue=new byte[1];  msgTypeValue[0]=1;  DHCPOption msgTypeOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_MessageType.getValue()).setLength((byte)1).setData(msgTypeValue);  byte[] reqParamValue=new byte[4];  reqParamValue[0]=1;  reqParamValue[1]=3;  reqParamValue[2]=6;  reqParamValue[3]=42;  DHCPOption reqParamOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedParameters.getValue()).setLength((byte)4).setData(reqParamValue);  byte[] clientIdValue=new byte[7];  clientIdValue[0]=1;  System.arraycopy(hostMac.getBytes(),0,clientIdValue,1,6);  DHCPOption clientIdOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_ClientID.getValue()).setLength((byte)7).setData(clientIdValue);  DHCPOption endOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_END.getValue()).setLength((byte)0).setData(null);  optionList.add(requestOption);  optionList.add(msgTypeOption);  optionList.add(reqParamOption);  optionList.add(clientIdOption);  optionList.add(endOption);  Ethernet requestPacket=new Ethernet();  requestPacket.setSourceMACAddress(hostMac.getBytes()).setDestinationMACAddress(broadcastMac).setEtherType(EthType.IPv4).setPayload(new IPv4().setVersion((byte)4).setDiffServ((byte)0).setIdentification((short)100).setFlags((byte)0).setFragmentOffset((short)0).setTtl((byte)250).setProtocol(IpProtocol.UDP).setChecksum((short)0).setSourceAddress(0).setDestinationAddress(broadcastIp).setPayload(new UDP().setSourcePort(UDP.DHCP_CLIENT_PORT).setDestinationPort(UDP.DHCP_SERVER_PORT).setChecksum((short)0).setPayload(new DHCP().setOpCode(DHCP.OPCODE_REQUEST).setHardwareType(DHCP.HWTYPE_ETHERNET).setHardwareAddressLength((byte)6).setHops((byte)0).setTransactionId(0x00003d1d).setSeconds((short)0).setFlags((short)0).setClientIPAddress(IPv4Address.NONE).setYourIPAddress(IPv4Address.NONE).setServerIPAddress(IPv4Address.NONE).setGatewayIPAddress(IPv4Address.NONE).setClientHardwareAddress(hostMac).setOptions(optionList))));  return requestPacket;}  }
class C{  public void addFile(String file){  checkFileNames(Collections.singleton(file));  setFiles.add(namedForThisSegment(file));}  }
class C{  public LomaxDistribution(double shape,double location,double shift){  super(shape,location);  if (shift > location) {    throw new IllegalArgumentException("Shift must be smaller or equal than location");  }  this.shift=shift;}  }
class C{  public static void startActionSingleSync(Context context,int numOfPages){  Intent intent=new Intent(context,SyncingService.class);  intent.setAction(ACTION_SYNC);  intent.putExtra(SYNC_PERIOD,numOfPages);  context.startService(intent);}  }
class C{  public static CCSpriteSheet spriteSheet(String fileImage,int capacity){  return new CCSpriteSheet(fileImage,capacity);}  }
class C{  public FastAdapterDialog<Item> removeItemRange(int position,int itemCount){  mFastItemAdapter.removeItemRange(position,itemCount);  return this;}  }
class C{  public boolean varUsed(IVariable<?> var){  return usageMap.containsKey(var) && !usageMap.get(var).isEmpty();}  }
class C{  public static boolean isXML11NameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  public void clear(FacesContext facesContext){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Clearing @ViewScoped beans from current view map");  }  if (contextManager != null) {    contextManager.clear(facesContext);  }  destroyBeans(facesContext,facesContext.getViewRoot().getViewMap(false));}  }
class C{  public T caseDeclaration(Declaration object){  return null;}  }
class C{  public boolean canDisplay(char c){  for (int i=0; i < glyphUnicodes.length; i++) {    if (glyphUnicodes[i].indexOf(c) != -1 && languageMatches(glyphLangs[i]) && orientationMatches(glyphOrientations[i])) {      return true;    }  }  return false;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean removeIgnored(Class<?> c,String displayName){  HashSet<String> list;  if (m_Ignored.contains(c)) {    list=m_Ignored.get(c);  } else {    list=new HashSet<String>();  }  return list.remove(displayName);}  }
class C{  void enableGUI(){  if (log.isDebugEnabled()) {    log.debug("enableGUI");  }  if (!init) {    log.error("enableGUI with init false");  }  loadButton.setEnabled(true);  loadButton.setToolTipText(res.getString("TipLoadEnabled"));  status.setText(res.getString("StatusDone"));}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  double pos=(double)getPositionInContextNodeList(xctxt);  return new XNumber(pos);}  }
class C{  private <Type extends Message>RpcCallback<Type> wrapsCallback(MockCallback<?> callback){  EasyMock.reportMatcher(new WrapsCallback(callback));  return null;}  }
class C{  public void removeChild(int id){  childPlanets.remove(id);}  }
class C{  public void localTransactionCommitted(ConnectionEvent event){}  }
class C{  public void addTag(String text,int position){  onAddTag(text,position);  postInvalidate();}  }
class C{  public void paintEditorPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public boolean dpll(Set<Clause> clauses,List<PropositionSymbol> symbols,Model model){  if (everyClauseTrue(clauses,model)) {    return true;  }  if (someClauseFalse(clauses,model)) {    return false;  }  Pair<PropositionSymbol,Boolean> pAndValue=findPureSymbol(symbols,clauses,model);  if (pAndValue != null) {    return dpll(clauses,minus(symbols,pAndValue.getFirst()),model.union(pAndValue.getFirst(),pAndValue.getSecond()));  }  pAndValue=findUnitClause(clauses,model);  if (pAndValue != null) {    return dpll(clauses,minus(symbols,pAndValue.getFirst()),model.union(pAndValue.getFirst(),pAndValue.getSecond()));  }  PropositionSymbol p=Util.first(symbols);  List<PropositionSymbol> rest=Util.rest(symbols);  return dpll(clauses,rest,model.union(p,true)) || dpll(clauses,rest,model.union(p,false));}  }
class C{  public boolean isSubTitle(){  return isSubTitle;}  }
class C{  public static Composite createComposite(Composite parent,int columns,int hspan,int fill){  Composite g=new Composite(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing(){  LineToTokenHashMap oper=new LineToTokenHashMap();  HashTestSink tokenSink=new HashTestSink();  oper.setSplitBy(";");  oper.setSplitTokenBy(",");  oper.tokens.setSink(tokenSink);  oper.beginWindow(0);  String input1="a,2,3;b,1,2;c,4,5,6";  String input2="d";  String input3="";  int numTuples=1000;  for (int i=0; i < numTuples; i++) {    oper.data.process(input1);    oper.data.process(input2);    oper.data.process(input3);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",2,tokenSink.map.size());  HashMap<HashMap<String,ArrayList<String>>,Object> smap=tokenSink.map;  for (  Map.Entry<HashMap<String,ArrayList<String>>,Object> e : smap.entrySet()) {    for (    Map.Entry<String,ArrayList<String>> l : e.getKey().entrySet()) {      String key=l.getKey();      ArrayList<String> list=l.getValue();      if (key.equals("a")) {        Assert.assertEquals("number emitted values for \"a\"",2,list.size());        Assert.assertEquals("first value for \"a\"","2",list.get(0));        Assert.assertEquals("second value for \"a\"","3",list.get(1));      } else       if (key.equals("b")) {        Assert.assertEquals("number emitted values for \"b\"",2,list.size());        Assert.assertEquals("first value for \"b\"","1",list.get(0));        Assert.assertEquals("second value for \"b\"","2",list.get(1));      } else       if (key.equals("c")) {        Assert.assertEquals("number emitted values for \"c\"",3,list.size());        Assert.assertEquals("first value for \"c\"","4",list.get(0));        Assert.assertEquals("second value for \"c\"","5",list.get(1));        Assert.assertEquals("second value for \"c\"","6",list.get(2));      } else       if (key.equals("d")) {        Assert.assertEquals("number emitted values for \"d\"",0,list.size());      }    }  }}  }
class C{  public EaseInOut(){}  }
class C{  private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){  int[] sortIndex;  int[] sortIndexInverted;  Arrays.sort(dictionarySortModels);  sortIndex=new int[dictionarySortModels.length];  sortIndexInverted=new int[dictionarySortModels.length];  for (int i=0; i < dictionarySortModels.length; i++) {    CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i];    sortIndex[i]=dictionarySortModel.getKey();    sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1;  }  dictionarySortModels=null;  List<Integer> sortIndexList=convertToList(sortIndex);  List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted);  return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList);}  }
class C{  public PTQuery_GroupBy Sum(String varName) throws PTQueryException {  return Aggregate(varName,Agg.SUM);}  }
class C{  public PbrpcException(String arg0){  super(arg0);}  }
class C{  RRuleIteratorImpl(DateValue dtStart,TimeZone tzid,Predicate<? super DateValue> condition,Generator instanceGenerator,ThrottledGenerator yearGenerator,Generator monthGenerator,Generator dayGenerator,Generator hourGenerator,Generator minuteGenerator,Generator secondGenerator,boolean canShortcutAdvance){  this.condition=condition;  this.instanceGenerator=instanceGenerator;  this.yearGenerator=yearGenerator;  this.monthGenerator=monthGenerator;  this.dtStart=dtStart;  this.tzid=tzid;  this.canShortcutAdvance=canShortcutAdvance;  int initWorkLimit=1000;  builder=new DTBuilder(dtStart);  try {    Generator[] toInitialize;    if (InstanceGenerators.skipSubDayGenerators(hourGenerator,minuteGenerator,secondGenerator)) {      toInitialize=new Generator[]{yearGenerator,monthGenerator};      builder.hour=((SingleValueGenerator)hourGenerator).getValue();      builder.minute=((SingleValueGenerator)minuteGenerator).getValue();      builder.second=((SingleValueGenerator)secondGenerator).getValue();    } else {      toInitialize=new Generator[]{yearGenerator,monthGenerator,dayGenerator,hourGenerator,minuteGenerator};    }    for (int i=0; i != toInitialize.length; ) {      if (toInitialize[i].generate(builder)) {        ++i;      } else {        if (--i < 0) {          done=true;          break;        }      }      if (--initWorkLimit == 0) {        done=true;        break;      }    }  } catch (  Generator.IteratorShortCircuitingException ex) {    done=true;  }  while (!done) {    pendingUtc=generateInstance();    if (pendingUtc == null) {      done=true;      break;    }    if (pendingUtc.compareTo(TimeUtils.toUtc(dtStart,tzid)) >= 0) {      if (!condition.apply(pendingUtc)) {        done=true;        pendingUtc=null;      }      break;    }    if (--initWorkLimit == 0) {      done=true;      break;    }  }}  }
class C{  public BillingAdapterNotFoundException(String message,Object[] params,Throwable t){  super(message,t,params);}  }
class C{  public void addSelectFieldname(String field){  if (field != null && !field.isEmpty()) {    querylist.set(field + AbstractSolrConnector.CATCHALL_DTERM,0);  }}  }
class C{  public static void main(String[] args) throws Exception {  Http http=new Http();  http.setConf(NutchConfiguration.create());  main(http,args);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   insert_Accounting("C_CashBook_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  private void initSqlQueries(Connection conn,org.apache.mailet.MailetContext mailetContext) throws Exception {  try {    if (conn.getAutoCommit()) {      conn.setAutoCommit(false);    }    File sqlFile=new File((String)mailetContext.getAttribute("confDir"),"sqlResources.xml").getCanonicalFile();    sqlQueries.init(sqlFile,"WhiteList",conn,getSqlParameters());    checkTables(conn);  }  finally {    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  static void clear(Iterator<?> iterator){  checkNotNull(iterator);  while (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  public ReferenceQueue(){}  }
class C{  protected void distributeUpdate(EntryEventImpl event,long lastModified,boolean ifNew,boolean ifOld,Object expectedOldValue,boolean requireOldValue){  if (!event.isOriginRemote() && !event.isNetSearch() && !event.isBulkOpInProgress()) {    boolean distribute=true;    if (event.getInhibitDistribution()) {      distribute=false;    }    if (distribute) {      UpdateOperation op=new UpdateOperation(event,lastModified);      if (logger.isTraceEnabled()) {        logger.trace("distributing operation for event : {} : for region : {}",event,this.getName());      }      op.distribute();    }  }}  }
class C{  public static boolean isDefaultMessageType(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_DEFAULT_MESSAGE_TYPE);}  }
class C{  protected String canProduce(final Territory to,final Collection<Unit> units,final PlayerID player){  final Collection<Territory> producers=getAllProducers(to,player,units,true);  if (producers.isEmpty()) {    return "No factory in or adjacent to " + to.getName();  }  if (producers.size() == 1) {    return canProduce(producers.iterator().next(),to,units,player);  }  final Collection<Territory> failingProducers=new ArrayList<>();  String error="";  for (  final Territory producer : producers) {    final String errorP=canProduce(producer,to,units,player);    if (errorP != null) {      failingProducers.add(producer);      if (!(producer.equals(to) && producer.isWater())) {        error+=", " + errorP;      }    }  }  if (producers.size() == failingProducers.size()) {    return "Adjacent territories to " + to.getName() + " cannot produce, due to: \n "+ error.replaceFirst(", ","");  }  return null;}  }
class C{  public void curePlayers(){  for (  Team t : teamList) {    t.curePlayers();  }}  }
class C{  @SuppressWarnings("unchecked") protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes,NamedList<Object> collectionProps){  Iterator<Map.Entry<String,Object>> colls=collectionProps.iterator();  while (colls.hasNext()) {    Map.Entry<String,Object> next=colls.next();    Map<String,Object> collMap=(Map<String,Object>)next.getValue();    Map<String,Object> shards=(Map<String,Object>)collMap.get("shards");    for (    Object nextShard : shards.values()) {      Map<String,Object> shardMap=(Map<String,Object>)nextShard;      Map<String,Object> replicas=(Map<String,Object>)shardMap.get("replicas");      for (      Object nextReplica : replicas.values()) {        Map<String,Object> replicaMap=(Map<String,Object>)nextReplica;        if (Replica.State.getState((String)replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {          String node_name=(String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);          if (!liveNodes.contains(node_name)) {            replicaMap.put(ZkStateReader.STATE_PROP,Replica.State.DOWN.toString());          }        }      }    }  }}  }
class C{  public static List toList(Chain c){  Iterator it=c.iterator();  List list=new ArrayList();  while (it.hasNext()) {    list.add(it.next());  }  return list;}  }
class C{  public void clear(Vertex source){  clear();}  }
class C{  private void initializePath(String p_uriSpec) throws MalformedURIException {  if (p_uriSpec == null) {    throw new MalformedURIException("Cannot initialize path from null string!");  }  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == '?' || testChar == '#') {      break;    }    if (testChar == '%') {      if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {        throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE,null));      }    } else     if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {      if ('\\' != testChar)       throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR,new Object[]{String.valueOf(testChar)}));    }    index++;  }  m_path=p_uriSpec.substring(start,index);  if (testChar == '?') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '#') {        break;      }      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Query string contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Query string contains invalid character:" + testChar);      }      index++;    }    m_queryString=p_uriSpec.substring(start,index);  }  if (testChar == '#') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Fragment contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Fragment contains invalid character:" + testChar);      }      index++;    }    m_fragment=p_uriSpec.substring(start,index);  }}  }
class C{  private void updateView(){  view.setProjectName(dataObject.getName());  view.setProjectDescription(dataObject.getDescription());  view.setProjectUrl(dataObject.getSource().getLocation());  final String value=getImportParameterValue(SKIP_FIRST_LEVEL_PARAM_NAME);  if (value != null) {    view.setSkipFirstLevel(Boolean.valueOf(value));  }}  }
class C{  public Matrix3d m11(double m11){  this.m11=m11;  return this;}  }
class C{  public void resetDefaultPortfolio(final Portfolio defaultPortfolio){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Portfolio> query=builder.createQuery(Portfolio.class);    Root<Portfolio> from=query.from(Portfolio.class);    query.select(from);    List<Portfolio> items=entityManager.createQuery(query).getResultList();    for (    Portfolio item : items) {      if (item.getIdPortfolio().equals(defaultPortfolio.getIdPortfolio())) {        item.setIsDefault(true);      } else {        item.setIsDefault(false);      }      entityManager.persist(item);    }    entityManager.getTransaction().commit();  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public FisheyeDistortion(double dfactor){  this(dfactor,dfactor);}  }
class C{  private RegressionCovariance(ICovarianceMatrix covariances,TetradVector means){  this(new CorrelationMatrix(covariances),standardDeviations(covariances),means);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void usage_error(){  error("main.usage",program);}  }
class C{  static <T>T[] arraysCopyOf(T[] original,int newLength){  T[] copy=newArray(original,newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public boolean removeAll(Collection collection){  boolean changed=false;  int size=collection.size();  Iterator it=collection.iterator();  while (size-- > 0) {    if (remove(it.next())) {      changed=true;    }  }  return changed;}  }
class C{  public static final String nameForDaemon(final String daemonName){  return NAME_PREFIX + daemonName;}  }
class C{  void drawLetter(Graphics g,char letter,int ax,int ay,int aw,int ah,float align,int index){  String str=formatItemNum(index,letter);  str=isLeftToRight ? str + "." : "." + str;  FontMetrics fm=SwingUtilities2.getFontMetrics(null,g);  int stringwidth=SwingUtilities2.stringWidth(null,fm,str);  int gap=isLeftToRight ? -(stringwidth + bulletgap) : (aw + bulletgap);  int x=ax + gap;  int y=Math.max(ay + fm.getAscent(),ay + (int)(ah * align));  SwingUtilities2.drawString(null,g,str,x,y);}  }
class C{  public PcapByteOutputStream(ByteArrayOutputStream baos,GlobalHeader header){  this.baos=baos;  list=new ArrayList<Byte>();  copyGlobalHeader(header);}  }
class C{  public boolean isSubType(String typeName) throws AtlasException {  HierarchicalType cType=typeSystem.getDataType(HierarchicalType.class,typeName);  return (cType == this || cType.superTypePaths.containsKey(getName()));}  }
class C{  public AccentedAtom(Atom base,TeXFormula acc) throws InvalidTeXFormulaException, InvalidSymbolTypeException {  if (acc == null)   throw new InvalidTeXFormulaException("The accent TeXFormula can't be null!"); else {    Atom root=acc.root;    if (root instanceof SymbolAtom) {      accent=(SymbolAtom)root;      if (accent.type == TeXConstants.TYPE_ACCENT)       this.base=base; else       throw new InvalidSymbolTypeException("The accent TeXFormula represents a single symbol with the name '" + accent.getName() + "', but this symbol is not defined as an accent ("+ TeXSymbolParser.TYPE_ATTR+ "='acc') in '"+ TeXSymbolParser.RESOURCE_NAME+ "'!");    } else     throw new InvalidTeXFormulaException("The accent TeXFormula does not represent a single symbol!");  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String encryptString(String sPlainText){  long lCBCIV;synchronized (m_rndGen) {    lCBCIV=m_rndGen.nextLong();  }  return encStr(sPlainText,lCBCIV);}  }
class C{  public void recoverWork(){  if (DEBUG) {    Log.d(Log_TAG,String.format("work_status: recoverWork %s",this));  }  mExitTasksEarly=false;  setPause(false);  Iterator<Entry<String,LoadImageTask>> it=(Iterator<Entry<String,LoadImageTask>>)mLoadWorkList.entrySet().iterator();  while (it.hasNext()) {    Entry<String,LoadImageTask> item=it.next();    LoadImageTask task=item.getValue();    task.restart();    mImageTaskExecutor.execute(task);  }}  }
class C{  public boolean isLeaf(){  return right == null && left == null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextfour.class,args);}  }
class C{  private void writeReadAndVerifyOptimizedByteArray(long threadId,long sequenceId,int expectedArrayLength){  byte[] array=EventID.getOptimizedByteArrayForEventID(threadId,sequenceId);  assertEquals("optimized byte-array length not as expected",expectedArrayLength,array.length);  ByteBuffer buffer=ByteBuffer.wrap(array);  long threadIdReadFromOptArray=EventID.readEventIdPartsFromOptmizedByteArray(buffer);  long sequenceIdReadFromOptArray=EventID.readEventIdPartsFromOptmizedByteArray(buffer);  assertEquals("threadId value read is not same as that written to the byte-buffer",threadId,threadIdReadFromOptArray);  assertEquals("sequenceId value read is not same as that written to the byte-buffer",sequenceId,sequenceIdReadFromOptArray);}  }
class C{  protected void handleChildChange(PropertyChangeEvent evt){  Object newValue=evt.getNewValue();  Object oldValue=evt.getOldValue();  if (!((oldValue != null) ^ (newValue != null))) {    throw new IllegalStateException("Exactly one of old or new values must be non-null for CHILD event");  }  if (newValue != null) {    EditPart editPart=createChild(newValue);    int modelIndex=getModelChildren().indexOf(newValue);    addChild(editPart,modelIndex);  } else {    List<?> children=getChildren();    EditPart partToRemove=null;    for (Iterator<?> iter=children.iterator(); iter.hasNext(); ) {      EditPart part=(EditPart)iter.next();      if (part.getModel() == oldValue) {        partToRemove=part;        break;      }    }    if (partToRemove != null)     removeChild(partToRemove);  }}  }
class C{  public font addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public String globalInfo(){  return "Implementation of the subsequence kernel (SSK) as described in [1] " + "and of the subsequence kernel with lambda pruning (SSK-LP) as " + "described in [2].\n\n"+ "For more information, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void check(){  for (  final Map.Entry<Thread,Long> entry : this.threads.entrySet()) {    final long time=System.currentTimeMillis();    if (time - entry.getValue() > this.latency) {      final Thread thread=entry.getKey();      if (thread.isAlive()) {        thread.interrupt();      }      this.threads.remove(thread);    }  }}  }
class C{  protected IgniteInternalFuture currentFuture() throws IgniteCheckedException {  throw new IgniteCheckedException("Future listening is not supported in " + getClass());}  }
class C{  static void updateSubregion(SynthContext state,Graphics g,Rectangle bounds){  paintRegion(state,g,bounds);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Document doc=target.getDocument();    target.setCaretPosition(0);    target.moveCaretPosition(doc.getLength());  }}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    if (!mStackFromBottom) {      final int firstTop=getScrollChildTop();      delta=firstTop - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mDividerHeight;      }      if (delta < 0) {        delta=0;      }    } else {      final int lastBottom=getScrollChildBottom();      delta=lastBottom - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mDividerHeight;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      tryOffsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  public final void popIteratorRoot(){  m_iteratorRoots.popQuick();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Entry snapshot(SnapshotId snapshotId){  for (  Entry entry : entries) {    if (snapshotId.equals(entry.snapshotId())) {      return entry;    }  }  return null;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  XString xstring=(XString)xstr();  xstring.appendToFsb(fsb);}  }
class C{  public AdapterDelegatesManager<T> removeDelegate(@NonNull AdapterDelegate<T> delegate){  if (delegate == null) {    throw new NullPointerException("AdapterDelegate is null");  }  int indexToRemove=delegates.indexOfValue(delegate);  if (indexToRemove >= 0) {    delegates.removeAt(indexToRemove);  }  return this;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Wizard.getInstance().getTimeRelativeAiring(getAir(stack),1);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  FeatureBean fb=null;  try {    fb=(FeatureBean)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent FeatureBean on object stack");  }  String lang=attributes.getValue("lang");  if (lang == null) {    lang=attributes.getValue("xml:lang");  }  if (lang == null) {    lang="";  }  IconBean ib=fb.getIcon(lang);  if (ib == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[IconRule]{" + digester.getMatch() + "} New ("+ lang+ ")");    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    ib=(IconBean)clazz.newInstance();    ib.setLang(lang);    fb.addIcon(ib);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[IconRule]{" + digester.getMatch() + "} Old ("+ lang+ ")");    }  }  digester.push(ib);}  }
class C{  public void moveItems(List<ResourceBasedNode<?>> items){  this.items=items;  moveItems=true;  checkedPath=null;}  }
class C{  public void testSendFunctionGroup1(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendFunctionGroup1();  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup1 needs to be implemented if invoked");}  }
class C{  public void beginAccept4(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/html;level=1, text/html;level=2");}  }
class C{  public static String validName(String aName){  return aName.replace("^","").replace("/","").replace("\\","").replace("&","").replace("*","").replace("?","").replace("+","").replace("$","").replace("!","").replace("[","").replace("]","");}  }
class C{  public void makeVisible(int index){  if (index < 0 || index >= items.size()) {    return;  }  if (isItemHidden(index)) {    if (index < vsb.getValue()) {      scrollVertical(index - vsb.getValue());    } else     if (index > lastItemDisplayed()) {      int val=index - lastItemDisplayed();      scrollVertical(val);    }  }}  }
class C{  private TimestampToken addTimestampTokenIncludes(final List<DSSReference> references,final TimestampToken token){  final List<TimestampInclude> includes=new ArrayList<TimestampInclude>();  for (  DSSReference reference : references) {    TimestampInclude include=new TimestampInclude(reference.getUri(),"true");    includes.add(include);  }  token.setTimestampIncludes(includes);  return token;}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case MappingPackage.MODEL_ATTRIBUTE:    return convertModelAttributeToString(eDataType,instanceValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  double flowDir;  efficiencyMultiplier=1d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          DinfAccum(row,col);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static DropActionsChoice newInstance(){  DropActionsChoice f=new DropActionsChoice();  return f;}  }
class C{  public static float[] toArray(Vector3 a){  return new float[]{a.getX(),a.getY(),a.getZ()};}  }
class C{  public IllegalBinaryStateException(final Binary binary,final IStatus status){  super(status);  checkArgument(!status.isOK(),"Expected a status that with severity: INFO, WARNING or ERROR. " + status);  this.binary=checkNotNull(binary,"binary");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:01.781 -0500",hash_original_method="D71FCA65B3027CF0021F4CC3EAA91DA7",hash_generated_method="50B6C7716102FD45B7927F775F089DAE") public String encodeBody(){  return entityTag;}  }
class C{  public static synchronized void register(String uname,String pk,DSAPublicKey ck,boolean allowsUnsignedChanges,boolean allowsPublicVisibility){  byte[] index=ServerUtils.unameToIndex(uname);  UserLeafNode uln=new UserLeafNode(uname,pk,ServerHistory.nextEpoch(),0,allowsUnsignedChanges,allowsPublicVisibility,ck,index);  pendingQueue.add(Triplet.with(index,uln,(Operation)new Register()));}  }
class C{  private static ReilInstruction createBinaryInstruction(final String opcode,final IAddress offset,final OperandSize firstSize,final String firstValue,final OperandSize thirdSize,final String thirdValue,final String... meta){  Preconditions.checkArgument((meta.length % 2) == 0,"Invalid number of arguments in metadata array.");  final ReilOperand firstOperand=createOperand(firstSize,firstValue);  final ReilOperand secondOperand=createOperand(OperandSize.EMPTY,"");  final ReilOperand thirdOperand=createOperand(thirdSize,thirdValue);  final ReilInstruction instruction=new ReilInstruction(offset,opcode,firstOperand,secondOperand,thirdOperand);  for (int i=0; i < meta.length; i+=2) {    instruction.setMetaData(meta[i],meta[i + 1]);  }  return instruction;}  }
class C{  public void addImplicitArray(final Class<?> ownerType,final String fieldName,final Class<?> itemType){  addImplicitCollection(ownerType,fieldName,itemType);}  }
class C{  public int readEnum() throws IOException {  return readRawVarint32();}  }
class C{  private void clearListenerEvents(){  for (  SupportUpdateListener listener : listeners) {    listener.reset();  }}  }
class C{  public void addDLoad(int local){  xop(ByteCode.DLOAD_0,ByteCode.DLOAD,local);}  }
class C{  public void addKeyListener(KeyListener l){  m_textPane.addKeyListener(l);}  }
class C{  public int write(Protein protein) throws IOException {  int locationCount=0;  List<String> proteinAcs=getProteinAccessions(protein);  final int length=protein.getSequenceLength();  final String sequence=protein.getSequence();  final String crc64=getCrc64(sequence);  String date=dmyFormat.format(new Date());  Set<Match> matches=protein.getMatches();  for (  String proteinAc : proteinAcs) {    for (    Match match : matches) {      final Signature signature=match.getSignature();      final String signatureAc=signature.getAccession();      final SignatureLibrary signatureLibrary=signature.getSignatureLibraryRelease().getLibrary();      final String analysis=analysisI5toI4.get(signatureLibrary.getName());      if (analysis == null) {        if (LOGGER.isInfoEnabled()) {          LOGGER.info("Skipping " + signatureAc + " match, RAW output does not support matches from analysis "+ signatureLibrary.getName());        }        continue;      }      final String signatureName=signature.getName();      Set<Location> locations=match.getLocations();      if (locations != null) {        locationCount+=locations.size();        for (        Location location : locations) {          String score="-";          String status="T";          if (match instanceof SuperFamilyHmmer3Match) {            score=Double.toString(((SuperFamilyHmmer3Match)match).getEvalue());          } else           if (match instanceof PantherMatch) {            score=Double.toString(((PantherMatch)match).getEvalue());          } else           if (match instanceof FingerPrintsMatch) {            score=Double.toString(((FingerPrintsMatch)match).getEvalue());          }          if (location instanceof HmmerLocation) {            score=Double.toString(((HmmerLocation)location).getEvalue());          } else           if (location instanceof BlastProDomMatch.BlastProDomLocation) {            score=Double.toString(((BlastProDomMatch.BlastProDomLocation)location).getEvalue());          } else           if (location instanceof ProfileScanMatch.ProfileScanLocation) {            score=Double.toString(((ProfileScanMatch.ProfileScanLocation)location).getScore());          }          final List<String> mappingFields=new ArrayList<String>();          mappingFields.add(proteinAc);          mappingFields.add(crc64);          mappingFields.add(Integer.toString(length));          mappingFields.add(analysis);          mappingFields.add(signatureAc);          mappingFields.add((signatureName == null ? "" : signatureName));          mappingFields.add(Integer.toString(location.getStart()));          mappingFields.add(Integer.toString(location.getEnd()));          mappingFields.add(score);          mappingFields.add(status);          mappingFields.add(date);          final Entry interProEntry=signature.getEntry();          if (interProEntry != null) {            mappingFields.add(interProEntry.getAccession());            mappingFields.add(interProEntry.getDescription());            List<GoXref> goXRefs=new ArrayList<>(interProEntry.getGoXRefs());            Collections.sort(goXRefs,new GoXrefComparator());            if (goXRefs.size() > 0) {              StringBuilder sb=new StringBuilder();              for (              GoXref xref : goXRefs) {                if (sb.length() > 0) {                  sb.append(", ");                }                final String category=xref.getCategory().getName();                sb.append(category);                sb.append(":");                sb.append(xref.getName());                sb.append(" (").append(xref.getIdentifier()).append(")");              }              mappingFields.add(sb.toString());            }          } else {            mappingFields.add("NULL");            mappingFields.add("NULL");          }          this.tsvWriter.write(mappingFields);        }      }    }  }  return locationCount;}  }
class C{  public static boolean isChild(FileObject parent,String childPath){  if (parent == null || !parent.isFolder() || StringUtils.isEmpty(childPath)) {    return false;  }  String parentPath=parent.getPath();  return childPath.startsWith(parentPath);}  }
class C{  public IntrospectorTestCase2(String name){  super(name);}  }
class C{  public DFSGraph(File file) throws FileNotFoundException {  out=new PrintWriter(file);}  }
class C{  private void sched(TimerTask task,long time,long period){  if (time < 0)   throw new IllegalArgumentException("Illegal execution time.");  if (Math.abs(period) > (Long.MAX_VALUE >> 1))   period>>=1;synchronized (queue) {    if (!thread.newTasksMayBeScheduled)     throw new IllegalStateException("Timer already cancelled.");synchronized (task.lock) {      if (task.state != TimerTask.VIRGIN)       throw new IllegalStateException("Task already scheduled or cancelled");      task.nextExecutionTime=time;      task.period=period;      task.state=TimerTask.SCHEDULED;    }    queue.add(task);    if (queue.getMin() == task)     queue.notify();  }}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  public static void fill(long[][][][] matrix,long value){  int rows=matrix.length;  for (int r=0; r < rows; r++) {    int cols=matrix[r].length;    for (int c=0; c < cols; c++) {      int height=matrix[r][c].length;      for (int h=0; h < height; h++) {        int depth=matrix[r][c][h].length;        for (int d=0; d < depth; d++) {          matrix[r][c][h][d]=value;        }      }    }  }}  }
class C{  public int character(){  assert (error == null);  return character;}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void seek(long pos){  if (SysProperties.CHECK && pos % Constants.FILE_BLOCK_SIZE != 0) {    DbException.throwInternalError("unaligned seek " + name + " pos "+ pos);  }  try {    if (pos != filePos) {      file.position(pos);      filePos=pos;    }  } catch (  IOException e) {    throw DbException.convertIOException(e,name);  }}  }
class C{  public boolean available(){  return 0 < glName;}  }
class C{  public static BugCollection combineBugHistories(){  try {    FBFileChooser chooser=new FBFileChooser();    chooser.setFileFilter(new FindBugsAnalysisFileFilter());    chooser.setMultiSelectionEnabled(true);    chooser.setDialogTitle(edu.umd.cs.findbugs.L10N.getLocalString("dlg.choose_xmls_ttl","Choose All XML's To Combine"));    if (chooser.showOpenDialog(MainFrame.getInstance()) == JFileChooser.CANCEL_OPTION) {      return null;    }    SortedBugCollection conglomeration=new SortedBugCollection();    conglomeration.readXML(chooser.getSelectedFiles()[0]);    Update update=new Update();    for (int x=1; x < chooser.getSelectedFiles().length; x++) {      File f=chooser.getSelectedFiles()[x];      SortedBugCollection col=new SortedBugCollection();      col.readXML(f);      conglomeration=(SortedBugCollection)update.mergeCollections(conglomeration,col,false,false);    }    return conglomeration;  } catch (  IOException e) {    Debug.println(e);    return null;  }catch (  DocumentException e) {    Debug.println(e);    return null;  }}  }
class C{  private LockGrantorId waitForLockGrantorFutureResult(FutureResult lockGrantorFutureResultRef,long timeToWait,final TimeUnit timeUnit){  LockGrantorId lockGrantorIdRef=null;  while (lockGrantorIdRef == null) {    boolean interrupted=Thread.interrupted();    try {      checkDestroyed();      if (timeToWait == 0) {        lockGrantorIdRef=(LockGrantorId)lockGrantorFutureResultRef.get();      } else {        lockGrantorIdRef=(LockGrantorId)lockGrantorFutureResultRef.get(timeToWait,timeUnit);      }    } catch (    TimeoutException e) {      break;    }catch (    InterruptedException e) {      interrupted=true;      this.dm.getCancelCriterion().checkCancelInProgress(e);      if (lockGrantorFutureResultRef.isCancelled()) {        checkDestroyed();        break;      }      continue;    }catch (    CancellationException e) {      checkDestroyed();      break;    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  return lockGrantorIdRef;}  }
class C{  public static boolean isValidRegex(final String expression){  if (expression == null)   return false;  boolean ret=true;  try {    Pattern.compile(expression);  } catch (  final PatternSyntaxException e) {    ret=false;  }  return ret;}  }
class C{  public List<Completion> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<Completion> list=new ArrayList<Completion>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public void output(OutputStream out){  Element element=null;  Enumeration<Element> data=ec.elements();  while (data.hasMoreElements()) {    element=data.nextElement();    element.output(out);  }}  }
class C{  public void writeGpxFile(String trackName,DBtrackingPoints db,File gpxFile) throws IOException {  String METADATA="  <metadata>\n" + "    <link href=\"http://JunjunGuo.com/PocketMaps\">\n" + "      <text>Pocket Maps: Free offline maps with routing functions and more</text>\n"+ "    </link>\n"+ "    <time>" + DF.format(System.currentTimeMillis()) + "</time>\n"+ "  </metadata>";  if (!gpxFile.exists()) {    gpxFile.createNewFile();  }  FileWriter fw=new FileWriter(gpxFile);  fw.write(XML_HEADER + "\n");  fw.write(TAG_GPX + "\n");  fw.write(METADATA + "\n");  writeTrackPoints(trackName,fw,db);  fw.write("</gpx>");  fw.close();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE___TRACE_CASE_DEF_1:    return traceCaseDef_1 != null && !traceCaseDef_1.isEmpty();case UmplePackage.TRACE_CASE___TRACE_CASE_ACTIVATION_1:  return traceCaseActivation_1 != null && !traceCaseActivation_1.isEmpty();case UmplePackage.TRACE_CASE___TRACE_CASE_DEACTIVATION_1:return traceCaseDeactivation_1 != null && !traceCaseDeactivation_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static byte[] fromBase64(String data){  if (data == null) {    return null;  }  int len=data.length();  if (len == 0) {    return new byte[0];  }  char[] chars=new char[len];  data.getChars(0,len,chars,0);  int olen=3 * (len / 4);  if (chars[len - 2] == '=') {    --olen;  }  if (chars[len - 1] == '=') {    --olen;  }  byte[] bytes=new byte[olen];  int iidx=0;  int oidx=0;  while (iidx < len) {    int c0=base64Values[chars[iidx++] & 0xff];    int c1=base64Values[chars[iidx++] & 0xff];    int c2=base64Values[chars[iidx++] & 0xff];    int c3=base64Values[chars[iidx++] & 0xff];    int c24=(c0 << 18) | (c1 << 12) | (c2 << 6)| c3;    bytes[oidx++]=(byte)(c24 >> 16);    if (oidx == olen) {      break;    }    bytes[oidx++]=(byte)(c24 >> 8);    if (oidx == olen) {      break;    }    bytes[oidx++]=(byte)c24;  }  return bytes;}  }
class C{  public static TestSSLContext create(){  return create(TestKeyStore.getClient(),TestKeyStore.getServer());}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  private static boolean isValidMethodName(String methodName){  return methodName.matches("^[a-zA-Z_$][a-zA-Z0-9_$]*$");}  }
class C{  public Hypercube(IHypercube cube){  this.dimension=cube.dimensionality();  this.lows=new double[dimension];  this.highs=new double[dimension];  for (int i=1; i <= dimension; i++) {    this.lows[i - 1]=cube.getLeft(i);    this.highs[i - 1]=cube.getRight(i);  }}  }
class C{  public ShoppingCartItemsList(final String id,final List<? extends CartItem> cartItems){  super(id,cartItems);}  }
class C{  protected void removeIndex(int toRemove){  if (kernelAccel != null) {    int num=this.kernelAccel.size() / vecs.size();    for (int i=0; i < num; i++)     kernelAccel.remove(toRemove);  }  alpha.remove(toRemove);  vecs.remove(toRemove);}  }
class C{  public static void main(String[] args) throws Exception {  String string=IOUtils.toString(System.in,StandardCharsets.UTF_8.toString());  System.out.println(string);  OcspFetchIntervalSchemaValidator.validate(string);}  }
class C{  public static void check(RegExps rs,Macros m,File f){  macros=m;  int num=rs.getNum();  for (int i=0; i < num; i++) {    RegExp r=rs.getRegExp(i);    RegExp l=rs.getLookAhead(i);    Action a=rs.getAction(i);    if (r != null && maybeEmtpy(r)) {      if (l != null) {        if (a == null)         Out.error(ErrorMessages.EMPTY_MATCH_LOOK); else         Out.error(f,ErrorMessages.EMPTY_MATCH_LOOK,a.priority - 1,-1);      } else {        if (a == null)         Out.warning(ErrorMessages.EMPTY_MATCH); else         Out.warning(f,ErrorMessages.EMPTY_MATCH,a.priority - 1,-1);      }    }  }}  }
class C{  public void stopWriting(){  this.stop.set(true);}  }
class C{  public Set<E> keySet(){  return entries.keySet();}  }
class C{  public void parseLinks(String filename){  int counter=0;  int multiplier=1;  log.info("Parsing links from " + filename);  NetworkFactory nf=sc.getNetwork().getFactory();  try {    BufferedReader br=IOUtils.getBufferedReader(filename);    try {      String line=null;      while ((line=br.readLine()) != null) {        String[] entries=line.split("\t");        if (entries.length != 4) {          log.warn("entries length: " + entries.length);        }        Node fromNode=sc.getNetwork().getNodes().get(Id.create(entries[0],Node.class));        Node toNode=sc.getNetwork().getNodes().get(Id.create(entries[1],Node.class));        if (fromNode == null || toNode == null) {          log.warn("fromNode: " + fromNode);          log.warn("  toNode: " + toNode);        }        Link l=nf.createLink(Id.create(counter,Link.class),fromNode,toNode);        l.setLength(Double.parseDouble(entries[2]));        sc.getNetwork().addLink(l);        if (++counter == multiplier) {          log.info("   links parsed: " + counter);          multiplier*=2;        }      }    }  finally {      br.close();    }  } catch (  FileNotFoundException e) {    log.warn("   links parsed: " + counter + " (Exception)");    e.printStackTrace();  }catch (  IOException e) {    log.warn("   links parsed: " + counter + " (Exception)");    e.printStackTrace();  }  log.info("   links parsed: " + counter + " (Done)");}  }
class C{  public Datastore createNASDatastore(String datastoreName,String remoteHost,String remotePath,final DataStoreAccessMode accessMode,final NasType nasType,final String userName,final String password){  HostNasVolumeSpec hnvs=getNASDatastoreCreateSpec(remoteHost,remotePath,datastoreName,accessMode,nasType,userName,password);  try {    return getDatastoreSystem().createNasDatastore(hnvs);  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  DuplicateName e) {    throw new VMWareException(e);  }catch (  AlreadyExists e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public OperationCanceledException(String message){  super(message);}  }
class C{  public static double uncenteredCorrelation(double[] x,double[] y){  final int xdim=x.length, ydim=y.length;  if (xdim != ydim) {    throw new IllegalArgumentException("Invalid arguments: number vectors differ in dimensionality.");  }  double sumXX=0., sumYY=0., sumXY=0.;  for (int i=0; i < xdim; i++) {    final double xv=x[i], yv=y[i];    sumXX+=xv * xv;    sumYY+=yv * yv;    sumXY+=xv * yv;  }  if (!(sumXX > 0. && sumYY > 0.)) {    return (sumXX == sumYY) ? 1. : 0.;  }  return sumXY / Math.sqrt(sumXX * sumYY);}  }
class C{  private void incorporateDequeues(){  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  if (cycles != prevCycles || takeIndex != prevTakeIndex) {    final int len=items.length;    long dequeues=(cycles - prevCycles) * len + (takeIndex - prevTakeIndex);    if (invalidated(lastRet,prevTakeIndex,dequeues,len))     lastRet=REMOVED;    if (invalidated(nextIndex,prevTakeIndex,dequeues,len))     nextIndex=REMOVED;    if (invalidated(cursor,prevTakeIndex,dequeues,len))     cursor=takeIndex;    if (cursor < 0 && nextIndex < 0 && lastRet < 0)     detach(); else {      this.prevCycles=cycles;      this.prevTakeIndex=takeIndex;    }  }}  }
class C{  public boolean equals(Object obj){  if (obj == null || (!(obj instanceof Timestamp))) {    return false;  }  Timestamp that=(Timestamp)obj;  if (this == that) {    return true;  }  return (timestamp.equals(that.getTimestamp()) && signerCertPath.equals(that.getSignerCertPath()));}  }
class C{  public ConnectionFactory(String url){  this(url,null);}  }
class C{  void print_cover_sets(Stack<Stack<d_node>> cover_sets,Stack<d_node> zero_set,int current_scale,int max_scale){  d_node ele;  println("cover set = ");  for (; current_scale <= max_scale; current_scale++) {    println("" + current_scale);    for (int i=0; i < cover_sets.element(current_scale).length; i++) {      ele=cover_sets.element(current_scale).element(i);      CoverTreeNode n=ele.n;      println(n.p());    }  }  println("infinity");  for (int i=0; i < zero_set.length; i++) {    ele=zero_set.element(i);    CoverTreeNode n=ele.n;    println(n.p());  }}  }
class C{  public T text(Spanned text){  if (view instanceof TextView) {    TextView tv=(TextView)view;    tv.setText(text);  }  return self();}  }
class C{  private LoopRegion makeLoopRegion(IRegion curRegion,LoopInfo loop,List<BlockNode> exitBlocks){  for (  BlockNode block : exitBlocks) {    if (block.contains(AType.EXC_HANDLER) || block.getInstructions().size() != 1 || block.getInstructions().get(0).getType() != InsnType.IF) {      continue;    }    List<LoopInfo> loops=block.getAll(AType.LOOP);    if (!loops.isEmpty() && loops.get(0) != loop) {      continue;    }    LoopRegion loopRegion=new LoopRegion(curRegion,loop,block,block == loop.getEnd());    boolean found;    if (block == loop.getStart() || block == loop.getEnd() || BlockUtils.isEmptySimplePath(loop.getStart(),block)) {      found=true;    } else     if (block.getPredecessors().contains(loop.getStart())) {      loopRegion.setPreCondition(loop.getStart());      found=loopRegion.checkPreCondition();    } else {      found=false;    }    if (found) {      List<LoopInfo> list=mth.getAllLoopsForBlock(block);      if (list.size() >= 2) {        boolean allOuter=true;        for (        BlockNode outerBlock : block.getCleanSuccessors()) {          List<LoopInfo> outLoopList=mth.getAllLoopsForBlock(outerBlock);          outLoopList.remove(loop);          if (!outLoopList.isEmpty()) {            allOuter=false;            break;          }        }        if (allOuter) {          found=false;        }      }    }    if (found) {      return loopRegion;    }  }  return null;}  }
class C{  public static void quit(){  try {    if (!ConfigurationManager.getInstance().saveCurrentConfiguration()) {      return;    }    SceneFramework.getInstance().stopFrameHandlerUpdate();    Properties properties=new Properties();    Landmarks.saveDefaultsToProperties(properties);    Tools.saveDefaultsToProperties(properties);    LineSets.saveDefaultsToProperties(properties);    File f=new File(userPath,"prefs.properties");    properties.store(new FileOutputStream(f),"DERT Preferences");    properties=new Properties();    ConfigurationManager.getInstance().saveRecent(properties);    f=new File(userPath,"recents.properties");    properties.store(new FileOutputStream(f),"DERT Recent Configurations");    mainWindow.dispose();    System.exit(0);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isReferenceDataFound(){  return referenceDataFound;}  }
class C{  public QuickTheory withShrinkCycles(int shrinks){  return new QuickTheory(null);}  }
class C{  @SuppressWarnings("unchecked") private <T>T readByClass(BufferInput<?> buffer){  String name=buffer.readUTF8();  if (whitelistRequired.get())   throw new SerializationException("cannot deserialize unregistered type: " + name);  Class<T> type=(Class<T>)types.get(name);  if (type == null) {    try {      type=(Class<T>)Class.forName(name);      if (type == null)       throw new SerializationException("cannot deserialize: unknown type");      types.put(name,type);    } catch (    ClassNotFoundException e) {      throw new SerializationException("object class not found: " + name,e);    }  }  TypeSerializer<T> serializer=getSerializer(type);  if (serializer == null)   throw new SerializationException("cannot deserialize unregistered type: " + name);  return serializer.read(type,buffer,this);}  }
class C{  public static KMLFeatureTreeNode fromKMLFeature(KMLAbstractFeature feature){  if (feature == null) {    String message=Logging.getMessage("nullValue.FeatureIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (feature instanceof KMLNetworkLink)   return new KMLNetworkLinkTreeNode((KMLNetworkLink)feature); else   if (feature instanceof KMLAbstractContainer)   return new KMLContainerTreeNode((KMLAbstractContainer)feature); else   return new KMLFeatureTreeNode(feature);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=InfiniteViewPager.FakePositionHelper.getAdapterSize(mViewPager);    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public synchronized void write(byte b[],int off,int len) throws IOException {  if (len <= 0)   return;  int freeSpace=buffer.length - pos;  if (len <= freeSpace) {    System.arraycopy(b,off,buffer,pos,len);    pos+=len;    return;  }  flush();  int local_requested;  while (true) {synchronized (lock) {      while ((local_requested=requested) < 1 && !disconnected) {        try {          lock.wait();        } catch (        InterruptedException e) {        }      }      if (disconnected)       throw new IOException("Connection closed");    }    if (local_requested < len) {      manager.sendTransmit(info,b,off,local_requested);      off+=local_requested;      len-=local_requested;synchronized (lock) {        requested-=local_requested;      }    } else {      manager.sendTransmit(info,b,off,len);synchronized (lock) {        requested-=len;      }      break;    }  }}  }
class C{  public JProgressBar(){  this(defaultOrientation);}  }
class C{  @Override public Eval<Optional<T>> findAny(){  return Eval.later(null);}  }
class C{  public void disconnect() throws SQLException, NoConnectionException {  if (connection != null)   connection.close();  throw new NoConnectionException();}  }
class C{  public static TransitSchedule mergeEqualProfilesOfAllRoutes(TransitSchedule schedule,String outputDirectory){  return new TransitScheduleSimplifier().mergeEqualTransitRoutesV1(schedule,outputDirectory);}  }
class C{  public boolean currentElementCanContinue(){  return matchCount < patternElement.maxOccur();}  }
class C{  public void addListener(final ICodeBookmarkManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  public synchronized void addFeature(String s){  assert allowNewFeatures == true;  if (!feaStr2IdMap.containsKey(s)) {    int v=feaStr2IdMap.size();    feaStr2IdMap.put(s,v);    feaId2StrMap.put(v,s);  }}  }
class C{  public Builder put(String key,File file) throws FileNotFoundException {  if (key != null && file != null) {    mParams.put(key,file,null,null);  }  return this;}  }
class C{  public Env<A> dup(JCTree tree){  return dup(tree,this.info);}  }
class C{  public Campaign(JSONObject campaignMap){  this();  this.map.putAll(campaignMap);  this.start_time=((Date)this.map.get("start_date")).getTime();  this.end_time=((Date)this.map.get("end_date")).getTime();  this.id=DateParser.minuteDateFormat.format((Date)this.map.get("start_date")).replace(' ','_') + "-" + DateParser.minuteDateFormat.format((Date)this.map.get("end_date")).replace(' ','_')+ "-"+ Math.abs(((String)this.map.get("query")).hashCode())+ "-"+ Math.abs(((String)this.map.get("name")).hashCode());}  }
class C{  private void addEntry(final String key,final WordEntry entry){  words.put(trimWord(key),entry);  if ((entry.getPlurSing() != null) && !entry.getPlurSing().equals(entry.getNormalized())) {    final WordEntry pluralEntry=new WordEntry();    pluralEntry.setNormalized(entry.getPlurSing());    pluralEntry.setType(new ExpressionType(entry.getTypeString() + ExpressionType.SUFFIX_PLURAL));    pluralEntry.setPlurSing(entry.getNormalized());    pluralEntry.setValue(entry.getValue());    final WordEntry prev=words.put(entry.getPlurSing(),pluralEntry);    if (prev != null) {      logger.debug(String.format("ambiguous plural: %s/%s -> %s",pluralEntry.getPlurSing(),prev.getPlurSing(),entry.getPlurSing()));      pluralEntry.setPlurSing(null);      prev.setPlurSing(null);    }  }}  }
class C{  @Override public void widgetSelected(SelectionEvent event){  Button thisButton=(Button)event.widget;  if (thisButton.getSelection()) {    viewer.addFilter(controlFilter);    refresh();  } else {    viewer.removeFilter(controlFilter);    refresh();  }}  }
class C{  @Override public void applyEntityCollision(Entity par1Entity){  super.applyEntityCollision(par1Entity);  if (this.isExplosive && this.ticksExisted < 20 * 2) {    this.explode();  }}  }
class C{  private static List<Result> processLocationsQueryResults(Cursor cursor){  TreeSet<String> locations=new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);  cursor.moveToPosition(-1);  while ((locations.size() < MAX_LOCATION_SUGGESTIONS) && cursor.moveToNext()) {    String location=cursor.getString(EVENT_INDEX_LOCATION).trim();    locations.add(location);  }  List<Result> results=new ArrayList<Result>();  for (  String location : locations) {    results.add(new Result(null,location,R.drawable.ic_history_holo_light,null));  }  return results;}  }
class C{  private void clearBlock(byte[] block){  for (int i=0; i != block.length; i++) {    block[i]=0;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.884 -0400",hash_original_method="EDA7EDCED2EBE3E83E19BD32EAD8E742",hash_generated_method="0DA517C7BC55E33B6AE94223A6AF362B") public static IOFileFilter magicNumberFileFilter(byte[] magicNumber){  return new MagicNumberFileFilter(magicNumber);}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(getURI(url)),entity),contentType,responseHandler,context);}  }
class C{  public static DelaunayVertex cross(DelaunayVertex[] matrix){  int len=matrix.length + 1;  if (len != matrix[0].dimension()) {    throw new IllegalArgumentException("Dimension mismatch");  }  boolean[] columns=new boolean[len];  for (int i=0; i < len; i++) {    columns[i]=true;  }  double[] result=new double[len];  int sign=1;  try {    for (int i=0; i < len; i++) {      columns[i]=false;      result[i]=sign * determinant(matrix,0,columns);      columns[i]=true;      sign=-sign;    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException("Matrix is wrong shape");  }  return new DelaunayVertex(result);}  }
class C{  public SpanNotQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public static <T extends Attributable>void copyAttributesTo(T from,T to){  copyTo(from.getAttributes(),to.getAttributes());}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  public static void pointerRelease(float x,float y,String componentName){  if (verbose) {    log("pointerRelease(" + x + ", "+ y+ ", "+ componentName+ ")");  }  Component c=findByName(componentName);  int actualX=c.getAbsoluteX() + (int)(x * c.getWidth());  int actualY=c.getAbsoluteY() + (int)(y * c.getHeight());  Display.getInstance().getCurrent().pointerReleased(actualX,actualY);  waitFor(30);}  }
class C{  public static void encode(File source,File target) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new FileInputStream(source);    outputStream=new FileOutputStream(target);    Base64.encode(inputStream,outputStream);  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Throwable t) {        ;      }    }    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public double[] computeLocalFromPreviousObservations(int states[][],int iCol,int jCol){  int rows=states.length;  double[] localMI=new double[rows];  int iVal, jVal;  double logTerm=0.0;  for (int r=timeDiff; r < rows; r++) {    iVal=states[r - timeDiff][iCol];    jVal=states[r][jCol];    logTerm=((double)jointCount[iVal][jVal]) / ((double)jCount[jVal] * (double)iCount[iVal]);    logTerm*=(double)observations;    localMI[r]=Math.log(logTerm) / log_2;    average+=localMI[r];    if (localMI[r] > max) {      max=localMI[r];    } else     if (localMI[r] < min) {      min=localMI[r];    }  }  average=average / (double)observations;  return localMI;}  }
class C{  SocketWrapper(Socket socket){  this.socket=socket;}  }
class C{  void recomposeVariables(ElemVariable elemVar){  if (getVariableOrParamComposed(elemVar.getName()) == null) {    elemVar.setIsTopLevel(true);    elemVar.setIndex(m_variables.size());    m_variables.addElement(elemVar);  }}  }
class C{  @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application){  return application.sources(Application.class);}  }
class C{  public boolean isReplacing(){  return replacing;}  }
class C{  protected void sequence_WithStatement(ISerializationContext context,WithStatement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.WITH_STATEMENT__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.WITH_STATEMENT__EXPRESSION));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.WITH_STATEMENT__STATEMENT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.WITH_STATEMENT__STATEMENT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0(),semanticObject.getExpression());  feeder.accept(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0(),semanticObject.getStatement());  feeder.finish();}  }
class C{  public IRCConnection(IRCService service,int serverId){  this.server=Hermes.getInstance().getServerById(serverId);  this.service=service;  this.debugTraffic=service.getSettings().debugTraffic();  this.setAutoNickChange(true);  this.setFinger("http://www.youtube.com/watch?v=oHg5SJYRHA0");  this.updateNickMatchPattern();}  }
class C{  public double distance(LatLng ll){  double er=6366.707;  double latFrom=Math.toRadians(getLat());  double latTo=Math.toRadians(ll.getLat());  double lngFrom=Math.toRadians(getLng());  double lngTo=Math.toRadians(ll.getLng());  double d=Math.acos(Math.sin(latFrom) * Math.sin(latTo) + Math.cos(latFrom) * Math.cos(latTo) * Math.cos(lngTo - lngFrom)) * er;  return d;}  }
class C{  public MessageFactory(int from){  this.from=from;}  }
class C{  public static CountStarProjectionExpression countStar(){  CountStarProjectionExpression expr=new CountStarProjectionExpression();  expr.addChild(new WildcardExpression());  return expr;}  }
class C{  @Nonnull public BugInstance addType(String typeDescriptor){  TypeAnnotation typeAnnotation=new TypeAnnotation(typeDescriptor);  add(typeAnnotation);  return this;}  }
class C{  public void considerForContent(Object someObj){  if (someObj instanceof MapPanel && someObj instanceof Component && getContentPane().getComponentCount() == 0) {    logger.fine("Found a MapPanel");    setContent((Component)someObj);  }}  }
class C{  LdapReferralException appendUnprocessedReferrals(LdapReferralException back){  if (debug) {    System.out.println("LdapReferralException.appendUnprocessedReferrals");    dump();    if (back != null) {      back.dump();    }  }  LdapReferralException front=this;  if (!front.hasMoreReferrals()) {    front=nextReferralEx;    if ((errorEx != null) && (front != null)) {      front.setNamingException(errorEx);    }  }  if (this == back) {    return front;  }  if ((back != null) && (!back.hasMoreReferrals())) {    back=back.nextReferralEx;  }  if (back == null) {    return front;  }  LdapReferralException ptr=front;  while (ptr.nextReferralEx != null) {    ptr=ptr.nextReferralEx;  }  ptr.nextReferralEx=back;  return front;}  }
class C{  public TLongFloatHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void installApp(String url,String schedule,Operation operation){  if (schedule != null && !schedule.trim().isEmpty() && !schedule.equals("undefined")) {    try {      AlarmUtils.setOneTimeAlarm(context,schedule,Constants.Operation.INSTALL_APPLICATION,operation,url,null);    } catch (    ParseException e) {      Log.e(TAG,"One time alarm time string parsing failed." + e);    }    return;  }  int operationId=0;  String operationCode=Constants.Operation.INSTALL_APPLICATION;  if (operation != null) {    operationId=Preference.getInt(context,context.getResources().getString(R.string.app_install_id));    operationCode=Preference.getString(context,context.getResources().getString(R.string.app_install_code));    if (operationId == operation.getId()) {      Log.w(TAG,"Ignoring received operation as it has the same operation ID with ongoing operation.");      return;    }    if (operationId != 0 && operationCode != null) {      AppInstallRequest appInstallRequest=new AppInstallRequest();      appInstallRequest.setApplicationOperationId(operation.getId());      appInstallRequest.setApplicationOperationCode(operation.getCode());      appInstallRequest.setAppUrl(url);      AppInstallRequestUtil.addPending(context,appInstallRequest);      Log.d(TAG,"Added request to pending queue as there is another installation ongoing.");      if (!downloadOngoing) {        int attempt=Preference.getInt(context,APP_INSTALLATION_ATTEMPT);        if (attempt >= 1) {          Preference.putInt(context,APP_INSTALLATION_ATTEMPT,0);          Preference.putInt(context,context.getResources().getString(R.string.app_install_id),0);          Preference.putString(context,context.getResources().getString(R.string.app_install_code),null);        } else {          Preference.putInt(context,APP_INSTALLATION_ATTEMPT,++attempt);        }      } else {        downloadOngoing=false;      }      return;    }    operationId=operation.getId();    operationCode=operation.getCode();    Preference.putInt(context,APP_INSTALLATION_ATTEMPT,0);  }  setupAppDownload(url,operationId,operationCode);}  }
class C{  public ConnectException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private void create(MInvoice invoice){  MInvoiceTax[] taxes=invoice.getTaxes(false);  for (int i=0; i < taxes.length; i++) {    MInvoiceTax tLine=taxes[i];    MTaxDeclarationLine tdl=new MTaxDeclarationLine(m_td,invoice,tLine);    tdl.setLine((m_noLines + 1) * 10);    if (tdl.save())     m_noLines++;  }  String sql="SELECT * FROM Fact_Acct WHERE AD_Table_ID=? AND Record_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,MInvoice.Table_ID);    pstmt.setInt(2,invoice.getC_Invoice_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      MFactAcct fact=new MFactAcct(getCtx(),rs,null);      MTaxDeclarationAcct tda=new MTaxDeclarationAcct(m_td,fact);      tda.setLine((m_noAccts + 1) * 10);      if (tda.save())       m_noAccts++;    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ASSOCIATION_POSITION___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.ASSOCIATION_POSITION___COORDINATE_1:getCoordinate_1().clear();getCoordinate_1().addAll((Collection<? extends Coordinate_>)newValue);return;case UmplePackage.ASSOCIATION_POSITION___COORDINATE_2:getCoordinate_2().clear();getCoordinate_2().addAll((Collection<? extends Coordinate_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private Class<?> defineStructure(Field destination,Field source){  Class<?> destinationClass=destination.getType();  Class<?> sourceClass=source.getType();  Class<?> result=null;  if (destinationClass.isInterface())   if (sourceClass.isInterface())   result=(Class<?>)implementationClass.get(destinationClass.getName()); else {    Class<?> sourceInterface=sourceClass.getInterfaces()[0];    if (destinationClass == sourceInterface)     result=sourceClass; else     result=(Class<?>)implementationClass.get(destinationClass.getName());  } else   result=destinationClass;  return result;}  }
class C{  @LargeTest public void testSelectionOfInputElements3() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<input type=\"text\"/>"+ "<button type=\"button\">Click Me!</button>"+ "<select>"+ "<option value=\"volvo\">Volvo</option>"+ "<option value=\"saab\">Saab</option>"+ "</select>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<button type=\"button\">Click Me!</button>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<select><option value=\"volvo\">Volvo</option>" + "<option value=\"saab\">Saab</option></select>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<select><option value=\"volvo\">Volvo</option>" + "<option value=\"saab\">Saab</option></select>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<button type=\"button\">Click Me!</button>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<input type=\"text\">");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<input type=\"text\">");}  }
class C{  public CompositeFigureEvent(CompositeFigure source,Figure child,Rectangle2D.Double invalidatedArea,int zIndex){  super(source);  this.child=child;  this.invalidatedArea=invalidatedArea;  this.index=0;}  }
class C{  @Override public Element store(Object o){  AnalogClock2Display p=(AnalogClock2Display)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("fastclock");  element.setAttribute("x","" + p.getX());  element.setAttribute("y","" + p.getY());  element.setAttribute("scale","" + p.getScale());  element.setAttribute("color","" + p.getColor().name());  String link=p.getUrl();  if (link != null && link.trim().length() > 0) {    element.setAttribute("link",link);  }  element.setAttribute("class","jmri.jmrit.display.configurexml.AnalogClock2DisplayXml");  return element;}  }
class C{  public void writeLinkGraphics(LinkGraphicList lgl,LinkProperties properties) throws IOException {  lgl.addRectangle((float)y,(float)x,-1,-1,1,1,properties);}  }
class C{  public void addLconst(long n){  if (n == 0 || n == 1)   addOpcode(9 + (int)n); else   addLdc2w(n);}  }
class C{  public static GitkitUser verifyGitkitToken(final String gitkitToken) throws GitkitClientException, FileNotFoundException {  GitkitClient gitkitClient=GitkitClient.newBuilder().setGoogleClientId(BackendConstants.GOOGLE_CLIENT_ID).setServiceAccountEmail(BackendConstants.GOOGLE_SERVICE_ACCOUNT).setKeyStream(Thread.currentThread().getContextClassLoader().getResourceAsStream(BackendConstants.GOOGLE_SERVICE_ACCOUNT_KEY_FILEPATH)).setWidgetUrl("/gitkit.jsp").setCookieName("gtoken").build();  return gitkitClient.validateToken(gitkitToken);}  }
class C{  public int nextRowIndex(){  return rowCount++;}  }
class C{  protected WeakReference<V> removeMapEntry(final K k){  return map.remove(k);}  }
class C{  private void addLeafDelta(Segment10 segment,int pid,int nextPid,int address,int length){  Page10 page=_pageMap.get(pid);  if (page != null && page.sequence() < segment.sequence()) {    return;  }  if (page != null) {    page.addDelta(address,length);  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.246 -0400",hash_original_method="24E1254AF0599ABF4B37852E6EA59286",hash_generated_method="0933108527968DB340F07BAB59466C01") @Override public void write(String str,int st,int end){}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  public void addContentSelectionChangedListener(ContentSelectionChangedListener l){  contentSelectionChangedListenerList.add(ContentSelectionChangedListener.class,l);}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances result;  Instances processed;  int i;  int n;  ArrayList<Attribute> atts;  Attribute att;  if (!isFirstBatchDone()) {    if (inputFormat.numInstances() == 0) {      return null;    }    checkDimensions();    determineUnusedIndices(inputFormat);    atts=new ArrayList<Attribute>();    for (i=0; i < getFilters().length; i++) {      if (!isFirstBatchDone()) {        processed=generateSubset(inputFormat,getRange(i));        if (!getFilter(i).setInputFormat(processed)) {          Filter.useFilter(processed,getFilter(i));        }      }      processed=getFilter(i).getOutputFormat();      processed=renameAttributes(processed,"filtered-" + i + "-");      for (n=0; n < processed.numAttributes(); n++) {        if (n == processed.classIndex()) {          continue;        }        atts.add((Attribute)processed.attribute(n).copy());      }    }    if (!getRemoveUnused()) {      for (i=0; i < m_IndicesUnused.length; i++) {        att=inputFormat.attribute(m_IndicesUnused[i]);        atts.add(att.copy("unfiltered-" + att.name()));      }    }    if (inputFormat.classIndex() > -1) {      atts.add((Attribute)inputFormat.classAttribute().copy());    }    result=new Instances(inputFormat.relationName(),atts,0);    if (inputFormat.classIndex() > -1) {      result.setClassIndex(result.numAttributes() - 1);    }  } else {    result=getOutputFormat();  }  return result;}  }
class C{  public static void trustAllHostnames(){  if (isDeprecatedSSLProtocol()) {    __trustAllHostnames();  } else {    _trustAllHostnames();  }}  }
class C{  @Override public synchronized void updateTimestamp(int columnIndex,java.sql.Timestamp x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setTimestamp(columnIndex,x);  } else {    this.inserter.setTimestamp(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  public void proceed(String username,String password){  this.handler.proceed(username,password);}  }
class C{  private void raiseWindow(){  if ((windowShell != null) && (!windowShell.isDisposed())) {    location=windowShell.getLocation();    windowShell.close();    windowShell.dispose();  }  Shell topshell=UIHelper.getShellProvider().getShell();  windowShell=new Shell(topshell,SWT.CLOSE | SWT.TITLE | SWT.RESIZE);  windowShell.setText("Decompose Proof - Old Version");  windowShell.addDisposeListener(new WindowDisposeListener(this));  Composite shell=new Composite(windowShell,SWT.NONE);  GridLayout gridLayout=new GridLayout(3,false);  shell.setLayout(gridLayout);  Composite topMenu=new Composite(shell,SWT.NONE);  gridLayout=new GridLayout(5,false);  gridLayout.marginBottom=0;  topMenu.setLayout(gridLayout);  GridData gridData=new GridData();  gridData.horizontalSpan=3;  topMenu.setLayoutData(gridData);  Button replaceButton=new Button(topMenu,SWT.PUSH);  setupMenuButton(replaceButton,PROVE_BUTTON,"P");  replaceButton.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));  replaceButton.setEnabled(hasChanged && (chosenSplit == -1) && (andSplitEnd == -1));  useSufficesButton=new Button(topMenu,SWT.CHECK);  setupCheckButton(useSufficesButton,"Use SUFFICES");  useSufficesButton.setSelection(useSufficesValue);  useCaseButton=new Button(topMenu,SWT.CHECK);  setupCheckButton(useCaseButton,"Use CASE");  useCaseButton.setSelection(useCaseValue);  subexpressionButton=new Button(topMenu,SWT.CHECK);  setupCheckButton(subexpressionButton,"Use subexpression names");  subexpressionButton.setSelection(subexpressionValue);  gridData=new GridData();  gridData.horizontalAlignment=GridData.FILL;  gridData.grabExcessHorizontalSpace=true;  subexpressionButton.setLayoutData(gridData);  subexpressionButton.setVisible(false);  Button helpButton=HelpButton.helpButton(topMenu,"prover/old-decompose.html");  gridData=new GridData();  gridData.horizontalIndent=20;  helpButton.setLayoutData(gridData);  gridData=new GridData();  gridData.horizontalSpan=3;  Label assumeLabel=new Label(shell,SWT.NONE);  assumeLabel.setText("ASSUME");  assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));  assumeLabel.setLayoutData(gridData);  if (assumeReps != null) {    addAssumptionsToComposite(assumeReps,shell);  }  gridData=new GridData();  gridData.horizontalSpan=3;  assumeLabel=new Label(shell,SWT.NONE);  assumeLabel.setLayoutData(gridData);  assumeLabel.setText("PROVE");  assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));  String labelText=null;  boolean isProver=false;  boolean disable=false;switch (goalRep.nodeSubtype) {case NodeRepresentation.AND_TYPE:    labelText="/\\";  isProver=true;disable=(chosenSplit != -1) || (andSplitBegin != -1);break;case NodeRepresentation.FORALL_TYPE:labelText="\\A";break;case NodeRepresentation.IMPLIES_TYPE:labelText="=>";break;default :labelText=null;}if (labelText != null) {Button goalButton=new Button(shell,SWT.PUSH);setupActionButton(goalButton,goalRep,labelText);goalButton.setEnabled(!disable);} else {assumeLabel=new Label(shell,SWT.NONE);assumeLabel.setText("  ");}Composite comp;comp=new Composite(shell,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);if (isProver && !disable) {assumeLabel=new Label(comp,SWT.NONE);assumeLabel.setText("P");assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));}comp.setSize(0,5);assumeLabel=new Label(shell,SWT.NONE);assumeLabel.setText(stringArrayToString(goalRep.primedNodeText()));gridData=new GridData();gridData.verticalAlignment=SWT.TOP;assumeLabel.setLayoutData(gridData);assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));shell.pack();Point shellSize=shell.getSize();windowShell.pack();windowShell.update();if (this.location != null) {windowShell.setLocation(this.location);}windowShell.open();editorIFile.setReadOnly(true);}  }
class C{  public boolean canTraceCount(){  return canTraceCount;}  }
class C{  protected int packValues(String values){  int i, n=values.length();  int m=(n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;  int offset=vspace.alloc(m);  byte[] va=vspace.getArray();  for (i=0; i < n; i++) {    int j=i >> 1;    byte v=(byte)((values.charAt(i) - '0' + 1) & 0x0f);    if ((i & 1) == 1) {      va[j + offset]=(byte)(va[j + offset] | v);    } else {      va[j + offset]=(byte)(v << 4);    }  }  va[m - 1 + offset]=0;  return offset;}  }
class C{  public static boolean isPN_CHARS_U(int codePoint){  return isPN_CHARS_BASE(codePoint) || codePoint == '_';}  }
