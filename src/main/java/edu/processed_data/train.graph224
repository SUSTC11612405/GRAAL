class C{  public <R1>FluentSupplier<R1> matches(final Function<CheckValue1<R,R1>,CheckValue1<R,R1>> case1,final Supplier<? extends R1> otherwise){  return FluentFunctions.of(null);}  }
class C{  public void addSoundButtons(ArrayList<SoundEvent> elist){  soundsPanel.removeAll();  for (  SoundEvent e : elist) {    if (e.getButton() != null) {      log.debug("adding button " + e.getButton().toString());      JComponent jc=e.getButton();      GridBagConstraints gbc=new GridBagConstraints();      if (e instanceof EngineSoundEvent) {        gbc.gridy=1;        gbc.gridwidth=elist.size() - 1;        gbc.fill=GridBagConstraints.NONE;        gbc.anchor=GridBagConstraints.LINE_START;        soundsPanel.add(jc,gbc);      } else {        gbc.gridy=0;        soundsPanel.add(jc,gbc);      }    }  }}  }
class C{  protected Socket createSocket(Properties props){  return new Socket();}  }
class C{  public static double normalizeLon(double lon_deg){  if (lon_deg >= -180 && lon_deg <= 180) {    return lon_deg;  }  double off=(lon_deg + 180) % 360;  if (off < 0) {    return 180 + off;  } else   if (off == 0 && lon_deg > 0) {    return 180;  } else {    return -180 + off;  }}  }
class C{  private void appendColourClass(final StringBuilder result,final String entryType,final Map<String,Integer> entryColourMap,final String entryAccession){  final Integer colourCode=entryColourMap.get(entryAccession);  if (entryType != null && colourCode != null) {    result.append("class=\"");    result.append("c" + colourCode + " "+ entryType);    result.append("\" ");  }}  }
class C{  public static double enlargementScaled(SpatialComparable exist,SpatialComparable addit,double scale){  final int dim=assertSameDimensionality(exist,addit);  double v1=1.;  double v2=1.;  for (int i=0; i < dim; i++) {    final double emin=exist.getMin(i);    final double emax=exist.getMax(i);    final double amin=addit.getMin(i);    final double amax=addit.getMax(i);    final double min=Math.min(emin,amin);    final double max=Math.max(emax,amax);    v1*=(max - min) * scale;    v2*=(emax - emin) * scale;  }  return v2 - v1;}  }
class C{  void handleEOD(EncoderContext context,StringBuilder buffer){  int unwritten=(buffer.length() / 3) * 2;  int rest=buffer.length() % 3;  int curCodewordCount=context.getCodewordCount() + unwritten;  context.updateSymbolInfo(curCodewordCount);  int available=context.getSymbolInfo().getDataCapacity() - curCodewordCount;  if (rest == 2) {    buffer.append('\0');    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else   if (available == 1 && rest == 1) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }    context.pos--;  } else   if (rest == 0) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (available > 0 || context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else {    throw new IllegalStateException("Unexpected case. Please report!");  }  context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);}  }
class C{  private void initializeLayout(){  setTitle("Synapse Dialog");  JScrollPane scroller=new JScrollPane(synapseEditingPanel);  scroller.setBorder(null);  setContentPane(scroller);  this.addButton(helpButton);}  }
class C{  public void registReceiver(final WearReceiveListener listener){  mListener=listener;}  }
class C{  public void staleLocator(PartitionLocator locator){}  }
class C{  @Override protected boolean isSplitable(FileSystem fs,Path filename){  return false;}  }
class C{  public long readULong() throws IOException {  return 0xffffffffL & this.readLong();}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  int identityLength=in.readShort();  if (identityLength > BYTES_32KB) {    throw new IOException(LocalizedStrings.ClientProxyMembershipID_HANDSHAKE_IDENTITY_LENGTH_IS_TOO_BIG.toLocalizedString());  }  this.identity=new byte[identityLength];  read(in,this.identity);  this.uniqueId=in.readInt();  if (this.uniqueId == -1) {    throw new IOException(LocalizedStrings.ClientProxyMembershipID_UNEXPECTED_EOF_REACHED_UNIQUE_ID_COULD_NOT_BE_READ.toLocalizedString());  }}  }
class C{  @Override public String toString(){  return toSummaryString();}  }
class C{  private void debugSpaces(CopySpace scannedSpace){  Log.write("SSGCspyCollector.gcspyGatherData: gather data for active semispace ");  Log.write(scannedSpace.getStart());  Log.write("-",ss.getCursor());  Log.flush();  Log.write(". The space is: ");  Log.writeln(ss.getSpace().getName());  Log.write("scannedSpace is ");  Log.writeln(scannedSpace.getName());  Log.write("The range is ");  Log.write(ss.getSpace().getStart());  Log.write(" to ");  Log.writeln(ss.getCursor());  SSGCspy.reportSpaces();}  }
class C{  public synchronized void listAccessed(PrintWriter p){  Vector vec=new Vector();  Enumeration e=accessed.keys();  while (e.hasMoreElements())   vec.addElement(e.nextElement());  Object[] array=new Object[vec.size()];  vec.copyInto(array);  java.util.Collections.sort(vec);  for (int x=0; x < array.length; x++) {    String s=(String)(array[x]);    String v=null;    if (s != null) {      v=(String)(_get(s));      uncheck();    }    if (v == null)     v=UNKNOWN_VALUE;    p.println(s + " = " + v);  }  p.flush();}  }
class C{  static void errorInvalidInput(String systemID,int lineNr,String unexpectedString) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Invalid input: " + unexpectedString);}  }
class C{  public boolean hasReturn4w(){  return getReturn4w() != null;}  }
class C{  public void onSaveInstanceState(Bundle outState){  hasSavedState=true;  outState.putParcelable(KEY_STATE,new State(observableManager.id(),group.id()));}  }
class C{  public PhoneNumber(){  super(KEY);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void node(Collection segStrings,int[] numInteriorIntersections){  IntersectionAdder si=new IntersectionAdder(li);  MCIndexNoder noder=new MCIndexNoder();  noder.setSegmentIntersector(si);  noder.computeNodes(segStrings);  nodedSegStrings=noder.getNodedSubstrings();  numInteriorIntersections[0]=si.numInteriorIntersections;}  }
class C{  private void populateHostData(Host host,HostParam param){  if (param.getName() != null) {    host.setLabel(param.getName());  }  if (param.getHostName() != null) {    host.setHostName(param.getHostName());  }  if (param.getCluster() != null) {    host.setCluster(param.getCluster());  }  if (param.getOsVersion() != null) {    host.setOsVersion(param.getOsVersion());  }  if (param.getUserName() != null) {    host.setUsername(param.getUserName());  }  if (param.getPassword() != null) {    host.setPassword(param.getPassword());  }  if (param.getPortNumber() != null) {    host.setPortNumber(param.getPortNumber());  }  if (param.getUseSsl() != null) {    host.setUseSSL(param.getUseSsl());  }  if (param.getType() != null) {    host.setType(param.getType());  }  if (param.getDiscoverable() != null) {    host.setDiscoverable(param.getDiscoverable());  }  if (param.getVcenterDataCenter() != null) {    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());  }  Cluster cluster=null;  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {    cluster=queryObject(Cluster.class,param.getCluster(),true);    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {      host.setVcenterDataCenter(cluster.getVcenterDataCenter());    }    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {      host.setProject(cluster.getProject());    }  }  if (param.getBootVolume() != null) {    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());  }}  }
class C{  public static EventBean[] applyFilterExpression(ExprEvaluator filter,EventBean streamZeroEvent,EventBean[] streamOneEvents,ExprEvaluatorContext exprEvaluatorContext){  EventBean[] eventsPerStream=new EventBean[2];  eventsPerStream[0]=streamZeroEvent;  EventBean[] filtered=new EventBean[streamOneEvents.length];  int countPass=0;  for (  EventBean eventBean : streamOneEvents) {    eventsPerStream[1]=eventBean;    Boolean result=(Boolean)filter.evaluate(eventsPerStream,true,exprEvaluatorContext);    if ((result != null) && result) {      filtered[countPass]=eventBean;      countPass++;    }  }  if (countPass == streamOneEvents.length) {    return streamOneEvents;  }  return EventBeanUtility.resizeArray(filtered,countPass);}  }
class C{  public ExportGroupState(URI id){  this.id=id;  this.addedInitiators=Lists.newArrayList();  this.removedInitiators=Lists.newArrayList();  this.addedHosts=Lists.newArrayList();  this.removedHosts=Lists.newArrayList();  this.addedClusters=Lists.newArrayList();  this.removedClusters=Lists.newArrayList();}  }
class C{  public boolean usingVertexColors(){  return mUseVertexColors;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testAuthentication() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/authentication-war/test");  final String expected="Principal name [someone], Is user in \"cargo\" role [true]";  Map<String,String> requestProperties=new HashMap<String,String>();  requestProperties.put("Authorization","Basic " + new String(Base64.encodeBase64("someone:passw0rd".getBytes())));  PingUtils.assertPingTrue("Failed authentication",expected,url,requestProperties,logger);}  }
class C{  private void loadChat(String userId,String chatId,String chatName,String tags,String image){  final Intent chatScreenActivity=new Intent(getActivity(),ChatScreenActivity.class);  chatScreenActivity.putExtra(AppConstants.Keys.USER_ID,userId);  chatScreenActivity.putExtra(AppConstants.Keys.CHAT_ID,chatId);  chatScreenActivity.putExtra(AppConstants.Keys.CHAT_TITLE,chatName);  chatScreenActivity.putExtra(AppConstants.Keys.PROFILE_IMAGE,image);  chatScreenActivity.putExtra(AppConstants.Keys.FROM_WALL,true);  chatScreenActivity.putExtra(AppConstants.Keys.MY_ID,AppConstants.UserInfo.INSTANCE.getId());  getActivity().startActivity(chatScreenActivity);}  }
class C{  public void lookup(int dictionaryIndex) throws IOException {  pushValues.add(new Short((short)dictionaryIndex));  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  public static void fetchCommandLineArguments(){  if (args != null) {    return;  }  ArgReader argRdr=new ArgReader();  int numArgs=argRdr.numArgs();  args=new String[numArgs];  arg_types=new PrefixType[numArgs];  for (int i=0; i < numArgs; ++i) {    String arg=argRdr.getArg(i);    if (app_prefix.count > 0) {      args[i]=arg;      arg_types[i]=PrefixType.APPLICATION_ARG;      app_prefix.count++;      continue;    }    for (    Prefix p : prefixes) {      String v=p.value;      if (!matches(arg,v)) {        continue;      }      args[i]=arg.substring(length(v));      if (DEBUG) {        VM.sysWrite("length(v) = ");        VM.sysWrite(length(v));        VM.sysWrite("; v = \"");        VM.sysWrite(v);        VM.sysWriteln("\"");        VM.sysWrite("args[");        VM.sysWrite(i);        VM.sysWrite("] = \"");        VM.sysWrite(args[i]);        VM.sysWrite("\"; arg = \"");        VM.sysWrite(arg);        VM.sysWriteln("\"");      }      arg_types[i]=p.type;      p=findPrefix(p.type);      p.count++;      if (v.endsWith(" ")) {        if (++i >= numArgs) {          VM.sysWriteln("vm: ",v,"needs an argument");          VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);        }        args[i - 1]+=argRdr.getArg(i);        args[i]=null;      }      if (p == app_prefix) {        app_name_pos=i;      }      break;    }  }  if (app_name_pos == -1) {    app_name_pos=numArgs;  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(MetaDataRegressionTest.class);}  }
class C{  public void writeLEInt(int i) throws IOException {  out.write(i & 0xFF);  out.write((i >>> 8) & 0xFF);  out.write((i >>> 16) & 0xFF);  out.write((i >>> 24) & 0xFF);  written+=4;}  }
class C{  public static boolean isAssignmentCompatible(Class invocationType,Class declarationType){  if (invocationType == null) {    return true;  }  if (declarationType.isAssignableFrom(invocationType)) {    return true;  }  if (declarationType.isPrimitive()) {    Class parameterWrapperClazz=getBoxedType(declarationType);    if (parameterWrapperClazz != null) {      if (parameterWrapperClazz.equals(invocationType)) {        return true;      }    }  }  if (getBoxedType(invocationType) == declarationType) {    return true;  }  Set<Class> widenings=MethodResolver.getWideningConversions().get(declarationType);  if (widenings != null) {    return widenings.contains(invocationType);  }  if (declarationType.isInterface()) {    if (isImplementsInterface(invocationType,declarationType)) {      return true;    }  }  return recursiveIsSuperClass(invocationType,declarationType);}  }
class C{  public int compare(GridCacheVersion one,GridCacheVersion other,boolean ignoreTime){  int topVer=one.topologyVersion();  int otherTopVer=other.topologyVersion();  if (topVer == otherTopVer) {    long globalTime=one.globalTime();    long otherGlobalTime=other.globalTime();    if (globalTime == otherGlobalTime || ignoreTime) {      long locOrder=one.order();      long otherLocOrder=other.order();      if (locOrder == otherLocOrder) {        int nodeOrder=one.nodeOrder();        int otherNodeOrder=other.nodeOrder();        return nodeOrder == otherNodeOrder ? 0 : nodeOrder < otherNodeOrder ? -1 : 1;      } else       return locOrder > otherLocOrder ? 1 : -1;    } else     return globalTime > otherGlobalTime ? 1 : -1;  } else   return topVer > otherTopVer ? 1 : -1;}  }
class C{  public static boolean isConfirmed(final Shell shell,final String title,final String text,final int timer){  final Dialog dialog=new Dialog(shell);  dialog.setTitle(ResourceManager.getLabel(ResourceManager.WARNING));  dialog.getMessageArea().setTitle(title).setText(text).setIcon(Display.getCurrent().getSystemImage(SWT.ICON_WARNING));  dialog.getFooterArea().setTimer(timer).setTimerIndexButton(0);  dialog.setButtonType(OpalDialogType.YES_NO);  return dialog.show() == 0;}  }
class C{  public static boolean isTrue(boolean expression){  return isTrue(expression,"");}  }
class C{  public CustomShortcutSet(@NotNull KeyStroke keyStroke){  this(new KeyboardShortcut(keyStroke,null));}  }
class C{  public CannotInvokeException(IllegalAccessException e){  super("by " + e.toString());  err=e;}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){  if (getDefinitionDescription().isBuiltIn()) {    meta.put(GamlProperties.ATTRIBUTES,getName());  }}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  protected CacheConfiguration metaConfiguration(){  CacheConfiguration cfg=defaultCacheConfiguration();  cfg.setName(META_CACHE_NAME);  cfg.setCacheMode(REPLICATED);  cfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cfg.setAtomicityMode(TRANSACTIONAL);  return cfg;}  }
class C{  public NBTTagStringList add(@Nonnull String str){  parent.appendTag(new NBTTagString(str));  return this;}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return false;}  }
class C{  public RColumn(Properties ctx,String columnName,int displayType){  this(ctx,columnName,displayType,null,0,null);}  }
class C{  public void append(byte[] b,int off,int len){  grow(ref.length + len);  System.arraycopy(b,off,ref.bytes,ref.length,len);  ref.length+=len;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public Matrix4d arcball(double radius,Vector3dc center,double angleX,double angleY){  return arcball(radius,center.x(),center.y(),center.z(),angleX,angleY,this);}  }
class C{  private void find(){  GridField[] findFields=GridField.createFields(Env.getCtx(),m_targetWindowNo,0,m_AD_Tab_ID);  Find find=new Find(Env.getFrame(m_owner),m_targetWindowNo,m_title,m_AD_Tab_ID,m_AD_Table_ID,m_tableName,m_where,findFields,1);  m_query=find.getQuery();  find.dispose();  find=null;  if (m_gt != null && m_gc != null) {    if (m_query != null) {      m_gt.setQuery(m_query);      m_gc.query(false,m_onlycurrentdays,0);    }    m_appsaction.setPressed(m_gt.isQueryActive());  }  if (m_reportEngine != null) {    m_reportEngine.setQuery(m_query);    m_viewer.revalidate();  }}  }
class C{  public static int printDocumentWordWrap(Graphics g,JTextComponent textComponent,Font font,int pageIndex,PageFormat pageFormat,int tabSize){  g.setColor(Color.BLACK);  g.setFont(font != null ? font : textComponent.getFont());  tabSizeInSpaces=tabSize;  fm=g.getFontMetrics();  int fontHeight=fm.getHeight();  final int LINE_LENGTH_IN_PIXELS=(int)pageFormat.getImageableWidth();  final int MAX_LINES_PER_PAGE=(int)pageFormat.getImageableHeight() / fontHeight;  final int STARTING_LINE_NUMBER=MAX_LINES_PER_PAGE * pageIndex;  RPrintTabExpander tabExpander=new RPrintTabExpander();  xOffset=(int)pageFormat.getImageableX();  int y=(int)pageFormat.getImageableY() + fm.getAscent() + 1;  int numPrintedLines=0;  Document doc=textComponent.getDocument();  rootElement=doc.getDefaultRootElement();  numDocLines=rootElement.getElementCount();  currentDocLineNumber=0;  int startingOffset=0;  while (currentDocLineNumber < numDocLines) {    Segment currentLineSeg=new Segment();    Element currentLine=rootElement.getElement(currentDocLineNumber);    int currentLineStart=currentLine.getStartOffset();    int currentLineEnd=currentLine.getEndOffset();    try {      doc.getText(currentLineStart + startingOffset,currentLineEnd - (currentLineStart + startingOffset),currentLineSeg);    } catch (    BadLocationException ble) {      System.err.println("BadLocationException in print (where there shouldn't be one!): " + ble);      return Printable.NO_SUCH_PAGE;    }    currentLineSeg=removeEndingWhitespace(currentLineSeg);    int currentLineLengthInPixels=Utilities.getTabbedTextWidth(currentLineSeg,fm,0,tabExpander,0);    if (currentLineLengthInPixels <= LINE_LENGTH_IN_PIXELS) {      currentDocLineNumber+=1;      startingOffset=0;    } else {      int currentPos=-1;      while (currentLineLengthInPixels > LINE_LENGTH_IN_PIXELS) {        currentLineSeg=removeEndingWhitespace(currentLineSeg);        currentPos=-1;        String currentLineString=currentLineSeg.toString();        for (int i=0; i < breakChars.length; i++) {          int pos=currentLineString.lastIndexOf(breakChars[i]) + 1;          if (pos > 0 && pos > currentPos & pos != currentLineString.length())           currentPos=pos;        }        if (currentPos == -1) {          currentPos=0;          do {            currentPos++;            try {              doc.getText(currentLineStart + startingOffset,currentPos,currentLineSeg);            } catch (            BadLocationException ble) {              System.err.println(ble);              return Printable.NO_SUCH_PAGE;            }            currentLineLengthInPixels=Utilities.getTabbedTextWidth(currentLineSeg,fm,0,tabExpander,0);          } while (currentLineLengthInPixels <= LINE_LENGTH_IN_PIXELS);          currentPos--;        }        try {          doc.getText((currentLineStart + startingOffset),currentPos,currentLineSeg);        } catch (        BadLocationException ble) {          System.err.println("BadLocationException in print (a):");          System.err.println("==> currentLineStart: " + currentLineStart + "; startingOffset: "+ startingOffset+ "; currentPos: "+ currentPos);          System.err.println("==> Range: " + (currentLineStart + startingOffset) + " - "+ (currentLineStart + startingOffset + currentPos));          ble.printStackTrace();          return Printable.NO_SUCH_PAGE;        }        currentLineLengthInPixels=Utilities.getTabbedTextWidth(currentLineSeg,fm,0,tabExpander,0);      }      startingOffset+=currentPos;    }    numPrintedLines++;    if (numPrintedLines > STARTING_LINE_NUMBER) {      Utilities.drawTabbedText(currentLineSeg,xOffset,y,g,tabExpander,0);      y+=fontHeight;      if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)       return Printable.PAGE_EXISTS;    }  }  if (numPrintedLines > STARTING_LINE_NUMBER)   return Printable.PAGE_EXISTS;  return Printable.NO_SUCH_PAGE;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean totalInclusion(final HandleSet small,final HandleSet large){  for (  byte[] handle : small) {    if (!large.has(handle))     return false;  }  return true;}  }
class C{  public void loadTrainIcons(){  for (  Train train : getTrainsByIdList()) {    train.loadTrainIcon();  }}  }
class C{  public long update(final RemoveOp remove,final AddOp add,final UUID uuid) throws Exception {  if (remove == null)   throw new IllegalArgumentException();  if (add == null)   throw new IllegalArgumentException();  remove.prepareForWire();  add.prepareForWire();  final ConnectOptions opts=mgr.newUpdateConnectOptions(sparqlEndpointURL,uuid,tx);  if (remove.format != null) {    opts.method="POST";    opts.addRequestParam("update");    final MultipartEntity entity=new MultipartEntity();    entity.addPart(new FormBodyPart("remove",new ByteArrayBody(remove.data,remove.format.getDefaultMIMEType(),"remove")));    entity.addPart(new FormBodyPart("add",new ByteArrayBody(add.data,add.format.getDefaultMIMEType(),"add")));    opts.entity=entity;  } else {    opts.method="PUT";    opts.addRequestParam("query",remove.query);    final ByteArrayEntity entity=new ByteArrayEntity(add.data);    entity.setContentType(add.format.getDefaultMIMEType());    opts.entity=entity;  }  if (add.context != null) {    opts.addRequestParam("context-uri-insert",toStrings(add.context));  }  if (remove.context != null) {    opts.addRequestParam("context-uri-delete",toStrings(remove.context));  }  opts.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);  JettyResponseListener response=null;  boolean ok=false;  try {    checkResponseCode(response=doConnect(opts));    final MutationResult result=mutationResults(response);    ok=true;    return result.mutationCount;  }  finally {    if (response != null) {      response.abort();      if (!ok) {        try {          cancel(uuid);        } catch (        Exception ex) {          log.warn(ex);        }      }    }  }}  }
class C{  public WampClientBuilder withNrReconnects(int nrReconnects) throws ApplicationError {  if (nrReconnects < 0)   throw new ApplicationError(ApplicationError.INVALID_PARAMETER);  this.nrReconnects=nrReconnects;  return this;}  }
class C{  public final boolean removeStrategy(final PlanStrategy strategy,final Id populationId){  int idx=this.strategies.get(populationId).indexOf(strategy);  if (idx != -1) {    this.strategies.get(populationId).remove(idx);    double weight=this.weights.get(populationId).remove(idx).doubleValue();    this.totalWeights.put(populationId,this.totalWeights.get(populationId) - weight);    return true;  }  return false;}  }
class C{  public static void runOnUiThread(final View view,final Runnable runnable){  if (view != null) {    if (view.getContext() instanceof Activity) {      ((Activity)view.getContext()).runOnUiThread(runnable);    } else {      view.post(runnable);    }  }}  }
class C{  public void testCacheResponse() throws Throwable {  ServerStateMachineContext context=mock(ServerStateMachineContext.class);  ServerSessionContext session=new ServerSessionContext(10,UUID.randomUUID(),mock(Log.class),context,1000);  session.registerResult(2,new ServerStateMachine.Result(2,2,"Hello world!"));  assertEquals(session.getResult(2).result,"Hello world!");  session.clearResults(3);  assertNull(session.getResult(2));}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  public void saveToGeode(String regionPath,GeodeConnectionConf connConf,Properties opConf){  rddf.saveToGeode(regionPath,connConf,propertiesToScalaMap(opConf));}  }
class C{  public static ResultSet polar2CartesianSet(Connection conn,String query) throws SQLException {  SimpleResultSet result=new SimpleResultSet();  result.addColumn("R",Types.DOUBLE,0,0);  result.addColumn("A",Types.DOUBLE,0,0);  result.addColumn("X",Types.DOUBLE,0,0);  result.addColumn("Y",Types.DOUBLE,0,0);  if (query != null) {    ResultSet rs=conn.createStatement().executeQuery(query);    while (rs.next()) {      double r=rs.getDouble("R");      double alpha=rs.getDouble("A");      double x=r * Math.cos(alpha);      double y=r * Math.sin(alpha);      result.addRow(r,alpha,x,y);    }  }  return result;}  }
class C{  public ScriptInJava(final String scriptname){  super(scriptname);  this.classname="games.stendhal.server.script." + scriptname.substring(0,scriptname.length() - 6);}  }
class C{  @Override public SnmpMibHandler addMib(SnmpMibAgent mib) throws IllegalArgumentException {  if (mib == null) {    throw new IllegalArgumentException();  }  if (!mibs.contains(mib))   mibs.addElement(mib);  root.register(mib);  return this;}  }
class C{  public float[] filter(float[] samples){  float[] filtered=new float[samples.length * 2];  float accumulator;  for (int y=0; y < samples.length; y++) {    insert(samples[y]);    accumulator=0.0f;    for (int x=0; x < mCoefficients.length; x++) {      accumulator+=mCoefficients[x] * mBuffer[mIndexMap[mBufferPointer][x]];    }    int index=y * 2;    filtered[index]=mBuffer[mIndexMap[mBufferPointer][mGroupDelayedInphaseTapPointIndex]];    filtered[index + 1]=accumulator;  }  return filtered;}  }
class C{  protected void parseLookupTable(InStream in) throws IOException {  String[] strings=new String[in.readUI16()];  for (int i=0; i < strings.length; i++) {    strings[i]=in.readString();  }  actions.lookupTable(strings);}  }
class C{  public int execute(String sql) throws SQLException {  if (logger.isDebugEnabled())   logger.debug("Executing SQL: " + sql);  return statement.executeUpdate(sql);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.434 -0500",hash_original_method="26760966C3F3EED5AADC7592B64BFAAE",hash_generated_method="3612599B770562FC03F7BB50A809B2D4") public boolean containsKey(String key){  return mValues.containsKey(key);}  }
class C{  public int size(){  return size;}  }
class C{  protected DoubleLiteralImpl(){  super();}  }
class C{  public ZyProximityNodeRealizer(final ZyLabelContent content){  Preconditions.checkNotNull(content,"Error: Node content can't be null.");  m_content=content;  setShapeType(ShapeNodeRealizer.ELLIPSE);  setLineType(LineType.LINE_2);  setDropShadowOffsetX((byte)0);  setDropShadowOffsetY((byte)0);  setFillColor(m_backGroundColor);  setSloppySelectionColor(m_backGroundColor);  final Rectangle2D bounds=getNodeContent().getBounds();  final double diameter=Math.max(bounds.getWidth(),bounds.getHeight());  setSize(diameter,diameter);}  }
class C{  public static String toString(Reader reader) throws IOException {  return toString(reader,-1);}  }
class C{  @Override public void init(IWorkbench workbench,IStructuredSelection selection){  try {    if (finishedRiskAnalysis == null) {      StartNewRiskAnalysis command=new StartNewRiskAnalysis(cnaElement);      command=ServiceFactory.lookupCommandService().executeCommand(command);      finishedRiskAnalysis=command.getFinishedRiskAnalysis();      finishedRiskLists=command.getFinishedRiskLists();    } else {      finishedRiskLists=FinishedRiskAnalysisListsHome.getInstance().loadById(finishedRiskAnalysis.getDbId());    }  } catch (  CommandException e) {    ExceptionUtil.log(e,Messages.RiskAnalysisWizard_1);  }  loadAllGefaehrdungen();  loadAllMassnahmen();  loadAssociatedGefaehrdungen();  loadOwnGefaehrdungen();  addOwnGefaehrdungen();  addRisikoMassnahmenUmsetzungen(loadRisikomassnahmen());}  }
class C{  public static double logGamma(double x){  final double c0=9.1893853320467274e-01, c1=8.3333333333333333e-02, c2=-2.7777777777777777e-03, c3=7.9365079365079365e-04, c4=-5.9523809523809524e-04, c5=8.4175084175084175e-04, c6=-1.9175269175269175e-03;  double g, r, z;  if (x <= 0.0)   return -999;  for (z=1.0; x < 11.0; x++)   z*=x;  r=1.0 / (x * x);  g=c1 + r * (c2 + r * (c3 + r * (c4 + r * (c5 + r + c6))));  g=(x - 0.5) * Math.log(x) - x + c0 + g / x;  if (z == 1.0)   return g;  return g - Math.log(z);}  }
class C{  public void denyTypesByWildcard(final String... patterns){  denyPermission(new WildcardTypePermission(patterns));}  }
class C{  public boolean execute(IGameState gameState){  if (!isValid(gameState)) {    return false;  }  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  board.set(col,row,player.getMark());  return true;}  }
class C{  public ObjectStreamField(String name,Class<?> cl,boolean unshared){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=(cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);  this.unshared=unshared;}  }
class C{  public boolean isValid(){  return !isTop() && !isBottom();}  }
class C{  public static Date date(final String immCode){  return date(immCode,new Date());}  }
class C{  public synchronized void showBayesianNetwork(DialogueState state){  currentState=state;  if (!isUpdating) {    new Thread(null).start();  }}  }
class C{  public static void selectFile(final Values commonValues,final GUISearchWindow searchFrame,final GUIFactory currentGUI,final PdfDecoderInt decode_pdf,final PropertiesFile properties,final GUIThumbnailPanel thumbnails){  if (searchFrame != null) {    searchFrame.removeSearchWindow(false);  }  final JFileChooser chooser=new JFileChooser(commonValues.getInputDir());  chooser.setName("chooser");  if (commonValues.getSelectedFile() != null) {    chooser.setSelectedFile(new File(commonValues.getSelectedFile()));  }  chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);  final String[] pdf={"pdf"};  final String[] fdf={"fdf"};  final String[] png={"png","tif","tiff","jpg","jpeg","jp2","psd"};  chooser.addChoosableFileFilter(new FileFilterer(png,"Images (Tiff, Jpeg,Png)"));  chooser.addChoosableFileFilter(new FileFilterer(fdf,"fdf (*.fdf)"));  chooser.addChoosableFileFilter(new FileFilterer(pdf,"Pdf (*.pdf)"));  final int state=chooser.showOpenDialog((Component)currentGUI.getFrame());  final File file=chooser.getSelectedFile();  if (file != null && state == JFileChooser.APPROVE_OPTION) {    final String ext=file.getName().toLowerCase();    final boolean isValid=((ext.endsWith(".pdf")) || (ext.endsWith(".fdf")) || (ext.endsWith(".tif"))|| (ext.endsWith(".tiff"))|| (ext.endsWith(".png"))|| (ext.endsWith(".jpg"))|| (ext.endsWith(".jpeg"))|| (ext.endsWith(".jp2")));    if (isValid) {      try {        commonValues.setInputDir(chooser.getCurrentDirectory().getCanonicalPath());        open(file.getAbsolutePath(),commonValues,searchFrame,currentGUI,decode_pdf,properties,thumbnails);      } catch (      final IOException e1) {        e1.printStackTrace();      }    } else {      decode_pdf.repaint();      currentGUI.showMessageDialog(Messages.getMessage("PdfViewer.NotValidPdfWarning"));    }  } else {    decode_pdf.repaint();    currentGUI.showMessageDialog(Messages.getMessage("PdfViewerMessage.NoSelection"));  }}  }
class C{  public String toString(){  String s=super.toString() + extensionLabel + ": "+ ((crlNumber == null) ? "" : Debug.toHexString(crlNumber))+ "\n";  return (s);}  }
class C{  @SuppressWarnings("unchecked") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,0,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public font addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override protected EClass eStaticClass(){  return BasePackage.Literals.NAMED_ELEMENT;}  }
class C{  private void initialize(List<Integer> fieldIds){  ids=new int[fieldIds.size()];  for (int i=0; i < fieldIds.size(); i++)   ids[i]=fieldIds.get(i);  names=new String[fieldIds.size()];  if (fieldIds.size() <= 4) {    Iterator<Integer> iter=fieldIds.iterator();    id0=iter.hasNext() ? iter.next() : 0;    id1=iter.hasNext() ? iter.next() : 0;    id2=iter.hasNext() ? iter.next() : 0;    id3=iter.hasNext() ? iter.next() : 0;  } else {    id0=id1=id2=id3=0;    initializeMap(ids);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.EXTRA_CODE___EXTRA_CODE_1:    return EXTRA_CODE_1_EDEFAULT == null ? extraCode_1 != null : !EXTRA_CODE_1_EDEFAULT.equals(extraCode_1);}return super.eIsSet(featureID);}  }
class C{  public int hashCode(){  if (getTable() != null) {    return (getTable().getSqlName() + "#" + getSqlName()).hashCode();  } else {    return (getSqlName()).hashCode();  }}  }
class C{  @Override public void onSessionClosed(GridNioSession ses) throws IgniteCheckedException {  head.onSessionClosed(ses);}  }
class C{  public static void startGC(){  gcCount++;  if (!gatheringStats)   return;  if (phase < MAX_PHASES - 1) {    for (int c=0; c < counters; c++) {      counter[c].phaseChange(phase);    }    phase++;  } else   if (!exceededPhaseLimit) {    Log.writeln("Warning: number of GC phases exceeds MAX_PHASES");    exceededPhaseLimit=true;  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == FunctionOrFieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_NAME:      return N4JSPackage.METHOD_DECLARATION___GET_NAME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == GenericDeclaration.class) {switch (baseOperationID) {default :  return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:return N4JSPackage.METHOD_DECLARATION___GET_DECLARED_TYPE_REF;default :return -1;}}if (baseClass == TypedElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.METHOD_DECLARATION___GET_NAME;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:return N4JSPackage.METHOD_DECLARATION___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.METHOD_DECLARATION___IS_VALID_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean addPoint(Vec3D p){  if (containsPoint(p)) {    if (halfSize <= minNodeSize) {      if (points == null) {        points=new ArrayList<Vec3D>();      }      points.add(p);      return true;    } else {      Vec3D plocal=p.sub(offset);      if (children == null) {        children=new PointOctree[8];      }      int octant=getOctantID(plocal);      if (children[octant] == null) {        Vec3D off=offset.add(new Vec3D((octant & 1) != 0 ? halfSize : 0,(octant & 2) != 0 ? halfSize : 0,(octant & 4) != 0 ? halfSize : 0));        children[octant]=new PointOctree(this,off,halfSize * 0.5f);        numChildren++;      }      return children[octant].addPoint(p);    }  }  return false;}  }
class C{  public Task<Void> linkWithInBackground(String authType,Map<String,String> authData){  if (authType == null) {    throw new IllegalArgumentException("Invalid authType: " + null);  }  return linkWithAsync(authType,authData,getSessionToken());}  }
class C{  public void replace(int index,int length,View[] elems){  super.replace(index,length,elems);  int nInserted=(elems != null) ? elems.length : 0;  majorOffsets=updateLayoutArray(majorOffsets,index,nInserted);  majorSpans=updateLayoutArray(majorSpans,index,nInserted);  majorReqValid=false;  majorAllocValid=false;  minorOffsets=updateLayoutArray(minorOffsets,index,nInserted);  minorSpans=updateLayoutArray(minorSpans,index,nInserted);  minorReqValid=false;  minorAllocValid=false;}  }
class C{  public static void v(String msg,Throwable thr){  if (DEBUG)   android.util.Log.v(TAG,buildMessage(msg),thr);}  }
class C{  public static List<String> createWorkingSet(Generator generator,int size){  List<String> workingSet=newArrayListWithCapacity(size);  for (int i=0; i < size; i++) {    workingSet.add(generator.nextString());  }  return workingSet;}  }
class C{  public void startUsingDistance(float deltaAngle){  if (deltaAngle == 0)   return;  startCommon();  mLastFlingAngle=0;synchronized (this) {    mRotator.startRotate(0.0f,-deltaAngle,mAnimationDuration);  }  post(this);}  }
class C{  public void debugWriteFile(){  debugWriteFile(".");}  }
class C{  public void startDownload(Download download,UpdatesResponse.UpdateApk updateApk,GetAppMeta.Obb obb,List<String> permissions){  ArrayList<DownloadModel> filesToDownload=new ArrayList<>();  if (obb != null) {    if (obb.main != null) {      DownloadModel mainObbDownload=new DownloadModel(obb.main.path,OBB_DESTINATION + download.getPackageName() + "/"+ obb.main.filename,obb.main.md5sum,obb.main.filesize.longValue());      filesToDownload.add(mainObbDownload);    }    if (obb.patch != null) {      DownloadModel patchObbDownload=new DownloadModel(obb.patch.path,OBB_DESTINATION + download.getPackageName() + "/"+ obb.patch.filename,obb.patch.md5sum,obb.patch.filesize.longValue());      filesToDownload.add(patchObbDownload);    }  }  String path=Aptoide.getConfiguration().getPathCacheApks();  DownloadModel downloadModel=new DownloadModel(updateApk.apk.path,path + download.getMd5() + ".apk",download.getMd5(),download.getSize());  downloadModel.setAutoExecute(true);  downloadModel.setFallbackUrl(updateApk.apk.path_alt);  filesToDownload.add(downloadModel);  FinishedApk apk=new FinishedApk(download.getName(),download.getPackageName(),download.getVersion(),download.getMd5().hashCode(),download.getIcon(),path + download.getMd5() + ".apk",permissions);  apk.setId(updateApk.id.longValue());  download(download.getId(),download,apk,filesToDownload);}  }
class C{  public static boolean isExtensionVersionBlacklisted(String extensionId,VersionNumber version){  if (PLUGIN_BLACKLIST.containsKey(extensionId)) {    Pair<VersionNumber,VersionNumber> versionRange=PLUGIN_BLACKLIST.get(extensionId);    if (versionRange != null && (versionRange.getSecond() != null && version.isAbove(versionRange.getSecond()) || versionRange.getFirst() != null && !version.isAtLeast(versionRange.getFirst()))) {      return false;    }    return true;  }  return false;}  }
class C{  public double valueAt(int index){  return mValues[index];}  }
class C{  public void testLinkSetsOut(){  doLoadData();  final ValueFactory vf=om.getValueFactory();  final URI workeruri=vf.createURI("gpo:#123");  IGPO workergpo=om.getGPO(workeruri);  final URI worksFor=vf.createURI("attr:/employee#worksFor");  ILinkSet ls=workergpo.getLinksOut(worksFor);  assertTrue(ls.getOwner() == workergpo);  assertFalse(ls.isLinkSetIn());  assertTrue(ls.getLinkProperty().equals(worksFor));  checkLinkSet(ls,2);  final URI gpo678uri=vf.createURI("gpo:#678");  workergpo.addValue(worksFor,gpo678uri);  checkLinkSet(ls,3);  workergpo.removeValue(worksFor,gpo678uri);  checkLinkSet(ls,2);  workergpo.removeValues(worksFor);  checkLinkSet(ls,0);}  }
class C{  protected void processVmMigrate(SimEvent ev,boolean ack){  Object tmp=ev.getData();  if (!(tmp instanceof Map<?,?>)) {    throw new ClassCastException("The data object must be Map<String, Object>");  }  @SuppressWarnings("unchecked") Map<String,Object> migrate=(HashMap<String,Object>)tmp;  ContainerVm containerVm=(ContainerVm)migrate.get("vm");  ContainerHost host=(ContainerHost)migrate.get("host");  getVmAllocationPolicy().deallocateHostForVm(containerVm);  host.removeMigratingInContainerVm(containerVm);  boolean result=getVmAllocationPolicy().allocateHostForVm(containerVm,host);  if (!result) {    Log.printLine("[Datacenter.processVmMigrate] VM allocation to the destination host failed");    System.exit(0);  }  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=containerVm.getId();    if (result) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    sendNow(ev.getSource(),CloudSimTags.VM_CREATE_ACK,data);  }  Log.formatLine("%.2f: Migration of VM #%d to Host #%d is completed",CloudSim.clock(),containerVm.getId(),host.getId());  containerVm.setInMigration(false);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.OBJECT_LITERAL__DEFINED_TYPE:    if (resolve)     return getDefinedType();  return basicGetDefinedType();case N4JSPackage.OBJECT_LITERAL__PROPERTY_ASSIGNMENTS:return getPropertyAssignments();}return super.eGet(featureID,resolve,coreType);}  }
class C{  char[] trimAspectBits(){  try {    return Arrays.copyOf(aspectBits,bitNum);  } catch (  Exception ex) {    log.error("failed to read and copy aspectBits");    return null;  }}  }
class C{  public void registerAndLogin(final String username,final String email,final String password,final HashMap<String,Object> profile,final ResultListener listener){  if (username == null && email == null) {    throw new RuntimeException("You must provide either a username or an email address");  }  final Map<String,Object> accountData=new HashMap<String,Object>();  if (username != null) {    accountData.put("username",username);  }  if (email != null) {    accountData.put("email",email);  }  accountData.put("password",password);  if (profile != null) {    accountData.put("profile",profile);  }  call("createUser",new Object[]{accountData},listener);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__COMMENT_1:    getComment_1().clear();  getComment_1().addAll((Collection<? extends Comment_>)newValue);return;case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__CHANGE_TYPE_1:setChangeType_1((String)newValue);return;case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1__STATE_1:getState_1().clear();getState_1().addAll((Collection<? extends State_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testStringLists2() throws Exception {  TungstenProperties tp=new TungstenProperties();  List<String> list=new ArrayList<String>();  list.add("a");  list.add("b");  list.add("c");  tp.setStringList("mykey",list);  List<String> list2=tp.getStringList("mykey");  Assert.assertEquals("populated list size",3,list2.size());  Assert.assertEquals(list2.get(0),"a");  Assert.assertEquals(list2.get(1),"b");  Assert.assertEquals(list2.get(2),"c");  List<String> empty=new ArrayList<String>();  tp.setStringList("empty",empty);  List<String> empty2=new ArrayList<String>();  Assert.assertEquals("empty list size",0,empty2.size());}  }
class C{  public static List<POOperationRecord> toPOOperationRecords(List<OperationRecord> operationRecords,LocalizerFacade facade){  List<POOperationRecord> poOperationRecords=new ArrayList<POOperationRecord>();  for (  OperationRecord operationRecord : operationRecords) {    poOperationRecords.add(toPOOperationRecord(operationRecord,facade));  }  return poOperationRecords;}  }
class C{  public Matrix4x3d fma(Matrix4x3fc other,double otherFactor){  return fma(other,otherFactor,this);}  }
class C{  private Document transformScraper(final DigestURL location,final String mimeType,final String charSet,final ContentScraper scraper){  final String[] sections=new String[scraper.getHeadlines(1).length + scraper.getHeadlines(2).length + scraper.getHeadlines(3).length+ scraper.getHeadlines(4).length+ scraper.getHeadlines(5).length+ scraper.getHeadlines(6).length];  int p=0;  for (int i=1; i <= 6; i++) {    for (    final String headline : scraper.getHeadlines(i)) {      sections[p++]=headline;    }  }  LinkedHashMap<DigestURL,ImageEntry> noDoubleImages=new LinkedHashMap<>();  for (  ImageEntry ie : scraper.getImages())   noDoubleImages.put(ie.url(),ie);  final Document ppd=new Document(location,mimeType,charSet,this,scraper.getContentLanguages(),scraper.getKeywords(),scraper.getTitles(),scraper.getAuthor(),scraper.getPublisher(),sections,scraper.getDescriptions(),scraper.getLon(),scraper.getLat(),scraper.getText(),scraper.getAnchors(),scraper.getRSS(),noDoubleImages,scraper.indexingDenied(),scraper.getDate());  ppd.setIcons(scraper.getIcons());  return ppd;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMSubImageElement(prefix,(AbstractDocument)doc);}  }
class C{  public void reuse(Vector3i start){  checkState(this.detached,"Cannot reuse while still in use");  this.start=checkNotNull(start,"start");  this.end=this.start.add(this.size).sub(Vector3i.ONE);  Arrays.fill(this.biomes,(byte)0);  this.detached=false;}  }
class C{  static String normalizeUri(String s){  int n=s.length();  boolean colonsIrrelevant=false;  for (int i=0; i < n; ++i) {    char ch=s.charAt(i);switch (ch) {case '/':case '#':case '?':case ':':      colonsIrrelevant=true;    break;case '(':case ')':case '{':case '}':  return normalizeUriFrom(s,i,colonsIrrelevant);case '\u0589':case '\u05c3':case '\u2236':case '\uff1a':if (!colonsIrrelevant) {  return normalizeUriFrom(s,i,false);}break;default :if (ch <= 0x20) {return normalizeUriFrom(s,i,false);}break;}}return s;}  }
class C{  public boolean isLowered3DText(){  return ((textDecoration & TEXT_DECORATION_3D_LOWERED) != 0);}  }
class C{  public static XYDataset extractColumnFromHeatMapDataset(HeatMapDataset dataset,int column,Comparable seriesName){  XYSeries series=new XYSeries(seriesName);  int rows=dataset.getYSampleCount();  for (int r=0; r < rows; r++) {    series.add(dataset.getYValue(r),dataset.getZValue(column,r));  }  XYSeriesCollection result=new XYSeriesCollection(series);  return result;}  }
class C{  public String process(){  MIssueProject.get(this);  MIssueSystem.get(this);  MIssueUser.get(this);  return createAnswer();}  }
class C{  public static void hideSoftInPut(View view,Context context){  InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(view.getWindowToken(),0);}  }
class C{  public Context(HashSet<ContextualDatum> sample,boolean densityPruning,boolean dependencyPruning,double alpha){  this.sample=sample;  this.globalSample=sample;  this.densityPruning=densityPruning;  this.dependencyPruning=dependencyPruning;  this.alpha=alpha;}  }
class C{  protected boolean hasValidUserInContext(){  if ((sc != null) && (sc.getUserPrincipal() instanceof StorageOSUser)) {    return true;  } else {    return false;  }}  }
class C{  private boolean updateImages(boolean forceImage){  ResourceManager parentResourceManager=JFaceResources.getResources();  if (widget instanceof ToolItem) {    if (USE_COLOR_ICONS) {      ImageDescriptor image=action.getHoverImageDescriptor();      if (image == null) {        image=action.getImageDescriptor();      }      ImageDescriptor disabledImage=action.getDisabledImageDescriptor();      if (image == null && forceImage) {        image=ImageDescriptor.getMissingImageDescriptor();      }      LocalResourceManager localManager=new LocalResourceManager(parentResourceManager);      ((ToolItem)widget).setDisabledImage(disabledImage == null ? null : localManager.createImageWithDefault(disabledImage));      ((ToolItem)widget).setImage(image == null ? null : localManager.createImageWithDefault(image));      disposeOldImages();      imageManager=localManager;      return image != null;    }    ImageDescriptor image=action.getImageDescriptor();    ImageDescriptor hoverImage=action.getHoverImageDescriptor();    ImageDescriptor disabledImage=action.getDisabledImageDescriptor();    if (image == null && hoverImage != null) {      image=ImageDescriptor.createWithFlags(action.getHoverImageDescriptor(),SWT.IMAGE_GRAY);    } else {      if (hoverImage == null && image != null) {        hoverImage=image;        image=ImageDescriptor.createWithFlags(action.getImageDescriptor(),SWT.IMAGE_GRAY);      }    }    if (hoverImage == null && image == null && forceImage) {      image=ImageDescriptor.getMissingImageDescriptor();    }    LocalResourceManager localManager=new LocalResourceManager(parentResourceManager);    ((ToolItem)widget).setDisabledImage(disabledImage == null ? null : localManager.createImageWithDefault(disabledImage));    ((ToolItem)widget).setHotImage(hoverImage == null ? null : localManager.createImageWithDefault(hoverImage));    ((ToolItem)widget).setImage(image == null ? null : localManager.createImageWithDefault(image));    disposeOldImages();    imageManager=localManager;    return image != null;  } else   if (widget instanceof Item || widget instanceof Button) {    ImageDescriptor image=action.getHoverImageDescriptor();    if (image == null) {      image=action.getImageDescriptor();    }    if (image == null && forceImage) {      image=ImageDescriptor.getMissingImageDescriptor();    }    LocalResourceManager localManager=new LocalResourceManager(parentResourceManager);    if (widget instanceof Item) {      ((Item)widget).setImage(image == null ? null : localManager.createImageWithDefault(image));    } else     if (widget instanceof Button) {      ((Button)widget).setImage(image == null ? null : localManager.createImageWithDefault(image));    }    disposeOldImages();    imageManager=localManager;    return image != null;  }  return false;}  }
class C{  public String serialize(PageContext pc,Object object,boolean serializeQueryByColumns) throws ConverterException {  StringBuilder sb=new StringBuilder();  _serialize(pc,null,object,sb,serializeQueryByColumns,new HashSet<Object>());  return sb.toString();}  }
class C{  public boolean updateReverseLine(int AD_Table_ID,int Record_ID,int Line_ID,BigDecimal quantity,BigDecimal multiplier){  boolean success=false;  String sql="SELECT * " + "FROM Fact_Acct " + "WHERE C_AcctSchema_ID=? AND AD_Table_ID=? AND Record_ID=?"+ " AND Line_ID=? AND Account_ID=? AND Qty=?";  if (MMovement.Table_ID == AD_Table_ID)   sql+=" AND M_Locator_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getC_AcctSchema_ID());    pstmt.setInt(2,AD_Table_ID);    pstmt.setInt(3,Record_ID);    pstmt.setInt(4,Line_ID);    pstmt.setInt(5,m_acct.getAccount_ID());    pstmt.setBigDecimal(6,quantity.negate());    if (MMovement.Table_ID == AD_Table_ID)     pstmt.setInt(6,getM_Locator_ID());    rs=pstmt.executeQuery();    if (rs.next()) {      MFactAcct fact=new MFactAcct(getCtx(),rs,get_TrxName());      BigDecimal dr=fact.getAmtAcctDr();      BigDecimal cr=fact.getAmtAcctCr();      setAmtAcct(fact.getC_Currency_ID(),cr.multiply(multiplier),dr.multiply(multiplier));      BigDecimal drSourceAmt=fact.getAmtSourceDr();      BigDecimal crSourceAmt=fact.getAmtSourceCr();      setAmtSource(fact.getC_Currency_ID(),crSourceAmt.multiply(multiplier),drSourceAmt.multiply(multiplier));      success=true;      log.fine(new StringBuffer("(Table=").append(AD_Table_ID).append(",Record_ID=").append(Record_ID).append(",Line=").append(Record_ID).append(", Account=").append(m_acct).append(",dr=").append(dr).append(",cr=").append(cr).append(") - DR=").append(getAmtSourceDr()).append("|").append(getAmtAcctDr()).append(", CR=").append(getAmtSourceCr()).append("|").append(getAmtAcctCr()).toString());      setAD_OrgTrx_ID(fact.getAD_OrgTrx_ID());      setC_Project_ID(fact.getC_Project_ID());      setC_ProjectPhase_ID(fact.getC_ProjectPhase_ID());      setC_ProjectTask_ID(fact.getC_ProjectTask_ID());      setC_Activity_ID(fact.getC_Activity_ID());      setC_Campaign_ID(fact.getC_Campaign_ID());      setC_SalesRegion_ID(fact.getC_SalesRegion_ID());      setC_LocFrom_ID(fact.getC_LocFrom_ID());      setC_LocTo_ID(fact.getC_LocTo_ID());      setM_Product_ID(fact.getM_Product_ID());      setM_Locator_ID(fact.getM_Locator_ID());      setUser1_ID(fact.getUser1_ID());      setUser2_ID(fact.getUser2_ID());      setC_UOM_ID(fact.getC_UOM_ID());      setC_Tax_ID(fact.getC_Tax_ID());      setAD_Org_ID(fact.getAD_Org_ID());    } else     log.warning(new StringBuffer("Not Found (try later) ").append(",C_AcctSchema_ID=").append(getC_AcctSchema_ID()).append(", AD_Table_ID=").append(AD_Table_ID).append(",Record_ID=").append(Record_ID).append(",Line_ID=").append(Line_ID).append(", Account_ID=").append(m_acct.getAccount_ID()).toString());  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return success;}  }
class C{  public void validateSelectedFiles(VirtualFile[] files) throws Exception {}  }
class C{  public NATURAL_CROSS_JOIN NATURAL_CROSS_JOIN(String tableToJoin){  return new NATURAL_CROSS_JOIN(this,tableToJoin);}  }
class C{  private MarkerMoveResultWithCircle onMarkerMoved(Marker marker){  GeofenceCircle.MarkerMoveResult result=GeofenceCircle.MarkerMoveResult.none;  GeofenceCircle affectedDraggableCircle=null;  ArrayList<GeofenceCircle> allMarkers=new ArrayList<>();  allMarkers.addAll(areas);  allMarkers.addAll(savedPoints);  allMarkers.addAll(savedDataPoints);  for (int i=0; i < allMarkers.size(); i++) {    GeofenceCircle draggableCircle=allMarkers.get(i);    result=draggableCircle.onMarkerMoved(marker);    if (result != GeofenceCircle.MarkerMoveResult.none) {      affectedDraggableCircle=draggableCircle;      break;    }  }  return new MarkerMoveResultWithCircle(result,affectedDraggableCircle);}  }
class C{  public void flush() throws IOException {  if (printWriter != null) {    printWriter.flush();  }  if (gzipOutputStream != null) {    gzipOutputStream.flush();  }}  }
class C{  private void dragShift(double y){  double height=this.inputType.getHeight();  this.anchor.setLayoutY(y);  this.anchor.setOpacity(1 - (y / (height)));  this.anchor.setVisible(y < height);  this.curryArrow.setManaged(y > height * 1 || this == BinOpApplyBlock.this.leftInput);  this.curryArrow.setVisible(y > height * 1);  BinOpApplyBlock.this.dragShiftOuput(y - height * 1.5);}  }
class C{  public void informational(Stage stage,String message,String details){  messageLabel.setText(message);  detailsLabel.setText(details);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  public static OFGroup createL2Rewrite(U32 id){  return OFGroup.of(0 | (id.getRaw() & 0x0FffFFff) | (OFDPAGroupType.L2_REWRITE << 28));}  }
class C{  private Rectangle2D.Double appendParagraph(@Nullable Path2D.Double shape,AttributedCharacterIterator styledText,float verticalPos,float maxVerticalPos,float leftMargin,float rightMargin,float[] tabStops,int tabCount){  Rectangle2D.Double paragraphBounds=new Rectangle2D.Double(leftMargin,verticalPos,0,0);  int[] tabLocations=new int[tabCount + 1];  int i=0;  for (char c=styledText.first(); c != styledText.DONE; c=styledText.next()) {    if (c == '\t') {      tabLocations[i++]=styledText.getIndex();    }  }  tabLocations[tabCount]=styledText.getEndIndex() - 1;  LineBreakMeasurer measurer=new LineBreakMeasurer(styledText,getFontRenderContext());  int currentTab=0;  while (measurer.getPosition() < styledText.getEndIndex()) {    boolean lineContainsText=false;    boolean lineComplete=false;    float maxAscent=0, maxDescent=0;    float horizontalPos=leftMargin;    LinkedList<TextLayout> layouts=new LinkedList<TextLayout>();    LinkedList<Float> penPositions=new LinkedList<Float>();    while (!lineComplete) {      float wrappingWidth=rightMargin - horizontalPos;      TextLayout layout=null;      layout=measurer.nextLayout(wrappingWidth,tabLocations[currentTab] + 1,lineContainsText);      if (layout != null) {        layouts.add(layout);        penPositions.add(horizontalPos);        horizontalPos+=layout.getAdvance();        maxAscent=Math.max(maxAscent,layout.getAscent());        maxDescent=Math.max(maxDescent,layout.getDescent() + layout.getLeading());      } else {        lineComplete=true;      }      lineContainsText=true;      if (measurer.getPosition() == tabLocations[currentTab] + 1) {        currentTab++;      }      if (measurer.getPosition() == styledText.getEndIndex()) {        lineComplete=true;      } else       if (tabStops.length == 0 || horizontalPos >= tabStops[tabStops.length - 1]) {        lineComplete=true;      }      if (!lineComplete) {        int j;        for (j=0; horizontalPos >= tabStops[j]; j++) {        }        horizontalPos=tabStops[j];      }    }    verticalPos+=maxAscent;    if (verticalPos > maxVerticalPos) {      break;    }    Iterator<TextLayout> layoutEnum=layouts.iterator();    Iterator<Float> positionEnum=penPositions.iterator();    while (layoutEnum.hasNext()) {      TextLayout nextLayout=layoutEnum.next();      float nextPosition=positionEnum.next();      AffineTransform tx=new AffineTransform();      tx.translate(nextPosition,verticalPos);      if (shape != null) {        Shape outline=nextLayout.getOutline(tx);        shape.append(outline,false);      }      Rectangle2D layoutBounds=nextLayout.getBounds();      paragraphBounds.add(new Rectangle2D.Double(layoutBounds.getX() + nextPosition,layoutBounds.getY() + verticalPos,layoutBounds.getWidth(),layoutBounds.getHeight()));    }    verticalPos+=maxDescent;  }  return paragraphBounds;}  }
class C{  protected static byte[] readAll(InputStream in) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  byte[] buf=new byte[READ_BUFFER_LENGTH];  int read;  while ((read=in.read(buf,0,READ_BUFFER_LENGTH)) != -1) {    outputStream.write(buf,0,read);  }  return outputStream.toByteArray();}  }
class C{  public void testNotPos(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  int aSign=1;  byte rBytes[]={-1,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-27,116};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void registerBlackListBiome(BiomeGenBase biome){  blackListedBiomeIds.add(biome.biomeID);}  }
class C{  private void ping(){}  }
class C{  private void validateBusinessObjectDataAvailabilityRequest(BusinessObjectDataAvailabilityRequest request){  Assert.notNull(request,"A business object data availability request must be specified.");  Assert.hasText(request.getNamespace(),"A namespace must be specified.");  request.setNamespace(request.getNamespace().trim());  Assert.hasText(request.getBusinessObjectDefinitionName(),"A business object definition name must be specified.");  request.setBusinessObjectDefinitionName(request.getBusinessObjectDefinitionName().trim());  Assert.hasText(request.getBusinessObjectFormatUsage(),"A business object format usage must be specified.");  request.setBusinessObjectFormatUsage(request.getBusinessObjectFormatUsage().trim());  Assert.hasText(request.getBusinessObjectFormatFileType(),"A business object format file type must be specified.");  request.setBusinessObjectFormatFileType(request.getBusinessObjectFormatFileType().trim());  businessObjectDataHelper.validatePartitionValueFilters(request.getPartitionValueFilters(),request.getPartitionValueFilter(),true);  Assert.isTrue(request.getStorageNames() == null || request.getStorageName() == null,"A list of storage names and a standalone storage name cannot be both specified.");  if (request.getStorageName() != null) {    Assert.hasText(request.getStorageName(),"A storage name must be specified.");    request.setStorageName(request.getStorageName().trim());  }  if (!CollectionUtils.isEmpty(request.getStorageNames())) {    for (int i=0; i < request.getStorageNames().size(); i++) {      Assert.hasText(request.getStorageNames().get(i),"A storage name must be specified.");      request.getStorageNames().set(i,request.getStorageNames().get(i).trim());    }  }}  }
class C{  public boolean hasPrimary(){  return super.hasAttribute(PRIMARY);}  }
class C{  private void initialize(){  this.setName(NAME);  this.setOrder(205);}  }
class C{  public RawTypeInstance(final int moduleId,final int id,final String name,final Integer commentId,final int typeId,final int sectionId,final long sectionOffset){  this.moduleId=moduleId;  this.id=id;  this.name=Preconditions.checkNotNull(name,"Error: name can not be null");  this.commentId=commentId;  this.typeId=typeId;  this.sectionId=sectionId;  Preconditions.checkArgument(sectionOffset >= 0,"Error: section offset can not be negative.");  this.sectionOffset=sectionOffset;}  }
class C{  public static String[] split(String toSplit,String delimiter){  if (!hasLength(toSplit) || !hasLength(delimiter)) {    return null;  }  int offset=toSplit.indexOf(delimiter);  if (offset < 0) {    return null;  }  String beforeDelimiter=toSplit.substring(0,offset);  String afterDelimiter=toSplit.substring(offset + delimiter.length());  return new String[]{beforeDelimiter,afterDelimiter};}  }
class C{  public Boolean isAtEnvelopeLevel(){  return atEnvelopeLevel;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeNamedItemNS03.class,args);}  }
class C{  public ImplMessageAttachment(String url,String proxyUrl,int size,String id,String name){  this.url=url;  this.proxyUrl=proxyUrl;  this.size=size;  this.id=id;  this.name=name;}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void eliminarPrestamos(String[] prestamosAEliminar) throws PrestamoActionNotAllowedException {  LoggingEvent event=getLogginEvent(ArchivoActions.SERVICIOS_MODULE_BAJA_PRESTAMO);  DataLoggingEvent data=event.getDataLoggingEvent(ArchivoObjects.OBJECT_LISTADO_PRESTAMOS,null);  Locale locale=getServiceClient().getLocale();  this.check(ServiciosSecurityManager.ELIMINAR_PRESTAMO_ACTION);  ConditionChecker.checkOnEliminarPrestamos(prestamosAEliminar,this);  iniciarTransaccion();  for (int i=0; i < prestamosAEliminar.length; i++) {    detallePrestamoDBEntity.deleteDetalles(prestamosAEliminar[i],DetalleDBEntity.TIPO_DETALLE_PRESTAMO);    PrestamoVO prestamo=getPrestamo(prestamosAEliminar[i]);    prestamoDBEntity.deletePrestamo(prestamosAEliminar[i]);    data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_ID,CodigoTransferenciaUtils.getCodigoTransferenciaFromVO(prestamo,getServiceSession()));  }  commit();}  }
class C{  public static String asHex(byte[] bytes,String separator){  StringBuilder sb=new StringBuilder();  for (int i=0; i < bytes.length; i++) {    String code=Integer.toHexString(bytes[i] & 0xFF);    if ((bytes[i] & 0xFF) < 16) {      sb.append('0');    }    sb.append(code);    if (separator != null && i < bytes.length - 1) {      sb.append(separator);    }  }  return sb.toString();}  }
class C{  protected synchronized void notifyIterationNotificationListeners(MultiLabelClassifier classifier,Instances dataset){  IterationNotificationEvent e;  if (m_IterationNotficationListeners == null)   return;  e=new IterationNotificationEvent(this,classifier,dataset);  for (  IterationNotificationListener l : m_IterationNotficationListeners)   l.nextIteration(e);}  }
class C{  public void checkIfAllValuesUsed(){  StringBuilder sb=new StringBuilder("");  for (  KeyValue keyValue : values.values()) {    if (!keyValue.isUsed()) {      sb.append("\"").append(keyValue.getKey()).append("=").append(keyValue.getValue()).append("\" (line ").append(keyValue.getLine()).append(") ");    }  }  String unusedVariables=sb.toString();  if (!unusedVariables.isEmpty()) {    throw new ParserException("Invalid variables: " + unusedVariables);  }}  }
class C{  @SuppressWarnings({"ProhibitedExceptionDeclared","ProhibitedExceptionThrown","CatchGenericClass"}) @Around("execution(@org.apache.ignite.compute.gridify.GridifySetToValue * *(..)) && !cflow(call(* org.apache.ignite.compute.ComputeJob.*(..)))") public Object gridify(ProceedingJoinPoint joinPnt) throws Throwable {  Method mtd=((MethodSignature)joinPnt.getSignature()).getMethod();  GridifySetToValue ann=mtd.getAnnotation(GridifySetToValue.class);  assert ann != null : "Intercepted method does not have gridify annotation.";  String gridName=F.isEmpty(ann.gridName()) ? null : ann.gridName();  if (G.state(gridName) != STARTED)   throw new IgniteCheckedException("Grid is not locally started: " + gridName);  GridifyNodeFilter nodeFilter=null;  if (!ann.nodeFilter().equals(GridifyNodeFilter.class))   nodeFilter=ann.nodeFilter().newInstance();  checkMethodSignature(mtd);  GridifyArgumentBuilder argBuilder=new GridifyArgumentBuilder();  GridifyRangeArgument arg=argBuilder.createTaskArgument(mtd.getDeclaringClass(),mtd.getName(),mtd.getReturnType(),mtd.getParameterTypes(),mtd.getParameterAnnotations(),joinPnt.getArgs(),joinPnt.getTarget());  if (!ann.interceptor().equals(GridifyInterceptor.class)) {    if (!ann.interceptor().newInstance().isGridify(ann,arg))     return joinPnt.proceed();  }  if (ann.threshold() < 0)   return joinPnt.proceed();  if (arg.getInputSize() != UNKNOWN_SIZE && arg.getInputSize() <= ann.threshold())   return joinPnt.proceed();  checkIsSplitToJobsAllowed(arg,ann);  try {    Ignite ignite=G.ignite(gridName);    return execute(mtd,ignite.compute(),joinPnt.getSignature().getDeclaringType(),arg,nodeFilter,ann.threshold(),ann.splitSize(),ann.timeout());  } catch (  Exception e) {    for (    Class<?> ex : ((MethodSignature)joinPnt.getSignature()).getMethod().getExceptionTypes()) {      Throwable cause=e.getCause();      while (cause != null) {        if (ex.isAssignableFrom(cause.getClass()))         throw cause;        cause=cause.getCause();      }      if (ex.isAssignableFrom(e.getClass()))       throw e;    }    throw new GridifyRuntimeException("Undeclared exception thrown: " + e.getMessage(),e);  }}  }
class C{  public static String appTransitionToString(int transition){switch (transition) {case TRANSIT_UNSET:{      return "TRANSIT_UNSET";    }case TRANSIT_NONE:{    return "TRANSIT_NONE";  }case TRANSIT_EXIT_MASK:{  return "TRANSIT_EXIT_MASK";}case TRANSIT_ACTIVITY_OPEN:{return "TRANSIT_ACTIVITY_OPEN";}case TRANSIT_ACTIVITY_CLOSE:{return "TRANSIT_ACTIVITY_CLOSE";}case TRANSIT_TASK_OPEN:{return "TRANSIT_TASK_OPEN";}case TRANSIT_TASK_CLOSE:{return "TRANSIT_TASK_CLOSE";}case TRANSIT_TASK_TO_FRONT:{return "TRANSIT_TASK_TO_FRONT";}case TRANSIT_TASK_TO_BACK:{return "TRANSIT_TASK_TO_BACK";}case TRANSIT_WALLPAPER_CLOSE:{return "TRANSIT_WALLPAPER_CLOSE";}case TRANSIT_WALLPAPER_OPEN:{return "TRANSIT_WALLPAPER_OPEN";}case TRANSIT_WALLPAPER_INTRA_OPEN:{return "TRANSIT_WALLPAPER_INTRA_OPEN";}case TRANSIT_WALLPAPER_INTRA_CLOSE:{return "TRANSIT_WALLPAPER_INTRA_CLOSE";}default :{return "<UNKNOWN>";}}}  }
class C{  public static EPType singleValue(Class singleValueType){  if (singleValueType != null && singleValueType.isArray()) {    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());  }  return new ClassEPType(singleValueType);}  }
class C{  public <T>Collection<T> speciesNew(Collection<?> collection,int size){  if (size < 0) {    throw new IllegalArgumentException("size may not be < 0 but was " + size);  }  if (collection instanceof Proxy || collection instanceof PriorityQueue || collection instanceof PriorityBlockingQueue|| collection instanceof SortedSet) {    return DefaultSpeciesNewStrategy.createNewInstanceForCollectionType(collection);  }  Constructor<?> constructor=ReflectionHelper.getConstructor(collection.getClass(),SIZE_CONSTRUCTOR_TYPES);  if (constructor != null) {    return (Collection<T>)ReflectionHelper.newInstance(constructor,size);  }  return this.speciesNew(collection);}  }
class C{  public static int min(int... numbers){  if (numbers.length < 1) {    throw new IllegalArgumentException();  }  int min=numbers[0];  for (int i=1; i < numbers.length; i++) {    if (numbers[i] < min) {      min=numbers[i];    }  }  return min;}  }
class C{  @Override public void mouseEntered(MouseEvent e){}  }
class C{  public boolean matches(String filename){  if (exts == null)   return true;  return FileUtils.hasExtension(filename,extsArray);}  }
class C{  public Iterator<String> iterator(){  return this.keySet().iterator();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Matrix4x3d mul(Matrix4x3dc right){  return mul(right,this);}  }
class C{  public DataBufferByte(int size){  super(STABLE,TYPE_BYTE,size);  data=new byte[size];  bankdata=new byte[1][];  bankdata[0]=data;}  }
class C{  public UniformDistribution estimate(DoubleMinMax mm){  return new UniformDistribution(Math.max(mm.getMin(),-Double.MAX_VALUE),Math.min(mm.getMax(),Double.MAX_VALUE));}  }
class C{  public int doStartTag() throws JspException {  Properties ctx=JSPEnv.getCtx((HttpServletRequest)pageContext.getRequest());  WebUser wu=getWebUser(ctx);  if (wu == null)   pageContext.getSession().removeAttribute(WebUser.NAME); else   pageContext.getSession().setAttribute(WebUser.NAME,wu);  String serverContext=ctx.getProperty(WebSessionCtx.CTX_SERVER_CONTEXT);  HtmlCode html=null;  if (wu != null && wu.isValid())   html=getWelcomeLink(serverContext,wu); else   html=getLoginLink(serverContext);  JspWriter out=pageContext.getOut();  html.output(out);  return (SKIP_BODY);}  }
class C{  protected void runNioPusher(){  try {    final DMStats stats=this.owner.getConduit().stats;    final long threadStart=stats.startAsyncThread();    try {      stats.incAsyncQueues(1);      stats.incAsyncThreads(1);      try {        int flushId=0;        while (this.asyncQueuingInProgress && this.connected) {          if (SystemFailure.getFailure() != null) {            Socket s=this.socket;            if (s != null) {              try {                s.close();              } catch (              IOException e) {              }            }            SystemFailure.checkFailure();          }          if (this.owner.getConduit().getCancelCriterion().isCancelInProgress()) {            break;          }          flushId++;          long flushStart=stats.startAsyncQueueFlush();          try {            long curQueuedBytes=this.queuedBytes;            if (curQueuedBytes > this.asyncMaxQueueSize) {              logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_QUEUED_BYTES_0_EXCEEDS_MAX_OF_1_ASKING_SLOW_RECEIVER_2_TO_DISCONNECT,new Object[]{curQueuedBytes,this.asyncMaxQueueSize,this.remoteAddr}));              stats.incAsyncQueueSizeExceeded(1);              disconnectSlowReceiver();              return;            }            SocketChannel channel=getSocket().getChannel();            ByteBuffer bb=takeFromOutgoingQueue();            if (bb == null) {              if (logger.isDebugEnabled() && flushId == 1) {                logger.debug("P2P pusher found empty queue");              }              return;            }            nioWriteFully(channel,bb,true,null);            accessed();          }  finally {            stats.endAsyncQueueFlush(flushStart);          }        }      }  finally {synchronized (this.outgoingQueue) {          this.asyncQueuingInProgress=false;          this.outgoingQueue.notifyAll();        }      }    } catch (    InterruptedException ex) {    }catch (    IOException ex) {      final String err=LocalizedStrings.Connection_P2P_PUSHER_IO_EXCEPTION_FOR_0.toLocalizedString(this);      if (!isSocketClosed()) {        if (logger.isDebugEnabled() && !isIgnorableIOException(ex)) {          logger.debug(err,ex);        }      }      try {        requestClose(err + ": " + ex);      } catch (      Exception ignore) {      }    }catch (    CancelException ex) {      final String err=LocalizedStrings.Connection_P2P_PUSHER_0_CAUGHT_CACHECLOSEDEXCEPTION_1.toLocalizedString(new Object[]{this,ex});      logger.debug(err);      try {        requestClose(err);      } catch (      Exception ignore) {      }      return;    }catch (    Exception ex) {      this.owner.getConduit().getCancelCriterion().checkCancelInProgress(ex);      if (!isSocketClosed()) {        logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_P2P_PUSHER_EXCEPTION_0,ex),ex);      }      try {        requestClose(LocalizedStrings.Connection_P2P_PUSHER_EXCEPTION_0.toLocalizedString(ex));      } catch (      Exception ignore) {      }    } finally {      stats.incAsyncQueueSize(-this.queuedBytes);      this.queuedBytes=0;      stats.endAsyncThread(threadStart);      stats.incAsyncThreads(-1);      stats.incAsyncQueues(-1);      if (logger.isDebugEnabled()) {        logger.debug("runNioPusher terminated id={} from {}/{}",conduitIdStr,remoteAddr,remoteAddr);      }    }  }  finally {synchronized (this.nioPusherSync) {      this.pusherThread=null;      this.nioPusherSync.notify();    }  }}  }
class C{  public static void write(int[] xypoints,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POLY_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POLY);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(xypoints.length);  for (int i=0; i < xypoints.length; i++) {    dos.writeInt(xypoints[i]);  }  properties.write(dos);}  }
class C{  public final void increaseWrittenBytes(int nbBytesWritten,long currentTime){  throughputCalculationLock.lock();  try {    writtenBytes+=nbBytesWritten;    lastWriteTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public Key(Row parent){  keyboard=parent.parent;  height=parent.defaultHeight;  width=parent.defaultWidth;  gap=parent.defaultHorizontalGap;  edgeFlags=parent.rowEdgeFlags;}  }
class C{  public void testNoMembers() throws Exception {  ensureNoMembers("NoMembers");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.486 -0500",hash_original_method="E56D032C3762790D2A73EF752F48E81C",hash_generated_method="863F961C11AA7F55CD2263E257F3008A") public int receive(byte[] data) throws IOException {  return receive(data,data.length);}  }
class C{  public static byte toByteValue(Object o,byte defaultValue){  if (o instanceof Byte)   return ((Byte)o).byteValue();  if (o instanceof Character)   return (byte)(((Character)o).charValue()); else   if (o instanceof Boolean)   return (byte)((((Boolean)o).booleanValue()) ? 1 : 0); else   if (o instanceof Number)   return (((Number)o).byteValue()); else   if (o instanceof String)   return (byte)toDoubleValue(o.toString(),defaultValue); else   if (o instanceof ObjectWrap) {    return toByteValue(((ObjectWrap)o).getEmbededObject(toByte(defaultValue)),defaultValue);  }  return defaultValue;}  }
class C{  public static void loadClasses(String directory,boolean recursive,List<String> excludedClasses){  String[] filenames=new String[]{directory};  List<File> classFiles=CompiledClassUtils.findClassFiles("",filenames,recursive);  Map<String,CompiledClass> newClasses=CompiledClassUtils.parseClassFiles(classFiles);  removeExclusions(newClasses,excludedClasses);  classes.putAll(newClasses);}  }
class C{  void pointToCellRounded(int x,int y,int[] result){  pointToCellExact(x + (mCellWidth / 2),y + (mCellHeight / 2),result);}  }
class C{  public void showContent(List<Integer> skipIds){  switchState(CONTENT,null,null,null,null,null,skipIds);}  }
class C{  public Plot scatter(String label,List<? extends Number> x,List<? extends Number> y){  return scatter(label,x,y,null);}  }
class C{  private ICommitRecord valueAtIndex(final long index){  final Entry entry=ser.deserializeEntry(new DataInputBuffer(super.valueAt(index)));  return fetchCommitRecord(entry);}  }
class C{  public void start() throws Throwable {  for (  final H host : hosts) {    host.start();    host.setMaintenanceIntervalMicros(TimeUnit.MILLISECONDS.toMicros(MAINTENANCE_INTERVAL_MS));    waitForHostReady(host);  }  if (hosts.length > 1) {    H host=hosts[0];    for (int i=1; i < hosts.length; i++) {      H peerHost=hosts[i];      ServiceHostUtils.joinNodeGroup(peerHost,host.getUri().getHost(),host.getPort());    }    for (int i=0; i < hosts.length; i++) {      ServiceHostUtils.setQuorumSize(hosts[i],hosts.length,null);    }    ServiceHostUtils.waitForNodeGroupConvergence(hosts,ServiceUriPaths.DEFAULT_NODE_GROUP,ServiceHostUtils.DEFAULT_NODE_GROUP_CONVERGENCE_MAX_RETRIES,MultiHostEnvironment.TEST_NODE_GROUP_CONVERGENCE_SLEEP);    for (int i=0; i < hosts.length; i++) {      waitForHostReady(hosts[i]);    }  }}  }
class C{  @Deprecated public EmailListFeed retrieveEmailLists(String recipient) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving email lists for '" + recipient + "'.");  URL feedUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION);  AppsForYourDomainQuery query=new AppsForYourDomainQuery(feedUrl);  query.setRecipient(recipient);  return emailListService.query(query,EmailListFeed.class);}  }
class C{  public String minStdDevTipText(){  return "set minimum allowable standard deviation";}  }
class C{  public static Annotation[] findAnnotations(FieldDeclaration field,Pattern namePattern){  List<Annotation> result=new ArrayList<Annotation>();  if (field.annotations == null)   return EMPTY_ANNOTATIONS_ARRAY;  for (  Annotation annotation : field.annotations) {    TypeReference typeRef=annotation.type;    if (typeRef != null && typeRef.getTypeName() != null) {      char[][] typeName=typeRef.getTypeName();      String suspect=new String(typeName[typeName.length - 1]);      if (namePattern.matcher(suspect).matches()) {        result.add(annotation);      }    }  }  return result.toArray(EMPTY_ANNOTATIONS_ARRAY);}  }
class C{  public MockTransaction(final Account sender){  this(sender,0);}  }
class C{  private boolean componentContains(double latitude,double longitude){  if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {    return false;  }  if (tree.contains(latitude,longitude)) {    if (holes != null && holes.contains(latitude,longitude)) {      return false;    }    return true;  }  return false;}  }
class C{  public static int[] indexSort(Comparable[] a){  int n=a.length;  int[] index=new int[n];  for (int i=0; i < n; i++)   index[i]=i;  for (int i=0; i < n; i++)   for (int j=i; j > 0 && less(a[index[j]],a[index[j - 1]]); j--)   exch(index,j,j - 1);  return index;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElement("address");{    boolean success=false;    try {      element.setPrefix("test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static String encodeNoNewline(byte[] in){  int length=in.length * 4 / 3;  length+=length / 76 + 3;  byte[] out=new byte[length];  int index=0, i, end=in.length - in.length % 3;  for (i=0; i < end; i+=3) {    out[index++]=map[(in[i] & 0xff) >> 2];    out[index++]=map[((in[i] & 0x03) << 4) | ((in[i + 1] & 0xff) >> 4)];    out[index++]=map[((in[i + 1] & 0x0f) << 2) | ((in[i + 2] & 0xff) >> 6)];    out[index++]=map[(in[i + 2] & 0x3f)];  }switch (in.length % 3) {case 1:    out[index++]=map[(in[end] & 0xff) >> 2];  out[index++]=map[(in[end] & 0x03) << 4];out[index++]='=';out[index++]='=';break;case 2:out[index++]=map[(in[end] & 0xff) >> 2];out[index++]=map[((in[end] & 0x03) << 4) | ((in[end + 1] & 0xff) >> 4)];out[index++]=map[((in[end + 1] & 0x0f) << 2)];out[index++]='=';break;}return new String(out,0,index);}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public MessageDialog(Window owner,String i18nKey,Object... i18nArgs){  this(owner,i18nKey,null,i18nArgs);}  }
class C{  public DashedLineModifier(float length){  this.length=length;}  }
class C{  public final void debug(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,t);  }}  }
class C{  public AztecDetectorResult detect(boolean isMirror) throws NotFoundException {  Point pCenter=getMatrixCenter();  ResultPoint[] bullsEyeCorners=getBullsEyeCorners(pCenter);  if (isMirror) {    ResultPoint temp=bullsEyeCorners[0];    bullsEyeCorners[0]=bullsEyeCorners[2];    bullsEyeCorners[2]=temp;  }  extractParameters(bullsEyeCorners);  BitMatrix bits=sampleGrid(image,bullsEyeCorners[shift % 4],bullsEyeCorners[(shift + 1) % 4],bullsEyeCorners[(shift + 2) % 4],bullsEyeCorners[(shift + 3) % 4]);  ResultPoint[] corners=getMatrixCornerPoints(bullsEyeCorners);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public static List<String> splitHeaderString(String s,char splitChar){  List<String> result=new ArrayList<String>(8);  boolean parsingQuotedString=false;  int i, startIdx=0;  for (i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == splitChar && !parsingQuotedString) {      result.add(s.substring(startIdx,i));      startIdx=i + 1;    } else     if (c == '"') {      parsingQuotedString=!parsingQuotedString;    }  }  if (startIdx < s.length()) {    result.add(s.substring(startIdx));  }  return result;}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  private static Table<String,Category,Logic> loadLexicon(final File file) throws IOException {  final Table<String,Category,Logic> result=HashBasedTable.create();  for (  final String line2 : Util.readFile(file)) {    final int commentIndex=line2.indexOf("//");    final String line=(commentIndex > -1 ? line2.substring(0,commentIndex) : line2).trim();    if (line.isEmpty()) {      continue;    }    final String[] fields=line.split("\t+");    if (fields.length < 2) {      throw new IllegalArgumentException("Must be at least two tab-separated fields on line: \"" + line2 + "\" in file: "+ file.getPath());    }    final Category category;    try {      category=Category.valueOf(fields[0]);    } catch (    final Exception e) {      throw new IllegalArgumentException("Unable to interpret category: \"" + fields[0] + "\" on line \""+ line2+ "\" in file: "+ file.getPath());    }    final Logic logic;    try {      logic=LogicParser.fromString(fields[1],category);    } catch (    final Exception e) {      throw new IllegalArgumentException("Unable to interpret semantics: \"" + fields[1] + "\" on line \""+ line2+ "\" in file: "+ file.getPath());    }    if (SemanticType.makeFromCategory(category) != logic.getType()) {      throw new IllegalArgumentException("Mismatch between syntactic and semantic type. " + category + " has type: "+ SemanticType.makeFromCategory(category)+ " but "+ logic+ " has type: "+ logic.getType());    }    if (fields.length == 2) {      result.put(ALL_WORDS,category,logic);    } else {      for (int i=2; i < fields.length; i++) {        result.put(fields[i].replaceAll("-"," "),category,logic);      }    }  }  return result;}  }
class C{  @Deprecated protected final void dccReceiveFile(File file,long address,int port,int size){  throw new RuntimeException("dccReceiveFile is deprecated, please use sendFile");}  }
class C{  private static void sortReverseDense(MatrixBlock m1){  int rlen=m1.rlen;  double[] a=m1.denseBlock;  for (int i=0; i < rlen / 2; i++) {    double tmp=a[i];    a[i]=a[rlen - i - 1];    a[rlen - i - 1]=tmp;  }}  }
class C{  private void printMethod(RVMMethod m){  Log.write(m.getMemberRef().getType().getName().toByteArray());  Log.write(".");  Log.write(m.getMemberRef().getName().toByteArray());  Log.write(" ");  Log.write(m.getMemberRef().getDescriptor().toByteArray());}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public Leaf seek(final byte[] key){  stack.clear();  AbstractNode<?> node=getRoot();  while (!node.isLeaf()) {    final Node n=(Node)node;    final int index=n.findChild(key);    stack.push(n);    node=n.getChild(index);  }  return leaf=(Leaf)node;}  }
class C{  public static String toPath(BezierPath[] paths){  StringBuilder buf=new StringBuilder();  for (int j=0; j < paths.length; j++) {    BezierPath path=paths[j];    if (path.size() == 0) {    } else     if (path.size() == 1) {      BezierPath.Node current=path.get(0);      buf.append("M ");      buf.append(toNumber(current.x[0]));      buf.append(' ');      buf.append(toNumber(current.y[0]));      buf.append(toNumber(current.x[0]));      buf.append(' ');      buf.append(toNumber(current.y[0] + 1));    } else {      BezierPath.Node previous;      BezierPath.Node current;      previous=current=path.get(0);      buf.append("M ");      buf.append(toNumber(current.x[0]));      buf.append(' ');      buf.append(toNumber(current.y[0]));      char nextCommand='L';      for (int i=1, n=path.size(); i < n; i++) {        previous=current;        current=path.get(i);        if ((previous.mask & BezierPath.C2_MASK) == 0) {          if ((current.mask & BezierPath.C1_MASK) == 0) {            if (nextCommand != 'L') {              buf.append(" L ");              nextCommand='L';            } else {              buf.append(' ');            }            buf.append(toNumber(current.x[0]));            buf.append(' ');            buf.append(toNumber(current.y[0]));          } else {            if (nextCommand != 'Q') {              buf.append(" Q ");              nextCommand='Q';            } else {              buf.append(' ');            }            buf.append(toNumber(current.x[1]));            buf.append(' ');            buf.append(toNumber(current.y[1]));            buf.append(' ');            buf.append(toNumber(current.x[0]));            buf.append(' ');            buf.append(toNumber(current.y[0]));          }        } else {          if ((current.mask & BezierPath.C1_MASK) == 0) {            if (nextCommand != 'Q') {              buf.append(" Q ");              nextCommand='Q';            } else {              buf.append(' ');            }            buf.append(toNumber(previous.x[2]));            buf.append(' ');            buf.append(toNumber(previous.y[2]));            buf.append(' ');            buf.append(toNumber(current.x[0]));            buf.append(' ');            buf.append(toNumber(current.y[0]));          } else {            if (nextCommand != 'C') {              buf.append(" C ");              nextCommand='C';            } else {              buf.append(' ');            }            buf.append(toNumber(previous.x[2]));            buf.append(' ');            buf.append(toNumber(previous.y[2]));            buf.append(' ');            buf.append(toNumber(current.x[1]));            buf.append(' ');            buf.append(toNumber(current.y[1]));            buf.append(' ');            buf.append(toNumber(current.x[0]));            buf.append(' ');            buf.append(toNumber(current.y[0]));          }        }      }      if (path.isClosed()) {        if (path.size() > 1) {          previous=path.get(path.size() - 1);          current=path.get(0);          if ((previous.mask & BezierPath.C2_MASK) == 0) {            if ((current.mask & BezierPath.C1_MASK) == 0) {              if (nextCommand != 'L') {                buf.append(" L ");                nextCommand='L';              } else {                buf.append(' ');              }              buf.append(toNumber(current.x[0]));              buf.append(' ');              buf.append(toNumber(current.y[0]));            } else {              if (nextCommand != 'Q') {                buf.append(" Q ");                nextCommand='Q';              } else {                buf.append(' ');              }              buf.append(toNumber(current.x[1]));              buf.append(' ');              buf.append(toNumber(current.y[1]));              buf.append(' ');              buf.append(toNumber(current.x[0]));              buf.append(' ');              buf.append(toNumber(current.y[0]));            }          } else {            if ((current.mask & BezierPath.C1_MASK) == 0) {              if (nextCommand != 'Q') {                buf.append(" Q ");                nextCommand='Q';              } else {                buf.append(' ');              }              buf.append(toNumber(previous.x[2]));              buf.append(' ');              buf.append(toNumber(previous.y[2]));              buf.append(' ');              buf.append(toNumber(current.x[0]));              buf.append(' ');              buf.append(toNumber(current.y[0]));            } else {              if (nextCommand != 'C') {                buf.append(" C ");                nextCommand='C';              } else {                buf.append(' ');              }              buf.append(toNumber(previous.x[2]));              buf.append(' ');              buf.append(toNumber(previous.y[2]));              buf.append(' ');              buf.append(toNumber(current.x[1]));              buf.append(' ');              buf.append(toNumber(current.y[1]));              buf.append(' ');              buf.append(toNumber(current.x[0]));              buf.append(' ');              buf.append(toNumber(current.y[0]));            }          }        }        buf.append(" Z");        nextCommand='\0';      }    }  }  return buf.toString();}  }
class C{  public OFBasicVendorDataType(){  super();  this.type=0;}  }
class C{  public void updateBytes(String columnName,byte x[]) throws SQLException {  checkUpdatable();  getField(columnName).setBytes(x);}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (buffer == null) {    buffer=new byte[PipedInputStream.PIPE_SIZE];  }  isConnected=true;}  }
class C{  public void respond(ResponseCode code){  respond(new Response(code));}  }
class C{  public Boolean isUserCreated(){  return userCreated;}  }
class C{  public void hleControllerPoll(){  processSpecialKeys();  pollController();}  }
class C{  final public MutableString append(final long l){  return append(String.valueOf(l));}  }
class C{  public static <A,E extends A>A[] toArray(Enumeration<E> enumeration,A[] array){  ArrayList<A> elements=new ArrayList<A>();  while (enumeration.hasMoreElements()) {    elements.add(enumeration.nextElement());  }  return elements.toArray(array);}  }
class C{  public boolean isShortClassName(){  return super.isUseShortClassName();}  }
class C{  public void testBug25715() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("spbug25715","(INOUT mblob MEDIUMBLOB) BEGIN SELECT 1 FROM DUAL WHERE 1=0;\nEND");  CallableStatement cstmt=null;  try {    cstmt=this.conn.prepareCall("{call spbug25715(?)}");    byte[] buf=new byte[65];    for (int i=0; i < 65; i++) {      buf[i]=1;    }    int il=buf.length;    int[] typesToTest=new int[]{Types.BIT,Types.BINARY,Types.BLOB,Types.JAVA_OBJECT,Types.LONGVARBINARY,Types.VARBINARY};    for (int i=0; i < typesToTest.length; i++) {      cstmt.setBinaryStream("mblob",new ByteArrayInputStream(buf),buf.length);      cstmt.registerOutParameter("mblob",typesToTest[i]);      cstmt.executeUpdate();      InputStream is=cstmt.getBlob("mblob").getBinaryStream();      ByteArrayOutputStream bOut=new ByteArrayOutputStream();      int bytesRead=0;      byte[] readBuf=new byte[256];      while ((bytesRead=is.read(readBuf)) != -1) {        bOut.write(readBuf,0,bytesRead);      }      byte[] fromSelectBuf=bOut.toByteArray();      int ol=fromSelectBuf.length;      assertEquals(il,ol);    }    cstmt.close();  }  finally {    if (cstmt != null) {      cstmt.close();    }  }}  }
class C{  private <T>Provider<T> lookupProvider(Key<T> key){  BindingInject<T> bean=findBean(key);  if (bean != null) {    return bean.provider();  }  BindingAmp<T> binding=findBinding(key);  if (binding != null) {    return binding.provider();  }  binding=findObjectBinding(key);  if (binding != null) {    return binding.provider(InjectionPoint.of(key));  }  return null;}  }
class C{  public Blade webRoot(final String webRoot){  Assert.notBlank(webRoot);  applicationConfig.setWebRoot(webRoot);  return this;}  }
class C{  static UserPhotosStreamStore of(ProfileTableFactory tables){  return new UserPhotosStreamStore(null,tables);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("MimeVersionParser.parse");  MimeVersion mimeVersion=new MimeVersion();  try {    headerName(TokenTypes.MIME_VERSION);    mimeVersion.setHeaderName(SIPHeaderNames.MIME_VERSION);    try {      String majorVersion=this.lexer.number();      mimeVersion.setMajorVersion(Integer.parseInt(majorVersion));      this.lexer.match('.');      String minorVersion=this.lexer.number();      mimeVersion.setMinorVersion(Integer.parseInt(minorVersion));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return mimeVersion;  }  finally {    if (debug)     dbg_leave("MimeVersionParser.parse");  }}  }
class C{  public void bytesSent(int cnt){  bytesSent+=cnt;  lastSndTime=U.currentTimeMillis();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  static boolean isWritable(final ServletContext servletContext,final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (getConfig(servletContext).readOnly) {    buildAndCommitResponse(resp,HTTP_METHOD_NOT_ALLOWED,MIME_TEXT_PLAIN,"Not writable.");    return false;  }  final HAStatusEnum haStatus=getHAStatus(getIndexManager(servletContext));  if (haStatus == null) {    return true;  }switch (haStatus) {case Leader:    return true;default :  log.warn(haStatus.name());buildAndCommitResponse(resp,HTTP_METHOD_NOT_ALLOWED,MIME_TEXT_PLAIN,haStatus.name());return false;}}  }
class C{  public boolean isDisplayingToroidally(){  return displayingToroidally;}  }
class C{  public static int calculateTranslationAnimationDuration(int distancePx){  return calculateTranslationAnimationDuration(distancePx,100);}  }
class C{  public BitmapAjaxCallback rotate(boolean rotate){  this.rotate=rotate;  return this;}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  protected int rangeCount(DocSet subset,RangeFacetRequest rfr,RangeFacetRequest.FacetRange fr) throws IOException, SyntaxError {  SchemaField schemaField=rfr.getSchemaField();  Query rangeQ=schemaField.getType().getRangeQuery(null,schemaField,fr.lower,fr.upper,fr.includeLower,fr.includeUpper);  if (rfr.isGroupFacet()) {    return getGroupedFacetQueryCount(rangeQ,subset);  } else {    return searcher.numDocs(rangeQ,subset);  }}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,String listenAddress,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);  this.listenAddress=listenAddress;}  }
class C{  void addDependency(Project eclipseProject){  Task ideSetup=project.getTasks().getByName(OomphIdePlugin.IDE_SETUP_WORKSPACE);  eclipseProject.getTasks().all(null);}  }
class C{  public Map<Integer,TestTable2> selectToMap(String whereStatement,Object... args){  List<TestTable2> list=super.select(whereStatement,args);  Map<Integer,TestTable2> m=new LinkedHashMap<Integer,TestTable2>();  for (  TestTable2 x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  private MapSettings(int boardWidth,int boardHeight,int mapWidth,int mapHeight){  setBoardSize(boardWidth,boardHeight);  setMapSize(mapWidth,mapHeight);}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.THROW_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public EventHit eventValue(Integer value){  setInteger(EVENT_VALUE,value);  return this;}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public static void removeImages(@NotNull List<String> lines){  for (int i=0; i < lines.size(); i++) {    String newText=removeAllImages(lines.get(i));    lines.set(i,newText);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.412 -0400",hash_original_method="3B768B07815D1E82B9DA9F72D26C51EF",hash_generated_method="81FC492D08B09F484F4EBFF8AC21C02E") public static long readSwappedLong(byte[] data,int offset){  long low=((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16)+ ((data[offset + 3] & 0xff) << 24);  long high=((data[offset + 4] & 0xff) << 0) + ((data[offset + 5] & 0xff) << 8) + ((data[offset + 6] & 0xff) << 16)+ ((data[offset + 7] & 0xff) << 24);  return (high << 32) + (0xffffffffL & low);}  }
class C{  public void stopADB() throws Exception {  cmd.runCommand("adb kill-server");}  }
class C{  public static boolean isPowerOf4(int n){  int zeroBitCount=0;  if (n > 0 && (n & (n - 1)) == 0) {    while (n > 1) {      zeroBitCount++;      n>>=1;    }    return zeroBitCount % 2 == 0;  }  return false;}  }
class C{  public UF13(){  super(8,22,5);}  }
class C{  private UnixCrypt(){}  }
class C{  public KerberosKey(KerberosPrincipal principal,byte[] keyBytes,int keyType,int versionNum){  this.principal=principal;  this.versionNum=versionNum;  key=new KeyImpl(keyBytes,keyType);}  }
class C{  @Override public void start(){  if (session == null) {    session=findSessionToResume();  } else {    if (clientHello != null && this.status != FINISHED) {      return;    }    if (!session.isValid()) {      session=null;    }  }  if (session != null) {    isResuming=true;  } else   if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getPeerHostName(),socketOwner.getPeerPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);  } else {    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created ");  }  startSession();}  }
class C{  @UiHandler("schemaUrl") void onSchemaUrlChanged(KeyUpEvent event){  delegate.schemaUrlChanged(schemaUrl.getValue());}  }
class C{  public MutableKeysRaba(final int fromIndex,final int toIndex,final int capacity,final byte[][] a){  super(fromIndex,toIndex,capacity,a);}  }
class C{  protected Chronology checkChronology(Chronology chronology){  return DateTimeUtils.getChronology(chronology);}  }
class C{  @Override protected View onCreateView(String name,AttributeSet attrs) throws ClassNotFoundException {  for (  String prefix : sClassPrefixList) {    try {      View view=createView(name,prefix,attrs);      if (view != null) {        return view;      }    } catch (    ClassNotFoundException e) {    }  }  return super.onCreateView(name,attrs);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    for (    ObjectProperty prop : getElements()) {      prop.visit(v);    }  }}  }
class C{  public void init(){}  }
class C{  public SignatureFile(Manifest manifest,String[] entries,String filename) throws JarException {  this(filename,true);  this.manifest=manifest;  add(entries);}  }
class C{  final public int remove(final int index){  assert values[index] != null;  assert nvalues > 0;  System.arraycopy(values,index + 1,values,index,nvalues - index - 1);  values[nvalues - 1]=null;  return --nvalues;}  }
class C{  public static Number min(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return Math.min(a.doubleValue(),b.doubleValue());  } else {    return Math.min(a.longValue(),b.longValue());  }}  }
class C{  private boolean switchesHaveAnotherMaster(){  IOFSwitchService switchService=controller.getSwitchService();  for (  Entry<DatapathId,IOFSwitch> switchMap : switchService.getAllSwitchMap().entrySet()) {    IOFSwitchBackend sw=(IOFSwitchBackend)switchMap.getValue();    if (sw.hasAnotherMaster()) {      return true;    }  }  return false;}  }
class C{  @Override public void onClick(View v){  if (v.getId() == R.id.read_barcode) {    Intent intent=new Intent(this,BarcodeCaptureActivity.class);    intent.putExtra(BarcodeCaptureActivity.AutoFocus,autoFocus.isChecked());    intent.putExtra(BarcodeCaptureActivity.UseFlash,useFlash.isChecked());    startActivityForResult(intent,RC_BARCODE_CAPTURE);  }}  }
class C{  public FastFloatBuffer append(float element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  protected void callSubtreeVisitors(XPathVisitor visitor){  if (null != m_predicates) {    int n=m_predicates.length;    for (int i=0; i < n; i++) {      ExpressionOwner predOwner=new PredOwner(i);      if (visitor.visitPredicate(predOwner,m_predicates[i])) {        m_predicates[i].callVisitors(predOwner,visitor);      }    }  }  if (null != m_relativePathPattern) {    m_relativePathPattern.callVisitors(this,visitor);  }}  }
class C{  public void recordOutBuffer(Object obj){  collector().recordOutBuffer(getRuleName(),obj);}  }
class C{  public static boolean allPassed(){  return allPassed;}  }
class C{  private boolean isImcgIntxen(int imcgSection){  return (imcgSection & 0b1) != 0;}  }
class C{  public void flush() throws IOException {synchronized (lock) {    flushBuffer();    out.flush();  }}  }
class C{  public static void assertFailedU(String message,String update){  checkUpdateU(message,update,false);}  }
class C{  public ServerDate(String serverDateResponse){  mServerTimeInMillis=convertServerDateToMillis(serverDateResponse);}  }
class C{  @Override public Bitmap resolveImage(String filename){  Log.i(TAG,"resolveImage(" + filename + ")");  try {    InputStream istream=assetManager.open(filename);    return BitmapFactory.decodeStream(istream);  } catch (  IOException e1) {    return null;  }}  }
class C{  public static String filterCombiningCharacters(String text,String replaceWith,int mode){  if (mode == FILTER_COMBINING_CHARACTERS_STRICT) {    return COMBINING_CHARACTERS_STRICT.matcher(text).replaceAll(replaceWith);  } else   if (mode == FILTER_COMBINING_CHARACTERS_LENIENT) {    return COMBINING_CHARACTERS_LENIENT.matcher(text).replaceAll(replaceWith);  }  return text;}  }
class C{  @Contract(pure=true) public final boolean isRunning(final int id){  return RunningOperationStorage.getInstance().isOperationRunning(id);}  }
class C{  public int size(){  return size;}  }
class C{  public void paint(Graphics2D g2d){  if (markerGroup == null) {    buildMarkerGroup();  }  if (markerGroup.getChildren().size() > 0) {    markerGroup.paint(g2d);  }}  }
class C{  public static FrameBlock convertToFrameBlock(MatrixBlock mb,ValueType vt){  ValueType[] schema=UtilFunctions.nCopies(mb.getNumColumns(),vt);  return convertToFrameBlock(mb,schema);}  }
class C{  private AceDumpData createAclDumpMap(final Session session,final int keyOrder,final int aclOrdering,final String[] excludePaths,final boolean isIncludeUsers) throws ValueFormatException, IllegalArgumentException, IllegalStateException, RepositoryException {  AceDumpData aceDumpData=new AceDumpData();  UserManager um=((JackrabbitSession)session).getUserManager();  Map<String,Set<AceBean>> aceMap=null;  Map<String,Set<AceBean>> legacyAceMap=new TreeMap<String,Set<AceBean>>();  if (keyOrder == AcHelper.PRINCIPAL_BASED_ORDER) {    aceMap=new TreeMap<String,Set<AceBean>>();  } else   if (keyOrder == AcHelper.PATH_BASED_ORDER) {    aceMap=new TreeMap<String,Set<AceBean>>();  }  Set<AclBean> aclBeanSet=getACLDumpBeans(session);  for (  AclBean aclBean : aclBeanSet) {    if (aclBean.getAcl() == null) {      continue;    }    boolean allowExistsInListEarlier=false;    for (    AccessControlEntry ace : aclBean.getAcl().getAccessControlEntries()) {      if (!(ace instanceof JackrabbitAccessControlEntry)) {        throw new IllegalStateException("AC entry is not a JackrabbitAccessControlEntry: " + ace);      }      AceWrapper tmpBean=new AceWrapper((JackrabbitAccessControlEntry)ace,aclBean.getJcrPath());      AceBean tmpAceBean=AcHelper.getAceBean(tmpBean);      if (tmpAceBean.isAllow()) {        allowExistsInListEarlier=true;      } else {        if (allowExistsInListEarlier && !tmpAceBean.isAllow()) {          tmpAceBean.setKeepOrder(true);        }      }      Authorizable authorizable=um.getAuthorizable(tmpAceBean.getPrincipalName());      if (authorizable != null) {        if (authorizable.isGroup() || isIncludeUsers) {          addBeanToMap(keyOrder,aclOrdering,aceMap,tmpAceBean);        }      } else {        addBeanToMap(keyOrder,aclOrdering,legacyAceMap,tmpAceBean);      }    }  }  aceDumpData.setAceDump(aceMap);  aceDumpData.setLegacyAceDump(legacyAceMap);  return aceDumpData;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"ADD");  translateAll(environment,instruction,"ADD",instructions);}  }
class C{  void removeAwaitingResume(DccFileTransfer transfer){  _awaitingResume.removeElement(transfer);}  }
class C{  @Deprecated public static <T>UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  public void translate(int x,int y){  g.translate(x,y);}  }
class C{  private void retireComputeStates(EnumerationDeletionContext context){  List<Operation> operations=new ArrayList<>();  for (  ComputeState cs : context.instancesToBeDeleted) {    ComputeState cps=new ComputeState();    cps.powerState=PowerState.OFF;    cps.lifecycleState=LifecycleState.RETIRED;    Operation operation=Operation.createPatch(this.getHost(),cs.documentSelfLink).setBody(cps).setReferer(getHost().getUri());    operations.add(operation);  }  if (operations == null || operations.size() == 0) {    logInfo("There are no compute states to be deleted from the system.");    deleteResourcesInLocalSystem(context);    return;  }  OperationJoin.JoinedCompletionHandler joinCompletion=null;  OperationJoin joinOp=OperationJoin.create(operations);  joinOp.setCompletion(joinCompletion);  joinOp.sendWith(getHost());}  }
class C{  @Category(FlakyTest.class) @Test public void testFullGIITriggeredByTooManyUnfinishedOps() throws Throwable {  prepareForEachTest();  final DiskStoreID memberP=getMemberID(P);  final DiskStoreID memberR=getMemberID(R);  final long[] exceptionlist={4,5};  assertEquals(0,DistributedCacheOperation.SLOW_DISTRIBUTION_MS);  prepareCommonTestData(6);  forceGC(P,2);  waitForToVerifyRVV(P,memberP,6,null,4);  waitForToVerifyRVV(P,memberR,3,null,0);  createUnfinishedOperationsR4R5();  closeCache(R);  doOnePut(P,7,"key1");  changeUnfinishedOperationLimit(R,1);  createDistributedRegion(R);  verifyDeltaSizeFromStats(R,3,0);}  }
class C{  @Override @SuppressWarnings("unchecked") public IOObjectCollection<T> copy(){  List<T> copiedElements=new ArrayList<T>(objects.size());  for (  T ioo : objects) {    copiedElements.add((T)ioo.copy());  }  IOObjectCollection<T> copy=new IOObjectCollection<T>(copiedElements);  copy.cloneAnnotationsFrom(this);  return copy;}  }
class C{  public long readRawLittleEndian64() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  final byte b5=readRawByte();  final byte b6=readRawByte();  final byte b7=readRawByte();  final byte b8=readRawByte();  return (((long)b1 & 0xff)) | (((long)b2 & 0xff) << 8) | (((long)b3 & 0xff) << 16)| (((long)b4 & 0xff) << 24)| (((long)b5 & 0xff) << 32)| (((long)b6 & 0xff) << 40)| (((long)b7 & 0xff) << 48)| (((long)b8 & 0xff) << 56);}  }
class C{  private static void hello(Ignite ignite) throws IgniteException {  ignite.compute().broadcast(null);  System.out.println();  System.out.println(">>> Check all nodes for hello message output.");}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gdufe");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public PaymentInformationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private boolean shouldUseShortName(Generator gen,Type type){  requireNonNulls(gen,type);  final DependencyManager mgr=gen.getDependencyMgr();  final String name=Formatting.stripGenerics(type.getTypeName());  if (mgr.isIgnored(name)) {    return true;  }  if (mgr.isLoaded(name)) {    return true;  }  final Optional<String> current=mgr.getCurrentPackage();  return current.isPresent() && name.startsWith(current.get());}  }
class C{  @Override public void addFieldsForMapKey(AbstractRecord joinRow){  for (  DatabaseMapping mapping : getReferenceDescriptor().getMappings()) {    if (!mapping.isReadOnly()) {      for (      DatabaseField field : mapping.getFields()) {        if (field.isUpdatable()) {          joinRow.put(field,null);        }      }    }  }}  }
class C{  public void clearStateVars(){  stateStack.clear();  lparen=0;  rparen=0;  inReference=false;  inDirective=false;  inComment=false;  inSet=false;  return;}  }
class C{  @Override public ProjectBuilder withPath(String path){  return this;}  }
class C{  public synchronized void fireEvent(EOMGEvent event){  if (isEmpty())   return;  for (  EOMGListener target : this) {    target.eomgChanged(event);    if (Debug.debugging("eomgdetail")) {      Debug.output("EOMGListenerSupport.fireStatusChanged(): target is: " + target);    }  }}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public static CharSequence downloadViaHttp(String uri,ContentType type) throws IOException {  return downloadViaHttp(uri,type,Integer.MAX_VALUE);}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<Integer>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    String ret="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numFields; a++) {      headers=headers + "Field" + (a + 1)+ "\t";    }    ret+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numFields; a++) {      ret+="\nField" + (a + 1) + "\t";      for (int b=0; b <= a; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            ret+="  " + df.format(correlationMatrix[a][b]) + "\t";          } else {            ret+=df.format(correlationMatrix[a][b]) + "\t";          }        } else {          ret+="\t";        }      }    }    ret+="\n\n";    for (i=0; i < numFields; i++) {      ret+="Field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  boolean showPermissionBlockedMessage(Context context){  return !enabledForChrome(context) || !enabledGlobally();}  }
class C{  void parseRow(Map<String,Object> row,Map<String,Map<String,OFFlowMod>> entries){  String switchName=null;  String entryName=null;  StringBuffer matchString=new StringBuffer();  OFFlowMod flowMod=(OFFlowMod)floodlightProvider.getOFMessageFactory().getMessage(OFType.FLOW_MOD);  if (!row.containsKey(COLUMN_SWITCH) || !row.containsKey(COLUMN_NAME)) {    log.debug("skipping entry with missing required 'switch' or 'name' entry: {}",row);    return;  }  try {    switchName=(String)row.get(COLUMN_SWITCH);    entryName=(String)row.get(COLUMN_NAME);    if (!entries.containsKey(switchName))     entries.put(switchName,new HashMap<String,OFFlowMod>());    StaticFlowEntries.initDefaultFlowMod(flowMod,entryName);    for (    String key : row.keySet()) {      if (row.get(key) == null)       continue;      if (key.equals(COLUMN_SWITCH) || key.equals(COLUMN_NAME) || key.equals("id"))       continue;      if (key.equals(COLUMN_HARD_TIMEOUT) || key.equals(COLUMN_IDLE_TIMEOUT) || key.equals(COLUMN_WILDCARD))       continue;      if (key.equals(COLUMN_ACTIVE)) {        if (!Boolean.valueOf((String)row.get(COLUMN_ACTIVE))) {          log.debug("skipping inactive entry {} for switch {}",entryName,switchName);          entries.get(switchName).put(entryName,null);          return;        }      } else       if (key.equals(COLUMN_ACTIONS)) {        StaticFlowEntries.parseActionString(flowMod,(String)row.get(COLUMN_ACTIONS),log);      } else       if (key.equals(COLUMN_COOKIE)) {        flowMod.setCookie(StaticFlowEntries.computeEntryCookie(flowMod,Integer.valueOf((String)row.get(COLUMN_COOKIE)),entryName));      } else       if (key.equals(COLUMN_PRIORITY)) {        flowMod.setPriority(U16.t(Integer.valueOf((String)row.get(COLUMN_PRIORITY))));      } else {        if (matchString.length() > 0)         matchString.append(",");        matchString.append(key + "=" + row.get(key).toString());      }    }  } catch (  ClassCastException e) {    if (entryName != null && switchName != null) {      log.warn("Skipping entry {} on switch {} with bad data : " + e.getMessage(),entryName,switchName);    } else {      log.warn("Skipping entry with bad data: {} :: {} ",e.getMessage(),e.getStackTrace());    }  }  OFMatch ofMatch=new OFMatch();  String match=matchString.toString();  try {    ofMatch.fromString(match);  } catch (  IllegalArgumentException e) {    log.debug("ignoring flow entry {} on switch {} with illegal OFMatch() key: " + match,entryName,switchName);    return;  }  flowMod.setMatch(ofMatch);  entries.get(switchName).put(entryName,flowMod);}  }
class C{  public ActivationDelegate(Object target){  this(target,true);}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final LineLocation createLineLocation(int lineNumber){  return new LineLocation(this,lineNumber);}  }
class C{  public static JDialog createDialog(Component c,String title,boolean modal,SymbolChooser chooserPane,ActionListener okListener,ActionListener cancelListener) throws HeadlessException {  return new SymbolChooserDialog(c,title,modal,chooserPane,okListener,cancelListener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.241 -0400",hash_original_method="D9802BC24EA78140947C4C72ACC44CDC",hash_generated_method="87EF2FF2B3CDF81DD81253CD4DBBF7DC") public void put(String key,Object value){  mRequestInformation.put(key,value);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1770) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private boolean uploadOneSubmission(String urlString,String id,String instanceFilePath,Uri toUpdate,HttpContext localContext,Map<Uri,Uri> uriRemap,Outcome outcome){  Collect.getInstance().getActivityLogger().logAction(this,urlString,instanceFilePath);  File instanceFile=new File(instanceFilePath);  ContentValues cv=new ContentValues();  Uri u=Uri.parse(urlString);  HttpClient httpclient=WebUtils.createHttpClient(CONNECTION_TIMEOUT);  boolean openRosaServer=false;  if (uriRemap.containsKey(u)) {    openRosaServer=true;    u=uriRemap.get(u);    if (u.getScheme().equals("https")) {      WebUtils.enablePreemptiveBasicAuth(localContext,u.getHost());    }    Log.i(t,"Using Uri remap for submission " + id + ". Now: "+ u.toString());  } else {    if (u.getScheme() != null && u.getScheme().equals("https")) {      WebUtils.enablePreemptiveBasicAuth(localContext,u.getHost());    }    HttpHead httpHead=WebUtils.createOpenRosaHttpHead(u);    HttpResponse response=null;    try {      Log.i(t,"Issuing HEAD request for " + id + " to: "+ u.toString());      response=httpclient.execute(httpHead,localContext);      int statusCode=response.getStatusLine().getStatusCode();      if (statusCode == HttpStatus.SC_UNAUTHORIZED) {        Collect.getInstance().getCookieStore().clear();        WebUtils.discardEntityBytes(response);        outcome.authRequestingServer=u;        return false;      } else       if (statusCode == 204) {        Header[] locations=response.getHeaders("Location");        WebUtils.discardEntityBytes(response);        if (locations != null && locations.length == 1) {          try {            Uri uNew=Uri.parse(URLDecoder.decode(locations[0].getValue(),"utf-8"));            if (u.getHost().equalsIgnoreCase(uNew.getHost())) {              openRosaServer=true;              uriRemap.put(u,uNew);              u=uNew;            } else {              outcome.results.put(id,fail + "Unexpected redirection attempt to a different host: " + uNew.toString());              cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);              Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);              return true;            }          } catch (          Exception e) {            e.printStackTrace();            outcome.results.put(id,fail + urlString + " "+ e.toString());            cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);            Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);            return true;          }        }      } else {        WebUtils.discardEntityBytes(response);        Log.w(t,"Status code on Head request: " + statusCode);        if (statusCode >= HttpStatus.SC_OK && statusCode < HttpStatus.SC_MULTIPLE_CHOICES) {          outcome.results.put(id,fail + "Invalid status code on Head request.  If you have a web proxy, you may need to login to your network. ");          cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);          Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);          return true;        }      }    } catch (    ClientProtocolException e) {      e.printStackTrace();      Log.e(t,e.toString());      WebUtils.clearHttpConnectionManager();      outcome.results.put(id,fail + "Client Protocol Exception");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    ConnectTimeoutException e) {      e.printStackTrace();      Log.e(t,e.toString());      WebUtils.clearHttpConnectionManager();      outcome.results.put(id,fail + "Connection Timeout");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    UnknownHostException e) {      e.printStackTrace();      Log.e(t,e.toString());      WebUtils.clearHttpConnectionManager();      outcome.results.put(id,fail + e.toString() + " :: Network Connection Failed");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    SocketTimeoutException e) {      e.printStackTrace();      Log.e(t,e.toString());      WebUtils.clearHttpConnectionManager();      outcome.results.put(id,fail + "Connection Timeout");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    HttpHostConnectException e) {      e.printStackTrace();      Log.e(t,e.toString());      WebUtils.clearHttpConnectionManager();      outcome.results.put(id,fail + "Network Connection Refused");      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);      return true;    }catch (    Exception e) {      e.printStackTrace();      Log.e(t,e.toString());      WebUtils.clearHttpConnectionManager();      String msg=e.getMessage();      if (msg == null) {        msg=e.toString();      }      outcome.results.put(id,fail + "Generic Exception: " + msg);      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);      return true;    }  }  File submissionFile=new File(instanceFile.getParentFile(),"submission.xml");  if (submissionFile.exists()) {    Log.w(t,"submission.xml will be uploaded instead of " + instanceFile.getAbsolutePath());  } else {    submissionFile=instanceFile;  }  if (!instanceFile.exists() && !submissionFile.exists()) {    outcome.results.put(id,fail + "instance XML file does not exist!");    cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);    Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);    return true;  }  File[] allFiles=instanceFile.getParentFile().listFiles();  List<File> files=new ArrayList<File>();  for (  File f : allFiles) {    String fileName=f.getName();    int dotIndex=fileName.lastIndexOf(".");    String extension="";    if (dotIndex != -1) {      extension=fileName.substring(dotIndex + 1);    }    if (fileName.startsWith(".")) {      continue;    }    if (fileName.equals(instanceFile.getName())) {      continue;    } else     if (fileName.equals(submissionFile.getName())) {      continue;    } else     if (openRosaServer) {      files.add(f);    } else     if (extension.equals("jpg")) {      files.add(f);    } else     if (extension.equals("3gpp")) {      files.add(f);    } else     if (extension.equals("3gp")) {      files.add(f);    } else     if (extension.equals("mp4")) {      files.add(f);    } else {      Log.w(t,"unrecognized file type " + f.getName());    }  }  boolean first=true;  int j=0;  int lastJ;  while (j < files.size() || first) {    lastJ=j;    first=false;    HttpPost httppost=WebUtils.createOpenRosaHttpPost(u);    MimeTypeMap m=MimeTypeMap.getSingleton();    long byteCount=0L;    MultipartEntity entity=new MultipartEntity();    FileBody fb=new FileBody(submissionFile,"text/xml");    entity.addPart("xml_submission_file",fb);    Log.i(t,"added xml_submission_file: " + submissionFile.getName());    byteCount+=submissionFile.length();    for (; j < files.size(); j++) {      File f=files.get(j);      String fileName=f.getName();      int idx=fileName.lastIndexOf(".");      String extension="";      if (idx != -1) {        extension=fileName.substring(idx + 1);      }      String contentType=m.getMimeTypeFromExtension(extension);      if (extension.equals("xml")) {        fb=new FileBody(f,"text/xml");        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added xml file " + f.getName());      } else       if (extension.equals("jpg")) {        fb=new FileBody(f,"image/jpeg");        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added image file " + f.getName());      } else       if (extension.equals("3gpp")) {        fb=new FileBody(f,"audio/3gpp");        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added audio file " + f.getName());      } else       if (extension.equals("3gp")) {        fb=new FileBody(f,"video/3gpp");        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("mp4")) {        fb=new FileBody(f,"video/mp4");        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added video file " + f.getName());      } else       if (extension.equals("csv")) {        fb=new FileBody(f,"text/csv");        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added csv file " + f.getName());      } else       if (f.getName().endsWith(".amr")) {        fb=new FileBody(f,"audio/amr");        entity.addPart(f.getName(),fb);        Log.i(t,"added audio file " + f.getName());      } else       if (extension.equals("xls")) {        fb=new FileBody(f,"application/vnd.ms-excel");        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added xls file " + f.getName());      } else       if (contentType != null) {        fb=new FileBody(f,contentType);        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.i(t,"added recognized filetype (" + contentType + ") "+ f.getName());      } else {        contentType="application/octet-stream";        fb=new FileBody(f,contentType);        entity.addPart(f.getName(),fb);        byteCount+=f.length();        Log.w(t,"added unrecognized file (" + contentType + ") "+ f.getName());      }      if (j + 1 < files.size()) {        if ((j - lastJ + 1 > 100) || (byteCount + files.get(j + 1).length() > 10000000L)) {          Log.i(t,"Extremely long post is being split into multiple posts");          try {            StringBody sb=new StringBody("yes",Charset.forName("UTF-8"));            entity.addPart("*isIncomplete*",sb);          } catch (          Exception e) {            e.printStackTrace();          }          ++j;          break;        }      }    }    httppost.setEntity(entity);    HttpResponse response=null;    try {      Log.i(t,"Issuing POST request for " + id + " to: "+ u.toString());      response=httpclient.execute(httppost,localContext);      int responseCode=response.getStatusLine().getStatusCode();      WebUtils.discardEntityBytes(response);      Log.i(t,"Response code:" + responseCode);      if (responseCode != HttpStatus.SC_CREATED && responseCode != HttpStatus.SC_ACCEPTED) {        if (responseCode == HttpStatus.SC_OK) {          outcome.results.put(id,fail + "Network login failure? Again?");        } else         if (responseCode == HttpStatus.SC_UNAUTHORIZED) {          Collect.getInstance().getCookieStore().clear();          outcome.results.put(id,fail + response.getStatusLine().getReasonPhrase() + " ("+ responseCode+ ") at "+ urlString);        } else {          outcome.results.put(id,fail + response.getStatusLine().getReasonPhrase() + " ("+ responseCode+ ") at "+ urlString);        }        cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);        Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);        return true;      }    } catch (    Exception e) {      e.printStackTrace();      Log.e(t,e.toString());      WebUtils.clearHttpConnectionManager();      String msg=e.getMessage();      if (msg == null) {        msg=e.toString();      }      outcome.results.put(id,fail + "Generic Exception: " + msg);      cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMISSION_FAILED);      Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);      return true;    }  }  outcome.results.put(id,Collect.getInstance().getApplication().getString(R.string.success));  cv.put(InstanceColumns.STATUS,InstanceProviderAPI.STATUS_SUBMITTED);  Collect.getInstance().getApplication().getContentResolver().update(toUpdate,cv,null,null);  return true;}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  public boolean isValor(){  return valor;}  }
class C{  public void prev(){  if (D)   LOG.info("Going to previous track");synchronized (this) {    if (mShuffleMode == SHUFFLE_NORMAL) {      final int histsize=mHistory.size();      if (histsize == 0) {        return;      }      final Integer pos=mHistory.remove(histsize - 1);      mPlayPos=pos.intValue();    } else {      if (mPlayPos > 0) {        mPlayPos--;      } else {        mPlayPos=mPlayListLen - 1;      }    }    stop(false);    openCurrent();    play();    notifyChange(META_CHANGED);  }}  }
class C{  private void createColumns(){  TableViewerColumn profileNameColumn=new TableViewerColumn(tableViewer,SWT.NONE);  profileNameColumn.getColumn().setResizable(true);  profileNameColumn.getColumn().setWidth(250);  profileNameColumn.getColumn().setText("Profile");  profileNameColumn.getColumn().setToolTipText("Profile name.");  TableViewerColumn activeColumn=new TableViewerColumn(tableViewer,SWT.NONE);  activeColumn.getColumn().setMoveable(true);  activeColumn.getColumn().setResizable(true);  activeColumn.getColumn().setText("Active");  activeColumn.getColumn().setWidth(40);  activeColumn.getColumn().setToolTipText("If profile is active or not, note that deactivated profile will not be considered during the instrumentation even if it's a part of an environment.");  TableViewerColumn defaultColumn=new TableViewerColumn(tableViewer,SWT.NONE);  defaultColumn.getColumn().setMoveable(true);  defaultColumn.getColumn().setResizable(true);  defaultColumn.getColumn().setText("Default");  defaultColumn.getColumn().setWidth(40);  defaultColumn.getColumn().setToolTipText("If profile is default or not, note that default profile will be added to any new created environment.");  TableViewerColumn typeColumn=new TableViewerColumn(tableViewer,SWT.NONE);  typeColumn.getColumn().setMoveable(true);  typeColumn.getColumn().setResizable(true);  typeColumn.getColumn().setText("Type");  typeColumn.getColumn().setWidth(40);  typeColumn.getColumn().setToolTipText("Type of data profile is holding.");  TableViewerColumn descriptionColumn=new TableViewerColumn(tableViewer,SWT.NONE);  descriptionColumn.getColumn().setMoveable(true);  descriptionColumn.getColumn().setResizable(true);  descriptionColumn.getColumn().setText("Description");  descriptionColumn.getColumn().setWidth(250);  descriptionColumn.getColumn().setToolTipText("Profile description.");}  }
class C{  public void printInfo(final int iteration){  Map<String,Double> currentModeDistances=getModeDistances();  long nLegs=this.getNumberOfLegs();  double totalDist=currentModeDistances.remove(ALL_MODES);  log.info("Mode shares:");  log.info("Cumulated traveled distance: " + (totalDist / 1000d) + "km");  for (  Map.Entry<String,Double> mode : currentModeDistances.entrySet()) {    log.info("Share of " + mode.getKey() + ":\t"+ "distance: "+ (100d * mode.getValue() / totalDist)+ "%"+ "\tnumber of legs: "+ (100d * this.getNumberOfLegs(mode.getKey()) / nLegs)+ "%");  }}  }
class C{  public void add(Geometry geom){  if (geom instanceof Polygon) {    Polygon poly=(Polygon)geom;    setBasePoint(poly.getExteriorRing().getCoordinateN(0));    add(poly);  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      add(gc.getGeometryN(i));    }  }}  }
class C{  public DOMCharacterDataModifiedListenerWrapper(CSSNavigableDocumentListener l){  listener=l;}  }
class C{  private void sendAction(Bundle data){  IMqttToken token=getMqttToken(data);  simpleAction(token,data);}  }
class C{  protected V11Database(WireDatabaseConnection connection,ProtocolDescriptor descriptor){  super(connection,descriptor);}  }
class C{  public DexcoderException(IEnum e){  super(e.getDesc());  this.resultCode=e.getCode();  this.resultMsg=e.getDesc();}  }
class C{  private static String toPrettyString(long creditCardNumber){  String plain=Long.toString(creditCardNumber);  int length=plain.length();switch (length) {case 12:    return plain.substring(0,3) + ' ' + plain.substring(3,6)+ ' '+ plain.substring(6,9)+ ' '+ plain.substring(9,12);case 13:  return plain.substring(0,4) + ' ' + plain.substring(4,7)+ ' '+ plain.substring(7,10)+ ' '+ plain.substring(10,13);case 14:return plain.substring(0,2) + ' ' + plain.substring(2,6)+ ' '+ plain.substring(6,10)+ ' '+ plain.substring(10,14);case 15:return plain.substring(0,3) + ' ' + plain.substring(3,7)+ ' '+ plain.substring(7,11)+ ' '+ plain.substring(11,15);case 16:return plain.substring(0,4) + ' ' + plain.substring(4,8)+ ' '+ plain.substring(8,12)+ ' '+ plain.substring(12,16);case 17:return plain.substring(0,1) + ' ' + plain.substring(1,5)+ ' '+ plain.substring(5,9)+ ' '+ plain.substring(9,13)+ ' '+ plain.substring(13,17);default :return plain;}}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  @SuppressWarnings("unchecked") public static <T>NamedAssociationFunction<T> namedAssociation(NamedAssociation<T> association){  return ((NamedAssociationReferenceHandler<T>)Proxy.getInvocationHandler(association)).namedAssociation();}  }
class C{  public void addComment(Comment comment){  addProperty(comment);}  }
class C{  public boolean canRedo(){  return m_nCurrentEditAction < m_undoStack.size() - 1;}  }
class C{  public AbbaLockingDetector stopCollecting(){  stop=true;  if (thread != null) {    try {      thread.join();    } catch (    InterruptedException e) {    }    thread=null;  }  return this;}  }
class C{  public static void refreshWidgetFailed(Context c){  Toast.makeText(c,c.getString(R.string.feedback_refresh_widget_failed),Toast.LENGTH_SHORT).show();}  }
class C{  public HttpMethodParams(final HttpParams defaults){  super(defaults);}  }
class C{  public void fireObjectInserted(DBIDRef insertion){  fireObjectChanged(insertion,Type.INSERT);}  }
class C{  protected JvmRTClassPathEntryMeta createJvmRTClassPathEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmRTClassPathEntryMeta(mib,objectserver);}  }
class C{  public TsFgs2(Score score){  if (score == null)   throw new NullPointerException();  setScore(score);  this.graph=new EdgeListGraphSingleConnections(getVariables());}  }
class C{  public boolean isChromeLocationSettingEnabled(){  return PrefServiceBridge.getInstance().isAllowLocationEnabled();}  }
class C{  public static boolean isXML11ValidName(String name){  int length=name.length();  if (length == 0)   return false;  int i=1;  char ch=name.charAt(0);  if (!isXML11NameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=name.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=name.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=name.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  void addReasons(ReasonsMask mask){  _reasons=_reasons | mask.getReasons();}  }
class C{  protected ConditionalRouteImpl(){  super();}  }
class C{  public String generateDocumentation() throws Exception {  StringBuilder markup=new StringBuilder();  markup.append(getPageHeader());  File baseDir=new File(PROJECT_BASE).getCanonicalFile();  File basePom=new File(baseDir,POM);  if (!basePom.isFile()) {    return "";  }  MavenProject baseProject=createProjectFromPom(basePom);  markup.append(getProjectInfo(baseProject,1));  markup.append("** *sandbox/* : Base directory for cargo plugin projects");  markup.append(LINE_SEPARATOR);  markup.append("*** *intellijidea/* : IntelliJ IDEA plugin");  markup.append(LINE_SEPARATOR);  markup.append("*** *netbeans/* : Netbeans plugin");  markup.append(LINE_SEPARATOR);  return markup.toString();}  }
class C{  private EsriLayer pickEsriLayer(){  Layer[] layers=_layerHandler.getLayers();  Vector<String> vector=new Vector<String>();  for (int n=0; n <= layers.length - 1; n++) {    String name=layers[n].getName();    vector.add(name);  }  Object[] objects=vector.toArray();  String selectedValue=(String)JOptionPane.showInputDialog(null,"Choose one","Input",JOptionPane.INFORMATION_MESSAGE,null,objects,objects[0]);  for (int n=0; n <= layers.length - 1; n++) {    String name=layers[n].getName();    if (name.equalsIgnoreCase(selectedValue)) {      return (EsriLayer)layers[n];    }  }  return null;}  }
class C{  private static String print(Node node,int function){  if (node == null) {    return null;  }  StringBuffer xml=new StringBuffer();  int type=node.getNodeType();  String nodeName=null;switch (type) {case Node.DOCUMENT_NODE:{      String Encoding=PRINTWRITER_ENCODING;      if ((null != Encoding) && (!"".equals(Encoding))) {        if (true) {          if (Encoding.equalsIgnoreCase("DEFAULT")) {            Encoding="UTF-8";          } else {            if (Encoding.equalsIgnoreCase("Unicode")) {              Encoding="UTF-16";            }          }        }        xml.append("<?xml version=\"1.0\" encoding=\"" + Encoding + "\"?>");      } else {        xml.append("<?xml version=\"1.0\"?>");      }      Element element=((Document)node).getDocumentElement();      xml.append(print(element,function));      break;    }case Node.ELEMENT_NODE:{    nodeName=node.getNodeName();    if (function == CREATE_STYPE_SHEET) {      nodeName=node.getNodeName();    } else     if (function == CREATE_KNOWLEDGE) {      nodeName=formatElementName(node.getNodeName()).toUpperCase();      if (!"XSL:".equals(nodeName.substring(0,4))) {        String displayName=formatDisplayName(node.getNodeName());        nodeName="Attribute name=\"" + nodeName + "\" displayName=\""+ displayName+ "\" type=\"String\" length=\"80\" precision=\"0\" required=\"false\"";      } else {        NodeList children=node.getChildNodes();        if (children != null) {          int len=children.getLength();          for (int i=0; i < len; i++) {            xml.append(print(children.item(i),function));          }        }        break;      }    } else     if (function == CREATE_RULE) {      if ("Member".equals(nodeName)) {        nodeName="Attribute ";      } else {        NodeList children=node.getChildNodes();        if (children != null) {          int len=children.getLength();          for (int i=0; i < len; i++) {            xml.append(print(children.item(i),function));          }        }        break;      }    }    xml.append('<');    xml.append(nodeName);    Attr[] attrs=sortAttributes(node.getAttributes());    for (    Attr attr : attrs) {      if (function == CREATE_RULE) {        if ((attr.getNodeName().equals("class") || attr.getNodeName().equals("attrib"))) {          xml.append(' ');          xml.append(attr.getNodeName());          xml.append("=\"");          xml.append(attr.getNodeValue());          xml.append('"');        }      } else {        xml.append(' ');        xml.append(attr.getNodeName());        xml.append("=\"");        xml.append(attr.getNodeValue());        xml.append('"');      }    }    if ((function == CREATE_KNOWLEDGE) || (function == CREATE_RULE)) {      xml.append("/>");    } else {      xml.append('>');    }    NodeList children=node.getChildNodes();    if (children != null) {      int len=children.getLength();      for (int i=0; i < len; i++) {        xml.append(print(children.item(i),function));      }    }    break;  }case Node.ENTITY_REFERENCE_NODE:{  if (canonical) {    NodeList children=node.getChildNodes();    if (children != null) {      int len=children.getLength();      for (int i=0; i < len; i++) {        xml.append(print(children.item(i),function));      }    }  } else {    xml.append('&');    xml.append(node.getNodeName());    xml.append(';');  }  break;}case Node.CDATA_SECTION_NODE:{if (canonical) {  xml.append(normalize(node.getNodeValue()));} else {  xml.append("<![CDATA[");  xml.append(node.getNodeValue());  xml.append("]]>");}break;}case Node.TEXT_NODE:{if ((function == CREATE_STYPE_SHEET) && (null != node.getNodeValue()) && (node.getNodeValue().trim().length() > 0)) {xml.append("<xsl:value-of select=\"" + node.getParentNode().getNodeName() + "\"/>");} else {if (function != CREATE_RULE) {  xml.append(normalize(node.getNodeValue()));}}break;}case Node.PROCESSING_INSTRUCTION_NODE:{xml.append("<?");xml.append(node.getNodeName());String data=node.getNodeValue();if ((data != null) && (data.length() > 0)) {xml.append(' ');xml.append(data);}xml.append("?>");break;}}if ((type == Node.ELEMENT_NODE) && (function != CREATE_KNOWLEDGE) && (function != CREATE_RULE)) {xml.append("</");xml.append(nodeName);xml.append('>');}return xml.toString();}  }
class C{  public boolean isErrorPage(){  return isErrPage;}  }
class C{  public CostFunction costFunction(){  return this.costFunction_;}  }
class C{  private static byte char64(final char x){  if (x < 0 || x > index_64.length) {    return -1;  }  return index_64[x];}  }
class C{  public void remove(String s){  mComponentMap.remove(s);}  }
class C{  public void repositoryAgentDeleted(CmrRepositoryDefinition cmrRepositoryDefinition,PlatformIdent agent){  for (  CmrRepositoryChangeListener listener : cmrRepositoryChangeListeners) {    listener.repositoryAgentDeleted(cmrRepositoryDefinition,agent);  }}  }
class C{  public long addWrapField(long instant,int amount){  return set(instant,FieldUtils.getWrappedValue(get(instant),amount,iMin,iMax));}  }
class C{  private void initPreds(){  this.preds=new HashMap<DTNHost,Double>();}  }
class C{  private void paintIncreaseButtonTogether(Graphics2D g,int width,int height){  paintArrowButton(g,width / 2.0 - 3,height / 2.0 - 3);}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends java.lang.Comparable<? super T>> list,T object){  if (list == null) {    throw new NullPointerException();  }  if (list.isEmpty()) {    return -1;  }  if (NumberComparator.isNumber(object)) {    Comparator comparator=NumberComparator.createComparator(object.getClass());    return binarySearch(list,object,comparator);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends java.lang.Comparable<? super T>> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-it.next().compareTo(object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >> 1;    if ((result=-list.get(mid).compareTo(object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  private boolean isDataValid(){  return true;}  }
class C{  public static int testLoop3Snippet(int a){  int j=0;  for (int i=0; i < a; i++) {    if (i - container.a == 0) {      break;    }    j++;  }  return j;}  }
class C{  public MockServletContext(){  this("");}  }
class C{  @Override public java.util.List<JToolBar> createToolBars(Application a,@Nullable View pr){  ResourceBundleUtil drawLabels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  PertView p=(PertView)pr;  DrawingEditor editor;  if (p == null) {    editor=getSharedEditor();  } else {    editor=p.getEditor();  }  LinkedList<JToolBar> list=new LinkedList<JToolBar>();  JToolBar tb;  tb=new JToolBar();  addCreationButtonsTo(tb,editor);  tb.setName(drawLabels.getString("window.drawToolBar.title"));  list.add(tb);  tb=new JToolBar();  ButtonFactory.addAttributesButtonsTo(tb,editor);  tb.setName(drawLabels.getString("window.attributesToolBar.title"));  list.add(tb);  tb=new JToolBar();  ButtonFactory.addAlignmentButtonsTo(tb,editor);  tb.setName(drawLabels.getString("window.alignmentToolBar.title"));  list.add(tb);  return list;}  }
class C{  public static <T>String toString(Class<T> cls,T obj,String name0,Object val0,String name1,Object val1,String name2,Object val2,String name3,Object val3){  assert cls != null;  assert obj != null;  assert name0 != null;  assert name1 != null;  assert name2 != null;  assert name3 != null;  Queue<GridToStringThreadLocal> queue=threadCache.get();  assert queue != null;  GridToStringThreadLocal tmp=queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();  Object[] addNames=tmp.getAdditionalNames();  Object[] addVals=tmp.getAdditionalValues();  addNames[0]=name0;  addVals[0]=val0;  addNames[1]=name1;  addVals[1]=val1;  addNames[2]=name2;  addVals[2]=val2;  addNames[3]=name3;  addVals[3]=val3;  try {    return toStringImpl(cls,tmp.getStringBuilder(),obj,addNames,addVals,4);  }  finally {    queue.offer(tmp);  }}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  public Insert onConflict(ConflictAlgorithm conflictAlgorithm){  this.conflictAlgorithm=conflictAlgorithm;  invalidateCompileCache();  return this;}  }
class C{  public void choose(boolean choice){  tagData.addElement(String.valueOf(choice));}  }
class C{  public StringIndexOutOfBoundsException(int index){  super("String index out of range: " + index);}  }
class C{  protected EnvironmentClassLoader(ClassLoader parent,String id,boolean isRoot){  super(parent,true,isRoot);  if (id != null) {    setId(id);  }  initListeners();}  }
class C{  public DashboardSelection(DashboardSelection shallowCopy){  for (  DomainSelection copy : shallowCopy.get()) {    DomainSelection selection=new DomainSelection(copy);    selections.put(selection.getDomain(),selection);  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  protected FileSystem create(String usrName) throws IOException, InterruptedException {  return FileSystem.get(fullUri,cfg,usrName);}  }
class C{  public NecronomiconSummonRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,Class<? extends EntityLivingBase> entity,Object... offerings){  this(unlocalizedName,bookType,dimension,requiredEnergy,false,entity,offerings);}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  if (insideEntryTitle) {    System.out.print(new String(ch,start,length));  }}  }
class C{  public Geo antipode(){  return this.scale(-1.0,new Geo());}  }
class C{  public static boolean isNativeBrowserSupported(){  return Display.impl.isNativeBrowserComponentSupported();}  }
class C{  public boolean seek(long position){  log.info("random-seek(0x" + position + ")");  return _file.seek(position);}  }
class C{  public Automation(Element e){  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in automation element when reading operations");  }  if ((a=e.getAttribute(Xml.NAME)) != null) {    _name=a.getValue();  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=a.getValue();  }  if (e.getChildren(Xml.ITEM) != null) {    @SuppressWarnings("unchecked") List<Element> eAutomationItems=e.getChildren(Xml.ITEM);    log.debug("automation: {} has {} items",getName(),eAutomationItems.size());    for (    Element eAutomationItem : eAutomationItems) {      register(new AutomationItem(eAutomationItem));    }  }  if ((a=e.getAttribute(Xml.CURRENT_ITEM)) != null) {    _currentAutomationItem=getItemById(a.getValue());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.230 -0400",hash_original_method="975F2644D328BA1CCE74489B7E6C4E93",hash_generated_method="6B57D2B7E6C1586A46189B258B115386") public static void copy(byte[] input,Writer output,String encoding) throws IOException {  ByteArrayInputStream in=new ByteArrayInputStream(input);  copy(in,output,encoding);}  }
class C{  public void validateHttpPostOnly(){}  }
class C{  public static boolean looksLikeALineHeight(String val){  return "normal".equals(val) || looksLikeALength(val) || looksLikeANumber(val);}  }
class C{  public boolean contains(double x,double y){  return getDistance(this.y,y) <= height / 2 && getDistance(this.x,x) <= width / 2;}  }
class C{  public final int _type2(int identity){  int eType;  if (identity < m_blocksize)   eType=m_exptype_map0[identity]; else   eType=m_exptype_map[identity >>> m_SHIFT][identity & m_MASK];  if (NULL != eType)   return m_extendedTypes[eType].getNodeType(); else   return NULL;}  }
class C{  public static void main(String[] args){  GitRevTask gitRevTask=new GitRevTask();  if (args.length == 0) {    gitRevTask.setRepoPath("..");  } else {    gitRevTask.setRepoPath(args[0]);  }  gitRevTask.setBranchprop("branch");  gitRevTask.setRevprop("baseRevisionNr");  gitRevTask.setDateprop("DSTAMP");  Project p=new Project();  gitRevTask.setProject(p);  gitRevTask.execute();  String branch=gitRevTask.getProject().getProperty("branch");  String version=gitRevTask.getProject().getProperty("baseRevisionNr");  String commitDate=gitRevTask.getProject().getProperty("DSTAMP");  File f;  if (args.length > 1) {    f=new File(args[1]);  } else {    f=new File("gitbuildnumber.properties");  }  try {    f.createNewFile();    FileWriter w=new FileWriter(f);    w.append("branch=" + branch + "\n");    w.append("releaseNr=" + version + "\n");    w.append("DSTAMP=" + commitDate + "\n");    w.close();  } catch (  final IOException ex) {  }}  }
class C{  private int validated(final int idx){  if (idx < 0) {    throw new IllegalArgumentException(String.format("Index %d must be >= 0.",idx));  }  if (idx >= this.all.size()) {    throw new IllegalArgumentException(String.format("Trying to return index %d from a list of %d passes",idx,this.all.size()));  }  return idx;}  }
class C{  @DSComment("Power management") @DSSpec(DSCat.DEVICE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.669 -0500",hash_original_method="4CBF875B7FFD1CFD45FAA62AD6F1991F",hash_generated_method="F0AC080B112EF81290E9E9D504FF0117") public void release(int flags){synchronized (mToken) {    if (!mRefCounted || --mCount == 0) {      mHandler.removeCallbacks(mReleaser);      try {        mService.releaseWakeLock(mToken,flags);      } catch (      RemoteException e) {      }      mHeld=false;    }    if (mCount < 0) {      throw new RuntimeException("WakeLock under-locked " + mTag);    }  }}  }
class C{  private static List<DomainApplication> filterApplications(Iterable<DomainApplication> domainApplications){  List<DomainApplication> sunriseApplications=new ArrayList<>();  List<DomainApplication> landrushApplications=new ArrayList<>();  for (  DomainApplication domainApplication : domainApplications) {    if (!domainApplication.getEncodedSignedMarks().isEmpty()) {      sunriseApplications.add(domainApplication);    } else {      landrushApplications.add(domainApplication);    }  }  return !sunriseApplications.isEmpty() ? sunriseApplications : landrushApplications;}  }
class C{  public void keyTyped(KeyEvent e){  LimeJTable src=(LimeJTable)e.getSource();  TableModel model=src.getModel();  if (model.getRowCount() == 0 || e.isAltDown() || e.isControlDown() || e.isMetaDown() || isNavigationKey(e)) {    return;  }  boolean startingFromSelection=true;  char c=e.getKeyChar();  long time=e.getWhen();  int startIndex=src.getSelectionModel().getLeadSelectionIndex();  if (time - lastTime < timeFactor) {    typedString+=c;    if ((prefix.length() == 1) && (c == prefix.charAt(0))) {      startIndex++;    } else {      prefix=typedString;    }  } else {    startIndex++;    typedString="" + c;    prefix=typedString;  }  lastTime=time;  if (startIndex < 0 || startIndex >= model.getRowCount()) {    startingFromSelection=false;    startIndex=0;  }  int index=src.getNextMatch(prefix,startIndex,Position.Bias.Forward);  if (index >= 0) {    src.setSelectedRow(index);    src.ensureRowVisible(index);  } else   if (startingFromSelection) {    index=src.getNextMatch(prefix,0,Position.Bias.Forward);    if (index >= 0) {      src.setSelectedRow(index);      src.ensureRowVisible(index);    }  }}  }
class C{  protected void finishPrepare(FixedWithNextNode startInstr){}  }
class C{  private void showMessage(String message){  Toast.makeText(this,message,Toast.LENGTH_SHORT).show();}  }
class C{  @NotNull public static TokenSet andSet(@NotNull TokenSet a,@NotNull TokenSet b){  final TokenSet newSet=new TokenSet((short)Math.min(a.myShift,b.myShift),(short)Math.max(a.myMax,b.myMax));  for (int i=0; i < newSet.myWords.length; i++) {    final int ai=newSet.myShift - a.myShift + i;    final int bi=newSet.myShift - b.myShift + i;    newSet.myWords[i]=(0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0l) & (0 <= bi && bi < b.myWords.length ? b.myWords[bi] : 0l);  }  return newSet;}  }
class C{  private void initializeLocation(V v,Point2D coord,Dimension d){  int level=minLevels.get(v).intValue();  int minY=(int)(level * d.getHeight() / (graphHeight * SPACEFACTOR));  double x=Math.random() * d.getWidth();  double y=Math.random() * (d.getHeight() - minY) + minY;  coord.setLocation(x,y);}  }
class C{  private static String fillString(String in,int len){  String out=new String(in);  while (out.length() < len) {    out=" " + out;  }  return (out);}  }
class C{  public Builder add(String fieldName,Serializable value){  intent.putExtra(fieldName,value);  return this;}  }
class C{  public Element generateXML(Document doc,Collection<String> varsToRecord){  Element root=doc.createElement("state");  for (  String nodeId : varsToRecord) {    if (getChanceNodeIds().contains(nodeId)) {      IndependentDistribution distrib=queryProb(nodeId);      Node var=distrib.generateXML(doc);      root.appendChild(var);    }  }  return root;}  }
class C{  public BufferBuilder(BufferParameters bufParams){  this.bufParams=bufParams;}  }
class C{  private void interpretMod(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final BigInteger result=firstValue.second().mod(secondValue.second());    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public static void main(String argv[]){  try {    generate(argv);  } catch (  GeneratorException e) {    Out.statistics();    System.exit(1);  }catch (  SilentExit e) {    System.exit(1);  }}  }
class C{  @Override public Set<Statement> apply(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Value u,final Set<Statement> sum){  if (sum != null) {    final Set<Statement> us=state.getState(u);    us.addAll(sum);    return us;  }  return null;}  }
class C{  public void writeToFile(String filename){  GridUtils.writeSpatialGridTable(this,filename);}  }
class C{  public static boolean isNumericSpace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {      return false;    }  }  return true;}  }
class C{  public boolean isPostConstructCalled(){  return this.postConstructCalled;}  }
class C{  protected void enviarConsultaCodeLogic(String idConsulta,ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionConsultasBI consultasService=services.lookupGestionConsultasBI();  ActionErrors errores=new ActionErrors();  boolean enviar=true;  try {    ConsultaVO consulta=consultasService.getConsulta(idConsulta);    if (!ConfigConstants.getInstance().getPermitirEnviarSolicitudNoDisponible()) {      enviar=comprobarDisponibilidadParaEnvio(request,consulta,consultasService);      if (!enviar) {        errores.add(common.Constants.ERROR_GENERAL_MESSAGE,new ActionError(common.Constants.ERROR_GENERAL_MESSAGE,Messages.getString(ConsultasConstants.ERRORS_SOLICITUDES_DETALLES_NO_DISPONIBLES,request.getLocale())));      }    }    if (enviar) {      consultasService.enviarConsulta(consulta);      setReturnActionFordward(request,verConsultaBeforeCreate(idConsulta));    } else {      setReturnActionFordward(request,mapping.findForward("ver_consulta"));    }  } catch (  ConsultaActionNotAllowedException e) {    errores=ExceptionMapper.getErrorsExcepcion(request,e);  }  if (errores != null && errores.size() > 0)   ErrorsTag.saveErrors(request,errores);}  }
class C{  public boolean isVolatile(){  return this.modifierKeyword == ModifierKeyword.VOLATILE_KEYWORD;}  }
class C{  public void detachIsoAsync(final String vmId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/detach_iso",getBasePath(),vmId);  createObjectAsync(path,null,responseCallback);}  }
class C{  public String openFile(){  if (!file.toFile().exists()) {    return "Error opening stream highlights file (not present).";  }  if (MiscUtil.openFolder(file.toFile(),null)) {    return "Opened stream highlights file in default application.";  }  return "Error opening stream highlights file.";}  }
class C{  public static Writable filterLine(URL self,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate) throws IOException {  return IOGroovyMethods.filterLine(newReader(self),predicate);}  }
class C{  public JavacMessages(String bundleName) throws MissingResourceException {  this(bundleName,null);}  }
class C{  public Builder withTrustStorePassword(String trustStorePassword){  properties.setProperty(NettyOptions.SSL_TRUST_STORE_PASSWORD,Assert.notNull(trustStorePassword,"trustStorePassword"));  return this;}  }
class C{  public void lock() throws IgniteCheckedException {  lock(false);}  }
class C{  public Matrix4x3d m00(double m00){  this.m00=m00;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  protected boolean isUpKey(int keyCode){  int game=Display.getInstance().getGameAction(keyCode);  return game == Display.GAME_UP;}  }
class C{  public static <S extends HasCellMouseDownHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellMouseDownEvent event=new CellMouseDownEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public BasicFrameAttributes(BasicFrameAttributes attributes){  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.copy(attributes);}  }
class C{  @Override public void doFilter(final ServletRequest request,final ServletResponse response,final FilterChain chain) throws IOException, ServletException {  final SlingHttpServletRequest slingRequest=(SlingHttpServletRequest)request;  final String path=slingRequest.getPathInfo().toLowerCase();  final String host=slingRequest.getServerName();  final String method=slingRequest.getMethod();  response.setCharacterEncoding(CharEncoding.UTF_8);  if (linkRewriter != null && "GET".equals(method) && path.endsWith(".html")) {    PrintWriter out=response.getWriter();    CharResponseWrapper responseWrapper=new CharResponseWrapper((HttpServletResponse)response);    try {      chain.doFilter(request,responseWrapper);    } catch (    Exception e) {      LOGGER.error("Could not continue chain",e);      chain.doFilter(request,response);    }    String servletResponse=new String(responseWrapper.toString());    out.write(linkRewriter.rewriteAllLinks(servletResponse,host));  } else {    chain.doFilter(request,response);  }}  }
class C{  @GET @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.RESTRICTED_SYSTEM_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public BackupSets listBackup(){  List<BackupSetInfo> backupList=new ArrayList<BackupSetInfo>();  log.info("Received list backup request");  try {    backupList=backupOps.listBackup();  } catch (  BackupException e) {    log.error("Failed to list backup sets, e=",e);    throw APIException.internalServerErrors.getObjectError("Backup info",e);  }  return toBackupSets(backupList);}  }
class C{  private void initializeLayout(){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  Border padding=BorderFactory.createEmptyBorder(5,5,5,5);  JPanel tPanel=new JPanel();  tPanel.setLayout(new BoxLayout(tPanel,BoxLayout.X_AXIS));  tPanel.add(cbResponderType);  tPanel.add(Box.createHorizontalGlue());  tPanel.add(displaySPTriangle);  tPanel.setAlignmentX(Component.CENTER_ALIGNMENT);  tPanel.setBorder(padding);  this.add(tPanel);  this.add(Box.createRigidArea(new Dimension(0,5)));  spikeResponderPanel.setAlignmentX(Component.CENTER_ALIGNMENT);  spikeResponderPanel.setBorder(padding);  spikeResponderPanel.setVisible(displaySPTriangle.isDown());  this.add(spikeResponderPanel);  TitledBorder tb2=BorderFactory.createTitledBorder("Spike Responder");  this.setBorder(tb2);}  }
class C{  public static Validator<CharSequence> phoneNumber(@NonNull final CharSequence errorMessage){  return new PhoneNumberValidator(errorMessage);}  }
class C{  public NumberCellEditor(){  this(NumberFormatUtil.getInstance().getNumberFormat());}  }
class C{  @Override public float[] compute(final float[] values){  final float x=min(max(values[0],domain[0 * 2]),domain[0 * 2 + 1]);  if (bounds == null) {    bounds=new float[0];  }  int subi=bounds.length - 1;  for (; subi >= 0; subi--) {    if (x >= bounds[subi]) {      break;    }  }  subi++;  final float[] subinput=new float[1];  float xmin=domain[0], xmax=domain[1];  if (subi > 0) {    xmin=(bounds[subi - 1]);  }  if (subi < bounds.length) {    xmax=(bounds[subi]);  }  final float ymin=encode[subi * 2];  final float ymax=encode[subi * 2 + 1];  subinput[0]=interpolate(x,xmin,xmax,ymin,ymax);  final float[] output=functions[subi].computeStitch(subinput);  final float[] result=new float[output.length];  if (range != null) {    for (int i=0; i != range.length / 2; i++) {      result[i]=min(max(output[i],range[i * 2]),range[i * 2 + 1]);    }  } else {    for (int i=0; i != output.length; i++) {      result[i]=output[i];    }  }  return result;}  }
class C{  private static Element parseSequenceValueNode(String name,Element node,Element labelNode,Element bodyNode,Element bindingNode,Hashtable<String,String> problemList,Hashtable<String,String> problemListItems,Hashtable<String,Element> repeatControls,Element modelNode){  String type=node.getAttributeValue(null,ATTRIBUTE_TYPE);  if (type != null)   labelNode=buildSequenceInputControlNode(name,node,type,labelNode,bindingNode,bodyNode,problemList,problemListItems,repeatControls,modelNode); else {    for (int j=0; j < node.getChildCount(); j++) {      if (node.isText(j))       continue;      Element simpleTypeNode=(Element)node.getChild(j);      if (!simpleTypeNode.getName().equalsIgnoreCase(NODE_SIMPLETYPE))       continue;      return parseSimpleType(name,simpleTypeNode,bodyNode,bindingNode,problemList,problemListItems,repeatControls,modelNode);    }  }  return labelNode;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static String changeIndent(String code,int codeIndentLevel,String newIndent,String lineDelim){  return IndentManipulation.changeIndent(code,codeIndentLevel,CodeFormatterUtil.getTabWidth(),CodeFormatterUtil.getIndentWidth(),newIndent,lineDelim);}  }
class C{  @Override public void propertyChange(PropertyChangeEvent pce){  PluginOptionContainer container=getPlugin().getPluginOptions();  if (pce.getSource() instanceof OptionPayloadEncryption) {    m_Plugin.checkState();  } else   if (pce.getSource() == m_OptionSchemaFiles) {    m_Plugin.setUsedSchemaFiles(m_OptionSchemaFiles.getFiles());  } else   if (pce.getSource() == m_OptionUseSchema) {    log().info("Remove Schema Files Option");    if (!m_OptionUseSchema.isOn() && container.contains(m_OptionSchemaFiles)) {      container.remove(m_OptionSchemaFiles);      m_Plugin.setSchemaAnalyzerDepdingOnOption();    } else     if (!container.contains(m_OptionSchemaFiles)) {      log().info("Add Schema Files Option");      container.add(1 + container.indexOf(m_OptionUseSchema),m_OptionSchemaFiles);    }  }  getPlugin().checkState();}  }
class C{  public LineChart(final String title,final String xAxisLabel,final String yAxisLabel,final String[] categories){  super(title,xAxisLabel,yAxisLabel);  this.dataset=new DefaultCategoryDataset();  this.chart=createChart(title,xAxisLabel,yAxisLabel,this.dataset);  this.categories=categories.clone();  addDefaultFormatting();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getConditionRHS_();}  }
class C{  public DrawerBuilder withFireOnInitialOnClick(boolean fireOnInitialOnClick){  this.mFireInitialOnClick=fireOnInitialOnClick;  return this;}  }
class C{  public ListenableFuture<ReplayPosition> switchMemtableIfCurrent(Memtable memtable){synchronized (data) {    if (data.getView().getCurrentMemtable() == memtable)     return switchMemtable();  }  return waitForFlushes();}  }
class C{  public void selectTabAtPosition(int position){  if (position > getTabCount() - 1 || position < 0) {    throw new IndexOutOfBoundsException("Can't select tab at position " + position + ". This BottomBar has no items at that position.");  }  selectTabAtPosition(position,false);}  }
class C{  protected void deleteDocumentos(List documentos){  if (documentos != null) {    DocDocumentoVO documento;    for (int i=0; i < documentos.size(); i++) {      documento=(DocDocumentoVO)documentos.get(i);      try {        deleteFile(documento.getIdRepEcm(),documento.getIdExtDeposito(),documento.getIdFich());      } catch (      Exception e) {        logger.warn("Error al eliminar el fichero con id " + documento.getIdFich(),e);      }    }  }}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public Boolean isIpv6PrefixLengthSettable(){  return ipv6PrefixLengthSettable;}  }
class C{  private static void fillRelatedTags(String classFqn,String methodFqn,XmlTag parentTag,List<XmlTag> tagsReferences){  for (  XmlTag routeNode : parentTag.findSubTags("route")) {    for (    XmlTag serviceNode : routeNode.findSubTags("service")) {      String typeName=serviceNode.getAttributeValue("class");      String methodName=serviceNode.getAttributeValue("method");      if (typeName != null && typeName.equals(classFqn) && methodName != null && methodName.equals(methodFqn)) {        tagsReferences.add(new WebApiLineMarkerXmlTagDecorator(routeNode));      }    }  }}  }
class C{  public BoolStack(int size){  m_allocatedSize=size;  m_values=new boolean[size];  m_index=-1;}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public Builder ca(boolean ca){  this.ca=ca;  return this;}  }
class C{  @Override public void write(int b) throws IOException {  out.write(b);}  }
class C{  public static int yearFromDateValue(long x){  return (int)(x >>> SHIFT_YEAR);}  }
class C{  public CollisionHandler(Object a,Object b){  super(a,b);}  }
class C{  public UAX29URLEmailAnalyzer(CharArraySet stopWords){  super(stopWords);}  }
class C{  private ClassFinder(){}  }
class C{  public SVGOMGlyphElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void onWakeLockAcquired(int flags,String tag,int ownerUid,int ownerPid,WorkSource workSource){  if (DEBUG) {    Slog.d(TAG,"onWakeLockAcquired: flags=" + flags + ", tag=\""+ tag+ "\", ownerUid="+ ownerUid+ ", ownerPid="+ ownerPid+ ", workSource="+ workSource);  }  try {    final int monitorType=getBatteryStatsWakeLockMonitorType(flags);    if (workSource != null) {      mBatteryStats.noteStartWakelockFromSource(workSource,ownerPid,tag,monitorType);    } else {      mBatteryStats.noteStartWakelock(ownerUid,ownerPid,tag,monitorType);    }  } catch (  RemoteException ex) {  }}  }
class C{  public DigitalSignatureValidationExceptionBean(ApplicationExceptionBean sup,ReasonEnum reason){  super(sup);  setReason(reason);}  }
class C{  public Set<byte[]> keys(final byte[] pattern){  checkIsInMulti();  client.keys(pattern);  final HashSet<byte[]> keySet=new HashSet<byte[]>(client.getBinaryMultiBulkReply());  return keySet;}  }
class C{  public boolean isArray(){  return this.arraySize != null;}  }
class C{  public Boolean isFirewallIpRulesSupported(){  return firewallIpRulesSupported;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E peek(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public static File savePage(PageInstance pageInstance) throws Exception {  return savePage(pageInstance.getDirectory(),pageInstance.getPage());}  }
class C{  @Override public Cloudlet cloudletCancel(int cloudletId){  boolean found=false;  int position=0;  found=false;  for (  ResCloudlet rcl : getCloudletFinishedList()) {    if (rcl.getCloudletId() == cloudletId) {      found=true;      break;    }    position++;  }  if (found) {    return getCloudletFinishedList().remove(position).getCloudlet();  }  position=0;  for (  ResCloudlet rcl : getCloudletExecList()) {    if (rcl.getCloudletId() == cloudletId) {      found=true;      break;    }    position++;  }  if (found) {    ResCloudlet rcl=getCloudletExecList().remove(position);    if (rcl.getRemainingCloudletLength() == 0) {      cloudletFinish(rcl);    } else {      rcl.setCloudletStatus(Cloudlet.CANCELED);    }    return rcl.getCloudlet();  }  found=false;  position=0;  for (  ResCloudlet rcl : getCloudletPausedList()) {    if (rcl.getCloudletId() == cloudletId) {      found=true;      rcl.setCloudletStatus(Cloudlet.CANCELED);      break;    }    position++;  }  if (found) {    return getCloudletPausedList().remove(position).getCloudlet();  }  return null;}  }
class C{  private void _generateMapForOneMethodVariable(ArrayList<Integer> tempOsrMaps,int regMapIndex,MethodVariables mVar,boolean lastMid){  int mid=lastMid ? mVar.methId : (mVar.methId | NEXT_BIT);  tempOsrMaps.add(mid);  LinkedList<LocalRegPair> tupleList=mVar.tupleList;  int m=tupleList.size();  int bci=(m == 0) ? mVar.bcIndex : (mVar.bcIndex | NEXT_BIT);  tempOsrMaps.add(bci);  for (int j=0; j < m; j++) {    LocalRegPair tuple=tupleList.get(j);    boolean isLast=(j == m - 1);    processTuple(tempOsrMaps,tuple,isLast);    if (((tuple.typeCode == ClassTypeCode) || (tuple.typeCode == ArrayTypeCode)) && (tuple.valueType == PHYREG)) {      tempOsrMaps.set(regMapIndex,setRegister(tempOsrMaps.get(regMapIndex),tuple.value.toInt()));    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENTITY_PROPERTY_SOURCE;}  }
class C{  public FlowEdge(FlowEdge e){  this.v=e.v;  this.w=e.w;  this.capacity=e.capacity;  this.flow=e.flow;}  }
class C{  public Builder withSsl(boolean sslEnabled){  properties.setProperty(NettyOptions.SSL_ENABLED,String.valueOf(sslEnabled));  return this;}  }
class C{  public static Typeface ostrichLight(Context context){  return FontSourceProcessor.process(R.raw.ostrich_light,context);}  }
class C{  public boolean uiOverrideKeyEvent(KeyEvent event){  if (mWebViewClient != null) {    return mWebViewClient.shouldOverrideKeyEvent(mWebView.getWebView(),event);  }  return false;}  }
class C{  public void forceFlush() throws IgniteCheckedException {  wakeUp();}  }
class C{  public boolean isSetSyncOffer(){  return this.syncOffer != null;}  }
class C{  public static double rint(double x){  double y=floor(x);  double d=x - y;  if (d > 0.5) {    if (y == -1.0) {      return -0.0;    }    return y + 1.0;  }  if (d < 0.5) {    return y;  }  long z=(long)y;  return (z & 1) == 0 ? y : y + 1.0;}  }
class C{  public ForgeChunk_All(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  private boolean sshKeyGenRequired() throws Exception {  String currentVersion=getCurrentVersion();  if (currentVersion == null) {    return true;  }  return getCurrentVersion().equals(getDefaultVersion());}  }
class C{  public void add(String line){  if (headerBuilder == null) {    headerBuilder=new Headers.Builder();  }  headerBuilder.add(line);}  }
class C{  public TermPayloadPosting(TermPayloadCoordinator<PAYLOAD> payloadConf){  this.payloadConf=payloadConf;}  }
class C{  private static List<Node> filterElementNodes(NodeList list){  List<Node> result=new ArrayList<Node>(list.getLength());  for (int i=0; i < list.getLength(); i++) {    if (list.item(i).getNodeType() == Node.ELEMENT_NODE) {      result.add(list.item(i));    }  }  return result;}  }
class C{  public void destroy(){  preProcessorExecutor.destroy();}  }
class C{  @Override public void changeCursor(Cursor c){  if (DBG)   Log.d(LOG_TAG,"changeCursor(" + c + ")");  if (mClosed) {    Log.w(LOG_TAG,"Tried to change cursor after adapter was closed.");    if (c != null)     c.close();    return;  }  try {    super.changeCursor(c);    if (c != null) {      mText1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_1);      mText2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);      mText2UrlCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);      mIconName1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_1);      mIconName2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_2);      mFlagsCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);    }  } catch (  Exception e) {    Log.e(LOG_TAG,"error changing cursor and caching columns",e);  }}  }
class C{  public static void verifyErrorPayload(JavaResult javaResult) throws Exception {  EchoCommand command=javaResult.getBean(EchoCommand.class);  if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=javaResult.getBean(Error.class);    log.info("Hitachi command failed with error code:{} with message:{} for request:{}",new Object[]{error.getCode().toString(),error.getDescription(),error.getSource()});    throw HDSException.exceptions.errorResponseReceived(error.getCode(),error.getDescription());  }}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  void checkLocation(Location loc,String label,String expectedSourceName,String expectedSourcePath,int expectedLinenumber) throws Exception {  String sourceName=loc.sourceName();  if (sourceName.equals(expectedSourceName)) {    println(label + " sourceName: " + sourceName);  } else {    failure("FAIL: " + label + " expected sourceName "+ expectedSourceName+ " got - "+ sourceName);  }  String sourcePath=loc.sourcePath();  if (sourcePath.equals(expectedSourcePath)) {    println(label + " sourcePath: " + sourcePath);  } else {    failure("FAIL: " + label + " expected sourcePath "+ expectedSourcePath+ " got - "+ sourcePath);  }  int ln=loc.lineNumber();  if (ln == expectedLinenumber) {    println(label + " line number: " + ln);  } else {    failure("FAIL: " + label + " expected line number "+ expectedLinenumber+ " got - "+ ln);  }}  }
class C{  public static Element makeStyleElement(Document document){  Element style=SVGUtil.svgElement(document,SVGConstants.SVG_STYLE_TAG);  style.setAttribute(SVGConstants.SVG_TYPE_ATTRIBUTE,SVGConstants.CSS_MIME_TYPE);  return style;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.910 -0500",hash_original_method="D8E2AA39591AC4E6F843977CA2A212D3",hash_generated_method="4A516893C37E65C18C2EBDBCC35493F6") @Deprecated public static void resetGlobalExternalAllocSize(){}  }
class C{  public boolean areNodesReachable(List<VdcConfig> vdcList,boolean isAllNotReachable){  if (vdcList == null || vdcList.isEmpty()) {    throw new IllegalStateException("No vdc's passed in node reachable check request");  }  for (  VdcConfig vdc : vdcList) {    if (!areNodesReachable(vdc.getShortId(),vdc.getHostIPv4AddressesMap(),vdc.getHostIPv6AddressesMap(),isAllNotReachable)) {      return false;    }  }  return true;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  @Override public MyAppsViewHolder newViewHolder(ViewGroup viewGroup){  View myAppsView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.data_my_apps,viewGroup,false);  return new MyAppsViewHolder(myAppsView);}  }
class C{  public ParameterizedLinkedHashMap(Map<? extends K,? extends V> m,Equality keyEquality){  super(m,keyEquality);  accessOrder=false;}  }
class C{  public void close(){  connection.removePacketListener(packetListener);}  }
class C{  public void uploadImage(MultipartFile file,Long chequeID,String username){  if (!file.isEmpty()) {    Photo photo=new Photo();    try {      photo.setBytes(file.getBytes());    } catch (    IOException e) {      e.printStackTrace();    }    photo.setName(file.getOriginalFilename());    photo.setContentType(file.getContentType());    photo.setChequeId(chequeID.toString());    photo.setUsername(username);    photo.setAddDate(OffsetDateTime.now());    photoRepository.save(photo);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public String toString(){  return "file '" + m_systemId + "', line #"+ m_lineNumber+ ", column #"+ m_columnNumber;}  }
class C{  public BitwiseInputStream(byte buf[]){  mBuf=buf;  mEnd=buf.length << 3;  mPos=0;}  }
class C{  private void dhtDestroy() throws Exception {  grid(0).getOrCreateCache(getDhtConfig());  assertNull(grid(0).cache(CACHE_NAME_DHT).get(KEY_VAL));  grid(0).cache(CACHE_NAME_DHT).put(KEY_VAL,KEY_VAL);  assertEquals(KEY_VAL,grid(0).cache(CACHE_NAME_DHT).get(KEY_VAL));  assertEquals(KEY_VAL,grid(1).cache(CACHE_NAME_DHT).get(KEY_VAL));  assertEquals(KEY_VAL,grid(2).cache(CACHE_NAME_DHT).get(KEY_VAL));  assertFalse(grid(0).configuration().isClientMode());  IgniteCache<Object,Object> cache=grid(0).cache(CACHE_NAME_DHT);  cache.destroy();  checkDestroyed(cache);}  }
class C{  private String createFileNameFilterDescriptionFromExtensions(String description,String[] extensions){  String fullDescription=(description == null) ? "(" : description + " (";  fullDescription+="." + extensions[0];  for (int i=1; i < extensions.length; i++) {    fullDescription+=", .";    fullDescription+=extensions[i];  }  fullDescription+=")";  return fullDescription;}  }
class C{  private TaskResourceRep finishDeactivateTask(BlockConsistencyGroup consistencyGroup,String task){  URI id=consistencyGroup.getId();  Operation op=new Operation();  op.ready();  op.setProgress(100);  op.setResourceType(ResourceOperationTypeEnum.DELETE_CONSISTENCY_GROUP);  Operation status=_dbClient.createTaskOpStatus(BlockConsistencyGroup.class,id,task,op);  return toTask(consistencyGroup,task,status);}  }
class C{  public void deleteRange(DoubleNode<ILineSegment> left,DoubleNode<ILineSegment> right){  DoubleNode<ILineSegment> t;  if (left == null) {    t=dlstate.first();  } else {    t=successor(left);  }  while (t != right) {    dlstate.remove(t);    if (left == null) {      t=dlstate.first();    } else {      t=successor(left);    }  }}  }
class C{  protected double reportReturn(String methodCall,double value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public void loadArtistImage(final String key,final ImageView imageView){  loadImage(key,key,null,-1,imageView,ImageType.ARTIST);}  }
class C{  public void removeCardOffer(Offer offer){  ((AcceptedOfferBinder)getDataBinder(TYPE_CARDS)).remove(offer);}  }
class C{  public MutableDateTime add(int value){  iInstant.setMillis(getField().add(iInstant.getMillis(),value));  return iInstant;}  }
class C{  public TableInfo(DatabaseType databaseType,BaseDaoImpl<T,ID> baseDaoImpl,DatabaseTableConfig<T> tableConfig) throws SQLException {  this.baseDaoImpl=baseDaoImpl;  this.dataClass=tableConfig.getDataClass();  this.tableName=tableConfig.getTableName();  this.fieldTypes=tableConfig.getFieldTypes(databaseType);  FieldType findIdFieldType=null;  boolean foreignAutoCreate=false;  int foreignCollectionCount=0;  for (  FieldType fieldType : fieldTypes) {    if (fieldType.isId() || fieldType.isGeneratedId() || fieldType.isGeneratedIdSequence()) {      if (findIdFieldType != null) {        throw new SQLException("More than 1 idField configured for class " + dataClass + " ("+ findIdFieldType+ ","+ fieldType+ ")");      }      findIdFieldType=fieldType;    }    if (fieldType.isForeignAutoCreate()) {      foreignAutoCreate=true;    }    if (fieldType.isForeignCollection()) {      foreignCollectionCount++;    }  }  this.idField=findIdFieldType;  this.constructor=tableConfig.getConstructor();  this.foreignAutoCreate=foreignAutoCreate;  if (foreignCollectionCount == 0) {    this.foreignCollections=NO_FOREIGN_COLLECTIONS;  } else {    this.foreignCollections=new FieldType[foreignCollectionCount];    foreignCollectionCount=0;    for (    FieldType fieldType : fieldTypes) {      if (fieldType.isForeignCollection()) {        this.foreignCollections[foreignCollectionCount]=fieldType;        foreignCollectionCount++;      }    }  }}  }
class C{  protected void handleWorkspaceWorkingDirectoryButtonSelected(){  ContainerSelectionDialog containerDialog;  containerDialog=new ContainerSelectionDialog(getShell(),ResourcesPlugin.getWorkspace().getRoot(),false,TypeScriptUIMessages.Launch_MainTab_select_workingDir);  containerDialog.open();  Object[] resource=containerDialog.getResult();  String text=null;  if (resource != null && resource.length > 0) {    text=newVariableExpression("workspace_loc",((IPath)resource[0]).toString());  }  if (text != null) {    workDirectoryField.setText(text);  }}  }
class C{  void unregister(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> listenerMethodsForType=entry.getValue();    CopyOnWriteArraySet<Subscriber> currentSubscribers=subscribers.get(eventType);    if (currentSubscribers == null || !currentSubscribers.removeAll(listenerMethodsForType)) {      throw new IllegalArgumentException("missing event subscriber for an annotated method. Is " + listener + " registered?");    }  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (mDrawerToggle.onOptionsItemSelected(item)) {    return true;  }switch (item.getItemId()) {case R.id.action_search:    return true;case R.id.action_queue_drawer:  if (mDrawerLayout != null && mCurrentQueueDrawerLayout != null) {    if (mDrawerLayout.isDrawerOpen(mCurrentQueueDrawerLayout)) {      mDrawerLayout.closeDrawer(mCurrentQueueDrawerLayout);    } else {      mDrawerLayout.openDrawer(mCurrentQueueDrawerLayout);    }  }return true;case R.id.action_up:((FilesFoldersFragment)mCurrentFragment).getParentDir();return true;case R.id.action_paste:((FilesFoldersFragment)mCurrentFragment).pasteIntoCurrentDir(((FilesFoldersFragment)mCurrentFragment).copyMoveSourceFile);showMainActivityActionItems(getMenuInflater(),getMenu());return true;case R.id.action_cancel:((FilesFoldersFragment)mCurrentFragment).copyMoveSourceFile=null;if (((FilesFoldersFragment)mCurrentFragment).shouldMoveCopiedFile) Toast.makeText(mContext,R.string.move_canceled,Toast.LENGTH_LONG).show(); else Toast.makeText(mContext,R.string.copy_canceled,Toast.LENGTH_LONG).show();return true;default :return super.onOptionsItemSelected(item);}}  }
class C{  public SelectiveAccessHandler(String XMLFile){  loadConfig(XMLFile);}  }
class C{  private static BigInteger largePrime(int bitLength,int certainty,Random rnd){  BigInteger p;  p=new BigInteger(bitLength,rnd).setBit(bitLength - 1);  p.mag[p.mag.length - 1]&=0xfffffffe;  int searchLen=getPrimeSearchLen(bitLength);  BitSieve searchSieve=new BitSieve(p,searchLen);  BigInteger candidate=searchSieve.retrieve(p,certainty,rnd);  while ((candidate == null) || (candidate.bitLength() != bitLength)) {    p=p.add(BigInteger.valueOf(2 * searchLen));    if (p.bitLength() != bitLength)     p=new BigInteger(bitLength,rnd).setBit(bitLength - 1);    p.mag[p.mag.length - 1]&=0xfffffffe;    searchSieve=new BitSieve(p,searchLen);    candidate=searchSieve.retrieve(p,certainty,rnd);  }  return candidate;}  }
class C{  public boolean isEnabled(){  return getTextComponent().isEnabled();}  }
class C{  static <T extends VPlexResourceInfo>JSONObject createPostData(Map<String,String> argsMap,boolean includeForce) throws VPlexApiException {  try {    StringBuilder argsBuilder=new StringBuilder();    if (argsMap != null) {      Iterator<Entry<String,String>> argsIter=argsMap.entrySet().iterator();      while (argsIter.hasNext()) {        Entry<String,String> entry=argsIter.next();        if (argsBuilder.length() != 0) {          argsBuilder.append(" ");        }        argsBuilder.append(entry.getKey());        argsBuilder.append(" ");        argsBuilder.append(entry.getValue());      }    }    if (includeForce) {      argsBuilder.append(" ");      argsBuilder.append(VPlexApiConstants.ARG_FORCE);    }    JSONObject postDataObject=new JSONObject();    postDataObject.put(VPlexApiConstants.POST_DATA_ARG_KEY,argsBuilder.toString());    return postDataObject;  } catch (  Exception e) {    throw VPlexApiException.exceptions.failedCreatingPostDataForRequest(e);  }}  }
class C{  public Vertex createTypo(String text,Vertex meaning,Network network){  Vertex word=createWord(text,meaning,network,Primitive.TYPO);  return word;}  }
class C{  public static double floatToDoubleUpper(float f){  if (Float.isNaN(f)) {    return Double.NaN;  }  if (Float.isInfinite(f)) {    if (f > 0) {      return Double.POSITIVE_INFINITY;    } else {      return Double.longBitsToDouble(0xc7efffffffffffffL);    }  }  long bits=Double.doubleToRawLongBits((double)f);  if ((bits & 0x8000000000000000L) == 0) {    if (bits == 0L) {      return Double.longBitsToDouble(0x3690000000000000L);    }    if (f == Float.MIN_VALUE) {      return Double.longBitsToDouble(0x36a7ffffffffffffL);    }    if (Float.MIN_NORMAL > f && f >= Double.MIN_NORMAL) {      final long bits2=Double.doubleToRawLongBits((double)Math.nextUp(f));      bits=(bits >>> 1) + (bits2 >>> 1) - 1L;    } else {      bits+=0xfffffffL;    }    return Double.longBitsToDouble(bits);  } else {    if (bits == 0x8000000000000000L) {      return -0.0d;    }    if (f == -Float.MIN_VALUE) {      return Double.longBitsToDouble(0xb690000000000001L);    }    if (-Float.MIN_NORMAL < f && f <= -Double.MIN_NORMAL) {      final long bits2=Double.doubleToRawLongBits((double)Math.nextUp(f));      bits=(bits >>> 1) + (bits2 >>> 1) + 1L;    } else {      bits-=0xfffffffL;    }    return Double.longBitsToDouble(bits);  }}  }
class C{  public boolean flush(Set recipients,DistributedMember target,int processorType,boolean flushNewOps) throws InterruptedException {  Set recips=recipients;  if (Thread.interrupted()) {    throw new InterruptedException();  }  InternalDistributedMember myId=this.dm.getDistributionManagerId();  if (!recips.contains(target) && !myId.equals(target)) {    recips=new HashSet(recipients);    recips.add(target);  }  StateMarkerMessage smm=new StateMarkerMessage();  smm.relayRecipient=target;  smm.processorType=processorType;  smm.flushNewOps=flushNewOps;  if (region == null) {    smm.allRegions=true;  } else {    smm.regionPath=region.getFullPath();  }  smm.setRecipients(recips);  StateFlushReplyProcessor gfprocessor=new StateFlushReplyProcessor(dm,recips,target);  smm.processorId=gfprocessor.getProcessorId();  if (region != null && region.isUsedForPartitionedRegionBucket() && region.getDistributionConfig().getAckSevereAlertThreshold() > 0) {    smm.severeAlertEnabled=true;    gfprocessor.enableSevereAlertProcessing();  }  if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {    logger.trace(LogMarker.STATE_FLUSH_OP,"Sending {} with processor {}",smm,gfprocessor);  }  Set failures=this.dm.putOutgoing(smm);  if (failures != null) {    if (failures.contains(target)) {      if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {        logger.trace(LogMarker.STATE_FLUSH_OP,"failed to send StateMarkerMessage to target {}; returning from flush without waiting for replies",target);      }      return false;    }    gfprocessor.messageNotSentTo(failures);  }  try {    gfprocessor.waitForReplies();    if (logger.isTraceEnabled(LogMarker.STATE_FLUSH_OP)) {      logger.trace(LogMarker.STATE_FLUSH_OP,"Finished processing {}",smm);    }  } catch (  ReplyException re) {    logger.warn(LocalizedMessage.create(LocalizedStrings.StateFlushOperation_STATE_FLUSH_TERMINATED_WITH_EXCEPTION),re);    return false;  }  return true;}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  protected void fireCaretUpdate(CaretEvent e){  super.fireCaretUpdate(e);  if (isBracketMatchingEnabled()) {    doBracketMatching();  }}  }
class C{  @Override public void releaseResources(SamzaResource resource){  log.info("Release resource invoked {} ",resource);synchronized (lock) {    Container container=allocatedResources.get(resource);    if (container == null) {      log.info("Resource {} already released. ",resource);      return;    }    amClient.releaseAssignedContainer(container.getId());    allocatedResources.remove(resource);  }}  }
class C{  public List<Challenge> challenges(){  String responseField;  if (code == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";  } else   if (code == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";  } else {    return Collections.emptyList();  }  return OkHeaders.parseChallenges(headers(),responseField);}  }
class C{  public AllOrNoneMustBeSetGlobalConstraint(Parameter<?>... parameters){  this.parameterList=parameters;}  }
class C{  public SerialConnection(SerialParameters parameters){  this.parameters=parameters;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public BaseAdapterHelper addLinks(int viewId,int mask){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,mask);  return this;}  }
class C{  public void componentResized(final ComponentEvent e){}  }
class C{  private final int findActivityInHistoryLocked(ActivityRecord r,int task){  int i=mHistory.size();  while (i > 0) {    i--;    ActivityRecord candidate=mHistory.get(i);    if (candidate.finishing) {      continue;    }    if (candidate.task.taskId != task) {      break;    }    if (candidate.realActivity.equals(r.realActivity)) {      return i;    }  }  return -1;}  }
class C{  public boolean equals(parse_action other){  return other != null && other.kind() == ERROR;}  }
class C{  public void testGEOS_1() throws ParseException {  checkIntersection("LINESTRING (588750.7429703881 4518950.493668233, 588748.2060409798 4518933.9452804085)","LINESTRING (588745.824857241 4518940.742239175, 588748.2060437313 4518933.9452791475)",1,"POINT (588748.2060416829 4518933.945284994)",0);}  }
class C{  private static void addLeafWithNonExistingParents(Spatial root,Spatial leaf){  if (!(root instanceof Node)) {    logger.log(Level.WARNING,"Cannot add new Leaf {0} to {1}, is not a Node!",new Object[]{leaf.getName(),root.getName()});    return;  }  for (Spatial s=leaf; s.getParent() != null; s=s.getParent()) {    Spatial parent=s.getParent();    Spatial other=findTaggedSpatial(root,parent);    if (other == null) {      continue;    }    if (other instanceof Node) {      logger.log(Level.INFO,"Attaching {0} to {1} in root {2} to add leaf {3}",new Object[]{s,other,root,leaf});      for (Spatial spt=leaf; spt != parent; spt=spt.getParent()) {        spt.setUserData(ORIGINAL_NAME,spt.getName());        spt.setUserData(ORIGINAL_PATH,getSpatialPath(spt));        spt=spt.getParent();      }      Node otherNode=(Node)other;      otherNode.attachChild(s);      logger.log(LogLevel.USERINFO,"Attached Node {0} with leaf {0}",new Object[]{other.getName(),leaf.getName()});      return;    } else {      logger.log(Level.WARNING,"Cannot attach leaf {0} to found spatial {1} in root {2}, not a node.",new Object[]{leaf,other,root});    }  }  logger.log(Level.WARNING,"Could not attach new Leaf {0}, no root node found.",leaf.getName());}  }
class C{  private String testConfigurationKo(File conf,int port){  String errStr=null;  for (int i=0; i < PORT_TEST_LEN; i++) {    try {      errStr=testConfiguration(conf,port + testPort++);      break;    } catch (    BindException e) {    }  }  if (errStr == null) {    return "Configuration " + conf + " should have failed!";  }  System.out.println("Configuration " + conf + " failed as expected");  log.debug("runko","Error was: " + errStr);  return null;}  }
class C{  void stringConversion(Converter converter,String expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "' to String";  try {    Object result=converter.convert(String.class,value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public boolean isVisible(){  return m_isVisible;}  }
class C{  public OnTheFlyMarginalCalculator(BayesPm bayesPm,DataSet dataSet) throws IllegalArgumentException {  if (bayesPm == null) {    throw new NullPointerException();  }  if (dataSet == null) {    throw new NullPointerException();  }  BayesUtils.ensureVarsInData(bayesPm.getVariables(),dataSet);  this.bayesPm=new BayesPm(bayesPm);  Graph graph=bayesPm.getDag();  this.nodes=graph.getNodes().toArray(new Node[graph.getNodes().size()]);  initialize();  List<Node> variables=getVariables();  this.dataSet=dataSet.subsetColumns(variables);  this.evidence=new Evidence(Proposition.tautology(this));}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public void add(HeikinAshiItem dataItem,boolean notify){  if (!this.isEmpty()) {    HeikinAshiItem item0=(HeikinAshiItem)this.getDataItem(0);    if (!dataItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(dataItem,notify);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  j2DClient client=j2DClient.get();  if (client != null) {    client.requestQuit();  } else {    System.exit(0);  }  return true;}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeList clonedList=(NodeList)super.clone();  clonedList.cloneNodes();  return clonedList;}  }
class C{  public synchronized void saveToFile(){  Path file=Paths.get(fileName);  Path tempFile=Paths.get(fileName + "-temp");  LOGGER.info("Writing addressbook to " + fileName);  System.out.println("Saving addressbook.");  try (BufferedWriter writer=Files.newBufferedWriter(tempFile,CHARSET)){    for (    AddressbookEntry entry : entries.values()) {      writer.write(makeLine(entry));      writer.newLine();    }    saved=true;  } catch (  IOException ex) {    LOGGER.warning("Error writing addressbook: " + ex.getLocalizedMessage());  }  MiscUtil.moveFile(tempFile,file);}  }
class C{  public boolean isSupportsVlan(){  return supportsVlan;}  }
class C{  public static ComparisonResult compare(ComparisonParameters params){  DataSet dataSet;  Graph trueDag;  IndependenceTest test=null;  Score score=null;  ComparisonResult result=new ComparisonResult(params);  if (params.getDataFile() != null) {    dataSet=loadDataFile(params.getDataFile());    if (params.getGraphFile() == null) {      throw new IllegalArgumentException("True graph file not set.");    }    trueDag=loadGraphFile(params.getGraphFile());  } else {    if (params.getNumVars() == -1) {      throw new IllegalArgumentException("Number of variables not set.");    }    if (params.getNumEdges() == -1) {      throw new IllegalArgumentException("Number of edges not set.");    }    if (params.getDataType() == ComparisonParameters.DataType.Continuous) {      List<Node> nodes=new ArrayList<>();      for (int i=0; i < params.getNumVars(); i++) {        nodes.add(new ContinuousVariable("X" + (i + 1)));      }      trueDag=GraphUtils.randomGraphRandomForwardEdges(nodes,0,params.getNumEdges(),10,10,10,false,true);      if (params.getDataType() == null) {        throw new IllegalArgumentException("Data type not set or inferred.");      }      if (params.getSampleSize() == -1) {        throw new IllegalArgumentException("Sample size not set.");      }      LargeScaleSimulation sim=new LargeScaleSimulation(trueDag);      dataSet=sim.simulateDataFisher(params.getSampleSize());    } else     if (params.getDataType() == ComparisonParameters.DataType.Discrete) {      List<Node> nodes=new ArrayList<>();      for (int i=0; i < params.getNumVars(); i++) {        nodes.add(new DiscreteVariable("X" + (i + 1),3));      }      trueDag=GraphUtils.randomGraphRandomForwardEdges(nodes,0,params.getNumEdges(),10,10,10,false,true);      if (params.getDataType() == null) {        throw new IllegalArgumentException("Data type not set or inferred.");      }      if (params.getSampleSize() == -1) {        throw new IllegalArgumentException("Sample size not set.");      }      int[] tiers=new int[nodes.size()];      for (int i=0; i < nodes.size(); i++) {        tiers[i]=i;      }      BayesPm pm=new BayesPm(trueDag,3,3);      MlBayesIm im=new MlBayesIm(pm,MlBayesIm.RANDOM);      dataSet=im.simulateData(params.getSampleSize(),false,tiers);    } else {      throw new IllegalArgumentException("Unrecognized data type.");    }    if (dataSet == null) {      throw new IllegalArgumentException("No data set.");    }  }  if (params.getIndependenceTest() == ComparisonParameters.IndependenceTestType.FisherZ) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Continuous) {      throw new IllegalArgumentException("Data type previously set to something other than continuous.");    }    if (Double.isNaN(params.getAlpha())) {      throw new IllegalArgumentException("Alpha not set.");    }    test=new IndTestFisherZ(dataSet,params.getAlpha());    params.setDataType(ComparisonParameters.DataType.Continuous);  } else   if (params.getIndependenceTest() == ComparisonParameters.IndependenceTestType.ChiSquare) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Discrete) {      throw new IllegalArgumentException("Data type previously set to something other than discrete.");    }    if (Double.isNaN(params.getAlpha())) {      throw new IllegalArgumentException("Alpha not set.");    }    test=new IndTestChiSquare(dataSet,params.getAlpha());    params.setDataType(ComparisonParameters.DataType.Discrete);  }  if (params.getScore() == ComparisonParameters.ScoreType.SemBic) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Continuous) {      throw new IllegalArgumentException("Data type previously set to something other than continuous.");    }    if (Double.isNaN(params.getPenaltyDiscount())) {      throw new IllegalArgumentException("Penalty discount not set.");    }    SemBicScore semBicScore=new SemBicScore(new CovarianceMatrixOnTheFly(dataSet));    semBicScore.setPenaltyDiscount(params.getPenaltyDiscount());    score=semBicScore;    params.setDataType(ComparisonParameters.DataType.Continuous);  } else   if (params.getScore() == ComparisonParameters.ScoreType.BDeu) {    if (params.getDataType() != null && params.getDataType() != ComparisonParameters.DataType.Discrete) {      throw new IllegalArgumentException("Data type previously set to something other than discrete.");    }    if (Double.isNaN(params.getSamplePrior())) {      throw new IllegalArgumentException("Sample prior not set.");    }    if (Double.isNaN(params.getStructurePrior())) {      throw new IllegalArgumentException("Structure prior not set.");    }    score=new BDeuScore(dataSet);    ((BDeuScore)score).setSamplePrior(params.getSamplePrior());    ((BDeuScore)score).setStructurePrior(params.getStructurePrior());    params.setDataType(ComparisonParameters.DataType.Discrete);    params.setDataType(ComparisonParameters.DataType.Discrete);  }  if (params.getAlgorithm() == null) {    throw new IllegalArgumentException("Algorithm not set.");  }  long time1=System.currentTimeMillis();  if (params.getAlgorithm() == ComparisonParameters.Algorithm.PC) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    Pc search=new Pc(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.CPC) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    Cpc search=new Cpc(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.PCLocal) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    PcLocal search=new PcLocal(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.PCMax) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    PcMax search=new PcMax(test);    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.FGS) {    if (score == null)     throw new IllegalArgumentException("Score not set.");    Fgs search=new Fgs(score);    search.setFaithfulnessAssumed(params.isOneEdgeFaithfulnessAssumed());    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.FGS2) {    if (score == null)     throw new IllegalArgumentException("Score not set.");    Fgs search=new Fgs(score);    search.setFaithfulnessAssumed(params.isOneEdgeFaithfulnessAssumed());    result.setResultGraph(search.search());    result.setCorrectResult(SearchGraphUtils.patternForDag(trueDag));  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.FCI) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    Fci search=new Fci(test);    result.setResultGraph(search.search());    result.setCorrectResult(new DagToPag(trueDag).convert());  } else   if (params.getAlgorithm() == ComparisonParameters.Algorithm.GFCI) {    if (test == null)     throw new IllegalArgumentException("Test not set.");    GFci search=new GFci(test,score);    result.setResultGraph(search.search());    result.setCorrectResult(new DagToPag(trueDag).convert());  } else {    throw new IllegalArgumentException("Unrecognized algorithm.");  }  long time2=System.currentTimeMillis();  long elapsed=time2 - time1;  result.setElapsed(elapsed);  result.setTrueDag(trueDag);  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void appendAliasedColumn(StringBuilder sb,String colName,String tAlias){  if (tAlias != null) {    sb.append(tAlias);    sb.append(".");  }  sb.append("\"");  sb.append(colName);  sb.append("\"");}  }
class C{  protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {  Class res;  res=findLoadedClass(name);  if (res != null) {    System.out.println("FancyLoader.loadClass: " + name + " already loaded");    if (resolve)     resolveClass(res);    return res;  }  try {    res=findClass(name);    if (resolve)     resolveClass(res);  } catch (  ClassNotFoundException e) {  }  res=super.loadClass(name,resolve);  return res;}  }
class C{  public CylinderRegion(Match match,Vector base,double radius,double height){  super(new RegionBounds(match,Cuboid.between(new Vector(base.getX() - radius,base.getY(),base.getZ() - radius),new Vector(base.getX() + radius,base.getY() + height,base.getZ() + radius))));  this.base=base;  this.radius=radius;  this.height=height;}  }
class C{  @Override public void perform(IR ir){  DefUse.computeDU(ir);  DefUse.recomputeSSA(ir);  SimpleEscape analyzer=new SimpleEscape();  boolean removedAggregate;  do {    removedAggregate=false;    FI_EscapeSummary summary=analyzer.simpleEscapeAnalysis(ir);    for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=reg.getNext()) {      if (!reg.isSSA()) {        continue;      }      if (reg.defList == null) {        continue;      }      Instruction def=reg.defList.instruction;      if (ir.options.ESCAPE_SCALAR_REPLACE_AGGREGATES && summary.isMethodLocal(reg)) {        AggregateReplacer s=null;        if ((def.getOpcode() == NEW_opcode) || (def.getOpcode() == NEWARRAY_opcode)) {          s=getAggregateReplacer(def,ir);        }        if (s != null) {          s.transform();          removedAggregate=true;        }      }      if (ir.options.ESCAPE_MONITOR_REMOVAL && summary.isThreadLocal(reg)) {        UnsyncReplacer unsync=null;        if ((def.getOpcode() == NEW_opcode) || (def.getOpcode() == NEWARRAY_opcode)) {          unsync=getUnsyncReplacer(reg,def,ir);        }        if (unsync != null) {          unsync.transform();        }      }    }    if (removedAggregate) {      escapeCleanUp.perform(ir);    }  } while (removedAggregate);}  }
class C{  @SuppressWarnings("unused") public static void blackhole(byte value){}  }
class C{  @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.319 -0500",hash_original_method="C558B2B88CBF261C0FBBE5741F96019C",hash_generated_method="23C1BFB0F79EE3063A60285E2CC71033") @Override public void write(int b) throws IOException {  Streams.writeSingleByte(this,b);}  }
class C{  public SSLPermission(String name,String actions){  super(name,actions);}  }
class C{  public DisposableArray(final Array<? extends Type> array){  super(array);}  }
class C{  public double[] asRadiansArray(){  return new double[]{this.getLatitude().radians,this.getLongitude().radians};}  }
class C{  private static int[] stripLeadingZeroBytes(byte a[]){  int byteLength=a.length;  int keep;  for (keep=0; keep < byteLength && a[keep] == 0; keep++)   ;  int intLength=((byteLength - keep) + 3) >>> 2;  int[] result=new int[intLength];  int b=byteLength - 1;  for (int i=intLength - 1; i >= 0; i--) {    result[i]=a[b--] & 0xff;    int bytesRemaining=b - keep + 1;    int bytesToTransfer=Math.min(3,bytesRemaining);    for (int j=8; j <= (bytesToTransfer << 3); j+=8)     result[i]|=((a[b--] & 0xff) << j);  }  return result;}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);  this.lastMillisecond=getLastMillisecond(calendar);}  }
class C{  @Override public void fire(final Player player,final Sentence sentence,final EventRaiser speakerNPC){  final String monsters=player.getQuest(QUEST_SLOT,1);  int killed=getKilledCreaturesNumber(player);  int killsnumber=enemyForces.get(monsters).first();  int moneyreward=10000 * Rand.roll1D6();  if (killed == killsnumber) {    speakerNPC.say("Good work! Take these " + moneyreward + " coins. And if you need an assassin job again, ask me in one week. My advisors tell me they may try to fight me again.");  } else {    speakerNPC.say("Pretty good! You killed " + (killed - killsnumber) + " extra "+ Grammar.plnoun(killed - killsnumber,"soldier")+ "! Take these "+ moneyreward+ " coins, and remember, I may wish you to do this job again in one week!");  }  int karmabonus=5 * (2 * killed / killsnumber - 1);  final StackableItem money=(StackableItem)SingletonRepository.getEntityManager().getItem("money");  money.setQuantity(moneyreward);  player.equipOrPutOnGround(money);  player.addKarma(karmabonus);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public MalformedChallengeException(){  super();}  }
class C{  public IntroduceIndirectionDescriptor(){  super(IJavaRefactorings.INTRODUCE_INDIRECTION);}  }
class C{  public static boolean hasSetMethod(JField field,JClassType clazz){  String setterMethodName="set" + Character.toUpperCase(field.getName().charAt(0)) + field.getName().substring(1);  try {    return (clazz.getMethod(setterMethodName,new JType[]{field.getType()}) != null);  } catch (  Exception e) {    if (clazz.getSuperclass() == null) {      return false;    } else {      return hasSetMethod(field,clazz.getSuperclass());    }  }}  }
class C{  @Override public void drawNode(Graphics g,int w,int h){  if ((m_type & PURE_INPUT) == PURE_INPUT) {    g.setColor(Color.green);  } else {    g.setColor(Color.orange);  }  FontMetrics fm=g.getFontMetrics();  int l=(int)(m_x * w) - fm.stringWidth(m_id) / 2;  int t=(int)(m_y * h) - fm.getHeight() / 2;  g.fill3DRect(l,t,fm.stringWidth(m_id) + 4,fm.getHeight() + fm.getDescent() + 4,true);  g.setColor(Color.black);  g.drawString(m_id,l + 2,t + fm.getHeight() + 2);}  }
class C{  public void drawTo(Point2D that){  StdDraw.line(this.x,this.y,that.x,that.y);}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 9:case 8:case 7:case 6:case 5:case 4:case 3:case 12:case 11:case 2:case 1:case 10:    return true;default :  break;}return false;}  }
class C{  public static Path relativize(Path path){  return getCwd().relativize(path);}  }
class C{  @Override public void destroy(){  this.attribute=null;  this.filterConfig=null;}  }
class C{  public static double parseDoubleDefault(String s,double def){  if (s == null) {    return def;  }  try {    return Double.parseDouble(s);  } catch (  NumberFormatException e) {    return def;  }}  }
class C{  public static boolean accessibleForFolder(String agentName){  return accessibleForLevel(agentName,0);}  }
class C{  public static void sleep(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public List<Message> retrieve(){  return retrieve(100);}  }
class C{  public UserPhone(long phone,String title){  this.phone=phone;  this.title=title;}  }
class C{  public GroovyClassLoader(ClassLoader parent,CompilerConfiguration config,boolean useConfigurationClasspath){  super(EMPTY_URL_ARRAY,parent);  if (config == null)   config=CompilerConfiguration.DEFAULT;  this.config=config;  if (useConfigurationClasspath) {    for (    String path : config.getClasspath()) {      this.addClasspath(path);    }  }}  }
class C{  private ProcessorResult processEntity() throws ODataException {  TargetType targetType=getTargetType();  if (!targetType.isCollection()) {    Option<String> singletonName=ODataUriUtil.getSingletonName(getoDataUri());    if (singletonName.isDefined()) {      throw new ODataBadRequestException("The URI refers to the singleton '" + singletonName.get() + "'. Singletons cannot be deleted.");    }    Type type=getEntityDataModel().getType(targetType.typeName());    DataSource dataSource=getDataSource(type.getFullyQualifiedName());    log.debug("Data source found for entity type '{}'",type.getFullyQualifiedName());    dataSource.delete(getoDataUri(),getEntityDataModel());    return new ProcessorResult(NO_CONTENT);  } else {    throw new ODataBadRequestException("The URI for a DELETE request should refer to the single entity " + "to be deleted, not to a collection of entities.");  }}  }
class C{  public Matrix arrayRightDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] / B.A[i][j];    }  }  return X;}  }
class C{  public double[] prob_x(double z_[]){  Matrix z=new Matrix(MatrixUtils.addBias(z_),1);  double x[]=MatrixUtils.sigma(z.times(W.transpose()).getArray()[0]);  return MatrixUtils.removeBias(x);}  }
class C{  public Connection connect(String url,final Properties info) throws SQLException {  if (url == null) {    throw new SQLException("url is null");  }  final GDSType type=GDSFactory.getTypeForProtocol(url);  if (type == null) {    return null;  }  final Properties mergedProperties=mergeProperties(url,info);  final Map<String,String> normalizedInfo=FBDriverPropertyManager.normalize(mergedProperties);  try {    int qMarkIndex=url.indexOf('?');    if (qMarkIndex != -1) {      url=url.substring(0,qMarkIndex);    }    FBManagedConnectionFactory mcf=new FBManagedConnectionFactory(type);    String databaseURL=GDSFactory.getDatabasePath(type,url);    mcf.setDatabase(databaseURL);    for (    Map.Entry<String,String> entry : normalizedInfo.entrySet()) {      mcf.setNonStandardProperty(entry.getKey(),entry.getValue());    }    FBTpbMapper.processMapping(mcf,mergedProperties);    mcf=mcf.canonicalize();    FBDataSource dataSource=createDataSource(mcf);    return dataSource.getConnection(mcf.getUserName(),mcf.getPassword());  } catch (  ResourceException|GDSException resex) {    throw new FBSQLException(resex);  }}  }
class C{  public String host(Properties props){  return props.getProperty(HOST_PROPERTY_KEY,"localhost");}  }
class C{  public boolean created(String replicationGroupName,URI systemURI){  boolean status=false;  if (getSystemConsistencyGroups() != null && replicationGroupName != null && systemURI != null) {    StringSet replicationNameSet=getSystemConsistencyGroups().get(systemURI.toString());    if (replicationNameSet != null) {      Iterator<String> replicationNameIterator=replicationNameSet.iterator();      while (replicationNameIterator.hasNext()) {        String replicationName=replicationNameIterator.next();        if (replicationGroupName.equals(replicationName)) {          status=true;          break;        }      }    }  }  return status;}  }
class C{  public void writeDiff(final Task<Diff> diff) throws IOException {  writeDiff(diff,0);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void createStandardGroupsIn(GeneralCommandLine commandLine){  ParametersList params=commandLine.getParametersList();  params.addParamsGroup(GROUP_EXE_OPTIONS);  params.addParamsGroup(GROUP_DEBUGGER);  params.addParamsGroup(GROUP_PROFILER);  params.addParamsGroup(GROUP_SCRIPT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:21.331 -0400",hash_original_method="C8355C5823499E966C6E9C9BBED7B59B",hash_generated_method="9159C99DD868B027F6EA2DFF5B80A576") public final boolean isRemovable(){  return mRemovable;}  }
class C{  private QueryBuilderKraken parseCreate(){  Token token;  if ((token=scanToken()) != Token.TABLE)   throw error("expected TABLE at '{0}'",token);  if ((token=scanToken()) != Token.IDENTIFIER)   throw error("expected identifier at '{0}'",token);  String name=_lexeme;  String pod=null;  while (peekToken() == Token.DOT) {    scanToken();    if ((token=scanToken()) != Token.IDENTIFIER) {      throw error("expected identifier at '{0}'",token);    }    if (pod == null) {      pod=name;    } else {      pod=pod + '.' + name;    }    name=_lexeme;  }  if (pod == null) {    pod=getPodName();  }  TableBuilderKraken factory=new TableBuilderKraken(pod,name,_sql);  if ((token=scanToken()) != Token.LPAREN) {    throw error("expected '(' at '{0}'",token);  }  do {    token=scanToken();switch (token) {case IDENTIFIER:      parseCreateColumn(factory,_lexeme);    break;case PRIMARY:  token=scanToken();if (token != Token.KEY) throw error("expected 'key' at {0}",token);factory.addPrimaryKey(parseColumnNames());break;case KEY:factory.addPrimaryKey(parseColumnNames());break;default :throw error("unexpected token '{0}'",token);}token=scanToken();} while (token == Token.COMMA);if (token != Token.RPAREN) {throw error("expected ')' at '{0}'",token);}token=scanToken();HashMap<String,String> propMap=new HashMap<>();if (token == Token.WITH) {do {String key=parseIdentifier();ExprKraken expr=parseExpr();if (!(expr instanceof LiteralExpr)) {throw error("WITH expression must be a literal at '{0}'",expr);}String value=expr.evalString(null);propMap.put(key,value);} while ((token=scanToken()) == Token.COMMA);}if (token != Token.EOF) {throw error("Expected end of file at '{0}'",token);}return new CreateQueryBuilder(_tableManager,factory,_sql,propMap);}  }
class C{  public static <K,V>SynchronizedSortedSetMultimap<K,V> of(MutableSortedSetMultimap<K,V> multimap,Object lock){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedSortedSetMultimap for null");  }  return new SynchronizedSortedSetMultimap<>(multimap,lock);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  Fields(List<ClassFields> fields){  this.fields=fields;  if (fields.isEmpty())   ownFields=null; else {    ownFields=new ArrayList<>(fields.size());    for (    FieldInfo f : fields.get(fields.size() - 1).fields()) {      if (f.field() != null)       ownFields.add(f.field);    }  }}  }
class C{  static public String removeUnderScores(String data){  String temp=null;  StringBuffer out=new StringBuffer();  temp=data;  StringTokenizer st=new StringTokenizer(temp,"_");  while (st.hasMoreTokens()) {    String element=(String)st.nextElement();    out.append(firstLetterCaps(element));  }  return out.toString();}  }
class C{  protected void drawArrow(Graphics g,int x1,int y1,int x2,int y2){  if (x1 == x2) {    if (y1 < y2) {      g.drawLine(x2,y2,x2 + 4,y2 - 8);      g.drawLine(x2,y2,x2 - 4,y2 - 8);    } else {      g.drawLine(x2,y2,x2 + 4,y2 + 8);      g.drawLine(x2,y2,x2 - 4,y2 + 8);    }  } else {    double hyp=0, base=0, perp=0, theta, beta;    int x3=0, y3=0;    if (x2 < x1) {      base=x1 - x2;      hyp=Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));      theta=Math.acos(base / hyp);    } else {      base=x1 - x2;      hyp=Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));      theta=Math.acos(base / hyp);    }    beta=30 * Math.PI / 180;    hyp=8;    base=Math.cos(theta - beta) * hyp;    perp=Math.sin(theta - beta) * hyp;    x3=(int)(x2 + base);    if (y1 < y2) {      y3=(int)(y2 - perp);    } else {      y3=(int)(y2 + perp);    }    g.drawLine(x2,y2,x3,y3);    base=Math.cos(theta + beta) * hyp;    perp=Math.sin(theta + beta) * hyp;    x3=(int)(x2 + base);    if (y1 < y2) {      y3=(int)(y2 - perp);    } else {      y3=(int)(y2 + perp);    }    g.drawLine(x2,y2,x3,y3);  }}  }
class C{  private void scrollIntoSlots(){  if (getChildCount() == 0 || mSelectedChild == null)   return;  int selectedCenter=getCenterOfView(mSelectedChild);  int targetCenter=getCenterOfGallery();  int scrollAmount=targetCenter - selectedCenter;  if (scrollAmount != 0) {    mFlingRunnable.startUsingDistance(scrollAmount);  } else {    onFinishedMovement();  }}  }
class C{  public void update() throws AcmeException {  LOG.debug("update");  try (Connection conn=getSession().provider().connect()){    int rc=conn.sendRequest(getLocation(),getSession());    if (rc != HttpURLConnection.HTTP_OK && rc != HttpURLConnection.HTTP_ACCEPTED) {      conn.throwAcmeException();    }    unmarshall(conn.readJsonResponse());    if (rc == HttpURLConnection.HTTP_ACCEPTED) {      Date retryAfter=conn.getRetryAfterHeader();      if (retryAfter != null) {        throw new AcmeRetryAfterException("challenge is not completed yet",retryAfter);      }    }  } catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public static DetachedBaggage fork(){  return DetachedBaggage.wrap(current.get()).split();}  }
class C{  public static com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder newBuilder(com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder other){  return new com.ebay.jetstream.event.processor.hdfs.TestRecord.Builder(other);}  }
class C{  @Override public String createResults(SpatialCutter spatialEventCutter,int scaleFactor){  this.scaleFactor=scaleFactor;  this.modes.clear();  this.activities.clear();  this.spatialEventCutter=spatialEventCutter;  analyzeEvents();  String results=getTripResults();  results+=ScenarioAnalyzer.NL;  results+=getActivityResults();  return results;}  }
class C{  public static boolean stopRunningService(Context context,String className){  Intent intent_service=null;  boolean ret=false;  try {    intent_service=new Intent(context,Class.forName(className));  } catch (  Exception e) {    e.printStackTrace();  }  if (intent_service != null) {    ret=context.stopService(intent_service);  }  return ret;}  }
class C{  @Override public int hashCode(){  int hash=super.hashCode();  hash=HashUtilities.hashCode(hash,this.itemMargin);  hash=HashUtilities.hashCode(hash,this.maxItemWidth);  return hash;}  }
class C{  public int length(){  return nextFencePost;}  }
class C{  private boolean ModifyFavorites(MenuItem item){  if (databaseManager.checkFavorite(lastComicNumber)) {    new DeleteComicImageTask().execute(false);    item.setIcon(R.drawable.ic_favorite_outline);  } else {    new SaveComicImageTask().execute(false);    item.setIcon(R.drawable.ic_action_favorite);  }  return true;}  }
class C{  public static BigInteger toBigIntegerValue(Object decoded){  return new BigInteger((byte[])decoded);}  }
class C{  public void reinitElements(){  this.removeAll();  initElements();}  }
class C{  public void insertInBatches(List<Stat> records,int partitionSize,DbClient dbClient){  List<List<Stat>> stat_partitions=Lists.partition(records,partitionSize);  for (  List<Stat> partition : stat_partitions) {    Stat[] statBatch=new Stat[partition.size()];    statBatch=partition.toArray(statBatch);    try {      dbClient.insertTimeSeries(StatTimeSeries.class,statBatch);      _log.info("{} Stat records persisted to DB",statBatch.length);    } catch (    DatabaseException e) {      _log.error("Error inserting time series records into the database",e);    }  }}  }
class C{  @MediumTest public void testDragWith2Points(){  long t=System.currentTimeMillis();  VelocityTracker vt=VelocityTracker.obtain();  drag(vt,100,200,100,200,2,t,100);  vt.computeCurrentVelocity(1000);  assertEquals(1000.0f,vt.getXVelocity());  assertEquals(1000.0f,vt.getYVelocity());  vt.recycle();}  }
class C{  public void write(byte[] buff,int off,int len){  System.arraycopy(buff,off,data,pos,len);  pos+=len;}  }
class C{  public SnmpGauge(long v) throws IllegalArgumentException {  super(v);}  }
class C{  private String secondsToTime(int seconds){  String time="";  String minutesText=String.valueOf(seconds / 60);  if (minutesText.length() == 1)   minutesText="0" + minutesText;  String secondsText=String.valueOf(seconds % 60);  if (secondsText.length() == 1)   secondsText="0" + secondsText;  time=minutesText + ":" + secondsText;  return time;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.FIELD_ACCESSOR___GET_DECLARED_TYPE_REF:    return getDeclaredTypeRef();case N4JSPackage.FIELD_ACCESSOR___GET_DEFINED_ACCESSOR:  return getDefinedAccessor();case N4JSPackage.FIELD_ACCESSOR___GET_NAME:return getName();case N4JSPackage.FIELD_ACCESSOR___IS_VALID_NAME:return isValidName();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public boolean isLive(ObjectReference object){  return RCBase.isRCObject(object) && RCHeader.isLiveRC(object) || super.isLive(object);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(", sequence: ");  result.append(sequence);  result.append(')');  return result.toString();}  }
class C{  public void onPutOnGround(final boolean expire){  if (expire) {    SingletonRepository.getTurnNotifier().notifyInSeconds(DEGRADATION_TIMEOUT,this);  }}  }
class C{  public void testSenderWithSpringXml() throws Exception {  String config="spring.xml";  assertSenderConfig(config);}  }
class C{  public JDBFileFilter(){  this.filters=new Hashtable<String,JDBFileFilter>();}  }
class C{  public boolean isMineOrWatched(Wallet wallet){  return isMine(wallet) || isWatched(wallet);}  }
class C{  public void removeAll(){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=false;  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  @NotNull @ObjectiveCName("bindFileWithReference:autoStart:withCallback:") public FileVM bindFile(FileReference fileReference,boolean isAutoStart,FileVMCallback callback){  return new FileVM(fileReference,isAutoStart,modules,callback);}  }
class C{  public TimelineTrackBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,TimelineTrack.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.sequence == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,TimelineTrack.ERROR_DESCRIPTION_PREFIX + "sequence is null");  }  if (this.edit_rate == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,TimelineTrack.ERROR_DESCRIPTION_PREFIX + "edit_rate is null");  }}  }
class C{  private String numberToNational(String number){  final PhoneNumberUtil util=PhoneNumberUtil.getInstance();  try {    final Phonenumber.PhoneNumber phoneNumber=util.parse(number,mCountryCode);    return String.valueOf(phoneNumber.getNationalNumber());  } catch (  NumberParseException e) {    return "";  }}  }
class C{  void fire(){  final IGame game=clientgui.getClient().getGame();  final int weaponNum=clientgui.mechD.wPan.getSelectedWeaponNum();  Mounted mounted=ce().getEquipment(weaponNum);  if ((ce() == null) || (target == null && (!isStrafing || strafingCoords.size() == 0)) || (mounted == null)|| !(mounted.getType() instanceof WeaponType)) {    throw new IllegalArgumentException("current fire parameters are invalid");  }  if (!game.getOptions().booleanOption("no_forced_primary_targets") && (ce() instanceof Mech) || (ce() instanceof Tank) || (ce() instanceof Protomech)) {    EntityAction lastAction=null;    try {      lastAction=attacks.lastElement();    } catch (    NoSuchElementException ex) {    }    if ((lastAction != null) && (lastAction instanceof WeaponAttackAction)) {      WeaponAttackAction oldWaa=(WeaponAttackAction)lastAction;      Targetable oldTarget=oldWaa.getTarget(game);      if (!oldTarget.equals(target)) {        boolean oldInFront=Compute.isInArc(ce().getPosition(),ce().getSecondaryFacing(),oldTarget,ce().getForwardArc());        boolean curInFront=Compute.isInArc(ce().getPosition(),ce().getSecondaryFacing(),target,ce().getForwardArc());        if (!oldInFront && curInFront) {          String title=Messages.getString("FiringDisplay.SecondaryTargetToHitChange.title");          String body=Messages.getString("FiringDisplay.SecondaryTargetToHitChange.message");          if (!clientgui.doYesNoDialog(title,body)) {            return;          }        }      }    }  }  if (GUIPreferences.getInstance().getAutoDeclareSearchlight() && ce().isUsingSpotlight()) {    doSearchlight();  }  ArrayList<Targetable> targets=new ArrayList<Targetable>();  if (isStrafing) {    for (    Coords c : strafingCoords) {      targets.add(new HexTarget(c,game.getBoard(),Targetable.TYPE_HEX_CLEAR));      Building bldg=game.getBoard().getBuildingAt(c);      if (bldg != null) {        targets.add(new BuildingTarget(c,game.getBoard(),false));      }      for (      Entity t : game.getEntitiesVector(c)) {        boolean infInBuilding=Compute.isInBuilding(game,t) && (t instanceof Infantry);        if (!t.isAirborne() && !infInBuilding) {          targets.add(t);        }      }    }  } else {    targets.add(target);  }  boolean firstShot=true;  for (  Targetable t : targets) {    WeaponAttackAction waa;    if (!mounted.getType().hasFlag(WeaponType.F_ARTILLERY)) {      waa=new WeaponAttackAction(cen,t.getTargetType(),t.getTargetId(),weaponNum);    } else {      waa=new ArtilleryAttackAction(cen,t.getTargetType(),t.getTargetId(),weaponNum,game);    }    if (mounted.getType().hasFlag(WeaponType.F_SPACE_BOMB)) {      int[] payload=getBombPayload(true,-1);      waa.setBombPayload(payload);    } else     if (mounted.getType().hasFlag(WeaponType.F_DIVE_BOMB)) {      int[] payload=getBombPayload(false,-1);      waa.setBombPayload(payload);    } else     if (mounted.getType().hasFlag(WeaponType.F_ALT_BOMB)) {      int[] payload=getBombPayload(false,2);      waa.setBombPayload(payload);    }    if ((mounted.getLinked() != null) && (((WeaponType)mounted.getType()).getAmmoType() != AmmoType.T_NA) && (mounted.getLinked().getType() instanceof AmmoType)) {      Mounted ammoMount=mounted.getLinked();      AmmoType ammoType=(AmmoType)ammoMount.getType();      waa.setAmmoId(ce().getEquipmentNum(ammoMount));      if (((ammoType.getMunitionType() == AmmoType.M_THUNDER_VIBRABOMB) && ((ammoType.getAmmoType() == AmmoType.T_LRM) || (ammoType.getAmmoType() == AmmoType.T_MML))) || (ammoType.getMunitionType() == AmmoType.M_VIBRABOMB_IV)) {        VibrabombSettingDialog vsd=new VibrabombSettingDialog(clientgui.frame);        vsd.setVisible(true);        waa.setOtherAttackInfo(vsd.getSetting());      }    }    if (ash.allowAimedShotWith(mounted) && ash.inAimingMode() && ash.isAimingAtLocation()) {      waa.setAimedLocation(ash.getAimingAt());      waa.setAimingMode(ash.getAimingMode());    } else {      waa.setAimedLocation(Entity.LOC_NONE);      waa.setAimingMode(IAimingModes.AIM_MODE_NONE);    }    waa.setStrafing(isStrafing);    waa.setStrafingFirstShot(firstShot);    firstShot=false;    attacks.addElement(waa);    game.addAction(waa);  }  clientgui.minimap.drawMap();  mounted.setUsedThisRound(true);  int nextWeapon=clientgui.mechD.wPan.getNextWeaponNum();  updateClearTurret();  updateClearWeaponJam();  if ((nextWeapon == -1) && GUIPreferences.getInstance().getAutoEndFiring()) {    ready();    return;  }  clientgui.mechD.wPan.displayMech(ce());  Mounted nextMounted=ce().getEquipment(nextWeapon);  if (!mounted.getType().hasFlag(WeaponType.F_VGL) && (nextMounted != null) && nextMounted.getType().hasFlag(WeaponType.F_VGL)) {    clientgui.mechD.wPan.setPrevTarget(target);  }  clientgui.mechD.wPan.selectWeapon(nextWeapon);  updateTarget();}  }
class C{  public void onError(String message,int errorCode){}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  final public static boolean approximately_equal(double a,double b){  return (Math.abs(a - b) <= EQUIVALENT_TOLERANCE);}  }
class C{  public NorwegianMinimalStemFilter(TokenStream input,int flags){  super(input);  this.stemmer=new NorwegianMinimalStemmer(flags);}  }
class C{  public static NurbsCurve createArc(Origin3D o,float r,float thetaStart,float thetaEnd){  Vec3D tmp=new Vec3D();  if (thetaEnd < thetaStart) {    thetaEnd+=MathUtils.TWO_PI;  }  double theta=thetaEnd - thetaStart;  int narcs=4;  if (theta <= MathUtils.HALF_PI) {    narcs=1;  } else   if (theta <= MathUtils.PI) {    narcs=2;  } else   if (theta <= MathUtils.THREE_HALVES_PI) {    narcs=3;  }  double dtheta=theta / narcs;  int n=2 * narcs;  double w1=Math.cos(dtheta / 2);  final float sinStart=(float)Math.sin(thetaStart);  final float cosStart=(float)Math.cos(thetaStart);  tmp.set(o.xAxis).scaleSelf(r * cosStart);  Vec3D p0=new Vec3D(o.origin).addSelf(tmp);  tmp.set(o.yAxis).scaleSelf(r * sinStart);  p0.addSelf(tmp);  tmp.set(o.yAxis).scaleSelf(cosStart);  Vec3D t0=new Vec3D(o.xAxis).scaleSelf(-sinStart).addSelf(tmp);  Vec4D[] cps=new Vec4D[n + 1];  cps[0]=new Vec4D(p0,1);  int index=0;  double angle=thetaStart;  Vec3D p1=new Vec3D();  Vec3D p2=new Vec3D();  Vec3D t2=new Vec3D();  for (int i=1; i <= narcs; i++) {    angle+=dtheta;    final double sin=Math.sin(angle);    final double cos=Math.cos(angle);    tmp.set(o.xAxis).scaleSelf((float)(r * cos));    p2.set(o.origin).addSelf(tmp);    tmp.set(o.yAxis).scaleSelf((float)(r * sin));    p2.addSelf(tmp);    cps[index + 2]=new Vec4D(p2,1);    t2.set(o.xAxis).scaleSelf((float)-sin);    tmp.set(o.yAxis).scaleSelf((float)cos);    t2.addSelf(tmp);    lineIntersect3D(p0,t0,p2,t2,p1,p1);    cps[index + 1]=new Vec4D(p1,(float)w1);    index+=2;    if (i < narcs) {      p0.set(p2);      t0.set(t2);    }  }  int j=n + 1;  float[] uKnot=new float[j + 3];  for (int i=0; i < 3; i++) {    uKnot[i + j]=1;  }switch (narcs) {case 2:    uKnot[3]=0.5f;  uKnot[4]=0.5f;break;case 3:uKnot[3]=uKnot[4]=MathUtils.THIRD;uKnot[5]=uKnot[6]=2 * MathUtils.THIRD;break;case 4:uKnot[3]=0.25f;uKnot[4]=0.25f;uKnot[5]=0.5f;uKnot[6]=0.5f;uKnot[7]=0.75f;uKnot[8]=0.75f;break;}return new BasicNurbsCurve(cps,uKnot,2);}  }
class C{  protected void verify(String subId,Date periods[][],BigDecimal expectedPrice,BigDecimal discountAmount,int paramTestMonth,Long startTime,Long endTime) throws Exception {  Document doc=getBillingDocumentAndVerifyPeriod(subId,paramTestMonth,startTime,endTime);  verify(doc,subId,periods,expectedPrice,discountAmount);}  }
class C{  public void next(){  index++;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int addFontDictionary() throws IOException {  Collection<Entry> fonts=getEntries();  if (fonts.size() > 0) {    PDFDictionary fontList=pdf.openDictionary("FontList");    for (Iterator<Entry> i=fonts.iterator(); i.hasNext(); ) {      Entry e=(Entry)i.next();      fontList.entry(e.getReference(),pdf.ref(e.getReference()));    }    pdf.close(fontList);  }  return fonts.size();}  }
class C{  final void forceAddValue(String value){  Object store=value;  if (value.length() > STRING_COMPRESS_THRESHOLD) {    try {      store=new SerializedObject(value,true);    } catch (    Exception ex) {      System.err.println("Couldn't compress string attribute value -" + " storing uncompressed.");    }  }  ((NominalAttributeInfo)m_AttributeInfo).m_Values.add(store);  ((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.put(store,new Integer(((NominalAttributeInfo)m_AttributeInfo).m_Values.size() - 1));}  }
class C{  public static boolean parseCaseLabel(PsiBuilder builder,GroovyParser parser){  IElementType elem=builder.getTokenType();  if (elem != GroovyTokenTypes.kCASE && elem != GroovyTokenTypes.kDEFAULT) {    return false;  }  PsiBuilder.Marker label=builder.mark();  builder.advanceLexer();  if (GroovyTokenTypes.kCASE.equals(elem) && !AssignmentExpression.parse(builder,parser)) {    builder.error(GroovyBundle.message("expression.expected"));  }  ParserUtils.getToken(builder,GroovyTokenTypes.mCOLON,GroovyBundle.message("colon.expected"));  label.done(GroovyElementTypes.CASE_LABEL);  PsiBuilder.Marker beforeNls=builder.mark();  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);  if (parseCaseLabel(builder,parser)) {    beforeNls.drop();  } else {    beforeNls.rollbackTo();  }  return true;}  }
class C{  public void testContainsClassInWebinfLib() throws Exception {  WarArchive war=new DefaultWarArchive(getResourcePath(PACKAGE_PATH + "containsclasslib.war"));  assertTrue(war.containsClass("test.Test"));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node childNode;  Node clonedNode;  Node lastChildNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  childNode=childList.item(3);  clonedNode=childNode.cloneNode(false);  lastChildNode=clonedNode.getLastChild();  assertNull("noTextNodes",lastChildNode);}  }
class C{  public void sendStream(InputStream is,long readLength) throws IOException {  byte[] buffer=new byte[BUFFER_DEFAULT_SIZE];  long remainingReadLength=readLength;  int read;  while (remainingReadLength > 0) {    read=is.read(buffer,0,Math.min((int)remainingReadLength,BUFFER_DEFAULT_SIZE));    if (read == -1) {      return;    }    write(buffer,0,read);    remainingReadLength-=read;  }}  }
class C{  public boolean isSpannedBy(MIMEType other,boolean compareParams){  return other.spans(this,compareParams);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenomodificationallowederrEE.class,args);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void decrypt(byte[] in,int length){  int pos=0;  while (pos < in.length && pos < length) {    decryptBlock(in,pos,length);    pos+=blockSize;  }}  }
class C{  public DropListenerSupport(MapBean map){  setMap(map);}  }
class C{  public LineRenderer3D(){  super(true,false);  this.xOffset=DEFAULT_X_OFFSET;  this.yOffset=DEFAULT_Y_OFFSET;  this.wallPaint=DEFAULT_WALL_PAINT;}  }
class C{  private boolean lastSeekingWasLongAgo(){  if (lastSeekingTime == null) {    return true;  }  return (new Date()).getTime() - lastSeekingTime.getTime() > LONG_AGO_THRESHOLD;}  }
class C{  public double recall(){  return bCubedRecall;}  }
class C{  public static void readyGo(Activity activity,Class<?> className){  readyGo(activity,className,false);}  }
class C{  public static boolean isNL(char c){  return c == '\n' || c == '\r';}  }
class C{  public static long floor(double value){  return Math.round(Math.floor(value));}  }
class C{  private void populateRecyclerList(){  planAdapter.setBasePlanInfo(basePlan);  planAdapter.setDataCycle(dataCycle);  planAdapter.setTalkCycle(talkCycle);  planAdapter.setTextCycle(textCycle);  planAdapter.setAcceptedOfferHeader(new RecyclerDivider(resources.getString(R.string.plan_picks_header),0));  planAdapter.setOffers(offers);}  }
class C{  public static GeoPoint decodePoint(final long docValue){  return new GeoPoint(decodeX(((int)(docValue >> 42)) & 0x1FFFFF),decodeY(((int)(docValue >> 21)) & 0x1FFFFF),decodeZ(((int)(docValue)) & 0x1FFFFF));}  }
class C{  static void updateHash(int[] intArray,byte[] byteInput,int fromByte,int toByte){  int index=intArray[BYTES_OFFSET];  int i=fromByte;  int maxWord;  int nBytes;  int wordIndex=index >> 2;  int byteIndex=index & 0x03;  intArray[BYTES_OFFSET]=(index + toByte - fromByte + 1) & 077;  if (byteIndex != 0) {    for (; (i <= toByte) && (byteIndex < 4); i++) {      intArray[wordIndex]|=(byteInput[i] & 0xFF) << ((3 - byteIndex) << 3);      byteIndex++;    }    if (byteIndex == 4) {      wordIndex++;      if (wordIndex == 16) {        computeHash(intArray);        wordIndex=0;      }    }    if (i > toByte) {      return;    }  }  maxWord=(toByte - i + 1) >> 2;  for (int k=0; k < maxWord; k++) {    intArray[wordIndex]=(((int)byteInput[i] & 0xFF) << 24) | (((int)byteInput[i + 1] & 0xFF) << 16) | (((int)byteInput[i + 2] & 0xFF) << 8)| (((int)byteInput[i + 3] & 0xFF));    i+=4;    wordIndex++;    if (wordIndex < 16) {      continue;    }    computeHash(intArray);    wordIndex=0;  }  nBytes=toByte - i + 1;  if (nBytes != 0) {    int w=((int)byteInput[i] & 0xFF) << 24;    if (nBytes != 1) {      w|=((int)byteInput[i + 1] & 0xFF) << 16;      if (nBytes != 2) {        w|=((int)byteInput[i + 2] & 0xFF) << 8;      }    }    intArray[wordIndex]=w;  }  return;}  }
class C{  public static void finalizeAllEnqueued() throws InterruptedException {  Sentinel sentinel=new Sentinel();  enqueueSentinelReference(sentinel);  sentinel.awaitFinalization();}  }
class C{  public void fillFooter(final Map<String,Object> dataModel) throws Exception {  fillSysInfo(dataModel);  dataModel.put(Common.YEAR,String.valueOf(Calendar.getInstance().get(Calendar.YEAR)));  dataModel.put(Common.SITE_VISIT_STAT_CODE,Symphonys.get("siteVisitStatCode"));}  }
class C{  public TriangleMesh(String name,int numV,int numF){  init(name,numV,numF);}  }
class C{  public static boolean isPrimitiveArray(Object obj){  Class<?> cls=obj.getClass();  return cls.isArray() && cls.getComponentType().isPrimitive();}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=loader.getResource(classnameAsResource);  return it != null ? it.toString() : null;}  }
class C{  public static boolean checkALError(){  return checkALError("");}  }
class C{  public APPlatformException(String message){  super(message);  this.messages=new ArrayList<LocalizedText>();  this.messages.add(new LocalizedText(DEFAULT_LOCALE,message));}  }
class C{  public void test_load_graphs() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="load <http://www.bigdata.com/data>;\n" + "load <http://www.bigdata.com/data1>;" + "load <http://www.bigdata.com/data2>";  final UpdateRoot expected=new UpdateRoot();{    final LoadGraph op=new LoadGraph();    expected.addChild(op);    final RDFParserOptions options=new RDFParserOptions();    op.setSourceGraph(new ConstantNode(makeIV(valueFactory.createURI("http://www.bigdata.com/data"))));  }{    final LoadGraph op=new LoadGraph();    expected.addChild(op);    final RDFParserOptions options=new RDFParserOptions();    op.setSourceGraph(new ConstantNode(makeIV(valueFactory.createURI("http://www.bigdata.com/data1"))));  }{    final LoadGraph op=new LoadGraph();    expected.addChild(op);    final RDFParserOptions options=new RDFParserOptions();    op.setSourceGraph(new ConstantNode(makeIV(valueFactory.createURI("http://www.bigdata.com/data2"))));  }  final UpdateRoot actual=parseUpdate(sparql,baseURI);  assertSameAST(sparql,expected,actual);}  }
class C{  public void warning(SAXParseException exception) throws SAXException {}  }
class C{  public IndTestProbabilisticVerbose(DataSet dataSet,PrintWriter out,IndTestDSep dsepTest){  this.out=out;  this.dsepTest=dsepTest;  if (!dataSet.isDiscrete()) {    throw new IllegalArgumentException("Not a discrete data set.");  }  this.data=dataSet;  int[] nodeDimensions=new int[dataSet.getNumColumns() + 2];  for (int j=0; j < dataSet.getNumColumns(); j++) {    DiscreteVariable variable=(DiscreteVariable)(dataSet.getVariable(j));    int numCategories=variable.getNumCategories();    nodeDimensions[j + 1]=numCategories;  }  int[][] cases=new int[dataSet.getNumRows() + 1][dataSet.getNumColumns() + 2];  for (int i=0; i < dataSet.getNumRows(); i++) {    for (int j=0; j < dataSet.getNumColumns(); j++) {      cases[i + 1][j + 1]=dataSet.getInt(i,j) + 1;    }  }  bci=new BCInference(cases,nodeDimensions);  nodes=dataSet.getVariables();  indices=new HashMap<>();  for (int i=0; i < nodes.size(); i++) {    indices.put(nodes.get(i),i);  }  this.H=new HashMap<>();}  }
class C{  void resetCaches(){  this.cachedNextLinkId=null;  this.cachedRouteLinkIds=null;  this.cachedDestinationLinkId=null;  PlanElement currentPlanElement=this.getPlanElements().get(this.currentPlanElementIndex);  if (currentPlanElement instanceof Leg) {    this.currentLeg=((Leg)currentPlanElement);    this.cachedRouteLinkIds=null;    Route route=currentLeg.getRoute();    if (route == null) {      log.error("The agent " + this.getId() + " has no route in its leg. Removing the agent from the simulation.");      this.state=MobsimAgent.State.ABORT;      return;    }    this.cachedDestinationLinkId=route.getEndLinkId();  } else {    this.calculateAndSetDepartureTime((Activity)this.getCurrentPlanElement());  }}  }
class C{  public TextLabel createSimple(Font font,CoreMetrics lm,int start,int limit){  if (start >= limit || start < lineStart || limit > lineLimit) {    throw new IllegalArgumentException("bad start: " + start + " or limit: "+ limit);  }  int level=lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart);  int linedir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;  int layoutFlags=flags & ~0x9;  if ((level & 0x1) != 0)   layoutFlags|=1;  if ((linedir & 0x1) != 0)   layoutFlags|=8;  TextSource source=new StandardTextSource(text,start,limit - start,lineStart,lineLimit - lineStart,level,layoutFlags,font,frc,lm);  return new TextSourceLabel(source);}  }
class C{  public boolean isGeoSetup(){  ClientResponse resp=client.get(ClientResponse.class,PathConstants.CHECK_IS_GEO_DISTRIBUTED_VDC_URL);  return Boolean.parseBoolean(resp.getEntity(String.class));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean isSupported(final String name){  if (name == null) {    return false;  }  try {    return Charset.isSupported(name);  } catch (  final IllegalCharsetNameException ex) {    return false;  }}  }
class C{  private GridCacheMultiNodeDataStructureTest(){}  }
class C{  public static float toFloatValue(Object o) throws PageException {  if (o instanceof Character)   return (((Character)o).charValue()); else   if (o instanceof Boolean)   return ((((Boolean)o).booleanValue()) ? 1F : 0F); else   if (o instanceof Number)   return (((Number)o).floatValue()); else   if (o instanceof String)   return (float)toDoubleValue(o.toString()); else   if (o instanceof Castable)   return (float)((Castable)o).castToDoubleValue(); else   if (o instanceof ObjectWrap)   return toFloatValue(((ObjectWrap)o).getEmbededObject());  throw new CasterException(o,"float");}  }
class C{  void validateChildOrder(){  Log.d(TAG,"validating child count " + getChildCount());  if (getChildCount() < 1) {    return;  }  int lastPos=getPosition(getChildAt(0));  int lastScreenLoc=mOrientationHelper.getDecoratedStart(getChildAt(0));  if (mShouldReverseLayout) {    for (int i=1; i < getChildCount(); i++) {      View child=getChildAt(i);      int pos=getPosition(child);      int screenLoc=mOrientationHelper.getDecoratedStart(child);      if (pos < lastPos) {        logChildren();        throw new RuntimeException("detected invalid position. loc invalid? " + (screenLoc < lastScreenLoc));      }      if (screenLoc > lastScreenLoc) {        logChildren();        throw new RuntimeException("detected invalid location");      }    }  } else {    for (int i=1; i < getChildCount(); i++) {      View child=getChildAt(i);      int pos=getPosition(child);      int screenLoc=mOrientationHelper.getDecoratedStart(child);      if (pos < lastPos) {        logChildren();        throw new RuntimeException("detected invalid position. loc invalid? " + (screenLoc < lastScreenLoc));      }      if (screenLoc < lastScreenLoc) {        logChildren();        throw new RuntimeException("detected invalid location");      }    }  }}  }
class C{  public void addComponent(Component cmp){  layout.addLayoutComponent(null,cmp,this);  insertComponentAt(Integer.MAX_VALUE,null,cmp);}  }
class C{  private void logChildren(){  Log.d(TAG,"internal representation of views on the screen");  for (int i=0; i < getChildCount(); i++) {    View child=getChildAt(i);    Log.d(TAG,"item " + getPosition(child) + ", coord:"+ mOrientationHelper.getDecoratedStart(child));  }  Log.d(TAG,"==============");}  }
class C{  private void handleEventPoint(EventPoint ep){  AugmentedNode<ILineSegment> left=lineState.leftNeighbor(ep);  AugmentedNode<ILineSegment> right=lineState.rightNeighbor(ep);  lineState.determineIntersecting(ep,left,right);  List<ILineSegment> ints=ep.intersectingSegments();  List<ILineSegment> ups=ep.upperEndpointSegments();  List<ILineSegment> lows=ep.lowerEndpointSegments();  if (lows.size() + ups.size() + ints.size() > 1) {    record(ep.point,lows,ups,ints);  }  lineState.deleteRange(left,right);  lineState.setSweepPoint(ep.point);  boolean update=false;  if (!ups.isEmpty()) {    lineState.insertSegments(ups);    update=true;  }  if (!ints.isEmpty()) {    lineState.insertSegments(ints);    update=true;  }  if (!update) {    if (left != null && right != null) {      updateQueue(left,right);    }  } else {    if (left != null) {      updateQueue(left,lineState.successor(left));    }    if (right != null) {      updateQueue(lineState.pred(right),right);    }  }}  }
class C{  private void defineTextControls(UIDefaults d){  String c=PAINTER_PREFIX + "TextComponentPainter";  String cs=PAINTER_PREFIX + "SearchFieldPainter";  String ci=PAINTER_PREFIX + "SearchFieldIconPainter";  String p="TextField:SearchFieldFindButton";  d.put(p + ".States","Enabled,Pressed,Disabled,HasPopup");  d.put(p + ".HasPopup",new SearchFieldHasPopupState());  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.FIND_ICON_DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.FIND_ICON_ENABLED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.FIND_ICON_ENABLED));  d.put(p + "[Enabled+HasPopup].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.FIND_ICON_ENABLED_POPUP));  d.put(p + "[Pressed+HasPopup].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.FIND_ICON_ENABLED_POPUP));  p="TextField:SearchFieldCancelButton";  d.put(p + ".States","Enabled,Pressed,Disabled");  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.CANCEL_ICON_DISABLED));  d.put(p + "[Enabled].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.CANCEL_ICON_ENABLED));  d.put(p + "[Pressed].foregroundPainter",new LazyPainter(ci,SearchFieldIconPainter.Which.CANCEL_ICON_PRESSED));  p="TextField";  d.put(p + ".States","Enabled,Selected,Disabled,Focused,SearchField");  d.put(p + ".SearchField",new TextFieldIsSearchState());  d.put(p + ".searchIconWidth",new Integer(15));  d.put(p + ".cancelIconWidth",new Integer(15));  d.put(p + ".popupIconWidth",new Integer(7));  d.put(p + ".searchLeftInnerMargin",new Integer(3));  d.put(p + ".searchRightInnerMargin",new Integer(3));  d.put(p + ".placeholderTextColor",d.get("seaGlassSearchPlaceholderText"));  d.put(p + ".contentMargins",new InsetsUIResource(4,6,4,6));  d.put(p + "[Selected].textForeground",Color.WHITE);  d.put(p + "[Selected].textBackground",d.get("seaGlassSelection"));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  d.put(p + "[SearchField].contentMargins",new InsetsUIResource(4,26,4,23));  d.put(p + ".background",getDerivedColor("seaGlassLightBackground",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Disabled].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_DISABLED));  d.put(p + "[Focused].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_FOCUSED));  d.put(p + "[Enabled].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_ENABLED));  d.put(p + "[Disabled+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Disabled+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_DISABLED));  d.put(p + "[Focused+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_FOCUSED));  d.put(p + "[Enabled+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_ENABLED));  p="FormattedTextField";  d.put(p + ".States","Enabled,Selected,Disabled,Focused,SearchField");  d.put(p + ".SearchField",new TextFieldIsSearchState());  d.put(p + ".contentMargins",new InsetsUIResource(4,6,4,6));  d.put(p + ".searchIconWidth",new Integer(15));  d.put(p + ".cancelIconWidth",new Integer(15));  d.put(p + ".popupIconWidth",new Integer(7));  d.put(p + ".searchLeftInnerMargin",new Integer(3));  d.put(p + ".searchRightInnerMargin",new Integer(3));  d.put(p + ".placeholderTextColor",d.get("seaGlassSearchPlaceholderText"));  d.put(p + ".background",getDerivedColor("seaGlassLightBackground",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Disabled].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_DISABLED));  d.put(p + "[Focused].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_FOCUSED));  d.put(p + "[Enabled].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_ENABLED));  d.put(p + "[Disabled+SearchField].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  d.put(p + "[Disabled+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Disabled+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_DISABLED));  d.put(p + "[Focused+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_FOCUSED));  d.put(p + "[Enabled+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_ENABLED));  p="PasswordField";  d.put(p + ".contentMargins",new InsetsUIResource(4,6,4,6));  d.put(p + ".searchIconWidth",new Integer(15));  d.put(p + ".cancelIconWidth",new Integer(15));  d.put(p + ".popupIconWidth",new Integer(7));  d.put(p + ".echoChar",Character.valueOf((char)0x2022));  d.put(p + ".searchLeftInnerMargin",new Integer(3));  d.put(p + ".searchRightInnerMargin",new Integer(3));  d.put(p + ".placeholderTextColor",d.get("seaGlassSearchPlaceholderText"));  d.put(p + ".background",getDerivedColor("seaGlassLightBackground",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Selected].textForeground",Color.WHITE);  d.put(p + "[Selected].textBackground",d.get("seaGlassSelection"));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Disabled].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_DISABLED));  d.put(p + "[Focused].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_FOCUSED));  d.put(p + "[Enabled].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_ENABLED));  d.put(p + "[Disabled+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected+SearchField].backgroundPainter",new LazyPainter(cs,SearchFieldPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Disabled+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_DISABLED));  d.put(p + "[Focused+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_FOCUSED));  d.put(p + "[Enabled+SearchField].borderPainter",new LazyPainter(cs,SearchFieldPainter.Which.BORDER_ENABLED));  p="TextArea";  d.put(p + ".contentMargins",new InsetsUIResource(4,6,4,6));  d.put(p + ".States","Enabled,MouseOver,Pressed,Selected,Disabled,Focused,NotInScrollPane");  d.put(p + ".NotInScrollPane",new TextAreaNotInScrollPaneState());  d.put(p + ".background",getDerivedColor("seaGlassLightBackground",0.0f,0.0f,0.0f,0,true));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SOLID_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SOLID_ENABLED));  d.put(p + "[Selected].textForeground",Color.WHITE);  d.put(p + "[Selected].textBackground",d.get("seaGlassSelection"));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Disabled+NotInScrollPane].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled+NotInScrollPane].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Disabled+NotInScrollPane].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_DISABLED));  d.put(p + "[Focused+NotInScrollPane].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_FOCUSED));  d.put(p + "[Enabled+NotInScrollPane].borderPainter",new LazyPainter(c,TextComponentPainter.Which.BORDER_ENABLED));  p="TextPane";  d.put(p + ".contentMargins",new InsetsUIResource(4,6,4,6));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SOLID_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SOLID_ENABLED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Selected].textForeground",Color.WHITE);  d.put(p + "[Selected].textBackground",d.get("seaGlassSelection"));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  p="EditorPane";  d.put(p + ".contentMargins",new InsetsUIResource(4,6,4,6));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SOLID_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SOLID_ENABLED));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,TextComponentPainter.Which.BACKGROUND_SELECTED));  d.put(p + "[Selected].textForeground",Color.WHITE);  d.put(p + "[Selected].textBackground",d.get("seaGlassSelection"));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0,0,0,0,true));  p="Label";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].textForeground",getDerivedColor("seaGlassDisabledText",0.0f,0.0f,0.0f,0,true));}  }
class C{  public IMouseState createNodeEditEnterState(final Node n,final MouseEvent event){  final CNodeEditEnterState state=new CNodeEditEnterState(this,m_graph,n);  m_factory.createNodeEditEnterAction().execute(state,event);  return state;}  }
class C{  public static int[][] MCSCE2contingencyTable(boolean useTrainingData,GEPIndividual ind,double discriminationThreshold){  int classWithTheMaximumPredictedValue;  double maximumPredictedValue, value;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  int numberOfObjects=dv.getDependentVariableValues().length;  int numberOfClasses=((GEPSpecies)ind.species).numberOfChromosomes;  int numberOfExtendedClasses=numberOfClasses + 1;  int mi_ContingencyTable[][]=new int[numberOfClasses][numberOfExtendedClasses];  double dependentVar[];  double md_ExpectedValues[][]=new double[numberOfObjects][numberOfClasses];  for (int j=0; j < numberOfClasses; j++) {    dependentVar=dv.getDependentVariableValues(j);    for (int i=0; i < numberOfObjects; i++)     md_ExpectedValues[i][j]=dependentVar[i];  }  for (int i=0; i < numberOfObjects; i++) {    int expectedClass=0;    classWithTheMaximumPredictedValue=0;    maximumPredictedValue=ind.eval(classWithTheMaximumPredictedValue,useTrainingData,i);    double maximumExpectedValue=md_ExpectedValues[i][expectedClass];    if (Double.isNaN(maximumPredictedValue)) {      for (int ii=0; ii < numberOfClasses; ii++)       mi_ContingencyTable[ii][ii]=0;      return mi_ContingencyTable;    }    for (int j=1; j < numberOfClasses; j++) {      value=md_ExpectedValues[i][j];      if (value > maximumExpectedValue) {        maximumExpectedValue=value;        expectedClass=j;      }      value=ind.eval(j,useTrainingData,i);      if (Double.isNaN(value)) {        for (int ii=0; ii < numberOfClasses; ii++)         mi_ContingencyTable[ii][ii]=0;        return mi_ContingencyTable;      }      if (value > maximumPredictedValue + discriminationThreshold) {        maximumPredictedValue=value;        classWithTheMaximumPredictedValue=j;      } else {        if (value >= maximumPredictedValue - discriminationThreshold)         classWithTheMaximumPredictedValue=numberOfClasses;        if (value > maximumPredictedValue)         maximumPredictedValue=value;      }    }    mi_ContingencyTable[expectedClass][classWithTheMaximumPredictedValue]++;  }  return mi_ContingencyTable;}  }
class C{  @Override public boolean goBack(){  if (webView.canGoBack()) {    webView.goBack();    return true;  }  return false;}  }
class C{  public T caseOperation(Operation object){  return null;}  }
class C{  public boolean isBackupEnabled(){  return enabled;}  }
class C{  public void cleanup(boolean clearKeys){  vals=null;  entryProcessors=null;  entryProcessorsBytes=null;  invokeArgs=null;  invokeArgsBytes=null;  if (clearKeys)   keys=null;}  }
class C{  public static <T>Set<T> intersect(final Set<T> set1,final Set<T> set2){  if (set1.equals(set2)) {    return set1;  }  final HashSet<T> result=new HashSet<T>();  Set<T> minSet;  Set<T> otherSet;  if (set1.size() < set2.size()) {    minSet=set1;    otherSet=set2;  } else {    minSet=set2;    otherSet=set1;  }  for (  T s : minSet) {    if (otherSet.contains(s)) {      result.add(s);    }  }  return result;}  }
class C{  private void assertDetailsForUser(String userId,UserAssignmentDetails details,double expectedFactor,UsagePeriod... expectedUsagePeriod){  assertNotNull(details);  assertEquals(userId,details.getUserId());  UsageDetails usageDetails=details.getUsageDetails();  List<UsagePeriod> usagePeriods=usageDetails.getUsagePeriods();  assertEquals("Wrong number of usage periods",expectedUsagePeriod.length,usagePeriods.size());  for (int i=0; i < usagePeriods.size(); i++) {    assertEquals("Wrong usage period",expectedUsagePeriod[i],usagePeriods.get(i));  }  assertEquals("Wrong factor",expectedFactor,usageDetails.getFactor(),ASSERT_DOUBLE_DELTA);}  }
class C{  public synchronized Vertex mostConsciousWithAssoiate(Vertex type,Vertex associate,Vertex associateType){  Collection<Relationship> relationships=getRelationships(type);  if (relationships == null) {    return null;  }  Relationship highest=null;  Map<Vertex,Relationship> assoicates=new HashMap<Vertex,Relationship>();  Collection<Relationship> associateRelationships=associate.getRelationships(associateType);  if (associateRelationships != null) {    for (    Relationship relationship : associate.getRelationships(associateType)) {      assoicates.put(relationship.getTarget(),relationship);    }    for (    Relationship relationship : relationships) {      Vertex target=relationship.getTarget();      Relationship associateTarget=assoicates.get(target);      if ((associateTarget != null) && (!relationship.isInverse()) && ((highest == null) || (associateTarget.getCorrectness() > highest.getCorrectness()))) {        highest=associateTarget;      }    }  }  if (highest == null) {    return mostConscious(type);  }  return highest.getTarget();}  }
class C{  AttrContext dup(Scope scope){  AttrContext info=new AttrContext();  info.scope=scope;  info.staticLevel=staticLevel;  info.isSelfCall=isSelfCall;  info.selectSuper=selectSuper;  info.pendingResolutionPhase=pendingResolutionPhase;  info.lint=lint;  info.enclVar=enclVar;  info.returnResult=returnResult;  info.defaultSuperCallSite=defaultSuperCallSite;  return info;}  }
class C{  public void test_loadLjava_io_InputStream$C() throws Exception {  byte[] keyStore=creatCertificate();  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  InputStream in=new ByteArrayInputStream(keyStore);  keyTest.load(in,pssWord);  in.close();  assertTrue("alias1 is not a certificate",keyTest.isCertificateEntry("alias1"));  assertTrue("alias2 is not a keyEntry",keyTest.isKeyEntry("alias2"));  assertTrue("alias3 is not a certificate",keyTest.isCertificateEntry("alias3"));  keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  in=new ByteArrayInputStream(keyStore);  keyTest.load(in,null);  in.close();  assertTrue("alias1 is not a certificate",keyTest.isCertificateEntry("alias1"));  assertTrue("alias2 is not a keyEntry",keyTest.isKeyEntry("alias2"));  assertTrue("alias3 is not a certificate",keyTest.isCertificateEntry("alias3"));}  }
class C{  public static URL loadResourceFromClasspath(Class<?> clazz,String resourceName){  URL ret=null;  ret=clazz.getResource(resourceName);  if (ret == null) {    ret=clazz.getResource("/" + resourceName);  }  return ret;}  }
class C{  private Set<String> findHostsByInitiators(List<VNXeHostInitiator> hostInits){  Set<String> hosts=new HashSet<String>();  for (  VNXeHostInitiator init : hostInits) {    HostInitiatorRequest initReq=new HostInitiatorRequest(_khClient);    VNXeHostInitiator existingInit=initReq.getByIQNorWWN(init.getInitiatorId());    if (existingInit != null && existingInit.getParentHost() != null) {      String hostId=existingInit.getParentHost().getId();      hosts.add(hostId);    }  }  return hosts;}  }
class C{  public static int cs_tdfs(int j,int k,int[] head,int head_offset,int[] next,int next_offset,int[] post,int post_offset,int[] stack,int stack_offset){  int i, p, top=0;  if (head == null || next == null || post == null || stack == null)   return (-1);  stack[stack_offset + 0]=j;  while (top >= 0) {    p=stack[stack_offset + top];    i=head[head_offset + p];    if (i == -1) {      top--;      post[post_offset + (k++)]=p;    } else {      head[head_offset + p]=next[next_offset + i];      stack[stack_offset + (++top)]=i;    }  }  return (k);}  }
class C{  public static URI createInternalID(Class<? extends DataObject> clazz,String identifier){  return newId(clazz,identifier,"");}  }
class C{  public void decreaseSpeed(){  animation.setRate(animation.getRate() > 0 ? animation.getRate() - 1 : 0);}  }
class C{  public static void assertNotInstanceOf(String objectName,Class<?> expectedClassType,Object actualObject){  try {    if (expectedClassType.isInstance(actualObject)) {      Assert.fail(objectName + " is an instance of " + expectedClassType.getName());    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public Task<BlockSnapshotRestRep> restore(URI id){  return postTask(getIdUrl() + "/restore",id);}  }
class C{  public void addRotation(int axis1,int axis2,double angle){  assert (axis1 >= 0);  assert (axis1 < dim);  assert (axis1 >= 0);  assert (axis2 < dim);  assert (axis1 != axis2);  inv=null;  double[][] ht=new double[dim + 1][dim + 1];  for (int i=0; i < dim + 1; i++) {    ht[i][i]=1.0;  }  double c=Math.cos(angle), s=MathUtil.cosToSin(angle,c);  ht[axis1][axis1]=+c;  ht[axis1][axis2]=-s;  ht[axis2][axis1]=+s;  ht[axis2][axis2]=+c;  trans=times(ht,trans);}  }
class C{  public ISchedulingRule moveRule(IResource source,IResource destination){  if (source.getType() == IResource.ROOT || destination.getType() == IResource.ROOT)   return root;  if (!source.getFullPath().segment(0).equals(destination.getFullPath().segment(0)))   return MultiRule.combine(modifyRule(source.getProject()),modifyRule(destination.getProject()));  return factoryFor(source).moveRule(source,destination);}  }
class C{  public final void testValidateOnFocusLost(){  boolean validateOnFocusLost=false;  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.validateOnFocusLost(validateOnFocusLost);  assertEquals(validateOnFocusLost,abstractValidateableView.isValidatedOnFocusLost());}  }
class C{  public SanityCheck(){  super(Options.set,"Sanity Check","Perform sanity checks before and after each collection?",false);}  }
class C{  public void execute(){  try {    invocation.invoke(targetCallback,new Object[]{target,data});  } catch (  Exception e) {  }}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public static <T,K,L extends List<T>>Consumer<Partition<T,K,L>> evictOldest(){  return null;}  }
class C{  public int nscan(){  return nscan;}  }
class C{  public void beginArray() throws IOException {  expect(JsonToken.BEGIN_ARRAY);}  }
class C{  public String className(){  return getConstPool().getClassInfo(classIndex());}  }
class C{  public R scan(Iterable<? extends Tree> nodes,P p){  R r=null;  if (nodes != null) {    boolean first=true;    for (    Tree node : nodes) {      r=(first ? scan(node,p) : scanAndReduce(node,p,r));      first=false;    }  }  return r;}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  if (mZoomIn != null) {    mZoomIn.removeZoomListener(listener);    mZoomOut.removeZoomListener(listener);  }  mTouchHandler.removeZoomListener(listener);}  }
class C{  public void testKafkaStreamer() throws TimeoutException, InterruptedException {  embeddedBroker.createTopic(TOPIC_NAME,PARTITIONS,REPLICATION_FACTOR);  Map<String,String> keyValMap=produceStream(TOPIC_NAME);  consumerStream(TOPIC_NAME,keyValMap);}  }
class C{  public BufferList(String[] header,BufferHolder bufferHolder){  this.header=header;  this.bufferHolder=bufferHolder;}  }
class C{  protected final void unexpectedEndOfInput(){  if (cacheRequest != null) {    cacheRequest.abort();  }  httpEngine.release(true);}  }
class C{  public Item dequeue(){  if (isEmpty())   throw new NoSuchElementException("Queue underflow");  Item item=q[first];  q[first]=null;  n--;  first++;  if (first == q.length)   first=0;  if (n > 0 && n == q.length / 4)   resize(q.length / 2);  return item;}  }
class C{  private ModuleBean retrieveExtModuleBean(final ExtModRefBean extModRef){  for (int retries=1; ; retries++) {    if (retries == 1) {      LEnv.LOGGER.info("Checking for " + extModRef.getName() + " updates...");      launcherFrame.setStatus(StatusType.PROGRESS,"Checking for " + extModRef.getName() + " updates");    } else {      LEnv.LOGGER.info("Checking for " + extModRef.getName() + " updates ("+ retries+ ")...");      launcherFrame.setStatus(StatusType.PROGRESS,"Failed to check " + extModRef.getName() + " updates! Retrying ("+ retries+ ")");    }    try {      final ModuleBean mod=JAXB.unmarshal(new UrlBuilder(extModRef.getModuleBeanUrl()).addTimestamp().toUrl(),ModuleBean.class);      if (!extModRef.getName().equals(mod.getName()))       throw new Exception("Invalid module bean, mismatching name specified: " + mod.getName() + "; was expecting: "+ extModRef.getName());      if (!extModRef.getFolder().equals(mod.getFolder()))       throw new Exception("Invalid module bean, mismatching folder specified: " + mod.getFolder() + "; was expecting: "+ extModRef.getFolder());      if (mod.getFileList() == null)       throw new Exception("Invalid module bean, no file list specified!");      final String pathPrefix="Scelight/" + LEnv.PATH_EXT_MODS.getFileName().toString() + "/"+ extModRef.getFolder()+ "/";      for (      final FileBean file : mod.getFileList()) {        if (file.getPath().indexOf("..") >= 0 || !file.getPath().startsWith(pathPrefix))         throw new Exception("Invalid module bean, disallowed listed file path: " + file.getPath());      }      return mod;    } catch (    final Exception e) {      if (retries < 3)       LEnv.LOGGER.error("Failed to check " + extModRef.getName() + " updates!",e); else {        Sound.beepOnError();        LEnv.LOGGER.error("Failed to check " + extModRef.getName() + " updates! You must restart "+ LConsts.LAUNCHER_NAME+ " to retry!",e);        launcherFrame.setStatus(StatusType.WARNING,"Failed to check " + extModRef.getName() + " updates! You must restart "+ LConsts.LAUNCHER_NAME+ " to retry!");        return null;      }    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MBP_BankAccount[").append(get_ID()).append(", Name=").append(getA_Name()).append("]");  return sb.toString();}  }
class C{  private void addCitations(Document doc) throws DocumentException {  Paragraph p=new Paragraph();  p.setAlignment(Element.ALIGN_JUSTIFIED);  p.setFont(fontToComplete);  p.add(new Phrase(getText("rtf.citations") + ": ",fontTitle));  p.add(getText("rtf.citations.description"));  p.add(Chunk.NEWLINE);  doc.add(p);  p.clear();}  }
class C{  public static void centerOnScreen(JDialog dialog){  if (GUIMediator.isAppVisible()) {    dialog.setLocationRelativeTo(GUIMediator.getAppFrame());  } else {    dialog.setLocation(GUIMediator.getScreenCenterPoint(dialog));  }}  }
class C{  public void allowDetachToRelease(boolean allowRelease){  m_allowRelease=allowRelease;}  }
class C{  public void addKMZWriterListener(KMZWriterListener listener){  writerListeners.add(listener);}  }
class C{  @Override public BiosCommandResult doDeleteShare(StorageSystem storage,FileDeviceInputOutput args,SMBFileShare smbFileShare) throws ControllerException {  BiosCommandResult result=new BiosCommandResult();  try {    _log.info("NetAppFileStorageDevice doDeleteShare - start");    FileShare fileshare=null;    if (args.getFileOperation() == true) {      fileshare=args.getFs();    } else {      URI snapShotUID=args.getSnapshotId();      Snapshot snapshot=_dbClient.queryObject(Snapshot.class,snapShotUID);      fileshare=_dbClient.queryObject(FileShare.class,snapshot.getParent().getURI());    }    String portGroup=findVfilerName(fileshare);    NetAppApi nApi=new NetAppApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).vFiler(portGroup).build();    SMBShareMap shares=args.getFileObjShares();    if (shares == null || shares.isEmpty()) {      _log.error("NetAppFileStorageDevice::doDeleteShare failed: FileShare(s) is either missing or empty");      ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileShare();      serviceError.setMessage("FileShare(s) is either missing or empty");      result=BiosCommandResult.createErrorResult(serviceError);    }    SMBFileShare fileShare=shares.get(smbFileShare.getName());    if (fileShare != null) {      if (!nApi.deleteShare(smbFileShare.getName())) {        _log.error("NetAppFileStorageDevice doDeleteShare {} - failed",args.getFileObjId());        ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileShare();        serviceError.setMessage("Deletion of CIFS File Share failed");        result=BiosCommandResult.createErrorResult(serviceError);      } else {        _log.info("NetAppFileStorageDevice doDeleteShare {} - complete",args.getFileObjId());        args.getFileObjShares().remove(smbFileShare.getName());        args.getFileObjShares().remove(smbFileShare.getNativeId());        result=BiosCommandResult.createSuccessfulResult();      }    }  } catch (  NetAppException e) {    _log.error("NetAppFileStorageDevice::doDeleteShare failed with a NetAppException",e);    ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileShare();    serviceError.setMessage(e.getLocalizedMessage());    result=BiosCommandResult.createErrorResult(serviceError);  }catch (  Exception e) {    _log.error("NetAppFileStorageDevice::doCreateFS failed with an Exception",e);    ServiceError serviceError=DeviceControllerErrors.netapp.unableToDeleteFileShare();    serviceError.setMessage(e.getLocalizedMessage());    result=BiosCommandResult.createErrorResult(serviceError);  }  return result;}  }
class C{  public SchedulingThread(String name,LockType lockType){  super(name);  this.lockType=lockType;}  }
class C{  public void logout(){  if (Preferences.get("CN1PersonaAnonymous",false)) {    throw new RuntimeException("Anonymous personas can't be logged out!");  }  Preferences.delete("CN1Persona");}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.EXPRESSION_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isLocalThumbnailPreviewsEnabled(){  return mLocalThumbnailPreviewsEnabled;}  }
class C{  ArrayList<Tile> edgeGrowth(){  ArrayList<Tile> newlyUrbanized=new ArrayList<Tile>();  ArrayList<Tile> centers=new ArrayList<Tile>(spreadingCenters);  for (  Tile t : centers) {    if (random.nextInt(maxCoefficient) < spreadCoefficient) {      ArrayList<Tile> suitableForUrbanization=getNeighborsAvailableForUrbanization(t);      if (suitableForUrbanization.size() > 0) {        Tile toUrbanize=suitableForUrbanization.get(random.nextInt(suitableForUrbanization.size()));        boolean successful=urbanizeTile(toUrbanize);        if (successful) {          newlyUrbanized.add(toUrbanize);        }      }    }  }  return newlyUrbanized;}  }
class C{  public UniformPair<EventBean[]> processViewResultIterator(EventBean[] newData){  EventBean[] selectNewEvents;  if (prototype.getOptionalHavingExpr() == null) {    selectNewEvents=ResultSetProcessorUtil.getSelectEventsNoHaving(selectExprProcessor,newData,true,true,exprEvaluatorContext);  } else {    selectNewEvents=ResultSetProcessorUtil.getSelectEventsHaving(selectExprProcessor,newData,prototype.getOptionalHavingExpr(),true,true,exprEvaluatorContext);  }  return new UniformPair<EventBean[]>(selectNewEvents,null);}  }
class C{  public static boolean isNumber(String str){  if (str == null)   return false;  str=str.trim();  int pos=0;  int len=str.length();  if (len == 0)   return false;  char curr=str.charAt(pos);  if (curr == '+' || curr == '-') {    if (len == ++pos)     return false;    curr=str.charAt(pos);  }  boolean hasDot=false;  boolean hasExp=false;  for (; pos < len; pos++) {    curr=str.charAt(pos);    if (curr < '0') {      if (curr == '.') {        if (pos + 1 >= len || hasDot)         return false;        hasDot=true;      } else       return false;    } else     if (curr > '9') {      if (curr == 'e' || curr == 'E') {        if (pos + 1 >= len || hasExp)         return false;        hasExp=true;        hasDot=true;      } else       return false;    }  }  if (hasExp) {    try {      Double.parseDouble(str);      return true;    } catch (    NumberFormatException e) {      return false;    }  }  return true;}  }
class C{  public static String block(String row,String... rows){  requireNonNull(row);  requireNonNullElements(rows);  return block(Arrays.stream(rows).collect(joining(nl(),row + nl(),EMPTY)));}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultKeyedValues2D clone=(DefaultKeyedValues2D)super.clone();  clone.columnKeys=new java.util.ArrayList(this.columnKeys);  clone.rowKeys=new java.util.ArrayList(this.rowKeys);  clone.rows=(List)ObjectUtilities.deepClone(this.rows);  return clone;}  }
class C{  public int typicalIndsProduced(){  if (maxGeneratable == 0)   maxGeneratable=maxChildProduction();  return maxGeneratable;}  }
class C{  public final void quit(){  mQuit.set(true);}  }
class C{  public static void notEmpty(Collection collection,String message){  if ((collection == null) || collection.isEmpty()) {    throw new IllegalArgumentException(message);  }}  }
class C{  public boolean containsKey(Object child){synchronized (children) {    return children.containsKey(child);  }}  }
class C{  public void revertValueClassName(){  valClsNameProp.set(valClsNamePrev);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getIsA_();}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  private void maybeEvictFilesInCacheDir() throws IOException {synchronized (mLock) {    boolean calculatedRightNow=maybeUpdateFileCacheSize();    updateFileCacheSizeLimit();    long cacheSize=mCacheStats.getSize();    if (cacheSize > mCacheSizeLimit && !calculatedRightNow) {      mCacheStats.reset();      maybeUpdateFileCacheSize();    }    if (cacheSize > mCacheSizeLimit) {      evictAboveSize(mCacheSizeLimit * 9 / 10,CacheEventListener.EvictionReason.CACHE_FULL);    }  }}  }
class C{  public ComputeVirtualPoolRestRep saveComputeElements(ComputeVirtualPoolRestRep pool){  Set<String> oldValues=Sets.newHashSet(ResourceUtils.stringRefIds(pool.getMatchedComputeElements()));  Set<String> newValues=Sets.newHashSet();  if (isFalse(pool.getUseMatchedElements())) {    if (computeElements != null) {      newValues.addAll(computeElements);    }  }  Set<String> add=Sets.difference(newValues,oldValues);  Set<String> remove=Sets.difference(oldValues,newValues);  if (isFalse(pool.getUseMatchedElements()) && (!add.isEmpty() || !remove.isEmpty())) {    pool=updateComputeElements(add,remove);  }  return pool;}  }
class C{  public static void initialWarning(String s,Parameter p1,Parameter p2){  System.err.println("STARTUP WARNING:\n" + s);  if (p1 != null) {    System.err.println("PARAMETER: " + p1);  }  if (p2 != null && p1 != null) {    System.err.println("     ALSO: " + p2);  }}  }
class C{  public boolean matches(CharSequence s){  return compiled.matcher(s).matches();}  }
class C{  public T caseTypeRef(TypeRef object){  return null;}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public boolean isConsume(){  return consume;}  }
class C{  public boolean isFetch(){  return fetch;}  }
class C{  private void updateDomObj(WXComponent component){  if (component == null) {    return;  }  WXDomObject domObject=mRegistry.get(component.getRef());  if (domObject == null) {    return;  }  domObject.old();  component.updateDom(domObject.clone());  if (component instanceof WXVContainer) {    WXVContainer container=(WXVContainer)component;    int count=container.childCount();    for (int i=0; i < count; ++i) {      updateDomObj(container.getChild(i));    }  }}  }
class C{  private void updateMiddleFillerLayoutVisibility(){  if (mEditButton.getVisibility() == View.VISIBLE && mViewButton.getVisibility() == View.VISIBLE) {    mMiddleFiller.setVisibility(View.INVISIBLE);  } else {    mMiddleFiller.setVisibility(View.GONE);  }}  }
class C{  public DoubleVector(DoubleVector dv){  len=dv.len;  vect=new double[len];  for (int i=0; i < len; i++) {    vect[i]=dv.vect[i];  }}  }
class C{  public static Tuple median(TupleSet tuples,String field){  return median(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  private void appendStatements(PolicyType policy,String prefix){  List<Statement> appendStatements=newStatements(policy,prefix);  for (  Statement statement : appendStatements) {    appendStatement(statement);  }}  }
class C{  private void unlockEntries(Iterable<GridCacheEntryEx> locked){  for (  GridCacheEntryEx entry : locked)   GridUnsafe.monitorExit(entry);  AffinityTopologyVersion topVer=ctx.affinity().affinityTopologyVersion();  for (  GridCacheEntryEx entry : locked)   ctx.evicts().touch(entry,topVer);}  }
class C{  public void testMappings() throws Exception {  Map<String,String> map=new HashMap<>();  map.put("1","101");  BasicUserNameMapper mapper=create(map,false,null);  assertNull(mapper.map(null));  assertEquals("101",mapper.map("1"));  assertEquals("2",mapper.map("2"));  mapper=create(map,true,null);  assertNull(mapper.map(null));  assertEquals("101",mapper.map("1"));  assertNull(mapper.map("2"));  mapper=create(map,false,"A");  assertNull(mapper.map(null));  assertEquals("101",mapper.map("1"));  assertEquals("2",mapper.map("2"));  mapper=create(map,true,"A");  assertEquals("A",mapper.map(null));  assertEquals("101",mapper.map("1"));  assertEquals("A",mapper.map("2"));}  }
class C{  @Override public String toString(){  return "{\"code\":" + code + ",\"reason\":\""+ reason+ "\"}";}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  SimpleHistogramDataset clone=(SimpleHistogramDataset)super.clone();  clone.bins=(List)ObjectUtilities.deepClone(this.bins);  return clone;}  }
class C{  private static int checkIdentifier(final String signature,int pos){  if (!Character.isJavaIdentifierStart(getChar(signature,pos))) {    throw new IllegalArgumentException(signature + ": identifier expected at index " + pos);  }  ++pos;  while (Character.isJavaIdentifierPart(getChar(signature,pos))) {    ++pos;  }  return pos;}  }
class C{  public void flushBuffer() throws IOException {}  }
class C{  public String mapInvokeDynamicMethodName(String name,String desc){  return name;}  }
class C{  public Project duplicate(){  Project dup=new Project();  dup.currentWorkingDirectoryList.addAll(this.currentWorkingDirectoryList);  dup.projectName=this.projectName;  dup.analysisTargets.addAll(this.analysisTargets);  dup.srcDirList.addAll(this.srcDirList);  dup.auxClasspathEntryList.addAll(this.auxClasspathEntryList);  dup.timestampForAnalyzedClasses=timestampForAnalyzedClasses;  dup.guiCallback=guiCallback;  dup.cloudId=cloudId;  dup.cloudProperties.putAll(cloudProperties);  return dup;}  }
class C{  private Spring moveSpring(){  SpringConfig springConfig=null;  if (springType == SpringType.ORIGAMI) {    if (isValuesNotSet()) {      firstValue=DEFAULT_TENSION;      secondValue=DEFAULT_FRICTION;    }    springConfig=SpringConfig.fromOrigamiTensionAndFriction(firstValue,secondValue);  } else   if (springType == SpringType.SPEEDBOUNCINESS) {    if (isValuesNotSet()) {      firstValue=DEFAULT_BOUNCENESS;      secondValue=DEFAULT_SPEED;    }    springConfig=SpringConfig.fromBouncinessAndSpeed(firstValue,secondValue);  }  if (moveSpring == null) {    if (springConfig != null) {      moveSpring=SpringSystem.create().createSpring().setSpringConfig(springConfig);    }  } else {    moveSpring.setSpringConfig(springConfig);  }  return moveSpring;}  }
class C{  public static long computeMethodHash(Method m){  long hash=0;  ByteArrayOutputStream sink=new ByteArrayOutputStream(127);  try {    MessageDigest md=MessageDigest.getInstance("SHA");    DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md));    String s=getMethodNameAndDescriptor(m);    if (serverRefLog.isLoggable(Log.VERBOSE)) {      serverRefLog.log(Log.VERBOSE,"string used for method hash: \"" + s + "\"");    }    out.writeUTF(s);    out.flush();    byte hasharray[]=md.digest();    for (int i=0; i < Math.min(8,hasharray.length); i++) {      hash+=((long)(hasharray[i] & 0xFF)) << (i * 8);    }  } catch (  IOException ignore) {    hash=-1;  }catch (  NoSuchAlgorithmException complain) {    throw new SecurityException(complain.getMessage());  }  return hash;}  }
class C{  public AssumptionViolatedException(String message){  super(message);}  }
class C{  private void fes(){  TetradLogger.getInstance().log("info","** FORWARD EQUIVALENCE SEARCH");  while (!sortedArrows.isEmpty()) {    Arrow arrow=sortedArrows.first();    sortedArrows.remove(arrow);    Node x=arrow.getA();    Node y=arrow.getB();    if (graph.isAdjacentTo(x,y)) {      continue;    }    if (!arrow.getNaYX().equals(getNaYX(x,y))) {      continue;    }    if (!getTNeighbors(x,y).containsAll(arrow.getHOrT())) {      continue;    }    if (!validInsert(x,y,arrow.getHOrT(),getNaYX(x,y))) {      continue;    }    Set<Node> T=arrow.getHOrT();    double bump=arrow.getBump();    boolean inserted=insert(x,y,T,bump);    if (!inserted)     continue;    score+=bump;    Set<Node> visited=reapplyOrientation(x,y,null);    Set<Node> toProcess=new HashSet<>();    for (    Node node : visited) {      final Set<Node> neighbors=getNeighbors(node);      final Set<Node> storedNeighbors=this.neighbors.get(node);      if (!(neighbors.equals(storedNeighbors))) {        toProcess.add(node);      }    }    toProcess.add(x);    toProcess.add(y);    storeGraph();    reevaluateForward(toProcess);  }}  }
class C{  @Override public int read(char cbuf[],int off,int len) throws IOException {  ensureOpen();  if (len == 0) {    return 0;  }  if (next >= length)   return -1;  int n=Math.min(length - next,len);  str.getChars(next,next + n,cbuf,off);  next+=n;  return n;}  }
class C{  public static String escape(String unescaped){  StringBuilder result=new StringBuilder();  for (  char c : unescaped.toCharArray()) {switch (c) {case '"':      result.append("\\\"");    break;case '\\':  result.append("\\\\");break;case '\n':result.append("\\n");break;default :result.append(c);break;}}return result.toString();}  }
class C{  public static AffineTransformation createFromControlVectors(Coordinate src0,Coordinate src1,Coordinate src2,Coordinate dest0,Coordinate dest1,Coordinate dest2){  AffineTransformationBuilder builder=new AffineTransformationBuilder(src0,src1,src2,dest0,dest1,dest2);  return builder.getTransformation();}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.498 -0500",hash_original_method="521E65BC95668B6A66CE17103975D2B1",hash_generated_method="8DC6ED6D9F00B4FC7646C9B74D598F46") public Intent putExtra(String name,short[] value){  mExtras.put(name,value);  return this;}  }
class C{  public CharCodeWithModifiers build(){  return new CharCodeWithModifiers(modifiers,charCode);}  }
class C{  protected void init(){  if (initialized)   return;  Map<String,Class<? extends FXGNode>> elementNodes=new HashMap<String,Class<? extends FXGNode>>(DEFAULT_FXG_2_0_NODES.size() + 4);  elementNodes.putAll(DEFAULT_FXG_2_0_NODES);  elementNodesByURI=new HashMap<String,Map<String,Class<? extends FXGNode>>>(1);  elementNodesByURI.put(FXG_NAMESPACE,elementNodes);  HashSet<String> skippedElements=new HashSet<String>(1);  skippedElements.add(FXG_PRIVATE_ELEMENT);  skippedElementsByURI=new HashMap<String,Set<String>>(1);  skippedElementsByURI.put(FXG_NAMESPACE,skippedElements);  initialized=true;}  }
class C{  public QueryBuilderKraken parse(){  Token token=scanToken();switch (token) {case CREATE:    return parseCreate();case EXPLAIN:  return parseExplain();case INSERT:return parseInsert();case REPLACE:return parseReplace();case SELECT:return parseSelect();case SELECT_LOCAL:return parseSelectLocal();case MAP:return parseMap();case SHOW:return parseShow();case UPDATE:return parseUpdate();case DELETE:return parseDelete();case WATCH:return parseWatch();case IDENTIFIER:if (_lexeme.equalsIgnoreCase("checkpoint")) {return parseCheckpoint();}default :throw error("unknown query at {0}",token);}}  }
class C{  public String toString(){  return getClass().getName();}  }
class C{  public void streamClosed(boolean inStream) throws IOException {  if (!mGetOperation) {    if ((!inStream) && (!mOperationDone)) {      boolean more=true;      if ((mPrivateOutput != null) && (mPrivateOutput.size() <= 0)) {        byte[] headerArray=ObexHelper.createHeader(mRequestHeader,false);        if (headerArray.length <= 0)         more=false;      }      if (mReplyHeader.responseCode == -1) {        mReplyHeader.responseCode=ResponseCodes.OBEX_HTTP_CONTINUE;      }      while ((more) && (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE)) {        more=sendRequest(0x02);      }      while (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE) {        sendRequest(0x82);      }      mOperationDone=true;    } else     if ((inStream) && (mOperationDone)) {      mOperationDone=true;    }  } else {    if ((inStream) && (!mOperationDone)) {      if (mReplyHeader.responseCode == -1) {        mReplyHeader.responseCode=ResponseCodes.OBEX_HTTP_CONTINUE;      }      while (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE) {        if (!sendRequest(0x83)) {          break;        }      }      while (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE) {        mParent.sendRequest(0x83,null,mReplyHeader,mPrivateInput);      }      mOperationDone=true;    } else     if ((!inStream) && (!mOperationDone)) {      boolean more=true;      if ((mPrivateOutput != null) && (mPrivateOutput.size() <= 0)) {        byte[] headerArray=ObexHelper.createHeader(mRequestHeader,false);        if (headerArray.length <= 0)         more=false;      }      if (mPrivateInput == null) {        mPrivateInput=new PrivateInputStream(this);      }      if ((mPrivateOutput != null) && (mPrivateOutput.size() <= 0))       more=false;      mReplyHeader.responseCode=ResponseCodes.OBEX_HTTP_CONTINUE;      while ((more) && (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE)) {        more=sendRequest(0x03);      }      sendRequest(0x83);      if (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_CONTINUE) {        mOperationDone=true;      }    }  }}  }
class C{  public boolean addNode(Node node){  NodeId id=getNodeId(node);  if (id.getLag() != 0) {    node=node.like(id.getName());  }  boolean added=getGraph().addNode(node);  if (!lag0Nodes.contains(node)) {    lag0Nodes.add(node);  }  if (node.getNodeType() == NodeType.ERROR) {    for (int i=1; i <= getMaxLag(); i++) {      Node node1=node.like(id.getName() + ":" + i);      if (i < getNumInitialLags()) {        getGraph().addNode(node1);      }    }  } else {    for (int i=1; i <= getMaxLag(); i++) {      Node node1=node.like(id.getName() + ":" + i);      getGraph().addNode(node1);    }  }  getPcs().firePropertyChange("editingFinished",null,null);  return added;}  }
class C{  void initializeLocals(){  if (localsInitialized) {    throw new AssertionError();  }  localsInitialized=true;  int reg=0;  for (  Local<?> local : locals) {    reg+=local.initialize(reg);  }  int firstParamReg=reg;  List<Insn> moveParameterInstructions=new ArrayList<Insn>();  for (  Local<?> local : parameters) {    CstInteger paramConstant=CstInteger.make(reg - firstParamReg);    reg+=local.initialize(reg);    moveParameterInstructions.add(new PlainCstInsn(Rops.opMoveParam(local.type.ropType),sourcePosition,local.spec(),RegisterSpecList.EMPTY,paramConstant));  }  labels.get(0).instructions.addAll(0,moveParameterInstructions);}  }
class C{  public void addAnnotation(String annotation,double x,double y){  mAnnotations.add(annotation);  mStringXY.put(x,y);}  }
class C{  public RestStatus status(){  if (state == SnapshotState.FAILED) {    return RestStatus.INTERNAL_SERVER_ERROR;  }  if (shardFailures.size() == 0) {    return RestStatus.OK;  }  return RestStatus.status(successfulShards,totalShards,shardFailures.toArray(new ShardOperationFailedException[shardFailures.size()]));}  }
class C{  private boolean checkPlain(){  char ch=reader.peek();  return Constant.NULL_BL_T_LINEBR.hasNo(ch,"-?:,[]{}#&*!|>\'\"%@`") || (Constant.NULL_BL_T_LINEBR.hasNo(reader.peek(1)) && (ch == '-' || (this.flowLevel == 0 && "?:".indexOf(ch) != -1)));}  }
class C{  private void notifyDownloadCompleted(int status,boolean countRetry,int retryAfter,int redirectCount,boolean gotData,String filename){  updateDownloadDatabase(status,countRetry,retryAfter,redirectCount,gotData,filename);  if (DownloaderService.isStatusCompleted(status)) {  }}  }
class C{  public void ensureNext(char expected,TextStream stream){  ensureNext(expected,expected,stream);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void requestCursor(java.awt.Cursor cursor){  if (cursor == null) {    if (showWaitCursor && !waitingForLayers)     resetCursor();    currentMapBeanCursor=null;  } else   if (this.map != null) {    Cursor newCursor;    if (showWaitCursor && waitingForLayers) {      newCursor=Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);      currentMapBeanCursor=cursor;    } else     newCursor=cursor;    map.setCursor(newCursor);  }}  }
class C{  @Override public void start(){  super.start();  if (m_needToInitialize) {    init(m_bridge);    m_needToInitialize=false;  }}  }
class C{  private void agregarElemento(int tipoBusqueda,Node node,ElementoGeograficoVO elemento){  String id=XmlFacade.get(node,"@id");  String name=XmlFacade.get(node,"@name");switch (tipoBusqueda) {case PAIS:    elemento.setIdPais(id);  elemento.setNamePais(name);break;case PROVINCIA:elemento.setIdProvincia(id);elemento.setNameProvincia(name);agregarElemento(--tipoBusqueda,node.getParentNode().getParentNode(),elemento);break;case MUNICIPIO:elemento.setIdMunicipio(id);elemento.setNameMunicipio(name);agregarElemento(--tipoBusqueda,node.getParentNode().getParentNode(),elemento);break;case POBLACION:elemento.setIdPoblacion(id);elemento.setNamePoblacion(name);agregarElemento(--tipoBusqueda,node.getParentNode().getParentNode(),elemento);break;}}  }
class C{  protected double[] randomSubRange(double boundStart,double boundLen){  if (boundLen >= 3 && usually()) {    int intBoundStart=(int)Math.ceil(boundStart);    int intBoundEnd=(int)(boundStart + boundLen);    int intBoundLen=intBoundEnd - intBoundStart;    int newLen=(int)randomGaussianMeanMax(intBoundLen / 16.0,intBoundLen);    int newStart=intBoundStart + randomInt(intBoundLen - newLen);    return new double[]{newStart,newLen};  } else {    double newLen=randomGaussianMeanMax(boundLen / 16,boundLen);    double newStart=boundStart + (boundLen - newLen == 0 ? 0 : (randomDouble() % (boundLen - newLen)));    return new double[]{newStart,newLen};  }}  }
class C{  public void map(Text key,Writable value,OutputCollector<Text,ObjectWritable> output,Reporter reporter) throws IOException {  ObjectWritable objWrite=new ObjectWritable();  Writable cloned=null;  if (value instanceof LinkDatum) {    cloned=new Text(((LinkDatum)value).getUrl());  } else {    cloned=WritableUtils.clone(value,conf);  }  objWrite.set(cloned);  output.collect(key,objWrite);}  }
class C{  public int append(CharSequence charSequence){  if (charSequence == null) {    String message=Logging.getMessage("nullValue.CharSequenceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int newCount=1 + this.count;  if (newCount > this.capacity)   this.expandCapacity(newCount);  int index=this.count;  this.offsets[index]=this.buffer.length();  this.lengths[index]=charSequence.length();  this.buffer.append(charSequence,0,charSequence.length());  this.count++;  return index;}  }
class C{  public SingleAssociationEnd_ createSingleAssociationEnd_(){  SingleAssociationEnd_Impl singleAssociationEnd_=new SingleAssociationEnd_Impl();  return singleAssociationEnd_;}  }
class C{  @BeforeClass public static void loadCerts() throws Exception {  GlobalConf.reload(new EmptyGlobalConf());  issuer=TestCertUtil.getCertChainCert("root_ca.p12");  assertNotNull(issuer);  signer=issuer;  signerKey=TestCertUtil.getCertChainKey("root_ca.p12");  assertNotNull(signerKey);  subject=TestCertUtil.getCertChainCert("user_0.p12");  assertNotNull(subject);}  }
class C{  public void onProfileClick(){  if (mCrossFader != null) {    if (mCrossFader.isCrossfaded()) {      mCrossFader.crossfade();    }  }  if (mAccountHeader != null) {    IProfile profile=mAccountHeader.getActiveProfile();    if (profile instanceof IDrawerItem) {      mDrawerAdapter.setDrawerItem(0,generateMiniDrawerItem((IDrawerItem)profile));    }  }}  }
class C{  public static long minimum(long a,long b,long c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public static boolean isEmpty(String str){  int strLen;  if (str == null || (strLen=str.length()) == 0 || str.equalsIgnoreCase("null")) {    return true;  }  for (int i=0; i < strLen; i++) {    if ((Character.isWhitespace(str.charAt(i)) == false)) {      return false;    }  }  return true;}  }
class C{  public void release(){  mFilterContext.tearDown();  mFilterContext=null;}  }
class C{  public static void trim(CharSequence aText,int[] aSpan){  int begin=aSpan[0];  int end=aSpan[1] - 1;  CharSequence data=aText;  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {    begin++;  }  while ((end > 0) && trimChar(data.charAt(end))) {    end--;  }  end++;  aSpan[0]=begin;  aSpan[1]=end;}  }
class C{  public void sendSessionEnds(){  sendSessionState(SessionState.End);}  }
class C{  public static String format(String message,Object argument){  return MessageFormat.format(message,new Object[]{argument});}  }
class C{  public boolean isRequired(){  return label.isRequired();}  }
class C{  private void checkConflicts(TemplateSubPatternAssociation head,XPathContext xctxt,int targetNode,QName mode){}  }
class C{  private CnATreeElement importEsa(ZielobjektTypeResult zielobjekt,CnATreeElement element) throws CommandException {  List<ESAResult> esaResult=getGstoolDao().findESAByZielobjekt(zielobjekt.zielobjekt);  if (esaResult == null || esaResult.size() == 0) {    LOG.warn("No ESA found for zielobjekt" + zielobjekt.zielobjekt.getName());    return element;  }  if (esaResult.size() > 1) {    LOG.warn("Warning: More than one ESA found for zielobjekt" + zielobjekt.zielobjekt.getName() + " Using first one only.");  }  if (LOG.isDebugEnabled()) {    LOG.debug("ESA found for zielobjekt " + zielobjekt.zielobjekt.getName());  }  if (element == null) {    if (LOG.isDebugEnabled()) {      LOG.debug("No matching CnaTreeElement to migrate ESA for zielobjekt " + zielobjekt.zielobjekt.getName());    }    return element;  }  transferData.transferESA(element,esaResult.get(0));  CnAElementHome.getInstance().update(element);  return element;}  }
class C{  public static boolean isCritical(int optionNumber){  return (optionNumber & 1) != 0;}  }
class C{  private void openShell(){  this.shell.setDefaultButton(this.close);  this.shell.pack();  this.shell.open();  SWTGraphicUtil.centerShell(this.shell);  while (!this.shell.isDisposed()) {    if (!this.shell.getDisplay().readAndDispatch()) {      this.shell.getDisplay().sleep();    }  }}  }
class C{  public void flush(){  out.flush();  err.flush();}  }
class C{  public void init() throws ServletException {}  }
class C{  protected PrintWriter createDebugPrintWriter() throws IOException {  return new PrintWriter(new LogWriter(log));}  }
class C{  public LexiconContextGenerator(Element node){  readFeatureParameters(node);}  }
class C{  public int position(){  return lineBuffer == null ? 0 : lineBuffer.length();}  }
class C{  protected void peekDouble(FPR reg,int idx){  asm.emitLFD(reg,spTopOffset + 2 * BYTES_IN_STACKSLOT - BYTES_IN_DOUBLE + (idx << LOG_BYTES_IN_STACKSLOT),FP);}  }
class C{  public void testLongsRoundTrip(){  byte[] encoded=new byte[Long.BYTES];  for (int i=0; i < 10000; i++) {    long value=TestUtil.nextLong(random(),Long.MIN_VALUE,Long.MAX_VALUE);    NumericUtils.longToSortableBytes(value,encoded,0);    assertEquals(value,NumericUtils.sortableBytesToLong(encoded,0));  }}  }
class C{  protected byte[] pad(final byte[] plain,final int offset,final int len){  return pad(plain,offset,len,false);}  }
class C{  public GenericItemAdapter<Model,Item> addModel(int position,List<Model> models){  super.add(position,toItems(models));  return this;}  }
class C{  private final short validateTempSplitFactor(String splitFactor,short permDurationInMinutes,short permSplitFactor) throws AdeFlowException {  short tempSplitFactor=Short.parseShort(splitFactor);  if (tempSplitFactor <= 0 || (permDurationInMinutes % tempSplitFactor != 0)) {    throw new AdeFlowException("Temporary Split Factor cannot be negative or 0 and MUST be a factor of the " + "Permanent Split Duration : " + permDurationInMinutes);  }  return (short)(tempSplitFactor * permSplitFactor);}  }
class C{  public void testPojoGeneration() throws Exception {  Boolean containsSchema=false;  for (  PojoDescriptor pojo : all) {    if (pojo.valueClassName().isEmpty())     containsSchema=true; else {      CodeGenerator.pojos(pojo,OUT_DIR_PATH,TEST_PACKAGE,true,true,YES_TO_ALL);      assertTrue("Generated key class POJO content is differ from expected for type " + pojo.keyClassName(),compareFiles(pojo.keyClassName(),TEST_PATH,GEN_PTRN));      assertTrue("Generated value class POJO content is differ from expected for type " + pojo.valueClassName(),compareFiles(pojo.valueClassName(),TEST_PATH,GEN_PTRN));    }  }  assertTrue("Generated POJOs does not contains schema.",containsSchema);}  }
class C{  protected IdeLocation create0(String path) throws CorruptedIdeLocationException {  if (path == null)   throw new NullPointerException("path");  File p=new File(path);  if (!p.exists())   return null;  if (p.isDirectory()) {    for (    String possibleExeName : getEclipseExecutableNames()) {      File f=new File(p,possibleExeName);      if (f.exists())       return findEclipseIniFromExe(f,0);    }    File f=new File(p,getIniName());    if (f.exists())     return new EclipseLocation(canonical(p),f);  }  if (p.isFile()) {    if (p.getName().equalsIgnoreCase(getIniName())) {      return new EclipseLocation(canonical(p.getParentFile()),p);    }  }  if (getEclipseExecutableNames().contains(p.getName().toLowerCase())) {    return findEclipseIniFromExe(p,0);  }  return null;}  }
class C{  public static boolean parseString(String value){  if (!(value.toLowerCase().equals("true")) && (!(value.toLowerCase().equals("false")))) {    throw new IllegalArgumentException("Boolean value '" + value + "' cannot be converted to boolean");  }  return Boolean.parseBoolean(value);}  }
class C{  private CSVWriter(char separator,char quotechar,char escapechar){  this.separator=separator;  this.quotechar=quotechar;  this.escapechar=escapechar;}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage("Reminder1") + "\n" + Bundle.getMessage("Reminder2"),Bundle.getMessage("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  @DSComment("not data related") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.291 -0500",hash_original_method="E4AD3F6E1F8504EC055E33BFD3FD6D04",hash_generated_method="E8D546866AF64A65F678EC41E51DF1E7") public PBEParameterSpec(byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;}  }
class C{  public static void writeApplicationXml(ApplicationXml appXml,File file,String encoding) throws IOException {  writeApplicationXml(appXml,file,encoding,false);}  }
class C{  public void dismiss(JSpinner spinner){  spinner.removeChangeListener(this);}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  public void mouseMoved(){  getList().deselect();  repaint();}  }
class C{  public Engine(Object core,Object service){  super(core);  if (service != null) {    invoke(engineSetService,service);  }}  }
class C{  public SHA224(){  super();}  }
class C{  public static InputDevice driverStationJoystick(int port){  Joystick joystick=new Joystick(port);  return InputDevice.create(null,null,null);}  }
class C{  @Override public void fileMoved(@NotNull VirtualFileMoveEvent event){  processFileChange(event.getFile());}  }
class C{  public int size(){  return readQueue.size();}  }
class C{  public static List<VcsFileRevision> history(final Project project,final FilePath path,String... parameters) throws VcsException {  final VirtualFile root=GitUtil.getGitRoot(path);  return history(project,path,root,parameters);}  }
class C{  public Object clone() throws CloneNotSupportedException {  if (digestSpi instanceof Cloneable) {    MessageDigestSpi digestSpiClone=(MessageDigestSpi)digestSpi.clone();    MessageDigest that=new Delegate(digestSpiClone,((MessageDigest)this).algorithm);    that.provider=((MessageDigest)this).provider;    that.state=((MessageDigest)this).state;    return that;  } else {    throw new CloneNotSupportedException();  }}  }
class C{  public static void enableGoogleFeedbackErrorReporting(String pluginId){  GoogleFeedbackErrorReporter errorReporter=new GoogleFeedbackErrorReporter();  errorReporter.setPluginDescriptor(PluginManager.getPlugin(PluginId.getId(pluginId)));  Extensions.getRootArea().getExtensionPoint(ExtensionPoints.ERROR_HANDLER_EP).registerExtension(errorReporter);}  }
class C{  public void remove(IFile file){synchronized (jsconConfig) {    jsconConfig.remove(file);  }}  }
class C{  public boolean verifyUserPassword(final String username,final String clearTextPassword){  if (clearTextPassword == null || clearTextPassword.isEmpty()) {    _log.error("Login with blank password is not allowed");    return false;  }  String encpassword=null;  PropertyInfo props=null;  try {    props=_coordinatorClient.getPropertyInfo();  } catch (  CoordinatorException e) {    _log.error("Access local user properties failed",e);    return false;  }  if (props == null) {    _log.error("Access local user properties failed");    return false;  }  encpassword=props.getProperty("system_" + username + "_encpassword");  if (StringUtils.isBlank(encpassword)) {    _log.error("No password set for user {} ",username);    return false;  }  if (StringUtils.startsWith(encpassword,CRYPT_SHA_512)) {    String hashedValue=Crypt.crypt(clearTextPassword,encpassword);    return encpassword.equals(hashedValue);  } else {    String encryptedValue=encrypt(clearTextPassword);    return encpassword.equals(encryptedValue);  }}  }
class C{  public void handlePotentialCommitFailure(HashMap<DistributedMember,DistTXCoordinatorInterface> msgMap){  if (fatalExceptions.size() > 0) {    StringBuffer errorMessage=new StringBuffer("Incomplete commit of transaction ").append(id).append(".  Caused by the following exceptions: ");    for (Iterator i=fatalExceptions.entrySet().iterator(); i.hasNext(); ) {      Map.Entry me=(Map.Entry)i.next();      DistributedMember mem=(DistributedMember)me.getKey();      errorMessage.append(" From member: ").append(mem).append(" ");      List exceptions=(List)me.getValue();      for (Iterator ei=exceptions.iterator(); ei.hasNext(); ) {        Exception e=(Exception)ei.next();        errorMessage.append(e);        for (        StackTraceElement ste : e.getStackTrace()) {          errorMessage.append("\n\tat ").append(ste);        }        if (ei.hasNext()) {          errorMessage.append("\nAND\n");        }      }      errorMessage.append(".");    }    throw new CommitIncompleteException(errorMessage.toString());  }}  }
class C{  protected boolean insertEdge(G graph,V v_i,V v_j,E edge){  if (v_i != v_j) {    if (!v_i.getNeighbours().contains(v_j)) {      edge.setVertices(new Tuple<SparseVertex,SparseVertex>(v_i,v_j));      v_i.addEdge(edge);      v_j.addEdge(edge);      return graph.insertEdge(edge);    } else     return false;  } else   return false;}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_ATTRIBUTE_SOURCE__ATTRIBUTE:    return getAttribute();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addHeading(String text){  if (text.length() > mHeaderWidth) {    throw new IllegalArgumentException("Header text too wide, expected: " + mHeaderWidth + " got: "+ text.length());  }  addSeparator();  mTable.append(String.format("|" + widthString(mSpacing) + widthString(mHeaderWidth)+ widthString(mSpacing)+ "|%n","",text,""));  for (  int width : mWidths) {    mTable.append("+").append(StringUtils.repeat("=",width + mSpacing * 2));  }  mTable.append("+");  mTable.append(StringUtils.LS);}  }
class C{  public void init(GuiManualHerblore manual){  for (  ManualWidgetBase widget : widgets)   widget.init(manual);}  }
class C{  public void reset(){  timeZoneId=null;  serverBaseUrl=null;  reportingAvailable=null;  hiddenUIElements=null;}  }
class C{  public void resume(){  if (mPaused) {    mPaused=false;    onStateChanged();  }}  }
class C{  private static int origin(Alignment alignment,int cellOrigin,int cellSize,int componentSize){  if (alignment == RIGHT || alignment == BOTTOM) {    return cellOrigin + cellSize - componentSize;  } else   if (alignment == CENTER) {    return cellOrigin + (cellSize - componentSize) / 2;  } else {    return cellOrigin;  }}  }
class C{  public final void unifyWith(TypeVar other) throws HaskellTypeError {  if (this.instance.isRigid) {    other.instance.unifyWith(this.instance);  } else   if (other.instance.isRigid || this.instance.internal) {    this.instance.unifyWith(other.instance);  } else {    other.instance.unifyWith(this.instance);  }}  }
class C{  public GridServerUnreachableException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void clearWaypoints(){synchronized (waypoints) {    waypoints.clear();  }}  }
class C{  public BerInputStream(InputStream in) throws IOException {  this(in,BUF_INCREASE_SIZE);}  }
class C{  public void testRemoveNamedItemNS1() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Attr newAttr;  Node removedNode;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  removedNode=attributes.removeNamedItemNS("http://www.usa.com","domestic");  assertNotNull("retval",removedNode);  newAttr=(Attr)attributes.getNamedItem("dmstc:domestic");  assertNull("nodeRemoved",newAttr);}  }
class C{  public void virtualViewToScreenCoordinates(ViewPoint viewPositionIn,Point screenPositionOut){  mWorkspaceView.getLocationOnScreen(mTempIntArray2);  screenPositionOut.x=mTempIntArray2[0] + (int)(viewPositionIn.x * mWorkspaceView.getScaleX());  screenPositionOut.y=mTempIntArray2[1] + (int)(viewPositionIn.y * mWorkspaceView.getScaleY());}  }
class C{  public boolean confirmEnoughAbsoluteOthers(int[] othersAbsolute,int src,int dest,boolean removeDest){  if (countOfAbsoluteOthers(othersAbsolute,src,dest,removeDest) != numOtherInfoContributors) {    throw new RuntimeException("Incorrect number of others in absolutes");  }  return true;}  }
class C{  private void unregisterEventHandler(){  if (editor != null) {    editor.removePropertyChangeListener(eventHandler);  }  if (activeView != null) {    activeView.removePropertyChangeListener(eventHandler);    activeView=null;  }  if (specificView != null) {    specificView.removePropertyChangeListener(eventHandler);  }}  }
class C{  public Macros(){  macros=new Hashtable();  used=new Hashtable();}  }
class C{  @Override @Transactional public void logout(HttpServletRequest request,HttpServletResponse response,Authentication authentication){  String rememberMeCookie=extractRememberMeCookie(request);  if (rememberMeCookie != null && rememberMeCookie.length() != 0) {    try {      String[] cookieTokens=decodeCookie(rememberMeCookie);      PersistentToken token=getPersistentToken(cookieTokens);      persistentTokenRepository.delete(token);    } catch (    InvalidCookieException ice) {      log.info("Invalid cookie, no persistent token could be deleted");    }catch (    RememberMeAuthenticationException rmae) {      log.debug("No persistent token found, so no token could be deleted");    }  }  super.logout(request,response,authentication);}  }
class C{  public JVM_MANAGEMENT_MIB_IMPL(){  handler=new NotificationHandler();  emitter=(NotificationEmitter)ManagementFactory.getMemoryMXBean();  emitter.addNotificationListener(handler,null,null);}  }
class C{  public MiniDrawer withAccountHeader(@NonNull AccountHeader accountHeader){  this.mAccountHeader=accountHeader;  return this;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        return VALUE_CHARACTERS;      }case 12:    break;case 7:{    yybegin(YYINITIAL);    return WHITESPACE;  }case 13:break;case 3:{return ERROR;}case 14:break;case 9:{yybegin(IN_VALUE);return KEY_VALUE_SEPARATOR;}case 15:break;case 10:{CharSequence matched=yytext();int ind=matched.toString().indexOf(" ;");if (ind >= 0) {yypushback(matched.length() - ind);yybegin(SEMICOLON);} else {yybegin(YYINITIAL);}return VALUE_CHARACTERS;}case 16:break;case 6:{return SECTION_NAME;}case 17:break;case 5:{yybegin(YYINITIAL);return COMMENT;}case 18:break;case 2:{return WHITESPACE;}case 19:break;case 8:{yybegin(YYINITIAL);return RBRACKET;}case 20:break;case 1:{yybegin(IN_KEY_VALUE_SEPARATOR);return KEY_CHARACTERS;}case 21:break;case 4:{yybegin(IN_SECTION_NAME);return LBRACKET;}case 22:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public int computeNumberOfFixesForCleanUp(ICleanUp cleanUp){  return cleanUp instanceof IMultiFix ? ((IMultiFix)cleanUp).computeNumberOfFixes(fCompilationUnit) : -1;}  }
class C{  public void test_rangeQuery_staticPartitions_unbounded_2entries_2partitions_02() throws IOException {  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{5}},new UUID[]{dataService0.getServiceUUID(),dataService1.getServiceUUID()});  final IIndex ndx=fed.getIndex(name,ITx.UNISOLATED);  ndx.insert(new byte[]{1},new byte[]{1});  ndx.insert(new byte[]{2},new byte[]{2});{    final int capacity=1;    final int flags=IRangeQuery.KEYS | IRangeQuery.VALS;    final ITupleIterator itr=ndx.rangeIterator(null,null,capacity,flags,null);    assertTrue("hasNext",itr.hasNext());    ITuple tuple=itr.next();    assertEquals("getKey()",new byte[]{1},tuple.getKey());    assertEquals("getValue()",new byte[]{1},tuple.getValue());    assertTrue("hasNext",itr.hasNext());    tuple=itr.next();    assertEquals("getKey()",new byte[]{2},tuple.getKey());    assertEquals("getValue()",new byte[]{2},tuple.getValue());    assertFalse("hasNext",itr.hasNext());  }}  }
class C{  public static int read(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return 0;  }  try {    int readCount=Libcore.os.read(fd,bytes,byteOffset,byteCount);    if (readCount == 0) {      return -1;    }    return readCount;  } catch (  ErrnoException errnoException) {    if (errnoException.errno == EAGAIN) {      return 0;    }    throw errnoException.rethrowAsIOException();  }}  }
class C{  public QuotaBytesTotal(Long value){  this();  setValue(value);}  }
class C{  public Properties collectProperties(){  Properties props=new Properties();  for (  String key : editors.keySet()) {    PropertyEditor editor=editors.get(key);    if (editor != null) {      String stuff=editor.getAsText();      if (stuff != null && stuff.length() > 0) {        props.put(key,stuff);      }      if (editor instanceof PropertyConsumer) {        ((PropertyConsumer)editor).getProperties(props);      }    }  }  return props;}  }
class C{  public void fileRemoved(String filename) throws Exception {  undeploy(filename);}  }
class C{  public static StyleAssociation createStyleAssociation(String text,SynthStyle style) throws PatternSyntaxException {  return createStyleAssociation(text,style,0);}  }
class C{  public void clearCertificateChain(){  certificateChain.clear();}  }
class C{  public JQuickStartPane(KseFrame kseFrame){  super(GRADIENT_COLOR_1,GRADIENT_COLOR_2);  this.kseFrame=kseFrame;  new DropTarget(this,this);  initComponents();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.922 -0500",hash_original_method="3533EE541F404B8ADD4D4E5426E464A7",hash_generated_method="7D9B5E9F1FEE696689A666EB95FD65F5") public SslError(int error,X509Certificate certificate,String url){  this(error,new SslCertificate(certificate),url);}  }
class C{  public RepresentationCollection(Collection<T> items){  super(null);  this.items=items;}  }
class C{  public void clear(ClassLoader cl){  if (page != null && page.getClass().getClassLoader().equals(cl)) {    page=null;  }}  }
class C{  public float norm2(){  float norm=0.0f;  for (int i=0; i < length; i++) {    norm+=get(i) * get(i);  }  return (float)Math.sqrt(norm);}  }
class C{  @Override public boolean createFrom(final IScope scope,final List<Map<String,Object>> inits,final Integer max,final Object source,final Arguments init,final CreateStatement statement){  final IList<GamaList<Object>> input=(IList<GamaList<Object>>)source;  final GamaList<Object> colNames=input.get(0);  final GamaList<Object> colTypes=input.get(1);  final GamaList<GamaList<Object>> initValue=(GamaList)input.get(2);  final int num=max == null ? initValue.length(scope) : CmnFastMath.min(max,initValue.length(scope));  for (int i=0; i < num; i++) {    final GamaList<Object> rowList=initValue.get(i);    final Map map=GamaMapFactory.create(Types.NO_TYPE,Types.NO_TYPE);    computeInits(scope,map,rowList,colTypes,colNames,init);    inits.add(map);  }  return true;}  }
class C{  @Deprecated public static void invokeInEveryVM(final Class<?> targetClass,final String targetMethod){  for (int hostIndex=0; hostIndex < Host.getHostCount(); hostIndex++) {    Host host=Host.getHost(hostIndex);    for (int vmIndex=0; vmIndex < host.getVMCount(); vmIndex++) {      VM vm=host.getVM(vmIndex);      vm.invoke(targetClass,targetMethod);    }  }}  }
class C{  public void invalidateDecorators(){  adapter.invalidateDecorators();}  }
class C{  public static char successor(final char n) throws NoSuccessorException {  if (Character.MAX_VALUE == n) {    throw new NoSuccessorException();  } else {    return (char)(n + 1);  }}  }
class C{  public int size(){  return size;}  }
class C{  @Override public DatabaseParameterBuffer deepCopy(){  return new FBConnectionRequestInfo(dpb.deepCopy());}  }
class C{  protected void initialize(){}  }
class C{  public String toString(){  if (m_FilteredInstances == null) {    return "RandomizableFilteredClassifier: No model built yet.";  }  String result="RandomizableFilteredClassifier using " + getClassifierSpec() + " on data filtered through "+ getFilterSpec()+ "\n\nFiltered Header\n"+ m_FilteredInstances.toString()+ "\n\nClassifier Model\n"+ m_Classifier.toString();  return result;}  }
class C{  @Override public Monitor addException(Monitor mon,Throwable throwable){  String stackTtrace=new StringBuffer("stackTrace=").append(Misc.getExceptionTrace(throwable)).toString();  if (mon != null) {    MonKey key=mon.getMonKey();    key.setDetails(stackTtrace);  }  MonitorFactory.add(new MonKeyImp(MonitorFactory.EXCEPTIONS_LABEL,stackTtrace,"Exception"),1);  return MonitorFactory.add(new MonKeyImp(throwable.getClass().getName(),stackTtrace,"Exception"),1);}  }
class C{  public ExceptionWithContext(Throwable cause){  this(cause,null);}  }
class C{  public void sameLocals(int offsetDelta,int tag,int data){  numOfEntries++;  if (offsetDelta < 64)   output.write(offsetDelta + 64); else {    output.write(247);    write16(offsetDelta);  }  writeTypeInfo(tag,data);}  }
class C{  void handleSelectionChanged(String selection){  if (mDidExpandSelection) {    mDidExpandSelection=false;    return;  }  if (selection == null || selection.isEmpty()) {    scheduleInvalidTapNotification();    if (mSelectionType == SelectionType.TAP) {      resetSelectionStates();      return;    }  }  if (selection != null && !selection.isEmpty()) {    unscheduleInvalidTapNotification();  }  mSelectedText=selection;  if (mWasTapGestureDetected) {    mSelectionType=SelectionType.TAP;    handleSelection(selection,mSelectionType);    mWasTapGestureDetected=false;  } else {    mHandler.handleSelectionModification(selection,mX,mY);  }}  }
class C{  @Override public int calculateHash(RowCursor cursor){  return table().getPodHash(cursor);}  }
class C{  public static boolean isMpqMagic(final byte[] magic){  if (magic.length != MPQ_MAGIC.length)   return false;  for (int i=0; i < MPQ_MAGIC.length; i++)   if (MPQ_MAGIC[i] != magic[i])   return false;  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STATE___STATE_NAME_1:    setStateName_1(STATE_NAME_1_EDEFAULT);  return;case UmplePackage.STATE___STATE_INTERNAL_1:getStateInternal_1().clear();return;case UmplePackage.STATE___FINAL_1:setFinal_1(FINAL_1_EDEFAULT);return;case UmplePackage.STATE___ANONYMOUS_STATE_11:getAnonymous_state_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public CachedRenderableLayer(Sector coverage){  this.extentTree=new BasicQuadTree<Renderable>(DEFAULT_DEPTH,coverage,null);}  }
class C{  DVariable extractRegister(DMessage msg,int number){  int oType=msg.getWord();  return extractAtom(msg,"$" + number,oType,0);}  }
class C{  public static boolean copyFile(String source,String destination,boolean remountAsRw,boolean preserveFileAttributes){  return getInternals().copyFile(source,destination,remountAsRw,preserveFileAttributes);}  }
class C{  public static Model createMemoryModel(){  return ModelFactory.createModelForGraph(createMemoryGraph());}  }
class C{  protected JsonDeserializer<Object> _createAndCache2(DeserializationConfig config,JavaType type,BeanProperty property) throws JsonMappingException {  JsonDeserializer<Object> deser;  try {    deser=_createDeserializer(config,type,property);  } catch (  IllegalArgumentException iae) {    throw new JsonMappingException(iae.getMessage(),null,iae);  }  if (deser == null) {    return null;  }  boolean isResolvable=(deser instanceof ResolvableDeserializer);  boolean addToCache=(deser.getClass() == BeanDeserializer.class);  if (!addToCache) {    if (config.isEnabled(DeserializationConfig.Feature.USE_ANNOTATIONS)) {      AnnotationIntrospector aintr=config.getAnnotationIntrospector();      AnnotatedClass ac=AnnotatedClass.construct(deser.getClass(),aintr,null);      Boolean cacheAnn=aintr.findCachability(ac);      if (cacheAnn != null) {        addToCache=cacheAnn.booleanValue();      }    }  }  if (isResolvable) {    _incompleteDeserializers.put(type,deser);    _resolveDeserializer(config,(ResolvableDeserializer)deser);    _incompleteDeserializers.remove(type);  }  if (addToCache) {    _cachedDeserializers.put(type,deser);  }  return deser;}  }
class C{  public static boolean updatePreferenceToSpecificActivityFromMetaDataOrRemove(Context context,PreferenceGroup parentPreferenceGroup,String preferenceKey){  Preference preference=parentPreferenceGroup.findPreference(preferenceKey);  if (preference == null) {    return false;  }  Intent intent=preference.getIntent();  if (intent != null) {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> list=pm.queryIntentActivities(intent,PackageManager.GET_META_DATA);    int listSize=list.size();    for (int i=0; i < listSize; i++) {      ResolveInfo resolveInfo=list.get(i);      if ((resolveInfo.activityInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {        Drawable icon=null;        String title=null;        String summary=null;        try {          Resources res=pm.getResourcesForApplication(resolveInfo.activityInfo.packageName);          Bundle metaData=resolveInfo.activityInfo.metaData;          if (res != null && metaData != null) {            if (preference instanceof IconPreferenceScreen) {              icon=res.getDrawable(metaData.getInt(META_DATA_PREFERENCE_ICON));            }            title=res.getString(metaData.getInt(META_DATA_PREFERENCE_TITLE));            summary=res.getString(metaData.getInt(META_DATA_PREFERENCE_SUMMARY));          }        } catch (        NameNotFoundException e) {        }catch (        NotFoundException e) {        }        if (TextUtils.isEmpty(title)) {          title=resolveInfo.loadLabel(pm).toString();        }        preference.setTitle(title);        preference.setSummary(summary);        if (preference instanceof IconPreferenceScreen) {          IconPreferenceScreen iconPreference=(IconPreferenceScreen)preference;          iconPreference.setIcon(icon);        }        preference.setIntent(new Intent().setClassName(resolveInfo.activityInfo.packageName,resolveInfo.activityInfo.name));        return true;      }    }  }  parentPreferenceGroup.removePreference(preference);  return false;}  }
class C{  public void log(Level level,String msg,Object param1){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  Object params[]={param1};  lr.setParameters(params);  doLog(lr);}  }
class C{  public BadAddressException(String error){  super("The address is wrong: " + error + ".");}  }
class C{  public static void startTiming(String cause){  if (timingStart != -1) {    doneTiming();  }  timingCause=cause;  timingStart=System.currentTimeMillis();}  }
class C{  public static void localChangesOverwrittenByWithoutConflict(GitRepository repository,String branch,Collection<String> fileNames){  GitExecutor.cd(repository);  for (  String it : fileNames) {    Executor.echo(it,LOCAL_CHANGES_OVERWRITTEN_BY.initial);    GitExecutor.git("add " + it);  }  GitExecutor.git("commit -m initial_changes");  GitExecutor.git("checkout -b " + branch);  for (  String it : fileNames) {    prepend(it,LOCAL_CHANGES_OVERWRITTEN_BY.branchLine);    GitExecutor.git("add " + it);  }  GitExecutor.git("commit -m branch_changes");  GitExecutor.git("checkout master");  for (  String it : fileNames) {    append1(it,LOCAL_CHANGES_OVERWRITTEN_BY.masterLine);  }}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  mStringBuilder.append(ch,start,length);}  }
class C{  public static String value(String option){  if (table == null)   return null;  return ((String)table.get(option.toLowerCase()));}  }
class C{  public AACPlayer(PlayerCallback playerCallback){  this(playerCallback,DEFAULT_AUDIO_BUFFER_CAPACITY_MS,DEFAULT_DECODE_BUFFER_CAPACITY_MS);}  }
class C{  public TimeSeries(String title){  super(title);}  }
class C{  public void registerDeviceService(Class<? extends DeviceService> deviceClass,Class<? extends DiscoveryProvider> discoveryClass){  if (!DeviceService.class.isAssignableFrom(deviceClass))   return;  if (!DiscoveryProvider.class.isAssignableFrom(discoveryClass))   return;  try {    DiscoveryProvider discoveryProvider=null;    for (    DiscoveryProvider dp : discoveryProviders) {      if (dp.getClass().isAssignableFrom(discoveryClass)) {        discoveryProvider=dp;        break;      }    }    if (discoveryProvider == null) {      Constructor<? extends DiscoveryProvider> myConstructor=discoveryClass.getConstructor(Context.class);      Object myObj=myConstructor.newInstance(context);      discoveryProvider=(DiscoveryProvider)myObj;      discoveryProvider.addListener(this);      discoveryProviders.add(discoveryProvider);    }    Method m=deviceClass.getMethod("discoveryFilter");    Object result=m.invoke(null);    DiscoveryFilter discoveryFilter=(DiscoveryFilter)result;    String serviceId=discoveryFilter.getServiceId();    deviceClasses.put(serviceId,deviceClass);    discoveryProvider.addDeviceFilter(discoveryFilter);    if (mSearching) {      discoveryProvider.restart();    }  } catch (  SecurityException e) {    e.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }catch (  InstantiationException e) {    e.printStackTrace();  }catch (  RuntimeException e) {    e.printStackTrace();  }}  }
class C{  @Override public boolean isSignificant(){  return (isSignificant) ? super.isSignificant() : false;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.STATECHART;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public static void enqueueJobs(Context context,ArrayList<File> q){  mFileQueue=q;  mCount=mFileQueue.size();  createFolderStructure(context,mFileQueue.get(0));}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  com.google.common.base.Preconditions.checkArgument(expression,errorMessageTemplate,errorMessageArgs);}  }
class C{  public T next(){  ServiceObjectData<T> localData=data;  int index=loopPos;  int modIdx;  int hardStop=index + localData.size;  T result=null;  do {    modIdx=(int)(++index) & localData.mask;    result=localData.serviceObjectValues[modIdx];  } while ((null == result || !validator.isValid(result)) && index <= hardStop);  loopPos=modIdx;  return index <= hardStop ? result : null;}  }
class C{  public void computeLabelling(GeometryGraph[] geom){  super.computeLabelling(geom);  label=new Label(Location.NONE);  for (Iterator it=iterator(); it.hasNext(); ) {    EdgeEnd ee=(EdgeEnd)it.next();    Edge e=ee.getEdge();    Label eLabel=e.getLabel();    for (int i=0; i < 2; i++) {      int eLoc=eLabel.getLocation(i);      if (eLoc == Location.INTERIOR || eLoc == Location.BOUNDARY)       label.setLocation(i,Location.INTERIOR);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.147 -0500",hash_original_method="F250EC80C8CD1CBE5FF237A98CBD8CD0",hash_generated_method="CB87B5E2DA0BE74731188AC23FFB4D66") public AuthorizationHeader createAuthorizationHeader(String scheme) throws ParseException {  if (scheme == null)   throw new NullPointerException("null arg scheme ");  Authorization auth=new Authorization();  auth.setScheme(scheme);  return auth;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicTextPaneUI();}  }
class C{  public void validate() throws ServiceOperationException {  final Organization supplier=dm.getCurrentUser().getOrganization();  Marketplace marketplace=null;  for (  TechnicalProduct product : technicalProducts) {    final Map<Marketplace,Map<Long,TriggerData>> servicesOnMpls=getActiveServicesForTechnicalProduct(product,supplier);    mergeActiveServicesWithTriggers(servicesOnMpls,triggerOperations.get(Long.valueOf(product.getKey())));    for (Iterator<Marketplace> i=servicesOnMpls.keySet().iterator(); i.hasNext(); ) {      marketplace=i.next();      if (!hasOrWillHaveVisibleServices(servicesOnMpls.get(marketplace))) {        final ServiceOperationException sof=new ServiceOperationException(Reason.NO_VISIBLE_ACTIVE_SERVICE);        sof.setMessageParams(new String[]{product.getTechnicalProductId(),marketplace.getMarketplaceId()});        logger.logWarn(Log4jLogger.SYSTEM_LOG,sof,LogMessageIdentifier.WARN_NO_VISIBLE_GLOBAL_SERVICE_ASSIGNED,Long.toString(product.getKey()));        throw sof;      }    }  }}  }
class C{  public static void removeDatasource(String sourcePath,String destPath,String dsName) throws IOException {  if (Util.sameFilePath(sourcePath,destPath)) {    throw new IllegalArgumentException(SOURCE_AND_DESTINATION_PATHS_ARE_THE_SAME);  }  RrdDb rrdSource=new RrdDb(sourcePath);  try {    RrdDef rrdDef=rrdSource.getRrdDef();    rrdDef.setPath(destPath);    rrdDef.removeDatasource(dsName);    RrdDb rrdDest=new RrdDb(rrdDef);    try {      rrdSource.copyStateTo(rrdDest);    }  finally {      rrdDest.close();    }  }  finally {    rrdSource.close();  }}  }
class C{  public boolean isConsecutive(){  return consecutive;}  }
class C{  public void increment(){  value++;}  }
class C{  public static void fill(int[] array,int start,int end,int value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void sort(Comparator<? super LogLine> comparator){  this.mComparator=comparator;  Collections.sort(mObjects,comparator);  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public ExpandedMenuView(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuView,0,0);  mAnimations=a.getResourceId(com.android.internal.R.styleable.MenuView_windowAnimationStyle,0);  a.recycle();  setOnItemClickListener(this);}  }
class C{  public Node peek(){  if (n == 0)   throw new IllegalStateException();  return a[n - 1];}  }
class C{  private boolean isNewLetClass(JCTree tree){  if (tree.getTag() != JCTree.Tag.LETEXPR)   return false;  JCTree.LetExpr let=(JCTree.LetExpr)tree;  return let.stats.size() == 1 && let.stats.head.getTag() == JCTree.Tag.CLASSDEF && let.expr != null && isNewAnonymousClass(let.expr);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord, value;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputFileName=args[1];  if ((inputHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputRaster=new WhiteboxRaster(inputHeader,"r");    int rows=inputRaster.getNumberRows();    int cols=inputRaster.getNumberColumns();    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POINT);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=inputRaster.getValue(row,col);        if (value > 0) {          FID++;          xCoord=inputRaster.getXCoordinateFromColumn(col);          yCoord=inputRaster.getYCoordinateFromRow(row);          whitebox.geospatialfiles.shapefile.Point pnt=new whitebox.geospatialfiles.shapefile.Point(xCoord,yCoord);          output.addRecord(pnt);          Object[] rowData=new Object[2];          rowData[0]=new Double(FID);          rowData[1]=new Double(value);          writer.addRecord(rowData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    writer.write();    inputRaster.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void close() throws IOException {  _socket.close();}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  public static void assertEquals(float expected,float actual,float delta){  Assert.assertEquals(expected,actual,delta);}  }
class C{  private void computeHandlerLiveSet(){  if (ir.getHandlerLivenessComputed() && currentBlock.hasExceptionHandlers()) {    Enumeration<BasicBlock> e=currentBlock.getExceptionalOut();    while (e.hasMoreElements()) {      ExceptionHandlerBasicBlock handlerBlock=(ExceptionHandlerBasicBlock)e.nextElement();      handlerLiveSet.add(handlerBlock.getLiveSet());    }  }}  }
class C{  public void test1(){  final GridLayoutManager layoutManager=new GridLayoutManager(2,2,new Insets(0,0,0,0),0,0);  final JPanel panel=new JPanel(layoutManager);  final JLabel label=new JLabel();  label.setPreferredSize(new Dimension(50,10));  final JTextField field=new JTextField();  field.setPreferredSize(new Dimension(100,10));  final JTextField scroll=new JTextField();  scroll.setPreferredSize(new Dimension(503,10));  panel.add(label,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,new Dimension(0,0),null,null,0));  panel.add(field,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,new Dimension(0,0),null,null,0));  panel.add(scroll,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,new Dimension(0,0),null,null,0));  assertEquals(503,panel.getMinimumSize().width);  assertEquals(503,panel.getPreferredSize().width);  panel.setSize(503,100);  panel.doLayout();  assertEquals(50,label.getWidth());  assertEquals(453,field.getWidth());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public DynamicIntArray(int[] intArray){  size=intArray.length;  int capacity=(int)Math.min(size * 110L / 100,Integer.MAX_VALUE);  data=new int[capacity];  System.arraycopy(intArray,0,data,0,size);}  }
class C{  private void registerChildListeners(){  Iterator<PropertyChangeListener> iter=fChildListeners.iterator();  while (iter.hasNext()) {    PropertyChangeListener listener=iter.next();    listener.register();  }}  }
class C{  @Override public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition pos){  StringBuffer sb=new StringBuffer();  long hours=number / 3600;  sb.append(this.formatter.format(hours)).append(":");  long remaining=number - (hours * 3600);  long minutes=remaining / 60;  sb.append(this.formatter.format(minutes)).append(":");  long seconds=remaining - (minutes * 60);  sb.append(this.formatter.format(seconds));  return sb;}  }
class C{  public boolean containsAllAttributeValues(UserAttributeParam attributeParam){  boolean containsAllAttributes=false;  if (attributeParam == null) {    _log.warn("Invalid user attribute param");    return containsAllAttributes;  }  _log.debug("Comparing attributes {}, {}",attributeParam.toString(),this.toString());  if (!getKey().equalsIgnoreCase(attributeParam.getKey())) {    _log.debug("Attribute key {} does not match with {}",getKey(),attributeParam.getKey());    return containsAllAttributes;  }  if (getValues() == null || getValues().isEmpty() || attributeParam.getValues() == null || attributeParam.getValues().isEmpty()) {    _log.debug("Empty attribute values to compare. attributes {}, comparing attributes {}",getValues(),attributeParam.getValues());    return containsAllAttributes;  }  containsAllAttributes=true;  for (  String comparingValue : attributeParam.getValues()) {    boolean foundValue=false;    for (    String value : getValues()) {      if (value != null && comparingValue != null && comparingValue.equalsIgnoreCase(value)) {        foundValue=true;        break;      }    }    if (!foundValue) {      containsAllAttributes=false;      break;    }  }  return containsAllAttributes;}  }
class C{  public boolean isPublisherStreaming(String participantId) throws RoomException {  Participant participant=getParticipant(participantId);  if (participant == null) {    throw new RoomException(Code.USER_NOT_FOUND_ERROR_CODE,"No participant with id '" + participantId + "' was found");  }  if (participant.isClosed()) {    throw new RoomException(Code.USER_CLOSED_ERROR_CODE,"Participant '" + participant.getName() + "' has been closed");  }  return participant.isStreaming();}  }
class C{  public BigInteger(byte[] val){  if (val.length == 0)   throw new NumberFormatException("Zero length BigInteger");  if (val[0] < 0) {    mag=makePositive(val);    signum=-1;  } else {    mag=stripLeadingZeroBytes(val);    signum=(mag.length == 0 ? 0 : 1);  }  if (mag.length >= MAX_MAG_LENGTH) {    checkRange();  }}  }
class C{  public boolean equals(TextHitInfo hitInfo){  return hitInfo != null && charIndex == hitInfo.charIndex && isLeadingEdge == hitInfo.isLeadingEdge;}  }
class C{  public void testBug25073() throws Exception {  Properties props=new Properties();  props.setProperty("rewriteBatchedStatements","true");  Connection multiConn=getConnectionWithProps(props);  createTable("testBug25073","(pk_field INT PRIMARY KEY NOT NULL AUTO_INCREMENT, field1 INT)");  Statement multiStmt=multiConn.createStatement();  multiStmt.addBatch("INSERT INTO testBug25073(field1) VALUES (1)");  multiStmt.addBatch("INSERT INTO testBug25073(field1) VALUES (2)");  multiStmt.addBatch("INSERT INTO testBug25073(field1) VALUES (3)");  multiStmt.addBatch("INSERT INTO testBug25073(field1) VALUES (4)");  multiStmt.addBatch("UPDATE testBug25073 SET field1=5 WHERE field1=1");  multiStmt.addBatch("UPDATE testBug25073 SET field1=6 WHERE field1=2 OR field1=3");  int beforeOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  multiStmt.executeBatch();  int afterOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  assertEquals(beforeOpenStatementCount,afterOpenStatementCount);  createTable("testBug25073","(pk_field INT PRIMARY KEY NOT NULL AUTO_INCREMENT, field1 INT)");  props.clear();  props.setProperty("rewriteBatchedStatements","true");  props.setProperty("maxAllowedPacket","1024");  props.setProperty("dumpQueriesOnException","true");  props.setProperty("maxQuerySizeToLog",String.valueOf(1024 * 1024 * 2));  multiConn=getConnectionWithProps(props);  multiStmt=multiConn.createStatement();  for (int i=0; i < 1000; i++) {    multiStmt.addBatch("INSERT INTO testBug25073(field1) VALUES (" + i + ")");  }  beforeOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  multiStmt.executeBatch();  afterOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  assertEquals(beforeOpenStatementCount,afterOpenStatementCount);  createTable("testBug25073","(pk_field INT PRIMARY KEY NOT NULL AUTO_INCREMENT, field1 INT)");  props.clear();  props.setProperty("useServerPrepStmts","false");  props.setProperty("rewriteBatchedStatements","true");  props.setProperty("dumpQueriesOnException","true");  props.setProperty("maxQuerySizeToLog",String.valueOf(1024 * 1024 * 2));  multiConn=getConnectionWithProps(props);  PreparedStatement pStmt=multiConn.prepareStatement("INSERT INTO testBug25073(field1) VALUES (?)",Statement.RETURN_GENERATED_KEYS);  for (int i=0; i < 1000; i++) {    pStmt.setInt(1,i);    pStmt.addBatch();  }  beforeOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  pStmt.executeBatch();  afterOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  assertEquals(beforeOpenStatementCount,afterOpenStatementCount);  createTable("testBug25073","(pk_field INT PRIMARY KEY NOT NULL AUTO_INCREMENT, field1 INT)");  props.setProperty("useServerPrepStmts","false");  props.setProperty("rewriteBatchedStatements","true");  props.setProperty("maxAllowedPacket","1024");  props.setProperty("dumpQueriesOnException","true");  props.setProperty("maxQuerySizeToLog",String.valueOf(1024 * 1024 * 2));  multiConn=getConnectionWithProps(props);  pStmt=multiConn.prepareStatement("INSERT INTO testBug25073(field1) VALUES (?)",Statement.RETURN_GENERATED_KEYS);  for (int i=0; i < 1000; i++) {    pStmt.setInt(1,i);    pStmt.addBatch();  }  beforeOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  pStmt.executeBatch();  afterOpenStatementCount=((com.mysql.jdbc.Connection)multiConn).getActiveStatementCount();  assertEquals(beforeOpenStatementCount,afterOpenStatementCount);}  }
class C{  public static <T>int size(@Nullable Iterator<? extends T> it,@Nullable IgnitePredicate<? super T>... p){  if (it == null)   return 0;  int n=0;  if (!isAlwaysFalse(p)) {    while (it.hasNext()) {      if (isAll(it.next(),p))       n++;    }  }  return n;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + mean+ ","+ gamma+ ","+ cut+ ")";}  }
class C{  public void sphereDetail(int ures,int vres){  g.sphereDetail(ures,vres);}  }
class C{  private static int calculateChecksum(final String tagString,final ByteBuffer data){  int sum=0;  data.mark();  if (tagString.equals("head")) {    data.putInt(8,0);  }  for (int i=0, nlongs=(data.remaining() + 3) / 4; i < nlongs; ++i) {switch (data.remaining()) {case 3:      sum+=((data.getShort() << 16) + (data.get() << 8));    break;case 2:  sum+=(data.getShort() << 16);break;case 1:sum+=((data.get() & 0xff) << 24);break;default :sum+=data.getInt();}}data.reset();return sum;}  }
class C{  public BasicLTMatrix(String mname,int nrows){  super(mname,nrows);}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MRMALine[] lines=getLines(false);  if (lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  for (  MRMALine line : lines) {    if (!line.checkQty()) {      m_processMsg="@AmtReturned>Shipped@";      return DocAction.STATUS_Invalid;    }  }  setAmt(getTotalAmount());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  return DocAction.STATUS_InProgress;}  }
class C{  protected int findMerge(int size,double[] scratch,DBIDArrayIter ix,DBIDArrayIter iy,double[] bestd,int[] besti,PointerHierarchyRepresentationBuilder builder){  double mindist=Double.POSITIVE_INFINITY;  int x=-1, y=-1;  for (int cx=0; cx < size; cx++) {    if (besti[cx] < 0) {      continue;    }    if (bestd[cx] < mindist) {      mindist=bestd[cx];      x=cx;      y=besti[cx];    }  }  assert (x >= 0 && y >= 0);  merge(size,scratch,ix,iy,bestd,besti,builder,mindist,x < y ? y : x,x < y ? x : y);  return x;}  }
class C{  public void filter(File originalFile,File destFile){  if (originalFile == null) {    throw new IllegalArgumentException("can not check a null file");  }  if (!originalFile.exists()) {    throw new IllegalArgumentException("can not check a file that does not exists");  }  if (!originalFile.isFile()) {    throw new IllegalArgumentException("can only check file, not directory");  }  if (destFile == null) {    throw new IllegalArgumentException("can not write to a null file");  }  if (!destFile.exists()) {    try {      if (!destFile.createNewFile()) {        throw new RuntimeException("Can not create file " + destFile.getAbsolutePath());      }    } catch (    IOException e) {      throw new RuntimeException("Can not create file " + destFile.getAbsolutePath(),e);    }  }  if (!destFile.isFile()) {    throw new IllegalArgumentException("can only write to a file, not to a directory ");  }  BufferedWriter out=null;  InputStream stream=null;  DataInputStream in=null;  try {    stream=new BufferedInputStream(new FileInputStream(originalFile));    in=new DataInputStream(stream);    out=new BufferedWriter(new FileWriter(destFile));    BufferedReader br=new BufferedReader(new InputStreamReader(in));    String strLine;    while ((strLine=br.readLine()) != null) {      boolean shouldBeFiltered=false;      for (int i=0; i < stringToFilter.length; i++) {        if (strLine.contains(stringToFilter[i])) {          shouldBeFiltered=true;          break;        }      }      if (!shouldBeFiltered) {        out.write(strLine);        out.write("\r\n");      }    }  } catch (  Exception e) {    throw new RuntimeException("an exception has occured durind filtering of file " + originalFile.getAbsolutePath() + " to "+ destFile.getAbsolutePath(),e);  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {      }    }    if (stream != null) {      try {        stream.close();      } catch (      IOException e) {      }    }    if (out != null) {      try {        out.flush();        out.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @Override public void map(LongWritable key,RyaStatementWritable rsw,Context context) throws IOException, InterruptedException {  fact.setTriple(rsw.getRyaStatement());  boolean isSchemaTriple=Schema.isSchemaTriple(fact.getTriple());  if (isSchemaTriple) {    context.write(NullWritable.get(),fact);  }  countInput(isSchemaTriple,context);}  }
class C{  public void testForHit(final Asteroids asteroids){  Bag a=asteroids.field.getAllObjects();  for (int i=0; i < a.numObjs; i++) {    Object obj=(a.objs[i]);    if (obj instanceof Asteroid) {      Asteroid asteroid=(Asteroid)(a.objs[i]);      if (asteroid.collisionWithElement(asteroids,this)) {        asteroid.breakApart(asteroids);        this.breakIntoShards(asteroids);        asteroids.score++;        asteroids.deaths++;        asteroids.ships[tag]=null;        end(asteroids);        respawn(asteroids);        break;      }    }  }}  }
class C{  @Override public void start() throws Exception {  if (started)   return;  started=true;}  }
class C{  public void putINT64(long int64){  put((byte)(int64 & 0xFF));  put((byte)((int64 >> 8) & 0xFF));  put((byte)((int64 >> 16) & 0xFF));  put((byte)((int64 >> 24) & 0xFF));  put((byte)((int64 >> 32) & 0xFF));  put((byte)((int64 >> 40) & 0xFF));  put((byte)((int64 >> 48) & 0xFF));  put((byte)((int64 >> 56) & 0xFF));}  }
class C{  @CanIgnoreReturnValue V checkValue(@Nullable V value){  return value;}  }
class C{  private boolean didCheckPass(Database conn,int id) throws SQLException, InterruptedException, ReplicatorException {  String query=String.format("SELECT %s,%s,%s,%s FROM %s.%s WHERE %s = %d",ConsistencyTable.thisCrcColumnName,ConsistencyTable.thisCntColumnName,ConsistencyTable.masterCrcColumnName,ConsistencyTable.masterCntColumnName,serviceSchema,ConsistencyTable.TABLE_NAME,ConsistencyTable.idColumnName,id);  int timeLeft=checkTimeout * 1000;  while (timeLeft > 0) {    long startSleepMillis=System.currentTimeMillis();    Statement st=null;    ResultSet rs=null;    try {      st=conn.createStatement();      rs=st.executeQuery(query);      if (rs.next()) {        String thisCrc=rs.getString(ConsistencyTable.thisCrcColumnName);        String thisCnt=rs.getString(ConsistencyTable.thisCntColumnName);        String masterCrc=rs.getString(ConsistencyTable.masterCrcColumnName);        String masterCnt=rs.getString(ConsistencyTable.masterCntColumnName);        if (thisCnt.compareTo(masterCnt) == 0 && thisCrc.compareTo(masterCrc) == 0) {          return true;        } else {          if (logger.isDebugEnabled()) {            logger.debug("          |              CRC                 | cnt");            logger.debug("this      | " + thisCrc + " | "+ thisCnt);            logger.debug("master    | " + masterCrc + " | "+ masterCnt);          }          return false;        }      }    }  finally {      if (rs != null) {        try {          rs.close();        } catch (        SQLException e) {        }      }      if (st != null) {        try {          st.close();        } catch (        SQLException e) {        }      }    }    Thread.sleep(50);    long sleepMillis=System.currentTimeMillis() - startSleepMillis;    timeLeft-=sleepMillis;  }  throw new ReplicatorException(String.format("Timeout (%ds) while waiting for consistency check to complete",checkTimeout));}  }
class C{  private void actionTable(){  ValueNamePair vp=(ValueNamePair)selTable.getSelectedItem();  m_data.AD_Table_ID=((Integer)m_data.tableInfo.get(vp.getValue())).intValue();  log.config(vp.getValue() + " = " + m_data.AD_Table_ID);  m_data.Record_ID=0;  selRecord.setText("");  selRecord.setActionCommand(vp.getValue() + "_ID");}  }
class C{  public static <DESTIN>List<DESTIN> copyPropertiesToNewCollections(Class<DESTIN> destClass,Collection<?> srcCollection){  List<DESTIN> destinList=new ArrayList<DESTIN>();  if (srcCollection == null) {    return destinList;  }  for (  Object src : srcCollection) {    destinList.add(copyPropertiesToNewObject(destClass,src));  }  return destinList;}  }
class C{  public static SymbolToken systemSymbol(final int sid){  if (sid < 1 || sid > ION_1_0_MAX_ID) {    throw new IllegalArgumentException("No such system SID: " + sid);  }  return SYSTEM_TOKENS.get(sid - 1);}  }
class C{  public boolean initDialog(){  log.config("");  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.weightx=0;  gbc.weighty=0;  gbc.gridy=m_line++;  gbc.gridx=0;  gbc.gridwidth=1;  gbc.insets=nullInset;  gbc.fill=GridBagConstraints.HORIZONTAL;  centerPanel.add(Box.createVerticalStrut(10),gbc);  MClient client=MClient.get(Env.getCtx());  String ASPFilter="";  if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = 'Y' "+ "                 AND p.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND pp.ASP_Status = 'S') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";  String sql=null;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive='Y' " + ASPFilter + " ORDER BY SeqNo"; else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND p.IsActive='Y' "+ ASPFilter+ " ORDER BY SeqNo";  boolean hasFields=false;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_processInfo.getAD_Process_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      hasFields=true;      createField(rs);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different");  if (hasFields) {    gbc.gridy=m_line++;    centerPanel.add(Box.createVerticalStrut(10),gbc);    gbc.gridx=3;    centerPanel.add(Box.createHorizontalStrut(12),gbc);    AEnv.positionCenterWindow(m_frame,this);  } else   dispose();  return hasFields;}  }
class C{  public void addDhtVersion(IgniteTxKey key,@Nullable GridCacheVersion dhtVer){  if (dhtVers == null)   dhtVers=new HashMap<>();  dhtVers.put(key,dhtVer);}  }
class C{  public void addZips(Collection<String> zips){  if (zips != null) {    for (    String zip : zips) {      addZip(zip);    }  }}  }
class C{  public static byte reverseBitsInByte(final JBBPBitNumber bitNumber,final byte value){  final byte reversed=reverseBitsInByte(value);  return (byte)((reversed >>> (8 - bitNumber.getBitNumber())) & bitNumber.getMask());}  }
class C{  @Override public int compareTo(ProtocolVersion o){  if (major == o.getMajor()) {    if (minor < o.getMinor()) {      return 1;    } else     if (minor > o.getMinor()) {      return -1;    } else {      return 0;    }  } else   if (major < o.getMajor()) {    return 1;  } else {    return -1;  }}  }
class C{  private void togglePasswordIconVisibility(){  passwordVisible=!passwordVisible;  handlePasswordInputVisibility();  showPasswordVisibilityIndicator(true);}  }
class C{  public boolean isManualDragEnabled(){  return mTouchHelperCallback.isManualDragEnabled();}  }
class C{  protected static Operation initTaskStatus(DbClient dbClient,Workflow workflow,String task,Operation.Status status,ResourceOperationTypeEnum opType){  if (workflow.getOpStatus() == null) {    workflow.setOpStatus(new OpStatusMap());  }  Operation op=new Operation();  op.setResourceType(opType);  if (status == Operation.Status.ready) {    op.ready();  }  dbClient.createTaskOpStatus(Workflow.class,workflow.getId(),task,op);  return op;}  }
class C{  public void addClosureOf(IRule[] rules){  if (isParallel())   throw new IllegalStateException("parallel program can not embed closure operations.");  if (rules == null)   throw new IllegalArgumentException();  if (rules.length == 0)   throw new IllegalArgumentException();  final String label;  if (true) {    StringBuilder sb=new StringBuilder();    sb.append("closure[");    int i=0;    for (    IRule r : rules) {      if (i > 0) {        sb.append(" ");      }      sb.append(r.getName());    }    sb.append("]");    label=sb.toString();  } else {    label="closure(nrules=" + rules.length + ")";  }  final Program subProgram=new Program(label,true,true);  subProgram.addSteps(Arrays.asList(rules).iterator());  addStep(subProgram);}  }
class C{  @Override public void testFilteredClassifier(){  try {    Instances data=getFilteredClassifierData();    for (int i=0; i < data.numAttributes(); i++) {      if (data.classIndex() == i)       continue;      if (data.attribute(i).isNominal()) {        ((RenameNominalValues)m_FilteredClassifier.getFilter()).setSelectedAttributes("" + (i + 1));        break;      }    }  } catch (  Exception e) {    fail("Problem setting up test for FilteredClassifier: " + e.toString());  }  super.testFilteredClassifier();}  }
class C{  public boolean intersects(FixedBitSet other){  int pos=Math.min(numWords,other.numWords);  while (--pos >= 0) {    if ((bits[pos] & other.bits[pos]) != 0)     return true;  }  return false;}  }
class C{  public String toString(){  if (myToString == null) {    final StringBuilder result=new StringBuilder();    result.append(this.getClass().getName());    result.append("(name=");    result.append(getTypeName());    result.append(",items=(");    int i=0;    Iterator<String> k=nameToType.keySet().iterator();    String key;    while (k.hasNext()) {      key=k.next();      if (i > 0)       result.append(",");      result.append("(itemName=");      result.append(key);      result.append(",itemType=");      result.append(nameToType.get(key).toString() + ")");      i++;    }    result.append("))");    myToString=result.toString();  }  return myToString;}  }
class C{  public boolean isAnimated(){  return collapsePane.isAnimated();}  }
class C{  public void testEdgeNGramTokenizer2() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=tokenizerFactory("EdgeNGram","minGramSize","1","maxGramSize","2").create();  ((Tokenizer)stream).setReader(reader);  assertTokenStreamContents(stream,new String[]{"t","te"});}  }
class C{  public void testContinuousMode() throws Exception {  processSharedModeTest(DeploymentMode.CONTINUOUS);}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  public ZKAddress(String address){  Matcher matcher=Pattern.compile(ADDRESS_REGEX).matcher(address);  if (!matcher.matches()) {    throw new ZKAddressException(address);  }  for (int i=0; i < matcher.groupCount() + 1; i++) {    matcherMap.put(i,matcher.group(i));  }  setUser(matcherMap.getOrDefault(1,""));  setPassword(matcherMap.getOrDefault(2,""));  setAddress(matcherMap.getOrDefault(3,""));  setPort(matcherMap.getOrDefault(4,""));  setZkNode(matcherMap.getOrDefault(5,""));}  }
class C{  public void replaceNextX(){  int totalCount=index + nextX;  if (totalCount >= searchMatch.size()) {    totalCount=searchMatch.size();  }  for (int i=index; i < totalCount; i++) {    replace();  }}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  public void assertRelative(final File relativeRoot,String expectedRelativePath){  File fileFound=null;  for (  final File file : actualFiles) {    if (expectedRelativePath.equals(FileUtil.getRelativePath(relativeRoot,file))) {      fileFound=file;    }  }  if (fileFound == null) {    String message="Could not find file matching relative path: " + expectedRelativePath + " with relative root: "+ relativeRoot.getPath()+ "Amongst remaining files which have yet to be asserted:\n";    for (    final File file : actualFiles) {      message+="    [" + FileUtil.getRelativePath(relativeRoot,file) + "]\n";    }    fail(message);  } else {    actualFiles.remove(fileFound);  }}  }
class C{  private void findMatches(ModifiableDBIDs posn,Relation<?> lrelation,Object label){  posn.clear();  for (DBIDIter ri=lrelation.iterDBIDs(); ri.valid(); ri.advance()) {    if (match(label,lrelation.get(ri))) {      posn.add(ri);    }  }}  }
class C{  private void generate(CacheServer bridge) throws SAXException {  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_0) < 0) {    return;  }  AttributesImpl atts=new AttributesImpl();  try {    if (generateDefaults() || bridge.getPort() != CacheServer.DEFAULT_PORT)     atts.addAttribute("","",PORT,"",String.valueOf(bridge.getPort()));    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_1) < 0) {      return;    }    if (generateDefaults() || bridge.getMaximumTimeBetweenPings() != CacheServer.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS)     atts.addAttribute("","",MAXIMUM_TIME_BETWEEN_PINGS,"",String.valueOf(bridge.getMaximumTimeBetweenPings()));    if (generateDefaults() || bridge.getNotifyBySubscription() != CacheServer.DEFAULT_NOTIFY_BY_SUBSCRIPTION)     atts.addAttribute("","",NOTIFY_BY_SUBSCRIPTION,"",String.valueOf(bridge.getNotifyBySubscription()));    if (generateDefaults() || bridge.getSocketBufferSize() != CacheServer.DEFAULT_SOCKET_BUFFER_SIZE)     atts.addAttribute("","",SOCKET_BUFFER_SIZE,"",String.valueOf(bridge.getSocketBufferSize()));    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_0) < 0) {      return;    }    if (generateDefaults() || bridge.getMaxConnections() != CacheServer.DEFAULT_MAX_CONNECTIONS)     atts.addAttribute("","",MAX_CONNECTIONS,"",String.valueOf(bridge.getMaxConnections()));    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_1) < 0) {      return;    }    if (generateDefaults() || bridge.getMaxThreads() != CacheServer.DEFAULT_MAX_THREADS)     atts.addAttribute("","",MAX_THREADS,"",String.valueOf(bridge.getMaxThreads()));    if (generateDefaults() || bridge.getMaximumMessageCount() != CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT)     atts.addAttribute("","",MAXIMUM_MESSAGE_COUNT,"",String.valueOf(bridge.getMaximumMessageCount()));    if (generateDefaults() || bridge.getMessageTimeToLive() != CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE)     atts.addAttribute("","",MESSAGE_TIME_TO_LIVE,"",String.valueOf(bridge.getMessageTimeToLive()));    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) < 0) {      return;    }    if (bridge.getBindAddress() != null) {      if (generateDefaults() || !CacheServer.DEFAULT_BIND_ADDRESS.equals(bridge.getBindAddress()))       atts.addAttribute("","",BIND_ADDRESS,"",bridge.getBindAddress());    }    if (bridge.getHostnameForClients() != null && !bridge.getHostnameForClients().equals("")) {      atts.addAttribute("","",HOSTNAME_FOR_CLIENTS,"",bridge.getHostnameForClients());    }    if (generateDefaults() || bridge.getLoadPollInterval() != CacheServer.DEFAULT_LOAD_POLL_INTERVAL)     atts.addAttribute("","",LOAD_POLL_INTERVAL,"",String.valueOf(bridge.getLoadPollInterval()));    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) < 0) {      return;    }    if (generateDefaults() || bridge.getTcpNoDelay() != CacheServer.DEFAULT_TCP_NO_DELAY) {      atts.addAttribute("","",TCP_NO_DELAY,"","" + bridge.getTcpNoDelay());    }  }  finally {    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {      handler.startElement("",CACHE_SERVER,CACHE_SERVER,atts);    } else {      handler.startElement("",BRIDGE_SERVER,BRIDGE_SERVER,atts);    }    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {      String[] groups=bridge.getGroups();      if (groups.length > 0) {        for (int i=0; i < groups.length; i++) {          String group=groups[i];          handler.startElement("",GROUP,GROUP,EMPTY);          handler.characters(group.toCharArray(),0,group.length());          handler.endElement("",GROUP,GROUP);        }      }      if (!bridge.getClientSubscriptionConfig().getEvictionPolicy().equals("none")) {        generateClientHaQueue(bridge);      }      ServerLoadProbe probe=bridge.getLoadProbe();      if (generateDefaults() || !probe.equals(CacheServer.DEFAULT_LOAD_PROBE)) {        generate(LOAD_PROBE,probe);      }    }    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_5_7) >= 0) {      handler.endElement("","",CACHE_SERVER);    } else {      handler.endElement("","",BRIDGE_SERVER);    }  }}  }
class C{  public static ConverterFileChooser newConverterFileChooser(){  ConverterFileChooser result;  FileChooserBookmarksPanel bookmarks;  result=new ConverterFileChooser(System.getProperty("user.home"));  bookmarks=new FileChooserBookmarksPanel();  bookmarks.setOwner(result);  bookmarks.setBorder(BorderFactory.createEmptyBorder(2,5,0,0));  result.setAccessory(bookmarks);  result.setPreferredSize(getDefaultDimensions("FileChooser",750,500));  return result;}  }
class C{  public void testDeserializeSimple() throws Exception {  ObjectMapper mapper=new ObjectMapper();  JsonSchema schema=mapper.generateJsonSchema(Schemable.class);  assertNotNull(schema);  String schemaStr=mapper.writeValueAsString(schema);  assertNotNull(schemaStr);  JsonSchema result=mapper.readValue(schemaStr,JsonSchema.class);  assertEquals("Trying to read from '" + schemaStr + "'",schema,result);}  }
class C{  public InlineQueryResultCachedAudioBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public boolean updateValue(Connection connection,Object[] keys,Object[] values){  return runUpdate(connection,updateSQL,keys,values);}  }
class C{  int[] findNearestArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestArea(pixelX,pixelY,spanX,spanY,spanX,spanY,false,result,null);}  }
class C{  public OsmRuntimeException(){  super();}  }
class C{  public ColladaMatrix(String namespaceURI){  super(namespaceURI);}  }
class C{  public boolean isCompatibleWith(String version) throws NumberFormatException {  String[] requested=version.split("\\.");  String[] provided=specVersion.split("\\.");  for (int i=0; i < Math.min(requested.length,provided.length); i++) {    int reqNum=Integer.parseInt(requested[i]);    int provNum=Integer.parseInt(provided[i]);    if (reqNum > provNum) {      return false;    } else     if (reqNum < provNum) {      return true;    }  }  if (requested.length > provided.length) {    return false;  }  return true;}  }
class C{  public void reset(){  currentPosition=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:35.751 -0500",hash_original_method="E402151342DE994EEE4FC3989E09156E",hash_generated_method="D3D0154E7DB983A5A59A506AA3B22B95") public boolean isCacheable(RequestHeaders request){  int responseCode=headers.getResponseCode();  if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_AUTHORITATIVE && responseCode != HttpURLConnection.HTTP_MULT_CHOICE && responseCode != HttpURLConnection.HTTP_MOVED_PERM && responseCode != HttpURLConnection.HTTP_GONE) {    return false;  }  if (request.hasAuthorization() && !isPublic && !mustRevalidate&& sMaxAgeSeconds == -1) {    return false;  }  if (noStore) {    return false;  }  return true;}  }
class C{  @Override public boolean isEmpty(final IScope scope){  return false;}  }
class C{  private Formatting(){  instanceNotAllowed(getClass());}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public HexEditorEvent(HexEditor editor,int offs,int added,int removed){  super(editor);  this.offset=offs;  this.added=added;  this.removed=removed;}  }
class C{  public optgroup addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  public static GroupLifecycleManager onCreate(ObservableManager observableManager,@Nullable Bundle savedState,@Nullable Object target){  return onCreate(observableManager,new LifecycleResubscription(),savedState,target);}  }
class C{  public void removeAttribute(String key){  client.removeAttribute(key);}  }
class C{  private ActionBarBackground fadeOut(){  Drawable background=getColoredBackground(android.R.color.transparent);  background.setAlpha(0);  fadeBackground(mOldBackground,background);  return this;}  }
class C{  public Dashboard updateDashboard(BigInteger dashboardId,Dashboard dashboard) throws IOException {  String requestUrl=RESOURCE + "/" + dashboardId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.PUT,requestUrl,dashboard);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Dashboard.class);}  }
class C{  public void removeAll(){  Form parentForm=getComponentForm();  if (parentForm != null) {    Component focus=parentForm.getFocused();    if (focus != null && contains(focus)) {      parentForm.setFocused(null);    }  }  Component[] arr=new Component[components.size()];  components.toArray(arr);  int componentCount=arr.length;  for (int iter=0; iter < componentCount; iter++) {    Component cmp=arr[iter];    removeComponent(cmp);  }  resetScroll();}  }
class C{  public static boolean isFilenameValid(String filename){  filename=filename.replaceFirst("/+","/");  return filename.startsWith(Environment.getDownloadCacheDirectory().toString()) || filename.startsWith(Environment.getExternalStorageDirectory().toString());}  }
class C{  public String replaceFirst(String replacement){  return matcher.replaceFirst(replacement);}  }
class C{  public static void main(final String[] args){  startLogSystem();  MarauroaUncaughtExceptionHandler.setup(false);  initUsableDisplaySizes();  new Startup(args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:55.600 -0500",hash_original_method="FD9674DD64603638CEEAFAAECA2377E1",hash_generated_method="D7D0290F8321AC414FB87D88F9C34541") private void serviceInfoToProperties(Provider.Service s){  super.put(s.type + "." + s.algorithm,s.className);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.put("Alg.Alias." + s.type + "."+ i.next(),s.algorithm);    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.put(s.type + "." + s.algorithm+ " "+ entry.getKey(),entry.getValue());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  private synchronized void notifySlotListeners(SprogSlot s){  log.debug("notifySlotListeners() notify " + slotListeners.size() + " SlotListeners about slot for address "+ s.getAddr());  slotListeners.stream().forEach(null);}  }
class C{  public static void sort(long[] a){  doSort(a,0,a.length - 1);}  }
class C{  Path docBase(){  return docBase;}  }
class C{  public PatternFilenameFilter(String patternStr){  this(Pattern.compile(patternStr));}  }
class C{  public TLongLongHashMap(TLongHashingStrategy strategy){  super(strategy);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.955 -0500",hash_original_method="1CB950BCC9F48EB334FE7B6B837F3DD2",hash_generated_method="56A10454E423802DFCEB87CE6A3A5098") public boolean configure(int maxRetryCount,int retryTime,int randomizationTime){  Pair<Boolean,Integer> value;  if (DBG)   log("configure: " + maxRetryCount + ", "+ retryTime+ ","+ randomizationTime);  if (!validateNonNegativeInt("maxRetryCount",maxRetryCount)) {    return false;  }  if (!validateNonNegativeInt("retryTime",retryTime)) {    return false;  }  if (!validateNonNegativeInt("randomizationTime",randomizationTime)) {    return false;  }  mMaxRetryCount=maxRetryCount;  resetRetryCount();  mRetryArray.clear();  mRetryArray.add(new RetryRec(retryTime,randomizationTime));  return true;}  }
class C{  public static Builder builder(){  return new Builder(new KeepAliveResponse());}  }
class C{  public void addDockingPosition(int x,int y,int z,String str){  BlockPosition pos=new BlockPosition(x,y,z);  dockingPoints.put(pos,str);}  }
class C{  protected boolean isIncomingDiscoveryAllowed(DatapathId sw,OFPort port,boolean isStandard){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.LOCAL)   return false;  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",sw.toString(),port.getPortNumber());    }    return false;  }  return true;}  }
class C{  private void rehash(){  int size=_symbols.length;  int newSize=size + size;  if (newSize > MAX_TABLE_SIZE) {    _size=0;    Arrays.fill(_symbols,null);    Arrays.fill(_buckets,null);    _dirty=true;    return;  }  String[] oldSyms=_symbols;  Bucket[] oldBuckets=_buckets;  _symbols=new String[newSize];  _buckets=new Bucket[newSize >> 1];  _indexMask=newSize - 1;  _sizeThreshold+=_sizeThreshold;  int count=0;  for (int i=0; i < size; ++i) {    String symbol=oldSyms[i];    if (symbol != null) {      ++count;      int index=calcHash(symbol) & _indexMask;      if (_symbols[index] == null) {        _symbols[index]=symbol;      } else {        int bix=index >> 1;        _buckets[bix]=new Bucket(symbol,_buckets[bix]);      }    }  }  size>>=1;  for (int i=0; i < size; ++i) {    Bucket b=oldBuckets[i];    while (b != null) {      ++count;      String symbol=b.getSymbol();      int index=calcHash(symbol) & _indexMask;      if (_symbols[index] == null) {        _symbols[index]=symbol;      } else {        int bix=index >> 1;        _buckets[bix]=new Bucket(symbol,_buckets[bix]);      }      b=b.getNext();    }  }  if (count != _size) {    throw new Error("Internal error on SymbolTable.rehash(): had " + _size + " entries; now have "+ count+ ".");  }}  }
class C{  public static boolean testRayTriangle(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z,float epsilon){  float edge1X=v1X - v0X;  float edge1Y=v1Y - v0Y;  float edge1Z=v1Z - v0Z;  float edge2X=v2X - v0X;  float edge2Y=v2Y - v0Y;  float edge2Z=v2Z - v0Z;  float pvecX=dirY * edge2Z - dirZ * edge2Y;  float pvecY=dirZ * edge2X - dirX * edge2Z;  float pvecZ=dirX * edge2Y - dirY * edge2X;  float det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det > -epsilon && det < epsilon)   return false;  float tvecX=originX - v0X;  float tvecY=originY - v0Y;  float tvecZ=originZ - v0Z;  float invDet=1.0f / det;  float u=(tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ) * invDet;  if (u < 0.0f || u > 1.0f)   return false;  float qvecX=tvecY * edge1Z - tvecZ * edge1Y;  float qvecY=tvecZ * edge1X - tvecX * edge1Z;  float qvecZ=tvecX * edge1Y - tvecY * edge1X;  float v=(dirX * qvecX + dirY * qvecY + dirZ * qvecZ) * invDet;  if (v < 0.0f || u + v > 1.0f)   return false;  float t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t >= epsilon;}  }
class C{  protected byte[] wrap(int... vals){  byte[] res=new byte[vals.length];  for (int i=0; i < vals.length; i++)   res[i]=(byte)vals[i];  return res;}  }
class C{  @Override public void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putParcelableArray(KEY_BUTTONS_STATE,mStateHolder);  outState.putBoolean(KEY_ANSWERS_CHECKED,mAnswersChecked);}  }
class C{  public static List executeOn(ServerLocation sl,ExecutablePool pool,String region,List keys,InterestResultPolicy policy,boolean isDurable,boolean receiveUpdatesAsInvalidates,byte regionDataPolicy){  AbstractOp op=new RegisterInterestListOpImpl(region,keys,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  return (List)pool.executeOn(sl,op);}  }
class C{  @Override protected void onPostCreate(@Nullable Bundle savedInstanceState){  mPermissionRequest=PermissionRequest.with(this).permissions(Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE).rationale(R.string.permission_read_write_rationale).granted(R.string.permission_read_write_granted).denied(R.string.permission_read_write_denied).snackbar((ViewGroup)findViewById(android.R.id.content)).submit();  super.onPostCreate(savedInstanceState);}  }
class C{  public void mouseClicked(MouseEvent e){  if (tryPopup(e))   return;  if (SwingUtilities.isLeftMouseButton(e)) {    int x=e.getX();    int y=e.getY();    int idx;    idx=shouldKillIndex(x,y);    if (idx != -1) {      lastIdx=-1;      killSearchAtIndex(idx);    }    if (idx == -1)     stateChanged(null);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized int lastIndexOf(Object object,int location){  if (location < elementCount) {    if (object != null) {      for (int i=location; i >= 0; i--) {        if (object.equals(elementData[i])) {          return i;        }      }    } else {      for (int i=location; i >= 0; i--) {        if (elementData[i] == null) {          return i;        }      }    }    return -1;  }  throw new ArrayIndexOutOfBoundsException(location);}  }
class C{  @Override public void input(Object input,Network network){  if (!isEnabled()) {    return;  }  try {    if (input instanceof DirectMessage) {      DirectMessage message=(DirectMessage)input;      String fromUser=message.getSender().getScreenName();      String text=message.getText().trim();      log("Processing direct message.",Level.INFO,text,fromUser);      TextStream stream=new TextStream(text);      String firstWord=stream.nextWord();      if ("follow".equals(firstWord)) {        log("Adding friend.",Level.INFO,fromUser);        getConnection().createFriendship(message.getSender().getId());      } else       if ("unfollow".equals(firstWord)) {        log("Removing friend.",Level.INFO,fromUser);        getConnection().destroyFriendship(message.getSender().getId());      }      this.tweetsProcessed++;      inputSentence(text,fromUser,message.getRecipient().getScreenName(),network);    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  protected String handleDate(ResultSet rs,int columnIndex,String dateFormatString) throws SQLException {  java.sql.Date date=rs.getDate(columnIndex);  String value=null;  if (date != null) {    SimpleDateFormat dateFormat=new SimpleDateFormat(dateFormatString);    value=dateFormat.format(date);  }  return value;}  }
class C{  CDFTsr(int m,double[] c,double[] c3,double[] s,double[] s3){  this.m=m;  N=1 << m;  N8=N / 8;  N4=N / 4;  xoffset=0;  xstride=1;  Xoffset=0;  this.c=c;  this.c3=c3;  this.s=s;  this.s3=s3;  f=1;  reflect=2 * c.length;  if (m > 6) {    dft1=new CDFTsr(this,0,2,0,m - 1);    dft2=new CDFTsr(this,1,4,N / 2,m - 2);    dft3=new CDFTsr(this,3,4,3 * N / 4,m - 2);  } else   if (m == 6) {    dft1=new CDFTsr(this,0,2,0,5);    dft2=new CDFTsr16(1,4,N / 2);    dft3=new CDFTsr16(3,4,3 * N / 4);  } else   if (m == 5) {    dft1=new CDFTsr16(0,2,0);    dft2=new CDFTsr8(1,4,N / 2);    dft3=new CDFTsr8(3,4,3 * N / 4);  }}  }
class C{  @Nullable public static Editor findEditor(@NotNull PsiElement element){  if (!EventQueue.isDispatchThread()) {    LOG.warn("Invoke findEditor() from EDT only. Otherwise, it causes deadlocks.");  }  PsiFile psiFile=element.getContainingFile();  VirtualFile virtualFile=PsiUtilCore.getVirtualFile(element);  if (virtualFile == null) {    return null;  }  Project project=psiFile.getProject();  if (virtualFile.isInLocalFileSystem() || virtualFile.getFileSystem() instanceof NonPhysicalFileSystem) {    final FileEditor[] editors=FileEditorManager.getInstance(project).getEditors(virtualFile);    for (    FileEditor editor : editors) {      if (editor instanceof TextEditor) {        return ((TextEditor)editor).getEditor();      }    }  }  if (SwingUtilities.isEventDispatchThread()) {    AsyncResult<DataContext> asyncResult=DataManager.getInstance().getDataContextFromFocus();    if (asyncResult.isDone()) {      Editor editor=CommonDataKeys.EDITOR.getData(asyncResult.getResult());      if (editor != null) {        Document cachedDocument=PsiDocumentManager.getInstance(project).getCachedDocument(psiFile);        if (cachedDocument == editor.getDocument()) {          return editor;        }      }    }  }  return null;}  }
class C{  public void addGenericAttr(GenericAttr g){  generic.addElement(g);}  }
class C{  public void write(Document document) throws SAXException {  if (document != null) {    checkForNullHandlers();    documentLocator(document);    startDocument();    entityResolver(document);    dtdHandler(document);    writeContent(document,new NamespaceStack());    endDocument();  }}  }
class C{  @Override public synchronized boolean addAll(Collection<? extends E> collection){  return addAll(elementCount,collection);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  protected synchronized void processFailure(BaseStunMessageEvent event){  String receivedResponse;  if (event instanceof StunFailureEvent)   receivedResponse="unreachable"; else   if (event instanceof StunTimeoutEvent)   receivedResponse="timeout"; else   receivedResponse="failure";  receivedResponses.add(receivedResponse);  notifyAll();}  }
class C{  public boolean isPopulated(){  return populated;}  }
class C{  public String scriptLang(){  return scriptLang;}  }
class C{  public int compareToIgnoreCase(XMLString str){  return m_str.compareToIgnoreCase(str.toString());}  }
class C{  public static void initCertsMap(Properties props) throws Exception {  certificateMap=new HashMap();  certificateFilePath=props.getProperty(PUBLIC_KEY_FILE_PROP);  if (certificateFilePath != null && certificateFilePath.length() > 0) {    KeyStore ks=KeyStore.getInstance("JKS");    String keyStorePass=props.getProperty(PUBLIC_KEY_PASSWD_PROP);    char[] passPhrase=(keyStorePass != null ? keyStorePass.toCharArray() : null);    FileInputStream keystorefile=new FileInputStream(certificateFilePath);    try {      ks.load(keystorefile,passPhrase);    }  finally {      keystorefile.close();    }    Enumeration aliases=ks.aliases();    while (aliases.hasMoreElements()) {      String alias=(String)aliases.nextElement();      Certificate cert=ks.getCertificate(alias);      if (cert instanceof X509Certificate) {        String subject=((X509Certificate)cert).getSubjectDN().getName();        certificateMap.put(subject,cert);      }    }  }}  }
class C{  public Escaper toEscaper(){  return new CharArrayDecorator(toArray());}  }
class C{  public static void addMethodAnnotations(@NotNull HashMap<HKey,Value> solution,@NotNull MethodAnnotations methodAnnotations,@NotNull HKey methodKey,int arity){  List<String> contractClauses=new ArrayList<String>(arity * 2);  Set<HKey> notNulls=methodAnnotations.notNulls;  Set<HKey> pures=methodAnnotations.pures;  Map<HKey,String> contracts=methodAnnotations.contractsValues;  for (  Map.Entry<HKey,Value> entry : solution.entrySet()) {    Value value=entry.getValue();    if (value == Value.Top || value == Value.Bot) {      continue;    }    HKey key=entry.getKey().mkStable();    Direction direction=extractDirection(key.dirKey);    HKey baseKey=key.mkBase();    if (!methodKey.equals(baseKey)) {      continue;    }    if (value == Value.NotNull && direction == Out) {      notNulls.add(methodKey);    } else     if (value == Value.Pure && direction == Pure) {      pures.add(methodKey);    } else     if (direction instanceof InOut) {      contractClauses.add(contractElement(arity,(InOut)direction,value));    }  }  if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) {    Collections.sort(contractClauses);    StringBuilder sb=new StringBuilder("\"");    StringUtil.join(contractClauses,";",sb);    sb.append('"');    contracts.put(methodKey,sb.toString().intern());  }}  }
class C{  protected CAbstractTypeDescription(final Color color,final String hint){  m_color=color;  m_hint=hint;}  }
class C{  protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){  if (space == null) {    space=new AxisSpace();  }  if (this.fixedDomainAxisSpace != null) {    if (this.orientation == PlotOrientation.HORIZONTAL) {      space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);      space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);    } else     if (this.orientation == PlotOrientation.VERTICAL) {      space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);      space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);    }  } else {    for (    ValueAxis axis : this.domainAxes.values()) {      if (axis != null) {        RectangleEdge edge=getDomainAxisEdge(findDomainAxisIndex(axis));        space=axis.reserveSpace(g2,this,plotArea,edge,space);      }    }  }  return space;}  }
class C{  private SearchTree<VertexType> copySearchTree(SearchTree<VertexType> tree,Transpose<GraphType,EdgeType,VertexType> t){  SearchTree<VertexType> copy=new SearchTree<VertexType>(t.getOriginalGraphVertex(tree.getVertex()));  Iterator<SearchTree<VertexType>> i=tree.childIterator();  while (i.hasNext()) {    SearchTree<VertexType> child=i.next();    copy.addChild(copySearchTree(child,t));  }  return copy;}  }
class C{  public static final String createMessage(String msgKey,Object args[]){  return createMsg(XSLTBundle,msgKey,args);}  }
class C{  private static byte[] readOneBlock(InputStream is) throws IOException {  int c=is.read();  if (c == -1) {    return null;  }  if (c == DerValue.tag_Sequence) {    ByteArrayOutputStream bout=new ByteArrayOutputStream(2048);    bout.write(c);    readBERInternal(is,bout,c);    return bout.toByteArray();  } else {    char[] data=new char[2048];    int pos=0;    int hyphen=(c == '-') ? 1 : 0;    int last=(c == '-') ? -1 : c;    while (true) {      int next=is.read();      if (next == -1) {        return null;      }      if (next == '-') {        hyphen++;      } else {        hyphen=0;        last=next;      }      if (hyphen == 5 && (last == -1 || last == '\r' || last == '\n')) {        break;      }    }    int end;    StringBuilder header=new StringBuilder("-----");    while (true) {      int next=is.read();      if (next == -1) {        throw new IOException("Incomplete data");      }      if (next == '\n') {        end='\n';        break;      }      if (next == '\r') {        next=is.read();        if (next == -1) {          throw new IOException("Incomplete data");        }        if (next == '\n') {          end='\n';        } else {          end='\r';          data[pos++]=(char)next;        }        break;      }      header.append((char)next);    }    while (true) {      int next=is.read();      if (next == -1) {        throw new IOException("Incomplete data");      }      if (next != '-') {        data[pos++]=(char)next;        if (pos >= data.length) {          data=Arrays.copyOf(data,data.length + 1024);        }      } else {        break;      }    }    StringBuilder footer=new StringBuilder("-");    while (true) {      int next=is.read();      if (next == -1 || next == end || next == '\n') {        break;      }      if (next != '\r')       footer.append((char)next);    }    checkHeaderFooter(header.toString(),footer.toString());    return Pem.decode(new String(data,0,pos));  }}  }
class C{  protected void endBody() throws IOException {}  }
class C{  public static void main(String... args){  String testSrc=System.getProperty("test.src");  File baseDir=(testSrc == null) ? null : new File(testSrc);  boolean ok=new JavacTreeScannerTest().run(baseDir,args);  if (!ok) {    if (testSrc != null)     throw new Error("failed"); else     System.exit(1);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/discover") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) public TaskResourceRep discoverVcenter(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Vcenter.class,"id");  Vcenter vcenter=queryObject(Vcenter.class,id,true);  return doDiscoverVcenter(vcenter);}  }
class C{  public void clear(){  new ByteArrayList(this.state).fillFromToWith(0,this.state.length - 1,FREE);  this.distinct=0;  this.freeEntries=table.length;  trimToSize();}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void testCheckFoundWithPseudoSelectorAndWithResultAsNMI(){  LOGGER.debug("check found with pseudoSelector result as nmi");  String[] pseudoSelectors={":before",":after"};  initCheckerAndLaunch("src/test/resources/css/test4.css",pseudoSelectors,TestSolution.NEED_MORE_INFO,".selector:before");}  }
class C{  private static byte[] uniqueFromValueForKey(final Value value){  return Md5Hash.md5Binary(value);}  }
class C{  public void moveToInsertRow() throws SQLException {  throw new NotUpdatable();}  }
class C{  public boolean equals(char[] ch,int offset,int length){  if (ch == null) {    return false;  }  if (this.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (this.ch[this.offset + i] != ch[offset + i]) {      return false;    }  }  return true;}  }
class C{  @Override public double value(int attIndex){  return m_AttValues[attIndex];}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  try {    if (qName.equals("asDocConfig")) {      for (Iterator iterator=configMap.entrySet().iterator(); iterator.hasNext(); ) {        Map.Entry entry=(Map.Entry)iterator.next();        writer.newLine();        writer.write("<" + entry.getKey() + ">"+ entry.getValue()+ "</"+ entry.getKey()+ ">");      }    }    if (configMap.get(qName) == null) {      writer.write("</" + qName + ">");    }  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public static void customEdgeEffectColor(AbsListView listView,@ColorRes int color){  try {    final Field fEdgeGlowTop=AbsListView.class.getDeclaredField("mEdgeGlowTop");    final Field fEdgeGlowBottom=AbsListView.class.getDeclaredField("mEdgeGlowBottom");    fEdgeGlowTop.setAccessible(true);    fEdgeGlowBottom.setAccessible(true);    setEdgeEffectColor((EdgeEffect)fEdgeGlowTop.get(listView),color);    setEdgeEffectColor((EdgeEffect)fEdgeGlowBottom.get(listView),color);  } catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public static Option start(long value){  return new StartOption(value);}  }
class C{  public TLongArrayList(){  this(DEFAULT_CAPACITY);}  }
class C{  public void rotate1(){  int clast=coeffs[coeffs.length - 1];  for (int i=coeffs.length - 1; i > 0; i--) {    coeffs[i]=coeffs[i - 1];  }  coeffs[0]=clast;}  }
class C{  private void applyDirectionalPermissions(Way way,EnumSet<EdgeStore.EdgeFlag> forward,EnumSet<EdgeStore.EdgeFlag> backward){  String cyclewayLeftTagValue=way.getTag("cycleway:left");  String cyclewayRightTagValue=way.getTag("cycleway:right");  if (cyclewayRightTagValue != null) {    Label cyclewayRight=Label.fromTag(cyclewayRightTagValue);    if (cyclewayRight == Label.YES) {      forward.add(EdgeStore.EdgeFlag.ALLOWS_BIKE);    }  }  if (cyclewayLeftTagValue != null) {    Label cyclewayLeft=Label.fromTag(cyclewayLeftTagValue);    if (cyclewayLeft == Label.YES) {      backward.add(EdgeStore.EdgeFlag.ALLOWS_BIKE);    }  }}  }
class C{  public void run(){  super.run();}  }
class C{  public boolean isProvidedByRuntime(){  return this.isDeclaredProvidedByRuntime();}  }
class C{  public void write(String str,int off,int len) throws IOException {  write(str.toCharArray(),off,len);}  }
class C{  public void run(String[] args){  _options.set_username(_username);  _options.parse(args);  setPaths();  Util.createDirectory(_options.get_output_directory());  String logfile=_options.get_output_directory() + _options.get_jobID() + "_dnacompiler_output.txt";  FileAppender appender=new FileAppender();  appender.setFile(logfile);  appender.setLayout(new PatternLayout("%m%n"));  appender.setName(threadDependentLoggername);  appender.setThreshold(Level.DEBUG);  appender.activateOptions();  ConsoleAppender console=new ConsoleAppender();  console.setLayout(new PatternLayout("%m%n"));  console.setThreshold(Level.DEBUG);  console.activateOptions();  logger=Logger.getLogger(threadDependentLoggername);  logger.addAppender(appender);  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Welcome to Cello   //////////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Options   ///////////////////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  if (_options.get_assignment_algorithm() == null) {    logger.info("Assignment algorithm invalid");    _result_status=ResultStatus.arguments_invalid;    return;  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   UCF Validation   ////////////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  ucfAdaptor.setThreadDependentLoggername(threadDependentLoggername);  ucfReader.setThreadDependentLoggername(threadDependentLoggername);  ucfValidator.setThreadDependentLoggername(threadDependentLoggername);  UCF ucf=ucfReader.readAllCollections(_options.get_UCFfilepath());  if (ucf == null) {    _result_status=ResultStatus.ucf_invalid;    logger.info("invalid UCF");    return;  }  JSONObject ucf_validation_map=ucfValidator.validateAllUCFCollections(ucf,_options);  logger.info(gson.toJson(ucf_validation_map));  boolean is_ucf_valid=(boolean)ucf_validation_map.get("is_valid");  if (!is_ucf_valid) {    _result_status=ResultStatus.ucf_invalid;    logger.info("invalid UCF");    return;  }  LogicCircuit abstract_lc=new LogicCircuit();  ArrayList<LogicCircuit> unassigned_lcs=new ArrayList<LogicCircuit>();  ArrayList<LogicCircuit> assigned_lcs=new ArrayList<LogicCircuit>();  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Logic synthesis, Wiring diagram   ///////");  logger.info("///////////////////////////////////////////////////////////\n");  try {    abstract_lc=getAbstractCircuit(_options.get_fin_verilog(),ucf);  } catch (  Exception e) {    throw new IllegalStateException("Error in abstract circuit.  Exiting.");  }  if (abstract_lc.get_input_gates().size() == 0 || abstract_lc.get_output_gates().size() == 0) {    _result_status=ResultStatus.wiring_diagram_invalid;    logger.info("incorrect wiring diagram, no inputs/outputs");    return;  }  for (  GateType gtype : abstract_lc.get_gate_types().keySet()) {    logger.info("Circuit has " + abstract_lc.get_gate_types().get(gtype).size() + " "+ gtype+ " gates.");  }  logger.info("N logic gates: " + abstract_lc.get_logic_gates().size() + "");  if (_options.get_circuit_type() == CircuitType.sequential) {    HashMap<String,List<Integer>> initial_logics=new HashMap<>();    int nrows=SequentialHelper.loadInitialLogicsFromTruthtable(initial_logics,get_options().get_fin_sequential_waveform());    SequentialHelper.setInitialLogics(abstract_lc,initial_logics,nrows);    SequentialHelper.printTruthTable(abstract_lc);    logger.info("Cycle 1");    SequentialHelper.updateLogics(abstract_lc);    SequentialHelper.printTruthTable(abstract_lc);    logger.info("Cycle 2");    SequentialHelper.updateLogics(abstract_lc);    SequentialHelper.printTruthTable(abstract_lc);    logger.info("Cycle 3");    SequentialHelper.updateLogics(abstract_lc);    SequentialHelper.printTruthTable(abstract_lc);    if (!SequentialHelper.validLogic(abstract_lc)) {      throw new IllegalStateException("SequentialHelper: Invalid logic.  Exiting.");    }  } else {    LogicCircuitUtil.setInputLogics(abstract_lc);    Integer nrows=abstract_lc.get_input_gates().get(0).get_logics().size();    for (    Gate g : abstract_lc.get_Gates()) {      if (g.get_logics().isEmpty()) {        ArrayList<Integer> logics=new ArrayList<>();        for (int i=0; i < nrows; ++i) {          logics.add(0);        }        g.set_logics(logics);      }    }    Evaluate.simulateLogic(abstract_lc);  }  logger.info(abstract_lc.printGraph());  if (_options.is_figures()) {    logger.info("=========== Graphviz wiring diagram ==========");    Graphviz graphviz=new Graphviz(_options.get_home(),_options.get_output_directory(),_options.get_jobID());    graphviz.printGraphvizDotText(abstract_lc,_options.get_jobID() + "_wiring_agrn.dot");    ScriptCommands script_commands=new ScriptCommands(_options.get_home(),_options.get_output_directory(),_options.get_jobID());    script_commands.makeDot2Png(_options.get_jobID() + "_wiring_agrn.dot");    if (_options.is_dnaplotlib()) {    }  }  if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.abstract_only) {    _result_status=ResultStatus.abstract_only;    return;  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Loading parts   /////////////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  PartLibrary part_library=ucfAdaptor.createPartLibrary(ucf);  for (  Part p : part_library.get_ALL_PARTS().values()) {    logger.info("Part: " + p.get_type() + " "+ p.get_name());  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Loading Gate Library   //////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  Integer n_inputs=InputOutputGateReader.nInputs(_options.get_fin_input_promoters());  Integer n_outputs=InputOutputGateReader.nOutputs(_options.get_fin_output_genes());  GateLibrary gate_library=ucfAdaptor.createGateLibrary(ucf,n_inputs,n_outputs,_options);  for (  Gate g : gate_library.get_GATES_BY_NAME().values()) {    logger.info("loading gate from UCF gates collection: " + g.Name);  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Loading input and output gates   ////////");  logger.info("///////////////////////////////////////////////////////////\n");  InputOutputGateReader.readInputsFromFile(_options.get_fin_input_promoters(),gate_library);  InputOutputGateReader.readOutputsFromFile(_options.get_fin_output_genes(),gate_library);  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Loading Gate Parts   ////////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  ucfAdaptor.setGateParts(ucf,gate_library,part_library);  if (!ucfValidator.allGatesHaveGateParts(gate_library)) {    _result_status=ResultStatus.ucf_invalid;    return;  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Loading Response Functions   ////////////");  logger.info("///////////////////////////////////////////////////////////\n");  ucfAdaptor.setResponseFunctions(ucf,gate_library);  if (!ucfValidator.allGatesHaveResponseFunctions(gate_library)) {    _result_status=ResultStatus.ucf_invalid;    return;  }  for (  Gate g : gate_library.get_GATES_BY_NAME().values()) {    logger.info(g.Name + " " + g.get_equation()+ " "+ g.get_params().toString());  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Loading Toxicity Data   /////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  ucfAdaptor.setGateToxicity(ucf,gate_library,_options);  if (_options.is_toxicity()) {    Toxicity.initializeCircuitToxicity(abstract_lc);  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Loading Cytometry Data   ////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  ucfAdaptor.setGateCytometry(ucf,gate_library,_options);  if (_options.is_tandem_promoter()) {    logger.info("\n");    logger.info("///////////////////////////////////////////////////////////");    logger.info("///////////////   Loading Tandem Promoter Data   //////////");    logger.info("///////////////////////////////////////////////////////////\n");    ucfAdaptor.setTandemPromoters(ucf,gate_library,_options);  }  for (  String i : gate_library.get_INPUT_NAMES()) {    String input_info="input:    " + String.format("%-16s",i);    input_info+="   off_rpu=" + Util.sc(gate_library.get_INPUTS_OFF().get(i));    input_info+="   on_rpu=" + Util.sc(gate_library.get_INPUTS_ON().get(i));    logger.info(input_info);  }  for (  String i : gate_library.get_OUTPUT_NAMES()) {    String output_info="output:   " + String.format("%-16s",i);    logger.info(output_info);  }  if (_options.is_NOTequalsNOR1() && gate_library.get_GATES_BY_TYPE().containsKey(GateType.NOR)) {    LinkedHashMap<String,Gate> NOR_Gates=gate_library.get_GATES_BY_TYPE().get(GateType.NOR);    gate_library.get_GATES_BY_TYPE().put(GateType.NOT,NOR_Gates);    LinkedHashMap<String,ArrayList<Gate>> NOR_Gate_Groups=gate_library.get_GATES_BY_GROUP().get(GateType.NOR);    gate_library.get_GATES_BY_GROUP().put(GateType.NOT,NOR_Gate_Groups);  }  for (  Gate g : gate_library.get_GATES_BY_NAME().values()) {    logger.info("Gate: " + g.System + " "+ g.Type+ " "+ g.Name+ " "+ g.Group);  }  for (  GateType gtype : gate_library.get_GATES_BY_GROUP().keySet()) {    logger.info("GateLibrary groups: " + gtype + " "+ gate_library.get_GATES_BY_GROUP().get(gtype).size());  }  for (  GateType gtype : gate_library.get_GATES_BY_GROUP().keySet()) {    LinkedHashMap<String,ArrayList<Gate>> groups=gate_library.get_GATES_BY_GROUP().get(gtype);    for (    String group_name : groups.keySet()) {      String group_string_builder=gtype + ": group name: " + group_name;      ArrayList<Gate> gates=groups.get(group_name);      for (      Gate g : gates) {        group_string_builder+=" " + g.Name;      }      logger.info(group_string_builder);    }  }  for (  Gate g : _abstract_lc.get_logic_gates()) {    logger.info(g.Type);  }  if (abstract_lc.get_input_gates().size() > gate_library.get_INPUT_NAMES().length) {    logger.info("Number of input gates out of range: " + abstract_lc.get_input_gates().size());    return;  }  if (abstract_lc.get_output_gates().size() > gate_library.get_OUTPUT_NAMES().length) {    logger.info("Number of output gates out of range: " + abstract_lc.get_output_gates().size());    return;  }  if (!LogicCircuitUtil.libraryGatesCoverCircuitGates(abstract_lc,gate_library)) {    logger.info("Not enough gates in the library to cover the gates in the circuit.");    return;  } else {    logger.info("The gates library can cover the circuit.");  }  unassigned_lcs=LogicCircuitUtil.getInputAssignments(abstract_lc,gate_library,_options.is_permute_inputs());  for (  LogicCircuit lc : unassigned_lcs) {    LogicCircuitUtil.setInputOutputGroups(lc);  }  ArrayList<String> eugene_part_rules=ucfAdaptor.getEugenePartRules(ucf);  Roadblock roadblock=new Roadblock();  roadblock.setThreadDependentLoggername(threadDependentLoggername);  roadblock.set_roadblockers(eugene_part_rules,gate_library);  ArrayList<LogicCircuit> nonRB_unassigned_lcs=new ArrayList<LogicCircuit>();  for (  LogicCircuit unassigned_lc : unassigned_lcs) {    if (!roadblock.illegalInputRoadblocking(unassigned_lc)) {      nonRB_unassigned_lcs.add(unassigned_lc);    }  }  if (nonRB_unassigned_lcs.size() == 0) {    logger.info("\n");    logger.info("-----------------------------------------------------------");    logger.info("---------------   Warning: input promoter roadblocking ----");    logger.info("-----------------------------------------------------------\n");    nonRB_unassigned_lcs.add(unassigned_lcs.get(0));  }  if (unassigned_lcs.get(0).get_logic_gates().size() == 0) {    assigned_lcs=nonRB_unassigned_lcs;  } else {    logger.info("\n");    logger.info("///////////////////////////////////////////////////////////");    logger.info("///////////////   Assignment algorithm   //////////////////");    logger.info("///////////////////////////////////////////////////////////\n");    logger.info("assignment algorithm:  " + _options.get_assignment_algorithm());    Date datestart=new Date();    long starttime=datestart.getTime();    BuildCircuits circuit_builder=new BuildCircuits();    logger.info("=========== Assignment algorithm =============");    if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.sim_annealing) {      circuit_builder=new BuildCircuitsSimAnnealing(_options,gate_library,roadblock);    } else     if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.hill_climbing) {      circuit_builder=new BuildCircuitsHillClimbing(_options,gate_library,roadblock);    } else     if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.breadth_first) {      circuit_builder=new BuildCircuitsBreadthFirstSearch(_options,gate_library,roadblock);      _result_status=ResultStatus.breadth_first_not_allowed;      return;    } else     if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.steepest_ascent) {      circuit_builder=new BuildCircuitsSteepestAscent(_options,gate_library,roadblock);    } else     if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.random) {      circuit_builder=new BuildCircuitsRandom(_options,gate_library,roadblock);    } else     if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.permute) {      circuit_builder=new BuildCircuitsPermuteNOR(_options,gate_library,roadblock);    } else     if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.reload) {      circuit_builder=new BuildCircuitsReload(_options,gate_library,roadblock);    } else     if (_options.get_assignment_algorithm() == BuildCircuits.AssignmentAlgorithm.preset) {      circuit_builder=new BuildCircuitsPreset(_options,gate_library,roadblock);    } else {    }    circuit_builder.setThreadDependentLoggername(threadDependentLoggername);    logger.info(unassigned_lcs.size());    for (    LogicCircuit unassigned_lc : nonRB_unassigned_lcs) {      circuit_builder.set_unassigned_lc(unassigned_lc);      circuit_builder.buildCircuits();      boolean only_tp=false;      if (only_tp) {        for (        LogicCircuit lc : circuit_builder.get_logic_circuits()) {          boolean has_all_tp_data=LogicCircuitUtil.dataFoundForAllTandemPromoters(gate_library,lc);          if (has_all_tp_data) {            assigned_lcs.add(lc);          }        }      } else {        assigned_lcs.addAll(circuit_builder.get_logic_circuits());      }    }    logger.info("=========== Assigned circuits ================");    logger.info("assigned lcs: " + assigned_lcs.size() + "");    Date datestop=new Date();    long endtime=datestop.getTime();    long elapsedtime=endtime - starttime;    logger.info("Total elapsed time for assignment algorithm: " + elapsedtime + " milliseconds");    if (assigned_lcs.size() == 0) {      _result_status=ResultStatus.no_assignments_found;      logger.info("\n");      logger.info("///////////////////////////////////////////////////////////");      logger.info("////////   No assignments found. Exiting Cello.   /////////");      logger.info("///////////////////////////////////////////////////////////\n");      return;    }  }  sortLogicCircuitsByScore(assigned_lcs);  logger.info("best assignment score: " + String.format("%-5.4f",assigned_lcs.get(0).get_scores().get_score()));  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Processing best circuits   //////////////");  logger.info("///////////////////////////////////////////////////////////\n");  ArrayList<LogicCircuit> unique_lcs=assigned_lcs;  LinkedHashMap<String,LogicCircuit> unique_lcs_map=new LinkedHashMap<>();  if (_options.is_output_all_assignments()) {    for (    LogicCircuit lc : assigned_lcs) {      String score=Util.sc(lc.get_scores().get_score());      unique_lcs_map.put(score,lc);    }    unique_lcs=new ArrayList<>(unique_lcs_map.values());  }  logger.info("all lcs " + assigned_lcs.size());  logger.info("unique lcs " + unique_lcs.size());  sortLogicCircuitsByScore(unique_lcs);  if (_options.get_nA() > unique_lcs.size()) {    _options.set_nA(unique_lcs.size());  }  if (_options.is_output_all_assignments()) {    if (_options.is_histogram()) {      for (      Gate g : gate_library.get_GATES_BY_NAME().values()) {        HistogramUtil.interpolateTransferFunctionTitrations(g.Name,gate_library);      }      String file_name_default=_options.get_home() + _options.get_datapath() + "default_histogram.txt";      InputOutputGateReader.makeHistogramsforInputRPUs(gate_library,file_name_default);      for (      LogicCircuit lc : unique_lcs) {        LogicCircuitUtil.setInputRPU(lc,gate_library);        for (        Gate g : lc.get_Gates()) {          g.get_histogram_bins().init();        }        for (        Gate g : lc.get_logic_gates()) {          g.set_xfer_hist(gate_library.get_GATES_BY_NAME().get(g.Name).get_xfer_hist());        }        Evaluate.evaluateCircuitHistogramOverlap(lc,gate_library,_options);      }      for (      LogicCircuit lc : unique_lcs) {        Double overlap_score=lc.get_scores().get_conv_overlap();        lc.get_scores().set_onoff_ratio(overlap_score);      }      sortLogicCircuitsByScore(unique_lcs);    }    int counter=0;    for (    LogicCircuit lc : unique_lcs) {      lc.set_assignment_name(_options.get_jobID() + "_A" + String.format("%03d",counter));      counter++;      Util.fileWriter(_options.get_output_directory() + lc.get_assignment_name() + "_logic_circuit.txt",lc.toString(),false);      logger.info("=========== Circuit bionetlist ===============");      PlasmidUtil.setGateParts(lc,gate_library,part_library);      Netlist.setBioNetlist(lc,false);      Util.fileWriter(_options.get_output_directory() + lc.get_assignment_name() + "_bionetlist.txt",lc.get_netlist(),false);    }    return;  }  sortLogicCircuitsByScore(unique_lcs);  _logic_circuits=new ArrayList<>();  for (int a=0; a < _options.get_nA(); ++a) {    LogicCircuit lc=new LogicCircuit(unique_lcs.get(a));    lc.set_index(a);    lc.set_assignment_name(_options.get_jobID() + "_A" + String.format("%03d",a));    _logic_circuits.add(lc);    Double unit_conversion=ucfAdaptor.getUnitConversion(ucf);    for (    Gate g : lc.get_output_gates()) {      g.set_unit_conversion(unit_conversion);    }    Evaluate.evaluateCircuit(lc,gate_library,_options);    for (    Gate g : lc.get_Gates()) {      Evaluate.evaluateGate(g,_options);    }    if (_options.is_toxicity()) {      Toxicity.evaluateCircuitToxicity(lc,gate_library);    }    logger.info("=========== Circuit assignment details =======");    logger.info(lc.toString() + "\n");    Util.fileWriter(_options.get_output_directory() + lc.get_assignment_name() + "_logic_circuit.txt",lc.toString(),false);    logger.info("=========== Circuit bionetlist ===============");    PlasmidUtil.setGateParts(lc,gate_library,part_library);    Netlist.setBioNetlist(lc,false);    logger.info(lc.get_netlist());    Util.fileWriter(_options.get_output_directory() + lc.get_assignment_name() + "_bionetlist.txt",lc.get_netlist(),false);    if (_options.is_histogram()) {      logger.info("=========== Simulate cytometry distributions");      String file_name_default=_options.get_home() + _options.get_datapath() + "default_histogram.txt";      InputOutputGateReader.makeHistogramsforInputRPUs(gate_library,file_name_default);      LogicCircuitUtil.setInputRPU(lc,gate_library);      for (      Gate g : lc.get_Gates()) {        g.get_histogram_bins().init();      }      for (      Gate g : lc.get_logic_gates()) {        HistogramUtil.interpolateTransferFunctionTitrations(g.Name,gate_library);        g.set_xfer_hist(gate_library.get_GATES_BY_NAME().get(g.Name).get_xfer_hist());        logger.info("histogram interpolation for " + g.Name + " "+ g.get_xfer_hist().get_xfer_interp().size()+ " "+ g.get_xfer_hist().get_xfer_interp().get(0).length);      }      Evaluate.evaluateCircuitHistogramOverlap(lc,gate_library,_options);      logger.info("distribution score: " + lc.get_scores().get_conv_overlap());    }    if (_options.is_figures()) {      logger.info("\n");      logger.info("///////////////////////////////////////////////////////////");      logger.info("////////////////////////   Figures   //////////////////////");      logger.info("///////////////////////////////////////////////////////////\n");      generateFigures(lc,gate_library);    }    if (_options.is_plasmid()) {      logger.info("\n");      logger.info("///////////////////////////////////////////////////////////");      logger.info("///////////////   Plasmid DNA sequences   /////////////////");      logger.info("///////////////////////////////////////////////////////////\n");      PlasmidUtil.findPartComponentsInOutputGates(lc,gate_library,part_library);      generatePlasmids(lc,gate_library,part_library,ucf);    }    ScriptCommands script_commands=new ScriptCommands(_options.get_home(),_options.get_output_directory(),_options.get_jobID());    script_commands.removeEPSFiles(_options.get_output_directory());    if (roadblock.illegalInputRoadblocking(lc)) {      _result_status=ResultStatus.roadblocking_inputs;      logger.info("\n");      logger.info("-----------------------------------------------------------");      logger.info("---------------   Warning: input promoter roadblocking ----");      logger.info("-----------------------------------------------------------\n");    }  }  if (_result_status != ResultStatus.roadblocking_inputs) {    _result_status=ResultStatus.success;  }  logger.info("\n");  logger.info("///////////////////////////////////////////////////////////");  logger.info("///////////////   Cello finished playing   ////////////////");  logger.info("///////////////////////////////////////////////////////////\n");  return;}  }
class C{  public String toString(){  return super.toString() + "{ngraphs=" + ngraphs+ ",limit="+ limit+ ",nsamples="+ nsamples+ ",rangeCount="+ rangeCount+ ",cost="+ cost+ "}";}  }
class C{  public TestSpecification(int index,int row,int column,Scenario scenario,ClassifierType supplierType,ClassifierType clientType,ClientLocation clientLocation,UsageType usageType,Classifier.Visibility supplierVisibility,Member.Visibility memberVisibility,Member.Static memberStatic,Expectation expectation){  this.index=index;  this.row=row;  this.column=column;  this.scenario=scenario;  this.supplierType=supplierType;  this.clientType=clientType;  this.clientLocation=clientLocation;  this.usageType=usageType;  this.supplierVisibility=supplierVisibility;  this.memberVisibility=memberVisibility;  this.memberStatic=memberStatic;  this.expectation=expectation;}  }
class C{  public static void printCode(Method[] methods){  for (  Method m : methods) {    System.out.println(m);    Code code=m.getCode();    if (code != null) {      System.out.println(code);    }  }}  }
class C{  private void searchforInitiatorExportByWWN(String wwn,List<SearchResultResourceRep> resRepLists,boolean selfOnly,boolean authorized){  URIQueryResultList initiatorList=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getInitiatorPortInitiatorConstraint(wwn),initiatorList);  for (  URI iUri : initiatorList) {    searchforInitiatorExport(iUri.toString(),resRepLists,selfOnly,authorized);  }}  }
class C{  @Override public int hashCode(){  int result=19;  result=37 * result + this.categoryAnchor.hashCode();  result=37 * result + this.labelAnchor.hashCode();  result=37 * result + this.rotationAnchor.hashCode();  return result;}  }
class C{  @Ignore("TODO: test is disabled") @Test public void test_ValidateParallelGatewaySenderQueueAttributes_2(){  Integer localLocPort=(Integer)vm0.invoke(null);  Integer remoteLocPort=(Integer)vm1.invoke(null);  WANTestBase test=new WANTestBase();  Properties props=test.getDistributedSystemProperties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"localhost[" + localLocPort + "]");  InternalDistributedSystem ds=test.getSystem(props);  cache=CacheFactory.create(ds);  GatewaySenderFactory fact=cache.createGatewaySenderFactory();  fact.setParallel(true);  fact.setBatchConflationEnabled(true);  fact.setBatchSize(200);  fact.setBatchTimeInterval(300);  fact.setPersistenceEnabled(false);  fact.setDiskSynchronous(true);  fact.setMaximumQueueMemory(200);  fact.setAlertThreshold(1200);  GatewayEventFilter myEventFilter1=new MyGatewayEventFilter1();  fact.addGatewayEventFilter(myEventFilter1);  GatewayTransportFilter myStreamFilter1=new MyGatewayTransportFilter1();  fact.addGatewayTransportFilter(myStreamFilter1);  GatewayTransportFilter myStreamFilter2=new MyGatewayTransportFilter2();  fact.addGatewayTransportFilter(myStreamFilter2);  final IgnoredException ex=IgnoredException.addIgnoredException("Could not connect");  try {    GatewaySender sender1=fact.create("TKSender",2);    AttributesFactory factory=new AttributesFactory();    factory.addGatewaySenderId(sender1.getId());    factory.setDataPolicy(DataPolicy.PARTITION);    Region region=cache.createRegionFactory(factory.create()).create("test_ValidateGatewaySenderAttributes");    Set<GatewaySender> senders=cache.getGatewaySenders();    assertEquals(senders.size(),1);    GatewaySender gatewaySender=senders.iterator().next();    Set<RegionQueue> regionQueues=((AbstractGatewaySender)gatewaySender).getQueues();    assertEquals(regionQueues.size(),1);    RegionQueue regionQueue=regionQueues.iterator().next();    assertEquals(false,regionQueue.getRegion().getAttributes().isDiskSynchronous());  }  finally {    ex.remove();  }}  }
class C{  private void writeUpdatedDeviceToStorage(Device device){  try {    cntDeviceStrored.increment();    DeviceSyncRepresentation storeDevice=new DeviceSyncRepresentation(device);    storeClient.put(storeDevice.getKey(),storeDevice);  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.increment();    logger.error("Could not write device " + device + " to sync store:",e);  }catch (  Exception e) {    logger.error("Count not write device to sync storage " + e.getMessage());  }}  }
class C{  @Transactional(readOnly=false) public void systemUpdateUser(User user) throws RootNotModifiableException, RequiredFieldMissingException {  checkRoot(user);  userDao.update(user);}  }
class C{  private void report(Hashtable<IPoint,List<ICircle>> real,IPoint p,ICircle one,ICircle two){  List<ICircle> segs=real.get(p);  if (segs == null) {    segs=new List<ICircle>();    real.put(p,segs);  }  segs.append(one);  segs.append(two);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public IfStatement toNot(final Expression condition){  return toIf(make.notOf(condition));}  }
class C{  public IntArrayList(){  this(10);}  }
class C{  protected void clearParameters(){  Object nullObject=null;  fDocumentNo.setValue("");  fDescription.setValue("");  fIsPaid.setSelected(false);  fBPartner_ID.setValue(null);  fOrder_ID.setValue(null);  fDateFrom.setValue(nullObject);  fDateTo.setValue(nullObject);  fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(),p_WindowNo,"IsSOTrx")));}  }
class C{  public int readSynchSafeInt(){  int b1=readUnsignedByte();  int b2=readUnsignedByte();  int b3=readUnsignedByte();  int b4=readUnsignedByte();  return (b1 << 21) | (b2 << 14) | (b3 << 7)| b4;}  }
class C{  public String lookupName(int id){  return featureNames.get(id);}  }
class C{  public HistoryEditText(Activity context,String settingsPrefix,String delimiter,int maxHisotrySize,int[] cmdIds,EditText... editors){  this.mContext=context;  this.mDelimiter=delimiter;  this.mMaxHisotrySize=maxHisotrySize;  mEditorHandlers=new EditorHandler[editors.length];  for (int i=0; i < editors.length; i++) {    mEditorHandlers[i]=createHandler(settingsPrefix + i,editors[i],getId(cmdIds,i));  }}  }
class C{  @Transactional @Override public Protein insert(Protein newInstance){  Collection<Protein> proteinList=insert(Collections.singleton(newInstance));  assert proteinList != null;  assert proteinList.size() == 1;  entityManager.flush();  return proteinList.iterator().next();}  }
class C{  public Commafier(){  m_separator=DEFAULT_SEPARATOR;}  }
class C{  public void testElementOrderServletAfterFilterWithComment() throws Exception {  String xml=WEBAPP_TEST_HEADER.trim() + "  <!-- My filters -->".trim() + "  <filter>".trim()+ "    <filter-name>f1</filter-name>".trim()+ "    <filter-class>f1class</filter-class>".trim()+ "  </filter>".trim()+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  webXml.addTag(createServletElement(webXml.getDescriptorType(),"s1","s1class"));  List<Content> order=webXml.getRootElement().getContent();  assertEquals(Comment.class,order.get(0).getClass());  assertEquals("filter",((Element)order.get(1)).getName());  assertEquals("servlet",((Element)order.get(2)).getName());}  }
