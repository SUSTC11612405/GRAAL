class C{  public static String convertColorName(String color){  if (color.length() != 0) {switch (color.charAt(0)) {case 'b':case 'B':      if (color.equalsIgnoreCase("black")) {        return "0x000000";      }    if (color.equalsIgnoreCase("blue")) {      return "0x0000FF";    }  break;case 'g':case 'G':if (color.equalsIgnoreCase("green")) {  return "0x008000";}if (color.equalsIgnoreCase("gray")) {return "0x808080";}break;case 's':case 'S':if (color.equalsIgnoreCase("silver")) {return "0xC0C0C0";}break;case 'l':case 'L':if (color.equalsIgnoreCase("lime")) {return "0x00FF00";}break;case 'o':case 'O':if (color.equalsIgnoreCase("olive")) {return "0x808000";}break;case 'w':case 'W':if (color.equalsIgnoreCase("white")) {return "0xFFFFFF";}break;case 'y':case 'Y':if (color.equalsIgnoreCase("yellow")) {return "0xFFFF00";}break;case 'm':case 'M':if (color.equalsIgnoreCase("maroon")) {return "0x800000";}if (color.equalsIgnoreCase("magenta")) {return "0xFF00FF";}break;case 'n':case 'N':if (color.equalsIgnoreCase("navy")) {return "0x000080";}break;case 'r':case 'R':if (color.equalsIgnoreCase("red")) {return "0xFF0000";}break;case 'p':case 'P':if (color.equalsIgnoreCase("purple")) {return "0x800080";}break;case 't':case 'T':if (color.equalsIgnoreCase("teal")) {return "0x008080";}break;case 'f':case 'F':if (color.equalsIgnoreCase("fuchsia")) {return "0xFF00FF";}break;case 'a':case 'A':if (color.equalsIgnoreCase("aqua")) {return "0x00FFFF";}break;case 'c':case 'C':if (color.equalsIgnoreCase("cyan")) {return "0x00FFFF";}break;case 'h':case 'H':if (color.equalsIgnoreCase("haloGreen")) {return "0x80FF4D";}if (color.equalsIgnoreCase("haloBlue")) {return "0x009DFF";}if (color.equalsIgnoreCase("haloOrange")) {return "0xFFB600";}if (color.equalsIgnoreCase("haloSilver")) {return "0xAECAD9";}break;}}return null;}  }
class C{  public boolean isNot(TokenType compareType){  return (type != compareType);}  }
class C{  public static void write(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {  byte[] bytes=value.getBytes("UTF-8");  out.write(QUOTE);  writeBytesEscaped(out,bytes,bytes.length,noBackslashEscapes);  out.write(QUOTE);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("[DataSource: OFFSET=0x");  sb.append(Long.toHexString(offset));  sb.append(", SIZE=0x");  sb.append(Long.toHexString(size));  sb.append(", name=");  sb.append(name);  sb.append(", type=");  sb.append(type.toString());  sb.append(", minHeartbeat=");  sb.append(minimumHeartbeat);  sb.append(", min=");  sb.append(minimum);  sb.append(", max=");  sb.append(maximum);  sb.append("]");  sb.append("\n\t\t");  sb.append(pdpStatusBlock.toString());  return sb.toString();}  }
class C{  public boolean inGrepMapSort(){  ASTNode parent=myNode.getTreeParent();  IElementType parentElementType;  return parent != null && ((parentElementType=parent.getElementType()) == GREP_EXPR || parentElementType == SORT_EXPR || parentElementType == MAP_EXPR);}  }
class C{  public double angleTo(Vector2D op2){  final double result=Math.atan2(op2.getY(),op2.getX()) - Math.atan2(this.y,this.x);  return result < 0 ? result + 2 * Math.PI : result;}  }
class C{  private double extremum_alpha_n(int n,double[] alpha){  if (vec.doubleValue(n) == 0) {    return MathUtil.HALFPI;  }  double tan=0;  for (int j=n + 1; j < vec.getDimensionality(); j++) {    double alpha_j=j == vec.getDimensionality() - 1 ? 0 : alpha[j];    tan+=vec.doubleValue(j) * sinusProduct(n + 1,j,alpha) * Math.cos(alpha_j);  }  tan/=vec.doubleValue(n);  double alpha_n=Math.atan(tan);  if (alpha_n < 0) {    alpha_n=Math.PI + alpha_n;  }  return alpha_n;}  }
class C{  public void info(String msg){  innerLog(Level.INFO,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public PatternFilenameFilter(String patternStr){  this(Pattern.compile(patternStr));}  }
class C{  String normalizeClassPath(String classPath,boolean generateRelative){  char sep=CauchoUtil.getPathSeparatorChar();  int head=0;  int tail=0;  CharBuffer cb=CharBuffer.allocate();  while (head < classPath.length()) {    tail=classPath.indexOf(sep,head);    if (tail < 0)     tail=classPath.length();    if (tail > head) {      String segment=classPath.substring(head,tail);      segment=normalizePath(segment,generateRelative);      if (segment != null) {        if (cb.length() != 0)         cb.append(sep);        cb.append(segment);      }    }    head=tail + 1;  }  return cb.close();}  }
class C{  public static boolean isLowerCase(String s){  return Pattern.matches("[a-z]*",s);}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  public TextStyle templateDelimiterTextStyle(){  TextStyle textStyle=defaultTextStyle().copy();  textStyle.setColor(new RGB(255,183,51));  return textStyle;}  }
class C{  protected MetricFilterWithInteralReducerTransform(ValueFilter valueFilter){  this.valueFilter=valueFilter;  this.defaultScope=valueFilter.name();}  }
class C{  private static Map<Object,Object> unwrapBinariesIfNeeded(Map<Object,Object> map){  Map<Object,Object> map0=BinaryUtils.newMap(map);  for (  Map.Entry<Object,Object> e : map.entrySet())   map0.put(unwrapBinary(e.getKey()),unwrapBinary(e.getValue()));  return map0;}  }
class C{  public AttributeLocator(Instances data,int type){  this(data,type,0,data.numAttributes() - 1);}  }
class C{  private void addAllVerticesToFrontier(final IGASContext<VS,ES,ST> ctx){  final IGASState<VS,ES,ST> gasState=ctx.getGASState();  final EdgesEnum sampleEdges=getSampleEdgesFilter();  final VertexDistribution dist=ctx.getGraphAccessor().getDistribution(new Random());  final Resource[] initialFrontier=dist.getAll();  if (ctx.getLinkType() != null) {    if (log.isDebugEnabled())     log.debug("linkType=" + ctx.getLinkType());    final Set<Resource> filtered=new HashSet<>();    for (    Resource r : initialFrontier) {      if (ctx.getGraphAccessor().getEdgeCount(ctx,r,EdgesEnum.InEdges) != 0 || ctx.getGraphAccessor().getEdgeCount(ctx,r,EdgesEnum.OutEdges) != 0) {        filtered.add(r);      } else {        continue;      }    }    final Resource[] filteredFrontier=new Resource[filtered.size()];    int i=0;    for (    Resource r : filtered) {      filteredFrontier[i]=r;      i++;    }    gasState.setFrontier(ctx,filteredFrontier);    if (log.isDebugEnabled())     log.debug("initialFrontier=" + Arrays.toString(initialFrontier));  } else {    if (log.isDebugEnabled())     log.debug("initialFrontier=" + Arrays.toString(initialFrontier));    gasState.setFrontier(ctx,initialFrontier);  }}  }
class C{  public EgDemandDetails insertAdvanceCollection(final String demandReason,final BigDecimal advanceCollectionAmount,final Installment installment){  EgDemandDetails demandDetail=null;  if (advanceCollectionAmount != null && advanceCollectionAmount.compareTo(BigDecimal.ZERO) > 0) {    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDAO.getDemandReasonMasterByCode(WaterTaxConstants.DEMANDRSN_CODE_ADVANCE,module());    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException(" Advance Demand reason Master is null in method  insertAdvanceCollection");    final EgDemandReason egDemandReason=demandGenericDAO.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,installment,module());    if (egDemandReason == null)     throw new ApplicationRuntimeException(" Advance Demand reason is null in method  insertAdvanceCollection ");    demandDetail=createDemandDetails(egDemandReason,advanceCollectionAmount,BigDecimal.ZERO);  }  return demandDetail;}  }
class C{  private static String capitalizeIfNeeded(String text,CharSequence leftContext){  String leftContextTrimmed=leftContext.toString().trim();  if (leftContextTrimmed.length() == 0 || Constants.CHARACTERS_EOS.contains(leftContextTrimmed.charAt(leftContextTrimmed.length() - 1))) {    int firstNonWhitespaceIndex=-1;    for (int i=0; i < text.length(); i++) {      if (!Constants.CHARACTERS_WS.contains(text.charAt(i))) {        firstNonWhitespaceIndex=i;        break;      }    }    if (firstNonWhitespaceIndex > -1) {      String newText=text.substring(0,firstNonWhitespaceIndex) + Character.toUpperCase(text.charAt(firstNonWhitespaceIndex));      if (firstNonWhitespaceIndex < text.length() - 1) {        newText+=text.substring(firstNonWhitespaceIndex + 1);      }      return newText;    }  }  return text;}  }
class C{  public boolean verifySignature(byte[] message,BigInteger r,BigInteger s){  ECDomainParameters ec=key.getParameters();  BigInteger n=ec.getN();  BigInteger e=calculateE(n,message);  if (r.compareTo(ONE) < 0 || r.compareTo(n) >= 0) {    return false;  }  if (s.compareTo(ONE) < 0 || s.compareTo(n) >= 0) {    return false;  }  BigInteger c=s.modInverse(n);  BigInteger u1=e.multiply(c).mod(n);  BigInteger u2=r.multiply(c).mod(n);  ECPoint G=ec.getG();  ECPoint Q=((ECPublicKeyParameters)key).getQ();  ECPoint point=ECAlgorithms.sumOfTwoMultiplies(G,u1,Q,u2).normalize();  if (point.isInfinity()) {    return false;  }  BigInteger v=point.getAffineXCoord().toBigInteger().mod(n);  return v.equals(r);}  }
class C{  @Deprecated public double left(){  return min;}  }
class C{  public int hashCode(){  if (_handler == null)   return super.hashCode(); else   return _handler.hashCode();}  }
class C{  public static ClassInfo[] findClass(String[] dalvikNames){  ClassInfo[] ci=new ClassInfo[dalvikNames.length];  for (int i=0; i < dalvikNames.length; ++i) {    ci[i]=findClass(dalvikNames[i]);  }  return ci;}  }
class C{  public Red5(){  conn=Red5.getConnectionLocal();}  }
class C{  public void freeSegment(SegmentKelp segment) throws IOException {  freeTableSegmentLength(segment.length());  _segmentService.freeSegment(segment);}  }
class C{  private void createVMs(){  Host host=Host.getHost(0);  for (int i=0; i < 4; i++) {    vmArr[i]=host.getVM(i);  }}  }
class C{  public WriteDomainScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  public Shape createTabCloseIcon(int x,int y,int w,int h){  final double xMid=x + w / 2.0;  final double yMid=y + h / 2.0;  path.reset();  final double xOffsetL=w / 2.0;  final double xOffsetS=w / 2.0 - 1;  final double yOffsetL=h / 2.0;  final double yOffsetS=h / 2.0 - 1;  final double offsetC=1;  path.moveTo(xMid,yMid - offsetC);  path.lineTo(xMid + xOffsetS,yMid - yOffsetL);  path.lineTo(yMid + xOffsetL,yMid - yOffsetS);  path.lineTo(xMid + offsetC,yMid);  path.lineTo(xMid + xOffsetL,yMid + yOffsetS);  path.lineTo(xMid + xOffsetS,yMid + yOffsetL);  path.lineTo(xMid,yMid + offsetC);  path.lineTo(xMid - xOffsetS,yMid + yOffsetL);  path.lineTo(xMid - xOffsetL,yMid + yOffsetS);  path.lineTo(xMid - offsetC,yMid);  path.lineTo(xMid - xOffsetL,yMid - yOffsetS);  path.lineTo(xMid - xOffsetS,yMid - yOffsetL);  path.closePath();  return path;}  }
class C{  public boolean isTaxIncluded(){  if (m_M_PriceList_ID == 0) {    m_M_PriceList_ID=DB.getSQLValue(get_TrxName(),"SELECT M_PriceList_ID FROM C_Invoice WHERE C_Invoice_ID=?",getC_Invoice_ID());  }  MPriceList pl=MPriceList.get(getCtx(),m_M_PriceList_ID,get_TrxName());  return pl.isTaxIncluded();}  }
class C{  public Map<Integer,Field> asMap(){  return fields;}  }
class C{  public static double pointSegDistanceNM(double lat1,double lon1,double lat2,double lon2,double lat,double lon){  double ret=pointSegDistance(new Geo(lat1,lon1),new Geo(lat2,lon2),new Geo(lat,lon));  return (ret == -1 ? ret : Geo.nm(ret));}  }
class C{  private boolean isClientDialog(){  SIPTransaction transaction=(SIPTransaction)this.getFirstTransaction();  return transaction instanceof SIPClientTransaction;}  }
class C{  @Override public void attachView(V view){  mView=view;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.464 -0500",hash_original_method="A6E948E5B249A2FAEF42B96B088122ED",hash_generated_method="F0F3E5365C22D2919C02E3C458E1E309") public boolean isEmpty(){  return (exchange_keys.length == 0);}  }
class C{  private void trimWhiteSpacesAndComments(org.eclipse.che.ide.ext.java.jdt.internal.compiler.ast.Expression expression){  int start=expression.sourceStart;  int end=expression.sourceEnd;  int token;  int trimLeftPosition=expression.sourceStart;  int trimRightPosition=expression.sourceEnd;  boolean first=true;  Scanner removeBlankScanner=this.ast.scanner;  try {    removeBlankScanner.setSource(this.compilationUnitSource);    removeBlankScanner.resetTo(start,end);    while (true) {      token=removeBlankScanner.getNextToken();switch (token) {case TerminalTokens.TokenNameCOMMENT_JAVADOC:case TerminalTokens.TokenNameCOMMENT_LINE:case TerminalTokens.TokenNameCOMMENT_BLOCK:        if (first) {          trimLeftPosition=removeBlankScanner.currentPosition;        }      break;case TerminalTokens.TokenNameWHITESPACE:    if (first) {      trimLeftPosition=removeBlankScanner.currentPosition;    }  break;case TerminalTokens.TokenNameEOF:expression.sourceStart=trimLeftPosition;expression.sourceEnd=trimRightPosition;return;default :trimRightPosition=removeBlankScanner.currentPosition - 1;first=false;}}} catch (InvalidInputException e) {}}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.209 -0500",hash_original_method="5FDBB12430A98A22274A04FEE86533CB",hash_generated_method="1C68CDE5282EEAC0E6F1FE0611879BA3") public void sendWallpaperCommand(IBinder windowToken,String action,int x,int y,int z,Bundle extras){  try {    ViewRootImpl.getWindowSession(mContext.getMainLooper()).sendWallpaperCommand(windowToken,action,x,y,z,extras,false);  } catch (  RemoteException e) {  }}  }
class C{  public BubbleXYItemLabelGenerator(String formatString,DateFormat xFormat,DateFormat yFormat,DateFormat zFormat){  super(formatString,xFormat,yFormat);  ParamChecks.nullNotPermitted(zFormat,"zFormat");  this.zDateFormat=zFormat;}  }
class C{  public CachedDataRaster(Object source,AVList params,DataRasterReader reader,MemoryCache cache) throws java.io.IOException, IllegalArgumentException {  if (source == null) {    String message=Logging.getMessage("nullValue.SourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (reader == null) {    String message=Logging.getMessage("nullValue.ReaderIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  params=(null == params) ? new AVListImpl() : params;  this.assembleMetadata(source,params,reader);  this.dataSource=source;  this.dataReader=reader;  this.setValues(params.copy());  this.rasterCache=cache;  if (this.rasterCache != null) {    this.cacheListener=new CacheListener(this.dataSource);    this.rasterCache.addCacheListener(this.cacheListener);  }}  }
class C{  public static JobReturn prepareAndSubmitJob(MRJobInstruction inst,ExecutionContext ec) throws DMLRuntimeException {  MatrixObject[] inputMatrices=inst.extractInputMatrices(ec);  if (!(inst.getJobType() == JobType.REBLOCK)) {    for (    MatrixObject m : inputMatrices) {      if (m.isDirty() || m.getRDDHandle() != null)       m.exportData();    }    checkEmptyInputs(inst,inputMatrices);  }  inst.extractOutputMatrices(ec);  String rdInst=inst.getIv_randInstructions();  String rrInst=inst.getIv_recordReaderInstructions();  String mapInst=inst.getIv_instructionsInMapper();  String shuffleInst=inst.getIv_shuffleInstructions();  String aggInst=inst.getIv_aggInstructions();  String otherInst=inst.getIv_otherInstructions();  inst.setIv_randInstructions(updateLabels(rdInst,ec.getVariables()));  inst.setIv_recordReaderInstructions(updateLabels(rrInst,ec.getVariables()));  inst.setIv_instructionsInMapper(updateLabels(mapInst,ec.getVariables()));  inst.setIv_shuffleInstructions(updateLabels(shuffleInst,ec.getVariables()));  inst.setIv_aggInstructions(updateLabels(aggInst,ec.getVariables()));  inst.setIv_otherInstructions(updateLabels(otherInst,ec.getVariables()));  JobReturn ret=null;  if (OptimizerUtils.ALLOW_RUNTIME_PIGGYBACKING && RuntimePiggybacking.isActive() && RuntimePiggybacking.isSupportedJobType(inst.getJobType())) {    ret=RuntimePiggybacking.submitJob(inst);  } else   ret=submitJob(inst);  inst.setIv_randInstructions(rdInst);  inst.setIv_recordReaderInstructions(rrInst);  inst.setIv_instructionsInMapper(mapInst);  inst.setIv_shuffleInstructions(shuffleInst);  inst.setIv_aggInstructions(aggInst);  inst.setIv_otherInstructions(otherInst);  return ret;}  }
class C{  public Entry(Object key,Rect rect,int imageOffsetX,int imageOffsetY,int imageWidth,int imageHeight){  this.key=key;  this.rect=rect;  this.imageOffsetX=imageOffsetX;  this.imageOffsetY=imageOffsetY;  this.imageWidth=imageWidth;  this.imageHeight=imageHeight;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public void put(String key,float value){  super.put(key,Float.valueOf(value));}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void addSavepoint(String name){  if (savepoints == null) {    savepoints=database.newStringMap();  }  Savepoint sp=new Savepoint();  sp.logIndex=undoLog.size();  if (database.getMvStore() != null) {    sp.transactionSavepoint=getStatementSavepoint();  }  savepoints.put(name,sp);}  }
class C{  @Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){  FMLClientHandler.instance().getClient().renderEngine.bindTexture(TEXTURE);  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);  this.containerWidth=(this.width - this.xSize) / 2;  this.containerHeight=(this.height - this.ySize) / 2;  this.drawTexturedModalRect(containerWidth,containerHeight,0,0,this.xSize,this.ySize);}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  private static void appendAttributeCondition(StringBuffer sb,String name,Collection<String> values,boolean isAnd){  if (values != null && !values.isEmpty()) {    sb.append(" (");    Iterator iter=values.iterator();    while (iter.hasNext()) {      sb.append("[").append(name).append(": ").append(iter.next()).append("]");      if (iter.hasNext()) {        sb.append(isAnd ? " " : "|");      }    }    sb.append(")");  }}  }
class C{  public static int identityHashCode(java.lang.Object x){  return 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean outputResidualImage=false;  double yEstimate;  double residual;  boolean standardizeResiduals=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (!args[2].toLowerCase().equals("not specified")) {    outputHeader=args[2];    outputResidualImage=true;    standardizeResiduals=Boolean.parseBoolean(args[3]);  }  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    double sumX=0, sumY=0, sumXY=0, sumXX=0, sumYY=0;    long N=0;    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          sumX+=x;          sumY+=y;          sumXY+=x * y;          sumXX+=x * x;          sumYY+=y * y;          N++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    double slope=(N * sumXY - (sumX * sumY)) / (N * sumXX - (sumX * sumX));    double intercept=(sumY - slope * sumX) / N;    double r=(N * sumXY - (sumX * sumY)) / ((Math.sqrt(N * sumXX - (sumX * sumX)) * (Math.sqrt(N * sumYY - (sumY * sumY)))));    double rSqr=r * r;    double yMean=sumY / N;    double xMean=sumX / N;    double SSreg=0;    double SStotal=0;    double SSerror=0;    int dfReg=1;    int dfError=(int)(N - 2);    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          yEstimate=slope * x + intercept;          SSerror+=(y - yEstimate) * (y - yEstimate);          SStotal+=(y - yMean) * (y - yMean);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    SSreg=SStotal - SSerror;    double MSreg=SSreg / dfReg;    double MSerror=SSerror / dfError;    double Fstat=MSreg / MSerror;    double SEofEstimate=Math.sqrt(MSerror);    FDistribution f=new FDistribution(1,dfError);    double pValue=1.0 - f.cumulativeProbability(Fstat);    double msse=(Math.max(0d,sumYY - sumXY * sumXY / sumXX)) / (N - 2);    double interceptSE=Math.sqrt(msse * ((1d / N) + (xMean * xMean) / sumXX));    double interceptT=intercept / interceptSE;    TDistribution distribution=new TDistribution(N - 2);    double interceptPValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(intercept) / interceptSE));    double slopeSE=Math.sqrt(msse / sumXX);    double slopeT=slope / slopeSE;    double slopePValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(slope) / slopeSE));    if (outputResidualImage) {      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      output.setPreferredPalette("blue_white_red.pal");      if (standardizeResiduals) {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=(y - yEstimate) / SEofEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      } else {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=y - yEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      }      output.close();    }    DecimalFormat df=new DecimalFormat("###,###,###,##0.000");    DecimalFormat df2=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="IMAGE REGRESSION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    retstr+="Model Summary:\n";    retstr+="R\tR Square\tStd. Error of the Estimate\n";    retstr+=df.format(r) + "\t" + df.format(rSqr)+ "\t"+ df.format(SEofEstimate)+ "\n\n";    String ANOVA="\nAnalysis of Variance (ANOVA):\n";    ANOVA+="Source\tSS\tdf\tMS\tF\tP\n";    ANOVA+="Regression\t" + df.format(SSreg) + "\t"+ df2.format(dfReg)+ "\t"+ df.format(MSreg)+ "\t"+ df.format(Fstat)+ "\t"+ df.format(pValue)+ "\n";    ANOVA+="Residual\t" + df.format(SSerror) + "\t"+ df2.format(dfError)+ "\t"+ df.format(MSerror)+ "\n";    ANOVA+="Total\t" + df.format(SStotal) + "\n\n";    retstr+=ANOVA;    String coefficents="Coefficients:\n";    coefficents+="Variable\tB\tStd. Error\tt\tSig.\n";    coefficents+="Constant\t" + df.format(intercept) + "\t"+ df.format(interceptSE)+ "\t"+ df.format(interceptT)+ "\t"+ df.format(interceptPValue)+ "\n";    coefficents+="Slope\t" + df.format(slope) + "\t"+ df.format(slopeSE)+ "\t"+ df.format(slopeT)+ "\t"+ df.format(slopePValue)+ "\n\n";    retstr+=coefficents;    if (intercept >= 0) {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " + "+ df.format(intercept)+ "\n";    } else {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " - "+ df.format(-intercept)+ "\n";    }    returnData(retstr);    if (outputResidualImage) {      returnData(outputHeader);    }    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Boolean isHostnameFromDHCP(){  return hostnameFromDHCP;}  }
class C{  public void statisticsAvailable(StatisticsNotificationEvent e){  m_Statistics.addAll(e.getStatistics());  updateView();}  }
class C{  public void paintComponent(Graphics g){  if (image == null || image.getWidth(null) != getWidth() || image.getHeight(null) != getHeight()) {    isImageUpToDate=false;  }  if (!isImageUpToDate)   updateOffScreenImage();  g.drawImage(image,0,0,this);}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public ColorDecorator fadeFrom(Color from){  this.target=getCurrentColor();  this.setCurrentColor(from);  this.setAnimatorFunction(null);  return this;}  }
class C{  public CopyOnWriteArrayList(){  setArray(new Object[0]);}  }
class C{  public Gender gender(){  return gender;}  }
class C{  @SuppressWarnings("deprecation") public static double evaluate(String expr,HashMap<String,Double> symbols) throws Exception {  SymbolFactory sf;  ByteArrayInputStream parserInput;  Parser parser;  sf=new DefaultSymbolFactory();  parserInput=new ByteArrayInputStream(expr.getBytes());  parser=new Parser(new Scanner(parserInput,sf),sf);  parser.setSymbols(symbols);  parser.parse();  return parser.getResult();}  }
class C{  public void start(){  timer.start();  setVisible(true);}  }
class C{  private static void expandPath(final EvidenceBuilder fsLog,final String path,final int depth,boolean saveFirst){  if (Cfg.DEBUG) {    Check.requires(depth > 0,"wrong recursion depth");  }  if (Cfg.DEBUG) {    Check.requires(path != null,"path==null");  }  if (Cfg.DEBUG) {    Check.requires(path == "/" || !path.endsWith("/"),"path should end with /");  }  if (Cfg.DEBUG) {    Check.requires(!path.endsWith("*"),"path shouldn't end with *");  }  if (Cfg.DEBUG) {    Check.log(TAG + " expandPath: " + path+ " depth: "+ depth);  }  final File dir=new File(path);  if (dir.isDirectory()) {    if (saveFirst) {      Protocol.saveFilesystemLog(fsLog,path);    }    final String[] files=dir.list();    if (files == null) {      return;    }    for (    final String file : files) {      String dPath=path + "/" + file;      if (dPath.startsWith("//")) {        dPath=dPath.substring(1);      }      if (dPath.indexOf(StringUtils.chomp(Path.hidden(),"/")) >= 0) {        if (Cfg.DEBUG) {          Check.log(TAG + " Warn: " + "expandPath ignoring hidden path: "+ dPath);        }        continue;      }      if (!blackListDir.contains(dPath)) {        final boolean isDir=Protocol.saveFilesystemLog(fsLog,dPath);        if (isDir && depth > 1) {          expandPath(fsLog,dPath,depth - 1,false);        }      } else {        if (Cfg.DEBUG) {          Check.log(TAG + " (expandPath) blocked path: %s",dPath);        }      }    }  }}  }
class C{  private static String[] selectColumnNames(List<String> names,ColumnType types[]){  List<String> header=new ArrayList<>();  for (int i=0; i < types.length; i++) {    if (types[i] != ColumnType.SKIP) {      header.add(names.get(i));    }  }  String[] result=new String[header.size()];  return header.toArray(result);}  }
class C{  protected void reportStyleDeclarationError(CSSParseException e){  errorHandler.error(e);  int cbraces=1;  for (; ; ) {switch (current) {case LexicalUnits.EOF:      return;case LexicalUnits.RIGHT_CURLY_BRACE:    if (--cbraces == 0) {      nextIgnoreSpaces();      return;    }case LexicalUnits.LEFT_CURLY_BRACE:  cbraces++;}nextIgnoreSpaces();}}  }
class C{  public Entry ipAuth(final String ip){  if (this.ipUsers.containsKey(ip)) {    final String user=this.ipUsers.get(ip);    final Entry entry=this.getEntry(user);    final Long entryTimestamp=entry.getLastAccess();    if (entryTimestamp == null || (System.currentTimeMillis() - entryTimestamp.longValue()) > (1000 * 60 * 10)) {      return null;    }    return entry;  }  return null;}  }
class C{  public void testTimeEscapeSequenceWithWhitespaces() throws Exception {  check("'13:15:08'","{ t '13:15:08'}");  check("'13:15:08'","{   t  '13:15:08'}");  check("'13:15:08'","{ \n t\n'13:15:08'}");}  }
class C{  public boolean isProcessedOK(){  return m_ok;}  }
class C{  @Override public final E nextElement(){  E result=m_Vector.get(m_Counter);  m_Counter++;  if (m_Counter == m_SpecialElement) {    m_Counter++;  }  return result;}  }
class C{  public static <K,V>boolean putMapNotNullKey(Map<K,V> map,K key,V value){  if (map == null || key == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public void testAbstractMethodHasMeta(){  checkAbstract(".my_method");}  }
class C{  public UmmalquraCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute,int second){  set(YEAR,year);  set(MONTH,month);  set(DAY_OF_MONTH,dayOfMonth);  set(HOUR_OF_DAY,hourOfDay);  set(MINUTE,minute);  set(SECOND,second);}  }
class C{  public boolean ignore_types(){  return soot.PhaseOptions.getBoolean(options,"ignore-types");}  }
class C{  @Override public void onMapReady(GoogleMap googleMap){  mMap=googleMap;  mMap.getUiSettings().setMyLocationButtonEnabled(false);  mMap.getUiSettings().setZoomControlsEnabled(false);  mMap.getUiSettings().setAllGesturesEnabled(false);  mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED || checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {      mMap.setMyLocationEnabled(true);    }  } else {    mMap.setMyLocationEnabled(true);  }  mMap.getUiSettings().setZoomControlsEnabled(false);  Cursor cursor=null;  if (mIsEditingGeofence) {    ContentResolver resolver=this.getContentResolver();    cursor=resolver.query(Uri.parse("content://" + getString(R.string.authority) + "/geofences"),null,"_id = ?",new String[]{String.valueOf(mEditGeofenceId)},null);    if (cursor != null && cursor.getCount() > 0) {      cursor.moveToFirst();      mLocationButton.setText(cursor.getString(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_NAME)));      mRadiusSlider.setProgress(cursor.getInt(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_RADIUS)));      mCustomId.setText(cursor.getString(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_CUSTOMID)));      int triggers=cursor.getInt(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_TRIGGER));      mTriggerEnter.setChecked(((triggers & GeofenceProvider.TRIGGER_ON_ENTER) == GeofenceProvider.TRIGGER_ON_ENTER));      mTriggerExit.setChecked(((triggers & GeofenceProvider.TRIGGER_ON_EXIT) == GeofenceProvider.TRIGGER_ON_EXIT));      int enterMethod=cursor.getInt(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_ENTER_METHOD));      mEnterMethodButton.setText(enterMethod == 0 ? "POST" : "GET");      mEnterMethod=(Constants.HttpMethod.POST.ordinal() == enterMethod) ? Constants.HttpMethod.POST : Constants.HttpMethod.GET;      mEnterUrl.setText(cursor.getString(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_ENTER_URL)));      int exitMethod=cursor.getInt(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_EXIT_METHOD));      mExitMethodButton.setText(exitMethod == 0 ? "POST" : "GET");      mExitMethod=(Constants.HttpMethod.POST.ordinal() == enterMethod) ? Constants.HttpMethod.POST : Constants.HttpMethod.GET;      mExitUrl.setText(cursor.getString(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_EXIT_URL)));      mBasicAuthSwitch.setChecked(cursor.getInt(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_HTTP_AUTH)) != 0);      mBasicAuthUsername.setText(cursor.getString(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_HTTP_USERNAME)));      mBasicAuthPassword.setText(cursor.getString(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_HTTP_PASSWORD)));    }  }  mLocativeLocationManager=new LocativeLocationManager();  if (!mIsEditingGeofence) {    mLocativeLocationManager.getLocation(this,locationResult);  }  Location location;  if (mMap.isMyLocationEnabled() && mMap.getMyLocation() != null && !mIsEditingGeofence) {    location=mMap.getMyLocation();    mMap.getMyLocation();  } else   if (cursor != null) {    location=new Location("location");    location.setLatitude(cursor.getDouble(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_LATITUDE)));    location.setLongitude(cursor.getDouble(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_LONGITUDE)));  } else {    location=new Location("custom");    location.setLatitude(40.7127);    location.setLongitude(74.0059);  }  mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(),location.getLongitude()),16));  setupCircleManager();  if (mIsEditingGeofence) {    setCircleToLocation(location);    int radiusMeters=cursor.getInt(cursor.getColumnIndex(GeofenceProvider.Geofence.KEY_RADIUS));    mRadiusSlider.setProgress(radiusMeters);  }  updateRadius();}  }
class C{  public static GdbContinue parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  for (  String line : output.split("\n")) {    Matcher matcher=GDB_BREAKPOINT.matcher(line);    if (matcher.find()) {      String file=matcher.group(1);      String lineNumber=matcher.group(2);      Location location=new LocationImpl(file,Integer.parseInt(lineNumber));      return new GdbContinue(new BreakpointImpl(location));    }  }  return new GdbContinue(null);}  }
class C{  public void plnI(Object o) throws IOException {  p(o.toString());  pln();  pI();}  }
class C{  public static void addGVTListener(BridgeContext ctx,Document doc){  UserAgent ua=ctx.getUserAgent();  if (ua != null) {    EventDispatcher dispatcher=ua.getEventDispatcher();    if (dispatcher != null) {      final Listener listener=new Listener(ctx,ua);      dispatcher.addGraphicsNodeMouseListener(listener);      dispatcher.addGraphicsNodeMouseWheelListener(listener);      dispatcher.addGraphicsNodeKeyListener(listener);      EventListener l=new GVTUnloadListener(dispatcher,listener);      NodeEventTarget target=(NodeEventTarget)doc;      target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGUnload",l,false,null);      storeEventListenerNS(ctx,target,XMLConstants.XML_EVENTS_NAMESPACE_URI,"SVGUnload",l,false);    }  }}  }
class C{  private void createLoanProductEntity(){  final String loanProductJSON=new LoanProductTestBuilder().withPrincipal(loanPrincipalAmount).withNumberOfRepayments(numberOfRepayments).withinterestRatePerPeriod(interestRatePerPeriod).withInterestRateFrequencyTypeAsYear().build(null);  this.loanProductId=this.loanTransactionHelper.getLoanProductId(loanProductJSON);}  }
class C{  public final void open(String page,String ref){  if (ref == null) {    ref="";  }  ref=ref.replace(" ","_");  if (page == null) {    page=DEFAULT_PAGE;  }  if (currentPage != null && currentPage.equals(page)) {    jumpTo(ref);  } else {    reference=ref;  }  loadPage(page);  HistoryItem location=new HistoryItem(page,ref);  history.addIfNew(location);  updateHistoryButtons();  currentLocation.setText(location.toString());}  }
class C{  public void tunnelCreated() throws IllegalStateException, IOException {  LOG.trace("enter HttpConnection.tunnelCreated()");  if (!isSecure() || !isProxied()) {    throw new IllegalStateException("Connection must be secure " + "and proxied to use this feature");  }  if (usingSecureSocket) {    throw new IllegalStateException("Already using a secure socket");  }  if (LOG.isDebugEnabled()) {    LOG.debug("Secure tunnel to " + hostName + ":"+ portNumber);  }  final SecureProtocolSocketFactory socketFactory=(SecureProtocolSocketFactory)protocolInUse.getSocketFactory();  socket=socketFactory.createSocket(socket,hostName,portNumber,params,true);  final int sndBufSize=params.getSendBufferSize();  if (sndBufSize >= 0) {    socket.setSendBufferSize(sndBufSize);  }  final int rcvBufSize=params.getReceiveBufferSize();  if (rcvBufSize >= 0) {    socket.setReceiveBufferSize(rcvBufSize);  }  int outbuffersize=socket.getSendBufferSize();  if (outbuffersize > 2048) {    outbuffersize=2048;  }  int inbuffersize=socket.getReceiveBufferSize();  if (inbuffersize > 2048) {    inbuffersize=2048;  }  inputStream=new BufferedInputStream(socket.getInputStream(),inbuffersize);  outputStream=new BufferedOutputStream(socket.getOutputStream(),outbuffersize);  usingSecureSocket=true;  tunnelEstablished=true;}  }
class C{  public void bind(Texture texture){  faces.forEach(null);}  }
class C{  private void updateNear(GridNearAtomicUpdateRequest req,GridNearAtomicUpdateResponse res){  assert nearEnabled;  if (res.remapKeys() != null || !req.hasPrimary())   return;  GridNearAtomicCache near=(GridNearAtomicCache)cctx.dht().near();  near.processNearAtomicUpdateResponse(req,res);}  }
class C{  public static String[] readAllLines(){  ArrayList<String> lines=new ArrayList<String>();  while (hasNextLine()) {    lines.add(readLine());  }  return lines.toArray(new String[0]);}  }
class C{  void removeAttribute(Attribute attribute){  final Element element=attribute.getElement();  final int lengthBefore=xml.length;  final Segment segment=attributeSegment(attribute);  xml=insertBetween(xml,segment.left - 1,segment.right,"");  shiftSegments(element.start.left,xml.length - lengthBefore);}  }
class C{  public void clearActivities(){  this.activities.clear();  this.parents.clear();  this.globalQueue.clear();}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  public ImageCache(Context context,String uniqueName){  init(context,new ImageCacheParams(context,uniqueName));}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public final boolean isXOdd(){  return (getX() & 1) == 1;}  }
class C{  public CTraceEventWrapper(final ITraceEvent element){  m_element=element;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.770 -0500",hash_original_method="9CECCAD6D8D5F2E74B9B1C7CC1642036",hash_generated_method="2905FE266121C8BB7EB4FAF5BE38823B") protected DrmRightsManager(){}  }
class C{  private void downloadFile(String downloadUrl,String fullFilePath) throws IOException, ServiceException {  System.out.println("Downloading file from: " + downloadUrl);  MediaContent mc=new MediaContent();  mc.setUri(downloadUrl);  MediaSource ms=service.getMedia(mc);  InputStream inStream=null;  FileOutputStream outStream=null;  try {    inStream=ms.getInputStream();    outStream=new FileOutputStream(fullFilePath);    int c;    while ((c=inStream.read()) != -1) {      outStream.write(c);    }  }  finally {    if (inStream != null) {      inStream.close();    }    if (outStream != null) {      outStream.flush();      outStream.close();    }  }}  }
class C{  @Override public AgentAppController createController(){  return new NQueensController();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("AD_Org_ID"))     m_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_AcctSchema_ID"))     m_C_AcctSchema_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DateAcct"))     m_DateAcct=(Timestamp)para[i].getParameter(); else     if (name.equals("IsValidateOnly"))     m_IsValidateOnly="Y".equals(para[i].getParameter()); else     if (name.equals("IsImportOnlyNoErrors"))     m_IsImportOnlyNoErrors="Y".equals(para[i].getParameter()); else     if (name.equals("DeleteOldImported"))     m_DeleteOldImported="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private String extractPath(final String uri){  return DefaultWildcardStreamLocator.stripQueryPath(uri.replace(PREFIX,StringUtils.EMPTY));}  }
class C{  private RuleQuery createQueryResult(String sourceText,double isolationScore,SymmetricalWordAlignment s2sPrime,SymmetricalWordAlignment sPrime2tPrime,SymmetricalWordAlignment tPrime2t,int tContextOffset){  List<String> alignmentList=new LinkedList<>();  Set<Integer> alignments=s2sPrime.f2e(0);  for (  int i : alignments) {    Set<Integer> alignments2=sPrime2tPrime.f2e(i);    for (    int j : alignments2) {      j+=tContextOffset;      Set<Integer> alignments3=tPrime2t.f2e(j);      for (      int k : alignments3) {        alignmentList.add(String.format("%d-%d",0,k));      }    }  }  Sequence<IString> tgt=tPrime2t.e();  if (tContextOffset > 0) {    tgt=tgt.subsequence(tContextOffset,tgt.size());  }  List<String> tgtStrings=Sequences.toStringList(tgt);  return new RuleQuery(tgtStrings,alignmentList,isolationScore);}  }
class C{  public void addAll(SequenceCollection components){  for (  ArrayListSimpleList<Sequence> s : components.sequenceMap.values()) {    for (    Sequence seq : s.theList) {      add(seq);    }  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  private boolean removeOverRedundancy(){  Move bestMove=null;  BucketRollup first=null;  while (bestMove == null) {    if (model.getOverRedundancyBuckets().isEmpty()) {      return false;    }    first=model.getOverRedundancyBuckets().first();    bestMove=model.findBestRemove(first);    if (bestMove == null) {      if (logger.isDebugEnabled()) {        logger.debug("Skipping overredundancy bucket {} because couldn't find a member to remove from?",first);      }      model.ignoreOverRedundancyBucket(first);    }  }  Member targetMember=bestMove.getTarget();  model.remoteOverRedundancyBucket(first,targetMember);  return true;}  }
class C{  public RequestHandle head(String url,ResponseHandlerInterface responseHandler){  return head(null,url,null,responseHandler);}  }
class C{  public java.awt.Font convertFont(Font swtFont,FontData[] swtFontData){  FontData fontData0=swtFontData[0];  int resolution=Toolkit.getDefaultToolkit().getScreenResolution();  int awtFontSize=(int)Math.round((double)fontData0.getHeight() * resolution / 72.0);  return new java.awt.Font(fontData0.getName(),fontData0.getStyle(),awtFontSize);}  }
class C{  public static Date min(Date d1,Date d2){  if (d1 == null && d2 == null)   return null;  if (d1 == null)   return d2;  if (d2 == null)   return d1;  return (d1.before(d2)) ? d1 : d2;}  }
class C{  VPlexMigrationInfo findMigration(String migrationName,URI baseMigrationPath) throws VPlexApiException {  return findMigration(migrationName,baseMigrationPath,false);}  }
class C{  private boolean reinvokePersistentGroup(WifiP2pConfig config){  WifiP2pDevice dev=fetchCurrentDeviceDetails(config);  boolean join=dev.isGroupOwner();  String ssid=mWifiNative.p2pGetSsid(dev.deviceAddress);  if (DBG)   logd("target ssid is " + ssid + " join:"+ join);  if (join && dev.isGroupLimit()) {    if (DBG)     logd("target device reaches group limit.");    join=false;  } else   if (join) {    int netId=mGroups.getNetworkId(dev.deviceAddress,ssid);    if (netId >= 0) {      if (!mWifiNative.p2pGroupAdd(netId)) {        return false;      }      return true;    }  }  if (!join && dev.isDeviceLimit()) {    loge("target device reaches the device limit.");    return false;  }  if (!join && dev.isInvitationCapable()) {    int netId=WifiP2pGroup.PERSISTENT_NET_ID;    if (config.netId >= 0) {      if (config.deviceAddress.equals(mGroups.getOwnerAddr(config.netId))) {        netId=config.netId;      }    } else {      netId=mGroups.getNetworkId(dev.deviceAddress);    }    if (netId < 0) {      netId=getNetworkIdFromClientList(dev.deviceAddress);    }    if (DBG)     logd("netId related with " + dev.deviceAddress + " = "+ netId);    if (netId >= 0) {      if (mWifiNative.p2pReinvoke(netId,dev.deviceAddress)) {        config.netId=netId;        return true;      } else {        loge("p2pReinvoke() failed, update networks");        updatePersistentNetworks(RELOAD);        return false;      }    }  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private synchronized void checkShutDownProxyBridge(){  if (proxyServer != null) {    smtpRequestsPhaser.arriveAndDeregister();    LOGGER.trace("SMTP request threads left: {}",smtpRequestsPhaser.getUnarrivedParties());    if (smtpRequestsPhaser.getUnarrivedParties() == 0) {      LOGGER.trace("all threads have finished processing");      if (proxyServer.isRunning() && !proxyServer.isStopping()) {        LOGGER.trace("stopping proxy bridge...");        proxyServer.stop();      }      if (executor != null) {        executor.shutdown();      }    }  }}  }
class C{  public PlatformManager(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;  this.commandManager=new CommandManager(worldEdit,this);  worldEdit.getEventBus().register(this);}  }
class C{  public static Indication createConnectionAttemptIndication(int connectionIdValue,TransportAddress peerAddress) throws IllegalArgumentException {  Indication connectionAttemptIndication=new Indication();  connectionAttemptIndication.setMessageType(Message.CONNECTION_ATTEMPT_INDICATION);  ConnectionIdAttribute connectionIdAttribute=AttributeFactory.createConnectionIdAttribute(connectionIdValue);  connectionAttemptIndication.putAttribute(connectionIdAttribute);  XorPeerAddressAttribute xorPeerAddressAttribute=AttributeFactory.createXorPeerAddressAttribute(peerAddress,connectionAttemptIndication.getTransactionID());  connectionAttemptIndication.putAttribute(xorPeerAddressAttribute);  return connectionAttemptIndication;}  }
class C{  public IndentingWriter(Writer out,int step){  this(out);  if (indentStep < 0)   throw new IllegalArgumentException("negative indent step");  indentStep=step;}  }
class C{  public S_Equations createS_Equations(){  S_EquationsImpl s_Equations=new S_EquationsImpl();  return s_Equations;}  }
class C{  protected boolean checkStorageFileSystemExistsInDB(String nativeGuid) throws IOException {  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemNativeGUIdConstraint(nativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI fileSystemtURI=iter.next();    FileShare fileShare=_dbClient.queryObject(FileShare.class,fileSystemtURI);    if (fileShare != null && !fileShare.getInactive()) {      return true;    }  }  return false;}  }
class C{  public XYPolygonAnnotation(double[] polygon){  this(polygon,new BasicStroke(1.0f),Color.black);}  }
class C{  public final void yyclose() throws java.io.IOException {  yy_atEOF=true;  yy_endRead=yy_startRead;  if (yy_reader != null)   yy_reader.close();}  }
class C{  public static void join(final Thread thread,final long timeoutMilliseconds){  final long tilt=System.currentTimeMillis() + timeoutMilliseconds;  final long incrementalWait=jitterInterval(timeoutMilliseconds);  final long start=System.currentTimeMillis();  for (; ; ) {    if (!thread.isAlive()) {      break;    }    try {      thread.join(incrementalWait);    } catch (    InterruptedException e) {      fail("interrupted");    }    if (System.currentTimeMillis() >= tilt) {      break;    }  }  if (thread.isAlive()) {    logger.info("HUNG THREAD");    ThreadUtils.dumpStackTrace(thread,thread.getStackTrace());    ThreadUtils.dumpMyThreads();    thread.interrupt();    fail("Thread did not terminate after " + timeoutMilliseconds + " ms: "+ thread);  }  long elapsedMs=(System.currentTimeMillis() - start);  if (elapsedMs > 0) {    String msg="Thread " + thread + " took "+ elapsedMs+ " ms to exit.";    logger.info(msg);  }}  }
class C{  public Source<Long> between(final long startInclusive,final long endInclusive){  ArgumentAssertions.checkArguments(startInclusive <= endInclusive,"There are no Long values to be generated between (%s) and (%s)",startInclusive,endInclusive);  return Compositions.weightWithValues(range(startInclusive,endInclusive),startInclusive,endInclusive);}  }
class C{  @Override public synchronized void addInstanceListener(InstanceListener dsl){  m_instanceListeners.addElement(dsl);  if (m_format != null) {    InstanceEvent e=new InstanceEvent(this,m_format);    dsl.acceptInstance(e);  }}  }
class C{  public static void storeConfig(final Context context,Config config){  String configInString=new Gson().toJson(config,Config.class);  PreferenceManager.getDefaultSharedPreferences(context).edit().putString(CONFIG_KEY,configInString).apply();}  }
class C{  public void invoke(Project project) throws IncorrectOperationException {  final DynamicElementSettings settings;  if (myReferenceExpression != null) {    settings=QuickfixUtil.createSettings(myReferenceExpression);  } else {    settings=QuickfixUtil.createSettings(myArgumentLabel,myTargetClass);  }  DynamicManager.getInstance(project).addProperty(settings);}  }
class C{  public static MultisigSignatureTransaction createMultisigSignature(){  return new MultisigSignatureTransaction(TimeInstant.ZERO,Utils.generateRandomAccount(),Utils.generateRandomAccount(),Utils.generateRandomHash());}  }
class C{  private void pushPriceModel(PriceModel pm,String subscriptionId,HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (subAgent.pushPriceModel(pm)) {    successForward(request,response,"Subscription price model for subscription '" + subscriptionId + "' sent to OSCM Task Queue!");  } else {    errorForward(request,response,"Couldn't send message to OSCM Task Queue");  }}  }
class C{  public void addToBldgPrefs(String bldgPref,String level){  this.bldgPrefs.add(bldgPref);  this.bldgPrefLevels.add(level);}  }
class C{  @LogMessageDoc(level="ERROR",message="Could not decode action {action}",explanation="A static flow entry contained an invalid action",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public static String actionsToString(List<OFAction> actions,Logger log){  StringBuilder sb=new StringBuilder();  for (  OFAction a : actions) {    if (sb.length() > 0) {      sb.append(',');    }switch (a.getType()) {case OUTPUT:      sb.append(STR_OUTPUT + "=" + Integer.toString(((OFActionOutput)a).getPort().getPortNumber()));    break;case ENQUEUE:  long queue=((OFActionEnqueue)a).getQueueId();OFPort port=((OFActionEnqueue)a).getPort();sb.append(STR_ENQUEUE + "=" + Integer.toString(port.getPortNumber())+ ":0x"+ String.format("%02x",queue));break;case STRIP_VLAN:sb.append(STR_VLAN_STRIP);break;case POP_VLAN:sb.append(STR_VLAN_POP);break;case PUSH_VLAN:sb.append(STR_VLAN_PUSH + "=" + Integer.toString(((OFActionPushVlan)a).getEthertype().getValue()));break;case SET_VLAN_VID:sb.append(STR_VLAN_SET_VID + "=" + Short.toString(((OFActionSetVlanVid)a).getVlanVid().getVlan()));break;case SET_VLAN_PCP:sb.append(STR_VLAN_SET_PCP + "=" + Byte.toString(((OFActionSetVlanPcp)a).getVlanPcp().getValue()));break;case SET_QUEUE:sb.append(STR_QUEUE_SET + "=" + Long.toString(((OFActionSetQueue)a).getQueueId()));case SET_DL_SRC:sb.append(STR_DL_SRC_SET + "=" + ((OFActionSetDlSrc)a).getDlAddr().toString());break;case SET_DL_DST:sb.append(STR_DL_DST_SET + "=" + ((OFActionSetDlDst)a).getDlAddr().toString());break;case SET_NW_ECN:sb.append(STR_NW_ECN_SET + "=" + Byte.toString(((OFActionSetNwEcn)a).getNwEcn().getEcnValue()));break;case SET_NW_TOS:sb.append(STR_NW_TOS_SET + "=" + Short.toString(((OFActionSetNwTos)a).getNwTos()));break;case SET_NW_TTL:sb.append(STR_NW_TTL_SET + "=" + Short.toString(((OFActionSetNwTtl)a).getNwTtl()));break;case DEC_NW_TTL:sb.append(STR_NW_TTL_DEC);break;case SET_MPLS_LABEL:sb.append(STR_MPLS_LABEL_SET + "=" + Long.toString(((OFActionSetMplsLabel)a).getMplsLabel()));break;case SET_MPLS_TC:sb.append(STR_MPLS_TC_SET + "=" + Short.toString(((OFActionSetMplsTc)a).getMplsTc()));break;case SET_MPLS_TTL:sb.append(STR_MPLS_TTL_SET + "=" + Short.toString(((OFActionSetMplsTtl)a).getMplsTtl()));break;case DEC_MPLS_TTL:sb.append(STR_MPLS_TTL_DEC);break;case PUSH_MPLS:sb.append(STR_MPLS_PUSH + "=" + Integer.toString(((OFActionPushMpls)a).getEthertype().getValue()));break;case POP_MPLS:sb.append(STR_MPLS_POP + "=" + Integer.toString(((OFActionPopMpls)a).getEthertype().getValue()));break;case SET_NW_SRC:sb.append(STR_NW_SRC_SET + "=" + ((OFActionSetNwSrc)a).getNwAddr().toString());break;case SET_NW_DST:sb.append(STR_NW_DST_SET + "=" + ((OFActionSetNwDst)a).getNwAddr().toString());break;case SET_TP_SRC:sb.append(STR_TP_SRC_SET + "=" + ((OFActionSetTpSrc)a).getTpPort().toString());break;case SET_TP_DST:sb.append(STR_TP_DST_SET + "=" + ((OFActionSetTpDst)a).getTpPort().toString());break;case COPY_TTL_IN:sb.append(STR_TTL_IN_COPY);break;case COPY_TTL_OUT:sb.append(STR_TTL_OUT_COPY);break;case PUSH_PBB:sb.append(STR_PBB_PUSH + "=" + Integer.toString(((OFActionPushPbb)a).getEthertype().getValue()));break;case POP_PBB:sb.append(STR_PBB_POP);break;case EXPERIMENTER:sb.append(STR_EXPERIMENTER + "=" + Long.toString(((OFActionExperimenter)a).getExperimenter()));break;case GROUP:sb.append(STR_GROUP + "=" + Integer.toString(((OFActionGroup)a).getGroup().getGroupNumber()));break;case SET_FIELD:log.debug("Got Set-Field action. Setting " + ((OFActionSetField)a));if (((OFActionSetField)a).getField() instanceof OFOxmArpOp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_OPCODE+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmArpOp)((OFActionSetField)a).getField()).getValue().getOpcode()));} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSha) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_SHA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpSha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTha) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_DHA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpTha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSpa) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_SPA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpSpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTpa) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ARP_DPA+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmArpTpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdSll) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_SSL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdSll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTll) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_TTL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdTll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTarget) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_ND_TARGET+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6NdTarget)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthType) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_TYPE+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmEthType)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmEthSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmEthSrc)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmEthDst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanVid) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_VLAN+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmVlanVid)((OFActionSetField)a).getField()).getValue().getVlan()));} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanPcp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_DL_VLAN_PCP+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmVlanPcp)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Code) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMP_CODE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv4Code)((OFActionSetField)a).getField()).getValue().getCode()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Type) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMP_TYPE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv4Type)((OFActionSetField)a).getField()).getValue().getType()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Code) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMPV6_CODE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv6Code)((OFActionSetField)a).getField()).getValue().getRaw()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Type) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_ICMPV6_TYPE+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIcmpv6Type)((OFActionSetField)a).getField()).getValue().getRaw()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpProto) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_PROTO+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmIpProto)((OFActionSetField)a).getField()).getValue().getIpProtocolNumber()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Src) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv4Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Dst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv4Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Src) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_SRC+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Dst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_DST+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Flabel) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_IPV6_FLOW_LABEL+ MatchUtils.SET_FIELD_DELIM+ ((OFOxmIpv6Flabel)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpEcn) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_ECN+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmIpEcn)((OFActionSetField)a).getField()).getValue().getEcnValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmIpDscp) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_NW_DSCP+ MatchUtils.SET_FIELD_DELIM+ Byte.toString(((OFOxmIpDscp)((OFActionSetField)a).getField()).getValue().getDscpValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_TCP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmTcpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_TCP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmTcpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_UDP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmUdpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_UDP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmUdpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpSrc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_SCTP_SRC+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmSctpSrc)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpDst) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_SCTP_DST+ MatchUtils.SET_FIELD_DELIM+ Integer.toString(((OFOxmSctpDst)((OFActionSetField)a).getField()).getValue().getPort()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsLabel) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_MPLS_LABEL+ MatchUtils.SET_FIELD_DELIM+ Long.toString(((OFOxmMplsLabel)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsTc) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_MPLS_TC+ MatchUtils.SET_FIELD_DELIM+ Short.toString(((OFOxmMplsTc)((OFActionSetField)a).getField()).getValue().getValue()));} else if (((OFActionSetField)a).getField() instanceof OFOxmMetadata) {sb.append(STR_FIELD_SET + "=" + MatchUtils.STR_METADATA+ MatchUtils.SET_FIELD_DELIM+ Long.toString(((OFOxmMetadata)((OFActionSetField)a).getField()).getValue().getValue().getValue()));} else {log.error("Could not decode Set-Field action field: {}",((OFActionSetField)a));}break;default :log.error("Could not decode action: {}",a);break;}}return sb.toString();}  }
class C{  private void resetEclipseWorkingSetsBaseOnCurrentState(){  try {    if (getWorkbench() == null || getWorkbench().getWorkingSetManager() == null) {      return;    }    getWorkbench().getWorkingSetManager().removePropertyChangeListener(this);    deleteEclipseResourcesWorkingSets();    final IWorkingSetManager manager=getWorkbench().getWorkingSetManager();    for (    final WorkingSet workingSet : getAllWorkingSets()) {      if (!OTHERS_WORKING_SET_ID.equals(workingSet.getId())) {        org.eclipse.ui.internal.WorkingSet eclipseWorkingSet=createEclipseWorkingSet(workingSet);        eclipseWorkingSet.setId(WorkingSetManagerModificationStrategy.RESOURCE_WORKING_SET_ID);        manager.addWorkingSet(eclipseWorkingSet);      }    }  }  finally {    IWorkbench wb=getWorkbench();    if (wb != null) {      IWorkingSetManager wsm=wb.getWorkingSetManager();      if (wsm != null) {        wsm.addPropertyChangeListener(this);      }    }  }}  }
class C{  public void removeAuthenticationHeader(String callId){  this.authorizationHeaders.remove(callId);}  }
class C{  private final void backupValue(){  if (!m_isBackupValue) {    m_backupValue=get_ValueAsString(m_vo.ColumnName);    if (CLogMgt.isLevelFinest())     log.finest("Backup " + m_vo.WindowNo + "|"+ m_vo.ColumnName+ "="+ m_backupValue);    m_isBackupValue=true;  }}  }
class C{  public BKLogReadHandler(ZKLogMetadataForReader logMetadata,Optional<String> subscriberId,DistributedLogConfiguration conf,DynamicDistributedLogConfiguration dynConf,ZooKeeperClientBuilder zkcBuilder,BookKeeperClientBuilder bkcBuilder,LogSegmentMetadataStore metadataStore,OrderedScheduler scheduler,OrderedScheduler lockStateExecutor,OrderedScheduler readAheadExecutor,AlertStatsLogger alertStatsLogger,ReadAheadExceptionsLogger readAheadExceptionsLogger,StatsLogger statsLogger,StatsLogger perLogStatsLogger,String clientId,AsyncNotification notification,boolean isHandleForReading,boolean deserializeRecordSet){  super(logMetadata,conf,zkcBuilder,bkcBuilder,metadataStore,scheduler,statsLogger,alertStatsLogger,notification,LogSegmentFilter.DEFAULT_FILTER,clientId);  this.logMetadataForReader=logMetadata;  this.dynConf=dynConf;  this.readAheadExecutor=readAheadExecutor;  this.alertStatsLogger=alertStatsLogger;  this.perLogStatsLogger=isHandleForReading ? perLogStatsLogger : NullStatsLogger.INSTANCE;  this.handlerStatsLogger=BroadCastStatsLogger.masterslave(this.perLogStatsLogger,statsLogger);  this.readAheadExceptionsLogger=readAheadExceptionsLogger;  handleCache=LedgerHandleCache.newBuilder().bkc(this.bookKeeperClient).conf(conf).statsLogger(statsLogger).build();  readAheadCache=new ReadAheadCache(getFullyQualifiedName(),handlerStatsLogger,alertStatsLogger,notification,dynConf.getReadAheadMaxRecords(),deserializeRecordSet,conf.getTraceReadAheadDeliveryLatency(),conf.getDataLatencyWarnThresholdMillis(),Ticker.systemTicker());  this.subscriberId=subscriberId;  this.readLockPath=logMetadata.getReadLockPath(subscriberId);  this.lockStateExecutor=lockStateExecutor;  this.lockFactory=new ZKSessionLockFactory(zooKeeperClient,getLockClientId(),lockStateExecutor,conf.getZKNumRetries(),conf.getLockTimeoutMilliSeconds(),conf.getZKRetryBackoffStartMillis(),statsLogger.scope("read_lock"));  this.isHandleForReading=isHandleForReading;}  }
class C{  public static synchronized void publishClientStats(PoolImpl pool){  GemFireCacheImpl currentCache=GemFireCacheImpl.getInstance();  if (!initializeStatistics(currentCache)) {    return;  }  LogWriterI18n logger=currentCache.getLoggerI18n();  if (logger.fineEnabled())   logger.fine("Entering ClientStatsManager#publishClientStats...");  ClientHealthStats stats=getClientHealthStats(currentCache,pool);  try {    InternalDistributedSystem ds=(InternalDistributedSystem)currentCache.getDistributedSystem();    ServerRegionProxy regionProxy=new ServerRegionProxy(ClientHealthMonitoringRegion.ADMIN_REGION_NAME,pool);    EventID eventId=new EventID(ds);    @Released EntryEventImpl event=new EntryEventImpl((Object)null);    try {      event.setEventId(eventId);      regionProxy.putForMetaRegion(ds.getMemberId(),stats,null,event,null,true);    }  finally {      event.release();    }  } catch (  DistributedSystemDisconnectedException e) {    throw e;  }catch (  CacheWriterException cwx) {    pool.getCancelCriterion().checkCancelInProgress(cwx);    currentCache.getCancelCriterion().checkCancelInProgress(cwx);    logger.warning(LocalizedStrings.ClientStatsManager_FAILED_TO_SEND_CLIENT_HEALTH_STATS_TO_CACHESERVER,cwx);  }catch (  Exception e) {    pool.getCancelCriterion().checkCancelInProgress(e);    currentCache.getCancelCriterion().checkCancelInProgress(e);    logger.info(LocalizedStrings.ClientStatsManager_FAILED_TO_PUBLISH_CLIENT_STATISTICS,e);  }  if (logger.fineEnabled())   logger.fine("Exiting ClientStatsManager#publishClientStats.");}  }
class C{  private void initValue(final int type,final String value){switch (type) {case IOperandTree.NODE_TYPE_SYMBOL_ID:    expressionType=ExpressionType.SYMBOL;  expressionValue=value;break;case IOperandTree.NODE_TYPE_IMMEDIATE_INT_ID:expressionType=ExpressionType.IMMEDIATE_INTEGER;expressionValue=value;break;case IOperandTree.NODE_TYPE_IMMEDIATE_FLOAT_ID:expressionType=ExpressionType.IMMEDIATE_FLOAT;expressionValue=value;break;case IOperandTree.NODE_TYPE_OPERATOR_ID:if (value.equals("{")) {expressionType=ExpressionType.EXPRESSION_LIST;expressionValue=value;} else {expressionType=ExpressionType.OPERATOR;expressionValue=value;}break;case IOperandTree.NODE_TYPE_REGISTER_ID:expressionType=ExpressionType.REGISTER;expressionValue=value;break;case IOperandTree.NODE_TYPE_SIZE_PREFIX_ID:if (value.equals("b1")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="byte";} else if (value.equals("b2")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="word";} else if (value.equals("b4") || value.equals("dword")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="dword";} else if (value.equals("b6")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="fword";} else if (value.equals("b8")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="qword";} else if (value.equals("b10")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="double";} else if (value.equals("b16")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="oword";} else if (value.equals("b_var")) {expressionType=ExpressionType.SIZE_PREFIX;expressionValue="b_var";}break;case IOperandTree.NODE_TYPE_DEREFERENCE_ID:expressionType=ExpressionType.MEMDEREF;expressionValue=value;break;default :throw new IllegalStateException(String.format("IE00219: Unknown node type (%d : %s)",type,value));}}  }
class C{  public void addPair(String var,boolean val){  map.put(var,ValueFactory.create(val));  cachedHash=0;}  }
class C{  private void init(){  try {    this.featureSource=ShapeFileReader.readDataFile(this.shapeFile);    SimpleFeatureIterator fIt=this.featureSource.getFeatures().features();    while (fIt.hasNext()) {      SimpleFeature ft=fIt.next();      for (int i=0; i < ((Geometry)ft.getDefaultGeometry()).getNumGeometries(); i++) {        Geometry geometry=((Geometry)ft.getDefaultGeometry()).getGeometryN(i);        if (geometry instanceof Polygon) {          Polygon poly=(Polygon)geometry;          this.polygonCountMap.put(poly,new Integer(0));          this.polyNameMap.put(poly,(String)ft.getAttribute("Bezirk"));        }      }    }  } catch (  IOException e) {    e.printStackTrace();  }  this.initDone=true;}  }
class C{  public boolean validate(){  outputFile=new File(outputPath);  if (outputFile.exists() || outputFile.isDirectory()) {    invalidMessage="Output file already exists.";    return valid=false;  }  if (!signMode) {    keyFile=new File(keyFilePath);    if (!keyFile.exists() || keyFile.isDirectory()) {      invalidMessage="Key file not found.";      return valid=false;    }  }  return valid=true;}  }
class C{  private ExprKraken parseAndExpr(){  AndExpr andExpr=new AndExpr();  andExpr.add(parseNotExpr());  while (true) {    Token token=scanToken();switch (token) {case AND:      andExpr.add(parseNotExpr());    break;default :  _token=token;return andExpr.getSingleExpr();}}}  }
class C{  public InstanceJoiner(){  listeners=new Vector<InstanceListener>();  m_InputFormat=null;  m_OutputInstance=null;  b_Debug=false;  b_FirstInputFinished=false;}  }
class C{  @SuppressWarnings("unchecked") @Override public <T>T deserialize(byte[] data,Class<T> clazz){  try {    JAXBContext context=JAXBContext.newInstance(clazz);    Unmarshaller m=context.createUnmarshaller();    Object o=m.unmarshal(new ByteArrayInputStream(data));    return (T)o;  } catch (  JAXBException e) {    e.printStackTrace();  }  return null;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  parseName();  parseActions();}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  void tick(){  m1Rate.tick();  m5Rate.tick();  m15Rate.tick();}  }
class C{  public ChartChangeEvent(Object source,JFreeChart chart,ChartChangeEventType type){  super(source);  this.chart=chart;  this.type=type;}  }
class C{  public void addProperties(PropertyTable properties){  if (properties == null) {    return;  }  for (  Entry<String,String> property : properties.entrySet()) {    String key=property.getKey();    String value=property.getValue();    this.properties.put(key,value);  }}  }
class C{  public BooleanQueryResultHandlerException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public NoDuplicateValueGlobalConstraint(List<? extends AbstractParameter<?,?>> parameters){  this.parameters=parameters;}  }
class C{  public static void retrieveHitbox(Actor actor,Rectangle rectangle){  tempPosition.x=0;  tempPosition.y=0;  actor.localToStageCoordinates(tempPosition);  rectangle.x=tempPosition.x;  rectangle.y=tempPosition.y;  rectangle.width=actor.getWidth();  rectangle.height=actor.getHeight();}  }
class C{  public void addIssue(int reason,EObject obj,int featureId){  issues.add(new TransformationIssue(reason,obj,featureId,null));}  }
class C{  public static void loadCache(){  reset();  if (cacheFile == null) {    if (logger.isTraceEnabled())     logger.trace("Aborting loadCache() as cache folder not set");    return;  }  if (!cacheFile.exists()) {    if (logger.isDebugEnabled())     logger.debug("Exiting loadCache() as cache file not present");    return;  }  ObjectInputStream os=null;  FileInputStream fs=null;  BufferedInputStream bs=null;  long loadedCount=0;  try {    if (logger.isDebugEnabled())     logger.debug("STARTED Loading CRC cache from file " + cacheFile.getPath());    fs=new FileInputStream(cacheFile);    assert fs != null : "loadCache: fs should never be null at this point";    bs=new BufferedInputStream(fs,512 * 1024);    assert bs != null : "loadCache: bs should never be null at this point";    os=new ObjectInputStream(bs);    assert os != null : "loadCache: os should never be null at this point";  } catch (  IOException e) {    logger.warn("loadCache: Aborting as cache file failed to open");    return;  }  CachedFile cf;  try {    for (; ; ) {      cf=(CachedFile)os.readObject();      String path=cf.getPath();      if (logger.isTraceEnabled())       logger.trace("Loaded cached object " + path);      loadedCount++;      CachedFile cf2=inCache(cf);      if (cf2 == null) {        addCachedFile(cf);        cf.clearCacheValidated();        cf.setChanged(true);        if (logger.isTraceEnabled())         logger.trace("added entry to cache");      } else {        if (logger.isDebugEnabled())         logger.debug("Entry already in cache - ignore cached entry for now");      }    }  } catch (  ClassNotFoundException cnfe) {    logger.warn("Cache file not loaded +\n" + cnfe);  }catch (  java.io.InvalidClassException ic) {    if (logger.isDebugEnabled())     logger.debug("Cache ignored as CachedFile class changed since it was created");  }catch (  java.io.EOFException io) {    if (logger.isTraceEnabled())     logger.trace("End of Cache file encountered");  }catch (  IOException e) {    logger.warn("Exception trying to read cache: " + e);  }catch (  Exception e) {    logger.warn("Cache file not loaded +\n" + e);  } finally {    try {      if (os != null)       os.close();      if (bs != null)       bs.close();      if (fs != null)       fs.close();    } catch (    Exception e) {    }  }  if (logger.isDebugEnabled()) {    logger.debug("Cache Entries Loaded: " + loadedCount);    logger.debug("COMPLETED Loading CRC cache from file " + cacheFile.getPath());  }}  }
class C{  public DotSpan(float radius){  this.radius=radius;  this.color=0;}  }
class C{  protected void checkCancelled() throws ProgressThreadStoppedException {  if (cancelled) {    throw new ProgressThreadStoppedException();  }}  }
class C{  public void init(RemoteAuthenticatedUser user,ModeledConnectionGroup balancingGroup,ModeledConnection connection){  init(user,balancingGroup,connection,null);}  }
class C{  public static void mergeArrayIntoCollection(Object array,Collection collection){  if (collection == null) {    throw new IllegalArgumentException("Collection must not be null");  }  Object[] arr=ObjectUtils.toObjectArray(array);  for (int i=0; i < arr.length; i++) {    collection.add(arr[i]);  }}  }
class C{  public static int flippedIfOpcode(final int opcode){switch (opcode) {case RegOps.IF_EQ:case RegOps.IF_NE:    return opcode;case RegOps.IF_LT:  return RegOps.IF_GT;case RegOps.IF_GE:return RegOps.IF_LE;case RegOps.IF_LE:return RegOps.IF_GE;case RegOps.IF_GT:return RegOps.IF_LT;default :throw new RuntimeException("Unrecognized IF regop: " + opcode);}}  }
class C{  public SimpleQueryStringBuilder field(String field,float boost){  this.fields.put(field,boost);  return this;}  }
class C{  public synchronized void addVertex(Vertex vertex){  if (vertex.getId() != null) {    if (nextId <= vertex.getId().longValue()) {      nextId=vertex.getId().longValue() + 1;    }    getVerticiesById().put(vertex.getId(),vertex);  }  if (vertex.getData() != null) {    getVerticiesByData().put(vertex.getData(),vertex);  }  getVerticies().add(vertex);  ((BasicVertex)vertex).setNetwork(this);}  }
class C{  protected void onQueryComplete(int token,Object cookie,Cursor cursor){  if (localLOGV) {    Log.d(TAG,"########## default onQueryComplete");  }}  }
class C{  private void validityCheck(){  if (DEBUG && VM.VerifyAssertions) {    for (int i=0; i < map.length; i++) {      VM._assert(map[i] == 0 || cmids[map[i]] == i);    }    for (int i=1; i < nextIndex; i++) {      VM._assert(map[cmids[i]] == i);    }    for (int i=2; i < nextIndex; i++) {      VM._assert(counts[i] <= counts[i / 2]);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentType doc1Type;  NamedNodeMap notationList;  Notation notation;  Notation aNode;  Document ownerDocument;  DocumentType docType;  String system;  String publicVal;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  doc1Type=aNewDoc.getDoctype();  notationList=doc1Type.getNotations();  assertNotNull("notationsNotNull",notationList);  notation=(Notation)notationList.getNamedItem("notation1");  aNode=(Notation)doc.importNode(notation,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  publicVal=aNode.getPublicId();  assertEquals("publicId","notation1File",publicVal);  system=aNode.getSystemId();  assertNull("notationSystemId",system);}  }
class C{  public Map<Integer,TestTable1> selectToMap(String whereStatement,Object... args){  List<TestTable1> list=super.select(whereStatement,args);  Map<Integer,TestTable1> m=new LinkedHashMap<Integer,TestTable1>();  for (  TestTable1 x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  public boolean isVulnerable(Context context) throws Exception {  String entryName="test_file_name1";  String tmpName="test_file_name2";  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();  ZipOutputStream out=new ZipOutputStream(bytesOut);  ZipEntry ze1=new ZipEntry(tmpName);  out.putNextEntry(ze1);  out.closeEntry();  ZipEntry ze2=new ZipEntry(entryName);  out.putNextEntry(ze2);  out.closeEntry();  out.close();  byte[] buf=bytesOut.toByteArray();  replaceBytes(tmpName.getBytes(),entryName.getBytes(),buf);  File outputDir=context.getCacheDir();  File badZip=File.createTempFile("prefix","extension",outputDir);  badZip.deleteOnExit();  FileOutputStream outstream=new FileOutputStream(badZip);  outstream.write(buf);  outstream.close();  try (ZipFile bad=new ZipFile(badZip)){    return true;  } catch (  ZipException expected) {    if (expected.getMessage().contains("Duplicate entry name"))     return false; else     throw expected;  }}  }
class C{  private void retainOldRowIfPossible(int nodeIndex,int rowIndex,DirichletBayesIm oldBayesIm,double symmetricAlpha){  int oldNodeIndex=getCorrespondingNodeIndex(nodeIndex,oldBayesIm);  if (oldNodeIndex == -1) {    overwriteRow(nodeIndex,rowIndex,symmetricAlpha);  } else   if (getNumColumns(nodeIndex) != oldBayesIm.getNumColumns(oldNodeIndex)) {    overwriteRow(nodeIndex,rowIndex,symmetricAlpha);  } else {    int oldRowIndex=getUniqueCompatibleOldRow(nodeIndex,rowIndex,oldBayesIm);    if (oldRowIndex >= 0) {      copyValuesFromOldToNew(oldNodeIndex,oldRowIndex,nodeIndex,rowIndex,oldBayesIm);    } else {      overwriteRow(nodeIndex,rowIndex,symmetricAlpha);    }  }}  }
class C{  @Override public synchronized int lastIndexOf(Object object){  return lastIndexOf(object,elementCount - 1);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMViewElement(prefix,(AbstractDocument)doc);}  }
class C{  @Override protected String doExportAggregated(List<EvaluationStatistics> stats){  String result;  List<String> classifiers;  List<String> relations;  List<Number> measurements;  FileWriter fwriter;  BufferedWriter bwriter;  int i;  result=null;  classifiers=EvaluationStatisticsUtils.commandLines(stats,true);  relations=EvaluationStatisticsUtils.relations(stats,true);  fwriter=null;  bwriter=null;  try {    fwriter=new FileWriter(m_File);    bwriter=new BufferedWriter(fwriter);    bwriter.write(m_Measurement);    for (i=0; i < classifiers.size(); i++) {      bwriter.write("\t");      bwriter.write("[" + (i + 1) + "]");    }    bwriter.newLine();    bwriter.flush();    for (    String relation : relations) {      bwriter.write(relation);      for (i=0; i < classifiers.size(); i++) {        bwriter.write("\t");        measurements=EvaluationStatisticsUtils.measurements(stats,classifiers.get(i),relation,m_Measurement);        if (measurements.size() > 0) {          if (measurements.size() > 1)           log("Found " + measurements.size() + " measurements for combination "+ classifiers.get(i)+ "/"+ relation);          bwriter.write("" + measurements.get(0));        }      }      bwriter.newLine();      bwriter.flush();    }    bwriter.newLine();    bwriter.write("Index");    bwriter.write("\t");    bwriter.write("Classifier");    bwriter.newLine();    for (i=0; i < classifiers.size(); i++) {      bwriter.write("[" + (i + 1) + "]");      bwriter.write("\t");      bwriter.write(classifiers.get(i));      bwriter.newLine();    }  } catch (  Exception e) {    result=handleException("Failed to export statistics to: " + m_File,e);  } finally {    FileUtils.closeQuietly(bwriter);    FileUtils.closeQuietly(fwriter);  }  return result;}  }
class C{  protected void resetLocation(int endOffset,int g1){  if (undoLocation != endOffset) {    this.rec.index=undoLocation;  } else {    this.rec.index=g1;  }}  }
class C{  public URLBlobStore(Settings settings,URL path){  super(settings);  this.path=path;  this.bufferSizeInBytes=(int)settings.getAsBytesSize("repositories.uri.buffer_size",new ByteSizeValue(100,ByteSizeUnit.KB)).bytes();}  }
class C{  private void inlineDefinitions(List<ObjectType> definitions,String uniquePrefix,MarkupDocBuilder docBuilder){  if (CollectionUtils.isNotEmpty(definitions)) {    for (    ObjectType definition : definitions) {      addInlineDefinitionTitle(definition.getName(),definition.getUniqueName(),docBuilder);      List<ObjectType> localDefinitions=buildPropertiesTable(definition.getProperties(),uniquePrefix,new DefinitionDocumentResolverFromOperation(),docBuilder);      for (      ObjectType localDefinition : localDefinitions)       inlineDefinitions(Collections.singletonList(localDefinition),localDefinition.getUniqueName(),docBuilder);    }  }}  }
class C{  private void reverseLookUp(LinkedList<NextWord> terminalNodes,final WordCallback callback){  Node node;  int freq;  for (  NextWord nextWord : terminalNodes) {    node=nextWord.word;    freq=nextWord.frequency;    if (freq >= UserBigramDictionary.SUGGEST_THRESHOLD) {      sb.setLength(0);      do {        sb.insert(0,node.code);        node=node.parent;      } while (node != null);      callback.addWord(sb.toString().toCharArray(),0,sb.length(),freq,mDicTypeId,DataType.BIGRAM);    }  }}  }
class C{  protected DataAttribute(){  this(true);}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  double x=dataset.getXValue(series,item);  double y=dataset.getYValue(series,item);  double dx=0.0;  double dy=0.0;  if (dataset instanceof VectorXYDataset) {    dx=((VectorXYDataset)dataset).getVectorXValue(series,item);    dy=((VectorXYDataset)dataset).getVectorYValue(series,item);  }  double xx0=domainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());  double yy0=rangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());  double xx1=domainAxis.valueToJava2D(x + dx,dataArea,plot.getDomainAxisEdge());  double yy1=rangeAxis.valueToJava2D(y + dy,dataArea,plot.getRangeAxisEdge());  Line2D line;  PlotOrientation orientation=plot.getOrientation();  if (orientation.equals(PlotOrientation.HORIZONTAL)) {    line=new Line2D.Double(yy0,xx0,yy1,xx1);  } else {    line=new Line2D.Double(xx0,yy0,xx1,yy1);  }  g2.setPaint(getItemPaint(series,item));  g2.setStroke(getItemStroke(series,item));  g2.draw(line);  double dxx=(xx1 - xx0);  double dyy=(yy1 - yy0);  double bx=xx0 + (1.0 - this.baseLength) * dxx;  double by=yy0 + (1.0 - this.baseLength) * dyy;  double cx=xx0 + (1.0 - this.headLength) * dxx;  double cy=yy0 + (1.0 - this.headLength) * dyy;  double angle=0.0;  if (dxx != 0.0) {    angle=Math.PI / 2.0 - Math.atan(dyy / dxx);  }  double deltaX=2.0 * Math.cos(angle);  double deltaY=2.0 * Math.sin(angle);  double leftx=cx + deltaX;  double lefty=cy - deltaY;  double rightx=cx - deltaX;  double righty=cy + deltaY;  GeneralPath p=new GeneralPath();  if (orientation == PlotOrientation.VERTICAL) {    p.moveTo((float)xx1,(float)yy1);    p.lineTo((float)rightx,(float)righty);    p.lineTo((float)bx,(float)by);    p.lineTo((float)leftx,(float)lefty);  } else {    p.moveTo((float)yy1,(float)xx1);    p.lineTo((float)righty,(float)rightx);    p.lineTo((float)by,(float)bx);    p.lineTo((float)lefty,(float)leftx);  }  p.closePath();  g2.draw(p);  EntityCollection entities;  if (info != null) {    entities=info.getOwner().getEntityCollection();    if (entities != null) {      addEntity(entities,line.getBounds(),dataset,series,item,0.0,0.0);    }  }}  }
class C{  public static UUID onIgniteUuidRead(UUID id){  UUID cached=cache.get(id);  if (cached == null) {    UUID old=cache.putIfAbsent(id,cached=id);    if (old != null)     cached=old;  }  return cached;}  }
class C{  public Enricher createEnricher(){  EnricherImpl enricher=new EnricherImpl();  return enricher;}  }
class C{  public final int size(){  return size;}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static URL makeURL(Object path){  try {    URI uri=makeURI(path);    return uri != null ? uri.toURL() : null;  } catch (  Exception e) {    return null;  }}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public static void printTablePretty(final String tableName,final Configuration config,final IteratorSetting... settings) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, IOException {  printTablePretty(tableName,config,true,settings);}  }
class C{  public PositionComponent(Point2D position){  this(position.getX(),position.getY());}  }
class C{  private void dumpBody(Part p) throws Exception {  printOut("=================================================================");  printOut("CONTENT-TYPE: " + p.getContentType());  if (p.isMimeType("text/plain")) {    printOut("Plain text ---------------------------");    System.out.println((String)p.getContent());  } else   if (p.getContentType().toUpperCase().startsWith("TEXT")) {    printOut("Other text ---------------------------");    System.out.println((String)p.getContent());  } else   if (p.isMimeType("multipart/*")) {    printOut("Multipart ---------------------------");    Multipart mp=(Multipart)p.getContent();    int count=mp.getCount();    for (int i=0; i < count; i++)     dumpBody(mp.getBodyPart(i));  } else   if (p.isMimeType("message/rfc822")) {    printOut("Nested ---------------------------");    dumpBody((Part)p.getContent());  } else {    Object o=p.getContent();    if (o instanceof String) {      printOut("This is a string ---------------------------");      System.out.println((String)o);    } else     if (o instanceof InputStream) {      printOut("This is just an input stream ---------------------------");      InputStream is=(InputStream)o;      int c;      while ((c=is.read()) != -1)       System.out.write(c);    } else {      printOut("This is an unknown type ---------------------------");      printOut(o.toString());    }  }  printOut("=================================================================");}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  @Override public void updateNCharacterStream(int columnIndex,Reader x) throws SQLException {  updateNCharacterStream(columnIndex,x,-1);}  }
class C{  public JcaX509v3CertificateBuilder(X500Name issuer,BigInteger serial,Date notBefore,Date notAfter,X500Name subject,PublicKey publicKey){  super(issuer,serial,notBefore,notAfter,subject,SubjectPublicKeyInfo.getInstance(publicKey.getEncoded()));}  }
class C{  private void reset(){  this.vertexCount=0;  TmtTessellator.byteBuffer.clear();  this.rawBufferIndex=0;  this.addedVertices=0;}  }
class C{  public boolean hasBatchId(){  return hasExtension(BatchId.class);}  }
class C{  private void readFileFirst(File file){  String line;  try (InputStream fis=new FileInputStream(file);InputStreamReader isr=new InputStreamReader(fis,Charset.forName("UTF-8"));BufferedReader br=new BufferedReader(isr)){    while ((line=br.readLine()) != null) {      CustomLogger.log(line);    }  } catch (  FileNotFoundException e) {    CustomLogger.logError("FileNotFoundException",e);  }catch (  IOException e) {    CustomLogger.logError("IOException",e);  }}  }
class C{  public T id(String value){  return attr("id",value);}  }
class C{  byte[] protect(PrivateKey key) throws Exception {  byte[] salt=new byte[8];  SunJCE.getRandom().nextBytes(salt);  PBEParameterSpec pbeSpec=new PBEParameterSpec(salt,20);  PBEKeySpec pbeKeySpec=new PBEKeySpec(this.password);  SecretKey sKey=new PBEKey(pbeKeySpec,"PBEWithMD5AndTripleDES");  pbeKeySpec.clearPassword();  PBEWithMD5AndTripleDESCipher cipher;  cipher=new PBEWithMD5AndTripleDESCipher();  cipher.engineInit(Cipher.ENCRYPT_MODE,sKey,pbeSpec,null);  byte[] plain=key.getEncoded();  byte[] encrKey=cipher.engineDoFinal(plain,0,plain.length);  AlgorithmParameters pbeParams=AlgorithmParameters.getInstance("PBE",SunJCE.getInstance());  pbeParams.init(pbeSpec);  AlgorithmId encrAlg=new AlgorithmId(new ObjectIdentifier(PBE_WITH_MD5_AND_DES3_CBC_OID),pbeParams);  return new EncryptedPrivateKeyInfo(encrAlg,encrKey).getEncoded();}  }
class C{  public AddValuesTest(String name){  super(name);}  }
class C{  private void generate(MembershipAttributes ra) throws SAXException {  Set roles=ra.getRequiredRoles();  String laction=ra.getLossAction().toString().toLowerCase().replace('_','-');  String raction=ra.getResumptionAction().toString().toLowerCase().replace('_','-');  AttributesImpl raAtts=new AttributesImpl();  raAtts.addAttribute("","",LOSS_ACTION,"",laction);  raAtts.addAttribute("","",RESUMPTION_ACTION,"",raction);  handler.startElement("",MEMBERSHIP_ATTRIBUTES,MEMBERSHIP_ATTRIBUTES,raAtts);  for (Iterator iter=roles.iterator(); iter.hasNext(); ) {    Role role=(Role)iter.next();    AttributesImpl roleAtts=new AttributesImpl();    roleAtts.addAttribute("","",NAME,"",role.getName());    handler.startElement("",REQUIRED_ROLE,REQUIRED_ROLE,roleAtts);    handler.endElement("",REQUIRED_ROLE,REQUIRED_ROLE);  }  handler.endElement("",MEMBERSHIP_ATTRIBUTES,MEMBERSHIP_ATTRIBUTES);}  }
class C{  protected boolean testPort(InetAddress host,int port,boolean shouldBeUsed){  System.out.println("testPort[" + host.getHostAddress() + ", "+ port+ "]");  Socket pingSocket=null;  try {    pingSocket=new Socket(host,port);  } catch (  Exception e) {    if (shouldBeUsed)     log.warning("Open Socket " + host + ":"+ port+ " - "+ e.getMessage()); else     log.fine(host + ":" + port+ " - "+ e.getMessage());    return false;  }  if (!shouldBeUsed)   log.warning("Open Socket " + host + ":"+ port+ " - "+ pingSocket);  log.fine(host + ":" + port+ " - "+ pingSocket);  if (pingSocket == null)   return false;  try {    pingSocket.close();  } catch (  IOException e) {    log.warning("close socket=" + e.toString());  }  return true;}  }
class C{  public boolean isIncrementalBuild(){  return incrementalBuild;}  }
class C{  private void initData(Context context){  gestureDetector=new GestureDetector(context,gestureListener);  gestureDetector.setIsLongpressEnabled(false);  scroller=new Scroller(context);}  }
class C{  private void drawResultPoints(Bitmap barcode,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(fakeR.getId("color","result_points")));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1]);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1]);      drawLine(canvas,paint,points[2],points[3]);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        canvas.drawPoint(point.getX(),point.getY(),paint);      }    }  }}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void triggerJob(JobKey jobKey,JobDataMap data) throws SchedulerException {  sched.triggerJob(jobKey,data);}  }
class C{  public void saveResult(){  String attackName="DOS";  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd_HHmm");  Date resultdate=new Date(attackModel.getTsAttackStop());  String dateString=sdf.format(resultdate);  String filenameUntampered=dateString + "_" + attackName+ "_untamperedRequests.csv";  String filenameTampered=dateString + "_" + attackName+ "_tamperedRequests.csv";  String filenameTestprobe=dateString + "_" + attackName+ "_testprobeRequests.csv";  String filenameMetadata=dateString + "_" + attackName+ "_metaData.txt";  String filenameImgGraph=dateString + "_" + attackName+ "_graph.png";  String filenameReport=dateString + "_" + attackName+ "_results.html";  String filenameZip=dateString + "_" + attackName+ "_results.zip";  String property="java.io.tmpdir";  String tempDir=System.getProperty(property);  File resultDir=new File(tempDir + "/wsattackerdos");  if (!resultDir.exists()) {    resultDir.mkdir();  }  File file=new File(tempDir + "/wsattackerdos/" + dateString);  file.mkdir();  String fullPath=file.getAbsolutePath();  try {    File untamperedRequests=new File(fullPath,filenameUntampered);    saveResponseTimeOfUntamperedRequests(untamperedRequests);    File tamperedRequests=new File(fullPath,filenameTampered);    saveResponseTimeOfTamperedRequests(tamperedRequests);    File testRequests=new File(fullPath,filenameTestprobe);    saveResponseTimeOfTestRequests(testRequests);    File metadata=new File(fullPath,filenameMetadata);    saveMetadata(metadata);    saveFilelocationToReport(dateString,filenameUntampered,filenameTampered,filenameTestprobe,filenameMetadata,filenameImgGraph,filenameReport,filenameZip,fullPath);  } catch (  IOException e) {    e.printStackTrace();  }  URL inputUrl;  inputUrl=getClass().getResource("/IMG/ok.jpg");  File dest=new File(fullPath + "/ok.jpg");  try {    FileUtils.copyURLToFile(inputUrl,dest);  } catch (  IOException e) {    e.printStackTrace();  }  try {    ChartObject chartObject=new ChartObject(attackModel);    JFreeChart chart=chartObject.createOverlaidChart();    ChartUtilities.saveChartAsPNG(new File(fullPath + filenameImgGraph),chart,900,700);  } catch (  IOException e) {    e.printStackTrace();  }  Zip.createZip(fullPath,filenameZip);  this.setFullPath(fullPath);  this.setFilenameReport(filenameReport);}  }
class C{  private void safeDamageRange(int a0,int a1) throws BadLocationException {  Document doc=component.getDocument();  safeDamageRange(doc.createPosition(a0),doc.createPosition(a1));}  }
class C{  public NewScatterPlotAction(final Workspace workspace){  super("Scatter Plot",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("ScatterIcon.png"));  putValue(SHORT_DESCRIPTION,"New Scatter Plot");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.VIRTUAL_BASE_TYPE__DECLARED_OWNED_MEMBERS:    return declaredOwnedMembers != null && !declaredOwnedMembers.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private boolean nullableEquals(Object o1,Object o2){  if (o1 == null || o2 == null) {    return false;  }  return o1.equals(o2);}  }
class C{  private boolean conditionCH1(String value,int index){  return ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index - 2,6,"ORCHES","ARCHIT","ORCHID") || contains(value,index + 2,1,"T","S")|| ((contains(value,index - 1,1,"A","O","U","E") || index == 0) && (contains(value,index + 2,1,L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));}  }
class C{  public static int createHash(String val,MessageDigest digestFunction){  return createHash(val,charset,digestFunction);}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  protected void addOperatorPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NumericalMultiplyDivideExpression_operator_feature"),getString("_UI_PropertyDescriptor_description","_UI_NumericalMultiplyDivideExpression_operator_feature","_UI_NumericalMultiplyDivideExpression_type"),ExpressionsPackage.Literals.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__OPERATOR,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.UNARY_EXPRESSION__OP:    return getOp();case N4JSPackage.UNARY_EXPRESSION__EXPRESSION:  return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Map<String,Object> finalizeOrderEntryOptions(int shipGroupIndex,String shippingMethod,String shippingInstructions,String maySplit,String giftMessage,String isGift,String internalCode,String shipBeforeDate,String shipAfterDate,String orderAdditionalEmails){  this.cart.setOrderAdditionalEmails(orderAdditionalEmails);  return finalizeOrderEntryOptions(shipGroupIndex,shippingMethod,shippingInstructions,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate,null,null);}  }
class C{  private Object invokeClickMethod(Object handler,String methodName,Object... params){  if (handler == null)   return null;  Method method=null;  try {    method=handler.getClass().getDeclaredMethod(methodName,View.class);    if (method != null)     return method.invoke(handler,params); else     throw new AbAppException("no such method:" + methodName);  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public void runInApplicationThread(Runnable r){  mApplicationHandler.post(r);}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  static void validateDsData(Set<DelegationSignerData> dsData) throws EppException {  if (dsData != null && dsData.size() > MAX_DS_RECORDS_PER_DOMAIN) {    throw new TooManyDsRecordsException(String.format("A maximum of %s DS records are allowed per domain.",MAX_DS_RECORDS_PER_DOMAIN));  }}  }
class C{  public static void addProvider(final SerialInterfaceProvider provider){  if (API.serialAPI != null)   API.serialAPI.addProvider(provider);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:43.718 -0500",hash_original_method="B1833CAE05CF94C17F526310C03CDC81",hash_generated_method="4062AC33E6E6F5A61EE3E47E82302200") public void fillInNotifierBundle(Bundle m){  m.putInt("lac",mLac);  m.putInt("cid",mCid);  m.putInt("psc",mPsc);}  }
class C{  public String toString(){  String s;  s=super.toString() + "PolicyConstraints: [" + "  Require: ";  if (require == -1)   s+="unspecified;"; else   s+=require + ";";  s+="\tInhibit: ";  if (inhibit == -1)   s+="unspecified"; else   s+=inhibit;  s+=" ]\n";  return s;}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public synchronized boolean addEdit(UndoableEdit anEdit){  boolean retVal;  trimEdits(indexOfNextAdd,edits.size() - 1);  retVal=super.addEdit(anEdit);  if (inProgress) {    retVal=true;  }  indexOfNextAdd=edits.size();  trimForLimit();  return retVal;}  }
class C{  public void addStaticTypeError(final String msg,final ASTNode expr){  typeCheckingVisitor.addStaticTypeError(msg,expr);}  }
class C{  protected Collection<Set<V>> cluster_internal(V origin,int num_clusters){  ArrayList<V> v_array=new ArrayList<V>(g.getVertices());  LinkedList<Set<V>> candidates=new LinkedList<Set<V>>();  for (int j=0; j < num_candidates; j++) {    V source;    if (origin == null)     source=v_array.get((int)(rand.nextDouble() * v_array.size())); else     source=origin;    V target=null;    do {      target=v_array.get((int)(rand.nextDouble() * v_array.size()));    } while (source == target);    VoltageScorer<V,E> vs=new VoltageScorer<V,E>(g,source,target);    vs.evaluate();    Map<V,double[]> voltage_ranks=new HashMap<V,double[]>();    for (    V v : g.getVertices())     voltage_ranks.put(v,new double[]{vs.getVertexScore(v)});    addTwoCandidateClusters(candidates,voltage_ranks);  }  Collection<Set<V>> clusters=new LinkedList<Set<V>>();  Set<V> remaining=new HashSet<V>(g.getVertices());  List<V> seed_candidates=getSeedCandidates(candidates);  int seed_index=0;  for (int j=0; j < (num_clusters - 1); j++) {    if (remaining.isEmpty())     break;    V seed;    if (seed_index == 0 && origin != null)     seed=origin; else {      do {        seed=seed_candidates.get(seed_index++);      } while (!remaining.contains(seed));    }    Map<V,double[]> occur_counts=getObjectCounts(candidates,seed);    if (occur_counts.size() < 2)     break;    try {      Collection<Map<V,double[]>> high_low=kmc.cluster(occur_counts,2);      Iterator<Map<V,double[]>> h_iter=high_low.iterator();      Map<V,double[]> cluster1=h_iter.next();      Map<V,double[]> cluster2=h_iter.next();      double[] centroid1=DiscreteDistribution.mean(cluster1.values());      double[] centroid2=DiscreteDistribution.mean(cluster2.values());      Set<V> new_cluster;      if (centroid1[0] >= centroid2[0])       new_cluster=cluster1.keySet(); else       new_cluster=cluster2.keySet();      for (      Set<V> cluster : candidates)       cluster.removeAll(new_cluster);      clusters.add(new_cluster);      remaining.removeAll(new_cluster);    } catch (    NotEnoughClustersException nece) {      break;    }  }  if (!remaining.isEmpty())   clusters.add(remaining);  return clusters;}  }
class C{  public boolean engineCanResolveURI(ResourceResolverContext context){  if (context.uriToResolve == null) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"quick fail, uri == null");    }    return false;  }  if (context.uriToResolve.equals("") || (context.uriToResolve.charAt(0) == '#')) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"quick fail for empty URIs and local ones");    }    return false;  }  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"I was asked whether I can resolve " + context.uriToResolve);  }  if (context.uriToResolve.startsWith("http:") || (context.baseUri != null && context.baseUri.startsWith("http:"))) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"I state that I can resolve " + context.uriToResolve);    }    return true;  }  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"I state that I can't resolve " + context.uriToResolve);  }  return false;}  }
class C{  private void applyAnnotations(FacesContext ctx,Class<?> targetClass,ProcessingTarget processingTarget,Object... params){  Map<Class<? extends Annotation>,RuntimeAnnotationHandler> map=getHandlerMap(targetClass,processingTarget);  if (map != null && !map.isEmpty()) {    for (    RuntimeAnnotationHandler handler : map.values()) {      handler.apply(ctx,params);    }  }}  }
class C{  public static CachedDeserializable create(byte[] v){  if (STORE_ALL_VALUE_FORMS) {    return new StoreAllCachedDeserializable(v);  } else   if (PREFER_DESERIALIZED) {    if (isPdxEncoded(v) && cachePrefersPdx()) {      return new PreferBytesCachedDeserializable(v);    } else {      return new VMCachedDeserializable(v);    }  } else {    return new PreferBytesCachedDeserializable(v);  }}  }
class C{  public Builder addPlugin(CameraPlugin plugin){  plugin.validate(session);  session.plugins.add(plugin);  return (this);}  }
class C{  String rrToString(){  return unknownToString(data);}  }
class C{  private boolean isFullyIncluded(File dir){  for (  File offspring : deselected) {    if (FileUtils.isAncestor(dir,offspring)) {      return false;    }  }  return true;}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index,int size){  this.changeBufferData(bufferInfo,newData,index,size,false);}  }
class C{  void clearAllLinks(){  storageSourceService.deleteRowsAsync(LINK_TABLE_NAME,null);}  }
class C{  public static String extractUsernameFromMsgContext(MessageContext context){  Validate.notNull(context);  ServletRequest req=(ServletRequest)context.get(MessageContext.SERVLET_REQUEST);  assert req != null;  return extractUsernameFromSevletRequest(req);}  }
class C{  public MappedClass add(Attribute attribute){  this.xmlClass.attributes.add(attribute.toXStream());  return this;}  }
class C{  public boolean isClosed(){  return atomicRef.removed();}  }
class C{  public boolean isPrimitive(){switch (basicType) {case BT_BOOLEAN:case BT_BYTE:case BT_CHAR:case BT_DOUBLE:case BT_FLOAT:case BT_INT:case BT_LONG:case BT_SHORT:case BT_VOID:{      return true;    }}return false;}  }
class C{  public boolean isLockGrantorId(LockGrantorId someLockGrantorId){synchronized (this.lockGrantorIdLock) {    return checkLockGrantorId(someLockGrantorId);  }}  }
class C{  public static void validateConsistencyGroupBookmarksExported(DbClient dbClient,URI consistencyGroupUri){  if (consistencyGroupUri == null) {    throw APIException.badRequests.invalidConsistencyGroup();  }  _log.info(String.format("Performing validation to ensure no RP bookmarks have been exported for consistency group %s.",consistencyGroupUri));  URIQueryResultList snapshotUris=new URIQueryResultList();  ContainmentConstraint constraint=ContainmentConstraint.Factory.getBlockSnapshotByConsistencyGroup(consistencyGroupUri);  dbClient.queryByConstraint(constraint,snapshotUris);  List<BlockSnapshot> blockSnapshots=dbClient.queryObject(BlockSnapshot.class,snapshotUris);  for (  BlockSnapshot snapshot : blockSnapshots) {    if (TechnologyType.RP.name().equalsIgnoreCase(snapshot.getTechnologyType())) {      _log.info(String.format("Examining RP bookmark %s to see if it has been exported.",snapshot.getId()));      ContainmentConstraint exportGroupConstraint=ContainmentConstraint.Factory.getBlockObjectExportGroupConstraint(snapshot.getId());      URIQueryResultList exportGroupIdsForSnapshot=new URIQueryResultList();      dbClient.queryByConstraint(exportGroupConstraint,exportGroupIdsForSnapshot);      Iterator<URI> exportGroupIdsForSnapshotIter=exportGroupIdsForSnapshot.iterator();      if (exportGroupIdsForSnapshotIter != null && exportGroupIdsForSnapshotIter.hasNext()) {        throw APIException.badRequests.cannotPerformOperationWithExportedBookmarks(snapshot.getId(),consistencyGroupUri);      }    }  }  _log.info(String.format("No RP bookmarks have been exported for consistency group %s.",consistencyGroupUri));}  }
class C{  public static void syncImmediately(Context context){  Bundle bundle=new Bundle();  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.content_authority),bundle);}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements){  return asImmutableList(elements,elements.length);}  }
class C{  public char[] findSource(IType type,IBinaryType info){  if (!type.isBinary()) {    return null;  }  String simpleSourceFileName=((BinaryType)type).getSourceFileName(info);  if (simpleSourceFileName == null) {    return null;  }  return findSource(type,simpleSourceFileName);}  }
class C{  public String maximumNumberOfClustersTipText(){  return "The maximum number of clusters to consider during cross-validation " + "to select the best number of clusters";}  }
class C{  private FCZoneReference addZoneReference(URI exportGroupURI,URI volumeURI,String refKey,String fabricId,URI NetworkSystemURI,String zoneName,boolean existingZone,String[] newOrExisting){  FCZoneReference ref=findFCZoneReferenceForVolGroupKey(exportGroupURI,volumeURI,refKey,newOrExisting);  if (ref == null) {    ref=new FCZoneReference();    ref.setPwwnKey(refKey);    ref.setFabricId(fabricId);    ref.setNetworkSystemUri(NetworkSystemURI);    ref.setVolumeUri(volumeURI);    ref.setGroupUri(exportGroupURI);    ref.setZoneName(zoneName);    ref.setId(URIUtil.createId(FCZoneReference.class));    ref.setInactive(false);    ref.setLabel(FCZoneReference.makeLabel(ref.getPwwnKey(),volumeURI.toString()));    ref.setExistingZone(existingZone);    _dbClient.createObject(ref);    newOrExisting[0]="New";  }  return ref;}  }
class C{  private void addScrollGapPath(int x,int y,int w,int h,boolean isAtLeft){  final double hHalf=h / 2.0;  final double wFull=isAtLeft ? w : 0;  final double wHalfOff=isAtLeft ? w - hHalf : hHalf;  path.quadTo(x + wHalfOff,y + h,x + wHalfOff,y + hHalf);  path.quadTo(x + wHalfOff,y,x + wFull,y);}  }
class C{  public static Intersection[] polytopeIntersect(Line line,Plane[] planes){  if (line == null) {    String message=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double fMax=-Double.MAX_VALUE;  double bMin=Double.MAX_VALUE;  boolean isTangent=false;  Vec4 u=line.getDirection();  Vec4 p=line.getOrigin();  for (  Plane plane : planes) {    Vec4 n=plane.getNormal();    double d=-plane.getDistance();    double s=u.dot3(n);    if (s == 0) {      double pdn=p.dot3(n);      if (pdn > d)       return null; else {        if (pdn == d)         isTangent=true;        continue;      }    }    double a=(d - p.dot3(n)) / s;    if (u.dot3(n) < 0) {      if (a > fMax) {        if (a > bMin)         return null;        fMax=a;      }    } else {      if (a < bMin) {        if (a < 0 || a < fMax)         return null;        bMin=a;      }    }  }  if (fMax >= 0)   return new Intersection[]{new Intersection(p.add3(u.multiply3(fMax)),isTangent),new Intersection(p.add3(u.multiply3(bMin)),isTangent)}; else   return new Intersection[]{new Intersection(p.add3(u.multiply3(bMin)),isTangent)};}  }
class C{  public ECPublicKeySpec(ECPoint w,ECParameterSpec params){  if (w == null) {    throw new NullPointerException("w is null");  }  if (params == null) {    throw new NullPointerException("params is null");  }  if (w == ECPoint.POINT_INFINITY) {    throw new IllegalArgumentException("w is ECPoint.POINT_INFINITY");  }  this.w=w;  this.params=params;}  }
class C{  @Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){}  }
class C{  public static void fill(boolean[] a,int fromIndex,int toIndex,boolean val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  private void initialize(String url,WebContents webContents,TabContentManager tabContentManager,boolean unfreeze,boolean initiallyHidden){  mDesiredIconSizePx=(int)(DESIRED_ICON_SIZE_DP * mActivity.getResources().getDisplayMetrics().density);  if (!unfreeze && webContents == null) {    webContents=WarmupManager.getInstance().hasPrerenderedUrl(url) ? WarmupManager.getInstance().takePrerenderedWebContents() : WebContentsFactory.createWebContents(isIncognito(),initiallyHidden);  }  initialize(webContents,tabContentManager,initiallyHidden);  if (unfreeze)   mDidRestoreState=unfreezeContents();  getView().requestFocus();}  }
class C{  public static GroupMatcher<JobKey> jobGroupStartsWith(String compareTo){  return GroupMatcher.groupStartsWith(compareTo);}  }
class C{  public void clear(){  hashCodeUpToDate=false;  modCount++;  for (int i=0; i < size; i++)   elementData[i]=null;  size=0;}  }
class C{  public Date rescheduleJob(TriggerKey triggerKey,Trigger newTrigger) throws SchedulerException {  return sched.rescheduleJob(triggerKey,newTrigger);}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  int i;  JSONObject jo;  String key;  Iterator keys;  int length;  Object object;  StringBuffer sb=new StringBuffer();  String tagName;  String value;  tagName=ja.getString(0);  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  object=ja.opt(1);  if (object instanceof JSONObject) {    i=2;    jo=(JSONObject)object;    keys=jo.keys();    while (keys.hasNext()) {      key=keys.next().toString();      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  } else {    i=1;  }  length=ja.length();  if (i >= length) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    do {      object=ja.get(i);      i+=1;      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        }      }    } while (i < length);    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public Vec3 mix(Vec3 vector,double weight){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","mix","missingVector"));  }  double w0=1 - weight;  double w1=weight;  this.x=this.x * w0 + vector.x * w1;  this.y=this.y * w0 + vector.y * w1;  this.z=this.z * w0 + vector.z * w1;  return this;}  }
class C{  @SuppressWarnings("try") private Register findFreeRegister(PlatformKind kind,OperandMode mode){  AllocatableRegisters allocatableRegisters=registerAllocationConfig.getAllocatableRegisters(kind);  Register[] availableRegs=allocatableRegisters.allocatableRegisters;  for (  Register reg : availableRegs) {    AllocatableValue currentVal=getCurrentValue(reg);    if (currentVal == null && !isCurrentlyUsed(reg,mode)) {      return reg;    }  }  if (Debug.isLogEnabled()) {    try (Indent i=Debug.logAndIndent("All Registers occupied:")){      for (      Register reg : availableRegs) {        Debug.log("%6s: last used %4d %s",reg,getLastRegisterUsage(reg),getCurrentValue(reg));      }    }   }  return null;}  }
class C{  private static Properties loadSecretProperties() throws IOException {  Properties properties=new Properties();  InputStream propertiesStream=Server.class.getClassLoader().getResourceAsStream("secrets.properties");  if (propertiesStream == null) {    File buildPropertiesFile=new File("src/main/resources/secrets.properties");    if (buildPropertiesFile.exists()) {      properties.load(new FileReader(buildPropertiesFile));    } else {      buildPropertiesFile=new File("samples/servlet-sample/src/main/resources/secrets.properties");      if (buildPropertiesFile.exists()) {        properties.load(new FileReader(buildPropertiesFile));      } else {        throw new IllegalStateException("Could not find secrets.properties");      }    }  } else {    properties.load(propertiesStream);  }  return properties;}  }
class C{  public EditSensorsDialog(final Collection<Sensor> sensors){  super();  if (sensors == null) {    throw new IllegalArgumentException("sensors must not be null");  }  this.sensors=sensors;  setTitle("Edit " + sensors.size() + " Sensor(s):");  initComponents();  layoutComponents();}  }
class C{  public static QueryCatalogResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryCatalogResponse object=new QueryCatalogResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryCatalogResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryCatalogResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(MessageCatalog.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(MessageCatalog.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((MessageCatalog[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(MessageCatalog.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Quaterniond rotationX(double angle){  double cos=Math.cos(angle * 0.5);  double sin=Math.sin(angle * 0.5);  w=cos;  x=sin;  y=0.0;  z=0.0;  return this;}  }
class C{  public BasicIconPart(Shape shape){  this(shape,null,DrawingAttributes.DEFAULT);}  }
class C{  public boolean isZeroTax(){  return getRate().signum() == 0;}  }
class C{  public static Intent createGetContentIntent(){  final Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.setType("*/*");  intent.addCategory(Intent.CATEGORY_OPENABLE);  return intent;}  }
class C{  public static Object distDestChangeEvent(String sessionID,String eventId,ScrDistreg scrDistReg,String entidad) throws DistributionException, SessionException, ValidationException {  Object result=null;  if (log.isDebugEnabled()) {    log.debug("distributionEx eventId [" + eventId + "]");  }  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    ScrOfic scrofic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    RuleContext ruleCtx=new RuleContext();    ruleCtx=new RuleContext();    ruleCtx.setUsuario(user.getId().toString());    ruleCtx.setSessionId(sessionID);    ruleCtx.setEventId(eventId);    ruleCtx.setLibro(new Integer(scrDistReg.getIdArch()));    ruleCtx.setRegistro(new Integer(scrDistReg.getIdFdr()));    if (scrofic != null) {      ruleCtx.setOficina(scrofic.getId());    }    ruleCtx.setEntidad(entidad);    result=EventsFactory.getCurrentEvent(ruleCtx.getEventId()).execute(ruleCtx);  } catch (  EventException ee) {    log.error("Se ha producido un error durante la ejecucion del evento de cambio de destino de la distribucion [" + scrDistReg.getId() + "]");  }catch (  SessionException e) {    throw e;  }catch (  Exception e) {    log.error("Impossible to launch event for externe distribution for the session [" + sessionID + "]",e);    throw new DistributionException(DistributionException.ERROR_CANNOT_ACCEPT_DISTRIBUTION);  }  return result;}  }
class C{  @Override public void updateBoolean(int columnIndex,boolean x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBoolean(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueBoolean.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public DefaultNamespace(String prefix,String uri){  super(prefix,uri);}  }
class C{  public void addCheckcast(String classname){  addOpcode(CHECKCAST);  addIndex(constPool.addClassInfo(classname));}  }
class C{  public void removeLayoutComponent(Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public void runSecondRunnable(Runnable r){synchronized (this.secondRunnableSync) {    this.secondRunnable=r;    this.secondRunnableSync.notify();    while (!this.secondRunnableCompleted && !this.abort) {      try {        this.secondRunnableSync.wait(1000);      } catch (      InterruptedException e) {      }      GemFireCacheImpl cache=GemFireCacheImpl.getInstance();      if (cache == null) {        return;      }      cache.getCancelCriterion().checkCancelInProgress(null);    }  }}  }
class C{  public void stopTraceSession(int traceSessionId) throws SQLException {  try (FbService service=attachServiceManager()){    service.startServiceAction(getTraceSPB(service,isc_action_svc_trace_stop,traceSessionId));    queueService(service);  } catch (  IOException ioe) {    throw new SQLException(ioe);  }}  }
class C{  public void removeListener(Listener<ChannelMapEvent> listener){  mEventBroadcaster.removeListener(listener);}  }
class C{  @Override public void removeDecoderStateListener(){  mDecoderStateListener=null;}  }
class C{  protected void sequence_VirtualBaseType(ISerializationContext context,VirtualBaseType semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public boolean isGoalState(Object state){  VacuumEnvironmentState vacEnvState=(VacuumEnvironmentState)state;  String currentLocation=vacEnvState.getAgentLocation(this.agent);  String adjacentLocation=(currentLocation.equals(VacuumEnvironment.LOCATION_A)) ? VacuumEnvironment.LOCATION_B : VacuumEnvironment.LOCATION_A;  if (VacuumEnvironment.LocationState.Clean != vacEnvState.getLocationState(currentLocation)) {    return false;  } else   if (VacuumEnvironment.LocationState.Clean != vacEnvState.getLocationState(adjacentLocation)) {    return false;  } else {    return true;  }}  }
class C{  private void repaintFocusedRow(){  int focusedRow=getFocusedRow(false);  if (focusedRow != -1 && focusedRow < getRowCount()) {    Rectangle rect=getCellRect(focusedRow,0,true);    rect.width=getWidth();    repaint(rect);  }}  }
class C{  @Override public void teardown(){}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public static void pcdOrientC(SepsetMap set,IndependenceTest test,IKnowledge knowledge,Graph graph){  TetradLogger.getInstance().log("info","Starting Collider Orientation:");  List<Node> nodes=graph.getNodes();  for (  Node y : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(y);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node x=adjacentNodes.get(combination[0]);      Node z=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(x,z)) {        continue;      }      List<Node> sepset=set.get(x,z);      if (sepset == null) {        continue;      }      List<Node> augmentedSet=new LinkedList<>(sepset);      augmentedSet.add(y);      if (test.determines(sepset,y)) {        TetradLogger.getInstance().log("info",sepset + " determines " + y);        continue;      }      boolean splitDeterminexSepsetXZ=test.determines(sepset,x) || test.determines(sepset,z);      boolean splitDeterminesAugmentedSetXZ=test.determines(augmentedSet,x) || test.determines(augmentedSet,z);      if (!splitDeterminexSepsetXZ && !splitDeterminesAugmentedSetXZ) {        TetradLogger.getInstance().log("info",sepset + " split determines " + x+ " and "+ z);        continue;      }      if (!isArrowpointAllowed(x,y,knowledge) || !isArrowpointAllowed(z,y,knowledge)) {        continue;      }      graph.setEndpoint(x,y,Endpoint.ARROW);      graph.setEndpoint(z,y,Endpoint.ARROW);      TetradLogger.getInstance().log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(x,y,z));    }  }  TetradLogger.getInstance().log("info","Finishing Collider Orientation.");}  }
class C{  void handlePingResponse(){  lastPingRcvTime=U.currentTimeMillis();}  }
class C{  public MorfologikFilter(final TokenStream in,final Dictionary dict){  super(in);  this.input=in;  this.stemmer=new DictionaryLookup(dict);  this.lemmaList=Collections.emptyList();}  }
class C{  private void scrollNow(){  if (mouseOnScreenPoint != null && target.isShowing()) {    Point origin=target.getLocationOnScreen();    Point relative=new Point(mouseOnScreenPoint.x - origin.x,mouseOnScreenPoint.y - origin.y);    Rectangle visibleRect=target.getVisibleRect();    if (!visibleRect.contains(relative)) {      int destX=relative.x;      if (relative.getX() < visibleRect.getMinX()) {        destX=(int)visibleRect.getMinX() - PAN_STEP_SIZE;      }      if (relative.getX() > visibleRect.getMaxX()) {        destX=(int)visibleRect.getMaxX() + PAN_STEP_SIZE;      }      int destY=relative.y;      if (relative.getY() < visibleRect.getMinY()) {        destY=(int)visibleRect.getMinY() - PAN_STEP_SIZE;      }      if (relative.getY() > visibleRect.getMaxY()) {        destY=(int)visibleRect.getMaxY() + PAN_STEP_SIZE;      }      target.scrollRectToVisible(new Rectangle(new Point(destX,destY)));    }  }}  }
class C{  @Override public void draw(Canvas canvas){  final boolean clearColorFilter;  if (mTintFilter != null && mPaint.getColorFilter() == null) {    mPaint.setColorFilter(mTintFilter);    clearColorFilter=true;  } else {    clearColorFilter=false;  }  if (mPaint.getShader() == null) {    canvas.drawBitmap(mBuffer,mSrcRect,mDstRect,mPaint);  } else {    canvas.drawRect(mDstRect,mPaint);  }  if (clearColorFilter) {    mPaint.setColorFilter(null);  }  if (mIsRenderingTriggeredOnDraw && mIsRunning && mNextFrameRenderTime != Long.MIN_VALUE) {    final long renderDelay=Math.max(0,mNextFrameRenderTime - SystemClock.uptimeMillis());    mNextFrameRenderTime=Long.MIN_VALUE;    mExecutor.remove(mRenderTask);    mSchedule=mExecutor.schedule(mRenderTask,renderDelay,TimeUnit.MILLISECONDS);  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static String insertParameter(CtClass type,String descriptor){  if (descriptor.charAt(0) != '(')   return descriptor; else   return "(" + of(type) + descriptor.substring(1);}  }
class C{  public void selectRosterEntry(){  rosterItemSelected();}  }
class C{  public boolean isInjectedParameter(PsiType psiType,Project project){  Set<PsiClassType> injectedClassTypes=createInjectedClassTypes(project);  for (  PsiClassType classType : injectedClassTypes) {    if (classType.isAssignableFrom(psiType)) {      return true;    }  }  return false;}  }
class C{  BasicType returnType(){  if (result < 0)   return V_TYPE;  Name n=names[result];  return n.type;}  }
class C{  public static byte[] base64Decode(String base64Data,boolean isUrlSafe){  Base64 decoder=new Base64(isUrlSafe);  return decoder.decode(base64Data);}  }
class C{  @Override public void onImeBack(){  mIsKeyboardOpen=false;  showActionBarIfNeeded();}  }
class C{  public void testSyncFailureShowsErrorDialog_noLocations(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  mFakeSyncManager.setSyncing(true);  mFakeEventBus.post(new SyncFailedEvent());  verify(mMockUi).showSyncFailedDialog(true);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string and a character: ");  String[] str=input.nextLine().split("[ ]");  System.out.println("The character \'" + str[1] + "\' occurs "+ count(str[0],str[1].charAt(0))+ " times in \""+ str[0]+ "\".");}  }
class C{  public static <E extends Comparable<E>>void removeDuplicates(SingleLinkedList<E> list){  SingleLinkedNode<E> curr=list.getNode(0);  int index=0;  while (curr != null) {    while (curr.next != null && curr.item == curr.next.item) {      list.remove(index + 1);    }    index++;    curr=curr.next;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.374 -0500",hash_original_method="CEFEBB919AD354EB1A0A7FBF2E2E3ECF",hash_generated_method="1D6284387BD85B0E08A4B494D5BEC91A") public PEMReader(Reader reader,PasswordFinder pFinder,String symProvider,String asymProvider){  super(reader);  this.pFinder=pFinder;  parsers.put("CERTIFICATE REQUEST",new PKCS10CertificationRequestParser());  parsers.put("NEW CERTIFICATE REQUEST",new PKCS10CertificationRequestParser());  parsers.put("CERTIFICATE",new X509CertificateParser(asymProvider));  parsers.put("X509 CERTIFICATE",new X509CertificateParser(asymProvider));  parsers.put("X509 CRL",new X509CRLParser(asymProvider));  parsers.put("PKCS7",new PKCS7Parser());  parsers.put("ATTRIBUTE CERTIFICATE",new X509AttributeCertificateParser());  parsers.put("EC PARAMETERS",new ECNamedCurveSpecParser());  parsers.put("PUBLIC KEY",new PublicKeyParser(asymProvider));  parsers.put("RSA PUBLIC KEY",new RSAPublicKeyParser(asymProvider));  parsers.put("RSA PRIVATE KEY",new RSAKeyPairParser(asymProvider));  parsers.put("DSA PRIVATE KEY",new DSAKeyPairParser(asymProvider));  parsers.put("EC PRIVATE KEY",new ECDSAKeyPairParser(asymProvider));  parsers.put("ENCRYPTED PRIVATE KEY",new EncryptedPrivateKeyParser(symProvider,asymProvider));  parsers.put("PRIVATE KEY",new PrivateKeyParser(asymProvider));}  }
class C{  public IconGroup(String name,String path){  this(name,path,null);}  }
class C{  public static String cleanFilename(String filename){  filename=filename.replace('\\','-');  filename=filename.replace(':','-');  filename=filename.replace('*','-');  filename=filename.replace('?','-');  filename=filename.replace('"','-');  filename=filename.replace('<','-');  filename=filename.replace('>','-');  filename=filename.replace('|','-');  return filename;}  }
class C{  public static TableId parse(String str){  String[] parts=str.split("[\\" + '.' + "]");  if (parts.length < 0)   return null;  return TableId.parse(parts,parts.length,true);}  }
class C{  public static void checkInt(Long expected,IonValue actual){  checkType(IonType.INT,actual);  IonInt i=(IonInt)actual;  if (expected == null) {    assertTrue("expected null value",actual.isNullValue());  } else {    assertEquals("int content",expected.longValue(),i.longValue());  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private void signalStopToEnumerationAdapter(){  this.aws.computeEnumerationRequest.enumerationAction=EnumerationAction.STOP;  this.service.handleEnumerationRequest(this.aws);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double cutoffsInSD=3;  int numOutputBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  cutoffsInSD=Double.parseDouble(args[2]);  numOutputBins=Integer.parseInt(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    double[] referenceCDF=new double[numOutputBins];    double rootOf2Pi=Math.sqrt(2 * Math.PI);    double exponent;    double x;    for (i=0; i < numOutputBins; i++) {      x=(double)i / (numOutputBins - 1) * 2 * cutoffsInSD - cutoffsInSD;      exponent=-x * x / 2;      referenceCDF[i]=Math.pow(Math.E,exponent) / rootOf2Pi;    }    for (i=1; i < numOutputBins; i++) {      referenceCDF[i]+=referenceCDF[i - 1];    }    double totalFrequency=referenceCDF[numOutputBins - 1];    for (i=0; i < numOutputBins; i++) {      referenceCDF[i]=referenceCDF[i] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numOutputBins; i++) {      pVal=referenceCDF[i];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numOutputBins; i++) {            if (referenceCDF[i] > pVal) {              if (i > 0) {                xVal=i - 1;              } else {                xVal=i;              }              break;            } else             if (referenceCDF[i] == pVal) {              xVal=i;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isSetValue(){  return this.value != null;}  }
class C{  public HitonRunner(GraphWrapper dagWrapper,Parameters params){  super(dagWrapper.getGraph(),params);}  }
class C{  public void deleteBreakpoint(@NotNull Breakpoint serverBreakpoint){  if (!Boolean.TRUE.equals(serverBreakpoint.getIsFinalState())) {    setStateToDisabled(serverBreakpoint);  }  process.getStateController().deleteBreakpointAsync(serverBreakpoint.getId());}  }
class C{  public void layoutComponents(){  list=new JList(examples);  runButton=new JButton("Run Example");  exitButton=new JButton("Exit");  tabbedPane=new JTabbedPane();  JPanel buttonPane=new JPanel();  buttonPane.setLayout(new FlowLayout(FlowLayout.CENTER));  buttonPane.add(runButton);  buttonPane.add(exitButton);  JPanel examplePane=new JPanel();  examplePane.setLayout(new BorderLayout());  examplePane.add(tabbedPane,BorderLayout.CENTER);  examplePane.add(buttonPane,BorderLayout.SOUTH);  JPanel contentPane=new JPanel();  contentPane.setLayout(new BorderLayout());  contentPane.add(new JScrollPane(list),BorderLayout.WEST);  contentPane.add(examplePane,BorderLayout.CENTER);  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  getContentPane().setLayout(new BorderLayout());  getContentPane().add(contentPane,BorderLayout.CENTER);  setSize(840,600);  setIconImages(Settings.getIconImages());}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"ContainsKeyValueReplyMessage processor not found");    }    return;  }  processor.process(this);  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.331 -0500",hash_original_method="C819E485025B8F435117CF721B89C30B",hash_generated_method="98BEB9A19A26BBF97D7E138E50A9E89E") public static Sampler CLAMP_LINEAR(RenderScript rs){  if (rs.mSampler_CLAMP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.CLAMP);    b.setWrapT(Value.CLAMP);    rs.mSampler_CLAMP_LINEAR=b.create();  }  return rs.mSampler_CLAMP_LINEAR;}  }
class C{  public static void allowCrossOriginRequests(HttpServletResponse response){  response.setHeader(CORS_ALLOW_ORIGIN_HEADER,"*");  response.setHeader(CORS_ALLOW_METHODS_HEADER,"POST, GET, OPTIONS");  response.setHeader(CORS_ALLOW_HEADERS_HEADER,"*");  response.setHeader(CORS_MAX_AGE_HEADER,"3600");}  }
class C{  public ParetoDominanceComparator(){  super(new AggregateConstraintComparator(),new ParetoObjectiveComparator());}  }
class C{  public li(String value){  addElement(value);}  }
class C{  public static void printKnightTour(int i,int j,int[] boardSize){  if (boardSize.length < 2)   return;  int[][] tour=new int[boardSize[0]][boardSize[1]];  int[] xMoves=new int[]{1,1,2,2,-1,-1,-2,-2};  int[] yMoves=new int[]{-2,2,-1,1,-2,2,-1,1};  tour[0][0]=1;  if (isValidKnightTour(i,j,xMoves,yMoves,2,tour)) {    print2DMatrix(tour);  } else {    System.out.println("Knight's tour doesn't exist for board size [" + boardSize[0] + "x"+ boardSize[1]+ "]");  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.144 -0500",hash_original_method="57BBD8F6823CD4AFC27D90CDB0FA1518",hash_generated_method="DD1E638E2ACF68F61B5993ACAD2290C3") private void nativeDeleteSelection(int start,int end,int textGeneration){  addTaint(start);  addTaint(end);  addTaint(textGeneration);}  }
class C{  public <V,E>NativeTitanGraphQuery<V,E> create(NativeTitanQueryFactory<V,E> factory){  NativeTitanGraphQuery<V,E> query=factory.createNativeTitanQuery();  for (  QueryPredicate predicate : children) {    predicate.addTo(query);  }  return query;}  }
class C{  public void write(int bits,int data) throws AccessException {  if ((bits < 0) || (bits > 8)) {    throw new AccessException("illegal write (" + bits + " bits)");  }  possExpand(bits);  data&=(-1 >>> (32 - bits));  int index=mPos >>> 3;  int offset=16 - (mPos & 0x07) - bits;  data<<=offset;  mPos+=bits;  mBuf[index]|=data >>> 8;  if (offset < 8)   mBuf[index + 1]|=data & 0xFF;}  }
class C{  public static <T>Supplier<T> nextDupSupplier(final Cursor cursor,final DatabaseEntry key,ByteArrayConverter<T> converter){  DatabaseEntry data=new DatabaseEntry();  return null;}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKeyParameters key){  super(key);  this.publicExponent=key.getPublicExponent();  this.primeP=key.getP();  this.primeQ=key.getQ();  this.primeExponentP=key.getDP();  this.primeExponentQ=key.getDQ();  this.crtCoefficient=key.getQInv();}  }
class C{  public double gaussianValueAtRisk(double percentile){  QL.require(percentile < 1.0 && percentile >= 0.9,"percentile is out of range [0.9, 1)");  double result=gaussianPercentile(1.0 - percentile);  return -Math.min(result,0.0);}  }
class C{  private void verifyPortNoInUseInRemovedVarrays(StoragePort storagePort){  _log.info("Checking port {} virtual array assignment can be changed",storagePort.getNativeGuid());  if (EndpointUtility.isValidEndpoint(storagePort.getPortNetworkId(),EndpointType.SAN)) {    _log.info("The port is of type FC or iscsi. Checking if in use by an export group.");    List<ExportMask> masks=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,ExportMask.class,"storagePorts",storagePort.getId().toString());    if (masks != null && !masks.isEmpty()) {      _log.info("The port is in use by {} masks. Checking the masks virtual arrays.",masks.size());      for (      ExportMask mask : masks) {        if (!mask.getInactive()) {          _log.info("checking ExportMask {}",mask.getMaskName());          List<ExportGroup> groups=CustomQueryUtility.queryActiveResourcesByRelation(_dbClient,mask.getId(),ExportGroup.class,"exportMasks");          for (          ExportGroup group : groups) {            URI varray=group.getVirtualArray();            if (!ExportMaskUtils.exportMaskInVarray(_dbClient,mask,varray)) {              _log.info("not all target ports of {} are tagged for varray {}",mask,varray);              if (group.getAltVirtualArrays() != null) {                String altVarray=group.getAltVirtualArrays().get(storagePort.getStorageDevice().toString());                if (null != altVarray) {                  URI altVarrayUri=URI.create(altVarray);                  if (ExportMaskUtils.exportMaskInVarray(_dbClient,mask,altVarrayUri)) {                    _log.info("using the export group's alternate varray: {}",altVarrayUri);                    varray=altVarrayUri;                  }                }              }            }            _log.info("the virtual array found for this port is {}",varray);            if (!group.getInactive() && !storagePort.getTaggedVirtualArrays().contains(varray.toString())) {              _log.info("The port is in use by export group {} in virtual array {} " + "which will no longer in the port's tagged varray",group.getLabel(),group.getVirtualArray().toString());              throw APIException.badRequests.cannotChangePortVarraysExportExists(storagePort.getNativeGuid(),group.getVirtualArray().toString(),group.getId().toString());            }          }        }      }    }  } else {    _log.info("The port is of type IP. Checking if in use by a file share.");    List<FileShare> fileShares=CustomQueryUtility.queryActiveResourcesByRelation(_dbClient,storagePort.getId(),FileShare.class,"storagePort");    for (    FileShare fileShare : fileShares) {      if (!fileShare.getInactive() && !storagePort.getTaggedVirtualArrays().contains(fileShare.getVirtualArray().toString())) {        _log.info("The port is in use by file share {} in virtual array {} " + "which will no longer in the port's tagged varray",fileShare.getLabel(),fileShare.getVirtualArray().toString());        throw APIException.badRequests.cannotChangePortVarraysExportExists(storagePort.getNativeGuid(),fileShare.getVirtualArray().toString(),fileShare.getId().toString());      }    }  }}  }
class C{  private void calculateColor(int coord){  coord=coord - mBarPointerHaloRadius;  if (coord > (mBarLength / 2) && (coord < mBarLength)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1 - (mPosToSVFactor * (coord - (mBarLength / 2)))});  } else   if (coord > 0 && coord < mBarLength) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],(mPosToSVFactor * coord),1f});  } else   if (coord == (mBarLength / 2)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1f});  } else   if (coord <= 0) {    mColor=Color.WHITE;  } else   if (coord >= mBarLength) {    mColor=Color.BLACK;  }}  }
class C{  public static Class<? extends Directory> loadDirectoryClass(String clazzName) throws ClassNotFoundException {  return Class.forName(adjustDirectoryClassName(clazzName)).asSubclass(Directory.class);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  protected Anonymous_singleIsA_1_Impl(){  super();}  }
class C{  public T caseAnnotableElement(AnnotableElement object){  return null;}  }
class C{  public boolean areEditing(){  return isEdit;}  }
class C{  private static byte[] makeSecondaryKey() throws AuthenticationException {  if (RND_GEN == null) {    throw new AuthenticationException("Random generator not available");  }  final byte[] rval=new byte[16];synchronized (RND_GEN) {    RND_GEN.nextBytes(rval);  }  return rval;}  }
class C{  public HttpRequest contentType(String contentType){  mContentType=contentType;  return this;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (obj == null) {    return false;  } else   if (!(obj instanceof RawPublicKeyIdentity)) {    return false;  } else {    RawPublicKeyIdentity other=(RawPublicKeyIdentity)obj;    if (publicKey == null) {      if (other.publicKey != null) {        return false;      }    } else     if (!Arrays.equals(getSubjectInfo(),other.getSubjectInfo())) {      return false;    }    return true;  }}  }
class C{  final boolean hasValidNext(){  return validIndex < validTypes.size();}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public static long monthFirstDay(long monthMillis){  if (isNotTime(monthMillis)) {    return NO_TIME_MILLIS;  }  DateOnlyCalendar calendar=DateOnlyCalendar.fromTime(monthMillis);  calendar.set(Calendar.DAY_OF_MONTH,1);  long result=calendar.getTimeInMillis();  calendar.recycle();  return result;}  }
class C{  public Boolean isCpuHotAddEnabled(){  return cpuHotAddEnabled;}  }
class C{  public static <T>CompletableFuture<T> exceptionalFuture(Throwable t){  CompletableFuture<T> future=new CompletableFuture<>();  future.completeExceptionally(t);  return future;}  }
class C{  public Matrix4f zero(){  MemUtil.INSTANCE.zero(this);  _properties(0);  return this;}  }
class C{  protected static void emit_summary(boolean output_produced){  final_time=System.currentTimeMillis();  if (no_summary)   return;  System.err.println("------- " + version.title_str + " Parser Generation Summary -------");  System.err.println("  " + lexer.error_count + " error"+ plural(lexer.error_count)+ " and "+ lexer.warning_count+ " warning"+ plural(lexer.warning_count));  System.err.print("  " + terminal.number() + " terminal"+ plural(terminal.number())+ ", ");  System.err.print(non_terminal.number() + " non terminal" + plural(non_terminal.number())+ ", and ");  System.err.println(production.number() + " production" + plural(production.number())+ " declared, ");  System.err.println("  producing " + lalr_state.number() + " unique parse states.");  System.err.println("  " + emit.unused_term + " terminal"+ plural(emit.unused_term)+ " declared but not used.");  System.err.println("  " + emit.unused_non_term + " non terminal"+ plural(emit.unused_term)+ " declared but not used.");  System.err.println("  " + emit.not_reduced + " production"+ plural(emit.not_reduced)+ " never reduced.");  System.err.println("  " + emit.num_conflicts + " conflict"+ plural(emit.num_conflicts)+ " detected"+ " ("+ expect_conflicts+ " expected).");  if (output_produced)   System.err.println("  Code written to \"" + emit.parser_class_name + ".java\", and \""+ emit.symbol_const_class_name+ ".java\"."); else   System.err.println("  No code produced.");  if (opt_show_timing)   show_times();  System.err.println("---------------------------------------------------- (" + version.version_str + ")");}  }
class C{  public GF2nPolynomialElement invertMAIA() throws ArithmeticException {  if (isZero()) {    throw new ArithmeticException();  }  GF2Polynomial b=new GF2Polynomial(mDegree,"ONE");  GF2Polynomial c=new GF2Polynomial(mDegree);  GF2Polynomial u=getGF2Polynomial();  GF2Polynomial v=mField.getFieldPolynomial();  GF2Polynomial h;  while (true) {    while (!u.testBit(0)) {      u.shiftRightThis();      if (!b.testBit(0)) {        b.shiftRightThis();      } else {        b.addToThis(mField.getFieldPolynomial());        b.shiftRightThis();      }    }    if (u.isOne()) {      return new GF2nPolynomialElement((GF2nPolynomialField)mField,b);    }    u.reduceN();    v.reduceN();    if (u.getLength() < v.getLength()) {      h=u;      u=v;      v=h;      h=b;      b=c;      c=h;    }    u.addToThis(v);    b.addToThis(c);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforerefchildnonexistent.class,args);}  }
class C{  public MultiTermVectorsShardRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.239 -0500",hash_original_method="79CA4CDBF662362D6AFDE76E65301125",hash_generated_method="0E064EBAC524F2DDC3D586E1517D4F20") @Deprecated public void onTooManyRedirects(WebView view,Message cancelMsg,Message continueMsg){  cancelMsg.sendToTarget();}  }
class C{  public synchronized void updateToDeleted(OsmElement e){  createCheckpoint(R.string.undo_action_fix_conflict);  if (e.getName().equals(Node.NAME)) {    getDelegator().removeNode((Node)e);  } else   if (e.getName().equals(Way.NAME)) {    getDelegator().removeWay((Way)e);  } else   if (e.getName().equals(Relation.NAME)) {    getDelegator().removeRelation((Relation)e);  }  getDelegator().removeFromUpload(e);  map.invalidate();}  }
class C{  public boolean usesShiftModifier(){  return usesShift;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  serialize(out,this);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  protected void sendResultAndFinish(){  ArrayList<LinkedHashMap<String,String>> currentTags=tagEditorFragment.getUpdatedTags();  LinkedHashMap<String,String> copiedTags=tagEditorFragment.getCopiedTags();  if (copiedTags != null) {    savingHelper.save(this,COPIED_TAGS_FILE,copiedTags,false);  }  if (currentTags != null && currentTags.size() == 1) {    Address.updateLastAddresses(tagEditorFragment,Util.getArrayListMap(currentTags.get(0)));  }  Intent intent=new Intent();  HashMap<Long,String> currentParents=null;  ArrayList<RelationMemberDescription> currentMembers=null;  PropertyEditorData[] newData=new PropertyEditorData[currentTags.size()];  if (currentTags != null && currentTags.size() == 1) {    currentParents=relationMembershipFragment.getParentRelationMap();    currentMembers=new ArrayList<RelationMemberDescription>();    if (types[0].endsWith(Relation.NAME)) {      currentMembers=relationMembersFragment.getMembersList();    }    if (!same(currentTags,originalTags) || !(originalParents == null && currentParents.size() == 0) && !currentParents.equals(originalParents) || (elements != null && elements[0].getName().equals(Relation.NAME) && !currentMembers.equals(originalMembers))) {      Log.d(DEBUG_TAG,"saving tags");      for (int i=0; i < currentTags.size(); i++) {        newData[i]=new PropertyEditorData(osmIds[i],types[i],currentTags.get(i).equals(originalTags.get(i)) ? null : currentTags.get(i),null,(originalParents == null && currentParents.size() == 0) || currentParents.equals(originalParents) ? null : currentParents,null,currentMembers.equals(originalMembers) ? null : currentMembers,null);      }    }  } else {    if (!same(currentTags,originalTags)) {      for (int i=0; i < currentTags.size(); i++) {        newData[i]=new PropertyEditorData(osmIds[i],types[i],currentTags.get(i).equals(originalTags.get(i)) ? null : currentTags.get(i),null,null,null,null,null);      }    }  }  intent.putExtra(TAGEDIT_DATA,newData);  setResult(RESULT_OK,intent);  finish();}  }
class C{  protected AbstractAttributeCondition(String value){  this.value=value;}  }
class C{  protected boolean applyFilter(Node node,int nodeType){  if (fFilter != null && (fWhatToShowFilter & nodeType) != 0) {    short code=fFilter.acceptNode(node);switch (code) {case NodeFilter.FILTER_REJECT:case NodeFilter.FILTER_SKIP:      return false;default :  }}return true;}  }
class C{  public XYPointerAnnotation(String label,double x,double y,double angle){  super(label,x,y);  this.angle=angle;  this.tipRadius=DEFAULT_TIP_RADIUS;  this.baseRadius=DEFAULT_BASE_RADIUS;  this.arrowLength=DEFAULT_ARROW_LENGTH;  this.arrowWidth=DEFAULT_ARROW_WIDTH;  this.labelOffset=DEFAULT_LABEL_OFFSET;  this.arrowStroke=new BasicStroke(1.0f);  this.arrowPaint=Color.black;}  }
class C{  public Segment createSegment(SegmentDescriptor descriptor){switch (storage.level()) {case MEMORY:    return createMemorySegment(descriptor);case MAPPED:  if (descriptor.version() == 1) {    return createMappedSegment(descriptor);  } else {    return createDiskSegment(descriptor);  }case DISK:return createDiskSegment(descriptor);default :throw new AssertionError();}}  }
class C{  public int prepareBlitMask(XRSurfaceData dst,AffineTransform maskTX,int width,int height){  int maskWidth=Math.max(width / MASK_SCALE_FACTOR,1);  int maskHeight=Math.max(height / MASK_SCALE_FACTOR,1);  maskTX.scale(((double)width) / maskWidth,((double)height) / maskHeight);  try {    maskTX.invert();  } catch (  NoninvertibleTransformException ex) {    maskTX.setToIdentity();  }  ensureBlitMaskSize(maskWidth,maskHeight);  if (lastMaskTransform == null || !lastMaskTransform.equals(maskTX)) {    con.setPictureTransform(blitMaskPicture,maskTX);    lastMaskTransform=maskTX;  }  int currentEA=xrMgr.getAlphaColor().getAlpha();  if (lastMaskWidth != maskWidth || lastMaskHeight != maskHeight || lastEA != currentEA) {    if (lastMaskWidth > maskWidth || lastMaskHeight > maskHeight) {      con.renderRectangle(blitMaskPicture,XRUtils.PictOpClear,XRColor.NO_ALPHA,0,0,lastMaskWidth,lastMaskHeight);    }    con.renderRectangle(blitMaskPicture,XRUtils.PictOpSrc,xrMgr.getAlphaColor(),0,0,maskWidth,maskHeight);    lastEA=currentEA;  }  lastMaskWidth=maskWidth;  lastMaskHeight=maskHeight;  return blitMaskPicture;}  }
class C{  public void httpRequest(HttpRequestEvent e) throws IOException {  int len=e.getRequest().length();  StringBuffer revline=new StringBuffer(len);  for (int i=len - 1; i >= 0; i--)   revline.insert(len - 1 - i,e.getRequest().charAt(i));  e.getWriter().write(revline.toString());}  }
class C{  public int indexOf(String groupName){  return indexOf(groupName,0);}  }
class C{  public boolean isLocalDestroy(){  return this == LOCAL_DESTROY;}  }
class C{  private static void transaction(Ignite ignite,IgniteCache<PersonKey,Person> cache){  PersonKey key=new PersonKey(5);  System.out.println();  System.out.println(">>> Update salary and write-through to database for person with ID: " + key.getId());  try (Transaction tx=ignite.transactions().txStart()){    Person p=cache.get(key);    System.out.println(">>> Loaded person from database: " + p);    double salary=p.getSalary();    p.setSalary(salary * 1.2);    cache.put(key,p);    tx.commit();  }   System.out.println(">>> Updated person: " + cache.get(key));}  }
class C{  private boolean compareString(Object valueObj,String value1S,String value2S){  String valueObjS=String.valueOf(valueObj);  String op=getOperation();  if (OPERATION_Eq.equals(op))   return valueObjS.compareTo(value2S) == 0; else   if (OPERATION_Gt.equals(op))   return valueObjS.compareTo(value2S) > 0; else   if (OPERATION_GtEq.equals(op))   return valueObjS.compareTo(value2S) >= 0; else   if (OPERATION_Le.equals(op))   return valueObjS.compareTo(value2S) < 0; else   if (OPERATION_LeEq.equals(op))   return valueObjS.compareTo(value2S) <= 0; else   if (OPERATION_Like.equals(op))   return valueObjS.compareTo(value2S) == 0; else   if (OPERATION_NotEq.equals(op))   return valueObjS.compareTo(value2S) != 0; else   if (OPERATION_Sql.equals(op))   throw new IllegalArgumentException("SQL not Implemented"); else   if (OPERATION_X.equals(op)) {    if (valueObjS.compareTo(value1S) < 0)     return false;    return valueObjS.compareTo(value2S) <= 0;  }  throw new IllegalArgumentException("Unknown Operation=" + op);}  }
class C{  protected Probability(){}  }
class C{  @Override public PartitionKeyGroup deletePartitionKeyGroup(PartitionKeyGroupKey partitionKeyGroupKey){  partitionKeyGroupHelper.validatePartitionKeyGroupKey(partitionKeyGroupKey);  PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDaoHelper.getPartitionKeyGroupEntity(partitionKeyGroupKey);  if (businessObjectFormatDao.getBusinessObjectFormatCount(partitionKeyGroupEntity) > 0L) {    throw new IllegalArgumentException(String.format("Can not delete \"%s\" partition key group since it is being used by a business object format.",partitionKeyGroupKey.getPartitionKeyGroupName()));  }  partitionKeyGroupDao.delete(partitionKeyGroupEntity);  return createPartitionKeyGroupFromEntity(partitionKeyGroupEntity);}  }
class C{  private MessageReceiver findReceiver(String channelId){  for (  Server server : api.getServers()) {    if (server.getChannelById(channelId) != null) {      return server.getChannelById(channelId);    }  }  for (  User user : api.getUsers()) {    if (channelId.equals(((ImplUser)user).getUserChannelId())) {      return user;    }  }  return null;}  }
class C{  public DeviceInfo insertDeviceInfo(DeviceInfo deviceinfo){  EntityManager mgr=getEntityManager();  try {    mgr.persist(deviceinfo);  }  finally {    mgr.close();  }  return deviceinfo;}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  @Override public String toString(){  return String.format("%s{count=%d, sum=%f, min=%f, average=%f, max=%f}",this.getClass().getSimpleName(),getCount(),getSum(),getMin(),getAverage(),getMax());}  }
class C{  public static boolean writeLine(String fileName,String value){  BufferedWriter writer=null;  try {    writer=new BufferedWriter(new FileWriter(fileName));    writer.write(value);  } catch (  FileNotFoundException e) {    Log.w(TAG,"No such file " + fileName + " for writing",e);    return false;  }catch (  IOException e) {    Log.e(TAG,"Could not write to file " + fileName,e);    return false;  } finally {    try {      if (writer != null) {        writer.close();      }    } catch (    IOException e) {    }  }  return true;}  }
class C{  public void testStringMissingFunction() throws Exception {  checkSortMissingFunction("stringdv","a","z");}  }
class C{  public NodeCheckResourceAllocationScheduler(){  _log.info("Initializing node balance check scheduler");  ScheduledExecutorService service=new NamedScheduledThreadPoolExecutor("NodeResourceAllocationScheduler",1);  service.schedule(this,SERVICE_START_LAG,TimeUnit.SECONDS);}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public SecurityException(java.lang.String s){}  }
class C{  private boolean isCharacterEscapable(char c){  return isCharacterQuoteCharacter(c) || isCharacterEscapeCharacter(c);}  }
class C{  public static TypeReference createTrustedWithoutAssumptions(ResolvedJavaType type){  return createTrusted(null,type);}  }
class C{  public String toString(){  String result="";  result+="[";  result+=super.toString();  result+=", ";  if (lookahead() != null) {    result+="{";    for (int t=0; t < terminal.number(); t++)     if (lookahead().contains(t))     result+=terminal.find(t).name() + " ";    result+="}";  } else   result+="NULL LOOKAHEAD!!";  result+="]";  return result;}  }
class C{  @Override protected void process(DistributionManager dm){  String rejectionMessage=null;  final boolean isAdminDM=dm.getId().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE || dm.getId().getVmKind() == DistributionManager.LOCATOR_DM_TYPE;  String myVersion=GemFireVersion.getGemFireVersion();  String theirVersion=this.version;  if (dm.getTransport().isMcastEnabled() != isMcastEnabled) {    rejectionMessage=LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_ISMCASTENABLED_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(new Object[]{getSender(),isMcastEnabled ? "enabled" : "disabled"});  } else   if (isMcastEnabled && dm.getSystem().getOriginalConfig().getMcastPort() != getMcastPort()) {    rejectionMessage=LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_MCAST_PORT_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(new Object[]{getSender(),getMcastPort(),dm.getSystem().getOriginalConfig().getMcastPort()});  } else   if (isMcastEnabled && !checkMcastAddress(dm.getSystem().getOriginalConfig().getMcastAddress(),getMcastHostAddress())) {    rejectionMessage=LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_MCAST_ADDRESS_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(new Object[]{getSender(),getMcastHostAddress(),dm.getSystem().getOriginalConfig().getMcastAddress()});  } else   if (dm.getTransport().isTcpDisabled() != isTcpDisabled) {    rejectionMessage=LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_ISTCPDISABLED_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(new Object[]{getSender(),Boolean.valueOf(isTcpDisabled)});  } else   if (dm.getDistributedSystemId() != DistributionConfig.DEFAULT_DISTRIBUTED_SYSTEM_ID && distributedSystemId != DistributionConfig.DEFAULT_DISTRIBUTED_SYSTEM_ID && distributedSystemId != dm.getDistributedSystemId()) {    String distributedSystemListener=System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "DistributedSystemListener");    if (distributedSystemListener != null) {      if (-distributedSystemId != dm.getDistributedSystemId()) {        rejectionMessage=LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_DISTRIBUTED_SYSTEM_ID_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(new Object[]{getSender(),Integer.valueOf(distributedSystemId),dm.getDistributedSystemId()});      }    } else {      rejectionMessage=LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_DISTRIBUTED_SYSTEM_ID_1_DOES_NOT_MATCH_THE_DISTRIBUTED_SYSTEM_2_IT_IS_ATTEMPTING_TO_JOIN.toLocalizedString(new Object[]{getSender(),Integer.valueOf(distributedSystemId),dm.getDistributedSystemId()});    }  }  if (this.fromDataProblems != null) {    if (logger.isDebugEnabled()) {      logger.debug(this.fromDataProblems);    }  }  if (rejectionMessage == null) {    if (this.interfaces == null || this.interfaces.size() == 0) {      final org.apache.geode.i18n.StringId msg=LocalizedStrings.StartupMessage_REJECTED_NEW_SYSTEM_NODE_0_BECAUSE_PEER_HAS_NO_NETWORK_INTERFACES;      rejectionMessage=msg.toLocalizedString(getSender());    } else {      dm.setEquivalentHosts(this.interfaces);    }  }  if (rejectionMessage != null) {    logger.warn(rejectionMessage);  }  if (rejectionMessage == null) {    dm.setRedundancyZone(getSender(),this.redundancyZone);    dm.setEnforceUniqueZone(this.enforceUniqueZone);    if (this.hostedLocatorsAll != null) {      dm.addHostedLocators(getSender(),this.hostedLocatorsAll,this.isSharedConfigurationEnabled);    }  }  StartupResponseMessage m=null;  m=new StartupResponseWithVersionMessage(dm,replyProcessorId,getSender(),rejectionMessage,isAdminDM);  if (logger.isDebugEnabled()) {    logger.debug("Received StartupMessage from a member with version: {}, my version is:{}",theirVersion,myVersion);  }  dm.putOutgoing(m);  if (rejectionMessage != null) {    dm.getMembershipManager().startupMessageFailed(getSender(),rejectionMessage);  }  if (rejectionMessage != null)   dm.handleManagerDeparture(getSender(),false,rejectionMessage);}  }
class C{  public SparseObjectMatrix1D(int size){  this(size,size / 1000,0.2,0.5);}  }
class C{  public SalsaResponse pickTopNodes(){  int maxNumResults=Math.min(salsaInternalState.getSalsaRequest().getMaxNumResults(),RecommendationRequest.MAX_RECOMMENDATION_RESULTS);  PriorityQueue<NodeInfo> topResults=new PriorityQueue<NodeInfo>(maxNumResults);  int numFilteredNodes=0;  for (  NodeInfo nodeInfo : salsaInternalState.getVisitedRightNodes().values()) {    if (salsaInternalState.getSalsaRequest().filterResult(nodeInfo.getValue(),nodeInfo.getSocialProofs())) {      numFilteredNodes++;      continue;    }    nodeInfo.setWeight(nodeInfo.getWeight() / salsaInternalState.getSalsaStats().getNumRHSVisits());    addResultToPriorityQueue(topResults,nodeInfo,maxNumResults);  }  List<RecommendationInfo> outputResults=Lists.newArrayListWithCapacity(topResults.size());  byte[] validSocialProofs=salsaInternalState.getSalsaRequest().getSocialProofTypes();  int maxSocialProofSize=salsaInternalState.getSalsaRequest().getMaxSocialProofSize();  while (!topResults.isEmpty()) {    NodeInfo nodeInfo=topResults.poll();    outputResults.add(new TweetRecommendationInfo(TweetIDMask.restore(nodeInfo.getValue()),nodeInfo.getWeight(),pickTopSocialProofs(nodeInfo.getSocialProofs(),validSocialProofs,maxSocialProofSize)));  }  Collections.reverse(outputResults);  salsaStats.setNumRightNodesFiltered(numFilteredNodes);  salsaStats.setNumRightNodesReached(salsaInternalState.getVisitedRightNodes().size());  LOG.info("SALSA: after running iterations for request_id = " + salsaInternalState.getSalsaRequest().getQueryNode() + ", we get numSeedNodes = "+ salsaStats.getNumSeedNodes()+ ", numDirectNeighbors = "+ salsaStats.getNumDirectNeighbors()+ ", numRHSVisits = "+ salsaStats.getNumRHSVisits()+ ", numRightNodesReached = "+ salsaStats.getNumRightNodesReached()+ ", numRightNodesFiltered = "+ salsaStats.getNumRightNodesFiltered()+ ", minVisitsPerRightNode = "+ salsaStats.getMinVisitsPerRightNode()+ ", maxVisitsPerRightNode = "+ salsaStats.getMaxVisitsPerRightNode()+ ", numOutputResults = "+ outputResults.size());  return new SalsaResponse(outputResults,salsaStats);}  }
class C{  private Expression foldCall(){  List<? extends Expression> operands=children();  Expression fn=operands.get(0);  if (fn instanceof FunctionConstructor) {    if (operands.size() == 1) {      FunctionConstructor fc=(FunctionConstructor)fn;      if (fc.getParams().isEmpty() && fc.getIdentifierName() == null) {switch (fc.getBody().children().size()) {case 0:          return undefined(getFilePosition());case 1:        Statement s=fc.getBody().children().get(0);      if (s instanceof ReturnStmt) {        Expression e=((ReturnStmt)s).getReturnValue();        if (e == null) {          return undefined(getFilePosition());        }        if (!mentionsThisOrArguments(e)) {          return e;        }      } else       if (s instanceof ExpressionStmt) {        Expression e=((ExpressionStmt)s).getExpression();        if (!mentionsThisOrArguments(e)) {          return create(getFilePosition(),Operator.VOID,e);        }      }    break;}}}} else if (is(fn,Operator.MEMBER_ACCESS) && fn.children().get(0) instanceof StringLiteral) {StringLiteral sl=(StringLiteral)fn.children().get(0);String methodName=((Reference)fn.children().get(1)).getIdentifierName();if ("indexOf".equals(methodName)) {if (operands.size() == 2) {Expression target=operands.get(1);if (target instanceof StringLiteral) {  int index=sl.getUnquotedValue().indexOf(((StringLiteral)target).getUnquotedValue());  return new IntegerLiteral(getFilePosition(),index);}}}}return this;}  }
class C{  public void testNumericClass(){  performTest(true);}  }
class C{  private void openRoomActivity(Context context){  HashMap<String,Object> params=new HashMap<>();  params.put(VectorRoomActivity.EXTRA_MATRIX_ID,mSession.getMyUserId());  params.put(VectorRoomActivity.EXTRA_ROOM_ID,mParameters.get(ULINK_ROOM_ID_KEY));  if (mParameters.containsKey(ULINK_EVENT_ID_KEY)) {    params.put(VectorRoomActivity.EXTRA_EVENT_ID,mParameters.get(ULINK_EVENT_ID_KEY));  }  Intent intent=new Intent(context,VectorHomeActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  intent.putExtra(VectorHomeActivity.EXTRA_JUMP_TO_ROOM_PARAMS,params);  context.startActivity(intent);}  }
class C{  public static void assertTasksEnqueuedWithProperty(String queueName,Function<TaskStateInfo,String> propertyGetter,String... expectedTaskProperties) throws Exception {  assertThat(transform(getQueueInfo(queueName).getTaskInfo(),propertyGetter)).containsExactly((Object[])expectedTaskProperties);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public void removeAllHighlights(){  TextUI mapper=component.getUI();  if (getDrawsLayeredHighlights()) {    int len=highlights.size();    if (len != 0) {      int minX=0;      int minY=0;      int maxX=0;      int maxY=0;      int p0=-1;      int p1=-1;      for (int i=0; i < len; i++) {        HighlightInfo hi=highlights.elementAt(i);        if (hi instanceof LayeredHighlightInfo) {          LayeredHighlightInfo info=(LayeredHighlightInfo)hi;          minX=Math.min(minX,info.x);          minY=Math.min(minY,info.y);          maxX=Math.max(maxX,info.x + info.width);          maxY=Math.max(maxY,info.y + info.height);        } else {          if (p0 == -1) {            p0=hi.p0.getOffset();            p1=hi.p1.getOffset();          } else {            p0=Math.min(p0,hi.p0.getOffset());            p1=Math.max(p1,hi.p1.getOffset());          }        }      }      if (minX != maxX && minY != maxY) {        component.repaint(minX,minY,maxX - minX,maxY - minY);      }      if (p0 != -1) {        try {          safeDamageRange(p0,p1);        } catch (        BadLocationException e) {        }      }      highlights.removeAllElements();    }  } else   if (mapper != null) {    int len=highlights.size();    if (len != 0) {      int p0=Integer.MAX_VALUE;      int p1=0;      for (int i=0; i < len; i++) {        HighlightInfo info=highlights.elementAt(i);        p0=Math.min(p0,info.p0.getOffset());        p1=Math.max(p1,info.p1.getOffset());      }      try {        safeDamageRange(p0,p1);      } catch (      BadLocationException e) {      }      highlights.removeAllElements();    }  }}  }
class C{  public static JBBPParser prepare(final String script,final JBBPBitOrder bitOrder){  return new JBBPParser(script,bitOrder,null,0);}  }
class C{  public static void bincellOp(MatrixBlock m1,MatrixBlock ret,ScalarOperator op) throws DMLRuntimeException {  if ((op.sparseSafe && m1.isInSparseFormat() != ret.isInSparseFormat()) || (!op.sparseSafe && ret.isInSparseFormat())) {    throw new DMLRuntimeException("Wrong output representation for safe=" + op.sparseSafe + ": "+ m1.isInSparseFormat()+ ", "+ ret.isInSparseFormat());  }  if (op.sparseSafe)   safeBinaryScalar(m1,ret,op); else   unsafeBinaryScalar(m1,ret,op);  if (ret.isEmptyBlock(false))   ret.examSparsity();}  }
class C{  public boolean isRolloverBorders(){  return rolloverBorders;}  }
class C{  public static SourceViewer createFormsSourceViewer(FormToolkit toolkit,Composite parent,int flags){  SourceViewer sourceViewer=createSourceViewer(parent,flags);  sourceViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TREE_BORDER);  sourceViewer.getTextWidget().setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TREE_BORDER);  toolkit.adapt(sourceViewer.getTextWidget(),true,true);  return sourceViewer;}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet originalExampleSet,Attribute predictedLabel) throws OperatorException {switch (classificationType) {case ONE_AGAINST_ALL:{      startNonECOCProcess(originalExampleSet,ONE_AGAINST_ALL);      break;    }case ONE_AGAINST_ONE:{    startNonECOCProcess(originalExampleSet,ONE_AGAINST_ONE);    break;  }case EXHAUSTIVE_CODE:{  startECOCProcess(originalExampleSet,codeMatrix);  break;}case RANDOM_CODE:{startECOCProcess(originalExampleSet,codeMatrix);break;}default :{throw new OperatorException("Unknown classification strategy selected");}}return originalExampleSet;}  }
class C{  public static void addComboBox(final JPanel panel,final JComboBox<String> comboBox,final String description,final String hint,final boolean value){  Preconditions.checkNotNull(panel,"IE01592: Panel argument can not be null");  Preconditions.checkNotNull(comboBox,"IE01593: Combo box argument can not be null");  Preconditions.checkNotNull(description,"IE01594: Description argument can not be null");  comboBox.addItem("On");  comboBox.addItem("Off");  comboBox.setSelectedItem(value ? "On" : "Off");  comboBox.setPreferredSize(new Dimension(PREFERRED_WIDTH,PREFERRED_HEIGHT));  addComponent(panel,comboBox,description,hint);}  }
class C{  public static double logpdf(double x,double mu,double sigma,double skew){  x=(x - mu) / sigma;  if (Math.abs(skew) > 0.) {    x=-Math.log(1. - skew * x) / skew;  }  return -.5 * x * x - Math.log(MathUtil.SQRTHALF * sigma * (1 - skew * x));}  }
class C{  public Format(final char[] lineIndenter,final char[] newLine,final int mode,final NameCoder nameCoder){  this.lineIndenter=lineIndenter;  this.newLine=newLine;  this.mode=mode;  this.nameCoder=nameCoder;}  }
class C{  private void addEndpointAliasName(WBEMClient client,Map<String,FCEndpoint> fabricEps){  CloseableIterator<CIMInstance> it=null;  long start=System.currentTimeMillis();  int count=0;  try {    CIMObjectPath path=CimObjectPathCreator.createInstance(_Brocade_ZoneMembershipSettingDataInZoneAlias,_namespace);    it=client.enumerateInstances(path,false,true,true,null);    CIMInstance ins=null;    FCEndpoint ep;    String aliasPath=null;    String memberPath=null;    String wwn=null;    while (it.hasNext()) {      count++;      ins=it.next();      _log.debug(ins.toString());      aliasPath=cimStringProperty(ins,_ManagedElement);      memberPath=cimStringProperty(ins,_SettingData);      wwn=formatWWN(getPropertyValueFromString(memberPath,SmisConstants.CP_NSNAME));      ep=fabricEps.get(wwn);      if (ep != null) {        ep.setRemotePortAlias(getPropertyValueFromString(aliasPath,SmisConstants.CP_NSNAME));        fabricEps.remove(ep);        _log.debug("added alias " + ep.getRemotePortAlias() + " to "+ ep.getRemotePortName());      }    }  } catch (  Exception ex) {    _log.warn("An exception was encountered while updating the endpoint aliases. " + "Discovery will proceed. The exception is: " + ex.getMessage());  } finally {    if (it != null) {      it.close();    }  }  _log.info("Processing " + count + " aliases took "+ (start - System.currentTimeMillis()));}  }
class C{  @Override protected void afterExecute(Runnable r,Throwable t){  super.afterExecute(r,t);synchronized (this) {    tasksInProcess.decrementAndGet();    if (tasksInProcess.intValue() == 0) {      synchronizer.signalAll();    }  }}  }
class C{  public void dismiss(){  mPopup.dismiss();  removePromptView();  mPopup.setContentView(null);  mDropDownList=null;  mHandler.removeCallbacks(mResizePopupRunnable);}  }
class C{  public URLConnection openConnection() throws IOException {  return streamHandler.openConnection(this);}  }
class C{  public static void doOrthogonalLayout(final JFrame parent,final ZyGraph graph){  checkArguments(parent,graph);  if (!askLayout(parent,graph)) {    return;  }  graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.ORTHOGONAL);  refreshLayout(parent,graph);}  }
class C{  public boolean create(){  if ((height > 0) && (width > 0)) {    matrix=new boolean[maxx + 1][maxy + 1];    needToRecreate=false;    return true;  }  needToRecreate=true;  return false;}  }
class C{  public long skip(long bytes) throws IOException {  long bytesSkipped=bufferedInput.skip(bytes);  offset+=bytesSkipped;  available-=bytesSkipped;  return bytesSkipped;}  }
class C{  public Boolean isDataDigestSettable(){  return dataDigestSettable;}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder(super.toString());  buf.append("[contextual:").append(isContextual());  String[] keyNames=null;  if (isContextual()) {    buf.append(", context:");    buf.append(shapingRange == null ? Range.values()[key] : shapingRange);  }  if (rangeSet == null) {    buf.append(", range(s): ");    boolean first=true;    for (int i=0; i < NUM_KEYS; ++i) {      if ((mask & (1 << i)) != 0) {        if (first) {          first=false;        } else {          buf.append(", ");        }        buf.append(Range.values()[i]);      }    }  } else {    buf.append(", range set: ").append(rangeSet);  }  buf.append(']');  return buf.toString();}  }
class C{  public OpenMapFrame(String title,boolean useAsInternalFrameRootPaneIfNecessary){  super(title);  this.useAsInternalFrameRootPaneIfNecessary=useAsInternalFrameRootPaneIfNecessary;}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public void restartLoader(){  getLoaderManager().restartLoader(0,null,this);}  }
class C{  public void write(Writer writer,Integer indent) throws TransformerException {  write(writer,indent,null);}  }
class C{  public static boolean isEmpty(Object[] array){  return (array == null || array.length == 0);}  }
class C{  public PresentationData(String presentableText,String locationString,Icon icon,@Nullable TextAttributesKey attributesKey){  myIcon=icon;  myLocationString=locationString;  myPresentableText=presentableText;  myAttributesKey=attributesKey;}  }
class C{  public static void zeroPages(Address start,int size){  Clock.stop();  assert isPageAligned(start);  assert (size > 0) && ((size & ~PAGE_MASK) == 0);  Trace.trace(Item.MEMORY,"zeroPages(%s,%d)\n",start.toString(),size);  Clock.start();  Address last=start.plus(size);  for (Address p=start; p.LT(last); p=p.plus(BYTES_IN_PAGE)) {    pageTable.zeroPage(p);  }}  }
class C{  public Wine runForeground(File executableToRun,List<String> arguments,Map<String,String> environment) throws CancelException {  File workingDirectory=executableToRun.getParentFile();  runForeground(workingDirectory,executableToRun.getAbsolutePath(),arguments,environment);  return this;}  }
class C{  public static void deleteDebugger(final AbstractSQLProvider provider,final DebuggerTemplate debugger) throws CouldntDeleteException {  Preconditions.checkNotNull(debugger,"IE00709: Debugger template argument can not be null");  Preconditions.checkArgument(debugger.inSameDatabase(provider),"IE00710: Debugger template is not part of this database");  NaviLogger.info("Deleting debugger %d",debugger.getId());  PostgreSQLHelpers.deleteById(provider.getConnection(),CTableNames.DEBUGGERS_TABLE,debugger.getId());}  }
class C{  public void writeByte(byte v) throws IOException {  dataOutput.writeByte(v);  offset+=1;}  }
class C{  public int[] elements(){  return elements;}  }
class C{  public static <T>int detectIndex(Iterable<T> iterable,Predicate<? super T> predicate){  if (iterable instanceof ArrayList<?>) {    return ArrayListIterate.detectIndex((ArrayList<T>)iterable,predicate);  }  if (iterable instanceof List<?>) {    return ListIterate.detectIndex((List<T>)iterable,predicate);  }  if (iterable != null) {    return IterableIterate.detectIndex(iterable,predicate);  }  throw new IllegalArgumentException("Cannot perform detectIndex on null");}  }
class C{  public boolean equivalent(IMFBaseResourceType other){  if (other == null) {    return false;  }  boolean result=true;  result&=editRate.equals(other.getEditRate());  result&=entryPoint.equals(other.getEntryPoint());  result&=intrinsicDuration.equals(other.getIntrinsicDuration());  result&=sourceDuration.equals(other.getSourceDuration());  result&=repeatCount.equals(other.getRepeatCount());  return result;}  }
class C{  public Formatter(String format){  setFormat(format);  setAlignment(DECIMAL);}  }
class C{  public File makeReplica(){  return makeCopy();}  }
class C{  private void status(Player player){  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group == null) {    player.addEvent(new GroupChangeEvent());    player.notifyWorldAboutChanges();    return;  }  group.sendGroupChangeEvent(player);}  }
class C{  public int insertCalendar(Connection conn,String calendarName,Calendar calendar) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeObject(calendar);  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(INSERT_CALENDAR));    ps.setString(1,calendarName);    setBytes(ps,2,baos);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  protected CipherOutputStream(OutputStream os){  super(os);  output=os;  cipher=new NullCipher();}  }
class C{  private void verifyIsDelegatingForAppenderRefFilter(final Level level,final boolean expectIsDelegating) throws Exception {  assertThat(expectIsDelegating,is(true));  writeAppenderRefFilterConfigFile(this.configFile,level);  this.appenderContext.reconfigure();  assertThat(this.logger.getLevel(),is(level));  assertThat(this.logger.isTraceEnabled(),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(this.logger.isTraceEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(this.enabledMarker),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(this.logger.isTraceEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(((FastLogger)this.logger).isDelegating(),is(expectIsDelegating));}  }
class C{  private static byte[] encode(byte[] signedStream) throws DSSException {  final int half=signedStream.length / 2;  final byte[] firstPart=new byte[half];  final byte[] secondPart=new byte[half];  System.arraycopy(signedStream,0,firstPart,0,half);  System.arraycopy(signedStream,half,secondPart,0,half);  final BigInteger r=new BigInteger(1,firstPart);  final BigInteger s=new BigInteger(1,secondPart);  final ASN1EncodableVector v=new ASN1EncodableVector();  v.add(new DERInteger(r));  v.add(new DERInteger(s));  return DSSASN1Utils.getDEREncoded(new DERSequence(v));}  }
class C{  @Override public boolean isDateAxis(int axisNumber){  if (axisNumber < 0 || axisNumber > 2) {    return false;  }  return this.dateAxis[axisNumber];}  }
class C{  private void addRelevantFKsFromUnchangedTables(Database currentModel,Database desiredModel,Set<String> namesOfKnownChangedTables,Map<String,List<ForeignKey>> fksPerTable){  boolean caseSensitive=delimitedIdentifierModeOn;  for (int tableIdx=0; tableIdx < desiredModel.getTableCount(); tableIdx++) {    Table targetTable=desiredModel.getTable(tableIdx);    String name=targetTable.getName();    Table sourceTable=currentModel.findTable(name,caseSensitive);    List<ForeignKey> relevantFks=null;    if (!caseSensitive) {      name=name.toUpperCase();    }    if ((sourceTable != null) && !namesOfKnownChangedTables.contains(name)) {      for (int fkIdx=0; fkIdx < targetTable.getForeignKeyCount(); fkIdx++) {        ForeignKey targetFk=targetTable.getForeignKey(fkIdx);        ForeignKey sourceFk=sourceTable.findForeignKey(targetFk,caseSensitive);        String refName=targetFk.getForeignTableName();        if (!caseSensitive) {          refName=refName.toUpperCase();        }        if ((sourceFk != null) && namesOfKnownChangedTables.contains(refName)) {          if (relevantFks == null) {            relevantFks=new ArrayList<ForeignKey>();            fksPerTable.put(name,relevantFks);          }          relevantFks.add(targetFk);        }      }    }  }}  }
class C{  private AccessFlags(){}  }
class C{  public void timesEquals(Polynomial P){  N.timesEquals(P);}  }
class C{  public void storeLogoOnInternalStorage(String paymentProductId,Drawable image){  if (paymentProductId == null) {    throw new InvalidParameterException("Error storing drawable on disk, paymentProductId may not be null");  }  if (image == null) {    throw new InvalidParameterException("Error storing drawable on disk, image may not be null");  }  String directory=context.getFilesDir() + Constants.DIRECTORY_LOGOS;  File file=new File(directory,Constants.FILENAME_LOGO_PREFIX + paymentProductId);  file.getParentFile().mkdirs();  FileOutputStream fileOutputStream=null;  ByteArrayOutputStream byteArrayOutputStream=null;  try {    fileOutputStream=new FileOutputStream(file);    byteArrayOutputStream=new ByteArrayOutputStream();    Bitmap bitmap=((BitmapDrawable)image).getBitmap();    bitmap.compress(CompressFormat.PNG,0,byteArrayOutputStream);    byte[] bitmapdata=byteArrayOutputStream.toByteArray();    fileOutputStream.write(bitmapdata);  } catch (  StreamCorruptedException e) {    Log.e(TAG,"Error storing drawable on internal device storage",e);  }catch (  IOException e) {    Log.e(TAG,"Error storing drawable on internal device storage",e);  } finally {    try {      byteArrayOutputStream.close();      fileOutputStream.close();    } catch (    IOException e) {    }  }}  }
class C{  public boolean scheduleAtStart(Steppable event){  return _scheduleAtExtreme(event,false);}  }
class C{  private char scanWhitespace(StringBuffer result){  for (; ; ) {    char ch=this.readChar();switch (ch) {case ' ':case '\t':case '\n':      result.append(ch);case '\r':    break;default :  return ch;}}}  }
class C{  public static float meanSiderealTime(Date date,float longitude){  double jd=calculateJulianDay(date);  double delta=jd - 2451545.0f;  double gst=280.461f + 360.98564737f * delta;  double lst=normalizeAngle(gst + longitude);  return (float)lst;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public GridTab(GridTabVO vo,GridWindow w,boolean virtual){  m_window=w;  m_vo=vo;  m_mTable=new GridTable(m_vo.ctx,m_vo.AD_Table_ID,m_vo.TableName,m_vo.WindowNo,m_vo.TabNo,true,virtual);  m_mTable.setReadOnly(m_vo.IsReadOnly || m_vo.IsView);  m_mTable.setDeleteable(m_vo.IsDeleteable);}  }
class C{  public IBindingSet decodeSolution(final DataInputBuffer in,final boolean resolveCachedValues){  if (version == -1) {    try {      version=in.unpackInt();switch (version) {case IVSolutionSetEncoder.VERSION0:        break;default :      throw new RuntimeException("Unknown version: " + version);  }} catch (IOException e) {  throw new RuntimeException(e);}}final IBindingSet bset=_decodeSolution(in,resolveCachedValues);nsolutions++;return bset;}  }
class C{  private static void maxLength(String member,String value,int len,boolean flag) throws ValidationException {  if (flag) {    isNotBlank(member,value);  } else   if (value == null) {    return;  }  if (value.length() > len) {    ValidationException vf=new ValidationException(ReasonEnum.LENGTH,member,new Object[]{value,Integer.valueOf(len)});    logValidationFailure(vf);    throw vf;  }}  }
class C{  protected void assertIterator(String message,Iterator iterator,int count){  for (int i=0; i < count; i++) {    assertTrue(message + ": should have item: " + i,iterator.hasNext());    assertTrue(message + ": item: " + i+ " should not be null",iterator.next() != null);  }  assertFalse(message + ": should not have item after iterating through: " + count+ " items",iterator.hasNext());}  }
class C{  public synchronized void removeIterationNotificationListener(IterationNotificationListener l){  if (m_IterationNotficationListeners == null)   m_IterationNotficationListeners=new HashSet<>();  m_IterationNotficationListeners.remove(l);}  }
class C{  private Point translatePointToTabPanel(int srcx,int srcy,Point dest){  Point vpp=tabScroller.viewport.getLocation();  Point viewp=tabScroller.viewport.getViewPosition();  dest.x=srcx - vpp.x + viewp.x;  dest.y=srcy - vpp.y + viewp.y;  return dest;}  }
class C{  public void openSettingsScreen(){  Intent intent=new Intent();  intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);  Uri uri=Uri.parse("package:" + context.getContext().getPackageName());  intent.setData(uri);  context.startActivity(intent);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private int calculateLayoutHeight(int heightSize,int mode){  mItemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.UNSPECIFIED));  int height=mItemsLayout.getMeasuredHeight();  if (mode == MeasureSpec.EXACTLY) {    height=heightSize;  } else {    height+=2 * mItemsPadding;    height=Math.max(height,getSuggestedMinimumHeight());    if (mode == MeasureSpec.AT_MOST && heightSize < height) {      height=heightSize;    }  }  mItemsLayout.measure(MeasureSpec.makeMeasureSpec(400,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height - 2 * mItemsPadding,MeasureSpec.EXACTLY));  return height;}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public CtClass makeInterface(String name) throws RuntimeException {  return makeInterface(name,null);}  }
class C{  private boolean KononenkosMDL(double[] priorCounts,double[][] bestCounts,double numInstances,int numCutPoints){  double distPrior, instPrior, distAfter=0, sum, instAfter=0;  double before, after;  int numClassesTotal;  numClassesTotal=0;  for (  double priorCount : priorCounts) {    if (priorCount > 0) {      numClassesTotal++;    }  }  distPrior=SpecialFunctions.log2Binomial(numInstances + numClassesTotal - 1,numClassesTotal - 1);  instPrior=SpecialFunctions.log2Multinomial(numInstances,priorCounts);  before=instPrior + distPrior;  for (  double[] bestCount : bestCounts) {    sum=Utils.sum(bestCount);    distAfter+=SpecialFunctions.log2Binomial(sum + numClassesTotal - 1,numClassesTotal - 1);    instAfter+=SpecialFunctions.log2Multinomial(sum,bestCount);  }  after=Utils.log2(numCutPoints) + distAfter + instAfter;  return (before > after);}  }
class C{  public void assertEquals(byte[] expected,byte[] actual){  if (expected == null || actual == null) {    assertTrue(expected == actual);    return;  }  assertEquals(expected.length,actual.length);  for (int i=0; i < expected.length; i++) {    if (expected[i] != actual[i]) {      fail("[" + i + "]: expected: "+ (int)expected[i]+ " actual: "+ (int)actual[i]);    }  }}  }
class C{  public Map<String,Object> send(String url,Map<String,Object> request) throws HttpClientException {  if (debug) {    Debug.logInfo("Request : " + url + " / "+ request,module);  }  String timeoutString=(String)props.get("payment.valuelink.timeout");  int timeout=34;  try {    timeout=Integer.parseInt(timeoutString);  } catch (  NumberFormatException e) {    Debug.logError(e,"Unable to set timeout to " + timeoutString + " using default "+ timeout);  }  HttpClient client=new HttpClient(url,request);  client.setTimeout(timeout * 1000);  client.setDebug(debug);  client.setClientCertificateAlias((String)props.get("payment.valuelink.certificateAlias"));  String response=client.post();  return this.parseResponse(response);}  }
class C{  private void deleteAccessRecords(){  String whereDel=" WHERE AD_Role_ID=" + getAD_Role_ID();  int winDel=DB.executeUpdate("DELETE FROM AD_Window_Access" + whereDel,get_TrxName());  int procDel=DB.executeUpdate("DELETE FROM AD_Process_Access" + whereDel,get_TrxName());  int formDel=DB.executeUpdate("DELETE FROM AD_Form_Access" + whereDel,get_TrxName());  int browseDel=DB.executeUpdate("DELETE FROM AD_Browse_Access" + whereDel,get_TrxName());  int wfDel=DB.executeUpdate("DELETE FROM AD_WorkFlow_Access" + whereDel,get_TrxName());  int docactDel=DB.executeUpdate("DELETE FROM AD_Document_Action_Access" + whereDel,get_TrxName());  log.fine("AD_Window_Access=" + winDel + ", AD_Process_Access="+ procDel+ ", AD_Form_Access="+ formDel+ ", AD_Browse_Access="+ browseDel+ ", AD_Workflow_Access="+ wfDel+ ", AD_Document_Action_Access="+ docactDel);}  }
class C{  public GetRequest toGetRequest(final RecursionType recursion) throws ClassNotFoundException {  Check.isTrue(_versions.length > 0 && _versions[0] != null,"_versions.length > 0 && _versions[0] != null");  return new GetRequest(toItemSpec(recursion),_versions[0]);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T findValueOfType(Collection<?> collection,Class<T> type){  if (isEmpty(collection)) {    return null;  }  T value=null;  for (  Object element : collection) {    if (type == null || type.isInstance(element)) {      if (value != null) {        return null;      }      value=(T)element;    }  }  return value;}  }
class C{  public boolean isValid(){  checkValid(parentGeometry);  return validErr == null;}  }
class C{  public void transmit(String userId,JSONObject message){  JSONObject usrMsgJson=new JSONObject();  try {    usrMsgJson.put(PnRTCMessage.JSON_USERMSG,message);    this.pcClient.transmitMessage(userId,usrMsgJson);  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  public void unloadPlatformCompiler(){  if (getVersionValue() < 1.2) {    requireMinVersionValue("clUnloadCompiler",1.1,1.2);    error(CL.clUnloadCompiler());  } else {    requireMinVersionValue("clUnloadPlatformCompiler",1.2);    error(CL.clUnloadPlatformCompiler(getEntity()));  }}  }
class C{  public final AC sizeGroup(String s){  return sizeGroup(s,curIx);}  }
class C{  protected static void addCapabilities(IOCapabilities capabilities){  IOCapabilitiesStorage.capabilities.add(capabilities);}  }
class C{  private void loadAllMassnahmen(){  List<Baustein> bausteine=BSIKatalogInvisibleRoot.getInstance().getBausteine();  MassnahmenFactory massnahmenFactory=new MassnahmenFactory();  for (  Baustein baustein : bausteine) {    for (    Massnahme massnahme : baustein.getMassnahmen()) {      Boolean duplicate=false;      alleTitel:       for (      MassnahmenUmsetzung vorhandeneMassnahmenumsetzung : allMassnahmenUmsetzungen) {        if (vorhandeneMassnahmenumsetzung.getName().equals(massnahme.getTitel())) {          duplicate=true;          break alleTitel;        }      }      if (!duplicate) {        MassnahmenUmsetzung massnahmeUmsetzung;        try {          massnahmeUmsetzung=massnahmenFactory.createMassnahmenUmsetzung(massnahme,BSIKatalogInvisibleRoot.getInstance().getLanguage());          allMassnahmenUmsetzungen.add(massnahmeUmsetzung);        } catch (        Exception e) {          Logger.getLogger(this.getClass()).error(Messages.RiskAnalysisWizard_4,e);        }      }    }  }}  }
class C{  public RussianLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  protected void loadProjections(Properties props){  ProjectionFactory.loadDefaultProjections();}  }
class C{  public Matrix4d reflection(double a,double b,double c,double d){  double da=a + a, db=b + b, dc=c + c, dd=d + d;  m00=1.0 - da * a;  m01=-da * b;  m02=-da * c;  m03=0.0;  m10=-db * a;  m11=1.0 - db * b;  m12=-db * c;  m13=0.0;  m20=-dc * a;  m21=-dc * b;  m22=1.0 - dc * c;  m23=0.0;  m30=-dd * a;  m31=-dd * b;  m32=-dd * c;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.121 -0500",hash_original_method="68E343228598567180DC80BCAD1066EC",hash_generated_method="DD6E89DB04E2ABBF7C0B0C623BC62A93") public final Activity waitForActivityWithTimeout(long timeOut){synchronized (this) {    if (mLastActivity == null) {      try {        wait(timeOut);      } catch (      InterruptedException e) {      }    }    if (mLastActivity == null) {      return null;    } else {      Activity res=mLastActivity;      mLastActivity=null;      return res;    }  }}  }
class C{  public static void resetDimensionConstants(Context context){  Resources res=context.getResources();  sDpToPx=res.getDisplayMetrics().density;  sPxToDp=1.0f / sDpToPx;  sCompositorButtonSlop=res.getDimension(R.dimen.compositor_button_slop) * sPxToDp;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public void removeAllTrackingIcons(){  iconArea.removeAllTrackingIcons();}  }
class C{  public static boolean validateFlagBetweenValues(CFlags flags,String flagName,double lowValue,double highValue){  final double value=(double)flags.getValue(flagName);  if (value < lowValue) {    Diagnostic.error(ErrorType.INVALID_MIN_INTEGER_FLAG_VALUE,"--" + flagName,value + "",lowValue + "");    return false;  }  if (value > highValue) {    Diagnostic.error(ErrorType.INVALID_MAX_INTEGER_FLAG_VALUE,"--" + flagName,value + "",highValue + "");    return false;  }  return true;}  }
class C{  public JsonEncoding detectEncoding() throws IOException, JsonParseException {  boolean foundEncoding=false;  if (ensureLoaded(4)) {    int quad=(_inputBuffer[_inputPtr] << 24) | ((_inputBuffer[_inputPtr + 1] & 0xFF) << 16) | ((_inputBuffer[_inputPtr + 2] & 0xFF) << 8)| (_inputBuffer[_inputPtr + 3] & 0xFF);    if (handleBOM(quad)) {      foundEncoding=true;    } else {      if (checkUTF32(quad)) {        foundEncoding=true;      } else       if (checkUTF16(quad >>> 16)) {        foundEncoding=true;      }    }  } else   if (ensureLoaded(2)) {    int i16=((_inputBuffer[_inputPtr] & 0xFF) << 8) | (_inputBuffer[_inputPtr + 1] & 0xFF);    if (checkUTF16(i16)) {      foundEncoding=true;    }  }  JsonEncoding enc;  if (!foundEncoding) {    enc=JsonEncoding.UTF8;  } else {switch (_bytesPerChar) {case 1:      enc=JsonEncoding.UTF8;    break;case 2:  enc=_bigEndian ? JsonEncoding.UTF16_BE : JsonEncoding.UTF16_LE;break;case 4:enc=_bigEndian ? JsonEncoding.UTF32_BE : JsonEncoding.UTF32_LE;break;default :throw new RuntimeException("Internal error");}}_context.setEncoding(enc);return enc;}  }
class C{  public T caseTraceType_(TraceType_ object){  return null;}  }
class C{  public static boolean isDatePart(String part){  Integer p=DATE_PART.get(StringUtils.toUpperEnglish(part));  return p != null;}  }
class C{  public HierarchyScope(IJavaProject project,IType type,WorkingCopyOwner owner,boolean onlySubtypes,boolean noMembersOrEnclosingTypes,boolean includeFocusType) throws JavaModelException {  this(type,owner);  this.javaProject=project;  if (onlySubtypes) {    this.subTypes=new HashSet();  }  this.includeFocusType=includeFocusType;  this.allowMemberAndEnclosingTypes=!noMembersOrEnclosingTypes;}  }
class C{  private void triggerDatastoreDeleteTasks(Set<String> datastoreIds){  if (datastoreIds != null) {    for (    String id : datastoreIds) {      DatastoreDeleteService.State startState=new DatastoreDeleteService.State();      startState.parentServiceLink=getSelfLink();      startState.datastoreId=id;      sendRequest(Operation.createPost(this,DatastoreDeleteFactoryService.SELF_LINK).setBody(startState));    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_1__NAME_1:    setName_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean isNew(Object entity){  Preconditions.checkNotNullArgument(entity,"entity is null");  if (entity instanceof BaseGenericIdEntity) {    return BaseEntityInternalAccess.isNew((BaseGenericIdEntity)entity);  } else   if (entity instanceof AbstractNotPersistentEntity) {    return BaseEntityInternalAccess.isNew((AbstractNotPersistentEntity)entity);  }  return false;}  }
class C{  protected void finalize(){  shutdown();}  }
class C{  public PageBlobOutputStream(CloudPageBlob pageBlob) throws StorageException {  this(pageBlob,PAGE_BLOB_PAGE_SIZE);}  }
class C{  public UpdateRequestProcessorChain(UpdateRequestProcessorFactory[] chain,SolrCore solrCore){  this.chain=chain;  this.solrCore=solrCore;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public boolean isLeadAnchorNotificationEnabled(){  return leadAnchorNotificationEnabled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.278 -0500",hash_original_method="336103AA7A2D233179336448C933A29F",hash_generated_method="21FE3D0EE05FB1E77838C07BDFA9BA55") public static void bindObjectToProgram(SQLiteProgram prog,int index,Object value){  if (value == null) {    prog.bindNull(index);  } else   if (value instanceof Double || value instanceof Float) {    prog.bindDouble(index,((Number)value).doubleValue());  } else   if (value instanceof Number) {    prog.bindLong(index,((Number)value).longValue());  } else   if (value instanceof Boolean) {    Boolean bool=(Boolean)value;    if (bool) {      prog.bindLong(index,1);    } else {      prog.bindLong(index,0);    }  } else   if (value instanceof byte[]) {    prog.bindBlob(index,(byte[])value);  } else {    prog.bindString(index,value.toString());  }}  }
class C{  private UISelectItem createSelectItem(String label){  UISelectItem result=new UISelectItem();  result.setItemValue(label);  result.setItemLabel(label);  return result;}  }
class C{  @Deprecated public List<Reference> list(){  return doList();}  }
class C{  public void addAttributes(Attributes atts) throws SAXException {  int nAtts=atts.getLength();  for (int i=0; i < nAtts; i++) {    String uri=atts.getURI(i);    if (null == uri)     uri="";    addAttributeAlways(uri,atts.getLocalName(i),atts.getQName(i),atts.getType(i),atts.getValue(i),false);  }}  }
class C{  public ModuleMarshal[] marshalArgs(ParameterAmp[] sourceTypes){  if (sourceTypes == null) {    return new ModuleMarshal[0];  }  ModuleMarshal[] marshal=new ModuleMarshal[sourceTypes.length];  for (int i=0; i < marshal.length; i++) {    marshal[i]=marshal(sourceTypes[i].rawClass());  }  return marshal;}  }
class C{  public static boolean isNormalized(CharSequence s){  if (IS_NORMALIZED != null) {    try {      return ((Boolean)IS_NORMALIZED.invoke(null,s,NORMAL_FORM_C)).booleanValue();    } catch (    IllegalAccessException ex) {      throw new SomethingWidgyHappenedError("Normalizer unexpectedly uninvokable",ex);    }catch (    InvocationTargetException ex) {      Throwable th=ex.getTargetException();      throw new SomethingWidgyHappenedError("Normalizer unexpectedly uninvokable",th);    }  }  for (int i=s.length(); --i >= 0; ) {    char ch=s.charAt(i);    if (ch >= 256) {      return false;    }  }  return true;}  }
class C{  public static boolean isKeyPressed(int keycode){synchronized (keyLock) {    return keysDown.contains(keycode);  }}  }
class C{  public CloudExecutionStack(@NotNull Project project,@NotNull String name,@Nullable List<StackFrame> frames,@Nullable List<Variable> variableTable,@Nullable List<Variable> evaluatedExpressions){  super(name);  if (frames != null) {    if (variableTable == null) {      variableTable=Collections.emptyList();    }    for (    StackFrame nativeFrame : frames) {      this.frames.add(new CloudStackFrame(project,nativeFrame,variableTable,evaluatedExpressions,new ServerToIdeFileResolver()));      evaluatedExpressions=null;    }  }}  }
class C{  protected int read(){  int curByte=0;  try {    curByte=in.read();  } catch (  IOException e) {    status=STATUS_FORMAT_ERROR;  }  return curByte;}  }
class C{  @SkipValidation @Action(value="/modifyProperty-approve") public String approve(){  LOGGER.debug("Enter method approve");  amalgPropIds=new String[10];  propertyModel=(PropertyImpl)getPersistenceService().findByNamedQuery(QUERY_PROPERTYIMPL_BYID,Long.valueOf(getModelId()));  LOGGER.debug("approve: Workflow property: " + propertyModel);  basicProp=propertyModel.getBasicProperty();  oldProperty=(PropertyImpl)basicProp.getProperty();  transitionWorkFlow(propertyModel);  createPropertyStatusValues();  if (PROPERTY_MODIFY_REASON_ADD_OR_ALTER.equals(modifyRsn) || PROPERTY_MODIFY_REASON_AMALG.equals(modifyRsn) || PROPERTY_MODIFY_REASON_BIFURCATE.equals(modifyRsn)) {  }  setModifyRsn(propertyModel.getPropertyDetail().getPropertyMutationMaster().getCode());  if (PROPERTY_MODIFY_REASON_ADD_OR_ALTER.equals(modifyRsn) || PROPERTY_MODIFY_REASON_BIFURCATE.equals(modifyRsn) || PROPERTY_MODIFY_REASON_GENERAL_REVISION_PETITION.equals(modifyRsn)) {    propertyModel.setStatus(STATUS_ISACTIVE);    oldProperty.setStatus(STATUS_ISHISTORY);    String clientSpecificDmdBill=propertyTaxCommonUtils.getAppConfigValue(APPCONFIG_CLIENT_SPECIFIC_DMD_BILL,PTMODULENAME);    if ("Y".equalsIgnoreCase(clientSpecificDmdBill)) {      propertyTaxCommonUtils.makeExistingDemandBillInactive(basicProp.getUpicNo());    } else     propertyTaxUtil.makeTheEgBillAsHistory(basicProp);  }  processAndStoreDocumentsWithReason(basicProp,getReason(modifyRsn));  if (PROPERTY_MODIFY_REASON_ADD_OR_ALTER.equals(modifyRsn) || PROPERTY_MODIFY_REASON_BIFURCATE.equals(modifyRsn) || PROPERTY_MODIFY_REASON_AMALG.equals(modifyRsn)|| PROPERTY_MODIFY_REASON_GENERAL_REVISION_PETITION.equals(modifyRsn))   updateAddress();  propService.updateIndexes(propertyModel,getApplicationType());  basicPropertyService.update(basicProp);  setBasicProp(basicProp);  setAckMessage(getText(PROPERTY_MODIFY_APPROVE_SUCCESS,new String[]{getModifyReasonString(),propertyModel.getBasicProperty().getUpicNo()}));  buildEmailandSms(propertyModel,getApplicationType());  addActionMessage(getText(PROPERTY_MODIFY_APPROVE_SUCCESS,new String[]{getModifyReasonString(),propertyModel.getBasicProperty().getUpicNo()}));  LOGGER.debug("Exiting approve");  return RESULT_ACK;}  }
class C{  public DefaultDirectoryPageCoder(){}  }
class C{  public GroupAvatarVM(int gid){  uploadState=new ValueModel<AvatarUploadState>("avatar.group." + gid,new AvatarUploadState(null,false));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public HostStateHistoryEntry(double time,double allocatedMips,double requestedMips,boolean isActive){  setTime(time);  setAllocatedMips(allocatedMips);  setRequestedMips(requestedMips);  setActive(isActive);}  }
class C{  public FastObjectGridPortrayal2D(){}  }
class C{  private boolean orientationMatches(String glyphOrientation){  if (glyphOrientation == null || glyphOrientation.length() == 0) {    return true;  }  return glyphOrientation.equals(orientation);}  }
class C{  @Override public byte[] read(){  return mBytes;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.createNewDataFile();    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setDisplayMaximum(1);    output.setDisplayMinimum(0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String leftPad(String str,int size,String delim){  size=(size - str.length()) / delim.length();  if (size > 0) {    str=repeat(delim,size) + str;  }  return str;}  }
class C{  public void addMoon(Planet moon){  moons.add(moon);}  }
class C{  public int read() throws IOException {  if (!buf.hasRemaining()) {    return -1;  }  return buf.get() & 0xFF;}  }
class C{  public void put(InputStream is,PutType putType,Result<Boolean> result){  try {    RowCursor cursor=cursor();    cursor.readStream(is);    getTableService().put(cursor,putType,result);  } catch (  Throwable e) {    result.fail(e);  }}  }
class C{  public int addStaircasePlot(String name,Color color,double[][] XY){  return ((Plot2DCanvas)plotCanvas).addStaircasePlot(name,color,XY);}  }
class C{  protected void updateLabelActiveStyle(){  if (this.valueBoxBase.getText() != null && !this.valueBoxBase.getText().isEmpty()) {    label.addStyleName("active");  } else {    label.removeStyleName("active");  }}  }
class C{  public Map<String,ResourceImpl> aggregateByType(List<ResourceImpl> resources) throws NotFoundException {  checkSupporting(resources);  Map<String,ResourceImpl> type2Resource=new HashMap<>();  for (  ResourceImpl resource : resources) {    final ResourceImpl resource1=type2Resource.get(resource.getType());    if (resource1 != null) {      type2Resource.put(resource.getType(),aggregate(resource1,resource));    } else {      type2Resource.put(resource.getType(),resource);    }  }  return type2Resource;}  }
class C{  public void reset(){  initialized=false;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private static boolean isOptimizable(final Step step1,final Step step2){  if (step1 instanceof VertexStep && ((VertexStep)step1).returnsEdge() && step1.getLabels().isEmpty()) {    final Direction step1Dir=((VertexStep)step1).getDirection();    if (step1Dir.equals(Direction.BOTH)) {      return step2 instanceof EdgeOtherVertexStep;    }    return step2 instanceof EdgeVertexStep && ((EdgeVertexStep)step2).getDirection().equals(step1Dir.opposite());  }  return false;}  }
class C{  public SubscriptionStateParser(String subscriptionState){  super(subscriptionState);}  }
class C{  public void write(Writer writer,Map<String,String> outputProperties) throws TransformerException {  Transformer transformer;  try {    transformer=TransformerFactory.newInstance().newTransformer();  } catch (  TransformerConfigurationException e) {    throw new RuntimeException(e);  }catch (  TransformerFactoryConfigurationError e) {    throw new RuntimeException(e);  }  for (  Map.Entry<String,String> entry : outputProperties.entrySet()) {    String key=entry.getKey();    String value=entry.getValue();    transformer.setOutputProperty(key,value);  }  DOMSource source=new DOMSource(document);  StreamResult result=new StreamResult(writer);  transformer.transform(source,result);}  }
class C{  public KNNChangeEvent(Object source,Type type,DBIDs objects,DBIDs updates){  super(source);  this.type=type;  this.objects=objects;  this.updates=updates;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.println("Display and integer reversed:");  System.out.print("Enter an integer: ");  int number=input.nextInt();  reverse(number);}  }
class C{  @Override void paintPeer(final Graphics g){  flush();  Dimension size=getPeerSize();  g.setColor(getPeerBackground());  g.fillRect(0,0,width,height);  drawMotif3DRect(g,1,1,width - 2,height - 2,false);  drawMotif3DRect(g,width - WIDGET_OFFSET,(height / 2) - 3,12,6,false);  if (!helper.isEmpty() && helper.getSelectedIndex() != -1) {    g.setFont(getPeerFont());    FontMetrics fm=g.getFontMetrics();    String lbl=helper.getItem(helper.getSelectedIndex());    if (lbl != null && drawSelectedItem) {      g.setClip(1,1,width - WIDGET_OFFSET - 2,height);      if (isEnabled()) {        g.setColor(getPeerForeground());        g.drawString(lbl,5,(height + fm.getMaxAscent() - fm.getMaxDescent()) / 2);      } else {        g.setColor(getPeerBackground().brighter());        g.drawString(lbl,5,(height + fm.getMaxAscent() - fm.getMaxDescent()) / 2);        g.setColor(getPeerBackground().darker());        g.drawString(lbl,4,((height + fm.getMaxAscent() - fm.getMaxDescent()) / 2) - 1);      }      g.setClip(0,0,width,height);    }  }  if (hasFocus()) {    paintFocus(g,focusInsets.left,focusInsets.top,size.width - (focusInsets.left + focusInsets.right) - 1,size.height - (focusInsets.top + focusInsets.bottom) - 1);  }  if (unfurled) {    unfurledChoice.repaint();  }  flush();}  }
class C{  private ValidationResult retrieveValidationResult(Message arg0){  Validate.notNull(arg0,"Message object");  com.vmware.identity.websso.client.ValidationResult extResponseVr=arg0.getValidationResult();  Validate.notNull(extResponseVr);  ValidationResult vr=null;  if (arg0.getStatus() != null && !arg0.getStatus().equals(OasisNames.SUCCESS)) {    vr=new ValidationResult(extResponseVr.getResponseCode(),arg0.getStatus(),arg0.getSubstatus());  } else {    vr=new ValidationResult(extResponseVr.getResponseCode(),extResponseVr.getStatus(),extResponseVr.getSubstatus());  }  return vr;}  }
class C{  public boolean isBottom(){  return !isValid && !isTop;}  }
class C{  public void testRandomData() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  public void focusLost(FocusEvent e){  comboBox.repaint();}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "Join.gif",BeanVisual.ICON_PATH + "Join.gif");  m_visual.setText("Join");}  }
class C{  public CLIOutputResponse copy(final CopyRequest request) throws IOException, SubversionException {  if (request.getSource().startsWith("file://") || request.getDestination().startsWith("file://")) {    throw new SubversionException("Url is not acceptable");  }  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  if (!Strings.isNullOrEmpty(request.getComment())) {    addOption(cliArgs,"--message","\"" + request.getComment() + "\"");  }  cliArgs.add("copy");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,Arrays.asList(request.getSource(),request.getDestination()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public static int size(){  return TYPE_TO_CONSTRUCTOR_MAP.size();}  }
class C{  public void pullUpdateMerge() throws IOException {  pull();  update();  merge();}  }
class C{  public OutputStreamWriter(java.io.OutputStream os,java.lang.String enc) throws java.io.UnsupportedEncodingException {}  }
class C{  public boolean retainAll(Collection<?> c){  return al.retainAll(c);}  }
class C{  public void addContainerClass(SootClass clz){  droidSafeContainerClasses.add(clz.getName());}  }
class C{  @Provides @Singleton CompletionDataSource provideCompletionDataSource(DaoSession session){  return new CompletionDataSource(session);}  }
class C{  @Override protected void createChildren(){  for (  final IDatabase database : m_databaseManager) {    add(new CDatabaseNode(getProjectTree(),this,database));  }}  }
class C{  public synchronized void finished(long chainLength){}  }
class C{  public static <T>void processClassFile(final String directory,final File pluginFile,final List<Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>> loadedPlugins,final List<Pair<String,Throwable>> failedPlugins){  try {    final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin=loadClassFile(pluginFile,directory);    if (plugin == null) {      return;    }    loadedPlugins.add(new Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>(plugin,PluginStatus.Valid));  } catch (  final Exception e) {    failedPlugins.add(new Pair<String,Throwable>(pluginFile.getAbsolutePath(),e));  }}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public Vector3fc origin(Vector3f origin){  origin.x=cx;  origin.y=cy;  origin.z=cz;  return origin;}  }
class C{  public String createJavaSignature(CtMethod overriddenMethod) throws NotFoundException {  return extractModifier(overriddenMethod) + " " + extractReturnType(overriddenMethod)+ " "+ overriddenMethod.getName()+ "("+ extractParametersAndTypes(overriddenMethod)+ ")"+ extractThrowClause(overriddenMethod);}  }
class C{  public void testErrorResponse() throws IOException {  checkResponseWithError(ErrorReason.BAD_REQUEST_DATA);  checkResponseWithError(ErrorReason.BAD_REQUEST_PROTO);  checkResponseWithError(ErrorReason.SERVICE_NOT_FOUND);  checkResponseWithError(ErrorReason.METHOD_NOT_FOUND);  checkResponseWithError(ErrorReason.RPC_ERROR);  checkResponseWithError(ErrorReason.RPC_FAILED);}  }
class C{  protected void parseDefineBitsLossless(InStream in,int length,boolean hasAlpha) throws IOException {  int id=in.readUI16();  int format=in.readUI8();  int width=in.readUI16();  int height=in.readUI16();  int size=0;switch (format) {case BITMAP_FORMAT_8_BIT:    size=in.readUI8() + 1;  break;case BITMAP_FORMAT_16_BIT:size=in.readUI16() + 1;break;case BITMAP_FORMAT_32_BIT:size=0;break;default :throw new IOException("unknown bitmap format: " + format);}byte[] data=in.read(length - (int)in.getBytesRead());ByteArrayInputStream bin=new ByteArrayInputStream(data);InflaterInputStream inflater=new InflaterInputStream(bin);InStream dataIn=new InStream(inflater);Color[] colors=hasAlpha ? new AlphaColor[size] : new Color[size];for (int i=0; i < size; i++) {colors[i]=hasAlpha ? new AlphaColor(dataIn) : new Color(dataIn);}byte[] imageData=dataIn.read();if (hasAlpha) {tagtypes.tagDefineBitsLossless2(id,format,width,height,(AlphaColor[])colors,imageData);} else {tagtypes.tagDefineBitsLossless(id,format,width,height,colors,imageData);}}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  private void drawPress(Canvas canvas){  if (shapeType == 1) {    canvas.drawCircle(width / 2,height / 2,width / 2 - 1,pressPaint);  } else   if (shapeType == 2) {    RectF rectF=new RectF(1,1,width - 1,height - 1);    canvas.drawRoundRect(rectF,radius + 1,radius + 1,pressPaint);  }}  }
class C{  public int indexOf(final BOp bop){  return args.indexOf(bop);}  }
class C{  public static boolean equals(double[][] ma,double[][] mb,double tolerance){  return new TetradMatrix(ma).equals(new TetradMatrix(mb),tolerance);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.372 -0500",hash_original_method="DB160943F37161615396A718C828E921",hash_generated_method="641D680EFB949033DE6F2B2B75BBE8E1") public static String stringForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return stringForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  public static String dump(final ConfigDescriptor descriptor){  return String.format("Configuration Descriptor:%n" + "  bLength %18d%n" + "  bDescriptorType %10d%n"+ "  wTotalLength %13d%n"+ "  bNumInterfaces %11d%n"+ "  bConfigurationValue %6d%n"+ "  iConfiguration %11d%n"+ "  bmAttributes %13s%n"+ "    %s%n"+ "%s"+ "  bMaxPower %16smA%n",descriptor.bLength(),descriptor.bDescriptorType(),descriptor.wTotalLength() & 0xffff,descriptor.bNumInterfaces() & 0xff,descriptor.bConfigurationValue() & 0xff,descriptor.iConfiguration() & 0xff,String.format("0x%02x",descriptor.bmAttributes() & 0xff),((descriptor.bmAttributes() & 64) == 0) ? "(Bus Powered)" : "Self Powered",((descriptor.bmAttributes() & 32) == 0) ? "" : String.format("    Remote Wakeup%n"),(descriptor.bMaxPower() & 0xff) * 2);}  }
class C{  public void addParamPanel(String[] parentParams,String name,AbstractParamPanel panel,boolean sort){  this.getJSplitPane().addParamPanel(parentParams,name,panel,sort);}  }
class C{  public WorldWindowGLCanvas(WorldWindow shareWith,java.awt.GraphicsDevice device,GLCapabilities capabilities,GLCapabilitiesChooser chooser){  super(capabilities,chooser,device);  if (shareWith != null)   this.setSharedContext(shareWith.getContext());  try {    this.wwd=((WorldWindowGLDrawable)WorldWind.createConfigurationComponent(AVKey.WORLD_WINDOW_CLASS_NAME));    this.wwd.initDrawable(this);    if (shareWith != null)     this.wwd.initGpuResourceCache(shareWith.getGpuResourceCache()); else     this.wwd.initGpuResourceCache(WorldWindowImpl.createGpuResourceCache());    this.createView();    this.createDefaultInputHandler();    WorldWind.addPropertyChangeListener(WorldWind.SHUTDOWN_EVENT,this);    this.wwd.endInitialization();  } catch (  Exception e) {    String message=Logging.getMessage("Awt.WorldWindowGLSurface.UnabletoCreateWindow");    Logging.logger().severe(message);    throw new WWRuntimeException(message,e);  }}  }
class C{  private void appendGeometryTaggedText(Geometry geometry,int level,Writer writer) throws IOException {  indent(level,writer);  if (geometry instanceof Point) {    Point point=(Point)geometry;    appendPointTaggedText(point.getCoordinate(),level,writer,point.getPrecisionModel());  } else   if (geometry instanceof LinearRing) {    appendLinearRingTaggedText((LinearRing)geometry,level,writer);  } else   if (geometry instanceof LineString) {    appendLineStringTaggedText((LineString)geometry,level,writer);  } else   if (geometry instanceof Polygon) {    appendPolygon((Polygon)geometry,level,writer);  } else   if (geometry instanceof MultiPoint) {    appendMultiPointTaggedText((MultiPoint)geometry,level,writer);  } else   if (geometry instanceof MultiLineString) {    appendMultiLineStringTaggedText((MultiLineString)geometry,level,writer);  } else   if (geometry instanceof MultiPolygon) {    appendMultiPolygonTaggedText((MultiPolygon)geometry,level,writer);  } else   if (geometry instanceof GeometryCollection) {    appendGeometryCollectionTaggedText((GeometryCollection)geometry,level,writer);  } else {    Assert.shouldNeverReachHere("Unsupported Geometry implementation:" + geometry.getClass());  }}  }
class C{  public Vertex decompileExpression(Vertex equation,Network network){  return decompileEquation(equation,network);}  }
class C{  public GridByteArrayList(int cap){  assert cap > 0;  data=new byte[cap];}  }
class C{  public CubicLineChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,float smoothness){  super(dataset,renderer);  mFirstMultiplier=smoothness;  mSecondMultiplier=1 - mFirstMultiplier;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:51:00.699 -0400",hash_original_method="B1F285D54415632FC56349CB92E5EDC4",hash_generated_method="EBFB6F552F5D0378D591888D173AEE16") public Builder addResolution(Resolution resolution,boolean isDefault){  if (mPrototype.mResolutions == null) {    mPrototype.mResolutions=new ArrayList<Resolution>();  }  final int insertionIndex=mPrototype.mResolutions.size();  mPrototype.mResolutions.add(resolution);  if (isDefault) {    throwIfDefaultAlreadySpecified(PROPERTY_RESOLUTION);    mPrototype.mDefaults[PROPERTY_RESOLUTION]=insertionIndex;  }  return this;}  }
class C{  public static boolean intersectPlaneSphere(float a,float b,float c,float d,float centerX,float centerY,float centerZ,float radius,Vector4f intersectionCenterAndRadius){  float invDenom=1.0f / (float)Math.sqrt(a * a + b * b + c * c);  float dist=(a * centerX + b * centerY + c * centerZ + d) * invDenom;  if (-radius <= dist && dist <= radius) {    intersectionCenterAndRadius.x=centerX + dist * a * invDenom;    intersectionCenterAndRadius.y=centerY + dist * b * invDenom;    intersectionCenterAndRadius.z=centerZ + dist * c * invDenom;    intersectionCenterAndRadius.w=(float)Math.sqrt(radius * radius - dist * dist);    return true;  }  return false;}  }
class C{  public void testSortsElementsWithValueAndNull() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom/>");  XppDom dom2=XppFactory.buildDom("<dom>value</dom>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom::text()",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom::text()",xpath.get());}  }
class C{  boolean showSurfaceRobustlyLocked(){  try {    if (mSurfaceControl != null) {      mSurfaceShown=true;      mSurfaceControl.show();      if (mWin.mTurnOnScreen) {        if (DEBUG_VISIBILITY)         Slog.v(TAG,"Show surface turning screen on: " + mWin);        mWin.mTurnOnScreen=false;        mAnimator.mBulkUpdateParams|=SET_TURN_ON_SCREEN;      }    }    return true;  } catch (  RuntimeException e) {    Slog.w(TAG,"Failure showing surface " + mSurfaceControl + " in "+ mWin,e);  }  mService.reclaimSomeSurfaceMemoryLocked(this,"show",true);  return false;}  }
class C{  @MethodDesc(description="Re-read configuration properties",usage="configure <map of properties>") public void configure(@ParamDesc(name="props",description="Optional map of properties to replace replicator.properties") Map<String,String> props) throws Exception {  try {    TungstenProperties tp;    if (props == null)     tp=null; else {      tp=new TungstenProperties(props);      logger.info("Updating properties from remote client");      if (logger.isDebugEnabled()) {        logger.debug("New properties: " + props.toString());      }    }    configure(tp);  } catch (  Exception e) {    logger.error("Configure operation failed",e);    throw new Exception("Configure operation failed: " + e.getMessage());  }}  }
class C{  public static File[] findDirectories(String directoryName,String path){  return findFiles(directoryName,path,true);}  }
class C{  public static TextureRenderer makeText(String text){  TextureRenderer textRenderer=new TextureRenderer(1,3,false);  Graphics2D g2d=textRenderer.createGraphics();  FontRenderContext frc=g2d.getFontRenderContext();  Font f=new Font("Arial",Font.BOLD,18);  String s=new String(text);  TextLayout tl=new TextLayout(s,f,frc);  Rectangle2D bounds=tl.getBounds();  int width=(int)bounds.getWidth() + 6;  int height=(int)bounds.getHeight() + 6;  textRenderer=new TextureRenderer(width,height,true);  textRenderer.setSmoothing(true);  g2d=textRenderer.createGraphics();  g2d.setColor(Color.white);  tl.draw(g2d,3,height - 3);  textRenderer.markDirty(0,0,width,height);  return textRenderer;}  }
class C{  private void validate(ManagedBeanBean bean){  String val=bean.getManagedBeanName();  if (val == null || val.length() == 0) {    Locator locator=digester.getDocumentLocator();    String documentName="UNKNOWN";    String lineNumber="UNKNWOWN";    if (locator != null) {      documentName=locator.getSystemId();      lineNumber=Integer.toString(locator.getLineNumber());    }    throw new IllegalStateException(ToolsUtil.getMessage(ToolsUtil.MANAGED_BEAN_NO_MANAGED_BEAN_NAME_ID,new Object[]{documentName,lineNumber}));  }  val=bean.getManagedBeanClass();  if (val == null || val.length() == 0) {    throw new IllegalStateException(ToolsUtil.getMessage(ToolsUtil.MANAGED_BEAN_NO_MANAGED_BEAN_CLASS_ID,new Object[]{bean.getManagedBeanName()}));  }  val=bean.getManagedBeanScope();  if (val == null || val.length() == 0) {    throw new IllegalStateException(ToolsUtil.getMessage(ToolsUtil.MANAGED_BEAN_NO_MANAGED_BEAN_SCOPE_ID,new Object[]{bean.getManagedBeanName()}));  }  if (Arrays.binarySearch(SCOPES,val) < 0) {    throw new IllegalStateException(ToolsUtil.getMessage(ToolsUtil.MANAGED_BEAN_INVALID_SCOPE_ID,new Object[]{val,bean.getManagedBeanName()}));  }  if (bean.getListEntries() != null) {    if (bean.getMapEntries() != null || bean.getManagedProperties().length != 0) {      throw new IllegalStateException(ToolsUtil.getMessage(ToolsUtil.MANAGED_BEAN_AS_LIST_CONFIG_ERROR_ID,new Object[]{bean.getManagedBeanName()}));    }  } else   if (bean.getMapEntries() != null) {    if (bean.getManagedProperties().length != 0) {      throw new IllegalStateException(ToolsUtil.getMessage(ToolsUtil.MANAGED_BEAN_AS_MAP_CONFIG_ERROR_ID,new Object[]{bean.getManagedBeanName()}));    }  }}  }
class C{  protected Keymap createKeymap(){  Keymap map=super.createKeymap();  map.addActionForKeyStroke(s_stroke,s_action);  return map;}  }
class C{  static void failQuickInInitializationIfClusterAlreadyInInconsistentState(CassandraClientPool clientPool,CassandraKeyValueServiceConfig config){  if (config.safetyDisabled()) {    log.error("Skipped checking the cassandra cluster during initialization, because safety checks are" + " disabled. Please re-enable safety checks when you are outside of your unusual" + " migration period.");    return;  }  String errorMessage="While checking the cassandra cluster during initialization, we noticed schema versions" + " could not settle. Failing quickly to avoid getting into harder to fix states (i.e. partially" + " applied patch upgrades, etc). This state is in rare cases the correct one to be in; for"+ " instance schema versions will be incapable of settling in a cluster of heterogenous"+ " Cassandra 1.2/2.0 nodes. If that is the case, disable safety checks in your Cassandra"+ " KVS preferences.";  try {    clientPool.run(null);  } catch (  TException e) {    throw new RuntimeException(errorMessage,e);  }catch (  IllegalStateException e) {    log.error(errorMessage);    throw e;  }}  }
class C{  public MutableObject(){  super();}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public void removeValue(V value){  List<V> values=maps.get(value.getClass());  if (values != null) {    values.remove(value);  }}  }
class C{  private int subParse(String text,int start,int patternCharIndex,int count,boolean obeyCount,boolean[] ambiguousYear,ParsePosition origPos,boolean useFollowingMinusSignAsDelimiter,CalendarBuilder calb){  Number number;  int value=0;  ParsePosition pos=new ParsePosition(0);  pos.index=start;  if (patternCharIndex == PATTERN_WEEK_YEAR && !calendar.isWeekDateSupported()) {    patternCharIndex=PATTERN_YEAR;  }  int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];  for (; ; ) {    if (pos.index >= text.length()) {      origPos.errorIndex=start;      return -1;    }    char c=text.charAt(pos.index);    if (c != ' ' && c != '\t') {      break;    }    ++pos.index;  }  int actualStart=pos.index;  parsing: {    if (patternCharIndex == PATTERN_HOUR_OF_DAY1 || patternCharIndex == PATTERN_HOUR1 || (patternCharIndex == PATTERN_MONTH && count <= 2) || patternCharIndex == PATTERN_YEAR || patternCharIndex == PATTERN_WEEK_YEAR) {      if (obeyCount) {        if ((start + count) > text.length()) {          break parsing;        }        number=numberFormat.parse(text.substring(0,start + count),pos);      } else {        number=numberFormat.parse(text,pos);      }      if (number == null) {        if (patternCharIndex != PATTERN_YEAR || calendar instanceof GregorianCalendar) {          break parsing;        }      } else {        value=number.intValue();        if (useFollowingMinusSignAsDelimiter && (value < 0) && (((pos.index < text.length()) && (text.charAt(pos.index) != minusSign)) || ((pos.index == text.length()) && (text.charAt(pos.index - 1) == minusSign)))) {          value=-value;          pos.index--;        }      }    }    boolean useDateFormatSymbols=useDateFormatSymbols();    int index;switch (patternCharIndex) {case PATTERN_ERA:      if (useDateFormatSymbols) {        if ((index=matchString(text,start,Calendar.ERA,formatData.getEras(),calb)) > 0) {          return index;        }      } else {        Map<String,Integer> map=getDisplayNamesMap(field,locale);        if ((index=matchString(text,start,field,map,calb)) > 0) {          return index;        }      }    break parsing;case PATTERN_WEEK_YEAR:case PATTERN_YEAR:  if (!(calendar instanceof GregorianCalendar)) {    int style=(count >= 4) ? Calendar.LONG : Calendar.SHORT;    Map<String,Integer> map=calendar.getDisplayNames(field,style,locale);    if (map != null) {      if ((index=matchString(text,start,field,map,calb)) > 0) {        return index;      }    }    calb.set(field,value);    return pos.index;  }if (count <= 2 && (pos.index - actualStart) == 2 && Character.isDigit(text.charAt(actualStart)) && Character.isDigit(text.charAt(actualStart + 1))) {  int ambiguousTwoDigitYear=defaultCenturyStartYear % 100;  ambiguousYear[0]=value == ambiguousTwoDigitYear;  value+=(defaultCenturyStartYear / 100) * 100 + (value < ambiguousTwoDigitYear ? 100 : 0);}calb.set(field,value);return pos.index;case PATTERN_MONTH:if (count <= 2) {calb.set(Calendar.MONTH,value - 1);return pos.index;}if (useDateFormatSymbols) {int newStart;if ((newStart=matchString(text,start,Calendar.MONTH,formatData.getMonths(),calb)) > 0) {return newStart;}if ((index=matchString(text,start,Calendar.MONTH,formatData.getShortMonths(),calb)) > 0) {return index;}} else {Map<String,Integer> map=getDisplayNamesMap(field,locale);if ((index=matchString(text,start,field,map,calb)) > 0) {return index;}}break parsing;case PATTERN_HOUR_OF_DAY1:if (!isLenient()) {if (value < 1 || value > 24) {break parsing;}}if (value == calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1) {value=0;}calb.set(Calendar.HOUR_OF_DAY,value);return pos.index;case PATTERN_DAY_OF_WEEK:{if (useDateFormatSymbols) {int newStart;if ((newStart=matchString(text,start,Calendar.DAY_OF_WEEK,formatData.getWeekdays(),calb)) > 0) {return newStart;}if ((index=matchString(text,start,Calendar.DAY_OF_WEEK,formatData.getShortWeekdays(),calb)) > 0) {return index;}} else {int[] styles={Calendar.LONG,Calendar.SHORT};for (int style : styles) {Map<String,Integer> map=calendar.getDisplayNames(field,style,locale);if ((index=matchString(text,start,field,map,calb)) > 0) {return index;}}}}break parsing;case PATTERN_AM_PM:if (useDateFormatSymbols) {if ((index=matchString(text,start,Calendar.AM_PM,formatData.getAmPmStrings(),calb)) > 0) {return index;}} else {Map<String,Integer> map=getDisplayNamesMap(field,locale);if ((index=matchString(text,start,field,map,calb)) > 0) {return index;}}break parsing;case PATTERN_HOUR1:if (!isLenient()) {if (value < 1 || value > 12) {break parsing;}}if (value == calendar.getLeastMaximum(Calendar.HOUR) + 1) {value=0;}calb.set(Calendar.HOUR,value);return pos.index;case PATTERN_ZONE_NAME:case PATTERN_ZONE_VALUE:{int sign=0;try {char c=text.charAt(pos.index);if (c == '+') {sign=1;} else if (c == '-') {sign=-1;}if (sign == 0) {if ((c == 'G' || c == 'g') && (text.length() - start) >= GMT.length() && text.regionMatches(true,start,GMT,0,GMT.length())) {pos.index=start + GMT.length();if ((text.length() - pos.index) > 0) {c=text.charAt(pos.index);if (c == '+') {sign=1;} else if (c == '-') {sign=-1;}}if (sign == 0) {calb.set(Calendar.ZONE_OFFSET,0).set(Calendar.DST_OFFSET,0);return pos.index;}int i=subParseNumericZone(text,++pos.index,sign,0,true,calb);if (i > 0) {return i;}pos.index=-i;} else {int i=subParseZoneString(text,pos.index,calb);if (i > 0) {return i;}pos.index=-i;}} else {int i=subParseNumericZone(text,++pos.index,sign,0,false,calb);if (i > 0) {return i;}pos.index=-i;}} catch (IndexOutOfBoundsException e) {}}break parsing;case PATTERN_ISO_ZONE:{if ((text.length() - pos.index) <= 0) {break parsing;}int sign;char c=text.charAt(pos.index);if (c == 'Z') {calb.set(Calendar.ZONE_OFFSET,0).set(Calendar.DST_OFFSET,0);return ++pos.index;}if (c == '+') {sign=1;} else if (c == '-') {sign=-1;} else {++pos.index;break parsing;}int i=subParseNumericZone(text,++pos.index,sign,count,count == 3,calb);if (i > 0) {return i;}pos.index=-i;}break parsing;default :if (obeyCount) {if ((start + count) > text.length()) {break parsing;}number=numberFormat.parse(text.substring(0,start + count),pos);} else {number=numberFormat.parse(text,pos);}if (number != null) {value=number.intValue();if (useFollowingMinusSignAsDelimiter && (value < 0) && (((pos.index < text.length()) && (text.charAt(pos.index) != minusSign)) || ((pos.index == text.length()) && (text.charAt(pos.index - 1) == minusSign)))) {value=-value;pos.index--;}calb.set(field,value);return pos.index;}break parsing;}}origPos.errorIndex=pos.index;return -1;}  }
class C{  public static CStateChange changeNode(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo,final Node oldNode){  final Node node=hitInfo.getHitNode();  if (node == oldNode) {    return new CStateChange(m_factory.createNodeHoverState(node,event),false);  } else {    m_factory.createNodeExitState(oldNode,event);    return new CStateChange(m_factory.createNodeEnterState(node,event),true);  }}  }
class C{  public final Node peepOrNull(){  return ((null != m_map) && (m_firstFree > 0)) ? m_map[m_firstFree - 1] : null;}  }
class C{  private double computeStopDistance(List<KNNHeap> heaps){  double pr_knn_distance=Double.NaN;  for (  KNNHeap knnList : heaps) {    double kdist=knnList.getKNNDistance();    pr_knn_distance=(kdist < pr_knn_distance) ? pr_knn_distance : kdist;  }  if (pr_knn_distance != pr_knn_distance) {    return Double.POSITIVE_INFINITY;  }  return pr_knn_distance;}  }
class C{  @Override public void write(DataOutput out) throws IOException {  this.check();  out.writeInt(this.size());  for (  Writable item : this) {    item.write(out);  }}  }
class C{  private void saveFollows(User user,CursoredList<Long> follows){  final User finalUser=user;  List<User> users=follows.stream().map(null).collect(Collectors.toList());  Integer pointer=0;  Integer batchSize=400;  Integer retryCount=0;  while ((batchSize * pointer) < users.size()) {    try {      followsRepository.saveFollows(users.subList((batchSize * pointer),((batchSize * pointer) + batchSize) < users.size() ? ((batchSize * pointer) + batchSize) : users.size()).stream().map(null).collect(Collectors.toSet()));      pointer++;    } catch (    Exception ex) {      if (retryCount <= 3) {        retryCount++;      } else {        throw ex;      }    }  }}  }
class C{  public boolean wasInvoked(){  checkForError();  boolean value=this.invoked;  this.invoked=false;  return value;}  }
class C{  public Ethernet(){  super();  this.vlanID=VLAN_UNTAGGED;}  }
class C{  public FacebookServiceException(FacebookRequestError error,String errorMessage){  super(errorMessage);  this.error=error;}  }
class C{  public boolean isAssertionInstruction(Instruction ins,ConstantPoolGen cpg){  if (ins instanceof InvokeInstruction) {    return isAssertionCall((InvokeInstruction)ins);  }  if (ins instanceof GETSTATIC) {    GETSTATIC getStatic=(GETSTATIC)ins;    String className=getStatic.getClassName(cpg);    String fieldName=getStatic.getFieldName(cpg);    if ("java.util.logging.Level".equals(className) && "SEVERE".equals(fieldName)) {      return true;    }    if ("org.apache.log4j.Level".equals(className) && ("ERROR".equals(fieldName) || "FATAL".equals(fieldName))) {      return true;    }    return false;  }  return false;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean isAuth(){  return this.pAuth.equals("true");}  }
class C{  public void run(){  try {    final AbstractTripleStore tripleStore=openTripleStore(fed,ITx.UNISOLATED);    final BigdataSail sail=new BigdataSail(tripleStore);    final Repository repo=new BigdataSailRepository(sail);    repo.initialize();    loadU10(repo);    repo.shutDown();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  protected void initializeAdbConnection(){  try {    AndroidDebugBridge.init(true);  } catch (  IllegalStateException e) {    if (!shouldKeepAdbAlive) {      logger.error("The IllegalStateException is not a show " + "stopper. It has been handled. This is just debug spew. Please proceed.",e);      throw new NestedException("ADB init failed",e);    }  }  bridge=AndroidDebugBridge.getBridge();  if (bridge == null) {    bridge=AndroidDebugBridge.createBridge(AndroidSdk.adb().getAbsolutePath(),false);  }  long timeout=System.currentTimeMillis() + 60000;  while (!bridge.hasInitialDeviceList() && System.currentTimeMillis() < timeout) {    try {      Thread.sleep(50);    } catch (    InterruptedException e) {      throw new RuntimeException(e);    }  }  IDevice[] devices=bridge.getDevices();  logger.info("initialDeviceList size {}",devices.length);  for (int i=0; i < devices.length; i++) {    logger.info("devices state: {},{} ",devices[i].getName(),devices[i].getState());    connectedDevices.put(devices[i],new DefaultHardwareDevice(devices[i]));  }  bridge.addDeviceChangeListener(new DeviceChangeListener(connectedDevices));}  }
class C{  private void causeResourceBundleCacheFlush(){  logln("Filling memory...");  int allocationSize=1024;  Vector memoryHog=new Vector();  try {    while (true) {      memoryHog.addElement(new byte[allocationSize]);      allocationSize*=2;    }  } catch (  Throwable e) {    logln("Caught " + e + " filling memory");  } finally {    memoryHog=null;    System.gc();  }  logln("last allocation size: " + allocationSize);}  }
class C{  public MultiSearchRequestBuilder add(SearchRequest request){  if (request.indicesOptions() == IndicesOptions.strictExpandOpenAndForbidClosed() && request().indicesOptions() != IndicesOptions.strictExpandOpenAndForbidClosed()) {    request.indicesOptions(request().indicesOptions());  }  super.request.add(request);  return this;}  }
class C{  private void resetActionBarIfApplicable(){  if (mSearchViewFragment.isVisible()) {    mCoordinatorFragment.resetActionBar();  }}  }
class C{  static public void assertEquals(String message,boolean expected,boolean actual){  assertEquals(message,Boolean.valueOf(expected),Boolean.valueOf(actual));}  }
class C{  @Override public void tupleMatched(Map<K,V> tuple){  tcount++;}  }
class C{  protected TreeMaker(Context context){  context.put(treeMakerKey,this);  this.pos=Position.NOPOS;  this.toplevel=null;  this.names=Names.instance(context);  this.syms=Symtab.instance(context);  this.types=Types.instance(context);}  }
class C{  private void checkInTransformer(ClassFileTransformer transformer){  verbosePrint("checkInTransformer: " + transformer);  if (fDelayedFailure == null) {    if (fTransformers.size() <= fTransformerIndex) {      String msg="The number of transformers that have checked in (" + (fTransformerIndex + 1) + ") is greater number of tranformers created ("+ fTransformers.size()+ ")";      fDelayedFailure=msg;      System.err.println("Delayed failure: " + msg);      verbosePrint("Delayed failure: " + msg);    }    if (!fTransformers.get(fTransformerIndex).equals(transformer)) {      String msg="Transformer " + fTransformers.get(fTransformerIndex) + " should be the same as "+ transformer;      fDelayedFailure=msg;      System.err.println("Delayed failure: " + msg);      verbosePrint("Delayed failure: " + msg);    }    fTransformerIndex++;    verbosePrint("fTransformerIndex incremented to: " + fTransformerIndex);  }}  }
class C{  public void stop() throws CqClosedException, CqException {  boolean isStopped=false;synchronized (this.cqState) {    if (this.isClosed()) {      throw new CqClosedException(LocalizedStrings.CqQueryImpl_CQ_IS_CLOSED_CQNAME_0.toLocalizedString(this.cqName));    }    if (!(this.isRunning())) {      throw new IllegalStateException(LocalizedStrings.CqQueryImpl_CQ_IS_NOT_IN_RUNNING_STATE_STOP_CQ_DOES_NOT_APPLY_CQNAME_0.toLocalizedString(this.cqName));    }    this.cqState.setState(CqStateImpl.STOPPED);    this.cqService.stats.incCqsStopped();    this.cqService.stats.decCqsActive();    if (logger.isDebugEnabled()) {      logger.debug("Successfully stopped the CQ. {}",cqName);    }  }}  }
class C{  public static int intersectPolygonRay(double[] verticesXY,double originX,double originY,double dirX,double dirY,Vector2d p){  double nearestT=Double.MAX_VALUE;  int count=verticesXY.length >> 1;  int edgeIndex=-1;  double aX=verticesXY[(count - 1) << 1], aY=verticesXY[((count - 1) << 1) + 1];  for (int i=0; i < count; i++) {    double bX=verticesXY[i << 1], bY=verticesXY[(i << 1) + 1];    double doaX=originX - aX, doaY=originY - aY;    double dbaX=bX - aX, dbaY=bY - aY;    double invDbaDir=1.0 / (dbaY * dirX - dbaX * dirY);    double t=(dbaX * doaY - dbaY * doaX) * invDbaDir;    if (t >= 0.0 && t < nearestT) {      double t2=(doaY * dirX - doaX * dirY) * invDbaDir;      if (t2 >= 0.0 && t2 <= 1.0) {        edgeIndex=(i - 1 + count) % count;        nearestT=t;        p.x=originX + t * dirX;        p.y=originY + t * dirY;      }    }    aX=bX;    aY=bY;  }  return edgeIndex;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case CURSOR_ID:return isSetCursorId();case CLOSE:return isSetClose();}throw new IllegalStateException();}  }
class C{  public KeyCrypterScrypt(int iterations){  Protos.ScryptParameters.Builder scryptParametersBuilder=Protos.ScryptParameters.newBuilder().setSalt(ByteString.copyFrom(randomSalt())).setN(iterations);  this.scryptParameters=scryptParametersBuilder.build();}  }
class C{  private void sumUsingObjectStream(){  Optional<Integer> sumQuantity=trades.stream().map(null).reduce(null);  System.out.println("Total quantity (using object stream):" + sumQuantity.get());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Plot add(String label,Accumulator accumulator,String metric){  return add(label,accumulator,metric,null);}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  public JpaRepositoryState(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.client) {    Object res=makeNetworkedCall(stack);    if (!Catbert.evalBool(res))     return Boolean.FALSE;  }  return SageTV.isPluginStartupComplete() ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static boolean activateGroupReplicas(final StorageSystem storage,final BlockObject sourceVolume,final BlockObject blockObj,final SYNC_TYPE syncType,final TaskCompleter taskCompleter,final DbClient dbClient,final SmisCommandHelper helper,final CIMObjectPathFactory cimPath) throws Exception {  boolean isSuccess=false;  String groupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(sourceVolume,dbClient);  String replicaGroupName=blockObj.getReplicationGroupInstance();  CIMObjectPath groupSynchronized=cimPath.getGroupSynchronizedPath(storage,groupName,replicaGroupName);  CIMArgument[] inArgs=null;  if (helper.checkExists(storage,groupSynchronized,false,false) != null) {    if (syncType == SYNC_TYPE.SNAPSHOT) {      inArgs=helper.getActivateGroupSnapshotInputArguments(storage,groupSynchronized);    } else     if (syncType == SYNC_TYPE.CLONE) {      inArgs=helper.getActivateGroupFullCopyInputArguments(storage,groupSynchronized);    }    CIMArgument[] outArgs=new CIMArgument[5];    helper.callModifyReplica(storage,inArgs,outArgs);    isSuccess=true;  } else {    ServiceError error=DeviceControllerErrors.smis.unableToFindSynchPath(groupName);    taskCompleter.error(dbClient,error);  }  return isSuccess;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public static int compare(Object left,boolean right) throws PageException {  if (left instanceof Boolean)   return compare(((Boolean)left).booleanValue(),right); else   if (left instanceof String)   return compare((String)left,right); else   if (left instanceof Number)   return compare(((Number)left).doubleValue(),right ? 1D : 0D); else   if (left instanceof Date)   return compare(((Date)left),right ? 1 : 0); else   if (left instanceof Castable) {    if (isComparableComponent((Castable)left))     return compareComponent((Castable)left,right);    return ((Castable)left).compareTo(right);  } else   if (left instanceof Locale)   return compare(((Locale)left),Caster.toString(right)); else   if (left == null)   return -1; else   if (left instanceof Character)   return compare(((Character)left).toString(),right); else   if (left instanceof Calendar)   return compare(((Calendar)left).getTime(),right ? 1 : 0); else   if (left instanceof TimeZone)   return compare(((TimeZone)left),Caster.toString(right)); else   return error(false,true);}  }
class C{  private void buildCommunicationSummaryStatistics(Map<String,CommunicationSummaryStatistics> stats,String index,Criteria criteria,boolean addMetrics){  if (!refresh(index)) {    return;  }  BoolQueryBuilder query=buildQuery(criteria,ElasticsearchUtil.BUSINESS_TRANSACTION_FIELD,null);  query=query.mustNot(QueryBuilders.matchQuery("internal","true"));  StatsBuilder latencyBuilder=AggregationBuilders.stats("latency").field(ElasticsearchUtil.LATENCY_FIELD);  TermsBuilder targetBuilder=AggregationBuilders.terms("target").field(ElasticsearchUtil.TARGET_FIELD).size(criteria.getMaxResponseSize()).subAggregation(latencyBuilder);  TermsBuilder sourceBuilder=AggregationBuilders.terms("source").field(ElasticsearchUtil.SOURCE_FIELD).size(criteria.getMaxResponseSize()).subAggregation(targetBuilder);  SearchRequestBuilder request=getBaseSearchRequestBuilder(COMMUNICATION_DETAILS_TYPE,index,criteria,query,0).addAggregation(sourceBuilder);  SearchResponse response=getSearchResponse(request);  for (  Terms.Bucket sourceBucket : response.getAggregations().<Terms>get("source").getBuckets()) {    Terms targets=sourceBucket.getAggregations().get("target");    CommunicationSummaryStatistics css=stats.get(sourceBucket.getKey());    if (css == null) {      css=new CommunicationSummaryStatistics();      css.setId(sourceBucket.getKey());      css.setUri(EndpointUtil.decodeEndpointURI(css.getId()));      css.setOperation(EndpointUtil.decodeEndpointOperation(css.getId(),true));      stats.put(css.getId(),css);    }    if (addMetrics) {      css.setCount(sourceBucket.getDocCount());    }    for (    Terms.Bucket targetBucket : targets.getBuckets()) {      Stats latency=targetBucket.getAggregations().get("latency");      String linkId=targetBucket.getKey();      ConnectionStatistics con=css.getOutbound().get(linkId);      if (con == null) {        con=new ConnectionStatistics();        css.getOutbound().put(linkId,con);      }      if (addMetrics) {        con.setMinimumLatency((long)latency.getMin());        con.setAverageLatency((long)latency.getAvg());        con.setMaximumLatency((long)latency.getMax());        con.setCount(targetBucket.getDocCount());      }    }  }  StatsBuilder durationBuilder=AggregationBuilders.stats("duration").field(ElasticsearchUtil.DURATION_FIELD);  TermsBuilder serviceTerm=AggregationBuilders.terms("serviceTerm").field(ElasticsearchUtil.PROPERTIES_VALUE_FIELD);  FilterAggregationBuilder propertiesServiceFilter=AggregationBuilders.filter("propertiesServiceFilter").filter(FilterBuilders.queryFilter(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(ElasticsearchUtil.PROPERTIES_NAME_FIELD,Constants.PROP_SERVICE_NAME)))).subAggregation(serviceTerm);  NestedBuilder nestedProperties=AggregationBuilders.nested("nestedProperties").path(ElasticsearchUtil.PROPERTIES_FIELD).subAggregation(propertiesServiceFilter);  TermsBuilder operationsBuilder2=AggregationBuilders.terms("operations").field(ElasticsearchUtil.OPERATION_FIELD).size(criteria.getMaxResponseSize()).subAggregation(durationBuilder).subAggregation(nestedProperties);  MissingBuilder missingOperationBuilder2=AggregationBuilders.missing("missingOperation").field(ElasticsearchUtil.OPERATION_FIELD).subAggregation(durationBuilder).subAggregation(nestedProperties);  TermsBuilder urisBuilder2=AggregationBuilders.terms("uris").field(ElasticsearchUtil.URI_FIELD).size(criteria.getMaxResponseSize()).subAggregation(operationsBuilder2).subAggregation(missingOperationBuilder2);  MissingBuilder missingUriBuilder2=AggregationBuilders.missing("missingUri").field(ElasticsearchUtil.URI_FIELD).subAggregation(operationsBuilder2).subAggregation(missingOperationBuilder2);  SearchRequestBuilder request2=getBaseSearchRequestBuilder(FRAGMENT_COMPLETION_TIME_TYPE,index,criteria,query,0);  request2.addAggregation(urisBuilder2).addAggregation(missingUriBuilder2);  SearchResponse response2=getSearchResponse(request2);  Terms completions=response2.getAggregations().get("uris");  for (  Terms.Bucket urisBucket : completions.getBuckets()) {    for (    Terms.Bucket operationBucket : urisBucket.getAggregations().<Terms>get("operations").getBuckets()) {      Stats duration=operationBucket.getAggregations().get("duration");      String id=EndpointUtil.encodeEndpoint(urisBucket.getKey(),operationBucket.getKey());      CommunicationSummaryStatistics css=stats.get(id);      if (css == null) {        css=new CommunicationSummaryStatistics();        css.setId(id);        css.setUri(urisBucket.getKey());        css.setOperation(operationBucket.getKey());        stats.put(id,css);      }      if (addMetrics) {        doAddMetrics(css,duration,operationBucket.getDocCount());      }      String serviceName=serviceName(operationBucket.getAggregations().<Nested>get("nestedProperties").getAggregations().<Filter>get("propertiesServiceFilter").getAggregations().get("serviceTerm"));      if (serviceName != null) {        css.setServiceName(serviceName);      }    }    Missing missingOp=urisBucket.getAggregations().get("missingOperation");    if (missingOp.getDocCount() > 0) {      Stats duration=missingOp.getAggregations().get("duration");      String id=urisBucket.getKey();      CommunicationSummaryStatistics css=stats.get(id);      if (css == null) {        css=new CommunicationSummaryStatistics();        css.setId(id);        css.setUri(id);        String serviceName=serviceName(missingOp.getAggregations().<Nested>get("nestedProperties").getAggregations().<Filter>get("propertiesServiceFilter").getAggregations().get("serviceTerm"));        if (serviceName != null) {          css.setServiceName(serviceName);        }        stats.put(id,css);      }      if (addMetrics) {        doAddMetrics(css,duration,missingOp.getDocCount());      }    }  }  Missing missingUri=response2.getAggregations().get("missingUri");  if (missingUri.getDocCount() > 0) {    Terms operations=missingUri.getAggregations().get("operations");    for (    Terms.Bucket operationBucket : operations.getBuckets()) {      Stats duration=operationBucket.getAggregations().get("duration");      String id=EndpointUtil.encodeEndpoint(null,operationBucket.getKey());      CommunicationSummaryStatistics css=stats.get(id);      if (css == null) {        css=new CommunicationSummaryStatistics();        css.setId(id);        css.setOperation(operationBucket.getKey());        stats.put(id,css);      }      String serviceName=serviceName(operationBucket.getAggregations().<Nested>get("nestedProperties").getAggregations().<Filter>get("propertiesServiceFilter").getAggregations().get("serviceTerm"));      if (serviceName != null) {        css.setServiceName(serviceName);      }      if (addMetrics) {        doAddMetrics(css,duration,operationBucket.getDocCount());      }    }  }}  }
class C{  public final LC maxHeight(String height){  setHeight(LayoutUtil.derive(getHeight(),null,null,ConstraintParser.parseUnitValue(height,false)));  return this;}  }
class C{  protected void createExpression(){  logger.info("Creating an expression for condition {}",condition);  for (  String expression : additionalExpressionFunctions) {    if (expression != null) {      expressionFunctions.add(expression);    }  }  expr=PojoUtils.createExpression(inClazz,condition,Boolean.class,expressionFunctions.toArray(new String[expressionFunctions.size()]));}  }
class C{  public static String[] parseDelimitedList(String list,char delimiter){  String delim="" + delimiter;  StringTokenizer st=new StringTokenizer(list + delim + " ",delim,true);  ArrayList<String> v=new ArrayList<String>();  String lastToken="";  String word="";  while (st.hasMoreTokens()) {    String tok=st.nextToken();    if (lastToken != null) {      if (tok.equals(delim)) {        word=word + lastToken;        if (lastToken.equals(delim))         tok=null;      } else {        if (!word.equals(""))         v.add(word);        word="";      }    }    lastToken=tok;  }  return v.toArray(new String[0]);}  }
class C{  public static RegistrarContact makeRegistrarContact1(){  return new RegistrarContact.Builder().setParent(makeRegistrar1()).setName("Jane Doe").setVisibleInWhoisAsAdmin(true).setVisibleInWhoisAsTech(false).setEmailAddress("janedoe@theregistrar.com").setPhoneNumber("+1.1234567890").setTypes(ImmutableSet.of(RegistrarContact.Type.ADMIN)).setGaeUserId(NEW_REGISTRAR_GAE_USER_ID).build();}  }
class C{  public HashCodeBuilder append(byte value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public void clearBindings(){}  }
class C{  public void incMessageProcessingScheduleTime(long elapsed){  if (enableClockStats) {    this.stats.incLong(messageProcessingScheduleTimeId,elapsed);  }}  }
class C{  public void rotate(float rot,float x,float y,float z){  Matrix3f tmp=new Matrix3f();  tmp.loadRotate(rot,x,y,z);  multiply(tmp);}  }
class C{  public void handleConnectionChangesUpwards(boolean finalPhase){  if (!finalPhase) {    this.startAnchor.prepareConnectionChanges();  }  if (finalPhase == this.errorState) {    try {      TypeScope scope=new TypeScope();      TypeChecker.unify("trial connection",this.startAnchor.getType(Optional.of(this)).getFresh(scope),this.endAnchor.getType().getFresh(scope));      TypeChecker.unify("connection",this.startAnchor.getType(Optional.of(this)),this.endAnchor.getType());      this.endAnchor.setErrorState(false);      this.errorState=false;    } catch (    HaskellTypeError e) {      this.endAnchor.setErrorState(true);      this.errorState=true;    }  }  this.startAnchor.handleConnectionChanges(finalPhase);}  }
class C{  HeapArrayOfDoublesQuickSelectSketch(final Memory mem,final long seed){  super(mem.getByte(NUM_VALUES_BYTE),seed);  SerializerDeserializer.validateFamily(mem.getByte(FAMILY_ID_BYTE),mem.getByte(PREAMBLE_LONGS_BYTE));  SerializerDeserializer.validateType(mem.getByte(SKETCH_TYPE_BYTE),SerializerDeserializer.SketchType.ArrayOfDoublesQuickSelectSketch);  final byte version=mem.getByte(SERIAL_VERSION_BYTE);  if (version != serialVersionUID) {    throw new SketchesArgumentException("Serial version mismatch. Expected: " + serialVersionUID + ", actual: "+ version);  }  final byte flags=mem.getByte(FLAGS_BYTE);  final boolean isBigEndian=(flags & (1 << Flags.IS_BIG_ENDIAN.ordinal())) > 0;  if (isBigEndian ^ ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN)) {    throw new SketchesArgumentException("Byte order mismatch");  }  Util.checkSeedHashes(mem.getShort(SEED_HASH_SHORT),Util.computeSeedHash(seed));  isEmpty_=(flags & (1 << Flags.IS_EMPTY.ordinal())) > 0;  nomEntries_=1 << mem.getByte(LG_NOM_ENTRIES_BYTE);  theta_=mem.getLong(THETA_LONG);  final int currentCapacity=1 << mem.getByte(LG_CUR_CAPACITY_BYTE);  lgResizeFactor_=mem.getByte(LG_RESIZE_FACTOR_BYTE);  samplingProbability_=mem.getFloat(SAMPLING_P_FLOAT);  keys_=new long[currentCapacity];  values_=new double[currentCapacity * numValues_];  final boolean hasEntries=(flags & (1 << Flags.HAS_ENTRIES.ordinal())) > 0;  count_=hasEntries ? mem.getInt(RETAINED_ENTRIES_INT) : 0;  if (count_ > 0) {    mem.getLongArray(ENTRIES_START,keys_,0,currentCapacity);    mem.getDoubleArray(ENTRIES_START + SIZE_OF_KEY_BYTES * currentCapacity,values_,0,currentCapacity * numValues_);  }  setRebuildThreshold();  lgCurrentCapacity_=Integer.numberOfTrailingZeros(currentCapacity);}  }
class C{  public CharSequenceCompiler(ProxyClassLoader loader,Iterable<String> options){  compiler=ToolProvider.getSystemJavaCompiler();  if (compiler == null) {    throw new IllegalStateException("Cannot find the system Java compiler. " + "Check that your class path includes tools.jar");  }  classLoader=new ClassLoaderImpl(loader);  diagnostics=new DiagnosticCollector<>();  final JavaFileManager fileManager=compiler.getStandardFileManager(diagnostics,null,null);  javaFileManager=new FileManagerImpl(fileManager,classLoader);  this.options=new ArrayList<>();  if (options != null) {    for (    String option : options) {      this.options.add(option);    }  }}  }
class C{  protected StoragePool checkStoragePoolExistsInDB(String poolID,DbClient _dbClient,StorageSystem device) throws IOException {  String nativeGuid=NativeGUIDGenerator.generateNativeGuid(device,poolID,NativeGUIDGenerator.POOL);  return checkStoragePoolExistsInDB(nativeGuid,_dbClient);}  }
class C{  public static void addStandardTokens(TokenFilter filter,Credentials credentials){  String username=credentials.getUsername();  if (username != null)   filter.setToken(USERNAME_TOKEN,username);  String password=credentials.getPassword();  if (password != null)   filter.setToken(PASSWORD_TOKEN,password);  addStandardTokens(filter);}  }
class C{  public UsernameField(String name){  super(name,Field.Type.USERNAME);}  }
class C{  @Override public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    e.getQueue().poll();    e.execute(r);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.768 -0500",hash_original_method="DEBCC0C268CD067DAE645A47175BAE1D",hash_generated_method="D98039D6D8600053482022790B1AD718") public void handleSslErrorRequest(LoadListener loader){  if (DebugFlags.NETWORK)   Assert.assertNotNull(loader);  if (loader != null) {    mSslErrorHandler.handleSslErrorRequest(loader);  }}  }
class C{  public DocumentAnalysisRequest addDocuments(Collection<SolrInputDocument> docs){  documents.addAll(docs);  return this;}  }
class C{  public void testToString(){  LinkedBlockingDeque q=populatedDeque(SIZE);  String s=q.toString();  for (int i=0; i < SIZE; ++i) {    assertTrue(s.indexOf(String.valueOf(i)) >= 0);  }}  }
class C{  public EntityLoadingException(String msg){  super(msg);}  }
class C{  public static boolean readBoolean(Parcel in){  return in.readInt() == 1;}  }
class C{  @Nullable public byte[] remove(SwapKey key,boolean read) throws IgniteSpiException {  assert key != null;  final Map<SwapKey,SwapValue> part=partition(key.partition(),false);  if (part == null)   return null;  SwapValue val=part.remove(key);  if (val == null)   return null;  size.addAndGet(-val.len);  cnt.decrementAndGet();  byte[] bytes=null;  if (read) {    bytes=val.value(this);    assert bytes != null;  }  removeFromFile(val);  return bytes;}  }
class C{  @Override public void forEach(Consumer<? super Map.Entry<K,V>> action){  inner.forEach(action);}  }
class C{  public InstrumentHeader createInstrumentHeader(InstrumentType instrumentType,EgwStatus status){  InstrumentHeader instrHdr=new InstrumentHeader();  instrHdr.setInstrumentAmount(BigDecimal.valueOf(1000));  instrHdr.setStatusId(status);  instrHdr.setInstrumentType(instrumentType);  User user=createUser("testUser");  instrHdr.setCreatedBy(user);  instrHdr.setCreatedDate(new Date());  instrHdr.setCreatedDate(new Date());  instrHdr.setModifiedBy(user);  instrHdr.setModifiedDate(new Date());  session.saveOrUpdate(instrHdr);  return instrHdr;}  }
class C{  public void putDouble(double x){  bb.putDouble(space-=8,x);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public void close(){  if (mpqDataInput != null)   try {    mpqDataInput.close();  } catch (  final IOException ie) {  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void endDocument() throws SAXException {  flushStartDoc();  m_resultContentHandler.endDocument();}  }
class C{  public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  ElemContext elemContext=m_elemContext;  if (elemContext.m_startTagOpen) {    closeStartTag();    elemContext.m_startTagOpen=false;  } else   if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_needToOutputDocTypeDecl) {    String n=name;    if (n == null || n.length() == 0) {      n=localName;    }    outputDocTypeDecl(n);  }  if (null != namespaceURI && namespaceURI.length() > 0) {    super.startElement(namespaceURI,localName,name,atts);    return;  }  try {    ElemDesc elemDesc=getElemDesc2(name);    int elemFlags=elemDesc.getFlags();    if (m_doIndent) {      boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;      if (m_ispreserve)       m_ispreserve=false; else       if ((null != elemContext.m_elementName) && (!m_inBlockElem || isBlockElement)) {        m_startNewLine=true;        indent();      }      m_inBlockElem=!isBlockElement;    }    if (atts != null)     addAttributes(atts);    m_isprevtext=false;    final java.io.Writer writer=m_writer;    writer.write('<');    writer.write(name);    if (m_tracer != null)     firePseudoAttributes();    if ((elemFlags & ElemDesc.EMPTY) != 0) {      m_elemContext=elemContext.push();      m_elemContext.m_elementName=name;      m_elemContext.m_elementDesc=elemDesc;      return;    } else {      elemContext=elemContext.push(namespaceURI,localName,name);      m_elemContext=elemContext;      elemContext.m_elementDesc=elemDesc;      elemContext.m_isRaw=(elemFlags & ElemDesc.RAW) != 0;    }    if ((elemFlags & ElemDesc.HEADELEM) != 0) {      closeStartTag();      elemContext.m_startTagOpen=false;      if (!m_omitMetaTag) {        if (m_doIndent)         indent();        writer.write("<META http-equiv=\"Content-Type\" content=\"text/html; charset=");        String encoding=getEncoding();        String encode=Encodings.getMimeEncoding(encoding);        writer.write(encode);        writer.write("\">");      }    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public static void convertTsvToDat(String tsvFileName,String datFileName,float radius){  ByteBuffer bbuf=convertTsvToByteBuffer(tsvFileName,radius);  try {    WWIO.saveBuffer(bbuf,new File(datFileName));  } catch (  IOException e) {    Logging.logger().log(java.util.logging.Level.SEVERE,Logging.getMessage("generic.ExceptionAttemptingToWriteTo",datFileName),e);  }}  }
class C{  @Override public boolean equals(Object key){  if (!(key instanceof HeapKey)) {    return false;  }  HeapKey<T> k=(HeapKey)key;  return ((type.equals(k.type)) && (number == k.number));}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return true;}  }
class C{  public final boolean assertByteCount(final int nbytes){  if (nbytes < 0 || nbytes > maxByteCount) {    throw new IllegalArgumentException("Maximum record length exceeded: nbytes must be in [0:" + maxByteCount + "], but was "+ nbytes);  }  return true;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(CallableStatementRegressionTest.class);}  }
class C{  public void addProtocolLines(String scriptName,InputStream is,ProtocolInteractor session) throws Exception {  BufferedReader reader=new BufferedReader(new InputStreamReader(is));  doAddProtocolLines(session,scriptName,reader);}  }
class C{  public static AnalogInput analogInput(int port){  return aiRegistrar.fetch(port,AnalogInput.class,null);}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(7,5,new Insets(0,0,0,0),-1,-1));  final Spacer spacer1=new Spacer();  contentPanel.add(spacer1,new GridConstraints(6,1,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  headerLabel=new JLabel();  this.$$$loadLabelText$$$(headerLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.Header"));  contentPanel.add(headerLabel,new GridConstraints(0,1,1,4,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.ServerUrl"));  contentPanel.add(label1,new GridConstraints(2,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  serverUrl=new JTextField();  contentPanel.add(serverUrl,new GridConstraints(2,2,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  exampleLabel=new JLabel();  this.$$$loadLabelText$$$(exampleLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.ExampleUrl"));  contentPanel.add(exampleLabel,new GridConstraints(3,2,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  signInLink=new Hyperlink();  this.$$$loadLabelText$$$(signInLink,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.Connect"));  contentPanel.add(signInLink,new GridConstraints(4,2,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  contentPanel.add(vsIcon,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  loginProgressLabel=new JLabel();  loginProgressLabel.setText("Sample Text for Busy Spinner Message");  contentPanel.add(loginProgressLabel,new GridConstraints(5,3,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  busySpinner=new BusySpinnerPanel();  contentPanel.add(busySpinner,new GridConstraints(5,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  final Spacer spacer2=new Spacer();  contentPanel.add(spacer2,new GridConstraints(5,4,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,1,null,null,null,0,false));  descriptionLabel=new WrappingLabel();  descriptionLabel.setText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.Description"));  contentPanel.add(descriptionLabel,new GridConstraints(1,1,1,4,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));}  }
class C{  @Override public FilteredBlock makeFilteredBlock(byte[] payloadBytes) throws ProtocolException {  return new FilteredBlock(params,payloadBytes);}  }
class C{  public void configureManagers(){  InstanceManager.setLightManager(new jmri.jmrix.powerline.insteon2412s.SpecificLightManager(getTrafficController()));  InstanceManager.setSensorManager(new jmri.jmrix.powerline.insteon2412s.SpecificSensorManager(getTrafficController()));  InstanceManager.setTurnoutManager(new jmri.jmrix.powerline.SerialTurnoutManager(getTrafficController()));}  }
class C{  public NumberSeq(){  empty();}  }
class C{  private void processStart(final State current){  try {    if (!isFinalStage(current)) {      sendStageProgressPatch(current,current.taskState.stage,current.taskState.subStage);    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  private void updateMenuState(int state){  if (state > Irc.STATE_OFFLINE || state == Irc.STATE_RECONNECTING) {    menu.getMenuItem("connect").setEnabled(false);  } else {    menu.getMenuItem("connect").setEnabled(true);  }  if (state > Irc.STATE_CONNECTING || state == Irc.STATE_RECONNECTING) {    menu.getMenuItem("disconnect").setEnabled(true);  } else {    menu.getMenuItem("disconnect").setEnabled(false);  }}  }
class C{  ConstantTable(Equality<? super E> equality,E[] elements){  this.equality=equality;  this.elements=elements;}  }
class C{  private void closeDatabaseConnection(Connection connection){  if (connection == null)   return;  try {    connection.close();  } catch (  SQLException e) {  }  connection=null;  return;}  }
class C{  public void addGet(byte[] rowKey,HBaseProjectionCriteria criteria){  Get get=new Get(rowKey);  if (criteria != null) {    criteria.getColumnFamilies().forEach(null);    criteria.getColumns().forEach(null);  }  this.gets.add(get);}  }
class C{  private void notifyScanResult(){synchronized (this) {    Log.v(LOG_TAG,"notify that scan results are available");    this.notify();  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  isClosed=true;  notifyAll();}  }
class C{  private void flipConditionalBranch(Instruction cb){  Instruction g=cb.nextInstructionInCodeOrder();  BranchOperand gTarget=(BranchOperand)(Goto.getTarget(g).copy());  IfCmp.setCond(cb,IfCmp.getCond(cb).flipCode());  IfCmp.setTarget(cb,gTarget);  cb.flipBranchProbability();  g.remove();}  }
class C{  public void init(){  ((CardLayout)(getLayout())).first(this);  loading=true;}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  @Override protected void onBouncerShowing(boolean showing){}  }
class C{  private boolean isAgentEmpty(Agent agent){  if (agent != null) {    String first=agent.getFirstName();    String last=agent.getLastName();    String email=agent.getEmail();    String home=agent.getHomepage();    String org=agent.getOrganisation();    String phone=agent.getPhone();    String position=agent.getPosition();    String city=null;    String street=null;    String country=null;    String code=null;    String province=null;    Address address=agent.getAddress();    if (address != null) {      city=address.getCity();      street=address.getAddress();      country=address.getCountry();      code=address.getPostalCode();      province=address.getProvince();    }    String directory=null;    String identifier=null;    List<UserId> userIds=agent.getUserIds();    if (!userIds.isEmpty()) {      UserId userId=userIds.get(0);      directory=userId.getDirectory();      identifier=userId.getIdentifier();    }    return (Strings.isNullOrEmpty(city) && Strings.isNullOrEmpty(street) && Strings.isNullOrEmpty(country)&& Strings.isNullOrEmpty(code)&& Strings.isNullOrEmpty(province)&& Strings.isNullOrEmpty(first)&& Strings.isNullOrEmpty(last)&& Strings.isNullOrEmpty(email)&& Strings.isNullOrEmpty(home)&& Strings.isNullOrEmpty(org)&& Strings.isNullOrEmpty(phone)&& Strings.isNullOrEmpty(position)&& Strings.isNullOrEmpty(directory)&& Strings.isNullOrEmpty(identifier));  }  return true;}  }
class C{  private void processMessage(Session session,JSONObject json,SocketConnection connection,Certificate shownCertificate) throws JSONException, SerialPortException, DeviceException {  String UID=json.optString("uid");  Method call=Method.findFromCall(json.optString("call"));  JSONObject params=json.optJSONObject("params");  if (params == null) {    params=new JSONObject();  }  if (call == Method.INVALID && (UID == null || UID.isEmpty())) {    session.close(4003,"Connected to incompatible QZ Tray version");    return;  }  String prompt=call.getDialogPrompt();  if (call == Method.PRINT) {    JSONObject pr=params.optJSONObject("printer");    if (pr != null) {      prompt=String.format(prompt,pr.optString("name",pr.optString("file",pr.optString("host","an undefined location"))));    } else {      sendError(session,UID,"A printer must be specified before printing");      return;    }  }  if (call.isDialogShown() && !allowedFromDialog(shownCertificate,prompt)) {    sendError(session,UID,"Request blocked");    return;  }  Short vendorId=UsbUtilities.hexToShort(params.optString("vendorId"));  Short productId=UsbUtilities.hexToShort(params.optString("productId"));switch (call) {case PRINTERS_GET_DEFAULT:    sendResult(session,UID,PrintServiceLookup.lookupDefaultPrintService().getName());  break;case PRINTERS_FIND:if (params.has("query")) {  String name=PrintServiceMatcher.getPrinterJSON(params.getString("query"));  if (name != null) {    sendResult(session,UID,name);  } else {    sendError(session,UID,"Specified printer could not be found.");  }} else {  sendResult(session,UID,PrintServiceMatcher.getPrintersJSON());}break;case PRINT:PrintingUtilities.processPrintRequest(session,UID,params);break;case SERIAL_FIND_PORTS:sendResult(session,UID,SerialUtilities.getSerialPortsJSON());break;case SERIAL_OPEN_PORT:SerialUtilities.setupSerialPort(session,UID,connection,params);break;case SERIAL_SEND_DATA:{SerialProperties props=new SerialProperties(params.optJSONObject("properties"));SerialIO serial=connection.getSerialPort(params.optString("port"));if (serial != null) {serial.sendData(props,params.optString("data"));sendResult(session,UID,null);} else {sendError(session,UID,String.format("Serial port [%s] must be opened first.",params.optString("port")));}break;}case SERIAL_CLOSE_PORT:{SerialIO serial=connection.getSerialPort(params.optString("port"));if (serial != null) {serial.close();connection.removeSerialPort(params.optString("port"));sendResult(session,UID,null);} else {sendError(session,UID,String.format("Serial port [%s] is not open.",params.optString("port")));}break;}case USB_LIST_DEVICES:sendResult(session,UID,UsbUtilities.getUsbDevicesJSON(params.getBoolean("includeHubs")));break;case USB_LIST_INTERFACES:sendResult(session,UID,UsbUtilities.getDeviceInterfacesJSON(vendorId,productId));break;case USB_LIST_ENDPOINTS:sendResult(session,UID,UsbUtilities.getInterfaceEndpointsJSON(vendorId,productId,UsbUtilities.hexToByte(params.getString("interface"))));break;case HID_LIST_DEVICES:sendResult(session,UID,HidUtilities.getHidDevicesJSON());break;case HID_START_LISTENING:if (!connection.isListening()) {connection.startListening(new HidListener(session));sendResult(session,UID,null);} else {sendError(session,UID,"Already listening HID device events");}break;case HID_STOP_LISTENING:if (connection.isListening()) {connection.stopListening();sendResult(session,UID,null);} else {sendError(session,UID,"Not already listening HID device events");}break;case USB_CLAIM_DEVICE:case HID_CLAIM_DEVICE:{if (connection.getDevice(vendorId,productId) == null) {DeviceIO device;if (call == Method.USB_CLAIM_DEVICE) {device=new UsbIO(vendorId,productId,UsbUtilities.hexToByte(params.optString("interface")));} else {device=new HidIO(vendorId,productId);}device.open();if (device.isOpen()) {connection.addDevice(vendorId,productId,device);sendResult(session,UID,null);} else {sendError(session,UID,"Failed to open connection to device");}} else {sendError(session,UID,String.format("USB Device [v:%s p:%s] is already claimed.",params.opt("vendorId"),params.opt("productId")));}break;}case USB_CLAIMED:case HID_CLAIMED:{sendResult(session,UID,connection.getDevice(vendorId,productId) != null);break;}case USB_SEND_DATA:case HID_SEND_DATA:{DeviceIO usb=connection.getDevice(vendorId,productId);if (usb != null) {usb.sendData(StringUtils.getBytesUtf8(params.optString("data")),UsbUtilities.hexToByte(params.optString("endpoint")));sendResult(session,UID,null);} else {sendError(session,UID,String.format("USB Device [v:%s p:%s] must be claimed first.",params.opt("vendorId"),params.opt("productId")));}break;}case USB_READ_DATA:case HID_READ_DATA:{DeviceIO usb=connection.getDevice(vendorId,productId);if (usb != null) {byte[] response=usb.readData(params.optInt("responseSize"),UsbUtilities.hexToByte(params.optString("endpoint")));JSONArray hex=new JSONArray();for (byte b : response) {hex.put(UsbUtil.toHexString(b));}sendResult(session,UID,hex);} else {sendError(session,UID,String.format("USB Device [v:%s p:%s] must be claimed first.",params.opt("vendorId"),params.opt("productId")));}break;}case USB_OPEN_STREAM:case HID_OPEN_STREAM:{StreamEvent.Stream stream=(call == Method.USB_OPEN_STREAM ? StreamEvent.Stream.USB : StreamEvent.Stream.HID);UsbUtilities.setupUsbStream(session,UID,connection,params,stream);break;}case USB_CLOSE_STREAM:case HID_CLOSE_STREAM:{DeviceIO usb=connection.getDevice(vendorId,productId);if (usb != null && usb.isStreaming()) {usb.setStreaming(false);sendResult(session,UID,null);} else {sendError(session,UID,String.format("USB Device [v:%s p:%s] is not streaming data.",params.opt("vendorId"),params.opt("productId")));}break;}case USB_RELEASE_DEVICE:case HID_RELEASE_DEVICE:{DeviceIO usb=connection.getDevice(vendorId,productId);if (usb != null) {usb.close();connection.removeDevice(vendorId,productId);sendResult(session,UID,null);} else {sendError(session,UID,String.format("USB Device [v:%s p:%s] is not claimed.",params.opt("vendorId"),params.opt("productId")));}break;}case WEBSOCKET_GET_NETWORK_INFO:sendResult(session,UID,NetworkUtilities.getNetworkJSON());break;case GET_VERSION:sendResult(session,UID,Constants.VERSION);break;case INVALID:default :sendError(session,UID,"Invalid function call: " + json.optString("call","NONE"));break;}}  }
class C{  protected int calculateTabHeight(int tabPlacement,int tabIndex,int fontHeight){  boolean calculate=!(tabPlacement == TOP || tabPlacement == BOTTOM);  if (getTextViewForTab(tabIndex) != null)   calculate=false;  String title=tabPane.getTitleAt(tabIndex);  int pos=title.indexOf(' ');  if (calculate && pos == -1)   calculate=false;  if (!calculate)   return super.calculateTabHeight(tabPlacement,tabIndex,fontHeight);  int height=fontHeight * 2;  Icon icon=getIconForTab(tabIndex);  Insets tabInsetsLocal=getTabInsets(tabPlacement,tabIndex);  if (icon != null)   height=Math.max(height,icon.getIconHeight());  height+=tabInsetsLocal.top + tabInsetsLocal.bottom + 2;  return height;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean generate(Projection proj){  proj.forward(llp1,pt1);  proj.forward(llp2,pt2);  double dx=pt2.x - pt1.x;  double dy=pt2.y - pt1.y;  at.setToTranslation(pt1.x,pt1.y);  at.rotate(Math.atan2(dy,dx) - angle,0,0);  double sc=Math.sqrt(dx * dx + dy * dy);  badprojection=(Double.isNaN(sc) || sc / distance * proj.getScale() > 1000000);  if (badprojection)   Debug.message("e00","badprojection " + str); else {    sc/=w;    at.scale(sc,sc);  }  return true;}  }
class C{  public String unpad(String value){  BigDecimal decimalValue=new BigDecimal(value);  BigDecimal returnDecimalValue=new BigDecimal(decimalValue.toBigInteger().subtract(BIG_OFFSET));  BigDecimal signum=new BigDecimal(returnDecimalValue.signum());  BigDecimal fractionalPart=decimalValue.remainder(BigDecimal.ONE).multiply(signum);  returnDecimalValue=returnDecimalValue.add(fractionalPart);  return returnDecimalValue.toString();}  }
class C{  static void generateProperties(EtlJobName etlJobName,int refId,long whEtlExecId,Properties props) throws IOException {  props.setProperty(Launcher.JOB_NAME_KEY,etlJobName.name());  props.setProperty(Launcher.REF_ID_KEY,String.valueOf(refId));  props.setProperty(Launcher.WH_ETL_EXEC_ID_KEY,String.valueOf(whEtlExecId));  String dirName=props.getProperty(Constant.WH_APP_FOLDER_KEY,WH_APPLICATION_DEFAULT_DIRECTORY) + "/exec";  File dir=new File(dirName);  if (!dir.exists()) {    dir.mkdir();  }  File configFile=new File(dirName,whEtlExecId + ".properties");  FileWriter writer=new FileWriter(configFile);  props.store(writer,"exec id : " + whEtlExecId + " job configurations");  writer.close();}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public void createInFile(String filePath) throws IOException {  this.inFile=new ExifInterface(filePath);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.731 -0500",hash_original_method="3025D5078B888EFD5424B85CBBC0F438",hash_generated_method="384BA42CFE36239283C0BDF358ABBAED") public static void disablePlatformNotifications(){  if (--sPlatformNotificationEnableRefCount == 0) {    if (sNetwork != null) {      sNetwork.mRequestQueue.disablePlatformNotifications();      sNetwork.stopMonitoringRoaming();    } else {      sPlatformNotifications=false;    }  }}  }
class C{  public boolean isConnected(){  return m_connectionOK;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  throw new UnsupportedOperationException(MSG.exceptionValidateNotImplemented());}  }
class C{  private void onSensorValueEnd() throws SAXException {  if (content == null) {    return;  }  content=content.trim();  if (content.equals("")) {    return;  }  int value;  try {    value=Integer.parseInt(content);  } catch (  NumberFormatException e) {    throw new SAXException(createErrorMessage("Unable to parse gx:value:" + content),e);  }  if (POWER.equals(sensorName)) {    powerList.add(value);  } else   if (HEART_RATE.equals(sensorName)) {    heartRateList.add(value);  } else   if (CADENCE.equals(sensorName)) {    cadenceList.add(value);  }}  }
class C{  public void remove(WalletData perWalletModelDataToRemove){  if (perWalletModelDataToRemove == null) {    return;  }  if (perWalletModelDataList != null) {    for (    WalletData loopPerWalletModelData : perWalletModelDataList) {      if (perWalletModelDataToRemove.getWalletFilename().equals(loopPerWalletModelData.getWalletFilename())) {        perWalletModelDataList.remove(loopPerWalletModelData);        break;      }    }  }  activeWalletModelData=new WalletData();}  }
class C{  private void orientColliders(Graph graph){  for (int k=0; k < marginalVars.size(); k++) {    Set<Node> marginalSet=marginalVars.get(k);    SepsetMapDci sepset=sepsetMaps.get(k);    for (    Node b : marginalSet) {      List<Node> adjacentNodes=new ArrayList<>();      for (      Node node : graph.getAdjacentNodes(graph.getNode(b.getName()))) {        if (marginalSet.contains(node)) {          adjacentNodes.add(node);        }      }      if (adjacentNodes.size() < 2) {        continue;      }      ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);      int[] combination;      while ((combination=cg.next()) != null) {        Node a=adjacentNodes.get(combination[0]);        Node c=adjacentNodes.get(combination[1]);        if (sepset.get(a,c) == null) {          continue;        }        if (!sepset.get(a,c).contains(b)) {          if (!isArrowpointAllowed(graph,a,b)) {            continue;          }          if (!isArrowpointAllowed(graph,c,b)) {            continue;          }          System.out.println("Check here " + k + "\n "+ sepset.get(a,c)+ "\n"+ graph+ "\n"+ b);          graph.setEndpoint(a,graph.getNode(b.getName()),Endpoint.ARROW);          graph.setEndpoint(c,graph.getNode(b.getName()),Endpoint.ARROW);        } else {          definiteNoncolliders.add(new Triple(a,b,c));        }      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void startDialActivityWithSimCheck(Context context,String phone){  if (isTelephonyEnabled(context)) {    Intent intent=new Intent(Intent.ACTION_DIAL);    intent.setData(Uri.parse("tel:" + clearPhoneText(phone)));    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(intent);  }}  }
class C{  public HttpException(int status_code,String message){  super(message);  this.statusCode=status_code;}  }
class C{  public void clearBox(){  removeExtension(GmlEnvelope.class);}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  Rectangle2D f=DialPlot.rectangleByRadius(frame,this.radius,this.radius);  Arc2D arc=new Arc2D.Double(f,this.angle,0.0,Arc2D.OPEN);  Point2D pt=arc.getStartPoint();  g2.setPaint(this.paint);  g2.setFont(this.font);  TextUtilities.drawAlignedString(this.label,g2,(float)pt.getX(),(float)pt.getY(),this.anchor);}  }
class C{  public String uploadNewNERTask1(String template,List<JCas> documentsJCas,List<JCas> goldsJCas,int useSents,int useGoldSents) throws JsonProcessingException, IOException, Exception {  Log LOG=LogFactory.getLog(getClass());  LOG.info("Creating new Job for Ner task 1.");  CrowdJob job=createJob(template);  LOG.info("Done, new job id is: " + job.getId() + ". Now generating data for NER task 1");  setAllowedCountries(job);  crowdclient.updateAllowedCountries(job);  int goldOffset=0;  List<NamedEntityTask1Data> goldData=new ArrayList<NamedEntityTask1Data>();  if (goldsJCas != null && goldsJCas.size() > 0) {    LOG.info("Gold data available, generating gold data first.");    goldData=generateTask1Data(goldsJCas,0,true,useGoldSents);    goldOffset=this.lastGoldOffset;  }  LOG.info("Generate normal task data.");  List<NamedEntityTask1Data> data=generateTask1Data(documentsJCas,goldOffset,false,useSents);  List<NamedEntityTask1Data> mergedData=new ArrayList<NamedEntityTask1Data>();  if (goldsJCas != null && goldsJCas.size() > 0) {    mergedData.addAll(goldData);  }  mergedData.addAll(data);  LOG.info("Job data prepared, starting upload.");  LOG.info("Uploading data to job #" + job.getId());  crowdclient.uploadData(job,mergedData);  LOG.info("Done, finished uploading data to #" + job.getId());  return job.getId();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @LogMessageDoc(level="INFO",message="[{id}->{id}] Synchronizing local state to remote node",explanation="Normal state resynchronization is occurring") public void antientropy(Node node){  if (!rpcService.isConnected(node.getNodeId()))   return;  logger.info("[{}->{}] Synchronizing local state to remote node",getLocalNodeId(),node.getNodeId());  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    if (Scope.LOCAL.equals(store.getScope())) {      if (node.getDomainId() != getClusterConfig().getNode().getDomainId())       continue;    } else     if (Scope.UNSYNCHRONIZED.equals(store.getScope())) {      continue;    }    IClosableIterator<Entry<ByteArray,List<Versioned<byte[]>>>> entries=store.entries();    try {      SyncMessage bsm=TProtocolUtil.getTSyncOfferMessage(store.getName(),store.getScope(),store.isPersistent());      int count=0;      while (entries.hasNext()) {        if (!rpcService.isConnected(node.getNodeId()))         return;        Entry<ByteArray,List<Versioned<byte[]>>> pair=entries.next();        KeyedVersions kv=TProtocolUtil.getTKeyedVersions(pair.getKey(),pair.getValue());        bsm.getSyncOffer().addToVersions(kv);        count+=1;        if (count >= 50) {          sendSyncOffer(node.getNodeId(),bsm);          bsm.getSyncOffer().unsetVersions();          count=0;        }      }      sendSyncOffer(node.getNodeId(),bsm);    } catch (    InterruptedException e) {      throw new RuntimeException(e);    } finally {      entries.close();    }  }}  }
class C{  public static ColladaMeshShape createTriangleMesh(List<ColladaTriangles> geometries,ColladaBindMaterial bindMaterial){  ColladaMeshShape shape=new ColladaMeshShape(geometries);  shape.bindMaterial=bindMaterial;  shape.elementType=GL.GL_TRIANGLES;  shape.vertsPerShape=3;  return shape;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Get from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doPost(request,response);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  CharacterData emText;  boolean hasChild;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(0);  emText=(CharacterData)emNode.getFirstChild();  hasChild=emText.hasChildNodes();  assertFalse("hasChild",hasChild);}  }
class C{  void flushBuffer() throws IOException {synchronized (lock) {    ensureOpen();    if (nextChar == 0)     return;    out.write(cb,0,nextChar);    nextChar=0;  }}  }
class C{  public void scannerParameters(String xml){  _log.debug("scannerParameters: " + xml);}  }
class C{  public static void buyPageIntentResponse(PendingIntent pendingIntent,Intent intent){  if (sPurchaseObserver == null) {    if (Consts.DEBUG) {      Log.d(TAG,"UI is not running");    }    return;  }  sPurchaseObserver.startBuyPageActivity(pendingIntent,intent);}  }
class C{  @Override public Eval<Object[]> toArray(){  return Eval.later(null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:55.735 -0500",hash_original_method="90AD91808DE7CDCDA112C3C449526B0F",hash_generated_method="20B10734DDA46A3CCD37EA8F56111ECD") private void handleChangeListener(RecognitionListener listener){  if (DBG)   Log.d(TAG,"handleChangeListener, listener=" + listener);  mListener.mInternalListener=listener;}  }
class C{  public String toString(){  super.toString();  StringBuffer sb=new StringBuffer("UserError: ");  sb.append(getLocalizedMessage());  if (m_fixHint != null && m_fixHint.length() > 0)   sb.append(" (").append(m_fixHint).append(")");  return sb.toString();}  }
class C{  public CycleMetaDataLimit(){  super(Options.set,"Cycle Meta Data Limit","Trigger cycle detection if the meta data volume grows to this limit",4096);}  }
class C{  @Override public void finalizeCheckpoint() throws IOException {  checkState(reader != null && safeToAckIds != null,"Cannot finalize a restored checkpoint");  try {    int n=safeToAckIds.size();    List<String> batchSafeToAckIds=new ArrayList<>(Math.min(n,ACK_BATCH_SIZE));    for (    String ackId : safeToAckIds) {      batchSafeToAckIds.add(ackId);      if (batchSafeToAckIds.size() >= ACK_BATCH_SIZE) {        reader.ackBatch(batchSafeToAckIds);        n-=batchSafeToAckIds.size();        batchSafeToAckIds=new ArrayList<>(Math.min(n,ACK_BATCH_SIZE));      }    }    if (!batchSafeToAckIds.isEmpty()) {      reader.ackBatch(batchSafeToAckIds);    }  }  finally {    checkState(reader.numInFlightCheckpoints.decrementAndGet() >= 0,"Miscounted in-flight checkpoints");    reader=null;    safeToAckIds=null;  }}  }
class C{  public boolean isRestartRequired(){  return restartRequired;}  }
class C{  public void delete(int index){  if (m_indicators[index]) {    if (m_first == index) {      m_first=m_next[index];    } else {      m_next[m_previous[index]]=m_next[index];    }    if (m_next[index] != -1) {      m_previous[m_next[index]]=m_previous[index];    }    m_indicators[index]=false;    m_number--;  }}  }
class C{  public void reset(){synchronized (lock) {    count=0;  }}  }
class C{  private String addAddJournalVolumesToCGStep(Workflow workflow,List<VolumeDescriptor> volumeDescriptors,CGRequestParams cgParams,ProtectionSystem rpSystem,String taskId) throws InternalException {  String stepId=workflow.createStepId();  Workflow.Method addJournalExecuteMethod=new Workflow.Method(METHOD_ADD_JOURNAL_STEP,rpSystem.getId(),volumeDescriptors);  Workflow.Method addJournalExecutionRollbackMethod=new Workflow.Method(METHOD_ADD_JOURNAL_ROLLBACK_STEP,rpSystem.getId());  workflow.createStep(STEP_ADD_JOURNAL_VOLUME,"Create add journal volume to consistency group subtask for RP CG: " + cgParams.getCgName(),STEP_EXPORT_ORCHESTRATION,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),addJournalExecuteMethod,addJournalExecutionRollbackMethod,stepId);  return STEP_ADD_JOURNAL_VOLUME;}  }
class C{  @SideEffectFree public void log(Level level,@Nullable String msg,@Nullable Object param1){  throw new RuntimeException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:39.561 -0500",hash_original_method="918F9BD76316B2620CCA2503ADA6AAF2",hash_generated_method="949F95E24D4D8B7381B3B7E2455D8467") public synchronized void clear(){  cookies.clear();}  }
class C{  public String toString(){  return Boolean.toString(get());}  }
class C{  public Object visit(ASTAddNode node,Object data){  return showNode(node,data);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=para[i].getParameterAsInt(); else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=para[i].getParameterAsInt(); else     if (name.equals("DateDoc")) {      p_DateDoc_From=(Timestamp)para[i].getParameter();      p_DateDoc_To=(Timestamp)para[i].getParameter_To();    } else     if (name.equals("DateRequired")) {      p_DateRequired_From=(Timestamp)para[i].getParameter();      p_DateRequired_To=(Timestamp)para[i].getParameter_To();    } else     if (name.equals("PriorityRule"))     p_PriorityRule=(String)para[i].getParameter(); else     if (name.equals("AD_User_ID"))     p_AD_User_ID=para[i].getParameterAsInt(); else     if (name.equals("M_Product_ID"))     p_M_Product_ID=para[i].getParameterAsInt(); else     if (name.equals("M_Product_Category_ID"))     p_M_Product_Category_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("M_Requisition_ID"))     p_M_Requisition_ID=para[i].getParameterAsInt(); else     if (name.equals("ConsolidateDocument"))     p_ConsolidateDocument="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static void assertEquals(BufferedImage image1,BufferedImage image2){  assertEquals("",image1,image2);}  }
class C{  final int hash(Object k){  int h=k.hashCode();  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  @LargeTest public void testMediaVideoItemExtractBoundaries() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  mediaVideoItem1.setExtractBoundaries(1000,11000);  assertEquals("Media Item Duration = StoryBoard Duration",mediaVideoItem1.getTimelineDuration(),mVideoEditor.getDuration());  try {    mediaVideoItem1.setExtractBoundaries(0,100000000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Set Extract with Invalid Values endTime > FileDuration",flagForException);  flagForException=false;  try {    mediaVideoItem1.setExtractBoundaries(100000000,11000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Set Extract with Invalid Values startTime > endTime",flagForException);  flagForException=false;  try {    mediaVideoItem1.setExtractBoundaries(0,0);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Set Extract with Invalid Values startTime = endTime",flagForException);  mediaVideoItem1.setExtractBoundaries(1000,10000);  assertTrue("Media Item Duration is still the same",(mediaVideoItem1.getTimelineDuration() == (mediaVideoItem1.getBoundaryEndTime() - mediaVideoItem1.getBoundaryBeginTime())) ? true : false);  mediaVideoItem1.setExtractBoundaries(1,mediaVideoItem1.getDuration() - 1);  assertEquals("Media Item Start Time",1,mediaVideoItem1.getBoundaryBeginTime());  assertEquals("Media Item End Time",(mediaVideoItem1.getDuration() - 1),mediaVideoItem1.getBoundaryEndTime());  mediaVideoItem1.setExtractBoundaries(1,mediaVideoItem1.getDuration());  assertEquals("Media Item Duration = StoryBoard Duration",mediaVideoItem1.getTimelineDuration(),mVideoEditor.getDuration());  mediaVideoItem1.setExtractBoundaries(0,mediaVideoItem1.getDuration() / 2);  assertEquals("Media Item Duration = StoryBoard Duration",mediaVideoItem1.getTimelineDuration(),mVideoEditor.getDuration());  mediaVideoItem1.setExtractBoundaries(0,-1);  assertEquals("Media Item Duration = StoryBoard Duration",mediaVideoItem1.getTimelineDuration(),mVideoEditor.getDuration());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int numSources(){  return DYNAMIC_SOURCES;}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  @Override public void register(EValidatorRegistrar registrar){}  }
class C{  private ClientSetup defaultClientSetup(){  if (nodeClient) {    return new NodeClientSetup(clusterName,seeds);  }  return new TransportClientSetup(clusterName,seeds);}  }
class C{  private void validateS3PropertiesLocation(S3PropertiesLocation s3PropertiesLocation){  if (s3PropertiesLocation != null) {    Assert.isTrue(StringUtils.isNotBlank(s3PropertiesLocation.getBucketName()),"S3 properties location bucket name is required");    Assert.isTrue(StringUtils.isNotBlank(s3PropertiesLocation.getKey()),"S3 properties location key is required");  }}  }
class C{  public NotificationChain basicSetDef(TransitionSpecification newDef,NotificationChain msgs){  TransitionSpecification oldDef=def;  def=newDef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.TRANSITION_ROOT__DEF,oldDef,newDef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void waitForNewEvents() throws Exception {  Thread.sleep(100);}  }
class C{  public static boolean isSuperType(ITypeBinding possibleSuperType,ITypeBinding type,boolean considerTypeArguments){  if (type.isArray() || type.isPrimitive()) {    return false;  }  if (!considerTypeArguments) {    type=type.getTypeDeclaration();  }  if (Bindings.equals(type,possibleSuperType)) {    return true;  }  ITypeBinding superClass=type.getSuperclass();  if (superClass != null) {    if (isSuperType(possibleSuperType,superClass,considerTypeArguments)) {      return true;    }  }  if (possibleSuperType.isInterface()) {    ITypeBinding[] superInterfaces=type.getInterfaces();    for (int i=0; i < superInterfaces.length; i++) {      if (isSuperType(possibleSuperType,superInterfaces[i],considerTypeArguments)) {        return true;      }    }  }  return false;}  }
class C{  public static <T>List<T> singletonList(T o){  return new SingletonList<>(o);}  }
class C{  @Nullable public static String readTextFileFromRawResource(@NonNull final Context context,@RawRes final int resId){  final BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(context.getResources().openRawResource(resId)));  String line;  final StringBuilder body=new StringBuilder();  try {    while ((line=bufferedReader.readLine()) != null) {      body.append(line).append('\n');    }  } catch (  IOException e) {    return null;  }  return body.toString();}  }
class C{  public Stemmer(Dictionary dictionary){  this.dictionary=dictionary;  this.affixReader=new ByteArrayDataInput(dictionary.affixData);  for (int level=0; level < 3; level++) {    if (dictionary.prefixes != null) {      prefixArcs[level]=new FST.Arc<>();      prefixReaders[level]=dictionary.prefixes.getBytesReader();    }    if (dictionary.suffixes != null) {      suffixArcs[level]=new FST.Arc<>();      suffixReaders[level]=dictionary.suffixes.getBytesReader();    }  }  formStep=dictionary.hasStemExceptions ? 2 : 1;}  }
class C{  public CDebuggerListener(final CRemoteFileBrowser browser,final ILoaderThread thread){  m_browser=browser;  m_thread=thread;}  }
class C{  public static Logger.Factory tagFactory(){  return TagLoggerFactory.instance();}  }
class C{  public Transition nextTransition(final long instant,final int saveMillis){  Chronology chrono=ISOChronology.getInstanceUTC();  Rule nextRule=null;  long nextMillis=Long.MAX_VALUE;  Iterator<Rule> it=iRules.iterator();  while (it.hasNext()) {    Rule rule=it.next();    long next=rule.next(instant,iStandardOffset,saveMillis);    if (next <= instant) {      it.remove();      continue;    }    if (next <= nextMillis) {      nextRule=rule;      nextMillis=next;    }  }  if (nextRule == null) {    return null;  }  if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {    return null;  }  if (iUpperYear < Integer.MAX_VALUE) {    long upperMillis=iUpperOfYear.setInstant(iUpperYear,iStandardOffset,saveMillis);    if (nextMillis >= upperMillis) {      return null;    }  }  return new Transition(nextMillis,nextRule,iStandardOffset);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void removeTag(int position){  onRemoveTag(position);  postInvalidate();}  }
class C{  public static List<BatchWriteItemRequest> splitResultIntoBatches(ScanResult result,String tableName){  List<BatchWriteItemRequest> batches=new LinkedList<BatchWriteItemRequest>();  Iterator<Map<String,AttributeValue>> it=result.getItems().iterator();  BatchWriteItemRequest req=new BatchWriteItemRequest().withReturnConsumedCapacity(ReturnConsumedCapacity.TOTAL);  List<WriteRequest> writeRequests=new LinkedList<WriteRequest>();  int i=0;  while (it.hasNext()) {    PutRequest put=new PutRequest(it.next());    writeRequests.add(new WriteRequest(put));    i++;    if (i == BootstrapConstants.MAX_BATCH_SIZE_WRITE_ITEM) {      req.addRequestItemsEntry(tableName,writeRequests);      batches.add(req);      req=new BatchWriteItemRequest().withReturnConsumedCapacity(ReturnConsumedCapacity.TOTAL);      writeRequests=new LinkedList<WriteRequest>();      i=0;    }  }  if (i > 0) {    req.addRequestItemsEntry(tableName,writeRequests);    batches.add(req);  }  return batches;}  }
class C{  private void handleBillingNotification(TriggerProcess process) throws IOException, WSDLException, ParserConfigurationException {  INotificationServiceAdapter serviceClient=getServiceClient(process.getTriggerDefinition());  String billingResultXML=getParamValue(process.getParamValueForName(TriggerProcessParameterName.XML_BILLING_DATA),String.class);  serviceClient.billingPerformed(billingResultXML);  updateProcessState(process);}  }
class C{  public void executeFallback(TransformerImpl transformer) throws TransformerException {  int parentElemType=m_parentNode.getXSLToken();  if (Constants.ELEMNAME_EXTENSIONCALL == parentElemType || Constants.ELEMNAME_UNDEFINED == parentElemType) {    transformer.executeChildTemplates(this,true);  } else {    System.out.println("Error!  parent of xsl:fallback must be an extension or unknown element!");  }}  }
class C{  public void addParser(Parser parser){  if (parser != null && !parsers.contains(parser)) {    if (running) {      timer.stop();    }    parsers.add(parser);    if (parsers.size() == 1) {      ToolTipManager.sharedInstance().registerComponent(textArea);    }    if (running) {      timer.restart();    }  }}  }
class C{  protected synchronized void bcsPreDeserializationHook(ObjectInputStream ois) throws IOException, ClassNotFoundException {  serializable=ois.readInt();  int count=serializable;  while (count > 0) {    services.put(ois.readObject(),ois.readObject());    count--;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.991 -0500",hash_original_method="7472D0A01C250CDB4203128D331B50ED",hash_generated_method="AE763BADC02EAD29BBA2436A031207CD") public static String valueOf(int value){  String str=new String();  str.addTaint(value);  return str;}  }
class C{  public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){  int blockLen=(lineLen * 3) / 4;  if (blockLen <= 0)   throw new IllegalArgumentException();  int lines=(iLen + blockLen - 1) / blockLen;  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();  StringBuilder buf=new StringBuilder(bufLen);  int ip=0;  while (ip < iLen) {    int l=Math.min(iLen - ip,blockLen);    buf.append(encode(in,iOff + ip,l));    buf.append(lineSeparator);    ip+=l;  }  return buf.toString();}  }
class C{  protected Entry(int hash,int key,Object value,Entry next){  this.hash=hash;  this.key=key;  this.value=value;  this.next=next;}  }
class C{  private String[] extractEidAndEmail(Uri uri){  try {    String eidParam=uri.getQueryParameter("eid");    if (debug)     Log.d(TAG,"eid=" + eidParam);    if (eidParam == null) {      return null;    }    byte[] decodedBytes=Base64.decode(eidParam,Base64.DEFAULT);    if (debug)     Log.d(TAG,"decoded eid=" + new String(decodedBytes));    for (int spacePosn=0; spacePosn < decodedBytes.length; spacePosn++) {      if (decodedBytes[spacePosn] == ' ') {        int emailLen=decodedBytes.length - spacePosn - 1;        if (spacePosn == 0 || emailLen < 3) {          break;        }        String domain=null;        if (decodedBytes[decodedBytes.length - 2] == '@') {          emailLen--;switch (decodedBytes[decodedBytes.length - 1]) {case 'm':            domain="gmail.com";          break;case 'g':        domain="group.calendar.google.com";      break;case 'h':    domain="holiday.calendar.google.com";  break;case 'i':domain="import.calendar.google.com";break;case 'v':domain="group.v.calendar.google.com";break;default :Log.wtf(TAG,"Unexpected one letter domain: " + decodedBytes[decodedBytes.length - 1]);domain="%";break;}}String eid=new String(decodedBytes,0,spacePosn);String email=new String(decodedBytes,spacePosn + 1,emailLen);if (debug) Log.d(TAG,"eid=   " + eid);if (debug) Log.d(TAG,"email= " + email);if (debug) Log.d(TAG,"domain=" + domain);if (domain != null) {email+=domain;}return new String[]{eid,email};}}} catch (RuntimeException e) {Log.w(TAG,"Punting malformed URI " + uri);}return null;}  }
class C{  public boolean isSetCategory(){  return this.category != null;}  }
class C{  public static Date strToDateMM_dd_ss(String datestr){  Date date=null;  try {    SimpleDateFormat fmt=new SimpleDateFormat(MM_dd_HH_mm_ss);    date=fmt.parse(datestr);  } catch (  Exception e) {    return date;  }  return date;}  }
class C{  public void writeNetworkStatisticsToConsole(){  LOG.info("---------------------  Graph statistics  -------------------");  LOG.info("     Number of vertices: " + this.getNumberOfNodes());  LOG.info("         Number of arcs: " + this.getNumberOfEdges());  LOG.info("            Density (%): " + String.format("%01.6f",(this.getNumberOfEdges()) / Math.pow(getNumberOfNodes(),2) * 100.0));  LOG.info(" Network build time (s): " + String.format("%.2f",((double)this.buildEndTime - (double)this.buildStartTime) / 1000));  LOG.info("------------------------------------------------------------");}  }
class C{  public boolean isTrailer(){  return trailer;}  }
class C{  public IfStmt newIfStmt(Value condition,Unit target){  return new JIfStmt(condition,target);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int findOptimalSampleSize(int originalSmallerExtent,int targetExtent){  if (targetExtent < 1)   return 1;  if (originalSmallerExtent < 1)   return 1;  int extent=originalSmallerExtent;  int sampleSize=1;  while ((extent >> 1) >= targetExtent * 0.8f) {    sampleSize<<=1;    extent>>=1;  }  return sampleSize;}  }
class C{  public FloatArrayList top(int n){  FloatArrayList top=new FloatArrayList();  float[] values=data.toFloatArray();  FloatArrays.parallelQuickSort(values,reverseFloatComparator);  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  @NonNls @NotNull public static StringBuilder createProductInfo(){  final StringBuilder ret=new StringBuilder("\n");  ret.append("Product Infos");  ret.append("\n    FindBugs: ").append(FindBugsUtil.getFindBugsFullVersion());  ret.append("\n    FindBugs-IDEA: ").append(VersionManager.getFullVersion());  boolean ideaVersionAvailable=false;  try {    final ApplicationInfoEx appInfo=ApplicationInfoEx.getInstanceEx();    if (appInfo != null) {      ret.append("\n    IDEA: ").append(appInfo.getFullApplicationName());      ret.append("\n    IDEA-Build: ").append(appInfo.getBuild().asString());      final Calendar cal=appInfo.getBuildDate();      ret.append(", ").append(DateFormatUtil.formatAboutDialogDate(cal.getTime()));      if (appInfo.getBuild().isSnapshot()) {        ret.append(" ").append(new SimpleDateFormat("HH:mm, ").format(cal.getTime()));      }      ideaVersionAvailable=true;    }  } catch (  final Throwable e) {    e.printStackTrace();  }  if (!ideaVersionAvailable) {    ret.append("\n    IDEA: [Please type IDEA version here]");  }  final Properties systemProps=System.getProperties();  final String javaVersion=systemProps.getProperty("java.runtime.version",systemProps.getProperty("java.version","unknown"));  final String arch=systemProps.getProperty("os.arch","");  ret.append("\n    JRE: ").append(javaVersion).append(" ").append(arch);  final String vmVersion=systemProps.getProperty("java.vm.name","unknown");  final String vmVendor=systemProps.getProperty("java.vendor","unknown");  ret.append("\n    JVM: ").append(vmVersion).append(" ").append(vmVendor);  return ret;}  }
class C{  public Zipper<A> backwards() throws NoSuchElementException {  return new Zipper<>(front.tail(),back.plus(front.head()),position - 1);}  }
class C{  void writeSkeleton(IndentingWriter p) throws IOException {  if (version == StubVersion.V1_2) {    throw new AssertionError("should not generate skeleton for version " + version);  }  p.pln("// Skeleton class generated by rmic, do not edit.");  p.pln("// Contents subject to change without notice.");  p.pln();  if (!packageName.equals("")) {    p.pln("package " + packageName + ";");    p.pln();  }  p.plnI("public final class " + skeletonClassSimpleName);  p.pln("implements " + SKELETON);  p.pOlnI("{");  writeOperationsArray(p);  p.pln();  writeInterfaceHash(p);  p.pln();  p.plnI("public " + OPERATION + "[] getOperations() {");  p.pln("return (" + OPERATION + "[]) operations.clone();");  p.pOln("}");  p.pln();  p.plnI("public void dispatch(" + REMOTE + " obj, "+ REMOTE_CALL+ " call, int opnum, long hash)");  p.pln("throws java.lang.Exception");  p.pOlnI("{");  if (version == StubVersion.VCOMPAT) {    p.plnI("if (opnum < 0) {");    if (remoteMethods.length > 0) {      for (int opnum=0; opnum < remoteMethods.length; opnum++) {        if (opnum > 0)         p.pO("} else ");        p.plnI("if (hash == " + remoteMethods[opnum].methodHash() + "L) {");        p.pln("opnum = " + opnum + ";");      }      p.pOlnI("} else {");    }    p.pln("throw new " + UNMARSHAL_EXCEPTION + "(\"invalid method hash\");");    if (remoteMethods.length > 0) {      p.pOln("}");    }    p.pOlnI("} else {");  }  p.plnI("if (hash != interfaceHash)");  p.pln("throw new " + SKELETON_MISMATCH_EXCEPTION + "(\"interface hash mismatch\");");  p.pO();  if (version == StubVersion.VCOMPAT) {    p.pOln("}");  }  p.pln();  if (!remoteClass.classDoc().isPrivate()) {    p.pln(remoteClass.classDoc().qualifiedName() + " server = (" + remoteClass.classDoc().qualifiedName()+ ") obj;");  }  p.plnI("switch (opnum) {");  for (int opnum=0; opnum < remoteMethods.length; opnum++) {    writeSkeletonDispatchCase(p,opnum);  }  p.pOlnI("default:");  p.pln("throw new " + UNMARSHAL_EXCEPTION + "(\"invalid method number\");");  p.pOln("}");  p.pOln("}");  p.pOln("}");}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  protected void determineCoverageGoals(){  List<BranchCoverageTestFitness> goals=new BranchCoverageFactory().getCoverageGoals();  for (  BranchCoverageTestFitness goal : goals) {    if (goal.getBranch() != null) {      if (goal.getBranch().isInstrumented()) {        continue;      }    }    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);    if (goal.getBranch() == null) {      branchlessMethodCoverageMap.put(goal.getClassName() + "." + goal.getMethod(),goal);    } else {      branchesId.add(goal.getBranch().getActualBranchId());      if (goal.getBranchExpressionValue())       branchCoverageTrueMap.put(goal.getBranch().getActualBranchId(),goal); else       branchCoverageFalseMap.put(goal.getBranch().getActualBranchId(),goal);    }  }  totalGoals=goals.size();}  }
class C{  public void initialize(PlaylistItem item){  super.initialize(item);  sizeHolder=new SizeHolder(item.getFileSize());  exists=new File(item.getFilePath()).exists();  bitrate=initializer.getTrackBitrate();  if (bitrate != null && bitrate.length() > 0 && !bitrate.endsWith(" kbps")) {    bitrate=bitrate + " kbps";  }  this.nameCell=new NameHolder(initializer.getTrackTitle());  this.actionsHolder=new LibraryActionsHolder(this,false);}  }
class C{  public static String generateStringOfLength(int length){  StringBuilder sb=new StringBuilder();  while (--length >= 0) {    sb.append((char)(random.nextInt(52) + 65));  }  return sb.toString();}  }
class C{  public static ValueLob openUnlinked(int type,int tableId,int objectId,long precision,String fileName){  return new ValueLob(type,fileName,tableId,objectId,false,precision);}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public boolean isSyncEnabled(){  return syncEnabled;}  }
class C{  public static String encodeBase64String(final byte[] binaryData){  return newStringUtf8(encodeBase64(binaryData,false));}  }
class C{  public String kernelTipText(){  return "The kernel to use.";}  }
class C{  public ProjectTriangulate(Projector projector){  super(projector);}  }
class C{  public SubscriberObject(SubscriberObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.subscribeId=parent.getSubscribeId();  this.subscribeType=parent.getSubscribeType();  this.companyId=parent.getCompanyId();}  }
class C{  public DelphiRuleViolation(DelphiRule delphiRule,RuleContext ctx,String delphiClassName,String delphiMethodName,String delphiPackageName,int line,int column,String msg){  rule=delphiRule;  filename=ctx.getSourceCodeFile().getAbsolutePath();  description=rule.getMessage();  className=delphiClassName;  methodName=delphiMethodName;  packageName=delphiPackageName;  beginLine=line;  endLine=line;  beginColumn=column;  endColumn=column;  description=msg;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.TRIGGER;}  }
class C{  static long lastModifiedOfSymLink(File link) throws IOException {  BasicFileAttributes attrs=Files.readAttributes(link.toPath(),BasicFileAttributes.class,NOFOLLOW_LINKS);  assertTrue(attrs.isSymbolicLink());  return attrs.lastModifiedTime().toMillis();}  }
class C{  public void postPreBreedingExchangeStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].postPreBreedingExchangeStatistics(state);}  }
class C{  public FluentSupplier<R> log(final Consumer<String> logger,final Consumer<Throwable> error){  return FluentFunctions.of(null);}  }
class C{  public void addMessageListener(MessageListener ml){  this.messageListeners.add(ml);}  }
class C{  public boolean isLoad(){  if (hasNoSteps()) {    return false;  }  return !getStart().isWater() && getEnd().isWater();}  }
class C{  public void addRow(double[] newRow){  double[][] matActivations=new double[1][newRow.length];  matActivations[0]=newRow;  if (inputData == null) {    inputData=new double[1][newRow.length];    inputData=matActivations;  } else {    double newInputData[][]=Utils.concatenate(inputData,matActivations);    inputData=newInputData;  }}  }
class C{  @Deprecated protected void onTopic(String channel,String topic){}  }
class C{  public void invite(String user,String reason){  invite(new Message(),user,reason);}  }
class C{  public static Instances makePartitionDataset(Instances D,int part[]) throws Exception {  return makePartitionDataset(D,part,0,0);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void removeColumn(Column column){  if (column != null) {    columns.remove(column);  }}  }
class C{  public boolean isMaxXSet(int scale){  return mMaxX[scale] != -MathHelper.NULL_VALUE;}  }
class C{  final int compareTo(int number){  if (start > number)   return 1; else   if (end < number)   return -1; else   return 0;}  }
class C{  public <U extends T,A,B,C>InitialMatching3<T,U,A,B,C> when(DecomposableMatchBuilder3<U,A,B,C> decomposableMatchBuilder){  return new InitialMatching3<>(decomposableMatchBuilder.build(),value);}  }
class C{  private PCollection<KV<Integer,String>> createInput(String name,Pipeline p,List<KV<Integer,String>> list){  return createInput(name,p,list,new ArrayList<Long>());}  }
class C{  private static int findSubdivPoints(final Curve c,float[] pts,float[] ts,final int type,final float w){  final float x12=pts[2] - pts[0];  final float y12=pts[3] - pts[1];  if (y12 != 0f && x12 != 0f) {    final float hypot=(float)sqrt(x12 * x12 + y12 * y12);    final float cos=x12 / hypot;    final float sin=y12 / hypot;    final float x1=cos * pts[0] + sin * pts[1];    final float y1=cos * pts[1] - sin * pts[0];    final float x2=cos * pts[2] + sin * pts[3];    final float y2=cos * pts[3] - sin * pts[2];    final float x3=cos * pts[4] + sin * pts[5];    final float y3=cos * pts[5] - sin * pts[4];switch (type) {case 8:      final float x4=cos * pts[6] + sin * pts[7];    final float y4=cos * pts[7] - sin * pts[6];  c.set(x1,y1,x2,y2,x3,y3,x4,y4);break;case 6:c.set(x1,y1,x2,y2,x3,y3);break;default :}} else {c.set(pts,type);}int ret=0;ret+=c.dxRoots(ts,ret);ret+=c.dyRoots(ts,ret);if (type == 8) {ret+=c.infPoints(ts,ret);}ret+=c.rootsOfROCMinusW(ts,ret,w,0.0001f);ret=Helpers.filterOutNotInAB(ts,0,ret,0.0001f,0.9999f);Helpers.isort(ts,0,ret);return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.125 -0500",hash_original_method="58113BBBA3D76308CFB19C46D0FF7A27",hash_generated_method="4ADDCA2C43F67377B35C89EE4966ED54") public AcceptEncodingHeader createAcceptEncodingHeader(String encoding) throws ParseException {  if (encoding == null)   throw new NullPointerException("the encoding parameter is null");  AcceptEncoding acceptEncoding=new AcceptEncoding();  acceptEncoding.setEncoding(encoding);  return acceptEncoding;}  }
class C{  public Pow(){  super("pow",2);}  }
class C{  public String asString(){  String s=rows + " * " + columns+ " matrix\n";  for (int i=0; i < rows; i++) {    String build="";    for (int j=0; j < columns; j++) {      build+="\t " + MathHelper.round(values[i][j],2);    }    s+=build;    if (i != rows - 1)     s+="\n";  }  return s;}  }
class C{  protected void fireToolStarted(DrawingView view){  ToolEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ToolListener.class) {      if (event == null) {        event=new ToolEvent(this,view,new Rectangle(0,0,-1,-1));      }      ((ToolListener)listeners[i + 1]).toolStarted(event);    }  }}  }
class C{  public static IEditorPart openEditor(IProject project,String className,boolean activate){  IFile file=getFile(project,className);  IEditorPart openEditor=null;  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();  try {    if (file != null) {      IEditorInput input=new FileEditorInput(file);      String id=getEditorId(file.getName());      openEditor=page.openEditor(input,id,activate);    } else {      IFileStore fileStore=getFileStore(className);      ;      if (fileStore != null) {        IEditorInput input=new FileStoreEditorInput(fileStore);        String id=getEditorId(fileStore.getName());        openEditor=page.openEditor(input,id,activate);      }    }  } catch (  Exception ex) {    ex.printStackTrace();  }  if (openEditor == null) {    error("Failed to find Java source for class " + className);  }  return openEditor;}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("processtemplate") @Valid ProcessTemplate processTemplate,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    processTemplate.setAddTS(DateConverter.stringToDate(processTemplate.getTableAddTS()));    com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate jpaProcessTemplate=new com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate();    jpaProcessTemplate.setProcessTemplateId(processTemplate.getProcessTemplateId());    jpaProcessTemplate.setDescription(processTemplate.getDescription());    jpaProcessTemplate.setProcessName(processTemplate.getProcessName());    jpaProcessTemplate.setBatchCutPattern(processTemplate.getBatchPattern());    jpaProcessTemplate.setAddTs(processTemplate.getAddTS());    if (processTemplate.getCanRecover() == null)     jpaProcessTemplate.setCanRecover(true); else     jpaProcessTemplate.setCanRecover(processTemplate.getCanRecover());    if (processTemplate.getDeleteFlag() == null)     jpaProcessTemplate.setDeleteFlag(false); else     jpaProcessTemplate.setDeleteFlag(processTemplate.getDeleteFlag());    jpaProcessTemplate.setNextProcessTemplateId(processTemplate.getNextProcessTemplateId());    ProcessType processType=processTypeDAO.get(processTemplate.getProcessTypeId());    jpaProcessTemplate.setProcessType(processType);    if (processTemplate.getParentProcessId() != null) {      com.wipro.ats.bdre.md.dao.jpa.ProcessTemplate pt=processTemplateDAO.get(processTemplate.getParentProcessId());      jpaProcessTemplate.setProcessTemplate(pt);    } else {      jpaProcessTemplate.setProcessTemplate(null);    }    WorkflowType workflowType=workflowTypeDAO.get(processTemplate.getWorkflowId());    jpaProcessTemplate.setWorkflowType(workflowType);    BusDomain busDomain=busDomainDAO.get(processTemplate.getBusDomainId());    jpaProcessTemplate.setBusDomain(busDomain);    processTemplateDAO.update(jpaProcessTemplate);    restWrapper=new RestWrapper(processTemplate,RestWrapper.OK);    LOGGER.info("Record with ID:" + processTemplate.getProcessTemplateId() + " updated in BatchStatus by User:"+ principal.getName()+ processTemplate);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  public PLSceneElementBase(){  super();}  }
class C{  public void publishAsGAMAWarning(final String header){  if (warning2count.isEmpty()) {    return;  }  if (header != null && !header.isEmpty() && warning2count.size() > 1) {    GAMA.reportError(GAMA.getRuntimeScope(),GamaRuntimeException.error(header),true);  }  warning2count.forEachEntry(null);}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  private long acquireRead(boolean interruptible,long deadline){  WNode node=null, p;  for (int spins=-1; ; ) {    WNode h;    if ((h=whead) == (p=wtail)) {      for (long m, s, ns; ; ) {        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L))         return ns; else         if (m >= WBIT) {          if (spins > 0) {            if (LockSupport.nextSecondarySeed() >= 0)             --spins;          } else {            if (spins == 0) {              WNode nh=whead, np=wtail;              if ((nh == h && np == p) || (h=nh) != (p=np))               break;            }            spins=SPINS;          }        }      }    }    if (p == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(RMODE,p); else     if (h == p || p.mode != RMODE) {      if (node.prev != p)       node.prev=p; else       if (U.compareAndSwapObject(this,WTAIL,p,node)) {        p.next=node;        break;      }    } else     if (!U.compareAndSwapObject(p,WCOWAIT,node.cowait=p.cowait,node))     node.cowait=null; else {      for (; ; ) {        WNode pp, c;        Thread w;        if ((h=whead) != null && (c=h.cowait) != null && U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);        if (h == (pp=p.prev) || h == p || pp == null) {          long m, s, ns;          do {            if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L))             return ns;          } while (m < WBIT);        }        if (whead == h && p.prev == pp) {          long time;          if (pp == null || h == p || p.status > 0) {            node=null;            break;          }          if (deadline == 0L)           time=0L; else           if ((time=deadline - System.nanoTime()) <= 0L)           return cancelWaiter(node,p,false);          Thread wt=Thread.currentThread();          U.putObject(wt,PARKBLOCKER,this);          node.thread=wt;          if ((h != pp || (state & ABITS) == WBIT) && whead == h && p.prev == pp)           U.park(false,time);          node.thread=null;          U.putObject(wt,PARKBLOCKER,null);          if (interruptible && Thread.interrupted())           return cancelWaiter(node,p,true);        }      }    }  }  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long m, s, ns;        if ((m=(s=state) & ABITS) < RFULL ? U.compareAndSwapLong(this,STATE,s,ns=s + RUNIT) : (m < WBIT && (ns=tryIncReaderOverflow(s)) != 0L)) {          WNode c;          Thread w;          whead=node;          node.prev=null;          while ((c=node.cowait) != null) {            if (U.compareAndSwapObject(node,WCOWAIT,c,c.cowait) && (w=c.thread) != null)             U.unpark(w);          }          return ns;        } else         if (m >= WBIT && LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) == WBIT) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);      }    }  }}  }
class C{  public static UPSCoord fromUPS(String hemisphere,double easting,double northing,Globe globe){  final UPSCoordConverter converter=new UPSCoordConverter(globe);  long err=converter.convertUPSToGeodetic(hemisphere,easting,northing);  if (err != UTMCoordConverter.UTM_NO_ERROR) {    String message=Logging.getMessage("Coord.UTMConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new UPSCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),hemisphere,easting,northing);}  }
class C{  private char dataSavePO(int Record_ID) throws Exception {  log.fine("ID=" + Record_ID);  Object[] rowData=getDataAtRow(m_rowChanged);  MTable table=MTable.get(m_ctx,m_AD_Table_ID);  PO po=null;  if (Record_ID != -1)   po=table.getPO(Record_ID,null); else   po=table.getPO(getWhereClause(rowData),null);  if (po == null)   throw new ClassNotFoundException("No Persistent Object");  int size=m_fields.size();  for (int col=0; col < size; col++) {    GridField field=(GridField)m_fields.get(col);    if (field.isVirtualColumn())     continue;    String columnName=field.getColumnName();    Object value=rowData[col];    Object oldValue=m_rowData[col];    if (field.getDisplayType() == DisplayType.RowID)     ; else     if (oldValue == null && value == null)     ; else     if (m_inserting || isValueChanged(oldValue,value)) {      int poIndex=po.get_ColumnIndex(columnName);      if (poIndex < 0) {        po.set_CustomColumn(columnName,value);        continue;      }      Object dbValue=po.get_Value(poIndex);      if (m_inserting || !m_compareDB || (oldValue == null && dbValue == null)|| (oldValue != null && oldValue.equals(dbValue))|| (value == null && dbValue == null)|| (value != null && value.equals(dbValue))|| ((oldValue.getClass().equals(byte[].class) && dbValue.getClass().equals(byte[].class)) && Arrays.equals((byte[])oldValue,(byte[])dbValue))|| ((value.getClass().equals(byte[].class) && dbValue.getClass().equals(byte[].class)) && Arrays.equals((byte[])oldValue,(byte[])dbValue))) {        po.set_ValueNoCheck(columnName,value);      } else {        String msg=columnName + "= " + oldValue+ (oldValue == null ? "" : "(" + oldValue.getClass().getName() + ")")+ " != DB: "+ dbValue+ (dbValue == null ? "" : "(" + dbValue.getClass().getName() + ")")+ " -> New: "+ value+ (value == null ? "" : "(" + value.getClass().getName() + ")");        fireDataStatusEEvent("SaveErrorDataChanged",msg,true);        dataRefresh(m_rowChanged);        return SAVE_ERROR;      }    }  }  if (!po.save()) {    String msg="SaveError";    String info="";    ValueNamePair ppE=CLogger.retrieveError();    if (ppE != null) {      msg=ppE.getValue();      info=ppE.getName();      if (DBException.isUniqueContraintError(CLogger.retrieveException()))       msg="SaveErrorNotUnique";    }    fireDataStatusEEvent(msg,info,true);    return SAVE_ERROR;  } else   if (m_virtual && po.get_ID() > 0) {    MSort sort=m_sort.get(m_rowChanged);    int oldid=sort.index;    if (oldid != po.get_ID()) {      sort.index=po.get_ID();      Object[] data=m_virtualBuffer.remove(oldid);      data[m_indexKeyColumn]=sort.index;      m_virtualBuffer.put(sort.index,data);    }  }  String whereClause=po.get_WhereClause(true);  log.fine("Reading ... " + whereClause);  StringBuffer refreshSQL=new StringBuffer(m_SQL_Select).append(" WHERE ").append(whereClause);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(refreshSQL.toString(),null);    rs=pstmt.executeQuery();    if (rs.next()) {      Object[] rowDataDB=readData(rs);      setDataAtRow(m_rowChanged,rowDataDB);      fireTableRowsUpdated(m_rowChanged,m_rowChanged);    }  } catch (  SQLException e) {    String msg="SaveError";    log.log(Level.SEVERE,refreshSQL.toString(),e);    fireDataStatusEEvent(msg,e.getLocalizedMessage(),true);    return SAVE_ERROR;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  m_rowData=null;  m_changed=false;  m_compareDB=true;  m_rowChanged=-1;  m_newRow=-1;  m_inserting=false;  ValueNamePair pp=CLogger.retrieveWarning();  if (pp != null) {    String msg=pp.getValue();    String info=pp.getName();    fireDataStatusEEvent(msg,info,false);  } else {    pp=CLogger.retrieveInfo();    String msg="Saved";    String info="";    if (pp != null) {      msg=pp.getValue();      info=pp.getName();    }    fireDataStatusIEvent(msg,info);  }  log.config("fini");  return SAVE_OK;}  }
class C{  public void postProcess(final HttpResponse response,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (response == null) {    throw new IllegalArgumentException("HTTP response may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(response,context);}  }
class C{  public Enumeration listL10NLocales(String id){  return ((Hashtable)resources.get(id)).keys();}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[][] points=new double[3][2];  System.out.println("Enter three points of a triangle:");  for (int i=0; i < points.length; i++) {    for (int j=0; j < points[i].length; j++) {      points[i][j]=input.nextDouble();    }  }  double result=getTriangleArea(points);  if (result == 0)   System.out.println("The three points are on the same line"); else   System.out.printf("The area of the triangle is %.2f\n",result);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  static byte[] createBuffer(){  return new byte[8192];}  }
class C{  private final void performClearTaskLocked(int taskId){  int i=mHistory.size();  while (i > 0) {    i--;    ActivityRecord r=mHistory.get(i);    if (r.task.taskId == taskId) {      i++;      break;    }  }  while (i > 0) {    i--;    ActivityRecord r=mHistory.get(i);    if (r.finishing) {      continue;    }    if (r.task.taskId != taskId) {      performClearTaskAtIndexLocked(taskId,i + 1);      return;    }  }}  }
class C{  private static CharSequence validValue(final CharSequence value){  if (!RsWithCookie.CVALUE_PTRN.matcher(value).matches()) {    throw new IllegalArgumentException(String.format("Cookie value \"%s\" contains invalid characters",value));  }  return value;}  }
class C{  @Override public int findLineNumberForInstruction(Offset instructionOffset){  int bci=_mcMap.getBytecodeIndexForMCOffset(instructionOffset);  if (bci < 0) {    return 0;  }  return ((NormalMethod)method).getLineNumberForBCIndex(bci);}  }
class C{  public PixelMatrixEditorException(final Throwable cause){  super(cause);}  }
class C{  public static boolean existsSync(@NonNull File file){  assertIoOperationOnNonThread();  return file.exists();}  }
class C{  public T caseHexIntLiteral(HexIntLiteral object){  return null;}  }
class C{  public tfoot addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void removeNegatives(){  this.matrix.removeNegatives();}  }
class C{  public HGHandle add(Object atom,int flags){  HGHandle result;  if (atom instanceof HGLink) {    HGLink link=(HGLink)atom;    Object value=link;    if (link instanceof HGValueLink)     value=((HGValueLink)link).getValue();    HGHandle type=typeSystem.getTypeHandle(value);    if (type == null)     throw new HGException("Unable to create HyperGraph type for class " + value.getClass().getName());    result=addLink(value,type,link,(byte)flags);  } else {    HGHandle type=typeSystem.getTypeHandle(atom);    if (type == null)     throw new HGException("Unable to create HyperGraph type for class " + atom.getClass().getName());    result=addNode(atom,type,(byte)flags);  }  eventManager.dispatch(this,new HGAtomAddedEvent(result,"HyperGraph.add"));  return result;}  }
class C{  public void testDispatchExclusive() throws Exception {  connection.start();  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  ActiveMQQueue destination=new ActiveMQQueue("TEST?consumer.exclusive=true");  MessageProducer producer=session.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  MessageConsumer consumer1=session.createConsumer(destination);  MessageConsumer consumer2=session.createConsumer(destination);  producer.send(session.createTextMessage("1st"));  producer.send(session.createTextMessage("2nd"));  producer.send(session.createTextMessage("3nd"));  Message m;  m=consumer2.receive(1000);  if (m != null) {    for (int i=0; i < 2; i++) {      m=consumer2.receive(1000);      assertNotNull(m);    }  } else {    for (int i=0; i < 3; i++) {      m=consumer1.receive(1000);      assertNotNull(m);    }  }  assertNull(consumer1.receiveNoWait());  assertNull(consumer2.receiveNoWait());}  }
class C{  private static final String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public void unregisterEditor(RTEditText editor){  mEditors.remove(editor.getId());  editor.unregister();  updateToolbarVisibility();}  }
class C{  private void println(String message){  Log.println(level,tag,message);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public CrusherRecipe addToSecondaryOutput(Object... outputs){  if (outputs.length % 2 != 0)   return this;  ArrayList<ItemStack> newSecondaryOutput=new ArrayList<ItemStack>();  ArrayList<Float> newSecondaryChance=new ArrayList<Float>();  if (secondaryOutput != null)   for (int i=0; i < secondaryOutput.length; i++) {    newSecondaryOutput.add(secondaryOutput[i]);    newSecondaryChance.add(secondaryChance[i]);  }  for (int i=0; i < (outputs.length / 2); i++)   if (outputs[i * 2] != null) {    Object o=ApiUtils.convertToValidRecipeInput(outputs[i * 2]);    ItemStack ss=o instanceof ItemStack ? (ItemStack)o : o instanceof List ? IEApi.getPreferredStackbyMod((List<ItemStack>)o) : null;    if (ss != null) {      newSecondaryOutput.add(ss);      newSecondaryChance.add((Float)outputs[i * 2 + 1]);    }  }  secondaryOutput=newSecondaryOutput.toArray(new ItemStack[newSecondaryOutput.size()]);  secondaryChance=new float[newSecondaryChance.size()];  int i=0;  for (  Float f : newSecondaryChance)   secondaryChance[i++]=f;  this.outputList=Lists.newArrayList(this.secondaryOutput);  if (this.outputList.isEmpty())   this.outputList.add(this.output); else   this.outputList.add(0,this.output);  return this;}  }
class C{  @Override public void registerByteSizeObserver(QuantileState<T,ComparatorT> state,ElementByteSizeObserver observer,Coder.Context context) throws Exception {  Coder.Context nestedContext=context.nested();  elementCoder.registerByteSizeObserver(state.min,observer,nestedContext);  elementCoder.registerByteSizeObserver(state.max,observer,nestedContext);  elementListCoder.registerByteSizeObserver(state.unbufferedElements,observer,nestedContext);  BigEndianIntegerCoder.of().registerByteSizeObserver(state.buffers.size(),observer,nestedContext);  for (  QuantileBuffer<T> buffer : state.buffers) {    observer.update(4L + 8);    elementListCoder.registerByteSizeObserver(buffer.elements,observer,nestedContext);  }}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForEntityResponse queryUniqueIdentifiersForEntity(com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForEntity queryUniqueIdentifiersForEntity29) throws java.rmi.RemoteException, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[14].getName());    _operationClient.getOptions().setAction("urn:queryUniqueIdentifiersForEntity");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryUniqueIdentifiersForEntity29,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryUniqueIdentifiersForEntity")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForEntityResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForEntityResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  String generateDigest(File fileDir,String fileName){  final String algorithm="SHA-1";  InputStream fileStream=null;  DigestInputStream d=null;  try {    fileStream=getFileStream(fileDir,fileName);    MessageDigest md=MessageDigest.getInstance(algorithm);    d=new DigestInputStream(fileStream,md);    byte[] buffer=new byte[8196];    while (d.read(buffer) != -1) {    }    return toHexString(md.digest());  } catch (  NoSuchAlgorithmException e) {    return algorithm + " not found";  }catch (  IOException e) {    CLog.e(e);  } finally {    StreamUtil.closeStream(d);    StreamUtil.closeStream(fileStream);  }  return "failed to generate digest";}  }
class C{  @Override public Object clone(){  Object newValue=value;  if (value != null && value instanceof NodeList) {    NodeList nodes=(NodeList)value;    newValue=nodes.clone();  }  return new Node(null,name,new HashMap(attributes),newValue);}  }
class C{  public boolean equalsDefault(){  return !value;}  }
class C{  public static void zipFilesTo(Vector<File> fileVector,String baseDir,File destFile){  FileOutputStream ops=null;  ZipOutputStream zos=null;  int basedirlen=baseDir.length();  if (!baseDir.endsWith(File.separator))   basedirlen++;  try {    ops=new FileOutputStream(destFile);    zos=new ZipOutputStream(ops);    Iterator<File> iter=fileVector.iterator();    while (iter.hasNext()) {      File file=iter.next();      FileInputStream fis=null;      try {        fis=new FileInputStream(file);        String name=file.getPath().substring(basedirlen);        name=name.replace('\\','/');        ZipEntry zi=new ZipEntry(name);        zos.putNextEntry(zi);        copystream(fis,zos);        zos.closeEntry();      } catch (      FileNotFoundException e) {        e.printStackTrace();      }catch (      IOException e) {        e.printStackTrace();      } finally {        try {          if (fis != null)           fis.close();        } catch (        Exception e) {        }      }    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    try {      if (zos != null)       zos.close(); else       if (ops != null)       ops.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  static final void initializeClassLoaders(){  return;}  }
class C{  protected BrainPhaserComponent createComponent(){  return DaggerBrainPhaserApplication_ApplicationComponent.builder().appModule(new AppModule(this)).databaseModule(new DatabaseModule(getApplicationContext(),"prodDb")).build();}  }
class C{  protected void increaseTimeCount(double time){  int index=(int)(time / this.granularity);  if (index >= this.nrofContacts.size()) {    this.nrofContacts.setSize(index + 2);  }  Integer curValue=this.nrofContacts.get(index);  if (curValue == null) {    this.nrofContacts.set(index,1);  } else {    this.nrofContacts.set(index,curValue + 1);  }}  }
class C{  public String verify(JFrame parent){  KeyStore ks=null;  try {    ks=getKeyStore();  } catch (  Exception e) {    log.log(Level.SEVERE,"get KeyStore",e);    return e.getMessage();  }  if (ks == null) {    createCertificate(CERTIFICATE_ALIAS,parent);    try {      ks=getKeyStore();    } catch (    Exception e) {      log.log(Level.SEVERE,"new KeyStore",e);      return e.getMessage();    }  }  if (ks == null)   return "No Key Store";  Certificate cert=null;  try {    cert=getCertificate(CERTIFICATE_ALIAS);  } catch (  Exception e) {    log.log(Level.SEVERE,"certificate",e);    return e.getMessage();  }  if (cert == null)   return "No Certificate found";  return null;}  }
class C{  public Swarm deploy() throws Exception {  if (this.server == null) {    throw SwarmMessages.MESSAGES.containerNotStarted("deploy()");  }  if (ApplicationEnvironment.get().isHollow()) {    this.server.deployer().deploy(getCommandLine().extraArguments().stream().map(null).collect(Collectors.toList()));  } else {    this.server.deployer().deploy();  }  return this;}  }
class C{  protected void augmentIterationId(){  if (getIterationId() == Integer.MAX_VALUE) {    this.iterationID=Integer.MIN_VALUE + 1;    resetNetworkVisited();  } else {    this.iterationID++;  }}  }
class C{  public static boolean isBridgeMethod(Method someMethod){  TraitBridge annotation=someMethod.getAnnotation(TraitBridge.class);  return annotation != null;}  }
class C{  public PerlinOctaveGenerator(long seed,int octaves){  this(new Random(seed),octaves);}  }
class C{  public boolean isConsistent(){  final TaxonNode root=getRoot();  if (root == null) {    mReason="No root node.";    return false;  }  for (  final TaxonNode node : mNodes.values()) {    if (node.getName() == null) {      mReason="Node " + node.getId() + " does not have a name.";      return false;    }    if (node.getRank() == null) {      mReason="Node " + node.getId() + " does not have a rank.";      return false;    }    TaxonNode x=node;    final HashSet<TaxonNode> seen=new HashSet<>();    while (x != null && x != root && !seen.contains(x)) {      seen.add(x);      x=x.getParent();    }    if (x != root) {      mReason="Node " + node.getId() + " does not link to root.";      return false;    }  }  return true;}  }
class C{  public void toJsonEntryHelper(Entry entry,StringBuilder result,int level,boolean notTheFirst,boolean skipFirstLinefeed){  if (notTheFirst) {    result.append(",\n");  }  if (!skipFirstLinefeed)   appendIndentation(level,result);  result.append("{\n");  ++level;  boolean addedAnyYet=false;  addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getId(),addedAnyYet,"id",level);  addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getNote(),addedAnyYet,"note",level);  addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getFirstChildId(),addedAnyYet,"firstChild",level);  addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getLastChildId(),addedAnyYet,"lastChild",level);  addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getPreviousSiblingId(),addedAnyYet,"previousSibling",level);  addedAnyYet=JsonBuilder.addPropertyToJsonString(result,entry.getNextSiblingId(),addedAnyYet,"nextSibling",level);  ArrayList<Entry> childrenEntries=getChildrenInOrder(entry);  if (!childrenEntries.isEmpty()) {    result.append(",\n");    appendIndentation(level,result);    result.append("\"children\": [\n");    boolean notTheFirstChild=false;    for (    Entry childEntry : childrenEntries) {      toJsonEntryHelper(childEntry,result,level + 1,notTheFirstChild,false);      notTheFirstChild=true;    }    result.append("\n");    appendIndentation(level,result);    result.append("]");  }  --level;  result.append("\n");  appendIndentation(level,result);  result.append("}");}  }
class C{  @Override public Void visitNewClass(NewClassTree node,AnnotatedTypeMirror type){  Pair<Tree,AnnotatedTypeMirror> context=atypeFactory.getVisitorState().getAssignmentContext();  if (type.getKind() == TypeKind.DECLARED && context != null && context.first != null) {    AnnotatedTypeMirror assignedTo=TypeArgInferenceUtil.assignedTo(atypeFactory,atypeFactory.getPath(node));    if (assignedTo != null) {      if (assignedTo.getKind() == TypeKind.DECLARED) {        final AnnotatedDeclaredType newClassType=(AnnotatedDeclaredType)type;        keyForPropagator.propagate(newClassType,(AnnotatedDeclaredType)assignedTo,PropagationDirection.TO_SUBTYPE,atypeFactory);      }    }  }  return super.visitNewClass(node,type);}  }
class C{  void addMethodEntryMapping(String methodAccession,InterProEntry entry){  if (methodAccessionToEntry.containsKey(methodAccession)) {    throw new IllegalStateException(String.format("Appear to have found more than one reference to method accession %s in Signature Library %s attempting to map to %s but have found that this method is already mapped to %s",methodAccession,signatureLibrary,entry.getEntryAccession(),methodAccessionToEntry.get(methodAccession).getEntryAccession()));  }  methodAccessionToEntry.put(methodAccession,entry);}  }
class C{  public C upperEndpoint(){  return upperBound.endpoint();}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public boolean checkSignature(){  if (KylinVersion.getCurrentVersion().isCompatibleWith(new KylinVersion(getVersion())) && !KylinVersion.getCurrentVersion().isSignatureCompatibleWith(new KylinVersion(getVersion()))) {    logger.info("checkSignature on {} is skipped as the its version is {} (not signature compatible but compatible) ",getName(),getVersion());    return true;  }  if (StringUtils.isBlank(getSignature())) {    return true;  }  String calculated=calculateSignature();  String saved=getSignature();  return calculated.equals(saved);}  }
class C{  private static List<Unit> sortTransportUnits(final List<Unit> transUnits){  final List<Unit> sorted=new ArrayList<>();  final List<Unit> infantry=new ArrayList<>();  final List<Unit> artillery=new ArrayList<>();  final List<Unit> armor=new ArrayList<>();  final List<Unit> others=new ArrayList<>();  for (  final Unit x : transUnits) {    if (Matches.UnitIsArtillerySupportable.match(x)) {      infantry.add(x);    } else     if (Matches.UnitIsArtillery.match(x)) {      artillery.add(x);    } else     if (Matches.UnitCanBlitz.match(x)) {      armor.add(x);    } else {      others.add(x);    }  }  int artilleryCount=artillery.size();  int armorCount=armor.size();  int othersCount=others.size();  for (  final Unit anInfantry : infantry) {    sorted.add(anInfantry);    if (armorCount > 0) {      sorted.add(armor.get(armorCount - 1));      armorCount--;    } else     if (artilleryCount > 0) {      sorted.add(artillery.get(artilleryCount - 1));      artilleryCount--;    } else     if (othersCount > 0) {      sorted.add(others.get(othersCount - 1));      othersCount--;    }  }  if (artilleryCount > 0) {    for (int j2=0; j2 < artilleryCount; j2++) {      sorted.add(artillery.get(j2));    }  }  if (othersCount > 0) {    for (int j4=0; j4 < othersCount; j4++) {      sorted.add(others.get(j4));    }  }  if (armorCount > 0) {    for (int j3=0; j3 < armorCount; j3++) {      sorted.add(armor.get(j3));    }  }  return sorted;}  }
class C{  public double distanceSq(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  void placeAtFirstContributingPosition(final IGroupMemberNode node,final Set<IVariable<?>> additionalKnownBound,final boolean requiresAllBound){  final Integer firstPossiblePosition=getFirstPossiblePosition(node,additionalKnownBound,requiresAllBound);  if (firstPossiblePosition == null) {    placeAtPosition(node,firstPossiblePosition);    return;  }  final GroupNodeVarBindingInfo bindingInfo=bindingInfoMap.get(node);  final Set<IVariable<?>> maybeProducedByNode=bindingInfo.getMaybeProduced();  final Set<IVariable<?>> intersectionWithExternallyIncomings=new HashSet<IVariable<?>>();  intersectionWithExternallyIncomings.addAll(externallyBound);  intersectionWithExternallyIncomings.retainAll(maybeProducedByNode);  if (!intersectionWithExternallyIncomings.isEmpty()) {    placeAtPosition(node,firstPossiblePosition);    return;  }  for (int i=0; i < nonOptionalNonMinusNodes.size(); i++) {    final Set<IVariable<?>> desiredBound=bindingInfoMap.get(nonOptionalNonMinusNodes.get(i)).getDesiredBound();    final Set<IVariable<?>> intersection=new HashSet<IVariable<?>>();    intersection.addAll(desiredBound);    intersection.retainAll(maybeProducedByNode);    if (!intersection.isEmpty()) {      placeAtPosition(node,Math.max(i,firstPossiblePosition));      return;    }  }  nonOptionalNonMinusNodes.addLast(node);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue == 2) {                    flag=false;                    break;                  }                  output.setValue(y,x,output.getValue(y,x) + 1);                }              } else {                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network links:",(int)progress);    }    updateProgress("Finding network nodes:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          if (pntr.getValue(row,col) == 0) {            output.setValue(row,col,5);          } else {            numNeighbouringStreamCells=0;            for (c=0; c < 8; c++) {              x=col + dX[c];              y=row + dY[c];              if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {                numNeighbouringStreamCells++;              }            }            if (numNeighbouringStreamCells == 0) {              output.setValue(row,col,3);            } else             if (numNeighbouringStreamCells > 1) {              output.setValue(row,col,4);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network nodes:",(int)progress);    }    String retData="Classification Key\n\n";    retData=retData + "Exterior Link\t1\n";    retData=retData + "Interior Link\t2\n";    retData=retData + "Source Node\t3\n";    retData=retData + "Link Node\t4\n";    retData=retData + "Sink Node\t5\n";    returnData(retData);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addHDU(BasicHDU<?> myHDU) throws FitsException {  insertHDU(myHDU,getNumberOfHDUs());}  }
class C{  public void showValues(NumberFormat format){  this.format=format;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public boolean isOut(double time){  return time > end;}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(mName);  for (  Map.Entry<String,String> entry : mParameters.entrySet()) {    builder.append("; ").append(entry.getKey());    String value=entry.getValue();    if (value != null && value.length() != 0) {      builder.append("=").append(value);    }  }  return builder.toString();}  }
class C{  public SwingDownIconListener(){}  }
class C{  public static int ENOTEMPTY(){  return Errno.ENOTEMPTY.intValue();}  }
class C{  public BitmapSize scaleDown(int sampleSize){  return new BitmapSize(width / sampleSize,height / sampleSize);}  }
class C{  protected boolean isDebugEnabled(){  return trace.isDebugEnabled();}  }
class C{  public Collection<CIMObjectPath> filterBrokenLinks(Collection<CIMObjectPath> synchronizations,StorageSystem provider){  return filter(synchronizations,not(activeLinkPredicate(provider)));}  }
class C{  public static boolean isNegative(int numBits,int value){  return (value & (1 << (numBits - 1))) != 0;}  }
class C{  public void addConfiguration(String name,GuacamoleConfiguration config){  configs.put(name,config);}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static CompiledMethod baselineCompile(NormalMethod method){  Callbacks.notifyMethodCompile(method,CompiledMethod.BASELINE);  long start=0;  CompiledMethod cm=null;  try {    if (VM.MeasureCompilation || VM.BuildForAdaptiveSystem) {      start=Time.nanoTime();    }    cm=BaselineCompiler.compile(method);  }  finally {    if (VM.MeasureCompilation || VM.BuildForAdaptiveSystem) {      long end=Time.nanoTime();      if (cm != null) {        double compileTime=Time.nanosToMillis(end - start);        cm.setCompilationTime(compileTime);        record(BASELINE_COMPILER,method,cm);      }    }  }  return cm;}  }
class C{  public static PublicLandingpage updateLandingpage(PublicLandingpage domObj,VOPublicLandingpage voObj) throws ValidationException, ConcurrentModificationException {  if (domObj == null || voObj == null) {    IllegalArgumentException e=new IllegalArgumentException("Parameters must not be null");    logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_PARAMETER_NULL);    throw e;  }  if (domObj.getKey() != 0) {    verifyVersionAndKey(domObj,voObj);  }  validate(voObj);  copyAttributes(domObj,voObj);  return domObj;}  }
class C{  public void attribTopLevel(Env<AttrContext> env){  JCCompilationUnit toplevel=env.toplevel;  try {    annotate.flush();  } catch (  CompletionFailure ex) {    chk.completionError(toplevel.pos(),ex);  }}  }
class C{  public static boolean[][] extractSelectedTimePointsReusingArrays(boolean[][] data,int[] timePoints){  boolean[][] extracted=new boolean[timePoints.length][];  for (int t=0; t < timePoints.length; t++) {    extracted[t]=data[timePoints[t]];  }  return extracted;}  }
class C{  protected ShaderVar addConst(String name,double value){  return addConst(name,(float)value);}  }
class C{  public boolean isRoot(){  return true;}  }
class C{  private static boolean createTabs(GridWindowVO mWindowVO){  mWindowVO.Tabs=new ArrayList<GridTabVO>();  String sql=GridTabVO.getSQL(mWindowVO.ctx);  int TabNo=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,mWindowVO.AD_Window_ID);    rs=pstmt.executeQuery();    boolean firstTab=true;    while (rs.next()) {      if (mWindowVO.AD_Table_ID == 0)       mWindowVO.AD_Table_ID=rs.getInt("AD_Table_ID");      GridTabVO mTabVO=GridTabVO.create(mWindowVO,TabNo,rs,mWindowVO.WindowType.equals(WINDOWTYPE_QUERY),mWindowVO.WindowType.equals(WINDOWTYPE_TRX));      if (mTabVO == null && firstTab)       break;      if (mTabVO != null) {        if (!mTabVO.IsReadOnly && "N".equals(mWindowVO.IsReadWrite))         mTabVO.IsReadOnly=true;        mWindowVO.Tabs.add(mTabVO);        TabNo++;        firstTab=false;      }    }  } catch (  SQLException e) {    CLogger.get().log(Level.SEVERE,"createTabs",e);    return false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (TabNo == 0 || mWindowVO.Tabs.size() == 0) {    CLogger.get().log(Level.SEVERE,"No Tabs - AD_Window_ID=" + mWindowVO.AD_Window_ID + " - "+ sql);    return false;  }  Env.setContext(mWindowVO.ctx,mWindowVO.WindowNo,"BaseTable_ID",mWindowVO.AD_Table_ID);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:28.175 -0500",hash_original_method="1D99DCC453E784FF5D3F8F4D5E30D7F1",hash_generated_method="F8DEFD92E985896075DF4A52D4143A21") public static String dumpAsString(Object obj,boolean verbose){  StringBuffer buf=new StringBuffer();  if (obj instanceof DERObject) {    _dumpAsString("",verbose,(DERObject)obj,buf);  } else   if (obj instanceof DEREncodable) {    _dumpAsString("",verbose,((DEREncodable)obj).getDERObject(),buf);  } else {    return "unknown object type " + obj.toString();  }  return buf.toString();}  }
class C{  public LocationManager notify(LocationReceiver listener){  this.listener=listener;  return this;}  }
class C{  private static int checkTypeArgument(final String signature,int pos){  char c=getChar(signature,pos);  if (c == '*') {    return pos + 1;  } else   if (c == '+' || c == '-') {    pos++;  }  return checkFieldTypeSignature(signature,pos);}  }
class C{  public CodeNode(final View view,final INaviCodeNode node,final TagManager tagManager){  super(view,node,tagManager);  m_node=node;  for (  final INaviInstruction instruction : m_node.getInstructions()) {    m_instructions.add(new Instruction(instruction));  }  node.addListener(m_internalListener);}  }
class C{  public List<String> findWords(char[][] boggle,String[] words){  boolean[][] visited=new boolean[words.length][words[0].length()];  String str="";  List<String> ans=new ArrayList<>();  for (int i=0; i < boggle.length; i++)   for (int j=0; j < boggle[i].length; j++)   findWordsHelper(boggle,visited,i,j,str,ans);  return ans;}  }
class C{  public T caseBoolLiteral(BoolLiteral object){  return null;}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SECURITY_ADMIN}) @Path("/{id}/quota") public QuotaInfo updateQuota(@PathParam("id") URI id,QuotaUpdateParam param) throws DatabaseException {  TenantOrg tenant=getTenantById(id,true);  tenant.setQuotaEnabled(param.getEnable());  if (param.getEnable()) {    long quota_gb=(param.getQuotaInGb() != null) ? param.getQuotaInGb() : tenant.getQuota();    ArgValidator.checkFieldMinimum(quota_gb,0,"quota_gb","GB");    if (!TenantOrg.isRootTenant(tenant)) {      TenantOrg parent=_dbClient.queryObject(TenantOrg.class,tenant.getParentTenant().getURI());      if (parent.getQuotaEnabled()) {        long totalSubtenants=CapacityUtils.totalSubtenantQuota(_dbClient,parent.getId());        totalSubtenants=totalSubtenants - tenant.getQuota() + quota_gb;        if (totalSubtenants > parent.getQuota()) {          throw APIException.badRequests.invalidParameterTenantsQuotaInvalidatesParent(parent.getQuota());        }      }    }    long totalSubtenants=CapacityUtils.totalSubtenantQuota(_dbClient,id);    if (totalSubtenants > quota_gb) {      throw APIException.badRequests.invalidParameterTenantsQuotaExceedsSubtenants(quota_gb,totalSubtenants);    }    long totalProjects=CapacityUtils.totalProjectQuota(_dbClient,id);    if (totalProjects > quota_gb) {      throw APIException.badRequests.invalidParameterTenantsQuotaExceedsProject(quota_gb,totalProjects);    }    tenant.setQuota(quota_gb);  }  _dbClient.persistObject(tenant);  return getQuota(tenant);}  }
class C{  public BlockContainer(){  this(new BorderArrangement());}  }
class C{  public static void addValidator(IFrancaExternalValidator validator,String mode){  ValidatorRegistry.addValidator(validator,mode);}  }
class C{  protected static double achievementScalarizingFunction(Solution solution,double[] weights){  double max=Double.NEGATIVE_INFINITY;  double[] objectives=(double[])solution.getAttribute(NORMALIZED_OBJECTIVES);  for (int i=0; i < solution.getNumberOfObjectives(); i++) {    max=Math.max(max,objectives[i] / weights[i]);  }  return max;}  }
class C{  @Override public void evaluateResponse(Vertex response,Vertex meta){  if (!isEnabled()) {    return;  }  for (  Emotion emotion : getEmotions().values()) {    emotion.setState(emotion.getState() / 2);  }  Collection<Relationship> emotions=null;  if (meta != null) {    emotions=meta.getRelationships(Primitive.EMOTION);  }  if (emotions == null) {    emotions=response.getRelationships(Primitive.EMOTION);  }  if (emotions == null) {    Collection<Relationship> words=response.getRelationships(Primitive.WORD);    if (words != null) {      emotions=new ArrayList<Relationship>();      for (      Relationship word : words) {        Collection<Relationship> wordEmotions=word.getTarget().getRelationships(Primitive.EMOTION);        if (wordEmotions != null) {          emotions.addAll(wordEmotions);        }      }    }  }  if (emotions != null) {    for (    Relationship relationship : emotions) {      Vertex emotionVertex=relationship.getTarget();      Emotion emotion=getEmotion(emotionVertex.getDataValue());      try {        float value=relationship.getCorrectness();        emotion.setState(emotion.getState() + value);        log("Applying emotion",Level.FINE,emotion,value);      } catch (      Exception error) {        getBot().log(this,error);      }    }  }}  }
class C{  public static View convertDoubleText(View convertView,String text,int position){  if (((String)convertView.getTag()).equals("double")) {    TextView t1=(TextView)((LinearLayout)convertView).getChildAt(0);    TextView t2=(TextView)((LinearLayout)convertView).getChildAt(1);    t1.setText(text);    t2.setText(text);    convertView.setId(position);    return convertView;  } else {    return null;  }}  }
class C{  public static List<org.oscm.internal.vo.VOParameterDefinition> convertToUpVOParameterDefinition(List<org.oscm.vo.VOParameterDefinition> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOParameterDefinition> newVO=new ArrayList<org.oscm.internal.vo.VOParameterDefinition>();  for (  org.oscm.vo.VOParameterDefinition tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public void initNodeTest(int whatToShow){  m_whatToShow=whatToShow;  calcScore();}  }
class C{  private List<Token> tokenizePartsMalformed(String urlString,List<URLPart> parts) throws IOException {  List<Token> tokens=new ArrayList<>();  Set<String> tokenStrings=new HashSet<>();  for (  URLPart part : parts) {    for (    Token token : tokenizeMalformed(urlString,part)) {      if (part != URLPart.WHOLE) {        tokens.add(token);        tokenStrings.add(token.getToken());      } else       if (!tokenStrings.contains(token.getToken())) {        tokens.add(token);      }    }  }  return tokens;}  }
class C{  private void dynInit(int WindowNo){  fForward=VLookup.createUser(WindowNo);  loadActivities();}  }
class C{  public FilePosition toPosition(int offset){  int line=findLine(offset);  int offsetAtLineStart=lineStarts[line];  int col=offset - offsetAtLineStart;  return new FilePosition(line,col);}  }
class C{  private static void close(final Window parent,final List<CGraphPanel> graphs){  final List<IGraphPanel> modifiedGraphs=collectModifiedGraphPanels(graphs);  if (modifiedGraphs.isEmpty()) {    closeAll(graphs);  } else {    final int result=CMessageBox.showYesNoCancelQuestion(parent,generateMessage(modifiedGraphs));    if (result == JOptionPane.YES_OPTION) {      for (      final IGraphPanel panel : modifiedGraphs) {        saveGraph(parent,panel.getModel());      }      for (      final CGraphPanel panel : graphs) {        panel.close(false);      }    } else     if (result == JOptionPane.NO_OPTION) {      closeAll(graphs);    } else {      return;    }  }}  }
class C{  public boolean isCallConnectedWith(ContactId contact){  if (mMultipartyCall || mCallHold) {    return false;  }  return (isCallConnected() && contact != null && contact.equals(getPhoneNumberOfConntectedRemote()));}  }
class C{  public ProtocolEncoderException(String message){  super(message);}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public void addModelTiePoints(double[] values) throws IllegalArgumentException {  if (values == null || values.length == 0 || (values.length % 6) != 0) {    String message=Logging.getMessage("GeoCodec.BadTiePoints");    Logging.logger().severe(message);    throw new UnsupportedOperationException(message);  }  for (int i=0; i < values.length; i+=6) {    addModelTiePoint(values[i],values[i + 1],values[i + 2],values[i + 3],values[i + 4],values[i + 5]);  }}  }
class C{  private void runParForRepeatedOptTest(boolean reusePartitionedData,boolean update,boolean changedDim,ExecType et,int numExpectedMR){  RUNTIME_PLATFORM platformOld=rtplatform;  double memfactorOld=OptimizerUtils.MEM_UTIL_FACTOR;  boolean reuseOld=ParForProgramBlock.ALLOW_REUSE_PARTITION_VARS;  String TEST_NAME=update ? TEST_NAME2 : (changedDim ? TEST_NAME3 : TEST_NAME1);  TestConfiguration config=getTestConfiguration(TEST_NAME);  config.addVariable("rows",rows);  config.addVariable("cols",cols);  String TEST_CACHE_DIR="";  if (TEST_CACHE_ENABLED) {    TEST_CACHE_DIR=TEST_NAME + "/";  }  loadTestConfiguration(config,TEST_CACHE_DIR);  try {    rtplatform=(et == ExecType.MR) ? RUNTIME_PLATFORM.HADOOP : RUNTIME_PLATFORM.HYBRID;    OptimizerUtils.MEM_UTIL_FACTOR=computeMemoryUtilFactor(70);    ParForProgramBlock.ALLOW_REUSE_PARTITION_VARS=reusePartitionedData;    String HOME=SCRIPT_DIR + TEST_DIR;    fullDMLScriptName=HOME + TEST_NAME + ".dml";    programArgs=new String[]{"-stats","-args",input("V"),Integer.toString(rows),Integer.toString(cols),output("R"),Integer.toString((update || changedDim) ? 1 : 0)};    fullRScriptName=HOME + TEST_NAME + ".R";    rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir()+ " "+ Integer.toString((update || changedDim) ? 1 : 0);    double[][] V=getRandomMatrix(rows,cols,0,1,sparsity,7);    writeInputMatrix("V",V,true);    runTest(true,false,null,-1);    runRScript(true);    Assert.assertEquals("Unexpected number of executed MR jobs.",numExpectedMR,Statistics.getNoOfExecutedMRJobs());    HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS("R");    HashMap<CellIndex,Double> rfile=readRMatrixFromFS("R");    TestUtils.compareMatrices(dmlfile,rfile,eps,"DML","R");  }  finally {    rtplatform=platformOld;    OptimizerUtils.MEM_UTIL_FACTOR=memfactorOld;    ParForProgramBlock.ALLOW_REUSE_PARTITION_VARS=reuseOld;  }}  }
class C{  public static void main(String[] args){  StdDraw.square(.2,.8,.1);  StdDraw.filledSquare(.8,.8,.2);  StdDraw.circle(.8,.2,.2);  StdDraw.setPenColor(StdDraw.BOOK_RED);  StdDraw.setPenRadius(.02);  StdDraw.arc(.8,.2,.1,200,45);  StdDraw.setPenRadius();  StdDraw.setPenColor(StdDraw.BOOK_BLUE);  double[] x={.1,.2,.3,.2};  double[] y={.2,.3,.2,.1};  StdDraw.filledPolygon(x,y);  StdDraw.setPenColor(StdDraw.BLACK);  StdDraw.text(0.2,0.5,"black text");  StdDraw.setPenColor(StdDraw.WHITE);  StdDraw.text(0.8,0.8,"white text");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (!mShouldRender)   return;  final int width=getMeasuredWidth();  final int height=getMeasuredHeight();  if (width <= 0 || height <= 0)   return;  if (mBitmap == null || mCanvas == null || mOldHeight != height || mOldWidth != width) {    if (mBitmap != null)     mBitmap.recycle();    mBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    mCanvas=new Canvas(mBitmap);  }  mOldWidth=width;  mOldHeight=height;  mCanvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);  mCanvas.drawColor(mMaskColour);  if (mEraser == null) {    mEraser=new Paint();    mEraser.setColor(0xFFFFFFFF);    mEraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    mEraser.setFlags(Paint.ANTI_ALIAS_FLAG);  }  mShape.draw(mCanvas,mEraser,mXPosition,mYPosition,mShapePadding);  canvas.drawBitmap(mBitmap,0,0,null);}  }
class C{  @Override public String toXMLBIF03(){  if (m_Instances == null) {    return ("<!--No model built yet-->");  }  StringBuffer text=new StringBuffer();  text.append(getBIFHeader());  text.append("\n");  text.append("\n");  text.append("<BIF VERSION=\"0.3\">\n");  text.append("<NETWORK>\n");  text.append("<NAME>" + XMLNormalize(m_Instances.relationName()) + "</NAME>\n");  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {    text.append("<VARIABLE TYPE=\"nature\">\n");    text.append("<NAME>" + XMLNormalize(m_Instances.attribute(iAttribute).name()) + "</NAME>\n");    for (int iValue=0; iValue < m_Instances.attribute(iAttribute).numValues(); iValue++) {      text.append("<OUTCOME>" + XMLNormalize(m_Instances.attribute(iAttribute).value(iValue)) + "</OUTCOME>\n");    }    text.append("<PROPERTY>position = (" + getPositionX(iAttribute) + ","+ getPositionY(iAttribute)+ ")</PROPERTY>\n");    text.append("</VARIABLE>\n");  }  for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {    text.append("<DEFINITION>\n");    text.append("<FOR>" + XMLNormalize(m_Instances.attribute(iAttribute).name()) + "</FOR>\n");    for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {      text.append("<GIVEN>" + XMLNormalize(m_Instances.attribute(m_ParentSets[iAttribute].getParent(iParent)).name()) + "</GIVEN>\n");    }    text.append("<TABLE>\n");    for (int iParent=0; iParent < m_ParentSets[iAttribute].getCardinalityOfParents(); iParent++) {      for (int iValue=0; iValue < m_Instances.attribute(iAttribute).numValues(); iValue++) {        text.append(m_Distributions[iAttribute][iParent].getProbability(iValue));        text.append(' ');      }      text.append('\n');    }    text.append("</TABLE>\n");    text.append("</DEFINITION>\n");  }  text.append("</NETWORK>\n");  text.append("</BIF>\n");  return text.toString();}  }
class C{  boolean first(RowCursor minCursor,RowCursor resultCursor,boolean isMatch){  int ptr=_rowHead;  int rowLength=resultCursor.length();  int removeLength=resultCursor.removeLength();  int sortOffset=_rowSortHead;  byte[] buffer=_buffer;  while (ptr < sortOffset) {    int code=buffer[ptr] & CODE_MASK;    int minCmp;    int cmp;switch (code) {case INSERT:      if ((minCmp=minCursor.compareKeyRow(buffer,ptr)) <= 0 && ((cmp=resultCursor.compareKeyRow(buffer,ptr)) > 0 || cmp == 0 && !isMatch)) {        fillMatch(ptr,resultCursor);        if (minCmp == 0) {          return true;        }        isMatch=true;      }    ptr+=rowLength;  break;case INSERT_DEAD:ptr+=rowLength;break;case REMOVE:if ((minCmp=minCursor.compareKeyRemove(buffer,ptr)) <= 0 && ((cmp=resultCursor.compareKeyRemove(buffer,ptr)) > 0 || cmp == 0 && !isMatch)) {resultCursor.setRemove(buffer,ptr);if (minCmp == 0) {return true;}isMatch=true;}ptr+=removeLength;break;default :System.out.println("BROKEN_ENTRY:");return false;}}if (sortOffset < BLOCK_SIZE) {return findFirstSorted(minCursor,resultCursor,isMatch);} else {return isMatch;}}  }
class C{  private boolean includesEphemerals(){  return portrange[0] == 0;}  }
class C{  public void visit(BnfVisitor visitor,String s){  this.syntax=s;  tokens=tokenize();  index=0;  Rule rule=parseRule();  rule.setLinks(ruleMap);  rule.accept(visitor);}  }
class C{  @Override public void addEjbReference(EjbRef ref){  Element ejbRefBindingsElement=new Element("ejbRefBindings");  String id="EjbRefBinding_" + this.random.nextLong();  Namespace namespace=Namespace.getNamespace("xmi","http://www.omg.org/XMI");  ejbRefBindingsElement.setAttribute("id",id,namespace);  ejbRefBindingsElement.setAttribute("jndiName",ref.getJndiName());  Element bindingEjbRef=new Element("bindingEjbRef");  bindingEjbRef.setAttribute("href","WEB-INF/web.xml#" + ref.getName().replace('/','_'));  ejbRefBindingsElement.getContent().add(bindingEjbRef);  addElement(new DescriptorTag(IbmWebBndXmiType.getInstance(),"ejbRefBindings",true),ejbRefBindingsElement,getRootElement());}  }
class C{  public List<GroupCloudDeviceDB> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  private void addToProbability(String item,double probability){  double old=0.0;  Double oldProbability=rarity.get(item);  if (oldProbability != null) {    old=oldProbability;  }  double newProb=1 - (1 - old) * (1 - probability);  rarity.put(item,newProb);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof ZoneInfo)) {    return false;  }  ZoneInfo that=(ZoneInfo)obj;  return (getID().equals(that.getID()) && (getLastRawOffset() == that.getLastRawOffset()) && (checksum == that.checksum));}  }
class C{  public LocalDate create(int year,int month,int day){  return LocalDate.of(year,month,day);}  }
class C{  @Override public void surfaceChanged(SurfaceHolder holder,int format,int width,int height){}  }
class C{  private void readNextInputUnsafe(){  if (inputIndex >= testData.length) {    inputIndex=0;  }  if (isSpikingNeuronGroup()) {    setInputValues(testData[inputIndex]);    for (int i=0; i < size(); i++) {      neuronList.get(i).setToBufferVals();    }  } else {    forceSetActivations(testData[inputIndex]);  }  inputIndex++;}  }
class C{  public static void removeParameterChangeListener(ParameterChangeListener listener){  PARAMETER_LISTENERS.remove(listener);}  }
class C{  private void adaptRootView(){  if (rootView != null) {    if (getStyle() == Style.LIST) {      int paddingTop=getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_list_padding_top);      rootView.setPadding(0,paddingTop,0,0);    } else {      int paddingTop=getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_grid_padding_top);      rootView.setPadding(0,paddingTop,0,0);    }  }}  }
class C{  public static FinishAtCount of(long maxCount){  return new FinishAtCount(maxCount);}  }
class C{  public Main(String name,PrintWriter out){  this.ownName=name;  this.out=out;}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  private void populateUnityAccessProfileForSystem(AccessProfile accessProfile,StorageSystem storageDevice){  URI providerUri=storageDevice.getActiveProviderURI();  if (!NullColumnValueGetter.isNullURI(providerUri)) {    StorageProvider provider=_dbClient.queryObject(StorageProvider.class,providerUri);    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(provider.getIPAddress());    accessProfile.setUserName(provider.getUserName());    accessProfile.setPassword(provider.getPassword());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPortNumber(provider.getPortNumber());    accessProfile.setLastSampleTime(0L);  } else {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getIpAddress());    accessProfile.setUserName(storageDevice.getUsername());    accessProfile.setPassword(storageDevice.getPassword());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPortNumber(storageDevice.getPortNumber());    accessProfile.setLastSampleTime(0L);  }}  }
class C{  public void createScriptRunner(final IKBus eventBus,final Executor executor){  if (scriptRunner == null) {    this.scriptRunner=new ScriptRunner(eventBus,this,executor);  }}  }
class C{  public CipherTextIvMac(String base64IvAndCiphertext){  String[] civArray=base64IvAndCiphertext.split(":");  if (civArray.length != 3) {    throw new IllegalArgumentException("Cannot parse iv:ciphertext:mac");  } else {    iv=Base64.decode(civArray[0],BASE64_FLAGS);    mac=Base64.decode(civArray[1],BASE64_FLAGS);    cipherText=Base64.decode(civArray[2],BASE64_FLAGS);  }}  }
class C{  public void loadArgs(){  loadArgs(0,argumentTypes.length);}  }
class C{  @Override public void addDimensionLevel(CarbonDimensionLevel dimensionLevel,CarbonDimensionLevelFilter filter,SortType sortType,AxisType axis){  sortType=sortType == null ? SortType.NONE : sortType;  axises[axis.getIndex()].add(dimensionLevel,sortType,null,filter);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isClusteredHost(StorageSystem storage,List<Initiator> initiators){  return isClusteredHost(storage,initiators,null);}  }
class C{  public boolean match(Element e,String pseudoE){  Node n=e;  if (!((ExtendedSelector)getSiblingSelector()).match(e,pseudoE))   return false;  while ((n=n.getPreviousSibling()) != null && n.getNodeType() != Node.ELEMENT_NODE)   ;  if (n == null)   return false;  return ((ExtendedSelector)getSelector()).match((Element)n,null);}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public E remove(){  E o=poll();  if (null == o) {    throw new NoSuchElementException();  }  return o;}  }
class C{  public void writeUTF8(ByteArrayBuffer bb,String value){  bb.clear();  for (int i=0; i < value.length(); i++) {    int ch=value.charAt(i);    if (ch > 0 && ch < 0x80)     bb.append(ch); else     if (ch < 0x800) {      bb.append(0xc0 + (ch >> 6));      bb.append(0x80 + (ch & 0x3f));    } else {      bb.append(0xe0 + (ch >> 12));      bb.append(0x80 + ((ch >> 6) & 0x3f));      bb.append(0x80 + ((ch) & 0x3f));    }  }}  }
class C{  private void runMutationRangeTest(final PlanAlgorithm tripPlanMutateTimeAllocation,final int expectedMutationRange){  Network network=NetworkUtils.createNetwork();  network.setCapacityPeriod(Time.parseTime("01:00:00"));  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)100,(double)0));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord((double)200,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord((double)300,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  Link link1=NetworkUtils.createAndAddLink(network,Id.create("0",Link.class),fromNode,toNode,(double)100,(double)5,(double)100,(double)1);  final Node fromNode1=node2;  final Node toNode1=node3;  NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode1,toNode1,(double)100,(double)5,(double)100,(double)1);  final Node fromNode2=node3;  final Node toNode2=node4;  NetworkUtils.createAndAddLink(network,Id.create("2",Link.class),fromNode2,toNode2,(double)100,(double)5,(double)100,(double)1);  Plan plan;  Activity act1, act2;  try {    Person person=PopulationUtils.getFactory().createPerson(Id.create("1",Person.class));    plan=PersonUtils.createAndAddPlan(person,true);    act1=PopulationUtils.createAndAddActivityFromLinkId(plan,"h",link1.getId());    act1.setEndTime(4 * 3600);    PopulationUtils.createAndAddLeg(plan,TransportMode.car);    act2=PopulationUtils.createAndAddActivityFromLinkId(plan,"w",link1.getId());    act2.setMaximumDuration(14 * 3600);    PopulationUtils.createAndAddLeg(plan,TransportMode.car);    PopulationUtils.createAndAddActivityFromLinkId(plan,"h",link1.getId());  } catch (  Exception e) {    throw new RuntimeException(e);  }  double act1Dur=act1.getEndTime();  double minDiff1=Double.POSITIVE_INFINITY;  double maxDiff1=Double.NEGATIVE_INFINITY;  double act2Dur=act2.getMaximumDuration();  double minDiff2=Double.POSITIVE_INFINITY;  double maxDiff2=Double.NEGATIVE_INFINITY;  for (int i=0; i < 150; i++) {    tripPlanMutateTimeAllocation.run(plan);    double diff=act1Dur - act1.getMaximumDuration();    if (diff > maxDiff1)     maxDiff1=diff;    if (diff < minDiff1)     minDiff1=diff;    act1Dur=act1.getMaximumDuration();    if (act1Dur != Time.UNDEFINED_TIME) {      assertTrue("activity duration cannot be smaller than 0, is " + act1Dur,act1Dur >= 0.0);    }    diff=act2Dur - act2.getMaximumDuration();    if (diff > maxDiff2)     maxDiff2=diff;    if (diff < minDiff2)     minDiff2=diff;    act2Dur=act2.getMaximumDuration();    if (act2Dur != Time.UNDEFINED_TIME) {      assertTrue("activity duration cannot be smaller than 0, is " + act2Dur,act2Dur >= 0.0);    }  }  assertTrue("mutation range differences wrong (act1).",minDiff1 <= maxDiff1);  assertTrue("mutation range differences wrong (act2).",minDiff2 <= maxDiff2);  assertValueInRange("mutation range out of range (maxDiff1).",maxDiff1,expectedMutationRange * 0.95,expectedMutationRange);  assertValueInRange("mutation range out of range (minDiff1).",minDiff1,-expectedMutationRange,-expectedMutationRange * 0.95);  assertValueInRange("mutation range out of range (maxDiff2).",maxDiff1,expectedMutationRange * 0.95,expectedMutationRange);  assertValueInRange("mutation range out of range (minDiff2).",minDiff2,-expectedMutationRange,-expectedMutationRange * 0.95);}  }
class C{  public DiagnosticTool(){  super(localization.getString("title.diagnosticTool"));  setSize(800,600);  setMinimumSize(new Dimension(800,600));  setExtendedState(JFrame.MAXIMIZED_BOTH);  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  initialize();  layoutMenu();  layoutComponents();}  }
class C{  public static <T>ConfigurationKey<T> newInstance(){  return new ConfigurationKey<>();}  }
class C{  private Object readResolve(){  makeReadOnly();  return this;}  }
class C{  public CompletableFuture<Long> appendEntries(long index){  if (index == 0)   return appendEntries();  if (index <= context.getCommitIndex())   return CompletableFuture.completedFuture(index);  if (context.getClusterState().getActiveMemberStates().isEmpty() && context.getClusterState().getPassiveMemberStates().isEmpty()) {    long previousCommitIndex=context.getCommitIndex();    context.setCommitIndex(index);    context.setGlobalIndex(index);    completeCommits(previousCommitIndex,index);    return CompletableFuture.completedFuture(index);  } else   if (context.getClusterState().getActiveMemberStates().isEmpty()) {    long previousCommitIndex=context.getCommitIndex();    context.setCommitIndex(index);    completeCommits(previousCommitIndex,index);    return CompletableFuture.completedFuture(index);  }  return appendFutures.computeIfAbsent(index,null);}  }
class C{  public static void close(Config config){  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);  try {    log.info("Closing UrbanSimZoneCSVWriterV2 ...");    assert (UrbanSimParcelCSVWriter.parcelWriter != null);    parcelWriter.flush();    parcelWriter.close();    log.info("Copying " + module.getMATSim4OpusTemp() + FILE_NAME+ " to "+ module.getMATSim4OpusOutput()+ FILE_NAME);    IOUtils.copyFile(new File(module.getMATSim4OpusTemp() + FILE_NAME),new File(module.getMATSim4OpusOutput() + FILE_NAME));    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected Rectangle lineToRect(Shape a,int line){  Rectangle r=null;  updateMetrics();  if (metrics != null) {    Rectangle alloc=a.getBounds();    if (line == 0) {      alloc.x+=firstLineOffset;      alloc.width-=firstLineOffset;    }    r=new Rectangle(alloc.x,alloc.y + (line * metrics.getHeight()),alloc.width,metrics.getHeight());  }  return r;}  }
class C{  public boolean isEmpty(){  return itemList.isEmpty();}  }
class C{  private static void sort1(byte[] x,int off,int len){  if (len < 7) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);    return;  }  int m=off + (len >> 1);  if (len > 7) {    int l=off;    int n=off + len - 1;    if (len > 40) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s);      m=med3(x,m - s,m,m + s);      n=med3(x,n - 2 * s,n - s,n);    }    m=med3(x,l,m,n);  }  byte v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    while (b <= c && x[b] <= v) {      if (x[b] == v)       swap(x,a++,b);      b++;    }    while (c >= b && x[c] >= v) {      if (x[c] == v)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   sort1(x,off,s);  if ((s=d - c) > 1)   sort1(x,n - s,s);}  }
class C{  private Method findFromStringMethod(Class<?> cls,boolean searchSuperclasses){  Method matched=null;  Class<?> loopCls=cls;  while (loopCls != null && matched == null) {    Method[] methods=loopCls.getDeclaredMethods();    for (    Method method : methods) {      FromString fromString=method.getAnnotation(FromString.class);      if (fromString != null) {        if (matched != null) {          throw new IllegalStateException("Two methods are annotated with @ToString");        }        matched=method;      }    }    if (searchSuperclasses == false) {      break;    }    loopCls=loopCls.getSuperclass();  }  return matched;}  }
class C{  boolean isOrganizationSpecificRole(UserRoleType roleType){  return !(UserRoleType.ORGANIZATION_ADMIN.equals(roleType) || UserRoleType.SUBSCRIPTION_MANAGER.equals(roleType));}  }
class C{  public static int waitingRemaining(final DigestURL url,final RobotsTxt robots,final ClientIdentification.Agent agent){  final Host host=host(url);  if (host == null)   return Integer.MIN_VALUE;  boolean local=url.isLocal();  int waiting=agent.minimumDelta;  if (!local)   waiting+=host.flux(waiting);  waiting=Math.max(waiting,(int)(host.average() * Switchboard.getSwitchboard().getConfigFloat(SwitchboardConstants.CRAWLER_LATENCY_FACTOR,0.5f)));  if (Switchboard.getSwitchboard().crawlQueues.hostcount(url.getHost()) > Switchboard.getSwitchboard().getConfigInt(SwitchboardConstants.CRAWLER_MAX_SAME_HOST_IN_QUEUE,20))   waiting+=3000;  final int timeSinceLastAccess=(int)(System.currentTimeMillis() - host.lastacc());  int robotsDelay=waitingRobots(url,robots,agent);  if (robotsDelay < 0)   return -timeSinceLastAccess;  waiting=Math.max(waiting,robotsDelay);  return Math.min(60000,waiting) - timeSinceLastAccess;}  }
class C{  public boolean isFlipped(){  return this.flipped;}  }
class C{  protected static void markUnresolved(boolean tf,KMLAbstractSubStyle subStyle){  if (!tf)   subStyle.removeField(AVKey.UNRESOLVED); else   subStyle.setField(AVKey.UNRESOLVED,System.currentTimeMillis());}  }
class C{  private static String findProviderClass(ExternalContext extContext){  WebConfiguration webConfig=WebConfiguration.getInstance(extContext);  String provider=webConfig.getOptionValue(WebContextInitParameter.SerializationProviderClass);  if (provider != null) {    return provider;  } else {    return System.getProperty(SERIALIZATION_PROVIDER_PROPERTY);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  public MacRenderer(){  renderingHints=new RenderingHints(null);  renderingHints.add(defaultRenderingHints);  usr2dev=new AffineTransform();}  }
class C{  @Override protected void onResume(){  super.onResume();  startCameraSource();}  }
class C{  @Override public Node importTo(Document hostDocument){  ValidateUtil.validateNotNull(hostDocument,"Host document");  Element clonedTokenElement=(Element)hostDocument.importNode(_parsedToken.getDocumentElement(),true);  markAssertionIdAttribute(clonedTokenElement);  return clonedTokenElement;}  }
class C{  public String histogram(){  StringBuilder sb=new StringBuilder();  sb.append(buildHeader());  sb.append("\n");  Iterator<Long> it=timings.keySet().iterator();  while (it.hasNext()) {    long n=it.next();    sb.append("Table for:" + n).append("\n");    sb.append(histogramSeparator).append("\n");    sb.append(buildTable(n));    sb.append(histogramSeparator).append("\n\n");  }  return sb.toString();}  }
class C{  public double lengthSq(){  return x * x + y * y + z * z;}  }
class C{  public void addRole(String role){  if (role != null) {    roles.add(role);  }}  }
class C{  public synchronized void dragExit(DropTargetEvent dte){  isDraggingInside=false;  if (!active)   return;  if (dtListener != null && active)   dtListener.dragExit(dte);  clearAutoscroll();}  }
class C{  private VFSFactory(){  addToSortRegistry(new sage.vfs.sort.NameSorter(true,false));  addToSortRegistry(new sage.vfs.sort.NameSorter(false,false));  addToSortRegistry(new sage.vfs.sort.NameSorter(true,true));  addToSortRegistry(new sage.vfs.sort.NameSorter(false,true));  addToSortRegistry(new sage.vfs.sort.DateSorter(true));  addToSortRegistry(new sage.vfs.sort.DateSorter(false));  addToSortRegistry(new sage.vfs.sort.SizeSorter(true));  addToSortRegistry(new sage.vfs.sort.SizeSorter(false));  addToSortRegistry(new sage.vfs.sort.TrackSorter(true));  addToSortRegistry(new sage.vfs.sort.TrackSorter(false));  addToSortRegistry(new sage.vfs.sort.FilenameSorter(true));  addToSortRegistry(new sage.vfs.sort.FilenameSorter(false));  addToSortRegistry(new sage.vfs.sort.DurationSorter(true));  addToSortRegistry(new sage.vfs.sort.DurationSorter(false));  addToSortRegistry(new sage.vfs.sort.TitleSorter(true,false));  addToSortRegistry(new sage.vfs.sort.TitleSorter(false,false));  addToSortRegistry(new sage.vfs.sort.TitleSorter(true,true));  addToSortRegistry(new sage.vfs.sort.TitleSorter(false,true));  addToSortRegistry(new sage.vfs.sort.ArtistSorter(true,false));  addToSortRegistry(new sage.vfs.sort.ArtistSorter(false,false));  addToSortRegistry(new sage.vfs.sort.ArtistSorter(true,true));  addToSortRegistry(new sage.vfs.sort.ArtistSorter(false,true));  addToSortRegistry(new sage.vfs.sort.CategorySorter(true));  addToSortRegistry(new sage.vfs.sort.CategorySorter(false));  addToSortRegistry(new sage.vfs.sort.YearSorter(true));  addToSortRegistry(new sage.vfs.sort.YearSorter(false));  addToSortRegistry(new sage.vfs.sort.RatingSorter(true));  addToSortRegistry(new sage.vfs.sort.RatingSorter(false));  addToSortRegistry(new sage.vfs.sort.RatedSorter(true));  addToSortRegistry(new sage.vfs.sort.RatedSorter(false));  addToSortRegistry(new sage.vfs.sort.CountSorter(true));  addToSortRegistry(new sage.vfs.sort.CountSorter(false));  addToSortRegistry(new sage.vfs.sort.EpisodeNameSorter(true));  addToSortRegistry(new sage.vfs.sort.EpisodeNameSorter(false));  addToSortRegistry(new sage.vfs.sort.EpisodeIDSorter(true));  addToSortRegistry(new sage.vfs.sort.EpisodeIDSorter(false));  addToSortRegistry(new sage.vfs.sort.RuntimeSorter(true));  addToSortRegistry(new sage.vfs.sort.RuntimeSorter(false));  addToSortRegistry(new sage.vfs.sort.StudioSorter(true,false));  addToSortRegistry(new sage.vfs.sort.StudioSorter(false,false));  addToSortRegistry(new sage.vfs.sort.StudioSorter(true,true));  addToSortRegistry(new sage.vfs.sort.StudioSorter(false,true));  addToSortRegistry(new sage.vfs.sort.AlbumSorter(true,false));  addToSortRegistry(new sage.vfs.sort.AlbumSorter(false,false));  addToSortRegistry(new sage.vfs.sort.AlbumSorter(true,true));  addToSortRegistry(new sage.vfs.sort.AlbumSorter(false,true));  addToSortRegistry(new sage.vfs.sort.OriginalAirDateSorter(true));  addToSortRegistry(new sage.vfs.sort.OriginalAirDateSorter(false));  addToSortRegistry(new sage.vfs.sort.ChannelNameSorter(true));  addToSortRegistry(new sage.vfs.sort.ChannelNameSorter(false));  addToSortRegistry(new sage.vfs.sort.IntelligentSorter(true));  addToSortRegistry(new sage.vfs.sort.IntelligentSorter(false));  addToFilterRegistry(new sage.vfs.filter.DirectoryFilter(true));  addToFilterRegistry(new sage.vfs.filter.DirectoryFilter(false));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_BLURAY,MediaNode.FILTER_BLURAY,sage.Sage.rez("BluRay"),true));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_BLURAY,MediaNode.FILTER_BLURAY,sage.Sage.rez("BluRay"),false));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_DVD,MediaNode.FILTER_DVD,sage.Sage.rez("DVD"),true));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_DVD,MediaNode.FILTER_DVD,sage.Sage.rez("DVD"),false));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_MUSIC,MediaNode.FILTER_MUSIC,sage.Sage.rez("Music"),true));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_MUSIC,MediaNode.FILTER_MUSIC,sage.Sage.rez("Music"),false));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_PICTURE,MediaNode.FILTER_PICTURES,sage.Sage.rez("Pictures"),true));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_PICTURE,MediaNode.FILTER_PICTURES,sage.Sage.rez("Pictures"),false));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_VIDEO,MediaNode.FILTER_VIDEOS,sage.Sage.rez("Videos"),true));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_VIDEO,MediaNode.FILTER_VIDEOS,sage.Sage.rez("Videos"),false));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_TV,MediaNode.FILTER_TV,sage.Sage.rez("TV"),true));  addToFilterRegistry(new sage.vfs.filter.MediaMaskFilter(sage.DBObject.MEDIA_MASK_TV,MediaNode.FILTER_TV,sage.Sage.rez("TV"),false));  addToFilterRegistry(new sage.vfs.filter.WatchedFilter(true));  addToFilterRegistry(new sage.vfs.filter.WatchedFilter(false));  addToFilterRegistry(new sage.vfs.filter.ArchivedFilter(true));  addToFilterRegistry(new sage.vfs.filter.ArchivedFilter(false));  addToFilterRegistry(new sage.vfs.filter.DontLikeFilter(true));  addToFilterRegistry(new sage.vfs.filter.DontLikeFilter(false));  addToFilterRegistry(new sage.vfs.filter.FavoriteFilter(true));  addToFilterRegistry(new sage.vfs.filter.FavoriteFilter(false));  addToFilterRegistry(new sage.vfs.filter.FirstRunFilter(true));  addToFilterRegistry(new sage.vfs.filter.FirstRunFilter(false));  addToFilterRegistry(new sage.vfs.filter.HDTVFilter(true));  addToFilterRegistry(new sage.vfs.filter.HDTVFilter(false));  addToFilterRegistry(new sage.vfs.filter.ManualRecordFilter(true));  addToFilterRegistry(new sage.vfs.filter.ManualRecordFilter(false));  addToFilterRegistry(new sage.vfs.filter.CompleteRecordingFilter(true));  addToFilterRegistry(new sage.vfs.filter.CompleteRecordingFilter(false));}  }
class C{  public CSSResource(Reader reader){  super(reader);}  }
class C{  private static boolean maybeNullWebkitIE(boolean ret,int typeInt,KeySignalType type){  if (typeInt == (type == KeySignalType.INPUT ? Event.ONKEYDOWN : Event.ONKEYPRESS)) {    return false;  }  return ret;}  }
class C{  static double fromDegrees(final double degrees){  return degrees * RADIANS_PER_DEGREE;}  }
class C{  public static int clear(int mod,int clearBit){  return mod & ~clearBit;}  }
class C{  protected synchronized void handleGrantorDestruction(){  try {    if (this.pendingRequests != null) {      for (Iterator iter=this.pendingRequests.iterator(); iter.hasNext(); ) {        DLockRequestMessage request=(DLockRequestMessage)iter.next();        request.respondWithNotGrantor();      }    }  }  finally {    destroy();  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Wurst Options",width / 2,40,0xffffff);  drawCenteredString(fontRendererObj,"Settings",width / 2 - 104,height / 4 + 24 - 28,0xcccccc);  drawCenteredString(fontRendererObj,"Managers",width / 2,height / 4 + 24 - 28,0xcccccc);  drawCenteredString(fontRendererObj,"Online",width / 2 + 104,height / 4 + 24 - 28,0xcccccc);  super.drawScreen(par1,par2,par3);  for (int i=0; i < buttonList.size(); i++) {    GuiButton button=(GuiButton)buttonList.get(i);    if (button.isMouseOver() && !toolTips[button.id].isEmpty()) {      ArrayList toolTip=Lists.newArrayList(toolTips[button.id].split("\n"));      drawHoveringText(toolTip,par1,par2);      break;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public double probabilityOfAcceptance(double temperature,double deltaE){  return Math.exp(deltaE / temperature);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node replacedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);{    boolean success=false;    try {      replacedNode=employeeNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public TitlePage parallax(boolean showParallax){  this.showParallax=showParallax;  return this;}  }
class C{  public void mergePeriod(ReadablePeriod period){  super.mergePeriod(period);}  }
class C{  protected void onPositionSizeChange(){}  }
class C{  public static boolean isHostEqual(ServiceHost host,URI remoteService){  ServiceHostState hostState=host.getState();  if (hostState == null || !hostState.isStarted) {    throw new IllegalStateException("Host not in valid state");  }  if (host.getState().systemInfo.ipAddresses == null || host.getState().systemInfo.ipAddresses.isEmpty()) {    throw new IllegalStateException("No IP addresses found in host:" + host.toString());  }  if (host.getPublicUri().getHost().equals(remoteService.getHost()) && (host.getPublicUri().getPort() == remoteService.getPort())) {    return true;  }  if (host.getPort() != remoteService.getPort() && host.getSecurePort() != remoteService.getPort()) {    return false;  }  for (  String address : host.getState().systemInfo.ipAddresses) {    if (address.equals(remoteService.getHost())) {      return true;    }  }  return false;}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < length(); i++) {    result.add(getFieldName(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  private int findHeaderEnd(final byte[] buf,int rlen){  int splitbyte=0;  while (splitbyte + 3 < rlen) {    if (buf[splitbyte] == '\r' && buf[splitbyte + 1] == '\n' && buf[splitbyte + 2] == '\r' && buf[splitbyte + 3] == '\n')     return splitbyte + 4;    splitbyte++;  }  return 0;}  }
class C{  public static ArrayList<Integer> computeGateLogics(Gate g){  ArrayList<Gate> children=g.getChildren();  ArrayList<Integer> gate_logics=new ArrayList<Integer>();  if (g.Type != Gate.GateType.INPUT) {    for (int i=0; i < children.get(0).get_logics().size(); ++i) {      ArrayList<Integer> this_row_child_logics=new ArrayList<Integer>();      for (      Gate child : children) {        this_row_child_logics.add(child.get_logics().get(i));      }      Integer logic=BooleanLogic.computeLogic(g.Type,this_row_child_logics);      gate_logics.add(logic);    }    return gate_logics;  } else {    return g.get_logics();  }}  }
class C{  public synchronized String unipoint(String key){  if (key == null)   return null;  StringSetry tab[]=table;  int hash=key.hashCode();  int index=(hash & Integer.MAX_VALUE) % tab.length;  for (StringSetry e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && CompareUtil.equals(e.key,key)) {      return e.key;    }  }  if (count >= threshold) {    rehash();    tab=table;    index=(hash & Integer.MAX_VALUE) % tab.length;  }  StringSetry e=new StringSetry(hash,key,tab[index]);  tab[index]=e;  count++;  return key;}  }
class C{  public ParticleEmitterBox2D(World world,ParticleEmitter emitter){  super(emitter);  this.world=world;}  }
class C{  private synchronized void writeObject(ObjectOutputStream oos) throws IOException, ClassNotFoundException {  serializing=true;synchronized (BeanContext.globalHierarchyLock) {    try {      oos.defaultWriteObject();      bcsPreSerializationHook(oos);      if (serializable > 0 && this.equals(getBeanContextPeer()))       writeChildren(oos);      serialize(oos,(Collection)bcmListeners);    }  finally {      serializing=false;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, val;  double[] N=new double[8];  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val != noData) {              n+=1 * filterShape[a];              sum+=val * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,z - (sum / n));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String generate(final CCachedExpressionTreeNode node){  return node.getCriterium().getFormulaString(node.getChildren());}  }
class C{  public LRUHashMap(int maxSize){  super(16,0.75f,true);  this.maxSize=maxSize;}  }
class C{  public static Set<String> computeHashIndex(long docHash){  int bandIndex=0;  BitSet bitRange=new BitSet(BAND_WIDTH);  int bitsWidthCounter=0;  Set<String> bandBitset=new HashSet<>();  for (int i=0; i < HASH_LENGTH; ++i) {    bitRange.set(bitsWidthCounter,((docHash >> i) & 1) == 1);    if (bitsWidthCounter++ == BAND_WIDTH) {      bandBitset.add(bandIndex + "_" + bitRange.toString());      bitsWidthCounter=0;      bitRange=new BitSet(BAND_WIDTH);      bandIndex++;    }  }  return bandBitset;}  }
class C{  synchronized void registerTextChanges(){  mIgnoreTextChanges=false;}  }
class C{  public static ExceptionlessOutputStream openCompressedStream(URL url){  if (!url.getProtocol().equals("file")) {    System.err.println("Can't open URL with protocol '" + url.getProtocol() + "' for output.");    new Exception().printStackTrace();    System.exit(1);  }  return openCompressedStream(url.getFile());}  }
class C{  public void load(String filename){  ++numMappings;  loadClassFile(filename);}  }
class C{  public long toStream(final OutputBitStream obs,final ProgressLogger pl) throws IOException {  final long result=toStream(root,obs,pl);  LOGGER.debug("Gain: " + gain);  return result;}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer();  sb.append(getWFStateText()).append(": ").append(getNode().getName());  if (getAD_User_ID() > 0) {    MUser user=MUser.get(getCtx(),getAD_User_ID());    sb.append(" (").append(user.getName()).append(")");  }  return sb.toString();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  protected String defaultIterativeClassifierString(){  return "weka.classifiers.meta.LogitBoost";}  }
class C{  public Vector4f sub(Vector4fc v){  x-=v.x();  y-=v.y();  z-=v.z();  w-=v.w();  return this;}  }
class C{  @NotNull public static Database databaseForProperties(@NotNull String propertiesPath){  return new Database(createConnectionProvider(propertiesPath));}  }
class C{  protected void processExecuteResponse(GenericResponse genericResponse){}  }
class C{  public static IOTask<List<String>> loadProfileNamesTask(){  log.debug(null);  return FS.loadDirectoryNamesTask("./" + PROFILES_DIR,false);}  }
class C{  public static SitesEntry insertSite(WebmasterToolsService myService,String siteUrl) throws IOException, ServiceException {  SitesEntry entry=new SitesEntry();  OutOfLineContent content=new OutOfLineContent();  content.setUri(siteUrl);  entry.setContent(content);  System.out.println("Site: " + siteUrl + " now being added.");  return myService.insert(getSitesFeedUrl(),entry);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/varray") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) @Deprecated public TaskResourceRep changeVolumeVirtualArray(@PathParam("id") URI id,VirtualArrayChangeParam varrayChangeParam) throws InternalException, APIException {  _log.info("Request to change varray for volume {}",id);  TaskList taskList=changeVirtualArrayForVolumes(Arrays.asList(id),varrayChangeParam.getVirtualArray());  return taskList.getTaskList().get(0);}  }
class C{  protected static boolean checkMandatoryHeader(PduHeaders headers){  if (null == headers) {    return false;  }  int messageType=headers.getOctet(PduHeaders.MESSAGE_TYPE);  int mmsVersion=headers.getOctet(PduHeaders.MMS_VERSION);  if (0 == mmsVersion) {    return false;  }switch (messageType) {case PduHeaders.MESSAGE_TYPE_SEND_REQ:    byte[] srContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);  if (null == srContentType) {    return false;  }EncodedStringValue srFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == srFrom) {return false;}byte[] srTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == srTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_SEND_CONF:int scResponseStatus=headers.getOctet(PduHeaders.RESPONSE_STATUS);if (0 == scResponseStatus) {return false;}byte[] scTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == scTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:byte[] niContentLocation=headers.getTextString(PduHeaders.CONTENT_LOCATION);if (null == niContentLocation) {return false;}long niExpiry=headers.getLongInteger(PduHeaders.EXPIRY);if (-1 == niExpiry) {return false;}byte[] niMessageClass=headers.getTextString(PduHeaders.MESSAGE_CLASS);if (null == niMessageClass) {return false;}long niMessageSize=headers.getLongInteger(PduHeaders.MESSAGE_SIZE);if (-1 == niMessageSize) {return false;}byte[] niTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == niTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND:int nriStatus=headers.getOctet(PduHeaders.STATUS);if (0 == nriStatus) {return false;}byte[] nriTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == nriTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:byte[] rcContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);if (null == rcContentType) {return false;}long rcDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == rcDate) {return false;}break;case PduHeaders.MESSAGE_TYPE_DELIVERY_IND:long diDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == diDate) {return false;}byte[] diMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == diMessageId) {return false;}int diStatus=headers.getOctet(PduHeaders.STATUS);if (0 == diStatus) {return false;}EncodedStringValue[] diTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == diTo) {return false;}break;case PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND:byte[] aiTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == aiTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_READ_ORIG_IND:long roDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == roDate) {return false;}EncodedStringValue roFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == roFrom) {return false;}byte[] roMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == roMessageId) {return false;}int roReadStatus=headers.getOctet(PduHeaders.READ_STATUS);if (0 == roReadStatus) {return false;}EncodedStringValue[] roTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == roTo) {return false;}break;case PduHeaders.MESSAGE_TYPE_READ_REC_IND:EncodedStringValue rrFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == rrFrom) {return false;}byte[] rrMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == rrMessageId) {return false;}int rrReadStatus=headers.getOctet(PduHeaders.READ_STATUS);if (0 == rrReadStatus) {return false;}EncodedStringValue[] rrTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == rrTo) {return false;}break;default :return false;}return true;}  }
class C{  private boolean dynInit(){  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),m_C_BPartner_ID == 0 ? "C_BPartner_ID" : "M_Product_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"PriceActual"));  columnNames.add(Msg.translate(Env.getCtx(),"QtyInvoiced"));  columnNames.add(Msg.translate(Env.getCtx(),"Discount"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"DateInvoiced"));  columnNames.add(Msg.translate(Env.getCtx(),"AD_Org_ID"));  Vector<Vector<Object>> data=null;  if (m_C_BPartner_ID == 0)   data=queryBPartner(); else   data=queryProduct();  m_modelPrice=new DefaultTableModel(data,columnNames);  m_tablePrice.setModel(m_modelPrice);  m_tablePrice.setColumnClass(0,String.class,true);  m_tablePrice.setColumnClass(1,Double.class,true);  m_tablePrice.setColumnClass(2,Double.class,true);  m_tablePrice.setColumnClass(3,BigDecimal.class,true);  m_tablePrice.setColumnClass(4,String.class,true);  m_tablePrice.setColumnClass(5,Timestamp.class,true);  m_tablePrice.setColumnClass(6,String.class,true);  m_tablePrice.autoSize();  return data.size() != 0;}  }
class C{  public void testMovePointLeftNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=-18;  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointLeft(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  private int searchFilterIndex(List<Filter> filters,int targetId,int min,int max){  if (max <= min) {    return -1;  }  int mid=(min + max) / 2;  int id=filters.get(mid).getId();  if (id > targetId) {    return searchFilterIndex(filters,targetId,min,mid - 1);  } else   if (id < targetId) {    return searchFilterIndex(filters,targetId,mid + 1,max);  }  return mid + 1;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static Class<?> mainClass(){  for (  Map.Entry<Thread,StackTraceElement[]> stackEntry : Thread.getAllStackTraces().entrySet()) {    if ("main".equals(stackEntry.getKey().getName())) {      StackTraceElement[] stack=stackEntry.getValue();      StackTraceElement bottom=stack[stack.length - 1];      if ("main".equals(bottom.getMethodName())) {        try {          return Class.forName(bottom.getClassName());        } catch (        ClassNotFoundException e) {          return Bootique.class;        }      } else {        return Bootique.class;      }    }  }  return Bootique.class;}  }
class C{  public void grantRight(DbObject object,Right right){  if (grantedRights == null) {    grantedRights=New.hashMap();  }  grantedRights.put(object,right);}  }
class C{  ThreadTrace threadTrace(ThreadReference thread){  ThreadTrace trace=traceMap.get(thread);  if (trace == null) {    trace=new ThreadTrace(thread);    traceMap.put(thread,trace);  }  return trace;}  }
class C{  BasicElement(String name,String value){  if (name.isEmpty())   throw new IllegalArgumentException("Empty name not allowed.");  this.name=name;  this.value=value;}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  LinearRegressionModel expected=(LinearRegressionModel)expectedObj;  LinearRegressionModel actual=(LinearRegressionModel)actualObj;  message=message + " - Linear Regression Model \"" + actual.getSource()+ "\" does not match the expected Model";  Assert.assertArrayEquals(message + " : coefficients are not equal",expected.getCoefficients(),actual.getCoefficients(),1E-15);  Assert.assertArrayEquals(message + " : probabilities are not equal",expected.getProbabilities(),actual.getProbabilities(),1E-15);  Assert.assertArrayEquals(message + " : selected attributes are not equal",expected.getSelectedAttributeNames(),actual.getSelectedAttributeNames());  Assert.assertArrayEquals(message + " : selected attributes are not equal",expected.getSelectedAttributes(),actual.getSelectedAttributes());  Assert.assertArrayEquals(message + " : standard errors are not equal",expected.getStandardErrors(),actual.getStandardErrors(),1E-15);  Assert.assertArrayEquals(message + " : standardized coefficients are not equal",expected.getStandardizedCoefficients(),actual.getStandardizedCoefficients(),1E-15);  Assert.assertArrayEquals(message + " : tolerances are not equal",expected.getTolerances(),actual.getTolerances(),1E-15);  Assert.assertArrayEquals(message + " : t statistics are not equal",expected.getTStats(),actual.getTStats(),1E-15);}  }
class C{  public final CC height(String size){  ver.setSize(ConstraintParser.parseBoundSize(size,false,false));  return this;}  }
class C{  public boolean isDrawingDoubleBuffered(){  return isDrawingDoubleBuffered;}  }
class C{  public final CC alignY(String align){  ver.setAlign(ConstraintParser.parseUnitValueOrAlign(align,false,null));  return this;}  }
class C{  public boolean inverseTranspose(){  Matrix4f result=new Matrix4f();  for (int i=0; i < 4; ++i) {    for (int j=0; j < 4; ++j) {      result.mMat[4 * j + i]=computeCofactor(i,j);    }  }  float det=mMat[0] * result.mMat[0] + mMat[4] * result.mMat[4] + mMat[8] * result.mMat[8] + mMat[12] * result.mMat[12];  if (Math.abs(det) < 1e-6) {    return false;  }  det=1.0f / det;  for (int i=0; i < 16; ++i) {    mMat[i]=result.mMat[i] * det;  }  return true;}  }
class C{  public Particle(double rx,double ry,double vx,double vy,double radius,double mass,Color color){  this.vx=vx;  this.vy=vy;  this.rx=rx;  this.ry=ry;  this.radius=radius;  this.mass=mass;  this.color=color;}  }
class C{  public IntBag(int[] other){  this();  if (other != null)   addAll(other);}  }
class C{  public GitlabProjectMember addProjectMember(Integer projectId,Integer userId,GitlabAccessLevel accessLevel) throws IOException {  Query query=new Query().appendIf("id",projectId).appendIf("user_id",userId).appendIf("access_level",accessLevel);  String tailUrl=GitlabProject.URL + "/" + projectId+ GitlabProjectMember.URL+ query.toString();  return dispatch().to(tailUrl,GitlabProjectMember.class);}  }
class C{  public void handleRightMouseClick(MouseEvent e){}  }
class C{  public static String escapeBackSlashesIfNotNull(String in){  if (in != null) {    return StringUtils.replace(in,"\\","\\\\");  } else {    return null;  }}  }
class C{  private void initializeNameGoals(Map<TestCase,Set<TestFitnessFunction>> testToGoals){  for (  Map.Entry<TestCase,Set<TestFitnessFunction>> entry : testToGoals.entrySet()) {    Set<TestFitnessFunction> goals=new LinkedHashSet<>();    List<TestFitnessFunction> topGoals=getTopGoals(entry.getValue());    if (topGoals.isEmpty()) {    } else     if (topGoals.size() <= MAX_SIMILAR_GOALS) {      for (      TestFitnessFunction goal : topGoals) {        goals.add(goal);        String goalName=getTestName(entry.getKey(),goals);        if (goalName.length() > MAX_CHARS) {          goals.remove(goal);          break;        }      }    } else {      goals.add(chooseRepresentativeGoal(entry.getKey(),topGoals));    }    testToGoals.put(entry.getKey(),goals);  }}  }
class C{  public static int writeLELong(byte[] b,int off,long val){  b[off + 0]=(byte)((val) & 0xff);  b[off + 1]=(byte)((val >> 8) & 0xff);  b[off + 2]=(byte)((val >> 16) & 0xff);  b[off + 3]=(byte)((val >> 24) & 0xff);  b[off + 4]=(byte)((val >> 32) & 0xff);  b[off + 5]=(byte)((val >> 40) & 0xff);  b[off + 6]=(byte)((val >> 48) & 0xff);  b[off + 7]=(byte)((val >> 56) & 0xff);  return 8;}  }
class C{  public static boolean quatEqual(Quaterniond a,Quaterniond b,double precision){  return doubleEqual(a.x,b.x,precision) && doubleEqual(a.y,b.y,precision) && doubleEqual(a.z,b.z,precision)&& doubleEqual(a.w,b.w,precision);}  }
class C{  public static void listAclJson(String aclURL){  String fileSystem=null;  String shareName=null;  if (StringUtils.isNotBlank(aclURL)) {    String[] parts=aclURL.split("/");    if (parts.length == 7) {      fileSystem=parts[3];      shareName=parts[5];    }  }  ViPRCoreClient client=BourneUtil.getViprClient();  List<ShareACL> shareAcls=client.fileSystems().getShareACLs(uri(fileSystem),shareName);  List<ShareACLDataTable.AclInfo> acl=Lists.newArrayList();  for (  ShareACL shareAcl : shareAcls) {    String userOrGroup=shareAcl.getUser();    String type="User";    if (shareAcl.getGroup() != null && shareAcl.getGroup() != "") {      type="Group";      userOrGroup=shareAcl.getGroup();    }    acl.add(new ShareACLDataTable.AclInfo(userOrGroup,type,shareAcl.getPermission(),fileSystem,shareName,shareAcl.getDomain()));  }  renderJSON(DataTablesSupport.createJSON(acl,params));}  }
class C{  @SuppressWarnings("static-method") RouterPriorityQueue<? extends Node> createRouterPriorityQueue(){  return new PseudoRemovePriorityQueue<>(500);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private State initializeTaskState(final Operation start){  State s=start.getBody(State.class);  if (s.taskInfo == null || s.taskInfo.stage == TaskState.TaskStage.CREATED) {    s.taskInfo=new TaskState();    s.taskInfo.stage=TaskState.TaskStage.STARTED;    s.taskInfo.subStage=TaskState.SubStage.UPDATE_DATASTORE_COUNTS;  }  if (s.documentExpirationTimeMicros <= 0) {    s.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  if (s.queryPollDelay == null) {    s.queryPollDelay=DEFAULT_QUERY_POLL_DELAY;  }  return s;}  }
class C{  public ModeledSharingProfile(){}  }
class C{  public Vertex parseEquation(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  try {    Vertex equation=parseElement(stream,elements,debug,network);    BinaryData byteCode=new BinaryData();    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(byteStream);    dataStream.writeLong(network.createVertex(Primitive.DO).getId());    dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());    stream.skipWhitespace();    ensureNext('{',stream);    stream.skipWhitespace();    char peek=stream.peek();    while (peek != '}') {      stream.skipWhitespace();      parseElementByteCode(stream,dataStream,elements,debug,network);      ensureNext(';',',',stream);      stream.skipWhitespace();      peek=stream.peek();    }    ensureNext('}',stream);    dataStream.writeLong(0l);    dataStream.writeLong(0l);    byteCode.setBytes(byteStream.toByteArray());    equation.setData(byteCode);    network.addVertex(equation);    return equation;  } catch (  IOException exception) {    throw new SelfParseException("IO Error",stream,exception);  }}  }
class C{  public KernelDensityFunction(Collection<double[]> points){  this(points.toArray(new double[points.size()][]));}  }
class C{  public static CallSite altMetafactory(MethodHandles.Lookup caller,String invokedName,MethodType invokedType,Object... args){  throw new UnsupportedOperationException();}  }
class C{  public static <T>LazyPVectorX<T> fromIterable(Reducer<PVector<T>> collector,Iterable<T> it){  if (it instanceof LazyPVectorX)   return (LazyPVectorX<T>)it;  if (it instanceof PVector)   return new LazyPVectorX<T>((PVector<T>)it,collector);  return new LazyPVectorX<T>(Flux.fromIterable(it),collector);}  }
class C{  public static String swapCase(String str){  if (str == null) {    return null;  }  int sz=str.length();  StringBuilder buffer=new StringBuilder(sz);  boolean whitespace=false;  char ch;  char tmp;  for (int i=0; i < sz; i++) {    ch=str.charAt(i);    if (Character.isUpperCase(ch)) {      tmp=Character.toLowerCase(ch);    } else     if (Character.isTitleCase(ch)) {      tmp=Character.toLowerCase(ch);    } else     if (Character.isLowerCase(ch)) {      if (whitespace) {        tmp=Character.toTitleCase(ch);      } else {        tmp=Character.toUpperCase(ch);      }    } else {      tmp=ch;    }    buffer.append(tmp);    whitespace=Character.isWhitespace(ch);  }  return buffer.toString();}  }
class C{  static Object doStrictFloorMod(int x,int y){  try {    return StrictMath.floorMod(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  public boolean isVisibleToUser(){  return getBooleanProperty(BOOLEAN_PROPERTY_VISIBLE_TO_USER);}  }
class C{  private void updateWaypoints(GoogleMap googleMap){synchronized (waypoints) {    for (    Waypoint waypoint : waypoints) {      Location location=waypoint.getLocation();      LatLng latLng=new LatLng(location.getLatitude(),location.getLongitude());      int drawableId=waypoint.getType() == WaypointType.STATISTICS ? R.drawable.ic_marker_yellow_pushpin : R.drawable.ic_marker_blue_pushpin;      MarkerOptions markerOptions=new MarkerOptions().position(latLng).anchor(WAYPOINT_X_ANCHOR,WAYPOINT_Y_ANCHOR).draggable(false).visible(true).icon(BitmapDescriptorFactory.fromResource(drawableId)).title(String.valueOf(waypoint.getId()));      googleMap.addMarker(markerOptions);    }  }}  }
class C{  void writeTag(ImageOutputStream ios) throws IOException {  ios.write(0xff);  ios.write(tag);  write2bytes(ios,length);}  }
class C{  public static int[] parseString(String[] values){  int[] result=new int[values.length];  for (int i=0; i < result.length; i++) {    result[i]=parseString(values[i]);  }  return result;}  }
class C{  public void java_lang_System_setOut0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysOut=helper.staticField("java.lang.System","out");  helper.assign(sysOut,params[0]);}  }
class C{  public static boolean constantTimeEq(byte[] a,byte[] b){  if (a.length != b.length) {    return false;  }  int result=0;  for (int i=0; i < a.length; i++) {    result|=a[i] ^ b[i];  }  return result == 0;}  }
class C{  public boolean isDownloadManagerAvailable(Context context){  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.addCategory(Intent.CATEGORY_LAUNCHER);  intent.setClassName(resources.getString(R.string.android_download_manager_ui_resolver),resources.getString(R.string.android_download_manager_list_resolver));  return context.getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY).size() > 0;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public void ordinaryChars(int low,int hi){  if (low < 0)   low=0;  if (hi >= ctype.length)   hi=ctype.length - 1;  while (low <= hi)   ctype[low++]=0;}  }
class C{  public static int unboxNatural(final Integer x){  return x == null ? -1 : x;}  }
class C{  public RetornoServicio writeDocumento(Entidad entidad,String id,String stringB64Encoded){  if (logger.isDebugEnabled()) {    logger.debug("writeDocumento(Entidad, String, String) - start Entidad: [" + entidad.getIdentificador() + "] ID: ["+ id+ "]");  }  try {    ByteArrayOutputStream outputStream=this.getOS(stringB64Encoded);    getServicioGestionCSV().writeDocumento(entidad,id,outputStream);    RetornoServicio returnRetornoServicio=ServiciosUtils.createReturnOK();    if (logger.isDebugEnabled()) {      logger.debug("writeDocumento(Entidad, String, String) - end");    }    return returnRetornoServicio;  } catch (  SOAPException e) {    logger.error("writeDocumento(Entidad, String, String)",e);    RetornoServicio returnRetornoServicio=ServiciosUtils.createReturnError();    if (logger.isDebugEnabled()) {      logger.debug("writeDocumento(Entidad, String, String) - end");    }    return returnRetornoServicio;  }catch (  SigemException e) {    logger.error("writeDocumento(Entidad, String, String)",e);    RetornoServicio returnRetornoServicio=ServiciosUtils.createReturnError();    if (logger.isDebugEnabled()) {      logger.debug("writeDocumento(Entidad, String, String) - end");    }    return returnRetornoServicio;  }catch (  IOException e) {    logger.error("writeDocumento(Entidad, String, String)",e);    RetornoServicio returnRetornoServicio=ServiciosUtils.createReturnError();    if (logger.isDebugEnabled()) {      logger.debug("writeDocumento(Entidad, String, String) - end");    }    return returnRetornoServicio;  }}  }
class C{  public Subcollection createSubCollection(final String id,final String name){  Subcollection subCol=null;  if (!collectionMap.containsKey(id)) {    subCol=new Subcollection(id,name,getConf());    collectionMap.put(id,subCol);  }  return subCol;}  }
class C{  public void assertCleared(W window){  for (  StateNamespace untypedNamespace : stateInternals.getNamespacesInUse()) {    if (untypedNamespace instanceof WindowAndTriggerNamespace) {      @SuppressWarnings("unchecked") WindowAndTriggerNamespace<W> namespace=(WindowAndTriggerNamespace<W>)untypedNamespace;      if (namespace.getWindow().equals(window)) {        Set<?> tagsInUse=stateInternals.getTagsInUse(namespace);        assertTrue("Trigger has not cleared tags: " + tagsInUse,tagsInUse.isEmpty());      }    }  }}  }
class C{  public static void unregisterSessionNode(SessionNode sessionNode){  EDITED_MODELS.remove(sessionNode);}  }
class C{  @Override public void onAfterUpdatePendingChanges(final PendingChangeCacheEvent event,final boolean modifiedDuringOperation){  boolean fullRefresh=false;  IResource[] resources=null;synchronized (refreshLock) {    if (--refreshDefer < 0) {      refreshDefer=0;    }    if (refreshDefer > 0) {      return;    }    if (refreshWorkspace) {      fullRefresh=true;    } else {      resources=resourceList.toArray(new IResource[resourceList.size()]);    }    resourceList.clear();    refreshWorkspace=false;  }  if (fullRefresh) {    refresh();  } else   if (resources != null && resources.length > 0) {    refresh(resources);  }}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  float d=0;  int maxRadius=0;  String outputType=null;  boolean useLowest=false;  WhiteboxRaster dem;  WhiteboxRaster output;  int numCols, numRows;  double gridRes=1;  int x=0, y=0, row, col, i, j;  double elevationAB, elevationXY;  int radius;  double distance;  double heightDiff;  double tmpDistance;  double tmpHeightDiff;  boolean downslope;  double noData;  float progress=0;  double rad2deg=180 / Math.PI;  int minX=0, minY=0;  double minElev=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      d=Float.parseFloat(args[i]);    } else     if (i == 3) {      maxRadius=Integer.parseInt(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      useLowest=Boolean.parseBoolean(args[i]);    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    if (useLowest) {      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (dem.getValue(row,col) == dem.getMinimumValue()) {            minX=col;            minY=row;            minElev=dem.getValue(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 1 of 2:",(int)progress);      }    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        radius=0;        downslope=false;        heightDiff=0;        distance=Float.MAX_VALUE;        elevationAB=dem.getValue(row,col);        if ((elevationAB != noData) && (elevationAB > dem.getMinimumValue() + d)) {          do {            radius=radius + 1;            for (i=-radius; i <= radius; i++) {              for (j=-radius; j <= radius; j++) {                if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                  x=col + i;                  y=row + j;                  elevationXY=dem.getValue(y,x);                  if (elevationXY != noData) {                    if (elevationAB - elevationXY > d) {                      tmpDistance=Math.sqrt(i * i + j * j) * gridRes;                      tmpHeightDiff=elevationAB - elevationXY;                      if (tmpDistance < distance) {                        downslope=true;                        distance=tmpDistance;                        heightDiff=tmpHeightDiff;                      }                    }                  }                }              }            }          } while ((radius < maxRadius) & (downslope == false));          if (downslope == true) {switch (outputType) {case "tangent":              output.setValue(row,col,heightDiff / distance);            break;case "degrees":          output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);        break;case "radians":      output.setValue(row,col,Math.atan(heightDiff / distance));    break;case "distance":  output.setValue(row,col,distance);break;}} else if (useLowest == true) {distance=Math.sqrt(Math.pow((col - minX),2) + Math.pow((row - minY),2)) * gridRes;heightDiff=elevationAB - minElev;switch (outputType) {case "tangent":output.setValue(row,col,heightDiff / distance);break;case "degrees":output.setValue(row,col,Math.atan(heightDiff / distance) * rad2deg);break;case "radians":output.setValue(row,col,Math.atan(heightDiff / distance));break;case "distance":output.setValue(row,col,distance);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void loadLines(){  ArrayList<MReportLine> list=new ArrayList<MReportLine>();  String sql="SELECT * FROM PA_ReportLine " + "WHERE PA_ReportLineSet_ID=? AND IsActive='Y' " + "ORDER BY SeqNo";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getPA_ReportLineSet_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next())     list.add(new MReportLine(getCtx(),rs,get_TrxName()));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    try {      if (pstmt != null)       pstmt.close();    } catch (    Exception e) {    }    pstmt=null;  }  m_lines=new MReportLine[list.size()];  list.toArray(m_lines);  log.finest("ID=" + getPA_ReportLineSet_ID() + " - Size="+ list.size());}  }
class C{  public static Interval oneToBy(int count,int step){  if (count < 1) {    throw new IllegalArgumentException("Only positive ranges allowed using oneToBy");  }  return Interval.fromToBy(1,count,step);}  }
class C{  private static Something doSomething(String name,String... args) throws Exception {  List<String> pbArgs=new ArrayList<>(Arrays.asList("-cp",System.getProperty("test.class.path")));  pbArgs.addAll(Arrays.asList(args));  pbArgs.add("JMXStartStopDoSomething");  ProcessBuilder pb=ProcessTools.createJavaProcessBuilder(pbArgs.toArray(new String[pbArgs.size()]));  Something s=new Something(pb,name);  s.start();  return s;}  }
class C{  public static double parseToDouble(String str){  return Double.parseDouble(str);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_ITEM___TRACE_ENTITY_1:    return traceEntity_1 != null && !traceEntity_1.isEmpty();case UmplePackage.TRACE_ITEM___PRE_OR_POST_CONDITION_1:  return preOrPostCondition_1 != null && !preOrPostCondition_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Statement createStatement(int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {synchronized (getSynchronizationObject()) {    if (resultSetHoldability == ResultSet.HOLD_CURSORS_OVER_COMMIT && resultSetType == ResultSet.TYPE_FORWARD_ONLY) {      addWarning(FbExceptionBuilder.forWarning(JaybirdErrorCodes.jb_resultSetTypeUpgradeReasonHoldability).toFlatSQLException(SQLWarning.class));      resultSetType=ResultSet.TYPE_SCROLL_INSENSITIVE;    }    if (resultSetType == ResultSet.TYPE_SCROLL_SENSITIVE) {      addWarning(FbExceptionBuilder.forWarning(JaybirdErrorCodes.jb_resultSetTypeDowngradeReasonScrollSensitive).toFlatSQLException(SQLWarning.class));      resultSetType=ResultSet.TYPE_SCROLL_INSENSITIVE;    }    checkHoldability(resultSetType,resultSetHoldability);    Statement stmt=new FBStatement(getGDSHelper(),resultSetType,resultSetConcurrency,resultSetHoldability,txCoordinator);    activeStatements.add(stmt);    return stmt;  }}  }
class C{  protected void sendContact(String name,String vCardLikeString){  Message message=new Message();  message.fillMessageForSend(activeUser,vCardLikeString,Const.MessageType.TYPE_CONTACT,null,null);  etMessage.setText("");  if (SocketManager.getInstance().isSocketConnect()) {    JSONObject emitMessage=EmitJsonCreator.createEmitSendMessage(message);    SocketManager.getInstance().emitMessage(Const.EmitKeyWord.SEND_MESSAGE,emitMessage);  } else {    unSentMessageList.add(message);  }  onMessageSent(message);}  }
class C{  private void fillNotificationCount(final String userId,final Map<String,Object> dataModel){  final int unreadCommentedNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_COMMENTED);  dataModel.put(Common.UNREAD_COMMENTED_NOTIFICATION_CNT,unreadCommentedNotificationCnt);  final int unreadAtNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_AT);  dataModel.put(Common.UNREAD_AT_NOTIFICATION_CNT,unreadAtNotificationCnt);  final int unreadFollowingUserNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_FOLLOWING_USER);  dataModel.put(Common.UNREAD_FOLLOWING_USER_NOTIFICATION_CNT,unreadFollowingUserNotificationCnt);  final int unreadPointNotificationCnt=notificationQueryService.getUnreadPointNotificationCount(userId);  dataModel.put(Common.UNREAD_POINT_NOTIFICATION_CNT,unreadPointNotificationCnt);  final int unreadBroadcastCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_BROADCAST);  dataModel.put(Common.UNREAD_BROADCAST_NOTIFICATION_CNT,unreadBroadcastCnt);}  }
class C{  public <T extends ICalProperty>List<T> removeProperties(Class<T> clazz){  List<ICalProperty> removed=properties.removeAll(clazz);  return castList(removed,clazz);}  }
class C{  public boolean hasError(){  return isOnError() && throwable != null;}  }
class C{  public synchronized void addElement(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void removeOldConflatedEntry(Long oldPosition) throws CacheException, InterruptedException {synchronized (this) {    Conflatable conflatable=(Conflatable)owningQueue.region.get(oldPosition);    if (owningQueue.destroyFromAvailableIDsAndRegion(oldPosition)) {      if (this.counters != null) {        this.counters.remove(oldPosition);      }      if (conflatable instanceof HAEventWrapper) {        owningQueue.decAndRemoveFromHAContainer((HAEventWrapper)conflatable);      }      if (!(conflatable instanceof ClientMarkerMessageImpl)) {        owningQueue.stats.incEventsConflated();      } else {        owningQueue.stats.incMarkerEventsConflated();      }    }  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      if (board[r][c] == EmptyMark) {        sb.append("   ");      } else {        if (board[r][c] < 10) {          sb.append(" ");        }        sb.append(board[r][c] + " ");      }    }    sb.append('\n');  }  return sb.toString();}  }
class C{  @Override public synchronized int size(){  ensureValid();  return mSize;}  }
