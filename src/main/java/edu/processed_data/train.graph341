class C{  @Override void closeDatabaseNow(){  try {    if (mydb != null)     mydb.dispose();  } catch (  Exception e) {    Log.e(LOG_TAG,"couldn't close database, ignoring",e);  }}  }
class C{  private void applyWheelchairPermissions(EnumMap<Node,Label> tree,Way way){  if (way.hasTag("highway","steps")) {    applyLabel(Node.WHEELCHAIR,Label.NO,tree);  }  if (way.hasTag("wheelchair")) {    applyLabel(Node.WHEELCHAIR,Label.fromTag(way.getTag("wheelchair")),tree);  }  if (way.hasTag("ramp:wheelchair")) {    applyLabel(Node.WHEELCHAIR,Label.fromTag(way.getTag("ramp:wheelchair")),tree);  }}  }
class C{  private JCTree findJumpTarget(DiagnosticPosition pos,JCTree.Tag tag,Name label,Env<AttrContext> env){  Env<AttrContext> env1=env;  LOOP:   while (env1 != null) {switch (env1.tree.getTag()) {case LABELLED:      JCLabeledStatement labelled=(JCLabeledStatement)env1.tree;    if (label == labelled.label) {      if (tag == CONTINUE) {        if (!labelled.body.hasTag(DOLOOP) && !labelled.body.hasTag(WHILELOOP) && !labelled.body.hasTag(FORLOOP)&& !labelled.body.hasTag(FOREACHLOOP))         log.error(pos,"not.loop.label",label);        return TreeInfo.referencedStatement(labelled);      } else {        return labelled;      }    }  break;case DOLOOP:case WHILELOOP:case FORLOOP:case FOREACHLOOP:if (label == null) return env1.tree;break;case SWITCH:if (label == null && tag == BREAK) return env1.tree;break;case LAMBDA:case METHODDEF:case CLASSDEF:break LOOP;default :}env1=env1.next;}if (label != null) log.error(pos,"undef.label",label); else if (tag == CONTINUE) log.error(pos,"cont.outside.loop"); else log.error(pos,"break.outside.switch.loop");return null;}  }
class C{  public ApprovalDialog(Frame owner,String title){  super(owner,title);}  }
class C{  static public void startElement(final ContentHandler contentHandler,final String prefix,final String localName,final AttributesImpl attributes) throws SAXException {  contentHandler.startElement(XMLConstants.NULL_NS_URI,localName,prefix + ":" + localName,attributes);}  }
class C{  private void calculateIntegratePartials(BigDecimal[] inPartials,BigDecimal[] proportions,BigDecimal[] outPartials){  int u=0;  int v=0;  for (int k=0; k < patternCount; k++) {    for (int i=0; i < stateCount; i++) {      outPartials[u]=inPartials[v].multiply(proportions[0],precision);      u++;      v++;    }  }  for (int l=1; l < matrixCount; l++) {    u=0;    for (int k=0; k < patternCount; k++) {      for (int i=0; i < stateCount; i++) {        outPartials[u]=outPartials[u].add(inPartials[v].multiply(proportions[l],precision),precision);        u++;        v++;      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    return getDeclaredTypeAccessModifier();case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER__DECLARED_PROVIDED_BY_RUNTIME:  return isDeclaredProvidedByRuntime();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Matrix4(Vector3 position,Quaternion rotation,Vector3 scale){  set(position,rotation,scale);}  }
class C{  synchronized void openTrapSocketIfNeeded() throws SocketException {  if (trapSocket == null) {    trapSocket=new DatagramSocket(0,address);    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"openTrapSocketIfNeeded","using port " + trapSocket.getLocalPort() + " to send traps");    }  }}  }
class C{  public SavingsAccount(int id,double balance){  super(id,balance);}  }
class C{  public HashCode append(final byte[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final byte element : array) {      append(element);    }  }  return this;}  }
class C{  public AuthorizeTagHandler(UserMapping parent){  this.parent=parent;}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public void checkSearch(){  if (getTweetSearch().isEmpty()) {    return;  }  log("Processing search",Level.FINE,getTweetSearch());  try {    Network memory=getBot().memory().newMemory();    Vertex twitter=memory.createVertex(getPrimitive());    Vertex vertex=twitter.getRelationship(Primitive.LASTSEARCH);    long last=0;    long max=0;    int count=0;    this.errors=0;    if (vertex != null) {      last=((Number)vertex.getData()).longValue();    }    Set<Long> processed=new HashSet<Long>();    for (    String tweetSearch : getTweetSearch()) {      Query query=new Query(tweetSearch);      if (vertex != null) {        query.setSinceId(last);      }      SearchResource search=getConnection().search();      QueryResult result=search.search(query);      List<Status> tweets=result.getTweets();      if (tweets != null) {        log("Processing search results",Level.FINE,tweets.size(),tweetSearch);        for (        Status tweet : tweets) {          if (count > this.maxSearch) {            break;          }          if (tweet.getId() > last && !processed.contains(tweet.getId())) {            if (tweet.getId() > max) {              max=tweet.getId();            }            boolean match=false;            if (tweet.getText().indexOf('@') != -1) {              continue;            }            if (tweet.isRetweet()) {              continue;            }            if (tweet.getUser().isProtected()) {              continue;            }            if (tweet.getUser().getScreenName().equals(getUserName())) {              continue;            }            if (Utils.checkProfanity(tweet.getText())) {              continue;            }            List<String> statusWords=new TextStream(tweet.getText().toLowerCase()).allWords();            for (            String text : getStatusKeywords()) {              List<String> keywords=new TextStream(text.toLowerCase()).allWords();              if (statusWords.containsAll(keywords)) {                match=true;                break;              }            }            if (match) {              processed.add(tweet.getId());              log("Processing search",Level.INFO,tweet.getUser().getScreenName(),tweetSearch,tweet.getText());              input(tweet);              Utils.sleep(500);              count++;            } else {              if (!tweet.isRetweetedByMe()) {                for (                String keywords : getRetweet()) {                  List<String> keyWords=new TextStream(keywords).allWords();                  if (!keyWords.isEmpty()) {                    if (statusWords.containsAll(keyWords)) {                      processed.add(tweet.getId());                      count++;                      retweet(tweet);                      Utils.sleep(500);                      break;                    }                  }                }              }            }          }        }      }      if (count > this.maxSearch) {        break;      }      if (this.errors > this.maxErrors) {        break;      }    }    if (max != 0) {      twitter.setRelationship(Primitive.LASTSEARCH,memory.createVertex(max));      memory.save();    }  } catch (  Exception exception) {    log(exception);  }  int count=0;  while (count < 60 && !getBot().memory().getActiveMemory().isEmpty()) {    Utils.sleep(1000);  }}  }
class C{  public static void updateWidgets(Context context,boolean serviceRunning){  int[] appWidgetIds=findAppWidgetIds(context);  updateWidgets(context,appWidgetIds,serviceRunning);}  }
class C{  public void startHeadersTransition(boolean withHeaders){  if (!mCanShowHeaders) {    throw new IllegalStateException("Cannot start headers transition");  }  if (isInHeadersTransition() || mShowingHeaders == withHeaders) {    return;  }  startHeadersTransitionInternal(withHeaders);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  return pager.dispatchTouchEvent(event);}  }
class C{  static boolean handleAppsCustomizeKeyEvent(View v,int keyCode,KeyEvent e){  ViewGroup parentLayout;  ViewGroup itemContainer;  int countX;  int countY;  if (v.getParent() instanceof ShortcutAndWidgetContainer) {    itemContainer=(ViewGroup)v.getParent();    parentLayout=(ViewGroup)itemContainer.getParent();    countX=((CellLayout)parentLayout).getCountX();    countY=((CellLayout)parentLayout).getCountY();  } else {    itemContainer=parentLayout=(ViewGroup)v.getParent();    countX=((PagedViewGridLayout)parentLayout).getCellCountX();    countY=((PagedViewGridLayout)parentLayout).getCellCountY();  }  final PagedView container=(PagedView)parentLayout.getParent();  final int iconIndex=itemContainer.indexOfChild(v);  final int itemCount=itemContainer.getChildCount();  final int pageIndex=((PagedView)container).indexToPage(container.indexOfChild(parentLayout));  final int pageCount=container.getChildCount();  final int x=iconIndex % countX;  final int y=iconIndex / countX;  final int action=e.getAction();  final boolean handleKeyEvent=(action != KeyEvent.ACTION_UP);  ViewGroup newParent=null;  View child=null;  boolean wasHandled=false;switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    if (handleKeyEvent) {      if (iconIndex > 0) {        itemContainer.getChildAt(iconIndex - 1).requestFocus();        v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);      } else {        if (pageIndex > 0) {          newParent=getAppsCustomizePage(container,pageIndex - 1);          if (newParent != null) {            container.snapToPage(pageIndex - 1);            child=newParent.getChildAt(newParent.getChildCount() - 1);            if (child != null) {              child.requestFocus();              v.playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);            }          }        }      }    }  wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_RIGHT:if (handleKeyEvent) {if (iconIndex < (itemCount - 1)) {  itemContainer.getChildAt(iconIndex + 1).requestFocus();  v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);} else {  if (pageIndex < (pageCount - 1)) {    newParent=getAppsCustomizePage(container,pageIndex + 1);    if (newParent != null) {      container.snapToPage(pageIndex + 1);      child=newParent.getChildAt(0);      if (child != null) {        child.requestFocus();        v.playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);      }    }  }}}wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_UP:if (handleKeyEvent) {if (y > 0) {int newiconIndex=((y - 1) * countX) + x;itemContainer.getChildAt(newiconIndex).requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}}wasHandled=true;break;case KeyEvent.KEYCODE_DPAD_DOWN:if (handleKeyEvent) {if (y < (countY - 1)) {int newiconIndex=Math.min(itemCount - 1,((y + 1) * countX) + x);int newIconY=newiconIndex / countX;if (newIconY != y) {itemContainer.getChildAt(newiconIndex).requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}}}wasHandled=true;break;case KeyEvent.KEYCODE_PAGE_UP:if (handleKeyEvent) {if (pageIndex > 0) {newParent=getAppsCustomizePage(container,pageIndex - 1);if (newParent != null) {container.snapToPage(pageIndex - 1);child=newParent.getChildAt(0);if (child != null) {child.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}}} else {itemContainer.getChildAt(0).requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}}wasHandled=true;break;case KeyEvent.KEYCODE_PAGE_DOWN:if (handleKeyEvent) {if (pageIndex < (pageCount - 1)) {newParent=getAppsCustomizePage(container,pageIndex + 1);if (newParent != null) {container.snapToPage(pageIndex + 1);child=newParent.getChildAt(0);if (child != null) {child.requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}}} else {itemContainer.getChildAt(itemCount - 1).requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}}wasHandled=true;break;case KeyEvent.KEYCODE_MOVE_HOME:if (handleKeyEvent) {itemContainer.getChildAt(0).requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);}wasHandled=true;break;case KeyEvent.KEYCODE_MOVE_END:if (handleKeyEvent) {itemContainer.getChildAt(itemCount - 1).requestFocus();v.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);}wasHandled=true;break;default :break;}return wasHandled;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);  builder.addAttribute(CODE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void pingAllDevices(String message) throws IOException {  Sender sender=new Sender(Ids.API_KEY);  for (  DeviceInfo deviceInfo : endpoint.listDeviceInfo()) {    doSendViaGcm(message,sender,deviceInfo);  }}  }
class C{  @Override public void windowDeactivated(WindowEvent e){}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);  this.lastMillisecond=getLastMillisecond(calendar);}  }
class C{  public boolean canPurchase(){  return getSeedCost() > 0;}  }
class C{  @operator(value="simplification",category={IOperatorCategory.SPATIAL,IOperatorCategory.SP_TRANSFORMATIONS},concept={IConcept.GEOMETRY,IConcept.SPATIAL_COMPUTATION,IConcept.SPATIAL_TRANSFORMATION}) @doc(value="A geometry corresponding to the simplification of the operand (geometry, agent, point) considering a tolerance distance.",comment="The algorithm used for the simplification is Douglas-Peucker",examples={@example(value="self simplification 0.1",equals="the geometry resulting from the application of the Douglas-Peuker algorithm on the geometry of the agent applying the operator with a tolerance distance of 0.1.",test=false)}) public static IShape simplification(final IScope scope,final IShape g1,final Double distanceTolerance){  if (g1 == null || g1.getInnerGeometry() == null) {    return g1;  }  if (g1.isPoint()) {    return g1.copy(scope);  }  final Geometry geomSimp=DouglasPeuckerSimplifier.simplify(g1.getInnerGeometry(),distanceTolerance);  if (geomSimp != null && !geomSimp.isEmpty() && geomSimp.isSimple()) {    return new GamaShape(g1,geomSimp);  }  return g1.copy(scope);}  }
class C{  protected void readHeader(StreamTokenizer tokenizer) throws IOException {  String attributeName;  FastVector attributeValues;  int i;  getFirstToken(tokenizer);  if (tokenizer.ttype == StreamTokenizer.TT_EOF) {    errms(tokenizer,"premature end of file");  }  if (tokenizer.sval.equalsIgnoreCase("@relation")) {    getNextToken(tokenizer);    m_RelationName=tokenizer.sval;    getLastToken(tokenizer,false);  } else {    errms(tokenizer,"keyword @relation expected");  }  m_Attributes=new FastVector();  getFirstToken(tokenizer);  if (tokenizer.ttype == StreamTokenizer.TT_EOF) {    errms(tokenizer,"premature end of file");  }  while (tokenizer.sval.equalsIgnoreCase("@attribute")) {    getNextToken(tokenizer);    attributeName=tokenizer.sval;    getNextToken(tokenizer);    if (tokenizer.ttype == StreamTokenizer.TT_WORD) {      if (tokenizer.sval.equalsIgnoreCase("real") || tokenizer.sval.equalsIgnoreCase("integer") || tokenizer.sval.equalsIgnoreCase("numeric")) {        m_Attributes.addElement(new Attribute(attributeName,numAttributes()));        readTillEOL(tokenizer);      } else       if (tokenizer.sval.equalsIgnoreCase("string")) {        m_Attributes.addElement(new Attribute(attributeName,null,numAttributes()));        readTillEOL(tokenizer);      } else {        errms(tokenizer,"no valid attribute type or invalid " + "enumeration");      }    } else {      attributeValues=new FastVector();      tokenizer.pushBack();      if (tokenizer.nextToken() != '{') {        errms(tokenizer,"{ expected at beginning of enumeration");      }      while (tokenizer.nextToken() != '}') {        if (tokenizer.ttype == StreamTokenizer.TT_EOL) {          errms(tokenizer,"} expected at end of enumeration");        } else {          attributeValues.addElement(tokenizer.sval);        }      }      if (attributeValues.size() == 0) {        errms(tokenizer,"no nominal values found");      }      m_Attributes.addElement(new Attribute(attributeName,attributeValues,numAttributes()));    }    getLastToken(tokenizer,false);    getFirstToken(tokenizer);    if (tokenizer.ttype == StreamTokenizer.TT_EOF)     errms(tokenizer,"premature end of file");  }  if (!tokenizer.sval.equalsIgnoreCase("@data")) {    errms(tokenizer,"keyword @data expected");  }  if (m_Attributes.size() == 0) {    errms(tokenizer,"no attributes declared");  }  m_ValueBuffer=new double[numAttributes()];  m_IndicesBuffer=new int[numAttributes()];}  }
class C{  public EquirippleBandpass(int N,double OmegaS1,double Ws1,double OmegaP1,double OmegaP2,double Wp,double OmegaS2,double Ws2){  super(3,N);  if (!(0.0 < OmegaS1 && OmegaS1 < OmegaP1 && OmegaP1 < OmegaP2 && OmegaP2 < OmegaS2 && OmegaS2 < 1.0))   throw new IllegalArgumentException("Band edge specification error, ensure that 0.0 < OmegaS1 < OmegaP1 < OmegaP2 < OmegaS2 < 1.0");  bands[0][0]=0.0;  bands[0][1]=OmegaS1;  bands[1][0]=OmegaP1;  bands[1][1]=OmegaP2;  bands[2][0]=OmegaS2;  bands[2][1]=1.0;  this.Wp=Wp;  this.Ws1=Ws1;  this.Ws2=Ws2;  generateCoefficients();}  }
class C{  public Map<String,String> perFieldAnalyzer(){  return perFieldAnalyzer;}  }
class C{  @Override void recordSuccess(){  throw new CircuitBreakerOpenException(String.format("CircuitBreaker '%s' is open",stateMachine.getName()));}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  static void registerFeaturesExtractor(FeaturesExtractor extractor){  if (featuresExtractors.get(extractor.getType()) == null) {    featuresExtractors.put(extractor.getType(),new ArrayList<FeaturesExtractor>());  }  featuresExtractors.get(extractor.getType()).add(extractor);}  }
class C{  public static final void fillRectangle(GL2 gl,Rectangle r){  Vector2[] vs=r.getVertices();  gl.glBegin(GL2.GL_QUADS);  for (int i=0; i < vs.length; i++) {    Vector2 v=vs[i];    gl.glVertex2d(v.x,v.y);  }  gl.glEnd();}  }
class C{  public void test_pidStat_data_parse(){  final DateFormat f=SysstatUtil.newDateFormat();  System.err.println("Format: " + f.format(new Date()));  try {    System.err.println("Parsed: " + f.parse("06:35:15 AM"));    System.err.println("Parsed: " + f.parse("02:08:24 PM"));  } catch (  ParseException e) {    log.error("Could not parse?");  }}  }
class C{  synchronized void addCSS(String cssUrl,String encoding){  if (started) {    throw new IllegalStateException("ResourceThreadQueue alreadey started! stop/cancel first");  }  DocumentInfo cssDocInfo=new DocumentInfo(cssUrl,DocumentInfo.TYPE_CSS);  if (encoding != null) {    cssDocInfo.setEncoding(encoding);  }  ResourceThread t=new ResourceThread(cssDocInfo,htmlC,this);  queue.addElement(t);  incCSSCount();}  }
class C{  public RandomActiveLagGraph(LagGraphParams params){  addFactors("Gene",params.getVarsPerInd());  int indegreeType;switch (params.getIndegreeType()) {case LagGraphParams.CONSTANT:    indegreeType=SimpleRandomizer.CONSTANT;  break;case LagGraphParams.MAX:indegreeType=SimpleRandomizer.MAX;break;case LagGraphParams.MEAN:indegreeType=SimpleRandomizer.MEAN;break;default :throw new IllegalArgumentException();}setMaxLagAllowable(params.getMlag());SimpleRandomizer randomizer=new SimpleRandomizer(params.getIndegree(),indegreeType,params.getMlag(),params.getPercentUnregulated());randomizer.initialize(this);}  }
class C{  public JList createList(){  JList list=new JList(m_model);  list.setSelectionModel(m_model);  return list;}  }
class C{  protected void addContentLengthRequestHeader(final HttpState state,final HttpConnection conn) throws IOException, HttpException {  LOG.trace("enter EntityEnclosingMethod.addContentLengthRequestHeader(" + "HttpState, HttpConnection)");  if (getRequestHeader("Content-Length") == null) {    final long len=getRequestContentLength();    addRequestHeader("Content-Length",String.valueOf(len));  }  removeRequestHeader("Transfer-Encoding");}  }
class C{  public static int putShort(byte[] bytes,int offset,short val){  if (littleEndian) {    val=Short.reverseBytes(val);  }  theUnsafe.putShort(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);  return offset + Bytes.SIZEOF_SHORT;}  }
class C{  public void push(float val){  this.push(new BaseTypeWrapper(val));}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  value=stream.readFloat();}  }
class C{  @Override @SuppressWarnings("unchecked") protected AbstractHashedMap<K,V> clone(){  try {    final AbstractHashedMap<K,V> cloned=(AbstractHashedMap<K,V>)super.clone();    cloned.data=new HashEntry[data.length];    cloned.entrySet=null;    cloned.keySet=null;    cloned.values=null;    cloned.modCount=0;    cloned.size=0;    cloned.init();    cloned.putAll(this);    return cloned;  } catch (  final CloneNotSupportedException ex) {    throw new InternalError();  }}  }
class C{  public String filter(String input){  StringBuilder output=new StringBuilder();  Matcher tokenMatcher=tokenPattern.matcher(input);  int endOfLastMatch=0;  while (tokenMatcher.find()) {    String literal=tokenMatcher.group(LEADING_TEXT_GROUP);    String escape=tokenMatcher.group(ESCAPE_CHAR_GROUP);    output.append(literal);    if ("$".equals(escape)) {      String notToken=tokenMatcher.group(TOKEN_GROUP);      output.append(notToken);    } else {      output.append(escape);      String tokenName=tokenMatcher.group(TOKEN_NAME_GROUP);      String tokenValue=getToken(tokenName);      if (tokenValue == null) {        String notToken=tokenMatcher.group(TOKEN_GROUP);        output.append(notToken);      } else       output.append(tokenValue);    }    endOfLastMatch=tokenMatcher.end();  }  output.append(input.substring(endOfLastMatch));  return output.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:00.792 -0400",hash_original_method="0CA47F85F22831C76265289E7FD79125",hash_generated_method="340A64C4C0FDF834096B8227F2AD7752") public AtCommandResult(int resultCode){  mResultCode=resultCode;  mResponse=new StringBuilder();}  }
class C{  public static final void writeMapXml(Map val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  Set s=val.entrySet();  Iterator i=s.iterator();  out.startTag(null,"map");  if (name != null) {    out.attribute(null,"name",name);  }  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    writeValueXml(e.getValue(),(String)e.getKey(),out);  }  out.endTag(null,"map");}  }
class C{  public TaskList createSnapshotSession(List<BlockObject> snapSessionSourceObjList,SnapshotSessionCreateParam param,BlockFullCopyManager fcManager){  Collection<URI> sourceURIs=transform(snapSessionSourceObjList,fctnDataObjectToID());  s_logger.info("START create snapshot session for sources {}",Joiner.on(',').join(sourceURIs));  String snapSessionLabel=TimeUtils.formatDateForCurrent(param.getName());  int newLinkedTargetsCount=0;  String newTargetsName=null;  String newTargetsCopyMode=BlockSnapshot.CopyMode.nocopy.name();  SnapshotSessionNewTargetsParam linkedTargetsParam=param.getNewLinkedTargets();  if (linkedTargetsParam != null) {    newLinkedTargetsCount=linkedTargetsParam.getCount().intValue();    newTargetsName=TimeUtils.formatDateForCurrent(linkedTargetsParam.getTargetName());    newTargetsCopyMode=linkedTargetsParam.getCopyMode();  }  BlockObject sourceObj=snapSessionSourceObjList.get(0);  Project project=BlockSnapshotSessionUtils.querySnapshotSessionSourceProject(sourceObj,_dbClient);  BlockSnapshotSessionApi snapSessionApiImpl=determinePlatformSpecificImplForSource(sourceObj);  snapSessionApiImpl.validateSnapshotSessionCreateRequest(sourceObj,snapSessionSourceObjList,project,snapSessionLabel,newLinkedTargetsCount,newTargetsName,newTargetsCopyMode,false,fcManager);  String taskId=UUID.randomUUID().toString();  boolean inApplication=false;  if (sourceObj instanceof Volume && ((Volume)sourceObj).getApplication(_dbClient) != null) {    inApplication=true;  } else   if (sourceObj instanceof BlockSnapshot) {    BlockSnapshot sourceSnap=(BlockSnapshot)sourceObj;    NamedURI namedUri=sourceSnap.getParent();    if (!NullColumnValueGetter.isNullNamedURI(namedUri)) {      Volume source=_dbClient.queryObject(Volume.class,namedUri.getURI());      if (source != null && source.getApplication(_dbClient) != null) {        inApplication=true;      }    }  }  List<Map<URI,BlockSnapshot>> snapSessionSnapshots=new ArrayList<>();  BlockSnapshotSession snapSession=snapSessionApiImpl.prepareSnapshotSession(snapSessionSourceObjList,snapSessionLabel,newLinkedTargetsCount,newTargetsName,snapSessionSnapshots,taskId,inApplication);  TaskList response=new TaskList();  Operation snapSessionOp=_dbClient.createTaskOpStatus(BlockSnapshotSession.class,snapSession.getId(),taskId,getCreateResourceOperationTypeEnum(snapSession));  snapSession.getOpStatus().put(taskId,snapSessionOp);  if (snapSession.hasConsistencyGroup()) {    addConsistencyGroupTasks(snapSessionSourceObjList,response,taskId,getCreateResourceOperationTypeEnum(snapSession));  } else {    response.getTaskList().add(toTask(snapSession,taskId,snapSessionOp));    for (    BlockObject sourceForTask : snapSessionSourceObjList) {      @SuppressWarnings("unchecked") Operation op=_dbClient.createTaskOpStatus(URIUtil.getModelClass(sourceForTask.getId()),sourceForTask.getId(),taskId,ResourceOperationTypeEnum.CREATE_SNAPSHOT_SESSION);      response.getTaskList().add(toTask(sourceForTask,taskId,op));    }  }  List<DataObject> preparedObjects=new ArrayList<>();  List<List<URI>> snapSessionSnapshotURIs=new ArrayList<>();  for (  Map<URI,BlockSnapshot> snapshotMap : snapSessionSnapshots) {    for (    Entry<URI,BlockSnapshot> entry : snapshotMap.entrySet()) {      entry.getValue().setCopyMode(newTargetsCopyMode);    }    preparedObjects.addAll(snapshotMap.values());    Set<URI> uris=snapshotMap.keySet();    snapSessionSnapshotURIs.add(Lists.newArrayList(uris));  }  _dbClient.updateObject(preparedObjects);  preparedObjects.add(snapSession);  try {    snapSessionApiImpl.createSnapshotSession(sourceObj,snapSession.getId(),snapSessionSnapshotURIs,newTargetsCopyMode,taskId);  } catch (  Exception e) {    String errorMsg=format("Failed to create snapshot sessions for source %s: %s",sourceObj.getId(),e.getMessage());    ServiceCoded sc=null;    if (e instanceof ServiceCoded) {      sc=(ServiceCoded)e;    } else {      sc=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    }    cleanupFailure(response.getTaskList(),preparedObjects,errorMsg,taskId,sc);    throw e;  }  auditOp(OperationTypeEnum.CREATE_SNAPSHOT_SESSION,true,AuditLogManager.AUDITOP_BEGIN,snapSessionLabel,sourceObj.getId().toString(),sourceObj.getStorageController().toString());  s_logger.info("FINISH create snapshot session for source {}",sourceObj.getId());  return response;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void verifyVPlexVolumeForDataMigration(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient _dbClient){  _log.info(String.format("Verifying that the VPlex volume[%s](%s) qualifies for Data Migration" + " moving from current vpool [%s](%s) to new vpool [%s](%s).",volume.getLabel(),volume.getId(),currentVpool.getLabel(),currentVpool.getId(),newVpool.getLabel(),newVpool.getId()));  boolean migrateSourceVolume=VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool);  boolean migrateHAVolume=false;  VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);  if (currentHaVpool != null) {    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);    migrateHAVolume=VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool);  }  verifyVPlexVolumeStructureForDataMigration(volume,currentVpool,migrateSourceVolume,migrateHAVolume,_dbClient);  if (migrateSourceVolume) {    Volume srcVolume=VPlexUtil.getVPLEXBackendVolume(volume,true,_dbClient,false);    if (srcVolume != null) {      List<BlockSnapshot> snapshots=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,BlockSnapshot.class,ContainmentConstraint.Factory.getVolumeSnapshotConstraint(srcVolume.getId()));      if (!snapshots.isEmpty()) {        throw APIException.badRequests.volumeForVpoolChangeHasSnaps(volume.getId().toString());      }      if (BlockSnapshotSessionUtils.volumeHasSnapshotSession(srcVolume,_dbClient)) {        throw APIException.badRequests.volumeForVpoolChangeHasSnaps(volume.getLabel());      }      if (BlockFullCopyUtils.volumeHasFullCopySession(srcVolume,_dbClient)) {        throw APIException.badRequests.volumeForVpoolChangeHasFullCopies(volume.getLabel());      }    }    StringSet mirrorURIs=volume.getMirrors();    if (mirrorURIs != null && !mirrorURIs.isEmpty()) {      List<VplexMirror> mirrors=_dbClient.queryObject(VplexMirror.class,StringSetUtil.stringSetToUriList(mirrorURIs));      if (mirrors != null && !mirrors.isEmpty()) {        throw APIException.badRequests.volumeForVpoolChangeHasMirrors(volume.getId().toString(),volume.getLabel());      }    }  }}  }
class C{  @Override public final int bulkInsert(@NonNull Uri uri,@NonNull ContentValues[] contValues){  SQLiteDatabase dbConnection=database.getWritableDatabase();  String table;  int insertCount=0;  try {    dbConnection.beginTransaction();    int matchUri=URI_MATCHER.match(uri);switch (matchUri) {case PRODUCT_DIR:case PRODUCT_ID:      table=ProductTable.TABLE_NAME;    dbConnection.delete(table,null,null);  break;default :throw new IllegalArgumentException("Unsupported URI: " + uri);}for (ContentValues contValue : contValues) {dbConnection.insert(table,null,contValue);insertCount++;}switch (matchUri) {case PRODUCT_DIR:case PRODUCT_ID:dbConnection.setTransactionSuccessful();getContext().getContentResolver().notifyChange(uri,null);break;default :throw new IllegalArgumentException("Unsupported URI: " + uri);}}  finally {dbConnection.endTransaction();}return insertCount;}  }
class C{  @Override public MatchResult match(String str){  String input=str.trim();  Matcher matcher=pattern.matcher(input);  if ((matcher.matches())) {    MatchResult result=new MatchResult(matcher.start(),matcher.end());    for (    String slot : slots.keySet()) {      String filledValue=matcher.group(slots.get(slot));      if (!StringUtils.checkForm(filledValue) && permutatePattern()) {        return match(str);      }      result.addPair(slot,filledValue);    }    return result;  }  return new MatchResult(false);}  }
class C{  public static Multimap<String,PathOperation> groupOperationsByTag(Set<PathOperation> allOperations,Comparator<String> tagOrdering,Comparator<PathOperation> operationOrdering){  MultimapBuilder.MultimapBuilderWithKeys<String> multimapBuilderWithKeys;  if (tagOrdering == null)   multimapBuilderWithKeys=MultimapBuilder.SortedSetMultimapBuilder.treeKeys(Ordering.<String>natural()); else   multimapBuilderWithKeys=MultimapBuilder.SortedSetMultimapBuilder.treeKeys(tagOrdering);  Multimap<String,PathOperation> operationsGroupedByTag;  if (operationOrdering == null)   operationsGroupedByTag=multimapBuilderWithKeys.hashSetValues().build(); else   operationsGroupedByTag=multimapBuilderWithKeys.treeSetValues(operationOrdering).build();  for (  PathOperation operation : allOperations) {    List<String> tags=operation.getOperation().getTags();    Validate.notEmpty(tags,"Can't GroupBy.TAGS > Operation '%s' has not tags",operation);    for (    String tag : tags) {      if (LOG.isInfoEnabled()) {        LOG.info("Added path operation '{}' to tag '{}'",operation,tag);      }      operationsGroupedByTag.put(tag,operation);    }  }  return operationsGroupedByTag;}  }
class C{  public MostUsedValues(GoogleBaseService service,FeedURLFactory urlFactory,String queryString){  this.service=service;  this.urlFactory=urlFactory;  this.queryString=queryString;  mostUsedValues=new Hashtable<String,String[]>();  timers=new ArrayList<Timer>();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @PostConstruct public void initApplication() throws IOException {  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION) && activeProfiles.contains(Constants.SPRING_PROFILE_FAST)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'prod' and 'fast' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, IOException {  DerValue der, subDer;  if (((encoding.getTag() & (byte)0x1F) != (byte)0x1C) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & (byte)0x1F) == (byte)0x00) {    userData=subDer.getData().getOctetString();  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  timestamp=KerberosTime.parse(der.getData(),(byte)0x01,true);  if ((der.getData().peekByte() & 0x1F) == 0x02) {    subDer=der.getData().getDerValue();    usec=new Integer(subDer.getData().getBigInteger().intValue());  } else {    usec=null;  }  if ((der.getData().peekByte() & 0x1F) == 0x03) {    subDer=der.getData().getDerValue();    seqNumber=new Integer(subDer.getData().getBigInteger().intValue());  } else {    seqNumber=null;  }  sAddress=HostAddress.parse(der.getData(),(byte)0x04,false);  if (der.getData().available() > 0) {    rAddress=HostAddress.parse(der.getData(),(byte)0x05,true);  }  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  private void describeNamespaceTx(final HttpServletRequest req,final Graph g,final String namespace,final boolean describeEachNamedGraph,final long tx) throws IOException {  final AbstractTripleStore tripleStore=getBigdataRDFContext().getTripleStore(namespace,tx);  if (tripleStore == null) {    return;  }  final BNode aDataSet=ValueFactoryImpl.getInstance().createBNode();  final String[] serviceURI=getServiceURIs(getServletContext(),req);  final VoID v=new VoID(g,tripleStore,serviceURI,aDataSet);  v.describeDataSet(false,describeEachNamedGraph);}  }
class C{  public String text(){  String previousText=null;  StringBuilder buffer=null;  for (  Object child : this) {    String text=null;    if (child instanceof String) {      text=(String)child;    } else     if (child instanceof Node) {      text=((Node)child).text();    }    if (text != null) {      if (previousText == null) {        previousText=text;      } else {        if (buffer == null) {          buffer=new StringBuilder();          buffer.append(previousText);        }        buffer.append(text);      }    }  }  if (buffer != null) {    return buffer.toString();  }  if (previousText != null) {    return previousText;  }  return "";}  }
class C{  public Iterator<String> iterator(){  return keySet().iterator();}  }
class C{  public void end(String namespace,String name) throws Exception {  Object top=digester.pop();  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[LifecycleRule]{" + digester.getMatch() + "} Pop "+ top.getClass());  }  if (!CLASS_NAME.equals(top.getClass().getName())) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }}  }
class C{  public StickyRectangleConnector(){}  }
class C{  public CEventListTable(final ITraceListProvider traceProvider){  super(new CEventListTableModel(traceProvider),new CEventListTableHelp());  m_traceProvider=Preconditions.checkNotNull(traceProvider,"IE01370: Trace list provider can't be null");  getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  final InputMap windowImap=getInputMap(JComponent.WHEN_FOCUSED);  windowImap.put(HotKeys.SEARCH_HK.getKeyStroke(),"SEARCH");  getActionMap().put("SEARCH",CActionProxy.proxy(new SearchAction()));  windowImap.put(HotKeys.DELETE_HK.getKeyStroke(),"DELETE");  getActionMap().put("DELETE",CActionProxy.proxy(new DeleteAction()));}  }
class C{  public static void schedule(Runnable r){  QUEUE.execute(r);}  }
class C{  public SimState(long seed){  this(seed,new MersenneTwisterFast(seed),new Schedule());}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  encode(out,PKIXExtensions.CRLNumber_Id,true);}  }
class C{  private SolrQueryResponse makeRequest(PingRequestHandler handler,SolrQueryRequest req) throws Exception {  SolrQueryResponse rsp=new SolrQueryResponse();  try {    handler.handleRequestBody(req,rsp);  }  finally {    req.close();  }  return rsp;}  }
class C{  public boolean teardown(){  mTeardownRequested.set(true);  mWifiManager.stopWifi();  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.REQUIRED_RUNTIME_LIBRARY_DEPENDENCY;}  }
class C{  public void load(Element element,Object o){  LayoutEditor p=(LayoutEditor)o;  String name=element.getAttribute("ident").getValue();  int type1=LayoutEditor.NONE;  int type2=LayoutEditor.NONE;  try {    type1=element.getAttribute("type1").getIntValue();    type2=element.getAttribute("type2").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert tracksegment attribute");  }  boolean dash=true;  if (element.getAttribute("dashed").getValue().equals("no")) {    dash=false;  }  boolean main=true;  if (element.getAttribute("mainline").getValue().equals("no")) {    main=false;  }  boolean hide=true;  if (element.getAttribute("hidden").getValue().equals("no")) {    hide=false;  }  String con1Name=element.getAttribute("connect1name").getValue();  String con2Name=element.getAttribute("connect2name").getValue();  TrackSegment l=new TrackSegment(name,con1Name,type1,con2Name,type2,dash,main,hide,p);  try {    if (element.getAttribute("arc").getValue().equals("yes")) {      l.setArc(true);    }  } catch (  NullPointerException e) {  }  if (l.getArc()) {    try {      if (element.getAttribute("flip").getValue().equals("yes")) {        l.setFlip(true);      }    } catch (    NullPointerException e) {    }    try {      if (element.getAttribute("circle").getValue().equals("yes")) {        l.setCircle(true);      }    } catch (    NullPointerException e) {    }    if (l.getCircle()) {      try {        l.setAngle(element.getAttribute("angle").getDoubleValue());      } catch (      org.jdom2.DataConversionException e) {        log.error("failed to convert tracksegment attribute");      }catch (      NullPointerException e) {      }    }    try {      if (element.getAttribute("hideConLines").getValue().equals("yes")) {        l.hideConstructionLines(TrackSegment.HIDECON);      }    } catch (    NullPointerException e) {    }  }  Attribute a=element.getAttribute("blockname");  if (a != null) {    l.tBlockName=a.getValue();  }  p.trackList.add(l);}  }
class C{  public Node selectSingleNode(Node contextNode,String str) throws TransformerException {  return selectSingleNode(contextNode,str,contextNode);}  }
class C{  private XMLParseException unknownEntity(String name){  String msg="Unknown or invalid entity: &" + name + ";";  return new XMLParseException(this.getName(),this.parserLineNr,msg);}  }
class C{  @Override public String toString(){  return "" + b;}  }
class C{  public static double calculateRowTotal(Values2D data,int row){  ParamChecks.nullNotPermitted(data,"data");  double total=0.0;  int columnCount=data.getColumnCount();  for (int c=0; c < columnCount; c++) {    Number n=data.getValue(row,c);    if (n != null) {      total+=n.doubleValue();    }  }  return total;}  }
class C{  SoapMessage wrapToSoapMessage(Object request,SecurityHeaderType secHeader) throws ParserException {  Node body=marshallJaxbElement(request).getDocumentElement();  Node header=marshallJaxbElement(secHeader).getDocumentElement();  SoapMessage message=new SoapMessage(body,header,soapAction);  return message;}  }
class C{  public void testNearDoubleDestroy() throws Exception {  nearDestroy();  nearDestroy();}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public Location(Location loc,long offset){  this.data=loc.getData();  this.offset=offset + loc.getOffset();}  }
class C{  protected int defaultNumNumeric(){  return 0;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new AdempiereComboBoxUI();}  }
class C{  public static void circumventBug2650(Document doc){  Element documentElement=doc.getDocumentElement();  Attr xmlnsAttr=documentElement.getAttributeNodeNS(Constants.NamespaceSpecNS,"xmlns");  if (xmlnsAttr == null) {    documentElement.setAttributeNS(Constants.NamespaceSpecNS,"xmlns","");  }  XMLUtils.circumventBug2650internal(doc);}  }
class C{  public void cancel(){  if (executor != null) {    executor.cancel();  }}  }
class C{  public static long increment(long tstamp,long microseconds){  long newmicros=tstamp & ((long)UMASK);  if ((newmicros + microseconds) > MAX_MICROS)   return (-1L);  return (tstamp + microseconds);}  }
class C{  public KillsQuestSlotNeedUpdateCondition(String quest,int index,Map<String,List<String>> allcreatures,boolean do_update){  this.questSlot=checkNotNull(quest);  this.questGroupIndex=index;  this.questIndex=index + 1;  this.allcreatures=allcreatures;  this.do_update=do_update;  this.creatures=null;}  }
class C{  @Override public long position(Blob blobPattern,long start) throws SQLException {  if (isDebugEnabled()) {    debugCode("position(blobPattern, " + start + ");");  }  if (Constants.BLOB_SEARCH) {    try {      checkClosed();      if (blobPattern == null) {        return -1;      }      ByteArrayOutputStream out=new ByteArrayOutputStream();      InputStream in=blobPattern.getBinaryStream();      while (true) {        int x=in.read();        if (x < 0) {          break;        }        out.write(x);      }      return position(out.toByteArray(),start);    } catch (    Exception e) {      throw logAndConvert(e);    }  }  throw unsupported("LOB subset");}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public void selfSub(UpperTriangularMatrix u){  if ((rows != u.rows) || (columns != u.columns)) {    throw new IllegalArgumentException("cannot substract a " + u.rows + 'x'+ u.columns+ " matrix from a "+ rows+ 'x'+ columns+ " matrix");  }  for (int i=0; i < rows; ++i) {    for (int index=i * (columns + 1); index < (i + 1) * columns; ++index) {      data[index]-=u.data[index];    }  }}  }
class C{  private javax.naming.Binding mapBinding(org.omg.CosNaming.Binding bndg) throws NamingException {  java.lang.Object obj=_ctx.callResolve(bndg.binding_name);  Name cname=CNNameParser.cosNameToName(bndg.binding_name);  try {    obj=NamingManager.getObjectInstance(obj,cname,_ctx,_env);  } catch (  NamingException e) {    throw e;  }catch (  Exception e) {    NamingException ne=new NamingException("problem generating object using object factory");    ne.setRootCause(e);    throw ne;  }  String cnameStr=cname.toString();  javax.naming.Binding jbndg=new javax.naming.Binding(cnameStr,obj);  NameComponent[] comps=_ctx.makeFullName(bndg.binding_name);  String fullName=CNNameParser.cosNameToInsString(comps);  jbndg.setNameInNamespace(fullName);  return jbndg;}  }
class C{  public double distanceSq(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int GetCollisionResponseRows(){  return 2;}  }
class C{  private static void registerMbeansFromPropsFile(MBeanServer mBeanServer) throws Exception {  JamonPropertiesLoader loader=new JamonPropertiesLoader();  List<String> jamonJmxBeanProperties=loader.getMxBeans();  Iterator<String> iter=jamonJmxBeanProperties.iterator();  while (iter.hasNext()) {    String beanInfo=iter.next();    MonitorMXBean mXbean=MonitorMXBeanFactory.create(beanInfo);    mBeanServer.registerMBean(mXbean,MonitorMXBeanFactory.getObjectName(mXbean));    MonitorMXBean mXbeanDelta=MonitorMXBeanFactory.createDelta(beanInfo);    mBeanServer.registerMBean(mXbeanDelta,MonitorMXBeanFactory.getDeltaObjectName(mXbeanDelta));  }}  }
class C{  public static void e(String msg){  if (DEBUG)   android.util.Log.e(TAG,buildMessage(msg));}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  @Override protected int mainExec(final OutputStream out,final PrintStream err) throws IOException {  final File preReadDir=(File)mFlags.getValue(INPUT);  final String basename=mFlags.getValue(OUTPUT_FILE).toString();  final boolean isPaired=ReaderUtils.isPairedEndDirectory(preReadDir);  try {    if (isPaired) {      final LongRange calculatedRegion=doPrereadToQuala(ReaderUtils.getLeftEnd(preReadDir),basename + "_1",null);      doPrereadToQuala(ReaderUtils.getRightEnd(preReadDir),basename + "_2",calculatedRegion);    } else {      doPrereadToQuala(preReadDir,basename,null);    }  } catch (  InvalidParamsException e) {    e.printErrorNoLog();    return 1;  }  return 0;}  }
class C{  @Override protected void notifyEvaluation(Chromosome chromosome){  for (  SearchListener listener : listeners) {    if (listener instanceof ProgressMonitor)     continue;    listener.fitnessEvaluation(chromosome);  }}  }
class C{  static void addMET(){  if (targetZones != null) {    targetZones.add("MET");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.233 -0500",hash_original_method="DCC234DC4AA32AD53B9F45C5CD92E5AA",hash_generated_method="E6AC43C33B37640BFAB5E9FD0FD9D86B") public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,subject,key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  void createEntry(int hash,K key,V value,int bucketIndex){  ParameterizedHashMap.Entry<K,V> old=table[bucketIndex];  Entry<K,V> e=new Entry<>(hash,key,value,old,keyEquality);  table[bucketIndex]=e;  e.addBefore(header);  size++;}  }
class C{  public CMemoryPanel(final JFrame parent,final CDebugPerspectiveModel debugger){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01399: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01400: Debugger argument can not be null");  m_hexView=new CMemoryViewer(parent,debugger);  m_searchAction=CActionProxy.proxy(new CSearchAction(parent,debugger,m_hexView));  m_gotoAction=CActionProxy.proxy(new CGotoAction(parent,m_hexView,debugger));  add(m_hexView);  add(m_offsetLabel,BorderLayout.SOUTH);  updateOffsetLabel();  m_hexView.getHexView().addHexListener(m_hexPanelListener);  initHotkeys();}  }
class C{  private void onHangUp(){  if (null != mMxCall) {    mMxCall.hangup("");  }}  }
class C{  public boolean computeLocalStackTypes(NormalMethod method,int bcpoint){  if (VM.TraceOnStackReplacement) {    VM.sysWrite("computing local and stack types of " + method + "\n");  }  int localsize=method.getLocalWords();  ltypes=new byte[localsize];  if (VM.TraceOnStackReplacement) {    VM.sysWrite("local size : ");    VM.sysWrite(localsize);    VM.sysWrite("\n");  }  retaddr=new int[localsize];  for (int i=0; i < localsize; i++) {    retaddr[i]=-1;  }  addr=-1;  int stacksize=method.getOperandWords();  stypes=new byte[stacksize];  this.bytecodes=method.getBytecodes();  visitedpc=new byte[bytecodes.length()];  for (int i=0, n=ltypes.length; i < n; i++) {    ltypes[i]=VoidTypeCode;  }  TypeStack simstacks=new TypeStack(stacksize,VoidTypeCode);{    TypeReference[] ptypes=method.getParameterTypes();    int lidx=0;    if (!method.isStatic()) {      ltypes[lidx++]=ClassTypeCode;    }    for (int i=0, n=ptypes.length; i < n; i++) {      byte tcode=ptypes[i].getName().parseForTypeCode();      ltypes[lidx++]=tcode;      if ((tcode == LongTypeCode) || (tcode == DoubleTypeCode)) {        ltypes[lidx++]=VoidTypeCode;      }    }  }  boolean found=scanBlocks(method,bytecodes,true,bcpoint,ltypes,stypes,0,simstacks,null);  if (!found) {    ExceptionHandlerMap ehmap=method.getExceptionHandlerMap();    if (ehmap != null) {      int[] handlerPCs=ehmap.getHandlerPC();      for (int i=0, n=handlerPCs.length; i < n; i++) {        simstacks.clear();        simstacks.push(ClassTypeCode);        int startpc=handlerPCs[i];        found=scanBlocks(method,bytecodes,true,bcpoint,ltypes,stypes,startpc,simstacks,null);        if (found) {          break;        }      }    }  }  visitedpc=null;  return true;}  }
class C{  protected void removeProgressBar(final JProgressBar pbar){  super.remove(pbar);  super.revalidate();}  }
class C{  private Bitmap createPhotoThumbnail(final String aImageUrl){  Bitmap bitmapRetValue=null;  if (null != aImageUrl) {    Uri imageUri=Uri.fromFile(new File(aImageUrl));    int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,imageUri);    try {      final String filename=imageUri.getPath();      FileInputStream imageStream=new FileInputStream(new File(filename));      bitmapRetValue=createPhotoThumbnail(imageStream,rotationAngle);      imageStream.close();      System.gc();    } catch (    OutOfMemoryError e) {      Log.e(LOG_TAG,"## createPhotoThumbnail : out of memory");    }catch (    Exception e) {      Log.e(LOG_TAG,"## createPhotoThumbnail() Exception Msg=" + e.getMessage());    }  }  return bitmapRetValue;}  }
class C{  public TopNSearcher(FST<T> fst,int topN,int maxQueueDepth,Comparator<T> comparator){  this(fst,topN,maxQueueDepth,comparator,new TieBreakByInputComparator<>(comparator));}  }
class C{  public Matrix4x3f lerp(Matrix4x3fc other,float t){  return lerp(other,t,this);}  }
class C{  SourceTarget(final WorkspaceComponent source,final WorkspaceComponent target){  if (source == null) {    throw new IllegalArgumentException("source cannot be null");  }  if (target == null) {    throw new IllegalArgumentException("target cannot be null");  }  this.source=source;  this.target=target;}  }
class C{  public boolean isOnlinePartition(String partition){  return partitionMap != null && partitionMap.containsKey(partition);}  }
class C{  protected void trace(int x){  trace("" + x);}  }
class C{  public synchronized Throwable initCause(Throwable cause){  myCause=cause;  return this;}  }
class C{  static MPrintColor create(Color color,String name){  MPrintColor pc=new MPrintColor(Env.getCtx(),0,null);  pc.setName(name);  pc.setColor(color);  pc.saveEx();  return pc;}  }
class C{  public static boolean isParent(ASTNode node,ASTNode parent){  Assert.isNotNull(parent);  do {    node=node.getParent();    if (node == parent)     return true;  } while (node != null);  return false;}  }
class C{  public static void checkExtendedUsage(final CFlags flags,final String... contains){  Assert.assertNotNull(flags);  final String usage=flags.getExtendedUsageString(Flag.Level.EXTENDED).replaceAll("\\s+"," ");  Assert.assertNotNull(usage);  if (contains != null) {    TestUtils.containsAll(usage,contains);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public Pattern crawlerNoDepthLimitMatchPattern(){  if (this.crawlernodepthlimitmatch == null) {    final String r=get(CrawlAttribute.CRAWLER_URL_NODEPTHLIMITMATCH.key);    try {      this.crawlernodepthlimitmatch=(r == null || r.equals(CrawlProfile.MATCH_NEVER_STRING)) ? CrawlProfile.MATCH_NEVER_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.crawlernodepthlimitmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.crawlernodepthlimitmatch;}  }
class C{  public void showLoading(int textRes){  if (viewLoading == null) {    throw new NullPointerException("Unable to access Loading View, check if the loading view was initialized");  } else {    viewLoadingMessage.setText(textRes);    showLoading();  }}  }
class C{  public boolean isInitialized(){  return null != environment;}  }
class C{  private void cleanComponents(Component component){  if (component instanceof Container) {    if (component instanceof JPanel) {      ((JPanel)component).setBorder(null);    } else     if (component instanceof JLabel) {      component.setForeground(style.getForeground());    }    for (    Component child : ((Container)component).getComponents()) {      cleanComponents(child);    }  }}  }
class C{  public boolean isRouteToDestValid(Block protecting,Block destination){  if (protecting == destination) {    log.debug("protecting and destination blocks are the same therefore we need to check if we have a valid neighbour");    if (getAdjacency(protecting) != null) {      return true;    }  } else   if (getValidRoute(protecting,destination) != null) {    return true;  }  return false;}  }
class C{  @Override public boolean receive(CarbonMessage carbonMessage,CarbonCallback carbonCallback){  MicroservicesRegistryImpl currentMicroservicesRegistry=DataHolder.getInstance().getMicroservicesRegistries().get(carbonMessage.getProperty(MSF4JConstants.CHANNEL_ID));  Request request=new Request(carbonMessage);  request.setSessionManager(currentMicroservicesRegistry.getSessionManager());  Response response=new Response(carbonCallback,request);  try {    dispatchMethod(currentMicroservicesRegistry,request,response);  } catch (  HandlerException e) {    handleHandlerException(e,carbonCallback);  }catch (  InvocationTargetException e) {    Throwable targetException=e.getTargetException();    if (targetException instanceof HandlerException) {      handleHandlerException((HandlerException)targetException,carbonCallback);    } else {      handleThrowable(currentMicroservicesRegistry,targetException,carbonCallback,request);    }  }catch (  InterceptorException e) {    log.warn("Interceptors threw an exception",e);    carbonCallback.done(HttpUtil.createTextResponse(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),HttpUtil.EMPTY_BODY));  }catch (  Throwable t) {    handleThrowable(currentMicroservicesRegistry,t,carbonCallback,request);  } finally {    carbonMessage.release();  }  return true;}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  UpdateProgressBar(final int max,final String urlBase,final String fromVersion,final String toVersion){  super("Downloading...",MouseInfo.getPointerInfo().getDevice().getDefaultConfiguration());  setLocationByPlatform(true);  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);  addWindowListener(new UpdateProgressBarWindowListener());  this.max=max;  this.urlBase=urlBase;  this.fromVersion=fromVersion;  this.toVersion=toVersion;  try {    final URL url=this.getClass().getClassLoader().getResource(ClientGameConfiguration.get("GAME_ICON"));    setIconImage(new ImageIcon(url).getImage());  } catch (  final RuntimeException e) {  }  initializeComponents();  this.pack();}  }
class C{  public Field fieldOrNull(final Class<?> cls,final String name,final Class<?> definedIn){  final Map<?,Field> fields=buildMap(cls,definedIn != null);  final Field field=fields.get(definedIn != null ? (Object)new FieldKey(name,definedIn,-1) : (Object)name);  return field;}  }
class C{  public static Matrix[] load(String filename,int sizeofInputs,int sizeofOutputs){  ArrayList<double[]> inputsList=new ArrayList<>();  ArrayList<double[]> outputsList=new ArrayList<>();  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(filename));  } catch (  FileNotFoundException e) {    System.out.println("error: file " + filename + " not found.");    e.printStackTrace();  }  boolean eof;  int datasize=0;  do {    eof=true;    String readLine=null;    try {      readLine=br.readLine();    } catch (    IOException e) {      System.out.println("error: reading from " + filename + ".");      e.printStackTrace();    }    if (readLine != null && !readLine.equals("")) {      eof=false;      try {        double[] in=new double[sizeofInputs];        double[] out=new double[sizeofOutputs];        StringTokenizer st=new StringTokenizer(readLine,", ");        int index=0;        int currentVariable=0;        for (int i=0; i < sizeofInputs; i++) {          in[index]=Double.parseDouble(st.nextToken());          index++;          currentVariable++;        }        index=0;        for (int i=0; i < sizeofOutputs; i++) {          out[index]=Double.parseDouble(st.nextToken());          index++;          currentVariable++;        }        inputsList.add(in);        outputsList.add(out);      } catch (      Exception e) {        System.out.println(e + "\nerror: this line in the logfile does not agree with the configuration provided... it will be skipped");        datasize--;      }    }    datasize++;  } while (!eof);  double[][] inmat=new double[inputsList.size()][sizeofInputs];  double[][] outmat=new double[inputsList.size()][sizeofOutputs];  inputsList.toArray(inmat);  outputsList.toArray(outmat);  return new Matrix[]{new Matrix(inmat),new Matrix(outmat)};}  }
class C{  public sun.net.ftp.FtpClient allocate(long size) throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("ALLO " + size);  return this;}  }
class C{  protected void handleOrDeferSuspect(SuspectMember suspectInfo){  latestViewWriteLock.lock();  try {synchronized (startupLock) {      if (!processingEvents) {        return;      }    }    InternalDistributedMember suspect=suspectInfo.suspectedMember;    InternalDistributedMember who=suspectInfo.whoSuspected;    this.suspectedMembers.put(suspect,Long.valueOf(System.currentTimeMillis()));    try {      listener.memberSuspect(suspect,who,suspectInfo.reason);    } catch (    DistributedSystemDisconnectedException se) {    }  }  finally {    latestViewWriteLock.unlock();  }}  }
class C{  protected EventImpl(){  super();}  }
class C{  private Leb128Utils(){}  }
class C{  private int incrementAndGetDrawPass(){  mDrawPass++;  if (mDrawPass >= DEFAULT_NUMBER_RANDOM_VALUES) {    mDrawPass=0;  }  return mDrawPass;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.592 -0500",hash_original_method="DA242C23FF99C9B0BDF7227FEE464070",hash_generated_method="3CBB7DDB76DB05FA8A66E3DEA0C7FF6C") public AuthScope(final String host,int port,final String realm,final String scheme){  this.host=(host == null) ? ANY_HOST : host.toLowerCase(Locale.ENGLISH);  this.port=(port < 0) ? ANY_PORT : port;  this.realm=(realm == null) ? ANY_REALM : realm;  this.scheme=(scheme == null) ? ANY_SCHEME : scheme.toUpperCase(Locale.ENGLISH);}  }
class C{  private void checkAccelerometerSupport(){  final SensorManager manager=(SensorManager)getSystemService(SENSOR_SERVICE);  final Sensor accel=manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  if (accel != null) {    return;  }  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_when_to_speak_key);  final ListPreference prefShake=(ListPreference)findPreferenceByResId(R.string.pref_shake_to_read_threshold_key);  if (prefShake != null) {    category.removePreference(prefShake);  }}  }
class C{  private void collectClassesFromSubClasses(Collection<ImmutableClassType> results,ImmutableClassType classType){  for (  ImmutableClassType subClassType : classType.getImmutableSubClasses()) {    if (subClassType.isInitialized()) {      results.add(subClassType);    }    collectClassesFromSubClasses(results,subClassType);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void startNewStream(Reader reader){  this.startNewStream(reader,false);}  }
class C{  private void fireAgentArrived(String n){synchronized (baseListeners) {    Iterator i=baseListeners.iterator();    while (i.hasNext())     ((IBaseListener)i.next()).agentArrived(n);  }}  }
class C{  public static ZoneLayer<Id<Zone>> createGridLayerByGridSizeByNetwork(double gridSize,double[] boundingBox){  int skippedPoints=0;  int setPoints=0;  GeometryFactory factory=new GeometryFactory();  Set<Zone<Id<Zone>>> zones=new HashSet<>();  double xmin=boundingBox[0];  double ymin=boundingBox[1];  double xmax=boundingBox[2];  double ymax=boundingBox[3];  ProgressBar bar=new ProgressBar((xmax - xmin) / gridSize);  for (double x=xmin; x < xmax; x+=gridSize) {    bar.update();    for (double y=ymin; y < ymax; y+=gridSize) {      double center_X=x + (gridSize / 2);      double center_Y=y + (gridSize / 2);      if (center_X <= xmax && center_X >= xmin && center_Y <= ymax && center_Y >= ymin) {        Point point=factory.createPoint(new Coordinate(x,y));        Coordinate[] coords=new Coordinate[5];        coords[0]=point.getCoordinate();        coords[1]=new Coordinate(x,y + gridSize);        coords[2]=new Coordinate(x + gridSize,y + gridSize);        coords[3]=new Coordinate(x + gridSize,y);        coords[4]=point.getCoordinate();        LinearRing linearRing=factory.createLinearRing(coords);        Polygon polygon=factory.createPolygon(linearRing,null);        Zone<Id<Zone>> zone=new Zone<Id<Zone>>(polygon);        zone.setAttribute(Id.create(setPoints,Zone.class));        zones.add(zone);        setPoints++;      } else       skippedPoints++;    }  }  ZoneLayer<Id<Zone>> layer=new ZoneLayer<>(zones);  return layer;}  }
class C{  public void addFieldNameTranslation(String sourceFieldName,String aggregateFieldName){  addFieldTranslation(new DatabaseField(sourceFieldName),aggregateFieldName);}  }
class C{  public void writeDataToFile(String filerPath) throws Exception {  if (!filerPath.endsWith(".ics"))   filerPath=filerPath + ".ics";  FileOutputStream fout=new FileOutputStream(filerPath);  CalendarOutputter outputter=new CalendarOutputter();  outputter.output(icsCalendar,fout);}  }
class C{  public CertRequestInfo toDTO(){  return new CertRequestInfo(id,memberId,subjectName);}  }
class C{  public static EditorType fromKey(final String key){  if (key == null || key.isEmpty()) {    return null;  }  final EditorType search=instances.get(key);  if (search != null) {    return search;  } else {    Log.debug(EditorType.class,"Creating new EditorType instance, key=" + key);    final EditorType result=new EditorType(key);    instances.put(key,result);    return result;  }}  }
class C{  private boolean openConnection(final FTPClient ftpClient,final DigestURL entryUrl){  final String userInfo=entryUrl.getUserInfo();  String userName=FTPClient.ANONYMOUS, userPwd="anomic";  if (userInfo != null) {    final int pos=userInfo.indexOf(':',0);    if (pos != -1) {      userName=userInfo.substring(0,pos);      userPwd=userInfo.substring(pos + 1);    }  }  final String host=entryUrl.getHost();  final int port=entryUrl.getPort();  if (port == -1) {    ftpClient.exec("open " + host,false);  } else {    ftpClient.exec("open " + host + " "+ port,false);  }  if (ftpClient.notConnected()) {    return false;  }  ftpClient.exec("user " + userName + " "+ userPwd,false);  if (ftpClient.isLoggedIn()) {    ftpClient.exec("binary",false);  } else {    return false;  }  return true;}  }
class C{  public int asIntConst(Value value){  assert isJavaConstant(value) && asJavaConstant(value).getJavaKind().isNumericInteger();  JavaConstant constant=asJavaConstant(value);  long c=constant.asLong();  if (!NumUtil.isInt(c)) {    throw GraalError.shouldNotReachHere();  }  return (int)c;}  }
class C{  private void updatePlayingAlbum(String albumRef){  View view=mAlbumToViewMap.get(albumRef);  ImageView ivPlayAlbum;  if (mPreviousAlbumGroup != null) {    ivPlayAlbum=(ImageView)mPreviousAlbumGroup.findViewById(R.id.ivPlayAlbum);    PlayPauseDrawable drawable=(PlayPauseDrawable)ivPlayAlbum.getDrawable();    drawable.setShape(PlayPauseDrawable.SHAPE_PLAY);  }  if (view != null) {    ivPlayAlbum=(ImageView)view.findViewById(R.id.ivPlayAlbum);    PlayPauseDrawable drawable=(PlayPauseDrawable)ivPlayAlbum.getDrawable();    drawable.setShape(PlayPauseDrawable.SHAPE_STOP);  }  mPreviousAlbumGroup=view;}  }
class C{  @SuppressWarnings("rawtypes") private void modifyGroupMirrors(StorageSystem storageSystem,List<URI> mirrorList,int operation,int copyState) throws Exception {  callEMCRefreshIfRequired(_dbClient,_helper,storageSystem,mirrorList);  List<BlockMirror> mirrors=_dbClient.queryObject(BlockMirror.class,mirrorList);  List<CIMObjectPath> syncPaths=new ArrayList<CIMObjectPath>();  for (  BlockMirror mirror : mirrors) {    Volume source=_dbClient.queryObject(Volume.class,mirror.getSource());    CIMObjectPath syncObject=_cimPath.getStorageSynchronized(storageSystem,source,storageSystem,mirror);    CIMInstance instance=_helper.checkExists(storageSystem,syncObject,false,false);    if (instance != null) {      syncPaths.add(syncObject);    } else {      _log.error("Storage synchronized instance is not available for mirror {}",mirror.getLabel());      throw DeviceControllerException.exceptions.synchronizationInstanceNull(mirror.getLabel());    }  }  CIMArgument[] modifyCGMirrorInput=_helper.getModifyListReplicaInputArguments(syncPaths.toArray(new CIMObjectPath[]{}),operation,copyState);  _helper.callModifyListReplica(storageSystem,modifyCGMirrorInput);}  }
class C{  public SimpleProperty(T value){  this.value=value;}  }
class C{  public ObjectStack(int blocksize){  super(blocksize);}  }
class C{  private FastMathLiteralArrays(){}  }
class C{  public void filter_apps(@NonNull List<InstalledApp> to_keep){  ListIterator<InstalledApp> it=_installed_apps.listIterator(_installed_apps.size());  while (it.hasPrevious()) {    InstalledApp current=it.previous();    if (to_keep.contains(current)) {      continue;    }    notifyItemRemoved(_installed_apps.indexOf(current));    it.remove();  }}  }
class C{  public void adjustToFit(){  isAdjusted=false;  viewChanged(MapViewEvent.Type.ADJUST);}  }
class C{  private void FDupdateViolated(){  violatedTuples v=FDUtility.returnViolatedTuples(i,FDs);  violated=v.instances;  violatedTuplesMap=v.tupleID;}  }
class C{  @Override public void updateRow() throws SQLException {  try {    debugCodeCall("updateRow");    checkUpdatable();    if (insertRow != null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    checkOnValidRow();    if (updateRow != null) {      UpdatableRow row=getUpdatableRow();      Value[] current=new Value[columnCount];      for (int i=0; i < updateRow.length; i++) {        current[i]=get(i + 1);      }      row.updateRow(current,updateRow);      for (int i=0; i < updateRow.length; i++) {        if (updateRow[i] == null) {          updateRow[i]=current[i];        }      }      Value[] patch=row.readRow(updateRow);      patchCurrentRow(patch);      updateRow=null;    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public BiolinguaDigraph(String gName,int n){  super(gName,n);}  }
class C{  public static void generateFieldValueSet(JClassType voClass,JField field,String parentVariable,String valueVariable,SourcePrinter sourceWriter,boolean allowProtected){  if (field.isPublic() || (allowProtected && field.isProtected())) {    sourceWriter.println(parentVariable + "." + field.getName()+ "="+ valueVariable+ ";");  } else {    String setterMethodName="set" + Character.toUpperCase(field.getName().charAt(0)) + field.getName().substring(1);    try {      if (voClass.getMethod(setterMethodName,new JType[]{field.getType()}) != null) {        sourceWriter.println(parentVariable + "." + setterMethodName+ "("+ valueVariable+ ");");      }    } catch (    Exception e) {      throw new CruxGeneratorException("Property [" + field.getName() + "] could not be created. This is not visible neither has a getter/setter method.");    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public boolean isReceiverSource(){  return receiverSource;}  }
class C{  BTDownloadModel(){  super(BTDownloadDataLine.class);  _hashDownloads=new HashSet<>();}  }
class C{  public void dismissNotification(Object o){  impl.dismissNotification(o);}  }
class C{  public static String createCnonce(){  final SecureRandom rnd=new SecureRandom();  final byte[] tmp=new byte[8];  rnd.nextBytes(tmp);  return encode(tmp);}  }
class C{  public NodeSet(int blocksize){  m_blocksize=blocksize;  m_mapSize=0;}  }
class C{  public void removeFromMovieSet(){  if (movieSet != null) {    movieSet.removeMovie(this);  }  setMovieSet(null);}  }
class C{  public InvitationObject(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public Long zcard(final byte[] key){  checkIsInMultiOrPipeline();  client.zcard(key);  return client.getIntegerReply();}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public OMPoly(double latPoint,double lonPoint,int[] xypoints,int cMode){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setLocation(latPoint,lonPoint,OMGraphic.DECIMAL_DEGREES,xypoints);  coordMode=cMode;}  }
class C{  public void add(ChronixTransformation transformation){  if (transformationSize < transformations.length) {    transformations[transformationSize]=transformation;    transformationSize++;  } else {    throw new IndexOutOfBoundsException("Try to put transformation to map with max size " + transformations.length + " but index "+ transformationSize+ " is out of range.");  }}  }
class C{  private static <T>T fromJson(String json,Class<T> clazz) throws JsonParseException {  try {    return new ObjectMapper().readValue(json,clazz);  } catch (  IOException e) {    throw new JsonParseException(e);  }}  }
class C{  public NonLocalRegionEntry(LocalRegion br,Object key,Object value){  this.key=key;  this.value=value;  Assert.assertTrue(this.value != Token.NOT_AVAILABLE,"getEntry did not fault value in from disk");}  }
class C{  public static final CassandraTaskExecutor parse(final Protos.ExecutorInfo info){  return new CassandraTaskExecutor(info);}  }
class C{  public PlanRouter(final TripRouter routingHandler){  this(routingHandler,null);}  }
class C{  public StoragePolicyRuleTypeEntity createStoragePolicyRuleTypeEntity(String code,String description){  StoragePolicyRuleTypeEntity storagePolicyRuleTypeEntity=new StoragePolicyRuleTypeEntity();  storagePolicyRuleTypeEntity.setCode(code);  storagePolicyRuleTypeEntity.setDescription(description);  return storagePolicyRuleTypeDao.saveAndRefresh(storagePolicyRuleTypeEntity);}  }
class C{  @Override protected int capacity(){  return _values.length;}  }
class C{  protected boolean isSectorSupported(Sector sector){  return sector.isWithinLatLonLimits();}  }
class C{  public static byte[] loadBinaryFileAsBytes(final String file) throws IOException {  final FileInputStream inputStream=new FileInputStream(file);  final byte[] data=new byte[inputStream.available()];  inputStream.read(data);  inputStream.close();  return data;}  }
class C{  public boolean delete() throws IOException {  if (mIsUnderEdit) {    throw new IOException("Try to delete an cache entry that has been being editing.");  }  FileUtils.deleteIfExists(getCacheFile());  FileUtils.deleteIfExists(getTempFile());  return true;}  }
class C{  static public void writeAttribute(Writer out,boolean escapeUnicode,boolean escapeIsocode,char[] buff,String text,char[] textBuff,boolean isScriptInAttributeValueEnabled) throws IOException {  int length=text.length();  if (length >= 16) {    if (length > textBuff.length) {      textBuff=new char[length * 2];    }    text.getChars(0,length,textBuff,0);    writeAttribute(out,escapeUnicode,escapeIsocode,buff,textBuff,0,length,isScriptInAttributeValueEnabled);  } else {    int buffLength=buff.length;    int buffIndex=0;    for (int i=0; i < length; i++) {      char ch=text.charAt(i);      if (ch <= 0x1f) {        if (!isPrintableControlChar(ch)) {          continue;        }      }      if (ch < 0xA0) {        if (ch >= 0x3f) {          if (ch == 's') {            if (!isScriptInAttributeValueEnabled && ((i + 6) < text.length())) {              if ('c' == text.charAt(i + 1) && 'r' == text.charAt(i + 2) && 'i' == text.charAt(i + 3) && 'p' == text.charAt(i + 4) && 't' == text.charAt(i + 5) && ':' == text.charAt(i + 6)) {                return;              }            }          }          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        } else         if (ch >= 0x27) {          if (ch < 0x3c) {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);          } else           if (ch == '<') {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,LT_CHARS);          } else           if (ch == '>') {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,GT_CHARS);          } else {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);          }        } else {          if (ch == '&') {            if ((i + 1 < length) && (text.charAt(i + 1) == '{')) {              buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);            } else {              buffIndex=addToBuffer(out,buff,buffIndex,buffLength,AMP_CHARS);            }          } else           if (ch == '"') {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,QUOT_CHARS);          } else {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);          }        }      } else       if (ch <= 0xff) {        if (escapeIsocode) {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,sISO8859_1_Entities[ch - 0xA0]);        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      } else {        if (escapeUnicode) {          buffIndex=_writeDecRef(out,buff,buffIndex,buffLength,ch);        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      }    }    flushBuffer(out,buff,buffIndex);  }}  }
class C{  @Override public void characters(char ch[],int start,int length){  content.append(new String(ch,start,length));}  }
class C{  int addOrUpdateNetwork(WifiConfiguration config){  NetworkUpdateResult result=addOrUpdateNetworkNative(config);  if (result.getNetworkId() != WifiConfiguration.INVALID_NETWORK_ID) {    sendConfiguredNetworksChangedBroadcast(mConfiguredNetworks.get(result.getNetworkId()),result.isNewNetwork ? WifiManager.CHANGE_REASON_ADDED : WifiManager.CHANGE_REASON_CONFIG_CHANGE);  }  return result.getNetworkId();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static double cosQuick(double angle){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.cos(angle) : Math.cos(angle);  }  return cosTab[((int)(Math.abs(angle) * SIN_COS_INDEXER + 0.5)) & (SIN_COS_TABS_SIZE - 2)];}  }
class C{  public static boolean processDefinedGlobsNames(Project project,Processor<String> processor){  return PerlStubIndex.getInstance().processAllKeys(PerlGlobsStubIndex.KEY,project,processor);}  }
class C{  public MethodHandle findStaticSetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_putStatic,refc,name,type);  return getDirectField(REF_putStatic,refc,field);}  }
class C{  public static Object invokeWithVarArg(Object obj,int methodID,Address argAddress,TypeReference expectReturnType,boolean skip4Args) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  if (VM.BuildForPower64ELF_ABI) {    Object[] argObjectArray=packageParameterFromVarArg(mr,argAddress);    return callMethod(obj,mr,argObjectArray,expectReturnType,skip4Args);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForSVR4ABI);    Object[] argObjectArray=packageParameterFromVarArgSVR4(mr,argAddress);    return callMethod(obj,mr,argObjectArray,expectReturnType,skip4Args);  }}  }
class C{  public static String random(int count,String chars){  if (chars == null) {    return random(count,0,0,false,false,null,RANDOM);  }  return random(count,chars.toCharArray());}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private static boolean isSorted(Comparable[] a){  return isSorted(a,0,a.length - 1);}  }
class C{  private void createText(final boolean readOnly){  this.text=new Text(this,readOnly ? SWT.READ_ONLY : SWT.NONE);  final GridData gd=new GridData(GridData.FILL,GridData.CENTER,true,false);  gd.minimumWidth=40;  this.text.setLayoutData(gd);}  }
class C{  private void handle200OkUnsubscribe(SipTransactionContext ctx){  if (sLogger.isActivated()) {    sLogger.info("200 OK response received");  }}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  public static double[] readDoubles(){  return new In().readAllDoubles();}  }
class C{  public Builder(int resourceId){  setResourceId(resourceId);}  }
class C{  public static String print(Map<Integer,int[]> streamsJoinedPerStream){  StringWriter buf=new StringWriter();  PrintWriter printer=new PrintWriter(buf);  for (  int stream : streamsJoinedPerStream.keySet()) {    int[] substreams=streamsJoinedPerStream.get(stream);    printer.println("stream " + stream + " : "+ Arrays.toString(substreams));  }  return buf.toString();}  }
class C{  public static void drawZoom(){  double size=100;  while (size < 500) {    StdDraw.clear();    StdDraw.picture(0,0,imageToDraw,size,size);    StdDraw.show(10);    size+=1;  }  while (size > 1) {    StdDraw.clear();    StdDraw.picture(0,0,imageToDraw,size,size);    StdDraw.show(1);    size-=1;  }}  }
class C{  public void startPolling(){  ExecutorService executor=Executors.newSingleThreadExecutor();  executor.execute(this);}  }
class C{  public void done(){  isCompleted=true;  earlier=null;}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public static void main(String... args) throws Exception {  new Railroads().process();}  }
class C{  public static Boolean implies(Boolean left,Boolean right){  return !left || right;}  }
class C{  private static void jcmd(Consumer<String> c,String... command) throws IOException, InterruptedException {  jcmd("JMXStartStopDoSomething",c,command);}  }
class C{  public void init() throws IOException {  if (_isInit.getAndSet(true)) {    return;  }  _rolloverLog.init();}  }
class C{  public void encodeOctetString(byte tb[],int tag,int tboffset,int length) throws EncodeException {  encodeByte(tag);  encodeLength(length);  if (length > 0) {    ensureFreeBytes(length);    System.arraycopy(tb,tboffset,buf,offset,length);    offset+=length;  }}  }
class C{  private void testConversation(Conversation c){  assertNotNull(c);  assertNotNull(c.getClientId());  assertNotNull(c.getId());  assertNotNull(c.getResponse());  assertFalse(c.getResponse().isEmpty());}  }
class C{  private final static String bufferToString(final java.nio.ByteBuffer strBuf,int len){  String string=null;  if (strBuf != null) {    int pos=strBuf.position();    strBuf.limit(pos + len);    string=AMF.CHARSET.decode(strBuf).toString();  } else {    log.warn("ByteBuffer was null attempting to read String");  }  return string;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.478 -0500",hash_original_method="47E7CF94088222D35244DD2A346F6D10",hash_generated_method="E19E8E64771431B6C6256E770157CA8B") public int fullyConnectSync(Context srcContext,Handler srcHandler,Handler dstHandler){  int status=connectSync(srcContext,srcHandler,dstHandler);  if (status == STATUS_SUCCESSFUL) {    Message response=sendMessageSynchronously(CMD_CHANNEL_FULL_CONNECTION);    status=response.arg1;  }  return status;}  }
class C{  public Interval domColonyNectarNeed(){  return new Interval(0,1.0);}  }
class C{  public static void note(String message){  messager.printMessage(Diagnostic.Kind.NOTE,message);}  }
class C{  public static void checkNewDataUnderlying(SupportBaseView testChildView,EventBean[] expectedValues){  EventBean[] newData=testChildView.getLastNewData();  Object[] expectedUnderlying=getUnderlying(expectedValues);  Object[] newUnderlying=getUnderlying(newData);  EPAssertionUtil.assertEqualsExactOrder(expectedUnderlying,newUnderlying);  testChildView.clearLastNewData();}  }
class C{  @SafeVarargs public static <T>T[] concat(T[] base,T... other){  return concat(base,other,other.length);}  }
class C{  public static URI findStorageSystemBySerialNumber(String serialNumber,DbClient dbClient,StorageSystemType systemType){  URI foundStorageSystemURI=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageDeviceSerialNumberConstraint(serialNumber),result);  if (result != null && result.iterator() != null && result.iterator().hasNext()) {    Iterator<URI> resultItr=result.iterator();    while (resultItr.hasNext()) {      foundStorageSystemURI=resultItr.next();      if (foundStorageSystemURI != null) {        StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,foundStorageSystemURI);        boolean isFileTypeSystem=SystemType.isFileTypeSystem(storageSystem.getSystemType());        if ((systemType == StorageSystemType.BLOCK && !isFileTypeSystem) || (systemType == StorageSystemType.FILE && isFileTypeSystem)) {          break;        }      }    }  }  if (foundStorageSystemURI == null) {    List<URI> storageSystemIDs=dbClient.queryByType(StorageSystem.class,true);    List<StorageSystem> storageSystems=null;    if (storageSystemIDs != null) {      storageSystems=dbClient.queryObject(StorageSystem.class,storageSystemIDs);    }    if (storageSystems != null && !storageSystems.isEmpty()) {      for (      StorageSystem storageSystem : storageSystems) {        if (NullColumnValueGetter.isNotNullValue(storageSystem.getSerialNumber()) && storageSystem.getSerialNumber().contains(serialNumber)) {          foundStorageSystemURI=storageSystem.getId();          break;        }      }    }  }  return foundStorageSystemURI;}  }
class C{  public VertexArray(int numVertices,VertexAttributes attributes){  super(false,numVertices,attributes);}  }
class C{  public ArraySet(Collection<? extends E> collection){  items=new ArrayList<E>(collection.size());  for (  E item : collection) {    if (!items.contains(item)) {      items.add(item);    }  }}  }
class C{  public PLRecycleTextureRunnable(PLTexture texture){  super();  mTexture=texture;  mGLWrapper=texture.mGLWrapper;}  }
class C{  public void configureForSyncPromo(boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceIcon.setImageResource(R.drawable.recent_laptop);  mDeviceLabel.setText(R.string.ntp_recent_tabs_sync_promo_title);  setTimeLabelVisibility(View.GONE);  configureExpandedCollapsed(isExpanded);}  }
class C{  protected void add(double value,int group){  if ((group < 0) || (group >= numberOfGroups)) {    throw new IllegalArgumentException();  }  data.add(new RankedObservation(value,group));}  }
class C{  public StatusEffectType(String enumName,int typeID,boolean instant,int maxPotionLevel){  super(enumName);  this.typeID=(byte)typeID;  this.instant=instant;  this.maxPotionLevel=maxPotionLevel;}  }
class C{  public <R>R submit(final Function<RS,R> fn){  return submit(null);}  }
class C{  public static void run(AdSense adsense) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all alerts for default account");  System.out.println("=================================================================");  Alerts alerts=adsense.alerts().list().execute();  if (alerts.getItems() != null && !alerts.getItems().isEmpty()) {    for (    Alert alert : alerts.getItems()) {      System.out.printf("Alert id \"%s\" with severity \"%s\" and type \"%s\" was found.\n",alert.getId(),alert.getSeverity(),alert.getType());    }  } else {    System.out.println("No alerts found.");  }  System.out.println();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.ROUTE__OWNED_ENDPOINTS:    return getOwnedEndpoints();case EipPackage.ROUTE__OWNED_CHANNELS:  return getOwnedChannels();case EipPackage.ROUTE__NAME:return getName();case EipPackage.ROUTE__EXCHANGE_TYPE:return getExchangeType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void idsTextModified(){  setFindEnablement();}  }
class C{  public void addEmptyElement(String tag) throws IOException {  if (!charsAddedBetweenTags_) {    writer_.write("\r\n");  }  charsAddedBetweenTags_=false;  writer_.write("<" + tag + "/>\r\n");}  }
class C{  public void onNext(Function callback){  peer.onNext(callback);}  }
class C{  @Before public void before() throws Exception {  tmpSolrHome=createTempDir();  FileUtils.copyDirectory(new File(TEST_HOME()),tmpSolrHome.getAbsoluteFile());  final SortedMap<ServletHolder,String> extraServlets=new TreeMap<>();  final ServletHolder solrRestApi=new ServletHolder("SolrSchemaRestApi",ServerServlet.class);  solrRestApi.setInitParameter("org.restlet.application","org.apache.solr.rest.SolrSchemaRestApi");  extraServlets.put(solrRestApi,"/schema/*");  System.setProperty("managed.schema.mutable","true");  System.setProperty("enable.update.log","false");  createJettyAndHarness(tmpSolrHome.getAbsolutePath(),"solrconfig-managed-schema.xml","schema-rest.xml","/solr",true,extraServlets);}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public static SearchRequest analyzeRequest(int id,Position prevPos,ArrayList<Move> mList,Position currPos,boolean drawOffer,String engine,int numPV){  SearchRequest sr=new SearchRequest();  sr.searchId=id;  sr.startTime=System.currentTimeMillis();  sr.prevPos=prevPos;  sr.mList=mList;  sr.currPos=currPos;  sr.drawOffer=drawOffer;  sr.isSearch=false;  sr.isAnalyze=true;  sr.wTime=sr.bTime=sr.wInc=sr.bInc=sr.movesToGo=0;  sr.engine=engine;  sr.strength=1000;  sr.numPV=numPV;  sr.ponderEnabled=false;  sr.ponderMove=null;  sr.posHashList=null;  sr.posHashListSize=0;  return sr;}  }
class C{  public JCheckBox(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix3D other){  if (other instanceof SelectedDenseObjectMatrix3D) {    SelectedDenseObjectMatrix3D otherMatrix=(SelectedDenseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseObjectMatrix3D) {    DenseObjectMatrix3D otherMatrix=(DenseObjectMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public static String name(AccountInfo info){  return accountFormatter.name(info);}  }
class C{  public void error(IgniteCheckedException err){  this.err=err;}  }
class C{  static HttpClient New(SSLSocketFactory sf,URL url,HostnameVerifier hv,String proxyHost,int proxyPort,HttpURLConnection httpuc) throws IOException {  return HttpsClient.New(sf,url,hv,proxyHost,proxyPort,true,httpuc);}  }
class C{  public static Class<?> toClass(int type){  Class<?> result=Object.class;switch (type) {case Types.CHAR:case Types.VARCHAR:case Types.LONGVARCHAR:    result=String.class;  break;case Types.NUMERIC:case Types.DECIMAL:result=java.math.BigDecimal.class;break;case Types.BOOLEAN:case Types.BIT:result=Boolean.class;break;case Types.TINYINT:result=Byte.class;break;case Types.SMALLINT:result=Short.class;break;case Types.INTEGER:result=Integer.class;break;case Types.BIGINT:result=Long.class;break;case Types.REAL:case Types.FLOAT:result=Float.class;break;case Types.DOUBLE:result=Double.class;break;case Types.BINARY:case Types.VARBINARY:case Types.LONGVARBINARY:result=Byte[].class;break;case Types.DATE:result=java.sql.Date.class;break;case Types.TIME:result=java.sql.Time.class;break;case Types.TIMESTAMP:result=java.sql.Timestamp.class;break;}return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void paintZoomAndOffset(final Canvas canvas){  int pos=Application.mainActivity.getSupportActionBar().getHeight() + 5;  Offset o=getOpenStreetMapTilesOverlay().getRendererInfo().getOffset(zoomLevel);  String text="Z " + zoomLevel + " Offset "+ (o != null ? String.format(Locale.US,"%.5f",o.lon) + "/" + String.format(Locale.US,"%.5f",o.lat) : "0.00000/0.00000");  float textSize=textPaint.getTextSize();  canvas.drawText(text,5,pos + textSize,textPaint);}  }
class C{  public ExceptionOccurredReply(final int packetId,final int errorCode,final long tid,final long code,final RelocatedAddress address,final String exceptionName){  super(packetId,errorCode);  Preconditions.checkNotNull(address,"IE01059: Address argument can not be null");  threadId=tid;  exceptionCode=code;  this.address=address;  this.exceptionName=exceptionName;}  }
class C{  public void assignContactFromPhone(String phoneNumber,boolean lazyLookup,Bundle extras){  mContactPhone=phoneNumber;  mExtras=extras;  if (!lazyLookup && mQueryHandler != null) {    mQueryHandler.startQuery(TOKEN_PHONE_LOOKUP,null,Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI,mContactPhone),PHONE_LOOKUP_PROJECTION,null,null,null);  } else {    mContactUri=null;  }}  }
class C{  protected void onRemoveInviteOnly(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder(key.toString());  if (isTOP())   return s.append("{TOP}").toString();  if (isBOTTOM())   return s.append("{BOTTOM}").toString();  s.append("{");  for (int i=0; i < size; i++) {    s.append(" ").append(numbers[i]);  }  s.append("}");  return s.toString();}  }
class C{  private void removeAllResourcesFromViewRoot(final FacesContext context,final List<UIComponent> resources,final UIViewRoot view){  final Iterator<UIComponent> it=resources.iterator();  while (it.hasNext()) {    final UIComponent resource=it.next();    final String resourceLibrary=(String)resource.getAttributes().get("library");    removeResource(context,resource,view);    if (resourceLibrary != null && resourceLibrary.startsWith("butterfaces"))     it.remove();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.101 -0500",hash_original_method="CA687482363D6F32107DA02B75F4C570",hash_generated_method="38099AD6E6A367E1D914C6C541A62172") public final void lazySet(boolean newValue){  value=newValue;}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof CryptoPermission))   return false;  CryptoPermission cp=(CryptoPermission)p;  if ((!alg.equalsIgnoreCase(cp.alg)) && (!alg.equalsIgnoreCase(ALG_NAME_WILDCARD))) {    return false;  }  if (cp.maxKeySize <= this.maxKeySize) {    if (!impliesParameterSpec(cp.checkParam,cp.algParamSpec)) {      return false;    }    if (impliesExemptionMechanism(cp.exemptionMechanism)) {      return true;    }  }  return false;}  }
class C{  public boolean contains(Entry e){  for (  T set : mDataSets) {    if (set.contains(e))     return true;  }  return false;}  }
class C{  public PinLaterRedisBackend(PropertiesConfiguration configuration,InputStream redisConfigStream,String serverHostName,long serverStartTimeMillis) throws Exception {  super(configuration,"Redis",serverHostName,serverStartTimeMillis);  this.shardMap=RedisBackendUtils.buildShardMap(redisConfigStream,configuration);  this.healthChecker=new HealthChecker("PinLaterRedis");  for (  RedisPools redisPools : shardMap.values()) {    this.healthChecker.addServer(redisPools.getHost(),redisPools.getPort(),new RedisHeartBeater(new JedisClientHelper(),redisPools.getMonitorRedisPool()),configuration.getInt("REDIS_HEALTH_CHECK_CONSECUTIVE_FAILURES",6),configuration.getInt("REDIS_HEALTH_CHECK_CONSECUTIVE_SUCCESSES",6),configuration.getInt("REDIS_HEALTH_CHECK_PING_INTERVAL_SECONDS",5),true);  }  final int delaySeconds=configuration.getInt("BACKEND_MONITOR_THREAD_DELAY_SECONDS");  ScheduledExecutorService service=Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("RedisJobQueueMonitor-%d").build());  service.scheduleWithFixedDelay(new RedisQueueMonitor(shardMap,configuration,healthChecker),delaySeconds + RANDOM.nextInt(delaySeconds),delaySeconds,TimeUnit.SECONDS);  try {    reloadQueueNames();  } catch (  Exception e) {    Stats.incr("init-queuenames-failure");    LOG.error("Failed to load queue names upon initialization.",e);  }  initialize();}  }
class C{  public final Mono<T> otherwise(Predicate<? super Throwable> predicate,Function<? super Throwable,? extends Mono<? extends T>> fallback){  Objects.requireNonNull(predicate,"predicate");  return otherwise(null);}  }
class C{  public ArrayList<String> parseMultipleObjects(List<Element> object){  ArrayList<String> list_of_ids=new ArrayList<String>();  for (int i=1; i < object.size(); i++) {    Element account=object.get(i);    String id=account.getContent().get(0).getValue();    list_of_ids.add(id);  }  return list_of_ids;}  }
class C{  public static ExecutionResult runTest(TestCase testCase){  logger.debug("Execution testCase with timeout {}: \n{}",Properties.TIMEOUT,testCase.toCode());  return TestCaseExecutor.getInstance().execute(testCase);}  }
class C{  @Category(FlakyTest.class) @Test public void testPrimaryShouldBeNullAndEPListShouldBeEmptyWhenAllServersAreDead() throws Exception {  createClientCache(this.getName(),NetworkUtils.getServerHostName(server1.getHost()));  verifyPrimaryShouldNotBeNullAndEPListShouldNotBeEmpty();  server1.invoke(null);  server2.invoke(null);  server3.invoke(null);  verifyDeadAndLiveServers(3,0);  verifyPrimaryShouldBeNullAndEPListShouldBeEmpty();}  }
class C{  public void parentedPostRender(float scale){  if (this.parent != null) {    this.parent.parentedPostRender(scale);  }  this.postRender(scale);}  }
class C{  protected void fireAreaInvalidated(FigureEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == FigureListener.class) {      ((FigureListener)listeners[i + 1]).areaInvalidated(event);    }  }}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  for (int i=0; i < FLAVORS.length; i++) {    if (flavor.equals(FLAVORS[i])) {      return true;    }  }  return false;}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public AtomicReference(){}  }
class C{  public static boolean directoryCreate(String dir){  File fileDirectory=new File(dir);  try {    if (!fileDirectory.exists()) {      Logger.getInstance().logVerbose("DirectoryCreate","Create directory: " + dir);      if (fileDirectory.mkdirs())       return true; else       Logger.getInstance().logWarning("DirectoryCreate","MkDir failed");    } else {      Logger.getInstance().logDebug("DirectoryCreate","Directory already exists");      return true;    }  } catch (  Exception e) {    Logger.getInstance().logError("DirectoryCreate","Failed: " + e.getMessage());  }  return false;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(type);  sb.append("/");  sb.append(subType);  for (  String name : attributes.keySet()) {    if (inferredCharset && ATTR_CHARSET.equals(name)) {      continue;    }    sb.append(";");    sb.append(name);    sb.append("=");    String value=attributes.get(name);    Matcher tokenMatcher=TOKEN_PATTERN.matcher(value);    if (tokenMatcher.matches()) {      sb.append(value);    } else {      sb.append("\"" + value + "\"");    }  }  return sb.toString();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public synchronized void addSchemaObject(SchemaObject obj){  obj.getSchema().add(obj);}  }
class C{  void registerSpring(Spring spring){  if (spring == null) {    throw new IllegalArgumentException("spring is required");  }  if (mSpringRegistry.containsKey(spring.getId())) {    throw new IllegalArgumentException("spring is already registered");  }  mSpringRegistry.put(spring.getId(),spring);}  }
class C{  public boolean toError(){  return toFail();}  }
class C{  public static NbtTag readTagInflated(InputStream in,NbtLimiter limiter) throws IOException {  try (NbtInputStream nbtIS=fromInflated(in,limiter)){    return nbtIS.readTag(limiter);  } }  }
class C{  public void removeNavigationListener(NavigationListener l){  navigationListeners.remove(l);}  }
class C{  public String doInvalidate(){  HttpSession session=(HttpSession)FacesContext.getCurrentInstance().getExternalContext().getSession(false);  if (session != null) {    session.invalidate();    FacesContext.getCurrentInstance().getExternalContext().getApplicationMap().put(INVALIDATED_ATTRIBUTE,true);  }  return "";}  }
class C{  public DagScorer(DataSet dataSet){  this(new CovarianceMatrix(dataSet));  this.dataSet=dataSet;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Iterator<T> emptyIterator(){  return (Iterator<T>)EMPTY_ITERATOR;}  }
class C{  public synchronized void add(double value){  add(mCategories.size() + "",value);}  }
class C{  void pushBack() throws IOException {  iis.seek(iis.getStreamPosition() - bufAvail);  bufAvail=0;  bufPtr=0;}  }
class C{  public static int max(int a,int b,int c){  return max(max(a,b),c);}  }
class C{  private void cleanup(TransactionId txId){  TXStateProxy proxy=this.localTxMap.remove(txId);  if (proxy != null) {    proxy.close();  }  Queue<Thread> waitingThreads=this.waitMap.get(txId);  if (waitingThreads != null && !waitingThreads.isEmpty()) {    for (    Thread waitingThread : waitingThreads) {      LockSupport.unpark(waitingThread);    }    waitMap.remove(txId);  }}  }
class C{  public static void handleException(MessagingException me,Mail mail,String offendersName,String nextState,Logger logger) throws MessagingException {  mail.setState(nextState);  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  String exceptionBuffer="Exception calling " + offendersName + ": "+ me.getMessage();  out.println(exceptionBuffer);  Exception e=me;  while (e != null) {    e.printStackTrace(out);    if (e instanceof MessagingException) {      e=((MessagingException)e).getNextException();    } else {      e=null;    }  }  String errorString=sout.toString();  mail.setErrorMessage(errorString);  logger.error(errorString);  throw me;}  }
class C{  public StockQuoteDatabase(){  stockQuotes.put("IBM",new Stock("IBM","International Business Machines",149.62,150.78,149.18));  stockQuotes.put("GOOG",new Stock("GOOG","Alphabet Inc.",652.30,657.81,643.15));  stockQuotes.put("AMZN",new Stock("AMZN","Amazon.com",548.90,553.20,543.10));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.813 -0500",hash_original_method="A8F90F402197D3F14FFEE9F1D4CA2EC5",hash_generated_method="5286AD478503CE0787F04CB528C9E162") public static boolean isDebuggerConnected(){  return VMDebug.isDebuggerConnected();}  }
class C{  public boolean equals(Object v){  try {    ReadonlyVec3D vv=(ReadonlyVec3D)v;    return (x == vv.x() && y == vv.y() && z == vv.z());  } catch (  NullPointerException e) {    return false;  }catch (  ClassCastException e) {    return false;  }}  }
class C{  public int candidate(){  return candidate;}  }
class C{  public synchronized void addResult(AccessStructure struct){  NodeList usersList=resultRoot.getElementsByTagName("user");  Element founduser=null;  for (int i=0; i < usersList.getLength(); i++) {    Element user=(Element)usersList.item(i);    if (user.getAttribute("username").equals(struct.getUsername())) {      founduser=user;      break;    }  }  if (founduser == null) {    founduser=doc.createElement("user");    founduser.setAttribute("username",struct.getUsername());    resultRoot.appendChild(founduser);  }  founduser.appendChild(struct.toXMLResultElement(doc));  Node firstEntry=entryRoot.getFirstChild();  entryRoot.removeChild(firstEntry);  writeXMLFile();}  }
class C{  public Relationship toRelationship(Database db) throws IOException {  return new RelationshipCreator((DatabaseImpl)db).createRelationship(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @SuppressWarnings("fallthrough") private void checkConsistent(){  boolean staticOk=false;  int expectedKind=-1;  Filter<Name> nameFilter=nonInitFilter;  boolean interfaceOwner=false;switch (refKind) {case ClassFile.REF_getStatic:case ClassFile.REF_putStatic:    staticOk=true;case ClassFile.REF_getField:case ClassFile.REF_putField:  expectedKind=Kinds.VAR;break;case ClassFile.REF_newInvokeSpecial:nameFilter=initFilter;expectedKind=Kinds.MTH;break;case ClassFile.REF_invokeInterface:interfaceOwner=true;expectedKind=Kinds.MTH;break;case ClassFile.REF_invokeStatic:interfaceOwner=true;staticOk=true;case ClassFile.REF_invokeVirtual:expectedKind=Kinds.MTH;break;case ClassFile.REF_invokeSpecial:interfaceOwner=true;expectedKind=Kinds.MTH;break;}Assert.check(!refSym.isStatic() || staticOk);Assert.check(refSym.kind == expectedKind);Assert.check(nameFilter.accepts(refSym.name));Assert.check(!refSym.owner.isInterface() || interfaceOwner);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected synchronized void notifyVersion(SprogVersion v){  ver=v;  for (  SprogVersionListener listener : getCopyOfListeners()) {    try {      listener.notifyVersion(ver);      versionListeners.remove(listener);    } catch (    Exception e) {      log.warn("notify: During dispatch to " + listener + "\nException "+ e);    }  }}  }
class C{  public void flush() throws IOException {  other.write(buf,0,bufOff);  bufOff=0;  Arrays.fill(buf,(byte)0);}  }
class C{  private void updateIdealPoint(){  for (  Solution solution : this) {    if (solution.getNumberOfObjectives() != numberOfObjectives) {      throw new FrameworkException("incorrect number of objectives");    }    for (int i=0; i < numberOfObjectives; i++) {      idealPoint[i]=Math.min(idealPoint[i],solution.getObjective(i));    }  }}  }
class C{  public Line(int offset,int end,String delimiter){  this.offset=offset;  this.length=(end - offset) + 1;  this.delimiter=delimiter;}  }
class C{  public void scanClass(InputStream bits) throws IOException {  DataInputStream dstream=new DataInputStream(new BufferedInputStream(bits));  ClassFile cf=null;  try {    cf=new ClassFile(dstream);    classIndex.put(cf.getName(),new HashSet<String>());    scanClass(cf);    if (scanMethodAnnotations || scanParameterAnnotations) {      scanMethods(cf);    }    if (scanFieldAnnotations) {      scanFields(cf);    }    if (cf.getInterfaces() != null) {      Set<String> intfs=new HashSet<String>();      for (      String intf : cf.getInterfaces()) {        intfs.add(intf);      }      implementsIndex.put(cf.getName(),intfs);    }  }  finally {    dstream.close();    bits.close();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechild.class,args);}  }
class C{  protected void initializeDynamicSupport(BridgeContext ctx,Element e,GraphicsNode node){  super.initializeDynamicSupport(ctx,e,node);  if (ctx.isDynamic()) {    addTextEventListeners(ctx,(NodeEventTarget)e);  }}  }
class C{  public boolean consumeWhitespace(){  boolean seen=false;  while (matchesWhitespace()) {    pos++;    seen=true;  }  return seen;}  }
class C{  public void deleteEntryByAlias(String alias){  if (alias == null || alias.isEmpty()) {    throw new IllegalArgumentException(String.format("'alias' cannot be null or empty." + "[Store: %s, Server: %s, User: %s]",_storeName,_serverName,_userName));  }  int error=VecsAdapter.VecsDeleteEntryW(_storeHandle,alias);  BAIL_ON_ERROR(error,"Deleting entry by alias '%s' from store '%s' failed. " + "[Server: %s, User: %s]",alias,_storeName,_serverName,_userName);}  }
class C{  protected <T>void runTasksConcurrent(final List<AbstractTask<T>> tasks) throws InterruptedException {  assert resourceManager.overflowTasksConcurrent >= 0;  try {    final List<Future<T>> futures=resourceManager.getConcurrencyManager().invokeAll(tasks,resourceManager.overflowTimeout,TimeUnit.MILLISECONDS);    final Iterator<AbstractTask<T>> titr=tasks.iterator();    for (    Future<? extends Object> f : futures) {      final AbstractTask<T> task=titr.next();      getFutureForTask(f,task,0L,TimeUnit.NANOSECONDS);    }  }  finally {  }}  }
class C{  public TObjectIntHashMapDecorator(TObjectIntHashMap<V> map){  super();  this._map=map;}  }
class C{  public HashCode append(final Object object){  if (object == null) {    iTotal=iTotal * iConstant;  } else {    if (object.getClass().isArray()) {      if (object instanceof long[]) {        append((long[])object);      } else       if (object instanceof int[]) {        append((int[])object);      } else       if (object instanceof short[]) {        append((short[])object);      } else       if (object instanceof char[]) {        append((char[])object);      } else       if (object instanceof byte[]) {        append((byte[])object);      } else       if (object instanceof double[]) {        append((double[])object);      } else       if (object instanceof float[]) {        append((float[])object);      } else       if (object instanceof boolean[]) {        append((boolean[])object);      } else {        append((Object[])object);      }    } else {      if (object instanceof Long) {        append(((Long)object).longValue());      } else       if (object instanceof Integer) {        append(((Integer)object).intValue());      } else       if (object instanceof Short) {        append(((Short)object).shortValue());      } else       if (object instanceof Character) {        append(((Character)object).charValue());      } else       if (object instanceof Byte) {        append(((Byte)object).byteValue());      } else       if (object instanceof Double) {        append(((Double)object).doubleValue());      } else       if (object instanceof Float) {        append(((Float)object).floatValue());      } else       if (object instanceof Boolean) {        append(((Boolean)object).booleanValue());      } else       if (object instanceof String) {        iTotal=iTotal * iConstant + object.hashCode();      } else {        if (isRegistered(object)) {          return this;        }        try {          register(object);          iTotal=iTotal * iConstant + object.hashCode();        }  finally {          unregister(object);        }      }    }  }  return this;}  }
class C{  private void toggleVideoMute(){  if (null != mCall) {    if (mCall.isVideo()) {      boolean isMuted=mCall.isVideoRecordingMuted();      mCall.muteVideoRecording(!isMuted);      Log.w(LOG_TAG,"## toggleVideoMute(): camera record turned to " + !isMuted);    }  } else {    Log.w(LOG_TAG,"## toggleVideoMute(): Failed");  }}  }
class C{  private void storeDimension(){  Env.APP_SETTINGS.set(Settings.STORED_WINDOW_WIDTH,getWidth());  Env.APP_SETTINGS.set(Settings.STORED_WINDOW_HEIGHT,getHeight());}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  private boolean statusOK(OBlock block){  if (_engineer != null) {    if ((_engineer.getRunState() == WAIT_FOR_CLEAR || _engineer.getRunState() == HALT)) {      log.warn("Engineer waiting at Block " + block.getDisplayName());      _message=Bundle.getMessage("BlockRougeOccupied",block.getDisplayName());      return false;    }    _engineer.checkHalt();  }  return true;}  }
class C{  private static String capitalize(String s){  if (s == null || s.length() == 0) {    return "";  }  char first=s.charAt(0);  if (Character.isUpperCase(first)) {    return s;  } else {    return Character.toUpperCase(first) + s.substring(1);  }}  }
class C{  NamedBeanHandle<Turnout> loadTurnout(Object o){  Element e=(Element)o;  if (e.getName().equals("turnout")) {    String name=e.getAttribute("systemName").getValue();    Turnout t;    if (e.getAttribute("userName") != null && !e.getAttribute("userName").getValue().equals("")) {      name=e.getAttribute("userName").getValue();      t=InstanceManager.turnoutManagerInstance().getTurnout(name);    } else {      t=InstanceManager.turnoutManagerInstance().getBySystemName(name);    }    return jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(name,t);  } else {    String name=e.getText();    try {      Turnout t=InstanceManager.turnoutManagerInstance().provideTurnout(name);      return jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(name,t);    } catch (    IllegalArgumentException ex) {      log.warn("Failed to provide Turnout \"{}\" in sendStatus",name);      return null;    }  }}  }
class C{  public static float[] expandArrayF(int bufferSize,float[] currentArray){  if (currentArray == null) {    return new float[bufferSize * 3];  }  int length=currentArray.length;  float[] ret=new float[length + bufferSize * 3];  System.arraycopy(currentArray,0,ret,0,length);  return ret;}  }
class C{  public Slice toSlice(){  this.flush();  return windowedBlockStream.toSlice();}  }
class C{  public void draw(){  StdDraw.line(xmin,ymin,xmax,ymin);  StdDraw.line(xmax,ymin,xmax,ymax);  StdDraw.line(xmax,ymax,xmin,ymax);  StdDraw.line(xmin,ymax,xmin,ymin);}  }
class C{  protected void restartBroker() throws Exception {  broker.stop();  broker.waitUntilStopped();  broker=createRestartedBroker();  broker.start();}  }
class C{  public static String escapeString(final String string){  if (string.indexOf(DELIMITER_COMPONENT) < 0) {    final int length=string.length();    final StringBuffer buffer=new StringBuffer(length + 16);    for (int index=0; index < length; index++) {      final char character=string.charAt(index);      if (DELIMITER_COMPONENT == character)       buffer.append(DELIMITER_COMPONENT);      buffer.append(character);    }    return buffer.toString();  }  return string;}  }
class C{  public void onEditRegion(final long id){  final Intent intent=new Intent(getActivity(),BeaconsDetailsActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);  intent.putExtra(BeaconsDetailsActivity.ID,id);  startActivity(intent);}  }
class C{  protected void sequence_CaseClause(ISerializationContext context,CaseClause semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public CUDA_MEMCPY3D(){}  }
class C{  public SwingPropertyChangeSupport(Object sourceBean,boolean notifyOnEDT){  super(sourceBean);  this.notifyOnEDT=notifyOnEDT;}  }
class C{  public static byte[] readDex(File file) throws IOException {  return readDex(file.toPath());}  }
class C{  public void nackAll(PubsubReader<T> reader) throws IOException {  checkState(this.reader == null,"Cannot nackAll on persisting checkpoint");  List<String> batchYetToAckIds=new ArrayList<>(Math.min(notYetReadIds.size(),ACK_BATCH_SIZE));  for (  String ackId : notYetReadIds) {    batchYetToAckIds.add(ackId);    if (batchYetToAckIds.size() >= ACK_BATCH_SIZE) {      long nowMsSinceEpoch=now(reader);      reader.nackBatch(nowMsSinceEpoch,batchYetToAckIds);      batchYetToAckIds.clear();    }  }  if (!batchYetToAckIds.isEmpty()) {    long nowMsSinceEpoch=now(reader);    reader.nackBatch(nowMsSinceEpoch,batchYetToAckIds);  }}  }
class C{  private int doCancel(){  int deselected=0;  Set<SelectionKey> cancelledKeys=cancelledKeys();synchronized (cancelledKeys) {    if (cancelledKeys.size() > 0) {      for (      SelectionKey currentKey : cancelledKeys) {        mutableKeys.remove(currentKey);        deregister((AbstractSelectionKey)currentKey);        if (mutableSelectedKeys.remove(currentKey)) {          deselected++;        }      }      cancelledKeys.clear();    }  }  return deselected;}  }
class C{  public Period(ReadableInstant startInstant,ReadableDuration duration){  super(startInstant,duration,null);}  }
class C{  private static Instruction generateBranchingTypeCheck(Instruction s,IR ir,Operand RHSobj,TypeReference LHStype,Operand RHStib,BasicBlock trueBlock,BasicBlock falseBlock,RegisterOperand oldGuard,BranchProfileOperand falseProb){  Instruction continueAt=Goto.create(GOTO,trueBlock.makeJumpTarget());  continueAt.copyPosition(s);  s.insertBefore(continueAt);  s.remove();  if (LHStype.isClassType()) {    RVMClass LHSclass=(RVMClass)LHStype.peekType();    if (LHSclass != null && LHSclass.isResolved()) {      if (LHSclass.isInterface()) {        int interfaceIndex=LHSclass.getDoesImplementIndex();        int interfaceMask=LHSclass.getDoesImplementBitMask();        RegisterOperand doesImpl=InsertUnary(continueAt,ir,GET_DOES_IMPLEMENT_FROM_TIB,TypeReference.IntArray,RHStib);        if (DynamicTypeCheck.MIN_DOES_IMPLEMENT_SIZE <= interfaceIndex) {          RegisterOperand doesImplLength=InsertGuardedUnary(continueAt,ir,ARRAYLENGTH,TypeReference.Int,doesImpl.copyD2U(),TG());          Instruction lengthCheck=IfCmp.create(INT_IFCMP,oldGuard,doesImplLength,IC(interfaceIndex),ConditionOperand.LESS_EQUAL(),falseBlock.makeJumpTarget(),BranchProfileOperand.unlikely());          if (oldGuard != null) {            oldGuard=oldGuard.copyD2D();          }          continueAt.insertBefore(lengthCheck);          BasicBlock oldBlock=continueAt.getBasicBlock();          oldBlock.splitNodeWithLinksAt(lengthCheck,ir);          oldBlock.insertOut(falseBlock);        }        RegisterOperand entry=InsertLoadOffset(continueAt,ir,INT_LOAD,TypeReference.Int,doesImpl,Offset.fromIntZeroExtend(interfaceIndex << 2),new LocationOperand(TypeReference.Int),TG());        RegisterOperand bit=insertBinary(continueAt,ir,INT_AND,TypeReference.Int,entry,IC(interfaceMask));        continueAt.insertBefore(IfCmp.create(INT_IFCMP,oldGuard,bit,IC(0),ConditionOperand.EQUAL(),falseBlock.makeJumpTarget(),falseProb));        return continueAt;      } else {        if (LHSclass.isFinal()) {          Operand classTIB=getTIB(continueAt,ir,LHSclass);          continueAt.insertBefore(IfCmp.create(REF_IFCMP,oldGuard,RHStib,classTIB,ConditionOperand.NOT_EQUAL(),falseBlock.makeJumpTarget(),falseProb));          return continueAt;        } else {          int LHSDepth=LHSclass.getTypeDepth();          int LHSId=LHSclass.getId();          RegisterOperand superclassIds=InsertUnary(continueAt,ir,GET_SUPERCLASS_IDS_FROM_TIB,TypeReference.ShortArray,RHStib);          if (DynamicTypeCheck.MIN_SUPERCLASS_IDS_SIZE <= LHSDepth) {            RegisterOperand superclassIdsLength=InsertGuardedUnary(continueAt,ir,ARRAYLENGTH,TypeReference.Int,superclassIds.copyD2U(),TG());            Instruction lengthCheck=IfCmp.create(INT_IFCMP,oldGuard,superclassIdsLength,IC(LHSDepth),ConditionOperand.LESS(),falseBlock.makeJumpTarget(),BranchProfileOperand.unlikely());            if (oldGuard != null) {              oldGuard=oldGuard.copyD2D();            }            continueAt.insertBefore(lengthCheck);            BasicBlock oldBlock=continueAt.getBasicBlock();            oldBlock.splitNodeWithLinksAt(lengthCheck,ir);            oldBlock.insertOut(falseBlock);          }          RegisterOperand refCandidate=InsertLoadOffset(continueAt,ir,USHORT_LOAD,TypeReference.Short,superclassIds,Offset.fromIntZeroExtend(LHSDepth << 1),new LocationOperand(TypeReference.Short),TG());          continueAt.insertBefore(IfCmp.create(INT_IFCMP,oldGuard,refCandidate,IC(LHSId),ConditionOperand.NOT_EQUAL(),falseBlock.makeJumpTarget(),falseProb));          return continueAt;        }      }    } else {      RegisterOperand result=ir.regpool.makeTempInt();      RVMMethod target=Entrypoints.instanceOfMethod;      Instruction call=Call.create2(CALL,result,AC(target.getOffset()),MethodOperand.STATIC(target),RHSobj,IC(LHStype.getId()));      call.copyPosition(continueAt);      continueAt.insertBefore(call);      call=callHelper(call,ir);      continueAt.insertBefore(IfCmp.create(INT_IFCMP,oldGuard,result.copyD2U(),IC(0),ConditionOperand.EQUAL(),falseBlock.makeJumpTarget(),falseProb));      return continueAt;    }  }  if (LHStype.isArrayType()) {    RVMArray LHSArray=(RVMArray)LHStype.peekType();    if (LHSArray != null) {      Operand classTIB=getTIB(continueAt,ir,LHSArray);      RVMType innermostElementType=LHSArray.getInnermostElementType();      if (innermostElementType.isPrimitiveType() || innermostElementType.isUnboxedType() || (innermostElementType.asClass().isResolved() && innermostElementType.asClass().isFinal())) {        continueAt.insertBefore(IfCmp.create(REF_IFCMP,oldGuard,RHStib,classTIB,ConditionOperand.NOT_EQUAL(),falseBlock.makeJumpTarget(),falseProb));        return continueAt;      }      Instruction shortcircuit=IfCmp.create(REF_IFCMP,oldGuard,RHStib,classTIB,ConditionOperand.EQUAL(),trueBlock.makeJumpTarget(),new BranchProfileOperand());      if (oldGuard != null) {        oldGuard=oldGuard.copyD2D();      }      continueAt.insertBefore(shortcircuit);      BasicBlock myBlock=shortcircuit.getBasicBlock();      BasicBlock mainBlock=myBlock.splitNodeWithLinksAt(shortcircuit,ir);      myBlock.insertOut(trueBlock);      RegisterOperand rhsType=InsertUnary(continueAt,ir,GET_TYPE_FROM_TIB,TypeReference.Type,RHStib.copy());      if (innermostElementType.isJavaLangObjectType()) {        IntConstantOperand lhsDimension=IC(LHStype.getDimensionality());        RegisterOperand rhsDimension=getField(continueAt,ir,rhsType,Entrypoints.dimensionField);        Instruction dimTest=IfCmp2.create(INT_IFCMP2,oldGuard,rhsDimension,lhsDimension,ConditionOperand.GREATER(),trueBlock.makeJumpTarget(),((BranchProfileOperand)falseProb.copy()).flip(),ConditionOperand.LESS(),falseBlock.makeJumpTarget(),(BranchProfileOperand)falseProb.copy());        if (oldGuard != null) {          oldGuard=oldGuard.copyD2D();        }        continueAt.insertBefore(dimTest);        mainBlock.splitNodeWithLinksAt(dimTest,ir);        mainBlock.insertOut(trueBlock);        mainBlock.insertOut(falseBlock);        RegisterOperand rhsInnermostElementTypeDimension=getField(continueAt,ir,rhsType.copyU2U(),Entrypoints.innermostElementTypeDimensionField);        continueAt.insertBefore(IfCmp.create(INT_IFCMP,oldGuard,rhsInnermostElementTypeDimension,IC(0),ConditionOperand.NOT_EQUAL(),falseBlock.makeJumpTarget(),falseProb));        return continueAt;      }    }    RVMMethod target=Entrypoints.instanceOfMethod;    RegisterOperand callResult=ir.regpool.makeTempInt();    Instruction call=Call.create2(CALL,callResult,AC(target.getOffset()),MethodOperand.STATIC(target),RHSobj,IC(LHStype.getId()));    call.copyPosition(continueAt);    continueAt.insertBefore(call);    call=callHelper(call,ir);    continueAt.insertBefore(IfCmp.create(INT_IFCMP,oldGuard,callResult.copyD2U(),IC(0),ConditionOperand.EQUAL(),falseBlock.makeJumpTarget(),falseProb));    return continueAt;  }  OptimizingCompilerException.UNREACHABLE();  return null;}  }
class C{  @Override protected void writeClosingDraw(Shape s){  writeln(" S");}  }
class C{  @RequestMapping(value="/property/paymutationfee",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON,produces=MediaType.APPLICATION_JSON) public String payMutationFee(@RequestBody String payPropertyTaxDetails,final HttpServletRequest request,String source) throws JsonGenerationException, JsonMappingException, IOException {  String responseJson;  try {    responseJson=new String();    PayPropertyTaxDetails payPropTaxDetails=(PayPropertyTaxDetails)getObjectFromJSONRequest(payPropertyTaxDetails,PayPropertyTaxDetails.class);    ErrorDetails errorDetails=validationUtil.validatePaymentDetails(payPropTaxDetails,true,"");    if (null != errorDetails) {      responseJson=getJSONResponse(errorDetails);    } else {      if (StringUtils.isNotBlank(source))       payPropTaxDetails.setSource(source); else       payPropTaxDetails.setSource(request.getSession().getAttribute("source") != null ? request.getSession().getAttribute("source").toString() : "");      ReceiptDetails receiptDetails=propertyExternalService.payMutationFee(payPropTaxDetails);      responseJson=getJSONResponse(receiptDetails);    }  } catch (  ValidationException e) {    List<ErrorDetails> errorList=new ArrayList<ErrorDetails>(0);    List<ValidationError> errors=e.getErrors();    for (    ValidationError ve : errors) {      ErrorDetails er=new ErrorDetails();      er.setErrorCode(ve.getKey());      er.setErrorMessage(ve.getMessage());      errorList.add(er);    }    responseJson=JsonConvertor.convert(errorList);  }catch (  Exception e) {    List<ErrorDetails> errorList=new ArrayList<ErrorDetails>(0);    ErrorDetails er=new ErrorDetails();    er.setErrorCode(e.getMessage());    er.setErrorMessage(e.getMessage());    errorList.add(er);    responseJson=JsonConvertor.convert(errorList);  }  return responseJson;}  }
class C{  public DateTime toDateTime(){  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GridCacheLocalTxTimeoutSelfTest(){  super(true);}  }
class C{  protected static void prepareXmlDoc(){  toSignDocument=new FileDocument(new File("src/main/resources/xml_example.xml"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:57.009 -0500",hash_original_method="4BCAF53DCD4CF7BB362561C1B9A79F13",hash_generated_method="6EBD84B5F4FE5B40F139ADA83A610D0F") public void clearLatitude(){  mHasLatitude=false;}  }
class C{  public static double min(final double a,final double b,final double c){  return Math.min(Math.min(a,b),c);}  }
class C{  public void test_getLowestSetBitPos(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int iNumber=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  int result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);  byte[] aBytes_={127,0,3};  iNumber=0;  aNumber=new BigInteger(aSign,aBytes_);  result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);  byte[] aBytes__={-128,0,0};  iNumber=23;  aNumber=new BigInteger(aSign,aBytes__);  result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);}  }
class C{  public final boolean matches(Node node){  return pattern.matches(node);}  }
class C{  public static URI convertUriWithoutSchemeToFileScheme(URI uri){  if (uri.getScheme() == null) {    return Paths.get(uri.getPath()).toUri();  }  return uri;}  }
class C{  public void resetPos(long pos) throws IOException {  ((InputStreamConverter)this.in).resetPos(pos);}  }
class C{  public SoftwarePIDController continuousInputs(boolean continuous){  target=target.continuous(continuous);  return this;}  }
class C{  @Nullable private IgniteBiTuple<State,Delimiter> findFirstDelimiter(IgfsInputStream stream,long startPos) throws IOException {  State state;  Delimiter delim;  long curPos=Math.max(0,startPos - maxDelimLen);  while (true) {    stream.seek(curPos);    state=new State();    delim=nextDelimiter(stream,state);    if (curPos == 0 || delim == null || delim.start - curPos > maxDelimLen - 1)     break; else     curPos=Math.max(0,curPos - maxDelimLen);  }  return F.t(state,delim);}  }
class C{  public void consumer(String path,@Pin ServiceRefAmp serviceRef,Result<? super Cancel> result){  if (path.isEmpty()) {    result.fail(new ServiceException(L.l("Invalid event location '{0}'",path)));    return;  }  String address=address(path);  EventNodeAsset node=lookupPubSubNode(address);  Cancel cancel=node.consumeImpl(serviceRef);  result.ok(cancel);}  }
class C{  void removeFromFreeList(){  if (m_freeList != null) {    m_freeList.remove(this);    m_freeWaiting=true;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Set keySet(){  Set ks=keySet;  return (ks != null ? ks : (keySet=new KeySet()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-19 13:30:38.074 -0400",hash_original_method="B1417C53B7334442AE372C957DCB8F0C",hash_generated_method="E063C2FA1E7EEC72A2E6214EEDDC4ECF") public ActivityChooserView(Context context){  this(context,null);}  }
class C{  public boolean isStaticTargetDiscoverySettable(){  return staticTargetDiscoverySettable;}  }
class C{  @SuppressWarnings("all") public void testRouteAndTurnoutConstants(){  Assert.assertTrue("CLOSED is ONCLOSED",Turnout.CLOSED == Route.ONCLOSED);  Assert.assertTrue("THROWN is ONTHROWN",Turnout.THROWN == Route.ONTHROWN);}  }
class C{  private void refill() throws IOException {  if (eof)   return;  int bytesRead=in.read(inputBuffer);  boolean success;  if (bytesRead == -1) {    eof=true;    success=coder.process(EMPTY,0,0,true);  } else {    success=coder.process(inputBuffer,0,bytesRead,false);  }  if (!success) {    throw new Base64DataException("bad base-64");  }  outputEnd=coder.op;  outputStart=0;}  }
class C{  public void ignoreShard(ShardRouting shard){  if (shard.primary()) {    ignoredPrimaries++;  }  ignored.add(shard);}  }
class C{  public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == ESCAPE_CHAR) {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid quoted-printable encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid quoted-printable encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public void tagImport(String movieName,String[] names,int[] ids) throws IOException {  if (tags != null) {    tags.tagImport(movieName,names,ids);  }}  }
class C{  public static String addAlpha(String originalColor,double alpha){  long alphaFixed=Math.round(alpha * 255);  String alphaHex=Long.toHexString(alphaFixed);  if (alphaHex.length() == 1) {    alphaHex="0" + alphaHex;  }  originalColor=originalColor.replace("#","#" + alphaHex);  return originalColor;}  }
class C{  private static int calculateDisplayedWidth(String string){  final int tabWidth=DEFAULT_TAB_WIDTH;  int column=0;  for (int i=0; i < string.length(); i++) {    if ('\t' == string.charAt(i)) {      column+=tabWidth - (column % tabWidth);    } else {      column++;    }  }  return column;}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  static int drawComposedText(View view,AttributeSet attr,Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  Graphics2D g2d=(Graphics2D)g;  AttributedString as=(AttributedString)attr.getAttribute(StyleConstants.ComposedTextAttribute);  as.addAttribute(TextAttribute.FONT,g.getFont());  if (p0 >= p1)   return x;  AttributedCharacterIterator aci=as.getIterator(null,p0,p1);  return x + (int)SwingUtilities2.drawString(getJComponent(view),g2d,aci,x,y);}  }
class C{  protected int nextIntSlow(){  final double bound=Math.exp(-mean);  int count=0;  double product;  for (product=1.0; product >= bound && product > 0.0; count++) {    product*=randomGenerator.raw();  }  if (product <= 0.0 && bound > 0.0)   return (int)Math.round(mean);  return count - 1;}  }
class C{  public void testImport(){  myFixture.copyDirectoryToProject("blockEvaluator","");  final PyFile file=PyUtil.as(myFixture.configureByFile("my_module.py"),PyFile.class);  assert file != null : "Failed to read file";  final PyBlockEvaluator sut=new PyBlockEvaluator();  sut.evaluate(file);  Assert.assertEquals("Failed to read var from package module","foo",sut.getValueAsString("VARIABLE_IN_PACKAGE_MODULE"));  Assert.assertEquals("Failed to read var from package","foo",sut.getValueAsString("VARIABLE_IN_PACKAGE"));  Assert.assertEquals("Failed to read list from another module",Arrays.asList("a","b","c","d"),sut.getValueAsList("SOME_LIST"));  Assert.assertEquals("Failed to read var from another module","42",sut.getValueAsString("SOME_VARIABLE"));  Assert.assertEquals("Failed to read var from another module with alias","foo",sut.getValueAsString("MY_RENAMED_VAR"));}  }
class C{  @Deprecated public void unlock(LockState<T> lockState){  if (lockState == null) {    throw new IllegalArgumentException("lockState is null");  }  if (lockState.setLock != this) {    throw new IllegalArgumentException("The lockState passed was not from this instance");  }  if (lockState.thread != Thread.currentThread()) {    throw new IllegalArgumentException("The thread that created this lockState is not the same as the one unlocking it");  }  threadSet.remove(Thread.currentThread());  for (  ReentrantLock lock : lockState.locks) {    lock.unlock();  }}  }
class C{  protected MenuItem onAddMenuItem(Menu menu,int itemPosition){  return null;}  }
class C{  public static long currentTimeSeconds(System self){  return System.currentTimeMillis() / 1000;}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Date that=(Date)other;  return (this.month == that.month) && (this.day == that.day) && (this.year == that.year);}  }
class C{  public FindAction(Application app,@Nullable View v){  super(app,v);}  }
class C{  public JspCServletContext(PrintWriter aLogWriter,URL aResourceBaseURL){  myAttributes=new Hashtable<String,Object>();  myLogWriter=aLogWriter;  myResourceBaseURL=aResourceBaseURL;  parseWebDotXml();}  }
class C{  protected void sequence_Wildcard(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void displayAcceptedOffers(List<Offer> offers){  this.acceptedOffers=offers;}  }
class C{  public MultiplicativeOperator createMultiplicativeOperatorFromString(EDataType eDataType,String initialValue){  MultiplicativeOperator result=MultiplicativeOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public boolean shouldDeployThisRound(){  return shouldDeployForRound(getRoundCount());}  }
class C{  public void invert(IndexableField field,boolean first) throws IOException, AbortingException {  if (first) {    invertState.reset();  }  IndexableFieldType fieldType=field.fieldType();  IndexOptions indexOptions=fieldType.indexOptions();  fieldInfo.setIndexOptions(indexOptions);  if (fieldType.omitNorms()) {    fieldInfo.setOmitsNorms();  }  final boolean analyzed=fieldType.tokenized() && docState.analyzer != null;  final boolean checkOffsets=indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;  boolean succeededInProcessingField=false;  try (TokenStream stream=tokenStream=field.tokenStream(docState.analyzer,tokenStream)){    stream.reset();    invertState.setAttributeSource(stream);    termsHashPerField.start(field,first);    while (stream.incrementToken()) {      int posIncr=invertState.posIncrAttribute.getPositionIncrement();      invertState.position+=posIncr;      if (invertState.position < invertState.lastPosition) {        if (posIncr == 0) {          throw new IllegalArgumentException("first position increment must be > 0 (got 0) for field '" + field.name() + "'");        } else         if (posIncr < 0) {          throw new IllegalArgumentException("position increment must be >= 0 (got " + posIncr + ") for field '"+ field.name()+ "'");        } else {          throw new IllegalArgumentException("position overflowed Integer.MAX_VALUE (got posIncr=" + posIncr + " lastPosition="+ invertState.lastPosition+ " position="+ invertState.position+ ") for field '"+ field.name()+ "'");        }      } else       if (invertState.position > IndexWriter.MAX_POSITION) {        throw new IllegalArgumentException("position " + invertState.position + " is too large for field '"+ field.name()+ "': max allowed position is "+ IndexWriter.MAX_POSITION);      }      invertState.lastPosition=invertState.position;      if (posIncr == 0) {        invertState.numOverlap++;      }      if (checkOffsets) {        int startOffset=invertState.offset + invertState.offsetAttribute.startOffset();        int endOffset=invertState.offset + invertState.offsetAttribute.endOffset();        if (startOffset < invertState.lastStartOffset || endOffset < startOffset) {          throw new IllegalArgumentException("startOffset must be non-negative, and endOffset must be >= startOffset, and offsets must not go backwards " + "startOffset=" + startOffset + ",endOffset="+ endOffset+ ",lastStartOffset="+ invertState.lastStartOffset+ " for field '"+ field.name()+ "'");        }        invertState.lastStartOffset=startOffset;      }      invertState.length++;      if (invertState.length < 0) {        throw new IllegalArgumentException("too many tokens in field '" + field.name() + "'");      }      try {        termsHashPerField.add();      } catch (      MaxBytesLengthExceededException e) {        byte[] prefix=new byte[30];        BytesRef bigTerm=invertState.termAttribute.getBytesRef();        System.arraycopy(bigTerm.bytes,bigTerm.offset,prefix,0,30);        String msg="Document contains at least one immense term in field=\"" + fieldInfo.name + "\" (whose UTF8 encoding is longer than the max length "+ DocumentsWriterPerThread.MAX_TERM_LENGTH_UTF8+ "), all of which were skipped.  Please correct the analyzer to not produce such terms.  The prefix of the first immense term is: '"+ Arrays.toString(prefix)+ "...', original message: "+ e.getMessage();        if (docState.infoStream.isEnabled("IW")) {          docState.infoStream.message("IW","ERROR: " + msg);        }        throw new IllegalArgumentException(msg,e);      }catch (      Throwable th) {        throw AbortingException.wrap(th);      }    }    stream.end();    invertState.position+=invertState.posIncrAttribute.getPositionIncrement();    invertState.offset+=invertState.offsetAttribute.endOffset();    succeededInProcessingField=true;  }  finally {    if (!succeededInProcessingField && docState.infoStream.isEnabled("DW")) {      docState.infoStream.message("DW","An exception was thrown while processing field " + fieldInfo.name);    }  }  if (analyzed) {    invertState.position+=docState.analyzer.getPositionIncrementGap(fieldInfo.name);    invertState.offset+=docState.analyzer.getOffsetGap(fieldInfo.name);  }  invertState.boost*=field.boost();}  }
class C{  @Override public void onClick(View view){  if (view.equals(addApp)) {    int position=getAdapterPosition();    Offer appOffer=appOffers.get(getMyAppPosition(position));    presenter.addAppOffer(appOffer);    updateBasePlan(appOffer.getCost());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.795 -0500",hash_original_method="40ED720E9E0E9A18C34ACD22184580A8",hash_generated_method="43E8DFA54E60C54537D787F0AAAC2A94") public void showInputMethodAndSubtypeEnabler(String imiId){synchronized (mH) {    try {      mService.showInputMethodAndSubtypeEnablerFromClient(mClient,imiId);    } catch (    RemoteException e) {      Log.w(TAG,"IME died: " + mCurId,e);    }  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public boolean saveAnswer(FormIndex index,IAnswerData data) throws JavaRosaException {  try {    return mFormEntryController.saveAnswer(index,data);  } catch (  Exception e) {    throw new JavaRosaException(e);  }}  }
class C{  public boolean isOppositeSide(){  return oppositeSide;}  }
class C{  public final boolean sendEmptyMessageDelayed(int what,long delayMillis){  return mExec.sendEmptyMessageDelayed(what,delayMillis);}  }
class C{  public static Pair<Node,NaviNode> convertNode(final INaviViewNode node,final Graph2D graph2D,final ZyGraphViewSettings graphSettings){  Preconditions.checkNotNull(node,"IE00909: Node argument can not be null");  Preconditions.checkNotNull(graph2D,"IE00910: Graph2D argument can not be null");  final Node yNode=createNode(graph2D,node);  final ZyLabelContent content=ZyGraphNodeBuilder.buildContent(node,graphSettings,null);  final IZyNodeRealizer realizer=createRealizer(node,content);  final NaviNode zyNode=new NaviNode(yNode,realizer,node);  realizer.setUserData(new ZyNodeData<NaviNode>(zyNode));  realizer.updateContentSelectionColor();  graph2D.setRealizer(yNode,realizer.getRealizer());  return new Pair<Node,NaviNode>(yNode,zyNode);}  }
class C{  public void actionPerformed(Event e){  if (e.getTarget().getId().equals(ConfirmPanel.A_OK)) {    String data=newText.getText();    if (data != null && data.length() > 0) {      log.config(data);      if (m_chat.get_ID() == 0)       m_chat.saveEx();      MChatEntry entry=new MChatEntry(m_chat,data);      entry.saveEx();    }  }  dispose();}  }
class C{  ArchivedDesktopComponent addDesktopComponent(final org.simbrain.workspace.gui.GuiComponent<?> dc){  return desktopComponent=new ArchivedDesktopComponent(this,dc);}  }
class C{  public ASN1InputStream(InputStream input,boolean lazyEvaluate){  this(input,StreamUtil.findLimit(input),lazyEvaluate);}  }
class C{  public Conference findConference(String name){  for (int i=0; i < teamList.size(); i++) {    if (conferences.get(i).confName.equals(name)) {      return conferences.get(i);    }  }  return conferences.get(0);}  }
class C{  boolean leftOf(double[] a,double[] b,double[] d){  final double bax=b[0] - a[0], bay=b[1] - a[1];  final double dax=d[0] - a[0], day=d[1] - a[1];  final double cross=bax * day - bay * dax;  return cross > 1e-10 * Math.max(Math.max(bax,bay),Math.max(dax,day));}  }
class C{  final public MutableString loose(){  if (hashLength < 0)   hashLength=array.length;  return this;}  }
class C{  protected void initialize(){}  }
class C{  public ScriptExecutorTask(ScriptExecutor executor,BlockingQueue<ScriptMethodRequest> requests,BlockingQueue<ScriptMethodResponse> responses){  this.executor=executor;  this.requests=requests;  this.responses=responses;}  }
class C{  public void addRepositoryInterceptor(RepositoryInterceptor interceptor){  interceptors.add(interceptor);  activated=true;}  }
class C{  public ParallelSequence(Collection steps,int threads){  super(steps);  numThreads=threads;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy == null)   return new Long(0);  return new Long(pluggy.getCreateDate());}  }
class C{  public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public void error(int id,String description){  if (false) {    Log.v(LOGTAG,"TestEventHandler: error() called Id:" + id + " description "+ description);  }  eventsReceived[TEST_ERROR]=true;  if (notExpecting[TEST_ERROR]) {    expectDetails.append("Error event received but not expected");    expectDetails.append("\r\n");  }  if (expectErrorId != -1) {    if (expectErrorId == id) {      expectErrorId=-1;    } else {      expectDetails.append("Error Id expected:" + expectErrorId + " got:"+ id);      expectDetails.append("\r\n");    }  }  if (expectErrorId == -1)   expects[TEST_ERROR]=false;  if (useLowLevel) {    if (delayResponse) {synchronized (syncObj) {        syncObj.notifyAll();      }    } else {      if (netRunner != null) {        System.out.println("TestEventHandler: endData() stopping " + netRunner);        netRunner.decrementRunCount();      }    }  }}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,short value){  if (extras == null) {    extras=new Bundle();  }  extras.putShort(name,value);  return this;}  }
class C{  public DrillSidewaysResult search(ScoreDoc after,DrillDownQuery query,int topN) throws IOException {  int limit=searcher.getIndexReader().maxDoc();  if (limit == 0) {    limit=1;  }  topN=Math.min(topN,limit);  TopScoreDocCollector hitCollector=TopScoreDocCollector.create(topN,after);  DrillSidewaysResult r=search(query,hitCollector);  return new DrillSidewaysResult(r.facets,hitCollector.topDocs());}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  SessionEditorIndirectRef sessionEditorRef=DesktopController.getInstance().getFrontmostSessionEditor();  SessionEditor sessionEditor=(SessionEditor)sessionEditorRef;  SessionEditorWorkbench workbench=sessionEditor.getSessionWorkbench();  SessionWrapper sessionWrapper=workbench.getSessionWrapper();  TetradMetadataIndirectRef metadataRef=DesktopController.getInstance().getTetradMetadata(sessionWrapper);  TetradMetadata metadata=(TetradMetadata)metadataRef;  StringBuilder buf=new StringBuilder();  if (metadata == null) {    buf.append("This session has not yet been saved or loaded. The model\n");    buf.append("version you are working in is ");    buf.append(Version.currentViewableVersion());    buf.append(".");    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),buf.toString());    return;  }  SimpleDateFormat df=new SimpleDateFormat("MMM dd, yyyy");  buf.append("Version information for \"");  buf.append(sessionWrapper.getName());  buf.append("\":\n\n");  buf.append("Last saved using Tetrad ");  buf.append(metadata.getVersion());  buf.append(" (");  buf.append(df.format(metadata.getDate()));  buf.append(").\n");  buf.append("You are running Tetrad ");  buf.append(Version.currentViewableVersion());  buf.append(".");  JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),buf.toString());}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.TRACE_STATE_ENTERED__STATE:    setState((ExecutionState)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Nullable private static java.util.Date parseRFC3339Date(@NonNull String string){  if (RFC3339Tz == null) {    setupRFC3339();  }  try {    Date date;    if (string.endsWith("Z")) {      string=string.replace("Z","+00:00");    } else {      char timezoneSign=string.contains("+") ? '+' : '-';      String firstPart=string.substring(0,string.lastIndexOf(timezoneSign));      String secondPart=string.substring(string.lastIndexOf(timezoneSign));      secondPart=secondPart.substring(0,secondPart.indexOf(':')) + secondPart.substring(secondPart.indexOf(':') + 1);      string=firstPart + secondPart;    }    try {      date=RFC3339Tz.parse(string);    } catch (    java.text.ParseException pe) {      date=RFC3339TzMs.parse(string);    }    return date;  } catch (  ParseException exception) {    return null;  }}  }
class C{  protected int engineGetOutputSize(int inputLen){  return core.getOutputSize(inputLen);}  }
class C{  @SuppressFBWarnings(value="EI_EXPOSE_REP",justification="intended exposure of mutable data") public ByteParser(byte[] input){  this.input=input;  this.offset=0;}  }
class C{  public static void appendChild(Node parent,Node child){  Document ownerDoc=getOwnerDocument(parent);  if (child.getOwnerDocument() != ownerDoc) {    parent.appendChild(ownerDoc.importNode(child,true));  } else {    parent.appendChild(child);  }}  }
class C{  public static boolean isUndefined(TypeArgument typeArg){  if (typeArg instanceof ParameterizedTypeRef) {    return ((ParameterizedTypeRef)typeArg).getDeclaredType() instanceof UndefinedType;  }  return false;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 7:{        addToken(Token.RESERVED_WORD);      }case 14:    break;case 2:{    addToken(Token.IDENTIFIER);  }case 15:break;case 13:{addToken(Token.FUNCTION);}case 16:break;case 12:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 17:break;case 4:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 18:break;case 9:{addToken(Token.WHITESPACE);}case 19:break;case 11:{addToken(Token.ERROR_NUMBER_FORMAT);}case 20:break;case 8:{addToken(Token.COMMENT_EOL);}case 21:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 22:break;case 6:{addToken(Token.OPERATOR);}case 23:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 24:break;case 5:{addNullToken();return firstToken;}case 25:break;case 10:{addToken(Token.SEPARATOR);}case 26:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 246:break;case LONG_STRING_2:{if (firstToken == null) {addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}return firstToken;}case 247:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public FlatBufferBuilder init(ByteBuffer existing_bb){  bb=existing_bb;  bb.clear();  bb.order(ByteOrder.LITTLE_ENDIAN);  minalign=1;  space=bb.capacity();  vtable_in_use=0;  nested=false;  finished=false;  object_start=0;  num_vtables=0;  vector_num_elems=0;  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.get("transcoder/formats/" + getString(stack),null);}  }
class C{  private static TestDataLookupStrategy guessTestDataLookupStrategyOnDirectoryAvailability(){  String homePath=PathManager.getHomePath();  for (  Map.Entry<TestDataLookupStrategy,List<String>> entry : TEST_DATA_RELATIVE_PATHS.entrySet()) {    for (    String relativePath : entry.getValue()) {      if (new File(homePath,relativePath).isDirectory()) {        return entry.getKey();      }    }  }  return TestDataLookupStrategy.ULTIMATE;}  }
class C{  public static void fillMatrix_2D(int n1,int n2,double[] m){  Random r=new Random(2);  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      m[i * n2 + j]=r.nextDouble();    }  }}  }
class C{  static void appendSimpleType(StringBuilder sb,Class<?>[] objs){  if (objs.length > 0) {    sb.append(objs[0].getName());    for (int i=1; i < objs.length; i++) {      sb.append(',');      sb.append(objs[i].getName());    }  }}  }
class C{  public AttributeInfo(ConstPool cp,String attrname,byte[] attrinfo){  this(cp,cp.addUtf8Info(attrname),attrinfo);}  }
class C{  public static int findLiveItemsUpperBound(XYDataset dataset,int series,double xLow,double xHigh){  ParamChecks.nullNotPermitted(dataset,"dataset");  if (xLow >= xHigh) {    throw new IllegalArgumentException("Requires xLow < xHigh.");  }  int itemCount=dataset.getItemCount(series);  if (itemCount <= 1) {    return 0;  }  if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {    int low=0;    int high=itemCount - 1;    double lowValue=dataset.getXValue(series,low);    if (lowValue > xHigh) {      return low;    }    double highValue=dataset.getXValue(series,high);    if (highValue <= xHigh) {      return high;    }    int mid=(low + high) / 2;    while (high - low > 1) {      double midV=dataset.getXValue(series,mid);      if (midV <= xHigh) {        low=mid;      } else {        high=mid;      }      mid=(low + high) / 2;    }    return mid;  } else   if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {    int low=0;    int high=itemCount - 1;    int mid=(low + high) / 2;    double lowValue=dataset.getXValue(series,low);    if (lowValue < xLow) {      return low;    }    double highValue=dataset.getXValue(series,high);    if (highValue >= xLow) {      return high;    }    while (high - low > 1) {      double midV=dataset.getXValue(series,mid);      if (midV >= xLow) {        low=mid;      } else {        high=mid;      }      mid=(low + high) / 2;    }    return mid;  } else {    int index=itemCount - 1;    double x=dataset.getXValue(series,index);    while (index >= 0 && x > xHigh) {      index--;      if (index >= 0) {        x=dataset.getXValue(series,index);      }    }    return Math.max(index,0);  }}  }
class C{  private void editPost(final String selectedWallId){  final Intent editWallPostIntent=new Intent(getActivity(),EditWallPostActivity.class);  editWallPostIntent.putExtra(AppConstants.Keys.EDIT_POST,true);  editWallPostIntent.putExtra(AppConstants.Keys.WALL_ID,selectedWallId);  startActivity(editWallPostIntent);}  }
class C{  public List findSeriesByGestor(String idGestor){  return _serieDBEntity.getSeriesXGestor(idGestor,null);}  }
class C{  @Deprecated @Override public void monitor(HostChangeMonitor<ServiceInstance> monitor) throws MonitorException {  throw new UnsupportedOperationException("NameServerSet does not support monitor");}  }
class C{  private boolean processOverloadedArg(CodeWriter code,MethodNode callMth,InsnArg arg,int origPos){  ArgType origType=callMth.getMethodInfo().getArgumentsTypes().get(origPos);  if (!arg.getType().equals(origType)) {    code.add('(');    useType(code,origType);    code.add(") ");    return true;  }  return false;}  }
class C{  public GlyphMetrics(float advance,Rectangle2D bounds,byte glyphType){  this.horizontal=true;  this.advanceX=advance;  this.advanceY=0;  this.bounds=new Rectangle2D.Float();  this.bounds.setRect(bounds);  this.glyphType=glyphType;}  }
class C{  protected void doExplicitGlyphLayout(){  this.gv.performDefaultLayout();  float baselineAscent=vertical ? (float)gv.getLogicalBounds().getWidth() : (metrics.getAscent() + Math.abs(metrics.getDescent()));  int numGlyphs=gv.getNumGlyphs();  float[] gp=gv.getGlyphPositions(0,numGlyphs + 1,null);  float verticalFirstOffset=0f;  float horizontalFirstOffset=0f;  boolean glyphOrientationAuto=isGlyphOrientationAuto();  int glyphOrientationAngle=0;  if (!glyphOrientationAuto) {    glyphOrientationAngle=getGlyphOrientationAngle();  }  int i=0;  int aciStart=aci.getBeginIndex();  int aciIndex=0;  char ch=aci.first();  int runLimit=aciIndex + aciStart;  Float x=null, y=null, dx=null, dy=null, rotation=null;  Object baseline=null;  float shift_x_pos=0;  float shift_y_pos=0;  float curr_x_pos=(float)offset.getX();  float curr_y_pos=(float)offset.getY();  Point2D.Float pos=new Point2D.Float();  boolean hasArabicTransparent=false;  while (i < numGlyphs) {    if (aciIndex + aciStart >= runLimit) {      runLimit=aci.getRunLimit(runAtts);      x=(Float)aci.getAttribute(X);      y=(Float)aci.getAttribute(Y);      dx=(Float)aci.getAttribute(DX);      dy=(Float)aci.getAttribute(DY);      rotation=(Float)aci.getAttribute(ROTATION);      baseline=aci.getAttribute(BASELINE_SHIFT);    }    GVTGlyphMetrics gm=gv.getGlyphMetrics(i);    if (i == 0) {      if (isVertical()) {        if (glyphOrientationAuto) {          if (isLatinChar(ch)) {            verticalFirstOffset=0f;          } else {            float advY=gm.getVerticalAdvance();            float asc=metrics.getAscent();            float dsc=metrics.getDescent();            verticalFirstOffset=asc + (advY - (asc + dsc)) / 2;          }        } else {          if (glyphOrientationAngle == 0) {            float advY=gm.getVerticalAdvance();            float asc=metrics.getAscent();            float dsc=metrics.getDescent();            verticalFirstOffset=asc + (advY - (asc + dsc)) / 2;          } else {            verticalFirstOffset=0f;          }        }      } else {        if ((glyphOrientationAngle == 270)) {          horizontalFirstOffset=(float)gm.getBounds2D().getHeight();        } else {          horizontalFirstOffset=0;        }      }    } else {      if (glyphOrientationAuto && (verticalFirstOffset == 0f) && !isLatinChar(ch)) {        float advY=gm.getVerticalAdvance();        float asc=metrics.getAscent();        float dsc=metrics.getDescent();        verticalFirstOffset=asc + (advY - (asc + dsc)) / 2;      }    }    float ox=0f;    float oy=0f;    float glyphOrientationRotation=0f;    float glyphRotation=0f;    if (ch != CharacterIterator.DONE) {      if (vertical) {        if (glyphOrientationAuto) {          if (isLatinChar(ch)) {            glyphOrientationRotation=(float)(Math.PI / 2f);          } else {            glyphOrientationRotation=0f;          }        } else {          glyphOrientationRotation=(float)Math.toRadians(glyphOrientationAngle);        }        if (textPath != null) {          x=null;        }      } else {        glyphOrientationRotation=(float)Math.toRadians(glyphOrientationAngle);        if (textPath != null) {          y=null;        }      }      if (rotation == null || rotation.isNaN()) {        glyphRotation=glyphOrientationRotation;      } else {        glyphRotation=(rotation.floatValue() + glyphOrientationRotation);      }      if ((x != null) && !x.isNaN()) {        if (i == 0)         shift_x_pos=(float)(x.floatValue() - offset.getX());        curr_x_pos=x.floatValue() - shift_x_pos;      }      if (dx != null && !dx.isNaN()) {        curr_x_pos+=dx.floatValue();      }      if ((y != null) && !y.isNaN()) {        if (i == 0)         shift_y_pos=(float)(y.floatValue() - offset.getY());        curr_y_pos=y.floatValue() - shift_y_pos;      }      if (dy != null && !dy.isNaN()) {        curr_y_pos+=dy.floatValue();      } else       if (i > 0) {        curr_y_pos+=gp[i * 2 + 1] - gp[i * 2 - 1];      }      float baselineAdjust=0f;      if (baseline != null) {        if (baseline instanceof Integer) {          if (baseline == TextAttribute.SUPERSCRIPT_SUPER) {            baselineAdjust=baselineAscent * 0.5f;          } else           if (baseline == TextAttribute.SUPERSCRIPT_SUB) {            baselineAdjust=-baselineAscent * 0.5f;          }        } else         if (baseline instanceof Float) {          baselineAdjust=((Float)baseline).floatValue();        }        if (vertical) {          ox=baselineAdjust;        } else {          oy=-baselineAdjust;        }      }      if (vertical) {        oy+=verticalFirstOffset;        if (glyphOrientationAuto) {          if (isLatinChar(ch)) {            ox+=metrics.getStrikethroughOffset();          } else {            Rectangle2D glyphBounds=gv.getGlyphVisualBounds(i).getBounds2D();            ox-=(float)((glyphBounds.getMaxX() - gp[2 * i]) - glyphBounds.getWidth() / 2);          }        } else {          Rectangle2D glyphBounds=gv.getGlyphVisualBounds(i).getBounds2D();          if (glyphOrientationAngle == 0) {            ox-=(float)((glyphBounds.getMaxX() - gp[2 * i]) - glyphBounds.getWidth() / 2);          } else           if (glyphOrientationAngle == 180) {            ox+=(float)((glyphBounds.getMaxX() - gp[2 * i]) - glyphBounds.getWidth() / 2);          } else           if (glyphOrientationAngle == 90) {            ox+=metrics.getStrikethroughOffset();          } else {            ox-=metrics.getStrikethroughOffset();          }        }      } else {        ox+=horizontalFirstOffset;        if (glyphOrientationAngle == 90) {          oy-=gm.getHorizontalAdvance();        } else         if (glyphOrientationAngle == 180) {          oy-=metrics.getAscent();        }      }    }    pos.x=curr_x_pos + ox;    pos.y=curr_y_pos + oy;    gv.setGlyphPosition(i,pos);    if (ArabicTextHandler.arabicCharTransparent(ch)) {      hasArabicTransparent=true;    } else {      if (vertical) {        float advanceY=0;        if (glyphOrientationAuto) {          if (isLatinChar(ch)) {            advanceY=gm.getHorizontalAdvance();          } else {            advanceY=gm.getVerticalAdvance();          }        } else {          if ((glyphOrientationAngle == 0) || (glyphOrientationAngle == 180)) {            advanceY=gm.getVerticalAdvance();          } else           if (glyphOrientationAngle == 90) {            advanceY=gm.getHorizontalAdvance();          } else {            advanceY=gm.getHorizontalAdvance();            gv.setGlyphTransform(i,AffineTransform.getTranslateInstance(0,advanceY));          }        }        curr_y_pos+=advanceY;      } else {        float advanceX=0;        if (glyphOrientationAngle == 0) {          advanceX=gm.getHorizontalAdvance();        } else         if (glyphOrientationAngle == 180) {          advanceX=gm.getHorizontalAdvance();          gv.setGlyphTransform(i,AffineTransform.getTranslateInstance(advanceX,0));        } else {          advanceX=gm.getVerticalAdvance();        }        curr_x_pos+=advanceX;      }    }    if (!epsEQ(glyphRotation,0)) {      AffineTransform glyphTransform=gv.getGlyphTransform(i);      if (glyphTransform == null) {        glyphTransform=new AffineTransform();      }      AffineTransform rotAt;      if (epsEQ(glyphRotation,Math.PI / 2)) {        rotAt=new AffineTransform(0,1,-1,0,0,0);      } else       if (epsEQ(glyphRotation,Math.PI)) {        rotAt=new AffineTransform(-1,0,0,-1,0,0);      } else       if (epsEQ(glyphRotation,3 * Math.PI / 2)) {        rotAt=new AffineTransform(0,-1,1,0,0,0);      } else {        rotAt=AffineTransform.getRotateInstance(glyphRotation);      }      glyphTransform.concatenate(rotAt);      gv.setGlyphTransform(i,glyphTransform);    }    aciIndex+=gv.getCharacterCount(i,i);    if (aciIndex >= charMap.length)     aciIndex=charMap.length - 1;    ch=aci.setIndex(aciIndex + aciStart);    i++;  }  pos.x=curr_x_pos;  pos.y=curr_y_pos;  gv.setGlyphPosition(i,pos);  advance=new Point2D.Float((float)(curr_x_pos - offset.getX()),(float)(curr_y_pos - offset.getY()));  if (hasArabicTransparent) {    ch=aci.first();    aciIndex=0;    i=0;    int transparentStart=-1;    while (i < numGlyphs) {      if (ArabicTextHandler.arabicCharTransparent(ch)) {        if (transparentStart == -1)         transparentStart=i;      } else {        if (transparentStart != -1) {          Point2D loc=gv.getGlyphPosition(i);          GVTGlyphMetrics gm=gv.getGlyphMetrics(i);          int tyS=0, txS=0;          float advX=0, advY=0;          if (vertical) {            if (glyphOrientationAuto || (glyphOrientationAngle == 90))             advY=gm.getHorizontalAdvance(); else             if (glyphOrientationAngle == 270)             advY=0; else             if (glyphOrientationAngle == 0)             advX=gm.getHorizontalAdvance(); else             advX=-gm.getHorizontalAdvance();          } else {            if (glyphOrientationAngle == 0)             advX=gm.getHorizontalAdvance(); else             if (glyphOrientationAngle == 90)             advY=gm.getHorizontalAdvance(); else             if (glyphOrientationAngle == 180)             advX=0; else             advY=-gm.getHorizontalAdvance();          }          float baseX=(float)(loc.getX() + advX);          float baseY=(float)(loc.getY() + advY);          for (int j=transparentStart; j < i; j++) {            Point2D locT=gv.getGlyphPosition(j);            GVTGlyphMetrics gmT=gv.getGlyphMetrics(j);            float locX=(float)locT.getX();            float locY=(float)locT.getY();            float tx=0, ty=0;            float advT=gmT.getHorizontalAdvance();            if (vertical) {              if (glyphOrientationAuto || (glyphOrientationAngle == 90))               locY=baseY - advT; else               if (glyphOrientationAngle == 270)               locY=baseY + advT; else               if (glyphOrientationAngle == 0)               locX=baseX - advT; else               locX=baseX + advT;            } else {              if (glyphOrientationAngle == 0)               locX=baseX - advT; else               if (glyphOrientationAngle == 90)               locY=baseY - advT; else               if (glyphOrientationAngle == 180)               locX=baseX + advT; else               locY=baseY + advT;            }            locT=new Point2D.Double(locX,locY);            gv.setGlyphPosition(j,locT);            if ((txS != 0) || (tyS != 0)) {              AffineTransform at;              at=AffineTransform.getTranslateInstance(tx,ty);              at.concatenate(gv.getGlyphTransform(i));              gv.setGlyphTransform(i,at);            }          }          transparentStart=-1;        }      }      aciIndex+=gv.getCharacterCount(i,i);      if (aciIndex >= charMap.length)       aciIndex=charMap.length - 1;      ch=aci.setIndex(aciIndex + aciStart);      i++;    }  }  layoutApplied=true;  spacingApplied=false;  glyphAdvances=null;  pathApplied=false;}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public Value(String key,String description){  this(key,description,true);}  }
class C{  private void updateAction(){}  }
class C{  public String nominalIndicesTipText(){  return "Range of label indices to be used for selection on nominal attribute. " + "First and last are valid indexes.";}  }
class C{  public void close(){  scanner.close();}  }
class C{  private static void processStaticFieldAssign(ClassNode cls,IndexInsnNode insn){  FieldInfo field=(FieldInfo)insn.getIndex();  String thisClass=cls.getClassInfo().getFullName();  if (field.getDeclClass().getFullName().equals(thisClass)) {    FieldNode fn=cls.searchField(field);    if (fn != null && fn.getAccessFlags().isFinal()) {      fn.remove(AType.FIELD_INIT);    }  }}  }
class C{  public static Address max(){  return null;}  }
class C{  @Override public int add(File o){  return addSorted(o);}  }
class C{  public ShortMemberValue(int index,ConstPool cp){  super('S',cp);  this.valueIndex=index;}  }
class C{  public EventNode peek() throws Exception {  if (peek == null) {    peek=next();  }  return peek;}  }
class C{  public static boolean checkForHUSSeries(StorageSystem storageSystem){  return (storageSystem.getModel() != null && storageSystem.getModel().startsWith(HDSConstants.HUS_SERIES_MODEL) && !storageSystem.getModel().equalsIgnoreCase(HDSConstants.HUSVM_MODEL));}  }
class C{  public static void subscribeToThrottlingPointReports(Callback callback){  subscribe(Type.THROTTLINGPOINT,callback);}  }
class C{  @Override public void clear(){  super.clear();  float[] keys=_set;  double[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  @Override public void onAction(){  onAction(ActionType.INSPECT);}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  static public IValueExpressionNode toCNF(final IValueExpressionNode vexpr){  final IValueExpressionNode copy=(IValueExpressionNode)BOpUtility.deepCopy((BOp)vexpr);  return pushDisjuncts(pushNegations(copy));}  }
class C{  public static boolean elementIsInEncryption11Space(Element element,String localName){  if (element == null) {    return false;  }  return EncryptionConstants.EncryptionSpec11NS.equals(element.getNamespaceURI()) && element.getLocalName().equals(localName);}  }
class C{  protected List<OrderByMapping> inlineOrderBy(SelectUniversal subselect) throws ScopeException, SQLScopeException {  List<OrderByMapping> orderByMapper=new ArrayList<OrderByMapping>();  for (  OrderBy order : getQuery().getOrderBy()) {    SimpleMapping m=mapper.find(order.getExpression());    if (m != null) {      orderByMapper.add(new OrderByMapping(m.getPiece(),order));    } else {      ISelectPiece piece=subselect.select(order.getExpression());      orderByMapper.add(new OrderByMapping(piece,order));    }  }  return orderByMapper;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"scasd");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a scasd instruction (invalid number of operands)");  }  new ScasGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.DWORD,instructions);}  }
class C{  @SuppressWarnings("unchecked") public Iterator<String> list() throws UsersRepositoryException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  try {    return Collections.unmodifiableList(entityManager.createNamedQuery("listUserNames").getResultList()).iterator();  } catch (  PersistenceException e) {    getLogger().debug("Failed to find user",e);    throw new UsersRepositoryException("Failed to list users",e);  } finally {    entityManager.close();  }}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected Closure resolveExplicitMethod(String methodName,Object args){  return getExplicitMethods().get(methodName);}  }
class C{  public void close() throws IOException {  if (simpleConsumer != null) {    simpleConsumer.close();  }}  }
class C{  public static boolean sameLines(final String expected,final String actual,final boolean sort){  final String[] erecs=splitLines(expected.trim());  if (sort) {    Arrays.sort(erecs);  }  final String[] arecs=splitLines(actual.trim());  if (sort) {    Arrays.sort(arecs);  }  final boolean same=sameLines(erecs,arecs);  if (!same) {    System.err.println("Actual output was:\n" + actual);    System.err.println("Expected output was:\n" + expected);  }  return same;}  }
class C{  @Override protected void processFailure(BaseStunMessageEvent event){  TransactionID transactionID=event.getTransactionID();  logger.finest("A transaction expired: tranid=" + transactionID);  logger.finest("localAddr=" + hostCandidate);  Request request;synchronized (requests) {    request=requests.remove(transactionID);  }  if (request == null) {    Message message=event.getMessage();    if (message instanceof Request)     request=(Request)message;  }  boolean completedResolvingCandidate=true;  try {    if (processErrorOrFailure(null,request,transactionID))     completedResolvingCandidate=false;  }  finally {    if (completedResolvingCandidate)     completedResolvingCandidate(request,null);  }}  }
class C{  public StringBand append(short s){  return append(Short.toString(s));}  }
class C{  public MaterialFilePicker withPath(String path){  mCurrentPath=path;  return this;}  }
class C{  public static Coords scatter(Coords coords,int margin){  int scatterDirection=Compute.d6(1) - 1;  return coords.translated(scatterDirection,margin);}  }
class C{  protected ITypeScriptCompiler createCompiler() throws TypeScriptException {  File nodeFile=getProjectSettings().getNodejsInstallPath();  File tscFile=getProjectSettings().getTscFile();  return createCompiler(tscFile,nodeFile);}  }
class C{  int addLayer(ChildDrawable layer){  final LayerState st=mLayerState;  final int N=st.mChildren != null ? st.mChildren.length : 0;  final int i=st.mNum;  if (i >= N) {    final ChildDrawable[] nu=new ChildDrawable[N + 10];    if (i > 0) {      System.arraycopy(st.mChildren,0,nu,0,i);    }    st.mChildren=nu;  }  st.mChildren[i]=layer;  st.mNum++;  st.invalidateCache();  return i;}  }
class C{  public void actionPerformed(ActionEvent e){  JFileChooser fileChooser=new JFileChooser();  int res=fileChooser.showSaveDialog(this);  if (res == JFileChooser.APPROVE_OPTION) {    BufferedImage bi=new BufferedImage(contentPanel.getWidth(),contentPanel.getHeight(),BufferedImage.TYPE_INT_RGB);    Graphics2D g2d=bi.createGraphics();    contentPanel.paint(g2d);    g2d.dispose();    try {      ImageIO.write(bi,"png",fileChooser.getSelectedFile());    } catch (    IOException e1) {      JOptionPane.showMessageDialog(this,e1.getMessage());    }  }}  }
class C{  public void write(Comment comment) throws SAXException {  if (lexicalHandler != null) {    String text=comment.getText();    char[] chars=text.toCharArray();    lexicalHandler.comment(chars,0,chars.length);  }}  }
class C{  public DOMUnsupportedException(Exception e){  this(e,null);}  }
class C{  private MethodReturn handleCacheableOperation() throws Exception {  ResourceStateHandler resourceStateHandler=ResourceStateConfig.getResourceStateHandler();  ResourceState resourceState=resourceStateHandler.get(key);  MethodReturn ret=null;  if (resourceState == null) {    return null;  } else {    if (resourceState.isExpired()) {      ret=resourceMethod.doInvoke(request,response);      if (ret.getCheckedExceptionData() == null) {        updateState(request.getUri(),ret);        resourceState=resourceStateHandler.get(key);      } else {        resourceStateHandler.remove(key);      }    }    ConditionalResponse conditionalResponse=evaluatePreconditions(resourceState);    if (conditionalResponse != null) {      return new MethodReturn(resourceMethod.hasReturnType,null,null,resourceMethod.cacheInfo,conditionalResponse,resourceMethod.isEtagGenerationEnabled());    }  }  return ret;}  }
class C{  public static Document newDocument(){  return documentBuilder.newDocument();}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){  CifsShareACL shareACL=null;  for (  UnManagedCifsShareACL origACL : origACLList) {    shareACL=new CifsShareACL();    shareACL.setId(URIUtil.createId(CifsShareACL.class));    shareACL.setUser(origACL.getUser());    shareACL.setPermission(origACL.getPermission());    shareACL.setShareName(origACL.getShareName());    shareACL.setFileSystemId(fileshare.getId());    shareACLList.add(shareACL);    _logger.info("share ACLs details {}",shareACL.toString());  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  put(key,file,contentType,null);}  }
class C{  public static void assertPositive(int value){  try {    Assert.assertTrue(value + " is not positive",value > 0);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  private void prepareMetadataConnection() throws SQLException, ReplicatorException {  if (metadataConnection == null)   metadataConnection=dataSourceImpl.getConnection();  long currentTime=System.currentTimeMillis();  if (lastConnectionTime == 0) {    lastConnectionTime=currentTime;  } else   if (reconnectTimeoutInSeconds > 0 && currentTime - lastConnectionTime > reconnectTimeoutInSeconds * 1000) {    dataSourceImpl.releaseConnection(metadataConnection);    metadataConnection=dataSourceImpl.getConnection();  }}  }
class C{  public DSAParameters generateParameters(){  return (use186_3) ? generateParameters_FIPS186_3() : generateParameters_FIPS186_2();}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  AsyncHttpRequest _request=request.get();  return _request == null || _request.cancel(mayInterruptIfRunning);}  }
class C{  public void repaint(RectListManager devRLM){  if (devRLM == null)   return;  CachableRed cr;  WritableRaster syncRaster;  WritableRaster copyRaster;  updateWorkingBuffers();  if ((rootCR == null) || (workingBaseRaster == null)) {    return;  }  cr=rootCR;  syncRaster=workingBaseRaster;  copyRaster=workingRaster;  Rectangle srcR=rootCR.getBounds();  Rectangle dstR=workingRaster.getBounds();  if ((dstR.x < srcR.x) || (dstR.y < srcR.y) || (dstR.x + dstR.width > srcR.x + srcR.width)|| (dstR.y + dstR.height > srcR.y + srcR.height))   cr=new PadRed(cr,dstR,PadMode.ZERO_PAD,null);  boolean repaintAll=false;  Rectangle dr=copyRaster.getBounds();synchronized (syncRaster) {    if (repaintAll) {      cr.copyData(copyRaster);    } else {      java.awt.Graphics2D g2d=null;      if (false) {        BufferedImage tmpBI=new BufferedImage(workingOffScreen.getColorModel(),copyRaster.createWritableTranslatedChild(0,0),workingOffScreen.isAlphaPremultiplied(),null);        g2d=GraphicsUtil.createGraphics(tmpBI);        g2d.translate(-copyRaster.getMinX(),-copyRaster.getMinY());      }      if ((isDoubleBuffered) && (currentRaster != null) && (damagedAreas != null)) {        damagedAreas.subtract(devRLM,COPY_OVERHEAD,COPY_LINE_OVERHEAD);        damagedAreas.mergeRects(COPY_OVERHEAD,COPY_LINE_OVERHEAD);        Color fillColor=new Color(0,0,255,50);        Color borderColor=new Color(0,0,0,50);        Iterator iter=damagedAreas.iterator();        while (iter.hasNext()) {          Rectangle r=(Rectangle)iter.next();          if (!dr.intersects(r))           continue;          r=dr.intersection(r);          Raster src=currentRaster.createWritableChild(r.x,r.y,r.width,r.height,r.x,r.y,null);          GraphicsUtil.copyData(src,copyRaster);          if (g2d != null) {            g2d.setPaint(fillColor);            g2d.fill(r);            g2d.setPaint(borderColor);            g2d.draw(r);          }        }      }      Color fillColor=new Color(255,0,0,50);      Color borderColor=new Color(0,0,0,50);      Iterator iter=devRLM.iterator();      while (iter.hasNext()) {        Rectangle r=(Rectangle)iter.next();        if (!dr.intersects(r))         continue;        r=dr.intersection(r);        WritableRaster dst=copyRaster.createWritableChild(r.x,r.y,r.width,r.height,r.x,r.y,null);        cr.copyData(dst);        if (g2d != null) {          g2d.setPaint(fillColor);          g2d.fill(r);          g2d.setPaint(borderColor);          g2d.draw(r);        }      }    }  }  if (HaltingThread.hasBeenHalted())   return;  BufferedImage tmpBI=workingOffScreen;  workingBaseRaster=currentBaseRaster;  workingRaster=currentRaster;  workingOffScreen=currentOffScreen;  currentRaster=copyRaster;  currentBaseRaster=syncRaster;  currentOffScreen=tmpBI;  damagedAreas=devRLM;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public DDateTimeChooser(JFrame parent,String title,Date date){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(date);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static String readFileAsString(String filePath,ClassLoader loader) throws java.io.IOException {  StringBuffer fileData=new StringBuffer(1000);  InputStream inputStream=loader.getResourceAsStream(filePath);  InputStreamReader inputStreamReader=new InputStreamReader(inputStream);  BufferedReader reader=new BufferedReader(inputStreamReader);  char[] buf=new char[1024];  int numRead=0;  while ((numRead=reader.read(buf)) != -1) {    String readData=String.valueOf(buf,0,numRead);    fileData.append(readData);    buf=new char[1024];  }  reader.close();  return fileData.toString();}  }
class C{  public boolean testMyOwnSecretKey() throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {  SecretKey key1=getSecretKeyForPBKDF2(algoToTest);  SecretKey key2=getMyOwnSecretKey();  if (!Arrays.equals(key1.getEncoded(),key2.getEncoded())) {    System.err.println("We shouldn't be here. The key1 and key2 values " + "in its primary encoding format have to be the same!");    return false;  }  SecretKeyFactory skf=SecretKeyFactory.getInstance(algoToTest);  SecretKey key3=skf.translateKey(key2);  if (!Arrays.equals(key1.getEncoded(),key3.getEncoded())) {    System.err.println("testMyOwnSecretKey test case failed: the key1 " + "and key3 values in its primary encoding format are not " + "the same for " + algoToTest + "algorithm.");    return false;  }  return true;}  }
class C{  public String invokeAPI(String path,String method,Map<String,String> queryParams,Object body,Map<String,String> headerParams,Entity<?> formParams,String accept,String contentType,String[] authNames) throws ApiException {  updateParamsForAuth(authNames,queryParams,headerParams);  final ClientConfig clientConfig=new ClientConfig();  clientConfig.register(MultiPartFeature.class);  if (debugging) {    clientConfig.register(LoggingFilter.class);  }  Client client=ClientBuilder.newClient(clientConfig);  WebTarget target=client.target(this.basePath).path(path);  for (  String key : queryParams.keySet()) {    String value=queryParams.get(key);    if (value != null) {      target=target.queryParam(key,value);    }  }  Invocation.Builder invocationBuilder=target.request(contentType);  for (  String key : headerParams.keySet()) {    String value=headerParams.get(key);    if (value != null) {      invocationBuilder=invocationBuilder.header(key,value);    }  }  for (  String key : defaultHeaderMap.keySet()) {    if (!headerParams.containsKey(key)) {      String value=defaultHeaderMap.get(key);      if (value != null) {        invocationBuilder=invocationBuilder.header(key,value);      }    }  }  Response response=null;  invocationBuilder=invocationBuilder.accept(accept);  if ("GET".equals(method)) {    response=invocationBuilder.get();  } else   if ("POST".equals(method)) {    if (formParams != null) {      response=invocationBuilder.post(formParams);    } else     if (body == null) {      response=invocationBuilder.post(null);    } else {      response=invocationBuilder.post(serialize(body,contentType));    }  } else   if ("PUT".equals(method)) {    if (formParams != null) {      response=invocationBuilder.put(formParams);    } else     if (body == null) {      response=invocationBuilder.put(null);    } else {      response=invocationBuilder.put(serialize(body,contentType));    }  } else   if ("DELETE".equals(method)) {    response=invocationBuilder.delete();  } else {    throw new ApiException(500,"unknown method type " + method);  }  if (response.getStatus() == Status.NO_CONTENT.getStatusCode()) {    return null;  } else   if (response.getStatusInfo().getFamily().equals(Status.Family.SUCCESSFUL)) {    if (response.hasEntity()) {      return (String)response.readEntity(String.class);    } else {      return "";    }  } else {    String message="error";    String respBody=null;    Map<String,List<String>> responseHeaders=new HashMap<String,List<String>>();    for (    String key : response.getHeaders().keySet()) {      List<Object> values=response.getHeaders().get(key);      for (      Object o : values) {        List<String> headers=responseHeaders.get(key);        if (headers == null) {          headers=new ArrayList<String>();          responseHeaders.put(key,headers);        }        headers.add(String.valueOf(o));      }    }    if (response.hasEntity()) {      try {        message=String.valueOf(response.readEntity(String.class));      } catch (      RuntimeException e) {      }    }    throw new ApiException(response.getStatusInfo().getStatusCode(),message,responseHeaders,respBody);  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.OBJECT_LITERAL;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Favorite other=(Favorite)obj;  if (!Objects.equals(this.code,other.code)) {    return false;  }  if (this.emoteset != other.emoteset) {    return false;  }  return true;}  }
class C{  public void testFindJavaExecutable() throws CoreException {  String eclipseVMVersion=ProcessUtilities.findJavaExecutableForEclipse();  assertNotNull(eclipseVMVersion);}  }
class C{  public CategoryView(final String id,final Pair<String,String> imageSize){  super(id);  this.imageSize=imageSize;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__COMMENT_1:    return ((InternalEList<?>)getComment_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__STATE_1:  return ((InternalEList<?>)getState_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1__TRACE_1:return ((InternalEList<?>)getTrace_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.320 -0500",hash_original_method="8626572E0FE15707F18ECC5A9712CA34",hash_generated_method="8626572E0FE15707F18ECC5A9712CA34") void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.STATECHART_ROOT__DEF:    return getDef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (getPredicateCount() > 0)   return super.asNode(xctxt);  int current=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(current);  DTMAxisTraverser traverser=dtm.getAxisTraverser(m_axis);  String localName=getLocalName();  String namespace=getNamespace();  int what=m_whatToShow;  if (DTMFilter.SHOW_ALL == what || localName == NodeTest.WILD || namespace == NodeTest.WILD) {    return traverser.first(current);  } else {    int type=getNodeTypeTest(what);    int extendedType=dtm.getExpandedTypeID(namespace,localName,type);    return traverser.first(current,extendedType);  }}  }
class C{  @Override public synchronized byte[] command(byte[] data) throws TransportException {  if (Cfg.STATISTICS) {    statistics.addOut(data.length);  }  if (Cfg.DEBUG) {    Check.ensures(httpclient != null,"call startSession before command");  }  final HttpPost httppost=new HttpPost(baseurl);  httppost.setHeader(M.e("User-Agent"),M.e("Mozilla/5.0 (Linux; U; Android 3.0; en-us) AppleWebKit/533.1 (KHTML, like Gecko) Safari/533.1"));  httppost.setHeader(M.e("Content-Type"),M.e("application/octet-stream"));  if (cookies != null) {    for (    final Cookie cookie : cookies) {      httpclient.getCookieStore().addCookie(cookie);    }  }  DataInputStream in=null;  Statistics stat=null;  try {    byte[] randBlock=Utils.getRandomByteArray(1,16);    data=Utils.concat(data,randBlock);    httppost.setEntity(new ByteArrayEntity(data));    if (Cfg.STATISTICS) {      stat=new Statistics("httpclient",data.length);    }    final HttpResponse response=httpclient.execute(httppost);    if (Cfg.STATISTICS) {      stat.stop();    }    final int returnCode=response.getStatusLine().getStatusCode();    if (returnCode == HttpStatus.SC_OK) {      cookies=httpclient.getCookieStore().getCookies();      long length=response.getEntity().getContentLength();      if (length % 16 > 0) {        length=length - (length % 16);      }      in=new DataInputStream(response.getEntity().getContent());      final byte[] content=new byte[(int)length];      in.readFully(content);      in.close();      if (Cfg.STATISTICS) {        statistics.addIn(content.length);      }      return content;    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (command) error: " + returnCode);      }      return null;    }  } catch (  final Exception ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: " + ex.toString());    }    throw new TransportException(1);  } finally {    if (in != null) {      try {        in.close();      } catch (      final IOException e) {        if (Cfg.EXCEPTION) {          Check.log(e);        }        if (Cfg.DEBUG) {          Check.log(e);        }      }    }  }}  }
class C{  public CMSSignedData generate(CMSProcessable content,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return generate(content,false,sigProvider);}  }
class C{  boolean canWrite(){  return !isReadOnly;}  }
class C{  @Inline @Entrypoint public static Offset offsetFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_OFFSET_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().offsetRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return Offset.zero();}  }
class C{  public MapCounter(){  mCount=new HashMap<K,Integer>();}  }
class C{  public static <T>Promise<T> just(final T value){  return from(Observable.just(value));}  }
class C{  public List<TypedRelatedResourceRep> listResources(URI id){  StoragePoolResources response=client.get(StoragePoolResources.class,getIdUrl() + "/resources",id);  return defaultList(response.getResources());}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PreviewMediaFragment(OCFile fileToDetail,Account ocAccount,int startPlaybackPosition,boolean autoplay){  super(fileToDetail);  mAccount=ocAccount;  mSavedPlaybackPosition=startPlaybackPosition;  mAutoplay=autoplay;}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  private HttpURLConnection openConnectionFollowRedirects(String urlStr,String authSubToken) throws MalformedURLException, GeneralSecurityException, IOException {  boolean redirectsDone=false;  HttpURLConnection connection=null;  while (!redirectsDone) {    URL url=new URL(urlStr);    connection=(HttpURLConnection)url.openConnection();    connection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");    String authHeader=null;    authHeader=AuthSubUtil.formAuthorizationHeader(authSubToken,Utility.getPrivateKey(),url,"GET");    connection.setRequestProperty("Authorization",authHeader);    connection.setInstanceFollowRedirects(false);    int responseCode=connection.getResponseCode();    if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {      urlStr=connection.getHeaderField("Location");      if (urlStr == null) {        redirectsDone=true;      }    } else {      redirectsDone=true;    }  }  return connection;}  }
class C{  public static <R extends EppResource>void handlePendingTransferOnDelete(R resource,R newResource,DateTime now,HistoryEntry historyEntry){  if (resource.getStatusValues().contains(StatusValue.PENDING_TRANSFER)) {    TransferData oldTransferData=resource.getTransferData();    ofy().delete().keys(oldTransferData.getServerApproveEntities());    ofy().save().entity(new PollMessage.OneTime.Builder().setClientId(oldTransferData.getGainingClientId()).setEventTime(now).setMsg(TransferStatus.SERVER_CANCELLED.getMessage()).setResponseData(ImmutableList.of(createTransferResponse(newResource,newResource.getTransferData(),now),createPendingTransferNotificationResponse(resource,oldTransferData.getTransferRequestTrid(),false,now))).setParent(historyEntry).build());  }}  }
class C{  @Override public void onTokenRefresh(){  Log.d(TAG,"onTokenRefresh");  Intent intent=new Intent(this,IDRegisterService.class);  startService(intent);}  }
class C{  private byte[] createContentType(String type){  String result="Content-Type: " + type + "\r\n";  return result.getBytes();}  }
class C{  public void disconnect(){  if (this.sftp != null) {    if (this.sftp.isConnected()) {      this.sftp.disconnect();    } else     if (this.sftp.isClosed()) {      log.debug(this,"disconnect","sftp closed");    }  }}  }
class C{  private static void verifyVPlexVolumeStructureForDataMigration(Volume volume,VirtualPool currentVpool,boolean migrateSourceVolume,boolean migrateHAVolume,DbClient _dbClient){  boolean structureOK=true;  if (volume.isIngestedVolumeWithoutBackend(_dbClient)) {    if (migrateSourceVolume && migrateHAVolume) {      structureOK=VPlexDeviceController.migrationSupportedForVolume(volume,null,_dbClient);    } else     if (migrateSourceVolume) {      structureOK=VPlexDeviceController.migrationSupportedForVolume(volume,volume.getVirtualArray(),_dbClient);    } else     if (migrateHAVolume) {      structureOK=VPlexDeviceController.migrationSupportedForVolume(volume,VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool),_dbClient);    }  }  if (!structureOK) {    throw APIException.badRequests.invalidStructureForIngestedVolume(volume.getLabel());  }}  }
class C{  public boolean isVendorConfigOverrideAllowed(){  return vendorConfigOverrideAllowed;}  }
class C{  @Override public EndElement asEndElement(){  return (WbXmlEndElementEvent)this;}  }
class C{  public double entropyNMIJoint(){  if (entropyJoint() == 0) {    return 0;  }  return (entropyMutualInformation() / entropyJoint());}  }
class C{  public void incrementOptOutShownCount(){  SharedPreferences.Editor sharedPreferencesEditor=mSharedPreferences.edit();  sharedPreferencesEditor.putLong(OPT_OUT_SHOWN_COUNT,getOptOutShownCount() + 1);  sharedPreferencesEditor.apply();}  }
class C{  public boolean shouldStripSourceNode(Node textNode) throws javax.xml.transform.TransformerException {  return false;}  }
class C{  public final MutableDouble3D subtractIn(MutableDouble3D other){  x=x - other.x;  y=y - other.y;  z=z - other.z;  return this;}  }
class C{  public DrawerBuilder withDrawerGravity(int gravity){  this.mDrawerGravity=gravity;  return this;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  double[] dist=new double[numClasses];  int donetime=0;  boolean[] ddone=new boolean[numberofnetworks];  if (saveneuronsactivity && fwneurons == null) {    try {      fwneurons=new PrintWriter(new BufferedWriter(new FileWriter(fsna)));    } catch (    IOException e) {      e.printStackTrace();      System.exit(1);    }  }  if (tfastaram) {    for (int i=0; i < numberofnetworks; i++) {      if (dc[i] == null) {        networks[i].activity_report=activity_report;        dc[i]=new DistributionCalc(networks[i]);        dc[i].id=i;      }      dc[i].setinstance(instance);    }    for (int i=0; i < numberofnetworks; i++) {      ddone[i]=false;      if (dc[i].reuse) {        dc[i].gathered=false;synchronized (dc[i]) {          dc[i].doNotify();        }      } else {        dc[i].gathered=false;        dc[i].start();      }    }    int clsnr=0;    int counter=0;    while (clsnr < numberofnetworks) {      for (int i=0; i < numberofnetworks; i++) {synchronized (dc[i]) {          if (dc[i].do_classify == 2 && dc[i].gathered != true) {            clsnr+=1;            for (int j=0; j < numClasses; j++) {              dist[j]+=dc[i].m_dist[j];            }            dc[i].gathered=true;            ddone[i]=true;            donetime+=counter;            if (saveneuronsactivity) {            }          }        }      }      if (clsnr == numberofnetworks) {        break;      }      Thread.sleep(1);      counter+=1;      if ((clsnr) / ((float)numberofnetworks) > 0.75 && counter > 20 && counter == 2 * (donetime / ((float)clsnr))) {        for (int i=0; i < numberofnetworks; i++) {          if (ddone[i]) {            continue;          }synchronized (dc[i]) {            if (dc[i].sleep && dc[i].do_classify != 2) {              System.out.println("Error in counter at " + intclass + " clr "+ clsnr+ " counter "+ counter+ "restarting "+ i);              dc[i].notify();            }          }        }      }      if (counter % 1000 == 0 && counter > 0) {      }      if (this.getDebug()) {        if (counter % 100 == 0) {          System.out.println("Error in counter at " + intclass + " clr "+ clsnr+ " counter "+ counter);        }      }    }  } else {    for (int i=0; i < numberofnetworks; i++) {      networks[i].activity_report=activity_report;      double[] tdist=networks[i].distributionForInstance(instance);      for (int j=0; j < numClasses; j++) {        dist[j]+=tdist[j];      }      if (saveneuronsactivity) {      }    }  }  intclass+=1;  if (this.getDebug()) {    if (intclass % 100 == 0) {      System.out.println(".");    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(dist);  }  return dist;}  }
class C{  public EditableLabeledOMPoly(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  public static Context standaloneContext(){  return new Context();}  }
class C{  public WeightSorter(Individual individual){  this.individual=individual;}  }
class C{  public TransactionOutPoint(NetworkParameters params,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);}  }
class C{  void readANY(E00Record r,int n) throws IOException {  for (int i=0; i < n; i++)   r.read(isr);}  }
class C{  public void testDocGeneration() throws Exception {  File projectStructureMarkup=new File(System.getProperty("basedir") + "/target/project-structure.log");  Writer writer=new FileWriter(projectStructureMarkup);  writer.write(this.generator.generateDocumentation());  writer.close();  assertTrue(projectStructureMarkup.exists());}  }
class C{  public JCalendarDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  if (m_resources == null) {    m_resources=new LocaleResources();    m_resources.addBundleName("beans_messages");  } else {  }}  }
class C{  public static ArrayList<GeoPoint> decode(String encodedString,int precision,boolean hasAltitude){  int index=0;  int len=encodedString.length();  int lat=0, lng=0, alt=0;  ArrayList<GeoPoint> polyline=new ArrayList<GeoPoint>(len / 3);  while (index < len) {    int b, shift, result;    shift=result=0;    do {      b=encodedString.charAt(index++) - 63;      result|=(b & 0x1f) << shift;      shift+=5;    } while (b >= 0x20);    int dlat=((result & 1) != 0 ? ~(result >> 1) : (result >> 1));    lat+=dlat;    shift=result=0;    do {      b=encodedString.charAt(index++) - 63;      result|=(b & 0x1f) << shift;      shift+=5;    } while (b >= 0x20);    int dlng=((result & 1) != 0 ? ~(result >> 1) : (result >> 1));    lng+=dlng;    if (hasAltitude) {      shift=result=0;      do {        b=encodedString.charAt(index++) - 63;        result|=(b & 0x1f) << shift;        shift+=5;      } while (b >= 0x20);      int dalt=((result & 1) != 0 ? ~(result >> 1) : (result >> 1));      alt+=dalt;    }    GeoPoint p=new GeoPoint(lat * precision,lng * precision,alt / 100);    polyline.add(p);  }  return polyline;}  }
class C{  V value(){  return val;}  }
class C{  protected void optimize1() throws Exception {  int nNumChanged=0;  boolean bExamineAll=true;  while (nNumChanged > 0 || bExamineAll) {    nNumChanged=0;    if (bExamineAll) {      for (int i=0; i < m_nInstances; i++) {        nNumChanged+=examineExample(i);      }    } else {      for (int i=m_I0.getNext(-1); i != -1; i=m_I0.getNext(i)) {        nNumChanged+=examineExample(i);        if (m_bLow - m_bUp < 2 * m_fTolerance) {          nNumChanged=0;          break;        }      }    }    if (bExamineAll) {      bExamineAll=false;    } else     if (nNumChanged == 0) {      bExamineAll=true;    }  }}  }
class C{  public final int peepTail(){  return m_map[m_firstFree - 1];}  }
class C{  public Id2Outcome(){  this.outcomes=new HashSet<SingleOutcome>();}  }
class C{  @Override public void readFrom(ChannelBuffer data,int length){  super.readFrom(data,length);  if (this.interfaces == null) {    this.interfaces=new ArrayList<OFInterfaceVendorData>();  } else {    this.interfaces.clear();  }  int intfCount=(length - 4) / OFInterfaceVendorData.MINIMUM_LENGTH;  OFInterfaceVendorData intf;  for (int i=0; i < intfCount; ++i) {    intf=new OFInterfaceVendorData();    intf.readFrom(data);    this.interfaces.add(intf);  }}  }
class C{  public int locksSize(){  return values.size() - localsSize - stackSize;}  }
class C{  public final void addVariable(Node variable){  if (variables.contains(variable)) {    throw new IllegalArgumentException("Expecting a new variable: " + variable);  }  variables.add(variable);  if (dataBox instanceof MixedDataBox) {    ((MixedDataBox)dataBox).addVariable(variable);  } else {    resize(dataBox.numRows(),variables.size());    int col=dataBox.numCols() - 1;    for (int i=0; i < dataBox.numRows(); i++) {      dataBox.set(i,col,null);    }  }}  }
class C{  private void handleClearRegion(Message m){  String regionName=null;  int partCnt=0;  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    if (isDebugEnabled) {      logger.debug("{}: Received clear region message of length ({} bytes)",this,m.getPayloadLength());    }    Part regionNamePart=m.getPart(partCnt++);    Part callbackArgumentPart=m.getPart(partCnt++);    Part hasCqsPart=m.getPart(partCnt++);    regionName=regionNamePart.getString();    Object callbackArgument=callbackArgumentPart.getObject();    if (isDebugEnabled) {      logger.debug("Clearing region: {} callbackArgument: {}",regionName,callbackArgument);    }    if (((Boolean)hasCqsPart.getObject()).booleanValue()) {      Part numCqsPart=m.getPart(partCnt++);      if (isDebugEnabled) {        logger.debug("Received message has CQ Event. Number of cqs interested in the event : {}",numCqsPart.getInt() / 2);      }      partCnt=processCqs(m,partCnt,numCqsPart.getInt(),m.getMessageType(),null,null);    }    LocalRegion region=(LocalRegion)cacheHelper.getRegion(regionName);    if (region == null) {      if (isDebugEnabled && !quitting()) {        logger.debug("Region named {} does not exist",regionName);      }      return;    }    if (region.hasServerProxy()) {      region.basicBridgeClientClear(callbackArgument,qManager.getState().getProcessedMarker() || !this.isDurableClient);      if (isDebugEnabled) {        logger.debug("Cleared region: {} callbackArgument: {}",regionName,callbackArgument);      }    }  } catch (  Exception e) {    String message=LocalizedStrings.CacheClientUpdater_CAUGHT_THE_FOLLOWING_EXCEPTION_WHILE_ATTEMPTING_TO_CLEAR_REGION_0.toLocalizedString(regionName);    handleException(message,e);  }}  }
class C{  private VPlexClusterInfo findInitiators(List<PortInfo> initiatorPortInfo,List<VPlexInitiatorInfo> initiatorInfoList) throws VPlexApiException {  VPlexClusterInfo initiatorClusterInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    initiatorInfoList.addAll(findInitiatorsOnCluster(clusterInfo.getName(),initiatorPortInfo,null));    if (!initiatorInfoList.isEmpty()) {      initiatorClusterInfo=clusterInfo;      break;    }  }  return initiatorClusterInfo;}  }
class C{  public static Button createPushButton(Composite parent,String label,Image image){  Button button=new Button(parent,SWT.PUSH);  button.setFont(parent.getFont());  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  button.setLayoutData(gd);  SWTFactory.setButtonDimensionHint(button);  return button;}  }
class C{  private void contextMenu(LogicalVisualizationEx visualization,MouseEvent mouseEvent){  JComponent menu=new JPopupMenu();  JMenuItem restore=new JMenuItem("Restore Logical View");  restore.addActionListener(null);  JMenuItem collapse=new JMenuItem("Collapse all");  collapse.addActionListener(null);  JMenuItem expand=new JMenuItem("Expand all");  expand.addActionListener(null);  menu.add(restore);  menu.add(collapse);  menu.add(expand);  getVisibilityMenuItems(menu,visualization);  if (menu instanceof JPopupMenu) {    JPopupMenu popup=(JPopupMenu)menu;    popup.setLocation(mouseEvent.getLocationOnScreen());    popup.setInvoker(getDisplay());    popup.setVisible(true);    popup.requestFocus();  }}  }
class C{  protected void process(Document document) throws Exception {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer();  Source source=new DocumentSource(document);  StringWriter buffer=new StringWriter();  StreamResult result=new StreamResult(buffer);  transformer.transform(source,result);  String text=buffer.toString();  System.out.println("The document is:- ");  System.out.println(text);}  }
class C{  @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + " or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'OPERATION')  or hasPermission(#cube, 'MANAGEMENT')") public CubeInstance enableCube(CubeInstance cube) throws IOException, JobException {  String cubeName=cube.getName();  RealizationStatusEnum ostatus=cube.getStatus();  if (!cube.getStatus().equals(RealizationStatusEnum.DISABLED)) {    throw new InternalErrorException("Only disabled cube can be enabled, status of " + cubeName + " is "+ ostatus);  }  if (cube.getSegments(SegmentStatusEnum.READY).size() == 0) {    throw new InternalErrorException("Cube " + cubeName + " dosen't contain any READY segment");  }  final List<CubingJob> cubingJobs=listAllCubingJobs(cube.getName(),null,EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING));  if (!cubingJobs.isEmpty()) {    throw new JobException("Enable is not allowed with a running job.");  }  if (!cube.getDescriptor().checkSignature()) {    throw new IllegalStateException("Inconsistent cube desc signature for " + cube.getDescriptor());  }  try {    CubeUpdate cubeBuilder=new CubeUpdate(cube);    cubeBuilder.setStatus(RealizationStatusEnum.READY);    return getCubeManager().updateCube(cubeBuilder);  } catch (  IOException e) {    cube.setStatus(ostatus);    throw e;  }}  }
class C{  public RemoveForeignKeyChange(Table table,ForeignKey foreignKey){  super(table);  _foreignKey=foreignKey;}  }
class C{  private static void dumpThreads(){  System.err.println("current live threads and their context class loaders:");  Map threads=Thread.getAllStackTraces();  for (Iterator iter=threads.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry e=(Map.Entry)iter.next();    Thread t=(Thread)e.getKey();    System.err.println("  thread: " + t);    System.err.println("  context class loader: " + t.getContextClassLoader());    StackTraceElement[] trace=(StackTraceElement[])e.getValue();    for (int i=0; i < trace.length; i++) {      System.err.println("    " + trace[i]);    }  }}  }
class C{  public boolean registerFuel(FuelType type,ItemStack item,float multiplier){  fuelEntry entry=new fuelEntry(item,multiplier);  return type.addFuel(entry);}  }
class C{  public IgfsMetaDirectoryListingAddProcessor(String fileName,IgfsListingEntry entry){  assert fileName != null;  assert entry != null;  this.fileName=fileName;  this.entry=entry;}  }
class C{  @Override protected void collectMetaInformationInFacetValue(final SymbolDescription desc,final String key,final GamlProperties plugins){  super.collectMetaInformationInFacetValue(desc,key,plugins);  if (key.equals(TYPE)) {    final IExpressionDescription exp=desc.getFacet(TYPE);    if (exp.getExpression() != null) {      final String type=exp.getExpression().literalValue();      final DisplayDescription dd=GAMA.getGui().getDisplayDescriptionFor(type);      if (dd != null) {        plugins.put(GamlProperties.PLUGINS,dd.getDefiningPlugin());      }    }  }}  }
class C{  @RequestProcessing(value="/point/transfer",method=HTTPRequestMethod.POST) @Before(adviceClass={LoginCheck.class,CSRFCheck.class,PointTransferValidation.class}) public void pointTransfer(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final JSONObject ret=Results.falseResult();  context.renderJSON(ret);  final JSONObject requestJSONObject=(JSONObject)request.getAttribute(Keys.REQUEST);  final int amount=requestJSONObject.optInt(Common.AMOUNT);  final JSONObject toUser=(JSONObject)request.getAttribute(Common.TO_USER);  final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);  final String fromId=currentUser.optString(Keys.OBJECT_ID);  final String toId=toUser.optString(Keys.OBJECT_ID);  final String transferId=pointtransferMgmtService.transfer(fromId,toId,Pointtransfer.TRANSFER_TYPE_C_ACCOUNT2ACCOUNT,amount,toId);  final boolean succ=null != transferId;  ret.put(Keys.STATUS_CODE,succ);  if (!succ) {    ret.put(Keys.MSG,langPropsService.get("transferFailLabel"));  } else {    final JSONObject notification=new JSONObject();    notification.put(Notification.NOTIFICATION_USER_ID,toId);    notification.put(Notification.NOTIFICATION_DATA_ID,transferId);    notificationMgmtService.addPointTransferNotification(notification);  }}  }
class C{  protected boolean shouldActivateViewWhileSwiping(){  return false;}  }
class C{  protected boolean near(double a,double b,double eps){  return (Math.abs(a - b) < eps);}  }
class C{  final public TermNode c(){  return (TermNode)get(3);}  }
class C{  public SerialMessage(String m){  super(m);  setTimeout(100);}  }
class C{  public static String translateAttribute(String attributes) throws IOException {  short[] flags=strAttrToBooleanFlags(attributes);  StringBuilder sb=new StringBuilder();  if (flags[READ_ONLY] == YES)   sb.append(" +R"); else   if (flags[READ_ONLY] == NO)   sb.append(" -R");  if (flags[HIDDEN] == YES)   sb.append(" +H"); else   if (flags[HIDDEN] == NO)   sb.append(" -H");  if (flags[SYSTEM] == YES)   sb.append(" +S"); else   if (flags[SYSTEM] == NO)   sb.append(" -S");  if (flags[ARCHIVE] == YES)   sb.append(" +A"); else   if (flags[ARCHIVE] == NO)   sb.append(" -A");  return sb.toString();}  }
class C{  void reset(){  mHttpRequest.removeHeaders(CONTENT_LENGTH_HEADER);  if (mBodyProvider != null) {    try {      mBodyProvider.reset();    } catch (    IOException ex) {      if (HttpLog.LOGV)       HttpLog.v("failed to reset body provider " + getUri());    }    setBodyProvider(mBodyProvider,mBodyLength);  }  if (mReceivedBytes > 0) {    mFailCount=0;    HttpLog.v("*** Request.reset() to range:" + mReceivedBytes);    mHttpRequest.setHeader("Range","bytes=" + mReceivedBytes + "-");  }}  }
class C{  protected Path createPath(){  Path path=new Path();  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public static void sort(short[] a){  doSort(a,0,a.length - 1);}  }
class C{  public static void UF4(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double hj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    hj=Math.abs(yj) / (1.0 + Math.exp(2.0 * Math.abs(yj)));    if (j % 2 == 0) {      sum2+=hj;      count2++;    } else {      sum1+=hj;      count1++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - x[0] * x[0] + 2.0 * sum2 / (double)count2;}  }
class C{  protected Pointer(Pointer other,long byteOffset){  this(other);  this.byteOffset+=byteOffset;}  }
class C{  public static boolean isNaN(double v){  return false;}  }
class C{  public DummyStatisticsImpl(StatisticsType type,String textId,long numericId){  this.type=type;  this.textId=textId;  this.numericId=numericId;}  }
class C{  protected void initialize(){  this.setRoot(this.createRootNode());}  }
class C{  private static boolean wildcardPrincipalNameImplies(String principalClass,Principal[] principals){  for (  Principal p : principals) {    if (principalClass.equals(p.getClass().getName())) {      return true;    }  }  return false;}  }
class C{  public static void updateServerTimestampHeader(HttpRequest request){  if (request.getHeaders() == null) {    request.setHeaders(new CaseInsensitiveHeaders());  }  updateServerTimestampHeader(request.getHeaders());}  }
class C{  public static String stringFor(int n){switch (n) {case CU_TARGET_COMPUTE_10:    return "CU_TARGET_COMPUTE_10";case CU_TARGET_COMPUTE_11:  return "CU_TARGET_COMPUTE_11";case CU_TARGET_COMPUTE_12:return "CU_TARGET_COMPUTE_12";case CU_TARGET_COMPUTE_13:return "CU_TARGET_COMPUTE_13";case CU_TARGET_COMPUTE_20:return "CU_TARGET_COMPUTE_20";case CU_TARGET_COMPUTE_21:return "CU_TARGET_COMPUTE_21";case CU_TARGET_COMPUTE_30:return "CU_TARGET_COMPUTE_30";case CU_TARGET_COMPUTE_32:return "CU_TARGET_COMPUTE_32";case CU_TARGET_COMPUTE_35:return "CU_TARGET_COMPUTE_35";case CU_TARGET_COMPUTE_37:return "CU_TARGET_COMPUTE_37";case CU_TARGET_COMPUTE_50:return "CU_TARGET_COMPUTE_50";case CU_TARGET_COMPUTE_52:return "CU_TARGET_COMPUTE_52";case CU_TARGET_COMPUTE_53:return "CU_TARGET_COMPUTE_53";case CU_TARGET_COMPUTE_60:return "CU_TARGET_COMPUTE_60";case CU_TARGET_COMPUTE_61:return "CU_TARGET_COMPUTE_61";case CU_TARGET_COMPUTE_62:return "CU_TARGET_COMPUTE_62";}return "INVALID CUjit_target: " + n;}  }
class C{  public boolean isFamily(){  return family;}  }
class C{  public void primitivePaint(Graphics2D g2d){  AffineTransform at=g2d.getTransform();  double scx=Math.sqrt(at.getShearY() * at.getShearY() + at.getScaleX() * at.getScaleX());  double scy=Math.sqrt(at.getShearX() * at.getShearX() + at.getScaleY() * at.getScaleY());  GraphicsNode gn=null;  int idx=-1;  double w=bounds.getWidth() * scx;  double minDist=calcDist(w,minSz[0],maxSz[0]);  int minIdx=0;  for (int i=0; i < minSz.length; i++) {    double dist=calcDist(w,minSz[i],maxSz[i]);    if (dist < minDist) {      minDist=dist;      minIdx=i;    }    if (((minSz[i] == null) || (w >= minSz[i].width)) && ((maxSz[i] == null) || (w <= maxSz[i].width))) {      if ((idx == -1) || (minIdx == i)) {        idx=i;      }    }  }  if (idx == -1)   idx=minIdx;  gn=getGraphicsNode(idx);  if (gn == null)   return;  Rectangle2D gnBounds=gn.getBounds();  if (gnBounds == null)   return;  double gnDevW=gnBounds.getWidth() * scx;  double gnDevH=gnBounds.getHeight() * scy;  double gnDevX=gnBounds.getX() * scx;  double gnDevY=gnBounds.getY() * scy;  double gnDevX0, gnDevX1, gnDevY0, gnDevY1;  if (gnDevW < 0) {    gnDevX0=gnDevX + gnDevW;    gnDevX1=gnDevX;  } else {    gnDevX0=gnDevX;    gnDevX1=gnDevX + gnDevW;  }  if (gnDevH < 0) {    gnDevY0=gnDevY + gnDevH;    gnDevY1=gnDevY;  } else {    gnDevY0=gnDevY;    gnDevY1=gnDevY + gnDevH;  }  gnDevW=(int)(Math.ceil(gnDevX1) - Math.floor(gnDevX0));  gnDevH=(int)(Math.ceil(gnDevY1) - Math.floor(gnDevY0));  scx=(gnDevW / gnBounds.getWidth()) / scx;  scy=(gnDevH / gnBounds.getHeight()) / scy;  AffineTransform nat=g2d.getTransform();  nat=new AffineTransform(nat.getScaleX() * scx,nat.getShearY() * scx,nat.getShearX() * scy,nat.getScaleY() * scy,nat.getTranslateX(),nat.getTranslateY());  g2d.setTransform(nat);  gn.paint(g2d);}  }
class C{  public synchronized boolean isPlaying(){  return playerState == PlayerStates.PLAYING;}  }
class C{  public String toString(){  return "Activated=" + isActivated() + "; Groups="+ groupDNs;}  }
class C{  public static boolean needRecalculate(String returnAdjustmentTypeId){  return "RET_PROMOTION_ADJ".equals(returnAdjustmentTypeId) || "RET_DISCOUNT_ADJ".equals(returnAdjustmentTypeId) || "RET_SALES_TAX_ADJ".equals(returnAdjustmentTypeId);}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Point2D that=(Point2D)other;  return this.x == that.x && this.y == that.y;}  }
class C{  private int collide(PhrasePositions pp){  int tpPos=tpPos(pp);  PhrasePositions[] rg=rptGroups[pp.rptGroup];  for (int i=0; i < rg.length; i++) {    PhrasePositions pp2=rg[i];    if (pp2 != pp && tpPos(pp2) == tpPos) {      return pp2.rptInd;    }  }  return -1;}  }
class C{  public void testIntsCount(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.ints(size).parallel().forEach(null);    assertEquals(size,counter.sum());    size+=524959;  }}  }
class C{  @Override public boolean onScale(ScaleGestureDetector detector){  return false;}  }
class C{  public HoltLinearModelBuilder beta(double beta){  this.beta=beta;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,Math.exp(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static CallHierarchyViewPart findView(){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  CallHierarchyViewPart view=(CallHierarchyViewPart)activePage.findView(VIEW_ID);  return view;}  }
class C{  protected void extendElement(Element e){}  }
class C{  public boolean isClosed(){  return state == STATE_CLOSED;}  }
class C{  public MqttCallbackHandler(Context context,String clientHandle){  this.context=context;  this.clientHandle=clientHandle;}  }
class C{  private void createCachedTree(final CCriteriumTreeNode originalParent,final CCachedExpressionTreeNode cachedExpressionTreeNode){  for (  final CCriteriumTreeNode originalChild : originalParent.getChildren()) {    final CCachedExpressionTreeNode clonedChild=originalChild.createCachedNode();    CCachedExpressionTreeNode.append(cachedExpressionTreeNode,clonedChild);    createCachedTree(originalChild,clonedChild);  }}  }
class C{  public void resetToCheckpoint(){  if (checkPoint != -1) {    current_item=checkPoint;  }  checkPoint=-1;}  }
class C{  private PostgreSQLModuleFlowgraphsLoader(){}  }
class C{  public static Response createRefreshErrorResponse(char errorCode){  return createRefreshErrorResponse(errorCode,null);}  }
class C{  @Deprecated @ObjectiveCName("formatDialogText:") public String formatDialogText(Dialog dialog){  if (dialog.getSenderId() == 0) {    return "";  } else {    String contentText=formatContentText(dialog.getSenderId(),dialog.getMessageType(),dialog.getText(),dialog.getRelatedUid(),dialog.isChannel());    if (dialog.getPeer().getPeerType() == PeerType.GROUP && !dialog.isChannel()) {      if (!isLargeDialogMessage(dialog.getMessageType())) {        return formatPerformerName(dialog.getSenderId()) + ": " + contentText;      } else {        return contentText;      }    } else {      return contentText;    }  }}  }
class C{  public void doAutoCompletion(String type,boolean forward){  if (server == null) {    return;  }  int pos=textField.getCaretPosition();  String text=textField.getText();  int end=findWordEnd(text,pos);  int start=findWordStart(text,pos);  String word=text.substring(start,end);  if (word.isEmpty()) {    return;  }  String actualWord=word;  int index=prevCompletionIndex;  if (forward) {    index++;  } else {    index--;  }  boolean newCompletion=false;  if (!text.equals(prevCompletionText) || !inCompletion || (prevCompletionItems != null && prevCompletionItems.items.size() == 1)) {    prevCompletion=null;    index=0;    newCompletion=true;  }  if (prevCompletion != null) {    word=prevCompletion;  }  String prefix="";  if (start > 0) {    prefix=text.substring(0,start);  }  AutoCompletionServer.CompletionItems results;  if (newCompletion) {    results=findResults(type,prefix,word);  } else {    results=prevCompletionItems;  }  List<String> items=results.items;  start-=results.prefixToRemove.length();  actualWord=results.prefixToRemove + actualWord;  if (items.isEmpty() || (items.size() == 1 && items.get(0).equals(word))) {    return;  }  if (index >= items.size()) {    index=0;  } else   if (index < 0) {    index=items.size() - 1;  }  String nick=items.get(index);  String commonPrefix="";  if (!newCompletion && prevCommonPrefix != null) {    commonPrefix=prevCommonPrefix;  } else   if (items.size() > 1 && prevCompletion == null && showPopup && completeToCommonPrefix) {    commonPrefix=findPrefixCommonToAll(items);    if (!commonPrefix.isEmpty() && !nick.equalsIgnoreCase(commonPrefix)) {      nick=commonPrefix;      index=-1;    }  }  if (newCompletion) {    textBefore=text;    caretPosBefore=pos;  }  String newText=text.substring(0,start) + nick + text.substring(end);  textField.setText(newText);  int newEnd=end + (nick.length() - actualWord.length());  prevCaretPos=newEnd;  textField.setCaretPosition(newEnd);  if (showPopup) {    showCompletionInfo(index,prevCompletion == null,results,commonPrefix);  }  prevCompletion=word;  prevCompletionIndex=index;  prevCompletionText=newText;  prevCompletionItems=results;  prevCommonPrefix=commonPrefix;  completionType=type;  inCompletion=true;}  }
class C{  public static ArrayList<ReminderEntry> reminderItemsToReminders(ArrayList<LinearLayout> reminderItems,ArrayList<Integer> reminderMinuteValues,ArrayList<Integer> reminderMethodValues){  int len=reminderItems.size();  ArrayList<ReminderEntry> reminders=new ArrayList<ReminderEntry>(len);  for (int index=0; index < len; index++) {    LinearLayout layout=reminderItems.get(index);    Spinner minuteSpinner=(Spinner)layout.findViewById(R.id.reminder_minutes_value);    Spinner methodSpinner=(Spinner)layout.findViewById(R.id.reminder_method_value);    int minutes=reminderMinuteValues.get(minuteSpinner.getSelectedItemPosition());    int method=reminderMethodValues.get(methodSpinner.getSelectedItemPosition());    reminders.add(ReminderEntry.valueOf(minutes,method));  }  return reminders;}  }
class C{  public AddressParam(String input){  super(input);}  }
class C{  public void testScanQueryNotFullyFetchedMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  ScanQuery<String,Integer> qry=new ScanQuery<>();  qry.setPageSize(10);  testQueryNotFullyFetchedMetrics(cache,qry,true);}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.EXPRESSION_LIST__EXPRS:    return getExprs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean isPlainSupported(){  return plainData != null;}  }
class C{  public int delMin(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  head=cut(min,head);  Node<Key> x=min.child;  int index=min.index;  min.key=null;  if (x != null) {    do {      x.parent=null;      x=x.next;    } while (x != min.child);    head=meld(head,x);    min.child=null;  }  size--;  if (!isEmpty())   consolidate(); else   min=null;  nodes[index]=null;  return index;}  }
class C{  private static ToHitData toHit(IGame game,int attackerId,Targetable target,int weaponId,int aimingAt,int aimingMode,boolean isNemesisConfused,boolean exchangeSwarmTarget,Targetable oldTarget,Targetable originalTarget,boolean isStrafing,boolean isPointblankShot,List<ECMInfo> allECMInfo){  final Entity ae=game.getEntity(attackerId);  final Mounted weapon=ae.getEquipment(weaponId);  if (!(weapon.getType() instanceof WeaponType)) {    return new ToHitData(TargetRoll.AUTOMATIC_FAIL,"Not a weapon");  }  final WeaponType wtype=(WeaponType)weapon.getType();  Targetable swarmSecondaryTarget=target;  Targetable swarmPrimaryTarget=oldTarget;  if (exchangeSwarmTarget) {    Targetable tempTarget=target;    target=originalTarget;    originalTarget=tempTarget;  }  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;  }  boolean isAttackerInfantry=ae instanceof Infantry;  boolean isWeaponInfantry=wtype.hasFlag(WeaponType.F_INFANTRY);  boolean isWeaponFieldGuns=isAttackerInfantry && (weapon.getLocation() == Infantry.LOC_FIELD_GUNS);  final boolean usesAmmo=(wtype.getAmmoType() != AmmoType.T_NA) && !isWeaponInfantry;  final Mounted ammo=usesAmmo ? weapon.getLinked() : null;  final AmmoType atype=ammo == null ? null : (AmmoType)ammo.getType();  final boolean targetInBuilding=Compute.isInBuilding(game,te);  boolean bMekTankStealthActive=false;  if ((ae instanceof Mech) || (ae instanceof Tank)) {    bMekTankStealthActive=ae.isStealthActive();  }  boolean isIndirect=(wtype.hasModes() && weapon.curMode().equals("Indirect")) || (wtype instanceof ArtilleryCannonWeapon);  boolean isInferno=((atype != null) && ((atype.getAmmoType() == AmmoType.T_SRM) || (atype.getAmmoType() == AmmoType.T_MML)) && (atype.getMunitionType() == AmmoType.M_INFERNO)) || (isWeaponInfantry && (wtype.hasFlag(WeaponType.F_INFERNO)));  boolean isArtilleryDirect=wtype.hasFlag(WeaponType.F_ARTILLERY) && (game.getPhase() == IGame.Phase.PHASE_FIRING);  boolean isArtilleryIndirect=wtype.hasFlag(WeaponType.F_ARTILLERY) && ((game.getPhase() == IGame.Phase.PHASE_TARGETING) || (game.getPhase() == IGame.Phase.PHASE_OFFBOARD));  boolean isArtilleryFLAK=isArtilleryDirect && (te != null) && ((((te.getMovementMode() == EntityMovementMode.VTOL) || (te.getMovementMode() == EntityMovementMode.WIGE)) && te.isAirborneVTOLorWIGE()) || (te.isAirborne()))&& (atype != null)&& (usesAmmo && (atype.getMunitionType() == AmmoType.M_STANDARD));  boolean isHaywireINarced=ae.isINarcedWith(INarcPod.HAYWIRE);  boolean isINarcGuided=false;  boolean isECMAffected=ComputeECM.isAffectedByECM(ae,ae.getPosition(),target.getPosition(),allECMInfo);  boolean isTargetECMAffected=ComputeECM.isAffectedByECM(ae,target.getPosition(),target.getPosition(),allECMInfo);  boolean isTAG=wtype.hasFlag(WeaponType.F_TAG);  boolean isHoming=false;  boolean bHeatSeeking=(atype != null) && ((atype.getAmmoType() == AmmoType.T_SRM) || (atype.getAmmoType() == AmmoType.T_MML) || (atype.getAmmoType() == AmmoType.T_LRM)) && (atype.getMunitionType() == AmmoType.M_HEAT_SEEKING);  boolean bFTL=(atype != null) && ((atype.getAmmoType() == AmmoType.T_MML) || (atype.getAmmoType() == AmmoType.T_LRM)) && (atype.getMunitionType() == AmmoType.M_FOLLOW_THE_LEADER);  Mounted mLinker=weapon.getLinkedBy();  boolean bApollo=((mLinker != null) && (mLinker.getType() instanceof MiscType) && !mLinker.isDestroyed()&& !mLinker.isMissing()&& !mLinker.isBreached()&& mLinker.getType().hasFlag(MiscType.F_APOLLO)) && (atype != null) && (atype.getAmmoType() == AmmoType.T_MRM);  boolean bArtemisV=((mLinker != null) && (mLinker.getType() instanceof MiscType) && !mLinker.isDestroyed()&& !mLinker.isMissing()&& !mLinker.isBreached()&& mLinker.getType().hasFlag(MiscType.F_ARTEMIS_V)&& !isECMAffected&& !bMekTankStealthActive&& (atype != null)&& (atype.getMunitionType() == AmmoType.M_ARTEMIS_V_CAPABLE));  boolean inSameBuilding=Compute.isInSameBuilding(game,ae,te);  boolean underWater=(ae.getLocationStatus(weapon.getLocation()) == ILocationExposureStatus.WET) || (wtype instanceof SRTWeapon) || (wtype instanceof LRTWeapon);  if (te != null) {    if (!isTargetECMAffected && te.isINarcedBy(ae.getOwner().getTeam()) && (atype != null)&& ((atype.getAmmoType() == AmmoType.T_LRM) || (atype.getAmmoType() == AmmoType.T_MML) || (atype.getAmmoType() == AmmoType.T_SRM)|| (atype.getAmmoType() == AmmoType.T_NLRM))&& (atype.getMunitionType() == AmmoType.M_NARC_CAPABLE)) {      isINarcGuided=true;    }  }  int toSubtract=0;  final int ttype=target.getTargetType();  ToHitData toHit;  String reason=WeaponAttackAction.toHitIsImpossible(game,ae,target,swarmPrimaryTarget,swarmSecondaryTarget,weapon,atype,wtype,ttype,exchangeSwarmTarget,usesAmmo,te,isTAG,isInferno,isAttackerInfantry,isIndirect,attackerId,weaponId,isArtilleryIndirect,ammo,isArtilleryFLAK,targetInBuilding,isArtilleryDirect,isTargetECMAffected,isStrafing);  if (reason != null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,reason);  }  if (wtype.hasFlag(WeaponType.F_SPACE_BOMB)) {    toHit=Compute.getSpaceBombBaseToHit(ae,te,game);    return toHit;  }  if (wtype.hasFlag(WeaponType.F_B_POD) && (target instanceof Infantry) && target.getPosition().equals(ae.getPosition())) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"B-Pod firing at infantry");  }  long munition=AmmoType.M_STANDARD;  if (atype != null) {    munition=atype.getMunitionType();  }  if (munition == AmmoType.M_HOMING && ammo.curMode().equals("Homing")) {    isHoming=true;  }  int targEl;  if (te == null) {    targEl=-game.getBoard().getHex(target.getPosition()).depth();  } else {    targEl=te.relHeight();  }  Entity spotter=null;  boolean narcSpotter=false;  if (isIndirect) {    if ((target instanceof Entity) && !isTargetECMAffected && (te != null)&& (atype != null)&& usesAmmo&& (atype.getMunitionType() == AmmoType.M_NARC_CAPABLE)&& (te.isNarcedBy(ae.getOwner().getTeam()) || te.isINarcedBy(ae.getOwner().getTeam()))) {      spotter=te;      narcSpotter=true;    } else {      spotter=Compute.findSpotter(game,ae,target);    }    if ((spotter == null) && (atype != null) && ((atype.getAmmoType() == AmmoType.T_LRM) || (atype.getAmmoType() == AmmoType.T_MML) || (atype.getAmmoType() == AmmoType.T_NLRM)|| (atype.getAmmoType() == AmmoType.T_MEK_MORTAR))&& (atype.getMunitionType() == AmmoType.M_SEMIGUIDED)) {      for (      TagInfo ti : game.getTagInfo()) {        if (target.getTargetId() == ti.target.getTargetId()) {          spotter=game.getEntity(ti.attackerId);        }      }    }  }  int eistatus=0;  boolean mpMelevationHack=false;  if (usesAmmo && (wtype.getAmmoType() == AmmoType.T_LRM) && (atype != null)&& (atype.getMunitionType() == AmmoType.M_MULTI_PURPOSE)&& (ae.getElevation() == -1)&& (ae.getLocationStatus(weapon.getLocation()) == ILocationExposureStatus.WET)) {    mpMelevationHack=true;    ae.setElevation(0);  }  LosEffects los;  ToHitData losMods;  if (!isIndirect || (spotter == null)) {    if (!exchangeSwarmTarget) {      los=LosEffects.calculateLos(game,attackerId,target);    } else {      if (swarmPrimaryTarget.getTargetType() == Targetable.TYPE_ENTITY) {        los=LosEffects.calculateLos(game,swarmPrimaryTarget.getTargetId(),swarmSecondaryTarget);      } else {        los=LosEffects.calculateLos(game,swarmSecondaryTarget.getTargetId(),swarmPrimaryTarget);      }    }    if (ae.hasActiveEiCockpit()) {      if (los.getLightWoods() > 0) {        eistatus=2;      } else {        eistatus=1;      }    }    if ((wtype instanceof MekMortarWeapon) && isIndirect) {      los.setArcedAttack(true);    }    losMods=los.losModifiers(game,eistatus,underWater);    if ((atype != null) && ((atype.getAmmoType() == AmmoType.T_LRM_TORPEDO) || (atype.getAmmoType() == AmmoType.T_SRM_TORPEDO) || (((atype.getAmmoType() == AmmoType.T_SRM) || (atype.getAmmoType() == AmmoType.T_MRM) || (atype.getAmmoType() == AmmoType.T_LRM)|| (atype.getAmmoType() == AmmoType.T_MML)) && (munition == AmmoType.M_TORPEDO))) && (los.getMinimumWaterDepth() < 1)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Torpedos must follow water their entire LOS");    }  } else {    if (!exchangeSwarmTarget) {      los=LosEffects.calculateLos(game,spotter.getId(),target,true);    } else {      if (swarmPrimaryTarget.getTargetType() == Targetable.TYPE_ENTITY) {        los=LosEffects.calculateLos(game,swarmPrimaryTarget.getTargetId(),swarmSecondaryTarget);      } else {        los=LosEffects.calculateLos(game,swarmSecondaryTarget.getTargetId(),swarmPrimaryTarget);      }    }    los.setAttackerCover(LosEffects.COVER_NONE);    if (!narcSpotter && spotter.hasActiveEiCockpit()) {      if (los.getLightWoods() > 0) {        eistatus=2;      } else {        eistatus=1;      }    }    if (wtype instanceof MekMortarWeapon) {      los.setArcedAttack(true);    }    losMods=los.losModifiers(game,underWater);  }  if (mpMelevationHack) {    ae.setElevation(-1);  }  if (Infantry.LEG_ATTACK.equals(wtype.getInternalName())) {    toHit=Compute.getLegAttackBaseToHit(ae,te,game);    if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {      return toHit;    }    if ((te instanceof Mech) && ((Mech)te).isSuperHeavy()) {      toHit.addModifier(-1,"target is superheavy mech");    }  } else   if (Infantry.SWARM_MEK.equals(wtype.getInternalName())) {    toHit=Compute.getSwarmMekBaseToHit(ae,te,game);    if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {      return toHit;    }    if (te instanceof Tank) {      toHit.addModifier(-2,"target is vehicle");    }    if ((te instanceof Mech) && ((Mech)te).isSuperHeavy()) {      toHit.addModifier(-1,"target is superheavy mech");    }    if (te != null) {      for (      Entity e : te.getExternalUnits()) {        if (e instanceof BattleArmor) {          BattleArmor ba=(BattleArmor)e;          int def=ba.getShootingStrength();          int att=((Infantry)ae).getShootingStrength();          if (!(ae instanceof BattleArmor)) {            if (att >= 28) {              att=5;            } else             if (att >= 24) {              att=4;            } else             if (att >= 21) {              att=3;            } else             if (att >= 18) {              att=2;            } else {              att=1;            }          }          def=(def + 2) - att;          if (def > 0) {            toHit.addModifier(def,"Defending mechanized BA");          }        }      }    }  } else   if (Infantry.STOP_SWARM.equals(wtype.getInternalName())) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"End swarm attack.");  } else   if (BattleArmor.MINE_LAUNCHER.equals(wtype.getInternalName())) {    toHit=new ToHitData(8,"magnetic mine attack");  } else   if ((atype != null) && (atype.getAmmoType() == AmmoType.T_BA_MICRO_BOMB)) {    if (ae.getPosition().equals(target.getPosition())) {      toHit=new ToHitData(ae.getCrew().getPiloting(),"anti-mech skill");      if ((te instanceof Mech) && ((Mech)te).isSuperHeavy()) {        toHit.addModifier(-1,"target is superheavy mech");      }      return toHit;    }    return new ToHitData(TargetRoll.IMPOSSIBLE,"out of range");  } else   if ((te != null) && (ae.getSwarmTargetId() == te.getId())) {    int side=te instanceof Tank ? ToHitData.SIDE_RANDOM : ToHitData.SIDE_FRONT;    if (ae instanceof BattleArmor) {      if (!Infantry.SWARM_WEAPON_MEK.equals(wtype.getInternalName()) && !(wtype instanceof InfantryAttack)) {        return new ToHitData(TargetRoll.IMPOSSIBLE,"Use the 'Attack Swarmed Mek' attack instead");      }      return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"swarming (automatic hit)",ToHitData.HIT_SWARM,side);    }    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"swarming",ToHitData.HIT_SWARM_CONVENTIONAL,side);  } else   if (isArtilleryFLAK) {    if (game.getOptions().booleanOption("artillery_skill")) {      toHit=new ToHitData(ae.getCrew().getArtillery(),"artillery skill");    } else {      toHit=new ToHitData(ae.getCrew().getGunnery(),"gunnery skill");    }    toHit.addModifier(3,"artillery flak attack");    if ((te != null) && te.isAirborne()) {      if (te.getAltitude() > 3) {        if (te.getAltitude() > 9) {          toHit.addModifier(TargetRoll.IMPOSSIBLE,"airborne aerospace at altitude > 10");        } else         if (te.getAltitude() > 6) {          toHit.addModifier(2,"airborne aerospace at altitude 7-9");        } else         if (te.getAltitude() > 3) {          toHit.addModifier(1,"airborne aerospace at altitude 4-6.");        }      }    }  } else {    toHit=new ToHitData(ae.getCrew().getGunnery(),"gunnery skill");    if (game.getOptions().booleanOption("rpg_gunnery")) {      if (wtype.hasFlag(WeaponType.F_ENERGY)) {        toHit=new ToHitData(ae.getCrew().getGunneryL(),"gunnery (L) skill");      }      if (wtype.hasFlag(WeaponType.F_MISSILE)) {        toHit=new ToHitData(ae.getCrew().getGunneryM(),"gunnery (M) skill");      }      if (wtype.hasFlag(WeaponType.F_BALLISTIC)) {        toHit=new ToHitData(ae.getCrew().getGunneryB(),"gunnery (B) skill");      }    }    if (wtype.hasFlag(WeaponType.F_ARTILLERY) && game.getOptions().booleanOption("artillery_skill")) {      toHit=new ToHitData(ae.getCrew().getArtillery(),"artillery skill");    }    if (ae.getTaserFeedBackRounds() > 0) {      toHit.addModifier(1,"Taser feedback");    }    if (ae.getTaserInterferenceRounds() > 0) {      toHit.addModifier(ae.getTaserInterference(),"Taser interference");    }  }  if (wtype.hasFlag(WeaponType.F_EXTINGUISHER)) {    toHit=new ToHitData(8,"fire extinguisher");    if (((target instanceof Entity) && ((Entity)target).infernos.isStillBurning()) || ((target instanceof Tank) && ((Tank)target).isInfernoFire())) {      toHit.addModifier(2,"inferno fire");    }    if ((Targetable.TYPE_HEX_EXTINGUISH == target.getTargetType()) && game.getBoard().isInfernoBurning(target.getPosition())) {      toHit.addModifier(2,"inferno fire");    }    return toHit;  }  if (ae.isSpotting()) {    toHit.addModifier(+1,"attacker is spotting for indirect LRM fire");  }  if ((te instanceof Mech) && ((Mech)te).isSuperHeavy()) {    toHit.addModifier(-1,"target is superheavy mech");  }  if (game.getOptions().booleanOption("tacops_fatigue") && ae.getCrew().isGunneryFatigued()) {    toHit.addModifier(1,"fatigue");  }  if (ae.isSufferingEMI()) {    toHit.addModifier(+2,"electromagnetic interference");  }  if ((te != null) && te.isEvading()) {    toHit.addModifier(te.getEvasionBonus(),"target is evading");  }  if (game.getOptions().booleanOption("tacops_ghost_target") && !isIndirect && !isArtilleryIndirect&& !isArtilleryDirect) {    int ghostTargetMod=Compute.getGhostTargetNumber(ae,ae.getPosition(),target.getPosition());    if ((ghostTargetMod > -1) && !((ae instanceof Infantry) && !(ae instanceof BattleArmor))) {      int bapMod=0;      if (ae.hasBAP()) {        bapMod=1;      }      int tcMod=0;      if (ae.hasTargComp() && wtype.hasFlag(WeaponType.F_DIRECT_FIRE) && !wtype.hasFlag(WeaponType.F_CWS)&& !wtype.hasFlag(WeaponType.F_TASER)&& (atype != null)&& (!usesAmmo || !(((atype.getAmmoType() == AmmoType.T_AC_LBX) || (atype.getAmmoType() == AmmoType.T_AC_LBX_THB)) && (atype.getMunitionType() == AmmoType.M_CLUSTER)))) {        tcMod=2;      }      int ghostTargetMoF=(ae.getCrew().getSensorOps() + ghostTargetMod) - (ae.getGhostTargetOverride() + bapMod + tcMod);      if (ghostTargetMoF > 1) {        int mod=ghostTargetMoF / 2;        if (game.getOptions().intOption("ghost_target_max") > 0) {          mod=Math.min(mod,game.getOptions().intOption("ghost_target_max"));        }        toHit.addModifier(mod,"ghost targets");      }    }  }  if (game.getBoard().inSpace() && game.getOptions().booleanOption("stratops_ecm")) {    int ecm=ComputeECM.getLargeCraftECM(ae,ae.getPosition(),target.getPosition());    if (!ae.isLargeCraft()) {      ecm+=ComputeECM.getSmallCraftECM(ae,ae.getPosition(),target.getPosition());    }    ecm=Math.min(4,ecm);    int eccm=0;    if (ae.isLargeCraft()) {      eccm=((Aero)ae).getECCMBonus();    }    if (ecm > 0) {      toHit.addModifier(ecm,"ECM");      if (eccm > 0) {        toHit.addModifier(-1 * Math.min(ecm,eccm),"ECCM");      }    }  }  if (Compute.isGroundToAir(ae,target) && (null != te) && te.isNOE()) {    if (te.passedWithin(ae.getPosition(),1)) {      toHit.addModifier(+1,"target is NOE");    } else {      toHit.addModifier(+3,"target is NOE");    }  }  if (Compute.isGroundToAir(ae,target) && game.getOptions().booleanOption("stratops_aa_fire") && (null != te)&& (te instanceof Aero)) {    int vMod=((Aero)te).getCurrentVelocity();    if (game.getOptions().booleanOption("aa_move_mod")) {      vMod=Math.min(vMod / 2,4);    }    toHit.addModifier(vMod,"velocity");  }  if (ae instanceof Aero) {    Aero aero=(Aero)ae;    int sensors=aero.getSensorHits();    if (!aero.isCapitalFighter()) {      if ((sensors > 0) && (sensors < 3)) {        toHit.addModifier(sensors,"sensor damage");      }      if (sensors > 2) {        toHit.addModifier(+5,"sensors destroyed");      }    }    int fcs=aero.getFCSHits();    if ((fcs > 0) && !aero.isCapitalFighter()) {      toHit.addModifier(fcs * 2,"fcs damage");    }    int pilothits=aero.getCrew().getHits();    if ((pilothits > 0) && !aero.isCapitalFighter()) {      toHit.addModifier(pilothits,"pilot hits");    }    if (aero.isOutControlTotal()) {      toHit.addModifier(+2,"out-of-control");    }    if (aero instanceof Jumpship) {      Jumpship js=(Jumpship)aero;      int cic=js.getCICHits();      if (cic > 0) {        toHit.addModifier(cic * 2,"CIC damage");      }    }    if (aero.isEvading()) {      toHit.addModifier(+2,"attacker is evading");    }    if ((weapon.getType() instanceof ISHGaussRifle) && (ae instanceof Aero) && !(ae instanceof Dropship)&& !(ae instanceof Jumpship)) {      toHit.addModifier(+1,"weapon to-hit modifier");    }    if (Compute.isAirToAir(ae,target)) {      if (target.isAirborneVTOLorWIGE()) {        toHit.addModifier(+5,"targeting non-aerospace airborne unit");      }      if (ae.isNOE()) {        if (ae.isOmni()) {          toHit.addModifier(+1,"attacker is flying at NOE (omni)");        } else {          toHit.addModifier(+2,"attacker is flying at NOE");        }      }    }    if (!ae.isAirborne() && !ae.isSpaceborne()) {      if (!(ae instanceof Dropship)) {        toHit.addModifier(+2,"grounded aero");      } else       if (!target.isAirborne() && !isArtilleryIndirect) {        toHit.addModifier(-2,"grounded dropships firing on ground units");      }    }    if (ae.usesWeaponBays()) {      if (wtype.getAtClass() == WeaponType.CLASS_LASER) {        for (        int wId : weapon.getBayWeapons()) {          Mounted bweap=ae.getEquipment(wId);          WeaponType bwtype=(WeaponType)bweap.getType();          if ((bwtype.getInternalName().contains("Heavy")) && (bwtype.getInternalName().contains("Laser"))) {            toHit.addModifier(+1,"bay contains heavy laser");            break;          }        }      } else       if (wtype.getAtClass() == WeaponType.CLASS_CAPITAL_MISSILE) {        boolean onlyBarracuda=true;        for (        int wId : weapon.getBayWeapons()) {          Mounted bweap=ae.getEquipment(wId);          Mounted bammo=bweap.getLinked();          if (bammo != null) {            AmmoType batype=(AmmoType)bammo.getType();            if (batype.getAmmoType() != AmmoType.T_BARRACUDA) {              onlyBarracuda=false;            }          }        }        if (onlyBarracuda) {          toHit.addModifier(-2,"barracuda missile");        }      } else       if (wtype.getAtClass() == WeaponType.CLASS_AR10) {        boolean onlyBarracuda=true;        for (        int wId : weapon.getBayWeapons()) {          Mounted bweap=ae.getEquipment(wId);          Mounted bammo=bweap.getLinked();          if (bammo != null) {            AmmoType batype=(AmmoType)bammo.getType();            if (!batype.hasFlag(AmmoType.F_AR10_BARRACUDA)) {              onlyBarracuda=false;            }          }        }        if (onlyBarracuda) {          toHit.addModifier(-2,"barracuda missile");        }      } else       if (wtype.getAtClass() == WeaponType.CLASS_LBX_AC) {        boolean onlyCluster=true;        for (        int wId : weapon.getBayWeapons()) {          Mounted bweap=ae.getEquipment(wId);          Mounted bammo=bweap.getLinked();          if (bammo != null) {            AmmoType batype=(AmmoType)bammo.getType();            if (batype.getMunitionType() != AmmoType.M_CLUSTER) {              onlyCluster=false;              break;            }          }        }        if (onlyCluster) {          toHit.addModifier(-1,"cluster ammo");        }      }    }  }  if (wtype.hasFlag(WeaponType.F_ANTI_SHIP) && (te != null) && (te.getWeight() < 500)) {    toHit.addModifier(4,"Anti-ship missile at a small target");  }  if (wtype.hasFlag(WeaponType.F_MASS_DRIVER)) {    toHit.addModifier(2,"Mass Driver to-hit Penalty");  }  if ((te instanceof Aero) && te.isAirborne()) {    Aero a=(Aero)te;    if ((a.getCurrentVelocity() == 0) && !(a.isSpheroid() && !game.getBoard().inSpace())) {      toHit.addModifier(-2,"target is not moving");    }    if (wtype.isCapital() && (wtype.getAtClass() != WeaponType.CLASS_CAPITAL_MISSILE) && (wtype.getAtClass() != WeaponType.CLASS_AR10)&& !te.isLargeCraft()) {      int aaaMod=0;      if (wtype.hasModes() && weapon.curMode().equals("AAA")) {        aaaMod=2;      }      if (wtype.isSubCapital()) {        toHit.addModifier(3 - aaaMod,"sub-capital weapon at small target");      } else {        toHit.addModifier(5 - aaaMod,"capital weapon at small target");      }    }    if (wtype.hasModes() && weapon.curMode().equals("AAA") && te.isLargeCraft()) {      toHit.addModifier(+1,"AAA mode at large craft");    }    if (wtype.hasModes() && weapon.curMode().equals("Bracket 80%")) {      toHit.addModifier(-1,"Bracketing 80%");    }    if (wtype.hasModes() && weapon.curMode().equals("Bracket 60%")) {      toHit.addModifier(-2,"Bracketing 60%");    }    if (wtype.hasModes() && weapon.curMode().equals("Bracket 40%")) {      toHit.addModifier(-3,"Bracketing 40%");    }    if (game.getOptions().booleanOption("stratops_sensor_shadow") && game.getBoard().inSpace()) {      for (      Entity en : Compute.getAdjacentEntitiesAlongAttack(ae.getPosition(),target.getPosition(),game)) {        if (!en.isEnemyOf(a) && en.isLargeCraft() && ((en.getWeight() - a.getWeight()) >= -100000.0)) {          toHit.addModifier(+1,"Sensor Shadow");          break;        }      }      for (      Entity en : game.getEntitiesVector(target.getPosition())) {        if (!en.isEnemyOf(a) && en.isLargeCraft() && !en.equals(a)&& ((en.getWeight() - a.getWeight()) >= -100000.0)) {          toHit.addModifier(+1,"Sensor Shadow");          break;        }      }    }  }  if (ae instanceof Tank) {    Tank tank=(Tank)ae;    if (tank.isCommanderHit()) {      if (ae instanceof VTOL) {        toHit.addModifier(+1,"copilot injured");      } else {        toHit.addModifier(+1,"commander injured");      }    }    int sensors=tank.getSensorHits();    if (sensors > 0) {      toHit.addModifier(sensors,"sensor damage");    }    if (tank.isStabiliserHit(weapon.getLocation())) {      toHit.addModifier(Compute.getAttackerMovementModifier(game,tank.getId()).getValue(),"stabiliser damage");    }  }  if (ae.hasFunctionalArmAES(weapon.getLocation()) && !weapon.isSplit()) {    toHit.addModifier(-1,"AES modifer");  }  if (ae.hasShield()) {    if (ae.hasPassiveShield(weapon.getLocation(),weapon.isRearMounted())) {      toHit.addModifier(+2,"weapon hampered by passive shield");    } else     if (ae.hasNoDefenseShield(weapon.getLocation())) {      toHit.addModifier(+1,"weapon hampered by shield");    }  }  if (game.getOptions().booleanOption("tacops_bap") && !isIndirect && (te != null)&& ae.hasBAP()&& (ae.getBAPRange() >= Compute.effectiveDistance(game,ae,te))&& !ComputeECM.isAffectedByECM(ae,ae.getPosition(),te.getPosition())&& (game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.WOODS) || game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.JUNGLE) || (los.getLightWoods() > 0)|| (los.getHeavyWoods() > 0)|| (los.getUltraWoods() > 0))) {    toHit.addModifier(-1,"target in/behind woods and attacker has BAP");  }  if (ae.hasQuirk(OptionsConstants.QUIRK_NEG_SENSOR_GHOSTS)) {    toHit.addModifier(+1,"sensor ghosts");  }  if (weapon.hasQuirk(OptionsConstants.QUIRK_WEAP_POS_ACCURATE)) {    toHit.addModifier(-1,"accurate weapon");  }  if (weapon.hasQuirk(OptionsConstants.QUIRK_WEAP_NEG_INACCURATE)) {    toHit.addModifier(+1,"inaccurate weapon");  }  if (ae.getCrew().getOptions().booleanOption("gunnery_laser") && wtype.hasFlag(WeaponType.F_ENERGY)) {    toHit.addModifier(-1,"Gunnery/Energy");  }  if (ae.getCrew().getOptions().booleanOption("gunnery_ballistic") && wtype.hasFlag(WeaponType.F_BALLISTIC)) {    toHit.addModifier(-1,"Gunnery/Ballistic");  }  if (ae.getCrew().getOptions().booleanOption("gunnery_missile") && wtype.hasFlag(WeaponType.F_MISSILE)) {    toHit.addModifier(-1,"Gunnery/Missile");  }  if (ae.getCrew().getOptions().stringOption("weapon_specialist").equals(wtype.getName())) {    toHit.addModifier(-2,"weapon specialist");  } else   if (ae.getCrew().getOptions().booleanOption("specialist")) {    if (wtype.hasFlag(WeaponType.F_ENERGY)) {      if (ae.getCrew().getOptions().stringOption("specialist").equals(Crew.SPECIAL_LASER)) {        toHit.addModifier(-1,"Laser Specialization");      } else {        toHit.addModifier(+1,"Unspecialized");      }    } else     if (wtype.hasFlag(WeaponType.F_BALLISTIC)) {      if (ae.getCrew().getOptions().stringOption("specialist").equals(Crew.SPECIAL_BALLISTIC)) {        toHit.addModifier(-1,"Ballistic Specialization");      } else {        toHit.addModifier(+1,"Unspecialized");      }    } else     if (wtype.hasFlag(WeaponType.F_MISSILE)) {      if (ae.getCrew().getOptions().stringOption("specialist").equals(Crew.SPECIAL_MISSILE)) {        toHit.addModifier(-1,"Missile Specialization");      } else {        toHit.addModifier(+1,"Unspecialized");      }    }  }  if (te != null) {    if (te.getCrew().getOptions().booleanOption("urban_guerrilla") && (game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.PAVEMENT) || game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.ROAD) || game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.RUBBLE)|| game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.BUILDING)|| game.getBoard().getHex(te.getPosition()).containsTerrain(Terrains.ROUGH))) {      toHit.addModifier(+1,"urban guerrilla");    }    if (te.getCrew().getOptions().booleanOption("shaky_stick") && te.isAirborne() && (!ae.isAirborne() || !ae.isAirborneVTOLorWIGE())) {      toHit.addModifier(+1,"Shaky Stick");    }  }  if (ae.getCrew().getOptions().booleanOption("vdni") || ae.getCrew().getOptions().booleanOption("bvdni")) {    toHit.addModifier(-1,"VDNI");  }  if ((ae instanceof Infantry) && !(ae instanceof BattleArmor)) {    if (ae.getCrew().getOptions().booleanOption("pl_masc") && ((ae.moved == EntityMovementType.MOVE_WALK) || (ae.moved == EntityMovementType.MOVE_RUN))) {      toHit.addModifier(+1,"PL-MASC");    }    if (ae.getCrew().getOptions().booleanOption("cyber_eye_tele") && !(wtype instanceof InfantryAttack)) {      toHit.addModifier(-1,"MD laser-sighting");    }  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_INDUSTRIAL)) {    toHit.addModifier(1,"industrial cockpit without advanced fire control");  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_PRIMITIVE_INDUSTRIAL)) {    toHit.addModifier(2,"primitive industrial cockpit without advanced fire control");  }  if ((ae instanceof Mech) && (((Mech)ae).getCockpitType() == Mech.COCKPIT_PRIMITIVE) && ((Mech)ae).isIndustrial()) {    toHit.addModifier(1,"primitive industrial cockpit with advanced fire control");  }  if ((ae instanceof SupportTank) || (ae instanceof SupportVTOL)) {    if (!ae.hasWorkingMisc(MiscType.F_BASIC_FIRECONTROL) && !ae.hasWorkingMisc(MiscType.F_ADVANCED_FIRECONTROL)) {      toHit.addModifier(2,"support vehicle without fire control");    } else     if (ae.hasWorkingMisc(MiscType.F_BASIC_FIRECONTROL) && !(ae.hasWorkingMisc(MiscType.F_ADVANCED_FIRECONTROL))) {      toHit.addModifier(1,"support vehicle with basic fire control");    }  }  if (!isECMAffected && (atype != null) && ((atype.getAmmoType() == AmmoType.T_LRM) || (atype.getAmmoType() == AmmoType.T_MML) || (atype.getAmmoType() == AmmoType.T_SRM))&& (atype.getMunitionType() == AmmoType.M_LISTEN_KILL)&& !((te != null) && te.isClan())) {    toHit.addModifier(-1,"Listen-Kill ammo");  }  int aElev=ae.getElevation();  int tElev=target.getElevation();  int aAlt=ae.getAltitude();  int tAlt=target.getAltitude();  int distance=Compute.effectiveDistance(game,ae,target);  if (!isArtilleryIndirect) {    toHit.append(AbstractAttackAction.nightModifiers(game,target,atype,ae,true));  }  TargetRoll weatherToHitMods=new TargetRoll();  int weatherMod=game.getPlanetaryConditions().getWeatherHitPenalty(ae);  if ((weatherMod != 0) && !game.getBoard().inSpace()) {    weatherToHitMods.addModifier(weatherMod,game.getPlanetaryConditions().getWeatherDisplayableName());  }  if (!game.getBoard().inSpace()) {    int windCond=game.getPlanetaryConditions().getWindStrength();    if (windCond == PlanetaryConditions.WI_MOD_GALE) {      if (wtype.hasFlag(WeaponType.F_MISSILE)) {        weatherToHitMods.addModifier(1,PlanetaryConditions.getWindDisplayableName(windCond));      }    } else     if (windCond == PlanetaryConditions.WI_STRONG_GALE) {      if (wtype.hasFlag(WeaponType.F_BALLISTIC)) {        weatherToHitMods.addModifier(1,PlanetaryConditions.getWindDisplayableName(windCond));      } else       if (wtype.hasFlag(WeaponType.F_MISSILE)) {        weatherToHitMods.addModifier(2,PlanetaryConditions.getWindDisplayableName(windCond));      }    } else     if (windCond == PlanetaryConditions.WI_STORM) {      if (wtype.hasFlag(WeaponType.F_BALLISTIC)) {        weatherToHitMods.addModifier(2,PlanetaryConditions.getWindDisplayableName(windCond));      } else       if (wtype.hasFlag(WeaponType.F_MISSILE)) {        weatherToHitMods.addModifier(3,PlanetaryConditions.getWindDisplayableName(windCond));      }    } else     if (windCond == PlanetaryConditions.WI_TORNADO_F13) {      if (wtype.hasFlag(WeaponType.F_ENERGY)) {        weatherToHitMods.addModifier(2,PlanetaryConditions.getWindDisplayableName(windCond));      } else {        weatherToHitMods.addModifier(3,PlanetaryConditions.getWindDisplayableName(windCond));      }    } else     if (windCond == PlanetaryConditions.WI_TORNADO_F4) {      weatherToHitMods.addModifier(3,PlanetaryConditions.getWindDisplayableName(windCond));    }  }  if (wtype.hasFlag(WeaponType.F_ENERGY) && !game.getBoard().inSpace() && (game.getPlanetaryConditions().getFog() == PlanetaryConditions.FOG_HEAVY)) {    weatherToHitMods.addModifier(1,"heavy fog");  }  if (wtype.hasFlag(WeaponType.F_ENERGY) && !game.getBoard().inSpace() && game.getPlanetaryConditions().isSandBlowing()&& (game.getPlanetaryConditions().getWindStrength() > PlanetaryConditions.WI_LIGHT_GALE)) {    weatherToHitMods.addModifier(1,"blowing sand");  }  if (weatherToHitMods.getValue() > 0) {    if ((ae.getCrew() != null) && ae.getCrew().getOptions().booleanOption("weathered")) {      weatherToHitMods.addModifier(-1,"weathered");    }    toHit.append(weatherToHitMods);  }  if (!game.getBoard().inSpace()) {    int mod=(int)Math.floor(Math.abs((game.getPlanetaryConditions().getGravity() - 1.0f) / 0.2f));    if ((mod != 0) && (wtype.hasFlag(WeaponType.F_BALLISTIC) || wtype.hasFlag(WeaponType.F_MISSILE))) {      toHit.addModifier(mod,"gravity");    }  }  if (game.getPlanetaryConditions().hasEMI() && !((ae instanceof Infantry) && !(ae instanceof BattleArmor))) {    toHit.addModifier(2,"EMI");  }  if (ae.isAirborne() && !(ae instanceof Aero)) {    toHit.addModifier(+2,"dropping");    toHit.addModifier(+3,"jumping");  }  if (isArtilleryDirect) {    if (!isArtilleryFLAK) {      toHit.addModifier(4,"direct artillery modifer");    }    toHit.append(Compute.getAttackerMovementModifier(game,attackerId));    toHit.append(losMods);    toHit.append(Compute.getSecondaryTargetMod(game,ae,target));    toHit.append(Compute.getDamageWeaponMods(ae,weapon));    if (ae.getHeatFiringModifier() != 0) {      toHit.addModifier(ae.getHeatFiringModifier(),"heat");    }    if (wtype.getToHitModifier() != 0) {      toHit.addModifier(wtype.getToHitModifier(),"weapon to-hit modifier");    }    if (usesAmmo && (atype != null) && (atype.getToHitModifier() != 0)) {      toHit.addModifier(atype.getToHitModifier(),"ammunition to-hit modifier");    }    if (isHoming) {      return new ToHitData(4,"Homing shot");    }    if (game.getEntity(attackerId).getOwner().getArtyAutoHitHexes().contains(target.getPosition()) && !isArtilleryFLAK) {      return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Artillery firing at designated artillery target.");    }    return toHit;  }  if (isArtilleryIndirect) {    if (isHoming) {      return new ToHitData(4,"Homing shot (will miss if TAG misses)");    }    if (game.getEntity(attackerId).getOwner().getArtyAutoHitHexes().contains(target.getPosition())) {      return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Artillery firing at designated artillery target.");    }    int mod=7;    if (ae.getCrew().getOptions().booleanOption("oblique_attacker")) {      mod--;    }    toHit.addModifier(mod,"indirect artillery modifier");    int adjust=ae.aTracker.getModifier(weapon,target.getPosition());    boolean spotterIsForwardObserver=ae.aTracker.getSpotterHasForwardObs();    if (adjust == TargetRoll.AUTOMATIC_SUCCESS) {      return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Artillery firing at target that's been hit before.");    } else     if (adjust != 0) {      toHit.addModifier(adjust,"adjusted fire");      if (spotterIsForwardObserver) {        toHit.addModifier(-2,"Forward Observer");      }    }    if (ae.isAirborne()) {      if (ae.getAltitude() > 6) {        toHit.addModifier(+2,"altitude");      } else       if (ae.getAltitude() > 3) {        toHit.addModifier(+1,"altitude");      }    }    return toHit;  }  if ((distance == 1) && ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK)|| (target.getTargetType() == Targetable.TYPE_FUEL_TANK_IGNITE)|| (target instanceof GunEmplacement))) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting adjacent building.");  }  toHit.setThruBldg(los.getThruBldg());  if ((null != los.getThruBldg()) && ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK)|| (target.getTargetType() == Targetable.TYPE_FUEL_TANK_IGNITE)|| (target instanceof GunEmplacement))) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Targeting building from inside (are you SURE this is a good idea?).");  }  if ((los.getThruBldg() == null) || !los.getTargetPosition().equals(ae.getPosition())) {    toHit.append(Compute.getRangeMods(game,ae,weaponId,target));  }  if (ae.hasQuirk(OptionsConstants.QUIRK_POS_ANTI_AIR) && (target instanceof Entity)) {    if (target.isAirborneVTOLorWIGE() || target.isAirborne()) {      toHit.addModifier(-2,"anti-air targetting system vs. aerial unit");    }  }  if (Compute.isAirToGround(ae,target)) {    if (wtype.hasFlag(WeaponType.F_ALT_BOMB)) {      toHit.addModifier(ae.getAltitude(),"bombing altitude");      if (ae.getCrew().getOptions().booleanOption("golden_goose")) {        toHit.addModifier(-2,"Golden Goose");      }    } else     if (isStrafing) {      toHit.addModifier(+4,"strafing");      if (ae.getAltitude() == 1) {        toHit.addModifier(+2,"strafing at NOE");      }      if (ae.getAltitude() == 1) {        Coords prevCoords=ae.passedThroughPrevious(target.getPosition());        IHex prevHex=game.getBoard().getHex(prevCoords);        toHit.append(Compute.getStrafingTerrainModifier(game,eistatus,prevHex));      }    } else {      toHit.addModifier(+2,"air to ground strike");      if (ae.getCrew().getOptions().booleanOption("golden_goose")) {        if (wtype.hasFlag(WeaponType.F_DIVE_BOMB)) {          toHit.addModifier(-2,"Golden Goose");        } else {          toHit.addModifier(-1,"Golden Goose");        }      }    }  }  if ((null != te) && Compute.isAirToAir(ae,target)) {    for (Enumeration<EntityAction> i=game.getActions(); i.hasMoreElements(); ) {      EntityAction ea=i.nextElement();      if (!(ea instanceof WeaponAttackAction)) {        continue;      }      WeaponAttackAction prevAttack=(WeaponAttackAction)ea;      if ((prevAttack.getEntityId() == te.getId()) && prevAttack.isAirToGround(game)) {        toHit.addModifier(-3,"target making air-to-ground attack");        break;      }    }  }  if ((te != null) && te.hasQuirk(OptionsConstants.QUIRK_POS_LOW_PROFILE)) {    toHit.addModifier(1,"narrow/low profile");  }  if (!isAttackerInfantry && (te != null) && (te instanceof BattleArmor)) {    toHit.addModifier(1,"battle armor target");  }  if ((te instanceof Infantry) && !(te instanceof BattleArmor) && ((Infantry)te).isSquad()) {    toHit.addModifier(1,"infantry squad target");  }  if ((te != null) && (te instanceof MechWarrior)) {    toHit.addModifier(2,"ejected MechWarrior target");  }  if (isIndirect) {    if (ae.getCrew().getOptions().booleanOption("oblique_attacker")) {      toHit.addModifier(0,"indirect fire");    } else {      toHit.addModifier(1,"indirect fire");    }  }  if (wtype instanceof MekMortarWeapon) {    if (isIndirect) {      if (spotter == null) {        toHit.addModifier(2,"no spotter");      }    } else {      toHit.addModifier(3,"direct fire");    }  }  toHit.append(Compute.getAttackerMovementModifier(game,attackerId));  if ((te != null) && !isPointblankShot) {    ToHitData thTemp=Compute.getTargetMovementModifier(game,target.getTargetId());    toHit.append(thTemp);    toSubtract+=thTemp.getValue();    if ((atype != null) && ((atype.getAmmoType() == AmmoType.T_LRM) || (atype.getAmmoType() == AmmoType.T_MML) || (atype.getAmmoType() == AmmoType.T_NLRM)|| (atype.getAmmoType() == AmmoType.T_MEK_MORTAR)) && (atype.getMunitionType() == AmmoType.M_SEMIGUIDED)&& (te.getTaggedBy() != -1)) {      int nAdjust=thTemp.getValue();      if (nAdjust > 0) {        toHit.append(new ToHitData(-nAdjust,"Semi-guided ammo vs tagged target"));      }    } else     if ((atype != null) && ((atype.getAmmoType() == AmmoType.T_AC) || (atype.getAmmoType() == AmmoType.T_LAC)) && (atype.getMunitionType() == AmmoType.M_PRECISION)) {      int nAdjust=Math.min(2,thTemp.getValue());      if (nAdjust > 0) {        toHit.append(new ToHitData(-nAdjust,"Precision Ammo"));      }    }  }  if (weapon.isKindRapidFire() && weapon.curMode().equals("Rapid")) {    toHit.addModifier(1,"AC rapid fire mode");  }  if ((atype != null) && ((atype.getAmmoType() == AmmoType.T_AC) || (atype.getAmmoType() == AmmoType.T_LAC)) && (atype.getMunitionType() == AmmoType.M_ARMOR_PIERCING)) {    toHit.addModifier(1,"Armor-Piercing Ammo");  }  if (isIndirect) {    if ((atype != null) && ((atype.getAmmoType() == AmmoType.T_LRM) || (atype.getAmmoType() == AmmoType.T_MML) || (atype.getAmmoType() == AmmoType.T_NLRM)|| (atype.getAmmoType() == AmmoType.T_MEK_MORTAR)) && (atype.getMunitionType() == AmmoType.M_SEMIGUIDED)) {      boolean targetTagged=false;      if (te != null) {        targetTagged=te.getTaggedBy() != -1;      } else {        for (        TagInfo ti : game.getTagInfo()) {          if (target.getTargetId() == ti.target.getTargetId()) {            targetTagged=true;          }        }      }      if (targetTagged) {        toHit.addModifier(-1,"semiguided ignores spotter " + "movement & indirect fire penalties");      }    } else     if (!narcSpotter && (spotter != null)) {      toHit.append(Compute.getSpotterMovementModifier(game,spotter.getId()));      if (spotter.isAttackingThisTurn()) {        toHit.addModifier(1,"spotter is making an attack this turn");      }    }  }  toHit.append(Compute.getAttackerTerrainModifier(game,attackerId));  if ((target.getTargetType() != Targetable.TYPE_MINEFIELD_DELIVER) && !isPointblankShot) {    toHit.append(Compute.getTargetTerrainModifier(game,target,eistatus,inSameBuilding,underWater));    toSubtract+=Compute.getTargetTerrainModifier(game,target,eistatus,inSameBuilding,underWater).getValue();  }  IHex targHex=game.getBoard().getHex(target.getPosition());  int partialWaterLevel=1;  if ((te instanceof Mech) && ((Mech)te).isSuperHeavy()) {    partialWaterLevel=2;  }  if ((te != null) && targHex.containsTerrain(Terrains.WATER) && (targHex.terrainLevel(Terrains.WATER) == partialWaterLevel)&& (targEl == 0)&& (te.height() > 0)) {    los.setTargetCover(los.getTargetCover() | LosEffects.COVER_HORIZONTAL);    losMods=los.losModifiers(game,eistatus,underWater);  }  if ((target instanceof Infantry) && !wtype.hasFlag(WeaponType.F_FLAMER)) {    if (targHex.containsTerrain(Terrains.FORTIFIED) || (((Infantry)target).getDugIn() == Infantry.DUG_IN_COMPLETE)) {      toHit.addModifier(2,"infantry dug in");    }  }  toHit.append(losMods);  if ((te != null) && te.isHullDown()) {    if ((te instanceof Mech) && (los.getTargetCover() > LosEffects.COVER_NONE)) {      toHit.addModifier(2,"Hull down target");    } else     if ((te instanceof Tank) && targHex.containsTerrain(Terrains.FORTIFIED)) {      int moveInDirection;      if (!((Tank)te).isBackedIntoHullDown()) {        moveInDirection=ToHitData.SIDE_FRONT;      } else {        moveInDirection=ToHitData.SIDE_REAR;      }      if ((te.sideTable(ae.getPosition()) == moveInDirection) || (te.sideTable(ae.getPosition()) == ToHitData.SIDE_LEFT) || (te.sideTable(ae.getPosition()) == ToHitData.SIDE_RIGHT)) {        toHit.addModifier(2,"Hull down target");      }    }  }  if (!isNemesisConfused && !wtype.hasFlag(WeaponType.F_ALT_BOMB) && !isWeaponFieldGuns&& !isStrafing) {    toHit.append(Compute.getSecondaryTargetMod(game,ae,target));  }  if (ae.getHeatFiringModifier() != 0) {    toHit.addModifier(ae.getHeatFiringModifier(),"heat");  }  toHit.append(Compute.getDamageWeaponMods(ae,weapon));  boolean mekMortarMunitionsIgnoreImmobile=weapon.getType().hasFlag(WeaponType.F_MEK_MORTAR) && (atype != null) && (atype.getMunitionType() == AmmoType.M_AIRBURST);  if (!(wtype instanceof ArtilleryCannonWeapon) && !mekMortarMunitionsIgnoreImmobile) {    ToHitData immobileMod=Compute.getImmobileMod(target,aimingAt,aimingMode);    if ((null != te) && !te.isAirborne() && !te.isSpaceborne()&& (te instanceof Aero)&& ((Aero)te).isSpheroid()) {      immobileMod=new ToHitData(-4,"immobile dropship");    }    if (immobileMod != null) {      toHit.append(immobileMod);      toSubtract+=immobileMod.getValue();    }  }  toHit.append(Compute.getProneMods(game,ae,weaponId));  ToHitData proneMod=null;  if ((te != null) && te.isProne()) {    if (distance <= 1) {      proneMod=new ToHitData(-2,"target prone and adjacent");    } else {      proneMod=new ToHitData(1,"target prone and at range");    }  }  if (proneMod != null) {    toHit.append(proneMod);    toSubtract+=proneMod.getValue();  }  if (wtype instanceof VariableSpeedPulseLaserWeapon) {    int nRange=ae.getPosition().distance(target.getPosition());    int[] nRanges=wtype.getRanges(weapon);    int modifier=wtype.getToHitModifier();    if (nRange <= nRanges[RangeType.RANGE_SHORT]) {      modifier+=RangeType.RANGE_SHORT;    } else     if (nRange <= nRanges[RangeType.RANGE_MEDIUM]) {      modifier+=RangeType.RANGE_MEDIUM;    } else     if (nRange <= nRanges[RangeType.RANGE_LONG]) {      modifier+=RangeType.RANGE_LONG;    } else {      modifier=0;    }    toHit.addModifier(modifier,"weapon to-hit modifier");  } else   if (wtype instanceof ISBombastLaser) {    double damage=Compute.dialDownDamage(weapon,wtype);    damage=Math.ceil((damage - 7) / 2);    if (damage > 0) {      toHit.addModifier((int)damage,"weapon to-hit modifier");    }  } else   if (wtype.getToHitModifier() != 0) {    toHit.addModifier(wtype.getToHitModifier(),"weapon to-hit modifier");  }  boolean isFlakAttack=!game.getBoard().inSpace() && (te != null) && (te.isAirborne() || te.isAirborneVTOLorWIGE())&& (atype != null)&& ((((atype.getAmmoType() == AmmoType.T_AC_LBX) || (atype.getAmmoType() == AmmoType.T_AC_LBX_THB) || (atype.getAmmoType() == AmmoType.T_SBGAUSS)) && (atype.getMunitionType() == AmmoType.M_CLUSTER)) || (atype.getMunitionType() == AmmoType.M_FLAK) || (atype.getAmmoType() == AmmoType.T_HAG));  if (isFlakAttack) {    if (atype.getAmmoType() == AmmoType.T_HAG) {      toHit.addModifier(-3,"HAG flak to-hit modifier");    } else {      toHit.addModifier(-2,"flak to-hit modifier");    }  }  if (usesAmmo && (atype != null) && (atype.getToHitModifier() != 0)) {    toHit.addModifier(atype.getToHitModifier(),"ammunition to-hit modifier");  }  if ((atype != null) && ((atype.getAmmoType() == AmmoType.T_AAA_MISSILE) || (atype.getAmmoType() == AmmoType.T_LAA_MISSILE)) && Compute.isAirToGround(ae,target)) {    toHit.addModifier(+4,"AAA missile at ground target");    if (ae.getAltitude() < 4) {      toHit.addModifier(+3,"AAA missile below altitude 4");    }  }  if (isINarcGuided) {    toHit.addModifier(-1,"iNarc homing pod");  }  if (bArtemisV) {    toHit.addModifier(-1,"Artemis V FCS");  }  if (isHaywireINarced) {    toHit.addModifier(1,"iNarc Haywire pod");  }  if ((toHit.getValue() != TargetRoll.IMPOSSIBLE) && ((wtype.getAmmoType() == AmmoType.T_SCREEN_LAUNCHER) || (wtype instanceof ScreenLauncherBayWeapon))) {    return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Screen launchers always hit");  }  if (bHeatSeeking) {    if (te == null) {      if ((target.getTargetType() == Targetable.TYPE_BUILDING) || (target.getTargetType() == Targetable.TYPE_BLDG_IGNITE) || (target.getTargetType() == Targetable.TYPE_FUEL_TANK)|| (target.getTargetType() == Targetable.TYPE_FUEL_TANK_IGNITE)|| (target instanceof GunEmplacement)) {        IHex hexTarget=game.getBoard().getHex(target.getPosition());        if (hexTarget.containsTerrain(Terrains.FIRE)) {          toHit.addModifier(-2,"ammunition to-hit modifier");        }      }    } else     if ((te.isAirborne()) && (toHit.getSideTable() == ToHitData.SIDE_REAR)) {      toHit.addModifier(-2,"ammunition to-hit modifier");    } else     if (te.heat == 0) {      toHit.addModifier(1,"ammunition to-hit modifier");    } else {      toHit.addModifier(-te.getHeatMPReduction(),"ammunition to-hit modifier");    }    if (LosEffects.hasFireBetween(ae.getPosition(),target.getPosition(),game)) {      toHit.addModifier(2,"fire between target and attacker");    }  }  if (bFTL) {    toHit.addModifier(2,"ammunition to-hit modifier");  }  if (bApollo) {    toHit.addModifier(-1,"Apollo FCS");  }  if ((ae instanceof Infantry) && ae.hasWorkingMisc(MiscType.F_TOOLS,MiscType.S_HEAVY_ARMOR)) {    toHit.addModifier(1,"Heavy Armor");  }  if (ae.isVoidSigActive()) {    toHit.addModifier(1,"Void signature active");  }  if ((aimingMode == IAimingModes.AIM_MODE_TARG_COMP) && (aimingAt != Entity.LOC_NONE)) {    if (ae.hasActiveEiCockpit()) {      if (ae.hasTargComp()) {        toHit.addModifier(2,"aiming with targeting computer & EI system");      } else {        toHit.addModifier(6,"aiming with EI system");      }    } else {      toHit.addModifier(3,"aiming with targeting computer");    }  } else {    boolean usesLBXCluster=usesAmmo && (atype != null) && (atype.getAmmoType() == AmmoType.T_AC_LBX || atype.getAmmoType() == AmmoType.T_AC_LBX_THB)&& atype.getMunitionType() == AmmoType.M_CLUSTER;    boolean usesHAGFlak=usesAmmo && (atype != null) && atype.getAmmoType() == AmmoType.T_HAG && isFlakAttack;    boolean isSBGauss=usesAmmo && (atype != null) && atype.getAmmoType() == AmmoType.T_SBGAUSS;    boolean isFlakAmmo=usesAmmo && (atype != null) && (atype.getMunitionType() == AmmoType.M_FLAK);    if (ae.hasTargComp() && wtype.hasFlag(WeaponType.F_DIRECT_FIRE) && !wtype.hasFlag(WeaponType.F_CWS)&& !wtype.hasFlag(WeaponType.F_TASER)&& (!usesAmmo || !(usesLBXCluster || usesHAGFlak || isSBGauss|| isFlakAmmo))) {      toHit.addModifier(-1,"targeting computer");    }  }  if ((null != los.getThruBldg()) && (aElev != tElev)) {    if (target instanceof Tank) {      toHit.setSideTable(ToHitData.SIDE_RANDOM);    } else     if (target instanceof Mech) {      if (aElev > tElev) {        toHit.setHitTable(ToHitData.HIT_ABOVE);      } else {        toHit.setHitTable(ToHitData.HIT_BELOW);      }    }  }  if (los.getTargetCover() != LosEffects.COVER_NONE) {    if (underWater && (targHex.containsTerrain(Terrains.WATER) && (targEl == 0) && (te.height() > 0))) {      toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);      toHit.setCover(LosEffects.COVER_UPPER);    } else {      if (game.getOptions().booleanOption("tacops_partial_cover")) {        toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);        toHit.setCover(los.getTargetCover());      } else {        toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);        toHit.setCover(LosEffects.COVER_HORIZONTAL);      }      toHit.setDamagableCoverTypePrimary(los.getDamagableCoverTypePrimary());      toHit.setCoverLocPrimary(los.getCoverLocPrimary());      toHit.setCoverDropshipPrimary(los.getCoverDropshipPrimary());      toHit.setCoverBuildingPrimary(los.getCoverBuildingPrimary());      toHit.setDamagableCoverTypeSecondary(los.getDamagableCoverTypeSecondary());      toHit.setCoverLocSecondary(los.getCoverLocSecondary());      toHit.setCoverDropshipSecondary(los.getCoverDropshipSecondary());      toHit.setCoverBuildingSecondary(los.getCoverBuildingSecondary());    }  }  if (game.getOptions().booleanOption("tacops_called_shots")) {    int call=weapon.getCalledShot().getCall();    if ((call > CalledShot.CALLED_NONE) && (aimingMode != IAimingModes.AIM_MODE_NONE)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"you can't combine aimed shots and called shots");    }switch (call) {case CalledShot.CALLED_NONE:      break;case CalledShot.CALLED_HIGH:    toHit.addModifier(+3,"called shot, high");  toHit.setHitTable(ToHitData.HIT_ABOVE);break;case CalledShot.CALLED_LOW:if (los.getTargetCover() == LosEffects.COVER_HORIZONTAL) {return new ToHitData(TargetRoll.IMPOSSIBLE,"low called shots not possible in partial cover");}toHit.addModifier(+3,"called shot, low");toHit.setHitTable(ToHitData.HIT_BELOW);break;case CalledShot.CALLED_LEFT:toHit.addModifier(+3,"called shot, left");break;case CalledShot.CALLED_RIGHT:toHit.addModifier(+3,"called shot, right");break;}if (call != CalledShot.CALLED_NONE) {toSubtract+=3;}}if (underWater && targHex.containsTerrain(Terrains.WATER) && (null != te)&& te.isSurfaceNaval()) {toHit.setHitTable(ToHitData.HIT_UNDERWATER);}if (isAttackerInfantry && (0 == distance)) {toHit.setSideTable(ToHitData.SIDE_FRONT);} else {toHit.setSideTable(Compute.targetSideTable(ae,target,weapon.getCalledShot().getCall()));}if (Compute.isAirToAir(ae,target)) {if ((aAlt - tAlt) > 2) {toHit.setHitTable(ToHitData.HIT_ABOVE);} else if ((tAlt - aAlt) > 2) {toHit.setHitTable(ToHitData.HIT_BELOW);} else if (((aAlt - tAlt) > 0) && ((te instanceof Aero) && ((Aero)te).isSpheroid())) {toHit.setHitTable(ToHitData.HIT_ABOVE);} else if (((aAlt - tAlt) < 0) && ((te instanceof Aero) && ((Aero)te).isSpheroid())) {toHit.setHitTable(ToHitData.HIT_BELOW);}}if (Compute.isGroundToAir(ae,target) && ((aAlt - tAlt) > 2)) {toHit.setHitTable(ToHitData.HIT_BELOW);}if (target.isAirborne() && (target instanceof Aero)) {if (!(((Aero)target).isSpheroid() && !game.getBoard().inSpace())) {int side=toHit.getSideTable();if ((target instanceof Aero) && game.useVectorMove()) {boolean usePrior=false;Coords attackPos=ae.getPosition();if (game.getBoard().inSpace() && ae.getPosition().equals(target.getPosition())) {if (((Aero)ae).shouldMoveBackHex((Aero)target)) {attackPos=ae.getPriorPosition();}usePrior=((Aero)target).shouldMoveBackHex((Aero)ae);}side=((Entity)target).chooseSide(attackPos,usePrior);}if (side == ToHitData.SIDE_FRONT) {toHit.addModifier(+1,"attack against nose");}if ((side == ToHitData.SIDE_LEFT) || (side == ToHitData.SIDE_RIGHT)) {toHit.addModifier(+2,"attack against side");}}}if (target instanceof Entity) {int grapple=((Entity)target).getGrappled();if (grapple != Entity.NONE) {if ((grapple == ae.getId()) && (((Entity)target).getGrappleSide() == Entity.GRAPPLE_BOTH)) {toHit.addModifier(-4,"target grappled");} else if ((grapple == ae.getId()) && (((Entity)target).getGrappleSide() != Entity.GRAPPLE_BOTH)) {toHit.addModifier(-2,"target grappled (Chain Whip)");} else if (!exchangeSwarmTarget) {toHit.addModifier(1,"CQC, possible friendly fire");} else {toHit.addModifier(-1,"friendly fire");return toHit;}}}if (exchangeSwarmTarget) {toHit.addModifier(-toSubtract,"original target mods");toHit.append(Compute.getImmobileMod(swarmSecondaryTarget,aimingAt,aimingMode));toHit.append(Compute.getTargetTerrainModifier(game,game.getTarget(swarmSecondaryTarget.getTargetType(),swarmSecondaryTarget.getTargetId()),eistatus,inSameBuilding,underWater));toHit.setCover(LosEffects.COVER_NONE);distance=Compute.effectiveDistance(game,ae,swarmSecondaryTarget);toHit.setSideTable(Compute.targetSideTable(ae,swarmSecondaryTarget));if (weapon.getCalledShot().getCall() != CalledShot.CALLED_NONE) {weapon.getCalledShot().reset();toHit.setHitTable(ToHitData.HIT_NORMAL);}LosEffects swarmlos;if (swarmPrimaryTarget.getTargetType() != Targetable.TYPE_ENTITY) {swarmlos=LosEffects.calculateLos(game,swarmSecondaryTarget.getTargetId(),target);} else {swarmlos=LosEffects.calculateLos(game,swarmPrimaryTarget.getTargetId(),swarmSecondaryTarget);}if (swarmlos.getTargetCover() != LosEffects.COVER_NONE) {if (game.getOptions().booleanOption("tacops_partial_cover")) {toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);toHit.setCover(swarmlos.getTargetCover());} else {toHit.setHitTable(ToHitData.HIT_PARTIAL_COVER);toHit.setCover(LosEffects.COVER_HORIZONTAL);}}targHex=game.getBoard().getHex(swarmSecondaryTarget.getPosition());targEl=swarmSecondaryTarget.relHeight();if (swarmSecondaryTarget.getTargetType() == Targetable.TYPE_ENTITY) {Entity oldEnt=game.getEntity(swarmSecondaryTarget.getTargetId());toHit.append(Compute.getTargetMovementModifier(game,oldEnt.getId()));partialWaterLevel=1;if ((te instanceof Mech) && ((Mech)te).isSuperHeavy()) {partialWaterLevel=2;}if (targHex.containsTerrain(Terrains.WATER) && (targHex.terrainLevel(Terrains.WATER) == partialWaterLevel) && (targEl == 0)&& (oldEnt.height() > 0)) {toHit.setCover(toHit.getCover() | LosEffects.COVER_HORIZONTAL);}if (oldEnt.isProne()) {if (distance <= 1) {proneMod=new ToHitData(-2,"target prone and adjacent");} else {proneMod=new ToHitData(1,"target prone and at range");}}toHit.append(proneMod);if (!isECMAffected && (atype != null) && !oldEnt.isEnemyOf(ae)&& !(oldEnt.getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.SYSTEM_SENSORS,Mech.LOC_HEAD) > 0)&& (atype.getMunitionType() == AmmoType.M_SWARM_I)) {toHit.addModifier(+2,"Swarm-I at friendly unit with intact sensors");}}}if (ae.getTsempEffect() == TSEMPWeapon.TSEMP_EFFECT_INTERFERENCE) {toHit.addModifier(+2,"attacker has TSEMP interference");}if (weapon.getType().hasFlag(WeaponType.F_VGL)) {Coords c=ae.getPosition().translated(weapon.getFacing());if ((target instanceof HexTarget) && target.getPosition().equals(c)) {return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"Vehicular " + "grenade launchers automatically hit all units in " + "the 3 adjacent hexes of their firing arc!");}}if ((te instanceof Infantry) && ((Infantry)te).isTakingCover()) {if (te.getPosition().direction(ae.getPosition()) == te.getFacing()) {toHit.addModifier(+3,"firing through cover");}}if ((ae instanceof Infantry) && ((Infantry)ae).isTakingCover()) {if (ae.getPosition().direction(te.getPosition()) == ae.getFacing()) {toHit.addModifier(+1,"firing through cover");}}return toHit;}  }
class C{  public static void assertEquals(double[][] expected,double[][] actual){  Assert.assertEquals(expected.length,actual.length);  for (int i=0; i < expected.length; i++) {    Assert.assertEquals(expected[i].length,actual[i].length);    for (int j=0; j < expected[i].length; j++) {      assertEquals(expected[i][j],actual[i][j]);    }  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.otto_send:    BusProvider.getInstance().post(new OttoEvent("TextView"));  break;}}  }
class C{  public static Map<String,String> readStringValues(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    return readStringValues(systemRoot,hkey,key);  } else   if (hkey == HKEY_CURRENT_USER) {    return readStringValues(userRoot,hkey,key);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  public boolean isOnline(){  return mOnline;}  }
class C{  public boolean hasOrgSymbol(){  return hasExtension(OrgSymbol.class);}  }
class C{  public GetDataMessage(NetworkParameters params,byte[] payload,MessageSerializer serializer,int length) throws ProtocolException {  super(params,payload,serializer,length);}  }
class C{  @Override public void onResume(){  super.onResume();  final SharedPreferences sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());  String sortOrder=sharedPref.getString(Constants.KEY_PREF_SORT_ORDER_LISTS,Constants.ORDER_BY_KEY);  Query orderedActiveUserListsRef;  Firebase activeListsRef=new Firebase(Constants.FIREBASE_URL_USER_LISTS).child(mEncodedEmail);  if (sortOrder.equals(Constants.ORDER_BY_KEY)) {    orderedActiveUserListsRef=activeListsRef.orderByKey();  } else {    orderedActiveUserListsRef=activeListsRef.orderByChild(sortOrder);  }  mActiveListAdapter=new ActiveListAdapter(getActivity(),ShoppingList.class,R.layout.single_active_list,orderedActiveUserListsRef,mEncodedEmail);  mListView.setAdapter(mActiveListAdapter);}  }
class C{  public FactoryDto createFactory(CreateFactoryParams createFactoryParams){  if (createFactoryParams != null && createFactoryParams.codenvyJsonFileLocation() != null) {    String factoryJsonContent=URLFetcher.fetch(createFactoryParams.codenvyJsonFileLocation());    if (!Strings.isNullOrEmpty(factoryJsonContent)) {      try {        final ByteArrayInputStream contentStream=new ByteArrayInputStream(factoryJsonContent.getBytes(UTF_8));        final InputStream newStream=factoryAdapter.adapt(contentStream);        factoryJsonContent=CharStreams.toString(new InputStreamReader(newStream,UTF_8));      } catch (      IOException x) {        throw new IllegalStateException(x.getLocalizedMessage(),x);      }      return DtoFactory.getInstance().createDtoFromJson(factoryJsonContent,FactoryDto.class);    }  }  return newDto(FactoryDto.class).withV("4.0");}  }
class C{  public DrawerBuilder withSliderBackgroundColor(@ColorInt int sliderBackgroundColor){  this.mSliderBackgroundColor=sliderBackgroundColor;  return this;}  }
class C{  public static Result evaluateModel(MultiLabelClassifier h,Instances D_train,Instances D_test) throws Exception {  long before=System.currentTimeMillis();  if (h instanceof SemisupervisedClassifier) {    ((SemisupervisedClassifier)h).introduceUnlabelledData(MLUtils.setLabelsMissing(new Instances(D_test)));  }  h.buildClassifier(D_train);  long after=System.currentTimeMillis();  long before_test=System.currentTimeMillis();  Result result=testClassifier(h,D_test);  long after_test=System.currentTimeMillis();  result.setValue("Number of training instances",D_train.numInstances());  result.setValue("Number of test instances",D_test.numInstances());  result.setValue("Label cardinality (train set)",MLUtils.labelCardinality(D_train));  result.setValue("Label cardinality (test set)",MLUtils.labelCardinality(D_test));  result.setValue("Build Time",(after - before) / 1000.0);  result.setValue("Test Time",(after_test - before_test) / 1000.0);  result.setValue("Total Time",(after_test - before) / 1000.0);  result.setInfo("Classifier",h.getClass().getName());  result.setInfo("Options",Arrays.toString(h.getOptions()));  result.setInfo("Additional Info",h.toString());  result.setInfo("Dataset",MLUtils.getDatasetName(D_train));  result.setInfo("Number of labels (L)",String.valueOf(D_train.classIndex()));  String model=h.getModel();  if (model.length() > 0)   result.setModel("Model",h.getModel());  return result;}  }
class C{  protected List<L> listeners(){  return listeners;}  }
class C{  private byte[] calculateKey(final byte[] O,final int P,final byte[] ID) throws PdfSecurityException {  final byte[] key=getPaddedKey(encryptionPassword,encryptionPassword);  final byte[] keyValue;  try {    final MessageDigest md=MessageDigest.getInstance("MD5");    md.update(key);    md.update(O);    md.update(new byte[]{(byte)((P) & 0xff),(byte)((P >> 8) & 0xff),(byte)((P >> 16) & 0xff),(byte)((P >> 24) & 0xff)});    if (ID != null) {      md.update(ID);    }    if (rev == 4 && !isMetaDataEncypted) {      md.update(new byte[]{(byte)255,(byte)255,(byte)255,(byte)255});    }    final byte[] digest=new byte[keyLength];    System.arraycopy(md.digest(),0,digest,0,keyLength);    if (rev >= 3) {      for (int i=0; i < 50; ++i) {        System.arraycopy(md.digest(digest),0,digest,0,keyLength);      }    }    keyValue=new byte[keyLength];    System.arraycopy(digest,0,keyValue,0,keyLength);  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());    throw new PdfSecurityException("Exception " + e + " generating encryption key");  }  final byte[] returnKey=new byte[keyLength];  System.arraycopy(keyValue,0,returnKey,0,keyLength);  return returnKey;}  }
class C{  public Builder columnWidth(int width){  if (width > 0) {    columnWidth=width;  }  return this;}  }
class C{  public void invite(Message message,String user,String reason){  message.setTo(room);  MUCUser mucUser=new MUCUser();  MUCUser.Invite invite=new MUCUser.Invite();  invite.setTo(user);  invite.setReason(reason);  mucUser.setInvite(invite);  message.addExtension(mucUser);  connection.sendPacket(message);}  }
class C{  public boolean hasId(){  return getId() != null;}  }
class C{  private void reportStartInstrumentationFailure(IInstrumentationWatcher watcher,ComponentName cn,String report){  Slog.w(TAG,report);  try {    if (watcher != null) {      Bundle results=new Bundle();      results.putString(Instrumentation.REPORT_KEY_IDENTIFIER,"ActivityManagerService");      results.putString("Error",report);      watcher.instrumentationStatus(cn,-1,results);    }  } catch (  RemoteException e) {    Slog.w(TAG,e);  }}  }
class C{  int minimalPaddingLen(){  return macAlg.minimalPaddingSize;}  }
class C{  public static Class<? extends Annotation> findScopeAnnotation(Errors errors,Annotation[] annotations){  Class<? extends Annotation> found=null;  for (  Annotation annotation : annotations) {    if (annotation.annotationType().getAnnotation(ScopeAnnotation.class) != null) {      if (found != null) {        errors.duplicateScopeAnnotations(found,annotation.annotationType());      } else {        found=annotation.annotationType();      }    }  }  return found;}  }
class C{  public final boolean hasAction(String action){  return action != null && mActions.contains(action);}  }
class C{  public Set<File> execute() throws Exception {  ProfileManager profileManager=new DefaultProfileManager(container);  fixupProjectArtifact();  Artifact art=mavenProject.getArtifact();  Artifact art2=artifactFactory.createArtifactWithClassifier(art.getGroupId() + ".cargodeps",art.getArtifactId(),art.getVersion(),"pom",null);  resolver.resolve(art2,remoteRepositories,localRepository);  MavenProject mavenProject=mavenProjectBuilder.buildWithDependencies(art2.getFile(),localRepository,profileManager);  Set<File> filesToAdd=new HashSet<File>();  for (  Object artifact : mavenProject.getArtifacts()) {    Artifact artdep=(Artifact)artifact;    if (artdep.getType().equals("jar")) {      resolver.resolve(artdep,remoteRepositories,localRepository);      filesToAdd.add(artdep.getFile());    }  }  return filesToAdd;}  }
class C{  static int numBytesToEncode(int len){  if (0 <= len && len <= 127)   return 1;  if (128 <= len && len <= 16383)   return 2;  if (16384 <= len && len <= 2097151)   return 3;  if (2097152 <= len && len <= 268435455)   return 4;  throw new IllegalArgumentException("value shoul be in the range [0..268435455]");}  }
class C{  static UnitValue parseAlignKeywords(String s,boolean isHor){  if (startsWithLenient(s,"center",1,false) != -1)   return UnitValue.CENTER;  if (isHor) {    if (startsWithLenient(s,"left",1,false) != -1)     return UnitValue.LEFT;    if (startsWithLenient(s,"right",1,false) != -1)     return UnitValue.RIGHT;    if (startsWithLenient(s,"leading",4,false) != -1)     return UnitValue.LEADING;    if (startsWithLenient(s,"trailing",5,false) != -1)     return UnitValue.TRAILING;    if (startsWithLenient(s,"label",5,false) != -1)     return UnitValue.LABEL;  } else {    if (startsWithLenient(s,"baseline",4,false) != -1)     return UnitValue.BASELINE_IDENTITY;    if (startsWithLenient(s,"top",1,false) != -1)     return UnitValue.TOP;    if (startsWithLenient(s,"bottom",1,false) != -1)     return UnitValue.BOTTOM;  }  return null;}  }
class C{  public static void init(ProfilerSection section){  isCorePhase=false;  ProfilerSection section1=section.section("Java");  loadCandidates(section1);  parseEntries(section1);  constructModules(section1);  resolveBranches(section1);}  }
class C{  public Object createImplementation(){  return new BlackBerryOS5Implementation();}  }
class C{  public void testRandomBinary() throws Exception {  String[] charsets={"latin1","UTF-8","sjis"};  for (  String charset : charsets) {    randomizedBinary(charset);  }}  }
class C{  public int size(){  return effects.size();}  }
class C{  LdapAttribute(String id){  super(id);}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public static CategoryLabelPositions replaceLeftPosition(CategoryLabelPositions base,CategoryLabelPosition left){  ParamChecks.nullNotPermitted(base,"base");  ParamChecks.nullNotPermitted(left,"left");  return new CategoryLabelPositions(base.getLabelPosition(RectangleEdge.TOP),base.getLabelPosition(RectangleEdge.BOTTOM),left,base.getLabelPosition(RectangleEdge.RIGHT));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:47:59.850 -0500",hash_original_method="4A983FDB3FF481E2165B7D8D641CDD48",hash_generated_method="3CA4089EBE14436E733AD365EF1361B8") public boolean onTrackballEvent(MotionEvent event){  return false;}  }
class C{  public static void updateSelectionOptions(){  if (main != null)   main.panel.updateSelectionOptions();}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  private static int determineDBVendor(String dbVendor) throws Exception {  if (dbVendor.indexOf(DbEngine.SQLSERVER_STR) != -1)   return DbEngine.SQLSERVER; else   if (dbVendor.indexOf(DbEngine.ORACLE_STR) != -1)   return DbEngine.ORACLE; else   if (dbVendor.indexOf(DbEngine.MYSQL_STR) != -1)   return DbEngine.MYSQL; else   if (dbVendor.indexOf(DbEngine.POSTGRESQL_STR) != -1)   return DbEngine.POSTGRESQL; else   if (dbVendor.indexOf(DbEngine.DB2_STR) != -1)   return DbEngine.DB2;  throw new IeciTdException(DbError.EC_INVALID_ENGINE,DbError.EM_INVALID_ENGINE);}  }
class C{  private void updateEnabledState(){  if (null != toolBarManager) {    toolBarManager.getControl().setEnabled(isEditable());  }}  }
class C{  public static StringResourceModel createStringResourceModel(final Component component,final String resourceKey){  return new StringResourceModel(resourceKey,component,null);}  }
class C{  public final void addArg(ExprOrOpArgNode arg){  argsVector.addElement(arg);}  }
class C{  private static void createText(final Shell shell,final String text,final NotifierColors colors){  final StyledText textLabel=new StyledText(shell,SWT.WRAP | SWT.READ_ONLY);  final GridData gdText=new GridData(GridData.FILL,GridData.FILL,true,true);  gdText.horizontalIndent=15;  textLabel.setLayoutData(gdText);  textLabel.setEnabled(false);  final Font textFont=SWTGraphicUtil.buildFontFrom(textLabel,SWT.NONE,10);  textLabel.setFont(textFont);  final Color textColor=colors.textColor;  textLabel.setForeground(textColor);  textLabel.setText(text);  SWTGraphicUtil.applyHTMLFormating(textLabel);  SWTGraphicUtil.addDisposer(shell,textFont);}  }
class C{  public RedundantServerDataType clone(){  RedundantServerDataType result=new RedundantServerDataType();  result.ServerId=ServerId;  result.ServiceLevel=ServiceLevel;  result.ServerState=ServerState;  return result;}  }
class C{  private boolean useAggregateFunction(String fields){  String fieldsUpper=fields.toUpperCase();  int size=fieldsUpper.length();  StringBuffer buffer=new StringBuffer();  String token=null;  for (int i=0; i < size; i++) {    char ch=fieldsUpper.charAt(i);    if (Character.isWhitespace(ch)) {      if (buffer.length() > 0) {        token=buffer.toString();        buffer=new StringBuffer();      }    } else {      if (isOperator(ch)) {        if (buffer.length() > 0) {          token=buffer.toString();          buffer=new StringBuffer();        } else {          token=null;        }        if (ch == '(' && token != null) {          if (token.equals("SUM") || token.equals("MAX") || token.equals("MIN")|| token.equals("COUNT")|| token.equals("AVG")) {            return true;          }        }      } else       buffer.append(ch);    }  }  return false;}  }
class C{  protected boolean isUseIdentityHashCode(){  return useIdentityHashCode;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void init(){synchronized (this) {    if (!wasInitCalled) {      doInit();    }  }}  }
class C{  public static final String marshall(Object toMarshall) throws JAXBException {  JAXBContext ctx=JAXBContext.newInstance(toMarshall.getClass().getPackage().getName());  StringWriter sw=new StringWriter();  Marshaller marshaller=ctx.createMarshaller();  marshaller.setProperty("jaxb.formatted.output",true);  marshaller.marshal(toMarshall,sw);  return sw.toString();}  }
class C{  public void configureManagers(){  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());  powerManager=new jmri.jmrix.sprog.SprogPowerManager(this);  jmri.InstanceManager.store(powerManager,jmri.PowerManager.class);  sprogTurnoutManager=new jmri.jmrix.sprog.SprogTurnoutManager(this);  jmri.InstanceManager.setTurnoutManager(sprogTurnoutManager);switch (sprogMode) {case OPS:    sprogCSThrottleManager=new jmri.jmrix.sprog.SprogCSThrottleManager(this);  jmri.InstanceManager.setThrottleManager(sprogCSThrottleManager);break;case SERVICE:sprogThrottleManager=new jmri.jmrix.sprog.SprogThrottleManager(this);jmri.InstanceManager.setThrottleManager(sprogThrottleManager);break;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:55.690 -0400",hash_original_method="F126CD2F3BB9DE0249E6E73DB0CDF6A0",hash_generated_method="9F69DCEA83CF55127767154ED6A5F9AB") public DrmInfo(int infoType,String path,String mimeType){  mInfoType=infoType;  mMimeType=mimeType;  try {    mData=DrmUtils.readBytes(path);  } catch (  IOException e) {    mData=null;  }}  }
class C{  public CMSSignedData(Map hashes,byte[] sigBlock) throws CMSException {  this(hashes,CMSUtils.readContentInfo(sigBlock));}  }
class C{  @ExceptionHandler(GemfireRestException.class) @ResponseBody @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public String handleException(final GemfireRestException ge){  return convertErrorAsJson(ge);}  }
class C{  @Override protected void done(){  executionList.execute();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LegendItemCollection)) {    return false;  }  LegendItemCollection that=(LegendItemCollection)obj;  if (!this.items.equals(that.items)) {    return false;  }  return true;}  }
class C{  public static String padRight(final String s,final int length){  final int pad=length - s.length();  return pad > 0 ? s + getSpaceString(pad) : s;}  }
class C{  public void insertEntries(int start,int length,int value){  int sizes[]=getSizes();  int end=start + length;  int n=a.length + length;  a=new int[n];  for (int i=0; i < start; i++) {    a[i]=sizes[i];  }  for (int i=start; i < end; i++) {    a[i]=value;  }  for (int i=end; i < n; i++) {    a[i]=sizes[i - length];  }  setSizes(a);}  }
class C{  @Deprecated public void listNotebooks(OnClientCallback<List<Notebook>> callback){  AsyncReflector.execute(mClient,callback,"listNotebooks",mAuthenticationToken);}  }
class C{  public ObjectFactory(){}  }
class C{  public static int verifyVersionDetails(String minimumSupportedVersion,String version){  if (minimumSupportedVersion == null) {    throw new IllegalArgumentException("minimum supported version received cannot be null");  } else   if (version == null) {    throw new IllegalArgumentException("discovered version received cannot be null");  }  version=version.trim();  String[] versionToVerifyWith=Pattern.compile("[\\.|\\)|\\(| ]|(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)",Pattern.DOTALL).split(minimumSupportedVersion);  String[] versionProvided=Pattern.compile("[\\.|\\)|\\(| ]|(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)",Pattern.DOTALL).split(version);  versionToVerifyWith[0]=versionToVerifyWith[0].replaceFirst("^0*","");  versionProvided[0]=versionProvided[0].replaceFirst("^0*","");  int i=0;  while (i < versionProvided.length && i < versionToVerifyWith.length && versionProvided[i].equals(versionToVerifyWith[i])) {    i++;  }  if (i < versionProvided.length && i < versionToVerifyWith.length) {    int length=(versionToVerifyWith[i].length() > versionProvided[i].length()) ? versionToVerifyWith[i].length() : versionProvided[i].length();    if (versionToVerifyWith[i].length() > versionProvided[i].length()) {      versionProvided[i]=String.format("%" + length + 's',versionProvided[i]);    } else {      versionToVerifyWith[i]=String.format("%" + length + 's',versionToVerifyWith[i]);    }    int diff=versionProvided[i].compareTo(versionToVerifyWith[i]);    return diff < 0 ? -1 : diff == 0 ? 0 : 1;  }  return versionProvided.length < versionToVerifyWith.length ? -1 : versionProvided.length == versionToVerifyWith.length ? 0 : 1;}  }
class C{  public void applyTorque(float torque,boolean wake){  body.applyTorque(torque);}  }
class C{  public static <K,V>Map<K,V> of(){  return newHashMap();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void insertBefore(Unit toInsert,Unit point){  if (point == mHead)   mHead=toInsert;  Chain<Unit> methodBody=mBody.getUnits();  methodBody.insertBefore(toInsert,point);}  }
class C{  public static SearchRequest searchRequest(int id,long now,Position prevPos,ArrayList<Move> mList,Position currPos,boolean drawOffer,int wTime,int bTime,int wInc,int bInc,int movesToGo,boolean ponderEnabled,Move ponderMove,String engine,int strength){  SearchRequest sr=new SearchRequest();  sr.searchId=id;  sr.startTime=now;  sr.prevPos=prevPos;  sr.mList=mList;  sr.currPos=currPos;  sr.drawOffer=drawOffer;  sr.isSearch=true;  sr.isAnalyze=false;  sr.wTime=wTime;  sr.bTime=bTime;  sr.wInc=wInc;  sr.bInc=bInc;  sr.movesToGo=movesToGo;  sr.engine=engine;  sr.strength=strength;  sr.numPV=1;  sr.ponderEnabled=ponderEnabled;  sr.ponderMove=ponderMove;  sr.posHashList=null;  sr.posHashListSize=0;  return sr;}  }
class C{  public void testGetMaxSize(){  assertEquals(16,CoreIdRfidProtocol.getMaxSize());}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SPECIES_OR_GRID_DISPLAY_STATEMENT;}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,systemLineSeparator);}  }
class C{  public static File regenerateResourceModule(ApplicationCompilerConfiguration configuration){  File resourceModuleFile=new File(configuration.getTargetFile());  String[] locales=configuration.getCompilerConfiguration().getLocales();  List bundleNames=configuration.getIncludeResourceBundles();  return codegenResourceModule(resourceModuleFile,locales,bundleNames);}  }
class C{  public static Image convertToArdor3DImage(BufferedImage bImage,boolean flip){  WritableRaster raster=bImage.getRaster();  ImageDataFormat format=ImageDataFormat.RGBA;  if (bImage.getType() == BufferedImage.TYPE_4BYTE_ABGR) {    swapBytes(raster.getDataBuffer());    format=ImageDataFormat.BGRA;  } else   if (bImage.getType() == BufferedImage.TYPE_INT_ARGB_PRE) {    swapBytes(raster.getDataBuffer());    format=ImageDataFormat.RGBA;  } else   if ((bImage.getType() == BufferedImage.TYPE_INT_RGB) && Dert.isMac) {    swapBytes(raster.getDataBuffer());    format=ImageDataFormat.RGB;  } else   if (bImage.getType() == BufferedImage.TYPE_3BYTE_BGR) {    format=ImageDataFormat.BGR;  } else   if (bImage.getType() == BufferedImage.TYPE_BYTE_GRAY) {    format=ImageDataFormat.Luminance;  }  return (convertToArdor3DImage(raster,bImage.getColorModel(),format,flip));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static void mergeSort(Object[] src,Object[] dest,int low,int high,int off,Comparator c){  int length=high - low;  if (length < INSERTIONSORT_THRESHOLD) {    for (int i=low; i < high; i++)     for (int j=i; j > low && c.compare(dest[j - 1],dest[j]) > 0; j--)     swap(dest,j,j - 1);    return;  }  int destLow=low;  int destHigh=high;  low+=off;  high+=off;  int mid=(low + high) >>> 1;  mergeSort(dest,src,low,mid,-off,c);  mergeSort(dest,src,mid,high,-off,c);  if (c.compare(src[mid - 1],src[mid]) <= 0) {    System.arraycopy(src,low,dest,destLow,length);    return;  }  for (int i=destLow, p=low, q=mid; i < destHigh; i++) {    if (q >= high || p < mid && c.compare(src[p],src[q]) <= 0)     dest[i]=src[p++]; else     dest[i]=src[q++];  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void reselect(){  firePropertyChange("selected",null,Boolean.TRUE);}  }
class C{  public boolean addLogger(Logger logger){  final String name=logger.getName();  if (name == null) {    throw new NullPointerException();  }  drainLoggerRefQueueBounded();  LoggerContext cx=getUserContext();  if (cx.addLocalLogger(logger)) {    loadLoggerHandlers(logger,name,name + ".handlers");    return true;  } else {    return false;  }}  }
class C{  public static String secureString(String s){  if (s == null)   return null;  return s.replace("'","''");}  }
class C{  @Inline static void compilePutfieldBarrierBoolean(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.booleanFieldWriteBarrierMethod);}  }
class C{  protected StackManipulation afterDelegation(MethodDescription instrumentedMethod){  return TargetMethodAnnotationDrivenBinder.TerminationHandler.Returning.INSTANCE.resolve(Assigner.DEFAULT,instrumentedMethod,targetMethod);}  }
class C{  public AuthenticationFailedException(String message){  super(message);}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  protected Metric reduce(List<Metric> metrics){  SystemAssert.requireArgument(metrics != null,"Cannot transform empty metric/metrics");  MetricDistiller distiller=new MetricDistiller();  distiller.distill(metrics);  Map<Long,List<String>> collated=collate(metrics);  Map<Long,String> minDatapoints=reduce(collated,metrics);  String newMetricName=distiller.getMetric() == null ? defaultMetricName : distiller.getMetric();  Metric newMetric=new Metric(defaultScope,newMetricName);  newMetric.setDisplayName(distiller.getDisplayName());  newMetric.setUnits(distiller.getUnits());  newMetric.setTags(distiller.getTags());  newMetric.setDatapoints(minDatapoints);  return newMetric;}  }
class C{  @Override protected boolean isCurrentMember(Profile p){  return true;}  }
class C{  @Override public StreamImpl openReadWriteImpl() throws IOException {  StreamImpl stream=getWritePath().openReadWriteImpl();  return stream;}  }
class C{  protected SingleIsA_Impl(){  super();}  }
class C{  protected void convertInstance(Instance instance){  double[] vals=new double[outputFormatPeek().numAttributes()];  for (int i=0; i < instance.numAttributes(); i++) {    vals[i]=instance.value(i);  }  Instances outputFormat=getOutputFormat();  for (int i=instance.numAttributes(); i < outputFormatPeek().numAttributes(); i++) {    AttributeSpec spec=m_attributeSpecs.get(i - instance.numAttributes());    Attribute outAtt=outputFormat.attribute(i);    if (outAtt.isDate()) {      vals[i]=spec.getDateValue().getTime();    } else     if (outAtt.isNumeric()) {      vals[i]=spec.getNumericValue();    } else     if (outAtt.isNominal()) {      String nomVal=spec.getNominalOrStringValue();      vals[i]=outAtt.indexOfValue(nomVal);    } else {      String nomVal=spec.getNominalOrStringValue();      vals[i]=outAtt.addStringValue(nomVal);    }  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(outputFormat);  push(inst);}  }
class C{  public boolean isAutoRelease(){  return autoRelease;}  }
class C{  public int diff_commonPrefix(String text1,String text2){  int n=Math.min(text1.length(),text2.length());  for (int i=0; i < n; i++) {    if (text1.charAt(i) != text2.charAt(i)) {      return i;    }  }  return n;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public AliasList(String name){  mName=name;}  }
class C{  protected void close() throws MessagingException {  if (null != getFolder() && getFolder().isOpen())   getFolder().close(true);}  }
class C{  public Pageable createPageable(){  return new DrawingPageable(svgPanel.getDrawing());}  }
class C{  public void beginPicking(final GL2 gl){  final GLU glu=getGlu();  selectBuffer.clear();  gl.glSelectBuffer(selectBuffer.capacity(),selectBuffer);  final int viewport[]=new int[4];  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);  gl.glRenderMode(GL2.GL_SELECT);  gl.glMatrixMode(GLMatrixFunc.GL_PROJECTION);  gl.glPushMatrix();  gl.glLoadIdentity();  glu.gluPickMatrix(camera.getMousePosition().x,viewport[3] - camera.getMousePosition().y,4,4,viewport,0);  updatePerspective();  gl.glMatrixMode(GLMatrixFunc.GL_MODELVIEW);}  }
class C{  private void init(Context context,AttributeSet attributeSet){  int size=0;  int accentColor=-1;  TypedArray a=null;  try {    TypedValue typedValue=new TypedValue();    a=context.obtainStyledAttributes(typedValue.data,new int[]{R.attr.colorAccent});    accentColor=a.getColor(0,-1);  } catch (  Resources.NotFoundException e) {    e.printStackTrace();  } finally {    if (a != null) {      a.recycle();    }  }  TypedArray attr=context.obtainStyledAttributes(attributeSet,R.styleable.MaterialFloatingActionButton,0,0);  mButtonColor=attr.getColor(R.styleable.MaterialFloatingActionButton_mat_fab_colorNormal,accentColor == -1 ? getColor(android.R.color.holo_blue_dark) : accentColor);  mButtonPressedColor=attr.getColor(R.styleable.MaterialFloatingActionButton_mat_fab_colorPressed,ColorUtils.getDarkerColor(mButtonColor));  mIcon=attr.getResourceId(R.styleable.MaterialFloatingActionButton_mat_fab_icon,0);  useSelector=attr.getBoolean(R.styleable.MaterialFloatingActionButton_mat_fab_use_selector,false);  size=attr.getInt(R.styleable.MaterialFloatingActionButton_mat_fab_size,0);  attr.recycle();  iconSize=getDimension(R.dimen.mat_fab_icon_size);  if (mIcon != 0) {    iconBitmap=BitmapFactory.decodeResource(getResources(),mIcon);    drawable=new BitmapDrawable(getResources(),iconBitmap);    drawable.setAntiAlias(true);    bitmapRect=new Rect(0,0,iconBitmap.getWidth(),iconBitmap.getHeight());    bitmapDrawRect=new RectF(0.0f,0.0f,iconSize,iconSize);  } else {    iconBitmap=getDefaulBitmap();    bitmapRect=new Rect(0,0,iconBitmap.getWidth(),iconBitmap.getHeight());    bitmapDrawRect=new RectF(0.0f,0.0f,iconSize,iconSize);  }  float maxShadowOffset=getDimension(R.dimen.mat_fab_shadow_offset) * 1.5f;  float minShadowOffset=maxShadowOffset / 1.5f;  float maxShadowSize=getDimension(R.dimen.mat_fab_shadow_max_radius);  float minShawdowSize=getDimension(R.dimen.mat_fab_shadow_min_radius) / 2;  buttonSize=size == 0 ? getDimension(R.dimen.mat_fab_normal_size) : getDimension(R.dimen.mat_fab_mini_size);  mSize=buttonSize + maxShadowSize * 4 + maxShadowOffset * 3;  cx=mSize / 2;  cy=mSize / 2;  rotation=0;  rotationAnimator=ObjectAnimator.ofFloat(this,"rotation",MAX_ROTATION);  rotationAnimator.setDuration(200);  rotationAnimator.setInterpolator(new OvershootInterpolator());  float halfsize=buttonSize / 2;  float halfBitmapSize=iconSize / 2;  bitmapDrawRect.set(cx - halfBitmapSize,cy - halfBitmapSize,cx + halfBitmapSize,cy + halfBitmapSize);  mButtonPaint.setStyle(Paint.Style.FILL);  mButtonPaint.setColor(mButtonColor);  bitmapPaint=new Paint();  bitmapPaint.setAntiAlias(true);  bitmapPaint.setFilterBitmap(true);  bitmapPaint.setDither(true);  shadowRippleGenerator=new ShadowRippleGenerator(this,mButtonPaint);  shadowRippleGenerator.setRippleColor(ColorUtils.getDarkerColor(mButtonColor));  shadowRippleGenerator.setClipRadius((int)buttonSize / 2);  shadowRippleGenerator.setAnimationDuration(200);  shadowRippleGenerator.setMaxRippleRadius((int)(0.75f * buttonSize / 2));  shadowRippleGenerator.setBoundingRect(new RectF(cx - halfsize,cy - halfsize,cx + halfsize,cy + halfsize));  shadowSelectorGenerator=new ShadowSelectorGenerator(this,mButtonPaint);  shadowSelectorGenerator.setNormalColor(mButtonColor);  shadowSelectorGenerator.setPressedColor(mButtonPressedColor);  shadowSelectorGenerator.setAnimationDuration(200);  shadowSelectorGenerator.setShadowLimits(minShadowOffset,maxShadowOffset,minShawdowSize,maxShadowSize);  invalidate();}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void draw(Canvas canvas,float leftMargin,PinView rightThumb){  canvas.drawLine(leftMargin,mY,rightThumb.getX(),mY,mPaint);}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public boolean isPhantom(){  Object oo=get_Value(COLUMNNAME_IsPhantom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static S2Cap fromAxisHeight(S2Point axis,double height){  return new S2Cap(axis,height);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public CompatibleCacheBuilder<K,V> concurrencyLevel(int concurrencyLevel){  builder.concurrencyLevel(concurrencyLevel);  return this;}  }
class C{  public int score(final int i,final int j){  return mScores[i][j];}  }
class C{  public static String quoteJavaStringArray(String[] array){  if (array == null) {    return "null";  }  StatementBuilder buff=new StatementBuilder("new String[]{");  for (  String a : array) {    buff.appendExceptFirst(", ");    buff.append(quoteJavaString(a));  }  return buff.append('}').toString();}  }
class C{  public DefaultComboBoxModel(Vector<E> v){  objects=v;  if (getSize() > 0) {    selectedObject=getElementAt(0);  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public boolean isSelected(){  return OptionElement.as(this.getElement()).isSelected();}  }
class C{  private RdeImportUtils createRdeImportUtils(){  return new RdeImportUtils(ofy(),new SystemClock(),importBucketName,new GcsUtils(GCS_SERVICE,ConfigModule.provideGcsBufferSize()));}  }
class C{  public static byte[] ipStrToBytes(String ip) throws IOException {  return InetAddress.getByName(ip).getAddress();}  }
class C{  @Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.addVetoableChangeListener(name,vcl);}  }
class C{  public final void clear(){  m_index=-1;}  }
class C{  public static float quickModulo(float x,float y){  if (x > y)   return x - y;  return x;}  }
class C{  static public double y0(double x) throws ArithmeticException {  if (x < 8.0) {    double y=x * x;    double ans1=-2957821389.0 + y * (7062834065.0 + y * (-512359803.6 + y * (10879881.29 + y * (-86327.92757 + y * 228.4622733))));    double ans2=40076544269.0 + y * (745249964.8 + y * (7189466.438 + y * (47447.26470 + y * (226.1030244 + y * 1.0))));    return (ans1 / ans2) + 0.636619772 * j0(x) * Math.log(x);  } else {    double z=8.0 / x;    double y=z * z;    double xx=x - 0.785398164;    double ans1=1.0 + y * (-0.1098628627e-2 + y * (0.2734510407e-4 + y * (-0.2073370639e-5 + y * 0.2093887211e-6)));    double ans2=-0.1562499995e-1 + y * (0.1430488765e-3 + y * (-0.6911147651e-5 + y * (0.7621095161e-6 + y * (-0.934945152e-7))));    return Math.sqrt(0.636619772 / x) * (Math.sin(xx) * ans1 + z * Math.cos(xx) * ans2);  }}  }
class C{  public void run(){  if (internalRunnable != null) {    internalRunnable.run();  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getKeyDefinition_();}  }
class C{  public body addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public boolean containsValue(double val){  Object[] keys=_set;  double[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private int createColumn(Properties ctx,MTable table,MColumn column,boolean doAlter){  int no=0;  String sql=null;  ResultSet rst=null;  ResultSet rsc=null;  Connection conn=null;  Trx trx=Trx.get(getTrxName(ctx),true);  if (!trx.commit())   return 0;  try {    conn=trx.getConnection();    DatabaseMetaData md=conn.getMetaData();    String catalog=DB.getDatabase().getCatalog();    String schema=DB.getDatabase().getSchema();    String tableName=table.getTableName();    String columnName=column.getColumnName();    if (DB.isOracle()) {      tableName=tableName.toUpperCase();      columnName=columnName.toUpperCase();    } else     if (DB.isPostgreSQL()) {      tableName=tableName.toLowerCase();      columnName=columnName.toLowerCase();    }    rst=md.getTables(catalog,schema,tableName,new String[]{"TABLE"});    if (!rst.next()) {      sql=table.getSQLCreate();    } else {      rsc=md.getColumns(catalog,schema,tableName,columnName);      if (rsc.next()) {        if (doAlter) {          boolean notNull=DatabaseMetaData.columnNoNulls == rsc.getInt("NULLABLE");          sql=column.getSQLModify(table,column.isMandatory() != notNull);        }      } else {        sql=column.getSQLAdd(table);      }      rsc.close();      rsc=null;    }    rst.close();    rst=null;    if (sql != null && sql.trim().length() > 0) {      log.info(sql);      if (sql.indexOf(DB.SQLSTATEMENT_SEPARATOR) == -1) {        no=DB.executeUpdate(sql,false,trx.getTrxName());        if (no == -1)         return 0;      } else {        String statements[]=sql.split(DB.SQLSTATEMENT_SEPARATOR);        for (int i=0; i < statements.length; i++) {          int count=DB.executeUpdate(statements[i],false,trx.getTrxName());          if (count == -1) {            return 0;          }          no+=count;        }      }    }    trx.commit(true);  } catch (  SQLException e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);    if (rsc != null) {      try {        rsc.close();      } catch (      SQLException e1) {      }      rsc=null;    }    if (rst != null) {      try {        rst.close();      } catch (      SQLException e1) {      }      rst=null;    }    trx.rollback();    return 0;  }  return 1;}  }
class C{  public static int percAvailableMemory(){  return (int)((Util.availableMemory() * 100) / Runtime.getRuntime().maxMemory());}  }
class C{  public static String list(File file){  StringBuffer sb=new StringBuffer();  sb.append("<html>");  sb.append("<head>");  sb.append("<title>Directory listing for ");  sb.append(file.getPath());  sb.append("</title>");  sb.append("<style>");  sb.append("body { font-family: monospaced; }");  sb.append("ul { background-color: #ddffdd; }");  sb.append("li { list-style-type: none; }");  sb.append("a { text-decoration: none; }");  sb.append(".dir { font-weight: bold; color: #ff9966; }");  sb.append(".file { font-weight: normal; color: #003333; }");  sb.append("</style>");  sb.append("</head>");  sb.append("<body>");  sb.append("<h2>Index of ");  sb.append(file.toString());  sb.append("</h2>");  sb.append("<hr />");  if (file.isDirectory()) {    String loc=null;    try {      File parent=file.getParentFile();      if (parent != null) {        loc=GeneralUtil.htmlEscapeSpace(file.getAbsoluteFile().getParentFile().toURL().toExternalForm()).toString();        sb.append("<a class='dir' href='" + loc + "'>Up to higher level directory</a>");      }    } catch (    MalformedURLException e) {    }    sb.append("<table style='width: 75%'>");    File[] files=file.listFiles();    String cls="";    String img="";    for (int i=0; i < files.length; i++) {      File f=files[i];      if (f.isHidden())       continue;      long len=f.length();      String lenDesc=(len > 1024 ? new DecimalFormat("#,###KB").format(len / 1024) : "");      String lastMod=new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a").format(new Date(f.lastModified()));      sb.append("<tr>");      if (files[i].isDirectory()) {        cls="dir";      } else {        cls="file";      }      try {        loc=GeneralUtil.htmlEscapeSpace(files[i].toURL().toExternalForm()).toString();        sb.append("<td><a class='" + cls + "' href='"+ loc+ "'>"+ files[i].getName()+ "</a></td>"+ "<td>"+ lenDesc+ "</td>"+ "<td>"+ lastMod+ "</td>");      } catch (      MalformedURLException e) {        sb.append(files[i].getAbsolutePath());      }      sb.append("</tr>");    }    sb.append("</table>");  }  sb.append("<hr />");  sb.append("</body></html>");  return sb.toString();}  }
class C{  public synchronized void removeDeeply(Parameter parameter){  _removeDeeply(parameter);  uncheck();}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  public void queueSound(Uri uri,MediaPlayer.OnCompletionListener listener){  mAudioQueue.offer(new AudioQueueItem(uri,listener));}  }
class C{  public void deleteProperty(@NotNull String key) throws IOException {  Path storageFile=getStorageFile().orElseThrow(null);  Properties properties=loadProperties(storageFile);  if (!properties.containsKey(key)) {    throw PropertyNotFoundException.from(key);  }  properties.remove(key);  try (OutputStream out=new BufferedOutputStream(newOutputStream(storageFile))){    properties.store(out,null);  } }  }
class C{  public void testNextIntBounded(){  SplittableRandom sr=new SplittableRandom();  for (int bound=2; bound < MAX_INT_BOUND; bound+=524959) {    int f=sr.nextInt(bound);    assertTrue(0 <= f && f < bound);    int i=0;    int j;    while (i < NCALLS && (j=sr.nextInt(bound)) == f) {      assertTrue(0 <= j && j < bound);      ++i;    }    assertTrue(i < NCALLS);  }}  }
class C{  public Object exec(List arguments){  TransformModel1 cTransformer=new TransformModel1();  Iterator iArgument=arguments.iterator();  while (iArgument.hasNext()) {    String aArgument=(String)iArgument.next();    if (aArgument.equals("quote")) {      cTransformer.setQuotes(true);    } else     if (aArgument.equals("tag")) {      cTransformer.setTags(true);    } else     if (aArgument.equals("ampersand")) {      cTransformer.setAmpersands(true);    } else {      cTransformer.setComment(aArgument);    }  }  return cTransformer;}  }
class C{  public void drive(){  if (drivingClip != null) {    drivingClip.loop();  }}  }
class C{  private boolean step2(){  if (RV == null)   return false;  if (RV.length() >= 7) {    if (suffix(RV,"issemos")) {      CT=removeSuffix(CT,"issemos");      return true;    }    if (suffix(RV,"essemos")) {      CT=removeSuffix(CT,"essemos");      return true;    }    if (suffix(RV,"assemos")) {      CT=removeSuffix(CT,"assemos");      return true;    }    if (suffix(RV,"ariamos")) {      CT=removeSuffix(CT,"ariamos");      return true;    }    if (suffix(RV,"eriamos")) {      CT=removeSuffix(CT,"eriamos");      return true;    }    if (suffix(RV,"iriamos")) {      CT=removeSuffix(CT,"iriamos");      return true;    }  }  if (RV.length() >= 6) {    if (suffix(RV,"iremos")) {      CT=removeSuffix(CT,"iremos");      return true;    }    if (suffix(RV,"eremos")) {      CT=removeSuffix(CT,"eremos");      return true;    }    if (suffix(RV,"aremos")) {      CT=removeSuffix(CT,"aremos");      return true;    }    if (suffix(RV,"avamos")) {      CT=removeSuffix(CT,"avamos");      return true;    }    if (suffix(RV,"iramos")) {      CT=removeSuffix(CT,"iramos");      return true;    }    if (suffix(RV,"eramos")) {      CT=removeSuffix(CT,"eramos");      return true;    }    if (suffix(RV,"aramos")) {      CT=removeSuffix(CT,"aramos");      return true;    }    if (suffix(RV,"asseis")) {      CT=removeSuffix(CT,"asseis");      return true;    }    if (suffix(RV,"esseis")) {      CT=removeSuffix(CT,"esseis");      return true;    }    if (suffix(RV,"isseis")) {      CT=removeSuffix(CT,"isseis");      return true;    }    if (suffix(RV,"arieis")) {      CT=removeSuffix(CT,"arieis");      return true;    }    if (suffix(RV,"erieis")) {      CT=removeSuffix(CT,"erieis");      return true;    }    if (suffix(RV,"irieis")) {      CT=removeSuffix(CT,"irieis");      return true;    }  }  if (RV.length() >= 5) {    if (suffix(RV,"irmos")) {      CT=removeSuffix(CT,"irmos");      return true;    }    if (suffix(RV,"iamos")) {      CT=removeSuffix(CT,"iamos");      return true;    }    if (suffix(RV,"armos")) {      CT=removeSuffix(CT,"armos");      return true;    }    if (suffix(RV,"ermos")) {      CT=removeSuffix(CT,"ermos");      return true;    }    if (suffix(RV,"areis")) {      CT=removeSuffix(CT,"areis");      return true;    }    if (suffix(RV,"ereis")) {      CT=removeSuffix(CT,"ereis");      return true;    }    if (suffix(RV,"ireis")) {      CT=removeSuffix(CT,"ireis");      return true;    }    if (suffix(RV,"asses")) {      CT=removeSuffix(CT,"asses");      return true;    }    if (suffix(RV,"esses")) {      CT=removeSuffix(CT,"esses");      return true;    }    if (suffix(RV,"isses")) {      CT=removeSuffix(CT,"isses");      return true;    }    if (suffix(RV,"astes")) {      CT=removeSuffix(CT,"astes");      return true;    }    if (suffix(RV,"assem")) {      CT=removeSuffix(CT,"assem");      return true;    }    if (suffix(RV,"essem")) {      CT=removeSuffix(CT,"essem");      return true;    }    if (suffix(RV,"issem")) {      CT=removeSuffix(CT,"issem");      return true;    }    if (suffix(RV,"ardes")) {      CT=removeSuffix(CT,"ardes");      return true;    }    if (suffix(RV,"erdes")) {      CT=removeSuffix(CT,"erdes");      return true;    }    if (suffix(RV,"irdes")) {      CT=removeSuffix(CT,"irdes");      return true;    }    if (suffix(RV,"ariam")) {      CT=removeSuffix(CT,"ariam");      return true;    }    if (suffix(RV,"eriam")) {      CT=removeSuffix(CT,"eriam");      return true;    }    if (suffix(RV,"iriam")) {      CT=removeSuffix(CT,"iriam");      return true;    }    if (suffix(RV,"arias")) {      CT=removeSuffix(CT,"arias");      return true;    }    if (suffix(RV,"erias")) {      CT=removeSuffix(CT,"erias");      return true;    }    if (suffix(RV,"irias")) {      CT=removeSuffix(CT,"irias");      return true;    }    if (suffix(RV,"estes")) {      CT=removeSuffix(CT,"estes");      return true;    }    if (suffix(RV,"istes")) {      CT=removeSuffix(CT,"istes");      return true;    }    if (suffix(RV,"areis")) {      CT=removeSuffix(CT,"areis");      return true;    }    if (suffix(RV,"aveis")) {      CT=removeSuffix(CT,"aveis");      return true;    }  }  if (RV.length() >= 4) {    if (suffix(RV,"aria")) {      CT=removeSuffix(CT,"aria");      return true;    }    if (suffix(RV,"eria")) {      CT=removeSuffix(CT,"eria");      return true;    }    if (suffix(RV,"iria")) {      CT=removeSuffix(CT,"iria");      return true;    }    if (suffix(RV,"asse")) {      CT=removeSuffix(CT,"asse");      return true;    }    if (suffix(RV,"esse")) {      CT=removeSuffix(CT,"esse");      return true;    }    if (suffix(RV,"isse")) {      CT=removeSuffix(CT,"isse");      return true;    }    if (suffix(RV,"aste")) {      CT=removeSuffix(CT,"aste");      return true;    }    if (suffix(RV,"este")) {      CT=removeSuffix(CT,"este");      return true;    }    if (suffix(RV,"iste")) {      CT=removeSuffix(CT,"iste");      return true;    }    if (suffix(RV,"arei")) {      CT=removeSuffix(CT,"arei");      return true;    }    if (suffix(RV,"erei")) {      CT=removeSuffix(CT,"erei");      return true;    }    if (suffix(RV,"irei")) {      CT=removeSuffix(CT,"irei");      return true;    }    if (suffix(RV,"aram")) {      CT=removeSuffix(CT,"aram");      return true;    }    if (suffix(RV,"eram")) {      CT=removeSuffix(CT,"eram");      return true;    }    if (suffix(RV,"iram")) {      CT=removeSuffix(CT,"iram");      return true;    }    if (suffix(RV,"avam")) {      CT=removeSuffix(CT,"avam");      return true;    }    if (suffix(RV,"arem")) {      CT=removeSuffix(CT,"arem");      return true;    }    if (suffix(RV,"erem")) {      CT=removeSuffix(CT,"erem");      return true;    }    if (suffix(RV,"irem")) {      CT=removeSuffix(CT,"irem");      return true;    }    if (suffix(RV,"ando")) {      CT=removeSuffix(CT,"ando");      return true;    }    if (suffix(RV,"endo")) {      CT=removeSuffix(CT,"endo");      return true;    }    if (suffix(RV,"indo")) {      CT=removeSuffix(CT,"indo");      return true;    }    if (suffix(RV,"arao")) {      CT=removeSuffix(CT,"arao");      return true;    }    if (suffix(RV,"erao")) {      CT=removeSuffix(CT,"erao");      return true;    }    if (suffix(RV,"irao")) {      CT=removeSuffix(CT,"irao");      return true;    }    if (suffix(RV,"adas")) {      CT=removeSuffix(CT,"adas");      return true;    }    if (suffix(RV,"idas")) {      CT=removeSuffix(CT,"idas");      return true;    }    if (suffix(RV,"aras")) {      CT=removeSuffix(CT,"aras");      return true;    }    if (suffix(RV,"eras")) {      CT=removeSuffix(CT,"eras");      return true;    }    if (suffix(RV,"iras")) {      CT=removeSuffix(CT,"iras");      return true;    }    if (suffix(RV,"avas")) {      CT=removeSuffix(CT,"avas");      return true;    }    if (suffix(RV,"ares")) {      CT=removeSuffix(CT,"ares");      return true;    }    if (suffix(RV,"eres")) {      CT=removeSuffix(CT,"eres");      return true;    }    if (suffix(RV,"ires")) {      CT=removeSuffix(CT,"ires");      return true;    }    if (suffix(RV,"ados")) {      CT=removeSuffix(CT,"ados");      return true;    }    if (suffix(RV,"idos")) {      CT=removeSuffix(CT,"idos");      return true;    }    if (suffix(RV,"amos")) {      CT=removeSuffix(CT,"amos");      return true;    }    if (suffix(RV,"emos")) {      CT=removeSuffix(CT,"emos");      return true;    }    if (suffix(RV,"imos")) {      CT=removeSuffix(CT,"imos");      return true;    }    if (suffix(RV,"iras")) {      CT=removeSuffix(CT,"iras");      return true;    }    if (suffix(RV,"ieis")) {      CT=removeSuffix(CT,"ieis");      return true;    }  }  if (RV.length() >= 3) {    if (suffix(RV,"ada")) {      CT=removeSuffix(CT,"ada");      return true;    }    if (suffix(RV,"ida")) {      CT=removeSuffix(CT,"ida");      return true;    }    if (suffix(RV,"ara")) {      CT=removeSuffix(CT,"ara");      return true;    }    if (suffix(RV,"era")) {      CT=removeSuffix(CT,"era");      return true;    }    if (suffix(RV,"ira")) {      CT=removeSuffix(CT,"ava");      return true;    }    if (suffix(RV,"iam")) {      CT=removeSuffix(CT,"iam");      return true;    }    if (suffix(RV,"ado")) {      CT=removeSuffix(CT,"ado");      return true;    }    if (suffix(RV,"ido")) {      CT=removeSuffix(CT,"ido");      return true;    }    if (suffix(RV,"ias")) {      CT=removeSuffix(CT,"ias");      return true;    }    if (suffix(RV,"ais")) {      CT=removeSuffix(CT,"ais");      return true;    }    if (suffix(RV,"eis")) {      CT=removeSuffix(CT,"eis");      return true;    }    if (suffix(RV,"ira")) {      CT=removeSuffix(CT,"ira");      return true;    }    if (suffix(RV,"ear")) {      CT=removeSuffix(CT,"ear");      return true;    }  }  if (RV.length() >= 2) {    if (suffix(RV,"ia")) {      CT=removeSuffix(CT,"ia");      return true;    }    if (suffix(RV,"ei")) {      CT=removeSuffix(CT,"ei");      return true;    }    if (suffix(RV,"am")) {      CT=removeSuffix(CT,"am");      return true;    }    if (suffix(RV,"em")) {      CT=removeSuffix(CT,"em");      return true;    }    if (suffix(RV,"ar")) {      CT=removeSuffix(CT,"ar");      return true;    }    if (suffix(RV,"er")) {      CT=removeSuffix(CT,"er");      return true;    }    if (suffix(RV,"ir")) {      CT=removeSuffix(CT,"ir");      return true;    }    if (suffix(RV,"as")) {      CT=removeSuffix(CT,"as");      return true;    }    if (suffix(RV,"es")) {      CT=removeSuffix(CT,"es");      return true;    }    if (suffix(RV,"is")) {      CT=removeSuffix(CT,"is");      return true;    }    if (suffix(RV,"eu")) {      CT=removeSuffix(CT,"eu");      return true;    }    if (suffix(RV,"iu")) {      CT=removeSuffix(CT,"iu");      return true;    }    if (suffix(RV,"iu")) {      CT=removeSuffix(CT,"iu");      return true;    }    if (suffix(RV,"ou")) {      CT=removeSuffix(CT,"ou");      return true;    }  }  return false;}  }
class C{  public static int lengthOfLongestSubstring(String s){  if (s == null || s.length() == 0)   return 0;  Map<Character,Integer> map=new HashMap<Character,Integer>();  int start=0;  int max=0;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    start=Math.max(start,(map.containsKey(c)) ? map.get(c) + 1 : 0);    max=Math.max(max,i - start + 1);    map.put(c,i);  }  return max;}  }
class C{  public ColorCellRenderer(){  panel=new JPanel();  panel.setOpaque(true);}  }
class C{  @Override final public boolean generateEventID(){  return false;}  }
class C{  public Policy build(){  return policy;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(order);  sb.append(" ");  sb.append(preference);  sb.append(" ");  sb.append(byteArrayToString(flags,true));  sb.append(" ");  sb.append(byteArrayToString(service,true));  sb.append(" ");  sb.append(byteArrayToString(regexp,true));  sb.append(" ");  sb.append(replacement);  return sb.toString();}  }
class C{  private int calculateLastPaintableOffset(int pos,int clipX1,int clipY1,int clipX2,int clipY2){  final int len=components.size();  if (pos >= len - 1) {    return len - 1;  }  final Layout l=getLayout();  if (l.getClass() == BoxLayout.class) {    if (((BoxLayout)l).getAxis() == BoxLayout.Y_AXIS) {      Component c=null;      int cy1=-1;      final int end=len - 1;      pos++;      do {        c=components.get(pos);        cy1=c.getBounds().getY();      } while (++pos <= end && cy1 <= clipY2);      return pos - 1;    }  }  return len - 1;}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public boolean with_fieldref(){  return soot.PhaseOptions.getBoolean(options,"with-fieldref");}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override protected void drawPrimaryLineAsPath(XYItemRendererState state,Graphics2D g2,XYPlot plot,XYDataset dataset,int pass,int series,int item,ValueAxis xAxis,ValueAxis yAxis,Rectangle2D dataArea){  XYSplineState s=(XYSplineState)state;  RectangleEdge xAxisLocation=plot.getDomainAxisEdge();  RectangleEdge yAxisLocation=plot.getRangeAxisEdge();  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  double transX1=xAxis.valueToJava2D(x1,dataArea,xAxisLocation);  double transY1=yAxis.valueToJava2D(y1,dataArea,yAxisLocation);  if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {    Point2D p=plot.getOrientation() == PlotOrientation.HORIZONTAL ? new Point2D.Float((float)transY1,(float)transX1) : new Point2D.Float((float)transX1,(float)transY1);    if (!s.points.contains(p))     s.points.add(p);  }  if (item == dataset.getItemCount(series) - 1) {    if (s.points.size() > 1) {      Point2D origin;      if (this.fillType == FillType.TO_ZERO) {        float xz=(float)xAxis.valueToJava2D(0,dataArea,yAxisLocation);        float yz=(float)yAxis.valueToJava2D(0,dataArea,yAxisLocation);        origin=plot.getOrientation() == PlotOrientation.HORIZONTAL ? new Point2D.Float(yz,xz) : new Point2D.Float(xz,yz);      } else       if (this.fillType == FillType.TO_LOWER_BOUND) {        float xlb=(float)xAxis.valueToJava2D(xAxis.getLowerBound(),dataArea,xAxisLocation);        float ylb=(float)yAxis.valueToJava2D(yAxis.getLowerBound(),dataArea,yAxisLocation);        origin=plot.getOrientation() == PlotOrientation.HORIZONTAL ? new Point2D.Float(ylb,xlb) : new Point2D.Float(xlb,ylb);      } else {        float xub=(float)xAxis.valueToJava2D(xAxis.getUpperBound(),dataArea,xAxisLocation);        float yub=(float)yAxis.valueToJava2D(yAxis.getUpperBound(),dataArea,yAxisLocation);        origin=plot.getOrientation() == PlotOrientation.HORIZONTAL ? new Point2D.Float(yub,xub) : new Point2D.Float(xub,yub);      }      Point2D cp0=s.points.get(0);      s.seriesPath.moveTo(cp0.getX(),cp0.getY());      if (this.fillType != FillType.NONE) {        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {          s.fillArea.moveTo(origin.getX(),cp0.getY());        } else {          s.fillArea.moveTo(cp0.getX(),origin.getY());        }        s.fillArea.lineTo(cp0.getX(),cp0.getY());      }      if (s.points.size() == 2) {        Point2D cp1=s.points.get(1);        if (this.fillType != FillType.NONE) {          s.fillArea.lineTo(cp1.getX(),cp1.getY());          s.fillArea.lineTo(cp1.getX(),origin.getY());          s.fillArea.closePath();        }        s.seriesPath.lineTo(cp1.getX(),cp1.getY());      } else {        int np=s.points.size();        float[] d=new float[np];        float[] x=new float[np];        float y, oldy;        float t, oldt;        float[] a=new float[np];        float t1;        float t2;        float[] h=new float[np];        for (int i=0; i < np; i++) {          Point2D.Float cpi=(Point2D.Float)s.points.get(i);          x[i]=cpi.x;          d[i]=cpi.y;        }        for (int i=1; i <= np - 1; i++)         h[i]=x[i] - x[i - 1];        float[] sub=new float[np - 1];        float[] diag=new float[np - 1];        float[] sup=new float[np - 1];        for (int i=1; i <= np - 2; i++) {          diag[i]=(h[i] + h[i + 1]) / 3;          sup[i]=h[i + 1] / 6;          sub[i]=h[i] / 6;          a[i]=(d[i + 1] - d[i]) / h[i + 1] - (d[i] - d[i - 1]) / h[i];        }        solveTridiag(sub,diag,sup,a,np - 2);        oldt=x[0];        oldy=d[0];        for (int i=1; i <= np - 1; i++) {          for (int j=1; j <= this.precision; j++) {            t1=(h[i] * j) / this.precision;            t2=h[i] - t1;            y=((-a[i - 1] / 6 * (t2 + h[i]) * t1 + d[i - 1]) * t2 + (-a[i] / 6 * (t1 + h[i]) * t2 + d[i]) * t1) / h[i];            t=x[i - 1] + t1;            s.seriesPath.lineTo(t,y);            if (this.fillType != FillType.NONE) {              s.fillArea.lineTo(t,y);            }          }        }      }      if (this.fillType != FillType.NONE) {        if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {          s.fillArea.lineTo(origin.getX(),s.points.get(s.points.size() - 1).getY());        } else {          s.fillArea.lineTo(s.points.get(s.points.size() - 1).getX(),origin.getY());        }        s.fillArea.closePath();      }      if (this.fillType != FillType.NONE) {        Paint fp=getSeriesFillPaint(series);        if (this.gradientPaintTransformer != null && fp instanceof GradientPaint) {          GradientPaint gp=this.gradientPaintTransformer.transform((GradientPaint)fp,s.fillArea);          g2.setPaint(gp);        } else {          g2.setPaint(fp);        }        g2.fill(s.fillArea);        s.fillArea.reset();      }      drawFirstPassShape(g2,pass,series,item,s.seriesPath);    }    s.points=new ArrayList<Point2D>();  }}  }
class C{  public static String b64Hash2octalHash(final String b64Hash){  return Digest.encodeOctal(Base64Order.enhancedCoder.decode(b64Hash));}  }
class C{  private Batch parseArgs(String[] args){  Batch batch=new Batch();  try {    args=CommandLine.parse(args);  } catch (  FileNotFoundException e) {    error("rmic.cant.read",e.getMessage());    return null;  }catch (  IOException e) {    e.printStackTrace(out);    return null;  }  for (int i=0; i < args.length; i++) {    if (args[i] == null) {      continue;    } else     if (args[i].equals("-Xnew")) {      args[i]=null;    } else     if (args[i].equals("-show")) {      error("rmic.option.unsupported",args[i]);      usage();      return null;    } else     if (args[i].equals("-O")) {      error("rmic.option.unsupported",args[i]);      args[i]=null;    } else     if (args[i].equals("-debug")) {      error("rmic.option.unsupported",args[i]);      args[i]=null;    } else     if (args[i].equals("-depend")) {      error("rmic.option.unsupported",args[i]);      args[i]=null;    } else     if (args[i].equals("-keep") || args[i].equals("-keepgenerated")) {      batch.keepGenerated=true;      args[i]=null;    } else     if (args[i].equals("-g")) {      batch.debug=true;      args[i]=null;    } else     if (args[i].equals("-nowarn")) {      batch.noWarn=true;      args[i]=null;    } else     if (args[i].equals("-nowrite")) {      batch.noWrite=true;      args[i]=null;    } else     if (args[i].equals("-verbose")) {      batch.verbose=true;      args[i]=null;    } else     if (args[i].equals("-Xnocompile")) {      batch.noCompile=true;      batch.keepGenerated=true;      args[i]=null;    } else     if (args[i].equals("-bootclasspath")) {      if ((i + 1) >= args.length) {        error("rmic.option.requires.argument",args[i]);        usage();        return null;      }      if (batch.bootClassPath != null) {        error("rmic.option.already.seen",args[i]);        usage();        return null;      }      args[i]=null;      batch.bootClassPath=args[++i];      assert batch.bootClassPath != null;      args[i]=null;    } else     if (args[i].equals("-extdirs")) {      if ((i + 1) >= args.length) {        error("rmic.option.requires.argument",args[i]);        usage();        return null;      }      if (batch.extDirs != null) {        error("rmic.option.already.seen",args[i]);        usage();        return null;      }      args[i]=null;      batch.extDirs=args[++i];      assert batch.extDirs != null;      args[i]=null;    } else     if (args[i].equals("-classpath")) {      if ((i + 1) >= args.length) {        error("rmic.option.requires.argument",args[i]);        usage();        return null;      }      if (batch.classPath != null) {        error("rmic.option.already.seen",args[i]);        usage();        return null;      }      args[i]=null;      batch.classPath=args[++i];      assert batch.classPath != null;      args[i]=null;    } else     if (args[i].equals("-d")) {      if ((i + 1) >= args.length) {        error("rmic.option.requires.argument",args[i]);        usage();        return null;      }      if (batch.destDir != null) {        error("rmic.option.already.seen",args[i]);        usage();        return null;      }      args[i]=null;      batch.destDir=new File(args[++i]);      assert batch.destDir != null;      args[i]=null;      if (!batch.destDir.exists()) {        error("rmic.no.such.directory",batch.destDir.getPath());        usage();        return null;      }    } else     if (args[i].equals("-v1.1") || args[i].equals("-vcompat") || args[i].equals("-v1.2")) {      Generator gen=new JrmpGenerator();      batch.generators.add(gen);      if (!gen.parseArgs(args,this)) {        return null;      }    } else     if (args[i].equalsIgnoreCase("-iiop")) {      error("rmic.option.unimplemented",args[i]);      return null;    } else     if (args[i].equalsIgnoreCase("-idl")) {      error("rmic.option.unimplemented",args[i]);      return null;    } else     if (args[i].equalsIgnoreCase("-xprint")) {      error("rmic.option.unimplemented",args[i]);      return null;    }  }  for (int i=0; i < args.length; i++) {    if (args[i] != null) {      if (args[i].startsWith("-")) {        error("rmic.no.such.option",args[i]);        usage();        return null;      } else {        batch.classes.add(args[i]);      }    }  }  if (batch.classes.isEmpty()) {    usage();    return null;  }  if (batch.generators.isEmpty()) {    batch.generators.add(new JrmpGenerator());  }  return batch;}  }
class C{  @Override public boolean supportsResultSetType(int type){  debugCodeCall("supportsResultSetType",type);  return type != ResultSet.TYPE_SCROLL_SENSITIVE;}  }
class C{  public void addGVTListener(Document doc){  SVG12BridgeEventSupport.addGVTListener(this,doc);}  }
class C{  public void add(final String npcName,final HealerBehaviour behaviour){  Pair<String,HealerBehaviour> pair=new Pair<String,HealerBehaviour>(npcName,behaviour);  healers.add(pair);}  }
class C{  private void writeSecurity(PrintStream writer) throws IOException {  List<User> users=getContainer().getConfiguration().getUsers();  if (users != null) {    List<String> groups=new ArrayList<String>();    for (    User u : users) {      groups.addAll(u.getRoles());    }    if (!groups.isEmpty()) {      writer.println("    <application-bnd>");      for (      String group : groups) {        writer.print("      <security-role name=\"");        writer.print(group);        writer.println("\">");        writer.print("        <group name=\"");        writer.print(group);        writer.print("\" access-id=\"");        writer.print(group);        writer.println("\"/>");        writer.println("      </security-role>");      }      writer.println("    </application-bnd>");    }  }}  }
class C{  void scheduleHeronWorkers(PackingPlan topologyPacking) throws ContainerAllocationException {  this.componentRamMap=topologyPacking.getComponentRamDistribution();  scheduleHeronWorkers(topologyPacking.getContainers());}  }
class C{  private void init(){  if (!append) {    try {      writeHeader();      writeMetadataTag(0,videoCodecId,audioCodecId);    } catch (    IOException e) {      log.warn("Exception writing header or intermediate meta data",e);    }  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append('[');  final int end=offset + length;  for (int i=offset; i < end; i++) {    if (i > offset) {      sb.append(' ');    }    sb.append(Integer.toHexString(bytes[i] & 0xff));  }  sb.append(']');  return sb.toString();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public final boolean isVertical(){  final Split parent=getParent();  return parent != null && parent.isRowLayout();}  }
class C{  public void printTree(PrintWriter p,Node node,int maxDepth,Node markNode){  printTree(p,node,maxDepth,markNode,1);  p.println();  p.flush();}  }
class C{  public static void assertNotEqual(byte expected,byte actual){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected != actual);}  }
class C{  public boolean contains(final double[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  void revokeRight(DbObject object){  if (grantedRights == null) {    return;  }  grantedRights.remove(object);  if (grantedRights.size() == 0) {    grantedRights=null;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  if (node != null && node.getSorter() != null)   return node.getSorter().getName();  return null;}  }
class C{  private static Node[] _toNodeArray(Document doc,Object o){  if (o instanceof Node)   return new Node[]{(Node)o};  if (o instanceof Node[])   return ((Node[])o); else   if (o instanceof NamedNodeMap) {    NamedNodeMap map=(NamedNodeMap)o;    int len=map.getLength();    Node[] nodes=new Node[len];    for (int i=0; i < len; i++) {      nodes[i]=map.item(i);    }    return nodes;  } else   if (o instanceof XMLAttributes) {    return _toNodeArray(doc,((XMLAttributes)o).toNamedNodeMap());  } else   if (o instanceof NodeList) {    NodeList list=(NodeList)o;    int len=list.getLength();    Node[] nodes=new Node[len];    for (int i=0; i < nodes.length; i++) {      nodes[i]=list.item(i);    }    return nodes;  }  return null;}  }
class C{  @NonNull public Builder addClass(@NonNull String className){  Class<?> clazz=getClass(className);  if (clazz == null) {    addError(className);    return this;  }  return addClass(clazz);}  }
class C{  public void debugPrintObservations(){  System.out.println("Src\tDst\tPast\tc(s,d,p)\tc(s,p)\tc(d,p)\tc(p)");  for (int pastVal=0; pastVal < base_power_k; pastVal++) {    for (int destVal=0; destVal < base; destVal++) {      for (int sourceVal=0; sourceVal < base_power_l; sourceVal++) {        System.out.println(sourceVal + "\t" + destVal+ "\t"+ pastVal+ "\t"+ sourceNextPastCount[sourceVal][destVal][pastVal]+ "\t\t"+ sourcePastCount[sourceVal][pastVal]+ "\t"+ nextPastCount[destVal][pastVal]+ "\t"+ pastCount[pastVal]);      }    }  }}  }
class C{  public void writeTo(byte[] bytes,int offset) throws IOException {  flush();  final long end=file.length;  long pos=0;  int buffer=0;  int bytesUpto=offset;  while (pos < end) {    int length=BUFFER_SIZE;    long nextPos=pos + length;    if (nextPos > end) {      length=(int)(end - pos);    }    System.arraycopy(file.getBuffer(buffer++),0,bytes,bytesUpto,length);    bytesUpto+=length;    pos=nextPos;  }}  }
class C{  private int storePartialItemStack(ItemStack par1ItemStack){  Item item=par1ItemStack.getItem();  int i=par1ItemStack.stackSize;  int j;  if (par1ItemStack.getMaxStackSize() == 1) {    j=this.getFirstEmptyStack();    if (j < 0) {      return i;    } else {      if (this.mainInventory[j] == null) {        this.mainInventory[j]=ItemStack.copyItemStack(par1ItemStack);      }      return 0;    }  } else {    j=this.storeItemStack(par1ItemStack);    if (j < 0) {      j=this.getFirstEmptyStack();    }    if (j < 0) {      return i;    } else {      if (this.mainInventory[j] == null) {        this.mainInventory[j]=new ItemStack(item,0,par1ItemStack.getItemDamage());        if (par1ItemStack.hasTagCompound()) {          this.mainInventory[j].setTagCompound((NBTTagCompound)par1ItemStack.getTagCompound().copy());        }      }      int k=i;      if (i > this.mainInventory[j].getMaxStackSize() - this.mainInventory[j].stackSize) {        k=this.mainInventory[j].getMaxStackSize() - this.mainInventory[j].stackSize;      }      if (k > this.getInventoryStackLimit() - this.mainInventory[j].stackSize) {        k=this.getInventoryStackLimit() - this.mainInventory[j].stackSize;      }      if (k == 0) {        return i;      } else {        i-=k;        this.mainInventory[j].stackSize+=k;        this.mainInventory[j].animationsToGo=5;        return i;      }    }  }}  }
class C{  public static HierarchyListener add(HierarchyListener a,HierarchyListener b){  return (HierarchyListener)addInternal(a,b);}  }
class C{  public boolean putSingleTop(RootFragment fragment){  ArrayList<RootFragment> lastList=stackList.get(stackList.size() - 1);  if (lastList.isEmpty()) {    lastList.add(fragment);    return false;  } else {    RootFragment last=lastList.get(lastList.size() - 1);    if (last.getClass().getName().equals(fragment.getClass().getName())) {      fragment.onNewIntent();      return true;    } else {      lastList.add(fragment);      return false;    }  }}  }
class C{  public HistoryUpdateDetails clone(){  HistoryUpdateDetails result=new HistoryUpdateDetails();  result.NodeId=NodeId;  return result;}  }
class C{  public ZoomEventFilter(){  super(InputEvent.BUTTON1_MASK);}  }
class C{  public CResolveAllFunctionDialog(final Window owner,final IDatabase database,final INaviAddressSpace addressSpace){  Preconditions.checkNotNull(addressSpace,"IE02353: addressSpace argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE02354: Database argument can't be null");  Preconditions.checkArgument(database.isLoaded(),"Error: Database must be loaded before functions can be redirected");  m_targetModules=loadModules(addressSpace.getContent().getModules());  m_sourceModules=loadModules(addressSpace.getContent().getModules());  final String message=String.format("Do you really want to resolve all functions in the address space '%s'?",addressSpace.getConfiguration().getName());  resultDialog(questionDialog(owner,message));}  }
class C{  private void assertNullTransaction(ReplDBMSEvent rde,THLParallelQueue tpq) throws Exception {  if (rde != null) {    logger.error("Transaction is not blocked! Parallel queue status: " + tpq.status().toString());    throw new Exception("Parallel queue unexpectedly released a transaction that should be blocked: seqno=" + rde.getSeqno() + " timestamp="+ rde.getExtractedTstamp());  }}  }
class C{  public void testRenameDirectoryParentRoot() throws Exception {  IgfsPath dir1=new IgfsPath("/dir1");  IgfsPath dir2=new IgfsPath("/dir2");  create(igfs,paths(dir1),null);  igfs.rename(dir1,dir2);  checkExist(igfs,igfsSecondary,dir2);  checkNotExist(igfs,igfsSecondary,dir1);}  }
class C{  public boolean addObject(MathObject mObj){  if (getObjects().contains(mObj)) {    return true;  }  Rectangle printablePage=new Rectangle(0,0,getWidth(),getHeight());  while (getParentDoc().objectIDInUse(mObj.getObjectID())) {    mObj.setObjectID(UUID.randomUUID());  }  if (!objects.contains(mObj)) {    objects.add(mObj);    mObj.setParentContainer(this);    return true;  }  return false;}  }
class C{  public static ClassNode make(String name){  if (name == null || name.length() == 0)   return DYNAMIC_TYPE;  for (int i=0; i < primitiveClassNames.length; i++) {    if (primitiveClassNames[i].equals(name))     return types[i];  }  for (int i=0; i < classes.length; i++) {    String cname=classes[i].getName();    if (name.equals(cname))     return types[i];  }  return makeWithoutCaching(name);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMSubImageRefElement(prefix,(AbstractDocument)doc);}  }
class C{  public void addLayoutEditor(LayoutEditor panel){  if (panels.size() > 0) {    for (int i=0; i < panels.size(); i++) {      LayoutEditor ed=panels.get(i);      if (ed == panel) {        return;      }    }  }  panels.add(panel);}  }
class C{  private static void unsafeBinaryScalar(MatrixBlock m1,MatrixBlock ret,ScalarOperator op) throws DMLRuntimeException {  if (m1.isEmptyBlock(false)) {    double val=op.executeScalar(0);    if (val != 0)     ret.reset(ret.rlen,ret.clen,val);    return;  }  if (ret.sparse)   throw new DMLRuntimeException("Unsupported unsafe binary scalar operations over sparse output representation.");  if (m1.sparse) {    ret.allocateDenseBlock();    SparseBlock a=m1.sparseBlock;    double[] c=ret.denseBlock;    int m=m1.rlen;    int n=m1.clen;    double cval0=op.executeScalar(0);    Arrays.fill(c,cval0);    int nnz=m * n;    for (int i=0, cix=0; i < m; i++, cix+=n) {      if (!a.isEmpty(i)) {        int apos=a.pos(i);        int alen=a.size(i);        int[] aix=a.indexes(i);        double[] avals=a.values(i);        for (int j=apos; j < apos + alen; j++) {          double val=op.executeScalar(avals[j]);          c[cix + aix[j]]=val;          nnz-=(val == 0) ? 1 : 0;        }      }    }    ret.nonZeros=nnz;  } else {    denseBinaryScalar(m1,ret,op);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSemosLibraryArea(zone);}  }
class C{  @SuppressWarnings("unchecked") public static <E>Iterator<E> recast(Iterator<? extends E> iterator){  return ((Iterator<E>)iterator);}  }
class C{  public int prune(double[] alphas,double[] errors,Instances test) throws Exception {  Vector<LMTNode> nodeList;  CompareNode comparator=new CompareNode();  treeErrors();  calculateAlphas();  nodeList=getNodes();  boolean prune=(nodeList.size() > 0);  alphas[0]=0;  Evaluation eval;  if (errors != null) {    eval=new Evaluation(test);    eval.evaluateModel(this,test);    errors[0]=eval.errorRate();  }  int iteration=0;  while (prune) {    iteration++;    LMTNode nodeToPrune=Collections.min(nodeList,comparator);    nodeToPrune.m_isLeaf=true;    alphas[iteration]=nodeToPrune.m_alpha;    if (errors != null) {      eval=new Evaluation(test);      eval.evaluateModel(this,test);      errors[iteration]=eval.errorRate();    }    treeErrors();    calculateAlphas();    nodeList=getNodes();    prune=(nodeList.size() > 0);  }  alphas[iteration + 1]=1.0;  return iteration;}  }
class C{  public static String reorderModifiers(String text) throws FormatterException {  return reorderModifiers(text,Collections.singleton(Range.closedOpen(0,text.length())));}  }
class C{  public Shape createCancelIcon(int x,int y,int w,int h){  final double xMid=x + w / 2.0;  final double yMid=y + h / 2.0;  path.reset();  path.moveTo(xMid,y);  path.quadTo(x,y,x,yMid);  path.quadTo(x,y + h,xMid,y + h);  path.quadTo(x + w,y + h,x + w,yMid);  path.quadTo(x + w,y,xMid,y);  path.closePath();  final double xOffsetL=w / 2.0 - 3;  final double xOffsetS=w / 2.0 - 4;  final double yOffsetL=h / 2.0 - 3;  final double yOffsetS=h / 2.0 - 4;  final double offsetC=1.5;  path.moveTo(xMid,yMid - offsetC);  path.lineTo(xMid + xOffsetS,yMid - yOffsetL);  path.lineTo(yMid + xOffsetL,yMid - yOffsetS);  path.lineTo(xMid + offsetC,yMid);  path.lineTo(xMid + xOffsetL,yMid + yOffsetS);  path.lineTo(xMid + xOffsetS,yMid + yOffsetL);  path.lineTo(xMid,yMid + offsetC);  path.lineTo(xMid - xOffsetS,yMid + yOffsetL);  path.lineTo(xMid - xOffsetL,yMid + yOffsetS);  path.lineTo(xMid - offsetC,yMid);  path.lineTo(xMid - xOffsetL,yMid - yOffsetS);  path.lineTo(xMid - xOffsetS,yMid - yOffsetL);  path.closePath();  return path;}  }
class C{  @Override public boolean handleArg(final AtomicInteger i,final String[] args){  if (super.handleArg(i,args)) {    return true;  }  final String arg=args[i.get()];  if (arg.equals("-bufferMode")) {    final String s=args[i.incrementAndGet()];    bufferModeOverride=BufferMode.valueOf(s);  } else   if (arg.equals("-namespace")) {    final String s=args[i.incrementAndGet()];    namespaceOverride=s;  } else {    return false;  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Sequence<T> wrapStart(Sequence<T> sequence,T startToken){  Object[] arr=new Object[sequence.size() + 1];  arr[0]=startToken;  System.arraycopy(sequence.elements(),0,arr,1,sequence.size());  return new ArraySequence<T>(true,(T[])arr);}  }
class C{  protected synchronized boolean loadJar(String jarFileName){  boolean ret=loadedJars.contains(jarFileName);  if (!ret) {    try {      logger.fine("adding " + jarFileName + " to classpath");      ClasspathHacker.addFile(jarFileName);    } catch (    IOException ioe) {      logger.warning("couldn't add map data jar file: " + jarFileName);    }    loadedJars.add(jarFileName);  }  return !ret;}  }
class C{  public NorwegianMinimalStemFilterFactory(Map<String,String> args){  super(args);  String variant=get(args,"variant");  if (variant == null || "nb".equals(variant)) {    flags=BOKMAAL;  } else   if ("nn".equals(variant)) {    flags=NYNORSK;  } else   if ("no".equals(variant)) {    flags=BOKMAAL | NYNORSK;  } else {    throw new IllegalArgumentException("invalid variant: " + variant);  }  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static boolean truncatedEquals(final Calendar cal1,final Calendar cal2,final int field){  return truncatedCompareTo(cal1,cal2,field) == 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static ClientPrepareResult createParameterParts(String queryString,boolean noBackslashEscapes){  try {    boolean reWritablePrepare=false;    boolean multipleQueriesPrepare=true;    List<byte[]> partList=new ArrayList<>();    LexState state=LexState.Normal;    char lastChar='\0';    boolean endingSemicolon=false;    boolean singleQuotes=false;    int lastParameterPosition=0;    char[] query=queryString.toCharArray();    int queryLength=query.length;    for (int i=0; i < queryLength; i++) {      if (state == LexState.Escape)       state=LexState.String;      char car=query[i];switch (car) {case '*':        if (state == LexState.Normal && lastChar == '/')         state=LexState.SlashStarComment;      break;case '/':    if (state == LexState.SlashStarComment && lastChar == '*') {      state=LexState.Normal;    } else     if (state == LexState.Normal && lastChar == '/') {      state=LexState.EOLComment;    }  break;case '#':if (state == LexState.Normal) state=LexState.EOLComment;break;case '-':if (state == LexState.Normal && lastChar == '-') {state=LexState.EOLComment;multipleQueriesPrepare=false;}break;case '\n':if (state == LexState.EOLComment) {multipleQueriesPrepare=true;state=LexState.Normal;}break;case '"':if (state == LexState.Normal) {state=LexState.String;singleQuotes=false;} else if (state == LexState.String && !singleQuotes) {state=LexState.Normal;}break;case '\'':if (state == LexState.Normal) {state=LexState.String;singleQuotes=true;} else if (state == LexState.String && singleQuotes) {state=LexState.Normal;}break;case '\\':if (noBackslashEscapes) {break;}if (state == LexState.String) state=LexState.Escape;break;case ';':if (state == LexState.Normal) {endingSemicolon=true;multipleQueriesPrepare=false;}break;case '?':if (state == LexState.Normal) {partList.add(queryString.substring(lastParameterPosition,i).getBytes("UTF-8"));lastParameterPosition=i + 1;}break;case '`':if (state == LexState.Backtick) {state=LexState.Normal;} else if (state == LexState.Normal) {state=LexState.Backtick;}break;default :if (state == LexState.Normal && endingSemicolon && ((byte)car >= 40)) {endingSemicolon=false;multipleQueriesPrepare=true;}break;}lastChar=car;}if (lastParameterPosition == 0) {partList.add(queryString.getBytes("UTF-8"));} else {partList.add(queryString.substring(lastParameterPosition,queryLength).getBytes("UTF-8"));}return new ClientPrepareResult(queryString,partList,reWritablePrepare,multipleQueriesPrepare,false);} catch (UnsupportedEncodingException u) {return null;}}  }
class C{  public static boolean isGWTProject(IProject project){  try {    return project.isAccessible() && (project.hasNature(GWTNature.NATURE_ID) || FacetedProjectFramework.hasProjectFacet(project,"com.gwtplugins.gwt.facet"));  } catch (  CoreException e) {    GWTPluginLog.logError(e);  }  return false;}  }
class C{  public static Bound<String> withoutValidation(){  return new Bound<>(DEFAULT_TEXT_CODER).withoutValidation();}  }
class C{  public static boolean isFinal(int flags){  return (flags & FINAL) != 0;}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  for (int i=0, len=currentSection.activeHandlers.size(); i < len; i++)   ((ContentHandler)(currentSection.activeHandlers.elementAt(i))).ignorableWhitespace(ch,start,length);}  }
class C{  public void abortMultipartUpload(AbortMultipartUploadRequest abortMultipartUploadRequest) throws OSSException, ClientException {  assertParameterNotNull(abortMultipartUploadRequest,"abortMultipartUploadRequest");  String key=abortMultipartUploadRequest.getKey();  String bucketName=abortMultipartUploadRequest.getBucketName();  String uploadId=abortMultipartUploadRequest.getUploadId();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  assertParameterNotNull(key,"key");  ensureObjectKeyValid(key);  assertStringNotNullOrEmpty(uploadId,"uploadId");  Map<String,String> parameters=new HashMap<String,String>();  parameters.put(UPLOAD_ID,uploadId);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setKey(key).setParameters(parameters).setOriginalRequest(abortMultipartUploadRequest).build();  doOperation(request,emptyResponseParser,bucketName,key);}  }
class C{  public ListMultimap(ListMultimap<K,V> orig){  this(copy(orig.map));}  }
class C{  public DataSourceScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource){  super(configuration,resourcePath);  this.ds=dataSource;}  }
class C{  public static String cellInfoLTEJSON(CellInfoLte cellInfo,boolean returnSignalStrength){  final Calendar calendar=Calendar.getInstance();  final JSONObject json=new JSONObject();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && cellInfo != null) {    try {      json.put("provider",CELLINFO_PROVIDER);      json.put("type",LTE);      json.put("timestamp",calendar.getTimeInMillis());      final CellIdentityLte identityLte=cellInfo.getCellIdentity();      json.put("ci",identityLte.getCi());      json.put("mcc",identityLte.getMcc());      json.put("mnc",identityLte.getMnc());      json.put("pci",identityLte.getPci());      json.put("tac",identityLte.getTac());      if (returnSignalStrength) {        final JSONObject jsonSignalStrength=new JSONObject();        final CellSignalStrengthLte cellSignalStrengthLte=cellInfo.getCellSignalStrength();        jsonSignalStrength.put("asuLevel",cellSignalStrengthLte.getAsuLevel());        jsonSignalStrength.put("dbm",cellSignalStrengthLte.getDbm());        jsonSignalStrength.put("level",cellSignalStrengthLte.getLevel());        jsonSignalStrength.put("timingAdvance",cellSignalStrengthLte.getTimingAdvance());        json.put("cellSignalStrengthLte",jsonSignalStrength);      }    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  public void drop(DropTargetDropEvent dtde){  if (Debug.debugging("beanbox"))   Debug.output("Enter> drop");  dtde.acceptDrop(DnDConstants.ACTION_MOVE);  extractTransferData(dtde);  extractDropLocation(dtde);  if (transferData == null || dropLocation == null)   return;  Component parent=((DropTarget)dtde.getSource()).getComponent();  dtde.dropComplete(true);  showPopUp(parent);  if (Debug.debugging("beanbox"))   Debug.output("Exit> drop");}  }
class C{  public void actionPerformed(ActionEvent evt){  root.panel.view.getSharedContext().setDebug_draw_font_metrics(!root.panel.view.getSharedContext().debugDrawFontMetrics());  root.panel.view.repaint();}  }
class C{  @Override protected void onPreExecute(){  mCurrentDialog=IndeterminateProgressDialog.newInstance(R.string.wait_a_moment,false);  mCurrentDialog.show(getSupportFragmentManager(),WAIT_DIALOG_TAG);  findViewById(R.id.ok).setEnabled(false);}  }
class C{  public final MutableDouble3D multiply(MutableDouble3D other,final double val){  x=other.x * val;  y=other.y * val;  z=other.z * val;  return this;}  }
class C{  static DeltaFragment newInstance(final Item item){  final DeltaFragment fragment=new DeltaFragment();  final Bundle args=new Bundle();  args.putString(ARG_ITEM_ID,item.id);  args.putString(ARG_ITEM_NAME_ID,item.name);  fragment.setArguments(args);  return fragment;}  }
class C{  public static boolean canMove(@NotNull PsiElement[] elements,PsiElement targetContainer){  for (  MoveHandlerDelegate delegate : Extensions.getExtensions(MoveHandlerDelegate.EP_NAME)) {    if (delegate.canMove(elements,targetContainer))     return true;  }  return false;}  }
class C{  public void run(){  this.messageChannels=new LinkedList();  if (sipStack.threadPoolSize != -1) {    for (int i=0; i < sipStack.threadPoolSize; i++) {      UDPMessageChannel channel=new UDPMessageChannel(sipStack,this);      this.messageChannels.add(channel);    }  }  ThreadAuditor.ThreadHandle threadHandle=sipStack.getThreadAuditor().addCurrentThread();  while (this.isRunning) {    try {      threadHandle.ping();      int bufsize=sock.getReceiveBufferSize();      byte message[]=new byte[bufsize];      DatagramPacket packet=new DatagramPacket(message,bufsize);      sock.receive(packet);      if (sipStack.stackDoesCongestionControl) {        if (this.messageQueue.size() >= HIGHWAT) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logDebug("Dropping message -- queue length exceeded");          }          continue;        } else         if (this.messageQueue.size() > LOWAT && this.messageQueue.size() < HIGHWAT) {          float threshold=((float)(messageQueue.size() - LOWAT)) / ((float)(HIGHWAT - LOWAT));          boolean decision=Math.random() > 1.0 - threshold;          if (decision) {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Dropping message with probability  " + (1.0 - threshold));            }            continue;          }        }      }      if (sipStack.threadPoolSize != -1) {synchronized (this.messageQueue) {          this.messageQueue.add(packet);          this.messageQueue.notify();        }      } else {        new UDPMessageChannel(sipStack,this,packet);      }    } catch (    SocketTimeoutException ex) {    }catch (    SocketException ex) {      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logDebug("UDPMessageProcessor: Stopping");      isRunning=false;synchronized (this.messageQueue) {        this.messageQueue.notifyAll();      }    }catch (    IOException ex) {      isRunning=false;      ex.printStackTrace();      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logDebug("UDPMessageProcessor: Got an IO Exception");    }catch (    Exception ex) {      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logDebug("UDPMessageProcessor: Unexpected Exception - quitting");      InternalErrorHandler.handleException(ex);      return;    }  }}  }
class C{  public synchronized void removeChannelsFromHistory(Set<String> channels){  for (  String channel : channels) {    removeChannelFromHistory(channel);  }  settings.setSettingChanged("channelHistory");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.205 -0500",hash_original_method="4DA58223C4F20A38192632BBFEEE57C8",hash_generated_method="9F1AF78FB5A9C9BCEDE3F196974EEDE2") private int nativeCreateResponse(String url,int statusCode,String statusText,String mimeType,long expectedLength,String encoding){  addTaint(url.getTaint());  addTaint(statusCode);  addTaint(statusText.getTaint());  addTaint(mimeType.getTaint());  addTaint(expectedLength);  addTaint(encoding.getTaint());  return getTaintInt();}  }
class C{  public Process executeAsync(final CommandLine command,Map<String,String> environment) throws IOException {  if (workingDirectory != null && !workingDirectory.exists()) {    throw new IOException(workingDirectory + " doesn't exist.");  }  return executeInternal(command,environment,workingDirectory,streamHandler,null);}  }
class C{  protected static boolean canWidenTo(Class<?> type,Class<?> otherType){  if (!type.isPrimitive()) {    return false;  }  if (type == Boolean.TYPE) {    if (otherType == Boolean.TYPE) {      return true;    }  } else   if (type == Byte.TYPE) {    if (otherType == Byte.TYPE || otherType == Short.TYPE || otherType == Integer.TYPE || otherType == Long.TYPE || otherType == Float.TYPE || otherType == Double.TYPE) {      return true;    }  } else   if (type == Short.TYPE) {    if (otherType == Short.TYPE || otherType == Integer.TYPE || otherType == Long.TYPE || otherType == Float.TYPE || otherType == Double.TYPE) {      return true;    }  } else   if (type == Character.TYPE) {    if (otherType == Character.TYPE || otherType == Integer.TYPE || otherType == Long.TYPE || otherType == Float.TYPE || otherType == Double.TYPE) {      return true;    }  } else   if (type == Integer.TYPE) {    if (otherType == Integer.TYPE || otherType == Long.TYPE || otherType == Float.TYPE || otherType == Double.TYPE) {      return true;    }  } else   if (type == Long.TYPE) {    if (otherType == Long.TYPE || otherType == Float.TYPE || otherType == Double.TYPE) {      return true;    }  } else   if (type == Float.TYPE) {    if (otherType == Float.TYPE || otherType == Double.TYPE) {      return true;    }  } else   if (type == Double.TYPE) {    if (otherType == Double.TYPE) {      return true;    }  }  return false;}  }
class C{  @Override public boolean equals(Object other){  if (other instanceof List<?>)   return equals(this,(List<?>)other);  if (other instanceof java.util.List<?>) {    List<A> t=this;    Iterator<?> oIter=((java.util.List<?>)other).iterator();    while (t.tail != null && oIter.hasNext()) {      Object o=oIter.next();      if (!(t.head == null ? o == null : t.head.equals(o)))       return false;      t=t.tail;    }    return (t.isEmpty() && !oIter.hasNext());  }  return false;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public DistributedLogClientBuilder name(String name){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._name=name;  return newBuilder;}  }
class C{  public int hashCode(){  long len=getMillis();  return (int)(len ^ (len >>> 32));}  }
class C{  public void installKeyboardActions(JComponent c){  super.installKeyboardActions(c);  updateMnemonicBindingX((AbstractButton)c);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string: ");  String value=input.next();  reverseDisplay(value);  System.out.println();}  }
class C{  public static byte[] receiveSocks5Message(DataInputStream in) throws IOException, XMPPException {  byte[] header=new byte[5];  in.readFully(header,0,5);  if (header[3] != (byte)0x03) {    throw new XMPPException("Unsupported SOCKS5 address type");  }  int addressLength=header[4];  byte[] response=new byte[7 + addressLength];  System.arraycopy(header,0,response,0,header.length);  in.readFully(response,header.length,addressLength + 2);  return response;}  }
class C{  public void pause(){  player.pause();}  }
class C{  public boolean hasUrl(){  return getUrl() != null;}  }
class C{  void replaceUses(Instruction s,HeapOperand<Object>[] H){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  uses.put(s,H);  for (  HeapOperand<Object> aH : H) {    aH.setInstruction(s);  }}  }
class C{  public boolean sendNoOp() throws IOException {  return FTPReply.isPositiveCompletion(noop());}  }
class C{  public Boolean isEnableVmBehaviorOverrides(){  return enableVmBehaviorOverrides;}  }
class C{  public void checkBounds(){  if (strength > upperBound) {    strength=upperBound;  }  if (strength < lowerBound) {    strength=lowerBound;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.955 -0500",hash_original_method="73C1557906EF5C67B1A62D382FCB88AB",hash_generated_method="238D8AF41F3258C0147B298BF895C371") public void sendRequestEntity(final HttpEntityEnclosingRequest request) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  assertOpen();  if (request.getEntity() == null) {    return;  }  this.entityserializer.serialize(this.outbuffer,request,request.getEntity());}  }
class C{  public boolean hasOption(String label){  int n=findOption(label);  if (n == -1) {    return false;  }  return options[n].isAvailable;}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public void addFlag(OptionID optionid){  parameters.add(new ParameterPair(optionid,Flag.SET));}  }
class C{  public void testThreeNodesManyEventsAfterLeaderShutdown() throws Throwable {  testManyEventsAfterLeaderShutdown(3);}  }
class C{  @Override public Response toResponse(GitException exception){  if (exception instanceof GitRefNotFoundException)   return Response.status(Response.Status.NOT_FOUND).entity(DtoFactory.getInstance().toJson(exception.getServiceError())).type(MediaType.APPLICATION_JSON).build(); else   if (exception instanceof GitInvalidRefNameException)   return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(DtoFactory.getInstance().toJson(exception.getServiceError())).type(MediaType.APPLICATION_JSON).build(); else   if (exception instanceof GitRefAlreadyExistsException)   return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(DtoFactory.getInstance().toJson(exception.getServiceError())).type(MediaType.APPLICATION_JSON).build(); else   if (exception instanceof GitConflictException) {    ConflictExceptionError conflictExceptionError=newDto(ConflictExceptionError.class).withMessage(exception.getServiceError().getMessage()).withConflictingPaths(((GitConflictException)exception).getConflictPaths());    return Response.status(Response.Status.CONFLICT).entity(DtoFactory.getInstance().toJson(conflictExceptionError)).type(MediaType.APPLICATION_JSON).build();  }  return Response.serverError().entity(DtoFactory.getInstance().toJson(exception.getServiceError())).type(MediaType.APPLICATION_JSON).build();}  }
class C{  private List<Usericon> parseChatIcons(String json,String stream){  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    List<Usericon> iconsNew=new ArrayList<>();    addUsericon(iconsNew,Usericon.Type.MOD,null,getChatIconUrl(root,"mod","image"));    addUsericon(iconsNew,Usericon.Type.SUB,stream,getChatIconUrl(root,"subscriber","image"));    addUsericon(iconsNew,Usericon.Type.TURBO,null,getChatIconUrl(root,"turbo","image"));    addUsericon(iconsNew,Usericon.Type.BROADCASTER,null,getChatIconUrl(root,"broadcaster","image"));    addUsericon(iconsNew,Usericon.Type.STAFF,null,getChatIconUrl(root,"staff","image"));    addUsericon(iconsNew,Usericon.Type.ADMIN,null,getChatIconUrl(root,"admin","image"));    addUsericon(iconsNew,Usericon.Type.GLOBAL_MOD,null,getChatIconUrl(root,"global_mod","image"));    return iconsNew;  } catch (  ParseException ex) {    LOGGER.warning("Error parsing chat icons: " + ex.getLocalizedMessage());    return null;  }}  }
class C{  public boolean isNotificationEnabled(Notification notification){  boolean isThisNotificationEnabled=false;  if (notification.getType().equals(JMXConnectionNotification.OPENED) || notification.getType().equals(JMXConnectionNotification.CLOSED) || notification.getType().equals(JMXConnectionNotification.FAILED)) {    isThisNotificationEnabled=true;  }  return isThisNotificationEnabled;}  }
class C{  public boolean isRcsContact(){  return (RcsStatus.NO_INFO != mRcsStatus && RcsStatus.NOT_RCS != mRcsStatus);}  }
class C{  public Fugue384(){  super();}  }
class C{  public static boolean isFileTypeSupported(AudioFileFormat.Type fileType,AudioInputStream stream){  List providers=getAudioFileWriters();  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,stream)) {      return true;    }  }  return false;}  }
class C{  public Vector3d mul(double x,double y,double z){  this.x*=x;  this.y*=y;  this.z*=z;  return this;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep updateComputeImage(@PathParam("id") URI id,ComputeImageUpdate param){  log.info("updateComputeImage: {}, new name: {}",id,param.getName());  ArgValidator.checkFieldUriType(id,ComputeImage.class,"id");  ArgValidator.checkFieldNotEmpty(param.getName(),"name");  ComputeImage ci=_dbClient.queryObject(ComputeImage.class,id);  ArgValidator.checkEntity(ci,id,isIdEmbeddedInURL(id));  if (!ci.getLabel().equals(param.getName())) {    checkDuplicateLabel(ComputeImage.class,param.getName());    ci.setLabel(param.getName());  }  boolean reImport=false;  if (!StringUtils.isBlank(param.getImageUrl()) && !param.getImageUrl().equals(ci.getImageUrl())) {    ArgValidator.checkUrl(param.getImageUrl(),"image_url");    if (ci.getComputeImageStatus().equals(ComputeImageStatus.NOT_AVAILABLE.name())) {      String prevImageUrl=ci.getImageUrl();      boolean isEncrypted=false;      String oldPassword=ImageServerControllerImpl.extractPasswordFromImageUrl(prevImageUrl);      String newPassword=ImageServerControllerImpl.extractPasswordFromImageUrl(param.getImageUrl());      if (StringUtils.isNotBlank(oldPassword) && StringUtils.isNotBlank(newPassword)) {        if (ImageServerControllerImpl.MASKED_PASSWORD.equals(newPassword)) {          isEncrypted=true;        }      }      if (isEncrypted) {        ci.setImageUrl(StringUtils.replace(param.getImageUrl(),":" + newPassword + "@",":" + oldPassword + "@"));      } else {        ci.setImageUrl(encryptImageURLPassword(param.getImageUrl(),isEncrypted));      }      ci.setComputeImageStatus(ComputeImageStatus.IN_PROGRESS.name());      reImport=true;    } else {      throw APIException.badRequests.invalidParameterCannotUpdateComputeImageUrl();    }  }  _dbClient.updateObject(ci);  auditOp(OperationTypeEnum.UPDATE_COMPUTE_IMAGE,true,null,ci.getId().toString(),ci.getImageUrl());  return createUpdateTasks(ci,reImport);}  }
class C{  @Override public void stop(boolean cancel) throws IgniteCheckedException {  if (log.isDebugEnabled())   log.debug("Session processor stopped.");}  }
class C{  @VisibleForTesting MinidumpUploadCallable createMinidumpUploadCallable(File minidumpFile,File logfile){  return new MinidumpUploadCallable(minidumpFile,logfile,getApplicationContext());}  }
class C{  public static void cleanClass(File file,Class<?> aClass,boolean cleanAll) throws IOException {  writeFile(file,linesToWrite(file,aClass,cleanAll));}  }
class C{  public boolean isSetPersist(){  return EncodingUtils.testBit(__isset_bitfield,__PERSIST_ISSET_ID);}  }
class C{  public int unStartSize(){  return mRequestQueue.size();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPayment[");  sb.append(get_ID()).append("-").append(getDocumentNo()).append(",Receipt=").append(isReceipt()).append(",PayAmt=").append(getPayAmt()).append(",Discount=").append(getDiscountAmt()).append(",WriteOff=").append(getWriteOffAmt()).append(",OverUnder=").append(getOverUnderAmt());  return sb.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:22.185 -0400",hash_original_method="35762C3193E408003672E673C0D9F75D",hash_generated_method="60EF77F1191D52E9810BAAF7E1F86369") private void onConnectSinkResult(String deviceObjectPath,boolean result){  if (!result) {    if (deviceObjectPath != null) {      String address=mBluetoothService.getAddressFromObjectPath(deviceObjectPath);      if (address == null)       return;      BluetoothDevice device=mAdapter.getRemoteDevice(address);      int state=getConnectionState(device);      handleSinkStateChange(device,state,BluetoothA2dp.STATE_DISCONNECTED);    }  }}  }
class C{  @CloudUnitSecurable @RequestMapping(method=RequestMethod.POST) @ResponseBody public JsonResponse addModule(@RequestBody JsonInput input) throws ServiceException, CheckException {  input.validateAddModule();  String applicationName=input.getApplicationName();  String imageName=input.getImageName();  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  if (application == null) {    throw new CheckException("Unknown application");  }  applicationEventPublisher.publishEvent(new ApplicationPendingEvent(application));  try {    moduleService.create(imageName,application,user);    logger.info("--initModule " + imageName + " to "+ applicationName+ " successful--");  }  finally {    applicationEventPublisher.publishEvent(new ApplicationStartEvent(application));  }  return new HttpOk();}  }
class C{  public static String networkNameToString(byte[] data,int offset,int length){  String ret;  if ((data[offset] & 0x80) != 0x80 || length < 1) {    return "";  }switch ((data[offset] >>> 4) & 0x7) {case 0:    int countSeptets;  int unusedBits=data[offset] & 7;countSeptets=(((length - 1) * 8) - unusedBits) / 7;ret=GsmAlphabet.gsm7BitPackedToString(data,offset + 1,countSeptets);break;case 1:try {ret=new String(data,offset + 1,length - 1,"utf-16");} catch (UnsupportedEncodingException ex) {ret="";Log.e(LOG_TAG,"implausible UnsupportedEncodingException",ex);}break;default :ret="";break;}if ((data[offset] & 0x40) != 0) {}return ret;}  }
class C{  private void updateRemoteControlDisplay_syncAfRcs(int infoChangedFlags){  RemoteControlStackEntry rcse=mRCStack.peek();  int infoFlagsAboutToBeUsed=infoChangedFlags;  if (rcse.mRcClient == null) {    clearRemoteControlDisplay_syncAfRcs();    return;  }synchronized (mCurrentRcLock) {    if (!rcse.mRcClient.equals(mCurrentRcClient)) {      infoFlagsAboutToBeUsed=RC_INFO_ALL;    }    mCurrentRcClient=rcse.mRcClient;  }  mAudioHandler.sendMessage(mAudioHandler.obtainMessage(MSG_RCDISPLAY_UPDATE,infoFlagsAboutToBeUsed,0,rcse));}  }
class C{  private static boolean isJpegHeader(final byte[] imageHeaderBytes,final int headerSize){  return headerSize >= JPEG_HEADER.length && matchBytePattern(imageHeaderBytes,0,JPEG_HEADER);}  }
class C{  @Override public void addAttribute(String name,int value){  ((Element)current).setAttribute(name,Integer.toString(value));}  }
class C{  public synchronized void removeImageListener(ImageListener cl){  m_imageListeners.remove(cl);}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  @Override public boolean retainAll(Collection<?> c){  boolean b=false;  for (  T element : nodes.keySet()) {    if (!c.contains(element)) {      remove(element);      b=true;    }  }  return b;}  }
class C{  public T caseTraceItem_(TraceItem_ object){  return null;}  }
class C{  public void testIndexContainsCommitted(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  assertFalse(index.contains(10));  index.index(10,1234);  assertTrue(index.contains(10));  assertFalse(index.contains(9));  assertFalse(index.contains(11));}  }
class C{  private List<String> parseCsvToList(final String input){  if (input == null) {    return null;  }  final List<String> returnValue=new ArrayList<>();  final StringTokenizer tokenizer=new StringTokenizer(input,",");  while (tokenizer.hasMoreTokens()) {    returnValue.add(tokenizer.nextToken());  }  return returnValue;}  }
class C{  private void startTask(){synchronized (lock) {    if (shutdown) {      throw new RejectedExecutionException("Executor already shutdown");    }    runningTasks++;  }}  }
class C{  @Bean public static String hibernateHbm2DdlAutoParam(){  return null;}  }
class C{  public static NurbsCurve globalCurveInterpolation(Vec3D[] points,int degree) throws InterpolationException {  try {    final int n=points.length;    final double[] A=new double[n * n];    final float[] uk=centripetal(points);    KnotVector uKnots=averaging(uk,degree);    for (int i=0; i < n; i++) {      int span=uKnots.findSpan(uk[i]);      double[] tmp=uKnots.basisFunctions(span,uk[i]);      System.arraycopy(tmp,0,A,i * n + span - degree,tmp.length);    }    final GMatrix a=new GMatrix(n,n,A);    final GVector perm=new GVector(n);    final GMatrix lu=new GMatrix(n,n);    a.computeLUD(lu,perm);    final Vec4D[] cps=new Vec4D[n];    for (int i=0; i < cps.length; i++) {      cps[i]=new Vec4D(0,0,0,1);    }    final GVector b=new GVector(n);    for (int j=0; j < n; j++) {      b.setElement(j,points[j].x);    }    final GVector sol=new GVector(n);    sol.backSolveLUD(lu,b,perm);    for (int j=0; j < n; j++) {      cps[j].x=(float)sol.get(j);    }    for (int j=0; j < n; j++) {      b.setElement(j,points[j].y);    }    sol.zero();    sol.backSolveLUD(lu,b,perm);    for (int j=0; j < n; j++) {      cps[j].y=(float)sol.get(j);    }    for (int j=0; j < n; j++) {      b.setElement(j,points[j].z);    }    sol.zero();    sol.backSolveLUD(lu,b,perm);    for (int j=0; j < n; j++) {      cps[j].z=(float)sol.get(j);    }    return new BasicNurbsCurve(cps,uKnots);  } catch (  SingularMatrixException ex) {    throw new InterpolationException(ex);  }}  }
class C{  CryptoAllPermissionCollection(){  all_allowed=false;}  }
class C{  public static Image dropshadow(Image source,int blurRadius,float opacity){  int[] rgb=source.getRGB();  for (int iter=0; iter < rgb.length; iter++) {    float f=rgb[iter] & 0xff000000;    f*=opacity;    rgb[iter]=(int)f;  }  Image shadow=Image.createImage(rgb,source.getWidth(),source.getHeight());  if (Display.getInstance().isGaussianBlurSupported()) {    shadow=Display.getInstance().gaussianBlurImage(shadow,blurRadius);  }  return shadow;}  }
class C{  private void assertNumFound(String msg,int expected,QueryResponse response){  countNumFoundChecks++;  assertEquals(msg,expected,response.getResults().getNumFound());}  }
class C{  private static Element addProblemListSection(String name,Element bodyNode,Hashtable<String,Element> repeatControls,Element modelNode){  Element groupNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  groupNode.setName(NODE_GROUP);  Element labelNode=groupNode.createElement(NAMESPACE_XFORMS,null);  labelNode.setName(NODE_LABEL);  groupNode.addChild(Element.ELEMENT,labelNode);  bodyNode.addChild(Element.ELEMENT,groupNode);  Element repeatControl=buildRepeatControl(groupNode,null,name,modelNode);  repeatControls.put(name,repeatControl);  addControl(groupNode,repeatControl);  return labelNode;}  }
class C{  public void makePackage(ClassLoader loader,String name) throws CannotCompileException {  Object[] args=new Object[]{name,null,null,null,null,null,null,null};  Throwable t;  try {    toClass2(definePackage,loader,args);    return;  } catch (  java.lang.reflect.InvocationTargetException e) {    t=e.getTargetException();    if (t == null)     t=e; else     if (t instanceof IllegalArgumentException) {      return;    }  }catch (  Exception e) {    t=e;  }  throw new CannotCompileException(t);}  }
class C{  public boolean isRemoteMediaPaused() throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  return mState == MediaStatus.PLAYER_STATE_PAUSED;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.812 -0500",hash_original_method="A75C98E30CFF18DAC25DE4B33918A3F4",hash_generated_method="06DD9DA11DA58271E78A992BD8C19713") public boolean isStatusReportMessage(){  return (mBearerData.messageType == BearerData.MESSAGE_TYPE_DELIVERY_ACK);}  }
class C{  public void reportTable(){  PdfPCell tableCell;  Iterator<ReportTO> itRep=data.iterator();  while (itRep.hasNext()) {    ReportTO rpt=itRep.next();    if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("T")) {      PdfPCell title=new PdfPCell(new Paragraph(dataNull(rpt.getDescription()),titleTableFont));      title.setColspan(cols);      title.setHorizontalAlignment(Paragraph.ALIGN_CENTER);      title.setBorder(0);      table.addCell(title);    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("L")) {      PdfPCell line=new PdfPCell(new Paragraph("",subFont));      line.setColspan(cols);      line.setBorderWidthLeft(0);      line.setBorderWidthRight(0);      line.setBorderWidthTop(0);      line.setBorderColorBottom(Color.BLACK);      table.addCell(line);    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("X")) {      simpleLine();    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("Z")) {      for (int j=0; j < 2; j++) {        simpleLine();      }    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("D")) {      tableCell=new PdfPCell(new Phrase(""));      tableCell.setBorder(0);      table.addCell(tableCell);      tableCell=new PdfPCell(new Phrase(""));      tableCell.setBorderWidthLeft(0);      tableCell.setBorderWidthRight(0);      tableCell.setBorderWidthTop(0);      tableCell.setBorderColorBottom(Color.BLACK);      table.addCell(tableCell);      for (int i=0; i < (cols - 2); i++) {        tableCell=new PdfPCell(new Phrase(""));        tableCell.setBorder(0);        table.addCell(tableCell);      }    } else     if (rpt.getReportlinestyle() != null && rpt.getReportlinestyle().equals("S")) {      PdfPCell line=new PdfPCell(new Paragraph("         "));      line.setColspan(cols);      line.setBorder(0);      table.addCell(line);    } else     if (rpt.getTablevel() != null && rpt.getTablevel() > 0) {      String jerarchy="";      for (int i=1; i <= rpt.getTablevel(); i++) {        jerarchy=jerarchy + "   ";      }      PdfPCell line=new PdfPCell(new Paragraph(jerarchy + dataNull(rpt.getDescription()),catFont));      line.setColspan(cols);      line.setHorizontalAlignment(Paragraph.ALIGN_LEFT);      line.setBorder(0);      table.addCell(line);    } else {      if (rpt.getDescription() != null) {        tableCell=new PdfPCell(new Phrase(dataNull(rpt.getName()),subFont));        tableCell.setBorder(0);        tableCell.setHorizontalAlignment(Paragraph.ALIGN_LEFT);        table.addCell(tableCell);        tableCell=new PdfPCell(new Phrase(dataNull(rpt.getDescription()),subFont));        tableCell.setBorder(0);        table.addCell(tableCell);        if (cols >= 3) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_0()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 4) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_1()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 5) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_2()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 6) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_3()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 7) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_4()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 8) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_5()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 9) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_6()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 10) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_7()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 11) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_8()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 12) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_9()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 13) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_10()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 14) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_11()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 15) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_12()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 16) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_13()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 17) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_14()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 18) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_15()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 19) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_16()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 20) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_17()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 21) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_18()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 22) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_19()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }        if (cols >= 23) {          tableCell=new PdfPCell(new Phrase(formatValue(rpt.getCol_20()),subFont));          tableCell.setBorder(0);          tableCell.setHorizontalAlignment(Paragraph.ALIGN_RIGHT);          table.addCell(tableCell);        }      }    }  }}  }
class C{  public Country(String name,String continent,Set states){  this.name=name;  this.continent=continent;  this.states=states;}  }
class C{  public Task<FileShareRestRep> deactivate(URI id,FileSystemDeleteParam input){  return postTask(input,getDeactivateUrl(),id);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERAND:    return basicSetOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean hasDeleted(){  return hasExtension(Deleted.class);}  }
class C{  public boolean canRead(){  return getBestPath().canRead();}  }
class C{  public MenuLockLayer(){  this(null,0);}  }
class C{  protected boolean isValidQuery(String query){  if (query == null) {    return true;  }  return QUERY_PATTERN.matcher(query).matches();}  }
class C{  private void checkClass(String className) throws IllegalArgumentException {  if (!data.containsClass(className)) {    throw new IllegalArgumentException("Class " + className + " is not part of the SUT");  }}  }
class C{  public static boolean isAngularDistance(AbstractMaterializeKNNPreprocessor<?> kNN){  DistanceFunction<?> distanceFunction=kNN.getDistanceQuery().getDistanceFunction();  if (CosineDistanceFunction.class.isInstance(distanceFunction)) {    return true;  }  if (ArcCosineDistanceFunction.class.isInstance(distanceFunction)) {    return true;  }  return false;}  }
class C{  @Override public void removeAttributes(){  Set<String> names=getAttributeNames();  for (  String key : names) {    ownerMessage.addEvent(Type.CLIENT_DELETE_DATA,key,null);    syncEvents.add(new SharedObjectEvent(Type.CLIENT_DELETE_DATA,key,null));  }  deleteStats.addAndGet(names.size());  super.removeAttributes();  modified=true;  notifyModified();}  }
class C{  public static void fill(byte[] array,int start,int end,byte value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  protected void parseAdditionalPropertiesString(){  additionalProperties.clear();  if (null != smtpPropertiesString) {    String[] strArray=smtpPropertiesString.split(",");    for (    String property : strArray) {      int equalsIndex=property.indexOf('=');      if ((equalsIndex > 0) && (equalsIndex < (property.length() - 1))) {        additionalProperties.put(property.substring(0,equalsIndex).trim(),property.substring(equalsIndex + 1).trim());      }    }  }}  }
class C{  public static String canonicalID(String id){  if (id == null)   return "";  int st=0;  int len=id.length();  boolean substr=false;  int c;  while (st < len && ((c=id.charAt(st)) == '<' || c <= ' ')) {    st++;    substr=true;  }  while (st < len && ((c=id.charAt(len - 1)) == '>' || c <= ' ')) {    len--;    substr=true;  }  return substr ? id.substring(st,len) : id;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Object clone(){  return new X509CollectionStoreParameters(collection);}  }
class C{  public static boolean canPerform(int type,int velocity,int altitude,int ceiling,boolean isVTOL,int distance,IGame game,MovePath mp){  for (  final MoveStep step : mp.getStepVector()) {    if (step.getType() == MoveStepType.MANEUVER) {      return false;    }  }  if ((distance > 0) && (type != MAN_SIDE_SLIP_LEFT) && (type != MAN_SIDE_SLIP_RIGHT)) {    return false;  }switch (type) {case (MAN_NONE):    return true;case (MAN_LOOP):  if (velocity >= 4) {    return true;  } else {    return false;  }case (MAN_IMMELMAN):if ((velocity >= 3) && (altitude < 9)) {  return true;} else {  return false;}case (MAN_SPLIT_S):if ((altitude + 2) > ceiling) {return true;} else {return false;}case (MAN_HAMMERHEAD):return true;case (MAN_HALF_ROLL):return true;case (MAN_BARREL_ROLL):if (velocity >= 2) {return true;} else {return false;}case (MAN_SIDE_SLIP_LEFT):case (MAN_SIDE_SLIP_RIGHT):if (velocity > 0) {if (game.getBoard().getType() == Board.T_GROUND) {MovePath tmpMp=mp.clone();for (int i=0; i < 8; i++) {if (type == MAN_SIDE_SLIP_LEFT) {tmpMp.addStep(MoveStepType.LATERAL_LEFT,true,true);} else {tmpMp.addStep(MoveStepType.LATERAL_RIGHT,true,true);}}for (int i=0; i < 8; i++) {tmpMp.addStep(MoveStepType.FORWARDS,true,true);}return tmpMp.getLastStep().isLegal(tmpMp);} else {return true;}} else {return false;}case (MAN_VIFF):if (isVTOL) {return true;} else {return false;}default :return false;}}  }
class C{  public boolean canAttackClass(Class p_70686_1_){  return EntityCreeper.class != p_70686_1_ && EntityGhast.class != p_70686_1_;}  }
class C{  public void addEntry(ShapeDataCacheEntry entry){  if (entry == null)   return;  this.entries.put(entry.globeStateKey,entry);  entry.lastUsed=System.currentTimeMillis();}  }
class C{  protected void removeLastFieldSeparator(StringBuffer buffer){  int len=buffer.length();  int sepLen=fieldSeparator.length();  if (len > 0 && sepLen > 0 && len >= sepLen) {    boolean match=true;    for (int i=0; i < sepLen; i++) {      if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {        match=false;        break;      }    }    if (match) {      buffer.setLength(len - sepLen);    }  }}  }
class C{  public void onLoaded(){}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEDesktopIconUI();}  }
class C{  private void clearColoringPanel(){  if (currentColoringPanel != null) {    mainPanel.remove(currentColoringPanel);  }}  }
class C{  private void write(OutputNode node,Object item,Label label) throws Exception {  Converter converter=label.getConverter(context);  Collection list=Collections.singleton(item);  if (!label.isInline()) {    String name=label.getName();    String root=style.getElement(name);    if (!node.isCommitted()) {      node.setName(root);    }  }  converter.write(node,list);}  }
class C{  private static boolean ask(String question){  X.println();  X.print(" <  " + question + " (Y/N): ");  String answer=null;  if (!F.isEmpty(System.getenv("IGNITE_HADOOP_SETUP_YES")))   answer="Y"; else {    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));    try {      answer=br.readLine();    } catch (    IOException e) {      exit("Failed to read answer: " + e.getMessage(),e);    }  }  if (answer != null && "Y".equals(answer.toUpperCase().trim())) {    X.println(" >  Yes.");    return true;  } else {    X.println(" >  No.");    return false;  }}  }
class C{  public static boolean isPackage(int mod){  return (mod & (PUBLIC | PRIVATE | PROTECTED)) == 0;}  }
class C{  public static String dateTimeFormat(Date dateTime){  DateFormat iso8601=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'",Locale.US);  iso8601.setTimeZone(UTC);  return iso8601.format(dateTime);}  }
class C{  private void disableKeyring(){}  }
class C{  private void refresh(){  String sql=m_sql;  int pos=m_sql.lastIndexOf(" ORDER BY ");  if (!showAll.isSelected()) {    sql=m_sql.substring(0,pos) + s_sqlWhereSameWarehouse;    if (s_sqlMinLife.length() > 0)     sql+=s_sqlMinLife;    sql+=m_sql.substring(pos);  }  log.finest(sql);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    if (!showAll.isSelected()) {      pstmt.setInt(2,m_M_Warehouse_ID);      pstmt.setInt(3,m_M_Warehouse_ID);    }    rs=pstmt.executeQuery();    m_table.loadTable(rs);  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  enableButtons();}  }
class C{  public boolean isComplete(){  return complete;}  }
class C{  public static boolean equals(IBinding[] b1,IBinding[] b2){  Assert.isNotNull(b1);  if (b1 == b2)   return true;  if (b2 == null)   return false;  if (b1.length != b2.length)   return false;  for (int i=0; i < b1.length; i++) {    if (!Bindings.equals(b1[i],b2[i]))     return false;  }  return true;}  }
class C{  public static char[] concat(char[] base,char[] other,int appendCount){  final int length=base.length;  char[] newArray=copyFrom(base,base.length + appendCount);  System.arraycopy(other,0,newArray,length,appendCount);  return newArray;}  }
class C{  public void tagDefineFontInfo(int fontId,String fontName,int flags,int[] codes) throws IOException {  fontCodes.put(new Integer(fontId),codes);}  }
class C{  private void updateMinMax(V featureVector,double[] minima,double[] maxima){  if (minima.length != featureVector.getDimensionality()) {    throw new IllegalArgumentException("FeatureVectors differ in length.");  }  for (int d=0; d < featureVector.getDimensionality(); d++) {    if ((featureVector.doubleValue(d)) > maxima[d]) {      maxima[d]=(featureVector.doubleValue(d));    }    if ((featureVector.doubleValue(d)) < minima[d]) {      minima[d]=(featureVector.doubleValue(d));    }  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  GridClientAndPredicate(GridClientPredicate<? super T> first,GridClientPredicate<? super T> second){  assert first != null;  assert second != null;  this.first=first;  this.second=second;}  }
class C{  final void quit() throws SQLException {  try {    try {      if (!this.mysqlConnection.isClosed()) {        try {          this.mysqlConnection.shutdownInput();        } catch (        UnsupportedOperationException ex) {        }      }    } catch (    IOException ioEx) {      this.connection.getLog().logWarn("Caught while disconnecting...",ioEx);    }    Buffer packet=new Buffer(6);    this.packetSequence=-1;    this.compressedPacketSequence=-1;    packet.writeByte((byte)MysqlDefs.QUIT);    send(packet,packet.getPosition());  }  finally {    forceClose();  }}  }
class C{  private static void addStatusCodeMap(final int statusCode,final String reasonPhrase){  final int classIndex=statusCode / 100;  REASON_PHRASES[classIndex][statusCode - classIndex * 100]=reasonPhrase;}  }
class C{  public Account findAccountByAddress(final Address id){  return this.accountLookup.findByAddress(id);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshots") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep snapshot(@PathParam("id") URI id,FileSystemSnapshotParam param) throws InternalException {  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (vpool == null) {    throw APIException.badRequests.invalidParameterFileSystemHasNoVirtualPool(id);  }  if (getNumSnapshots(fs) >= vpool.getMaxNativeSnapshots()) {    throw APIException.methodNotAllowed.maximumNumberSnapshotsReached();  }  String label=TimeUtils.formatDateForCurrent(param.getLabel());  checkForDuplicateName(label,Snapshot.class,id,"parent",_dbClient);  Snapshot snap=new Snapshot();  snap.setId(URIUtil.createId(Snapshot.class));  snap.setParent(new NamedURI(id,label));  snap.setLabel(label);  snap.setOpStatus(new OpStatusMap());  snap.setProject(new NamedURI(fs.getProject().getURI(),label));  String convertedName=label.replaceAll("[^\\dA-Za-z_]","");  _log.info("Original name {} and converted name {}",label,convertedName);  snap.setName(convertedName);  fs.setOpStatus(new OpStatusMap());  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_FILE_SYSTEM_SNAPSHOT);  snap.getOpStatus().createTaskStatus(task,op);  fs.getOpStatus().createTaskStatus(task,op);  _dbClient.createObject(snap);  _dbClient.persistObject(fs);  if (null == fs.getStoragePort()) {    StoragePort storagePort;    try {      storagePort=_fileScheduler.placeFileShareExport(fs,PROTOCOL_NFS,null);      _log.info("FS is not mounted so we are mounting the FS first and then creating the Snapshot and the returned storage port- {} and supported protocol-{}",storagePort.getPortName(),PROTOCOL_NFS);    } catch (    APIException e) {      storagePort=_fileScheduler.placeFileShareExport(fs,PROTOCOL_CIFS,null);      _log.info("FS is not mounted so we are mounting the FS first and then creating the Snapshot and the returned storage port- {} and supported protocol-{}",storagePort.getPortName(),PROTOCOL_NFS);    }  }  try {    FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);    fileServiceApi.snapshotFS(device.getId(),snap.getId(),fs.getId(),task);  } catch (  InternalException e) {    snap.setInactive(true);    _dbClient.persistObject(snap);    throw e;  }  auditOp(OperationTypeEnum.CREATE_FILE_SYSTEM_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snap.getLabel(),snap.getId().toString(),fs.getId().toString());  fs=_dbClient.queryObject(FileShare.class,id);  _log.debug("Before sending response, FS ID : {}, Taks : {} ; Status {}",fs.getOpStatus().get(task),fs.getOpStatus().get(task).getStatus());  return toTask(snap,task,op);}  }
class C{  private String parseFormat(){switch (this.getFormat()) {case FORMAT_8BIT_MONO:    return "8-bit mono";case FORMAT_16BIT_MONO:  return "16-bit mono";case FORMAT_8BIT_STEREO:return "8-bit stereo";case FORMAT_16BIT_STEREO:return "16-bit stereo";default :return "unknown format";}}  }
class C{  public static Frustum fromPerspective(double width,double height,double near,double far){  double farMinusNear=far - near;  if (farMinusNear <= 0.0 || width <= 0.0 || height <= 0.0) {    String message=Logging.getMessage("Geom.ViewFrustum.ClippingDistanceOutOfRange");    Logging.logger().fine(message);    throw new IllegalArgumentException(message);  }  double width_over_2=width / 2.0;  double height_over_2=height / 2.0;  Plane leftPlane=new Plane(1.0,0.0,0.0,width_over_2);  Plane rightPlane=new Plane(-1.0,0.0,0.0,width_over_2);  Plane bottomPlane=new Plane(0.0,1.0,0.0,height_over_2);  Plane topPlane=new Plane(0.0,-1.0,0.0,height_over_2);  Plane nearPlane=new Plane(0.0,0.0,-1.0,(near < 0.0) ? near : -near);  Plane farPlane=new Plane(0.0,0.0,1.0,(far < 0.0) ? -far : far);  return new Frustum(leftPlane,rightPlane,bottomPlane,topPlane,nearPlane,farPlane);}  }
class C{  public void testBug7601() throws Exception {  assertTrue("1.5E+7".equals(StringUtils.fixDecimalExponent("1.5E+7")));  assertTrue("1.5E-7".equals(StringUtils.fixDecimalExponent("1.5E-7")));  assertTrue("1.5E+7".equals(StringUtils.fixDecimalExponent("1.5E7")));}  }
class C{  public static byte[] str2bin(final String values,final JBBPBitOrder bitOrder){  if (values == null) {    return new byte[0];  }  int buff=0;  int cnt=0;  final ByteArrayOutputStream buffer=new ByteArrayOutputStream((values.length() + 7) >> 3);  final boolean msb0=bitOrder == JBBPBitOrder.MSB0;  for (  final char v : values.toCharArray()) {switch (v) {case '_':case ' ':      continue;case '0':case 'X':case 'x':case 'Z':case 'z':{      if (msb0) {        buff>>=1;      } else {        buff<<=1;      }    }  break;case '1':{  if (msb0) {    buff=(buff >> 1) | 0x80;  } else {    buff=(buff << 1) | 1;  }}break;default :throw new IllegalArgumentException("Detected unsupported char '" + v + ']');}cnt++;if (cnt == 8) {buffer.write(buff);cnt=0;buff=0;}}if (cnt > 0) {buffer.write(msb0 ? buff >>> (8 - cnt) : buff);}return buffer.toByteArray();}  }
class C{  public int append(char chunk[],int offset,int length) throws GuacamoleException {  int charsParsed=0;  if (elementCount == INSTRUCTION_MAX_ELEMENTS && state != State.COMPLETE) {    state=State.ERROR;    throw new GuacamoleServerException("Instruction contains too many elements.");  }  if (state == State.PARSING_LENGTH) {    int parsedLength=elementLength;    while (charsParsed < length) {      char c=chunk[offset + charsParsed++];      if (c >= '0' && c <= '9')       parsedLength=parsedLength * 10 + c - '0'; else       if (c == '.') {        state=State.PARSING_CONTENT;        break;      } else {        state=State.ERROR;        throw new GuacamoleServerException("Non-numeric character in element length.");      }    }    if (parsedLength > INSTRUCTION_MAX_LENGTH) {      state=State.ERROR;      throw new GuacamoleServerException("Instruction exceeds maximum length.");    }    elementLength=parsedLength;  }  if (state == State.PARSING_CONTENT && charsParsed + elementLength + 1 <= length) {    String element=new String(chunk,offset + charsParsed,elementLength);    charsParsed+=elementLength;    elementLength=0;    char terminator=chunk[offset + charsParsed++];    elements[elementCount++]=element;    if (terminator == ';') {      state=State.COMPLETE;      parsedInstruction=new GuacamoleInstruction(elements[0],Arrays.asList(elements).subList(1,elementCount));    } else     if (terminator == ',')     state=State.PARSING_LENGTH; else {      state=State.ERROR;      throw new GuacamoleServerException("Element terminator of instruction was not ';' nor ','");    }  }  return charsParsed;}  }
class C{  private boolean alwaysHold(ILogicalExpression cond){  if (cond.equals(ConstantExpression.TRUE)) {    return true;  }  if (cond.equals(new ConstantExpression(new AsterixConstantValue(ABoolean.TRUE)))) {    return true;  }  return false;}  }
class C{  private String parseEntityAttribute(String fieldName){  Matcher m=_fnPattern.matcher(fieldName);  if (m.find()) {    return m.group(1);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.611 -0500",hash_original_method="1C4CEBBE82C84ACE1203815C2B422383",hash_generated_method="0135B9E40705D7E3105DAB72CC525AB0") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onDataConnectionStateChanged(int state){}  }
class C{  @Override public CompletableFuture<Object[]> toArray(){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public ServerOptions(final Component owner,final String defaultName,final int defaultPort,final boolean showComment){  super(owner == null ? null : JOptionPane.getFrameForComponent(owner),"Server options",true);  m_showComment=showComment;  initComponents();  layoutComponents();  setupActions();  m_nameField.setText(defaultName);  m_portField.setValue(defaultPort);  setWidgetActivation();  pack();}  }
class C{  public static JSONObject toJSONObject(XMLTokener x) throws JSONException {  return (JSONObject)parse(x,false,null);}  }
class C{  public static void writeCompound(ByteBuf buf,CompoundTag data){  if (data == null) {    buf.writeByte(0);    return;  }  ByteArrayOutputStream out=new ByteArrayOutputStream();  try (NBTOutputStream str=new NBTOutputStream(out,false)){    str.writeTag(data);  } catch (  IOException e) {    GlowServer.logger.log(Level.WARNING,"Error serializing NBT: " + data,e);    return;  }  buf.writeBytes(out.toByteArray());}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isRawType(){  KeyKind kind=new KeyKind(this.key);  kind.parse();  return (kind.flags & KeyKind.F_RAW_TYPE) != 0;}  }
class C{  public BigdataStatementIterator removedIterator(){  final IChunkedOrderedIterator<ISPO> src=new ChunkedWrappedIterator<ISPO>(removed.iterator());  return new BigdataStatementIteratorImpl(kb,src).start(kb.getExecutorService());}  }
class C{  private static Document normalize(Document orig) throws IOException {  DocumentBuilder builder=null;  DocumentBuilderFactory factory=getFactory(false,false);  try {    builder=factory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new IOException("Cannot create parser satisfying configuration parameters: " + e,e);  }  DocumentType doctype=null;  NodeList nl=orig.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    if (nl.item(i) instanceof DocumentType) {      doctype=(DocumentType)nl.item(i);    }  }  Document doc;  if (doctype != null) {    doc=builder.getDOMImplementation().createDocument(orig.getDocumentElement().getNamespaceURI(),orig.getDocumentElement().getTagName(),builder.getDOMImplementation().createDocumentType(orig.getDoctype().getName(),orig.getDoctype().getPublicId(),orig.getDoctype().getSystemId()));    doc.removeChild(doc.getDocumentElement());  } else {    doc=builder.newDocument();  }  for (int i=0; i < nl.getLength(); i++) {    Node node=nl.item(i);    if (!(node instanceof DocumentType)) {      try {        doc.appendChild(doc.importNode(node,true));      } catch (      DOMException x) {        throw new IOException("Could not import or append " + node + " of "+ node.getClass(),x);      }    }  }  doc.normalize();  nl=doc.getElementsByTagName("*");  for (int i=0; i < nl.getLength(); i++) {    Element e=(Element)nl.item(i);    removeXmlBase(e);    NodeList nl2=e.getChildNodes();    for (int j=0; j < nl2.getLength(); j++) {      Node n=nl2.item(j);      if (n instanceof Text && ((Text)n).getNodeValue().trim().length() == 0) {        e.removeChild(n);        j--;      }    }  }  return doc;}  }
class C{  public StatusAttacker(Status status,double probability){  this.probability=probability;  this.status=status;}  }
class C{  @RequestMapping(value="/SAML2/SmartcardRealm",method={RequestMethod.GET,RequestMethod.POST}) public void smartcardRealmSsoDefaultTenant(Locale locale,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  ssoDefaultTenant(locale,model,request,response);}  }
class C{  Type fold2(int opcode,Type left,Type right){  try {    if (opcode > ByteCodes.preMask) {      Type t1=fold2(opcode >> ByteCodes.preShift,left,right);      return (t1.constValue() == null) ? t1 : fold1(opcode & ByteCodes.preMask,t1);    } else {      Object l=left.constValue();      Object r=right.constValue();switch (opcode) {case iadd:        return syms.intType.constType(intValue(l) + intValue(r));case isub:      return syms.intType.constType(intValue(l) - intValue(r));case imul:    return syms.intType.constType(intValue(l) * intValue(r));case idiv:  return syms.intType.constType(intValue(l) / intValue(r));case imod:return syms.intType.constType(intValue(l) % intValue(r));case iand:return (left.hasTag(BOOLEAN) ? syms.booleanType : syms.intType).constType(intValue(l) & intValue(r));case bool_and:return syms.booleanType.constType(b2i((intValue(l) & intValue(r)) != 0));case ior:return (left.hasTag(BOOLEAN) ? syms.booleanType : syms.intType).constType(intValue(l) | intValue(r));case bool_or:return syms.booleanType.constType(b2i((intValue(l) | intValue(r)) != 0));case ixor:return (left.hasTag(BOOLEAN) ? syms.booleanType : syms.intType).constType(intValue(l) ^ intValue(r));case ishl:case ishll:return syms.intType.constType(intValue(l) << intValue(r));case ishr:case ishrl:return syms.intType.constType(intValue(l) >> intValue(r));case iushr:case iushrl:return syms.intType.constType(intValue(l) >>> intValue(r));case if_icmpeq:return syms.booleanType.constType(b2i(intValue(l) == intValue(r)));case if_icmpne:return syms.booleanType.constType(b2i(intValue(l) != intValue(r)));case if_icmplt:return syms.booleanType.constType(b2i(intValue(l) < intValue(r)));case if_icmpgt:return syms.booleanType.constType(b2i(intValue(l) > intValue(r)));case if_icmple:return syms.booleanType.constType(b2i(intValue(l) <= intValue(r)));case if_icmpge:return syms.booleanType.constType(b2i(intValue(l) >= intValue(r)));case ladd:return syms.longType.constType(new Long(longValue(l) + longValue(r)));case lsub:return syms.longType.constType(new Long(longValue(l) - longValue(r)));case lmul:return syms.longType.constType(new Long(longValue(l) * longValue(r)));case ldiv:return syms.longType.constType(new Long(longValue(l) / longValue(r)));case lmod:return syms.longType.constType(new Long(longValue(l) % longValue(r)));case land:return syms.longType.constType(new Long(longValue(l) & longValue(r)));case lor:return syms.longType.constType(new Long(longValue(l) | longValue(r)));case lxor:return syms.longType.constType(new Long(longValue(l) ^ longValue(r)));case lshl:case lshll:return syms.longType.constType(new Long(longValue(l) << intValue(r)));case lshr:case lshrl:return syms.longType.constType(new Long(longValue(l) >> intValue(r)));case lushr:return syms.longType.constType(new Long(longValue(l) >>> intValue(r)));case lcmp:if (longValue(l) < longValue(r)) return syms.intType.constType(minusOne); else if (longValue(l) > longValue(r)) return syms.intType.constType(one); else return syms.intType.constType(zero);case fadd:return syms.floatType.constType(new Float(floatValue(l) + floatValue(r)));case fsub:return syms.floatType.constType(new Float(floatValue(l) - floatValue(r)));case fmul:return syms.floatType.constType(new Float(floatValue(l) * floatValue(r)));case fdiv:return syms.floatType.constType(new Float(floatValue(l) / floatValue(r)));case fmod:return syms.floatType.constType(new Float(floatValue(l) % floatValue(r)));case fcmpg:case fcmpl:if (floatValue(l) < floatValue(r)) return syms.intType.constType(minusOne); else if (floatValue(l) > floatValue(r)) return syms.intType.constType(one); else if (floatValue(l) == floatValue(r)) return syms.intType.constType(zero); else if (opcode == fcmpg) return syms.intType.constType(one); else return syms.intType.constType(minusOne);case dadd:return syms.doubleType.constType(new Double(doubleValue(l) + doubleValue(r)));case dsub:return syms.doubleType.constType(new Double(doubleValue(l) - doubleValue(r)));case dmul:return syms.doubleType.constType(new Double(doubleValue(l) * doubleValue(r)));case ddiv:return syms.doubleType.constType(new Double(doubleValue(l) / doubleValue(r)));case dmod:return syms.doubleType.constType(new Double(doubleValue(l) % doubleValue(r)));case dcmpg:case dcmpl:if (doubleValue(l) < doubleValue(r)) return syms.intType.constType(minusOne); else if (doubleValue(l) > doubleValue(r)) return syms.intType.constType(one); else if (doubleValue(l) == doubleValue(r)) return syms.intType.constType(zero); else if (opcode == dcmpg) return syms.intType.constType(one); else return syms.intType.constType(minusOne);case if_acmpeq:return syms.booleanType.constType(b2i(l.equals(r)));case if_acmpne:return syms.booleanType.constType(b2i(!l.equals(r)));case string_add:return syms.stringType.constType(left.stringValue() + right.stringValue());default :return null;}}} catch (ArithmeticException e) {return null;}}  }
class C{  private void onSantaServiceStateUpdate(int state){switch (state) {case SantaServiceMessages.STATUS_IDLE:    mWaitingForApi=false;  stateData();break;case SantaServiceMessages.STATUS_IDLE_NODATA:mWaitingForApi=true;stateNoData();break;case SantaServiceMessages.STATUS_ERROR_NODATA:mWaitingForApi=true;stateNoData();case SantaServiceMessages.STATUS_ERROR:mWaitingForApi=true;stateNoData();case SantaServiceMessages.STATUS_PROCESSING:mWaitingForApi=true;break;}}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == N4ClassifierDefinition.class) {switch (baseOperationID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_SUPER_CLASSIFIER_REFS:      return N4JSPackage.N4_INTERFACE_DECLARATION___GET_SUPER_CLASSIFIER_REFS;case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:    return N4JSPackage.N4_INTERFACE_DECLARATION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == N4ClassifierDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_SUPER_CLASSIFIER_REFS:return N4JSPackage.N4_INTERFACE_DECLARATION___GET_SUPER_CLASSIFIER_REFS;case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return N4JSPackage.N4_INTERFACE_DECLARATION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void onSwap(String spaceName,CacheObject key) throws IgniteCheckedException {  if (log.isDebugEnabled())   log.debug("Swap [space=" + spaceName + ", key="+ key+ "]");  if (ctx.indexing().enabled()) {    CacheObjectContext coctx=cacheObjectContext(spaceName);    ctx.indexing().onSwap(spaceName,key.value(coctx,false));  }  if (idx == null)   return;  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to process swap event (grid is stopping).");  try {    idx.onSwap(spaceName,key);  }  finally {    busyLock.leaveBusy();  }}  }
class C{  private void writeVersionFile(boolean newVersion) throws IOException {  String name;  if (newVersion) {    name=newVersionFile;  } else {    name=versionFile;  }  try (FileOutputStream fos=new FileOutputStream(fName(name));DataOutputStream out=new DataOutputStream(fos)){    writeInt(out,version);  } }  }
class C{  private void processAnsiCommand_P(){}  }
class C{  private void addToCache(File file,String mnemo){  BufferedInputStream fis;  try {    fis=new BufferedInputStream(new FileInputStream(file));  } catch (  FileNotFoundException e) {    System.out.println("Warning! File '" + file + "' not found!");    return;  }  String text="";  byte[] buf=new byte[4096];  int i=0;  try {    while ((i=fis.read(buf)) != -1) {      text+=new String(buf,0,i);    }    fis.close();  } catch (  IOException ignored) {  }  helpcache.put(mnemo,text);}  }
class C{  protected AbstractSignatureService(final CertificateVerifier certificateVerifier){  if (certificateVerifier == null) {    throw new NullPointerException("CertificateVerifier cannot be null !");  }  this.certificateVerifier=certificateVerifier;}  }
class C{  public boolean hasNoDragOffset(){  return mTransOffsetX <= 0 && mTransOffsetY <= 0 ? true : false;}  }
class C{  boolean purge(Reference ref){  boolean r=(parent.keyType > HARD) && (refKey == ref);  r=r || ((parent.valueType > HARD) && (refValue == ref));  if (r) {    if (parent.keyType > HARD) {      refKey.clear();    }    if (parent.valueType > HARD) {      refValue.clear();    } else     if (parent.purgeValues) {      setValue(null);    }  }  return r;}  }
class C{  private void onHangUp(String hangUpMsg){  mSavedCallview=null;  mHangUpReason=hangUpMsg;  if (null != mCall) {    mCall.hangup(hangUpMsg);  }}  }
class C{  public Collection<Classification<T,K>> classifyDetailed(Collection<T> features){  return this.categoryProbabilities(features);}  }
class C{  public boolean close(boolean done){  close();  if (thematicIndex != null) {    try {      thematicIndex.close();    } catch (    FormatException fe) {    }  }  return true;}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  private void initConfigurations(){  this.inputSize(TypedValue.COMPLEX_UNIT_PX,mInputTextSize);  this.inputColor(mInputColor);  if (mInputIconId != -1)   this.icon(mInputIconId);  if (mCleanIconId != -1)   this.cleanIcon(mCleanIconId);  this.hint(mHintText);  this.hintColor(mHintColor);  this.hintScale(mHintScale);  if (mHintScaleColor != -1)   this.hintScaleColor(mHintScaleColor);  this.errorColor(mErrorColor);  this.errorSize(TypedValue.COMPLEX_UNIT_PX,mErrorSize);  if (mMaxLength != 0)   this.maxLength(mMaxLength);  this.wordCountEnabled(mWordCountEnabled);  if (mWordCountColor != -1)   this.wordCountColor(mWordCountColor);}  }
class C{  public static String join(NamedValue[] values,String separator){  StringBuilder buff=new StringBuilder();  for (int i=0; i < values.length; i++) {    buff.append(values[i]);    if (i < values.length - 1)     buff.append(separator);  }  return buff.toString();}  }
class C{  public int span(final char[] c,int from){  final int length=length(), n=c.length;  if (n == 0)   return 0;  final int bloomFilter=buildFilter(c,n);  final char[] a=array;  if (from < 0)   from=0;  int i=from - 1, k;  while (++i < length) {    if ((bloomFilter & (1 << (a[i] & 0x1F))) != 0) {      k=n;      while (k-- != 0)       if (a[i] == c[k])       break;      if (k == -1)       return i - from;    } else     return i - from;  }  return i - from;}  }
class C{  void createEdges(Integer[] v){  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[3],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[1],v[4],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[8],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[3],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[7],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[0],v[9],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[9],v[8],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[7],v[6],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[6],v[5],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[4],v[2],EdgeType.DIRECTED);  graph.addEdge(new Double(Math.random()),v[5],v[4],EdgeType.DIRECTED);}  }
class C{  public void delete(){  m_inputField.dispose();  m_operatorBox.dispose();}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? NO_POSITION : recyclerView.getChildPosition(child);}  }
class C{  public static void closeSafely(@Nullable EncodedImage encodedImage){  if (encodedImage != null) {    encodedImage.close();  }}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  public void reverse(){  startAngle*=-1;}  }
class C{  public Gau4(){  super("gau4",4);}  }
class C{  public void buildIndex(){  NNSinglePassIndexer indexer=new NNSinglePassIndexer(indexDir.toString(),indexName,NN);  indexer.createInvertedIndex(new Collection[]{collection});}  }
class C{  public synchronized Sha256Hash hashForSignature(int inputIndex,Script connectedScript,SigHash type,boolean anyoneCanPay){  int sigHash=TransactionSignature.calcSigHashValue(type,anyoneCanPay);  return hashForSignature(inputIndex,connectedScript.getProgram(),(byte)sigHash);}  }
class C{  public void addParameter(String key,String value){  put(key,value);}  }
class C{  public List<RelatedResourceRep> listByCluster(URI clusterId){  UnManagedVolumeList response=client.get(UnManagedVolumeList.class,PathConstants.UNMANAGED_VOLUME_BY_CLUSTER_URL,clusterId);  return ResourceUtils.defaultList(response.getUnManagedVolumes());}  }
class C{  public void append(byte[] utf8,int start,int len){  setCapacity(length + len,true);  System.arraycopy(utf8,start,bytes,length,len);  length+=len;}  }
class C{  @Deprecated public static boolean equals(final Event personEvent,Id<Person> personId,final EventLog deqSimEvent){  return equals(personEvent,deqSimEvent);}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  public RemoteCustomerOrderServiceImpl(final GenericDTOService<CustomerOrderDTO> customerOrderDTOGenericDTOService,final FederationFacade federationFacade){  super(customerOrderDTOGenericDTOService);  this.federationFacade=federationFacade;}  }
class C{  private InterestPolicy(String name){  this.name=name;  this.ordinal=nextOrdinal++;  VALUES[this.ordinal]=this;}  }
class C{  public static Sector warpImageWithControlPoints4(BufferedImage sourceImage,java.awt.geom.Point2D[] imagePoints,LatLon[] geoPoints,BufferedImage destImage){  if (sourceImage == null) {    String message=Logging.getMessage("nullValue.SourceImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (destImage == null) {    String message=Logging.getMessage("nullValue.DestinationImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String message=validateControlPoints(4,imagePoints,geoPoints);  if (message != null) {    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  java.awt.geom.Point2D[] bestFitImagePoints=new java.awt.geom.Point2D[3];  LatLon[] bestFitGeoPoints=new LatLon[3];  computeBestFittingControlPoints4(imagePoints,geoPoints,bestFitImagePoints,bestFitGeoPoints);  return warpImageWithControlPoints3(sourceImage,bestFitImagePoints,bestFitGeoPoints,destImage);}  }
class C{  public void testBug82094() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  FabricMySQLDataSource ds=getNewDefaultDataSource();  ds.setFabricServerGroup("ha_config1_group");  this.conn=(FabricMySQLConnection)ds.getConnection(this.username,this.password);  this.conn.createStatement().close();  FabricConnection fabricConn=new FabricConnection(this.fabricUrl,this.fabricUsername,this.fabricPassword);  for (  Server server : fabricConn.getServerGroup("ha_config1_group").getServers()) {    if (server.isSlave()) {      try {        this.conn.transactionCompleted();        fabricConn.getClient().removeServerFromGroup(server.getGroupName(),server.getHostname(),server.getPort());        fabricConn.refreshState();        while (!fabricConn.isStateExpired()) {          Thread.sleep(1000);        }        this.conn.transactionCompleted();      }  finally {        fabricConn.getClient().addServerToGroup(server.getGroupName(),server.getHostname(),server.getPort());        fabricConn.refreshState();        while (!fabricConn.isStateExpired()) {          Thread.sleep(1000);        }      }    }  }  this.conn.close();}  }
class C{  private void resetNavigationState(){  currentPageIndex=-1;}  }
class C{  public String globalInfo(){  return "Writes to a destination that is in the XML version of the ARFF format. " + "The data can be compressed with gzip, in order to save space.";}  }
class C{  @Scheduled(fixedDelay=5000) public void deleteHistoricData(){  log.debug("start delete historic data");  List<Check> checks=checkService.findAll();  for (  Check check : checks) {    GregorianCalendar calendar=new GregorianCalendar();switch (check.getKeepResultType()) {case MONTH:      calendar.add(Calendar.MONTH,-check.getKeepResultsValue());    break;case DAY:  calendar.add(Calendar.DATE,-check.getKeepResultsValue());break;case HOUR:calendar.add(Calendar.HOUR,-check.getKeepResultsValue());break;case MINUTE:calendar.add(Calendar.MINUTE,-check.getKeepResultsValue());break;case SECOND:calendar.add(Calendar.SECOND,-check.getKeepResultsValue());break;default :throw new UnsupportedOperationException("Unknown keep results type");}checkResultService.deleteOld(check.getId(),calendar.getTime());}log.debug("finish delete historic data");}  }
class C{  @Override public void run(){  Properties props=new Properties();  props.put("mail.debug","false");  props.put("mail.smtp.ehlo","true");  props.setProperty("mail.smtp.allow8bitmime","true");  props.put("mail.smtp.timeout",smtpTimeout + "");  props.put("mail.smtp.connectiontimeout",connectionTimeout + "");  props.put("mail.smtp.sendpartial",String.valueOf(sendPartial));  props.put("mail.smtp.localhost",getHeloName());  props.put("mail.smtp.starttls.enable",String.valueOf(startTLS));  props.put("mail.smtp.ssl.enable",String.valueOf(isSSLEnable));  if (isBindUsed) {    props.put("mail.smtp.socketFactory.class",RemoteDeliverySocketFactory.class.getClass());    props.put("mail.smtp.socketFactory.fallback","false");  }  if (authUser != null) {    props.put("mail.smtp.auth","true");  }  props.putAll(defprops);  final Session session=obtainSession(props);  try {    while (!Thread.interrupted() && !destroyed) {      try {        MailQueueItem queueItem=queue.deQueue();        Mail mail=queueItem.getMail();        String key=mail.getName();        try {          if (isDebug) {            String message=Thread.currentThread().getName() + " will process mail " + key;            log(message);          }          if (deliver(mail,session)) {            LifecycleUtil.dispose(mail);          } else {            int retries=0;            try {              retries=Integer.parseInt(mail.getErrorMessage());            } catch (            NumberFormatException e) {            }            long delay=getNextDelay(retries);            if (usePriority) {              mail.setAttribute(MailPrioritySupport.MAIL_PRIORITY,MailPrioritySupport.LOW_PRIORITY);            }            queue.enQueue(mail,delay,TimeUnit.MILLISECONDS);            LifecycleUtil.dispose(mail);          }          mail=null;          queueItem.done(true);        } catch (        Exception e) {          log("Exception caught in RemoteDelivery.run()",e);          LifecycleUtil.dispose(mail);          queueItem.done(false);          throw new MailQueueException("Unable to perform dequeue",e);        }      } catch (      Throwable e) {        if (!destroyed) {          log("Exception caught in RemoteDelivery.run()",e);        }      }    }  }  finally {    Thread.interrupted();  }}  }
class C{  public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public void testCreateContainerCapability(){  factory.registerContainerCapability("containerId",J2EEContainerCapability.class);  ContainerCapability capability=factory.createContainerCapability("containerId");  assertTrue(capability.supportsDeployableType(DeployableType.EAR));}  }
class C{  private InetSocketAddress nextInetSocketAddress() throws IOException {  if (!hasNextInetSocketAddress()) {    throw new SocketException("No route to " + address.url().host() + "; exhausted inet socket addresses: "+ inetSocketAddresses);  }  return inetSocketAddresses.get(nextInetSocketAddressIndex++);}  }
class C{  protected final void collectFFDCDBData(Connection con) throws AdeException {  try {    captureMinimalDBData(con);    final long fileLength=archiveExportedDBTables();    logger.debug("The length of the compressed archive is " + fileLength);  } catch (  AdeException e) {    throw e;  }catch (  Exception e) {    e.printStackTrace();    throw new AdeExtInternalException("Exception in collecting FFDC DB data : ",e);  }}  }
class C{  private void addManager(HttpServletRequest request,TimetableManagerForm frm) throws Exception {  sessionContext.checkPermission(Right.TimetableManagerAdd);  lookupManager(frm);  TimetableManagerDAO mgrDao=new TimetableManagerDAO();  RolesDAO rDao=new RolesDAO();  DepartmentDAO dDao=new DepartmentDAO();  SolverGroupDAO sgDao=new SolverGroupDAO();  Session hibSession=mgrDao.getSession();  Transaction tx=hibSession.beginTransaction();  TimetableManager mgr=new TimetableManager();  mgr.setFirstName(frm.getFirstName());  mgr.setMiddleName(frm.getMiddleName());  mgr.setLastName(frm.getLastName());  mgr.setAcademicTitle(frm.getTitle());  mgr.setExternalUniqueId(frm.getExternalId());  mgr.setEmailAddress(frm.getEmail());  List roles=frm.getRoles();  List roleReceiveEmails=frm.getRoleReceiveEmailFlags();  Iterator receiveEmailIt=roleReceiveEmails.iterator();  for (Iterator i=roles.iterator(); i.hasNext(); ) {    Roles role=rDao.get(new Long(i.next().toString()));    ManagerRole mgrRole=new ManagerRole();    mgrRole.setRole(role);    mgrRole.setTimetableManager(mgr);    if (frm.getPrimaryRole().equals(role.getRoleId().toString()))     mgrRole.setPrimary(new Boolean(true)); else     mgrRole.setPrimary(new Boolean(false));    if (receiveEmailIt.hasNext()) {      String receiveEmailsStr=(String)receiveEmailIt.next();      Boolean receiveEmails=new Boolean("on".equalsIgnoreCase(receiveEmailsStr));      mgrRole.setReceiveEmails(receiveEmails);    } else {      mgrRole.setReceiveEmails(new Boolean(false));    }    mgr.addTomanagerRoles(mgrRole);  }  hibSession.saveOrUpdate(mgr);  mgr.setDepartments(new HashSet<Department>());  for (Iterator i=frm.getDepts().iterator(); i.hasNext(); ) {    Department dept=dDao.get(new Long(i.next().toString()));    mgr.getDepartments().add(dept);    dept.getTimetableManagers().add(mgr);    hibSession.saveOrUpdate(dept);  }  mgr.setSolverGroups(new HashSet<SolverGroup>());  for (Iterator i=frm.getSolverGrs().iterator(); i.hasNext(); ) {    SolverGroup sg=sgDao.get(new Long(i.next().toString()));    mgr.getSolverGroups().add(sg);    sg.getTimetableManagers().add(mgr);    hibSession.saveOrUpdate(sg);  }  ChangeLog.addChange(hibSession,sessionContext,mgr,ChangeLog.Source.MANAGER_EDIT,ChangeLog.Operation.CREATE,null,null);  tx.commit();  if (mgr.getUniqueId() != null)   request.setAttribute(Constants.JUMP_TO_ATTR_NAME,mgr.getUniqueId().toString());}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  private PathDataEvaluator(){}  }
class C{  public boolean contains(Object key){  if (key == null) {    String msg=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }synchronized (this.lock) {    return this.entries.containsKey(key);  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.UNION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.UNION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ComposedTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.COMPOSED_TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.UNION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static String encode(String content){  try {    return URLEncoder.encode(content,"UTF-8");  } catch (  final UnsupportedEncodingException e) {    throw new AssertionError(e);  }}  }
class C{  private static int calculateNested(@NonNull String text){  int nested=0;  while (true) {    if ((nested + 1) * KEY_BLOCK_QUOTES.length() > text.length()) {      break;    }    String sub=text.substring(nested * KEY_BLOCK_QUOTES.length(),(nested + 1) * KEY_BLOCK_QUOTES.length());    if (!KEY_BLOCK_QUOTES.equals(sub)) {      break;    }    ++nested;  }  return nested;}  }
class C{  public GenericFeed retrieveMonitors(String sourceUser) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getFeed(new URL(BASE_URL + "mail/monitor/" + domain+ "/"+ sourceUser),GenericFeed.class);}  }
class C{  public static Boolean isMobileDataEnabled(Context context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  try {    Class<?> c=Class.forName(cm.getClass().getName());    Method m=c.getDeclaredMethod("getMobileDataEnabled");    m.setAccessible(true);    return (Boolean)m.invoke(cm);  } catch (  Exception e) {    Log.e(TAG,"exception thrown",e);    return Boolean.FALSE;  }}  }
class C{  public Builder path(String... path){  this.path=path;  return this;}  }
class C{  public static void addMinutesToList(Context context,ArrayList<Integer> values,ArrayList<String> labels,int minutes){  int index=values.indexOf(minutes);  if (index != -1) {    return;  }  String label=constructReminderLabel(context,minutes,false);  int len=values.size();  for (int i=0; i < len; i++) {    if (minutes < values.get(i)) {      values.add(i,minutes);      labels.add(i,label);      return;    }  }  values.add(minutes);  labels.add(len,label);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, a;  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  double e0;  double af;  double ac;  double e1, r, s1, s2, s, e2;  int[] acVals=new int[]{0,1,1,2,2,3,3,4};  int[] afVals=new int[]{1,-1,1,-1,1,-1,1,-1};  int[] e1Col=new int[]{1,0,0,-1,-1,0,0,1};  int[] e1Row=new int[]{0,-1,-1,0,0,1,1,0};  int[] e2Col=new int[]{1,1,-1,-1,-1,-1,1,1};  int[] e2Row=new int[]{-1,-1,-1,-1,1,1,1,1};  double atanof1=Math.atan(1);  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("circular_bw.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        e0=DEM.getValue(row,col);        if (e0 != noData) {          maxSlope=-9999999;          flowDir=360;          for (a=0; a < 8; a++) {            ac=acVals[a];            af=afVals[a];            e1=DEM.getValue(row + e1Row[a],col + e1Col[a]);            e2=DEM.getValue(row + e2Row[a],col + e2Col[a]);            if (e1 != noData && e2 != noData) {              if (e0 > e1 && e0 > e2) {                s1=(e0 - e1) / gridRes;                if (s1 == 0) {                  s1=0.00001;                }                s2=(e1 - e2) / gridRes;                r=Math.atan(s2 / s1);                s=Math.sqrt(s1 * s1 + s2 * s2);                if (s1 < 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 < 0 && s2 == 0) {                  s=-1 * s;                }                if (s1 == 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 == 0.001 && s2 < 0) {                  s=-1 * s;                }                if (r < 0 || r > atanof1) {                  if (r < 0) {                    r=0;                    s=s1;                  } else {                    r=atanof1;                    s=(e0 - e2) / diagGridRes;                  }                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              } else               if (e0 > e1 || e0 > e2) {                if (e0 > e1) {                  r=0;                  s=(e0 - e1) / gridRes;                } else {                  r=atanof1;                  s=(e0 - e2) / diagGridRes;                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              }            }          }          if (maxSlope <= 0) {            output.setValue(row,col,-1);          } else {            flowDir=Math.round((flowDir * (180 / Math.PI)) * 10) / 10;            flowDir=360 - flowDir + 90;            if (flowDir > 360) {              flowDir=flowDir - 360;            }            output.setValue(row,col,flowDir);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void addVolumeStorageSystem(Map<URI,StorageSystem> volumeStorageSystems,Volume volume){  if (volumeStorageSystems == null) {    volumeStorageSystems=new HashMap<URI,StorageSystem>();  }  StorageSystem volumeStorageSystem=volumeStorageSystems.get(volume.getStorageController());  if (volumeStorageSystem == null) {    volumeStorageSystem=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());    volumeStorageSystems.put(volumeStorageSystem.getId(),volumeStorageSystem);  }}  }
class C{  public static boolean canAppend(Node node,Node parentNode){  if (node == null || parentNode == null || node == parentNode || isAncestorOf(node,parentNode)) {    return false;  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void testPeriodOpen(Properties ctx,Timestamp dateAcct,int C_DocType_ID,int AD_Org_ID) throws PeriodClosedException {  MDocType dt=MDocType.get(ctx,C_DocType_ID);  testPeriodOpen(ctx,dateAcct,dt.getDocBaseType(),AD_Org_ID);}  }
class C{  public void testOptimisticOffheap() throws Exception {  testTransaction(cacheOffheap,OPTIMISTIC,KEY_1,wrap(1));}  }
class C{  public static boolean matchRegex(Object left,Object right){  if (left == null || right == null)   return false;  Pattern pattern;  if (right instanceof Pattern) {    pattern=(Pattern)right;  } else {    pattern=Pattern.compile(toString(right));  }  String stringToCompare=toString(left);  Matcher matcher=pattern.matcher(stringToCompare);  RegexSupport.setLastMatcher(matcher);  return matcher.matches();}  }
class C{  public static ContactsFragment newInstance(){  return new ContactsFragment();}  }
class C{  public static MethodAnnotation fromXMethod(XMethod xmethod){  return fromForeignMethod(xmethod.getClassName(),xmethod.getName(),xmethod.getSignature(),xmethod.isStatic());}  }
class C{  String writeConfigFileV3(Matsim4UrbansimConfigType m4uConfigType) throws UncheckedIOException {  try {    String destination=this.dummyPath + "/test_config.xml";    log.info("writing test config into: " + destination);    BufferedWriter bw=IOUtils.getBufferedWriter(destination);    String xsdPath=TempDirectoryUtil.createCustomTempDirectory("xsd");    LoadFile loadFile=new LoadFile(InternalConstants.CURRENT_MATSIM_4_URBANSIM_XSD_MATSIMORG,xsdPath,InternalConstants.CURRENT_XSD_FILE_NAME);    File file2XSD=loadFile.loadMATSim4UrbanSimXSD();    if (file2XSD == null || !file2XSD.exists()) {      log.error("Did not find xml schema!");      System.exit(1);    }    log.info("Using following xsd schema: " + file2XSD.getCanonicalPath());    SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);    Schema schema=schemaFactory.newSchema(file2XSD);    JAXBContext jaxbContext=JAXBContext.newInstance(org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory.class);    Marshaller m=jaxbContext.createMarshaller();    m.setSchema(schema);    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory of=new org.matsim.contrib.matsim4urbansim.matsim4urbansim.jaxbconfigv3.ObjectFactory();    JAXBElement<Matsim4UrbansimConfigType> jaxbElement=of.createMatsim4UrbansimConfig(m4uConfigType);    m.marshal(jaxbElement,bw);    return destination;  } catch (  JAXBException e) {    e.printStackTrace();    Assert.assertFalse(true);  }catch (  SAXException e) {    e.printStackTrace();    Assert.assertFalse(true);  }catch (  IOException e) {    e.printStackTrace();    Assert.assertFalse(true);  }  return null;}  }
class C{  public GVTFont deriveFont(float size,AttributedCharacterIterator aci){  return deriveFont(size,aci.getAttributes());}  }
class C{  public void sync(Translog.Location location){  try {    final Engine engine=engine();    engine.getTranslog().ensureSynced(location);  } catch (  EngineClosedException ex) {  }catch (  IOException ex) {    logger.debug("failed to sync translog",ex);    throw new ElasticsearchException("failed to sync translog",ex);  }}  }
class C{  public Text center(Text text,Text padding){  int inputLength=this.getWidth(text);  if (inputLength >= LINE_WIDTH) {    return text;  }  Text styledSpace=this.withStyle(LiteralText.of(" "),text);  Text textWithSpaces=this.addSpaces(styledSpace,text);  boolean addSpaces=getWidth(textWithSpaces) <= LINE_WIDTH;  int paddingLength=this.getWidth(this.withStyle(padding,text));  final Text.Builder output=Text.builder();  if (paddingLength < 1) {    Text defaultPadding=Text.of("=");    padding=defaultPadding;    paddingLength=this.getWidth(this.withStyle(defaultPadding,text));  }  Text styledPadding=this.withStyle(padding,text);  if (inputLength == 0) {    this.addPadding(padding,output,GenericMath.floor((double)LINE_WIDTH / paddingLength));  } else {    if (addSpaces) {      text=textWithSpaces;      inputLength=this.getWidth(textWithSpaces);    }    int paddingNecessary=LINE_WIDTH - inputLength;    int paddingCount=GenericMath.floor(paddingNecessary / paddingLength);    int beforePadding=GenericMath.floor(paddingCount / 2.0);    int afterPadding=paddingCount - beforePadding;    this.addPadding(styledPadding,output,beforePadding);    output.append(text);    this.addPadding(styledPadding,output,afterPadding);  }  return this.finalizeBuilder(text,output);}  }
class C{  private static boolean unaligned(){  String arch=System.getProperty("os.arch");  return arch.equals("i386") || arch.equals("x86") || arch.equals("amd64")|| arch.equals("x86_64");}  }
class C{  GridClientConnectionResetException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public void onReceive(Context context,Intent intent){  Bundle data=intent.getExtras();  String handleFromIntent=data.getString(MqttServiceConstants.CALLBACK_CLIENT_HANDLE);  if ((handleFromIntent == null) || (!handleFromIntent.equals(clientHandle))) {    return;  }  String action=data.getString(MqttServiceConstants.CALLBACK_ACTION);  if (MqttServiceConstants.CONNECT_ACTION.equals(action)) {    connectAction(data);  } else   if (MqttServiceConstants.CONNECT_EXTENDED_ACTION.equals(action)) {    connectExtendedAction(data);  } else   if (MqttServiceConstants.MESSAGE_ARRIVED_ACTION.equals(action)) {    messageArrivedAction(data);  } else   if (MqttServiceConstants.SUBSCRIBE_ACTION.equals(action)) {    subscribeAction(data);  } else   if (MqttServiceConstants.UNSUBSCRIBE_ACTION.equals(action)) {    unSubscribeAction(data);  } else   if (MqttServiceConstants.SEND_ACTION.equals(action)) {    sendAction(data);  } else   if (MqttServiceConstants.MESSAGE_DELIVERED_ACTION.equals(action)) {    messageDeliveredAction(data);  } else   if (MqttServiceConstants.ON_CONNECTION_LOST_ACTION.equals(action)) {    connectionLostAction(data);  } else   if (MqttServiceConstants.DISCONNECT_ACTION.equals(action)) {    disconnected(data);  } else   if (MqttServiceConstants.TRACE_ACTION.equals(action)) {    traceAction(data);  } else {    mqttService.traceError(MqttService.TAG,"Callback action doesn't exist.");  }}  }
class C{  public StdXMLReader(String publicID,String systemID) throws MalformedURLException, FileNotFoundException, IOException {  URL systemIDasURL=null;  try {    systemIDasURL=new URL(systemID);  } catch (  MalformedURLException e) {    systemID="file:" + systemID;    try {      systemIDasURL=new URL(systemID);    } catch (    MalformedURLException e2) {      throw e;    }  }  this.currentReader=new StackedReader();  this.readers=new Stack();  Reader reader=this.openStream(publicID,systemIDasURL.toString());  this.currentReader.lineReader=new LineNumberReader(reader);  this.currentReader.pbReader=new PushbackReader(this.currentReader.lineReader,2);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void deselect(int index){  checkWidget();  table.deselect(index);}  }
class C{  public static String downloadText(String url) throws IOException {  return downloadText(new URL(url));}  }
class C{  public static List<org.oscm.internal.vo.VOTechnicalServiceOperation> convertToUpVOTechnicalServiceOperation(List<org.oscm.vo.VOTechnicalServiceOperation> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOTechnicalServiceOperation> newVO=new ArrayList<org.oscm.internal.vo.VOTechnicalServiceOperation>();  for (  org.oscm.vo.VOTechnicalServiceOperation tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public static ApiImplMapping of(IN4JSCore n4jsCore){  final ApiImplMapping mapping=new ApiImplMapping();  n4jsCore.findAllProjects().forEach(null);  return mapping;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void checkAtomic(String name) throws Exception {  for (int i=INIT_GRID_NUM; i < 20; i++) {    startGrid(i);    assert PARTITIONED == grid(i).cache(null).getConfiguration(CacheConfiguration.class).getCacheMode();    IgniteAtomicLong atomic=grid(i).atomicLong(name,0,true);    long val=atomic.get();    assertEquals("Atomic check failed for node: " + i,(long)i,val);    atomic.incrementAndGet();    stopGrid(i);  }}  }
class C{  private static CacheConfiguration<Object,Object> cacheConfiguration(){  CacheConfiguration<Object,Object> ccfg=new CacheConfiguration<>();  ccfg.setBackups(1);  ccfg.setName(PARTITIONED_CACHE_NAME);  ccfg.setIndexedTypes(String.class,Entity.class);  return ccfg;}  }
class C{  public Boolean isOK(){  return ok;}  }
class C{  public void paint(Graphics2D g2,Node node,Justification justification,Rectangle2D bounds){  throw new UnsupportedOperationException("This version of paint is not used in NodeShapePainter");}  }
class C{  @Override public void move(Path fromObj,SecureDirectoryStream<Path> dir,Path toObj) throws IOException {  UnixPath from=getName(fromObj);  UnixPath to=getName(toObj);  if (dir == null)   throw new NullPointerException();  if (!(dir instanceof UnixSecureDirectoryStream))   throw new ProviderMismatchException();  UnixSecureDirectoryStream that=(UnixSecureDirectoryStream)dir;  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    this.ds.directory().resolve(from).checkWrite();    that.ds.directory().resolve(to).checkWrite();  }  this.ds.readLock().lock();  try {    that.ds.readLock().lock();    try {      if (!this.ds.isOpen() || !that.ds.isOpen())       throw new ClosedDirectoryStreamException();      try {        renameat(this.dfd,from.asByteArray(),that.dfd,to.asByteArray());      } catch (      UnixException x) {        if (x.errno() == EXDEV) {          throw new AtomicMoveNotSupportedException(from.toString(),to.toString(),x.errorString());        }        x.rethrowAsIOException(from,to);      }    }  finally {      that.ds.readLock().unlock();    }  }  finally {    this.ds.readLock().unlock();  }}  }
class C{  public boolean isIgnoreDuplicates(){  return ignoreDuplicates;}  }
class C{  @Override public MapStack<K> standAloneStack(){  MapStack<K> standAlone=MapStack.create(this);  return standAlone;}  }
class C{  public EventNode next() throws Exception {  EventNode next=peek;  if (next == null) {    next=read();  } else {    peek=null;  }  return next;}  }
class C{  @HLEFunction(nid=0x4B1B5E82,version=150) public int sceRtcCheckValid(ScePspDateTime time){  Calendar cal=new GregorianCalendar(time.year,time.month - 1,time.day,time.hour,time.minute,time.second);  int result=0;  if (time.year < 1582 || time.year > 3000) {    result=PSP_TIME_INVALID_YEAR;  } else   if (time.month < 1 || time.month > 12) {    result=PSP_TIME_INVALID_MONTH;  } else   if (time.day < 1 || time.day > 31) {    result=PSP_TIME_INVALID_DAY;  } else   if (time.hour < 0 || time.hour > 23) {    result=PSP_TIME_INVALID_HOUR;  } else   if (time.minute < 0 || time.minute > 59) {    result=PSP_TIME_INVALID_MINUTES;  } else   if (time.second < 0 || time.second > 59) {    result=PSP_TIME_INVALID_SECONDS;  } else   if (time.microsecond < 0 || time.microsecond >= 1000000) {    result=PSP_TIME_INVALID_MICROSECONDS;  } else   if (cal.get(Calendar.DAY_OF_MONTH) != time.day) {    result=PSP_TIME_INVALID_DAY;  }  if (log.isDebugEnabled()) {    log.debug(String.format("sceRtcCheckValid time=%s, cal=%s, returning 0x%08X",time,cal,result));  }  return result;}  }
class C{  public void finalize(){  if (this.taskGroup != null)   this.taskGroup.interruptAll();}  }
class C{  public void syncAll(){  m_nvmasvc.sync(m_nid,0L,0L,true);}  }
class C{  public ToStringBuilder append(final String fieldName,final boolean value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText1.setText(stdStatus1);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);}  }
class C{  public static float myRand(int idum){  idum^=MASK;  int k=idum / IQ;  idum=IA * (idum - k * IQ) - IR * k;  idum^=MASK;  if (idum < 0)   idum+=IM;  float answer=AM * idum;  return answer;}  }
class C{  public void saveProjectMisc(Project project,ProjectMisc misc) throws ServerException {  if (misc.isUpdated()) {    final String workspace=project.getWorkspace();    final String path=project.getPath();    final Pair<String,String> key=Pair.of(workspace,path);    final int index=key.hashCode() & CACHE_MASK;    miscLocks[index].lock();    try {      miscCaches[index].remove(key);      writeProjectMisc(project,misc);      miscCaches[index].put(key,misc);    }  finally {      miscLocks[index].unlock();    }  }}  }
class C{  public String toString(){  return this.rgbaPictureEssenceDescriptorBO.toString();}  }
class C{  private void loadAllGefaehrdungen(){  List<Baustein> bausteine=BSIKatalogInvisibleRoot.getInstance().getBausteine();  for (  Baustein baustein : bausteine) {    if (baustein.getGefaehrdungen() == null) {      continue;    }    for (    Gefaehrdung gefaehrdung : baustein.getGefaehrdungen()) {      Boolean duplicate=false;      alleTitel:       for (      IGSModel element : allGefaehrdungen) {        if (element.getId().equals(gefaehrdung.getId())) {          duplicate=true;          break alleTitel;        }      }      if (!duplicate) {        allGefaehrdungen.add(gefaehrdung);      }    }  }}  }
class C{  public void drawLine(List<mxPoint> pts,Map<String,Object> style){  Color penColor=mxUtils.getStyleStrokeColor(style,Color.BLACK);  float penWidth=mxUtils.getStyleStrokeWidth(style,(float)1);  if (penColor != null && penWidth > 0) {    String shape=mxUtils.getString(style,mxConstants.STYLE_SHAPE,"");    if (shape.equals(mxConstants.SHAPE_ARROW)) {      setStroke(penWidth,style);      mxPoint p0=pts.get(0);      mxPoint pe=pts.get(pts.size() - 1);      Rectangle bounds=new Rectangle(p0.getPoint());      bounds.add(pe.getPoint());      Color fillColor=mxUtils.getStyleFillColor(style);      Paint fillPaint=getFillPaint(bounds,fillColor,style);      boolean shadow=mxUtils.isTrue(style,mxConstants.STYLE_SHADOW,false);      drawArrow(pts,fillColor,fillPaint,penColor,shadow);    } else {      Object startMarker=style.get(mxConstants.STYLE_STARTARROW);      Object endMarker=style.get(mxConstants.STYLE_ENDARROW);      float startSize=(float)(mxUtils.getFloat(style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_MARKERSIZE));      float endSize=(float)(mxUtils.getFloat(style,mxConstants.STYLE_ENDSIZE,mxConstants.DEFAULT_MARKERSIZE));      boolean rounded=mxUtils.isTrue(style,mxConstants.STYLE_ROUNDED,false);      drawConnector(pts,penWidth,penColor,startMarker,startSize,endMarker,endSize,rounded,style);    }  }}  }
class C{  public void myMethod(){  return "";}  }
class C{  public Map<K,V> pop(){  if (this.stackList.size() > 1) {    return stackList.remove(0);  } else {    return null;  }}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  public ViewPropertyAnimator rotationXBy(float value){  animatePropertyBy(ROTATION_X,value);  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("CORE","2.0");  assertTrue("throw_True",state);}  }
class C{  private void doScrollY(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      if (mHorizontal) {        smoothScrollBy(0,delta);      } else {        smoothScrollBy(delta,0);      }    } else {      if (mHorizontal) {        scrollBy(0,delta);      } else {        scrollBy(delta,0);      }    }  }}  }
class C{  public synchronized void playbackLastMacro(){  if (currentMacro != null) {    Action[] actions=getActions();    int numActions=actions.length;    List macroRecords=currentMacro.getMacroRecords();    int num=macroRecords.size();    if (num > 0) {      undoManager.beginInternalAtomicEdit();      try {        for (int i=0; i < num; i++) {          MacroRecord record=(MacroRecord)macroRecords.get(i);          for (int j=0; j < numActions; j++) {            if ((actions[j] instanceof RecordableTextAction) && record.id.equals(((RecordableTextAction)actions[j]).getMacroID())) {              actions[j].actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,record.actionCommand));              break;            }          }        }      }  finally {        undoManager.endInternalAtomicEdit();      }    }  }}  }
class C{  private void writePostResource(String path,StringBuilder sb){  if (getFileHandler().isDirectory(path)) {    writeDirectoryPostResource(sb,path);  } else   if (path.toLowerCase().endsWith(".jar")) {    writeJarPostResource(sb,path);  } else {    writeFilePostResource(sb,path);  }}  }
class C{  public int policy(){  return Integer.parseInt(fields[40]);}  }
class C{  public InvalidPhraseException(Throwable cause,String phrase){  super(cause,new Object[]{phrase});}  }
class C{  public PlayerCanEquipItemCondition(final String itemName){  this.itemName=checkNotNull(itemName);}  }
class C{  public static String conceptToString(Concept concept,ConceptName localizedName){  return concept.getConceptId() + "^" + localizedName.getName()+ "^"+ FormConstants.HL7_LOCAL_CONCEPT;}  }
class C{  public String toString(){  return state.toString();}  }
class C{  @Override public Uri insert(@NonNull Uri uri,ContentValues values){  SQLiteDatabase db=openHelper.getWritableDatabase();  int match=URI_MATCHER.match(uri);  if (match == MY_DOWNLOADS) {    return insertDownload(uri,values,db,match);  }  if (match == BATCHES) {    long rowId=db.insert(DownloadContract.Batches.BATCHES_TABLE_NAME,null,values);    notifyBatchesChanged();    return ContentUris.withAppendedId(downloadsUriProvider.getBatchesUri(),rowId);  }  LLog.d("calling insert on an unknown/invalid URI: " + uri);  throw new IllegalArgumentException("Unknown/Invalid URI " + uri);}  }
class C{  @FXML public boolean saveProjectAs() throws IOException {  final FileChooser fileChooser=new FileChooser();  fileChooser.setTitle("Save Project As");  fileChooser.getExtensionFilters().add(new ExtensionFilter("GRIP File","*.grip"));  project.getFile().ifPresent(null);  final File file=fileChooser.showSaveDialog(root.getScene().getWindow());  if (file == null) {    return false;  }  project.save(file);  return true;}  }
class C{  protected List<NamedList<Object>> doPivots(NamedList<Integer> superFacets,String field,String subField,Deque<String> fnames,Deque<String> vnames,ParsedParams parsed,List<StatsField> statsFields,List<FacetComponent.FacetBase> facetQueries,List<RangeFacetRequest> facetRanges) throws IOException {  boolean isShard=rb.req.getParams().getBool(ShardParams.IS_SHARD,false);  SolrIndexSearcher searcher=rb.req.getSearcher();  SchemaField sfield=searcher.getSchema().getField(field);  FieldType ftype=sfield.getType();  String nextField=fnames.poll();  BytesRefBuilder termval=new BytesRefBuilder();  List<NamedList<Object>> values=new ArrayList<>(superFacets.size());  for (  Map.Entry<String,Integer> kv : superFacets) {    if (kv.getValue() >= getMinCountForField(field)) {      final String fieldValue=kv.getKey();      final int pivotCount=kv.getValue();      SimpleOrderedMap<Object> pivot=new SimpleOrderedMap<>();      pivot.add("field",field);      if (null == fieldValue) {        pivot.add("value",null);      } else {        ftype.readableToIndexed(fieldValue,termval);        pivot.add("value",ftype.toObject(sfield,termval.get()));      }      pivot.add("count",pivotCount);      final DocSet subset=getSubset(parsed.docs,sfield,fieldValue);      addPivotQueriesAndRanges(pivot,params,subset,facetQueries,facetRanges);      if (subField != null) {        NamedList<Integer> facetCounts;        if (!vnames.isEmpty()) {          String val=vnames.pop();          facetCounts=new NamedList<>();          facetCounts.add(val,getSubsetSize(subset,searcher.getSchema().getField(subField),val));        } else {          facetCounts=this.getTermCountsForPivots(subField,parsed.withDocs(subset));        }        if (facetCounts.size() >= 1) {          pivot.add("pivot",doPivots(facetCounts,subField,nextField,fnames,vnames,parsed.withDocs(subset),statsFields,facetQueries,facetRanges));        }      }      if ((isShard || 0 < pivotCount) && !statsFields.isEmpty()) {        Map<String,StatsValues> stv=new LinkedHashMap<>();        for (        StatsField statsField : statsFields) {          stv.put(statsField.getOutputKey(),statsField.computeLocalStatsValues(subset));        }        pivot.add("stats",StatsComponent.convertToResponse(stv));      }      values.add(pivot);    }  }  fnames.push(nextField);  return values;}  }
class C{  @ExpectWarning("IL") public void case2(){  if (true) {    System.out.println("Hello world!");  }  String text=null;  if (text != null) {    case2();  } else {    case2();  }}  }
class C{  public void removeOkListener(ActionListener a){  m_okBut.removeActionListener(a);}  }
class C{  public static void reset(){  threadAuthContext.set(null);  threadContextId.set(null);  threadTransactionId.set(null);}  }
class C{  public void removeActionListener(ActionListener removeListener){  m_listeners.removeElement(removeListener);}  }
class C{  public BatchUpdateException(int[] updateCounts,Throwable cause){  super(cause);  this.updateCounts=updateCounts;}  }
class C{  public InlineKeyboardButton.InlineKeyboardButtonBuilder text(String text){  this.text=text;  return this;}  }
class C{  public void addStackedLink(LinkProperties link){  if (link != null && link.getInterfaceName() != null) {    mStackedLinks.put(link.getInterfaceName(),link);  }}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  private static int translateBatch(HyperGraph graph,Set<HGHandle> batch,RAMStorageGraph subgraph,Map<HGHandle,Object> objects,Mapping<Pair<HGHandle,Object>,HGHandle> atomFinder,Map<HGHandle,HGHandle> substitutes){  int replacements=0;  for (  HGHandle atom : batch) {    Object object=readAtom(atom,graph,new HGAtomResolver<HGAtomType>(graph),subgraph);    HGHandle existing=atomFinder == null ? null : atomFinder.eval(new Pair<HGHandle,Object>(atom,object));    if (existing != null) {      substitutes.put(atom,existing);      if (!existing.equals(atom))       replacements++;    } else     objects.put(atom,object);  }  return replacements;}  }
class C{  @Scheduled(fixedRateString="${batch.greeting.fixedrate}") public void fixedRateJob(){  logger.info("> fixedRateJob");  counterService.increment("method.invoked.greetingBatchBean.fixedRateJob");  final Collection<Greeting> greetings=greetingService.findAll();  logger.info(MESSAGE_FORMAT,greetings.size());  logger.info("< fixedRateJob");}  }
class C{  protected BufferedImage loadImage(String filename) throws IOException {  File file=new File(filename);  BufferedImage result=ImageIO.read(file);  return result;}  }
class C{  private static KV<ByteString,Iterable<Mutation>> makeBadWrite(String key){  Iterable<Mutation> mutations=ImmutableList.of(Mutation.newBuilder().build());  return KV.of(ByteString.copyFromUtf8(key),mutations);}  }
class C{  public LongSparseArray(){  this(10);}  }
class C{  private void consistencyCheck(){  if (CONSISTENCY_CHECK) {    assert lock.writeLock().isHeldByCurrentThread();    if (node2part == null)     return;    for (    Map.Entry<UUID,GridDhtPartitionMap2> e : node2part.entrySet()) {      for (      Integer p : e.getValue().keySet()) {        Set<UUID> nodeIds=part2node.get(p);        assert nodeIds != null : "Failed consistency check [part=" + p + ", nodeId="+ e.getKey()+ ']';        assert nodeIds.contains(e.getKey()) : "Failed consistency check [part=" + p + ", nodeId="+ e.getKey()+ ", nodeIds="+ nodeIds+ ']';      }    }    for (    Map.Entry<Integer,Set<UUID>> e : part2node.entrySet()) {      for (      UUID nodeId : e.getValue()) {        GridDhtPartitionMap2 map=node2part.get(nodeId);        assert map != null : "Failed consistency check [part=" + e.getKey() + ", nodeId="+ nodeId+ ']';        assert map.containsKey(e.getKey()) : "Failed consistency check [part=" + e.getKey() + ", nodeId="+ nodeId+ ']';      }    }  }}  }
class C{  public Object[] toArray(){  return al.toArray();}  }
class C{  public EpsilonProgressContinuation(EpsilonBoxEvolutionaryAlgorithm algorithm,int windowSize,int maxWindowSize,double populationRatio,int minimumPopulationSize,int maximumPopulationSize,Selection selection,Variation variation){  super(algorithm,windowSize,maxWindowSize,populationRatio,minimumPopulationSize,maximumPopulationSize,selection,variation);}  }
class C{  public boolean overlapsWith(int rangeOffset,int rangeLength){  if (isDeleted)   return false;  int end=rangeOffset + rangeLength;  int thisEnd=this.offset + this.length;  if (rangeLength > 0) {    if (this.length > 0)     return this.offset < end && rangeOffset < thisEnd;    return rangeOffset <= this.offset && this.offset < end;  }  if (this.length > 0)   return this.offset <= rangeOffset && rangeOffset < thisEnd;  return this.offset == rangeOffset;}  }
class C{  private static Object[] create(int type,int subtype,int scale,int metadataType,int jdbcType){  FieldDescriptor fieldDescriptor=rowDescriptorBuilder.setType(type).setSubType(subtype).setScale(scale).toFieldDescriptor();  return new Object[]{fieldDescriptor,metadataType,jdbcType};}  }
class C{  public String validationForBifurcation(final PropertyImpl propertyModel,final BasicProperty basicProperty,final String reason){  final List<PropertyStatusValues> children=propertyStatusValuesDAO.getPropertyStatusValuesByReferenceBasicProperty(basicProperty);  final Boolean parentBifurcated=isPropertyBifurcated(basicProperty);  final Boolean childrenCreated=!children.isEmpty();  String errorMsg=null;  if (PROPERTY_MODIFY_REASON_BIFURCATE.equalsIgnoreCase(reason)) {    if (parentBifurcated && !childrenCreated)     errorMsg="error.child.not.created";  } else   if (PROPERTY_MODIFY_REASON_ADD_OR_ALTER.equalsIgnoreCase(reason)) {    if (!childrenCreated) {      if (parentBifurcated)       errorMsg="error.child.not.created";    } else     if (!parentBifurcated)     errorMsg="error.parent.not.bifurcated";  } else   if (PROP_CREATE_RSN_BIFUR.equals(reason))   if (parentBifurcated)   getLatestHistoryProperty(basicProperty.getUpicNo()); else   basicProperty.getActiveProperty();  return errorMsg;}  }
class C{  public void removeModuleNids(String modulename){  HashMap<Integer,Integer> nidToAddress=moduleToNidTable.remove(modulename);  if (nidToAddress != null && overwrittenSyscalls.size() > 0) {    for (    int nid : nidToAddress.keySet()) {      int syscall=nidToSyscallInternal(nid);      if (syscall != -1) {        overwrittenSyscalls.remove(syscall);      }    }  }}  }
class C{  public void translate(double x,double y){  this.translation.x+=x;  this.translation.y+=y;}  }
class C{  void findMatches(SearchPattern pattern,SearchParticipant[] participants,IJavaSearchScope scope,SearchRequestor requestor,IProgressMonitor monitor) throws CoreException {  if (monitor != null && monitor.isCanceled())   throw new OperationCanceledException();  try {    if (VERBOSE) {      Util.verbose("Searching for pattern: " + pattern.toString());      Util.verbose(scope.toString());    }    if (participants == null) {      if (VERBOSE)       Util.verbose("No participants => do nothing!");      return;    }    int length=participants.length;    if (monitor != null)     monitor.beginTask(Messages.engine_searching,100 * length);    requestor.beginReporting();    for (int i=0; i < length; i++) {      if (monitor != null && monitor.isCanceled())       throw new OperationCanceledException();      SearchParticipant participant=participants[i];      try {        if (monitor != null)         monitor.subTask(Messages.bind(Messages.engine_searching_indexing,new String[]{participant.getDescription()}));        participant.beginSearching();        requestor.enterParticipant(participant);        PathCollector pathCollector=new PathCollector();        indexManager.performConcurrentJob(new PatternSearchJob(pattern,participant,scope,pathCollector,indexManager),IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,monitor == null ? null : new SubProgressMonitor(monitor,50));        if (monitor != null && monitor.isCanceled())         throw new OperationCanceledException();        if (monitor != null)         monitor.subTask(Messages.bind(Messages.engine_searching_matching,new String[]{participant.getDescription()}));        String[] indexMatchPaths=pathCollector.getPaths();        if (indexMatchPaths != null) {          pathCollector=null;          int indexMatchLength=indexMatchPaths.length;          SearchDocument[] indexMatches=new SearchDocument[indexMatchLength];          for (int j=0; j < indexMatchLength; j++) {            indexMatches[j]=participant.getDocument(indexMatchPaths[j]);          }          SearchDocument[] matches=MatchLocator.addWorkingCopies(pattern,indexMatches,getWorkingCopies(),participant);          participant.locateMatches(matches,pattern,scope,requestor,monitor == null ? null : new SubProgressMonitor(monitor,50));        }      }  finally {        requestor.exitParticipant(participant);        participant.doneSearching();      }    }  }  finally {    requestor.endReporting();    if (monitor != null)     monitor.done();  }}  }
class C{  public boolean isSetOperatorId(){  return EncodingUtils.testBit(issetBitfield,OPERATORID_ISSET_ID);}  }
class C{  public static int updateLyricLastVisit(ContentResolver resolver,String path,Long time){  ContentValues values=new ContentValues();  values.put(Constants.Column.LAST_VISITED_AT,time);  return resolver.update(Constants.CONTENT_URI,values,Constants.Column.PATH + "= ?",new String[]{path});}  }
class C{  public static void unlinkC_Order_ID(Properties ctx,int C_Order_ID,String trxName){  for (  MRequisitionLine line : MRequisitionLine.forC_Order_ID(ctx,C_Order_ID,trxName)) {    line.setC_OrderLine_ID(0);    line.saveEx();  }}  }
class C{  public OffsetDateTime plusWeeks(long weeks){  return with(dateTime.plusWeeks(weeks),offset);}  }
class C{  public UtilsTest(String name){  super(name);}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 6:{        return DOUBLE_QUOTED_STRING;      }case 24:    break;case 20:{    return BOOLEAN;  }case 25:break;case 10:{return COMMA;}case 26:break;case 4:{return LINE_COMMENT;}case 27:break;case 23:{return GLOB_EXCLUDES_KEYWORD;}case 28:break;case 7:{return SLASH;}case 29:break;case 3:{return IDENTIFIER;}case 30:break;case 21:{return GLOB_KEYWORD;}case 31:break;case 1:{return com.intellij.psi.TokenType.BAD_CHARACTER;}case 32:break;case 18:{return R_CURLY;}case 33:break;case 8:{return SINGLE_QUOTED_STRING;}case 34:break;case 9:{return PLUS;}case 35:break;case 17:{return R_BRACKET;}case 36:break;case 14:{return L_BRACKET;}case 37:break;case 13:{return L_PARENTHESES;}case 38:break;case 11:{return COLON;}case 39:break;case 19:{return MACROS;}case 40:break;case 16:{return R_PARENTHESES;}case 41:break;case 15:{return L_CURLY;}case 42:break;case 12:{return EQUAL;}case 43:break;case 5:{return NUMBER;}case 44:break;case 22:{return NONE;}case 45:break;case 2:{return com.intellij.psi.TokenType.WHITE_SPACE;}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void addRow(TradelogSummary element){  getData().getTradelogSummary().add(element);  final Vector<Object> newRow=new Vector<Object>();  getNewRow(newRow,element);  rows.add(newRow);  this.fireTableRowsInserted(rows.size() - 1,rows.size() - 1);}  }
class C{  public SyncMusic(final int hostId,Bundle syncExtras){  this.hostId=hostId;  this.syncExtras=syncExtras;}  }
class C{  public void writeBinary(BinaryRawWriter writer){  writer.writeBoolean(success);  if (success)   data.writeBinary(writer);  writer.writeTimestamp(lockTime);  writer.writeLong(lockId);}  }
