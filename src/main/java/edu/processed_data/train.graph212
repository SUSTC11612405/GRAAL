class C{  public DataSink(OutputStream stream){  m_Saver=null;  m_Stream=stream;}  }
class C{  void release(){  checkValid();  conn.prepareCommand("RELEASE TO SAVEPOINT " + getName(name,savepointId),Integer.MAX_VALUE).executeUpdate();  this.conn=null;}  }
class C{  protected void doFlood(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  Set<OFPort> broadcastPorts=this.topologyService.getSwitchBroadcastPorts(sw.getId());  if (broadcastPorts == null) {    log.debug("BroadcastPorts returned null. Assuming single switch w/no links.");    broadcastPorts=Collections.singleton(OFPort.FLOOD);  }  for (  OFPort p : broadcastPorts) {    if (p.equals(inPort))     continue;    actions.add(sw.getOFFactory().actions().output(p,Integer.MAX_VALUE));  }  pob.setActions(actions);  pob.setBufferId(OFBufferId.NO_BUFFER);  pob.setInPort(inPort);  pob.setData(pi.getData());  try {    if (log.isTraceEnabled()) {      log.trace("Writing flood PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,pob.build()});    }    messageDamper.write(sw,pob.build());  } catch (  IOException e) {    log.error("Failure writing PacketOut switch={} packet-in={} packet-out={}",new Object[]{sw,pi,pob.build()},e);  }  return;}  }
class C{  public static long parseTLCTimestamp(String message){  if (message.indexOf(OB) != -1 && message.indexOf(CB) != -1) {    final String time=message.substring(message.indexOf(OB) + 1,message.indexOf(CB));    try {      return sdf.parse(time).getTime();    } catch (    ParseException e) {      TLCUIActivator.getDefault().logDebug("Error parsing TLC Timestamp.");      return new Date().getTime();    }  } else {    TLCUIActivator.getDefault().logDebug("Error parsing TLC Timestamp.");    return new Date().getTime();  }}  }
class C{  private static Object readFileOrUrl(String path,boolean convertToString){  try {    return SourceReader.readFileOrUrl(path,convertToString,shellContextFactory.getCharacterEncoding());  } catch (  IOException ex) {    Context.reportError(ToolErrorReporter.getMessage("msg.couldnt.read.source",path,ex.getMessage()));    return null;  }}  }
class C{  public void evictAll(boolean clearRefs){  throw new UnsupportedOperationException();}  }
class C{  @Override public void execute(Iterator<String> contactsIter){  int totalContactsModified=modifyAllContacts(contactsIter);  Utils.showToast(mOps.getActivityContext(),totalContactsModified + " contact(s) modified");}  }
class C{  public Exception error(){  return err;}  }
class C{  public Matrix4f translationRotate(float tx,float ty,float tz,float qx,float qy,float qz,float qw){  float dqx=qx + qx;  float dqy=qy + qy;  float dqz=qz + qz;  float q00=dqx * qx;  float q11=dqy * qy;  float q22=dqz * qz;  float q01=dqx * qy;  float q02=dqx * qz;  float q03=dqx * qw;  float q12=dqy * qz;  float q13=dqy * qw;  float q23=dqz * qw;  this._m00(1.0f - (q11 + q22));  this._m01(q01 + q23);  this._m02(q02 - q13);  this._m03(0.0f);  this._m10(q01 - q23);  this._m11(1.0f - (q22 + q00));  this._m12(q12 + q03);  this._m13(0.0f);  this._m20(q02 + q13);  this._m21(q12 - q03);  this._m22(1.0f - (q11 + q00));  this._m23(0.0f);  this._m30(tx);  this._m31(ty);  this._m32(tz);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public Builder withLogTerm(long term){  request.logTerm=Assert.argNot(term,term < 0,"term must be positive");  return this;}  }
class C{  public static void main(String[] args) throws Exception {  SpringApplication.run(ProductApp.class,args);}  }
class C{  @DSComment("Database access") @DSSpec(DSCat.DATABASE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.146 -0500",hash_original_method="C851DFBDB6501381AF55260B14586647",hash_generated_method="60B42FCF91B7DAFA84B5EEAB5AFFEF11") public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:37.049 -0500",hash_original_method="3B9D7DC916535DA1F64238687579C1A4",hash_generated_method="C22EB0BEA05DE70A2CBD1DE4B70D044B") @Override protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container){  dispatchThawSelfOnly(container);}  }
class C{  public static DiceRoll rollDice(final List<Unit> units,final boolean defending,final PlayerID player,final IDelegateBridge bridge,final IBattle battle,final String annotation,final Collection<TerritoryEffect> territoryEffects,final List<Unit> allEnemyUnitsAliveOrWaitingToDie){  if (games.strategy.triplea.Properties.getLow_Luck(bridge.getData())) {    return rollDiceLowLuck(units,defending,player,bridge,battle,annotation,territoryEffects,allEnemyUnitsAliveOrWaitingToDie);  } else {    return rollDiceNormal(units,defending,player,bridge,battle,annotation,territoryEffects,allEnemyUnitsAliveOrWaitingToDie);  }}  }
class C{  public static void main(String[] args){  CheckGOE check=new CheckGOE();  runCheck(check,args);  if (check.getSuccess()) {    System.exit(0);  } else {    System.exit(1);  }}  }
class C{  public void waitForIdle(){  waitForIdle(NO_TIMEOUT,TimeUnit.MILLISECONDS);}  }
class C{  public boolean isSetupStatement(int position){  int exerciseStart=Collections.min(targetStatements);  return position < exerciseStart;}  }
class C{  public IconicsDrawable actionBar(){  sizeDp(ANDROID_ACTIONBAR_ICON_SIZE_DP + (2 * ANDROID_ACTIONBAR_ICON_SIZE_PADDING_DP));  paddingDp(ANDROID_ACTIONBAR_ICON_SIZE_PADDING_DP);  return this;}  }
class C{  public QueryExecution createQueryExecution(Query query,Model model){  return createQueryExecution(query,model,null);}  }
class C{  protected void readLSD(){  width=readShort();  height=readShort();  int packed=read();  gctFlag=(packed & 0x80) != 0;  gctSize=2 << (packed & 7);  bgIndex=read();  pixelAspect=read();}  }
class C{  public void hleChangeThreadState(SceKernelThreadInfo thread,int newStatus){  if (thread == null) {    return;  }  if (thread.status == newStatus) {    return;  }  if (!dispatchThreadEnabled && thread == currentThread && newStatus != PSP_THREAD_RUNNING) {    log.info("DispatchThread disabled, not changing thread state of " + thread + " to "+ newStatus);    return;  }  boolean addReadyThreadsFirst=false;  if (thread.status == PSP_THREAD_WAITING && newStatus != PSP_THREAD_WAITING_SUSPEND) {    if (thread.wait.waitTimeoutAction != null) {      Scheduler.getInstance().removeAction(thread.wait.microTimeTimeout,thread.wait.waitTimeoutAction);      thread.wait.waitTimeoutAction=null;    }    if (thread.wait.onUnblockAction != null) {      thread.wait.onUnblockAction.execute();      thread.wait.onUnblockAction=null;    }    thread.doCallbacks=false;  } else   if (thread.isStopped()) {    if (thread.doDeleteAction != null) {      Scheduler.getInstance().removeAction(0,thread.doDeleteAction);      thread.doDeleteAction=null;    }  } else   if (thread.isReady()) {    removeFromReadyThreads(thread);  } else   if (thread.isSuspended()) {    thread.doCallbacks=false;  } else   if (thread.isRunning()) {    needThreadReschedule=true;    addReadyThreadsFirst=true;  }  thread.status=newStatus;  if (thread.status == PSP_THREAD_WAITING) {    if (thread.wait.waitTimeoutAction != null) {      Scheduler.getInstance().addAction(thread.wait.microTimeTimeout,thread.wait.waitTimeoutAction);    }    if (thread.waitType == PSP_WAIT_NONE) {      log.warn("changeThreadState thread '" + thread.name + "' => PSP_THREAD_WAITING. waitType should NOT be PSP_WAIT_NONE. caller:"+ getCallingFunction());    }  } else   if (thread.isStopped()) {    if (thread.name.equals("root") || thread.name.equals("SceModmgrStart") || thread.name.equals("SceModmgrStop")) {      thread.doDelete=true;    }    if (thread.doDelete) {      if (thread.doDeleteAction == null) {        thread.doDeleteAction=new DeleteThreadAction(thread);        Scheduler.getInstance().addAction(0,thread.doDeleteAction);      }    }    onThreadStopped(thread);  } else   if (thread.isReady()) {    addToReadyThreads(thread,addReadyThreadsFirst);    thread.waitType=PSP_WAIT_NONE;    thread.wait.waitTimeoutAction=null;    thread.wait.waitStateChecker=null;    thread.wait.onUnblockAction=null;    thread.doCallbacks=false;  } else   if (thread.isRunning()) {    if (thread.waitType != PSP_WAIT_NONE && !isIdleThread(thread)) {      log.error(String.format("changeThreadState thread %s => PSP_THREAD_RUNNING. waitType should be PSP_WAIT_NONE. caller: %s",thread,getCallingFunction()));    }  }}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  private void optimize(final IEvaluationContext ctx,final StaticAnalysis sa,final GraphPatternGroup<?> op){  if (op instanceof JoinGroupNode) {    final JoinGroupNode joinGroup=(JoinGroupNode)op;    IGroupMemberNode first=null;    IGroupMemberNode last=null;    for (    IGroupMemberNode child : joinGroup) {      if (child instanceof IBindingProducerNode) {        final ASTBase join=(ASTBase)child;        if (join.getProperty(QueryHints.RUN_FIRST,false)) {          if (first != null) {            throw new RuntimeException("there can be only one \"run first\" join in any group");          }          if (((IJoinNode)join).isOptional()) {            throw new RuntimeException("\"run first\" cannot be attached to optional joins");          }          first=child;        }        if (join.getProperty(QueryHints.RUN_LAST,false)) {          if (last != null) {            throw new RuntimeException("there can be only one \"run last\" join in any group");          }          last=child;        }      }    }    if (first != null) {      int firstJoinIndex=0;      for (int i=0; i < joinGroup.arity(); i++) {        if (joinGroup.get(i) instanceof IBindingProducerNode) {          firstJoinIndex=i;          break;        }      }      joinGroup.removeChild(first);      joinGroup.addArg(firstJoinIndex,(BOp)first);    }    if (last != null) {      int lastJoinIndex=0;      for (int i=joinGroup.size() - 1; i >= 0; i--) {        if (joinGroup.get(i) instanceof IBindingProducerNode) {          lastJoinIndex=i;          break;        }      }      joinGroup.removeChild(last);      joinGroup.addArg(lastJoinIndex,(BOp)last);    }  }  for (int i=0; i < op.arity(); i++) {    final BOp child=op.get(i);    if (child instanceof GraphPatternGroup<?>) {      @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> childGroup=(GraphPatternGroup<IGroupMemberNode>)child;      optimize(ctx,sa,childGroup);    } else     if (child instanceof QueryBase) {      final QueryBase subquery=(QueryBase)child;      @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> childGroup=(GraphPatternGroup<IGroupMemberNode>)subquery.getWhereClause();      optimize(ctx,sa,childGroup);    }  }}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,char[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putCharArray(name,value);  return this;}  }
class C{  public synchronized int startServer(String ip,int port,boolean isDynamicPort){  if (isProxyRunning) {    stopServer();  }  isProxyRunning=false;  thread=new Thread(this,"ZAP-ProxyServer");  thread.setDaemon(true);  thread.setPriority(Thread.NORM_PRIORITY + 1);  proxySocket=null;  for (int i=0; i < 20 && proxySocket == null; i++) {    try {      proxySocket=createServerSocket(ip,port);      proxySocket.setSoTimeout(PORT_TIME_OUT);      isProxyRunning=true;    } catch (    UnknownHostException e) {      if (View.isInitialised()) {        View.getSingleton().showWarningDialog(Constant.messages.getString("proxy.error.host.unknow") + " " + ip);      } else {        System.out.println(Constant.messages.getString("proxy.error.host.unknow") + " " + ip);      }      return -1;    }catch (    BindException e) {      if ("Cannot assign requested address".equals(e.getMessage())) {        showErrorMessage(Constant.messages.getString("proxy.error.address") + " " + ip);        return -1;      } else       if ("Permission denied".equals(e.getMessage()) || "Address already in use".equals(e.getMessage())) {        if (!isDynamicPort) {          showErrorMessage(Constant.messages.getString("proxy.error.port") + " " + ip+ ":"+ port);          return -1;        } else         if (port < 65535) {          port++;        }      } else {        handleUnknownException(e);        return -1;      }    }catch (    IOException e) {      handleUnknownException(e);      return -1;    }  }  if (proxySocket == null) {    return -1;  }  thread.start();  return proxySocket.getLocalPort();}  }
class C{  @Override public void addRow(Value[] values){  cloneLobs(values);  if (distinct) {    if (distinctRows != null) {      ValueArray array=getArrayOfVisible(values);      distinctRows.put(array,values);      rowCount=distinctRows.size();      if (rowCount > maxMemoryRows) {        external=new ResultTempTable(session,expressions,true,sort);        rowCount=external.addRows(distinctRows.values());        distinctRows=null;      }    } else {      rowCount=external.addRow(values);    }    return;  }  rows.add(values);  rowCount++;  if (rows.size() > maxMemoryRows) {    if (external == null) {      external=new ResultTempTable(session,expressions,false,sort);    }    addRowsToDisk();  }}  }
class C{  private byte[] decodeAES(final byte[] encKey,final byte[] encData,final byte[] ivData) throws Exception {  return decryptionMethods.decodeAES(encKey,encData,ivData);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter three numbers: ");  double number1=input.nextDouble();  double number2=input.nextDouble();  double number3=input.nextDouble();  displaySortedNumbers(number1,number2,number3);}  }
class C{  public void addKeyName(String keynameString){  this.add(new KeyName(this.doc,keynameString));}  }
class C{  private String resolveSearchField(IBindingSet bs){  String searchFieldStr=resolveAsString(searchField,bs);  if (searchFieldStr == null || searchFieldStr.isEmpty()) {    searchFieldStr=defaults.getDefaultSearchField();  }  return searchFieldStr == null || searchFieldStr.isEmpty() ? FTS.Options.DEFAULT_SEARCH_FIELD : searchFieldStr;}  }
class C{  public static SubqueryExistsExpression subqueryExists(EPStatementObjectModel model){  return new SubqueryExistsExpression(model);}  }
class C{  public void addDataSet(T d){  if (d == null)   return;  mYValCount+=d.getEntryCount();  mYValueSum+=d.getYValueSum();  if (mDataSets.size() <= 0) {    mYMax=d.getYMax();    mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      mLeftAxisMax=d.getYMax();      mLeftAxisMin=d.getYMin();    } else {      mRightAxisMax=d.getYMax();      mRightAxisMin=d.getYMin();    }  } else {    if (mYMax < d.getYMax())     mYMax=d.getYMax();    if (mYMin > d.getYMin())     mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      if (mLeftAxisMax < d.getYMax())       mLeftAxisMax=d.getYMax();      if (mLeftAxisMin > d.getYMin())       mLeftAxisMin=d.getYMin();    } else {      if (mRightAxisMax < d.getYMax())       mRightAxisMax=d.getYMax();      if (mRightAxisMin > d.getYMin())       mRightAxisMin=d.getYMin();    }  }  mDataSets.add(d);  handleEmptyAxis(getFirstLeft(),getFirstRight());}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(20,1));  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);}  }
class C{  public void skip(long n){  while (hasNext() && n-- > 0) {    fetchNext();  }}  }
class C{  public static double computeDegree(Vertex<LongWritable,VertexValue,DoubleWritable> v){  double degree=0.0;  for (  Edge<LongWritable,DoubleWritable> edge : v.getEdges()) {    degree+=edge.getValue().get();  }  return degree;}  }
class C{  public boolean isSelected(){  return true;}  }
class C{  public void delete(final long addr,final IAllocationContext context){  final int rwaddr=decodeAddr(addr);  final int sze=decodeSize(addr);  if (rwaddr == 0L)   throw new IllegalArgumentException(AbstractBufferStrategy.ERR_ADDRESS_IS_NULL);  if (sze == 0)   throw new IllegalArgumentException(AbstractBufferStrategy.ERR_BAD_RECORD_SIZE);  m_store.free(rwaddr,sze,context);}  }
class C{  public CompilationUnit newCompilationUnit(){  return new CompilationUnit(this);}  }
class C{  public void disableAutoReceipts(){  setAutoReceiptsEnabled(false);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:14.881 -0500",hash_original_method="3AECC6260DA21BAD7E8B15E74C7BA72C",hash_generated_method="F392C09D31983111498AB59E23767E46") private void showPopupUnchecked(int maxActivityCount){  if (mAdapter.getDataModel() == null) {    throw new IllegalStateException("No data model. Did you call #setDataModel?");  }  getViewTreeObserver().addOnGlobalLayoutListener(mOnGlobalLayoutListener);  final boolean defaultActivityButtonShown=mDefaultActivityButton.getVisibility() == VISIBLE;  final int activityCount=mAdapter.getActivityCount();  final int maxActivityCountOffset=defaultActivityButtonShown ? 1 : 0;  if (maxActivityCount != ActivityChooserViewAdapter.MAX_ACTIVITY_COUNT_UNLIMITED && activityCount > maxActivityCount + maxActivityCountOffset) {    mAdapter.setShowFooterView(true);    mAdapter.setMaxActivityCount(maxActivityCount - 1);  } else {    mAdapter.setShowFooterView(false);    mAdapter.setMaxActivityCount(maxActivityCount);  }  ListPopupWindow popupWindow=getListPopupWindow();  if (!popupWindow.isShowing()) {    if (mIsSelectingDefaultActivity || !defaultActivityButtonShown) {      mAdapter.setShowDefaultActivity(true,defaultActivityButtonShown);    } else {      mAdapter.setShowDefaultActivity(false,false);    }    final int contentWidth=Math.min(mAdapter.measureContentWidth(),mListPopupMaxWidth);    popupWindow.setContentWidth(contentWidth);    popupWindow.show();    if (mProvider != null) {      mProvider.subUiVisibilityChanged(true);    }    popupWindow.getListView().setContentDescription(mContext.getString(R.string.activitychooserview_choose_application));  }}  }
class C{  private String readString(int len){  byte[] buff=data;  int p=pos;  char[] chars=new char[len];  for (int i=0; i < len; i++) {    int x=buff[p++] & 0xff;    if (x < 0x80) {      chars[i]=(char)x;    } else     if (x >= 0xe0) {      chars[i]=(char)(((x & 0xf) << 12) + ((buff[p++] & 0x3f) << 6) + (buff[p++] & 0x3f));    } else {      chars[i]=(char)(((x & 0x1f) << 6) + (buff[p++] & 0x3f));    }  }  pos=p;  return new String(chars);}  }
class C{  public static void resetSingleton(){  instance=null;}  }
class C{  protected boolean scrollDown(TextView widget,Spannable buffer,int amount){  final Layout layout=widget.getLayout();  final int innerHeight=getInnerHeight(widget);  final int bottom=widget.getScrollY() + innerHeight;  int bottomLine=layout.getLineForVertical(bottom);  if (layout.getLineTop(bottomLine + 1) < bottom + 1) {    bottomLine+=1;  }  final int limit=layout.getLineCount() - 1;  if (bottomLine <= limit) {    bottomLine=Math.min(bottomLine + amount - 1,limit);    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(bottomLine + 1) - innerHeight);    return true;  }  return false;}  }
class C{  public void startOrScheduleRecording(StorageData storageData,RecordingProperties recordingProperties) throws IOException, SerializationException, BusinessException {  if (!isStorageExisting(storageData)) {    this.createStorage(storageData);  }  StorageData local=getLocalStorageDataObject(storageData);  if (!isStorageOpen(local)) {    this.openStorage(local);  }synchronized (this) {    if (!storageRecorder.isRecordingOn() && !storageRecorder.isRecordingScheduled()) {      StorageWriter storageWriter=openedStoragesMap.remove(local);      storageRecorder.startOrScheduleRecording(storageWriter,recordingProperties);      recorderStorageData=local;      recorderStorageData.markRecording();      writeStorageDataToDisk(recorderStorageData);    }  }}  }
class C{  public void addRaster(float lt,float ln,Image image,int image_width,int image_height,LinkProperties properties) throws IOException, InterruptedException {  LinkRaster.write(lt,ln,image,image_width,image_height,properties,link.dos);}  }
class C{  public DatabaseManager(final IDatabaseManager manager){  Preconditions.checkNotNull(manager,"Error: Manager argument can't be null");  m_manager=manager;  for (  final IDatabase database : m_manager) {    m_databases.add(new Database(database));  }  manager.addListener(m_internalListener);}  }
class C{  public boolean epsilonEquals(float x,float y,float z,float epsilon){  if (Math.abs(x - this.x) > epsilon)   return false;  if (Math.abs(y - this.y) > epsilon)   return false;  if (Math.abs(z - this.z) > epsilon)   return false;  return true;}  }
class C{  public void testSuccessWithDefaultConfig(){  CircuitBreaker breaker=new CircuitBreaker();  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  private void writeTimeMLDocument(Document xmlDoc,String filename){  File outFile=new File(mOutputDir,filename + ".tml");  BufferedWriter bw=null;  try {    bw=new BufferedWriter(new FileWriter(outFile));    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"no");    DOMSource source=new DOMSource(xmlDoc);    StreamResult result=new StreamResult(bw);    transformer.transform(source,result);  } catch (  IOException e) {    e.printStackTrace();    Logger.printError(component,"File " + outFile.getAbsolutePath() + " could not be written.");  }catch (  TransformerException e) {    e.printStackTrace();    Logger.printError(component,"XML transformer could not be properly initialized.");  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      Logger.printError(component,"File " + outFile.getAbsolutePath() + " could not be closed.");    }  }}  }
class C{  @Override protected void autoAdjustRange(){  Plot plot=getPlot();  if (plot == null) {    return;  }  if (plot instanceof ValueAxisPlot) {    ValueAxisPlot vap=(ValueAxisPlot)plot;    Range r=vap.getDataRange(this);    if (r == null) {      if (this.timeline instanceof SegmentedTimeline) {        r=new DateRange(((SegmentedTimeline)this.timeline).getStartTime(),((SegmentedTimeline)this.timeline).getStartTime() + 1);      } else {        r=new DateRange();      }    }    long upper=this.timeline.toTimelineValue((long)r.getUpperBound());    long lower;    long fixedAutoRange=(long)getFixedAutoRange();    if (fixedAutoRange > 0.0) {      lower=upper - fixedAutoRange;    } else {      lower=this.timeline.toTimelineValue((long)r.getLowerBound());      double range=upper - lower;      long minRange=(long)getAutoRangeMinimumSize();      if (range < minRange) {        long expand=(long)(minRange - range) / 2;        upper=upper + expand;        lower=lower - expand;      }      upper=upper + (long)(range * getUpperMargin());      lower=lower - (long)(range * getLowerMargin());    }    upper=this.timeline.toMillisecond(upper);    lower=this.timeline.toMillisecond(lower);    DateRange dr=new DateRange(new Date(lower),new Date(upper));    setRange(dr,false,false);  }}  }
class C{  public static double CCfitness(boolean useTrainingData,GEPIndividual ind){  double CC=CCrawFitness(useTrainingData,ind,0);  return (500.0 * (CC + 1.0));}  }
class C{  private void addNewNode(HGNode node){  this.nodesSigTbl.put(node.signature(),node);  this.sortedNodes=null;  SuperNode si=this.superNodesTbl.get(node.lhs);  if (null == si) {    si=new SuperNode(node.lhs);    this.superNodesTbl.put(node.lhs,si);  }  si.nodes.add(node);}  }
class C{  protected void openNewLoco(){  DecoderFile decoderFile=DecoderIndexFile.instance().fileFromTitle(selectedDecoderType());  if (log.isDebugEnabled()) {    log.debug("decoder file: " + decoderFile.getFilename());  }  RosterEntry re=new RosterEntry();  re.setDecoderFamily(decoderFile.getFamily());  re.setDecoderModel(decoderFile.getModel());  re.setId(Bundle.getMessage("LabelNewDecoder"));  Roster.getDefault().addEntry(re);  startProgrammer(decoderFile,re,(String)programmerBox.getSelectedItem());}  }
class C{  public CGAffineTransform(double m00,double m10,double m01,double m11,double m02,double m12){  this.type=TYPE_UNKNOWN;  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;}  }
class C{  private void updateTimeStamp(){  timeStampMS=System.currentTimeMillis();}  }
class C{  public static InetAddress findInetAddress() throws SocketException, UnknownHostException {  final Enumeration<NetworkInterface> enum1=NetworkInterface.getNetworkInterfaces();  if (enum1 == null) {    final InetAddress ip1=InetAddress.getLocalHost();    return ip1;  }  final List<InetAddress> allButLoopback=new ArrayList<>();  while (enum1.hasMoreElements()) {    final NetworkInterface netface=enum1.nextElement();    final Enumeration<InetAddress> enum2=netface.getInetAddresses();    while (enum2.hasMoreElements()) {      final InetAddress ip2=enum2.nextElement();      if (!ip2.isLoopbackAddress()) {        allButLoopback.add(ip2);      }    }  }  for (  final InetAddress address : allButLoopback) {    if (address.getAddress().length == 4 && !isPrivateNetworkAddress(address)) {      return address;    }  }  for (  final InetAddress address : allButLoopback) {    if (!isPrivateNetworkAddress(address)) {      return address;    }  }  for (  final InetAddress address : allButLoopback) {    if (!address.isLinkLocalAddress()) {      return address;    }  }  return InetAddress.getLocalHost();}  }
class C{  private static Platform findPlatform(){  Method getMtu;  try {    getMtu=NetworkInterface.class.getMethod("getMTU");  } catch (  NoSuchMethodException e) {    return new Platform();  }  Class<?> openSslSocketClass;  Method setUseSessionTickets;  Method setHostname;  try {    try {      openSslSocketClass=Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl");    } catch (    ClassNotFoundException ignored) {      openSslSocketClass=Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");    }    setUseSessionTickets=openSslSocketClass.getMethod("setUseSessionTickets",boolean.class);    setHostname=openSslSocketClass.getMethod("setHostname",String.class);    try {      Method setNpnProtocols=openSslSocketClass.getMethod("setNpnProtocols",byte[].class);      Method getNpnSelectedProtocol=openSslSocketClass.getMethod("getNpnSelectedProtocol");      return new Android41(getMtu,openSslSocketClass,setUseSessionTickets,setHostname,setNpnProtocols,getNpnSelectedProtocol);    } catch (    NoSuchMethodException ignored) {      return new Android23(getMtu,openSslSocketClass,setUseSessionTickets,setHostname);    }  } catch (  ClassNotFoundException ignored) {  }catch (  NoSuchMethodException ignored) {  }  try {    String npnClassName="org.eclipse.jetty.npn.NextProtoNego";    Class<?> nextProtoNegoClass=Class.forName(npnClassName);    Class<?> providerClass=Class.forName(npnClassName + "$Provider");    Class<?> clientProviderClass=Class.forName(npnClassName + "$ClientProvider");    Class<?> serverProviderClass=Class.forName(npnClassName + "$ServerProvider");    Method putMethod=nextProtoNegoClass.getMethod("put",SSLSocket.class,providerClass);    Method getMethod=nextProtoNegoClass.getMethod("get",SSLSocket.class);    return new JdkWithJettyNpnPlatform(getMtu,putMethod,getMethod,clientProviderClass,serverProviderClass);  } catch (  ClassNotFoundException ignored) {  }catch (  NoSuchMethodException ignored) {  }  return new Java6(getMtu);}  }
class C{  private void actualizarCamposDocumento(DocDocumentoVO documento,String idFich) throws Exception {  Properties campos=CargarCamposDocumento.getInstance().cargarCampos();  if (campos.containsKey(DocDocumentoVO.campoIdInterno)) {    String idCampoInterno=campos.getProperty(DocDocumentoVO.campoIdInterno);    int orden=0;    if (StringUtils.isNotEmpty(idFich)) {      orden=getOrdenCampoTabla(documento.getIdObjeto(),idCampoInterno,idFich);    } else {      orden=getOrdenCampoTabla(documento.getIdObjeto(),idCampoInterno,documento.getIdFich());    }    for (int i=0; i < DocDocumentoVO.camposDocumento.length; i++) {      String key=DocDocumentoVO.camposDocumento[i];      if (campos.containsKey(key)) {        String idCampo=campos.getProperty(key);        PropertyDescriptor propiedad=BeanUtils.getPropertyDescriptor(DocDocumentoExtVO.class,key);        if (propiedad != null) {          Method metodo=propiedad.getReadMethod();          if (metodo != null) {            String value=(String)metodo.invoke(documento,null);            actualizarCampoDatoDocumento(documento.getIdObjeto(),idCampo,value,orden);          } else {            throw new Exception("Error: No se encontro ningun metodo con ese nombre en la clase:" + documento.getClass());          }        } else {          throw new Exception("Error: No se encontro ninguna propiedad en DocDocumentoVO que coincida con la clave:" + key);        }      } else {        throw new Exception("Error: No se encontro ningun campo en el properties que coincida con la clave:" + key);      }    }  } else {    throw new Exception("Error: No se encontro el Id Interno dentro del fichero de propiedades.");  }}  }
class C{  private void writeRequest(final NextFilter nextFilter,final SocksProxyRequest request,int step){  try {    IoBuffer buf=null;    if (step == SocksProxyConstants.SOCKS5_GREETING_STEP) {      buf=encodeInitialGreetingPacket(request);    } else     if (step == SocksProxyConstants.SOCKS5_AUTH_STEP) {      buf=encodeAuthenticationPacket(request);      if (buf == null) {        step=SocksProxyConstants.SOCKS5_REQUEST_STEP;      }    }    if (step == SocksProxyConstants.SOCKS5_REQUEST_STEP) {      buf=encodeProxyRequestPacket(request);    }    buf.flip();    writeData(nextFilter,buf);  } catch (  Exception ex) {    closeSession("Unable to send Socks request: ",ex);  }}  }
class C{  public int countUdocsConEstado(String idRelacion,int[] estadoCotejo){  String[] tables={TABLE_NAME};  StringBuffer qual=new StringBuffer(DBUtils.WHERE).append(DBUtils.generateEQTokenField(ID_RELACION_FIELD,idRelacion));  if (estadoCotejo != null) {    qual.append(" AND ").append(DBUtils.generateORTokens(UdocEnUIDBEntityImpl.ESTADO_COTEJO_FIELD,estadoCotejo)).append(" AND ").append(DBUtils.generateJoinCondition(ID_FIELD,UdocEnUIDBEntityImpl.UDOC_FIELD));    tables=new String[]{TABLE_NAME,UdocEnUIDBEntityImpl.TABLE_NAME};  }  String queryTables=ArrayUtils.join(tables,",");  return getVOCount(qual.toString(),queryTables);}  }
class C{  public void arcTo(double cX,double cY,double endX,double endY,boolean clockwise){  arcTo((float)cX,(float)cY,(float)endX,(float)endY,clockwise);}  }
class C{  public void checkForConsistencyGroup(VirtualPool vpool,BlockConsistencyGroup consistencyGroup,Project project,BlockServiceApi blockServiceImpl,VirtualArray varray,VirtualPoolCapabilityValuesWrapper capabilities,BlockFullCopyManager blkFullCpManager){  Integer volumeCount=1;  final Boolean isMultiVolumeConsistencyOn=vpool.getMultivolumeConsistency() == null ? Boolean.FALSE : vpool.getMultivolumeConsistency();  _log.info("*********MultiVolumeConsistencyOn************** : " + isMultiVolumeConsistencyOn);  ArrayList<String> requestedTypes=new ArrayList<String>();  final URI actualId=project.getId();  if (consistencyGroup != null) {    final URI expectedId=consistencyGroup.getProject().getURI();    final boolean condition=actualId.equals(expectedId);    if (!condition) {      throw APIException.badRequests.invalidProjectConflict(expectedId);    }    if (!isMultiVolumeConsistencyOn) {      throw APIException.badRequests.invalidParameterConsistencyGroupProvidedButVirtualPoolHasNoMultiVolumeConsistency(consistencyGroup.getId(),URI.create(vpool.toString()));    }    final List<Volume> activeCGVolumes=blockServiceImpl.getActiveCGVolumes(consistencyGroup);    int cgMaxVolCount=blockServiceImpl.getMaxVolumesForConsistencyGroup(consistencyGroup);    if ((activeCGVolumes.size() + volumeCount.intValue()) > cgMaxVolCount) {      throw APIException.badRequests.requestedVolumeCountExceedsLimitsForCG(volumeCount.intValue(),cgMaxVolCount,consistencyGroup.getLabel());    }    if (!consistencyGroup.created()) {      blockServiceImpl.validateConsistencyGroupName(consistencyGroup);    }    if (consistencyGroup.srdfTarget()) {      throw APIException.badRequests.consistencyGroupBelongsToTarget(consistencyGroup.getId());    }    if (VirtualPool.vPoolSpecifiesSRDF(vpool) && (consistencyGroup.getLabel().length() > 8 || !isAlphaNumeric(consistencyGroup.getLabel()))) {      throw APIException.badRequests.groupNameCannotExceedEightCharactersoronlyAlphaNumericAllowed();    }    if (!VirtualPool.vPoolSpecifiesSRDF(vpool) && consistencyGroup.checkForType(Types.SRDF)) {      throw APIException.badRequests.nonSRDFVolumeCannotbeAddedToSRDFCG();    }    validateCGValidWithVirtualArray(consistencyGroup,varray);    if (VirtualPool.vPoolSpecifiesProtection(vpool)) {      requestedTypes.add(Types.RP.name());    }    if (VirtualPool.vPoolSpecifiesHighAvailability(vpool)) {      requestedTypes.add(Types.VPLEX.name());    }    if (VirtualPool.vPoolSpecifiesSRDF(vpool)) {      requestedTypes.add(Types.SRDF.name());    }    if (!VirtualPool.vPoolSpecifiesProtection(vpool) && !VirtualPool.vPoolSpecifiesHighAvailability(vpool) && !VirtualPool.vPoolSpecifiesSRDF(vpool)&& vpool.getMultivolumeConsistency()) {      requestedTypes.add(Types.LOCAL.name());    }    if (consistencyGroup.creationInitiated()) {      if (!consistencyGroup.getRequestedTypes().containsAll(requestedTypes)) {        throw APIException.badRequests.consistencyGroupIsNotCompatibleWithRequest(consistencyGroup.getId(),consistencyGroup.getTypes().toString(),requestedTypes.toString());      }    }    if (VirtualPool.vPoolSpecifiesProtection(vpool)) {      if (activeCGVolumes != null && !activeCGVolumes.isEmpty() && !consistencyGroup.getTypes().contains(BlockConsistencyGroup.Types.RP.toString())) {        throw APIException.badRequests.consistencyGroupMustBeEmptyOrContainRpVolumes(consistencyGroup.getId());      }      if (!activeCGVolumes.isEmpty()) {        Volume existingSourceVolume=null;        for (        Volume cgVolume : activeCGVolumes) {          if (cgVolume.getPersonality() != null && cgVolume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {            existingSourceVolume=cgVolume;            break;          }        }        if (existingSourceVolume != null) {          VirtualPool existingVpool=_dbClient.queryObject(VirtualPool.class,existingSourceVolume.getVirtualPool());          VirtualPool requestedVpool=_dbClient.queryObject(VirtualPool.class,URI.create(vpool.toString()));          if (existingVpool.getVirtualArrays().size() != requestedVpool.getVirtualArrays().size() || !existingVpool.getVirtualArrays().containsAll(requestedVpool.getVirtualArrays())) {            throw APIException.badRequests.vPoolSourceVarraysNotCompatibleForCG(consistencyGroup.getLabel());          }          if (VirtualPool.vPoolSpecifiesHighAvailability(existingVpool) && VirtualPool.vPoolSpecifiesHighAvailability(requestedVpool)) {            if ((!VirtualPool.vPoolSpecifiesMetroPoint(requestedVpool) && VirtualPool.vPoolSpecifiesMetroPoint(existingVpool)) || (VirtualPool.vPoolSpecifiesMetroPoint(requestedVpool) && !VirtualPool.vPoolSpecifiesMetroPoint(existingVpool))) {              throw APIException.badRequests.cannotMixMetroPointAndNonMetroPointVolumes(consistencyGroup.getLabel());            }          }          StringMap existingProtectionVarraySettings=existingVpool.getProtectionVarraySettings();          if (existingProtectionVarraySettings == null) {            throw APIException.badRequests.cannotAddVolumesToSwappedCG(consistencyGroup.getLabel());          }          StringMap requestedProtectionVarraySettings=requestedVpool.getProtectionVarraySettings();          if (existingProtectionVarraySettings.size() != requestedProtectionVarraySettings.size()) {            throw APIException.badRequests.vPoolTargetVarraysNotCompatibleForCG(consistencyGroup.getLabel());          }          for (          String targetVarray : requestedProtectionVarraySettings.keySet()) {            if (!existingProtectionVarraySettings.containsKey(targetVarray)) {              throw APIException.badRequests.vPoolTargetVarraysNotCompatibleForCG(consistencyGroup.getLabel());            }          }        }      }    }    checkCGForSnapshots(consistencyGroup);    blkFullCpManager.verifyNewVolumesCanBeCreatedInConsistencyGroup(consistencyGroup,activeCGVolumes);    capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,consistencyGroup.getId());    if (consistencyGroup != null) {      consistencyGroup.addRequestedTypes(requestedTypes);      _dbClient.updateAndReindexObject(consistencyGroup);    }  } else   if (VirtualPool.vPoolSpecifiesProtection(vpool)) {    throw APIException.badRequests.consistencyGroupMissingForRpProtection();  }}  }
class C{  public static void move(String source,String target){  FilePath.get(source).moveTo(FilePath.get(target),false);}  }
class C{  @Override public <U>Eval<U> foldRight(final U seed,final BiFunction<? super T,U,U> function){  return Eval.later(null);}  }
class C{  public SyntaxStyle(Color color,boolean italic,boolean bold){  this.color=color;  this.italic=italic;  this.bold=bold;}  }
class C{  private static void validateNewAddition(Vector paths,ExpressionOwner owner,LocPathIterator path) throws RuntimeException {  assertion(owner.getExpression() == path,"owner.getExpression() != path!!!");  int n=paths.size();  for (int i=0; i < n; i++) {    ExpressionOwner ew=(ExpressionOwner)paths.elementAt(i);    assertion(ew != owner,"duplicate owner on the list!!!");    assertion(ew.getExpression() != path,"duplicate expression on the list!!!");  }}  }
class C{  public void addItem(ForceItem item){  items.add(item);}  }
class C{  public void newEventPrepare(EventBean newEvent){  newEvents.add(newEvent);  EventBean[] priorEvents=new EventBean[getter.getIndexesRequestedLen()];  for (int j=0; j < priorEvents.length; j++) {    int priorIndex=getter.getIndexesRequested()[j];    priorEvents[j]=newEvents.get(priorIndex);  }  if (priorEventMap != null) {    priorEventMap.put(newEvent,priorEvents);  }  lastNew=priorEvents;  getter.setRandomAccess(this);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE__CONSTRAINT:    getConstraint().clear();  getConstraint().addAll((Collection<? extends TypeConstraint>)newValue);return;case TypesPackage.TYPE__ABSTRACT:setAbstract((Boolean)newValue);return;case TypesPackage.TYPE__VISIBLE:setVisible((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public String dump(String prefix){  StringWriter out=new StringWriter(256);  try {    dump(prefix,out);    return out.toString();  } catch (  IOException e) {    throw new RuntimeException("Unexpected I/O error while writing to StringWriter",e);  }}  }
class C{  public MsgMgr(TransformerImpl transformer){  m_transformer=transformer;}  }
class C{  public void reconnect(String offset){  if (numRetries >= numMaxRetries) {    throw new SamzaException(String.format("Give up reconnecting. numRetries: %d; numMaxRetries: %d",numRetries,numMaxRetries));  }  LOG.info(String.format("Reconnecting with offset: %s numRetries: %d numMaxRetries: %d",offset,numRetries,numMaxRetries));  numRetries++;  init(offset);}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  @Override public void clear(){  super.clear();  int[] keys=_set;  long[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  private void sendHelloMessage() throws IOException {  OFHello.Builder builder=factory.buildHello().setXid(handshakeTransactionIds--);  OFHello m=builder.build();  channel.write(Collections.singletonList(m));  log.debug("Send hello: {}",m);}  }
class C{  @Override public void addInformation(ItemStack itemStack,EntityPlayer par2EntityPlayer,List par3List,boolean par4){  super.addInformation(itemStack,par2EntityPlayer,par3List,par4);  if (this.getFrequency(itemStack) > 0) {    par3List.add(LangUtils.localize("info.misc.freq") + " " + getFrequency(itemStack));  } else {    par3List.add(LangUtils.localize("info.designator.noFreq"));  }}  }
class C{  public void onDestroy(@Nullable Activity activity){  onDestroy(!hasSavedState || (activity != null && activity.isFinishing() && !activity.isChangingConfigurations()));}  }
class C{  public void addScoringFunction(BasicScoring scoringFunction){  basicScoringFunctions.add(scoringFunction);  if (scoringFunction instanceof ActivityScoring) {    activityScoringFunctions.add((ActivityScoring)scoringFunction);  }  if (scoringFunction instanceof AgentStuckScoring) {    agentStuckScoringFunctions.add((AgentStuckScoring)scoringFunction);  }  if (scoringFunction instanceof MoneyScoring) {    moneyScoringFunctions.add((MoneyScoring)scoringFunction);  }  if (scoringFunction instanceof ArbitraryEventScoring) {    this.arbitraryEventScoringFunctions.add((ArbitraryEventScoring)scoringFunction);  }}  }
class C{  public ConfirmDialog doYesNoBotherDialog(String title,String question){  ConfirmDialog confirm=new ConfirmDialog(frame,title,question,true);  confirm.setVisible(true);  return confirm;}  }
class C{  public Type attribExpr(JCTree tree,Env<AttrContext> env,Type pt){  return attribTree(tree,env,new ResultInfo(VAL,!pt.hasTag(ERROR) ? pt : Type.noType));}  }
class C{  public Matrix4 invertOrthonormalMatrix(Matrix4 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","invertOrthonormalMatrix","missingMatrix"));  }  this.m[0]=matrix.m[0];  this.m[1]=matrix.m[4];  this.m[2]=matrix.m[8];  this.m[3]=-(matrix.m[0] * matrix.m[3]) - (matrix.m[4] * matrix.m[7]) - (matrix.m[8] * matrix.m[11]);  this.m[4]=matrix.m[1];  this.m[5]=matrix.m[5];  this.m[6]=matrix.m[9];  this.m[7]=-(matrix.m[1] * matrix.m[3]) - (matrix.m[5] * matrix.m[7]) - (matrix.m[9] * matrix.m[11]);  this.m[8]=matrix.m[2];  this.m[9]=matrix.m[6];  this.m[10]=matrix.m[10];  this.m[11]=-(matrix.m[2] * matrix.m[3]) - (matrix.m[6] * matrix.m[7]) - (matrix.m[10] * matrix.m[11]);  this.m[12]=0;  this.m[13]=0;  this.m[14]=0;  this.m[15]=1;  return this;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  @Override protected void calculateThumbSize(){  super.calculateThumbSize();  upperThumbRect.setSize(thumbRect.width,thumbRect.height);}  }
class C{  private void init(){  final LayoutInflater inflater=LayoutInflater.from(mContext);  inflater.inflate(R.layout.creditcardview,this,true);  if (!isInEditMode()) {    final String fontPath=mContext.getString(R.string.font_path);    creditCardTypeFace=Typeface.createFromAsset(mContext.getAssets(),fontPath);  }  mCardNumberView=(EditText)findViewById(R.id.card_number);  mCardNameView=(EditText)findViewById(R.id.card_name);  mCardTypeView=(ImageView)findViewById(R.id.card_logo);  mBrandLogoView=(ImageView)findViewById(R.id.brand_logo);  mChipView=(ImageView)findViewById(R.id.chip);  mValidTill=(TextView)findViewById(R.id.valid_till);  mExpiryDateView=(EditText)findViewById(R.id.expiry_date);  mFlipBtn=(ImageButton)findViewById(R.id.flip_btn);  mCvvView=(EditText)findViewById(R.id.cvv_et);  mStripe=findViewById(R.id.stripe);  mAuthorizedSig=findViewById(R.id.authorized_sig_tv);  mSignature=findViewById(R.id.signature);}  }
class C{  @Override protected void onPause(){  super.onPause();  mPreview.stop();}  }
class C{  public static boolean isSuperCall(JCTree tree){  return calledMethodNameisSelfOrSuper(tree,false,true);}  }
class C{  public synchronized void trackHexImages(IHex hex,MediaTracker tracker){  Image base=hexToImageCache.get(hex);  List<Image> superImgs=hexToImageListCache.get(hex);  List<Image> orthoImgs=orthoListCache.get(hex);  tracker.addImage(base,1);  if (superImgs != null) {    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {      tracker.addImage(i.next(),1);    }  }  if (orthoImgs != null) {    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {      tracker.addImage(i.next(),1);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private Collection<Resource> parseGroup(final Element element){  final String name=element.getAttribute(ATTR_GROUP_NAME);  final String isAbstractAsString=element.getAttribute(ATTR_GROUP_ABSTRACT);  final boolean isAbstractGroup=StringUtils.isNotEmpty(isAbstractAsString) && Boolean.valueOf(isAbstractAsString);  if (groupsInProcess.contains(name)) {    throw new RecursiveGroupDefinitionException("Infinite Recursion detected for the group: " + name + ". Recursion path: "+ groupsInProcess);  }  LOG.debug("\tadding group: {}",name);  groupsInProcess.add(name);  final Group parsedGroup=new WroModelInspector(model).getGroupByName(name);  if (parsedGroup != null) {    groupsInProcess.remove(name);    return parsedGroup.getResources();  }  final Group group=createGroup(element);  groupsInProcess.remove(name);  if (!isAbstractGroup) {    model.addGroup(group);  }  return group.getResources();}  }
class C{  public void extendTimeout(){  if (!mExtendedTimeout) {    mExtendedTimeout=true;  }}  }
class C{  public int estimateCellWidth(int hSpan){  return hSpan * mCellWidth;}  }
class C{  public static <S extends Styleable,V>StyleableObjectProperty<V> createProperty(DefaultPropertyBasedCssMetaData<S,V> metaData,S styleable){  return new SimpleStyleableObjectProperty<V>(metaData,styleable,metaData.getPropertyName(),metaData.getInitialValue(styleable));}  }
class C{  public UncheckedExecutionException(@Nullable Throwable cause){  super(cause);}  }
class C{  public static File compressImageFiles(String filePath,String newFileName,int maxFileSize){  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  Bitmap bitmap=BitmapFactory.decodeFile(filePath,options);  int actualHeight=options.outHeight;  int actualWidth=options.outWidth;  float imgRatio=actualWidth / actualHeight;  int maxHeight=(2 * actualHeight) / 3;  int maxWidth=(2 * actualWidth) / 3;  float maxRatio=maxWidth / maxHeight;  if (actualHeight > maxHeight || actualWidth > maxWidth) {    if (imgRatio < maxRatio) {      imgRatio=maxHeight / actualHeight;      actualWidth=(int)(imgRatio * actualWidth);      actualHeight=(int)maxHeight;    } else     if (imgRatio > maxRatio) {      imgRatio=maxHeight / actualWidth;      actualHeight=(int)(imgRatio * actualHeight);      actualWidth=(int)maxWidth;    } else {      actualHeight=(int)maxHeight;      actualWidth=(int)maxWidth;    }  }  options.inSampleSize=ImageUtils.calculateInSampleSize(options,actualWidth,actualHeight);  options.inJustDecodeBounds=false;  options.inTempStorage=new byte[16 * 1024];  try {    bitmap=BitmapFactory.decodeFile(filePath,options);  } catch (  OutOfMemoryError exception) {    exception.printStackTrace();  }  int streamLength=maxFileSize;  int compressQuality=100;  ByteArrayOutputStream bmpStream=new ByteArrayOutputStream();  while (streamLength >= maxFileSize && compressQuality > 50) {    try {      bmpStream.flush();      bmpStream.reset();    } catch (    IOException e) {      e.printStackTrace();    }    bitmap.compress(Bitmap.CompressFormat.JPEG,compressQuality,bmpStream);    byte[] bmpPicByteArray=bmpStream.toByteArray();    streamLength=bmpPicByteArray.length;    if (BuildConfig.DEBUG) {      Log.i("test upload","Quality: " + compressQuality);      Log.i("test upload","Size: " + streamLength);    }    compressQuality-=3;  }  FileOutputStream fo;  try {    fo=new FileOutputStream(newFileName);    fo.write(bmpStream.toByteArray());    fo.flush();    fo.close();  } catch (  IOException e) {    e.printStackTrace();  }  return new File(newFileName);}  }
class C{  protected final void openFile(final String filename) throws UncheckedIOException {  assertNotAlreadyOpen();  if (this.useCompression == null) {    this.writer=IOUtils.getBufferedWriter(filename);  } else {    this.writer=IOUtils.getBufferedWriter(filename,this.useCompression.booleanValue());  }}  }
class C{  public void write(final byte[] data){  write(data,0,false);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public List<Zone> showZones(Collection<String> zoneNames,boolean excludeAliases){  List<Zone> zones=new ArrayList<Zone>();  Zone zone=null;  if (zoneNames != null && !zoneNames.isEmpty()) {    Map<String,String> aliasDatabase=showDeviceAliasDatabase();    for (    String zoneName : zoneNames) {      if (zoneName.startsWith(IVR_ZONENAME_PREFIX)) {        zone=showIvrZone(zoneName.substring(IVR_ZONENAME_PREFIX.length()));      } else {        zone=showZone(zoneName,aliasDatabase,excludeAliases);      }      zones.add(zone);    }  }  return zones;}  }
class C{  @Override public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  private void checkSettings(){  ConfigurationKey[] keys=ConfigurationKey.values();  for (  ConfigurationKey key : keys) {    if (key.isMandatory()) {      try {        cs.getConfigurationSetting(key,Configuration.GLOBAL_CONTEXT);      } catch (      EJBException e) {        logger.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR_MANDATORY_PROPERTY_NOT_SET,key.getKeyName());      }    }  }  String nodeName=cs.getNodeName();  if (nodeName == null) {    logger.logError(LogMessageIdentifier.ERROR_MANDATORY_SETTING_OF_NODE_NOT_SET);  }}  }
class C{  public ResultMatrixPlainText(ResultMatrix matrix){  super(matrix);}  }
class C{  public static ExecutorService newThreadPool(ThreadFactory factory){  return Executors.unconfigurableExecutorService(new ThreadPoolExecutor(0,Integer.MAX_VALUE,5L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),factory));}  }
class C{  protected void fillRaster(int[] pixels,int off,int adjust,int x,int y,int w,int h){  float g=0;  int rowLimit=off + w;  float initConst=(dgdX * x) + gc;  for (int i=0; i < h; i++) {    g=initConst + dgdY * (y + i);    while (off < rowLimit) {      pixels[off++]=indexIntoGradientsArrays(g);      g+=dgdX;    }    off+=adjust;    rowLimit=off + w;  }}  }
class C{  public int treeNumber(){  if (owner == null)   return NO_TREENUM;  if (owner.trees == null)   return NO_TREENUM;  for (int x=0; x < owner.trees.length; x++)   if (owner.trees[x] == this)   return x;  return NO_TREENUM;}  }
class C{  @Override public void invoke(@NotNull Project project,Editor editor,PsiFile file,DataContext dataContext){  int offset=editor.getCaretModel().getOffset();  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);  PsiElement element=file.findElementAt(offset);  while (true) {    if (element == null) {      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("the.caret.should.be.positioned.at.the.class.method.or.field.to.be.refactored"));      CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,null);      return;    }    if (tryToMoveElement(element,project,dataContext,null,editor)) {      return;    }    final TextRange range=element.getTextRange();    if (range != null) {      int relative=offset - range.getStartOffset();      final PsiReference reference=element.findReferenceAt(relative);      if (reference != null) {        final PsiElement refElement=reference.resolve();        if (refElement != null && tryToMoveElement(refElement,project,dataContext,reference,editor))         return;      }    }    element=element.getParent();  }}  }
class C{  private boolean addCompletedDownload(DownloadInfo downloadInfo){  String mimeType=downloadInfo.getMimeType();  if (TextUtils.isEmpty(mimeType))   mimeType=UNKNOWN_MIME_TYPE;  String description=downloadInfo.getDescription();  if (TextUtils.isEmpty(description))   description=downloadInfo.getFileName();  DownloadManager manager=(DownloadManager)mContext.getSystemService(Context.DOWNLOAD_SERVICE);  try {    long downloadId=manager.addCompletedDownload(downloadInfo.getFileName(),description,true,mimeType,downloadInfo.getFilePath(),downloadInfo.getContentLength(),true);    if (shouldOpenAfterDownload(downloadInfo)) {      handleAutoOpenAfterDownload(downloadInfo,downloadId);    }  } catch (  IllegalArgumentException e) {    Log.w(TAG,"Failed to add the download item to DownloadManager: " + e);    return false;  }  return true;}  }
class C{  private static void highlightCodeNode(final INaviCodeNode cnode,final INaviInstruction startInstruction,final String trackedRegister,final CInstructionResult instructionResult){  final INaviInstruction searchInstruction=instructionResult.getInstruction();  if (!CCodeNodeHelpers.containsAddress(cnode,searchInstruction.getAddress())) {    return;  }  for (  final INaviInstruction instruction : cnode.getInstructions()) {    if (searchInstruction == instruction) {      cnode.setInstructionColor(instruction,CHighlightLayers.REGISTER_TRACKING_LAYER,CResultColor.determineBackgroundColor(startInstruction,trackedRegister,instructionResult));    }  }}  }
class C{  public static Builder newInstance(Id<Vehicle> vehicleId,Id<Link> locationId){  return new Builder(vehicleId,locationId);}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public void initialize(long nanosTimeStamp){  changeArchiveFile(false,nanosTimeStamp);  assertInitialized();}  }
class C{  private void testEncoding(){  try {    XMLInputFactory.newInstance();  } catch (  javax.xml.stream.FactoryConfigurationError e) {    return;  }  try {    File file=getFile("/xml/russArticle.xml");    STAXEventReader xmlReader=new STAXEventReader();    Document doc=xmlReader.readDocument(new FileReader(file));    assertEquals("russArticle.xml encoding wasn't correct","koi8-r",doc.getXMLEncoding());    StringWriter writer=new StringWriter();    STAXEventWriter xmlWriter=new STAXEventWriter(writer);    xmlWriter.writeDocument(doc);    String output=writer.toString();    String xmlDecl=output.substring(0,output.indexOf("?>") + 2);    String expected="<?xml version=\'1.0\' encoding=\'koi8-r\'?>";    assertEquals("Unexpected xml declaration",expected,xmlDecl);    System.out.println(output);  } catch (  Exception e) {    e.printStackTrace();    fail(e.getMessage());  }}  }
class C{  public void writeToObject(Object object){  try {    Method method=BeanUtils.getWriteMethod(object.getClass(),getName(),getType());    if (method != null) {      method.invoke(object,new Object[]{getValue()});    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public VirtualArraySearchBuilder search(){  return new VirtualArraySearchBuilder(this);}  }
class C{  private void createContent(final int style){  final boolean readOnly=(style & SWT.READ_ONLY) == SWT.READ_ONLY;  final boolean flat=(style & SWT.FLAT) == SWT.FLAT;  final int buttonStyle=SWT.ARROW | (flat ? SWT.FLAT : SWT.NONE);  if (this.alignment == ALIGNMENT.BOTH) {    createMinusButton(buttonStyle);    createText(readOnly);    createPlusButton(buttonStyle);  } else   if (this.alignment == ALIGNMENT.LEFT) {    createMinusButton(buttonStyle);    createPlusButton(buttonStyle);    createText(readOnly);  } else {    createText(readOnly);    createMinusButton(buttonStyle);    createPlusButton(buttonStyle);  }}  }
class C{  public static double pixelsToInch(int pix,int dpi){  return (double)pix / dpi;}  }
class C{  @SuppressWarnings("unused") @Override protected Money handleTransactionThatIsALateRepaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  return handleTransactionThatIsOnTimePaymentOfInstallment(currentInstallment,loanTransaction,transactionAmountUnprocessed,transactionMappings);}  }
class C{  public void union(Set x){  Enumeration elements=x.elements();  while (elements.hasMoreElements())   put(elements.nextElement());}  }
class C{  @Override protected ShardIterator shards(ClusterState clusterState,InternalRequest request){  ShardRouting primaryShardRouting=new ShardRouting(request.concreteIndex(),0,clusterService.localNode().id(),true,ShardRoutingState.STARTED);  return new PlainShardIterator(primaryShardRouting.shardId(),Collections.singletonList(primaryShardRouting));}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  public static void constructAFromC(Map<Id,Id> aFromC,Map<Id,Id> aFromB,Map<Id,Id> bFromC){  for (Iterator<Entry<Id,Id>> it=bFromC.entrySet().iterator(); it.hasNext(); ) {    Entry<Id,Id> entry=it.next();    Id cc=entry.getKey();    Id bb=entry.getValue();    Id aa=aFromB.get(bb);    aFromC.put(cc,aa);  }}  }
class C{  public T caseTraceFor_(TraceFor_ object){  return null;}  }
class C{  public void gyroTurn(double speed,double angle){  while (opModeIsActive() && !onHeading(speed,angle,P_TURN_COEFF)) {    telemetry.update();  }}  }
class C{  public int hashCode(){  return m_startTime.hashCode() + m_endTime.hashCode() + m_status+ m_name.hashCode()+ m_description.hashCode();}  }
class C{  public void addAgent(final OdorWorldEntity entity){  entity.setName(agentNameGenerator.getId());  if (entity instanceof RotatingEntity) {    entity.addEffector(new StraightMovement((RotatingEntity)entity,"Go-straight"));    entity.addEffector(new Turning((RotatingEntity)entity,"Go-left",Turning.LEFT));    entity.addEffector(new Turning((RotatingEntity)entity,"Go-right",Turning.RIGHT));    entity.addSensor(new SmellSensor(entity,"Smell-Left",Math.PI / 8,50));    entity.addSensor(new SmellSensor(entity,"Smell-Center",0,0));    entity.addSensor(new SmellSensor(entity,"Smell-Right",-Math.PI / 8,50));  }  addEntity(entity);}  }
class C{  void nameReplaced(){  cachedStringRep=null;}  }
class C{  public static void async(Activity act,Context context,ImageView iv,String url,boolean memCache,boolean fileCache,int targetWidth,int fallbackId,Bitmap preset,int animation,float ratio,float anchor,Object progress,AccountHandle ah,int policy,int round,HttpHost proxy,String networkUrl){  Bitmap bm=null;  if (memCache) {    bm=memGet(url,targetWidth,round);  }  if (bm != null) {    iv.setTag(AQuery.TAG_URL,url);    Common.showProgress(progress,url,false);    setBmAnimate(iv,bm,preset,fallbackId,animation,ratio,anchor,AjaxStatus.MEMORY);  } else {    BitmapAjaxCallback cb=new BitmapAjaxCallback();    cb.url(url).imageView(iv).memCache(memCache).fileCache(fileCache).targetWidth(targetWidth).fallback(fallbackId).preset(preset).animation(animation).ratio(ratio).anchor(anchor).progress(progress).auth(ah).policy(policy).round(round).networkUrl(networkUrl);    if (proxy != null) {      cb.proxy(proxy.getHostName(),proxy.getPort());    }    if (act != null) {      cb.async(act);    } else {      cb.async(context);    }  }}  }
class C{  public void rollback(){  txnService.rollbackTransaction(session);}  }
class C{  public final void insertElementAt(int value,int at){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public IntMap(){  int capacity=1024;  _keys=new Object[capacity];  _values=new int[capacity];  _prime=getBiggestPrime(_keys.length);  _size=0;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public SQLNonTransientConnectionException(String reason){  super(reason,null,0);}  }
class C{  private <T extends DataObject>boolean queryAndDeleteObject(URI id,Class<T> clazz,boolean force) throws Exception {  if (_dependencyChecker == null) {    DependencyTracker dependencyTracker=dataObjectscanner.getDependencyTracker();    _dependencyChecker=new DependencyChecker(_dbClient,dependencyTracker);  }  if (_dependencyChecker.checkDependencies(id,clazz,false) != null) {    if (!force) {      System.out.println(String.format("Failed to delete the object %s: there are active dependencies",id));      return false;    }    log.info("Force to delete object {} that has active dependencies",id);  }  T object=queryObject(id,clazz);  if (object == null) {    System.out.println(String.format("The object %s has already been deleted",id));    return false;  }  if ((object.canBeDeleted() == null) || force) {    if (object.canBeDeleted() != null) {      log.info("Force to delete object {} that can't be deleted",id);    }    _dbClient.removeObject(object);    return true;  }  System.out.println(String.format("The object %s can't be deleted",id));  return false;}  }
class C{  public boolean hasMaxUploadSizes(){  return hasRepeatingExtension(MaxUploadSize.class);}  }
class C{  @Override public void handleNotification(Notification notification,Object handback){  LocalGossipMember deadMember=(LocalGossipMember)notification.getUserData();  GossipService.LOGGER.debug("Dead member detected: " + deadMember);  members.put(deadMember,GossipState.DOWN);  if (listener != null) {    listener.gossipEvent(deadMember,GossipState.DOWN);  }}  }
class C{  private final int pieceSquareEval(Position pos){  int score=0;  final int wMtrl=pos.wMtrl;  final int bMtrl=pos.bMtrl;  final int wMtrlPawns=pos.wMtrlPawns;  final int bMtrlPawns=pos.bMtrlPawns;{    final int t1=qV + 2 * rV + 2 * bV;    final int t2=rV;{      final int k1=pos.psScore1[Piece.WKING];      final int k2=pos.psScore2[Piece.WKING];      final int t=bMtrl - bMtrlPawns;      score+=interpolate(t,t2,k2,t1,k1);    }{      final int k1=pos.psScore1[Piece.BKING];      final int k2=pos.psScore2[Piece.BKING];      final int t=wMtrl - wMtrlPawns;      score-=interpolate(t,t2,k2,t1,k1);    }  }{    final int t1=qV + 2 * rV + 2 * bV;    final int t2=rV;    int wp1=pos.psScore1[Piece.WPAWN];    int wp2=pos.psScore2[Piece.WPAWN];    if ((wp1 != 0) || (wp2 != 0)) {      final int tw=bMtrl - bMtrlPawns;      score+=interpolate(tw,t2,wp2,t1,wp1);    }    int bp1=pos.psScore1[Piece.BPAWN];    int bp2=pos.psScore2[Piece.BPAWN];    if ((bp1 != 0) || (bp2 != 0)) {      final int tb=wMtrl - wMtrlPawns;      score-=interpolate(tb,t2,bp2,t1,bp1);    }  }{    final int t1=qV + 2 * rV + 1 * bV + 1 * nV + 6 * pV;    final int t2=nV + 8 * pV;    int n1=pos.psScore1[Piece.WKNIGHT];    int n2=pos.psScore2[Piece.WKNIGHT];    if ((n1 != 0) || (n2 != 0)) {      score+=interpolate(bMtrl,t2,n2,t1,n1);    }    n1=pos.psScore1[Piece.BKNIGHT];    n2=pos.psScore2[Piece.BKNIGHT];    if ((n1 != 0) || (n2 != 0)) {      score-=interpolate(wMtrl,t2,n2,t1,n1);    }  }{    score+=pos.psScore1[Piece.WBISHOP];    score-=pos.psScore1[Piece.BBISHOP];  }{    final long occupied=pos.whiteBB | pos.blackBB;    score+=pos.psScore1[Piece.WQUEEN];    long m=pos.pieceTypeBB[Piece.WQUEEN];    while (m != 0) {      int sq=BitBoard.numberOfTrailingZeros(m);      long atk=BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied);      wAttacksBB|=atk;      score+=queenMobScore[Long.bitCount(atk & ~(pos.whiteBB | bPawnAttacks))];      bKingAttacks+=Long.bitCount(atk & bKingZone) * 2;      m&=m - 1;    }    score-=pos.psScore1[Piece.BQUEEN];    m=pos.pieceTypeBB[Piece.BQUEEN];    while (m != 0) {      int sq=BitBoard.numberOfTrailingZeros(m);      long atk=BitBoard.rookAttacks(sq,occupied) | BitBoard.bishopAttacks(sq,occupied);      bAttacksBB|=atk;      score-=queenMobScore[Long.bitCount(atk & ~(pos.blackBB | wPawnAttacks))];      wKingAttacks+=Long.bitCount(atk & wKingZone) * 2;      m&=m - 1;    }  }{    int r1=pos.psScore1[Piece.WROOK];    if (r1 != 0) {      final int nP=bMtrlPawns / pV;      final int s=r1 * Math.min(nP,6) / 6;      score+=s;    }    r1=pos.psScore1[Piece.BROOK];    if (r1 != 0) {      final int nP=wMtrlPawns / pV;      final int s=r1 * Math.min(nP,6) / 6;      score-=s;    }  }  return score;}  }
class C{  public Builder(String index,ClusterService clusterService,ClusterState targetState){  this.index=index;  IndexMetaData targetIndexMetaData=targetState.metaData().index(index);  if (targetIndexMetaData == null || targetIndexMetaData.getState() == State.CLOSE)   return;  if (clusterService.isUserKeyspaceInitialized()) {    try {      PrimaryFirstSearchStrategy.PrimaryFirstRouter router=clusterService.updateRouter(targetIndexMetaData,targetState);      AbstractSearchStrategy.Router.Route route=router.newRoute(null,null);      for (      IndexShardRoutingTable isrt : route.getShardRouting()) {        shards.put(isrt.getShardId().id(),isrt);      }    } catch (    java.lang.AssertionError e) {      Loggers.getLogger(getClass()).warn("Keyspace {} not  available",e,this.index);    }  }}  }
class C{  public ConnectionInfo(String name){  this.name=name;  this.url=Constants.START_URL + name;  parseName();}  }
class C{  public static WritableDoubleDataStore makeDoubleStorage(DBIDs ids,int hints){  return DataStoreFactory.FACTORY.makeDoubleStorage(ids,hints);}  }
class C{  Region(long start,long end){  this.start=start;  this.end=end;  updateAvailable();}  }
class C{  public void onCandidate(long sessionId,int index,String id,String sdp){  send(new PeerConnectionActor.OnCandidate(sessionId,index,id,sdp));}  }
class C{  public Iterator iterator(){  return this.items.iterator();}  }
class C{  public Seconds dividedBy(int divisor){  if (divisor == 1) {    return this;  }  return Seconds.seconds(getValue() / divisor);}  }
class C{  public static String toString(JSONArray ja) throws JSONException {  JSONObject jo=ja.optJSONObject(0);  if (jo != null) {    JSONArray names=jo.names();    if (names != null) {      return rowToString(names) + toString(names,ja);    }  }  return null;}  }
class C{  public void releaseOrphanedGrant(DM dm){  InternalDistributedMember grantor=getSender();  boolean released=false;  logger.info(LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_RELEASING_ORPHANED_GRANT_FOR__0,this));  try {    while (!released) {      dm.getCancelCriterion().checkCancelInProgress(null);      try {        if (grantor == null) {          GrantorInfo gi=DLockService.checkLockGrantorInfo(this.serviceName,dm.getSystem());          grantor=gi.getId();        }        if (grantor == null) {          released=true;        } else {          released=callReleaseProcessor(dm,grantor);        }      } catch (      LockGrantorDestroyedException e) {      }catch (      IllegalStateException e) {        if (dm.getId().equals(grantor)) {          if (logger.isDebugEnabled()) {            logger.debug("[releaseOrphanedGrant] Local grantor threw IllegalStateException handling {}",this);          }        }        try {          Thread.sleep(200);        } catch (        InterruptedException ie) {          Thread.currentThread().interrupt();        }      } finally {        grantor=null;      }    }  }  finally {    if (released) {      logger.info(LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_HANDLED_ORPHANED_GRANT_WITH_RELEASE));    } else {      logger.info(LocalizedMessage.create(LocalizedStrings.DLockRequestProcessor_HANDLED_ORPHANED_GRANT_WITHOUT_RELEASE));    }  }}  }
class C{  void generateLeaves(){  for (  TreeRTGQuercusRobur.FoliageCoordinates worldgenbigtree$foliagecoordinates : this.field_175948_j) {    this.generateLeafNode(worldgenbigtree$foliagecoordinates);  }}  }
class C{  private static TeamInfo randomTeam(ArrayList<TeamInfo> list){  int index=random.nextInt(list.size());  TeamInfo team=list.get(index);  long currTime=System.currentTimeMillis();  if ((team.getEndTimeInMillis() < currTime) || team.numMembers() == 0) {    System.out.println("\nteam " + team + " is too old; replacing.");    System.out.println("start time: " + team.getStartTimeInMillis() + ", end time: "+ team.getEndTimeInMillis()+ ", current time:"+ currTime);    removeTeam(index);    return (addLiveTeam());  } else {    return team;  }}  }
class C{  private void showPopup(int x,int y){  Content content=getContentAt(x,y);  if (content == null) {    return;  }  DefaultActionGroup group=new DefaultActionGroup();  group.add(new TabbedContentAction.CloseAction(content));  if (myTabbedPaneWrapper.getTabCount() > 1) {    group.add(new TabbedContentAction.CloseAllAction(myManager));    group.add(new TabbedContentAction.CloseAllButThisAction(content));  }  group.addSeparator();  group.add(PinToolwindowTabAction.getPinAction());  group.addSeparator();  group.add(new TabbedContentAction.MyNextTabAction(myManager));  group.add(new TabbedContentAction.MyPreviousTabAction(myManager));  final List<AnAction> additionalActions=myManager.getAdditionalPopupActions(content);  if (additionalActions != null) {    group.addSeparator();    for (    AnAction anAction : additionalActions) {      group.add(anAction);    }  }  ActionPopupMenu menu=ActionManager.getInstance().createActionPopupMenu(POPUP_PLACE,group);  menu.getComponent().show(myTabbedPaneWrapper.getComponent(),x,y);}  }
class C{  public FacebookException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  private String addStepsForUpdateApplicationSingleStorage(Workflow workflow,URI storage,String rgName,List<URI> addVolumeList,List<URI> removeVolumeList,String waitForStep,String opId) throws ControllerException {  String waitFor=waitForStep;  if (removeVolumeList != null && !removeVolumeList.isEmpty()) {    Volume vol=_dbClient.queryObject(Volume.class,removeVolumeList.get(0));    URI cgUri=vol.getConsistencyGroup();    String groupName=vol.getReplicationGroupInstance();    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    waitFor=_replicaDeviceController.addStepsForRemovingVolumesFromCG(workflow,waitFor,cgUri,removeVolumeList,opId);    waitFor=workflow.createStep(REMOVE_VOLUMES_FROM_CG_STEP_GROUP,String.format("Remove volumes from consistency group %s",cgUri.toString()),waitFor,storage,storageSystem.getSystemType(),this.getClass(),removeFromConsistencyGroupMethod(storage,cgUri,removeVolumeList,false),addToConsistencyGroupMethod(storage,cgUri,groupName,removeVolumeList),null);    if (ControllerUtils.replicationGroupHasNoOtherVolume(_dbClient,groupName,removeVolumeList,storage)) {      waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Deleting replication group for consistency group %s",cgUri.toString()),waitFor,storage,storageSystem.getSystemType(),this.getClass(),deleteConsistencyGroupMethod(storage,cgUri,groupName,false,false,false),createConsistencyGroupMethod(storage,cgUri,groupName),null);    }  }  if (addVolumeList != null && !addVolumeList.isEmpty()) {    _log.info("Creating workflows for adding volumes to CG and application");    Volume vol=_dbClient.queryObject(Volume.class,addVolumeList.get(0));    URI cgUri=vol.getConsistencyGroup();    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgUri);    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    boolean isNewRG=false;    if (!cg.created(rgName,storage)) {      _log.info("Consistency group not created. Creating it");      isNewRG=true;      if (storageSystem.deviceIsType(Type.vnxblock)) {        cg.setArrayConsistency(false);        _dbClient.updateObject(cg);      }      waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Creating consistency group %s",rgName),waitFor,storage,storageSystem.getSystemType(),this.getClass(),createConsistencyGroupMethod(storage,cgUri,rgName),deleteConsistencyGroupMethod(storage,cgUri,rgName,false,false,false),null);    }    waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Adding volumes to consistency group %s",cgUri.toString()),waitFor,storage,storageSystem.getSystemType(),this.getClass(),addToConsistencyGroupMethod(storage,cgUri,rgName,addVolumeList),removeFromConsistencyGroupMethod(storage,cgUri,addVolumeList,false),null);    if (!isNewRG) {      waitFor=_replicaDeviceController.addStepsForAddingVolumesToRG(workflow,waitFor,cgUri,addVolumeList,rgName,opId);    }  }  return waitFor;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  if (abort()) {    return;  }  setEnabled(false);  WalletData activePerWalletModelData=super.bitcoinController.getModel().getActivePerWalletModelData();  Date earliestTransactionDate=new Date(DateUtils.nowUtc().getMillis());  Set<Transaction> allTransactions=activePerWalletModelData.getWallet().getTransactions(true);  if (allTransactions != null) {    for (    Transaction transaction : allTransactions) {      if (transaction != null) {        Date updateTime=transaction.getUpdateTime();        if (updateTime != null && earliestTransactionDate.after(updateTime)) {          earliestTransactionDate=updateTime;        }      }    }  }  Date actualResetDate=earliestTransactionDate;  long earliestKeyCreationTime=activePerWalletModelData.getWallet().getEarliestKeyCreationTime() * NUMBER_OF_MILLISECOND_IN_A_SECOND;  if (earliestKeyCreationTime != 0 && earliestKeyCreationTime < earliestTransactionDate.getTime()) {    earliestTransactionDate=new Date(earliestKeyCreationTime);    actualResetDate=earliestTransactionDate;  }  actualResetDate=new Date(actualResetDate.getTime() - 3600 * 24 * NUMBER_OF_MILLISECOND_IN_A_SECOND);  activePerWalletModelData.getWallet().clearTransactions(actualResetDate);  try {    super.bitcoinController.getFileHandler().savePerWalletModelData(activePerWalletModelData,true);    super.bitcoinController.getModel().createWalletTableData(super.bitcoinController,super.bitcoinController.getModel().getActiveWalletFilename());    controller.fireRecreateAllViews(false);  } catch (  WalletSaveException wse) {    log.error(wse.getClass().getCanonicalName() + " " + wse.getMessage());    MessageManager.INSTANCE.addMessage(new Message(wse.getClass().getCanonicalName() + " " + wse.getMessage()));  }  WalletData perWalletModelData=this.bitcoinController.getModel().getActivePerWalletModelData();  if (!perWalletModelData.isBusy()) {    perWalletModelData.setBusy(true);    perWalletModelData.setBusyTaskKey("resetTransactionsSubmitAction.text");    perWalletModelData.setBusyTaskVerbKey("resetTransactionsSubmitAction.verb");    super.bitcoinController.fireWalletBusyChange(true);    resetTransactionsInBackground(actualResetDate,activePerWalletModelData.getWalletFilename());  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  Tick clone=(Tick)super.clone();  return clone;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public EnumeratedTypeSet(Iterator<TType> types,TypeSetEnvironment typeSetEnvironment){  super(typeSetEnvironment);  while (types.hasNext()) {    fMembers.add(types.next());  }  sCount++;}  }
class C{  private Reservation fakeReservation(){  return new Reservation().withInstances(Collections.singletonList(this.fakeInstance()));}  }
class C{  static public String numberToString(Number n) throws JSONException {  if (n == null) {    throw new JSONException("Null pointer");  }  testValidity(n);  String s=n.toString();  if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {    while (s.endsWith("0")) {      s=s.substring(0,s.length() - 1);    }    if (s.endsWith(".")) {      s=s.substring(0,s.length() - 1);    }  }  return s;}  }
class C{  public PluginException(Throwable cause){  super(cause);  this.message=cause.getMessage();}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public static double stirlingFormula(double x){  double STIR[]={7.87311395793093628397E-4,-2.29549961613378126380E-4,-2.68132617805781232825E-3,3.47222221605458667310E-3,8.33333333333482257126E-2};  double MAXSTIR=143.01608;  double w=1.0 / x;  double y=Math.exp(x);  w=1.0 + w * polevl(w,STIR,4);  if (x > MAXSTIR) {    double v=Math.pow(x,0.5 * x - 0.25);    y=v * (v / y);  } else {    y=Math.pow(x,x - 0.5) / y;  }  y=SQTPI * y * w;  return y;}  }
class C{  @Provides static EppMetric.Builder provideEppMetricBuilder(@Named("requestLogId") String requestLogId,Clock clock){  return EppMetric.builderForRequest(requestLogId,clock);}  }
class C{  public void dispatchSVGResizeEvent() throws InterruptedException {  scriptingEnvironment.dispatchSVGResizeEvent();}  }
class C{  public int discardBodyData() throws MalformedStreamException, IOException {  return readBodyData(null);}  }
class C{  static String parsePrefix(String key){  if (key == null)   return null;  boolean inquotes=false;  for (int i=0; i < key.length(); i++) {    char c=key.charAt(i);    if (c == '"') {      inquotes=!inquotes;    } else     if ((c == '[' || c == '.') && !inquotes) {      return key.substring(0,i);    }  }  return null;}  }
class C{  public void testDestroyFailedException02(){  DestroyFailedException dfE;  for (int i=0; i < msgs.length; i++) {    dfE=new DestroyFailedException(msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),dfE.getMessage(),msgs[i]);    assertNull("getCause() must return null",dfE.getCause());  }}  }
class C{  private static boolean genMainDexList(Project project,boolean minifyEnabled,File mappingFile,File jarMergingOutputFile,File andMainDexList,DexKnifeConfig dexKnifeConfig) throws Exception {  System.out.println(":" + project.getName() + ":genMainDexList");  HashSet<String> mainCls=null;  if (dexKnifeConfig.useSuggest) {    PatternSet patternSet=dexKnifeConfig.suggestPatternSet;    if (dexKnifeConfig.filterSuggest && patternSet == null) {      patternSet=dexKnifeConfig.patternSet;    }    mainCls=getAdtMainDexClasses(andMainDexList,patternSet,dexKnifeConfig.logFilterSuggest);    System.out.println("DexKnife: use suggest");  }  File keepFile=project.file(MAINDEXLIST_TXT);  keepFile.delete();  ArrayList<String> mainClasses=null;  if (minifyEnabled) {    System.err.println("DexKnife: From Mapping");    mainClasses=getMainClassesFromMapping(mappingFile,dexKnifeConfig.patternSet,mainCls);  } else {    System.out.println("DexKnife: From MergedJar: " + jarMergingOutputFile);    if (jarMergingOutputFile != null) {      mainClasses=getMainClassesFromJar(jarMergingOutputFile,dexKnifeConfig.patternSet,mainCls);    } else {      System.err.println("DexKnife: The Merged Jar is not exist! Can't be processed!");    }  }  if (mainClasses != null && mainClasses.size() > 0) {    BufferedWriter writer=new BufferedWriter(new FileWriter(keepFile));    for (    String mainClass : mainClasses) {      writer.write(mainClass);      writer.newLine();      if (dexKnifeConfig.logMainList) {        System.out.println(mainClass);      }    }    writer.close();    return true;  }  throw new Exception("DexKnife Warning: Main dex is EMPTY ! Check your config and project!");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.884 -0400",hash_original_method="BB1233CF4738AE9FC92DF89DC7B16A58",hash_generated_method="503758B2B85726EABC31062235DC24FB") void checkSemantics(DirectiveList dirList) throws SaslException {  Iterator directives=dirList.getIterator();  ParsedDirective directive;  String name;  while (directives.hasNext()) {    directive=(ParsedDirective)directives.next();    name=directive.getName();    if (name.equals("realm"))     handleRealm(directive); else     if (name.equals("nonce"))     handleNonce(directive); else     if (name.equals("qop"))     handleQop(directive); else     if (name.equals("maxbuf"))     handleMaxbuf(directive); else     if (name.equals("charset"))     handleCharset(directive); else     if (name.equals("algorithm"))     handleAlgorithm(directive); else     if (name.equals("cipher"))     handleCipher(directive); else     if (name.equals("stale"))     handleStale(directive);  }  if (-1 == m_maxBuf)   m_maxBuf=65536;  if (m_qop == 0)   m_qop=QOP_AUTH; else   if ((m_qop & QOP_AUTH) != QOP_AUTH)   throw new SaslException("Only qop-auth is supported by client"); else   if (((m_qop & QOP_AUTH_CONF) == QOP_AUTH_CONF) && (0 == (m_cipherOptions & CIPHER_RECOGNIZED_MASK)))   throw new SaslException("Invalid cipher options"); else   if (null == m_nonce)   throw new SaslException("Missing nonce directive"); else   if (m_staleFlag)   throw new SaslException("Unexpected stale flag"); else   if (null == m_algorithm)   throw new SaslException("Missing algorithm directive");}  }
class C{  public static <T>T identity(Object self,Closure<T> closure){  return DefaultGroovyMethods.with(self,closure);}  }
class C{  public static void main(String[] args){  String[][] tests=new String[5][2];  for (int i=0; i < tests.length - 1; i++) {    tests[i][0]=BUG_ID + FS + "constant-values.html";    tests[i][1]="TEST" + (i + 1) + "PASSES";  }  tests[tests.length - 1][0]=BUG_ID + FS + "constant-values.html";  tests[tests.length - 1][1]="<code>\"&lt;Hello World&gt;\"</code>";  TestConstantValuesDriver tester=new TestConstantValuesDriver();  run(tester,ARGS,tests,NO_TEST);  tester.printSummary();}  }
class C{  public void testTimedWatchGet() throws Exception {  WatchManager<String> em=new WatchManager<String>();  Watch<String> w=em.watch(new StringWatchPredicate("hello"),1);  assertFalse(w.isDone());  try {    w.get(1,TimeUnit.SECONDS);    throw new Exception("get() did not timeout when there was nothing to return");  } catch (  TimeoutException e) {  }  em.process("hello",0);  assertTrue("Should be done",w.isDone());  assertFalse("Should not be cancelled",w.isCancelled());  assertEquals("Should have string event","hello",w.get(1,TimeUnit.SECONDS));}  }
class C{  private LinkedBlockingQueue<Integer> populatedQueue(int n){  LinkedBlockingQueue<Integer> q=new LinkedBlockingQueue<Integer>(n);  assertTrue(q.isEmpty());  for (int i=0; i < n; i++)   assertTrue(q.offer(new Integer(i)));  assertFalse(q.isEmpty());  assertEquals(0,q.remainingCapacity());  assertEquals(n,q.size());  return q;}  }
class C{  private static int buildElementMapXPath(final LinkedHashMap<String,CacheElement> elementMap,final Document schema,final Node parent,int rank,final String xPath,final XPathContext xPathContext) throws XPathExpressionException {  final NodeList children=XmlUtils.query(parent,xPath,xPathContext);  for (int i=0; i < children.getLength(); i++) {    final Element child=(Element)children.item(i);switch (child.getNodeName()) {case XSD_ALL_CHILDREN:      final String name=getAttribute(child,"name");    elementMap.put(name,new CacheElement(name,rank++,isMultiple(child)));  break;case "xsd:choice":case "xsd:sequence":rank=buildElementMapXPath(elementMap,schema,child,rank,XSD_CHOICE_OR_SEQUENCE_CHILDREN,xPathContext);break;case "xsd:any":break;default :throw new UnsupportedOperationException("Unsupported child type '" + child.getNodeName() + "'");}}return rank;}  }
class C{  public boolean containsKey(String key){  unparcel();  return mMap.containsKey(key);}  }
class C{  private boolean containsErrorTests(){  final List<? extends SMTestProxy> children=getChildren();  for (  SMTestProxy child : children) {    if (child.getMagnitudeInfo() == TestStateInfo.Magnitude.ERROR_INDEX) {      return true;    }  }  return false;}  }
class C{  public boolean hasMoved(){  boolean moved=!this.cachedPointValue.equals(this.getPoint());  this.cachedPointValue=this.getPoint();  return moved;}  }
class C{  private int localizedWeekOfWeekBasedYear(TemporalAccessor temporal){  int dow=localizedDayOfWeek(temporal);  int doy=temporal.get(DAY_OF_YEAR);  int offset=startOfWeekOffset(doy,dow);  int week=computeWeek(offset,doy);  if (week == 0) {    ChronoLocalDate date=Chronology.from(temporal).date(temporal);    date=date.minus(doy,DAYS);    return localizedWeekOfWeekBasedYear(date);  } else   if (week > 50) {    ValueRange dayRange=temporal.range(DAY_OF_YEAR);    int yearLen=(int)dayRange.getMaximum();    int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());    if (week >= newYearWeek) {      week=week - newYearWeek + 1;    }  }  return week;}  }
class C{  private void prepareSnapData() throws Exception {  log.info("Preparing block snapshots for BlockSnapshotReplicationGroupInstanceMigration");  StorageSystem storageSystem=new StorageSystem();  URI systemURI=URIUtil.createId(StorageSystem.class);  storageSystem.setId(systemURI);  storageSystem.setSystemType(DiscoveredDataObject.Type.xtremio.name());  _dbClient.createObject(storageSystem);  BlockSnapshot snapshot=new BlockSnapshot();  snapURI=URIUtil.createId(BlockSnapshot.class);  groupInstance=UUID.randomUUID().toString();  snapshot.setId(snapURI);  snapshot.setStorageController(systemURI);  snapshot.setSnapsetLabel(groupInstance);  _dbClient.createObject(snapshot);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public static void disposeCursors(){  for (  Cursor cursor : m_idToCursorMap.values()) {    cursor.dispose();  }  m_idToCursorMap.clear();}  }
class C{  private void init(String publicId,String systemId,int lineNumber,int columnNumber){  this.publicId=publicId;  this.systemId=systemId;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  public void add(MutableTreeNode newChild){  if (newChild != null && newChild.getParent() == this)   insert(newChild,getChildCount() - 1); else   insert(newChild,getChildCount());}  }
class C{  private File createNewFormat(int AD_Table_ID,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  WebSessionCtx wsc=WebSessionCtx.get(request);  MPrintFormat pf=MPrintFormat.createFromTable(wsc.ctx,AD_Table_ID);  File file=launchReport(pf,request,m_curTab,m_query);  return file;}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  MovingAverageDataset clone=(MovingAverageDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.182 -0500",hash_original_method="938F8E40CDECF343C54169E6C37AE49D",hash_generated_method="7735EA72A00CBF32470D39B95BF859E8") static public Allocation createCubemapFromBitmap(RenderScript rs,Bitmap b,MipmapControl mips,int usage){  rs.validate();  int height=b.getHeight();  int width=b.getWidth();  if (width % 6 != 0) {    throw new RSIllegalArgumentException("Cubemap height must be multiple of 6");  }  if (width / 6 != height) {    throw new RSIllegalArgumentException("Only square cube map faces supported");  }  boolean isPow2=(height & (height - 1)) == 0;  if (!isPow2) {    throw new RSIllegalArgumentException("Only power of 2 cube faces supported");  }  Element e=elementFromBitmap(rs,b);  Type.Builder tb=new Type.Builder(rs,e);  tb.setX(height);  tb.setY(height);  tb.setFaces(true);  tb.setMipmaps(mips == MipmapControl.MIPMAP_FULL);  Type t=tb.create();  int id=rs.nAllocationCubeCreateFromBitmap(t.getID(),mips.mID,b,usage);  if (id == 0) {    throw new RSRuntimeException("Load failed for bitmap " + b + " element "+ e);  }  return new Allocation(id,rs,t,usage);}  }
class C{  public N4JSFactoryImpl(){  super();}  }
class C{  public static long longForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return longForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  protected static ARGBChannel convertChannelSelector(Element filterElement,String attrName,ARGBChannel defaultChannel,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,attrName);  if (s.length() == 0) {    return defaultChannel;  }  if (SVG_A_VALUE.equals(s)) {    return ARGBChannel.A;  }  if (SVG_R_VALUE.equals(s)) {    return ARGBChannel.R;  }  if (SVG_G_VALUE.equals(s)) {    return ARGBChannel.G;  }  if (SVG_B_VALUE.equals(s)) {    return ARGBChannel.B;  }  throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attrName,s});}  }
class C{  public NodeInfo(long value,double weight,int maxSocialProofTypeSize){  this.value=value;  this.nodeMetadata=EMPTY_NODE_META_DATA;  this.weight=weight;  this.numVisits=1;  this.socialProofs=new SmallArrayBasedLongToDoubleMap[maxSocialProofTypeSize];}  }
class C{  @SuppressWarnings("unchecked") private void notifyTextListeners(TextEvent te){  Vector<TextListener> l;synchronized (this) {    l=(Vector<TextListener>)m_textListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptText(te);    }  }}  }
class C{  public boolean add(OMGraphic shape){  try {    if (typeMatches(shape)) {      addExtents(((EsriGraphic)shape).getExtents());      return graphics.add(shape);    } else     if (shape instanceof OMPoint) {      shape=EsriPoint.convert((OMPoint)shape);    } else     if (shape instanceof OMText) {      shape=EsriTextPoint.convert((OMText)shape);    } else     if (shape instanceof OMScalingIcon) {      shape=EsriIconPoint.convert((OMScalingIcon)shape);    } else     if (shape instanceof OMGraphicList && !((OMGraphicList)shape).isVague()) {      for (Iterator<OMGraphic> it=((OMGraphicList)shape).iterator(); it.hasNext(); ) {        add((OMGraphic)it.next());      }      return true;    } else {      Debug.message("esri","EsriPointList.add()- graphic isn't an EsriGraphic with matching type, can't add.");      return false;    }    if (shape instanceof EsriGraphic) {      graphics.add(shape);      addExtents(((EsriGraphic)shape).getExtents());    }  } catch (  ClassCastException cce) {  }  return false;}  }
class C{  protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing,int missingLevel){  if (missingLevel == 100) {    print("100% ");  }  print("missing");  if (predictorMissing) {    print(" predictor");    if (classMissing) {      print(" and");    }  }  if (classMissing) {    print(" class");  }  print(" values");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("missing");  accepts.add("value");  accepts.add("train");  int numTrain=getNumInstances(), numClasses=2;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  @SuppressWarnings("unchecked") protected void rehash(){  int oldCapacity=table.length;  Entry<?,?>[] oldMap=table;  int newCapacity=(oldCapacity << 1) + 1;  if (newCapacity - MAX_ARRAY_SIZE > 0) {    if (oldCapacity == MAX_ARRAY_SIZE)     return;    newCapacity=MAX_ARRAY_SIZE;  }  Entry<?,?>[] newMap=new Entry<?,?>[newCapacity];  modCount++;  threshold=(int)Math.min(newCapacity * loadFactor,MAX_ARRAY_SIZE + 1);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry<K,V> old=(Entry<K,V>)oldMap[i]; old != null; ) {      Entry<K,V> e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=(Entry<K,V>)newMap[index];      newMap[index]=e;    }  }}  }
class C{  public boolean isWhitespaceInElementContent(){  return false;}  }
class C{  public void sendJMRIClientMessage(JMRIClientMessage m,JMRIClientListener reply){  sendMessage(m,reply);}  }
class C{  public boolean hasVariables(){  return PATTERN.matcher(root.toString()).find();}  }
class C{  public void mousePressed(MouseEvent event){}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  @Override public void registerAutoReclaim(){  m_allocator.registerChunkAutoReclaim(this);}  }
class C{  private void processWriteTaskSubmitList(List<Future<Void>> taskList) throws CarbonDataWriterException {  for (int i=0; i < taskList.size(); i++) {    try {      taskList.get(i).get();    } catch (    InterruptedException e) {      LOGGER.error(e,e.getMessage());      throw new CarbonDataWriterException(e.getMessage());    }catch (    ExecutionException e) {      LOGGER.error(e,e.getMessage());      throw new CarbonDataWriterException(e.getMessage());    }  }}  }
class C{  public void quit(final boolean forceQuit){  if (workspace.changesExist() && (!forceQuit) && (workspace.getComponentList().size() > 0)) {    int s=showHasChangedDialog();    if (s == JOptionPane.OK_OPTION) {      save();      quit(true);    } else     if (s == JOptionPane.NO_OPTION) {      quit(true);    } else     if (s == JOptionPane.CANCEL_OPTION) {      return;    }  } else {    workspace.removeAllComponents();    System.exit(0);  }}  }
class C{  final public MutableString insert(final int index,final int x){  return insert(index,String.valueOf(x));}  }
class C{  public void unsubscribe(){  s_logger.info("Unsubscribing to indications");  Set<CIMObjectPath> subscriptionsPaths=_subscriptionPaths;  try {    subscriptionsPaths=enumerateSubscriptions();  } catch (  Exception e) {    s_logger.warn("Failure enumerating all subscriptions for {}",_connection.getConnectionName(),e);  }  Iterator<CIMObjectPath> pathsIter=subscriptionsPaths.iterator();  while (pathsIter.hasNext()) {    deleteInstance(pathsIter.next());  }  pathsIter=_filterPaths.iterator();  while (pathsIter.hasNext()) {    deleteInstance(pathsIter.next());  }  if (_handlerPath != null) {    deleteInstance(_handlerPath);  }}  }
class C{  public TemplatePersistenceData(Template template,boolean enabled){  this(template,enabled,null);}  }
class C{  public static boolean appendStringToFile(EvoSuiteFile file,String value){  if (file == null || value == null) {    return false;  }  return appendDataToFile(file,value.getBytes());}  }
class C{  public static void printAll(final FluoClient fluoClient) throws Exception {  final String FORMAT="%-30s | %-10s | %-10s | %-40s\n";  System.out.println("Printing all tables.  Showing unprintable bytes and braces as {ff} and {{} and {}} where ff is the value in hexadecimal.");  System.out.format(FORMAT,"--Row--","--Column Family--","--Column Qual--","--Value--");  try (Snapshot snapshot=fluoClient.newSnapshot()){    CellScanner cscanner=snapshot.scanner().build();    for (    RowColumnValue rcv : cscanner) {      System.out.format(FORMAT,to_String(rcv.getRow()),to_String(rcv.getColumn().getFamily()),to_String(rcv.getColumn().getQualifier()),to_String(rcv.getValue()));    }  } }  }
class C{  public boolean isPostgreSQL(){  return Database.DB_POSTGRESQL.equals(m_type);}  }
class C{  public boolean hasClientSecretExpired(){  return hasClientSecretExpired(SystemClock.INSTANCE);}  }
class C{  public CompoundEntrySnapshot(Object entryName){  this.name=entryName;}  }
class C{  public boolean engineCanResolve(Element element,String baseURI,StorageResolver storage){  return XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.ASSIGNMENT_EXPRESSION__VAR_REF:    return varRef != null;case ExpressionsPackage.ASSIGNMENT_EXPRESSION__OPERATOR:  return operator != OPERATOR_EDEFAULT;case ExpressionsPackage.ASSIGNMENT_EXPRESSION__EXPRESSION:return expression != null;}return super.eIsSet(featureID);}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private List<Graph> possRemove(Graph pag,Map<Edge,Boolean> necEdges){  List<Edge> remEdges=new ArrayList<>();  for (  Edge remEdge : necEdges.keySet()) {    if (!necEdges.get(remEdge))     remEdges.add(remEdge);  }  PowerSet<Edge> pset=new PowerSet<>(remEdges);  List<Graph> possRemove=new ArrayList<>();  for (  Set<Edge> set : pset) {    Graph newPag=new EdgeListGraph(pag);    for (    Edge edge : set) {      newPag.removeEdge(edge);    }    possRemove.add(newPag);  }  return possRemove;}  }
class C{  public C45Test(String name){  super(name);}  }
class C{  static final public Identifier skeletonFor(Identifier name){  return Identifier.lookup(name + "_Skel");}  }
class C{  private void escapeJSONChars(byte[] msg) throws IOException {  int mark=0;  for (int i=0; i < msg.length; i++) {    if (msg[i] == (byte)'"' || msg[i] == (byte)'\\' || msg[i] == (byte)'/') {      outputStream.write(msg,mark,i - mark);      outputStream.write((char)'\\');      mark=i;    } else     if (msg[i] == (byte)'\r') {      outputStream.write(msg,mark,i - mark);      outputStream.write((char)'\\');      outputStream.write((char)'r');      mark=i + 1;    } else     if (msg[i] == (byte)'\n') {      outputStream.write(msg,mark,i - mark);      outputStream.write((char)'\\');      outputStream.write((char)'n');      mark=i + 1;    } else     if (msg[i] == (byte)'\b') {      outputStream.write(msg,mark,i - mark);      outputStream.write((char)'\\');      outputStream.write((char)'b');      mark=i + 1;    } else     if (msg[i] == (byte)'\f') {      outputStream.write(msg,mark,i - mark);      outputStream.write((char)'\\');      outputStream.write((char)'f');      mark=i + 1;    } else     if (msg[i] == (byte)'\t') {      outputStream.write(msg,mark,i - mark);      outputStream.write((char)'\\');      outputStream.write((char)'t');      mark=i + 1;    }  }  if (mark == msg.length) {    return;  }  outputStream.write(msg,mark,msg.length - mark);}  }
class C{  private static boolean associateAuthorizationContext(StatelessService service,Operation op,String userLink,long expirationTime){  Claims.Builder builder=new Claims.Builder();  builder.setIssuer(AuthenticationConstants.DEFAULT_ISSUER);  builder.setSubject(userLink);  builder.setExpirationTime(expirationTime);  Claims claims=builder.getResult();  String token;  try {    token=service.getTokenSigner().sign(claims);  } catch (  Exception e) {    service.logSevere(e);    return false;  }  AuthorizationContext.Builder ab=AuthorizationContext.Builder.create();  ab.setClaims(claims);  ab.setToken(token);  ab.setPropagateToClient(true);  service.setAuthorizationContext(op,ab.getResult());  return true;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(ephemeralPublicKey);  if (addedukm != null) {    v.add(new DERTaggedObject(true,0,addedukm));  }  return new DERSequence(v);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.SASSIGNMENT__VALUE:    return basicSetValue(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void writeToNBT(NBTTagCompound nbt){}  }
class C{  public String binaryAttributesNominalTipText(){  return "Whether resulting binary attributes will be nominal.";}  }
class C{  @Override public void remove(HeavyStatus status,StatusList statusList){  statusList.removeInternal(status);  RPEntity entity=statusList.getEntity();  if (entity == null) {    return;  }  Status nextStatus=statusList.getFirstStatusByClass(HeavyStatus.class);  entity.setBaseSpeed(originalSpeed);  if (nextStatus != null) {    TurnNotifier.get().notifyInSeconds(duration,new StatusRemover(statusList,nextStatus));  } else {    entity.remove("status_" + status.getName());    entity.sendPrivateText(NotificationType.SCENE_SETTING,"You no longer feel weighed down.");  }}  }
class C{  @Override void resolve(ReferenceType refType) throws MalformedMemberNameException, AmbiguousMethodException, InvalidTypeException, NoSuchMethodException, NoSessionException {  if (!isValidMethodName(methodId)) {    throw new MalformedMemberNameException(methodId);  }  if (!(refType instanceof ClassType)) {    throw new InvalidTypeException();  }  Location location=location((ClassType)refType);  setRequest(refType.virtualMachine().eventRequestManager().createBreakpointRequest(location));}  }
class C{  @RequestProcessing(value="/settings/profiles",method=HTTPRequestMethod.POST) @Before(adviceClass={LoginCheck.class,CSRFCheck.class,UpdateProfilesValidation.class}) public void updateProfiles(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  context.renderJSON();  final JSONObject requestJSONObject=(JSONObject)request.getAttribute(Keys.REQUEST);  final String userRealName=requestJSONObject.optString(UserExt.USER_REAL_NAME);  final String userTags=requestJSONObject.optString(UserExt.USER_TAGS);  final String userURL=requestJSONObject.optString(User.USER_URL);  final String userQQ=requestJSONObject.optString(UserExt.USER_QQ);  final String userIntro=requestJSONObject.optString(UserExt.USER_INTRO);  final String userAvatarURL=requestJSONObject.optString(UserExt.USER_AVATAR_URL);  final String userTeam=requestJSONObject.optString(UserExt.USER_TEAM);  final boolean userJoinPointRank=requestJSONObject.optBoolean(UserExt.USER_JOIN_POINT_RANK);  final boolean userJoinUsedPointRank=requestJSONObject.optBoolean(UserExt.USER_JOIN_USED_POINT_RANK);  final JSONObject user=userQueryService.getCurrentUser(request);  user.put(UserExt.USER_REAL_NAME,userRealName);  user.put(UserExt.USER_TAGS,userTags);  user.put(User.USER_URL,userURL);  user.put(UserExt.USER_QQ,userQQ);  user.put(UserExt.USER_INTRO,userIntro.replace("<","&lt;").replace(">","&gt"));  user.put(UserExt.USER_AVATAR_TYPE,UserExt.USER_AVATAR_TYPE_C_UPLOAD);  user.put(UserExt.USER_TEAM,userTeam);  user.put(UserExt.USER_JOIN_POINT_RANK,userJoinPointRank ? UserExt.USER_JOIN_POINT_RANK_C_JOIN : UserExt.USER_JOIN_POINT_RANK_C_NOT_JOIN);  user.put(UserExt.USER_JOIN_USED_POINT_RANK,userJoinUsedPointRank ? UserExt.USER_JOIN_USED_POINT_RANK_C_JOIN : UserExt.USER_JOIN_USED_POINT_RANK_C_NOT_JOIN);  if (Symphonys.getBoolean("qiniu.enabled")) {    if (!StringUtils.startsWith(userAvatarURL,Symphonys.get("qiniu.domain"))) {      user.put(UserExt.USER_AVATAR_URL,Symphonys.get("defaultThumbnailURL"));    } else {      user.put(UserExt.USER_AVATAR_URL,Symphonys.get("qiniu.domain") + "/avatar/" + user.optString(Keys.OBJECT_ID)+ "?"+ new Date().getTime());    }  } else {    user.put(UserExt.USER_AVATAR_URL,userAvatarURL);  }  try {    userMgmtService.updateProfiles(user);    context.renderTrueResult();  } catch (  final ServiceException e) {    context.renderMsg(e.getMessage());  }}  }
class C{  private boolean checkClassAndSuperClassForName(ImmutableClassType classType,IMatchPattern namePattern){  if (namePattern.match(classType.getFQN())) {    return true;  }  for (  ImmutableClassType superClassType : classType.getImmutableSuperClasses()) {    if (checkClassAndSuperClassForName(superClassType,namePattern)) {      return true;    }  }  return false;}  }
class C{  public NegativeBinomial(int n,double p,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setNandP(n,p);  this.gamma=new Gamma(n,1.0,randomGenerator);  this.poisson=new Poisson(0.0,randomGenerator);}  }
class C{  public void receiveStoreAndForwardMessageInvitation(SipRequest invite,ContactId contact,long timestamp) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Receive stored messages");  }  TerminatingStoreAndForwardOneToOneChatMessageSession session=new TerminatingStoreAndForwardOneToOneChatMessageSession(mImService,invite,contact,mRcsSettings,mMessagingLog,timestamp,mContactManager);  mImService.receiveStoreAndForwardMsgSessionInvitation(session);  session.startSession();}  }
class C{  protected void checkClosed(){  checkClosed(false);}  }
class C{  public void check(List<CheckResultInterface> remarks,TransMeta transMeta,StepMeta stepMeta,RowMetaInterface prev,String[] input,String[] output,RowMetaInterface info){  CarbonDataProcessorUtil.checkResult(remarks,stepMeta,input);}  }
class C{  public T caseVariableReference(VariableReference object){  return null;}  }
class C{  public void apply(int zoom_axis){  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      checkRange(range,i);      double[] limits=mRenderer.getZoomLimits();      double centerX=(range[0] + range[1]) / 2;      double centerY=(range[2] + range[3]) / 2;      double newWidth=range[1] - range[0];      double newHeight=range[3] - range[2];      double newXMin=centerX - newWidth / 2;      double newXMax=centerX + newWidth / 2;      double newYMin=centerY - newHeight / 2;      double newYMax=centerY + newHeight / 2;      if (i == 0) {        limitsReachedX=limits != null && (newXMin <= limits[0] || newXMax >= limits[1]);        limitsReachedY=limits != null && (newYMin <= limits[2] || newYMax >= limits[3]);      }      if (mZoomIn) {        if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedX && mZoomRate < 1) {          } else {            newWidth/=mZoomRate;          }        }        if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedY && mZoomRate < 1) {          } else {            newHeight/=mZoomRate;          }        }      } else {        if (mRenderer.isZoomXEnabled() && !limitsReachedX && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          newWidth*=mZoomRate;        }        if (mRenderer.isZoomYEnabled() && !limitsReachedY && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          newHeight*=mZoomRate;        }      }      double minX, minY;      if (limits != null) {        minX=Math.min(mRenderer.getZoomInLimitX(),limits[1] - limits[0]);        minY=Math.min(mRenderer.getZoomInLimitY(),limits[3] - limits[2]);      } else {        minX=mRenderer.getZoomInLimitX();        minY=mRenderer.getZoomInLimitY();      }      newWidth=Math.max(newWidth,minX);      newHeight=Math.max(newHeight,minY);      if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {        newXMin=centerX - newWidth / 2;        newXMax=centerX + newWidth / 2;        setXRange(newXMin,newXMax,i);      }      if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {        newYMin=centerY - newHeight / 2;        newYMax=centerY + newHeight / 2;        setYRange(newYMin,newYMax,i);      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    if (mZoomIn) {      renderer.setScale(renderer.getScale() * mZoomRate);    } else {      renderer.setScale(renderer.getScale() / mZoomRate);    }  }  notifyZoomListeners(new ZoomEvent(mZoomIn,mZoomRate));}  }
class C{  public FileOutputStream(String name,int mode) throws FileNotFoundException {  this(name,false);  this.MODE=mode;}  }
class C{  public FlacStreamInfo(byte[] data,int offset){  ParsableBitArray scratch=new ParsableBitArray(data);  scratch.setPosition(offset * 8);  this.minBlockSize=scratch.readBits(16);  this.maxBlockSize=scratch.readBits(16);  this.minFrameSize=scratch.readBits(24);  this.maxFrameSize=scratch.readBits(24);  this.sampleRate=scratch.readBits(20);  this.channels=scratch.readBits(3) + 1;  this.bitsPerSample=scratch.readBits(5) + 1;  this.totalSamples=scratch.readBits(36);}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public void addSteppables(Collection steppables){  toBeAdded.addAll(steppables);}  }
class C{  public long arg_start(){  return Long.parseLong(fields[47]);}  }
class C{  @Override public void removeWatcher(String name){synchronized (watchers) {    if (watchers.contains(name)) {      device.removeWatcher(name);      watchers.remove(name);    }  }}  }
class C{  public void doLogout(){  LoggingEvent event=getLogginEvent(ArchivoActions.SISTEMA_MODULE_LOGOUT_OK);  getLogger().add(event);}  }
class C{  @Override public void exceptionCaught(IoSession session,Throwable cause) throws Exception {  ExceptionHandler<Throwable> handler=findExceptionHandler(cause.getClass());  if (handler != null) {    handler.exceptionCaught(session,cause);  } else {    throw new UnknownMessageTypeException("No handler found for exception type: " + cause.getClass().getSimpleName());  }}  }
class C{  public KMLPhotoOverlay(String namespaceURI){  super(namespaceURI);}  }
class C{  default String renderImports(Generator gen,M model){  return gen.onEach(model.getImports()).distinct().sorted().collect(joinIfNotEmpty(nl(),EMPTY,dnl()));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) boolean completeOrRetry(Object result,Throwable failure){synchronized (future) {    if (!complete(result,failure,true) && !future.isDone() && !future.isCancelled()) {      try {        future.inject((Future)scheduler.schedule(callable,delayNanos,TimeUnit.NANOSECONDS));        return true;      } catch (      Throwable t) {        failure=t;        if (config != null)         config.handleComplete(null,t,this,false);        future.complete(null,failure,config.fallback,false);      }    }    return false;  }}  }
class C{  protected static FontUIResource _getSystemTextFont(){  if (systemFont == null) {    try {      systemFont=new FontUIResource(Font.getFont("swing.plaf.metal.systemFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE)));    } catch (    Exception e) {      systemFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE);    }  }  return systemFont;}  }
class C{  public StoreTextureWizardVisualPanel1(){  initComponents();}  }
class C{  public void testAtomicPartitioned() throws Exception {  checkAtomic(PARTITIONED);}  }
class C{  public TableLayout(int cols){  this(cols,0.0,0.0);}  }
class C{  private List<Integer> computeConditionIndexesNotCoveredTwoWays(final TestChromosome test,final PathCondition collectedPathCondition){  List<Integer> conditionIndexesNotCoveredTwoWays=new LinkedList<Integer>();  for (int conditionIndex=0; conditionIndex < collectedPathCondition.size(); conditionIndex++) {    BranchCondition b=collectedPathCondition.get(conditionIndex);    if (!isCoveredTwoWays(test,b.getBranchIndex())) {      conditionIndexesNotCoveredTwoWays.add(conditionIndex);    }  }  return conditionIndexesNotCoveredTwoWays;}  }
class C{  public static boolean isRunningWebSwing(){  return System.getProperty("webswing.classPath") != null;}  }
class C{  public void removeActionListener(ActionListener l){  if ((l != null) && (getAction() == l)) {    setAction(null);  } else {    listenerList.remove(ActionListener.class,l);  }}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_test)   m_test.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public static boolean validateIpv6Addr(String value){  try {    return validateIpAddr(value) && InetAddresses.forString(value) instanceof Inet6Address;  } catch (  Exception e) {    return false;  }}  }
class C{  protected static int middleValue(int a,int b,int c,int d,int delta){  int result=(((a + b + c+ d) / 4) + normRNG(delta));  return result;}  }
class C{  @Override public void clearBody() throws JMSException {  if (ActiveMQRAMessage.trace) {    ActiveMQRALogger.LOGGER.trace("clearBody()");  }  message.clearBody();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public long lruMemorySize(){  return lru.memorySize();}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.IDENTITY_ESCAPE_SEQUENCE;}  }
class C{  public void unsetTaskState(){  this.taskState=null;}  }
class C{  public void releaseOutputStream() throws IOException {  if (out != null)   out.flush();}  }
class C{  protected void replaceNode(final Closure newValue){}  }
class C{  private void updateSignInButtonVisibility(){  if (mViewGPlusLayout.getVisibility() == View.VISIBLE && Utils.isSignedIn(this)) {    setSignInButtonVisibility(false);  }}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  public void leaveGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.leave(groupAddr);}  }
class C{  protected void addAuxiliaryExceptionalEdges(){  for (Iterator<Trap> trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {    Trap trap=trapIt.next();    Unit handler=trap.getHandlerUnit();    Unit pred=handler;    while (this.unitToPreds.get(pred).size() > 0)     pred=this.unitToPreds.get(pred).get(0);    handler2header.put(handler,pred);    Unit ehnop;    if (try2nop.containsKey(trap.getBeginUnit()))     ehnop=try2nop.get(trap.getBeginUnit()); else {      ehnop=new EHNopStmt();      try2nop.put(trap.getBeginUnit(),ehnop);    }  }  Hashtable<Unit,Boolean> nop2added=new Hashtable<Unit,Boolean>();  AddExceptionalEdge:   for (Iterator<Trap> trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {    Trap trap=trapIt.next();    Unit b=trap.getBeginUnit();    Unit handler=trap.getHandlerUnit();    handler=handler2header.get(handler);    if (this.unitToPreds.containsKey(handler)) {      List<Unit> handlerPreds=this.unitToPreds.get(handler);      for (Iterator<Unit> preditr=handlerPreds.iterator(); preditr.hasNext(); )       if (try2nop.containsValue(preditr.next()))       continue AddExceptionalEdge;    } else     continue;    Unit ehnop=try2nop.get(b);    if (!nop2added.containsKey(ehnop)) {      List<Unit> predsOfB=getPredsOf(b);      List<Unit> predsOfehnop=new ArrayList<Unit>(predsOfB);      for (Iterator<Unit> itr=predsOfB.iterator(); itr.hasNext(); ) {        Unit a=itr.next();        List<Unit> succsOfA=this.unitToSuccs.get(a);        succsOfA.remove(b);        succsOfA.add((Unit)ehnop);      }      predsOfB.clear();      predsOfB.add((Unit)ehnop);      this.unitToPreds.put((Unit)ehnop,predsOfehnop);    }    if (!this.unitToSuccs.containsKey(ehnop))     this.unitToSuccs.put(ehnop,new ArrayList<Unit>());    List<Unit> succsOfehnop=this.unitToSuccs.get(ehnop);    if (!succsOfehnop.contains(b))     succsOfehnop.add(b);    succsOfehnop.add(handler);    if (!this.unitToPreds.containsKey(handler))     this.unitToPreds.put(handler,new ArrayList<Unit>());    List<Unit> predsOfhandler=this.unitToPreds.get(handler);    predsOfhandler.add((Unit)ehnop);    Chain<Unit> units=body.getUnits().getNonPatchingChain();    if (!units.contains(ehnop))     units.insertBefore((Unit)ehnop,b);    nop2added.put(ehnop,Boolean.TRUE);  }}  }
class C{  public static AnimatedDrawableOptionsBuilder newBuilder(){  return new AnimatedDrawableOptionsBuilder();}  }
class C{  public static boolean isInstalledDataDescriptorConfigDocument(Element domElement){  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Element[] els=WWXML.getElements(domElement,"/dataDescriptor",null);  return els != null && els.length > 0;}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public JMenuItem(Action a){  this();  setAction(a);}  }
class C{  public final ExampleSetMetaData apply(ExampleSetMetaData emd,InputPort inputPort){  checkCompatibility(emd,inputPort);  return applyEffects(emd,inputPort);}  }
class C{  public Channel(String channelName,ChannelType channelType){  this(channelName);  mChannelType=channelType;}  }
class C{  @SafeVarargs public static Type wrapInArrayTypes(Type type,List<ArrayBracketPair>... arrayBracketPairLists){  for (int i=arrayBracketPairLists.length - 1; i >= 0; i--) {    final List<ArrayBracketPair> arrayBracketPairList=arrayBracketPairLists[i];    if (arrayBracketPairList != null) {      for (int j=arrayBracketPairList.size() - 1; j >= 0; j--) {        type=new ArrayType(type,arrayBracketPairList.get(j).getAnnotations());      }    }  }  return type;}  }
class C{  public static double approximateUpperBoundOnP(long n,long k,double numStdDevs){  checkInputs(n,k);  if (n == 0) {    return 1.0;  } else   if (k == n) {    return 1.0;  } else   if (k == n - 1) {    return (exactUpperBoundOnPForKequalsNminusOne(n,deltaOfNumStdevs(numStdDevs)));  } else   if (k == 0) {    return (exactUpperBoundOnPForKequalsZero(n,deltaOfNumStdevs(numStdDevs)));  } else {    double x=abramowitzStegunFormula26p5p22(n - k,k + 1,numStdDevs);    return (1.0 - x);  }}  }
class C{  public static UserIdentityToken createUserNameIdentityToken(EndpointDescription ep,byte[] senderNonce,String username,String password) throws ServiceResultException {  UserTokenPolicy policy=ep.findUserTokenPolicy(UserTokenType.UserName);  if (policy == null)   throw new ServiceResultException(StatusCodes.Bad_IdentityTokenRejected,"UserName not supported");  String securityPolicyUri=policy.getSecurityPolicyUri();  if (securityPolicyUri == null)   securityPolicyUri=ep.getSecurityPolicyUri();  SecurityPolicy securityPolicy=SecurityPolicy.getSecurityPolicy(securityPolicyUri);  if (securityPolicy == null)   securityPolicy=SecurityPolicy.NONE;  UserNameIdentityToken token=new UserNameIdentityToken();  token.setUserName(username);  token.setPolicyId(policy.getPolicyId());  SecurityAlgorithm algorithm=securityPolicy.getAsymmetricEncryptionAlgorithm();  logger.debug("createUserNameIdentityToken: algorithm={}",algorithm);  byte[] pw=password.getBytes(BinaryEncoder.UTF8);  if (algorithm == null)   token.setPassword(pw); else {    try {      byte[] c=ep.getServerCertificate();      Cert serverCert=(c == null || c.length == 0) ? null : new Cert(c);      if (senderNonce != null)       pw=ByteBufferUtils.concatenate(toArray(pw.length + senderNonce.length),pw,senderNonce); else       pw=ByteBufferUtils.concatenate(toArray(pw.length),pw);      pw=CryptoUtil.encryptAsymm(pw,serverCert.getCertificate().getPublicKey(),algorithm);      token.setPassword(pw);    } catch (    InvalidKeyException e) {      throw new ServiceResultException(StatusCodes.Bad_CertificateInvalid,"Server certificate in endpoint is invalid: " + e.getMessage());    }catch (    IllegalBlockSizeException e) {      throw new ServiceResultException(StatusCodes.Bad_SecurityPolicyRejected,e.getClass().getName() + ":" + e.getMessage());    }catch (    BadPaddingException e) {      throw new ServiceResultException(StatusCodes.Bad_CertificateInvalid,"Server certificate in endpoint is invalid: " + e.getMessage());    }catch (    NoSuchAlgorithmException e) {      throw new ServiceResultException(StatusCodes.Bad_InternalError,e);    }catch (    NoSuchPaddingException e) {      throw new ServiceResultException(StatusCodes.Bad_InternalError,e);    }    token.setEncryptionAlgorithm(algorithm.getUri());  }  return token;}  }
class C{  @Override public int hashCode(){  return getClass().hashCode();}  }
class C{  public boolean canDockNorth(){  return canDockNorth;}  }
class C{  public long readUBits(int numBits) throws IOException {  if (numBits == 0) {    return 0;  }  int bitsLeft=numBits;  long result=0;  if (bitPos == 0) {    bitBuf=in.read();    bitPos=8;    bytesRead++;  }  while (true) {    int shift=bitsLeft - bitPos;    if (shift > 0) {      result|=bitBuf << shift;      bitsLeft-=bitPos;      bitBuf=in.read();      bitPos=8;      bytesRead++;    } else {      result|=bitBuf >> -shift;      bitPos-=bitsLeft;      bitBuf&=0xff >> (8 - bitPos);      return result;    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Number ceil(Number a){  if (isFloatingPoint(a)) {    return Math.ceil(a.doubleValue());  } else {    return a.longValue();  }}  }
class C{  public void saveChangeKeyPair(KeyPair kp){  KeyOps.saveDSAPrivateKeyFile(username,(DSAPrivateKey)kp.getPrivate());  super.setChangePubKey((DSAPublicKey)kp.getPublic());}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  VisitorModelDao.dropTable(db,ifExists);}  }
class C{  protected void sequence_ConditionalExpression(ISerializationContext context,ConditionalExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.CONDITIONAL_EXPRESSION__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.CONDITIONAL_EXPRESSION__EXPRESSION));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),semanticObject.getExpression());  feeder.accept(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0(),semanticObject.getTrueExpression());  feeder.accept(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0(),semanticObject.getFalseExpression());  feeder.finish();}  }
class C{  public void addSong(Song s,boolean top){  if (top) {    this.add(0,s);  } else {    this.add(s);  }}  }
class C{  public ErrorWritingException(final String message,final Throwable cause){  super(message,cause);  addData(message,cause);}  }
class C{  @Override public boolean onAdded(final RPObject object){  of.onAdded(object,this);  this.onModifiedAdded(object,object);  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() == null)   return Boolean.FALSE;  int uiType=stack.getUIMgr().getUIClientType();  if (uiType == UIClient.REMOTE_UI) {    if (stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {      String ipdp=((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getInputDevsProp();      if (ipdp != null && ipdp.indexOf("TOUCH") != -1)       return Boolean.TRUE;    }  }  return Boolean.FALSE;}  }
class C{  public Block(NetworkParameters params,byte[] payloadBytes) throws ProtocolException {  super(params,payloadBytes,0,false,false,payloadBytes.length);}  }
class C{  public IoBuffer encodeFlexMessage(FlexMessage msg,RTMP rtmp){  IoBuffer out=IoBuffer.allocate(1024);  out.setAutoExpand(true);  out.put((byte)0);  encodeNotifyOrInvoke(out,msg,rtmp);  return out;}  }
class C{  public static boolean isAtLeastJava15(){  return getMajorJavaVersion() >= JAVA_15;}  }
class C{  private void releaseWakeLock(){  if (wakelock != null && wakelock.isHeld()) {    wakelock.release();  }}  }
class C{  public boolean remove(OMGraphic graphic){  throw new RuntimeException("remove(OMGraphic) not permitted for OMGraphicHash(). Use remove(key) instead.");}  }
class C{  @Override public boolean contains(S2Cell cell){  S2LatLngRect cellBound=cell.getRectBound();  if (!bound.contains(cellBound)) {    return false;  }  S2Loop cellLoop=new S2Loop(cell,cellBound);  return contains(cellLoop);}  }
class C{  private static void selectRedisDB(Jedis conn,int redisDBNum){  if (redisDBNum != -1) {    conn.select(redisDBNum);  }}  }
class C{  public void println(double x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  private static boolean isEqual(int[] a,int[] b){  int da=computeDegree(a);  int db=computeDegree(b);  if (da != db) {    return false;  }  for (int i=0; i <= da; i++) {    if (a[i] != b[i]) {      return false;    }  }  return true;}  }
class C{  public void displayAll(){  this.samples.clear();  addSample(SampleIdentifier.CPU_USAGE.name(),SampleFactory.getInstance().getSample(SampleIdentifier.CPU_USAGE));  addSample(SampleIdentifier.HEAP_MEMORY.name(),SampleFactory.getInstance().getSample(SampleIdentifier.HEAP_MEMORY));  addSample(SampleIdentifier.PHYSICAL_MEMORY.name(),SampleFactory.getInstance().getSample(SampleIdentifier.PHYSICAL_MEMORY));  addSample(SampleIdentifier.THREADS.name(),SampleFactory.getInstance().getSample(SampleIdentifier.THREADS));}  }
class C{  public static boolean isNormalized(CharSequence src,Form form){  return NativeNormalizer.isNormalized(src,form);}  }
class C{  protected void collectExportedEntries(IJavaProject proj,List<IRuntimeClasspathEntry> runtimeEntries) throws CoreException {  IClasspathEntry[] entries=proj.getRawClasspath();  for (int i=0; i < entries.length; i++) {    IClasspathEntry entry=entries[i];    if (entry.isExported()) {      IRuntimeClasspathEntry rte=null;switch (entry.getEntryKind()) {case IClasspathEntry.CPE_CONTAINER:        IClasspathContainer container=JavaCore.getClasspathContainer(entry.getPath(),proj);      int kind=0;switch (container.getKind()) {case IClasspathContainer.K_APPLICATION:      kind=IRuntimeClasspathEntry.USER_CLASSES;    break;case IClasspathContainer.K_SYSTEM:  kind=IRuntimeClasspathEntry.BOOTSTRAP_CLASSES;break;case IClasspathContainer.K_DEFAULT_SYSTEM:kind=IRuntimeClasspathEntry.STANDARD_CLASSES;break;}rte=JavaRuntime.newRuntimeContainerClasspathEntry(entry.getPath(),kind,proj);break;case IClasspathEntry.CPE_LIBRARY:rte=JavaRuntime.newArchiveRuntimeClasspathEntry(entry.getPath());rte.setSourceAttachmentPath(entry.getSourceAttachmentPath());rte.setSourceAttachmentRootPath(entry.getSourceAttachmentRootPath());break;case IClasspathEntry.CPE_PROJECT:String name=entry.getPath().segment(0);IProject p=ResourcesPlugin.getWorkspace().getRoot().getProject(name);if (p.exists()) {IJavaProject jp=JavaCore.create(p);if (jp.exists()) {rte=JavaRuntime.newProjectRuntimeClasspathEntry(jp);}}break;case IClasspathEntry.CPE_VARIABLE:rte=JavaRuntime.newVariableRuntimeClasspathEntry(entry.getPath());break;default :break;}if (rte != null) {if (!runtimeEntries.contains(rte)) {runtimeEntries.add(rte);}}}}}  }
class C{  public static void showAlert(Context context,int messageId,int titleId,int okButtonId,DialogInterface.OnClickListener onClickListener){  new AlertDialog.Builder(context).setMessage(messageId).setTitle(titleId).setPositiveButton(okButtonId,onClickListener).create().show();}  }
class C{  @Override public boolean portReadyToSend(jmri.jmrix.AbstractPortController p) throws Exception {  if (((DCCppPortController)p).okToSend()) {    ((DCCppPortController)p).setOutputBufferEmpty(false);    return true;  } else {    if (log.isDebugEnabled()) {      log.debug("DCC++ port not ready to receive");    }    return false;  }}  }
class C{  public boolean isFilterMessage(){  return filterMessage;}  }
class C{  private byte[] readAllBytes(InputStream in) throws IOException {  ByteArrayOutputStream tmp=new ByteArrayOutputStream();  byte[] buf=new byte[512];  for (int len; -1 != (len=in.read(buf)); ) {    tmp.write(buf,0,len);  }  tmp.close();  return tmp.toByteArray();}  }
class C{  private Long findMaximumInArray0(Long[] input){  System.out.println(">>>");  System.out.println("Find maximum in array: " + Arrays.asList(input));  System.out.println(">>>");  return Collections.max(Arrays.asList(input));}  }
class C{  public static void declareAllExtensions(ExtensionProfile extProfile){  declareGExtensions(extProfile);  declareGMExtensions(extProfile);  declareMediaExtensions(extProfile);}  }
class C{  public void testSeekLast() throws Exception {  File logDir=prepareLogDir("testNonexistingLogFile");  DiskLog log=openLog(logDir,false);  log.setTimeoutMillis(1000);  writeEventsToLog(log,0,10);  assertEquals("expected last sequence number",9,log.getMaxSeqno());  LogConnection conn=log.connect(true);  assertTrue("Seeking last event",conn.seek(10));  try {    THLEvent e10=conn.next();    throw new Exception("Found non-existent event: " + e10.toString());  } catch (  LogTimeoutException e) {  }  THLEvent e10a=conn.next(false);  assertNull("Non-blocking call returns null",e10a);  conn.release();  log.release();}  }
class C{  public void testSerialization() throws Exception {  LongAdder x=new LongAdder();  LongAdder y=serialClone(x);  assertNotSame(x,y);  x.add(-22);  LongAdder z=serialClone(x);  assertNotSame(y,z);  assertEquals(-22,x.sum());  assertEquals(0,y.sum());  assertEquals(-22,z.sum());}  }
class C{  private static Coordinate segmentPoint(Coordinate p0,Coordinate p1,double d0,double d1){  if (d0 <= 0)   return new Coordinate(p0);  if (d1 <= 0)   return new Coordinate(p1);  double f=Math.abs(d0) / (Math.abs(d0) + Math.abs(d1));  double intx=p0.x + f * (p1.x - p0.x);  double inty=p0.y + f * (p1.y - p0.y);  double intz=p0.z + f * (p1.z - p0.z);  return new Coordinate(intx,inty,intz);}  }
class C{  public static float toPixelFromSP(float value){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,value,DisplayMetricsHolder.getWindowDisplayMetrics());}  }
class C{  void checkBeginning() throws FitsException {  this.iter=iterator();  if (!this.iter.hasNext()) {    throw new FitsException("Empty Header");  }  HeaderCard card=this.iter.next();  String key=card.getKey();  if (!key.equals(SIMPLE.key()) && !key.equals(XTENSION.key())) {    throw new FitsException("No SIMPLE or XTENSION at beginning of Header");  }  boolean isTable=false;  boolean isExtension=false;  if (key.equals(XTENSION.key())) {    String value=card.getValue();    if (value == null || value.isEmpty()) {      throw new FitsException("Empty XTENSION keyword");    }    isExtension=true;    if (value.equals(XTENSION_BINTABLE) || value.equals("A3DTABLE") || value.equals("TABLE")) {      isTable=true;    }  }  doCardChecks(isTable,isExtension);}  }
class C{  public static Jaguar jaguar(int pwmPort){  return pwmRegistrar.fetch(pwmPort,Jaguar.class,null);}  }
class C{  public static void write(double d){  write(d,2);}  }
class C{  public ShowPrioritiesAction(final NetworkPanel networkPanel){  super("Show Neuron Priorities");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SHORT_DESCRIPTION,"Show neuron priorities (for use in priority update)");}  }
class C{  protected ObjectBindingPatternImpl(){  super();}  }
class C{  @SuppressWarnings("rawtypes") private String fetchJSOptions(Properties properties){  if (properties == null || properties.size() == 0) {    return "";  }  String jsOptions="<script type=\"text/javascript\">\r\n" + "var RecaptchaOptions = {";  for (Enumeration e=properties.keys(); e.hasMoreElements(); ) {    String property=(String)e.nextElement();    jsOptions+=property + ":'" + properties.getProperty(property)+ "'";    if (e.hasMoreElements()) {      jsOptions+=",";    }  }  jsOptions+="};\r\n</script>\r\n";  return jsOptions;}  }
class C{  public DERSet(){}  }
class C{  public boolean isNullable(){  return m_isNullable;}  }
class C{  public void annotationChanged(Annotation annotation){  changedAnnotations.add(annotation);}  }
class C{  private static void uaSumLtGe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumRowSumLtGeColSumGtLe(0.0,bv,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int cnt=(ai == 0) ? agg0 : sumRowSumLtGeColSumGtLe(ai,bv,bOp);    cnt+=(int)out.quickGetValue(0,0);    out.quickSetValue(0,0,cnt);  }}  }
class C{  void newEmptyMap(BoundingBox box){  Log.d(DEBUG_TAG,"newEmptyMap");  if (box == null) {    box=BoundingBox.getMaxMercatorExtent();  }  if (!getDelegator().isDirty()) {    getDelegator().reset(false);  } else {    Log.e(DEBUG_TAG,"newEmptyMap called on dirty storage");  }  float ratio=(float)Application.mainActivity.getResources().getDisplayMetrics().widthPixels / (float)Application.mainActivity.getResources().getDisplayMetrics().heightPixels;  if (map.getHeight() != 0) {    ratio=(float)map.getWidth() / map.getHeight();  }  viewBox.setBorders(box,ratio,false);  map.setViewBox(box);  DataStyle.updateStrokes(strokeWidth(viewBox.getWidth()));  map.invalidate();  UndoStorage.updateIcon();}  }
class C{  private synchronized void populateQueue(){  if (this.totalQueueCount.get() >= luceneUtils.getNumDocs() || randomStartpoints.isEmpty()) {    if (theQ.size() == 0)     exhaustedQ.set(true);    return;  }  int added=0;  int startdoc=randomStartpoints.poll();  int stopdoc=Math.min(startdoc + qsize,luceneUtils.getNumDocs());  for (int a=startdoc; a < stopdoc; a++) {    for (    String field : flagConfig.contentsfields())     try {      Terms incomingTermVector=luceneUtils.getTermVector(a,field);      totalQueueCount.incrementAndGet();      if (incomingTermVector != null) {        theQ.add(incomingTermVector);        added++;      }    } catch (    IOException e) {      e.printStackTrace();    }  }  if (added > 0)   System.err.println("Initialized TermVector Queue with " + added + " documents");}  }
class C{  @Override public void close(){  super.close();  getSlot("content").clear();  attending=null;}  }
class C{  @Nonnull public BugInstance addField(XField xfield){  return addField(xfield.getClassName(),xfield.getName(),xfield.getSignature(),xfield.isStatic());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(10,-3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public static void close(final CGraphPanel panel){  panel.close(true);}  }
class C{  public void onItemClick(AdapterView<?> parent,View view,int position,long id){  Log.d(LOG_TAG,"onItemClick() position " + position);  mItemClickCalled=true;  mItemClickPosition=position;}  }
class C{  public Exception stateMachineError(StateMachine<S,E> stateMachine,Exception exception){  for (  StateMachineInterceptor<S,E> interceptor : interceptors) {    if ((exception=interceptor.stateMachineError(stateMachine,exception)) == null) {      break;    }  }  return exception;}  }
class C{  public T caseInfoModelMappingModel(InfoModelMappingModel object){  return null;}  }
class C{  public void backupWorkspace(final String workspaceId,final String srcPath,final String srcAddress) throws ServerException {  ReentrantLock lock=workspacesBackupLocks.get(workspaceId);  if (lock != null) {    if (lock.tryLock()) {      try {        if (workspacesBackupLocks.get(workspaceId) == null) {          return;        }        backupWorkspace(workspaceId,srcPath,srcAddress,false);      }  finally {        lock.unlock();      }    }  } else {    LOG.warn("Attempt to backup workspace {} after cleanup",workspaceId);  }}  }
class C{  protected final int processOutput(Process process) throws Exception {  commandOutput=new StringBuffer();  commandErrorOutput=new StringBuffer();  final NativeCommandOutputParser errorParser=new NativeCommandOutputParser(process.getErrorStream(),commandErrorOutput);  final NativeCommandOutputParser outputParser=new NativeCommandOutputParser(process.getInputStream(),commandOutput);  errorParser.start();  outputParser.start();  final int rc=process.waitFor();  errorParser.join();  outputParser.join();  return rc;}  }
class C{  public boolean sendEmailNow(MUser from,MUser to,EMail email){  String msg=email.send();  X_AD_UserMail um=new X_AD_UserMail(getCtx(),0,null);  um.setClientOrg(this);  um.setAD_User_ID(to.getAD_User_ID());  um.setSubject(email.getSubject());  um.setMailText(email.getMessageCRLF());  if (email.isSentOK())   um.setMessageID(email.getMessageID()); else {    um.setMessageID(email.getSentMsg());    um.setIsDelivered(X_AD_UserMail.ISDELIVERED_No);  }  um.saveEx();  if (email.isSentOK()) {    if (from != null)     log.info("Sent Email: " + email.getSubject() + " from "+ from.getEMail()+ " to "+ to.getEMail()); else     log.info("Sent Email: " + email.getSubject() + " to "+ to.getEMail());    return true;  } else {    if (from != null)     log.warning("Could NOT Send Email: " + email.getSubject() + " from "+ from.getEMail()+ " to "+ to.getEMail()+ ": "+ msg+ " ("+ getName()+ ")"); else     log.warning("Could NOT Send Email: " + email.getSubject() + " to "+ to.getEMail()+ ": "+ msg+ " ("+ getName()+ ")");    return false;  }}  }
class C{  protected void update(){  Attr attr=element.getAttributeNodeNS(namespaceURI,localName);  if (attr == null) {    baseVal=defaultValue;  } else {    baseVal=Integer.parseInt(attr.getValue());  }  valid=true;}  }
class C{  public void testLoadContent(){  System.out.println("loadContent with page as main resource");  String myScenario="My Scenario";  String myUrl="My Scenario";  Page mockPage=createMock(Page.class);  mockPage.setAudit(mockAudit);  expectLastCall().once();  mockAudit.setStatus(AuditStatus.SCENARIO_LOADING);  expectLastCall().once();  expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  expect(mockAudit.getStatus()).andReturn(AuditStatus.SCENARIO_LOADING).once();  mockAudit.setSubject(mockPage);  expectLastCall().once();  expect(mockScenarioLoaderService.loadScenario(mockPage,myScenario)).andReturn(null).once();  mockAudit.setStatus(AuditStatus.CONTENT_ADAPTING);  expectLastCall().once();  expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  expect(mockWebResourceDataService.createPage(myUrl)).andReturn(mockPage).once();  expect(mockWebResourceDataService.saveOrUpdate(mockPage)).andReturn(mockPage).once();  replay(mockPage);  setReplayMode();  AbstractScenarioAuditCommandImpl instance=new TestAbstractScenarioAuditCommandImpl();  instance.setScenarioName(myUrl);  instance.setScenario(myScenario);  instance.setIsPage(true);  instance.init();  instance.loadContent();  verify(mockPage);  setVerifyMode();}  }
class C{  public static double[] norm(double a[]){  double s=A.sum(a);  return A.multiply(a,1 / s);}  }
class C{  private static VmDisksOpResponse checkDetachDisksResponse(VmDisksOpResponse vmDisksOpResponse) throws RpcException {  return checkVmDisksOpResponse(vmDisksOpResponse);}  }
class C{  public final Builder addDivider(@StringRes final int titleId){  bottomSheet.addDivider(titleId);  return this;}  }
class C{  public RTMPConnection removeConnection(int clientId){  RTMPConnection connReturn=null;  for (  RTMPConnection conn : rtmpConnections) {    if (conn.getId() == clientId) {      connReturn=conn;      break;    }  }  if (connReturn != null) {    rtmpConnections.remove(connReturn);  }  return connReturn;}  }
class C{  public void zoomOut(){  if (mZoomOut != null) {    mZoomOut.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  @Override public void basicRemoveAllChildren(){  for (  Figure f : new LinkedList<Figure>(getChildren())) {    basicRemove(f);  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);}  }
class C{  private static String toString(final byte[] b,int off,int len){  if (b == null) {    return null;  }  if (len == 0) {    return "";  }  try {    return new String(b,off,len,"UTF-8");  } catch (  UnsupportedEncodingException e) {    return null;  }}  }
class C{  private static String emitRegistrar(Registrar registrar){  Optional<RegistrarContact> contact=Optional.fromNullable(Iterables.getFirst(registrar.getContacts(),null));  Optional<RegistrarAddress> address=Optional.fromNullable(registrar.getLocalizedAddress()).or(Optional.fromNullable(registrar.getInternationalizedAddress()));  List<String> street=address.isPresent() ? address.get().getStreet() : ImmutableList.<String>of();  return Joiner.on('|').join(ImmutableList.of(registrar.getClientId(),contact.isPresent() ? contact.get().getName() : "N/A",nullToEmpty(registrar.getRegistrarName()),Iterables.getFirst(street,""),Iterables.get(street,1,""),address.isPresent() ? nullToEmpty(address.get().getCity()) : "",address.isPresent() ? nullToEmpty(address.get().getState()) : "",address.isPresent() ? nullToEmpty(address.get().getZip()) : "",address.isPresent() ? nullToEmpty(address.get().getCountryCode()) : "",nullToEmpty(registrar.getEmailAddress()),nullToEmpty(registrar.getPhoneNumber())));}  }
class C{  @Override public void toData(DataOutput out) throws IOException {  super.toData(out);  out.writeLong(refreshInterval);  DataSerializer.writeObjectArray(alertDefs,out);}  }
class C{  public boolean isDeclaredAbstract(){  return declaredAbstract;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public void castToNonPrimitiveIfNecessary(final ClassNode sourceType,final ClassNode targetType){  OperandStack os=controller.getOperandStack();  ClassNode boxedType=os.box();  if (WideningCategories.implementsInterfaceOrSubclassOf(boxedType,targetType))   return;  MethodVisitor mv=controller.getMethodVisitor();  if (ClassHelper.CLASS_Type.equals(targetType)) {    castToClassMethod.call(mv);  } else   if (ClassHelper.STRING_TYPE.equals(targetType)) {    castToStringMethod.call(mv);  } else   if (targetType.isDerivedFrom(ClassHelper.Enum_Type)) {    (new ClassExpression(targetType)).visit(controller.getAcg());    os.remove(1);    castToEnumMethod.call(mv);    BytecodeHelper.doCast(mv,targetType);  } else {    (new ClassExpression(targetType)).visit(controller.getAcg());    os.remove(1);    castToTypeMethod.call(mv);  }}  }
class C{  public QueryStringQueryBuilder escape(boolean escape){  this.escape=escape;  return this;}  }
class C{  public Blade after(String path,RouteHandler handler){  routers.route(path,handler,HttpMethod.AFTER);  return this;}  }
class C{  public void addSequence(final Array datum,final Array weights){  QL.require(datum.size() == weights.size(),INCOMPATIBLE_ARRAY_SIZES);  for (int i=0; i < datum.size(); i++) {    add(datum.get(i),weights.get(i));  }}  }
class C{  public int index(int rowIndex,int columnIndex){  return rowIndex + rows * columnIndex;}  }
class C{  final public MutableString insert(final int index,final char[] c){  final int length=length();  if (index > length)   throw new StringIndexOutOfBoundsException();  final int l=c.length;  if (l == 0)   return this;  final int newLength=length + l;  expand(newLength);  System.arraycopy(array,index,array,index + l,length - index);  System.arraycopy(c,0,array,index,l);  hashLength=hashLength < 0 ? -1 : newLength;  return this;}  }
class C{  public static boolean isEmptyMiddlePackage(@NotNull PsiDirectory dir,boolean strictlyEmpty){  final VirtualFile[] files=dir.getVirtualFile().getChildren();  if (files.length == 0) {    return false;  }  PsiManager manager=dir.getManager();  int subpackagesCount=0;  int directoriesCount=0;  for (  VirtualFile file : files) {    if (FileTypeManager.getInstance().isFileIgnored(file))     continue;    if (!file.isDirectory())     return false;    PsiDirectory childDir=manager.findDirectory(file);    if (childDir != null) {      directoriesCount++;      if (strictlyEmpty && directoriesCount > 1)       return false;      if (JavaDirectoryService.getInstance().getPackage(childDir) != null) {        subpackagesCount++;      }    }  }  if (strictlyEmpty) {    return directoriesCount == subpackagesCount && directoriesCount == 1;  }  return directoriesCount == subpackagesCount && directoriesCount > 0;}  }
class C{  @Override public Range findDomainBounds(XYDataset dataset){  if (dataset == null) {    return null;  }  Range r=DatasetUtilities.findDomainBounds(dataset,false);  if (r == null) {    return null;  }  double offset=0;  return new Range(r.getLowerBound() + offset,r.getUpperBound() + offset);}  }
class C{  private void saveNonVolatiles(Instruction inst){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  int nNonvolatileGPRS=ir.compiledMethod.getNumberOfNonvolatileGPRs();  if (ir.compiledMethod.isSaveVolatile()) {    nNonvolatileGPRS=PhysicalRegisterSet.getNumberOfNonvolatileGPRs();  }  int n=nNonvolatileGPRS - 1;  Register FP=phys.getFP();  if (VM.BuildFor32Addr && n > MULTIPLE_CUTOFF) {    Register nv=null;    for (Enumeration<Register> e=phys.enumerateNonvolatileGPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {      nv=e.nextElement();    }    n++;    RegisterOperand range=I(nv);    int offset=getNonvolatileGPROffset(n);    inst.insertBefore(MIR_Store.create(PPC_STMW,range,A(FP),IC(offset)));  } else {    for (Enumeration<Register> e=phys.enumerateNonvolatileGPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {      Register nv=e.nextElement();      int offset=getNonvolatileGPROffset(n);      inst.insertBefore(MIR_Store.create(PPC_STAddr,A(nv),A(FP),IC(offset)));    }  }  if (ir.compiledMethod.isSaveVolatile()) {  } else {    int nNonvolatileFPRS=ir.compiledMethod.getNumberOfNonvolatileFPRs();    n=nNonvolatileFPRS - 1;    for (Enumeration<Register> e=phys.enumerateNonvolatileFPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {      Register nv=e.nextElement();      int offset=getNonvolatileFPROffset(n);      inst.insertBefore(MIR_Store.create(PPC_STFD,D(nv),A(FP),IC(offset)));    }  }}  }
class C{  public static double H(int C[][],int j,int k,int Ncount){  double N=(double)Ncount;  double N_j=Math.max(C[j][j],0.0001);  double N_k=Math.max(C[k][k],0.0001);  double N_jk=Math.max(C[j][k],0.0001);  double p_1=(N + N_jk - (N_j + N_k));  double p_2=(N_k - N_jk);  double p_3=(N_j - N_jk);  double p_5=(N - N_j);  return -1.0 / N * (p_1 * Math.log(p_1) + p_2 * Math.log(p_2) + p_3 * Math.log(p_3) + N_jk * Math.log(N_jk) - p_5 * Math.log(p_5) - N_j * Math.log(N_j));}  }
class C{  public void writeSupportVectors(ObjectOutputStream out) throws IOException {  out.writeInt(getNumberOfSupportVectors());  out.writeDouble(b);  out.writeInt(dim);  if ((meanVarianceMap == null) || (meanVarianceMap.size() == 0)) {    out.writeUTF("noscale");  } else {    out.writeUTF("scale");    out.writeInt(meanVarianceMap.size());    Iterator i=meanVarianceMap.keySet().iterator();    while (i.hasNext()) {      Integer index=(Integer)i.next();      MeanVariance meanVariance=meanVarianceMap.get(index);      out.writeInt(index.intValue());      out.writeDouble(meanVariance.getMean());      out.writeDouble(meanVariance.getVariance());    }  }  for (int e=0; e < train_size; e++) {    if (alphas[e] != 0.0d) {      out.writeInt(atts[e].length);      for (int a=0; a < atts[e].length; a++) {        out.writeInt(index[e][a]);        out.writeDouble(atts[e][a]);      }      out.writeDouble(alphas[e]);      out.writeDouble(ys[e]);    }  }}  }
class C{  @Override public String addStepsForPostDeleteVolumes(Workflow workflow,String waitFor,List<VolumeDescriptor> volumes,String taskId,VolumeWorkflowCompleter completer){  List<VolumeDescriptor> vplexVolumes=VolumeDescriptor.filterByType(volumes,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.VPLEX_VIRT_VOLUME},new VolumeDescriptor.Type[]{});  List<VolumeDescriptor> descriptorsToRemove=VolumeDescriptor.getDoNotDeleteDescriptors(vplexVolumes);  vplexVolumes.removeAll(descriptorsToRemove);  if (vplexVolumes.isEmpty()) {    return waitFor;  }  Map<URI,List<VolumeDescriptor>> vplexMap=VolumeDescriptor.getDeviceMap(vplexVolumes);  for (  URI vplexURI : vplexMap.keySet()) {    List<URI> vplexVolumeURIs=VolumeDescriptor.getVolumeURIs(vplexMap.get(vplexURI));    List<URI> forgetVolumeURIs=new ArrayList<URI>();    for (    URI vplexVolumeURI : vplexVolumeURIs) {      Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);      if (null == vplexVolume.getAssociatedVolumes()) {        _log.warn("VPLEX volume {} has no backend volumes. It was possibly ingested 'Virtual Volume Only'.",vplexVolume.forDisplay());      } else {        for (        String forgetVolumeId : vplexVolume.getAssociatedVolumes()) {          forgetVolumeURIs.add(URI.create(forgetVolumeId));        }      }      if (vplexVolume.getMirrors() != null && !(vplexVolume.getMirrors().isEmpty())) {        for (        String mirrorId : vplexVolume.getMirrors()) {          VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,URI.create(mirrorId));          if (null != vplexMirror && !vplexMirror.getInactive() && null != vplexMirror.getAssociatedVolumes()) {            for (            String forgetVolumeId : vplexMirror.getAssociatedVolumes()) {              forgetVolumeURIs.add(URI.create(forgetVolumeId));            }          }        }      }    }    addStepToForgetVolumes(workflow,vplexURI,forgetVolumeURIs,waitFor);  }  List<URI> allVplexVolumeURIs=VolumeDescriptor.getVolumeURIs(vplexVolumes);  URI vplexURI=vplexVolumes.get(0).getDeviceURI();  waitFor=workflow.createStep(null,"Mark virtual volumes inactive",VOLUME_FORGET_STEP,vplexURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),markVolumesInactiveMethod(allVplexVolumeURIs),markVolumesInactiveMethod(allVplexVolumeURIs),null);  return waitFor;}  }
class C{  private int endCheckSwitch(){  int rv=END_UNREACHED;  return rv;}  }
class C{  public DummyDataStateTracker(int netType,String tag){  mNetworkInfo=new NetworkInfo(netType);}  }
class C{  public void addComparator(Comparator<T> comparator){  if (comparator instanceof InvertibleComparator) {    this.comparators.add((InvertibleComparator<T>)comparator);  } else {    this.comparators.add(new InvertibleComparator<T>(comparator));  }}  }
class C{  public String optString(int index,String defaultValue){  Object o=opt(index);  return o != null ? o.toString() : defaultValue;}  }
class C{  public void testFindUserActiveDirectory() throws Exception {  LdapManager mgr=getLdapAD();  List ret=null;  OrFilter filter=new OrFilter();  filter.or(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GIVEN_NAME),"*nacho*"));  filter.or(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_SURNAME),"*nacho*"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddUserClasses(true);    ret=mgr.findUser(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(1,ret.size());  assertEquals("5f648285b040cd4dac2051885dfa5ffe",((LdapEntryVO)ret.get(0)).getAttributeSingleValue(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GUID)));}  }
class C{  private static Map<String,Object> processSection(String section,Collection<Map<String,Object>> hosts,Map<String,Object> dflts,Map<String,Object> props) throws IgniteCheckedException {  if (section == null || props == null)   return null;  if (DFLT_SECTION.equalsIgnoreCase(section)) {    if (dflts != null)     throw new IgniteCheckedException("Only one '" + DFLT_SECTION + "' section is allowed.");    return props;  } else {    hosts.add(props);    return null;  }}  }
class C{  public boolean switched(){  return switched;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(ConnectionRegressionTest.class);}  }
class C{  protected final void processAttachOrCreateResponse(GenericResponse genericResponse){  handle=genericResponse.getObjectHandle();}  }
class C{  private static Object invokeGetter(Object obj,String methodName,Object defaultValue){  try {    Method method=obj.getClass().getMethod(methodName,new Class[0]);    Object result=method.invoke(obj,new Object[0]);    return result;  } catch (  NoSuchMethodException e) {    return defaultValue;  }catch (  IllegalAccessException e) {    return defaultValue;  }catch (  InvocationTargetException e) {    return defaultValue;  }}  }
class C{  public static <T>HashSet<T> linkedHashSet(){  return new LinkedHashSet<T>();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.604 -0500",hash_original_method="E0C473B1C058E704D5BF11A300CA2D54",hash_generated_method="D1EC474CB165D3225EAE9EC555C03136") public static float saturation(int color){  int r=(color >> 16) & 0xFF;  int g=(color >> 8) & 0xFF;  int b=color & 0xFF;  int V=Math.max(b,Math.max(r,g));  int temp=Math.min(b,Math.min(r,g));  float S;  if (V == temp) {    S=0;  } else {    S=(V - temp) / (float)V;  }  return S;}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static void testVerifyNeg() throws AssertFailException {  boolean result=false;  byte[] data=BaseEncoding.base16().lowerCase().decode("CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A91".toLowerCase());  byte[] sig=BaseEncoding.base16().lowerCase().decode("3044022079BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F817980220294F14E883B3F525B5367756C2A11EF6CF84B730B36C17CB0C56F0AAB2C98589".toLowerCase());  byte[] pub=BaseEncoding.base16().lowerCase().decode("040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40".toLowerCase());  result=NativeSecp256k1.verify(data,sig,pub);  assertEquals(result,false,"testVerifyNeg");}  }
class C{  protected double computeNNForRealData(final KNNQuery<NumberVector> knnQuery,Relation<NumberVector> relation,final int dim){  double w=0.;  ModifiableDBIDs dataSampleIds=DBIDUtil.randomSample(relation.getDBIDs(),sampleSize,random);  for (DBIDIter iter=dataSampleIds.iter(); iter.valid(); iter.advance()) {    final double kdist=knnQuery.getKNNForDBID(iter,k + 1).getKNNDistance();    w+=MathUtil.powi(kdist,dim);  }  return w;}  }
class C{  @Override public void sendLocoNetMessage(LocoNetMessage m){  transmittedMsgCount++;  try {    if (lnMessageBuffer != null) {      lnMessageBuffer.sendLocoNetMessage(m);    } else {      log.warn("sendLocoNetMessage: no connection to server");    }  } catch (  java.rmi.RemoteException ex) {    log.warn("sendLocoNetMessage: Exception: " + ex);  }}  }
class C{  public CRootNode(final IDatabase database,final DefaultTreeModel model,final IActionProvider actionProvider){  Preconditions.checkNotNull(database,"IE01580: Database argument can not be null");  Preconditions.checkNotNull(model,"IE01581: Model argument can not be null");  Preconditions.checkNotNull(actionProvider,"IE01582: Action provider argument can not be null");  m_database=database;  m_model=model;  m_actionProvider=actionProvider;  createChildren();}  }
class C{  public Sort(SortField field){  setSort(field);}  }
class C{  public static void writeBlockPosition(ByteBuf buf,long x,long y,long z){  buf.writeLong((x & 0x3ffffff) << 38 | (y & 0xfff) << 26 | z & 0x3ffffff);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.VOID_TYPE;}  }
class C{  public LoggedCreateTargetChange(Object selection,ICreateTargetQueries queries){  fSelection=selection;  fQueries=queries;}  }
class C{  public void clearChatNotifications(){  mNotificationManager.cancel(MESSAGE_NOTIFICATION_ID);  mUnreadMessageCount=0;}  }
class C{  public MViewColumn(MColumn column){  super(column.getCtx(),0,column.get_TrxName());  setAD_Column_ID(column.getAD_Column_ID());  setName(column.getName());  setDescription(column.getDescription());  setHelp(column.getHelp());  setIsActive(true);  setEntityType(column.getEntityType());}  }
class C{  public final void play(InputStream is,int expectedKBitSecRate) throws Exception {  stopped=false;  if (playerCallback != null)   playerCallback.playerStarted();  if (expectedKBitSecRate <= 0)   expectedKBitSecRate=DEFAULT_EXPECTED_KBITSEC_RATE;  sumKBitSecRate=0;  countKBitSecRate=0;  playImpl(is,expectedKBitSecRate);}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isMinValueSet(){  return mMinValue != MathHelper.NULL_VALUE;}  }
class C{  private void backpropagateError(Trainable network,int row){  int numOutputs=network.getOutputNeurons().size();  for (int i=layers.size() - 1; i > 0; i--) {    List<Neuron> layer=layers.get(i);    if (i == layers.size() - 1) {      for (int j=0; j < numOutputs; j++) {        Neuron outputNeuron=network.getOutputNeurons().get(j);        double targetValue=network.getTrainingSet().getTargetData()[row][j];        double outputError=targetValue - outputNeuron.getActivation();        storeErrorAndDeltas(outputNeuron,outputError);        mse+=Math.pow(outputError,2);      }    } else {      for (      Neuron hiddenLayerNeuron : layer) {        double sumFanOutErrors=0;        for (        Synapse synapse : hiddenLayerNeuron.getFanOut().values()) {          Neuron nextLayerNeuron=synapse.getTarget();          if (errorMap.get(nextLayerNeuron) != null) {            sumFanOutErrors+=(errorMap.get(nextLayerNeuron) * synapse.getStrength());          }        }        storeErrorAndDeltas(hiddenLayerNeuron,sumFanOutErrors);      }    }  }}  }
class C{  public void testDynDoubleMissingFunction() throws Exception {  checkSortMissingFunction("dyn_doubledv","-1.3","4.2");}  }
class C{  public void start() throws SchedulerException {  sched.start();}  }
class C{  public boolean isHandle(String handle){  return clientHandle.equals(handle);}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  ModelPackage theModelPackage=(ModelPackage)EPackage.Registry.INSTANCE.getEPackage(ModelPackage.eNS_URI);  entityEClass.getESuperTypes().add(this.getType());  primitivePropertyTypeEClass.getESuperTypes().add(this.getPropertyType());  objectPropertyTypeEClass.getESuperTypes().add(this.getPropertyType());  enumEClass.getESuperTypes().add(this.getType());  typeEClass.getESuperTypes().add(theModelPackage.getModel());  booleanPropertyAttributeEClass.getESuperTypes().add(this.getPropertyAttribute());  enumLiteralPropertyAttributeEClass.getESuperTypes().add(this.getPropertyAttribute());  complexPrimitivePropertyTypeEClass.getESuperTypes().add(this.getPropertyType());  dictionaryPropertyTypeEClass.getESuperTypes().add(this.getComplexPrimitivePropertyType());  initEClass(entityEClass,Entity.class,"Entity",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEntity_SuperType(),this.getEntity(),null,"superType",null,0,1,Entity.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEntity_Properties(),this.getProperty(),null,"properties",null,0,-1,Entity.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(propertyEClass,Property.class,"Property",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getProperty_Presence(),this.getPresence(),null,"presence",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProperty_Multiplicity(),ecorePackage.getEBoolean(),"multiplicity",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProperty_Name(),ecorePackage.getEString(),"name",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProperty_Description(),ecorePackage.getEString(),"description",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProperty_ConstraintRule(),this.getConstraintRule(),null,"constraintRule",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProperty_Type(),this.getPropertyType(),null,"type",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getProperty_PropertyAttributes(),this.getPropertyAttribute(),null,"propertyAttributes",null,0,-1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(primitivePropertyTypeEClass,PrimitivePropertyType.class,"PrimitivePropertyType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getPrimitivePropertyType_Type(),this.getPrimitiveType(),"type",null,0,1,PrimitivePropertyType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(objectPropertyTypeEClass,ObjectPropertyType.class,"ObjectPropertyType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getObjectPropertyType_Type(),this.getType(),null,"type",null,0,1,ObjectPropertyType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(presenceEClass,Presence.class,"Presence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getPresence_Mandatory(),ecorePackage.getEBoolean(),"mandatory",null,0,1,Presence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(constraintEClass,Constraint.class,"Constraint",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getConstraint_Type(),this.getConstraintIntervalType(),"type",null,0,1,Constraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getConstraint_ConstraintValues(),ecorePackage.getEString(),"constraintValues",null,0,1,Constraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enumEClass,org.eclipse.vorto.core.api.model.datatype.Enum.class,"Enum",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEnum_Enums(),this.getEnumLiteral(),null,"enums",null,0,-1,org.eclipse.vorto.core.api.model.datatype.Enum.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enumLiteralEClass,EnumLiteral.class,"EnumLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEnumLiteral_Name(),ecorePackage.getEString(),"name",null,0,1,EnumLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getEnumLiteral_Description(),ecorePackage.getEString(),"description",null,0,1,EnumLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeEClass,Type.class,"Type",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(propertyTypeEClass,PropertyType.class,"PropertyType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(propertyAttributeEClass,PropertyAttribute.class,"PropertyAttribute",IS_ABSTRACT,IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(booleanPropertyAttributeEClass,BooleanPropertyAttribute.class,"BooleanPropertyAttribute",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getBooleanPropertyAttribute_Type(),this.getBooleanPropertyAttributeType(),"type",null,0,1,BooleanPropertyAttribute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getBooleanPropertyAttribute_Value(),ecorePackage.getEBoolean(),"value",null,0,1,BooleanPropertyAttribute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enumLiteralPropertyAttributeEClass,EnumLiteralPropertyAttribute.class,"EnumLiteralPropertyAttribute",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEnumLiteralPropertyAttribute_Type(),this.getEnumLiteralPropertyAttributeType(),"type",null,0,1,EnumLiteralPropertyAttribute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getEnumLiteralPropertyAttribute_Value(),this.getEnumLiteral(),null,"value",null,0,1,EnumLiteralPropertyAttribute.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(constraintRuleEClass,ConstraintRule.class,"ConstraintRule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getConstraintRule_Constraints(),this.getConstraint(),null,"Constraints",null,0,-1,ConstraintRule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(complexPrimitivePropertyTypeEClass,ComplexPrimitivePropertyType.class,"ComplexPrimitivePropertyType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(dictionaryPropertyTypeEClass,DictionaryPropertyType.class,"DictionaryPropertyType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getDictionaryPropertyType_KeyType(),this.getPropertyType(),null,"keyType",null,0,1,DictionaryPropertyType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getDictionaryPropertyType_ValueType(),this.getPropertyType(),null,"valueType",null,0,1,DictionaryPropertyType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(primitiveTypeEEnum,PrimitiveType.class,"PrimitiveType");  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.STRING);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.INT);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.FLOAT);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.BOOLEAN);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.DATETIME);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.DOUBLE);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.LONG);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.SHORT);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.BASE64_BINARY);  addEEnumLiteral(primitiveTypeEEnum,PrimitiveType.BYTE);  initEEnum(constraintIntervalTypeEEnum,ConstraintIntervalType.class,"ConstraintIntervalType");  addEEnumLiteral(constraintIntervalTypeEEnum,ConstraintIntervalType.MIN);  addEEnumLiteral(constraintIntervalTypeEEnum,ConstraintIntervalType.MAX);  addEEnumLiteral(constraintIntervalTypeEEnum,ConstraintIntervalType.STRLEN);  addEEnumLiteral(constraintIntervalTypeEEnum,ConstraintIntervalType.REGEX);  addEEnumLiteral(constraintIntervalTypeEEnum,ConstraintIntervalType.MIMETYPE);  addEEnumLiteral(constraintIntervalTypeEEnum,ConstraintIntervalType.SCALING);  initEEnum(booleanPropertyAttributeTypeEEnum,BooleanPropertyAttributeType.class,"BooleanPropertyAttributeType");  addEEnumLiteral(booleanPropertyAttributeTypeEEnum,BooleanPropertyAttributeType.READABLE);  addEEnumLiteral(booleanPropertyAttributeTypeEEnum,BooleanPropertyAttributeType.WRITABLE);  addEEnumLiteral(booleanPropertyAttributeTypeEEnum,BooleanPropertyAttributeType.EVENTABLE);  initEEnum(enumLiteralPropertyAttributeTypeEEnum,EnumLiteralPropertyAttributeType.class,"EnumLiteralPropertyAttributeType");  addEEnumLiteral(enumLiteralPropertyAttributeTypeEEnum,EnumLiteralPropertyAttributeType.MEASUREMENT_UNIT);  createResource(eNS_URI);}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < this.getSeriesCount(); i++) {    PivotSeries series=this.getSeries(i);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public DelegatingServletOutputStream(final OutputStream targetStream){  if (targetStream == null) {    throw new IllegalArgumentException("Target OutputStream must not be null");  }  this.targetStream=targetStream;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:40.227 -0500",hash_original_method="0D2A49DF88825D4B2D39C3141FFC083A",hash_generated_method="0D2A49DF88825D4B2D39C3141FFC083A") boolean isSameTextField(int ptr){  return ptr == mNodePointer;}  }
class C{  static boolean contains(String word){  return contractions.contains(word);}  }
class C{  public static void flatten2bpc(final int w,final byte[] data,final byte[] index,final boolean isARGB,final int length,final byte[] newData){  int id1, pt=0;  final int[] shift={6,4,2,0};  int widthReached=0;  for (  final byte aData : data) {    for (int samples=0; samples < 4; samples++) {      if (pt >= length) {        break;      }      if (index == null) {        id1=((aData << shift[3 - samples]) & 192);        if (id1 == 192) {          id1=255;        }        newData[pt++]=(byte)(id1);      } else {        id1=((aData >> shift[samples]) & 3) * 3;        newData[pt++]=index[id1];        newData[pt++]=index[id1 + 1];        newData[pt++]=index[id1 + 2];        if (isARGB) {          if (id1 == 0) {            newData[pt++]=(byte)0;          } else {            newData[pt++]=0;          }        }      }      widthReached++;      if (widthReached == w) {        widthReached=0;        samples=8;      }    }  }}  }
class C{  public GuildUpdateHandler(ImplDiscordAPI api){  super(api,true,"GUILD_UPDATE");}  }
class C{  @Override protected void processFocusEvent(final FocusEvent e){  super.processFocusEvent(e);  super.repaint();}  }
class C{  private CompletableFuture<Connection> next(){  if (connection != null)   return connection.close().thenRun(null).thenCompose(null);  return connect();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Matrix premultiplyBy(Matrix mx){  return mx.multiply(this);}  }
class C{  @Override public URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null) {    throw new IllegalArgumentException("url == null");  }  String host=url.getHost();  if (host == null || host.isEmpty() || host.equalsIgnoreCase("localhost")) {    return new FileURLConnection(url);  }  URL ftpURL=new URL("ftp",host,url.getFile());  return (proxy == null) ? ftpURL.openConnection() : ftpURL.openConnection(proxy);}  }
class C{  public static void main(String[] args) throws Exception {  ICluster alice=Cluster.joinAwait();  Map<String,String> metadata=ImmutableMap.of("name","Joe");  ICluster joe=Cluster.joinAwait(metadata,alice.address());  joe.listen().map(null).subscribe(null);  Optional<Member> joeMemberOptional=alice.otherMembers().stream().filter(null).findAny();  if (joeMemberOptional.isPresent()) {    alice.send(joeMemberOptional.get(),Message.fromData("Hello Joe"));  }  TimeUnit.SECONDS.sleep(3);}  }
class C{  protected JavaModel(JavaModelManager manager) throws Error {  super(null,manager);}  }
class C{  protected void generateIntermediatePositions(DrawContext dc,Iterable<? extends Position> positions){  Iterator<? extends Position> iterator=positions.iterator();  Globe globe=dc.getGlobe();  List<Position> toothPositions=new ArrayList<Position>();  double waveLength=this.getWaveLength();  if (waveLength == 0) {    waveLength=this.computeDefaultWavelength(dc.getGlobe());  }  double toothSize=waveLength / 2.0;  boolean isTooth=true;  Position firstPos=iterator.next();  Vec4 thisPoint=globe.computePointFromPosition(firstPos);  Position nextPos=iterator.next();  Vec4 pNext=globe.computePointFromPosition(nextPos);  while (true) {    double dist=pNext.distanceTo3(thisPoint);    Position pos=globe.computePositionFromPoint(thisPoint);    toothPositions.add(pos);    while (dist < toothSize && iterator.hasNext()) {      if (!isTooth) {        toothPositions.add(nextPos);      }      nextPos=iterator.next();      pNext=globe.computePointFromPosition(nextPos);      dist=pNext.distanceTo3(thisPoint);    }    if (dist < toothSize) {      if (!firstPos.equals(nextPos)) {        nextPos=firstPos;        pNext=globe.computePointFromPosition(nextPos);      } else {        break;      }    }    Vec4 vAB=pNext.subtract3(thisPoint).normalize3();    Vec4 endSegment=thisPoint.add3(vAB.multiply3(toothSize));    if (isTooth) {      Vec4 normal=globe.computeSurfaceNormalAtPoint(thisPoint);      Vec4 perpendicular=vAB.cross3(normal);      perpendicular=perpendicular.normalize3().multiply3(toothSize);      Vec4 toothPoint1=thisPoint.subtract3(perpendicular);      Vec4 toothPoint2=endSegment.subtract3(perpendicular);      toothPositions.add(globe.computePositionFromPoint(toothPoint1));      toothPositions.add(globe.computePositionFromPoint(toothPoint2));    }    pos=globe.computePositionFromPoint(endSegment);    toothPositions.add(pos);    thisPoint=endSegment;    isTooth=!isTooth;  }  this.computedPositions=toothPositions;}  }
class C{  public ReferencesSearchGroup(IWorkbenchSite site){  fSite=site;  fGroupId=IContextMenuConstants.GROUP_SEARCH;  fFindReferencesInProjectAction=new FindReferencesInProjectAction(site);  fFindReferencesInProjectAction.setActionDefinitionId(ITypeScriptEditorActionDefinitionIds.SEARCH_REFERENCES_IN_PROJECT);  ISelectionProvider provider=fSite.getSelectionProvider();  ISelection selection=provider.getSelection();  registerAction(fFindReferencesInProjectAction,provider,selection);}  }
class C{  public static boolean isInvoiceType(GenericValue invoice,String inputTypeId) throws GenericEntityException {  if (invoice == null) {    return false;  }  GenericValue invoiceType=invoice.getRelatedOne("InvoiceType",true);  if (invoiceType == null) {    throw new GenericEntityException("Cannot find InvoiceType for invoiceId " + invoice.getString("invoiceId"));  }  String invoiceTypeId=invoiceType.getString("invoiceTypeId");  if (inputTypeId.equals(invoiceTypeId)) {    return true;  }  return isInvoiceTypeRecurse(invoiceType,inputTypeId);}  }
class C{  public synchronized boolean process(){  if (isProcessed()) {    log.info("Already processed");    return true;  }  boolean ok=false;  MAcctSchema as=MAcctSchema.get(getCtx(),getC_AcctSchema_ID());  MProduct product=MProduct.get(getCtx(),getM_Product_ID());  String CostingLevel=product.getCostingLevel(as);  int organizationId=getAD_Org_ID();  int warehouseId=getM_Warehouse_ID();  int attributeSetInstanceId=getM_AttributeSetInstance_ID();  if (MAcctSchema.COSTINGLEVEL_Client.equals(CostingLevel)) {    organizationId=0;    warehouseId=0;    attributeSetInstanceId=0;  } else   if (MAcctSchema.COSTINGLEVEL_Organization.equals(CostingLevel)) {    warehouseId=0;    attributeSetInstanceId=0;  } else   if (MAcctSchema.COSTINGLEVEL_BatchLot.equals(CostingLevel)) {    warehouseId=0;    organizationId=0;  }  if (getM_CostElement_ID() == 0) {    for (    MCostElement costElement : MCostElement.getCostElement(getCtx(),get_TrxName())) {      ok=process(as,product,costElement,organizationId,warehouseId,attributeSetInstanceId);      if (!ok)       break;    }  } else {    MCostElement ce=MCostElement.get(getCtx(),getM_CostElement_ID());    ok=process(as,product,ce,organizationId,warehouseId,attributeSetInstanceId);  }  if (ok) {    setDeltaAmt(null);    setDeltaQty(null);    setProcessed(true);    ok=save();  }  log.info(ok + " - " + toString());  return ok;}  }
class C{  public static POS fromToken(String s){  POS result=fromTokens.get(s);  assert result != null : "LBJava ASSERTION FAILED: Unrecognized POS tag: '" + s + "'";  return result;}  }
class C{  public static void appendChildrenWithTwoAttributesFromList(final Document doc,final Element parentElement,final List<String> list,final String childName,final String attrOneKey,final String attrTwoKey,final String attrTwoFixValue){  for (  final String attrOneValue : list) {    final Element newChild=doc.createElement(childName);    newChild.setAttribute(attrOneKey,attrOneValue);    newChild.setAttribute(attrTwoKey,attrTwoFixValue);    parentElement.appendChild(newChild);  }}  }
class C{  @Override public void removeAll(){}  }
class C{  @Override public int hashCode(){  long result=0;  for (int i=m_items.length - 1; i >= 0; i--) {    result+=(i * m_items[i]);  }  return (int)result;}  }
class C{  private CoderResult(int type,int length){  this.type=type;  this.length=length;}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  int k=0;  for (  double value : mValues) {    xySeries.add(++k,value);  }  return xySeries;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void reloadSourceValues(){  try {    String midStr=StringUtils.trimToNull(req.getParameter(REQ_PARAM_MAPPINGID));    if (midStr != null) {      mid=Integer.valueOf(midStr);      mapping=resource.getMapping(req.getParameter(REQ_PARAM_ROWTYPE),mid);    }    trans.setTmap(this.mapping.getExtension().getRowType(),property,new TreeMap<String,String>(),new TreeMap<String,String>());    int i=1;    for (    String val : sourceManager.inspectColumn(mapping.getSource(),field.getIndex(),1000,10000)) {      StringBuilder key=new StringBuilder();      key.append('k');      key.append(i);      getSourceValuesMap().put(key.toString(),val);      i++;    }    if (field.getTranslation() != null) {      for (      Entry<String,String> entry : field.getTranslation().entrySet()) {        if (entry.getValue() != null && getSourceValuesMap().containsValue(entry.getKey())) {          for (          Entry<String,String> sourceValueEntry : getSourceValuesMap().entrySet()) {            if (sourceValueEntry.getValue().equals(entry.getKey())) {              getTmap().put(sourceValueEntry.getKey(),entry.getValue());            }          }        }      }    }    addActionMessage(getText("manage.translation.reloaded.values",new String[]{String.valueOf(getSourceValuesMap().size()),field.getTerm().toString()}));  } catch (  SourceException e) {    addActionError(getText("manage.translation.reloaded.fail",new String[]{field.getTerm().toString(),e.getMessage()}));  }}  }
class C{  public static <E>Set<E> newSetFromMap(Map<E,Boolean> map){  if (map.isEmpty()) {    return new SetFromMap<E>(map);  }  throw new IllegalArgumentException();}  }
class C{  public int tableBuilderCount(){  return this.tableBuilders.size();}  }
class C{  public void addContentItem(ContentItem contentItem){  if (contentItems == null) {    contentItems=new ArrayList<ContentItem>();  }  contentItems.add(contentItem);}  }
class C{  public int loadInt(){  return 0;}  }
class C{  public static String byteArrayToHexString(byte in[],int offset){  if (in == null || in.length <= 0 || offset >= in.length)   return null;  StringBuffer out=new StringBuffer(in.length * 3);  for (int i=offset; i < in.length; i++) {    out.append(byteToHexString(in[i]));    out.append(' ');  }  return out.toString();}  }
class C{  public void testGetProperty(){  UnboundArbitraryBean instance=new UnboundBeanImpl();  assertEquals(null,instance.getProperty(NOT_A_PROPERTY));  assertEquals(OLD_VALUE,instance.getProperty(STRING_PROPERTY));  assertEquals(OLD_VALUE,instance.getProperty(MAPPED_STRING));}  }
class C{  public TypeInfo createTypeInfo(){  TypeInfoImpl typeInfo=new TypeInfoImpl();  return typeInfo;}  }
class C{  public static Test suite(){  return new TestSuite(AddUserFieldsTest.class);}  }
class C{  public boolean isDefNoncollider(Node node1,Node node2,Node node3){  Edge edge1=getEdge(node1,node2);  Edge edge2=getEdge(node3,node2);  if (edge1 == null || edge2 == null) {    return false;  }  boolean circle12=edge1.getProximalEndpoint(node2) == Endpoint.CIRCLE;  boolean circle32=edge2.getProximalEndpoint(node2) == Endpoint.CIRCLE;  if (edge1.pointsTowards(node1))   return true;  if (edge2.pointsTowards(node3))   return true;  if (circle12 && circle32)   return true;  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override protected Object readPostProcess(Object o) throws Exception {  Enumeration<Object> enm;  Vector<Vector<?>> deserialized;  Object key;  deserialized=(Vector<Vector<?>>)super.readPostProcess(o);  rebuildBeanConnections(deserialized,REGULAR_CONNECTION);  enm=m_BeanConnectionRelation.keys();  while (enm.hasMoreElements()) {    key=enm.nextElement();    if (!(key instanceof MetaBean)) {      continue;    }    rebuildBeanConnections(deserialized,key);  }  if (getDataType() == DATATYPE_USERCOMPONENTS) {    removeUserToolBarBeans(deserialized);  }  return deserialized;}  }
class C{  @Override synchronized public void notifyReply(SprogReply m){  SprogMessage msg;  SprogVersion v;  replyString=m.toString();switch (state) {case IDLE:{      if (log.isDebugEnabled()) {        log.debug("reply in IDLE state");      }      break;    }case CRSENT:{    log.debug("reply in CRSENT state" + replyString);    if ((replyString.indexOf("P>")) >= 0) {      stopTimer();      msg=new SprogMessage(1);      msg.setOpCode('?');      tc.sendSprogMessage(msg,this);      state=QueryState.QUERYSENT;      startLongTimer();    }    break;  }case QUERYSENT:{  log.debug("reply in QUERYSENT state" + replyString);  if (replyString.contains("SPROG")) {    stopTimer();    String[] splits=replyString.split("\n");    splits=splits[1].split(" ");    int index=1;    log.debug("Elements in version reply: " + splits.length);    log.debug("First element: <" + splits[0] + ">");    if (splits[0].contains("Pi-SPROG")) {      log.debug("Found a Pi-SPROG " + splits[index]);switch (splits[1]) {case "Nano":        v=new SprogVersion(new SprogType(SprogType.PISPROGNANO),splits[2].substring(1));      break;case "One":    v=new SprogVersion(new SprogType(SprogType.PISPROGONE),splits[2].substring(1));  break;default :if (log.isDebugEnabled()) {  log.debug("Unrecognised Pi-SPROG " + splits[1]);}v=new SprogVersion(new SprogType(SprogType.NOT_RECOGNISED));break;}} else if (splits[0].contains("SPROG")) {log.debug("Found a SPROG " + splits[index]);switch (splits[index]) {case "3":index+=2;v=new SprogVersion(new SprogType(SprogType.SPROG3),splits[index]);break;case "IV":index+=2;v=new SprogVersion(new SprogType(SprogType.SPROGIV),splits[index]);break;case "5":index+=2;v=new SprogVersion(new SprogType(SprogType.SPROG5),splits[index]);break;case "Nano":index+=2;v=new SprogVersion(new SprogType(SprogType.NANO),splits[index]);break;case "Sniffer":index+=2;v=new SprogVersion(new SprogType(SprogType.SNIFFER),splits[index]);break;case "II":index++;if (splits[index].equals("USB")) {index+=2;v=new SprogVersion(new SprogType(SprogType.SPROGIIUSB),splits[index]);} else {index++;v=new SprogVersion(new SprogType(SprogType.SPROGII),splits[index]);}break;case "Ver":index+=1;v=new SprogVersion(new SprogType(SprogType.SPROGV4),splits[index]);break;default :if (log.isDebugEnabled()) {log.debug("Unrecognised SPROG" + splits[index]);}v=new SprogVersion(new SprogType(SprogType.NOT_RECOGNISED));break;}} else {log.warn("Found an unknown SPROG " + splits[index]);v=new SprogVersion(new SprogType(SprogType.NOT_RECOGNISED));}if ((v.sprogType.sprogType == SprogType.SPROGII) && (v.getMajorVersion() >= 3)) {v=new SprogVersion(new SprogType(SprogType.SPROGIIv3),v.sprogVersion);}log.debug("Found: " + v.toString());notifyVersion(v);state=QueryState.DONE;break;}break;}case DONE:break;default :{log.error("Unknown case");}}}  }
class C{  public void parseHouseholdMap(String filename){  LOG.info("Parsing households from " + filename);  Counter counter=new Counter("  household # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null) {      String serial=line.substring(1,12);      String size=line.substring(78,80);      String type=line.substring(12,13);      String dwelling=line.substring(13,15);      String population=line.substring(80,81);      String income=line.substring(81,83);      householdMap.put(Id.create(serial,Household.class),size.replaceAll(" ","") + "," + HousingType2011.parseTypeFromCensusCode(type)+ ","+ MainDwellingType2011.parseTypeFromCensusCode(dwelling)+ ","+ PopulationGroup2011.parseTypeFromCensusCode(population)+ ","+ Income2011.parseIncome2011FromCensusCode(income));      String province=line.substring(58,59);      String district=line.substring(59,62);      String municipality=line.substring(62,65);      geographyMap.put(Id.create(serial,Household.class),province + "," + district+ ","+ municipality);      counter.incCounter();    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader " + filename);    }  }  counter.printCounter();  LOG.info("Done parsing households (" + householdMap.size() + ").");}  }
class C{  public boolean isStopped(){  return stop.get();}  }
class C{  public Image modifyAlphaWithTranslucency(byte alpha){  int w=getWidth();  int h=getHeight();  int size=w * h;  int[] arr=getRGB();  int alphaInt=(((int)alpha) << 24) & 0xff000000;  float alphaRatio=(alpha & 0xff);  alphaRatio=(alpha & 0xff) / 255.0f;  for (int iter=0; iter < size; iter++) {    int currentAlpha=(arr[iter] >> 24) & 0xff;    if (currentAlpha != 0) {      if (currentAlpha == 0xff) {        arr[iter]=(arr[iter] & 0xffffff) | alphaInt;      } else {        int relative=(int)(currentAlpha * alphaRatio);        relative=(relative << 24) & 0xff000000;        arr[iter]=(arr[iter] & 0xffffff) | relative;      }    }  }  Image i=new Image(arr,w,h);  i.opaqueTested=true;  i.opaque=false;  return i;}  }
class C{  protected static <T>T checkExists(@Nullable T obj,String msg){  if (obj == null) {    throw new NotFoundException(msg);  }  return obj;}  }
class C{  static <K,V>RegularImmutableMap<K,V> fromEntryArray(int n,Entry<K,V>[] entryArray){  checkPositionIndex(n,entryArray.length);  Entry<K,V>[] entries;  if (n == entryArray.length) {    entries=entryArray;  } else {    entries=createEntryArray(n);  }  int tableSize=Hashing.closedTableSize(n,MAX_LOAD_FACTOR);  ImmutableMapEntry<K,V>[] table=createEntryArray(tableSize);  int mask=tableSize - 1;  for (int entryIndex=0; entryIndex < n; entryIndex++) {    Entry<K,V> entry=entryArray[entryIndex];    K key=entry.getKey();    V value=entry.getValue();    checkEntryNotNull(key,value);    int tableIndex=Hashing.smear(key.hashCode()) & mask;    @Nullable ImmutableMapEntry<K,V> existing=table[tableIndex];    ImmutableMapEntry<K,V> newEntry;    if (existing == null) {      boolean reusable=entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K,V>)entry).isReusable();      newEntry=reusable ? (ImmutableMapEntry<K,V>)entry : new ImmutableMapEntry<K,V>(key,value);    } else {      newEntry=new NonTerminalImmutableMapEntry<K,V>(key,value,existing);    }    table[tableIndex]=newEntry;    entries[entryIndex]=newEntry;    checkNoConflictInKeyBucket(key,newEntry,existing);  }  return new RegularImmutableMap<K,V>(entries,table,mask);}  }
class C{  public static IllegalStateException newIllegalStateException(int errorCode,String message,Object... arguments){  return initCause(new IllegalStateException(formatMessage(errorCode,message,arguments)),arguments);}  }
class C{  public void test_16() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,false,true,false);  insertSparql(cxn);  IValueCentricTextIndexer<?> searchEngine=cxn.getTripleStore().getLexiconRelation().getSearchEngine();  assertEquals(0,searchEngine.count(query("1")));  assertEquals(0,searchEngine.count(query("2")));  assertEquals(0,searchEngine.count(query("3")));  assertEquals(0,searchEngine.count(query("4")));  assertEquals(0,searchEngine.count(query("true")));  assertEquals(0,searchEngine.count(query("false")));  assertEquals(1,searchEngine.count(query("plain")));  assertEquals(0,searchEngine.count(query("datatyped")));  assertEquals(1,searchEngine.count(query("english")));  endTest(cxn);}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,int classIndex,boolean multiInstance) throws Exception {  TestInstances dataset=new TestInstances();  dataset.setSeed(seed);  dataset.setNumInstances(numInstances);  dataset.setNumNominal(numNominal);  dataset.setNumNumeric(numNumeric);  dataset.setNumString(numString);  dataset.setNumDate(numDate);  dataset.setNumRelational(numRelational);  dataset.setNumClasses(numClasses);  dataset.setClassType(classType);  dataset.setClassIndex(classIndex);  dataset.setNumClasses(numClasses);  dataset.setMultiInstance(multiInstance);  dataset.setWords(getWords());  dataset.setWordSeparators(getWordSeparators());  return process(dataset.generate());}  }
class C{  protected OSXAdapter(String proxySignature,Object target,Method handler){  this.proxySignature=proxySignature;  this.targetObject=target;  this.targetMethod=handler;}  }
class C{  byte dirTypeBackward(){  lastChar=text.charAt(charIndex - 1);  if (Character.isLowSurrogate(lastChar)) {    int codePoint=Character.codePointBefore(text,charIndex);    charIndex-=Character.charCount(codePoint);    return Character.getDirectionality(codePoint);  }  charIndex--;  byte dirType=getCachedDirectionality(lastChar);  if (isHtml) {    if (lastChar == '>') {      dirType=skipTagBackward();    } else     if (lastChar == ';') {      dirType=skipEntityBackward();    }  }  return dirType;}  }
class C{  @Deprecated public void deleteNotebookAsync(LinkedNotebook linkedNotebook,OnClientCallback<Integer> callback){  AsyncReflector.execute(this,callback,"deleteNotebook",linkedNotebook);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void affinity(String cacheName,Object affKey,GridKernalContext ctx){  try {    final Object affKey0=ctx.affinity().affinityKey(cacheName,affKey);    node=ctx.affinity().mapKeyToNode(cacheName,affKey0);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  public static void requestWriteExternalStoreagePermission(Activity activity){  ActivityCompat.requestPermissions(activity,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},PERMISSIONS_WRITE_EXTERNAL_STORAGE);}  }
class C{  private void backupScreens(BackupDataOutput data) throws IOException {  ContentResolver cr=mContext.getContentResolver();  Cursor cursor=cr.query(WorkspaceScreens.CONTENT_URI,SCREEN_PROJECTION,null,null,null);  try {    cursor.moveToPosition(-1);    if (DEBUG)     Log.d(TAG,"dumping screens after: " + mLastBackupRestoreTime);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final long updateTime=cursor.getLong(ID_MODIFIED);      Key key=getKey(Key.SCREEN,id);      mKeys.add(key);      final String backupKey=keyToBackupKey(key);      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) {        writeRowToBackup(key,packScreen(cursor),data);      } else {        if (VERBOSE)         Log.v(TAG,"screen already backup up " + id);      }    }  }  finally {    cursor.close();  }}  }
class C{  int compile(List<String> opts,File... files){  List<String> args=new ArrayList<String>();  args.addAll(opts);  for (  File f : files)   args.add(f.getPath());  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  int rc=com.sun.tools.javac.Main.compile(args.toArray(new String[args.size()]),pw);  pw.close();  String out=sw.toString();  if (out.length() > 0)   System.err.println(out);  return rc;}  }
class C{  public Alias searchRouting(String searchRouting){  this.searchRouting=searchRouting;  return this;}  }
class C{  private K lowestKey(){  ConcurrentSkipListMap.Node<K,V> n=loNode();  if (isBeforeEnd(n))   return n.key; else   throw new NoSuchElementException();}  }
class C{  public static Project queryFullCopySourceProject(BlockObject fcSourceObj,DbClient dbClient){  URI fcSourceURI=fcSourceObj.getId();  URI projectURI=null;  if (URIUtil.isType(fcSourceURI,Volume.class)) {    projectURI=((Volume)fcSourceObj).getProject().getURI();  } else   if (URIUtil.isType(fcSourceURI,BlockSnapshot.class)) {    projectURI=((BlockSnapshot)fcSourceObj).getProject().getURI();  }  if (projectURI == null) {    throw APIException.badRequests.invalidFullCopySource(fcSourceURI.toString());  }  Project project=dbClient.queryObject(Project.class,projectURI);  return project;}  }
class C{  protected String generatePassword(){  return generatePassword(getTenantId());}  }
class C{  public boolean turnLayerOn(boolean setting,Layer layer){  if ((setting && !layer.isVisible()) || (!setting && layer.isVisible())) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("turning " + layer.getName() + (setting ? " on" : " off"));    }    layer.setVisible(setting);    List<Layer> newList=layerConfigListeners.checkLayerConfiguration(getLayerList());    if (newList != null) {      allLayers=organizeBackgroundLayers(newList);    }    getListeners().pushLayerEvent(LayerEvent.REPLACE,getMapLayers());    return true;  }  return false;}  }
class C{  private static TaskOptions makeTaskOptions(String queue,String name,String gcsBucket,ImmutableSet<String> kinds){  String hostname=modulesService.getVersionHostname("default",DATASTORE_ADMIN_VERSION_NAME);  TaskOptions options=TaskOptions.Builder.withUrl("/_ah/datastore_admin/backup.create").header("Host",hostname).method(Method.GET).param("name",name + "_").param("filesystem","gs").param("gs_bucket_name",gcsBucket).param("queue",queue);  for (  String kind : kinds) {    options.param("kind",kind);  }  return options;}  }
class C{  public UpgradeSettingsClusterStateUpdateRequest versions(Map<String,Tuple<Version,String>> versions){  this.versions=versions;  return this;}  }
class C{  public NukkitPlayer wrapPlayer(Player player){  checkNotNull(player);  return new NukkitPlayer(platform,player);}  }
class C{  public static MasterPrivateKey createNew(){  PrivateKey key=PrivateKey.createNew(true);  byte[] chainCode=new byte[32];  rnd.nextBytes(chainCode);  return new MasterPrivateKey(key,chainCode,0,0,0);}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  public BinaryTable(Object[] o) throws FitsException {  this.heap=new FitsHeap(0);  for (  Object element : o) {    addColumn(element);  }  createTable();}  }
class C{  public static IUser addUser(final SQLProvider provider,final String userName) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00081: provider argument can not be null");  Preconditions.checkNotNull(userName,"IE00087: userName argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final String query="INSERT INTO " + CTableNames.USER_TABLE + " VALUES (DEFAULT, ?, null, null) RETURNING user_id;";  CUser user=null;  try (PreparedStatement statement=connection.prepareStatement(query)){    statement.setString(1,userName);    ResultSet resultSet=statement.executeQuery();    while (resultSet.next()) {      user=new CUser(resultSet.getInt(1),userName);    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }  return user;}  }
class C{  public NoSuchClassError(String className,Error cause){  super(cause.toString(),cause);  this.className=className;}  }
class C{  public void addConfiguredLSEnvironment(LSEnvironment lsEnvironment) throws BuildException {  String name=lsEnvironment.getName();  String value=lsEnvironment.getValue();  if ((name == null) || (value == null))   throw new BuildException("'<lsenvironment>' must have both 'name' and 'value' attibutes");  bundleProperties.addLSEnvironment(name,value);}  }
class C{  public int findTokenStart(CharSequence text,int cursor){  int i=cursor;  char c;  while (i > 0 && (c=text.charAt(i - 1)) != ',' && c != ';') {    i--;  }  while (i < cursor && text.charAt(i) == ' ') {    i++;  }  return i;}  }
class C{  public void reset(){  cache.clear();  cacheStart=0;  length=0L;}  }
class C{  public static VOPricedEvent findPricedEvent(List<VOPricedEvent> list,VOEventDefinition event){  if (list == null || event == null) {    return null;  }  for (  VOPricedEvent pricedEvent : list) {    if (pricedEvent.getEventDefinition().getKey() == event.getKey()) {      return pricedEvent;    }  }  return null;}  }
class C{  protected SeqBlas(){}  }
class C{  private long readFreqFromFile(String fileName){  long number=0;  try {    BufferedReader reader=new BufferedReader(new FileReader(fileName));    try {      String line=reader.readLine();      number=parseLong(line);    }  finally {      reader.close();    }  } catch (  FileNotFoundException e) {  }catch (  IOException e) {  }  return number;}  }
class C{  protected Node newNode(){  return new SVGOMFESpecularLightingElement();}  }
class C{  private void fireScrollSync(ScrollListener[] array,int l,int t,int oldl,int oldt){  int alen=array.length;  for (int iter=0; iter < alen; iter++) {    array[iter].scrollChanged(l,t,oldl,oldt);  }}  }
class C{  public static boolean isMonitorNotify(String methodName,String methodSig){  return ("notify".equals(methodName) || "notifyAll".equals(methodName)) && "()V".equals(methodSig);}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  protected void buildRelationTableDefinition(ManagedClass managedClass,Attribute managedAttribute,LinkedList<Entity> intrinsicEntity,LinkedList<Attribute> intrinsicAttribute,boolean isInherited,ForeignReferenceMapping mapping,RelationTableMechanism relationTableMechanism,DatabaseField listOrderField,ContainerPolicy cp){  TableDefinition table=getTableDefFromDBTable(managedClass,managedAttribute,intrinsicEntity,relationTableMechanism.getRelationTable());  List<DatabaseField> srcFkFields=relationTableMechanism.getSourceRelationKeyFields();  List<DatabaseField> srcKeyFields=relationTableMechanism.getSourceKeyFields();  buildRelationTableFields(managedClass,managedAttribute,intrinsicEntity,intrinsicAttribute,false,isInherited,mapping,table,srcFkFields,srcKeyFields);  List<DatabaseField> targFkFields=relationTableMechanism.getTargetRelationKeyFields();  List<DatabaseField> targKeyFields=relationTableMechanism.getTargetKeyFields();  buildRelationTableFields(managedClass,managedAttribute,intrinsicEntity,intrinsicAttribute,true,isInherited,mapping,table,targFkFields,targKeyFields);  if (cp != null) {    addFieldsForMappedKeyMapContainerPolicy(managedClass,managedAttribute,intrinsicEntity,intrinsicAttribute,isInherited,cp,table);  }  if (listOrderField != null) {    FieldDefinition fieldDef=getFieldDefFromDBField(listOrderField);    if (!table.getFields().contains(fieldDef)) {      table.addField(fieldDef);    }  }}  }
class C{  public SpatialPointLeafEntry(DBID id,double[] values){  super(id);  this.values=values;}  }
class C{  public static ArchivePerms createArchivePerms(){  return new ArchivePermsImpl();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public Name(byte[] encoding) throws IOException {  DerInputStream in=new DerInputStream(encoding);  if (in.getEndOffset() != encoding.length) {    throw new IOException("Wrong content length");  }  ASN1.decode(in);  this.rdn=(List<List<AttributeTypeAndValue>>)in.content;}  }
class C{  static GridView makeGV(Context top,CardGroup a,int n){  GridView gv=new GridView(top);  gv.setAdapter(a);  gv.setNumColumns(n);  if (n == 1) {    gv.setColumnWidth((int)top.getResources().getDimension(R.dimen.cardWidth));    gv.setStretchMode(GridView.NO_STRETCH);  } else {    gv.setStretchMode(GridView.STRETCH_COLUMN_WIDTH);  }  return gv;}  }
class C{  @SuppressWarnings("UnusedAssignment") public static void mailMsg(boolean bUI,String cTo,final String cCc,final String cBcc,final String cSubject,final String cMsg){  System.out.println("mailMsg(boolean bUI, String cTo)");  if (cTo != null && !cTo.isEmpty()) {    if (java.awt.Desktop.isDesktopSupported() && java.awt.Desktop.getDesktop().isSupported(Desktop.Action.MAIL)) {      try {        cTo=cTo.replace(';',',');        String uriString="mailto:" + cTo;        boolean addedExtras=false;        if (cCc != null && !cCc.isEmpty()) {          addedExtras=true;          uriString+="?";          uriString+="cc=" + cCc.replace(';',',');        }        if (cBcc != null && !cBcc.isEmpty()) {          if (!addedExtras) {            addedExtras=true;            uriString+="?";          } else {            uriString+="&";          }          uriString+="bcc=" + cBcc.replace(';',',');        }        if (cSubject != null && !cSubject.isEmpty()) {          if (!addedExtras) {            addedExtras=true;            uriString+="?";          } else {            uriString+="&";          }          uriString+="subject=" + cSubject.replace(" ","%20");        }        if (cMsg != null && !cMsg.isEmpty()) {          if (!addedExtras) {            uriString+="?";          } else {            uriString+="&";          }          uriString+="body=" + cMsg.replace(" ","%20");        }        final java.net.URI uri=java.net.URI.create(uriString);        Desktop.getDesktop().mail(uri);      } catch (      final IOException e) {        e.printStackTrace();      }    } else {      alert("Emailing is not supported on your platform.");    }  }}  }
class C{  public PopupMenuSpiderURLAsUser(String label){  super(label,Constant.messages.getString("attack.site.popup"));  this.setIcon(new ImageIcon(PopupMenuSpiderURLAsUser.class.getResource("/resource/icon/16/spider.png")));}  }
class C{  public Trigger(Date date){  setDate(date);}  }
class C{  @Override public Object deserialize(JsonParser jp,DeserializationContext ctxt,Object bean) throws IOException, JsonProcessingException {  if (_injectables != null) {    injectValues(ctxt,bean);  }  if (_unwrappedPropertyHandler != null) {    return deserializeWithUnwrapped(jp,ctxt,bean);  }  if (_externalTypeIdHandler != null) {    return deserializeWithExternalTypeId(jp,ctxt,bean);  }  JsonToken t=jp.getCurrentToken();  if (t == JsonToken.START_OBJECT) {    t=jp.nextToken();  }  for (; t == JsonToken.FIELD_NAME; t=jp.nextToken()) {    String propName=jp.getCurrentName();    jp.nextToken();    SettableBeanProperty prop=_beanProperties.find(propName);    if (prop != null) {      try {        prop.deserializeAndSet(jp,ctxt,bean);      } catch (      Exception e) {        wrapAndThrow(e,bean,propName,ctxt);      }      continue;    }    if (_ignorableProps != null && _ignorableProps.contains(propName)) {      jp.skipChildren();    } else     if (_anySetter != null) {      _anySetter.deserializeAndSet(jp,ctxt,bean,propName);      continue;    } else {      handleUnknownProperty(jp,ctxt,bean,propName);    }  }  return bean;}  }
class C{  static boolean shiftRight(int[] result,int resultLen,int[] source,int intCount,int count){  int i;  boolean allZero=true;  for (i=0; i < intCount; i++)   allZero&=source[i] == 0;  if (count == 0) {    System.arraycopy(source,intCount,result,0,resultLen);    i=resultLen;  } else {    int leftShiftCount=32 - count;    allZero&=(source[i] << leftShiftCount) == 0;    for (i=0; i < resultLen - 1; i++) {      result[i]=(source[i + intCount] >>> count) | (source[i + intCount + 1] << leftShiftCount);    }    result[i]=(source[i + intCount] >>> count);    i++;  }  return allZero;}  }
class C{  boolean contains(int v){  if (isTOP())   return true;  if (v == GlobalValueNumberState.UNKNOWN)   return false;  for (int i=0; i < size; i++) {    if (numbers[i] == v) {      return true;    }  }  return false;}  }
class C{  public synchronized KafkaServer startup(){  if (server != null)   throw new IllegalStateException("" + this + " is already running");  Properties config=config();  if (logsDir == null) {    try {      File temp=File.createTempFile("kafka","suffix");      this.logsDir=temp.getParentFile();      temp.delete();    } catch (    IOException e) {      throw new RuntimeException("Unable to create temporary directory",e);    }  }  config.setProperty(KafkaConfig.LogDirProp(),logsDir.getAbsolutePath());  port=desiredPort > 0 ? desiredPort : IoUtil.getAvailablePort();  config.setProperty(KafkaConfig.PortProp(),Integer.toString(port));  try {    LOGGER.debug("Starting Kafka broker {} at {} with storage in {}",brokerId,getConnection(),logsDir.getAbsolutePath());    server=new kafka.server.KafkaServer(new KafkaConfig(config),new SystemTime(),scala.Option.apply(null));    server.startup();    LOGGER.info("Started Kafka server {} at {} with storage in {}",brokerId,getConnection(),logsDir.getAbsolutePath());    return this;  } catch (  RuntimeException e) {    server=null;    throw e;  }}  }
class C{  public NotificationChain basicSetDeclaredThisType(TypeRef newDeclaredThisType,NotificationChain msgs){  TypeRef oldDeclaredThisType=declaredThisType;  declaredThisType=newDeclaredThisType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_THIS_TYPE,oldDeclaredThisType,newDeclaredThisType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void clearAreas(){  areas.clear();  fireUpdateEvent(SECTION_EVENT);}  }
class C{  public String toString(){  return "MultiMap #" + m_keys.size();}  }
class C{  public <B>ReaderTSeq<T,B> flatMapT(final Function<? super R,ReaderTSeq<T,B>> mapper){  return of(run.bind(null));}  }
class C{  public void addInsn(Insn insn){  insns.addElement(insn);}  }
class C{  protected void configureCoreUI(){  GinMultibinder<PreferencePagePresenter> prefBinder=GinMultibinder.newSetBinder(binder(),PreferencePagePresenter.class);  prefBinder.addBinding().to(AppearancePresenter.class);  prefBinder.addBinding().to(ExtensionManagerPresenter.class);  GinMultibinder<Theme> themeBinder=GinMultibinder.newSetBinder(binder(),Theme.class);  themeBinder.addBinding().to(DarkTheme.class);  bind(PartStackUIResources.class).to(Resources.class).in(Singleton.class);  bind(WorkspaceView.class).to(WorkspaceViewImpl.class).in(Singleton.class);  bind(WorkBenchView.class).to(WorkBenchViewImpl.class).in(Singleton.class);  bind(MainMenuView.class).to(MainMenuViewImpl.class).in(Singleton.class);  bind(StatusPanelGroupView.class).to(StatusPanelGroupViewImpl.class).in(Singleton.class);  bind(ToolbarView.class).to(ToolbarViewImpl.class);  bind(ToolbarPresenter.class).annotatedWith(MainToolbar.class).to(ToolbarPresenter.class).in(Singleton.class);  install(new GinFactoryModuleBuilder().implement(DropDownHeaderWidget.class,DropDownHeaderWidgetImpl.class).build(DropDownListFactory.class));  bind(NotificationManagerView.class).to(NotificationManagerViewImpl.class).in(Singleton.class);  bind(EditorPartStackView.class);  bind(ProjectExplorerView.class).to(ProjectExplorerViewImpl.class).in(Singleton.class);  bind(SettingsProvider.class).to(DummySettingsProvider.class).in(Singleton.class);  bind(ConsolePartView.class).to(ConsolePartViewImpl.class).in(Singleton.class);  bind(MessageDialogFooter.class);  bind(MessageDialogView.class).to(MessageDialogViewImpl.class);  bind(ConfirmDialogFooter.class);  bind(ConfirmDialogView.class).to(ConfirmDialogViewImpl.class);  bind(ChoiceDialogFooter.class);  bind(ChoiceDialogView.class).to(ChoiceDialogViewImpl.class);  bind(InputDialogFooter.class);  bind(InputDialogView.class).to(InputDialogViewImpl.class);  install(new GinFactoryModuleBuilder().implement(MessageDialog.class,MessageDialogPresenter.class).implement(ConfirmDialog.class,ConfirmDialogPresenter.class).implement(InputDialog.class,InputDialogPresenter.class).implement(ChoiceDialog.class,ChoiceDialogPresenter.class).build(DialogFactory.class));  install(new GinFactoryModuleBuilder().implement(ConsoleButton.class,ConsoleButtonImpl.class).build(ConsoleButtonFactory.class));  bind(ProjectProblemDialogView.class).to(ProjectProblemDialogViewImpl.class);  bind(OpenProjectView.class).to(OpenProjectViewImpl.class);  bind(UploadFileView.class).to(UploadFileViewImpl.class);  bind(UploadFolderFromZipView.class).to(UploadFolderFromZipViewImpl.class);  bind(PreferencesView.class).to(PreferencesViewImpl.class).in(Singleton.class);  bind(NavigateToFileView.class).to(NavigateToFileViewImpl.class).in(Singleton.class);  bind(ListOpenedFilesView.class).to(ListOpenedFilesViewImpl.class);  bind(ExtensionManagerView.class).to(ExtensionManagerViewImpl.class).in(Singleton.class);  bind(AppearanceView.class).to(AppearanceViewImpl.class).in(Singleton.class);  bind(FindActionView.class).to(FindActionViewImpl.class).in(Singleton.class);  bind(PrivacyPresenter.class).asEagerSingleton();}  }
class C{  private void expressionHelper(IR ir,AvExCache cache,Instruction inst){  AvailableExpression ae=cache.find(inst);  if (ae != null) {    RegisterOperand dest=ResultCarrier.getClearResult(inst);    if (ae.tmp == null) {      RegisterOperand newRes=ir.regpool.makeTemp(dest.getType());      ae.tmp=newRes.getRegister();      RegisterOperand res=ResultCarrier.getClearResult(ae.inst);      ResultCarrier.setResult(ae.inst,newRes);      ae.inst.insertAfter(Move.create(getMoveOp(res),res,newRes.copyD2U()));      Move.mutate(inst,getMoveOp(dest),dest,newRes.copyD2U());    } else {      RegisterOperand newRes=new RegisterOperand(ae.tmp,dest.getType());      Move.mutate(inst,getMoveOp(dest),dest,newRes);    }  } else {    cache.insert(inst);  }}  }
class C{  private IFile calcViewFile(IPath savePath){  if (null == savePath.getFileExtension()) {    savePath=savePath.addFileExtension(ViewDocument.EXTENSION);  }  return ResourcesPlugin.getWorkspace().getRoot().getFile(savePath);}  }
class C{  protected void cleanup(){  Cache existingCache=basicGetCache();  if (null != existingCache && !existingCache.isClosed()) {    Region region=getCache().getRegion(OFF_HEAP_REGION_NAME);    if (null != region) {      region.destroyRegion();    }  }  disconnectFromDS();}  }
class C{  public final int peepTailSub1(){  return m_map[m_firstFree - 2];}  }
class C{  public MemberType createMemberTypeFromString(EDataType eDataType,String initialValue){  MemberType result=MemberType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public static void addPermission(Path path,PosixFilePermission permission) throws IOException {  Set<PosixFilePermission> perms=Files.getPosixFilePermissions(path);  if (perms.add(permission)) {    Files.setPosixFilePermissions(path,perms);  }}  }
class C{  private InputStream odsFindContentXML(InputStream input){  ZipInputStream zis=new ZipInputStream(input);  ZipEntry entry=null;  try {    while ((entry=zis.getNextEntry()) != null) {      if (entry.getName().equals("content.xml")) {        return zis;      }    }  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public boolean showCameraSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_CAMERA;}  }
class C{  public void testBadCommandLineWithCommand() throws Exception {  doTest();}  }
class C{  protected void onPostGet(HttpResponse httpResponse){}  }
class C{  public void putLiveAttributeValue(String ns,String ln,LiveAttributeValue val){  liveAttributeValues.put(ns,ln,val);}  }
class C{  private void addPluginMenus(final JComponent menu){  final List<IProjectMenuPlugin> plugins=new ArrayList<IProjectMenuPlugin>();  for (  @SuppressWarnings("rawtypes") final IPlugin plugin : PluginInterface.instance().getPluginRegistry()) {    if (plugin instanceof IProjectMenuPlugin) {      plugins.add((IProjectMenuPlugin)plugin);    }  }  if (!plugins.isEmpty()) {    boolean addedSeparator=false;    for (    final IProjectMenuPlugin plugin : plugins) {      try {        final List<JComponent> menuItems=plugin.extendProjectMenu(getPluginProjects());        if (menuItems != null) {          for (          final JComponent menuItem : menuItems) {            if (!addedSeparator) {              menu.add(new JSeparator());              addedSeparator=true;            }            menu.add(menuItem);          }        }      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);        final String innerMessage="E00088: " + "Plugin caused an unexpected exception";        final String innerDescription=CUtilityFunctions.createDescription(String.format("The plugin %s caused an unexpected exception.",plugin.getName()),new String[]{"The plugin contains a bug."},new String[]{"The plugin probably behaves erroneously from this point on but it remains active"});        NaviErrorDialog.show(getParent(),innerMessage,innerDescription,exception);      }    }  }}  }
class C{  private void postPromoteRcc(int rccId){  sendMsg(mAudioHandler,MSG_PROMOTE_RCC,SENDMSG_REPLACE,rccId,0,null,0);}  }
class C{  private boolean nextSearchItemset(BitVector bv,int[] scratchi,int[] iters){  final int last=scratchi.length - 1;  for (int j=last; j >= 0; j--) {    int n=bv.iterAdvance(iters[j]);    if (n >= 0 && (j == last || n != iters[j + 1])) {      iters[j]=n;      scratchi[j]=bv.iterDim(n);      return true;    }  }  return false;}  }
class C{  public void overrideBackbutton(boolean override){  LOG.i("App","WARNING: Back Button Default Behavior will be overridden.  The backbutton event will be fired!");  webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_BACK,override);}  }
class C{  public static SourceLineAnnotation createUnknown(@DottedClassName String className,String sourceFile){  return createUnknown(className,sourceFile,-1,-1);}  }
class C{  public void remove(Component comp){  dockPanel.remove(comp);}  }
class C{  public static Container encloseIn(int columns,Component... cmp){  return Container.encloseIn(new GridLayout(columns),cmp);}  }
class C{  public void testHaversinSortKey(){  for (int i=0; i < 100000; i++) {    double centerLat=GeoTestUtil.nextLatitude();    double centerLon=GeoTestUtil.nextLongitude();    double lat1=GeoTestUtil.nextLatitude();    double lon1=GeoTestUtil.nextLongitude();    double lat2=GeoTestUtil.nextLatitude();    double lon2=GeoTestUtil.nextLongitude();    int expected=Integer.signum(Double.compare(haversinMeters(centerLat,centerLon,lat1,lon1),haversinMeters(centerLat,centerLon,lat2,lon2)));    int actual=Integer.signum(Double.compare(haversinSortKey(centerLat,centerLon,lat1,lon1),haversinSortKey(centerLat,centerLon,lat2,lon2)));    assertEquals(expected,actual);    assertEquals(haversinMeters(centerLat,centerLon,lat1,lon1),haversinMeters(haversinSortKey(centerLat,centerLon,lat1,lon1)),0.0D);    assertEquals(haversinMeters(centerLat,centerLon,lat2,lon2),haversinMeters(haversinSortKey(centerLat,centerLon,lat2,lon2)),0.0D);  }}  }
class C{  public static boolean writeFile(String filePath,InputStream stream){  return writeFile(filePath,stream,false);}  }
class C{  public void addPullToRefresh(Runnable task){  this.refreshTask=task;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public CustomerOrderPaymentServiceImpl(final PaymentModuleGenericDAO<CustomerOrderPayment,Long> genericDao){  super(genericDao);}  }
class C{  private String printList(final List<String> strings){  final StringBuilder sb=new StringBuilder("[");  if (strings != null && !strings.isEmpty()) {    sb.append(strings.get(0));    for (    String string : strings.subList(1,strings.size())) {      sb.append(", ");      sb.append(string);    }  }  sb.append("]");  return sb.toString();}  }
class C{  public boolean align(){  if (0.0 == this.vector[0]) {    return false;  }  this.scale(this.vector[0]);  return true;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  private Boolean updateExistingMatrix(){  final HashMap workflowheaderparams=getSearchParams();  return this.workFlowMatrixService.updateWorkFlowforObject(workflowheaderparams);}  }
class C{  public COpenDatabaseAction(final JTree projectTree,final IDatabase database){  super("Connect to database");  m_projectTree=Preconditions.checkNotNull(projectTree,"IE01907: Project tree argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01908: Database argument can't be null");  putValue(ACCELERATOR_KEY,HotKeys.OPEN_DATABASE_ACCELERATOR_KEY.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_OPEN_DATABASE".charAt(0));}  }
class C{  public boolean hasOrgDepartment(){  return super.hasElement(OrgDepartment.KEY);}  }
class C{  public static StdTypeList make(Type type0,Type type1,Type type2,Type type3){  StdTypeList result=new StdTypeList(4);  result.set(0,type0);  result.set(1,type1);  result.set(2,type2);  result.set(3,type3);  return result;}  }
class C{  public static void addGzipHeader(HttpServletResponse response) throws GzipResponseHeadersNotModifiableException {  response.setHeader("Content-Encoding","gzip");  boolean containsEncoding=response.containsHeader("Content-Encoding");  if (!containsEncoding) {    throw new GzipResponseHeadersNotModifiableException("Failure when attempting to set " + "Content-Encoding: gzip");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PlayerHasRecordedItemWithHimCondition(final String questName){  this.questName=questName;  this.index=-1;}  }
class C{  public void finished(FrameworkMethod method){}  }
class C{  public SparseMultigraph(){  vertices=new HashMap<V,Pair<Set<E>>>();  edges=new HashMap<E,Pair<V>>();  directedEdges=new HashSet<E>();}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public Repositories(String url) throws JAXBException {  _jc=JAXBContext.newInstance("org.jetbrains.idea.maven.services.nexus",getClass().getClassLoader());  _jaxbDispatcher=new JAXBDispatcher(_jc);  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("repositories");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  private X509Certificate[] cleanupCertChainAndFindTrustAnchors(X509Certificate[] chain,Set<TrustAnchor> trustAnchors){  X509Certificate[] original=chain;  int currIndex;  for (currIndex=0; currIndex < chain.length; currIndex++) {    boolean foundNext=false;    for (int nextIndex=currIndex + 1; nextIndex < chain.length; nextIndex++) {      if (chain[currIndex].getIssuerDN().equals(chain[nextIndex].getSubjectDN())) {        foundNext=true;        if (nextIndex != currIndex + 1) {          if (chain == original) {            chain=original.clone();          }          X509Certificate tempCertificate=chain[nextIndex];          chain[nextIndex]=chain[currIndex + 1];          chain[currIndex + 1]=tempCertificate;        }        break;      }    }    if (!foundNext) {      break;    }  }  int anchorIndex;  for (anchorIndex=0; anchorIndex <= currIndex; anchorIndex++) {    TrustAnchor trustAnchor=findTrustAnchorBySubjectAndPublicKey(chain[anchorIndex]);    if (trustAnchor != null) {      trustAnchors.add(trustAnchor);      break;    }  }  int chainLength=anchorIndex;  X509Certificate[] newChain=((chainLength == chain.length) ? chain : Arrays.copyOf(chain,chainLength));  if (trustAnchors.isEmpty()) {    TrustAnchor trustAnchor=findTrustAnchorByIssuerAndSignature(newChain[anchorIndex - 1]);    if (trustAnchor != null) {      trustAnchors.add(trustAnchor);    }  }  return newChain;}  }
class C{  private EventSetDescriptor[] introspectEvents() throws IntrospectionException {  MethodDescriptor[] theMethods=introspectMethods();  if (theMethods == null)   return null;  HashMap<String,HashMap<Object,Object>> eventTable=new HashMap<String,HashMap<Object,Object>>(theMethods.length);  for (int i=0; i < theMethods.length; i++) {    introspectListenerMethods(PREFIX_ADD,theMethods[i].getMethod(),eventTable);    introspectListenerMethods(PREFIX_REMOVE,theMethods[i].getMethod(),eventTable);    introspectGetListenerMethods(theMethods[i].getMethod(),eventTable);  }  ArrayList<EventSetDescriptor> eventList=new ArrayList<EventSetDescriptor>();  for (  Map.Entry<String,HashMap<Object,Object>> entry : eventTable.entrySet()) {    HashMap<Object,Object> table=entry.getValue();    Method add=(Method)table.get(PREFIX_ADD);    Method remove=(Method)table.get(PREFIX_REMOVE);    if ((add == null) || (remove == null)) {      continue;    }    Method get=(Method)table.get(PREFIX_GET);    Class<?> listenerType=(Class<?>)table.get("listenerType");    Method[] listenerMethods=(Method[])table.get("listenerMethods");    EventSetDescriptor eventSetDescriptor=new EventSetDescriptor(decapitalize(entry.getKey()),listenerType,listenerMethods,add,remove,get);    eventSetDescriptor.setUnicast(table.get("isUnicast") != null);    eventList.add(eventSetDescriptor);  }  EventSetDescriptor[] theEvents=new EventSetDescriptor[eventList.size()];  eventList.toArray(theEvents);  return theEvents;}  }
class C{  public Matrix4d mul(Matrix4f right){  return mul(right,this);}  }
class C{  protected boolean[] declaresSerialVersionUID(){  boolean[] result=new boolean[2];  print("serialVersionUID...");  result[0]=!SerializationHelper.needsUID(m_Clusterer.getClass());  if (result[0]) {    println("yes");  } else {    println("no");  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:01.053 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="BBFCFD2AD6BD270AD38D8FE87FD0572B") protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public void testNoProperties(){  final PlatformDefaultJavaObjectFactory factory=new PlatformDefaultJavaObjectFactory();  factory.initialize(CLS_NAME,Collections.emptyMap());  Object val=factory.create();  assertEquals(val,new TestJavaObject());}  }
class C{  public static final String fetch(final int resID){  if (mRawMaterials.containsKey(resID))   return mRawMaterials.get(resID);  final StringBuilder sb=new StringBuilder();  try {    final Resources res=mContext.get().getResources();    final InputStreamReader isr=new InputStreamReader(res.openRawResource(resID));    final BufferedReader br=new BufferedReader(isr);    String line;    while ((line=br.readLine()) != null)     sb.append(line).append("\n");    mRawMaterials.put(resID,sb.toString());    isr.close();    br.close();  } catch (  Exception e) {    RajLog.e("Failed to read material: " + e.getMessage());    e.printStackTrace();  }  return mRawMaterials.get(resID);}  }
class C{  public String toJSON(boolean prettyPrint) throws JsonGenerationException, JsonMappingException, IOException {  String json=null;  ObjectMapper mapper=new ObjectMapper();  mapper.configure(Feature.INDENT_OUTPUT,true);  mapper.configure(Feature.SORT_PROPERTIES_ALPHABETICALLY,true);  ObjectWriter writer=mapper.writer();  if (prettyPrint)   writer=writer.withDefaultPrettyPrinter();  json=writer.writeValueAsString(this);  return json;}  }
class C{  private Shape decodeMarkInterior(int width,int height){  int left=(width - 3) / 2 - 5;  int top=(height - 2) / 2 - 5;  path.reset();  path.moveTo(left + 1,top + 1);  path.lineTo(left + 4,top + 1);  path.lineTo(left + 5,top + 3);  path.lineTo(left + 7,top + 1);  path.lineTo(left + 10,top + 1);  path.lineTo(left + 7,top + 4);  path.lineTo(left + 7,top + 5);  path.lineTo(left + 10,top + 9);  path.lineTo(left + 6,top + 8);  path.lineTo(left + 5,top + 6);  path.lineTo(left + 4,top + 9);  path.lineTo(left + 0,top + 9);  path.lineTo(left + 4,top + 5);  path.lineTo(left + 4,top + 4);  path.closePath();  return path;}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  protected Node newNode(){  return new SVGOMFlowParaElement();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSION;default :return null;}}  }
class C{  public LZMA2InputStream(InputStream in,int dictSize){  this(in,dictSize,null);}  }
class C{  public static int[] toInts(int val){  int[] ints=new int[4];  for (int i=0; i < 4; i++) {    ints[3 - i]=0xFF & val;    val>>=8;  }  return ints;}  }
class C{  void onCancel(){  onUp();}  }
class C{  private double ARAMm_Update_Weights(SparseArray data,SparseArray labels,int category){  double weightChange=0;  sweightsA[category]=0;  SparseArray s2=weightsA[category].clone();  int count=0;  int[] s1=data.getKeys();  int sit=data.size();  int i=0;  for (int jt=0; jt < sit; jt++) {    i=s1[jt];    double da=data.get(i);    Double wa=(Double)weightsA[category].get(i);    if (wa != null) {      if (da < wa) {        wa=(learningRate * da) + (1 - learningRate) * wa;        if (wa == 0) {          weightsA[category].remove(i);        } else {          weightsA[category].put(i,wa);        }      }      sweightsA[category]+=wa;      s2.remove(i);    }    double dat=1 - da;    int j1=i + snumFeatures;    Double wat=(Double)weightsA[category].get(j1);    if (wat != null) {      wat=1 - wat;      if (dat < wat) {        wat=((learningRate * dat) + (1 - learningRate) * wat);        if (wat == 1) {          weightsA[category].remove(j1);          upweightsA[category].remove(j1);        } else {          weightsA[category].put(j1,1 - wat);          upweightsA[category].put(j1,0.0);          count+=1;        }      } else {        if (wat != 1) {          count+=1;        }      }      sweightsA[category]+=wat;      s2.remove(j1);    } else {      wat=(learningRate * dat);      if (wat == 1) {        weightsA[category].remove(j1);        upweightsA[category].remove(j1);      } else {        weightsA[category].put((Integer)j1,(Double)(1 - wat));        upweightsA[category].put(j1,1.0);        count+=1;      }      sweightsA[category]+=wat;    }  }  s1=s2.getKeys();  sit=s2.size();  for (int jt=0; jt < sit; jt++) {    i=s1[jt];    if (i < snumFeatures) {      try {        weightsA[category].remove(i);        upweightsA[category].remove(i);      } catch (      Exception e) {        e.getClass();      }    } else {      double wat=1 - (Double)weightsA[category].get(i);      sweightsA[category]+=wat;      count+=1;    }  }  sweightsA[category]+=snumFeatures - count;  s1=labels.getKeys();  sit=labels.size();  for (int jt=0; jt < sit; jt++) {    i=s1[jt];    double lb=labels.get(i);    Double wb=(Double)weightsB[category].get(i);    if (wb != null) {      if (weightblearnmethod == 0) {        weightsB[category].put(i,lb + wb);        weightChange=1;      } else {        if (lb < wb) {          weightsB[category].put(i,(learningRate * lb) + (1 - learningRate) * wb);          weightChange=1;        }      }    }  }  return weightChange;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"shrd");  if (instruction.getOperands().size() != 3) {    throw new InternalTranslationException("Error: Argument instruction is not a shrd instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,operands.get(0),true);  instructions.addAll(firstResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult secondResult=Helpers.translateOperand(environment,offset,operands.get(1),true);  instructions.addAll(secondResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult thirdResult=Helpers.translateOperand(environment,offset,operands.get(2),true);  instructions.addAll(thirdResult.getInstructions());  final String truncatedShiftValue=environment.getNextVariableString();  final String truncatedShiftValueZero=environment.getNextVariableString();  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createAnd(offset++,thirdResult.getSize(),thirdResult.getRegister(),OperandSize.BYTE,"31",OperandSize.BYTE,truncatedShiftValue));  instructions.add(ReilHelpers.createBisz(offset++,OperandSize.BYTE,truncatedShiftValue,OperandSize.BYTE,truncatedShiftValueZero));  final int jumpInsertIndex1=(int)(offset - baseOffset);  offset++;  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.AUXILIARY_FLAG));  final String sizeSubtractionResult=environment.getNextVariableString();  final String sizeMaskingResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,String.valueOf(firstResult.getSize().getBitSize()),OperandSize.BYTE,truncatedShiftValue,OperandSize.WORD,sizeSubtractionResult));  instructions.add(ReilHelpers.createAnd(offset++,OperandSize.WORD,sizeSubtractionResult,OperandSize.WORD,String.valueOf(0x8000),OperandSize.WORD,sizeMaskingResult));  final int jumpInsertIndex2=(int)(offset - baseOffset);  offset++;  final String shiftedSecondInput=environment.getNextVariableString();  final String shiftMask=String.valueOf(firstResult.getSize().getBitSize());  final OperandSize combinedSize=TranslationHelpers.getNextSize(firstResult.getSize());  final OperandSize extendedSize=TranslationHelpers.getNextSize(combinedSize);  final String combinedSource=environment.getNextVariableString();  final String shiftedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createBsh(offset++,secondResult.getSize(),secondResult.getRegister(),secondResult.getSize(),shiftMask,combinedSize,shiftedSecondInput));  instructions.add(ReilHelpers.createOr(offset++,combinedSize,shiftedSecondInput,firstResult.getSize(),firstResult.getRegister(),combinedSize,combinedSource));  final String negatedShiftMask=environment.getNextVariableString();  final String truncatedNegatedShiftMask=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,"0",OperandSize.BYTE,truncatedShiftValue,OperandSize.WORD,negatedShiftMask));  instructions.add(ReilHelpers.createAnd(offset++,OperandSize.WORD,negatedShiftMask,OperandSize.BYTE,"255",OperandSize.BYTE,truncatedNegatedShiftMask));  final String incShiftMaskNeg=environment.getNextVariableString();  final String decResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAdd(offset++,OperandSize.BYTE,truncatedNegatedShiftMask,OperandSize.BYTE,"1",OperandSize.WORD,incShiftMaskNeg));  instructions.add(ReilHelpers.createBsh(offset++,combinedSize,combinedSource,OperandSize.WORD,incShiftMaskNeg,combinedSize,decResult));  instructions.add(ReilHelpers.createAnd(offset++,combinedSize,decResult,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createBsh(offset++,combinedSize,combinedSource,OperandSize.BYTE,truncatedNegatedShiftMask,extendedSize,shiftedResult));  final String isolationMask=getAllButMask(combinedSize,firstResult.getSize());  final String isolationResult=environment.getNextVariableString();  final String shiftedIsolationResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset++,extendedSize,shiftedResult,combinedSize,isolationMask,combinedSize,isolationResult));  instructions.add(ReilHelpers.createBsh(offset++,combinedSize,isolationResult,OperandSize.BYTE,"-" + shiftMask,firstResult.getSize(),shiftedIsolationResult));  instructions.add(ReilHelpers.createBisz(offset++,firstResult.getSize(),shiftedIsolationResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.generateSignFlagCode(environment,offset,shiftedIsolationResult,firstResult.getSize(),instructions);  offset=baseOffset + instructions.size() + 2;  final String tempInput=environment.getNextVariableString();  instructions.add(ReilHelpers.createStr(offset++,firstResult.getSize(),firstResult.getRegister(),firstResult.getSize(),tempInput));  Helpers.writeBack(environment,offset,operands.get(0),shiftedIsolationResult,firstResult.getSize(),firstResult.getAddress(),firstResult.getType(),instructions);  offset=baseOffset + instructions.size() + 2;  final String shiftValueOne=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,truncatedShiftValue,OperandSize.BYTE,"1",OperandSize.WORD,shiftValueOne));  final int jumpInsertIndex3=(int)(offset - baseOffset);  offset++;  final String xoredMsb=environment.getNextVariableString();  final String maskedMsb=environment.getNextVariableString();  final long msbMask=TranslationHelpers.getMsbMask(firstResult.getSize());  final long msbShift=TranslationHelpers.getShiftMsbLsbMask(firstResult.getSize());  instructions.add(ReilHelpers.createXor(offset++,firstResult.getSize(),tempInput,firstResult.getSize(),shiftedIsolationResult,firstResult.getSize(),xoredMsb));  instructions.add(ReilHelpers.createAnd(offset++,firstResult.getSize(),xoredMsb,OperandSize.BYTE,String.valueOf(msbMask),OperandSize.BYTE,maskedMsb));  instructions.add(ReilHelpers.createBsh(offset++,firstResult.getSize(),maskedMsb,OperandSize.BYTE,String.valueOf(msbShift),OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final int jumpInsertIndex4=(int)(offset - baseOffset);  offset++;  final String largeValueHandler=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);  final IOperandTree inputOperand=operands.get(0);  if (firstResult.getType() == TranslationResultType.REGISTER) {    final String operand=Helpers.getLeafValue(inputOperand.getRootNode());    final String undefRegister=Helpers.getOperandSize(inputOperand) == environment.getArchitectureSize() ? operand : Helpers.getParentRegister(operand);    instructions.add(ReilHelpers.createUndef(offset++,environment.getArchitectureSize(),undefRegister));  }  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.ZERO_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.PARITY_FLAG));  final String notOneHandler=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String jmpGoalEnd=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);  instructions.add(ReilHelpers.createNop(offset++));  instructions.add(jumpInsertIndex1,ReilHelpers.createJcc(baseOffset + jumpInsertIndex1,OperandSize.BYTE,truncatedShiftValueZero,OperandSize.ADDRESS,jmpGoalEnd));  instructions.add(jumpInsertIndex2,ReilHelpers.createJcc(baseOffset + jumpInsertIndex2,OperandSize.WORD,sizeMaskingResult,OperandSize.ADDRESS,largeValueHandler));  instructions.add(jumpInsertIndex3,ReilHelpers.createJcc(baseOffset + jumpInsertIndex3,OperandSize.WORD,shiftValueOne,OperandSize.ADDRESS,notOneHandler));  instructions.add(jumpInsertIndex4,ReilHelpers.createJcc(baseOffset + jumpInsertIndex4,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoalEnd));}  }
class C{  public QDate(){  this(_gmtTimeZone);}  }
class C{  public boolean isAsync(){  return false;}  }
class C{  private ReilTranslator(){}  }
class C{  public Shape createCheckMark(final int x,final int y,final int w,final int h){  double xf=w / 12.0;  double hf=h / 12.0;  path.reset();  path.moveTo(x,y + 7.0 * hf);  path.lineTo(x + 2.0 * xf,y + 7.0 * hf);  path.lineTo(x + 4.75 * xf,y + 10.0 * hf);  path.lineTo(x + 9.0 * xf,y);  path.lineTo(x + 11.0 * xf,y);  path.lineTo(x + 5.0 * xf,y + 12.0 * hf);  path.closePath();  return path;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tWhether to use K2 prior.\n","k2",0,"-k2"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public SNDefVisualPanel2(String type){  initComponents();  this.type=type;  titleLabel.setText(type);  varTable.getColumnModel().getSelectionModel().addListSelectionListener(new ExploreSelectionListener());}  }
class C{  private static void swap(int x[],int a,int b){  int t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,boolean value){  if (extras == null) {    extras=new Bundle();  }  extras.putBoolean(name,value);  return this;}  }
class C{  int pturbX(double xvalP,double xj){  int xpturb=0;  if (m_JitterVal > 0) {    xpturb=(int)(m_JitterVal * (xj / 2.0));    if (((xvalP + xpturb) < m_XaxisStart) || ((xvalP + xpturb) > m_XaxisEnd)) {      xpturb*=-1;    }  }  return xpturb;}  }
class C{  public static String byteArrayToHexString(final byte in[]){  final String pseudo[]={"0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"};  if (in == null || in.length <= 0) {    return "";  }  final StringBuilder out=new StringBuilder(in.length * 2);  for (  final byte b : in) {    byte ch=(byte)(b & 0xF0);    ch=(byte)(ch >>> 4);    ch=(byte)(ch & 0x0F);    out.append(pseudo[(int)ch]);    ch=(byte)(b & 0x0F);    out.append(pseudo[(int)ch]);  }  return out.toString();}  }
class C{  private void logGraphicalBufferOccupancy(float bufferOccupancy){  String title="Buffer";  int used=(int)(bufferOccupancy * WIDTH);  StringBuilder sb=new StringBuilder();  sb.append(START_END_CHAR);  sb.append('-');  sb.append(title);  for (int i=title.length() + 1; i < WIDTH; i++) {    sb.append('-');  }  sb.append(START_END_CHAR);  log.info(sb.toString());  sb=new StringBuilder();  sb.append(START_END_CHAR);  for (int i=0; i < used; i++) {    sb.append('/');  }  for (int j=used; j < WIDTH; j++) {    sb.append(' ');  }  sb.append(START_END_CHAR);  log.info(sb.toString());  sb=new StringBuilder();  sb.append(START_END_CHAR);  for (int i=0; i < WIDTH; i++) {    sb.append('-');  }  sb.append(START_END_CHAR);  log.info(sb.toString());}  }
class C{  private String diff_linesToCharsMunge(String text,List<String> lineArray,Map<String,Integer> lineHash){  int lineStart=0;  int lineEnd=-1;  String line;  StringBuilder chars=new StringBuilder();  while (lineEnd < text.length() - 1) {    lineEnd=text.indexOf('\n',lineStart);    if (lineEnd == -1) {      lineEnd=text.length() - 1;    }    line=text.substring(lineStart,lineEnd + 1);    lineStart=lineEnd + 1;    if (lineHash.containsKey(line)) {      chars.append(String.valueOf((char)(int)lineHash.get(line)));    } else {      lineArray.add(line);      lineHash.put(line,lineArray.size() - 1);      chars.append(String.valueOf((char)(lineArray.size() - 1)));    }  }  return chars.toString();}  }
class C{  public boolean isValueDisplayed(){  Object oo=get_Value(COLUMNNAME_IsValueDisplayed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void merge(AttributeMetadataRegistryBuilder other){  for (  Map.Entry<TransformKey,AttributeCreatorImpl> entry : other.creators.entrySet()) {    TransformKey key=entry.getKey();    AttributeCreatorImpl creator=creators.get(key);    if (creator == null) {      creator=new AttributeCreatorImpl(root,key);      creators.put(key,creator);    }    creator.merge(entry.getValue());  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Deprecated public <T>List<T> readObjectCollection(byte[] data,Class<T> clazz){  return readDocumentCollection(data,clazz).get();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (majorVersion < 0) {    throw new IllegalStateException();  }  if (minorVersion < 0) {    throw new IllegalStateException();  }  if (minorSubversion < 0) {    throw new IllegalStateException();  }  if (incrementalRelease < 0) {    throw new IllegalStateException();  }}  }
class C{  public void remove(Individual individual){  individuals.remove(individual);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public Builder<K> queue(K queue){  this.queue=queue;  return this;}  }
class C{  public boolean isIterable(){  if (fType == UNKNOWN && (fChecked & ITERABLE) == 0 && isSubtypeOf("java.lang.Iterable"))   fType=ITERABLE;  fChecked|=ITERABLE;  return fType == ITERABLE || fType == COLLECTION;}  }
class C{  private static String addKey(List<Optional<AccountSshKey>> keys,String pub){  AccountSshKey.Id keyId=new AccountSshKey.Id(new Account.Id(1),keys.size() + 1);  AccountSshKey key=new AccountSshKey(keyId,pub);  keys.add(Optional.of(key));  return key.getSshPublicKey() + "\n";}  }
class C{  public void enableLoop(){  if (!mLoop) {    mMANativeHelper.setGeneratePreview(true);    mLoop=true;  }}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=processTypeDAO.totalRows();    List<com.wipro.ats.bdre.md.dao.jpa.ProcessType> jpaProcessTypes=processTypeDAO.listFull(startPage,pageSize);    List<ProcessType> processTypes=new ArrayList<ProcessType>();    for (    com.wipro.ats.bdre.md.dao.jpa.ProcessType processType : jpaProcessTypes) {      ProcessType returnProcessType=new ProcessType();      returnProcessType.setProcessTypeId(processType.getProcessTypeId());      returnProcessType.setParentProcessTypeId(processType.getParentProcessTypeId());      returnProcessType.setProcessTypeName(processType.getProcessTypeName());      returnProcessType.setCounter(counter);      processTypes.add(returnProcessType);    }    restWrapper=new RestWrapper(processTypes,RestWrapper.OK);    LOGGER.info("All records listed from ProcessType by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private void handleColorButtonClick(int idx){  listener.onColorButtonClick(idx);}  }
class C{  public static void writeProteinBestMatchesToFile(String filePath,Map<String,PIRSFHmmer2RawMatch> proteinIdBestMatchMap) throws IOException {  BufferedWriter writer=null;  try {    File file=createTmpFile(filePath);    if (!file.exists()) {      throw new IllegalStateException("Could not create file: " + filePath);    }    writer=new BufferedWriter(new FileWriter(file));    for (    String proteinId : proteinIdBestMatchMap.keySet()) {      PIRSFHmmer2RawMatch bestMatch=proteinIdBestMatchMap.get(proteinId);      if (bestMatch != null) {        writer.write(proteinId);        writer.write('-');        writer.write(bestMatch.getModelId());        writer.write(',');        writer.write(bestMatch.getSignatureLibraryRelease());        writer.write(',');        writer.write(String.valueOf(bestMatch.getLocationStart()));        writer.write(',');        writer.write(String.valueOf(bestMatch.getLocationEnd()));        writer.write(',');        writer.write(String.valueOf(bestMatch.getEvalue()));        writer.write(',');        writer.write(String.valueOf(bestMatch.getScore()));        writer.write(',');        writer.write(String.valueOf(bestMatch.getHmmStart()));        writer.write(',');        writer.write(String.valueOf(bestMatch.getHmmEnd()));        writer.write(',');        writer.write(bestMatch.getHmmBounds());        writer.write(',');        writer.write(String.valueOf(bestMatch.getLocationEvalue()));        writer.write(',');        writer.write(String.valueOf(bestMatch.getLocationScore()));        writer.write('\n');      }    }  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.MULTIPLICATIVE_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static double cs_norm(Dcs A){  int p, j, n, Ap[];  double Ax[], norm=0, s;  if (!Dcs_util.CS_CSC(A) || A.x == null)   return (-1);  n=A.n;  Ap=A.p;  Ax=A.x;  for (j=0; j < n; j++) {    for (s=0, p=Ap[j]; p < Ap[j + 1]; p++)     s+=Math.abs(Ax[p]);    norm=Math.max(norm,s);  }  return (norm);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  List tiposDocumentosVitales=(List)request.getAttribute(DocumentosVitalesConstants.TIPOS_DOCUMENTOS_VITALES_KEY);  if (ArrayUtils.isEmpty(tiposDocumentos) && tiposDocumentosVitales != null && tiposDocumentosVitales.size() > 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DocumentosVitalesConstants.LABEL_DOCVITALES_DOCVITAL_TIPO_DOCUMENTO,request.getLocale())));  }  if (ArrayUtils.isEmpty(estados)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DocumentosVitalesConstants.LABEL_DOCVITALES_DOCVITAL_ESTADO,request.getLocale())));  }  if (!new CustomDate(this.fechaCaducidadFormato,this.fechaCaducidadA,this.fechaCaducidadM,this.fechaCaducidadD,null).validate() || !new CustomDate(this.fechaCaducidadIniFormato,this.fechaCaducidadIniA,this.fechaCaducidadIniM,this.fechaCaducidadIniD,null).validate() || !new CustomDate(this.fechaCaducidadFinFormato,this.fechaCaducidadFinA,this.fechaCaducidadFinM,this.fechaCaducidadFinD,null).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(DocumentosVitalesConstants.LABEL_DOCVITALES_DOCVITAL_FECHA_CADUCIDAD,request.getLocale())));  }  if (!new CustomDate(this.fechaUltimoAccesoFormato,this.fechaUltimoAccesoA,this.fechaUltimoAccesoM,this.fechaUltimoAccesoD,null).validate() || !new CustomDate(this.fechaUltimoAccesoIniFormato,this.fechaUltimoAccesoIniA,this.fechaUltimoAccesoIniM,this.fechaUltimoAccesoIniD,null).validate() || !new CustomDate(this.fechaUltimoAccesoFinFormato,this.fechaUltimoAccesoFinA,this.fechaUltimoAccesoFinM,this.fechaUltimoAccesoFinD,null).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(DocumentosVitalesConstants.LABEL_DOCVITALES_DOCVITAL_FECHA_ULTIMO_ACCESO,request.getLocale())));  }  return errors;}  }
class C{  public final boolean isMissingValue(Object value){  if (value instanceof Integer) {    Integer ivalue=(Integer)value;    return ivalue == MISSING_VALUE;  } else   if (value instanceof String) {    return MISSING_VALUE_STRING.equals(value);  }  return false;}  }
class C{  public String encryptPassword(){  String nonce=getNonce();  String timestamp=getUTCTime();  String beforeEncryption=nonce + timestamp + password;  byte[] encryptedRaw;  try {    encryptedRaw=sha1(beforeEncryption);  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();    return null;  }  String encoded=Base64.encodeBase64String(encryptedRaw);  return encoded;}  }
class C{  public NumberUpSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 1) {    throw new IllegalArgumentException("Number up value must be > 0");  }}  }
class C{  public void put(String key,boolean b){  put(key,b ? TemplateBooleanModel.TRUE : TemplateBooleanModel.FALSE);}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public Set<AccessRight> applyAccessRights(AppContext ctx,Set<AccessRight> accessRights,Set<AccessRight> newAccessRights){  Set<AccessRight> rightsToAdd=new HashSet<AccessRight>();  Set<AccessRight> rightsToRemove=new HashSet<AccessRight>();  Set<AccessRight> rights=new HashSet<AccessRight>(accessRights);  User user=ctx.getUser();  for (  AccessRight newRight : newAccessRights) {    if (!accessRights.contains(newRight)) {      if (hasRole(user,newAccessRights,newRight.getRole())) {        rightsToAdd.add(newRight);      } else {        throw new InvalidCredentialsAPIException("Insufficient privileges : " + newRight.getRole() + " required",ctx.isNoError());      }    }  }  if (!newAccessRights.isEmpty()) {    for (    AccessRight right : accessRights) {      if (!newAccessRights.contains(right)) {        if (hasRole(user,newAccessRights,right.getRole())) {          rightsToRemove.add(right);        } else {          throw new InvalidCredentialsAPIException("Insufficient privileges " + right.getRole() + " required",ctx.isNoError());        }      }    }  }  rights.addAll(rightsToAdd);  rights.removeAll(rightsToRemove);  return rights;}  }
class C{  public Quaternionf rotateXYZ(float angleX,float angleY,float angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  protected void sendBatch(){  if (this.hasViews()) {    EventBean[] newData=null;    EventBean[] oldData=null;    if (!currentBatch.isEmpty()) {      newData=currentBatch.toArray(new EventBean[currentBatch.size()]);    }    if ((lastBatch != null) && (!lastBatch.isEmpty())) {      oldData=lastBatch.toArray(new EventBean[lastBatch.size()]);    }    if ((newData != null) || (oldData != null)) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,lengthBatchViewFactory.getViewName(),newData,oldData);      }      updateChildren(newData,oldData);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  lastBatch=currentBatch;  currentBatch=new LinkedHashSet<EventBean>();}  }
class C{  protected RTTypeface(){}  }
class C{  public ReplDBMSEvent filter(ReplDBMSEvent event) throws ReplicatorException, InterruptedException {  return filter.filter(event);}  }
class C{  public void testProxyGetPreferredHttpHost_UrlLocalhost() throws Exception {  assertNull(Proxy.getPreferredHttpHost(mContext,"http://localhost"));  assertNull(Proxy.getPreferredHttpHost(mContext,"http://localhost/"));  assertNull(Proxy.getPreferredHttpHost(mContext,"http://localhost/hej.html"));  assertNull(Proxy.getPreferredHttpHost(mContext,"http://127.0.0.1"));  assertNull(Proxy.getPreferredHttpHost(mContext,"http://127.0.0.1/"));  assertNull(Proxy.getPreferredHttpHost(mContext,"http://127.0.0.1/hej.html"));  assertNull(Proxy.getPreferredHttpHost(mContext,"http://127.0.0.1:80/"));  assertNull(Proxy.getPreferredHttpHost(mContext,"http://127.0.0.1:8080/"));  assertNull(Proxy.getPreferredHttpHost(mContext,"rtsp://127.0.0.1/"));  assertNull(Proxy.getPreferredHttpHost(mContext,"rtsp://localhost/"));  assertNull(Proxy.getPreferredHttpHost(mContext,"https://localhost/"));}  }
class C{  public static void removeBucket_test() throws Exception {  println("Test: removeBucket(String bucketName)");  String name=getRandomName();  client.makeBucket(name);  client.removeBucket(name);}  }
class C{  final public void enable_tracing(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Variable registerVariable(String name){  Variable result=findVariable(name);  if (result == null) {    result=new Variable(name);    this.put(name,result);  }  return result;}  }
class C{  private void marshallStructured(final Object object,StructuredType structuredType) throws ODataRenderException, XMLStreamException {  LOG.debug("Start structured value of type: {}",structuredType);  if (object != null) {    visitProperties(entityDataModel,structuredType,null);  } else {    LOG.debug("Structured value is null");  }  LOG.debug("End structured value of type: {}",structuredType);}  }
class C{  public static Map<String,Object> testServiceLockWaitTimeoutRetryCantRecover(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  try {    GenericValue testingType=EntityQuery.use(delegator).from("TestingType").where("testingTypeId","SVCLWTRTCR").queryOne();    testingType.set("description","New description for SVCLWTRTCR from Lock Wait Timeout Lock GRABBER, this should be replaced by the one in the Waiter service.");    testingType.store();    Debug.logInfo("In testServiceLockWaitTimeoutRetryCantRecover (grabber) just updated SVCLWTRTCR, running sub-service in own transaction",module);    Map<String,Object> waiterResult=dispatcher.runSync("testServiceLockWaitTimeoutRetryCantRecoverWaiter",null,5,true);    if (ServiceUtil.isError(waiterResult)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestLockWaitTimeoutRetryCantRecoverWaiter",locale),null,null,waiterResult);    }    Debug.logInfo("In testServiceLockWaitTimeoutRetryCantRecover (grabber) successfully finished running sub-service in own transaction",module);  } catch (  GenericServiceException e) {    String errMsg="Error running deadlock test services: " + e.toString();    Debug.logError(e,errMsg,module);  }catch (  GenericEntityException e) {    Debug.logError(e,"Entity Engine Exception running lock wait timeout test main/Grabber thread: " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestLockInterruptedExceptionRetryGrabber",UtilMisc.toMap("errorString",e.toString()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  private Rectangle integerise(Rectangle2D rect){  int x0=(int)Math.ceil(rect.getMinX());  int y0=(int)Math.ceil(rect.getMinY());  int x1=(int)Math.floor(rect.getMaxX());  int y1=(int)Math.floor(rect.getMaxY());  return new Rectangle(x0,y0,(x1 - x0),(y1 - y0));}  }
class C{  public AccessibilityServiceInfo(){}  }
class C{  public final void insertElementAt(int value,int at){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  @Override public int hashCode(){  return cachedHashCode;}  }
class C{  private void processTrip(){  LOG.info("Process trip...");  double totalDistance=this.records.get(this.records.size() - 1).getSecond();  String[] firstRecord=this.records.get(0).getFirst();  double routeCost=Double.parseDouble(firstRecord[10]);  int numberOfPeopleAtStartOfTrip=Integer.parseInt(firstRecord[5]);  double tripIncome=numberOfPeopleAtStartOfTrip * routeCost;  double occupancy=numberOfPeopleAtStartOfTrip;  double capacity=Math.max(occupancy,DEFAULT_CAPACITY);  double accumulatedWeightedOccupancy=0.0;  double tripPortionStart=0.0;  int peakClass=0;  for (  Tuple<String[],Double> tuple : this.records) {    String[] sa=tuple.getFirst();    String timeString=sa[4];    peakClass=getPeakClassFromTimeString(timeString);    double accumulatedDistance=tuple.getSecond();    int numberOfPeopleGettingOnAlongRoute=Integer.parseInt(sa[5]);    if (numberOfPeopleGettingOnAlongRoute > 0) {      double distanceTravelled=totalDistance - accumulatedDistance;      double uniqueCostPaidOnBoarding=Double.parseDouble(sa[10]);      double costPerKilometer=uniqueCostPaidOnBoarding / distanceTravelled;      String record=String.format("1,%d,%.2f,%.2f,%s",peakClass,distanceTravelled,costPerKilometer,this.description);      for (int i=0; i < numberOfPeopleGettingOnAlongRoute; i++) {        this.outputLines.add(record);      }      tripIncome+=numberOfPeopleGettingOnAlongRoute * uniqueCostPaidOnBoarding;    }    int numberOfPeopleGettingOffAlongRoute=Integer.parseInt(sa[6]);    if (numberOfPeopleGettingOffAlongRoute > 0) {      double distanceTravelled=accumulatedDistance;      double costPerKilometer=routeCost / distanceTravelled;      String record=String.format("2,%d,%.2f,%.2f,%s",peakClass,distanceTravelled,costPerKilometer,this.description);      for (int i=0; i < numberOfPeopleGettingOffAlongRoute; i++) {        this.outputLines.add(record);      }    }    int numberOfPeopleSwitchingFromAnotherTaxi=Integer.parseInt(sa[7]);    if (numberOfPeopleSwitchingFromAnotherTaxi > 0) {      double distanceTravelled=totalDistance;      double costPerKilometer=routeCost / distanceTravelled;      String record=String.format("3,%d,%.2f,%.2f,%s",peakClass,distanceTravelled,costPerKilometer,this.description);      for (int i=0; i < numberOfPeopleSwitchingFromAnotherTaxi; i++) {        this.outputLines.add(record);      }      tripIncome+=numberOfPeopleSwitchingFromAnotherTaxi * routeCost;    }    int numberOfPeopleSwitchingToAnotherTaxi=Integer.parseInt(sa[8]);    if (numberOfPeopleSwitchingToAnotherTaxi > 0) {      double distanceTravelled=totalDistance;      double costPerKilometer=routeCost / distanceTravelled;      String record=String.format("4,%d,%.2f,%.2f,%s",peakClass,distanceTravelled,costPerKilometer,this.description);      for (int i=0; i < numberOfPeopleSwitchingToAnotherTaxi; i++) {        this.outputLines.add(record);      }      tripIncome-=numberOfPeopleSwitchingToAnotherTaxi * routeCost;    }    occupancy+=(numberOfPeopleGettingOnAlongRoute + numberOfPeopleSwitchingFromAnotherTaxi - numberOfPeopleGettingOffAlongRoute - numberOfPeopleSwitchingToAnotherTaxi);    capacity=Math.max(occupancy,capacity);    double tripPortionDistance=accumulatedDistance - tripPortionStart;    tripPortionStart=accumulatedDistance;    accumulatedWeightedOccupancy+=tripPortionDistance * occupancy;  }  outputLineTaxi=String.format("%d,%.2f,%.2f,%.2f,%.2f,%s",peakClass,totalDistance,accumulatedWeightedOccupancy / totalDistance,(accumulatedWeightedOccupancy / totalDistance) / capacity,tripIncome,this.description);  LOG.info(" -->  " + outputLineTaxi);}  }
class C{  private static String cookies(final String... cookies){  final List<String> list=new ArrayList<>(cookies.length + 3);  list.add("HTTP/1.1 200 OK");  for (  final String cookie : cookies) {    list.add(String.format("Set-Cookie: %s;",cookie));  }  list.add("");  list.add("");  return Joiner.on("\r\n").join(list.iterator());}  }
class C{  public void addMovieSet(MovieSet movieSet){  int oldValue=movieSetList.size();  this.movieSetList.add(movieSet);  firePropertyChange("addedMovieSet",null,movieSet);  firePropertyChange("movieSetCount",oldValue,movieSetList.size());}  }
class C{  @Override public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition pos){  return format((long)number,toAppendTo,pos);}  }
class C{  private void updateScroll(final float yScrolled){  if (yScrolled == 0) {    return;  }  mTargetOffset+=yScrolled;  if (STATUS.isRefreshStatus(mStatus)) {    mHeaderOffset=mTargetOffset;    mFooterOffset=0;  } else   if (STATUS.isLoadMoreStatus(mStatus)) {    mFooterOffset=mTargetOffset;    mHeaderOffset=0;  }  if (mDebug) {    Log.i(TAG,"mTargetOffset = " + mTargetOffset);  }  layoutChildren();  invalidate();}  }
class C{  public Interval withChronology(Chronology chronology){  if (getChronology() == chronology) {    return this;  }  return new Interval(getStartMillis(),getEndMillis(),chronology);}  }
class C{  public ServiceAlreadyExistsException(String message){  super(message);}  }
class C{  public boolean isIn(int i){  return (i >= this.min) && (i <= this.max);}  }
class C{  public static Collection select(final Collection selection,final Predicate filter){  Collection ret=new ArrayList();  for (  Object object : selection) {    if (filter.evaluate(object)) {      ret.add(object);    }  }  return ret;}  }
class C{  public Boolean isHttpSystemLogging(){  return httpSystemLogging;}  }
class C{  private void updateDisplayString(){  final List<IProgressOperation> operations=CGlobalProgressManager.instance().getOperations();  if (operations.isEmpty()) {    m_progressPanel.setProgressText("");    this.setVisible(false);  } else {    final IProgressOperation firstOperation=operations.get(0);    final String displayString=firstOperation.getDescription() + (operations.size() == 1 ? "" : " ( +" + (operations.size() - 1) + ")");    m_progressPanel.setProgressText(displayString);    this.setVisible(true);  }}  }
class C{  public void clearOptions(){  if (getPlugin() == null) {    log().debug("No plugin set?");  } else {    log().info("Clearing Options..");    PluginOptionContainer container=getPlugin().getPluginOptions();    while (container.size() > 0) {      container.remove(container.getByIndex(0));    }  }}  }
class C{  public final void testEqualsObject01(){  CertPath cp1=new MyCertPath(testEncoding);  assertTrue(cp1.equals(cp1));}  }
class C{  public static HostPortWaitStrategy forListeningPort(){  return new HostPortWaitStrategy();}  }
class C{  private void removeGet(String url){  if (_getCache.keySet().contains(url)) {    _log.info("Removing cached GET response for " + url);    _getCache.remove(url);  } else   _log.info("NOT removing cached GET for " + url + " NOT FOUND.");}  }
class C{  public void removeModule(final MemoryModule module){  m_cachedValuesSemaphore.acquireUninterruptibly();  m_modules.remove(module);  m_cachedValues=null;  m_cachedValuesSemaphore.release();  fireTableDataChanged();}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public static boolean isBase64(final String base64){  return isBase64(getBytesUtf8(base64));}  }
class C{  protected T initialValue(){  return null;}  }
class C{  public Rule(String name,IPredicate head,IPredicate[] tail,IConstraint[] constraints){  this(name,head,tail,QueryOptions.NONE,constraints,null,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PrefixQueryBuilder(String name,String prefix){  this.name=name;  this.prefix=prefix;}  }
class C{  public static boolean isBranchAndLink(int inst){  int opcode, ext_op;  int link;  opcode=bits(inst,0,5);  link=bits(inst,31,31);switch (opcode) {case 16:case 18:    break;case 19:  ext_op=bits(inst,21,30);if ((ext_op != 16) && (ext_op != 528)) {  link=0;}break;default :link=0;}return link != 0;}  }
class C{  @SuppressWarnings("unchecked") protected <T1,T2>T1 send(final HttpMethod method,final T2 serializedObject) throws ClientException {  mMethod=method;  return (T1)mClient.getHttpProvider().send(this,mResponseClass,serializedObject);}  }
class C{  public boolean intersectsViewport(Viewport viewport){  if (viewport == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Frustum","intersectsViewport","missingViewport"));  }  return this.viewport.intersects(viewport);}  }
class C{  public Builder updateDisplayName(String displayName){  this.displayName=displayName;  return this;}  }
class C{  public void testInit04() throws Exception, InvalidAlgorithmParameterException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  DHParameterSpec dhPs=((DHPrivateKey)privKey).getParams();  AlgorithmParameterSpec aps=new RSAKeyGenParameterSpec(10,new BigInteger("10"));  byte[] bbRes1;  byte[] bbRes2;  byte[] bbRes3;  SecureRandom randomNull=null;  SecureRandom random=new SecureRandom();  for (int i=0; i < kAgs.length; i++) {    kAgs[i].init(privKey,dhPs);    kAgs[i].doPhase(publKey,true);    bbRes1=kAgs[i].generateSecret();    kAgs[i].init(privKey,dhPs,random);    kAgs[i].doPhase(publKey,true);    bbRes2=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes2.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes2[j]);    }    kAgs[i].init(privKey,dhPs,randomNull);    kAgs[i].doPhase(publKey,true);    bbRes3=kAgs[i].generateSecret();    assertEquals("Incorrect byte array length",bbRes1.length,bbRes3.length);    for (int j=0; j < bbRes1.length; j++) {      assertEquals("Incorrect byte (index: ".concat(Integer.toString(i)).concat(")"),bbRes1[j],bbRes3[j]);    }    try {      kAgs[i].init(publKey,dhPs,random);      fail("InvalidKeyException expected");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(privKey,aps,random);      fail("InvalidAlgorithmParameterException expected");    } catch (    InvalidAlgorithmParameterException e) {    }  }}  }
class C{  @SuppressWarnings("hiding") public boolean hasPosition(int row,int column){  return this.row == row && this.column == column;}  }
class C{  public RestoringInputStream(InputStream inStream){  this.inStream=inStream;}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  public ToStringBuilder append(final String fieldName,final Object obj,final boolean fullDetail){  style.append(buffer,fieldName,obj,Boolean.valueOf(fullDetail));  return this;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe class index (first and last are valid as well).\n" + "\t(default: last)","C",1,"-C <class index>"));  result.addElement(new Option("\tCompresses the data (uses '" + JSONLoader.FILE_EXTENSION_COMPRESSED + "' as extension instead of '"+ JSONLoader.FILE_EXTENSION+ "')\n"+ "\t(default: off)","compress",0,"-compress"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public JointPlan createJointPlan(final Map<Id<Person>,? extends Plan> plans,final boolean addAtIndividualLevel){  JointPlan jointPlan=new JointPlan(plans);  for (  Plan plan : plans.values()) {    if (addAtIndividualLevel) {      final Person person=plan.getPerson();      if (person == null) {        throw new NullPointerException("the person backpointed by the plan" + " must not be null for the plan to be added");      }      if (!person.getPlans().contains(plan))       person.addPlan(plan);    }  }  return jointPlan;}  }
class C{  public final void pushContextNodeList(DTMIterator nl){  m_contextNodeLists.push(nl);}  }
class C{  public boolean unlockIt(){  if (!isValidAction(ACTION_Unlock))   return false;  if (m_document != null) {    if (m_document.unlockIt()) {      m_status=STATUS_Drafted;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_Drafted;  return true;}  }
class C{  public static ValueLobDb createTempClob(Reader in,long length){  BufferedReader reader;  if (in instanceof BufferedReader) {    reader=(BufferedReader)in;  } else {    reader=new BufferedReader(in,Constants.IO_BUFFER_SIZE);  }  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    char[] buff;    if (len >= Integer.MAX_VALUE) {      String data=IOUtils.readStringAndClose(reader,-1);      buff=data.toCharArray();      len=buff.length;    } else {      buff=new char[len];      reader.mark(len);      len=IOUtils.readFully(reader,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);      return ValueLobDb.createSmallLob(Value.CLOB,small,len);    }    reader.reset();    ValueLobDb lob=new ValueLobDb(reader,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public void saveLockPassword(String password,int quality,boolean isFallback){  saveLockPassword(password,quality,isFallback,getCurrentOrCallingUserId());}  }
class C{  public static void loadAllConfigFiles() throws ServletException {  loadHostInfo();  if (!isGaliel) {    _configs=null;    loadContentFirstPatterns(CONFIG_DIR,File.separator + "content-first.txt",_configData);    loadDeferPatterns(CONFIG_DIR,File.separator + "defer.txt",_configData);    loadStateFullPatterns(CONFIG_DIR,File.separator + "state-full.txt",_configData);    loadStateLessPatterns(CONFIG_DIR,File.separator + "state-less.txt",_configData);    loadNoInlinePatterns(CONFIG_DIR,File.separator + "no-inline.txt",_configData);    System.out.println(loadProperties(CONFIG_DIR,File.separator + "properties.txt",_configData).replace("<br/>","\n"));    loadAutoRefreshed(File.separator + "auto-refreshed.txt");    return;  }  System.out.println(ConfigUtils.loadProperties(CONFIG_DIR,File.separator + "properties.txt",_configData).replace("<br/>","\n"));  _configs=new HashMap<String,ConfigData>(1000);  scanDir(new File(CONFIG_DIR + File.separator + "domains"),0,true);}  }
class C{  public CSVFormat withRecordSeparator(final String recordSeparator){  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  @Override protected void onActivityResult(final int requestCode,final int resultCode,final Intent intent){  super.onActivityResult(requestCode,resultCode,intent);switch (requestCode) {case RESULT_ID:    onGeoChanged((intent != null) ? intent.getData() : null);  break;default :break;}}  }
class C{  public static boolean validSystemNameConfig(String systemName,char type,AcelaSystemConnectionMemo memo){  if (!validSystemNameFormat(systemName,type,memo.getSystemPrefix())) {    return false;  }  AcelaNode node=getNodeFromSystemName(systemName,memo);  if (node == null) {    return false;  }  int bit=getBitFromSystemName(systemName);  if ((type == 'T') || (type == 'L')) {    if ((bit < MINOUTPUTADDRESS) || (bit > MAXOUTPUTADDRESS)) {      return false;    }  } else   if (type == 'S') {    if ((bit < MINSENSORADDRESS) || (bit > MAXSENSORADDRESS)) {      return false;    }  } else {    log.error("Invalid type specification in validSystemNameConfig call");    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:18.847 -0500",hash_original_method="530FB6E934B0A6A853BD43F0002757A2",hash_generated_method="1DCF57B9E315E1DD99D42F4C4F004439") public InputMethodInfo(String packageName,String className,CharSequence label,String settingsActivity){  ResolveInfo ri=new ResolveInfo();  ServiceInfo si=new ServiceInfo();  ApplicationInfo ai=new ApplicationInfo();  ai.packageName=packageName;  ai.enabled=true;  si.applicationInfo=ai;  si.enabled=true;  si.packageName=packageName;  si.name=className;  si.exported=true;  si.nonLocalizedLabel=label;  ri.serviceInfo=si;  mService=ri;  mId=new ComponentName(si.packageName,si.name).flattenToShortString();  mSettingsActivityName=settingsActivity;  mIsDefaultResId=0;  mIsAuxIme=false;}  }
class C{  public EvalStateNodeNumber(int[] number){  this.stateNumber=number;  computeHashCode();}  }
class C{  public void testUntyped(){  _testObjectBuffer(null);}  }
class C{  public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null) {    return true;  }  if (filename == null || wildcardMatcher == null) {    return false;  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<int[]>();  do {    if (backtrack.size() > 0) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length()) {          break;        }        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1) {          textIdx=filename.length();        }      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0) {            backtrack.push(new int[]{wcsIdx,repeat});          }        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length()) {      return true;    }  } while (backtrack.size() > 0);  return false;}  }
class C{  public void onDescriptorWrite(String address,int status,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int charInstId,ParcelUuid charUuid,ParcelUuid descrUuid){  if (DBG)   Log.d(TAG,"onDescriptorWrite() - Device=" + address + " UUID="+ charUuid);  if (!address.equals(mDevice.getAddress())) {    return;  }  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid.getUuid(),charInstId);  if (characteristic == null)   return;  BluetoothGattDescriptor descriptor=characteristic.getDescriptor(descrUuid.getUuid());  if (descriptor == null)   return;  if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && mAuthRetry == false) {    try {      mAuthRetry=true;      mService.writeDescriptor(mClientIf,address,srvcType,srvcInstId,srvcUuid,charInstId,charUuid,descrUuid,characteristic.getWriteType(),AUTHENTICATION_MITM,descriptor.getValue());    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  mAuthRetry=false;  try {    mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  public Matrix4x3f mul(Matrix4x3fc right){  return mul(right,this);}  }
class C{  private void formatParam(final StringBuffer buffer,final NameValuePair param,final int version){  if (version < 1) {    buffer.append(param.getName());    buffer.append("=");    if (param.getValue() != null) {      buffer.append(param.getValue());    }  } else {    formatter.format(buffer,param);  }}  }
class C{  public ImageSource dimensions(int sWidth,int sHeight){  if (bitmap == null) {    this.sWidth=sWidth;    this.sHeight=sHeight;  }  setInvariants();  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodevalue.class,args);}  }
class C{  public void commit(){  db.commit();}  }
class C{  public boolean isFiringOnlyUpdatedPanes(){  return this.firingOnlyUpdatedPanes;}  }
class C{  public Sport(){  super();}  }
class C{  public FastLongBuffer(){  this.minChunkLen=1024;}  }
class C{  protected void prepareRequestContextRenderException(ODataRequest.Method method,ODataUri oDataUri) throws UnsupportedEncodingException {  context=createODataRequestContext(method,oDataUri,entityDataModel);  responseBuilderMock=mock(ODataResponse.Builder.class);  when(responseBuilderMock.setBodyText(any(String.class),any(String.class))).thenThrow(new UnsupportedEncodingException());  when(responseBuilderMock.setStatus(any(ODataResponse.Status.class))).thenReturn(responseBuilderMock);  when(responseBuilderMock.setContentType(any(MediaType.class))).thenReturn(responseBuilderMock);  when(responseBuilderMock.setHeader(any(String.class),any(String.class))).thenReturn(responseBuilderMock);}  }
class C{  public boolean isPrimitive(){  return false;}  }
class C{  private void socksRequestConnection(InetAddress applicationServerAddress,int applicationServerPort) throws IOException {  socksSendRequest(Socks4Message.COMMAND_CONNECT,applicationServerAddress,applicationServerPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (line.startsWith("<")) {      break;    }    String[] fields=line.split("\t");    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.changedUpdate(e,a,this);}  }
class C{  public SerialMessage(byte[] a){  super(String.valueOf(a));  setBinary(true);}  }
class C{  public void printExpr(JCTree tree) throws IOException {  printExpr(tree,TreeInfo.noPrec);}  }
class C{  public ZkConfigManager(SolrZkClient zkClient){  this.zkClient=zkClient;}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public FieldOption(){}  }
class C{  public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){  impl.drawArc(nativeGraphics,xTranslate + x,yTranslate + y,width,height,startAngle,arcAngle);}  }
class C{  public String toString(final boolean sketchSummary,final boolean dataDetail){  if (gadget_ == null)   return ItemsSketch.getInstance(k_,comparator_).toString();  return gadget_.toString(sketchSummary,dataDetail);}  }
class C{  public void testSetBitNegativeOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=150;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void destroy(){  eventTypeIndex.destroy();  if (isolatableCallbacks != null) {    isolatableCallbacks.clear();  }}  }
class C{  @Override public String toString(){  return Long.toString(cat.get());}  }
class C{  public void clearDesktop(){  if (workspace.changesExist()) {    int s=showHasChangedDialog();    if (s == JOptionPane.OK_OPTION) {      save();      clearComponents();    } else     if (s == JOptionPane.NO_OPTION) {      clearComponents();    } else     if (s == JOptionPane.CANCEL_OPTION) {      return;    }  } else {    clearComponents();  }}  }
class C{  public INNER_JOIN INNER_JOIN(String tableToJoin){  return new INNER_JOIN(this,tableToJoin);}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") void writeSerializable(Object obj,List<Method> mtds,OptimizedClassDescriptor.Fields fields) throws IOException {  for (int i=0; i < mtds.size(); i++) {    Method mtd=mtds.get(i);    if (mtd != null) {      curObj=obj;      curFields=fields.fields(i);      try {        mtd.invoke(obj,this);      } catch (      IllegalAccessException e) {        throw new IOException(e);      }catch (      InvocationTargetException e) {        throw new IOException(e.getCause());      }    } else     writeFields(obj,fields.fields(i));  }}  }
class C{  public void addFieldTranslation(DatabaseField sourceField,String aggregateFieldName){  String unQualifiedAggregateFieldName=aggregateFieldName.substring(aggregateFieldName.lastIndexOf('.') + 1);  getAggregateToSourceFields().put(unQualifiedAggregateFieldName,sourceField);}  }
class C{  @SuppressWarnings("unchecked") private void _applyQueryHint(final AST2BOpContext context,final QueryRoot queryRoot,final QueryHintScope scope,final ASTBase t,final String name,final String value){  @SuppressWarnings("rawtypes") final IQueryHint queryHint=QueryHintRegistry.get(name);  if (queryHint == null) {    throw new QueryHintException(scope,t,name,value);  }  final Object value2=queryHint.validate(value);  if (log.isTraceEnabled())   log.trace("Applying hint: hint=" + queryHint.getName() + ", value="+ value2+ ", node="+ t.getClass().getName());  queryHint.handle(context,queryRoot,scope,t,value2);}  }
class C{  public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  public Timer stop(){  if (baseTime != 0) {    elapsedTime=elapsedTime + (System.currentTimeMillis() - baseTime);  }  baseTime=0;  return this;}  }
class C{  private void updateEncryptionState(){  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();  boolean isSyncInitialized=mProfileSyncService.isSyncInitialized();  mSyncEncryption.setEnabled(isSyncEnabled && isSyncInitialized);  mSyncEncryption.setSummary(null);  if (!isSyncInitialized) {    closeDialogIfOpen(FRAGMENT_CUSTOM_PASSPHRASE);    closeDialogIfOpen(FRAGMENT_ENTER_PASSPHRASE);    return;  }  if (!mProfileSyncService.isPassphraseRequiredForDecryption()) {    closeDialogIfOpen(FRAGMENT_ENTER_PASSPHRASE);  }  if (mProfileSyncService.isPassphraseRequiredForDecryption() && isAdded()) {    mSyncEncryption.setSummary(errorSummary(getString(R.string.sync_need_passphrase)));  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"popa");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a popa instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,"edi",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,"esi",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,"ebp",instructions);  offset=baseOffset + instructions.size();  final String newEsp=environment.getNextVariableString();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,newEsp,instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,"ebx",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,"edx",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,"ecx",instructions);  offset=baseOffset + instructions.size();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,"eax",instructions);  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createStr(offset,OperandSize.DWORD,newEsp,OperandSize.DWORD,"esp"));}  }
class C{  void init(int layoutId,Bundle arguments){  this.mLayoutId=layoutId;  this.mArgs=arguments;}  }
class C{  public static void sort(ArrayList<Integer> list){  java.util.Collections.sort(list);}  }
class C{  @NotNull private static Iterable<String> extractClasses(String classAttributeValue){  return transform(CLASS_NAME_SPLITTER.split(classAttributeValue),CLASS_NAME_NORMALIZER);}  }
class C{  private void cleanupShadowsAndDrownedObjects(final boolean avoidSpaces){  final int[] items=getUnusedFragments();  final int count=items.length;  int c, n;  String separator;  float diff;  for (int p=0; p < count; p++) {    c=items[p];    if (!isUsed[c]) {      float midX=(f_x1[c] + f_x2[c]) / 2;      float midY=(f_y1[c] + f_y2[c]) / 2;      for (int p2=p + 1; p2 < count; p2++) {        n=items[p2];        if ((f_x1[n] != f_x2[n]) && (!isUsed[n]) && (!isUsed[c])) {          float fontDiff=this.fontSize[n] - fontSize[c];          if (fontDiff < 0) {            fontDiff=-fontDiff;          }          diff=(f_x2[n] - f_x1[n]) - (f_x2[c] - f_x1[c]);          if (diff < 0) {            diff=-diff;          }          if (fontDiff == 0 && (midX > f_x1[n]) && (midX < f_x2[n]) && (diff < 10) && (midY < f_y1[n]) && (midY > f_y2[n])) {            isUsed[n]=true;          } else {            final boolean a_in_b=(f_x1[n] > f_x1[c]) && (f_x2[n] < f_x2[c]) && (f_y1[n] < f_y1[c])&& (f_y2[n] > f_y2[c]);            final boolean b_in_a=(f_x1[c] > f_x1[n]) && (f_x2[c] < f_x2[n]) && (f_y1[c] < f_y1[n])&& (f_y2[c] > f_y2[n]);            if (a_in_b || b_in_a) {              if (f_y2[c] > f_y2[n]) {                separator=getLineDownSeparator(content[c],content[n],isXMLExtraction);                if ((!avoidSpaces) || (separator.indexOf(' ') == -1)) {                  merge(c,n,separator,true);                }              } else {                separator=getLineDownSeparator(content[n],content[c],isXMLExtraction);                if (!avoidSpaces || separator.indexOf(' ') == -1) {                  merge(n,c,separator,true);                }              }              midX=(f_x1[c] + f_x2[c]) / 2;              midY=(f_y1[c] + f_y2[c]) / 2;            }          }        }      }    }  }}  }
class C{  public static String format(final long millis,final String pattern,final TimeZone timeZone){  return format(new Date(millis),pattern,timeZone,null);}  }
class C{  private void onRemoveFileOperationFinish(RemoveFileOperation operation,RemoteOperationResult result){  Toast msg=Toast.makeText(this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);  msg.show();  if (result.isSuccess()) {    OCFile removedFile=operation.getFile();    FileFragment second=getSecondFragment();    if (second != null && removedFile.equals(second.getFile())) {      if (second instanceof PreviewMediaFragment) {        ((PreviewMediaFragment)second).stopPreview(true);      }      setFile(getStorageManager().getFileById(removedFile.getParentId()));      cleanSecondFragment();    }    if (getStorageManager().getFileById(removedFile.getParentId()).equals(getCurrentDir())) {      refreshListOfFilesFragment();    }    invalidateOptionsMenu();  } else {    if (result.isSslRecoverableException()) {      mLastSslUntrustedServerResult=result;      showUntrustedCertDialog(mLastSslUntrustedServerResult);    }  }}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  protected AbstractMatrix3D vRowFlip(){  if (rows > 0) {    rowZero+=(rows - 1) * rowStride;    rowStride=-rowStride;    this.isNoView=false;  }  return this;}  }
class C{  public AsyncResult DeleteNodesAsync(RequestHeader RequestHeader,DeleteNodesItem... NodesToDelete){  DeleteNodesRequest req=new DeleteNodesRequest(RequestHeader,NodesToDelete);  return channel.serviceRequestAsync(req);}  }
class C{  public static KeyczarReader exportPublicKeys(GenericKeyczar privateKey) throws KeyczarException {  KeyMetadata kmd=privateKey.getMetadata();  KeyMetadata publicKmd=null;  if (kmd.getType() == DefaultKeyType.DSA_PRIV) {    if (kmd.getPurpose() == KeyPurpose.SIGN_AND_VERIFY) {      publicKmd=new KeyMetadata(kmd.getName(),KeyPurpose.VERIFY,DefaultKeyType.DSA_PUB);    }  } else   if (kmd.getType() == DefaultKeyType.RSA_PRIV) {switch (kmd.getPurpose()) {case DECRYPT_AND_ENCRYPT:      publicKmd=new KeyMetadata(kmd.getName(),KeyPurpose.ENCRYPT,DefaultKeyType.RSA_PUB);    break;case SIGN_AND_VERIFY:  publicKmd=new KeyMetadata(kmd.getName(),KeyPurpose.VERIFY,DefaultKeyType.RSA_PUB);break;default :throw new IllegalArgumentException("Invalid key purpose: " + kmd.getPurpose());}}if (publicKmd == null) {throw new KeyczarException(Messages.getString("KeyczarTool.CannotExportPubKey",kmd.getType(),kmd.getPurpose()));}HashMap<Integer,KeyczarKey> keys=new HashMap<Integer,KeyczarKey>();for (KeyVersion version : privateKey.getVersions()) {try {KeyczarKey key=privateKey.getKey(version);KeyczarKey publicKey=(KeyczarKey)getPublicMethod.invoke(key);publicKmd.addVersion(version);keys.put(version.getVersionNumber(),publicKey);} catch (IllegalAccessException e) {throw new RuntimeException(e);}catch (InvocationTargetException e) {throw new RuntimeException(e);}}return new MemoryKeyReader(publicKmd,keys);}  }
class C{  private <T>BindingAmp<T> findBinding(Key<T> key){  BindingSet<T> set=(BindingSet)_bindingSetMap.get(key.rawClass());  if (set != null) {    BindingAmp<T> binding=set.find(key);    if (binding != null) {      return binding;    }  }  return null;}  }
class C{  @Override public void processToken(String tok){  if (tokens.isConnected()) {    tokentuple.add(tok);  }  if (splittokens.isConnected() && hasSplitTokenBy()) {    super.processToken(tok);  }}  }
class C{  private synchronized void removePendingAction(@Nullable PermissionsResultAction action){  for (Iterator<WeakReference<PermissionsResultAction>> iterator=mPendingActions.iterator(); iterator.hasNext(); ) {    WeakReference<PermissionsResultAction> weakRef=iterator.next();    if (weakRef.get() == action || weakRef.get() == null) {      iterator.remove();    }  }}  }
class C{  public static int parseIntDefault(final String s,final int def){  if (s == null) {    return def;  }  int r;  try {    r=Integer.parseInt(s);  } catch (  final NumberFormatException e) {    r=def;  }  return r;}  }
class C{  protected void handleTextSize(float size){  textSize=size;  textLeading=(textAscent() + textDescent()) * 1.275f;}  }
class C{  public void serialize(KXmlSerializer serializer) throws IOException {  serializer.startTag(CtsXmlResultReporter.ns,TAG);  serializer.attribute(CtsXmlResultReporter.ns,NAME_ATTR,getName());  serializer.attribute(CtsXmlResultReporter.ns,RESULT_ATTR,mResult.getValue());  serializer.attribute(CtsXmlResultReporter.ns,STARTTIME_ATTR,mStartTime);  serializer.attribute(CtsXmlResultReporter.ns,ENDTIME_ATTR,mEndTime);  if (mMessage != null) {    serializer.startTag(CtsXmlResultReporter.ns,SCENE_TAG);    serializer.attribute(CtsXmlResultReporter.ns,MESSAGE_ATTR,mMessage);    if (mStackTrace != null) {      serializer.startTag(CtsXmlResultReporter.ns,STACK_TAG);      serializer.text(mStackTrace);      serializer.endTag(CtsXmlResultReporter.ns,STACK_TAG);    }    serializer.endTag(CtsXmlResultReporter.ns,SCENE_TAG);  }  if (mSummary != null) {    PerfResultSummary summary=parseSummary(mSummary);    if (summary != null) {      serializer.startTag(CtsXmlResultReporter.ns,SUMMARY_TAG);      serializer.attribute(CtsXmlResultReporter.ns,MESSAGE_ATTR,summary.mMessage);      if (summary.mTarget.length() != 0 && !summary.mTarget.equals(" ")) {        serializer.attribute(CtsXmlResultReporter.ns,TARGET_ATTR,summary.mTarget);      }      serializer.attribute(CtsXmlResultReporter.ns,SCORETYPE_ATTR,summary.mType);      serializer.attribute(CtsXmlResultReporter.ns,UNIT_ATTR,summary.mUnit);      serializer.text(summary.mValue);      serializer.endTag(CtsXmlResultReporter.ns,SUMMARY_TAG);      if (mDetails != null) {        PerfResultDetail[] ds=parseDetails(mDetails);        serializer.startTag(CtsXmlResultReporter.ns,DETAILS_TAG);        for (        PerfResultDetail d : ds) {          if (d == null) {            continue;          }          serializer.startTag(CtsXmlResultReporter.ns,VALUEARRAY_TAG);          serializer.attribute(CtsXmlResultReporter.ns,SOURCE_ATTR,d.mSource);          serializer.attribute(CtsXmlResultReporter.ns,MESSAGE_ATTR,d.mMessage);          serializer.attribute(CtsXmlResultReporter.ns,SCORETYPE_ATTR,d.mType);          serializer.attribute(CtsXmlResultReporter.ns,UNIT_ATTR,d.mUnit);          for (          String v : d.mValues) {            if (v == null) {              continue;            }            serializer.startTag(CtsXmlResultReporter.ns,VALUE_TAG);            serializer.text(v);            serializer.endTag(CtsXmlResultReporter.ns,VALUE_TAG);          }          serializer.endTag(CtsXmlResultReporter.ns,VALUEARRAY_TAG);        }        serializer.endTag(CtsXmlResultReporter.ns,DETAILS_TAG);      }    }  }  serializer.endTag(CtsXmlResultReporter.ns,TAG);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.domainGridlineStroke=SerialUtilities.readStroke(stream);  this.domainGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeGridlineStroke=SerialUtilities.readStroke(stream);  this.rangeGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeCrosshairStroke=SerialUtilities.readStroke(stream);  this.rangeCrosshairPaint=SerialUtilities.readPaint(stream);  this.domainCrosshairStroke=SerialUtilities.readStroke(stream);  this.domainCrosshairPaint=SerialUtilities.readPaint(stream);  this.rangeMinorGridlineStroke=SerialUtilities.readStroke(stream);  this.rangeMinorGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeZeroBaselineStroke=SerialUtilities.readStroke(stream);  this.rangeZeroBaselinePaint=SerialUtilities.readPaint(stream);  for (  CategoryAxis xAxis : this.domainAxes.values()) {    if (xAxis != null) {      xAxis.setPlot(this);      xAxis.addChangeListener(this);    }  }  for (  ValueAxis yAxis : this.rangeAxes.values()) {    if (yAxis != null) {      yAxis.setPlot(this);      yAxis.addChangeListener(this);    }  }  for (  CategoryDataset dataset : this.datasets.values()) {    if (dataset != null) {      dataset.addChangeListener(this);    }  }  for (  CategoryItemRenderer renderer : this.renderers.values()) {    if (renderer != null) {      renderer.addChangeListener(this);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:07.613 -0500",hash_original_method="9B687614DCB13072E0D397A968085B41",hash_generated_method="E36F9309AB656F144D6146154772BFBD") public final boolean isLinearText(){  return 1 == ((getFlags() & LINEAR_TEXT_FLAG) + 0);}  }
class C{  public void testCloseExceptionally(){  SubmissionPublisher<Integer> p=basicPublisher();  checkInitialState(p);  Throwable ex=new SPException();  p.closeExceptionally(ex);  assertTrue(p.isClosed());  assertSame(p.getClosedException(),ex);  try {    p.submit(1);    shouldThrow();  } catch (  IllegalStateException success) {  }  p.close();  assertTrue(p.isClosed());  assertSame(p.getClosedException(),ex);}  }
class C{  private final void escapeAndAdd(StringBuffer sb,String text){  int count=text.length();  for (int i=0; i < count; i++) {    char ch=text.charAt(i);switch (ch) {case '\t':      sb.append("\\tab");    while ((++i < count) && text.charAt(i) == '\t') {      sb.append("\\tab");    }  sb.append(' ');i--;break;case '\\':case '{':case '}':sb.append('\\').append(ch);break;default :sb.append(ch);break;}}}  }
class C{  public BasePermissionCollectionRequest(final String requestUrl,IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options,BasePermissionCollectionResponse.class,IPermissionCollectionPage.class);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.CONDITIONAL_EXPRESSION__CONDITION:    setCondition((Expression)newValue);  return;case ExpressionsPackage.CONDITIONAL_EXPRESSION__TRUE_CASE:setTrueCase((Expression)newValue);return;case ExpressionsPackage.CONDITIONAL_EXPRESSION__FALSE_CASE:setFalseCase((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public RawScale2x(int[] imageData,int dataWidth,int dataHeight){  this.width=dataWidth;  this.height=dataHeight;  this.srcImage=imageData;  dstImage=new int[imageData.length * 4];}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public void initComponents(){  setTitle(rb.getString("WindowTitle"));  Container contentPane=getContentPane();  contentPane.setLayout(new BoxLayout(contentPane,BoxLayout.Y_AXIS));  p=new NodeTablePane();  p.initComponents();  contentPane.add(p);  addHelpMenu("package.jmri.jmrix.grapevine.nodetable.NodeTableFrame",true);  SerialTrafficController.instance().addSerialListener(p);  pack();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String name=getString(stack);  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    if ("Focused".equals(name))     return Boolean.valueOf(uiComp.isFocused()); else     if ("FocusedChild".equals(name))     return Boolean.valueOf(uiComp.doesHierarchyHaveFocus()); else     return uiComp.getRelatedContext().safeLookup(name);  }  return null;}  }
class C{  public void checkArchive(){  if (contentMap.get(VERINICE_XML) == null) {    throw new VeriniceArchiveNotValidException("File missing in verinice archive: " + VERINICE_XML);  }}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  public double evaluateIteration(){  double oldEigenvalue=eigenvalue;  transposedEigenvector=transposedEigenvector.secureProduct(matrix);  transposedEigenvector=transposedEigenvector.product(1.0 / transposedEigenvector.components[0]);  eigenvector=matrix.secureProduct(eigenvector);  eigenvalue=eigenvector.components[0];  eigenvector=eigenvector.product(1.0 / eigenvalue);  return Double.isNaN(oldEigenvalue) ? 10 * getDesiredPrecision() : Math.abs(eigenvalue - oldEigenvalue);}  }
class C{  public void sync(List<LocalMessage> messages) throws IOException {  Preconditions.checkState(initialized,"GmailSyncer.init() must be called first");  Multimap<LocalMessage,Message> map=mailbox.mapMessageIds(messages);  messages.stream().filter(null).forEach(null);  mailbox.fetchExistingLabels(map.values());  mailbox.syncLocalLabelsToGmail(map);}  }
class C{  private static void checkArguments(final JFrame parent,final ZyGraph graph){  Preconditions.checkNotNull(parent,"IE01746: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01747: Graph argument can not be null");}  }
class C{  public void removeTemporaryMaps(BitField objectIds){  for (  String mapName : store.getMapNames()) {    if (mapName.startsWith("temp.")) {      MVMap<?,?> map=store.openMap(mapName);      store.removeMap(map);    } else     if (mapName.startsWith("table.") || mapName.startsWith("index.")) {      int id=Integer.parseInt(mapName.substring(1 + mapName.indexOf(".")));      if (!objectIds.get(id)) {        ValueDataType keyType=new ValueDataType(null,null,null);        ValueDataType valueType=new ValueDataType(null,null,null);        Transaction t=transactionStore.begin();        TransactionMap<?,?> m=t.openMap(mapName,keyType,valueType);        transactionStore.removeMap(m);        t.commit();      }    }  }}  }
class C{  public ProxySelectorRoutePlanner(SchemeRegistry schreg,ProxySelector prosel){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;  proxySelector=prosel;}  }
class C{  protected void drawDimmedLayer(@NonNull Canvas canvas){  canvas.save();  if (mCircleDimmedLayer) {    canvas.clipPath(mCircularPath,Region.Op.DIFFERENCE);  } else {    canvas.clipRect(mCropViewRect,Region.Op.DIFFERENCE);  }  canvas.drawColor(mDimmedColor);  canvas.restore();  if (mCircleDimmedLayer) {    canvas.drawCircle(mCropViewRect.centerX(),mCropViewRect.centerY(),Math.min(mCropViewRect.width(),mCropViewRect.height()) / 2.f,mDimmedStrokePaint);  }}  }
class C{  public void clear(){  array=new Object[size];}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  public ImagePortrayal2D(ImageIcon icon){  this(icon,1.0);}  }
class C{  public BaseCodeCursor(){  this.baseAddressMap=new AddressMap();  this.cursor=0;}  }
class C{  public Lexicon(InputStream in) throws IOException {  this(in,false);}  }
class C{  public static RuleConstraints constraintsFor(final String constraintsName,final EvolutionState state){  RuleConstraints myConstraints=(RuleConstraints)(((RuleInitializer)state.initializer).ruleConstraintRepository.get(constraintsName));  if (myConstraints == null)   state.output.error("The rule constraints \"" + constraintsName + "\" could not be found.");  return myConstraints;}  }
class C{  public RpcClient peerWith(String host,int port,Bootstrap bootstrap) throws IOException {  return peerWith(host,port,bootstrap,null);}  }
class C{  public T itemClicked(OnItemClickListener listener){  if (view instanceof AdapterView) {    AdapterView<?> alv=(AdapterView<?>)view;    alv.setOnItemClickListener(listener);  }  return self();}  }
class C{  public V remove(double key){  V prev=null;  int index=index(key);  if (index >= 0) {    prev=unwrapNull(_values[index]);    removeAt(index);  }  return prev;}  }
class C{  public DeterministicKeyChain upgradeToDeterministic(long keyRotationTimeSecs,@Nullable KeyParameter aesKey) throws DeterministicUpgradeRequiresPassword, AllRandomKeysRotating {  checkState(basic.numKeys() > 0);  checkArgument(keyRotationTimeSecs >= 0);  ECKey keyToUse=basic.findOldestKeyAfter(keyRotationTimeSecs - 1);  if (keyToUse == null)   throw new AllRandomKeysRotating();  if (keyToUse.isEncrypted()) {    if (aesKey == null) {      throw new DeterministicUpgradeRequiresPassword();    }    keyToUse=keyToUse.decrypt(aesKey);  } else   if (aesKey != null) {    throw new IllegalStateException("AES Key was provided but wallet is not encrypted.");  }  if (chains.isEmpty()) {    log.info("Auto-upgrading pre-HD wallet to HD!");  } else {    log.info("Wallet with existing HD chain is being re-upgraded due to change in key rotation time.");  }  log.info("Instantiating new HD chain using oldest non-rotating private key (address: {})",keyToUse.toAddress(params));  byte[] entropy=checkNotNull(keyToUse.getSecretBytes());  checkState(entropy.length >= DeterministicSeed.DEFAULT_SEED_ENTROPY_BITS / 8);  entropy=Arrays.copyOfRange(entropy,0,DeterministicSeed.DEFAULT_SEED_ENTROPY_BITS / 8);  checkState(entropy.length == DeterministicSeed.DEFAULT_SEED_ENTROPY_BITS / 8);  String passphrase="";  DeterministicKeyChain chain=new DeterministicKeyChain(entropy,passphrase,keyToUse.getCreationTimeSeconds());  if (aesKey != null) {    chain=chain.toEncrypted(checkNotNull(basic.getKeyCrypter()),aesKey);  }  chains.add(chain);  return chain;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.TRACE_NODE_EXECUTED__NODE:    setNode((ExecutionNode)null);  return;}super.eUnset(featureID);}  }
class C{  public boolean performAction(){  return !actions.isEmpty();}  }
class C{  public boolean supportsOpenCursorsAcrossRollback() throws SQLException {  return false;}  }
class C{  public UplevelReference insertInto(UplevelReference references){  if (references == null || isEarlierThan(references)) {    next=references;    return this;  } else {    UplevelReference prev=references;    while (!(prev.next == null || isEarlierThan(prev.next))) {      prev=prev.next;    }    next=prev.next;    prev.next=this;    return references;  }}  }
class C{  public SIPHeader parse() throws ParseException {  SessionExpires se=new SessionExpires();  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.SESSIONEXPIRES_TO);    String nextId=lexer.getNextId();    try {      int delta=Integer.parseInt(nextId);      se.setExpires(delta);    } catch (    NumberFormatException ex) {      throw createParseException("bad integer format");    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    super.parse(se);    return se;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  private int skipToStatementStart(boolean danglingElse,boolean isInBlock){  final int NOTHING=0;  final int READ_PARENS=1;  final int READ_IDENT=2;  int mayBeMethodBody=NOTHING;  boolean isTypeBody=false;  while (true) {    nextToken();    if (isInBlock) {switch (fToken) {case Symbols.TokenIF:case Symbols.TokenELSE:case Symbols.TokenCATCH:case Symbols.TokenDO:case Symbols.TokenWHILE:case Symbols.TokenFINALLY:case Symbols.TokenFOR:case Symbols.TokenTRY:case Symbols.TokenCOLON:        return fPosition;case Symbols.TokenSTATIC:      mayBeMethodBody=READ_IDENT;    break;case Symbols.TokenSYNCHRONIZED:  if (mayBeMethodBody != READ_IDENT)   return fPosition;break;case Symbols.TokenCLASS:case Symbols.TokenINTERFACE:case Symbols.TokenENUM:isTypeBody=true;break;case Symbols.TokenSWITCH:fIndent=fPrefs.prefCaseIndent;return fPosition;}}switch (fToken) {case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenSEMICOLON:case Symbols.TokenEOF:if (isInBlock) fIndent=getBlockIndent(mayBeMethodBody == READ_IDENT,isTypeBody);return fPreviousPos;case Symbols.TokenCOLON:int pos=fPreviousPos;if (!isConditional()) return pos;break;case Symbols.TokenRBRACE:pos=fPreviousPos;if (skipScope() && looksLikeArrayInitializerIntro()) {continue;} else {if (isInBlock) fIndent=getBlockIndent(mayBeMethodBody == READ_IDENT,isTypeBody);return pos;}case Symbols.TokenRPAREN:if (isInBlock) mayBeMethodBody=READ_PARENS;case Symbols.TokenRBRACKET:case Symbols.TokenGREATERTHAN:pos=fPreviousPos;if (skipScope()) break; else return pos;case Symbols.TokenIF:if (danglingElse) return fPosition; else break;case Symbols.TokenELSE:pos=fPosition;if (skipNextIF()) break; else return pos;case Symbols.TokenDO:return fPosition;case Symbols.TokenWHILE:pos=fPosition;if (hasMatchingDo()) {break;} else {fPosition=pos;break;}case Symbols.TokenIDENT:if (mayBeMethodBody == READ_PARENS) mayBeMethodBody=READ_IDENT;break;default :}}}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscape(char c,String r){  map.put(c,checkNotNull(r));  if (c > max) {    max=c;  }  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @Override public boolean isFocused(){  return mHijackFocus || super.isFocused();}  }
class C{  public void loadParameterFromZK(){  try {    PropertyInfoExt params=_coordinator.getTargetInfo(PropertyInfoExt.class);    _maxAuthnLoginAttemtsCount=NumberUtils.toInt(params.getProperty(MAX_AUTH_LOGIN_ATTEMPTS),Constants.DEFAULT_AUTH_LOGIN_ATTEMPTS);    _maxAuthnLoginAttemtsLifeTimeInMins=NumberUtils.toInt(params.getProperty(AUTH_LOCKOUT_TIME_IN_MINUTES),Constants.DEFAULT_AUTH_LOCKOUT_TIME_IN_MINUTES);  } catch (  Exception e) {    _log.warn("load parameter from ZK error, use default values.");    _maxAuthnLoginAttemtsCount=Constants.DEFAULT_AUTH_LOGIN_ATTEMPTS;    _maxAuthnLoginAttemtsLifeTimeInMins=Constants.DEFAULT_AUTH_LOCKOUT_TIME_IN_MINUTES;  }}  }
class C{  public ProblemReporter problemReporter(){  if (this.scanner.recordLineSeparator) {    this.compilationUnit.compilationResult.lineSeparatorPositions=this.scanner.getLineEnds();  }  this.problemReporter.referenceContext=this.referenceContext;  return this.problemReporter;}  }
class C{  @Override public void putAll(Map<? extends Integer,? extends Double> map){  Iterator<? extends Entry<? extends Integer,? extends Double>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Integer,? extends Double> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  protected void createPopup(Point point){  popup=new JPopupMenu();  BaseMenuItem copy=new BaseMenuItem(m_basePanel,BaseUIPropertyCodes.COPY);  popup.add(copy);  BaseMenuItem cut=new BaseMenuItem(m_basePanel,BaseUIPropertyCodes.CUT);  popup.add(cut);  BaseMenuItem paste=new BaseMenuItem(m_basePanel,BaseUIPropertyCodes.PASTE);  popup.add(paste);  point=getSuitableLocation(point,popup.getPreferredSize(),this);  popup.show(this,point.x,point.y);}  }
class C{  @NonNull public IconDrawable sizeRes(@NonNull Context context,@DimenRes int dimenRes){  return sizePx(context.getResources().getDimensionPixelSize(dimenRes));}  }
class C{  public Frame copyStack(){  Frame frame=new Frame(locals.length,stack.length);  System.arraycopy(stack,0,frame.stack,0,stack.length);  frame.top=top;  return frame;}  }
class C{  public static long parseTime(String time){  sTime.parse3339(time);  return sTime.toMillis(false);}  }
class C{  public InterfaceFieldImpl(Field wrapped){  f=requireNonNull(wrapped);}  }
class C{  public boolean isConnected(){  return m_client.isConnected();}  }
class C{  public String sendMmsNotification(String contentLocation,long size,String subject,String dest) throws SmsException, IOException {  SmsMmsNotificationMessage mmsNotification=new SmsMmsNotificationMessage(contentLocation,size);  mmsNotification.setSubject(subject);  return sendSms(mmsNotification,dest,null);}  }
class C{  public boolean isHighEndpointIncluded(){  return isHighEndpointIncluded;}  }
class C{  public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseNameValuePair(buffer,cursor);}  }
class C{  public static Grammar load(String fileName){  Tool antlr=new Tool();  return antlr.loadGrammar(fileName);}  }
class C{  final DialogOption showYesNoMessage(String message,String title,DialogOption defaultOption){  return showYesNoMessage(message,title,JOptionPane.WARNING_MESSAGE,defaultOption);}  }
class C{  protected void readNetscapeExt(){  do {    readBlock();    if (block[0] == 1) {      int b1=((int)block[1]) & 0xff;      int b2=((int)block[2]) & 0xff;      loopCount=(b2 << 8) | b1;    }  } while ((blockSize > 0) && !err());}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_DELETE) public BusinessObjectDataAttribute deleteBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName){  return businessObjectDataAttributeService.deleteBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value),businessObjectDataVersion,businessObjectDataAttributeName));}  }
class C{  @Override public Object saveState(FacesContext context){  if (context == null) {    throw new NullPointerException();  }  if (component.initialStateMarked()) {    return saveMap(context,deltaMap);  } else {    return saveMap(context,defaultMap);  }}  }
class C{  protected AbstractImmutableMultimap(MutableMap<K,C> map){  this(map.toImmutable());}  }
class C{  public void appendName(String attrFormat,StringBuilder sb){  boolean hexFormat=false;  if (X500Principal.RFC1779.equals(attrFormat)) {    if (RFC1779_NAMES == oid.getGroup()) {      sb.append(oid.getName());    } else {      sb.append(oid.toOIDString());    }    sb.append('=');    if (value.escapedString == value.getHexString()) {      sb.append(value.getHexString().toUpperCase(Locale.US));    } else     if (value.escapedString.length() != value.rawString.length()) {      value.appendQEString(sb);    } else {      sb.append(value.escapedString);    }  } else {    Object group=oid.getGroup();    if (RFC1779_NAMES == group || RFC2253_NAMES == group) {      sb.append(oid.getName());      if (X500Principal.CANONICAL.equals(attrFormat)) {        int tag=value.getTag();        if (!ASN1StringType.UTF8STRING.checkTag(tag) && !ASN1StringType.PRINTABLESTRING.checkTag(tag) && !ASN1StringType.TELETEXSTRING.checkTag(tag)) {          hexFormat=true;        }      }    } else {      sb.append(oid.toString());      hexFormat=true;    }    sb.append('=');    if (hexFormat) {      sb.append(value.getHexString());    } else {      if (X500Principal.CANONICAL.equals(attrFormat)) {        sb.append(value.makeCanonical());      } else {        sb.append(value.escapedString);      }    }  }}  }
class C{  public void fireEventProgrammatically(Event event){  if (!event.isConsumed())   ripplerPane.fireEvent(event);}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(int initialCapacity,float loadFactor){  return new ConcurrentHashMap<K,V>(initialCapacity);}  }
class C{  public int compare(SourceFile o1,SourceFile o2){  String n1=o1.getName();  String n2=o2.getName();  return n1.compareTo(n2);}  }
class C{  public SQLRecoverableException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String xamzRequestId(){  return this.xamzRequestId;}  }
class C{  public EnumState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,PseudoState<S,E> pseudoState){  super(id,deferred,entryActions,exitActions,pseudoState);}  }
class C{  public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  timeSeries.sort();  long[] times=timeSeries.getTimestampsAsArray();  double[] values=timeSeries.getValuesAsArray();  timeSeries.clear();  for (int i=1; i < values.length - 1; i++) {    long yT1=times[i + 1];    long yT0=times[i - 1];    double xT1=values[i + 1];    double xT0=values[i - 1];    double derivativeValue=DerivativeUtil.derivative(xT1,xT0,yT1,yT0);    long derivativeTime=yT1 + (yT1 - yT0) / 2;    timeSeries.add(derivativeTime,derivativeValue);  }  functionValueMap.add(this);}  }
class C{  public Graphics create(){  return (Graphics)clone();}  }
class C{  public Signalling(Socket socket,SignallingCallback signallingCallback){}  }
class C{  public static void showError(final String message){  closeStartupDialogs();  MessageService.instance().showError(message);}  }
class C{  public FileWriteException(final Exception exception){  super(exception);  m_originalStacktrace=exception.getStackTrace();}  }
class C{  public boolean deleteFriend(String key){  SQLiteDatabase db=getWritableDatabase();  if (db == null)   return false;  if (getFriendWithKey(key) == null) {    log.debug("Friend was not in the store");    return false;  }  db.execSQL("DELETE FROM " + TABLE + " WHERE "+ COL_PUBLIC_KEY+ " = '"+ key+ "';");  return true;}  }
class C{  public void onRemoteAdapterDisconnected(){}  }
class C{  private void resetFields(){  book=null;  author=null;  rating=-1;}  }
class C{  private static void vecswap(short x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  private boolean validateNotNullFile(WSParamDocument doc){  boolean result=true;  if (StringUtils.isBlank(doc.getDocumentLocation()) && StringUtils.isBlank(doc.getDocumentName()) && StringUtils.isBlank(doc.getFileName())&& (doc.getDocumentContent() == null || doc.getDocumentContent().length == 0)) {    result=false;  }  return result;}  }
class C{  public int askNumControlBits(String systemName){  int iNum=selectNumberOfControlBits();  if (iNum == javax.swing.JOptionPane.CLOSED_OPTION) {    iNum=1;    log.warn("User cancelled without selecting number of output bits. Defaulting to 1.");  } else {    iNum=iNum + 1;  }  if (iNum == 2) {    int nAddress=-1;    nAddress=SerialAddress.getNodeAddressFromSystemName(systemName);    if (nAddress == -1) {      return (0);    }    int bitNum=SerialAddress.getBitFromSystemName(systemName);    if (bitNum == 0) {      return (0);    }    bitNum=bitNum + 1;    String conflict="";    conflict=SerialAddress.isOutputBitFree(nAddress,bitNum);    if (!conflict.equals("")) {      log.error("Assignment conflict with " + conflict + ". Turnout not created.");      notifySecondBitConflict(conflict,bitNum);      return (0);    }  }  return (iNum);}  }
class C{  boolean queryOverwrite(IPath resourcePath) throws OperationCanceledException {  String overwriteAnswer=overwriteCallback.queryOverwrite(resourcePath.makeRelative().toString());  if (overwriteAnswer.equals(IOverwriteQuery.CANCEL)) {    throw new OperationCanceledException("DataTransferMessages.DataTransfer_emptyString");  }  if (overwriteAnswer.equals(IOverwriteQuery.NO)) {    return false;  }  if (overwriteAnswer.equals(IOverwriteQuery.NO_ALL)) {    this.overwriteState=OVERWRITE_NONE;    return false;  }  if (overwriteAnswer.equals(IOverwriteQuery.ALL)) {    this.overwriteState=OVERWRITE_ALL;  }  return true;}  }
class C{  @Inject public DefaultGlobalInterlockService(SystemConfiguration _sysConfig){  super(null,_sysConfig);}  }
class C{  public JsonContentAggregatorResult(final String pipelineId,final String type){  this.pipelineId=pipelineId;  this.type=type;}  }
class C{  public static boolean validateStrictHostName(String hostName){  if (hostName == null || hostName.isEmpty()) {    return false;  }  if (hostName.length() > 253) {    return false;  }  String[] hostLabels=hostName.split("\\.",-1);  if (hostLabels.length == 0) {    return false;  }  Pattern labelPattern=Pattern.compile(VALID_HOST_NAME_LABEL_PATTERN);  Matcher matcher=null;  for (  String label : hostLabels) {    if (label.length() == 0 || label.length() > 63) {      return false;    }    matcher=labelPattern.matcher(label);    if (!matcher.matches()) {      return false;    }  }  return true;}  }
class C{  private static String normalize(String s){  StringBuffer str=new StringBuffer();  int len=(s != null) ? s.length() : 0;  for (int i=0; i < len; i++) {    char ch=s.charAt(i);    int charInt=Integer.valueOf(Integer.toString(ch)).intValue();    if (charInt < 32) {      if ((charInt == 10) || (charInt == 13) || (charInt == 9)) {      } else {        ch=' ';      }    }switch (ch) {case '<':{        str.append("&lt;");        break;      }case '>':{      str.append("&gt;");      break;    }case '&':{    str.append("&amp;");    break;  }case '"':{  str.append("&quot;");  break;}case '\r':case '\n':{if (canonical) {  str.append("&#");  str.append(Integer.toString(ch));  str.append(';');  break;}}default :{str.append(ch);}}}return (str.toString());}  }
class C{  private static void sqlQueryWithJoin(){  IgniteCache<AffinityKey<Long>,Person> cache=Ignition.ignite().cache(COLLOCATED_PERSON_CACHE);  String joinSql="from Person, \"" + ORG_CACHE + "\".Organization as org "+ "where Person.orgId = org.id "+ "and lower(org.name) = lower(?)";  print("Following people are 'ApacheIgnite' employees: ",cache.query(new SqlQuery<AffinityKey<Long>,Person>(Person.class,joinSql).setArgs("ApacheIgnite")).getAll());  print("Following people are 'Other' employees: ",cache.query(new SqlQuery<AffinityKey<Long>,Person>(Person.class,joinSql).setArgs("Other")).getAll());}  }
class C{  public boolean isSignatureDone(){  return signatureDone;}  }
class C{  CheckRepExtractor(ContractSet contracts){  this.contracts=contracts;}  }
class C{  public static boolean isExceptionIndicativeOfOverload(Exception e){  return e instanceof MySQLNonTransientConnectionException || e instanceof CommunicationsException || (e instanceof SQLNestedException && e.getCause() instanceof NoSuchElementException);}  }
class C{  float parsePos(int index,double value){  if (handleValues)   return (float)(chartView.getInnerChartLeft() + (((value - minLabelValue) * screenStep) / (labelsValues.get(1) - minLabelValue))); else   return labelsPos.get(index);}  }
class C{  protected void checkValueSource(ValueSource vs,float scores[],float delta) throws IOException {  FunctionQuery q=new FunctionQuery(vs);  TopDocs docs=indexSearcher.search(q,1000);  for (int i=0; i < docs.scoreDocs.length; i++) {    ScoreDoc gotSD=docs.scoreDocs[i];    float expectedScore=scores[gotSD.doc];    assertEquals("Not equal for doc " + gotSD.doc,expectedScore,gotSD.score,delta);  }  CheckHits.checkExplanations(q,"",indexSearcher);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public boolean isOrTerminated(){  return orTerminated;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof mxRectangle) {    mxRectangle rect=(mxRectangle)obj;    return rect.getX() == getX() && rect.getY() == getY() && rect.getWidth() == getWidth() && rect.getHeight() == getHeight();  }  return false;}  }
class C{  public void update(String oldPassword,String password,boolean encrypted){  update(oldPassword,password,encrypted,true);}  }
class C{  public WarAuthenticationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.063 -0400",hash_original_method="6AE13C43A807A8F581EF7E482513BDAF",hash_generated_method="CF5708D46158611B2F85B74F95385050") public void onBackPressed(){  if (!mFragments.popBackStackImmediate()) {    finish();  }}  }
class C{  public static File loadRootCaCert(){  return Paths.get(TESTING_CERTS_DIR.toString(),"ca.pem").toFile();}  }
class C{  @SuppressWarnings("unchecked") public Iterator<ReturnStatement> createIteratorOfReturnStatementFromString(EDataType eDataType,String initialValue){  return (Iterator<ReturnStatement>)super.createFromString(initialValue);}  }
class C{  public static Sequence createSequence(TypedOperation operation,List<Sequence> inputSequences,List<Integer> indexes){  Sequence inputSequence=Sequence.concatenate(inputSequences);  List<Variable> inputs=new ArrayList<>();  for (  Integer inputIndex : indexes) {    Variable v=inputSequence.getVariable(inputIndex);    inputs.add(v);  }  return inputSequence.extend(operation,inputs);}  }
class C{  public void dispatch(){  try {    services.getDispatchService().dispatch();  } catch (  RuntimeException ex) {    throw new EPException(ex);  }}  }
class C{  public StringMemberValue(ConstPool cp){  super('s',cp);  setValue("");}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Get from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doPost(request,response);}  }
class C{  public Matrix(){  this(1.0,1.0,0.0,0.0,0,0);}  }
class C{  public static int[] copyOfRange(int[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      int[] copy=new int[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public boolean asBoolean(){  return false;}  }
class C{  private IgniteBiTuple<Object,Boolean> annotatedValue(Object target,Set<Object> visited,boolean annFound) throws IgniteCheckedException {  assert target != null;  if (visited.contains(target))   return F.t(null,annFound);  visited.add(target);  Object val=null;  for (Class<?> cls=target.getClass(); !cls.equals(Object.class); cls=cls.getSuperclass()) {    for (    Field f : fieldsWithAnnotation(cls)) {      f.setAccessible(true);      Object fieldVal;      try {        fieldVal=f.get(target);      } catch (      IllegalAccessException e) {        throw new IgniteCheckedException("Failed to get annotated field value [cls=" + cls.getName() + ", ann="+ annCls.getSimpleName()+ ']',e);      }      if (needsRecursion(f)) {        if (fieldVal != null) {          IgniteBiTuple<Object,Boolean> tup=annotatedValue(fieldVal,visited,annFound);          if (!annFound && tup.get2())           val=tup.get1();          annFound=tup.get2();        }      } else {        if (annFound)         throw new IgniteCheckedException("Multiple annotations has been found [cls=" + cls.getName() + ", ann="+ annCls.getSimpleName()+ ']');        val=fieldVal;        annFound=true;      }    }    for (    Method m : methodsWithAnnotation(cls)) {      if (annFound)       throw new IgniteCheckedException("Multiple annotations has been found [cls=" + cls.getName() + ", ann="+ annCls.getSimpleName()+ ']');      m.setAccessible(true);      try {        val=m.invoke(target);      } catch (      Exception e) {        throw new IgniteCheckedException("Failed to get annotated method value [cls=" + cls.getName() + ", ann="+ annCls.getSimpleName()+ ']',e);      }      annFound=true;    }  }  return F.t(val,annFound);}  }
class C{  public Builder withKeyStorePath(String keyStorePath){  properties.setProperty(NettyOptions.SSL_KEY_STORE_PATH,Assert.notNull(keyStorePath,"keyStorePath"));  return this;}  }
class C{  public SIPHeader parse() throws ParseException {  AcceptLanguageList acceptLanguageList=new AcceptLanguageList();  if (debug)   dbg_enter("AcceptLanguageParser.parse");  try {    headerName(TokenTypes.ACCEPT_LANGUAGE);    while (lexer.lookAhead(0) != '\n') {      AcceptLanguage acceptLanguage=new AcceptLanguage();      acceptLanguage.setHeaderName(SIPHeaderNames.ACCEPT_LANGUAGE);      if (lexer.lookAhead(0) != ';') {        lexer.match(TokenTypes.ID);        Token value=lexer.getNextToken();        acceptLanguage.setLanguageRange(value.getTokenValue());      }      while (lexer.lookAhead(0) == ';') {        this.lexer.match(';');        this.lexer.SPorHT();        this.lexer.match('q');        this.lexer.SPorHT();        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token value=lexer.getNextToken();        try {          float fl=Float.parseFloat(value.getTokenValue());          acceptLanguage.setQValue(fl);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }        this.lexer.SPorHT();      }      acceptLanguageList.add(acceptLanguage);      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("AcceptLanguageParser.parse");  }  return acceptLanguageList;}  }
class C{  public final int hashCode(){  int hash=37;  hash+=17 * this.tierMap.hashCode() + 37;  hash+=17 * this.requiredEdges.hashCode() + 37;  hash+=17 * this.allRequiredEdges.hashCode() + 37;  hash+=17 * this.explicitlyForbiddenEdges.hashCode() + 37;  hash+=17 * this.requiredCommonCauses.hashCode() + 37;  hash+=17 * this.forbiddenCommonCauses.hashCode() + 37;  hash+=17 * this.tiersForbiddenWithin.hashCode() + 37;  hash+=17 * this.knowledgeGroups.hashCode() + 37;  hash+=17 * Boolean.valueOf(this.defaultToKnowledgeLayout).hashCode() + 37;  return hash;}  }
class C{  public <P1,P2>V putIfAbsentGetIfPresent(K key,Function2<K,V,K> keyTransformer,Function3<P1,P2,K,V> factory,P1 param1,P2 param2){  int hash=this.hash(key);  Object[] currentArray=this.table;  V newValue=null;  boolean createdValue=false;  while (true) {    int length=currentArray.length;    int index=ConcurrentHashMapUnsafe.indexFor(hash,length);    Object o=ConcurrentHashMapUnsafe.arrayAt(currentArray,index);    if (o == RESIZED || o == RESIZING) {      currentArray=this.helpWithResizeWhileCurrentIndex(currentArray,index);    } else {      Entry<K,V> e=(Entry<K,V>)o;      while (e != null) {        Object candidate=e.getKey();        if (candidate.equals(key)) {          return e.getValue();        }        e=e.getNext();      }      if (!createdValue) {        createdValue=true;        newValue=factory.value(param1,param2,key);        if (newValue == null) {          return null;        }        key=keyTransformer.value(key,newValue);      }      Entry<K,V> newEntry=new Entry<>(key,newValue,(Entry<K,V>)o);      if (ConcurrentHashMapUnsafe.casArrayAt(currentArray,index,o,newEntry)) {        this.incrementSizeAndPossiblyResize(currentArray,length,o);        return null;      }    }  }}  }
class C{  public boolean isSetSyncValueResponse(){  return this.syncValueResponse != null;}  }
class C{  private byte[] concat(byte[] arrayA,byte[] arrayB){  byte[] result=new byte[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,result,0,arrayA.length);  System.arraycopy(arrayB,0,result,arrayA.length,arrayB.length);  return result;}  }
class C{  public TrackView(){  try {    car=ImageIO.read(TrackView.class.getResource("images/beetle_red.gif"));    track=ImageIO.read(TrackView.class.getResource("images/track.jpg"));  } catch (  Exception e) {    System.out.println("Problem loading track/car images: " + e);  }  carPosition=new Point(START_POS.x,START_POS.y);  carW=car.getWidth();  carH=car.getHeight();  carWHalf=carW / 2;  carHHalf=carH / 2;  trackW=track.getWidth();  trackH=track.getHeight();}  }
class C{  public String subscribe() throws SaaSApplicationException, IllegalArgumentException, IOException {  String subscriptionId=model.getSubscription().getSubscriptionId();  SubscriptionStatus status;  String outcome=null;  if (!isServiceAccessible(model.getService().getKey())) {    redirectToAccessDeniedPage();    return BaseBean.MARKETPLACE_ACCESS_DENY_PAGE;  }  try {    VOSubscription rc=getSubscriptionService().subscribeToService(model.getSubscription(),model.getService().getVO(),new ArrayList<VOUsageLicense>(),model.getSelectedPaymentInfo(),model.getSelectedBillingContact(),subscriptionsHelper.getVoUdaFromUdaRows(getModel().getSubscriptionUdaRows(),model.getOrganizationUdaRows()));    model.setDirty(false);    menuBean.resetMenuVisibility();    if (rc == null) {      ui.handleProgress();      outcome=OUTCOME_PROCESS;    } else {      status=rc.getStatus();      getSessionBean().setSelectedSubscriptionId(rc.getSubscriptionId());      getSessionBean().setSelectedSubscriptionKey(rc.getKey());      ui.handle(status.isPending() ? INFO_SUBSCRIPTION_ASYNC_CREATED : INFO_SUBSCRIPTION_CREATED,subscriptionId,rc.getSuccessInfo());      menuBean.setCurrentPageLink(MenuBean.LINK_SUBSCRIPTION_USERS);      outcome=OUTCOME_SUCCESS;    }    conversation.end();  } catch (  NonUniqueBusinessKeyException e) {    ui.handleError(null,SUBSCRIPTION_NAME_ALREADY_EXISTS,new Object[]{subscriptionId});    outcome=SUBSCRIPTION_CONFIRMATION_PAGE;  }catch (  ObjectNotFoundException e) {    if (e.getDomainObjectClassEnum().equals(DomainObjectException.ClassEnum.SERVICE)) {      ui.handleError(null,ERROR_SERVICE_INACCESSIBLE);    } else {      ConcurrentModificationException ex=new ConcurrentModificationException();      ex.setMessageKey(ERROR_SERVICE_CHANGED);      ExceptionHandler.execute(ex);    }  }  return outcome;}  }
class C{  public void compile(File[] files) throws CompilationFailedException {  CompilationUnit unit=new CompilationUnit(configuration);  unit.addSources(files);  unit.compile();}  }
class C{  @Override public void onApplicationEvent(@SuppressWarnings("unused") ContextClosedEvent event){  this.stopAllSchedulers();}  }
class C{  public void quitGame(){  board.quitGame();}  }
class C{  public ColumnSource analyze(ConditionExpression cond){  referencedTables=new HashSet<>();  referencedColumns=new HashSet<>();  state=State.ANALYZE;  cond.accept(this);  if (referencedTables.size() == 1)   return referencedTables.iterator().next(); else   return null;}  }
class C{  private HttpResponse sendRequest(State state,AndroidHttpClient client,HttpGet request) throws StopRequest {  try {    return client.execute(request);  } catch (  IllegalArgumentException ex) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"while trying to execute request: " + ex.toString(),ex);  }catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while trying to execute request: " + ex.toString(),ex);  }}  }
class C{  public void write(OutputStream outp) throws IOException, jasError {  class_env.setSource(source_name);  class_env.write(new DataOutputStream(outp));}  }
class C{  public void GetInstance03(boolean mode) throws CertificateException, IllegalArgumentException, CRLException {  try {    CertificateFactory.getInstance(null,mProv);    fail("NullPointerException or CertificateException must be thrown when type is null");  } catch (  CertificateException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertificateFactory.getInstance(invalidValues[i],mProv);      fail("CertificateException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    CertificateException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  CertificateFactory cerF;  for (int i=0; i < validValues.length; i++) {    cerF=CertificateFactory.getInstance(validValues[i],mProv);    assertEquals("Incorrect type",cerF.getType(),validValues[i]);    assertEquals("Incorrect provider",cerF.getProvider(),mProv);    checkResult(cerF,mode);  }}  }
class C{  public void addBeanSettings(Path p,LayoutConnectivity lc,LayoutBlock layoutBlock){  p.clearSettings();  Object curConnection=null;  Object prevConnection=null;  int typeCurConnection=0;  BeanSetting bs=null;  LayoutTurnout lt=null;  if (lc.getBlock1() == layoutBlock) {    if (lc.getTrackSegment() != null) {      curConnection=lc.getTrackSegment();      prevConnection=lc.getConnectedObject();      typeCurConnection=LayoutEditor.TRACK;      if (((lc.getConnectedType() == LayoutEditor.TURNOUT_B) || (lc.getConnectedType() == LayoutEditor.TURNOUT_C)) && ((((LayoutTurnout)prevConnection).getTurnoutType() >= LayoutTurnout.RH_TURNOUT) && (((LayoutTurnout)prevConnection).getTurnoutType() <= LayoutTurnout.WYE_TURNOUT))) {        LayoutTurnout ltx=(LayoutTurnout)prevConnection;        if (lc.getConnectedType() == LayoutEditor.TURNOUT_B) {          if (ltx.getContinuingSense() == Turnout.CLOSED) {            bs=new BeanSetting(ltx.getTurnout(),ltx.getTurnoutName(),Turnout.CLOSED);          } else {            bs=new BeanSetting(ltx.getTurnout(),ltx.getTurnoutName(),Turnout.THROWN);          }          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (A): " + ltx.getName() + " "+ ltx.getLayoutBlock().getDisplayName()+ " ltx.getContinuingSense(): "+ ltx.getContinuingSense());          }        } else         if (lc.getConnectedType() == LayoutEditor.TURNOUT_C) {          if (ltx.getContinuingSense() == Turnout.CLOSED) {            bs=new BeanSetting(ltx.getTurnout(),ltx.getTurnoutName(),Turnout.THROWN);          } else {            bs=new BeanSetting(ltx.getTurnout(),ltx.getTurnoutName(),Turnout.CLOSED);          }          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (B): " + ltx.getName() + " "+ ltx.getLayoutBlock().getDisplayName()+ " ltx.getContinuingSense(): "+ ltx.getContinuingSense());          }        } else {          log.warn("Did not decode lc.getConnectedType() of {}",lc.getConnectedType());        }      } else       if (((lc.getConnectedType() >= LayoutEditor.TURNOUT_A) && (lc.getConnectedType() <= LayoutEditor.TURNOUT_D)) && ((((LayoutTurnout)prevConnection).getTurnoutType() == LayoutTurnout.RH_XOVER) || (((LayoutTurnout)prevConnection).getTurnoutType() == LayoutTurnout.LH_XOVER))) {        LayoutTurnout ltz=(LayoutTurnout)prevConnection;        if (((ltz.getTurnoutType() == LayoutTurnout.RH_XOVER) && ((lc.getConnectedType() == LayoutEditor.TURNOUT_B) || (lc.getConnectedType() == LayoutEditor.TURNOUT_D))) || ((ltz.getTurnoutType() == LayoutTurnout.LH_XOVER) && ((lc.getConnectedType() == LayoutEditor.TURNOUT_A) || (lc.getConnectedType() == LayoutEditor.TURNOUT_C)))) {          bs=new BeanSetting(ltz.getTurnout(),ltz.getTurnoutName(),Turnout.CLOSED);          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (C): " + ltz.getName() + " "+ ltz.getLayoutBlock().getDisplayName()+ " ltz.getTurnoutType(): "+ ltz.getTurnoutType()+ " lc.getConnectedType(): "+ lc.getConnectedType());          }        }      } else       if (lc.getConnectedType() >= LayoutEditor.SLIP_A && lc.getConnectedType() <= LayoutEditor.SLIP_D) {        LayoutSlip lsz=(LayoutSlip)prevConnection;        if (lsz.getSlipType() == LayoutSlip.SINGLE_SLIP) {          if (lc.getConnectedType() == LayoutEditor.SLIP_C) {            bs=new BeanSetting(lsz.getTurnout(),lsz.getTurnoutName(),lsz.getTurnoutState(LayoutSlip.STATE_AC));            if (bs.getBean() != null) {              p.addSetting(bs);            } else {              InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();              log.error("BadBeanError (D): " + lsz.getName() + " "+ lsz.getLayoutBlock().getDisplayName());            }            bs=new BeanSetting(lsz.getTurnoutB(),lsz.getTurnoutBName(),lsz.getTurnoutBState(LayoutSlip.STATE_AC));            if (bs.getBean() != null) {              p.addSetting(bs);            } else {              InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();              log.error("BadBeanError (E): " + lsz.getName() + " "+ lsz.getLayoutBlock().getDisplayName());            }          } else           if (lc.getConnectedType() == LayoutEditor.SLIP_B) {            bs=new BeanSetting(lsz.getTurnout(),lsz.getTurnoutName(),lsz.getTurnoutState(LayoutSlip.STATE_BD));            if (bs.getBean() != null) {              p.addSetting(bs);            } else {              InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();              log.error("BadBeanError (F): " + lsz.getName() + " "+ lsz.getLayoutBlock().getDisplayName()+ " "+ lsz.getTurnout()+ " "+ lsz.getTurnoutName()+ " "+ lsz.getTurnoutState(LayoutSlip.STATE_BD));            }            bs=new BeanSetting(lsz.getTurnoutB(),lsz.getTurnoutBName(),lsz.getTurnoutBState(LayoutSlip.STATE_BD));            if (bs.getBean() != null) {              p.addSetting(bs);            } else {              InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();              log.error("BadBeanError (G): " + lsz.getName() + " "+ lsz.getLayoutBlock().getDisplayName()+ " "+ lsz.getTurnoutB()+ " "+ lsz.getTurnoutBName()+ " "+ lsz.getTurnoutBState(LayoutSlip.STATE_BD));            }          } else           if (lc.getConnectedType() == LayoutEditor.SLIP_A) {          } else           if (lc.getConnectedType() == LayoutEditor.SLIP_D) {          }        } else {          log.warn("possible incomplete code: At a double slip we could go in two different directions");        }      }    } else {      lt=lc.getXover();      prevConnection=lt;      if ((lt != null) && (lt.getTurnout() != null)) {        int type=lc.getXoverBoundaryType();        if (type == LayoutConnectivity.XOVER_BOUNDARY_AB) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          curConnection=lt.getConnectA();        } else         if (type == LayoutConnectivity.XOVER_BOUNDARY_CD) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          curConnection=lt.getConnectC();        } else         if (type == LayoutConnectivity.XOVER_BOUNDARY_AC) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);          curConnection=lt.getConnectA();        } else         if (type == LayoutConnectivity.XOVER_BOUNDARY_BD) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);          curConnection=lt.getConnectB();        } else {          log.warn("failed to decode lc.getXoverBoundaryType() of {} (A)",lc.getXoverBoundaryType());        }        typeCurConnection=LayoutEditor.TRACK;        if ((bs != null) && (bs.getBean() != null)) {          p.addSetting(bs);        } else {          InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();          log.error("BadBeanError (H): " + lt.getName() + " "+ lt.getLayoutBlock().getDisplayName()+ " "+ type);        }      }    }  } else   if (lc.getXover() != null) {    lt=lc.getXover();    if ((lt != null) && (lt.getTurnout() != null)) {      int type=lc.getXoverBoundaryType();      if (type == LayoutConnectivity.XOVER_BOUNDARY_AB) {        bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);        curConnection=lt.getConnectB();      } else       if (type == LayoutConnectivity.XOVER_BOUNDARY_CD) {        bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);        curConnection=lt.getConnectD();      } else       if (type == LayoutConnectivity.XOVER_BOUNDARY_AC) {        bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);        curConnection=lt.getConnectC();      } else       if (type == LayoutConnectivity.XOVER_BOUNDARY_BD) {        bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);        curConnection=lt.getConnectD();      } else {        log.warn("failed to decode lc.getXoverBoundaryType() of {} (B)",lc.getXoverBoundaryType());      }      typeCurConnection=LayoutEditor.TRACK;      if ((bs != null) && (bs.getBean() != null)) {        p.addSetting(bs);      } else {        InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();        log.error("BadBeanError (I): " + lt.getName() + " "+ lt.getLayoutBlock().getDisplayName()+ " "+ type);      }    }  } else {    if (lc.getConnectedObject() != null) {      curConnection=lc.getConnectedObject();      prevConnection=lc.getTrackSegment();      typeCurConnection=lc.getConnectedType();      if ((typeCurConnection >= LayoutEditor.TURNOUT_A) && (typeCurConnection <= LayoutEditor.TURNOUT_D)) {        int turnoutType=((LayoutTurnout)curConnection).getTurnoutType();        if (turnoutType > LayoutTurnout.WYE_TURNOUT) {          if ((turnoutType == LayoutTurnout.DOUBLE_XOVER) || ((turnoutType == LayoutTurnout.RH_XOVER) && ((typeCurConnection == LayoutEditor.TURNOUT_A) || (typeCurConnection == LayoutEditor.TURNOUT_C))) || ((turnoutType == LayoutTurnout.LH_XOVER) && ((typeCurConnection == LayoutEditor.TURNOUT_B) || (typeCurConnection == LayoutEditor.TURNOUT_D)))) {            curConnection=null;          } else {            bs=new BeanSetting(((LayoutTurnout)curConnection).getTurnout(),((LayoutTurnout)curConnection).getTurnoutName(),Turnout.CLOSED);            if (bs.getBean() != null) {              p.addSetting(bs);            } else {              InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();              log.error("BadBeanError (J): " + ((LayoutTurnout)curConnection).getName() + " "+ ((LayoutTurnout)curConnection).getLayoutBlock().getDisplayName());            }            prevConnection=curConnection;            if (typeCurConnection == LayoutEditor.TURNOUT_A) {              curConnection=((LayoutTurnout)curConnection).getConnectB();            } else             if (typeCurConnection == LayoutEditor.TURNOUT_B) {              curConnection=((LayoutTurnout)curConnection).getConnectA();            } else             if (typeCurConnection == LayoutEditor.TURNOUT_C) {              curConnection=((LayoutTurnout)curConnection).getConnectD();            } else {              curConnection=((LayoutTurnout)curConnection).getConnectC();            }            typeCurConnection=LayoutEditor.TRACK;          }        } else         if (typeCurConnection == LayoutEditor.TURNOUT_A) {          curConnection=null;        } else         if (typeCurConnection == LayoutEditor.TURNOUT_B) {          if (((LayoutTurnout)curConnection).getContinuingSense() == Turnout.CLOSED) {            bs=new BeanSetting(((LayoutTurnout)curConnection).getTurnout(),((LayoutTurnout)curConnection).getTurnoutName(),Turnout.CLOSED);          } else {            bs=new BeanSetting(((LayoutTurnout)curConnection).getTurnout(),((LayoutTurnout)curConnection).getTurnoutName(),Turnout.THROWN);          }          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (K): " + ((LayoutTurnout)curConnection).getName() + " "+ ((LayoutTurnout)curConnection).getLayoutBlock().getDisplayName());          }          prevConnection=curConnection;          curConnection=((LayoutTurnout)curConnection).getConnectA();          typeCurConnection=LayoutEditor.TRACK;        } else         if (typeCurConnection == LayoutEditor.TURNOUT_C) {          if (((LayoutTurnout)curConnection).getContinuingSense() == Turnout.CLOSED) {            bs=new BeanSetting(((LayoutTurnout)curConnection).getTurnout(),((LayoutTurnout)curConnection).getTurnoutName(),Turnout.THROWN);          } else {            bs=new BeanSetting(((LayoutTurnout)curConnection).getTurnout(),((LayoutTurnout)curConnection).getTurnoutName(),Turnout.CLOSED);          }          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (L): " + ((LayoutTurnout)curConnection).getName() + " "+ ((LayoutTurnout)curConnection).getLayoutBlock().getDisplayName());          }          prevConnection=curConnection;          curConnection=((LayoutTurnout)curConnection).getConnectA();          typeCurConnection=LayoutEditor.TRACK;        }      } else       if (typeCurConnection == LayoutEditor.LEVEL_XING_A) {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectC();        typeCurConnection=LayoutEditor.TRACK;      } else       if (typeCurConnection == LayoutEditor.LEVEL_XING_C) {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectA();        typeCurConnection=LayoutEditor.TRACK;      } else       if (typeCurConnection == LayoutEditor.LEVEL_XING_B) {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectD();        typeCurConnection=LayoutEditor.TRACK;      } else       if (typeCurConnection == LayoutEditor.LEVEL_XING_D) {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectB();        typeCurConnection=LayoutEditor.TRACK;      } else       if (typeCurConnection == LayoutEditor.SLIP_D) {        LayoutSlip lsz=(LayoutSlip)curConnection;        curConnection=null;      }    } else {      lt=lc.getXover();      prevConnection=lt;      if ((lt != null) && (lt.getTurnout() != null)) {        int type=lc.getXoverBoundaryType();        if (type == LayoutConnectivity.XOVER_BOUNDARY_AB) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          curConnection=lt.getConnectB();        } else         if (type == LayoutConnectivity.XOVER_BOUNDARY_CD) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          curConnection=lt.getConnectD();        } else         if (type == LayoutConnectivity.XOVER_BOUNDARY_AC) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);          curConnection=lt.getConnectC();        } else         if (type == LayoutConnectivity.XOVER_BOUNDARY_BD) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);          curConnection=lt.getConnectD();        }        typeCurConnection=LayoutEditor.TRACK;        if ((bs != null) && (bs.getBean() != null)) {          p.addSetting(bs);        } else {          InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();          log.error("BadBeanError (Q): " + lt.getName() + " "+ lt.getLayoutBlock().getDisplayName());        }      }    }  }  while (curConnection != null) {    if (typeCurConnection == LayoutEditor.TRACK) {      if (((TrackSegment)curConnection).getLayoutBlock() != layoutBlock) {        curConnection=null;      } else {        if (((TrackSegment)curConnection).getConnect1() == prevConnection) {          prevConnection=curConnection;          typeCurConnection=((TrackSegment)curConnection).getType2();          curConnection=((TrackSegment)curConnection).getConnect2();        } else {          prevConnection=curConnection;          typeCurConnection=((TrackSegment)curConnection).getType1();          curConnection=((TrackSegment)curConnection).getConnect1();        }        if (typeCurConnection == LayoutEditor.POS_POINT) {          PositionablePoint pt=(PositionablePoint)curConnection;          if (pt.getType() == PositionablePoint.END_BUMPER) {            curConnection=null;          } else {            TrackSegment track=null;            if (pt.getConnect1() == prevConnection) {              track=pt.getConnect2();            } else {              track=pt.getConnect1();            }            if ((track == null) || (track.getLayoutBlock() != layoutBlock)) {              curConnection=null;            } else {              prevConnection=curConnection;              curConnection=track;              typeCurConnection=LayoutEditor.TRACK;            }          }        }      }    } else     if ((typeCurConnection >= LayoutEditor.TURNOUT_A) && (typeCurConnection <= LayoutEditor.TURNOUT_D)) {      lt=(LayoutTurnout)curConnection;      if (lt.getTurnoutType() <= LayoutTurnout.WYE_TURNOUT) {        if (lt.getLayoutBlock() != layoutBlock) {          curConnection=null;        } else {          if (typeCurConnection == LayoutEditor.TURNOUT_A) {            curConnection=null;          } else           if (typeCurConnection == LayoutEditor.TURNOUT_B) {            if (lt.getContinuingSense() == Turnout.CLOSED) {              bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);            } else {              bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);            }            if (bs.getBean() != null) {              p.addSetting(bs);            } else {              InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();              log.error("BadBeanError (R): " + lt.getName() + " "+ lt.getLayoutBlock().getDisplayName());            }            if (lt.getLayoutBlock() != layoutBlock) {              curConnection=null;            } else {              prevConnection=curConnection;              curConnection=lt.getConnectA();              typeCurConnection=LayoutEditor.TRACK;            }          } else           if (typeCurConnection == LayoutEditor.TURNOUT_C) {            if (lt.getContinuingSense() == Turnout.CLOSED) {              bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.THROWN);            } else {              bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);            }            if (bs.getBean() != null) {              p.addSetting(bs);            } else {              InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();              log.error("BadBeanError (S) LayoutTurnout " + lt.getName() + " has Turnout: "+ lt.getTurnout()+ " turnoutName: "+ lt.getTurnoutName());            }            if (lt.getLayoutBlock() != layoutBlock) {              curConnection=null;            } else {              prevConnection=curConnection;              curConnection=lt.getConnectA();              typeCurConnection=LayoutEditor.TRACK;            }          }        }      } else       if (lt.getTurnoutType() == LayoutTurnout.DOUBLE_XOVER) {        curConnection=null;      } else       if (lt.getTurnoutType() == LayoutTurnout.RH_XOVER) {        if ((typeCurConnection == LayoutEditor.TURNOUT_A) || (typeCurConnection == LayoutEditor.TURNOUT_C)) {          curConnection=null;        } else         if (typeCurConnection == LayoutEditor.TURNOUT_B) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (T) LayoutTurnout " + lt.getName() + " has Turnout: "+ lt.getTurnout()+ " turnoutName: "+ lt.getTurnoutName());          }          if (lt.getLayoutBlock() != layoutBlock) {            curConnection=null;          } else {            prevConnection=curConnection;            curConnection=lt.getConnectA();            typeCurConnection=LayoutEditor.TRACK;          }        } else         if (typeCurConnection == LayoutEditor.TURNOUT_D) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (U) LayoutTurnout " + lt.getName() + " has Turnout: "+ lt.getTurnout()+ " turnoutName: "+ lt.getTurnoutName());          }          if (lt.getLayoutBlockC() != layoutBlock) {            curConnection=null;          } else {            prevConnection=curConnection;            curConnection=lt.getConnectC();            typeCurConnection=LayoutEditor.TRACK;          }        }      } else       if (lt.getTurnoutType() == LayoutTurnout.LH_XOVER) {        if ((typeCurConnection == LayoutEditor.TURNOUT_B) || (typeCurConnection == LayoutEditor.TURNOUT_D)) {          curConnection=null;        } else         if (typeCurConnection == LayoutEditor.TURNOUT_A) {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (V) LayoutTurnout " + lt.getName() + " has Turnout: "+ lt.getTurnout()+ " turnoutName: "+ lt.getTurnoutName());          }          if (lt.getLayoutBlockB() != layoutBlock) {            curConnection=null;          } else {            prevConnection=curConnection;            curConnection=lt.getConnectB();            typeCurConnection=LayoutEditor.TRACK;          }        } else {          bs=new BeanSetting(lt.getTurnout(),lt.getTurnoutName(),Turnout.CLOSED);          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (W) LayoutTurnout " + lt.getName() + " has Turnout: "+ lt.getTurnout()+ " turnoutName: "+ lt.getTurnoutName());          }          if (lt.getLayoutBlockD() != layoutBlock) {            curConnection=null;          } else {            prevConnection=curConnection;            curConnection=lt.getConnectD();            typeCurConnection=LayoutEditor.TRACK;          }        }      }    } else     if (typeCurConnection == LayoutEditor.LEVEL_XING_A) {      if (((LevelXing)curConnection).getLayoutBlockAC() != layoutBlock) {        curConnection=null;      } else {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectC();        typeCurConnection=LayoutEditor.TRACK;      }    } else     if (typeCurConnection == LayoutEditor.LEVEL_XING_B) {      if (((LevelXing)curConnection).getLayoutBlockBD() != layoutBlock) {        curConnection=null;      } else {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectD();        typeCurConnection=LayoutEditor.TRACK;      }    } else     if (typeCurConnection == LayoutEditor.LEVEL_XING_C) {      if (((LevelXing)curConnection).getLayoutBlockAC() != layoutBlock) {        curConnection=null;      } else {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectA();        typeCurConnection=LayoutEditor.TRACK;      }    } else     if (typeCurConnection == LayoutEditor.LEVEL_XING_D) {      if (((LevelXing)curConnection).getLayoutBlockBD() != layoutBlock) {        curConnection=null;      } else {        prevConnection=curConnection;        curConnection=((LevelXing)curConnection).getConnectB();        typeCurConnection=LayoutEditor.TRACK;      }    } else     if (typeCurConnection >= LayoutEditor.SLIP_A && typeCurConnection <= LayoutEditor.SLIP_D) {      LayoutSlip ls=(LayoutSlip)curConnection;      if (ls.getLayoutBlock() != layoutBlock) {        curConnection=null;      } else       if (ls.getSlipType() == LayoutSlip.SINGLE_SLIP) {        if (typeCurConnection == LayoutEditor.SLIP_C) {          bs=new BeanSetting(ls.getTurnout(),ls.getTurnoutName(),ls.getTurnoutState(LayoutSlip.STATE_AC));          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (X): " + ls.getName() + " "+ ls.getLayoutBlock().getDisplayName());          }          bs=new BeanSetting(ls.getTurnoutB(),ls.getTurnoutBName(),ls.getTurnoutBState(LayoutSlip.STATE_AC));          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (Y): " + ls.getName() + " "+ ls.getLayoutBlock().getDisplayName());          }          prevConnection=curConnection;          curConnection=((LayoutSlip)curConnection).getConnectC();          typeCurConnection=LayoutEditor.TRACK;        } else         if (typeCurConnection == LayoutEditor.SLIP_B) {          bs=new BeanSetting(ls.getTurnout(),ls.getTurnoutName(),ls.getTurnoutState(LayoutSlip.STATE_BD));          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (Z): " + ls.getName() + " "+ ls.getLayoutBlock().getDisplayName());          }          bs=new BeanSetting(ls.getTurnoutB(),ls.getTurnoutBName(),ls.getTurnoutBState(LayoutSlip.STATE_BD));          if (bs.getBean() != null) {            p.addSetting(bs);          } else {            InstanceManager.getDefault(LayoutBlockManager.class).addBadBeanError();            log.error("BadBeanError (1): " + ls.getName() + " "+ ls.getLayoutBlock().getDisplayName());          }          prevConnection=curConnection;          curConnection=((LayoutSlip)curConnection).getConnectB();          typeCurConnection=LayoutEditor.TRACK;        } else {          curConnection=null;        }      } else {        curConnection=null;      }    } else     if (typeCurConnection >= 50) {      if (log.isDebugEnabled()) {        log.debug("Layout Block: " + layoutBlock.getDisplayName() + " found track type: "+ typeCurConnection+ " to Block: "+ p.getBlock().getDisplayName()+ " Is potentially assigned to turntable ray");      }      curConnection=null;    } else {      log.error("Layout Block: " + layoutBlock.getDisplayName() + " found unknown track type: "+ typeCurConnection+ " to Block: "+ p.getBlock().getDisplayName());      break;    }  }}  }
class C{  public static Stopwatch createStarted(Ticker ticker){  return new Stopwatch(ticker).start();}  }
class C{  public static InlineQueryResultArticleBuilder builder(){  return new InlineQueryResultArticleBuilder();}  }
class C{  public static String normalizeDir(String path){  return (path != null && (!(path.endsWith("/") || path.endsWith("\\")))) ? path + File.separator : path;}  }
class C{  @DSComment("data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSSink(DSSinkKind.NFC) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:50.189 -0500",hash_original_method="FB48E937FC56CBD69B2A6F082227DD21",hash_generated_method="DE7D3367A8D67D13F8EFFB1D24B2E12A") public NdefRecord(short tnf,byte[] type,byte[] id,byte[] payload){  this(tnf,type,id,payload,(byte)(FLAG_MB | FLAG_ME));}  }
class C{  private String makeMetalinkDocument(Iterable<Product> lp) throws ODataException {  try {    MetalinkBuilder mb=new MetalinkBuilder();    for (    Product p : lp) {      String serviceRoot=makeLink().toString();      String product_entity="";      if (!serviceRoot.contains(V1Model.PRODUCT.getName()))       product_entity=V1Model.PRODUCT.getName() + "('" + p.getId()+ "')/";      String url=serviceRoot + product_entity + "$value";      mb.addFile(p.getName() + ".zip").addUrl(url,null,0);    }    StringWriter sw=new StringWriter();    Document doc=mb.build();    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(new DOMSource(doc),new StreamResult(sw));    return sw.toString();  } catch (  ParserConfigurationException e) {    throw new ODataException(e);  }catch (  TransformerException e) {    throw new ODataException(e);  }}  }
class C{  public boolean hasInlinedEdge(RVMMethod caller,int bcIndex,RVMMethod callee){  if (MCInformation == null)   return false;  if (inlineEncoding == null)   return false;  return OptEncodedCallSiteTree.edgePresent(caller.getId(),bcIndex,callee.getId(),inlineEncoding);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.178 -0500",hash_original_method="830DBE6B0CD66B7FB13D1DDCBCB1919D",hash_generated_method="F2C884192B64A3A56DC7DFFCF33158E7") public boolean clipRect(RectF rect){  addTaint(rect.getTaint());  return getTaintBoolean();}  }
class C{  public static byte[] fourBytePacket(int address,boolean longAddr,byte arg1,byte arg2,byte arg3,byte arg4){  if (!addressCheck(address,longAddr)) {    return null;  }  byte[] retVal;  if (longAddr) {    retVal=new byte[7];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=arg1;    retVal[3]=arg2;    retVal[4]=arg3;    retVal[5]=arg4;    retVal[6]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]^ retVal[4]^ retVal[5]);  } else {    retVal=new byte[6];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=arg1;    retVal[2]=arg2;    retVal[3]=arg3;    retVal[4]=arg4;    retVal[5]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]^ retVal[3]^ retVal[4]);  }  return retVal;}  }
class C{  public static final void putDeletePlaylistEntryRequest(String playlistEntryId) throws JSONException, IllegalArgumentException {  JSONObject deleteObject=new JSONObject();  deleteObject.put("delete",playlistEntryId);  mPlaylistEntriesMutationsArray.put(deleteObject);}  }
class C{  public FunctionInputPanel(FunctionInput input,String inputValue){  this.inputValue=inputValue;  this.input=input;  initGUI();  addMouseListener(createOrGetHoverMouseListener());}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  writer.write(operatorName);  if (!input.isEmpty()) {    writer.write("(");    String delimiter="";    for (    DataFlowOperatorInput inputItem : input) {      writer.write(delimiter);      writeInput(inputItem,writer);      if (inputItem.getOptionalAsName() != null) {        writer.write(" as ");        writer.write(inputItem.getOptionalAsName());      }      delimiter=", ";    }    writer.write(")");  }  if (!output.isEmpty()) {    writer.write(" -> ");    String delimiter="";    for (    DataFlowOperatorOutput outputItem : output) {      writer.write(delimiter);      writer.write(outputItem.getStreamName());      writeTypes(outputItem.getTypeInfo(),writer);      delimiter=", ";    }  }  if (parameters.isEmpty()) {    writer.write(" {}");    formatter.endDataFlowOperatorDetails(writer);  } else {    writer.write(" {");    formatter.beginDataFlowOperatorDetails(writer);    String delimiter=",";    int count=0;    for (    DataFlowOperatorParameter parameter : parameters) {      parameter.toEpl(writer);      count++;      if (parameters.size() > count) {        writer.write(delimiter);      }      formatter.endDataFlowOperatorConfig(writer);    }    writer.write("}");    formatter.endDataFlowOperatorDetails(writer);  }}  }
class C{  public AbBottomBar(Context context,AttributeSet attrs){  super(context,attrs);  ininBottomBar(context);}  }
class C{  private void syncUser(ContentProviderClient cp,Sync<User> sync) throws RemoteException {  User user=sync.object;  ContentValues vals=new ContentValues(1);switch (sync.action) {case INSERT:    user.localId=Contacts.idForHash(user.emailHash);  if (user.localId > 0) {    vals.put(Contacts.GLOBAL_ID,user.globalId);    cp.update(ContentUris.withAppendedId(CONTACTS_URI,user.localId),vals,null,null);    cp.insert(SYNCS_URI,Syncs.values(sync));  }break;case UPDATE:int following=user.isFollowing ? 1 : 0;vals.put(Contacts.FOLLOWING,following);String sel=Contacts.GLOBAL_ID + " = ? AND " + Contacts.FOLLOWING+ " <> ?";String[] args=Elements.toStrings(user.globalId,following);if (cp.update(CONTACTS_URI,vals,sel,args) > 0 && user.isFollowing) {ReviewsService.download(user.globalId);}break;}}  }
class C{  public boolean requiresTunnel(){  return address.sslSocketFactory != null && proxy.type() == Proxy.Type.HTTP;}  }
class C{  public Country(String iso3166Alpha2Code,String iso3166Alpha3Code,int iso3166NumericCode){  super();  this.setIso3166Alpha2Code(iso3166Alpha2Code);  this.setIso3166Alpha3Code(iso3166Alpha3Code);  this.setIso3166NumericCode(iso3166NumericCode);}  }
class C{  protected void configureReader() throws SAXException {  ContentHandler handler=xmlReader.getContentHandler();  if (handler == null) {    xmlReader.setContentHandler(new DefaultHandler());  }  xmlReader.setFeature("http://xml.org/sax/features/validation",true);  xmlReader.setFeature("http://xml.org/sax/features/namespaces",true);  xmlReader.setFeature("http://xml.org/sax/features/namespace-prefixes",false);}  }
class C{  public static byte[] removeAllInstancesOfOp(byte[] inputScript,int opCode){  return removeAllInstancesOf(inputScript,new byte[]{(byte)opCode});}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.823 -0500",hash_original_method="5BA484CD985BE2E9792A2B4863AB23E2",hash_generated_method="106D90FA668A6BA44AF7F4BC54AA527C") public void run(){  this.messageChannels=new LinkedList();  if (sipStack.threadPoolSize != -1) {    for (int i=0; i < sipStack.threadPoolSize; i++) {      UDPMessageChannel channel=new UDPMessageChannel(sipStack,this);      this.messageChannels.add(channel);    }  }  ThreadAuditor.ThreadHandle threadHandle=sipStack.getThreadAuditor().addCurrentThread();  while (this.isRunning) {    try {      threadHandle.ping();      int bufsize=sock.getReceiveBufferSize();      byte message[]=new byte[bufsize];      DatagramPacket packet=new DatagramPacket(message,bufsize);      sock.receive(packet);      if (sipStack.stackDoesCongestionControl) {        if (this.messageQueue.size() >= HIGHWAT) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logDebug("Dropping message -- queue length exceeded");          }          continue;        } else         if (this.messageQueue.size() > LOWAT && this.messageQueue.size() < HIGHWAT) {          float threshold=((float)(messageQueue.size() - LOWAT)) / ((float)(HIGHWAT - LOWAT));          boolean decision=Math.random() > 1.0 - threshold;          if (decision) {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Dropping message with probability  " + (1.0 - threshold));            }            continue;          }        }      }      if (sipStack.threadPoolSize != -1) {synchronized (this.messageQueue) {          this.messageQueue.add(packet);          this.messageQueue.notify();        }      } else {        new UDPMessageChannel(sipStack,this,packet);      }    } catch (    SocketTimeoutException ex) {    }catch (    SocketException ex) {      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logDebug("UDPMessageProcessor: Stopping");      isRunning=false;synchronized (this.messageQueue) {        this.messageQueue.notifyAll();      }    }catch (    IOException ex) {      isRunning=false;      ex.printStackTrace();      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logDebug("UDPMessageProcessor: Got an IO Exception");    }catch (    Exception ex) {      if (sipStack.isLoggingEnabled())       getSIPStack().getStackLogger().logDebug("UDPMessageProcessor: Unexpected Exception - quitting");      InternalErrorHandler.handleException(ex);      return;    }  }}  }
class C{  public HyperlinkEvent(Object source,EventType type,URL u,String desc,Element sourceElement){  super(source);  this.type=type;  this.u=u;  this.desc=desc;  this.sourceElement=sourceElement;}  }
class C{  public Latch(boolean open){  this.open=open;}  }
class C{  public static AuthorizationException fromOAuthRedirect(@NonNull Uri redirectUri){  String error=redirectUri.getQueryParameter(PARAM_ERROR);  String errorDescription=redirectUri.getQueryParameter(PARAM_ERROR_DESCRIPTION);  String errorUri=redirectUri.getQueryParameter(PARAM_ERROR_URI);  AuthorizationException base=AuthorizationRequestErrors.byString(error);  return new AuthorizationException(base.type,base.code,error,errorDescription != null ? errorDescription : base.errorDescription,errorUri != null ? Uri.parse(errorUri) : base.errorUri,null);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.GENERATE___GENERATE_1:    setGenerate_1(GENERATE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @Override protected vholder newViewHolder(View view){  return new vholder(view);}  }
class C{  public void incrementCount(K key,V value,double count){  Counter<V> valueCounter=ensureCounter(key);  valueCounter.incrementCount(value,count);}  }
class C{  public int insertTest(TestCase test,String comment){  int id=insertTest(test);  if (testComment.containsKey(id)) {    if (!testComment.get(id).contains(comment))     testComment.put(id,testComment.get(id) + NEWLINE + METHOD_SPACE+ "//"+ comment);  } else   testComment.put(id,comment);  return id;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TVARIABLE__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);case TypesPackage.TVARIABLE__TYPE_REF:  return basicSetTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  public static String sortIgnoreEmpty(String list,String sortType,String sortOrder,String delimiter) throws PageException {  return _sort(toStringArray(listToArrayRemoveEmpty(list,delimiter)),sortType,sortOrder,delimiter);}  }
class C{  protected void resetOptions(){  m_InfoGains=null;  m_missing_merge=true;  m_Binarize=false;}  }
class C{  public EscapedCharacterClassAtom createEscapedCharacterClassAtom(){  EscapedCharacterClassAtomImpl escapedCharacterClassAtom=new EscapedCharacterClassAtomImpl();  return escapedCharacterClassAtom;}  }
class C{  public PathCondition negate(int branchConditionIndex){  if (branchConditionIndex < 0 || branchConditionIndex >= this.pathCondition.size()) {    throw new IndexOutOfBoundsException("The position " + branchConditionIndex + " does not exists");  }  List<BranchCondition> newPathCondition=new LinkedList<BranchCondition>();  for (int i=0; i < branchConditionIndex; i++) {    BranchCondition b=pathCondition.get(i);    newPathCondition.add(b);  }  BranchCondition targetBranch=this.pathCondition.get(branchConditionIndex);  Constraint<?> negation=targetBranch.getConstraint().negate();  BranchCondition negatedBranch=new BranchCondition(targetBranch.getClassName(),targetBranch.getMethodName(),targetBranch.getBranchIndex(),negation,targetBranch.getSupportingConstraints());  newPathCondition.add(negatedBranch);  return new PathCondition(newPathCondition);}  }
class C{  public CComponentSynchronizer(final CAddressSpaceNodeComponent component,final INaviAddressSpace addressSpace,final CStandardEditPanel stdEditPanel,final CDebuggerComboBox debuggerCombo,final TitledBorder titledBorder){  m_component=component;  m_addressSpace=addressSpace;  m_stdEditPanel=stdEditPanel;  m_debuggerCombo=debuggerCombo;  m_titledBorder=titledBorder;  addressSpace.addListener(m_addressSpaceListener);  addressSpace.getConfiguration().addListener(m_addressSpaceConfigurationListener);  if (addressSpace.isLoaded()) {    addressSpace.getContent().addListener(m_addressSpaceContentListener);  }  m_titledBorder.setTitle(getBorderText());}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void test_getInstanceLjava_lang_String01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext sslContext;  for (int i=0; i < validValues.length; i++) {    sslContext=SSLContext.getInstance(validValues[i]);    assertNotNull("No SSLContext created",sslContext);    assertEquals("Invalid protocol",validValues[i],sslContext.getProtocol());  }}  }
class C{  private boolean matchesPath(String routePath,String pathToMatch){  routePath=routePath.replaceAll(Path.VAR_REGEXP,Path.VAR_REPLACE);  return pathToMatch.matches("(?i)" + routePath);}  }
class C{  static LuaValue lower(LuaValue arg){  return valueOf(arg.checkjstring().toLowerCase());}  }
class C{  public static int asInt(String str,int def){  Integer i=asInt(str);  return (i == null) ? def : i;}  }
class C{  public boolean hasLoadedCubes(){  return !this.cubeMap.isEmpty();}  }
class C{  protected void determineActiveAttributes(){  if (this.isHighlighted()) {    if (this.getHighlightAttributes() != null)     this.activeAttributes.copy(this.getHighlightAttributes()); else {      if (this.getAttributes() != null)       this.activeAttributes.copy(this.getAttributes()); else       this.activeAttributes.copy(defaultAttributes);    }  } else   if (this.getAttributes() != null) {    this.activeAttributes.copy(this.getAttributes());  } else {    this.activeAttributes.copy(defaultAttributes);  }}  }
class C{  public boolean canInvert(){  return true;}  }
class C{  int parseTimeZone(String source,int ofs) throws ParseException {  char tzSign=source.charAt(0);  if (tzSign == SIGN_NEGATIVE || tzSign == SIGN_POSITIVE) {    source=source.substring(1);    int index=2;    if (source.length() == 3) {      index--;    }    int tzHours=parseNumber(source.substring(0,index),ofs,"timezone",0,23);    int tzMinutes=parseNumber(source.substring(index),ofs,"timezone",0,59);    tzMinutes+=tzHours * 60;    if (tzSign != SIGN_NEGATIVE) {      tzMinutes=-tzMinutes;    }    return tzMinutes;  }  if (source.startsWith(GMT)) {    int index=source.indexOf(':');    if (index != -1) {      source=source.substring(3,index) + source.substring(index + 1);    } else {      source=source.substring(3);    }    return parseTimeZone(source,ofs);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(source)) {        TimeZone tz=TimeZone.getTimeZone(timezone[DateFormatSymbols.ZONE_ID]);        return -(tz.getRawOffset() / MILLIS_TO_MINUTES);      }    }  }  return throwInvalid("timezone",ofs);}  }
class C{  public void testBug14815() throws Exception {  try {    createTable("testBug14815_1","(field_1_1 int)");    createTable("testBug14815_2","(field_2_1 int)");    boolean lcTableNames=this.conn.getMetaData().storesLowerCaseIdentifiers();    String tableName1=lcTableNames ? "testbug14815_1" : "testBug14815_1";    String tableName2=lcTableNames ? "testbug14815_2" : "testBug14815_2";    this.rs=this.conn.getMetaData().getColumns(this.conn.getCatalog(),null,"testBug14815%","%");    assertTrue(this.rs.next());    assertEquals(tableName1,this.rs.getString("TABLE_NAME"));    assertEquals("field_1_1",this.rs.getString("COLUMN_NAME"));    assertTrue(this.rs.next());    assertEquals(tableName2,this.rs.getString("TABLE_NAME"));    assertEquals("field_2_1",this.rs.getString("COLUMN_NAME"));  }  finally {    if (this.rs != null) {      this.rs.close();      this.rs=null;    }  }}  }
class C{  public void showAddListDialog(View view){  DialogFragment dialog=AddListDialogFragment.newInstance(mEncodedEmail);  dialog.show(MainActivity.this.getFragmentManager(),"AddListDialogFragment");}  }
class C{  protected void toStringInfo(int tab,StringBuffer buffer,Object info,boolean showResolvedInfo){  buffer.append(tabString(tab));  if (this.names.length == 0) {    buffer.append("<default>");  } else {    toStringName(buffer);  }  if (info == null) {    buffer.append(" (not open)");  } else {    if (tab > 0) {      buffer.append(" (...)");    }  }}  }
class C{  protected int unwrapKey(Object key){  return ((Integer)key).intValue();}  }
class C{  public static <E extends Comparable<E>>int countLeafNodes(BinaryNode<E> node){  if (node == null) {    return 0;  } else   if (node.left == null && node.right == null) {    return 1;  } else {    return countLeafNodes(node.left) + countLeafNodes(node.right);  }}  }
class C{  void borderPanel(){  Color desiredColor=null;  JPanel borderPanel=new JPanel();  Integer[] intArray=new Integer[_backgroundcolors.length];  int borderCurrentColor=_backgroundcolors.length - 1;  for (int i=0; i < (_backgroundcolors.length - 1); i++) {    intArray[i]=Integer.valueOf(i);    try {      Field f=Color.class.getField((_fontcolors[i].toUpperCase()).replaceAll(" ","_"));      desiredColor=(Color)f.get(null);    } catch (    Exception ce) {      log.error("Unable to convert the selected font color to a color " + ce);    }    if (desiredColor != null && desiredColor.equals(defaultBorderColor)) {      borderCurrentColor=i;    }  }  intArray[_backgroundcolors.length - 1]=Integer.valueOf(_backgroundcolors.length - 1);  borderColorCombo=new JComboBox<Integer>(intArray);  borderColorCombo.setRenderer(new ColorComboBoxRenderer<Integer>());  borderColorCombo.setMaximumRowCount(5);  borderColorCombo.setSelectedIndex(borderCurrentColor);  borderColorCombo.addActionListener(PreviewActionListener);  JPanel borderColorPanel=new JPanel();  borderColorPanel.add(new JLabel(Bundle.getMessage("borderColor") + ": "));  borderColorPanel.add(borderColorCombo);  JPanel borderSizePanel=new JPanel();  borderSizeTextSpin=getSpinner(borderSize,Bundle.getMessage("borderSize"));  borderSizeTextSpin.addChangeListener(SpinnerChangeListener);  borderSizePanel.add(new JLabel(Bundle.getMessage("borderSize") + ": "));  borderSizePanel.add(borderSizeTextSpin);  JPanel marginSizePanel=new JPanel();  marginSizeTextSpin=getSpinner(marginSize,Bundle.getMessage("marginSize"));  marginSizeTextSpin.addChangeListener(SpinnerChangeListener);  marginSizePanel.add(new JLabel(Bundle.getMessage("marginSize") + ": "));  marginSizePanel.add(marginSizeTextSpin);  borderPanel.setLayout(new BoxLayout(borderPanel,BoxLayout.Y_AXIS));  borderPanel.add(borderColorPanel);  borderPanel.add(borderSizePanel);  borderPanel.add(marginSizePanel);  propertiesPanel.addTab(Bundle.getMessage("Border"),null,borderPanel,Bundle.getMessage("BorderTabTooltip"));}  }
class C{  public void configure(){  TrafficController.instance().connectPort(this);  jmri.InstanceManager.setCommandStation(TrafficController.instance());  jmri.jmrix.direct.ActiveFlag.setActive();}  }
class C{  public void applyButtonActionPerformed(java.awt.event.ActionEvent e){  try {    if (light != null) {      light.removePropertyChangeListener(this);    }    try {      light=InstanceManager.lightManagerInstance().provideLight(adrTextField.getText());    } catch (    IllegalArgumentException ex) {      nowStateTextField.setText(rb.getString("LightErrorButtonNameBad") + adrTextField.getText());    }    double min=Double.parseDouble(intensityMinTextField.getText()) / 100.;    double max=Double.parseDouble(intensityMaxTextField.getText()) / 100.;    double time=Double.parseDouble(transitionTimeTextField.getText());    if (log.isDebugEnabled()) {      log.debug("setting min: " + min + " max: "+ max+ " transition: "+ time);    }    light.setMinIntensity(min);    light.setMaxIntensity(max);    light.setTransitionTime(time);    updateLightStatusFields(false);  } catch (  Exception ex) {    log.error(rb.getString("LightErrorApplyButtonException") + ex.toString());    nowStateTextField.setText("ERROR");  }}  }
class C{  public void updateFloat(String columnName,float x) throws SQLException {  updateFloat(findColumn(columnName),x);}  }
class C{  public CoverageIntVdt(String a,int v){  attribute=a.toLowerCase().intern();  value=v;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.mbr=new ModifiableHyperBoundingBox();  this.mbr.readExternal(in);}  }
class C{  public static <T>T createComponent(Class<T> componentClass,Object... dependencies){  String fqn=componentClass.getName();  String packageName=componentClass.getPackage().getName();  String simpleName=fqn.substring(packageName.length() + 1);  String generatedName=(packageName + ".Dagger" + simpleName).replace('$','_');  try {    Class<?> generatedClass=Class.forName(generatedName);    Object builder=generatedClass.getMethod("builder").invoke(null);    for (    Method method : builder.getClass().getDeclaredMethods()) {      Class<?>[] params=method.getParameterTypes();      if (params.length == 1) {        Class<?> dependencyClass=params[0];        for (        Object dependency : dependencies) {          if (dependencyClass.isAssignableFrom(dependency.getClass())) {            method.invoke(builder,dependency);            break;          }        }      }    }    return (T)builder.getClass().getMethod("build").invoke(builder);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void finalize(){  end();}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.CHECK__CONDITION:    return basicSetCondition(null,msgs);case SexecPackage.CHECK__REFS:  return ((InternalEList<?>)getRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void pickMedia(){  try {    pick();  } catch (  PickerException e) {    e.printStackTrace();  }}  }
class C{  @Override public void write(byte[] b,int off,int len){  checkNotNull(b);}  }
class C{  public HashMap<K,V> cloneTuple(Map<K,V> tuple){  if (tuple == null) {    return null;  }  HashMap<K,V> ret=new HashMap<K,V>(tuple.size());  for (  Map.Entry<K,V> e : tuple.entrySet()) {    ret.put(cloneKey(e.getKey()),cloneValue(e.getValue()));  }  return ret;}  }
class C{  public static Project readProject(java.io.File buildFile) throws IOException {  org.apache.tools.ant.Project antProject=new org.apache.tools.ant.Project();  antProject.setBasedir(buildFile.getParentFile().getAbsolutePath());  try {    ProjectHelper2.configureProject(antProject,buildFile);  } catch (  Exception e) {    return antProject;  }  return antProject;}  }
class C{  private Region createRegion(String name,Compressor compressor,boolean offHeap){  return getCache().<String,String>createRegionFactory().setDataPolicy(DataPolicy.REPLICATE).setCloningEnabled(true).setCompressor(compressor).setOffHeap(offHeap).create(name);}  }
class C{  protected void paintSquiggle(Graphics g,Rectangle r){  int x=r.x;  int y=r.y + r.height - 1;  int delta=-AMT;  while (x < r.x + r.width) {    g.drawLine(x,y,x + AMT,y + delta);    y+=delta;    delta=-delta;    x+=AMT;  }}  }
class C{  public static Drawable $tint(Drawable originDrawable,int color){  return $tint(originDrawable,ColorStateList.valueOf(color));}  }
class C{  public ObserveRequest(ContentFormat format,String path){  this(format,new LwM2mPath(path),null);}  }
class C{  public String wikiRuleString(XMLDocumentationHandler handler,String prefix){  String html=prefix + "At least one of:";  for (  XMLSyntaxRule rule : rules) {    html+=rule.wikiRuleString(handler,prefix + "*");  }  html+="\n";  return html;}  }
class C{  public static boolean containsSqlScriptDelimiters(String script,String delim){  boolean inLiteral=false;  char[] content=script.toCharArray();  for (int i=0; i < script.length(); i++) {    if (content[i] == '\'') {      inLiteral=!inLiteral;    }    if (!inLiteral && script.startsWith(delim,i)) {      return true;    }  }  return false;}  }
class C{  public void testDoConfigureSetsDefaultAddress() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(GeneralPropertySet.HOSTNAME),"//Server/@ListenAddress",config);}  }
class C{  public static ByteBuffer ensureCapacity(ByteBuffer buff,int len){  len+=1024;  if (buff.remaining() > len) {    return buff;  }  return grow(buff,len);}  }
class C{  public DriverTask expandVolume(StorageVolume storageVolume,long newCapacity){  DriverTask task=new DellSCDriverTask("expandVolume");  try {    StorageCenterAPI api=connectionManager.getConnection(storageVolume.getStorageSystemId());    ScVolume scVol=api.expandVolume(storageVolume.getNativeId(),SizeUtil.byteToMeg(newCapacity));    storageVolume.setProvisionedCapacity(SizeUtil.sizeStrToBytes(scVol.configuredSize));    task.setStatus(TaskStatus.READY);    LOG.info("Expanded volume '{}'",scVol.name);  } catch (  DellSCDriverException|StorageCenterAPIException dex) {    String error=String.format("Error expanding volume %s: %s",storageVolume.getDisplayName(),dex);    LOG.error(error);    task.setMessage(error);    task.setStatus(TaskStatus.FAILED);  }  return task;}  }
class C{  private ExprKraken parseMulExpr(){  ExprKraken left=parseSimpleTerm();  while (true) {    Token token=scanToken();switch (token) {case STAR:      left=new BinaryExpr(BinaryOp.MUL,left,parseSimpleTerm());    break;case DIV:  left=new BinaryExpr(BinaryOp.DIV,left,parseSimpleTerm());break;case MOD:left=new BinaryExpr(BinaryOp.MOD,left,parseSimpleTerm());break;default :_token=token;return left;}}}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  public EventTimeSourceBuilder<T> emit(T elem,Moment timeInterval,int times){  builder.emit(elem,timeInterval,times);  return this;}  }
class C{  public Message(Message other){  if (other.isSetSessionIDs()) {    List<String> __this__sessionIDs=new ArrayList<String>();    for (    String other_element : other.sessionIDs) {      __this__sessionIDs.add(other_element);    }    this.sessionIDs=__this__sessionIDs;  }  if (other.isSetPacket()) {    this.packet=new Packet(other.packet);  }}  }
class C{  public void addRole(IRole role){  if (!this.roles.contains(role))   this.roles.add(role);}  }
class C{  public static MutableLocation middle(MutableLocation l1,MutableLocation l2){  double x=(l1.getX() + l2.getX()) / 2d;  double y=(l1.getY() + l2.getY()) / 2d;  double z=(l1.getZ() + l2.getZ()) / 2d;  return new MutableLocation(x,y,z,l1.getWorld());}  }
class C{  public static <T>Queue<T> asLifoQueue(Deque<T> deque){  return new AsLIFOQueue<T>(deque);}  }
class C{  public int offset(){  return _offset;}  }
class C{  public UnorderedStruct(UnorderedStruct other){  __isset_bitfield=other.__isset_bitfield;  this.id=other.id;}  }
class C{  private void handleAllow(ParseState state,RobotToken token){  if (state.isSkipAgents()) {    return;  }  state.setFinishedAgentFields(true);  if (!state.isAddingRules()) {    return;  }  String path=token.getData();  try {    path=URLDecoder.decode(path,"UTF-8");  } catch (  Exception e) {    reportWarning("Error parsing robots rules - can't decode path: " + path,state.getUrl());  }  if (path.length() == 0) {    state.clearRules();  } else {    state.addRule(path,true);  }}  }
class C{  private int compareCount(SearchResultDataLine a,SearchResultDataLine b){  int c1=a.getSeeds();  int c2=b.getSeeds();  return (c1 - c2) * _ascending;}  }
class C{  public static void v(String msg,Throwable throwable){  if (!allowV)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  @Override public void connect() throws IOException {  ClientCacheFactory factory=new ClientCacheFactory();  Map<String,String> locators=parseLocatorString(geodeLocators);  if (locators.size() == 0) {    throw new IllegalArgumentException("Invalid locator connection string " + geodeLocators);  } else {    for (    Entry<String,String> entry : locators.entrySet()) {      factory.addPoolLocator(entry.getKey(),Integer.valueOf(entry.getValue()));    }  }  clientCache=factory.create();}  }
class C{  @Override public void writeXML(@WillClose XMLOutput xmlOutput) throws IOException {  assert project != null;  try {    writePrologue(xmlOutput);    if (withMessages) {      computeBugHashes();      getProjectStats().computeFileStats(this);      String commonBase=null;      for (      String s : project.getSourceDirList()) {        if (commonBase == null) {          commonBase=s;        } else {          commonBase=commonBase.substring(0,commonPrefix(commonBase,s));        }      }      if (commonBase != null && commonBase.length() > 0) {        if (commonBase.indexOf("/./") > 0) {          commonBase=commonBase.substring(0,commonBase.indexOf("/."));        }        File base=new File(commonBase);        if (base.exists() && base.isDirectory() && base.canRead()) {          SourceLineAnnotation.generateRelativeSource(base,project);        }      }    }    if (earlyStats && !minimalXML) {      getProjectStats().writeXML(xmlOutput,withMessages);    }    for (    BugInstance bugInstance : getCollection()) {      if (!applySuppressions || !project.getSuppressionFilter().match(bugInstance)) {        bugInstance.writeXML(xmlOutput,this,withMessages);      }    }    writeEpilogue(xmlOutput);  }  finally {    xmlOutput.finish();    SourceLineAnnotation.clearGenerateRelativeSource();  }}  }
class C{  private boolean addSelfPermissions(final Permission p,CodeSource entryCs,CodeSource accCs,Permissions perms){  if (!(p instanceof PrivateCredentialPermission)) {    return false;  }  if (!(entryCs instanceof SubjectCodeSource)) {    return false;  }  PrivateCredentialPermission pcp=(PrivateCredentialPermission)p;  SubjectCodeSource scs=(SubjectCodeSource)entryCs;  String[][] pPrincipals=pcp.getPrincipals();  if (pPrincipals.length <= 0 || !pPrincipals[0][0].equalsIgnoreCase("self") || !pPrincipals[0][1].equalsIgnoreCase("self")) {    return false;  } else {    if (scs.getPrincipals() == null) {      return true;    }    for (    PrincipalEntry principal : scs.getPrincipals()) {      String[][] principalInfo=getPrincipalInfo(principal,accCs);      for (int i=0; i < principalInfo.length; i++) {        PrivateCredentialPermission newPcp=new PrivateCredentialPermission(pcp.getCredentialClass() + " " + principalInfo[i][0]+ " "+ "\""+ principalInfo[i][1]+ "\"","read");        if (debug != null) {          debug.println("adding SELF permission: " + newPcp.toString());        }        perms.add(newPcp);      }    }  }  return true;}  }
class C{  public static URI checkVplexHighAvailabilityArray(Volume volume,DbClient dbClient){  URI haVarray=null;  VirtualPool vpool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  if ((null != vpool) && VirtualPool.vPoolSpecifiesHighAvailability(vpool)) {    _logger.info("volume {} virtual pool {} specifies high availability",volume.getLabel(),vpool.getLabel());    if (VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(vpool.getHighAvailability())) {      haVarray=VPlexUtil.getHAVarray(vpool);      _logger.info("   the high availability virtual array URI is " + haVarray);    }  }  return haVarray;}  }
class C{  public void checkClosed(){  if (isClosed()) {    throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"session closed");  }}  }
class C{  @Override public void updateScreen(){}  }
class C{  public void putUnsignedInt32(long i){  ensureCapacity(4);  byte[] b=this.byteBuffer;  b[this.position++]=(byte)(i & 0xff);  b[this.position++]=(byte)(i >>> 8);  b[this.position++]=(byte)(i >>> 16);  b[this.position++]=(byte)(i >>> 24);}  }
class C{  public PositionBasedCompletionProposal(String replacementString,Position replacementPosition,int cursorPosition){  this(replacementString,replacementPosition,cursorPosition,null,null,null,null,null);}  }
class C{  public int size(){  return parent.tagCount();}  }
class C{  public boolean checkDefaultOptions(){  boolean result;  String[] options;  print("Default options...");  options=getDefaultOptions();  try {    getDefaultHandler().setOptions(options);    Utils.checkForRemainingOptions(options);    println("yes");    result=true;  } catch (  Exception e) {    println("no");    result=false;    if (getDebug()) {      println(e);    }  }  return result;}  }
class C{  public boolean isVerified(){  return state == State.PASS;}  }
class C{  public DefaultTupleSerializer(){}  }
class C{  public boolean isOneDotFour(){  return jdkVersion == JDK1_4;}  }
class C{  @ResponseBody @ExceptionHandler(CourseTopicAlreadyExistException.class) @ResponseStatus(HttpStatus.FORBIDDEN) VndErrors courseTopicAlreadyExistExceptionHandler(CourseTopicAlreadyExistException ex){  return new VndErrors(HttpStatus.FORBIDDEN.getReasonPhrase(),ex.getMessage());}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.432 -0500",hash_original_method="08286611C689211C8F9484889D0FA29C",hash_generated_method="764A54F9EBB9194B4D91349716380299") public void clear(){  mValues.clear();}  }
class C{  public void testFail() throws Exception {  IgniteSpringHelper spring=SPRING.create(false);  try {    assertNotNull(spring.loadConfigurations(cfgLocation).get1());  } catch (  Exception e) {    assertTrue(X.hasCause(e,ClassNotFoundException.class));  }}  }
class C{  public CimConnection(CimConnectionInfo connectionInfo,CimListener listener,CimFilterMap filterMap) throws Exception {  _host=connectionInfo.getConnectionParameter(CimConstants.CIM_HOST);  _port=Integer.parseInt(connectionInfo.getConnectionParameter(CimConstants.CIM_PORT));  _user=connectionInfo.getConnectionParameter(CimConstants.CIM_USER);  _pass_word=connectionInfo.getConnectionParameter(CimConstants.CIM_PW);  _interopNS=connectionInfo.getConnectionParameter(CimConstants.CIM_INTEROP_NS);  _implNS=connectionInfo.getConnectionParameter(CimConstants.CIM_IMPL_NS);  _useSSL=Boolean.parseBoolean(connectionInfo.getConnectionParameter(CimConstants.CIM_USE_SSL));  _connectionName=createConnectionName();  _listener=listener;  if (_listener == null) {    throw new Exception("No indication listener");  }  _filterMap=filterMap;  if (_filterMap == null) {    throw new Exception("No indication filter map");  }  s_logger.info("Created new CIM connection {}",_connectionName);}  }
class C{  private GF2Polynomial upper(int k){  int j=Math.min(k,blocks - k);  GF2Polynomial result=new GF2Polynomial(j << 5);  if (blocks >= k) {    System.arraycopy(value,k,result.value,0,j);  }  return result;}  }
class C{  public static void resetOutput(){  notifyOut=true;  errorFile=null;  notifyErr=true;  err=System.err;  out=System.out;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public static double dArrayGet(double[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  public Gas(Fluid f){  unlocalizedName=name=f.getName();  icon=f.getStillIcon();  fluid=f;  from_fluid=true;}  }
class C{  public boolean isAnyActivity(){  Object oo=get_Value(COLUMNNAME_AnyActivity);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public BandCombineOp(float[][] matrix,RenderingHints hints){  nrows=matrix.length;  ncols=matrix[0].length;  this.matrix=new float[nrows][];  for (int i=0; i < nrows; i++) {    if (ncols > matrix[i].length) {      throw new IndexOutOfBoundsException("row " + i + " too short");    }    this.matrix[i]=Arrays.copyOf(matrix[i],ncols);  }  this.hints=hints;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.393 -0400",hash_original_method="70526F861CF001113E9F6EA89506F1D3",hash_generated_method="C75D4E782E307A289CCD2C219ED6B1AA") protected static boolean isDiagnosticsEnabled(){  return LogFactory.isDiagnosticsEnabled();}  }
class C{  public void authorizeComplete(String pin) throws TwitterException {  AccessToken token=getConnection().getOAuthAccessToken(pin);  setToken(token.getToken());  setTokenSecret(token.getTokenSecret());}  }
class C{  private void sampleVertices(final QueryEngine queryEngine,final Map<Vertex,AtomicInteger> vertexLimit){  final List<Callable<Void>> tasks=new LinkedList<Callable<Void>>();  for (  Map.Entry<Vertex,AtomicInteger> e : vertexLimit.entrySet()) {    final Vertex v=e.getKey();    final int limit=e.getValue().get();    tasks.add(new SampleVertexTask(queryEngine,v,limit,sampleType));  }  final List<Future<Void>> futures;  try {    futures=queryEngine.getIndexManager().getExecutorService().invokeAll(tasks);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    return;  }  final List<Throwable> causes=new LinkedList<Throwable>();  for (  Future<Void> f : futures) {    try {      f.get();    } catch (    InterruptedException e) {      log.error(e);      causes.add(e);    }catch (    ExecutionException e) {      log.error(e);      causes.add(e);    }  }  if (!causes.isEmpty()) {    if (causes.size() == 1)     throw new RuntimeException(causes.get(0));    throw new RuntimeException("nerrors=" + causes.size(),new ExecutionExceptions(causes));  }}  }
class C{  public SourceBuilder<T> emit(T record,int times){  builder.emit(record,times);  return this;}  }
class C{  protected AbstractDialLayer(){  this.visible=true;  this.listenerList=new EventListenerList();}  }
class C{  public ColumnRequiredChange(Table table,Column column){  super(table);  this.column=column;}  }
class C{  public void dump(Object data,Writer output){  List<Object> list=new ArrayList<Object>(1);  list.add(data);  dumpAll(list.iterator(),output,null);}  }
class C{  public Keyline(@ArgumentsBundle.EdgeAffinity int edgeAffinity,int distance){  this();  mEdgeAffinity=edgeAffinity;  mDistance=distance;  mThickness=DEFAULT_THICKNESS;  mPaint.setColor(DEFAULT_KEYLINE_COLOR);}  }
class C{  public void indexNode(CommonTree node,List<CompilationUnit> list){  if (node == null) {    return;  }  if (node instanceof DelphiPMDNode) {    list.add((DelphiPMDNode)node);  } else {    list.add(new DelphiPMDNode(node));  }  for (int i=0; i < node.getChildCount(); ++i) {    indexNode((CommonTree)node.getChild(i),list);  }}  }
class C{  public Date estimateLockTime(AbstractBlockChain chain){  if (lockTime < LOCKTIME_THRESHOLD)   return chain.estimateBlockTime((int)getLockTime()); else   return new Date(getLockTime() * 1000);}  }
class C{  public double annotate(MutableTree tree,String freqAttrName){  annotate(tree,tree.getRoot(),freqAttrName);  double logClade=0.0;  for (int n=0; n < tree.getInternalNodeCount(); ++n) {    final double f=(Double)tree.getNodeAttribute(tree.getInternalNode(n),freqAttrName);    logClade+=Math.log(f);  }  return logClade;}  }
class C{  public void testCholesky() throws Exception {  double[][] A={{6,2,3},{2,5,1},{3,1,4}};  double[][] expectedL={{2.44949,0,0},{0.81650,2.08167,0},{1.22474,0,1.58114}};  double[][] L=MatrixUtils.CholeskyDecomposition(A);  checkMatrix(expectedL,L,OCTAVE_RESOLUTION);  double[][] A2={{6,2,3,1},{2,5,1,0.5},{3,1,4,2},{1,0.5,2,3}};  double[][] expectedL2={{2.44949,0,0,0},{0.81650,2.08167,0,0},{1.22474,0,1.58114,0},{0.40825,0.08006,0.94868,1.38814}};  double[][] L2=MatrixUtils.CholeskyDecomposition(A2);  checkMatrix(expectedL2,L2,OCTAVE_RESOLUTION);  double[][] asymmetricA={{6,2,3},{2,5,1},{3,1.0001,4}};  boolean flaggedException=false;  try {    MatrixUtils.CholeskyDecomposition(asymmetricA);  } catch (  Exception e) {    flaggedException=true;  }  assertTrue(flaggedException);  double[][] notpositiveDefiniteA={{1,2,3},{2,4,5},{3,5,6}};  flaggedException=false;  try {    MatrixUtils.CholeskyDecomposition(notpositiveDefiniteA);  } catch (  Exception e) {    flaggedException=true;  }  assertTrue(flaggedException);}  }
class C{  public static GF2Vector encryptionPrimitive(McElieceCCA2PublicKeyParameters pubKey,GF2Vector m,GF2Vector z){  GF2Matrix matrixG=pubKey.getMatrixG();  Vector mG=matrixG.leftMultiplyLeftCompactForm(m);  return (GF2Vector)mG.add(z);}  }
class C{  public static double kthMin(double[] array,int k) throws Exception {  if (k == 1) {    return min(array);  }  if (array.length < k) {    throw new Exception(String.format("Length of array (%d) is less than k (%d)",array.length,k));  }  double[] mins=new double[k];  for (int i=0; i < k; i++) {    mins[i]=Double.POSITIVE_INFINITY;  }  for (int t=0; t < array.length; t++) {    if (array[t] < mins[k - 1]) {      mins[k - 1]=array[t];      for (int i=k - 2; i >= 0; i--) {        if (array[t] < mins[i]) {          mins[i + 1]=mins[i];          mins[i]=array[t];          continue;        }        break;      }    }  }  return mins[k - 1];}  }
class C{  public EMail createEMail(MUser from,String to,String subject,String message,boolean html){  if (to == null || to.length() == 0) {    log.warning("No To address");    return null;  }  if (from == null)   return createEMail(to,subject,message,html);  if (from.getEMail() == null || from.getEMailUser() == null || (isSmtpAuthorization() && from.getEMailUserPW() == null)) {    log.warning("From EMail incomplete: " + from + " ("+ getName()+ ")");    return null;  }  EMail email=null;  if (isServerEMail() && Ini.isClient()) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        if (html && message != null)         message=EMail.HTML_MAIL_MARKER + message;        email=server.createEMail(Env.getRemoteCallCtx(getCtx()),getAD_Client_ID(),from.getAD_User_ID(),to,subject,message);      } else       log.log(Level.WARNING,"No AppsServer");    } catch (    Exception ex) {      log.log(Level.SEVERE,getName() + " - AppsServer error",ex);    }  }  if (email == null)   email=new EMail(this,from.getEMail(),to,subject,message,html);  if (isSmtpAuthorization())   email.createAuthenticator(from.getEMailUser(),from.getEMailUserPW());  return email;}  }
class C{  @Override public void compute(final MeasureComputerContext context){  final Component component=context.getComponent();  if (component.getType() != Type.FILE) {    compute(component,context);  }}  }
class C{  public void postSticky(Object event){  postStickyRemote(event);  postStickyLocal(event);}  }
class C{  private Task<Boolean> verifyActivated(RemoteReference<?> toReference){  NodeAddress actorAddress=await(locateActor(toReference,false));  return Task.fromValue(actorAddress != null);}  }
class C{  public boolean isSetEchoRequest(){  return this.echoRequest != null;}  }
class C{  private static CallFrame initFrameForNoSuchMethod(Context cx,CallFrame frame,int indexReg,Object[] stack,double[] sDbl,int stackTop,int op,Scriptable funThisObj,Scriptable calleeScope,NoSuchMethodShim noSuchMethodShim,InterpretedFunction ifun){  Object[] argsArray=null;  int shift=stackTop + 2;  Object[] elements=new Object[indexReg];  for (int i=0; i < indexReg; ++i, ++shift) {    Object val=stack[shift];    if (val == UniqueTag.DOUBLE_MARK) {      val=ScriptRuntime.wrapNumber(sDbl[shift]);    }    elements[i]=val;  }  argsArray=new Object[2];  argsArray[0]=noSuchMethodShim.methodName;  argsArray[1]=cx.newArray(calleeScope,elements);  CallFrame callParentFrame=frame;  CallFrame calleeFrame=new CallFrame();  if (op == Icode_TAIL_CALL) {    callParentFrame=frame.parentFrame;    exitFrame(cx,frame,null);  }  initFrame(cx,calleeScope,funThisObj,argsArray,null,0,2,ifun,callParentFrame,calleeFrame);  if (op != Icode_TAIL_CALL) {    frame.savedStackTop=stackTop;    frame.savedCallOp=op;  }  return calleeFrame;}  }
class C{  public ToStringBuilder append(String fieldName,float[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {  Object object=eval(source,lineNo,columnNo,funcBody);  if (object instanceof Closure) {    Closure closure=(Closure)object;    return closure.call(arguments.toArray());  }  return object;}  }
class C{  static void createWithPermissions(Path file,String mode) throws IOException {  Set<PosixFilePermission> requested=PosixFilePermissions.fromString(mode);  FileAttribute<Set<PosixFilePermission>> attr=PosixFilePermissions.asFileAttribute(requested);  System.out.format("create file with mode: %s\n",mode);  Files.createFile(file,attr);  try {    checkSecure(requested,Files.getFileAttributeView(file,PosixFileAttributeView.class).readAttributes().permissions());  }  finally {    Files.delete(file);  }  System.out.format("create directory with mode: %s\n",mode);  Files.createDirectory(file,attr);  try {    checkSecure(requested,Files.getFileAttributeView(file,PosixFileAttributeView.class).readAttributes().permissions());  }  finally {    Files.delete(file);  }}  }
class C{  public final double SFPriorEntropy(){  return m_delegate.SFPriorEntropy();}  }
class C{  public boolean canImport(JComponent comp,DataFlavor[] transferFlavors){  return false;}  }
class C{  private void startListener(){  logger.info("Starting dslisten with \"service tdslisten start\"");  doListener(new String[]{"service","tdslisten","start"},3000);  logger.info("dslisten Started");}  }
class C{  private String shortenTitle(String title){  if (title.equals("")) {    return "Tests' root dir:";  }  int charCount=mListView.getWidth() / MEAN_TITLE_CHAR_SIZE;  if (title.length() > charCount) {    return "..." + title.substring(title.length() - charCount);  } else {    return title;  }}  }
class C{  private boolean isLeftCompleted(long target){  long size=completed ? thisNodeSize : completedSize(target);  if (size >= target)   return true;  for (SliceTask<P_IN,P_OUT> parent=getParent(), node=this; parent != null; node=parent, parent=parent.getParent()) {    if (node == parent.rightChild) {      SliceTask<P_IN,P_OUT> left=parent.leftChild;      if (left != null) {        size+=left.completedSize(target);        if (size >= target)         return true;      }    }  }  return size >= target;}  }
class C{  public static JavaFormatterOptions defaultOptions(){  return builder().build();}  }
class C{  private String sendStatusRequestWithRetry(ModifiableSolrParams params,int maxCounter) throws SolrServerException, IOException {  String message=null;  while (maxCounter-- > 0) {    final NamedList r=sendRequest(params);    final NamedList status=(NamedList)r.get("status");    final RequestStatusState state=RequestStatusState.fromKey((String)status.get("state"));    message=(String)status.get("msg");    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {      return message;    }    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {    }  }  return message;}  }
class C{  @Override public String toString(){  return "CUDA_TEXTURE_DESC[" + createString(",") + "]";}  }
class C{  public double f1Measure(){  return Util.f1Measure(editDistanceFirst(),editDistanceSecond());}  }
class C{  private static void vecswap(short[] x,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  public void addListener(final IPluginInterfaceListener listener){  listeners.addListener(listener);}  }
class C{  public void testQueueRollbackMarksMessageRedelivered() throws JMSException {  connection.start();  Session session=connection.createSession(true,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue("queue-" + getName());  MessageProducer producer=createProducer(session,queue);  producer.send(createTextMessage(session));  session.commit();  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  assertFalse("Message should not be redelivered.",msg.getJMSRedelivered());  session.rollback();  msg=consumer.receive(2000);  assertNotNull(msg);  assertTrue("Message should be redelivered.",msg.getJMSRedelivered());  session.commit();  session.close();}  }
class C{  public Set<String> keySet(){  return data.keySet();}  }
class C{  private void liftSubqueries(final AST2BOpContext context,final StaticAnalysis sa,final GraphPatternGroup<IGroupMemberNode> group){  final int arity=group.arity();  for (int i=0; i < arity; i++) {    final BOp child=(BOp)group.get(i);    if (child instanceof GraphPatternGroup<?>) {      liftSubqueries(context,sa,((GraphPatternGroup<IGroupMemberNode>)child));    } else     if (child instanceof SubqueryRoot) {      final SubqueryRoot subqueryRoot=(SubqueryRoot)child;      liftSubqueries(context,sa,subqueryRoot.getWhereClause());    } else     if (child instanceof ServiceNode) {      continue;    }    if (!(child instanceof SubqueryRoot)) {      continue;    }    final SubqueryRoot subqueryRoot=(SubqueryRoot)child;    if (subqueryRoot.getQueryType() == QueryType.ASK) {      continue;    }    if (needsLifting(subqueryRoot)) {      liftSparql11Subquery(context,sa,subqueryRoot);      continue;    }  }}  }
class C{  public T caseExportableElement(ExportableElement object){  return null;}  }
class C{  public OMGraphic drawFeature(VPFFeatureWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2,List<Object> area,String featureType,int primID){  if (warehouse == null) {    return null;  }  return warehouse.createArea(covtable,this,area,ll1,ll2,dpplat,dpplon,featureType,primID);}  }
class C{  public static Location convertLatLng(double latitude,double longitude){  Location location=new Location("");  location.setLatitude(latitude);  location.setLongitude(longitude);  return location;}  }
class C{  public Vector2(float x,float y){  this.x=x;  this.y=y;}  }
class C{  public boolean isCustomPrefix(String entity){  boolean result=false;  int i=entity.indexOf("_");  if (i != -1) {    String prefix=entity.substring(0,entity.indexOf("_"));    result=m_customPrefixes.contains(prefix.toUpperCase());  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public SingleFieldBuilder<MType,BType,IType> clear(){  message=(MType)(message != null ? message.getDefaultInstanceForType() : builder.getDefaultInstanceForType());  if (builder != null) {    builder.dispose();    builder=null;  }  onChanged();  return this;}  }
class C{  public static int ZZ_CMAP(int ch){  return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 7) | ((ch >> 2) & 0x7f)] << 2) | (ch & 0x3)];}  }
class C{  public PutIndexTemplateRequest mapping(String type,Object... source){  mapping(type,PutMappingRequest.buildFromSimplifiedDef(type,source));  return this;}  }
class C{  @Override public <T extends DataObject>void create(T... objs) throws DatabaseException {  this.create(Arrays.asList(objs));}  }
class C{  public ModifyMonitoredItemsResponse ModifyMonitoredItems(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,TimestampsToReturn TimestampsToReturn,MonitoredItemModifyRequest... ItemsToModify) throws ServiceFaultException, ServiceResultException {  ModifyMonitoredItemsRequest req=new ModifyMonitoredItemsRequest(RequestHeader,SubscriptionId,TimestampsToReturn,ItemsToModify);  return (ModifyMonitoredItemsResponse)channel.serviceRequest(req);}  }
class C{  public SoftwarePIDController withOutputRange(double minimumOutput,double maximumOutput){  if (minimumOutput > maximumOutput) {    throw new IllegalArgumentException("Lower bound is greater than upper bound");  }  target=target.withOutputRange(minimumOutput,maximumOutput);  return this;}  }
class C{  public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  @GET @Path("backup/") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SYSTEM_MONITOR,Role.RESTRICTED_SYSTEM_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public BackupSets.BackupSet queryBackup(@QueryParam("tag") String backupTag){  List<BackupSetInfo> backupList;  log.info("Received query backup request, tag={}",backupTag);  try {    backupList=backupOps.listBackup();  } catch (  BackupException e) {    log.error("Failed to list backup sets",e);    throw APIException.internalServerErrors.getObjectError("Backup info",e);  }  for (  BackupSetInfo backupInfo : backupList) {    if (backupInfo.getName().equals(backupTag)) {      BackupUploadStatus uploadStatus=getBackupUploadStatus(backupInfo.getName());      BackupSets.BackupSet backupSet=new BackupSets.BackupSet(backupInfo.getName(),backupInfo.getSize(),backupInfo.getCreateTime(),uploadStatus);      log.info("BackupSet={}",backupSet.toString());      return backupSet;    }  }  return new BackupSets.BackupSet();}  }
class C{  public TermPayloadMemoryPostings(TermPayloadCoordinator<PAYLOAD> payloadConf){  this.payloadConf=payloadConf;}  }
class C{  public void stop(){  try {    httpclient.close();  } catch (  IOException e) {    log.error("HTTP Client failed to close.",e);  }  yarnClient.stop();}  }
class C{  public static int arrayDimension(String desc){  int dim=0;  while (desc.charAt(dim) == '[')   ++dim;  return dim;}  }
class C{  public JLBHOptions recordOSJitter(boolean recordOSJitter){  this.recordOSJitter=recordOSJitter;  return this;}  }
class C{  @Override public LR0State goTo(Symbol symbol){  HashSet<LR0Item> ret=new HashSet<LR0Item>();  for (  LR0Item item : items) {    if (item.getNextSymbol() == symbol) {      ret.add(item.shift());    }  }  return new LR0State(ret);}  }
class C{  public void print(PrintWriter out){  XMLWriter writer=new XMLWriter(out);  try {    writer.write((XMLElement)document.getChildren().get(0),true);  } catch (  IOException e) {    InternalError error=new InternalError();    error.initCause(e);    throw error;  }}  }
class C{  public static void join(Appendable out,CharSequence sep,CharSequence... items) throws IOException {  join(out,sep,Arrays.asList(items));}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public Exception exception(){  return mException;}  }
class C{  public static void endSection(){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    endSectionV18();  }}  }
class C{  private void checkEnvironments(){  if (CollectionUtils.isEmpty(environments)) {    tableViewer.getTable().setEnabled(false);    addButton.setEnabled(false);    managedForm.getForm().setMessage("No environment exists on the selected CMR, mapping can not be defined.",IMessageProvider.ERROR);  } else {    tableViewer.getTable().setEnabled(true);    addButton.setEnabled(true);    managedForm.getForm().setMessage("Define agent mapping properties for the '" + cmrRepositoryDefinition.getName() + "' repository.",IMessageProvider.NONE);  }}  }
class C{  private void verifyDeleteRight(Entity entity){  LOG.debug("VERIFYING DELETE RIGHT FOR " + entity);}  }
class C{  protected boolean matchNameAttribute(AttributeSet attr,HTML.Tag tag){  Object o=attr.getAttribute(StyleConstants.NameAttribute);  if (o instanceof HTML.Tag) {    HTML.Tag name=(HTML.Tag)o;    if (name == tag) {      return true;    }  }  return false;}  }
class C{  private void updateContact(int index){  Contact contact=contacts.get(index);  Intent intent=new Intent(this,ViewActivity.class);  intent.putExtra("CONTACT",contact);  startActivity(intent);}  }
class C{  public static boolean[][] loadImage(File file,char onChar,char offChar) throws FileNotFoundException, RuntimeException {  ArrayList<String> rows=loadImage(file);  String s=rows.get(0);  boolean[][] img=new boolean[rows.size()][s.length()];  for (int i=0; i < rows.size(); i++) {    s=rows.get(i);    for (int j=0; j < s.length(); j++) {      char c=s.charAt(j);      if (c == onChar) {        img[i][j]=true;      } else       if (c == offChar) {        img[i][j]=false;      } else {        throw new RuntimeException("Line " + i + " has an invalid character '"+ c+ "' at location "+ j+ ". Must only have <"+ onChar+ ","+ offChar+ "> characters.");      }    }  }  return img;}  }
class C{  protected void resolveCommandLine(){  commandLineValues=new ArrayList<String>();  commandLineValues.add(evaluate(getCommand()));  for (  String argument : getArguments()) {    commandLineValues.add(evaluate(argument));  }  commandLine=StringUtils.join(commandLineValues," ");}  }
class C{  public Log4JLoggingHook(IPlatformManager platformManager,String minimumLevelToCapture){  this.platformManager=platformManager;  checker=SeverityHelperFactory.getForFramework(Framework.LOG4J,minimumLevelToCapture);}  }
class C{  private void addIcon(OBlock block,Positionable pos){  ArrayList<Positionable> icons=_circuitMap.get(block);  if (icons == null) {    icons=new ArrayList<Positionable>();  }  if (pos != null) {    if (!icons.contains(pos)) {      icons.add(pos);    }    _iconMap.put(pos,block);  }  _circuitMap.put(block,icons);  _darkTrack.remove(pos);}  }
class C{  public CActionCollapseNode(final CGroupNode node){  super("Collapse Group");  m_node=node;}  }
class C{  public static void assertIsDirectory(FileSystem fs,Path path) throws IOException {  FileStatus fileStatus=fs.getFileStatus(path);  assertIsDirectory(fileStatus);}  }
class C{  public MyGraph(List<Edge> edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  public static void launchDevModeWithJettyAndWaitForReady(SWTWorkbenchBot bot,String projectName){  SwtBotUtils.print("Launch DevMode with Jetty");  SWTBotTreeItem project=SwtBotProjectActions.selectProject(bot,projectName);  project.setFocus();  project.select();  project.doubleClick();  for (int i=1; i < 15; i++) {    bot.sleep(500);    if (i < 10) {      number=i + " ";    } else {      number="";    }    final String menuLabel=number + MENU_GWT_SUPERDEVMODE;    SwtBotUtils.print("Trying to select: Run > Debug As > menuLabel=" + menuLabel);    try {      bot.menu("Run").menu("Debug As").menu(menuLabel).click();      break;    } catch (    Exception e) {      SwtBotUtils.print("Skipping menu item " + menuLabel);    }  }  ConsoleViewContains.waitForConsoleOutput(bot,"The code server is ready",30000);  SwtBotUtils.print("Launched DevMode with Jetty");}  }
class C{  private CNodeFunctions(){}  }
class C{  public boolean add(CharSequence key,Object value){  autocomplete.insert(root,key,value,0);  return true;}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  Rectangle2D arcRect=DialPlot.rectangleByRadius(frame,this.tickRadius,this.tickRadius);  Rectangle2D arcRectMajor=DialPlot.rectangleByRadius(frame,this.tickRadius - this.majorTickLength,this.tickRadius - this.majorTickLength);  Rectangle2D arcRectMinor=arcRect;  if (this.minorTickCount > 0 && this.minorTickLength > 0.0) {    arcRectMinor=DialPlot.rectangleByRadius(frame,this.tickRadius - this.minorTickLength,this.tickRadius - this.minorTickLength);  }  Rectangle2D arcRectForLabels=DialPlot.rectangleByRadius(frame,this.tickRadius - this.tickLabelOffset,this.tickRadius - this.tickLabelOffset);  boolean firstLabel=true;  Arc2D arc=new Arc2D.Double();  Line2D workingLine=new Line2D.Double();  for (double v=this.lowerBound; v <= this.upperBound; v+=this.majorTickIncrement) {    arc.setArc(arcRect,this.startAngle,valueToAngle(v) - this.startAngle,Arc2D.OPEN);    Point2D pt0=arc.getEndPoint();    arc.setArc(arcRectMajor,this.startAngle,valueToAngle(v) - this.startAngle,Arc2D.OPEN);    Point2D pt1=arc.getEndPoint();    g2.setPaint(this.majorTickPaint);    g2.setStroke(this.majorTickStroke);    workingLine.setLine(pt0,pt1);    g2.draw(workingLine);    arc.setArc(arcRectForLabels,this.startAngle,valueToAngle(v) - this.startAngle,Arc2D.OPEN);    Point2D pt2=arc.getEndPoint();    if (this.tickLabelsVisible) {      if (!firstLabel || this.firstTickLabelVisible) {        g2.setFont(this.tickLabelFont);        g2.setPaint(this.tickLabelPaint);        TextUtilities.drawAlignedString(this.tickLabelFormatter.format(v),g2,(float)pt2.getX(),(float)pt2.getY(),TextAnchor.CENTER);      }    }    firstLabel=false;    if (this.minorTickCount > 0 && this.minorTickLength > 0.0) {      double minorTickIncrement=this.majorTickIncrement / (this.minorTickCount + 1);      for (int i=0; i < this.minorTickCount; i++) {        double vv=v + ((i + 1) * minorTickIncrement);        if (vv >= this.upperBound) {          break;        }        double angle=valueToAngle(vv);        arc.setArc(arcRect,this.startAngle,angle - this.startAngle,Arc2D.OPEN);        pt0=arc.getEndPoint();        arc.setArc(arcRectMinor,this.startAngle,angle - this.startAngle,Arc2D.OPEN);        Point2D pt3=arc.getEndPoint();        g2.setStroke(this.minorTickStroke);        g2.setPaint(this.minorTickPaint);        workingLine.setLine(pt0,pt3);        g2.draw(workingLine);      }    }  }}  }
class C{  public static ItemListener remove(ItemListener l,ItemListener oldl){  return (ItemListener)removeInternal(l,oldl);}  }
class C{  GroupTreeNode(GroupTree parent,String key,OperatorDocBundle bundle){  this.parent=parent;  this.key=key;  if (bundle != null) {    this.documentation=((GroupDocumentation)bundle.getObject("group." + getFullyQualifiedKey()));  } else {    LogService.getRoot().log(Level.FINE,"com.rapidminer.tools.GroupTreeNode.no_documentation_bundle_associated",getFullyQualifiedKey());    this.documentation=new GroupDocumentation(key);  }}  }
class C{  public void test2521586(){  sql="INSERT INTO M_Forecast (M_Forecast_ID) VALUES (1000000)";  sqe="INSERT INTO M_Forecast (M_Forecast_ID) VALUES (1000000)";  r=convert.convert(sql);  assertEquals(sqe,r[0]);}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  public CActionShrinkSelectionDown(final ZyGraph graph){  super("Shrink Selection Down");  m_graph=graph;}  }
class C{  protected EnumStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  @Override public void switchPortChanged(long switchId,ImmutablePort port,IOFSwitch.PortChangeType type){switch (type) {case UP:    processNewPort(switchId,port.getPortNumber());  break;case DELETE:case DOWN:handlePortDown(switchId,port.getPortNumber());break;case OTHER_UPDATE:case ADD:break;}}  }
class C{  public static String send4LetterWord(String host,int port,String cmd) throws IOException {  log.info("connecting to " + host + " "+ port);  BufferedReader reader=null;  try (Socket sock=new Socket(host,port)){    OutputStream outstream=sock.getOutputStream();    outstream.write(cmd.getBytes(StandardCharsets.US_ASCII));    outstream.flush();    sock.shutdownOutput();    reader=new BufferedReader(new InputStreamReader(sock.getInputStream(),"US-ASCII"));    StringBuilder sb=new StringBuilder();    String line;    while ((line=reader.readLine()) != null) {      sb.append(line).append("\n");    }    return sb.toString();  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.ASSIGNMENT_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void generateDemoOffer(MenuItem item){  Offer offerToAdd=new Offer(getString(R.string.unlimited_sundays),getString(R.string.offer_recharge),R.drawable.recharge,5.00,"recharge",false,false,true);  if (myPlanPresenter != null) {    myPlanPresenter.addOffer(offerToAdd);  }  Intent intent=new Intent(this,MainActivity.class);  PendingIntent pIntent=PendingIntent.getActivity(this,0,intent,0);  NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setStyle(new NotificationCompat.BigTextStyle().bigText(getString(R.string.recharge_notification))).setContentTitle(getString(R.string.offer_notification_title)).setContentText(getString(R.string.recharge_notification)).setSmallIcon(R.drawable.ic_stat_acme_transparent).setColor(getResources().getColor(R.color.dark_indigo)).setAutoCancel(true).setContentIntent(pIntent);  int mNotificationId=1;  NotificationManager notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  notificationManager.notify(mNotificationId,mBuilder.build());}  }
class C{  private static <T>Class<? super T> findMBeanInterface(Class<T> aClass,String aName){  Class<? super T> current=aClass;  while (current != null) {    final Class<?>[] interfaces=current.getInterfaces();    final int len=interfaces.length;    for (int i=0; i < len; i++) {      Class<? super T> inter=Util.cast(interfaces[i]);      inter=implementsMBean(inter,aName);      if (inter != null)       return inter;    }    current=current.getSuperclass();  }  return null;}  }
class C{  public static boolean isLaunching(final Protos.TaskState state){switch (state) {case TASK_STARTING:case TASK_STAGING:    return true;default :  return false;}}  }
class C{  @Override public Object checkStatus(Object taskId) throws Exception {  TaskStatusInfo inf=m_TaskStatus.get(taskId);  if (inf == null) {    throw new Exception("RemoteEngine (" + m_HostName + ") : Task not found.");  }  TaskStatusInfo result=new TaskStatusInfo();  result.setExecutionStatus(inf.getExecutionStatus());  result.setStatusMessage(inf.getStatusMessage());  result.setTaskResult(inf.getTaskResult());  if (inf.getExecutionStatus() == TaskStatusInfo.FINISHED || inf.getExecutionStatus() == TaskStatusInfo.FAILED) {    System.err.println("Finished/failed Task id : " + taskId + " checked by client. Removing.");    inf.setTaskResult(null);    inf=null;    m_TaskStatus.remove(taskId);  }  inf=null;  return result;}  }
class C{  public static Object min(Collection coll,Comparator comp){  if (comp == null) {    return min(coll);  }  Iterator i=coll.iterator();  Object candidate=i.next();  while (i.hasNext()) {    Object next=i.next();    if (comp.compare(next,candidate) < 0)     candidate=next;  }  return candidate;}  }
class C{  public static void mask(WrappedByteBuffer buf,int mask){  unmask(buf,mask);}  }
class C{  @Override public void flush() throws IOException {  if (_os == null || !_needsFlush)   return;  _needsFlush=false;  try {    _os.flush();  } catch (  IOException e) {    try {      close();    } catch (    IOException e1) {    }    throw ClientDisconnectException.create(e);  }}  }
class C{  private StringBuffer typeAncestors(String type,ClassReader info) throws IOException {  StringBuffer b=new StringBuffer();  while (!"java/lang/Object".equals(type)) {    b.append(';').append(type);    type=info.getSuperName();    info=typeInfo(type);  }  return b;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.447 -0400",hash_original_method="48E5C7007F85482990B2FBCD68749192",hash_generated_method="BD8C4D81D953918B2390F0D334A38078") public WildcardFileFilter(String wildcard,IOCase caseSensitivity){  if (wildcard == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.wildcards=new String[]{wildcard};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public FilteredGuacamoleReader(GuacamoleReader reader,GuacamoleFilter filter){  this.reader=reader;  this.filter=filter;}  }
class C{  public Matrix4d translationRotateScale(Vector3fc translation,Quaternionfc quat,double scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale,scale,scale);}  }
class C{  public boolean contains(Object key){  return containsKey(key);}  }
