class C{  @Override public Iterator<FacetInterval> iterator(){  return new ArrayList<FacetInterval>(Arrays.asList(intervals)).iterator();}  }
class C{  public void addEllipse(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,float rotateAngle,LinkProperties properties) throws IOException {  LinkEllipse.write(latPoint,lonPoint,offset_x1,offset_y1,w,h,rotateAngle,properties,link.dos);}  }
class C{  public void testGetInternalSubset() throws Throwable {  Document doc;  DocumentType docType;  String internal;  doc=(Document)load("staff2",builder);  docType=doc.getDoctype();  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  @SuppressWarnings("unchecked") public static <TK,FV>int recoverAugmentPrefixRuleGrid(RuleGrid<TK,FV> ruleGrid,Sequence<TK> tgt,int sourceInputId,Sequence<TK> sourceSequence,AbstractInferer<TK,FV> inferer,InputProperties inputProperties){  if (DEBUG)   System.err.println("recoverAugmentPrefixRuleGrid");  if (!(inferer.phraseGenerator instanceof DynamicTranslationModel)) {    throw new RuntimeException("Synthetic rule generation requires DynamicTranslationModel");  }  final List<DynamicTranslationModel<FV>> tmList=new ArrayList<>(2);  tmList.add((DynamicTranslationModel<FV>)inferer.phraseGenerator);  if (inputProperties.containsKey(InputProperty.ForegroundTM)) {    tmList.add((DynamicTranslationModel<FV>)inputProperties.get(InputProperty.ForegroundTM));  }  final String[] featureNames=(String[])inferer.phraseGenerator.getFeatureNames().toArray();  int numRules=0;  int[][] e2f={{0}};  PhraseAlignment alignment=new PhraseAlignment(e2f);  for (int i=0; i < sourceSequence.size(); ++i) {    Sequence<TK> src=sourceSequence.subsequence(i,i + 1);    CoverageSet cov=new CoverageSet(sourceSequence.size());    cov.set(i);    ConcreteRule<TK,FV> syntheticRule=null;    int cnt_f=0, cnt_e=0;    double cnt_fe=0.0;    cnt_f=getFcount(src.get(0),tmList);    cnt_e=getEcount(tgt.get(0),tmList);    cnt_fe=getFEcount(src.get(0),tgt.get(0),tmList);    syntheticRule=SyntheticRules.makeSyntheticRule(src,tgt,cov,featureNames,inferer.scorer,inferer.featurizer,cnt_fe,cnt_e,cnt_f,inputProperties,sourceSequence,sourceInputId,alignment);    ruleGrid.addTgtEntry(syntheticRule,false);    if (DEBUG)     System.err.printf("FallbackExt: %s%n",syntheticRule);    ++numRules;  }  return numRules;}  }
class C{  public boolean isIndicate(){  return (statementResultService.isMakeNatural() || statementResultService.isMakeSynthetic());}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called."});  throw new RuntimeException(fMsg);}  }
class C{  private FitsUtil(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void render(){  getPrimitiveContainer().setOffset(0,getConfig().getHeaderHeight() - myModel.getVerticalOffset());  beforeProcessingTimeFrames();  int ypos=0;  for (  LoadDistribution distribution : myDistributions) {    List<Load> loads=distribution.getLoads();    renderLoads(distribution.getDaysOff(),ypos);    renderLoads(loads,ypos);    if (myResourcechart.isExpanded(distribution.getResource())) {      renderLoadDetails(distribution,ypos);      ypos+=calculateGap(distribution.getResource());    }    ypos+=getConfig().getRowHeight();    Canvas.Line nextLine=getPrimitiveContainer().createLine(0,ypos,(int)getChartModel().getBounds().getWidth(),ypos);    nextLine.setForegroundColor(Color.GRAY);  }}  }
class C{  public static float interpolate(float x,float xmin,float xmax,float ymin,float ymax){  float value=(ymax - ymin) / (xmax - xmin);  value*=x - xmin;  value+=ymin;  return value;}  }
class C{  public static <E extends Comparable<E>>SingleLinkedNode<E> recursiveReverseList(SingleLinkedNode<E> node){  if (node == null || node.next == null)   return node;  SingleLinkedNode<E> nextNode=node.next;  node.next=null;  SingleLinkedNode<E> newHead=recursiveReverseList(nextNode);  nextNode.next=node;  return newHead;}  }
class C{  @Override public void write(final int i) throws IOException {}  }
class C{  public String subfolder(){  return this.subfolder;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.COMPOSED_TYPE_REF__CACHED_COMPOSED_MEMBERS:    getCachedComposedMembers().clear();  return;case TypeRefsPackage.COMPOSED_TYPE_REF__ORIGINAL_COMPOSED_TYPE_REF:setOriginalComposedTypeRef((ComposedTypeRef)null);return;case TypeRefsPackage.COMPOSED_TYPE_REF__TYPE_REFS:getTypeRefs().clear();return;}super.eUnset(featureID);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.outlinePaint=SerialUtilities.readPaint(stream);  this.outlineStroke=SerialUtilities.readStroke(stream);  this.backgroundPaint=SerialUtilities.readPaint(stream);}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  private Collection<Long> findPrimes0(Iterable<Long> input){  System.out.println(">>>");  System.out.println("Find primes in: " + input);  System.out.println(">>>");  Collection<Long> res=new ArrayList<>();  for (  Long val : input) {    Long divisor=checkPrime(val,2,val);    if (divisor == null)     res.add(val);  }  return res;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isEmpty(){  return remainingLength() == 0;}  }
class C{  public FloatMatrix reshape(int newRows,int newColumns){  if (length != newRows * newColumns) {    throw new IllegalArgumentException("Number of elements must not change.");  }  rows=newRows;  columns=newColumns;  return this;}  }
class C{  static public void sampleWithReplacement(int[] sampleCounts,int samples,Random rand){  Arrays.fill(sampleCounts,0);  for (int i=0; i < samples; i++)   sampleCounts[rand.nextInt(sampleCounts.length)]++;}  }
class C{  @Override public void dialLayerChanged(DialLayerChangeEvent event){}  }
class C{  @Override public void removeAll(Result<Boolean> result){  _root.removeAll(_path,result);}  }
class C{  public String toStringWithoutMorpheme(){  String s=word;  if (morpheme != null) {    s+=morpheme;  }  return s;}  }
class C{  public boolean isTextFieldValid(){  return isTextValid(dateTextField.getText());}  }
class C{  @Override public boolean execute() throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeCall("execute");    }    checkClosed();    try {      boolean returnsResultSet;synchronized (conn.getSession()) {        closeOldResultSet();        try {          setExecutingStatement(command);          if (command.isQuery()) {            returnsResultSet=true;            boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;            boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;            ResultInterface result=command.executeQuery(maxRows,scrollable);            resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable);          } else {            returnsResultSet=false;            updateCount=command.executeUpdate();          }        }  finally {          setExecutingStatement(null);        }      }      return returnsResultSet;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  void destroy(){  UiThreadUtil.assertOnUiThread();  if (mDestroyed) {    return;  }  mDestroyed=true;  mJavaRegistry.notifyCatalystInstanceDestroy();  mCatalystQueueConfiguration.destroy();  boolean wasIdle=(mPendingJSCalls.getAndSet(0) == 0);  if (!wasIdle && !mBridgeIdleListeners.isEmpty()) {    for (    NotThreadSafeBridgeIdleDebugListener listener : mBridgeIdleListeners) {      listener.onTransitionToBridgeIdle();    }  }  if (mTraceListener != null) {    Systrace.unregisterListener(mTraceListener);  }  Assertions.assertNotNull(mBridge).dispose();}  }
class C{  public void createAdversaries(){  Bag people=socialNetwork.getAllNodes();  List<Integer> indices=orderNodesByDegree(people);  int numAdversaries=0;  Bag allAdversaryFriends=new Bag();  Bag allAdversaries=new Bag();  Bag myFriends=new Bag();  while (numAdversaries < NUMBER_OF_ADVERSARIES) {    int authorIdx=indices.get(numAdversaries);    Person person=(Person)people.objs[authorIdx];    person.trustPolicy=Person.TRUST_POLICY_ADVERSARY;    allAdversaries.add(person);    numAdversaries++;    socialNetwork.getEdges(person,myFriends);    for (    Object friend : myFriends) {      Object otherNode=((Edge)friend).getOtherNode(person);      if (!bagContains(allAdversaryFriends,otherNode)) {        allAdversaryFriends.add(otherNode);      }    }  }  System.err.println("The adversaries have this many friends: " + allAdversaryFriends.numObjs);  double buddiness=1.0;  for (  Object adv : allAdversaries) {    for (    Object friend : allAdversaryFriends) {      if (!areFriends(adv,friend)) {        socialNetwork.addEdge(adv,friend,new Double(buddiness));      }    }  }}  }
class C{  public synchronized void stop(boolean eof){  if (eof) {    stoppedByEOF=true;  } else {    stopped=true;    if (isPlaying)     audioTrack.pause();  }  notify();}  }
class C{  @Bean public CustomPasswordEncoder passwordEncoder(){  return new CustomPasswordEncoder();}  }
class C{  double readDouble(){  return Double.longBitsToDouble(readLong());}  }
class C{  private HashtableEntry<K,V>[] doubleCapacity(){  HashtableEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashtableEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashtableEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashtableEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashtableEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  @SuppressWarnings("null") public byte[] toByteArray(){  final int preLongs, outBytes;  final boolean empty=gadget_ == null;  final byte[] gadgetBytes=(gadget_ != null ? gadget_.toByteArray() : null);  if (empty) {    preLongs=Family.RESERVOIR_UNION.getMinPreLongs();    outBytes=8;  } else {    preLongs=Family.RESERVOIR_UNION.getMaxPreLongs();    outBytes=(preLongs << 3) + gadgetBytes.length;  }  final byte[] outArr=new byte[outBytes];  final Memory mem=new NativeMemory(outArr);  long pre0=0L;  pre0=PreambleUtil.insertPreLongs(preLongs,pre0);  pre0=PreambleUtil.insertSerVer(SER_VER,pre0);  pre0=PreambleUtil.insertFamilyID(Family.RESERVOIR_UNION.getID(),pre0);  pre0=(empty) ? PreambleUtil.insertFlags(EMPTY_FLAG_MASK,pre0) : PreambleUtil.insertFlags(0,pre0);  pre0=PreambleUtil.insertMaxK(encodedMaxK_,pre0);  mem.putLong(0,pre0);  if (!empty) {    final int preBytes=preLongs << 3;    mem.putByteArray(preBytes,gadgetBytes,0,gadgetBytes.length);  }  return outArr;}  }
class C{  public java.lang.StringBuilder insert(int offset,double d){  return null;}  }
class C{  public ClassFormatError(){  super();}  }
class C{  public InputStream openInputStream() throws IOException {  ensureOpen();  if (mPrivateInputOpen)   throw new IOException("no more input streams available");  if (mGetOperation) {    validateConnection();  } else {    if (mPrivateInput == null) {      mPrivateInput=new PrivateInputStream(this);    }  }  mPrivateInputOpen=true;  return mPrivateInput;}  }
class C{  public MediaType withParameters(Multimap<String,String> parameters){  return create(type,subtype,parameters);}  }
class C{  private void onBluetoothRemoteNameChange(Context context,Intent intent){  log.debug("Remote device's name changed.");}  }
class C{  @RequiresPermission(Manifest.permission.BLUETOOTH) static void checkAdapterStateOn(BluetoothAdapter adapter){  if (adapter == null || adapter.getState() != BluetoothAdapter.STATE_ON) {    throw new IllegalStateException("BT Adapter is not turned ON");  }}  }
class C{  private Individuum combineRecursive(TIntArrayList r,int i,short[] current,Individuum parent1,Individuum parent2){  if (i == r.size()) {    return makeIndividuum(current);  }  int pos=r.get(i);  short[] gene1=current.clone();  short[] gene2=current;  gene1[pos]=parent1.getGene()[pos];  gene2[pos]=parent2.getGene()[pos];  Individuum i1=combineRecursive(r,i + 1,gene1,parent1,parent2);  Individuum i2=combineRecursive(r,i + 1,gene2,parent1,parent2);  return (i1.getFitness() < i2.getFitness()) ? i1 : i2;}  }
class C{  protected int findInsertIndex(double value){  if (values.size() > 2) {    int startIndex=values.size() >> 1;    double startValue=values.get(startIndex);    int insertAt;    if (value < startValue) {      insertAt=findInsertIndex(0,startIndex - 1,value);    } else     if (value > startValue) {      insertAt=findInsertIndex(startIndex + 1,values.size() - 1,value);    } else {      insertAt=startIndex;    }    if (insertAt == values.size()) {      return -1;    }    return insertAt;  }  if (values.size() == 2) {    if (value > values.get(1)) {      return -1;    } else     if (value <= values.get(0)) {      return 0;    } else {      return 1;    }  }  if (values.size() == 1) {    if (value > values.get(0)) {      return -1;    } else {      return 0;    }  }  return -1;}  }
class C{  long readWrite(long pos,byte[] b,int off,int len,boolean write){  long end=pos + len;  if (end > length) {    if (write) {      changeLength(end);    } else {      len=(int)(length - pos);    }  }  while (len > 0) {    int l=(int)Math.min(len,BLOCK_SIZE - (pos & BLOCK_SIZE_MASK));    int page=(int)(pos >>> BLOCK_SIZE_SHIFT);    expand(page);    byte[] block=data[page];    int blockOffset=(int)(pos & BLOCK_SIZE_MASK);    if (write) {      System.arraycopy(b,off,block,blockOffset,l);    } else {      System.arraycopy(block,blockOffset,b,off,l);    }    if (compress) {      compressLater(page);    }    off+=l;    pos+=l;    len-=l;  }  return pos;}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  theSet.add(obj3);  theSet.add(obj4);  return theSet;}  }
class C{  public void removeListener(final INaviGraphListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public List<String> selectTriggerGroups(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_TRIGGER_GROUPS));    rs=ps.executeQuery();    LinkedList<String> list=new LinkedList<String>();    while (rs.next()) {      list.add(rs.getString(1));    }    return list;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public static DoubleVal create(double d){  return new DoubleVal(d);}  }
class C{  public void miny(int parseInt){  miny=parseInt;}  }
class C{  public float[] readFloatArray(){  try {    DataInput dis;    if (bigEndian) {      dis=new DataInputStream(stream);    } else {      dis=new LEDataInputStream(stream);    }    Vector<Float> floatV=new Vector<Float>();    try {      while (true) {        float f=dis.readFloat();        floatV.add(new Float(f));      }    } catch (    EOFException eof) {      stream.close();    }    float[] array=new float[floatV.size()];    for (int i=0; i < array.length; i++) {      array[i]=((Float)floatV.get(i)).floatValue();    }    return array;  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unreadable : " + e.toString());  }}  }
class C{  protected void fireBoundsInvalidated(Rectangle invalidatedArea){  ToolEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ToolListener.class) {      if (event == null) {        event=new ToolEvent(this,getView(),invalidatedArea);      }      ((ToolListener)listeners[i + 1]).boundsInvalidated(event);    }  }}  }
class C{  public static int computeMessageSizeNoTag(final MessageLite value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  private void appendLineStringTaggedText(LineString lineString,int level,Writer writer) throws IOException {  writer.write("LINESTRING ");  appendLineStringText(lineString,level,false,writer);}  }
class C{  public void close() throws IOException {  while (!this.atEndOfData) {    char ch=this.reader.read();    if (ch == '?') {      char ch2=this.reader.read();      if (ch2 == '>') {        this.atEndOfData=true;      }    }  }}  }
class C{  public ZipShort(byte[] bytes){  this(bytes,0);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof VirtualLocalFile) {    return (this == obj) || getName().equals(((VirtualLocalFile)obj).getName());  } else {    return false;  }}  }
class C{  public boolean isSetNewint(){  return EncodingUtils.testBit(__isset_bitfield,__NEWINT_ISSET_ID);}  }
class C{  public String toString(){  return buf.toString();}  }
class C{  public INaviView createView(final INaviView view,final String name,final String description){  Preconditions.checkNotNull(view,"IE02228: view argument can not be null");  Preconditions.checkArgument(view.inSameDatabase(m_provider),"IE02229: View and project Content are not in the same database");  Preconditions.checkNotNull(name,"IE02230: name argument can not be null");  Preconditions.checkNotNull(description,"IE02231: description argument can not be null");  final CView newView=CView.createUnsavedProjectView(m_project,view,name,description,m_provider);  addView(newView);  return newView;}  }
class C{  public void handleDOMNodeInsertedEvent(MutationEvent evt){  textBridge.handleDOMNodeInsertedEvent(evt);}  }
class C{  public InvalidClassException(String cname,String reason){  super(reason);  classname=cname;}  }
class C{  CustomerData(final String npcDescription,final String flavor,final int expectedTime,final int tip,final int xp,final String messageHot,final String messageCold,final int level){  this.npcDescription=npcDescription;  this.flavor=flavor;  this.expectedMinutes=expectedTime;  this.tip=tip;  this.xp=xp;  this.messageOnHotPizza=messageHot;  this.messageOnColdPizza=messageCold;  this.level=level;}  }
class C{  protected int resolveLevelForType(char[] qualifiedPattern,TypeBinding type){  if (qualifiedPattern == null)   return ACCURATE_MATCH;  if (type == null || !type.isValidBinding())   return INACCURATE_MATCH;  if (type.isTypeVariable())   return IMPOSSIBLE_MATCH;  char[] qualifiedPackageName=type.qualifiedPackageName();  char[] qualifiedSourceName=qualifiedSourceName(type);  char[] fullyQualifiedTypeName=qualifiedPackageName.length == 0 ? qualifiedSourceName : CharOperation.concat(qualifiedPackageName,qualifiedSourceName,'.');  return CharOperation.match(qualifiedPattern,fullyQualifiedTypeName,this.isCaseSensitive) ? ACCURATE_MATCH : IMPOSSIBLE_MATCH;}  }
class C{  public ObjectBindingPattern createObjectBindingPattern(){  ObjectBindingPatternImpl objectBindingPattern=new ObjectBindingPatternImpl();  return objectBindingPattern;}  }
class C{  public static Typeface caviarDreams(Context context){  return FontSourceProcessor.process(R.raw.caviardreams,context);}  }
class C{  public Properties readBackupProperties(URI backupLoc,String backupId) throws IOException {  Preconditions.checkNotNull(backupLoc);  Preconditions.checkNotNull(backupId);  URI backupPath=repository.resolve(backupLoc,backupId);  if (!repository.exists(backupPath)) {    throw new SolrException(ErrorCode.SERVER_ERROR,"Couldn't restore since doesn't exist: " + backupPath);  }  Properties props=new Properties();  try (Reader is=new InputStreamReader(new PropertiesInputStream(repository.openInput(backupPath,BACKUP_PROPS_FILE,IOContext.DEFAULT)),StandardCharsets.UTF_8)){    props.load(is);    return props;  } }  }
class C{  @Override public int hashCode(){  return _canonicalName.hashCode();}  }
class C{  private static int expensiveCCW(S2Point a,S2Point b,S2Point c){  if (a.equals(b) || b.equals(c) || c.equals(a)) {    return 0;  }  double sab=(a.dotProd(b) > 0) ? -1 : 1;  double sbc=(b.dotProd(c) > 0) ? -1 : 1;  double sca=(c.dotProd(a) > 0) ? -1 : 1;  S2Point vab=S2Point.add(a,S2Point.mul(b,sab));  S2Point vbc=S2Point.add(b,S2Point.mul(c,sbc));  S2Point vca=S2Point.add(c,S2Point.mul(a,sca));  double dab=vab.norm2();  double dbc=vbc.norm2();  double dca=vca.norm2();  double sign;  if (dca < dbc || (dca == dbc && a.lessThan(b))) {    if (dab < dbc || (dab == dbc && a.lessThan(c))) {      sign=S2Point.crossProd(vab,vca).dotProd(a) * sab;    } else {      sign=S2Point.crossProd(vca,vbc).dotProd(c) * sca;    }  } else {    if (dab < dca || (dab == dca && b.lessThan(c))) {      sign=S2Point.crossProd(vbc,vab).dotProd(b) * sbc;    } else {      sign=S2Point.crossProd(vca,vbc).dotProd(c) * sca;    }  }  if (sign > 0) {    return 1;  }  if (sign < 0) {    return -1;  }  int ccw=planarOrderedCCW(new R2Vector(a.y,a.z),new R2Vector(b.y,b.z),new R2Vector(c.y,c.z));  if (ccw == 0) {    ccw=planarOrderedCCW(new R2Vector(a.z,a.x),new R2Vector(b.z,b.x),new R2Vector(c.z,c.x));    if (ccw == 0) {      ccw=planarOrderedCCW(new R2Vector(a.x,a.y),new R2Vector(b.x,b.y),new R2Vector(c.x,c.y));    }  }  return ccw;}  }
class C{  public void plot(String filename){  try {    BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(filename));    render(out,0);    out.close();  } catch (  IOException ioe) {  }}  }
class C{  public static Project v(){  return project;}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  public double convert(){  return Double.longBitsToDouble(ints2long(high,low));}  }
class C{  public VideoEncoderCore(int width,int height,int bitRate,File outputFile) throws IOException {  mBufferInfo=new MediaCodec.BufferInfo();  MediaFormat format=MediaFormat.createVideoFormat(MIME_TYPE,width,height);  format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);  format.setInteger(MediaFormat.KEY_BIT_RATE,bitRate);  format.setInteger(MediaFormat.KEY_FRAME_RATE,FRAME_RATE);  format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,IFRAME_INTERVAL);  if (VERBOSE)   Log.d(TAG,"format: " + format);  mEncoder=MediaCodec.createEncoderByType(MIME_TYPE);  mEncoder.configure(format,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);  mInputSurface=mEncoder.createInputSurface();  mEncoder.start();  mMuxer=new MediaMuxer(outputFile.toString(),MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);  mTrackIndex=-1;  mMuxerStarted=false;}  }
class C{  public Object show(Wizard wizard,Action help){  return WizardDisplayer.showWizard(wizard,help);}  }
class C{  private void onRegistrationDone(Context appCtx,HomeserverConnectionConfig hsConfig,Credentials credentials,SimpleApiCallback<HomeserverConnectionConfig> callback){  if (TextUtils.isEmpty(credentials.userId)) {    callback.onMatrixError(new MatrixError(MatrixError.FORBIDDEN,"No user id"));    return;  }  Collection<MXSession> sessions=Matrix.getMXSessions(appCtx);  boolean isDuplicated=false;  for (  MXSession existingSession : sessions) {    Credentials cred=existingSession.getCredentials();    isDuplicated|=TextUtils.equals(credentials.userId,cred.userId) && TextUtils.equals(credentials.homeServer,cred.homeServer);  }  if (!isDuplicated) {    hsConfig.setCredentials(credentials);    MXSession session=Matrix.getInstance(appCtx).createSession(hsConfig);    Matrix.getInstance(appCtx).addSession(session);  }  callback.onSuccess(hsConfig);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public void incOutoforderBatchesReceived(){  this.stats.incInt(outoforderBatchesReceivedId,1);}  }
class C{  public Object returnInstance(final String instanceKey,final Map<String,Object> keyMap){  Object instance=null;  if (keyMap.containsKey(instanceKey)) {    instance=keyMap.get(instanceKey);  } else {    _logger.error("Instance : {} not found",instanceKey);  }  return instance;}  }
class C{  public static void extractExifInfo(MediaDetails details,String filePath){  ExifInterface exif=new ExifInterface();  try {    exif.readExif(filePath);  } catch (  FileNotFoundException e) {    Log.w(TAG,"Could not find file to read exif: " + filePath,e);  }catch (  IOException e) {    Log.w(TAG,"Could not read exif from file: " + filePath,e);  }  setExifData(details,exif.getTag(ExifInterface.TAG_FLASH),MediaDetails.INDEX_FLASH);  setExifData(details,exif.getTag(ExifInterface.TAG_IMAGE_WIDTH),MediaDetails.INDEX_WIDTH);  setExifData(details,exif.getTag(ExifInterface.TAG_IMAGE_LENGTH),MediaDetails.INDEX_HEIGHT);  setExifData(details,exif.getTag(ExifInterface.TAG_MAKE),MediaDetails.INDEX_MAKE);  setExifData(details,exif.getTag(ExifInterface.TAG_MODEL),MediaDetails.INDEX_MODEL);  setExifData(details,exif.getTag(ExifInterface.TAG_APERTURE_VALUE),MediaDetails.INDEX_APERTURE);  setExifData(details,exif.getTag(ExifInterface.TAG_ISO_SPEED_RATINGS),MediaDetails.INDEX_ISO);  setExifData(details,exif.getTag(ExifInterface.TAG_WHITE_BALANCE),MediaDetails.INDEX_WHITE_BALANCE);  setExifData(details,exif.getTag(ExifInterface.TAG_EXPOSURE_TIME),MediaDetails.INDEX_EXPOSURE_TIME);  ExifTag focalTag=exif.getTag(ExifInterface.TAG_FOCAL_LENGTH);  if (focalTag != null) {    details.addDetail(MediaDetails.INDEX_FOCAL_LENGTH,focalTag.getValueAsRational(0).toDouble());    details.setUnit(MediaDetails.INDEX_FOCAL_LENGTH,R.string.unit_mm);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Playlist p=getPlaylist(stack);  return (p == null) ? new java.util.Properties() : p.getProperties();}  }
class C{  public MeetingRecord(Integer id,String organizer,String topic,String description){  super(Meeting.MEETING);  setValue(0,id);  setValue(1,organizer);  setValue(2,topic);  setValue(3,description);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ProjectTodoIdExample(ProjectTodoIdObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getTodoId() != null) {    criteria.andTodoIdEqualTo(sample.getTodoId());  }}  }
class C{  public Boolean isIncluded(){  return !Import.None.equals(type) && included;}  }
class C{  public void addLayer(Layer layer,int position){  List<Layer> currentLayers=getLayerList();  currentLayers.remove(layer);  if (position > allLayers.size()) {    currentLayers.add(layer);  } else {    if (position < 0) {      position=0;    }    currentLayers.add(position,layer);  }  if (propertyHandler != null) {    String pre=layer.getPropertyPrefix();    if (pre != null && pre.length() > 0) {      propertyHandler.addUsedPrefix(pre);    }  }  setLayerList(currentLayers);  BeanContext bc=getBeanContext();  if (bc != null && layer.getAddToBeanContext() && layer.getBeanContext() == null) {    bc.add(layer);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Deprecated public static long UTC(int year,int month,int day,int hour,int minute,int second){  GregorianCalendar cal=new GregorianCalendar(false);  cal.setTimeZone(TimeZone.getTimeZone("GMT"));  cal.set(1900 + year,month,day,hour,minute,second);  return cal.getTimeInMillis();}  }
class C{  protected static double hypot(double a,double b){  return weka.core.matrix.Maths.hypot(a,b);}  }
class C{  public synchronized void updateAlternateIdentifierForDOI(){  Preconditions.checkNotNull(eml);  if (doi != null) {    List<String> ids=eml.getAlternateIdentifiers();    if (identifierStatus.equals(IdentifierStatus.PUBLIC_PENDING_PUBLICATION) || identifierStatus.equals(IdentifierStatus.PUBLIC)) {      List<String> reorderedList=Lists.newArrayList();      reorderedList.add(doi.toString());      for (      String id : ids) {        if (!id.equalsIgnoreCase(doi.toString())) {          reorderedList.add(id);        }      }      if (!ids.isEmpty()) {        ids.clear();      }      ids.addAll(reorderedList);      log.debug("DOI=" + doi.toString() + " added to resource's list of alt ids as first element");    } else     if (identifierStatus.equals(IdentifierStatus.UNAVAILABLE) || identifierStatus.equals(IdentifierStatus.UNRESERVED)) {      for (Iterator<String> iterator=ids.iterator(); iterator.hasNext(); ) {        String id=iterator.next();        if (id.equalsIgnoreCase(doi.toString())) {          iterator.remove();          log.debug("DOI=" + doi.toString() + " removed from resource's list of alt ids");        }      }    }  }}  }
class C{  public PingPongBuffer(int width,int height,Format frameBufferFormat,boolean hasDepth){  ownResources=true;  owned1=new FrameBuffer(frameBufferFormat,width,height,hasDepth);  owned2=new FrameBuffer(frameBufferFormat,width,height,hasDepth);  set(owned1,owned2);}  }
class C{  public static Matrix fromLocalOrientation(Vec4 origin,Vec4[] axes){  if (origin == null) {    throw new IllegalArgumentException("Origin Is Null");  }  if (axes == null) {    throw new IllegalArgumentException("Axes Is Null");  }  if (axes.length < 3) {    throw new IllegalArgumentException("Array Invalid Length");  }  if (axes[0] == null || axes[1] == null || axes[2] == null) {    throw new IllegalArgumentException("Axes Is Null");  }  return fromTranslation(origin).multiply(fromAxes(axes));}  }
class C{  private static boolean isFinalSigma(char[] value,int offset,int count,int index){  if (index <= offset) {    return false;  }  char previous=value[index - 1];  if (!(Character.isLowerCase(previous) || Character.isUpperCase(previous) || Character.isTitleCase(previous))) {    return false;  }  if (index + 1 >= offset + count) {    return true;  }  char next=value[index + 1];  if (Character.isLowerCase(next) || Character.isUpperCase(next) || Character.isTitleCase(next)) {    return false;  }  return true;}  }
class C{  public void removeEventListener(IRcsServiceRegistrationListener listener){  if (sLogger.isActivated()) {    sLogger.info("Remove a service listener");  }synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.removeEventListener(listener);  }}  }
class C{  public boolean contains(long index){  assertSegmentOpen();  if (!validIndex(index))   return false;  long offset=relativeOffset(index);  return offsetIndex.contains(offset);}  }
class C{  public void stopped(long time){  boolean callUpdate=false;synchronized (this) {    if (state == State.MOVING) {      state=State.STOPPED;      stoppedStartMs=time;      callUpdate=true;    }  }}  }
class C{  private static void copyIntoImage(Image img1,Image img2,int x,int y){  int count=0;  int start=0;  int aim=0;  double[] temp=null;  temp=img2.getData();  start=img1.getWidth() * y + x;  for (int i=0; i < img2.getHeight(); i++) {    for (int j=0; j < img2.getWidth(); j++) {      aim=start + j + img1.getWidth() * i;      img1.getData()[aim]=temp[count];      count++;    }  }}  }
class C{  public static long rollback(String fileName,long targetVersion,Writer writer){  long newestVersion=-1;  PrintWriter pw=new PrintWriter(writer,true);  if (!FilePath.get(fileName).exists()) {    pw.println("File not found: " + fileName);    return newestVersion;  }  FileChannel file=null;  FileChannel target=null;  int blockSize=MVStore.BLOCK_SIZE;  try {    file=FilePath.get(fileName).open("r");    FilePath.get(fileName + ".temp").delete();    target=FilePath.get(fileName + ".temp").open("rw");    long fileSize=file.size();    ByteBuffer block=ByteBuffer.allocate(4096);    Chunk newestChunk=null;    for (long pos=0; pos < fileSize; ) {      block.rewind();      DataUtils.readFully(file,pos,block);      block.rewind();      int headerType=block.get();      if (headerType == 'H') {        block.rewind();        target.write(block,pos);        pos+=blockSize;        continue;      }      if (headerType != 'c') {        pos+=blockSize;        continue;      }      Chunk c=null;      try {        c=Chunk.readChunkHeader(block,pos);      } catch (      IllegalStateException e) {        pos+=blockSize;        continue;      }      if (c.len <= 0) {        pos+=blockSize;        continue;      }      int length=c.len * MVStore.BLOCK_SIZE;      ByteBuffer chunk=ByteBuffer.allocate(length);      DataUtils.readFully(file,pos,chunk);      if (c.version > targetVersion) {        pos+=length;        continue;      }      chunk.rewind();      target.write(chunk,pos);      if (newestChunk == null || c.version > newestChunk.version) {        newestChunk=c;        newestVersion=c.version;      }      pos+=length;    }    int length=newestChunk.len * MVStore.BLOCK_SIZE;    ByteBuffer chunk=ByteBuffer.allocate(length);    DataUtils.readFully(file,newestChunk.block * MVStore.BLOCK_SIZE,chunk);    chunk.rewind();    target.write(chunk,fileSize);  } catch (  IOException e) {    pw.println("ERROR: " + e);    e.printStackTrace(pw);  } finally {    if (file != null) {      try {        file.close();      } catch (      IOException e) {      }    }    if (target != null) {      try {        target.close();      } catch (      IOException e) {      }    }  }  pw.flush();  return newestVersion;}  }
class C{  public void empty(){  cache=new Hashtable(cacheSize);  cacheUsage=new Hashtable(cacheSize);  log.fine("Cache: " + this.getClass().getName() + " was cleared.");}  }
class C{  public void changeAndroidConfig(String value){  WebElement androidConfigButton=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.android.tab.identifier"))));  WebElement inputAndroidConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.android.input.identifier"))));  WebElement buttonSaveConfig=driver.findElement(By.xpath((uiElementMapper.getElement("emm.configuration.android.button.save.identifier"))));  androidConfigButton.click();  inputAndroidConfig.sendKeys(value);  buttonSaveConfig.click();}  }
class C{  public static Matcher<Object> identicalTo(final Object value){  return new IdenticalTo(value);}  }
class C{  private void validateClusterState(){  ClusterInfo.ClusterState state=coordinator.getCoordinatorClient().getControlNodesState();  log.info("Current control nodes' state: {}",state);  if (state == ClusterInfo.ClusterState.STABLE) {    log.warn("Cluster is stable and no need to do node recovery");    throw new IllegalStateException("Cluster is stable and no need to do node recovery");  }  DrUtil drUtil=new DrUtil(coordinator.getCoordinatorClient());  if (drUtil.isMultisite()) {    List<Site> allStandbySites=drUtil.listStandbySites();    for (    Site site : allStandbySites) {      if (!site.getState().equals(SiteState.STANDBY_SYNCED) && !site.getState().equals(SiteState.STANDBY_PAUSED) && !site.getState().equals(SiteState.STANDBY_DEGRADED)) {        log.error("Node recovery is not allowed as standby site({}) status is unexpected({})",site.getName(),site.getState());        throw new IllegalStateException("Node recovery is not allowed as standby site status is unexpected");      }    }  }  if (drUtil.isMultivdc()) {    List<String> allOtherVdcs=drUtil.getOtherVdcIds();    for (    String vdc : allOtherVdcs) {      state=coordinator.getCoordinatorClient().getControlNodesState(vdc);      if (state == ClusterInfo.ClusterState.DEGRADED) {        log.error("Node recovery is not allowed as a connected vdc({}) status is degraded",vdc);        throw new IllegalStateException("Node recovery is not allowed as a connected vdc status is degraded");      }    }  }}  }
class C{  public synchronized int renameCategory(String currentName,String newName){  int count=0;  for (  Map.Entry<String,AddressbookEntry> entry : entries.entrySet()) {    if (entry.getValue().hasCategory(currentName)) {      AddressbookEntry changedEntry=renameCategory(entry.getValue(),currentName,newName);      entry.setValue(changedEntry);      count++;    }  }  if (count > 0) {    saveOnChange();  }  return count;}  }
class C{  @Override public void onStart(){  super.onStart();  ButtonClickerObserver buttonClickerObserver=new ButtonClickerObserver(this);  PurchasingManager.registerObserver(buttonClickerObserver);}  }
class C{  public synchronized void clear(){  listeners=EmptyArray;}  }
class C{  public XML(InputStream input,String options) throws IOException, ParserConfigurationException, SAXException {  this(PApplet.createReader(input),options);}  }
class C{  @Override public boolean containsScope(ClientAppScope scope){  return tokenScopes.contains(scope);}  }
class C{  public void waitFor(final int millis){  TestUtils.waitFor(millis);}  }
class C{  public Polygon(){  xpoints=new int[MIN_LENGTH];  ypoints=new int[MIN_LENGTH];}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  void removeAt(final int removeIndex){  final Object[] items=this.items;  if (removeIndex == takeIndex) {    items[takeIndex]=null;    if (++takeIndex == items.length)     takeIndex=0;    count--;    if (itrs != null)     itrs.elementDequeued();  } else {    final int putIndex=this.putIndex;    for (int i=removeIndex; ; ) {      int next=i + 1;      if (next == items.length)       next=0;      if (next != putIndex) {        items[i]=items[next];        i=next;      } else {        items[i]=null;        this.putIndex=i;        break;      }    }    count--;    if (itrs != null)     itrs.removedAt(removeIndex);  }  notFull.signal();}  }
class C{  public static void xmlGlobalInexistent(Class<?> aClass){  throw new XmlMappingGlobalDoesNotExistException(MSG.INSTANCE.message(xmlMappingGlobalDoesNotExistException,aClass.getSimpleName()));}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  private void compilePredicates(int opPos,Expression[] predicates) throws TransformerException {  for (int i=0; OpCodes.OP_PREDICATE == getOp(opPos); i++) {    predicates[i]=predicate(opPos);    opPos=getNextOpPos(opPos);  }}  }
class C{  public Lock(){}  }
class C{  public void pop(){  stack.pop();}  }
class C{  private void cmd_print(boolean printPreview){  int AD_Process_ID=m_curTab.getAD_Process_ID();  log.info("ID=" + AD_Process_ID);  if (AD_Process_ID == 0) {    cmd_report();    return;  }  cmd_save(false);  int table_ID=m_curTab.getAD_Table_ID();  int record_ID=m_curTab.getRecord_ID();  ProcessInfo pi=new ProcessInfo(getTitle(),AD_Process_ID,table_ID,record_ID);  pi.setAD_User_ID(Env.getAD_User_ID(m_ctx));  pi.setAD_Client_ID(Env.getAD_Client_ID(m_ctx));  pi.setPrintPreview(printPreview);  ProcessCtl.process(this,m_curWindowNo,pi,null);  statusBar.setStatusLine(pi.getSummary(),pi.isError());}  }
class C{  private void spawnUnitTests(String... tests) throws IOException, InterruptedException {  ArrayList<String> args=new ArrayList<>(SubprocessUtil.getVMCommandLine());  for (Iterator<String> i=args.iterator(); i.hasNext(); ) {    String arg=i.next();    if (arg.equals("-Xdebug") || arg.startsWith("-Xrunjdwp:")) {      i.remove();    }  }  boolean usesJvmciCompiler=args.contains("-jvmci") || args.contains("-XX:+UseJVMCICompiler");  Assume.assumeFalse("This test can only run if JVMCI is not one of the default compilers",usesJvmciCompiler);  args.add(Java8OrEarlier ? "-XX:+TraceClassLoading" : "-Xlog:class+init=info");  args.add("com.oracle.mxtool.junit.MxJUnitWrapper");  args.addAll(Arrays.asList(tests));  ArrayList<String> loadedGraalClassNames=new ArrayList<>();  ProcessBuilder processBuilder=new ProcessBuilder(args);  if (VERBOSE) {    processBuilder.redirectError(Redirect.INHERIT);  }  if (VERBOSE) {    System.out.println("\n=============================================================================");    System.out.println(Util.join(args," "));    System.out.println("-----------------------------------------------------------------------------");  }  Process process=processBuilder.start();  int testCount=0;  BufferedReader stdout=new BufferedReader(new InputStreamReader(process.getInputStream()));  String line;  while ((line=stdout.readLine()) != null) {    if (VERBOSE) {      System.out.println(line);    }    String loadedClass=extractClass(line);    if (loadedClass != null) {      if (isGraalClass(loadedClass)) {        loadedGraalClassNames.add(loadedClass);      }    } else     if (line.startsWith("OK (")) {      Assert.assertTrue(testCount == 0);      int start="OK (".length();      int end=line.indexOf(' ',start);      testCount=Integer.parseInt(line.substring(start,end));    }  }  if (VERBOSE) {    System.out.println("=============================================================================");  }  String suffix=VERBOSE ? "" : " (use -D" + VERBOSE_PROPERTY + "=true to debug)";  Assert.assertEquals("exit code" + suffix,0,process.waitFor());  Assert.assertNotEquals("test count" + suffix,0,testCount);  checkAllowedGraalClasses(loadedGraalClassNames,suffix);}  }
class C{  public static void main(String[] args){  String[] list;  int i;  System.out.println("\nInstalled Look and Feel themes:");  list=getInstalledLookAndFeels();  for (i=0; i < list.length; i++)   System.out.println((i + 1) + ". " + list[i]);  System.out.println("\nNote: a theme can be set in '" + PROPERTY_FILE + "'.");}  }
class C{  public Ascending(int col){  super(col);}  }
class C{  public long skip(long n){  if (position + n <= document.getLength()) {    position+=n;    return n;  }  long temp=position;  position=document.getLength();  return document.getLength() - temp;}  }
class C{  public boolean isUnknown(){  return mDisplayName == null || mDisplayName.contentEquals(phones.get(0).getNumber().getRawUriString());}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public static int testBlockSchedule2Snippet(int value){  int res=0;  container.a=value;  for (int i=0; i < 100; i++) {    if (i == 10) {      return container.a;    }    res+=i;  }  return res;}  }
class C{  private static boolean checkValue(String val) throws MalformedObjectNameException {  if (val == null)   throw new NullPointerException("Invalid value (null)");  final int len=val.length();  if (len == 0)   return false;  final char[] s=val.toCharArray();  final int[] result=parseValue(s,0);  final int endValue=result[0];  final boolean value_pattern=result[1] == 1;  if (endValue < len)   throw new MalformedObjectNameException("Invalid character in value: `" + s[endValue] + "'");  return value_pattern;}  }
class C{  public CopyOnWriteHashSet(){  this(new CopyOnWriteHashMap<T,Boolean>());}  }
class C{  public static String propertyNameToPresentationName(String s){  StringBuilder b=new StringBuilder();  boolean wasUpperCase=true;  for (int i=0; i < s.length(); i++) {    if (Character.isUpperCase(s.charAt(i))) {      if (!wasUpperCase) {        b.append(' ');      }      wasUpperCase=true;    } else {      wasUpperCase=false;    }    b.append(i == 0 ? Character.toUpperCase(s.charAt(i)) : s.charAt(i));  }  return b.toString();}  }
class C{  public InputSource resolveEntity(StylesheetHandler handler,String publicId,String systemId) throws org.xml.sax.SAXException {  return null;}  }
class C{  public void onRemove(){}  }
class C{  public static String unbackQuoteChars(String string){  int index;  StringBuffer newStringBuffer;  String charsFind[]={"\\\\","\\'","\\t","\\n","\\r","\\\"","\\%","\\u001E"};  char charsReplace[]={'\\','\'','\t','\n','\r','"','%','\u001E'};  int pos[]=new int[charsFind.length];  int curPos;  String str=new String(string);  newStringBuffer=new StringBuffer();  while (str.length() > 0) {    curPos=str.length();    index=-1;    for (int i=0; i < pos.length; i++) {      pos[i]=str.indexOf(charsFind[i]);      if ((pos[i] > -1) && (pos[i] < curPos)) {        index=i;        curPos=pos[i];      }    }    if (index == -1) {      newStringBuffer.append(str);      str="";    } else {      newStringBuffer.append(str.substring(0,pos[index]));      newStringBuffer.append(charsReplace[index]);      str=str.substring(pos[index] + charsFind[index].length());    }  }  return newStringBuffer.toString();}  }
class C{  protected void refreshRemoveNodes() throws Exception {  int i;  FolderTokenDocTreeNode node=null;  int numNodes=count();  for (i=0; i < numNodes; i++) {    node=(FolderTokenDocTreeNode)m_nodes.get(i);    if (node.isRemove()) {      m_nodes.remove(i);      numNodes=numNodes - 1;    }  }}  }
class C{  private static String buildLogMessage(String methodName,long loadingTimeDuration){  StringBuilder message=new StringBuilder();  message.append("Chronometro ----> ");  message.append(methodName);  message.append(" in ");  message.append("[");  message.append(loadingTimeDuration);  message.append("ms");  message.append("]");  return message.toString();}  }
class C{  public Version(String version){  this(null,version);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.268 -0400",hash_original_method="F1254340946A24B6B351EA7534A8F562",hash_generated_method="4A149002C870D7F82179D5A1AE75A1D4") Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      Node<K,V> b=q.node;      Node<K,V> n=b.next;      for (; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  public void write(int b) throws IOException {  oneByte[0]=(byte)b;  if (bufferedBlockCipher != null) {    int len=bufferedBlockCipher.processBytes(oneByte,0,1,buf,0);    if (len != 0) {      out.write(buf,0,len);    }  } else {    out.write(streamCipher.returnByte((byte)b));  }}  }
class C{  private static String replaceTextAndTags(final SubstringFormatterDetails details,final String text,final String input,final String output){  String convertedText=text;  if (details.isKeepTags()) {    convertedText=convertedText.replace(input,output);  } else {    convertedText=convertedText.replace(details.getStartTag() + input + details.getEndTag(),output);  }  return convertedText;}  }
class C{  public ThrottlingMemLinkedQueueWithDMStats(int maxMemSize,int startThrottleMemSize,int maxSize,int startThrottleSize,ThrottledMemQueueStatHelper stats){  super(maxSize,stats);  this.maxMemSize=maxMemSize;  this.startThrottleMemSize=startThrottleMemSize;  this.maxSize=maxSize;  this.startThrottleSize=startThrottleSize;}  }
class C{  public boolean requiresPostProcessing(){  return usesRelevance() || usesSorting();}  }
class C{  public static <K,O,C extends Collection<O>>Map<K,C> groupBy(Iterable<O> objs,Function<O,K> groupFn,final Factory<C> fact){  Iterator<O> it=objs.iterator();  if (!it.hasNext())   return new HashMap<K,C>();  Map<K,C> map=new HashMap<K,C>();  for (  O obj : objs) {    K key=null;    try {      key=groupFn.apply(obj);    } catch (    Exception e) {      e.printStackTrace();      return null;    }    CollectionUtils.addToValueCollection(map,key,obj,fact);  }  return map;}  }
class C{  private void resetToXMLStream(){  return;}  }
class C{  public ArffReader(Reader reader,Instances template,int lines,int capacity,String... fieldSepAndEnclosures) throws IOException {  this(reader,template,lines,capacity,false,fieldSepAndEnclosures);}  }
class C{  public void testRetainAllPartial(){  Trie retain=buildTrie(m_Data[0]);  m_Trie.retainAll(retain);  assertEquals("Retaining of 1 string",1,m_Trie.size());}  }
class C{  @SuppressWarnings("deprecation") public AttributesFactory(RegionAttributes<K,V> regionAttributes){synchronized (this.regionAttributes) {    this.regionAttributes.cacheListeners=new ArrayList<CacheListener<K,V>>(Arrays.asList(regionAttributes.getCacheListeners()));  }  this.regionAttributes.cacheLoader=regionAttributes.getCacheLoader();  this.regionAttributes.cacheWriter=regionAttributes.getCacheWriter();  this.regionAttributes.regionTimeToLive=regionAttributes.getRegionTimeToLive().getTimeout();  this.regionAttributes.regionTimeToLiveExpirationAction=regionAttributes.getRegionTimeToLive().getAction();  this.regionAttributes.regionIdleTimeout=regionAttributes.getRegionIdleTimeout().getTimeout();  this.regionAttributes.regionIdleTimeoutExpirationAction=regionAttributes.getRegionIdleTimeout().getAction();  this.regionAttributes.entryTimeToLive=regionAttributes.getEntryTimeToLive().getTimeout();  this.regionAttributes.entryTimeToLiveExpirationAction=regionAttributes.getEntryTimeToLive().getAction();  this.regionAttributes.customEntryTimeToLive=regionAttributes.getCustomEntryTimeToLive();  this.regionAttributes.entryIdleTimeout=regionAttributes.getEntryIdleTimeout().getTimeout();  this.regionAttributes.entryIdleTimeoutExpirationAction=regionAttributes.getEntryIdleTimeout().getAction();  this.regionAttributes.customEntryIdleTimeout=regionAttributes.getCustomEntryIdleTimeout();  this.regionAttributes.scope=regionAttributes.getScope();  this.regionAttributes.dataPolicy=regionAttributes.getDataPolicy();  this.regionAttributes.statisticsEnabled=regionAttributes.getStatisticsEnabled();  this.regionAttributes.ignoreJTA=regionAttributes.getIgnoreJTA();  this.regionAttributes.keyConstraint=regionAttributes.getKeyConstraint();  this.regionAttributes.valueConstraint=regionAttributes.getValueConstraint();  this.regionAttributes.initialCapacity=regionAttributes.getInitialCapacity();  this.regionAttributes.loadFactor=regionAttributes.getLoadFactor();  this.regionAttributes.concurrencyLevel=regionAttributes.getConcurrencyLevel();  this.regionAttributes.concurrencyChecksEnabled=regionAttributes.getConcurrencyChecksEnabled();  this.regionAttributes.earlyAck=regionAttributes.getEarlyAck();  this.regionAttributes.diskStoreName=regionAttributes.getDiskStoreName();  if (this.regionAttributes.diskStoreName == null) {    this.regionAttributes.diskWriteAttributes=regionAttributes.getDiskWriteAttributes();    this.regionAttributes.diskDirs=regionAttributes.getDiskDirs();    this.regionAttributes.diskSizes=regionAttributes.getDiskDirSizes();  }  this.regionAttributes.diskSynchronous=regionAttributes.isDiskSynchronous();  this.regionAttributes.indexMaintenanceSynchronous=regionAttributes.getIndexMaintenanceSynchronous();  this.regionAttributes.partitionAttributes=regionAttributes.getPartitionAttributes();  this.regionAttributes.evictionAttributes=(EvictionAttributesImpl)regionAttributes.getEvictionAttributes();  this.regionAttributes.membershipAttributes=regionAttributes.getMembershipAttributes();  this.regionAttributes.subscriptionAttributes=regionAttributes.getSubscriptionAttributes();  this.regionAttributes.evictionAttributes=(EvictionAttributesImpl)regionAttributes.getEvictionAttributes();  this.regionAttributes.publisher=regionAttributes.getPublisher();  this.regionAttributes.enableAsyncConflation=regionAttributes.getEnableAsyncConflation();  this.regionAttributes.enableSubscriptionConflation=regionAttributes.getEnableSubscriptionConflation();  this.regionAttributes.poolName=regionAttributes.getPoolName();  this.regionAttributes.isCloningEnabled=regionAttributes.getCloningEnabled();  this.regionAttributes.multicastEnabled=regionAttributes.getMulticastEnabled();  this.regionAttributes.gatewaySenderIds=new CopyOnWriteArraySet<String>(regionAttributes.getGatewaySenderIds());  this.regionAttributes.asyncEventQueueIds=new CopyOnWriteArraySet<String>(regionAttributes.getAsyncEventQueueIds());  this.regionAttributes.isLockGrantor=regionAttributes.isLockGrantor();  if (regionAttributes instanceof UserSpecifiedRegionAttributes) {    this.regionAttributes.setIndexes(((UserSpecifiedRegionAttributes<K,V>)regionAttributes).getIndexes());  }  if (regionAttributes instanceof UserSpecifiedRegionAttributes) {    UserSpecifiedRegionAttributes<K,V> nonDefault=(UserSpecifiedRegionAttributes<K,V>)regionAttributes;    this.regionAttributes.initHasFields(nonDefault);    this.regionAttributes.requiresPoolName=nonDefault.requiresPoolName;  } else {    this.regionAttributes.setAllHasFields(false);  }  this.regionAttributes.compressor=regionAttributes.getCompressor();  this.regionAttributes.offHeap=regionAttributes.getOffHeap();}  }
class C{  public static boolean isDecCharacter(final char c){  return CharMatcher.inRange('0','9').apply(c);}  }
class C{  public static List<ApiField> generateMergedFields(List<ApiField> oldFields,List<ApiField> newFields){  int[][] lcs=computeLcs(oldFields,newFields);  List<ApiField> mergedFields=Lists.newArrayList();  int aPos=oldFields.size();  int bPos=newFields.size();  while (aPos > 0 || bPos > 0) {    if (aPos > 0 && bPos > 0 && oldFields.get(aPos - 1).compareTo(newFields.get(bPos - 1)) == 0) {      ApiField field=oldFields.get(aPos - 1);      field.changeState=ChangeState.NOT_CHANGED;      mergedFields.add(field);      aPos--;      bPos--;    } else     if (bPos > 0 && (aPos == 0 || lcs[aPos][bPos - 1] >= lcs[aPos - 1][bPos])) {      ApiField field=newFields.get(bPos - 1);      field.changeState=ChangeState.ADDED;      mergedFields.add(field);      bPos--;    } else {      ApiField field=oldFields.get(aPos - 1);      field.changeState=ChangeState.REMOVED;      mergedFields.add(field);      aPos--;    }  }  Collections.reverse(mergedFields);  return mergedFields;}  }
class C{  protected void sequence_UndefinedType(ISerializationContext context,UndefinedType semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getUndefinedTypeAccess().getNameUndefinedKeyword_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  private void handleOwnershipAcquireFailedException(StreamOp op,final OwnershipAcquireFailedException oafe){  logger.warn("Failed to write data into stream {} because stream is acquired by {} : {}",new Object[]{name,oafe.getCurrentOwner(),oafe.getMessage()});  AsyncLogWriter oldWriter=null;  boolean statusChanged=false;synchronized (this) {    if (StreamStatus.INITIALIZED == status) {      oldWriter=setStreamStatus(StreamStatus.BACKOFF,StreamStatus.INITIALIZED,null,oafe.getCurrentOwner(),oafe);      statusChanged=true;    }  }  if (statusChanged) {    Abortables.asyncAbort(oldWriter,false);    scheduleTryAcquireOnce(nextAcquireWaitTimeMs);  }  op.fail(oafe);}  }
class C{  public void print_hashtable(Hashtable h){  print("hashtable size=" + h.size());  Enumeration keys=h.keys();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    print(key + " = ");    print(h.get(key).toString());  }}  }
class C{  public String weightByDistanceTipText(){  return "Weight nearest neighbours by their distance.";}  }
class C{  private static void sendPackets(PacketStreamer.Client client,short numPackets,OFMessageType ofType,boolean sync) throws TException {  while (numPackets-- > 0) {    Message msg=new Message();    Packet packet=new Packet();    List<String> sids=new ArrayList<String>();    sids.add("session1");    sids.add("session2");    msg.setSessionIDs(sids);    packet.setMessageType(ofType);    long sw_dpid=numPackets / 40 + 1;    packet.setSwPortTuple(new SwitchPortTuple(sw_dpid,(short)(numPackets - (sw_dpid - 1) * 40)));    String strData="New data, sequence " + numPackets;    packet.setData(strData.getBytes());    msg.setPacket(packet);    try {      if (sync) {        client.pushMessageSync(msg);        log.debug("Send packet sync: " + msg.toString());      } else {        client.pushMessageAsync(msg);        log.debug("Send packet sync: " + msg.toString());      }    } catch (    TTransportException e) {      log.error(e.toString());    }    try {      Thread.sleep(100);    } catch (    Exception e) {    }  }}  }
class C{  @NonNull public RegistrationRequest build(){  return new RegistrationRequest(mConfiguration,Collections.unmodifiableList(mRedirectUris),mResponseTypes == null ? mResponseTypes : Collections.unmodifiableList(mResponseTypes),mGrantTypes == null ? mGrantTypes : Collections.unmodifiableList(mGrantTypes),mSubjectType,mTokenEndpointAuthenticationMethod,Collections.unmodifiableMap(mAdditionalParameters));}  }
class C{  public Future<ActivityResult> initiateActivity(final Activity activity,final Activity parentActivity,final ActivityListener listener){  try {    Json.attachFactory(HGPeerJsonFactory.getInstance().setHyperGraph(thisPeer.getGraph()));    activity.setThisPeer(thisPeer);    ActivityFuture future=insertNewActivity(activity,parentActivity,listener);    activity.getState().compareAndAssign(Limbo,Started);    activity.initiate();    return future;  }  finally {    Json.detachFactory();  }}  }
class C{  private void runTask(){  connection=null;  try {    logger.info("Connecting to data source");    connection=(Database)dataSource.getConnection();  } catch (  ReplicatorException e) {    e.printStackTrace();  }  try {    connection.connect();  } catch (  SQLException e) {    e.printStackTrace();  }  if (chunkDefFile != null) {    logger.info("Using definition from file " + chunkDefFile);    chunkDefinition=new ChunkDefinitions(chunkDefFile);    try {      chunkDefinition.parseFile();    } catch (    IOException e) {      e.printStackTrace();    }catch (    ReplicatorException e) {      e.printStackTrace();    }    LinkedList<ChunkRequest> chunksDefinitions=chunkDefinition.getChunksDefinitions();    for (    ChunkRequest chunkRequest : chunksDefinitions) {      if (chunkRequest.getTable() != null) {        try {          Table table=connection.findTable(chunkRequest.getSchema(),chunkRequest.getTable(),true);          if (table != null)           generateChunksForTable(table,chunkRequest.getChunkSize(),chunkRequest.getColumns()); else           logger.warn("Failed while processing table " + chunkRequest.getSchema() + "."+ chunkRequest.getTable()+ " : table not found.");        } catch (        SQLException e) {          e.printStackTrace();        }catch (        ReplicatorException e) {          e.printStackTrace();        }catch (        InterruptedException e) {          e.printStackTrace();        }      } else       if (chunkRequest.getSchema() != null) {        generateChunksForSchema(chunkRequest.getSchema());      }    }  } else {    try {      DatabaseMetaData databaseMetaData=connection.getDatabaseMetaData();      ResultSet schemasRs=databaseMetaData.getSchemas();      while (schemasRs.next()) {        String schemaName=schemasRs.getString("TABLE_SCHEM");        if (!connection.isSystemSchema(schemaName)) {          generateChunksForSchema(schemaName);        }      }      schemasRs.close();    } catch (    SQLException e) {      logger.error(e);    }catch (    Exception e) {      logger.error(e);    }  }  for (int i=0; i < extractChannels; i++) {    logger.info("Posting job complete request " + i);    try {      chunks.put(new NumericChunk());    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  if (logger.isDebugEnabled())   logger.debug(this.getName() + " done.");}  }
class C{  public void updateRendering(AffineTransform u2d,boolean dbr,Shape aoi,int width,int height){  repaintManager.setupRenderer(u2d,dbr,aoi,width,height);  List l=new ArrayList(1);  l.add(aoi);  updateRendering(l,false);}  }
class C{  protected String doIt() throws Exception {  log.info("AD_Client_ID=" + p_AD_Client_ID + ", AD_Table_ID="+ p_AD_Table_ID+ ", DeletePosting="+ p_DeletePosting);  String sql="SELECT AD_Table_ID, TableName " + "FROM AD_Table t " + "WHERE t.IsView='N'";  if (p_AD_Table_ID > 0)   sql+=" AND t.AD_Table_ID=" + p_AD_Table_ID;  sql+=" AND EXISTS (SELECT * FROM AD_Column c " + "WHERE t.AD_Table_ID=c.AD_Table_ID AND c.ColumnName='Posted' AND c.IsActive='Y')";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Table_ID=rs.getInt(1);      String TableName=rs.getString(2);      if (p_DeletePosting)       delete(TableName,AD_Table_ID); else       reset(TableName);    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  return "@Updated@ = " + m_countReset + ", @Deleted@ = "+ m_countDelete;}  }
class C{  public static void main(String... args) throws Exception {  new ClobTest().test();}  }
class C{  public int length(){  return _nDataChars;}  }
class C{  protected void subscribe() throws IOException {  if (sampleClientSub == null) {    try {      sampleClientSub=new SampleAsyncWait(url,clientIdSub,cleanSession,quietMode,userName,password);    } catch (    MqttException e) {      e.printStackTrace();    }  }  if (sampleClientSub != null) {    String topic="Sample/#";    int qos=2;    try {      sampleClientSub.subscribe(topic,qos);    } catch (    Throwable e) {      e.printStackTrace();    }  }}  }
class C{  public static void convertSignalControlData(final SignalControlData controlData,SignalControlData sylviaSignalControlData){  for (  SignalSystemControllerData controllerData : controlData.getSignalSystemControllerDataBySystemId().values()) {    SignalSystemControllerData newControllerData=sylviaSignalControlData.getFactory().createSignalSystemControllerData(controllerData.getSignalSystemId());    sylviaSignalControlData.addSignalSystemControllerData(newControllerData);    newControllerData.setControllerIdentifier(DgSylviaController.CONTROLLER_IDENTIFIER);    for (    SignalPlanData signalPlan : controllerData.getSignalPlanData().values()) {      newControllerData.addSignalPlanData(DgSignalsUtils.copySignalPlanData(signalPlan,Id.create(FIXED_TIME_PREFIX + signalPlan.getId().toString(),SignalPlan.class),sylviaSignalControlData.getFactory()));      newControllerData.addSignalPlanData(convertSignalPlanData(signalPlan,sylviaSignalControlData.getFactory()));    }  }}  }
class C{  public void press(){  mIsPressed=true;}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  private void initExclusions(Map<String,Object> appMap){  String excludesParam=webconfig.getOptionValue(ResourceExcludes);  String[] patterns=Util.split(appMap,excludesParam," ");  excludePatterns=new ArrayList<>(patterns.length);  for (  String pattern : patterns) {    excludePatterns.add(Pattern.compile(".*\\" + pattern));  }}  }
class C{  public DebuggerStatement createDebuggerStatement(){  DebuggerStatementImpl debuggerStatement=new DebuggerStatementImpl();  return debuggerStatement;}  }
class C{  public HadoopLocalFileSystemV2(URI uri,Configuration cfg) throws IOException, URISyntaxException {  this(cfg);}  }
class C{  private void registerDelegate(final Buffer buffer,final String delegateName){  if (LOG.isTraceEnabled()) {    LOG.trace("registerDelegate: {}",delegateName);  }  try {    Delegate delegate=delegateFactory.parseDelegate(delegateName,buffer);    delegateMap.put(delegateName,delegate);  } catch (  ValidationException validationException) {    LOG.error("Could not parse delegate: {}",validationException.toString());  }}  }
class C{  public ZDT(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public Object eval(String source,int lineNo,int columnNo,Object script) throws BSFException {  try {    Class scriptClass=evalScripts.get(script);    if (scriptClass == null) {      scriptClass=loader.parseClass(script.toString(),source);      evalScripts.put(script,scriptClass);    } else {      LOG.fine("eval() - Using cached script...");    }    Script s=InvokerHelper.createScript(scriptClass,context);    return s.run();  } catch (  Exception e) {    throw new BSFException(BSFException.REASON_EXECUTION_ERROR,"exception from Groovy: " + e,e);  }}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Deprecated public static synchronized void resetProperties(){}  }
class C{  public HoltWintersModelBuilder alpha(double alpha){  this.alpha=alpha;  return this;}  }
class C{  public static void time(String s){  System.out.println(ANSI_CYAN + "TIME: " + s+ ANSI_RESET);}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return new RCMDoubleMatrix2D(rows,columns);}  }
class C{  public BST(){}  }
class C{  private void rehash(){  int size=_symbols.length;  int newSize=size + size;  if (newSize > MAX_TABLE_SIZE) {    _size=0;    Arrays.fill(_symbols,null);    Arrays.fill(_buckets,null);    _dirty=true;    return;  }  String[] oldSyms=_symbols;  Bucket[] oldBuckets=_buckets;  _symbols=new String[newSize];  _buckets=new Bucket[newSize >> 1];  _indexMask=newSize - 1;  _sizeThreshold=_thresholdSize(newSize);  int count=0;  int maxColl=0;  for (int i=0; i < size; ++i) {    String symbol=oldSyms[i];    if (symbol != null) {      ++count;      int index=_hashToIndex(calcHash(symbol));      if (_symbols[index] == null) {        _symbols[index]=symbol;      } else {        int bix=(index >> 1);        Bucket newB=new Bucket(symbol,_buckets[bix]);        _buckets[bix]=newB;        maxColl=Math.max(maxColl,newB.length());      }    }  }  size>>=1;  for (int i=0; i < size; ++i) {    Bucket b=oldBuckets[i];    while (b != null) {      ++count;      String symbol=b.getSymbol();      int index=_hashToIndex(calcHash(symbol));      if (_symbols[index] == null) {        _symbols[index]=symbol;      } else {        int bix=(index >> 1);        Bucket newB=new Bucket(symbol,_buckets[bix]);        _buckets[bix]=newB;        maxColl=Math.max(maxColl,newB.length());      }      b=b.getNext();    }  }  _longestCollisionList=maxColl;  if (count != _size) {    throw new Error("Internal error on SymbolTable.rehash(): had " + _size + " entries; now have "+ count+ ".");  }}  }
class C{  public boolean visitUnionPattern(ExpressionOwner owner,UnionPattern pattern){  return true;}  }
class C{  protected TFormalParameterImpl(){  super();}  }
class C{  public void open(int port) throws IOException {  connection=new DatagramSocket(port);  connection.setSoTimeout(timeout);}  }
class C{  @SuppressWarnings("unchecked") public static <E>TypeConverter<E> typeConverterFor(Class<E> cls) throws NoSuchTypeConverterException {  TypeConverter<E> typeConverter=TYPE_CONVERTERS.get(cls);  if (typeConverter == null) {    throw new NoSuchTypeConverterException(cls);  }  return typeConverter;}  }
class C{  public BatchStatus(ServiceException e){  this();  int code=e.getHttpErrorCodeOverride();  if (code == -1) {    code=HttpURLConnection.HTTP_INTERNAL_ERROR;  }  setCode(code);  setReason(e.getMessage());  setContentType(e.getResponseContentType());  setContent(e.getResponseBody());}  }
class C{  public static void writeResultToFile(Result result,String fname) throws Exception {  PrintWriter outer=new PrintWriter(new BufferedWriter(new FileWriter(fname)));  outer.write(result.toString());  outer.close();}  }
class C{  public void handleThermostatClick(int idx){  listener.onThermostatClick(idx);}  }
class C{  public boolean isAlive(){  return !toExit;}  }
class C{  private void prune(Node node,Graph graph,int depth){  logger.log("pruning","Trying to remove edges adjacent to node " + node + ", depth = "+ depth+ ".");  List<Node> a=new LinkedList<>(graph.getAdjacentNodes(node));  NEXT_EDGE:   for (  Node y : a) {    List<Node> adjNode=new LinkedList<>(graph.getAdjacentNodes(node));    adjNode.remove(y);    adjNode=possibleParents(node,adjNode);    if (adjNode.size() < depth) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjNode.size(),depth);    int[] choice;    while ((choice=cg.next()) != null) {      List<Node> condSet=GraphUtils.asList(choice,adjNode);      if (independent(node,y,condSet) && !edgeRequired(node,y)) {        graph.removeEdge(node,y);        if (graph.getEdges(y).isEmpty() && y != getTarget()) {          graph.removeNode(y);        }        continue NEXT_EDGE;      }    }  }  int numAdjacents=graph.getAdjacentNodes(node).size();  noteMaxAtDepth(depth,numAdjacents,node);}  }
class C{  @Ignore @Test public void testHealedEventTryBroken(){  HealedEvent event=new HealedEvent(1);  event.put("amount","boo boo");  assertThat(event.get("amount"),is("boo boo"));  assertThat(Integer.valueOf(event.getInt("amount")),is(Integer.valueOf(0)));}  }
class C{  protected void uninstallDefaults(){  SeaGlassContext context=getContext(splitPane,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;  context=getContext(splitPane,Region.SPLIT_PANE_DIVIDER,ENABLED);  dividerStyle.uninstallDefaults(context);  context.dispose();  dividerStyle=null;  super.uninstallDefaults();}  }
class C{  public void printInfo(PrintStream out,CharSequence prefix){  out.println(prefix + "nds " + rows.size()+ " cmds "+ cmds.size()+ " cells "+ getCells()+ " valcells "+ getCellsVal()+ " pntcells "+ getCellsPnt());}  }
class C{  @Override public void doMethod(SocksProxy socksProxy) throws SocksException, IOException {  checkNotNull(socksProxy,"Argument [socksProxy] may not be null");  Credentials credentials=socksProxy.getCredentials();  if (credentials == null || !(credentials instanceof UsernamePasswordCredentials)) {    throw new SocksException("Need Username/Password authentication");  }  String username=credentials.getUserPrincipal().getName();  String password=credentials.getPassword();  InputStream inputStream=socksProxy.getInputStream();  OutputStream outputStream=socksProxy.getOutputStream();  final int USERNAME_LENGTH=username.getBytes().length;  final int PASSWORD_LENGTH=password.getBytes().length;  final byte[] bytesOfUsername=username.getBytes();  final byte[] bytesOfPassword=password.getBytes();  final byte[] bufferSent=new byte[3 + USERNAME_LENGTH + PASSWORD_LENGTH];  bufferSent[0]=0x01;  bufferSent[1]=(byte)USERNAME_LENGTH;  System.arraycopy(bytesOfUsername,0,bufferSent,2,USERNAME_LENGTH);  bufferSent[2 + USERNAME_LENGTH]=(byte)PASSWORD_LENGTH;  System.arraycopy(bytesOfPassword,0,bufferSent,3 + USERNAME_LENGTH,PASSWORD_LENGTH);  outputStream.write(bufferSent);  outputStream.flush();  logger.debug("{}",LogMessageBuilder.build(bufferSent,MsgType.SEND));  byte[] authenticationResult=new byte[2];  inputStream.read(authenticationResult);  logger.debug("{}",LogMessageBuilder.build(authenticationResult,MsgType.RECEIVE));  if (authenticationResult[1] != Socks5.AUTHENTICATION_SUCCEEDED) {    outputStream.close();    inputStream.close();    socksProxy.getProxySocket().close();    throw new AuthenticationException("Username or password error");  }}  }
class C{  private boolean equalsFragments(ByteString other){  int thisOffset=0;  Iterator<LiteralByteString> thisIter=new PieceIterator(this);  LiteralByteString thisString=thisIter.next();  int thatOffset=0;  Iterator<LiteralByteString> thatIter=new PieceIterator(other);  LiteralByteString thatString=thatIter.next();  int pos=0;  while (true) {    int thisRemaining=thisString.size() - thisOffset;    int thatRemaining=thatString.size() - thatOffset;    int bytesToCompare=Math.min(thisRemaining,thatRemaining);    boolean stillEqual=(thisOffset == 0) ? thisString.equalsRange(thatString,thatOffset,bytesToCompare) : thatString.equalsRange(thisString,thisOffset,bytesToCompare);    if (!stillEqual) {      return false;    }    pos+=bytesToCompare;    if (pos >= totalLength) {      if (pos == totalLength) {        return true;      }      throw new IllegalStateException();    }    if (bytesToCompare == thisRemaining) {      thisOffset=0;      thisString=thisIter.next();    } else {      thisOffset+=bytesToCompare;    }    if (bytesToCompare == thatRemaining) {      thatOffset=0;      thatString=thatIter.next();    } else {      thatOffset+=bytesToCompare;    }  }}  }
class C{  private static void checkReadRadius(){  System.out.println("Checking readRadius...");  String planetsTxtPath="./data/planets.txt";  double actualOutput=NBody.readRadius(planetsTxtPath);  checkEquals(actualOutput,2.50E11,"readRadius()",0.01);}  }
class C{  public static WebDoc createPopup(String title){  WebDoc doc=create(title);  doc.getHead().addElement(new script((Element)null,"/adempiere/js/window.js"));  doc.getHead().addElement(new script((Element)null,"/adempiere/js/calendar.js"));  doc.getHead().addElement(new script((Element)null,"/adempiere/js/table.js"));  doc.getHead().addElement(new script((Element)null,"/adempiere/lang/calendar-en.js"));  doc.getHead().addElement(new link("/adempiere/css/window.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new link("/adempiere/css/popup.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new link("/adempiere/css/table.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.getHead().addElement(new link("/adempiere/css/calendar-blue.css",link.REL_STYLESHEET,link.TYPE_CSS));  doc.setClasses("popupTable","popupHeader");  doc.getTable().setCellSpacing(0);  return doc;}  }
class C{  private static Matrix createMatrix(List<Feature> order,Map<Feature,Point3d> pts) throws IllegalArgumentException {  double[][] A=new double[3][order.size()];  int i=0;  for (  Feature f : order) {    Point3d p=pts.get(f);    A[0][i]=p.x;    A[1][i]=p.y;    A[2][i]=p.z;    i++;  }  return new Matrix(A);}  }
class C{  public boolean endNalUnit(int discardPadding){  if (!isFilling) {    return false;  }  nalLength-=discardPadding;  isFilling=false;  isCompleted=true;  return true;}  }
class C{  static boolean removeAllImpl(Set<?> set,Iterator<?> iterator){  boolean changed=false;  while (iterator.hasNext()) {    changed|=set.remove(iterator.next());  }  return changed;}  }
class C{  @Override public void deleteGroupSnapshots(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    _log.info("deleteGroupSnapshots operation {}",snapshot);    List<BlockSnapshot> snapshots=_dbClient.queryObject(BlockSnapshot.class,Arrays.asList(snapshot));    BlockSnapshot snapshotObj=snapshots.get(0);    CIMObjectPath groupSynchronized=_cimPath.getGroupSynchronizedPath(storage,snapshotObj.getReplicationGroupInstance());    if (groupSynchronized != null) {      try {        _helper.callModifyReplica(storage,_helper.getReturnGroupSyncToPoolInputArguments(groupSynchronized));      } catch (      Exception e) {        CIMObjectPath snapGroup=(CIMObjectPath)groupSynchronized.getKeyValue(IBMSmisConstants.CP_SYNCED_ELEMENT);        if (_helper.checkExists(storage,snapGroup,false,false) != null) {          throw e;        }      }    }    List<BlockSnapshot> snaps=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshotObj,_dbClient);    for (    BlockSnapshot snap : snaps) {      snap.setInactive(true);      snap.setIsSyncActive(false);      _dbClient.updateObject(snap);    }    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    String message=String.format("Generic exception when trying to delete snapshots from consistency group on array %s",storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("deleteGorupSnapshots",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatecdatasection.class,args);}  }
class C{  public void garbageCollect(final GL2 gl){  final ModelScene[] scenes=garbage.toArray(new ModelScene[0]);  garbage.clear();  for (  final ModelScene scene : scenes) {    scene.wipe(gl);    scene.dispose();  }}  }
class C{  public int capacity(){  return items.length;}  }
class C{  public void ensureCapacity(final int required){  if (required <= 0) {    return;  }  final int available=this.buffer.length - this.len;  if (required > available) {    expand(this.len + required);  }}  }
class C{  public static int[] convertMatrix(double[] input){  return convertMatrix(input,0);}  }
class C{  public ListResponse list(String categoryId) throws IOException {  return list(categoryId,null,null,null);}  }
class C{  public static GenericEntity createGenericEntity(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  GenericEntity newEntity=new GenericEntity();  newEntity.init(delegator,modelEntity,fields);  return newEntity;}  }
class C{  @Override public void didBeginAnimation(Object sender,PLICamera camera,PLCameraAnimationType type){switch (type) {case PLCameraAnimationTypeLookAt:    mView.setValidForCameraAnimation(true);  break;default :break;}PLViewListener listener=mView.getListener();if (listener != null) listener.onDidBeginCameraAnimation(mView,sender,camera,type);}  }
class C{  public static Product createProductResaleCopy(Product productTemplate,Organization vendor,Marketplace marketplace,DataService mgr) throws NonUniqueBusinessKeyException {  Product resaleCopy=productTemplate.copyForResale(vendor);  mgr.persist(resaleCopy);  CatalogEntry resaleCatalogEntry=QueryBasedObjectFactory.createCatalogEntry(resaleCopy,marketplace);  if (marketplace != null) {    resaleCatalogEntry.setVisibleInCatalog(true);    resaleCatalogEntry.setAnonymousVisible(true);  }  mgr.persist(resaleCatalogEntry);  return resaleCopy;}  }
class C{  public int count(){  int count=0;  @SuppressWarnings("unchecked") List<Long> counts=find("select count(*) FROM " + entityClass.getName());  if (counts != null)   for (  Long c : counts)   count+=c;  return count;}  }
class C{  @Override public DataHeaderViewHolder newViewHolder(ViewGroup viewGroup){  View dataHeaderView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.offer_header,viewGroup,false);  return new DataHeaderViewHolder(dataHeaderView);}  }
class C{  public h6 addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public boolean consumeWhitespace(){  boolean seen=false;  while (matchesWhitespace()) {    pos++;    seen=true;  }  return seen;}  }
class C{  @Override public Message createMessage() throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createMessage" + session);  }  return session.createMessage();}  }
class C{  public void actionPerformed(ActionEvent e){  System.out.println(e.getActionCommand());  Object item=e.getSource();  JInternalFrame frame=(JInternalFrame)itemsToFrames.get(item);  frame.moveToFront();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__CHARACTER:    return getCharacter();case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__SEQUENCE:  return getSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final PrecedingIterator clone=(PrecedingIterator)super.clone();    final int[] stackCopy=new int[_stack.length];    System.arraycopy(_stack,0,stackCopy,0,_stack.length);    clone._stack=stackCopy;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public static void main(String[] args) throws IOException, InterruptedException {  if (args.length != 1) {    System.err.println("Usage: QuickStart <project-id>");    return;  }  String projectId=args[0];  Bigquery bigquery=BigQueryServiceFactory.getService();  String query="SELECT TOP( title, 10) as title, COUNT(*) as revision_count " + "FROM [publicdata:samples.wikipedia] WHERE wp_namespace = 0;";  System.out.println();  System.out.println("----- Running the asynchronous query and printing it to stdout.");  runQueryRpcAndPrint(bigquery,projectId,query,System.out);  System.out.println();  System.out.println("----- Listing all the Datasets in the projectId");  listDatasets(bigquery,projectId);  System.out.println();  System.out.println("----- Listing all the Projects");  listProjects(bigquery);}  }
class C{  public static boolean hasOpenOrders(Tradingday tradingday){  for (  Tradestrategy tradestrategy : tradingday.getTradestrategies()) {    for (    TradeOrder tradeOrder : tradestrategy.getTradeOrders()) {      if (tradeOrder.isActive()) {        return true;      }    }  }  return false;}  }
class C{  protected MaxpTable(){  super(TrueTypeTable.MAXP_TABLE);  setVersion(0x10000);  setNumGlyphs(0);  setMaxPoints(0);  setMaxContours(0);  setMaxComponentPoints(0);  setMaxComponentContours(0);  setMaxZones(2);  setMaxTwilightPoints(0);  setMaxStorage(0);  setMaxFunctionDefs(0);  setMaxInstructionDefs(0);  setMaxStackElements(0);  setMaxSizeOfInstructions(0);  setMaxComponentElements(0);  setMaxComponentDepth(0);}  }
class C{  public static <T>int compare(T a,T b,Comparator<? super T> c){  return (a == b) ? 0 : c.compare(a,b);}  }
class C{  public boolean isComplete(){  return patternElement == null;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static String runBjobs(String runId) throws IOException, InterruptedException {  Vector<String> commands=new Vector<String>();  commands.add("bjobs -l -J " + runId + " | grep SWAP");  String output=runBashCommand(commands);  if (output != null) {    System.out.println("bjobs -l -J " + runId + " | grep SWAP = "+ output);  }  return "";}  }
class C{  public Object clone() throws CloneNotSupportedException {  return (IntStack)super.clone();}  }
class C{  @Override public Void visitLiteral(LiteralTree tree,AnnotatedTypeMirror type){  if (!stringPatterns.isEmpty() && tree.getKind() == Kind.STRING_LITERAL) {    List<Set<? extends AnnotationMirror>> matches=new ArrayList<>();    List<Set<? extends AnnotationMirror>> nonMatches=new ArrayList<>();    String string=(String)tree.getValue();    for (    Pattern pattern : stringPatterns.keySet()) {      Set<AnnotationMirror> sam=stringPatterns.get(pattern);      if (pattern.matcher(string).matches()) {        matches.add(sam);      } else {        nonMatches.add(sam);      }    }    Set<? extends AnnotationMirror> res=null;    if (!matches.isEmpty()) {      res=matches.get(0);      for (      Set<? extends AnnotationMirror> sam : matches) {        res=qualHierarchy.greatestLowerBounds(res,sam);      }      for (      Set<? extends AnnotationMirror> sam : nonMatches) {        if (qualHierarchy.isSubtype(res,sam)) {          ErrorReporter.errorAbort("Bug in @ImplicitFor(stringpatterns=...) in type hierarchy definition: inferred type for \"" + string + "\" is "+ res+ " which is a subtype of "+ sam+ " but its pattern does not match the string.  matches = "+ matches+ "; nonMatches = "+ nonMatches);        }      }      type.addAnnotations(res);    }  }  return super.visitLiteral(tree,type);}  }
class C{  public static void launchSmsIntent(final Activity activity,String number,String text){  Log.i(LOG_TAG,"Launch SMS intent to " + number);  Uri smsUri=Uri.parse("smsto:" + number);  Intent smsIntent=new Intent(Intent.ACTION_SENDTO,smsUri);  smsIntent.putExtra("sms_body",text);  PackageManager smspackageManager=activity.getPackageManager();  List<ResolveInfo> smsresolveInfos=smspackageManager.queryIntentActivities(smsIntent,0);  if (smsresolveInfos.size() > 0) {    activity.startActivity(smsIntent);  }}  }
class C{  public static String[] wrapString(@Nonnull String str,int maxWidth,@Nullable String[] output){  if (output == null) {    output=new String[(int)((str.length() / maxWidth) * 1.5d + 1)];  }  int lineStart=0;  int arrayIndex=0;  int i;  for (i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (c == '\n') {      output=addString(output,str.substring(lineStart,i),arrayIndex++);      lineStart=i + 1;    } else     if (i - lineStart == maxWidth) {      output=addString(output,str.substring(lineStart,i),arrayIndex++);      lineStart=i;    }  }  if (lineStart != i || i == 0) {    output=addString(output,str.substring(lineStart),arrayIndex++,output.length + 1);  }  if (arrayIndex < output.length) {    output[arrayIndex]=null;  }  return output;}  }
class C{  public void init(Context context){  requestQueue=Volley.newRequestQueue(context,new OkHttpStack(new OkHttpClient()));}  }
class C{  protected CCIntervalAction action(){  CGSize s=CCDirector.sharedDirector().winSize();  return CCMoveBy.action(duration,CGPoint.make(s.width - ADJUST_FACTOR,0));}  }
class C{  public static boolean launchAndEnqueueFile(File file,boolean audioLaunched){  if (MediaPlayer.isPlayableFile(file) && GUIMediator.isPlaylistVisible()) {    GUIMediator.instance().attemptStopAudio();    GUIMediator.instance().launchMedia(new MediaSource(file),false);    return true;  } else {    return launchFile(file,false,audioLaunched);  }}  }
class C{  private void swapRowsAndColumns(double[][] A,int i,int j,boolean isSymmetric,int offset){  double tmp;  int k;  i+=offset;  j+=offset;  if (!isSymmetric) {    double[] tr;    tr=A[i];    A[i]=A[j];    A[j]=tr;    for (k=offset; k < n; k++) {      tmp=A[k][i];      A[k][i]=A[k][j];      A[k][j]=tmp;    }  } else {    int t;    double[] ti=new double[n];    double[] tj=new double[n];    if (i > j) {      t=i;      i=j;      j=t;    }    for (k=offset; k < i; k++) {      ti[k]=A[i][k];    }    for (k=i; k < n; k++) {      ti[k]=A[k][i];    }    tmp=ti[i];    ti[i]=ti[j];    ti[j]=tmp;    for (k=offset; k < j; k++) {      tj[k]=A[j][k];    }    for (k=j; k < n; k++) {      tj[k]=A[k][j];    }    tmp=tj[i];    tj[i]=tj[j];    tj[j]=tmp;    for (k=offset; k < i; k++) {      A[i][k]=tj[k];      A[j][k]=ti[k];    }    for (k=i; k < j; k++) {      A[k][i]=tj[k];      A[j][k]=ti[k];    }    for (k=j; k < n; k++) {      A[k][i]=tj[k];      A[k][j]=ti[k];    }  }}  }
class C{  public static byte[] networkPortionToCalledPartyBCD(String s){  String networkPortion=extractNetworkPortion(s);  return numberToCalledPartyBCDHelper(networkPortion,false);}  }
class C{  public void addCoinsReceivedEventListener(Executor executor,WalletCoinsReceivedEventListener listener){  coinsReceivedListeners.add(new ListenerRegistration<WalletCoinsReceivedEventListener>(listener,executor));}  }
class C{  public void testNegPosFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=1;  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void writeToStream(OutputStream os) throws IOException {  if (_readLength <= _readOffset) {    readBuffer();  }  while (_readOffset < _readLength) {    os.write(_readBuffer,_readOffset,_readLength - _readOffset);    readBuffer();  }}  }
class C{  private void updateUserIdsLocked(){  int num=0;  for (int i=0; i < mUsers.size(); i++) {    if (!mUsers.valueAt(i).partial) {      num++;    }  }  final int[] newUsers=new int[num];  int n=0;  for (int i=0; i < mUsers.size(); i++) {    if (!mUsers.valueAt(i).partial) {      newUsers[n++]=mUsers.keyAt(i);    }  }  mUserIds=newUsers;}  }
class C{  public Any2LumRed(CachableRed src){  super(src,src.getBounds(),fixColorModel(src),fixSampleModel(src),src.getTileGridXOffset(),src.getTileGridYOffset(),null);  props.put(ColorSpaceHintKey.PROPERTY_COLORSPACE,ColorSpaceHintKey.VALUE_COLORSPACE_GREY);}  }
class C{  public String numClassesTipText(){  return "The number of classes to generate.";}  }
class C{  private short peek(){  return stack[top];}  }
class C{  public Note updateNote(Note note,User user) throws UnauthorizedException {  if (user == null) {    throw new UnauthorizedException("missing user");  }  EntityManager mgr=getEntityManager();  try {    note.setEmailAddress(user.getEmail());    mgr.persist(note);  }  finally {    mgr.close();  }  DevicePing.pingAllDevices(user.getEmail(),note.getId(),"update");  return note;}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  public StringBuffer computeIndentation(int offset,boolean assumeOpeningBrace){  StringBuffer reference=getReferenceIndentation(offset,assumeOpeningBrace);  if (fAlign != JavaHeuristicScanner.NOT_FOUND) {    try {      Region line=fDocument.getLineInformationOfOffset(fAlign);      int lineOffset=line.getOffset();      return createIndent(lineOffset,fAlign,false);    } catch (    BadLocationException e) {      return null;    }  }  if (reference == null)   return null;  return createReusingIndent(reference,fIndent);}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  public static ODataRequest createODataRequestWithContentType(ODataRequest.Method method,MediaType contentType) throws UnsupportedEncodingException {  return new ODataRequest.Builder().setBodyText("test","UTF-8").setUri(SERVICE_ROOT).setContentType(contentType).setMethod(method).build();}  }
class C{  public void printTree(final EvolutionState state,final PrintWriter writer){  child.printRootedTree(state,writer,0);  writer.println();}  }
class C{  public String explain(){  StringBuilder r=new StringBuilder();  r.append("StatementCoverageTestFitness for ");  r.append(goalInstruction.toString());  r.append(" in " + goalInstruction.getMethodName());  r.append("\n");  r.append("CDS:\n");  for (  BranchCoverageTestFitness branchFitness : branchFitnesses) {    r.append("\t" + branchFitness.toString());  }  return r.toString();}  }
class C{  public void processAnnotations(final Class<?>... types){  if (annotationMapper == null) {    throw new InitializationException("No " + AnnotationMapper.class.getName() + " available");  }  annotationMapper.processAnnotations(types);}  }
class C{  int order(){  return 4;}  }
class C{  public boolean isTurnoutConnectivityComplete(){  return turnoutConnectivity;}  }
class C{  public static void assertFileHasLength(FileSystem fs,Path path,int expected) throws IOException {  FileStatus status=fs.getFileStatus(path);  assertEquals("Wrong file length of file " + path + " status: "+ status,expected,status.getLen());}  }
class C{  public TimestampValidityState(DataInput is) throws IOException {  myTimestamp=is.readLong();}  }
class C{  public static long safeMultiply(long val1,int scalar){switch (scalar) {case -1:    return -val1;case 0:  return 0L;case 1:return val1;}long total=val1 * scalar;if (total / scalar != val1) {throw new ArithmeticException("The calculation caused an overflow: " + val1 + " * "+ scalar);}return total;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  void preCloneNodeEvent(ASTNode node){}  }
class C{  public void open() throws Exception {  try {    renderer.open();  } catch (  Exception e) {    throw e;  }}  }
class C{  private Code(final int value){  this.value=value;}  }
class C{  public static String asciiToHexString(final String asciiString){  final StringBuffer sb=new StringBuffer();  for (  final byte b : asciiString.getBytes()) {    sb.append(byteToHexString(b));  }  return sb.toString();}  }
class C{  public static SymbolReference<MethodDeclaration> solveMethodInType(TypeDeclaration typeDeclaration,String name,List<Type> argumentsTypes,TypeSolver typeSolver){  if (typeDeclaration instanceof JavaParserClassDeclaration) {    Context ctx=((JavaParserClassDeclaration)typeDeclaration).getContext();    return ctx.solveMethod(name,argumentsTypes,typeSolver);  }  if (typeDeclaration instanceof JavaParserInterfaceDeclaration) {    Context ctx=((JavaParserInterfaceDeclaration)typeDeclaration).getContext();    return ctx.solveMethod(name,argumentsTypes,typeSolver);  }  if (typeDeclaration instanceof JavaParserEnumDeclaration) {    if (name.equals("values") && argumentsTypes.isEmpty()) {      return SymbolReference.solved(new JavaParserEnumDeclaration.ValuesMethod((JavaParserEnumDeclaration)typeDeclaration,typeSolver));    }    Context ctx=((JavaParserEnumDeclaration)typeDeclaration).getContext();    return ctx.solveMethod(name,argumentsTypes,typeSolver);  }  if (typeDeclaration instanceof ReflectionClassDeclaration) {    return ((ReflectionClassDeclaration)typeDeclaration).solveMethod(name,argumentsTypes);  }  if (typeDeclaration instanceof ReflectionInterfaceDeclaration) {    return ((ReflectionInterfaceDeclaration)typeDeclaration).solveMethod(name,argumentsTypes);  }  if (typeDeclaration instanceof JavassistInterfaceDeclaration) {    return ((JavassistInterfaceDeclaration)typeDeclaration).solveMethod(name,argumentsTypes);  }  if (typeDeclaration instanceof JavassistClassDeclaration) {    return ((JavassistClassDeclaration)typeDeclaration).solveMethod(name,argumentsTypes);  }  throw new UnsupportedOperationException(typeDeclaration.getClass().getCanonicalName());}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  } catch (  IOException e) {    closeSilently(file);    throw e;  } finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  static void testClassName(String className){  testClassNames(Arrays.asList(className));}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("TemplateTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  StepRequest request=erm.createStepRequest(mainThread,StepRequest.STEP_LINE,StepRequest.STEP_OVER);  request.enable();  listenUntilVMDisconnect();  if (!testFailed) {    println("TemplateTest: passed");  } else {    throw new Exception("TemplateTest: failed");  }}  }
class C{  public synchronized void clear(){  for (  Map.Entry<UUID,SessionHolder> entry : sessions.entrySet()) {    save(entry.getValue());  }  sessions.clear();}  }
class C{  public static int powerOfTwoCeiling(int reference){  int power=(int)Math.ceil(Math.log(reference) / Math.log(2d));  return (int)Math.pow(2d,power);}  }
class C{  public static Map<String,Slice> loadAllFromMap(Map<String,Object> genericSlices){  if (genericSlices == null)   return Collections.emptyMap();  Map<String,Slice> result=new LinkedHashMap<>(genericSlices.size());  for (  Map.Entry<String,Object> entry : genericSlices.entrySet()) {    String name=entry.getKey();    Object val=entry.getValue();    if (val instanceof Slice) {      result.put(name,(Slice)val);    } else     if (val instanceof Map) {      result.put(name,new Slice(name,null,(Map<String,Object>)val));    }  }  return result;}  }
class C{  public int size(){  return names.size();}  }
class C{  public void afterMessageCreation(Message msg){}  }
class C{  protected ImplementationFactory(){}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean selectInputMethod(Locale locale){  return false;}  }
class C{  public boolean isHasSubMenu(){  Object oo=get_Value(COLUMNNAME_HasSubMenu);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void initComputeProgram(){  glUseProgram(computeProgram);  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  eyeUniform=glGetUniformLocation(computeProgram,"eye");  ray00Uniform=glGetUniformLocation(computeProgram,"ray00");  ray10Uniform=glGetUniformLocation(computeProgram,"ray10");  ray01Uniform=glGetUniformLocation(computeProgram,"ray01");  ray11Uniform=glGetUniformLocation(computeProgram,"ray11");  debugUniform=glGetUniformLocation(computeProgram,"debug");  sceneMinUniform=glGetUniformLocation(computeProgram,"sceneMin");  sceneMaxUniform=glGetUniformLocation(computeProgram,"sceneMax");  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  props.put(0,GL_BUFFER_BINDING);  int nodesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Nodes");  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,nodesResourceIndex,props,null,params);  nodesSsboBinding=params.get(0);  int trianglesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Triangles");  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,trianglesResourceIndex,props,null,params);  trianglesSsboBinding=params.get(0);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  glUseProgram(0);}  }
class C{  public void publishEventsToBase(List<Event> eventList){  Iterator<Event> i=eventList.iterator();  while (i.hasNext()) {    Event event=i.next();    try {      publishEventToBase(event);    } catch (    EPAuthenticationException e) {      System.err.println("Authentication problem when publishing events: " + e.getMessage());    }catch (    IOException e) {      System.err.println("IOException when publishing events: " + e.getMessage());    }catch (    ServiceException e) {      e.printStackTrace();      System.err.println("ServiceException when publishing events: " + e.getMessage());    }  }}  }
class C{  protected synchronized int acquireSamples(){  while (samplesCount == 0 && !(stopped || stoppedByEOF)) {    try {      wait();    } catch (    InterruptedException e) {    }  }  lsamples=samples;  int ln=samplesCount;  samples=null;  samplesCount=0;  notify();  return ln;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public void removeModifyListener(ModifyListener listener){  checkWidget();  if (listener == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  removeListener(SWT.Modify,listener);}  }
class C{  public boolean isExpected(final HandlingEvent event){  if (legs.isEmpty()) {    return true;  }  if (event.type() == HandlingEvent.Type.RECEIVE) {    final Leg leg=legs.get(0);    return (leg.loadLocation().equals(event.location()));  }  if (event.type() == HandlingEvent.Type.LOAD) {    for (    Leg leg : legs) {      if (leg.loadLocation().sameIdentityAs(event.location()) && leg.voyage().sameIdentityAs(event.voyage()))       return true;    }    return false;  }  if (event.type() == HandlingEvent.Type.UNLOAD) {    for (    Leg leg : legs) {      if (leg.unloadLocation().equals(event.location()) && leg.voyage().equals(event.voyage()))       return true;    }    return false;  }  if (event.type() == HandlingEvent.Type.CLAIM) {    final Leg leg=lastLeg();    return (leg.unloadLocation().equals(event.location()));  }  return true;}  }
class C{  @Override public MemChunkHolder<NonVolatileMemAllocator> resizeChunk(MemChunkHolder<NonVolatileMemAllocator> mholder,long size){  MemChunkHolder<NonVolatileMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    Long addr=m_nvmasvc.reallocate(m_nid,mholder.get(),size,true);    if (0 == addr && m_activegc) {      m_chunkcollector.waitReclaimCoolDown(m_gctimeout);      addr=m_nvmasvc.reallocate(m_nid,mholder.get(),size,true);    }    if (0 != addr) {      mholder.clear();      mholder.destroy();      ret=new MemChunkHolder<NonVolatileMemAllocator>(this,addr,size);      if (ac) {        m_chunkcollector.register(ret);      }    }  }  return ret;}  }
class C{  private void handleProblemEdges(){  int remaining=0;  for (int i=0; i < numProblemEdges; i++) {    SpaceEffGraphEdge e=problemEdges[i];    SpaceEffGraphNode src=e.fromNode();    SpaceEffGraphNode dst=e.toNode();    SpaceEffGraphNode srcRoot=src.nextSorted;    if (srcRoot != dst) {      problemEdges[remaining++]=e;    }  }  numProblemEdges=remaining;  if (numProblemEdges == 0)   return;  int searchnum=0;  for (int i=0; i < numProblemEdges; i++) {    SpaceEffGraphEdge e=problemEdges[i];    SpaceEffGraphNode src=e.fromNode();    SpaceEffGraphNode dst=e.toNode();    AbstractBURS_TreeNode n=castNode(src).getCurrentParent();    if (n.isTreeRoot())     continue;    SpaceEffGraphNode srcRoot=src.nextSorted;    SpaceEffGraphNode dstRoot=dst.nextSorted;    if (srcRoot == dstRoot && srcRoot != dst) {      if (!trueEdgeRedundant(src,dst,srcRoot)) {        if (DEBUG) {          VM.sysWrite("Potential intra-tree cycle with edge " + e + " forcing "+ n+ " to be a tree root\n");        }        makeTreeRoot(n);        problemEdgePrep(n,n.dg_node);      }    } else {      if (reachableRoot(dstRoot,srcRoot,++searchnum)) {        if (DEBUG) {          VM.sysWrite("Potential inter-tree cycle with edge " + e + " forcing "+ n+ " to be a tree root\n");        }        makeTreeRoot(n);        problemEdgePrep(n,n.dg_node);      }    }  }}  }
class C{  public CharSet(){}  }
class C{  public String[] highlight(String field,Query query,IndexSearcher searcher,TopDocs topDocs,int maxPassages) throws IOException {  Map<String,String[]> res=highlightFields(new String[]{field},query,searcher,topDocs,new int[]{maxPassages});  return res.get(field);}  }
class C{  public FlowGraph(final List<BasicBlock> nodes,final List<BlockEdge> edges){  super(nodes,edges);  for (  final Object block : nodes) {    if (!(block instanceof BasicBlock)) {      throw new IllegalArgumentException("Error: Block list contains objects that are not BasicBlock objects");    }  }  for (  final Object block : edges) {    if (!(block instanceof BlockEdge)) {      throw new IllegalArgumentException("Error: Edge list contains objects that are not BlockEdge objects");    }  }}  }
class C{  public boolean isEmpty(){  return nameValueMap.isEmpty();}  }
class C{  public int countAllRowsInTable() throws AccumuloException, AccumuloSecurityException, TableNotFoundException, NoSuchAlgorithmException {  return printTables("Counting rows.",null,null);}  }
class C{  public ArrayMemberValue(ConstPool cp){  super('[',cp);  type=null;  values=null;}  }
class C{  private void handleEndOfStream(State state,InnerState innerState) throws StopRequest {  mInfo.mCurrentBytes=innerState.mBytesSoFar;  mDB.updateDownload(mInfo);  boolean lengthMismatched=(innerState.mHeaderContentLength != null) && (innerState.mBytesSoFar != Integer.parseInt(innerState.mHeaderContentLength));  if (lengthMismatched) {    if (cannotResume(innerState)) {      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,"mismatched content length");    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"closed socket before end of file");    }  }}  }
class C{  public boolean use_original_names(){  return soot.PhaseOptions.getBoolean(options,"use-original-names");}  }
class C{  private void updateHubDspChain(){  NativeHub hub=mPlaybackService.getNativeHub();  String[] sockets=new String[mDSPChain.size()];  int index=0;  for (  ProviderIdentifier id : mDSPChain) {    DSPConnection conn=PluginsLookup.getDefault().getDSP(id);    if (conn != null) {      String socketName=conn.getAudioSocketName();      if (socketName == null) {        socketName=mPlaybackService.assignProviderAudioSocket(conn);      }      if (socketName == null) {        Log.e(TAG,"======== SOCKET NAME STILL NULL AFTER ASSIGNPROVIDERAUDIOSOCKET");      } else       if (DEBUG) {        Log.d(TAG,"SOCKET " + index + ": "+ socketName);      }      sockets[index]=socketName;    } else {      Log.e(TAG,"============================================");      Log.e(TAG,"= FIXMEFIXMEFIXMEFIXMEFIXMEFIXMEFIXMEFIXME =");      Log.e(TAG,"= DSP in the chain, but not yet connected! =");      Log.e(TAG,"= FIXMEFIXMEFIXMEFIXMEFIXMEFIXMEFIXMEFIXME =");      Log.e(TAG,"============================================");    }    index++;  }  hub.setDSPChain(sockets);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.687 -0500",hash_original_method="4A8566B6C9E948D021F9A160FC69F9F0",hash_generated_method="B203292C024EC0BD68E507B4BF96ACB1") @Override public synchronized void reset(){  pos=0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.774 -0500",hash_original_method="F527C5C3DD4F0176588A0C261AD76B7A",hash_generated_method="E21B90D8FFA2C73529233B2579E8CE52") private Message obtainCompleteMessage(int what){  pendingOperations++;  lastRelevantPoll=null;  needsPoll=true;  if (DBG_POLL)   log("obtainCompleteMessage: pendingOperations=" + pendingOperations + ", needsPoll="+ needsPoll);  return obtainMessage(what);}  }
class C{  protected boolean isTrafficClassChanged(){  return true;}  }
class C{  public static boolean isBinary(Object object){  if (object instanceof byte[])   return true;  if (object instanceof ObjectWrap)   return isBinary(((ObjectWrap)object).getEmbededObject(""));  return false;}  }
class C{  private void resolveResultingIndependenciesB(){  SepsetMapDci combinedSepset=combineSepsets(sepsetMaps);  Pc pc=new Pc(new IndTestSepset(combinedSepset,variables));  Graph allInd=pc.search();  System.out.println("PC finished...");  List<Node> overlap=new ArrayList<>(marginalVars.get(0));  System.out.println(marginalVars.get(0).size());  for (int k=1; k < marginalVars.size(); k++) {    System.out.println("Size: " + marginalVars.get(k).size());    Set<Node> marginal=marginalVars.get(k);    List<Node> remove=new ArrayList<>();    for (    Node node : overlap) {      if (!marginal.contains(node)) {        remove.add(node);      }    }    overlap.removeAll(remove);  }  System.out.println("Overlap: " + overlap);  System.out.println((overlap.size() / (double)variables.size()));  List<Graph> marginals=new ArrayList<>();  for (int k=0; k < marginalVars.size(); k++) {    Pc mpc=new Pc(independenceTests.get(k));    marginals.add(mpc.search());    System.out.println("PC finished " + (k + 1) + " of "+ marginalVars.size());  }  List<NodePair> pairs=allNodePairs(variables);  int p=1;  for (  NodePair pair : pairs) {    Set<Node> condSet=new HashSet<>();    condSet.addAll(allInd.getAdjacentNodes(pair.getFirst()));    condSet.addAll(allInd.getAdjacentNodes(pair.getSecond()));    for (    Graph graph : marginals) {      try {        for (        Node node : graph.getAdjacentNodes(graph.getNode(pair.getFirst().getName()))) {          Node newNode=allInd.getNode(node.getName());          condSet.add(newNode);        }      } catch (      Exception e) {      }      try {        for (        Node node : graph.getAdjacentNodes(graph.getNode(pair.getSecond().getName()))) {          Node newNode=allInd.getNode(node.getName());          condSet.add(newNode);        }      } catch (      Exception e) {      }    }    int c=1;    int cs=(int)Math.pow(2,condSet.size());    for (    Set<Node> set : new PowerSet<>(condSet)) {      System.out.println("Resolving inconsistencies... " + c + " of "+ cs+ " ("+ p+ " of "+ pairs.size()+ " pairs)");      c++;      List<Node> z=new ArrayList<>(set);      if (allInd.isDConnectedTo(pair.getFirst(),pair.getSecond(),z)) {        continue;      }      combinedSepset.set(pair.getFirst(),pair.getSecond(),new ArrayList<>(set));    }    p++;  }  sepsetMaps.clear();  for (int k=0; k < marginalVars.size(); k++) {    SepsetMapDci newSepset=new SepsetMapDci();    List<NodePair> pairs2=allNodePairs(new ArrayList<>(marginalVars.get(k)));    for (    NodePair pair : pairs2) {      Node x=pair.getFirst();      Node y=pair.getSecond();      if (combinedSepset.getSet(x,y) == null) {        continue;      }      List<List<Node>> conds=combinedSepset.getSet(x,y);      for (      List<Node> z : conds) {        if (marginalVars.get(k).containsAll(z)) {          newSepset.set(x,y,z);        }      }    }    sepsetMaps.add(newSepset);    List<Node> variables=new ArrayList<>(marginalVars.get(k));    Graph newGraph=new EdgeListGraph(variables);    newGraph.fullyConnect(Endpoint.CIRCLE);    FasDci fas=new FasDci(newGraph,new IndTestSepset(newSepset,variables));    minimalSepsetMaps.add(fas.search());  }}  }
class C{  public void updateButtonActionPerformed(){  nodeType=nodeTypeBox.getSelectedIndex();  log.debug("update performed: was " + curNode.getNodeType() + " request "+ nodeType);  if (curNode.getNodeType() != nodeType) {    curNode.setNodeType(nodeType);  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  public void testPatientDetailsLoaded_UpdatesUi(){  mController.init();  Patient patient=Patient.builder().build();  mFakeCrudEventBus.post(new ItemFetchedEvent<>(patient));  verify(mMockUi).updatePatientDetailsUi(patient);}  }
class C{  @Override public void requestUpdateFromLayout(){  XNetMessage msg=Z21XNetMessage.getTurnoutInfoRequestMessage(mNumber);synchronized (this) {    internalState=STATUSREQUESTSENT;  }  tc.sendXNetMessage(msg,null);}  }
class C{  public void validateStructure(KdTreeNode startNode,double[][] listOfPoints,int level,int totalDimensions,Vector<Integer> indicesToBeLessThan,Vector<Double> lessThanValues,Vector<Integer> indicesToBeGeq,Vector<Double> geqValues){  if (startNode == null) {    return;  }  int indexInValues=0;  for (  Integer index : indicesToBeLessThan) {    assert (listOfPoints[startNode.indexOfThisPoint][index] < lessThanValues.get(indexInValues++));  }  indexInValues=0;  for (  Integer index : indicesToBeGeq) {    assert (listOfPoints[startNode.indexOfThisPoint][index] < geqValues.get(indexInValues++));  }  if (startNode.leftTree != null) {    indicesToBeLessThan.add((level + 1) % totalDimensions);    lessThanValues.add(listOfPoints[startNode.indexOfThisPoint][(level + 1) % totalDimensions]);    validateStructure(startNode.leftTree,listOfPoints,level + 1,totalDimensions,indicesToBeLessThan,lessThanValues,indicesToBeGeq,geqValues);    indicesToBeLessThan.remove(indicesToBeLessThan.lastElement());    lessThanValues.remove(lessThanValues.lastElement());  }  if (startNode.rightTree != null) {    indicesToBeGeq.add((level + 1) % totalDimensions);    geqValues.add(listOfPoints[startNode.indexOfThisPoint][(level + 1) % totalDimensions]);    validateStructure(startNode.rightTree,listOfPoints,level + 1,totalDimensions,indicesToBeLessThan,lessThanValues,indicesToBeGeq,geqValues);    indicesToBeGeq.remove(indicesToBeGeq.lastElement());    geqValues.remove(geqValues.lastElement());  }}  }
class C{  private void checkIvalidPort(int port) throws Exception {  final String failMsg="IGFS endpoint TCP port is out of range";  g1Cfg.setCacheConfiguration(concat(dataCaches(1024),metaCaches(),CacheConfiguration.class));  final String igfsCfgName="igfs-cfg";  final IgfsIpcEndpointConfiguration igfsEndpointCfg=new IgfsIpcEndpointConfiguration();  igfsEndpointCfg.setPort(port);  g1IgfsCfg1.setName(igfsCfgName);  g1IgfsCfg1.setIpcEndpointConfiguration(igfsEndpointCfg);  checkGridStartFails(g1Cfg,failMsg,true);}  }
class C{  public int capacity(){  return items.length;}  }
class C{  public void sendTitles(){  if (listeners == null) {    return;  }  StringBuilder labels=new StringBuilder("PRT");  labels.append("]\\[" + Bundle.getMessage("MenuItemRouteTable") + "}|{Route");  labels.append("]\\[" + "Active" + "}|{2");  labels.append("]\\[" + "Inactive" + "}|{4");  String message=labels.toString();  for (  ControllerInterface listener : listeners) {    listener.sendPacketToDevice(message);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.019 -0500",hash_original_method="0ACA5DB4B67DEB9A055E1E45DC82A265",hash_generated_method="5E007C1EA5F4274C098B880EEF579411") private void socksRequestConnection(InetAddress applicationServerAddress,int applicationServerPort) throws IOException {  socksSendRequest(Socks4Message.COMMAND_CONNECT,applicationServerAddress,applicationServerPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  @Override public Set<Statement> sum(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Set<Statement> left,final Set<Statement> right){  final Set<Statement> tmp=new LinkedHashSet<Statement>(left);  tmp.addAll(right);  return tmp;}  }
class C{  public String discoverTree(Resource root,List<String> queries){  StringBuilder buffer=new StringBuilder();  for (  Resource child : root.getChildren()) {    LinkFormat.serializeTree(child,queries,buffer);  }  if (buffer.length() > 1)   buffer.delete(buffer.length() - 1,buffer.length());  return buffer.toString();}  }
class C{  public int[] batch(Connection conn,String sql,Object[][] params) throws SQLException {  return batch(conn,sql,params,null);}  }
class C{  @Override protected void writeChunk(byte buffer[],int offset,int length) throws IOException {  if (length > 0 && buffer[offset] == '.' && this.startOfLine) {    this.out.write('.');  }  super.writeChunk(buffer,offset,length);}  }
class C{  public String publicationLog(){  if (resource == null) {    return NOT_FOUND;  }  data=dataDir.resourcePublicationLogFile(resource.getShortname());  if (data.exists()) {    mimeType="text/log";    filename=DataDir.PUBLICATION_LOG_FILENAME;  } else {    return NOT_FOUND;  }  return execute();}  }
class C{  public static String classForStyle(HighlightStyle style){switch (style) {case Yellow:    return "highlight-yellow";case Green:  return "highlight-green";case Blue:return "highlight-blue";case Pink:return "highlight-pink";case Underline:return "highlight-underline";case DottetUnderline:return "mediaOverlayStyle1";case TextColor:return "mediaOverlayStyle2";default :return "mediaOverlayStyle0";}}  }
class C{  public static boolean isNumeric(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if (Character.isDigit(str.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static final void frontEndMain(SpecObj spec,String fileName,PrintStream syserr) throws FrontEndException {  try {    frontEndInitialize(spec,syserr);    if (doParsing)     frontEndParse(spec,syserr);    if (doSemanticAnalysis) {      frontEndSemanticAnalysis(spec,syserr,doLevelChecking);    }    ;  } catch (  InitException ie) {    return;  }catch (  ParseException pe) {    return;  }catch (  SemanticException se) {    return;  }catch (  Exception e) {    syserr.println(e.toString());    throw new FrontEndException(e);  }  return;}  }
class C{  @Override public List<EventObject> retrieveHeadlessEvents(){  return m_headlessEvents;}  }
class C{  public void loadSheet(BufferedReader reader) throws IOException, ServiceException {  SpreadsheetFeed feed=service.getFeed(factory.getSpreadsheetsFeedUrl(),SpreadsheetFeed.class);  List spreadsheets=feed.getEntries();  int spreadsheetIndex=getIndexFromUser(reader,spreadsheets,"spreadsheet");  SpreadsheetEntry spreadsheet=(SpreadsheetEntry)spreadsheets.get(spreadsheetIndex);  if (spreadsheet.getWorksheets().size() == 1) {    listFeedUrl=spreadsheet.getWorksheets().get(0).getListFeedUrl();  } else {    List worksheets=spreadsheet.getWorksheets();    int worksheetIndex=getIndexFromUser(reader,worksheets,"worksheet");    WorksheetEntry worksheet=(WorksheetEntry)worksheets.get(worksheetIndex);    listFeedUrl=worksheet.getListFeedUrl();  }  System.out.println("Sheet loaded.");}  }
class C{  public static boolean validateCNPJ(String CNPJ){  CNPJ=removeNonNumeric(CNPJ);  if (CNPJ.equals("00000000000000") || CNPJ.equals("11111111111111") || CNPJ.equals("22222222222222")|| CNPJ.equals("33333333333333")|| CNPJ.equals("44444444444444")|| CNPJ.equals("55555555555555")|| CNPJ.equals("66666666666666")|| CNPJ.equals("77777777777777")|| CNPJ.equals("88888888888888")|| CNPJ.equals("99999999999999")|| (CNPJ.length() != 14))   return (false);  char dig13, dig14;  int sm, i, r, num, peso;  try {    sm=0;    peso=2;    for (i=11; i >= 0; i--) {      num=(int)(CNPJ.charAt(i) - 48);      sm=sm + (num * peso);      peso=peso + 1;      if (peso == 10)       peso=2;    }    r=sm % 11;    if ((r == 0) || (r == 1))     dig13='0'; else     dig13=(char)((11 - r) + 48);    sm=0;    peso=2;    for (i=12; i >= 0; i--) {      num=(int)(CNPJ.charAt(i) - 48);      sm=sm + (num * peso);      peso=peso + 1;      if (peso == 10)       peso=2;    }    r=sm % 11;    if ((r == 0) || (r == 1))     dig14='0'; else     dig14=(char)((11 - r) + 48);    if ((dig13 == CNPJ.charAt(12)) && (dig14 == CNPJ.charAt(13)))     return (true); else     return (false);  } catch (  InputMismatchException erro) {    return (false);  }}  }
class C{  protected void close(){  try {    _socket.shutdownInput();    _input.close();  } catch (  IOException e) {  }  try {    _socket.shutdownOutput();    _output.close();  } catch (  IOException e) {  }  try {    _socket.close();  } catch (  IOException e) {  }}  }
class C{  public Set<String> addContent(BNetwork network){  if (!paused) {    curState.addToState(network);    return update();  } else {    log.info("system is paused, ignoring content " + network);    return Collections.emptySet();  }}  }
class C{  public static void delete(String path){  FilePath.get(path).delete();}  }
class C{  public void testStringLists() throws Exception {  TungstenProperties tp=new TungstenProperties();  tp.setString("commasonly",",");  tp.setString("nocommas","b");  tp.setString("whitespace","a b");  tp.setString("nicelist","a, b,c, ");  tp.setString("nicelist2"," b,  c,d,e");  List<String> commasOnly=tp.getStringList("commasonly");  List<String> noCommas=tp.getStringList("nocommas");  List<String> whiteSpace=tp.getStringList("whitespace");  List<String> niceList=tp.getStringList("nicelist");  List<String> niceList2=tp.getStringList("nicelist2");  Assert.assertEquals("Empty list",0,commasOnly.size());  Assert.assertEquals("1 item",1,noCommas.size());  Assert.assertEquals("2 items",2,whiteSpace.size());  Assert.assertEquals("3 items w/ trailing comma",3,niceList.size());  Assert.assertEquals("3 items w/ trailing command ends w/ c","c",niceList.get(2));  Assert.assertEquals("4 items w/ preceding space",4,niceList2.size());  Assert.assertEquals("4 items w/ preceding space starts w/ b","b",niceList2.get(0));}  }
class C{  public void reverse(){  final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators;  final int size=animators.size();  for (int i=0; i < size; i++) {    final Animator animator=animators.get(i);    if (canReverse(animator)) {      reverse(animator);    } else {      Log.w(LOG_TAG,"AnimatedVectorDrawable can't reverse()");    }  }}  }
class C{  Series(Map.Entry<String,List<XYDataItem>> en){  key=en.getKey().substring(statNamePrefix.length());  stats=en.getValue();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private boolean adjustBaseModelWeights(ExampleSet exampleSet,Vector<BayBoostBaseModelInfo> modelInfo) throws OperatorException {  for (int j=0; j < modelInfo.size(); j++) {    BayBoostBaseModelInfo consideredModelInfo=modelInfo.get(j);    Model consideredModel=consideredModelInfo.getModel();    ContingencyMatrix cm=consideredModelInfo.getContingencyMatrix();    BayBoostStream.createOrReplacePredictedLabelFor(exampleSet,consideredModel);    exampleSet=consideredModel.apply(exampleSet);    if (exampleSet.getAttributes().getPredictedLabel().isNominal() == false) {      throw new UserError(this,101,new Object[]{exampleSet.getAttributes().getLabel(),"BayBoostStream base learners"});    }    WeightedPerformanceMeasures wp=new WeightedPerformanceMeasures(exampleSet);    ContingencyMatrix cmNew=wp.getContingencyMatrix();    if (isModelUseful(cm) == false) {      modelInfo.remove(j);      j--;      log("Discard base model because of low advantage.");    } else {      consideredModelInfo=new BayBoostBaseModelInfo(consideredModel,cmNew);      modelInfo.set(j,consideredModelInfo);      boolean stillUncoveredExamples=WeightedPerformanceMeasures.reweightExamples(exampleSet,cmNew,false) > 0;      if (stillUncoveredExamples == false) {        return false;      }    }  }  return true;}  }
class C{  private PostgreSQLHelpers(){}  }
class C{  private void flushMemory(){  m_prevIntervalTimelineMap.clear();}  }
class C{  public void pOlnI(Object o) throws IOException {  pO(o.toString());  pln();  pI();}  }
class C{  public void addXValue(String xVal){  mXValAverageLength=(mXValAverageLength + xVal.length()) / 2f;  mXVals.add(xVal);}  }
class C{  private void extractNalUnitHeader(int position,Buffer input){  if (mNalUnitHeader == null) {    mNalUnitHeader=NalUnitHeader.extract(position,(byte[])input.getData());  } else {    NalUnitHeader.extract(position,(byte[])input.getData(),mNalUnitHeader);  }}  }
class C{  private boolean isIvrVsan(MDSDialog dialog,Integer vsanId){  boolean isIvrVsan=false;  List<IvrVsanConfiguration> ivrVsansList=dialog.showIvrVsanTopology();  for (  IvrVsanConfiguration ivrVsans : ivrVsansList) {    if (ivrVsans.isIvrVsan(vsanId)) {      isIvrVsan=true;      break;    }  }  return isIvrVsan;}  }
class C{  public TranscoderInput(){}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HomeItemDB\"";  db.execSQL(sql);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public static GenericSqliteHelper openCopy(String pathSystem,String file){  return openCopy(new File(pathSystem,file).getAbsolutePath());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void clearData(){  int seriesCount=dataset.getSeriesCount();  for (int i=0; seriesCount > i; ++i) {    dataset.getSeries(i).clear();  }}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  public DoubleMatrix(int m,int n){  mValues=new double[m][n];  mNumCols=n;}  }
class C{  public synchronized boolean removeTaskFromWaitQ(ParallelTask taskTobeRemoved){  boolean removed=false;  for (  ParallelTask task : waitQ) {    if (task.getTaskId() == taskTobeRemoved.getTaskId()) {      task.setState(ParallelTaskState.COMPLETED_WITH_ERROR);      task.getTaskErrorMetas().add(new TaskErrorMeta(TaskErrorType.USER_CANCELED,"NA"));      logger.info("task {} removed from wait q. This task has been marked as USER CANCELED.",task.getTaskId());      removed=true;    }  }  return removed;}  }
class C{  public MorfologikFilterFactory(Map<String,String> args){  super(args);  final String DICTIONARY_RESOURCE_ATTRIBUTE="dictionary-resource";  String dictionaryResource=get(args,DICTIONARY_RESOURCE_ATTRIBUTE);  if (dictionaryResource != null && !dictionaryResource.isEmpty()) {    throw new IllegalArgumentException("The " + DICTIONARY_RESOURCE_ATTRIBUTE + " attribute is no "+ "longer supported. Use the '"+ DICTIONARY_ATTRIBUTE+ "' attribute instead (see LUCENE-6833).");  }  resourceName=get(args,DICTIONARY_ATTRIBUTE);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public Boolean isAvailable(){  return available;}  }
class C{  private void doReverseKNNQuery(int k,DBIDRef q,MkTabEntry node_entry,MkTabTreeNode<O> node,ModifiableDoubleDBIDList result){  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      MkTabEntry entry=node.getEntry(i);      double distance=distance(entry.getRoutingObjectID(),q);      if (distance <= entry.getKnnDistance(k)) {        result.add(distance,entry.getRoutingObjectID());      }    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      MkTabEntry entry=node.getEntry(i);      double node_knnDist=node_entry != null ? node_entry.getKnnDistance(k) : Double.POSITIVE_INFINITY;      double distance=distance(entry.getRoutingObjectID(),q);      double minDist=(entry.getCoveringRadius() > distance) ? 0. : distance - entry.getCoveringRadius();      if (minDist <= node_knnDist) {        MkTabTreeNode<O> childNode=getNode(entry);        doReverseKNNQuery(k,q,entry,childNode,result);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.393 -0500",hash_original_method="BE927C5E0164A4926B1CC9E55E38B569",hash_generated_method="28D3E7ACDA13B58906E9D50827B96032") public static void register(){  DdmServer.registerHandler(CHUNK_MPRS,mInstance);  DdmServer.registerHandler(CHUNK_MPRE,mInstance);  DdmServer.registerHandler(CHUNK_MPSS,mInstance);  DdmServer.registerHandler(CHUNK_MPSE,mInstance);  DdmServer.registerHandler(CHUNK_MPRQ,mInstance);}  }
class C{  public void evictionListener(IgniteBiInClosure<K,V> lsnr){  this.lsnr=lsnr;}  }
class C{  public List<StorageVirtualMachineInfo> listSVM(){  if (log.isDebugEnabled()) {    log.debug("Listing svms");  }  StorageVirtualMachine svm=new StorageVirtualMachine(server.getNaServer(),null);  return svm.listSVMs(true);}  }
class C{  public static <T extends Comparable<? super T>>void timSort(T[] a){  timSort(a,0,a.length);}  }
class C{  private void useANTSeonsor(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_settings),true);  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_sensor));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_sensor_type));  EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.settings_sensor_type_ant));  EndToEndTestUtils.SOLO.goBack();  EndToEndTestUtils.SOLO.goBack();}  }
class C{  private boolean ruleR8(Node a,Node c,Graph graph){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (!graph.isAdjacentTo(a,b))     continue;    if (!graph.isAdjacentTo(b,c))     continue;    if (!(graph.getEndpoint(b,a) == Endpoint.TAIL))     continue;    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL))     continue;    if (graph.getEndpoint(a,b) == Endpoint.TAIL)     continue;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R8",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    this.orientSimilarPairs(graph,this.getKnowledge(),c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public Map<String,Object> retrieveInternal(boolean loadedOnly){  Map<String,Object> model=new HashMap<String,Object>();  FloodlightModuleLoader floodlightModuleLoader=(FloodlightModuleLoader)getContext().getAttributes().get(FloodlightModuleLoader.class.getCanonicalName());  Set<String> loadedModules=new HashSet<String>();  for (  Object val : getContext().getAttributes().values()) {    if ((val instanceof IFloodlightModule) || (val instanceof IFloodlightService)) {      String serviceImpl=val.getClass().getCanonicalName();      loadedModules.add(serviceImpl);    }  }  for (  String moduleName : floodlightModuleLoader.getModuleNameMap().keySet()) {    Map<String,Object> moduleInfo=new HashMap<String,Object>();    IFloodlightModule module=floodlightModuleLoader.getModuleNameMap().get(moduleName);    Collection<Class<? extends IFloodlightService>> deps=module.getModuleDependencies();    if (deps == null)     deps=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> depsMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : deps) {      Object serviceImpl=getContext().getAttributes().get(service.getCanonicalName());      if (serviceImpl != null)       depsMap.put(service.getCanonicalName(),serviceImpl.getClass().getCanonicalName()); else       depsMap.put(service.getCanonicalName(),"<unresolved>");    }    moduleInfo.put("depends",depsMap);    Collection<Class<? extends IFloodlightService>> provides=module.getModuleServices();    if (provides == null)     provides=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> providesMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : provides) {      providesMap.put(service.getCanonicalName(),module.getServiceImpls().get(service).getClass().getCanonicalName());    }    moduleInfo.put("provides",providesMap);    moduleInfo.put("loaded",false);    if (loadedModules.contains(module.getClass().getCanonicalName())) {      moduleInfo.put("loaded",true);    } else {      for (      Class<? extends IFloodlightService> service : provides) {        String modString=module.getServiceImpls().get(service).getClass().getCanonicalName();        if (loadedModules.contains(modString))         moduleInfo.put("loaded",true);      }    }    if ((Boolean)moduleInfo.get("loaded") || !loadedOnly)     model.put(moduleName,moduleInfo);  }  return model;}  }
class C{  public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector namesVec,Vector argsVec) throws BSFException {  if (namesVec.size() != argsVec.size())   throw new BSFException("number of params/names mismatch");  if (!(funcBody instanceof String))   throw new BSFException("apply: functino body must be a string");  String[] names=new String[namesVec.size()];  namesVec.copyInto(names);  Object[] args=new Object[argsVec.size()];  argsVec.copyInto(args);  try {    if (!installedApplyMethod) {      interpreter.eval(bsfApplyMethod);      installedApplyMethod=true;    }    bsh.This global=(bsh.This)interpreter.get("global");    Object value=global.invokeMethod("_bsfApply",new Object[]{names,args,(String)funcBody});    return Primitive.unwrap(value);  } catch (  InterpreterError e) {    throw new BSFException("BeanShell interpreter internal error: " + e + sourceInfo(source,lineNo,columnNo));  }catch (  TargetError e2) {    throw new BSFException("The application script threw an exception: " + e2.getTarget() + sourceInfo(source,lineNo,columnNo));  }catch (  EvalError e3) {    throw new BSFException("BeanShell script error: " + e3 + sourceInfo(source,lineNo,columnNo));  }}  }
class C{  @NotNull @ObjectiveCName("createGroupWithTitle:withAvatar:withUids:") public Promise<Integer> createGroup(String title,String avatarDescriptor,int[] uids){  return modules.getGroupsModule().createGroup(title,avatarDescriptor,uids);}  }
class C{  public void addAlternateName(java.lang.String param){  if (localAlternateName == null) {    localAlternateName=new java.lang.String[]{};  }  localAlternateNameTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localAlternateName);  list.add(param);  this.localAlternateName=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void endOverlay(){  view.getComponent().requestFocus();  if (textField != null) {    textField.setVisible(false);    view.getComponent().remove(textField);    Rectangle bounds=textField.getBounds();    view.getComponent().repaint(bounds.x,bounds.y,bounds.width,bounds.height);  }  if (editedFigure != null) {    editedFigure.removeFigureListener(figureHandler);    editedFigure=null;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.646 -0400",hash_original_method="CC6A2D61A01777F134B61F210B4582B4",hash_generated_method="DC4F53437482264D89559E059DC0E69A") @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  public static TypeParameter[] copyTypeParams(TypeParameter[] params,ASTNode source){  if (params == null)   return null;  TypeParameter[] out=new TypeParameter[params.length];  int idx=0;  for (  TypeParameter param : params) {    TypeParameter o=new TypeParameter();    setGeneratedBy(o,source);    o.annotations=param.annotations;    o.bits=param.bits;    o.modifiers=param.modifiers;    o.name=param.name;    o.type=copyType(param.type,source);    o.sourceStart=param.sourceStart;    o.sourceEnd=param.sourceEnd;    o.declarationEnd=param.declarationEnd;    o.declarationSourceStart=param.declarationSourceStart;    o.declarationSourceEnd=param.declarationSourceEnd;    if (param.bounds != null) {      TypeReference[] b=new TypeReference[param.bounds.length];      int idx2=0;      for (      TypeReference ref : param.bounds)       b[idx2++]=copyType(ref,source);      o.bounds=b;    }    out[idx++]=o;  }  return out;}  }
class C{  public DefaultInlineTagDefinition(String title){  setTitles(title);}  }
class C{  private IConstant<?>[] _accept(final IBindingSet bset){  final IConstant<?>[] r=new IConstant<?>[vars.length];  for (int i=0; i < vars.length; i++) {    r[i]=bset.get(vars[i]);  }  final Solution s=new Solution(r);  if (log.isTraceEnabled())   log.trace("considering: " + Arrays.toString(r));  final boolean distinct=map.putIfAbsent(s,s) == null;  if (distinct && log.isDebugEnabled())   log.debug("accepted: " + Arrays.toString(r));  return distinct ? r : null;}  }
class C{  @Override public Sprite createRegion(final int x,final int y,int width,int height,final Object ref){  final int iwidth=getWidth();  final int iheight=getHeight();  if ((x >= iwidth) || (y >= iheight)) {    return new EmptySprite(width,height,ref);  }  width=Math.min(width,iwidth);  height=Math.min(height,iheight);  final GraphicsConfiguration gc=getGC();  final Image imageTemp=gc.createCompatibleImage(width,height,TransparencyMode.TRANSPARENCY);  draw(imageTemp.getGraphics(),0,0,x,y,width,height);  return new ImageSprite(imageTemp,ref);}  }
class C{  @Override public String resolveVideoUrl(@Nullable final Video video,Step step){  if (video == null)   return null;  String localPath=databaseFacade.getPathToVideoIfExist(video);  if (localPath != null && checkExistingOnDisk(localPath,step)) {    return localPath;  } else {    List<VideoUrl> urlList=video.getUrls();    if (urlList == null || urlList.size() == 0)     return null;    return resolveFromWeb(urlList);  }}  }
class C{  protected ParsedURLData constructParsedURLData(){  return new ParsedURLData();}  }
class C{  public int hashCode(){  return Arrays.hashCode(atr);}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInIdleState);  assertTrue(!stateErrors.errorInIdleStateAfterReset);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public final void enableChildRoundedCorners(boolean enable){  mRoundedCornersEnabled=enable;}  }
class C{  public byte[] encryptRaw(byte[] baseKey,int usage,byte[] seqNum,byte[] plaintext,int start,int len) throws GeneralSecurityException, KrbCryptoException {  if (!KeyUsage.isValid(usage)) {    throw new GeneralSecurityException("Invalid key usage number: " + usage);  }  if (debug) {    System.out.println("\nARCFOUR: encryptRaw with usage = " + usage);  }  byte[] klocal=new byte[baseKey.length];  for (int i=0; i <= 15; i++) {    klocal[i]=(byte)(baseKey[i] ^ 0xF0);  }  byte[] salt=new byte[4];  byte[] kcrypt=getHmac(klocal,salt);  kcrypt=getHmac(kcrypt,seqNum);  Cipher cipher=Cipher.getInstance("ARCFOUR");  SecretKeySpec secretKey=new SecretKeySpec(kcrypt,"ARCFOUR");  cipher.init(Cipher.ENCRYPT_MODE,secretKey);  byte[] output=cipher.doFinal(plaintext,start,len);  return output;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numUpslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numUpslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 > z) {              numUpslopeNeighbours++;            }          }          output.setValue(row,col,numUpslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isGoalState(Object state){  return goalTest.isGoalState(state);}  }
class C{  public ColorMatrix(float[] src){  System.arraycopy(src,0,mArray,0,20);}  }
class C{  public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {  try {    Method method=clazz.getMethod(methodName,new Class[0]);    Object result=method.invoke(null,new Object[0]);    return result;  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  public boolean isAutoUpdateTrl(String TableName){  if (super.isMultiLingualDocument())   return false;  if (TableName == null)   return false;  if (TableName.startsWith("AD") && getAD_Client_ID() == 0)   return false;  return true;}  }
class C{  public static void typeface(View view){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  typeface(view,sDefaultTypefaceCollection);}  }
class C{  public void removeBlock(int x,int y,int z){  BlockPosition blockPos=new BlockPosition(x,y,z);  graph.remove(blockPos);  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {    BlockPosition newBlock=blockPos.getPositionAtOffset(direction.offsetX,direction.offsetY,direction.offsetZ);    if (graph.contains(newBlock) && !graph.doesPathExist(newBlock,blobHandler.getRootPosition()))     graph.removeAllNodesConnectedTo(newBlock);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void shareChannel(Context context,Channel channel){  if (TextUtils.isEmpty(channel.getArtworkUrl())) {    shareChannel(context,channel,null);  } else {    ImageLoadHelper.saveImage(context,channel.getArtworkUrl(),null);  }}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {}  }
class C{  public SkypeBuilder withExceptionHandler(ErrorHandler errorHandler){  this.errorHandlers.add(errorHandler);  return this;}  }
class C{  protected void processSuccess(Response response,Request request,TransactionID transactionID){  if (!completedResolvingCandidate)   createCandidates(response);}  }
class C{  public static boolean areAllTagsEnabled(){  return enableAllTags;}  }
class C{  public static boolean canHaveChildren(Node parentNode){  if (parentNode == null) {    return false;  }switch (parentNode.getNodeType()) {case Node.DOCUMENT_NODE:case Node.TEXT_NODE:case Node.COMMENT_NODE:case Node.CDATA_SECTION_NODE:case Node.PROCESSING_INSTRUCTION_NODE:    return false;default :  return true;}}  }
class C{  public Builder addPart(RequestBody body){  return addPart(Part.create(body));}  }
class C{  @Override protected void finalize() throws Throwable {  mListener=null;  mURL=null;  mData=null;  super.finalize();}  }
class C{  public final void shutdown(ShutdownModeAmp mode,Result<Boolean> result){  _strategy.shutdown(this,mode,result);}  }
class C{  public static ScaleAndIndex median(){  return scale(2).index(1);}  }
class C{  public Duration minus(ReadableDuration amount){  if (amount == null) {    return this;  }  return withDurationAdded(amount.getMillis(),-1);}  }
class C{  public static boolean checkForSupportedThreadDump(String logLine){  return (logLine.trim().indexOf("Full thread dump") >= 0);}  }
class C{  public ShiftAddXorSignedStringMap(final Iterator<? extends CharSequence> iterator,final Object2LongFunction<? extends CharSequence> map){  this(iterator,map,32);}  }
class C{  public List<String> exclude(){  return exclude;}  }
class C{  public static boolean areMappingsDifferent(final Workspace currentWorkspace,final Workspace newWorkspace){  ArgumentHelper.checkNotNull(currentWorkspace,"currentWorkspace");  ArgumentHelper.checkNotNull(newWorkspace,"newWorkspace");  return areMappingsDifferent(currentWorkspace.getMappings(),newWorkspace.getMappings());}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms);  }}  }
class C{  public ObjectMapperProvider(){  mapper=new ObjectMapper();  SimpleModule module=new SimpleModule(getClass().getName(),new Version(1,0,0,null));  module.addSerializer(PrincipalUser.class,new PrincipalUserSerializer());  mapper.registerModule(module);}  }
class C{  public void testIsMalformed(){  assertFalse(CoderResult.UNDERFLOW.isMalformed());  assertFalse(CoderResult.OVERFLOW.isMalformed());  assertTrue(CoderResult.malformedForLength(1).isMalformed());  assertFalse(CoderResult.unmappableForLength(1).isMalformed());}  }
class C{  private void checkNumnberOfEnginesNeeded() throws BuildFailedException {  if (_reqNumEngines == 0 || !_train.isBuildConsistEnabled() || Setup.getHorsePowerPerTon() == 0) {    return;  }  addLine(_buildReport,ONE,BLANK_LINE);  addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildDetermineNeeds"),new Object[]{Setup.getHorsePowerPerTon()}));  Route route=_train.getRoute();  int hpAvailable=0;  int extraHpNeeded=0;  RouteLocation rlNeedHp=null;  RouteLocation rlStart=_train.getTrainDepartsRouteLocation();  RouteLocation rlEnd=_train.getTrainTerminatesRouteLocation();  if (route != null) {    boolean helper=false;    for (    RouteLocation rl : route.getLocationsBySequenceList()) {      if ((_train.getSecondLegOptions() == Train.HELPER_ENGINES && rl == _train.getSecondLegStartLocation()) || (_train.getThirdLegOptions() == Train.HELPER_ENGINES && rl == _train.getThirdLegStartLocation())) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("AddHelpersAt"),new Object[]{rl.getName()}));        helper=true;      }      if ((_train.getSecondLegOptions() == Train.HELPER_ENGINES && rl == _train.getSecondLegEndLocation()) || (_train.getThirdLegOptions() == Train.HELPER_ENGINES && rl == _train.getThirdLegEndLocation())) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("RemoveHelpersAt"),new Object[]{rl.getName()}));        helper=false;      }      if (helper) {        continue;      }      if (((_train.getSecondLegOptions() & Train.CHANGE_ENGINES) == Train.CHANGE_ENGINES && rl == _train.getSecondLegStartLocation()) || ((_train.getThirdLegOptions() & Train.CHANGE_ENGINES) == Train.CHANGE_ENGINES && rl == _train.getThirdLegStartLocation())) {        log.debug("Loco change at ({})",rl.getName());        addLocos(hpAvailable,extraHpNeeded,rlNeedHp,rlStart,rl);        addLine(_buildReport,THREE,BLANK_LINE);        rlStart=rl;        rlNeedHp=null;        extraHpNeeded=0;      }      int weight=rl.getTrainWeight();      if (weight > 0) {        double hptMinimum=Setup.getHorsePowerPerTon();        double hptGrade=(36 * rl.getGrade() / 12);        int hp=_train.getTrainHorsePower(rl);        int hpt=hp / weight;        if (hptGrade > hptMinimum) {          hptMinimum=hptGrade;        }        if (hptMinimum > hpt) {          int addHp=(int)(hptMinimum * weight - hp);          if (addHp > extraHpNeeded) {            hpAvailable=hp;            extraHpNeeded=addHp;            rlNeedHp=rl;          }          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildAddLocosStatus"),new Object[]{weight,hp,rl.getGrade(),hpt,hptMinimum,rl.getName(),rl.getId()}));          addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildTrainRequiresAddHp"),new Object[]{addHp,rl.getName(),hptMinimum}));          addLine(_buildReport,SEVEN,BLANK_LINE);        }      }    }  }  addLocos(hpAvailable,extraHpNeeded,rlNeedHp,rlStart,rlEnd);  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildDoneAssingEnginesTrain"),new Object[]{_train.getName()}));  addLine(_buildReport,THREE,BLANK_LINE);}  }
class C{  private BinaryField binaryField(BinaryObject obj){  BinaryField field0=field;  if (field0 == null && !fieldTaken) {    BinaryType type=obj instanceof BinaryObjectEx ? ((BinaryObjectEx)obj).rawType() : obj.type();    if (type != null) {      field0=type.field(propName);      assert field0 != null;      field=field0;    }    fieldTaken=true;  }  return field0;}  }
class C{  public void java_lang_System_setErr0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysErr=helper.staticField("java.lang.System","err");  helper.assign(sysErr,params[0]);}  }
class C{  public static void TaToConll(List<TextAnnotation> tas,String outpath) throws IOException {  for (  TextAnnotation ta : tas) {    List<String> talines=new ArrayList<>();    View sentview=ta.getView(ViewNames.SENTENCE);    View nerview=ta.getView(ViewNames.NER_CONLL);    for (int i=0; i < ta.getTokens().length; i++) {      String label="O";      List<Constituent> constituents=nerview.getConstituentsCoveringToken(i);      if (constituents.size() > 0) {        Constituent c=constituents.get(0);        if (c.getStartSpan() == i) {          label="B-" + c.getLabel();        } else {          label="I-" + c.getLabel();        }        if (constituents.size() > 1) {          logger.error("More than one label -- selecting the first.");          logger.error("Constituents: " + constituents);        }      }      talines.add(conllline(label,i,ta.getToken(i)));      List<Constituent> sents=sentview.getConstituentsCoveringToken(i);      if (sents.size() > 0) {        Constituent sent=sents.get(0);        int end=sent.getEndSpan();        if (i == end - 1) {          talines.add("");        }        if (sents.size() > 1) {          logger.error("More than one sentence constituent for this token -- selecting the first.");          logger.error("Sentences: " + sents);        }      }    }    FileUtils.writeLines(Paths.get(outpath,ta.getId()).toFile(),talines);  }}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public TagLibTag(TagLib tagLib){  this.tagLib=tagLib;}  }
class C{  public ToolButton(SVGImage image){  initWidget(uiBinder.createAndBindUi(this));  iconPanel.add(image);}  }
class C{  private void downloadFile(String downloadKey){  mCurrentDownload=mPendingDownloads.get(downloadKey);  if (mCurrentDownload != null) {    if (AccountUtils.exists(mCurrentDownload.getAccount(),getApplicationContext())) {      Log_OC.d(TAG,"Account " + mCurrentDownload.getAccount().name + " exists");      notifyDownloadStart(mCurrentDownload);      RemoteOperationResult downloadResult=null;      try {        if (mCurrentAccount == null || !mCurrentAccount.equals(mCurrentDownload.getAccount())) {          mCurrentAccount=mCurrentDownload.getAccount();          mStorageManager=new FileDataStorageManager(mCurrentAccount,getContentResolver());        }        OwnCloudAccount ocAccount=new OwnCloudAccount(mCurrentAccount,this);        mDownloadClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,this);        downloadResult=mCurrentDownload.execute(mDownloadClient);        if (downloadResult.isSuccess()) {          saveDownloadedFile();        }      } catch (      AccountsException|IOException e) {        Log_OC.e(TAG,"Error while trying to get authorization for " + mCurrentAccount.name,e);        downloadResult=new RemoteOperationResult(e);      } finally {        Pair<DownloadFileOperation,String> removeResult=mPendingDownloads.removePayload(mCurrentAccount,mCurrentDownload.getRemotePath());        notifyDownloadResult(mCurrentDownload,downloadResult);        sendBroadcastDownloadFinished(mCurrentDownload,downloadResult,removeResult.second);      }    } else {      Log_OC.d(TAG,"Account " + mCurrentDownload.getAccount().toString() + " doesn't exist");      cancelDownloadsForAccount(mCurrentDownload.getAccount());    }  }}  }
class C{  private static void deleteHours(ContentResolver cr,String restaurantId){  String sel=OpenHours.RESTAURANT_ID + " = ?";  String[] args={restaurantId};  cr.delete(OpenHours.CONTENT_URI,sel,args);  cr.delete(OpenDays.CONTENT_URI,sel,args);}  }
class C{  public void testGetFilterMappingsWithFilter() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>f1class</filter-class>"+ "  </filter>"+ "  <filter-mapping>"+ "    <filter-name>f1</filter-name>"+ "    <url-pattern>/f1mapping</url-pattern>"+ "  </filter-mapping>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> filterMappings=WebXmlUtils.getFilterMappings(webXml,"f1");  assertEquals(1,filterMappings.size());  assertEquals("/f1mapping",filterMappings.get(0));}  }
class C{  @SuppressLint("InlinedApi") private void createCameraSource(boolean autoFocus,boolean useFlash){  Context context=getApplicationContext();  TextRecognizer textRecognizer=new TextRecognizer.Builder(context).build();  textRecognizer.setProcessor(new OcrDetectorProcessor(mGraphicOverlay));  if (!textRecognizer.isOperational()) {    Log.w(TAG,"Detector dependencies are not yet available.");    IntentFilter lowstorageFilter=new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);    boolean hasLowStorage=registerReceiver(null,lowstorageFilter) != null;    if (hasLowStorage) {      Toast.makeText(this,R.string.low_storage_error,Toast.LENGTH_LONG).show();      Log.w(TAG,getString(R.string.low_storage_error));    }  }  mCameraSource=new CameraSource.Builder(getApplicationContext(),textRecognizer).setFacing(CameraSource.CAMERA_FACING_BACK).setRequestedPreviewSize(1280,1024).setRequestedFps(2.0f).setFlashMode(useFlash ? Camera.Parameters.FLASH_MODE_TORCH : null).setFocusMode(autoFocus ? Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE : null).build();}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  protected boolean isExtremeValue(Instance inst,int index){  boolean result;  double value;  value=inst.value(m_AttributeIndices[index]);  result=(value > m_UpperExtremeValue[index]) || (value < m_LowerExtremeValue[index]);  return result;}  }
class C{  public static long decryptECB(final byte[] concatenatedHashValue,final String base64EncryptedTurnOverValue,final SecretKey symmetricKey) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);  byteBufferIV.put(concatenatedHashValue);  final byte[] IV=byteBufferIV.array();  final byte[] encryptedTurnOverValue=CashBoxUtils.base64Decode(base64EncryptedTurnOverValue,false);  final Cipher cipher=Cipher.getInstance("AES/ECB/NoPadding","BC");  cipher.init(Cipher.ENCRYPT_MODE,symmetricKey);  final byte[] intermediateResult=cipher.doFinal(IV);  final byte[] result=new byte[encryptedTurnOverValue.length];  for (int i=0; i < encryptedTurnOverValue.length; i++) {    result[i]=(byte)((encryptedTurnOverValue[i]) ^ (intermediateResult[i]));  }  return getLong(result);}  }
class C{  public static long convertDuration(final String fromUnit,final String toUnit,long value){  TimeUnit fromTimeUnit=toTimeUnit(fromUnit);  TimeUnit toTimeUnit=toTimeUnit(toUnit);  if (fromTimeUnit != null && toTimeUnit != null) {    return toTimeUnit.convert(value,fromTimeUnit);  } else {    throw new DSSException("Cannot convert duration with args (" + fromUnit + ", "+ toUnit+ ", "+ value+ ")");  }}  }
class C{  public void testParametricTypes(){  TypeFactory tf=TypeFactory.defaultInstance();  JavaType t=tf.constructParametricType(ArrayList.class,String.class);  assertEquals(CollectionType.class,t.getClass());  JavaType strC=tf.constructType(String.class);  assertEquals(1,t.containedTypeCount());  assertEquals(strC,t.containedType(0));  assertNull(t.containedType(1));  JavaType t2=tf.constructParametricType(Map.class,strC,t);  assertEquals(MapType.class,t2.getClass());  assertEquals(2,t2.containedTypeCount());  assertEquals(strC,t2.containedType(0));  assertEquals(t,t2.containedType(1));  assertNull(t2.containedType(2));  JavaType custom=tf.constructParametricType(SingleArgGeneric.class,String.class);  assertEquals(SimpleType.class,custom.getClass());  assertEquals(1,custom.containedTypeCount());  assertEquals(strC,custom.containedType(0));  assertNull(custom.containedType(1));  assertEquals("X",custom.containedTypeName(0));  try {    tf.constructParametricType(Map.class,strC);  } catch (  IllegalArgumentException e) {    verifyException(e,"Need exactly 2 parameter types for Map types");  }  try {    tf.constructParametricType(SingleArgGeneric.class,strC,strC);  } catch (  IllegalArgumentException e) {    verifyException(e,"expected 1 parameters, was given 2");  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public XBMCSkinParser(File skinDir,File outputFile) throws Exception {  this.skinDir=skinDir;  focusableControlTypes.add("group");  if (outputFile == null)   FAST=true;  long startTime=System.currentTimeMillis();  windowIDMap.put("0","Home".toLowerCase());  windowIDMap.put("1","MyPrograms".toLowerCase());  windowAliasMap.put("programs","myprograms");  windowIDMap.put("2","MyPics".toLowerCase());  mediaWinIDs.add(new Integer(2));  windowAliasMap.put("pictures","mypics");  windowAliasMap.put("mypictures","mypics");  windowIDMap.put("3","FileManager".toLowerCase());  windowAliasMap.put("files","filemanager");  windowIDMap.put("4","Settings".toLowerCase());  windowIDMap.put("5","mymusicnav");  mediaWinIDs.add(new Integer(5));  windowAliasMap.put("music","mymusicnav");  windowAliasMap.put("musicnav","mymusicnav");  windowIDMap.put("6","myvideo");  mediaWinIDs.add(new Integer(6));  windowAliasMap.put("video","myvideo");  windowAliasMap.put("videos","myvideo");  windowIDMap.put("7","SettingsSystemInfo".toLowerCase());  windowAliasMap.put("systeminfo","settingssysteminfo");  windowIDMap.put("10","SettingsUICalibration".toLowerCase());  windowAliasMap.put("guicalibration","settingsuicalibration");  windowIDMap.put("11","SettingsScreenCalibration".toLowerCase());  windowAliasMap.put("screencalibration","settingsscreencalibration");  windowIDMap.put("12","settingscategory");  windowIDMap.put("13","programssettings");  windowIDMap.put("14","weathersettings");  windowIDMap.put("15","musicsettings");  windowIDMap.put("16","systemsettings");  windowIDMap.put("17","videossettings");  windowIDMap.put("18","networksettings");  windowIDMap.put("19","appearancesettings");  windowIDMap.put("20","MyScripts".toLowerCase());  windowAliasMap.put("scripts","myscripts");  windowIDMap.put("25","MyVideoNav".toLowerCase());  mediaWinIDs.add(new Integer(25));  windowAliasMap.put("videolibrary","myvideonav");  windowAliasMap.put("myvideolibrary","myvideonav");  windowIDMap.put("24","MyVideo".toLowerCase());  mediaWinIDs.add(new Integer(24));  windowAliasMap.put("videofiles","myvideo");  windowAliasMap.put("myvideofiles","myvideo");  windowIDMap.put("28","MyVideoPlaylist".toLowerCase());  mediaWinIDs.add(new Integer(28));  windowAliasMap.put("videoplaylist","myvideoplaylist");  windowIDMap.put("29","LoginScreen".toLowerCase());  windowAliasMap.put("logonscreen","loginscreen");  windowIDMap.put("34","SettingsProfile".toLowerCase());  windowAliasMap.put("profiles","settingsprofile");  windowIDMap.put("35","MyGameSaves".toLowerCase());  windowAliasMap.put("gamesaves","mygamesaves");  dialogIDMap.put("100","DialogYesNo".toLowerCase());  windowAliasMap.put("yesnodialog","dialogyesno");  dialogIDMap.put("101","DialogProgress".toLowerCase());  windowAliasMap.put("progressdialog","dialogprogress");  dialogIDMap.put("102","DialogInvite".toLowerCase());  windowAliasMap.put("invitedialog","dialoginvite");  dialogIDMap.put("103","DialogKeyboard".toLowerCase());  windowAliasMap.put("virtualkeyboard","dialogkeyboard");  dialogIDMap.put("104","DialogVolumeBar".toLowerCase());  windowAliasMap.put("volumebar","dialogvolumebar");  dialogIDMap.put("105","DialogSubMenu".toLowerCase());  windowAliasMap.put("submenu","dialogsubmenu");  dialogIDMap.put("106","DialogContextMenu".toLowerCase());  windowAliasMap.put("contextmenu","dialogcontextmenu");  dialogIDMap.put("107","DialogKaiToast".toLowerCase());  windowAliasMap.put("infodialog","dialogkaitoast");  dialogIDMap.put("108","DialogHost".toLowerCase());  windowAliasMap.put("hostdialog","dialoghost");  dialogIDMap.put("109","DialogNumeric".toLowerCase());  windowAliasMap.put("numericinput","dialognumeric");  dialogIDMap.put("110","DialogGamepad".toLowerCase());  windowAliasMap.put("gamepadinput","dialoggamepad");  dialogIDMap.put("111","DialogButtonMenu".toLowerCase());  windowAliasMap.put("shutdownmenu","dialogbuttonmenu");  dialogIDMap.put("112","DialogMusicScan".toLowerCase());  windowAliasMap.put("scandialog","dialogmusicscan");  dialogIDMap.put("113","DialogMuteBug".toLowerCase());  windowAliasMap.put("mutebug","dialogmutebug");  dialogIDMap.put("114","PlayerControls".toLowerCase());  dialogIDMap.put("115","DialogSeekBar".toLowerCase());  windowAliasMap.put("seekbar","dialogseekbar");  dialogIDMap.put("120","MusicOSD".toLowerCase());  dialogIDMap.put("121","MusicOSDVisSettings".toLowerCase());  windowAliasMap.put("visualisationsettings","musicosdvissettings");  dialogIDMap.put("122","VisualisationPresetList".toLowerCase());  windowAliasMap.put("visualizationpresetlist","visualisationpresetlist");  dialogIDMap.put("123","VideoOSDSettings".toLowerCase());  windowAliasMap.put("osd video settings","videoosdsettings");  dialogIDMap.put("124","AudioOSDSettings".toLowerCase());  windowAliasMap.put("audio osd settings","audioosdsettings");  dialogIDMap.put("125","VideoOSDBookmarks".toLowerCase());  windowAliasMap.put("video bookmarks","videoosdbookmarks");  dialogIDMap.put("126","FileBrowser".toLowerCase());  windowAliasMap.put("file browser","filebrowser");  dialogIDMap.put("127","TrainerSettings".toLowerCase());  dialogIDMap.put("128","DialogNetworkSetup".toLowerCase());  windowAliasMap.put("networksetup","dialognetworksetup");  dialogIDMap.put("129","DialogMediaSource".toLowerCase());  windowAliasMap.put("mediasource","dialogmediasource");  windowIDMap.put("130","ProfileSettings".toLowerCase());  windowIDMap.put("131","LockSettings".toLowerCase());  dialogIDMap.put("132","DialogContentSettings".toLowerCase());  windowAliasMap.put("contentsettings","dialogcontentsettings");  dialogIDMap.put("133","DialogVideoScan".toLowerCase());  dialogIDMap.put("134","DialogFavourites".toLowerCase());  windowAliasMap.put("favourites","dialogfavourites");  dialogIDMap.put("135","DialogSongInfo".toLowerCase());  windowAliasMap.put("songinformation","dialogsonginfo");  dialogIDMap.put("136","SmartPlaylistEditor".toLowerCase());  dialogIDMap.put("137","SmartPlaylistRule".toLowerCase());  dialogIDMap.put("138","DialogBusy".toLowerCase());  windowAliasMap.put("busydialog","dialogbusy");  dialogIDMap.put("139","DialogPictureInfo".toLowerCase());  windowAliasMap.put("pictureinfo","dialogpictureinfo");  dialogIDMap.put("140","DialogAddonSettings".toLowerCase());  windowAliasMap.put("addonsettings","DialogAddonSettings");  dialogIDMap.put("141","DialogAccessPoints".toLowerCase());  dialogIDMap.put("142","DialogFullScreenInfo".toLowerCase());  windowAliasMap.put("fullscreeninfo","dialogfullscreeninfo");  dialogIDMap.put("143","DialogKaraokeSongSelector".toLowerCase());  windowAliasMap.put("karaokeselector","dialogkaraokesongselector");  dialogIDMap.put("144","DialogKaraokeSongSelectorLarge".toLowerCase());  windowAliasMap.put("karaokelargeselector","dialogkaraokesongselectorlarge");  dialogIDMap.put("145","DialogSlider".toLowerCase());  windowAliasMap.put("sliderdialog","dialogslider");  dialogIDMap.put("146","DialogPVRUpdateProgressBar".toLowerCase());  dialogIDMap.put("147","DialogPluginSettings".toLowerCase());  windowAliasMap.put("pluginsettings","dialogpluginsettings");  dialogIDMap.put("160","DialogAddonBrowser".toLowerCase());  windowAliasMap.put("addonbrowser","dialogaddonbrowser");  windowIDMap.put("500","MyMusicPlaylist".toLowerCase());  mediaWinIDs.add(new Integer(500));  windowAliasMap.put("musicplaylist","mymusicplaylist");  windowIDMap.put("501","MyMusicSongs".toLowerCase());  mediaWinIDs.add(new Integer(501));  windowAliasMap.put("musicfiles","mymusicsongs");  windowAliasMap.put("musicsongs","mymusicsongs");  windowAliasMap.put("mymusicfiles","mymusicsongs");  windowIDMap.put("502","MyMusicNav".toLowerCase());  mediaWinIDs.add(new Integer(502));  windowAliasMap.put("musiclibrary","mymusicnav");  windowAliasMap.put("mymusiclibrary","mymusicnav");  windowAliasMap.put("mymusic","mymusicnav");  windowIDMap.put("503","MyMusicPlaylistEditor".toLowerCase());  windowAliasMap.put("musicplaylisteditor","mymusicplaylisteditor");  windowIDMap.put("1000","VirtualKeyboard".toLowerCase());  dialogIDMap.put("2000","DialogSelect".toLowerCase());  windowAliasMap.put("selectdialog","dialogselect");  dialogIDMap.put("2001","DialogAlbumInfo".toLowerCase());  windowAliasMap.put("musicinformation","dialogalbuminfo");  dialogIDMap.put("2002","DialogOK".toLowerCase());  windowAliasMap.put("okdialog","dialogok");  dialogIDMap.put("2003","DialogVideoInfo".toLowerCase());  windowAliasMap.put("movieinformation","dialogvideoinfo");  dialogIDMap.put("2004","DialogScriptInfo".toLowerCase());  windowAliasMap.put("scriptsdebuginfo","dialogscriptinfo");  windowIDMap.put("2005","VideoFullScreen".toLowerCase());  windowAliasMap.put("fullscreenvideo","videofullscreen");  windowIDMap.put("2006","MusicVisualisation".toLowerCase());  windowAliasMap.put("visualisation","musicvisualisation");  windowIDMap.put("2007","SlideShow".toLowerCase());  dialogIDMap.put("2008","DialogFileStacking".toLowerCase());  windowAliasMap.put("filestackingdialog","dialogfilestacking");  windowIDMap.put("2600","MyWeather".toLowerCase());  windowAliasMap.put("weather","myweather");  windowIDMap.put("2700","MyBuddies".toLowerCase());  windowAliasMap.put("xlinkkai","mybuddies");  windowIDMap.put("2900","Screen Saver".toLowerCase());  windowAliasMap.put("screensaver","Screen Saver");  dialogIDMap.put("2901","VideoOSD".toLowerCase());  windowIDMap.put("2902","videomenu".toLowerCase());  windowIDMap.put("2999","Startup".toLowerCase());  dialogIDMap.put("2903","musicoverlay");  dialogIDMap.put("2904","videooverlay");  windowIDMap.put("600","mytv");  windowAliasMap.put("tv","mytv");  dialogIDMap.put("601","DialogPVRGuideInfo".toLowerCase());  dialogIDMap.put("602","DialogPVRRecordingInfo".toLowerCase());  dialogIDMap.put("603","DialogPVRTimerSettings".toLowerCase());  dialogIDMap.put("604","DialogPVRGroupManager".toLowerCase());  dialogIDMap.put("605","DialogPVRChannelManager".toLowerCase());  dialogIDMap.put("606","DialogPVRGuideSearch".toLowerCase());  dialogIDMap.put("607","DialogPVRChannelScan".toLowerCase());  dialogIDMap.put("608","DialogPVRUpdateProgress".toLowerCase());  dialogIDMap.put("609","DialogPVRChannelsOSD".toLowerCase());  windowAliasMap.put("pvrosdchannels","dialogpvrchannelsosd");  dialogIDMap.put("610","DialogPVRGuideOSD".toLowerCase());  windowAliasMap.put("pvrosdguide","dialogpvrguideosd");  dialogIDMap.put("611","DialogPVRDirectorOSD".toLowerCase());  windowAliasMap.put("pvrosddirector","dialogpvrdirectorosd");  dialogIDMap.put("612","DialogPVRCutterOSD".toLowerCase());  windowAliasMap.put("pvrosdcutter","dialogpvrcutterosd");  java.util.Iterator walker=windowIDMap.entrySet().iterator();  while (walker.hasNext()) {    java.util.Map.Entry ent=(java.util.Map.Entry)walker.next();    windowNameToIDMap.put(ent.getValue(),ent.getKey());  }  walker=dialogIDMap.entrySet().iterator();  while (walker.hasNext()) {    java.util.Map.Entry ent=(java.util.Map.Entry)walker.next();    dialogNameToIDMap.put(ent.getValue(),ent.getKey());  }  File mainSkinFile=new File(skinDir,"skin.xml");  if (!mainSkinFile.isFile())   throw new IOException("Missing skin.xml file!");  Document doc=docBuilderFac.newDocumentBuilder().parse(mainSkinFile);  Element docRoot=doc.getDocumentElement();  if (!docRoot.getNodeName().equals("skin"))   throw new IOException("Missing main <skin> tag");  System.out.println("root node name=" + docRoot.getNodeName());  NodeList kids=docRoot.getChildNodes();  int nodeLen=kids.getLength();  for (int i=0; i < nodeLen; i++) {    Node currChild=kids.item(i);    if (!(currChild instanceof Element))     continue;    String currNodeName=currChild.getNodeName();    System.out.println("child node name=" + currNodeName);    if ("defaultresolution".equals(currNodeName)) {      defaultResolution=currChild.getTextContent().trim();      System.out.println("defaultResolution=" + defaultResolution);    } else     if ("defaultresolutionwide".equals(currNodeName)) {      defaultResolutionWide=currChild.getTextContent().trim();      System.out.println("defaultResolutionWide=" + defaultResolutionWide);    } else     if ("defaultthemename".equals(currNodeName)) {      defaultTheme=currChild.getTextContent().trim();      System.out.println("defaultThemeName=" + defaultTheme);    } else     if ("effectslowdown".equals(currNodeName)) {      effectslowdown=Float.parseFloat(currChild.getTextContent().trim());      System.out.println("effectslowdown=" + effectslowdown);    } else     if ("version".equals(currNodeName)) {      version=currChild.getTextContent().trim();      System.out.println("version=" + version);    } else     if ("zoom".equals(currNodeName)) {      zoom=Float.parseFloat(currChild.getTextContent().trim());      System.out.println("zoom=" + zoom);    } else     if ("credits".equals(currNodeName)) {      NodeList skinnameKid=((Element)currChild).getElementsByTagName("skinname");      if (skinnameKid != null && skinnameKid.getLength() > 0) {        skinName=skinnameKid.item(0).getTextContent().trim();        System.out.println("skinName=" + skinName);      }      NodeList nameKids=((Element)currChild).getElementsByTagName("name");      if (nameKids != null) {        skinCredits="";        for (int j=0; j < nameKids.getLength(); j++) {          skinCredits+=nameKids.item(j).getTextContent().trim() + "\r\n";        }        System.out.println("skinCredits=" + skinCredits);      }    } else     if ("startwindows".equals(currNodeName)) {      NodeList winKids=((Element)currChild).getElementsByTagName("window");      for (int j=0; winKids != null && j < winKids.getLength(); j++) {        Node currWin=winKids.item(j);        String winName=currWin.getTextContent();        try {          int stringID=parseInt(winName);          System.out.println("STRING ID LOOKUP NEEDED FOR " + stringID);        } catch (        NumberFormatException e) {        }        windowIdToNameMap.put(new Integer(currWin.getAttributes().getNamedItem("id").getTextContent().trim()),winName);      }      System.out.println("Start window map=" + windowIdToNameMap);    }  }  if (!(new File(skinDir,mediaPath).isFile())) {    File[] folderNames=skinDir.listFiles();    for (int i=0; i < folderNames.length; i++) {      if (folderNames[i].isDirectory() && folderNames[i].getName().equalsIgnoreCase("media")) {        mediaPath=folderNames[i].getName();        break;      }    }  }  defaultResDir=new File(skinDir,defaultResolution);  String[] fileList=defaultResDir.list();  for (int i=0; fileList != null && i < fileList.length; i++) {    if (fileList[i].toLowerCase().endsWith(".xml")) {      winNameToFilenameMap.put(fileList[i].substring(0,fileList[i].length() - 4).toLowerCase(),fileList[i]);      if (fileList[i].toLowerCase().startsWith("custom")) {        File winFile=new File(defaultResDir,fileList[i]);        System.out.println("Examing custom window file: " + winFile + "...");        doc=docBuilderFac.newDocumentBuilder().parse(winFile);        docRoot=doc.getDocumentElement();        if (!docRoot.getNodeName().equals("window")) {          System.out.println("Missing main <window> tag");          continue;        }        System.out.println("root node name=" + docRoot.getNodeName());        kids=docRoot.getChildNodes();        String menuName=winFile.getName();        menuName=menuName.substring(0,menuName.indexOf(".xml"));        if (docRoot.getAttribute("id") != null && docRoot.getAttribute("id").length() > 0) {          int winid=parseInt(docRoot.getAttribute("id"));          System.out.println("Found custom window with id=" + winid);          windowIDMap.put("" + winid,fileList[i].toLowerCase().substring(0,fileList[i].length() - 4));          dialogIDMap.remove("" + winid);          windowNameToIDMap.put(windowIDMap.get("" + winid),"" + winid);        } else {          System.out.println("Custom window missing ID parameter!");        }      }    }  }  File includeFile=new File(defaultResDir,winNameToFilenameMap.containsKey("includes") ? winNameToFilenameMap.get("includes").toString() : "Includes.xml");  if (includeFile.isFile()) {    loadIncludes(includeFile);    System.out.println("Done with includes load!");    if (!FAST) {      System.out.println("constant map=" + constantsMap);      System.out.println("includes map=" + includeNameToNodeListMap);      System.out.println("defaults map=" + defaultControlIncludes);    }  }  if ((includeFile=new java.io.File(skinDir,"../../language/English/strings.xml")).isFile())   loadStrings(includeFile);  if ((includeFile=new java.io.File(skinDir,"language/English/strings.xml")).isFile())   loadStrings(includeFile);  if ((includeFile=new java.io.File(defaultResDir,winNameToFilenameMap.containsKey("font") ? winNameToFilenameMap.get("font").toString() : "Font.xml")).isFile())   loadFonts(includeFile);  if ((includeFile=new java.io.File(skinDir,"colors/Defaults.xml")).isFile())   loadColors(includeFile);  mgroup=tv.sage.ModuleManager.newModuleGroup();  mgroup.defaultModule.setBatchLoad(true);  java.io.File xbmcBase=new java.io.File("XBMCBase.xml");  if (!xbmcBase.isFile())   xbmcBase=new java.io.File("C:\\dev\\src\\stvs\\XBMC\\XBMCBase.xml");  mgroup.importXML(xbmcBase,null);  java.util.Set baseWidgets=new java.util.HashSet();  baseWidgets.addAll(java.util.Arrays.asList(mgroup.getWidgets()));  dialogOrganizer=mgroup.addWidget(THEME);  WidgetFidget.setName(dialogOrganizer,"DIALOG ORGANIZER");  rezWidth="720";  rezHeight="576";  if (defaultResolution.equals("720p")) {    rezWidth="1280";    rezHeight="720";  } else   if (defaultResolution.equals("1080i")) {    rezWidth="1920";    rezHeight="1080";  } else   if (defaultResolution.equalsIgnoreCase("NTSC")) {    rezWidth="720";    rezHeight="480";  }  String[] imageFiles=new File(skinDir,mediaPath).list();  for (int i=0; i < imageFiles.length; i++) {    String lcName=imageFiles[i].toLowerCase();    if (lcName.startsWith("default") && lcName.endsWith(".png")) {      String subName=lcName.substring(7,lcName.length() - 4);      if (subName.endsWith("big"))       subName=subName.substring(0,subName.length() - 3);      defaultImageMap.put(subName,"\"" + mediaPath + "/"+ imageFiles[i]+ "\"");    }  }  addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(addWidgetNamed(null,HOOK,"ApplicationStarted"),ACTION,"SetProperty(\"ui/scaling_insets_base_height\", " + rezHeight + ")"),ACTION,"SetProperty(\"ui/scaling_insets_base_width\", " + rezWidth + ")"),ACTION,"SetProperty(\"ui/default_hdd_icon\", " + defaultImageMap.get("harddisk") + ")"),ACTION,"SetProperty(\"ui/default_folder_icon\", " + defaultImageMap.get("folder") + ")"),ACTION,"SetProperty(\"xbmc/system/settings/videolibrary.enabled\", true)"),ACTION,"AddGlobalContext(\"CircFocusCheck\", new_java_util_HashSet())"),ACTION,"AddGlobalContext(\"XBMCSkinName\", \"" + skinName + "\")"),ACTION,"SetProperty(\"xbmc/system/settings/input.enablemouse\", IsDesktopUI())"),ACTION,"SetProperty(\"xbmc/system/settings/pvrmanager.enabled\", \"true\")"),ACTION,"\"XOUT: ApplicationStarted\"");  viewValidationRoot=addWidgetNamed(addWidgetNamed(null,ACTION,"\"XIN: ValidateContainerView\""),CONDITIONAL,"GetWidgetName(GetCurrentMenuWidget())");  loadWindow(new File(defaultResDir,"Home.xml"));  loadRemainingWindows(windowIDMap);  loadRemainingWindows(dialogIDMap);  Widget globalTheme=mgroup.addWidget(THEME);  WidgetFidget.setName(globalTheme,"Global");  WidgetFidget.contain(addWidgetNamed(globalTheme,LISTENER,"Home"),resolveMenuWidget("home"));  addWidgetNamed(addWidgetNamed(addWidgetNamed(globalTheme,LISTENER,"Stop"),ACTION,"CloseAndWaitUntilClosed()"),ACTION,"Refresh()");  addAttribute(globalTheme,"XBMCCompatability","true");  addAttribute(globalTheme,"AllowHiddenFocus","true");  addAttribute(globalTheme,"SingularMouseTransparency","true");  addAttribute(globalTheme,"DisableParentClip","true");  Widget globalHook=mgroup.addWidget(HOOK);  WidgetFidget.setName(globalHook,"MediaPlayerPlayStateChanged");  addWidgetNamed(globalHook,ACTION,"Refresh()");  globalHook=mgroup.addWidget(HOOK);  WidgetFidget.setName(globalHook,"MediaPlayerSeekCompleted");  addWidgetNamed(addWidgetNamed(globalHook,ACTION,"AddGlobalContext(\"LastSeekCompleteTime\", Time())"),ACTION,"Refresh()");  globalHook=mgroup.addWidget(HOOK);  WidgetFidget.setName(globalHook,"MediaPlayerFileLoadComplete");  addWidgetNamed(globalHook,ACTION,"Refresh()");  java.util.Set completeWidgets=new java.util.HashSet();  completeWidgets.addAll(java.util.Arrays.asList(mgroup.getWidgets()));  completeWidgets.removeAll(baseWidgets);  java.util.Map baseWidgetInputs=new java.util.HashMap();  java.util.Map genWidgetInputs=new java.util.HashMap();  java.util.Vector baseWidgetOutputs=new java.util.Vector();  java.util.Vector genWidgetOutputs=new java.util.Vector();  walker=baseWidgets.iterator();  while (walker.hasNext()) {    Widget w=(Widget)walker.next();    if (w.getName().startsWith("\"XIN:")) {      String key=w.getName().substring(5,w.getName().length() - 1).trim();      java.util.Vector oldVec=(java.util.Vector)baseWidgetInputs.get(key);      if (oldVec == null)       baseWidgetInputs.put(key,oldVec=new java.util.Vector());      oldVec.add(w);    } else     if (w.getName().startsWith("\"XOUT:"))     baseWidgetOutputs.add(w); else     if (w.type() == ACTION && w.getName().startsWith("\"XMENU:")) {      Widget menWidg=resolveMenuWidget(w.getName().substring(7,w.getName().length() - 1).trim());      if (menWidg != null)       WidgetFidget.contain(w,menWidg);    }  }  walker=completeWidgets.iterator();  while (walker.hasNext()) {    Widget w=(Widget)walker.next();    if (w.getName().startsWith("\"XIN:")) {      String key=w.getName().substring(5,w.getName().length() - 1).trim();      java.util.Vector oldVec=(java.util.Vector)genWidgetInputs.get(key);      if (oldVec == null)       genWidgetInputs.put(key,oldVec=new java.util.Vector());      oldVec.add(w);    } else     if (w.getName().startsWith("\"XOUT:"))     genWidgetOutputs.add(w);  }  for (int i=0; i < genWidgetOutputs.size(); i++) {    Widget w=(Widget)genWidgetOutputs.get(i);    String linkName=w.getName().substring(6,w.getName().length() - 1).trim();    java.util.Vector linkers=(java.util.Vector)baseWidgetInputs.get(linkName);    if (linkers != null) {      for (int j=0; j < linkers.size(); j++) {        Widget linker=(Widget)linkers.get(j);        if (linker.type() == w.type()) {          if (w.type() == ACTION)           WidgetFidget.contain(w,linker); else {            Widget[] inKids=linker.contents();            for (int k=0; k < inKids.length; k++) {              WidgetFidget.contain(w,inKids[k]);            }          }        } else {          System.out.println("ERROR Incompatible types for Widget linking: " + linkName);        }      }    } else {      System.out.println("ERROR Undefined link to base widgets with tag: " + linkName);    }  }  for (int i=0; i < baseWidgetOutputs.size(); i++) {    Widget w=(Widget)baseWidgetOutputs.get(i);    String linkName=w.getName().substring(6,w.getName().length() - 1).trim();    java.util.Vector linkers=(java.util.Vector)genWidgetInputs.get(linkName);    if (linkers != null) {      for (int j=0; j < linkers.size(); j++) {        Widget linker=(Widget)linkers.get(j);        if (linker.type() == w.type()) {          if (w.type() == ACTION)           WidgetFidget.contain(w,linker); else {            Widget[] inKids=linker.contents();            for (int k=0; k < inKids.length; k++) {              WidgetFidget.contain(w,inKids[k]);            }          }        } else {          System.out.println("ERROR Incompatible types for Widget linking: " + linkName);        }      }    } else {      System.out.println("ERROR Undefined link to generated widgets with tag: " + linkName);    }  }  mgroup.defaultModule.setBatchLoad(false);  System.out.println("XBMC Load took " + (System.currentTimeMillis() - startTime) + " msec");  if (outputFile != null) {    mgroup.defaultModule.saveXML(outputFile,"SageTV Generated " + skinName);    System.out.println("Saved the STV file to: " + outputFile);  }}  }
class C{  public void addNew(String classname){  addOpcode(NEW);  addIndex(constPool.addClassInfo(classname));}  }
class C{  public final boolean equals(@GuardSatisfied Object other){  return this == other;}  }
class C{  protected void releaseManagedConnection() throws IOException {  if (managedConn != null) {    try {      managedConn.releaseConnection();    }  finally {      managedConn=null;    }  }}  }
class C{  private Map<String,StreamWorkSlotQueue> buildQueueMap(){  Map<String,StreamWorkSlotQueue> queueMap=new HashMap<String,StreamWorkSlotQueue>();  for (  MonitoredStream ms : context.getMonitoredStreams().values()) {    for (    StreamWorkSlotQueue queue : ms.getQueues()) {      queueMap.put(queue.getQueueId(),queue);    }  }  return queueMap;}  }
class C{  private boolean isCharStrong(int chr){  return (STRONG_TEXT_FLAGS[chr >> 5] & (1 << (chr % 32))) != 0;}  }
class C{  VOServiceDetails publishService(ServiceDetails service,List<VOCategory> categories) throws SaaSApplicationException {  VOMarketplace voMp=null;  if (!isBlank(marketplaceId)) {    voMp=new VOMarketplace();    voMp.setMarketplaceId(marketplaceId);  }  VOCatalogEntry voCE=new VOCatalogEntry();  voCE.setAnonymousVisible(service.isPublicService());  voCE.setMarketplace(voMp);  voCE.setCategories(categories);  try {    return getMarketplaceService().publishService(service.getVoServiceDetails(),Arrays.asList(voCE));  } catch (  SaaSApplicationException e) {    checkMarketplaceDropdownAndMenuVisibility(e);    throw e;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  return expr.check(env,ctx,reach(env,vset),exp);}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=null;  this.certserno=null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double minVal=Double.MAX_VALUE;  double maxVal=-Double.MAX_VALUE;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    minVal=image.getMinimumValue();    maxVal=image.getMaximumValue();    double range=maxVal - minVal;    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=(data[col] - minVal) / range * 100;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2",progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    image.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void timeout(int timeout){  this.timeout=timeout;}  }
class C{  private void init(){  setTitle("Edit Backprop Network");  trainer=new BackpropTrainer(backprop,backprop.getNeuronGroupsAsList());  IterativeControlsPanel iterativeControls=new IterativeControlsPanel(networkPanel,trainer);  addTab("Train",iterativeControls);}  }
class C{  public AccesskeyTimingSpecifier(TimedElement owner,boolean isBegin,float offset,char accesskey){  super(owner,isBegin,offset);  this.accesskey=accesskey;}  }
class C{  public static boolean needsParenthesesForRightOperand(Expression rightOperand,InfixExpression infixExpression,ITypeBinding leftOperandType){  return needsParentheses(rightOperand,infixExpression,InfixExpression.RIGHT_OPERAND_PROPERTY,leftOperandType);}  }
class C{  @Override public void rollback(Savepoint savepoint) throws SQLException {  try {    JdbcSavepoint sp=convertSavepoint(savepoint);    if (isDebugEnabled()) {      debugCode("rollback(" + sp.getTraceObjectName() + ");");    }    checkClosedForWrite();    try {      sp.rollback();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public DocumentHandler(){  setElementHandler("java",JavaElementHandler.class);  setElementHandler("null",NullElementHandler.class);  setElementHandler("array",ArrayElementHandler.class);  setElementHandler("class",ClassElementHandler.class);  setElementHandler("string",StringElementHandler.class);  setElementHandler("object",ObjectElementHandler.class);  setElementHandler("void",VoidElementHandler.class);  setElementHandler("char",CharElementHandler.class);  setElementHandler("byte",ByteElementHandler.class);  setElementHandler("short",ShortElementHandler.class);  setElementHandler("int",IntElementHandler.class);  setElementHandler("long",LongElementHandler.class);  setElementHandler("float",FloatElementHandler.class);  setElementHandler("double",DoubleElementHandler.class);  setElementHandler("boolean",BooleanElementHandler.class);  setElementHandler("new",NewElementHandler.class);  setElementHandler("var",VarElementHandler.class);  setElementHandler("true",TrueElementHandler.class);  setElementHandler("false",FalseElementHandler.class);  setElementHandler("field",FieldElementHandler.class);  setElementHandler("method",MethodElementHandler.class);  setElementHandler("property",PropertyElementHandler.class);}  }
class C{  static PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetCurrency) throws SQLException {  if (s_conn == null)   s_conn=getConnection();  try {    return s_conn.prepareStatement(sql,resultSetType,resultSetCurrency);  } catch (  Exception e) {  }  s_conn=getConnection();  return s_conn.prepareStatement(sql);}  }
class C{  private static ValueAnimator loadAnimator(Context context,AttributeSet attrs,ValueAnimator anim) throws NotFoundException {  TypedArray a=context.obtainStyledAttributes(attrs,Animator);  long duration=a.getInt(Animator_duration,0);  long startDelay=a.getInt(Animator_startOffset,0);  int valueType=a.getInt(Animator_valueType,VALUE_TYPE_FLOAT);  if (anim == null) {    anim=new ValueAnimator();  }  int valueFromIndex=Animator_valueFrom;  int valueToIndex=Animator_valueTo;  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);  TypedValue tvFrom=a.peekValue(valueFromIndex);  boolean hasFrom=(tvFrom != null);  int fromType=hasFrom ? tvFrom.type : 0;  TypedValue tvTo=a.peekValue(valueToIndex);  boolean hasTo=(tvTo != null);  int toType=hasTo ? tvTo.type : 0;  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {    getFloats=false;    anim.setEvaluator(new ArgbEvaluator());  }  if (getFloats) {    float valueFrom;    float valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=a.getDimension(valueFromIndex,0f);      } else {        valueFrom=a.getFloat(valueFromIndex,0f);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=a.getDimension(valueToIndex,0f);        } else {          valueTo=a.getFloat(valueToIndex,0f);        }        anim.setFloatValues(valueFrom,valueTo);      } else {        anim.setFloatValues(valueFrom);      }    } else {      if (toType == TypedValue.TYPE_DIMENSION) {        valueTo=a.getDimension(valueToIndex,0f);      } else {        valueTo=a.getFloat(valueToIndex,0f);      }      anim.setFloatValues(valueTo);    }  } else {    int valueFrom;    int valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=(int)a.getDimension(valueFromIndex,0f);      } else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {        valueFrom=a.getColor(valueFromIndex,0);      } else {        valueFrom=a.getInt(valueFromIndex,0);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueFrom,valueTo);      } else {        anim.setIntValues(valueFrom);      }    } else {      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueTo);      }    }  }  anim.setDuration(duration);  anim.setStartDelay(startDelay);  if (a.hasValue(Animator_repeatCount)) {    anim.setRepeatCount(a.getInt(Animator_repeatCount,0));  }  if (a.hasValue(Animator_repeatMode)) {    anim.setRepeatMode(a.getInt(Animator_repeatMode,ValueAnimator.RESTART));  }  final int resID=a.getResourceId(Animator_interpolator,0);  if (resID > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));  }  a.recycle();  return anim;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getActivity_();}  }
class C{  final void unsplice(Node pred,Node s){  s.forgetContents();  if (pred != null && pred != s && pred.next == s) {    Node n=s.next;    if (n == null || (n != s && pred.casNext(s,n) && pred.isMatched())) {      for (; ; ) {        Node h=head;        if (h == pred || h == s || h == null)         return;        if (!h.isMatched())         break;        Node hn=h.next;        if (hn == null)         return;        if (hn != h && casHead(h,hn))         h.forgetNext();      }      if (pred.next != pred && s.next != s) {        for (; ; ) {          int v=sweepVotes;          if (v < SWEEP_THRESHOLD) {            if (casSweepVotes(v,v + 1))             break;          } else           if (casSweepVotes(v,0)) {            sweep();            break;          }        }      }    }  }}  }
class C{  @Override public void acceptResult(ResultProducer rp,Object[] key,Object[] result) throws Exception {  if (m_RP != rp) {    throw new Error("Unrecognized ResultProducer sending results!!");  }  for (int i=0; i < key.length; i++) {    if (i != 0) {      m_Out.print(',');    }    if (key[i] == null) {      m_Out.print("?");    } else {      m_Out.print(Utils.quote(key[i].toString()));    }  }  for (  Object element : result) {    m_Out.print(',');    if (element == null) {      m_Out.print("?");    } else {      m_Out.print(Utils.quote(element.toString()));    }  }  m_Out.println("");}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.STATEMENT;}  }
class C{  public void paintComboBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public void update(String wsId,long activityTime){  if (expirePeriod > 0) {    activeWorkspaces.put(wsId,activityTime + expirePeriod);  }}  }
class C{  public void close(){}  }
class C{  @SuppressWarnings({"IfMayBeConditional"}) private static boolean isHelp(String arg){  String s;  if (arg.startsWith("--"))   s=arg.substring(2); else   if (arg.startsWith("-") || arg.startsWith("/") || arg.startsWith("\\"))   s=arg.substring(1); else   s=arg;  return "?".equals(s) || "help".equalsIgnoreCase(s) || "h".equalsIgnoreCase(s);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public static Function<String,String> greet(String greeting){  return null;}  }
class C{  @Override public boolean supportsConvert(int fromType,int toType){  if (isDebugEnabled()) {    debugCode("supportsConvert(" + fromType + ", "+ fromType+ ");");  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Input(Input in) throws IllegalStateException {  List<Field> inputFields=in.getFields();  for (int i=0; i < inputFields.size(); i++) {    try {      mFields.add(inputFields.get(i).clone());    } catch (    CloneNotSupportedException e) {      throw new IllegalStateException("Error cloning field " + inputFields.get(i).getName() + " in Input "+ in.getName()+ ".");    }  }  mName=in.getName();  mType=in.getType();  mConnection=Connection.cloneConnection(in.getConnection());  if (mConnection != null) {    mConnection.setInput(this);  }  mAlign=in.getAlign();}  }
class C{  public PutIndexedScriptRequest(String scriptLang,String id){  super();  this.scriptLang=scriptLang;  this.id=id;}  }
class C{  private byte[] decode(String source){  int sLen=source.length();  if (sLen == 0) {    return new byte[0];  }  int sIx=0, eIx=sLen - 1;  while (sIx < eIx && IA[source.charAt(sIx) & 0xff] < 0) {    sIx++;  }  while (eIx > 0 && IA[source.charAt(eIx) & 0xff] < 0)   eIx--;  int pad=source.charAt(eIx) == '=' ? (source.charAt(eIx - 1) == '=' ? 2 : 1) : 0;  int cCnt=eIx - sIx + 1;  int sepCnt=sLen > 76 ? (source.charAt(76) == '\r' ? cCnt / 78 : 0) << 1 : 0;  int len=((cCnt - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  int d=0;  for (int eLen=(len / 3) * 3; d < eLen; ) {    int i=IA[source.charAt(sIx++)] << 18 | IA[source.charAt(sIx++)] << 12 | IA[source.charAt(sIx++)] << 6 | IA[source.charAt(sIx++)];    dArr[d++]=(byte)(i >> 16);    dArr[d++]=(byte)(i >> 8);    dArr[d++]=(byte)i;  }  if (d < len) {    int i=0;    for (int j=0; sIx <= eIx - pad; j++)     i|=IA[source.charAt(sIx++)] << (18 - j * 6);    for (int r=16; d < len; r-=8)     dArr[d++]=(byte)(i >> r);  }  return dArr;}  }
class C{  public CodeSource(URL url,java.security.cert.Certificate certs[]){  this.location=url;  if (certs != null) {    this.certs=certs.clone();  }}  }
class C{  @Override public void removeAcceptedOffer(Offer offer){  this.acceptedOffers.remove(offer);  talkAdapter.removeCardOffer(offer);}  }
class C{  private void checkPermissions(String processDefinitionKey,NamespacePermissionEnum[] permissions){  JobDefinitionAlternateKeyDto jobDefinitionKey=jobDefinitionHelper.getJobDefinitionKey(processDefinitionKey);  namespaceSecurityHelper.checkPermission(jobDefinitionKey.getNamespace(),permissions);}  }
class C{  public boolean skipPast(String to) throws JSONException {  boolean b;  char c;  int i;  int j;  int offset=0;  int length=to.length();  char[] circle=new char[length];  for (i=0; i < length; i+=1) {    c=next();    if (c == 0) {      return false;    }    circle[i]=c;  }  for (; ; ) {    j=offset;    b=true;    for (i=0; i < length; i+=1) {      if (circle[j] != to.charAt(i)) {        b=false;        break;      }      j+=1;      if (j >= length) {        j-=length;      }    }    if (b) {      return true;    }    c=next();    if (c == 0) {      return false;    }    circle[offset]=c;    offset+=1;    if (offset >= length) {      offset-=length;    }  }}  }
class C{  public ModeledAuthenticatedUser(AuthenticatedUser authenticatedUser,AuthenticationProvider modelAuthenticationProvider,ModeledUser user){  super(authenticatedUser.getAuthenticationProvider(),authenticatedUser.getCredentials());  this.modelAuthenticationProvider=modelAuthenticationProvider;  this.user=user;}  }
class C{  public static boolean isTernaryInstruction(final ReilInstruction instruction){  Preconditions.checkNotNull(instruction,"Instruction argument can not be null");  return instruction.getMnemonic().equalsIgnoreCase("ADD") || instruction.getMnemonic().equalsIgnoreCase("SUB") || instruction.getMnemonic().equalsIgnoreCase("MUL")|| instruction.getMnemonic().equalsIgnoreCase("DIV")|| instruction.getMnemonic().equalsIgnoreCase("MOD")|| instruction.getMnemonic().equalsIgnoreCase("BSH")|| instruction.getMnemonic().equalsIgnoreCase("AND")|| instruction.getMnemonic().equalsIgnoreCase("OR")|| instruction.getMnemonic().equalsIgnoreCase("XOR");}  }
class C{  DownloadState query(Uri uri){synchronized (currentRequests) {    for (    DownloadRequest request : currentRequests) {      if (request.uri().toString().equals(uri.toString())) {        return request.downloadState();      }    }  }  return DownloadState.INVALID;}  }
class C{  public static byte[] decodeChecked(String input) throws ParseException {  byte[] decoded=decode(input);  if (decoded.length < 4) {    throw new ParseException("Input too short",0);  }  byte[] data=Arrays.copyOfRange(decoded,0,decoded.length - 4);  byte[] checksum=Arrays.copyOfRange(decoded,decoded.length - 4,decoded.length);  byte[] actualChecksum=Arrays.copyOfRange(hashTwice(data),0,4);  if (!Arrays.equals(checksum,actualChecksum)) {    throw new ParseException("Checksum does not validate",0);  }  return data;}  }
class C{  public Writer buildAddFieldWriter(AbstractSession session,FieldDefinition field,Writer writer) throws ValidationException {  try {    writer.write("ALTER TABLE " + getFullName() + " ");    session.getPlatform().writeAddColumnClause(writer,session,this,field);    writer.write(" ");  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  private void createNetwork(){  System.out.println("creating network...");  network.createFromGeomField(roads);  for (  Object o : network.getEdges()) {    GeomPlanarGraphEdge e=(GeomPlanarGraphEdge)o;    idsToEdges.put(e.getDoubleAttribute("ID_ID").intValue(),e);    e.setData(new ArrayList<Agent>());  }  addIntersectionNodes(network.nodeIterator(),junctions);}  }
class C{  private static <T>PriorityQueue<T> intersection(PriorityQueue<T> set1,PriorityQueue<T> set2){  PriorityQueue<T> intersection=new PriorityQueue<>(set1);  intersection.retainAll(set2);  return intersection;}  }
class C{  public Weather(@NonNull String[] todayData,@NonNull String[] tomorrowData){  if (todayData.length == SPEC_SIZE) {    today=new DayInfo(todayData);  }  if (tomorrowData.length == SPEC_SIZE) {    tomorrow=new DayInfo(tomorrowData);  }}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {  if (createCatalog) {    logger.info("Initializing data source tables: service=" + serviceName + " schema="+ connectionSpec.getSchema());    Database conn=null;    try {      if (this.connectionSpec.supportsCreateDB()) {        if (checkDBConnectivity(false,true)) {          logger.info("Confirmed DBMS connection");        } else {          logger.info("Attempting to create schema via JDBC");          checkDBConnectivity(true,false);        }      } else {        checkDBConnectivity(false,false);        logger.info("Confirmed DBMS connection");      }      conn=connectionManager.getCatalogConnection();      String schema=connectionSpec.getSchema();      if (conn.supportsUseDefaultSchema() && schema != null) {        if (conn.supportsCreateDropSchema()) {          conn.createSchema(schema);        }        conn.useDefaultSchema(schema);      }      commitSeqno.initialize();      Table consistency=ConsistencyTable.getConsistencyTableDefinition(schema);      if (conn.findTable(consistency.getSchema(),consistency.getName()) == null) {        conn.createTable(consistency,false,connectionSpec.getTableType());      }      HeartbeatTable heartbeatTable=new HeartbeatTable(schema,connectionSpec.getTableType(),serviceName);      heartbeatTable.initializeHeartbeatTable(conn);      heartbeatTable.initializeHeartbeatStageTable(conn);      ShardTable shardTable=new ShardTable(schema,connectionSpec.getTableType());      shardTable.initializeShardTable(conn);      channelTable=new ShardChannelTable(schema,connectionSpec.getTableType());      channelTable.initializeShardTable(conn,this.channels);    } catch (    SQLException e) {      throw new ReplicatorException("Unable to create catalog tables",e);    } finally {      if (conn != null) {        connectionManager.releaseCatalogConnection(conn);      }    }  }}  }
class C{  public void test_map_LargePosition() throws IOException {  int[] sizes={4096,65536};  final int CONTENT_LEN=10;  for (int i=0; i < sizes.length; ++i) {    if (i > 0) {      fileOfReadOnlyFileChannel=File.createTempFile("File_of_readOnlyFileChannel","tmp");      fileOfReadOnlyFileChannel.deleteOnExit();      readOnlyFileChannel=new FileInputStream(fileOfReadOnlyFileChannel).getChannel();    }    writeLargeDataToFile(fileOfReadOnlyFileChannel,sizes[i] + 2 * CONTENT_LEN);    MappedByteBuffer mapped=readOnlyFileChannel.map(MapMode.READ_ONLY,sizes[i],CONTENT_LEN);    assertEquals("Incorrectly mapped file channel for " + sizes[i] + " position (capacity)",CONTENT_LEN,mapped.capacity());    assertEquals("Incorrectly mapped file channel for " + sizes[i] + " position (limit)",CONTENT_LEN,mapped.limit());    assertEquals("Incorrectly mapped file channel for " + sizes[i] + " position (position)",0,mapped.position());    assertEquals(0,readOnlyFileChannel.position());    readOnlyFileChannel.close();    fileOfReadOnlyFileChannel.delete();  }}  }
class C{  public void testConnectZephyrBluetoothSensor_underRecording(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  bluetoothSensorTest(R.string.settings_sensor_type_zephyr,ZEPHYR_NAME,true);}  }
class C{  private Intent createIntent(String action,Uri data,String extraData,String query,int actionKey,String actionMsg){  Intent intent=new Intent(action);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  if (data != null) {    intent.setData(data);  }  intent.putExtra(SearchManager.USER_QUERY,mUserQuery);  if (query != null) {    intent.putExtra(SearchManager.QUERY,query);  }  if (extraData != null) {    intent.putExtra(SearchManager.EXTRA_DATA_KEY,extraData);  }  if (mAppSearchData != null) {    intent.putExtra(SearchManager.APP_DATA,mAppSearchData);  }  if (actionKey != KeyEvent.KEYCODE_UNKNOWN) {    intent.putExtra(SearchManager.ACTION_KEY,actionKey);    intent.putExtra(SearchManager.ACTION_MSG,actionMsg);  }  intent.setComponent(mSearchable.getSearchActivity());  return intent;}  }
class C{  public String sqlObject_createIndex(String vendorName,String catalogName,String schemaName,String tableName,boolean isUnique,String indexName,ArrayList<String> columnNames,ArrayList<String> directions,ArrayList<String> nullTreatments){  indexName=normalizeIdentifier(vendorName,indexName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_createIndex(catalogName,schemaName,tableName,isUnique,indexName,columnNames,directions,nullTreatments);}  }
class C{  public char charAt(int index){  if (0 <= index && index < count) {    return value[offset + index];  }  throw new StringIndexOutOfBoundsException();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Object convertKey(Object key){  return (key == null ? NULL : key);}  }
class C{  public void verifyAgainst(SignatureManifest anotherManifest) throws Exception {  for (  MessagePart thisRef : references) {    MessagePart otherRef=anotherManifest.getReference(thisRef.getName());    if (otherRef == null) {      throw new CodedException(ErrorCodes.X_MALFORMED_SIGNATURE,"Reference for URI '" + thisRef.getName() + "' does not exist");    }    if (!thisRef.equals(otherRef)) {      throw new CodedException(ErrorCodes.X_INVALID_REFERENCE,"Failed to verify reference " + thisRef + " against "+ otherRef);    }  }}  }
class C{  public void publish(T event){  getSortedListeners().stream().forEachOrdered(null);}  }
class C{  public void initializeScreen(){  ViewPager viewPager=(ViewPager)findViewById(R.id.pager);  TabLayout tabLayout=(TabLayout)findViewById(R.id.tab_layout);  Toolbar toolbar=(Toolbar)findViewById(R.id.app_bar);  setSupportActionBar(toolbar);  SectionPagerAdapter adapter=new SectionPagerAdapter(getSupportFragmentManager());  viewPager.setOffscreenPageLimit(2);  viewPager.setAdapter(adapter);  tabLayout.setupWithViewPager(viewPager);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  static TemplateModelException newModelHasStoredNullException(Class expected,TemplateModel model,Expression expr){  return new _TemplateModelException(expr,_TemplateModelException.modelHasStoredNullDescription(expected,model));}  }
class C{  public void addUnmanagedSourceVolumeToUpdate(UnManagedVolume volume){  if (null == _unmanagedSourceVolumesToUpdate) {    _unmanagedSourceVolumesToUpdate=new ArrayList<UnManagedVolume>();  }  _unmanagedSourceVolumesToUpdate.add(volume);}  }
class C{  public static void assertLinewiseEquals(String message,String expected,String actual){  try (Scanner expectedScanner=new Scanner(expected);Scanner actualScanner=new Scanner(actual)){    String expectedLine=null;    String actualLine=null;    int lineCounter=1;    while (expectedScanner.hasNextLine()) {      expectedLine=expectedScanner.nextLine();      if (actualScanner.hasNextLine()) {        actualLine=actualScanner.nextLine();      } else {        fail("Line " + lineCounter + ": actual input has less lines then expected result! Expected: "+ expectedLine);      }      assertEquals("Line " + lineCounter + ": "+ message+ "\n\nExpected:\n"+ expected+ "\nActual:\n"+ actual,expectedLine,actualLine);      ++lineCounter;    }  } }  }
class C{  public static void showInternalMessageDialog(Component parentComponent,Object message,String title,int messageType,Icon icon){  showInternalOptionDialog(parentComponent,message,title,DEFAULT_OPTION,messageType,icon,null,null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:41.805 -0500",hash_original_method="F83C1F460CEFDE714C6876815B6DE46B",hash_generated_method="13638EB57CF94D33F1BF62C549AFB267") private void parseTestClasses(String testClassArg,TestSuiteBuilder testSuiteBuilder){  String[] testClasses=testClassArg.split(",");  for (  String testClass : testClasses) {    parseTestClass(testClass,testSuiteBuilder);  }}  }
class C{  @Override public boolean supportsMultipleOpenResults(){  debugCodeCall("supportsMultipleOpenResults");  return true;}  }
class C{  public ObjectStoreGlobFilter(String filePattern) throws IOException {  init(filePattern,DEFAULT_FILTER);}  }
class C{  public Resource createObjectFromString(String resourceName) throws InstantiationException, IllegalAccessException, NotExtendingResourceException {  Class objectClass=registeredClasses.get(resourceName);  try {    return (Resource)objectClass.newInstance();  } catch (  InstantiationException e) {    throw e;  }catch (  IllegalAccessException e) {    throw e;  }catch (  ClassCastException e) {    throw new NotExtendingResourceException(objectClass + " is not inheriting Resource");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.604 -0500",hash_original_method="44A5F82F772B2346E44573FA04C5E6BF",hash_generated_method="3ABBE2A803DFB1C29B76770F492B12EA") public void clearQheaders(){  qheaders=new NameValueList();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.675 -0500",hash_original_method="A557BD8F16E39F3D746BC7787E72C291",hash_generated_method="C0122007B2F65595FDA683997AE07770") public void removePort(){  authority.removePort();}  }
class C{  public MkMaxTreeNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,MkMaxEntry.class);}  }
class C{  ElementsOrAttributes addElements(){  return values[flags | ELEMENTS_FLAG];}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public String changeIpsecState(@QueryParam("status") String status){  ipsecMgr.verifyIPsecOpAllowable();  String result=ipsecMgr.changeIpsecStatus(status);  auditMgr.recordAuditLog(null,null,IPSEC_SERVICE_TYPE,OperationTypeEnum.UPDATE_SYSTEM_PROPERTY,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,null,IPSEC_STATUS + "=" + status);  return result;}  }
class C{  public double key(){  return _map._set[_index];}  }
class C{  public void clear(){  for (int i=0; i < subpops.length; i++)   subpops[i].clear();}  }
class C{  public static boolean removeShutdownHook(Thread hook){  throw new Error("TODO");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Class<? extends LastSegmentFinder> bindLastSegmentFinder(){  return SimpleLastSegmentFinder.class;}  }
class C{  @Override protected void onNfcPushStateChange(boolean enabled){  if (enabled) {    toast(getString(R.string.nfcBeamAvailableEnabled));  } else {    toast(getString(R.string.nfcBeamAvailableDisabled));  }}  }
class C{  public ProblemException(Problem problem,String message,Throwable cause){  super(message,cause);  this.problem=problem;}  }
class C{  public Builder metadata(String metadata){  return metadata(toBytes(metadata));}  }
class C{  private TestFitnessFunction chooseRepresentativeGoal(TestCase test,Collection<TestFitnessFunction> goals){  Map<String,Integer> methodToPosition=new LinkedHashMap<>();  for (  Statement st : test) {    if (st instanceof MethodStatement) {      MethodStatement ms=(MethodStatement)st;      String name=ms.getMethodName() + ms.getDescriptor();      methodToPosition.put(name,st.getPosition());    } else     if (st instanceof ConstructorStatement) {      ConstructorStatement cs=(ConstructorStatement)st;      String name="<init>" + cs.getDescriptor();      methodToPosition.put(name,st.getPosition());    }  }  TestFitnessFunction chosenGoal=goals.iterator().next();  int chosenPosition=-1;  for (  TestFitnessFunction goal : goals) {    if (methodToPosition.containsKey(goal.getTargetMethod())) {      int position=methodToPosition.get(goal.getTargetMethod());      if (position >= chosenPosition) {        chosenPosition=position;        chosenGoal=goal;      }    }  }  return chosenGoal;}  }
class C{  public void traverse(int pos) throws org.xml.sax.SAXException {  int top=pos;  while (DTM.NULL != pos) {    startNode(pos);    int nextNode=m_dtm.getFirstChild(pos);    while (DTM.NULL == nextNode) {      endNode(pos);      if (top == pos)       break;      nextNode=m_dtm.getNextSibling(pos);      if (DTM.NULL == nextNode) {        pos=m_dtm.getParent(pos);        if ((DTM.NULL == pos) || (top == pos)) {          if (DTM.NULL != pos)           endNode(pos);          nextNode=DTM.NULL;          break;        }      }    }    pos=nextNode;  }}  }
class C{  static <T>void accept(Sink<T> this_,long value){  throw new IllegalStateException("called wrong accept method");}  }
class C{  @Override public byte[] remove(final byte[] key){  final Tuple<?> tuple=lookup(key,getMutableBTree().getLookupTuple());  if (tuple == null) {    getMutableBTree().insert(key,null,true,false,startTime,null);    return null;  } else {    final long timestamp=tuple.getVersionTimestamp();    if (tuple.isDeletedVersion() && timestamp == this.startTime) {    } else {      getMutableBTree().insert(key,null,true,false,timestamp,null);    }    return tuple.isNull() || tuple.isDeletedVersion() ? null : tuple.getValue();  }}  }
class C{  public void addCard(Card card){  cards.add(card);}  }
class C{  public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){  addStrokeShape(new Rectangle2D.Float(x,y,width,height));  mPrintMetrics.draw(this);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void testOmitTFAndNorms() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);  ft.setIndexOptions(IndexOptions.DOCS);  ft.setOmitNorms(true);  ft.freeze();  Field f=newField("foo","bar",ft);  doc.add(f);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher is=newSearcher(ir);  for (  Similarity sim : sims) {    is.setSimilarity(sim);    BooleanQuery.Builder query=new BooleanQuery.Builder();    query.add(new TermQuery(new Term("foo","bar")),BooleanClause.Occur.SHOULD);    assertEquals(1,is.search(query.build(),10).totalHits);  }  ir.close();  dir.close();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static final List<Geo> segmentNearPoly(GeoSegment segment,GeoArray r,double near){  Geo[] s=segment.getSeg();  List<Geo> list=null;  if (s != null && s.length == 2) {    list=segmentNearPoly(s[0],s[1],r,near);  }  return list;}  }
class C{  public static void ellipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (!(semiMajorAxis >= 0))   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (!(semiMinorAxis >= 0))   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  private AlarmEvent deactivation(AlarmPoint alarm){  AlarmStatus oldStatus=alarm.currentStatus();  if (oldStatus.name(null).equals(AlarmPoint.STATUS_ACKNOWLEDGED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_NORMAL);    return createEvent(alarm.identity().get(),oldStatus,newStatus,AlarmPoint.EVENT_DEACTIVATION);  } else   if (oldStatus.name(null).equals(AlarmPoint.STATUS_ACTIVATED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_DEACTIVATED);    return createEvent(alarm.identity().get(),oldStatus,newStatus,AlarmPoint.EVENT_DEACTIVATION);  }  return null;}  }
class C{  public ElementType parent(){  return theParent;}  }
class C{  public final synchronized int evictionCount(){  return evictionCount;}  }
class C{  @Inline @Entrypoint public static short shortFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_SHORT_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().shortRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void detach(){  try {    pickCanvas.getCanvas().removeMouseMotionListener(this);  } catch (  Exception e) {  }  try {    pickCanvas.getCanvas().removeMouseListener(this);  } catch (  Exception e) {  }}  }
class C{  private static DebuggerEventSettings readDebuggerEventSettings(final JFrame parent,final IDebugger debugger,final DebugTargetSettings target){  final DebuggerEventSettingsStorage eventSettingsStorage=new DebuggerEventSettingsStorage(debugger,target);  try {    return eventSettingsStorage.deserialize();  } catch (  final CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="Could not send debugger event settings command";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the debugger event settings command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);  }  return null;}  }
class C{  public boolean isA_Transfer_Balance_IS(){  Object oo=get_Value(COLUMNNAME_A_Transfer_Balance_IS);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static Geometry simplifyGeometry(final Geometry input_geometry,final int max_output_points){  Geometry geometry=input_geometry;  double cluster_factor=0.2;  int current_point_number=-1;  int previous_point_number=-2;  while ((current_point_number != previous_point_number) && (geometry.getNumPoints() > max_output_points)) {    previous_point_number=current_point_number;    current_point_number=geometry.getNumPoints();    geometry=simplifyGeometry(geometry,max_output_points,cluster_factor);    cluster_factor+=0.05;  }  return geometry;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void parse(final String osmFilename,final InputStream stream) throws UncheckedIOException {  if (this.hierarchyLayers.isEmpty()) {    log.warn("No hierarchy layer specified. Will convert every highway specified by setHighwayDefaults.");  }  OsmXmlParser parser=null;  if (this.slowButLowMemory) {    log.info("parsing osm file first time: identifying nodes used by ways");    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    parser.enableOptimization(1);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("parsing osm file second time: loading required nodes and ways");    parser.enableOptimization(2);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("done loading data");  } else {    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }  }  convert();  log.info("= conversion statistics: ==========================");  log.info("osm: # nodes read:       " + parser.nodeCounter.getCounter());  log.info("osm: # ways read:        " + parser.wayCounter.getCounter());  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  public void testRemainderKnuth1(){  byte aBytes[]={-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1};  byte bBytes[]={0,1,2,3,4,5,6,7,8,9,10};  int aSign=1;  int bSign=1;  byte rBytes[]={1,2,3,4,5,6,7,7,18,-89};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,jo,null);  }  return jo;}  }
class C{  public StringBuilder buildParameters(){  StringBuilder result=new StringBuilder();  try {    for (    ConcurrentHashMap.Entry<String,Object> entry : this.entrySet()) {      Object value=entry.getValue();      if (value == null) {        continue;      }      if (value instanceof String || value instanceof Integer) {        result.append("&");        result.append(URLEncoder.encode(entry.getKey(),"utf-8"));        result.append("=");        result.append(URLEncoder.encode(String.valueOf(value),"utf-8"));      } else {        CLog.e("Filter value,Type : %s,Value : %s",value.getClass().getName());      }    }    return result;  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Encoding not supported: " + "utf-8",e);  }}  }
class C{  public String[] retrieveTagsFromWs(){  final String requestUrl=this.mShaarliUrl + "?ws=tags&term=+";  String[] predictionsArr={};  try {    String json=this.createShaarliConnection(requestUrl,true).ignoreContentType(true).execute().body();    JSONArray ja=new JSONArray(json);    predictionsArr=new String[ja.length()];    for (int i=0; i < ja.length(); i++) {      predictionsArr[i]=ja.getString(i);    }  } catch (  Exception e) {    this.mLastError=e;    return predictionsArr;  }  return predictionsArr;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private List<TransitRouteStop> computeNewRouteProfile(TransitScheduleFactoryImpl factory,TransitRoute refTransitRoute,Map<Id<TransitRoute>,TransitRoute> transitRoutes,String[] listOfRoutes,List<TransitRouteStop> stops){  LinkedList<TransitRouteStop> newStops=new LinkedList<TransitRouteStop>();  for (int i=0; i < refTransitRoute.getStops().size(); i++) {    double arrivalOffset=0;    int arrCounter=0;    double departureOffset=0;    int depCounter=0;    for (int j=0; j < listOfRoutes.length; j++) {      TransitRoute route=transitRoutes.get(Id.create(listOfRoutes[j],TransitRoute.class));      TransitRouteStop stop=route.getStops().get(i);      arrivalOffset+=stop.getArrivalOffset() * route.getDepartures().size();      arrCounter++;      departureOffset+=stop.getDepartureOffset() * route.getDepartures().size();      depCounter++;    }    TransitRouteStop newStop=factory.createTransitRouteStop(refTransitRoute.getStops().get(i).getStopFacility(),arrivalOffset / (arrCounter),departureOffset / (depCounter));    newStop.setAwaitDepartureTime(refTransitRoute.getStops().get(i).isAwaitDepartureTime());    newStops.addLast(newStop);  }  return newStops;}  }
class C{  public final Object lookup(SymbolNode var){  Context cur=this;  while (cur != Empty) {    if (var == cur.name) {      return cur.value;    }    cur=cur.next;  }  return null;}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public static AST GetWith(int depth) throws ParseAlgorithmException {  return InnerGetWith(depth,null);}  }
class C{  public Mailer(String emailClient){  super(emailClient);}  }
class C{  public static void error(int WindowNo,Container c,String AD_Message,String msg){  log.info(AD_Message + " - " + msg);  if (CLogMgt.isLevelFinest())   Trace.printStack();  Properties ctx=Env.getCtx();  StringBuffer out=new StringBuffer();  if (AD_Message != null && !AD_Message.equals(""))   out.append(Msg.getMsg(ctx,AD_Message));  if (msg != null && msg.length() > 0)   out.append("\n").append(msg);  Window parent=Env.getParent(c);  if (parent == null)   parent=Env.getWindow(WindowNo);  if (showDialog && parent != null) {    if (parent instanceof JFrame)     new ADialogDialog((JFrame)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.ERROR_MESSAGE); else     if (parent instanceof JDialog)     new ADialogDialog((JDialog)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.ERROR_MESSAGE);  } else   JOptionPane.showMessageDialog(Env.getWindow(WindowNo),out.toString() + "\n",Env.getHeader(ctx,WindowNo),JOptionPane.ERROR_MESSAGE);}  }
class C{  public static List<VOEventDefinition> toVOEventDefinitions(List<Event> platformEvents,List<Event> events,LocalizerFacade facade){  List<VOEventDefinition> result=new ArrayList<VOEventDefinition>();  for (  Event event : platformEvents) {    result.add(toVOEventDefinition(event,facade));  }  for (  Event event : events) {    result.add(toVOEventDefinition(event,facade));  }  return result;}  }
class C{  public TreeDisplayEvent(int ar,String id){  m_command=0;  if (ar == 1 || ar == 2 || ar == 3 || ar == 4 || ar == 5) {    m_command=ar;  }  m_nodeId=id;}  }
class C{  public static String fixedWidthIntegertoString(int n,int w){  String s=Integer.toString(n);  while (s.length() < w) {    s=" " + s;  }  return s;}  }
class C{  public Set<Group> findGroups(String tenantName,SearchCriteria criteria,int limit) throws Exception {  return getService().findGroups(tenantName,criteria,limit,this.getServiceContext());}  }
class C{  public IBasicOption changedOption(){  return new BasicOption(option.getName(),getValue());}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private void updateStatsFromEvent(MemoryEvent event){  if (event.isLocal()) {    if (event.getState().isCritical() && !event.getPreviousState().isCritical()) {      this.stats.incHeapCriticalEvents();    } else     if (!event.getState().isCritical() && event.getPreviousState().isCritical()) {      this.stats.incHeapSafeEvents();    }    if (event.getState().isEviction() && !event.getPreviousState().isEviction()) {      this.stats.incEvictionStartEvents();    } else     if (!event.getState().isEviction() && event.getPreviousState().isEviction()) {      this.stats.incEvictionStopEvents();    }  }}  }
class C{  public boolean isRMIoverHTTP(){  return false;}  }
class C{  public String canopyPeriodicPruningRateTipText(){  return "If using canopy clustering for initialization and/or speedup " + "this is how often to prune low density canopies during training";}  }
class C{  public void minimize(TestChromosome c){  if (!Properties.MINIMIZE) {    return;  }  logger.info("Minimizing test case");  double fitness=fitnessFunction.getFitness(c);  if (isTimeoutReached()) {    return;  }  logger.debug("Start fitness values: {}",fitness);  assert ConstraintVerifier.verifyTest(c);  if (isTimeoutReached()) {    logger.debug("Timeout reached after verifying test");    return;  }  boolean changed=true;  while (changed) {    changed=false;    for (int i=c.test.size() - 1; i >= 0; i--) {      if (isTimeoutReached()) {        logger.debug("Timeout reached before minimizing statement {}",c.test.getStatement(i).getCode());        return;      }      logger.debug("Deleting statement {}",c.test.getStatement(i).getCode());      TestChromosome copy=(TestChromosome)c.clone();      boolean modified;      try {        modified=TestFactory.getInstance().deleteStatementGracefully(c.test,i);      } catch (      ConstructionFailedException e) {        modified=false;      }      if (!modified) {        c.setChanged(false);        c.test=copy.test;        logger.debug("Deleting failed");        continue;      }      c.setChanged(true);      if (isTimeoutReached()) {        logger.debug("Keeping original version due to timeout");        restoreTestCase(c,copy);        return;      }      if (!isWorse(fitnessFunction,copy,c)) {        logger.debug("Keeping shorter version");        changed=true;        break;      } else {        logger.debug("Keeping original version");        restoreTestCase(c,copy);      }    }  }  assert (fitnessFunction.isMaximizationFunction() ? fitnessFunction.getFitness(c) >= fitness : fitnessFunction.getFitness(c) <= fitness) : "Minimization worsened " + fitnessFunction.getClass().getName() + " fitness from "+ fitness+ " to "+ fitnessFunction.getFitness(c)+ " on test "+ c.getTestCase().toCode();  if (Properties.MINIMIZE_VALUES) {    logger.info("Minimizing values of test case");    ValueMinimizer minimizer=new ValueMinimizer();    minimizer.minimize(c,fitnessFunction);  }  assert ConstraintVerifier.verifyTest(c);  if (logger.isDebugEnabled()) {    logger.debug("Minimized test case: ");    logger.debug(c.test.toCode());  }}  }
class C{  private boolean doForwardSubstitution(){  if (!REDUNDANT_LOAD_ELIMINATION) {    return false;  }  XField xfield=loadedFieldSet.getField(handle);  if (xfield == null) {    return false;  }  if (xfield.getSignature().equals("D") || xfield.getSignature().equals("J")) {    return false;  }  if (!loadedFieldSet.isLoaded(xfield)) {    return false;  }  return true;}  }
class C{  public Personengruppen(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public boolean isClickable(){  return getBooleanProperty(BOOLEAN_PROPERTY_CLICKABLE);}  }
class C{  @Override public ObjectOutputStream createObjectOutputStream(OutputStream destination) throws IOException {  return new ObjectOutputStream(destination);}  }
class C{  public boolean poolRunning(){  if (checkForThreadAlive("tmmpool")) {    return true;  }  return false;}  }
class C{  public static Builder builder(){  return new Builder(new ConnectRequest());}  }
class C{  public EnvelopeWithGrid(Envelope e,int grid){  super(e);  this.grid=grid;}  }
class C{  public JBBPOut Bit(final boolean value) throws IOException {  assertNotEnded();  if (this.processCommands) {    this.outStream.writeBits(value ? 1 : 0,JBBPBitNumber.BITS_1);  }  return this;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @VisibleForTesting protected void populateThreeWayDiff(final Conflict conflict,final File conflictPath,final FilePath localPath,final ServerContext context,final ContentTriplet contentTriplet) throws VcsException {  TfsFileUtil.refreshAndFindFile(localPath);  IdeaHelper.setProgress(ProgressManager.getInstance().getProgressIndicator(),0.1,TfPluginBundle.message(TfPluginBundle.KEY_TFVC_CONFLICT_MERGE_ORIGINAL));  try {    if (conflictPath.isFile()) {      final PendingChange originalChange=CommandUtils.getStatusForFile(context,conflict.getLocalPath());      String original=null;      if (originalChange != null) {        if (isNameConflict(conflict)) {          final FilePath renamePath=VersionControlPath.getFilePath(conflict.getLocalPath(),conflictPath.isDirectory());          original=TFSContentRevision.createRenameRevision(project,context,renamePath,Integer.parseInt(originalChange.getVersion()),originalChange.getDate(),((RenameConflict)conflict).getOldPath()).getContent();        } else {          original=TFSContentRevision.create(project,context,localPath,Integer.parseInt(originalChange.getVersion()),originalChange.getDate()).getContent();        }      }      IdeaHelper.setProgress(ProgressManager.getInstance().getProgressIndicator(),0.5,TfPluginBundle.message(TfPluginBundle.KEY_TFVC_CONFLICT_MERGE_SERVER));      final String myLocalChanges=CurrentContentRevision.create(localPath).getContent();      final String serverChanges;      if (isNameConflict(conflict)) {        final ChangeSet serverChange=CommandUtils.getLastHistoryEntryForAnyUser(context,((RenameConflict)conflict).getServerPath());        final FilePath renamePath=VersionControlPath.getFilePath(conflict.getLocalPath(),conflictPath.isDirectory());        serverChanges=TFSContentRevision.createRenameRevision(project,context,renamePath,Integer.parseInt(serverChange.getId()),serverChange.getDate(),((RenameConflict)conflict).getServerPath()).getContent();      } else {        final ChangeSet serverChange=CommandUtils.getLastHistoryEntryForAnyUser(context,conflict.getLocalPath());        serverChanges=TFSContentRevision.create(project,context,localPath,Integer.parseInt(serverChange.getId()),serverChange.getDate()).getContent();      }      contentTriplet.baseContent=original != null ? original : StringUtils.EMPTY;      contentTriplet.localContent=myLocalChanges != null ? myLocalChanges : StringUtils.EMPTY;      contentTriplet.serverContent=serverChanges != null ? serverChanges : StringUtils.EMPTY;    }  } catch (  Exception e) {    logger.error("Error loading contents for files");    throw new VcsException(TfPluginBundle.message(TfPluginBundle.KEY_TFVC_CONFLICT_LOAD_FAILED,localPath.getPresentableUrl(),e.getMessage()));  }}  }
class C{  public void computeAxis(float yMin,float yMax){  if (mViewPortHandler.contentHeight() > 10 && !mViewPortHandler.isFullyZoomedOutX()) {    PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());    PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentRight(),mViewPortHandler.contentTop());    if (!mYAxis.isInverted()) {      yMin=(float)p1.x;      yMax=(float)p2.x;    } else {      yMin=(float)p2.x;      yMax=(float)p1.x;    }  }  computeAxisValues(yMin,yMax);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  private void testColSumsSquared(String testName,boolean sparse,boolean vector,boolean rewrites,ExecType platform){  boolean rewritesOld=OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION;  OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewrites;  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsity=sparse ? sparsity2 : sparsity1;int columns=vector ? 1 : cols;double[][] X=getRandomMatrix(rows,columns,-1,1,sparsity,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");if (rewrites && (platform == ExecType.SPARK || platform == ExecType.CP)) {String prefix=(platform == ExecType.SPARK) ? Instruction.SP_INST_PREFIX : "";String opcode=prefix + op;boolean rewriteApplied=Statistics.getCPHeavyHitterOpCodes().contains(opcode);if (vector) Assert.assertFalse("Rewrite applied to vector case.",rewriteApplied); else Assert.assertTrue("Rewrite not applied to matrix case.",rewriteApplied);}}  finally {OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewritesOld;rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  private void isUpdate(){  if (deviceHelper.isNetworkAvailable()) {    PostResult post=NetworkHelper.isUpdateAPK(getUpdateUrl(),getAppKey(),getChannel());    remoteService.callback(RemoteService.EVENT_UPDATE_APK,post);  }}  }
class C{  @Override public void followAgent(final IAgent a){  new Thread(null).start();}  }
class C{  protected void startClientConnections(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    doNodeConnect(n);  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  protected java.util.Date fromJulian(int julian){  YMD ymd=new YMD(julian);  GregorianCalendar cal=new GregorianCalendar(ymd.year,ymd.month - 1,ymd.day);  return cal.getTime();}  }
class C{  @RequestMapping(method=RequestMethod.GET) public String displayCategories(){  return "m_allCategories_def";}  }
class C{  public void addState(int[] specs,Animator animation,Animator.AnimatorListener listener){  Tuple tuple=new Tuple(specs,animation,listener);  animation.addListener(mAnimationListener);  mTuples.add(tuple);}  }
class C{  public void verifyTransactions() throws VerificationException {  if (transactions.isEmpty())   throw new VerificationException("Block had no transactions");  maybeParseTransactions();  if (this.getOptimalEncodingMessageSize() > MAX_BLOCK_SIZE)   throw new VerificationException("Block larger than MAX_BLOCK_SIZE");  checkTransactions();  checkMerkleRoot();  checkSigOps();  for (  Transaction transaction : transactions)   transaction.verify();}  }
class C{  @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.718 -0500",hash_original_method="ADA44CDEEADE302052A002E44C1889B1",hash_generated_method="25E987B9FCED8843878CDCB6E5ABFF02") @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Window theWindow=getWindow();  WindowManager.LayoutParams lp=theWindow.getAttributes();  lp.width=ViewGroup.LayoutParams.MATCH_PARENT;  lp.height=ViewGroup.LayoutParams.MATCH_PARENT;  lp.gravity=Gravity.TOP | Gravity.FILL_HORIZONTAL;  lp.softInputMode=WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;  theWindow.setAttributes(lp);  setCanceledOnTouchOutside(true);}  }
class C{  @Override public void openElement(String tagName,int index){  int count=0;  NodeList list=current.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if ((node instanceof Element) && ((Element)node).getTagName().equals(tagName)) {      if (count++ == index) {        current=node;        return;      }    }  }  throw new IllegalArgumentException("no such child " + tagName + "["+ index+ "]");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("X509CollectionStoreParameters: [\n");  sb.append("  collection: " + collection + "\n");  sb.append("]");  return sb.toString();}  }
class C{  private void validatePortAssignmentOnStorageSystems(Collection<URI> storageSystemURIs,ExportGroup exportGroup,List<URI> initiatorURIs,Collection<URI> volumes,ExportPathParameters pathParam){  if (exportGroup.forInitiator()) {    return;  }  for (  URI storageSystemURI : storageSystemURIs) {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);    if (storageSystem.getSystemType().equals(DiscoveredDataObject.Type.vplex.name())) {      List<URI> varrays=new ArrayList<URI>();      Map<URI,Set<URI>> varrayToVolumes=VPlexUtil.mapBlockObjectsToVarrays(_dbClient,volumes,storageSystemURI,exportGroup);      varrays.addAll(varrayToVolumes.keySet());      Map<URI,List<URI>> varrayToInitiatorsMap=VPlexUtil.partitionInitiatorsByVarray(_dbClient,_blockStorageScheduler,initiatorURIs,varrays,storageSystem);      int nValidations=0;      for (      URI varrayKey : varrays) {        if (varrayToInitiatorsMap.get(varrayKey) == null || varrayToInitiatorsMap.get(varrayKey).isEmpty()) {          continue;        }        List<Initiator> initiators=_dbClient.queryObject(Initiator.class,varrayToInitiatorsMap.get(varrayKey));        if (varrayToVolumes.get(varrayKey) != null) {          nValidations++;          Collection<String> initiatorAddresses=Collections2.transform(initiators,CommonTransformerFunctions.fctnInitiatorToPortName());          _log.info(String.format("Validating port assignments varray %s initiators %s",varrayKey.toString(),initiatorAddresses));          validatePortAssignment(storageSystem,varrayKey,_blockStorageScheduler,initiators,varrayToVolumes.get(varrayKey),exportGroup.getId(),pathParam);        }      }      if (nValidations == 0) {        _log.info("No validations made for VPlex port assignment");      }    } else {      List<Initiator> initiators=_dbClient.queryObject(Initiator.class,initiatorURIs);      URI varray=exportGroup.getVirtualArray();      Collection<String> initiatorAddresses=Collections2.transform(initiators,CommonTransformerFunctions.fctnInitiatorToPortName());      _log.info(String.format("Validating port assignments varray %s initiators %s",varray.toString(),initiatorAddresses));      validatePortAssignment(storageSystem,varray,_blockStorageScheduler,initiators,volumes,exportGroup.getId(),pathParam);    }  }}  }
class C{  public void update(float delta){  curTime_+=delta;  delta_=delta;}  }
class C{  @SuppressWarnings("rawtypes") public final int compareTo(E o){  Enum<?> other=(Enum<?>)o;  Enum<E> self=this;  if (self.getClass() != other.getClass() && self.getDeclaringClass() != other.getDeclaringClass())   throw new ClassCastException();  return self.ordinal - other.ordinal;}  }
class C{  public void hide(){  mFabExpandLayout.setVisibility(View.INVISIBLE);  mFabType=FAB_CIRCLE;}  }
class C{  @Override public void load(final Player admin,final List<String> args,final ScriptingSandbox sandbox){  if (admin == null) {    logger.error("herald called by null admin",new Throwable());  } else {    if (sandbox.getZone(admin).collides(admin.getX() + 1,admin.getY())) {      logger.info("Spot for placing herald is occupied.");      admin.sendPrivateText("Spot (right) near you is occupied, can't place herald here.");      return;    }    sandbox.setZone(admin.getZone());    sandbox.add(getHerald(sandbox.getZone(admin),admin.getX() + 1,admin.getY()));  }}  }
class C{  private boolean createInvoiceLine(int C_Invoice_ID,int C_InvoicePaySchedule_ID,int C_Currency_ID,BigDecimal GrandTotal,BigDecimal Open,int DaysDue,boolean IsInDispute,int C_BPartner_ID,int TimesDunned,int DaysAfterLast,int c_DunningLevel_ID){  MDunningRunEntry entry=null;  try {    entry=m_run.getEntry(C_BPartner_ID,p_C_Currency_ID,p_SalesRep_ID,c_DunningLevel_ID);  } catch (  BPartnerNoAddressException e) {    String msg="@Skip@ @C_Invoice_ID@ " + MInvoice.get(getCtx(),C_Invoice_ID).getDocumentInfo() + ", @C_BPartner_ID@ "+ MBPartner.get(getCtx(),C_BPartner_ID).getName()+ " @No@ @IsActive@ @C_BPartner_Location_ID@";    getProcessInfo().addLog(getProcessInfo().getAD_PInstance_ID(),null,null,msg);    return false;  }  if (entry.get_ID() == 0) {    if (!entry.save())     throw new IllegalStateException("Cannot save MDunningRunEntry");  }  MDunningRunLine line=new MDunningRunLine(entry);  line.setInvoice(C_Invoice_ID,C_Currency_ID,GrandTotal,Open,new BigDecimal(0),DaysDue,IsInDispute,TimesDunned,DaysAfterLast);  line.setC_InvoicePaySchedule_ID(C_InvoicePaySchedule_ID);  if (!line.save())   throw new IllegalStateException("Cannot save MDunningRunLine");  return true;}  }
class C{  void paintComponentBackground(Graphics g){  if (isFlatten()) {    return;  }  paintBackgroundImpl(g);}  }
class C{  protected int parseInt() throws IOException {  int sign=1;  int value=0;  int ch=skipWhitespace();  if (ch == '+')   ch=read(); else   if (ch == '-') {    sign=-1;    ch=read();  }  for (; ch >= '0' && ch <= '9'; ch=read())   value=10 * value + ch - '0';  peek=ch;  return sign * value;}  }
class C{  public GenericSipRtpSession createRtpSession(ContactId contact,String featureTag,String encoding){  if (sLogger.isActivated()) {    sLogger.info("Initiate a RTP session with contact " + contact);  }  return new OriginatingSipRtpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,encoding);}  }
class C{  public void update(String serverId) throws Exception {  CuratorFramework client=curatorFactory.clientInstance();  String atlasServerAddress=HAConfiguration.getBoundAddressForId(configuration,serverId);  HAConfiguration.ZookeeperProperties zookeeperProperties=HAConfiguration.getZookeeperProperties(configuration);  List<ACL> acls=Arrays.asList(new ACL[]{AtlasZookeeperSecurityProperties.parseAcl(zookeeperProperties.getAcl(),ZooDefs.Ids.OPEN_ACL_UNSAFE.get(0))});  Stat serverInfo=client.checkExists().forPath(getZnodePath(zookeeperProperties));  if (serverInfo == null) {    client.create().withMode(CreateMode.EPHEMERAL).withACL(acls).forPath(getZnodePath(zookeeperProperties));  }  client.setData().forPath(getZnodePath(zookeeperProperties),atlasServerAddress.getBytes(Charset.forName("UTF-8")));}  }
class C{  private static boolean isIntegral(JsonPrimitive primitive){  if (primitive.value instanceof Number) {    Number number=(Number)primitive.value;    return number instanceof BigInteger || number instanceof Long || number instanceof Integer|| number instanceof Short|| number instanceof Byte;  }  return false;}  }
class C{  public void redrawEntity(Entity entity){  redrawEntity(entity,null);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  getHandler().propertyChange(e);}  }
class C{  private Set<StoragePort> andNotStoragePorts(Set<StoragePort> a,Set<String> b){  Set<StoragePort> result=new HashSet<StoragePort>();  for (  StoragePort port : a) {    if (!b.contains(port.getPortNetworkId())) {      result.add(port);    }  }  return result;}  }
class C{  public ClockParser(boolean parseOffset){  super(false,false);  this.parseOffset=parseOffset;}  }
class C{  @Description(summary="Upload all build results to the public website.") public void uploadBuild(){  String password=System.getProperty("h2.ftpPassword");  if (password == null) {    throw new RuntimeException("h2.ftpPassword not set");  }  downloadTest();  mkdir("temp");  FileList files=files("src/tools").keep("*/UploadBuild.java");  StringList args=args("-d","temp","-sourcepath","src/tools" + File.pathSeparator + "src/test"+ File.pathSeparator+ "src/main");  String version=getTargetJavaVersion();  if (version != null) {    args=args.plus("-target",version,"-source",version);  }  javac(args,files);  String cp="bin" + File.pathSeparator + "temp"+ File.pathSeparator+ "ext/h2mig_pagestore_addon.jar";  execJava(args("-Xmx512m","-cp",cp,"-Dh2.ftpPassword=" + password,"org.h2.build.doc.UploadBuild"));}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));}  }
class C{  public static double determinant(DelaunayVertex[] matrix){  if (matrix.length != matrix[0].dimension()) {    throw new IllegalArgumentException("Matrix is not square");  }  boolean[] columns=new boolean[matrix.length];  for (int i=0; i < matrix.length; i++) {    columns[i]=true;  }  try {    return determinant(matrix,0,columns);  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException("Matrix is wrong shape");  }}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,long[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  public int size(){  return values.length;}  }
class C{  public void testBug77171() throws Exception {  String sqlMode=getMysqlVariable("sql_mode");  sqlMode=removeSqlMode("ANSI_QUOTES",sqlMode);  sqlMode=removeSqlMode("NO_BACKSLASH_ESCAPES",sqlMode);  String newSqlMode=sqlMode;  if (sqlMode.length() > 0) {    sqlMode+=",";  }  Properties props=new Properties();  props.put("sessionVariables","sql_mode='" + newSqlMode + "'");  Connection testConn=getConnectionWithProps(props);  assertFalse(((MySQLConnection)testConn).useAnsiQuotedIdentifiers());  assertFalse(((MySQLConnection)testConn).isNoBackslashEscapesSet());  testConn.close();  props.clear();  newSqlMode=sqlMode + "ANSI_QUOTES";  props.put("sessionVariables","sql_mode='" + newSqlMode + "'");  testConn=getConnectionWithProps(props);  assertTrue(((MySQLConnection)testConn).useAnsiQuotedIdentifiers());  assertFalse(((MySQLConnection)testConn).isNoBackslashEscapesSet());  testConn.close();  props.clear();  newSqlMode=sqlMode + "NO_BACKSLASH_ESCAPES";  props.put("sessionVariables","sql_mode='" + newSqlMode + "'");  testConn=getConnectionWithProps(props);  assertFalse(((MySQLConnection)testConn).useAnsiQuotedIdentifiers());  assertTrue(((MySQLConnection)testConn).isNoBackslashEscapesSet());  testConn.close();  props.clear();  newSqlMode=sqlMode + "ANSI_QUOTES,NO_BACKSLASH_ESCAPES";  props.put("sessionVariables","sql_mode='" + newSqlMode + "'");  testConn=getConnectionWithProps(props);  assertTrue(((MySQLConnection)testConn).useAnsiQuotedIdentifiers());  assertTrue(((MySQLConnection)testConn).isNoBackslashEscapesSet());  testConn.close();}  }
class C{  public AttributesImpl(){  length=0;  data=null;}  }
class C{  public ConstructorAccessor generateConstructor(Class<?> declaringClass,Class<?>[] parameterTypes,Class<?>[] checkedExceptions,int modifiers){  return (ConstructorAccessor)generate(declaringClass,"<init>",parameterTypes,Void.TYPE,checkedExceptions,modifiers,true,false,null);}  }
class C{  private void relax(MapNode node){  double nodeDist=distances.get(node);  for (  MapNode n : node.getNeighbors()) {    if (visited.contains(n)) {      continue;    }    if (okMapNodes != null && !n.isType(okMapNodes)) {      continue;    }    double nDist=nodeDist + getDistance(node,n);    if (distances.get(n) > nDist) {      prevNodes.put(n,node);      setDistance(n,nDist);    }  }}  }
class C{  public IndexSearcher(IndexReader r){  this(r,null);}  }
class C{  public String lookString(){switch (kind) {case NORMAL:    return "";case BACKWARD_ACTION:  return "LOOK_BACK";case FIXED_BASE:return "FIXED_BASE";case FIXED_LOOK:return "FIXED_LOOK";case FINITE_CHOICE:return "FINITE_CHOICE";case FORWARD_ACTION:return "LOOK_FORWARD";case GENERAL_LOOK:return "LOOK_ACTION";default :return "unknown lookahead type";}}  }
class C{  public ProtocolException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public CZoomTargetAction(final ZyGraph graph,final NaviEdge edge){  super("Zoom to Target Node");  Preconditions.checkNotNull(graph,"IE00965: Graph argument can't be null");  Preconditions.checkNotNull(edge,"IE00966: Edge argument can't be null");  m_graph=graph;  m_edge=edge;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private LUDecomposition lu(DoubleMatrix2D matrix){  return new LUDecomposition(matrix);}  }
class C{  public final void processMessage(ConsensusMessage msg){  Consensus consensus=executionManager.getConsensus(msg.getNumber());  consensus.lock.lock();  Epoch epoch=consensus.getEpoch(msg.getEpoch(),controller);switch (msg.getType()) {case MessageFactory.PROPOSE:{      proposeReceived(epoch,msg);    }  break;case MessageFactory.WRITE:{  writeReceived(epoch,msg.getSender(),msg.getValue());}break;case MessageFactory.ACCEPT:{acceptReceived(epoch,msg);}}consensus.lock.unlock();}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  super.buildClassifier(data);  cleanup(new Instances(data,0));  assignIDs(-1);}  }
class C{  public static double projectTimeWithin24Hours(double time){  double secondsInOneDay=60 * 60 * 24;  if (time == Double.NEGATIVE_INFINITY || time == Double.POSITIVE_INFINITY) {    DebugLib.stopSystemAndReportInconsistency("time is not allowed to be minus or plus infinity");  }  while (time < 0) {    time+=secondsInOneDay;  }  if (time < secondsInOneDay) {    return time;  } else {    return ((time / secondsInOneDay) - (Math.floor(time / secondsInOneDay))) * secondsInOneDay;  }}  }
class C{  public static boolean isAnnotation(int mod){  return (mod & ANNOTATION) != 0;}  }
class C{  private void readButtons(){  showContextValue=showContextButton.getSelection();  useSufficesValue=useSufficesButton.getSelection();  useCaseValue=useCaseButton.getSelection();  subexpressionValue=subexpressionButton.getSelection();}  }
class C{  public static void resetState() throws SQLException {  DbConnectionFactory dbConnectionFactory=getDbConnectionFactory();  ReplicationTestUtils.dropDatabase(dbConnectionFactory,DB_NAME);  AuditLogHookUtils.setupAuditLogTables(dbConnectionFactory,DB_NAME,AUDIT_LOG_TABLE_NAME,OUTPUT_OBJECTS_TABLE_NAME,MAP_RED_STATS_TABLE_NAME);}  }
class C{  public IgniteFutureTimeoutCheckedException(String msg){  super(msg);}  }
class C{  public void push(RatPoly p){  polys=new Cons(p,polys);  size++;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public boolean isEndDocument(){  return eventType == XMLStreamConstants.END_DOCUMENT;}  }
class C{  private JobDefinitionUpdateRequest createUpdateRequest(JobDefinitionCreateRequest createRequest){  JobDefinitionUpdateRequest updateRequest=new JobDefinitionUpdateRequest();  updateRequest.setDescription(createRequest.getDescription() + "2");  updateRequest.setActivitiJobXml(createRequest.getActivitiJobXml().replace("Unit Test","Unit Test 2"));  List<Parameter> parameters=new ArrayList<>();  updateRequest.setParameters(parameters);  Parameter parameter=new Parameter(ATTRIBUTE_NAME_2_MIXED_CASE,ATTRIBUTE_VALUE_2 + "2");  parameters.add(parameter);  parameter=new Parameter(ATTRIBUTE_NAME_3_MIXED_CASE,ATTRIBUTE_VALUE_3);  parameters.add(parameter);  return updateRequest;}  }
class C{  public boolean highlight(int row,int column){  XYPlot plot=getPlot();  OHLCDataset highLowData=(OHLCDataset)plot.getDataset();  int total_elements=highLowData.getItemCount(0);  boolean isLast=column == (total_elements - 1);  if (isLast) {    return true;  }  return false;}  }
class C{  public static AndroidHttpClient newInstance(String userAgent,Context context){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSoTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  Object sessionCache=null;  if (null != context && null != sSslSessionCacheClass) {    Constructor<?> ct;    try {      ct=sSslSessionCacheClass.getConstructor(Context.class);      sessionCache=ct.newInstance(context);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  SocketFactory sslCertificateSocketFactory=null;  if (null != sessionCache) {    Method getHttpSocketFactoryMethod;    try {      getHttpSocketFactoryMethod=SSLCertificateSocketFactory.class.getDeclaredMethod("getHttpSocketFactory",Integer.TYPE,sSslSessionCacheClass);      sslCertificateSocketFactory=(SocketFactory)getHttpSocketFactoryMethod.invoke(null,SOCKET_OPERATION_TIMEOUT,sessionCache);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  if (null == sslCertificateSocketFactory) {    sslCertificateSocketFactory=SSLSocketFactory.getSocketFactory();  }  schemeRegistry.register(new Scheme("https",sslCertificateSocketFactory,443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  public final double distance(IMovingAgent agent){  return distance(agent.getLocation());}  }
class C{  @Override public MemChunkHolder<BigDataPMemAllocator> createChunk(long size,boolean autoreclaim){  MemChunkHolder<BigDataPMemAllocator> ret=null;  Long addr=m_nvmasvc.allocate(m_nid,size,true);  if ((null == addr || 0 == addr) && m_activegc) {    forceGC();    addr=m_nvmasvc.allocate(m_nid,size,true);  }  if (null != addr && 0 != addr) {    ret=new MemChunkHolder<BigDataPMemAllocator>(this,addr,size);    ret.setCollector(m_chunkcollector);    if (autoreclaim) {      m_chunkcollector.register(ret);    }  }  return ret;}  }
class C{  protected String doIt() throws Exception {  log.info("AD_User_ID=" + p_AD_User_ID + " from "+ getAD_User_ID());  MUser user=MUser.get(getCtx(),p_AD_User_ID);  MUser operator=MUser.get(getCtx(),getAD_User_ID());  log.fine("User=" + user + ", Operator="+ operator);  if (Util.isEmpty(p_OldPassword)) {    if (p_AD_User_ID == 0 || p_AD_User_ID == 100 || !operator.isAdministrator())     throw new IllegalArgumentException("@OldPasswordMandatory@");  } else   if (!user.authenticateHash(p_OldPassword) && !p_OldPassword.equals(user.getPassword()))   throw new IllegalArgumentException("@OldPasswordNoMatch@");  if (p_AD_User_ID == 0) {    user.setPassword(p_NewPassword);    String sql="UPDATE AD_User SET Updated=SysDate, UpdatedBy=" + getAD_User_ID();    if (!Util.isEmpty(p_NewPassword)) {      sql+=", Password=" + DB.TO_STRING(MColumn.isEncrypted(417) ? SecureEngine.encrypt(user.getPassword()) : user.getPassword());      sql+=", Salt=" + DB.TO_STRING(user.getSalt());    }    if (!Util.isEmpty(p_NewEMail))     sql+=", Email=" + DB.TO_STRING(p_NewEMail);    if (!Util.isEmpty(p_NewEMailUser))     sql+=", EmailUser=" + DB.TO_STRING(p_NewEMailUser);    if (!Util.isEmpty(p_NewEMailUserPW))     sql+=", EmailUserPW=" + DB.TO_STRING(p_NewEMailUserPW);    sql+=" WHERE AD_User_ID=0";    if (DB.executeUpdate(sql,get_TrxName()) == 1)     return "OK"; else     return "@Error@";  } else {    if (!Util.isEmpty(p_NewPassword))     user.setPassword(p_NewPassword);    if (!Util.isEmpty(p_NewEMail))     user.setEMail(p_NewEMail);    if (!Util.isEmpty(p_NewEMailUser))     user.setEMailUser(p_NewEMailUser);    if (!Util.isEmpty(p_NewEMailUserPW))     user.setEMailUserPW(p_NewEMailUserPW);    if (user.save())     return "OK"; else     return "@Error@";  }}  }
class C{  public static float normalize(float val,float minVal,float maxVal){  if (val < minVal || val > maxVal)   throw new IllegalArgumentException("Value must be between min and max values. [val, min, max]: [" + val + ","+ minVal+ ", "+ maxVal+ "]");  return (val - minVal) / (maxVal - minVal);}  }
class C{  public void destroyPresenters(){  for (  RosiePresenter presenter : presenters) {    presenter.destroy();  }}  }
class C{  public CPOrmLoader(Context context,Select<Model> select,int cacheSize){  this(context,select);  enableCursorCache(cacheSize);}  }
class C{  private int nextChunk() throws IOException {  if (finalized) {    return -1;  }  bufOff=0;  maxBuf=0;  while (maxBuf == 0) {    int read=in.read(inBuf);    if (read == -1) {      finaliseCipher();      if (maxBuf == 0) {        return -1;      }      return maxBuf;    }    try {      ensureCapacity(read,false);      if (bufferedBlockCipher != null) {        maxBuf=bufferedBlockCipher.processBytes(inBuf,0,read,buf,0);      } else       if (aeadBlockCipher != null) {        maxBuf=aeadBlockCipher.processBytes(inBuf,0,read,buf,0);      } else {        streamCipher.processBytes(inBuf,0,read,buf,0);        maxBuf=read;      }    } catch (    Exception e) {      throw new CipherIOException("Error processing stream ",e);    }  }  return maxBuf;}  }
class C{  private Cache createCache() throws CacheException {  return new CacheFactory().set(MCAST_PORT,"0").create();}  }
class C{  public XYCombinedChartDef(String type,int... seriesIndex){  this.type=type;  this.seriesIndex=seriesIndex;}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedNumber(null,SVG_X_ATTRIBUTE,0f);  y=createLiveAnimatedNumber(null,SVG_Y_ATTRIBUTE,0f);  z=createLiveAnimatedNumber(null,SVG_Z_ATTRIBUTE,0f);}  }
class C{  public static long nanoTime(){  return java.lang.System.nanoTime();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.158 -0500",hash_original_method="8867B6CA9EB8DB8DAA3F991D7B0AD5D9",hash_generated_method="1651370205F0B14DD8D601CDE34C8D81") public CallInfoHeader createCallInfoHeader(URI callInfo){  if (callInfo == null)   throw new NullPointerException("null arg callInfo");  CallInfo c=new CallInfo();  c.setInfo(callInfo);  return c;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SageRenderer renderEngine=stack.getUIMgrSafe().getRootPanel().getRenderEngine();  if (renderEngine instanceof DirectX9SageRenderer)   return ((DirectX9SageRenderer)renderEngine).getVideoSnapshot(); else   return null;}  }
class C{  public boolean isRepeatable(){  return this.getContent() == null || this.getContent().markSupported();}  }
class C{  public DellSCDriverTask(String taskType){  super(String.format("dellsc-%s-%s",taskType,UUID.randomUUID()));}  }
class C{  public String toString(){  final StringBuilder sb=new StringBuilder();  final Type type=getParameterizedType();  final String typename=type.getTypeName();  sb.append(Modifier.toString(getModifiers()));  if (0 != modifiers)   sb.append(' ');  if (isVarArgs())   sb.append(typename.replaceFirst("\\[\\]$","...")); else   sb.append(typename);  sb.append(' ');  sb.append(getName());  return sb.toString();}  }
class C{  public CounterGenerator(int countstart){  counter=countstart;  setLastInt(countstart - 1);}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  @Override public boolean nextKeyValue() throws IOException {  if (!scannerIterator.hasNext())   return false;  Entry<Key,Value> entry=scannerIterator.next();  ++numKeysRead;  currentKey=entry.getKey();  try {    currentK=currentKey.getRow();    RyaStatement stmt=this.ryaContext.deserializeTriple(this.tableLayout,new TripleRow(entry.getKey().getRow().getBytes(),entry.getKey().getColumnFamily().getBytes(),entry.getKey().getColumnQualifier().getBytes(),entry.getKey().getTimestamp(),entry.getKey().getColumnVisibility().getBytes(),entry.getValue().get()));    RyaStatementWritable writable=new RyaStatementWritable();    writable.setRyaStatement(stmt);    currentV=writable;  } catch (  TripleRowResolverException e) {    throw new IOException(e);  }  return true;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public CoordinateSequenceComparator(int dimensionLimit){  this.dimensionLimit=dimensionLimit;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec07(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  private void initialize(boolean isRtlContext){  mIsRtlContext=isRtlContext;  mTextDirectionHeuristic=DEFAULT_TEXT_DIRECTION_HEURISTIC;  mFlags=DEFAULT_FLAGS;}  }
class C{  private synchronized boolean sampleCpuUtilization(){  long lastSeenMaxFreq=0;  long cpuFreqCurSum=0;  long cpuFreqMaxSum=0;  if (!initialized) {    init();  }  if (cpusPresent == 0) {    return false;  }  actualCpusPresent=0;  for (int i=0; i < cpusPresent; i++) {    curFreqScales[i]=0;    if (cpuFreqMax[i] == 0) {      long cpufreqMax=readFreqFromFile(maxPath[i]);      if (cpufreqMax > 0) {        Log.d(TAG,"Core " + i + ". Max frequency: "+ cpufreqMax);        lastSeenMaxFreq=cpufreqMax;        cpuFreqMax[i]=cpufreqMax;        maxPath[i]=null;      }    } else {      lastSeenMaxFreq=cpuFreqMax[i];    }    long cpuFreqCur=readFreqFromFile(curPath[i]);    if (cpuFreqCur == 0 && lastSeenMaxFreq == 0) {      continue;    }    if (cpuFreqCur > 0) {      actualCpusPresent++;    }    cpuFreqCurSum+=cpuFreqCur;    cpuFreqMaxSum+=lastSeenMaxFreq;    if (lastSeenMaxFreq > 0) {      curFreqScales[i]=(double)cpuFreqCur / lastSeenMaxFreq;    }  }  if (cpuFreqCurSum == 0 || cpuFreqMaxSum == 0) {    Log.e(TAG,"Could not read max or current frequency for any CPU");    return false;  }  double currentFrequencyScale=cpuFreqCurSum / (double)cpuFreqMaxSum;  if (frequencyScale.getCurrent() > 0) {    currentFrequencyScale=(frequencyScale.getCurrent() + currentFrequencyScale) * 0.5;  }  ProcStat procStat=readProcStat();  if (procStat == null) {    return false;  }  long diffUserTime=procStat.userTime - lastProcStat.userTime;  long diffSystemTime=procStat.systemTime - lastProcStat.systemTime;  long diffIdleTime=procStat.idleTime - lastProcStat.idleTime;  long allTime=diffUserTime + diffSystemTime + diffIdleTime;  if (currentFrequencyScale == 0 || allTime == 0) {    return false;  }  frequencyScale.addValue(currentFrequencyScale);  double currentUserCpuUsage=diffUserTime / (double)allTime;  userCpuUsage.addValue(currentUserCpuUsage);  double currentSystemCpuUsage=diffSystemTime / (double)allTime;  systemCpuUsage.addValue(currentSystemCpuUsage);  double currentTotalCpuUsage=(currentUserCpuUsage + currentSystemCpuUsage) * currentFrequencyScale;  totalCpuUsage.addValue(currentTotalCpuUsage);  lastProcStat=procStat;  return true;}  }
class C{  public static byte[] toIPv4AddressBytes(int ipAddress){  return new byte[]{(byte)(ipAddress >>> 24),(byte)(ipAddress >>> 16),(byte)(ipAddress >>> 8),(byte)ipAddress};}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.594 -0500",hash_original_method="B9174D052A2AFCDDC5C88393A2D6AF07",hash_generated_method="93C05A9EFE7836DF946A7635EBAB7C31") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentLanguageParser.parse");  ContentLanguageList list=new ContentLanguageList();  try {    headerName(TokenTypes.CONTENT_LANGUAGE);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      ContentLanguage cl=new ContentLanguage(token.getTokenValue());      this.lexer.SPorHT();      list.add(cl);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        this.lexer.SPorHT();        token=lexer.getNextToken();        cl=new ContentLanguage(token.getTokenValue());        this.lexer.SPorHT();        list.add(cl);      }    }    return list;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentLanguageParser.parse");  }}  }
class C{  public MJournal reverseAccrualIt(int GL_JournalBatch_ID){  log.info(toString());  MJournal reverse=new MJournal(this);  reverse.setGL_JournalBatch_ID(GL_JournalBatch_ID);  reverse.setDateDoc(new Timestamp(System.currentTimeMillis()));  reverse.set_ValueNoCheck("C_Period_ID",null);  reverse.setDateAcct(reverse.getDateDoc());  String description=reverse.getDescription();  if (description == null)   description="** " + getDocumentNo() + " **"; else   description+=" ** " + getDocumentNo() + " **";  reverse.setDescription(description);  if (!reverse.save())   return null;  reverse.copyLinesFrom(this,reverse.getDateAcct(),'R');  setProcessed(true);  setDocAction(DOCACTION_None);  return reverse;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void reportHeartbeatResult(boolean isLive){  if (isLive) {    reportHeartbeatSuccess();  } else {    reportHeartbeatFailure();  }}  }
class C{  @Override public void handleEvent(final ActivityEndEvent event){  if (!(event.getActType().startsWith("h") || event.getActType().startsWith("tta"))) {    Id facilityId=event.getFacilityId();    this.facilityPenalties.get(facilityId).getFacilityLoad().addDeparture(event.getTime());  }}  }
class C{  private int allocateContiguousChunks(int pages){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(metaDataPagesPerRegion == 0 || pages <= PAGES_IN_CHUNK - metaDataPagesPerRegion);  int rtn=GenericFreeList.FAILURE;  int requiredChunks=Space.requiredChunks(pages);  Address region=space.growDiscontiguousSpace(requiredChunks);  if (VERBOSE) {    Log.write("flpr.allocateContiguousChunks(");    Log.write(pages);    Log.write("): region=");    Log.writeln(region);  }  if (!region.isZero()) {    int regionStart=Conversions.bytesToPages(region.diff(start));    int regionEnd=regionStart + (requiredChunks * PAGES_IN_CHUNK) - 1;    freeList.setUncoalescable(regionStart);    freeList.setUncoalescable(regionEnd + 1);    for (int p=regionStart; p < regionEnd; p+=PAGES_IN_CHUNK) {      int liberated;      if (p != regionStart)       freeList.clearUncoalescable(p);      liberated=freeList.free(p,true);      if (liberated != PAGES_IN_CHUNK + (p - regionStart)) {        Log.write("flpr: liberated ");        Log.write(liberated);        Log.write(" pages, expected ");        Log.writeln(PAGES_IN_CHUNK + (p - regionStart));      }      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(liberated == PAGES_IN_CHUNK + (p - regionStart));      if (metaDataPagesPerRegion > 1) {        freeList.alloc(metaDataPagesPerRegion,p);      }      pagesCurrentlyOnFreeList+=PAGES_IN_CHUNK - metaDataPagesPerRegion;    }    rtn=freeList.alloc(pages);  }  return rtn;}  }
class C{  public boolean isUniform(){  return (m_clustertype == SubspaceCluster.TOTAL_UNIFORM);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n;  int numFeatures;  int oneHundredthTotal;  int startingPointInPart, endingPointInPart;  double[][] vertices;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=shapeType;    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    for (    ShapeFileRecord record : input.records) {switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPoly=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPoly.getPoints();    if (recPoly.getNumberOfHoles() == 0) {      output.addRecord(recPoly);    } else {      whitebox.geospatialfiles.shapefile.Polygon recPolygonOutput=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int numParts=recPoly.getNumParts() - recPoly.getNumberOfHoles();      int[] outParts=new int[numParts];      int[] inParts=recPoly.getParts();      int numPoints=recPoly.getNumPoints();      int numPartsIn=recPoly.getNumParts();      boolean[] isHole=recPoly.getPartHoleData();      int outPartNum=0;      for (int part=0; part < inParts.length; part++) {        if (!isHole[part]) {          outParts[outPartNum]=pnts.size();          startingPointInPart=inParts[part];          if (part < numPartsIn - 1) {            endingPointInPart=inParts[part + 1];          } else {            endingPointInPart=numPoints;          }          for (int p=startingPointInPart; p < endingPointInPart; p++) {            pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));          }          outPartNum++;        }      }      PointsList pl=new PointsList(pnts);      whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(outParts,pl.getPointsArray());      output.addRecord(wbPoly);    }  break;case POLYGONZ:PolygonZ recPolyZ=(PolygonZ)(record.getGeometry());vertices=recPolyZ.getPoints();if (recPolyZ.getNumberOfHoles() == 0) {output.addRecord(recPolyZ);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();int numParts=recPolyZ.getNumParts() - recPolyZ.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyZ.getParts();int numPoints=recPolyZ.getNumPoints();int numPartsIn=recPolyZ.getNumParts();boolean[] isHole=recPolyZ.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  outParts[outPartNum]=pnts.size();  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));  }  outPartNum++;}}PointsList pl=new PointsList(pnts);double[] zArray=recPolyZ.getzArray();double[] zArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    zArrayOut[j]=zArray[p];    j++;  }}}double[] mArray=recPolyZ.getmArray();double[] mArrayOut=new double[pnts.size()];j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {  startingPointInPart=inParts[part];  if (part < numPartsIn - 1) {    endingPointInPart=inParts[part + 1];  } else {    endingPointInPart=numPoints;  }  for (int p=startingPointInPart; p < endingPointInPart; p++) {    mArrayOut[j]=mArray[p];    j++;  }}}PolygonZ wbPoly=new PolygonZ(outParts,pl.getPointsArray(),zArrayOut,mArrayOut);output.addRecord(wbPoly);}break;case POLYGONM:PolygonM recPolyM=(PolygonM)(record.getGeometry());vertices=recPolyM.getPoints();if (recPolyM.getNumberOfHoles() == 0) {output.addRecord(recPolyM);} else {ArrayList<ShapefilePoint> pnts=new ArrayList<>();int numParts=recPolyM.getNumParts() - recPolyM.getNumberOfHoles();int[] outParts=new int[numParts];int[] inParts=recPolyM.getParts();int numPoints=recPolyM.getNumPoints();int numPartsIn=recPolyM.getNumParts();boolean[] isHole=recPolyM.getPartHoleData();int outPartNum=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {outParts[outPartNum]=pnts.size();startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {pnts.add(new ShapefilePoint(vertices[p][0],vertices[p][1]));}outPartNum++;}}PointsList pl=new PointsList(pnts);double[] mArray=recPolyM.getmArray();double[] mArrayOut=new double[pnts.size()];int j=0;for (int part=0; part < inParts.length; part++) {if (!isHole[part]) {startingPointInPart=inParts[part];if (part < numPartsIn - 1) {endingPointInPart=inParts[part + 1];} else {endingPointInPart=numPoints;}for (int p=startingPointInPart; p < endingPointInPart; p++) {mArrayOut[j]=mArray[p];j++;}}}PolygonM wbPoly=new PolygonM(outParts,pl.getPointsArray(),mArrayOut);output.addRecord(wbPoly);}break;}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public String globalInfo(){  return "Class for generating a pruned or unpruned C4.5 decision tree. For more " + "information, see\n\n" + getTechnicalInformation().toString();}  }
class C{  public Object writeReplace(){  return null;}  }
class C{  @NotNull public static PyRequirement fromStringGuaranteed(@NotNull final String line){  final PyRequirement requirement=fromString(line);  if (requirement == null) {    throw new IllegalArgumentException("Failed to parse " + line);  }  return requirement;}  }
class C{  public static void startDialActivityWithSimCheck(Context context,String phone){  if (isTelephonyEnabled(context)) {    Intent intent=new Intent(Intent.ACTION_DIAL);    intent.setData(Uri.parse("tel:" + clearPhoneText(phone)));    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(intent);  }}  }
class C{  private String viewReceipts(final boolean printReceipts){  if (selectedReceipts == null || selectedReceipts.length == 0)   throw new ApplicationRuntimeException("No receipts selected to view!");  receipts=new ReceiptHeader[selectedReceipts.length];  for (int i=0; i < selectedReceipts.length; i++)   try {    receipts[i]=receiptHeaderService.findById(selectedReceipts[i],false);  } catch (  final Exception e) {    LOGGER.error("Error in printReceipts",e);  }  try {    reportId=collectionCommon.generateReport(receipts,printReceipts);  } catch (  final Exception e) {    final String errMsg="Error during report generation!";    LOGGER.error(errMsg,e);    throw new ApplicationRuntimeException(errMsg,e);  }  return CollectionConstants.REPORT;}  }
class C{  public BoundingBox inf(){  min.set(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY);  max.set(Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  cnt.set(0,0,0);  dim.set(0,0,0);  crn_dirty=true;  return this;}  }
class C{  protected void onBluetoothEnabled(){}  }
class C{  public ActivateWindow(String window){  super();  addParameterToRequest("window",window);}  }
class C{  public LanguageRange(String range){  this.range=range.split("-");  full=range;}  }
class C{  public void testCacheBehaviour(){  Image img=null;  Sprite image0=new ImageSprite(img,0xf00f);  Sprite image1=new ImageSprite(img,0x0ff0);  List<Sprite> slaves=new LinkedList<Sprite>();  slaves.add(image0);  slaves.add(image1);  SpriteCache cache=new SpriteCache();  Sprite result=CompositeSprite.getComposite(cache,slaves,null,null);  assertTrue(result instanceof CompositeSprite);  assertEquals(0xffff,result.getReference().hashCode());  slaves.clear();  slaves.add(image0);  slaves.add(new EmptySprite(32,32,"plugh"));  slaves.add(image1);  Sprite result2=CompositeSprite.getComposite(cache,slaves,null,null);  assertTrue(result2 instanceof CompositeSprite);  assertTrue(result == result2);}  }
class C{  private List<Class<?>> findClassesForUris(List<URI> baseUris,String basePackageName,Predicate<Class<?>> classFilter,Predicate<String> classNameFilter){  return baseUris.stream().map(null).flatMap(null).distinct().collect(toList());}  }
class C{  public void addChild(Node child){  childrenList.add(child);  children.put(child.getClassName(),child);  child.setParent(this);}  }
class C{  TypeVariable typeVariable(Local local){  TypeVariable result=typeVariableMap.get(local);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this);    typeVariableList.set(id,result);    typeVariableMap.put(local,result);    if (DEBUG) {      G.v().out.println("[LOCAL VARIABLE \"" + local + "\" -> "+ id+ "]");    }  }  return result;}  }
class C{  @SuppressWarnings("unused") private GameOptionsXML(){}  }
class C{  public static final void addListener(AccelDeviceEventListener l,int screen){  getInstance(true).add(l,screen);}  }
class C{  @Override public void pan(double percent){  Range range=getRange();  double lower=range.getLowerBound();  double upper=range.getUpperBound();  double log1=calculateLog(lower);  double log2=calculateLog(upper);  double length=log2 - log1;  double adj=length * percent;  log1=log1 + adj;  log2=log2 + adj;  setRange(calculateValueNoINF(log1),calculateValueNoINF(log2));}  }
class C{  public boolean isFrontendPort(){  return PortRole.FRONTEND.getRoleName().equals(role);}  }
class C{  private void checkStrategyOptions() throws ConnectionException {  KeyspaceDefinition kd=clientContext.getCluster().describeKeyspace(_keyspaceName);  Map<String,String> strategyOptions=kd.getStrategyOptions();  _log.info("Current strategyOptions={}",strategyOptions);  boolean changed=false;  changed|=onStandby ? checkStrategyOptionsForDROnStandby(strategyOptions) : checkStrategyOptionsForDROnActive(strategyOptions);  changed|=checkStrategyOptionsForGeo(strategyOptions);  if (changed) {    _log.info("strategyOptions changed to {}",strategyOptions);    clientContext.setCassandraStrategyOptions(strategyOptions,true);  }}  }
class C{  protected static void extractSelectedScreenAsImage(final Values commonValues,final GUIFactory currentGUI,final PdfDecoderInt decode_pdf){  int t_x1=commonValues.m_x1;  int t_x2=commonValues.m_x2;  int t_y1=commonValues.m_y1;  int t_y2=commonValues.m_y2;  if (commonValues.m_y1 < commonValues.m_y2) {    t_y2=commonValues.m_y1;    t_y1=commonValues.m_y2;  }  if (commonValues.m_x1 > commonValues.m_x2) {    t_x2=commonValues.m_x1;    t_x1=commonValues.m_x2;  }  snapShot=decode_pdf.getSelectedRectangleOnscreen(t_x1,t_y1,t_x2,t_y2,100 * currentGUI.getScaling());}  }
class C{  @Override public boolean next() throws SQLException {  if (source != null) {    rowId++;    currentRow=source.readRow();    if (currentRow != null) {      return true;    }  } else   if (rows != null && rowId < rows.size()) {    rowId++;    if (rowId < rows.size()) {      currentRow=rows.get(rowId);      return true;    }    currentRow=null;  }  if (autoClose) {    close();  }  return false;}  }
class C{  public void reset(){  currentState=resetState;}  }
class C{  public static void solve(Reader reader) throws IOException {  solve(new TSPInstance(reader));}  }
class C{  public boolean evaluate(InternalContextAdapter context) throws MethodInvocationException {  Node left=jjtGetChild(0);  Node right=jjtGetChild(1);  if (left == null || right == null) {    rsvc.error((left == null ? "Left" : "Right") + " side of '&&' operation is null." + " Operation not possible. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return false;  }  if (left.evaluate(context)) {    if (right.evaluate(context)) {      return true;    }  }  return false;}  }
class C{  public void deleteFileTransfer(String transferId) throws RemoteException {  if (TextUtils.isEmpty(transferId)) {    throw new ServerApiIllegalArgumentException("transferId must not be null or empty!");  }  mImService.tryToDeleteFileTransfer(transferId);}  }
class C{  @Override public void pullUpToLoadmore(){}  }
class C{  @Override protected Object privateExecuteIn(final IScope scope){  final ChartDataSet graphdataset=(ChartDataSet)scope.getVarValue(ChartLayerStatement.CHARTDATASET);  final ChartDataSourceUnique data=createDataSource(scope,graphdataset);  graphdataset.addDataSource(data);  return data;}  }
class C{  private PartitionKeyGroupEntity createPartitionKeyGroupEntity(PartitionKeyGroupCreateRequest request){  PartitionKeyGroupEntity partitionKeyGroupEntity=new PartitionKeyGroupEntity();  partitionKeyGroupEntity.setPartitionKeyGroupName(request.getPartitionKeyGroupKey().getPartitionKeyGroupName());  return partitionKeyGroupEntity;}  }
class C{  public void testDoConfigureSetsDefaultAdminServer() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"//weblogic:admin-server-name",config);}  }
class C{  @Override protected void doAction(){  try {    DNewKeyStoreType dNewKeyStoreType=new DNewKeyStoreType(frame);    dNewKeyStoreType.setLocationRelativeTo(frame);    dNewKeyStoreType.setVisible(true);    KeyStoreType keyStoreType=dNewKeyStoreType.getKeyStoreType();    if (keyStoreType == null) {      return;    }    KeyStore newKeyStore=KeyStoreUtil.create(keyStoreType);    untitledCount++;    String untitled=MessageFormat.format(res.getString("NewAction.Untitled"),untitledCount);    kseFrame.addKeyStore(newKeyStore,untitled,null,null);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  @Override public Throwable initCause(Throwable cause){  return super.initCause(cause);}  }
class C{  private void checkTxsNotEmpty(GridCacheContext ctx,int exp){  int size=ctx.tm().txs().size();  assertEquals("Some transactions were salvaged unexpectedly",exp,size);}  }
class C{  public ClearRecentFilesMenuAction(Application app){  super(app);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);  updateEnabled();}  }
class C{  private static int calculateDelayForSuccess(){  float errorPercent=VARIANCE_PCT / 100f;  float lowerBound=1f - errorPercent;  float upperBound=1f + errorPercent;  float bound=upperBound - lowerBound;  float delayPercent=(random.nextFloat() * bound) + lowerBound;  return (int)(DELAY_MS * delayPercent);}  }
class C{  public boolean needSplit(){  if (splitFull1) {    return !(this.children == null || this.children.size() <= 2 * this.order1);  } else {    return !(this.children == null || this.children.size() <= 2 * this.order1 || this.value.isFull());  }}  }
class C{  public void popRTFContext(){  int previous=m_last_pushed_rtfdtm.pop();  if (null == m_rtfdtm_stack)   return;  if (m_which_rtfdtm == previous) {    if (previous >= 0) {      boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(previous))).popRewindMark();    }  } else   while (m_which_rtfdtm != previous) {    boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(m_which_rtfdtm))).popRewindMark();    --m_which_rtfdtm;  }}  }
class C{  @RequestMapping(value="/businessObjectData/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}" + "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/subPartition2Values/{subPartition2Value}"+ "/subPartition3Values/{subPartition3Value}/subPartition4Values/{subPartition4Value}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_DELETE) public BusinessObjectData deleteBusinessObjectData(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("subPartition4Value") String subPartition4Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestParam("deleteFiles") Boolean deleteFiles){  return businessObjectDataService.deleteBusinessObjectData(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value,subPartition4Value),businessObjectDataVersion),deleteFiles);}  }
class C{  public void export(Context context){  Intent intent=new Intent(context,ExportService.class);  intent.putExtra(ExportService.ARG_EXPORT_TRACK_ID,mId);  intent.putExtra(ExportService.ARG_EXPORT_URI,mUri.toString());  intent.putExtra(ExportService.ARG_EXPORT_PATH,mPath);  context.startService(intent);}  }
class C{  @Override public boolean equals(PLIImage image){  if (image.getBitmap() == mBitmap)   return true;  if (image.getBitmap() == null || mBitmap == null || image.getHeight() != mHeight || image.getWidth() != mWidth)   return false;  ByteBuffer bits=image.getBits();  ByteBuffer _bits=this.getBits();  for (int i=0; i < this.getCount(); i++) {    if (bits.get() != _bits.get())     return false;  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI="http://www.w3.org/DOM/Test/Level2";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("_:");  qualifiedNames.add(":0a");  qualifiedNames.add(":");  qualifiedNames.add("a:b:c");  qualifiedNames.add("_::a");  doc=(Document)load("staffNS",false);  for (int indexN1004E=0; indexN1004E < qualifiedNames.size(); indexN1004E++) {    qualifiedName=(String)qualifiedNames.get(indexN1004E);{      try {        attribute=doc.createAttributeNS(namespaceURI,qualifiedName);        fail("documentcreateattributeNS04");      } catch (      DOMException expected) {      }    }  }}  }
class C{  @SuppressWarnings("deprecation") private Job createConfigBasedHadoopJob() throws IOException {  Job jobCfg=new Job();  Configuration cfg=jobCfg.getConfiguration();  cfg.addResource(U.resolveIgniteUrl(DFS_CFG));  jobCfg.setJobName("HadoopPopularWordExample");  jobCfg.setJarByClass(HadoopPopularWordsTest.class);  jobCfg.setInputFormatClass(TextInputFormat.class);  jobCfg.setOutputKeyClass(Text.class);  jobCfg.setOutputValueClass(IntWritable.class);  jobCfg.setMapperClass(TokenizingMapper.class);  jobCfg.setReducerClass(TopNWordsReducer.class);  FileInputFormat.setInputPaths(jobCfg,BOOKS_DFS_DIR);  FileOutputFormat.setOutputPath(jobCfg,RESULT_DFS_DIR);  if ("local".equals(cfg.get("mapred.job.tracker","local"))) {    FileInputFormat.setMinInputSplitSize(jobCfg,32 * 1024 * 1024);    FileInputFormat.setMaxInputSplitSize(jobCfg,Long.MAX_VALUE);  }  return jobCfg;}  }
class C{  public CentralServiceMessage(){  requestFileName="simple-centralservice.query";  responseFile="simple-centralservice.answer";}  }
class C{  protected void calcFormats(){  int bonus=0;  if (!mRoundedYLegend)   bonus++;  if (mYLegendDigitsToUse == -1) {    if (mYLegend.length < 3) {      mYLegendFormatDigits=Utils.getLegendFormatDigits(1,bonus);    } else {      mYLegendFormatDigits=Utils.getLegendFormatDigits(mYLegend[2] - mYLegend[1],bonus);    }  } else   mYLegendFormatDigits=mYLegendDigitsToUse;  if (mValueDigitsToUse == -1)   mValueFormatDigits=Utils.getFormatDigits(mDeltaY); else   mValueFormatDigits=mValueDigitsToUse;  StringBuffer a=new StringBuffer();  for (int i=0; i < mYLegendFormatDigits; i++) {    if (i == 0)     a.append(".");    a.append("0");  }  mFormatAverage=new DecimalFormat("###,###,###,##0.#");  mFormatYLegend=new DecimalFormat("###,###,###,##0" + a.toString());  StringBuffer b=new StringBuffer();  for (int i=0; i < mValueFormatDigits; i++) {    if (i == 0)     b.append(".");    b.append("0");  }  mFormatValue=new DecimalFormat("###,###,###,##0" + b.toString());}  }
class C{  @Override public void nodeChanged(){  log.info("Trust store changed. renewing the trust manager " + defaultViPRTrustManager);  loadTrustManager();}  }
class C{  public void removeBounds(AxisAlignedBB... boundingBoxes){  for (  AxisAlignedBB boundingBox : boundingBoxes) {    this.boundingBoxes.remove(boundingBox);  }}  }
class C{  public static Feature conjunct(String left,String right){  return DiscreteFeature.create(left + "&" + right);}  }
class C{  @Field(9) public cl_image_desc buffer(cl_mem buffer){  this.io.setPointerField(this,9,buffer);  return this;}  }
class C{  public ProcessListener(String[] launchCommand,Process process,ILaunchNotification launchNotification,boolean forDebugging,boolean isAIRapp){  m_launchCommand=launchCommand;  m_process=process;  m_launchNotification=launchNotification;  m_isDebugging=forDebugging;  m_isAIRapp=isAIRapp;  m_processMessages=new StringWriter();  m_isRunLaunch=false;  startMessageListener();}  }
class C{  public Swarm(boolean debugBootstrap) throws Exception {  this(debugBootstrap,new String[]{});}  }
class C{  public static SelectorExtractor selector(String query,int eq,String outType){  return new SelectorExtractor(query,eq,outType);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  protected PolicyAuditor(){}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void addCyclicFunction(String functionRef,double[] c0,double[] c1,double[] dom) throws IOException {  PDFStream function=pdf.openStream(functionRef);  function.entry("FunctionType",4);  function.entry("Domain",dom);  function.entry("Range",new double[]{0.,1.,0.,1.,0.,1.});  function.println("{");  for (int i=0; i < 3; i++) {    if (i < 2)     function.println("dup");    function.println((c1[i] - c0[i]) + " mul");    function.println(c0[i] + " add");    if (i < 2)     function.println("exch");  }  function.println("}");  pdf.close(function);}  }
class C{  public static String normalize(CharSequence src,Form form){  return NativeNormalizer.normalize(src,form);}  }
class C{  public int read() throws java.io.IOException {  return 0;}  }
class C{  public static void bind(This ths,NameSpace namespace,Interpreter declaringInterpreter){  ths.namespace.setParent(namespace);  ths.declaringInterpreter=declaringInterpreter;}  }
class C{  public static boolean isSyntheticInit(JCTree stat){  if (stat.hasTag(EXEC)) {    JCExpressionStatement exec=(JCExpressionStatement)stat;    if (exec.expr.hasTag(ASSIGN)) {      JCAssign assign=(JCAssign)exec.expr;      if (assign.lhs.hasTag(SELECT)) {        JCFieldAccess select=(JCFieldAccess)assign.lhs;        if (select.sym != null && (select.sym.flags() & SYNTHETIC) != 0) {          Name selected=name(select.selected);          if (selected != null && selected == selected.table.names._this)           return true;        }      }    }  }  return false;}  }
class C{  public static org.oscm.vo.VOSubscriptionDetails convertToApi(org.oscm.internal.vo.VOSubscriptionDetails oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOSubscriptionDetails newVO=new org.oscm.vo.VOSubscriptionDetails();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setServiceId(oldVO.getServiceId());  newVO.setServiceKey(oldVO.getServiceKey());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setCreationDate(oldVO.getCreationDate());  newVO.setDeactivationDate(oldVO.getDeactivationDate());  newVO.setServiceAccessInfo(oldVO.getServiceAccessInfo());  newVO.setServiceAccessType(EnumConverter.convert(oldVO.getServiceAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setServiceBaseURL(oldVO.getServiceBaseURL());  newVO.setServiceLoginPath(oldVO.getServiceLoginPath());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.SubscriptionStatus.class));  newVO.setServiceInstanceId(oldVO.getServiceInstanceId());  newVO.setTimeoutMailSent(oldVO.isTimeoutMailSent());  newVO.setPurchaseOrderNumber(oldVO.getPurchaseOrderNumber());  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setProvisioningProgress(oldVO.getProvisioningProgress());  newVO.setNumberOfAssignedUsers(oldVO.getNumberOfAssignedUsers());  newVO.setSellerName(oldVO.getSellerName());  newVO.setTechnicalServiceOperations(convertToApiVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setUsageLicenses(convertToVOUsageLicense(oldVO.getUsageLicenses()));  newVO.setPriceModel(convertToApi(oldVO.getPriceModel()));  newVO.setSubscribedService(convertToApi(oldVO.getSubscribedService()));  newVO.setBillingContact(convertToApi(oldVO.getBillingContact()));  newVO.setPaymentInfo(convertToApi(oldVO.getPaymentInfo()));  newVO.setOwnerId(oldVO.getOwnerId());  newVO.setUnitKey(oldVO.getUnitKey());  newVO.setUnitName(oldVO.getUnitName());  return newVO;}  }
class C{  public synchronized String generateCallIdentifier(String address){  String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong());  byte cid[]=digester.digest(date.getBytes());  String cidString=Utils.toHexString(cid);  return cidString + "@" + address;}  }
class C{  public boolean removeAll(ObjectArrayList other,boolean testForEquality){  if (other.size == 0)   return false;  int limit=other.size - 1;  int j=0;  Object[] theElements=elements;  for (int i=0; i < size; i++) {    if (other.indexOfFromTo(theElements[i],0,limit,testForEquality) < 0)     theElements[j++]=theElements[i];  }  boolean modified=(j != size);  setSize(j);  return modified;}  }
class C{  private Object readResolve(){  return INSTANCE;}  }
class C{  public void focusPreviousComponent(Component aComponent){  if (aComponent != null) {    aComponent.transferFocusBackward();  }}  }
class C{  public void startUpdate(Environment env,Context ctx,Assembler asm,boolean valNeeded){  if (!(getter.isStatic() && setter.isStatic())) {    throw new CompilerError("startUpdate isStatic");  }  if (!field.isStatic()) {    base.codeValue(env,ctx,asm);    depth=1;  } else {    if (base != null) {      base.code(env,ctx,asm);    }    depth=0;  }  codeDup(asm,depth,0);  asm.add(where,opc_invokestatic,getter);  if (valNeeded) {    codeDup(asm,field.getType().stackSize(),depth);  }}  }
class C{  private static void didNotStart(String name){  System.err.println("Warning: An operation ended on " + name + " but it never started!");}  }
class C{  void sendClose(MultiplexConnectionInfo info) throws IOException {  info.out.disconnect();synchronized (dataOut) {    if (alive && !info.closed)     try {      dataOut.writeByte(CLOSE);      dataOut.writeShort(info.id);      dataOut.flush();      info.closed=true;    } catch (    IOException e) {      multiplexLog.log(Log.BRIEF,"exception: ",e);      shutDown();      throw e;    }  }}  }
class C{  public void debug(String format,Object arg){  formatAndLog(Log.DEBUG,format,arg);}  }
class C{  public List<NamedRelatedResourceRep> list(String provisioningType,Boolean uniqueNames){  UriBuilder builder=client.uriBuilder(baseUrl);  if ((provisioningType != null) && (provisioningType.length() > 0)) {    builder.queryParam("provisioning_type",provisioningType);  }  if (uniqueNames != null) {    builder.queryParam("unique_auto_tier_policy_names",uniqueNames);  }  return getList(builder.build());}  }
class C{  void appendEndElement(){  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,NULL);  previousSibling=currentParent;  nodes.readSlot(currentParent,gotslot);  currentParent=gotslot[1] & 0xFFFF;  previousSiblingWasParent=true;}  }
class C{  public static int[][] discretiseMaxEntropy(double data[][],int numBins){  int lastCol=data[0].length;  int lastRow=data.length;  int[][] newData=new int[lastRow][lastCol];  for (int j=0; j < lastCol; j++) {    double[] tempData=new double[lastRow];    for (int i=0; i < lastRow; i++) {      tempData[i]=data[i][j];    }    Arrays.sort(tempData);    int compartmentSize;    double[] cutOffValues=new double[numBins];    for (int i=0; i < numBins; i++) {      compartmentSize=(int)((double)(i + 1) * (double)(lastRow) / (double)numBins) - 1;      cutOffValues[i]=tempData[compartmentSize];    }    for (int i=0; i < lastRow; i++) {      for (int m=0; m < numBins; m++) {        if (data[i][j] <= cutOffValues[m]) {          newData[i][j]=m;          m=numBins;        }      }    }  }  return newData;}  }
class C{  private Chunk readChunkFooter(long end){  try {    ByteBuffer lastBlock=fileStore.readFully(end - Chunk.FOOTER_LENGTH,Chunk.FOOTER_LENGTH);    byte[] buff=new byte[Chunk.FOOTER_LENGTH];    lastBlock.get(buff);    String s=new String(buff,DataUtils.LATIN).trim();    HashMap<String,String> m=DataUtils.parseMap(s);    int check=DataUtils.readHexInt(m,"fletcher",0);    m.remove("fletcher");    s=s.substring(0,s.lastIndexOf("fletcher") - 1);    byte[] bytes=s.getBytes(DataUtils.LATIN);    int checksum=DataUtils.getFletcher32(bytes,bytes.length);    if (check == checksum) {      int chunk=DataUtils.readHexInt(m,"chunk",0);      Chunk c=new Chunk(chunk);      c.version=DataUtils.readHexLong(m,"version",0);      c.block=DataUtils.readHexLong(m,"block",0);      return c;    }  } catch (  Exception e) {  }  return null;}  }
class C{  @Override public void postInitializeMapKey(MappedKeyMapContainerPolicy policy){  return;}  }
class C{  public IResource[] members(final IResource resource){  Check.notNull(resource,"resource");  final List<IResource> members=memberMap.get(resource);  if (members == null) {    return new IResource[0];  }  return members.toArray(new IResource[members.size()]);}  }
class C{  @Override public void write(DataOutput out) throws IOException {  this.check();  out.writeInt(this.size());  for (  Writable item : this) {    item.write(out);  }}  }
class C{  @Override public IBinder onBind(Intent arg){  return mBinder;}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public Pair whichCatchableAs(RefType catcher){  if (INSTRUMENTING) {    Manager.v().removesOfAnySubType++;  }  FastHierarchy h=Scene.v().getOrMakeFastHierarchy();  Set caughtIncluded=null;  Set caughtExcluded=null;  Set uncaughtIncluded=null;  Set uncaughtExcluded=null;  if (INSTRUMENTING) {    Manager.v().removesFromSearch++;  }  for (Iterator i=exceptionsExcluded.iterator(); i.hasNext(); ) {    AnySubType exclusion=(AnySubType)i.next();    RefType exclusionBase=exclusion.getBase();    if (h.canStoreType(catcher,exclusionBase)) {      return new Pair(ThrowableSet.Manager.v().EMPTY,this);    } else     if (h.canStoreType(exclusionBase,catcher)) {      caughtExcluded=addExceptionToSet(exclusion,caughtExcluded);    } else {      uncaughtExcluded=addExceptionToSet(exclusion,uncaughtExcluded);    }  }  for (Iterator i=exceptionsIncluded.iterator(); i.hasNext(); ) {    RefLikeType inclusion=(RefLikeType)i.next();    if (inclusion instanceof RefType) {      if (h.canStoreType(inclusion,catcher)) {        caughtIncluded=addExceptionToSet(inclusion,caughtIncluded);      } else {        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);      }    } else {      RefType base=((AnySubType)inclusion).getBase();      if (h.canStoreType(base,catcher)) {        caughtIncluded=addExceptionToSet(inclusion,caughtIncluded);      } else       if (h.canStoreType(catcher,base)) {        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);        uncaughtExcluded=addExceptionToSet(AnySubType.v(catcher),uncaughtExcluded);        caughtIncluded=addExceptionToSet(AnySubType.v(catcher),caughtIncluded);      } else {        uncaughtIncluded=addExceptionToSet(inclusion,uncaughtIncluded);      }    }  }  ThrowableSet caughtSet=Manager.v().registerSetIfNew(caughtIncluded,caughtExcluded);  ThrowableSet uncaughtSet=Manager.v().registerSetIfNew(uncaughtIncluded,uncaughtExcluded);  return new Pair(caughtSet,uncaughtSet);}  }
class C{  private void checkDownloadCanProceed() throws StopRequestException {  if (clock.intervalLessThan(Clock.Interval.ONE_SECOND)) {    return;  }  clock.startInterval();  checkIsPausedOrCanceled();  checkClientRules();}  }
class C{  @Override public boolean hasNext(){  return (index < array.length);}  }
class C{  public DOMCanonicalizationMethod(TransformService spi) throws InvalidAlgorithmParameterException {  super(spi);  if (!(spi instanceof ApacheCanonicalizer) && !isC14Nalg(spi.getAlgorithm())) {    throw new InvalidAlgorithmParameterException("Illegal CanonicalizationMethod");  }}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  protected void checkAndRemove(Node n,boolean replace){  checkChildType(n,replace);  if (isReadonly())   throw createDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,"readonly.node",new Object[]{new Integer(getNodeType()),getNodeName()});  if (n.getOwnerDocument() != getCurrentDocument())   throw createDOMException(DOMException.WRONG_DOCUMENT_ERR,"node.from.wrong.document",new Object[]{new Integer(getNodeType()),getNodeName()});  if (this == n)   throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,"add.self",new Object[]{getNodeName()});  Node np=n.getParentNode();  if (np == null)   return;  for (Node pn=this; pn != null; pn=pn.getParentNode()) {    if (pn == n)     throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,"add.ancestor",new Object[]{new Integer(getNodeType()),getNodeName()});  }  np.removeChild(n);}  }
class C{  public static byte[] toByteArray(File file) throws IOException {  return asByteSource(file).read();}  }
class C{  public void write(char buf[],int off,int len){  try {synchronized (lock) {      ensureOpen();      out.write(buf,off,len);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  final public int nscan(){  return nscan;}  }
class C{  public void playWeek(){  if (currentWeek <= 12) {    for (int i=0; i < conferences.size(); ++i) {      conferences.get(i).playWeek();    }  }  if (currentWeek == 12) {    for (int i=0; i < teamList.size(); ++i) {      teamList.get(i).updatePollScore();    }    Collections.sort(teamList,new TeamCompPoll());    schedBowlGames();  } else   if (currentWeek == 13) {    ArrayList<Player> heismans=getHeisman();    heismanHistory.add(heismans.get(0).position + " " + heismans.get(0).getInitialName()+ " ["+ heismans.get(0).getYrStr()+ "], "+ heismans.get(0).team.abbr+ " ("+ heismans.get(0).team.wins+ "-"+ heismans.get(0).team.losses+ ")");    playBowlGames();  } else   if (currentWeek == 14) {    ncg.playGame();    if (ncg.homeScore > ncg.awayScore) {      ncg.homeTeam.semiFinalWL="";      ncg.awayTeam.semiFinalWL="";      ncg.homeTeam.natChampWL="NCW";      ncg.awayTeam.natChampWL="NCL";      ncg.homeTeam.totalNCs++;      ncg.awayTeam.totalNCLosses++;      newsStories.get(15).add(ncg.homeTeam.name + " wins the National Championship!>" + ncg.homeTeam.strRep()+ " defeats "+ ncg.awayTeam.strRep()+ " in the national championship game "+ ncg.homeScore+ " to "+ ncg.awayScore+ "."+ " Congratulations "+ ncg.homeTeam.name+ "!");    } else {      ncg.homeTeam.semiFinalWL="";      ncg.awayTeam.semiFinalWL="";      ncg.awayTeam.natChampWL="NCW";      ncg.homeTeam.natChampWL="NCL";      ncg.awayTeam.totalNCs++;      ncg.homeTeam.totalNCLosses++;      newsStories.get(15).add(ncg.awayTeam.name + " wins the National Championship!>" + ncg.awayTeam.strRep()+ " defeats "+ ncg.homeTeam.strRep()+ " in the national championship game "+ ncg.awayScore+ " to "+ ncg.homeScore+ "."+ " Congratulations "+ ncg.awayTeam.name+ "!");    }  }  setTeamRanks();  updateLongestActiveWinStreak();  if (blessDevelopingStory) {switch (blessDevelopingCase) {case 1:      if (blessDevelopingWeek == currentWeek) {        if (findTeamAbbr(saveBless.abbr).rankTeamPollScore > 49) {          newsStories.get(blessDevelopingWeek + 1).add(saveBless.name + " Still Thirsty For Wins>Despite the much talked about launch of their new Sport Enhancement Drink, " + saveBless.name+ " still find themselves struggling to make the most of the talent available to them and break free from the bottom of the polls. With their eyes set on improvement in the years to come, all "+ saveBless.abbr+ " fans can do now is weather the drought.");        } else         if (findTeamAbbr(saveBless.abbr).rankTeamPollScore < 41 && findTeamAbbr(saveBless.abbr).rankTeamPollScore > 20) {          newsStories.get(blessDevelopingWeek + 1).add("Success a Refreshing Change for " + saveBless.name + ">On the heels of a successful first week of sales for their new Sports Enhancement Drink, "+ saveBless.name+ "'s has much to celebrate as they seem to have found the light at the end of the tunnel. In less than a season, the program's fortunes have turned, both financially and in the polls, begging the question: What are they putting in those sports drinks?");        } else         if (findTeamAbbr(saveBless.abbr).rankTeamPollScore <= 20) {          newsStories.get(blessDevelopingWeek + 1).add(saveBless.name + " Being Propelled to New Heights>In the middle of a football season that is smashing all expectations, " + saveBless.name+ " is managing to smash a few sales records, as well. Crediting both realms of success to the school's Sports Nutrition program, Athletic Director "+ getRandName()+ " praised the work of the program's graduate researchers in developing a world class sport enhancement drink, while also announcing the product's expansion into two new flavors.");        }      }    break;default :  break;}}if (curseDevelopingStory) {switch (curseDevelopingCase) {case 1:Player srCurseTeam;if (saveCurse.teamSRs.size() > 0) srCurseTeam=saveCurse.teamSRs.get(0); else srCurseTeam=saveCurse.teamQBs.get(0);if (curseDevelopingWeek == currentWeek) {newsStories.get(curseDevelopingWeek + 1).add(saveCurse.name + " Hazing Scandal Update>After last week's report on the " + saveCurse.name+ " hazing scandal, the college football world waited to see what punishments would be handed out to "+ srCurseTeam.name+ " and other implicated but unnamed players. With Week 1 officially in the books we have an answer: Nothing. Based on the final fall practice depth chart, no players missed playing time or starting status ("+ srCurseTeam.name.replace("*. ","")+ " played every down he was available for). Coach "+ storyLastName+ " has remained silent on the issue.");} else if (curseDevelopingWeek + 1 == currentWeek) {if (Math.random() < .5) {newsStories.get(curseDevelopingWeek + 2).add("No Punishment for Group in Hazing Scandal>Last week, it was reported that " + saveCurse.name + " Head Coach "+ storyFullName+ " had not commented on the hazing scandal that resulted in lost recruits for the program. Today, "+ storyLastName+ " revealed that this was no mistake, and that there will be no punishment for those involved. In a brief statement released today by the program, "+ storyLastName+ " is quoted as saying that he considers this matter closed and that he believes the public scrutiny "+ srCurseTeam.name+ " faced after admitting to being the ringleader of the hazing group was \"punishment enough.\"");} else {newsStories.get(curseDevelopingWeek + 2).add("Punishment Announced for " + saveCurse.name + " Upperclassmen>In a statement released through its Athletics Department today, "+ saveCurse.name+ " Head Coach "+ storyFullName+ " announced that he had spoken with each member of the team privately and determined who the upperclassmen responsible for the over-the-top hazing occurring within the program were. Not wishing to draw further scrutiny to individual players, "+ storyLastName+ " stated that the group of players would be responsible for identifying the best way to give back to the local community and carrying out whatever volunteer work was necessary to see the project through to completion.");}}break;case 2:if (curseDevelopingWeek == currentWeek) {PlayerQB cursedQB;PlayerWR cursedWR;PlayerWR cursedWR2;PlayerWR cursedWR3;if (saveCurse.gameSchedule.get(0).homeTeam == saveCurse) {cursedQB=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).homeTeam.getQB(0);cursedWR=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).homeTeam.getWR(0);cursedWR2=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).homeTeam.getWR(1);cursedWR3=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).homeTeam.getWR(2);} else {cursedQB=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).awayTeam.getQB(0);cursedWR=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).awayTeam.getWR(0);cursedWR2=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).awayTeam.getWR(1);cursedWR3=findTeamAbbr(saveCurse.abbr).gameSchedule.get(0).awayTeam.getWR(2);}if (100 * cursedQB.statsPassComp / Math.max(1,cursedQB.statsPassAtt) > 60 && cursedWR.statsTargets > cursedWR2.statsTargets && cursedWR.statsTargets > cursedWR3.statsTargets) {if (findTeam((saveCurse.abbr)).wins == 0) {newsStories.get(curseDevelopingWeek + 1).add(saveCurse.name + " Locker Room Scuffle Affects Week 1 Performance>Despite managing to find their sync after a locker room altercation last week, quarterback " + cursedQB.name+ " and wide receiver "+ cursedWR.name+ " still left a lasting negative impression in the minds and performance of their teammates. "+ cursedQB.name+ "'s "+ cursedQB.statsPassYards+ " yards and "+ cursedWR.name+ "'s "+ cursedWR.statsReceptions+ " receptions could not bring the rest of the team out of the funk that eventually saw them drop their season opener.");break;} else {newsStories.get(curseDevelopingWeek + 1).add("Water Under the Bridge at " + saveCurse.name + ">"+ saveCurse.name+ " didn't appear to remember the locker room altercation from last week nor the media attention it garnered as "+ cursedQB.name+ " threw for "+ cursedQB.statsPassYards+ " yards and "+ cursedWR.name+ " caught "+ cursedWR.statsReceptions+ " balls to help lift "+ saveCurse.name+ " in their season opener. "+ cursedQB.name.replaceAll(".* ","")+ " still looked to his favorite target more than any other receiver, but all is still not perfectly well within the program.");break;}} else if (100 * cursedQB.statsPassComp / Math.max(1,cursedQB.statsPassAtt) > 59) {newsStories.get(curseDevelopingWeek + 1).add("Team Unrest Continues at " + saveCurse.name + ">Quarterback "+ cursedQB.name+ " looked good in his season opener, throwing "+ cursedQB.statsPassComp+ " completions for "+ cursedQB.statsPassYards+ " yards, primarily to receivers not named "+ cursedWR.name+ ". Sources within the program have remained quiet since last week's locker room scuffle between the once tight QB-WR duo, but one thing is clear: "+ cursedQB.name.replaceAll(".* ","")+ " has not forgotten.");break;} else if (100 * cursedQB.statsPassComp / Math.max(1,cursedQB.statsPassAtt) > 44 && 100 * cursedQB.statsPassComp / Math.max(1,cursedQB.statsPassAtt) < 60) {String winOrLoss;if (findTeam((saveCurse.abbr)).wins == 0) winOrLoss="loss"; else winOrLoss="win";newsStories.get(curseDevelopingWeek + 1).add(cursedQB.name + " a Non-Factor in Season Opener>On the heels of a locker room fight that dominated national media and brought the leadership capabilities of the " + saveCurse.name+ " coaching staff into question, starting quarterback "+ cursedQB.name+ " opened his season without much fanfare. Or much of anything. "+ cursedQB.name.replaceAll(".* ","")+ " threw for "+ cursedQB.statsPassYards+ " yards on "+ cursedQB.statsPassComp+ " for "+ cursedQB.statsPassAtt+ " passing, managing to look perfectly average in a season opening "+ winOrLoss+ ".");break;} else {if (findTeam((saveCurse.abbr)).wins == 0) {newsStories.get(curseDevelopingWeek + 1).add(cursedQB.name + " Fails to Find Rhythm in Season Opener>Just over a week after reports surfaced of a locker room fight between " + saveCurse.name+ " quarterback "+ cursedQB.name+ " and his favorite target, wide receiver "+ cursedWR.name+ ", the two are back in the media spotlight for a lackluster performance in a season opening loss. Looking visibly disoriented and confused at times, "+ cursedQB.name.replaceAll(".* ","")+ " went just "+ cursedQB.statsPassComp+ " for "+ cursedQB.statsPassAtt+ " passing, and failed to achieve any consistency in a losing effort.");break;} else {newsStories.get(curseDevelopingWeek + 1).add(saveCurse.name + " Manage a Win Despite Poor QB Play>Appearing to still be caught up in the locker room drama of last week, " + cursedQB.name+ " had to get by with a little help from his friends. Going "+ cursedQB.statsPassComp+ " for "+ cursedQB.statsPassAtt+ " while looking lost at times, "+ cursedQB.name.replaceAll(".* ","")+ "'s performance left a lot to be desired. Still, the damage done was not enough to surrender a loss, and "+ saveCurse.name+ " marches into Week 2 with a 1-0 record.");break;}}}break;default :break;}}currentWeek++;}  }
class C{  public static Test suite(){  return (new TestSuite(ResourceBundleELResolverITCase.class));}  }
class C{  public final boolean isSameType(PrimitiveInfo that){  return this.kind == that.kind;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VERSIONS;default :return null;}}  }
class C{  private String createWorkflowStepForDetachMirror(Workflow workflow,StorageSystem vplexSystem,Volume vplexVolume,URI mirrorVolumeURI,String stepId,String waitFor,Workflow.Method rollbackMethod){  URI vplexURI=vplexSystem.getId();  URI vplexVolumeURI=vplexVolume.getId();  Workflow.Method detachMirrorMethod=createDetachMirrorMethod(vplexURI,vplexVolumeURI,mirrorVolumeURI,vplexVolume.getConsistencyGroup());  workflow.createStep(DETACH_MIRROR_STEP,String.format("Detach mirror %s for VPLEX volume %s on system %s",mirrorVolumeURI,vplexVolumeURI,vplexURI),waitFor,vplexURI,vplexSystem.getSystemType(),this.getClass(),detachMirrorMethod,rollbackMethod,stepId);  _log.info("Created workflow step to detach mirror {} from volume {}",mirrorVolumeURI,vplexVolumeURI);  return DETACH_MIRROR_STEP;}  }
class C{  public SyncMessage(SyncMessage other){  if (other.isSetType()) {    this.type=other.type;  }  if (other.isSetHello()) {    this.hello=new HelloMessage(other.hello);  }  if (other.isSetError()) {    this.error=new ErrorMessage(other.error);  }  if (other.isSetEchoRequest()) {    this.echoRequest=new EchoRequestMessage(other.echoRequest);  }  if (other.isSetEchoReply()) {    this.echoReply=new EchoReplyMessage(other.echoReply);  }  if (other.isSetGetRequest()) {    this.getRequest=new GetRequestMessage(other.getRequest);  }  if (other.isSetGetResponse()) {    this.getResponse=new GetResponseMessage(other.getResponse);  }  if (other.isSetPutRequest()) {    this.putRequest=new PutRequestMessage(other.putRequest);  }  if (other.isSetPutResponse()) {    this.putResponse=new PutResponseMessage(other.putResponse);  }  if (other.isSetDeleteRequest()) {    this.deleteRequest=new DeleteRequestMessage(other.deleteRequest);  }  if (other.isSetDeleteResponse()) {    this.deleteResponse=new DeleteResponseMessage(other.deleteResponse);  }  if (other.isSetSyncValue()) {    this.syncValue=new SyncValueMessage(other.syncValue);  }  if (other.isSetSyncValueResponse()) {    this.syncValueResponse=new SyncValueResponseMessage(other.syncValueResponse);  }  if (other.isSetSyncOffer()) {    this.syncOffer=new SyncOfferMessage(other.syncOffer);  }  if (other.isSetSyncRequest()) {    this.syncRequest=new SyncRequestMessage(other.syncRequest);  }  if (other.isSetFullSyncRequest()) {    this.fullSyncRequest=new FullSyncRequestMessage(other.fullSyncRequest);  }  if (other.isSetCursorRequest()) {    this.cursorRequest=new CursorRequestMessage(other.cursorRequest);  }  if (other.isSetCursorResponse()) {    this.cursorResponse=new CursorResponseMessage(other.cursorResponse);  }  if (other.isSetRegisterRequest()) {    this.registerRequest=new RegisterRequestMessage(other.registerRequest);  }  if (other.isSetRegisterResponse()) {    this.registerResponse=new RegisterResponseMessage(other.registerResponse);  }  if (other.isSetClusterJoinRequest()) {    this.clusterJoinRequest=new ClusterJoinRequestMessage(other.clusterJoinRequest);  }  if (other.isSetClusterJoinResponse()) {    this.clusterJoinResponse=new ClusterJoinResponseMessage(other.clusterJoinResponse);  }}  }
class C{  protected Instance mergeInstances(Instance source,Instance dest){  Instances outputFormat=outputFormatPeek();  double[] vals=new double[outputFormat.numAttributes()];  for (int i=0; i < vals.length; i++) {    if ((i != outputFormat.classIndex()) && (m_SelectedCols.isInRange(i))) {      if (source != null) {        vals[i]=source.value(i);      } else {        vals[i]=Utils.missingValue();      }    } else {      vals[i]=dest.value(i);    }  }  Instance inst=null;  if (dest instanceof SparseInstance) {    inst=new SparseInstance(dest.weight(),vals);  } else {    inst=new DenseInstance(dest.weight(),vals);  }  inst.setDataset(dest.dataset());  return inst;}  }
class C{  public void testConstrStringWithExponentWithPoint5(){  String a="238096483923847545735673567457356356789029.5784902768787678287E+21";  int aScale=-2;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void testSupportedDeployableTypes(){  testSupportedDeployableType(DeployableType.FILE);  testSupportedDeployableType(DeployableType.WAR);  testSupportedDeployableType(DeployableType.RAR);  testSupportedDeployableType(DeployableType.EJB);  testSupportedDeployableType(DeployableType.EAR);}  }
class C{  private byte[] writeCheckedBytes(MessageNano proto){  CheckedMessage wrapper=new CheckedMessage();  wrapper.payload=MessageNano.toByteArray(proto);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  wrapper.checksum=checksum.getValue();  return MessageNano.toByteArray(wrapper);}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  if (extns == null) {    return false;  }  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);  return !extns.isEmpty();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (getClass() != obj.getClass()) {    return false;  }  BaseObj b=(BaseObj)obj;  return mID == b.mID;}  }
class C{  public PnSignalingParams(MediaConstraints pcConstraints,MediaConstraints videoConstraints,MediaConstraints audioConstraints){  this.iceServers=PnSignalingParams.defaultIceServers();  this.pcConstraints=(pcConstraints == null) ? defaultPcConstraints() : pcConstraints;  this.videoConstraints=(videoConstraints == null) ? defaultVideoConstraints() : videoConstraints;  this.audioConstraints=(audioConstraints == null) ? defaultAudioConstraints() : audioConstraints;}  }
class C{  public GetDirectory(String directory,ListType.Sort sort_params){  super();  addParameterToRequest("directory",directory);  addParameterToRequest(SORT_NODE,sort_params.toJsonNode());}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  protected Object createElementInfo(){  return new CompilationUnitElementInfo();}  }
class C{  public CompassFormat(String n,String e,String s,String w){  this(new String[]{n,n + n + e,n + e,e + n + e,e,e + s + e,s + e,s + s + e,s,s + s + w,s + w,w + s + w,w,w + n + w,n + w,n + n + w});}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  paint.setStyle(Style.FILL);  drawCircle(canvas,paint,x + SHAPE_WIDTH,y,3);}  }
class C{  public static Font[] loadFont(File file) throws IOException {  return loadFont(file,true);}  }
class C{  public Bundle(int capacity){  mMap=new HashMap<String,Object>(capacity);  mClassLoader=getClass().getClassLoader();}  }
class C{  public static String toJSONString(Map map){  final StringWriter writer=new StringWriter();  try {    writeJSONString(map,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public TwoDNode parent(IPoint value){  if (value == null) {    throw new IllegalArgumentException("unable to insert null value into TwoDTree");  }  if (root == null)   return null;  TwoDNode node=root;  TwoDNode next;  while (node != null) {    if (node.isBelow(value)) {      next=node.getBelow();      if (next == null) {        break;      } else {        node=next;      }    } else {      next=node.getAbove();      if (next == null) {        break;      } else {        node=next;      }    }  }  return node;}  }
class C{  public Validate(){  this(true);}  }
class C{  public void endAdding(GL10 gl){  checkState(STATE_ADDING,STATE_INITIALIZED);  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);  GLUtils.texImage2D(GL10.GL_TEXTURE_2D,0,mBitmap,0);  mBitmap.recycle();  mBitmap=null;  mCanvas=null;}  }
class C{  @Deprecated static private String normalizeEndpoint(final String serviceEndpoint){  if (serviceEndpoint.endsWith("/sparql")) {    return serviceEndpoint.substring(0,serviceEndpoint.length() - "/sparql".length());  }  if (serviceEndpoint.endsWith("/sparql/")) {    return serviceEndpoint.substring(0,serviceEndpoint.length() - "/sparql/".length());  } else   if (serviceEndpoint.endsWith("/" + Config.BLAZEGRAPH_PATH + "/")) {    return serviceEndpoint.substring(0,serviceEndpoint.length() - 1);  } else   if (serviceEndpoint.endsWith("/" + Config.BLAZEGRAPH_PATH)) {    return serviceEndpoint;  } else   if (serviceEndpoint.contains("/" + Config.BLAZEGRAPH_PATH) && serviceEndpoint.endsWith("/")) {    return serviceEndpoint.substring(0,serviceEndpoint.length() - 1);  } else   if (serviceEndpoint.contains("/" + Config.BLAZEGRAPH_PATH)) {    return serviceEndpoint;  } else   if (serviceEndpoint.endsWith("/")) {    return serviceEndpoint + Config.BLAZEGRAPH_PATH;  } else {    return serviceEndpoint + "/" + Config.BLAZEGRAPH_PATH;  }}  }
class C{  public void advance(@NotNull FoldRegion foldRegion,int collapsedSymbolsWidthInColumns){  String placeholder=foldRegion.getPlaceholderText();  visualColumn+=placeholder.length();  offset=foldRegion.getEndOffset();  Document document=myEditor.getDocument();  int endOffsetLogicalLine=document.getLineNumber(foldRegion.getEndOffset());  if (logicalLine == endOffsetLogicalLine) {    if (collapsedSymbolsWidthInColumns < 0) {      collapsedSymbolsWidthInColumns=SoftWrapModelImpl.getEditorTextRepresentationHelper(myEditor).toVisualColumnSymbolsNumber(foldRegion.getStartOffset(),foldRegion.getEndOffset(),x);    }    logicalColumn+=collapsedSymbolsWidthInColumns;    foldingColumnDiff+=placeholder.length() - collapsedSymbolsWidthInColumns;  } else {    if (collapsedSymbolsWidthInColumns < 0) {      collapsedSymbolsWidthInColumns=SoftWrapModelImpl.getEditorTextRepresentationHelper(myEditor).toVisualColumnSymbolsNumber(foldRegion.getStartOffset(),foldRegion.getEndOffset(),0);    }    int linesDiff=endOffsetLogicalLine - logicalLine;    logicalLine+=linesDiff;    foldedLines+=linesDiff;    logicalColumn=collapsedSymbolsWidthInColumns;    foldingColumnDiff=visualColumn - logicalColumn - softWrapColumnDiff;    softWrapLinesBefore+=softWrapLinesCurrent;    softWrapLinesCurrent=0;  }}  }
class C{  public boolean isNullable(){  return nullable;}  }
class C{  private List<Volume> checkIfDistributedVplexOrVmaxFullCopies(List<URI> fullcopies){  List<Volume> sourceVolumes=new ArrayList<Volume>();  for (  URI fullCopyUri : fullcopies) {    Volume fullCopy=_dbClient.queryObject(Volume.class,fullCopyUri);    if (fullCopy != null) {      boolean toadd=false;      URI volume=fullCopy.getAssociatedSourceVolume();      Volume sourceVol=_dbClient.queryObject(Volume.class,volume);      if (sourceVol != null) {        if (!sourceVol.checkForRp()) {          toadd=false;        } else         if (sourceVol.getAssociatedVolumes() != null && sourceVol.getAssociatedVolumes().size() == 2) {          toadd=true;        } else {          URI storage=sourceVol.getStorageController();          if (!NullColumnValueGetter.isNullURI(storage)) {            StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);            if (storageSystem != null && storageSystem.getSystemType().equals(SystemType.vmax.name())) {              toadd=true;            }          } else {            _log.error(String.format("The source %s storage system is null",sourceVol.getLabel()));          }        }      }      if (!NullColumnValueGetter.isNullURI(sourceVol.getProtectionController()) && toadd) {        ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,sourceVol.getProtectionController());        if (rpSystem == null) {          throw DeviceControllerExceptions.recoverpoint.failedConnectingForMonitoring(sourceVol.getProtectionController());        }        sourceVolumes.add(sourceVol);      }    }  }  return sourceVolumes;}  }
class C{  public void addToTags(String newTag){  if (StringUtils.isBlank(newTag)) {    return;  }  for (  String tag : tags) {    if (tag.equals(newTag)) {      return;    }  }  tags.add(newTag);  firePropertyChange(TAG,null,newTag);  firePropertyChange(TAGS_AS_STRING,null,newTag);}  }
class C{  public static void saveFloatToPreference(Context context,String key,float value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (Float.MIN_VALUE == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putFloat(key,value).apply();  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof Prefix) {    return value.equals(((Prefix)o).value);  }  return false;}  }
class C{  public boolean writeDescriptor(byte[] data,BleDescriptorCallback bleCallback){  return writeDescriptor(getDescriptor(),data,bleCallback);}  }
class C{  public static Side newInstance(String value){  final Side returnInstance=new Side();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  private static int lowerCaseHashCode(String str){  int len=str.length();  int h=0;  for (int i=0; i < len; i++) {    int c=str.charAt(i);    c=c <= MAX_LOWER_CASE_CHAR ? LOWER_CASE_CHARS[c] : Character.toLowerCase(c);    h=31 * h + c;  }  return h;}  }
class C{  public static String compactHex(byte[] bytes){  StringBuilder sb=new StringBuilder();  for (  byte b : bytes) {    sb.append(hex(b));  }  return sb.toString();}  }
class C{  private void tryToGrantUriPermissionToStackServices(Uri file){  if (!ContentResolver.SCHEME_CONTENT.equals(file.getScheme())) {    return;  }  Intent fileTransferServiceIntent=new Intent(IFileTransferService.class.getName());  List<ResolveInfo> stackServices=mCtx.getPackageManager().queryIntentServices(fileTransferServiceIntent,0);  for (  ResolveInfo stackService : stackServices) {    mCtx.grantUriPermission(stackService.serviceInfo.packageName,file,Intent.FLAG_GRANT_READ_URI_PERMISSION);  }}  }
class C{  protected void handleCSSPropertyChanged(int property){switch (property) {case SVGCSSEngine.IMAGE_RENDERING_INDEX:case SVGCSSEngine.COLOR_INTERPOLATION_INDEX:    RenderingHints hints=CSSUtilities.convertImageRendering(e,null);  hints=CSSUtilities.convertColorRendering(e,hints);if (hints != null) {  node.setRenderingHints(hints);}break;default :super.handleCSSPropertyChanged(property);}}  }
class C{  private DBID stringToDBID(String query){  return DBIDUtil.importInteger(Integer.valueOf(query));}  }
class C{  public void generatePartition(Instances data) throws Exception {  if (m_Classifier instanceof PartitionGenerator)   buildClassifier(data); else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");}  }
class C{  public int describeContents(){  return 0;}  }
class C{  @Override public void invalidate(){  if (!mIsDrawing && !mUpdateRequested) {    mInvalidator.invalidate();    mLastDrawTimeMillis=mClock.getTimeMillis();  }  mUpdateRequested=true;}  }
class C{  public boolean contains(double x,double y,double w,double h){  return false;}  }
class C{  EditSensorAction(){  super("Edit sensor...");}  }
class C{  @Override public UserClient user(){  return new DefaultUserClient(url,authenticationManager);}  }
class C{  void addOrReplaceDecls(XMLNSDecl newDecl){  int n=m_prefixTable.size();  for (int i=n - 1; i >= 0; i--) {    XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);    if (decl.getPrefix().equals(newDecl.getPrefix())) {      return;    }  }  m_prefixTable.add(newDecl);}  }
class C{  public static void enteredMethod(String classname,String methodname,Object caller) throws TestCaseExecutor.TimeoutExceeded {  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  tracer.trace.enteredMethod(classname,methodname,caller);}  }
class C{  public void checkOptions() throws GeneratorException {  try {    if (options.contains(Microsatellite.INSTANCE)) {      for (      PartitionPattern partitionPattern : options.getPartitionPattern()) {        partitionPattern.getPatterns().clearMask();      }      for (      PartitionTreeModel model : options.getPartitionTreeModels()) {        if (options.getDataPartitions(model).size() == 1) {          PartitionPattern partition=(PartitionPattern)options.getDataPartitions(model).get(0);          Patterns patterns=partition.getPatterns();          for (int i=0; i < patterns.getTaxonCount(); i++) {            int state=patterns.getPatternState(i,0);            if (state < 0) {              patterns.addMask(i);            }          }        }      }    }    TaxonList taxonList=options.taxonList;    Set<String> ids=new HashSet<String>();    ids.add(TaxaParser.TAXA);    ids.add(AlignmentParser.ALIGNMENT);    ids.add(TraitData.TRAIT_SPECIES);    if (taxonList != null) {      if (taxonList.getTaxonCount() < 2) {        throw new GeneratorException("BEAST requires at least two taxa to run.");      }      for (int i=0; i < taxonList.getTaxonCount(); i++) {        Taxon taxon=taxonList.getTaxon(i);        if (ids.contains(taxon.getId())) {          throw new GeneratorException("A taxon has the same id," + taxon.getId() + MESSAGE_CAL);        }        ids.add(taxon.getId());      }    }    for (    PartitionTreeModel model : options.getPartitionTreeModels()) {      if (model.getPartitionTreePrior().getNodeHeightPrior() == TreePriorType.YULE_CALIBRATION) {        if (options.treeModelOptions.isNodeCalibrated(model) < 0)         throw new GeneratorException(MESSAGE_CAL_YULE);        if (options.treeModelOptions.isNodeCalibrated(model) > 0) {          List taxonSetsList=options.getKeysFromValue(options.taxonSetsTreeModel,model);          if (taxonSetsList.size() != 1 || !options.taxonSetsMono.get(taxonSetsList.get(0))) {            throw new GeneratorException(MESSAGE_CAL_YULE,BeautiFrame.TAXON_SETS);          }        }      }    }    for (    Taxa taxa : options.taxonSets) {      if (taxa.getTaxonCount() < 1) {        throw new GeneratorException("Taxon set, " + taxa.getId() + ", should contain \n"+ "at least one taxa. Please go back to Taxon Sets \n"+ "panel to correct this.",BeautiFrame.TAXON_SETS);      }      if (ids.contains(taxa.getId())) {        throw new GeneratorException("A taxon set has the same id," + taxa.getId() + MESSAGE_CAL,BeautiFrame.TAXON_SETS);      }      ids.add(taxa.getId());    }    if (options.useStarBEAST) {      if (!options.traitExists(TraitData.TRAIT_SPECIES))       throw new GeneratorException("A trait labelled \"species\" is required for *BEAST species designations." + "\nPlease create or import the species designations in the Traits table.",BeautiFrame.TRAITS);      if (options.getPartitionTreePriors().get(0).getNodeHeightPrior() == TreePriorType.SPECIES_YULE_CALIBRATION) {        if (options.speciesSets.size() != 1 || !options.speciesSetsMono.get(options.speciesSets.get(0))) {          throw new GeneratorException(MESSAGE_CAL_YULE,BeautiFrame.TAXON_SETS);        }      }      for (      Taxa species : options.speciesSets) {        if (species.getTaxonCount() < 2) {          throw new GeneratorException("Species set, " + species.getId() + ",\n should contain"+ "at least two species. \nPlease go back to Species Sets panel to select included species.",BeautiFrame.TAXON_SETS);        }        if (ids.contains(species.getId())) {          throw new GeneratorException("A species set has the same id," + species.getId() + MESSAGE_CAL,BeautiFrame.TAXON_SETS);        }        ids.add(species.getId());      }      int tId=options.starBEASTOptions.getEmptySpeciesIndex();      if (tId >= 0) {        throw new GeneratorException("The taxon " + options.taxonList.getTaxonId(tId) + " has NULL value for \"species\" trait",BeautiFrame.TRAITS);      }    }    if (options.getPartitionTreeModels().size() > 1) {      for (      PartitionTreePrior prior : options.getPartitionTreePriors()) {        if (prior.getNodeHeightPrior() == TreePriorType.GMRF_SKYRIDE) {          throw new GeneratorException("For the Skyride, tree model/tree prior combination not implemented by BEAST." + "\nThe Skyride is only available for a single tree model partition in this release.",BeautiFrame.TREES);        }      }    }    for (    PartitionTreeModel model : options.getPartitionTreeModels()) {      if (model.getStartingTreeType() == StartingTreeType.USER) {        if (model.getUserStartingTree() == null) {          throw new GeneratorException("Please select a starting tree in " + BeautiFrame.TREES + " panel, "+ "\nwhen choosing user specified starting tree option.",BeautiFrame.TREES);        }      }    }    for (    PartitionClockModel model : options.getPartitionClockModels()) {      if (model.getClockType() == ClockType.RANDOM_LOCAL_CLOCK) {        PartitionTreeModel treeModel=null;        for (        AbstractPartitionData pd : options.getDataPartitions(model)) {          if (treeModel != null && treeModel != pd.getPartitionTreeModel()) {            throw new GeneratorException("A single random local clock cannot be applied to multiple trees.",BeautiFrame.CLOCK_MODELS);          }          treeModel=pd.getPartitionTreeModel();        }      }    }    for (    PartitionTreeModel model : options.getPartitionTreeModels()) {      int numOfTaxa=-1;      for (      AbstractPartitionData pd : options.getDataPartitions(model)) {        if (pd.getTaxonCount() > 0) {          if (numOfTaxa > 0) {            if (numOfTaxa != pd.getTaxonCount()) {              throw new GeneratorException("Partitions with different taxa cannot share the same tree.",BeautiFrame.DATA_PARTITIONS);            }          } else {            numOfTaxa=pd.getTaxonCount();          }        }      }    }    for (    Parameter param : options.selectParameters()) {      if (param.getInitial() != Double.NaN) {        if (param.isTruncated && (param.getInitial() < param.truncationLower || param.getInitial() > param.truncationUpper)) {          throw new GeneratorException("Parameter \"" + param.getName() + "\":"+ "\ninitial value "+ param.getInitial()+ " is NOT in the range ["+ param.truncationLower+ ", "+ param.truncationUpper+ "],"+ "\nor this range is wrong. Please check the Prior panel.",BeautiFrame.PRIORS);        } else         if (param.priorType == PriorType.UNIFORM_PRIOR && (param.getInitial() < param.uniformLower || param.getInitial() > param.uniformUpper)) {          throw new GeneratorException("Parameter \"" + param.getName() + "\":"+ "\ninitial value "+ param.getInitial()+ " is NOT in the range ["+ param.uniformLower+ ", "+ param.uniformUpper+ "],"+ "\nor this range is wrong. Please check the Prior panel.",BeautiFrame.PRIORS);        }        if (param.isNonNegative && param.getInitial() < 0.0) {          throw new GeneratorException("Parameter \"" + param.getName() + "\":"+ "\ninitial value "+ param.getInitial()+ " should be non-negative. Please check the Prior panel.",BeautiFrame.PRIORS);        }        if (param.isZeroOne && (param.getInitial() < 0.0 || param.getInitial() > 1.0)) {          throw new GeneratorException("Parameter \"" + param.getName() + "\":"+ "\ninitial value "+ param.getInitial()+ " should lie in the interval [0, 1]. Please check the Prior panel.",BeautiFrame.PRIORS);        }      }    }    checkComponentOptions();  } catch (  Exception e) {    throw new GeneratorException(e.getMessage());  }}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  protected void adjustTextAreaColumnWidth(JScrollPane scrollPane,JTextArea textArea){  this.adjustTextAreaColumnWidth(scrollPane,textArea,this.getPreferredSize());}  }
class C{  public void notifyError(Exception e){  restartService();}  }
class C{  public void replace(SettableBeanProperty property){  String name=property.getName();  int index=name.hashCode() & (_buckets.length - 1);  Bucket tail=null;  boolean found=false;  for (Bucket bucket=_buckets[index]; bucket != null; bucket=bucket.next) {    if (!found && bucket.key.equals(name)) {      found=true;    } else {      tail=new Bucket(tail,bucket.key,bucket.value);    }  }  if (!found) {    throw new NoSuchElementException("No entry '" + property + "' found, can't replace");  }  _buckets[index]=new Bucket(tail,name,property);}  }
class C{  public IComment editLocalCodeNodeComment(final IComment oldComment,final String commentText) throws CouldntSaveDataException {  return CommentManager.get(m_provider).editLocalCodeNodeComment(m_codeNode,oldComment,commentText);}  }
class C{  public ConcurrentOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  super(new ReadWriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory));}  }
class C{  public void actionPerformed(ActionEvent e){  DefaultCellEditor.this.stopCellEditing();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="mu";  String parameter="0.8";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public void endFragmentIdentifier() throws ParseException {}  }
class C{  @Snippet public static void arraycopyUnrolledIntrinsic(Object src,int srcPos,Object dest,int destPos,int length,@ConstantParameter int unrolledLength,@ConstantParameter JavaKind elementKind){  Object nonNullSrc=GraalDirectives.guardingNonNull(src);  Object nonNullDest=GraalDirectives.guardingNonNull(dest);  checkLimits(nonNullSrc,srcPos,nonNullDest,destPos,length);  if (length == 0) {    zeroLengthDynamicCounter.inc();  } else {    nonZeroLengthDynamicCounter.inc();    nonZeroLengthDynamicCopiedCounter.add(length);  }  ArrayCopyUnrollNode.arraycopy(nonNullSrc,srcPos,nonNullDest,destPos,length,unrolledLength,elementKind);}  }
class C{  public static void main(String[] args){}  }
class C{  public Collection autorizardenegarPrestamo(String idPrestamo,String fentrega){  boolean autorizadas=false;  boolean reservadas=false;  int denegadas=0;  ArrayList udocsNoDisponibles=new ArrayList();  Locale locale=getServiceClient().getLocale();  this.check(ServiciosSecurityManager.FINALIZAR_AUTORIZACION_PRESTAMO_ACTION);  LoggingEvent event=getLogginEvent(ArchivoActions.SERVICIOS_MODULE_AUTORIZACION_SOLICITUD_PRESTAMO);  iniciarTransaccion();  PrestamoVO prestamo=getPrestamo(idPrestamo);  if (!prestamo.tieneReserva()) {    String dias_reserva=PropertyHelper.getProperty(PropertyHelper.PLAZO_PRESTAMO);    Date hoy=Calendar.getInstance().getTime();    Calendar fechafinal=new GregorianCalendar();    fechafinal.setTime(hoy);    fechafinal.add(Calendar.HOUR,(Integer.parseInt(dias_reserva)) * PrestamosConstants.HORAS_DIA);    prestamo.setFInicialPrestamo(DBUtils.getFechaActual());    prestamo.setFFinalPrestamo(fechafinal.getTime());    prestamo.setFmaxfinprestamo(fechafinal.getTime());  } else {    prestamo.setFInicialPrestamo(prestamo.getFinicialreserva());    prestamo.setFFinalPrestamo(prestamo.getFfinalreserva());    prestamo.setFmaxfinprestamo(prestamo.getFfinalreserva());  }  if (!StringUtils.isEmpty(fentrega))   prestamo.setFentrega(DateUtils.getDate(fentrega));  Collection detalles=this.getDetallesPrestamo(idPrestamo);  Iterator detallesIterator=detalles.iterator();  while (detallesIterator.hasNext()) {    DetallePrestamoVO detalle=(DetallePrestamoVO)detallesIterator.next();    uDocEnUiDepositoDbEntity.bloquearUDoc(detalle.getIdudoc(),detalle.getSignaturaudoc());    int disponibilidad=isDetalleDisponibleAllConditions(detalle,prestamo.getFInicialPrestamo(),prestamo.getFFinalPrestamo(),prestamo.tieneReserva());    DataLoggingEvent data=event.getDataLoggingEvent(ArchivoObjects.OBJECT_DETALLE_PRESTAMO,detalle.getIdudoc());    data.addDetalle(locale,ArchivoDetails.SOLICITUDES_DETALLE_ID,detalle.getSignaturaudoc());    if (disponibilidad == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE || disponibilidad == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE_PARCIAL) {      detalle.setFinicialuso(prestamo.getFInicialPrestamo());      detalle.setFfinaluso(prestamo.getFFinalPrestamo());      detalle.setFestado(DateUtils.getFechaActual());switch (detalle.getEstado()) {case PrestamosConstants.ESTADO_DETALLE_AUTORIZADA:        autorizadas=true;      detalle.setEstado(PrestamosConstants.ESTADO_DETALLE_AUTORIZADA);    data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DETALLE_ACEPTADO,Messages.getString("archigest.archivo.solicitudes.detalle.estado.infoUdoc",locale) + Messages.getString("archigest.archivo.solicitudes.detalle.estado.3",locale));  break;case PrestamosConstants.ESTADO_DETALLE_RESERVADA:reservadas=true;detalle.setEstado(PrestamosConstants.ESTADO_DETALLE_RESERVADA);data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DETALLE_RESERVADO,Messages.getString("archigest.archivo.solicitudes.detalle.estado.infoUdoc",locale) + Messages.getString("archigest.archivo.solicitudes.detalle.estado.2",locale));break;case PrestamosConstants.ESTADO_DETALLE_DENEGADA:denegadas++;data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DETALLE_DENEGADO,Messages.getString("archigest.archivo.solicitudes.detalle.estado.infoUdoc",locale) + Messages.getString("archigest.archivo.solicitudes.detalle.estado.4",locale));break;}} else {detalle.setEstado(PrestamosConstants.ESTADO_DETALLE_DENEGADA);detalle.setFestado(DateUtils.getFechaActual());switch (disponibilidad) {case SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_NO_DISPONIBLE_X_AUTORIZADA_ENTREGADA:detalle.setMotivorechazo(Messages.getString("archigest.archivo.solicitudes.detalle.estado.nodisponible",locale));break;case SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_NO_DISPONIBLE_X_RESERVADA:detalle.setMotivorechazo(Messages.getString("archigest.archivo.solicitudes.detalle.estado.2",locale));break;case SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_NO_DISPONIBLE_X_BLOQUEADA:detalle.setMotivorechazo(Messages.getString("archigest.archivo.solicitudes.detalle.estado.bloqueada",locale));break;}udocsNoDisponibles.add(detalle);denegadas++;data.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DETALLE_DENEGADO,Messages.getString("archigest.archivo.solicitudes.detalle.estado.infoUdoc",locale) + detalle.getMotivorechazo());}detallePrestamoDBEntity.actualizarDetalle(detalle);}DataLoggingEvent dle=event.getDataLoggingEvent(ArchivoObjects.OBJECT_PRESTAMO,prestamo.getId());dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO,CodigoTransferenciaUtils.getCodigoTransferenciaFromVO(prestamo,getServiceSession()));if (denegadas == detalles.size()) {prestamo.setEstado(PrestamosConstants.ESTADO_PRESTAMO_DENEGADO);dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_DENEGADO,Messages.getString("archigest.archivo.prestamos.prestamo",locale) + Constants.STRING_SPACE + Messages.getString("archigest.archivo.solicitudes.estado.5",locale));} else {if (autorizadas) {prestamo.setEstado(PrestamosConstants.ESTADO_PRESTAMO_AUTORIZADO);dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_ACEPTADO,Messages.getString("archigest.archivo.prestamos.prestamo",locale) + Constants.STRING_SPACE + Messages.getString("archigest.archivo.solicitudes.estado.4",locale));}if (reservadas) {prestamo.setEstado(PrestamosConstants.ESTADO_PRESTAMO_RESERVADO);dle.addDetalle(locale,ArchivoDetails.SOLICITUDES_PRESTAMO_RESERVADO,Messages.getString("archigest.archivo.prestamos.prestamo",locale) + Constants.STRING_SPACE + Messages.getString("archigest.archivo.solicitudes.estado.3",locale));}}prestamo.setFestado(DateUtils.getFechaActual());prestamoDBEntity.updatePrestamo(prestamo);commit();return udocsNoDisponibles;}  }
class C{  public static void insertedGet(){  insertedGet++;}  }
class C{  public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){  verify(cr,null,dump,pw);}  }
class C{  public void autoscaleAxis(String axisName){  Axis axis=getAxis(axisName);  if (axis == null || !axis.isAutoscaled()) {    return;  }  double min=getAxisMin(axisName);  double max=getAxisMax(axisName);  double margin=0.0 * (max - min);  axis.setRange(min - margin,max + margin);}  }
class C{  protected BindingImpl<T> annotatedWithInternal(Annotation annotation){  checkNotNull(annotation,"annotation");  checkNotAnnotated();  return setBinding(binding.withKey(Key.get(this.binding.getKey().getTypeLiteral(),annotation)));}  }
class C{  public DrawerBuilder withSystemUIHidden(boolean systemUIHidden){  this.mSystemUIHidden=systemUIHidden;  if (systemUIHidden) {    withFullscreen(systemUIHidden);  }  return this;}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public static <W extends Appendable & Closeable>void write(CharSequence from,OutputSupplier<W> to) throws IOException {  Preconditions.checkNotNull(from);  boolean threw=true;  W out=to.getOutput();  try {    out.append(from);    threw=false;  }  finally {    Closeables.close(out,threw);  }}  }
class C{  public void execShutdownHooks(PluginContext context) throws InterruptedException {  for (  ShutdownHook hook : shutdownHooks) {    try {      hook.shutdown(context);    } catch (    InterruptedException e) {      throw e;    }catch (    ReplicatorException e) {      logger.warn("Received exception on shutdown hook invocation",e);    }catch (    Exception e) {      logger.error("Unexpected error on shutdown hook invocation",e);    }  }}  }
class C{  public boolean isShowAxes(){  return mShowAxes;}  }
class C{  public CacheClientUpdater(String name,ServerLocation location,boolean primary,DistributedSystem ids,HandShake handshake,QueueManager qManager,EndpointManager eManager,Endpoint endpoint,int handshakeTimeout,SocketCreator socketCreator) throws AuthenticationRequiredException, AuthenticationFailedException, ServerRefusedConnectionException {  super(LoggingThreadGroup.createThreadGroup("Client update thread"),name);  this.setDaemon(true);  this.system=(InternalDistributedSystem)ids;  this.isDurableClient=handshake.getMembership().isDurable();  this.isPrimary=primary;  this.location=location;  this.qManager=qManager;  this.eManager=eManager;  this.endpoint=endpoint;  this.stats=new CCUStats(this.system,this.location);  final boolean isDebugEnabled=logger.isDebugEnabled();  if (isDebugEnabled) {    logger.debug("Creating asynchronous update connection");  }  boolean success=false;  Socket mySock=null;  InternalDistributedMember sid=null;  ByteBuffer cb=null;  OutputStream tmpOut=null;  InputStream tmpIn=null;  try {    int socketBufferSize=Integer.getInteger("BridgeServer.SOCKET_BUFFER_SIZE",32768).intValue();    mySock=socketCreator.connectForClient(location.getHostName(),location.getPort(),handshakeTimeout,socketBufferSize);    mySock.setTcpNoDelay(true);    mySock.setSendBufferSize(socketBufferSize);    verifySocketBufferSize(socketBufferSize,mySock.getReceiveBufferSize(),"receive");    verifySocketBufferSize(socketBufferSize,mySock.getSendBufferSize(),"send");    mySock.setSoTimeout(handshakeTimeout);    tmpOut=mySock.getOutputStream();    tmpIn=mySock.getInputStream();    if (isDebugEnabled) {      logger.debug("Initialized server-to-client socket with send buffer size: {} bytes and receive buffer size: {} bytes",mySock.getSendBufferSize(),mySock.getReceiveBufferSize());    }    if (isDebugEnabled) {      logger.debug("Created connection from {}:{} to CacheClientNotifier on port {} for server-to-client communication",mySock.getInetAddress().getHostAddress(),mySock.getLocalPort(),mySock.getPort());    }    ServerQueueStatus sqs=handshake.greetNotifier(mySock,this.isPrimary);    if (sqs.isPrimary() || sqs.isNonRedundant()) {      PoolImpl pool=(PoolImpl)this.qManager.getPool();      if (!pool.getReadyForEventsCalled()) {        pool.setPendingEventCount(sqs.getServerQueueSize());      }    }{      int bufSize=1024;      try {        bufSize=mySock.getSendBufferSize();        if (bufSize < 1024) {          bufSize=1024;        }      } catch (      SocketException ignore) {      }      cb=ServerConnection.allocateCommBuffer(bufSize,mySock);    }{      MemberAttributes ma=new MemberAttributes(0,-1,DistributionManager.NORMAL_DM_TYPE,-1,null,null,null);      sid=new InternalDistributedMember(mySock.getInetAddress(),mySock.getPort(),false,true,ma);    }    success=true;  } catch (  ConnectException e) {    if (!quitting()) {      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_CONNECTION_WAS_REFUSED,this));    }  }catch (  SSLException ex) {    if (!quitting()) {      getSecurityLogger().warning(LocalizedStrings.CacheClientUpdater_0_SSL_NEGOTIATION_FAILED_1,new Object[]{this,ex});      throw new AuthenticationFailedException(LocalizedStrings.CacheClientUpdater_SSL_NEGOTIATION_FAILED_WITH_ENDPOINT_0.toLocalizedString(location),ex);    }  }catch (  GemFireSecurityException ex) {    if (!quitting()) {      getSecurityLogger().warning(LocalizedStrings.CacheClientUpdater_0_SECURITY_EXCEPTION_WHEN_CREATING_SERVERTOCLIENT_COMMUNICATION_SOCKET_1,new Object[]{this,ex});      throw ex;    }  }catch (  IOException e) {    if (!quitting()) {      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_CAUGHT_FOLLOWING_EXECPTION_WHILE_ATTEMPTING_TO_CREATE_A_SERVER_TO_CLIENT_COMMUNICATION_SOCKET_AND_WILL_EXIT_1,new Object[]{this,e}),logger.isDebugEnabled() ? e : null);    }    eManager.serverCrashed(this.endpoint);  }catch (  ClassNotFoundException e) {    if (!quitting()) {      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_CLASS_NOT_FOUND,e.getMessage()));    }  } finally {    connected=success;    if (mySock != null) {      try {        mySock.setSoTimeout(0);      } catch (      SocketException e) {      }    }    if (connected) {      socket=mySock;      out=tmpOut;      in=tmpIn;      serverId=sid;      commBuffer=cb;      if (mySock != null) {        try {          mySock.setSoTimeout(0);        } catch (        SocketException ignore) {        }      }    } else {      socket=null;      serverId=null;      commBuffer=null;      out=null;      in=null;      if (mySock != null) {        try {          mySock.close();        } catch (        IOException ioe) {          logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_CLOSING_SOCKET_IN_0_FAILED,this),ioe);        }      }    }  }}  }
class C{  public static Soap createSoapMessage(String fileName) throws Exception {  return createSoapMessage(QUERY_DIR,fileName);}  }
class C{  private void restoreDynamicActions(FacesContext context,StateContext stateContext,Map<String,Object> stateMap){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.finest("FaceletPartialStateManagementStrategy.restoreDynamicActions");  }  List<Object> savedActions=(List<Object>)stateMap.get(DYNAMIC_ACTIONS);  List<ComponentStruct> actions=stateContext.getDynamicActions();  if (savedActions != null && !savedActions.isEmpty()) {    for (    Object object : savedActions) {      ComponentStruct action=new ComponentStruct();      action.restoreState(context,object);      if (ComponentStruct.ADD.equals(action.action)) {        restoreDynamicAdd(context,stateMap,action);      }      if (ComponentStruct.REMOVE.equals(action.action)) {        restoreDynamicRemove(context,action);      }      pruneAndReAddToDynamicActions(actions,action);    }  }}  }
class C{  void log(@Nullable Throwable cause){  logger.infofmt(cause,"%s",message);}  }
class C{  private boolean isOnEdge(final int direction,final Point currentPoint){  m_testPoint.setLocation(currentPoint);  move(m_testPoint,direction);  return m_testPoint.x == 0 || m_testPoint.y == 0 || m_testPoint.y == m_bufferedImage.getHeight(this) || m_testPoint.x == m_bufferedImage.getWidth(this) || isBlack(m_testPoint);}  }
class C{  public BayesPmWrapper(GraphWrapper graphWrapper,Parameters params){  if (graphWrapper == null) {    throw new NullPointerException("Graph must not be null.");  }  Dag graph;  try {    graph=new Dag(graphWrapper.getGraph());  } catch (  Exception e) {    throw new RuntimeException("The parent graph cannot be converted to " + "a DAG.");  }  int lowerBound, upperBound;  if (params.getString("bayesPmInitializationMode","automatic").equals("manual")) {    lowerBound=upperBound=2;  } else   if (params.getString("bayesPmInitializationMode","automatic").equals("automatic")) {    lowerBound=params.getInt("minCategories",2);    upperBound=params.getInt("maxCategories",2);  } else {    throw new IllegalStateException("Unrecognized type.");  }  setBayesPm(graph,lowerBound,upperBound);}  }
class C{  public void disconnectPort(LnNetworkPortController p){  istream=null;  ostream=null;  if (networkController != p) {    log.warn("disconnectPort: disconnect called from non-connected LnPortnetworkController");  }  networkController=null;}  }
class C{  private Deque<GridCacheMvccCandidate> ensureDeque(IgniteTxKey key){  Deque<GridCacheMvccCandidate> deque=cands.get(key);  if (deque == null) {    deque=new LinkedList<>();    cands.put(key,deque);  }  return deque;}  }
class C{  @Inline private void releasePages(Address first,Extent bytes){  int pages=Conversions.bytesToPages(bytes);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(bytes.EQ(Conversions.pagesToBytes(pages)));  if (VM.config.ZERO_PAGES_ON_RELEASE)   VM.memory.zero(false,first,bytes);  if (Options.protectOnRelease.getValue())   HeapLayout.mmapper.protect(first,pages);  VM.events.tracePageReleased(space,first,pages);}  }
class C{  public Fault(QName faultCode,String faultString){  super(faultCode.getLocalPart(),faultString);  this.namespaceUri=faultCode.getNamespaceURI();}  }
class C{  public static void print(){  out.flush();}  }
class C{  public WampError(String message){  super(message);}  }
class C{  @Override public String toString(){  return "Pair(" + (first != null ? first.toString() : "null") + ", "+ (second != null ? second.toString() : "null")+ ")";}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private FitConGraphResult fitConGraph(Graph graph,ICovarianceMatrix cov,int n,double tol){  DoubleFactory2D factory=DoubleFactory2D.dense;  Algebra algebra=new Algebra();  List<Node> nodes=graph.getNodes();  String[] nodeNames=new String[nodes.size()];  for (int i=0; i < nodes.size(); i++) {    Node node=nodes.get(i);    if (!cov.getVariableNames().contains(node.getName())) {      throw new IllegalArgumentException("Node in graph not in cov matrix: " + node);    }    nodeNames[i]=node.getName();  }  DoubleMatrix2D S=new DenseDoubleMatrix2D(cov.getSubmatrix(nodeNames).getMatrix().toArray());  graph=graph.subgraph(nodes);  List<List<Node>> cli=cliques(graph);  int nc=cli.size();  if (nc == 1) {    return new FitConGraphResult(S,0,0,1);  }  int k=S.rows();  int it=0;  DoubleMatrix2D K=algebra.inverse(factory.diagonal(factory.diagonal(S)));  int[] all=range(0,k - 1);  while (true) {    DoubleMatrix2D KOld=K.copy();    it++;    for (    List<Node> aCli : cli) {      int[] a=asIndices(aCli,nodes);      int[] b=complement(all,a);      DoubleMatrix2D a1=S.viewSelection(a,a);      DoubleMatrix2D a2=algebra.inverse(a1);      DoubleMatrix2D a3=K.viewSelection(a,b);      DoubleMatrix2D a4=K.viewSelection(b,b);      DoubleMatrix2D a5=algebra.inverse(a4);      DoubleMatrix2D a6=K.viewSelection(b,a).copy();      DoubleMatrix2D a7=algebra.mult(a3,a5);      DoubleMatrix2D a8=algebra.mult(a7,a6);      a2.assign(a8,PlusMult.plusMult(1));      DoubleMatrix2D a9=K.viewSelection(a,a);      a9.assign(a2);    }    DoubleMatrix2D a32=K.copy();    a32.assign(KOld,PlusMult.plusMult(-1));    double diff=algebra.norm1(a32);    if (diff < tol)     break;  }  DoubleMatrix2D V=algebra.inverse(K);  int numNodes=graph.getNumNodes();  int df=numNodes * (numNodes - 1) / 2 - graph.getNumEdges();  double dev=lik(algebra.inverse(V),S,n,k);  return new FitConGraphResult(V,dev,df,it);}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_StringLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_StringLiteral_value_feature","_UI_StringLiteral_type"),SGenPackage.Literals.STRING_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void loadingStarted(){  mLoadTracker.loadingStarted();}  }
class C{  public void emitWithGravity(View emiter,int gravity,int particlesPerSecond,int emitingTime){  configureEmiter(emiter,gravity);  startEmiting(particlesPerSecond,emitingTime);}  }
class C{  public OrientationProvider(SensorManager sensorManager){  this.sensorManager=sensorManager;  currentOrientationRotationMatrix=new Matrixf4x4();  currentOrientationQuaternion=new Quaternion();}  }
class C{  public Daylight(){  this.daylight=false;}  }
class C{  private static int toHex(int ch){  if (ch >= '0' && ch <= '9')   return ch - '0'; else   if (ch >= 'a' && ch <= 'f')   return ch - 'a' + 10; else   if (ch >= 'A' && ch <= 'F')   return ch - 'A' + 10; else   return -1;}  }
class C{  public boolean containsValue(float val){  Object[] keys=_set;  float[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.109 -0500",hash_original_method="F1B4050DCF6D9F3D2D0F698BE22004BE",hash_generated_method="C879F2867123FDC5490F8DC8EF0601C4") public boolean isAllowedToPost(){  return _isAllowedToPost;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public IambnPc(IndependenceTest test){  if (test == null) {    throw new NullPointerException();  }  this.independenceTest=test;  this.variables=test.getVariables();}  }
class C{  private AlarmEvent acknowledge(AlarmPoint alarm){  AlarmStatus status=alarm.currentStatus();  if (status.name(null).equals(AlarmPoint.STATUS_DEACTIVATED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_NORMAL);    return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_ACKNOWLEDGEMENT);  } else   if (status.name(null).equals(AlarmPoint.STATUS_ACTIVATED)) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_ACKNOWLEDGED);    return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_ACKNOWLEDGEMENT);  }  return null;}  }
class C{  public static boolean isFastScale(){  return fastScale;}  }
class C{  @Deprecated public void addToolsMenuItem(JMenuItem menuItem){  getTools().add(menuItem);}  }
class C{  @Override public final boolean readBoolean() throws IOException {  return dis.readBoolean();}  }
class C{  public static boolean createFile(String filepath,boolean recursion) throws IOException {  boolean result=false;  File f=new File(filepath);  if (!f.exists()) {    try {      result=f.createNewFile();    } catch (    IOException e) {      if (!recursion) {        throw e;      }      File parent=f.getParentFile();      if (!parent.exists()) {        parent.mkdirs();      }      try {        result=f.createNewFile();      } catch (      IOException e1) {        throw e1;      }    }  }  return result;}  }
class C{  SizeFilter(int maxSize){  this.maxSize=maxSize;}  }
class C{  public void testDisconnect_BlockWithServerChannelClosed() throws IOException {  assertTrue(this.channel1.isBlocking());  connectLocalServer();  this.channel1.close();  disconnectAfterClosed();}  }
class C{  public Matrix4f m32(float m32){  this.m32=m32;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);  return this;}  }
class C{  public LnLight(String systemName,String userName,LnTrafficController tc,LnLightManager mgr){  super(systemName,userName);  this.tc=tc;  this.mgr=mgr;  initializeLight(systemName);}  }
class C{  private void generateTimeoutRule(StringBuilder bd){  bd.append(METHOD_SPACE);  bd.append("@org.junit.Rule \n");  bd.append(METHOD_SPACE);  int timeout=Properties.TIMEOUT + 1000;  bd.append("public " + Timeout.class.getName() + " globalTimeout = new "+ Timeout.class.getName()+ "("+ timeout);  boolean useNew=false;  try {    Class<?> timeoutOfSUTJunit=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Timeout.class.getName());    Constructor c=timeoutOfSUTJunit.getDeclaredConstructor(Long.TYPE,TimeUnit.class);    useNew=true;  } catch (  ClassNotFoundException e) {    logger.error("Failed to load Timeout rule from SUT classloader: {}",e.getMessage(),e);  }catch (  NoSuchMethodException e) {    logger.warn("SUT is using an old version of JUnit");    useNew=false;  }  if (useNew) {  }  bd.append("); \n");  bd.append("\n");}  }
class C{  public WampRouter build() throws ApplicationError {  if (realms.size() == 0)   throw new ApplicationError(ApplicationError.INVALID_REALM);  return new WampRouter(realms);}  }
class C{  @Pure public String classFileNameFromDescriptor(){  if (VM.VerifyAssertions) {    VM._assert(val.length > 0);    VM._assert(val[0] == 'L' && val[val.length - 1] == ';');  }  if (unicodeStringOrJTOCoffset == null) {    return StringUtilities.asciiBytesToString(val,1,val.length - 2) + ".class";  } else {    return toUnicodeStringInternal().substring(1,val.length - 1) + ".class";  }}  }
class C{  public static int decodeClass(String a){  return Integer.parseInt(a.substring(a.indexOf('_') + 1));}  }
class C{  public <T>T giveOther(TypeTag tag,T value){  Class<T> type=tag.getType();  if (value != null && !type.isAssignableFrom(value.getClass()) && !wraps(type,value.getClass())) {    throw new ReflectionException("TypeTag does not match value.");  }  Tuple<T> tuple=giveTuple(tag);  if (type.isArray() && arraysAreDeeplyEqual(tuple.getRed(),value)) {    return tuple.getBlack();  }  if (!type.isArray() && tuple.getRed().equals(value)) {    return tuple.getBlack();  }  return tuple.getRed();}  }
class C{  @Override public void receive(MLCallbackResult aResult,EagleAlertContext alertContext){  LOG.info("Receive called with : " + aResult.toString());  AlertAPIEntity alert=renderAlert(aResult,alertContext);  alertContext.alertExecutor.onAlerts(alertContext,Arrays.asList(alert));}  }
class C{  @Override public void onCheckedChanged(RadioGroup group,int checkedId){  setDisplay(checkedId);}  }
class C{  public String globalInfo(){  return "Class implementing the KDTree search algorithm for nearest " + "neighbour search.\n" + "The connection to dataset is only a reference. For the tree "+ "structure the indexes are stored in an array. \n"+ "Building the tree:\n"+ "If a node has <maximal-inst-number> (option -L) instances no "+ "further splitting is done. Also if the split would leave one "+ "side empty, the branch is not split any further even if the "+ "instances in the resulting node are more than "+ "<maximal-inst-number> instances.\n"+ "**PLEASE NOTE:** The algorithm can not handle missing values, so it "+ "is advisable to run ReplaceMissingValues filter if there are any "+ "missing values in the dataset.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  private void attemptClaimDrag(){  mParent=getParent();  if (mParent != null) {    mParent.requestDisallowInterceptTouchEvent(true);  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_loading)   return;  this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (e.getActionCommand().equals(ConfirmPanel.A_OK))   dispose(); else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose(); else   if (e.getSource() == fieldResourceType) {    fillResource();    displayCalendar();  } else   if (e.getSource() == fieldResource || e.getSource() == fieldDate)   displayCalendar(); else   if (e.getSource() == bPrevious)   adjustDate(-1); else   if (e.getSource() == bNext)   adjustDate(+1);  this.setCursor(Cursor.getDefaultCursor());}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_test.getExpression().callVisitors(m_test,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public MergConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public static VOOrganization toVOOrganization(Organization organization){  return toVOOrganization(organization,false,null,PerformanceHint.ONLY_FIELDS_FOR_LISTINGS);}  }
class C{  public static Map<String,Object> compileMapTypeProperties(Map<String,Object> typing,EventAdapterService eventAdapterService){  Map<String,Object> compiled=new LinkedHashMap<String,Object>(typing);  for (  Map.Entry<String,Object> specifiedEntry : typing.entrySet()) {    Object typeSpec=specifiedEntry.getValue();    String nameSpec=specifiedEntry.getKey();    if (!(typeSpec instanceof String)) {      continue;    }    String typeNameSpec=(String)typeSpec;    boolean isArray=EventTypeUtility.isPropertyArray(typeNameSpec);    if (isArray) {      typeNameSpec=EventTypeUtility.getPropertyRemoveArray(typeNameSpec);    }    EventType eventType=eventAdapterService.getExistsTypeByName(typeNameSpec);    if (eventType == null || !(eventType instanceof BeanEventType)) {      continue;    }    BeanEventType beanEventType=(BeanEventType)eventType;    Class underlyingType=beanEventType.getUnderlyingType();    if (isArray) {      underlyingType=JavaClassHelper.getArrayType(underlyingType);    }    compiled.put(nameSpec,underlyingType);  }  return compiled;}  }
class C{  public boolean isSetDeleteResponse(){  return this.deleteResponse != null;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void makeClass(IntCharSet set,boolean caseless){  if (caseless)   set=set.getCaseless(scanner.getUnicodeProperties());  if (DEBUG) {    Out.dump("makeClass(" + set + ")");    dump();  }  int oldSize=classes.size();  for (int i=0; i < oldSize; i++) {    IntCharSet x=classes.get(i);    if (x.equals(set))     return;    IntCharSet and=x.and(set);    if (and.containsElements()) {      if (x.equals(and)) {        set.sub(and);        continue;      } else       if (set.equals(and)) {        x.sub(and);        classes.add(and);        if (DEBUG) {          Out.dump("makeClass(..) finished");          dump();        }        return;      }      set.sub(and);      x.sub(and);      classes.add(and);    }  }  if (DEBUG) {    Out.dump("makeClass(..) finished");    dump();  }}  }
class C{  private static String readHeaderLine(FileSystem fs,CSVFileFormatProperties prop,String smallestFile) throws IOException {  String line=null;  BufferedReader br=new BufferedReader(new InputStreamReader(fs.open(new Path(smallestFile))));  line=br.readLine();  br.close();  if (prop.hasHeader()) {    ;  } else {    int ncol=Pattern.compile(Pattern.quote(prop.getDelim())).split(line,-1).length;    line=null;    StringBuilder sb=new StringBuilder();    sb.append("V1");    for (int i=2; i <= ncol; i++)     sb.append(prop.getDelim() + "V" + i);    line=sb.toString();  }  return line;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletRequest req=HttpServletRequest.class.cast(request);  String url=req.getRequestURI();  LoggerFactory.getLogger(getClass()).info("Request started: {}",url);  long start=System.currentTimeMillis();  try {    chain.doFilter(request,response);  }  finally {    long delta=System.currentTimeMillis() - start;    LoggerFactory.getLogger(getClass()).info("Request completed in {}ms: {}",delta,url);  }}  }
class C{  public long cutime(){  return Long.parseLong(fields[15]);}  }
class C{  public RenderableImageOp(ContextualRenderedImageFactory CRIF,ParameterBlock paramBlock){  this.myCRIF=CRIF;  this.paramBlock=(ParameterBlock)paramBlock.clone();}  }
class C{  private synchronized void notifyZoomListeners(ZoomEvent e){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomApplied(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public double measureNumLeaves(){  return m_NumLeaves;}  }
class C{  public AliasDataSource(){}  }
class C{  private VisorIgfsProfilerParsedLine parseLine(String s){  String[] ss=s.split(DELIM_FIELD);  long streamId=parseLong(ss,LOG_COL_STREAM_ID,-1);  if (streamId >= 0) {    int entryType=parseInt(ss,LOG_COL_ENTRY_TYPE,-1);    if (LOG_TYPES.contains(entryType))     return new VisorIgfsProfilerParsedLine(parseLong(ss,LOG_COL_TIMESTAMP,0),entryType,parseString(ss,LOG_COL_PATH),parseIgfsMode(ss,LOG_COL_IGFS_MODE),streamId,parseLong(ss,LOG_COL_DATA_LEN,0),parseBoolean(ss,LOG_COL_OVERWRITE),parseLong(ss,LOG_COL_POS,0),parseLong(ss,LOG_COL_USER_TIME,0),parseLong(ss,LOG_COL_SYSTEM_TIME,0),parseLong(ss,LOG_COL_TOTAL_BYTES,0));  }  return null;}  }
class C{  public boolean contains(double val){  return index(val) >= 0;}  }
class C{  private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<E> h=head;  Node<E> basepred=h.node;  ArrayList<Index<E>> preds=new ArrayList<Index<E>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<E> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    E key=(E)k;    int j=randomLevel();    if (j > h.level)     j=h.level + 1;    Node<E> z=new Node<E>(key,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<E> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<E>(z,idx,null);        if (i > h.level)         h=new HeadIndex<E>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  public ImportRewrite createImportRewrite(CompilationUnit astRoot){  fImportRewrite=StubUtility.createImportRewrite(astRoot,true);  return fImportRewrite;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public Image(double lat,double lon,int offsetx,int offsety){  this(lat,lon,offsetx,offsety,DEFAULT_RADIUS);}  }
class C{  public void showAbout(){  view.showDialog();  view.setRevision(buildInfo.revision());  view.setVersion(buildInfo.version());  view.setTime(buildInfo.buildTime());}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,long value){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mSingleResource.newIntegerResource(resourceId,value));}  }
class C{  public void logEvent(String eventName,double valueToSum,Bundle parameters){  logEvent(eventName,valueToSum,parameters,false);}  }
class C{  private static void loadEndPointsFromJsonFile(){  LOG.log(Level.FINE,"Parsing End Points JSON file ");  operationsByEndpoint=new HashMap<String,Map<String,String>>();  final JsonParser parser=new JsonParser();  Reader fileReader=null;  try {    final InputStream is=AlchemyEndPoints.class.getResourceAsStream(FILE_PATH);    if (null != is) {      fileReader=new InputStreamReader(is);    }    final Object obj=parser.parse(fileReader);    final JsonObject jsonObject=(JsonObject)obj;    for (    final AlchemyAPI object : AlchemyAPI.values()) {      if (jsonObject.get(object.name()) == null) {        continue;      }      final JsonElement elt=jsonObject.get(object.name()).getAsJsonObject();      if (elt.isJsonObject()) {        final Map<String,String> records=new HashMap<String,String>();        for (        final Map.Entry<String,JsonElement> e : elt.getAsJsonObject().entrySet()) {          records.put(e.getKey(),e.getValue().getAsString());        }        operationsByEndpoint.put(object.name(),records);      }    }  } catch (  final JsonParseException e) {    LOG.log(Level.SEVERE,"Could not parse json file: " + FILE_PATH,e);  }catch (  final NullPointerException e) {    LOG.log(Level.SEVERE,"Not able to locate the end points json file: " + FILE_PATH,e);  } finally {    if (fileReader != null) {      try {        fileReader.close();      } catch (      final IOException e) {        LOG.log(Level.SEVERE,"Could not close file reader: " + FILE_PATH,e);      }    }  }}  }
class C{  @Override public Iterator<Example> iterator(){  return new AttributesExampleReader(parent.iterator(),this);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  area.setRect(area.getX() + 4,area.getY() + 4,area.getWidth() - 8,area.getHeight() - 8);  if (this.drawBorder) {    drawBackground(g2,area);  }  double gapHorizontal=(2 * DEFAULT_BORDER_SIZE);  double gapVertical=(2 * DEFAULT_BORDER_SIZE);  double meterX=area.getX() + gapHorizontal / 2;  double meterY=area.getY() + gapVertical / 2;  double meterW=area.getWidth() - gapHorizontal;  double meterH=area.getHeight() - gapVertical + ((this.meterAngle <= 180) && (this.shape != DialShape.CIRCLE) ? area.getHeight() / 1.25 : 0);  double min=Math.min(meterW,meterH) / 2;  meterX=(meterX + meterX + meterW) / 2 - min;  meterY=(meterY + meterY + meterH) / 2 - min;  meterW=2 * min;  meterH=2 * min;  Rectangle2D meterArea=new Rectangle2D.Double(meterX,meterY,meterW,meterH);  Rectangle2D.Double originalArea=new Rectangle2D.Double(meterArea.getX() - 4,meterArea.getY() - 4,meterArea.getWidth() + 8,meterArea.getHeight() + 8);  double meterMiddleX=meterArea.getCenterX();  double meterMiddleY=meterArea.getCenterY();  ValueDataset data=getDataset();  if (data != null) {    double dataMin=this.range.getLowerBound();    double dataMax=this.range.getUpperBound();    Shape savedClip=g2.getClip();    g2.clip(originalArea);    Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));    if (this.dialBackgroundPaint != null) {      fillArc(g2,originalArea,dataMin,dataMax,this.dialBackgroundPaint,true);    }    drawTicks(g2,meterArea,dataMin,dataMax);    drawArcForInterval(g2,meterArea,new MeterInterval("",this.range,this.dialOutlinePaint,new BasicStroke(1.0f),null));    Iterator iterator=this.intervals.iterator();    while (iterator.hasNext()) {      MeterInterval interval=(MeterInterval)iterator.next();      drawArcForInterval(g2,meterArea,interval);    }    Number n=data.getValue();    if (n != null) {      double value=n.doubleValue();      drawValueLabel(g2,meterArea);      if (this.range.contains(value)) {        g2.setPaint(this.needlePaint);        g2.setStroke(new BasicStroke(2.0f));        double radius=(meterArea.getWidth() / 2) + DEFAULT_BORDER_SIZE + 15;        double valueAngle=valueToAngle(value);        double valueP1=meterMiddleX + (radius * Math.cos(Math.PI * (valueAngle / 180)));        double valueP2=meterMiddleY - (radius * Math.sin(Math.PI * (valueAngle / 180)));        Polygon arrow=new Polygon();        if ((valueAngle > 135 && valueAngle < 225) || (valueAngle < 45 && valueAngle > -45)) {          double valueP3=(meterMiddleY - DEFAULT_CIRCLE_SIZE / 4);          double valueP4=(meterMiddleY + DEFAULT_CIRCLE_SIZE / 4);          arrow.addPoint((int)meterMiddleX,(int)valueP3);          arrow.addPoint((int)meterMiddleX,(int)valueP4);        } else {          arrow.addPoint((int)(meterMiddleX - DEFAULT_CIRCLE_SIZE / 4),(int)meterMiddleY);          arrow.addPoint((int)(meterMiddleX + DEFAULT_CIRCLE_SIZE / 4),(int)meterMiddleY);        }        arrow.addPoint((int)valueP1,(int)valueP2);        g2.fill(arrow);        Ellipse2D circle=new Ellipse2D.Double(meterMiddleX - DEFAULT_CIRCLE_SIZE / 2,meterMiddleY - DEFAULT_CIRCLE_SIZE / 2,DEFAULT_CIRCLE_SIZE,DEFAULT_CIRCLE_SIZE);        g2.fill(circle);      }    }    g2.setClip(savedClip);    g2.setComposite(originalComposite);  }  if (this.drawBorder) {    drawOutline(g2,area);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String u2(int v){  char[] result=new char[4];  for (int i=0; i < 4; i++) {    result[3 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  private void updateRSAConfigFiles(TenantInformation tenantInfo) throws Exception {  Validate.notNull(tenantInfo,"tenantInfo");  AuthnPolicy authnPolicy=tenantInfo.getAuthnPolicy();  if (authnPolicy == null || authnPolicy.get_rsaAgentConfig() == null) {    return;  }  RSAAgentConfig rsaConfig=authnPolicy.get_rsaAgentConfig();  try {    if (rsaConfig == null) {      return;    }    String tenantName=tenantInfo.getTenant().getName();    Validate.notEmpty(tenantName,"tenantName");    RSAAgentConfig existingConfig=_tenantCache.findExtRsaConfig(tenantName);    if (null != existingConfig && existingConfig.equals(rsaConfig)) {      return;    }    RsaAgentConfFilesUpdater updater=new RsaAgentConfFilesUpdater(this.getClusterId());    updater.updateRSAConfigFiles(tenantInfo,rsaConfig);    _tenantCache.deleteExtRsaConfig(tenantName);    _tenantCache.addExtRsaConfig(tenantName,rsaConfig);    _rsaSessionCache.removeSessionCache(tenantName);    _rsaSessionFactoryCache.removeFactory(tenantName);  } catch (  Exception e) {    logger.error("Failed updating RSA config files",e);    throw e;  }}  }
class C{  public void notifyDataSetChanged(Boolean force){  if ((force) || (!(mDecoratedBaseAdapter instanceof ArrayAdapter<?>))) {    mDecoratedBaseAdapter.notifyDataSetChanged();  }}  }
class C{  public List<V> values(){  List<V> list=new ArrayList<V>();  for (  List<V> value : map.values()) {    list.addAll(value);  }  return Collections.unmodifiableList(list);}  }
class C{  String validateText(String inputText,String elementName,String ownerName){  String output=inputText.replaceAll("</br>","");  output=output.replaceAll("<br\\s*/?>","");  TransformerFactory transfac=TransformerFactory.newInstance();  Transformer trans=null;  try {    String test="<test>" + output + "</test>";    trans=transfac.newTransformer();    StringReader stringReader=new StringReader(test);    StreamSource source=new StreamSource(stringReader);    DOMResult result=new DOMResult();    trans.transform(source,result);  } catch (  Exception ex) {    String msg="Text for " + elementName + " in "+ ownerName+ " is not valid.\n";    if (ex.getMessage().indexOf("matching end-tag \"</test>\"") == -1) {      msg+=ex.getMessage();    } else {      msg+="No matching start tag.";    }    validationErrors+=msg + "\n\n";    if (verbose) {      System.out.println(msg);      System.out.println("offending text --------------------------------------");      System.out.println(inputText);      System.out.println("end offending text --------------------------------------");    }    output="";    errors=true;  }  return output;}  }
class C{  public InputSource(Reader characterStream){  setCharacterStream(characterStream);}  }
class C{  public int hashCode(){  return ((table.hashCode() ^ attribute.hashCode()) ^ value);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(new ASN1Integer(m));  if (j == 0) {    v.add(new ASN1Integer(k));  } else {    ASN1EncodableVector coefs=new ASN1EncodableVector();    coefs.add(new ASN1Integer(k));    coefs.add(new ASN1Integer(j));    coefs.add(new ASN1Integer(l));    v.add(new DERSequence(coefs));  }  return new DERSequence(v);}  }
class C{  @Override public void resetTask(){  this.petPathfinder.clearPathEntity();}  }
class C{  public void addGameKeyListener(int keyCode,ActionListener listener){  if (gameKeyListeners == null) {    gameKeyListeners=new HashMap<Integer,ArrayList<ActionListener>>();  }  addKeyListener(keyCode,listener,gameKeyListeners);}  }
class C{  private Caption parseDialogueForASS(String[] line,String[] dialogueFormat,float timer,TimedTextObject tto){  Caption newCaption=new Caption();  String captionText=line[9];  newCaption.content=captionText.replaceAll("\\{.*?\\}","").replace("\n","<br />").replace("\\N","<br />");  for (int i=0; i < dialogueFormat.length; i++) {    if (dialogueFormat[i].trim().equalsIgnoreCase("Style")) {      Style s=tto.styling.get(line[i].trim());      if (s != null)       newCaption.style=s; else       tto.warnings+="undefined style: " + line[i].trim() + "\n\n";    } else     if (dialogueFormat[i].trim().equalsIgnoreCase("Start")) {      newCaption.start=new Time("h:mm:ss.cs",line[i].trim());    } else     if (dialogueFormat[i].trim().equalsIgnoreCase("End")) {      newCaption.end=new Time("h:mm:ss.cs",line[i].trim());    }  }  if (timer != 100) {    newCaption.start.mseconds/=(timer / 100);    newCaption.end.mseconds/=(timer / 100);  }  return newCaption;}  }
class C{  public synchronized void end(){  graphicsToBeDrawn.close();  if (currentGraphics != null) {    graphicsDrawn.append(currentGraphics);  }  graphicsDrawn.closeWhenEmpty();  if (printerJobThread != null && printerJobThread.isAlive()) {    try {      printerJobThread.join();    } catch (    InterruptedException e) {    }  }}  }
class C{  public TransformW(float m00,float m10,float m01,float m11,float m02,float m12){  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;  updateState();}  }
class C{  public PathHeader createPathHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  Path path=new Path();  path.setAddress(address);  return path;}  }
class C{  @Override protected void processException(ReplyException ex){  logger.debug("RemoveBucketMessage ignoring exception: {}",ex.getMessage(),ex);}  }
class C{  public Boolean isTargetMutualChapSettable(){  return targetMutualChapSettable;}  }
class C{  @Get @Put @Post @Delete public String noOp(String postdata){  setStatus(Status.SUCCESS_OK);  return "{\"status\":\"ok\"}";}  }
class C{  private Intersection unify(Intersection E,Intersection F){  if (E.segA == null || E.segB == null) {    Intersection tmp=E;    E=F;    F=tmp;  }  if (E.nextA == null)   E.nextA=F.nextA;  if (E.nextB == null)   E.nextB=F.nextB;  if (F.segA != null)   F.segA.wasUnified(F,E);  if (F.segB != null)   F.segB.wasUnified(F,E);  return E;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected RuleStats runTasks(final IJoinNexus joinNexus,final List<Callable<RuleStats>> tasks) throws InterruptedException, ExecutionException {  assert tasks != null;  assert !tasks.isEmpty();  final RuleStats totals;  if (tasks.size() == 1) {    totals=runOne(joinNexus,step,tasks.get(0));  } else   if (!joinNexus.forceSerialExecution() && !step.isRule() && ((IProgram)step).isParallel()) {    totals=runParallel(joinNexus,step,tasks);  } else {    totals=runSequential(joinNexus,step,tasks);  }  return totals;}  }
class C{  public void remove(int row){  String sha1=getHash(row);  if (sha1 != null)   _indexes.remove(sha1);  super.remove(row);  _numResults-=1;  remapIndexes(row);}  }
class C{  protected void paintContentBorderRightEdge(Graphics g,int tabPlacement,int selectedIndex,int x,int y,int w,int h){  Rectangle selRect=selectedIndex < 0 ? null : getTabBounds(selectedIndex,calcRect);  g.setColor(shadow);  if (tabPlacement != RIGHT || selectedIndex < 0 || (selRect.y < y || selRect.y > y + h)) {    g.setColor(darkShadow);    g.drawLine(x + w - 1,y,x + w - 1,y + h - 1);  } else {    g.setColor(darkShadow);    g.drawLine(x + w - 1,y,x + w - 1,selRect.y);    if (selRect.y + selRect.height < y + h - 2) {      g.setColor(darkShadow);      g.drawLine(x + w - 1,selRect.y + selRect.height,x + w - 1,y + h - 2);    }  }}  }
class C{  @RequestMapping(value="/businessObjectData/generateDdl",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_GENERATE_DDL_POST) public BusinessObjectDataDdl generateBusinessObjectDataDdl(@RequestBody BusinessObjectDataDdlRequest businessObjectDataDdlRequest){  return businessObjectDataService.generateBusinessObjectDataDdl(businessObjectDataDdlRequest);}  }
class C{  protected void attrModified(Attr node,String oldv,String newv){  LiveAttributeValue lav=getLiveAttributeValue(node);  if (lav != null) {    lav.attrModified(node,oldv,newv);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST:    setAnnotationList((PropertyAssignmentAnnotationList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean contains(lalr_item itm){  return _all.containsKey(itm);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private int[] createEmptySetOfIntegers(int max){  firstWordNotUsed=0;  int[] arr=new int[arrayIndex(max - 1) + 1];  return arr;}  }
class C{  public Query(String expression,Metric result,String message){  this.expression=expression;  this.result=result;  this.message=message;}  }
class C{  public JcaX509v3CertificateBuilder(X509Certificate issuerCert,BigInteger serial,Date notBefore,Date notAfter,X500Name subject,PublicKey publicKey){  this(X500Name.getInstance(issuerCert.getSubjectX500Principal().getEncoded()),serial,notBefore,notAfter,subject,publicKey);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  private void enable(){  if (_lifecycle.toActive()) {    if (_serverSocket != null) {      _serverSocket.listen(_acceptListenBacklog);    }  }}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  public final boolean isNominal(){  return (m_Type == NOMINAL);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VALUE;case 3:return ANNOTATION_TYPE;case 4:return HOST;default :return null;}}  }
class C{  @Override protected Object execute() throws Exception {  init();  try {    Bundle bundle=getBundleContext().getBundle(0);    bundle.stop();  } catch (  Exception e) {    log.error("Error when shutting down Apache Karaf",e);  }  return null;}  }
class C{  public static String nullToEmpty(@Nullable String string){  return (string == null) ? "" : string;}  }
class C{  public static void assertWarningsLists(List<List<String>> warningsLists,int... expectedSizes){  assertEquals(warningsLists.toString(),expectedSizes.length,warningsLists.size());  for (int i=0; i < expectedSizes.length; i++) {    int expectedSize=expectedSizes[i];    List<String> warnings=warningsLists.get(i);    assertWarnings(expectedSize,warnings);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;default :  return null;}}  }
class C{  public int writeLong(int index,long l){  return this.writeULong(index,l);}  }
class C{  public void addStep(CodeIntoGrammarInjector step){  steps.add(step);}  }
class C{  public StreamingJsonBuilder(Writer writer,Object content) throws IOException {  this(writer,content,JsonOutput.DEFAULT_GENERATOR);}  }
class C{  public static boolean[] byteToBinary(final byte src,final int srcPos,final boolean[] dst,final int dstPos,final int nBools){  if (0 == nBools) {    return dst;  }  if (nBools - 1 + srcPos >= 8) {    throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 8");  }  int shift=0;  for (int i=0; i < nBools; i++) {    shift=i + srcPos;    dst[dstPos + i]=((0x1 & (src >> shift)) != 0);  }  return dst;}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  ConditionVars cvars=cond.checkCondition(env,ctx,vset,exp);  vset=left.checkValue(env,ctx,cvars.vsTrue,exp).join(right.checkValue(env,ctx,cvars.vsFalse,exp));  cond=convert(env,ctx,Type.tBoolean,cond);  int tm=left.type.getTypeMask() | right.type.getTypeMask();  if ((tm & TM_ERROR) != 0) {    type=Type.tError;    return vset;  }  if (left.type.equals(right.type)) {    type=left.type;  } else   if ((tm & TM_DOUBLE) != 0) {    type=Type.tDouble;  } else   if ((tm & TM_FLOAT) != 0) {    type=Type.tFloat;  } else   if ((tm & TM_LONG) != 0) {    type=Type.tLong;  } else   if ((tm & TM_REFERENCE) != 0) {    try {      type=env.implicitCast(right.type,left.type) ? left.type : right.type;    } catch (    ClassNotFound e) {      type=Type.tError;    }  } else   if (((tm & TM_CHAR) != 0) && left.fitsType(env,ctx,Type.tChar) && right.fitsType(env,ctx,Type.tChar)) {    type=Type.tChar;  } else   if (((tm & TM_SHORT) != 0) && left.fitsType(env,ctx,Type.tShort) && right.fitsType(env,ctx,Type.tShort)) {    type=Type.tShort;  } else   if (((tm & TM_BYTE) != 0) && left.fitsType(env,ctx,Type.tByte) && right.fitsType(env,ctx,Type.tByte)) {    type=Type.tByte;  } else {    type=Type.tInt;  }  left=convert(env,ctx,type,left);  right=convert(env,ctx,type,right);  return vset;}  }
class C{  public DError(JFrame parent,String title,Dialog.ModalityType modality,Throwable error){  super(parent,modality);  setTitle(title);  this.error=error;  initComponents();}  }
class C{  private static String addDeletedKey(List<Optional<AccountSshKey>> keys){  keys.add(Optional.empty());  return AuthorizedKeys.DELETED_KEY_COMMENT + "\n";}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  Collection<MobSimVehicleRoute> createPlans(){  List<MobSimVehicleRoute> vehicleRoutes=new ArrayList<MobSimVehicleRoute>();  for (  CarrierAgent carrierAgent : carrierAgents) {    List<MobSimVehicleRoute> plansForCarrier=carrierAgent.createFreightDriverPlans();    vehicleRoutes.addAll(plansForCarrier);  }  return vehicleRoutes;}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (resultString.equals("")) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();  } else {    viewfinderView.drawResultBitmap(barcode);    String Qruid=result.getText().toString().trim();    Intent intent=new Intent();    intent.putExtra("address",Qruid);    setResult(RESULT_OK,intent);  }  CaptureActivity.this.finish();}  }
class C{  public static void logError(ILog log,String message){  logError(log,null,message);}  }
class C{  private void loadFile(){  log.info("");  Media media=null;  try {    media=Fileupload.get();    if (media == null)     return;  } catch (  InterruptedException e) {    e.printStackTrace();  }  String fileName=media.getName();  log.config(fileName);  m_change=true;  m_data=media.getByteData();  displayData();}  }
class C{  public int substringLength(int index){  if (index < 0 || index >= this.count) {    String message=Logging.getMessage("generic.indexOutOfRange",index);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.lengths[index];}  }
class C{  protected boolean internalStartAnimation(Object sender,NSTimer timer,PLCameraAnimationType type){  if (!mIsAnimating) {    mIsAnimating=true;    mAnimationType=type;    this.setAnimationTimer(timer);    if (mInternalListener != null)     mInternalListener.didBeginAnimation(sender,this,type);    if (mListener != null)     mListener.didBeginAnimation(sender,this,type);    return true;  }  return false;}  }
class C{  public static Context webContext(final HttpServletRequest request,final HttpServletResponse response,final FilterConfig filterConfig){  return new Context(request,response,filterConfig);}  }
class C{  public PlusExpression(final List<MemoryExpressionElement> children){  this.children=children;}  }
class C{  public void addContact(Contact contact){  addProperty(contact);}  }
class C{  private DownloadUtils(){  throw new AssertionError();}  }
class C{  public ObjectFactory(){}  }
class C{  private static byte expectedNorm(final DefaultSimilarity sim,final int length,final float boost){  return (byte)sim.encodeNormValue(boost / ((float)Math.sqrt(length)));}  }
class C{  public void stopContainer(){  try {    if (container != null) {      container.stop();      logger.info("Stopped container");    }  } catch (  LifecycleException exception) {    logger.warn("Cannot Stop Tomcat" + exception.getMessage());  }}  }
class C{  public SoundCloudTrack previous(){  int tracks=mSoundCloudPlaylist.getTracks().size();  mCurrentTrackIndex=(tracks + mCurrentTrackIndex - 1) % tracks;  return mSoundCloudPlaylist.getTracks().get(mCurrentTrackIndex);}  }
class C{  public DSAPublicKeyImpl(X509EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  SubjectPublicKeyInfo subjectPublicKeyInfo=null;  byte[] encoding=keySpec.getEncoded();  String alg, algName;  try {    subjectPublicKeyInfo=(SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    y=new BigInteger((byte[])ASN1Integer.getInstance().decode(subjectPublicKeyInfo.getSubjectPublicKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=subjectPublicKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=(DSAParams)(new DSAParameterSpec(p,q,g));  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  private void simulateInvoke(final InvokeInstruction instruction){  final List<Element> arguments=new LinkedList<>();  MethodIdentifier identifier=instruction.getIdentifier();  IntStream.range(0,identifier.getParameters()).forEach(null);  Collections.reverse(arguments);  Element object=null;  Method method;  if (!identifier.isStaticMethod()) {    object=runtimeStack.pop();    if (object instanceof MethodHandle) {      method=(Method)object;    } else {      method=methodPool.get(identifier);    }  } else {    method=methodPool.get(identifier);  }  final Element returnedElement=method.invoke(object,arguments);  if (returnedElement != null)   runtimeStack.push(returnedElement); else   if (!identifier.getReturnType().equals(Types.PRIMITIVE_VOID))   runtimeStack.push(new Element(identifier.getReturnType()));}  }
class C{  public boolean isSimple(){  if (size() != 1)   return false;  SlideModel slide=get(0);  if (!(slide.hasImage() ^ slide.hasVideo()))   return false;  return !slide.hasAudio();}  }
class C{  synchronized void notUsed(){  if (socket != null) {    try {      socket.close();    } catch (    IOException e) {    }  }  cleanUp=true;}  }
class C{  @DSSource({DSSourceKind.NFC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:50.214 -0500",hash_original_method="3B32FFA1CE722DE38A059403727B8397",hash_generated_method="72E6470E177C9856FD91B43A85E7016D") public static NdefRecord createUri(String uriString){  byte prefix=0x0;  for (int i=1; i < URI_PREFIX_MAP.length; i++) {    if (uriString.startsWith(URI_PREFIX_MAP[i])) {      prefix=(byte)i;      uriString=uriString.substring(URI_PREFIX_MAP[i].length());      break;    }  }  byte[] uriBytes=uriString.getBytes(Charsets.UTF_8);  byte[] recordBytes=new byte[uriBytes.length + 1];  recordBytes[0]=prefix;  System.arraycopy(uriBytes,0,recordBytes,1,uriBytes.length);  return new NdefRecord(TNF_WELL_KNOWN,RTD_URI,new byte[0],recordBytes);}  }
class C{  public synchronized static String[] split(Map<String,Object> appMap,String toSplit,String regex){  Map<String,Pattern> patternCache=getPatternCache(appMap);  Pattern pattern=patternCache.get(regex);  if (pattern == null) {    pattern=Pattern.compile(regex);    patternCache.put(regex,pattern);  }  return pattern.split(toSplit,0);}  }
class C{  private DatabaseExportUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static Object callName(Object[] args,String name,Context cx,Scriptable scope){  Callable f=getNameFunctionAndThis(name,cx,scope);  Scriptable thisObj=lastStoredScriptable(cx);  return f.call(cx,scope,thisObj,args);}  }
class C{  public void paintSplitPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static String rtrim(String s){  if (s == null) {    return null;  }  int i=s.length() - 1;  while (i >= 0 && Character.isWhitespace(s.charAt(i))) {    i--;  }  return s.substring(0,i + 1);}  }
class C{  public FloatArrayList(int initialCapacity){  this(new float[initialCapacity]);  setSizeRaw(0);}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  public double area3D(){  return area3D(this.p0,this.p1,this.p2);}  }
class C{  public Model doWork(ExampleSet exampleSet) throws OperatorException {  exampleSetInput.receive(exampleSet);  doWork();  return modelOutput.getData(Model.class);}  }
class C{  public void init(){}  }
class C{  protected MethodDeclarationImpl(){  super();}  }
class C{  public void propertyChange(PropertyChangeEvent e){  tierList.repaint();  validate();}  }
class C{  final private void markAsDefinitelyAssigned(int position){  if (this != DEAD_END) {    if (position < BitCacheSize) {      long mask;      this.definiteInits|=(mask=1L << position);      this.potentialInits|=mask;    } else {      int vectorIndex=(position / BitCacheSize) - 1;      if (this.extra == null) {        int length=vectorIndex + 1;        this.extra=new long[extraLength][];        for (int j=0; j < extraLength; j++) {          this.extra[j]=new long[length];        }      } else {        int oldLength;        if (vectorIndex >= (oldLength=this.extra[0].length)) {          for (int j=0; j < extraLength; j++) {            System.arraycopy(this.extra[j],0,(this.extra[j]=new long[vectorIndex + 1]),0,oldLength);          }        }      }      long mask;      this.extra[0][vectorIndex]|=(mask=1L << (position % BitCacheSize));      this.extra[1][vectorIndex]|=mask;    }  }}  }
class C{  private short[] readExtBlockTableEntries(final int blockTableEntires) throws IOException {  final ByteBuffer extBlockTablesBuffer=readFullBuffer(blockTableEntires * 2);  final short[] extBlockTableHighOffsets=new short[blockTableEntires];  for (int i=0; i < extBlockTableHighOffsets.length; i++)   extBlockTableHighOffsets[i]=extBlockTablesBuffer.getShort();  return extBlockTableHighOffsets;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",2,length);}  }
class C{  public void removeMessageListener(PacketListener listener){  connection.removePacketListener(listener);  connectionListeners.remove(listener);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Arguments<RNode> unrollArguments(ArgumentsSignature varArgSignature){  assert containsVarArgsSymbol();  RNode[] values=new RNode[arguments.length];  String[] newNames=new String[arguments.length];  int vargsSymbolsIndex=0;  int index=0;  for (int i=0; i < arguments.length; i++) {    if (vargsSymbolsIndex < varArgsSymbolIndices.length && varArgsSymbolIndices[vargsSymbolsIndex] == i) {      if (varArgSignature.isEmpty()) {        values=Utils.resizeArray(values,values.length - 1);        newNames=Utils.resizeArray(newNames,newNames.length - 1);        continue;      }      values=Utils.resizeArray(values,values.length + varArgSignature.getLength() - 1);      newNames=Utils.resizeArray(newNames,newNames.length + varArgSignature.getLength() - 1);      for (int j=0; j < varArgSignature.getLength(); j++) {        values[index]=PromiseNode.createVarArg(j);        newNames[index]=varArgSignature.getName(j);        index++;      }      vargsSymbolsIndex++;    } else {      values[index]=arguments[i];      newNames[index]=signature.getName(i);      index++;    }  }  return Arguments.create(values,ArgumentsSignature.get(newNames));}  }
class C{  @RequestMapping(value={"{id}","/{id}"},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@PathVariable("id") Integer processId,@ModelAttribute("pdq") @Valid ProcessDeploymentQueue processDeploymentQueue,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    processDAO.securityCheck(processId,principal.getName(),"execute");    com.wipro.ats.bdre.md.dao.jpa.ProcessDeploymentQueue jpaPdq=processDeploymentQueueDAO.insertProcessDeploymentQueue(processId,principal.getName());    if (jpaPdq != null) {      processDeploymentQueue.setDeploymentId(jpaPdq.getDeploymentId());      processDeploymentQueue.setUserName(jpaPdq.getUserName());      processDeploymentQueue.setStartTs(jpaPdq.getStartTs());      processDeploymentQueue.setEndTs(jpaPdq.getEndTs());      processDeploymentQueue.setInsertTs(jpaPdq.getInsertTs());      processDeploymentQueue.setDeployScriptLocation(jpaPdq.getDeployScriptLocation());      processDeploymentQueue.setBusDomainId(jpaPdq.getBusDomain().getBusDomainId());      processDeploymentQueue.setDeployStatusId((int)(jpaPdq.getDeployStatus().getDeployStatusId()));      processDeploymentQueue.setProcessId(jpaPdq.getProcess().getProcessId());      processDeploymentQueue.setProcessTypeId(jpaPdq.getProcessType().getProcessTypeId());    }    if (processDeploymentQueue.getEndTs() != null) {      processDeploymentQueue.setTableEndTs(DateConverter.dateToString(processDeploymentQueue.getEndTs()));    }    if (processDeploymentQueue.getStartTs() != null) {      processDeploymentQueue.setTableStartTs(DateConverter.dateToString(processDeploymentQueue.getStartTs()));    }    restWrapper=new RestWrapper(processDeploymentQueue,RestWrapper.OK);    LOGGER.info("Record with ID:" + processDeploymentQueue.getDeploymentId() + " inserted in ProcessDeploymentQueue by User:"+ principal.getName()+ processDeploymentQueue);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void deleteLocalDevice(VolumeInfo deviceInfo) throws VPlexApiException {  s_logger.info("Request to delete local VPLex device at {}",_baseURI);  _virtualVolumeMgr.deleteLocalDevice(deviceInfo);}  }
class C{  public Viennet2(){  super(2,3);}  }
class C{  public static int longestSuffix(final String[] strings){  return longestSuffix(0,strings);}  }
class C{  public boolean hasNext(){  if (deal > 32000) {    sc.close();  }  return (deal <= 32000);}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public void test_CallbackHandler(){  CallbackHandlerImpl ch=new CallbackHandlerImpl();  assertFalse(ch.called);  ch.handle(null);  assertTrue(ch.called);}  }
class C{  public int connectionType(){  ConnectivityManager cm=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();  if (null != activeNetwork) {    if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI)     return 1;    if (activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE)     return 2;  }  return 0;}  }
class C{  public sun.net.ftp.FtpClient deleteFile(String name) throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("DELE " + name);  return this;}  }
class C{  public static char[] copyOf(char[] original,int newLength){  char[] copy=new char[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public void testFiveNodeEvents() throws Throwable {  testEvents(5);}  }
class C{  public void testNetworkFilterFailure() throws Exception {  NetworkClientFilter ncf=new NetworkClientFilter();  ncf.setTungstenSchema("tungsten_foo");  ncf.setDefinitionsFile(definitionsFile);  createDefinitionsFile();  filterHelper.setContext(replicatorContext);  filterHelper.setFilter(ncf);  String columns[]={"id","name","password","photo"};  String values[]=new String[columns.length];  values[0]="1";  values[1]="Vardenis";  values[2]="secret";  values[3]="my.png";  ReplDBMSEvent e=eventHelper.eventFromRowInsert(getRandomPositiveInt(),"vip","clients",columns,values,0,true);  try {    filterHelper.filter(e);    fail("Filtering server should have sent a non-zero return code and filter should have thrown an exception");  } catch (  ReplicatorException ex) {    logger.info("Expected error received: " + ex);  }  filterHelper.done();}  }
class C{  private void addChart(XYDatasetWithGroups dataset){  assert dataset != null;  JFreeChart chart=ChartFactory.createXYAreaChart(getTitle(),"Buckets (sec)","Count",dataset,PlotOrientation.VERTICAL,true,true,false);  GroupActivatingPanel table=new GroupActivatingPanel(dataset,null);  JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,table,new org.jfree.chart.ChartPanel(chart));  splitPane.setDividerLocation(200);  mainPanel().add(BorderLayout.CENTER,splitPane);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private static HashMap<String,Field> buildFieldCache(Class<?> cls){  final HashMap<String,Field> cache=new HashMap<>();  final List<Field> fields=getAllFields(cls);  for (  Field fld : fields) {    String name=null;    final Reference refAnn=fld.getAnnotation(Reference.class);    if (refAnn != null)     name=selectColumnName(refAnn,fld);    if (name == null) {      final Column colAnn=fld.getAnnotation(Column.class);      if (colAnn != null)       name=selectColumnName(colAnn,fld);    }    if (name == null)     continue;    cache.put(name,fld);  }  return cache;}  }
class C{  public void tick(int from,int to){  for (int value=from; value <= to; value+=1) {    tick(value);  }}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return m_str.equalsIgnoreCase(anotherString);}  }
class C{  @TargetApi(value=Build.VERSION_CODES.M) public static boolean hasSelfPermissions(Context context,String... permissions){  for (  String permission : permissions) {    if (isOverMarshmallow() && permission.equals(Manifest.permission.SYSTEM_ALERT_WINDOW)) {      if (!Settings.canDrawOverlays(context)) {        return false;      }    } else     if (isOverMarshmallow() && permission.equals(Manifest.permission.WRITE_SETTINGS)) {      if (!Settings.System.canWrite(context)) {        return false;      }    } else     if (PermissionChecker.checkSelfPermission(context,permission) != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  public void updateDouble(String columnName,double x) throws SQLException {  updateDouble(findColumn(columnName),x);}  }
class C{  public JavaTransformFactory(){  this("JavaTransformFactory");}  }
class C{  public static int darken(int color,float factor){  int a=Color.alpha(color);  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  return Color.argb(a,Math.max((int)(r * factor),0),Math.max((int)(g * factor),0),Math.max((int)(b * factor),0));}  }
class C{  @ValidationErrorPage(value="createReceipt") @Action(value="/receipts/challan-saveOrupdate") public String saveOrupdate(){  try {    errors.clear();    if (receiptHeader.getReceiptHeader() != null)     collectionCommon.cancelChallanReceiptOnCreation(receiptHeader);    boolean setInstrument=true;    List<InstrumentHeader> receiptInstrList=new ArrayList<InstrumentHeader>();    receiptHeader.setIsReconciled(Boolean.FALSE);    receiptHeader.setIsModifiable(Boolean.TRUE);    receiptHeader.setCollectiontype(CollectionConstants.COLLECTION_TYPE_COUNTER);    receiptHeader.setLocation(collectionsUtil.getLocationOfUser(getSession()));    receiptHeader.setStatus(collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_RECEIPTHEADER,CollectionConstants.RECEIPT_STATUS_CODE_TO_BE_SUBMITTED));    receiptHeader.setCreatedBy(collectionsUtil.getLoggedInUser());    receiptHeader.setCreatedDate(new Date());    if (setInstrument) {      receiptInstrList=populateInstrumentDetails();      setInstrument=false;    }    receiptHeader.setReceiptInstrument(new HashSet(receiptInstrList));    BigDecimal debitAmount=BigDecimal.ZERO;    for (    final ReceiptDetail receiptDetail : receiptHeader.getReceiptDetails())     debitAmount=debitAmount.add(receiptDetail.getCramount());    receiptHeader.addReceiptDetail(collectionCommon.addDebitAccountHeadDetails(debitAmount,receiptHeader,chequeInstrumenttotal,cashOrCardInstrumenttotal,instrumentTypeCashOrCard));    if (chequeInstrumenttotal != null && chequeInstrumenttotal.compareTo(BigDecimal.ZERO) != 0)     receiptHeader.setTotalAmount(chequeInstrumenttotal);    if (cashOrCardInstrumenttotal != null && cashOrCardInstrumenttotal.compareTo(BigDecimal.ZERO) != 0)     receiptHeader.setTotalAmount(cashOrCardInstrumenttotal);    receiptHeaderService.setReceiptNumber(receiptHeader);    receiptHeaderService.populateAndPersistReceipts(receiptHeader,receiptInstrList);    final ReceiptHeader[] receipts=new ReceiptHeader[1];    receipts[0]=receiptHeader;    try {      reportId=collectionCommon.generateReport(receipts,true);    } catch (    final Exception e) {      LOGGER.error(CollectionConstants.REPORT_GENERATION_ERROR,e);      throw new ApplicationRuntimeException(CollectionConstants.REPORT_GENERATION_ERROR,e);    }    return CollectionConstants.REPORT;  } catch (  final StaleObjectStateException exp) {    errors.add(new ValidationError(getText("challanreceipt.created.staleobjectstate"),"Receipt Already Created For this Challan.Go to Search Receipt screen to Re-print the receipt."));    throw new ValidationException(errors);  }catch (  final Exception exp) {    errors.add(new ValidationError(getText("challanreceipt.create.errorincreate"),"Error occured in Challan Receipt creation, please try again."));    throw new ValidationException(errors);  }}  }
class C{  private DateUtil(){}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public boolean nextBoolean(final float probability){  if (probability < 0.0f || probability > 1.0f)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0f)   return false; else   if (probability == 1.0f)   return true;  return nextFloat() < probability;}  }
class C{  public boolean isSetTimestamp(){  return EncodingUtils.testBit(__isset_bitfield,__TIMESTAMP_ISSET_ID);}  }
class C{  public Clock(boolean start){  this(start,FORMAT_SECONDS);}  }
class C{  public static void testImportTechie() throws Exception {  DatabaseMemory.DATABASE_URL="jdbc:mysql://localhost/freebase-tech?createDatabaseIfNotExist=true";  DatabaseMemory.TEST=true;  DatabaseMemory.RECREATE_DATABASE=true;  Bot bot=Bot.createInstance();  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://www.freebase.com/view/computer/software"));  sense.input(new URL("http://www.freebase.com/view/computer/operating_system"));  sense.input(new URL("http://www.freebase.com/view/fictional_universe/fictional_universe"));  sense.input(new URL("http://www.freebase.com/view/computer/programming_language"));  bot.shutdown();}  }
class C{  public ProxySettings addHeader(String name,String value){  if (name == null || name.length() == 0) {    return this;  }  List<String> list=mHeaders.get(name);  if (list == null) {    list=new ArrayList<String>();    mHeaders.put(name,list);  }  list.add(value);  return this;}  }
class C{  protected Anonymous_parameter_1_Impl(){  super();}  }
class C{  @Override protected void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredMethods,double fitness){  if (coveredMethods > maxCoveredMethods) {    logger.info("(Methods) Best individual covers " + coveredMethods + "/"+ totalMethods+ " methods");    maxCoveredMethods=coveredMethods;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredMethods + "/"+ totalMethods+ " methods");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  public ExpandedNodeId toExpandedNodeId(NodeId nodeId){  return new ExpandedNodeId(null,getUri(nodeId.getNamespaceIndex()),nodeId.getValue());}  }
class C{  public boolean isChangeTabContainerStyleOnFocus(){  return changeTabContainerStyleOnFocus;}  }
class C{  @PostConstruct private void postConstruct(){  try {    afterPropertiesSet();  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  protected void customize(@NotNull Object value){  setText(myStaticText != null ? myStaticText : value.toString());}  }
class C{  private void updateTrackerInfo(Site site,String serviceName,List<String> activeNodes){  String siteId=site.getUuid();  log.info("Querying db tracker info from zk");  Configuration config=coordinator.getCoordinatorClient().queryConfiguration(siteId,Constants.DB_DOWNTIME_TRACKER_CONFIG,serviceName);  DbOfflineEventInfo dbOfflineEventInfo=new DbOfflineEventInfo(config);  long currentTimeStamp=TimeUtils.getCurrentTime();  Long lastUpdateTimestamp=dbOfflineEventInfo.getLastUpdateTimestamp();  long interval=0L;  if (lastUpdateTimestamp != null) {    interval=Math.min((currentTimeStamp - lastUpdateTimestamp),TRACKER_CHECK_INTERVAL);  }  if (interval != 0L && interval < NO_NEED_UPDATE_LIMIT) {    log.info("Have already updated within a few minutes, skipping this update");    return;  }  dbOfflineEventInfo.setLastUpdateTimestamp(currentTimeStamp);  log.info(String.format("Db tracker last check time: %d, current check time: %d, site: %s",lastUpdateTimestamp,currentTimeStamp,siteId));  int nodeCount=site.getNodeCount();  for (int i=1; i <= nodeCount; i++) {    String nodeId="vipr" + i;    if (activeNodes.contains(nodeId)) {      dbOfflineEventInfo.setLastActiveTimestamp(nodeId,currentTimeStamp);      log.info(String.format("Service(%s) of node(%s) last active timestamp has been updated to %s",serviceName,nodeId,currentTimeStamp));      if (dbOfflineEventInfo.getOfflineTimeInMS(nodeId) != null) {        dbOfflineEventInfo.setOfflineTimeInMS(nodeId,null);        log.info("Service({}) of node({}) is recovered",serviceName,nodeId);      }    } else {      Long lastOfflineInMS=dbOfflineEventInfo.getOfflineTimeInMS(nodeId);      lastOfflineInMS=(lastOfflineInMS == null) ? 0 : lastOfflineInMS;      long newOfflineTime=lastOfflineInMS + interval;      dbOfflineEventInfo.setOfflineTimeInMS(nodeId,newOfflineTime);      log.info(String.format("Service(%s) of node(%s) has been unavailable for %s mins",serviceName,nodeId,newOfflineTime / TimeUtils.MINUTES));    }  }  config=dbOfflineEventInfo.toConfiguration(serviceName);  coordinator.getCoordinatorClient().persistServiceConfiguration(siteId,config);  log.info("Persist db tracker info to zk successfully");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String prop=e.getPropertyName();  if (prop.equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY)) {    f=(File)e.getNewValue();    if (isShowing()) {      loadImage();      repaint();    }  }}  }
class C{  private int exceptionEndRange(int bcIndex){  int max=bcodes.length();  if (startPCs != null) {    for (    int spc : startPCs) {      if (bcIndex < spc && max > spc) {        max=spc;      }    }    for (    int epc : endPCs) {      if (bcIndex < epc && max > epc) {        max=epc;      }    }  }  return max;}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINARY_BITWISE_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addBuilder(Builder builder){  String name=Integer.toString(builder.hashCode());  dependencies.put(name,builder);  if (!dependencies.containsVertex(name)) {    dependencies.addVertex(new Vertex<String,Builder>(name));  }}  }
class C{  public static Writable encodeHex(final Byte[] data){  return encodeHex(DefaultTypeTransformation.convertToByteArray(data));}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  public static double volume(SpatialComparable box){  final int dim=box.getDimensionality();  double vol=1.;  for (int i=0; i < dim; i++) {    double delta=box.getMax(i) - box.getMin(i);    if (delta == 0.) {      return 0.;    }    vol*=delta;  }  return vol;}  }
class C{  public double stdDev(FloatColumn values){  float stdDev=Float.NaN;  int N=values.size();  if (N > 0) {    if (N > 1) {      stdDev=(float)FastMath.sqrt(variance.reduce(values));    } else {      stdDev=0.0f;    }  }  return stdDev;}  }
class C{  public void unmarshalKey(CacheObjectContext ctx,Marshaller marsh) throws IgniteCheckedException {  if (key == null) {    assert keyBytes != null;    key=marsh.unmarshal(keyBytes,U.resolveClassLoader(ctx.kernalContext().config()));    key.finishUnmarshal(ctx,null);  }}  }
class C{  public AlphaBetaEvaluation(int ply){  this.ply=ply;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.SCHEDULE_TIME_EVENT;}  }
class C{  @Override public TextMessage createTextMessage() throws JMSException {  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createTextMessage" + session);  }  return session.createTextMessage();}  }
class C{  public AdditionalName(){  super(KEY);}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public static void main(String[] args) throws RunnerException {  Options opt=new OptionsBuilder().include(FactorialBenchmark.class.getSimpleName()).include(FizzBuzzBenchmark.class.getSimpleName()).forks(1).build();  new Runner(opt).run();}  }
class C{  public boolean isIdentity(){  return getType() == TYPE_IDENTITY;}  }
class C{  public RenderTarget(String name,int width,int height,int offsetX,int offsetY,boolean stencilBuffer,boolean mipmaps,int glType,Config bitmapConfig,FilterType filterType,WrapType wrapType){  mName=name;  mWidth=width;  mHeight=height;  mOffsetX=offsetX;  mOffsetY=offsetY;  mStencilBuffer=stencilBuffer;  mMipmaps=mipmaps;  mGLType=glType;  mBitmapConfig=bitmapConfig;  mFilterType=filterType;  mWrapType=wrapType;  mTexture=new RenderTargetTexture(mName + "FBTex",mWidth,mHeight);  mTexture.setMipmap(mMipmaps);  mTexture.setGLTextureType(mGLType);  mTexture.setBitmapConfig(mBitmapConfig);  mTexture.setFilterType(mFilterType);  mTexture.setWrapType(mWrapType);}  }
class C{  protected final void SSE2_GPR2FPR_32(Instruction s){  EMIT(MIR_Move.mutate(s,IA32_MOVD,Unary.getResult(s),Unary.getVal(s)));}  }
class C{  public void copyTuple(final byte[] key,final byte[] val,final boolean deleted,final long timestamp){  this.nvisited++;  this.versionDeleted=deleted;  this.versionTimestamp=timestamp;  if (needKeys) {    kbuf.reset();    kbuf.put(key);  }  if (needVals) {    vbuf.reset();    if (!versionDeleted) {      isNull=val == null;      if (!isNull) {        vbuf.put(val);      }    }  }}  }
class C{  public static File createDirectory(Path path,boolean removeExistingContent) throws IOException {  File dir=path.toAbsolutePath().toFile();  if (dir.exists() && dir.canRead() && dir.canWrite()) {    if (dir.isDirectory()) {      delete(path);      return dir;    }    throw new IllegalStateException("Expecting '" + path + "' to be a directory but found a file");  }  dir.mkdirs();  return dir;}  }
class C{  public boolean isTaxCorrection(){  return !getTaxCorrectionType().equals(TAXCORRECTIONTYPE_None);}  }
class C{  public void testExportImportMultiple_kml(){  testExportImportMultiple(TrackFileFormat.KML);}  }
class C{  private void updateDesign(DataSetDesign dataSetDesign,IConnection conn,String queryText) throws OdaException {  IQuery query=conn.newQuery(null);  query.prepare(queryText);  query.setProperty(Query.PROP_SETUP_QUERY_TEXT,getSetupQueryText());  try {    IResultSetMetaData md=query.getMetaData();    updateResultSetDesign(md,dataSetDesign);  } catch (  OdaException e) {    dataSetDesign.setResultSets(null);    e.printStackTrace();  }  try {    IParameterMetaData paramMd=query.getParameterMetaData();    updateParameterDesign(paramMd,dataSetDesign);  } catch (  OdaException ex) {    dataSetDesign.setParameters(null);    ex.printStackTrace();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.117 -0500",hash_original_method="F91D7F8A2853C263C312AB7E69DBEB4B",hash_generated_method="B39B373E6D4E05912089F1FD3E3FDC6C") synchronized boolean checkSslPrefTable(LoadListener loader,SslError error){  final String host=loader.host();  final int primary=error.getPrimaryError();  if (DebugFlags.SSL_ERROR_HANDLER) {    assert host != null;    assert primary != -1;  }  if (mSslPrefTable.containsKey(host) && primary <= mSslPrefTable.getInt(host)) {    if (!loader.cancelled()) {      loader.handleSslErrorResponse(true);    }    return true;  }  return false;}  }
class C{  public static boolean isReportSpeed(Context context){  return STATS_RATE_DEFAULT.equals(getString(context,R.string.stats_rate_key,STATS_RATE_DEFAULT));}  }
class C{  @Override public void ssl(SSLFactory sslFactory){  try {    Objects.requireNonNull(sslFactory);    SocketChannel channel=_channel;    Objects.requireNonNull(channel);    _sslSocket=sslFactory.ssl(channel);    _sslSocket.startHandshake();  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  public int constrains(GeneralNameInterface inputName) throws UnsupportedOperationException {  int constraintType;  if (inputName == null)   constraintType=NAME_DIFF_TYPE; else   if (inputName.getType() != NAME_IP)   constraintType=NAME_DIFF_TYPE; else   if (((IPAddressName)inputName).equals(this))   constraintType=NAME_MATCH; else {    IPAddressName otherName=(IPAddressName)inputName;    byte[] otherAddress=otherName.address;    if (otherAddress.length == 4 && address.length == 4)     constraintType=NAME_SAME_TYPE; else     if ((otherAddress.length == 8 && address.length == 8) || (otherAddress.length == 32 && address.length == 32)) {      boolean otherSubsetOfThis=true;      boolean thisSubsetOfOther=true;      boolean thisEmpty=false;      boolean otherEmpty=false;      int maskOffset=address.length / 2;      for (int i=0; i < maskOffset; i++) {        if ((byte)(address[i] & address[i + maskOffset]) != address[i])         thisEmpty=true;        if ((byte)(otherAddress[i] & otherAddress[i + maskOffset]) != otherAddress[i])         otherEmpty=true;        if (!(((byte)(address[i + maskOffset] & otherAddress[i + maskOffset]) == address[i + maskOffset]) && ((byte)(address[i] & address[i + maskOffset]) == (byte)(otherAddress[i] & address[i + maskOffset])))) {          otherSubsetOfThis=false;        }        if (!(((byte)(otherAddress[i + maskOffset] & address[i + maskOffset]) == otherAddress[i + maskOffset]) && ((byte)(otherAddress[i] & otherAddress[i + maskOffset]) == (byte)(address[i] & otherAddress[i + maskOffset])))) {          thisSubsetOfOther=false;        }      }      if (thisEmpty || otherEmpty) {        if (thisEmpty && otherEmpty)         constraintType=NAME_MATCH; else         if (thisEmpty)         constraintType=NAME_WIDENS; else         constraintType=NAME_NARROWS;      } else       if (otherSubsetOfThis)       constraintType=NAME_NARROWS; else       if (thisSubsetOfOther)       constraintType=NAME_WIDENS; else       constraintType=NAME_SAME_TYPE;    } else     if (otherAddress.length == 8 || otherAddress.length == 32) {      int i=0;      int maskOffset=otherAddress.length / 2;      for (; i < maskOffset; i++) {        if ((address[i] & otherAddress[i + maskOffset]) != otherAddress[i])         break;      }      if (i == maskOffset)       constraintType=NAME_WIDENS; else       constraintType=NAME_SAME_TYPE;    } else     if (address.length == 8 || address.length == 32) {      int i=0;      int maskOffset=address.length / 2;      for (; i < maskOffset; i++) {        if ((otherAddress[i] & address[i + maskOffset]) != address[i])         break;      }      if (i == maskOffset)       constraintType=NAME_NARROWS; else       constraintType=NAME_SAME_TYPE;    } else {      constraintType=NAME_SAME_TYPE;    }  }  return constraintType;}  }
