class C{  public Proposition(Proposition proposition){  this.variableSource=proposition.variableSource;  this.allowedCategories=new boolean[proposition.allowedCategories.length][];  for (int i=0; i < allowedCategories.length; i++) {    this.allowedCategories[i]=new boolean[proposition.allowedCategories[i].length];    System.arraycopy(proposition.allowedCategories[i],0,allowedCategories[i],0,allowedCategories[i].length);  }}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case IPV4:    return isSetIpv4();case PORT:  return isSetPort();case SERVICE_NAME:return isSetService_name();}throw new IllegalStateException();}  }
class C{  public void inc(int value){  if (running)   currentCount+=value;}  }
class C{  public long incrementEpoch(){  this.epoch++;  return this.epoch;}  }
class C{  public IDebugSearch debug(IDebugSearch debugger){  IDebugSearch old=debug;  debug=debugger;  return old;}  }
class C{  final protected boolean rangeCheckTupleIndex(final int index){  if (index < 0 || index > getKeys().size())   throw new IndexOutOfBoundsException();  return true;}  }
class C{  public static void applyEdit(ICompilationUnit cu,TextEdit edit,boolean save,IProgressMonitor monitor) throws CoreException, ValidateEditException {  IFile file=(IFile)cu.getResource();  if (!save || !file.exists()) {    cu.applyTextEdit(edit,monitor);  } else {    if (monitor == null) {      monitor=new NullProgressMonitor();    }    monitor.beginTask(CorextMessages.JavaModelUtil_applyedit_operation,2);    try {      cu.applyTextEdit(edit,new SubProgressMonitor(monitor,1));      cu.save(new SubProgressMonitor(monitor,1),true);    }  finally {      monitor.done();    }  }}  }
class C{  RejectKeySelector(Set<PublicKey> badPublicKeys){  this.badKeySet=badPublicKeys;}  }
class C{  public IndicesAliasesRequestBuilder removeAlias(String index,String[] aliases){  request.removeAlias(index,aliases);  return this;}  }
class C{  public DrawShapes(){  setBackground(Color.WHITE);  addMouseListener(new ClickReceiver());}  }
class C{  @Override public void updateScreen(){  ((GuiButton)buttonList.get(1)).enabled=blockList.getSelectedSlot() != -1 && !XRayMod.xrayBlocks.isEmpty();}  }
class C{  protected ObjectMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseObjectMatrix2D(this.elements,rowOffsets,columnOffsets,0);}  }
class C{  public ParsedContentType(String mimeType){  String contentType=null;  String encoding=null;  if (mimeType != null) {    StringTokenizer tok=new StringTokenizer(mimeType,";");    if (tok.hasMoreTokens()) {      contentType=tok.nextToken().trim();      while (tok.hasMoreTokens()) {        String param=tok.nextToken().trim();        if (param.startsWith("charset=")) {          encoding=param.substring(8).trim();          int l=encoding.length();          if (l > 0) {            if (encoding.charAt(0) == '"') {              encoding=encoding.substring(1);            }            if (encoding.charAt(l - 1) == '"') {              encoding=encoding.substring(0,l - 1);            }          }          break;        }      }    }  }  this.contentType=contentType;  this.encoding=encoding;}  }
class C{  public CharCodeWithModifiers build(){  return new CharCodeWithModifiers(modifiers,charCode);}  }
class C{  protected void draw(DrawContext dc){  if (dc.isOrderedRenderingMode()) {    this.drawOrderedRenderable(dc);    return;  }  if (this.positions.size() < 2)   return;  if (this.currentSpans == null || (this.followTerrain && this.geomGenTimeStamp != dc.getFrameTimeStamp()) || this.geomGenVE != dc.getVerticalExaggeration()) {    this.computeReferenceCenter(dc);    this.eyeDistance=this.referenceCenterPoint.distanceTo3(dc.getView().getEyePoint());    this.makeVertices(dc);    this.geomGenTimeStamp=dc.getFrameTimeStamp();    this.geomGenVE=dc.getVerticalExaggeration();  }  if (this.currentSpans == null || this.currentSpans.size() < 1)   return;  if (this.intersectsFrustum(dc)) {    if (dc.isPickingMode())     this.pickLayer=dc.getCurrentLayer();    dc.addOrderedRenderable(this);  }}  }
class C{  @Override public void updateBlob(String columnLabel,InputStream x) throws SQLException {  updateBlob(columnLabel,x,-1);}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  private void reportException(Exception e){  e.printStackTrace(System.out);  JOptionPane.showMessageDialog(this,StringUtil.getStackTrace(e),"Exception",JOptionPane.ERROR_MESSAGE);}  }
class C{  public boolean userCanEditArch(int connectedUserId,int archId,String entidad) throws Exception {  boolean can=false;  int acsId, parentId;  int archMgrId=Defs.NULL_ID;  ArchivesTable table=new ArchivesTable();  LdapUsersTable usrTable=new LdapUsersTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    acsId=DbSelectFns.selectLongInteger(dbConn,table.getArchHdrTableName(),table.getAcsIdArchHdrColName(),table.getLoadArchIdQual(archId));    archMgrId=DbSelectFns.selectLongInteger(dbConn,usrTable.getOwnershipTableName(),usrTable.getOwnerIdColumnName(),usrTable.getLoadOwnerIdQual(acsId));    can=hasUserAuth(connectedUserId,USER_ACTION_ID_EDIT,archMgrId,Defs.NULL_ID,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public int read(){  if (next >= length) {    return -1;  }  return str.charAt(next++);}  }
class C{  public void outputExampleXML(PrintWriter writer,XMLObjectParser parser,int level){  outputElementRules(writer,parser.getParserName(),parser.getSyntaxRules(),level);}  }
class C{  final public Token NEPrefixOpToken() throws ParseException {  Token t;switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case op_26:    t=jj_consume_token(op_26);  break;case op_29:t=jj_consume_token(op_29);break;case op_58:t=jj_consume_token(op_58);break;case CASESEP:t=jj_consume_token(CASESEP);break;case op_61:t=jj_consume_token(op_61);break;case op_76:t=jj_consume_token(op_76);break;case op_112:t=jj_consume_token(op_112);break;case op_113:t=jj_consume_token(op_113);break;case op_114:t=jj_consume_token(op_114);break;case op_115:t=jj_consume_token(op_115);break;case op_116:t=jj_consume_token(op_116);break;default :jj_la1[1]=jj_gen;jj_consume_token(-1);throw new ParseException();}{if (true) return t;}throw new Error("Missing return statement in function");}  }
class C{  public boolean isBinding(){  return (bindingTransactionID != null);}  }
class C{  public Joint createJoint(JointDef def){  org.jbox2d.dynamics.joints.JointDef jd=def.toJBox2d();  org.jbox2d.dynamics.joints.Joint j=world.createJoint(jd);  Joint joint=null;  if (def.type == JointType.DistanceJoint)   joint=new DistanceJoint(this,(org.jbox2d.dynamics.joints.DistanceJoint)j);  if (def.type == JointType.FrictionJoint)   joint=new FrictionJoint(this,(org.jbox2d.dynamics.joints.FrictionJoint)j);  if (def.type == JointType.GearJoint)   joint=new GearJoint(this,(org.jbox2d.dynamics.joints.GearJoint)j,((GearJointDef)def).joint1,((GearJointDef)def).joint2);  if (def.type == JointType.MotorJoint)   joint=new MotorJoint(this,(org.jbox2d.dynamics.joints.MotorJoint)j);  if (def.type == JointType.MouseJoint)   joint=new MouseJoint(this,(org.jbox2d.dynamics.joints.MouseJoint)j);  if (def.type == JointType.PrismaticJoint)   joint=new PrismaticJoint(this,(org.jbox2d.dynamics.joints.PrismaticJoint)j);  if (def.type == JointType.PulleyJoint)   joint=new PulleyJoint(this,(org.jbox2d.dynamics.joints.PulleyJoint)j);  if (def.type == JointType.RevoluteJoint)   joint=new RevoluteJoint(this,(org.jbox2d.dynamics.joints.RevoluteJoint)j);  if (def.type == JointType.RopeJoint)   joint=new RopeJoint(this,(org.jbox2d.dynamics.joints.RopeJoint)j);  if (def.type == JointType.WeldJoint)   joint=new WeldJoint(this,(org.jbox2d.dynamics.joints.WeldJoint)j);  if (def.type == JointType.WheelJoint)   joint=new WheelJoint(this,(org.jbox2d.dynamics.joints.WheelJoint)j);  if (joint == null)   throw new GdxRuntimeException("Joint type '" + def.type + "' not yet supported by GWT backend");  joints.put(j,joint);  return joint;}  }
class C{  public void paintColorChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static boolean startupEnvironment(boolean isClient){  startup(isClient);  if (!DB.isConnected()) {    log.severe("No Database");    return false;  }  MSystem system=MSystem.get(Env.getCtx());  if (system == null)   return false;  ModelValidationEngine.get();  try {    String className=system.getEncryptionKey();    if (className == null || className.length() == 0) {      className=System.getProperty(SecureInterface.ADEMPIERE_SECURE);      if (className != null && className.length() > 0 && !className.equals(SecureInterface.ADEMPIERE_SECURE_DEFAULT)) {        SecureEngine.init(className);        system.setEncryptionKey(className);        system.save();      }    }    SecureEngine.init(className);    if (isClient)     MClient.get(Env.getCtx(),0); else     MClient.getAll(Env.getCtx());  } catch (  Exception e) {    log.warning("Environment problems: " + e.toString());  }  String className=null;  try {    className="org.compiere.wf.DocWorkflowManager";    Class.forName(className);    className="org.compiere.print.ArchiveEngine";    Class.forName(className);  } catch (  Exception e) {    log.warning("Not started: " + className + " - "+ e.getMessage());  }  if (!isClient)   DB.updateMail();  return true;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:20.650 -0500",hash_original_method="52E48D457BDB05F3C0DFF77F15A840F2",hash_generated_method="FB07D72B8069FE0A14A3A9637B87ABED") public void dump(Printer pw,String prefix){  pw.println(prefix + "inputType=0x" + Integer.toHexString(inputType)+ " imeOptions=0x"+ Integer.toHexString(imeOptions)+ " privateImeOptions="+ privateImeOptions);  pw.println(prefix + "actionLabel=" + actionLabel+ " actionId="+ actionId);  pw.println(prefix + "initialSelStart=" + initialSelStart+ " initialSelEnd="+ initialSelEnd+ " initialCapsMode=0x"+ Integer.toHexString(initialCapsMode));  pw.println(prefix + "hintText=" + hintText+ " label="+ label);  pw.println(prefix + "packageName=" + packageName+ " fieldId="+ fieldId+ " fieldName="+ fieldName);  pw.println(prefix + "extras=" + extras);}  }
class C{  @LargeTest public void testCameraPairwiseScenario07() throws Exception {  genericPairwiseTestCase(Flash.AUTO,Exposure.MIN,WhiteBalance.AUTO,SceneMode.ACTION,PictureSize.SMALL,Geotagging.ON);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.POSTCONDITION___CONSTRAINT_1:    return ((InternalEList<?>)getConstraint_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static String unsignedToString(int value){  if (value >= 0) {    return Integer.toString(value);  } else {    return Long.toString((value) & 0x00000000FFFFFFFFL);  }}  }
class C{  @NotNull public static String unescapePath(@NotNull String path) throws VcsException {  final String QUOTE="\"";  if (path.startsWith(QUOTE) && path.endsWith(QUOTE)) {    path=path.substring(1,path.length() - 1);  }  final int l=path.length();  StringBuilder rc=new StringBuilder(l);  for (int i=0; i < path.length(); i++) {    char c=path.charAt(i);    if (c == '\\') {      i++;      if (i >= l) {        throw new VcsException("Unterminated escape sequence in the path: " + path);      }      final char e=path.charAt(i);switch (e) {case '\\':        rc.append('\\');      break;case 't':    rc.append('\t');  break;case 'n':rc.append('\n');break;case '"':rc.append('"');break;default :if (VcsFileUtil.isOctal(e)) {int n=0;for (int j=i; j < l; ) {if (VcsFileUtil.isOctal(path.charAt(j))) {n++;for (int k=0; k < 3 && j < l && VcsFileUtil.isOctal(path.charAt(j)); k++) {j++;}}if (j + 1 >= l || path.charAt(j) != '\\' || !VcsFileUtil.isOctal(path.charAt(j + 1))) {break;}j++;}byte[] b=new byte[n];n=0;while (i < l) {if (VcsFileUtil.isOctal(path.charAt(i))) {int code=0;for (int k=0; k < 3 && i < l && VcsFileUtil.isOctal(path.charAt(i)); k++) {code=code * 8 + (path.charAt(i) - '0');i++;}b[n++]=(byte)code;}if (i + 1 >= l || path.charAt(i) != '\\' || !VcsFileUtil.isOctal(path.charAt(i + 1))) {break;}i++;}i--;assert n == b.length;final String encoding=GitConfigUtil.getFileNameEncoding();try {rc.append(new String(b,encoding));} catch (UnsupportedEncodingException e1) {throw new IllegalStateException("The file name encoding is unsuported: " + encoding);}} else {throw new VcsException("Unknown escape sequence '\\" + path.charAt(i) + "' in the path: "+ path);}}} else {rc.append(c);}}return rc.toString();}  }
class C{  protected Chronology checkChronology(Chronology chronology){  return DateTimeUtils.getChronology(chronology);}  }
class C{  public void downgradeOnControlSplit(){  final int numSlots=getNumSlots();  for (int i=0; i < numSlots; ++i) {    IsNullValue value=getValue(i);    value=value.downgradeOnControlSplit();    setValue(i,value);  }  if (knownValueMap != null) {    for (    Map.Entry<ValueNumber,IsNullValue> entry : knownValueMap.entrySet()) {      entry.setValue(entry.getValue().downgradeOnControlSplit());    }  }}  }
class C{  public static boolean is(int c){  return (MIN <= c) && (c <= MAX);}  }
class C{  public BBR(double regularization,int maxIterations,Prior prior){  setMaxIterations(maxIterations);  setRegularization(regularization);  setAutoSetRegularization(false);  setPrior(prior);}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  OneStepIterator clone=(OneStepIterator)super.cloneWithReset();  clone.m_iterator=m_iterator;  return clone;}  }
class C{  @Override public boolean test(Field f){  if (isRandoopInstrumentation(f)) {    return false;  }  if (omitFields == null) {    return true;  }  String name=f.getDeclaringClass().getName() + "." + f.getName();  boolean result=!omitFields.contains(name);  if (Log.isLoggingOn()) {    if (result) {      Log.logLine(String.format("Including field '%s'",name));    } else {      Log.logLine(String.format("Not including field '%s'",name));    }  }  return result;}  }
class C{  @SuppressWarnings("fallthrough") void parseSection() throws IOException {  while (true) {switch (ch) {case ']':      return;case '<':switch (ch=in.read()) {case '!':switch (ch=in.read()) {case '[':        parseMarkedSectionDeclaration();      break;case '-':    skipParameterSpace();  expect('>');break;default :if (parseIdentifier(true)) {String str=getString(0);if (str.equals("element")) {  parseElementDeclaration();} else if (str.equals("entity")) {  parseEntityDeclaration();} else if (str.equals("attlist")) {  parseAttlistDeclaration();} else if (str.equals("doctype")) {  parseDocumentTypeDeclaration();} else if (str.equals("usemap")) {  error("ignoring","usemap");  while ((ch != -1) && (ch != '>')) {    ch=in.read();  }  expect('>');} else if (str.equals("shortref")) {  error("ignoring","shortref");  while ((ch != -1) && (ch != '>')) {    ch=in.read();  }  expect('>');} else if (str.equals("notation")) {  error("ignoring","notation");  while ((ch != -1) && (ch != '>')) {    ch=in.read();  }  expect('>');} else {  error("markup");}} else {error("markup");while ((ch != -1) && (ch != '>')) {  ch=in.read();}expect('>');}}}break;case -1:return;default :char str[]={(char)ch};error("invalid.arg","character","'" + new String(str) + "' / "+ ch);case ' ':case '\t':case '\n':ch=in.read();break;}}}  }
class C{  protected boolean[] canHandleZeroTraining(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance){  print("handle zero training instances");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance);  print("...");  Vector<String> accepts=new Vector<String>();  accepts.addElement("train");  accepts.addElement("value");  int numTrain=0, missingLevel=0;  boolean predictorMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,missingLevel,predictorMissing,numTrain,accepts);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public Tasks<VolumeRestRep> activateFullCopy(URI copyId){  return postTasks(getIdUrl() + "/activate",copyId);}  }
class C{  public boolean selectNode(D nodeData,SignalEvent event){  if (selectedNodes.isEmpty()) {    insertAndSelectNode(nodeData,0,true);    return true;  }  if (!hasSameParent(selectedNodes.get(0),nodeData)) {    if (!this.multilevelSelection || event.getShiftKey()) {      return selectSingleNode(nodeData);    }  }  if (event == null || event.getCommandKey()) {    ctrlSelect(nodeData);    return true;  } else {    if (event.getShiftKey()) {      return shiftSelect(nodeData);    }  }  return selectSingleNode(nodeData);}  }
class C{  public int hashCode(){  if (hash == 0) {    hash=Arrays.hashCode(fromKey);  }  return hash;}  }
class C{  public final void testToString() throws IOException {  byte[] encoding=getDerEncoding();  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  assertNotNull(i.toString());}  }
class C{  public BoxAndWhiskerToolTipGenerator(){  super(DEFAULT_TOOL_TIP_FORMAT,NumberFormat.getInstance());}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.send_button:    this.sendBroadcast(new Intent(AGERA_BROADCAST_ACTION));  break;}}  }
class C{  public BasicAttributes(String attrID,Object val,boolean ignoreCase){  this(ignoreCase);  this.put(new BasicAttribute(attrID,val));}  }
class C{  public final static byte[] toSimpleByteArray(char[] carr){  byte[] barr=new byte[carr.length];  for (int i=0; i < carr.length; i++) {    barr[i]=(byte)carr[i];  }  return barr;}  }
class C{  public BitSet pattern(int begin,int end){  assert begin >= firstZero;  BitSet pattern=new BitSet(INITIAL_LENGTH);  pattern.set(begin - firstZero,end - firstZero);  return pattern;}  }
class C{  private static String toCanonicalName(String className){  className=deleteWhitespace(className);  if (className == null) {    throw new NullPointerException("className must not be null.");  } else   if (className.endsWith("[]")) {    StringBuilder classNameBuffer=new StringBuilder();    while (className.endsWith("[]")) {      className=className.substring(0,className.length() - 2);      classNameBuffer.append("[");    }    String abbreviation=abbreviationMap.get(className);    if (abbreviation != null) {      classNameBuffer.append(abbreviation);    } else {      classNameBuffer.append("L").append(className).append(";");    }    className=classNameBuffer.toString();  }  return className;}  }
class C{  public void clear(){  final Segment<K,V>[] segments=this.segments;  for (int j=0; j < segments.length; ++j) {    Segment<K,V> s=segmentAt(segments,j);    if (s != null)     s.clear();  }}  }
class C{  public void addAll(LegendItemCollection collection){  this.items.addAll(collection.items);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public Random(){  setSeed(System.currentTimeMillis() + System.identityHashCode(this));}  }
class C{  public static double logFactorial(int k){  if (k >= 30) {    double r, rr;    final double C0=9.18938533204672742e-01;    final double C1=8.33333333333333333e-02;    final double C3=-2.77777777777777778e-03;    final double C5=7.93650793650793651e-04;    final double C7=-5.95238095238095238e-04;    r=1.0 / (double)k;    rr=r * r;    return (k + 0.5) * Math.log(k) - k + C0 + r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));  } else   return logFactorials[k];}  }
class C{  public Integer loadIdNameValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValues");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  return new Integer(index);}  }
class C{  public Instance startMachine(String workspaceId,MachineConfig machineConfig) throws ServerException, ConflictException, NotFoundException {  try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){    getRunningState(workspaceId);  }   List<String> agents=Collections.singletonList("org.eclipse.che.terminal");  Instance instance=environmentEngine.startMachine(workspaceId,machineConfig,agents);  launchAgents(instance,agents);  try (StripedLocks.WriteLock lock=stripedLocks.acquireWriteLock(workspaceId)){    WorkspaceState workspaceState=workspaces.get(workspaceId);    if (workspaceState == null || workspaceState.status != RUNNING) {      try {        environmentEngine.stopMachine(workspaceId,instance.getId());      } catch (      NotFoundException|ServerException|ConflictException e) {        LOG.error(e.getLocalizedMessage(),e);      }      throw new ConflictException(format("Environment of workspace '%s' was stopped during start of  machine",workspaceId));    }  }   return instance;}  }
class C{  public Builder addPart(Map<String,List<String>> headers,RequestBody body){  return addPart(Part.create(headers,body));}  }
class C{  public static Socket accept(ServerSocket serverSocket,final @ClosureParams(value=SimpleType.class,options="java.net.Socket") Closure closure) throws IOException {  return accept(serverSocket,true,closure);}  }
class C{  public void testCompareEqualScale1(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=18;  String b="4573563567890295784902768787678287";  int bScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  @Override public boolean equals(final Object o){  if (this == o)   return true;  if (!(o instanceof Header)) {    return false;  }  return name.equals(((Header)o).name);}  }
class C{  public void write(final char chars[],final int start,final int length) throws java.io.IOException {  if (m_writer != null)   m_writer.write(chars,start,length);  int lengthx3=(length << 1) + length;  if (lengthx3 >= buf_length) {    flushBuffer();    setBufferSize(2 * lengthx3);  }  if (lengthx3 > buf_length - count) {    flushBuffer();  }  final int n=length + start;  for (int i=start; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf[count++]=(byte)(c); else     if (c < 0x800) {      buf[count++]=(byte)(0xc0 + (c >> 6));      buf[count++]=(byte)(0x80 + (c & 0x3f));    } else {      buf[count++]=(byte)(0xe0 + (c >> 12));      buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf[count++]=(byte)(0x80 + (c & 0x3f));    }  }}  }
class C{  protected void diagnoseNumPaths(Vector paths,int numPathsEliminated,int numUniquePathsEliminated){  if (numPathsEliminated > 0) {    if (paths == m_paths) {      System.err.println("Eliminated " + numPathsEliminated + " total paths!");      System.err.println("Consolodated " + numUniquePathsEliminated + " redundent paths!");    } else {      System.err.println("Eliminated " + numPathsEliminated + " total global paths!");      System.err.println("Consolodated " + numUniquePathsEliminated + " redundent global paths!");    }  }}  }
class C{  public static boolean has(final ASTNode n,final String key){  return n != null && n.properties().keySet().contains(key);}  }
class C{  public static int indexOfIgnoreCase(int startingPosition,String searchIn,String[] searchForSequence,String openingMarkers,String closingMarkers,Set<SearchMode> searchMode){  if ((searchIn == null) || (searchForSequence == null)) {    return -1;  }  int searchInLength=searchIn.length();  int searchForLength=0;  for (  String searchForPart : searchForSequence) {    searchForLength+=searchForPart.length();  }  if (searchForLength == 0) {    return -1;  }  int searchForWordsCount=searchForSequence.length;  searchForLength+=searchForWordsCount > 0 ? searchForWordsCount - 1 : 0;  int stopSearchingAt=searchInLength - searchForLength;  if (startingPosition > stopSearchingAt) {    return -1;  }  if (searchMode.contains(SearchMode.SKIP_BETWEEN_MARKERS) && (openingMarkers == null || closingMarkers == null || openingMarkers.length() != closingMarkers.length())) {    throw new IllegalArgumentException(Messages.getString("StringUtils.15",new String[]{openingMarkers,closingMarkers}));  }  if (Character.isWhitespace(searchForSequence[0].charAt(0)) && searchMode.contains(SearchMode.SKIP_WHITE_SPACE)) {    searchMode=EnumSet.copyOf(searchMode);    searchMode.remove(SearchMode.SKIP_WHITE_SPACE);  }  Set<SearchMode> searchMode2=EnumSet.of(SearchMode.SKIP_WHITE_SPACE);  searchMode2.addAll(searchMode);  searchMode2.remove(SearchMode.SKIP_BETWEEN_MARKERS);  for (int positionOfFirstWord=startingPosition; positionOfFirstWord <= stopSearchingAt; positionOfFirstWord++) {    positionOfFirstWord=indexOfIgnoreCase(positionOfFirstWord,searchIn,searchForSequence[0],openingMarkers,closingMarkers,searchMode);    if (positionOfFirstWord == -1 || positionOfFirstWord > stopSearchingAt) {      return -1;    }    int startingPositionForNextWord=positionOfFirstWord + searchForSequence[0].length();    int wc=0;    boolean match=true;    while (++wc < searchForWordsCount && match) {      int positionOfNextWord=indexOfNextChar(startingPositionForNextWord,searchInLength - 1,searchIn,null,null,searchMode2);      if (startingPositionForNextWord == positionOfNextWord || !startsWithIgnoreCase(searchIn,positionOfNextWord,searchForSequence[wc])) {        match=false;      } else {        startingPositionForNextWord=positionOfNextWord + searchForSequence[wc].length();      }    }    if (match) {      return positionOfFirstWord;    }  }  return -1;}  }
class C{  public boolean isRead() throws RcsPersistentStorageException, RcsGenericException {  try {    return mTransferInf.isRead();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private boolean isMatch(SearchQuery query,MailboxMessage message) throws MailboxException {  final List<SearchQuery.Criterion> criteria=query.getCriterias();  final Collection<MessageUid> recentMessageUids=query.getRecentMessageUids();  boolean result=true;  if (criteria != null) {    for (    SearchQuery.Criterion criterion : criteria) {      if (!isMatch(criterion,message,recentMessageUids)) {        result=false;        break;      }    }  }  return result;}  }
class C{  private CholeskyDecomposition chol(DoubleMatrix2D matrix){  return new CholeskyDecomposition(matrix);}  }
class C{  public void logResults(){  StringBuilder results=new StringBuilder();  results.append("----Results").append("\n");  results.append("All values in [ms]").append("\n\n");  for (int type=0; type < Type.values().length; type++) {    List<Long> typeMeasurements=measurements.get(type);    if (typeMeasurements == null) {      continue;    }    results.append(Type.values()[type].name()).append("\n");    for (    Long measurement : typeMeasurements) {      results.append(measurement).append("\n");    }    results.append(getMedian(typeMeasurements)).append(" MEDIAN").append("\n");    results.append("\n");  }  results.append("----");  log(results.toString());}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  if (null == newChild) {    error(XSLTErrorResources.ER_NULL_CHILD,null);  }  ElemTemplateElement elem=(ElemTemplateElement)newChild;  if (null == m_firstChild) {    m_firstChild=elem;  } else {    ElemTemplateElement last=(ElemTemplateElement)getLastChild();    last.m_nextSibling=elem;  }  elem.m_parentNode=this;  return newChild;}  }
class C{  public Sender(String apiKey){  this(apiKey,10);}  }
class C{  public WeakObjectRegistry(){  super();}  }
class C{  @Override public void onNewFrame(HeadTransform headTransform){  Matrix.rotateM(modelCube,0,TIME_DELTA,0.5f,0.5f,1.0f);  Matrix.setLookAtM(camera,0,0.0f,0.0f,CAMERA_Z,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f);  headTransform.getHeadView(headView,0);  headTransform.getQuaternion(headRotation,0);  checkGLError("onReadyToDraw");}  }
class C{  public static void print(String message){  System.out.println(message);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  Node textImport;  Node textToImport;  String nodeValue;  doc=(Document)load("staffNS",true);  docImp=(Document)load("staffNS",true);  textToImport=doc.createTextNode("Document.importNode test for a TEXT_NODE");  textImport=doc.importNode(textToImport,true);  nodeValue=textImport.getNodeValue();  assertEquals("documentimportnode15","Document.importNode test for a TEXT_NODE",nodeValue);}  }
class C{  boolean stdin(){  return stdin;}  }
class C{  protected boolean checkProofOfWork(boolean throwException) throws VerificationException {  BigInteger target=getDifficultyTargetAsInteger();  BigInteger h=getHash().toBigInteger();  if (h.compareTo(target) > 0) {    if (throwException)     throw new VerificationException("Hash is higher than target: " + getHashAsString() + " vs "+ target.toString(16)); else     return false;  }  return true;}  }
class C{  public void add(int index,int start,int end,int handler,int type){  if (start < end)   entries.add(index,new ExceptionTableEntry(start,end,handler,type));}  }
class C{  @DSComment("not data related") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.348 -0500",hash_original_method="46BCBD91E8C2018C32B65BFBDD14DAE3",hash_generated_method="94EDA31E0B802545D5ED76E97A38F3EB") public SecretKeySpec(byte[] key,String algorithm){  if (key == null) {    throw new IllegalArgumentException("key == null");  }  if (key.length == 0) {    throw new IllegalArgumentException("key.length == 0");  }  if (algorithm == null) {    throw new IllegalArgumentException("algorithm == null");  }  this.algorithm=algorithm;  this.key=new byte[key.length];  System.arraycopy(key,0,this.key,0,key.length);}  }
class C{  public boolean isPresent(String locator){  boolean found=false;  try {    findElement(locator);    logger.info("INFO: Element " + locator + " found");    found=true;  } catch (  NoSuchElementException err) {  }  return found;}  }
class C{  private void writeSpaces(final int count){  for (int i=0; i < count; i++) {    myBuffer.append(' ');  }}  }
class C{  public String toString(){  if (iToString == null) {    String shortName=ClassUtils.getShortClassName(getEnumClass());    iToString=shortName + "[" + getName()+ "="+ getValue()+ "]";  }  return iToString;}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (autoCalculateCenter || mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (autoCalculateCenter || mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  double min=mRenderer.getMinValue();  double max=mRenderer.getMaxValue();  double angleMin=mRenderer.getAngleMin();  double angleMax=mRenderer.getAngleMax();  if (!mRenderer.isMinValueSet() || !mRenderer.isMaxValueSet()) {    int count=mRenderer.getSeriesRendererCount();    for (int i=0; i < count; i++) {      double value=mDataset.getValue(i);      if (!mRenderer.isMinValueSet()) {        min=Math.min(min,value);      }      if (!mRenderer.isMaxValueSet()) {        max=Math.max(max,value);      }    }  }  if (min == max) {    min=min * 0.5;    max=max * 1.5;  }  paint.setColor(mRenderer.getLabelsColor());  double minorTicks=mRenderer.getMinorTicksSpacing();  double majorTicks=mRenderer.getMajorTicksSpacing();  if (minorTicks == MathHelper.NULL_VALUE) {    minorTicks=(max - min) / 30;  }  if (majorTicks == MathHelper.NULL_VALUE) {    majorTicks=(max - min) / 10;  }  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,radius,minorTicks,paint,false);  drawTicks(canvas,min,max,angleMin,angleMax,mCenterX,mCenterY,longRadius,shortRadius,majorTicks,paint,true);  int count=mRenderer.getSeriesRendererCount();  for (int i=0; i < count; i++) {    double angle=getAngleForValue(mDataset.getValue(i),angleMin,angleMax,min,max);    paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());    boolean type=mRenderer.getVisualTypeForIndex(i) == Type.ARROW;    drawNeedle(canvas,angle,mCenterX,mCenterY,shortRadius,type,paint);  }  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  static Counter[][] convertColorList(List[] colors){  final Counter[] EMPTY_COUNTER=new Counter[0];  Counter[][] colorTbl=new Counter[1 << 12][];  for (int i=0; i < colors.length; i++) {    List cl=colors[i];    if (cl == null) {      colorTbl[i]=EMPTY_COUNTER;      continue;    }    int nSlots=cl.size();    colorTbl[i]=(Counter[])cl.toArray(new Counter[nSlots]);    colors[i]=null;  }  return colorTbl;}  }
class C{  private void buildDecorForPage3(SparkleViewPagerLayout parent,SparkleMotion sparkleMotion){  ImageView sunImageView=new ImageView(parent.getContext());  sunImageView.setImageResource(R.drawable.sun);  int sunSize=getResources().getDimensionPixelSize(R.dimen.icon_sun_size);  FrameLayout.LayoutParams lp=new FrameLayout.LayoutParams(sunSize,sunSize);  sunImageView.setLayoutParams(lp);  sunImageView.setTranslationY(-sunSize);  sunImageView.setTranslationX(sunSize);  Decor decor=new Decor.Builder(sunImageView).setPage(Page.pageRange(2,4)).withLayer().build();  TranslationAnimation translationAnimation=new TranslationAnimation(Page.singlePage(2),sunSize,-sunSize,-sunSize / 3f,-sunSize / 3f,true);  sparkleMotion.animate(translationAnimation).on(decor);}  }
class C{  private static void loadPolicies(File jarPathName,CryptoPermissions defaultPolicy,CryptoPermissions exemptPolicy) throws Exception {  JarFile jf=new JarFile(jarPathName);  Enumeration<JarEntry> entries=jf.entries();  while (entries.hasMoreElements()) {    JarEntry je=entries.nextElement();    InputStream is=null;    try {      if (je.getName().startsWith("default_")) {        is=jf.getInputStream(je);        defaultPolicy.load(is);      } else       if (je.getName().startsWith("exempt_")) {        is=jf.getInputStream(je);        exemptPolicy.load(is);      } else {        continue;      }    }  finally {      if (is != null) {        is.close();      }    }    JarVerifier.verifyPolicySigned(je.getCertificates());  }  jf.close();  jf=null;}  }
class C{  public void reply(List<String> responseHeaders,boolean out) throws IOException {  assert (!Thread.holdsLock(SpdyStream.this));  boolean outFinished=false;synchronized (this) {    if (responseHeaders == null) {      throw new NullPointerException("responseHeaders == null");    }    if (isLocallyInitiated()) {      throw new IllegalStateException("cannot reply to a locally initiated stream");    }    if (this.responseHeaders != null) {      throw new IllegalStateException("reply already sent");    }    this.responseHeaders=responseHeaders;    if (!out) {      this.out.finished=true;      outFinished=true;    }  }  connection.writeSynReply(id,outFinished,responseHeaders);}  }
class C{  @Override public void RETURN(){  popFrameAndDisposeCallerParams();}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  public void rotateImage(int degrees){  Matrix matrix=new Matrix();  matrix.postRotate(degrees);  mBitmap=Bitmap.createBitmap(mBitmap,0,0,mBitmap.getWidth(),mBitmap.getHeight(),matrix,true);  setImageBitmap(mBitmap);  mDegreesRotated+=degrees;  mDegreesRotated=mDegreesRotated % 360;}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  private boolean commonCompare(UserGroup userGroup){  if (userGroup == null) {    _log.warn("Invalid user group to compare");    return false;  }  _log.debug("Comparing user groups {}, {}",userGroup.toString(),this.toString());  if (StringUtils.isBlank(this._domain) || StringUtils.isBlank(userGroup._domain) && !this._domain.equalsIgnoreCase(userGroup._domain)) {    String[] toTrace={this._domain,this.getLabel(),userGroup._domain,userGroup.getLabel()};    _log.debug("Domain {} of {} does not match with domain {} of {}.",toTrace);    return false;  }  return true;}  }
class C{  @SafeVarargs public final TestSubscriber<T> assertResult(T... values){  return assertValues(values).assertComplete().assertNoError();}  }
class C{  private void appendNormals(PrintWriter out){  for (  Vertex norm : exportNormals) {    BigDecimal xRound=new BigDecimal(norm.x).setScale(3,RoundingMode.HALF_UP);    BigDecimal yRound=new BigDecimal(norm.y).setScale(3,RoundingMode.HALF_UP);    BigDecimal zRound=new BigDecimal(norm.z).setScale(3,RoundingMode.HALF_UP);    out.print("vn " + xRound.toPlainString() + " "+ yRound.toPlainString()+ " "+ zRound.toPlainString());    out.println();  }}  }
class C{  public void pred_motion(int n,int part_width,int list,int ref,int[] mxmy){  int index8=scan8[n];  int top_ref=this.ref_cache[list][index8 - 8];  int left_ref=this.ref_cache[list][index8 - 1];  int[] A=this.mv_cache[list][index8 - 1];  int[] B=this.mv_cache[list][index8 - 8];  int[] C=new int[0];  int diagonal_ref, match_count;  int[][] pC=new int[][]{C};  diagonal_ref=fetch_diagonal_mv(pC,index8,list,part_width);  C=pC[0];  match_count=((diagonal_ref == ref) ? 1 : 0) + ((top_ref == ref) ? 1 : 0) + ((left_ref == ref) ? 1 : 0);  if (match_count > 1) {    mxmy[0]=mid_pred(A[0],B[0],C[0]);    mxmy[1]=mid_pred(A[1],B[1],C[1]);  } else   if (match_count == 1) {    if (left_ref == ref) {      mxmy[0]=A[0];      mxmy[1]=A[1];    } else     if (top_ref == ref) {      mxmy[0]=B[0];      mxmy[1]=B[1];    } else {      mxmy[0]=C[0];      mxmy[1]=C[1];    }  } else {    if (top_ref == PART_NOT_AVAILABLE && diagonal_ref == PART_NOT_AVAILABLE && left_ref != PART_NOT_AVAILABLE) {      mxmy[0]=A[0];      mxmy[1]=A[1];    } else {      mxmy[0]=mid_pred(A[0],B[0],C[0]);      mxmy[1]=mid_pred(A[1],B[1],C[1]);    }  }}  }
class C{  protected void reallocate(int size){  Element[] oldStack=stack;  stack=new Element[size];  System.arraycopy(oldStack,0,stack,0,oldStack.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.765 -0400",hash_original_method="2B4329C45C54F0B405A84480F694219F",hash_generated_method="83C30DB3C8AD6B3625E3936644787731") public PrefixFileFilter(List<String> prefixes){  this(prefixes,IOCase.SENSITIVE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ContentValues values(Review review){  ContentValues vals=new ContentValues(9);  vals.put(GLOBAL_ID,review.globalId);  vals.put(RESTAURANT_ID,Restaurants.idForGlobalId(review.restaurantId));  vals.put(TYPE_ID,PRIVATE.id);  if (review.userId > 0) {    long contactId=Contacts.idForGlobalId(review.userId);    if (contactId > 0) {      vals.put(CONTACT_ID,contactId);    }  }  vals.put(COMMENTS,review.comments);  vals.put(RATING,review.rating);  vals.put(WRITTEN_ON,review.writtenOn);  vals.put(STATUS_ID,review.status.id);  vals.put(DIRTY,0);  return vals;}  }
class C{  protected void addToMaintenanceQueue(NodePortTuple npt){  if (maintenanceQueue.contains(npt) == false)   maintenanceQueue.add(npt);}  }
class C{  public IncludeResolverException(){  super();}  }
class C{  public void writeDouble(final double d){  writeLong(Double.doubleToLongBits(d));}  }
class C{  public static boolean isRoot(IFile module){  Spec spec=Activator.getSpecManager().getSpecLoaded();  if (spec == null) {    return false;  }  return spec.getRootFile().equals(module);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:44.384 -0500",hash_original_method="1F76692A2F48F09687AD7B289259D6AA",hash_generated_method="6638A09B55ABC6F1BA643425739055B1") private CloneUtils(){}  }
class C{  private BigInteger inflated(){  if (intVal == null) {    return BigInteger.valueOf(intCompact);  }  return intVal;}  }
class C{  private void sendVolumeKey(int keyCode){  assertTrue(keyCode == KeyEvent.KEYCODE_VOLUME_UP || keyCode == KeyEvent.KEYCODE_VOLUME_DOWN);  long down=SystemClock.uptimeMillis();  KeyEvent keyDown=new KeyEvent(down,down,KeyEvent.ACTION_DOWN,keyCode,0,0);  mTalkBack.onKeyEventShared(keyDown);  long up=SystemClock.uptimeMillis();  KeyEvent keyUp=new KeyEvent(down,up,KeyEvent.ACTION_UP,keyCode,0,0);  mTalkBack.onKeyEventShared(keyUp);}  }
class C{  public String delI(String id,String... args){  return TestHarness.deleteById(id,args);}  }
class C{  @Override public String toString(){  return Long.toString(value) + "L";}  }
class C{  public static void expandSelectionDown(final ZyGraph graph){  checkArguments(graph);  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  if (graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {    GraphHelpers.expandSelectionDown(selectableGraph);  } else {    final Collection<INaviViewNode> rawNodes=GraphConverters.convert(graph.getSelectedNodes());    graph.selectNodes(GraphConverters.convert(graph,GraphAlgorithms.getSuccessors(rawNodes,1)),true);  }}  }
class C{  public void update(Settings settings){  mDaoSession.update(settings);}  }
class C{  public static void writeConfigFile(File configFile) throws SQLException, IOException {  writeConfigFile(configFile,new File("."));}  }
class C{  private void updateVariables(){  if (position == 2 || position == 3) {    verticalMoveDirection=1;  } else {    verticalMoveDirection=-1;  }  if (position == 1 || position == 3) {    horizontalMoveDirection=1;  } else {    horizontalMoveDirection=-1;  }}  }
class C{  public void testArriveAndDeregister1(){  Phaser phaser=new Phaser();  try {    phaser.arriveAndDeregister();    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  private Object[] computeNonJavaResources(IResource underlyingResource,PackageFragmentRoot handle){  Object[] resources=NO_NON_JAVA_RESOURCES;  try {    if (underlyingResource.getType() == IResource.FOLDER || underlyingResource.getType() == IResource.PROJECT) {      resources=computeFolderNonJavaResources(handle,(IContainer)underlyingResource,handle.fullInclusionPatternChars(),handle.fullExclusionPatternChars());    }  } catch (  JavaModelException e) {  }  return resources;}  }
class C{  public void add(double[] values){  for (  double value : values) {    add(value);  }}  }
class C{  public AuthorizeException(){  super(401);}  }
class C{  protected boolean isAnyTargetComponentInAreaTest(Geometry testGeom,List targetRepPts){  PointOnGeometryLocator piaLoc=new SimplePointInAreaLocator(testGeom);  for (Iterator i=targetRepPts.iterator(); i.hasNext(); ) {    Coordinate p=(Coordinate)i.next();    int loc=piaLoc.locate(p);    if (loc != Location.EXTERIOR)     return true;  }  return false;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void destroy(){  globalOnErrorCallbacks.clear();}  }
class C{  private static void copy(final InputStream input,final File output) throws IOException {  final byte[] buffer=new byte[BUFFER_SIZE];  final FileOutputStream stream=new FileOutputStream(output);  try {    int read;    while ((read=input.read(buffer)) != -1) {      stream.write(buffer,0,read);    }  }  finally {    stream.close();  }}  }
class C{  public Tuple<Boolean,Timestamp> isIpBanned(final String ip){  boolean found=false;  boolean expired=false;  Timestamp banTill=null;  final String sql="select ip, ban_till from banned_ips where ip = ?";  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement(sql);    ps.setString(1,ip);    final ResultSet rs=ps.executeQuery();    found=rs.next();    if (found) {      banTill=rs.getTimestamp(2);      if (banTill != null && banTill.getTime() < System.currentTimeMillis()) {        s_logger.fine("Ban expired for:" + ip);        expired=true;      }    }    rs.close();    ps.close();  } catch (  final SQLException sqle) {    s_logger.info("Error for testing banned ip existence:" + ip + " error:"+ sqle.getMessage());    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }  if (expired) {    removeBannedIp(ip);    return Tuple.of(false,banTill);  }  return Tuple.of(found,banTill);}  }
class C{  private void updateMnemonics(){  resetMnemonics();  for (int counter=tabPane.getTabCount() - 1; counter >= 0; counter--) {    int mnemonic=tabPane.getMnemonicAt(counter);    if (mnemonic > 0) {      addMnemonic(counter,mnemonic);    }  }}  }
class C{  public static final ByteBuffer bufferToByteBuffer(final byte[] buffer,final ByteOrder order){  final ByteBuffer retBuff=ByteBuffer.wrap(buffer);  retBuff.order(order);  return retBuff;}  }
class C{  public void start(@NonNull Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  private long readLastModified(Resource resource,String i_operation){  String name=resource.getName();  try {    Connection conn=openDbConnection();    try {      ResultSet rs=readData(conn,timestampColumn,name);      try {        if (rs.next()) {          return rs.getTimestamp(timestampColumn).getTime();        } else {          Runtime.error("DataSourceResourceLoader Error: while " + i_operation + " could not find resource "+ name);        }      }  finally {        rs.close();      }    }  finally {      closeDbConnection(conn);    }  } catch (  Exception e) {    Runtime.error("DataSourceResourceLoader Error: error while " + i_operation + " when trying to load resource "+ name+ ": "+ e.toString());  }  return 0;}  }
class C{  public boolean isReadOnly(){  return ((ArffTableModel)getModel()).isReadOnly();}  }
class C{  public static void main(String[] args){  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache atomic semaphore example started.");    IgniteSemaphore syncSemaphore=ignite.semaphore(SEM_NAME,0,false,true);    final String semaphoreName=UUID.randomUUID().toString();    IgniteSemaphore semaphore=ignite.semaphore(semaphoreName,0,false,true);    for (int i=0; i < NUM_CONSUMERS; i++)     ignite.compute().withAsync().run(new Consumer(semaphoreName));    for (int i=0; i < NUM_PRODUCERS; i++)     ignite.compute().withAsync().run(new Producer(semaphoreName));    System.out.println("Master node is waiting for all other nodes to finish...");    syncSemaphore.acquire(NUM_CONSUMERS + NUM_PRODUCERS);  }   System.out.flush();  System.out.println();  System.out.println("Finished semaphore example...");  System.out.println("Check all nodes for output (this node is also part of the cluster).");}  }
class C{  private String initMultipartUpload(String bucketName,String objectName,String contentType) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  Map<String,String> headerMap=new HashMap<>();  if (contentType != null) {    headerMap.put("Content-Type",contentType);  } else {    headerMap.put("Content-Type","application/octet-stream");  }  Map<String,String> queryParamMap=new HashMap<>();  queryParamMap.put("uploads","");  HttpResponse response=executePost(bucketName,objectName,headerMap,queryParamMap,"");  InitiateMultipartUploadResult result=new InitiateMultipartUploadResult();  result.parseXml(response.body().charStream());  response.body().close();  return result.uploadId();}  }
class C{  public static Animation pushUpIn(){  AnimationSet animationSet=new AnimationSet(true);  animationSet.setFillAfter(true);  animationSet.addAnimation(new TranslateAnimation(0,0,100,0));  animationSet.addAnimation(new AlphaAnimation(0.0f,1.0f));  return animationSet;}  }
class C{  public void saveToFileSystem(final String appName,final File propertyFileLocation) throws IOException {  final OutputStream outputStream=new FileOutputStream(propertyFileLocation);  properties.store(outputStream,"=== " + appName + " properties ===");}  }
class C{  public boolean isEnabled(){  return isEnabled;}  }
class C{  public static Encounter addEncounter(List observations,List orderUuids,Patient patient,Date encounterTime,String changeMessage,String encounterTypeName,String locationUuid,@Nullable String entererUuid){  encounterTime=Utils.fixEncounterDateTime(encounterTime);  EncounterService encounterService=Context.getEncounterService();  final Location location=Context.getLocationService().getLocationByUuid(locationUuid);  if (location == null) {    throw new InvalidObjectDataException("Location not found: " + locationUuid);  }  EncounterType encounterType=encounterService.getEncounterType(encounterTypeName);  if (encounterType == null) {    throw new InvalidObjectDataException("Encounter type not found: " + encounterTypeName);  }  @Nullable User enterer=Utils.getUserFromProviderUuid(entererUuid);  List<Obs> obsList=new ArrayList<>();  if (observations != null) {    for (    Object observation : observations) {      Obs obs=jsonObservationToObs(observation,patient,encounterTime,location);      obs.setCreator(enterer);      obsList.add(obs);    }  }  if (orderUuids != null) {    for (    Object item : orderUuids) {      Obs obs=orderUuidToObs((String)item,patient,encounterTime,location);      obs.setCreator(enterer);      obsList.add(obs);    }  }  Encounter encounter=new Encounter();  encounter.setEncounterDatetime(encounterTime);  encounter.setPatient(patient);  encounter.setLocation(location);  encounter.setEncounterType(encounterType);  Provider provider=Utils.getProviderFromUser(enterer);  if (provider != null) {    EncounterRole encounterRole=Context.getEncounterService().getEncounterRoleByUuid(EncounterRole.UNKNOWN_ENCOUNTER_ROLE_UUID);    encounter.setProvider(encounterRole,provider);  }  encounter=encounterService.saveEncounter(encounter);  ObsService obsService=Context.getObsService();  for (  Obs obs : obsList) {    if (obs != null) {      encounter.addObs(obs);      obsService.saveObs(obs,changeMessage);    }  }  return encounter;}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public void animateY(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  @Override public void execute(){  getArgs().setCounter(0);  executeImpl();}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String accumHeader=null;  String outputHeader=null;  int row, col, x, y, x2, y2, nx, ny;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double nFlowDir=0;  boolean isOutlet=false;  double maxFlowAccum=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      accumHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (accumHeader == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double streamsNoData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster accum=new WhiteboxRaster(accumHeader,"r");    if (accum.getNumberRows() != rows || accum.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) != 0 && streams.getValue(row,col) != streamsNoData) {          isOutlet=false;          flowDir=pntr.getValue(row,col);          if (flowDir == 0) {            isOutlet=true;          } else {            c=(int)(Math.log(flowDir) / LnOf2);            if (streams.getValue(row + dY[c],col + dX[c]) == 0 || streams.getValue(row + dY[c],col + dX[c]) == streamsNoData) {              isOutlet=true;            }          }          if (isOutlet) {            x=col;            y=row;            flag=true;            do {              output.setValue(y,x,1.0);              maxFlowAccum=0;              nx=0;              ny=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                nFlowDir=pntr.getValue(y2,x2);                if (streams.getValue(y2,x2) > 0 && nFlowDir == inflowingVals[c]) {                  if (accum.getValue(y2,x2) > maxFlowAccum) {                    nx=x2;                    ny=y2;                    maxFlowAccum=accum.getValue(y2,x2);                  }                }              }              if (maxFlowAccum > 0) {                x=nx;                y=ny;              } else {                flag=false;              }            } while (flag);          }        } else         if (streams.getValue(row,col) == streamsNoData) {          output.setValue(row,col,streamsNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void removeClassFactory(ClassFactory classFactory){  getUserClassFactories().remove(classFactory);}  }
class C{  public CompilationPlan(NormalMethod m,OptimizationPlanElement[] op,InstrumentationPlan mp,OptOptions opts){  this(m,null,op,mp,opts);}  }
class C{  private static int joint(Collection<?> c1,Collection<?> c2){  if (c1.size() < c2.size()) {    return -1;  } else   if (c2.size() < c1.size()) {    return 1;  }  Collection<Object> c3=new ArrayList<Object>();  c3.addAll(c1);  c3.removeAll(c2);  if (c3.size() > 0) {    return -1;  }  c3.addAll(c2);  c3.removeAll(c1);  if (c3.size() > 0) {    return 1;  }  return 0;}  }
class C{  private static List<Territory> findTersWithUnitsMatching(final GameData data,final PlayerID player,final Match<Unit> unitCondition){  final CompositeMatch<Unit> unitMatch=new CompositeMatchAnd<>(unitCondition,Matches.unitIsOwnedBy(player));  final List<Territory> result=new ArrayList<>();  final Collection<Territory> allTers=data.getMap().getTerritories();  for (  final Territory ter : allTers) {    if (ter.getUnits().someMatch(unitMatch)) {      result.add(ter);    }  }  return result;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/discover") public TaskList discoverStorageSystemsAll(){  Iterator<URI> storageIter=_dbClient.queryByType(StorageSystem.class,true).iterator();  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>();  while (storageIter.hasNext()) {    URI storage=storageIter.next();    String taskId=UUID.randomUUID().toString();    tasks.add(new AsyncTask(StorageSystem.class,storage,taskId));  }  BlockController controller=getController(BlockController.class,"vnxblock");  return discoverStorageSystems(tasks,controller);}  }
class C{  private void commitIvrZones(MDSDialog dialog,IvrZoneset activeIvrZoneset){  dialog.ivrZonesetName(activeIvrZoneset.getName(),true);  dialog.ivrCommit();  dialog.waitForIvrZonesetActivate();}  }
class C{  public String go(){  return createXCalDocument().write(outputProperties);}  }
class C{  @Ignore @Test public void test_DR_NO_ACK_PGS_2Nodes_Put_ValidateQueue_Receiver() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    createCacheInVMs(nyPort,vm2);    vm2.invoke(null);    vm2.invoke(null);    createCacheInVMs(lnPort,vm4,vm5);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    startSenderInVMs("ln1",vm4,vm5);    vm4.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm2.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  private Figure readEllipseElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readShapeAttributes(elem,a);  double cx=toWidth(elem,readAttribute(elem,"cx","0"));  double cy=toHeight(elem,readAttribute(elem,"cy","0"));  double rx=toWidth(elem,readAttribute(elem,"rx","0"));  double ry=toHeight(elem,readAttribute(elem,"ry","0"));  Figure figure=factory.createEllipse(cx,cy,rx,ry,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  public Bindings add(String property,JTextComponent c,String defaultValue){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,defaultValue));}  }
class C{  public boolean validTree(int n,int[][] edges){  int[] nums=new int[n];  for (int i=0; i < n; i++) {    nums[i]=i;  }  for (int i=0; i < edges.length; i++) {    int x=find(nums,edges[i][0]);    int y=find(nums,edges[i][1]);    if (x == y) {      return false;    }    nums[x]=y;  }  return edges.length == n - 1;}  }
class C{  public static void verifyIssue(IssueLocation location,IssueSeverity severity,IssueType type,String description,String ramlLocation,Issue errorIssue){  if (location != null) {    assertEquals(location,errorIssue.getLocation());  }  if (severity != null) {    assertEquals(severity,errorIssue.getSeverity());  }  if (type != null) {    assertEquals(type,errorIssue.getType());  }  if (description != null) {    assertEquals(description,errorIssue.getDescription());  }  if (ramlLocation != null) {    assertEquals(ramlLocation,errorIssue.getRamlLocation());  }}  }
class C{  protected SecretKey engineGenerateSecret(KeySpec keySpec) throws InvalidKeySpecException {  if (!(keySpec instanceof PBEKeySpec)) {    throw new InvalidKeySpecException("Invalid key spec");  }  return new PBEKey((PBEKeySpec)keySpec,type);}  }
class C{  protected JComponent addSettingComponent(final GridBagPanel p,final ISetting<?> setting,final ISettingsBean settings,final ActionListener customListener){  JComponent settingComp;  if (setting instanceof IFixedValuesSetting) {    p.addSingle(settingComp=LSettingsGui.createSettingComboBox((IFixedValuesSetting<?>)setting,settings,customListener));    settingComp.setPreferredSize(new Dimension(settingComp.getPreferredSize().width + 5,settingComp.getPreferredSize().height));  } else   if (setting instanceof IBoolSetting) {    p.c.fill=GridBagConstraints.NONE;    p.addDouble(settingComp=LSettingsGui.createSettingCheckBox((IBoolSetting)setting,settings,customListener));    p.c.fill=GridBagConstraints.HORIZONTAL;  } else   if (setting instanceof IIntSetting) {    p.addSingle(settingComp=LSettingsGui.createSettingSpinner((IIntSetting)setting,settings,customListener));  } else   if (setting instanceof IValidatedStringSetting) {    p.addSingle(settingComp=LSettingsGui.createSettingIndicatorTextField((IValidatedStringSetting)setting,settings,customListener));    if (setting.getViewHints().getColumns() != null)     ((IndicatorTextField)settingComp).textField.setColumns(setting.getViewHints().getColumns());  } else   if (setting instanceof IMultilineStringSetting) {    p.addSingle(new XScrollPane(settingComp=LSettingsGui.createSettingTextArea((IMultilineStringSetting)setting,settings,customListener),false));    if (setting.getViewHints().getRows() != null)     ((XTextArea)settingComp).setRows(setting.getViewHints().getRows());    if (setting.getViewHints().getColumns() != null)     ((XTextArea)settingComp).setColumns(setting.getViewHints().getColumns());  } else   if (setting instanceof IStringSetting) {    p.addSingle(settingComp=LSettingsGui.createSettingTextField((IStringSetting)setting,settings,customListener));    if (setting.getViewHints().getColumns() != null)     ((XTextField)settingComp).setColumns(setting.getViewHints().getColumns());  } else   if (setting instanceof IPathSetting) {    p.addSingle(settingComp=LSettingsGui.createSettingPathField((IPathSetting)setting,settings,customListener));    if (setting.getViewHints().getDialogTitle() != null)     ((PathField)settingComp).fileChooser.setDialogTitle(setting.getViewHints().getDialogTitle());    if (setting.getViewHints().getColumns() != null)     ((PathField)settingComp).textField.setColumns(setting.getViewHints().getColumns());  } else   throw new RuntimeException("Unhandled setting type: " + setting.getClass());  return settingComp;}  }
class C{  public SubjectKeyIdentifier(SubjectPublicKeyInfo spki){  this.keyidentifier=getDigest(spki);}  }
class C{  private String checkBalance(){  int acctSchema_ID=0;  StringBuffer sql=new StringBuffer("SELECT SUM(COALESCE(Month_0_Amt,0)),SUM(COALESCE(Month_1_Amt,0)),SUM(COALESCE(Month_2_Amt,0)), " + "SUM(COALESCE(Month_3_Amt,0)), SUM(COALESCE(Month_4_Amt,0)), SUM(COALESCE(Month_5_Amt,0))," + "SUM(COALESCE(Month_6_Amt,0)), SUM(COALESCE(Month_7_Amt,0)), SUM(COALESCE(Month_8_Amt,0)), "+ "SUM(COALESCE(Month_9_Amt,0)), SUM(COALESCE(Month_10_Amt,0)), SUM(COALESCE(Month_11_Amt,0)) ,C_AcctSchema_ID "+ "FROM I_Budget  "+ "WHERE I_IsImported='N'").append(clientCheck).append(docCheck).append("Group by BatchDocumentNo,C_AcctSchema_ID");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    rs=pstmt.executeQuery();    if (rs.next()) {      BigDecimal month_0_Amt=rs.getBigDecimal(1);      BigDecimal month_1_Amt=rs.getBigDecimal(2);      BigDecimal month_2_Amt=rs.getBigDecimal(3);      BigDecimal month_3_Amt=rs.getBigDecimal(4);      BigDecimal month_4_Amt=rs.getBigDecimal(5);      BigDecimal month_5_Amt=rs.getBigDecimal(6);      BigDecimal month_6_Amt=rs.getBigDecimal(7);      BigDecimal month_7_Amt=rs.getBigDecimal(8);      BigDecimal month_8_Amt=rs.getBigDecimal(9);      BigDecimal month_9_Amt=rs.getBigDecimal(10);      BigDecimal month_10_Amt=rs.getBigDecimal(11);      BigDecimal month_11_Amt=rs.getBigDecimal(12);      acctSchema_ID=rs.getInt(13);      if (month_0_Amt.compareTo(BigDecimal.ZERO) != 0 || month_1_Amt.compareTo(BigDecimal.ZERO) != 0 || month_2_Amt.compareTo(BigDecimal.ZERO) != 0 || month_3_Amt.compareTo(BigDecimal.ZERO) != 0 || month_4_Amt.compareTo(BigDecimal.ZERO) != 0 || month_5_Amt.compareTo(BigDecimal.ZERO) != 0 || month_6_Amt.compareTo(BigDecimal.ZERO) != 0 || month_7_Amt.compareTo(BigDecimal.ZERO) != 0 || month_8_Amt.compareTo(BigDecimal.ZERO) != 0 || month_9_Amt.compareTo(BigDecimal.ZERO) != 0 || month_10_Amt.compareTo(BigDecimal.ZERO) != 0 || month_11_Amt.compareTo(BigDecimal.ZERO) != 0) {        log.info("Amount Balance != 0");        return "Amount balance(DR-CR) of all journals are not zero";      } else {        MAcctSchema schema=MAcctSchema.get(getCtx(),acctSchema_ID);        MPeriod period=MPeriod.get(getCtx(),schema.getC_Period_ID());        finCalendar=period.getC_Calendar_ID();        return "Document Ok";      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  return null;}  }
class C{  private void disposeDecoder(IoSession session){  ProtocolDecoder decoder=(ProtocolDecoder)session.removeAttribute(DECODER);  if (decoder == null) {    return;  }  try {    decoder.dispose(session);  } catch (  Exception e) {    LOGGER.warn("Failed to dispose: " + decoder.getClass().getName() + " ("+ decoder+ ')');  }}  }
class C{  private long longBits(long index,long[] bits,int i64){  if ((index & (1L << i64)) == 0) {    return 0L;  } else {    return bits[Long.bitCount(index & ((1L << i64) - 1))];  }}  }
class C{  private boolean isLogFileMatchesRegEx(String fileName,String regEx){  boolean matches;  Pattern fileNamePattern=Pattern.compile(regEx);  matches=fileNamePattern.matcher(fileName).matches();  return matches;}  }
class C{  protected synchronized void activate(boolean completeHookup){  activated=true;  if (DEBUG) {    Debug.output("OMDrawingTool: activate()");  }  if (currentEditable != null && graphicAttributes != null) {    if (completeHookup) {      graphicAttributes.setTo(currentEditable.getGraphic());      currentEditable.getGraphic().setVisible(false);    }    currentEditable.addEOMGListener(this);    if (currentEditable.getStateMachine().getState() instanceof GraphicSelectedState) {      currentEditable.updateCurrentState(null);    }  }  if (!isMask(PASSIVE_MOUSE_EVENT_BEHAVIOR_MASK) && completeHookup) {    if (mouseDelegator != null) {      if (Debug.debugging("drawingtooldetail")) {        Debug.output("OMDrawingTool.activate() mousemode connecting to MouseDelegator");      }      formerMouseMode=mouseDelegator.getActiveMouseMode();      mouseDelegator.setActiveMouseMode(dtmm);    } else     if (canvas != null) {      if (Debug.debugging("drawingtooldetail")) {        Debug.output("OMDrawingTool.activate() mousemode connecting directly to canvas");      }      canvas.addMouseListener(dtmm);      canvas.addMouseMotionListener(dtmm);    } else {      Debug.error("Drawing Tool can't find a map to work with");    }  }  if (canvas != null) {    if (canvas instanceof MapBean && completeHookup) {      ((MapBean)canvas).addPaintListener(this);      ((MapBean)canvas).addProjectionListener(this);    }    canvas.repaint();  }  if (completeHookup) {    showPalette();  }}  }
class C{  public static void initialize(){  IdentityKeyStore.getInstance().initialize();  oneTimePreKeys=PreKeyStore.getInstance().initialize();  final IdentityKeyPair identityKeyPair=IdentityKeyStore.getInstance().getIdentityKeyPair();  SignedPreKeyStore.getInstance().initialize(identityKeyPair,initialSignedKeyID);  SettingsService.setPassword(RandomUtils.randomAlphanumerical(passwordLength));  SettingsService.setSignalingKey(RandomUtils.randomAlphanumerical(52));  SettingsService.setInstallID(RandomUtils.generateInstallId());  initialized=true;}  }
class C{  public boolean removeTrace(final Trace trace){  boolean result=traceList.remove(trace);  if (result) {    remove(trace);    revalidate();  }  return result;}  }
class C{  protected final int minKeys(){  return btree.minChildren - 1;}  }
class C{  protected void fillContext(final IoSession session,final Map<String,String> context){  if (mdcKeys.contains(MdcKey.handlerClass)) {    context.put(MdcKey.handlerClass.name(),session.getHandler().getClass().getName());  }  if (mdcKeys.contains(MdcKey.remoteAddress)) {    context.put(MdcKey.remoteAddress.name(),session.getRemoteAddress().toString());  }  if (mdcKeys.contains(MdcKey.localAddress)) {    context.put(MdcKey.localAddress.name(),session.getLocalAddress().toString());  }  if (session.getTransportMetadata().getAddressType() == InetSocketAddress.class) {    InetSocketAddress remoteAddress=(InetSocketAddress)session.getRemoteAddress();    InetSocketAddress localAddress=(InetSocketAddress)session.getLocalAddress();    if (mdcKeys.contains(MdcKey.remoteIp)) {      context.put(MdcKey.remoteIp.name(),remoteAddress.getAddress().getHostAddress());    }    if (mdcKeys.contains(MdcKey.remotePort)) {      context.put(MdcKey.remotePort.name(),String.valueOf(remoteAddress.getPort()));    }    if (mdcKeys.contains(MdcKey.localIp)) {      context.put(MdcKey.localIp.name(),localAddress.getAddress().getHostAddress());    }    if (mdcKeys.contains(MdcKey.localPort)) {      context.put(MdcKey.localPort.name(),String.valueOf(localAddress.getPort()));    }  }}  }
class C{  public void redrawPolitics(){  this.removeAll();  this.drawPoliticsUI();  this.revalidate();}  }
class C{  public WriteBuffer putShort(int index,short value){  buff.putShort(index,value);  return this;}  }
class C{  protected boolean switchProfiles(IProfile newSelection){  if (newSelection == null) {    return false;  }  if (mCurrentProfile == newSelection) {    return true;  }  if (mAlternativeProfileHeaderSwitching) {    int prevSelection=-1;    if (mProfileFirst == newSelection) {      prevSelection=1;    } else     if (mProfileSecond == newSelection) {      prevSelection=2;    } else     if (mProfileThird == newSelection) {      prevSelection=3;    }    IProfile tmp=mCurrentProfile;    mCurrentProfile=newSelection;    if (prevSelection == 1) {      mProfileFirst=tmp;    } else     if (prevSelection == 2) {      mProfileSecond=tmp;    } else     if (prevSelection == 3) {      mProfileThird=tmp;    }  } else {    if (mProfiles != null) {      ArrayList<IProfile> previousActiveProfiles=new ArrayList<>(Arrays.asList(mCurrentProfile,mProfileFirst,mProfileSecond,mProfileThird));      if (previousActiveProfiles.contains(newSelection)) {        int position=-1;        for (int i=0; i < 4; i++) {          if (previousActiveProfiles.get(i) == newSelection) {            position=i;            break;          }        }        if (position != -1) {          previousActiveProfiles.remove(position);          previousActiveProfiles.add(0,newSelection);          mCurrentProfile=previousActiveProfiles.get(0);          mProfileFirst=previousActiveProfiles.get(1);          mProfileSecond=previousActiveProfiles.get(2);          mProfileThird=previousActiveProfiles.get(3);        }      } else {        mProfileThird=mProfileSecond;        mProfileSecond=mProfileFirst;        mProfileFirst=mCurrentProfile;        mCurrentProfile=newSelection;      }    }  }  if (mOnlySmallProfileImagesVisible) {    mProfileThird=mProfileSecond;    mProfileSecond=mProfileFirst;    mProfileFirst=mCurrentProfile;  }  buildProfiles();  return false;}  }
class C{  public static boolean endsWithIgnoreCase(final String base,final String end){  if (base.length() < end.length()) {    return false;  }  return base.regionMatches(true,base.length() - end.length(),end,0,end.length());}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static synchronized void addFromProperties(Properties props) throws Exception {  Set<Object> keys=props.keySet();  Iterator<Object> keysI=keys.iterator();  while (keysI.hasNext()) {    String baseType=(String)keysI.next();    String implementations=props.getProperty(baseType);    if (implementations != null && implementations.length() > 0) {      String[] parts=implementations.split(",");      for (      String impl : parts) {        PluginManager.addPlugin(baseType,impl.trim(),impl.trim());      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void cleanup(){}  }
class C{  @NonNull public AnalyticsEvent putAttribute(@NonNull String attributeName,@NonNull Object value){  if (this.attributes == null) {    this.attributes=new HashMap<>();  }  this.attributes.put(attributeName,value);  return this;}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.writeUint16(bytes1.length);  out.write(bytes1);  out.writeUint16(bytes2.length);  out.write(bytes2);  if (bytes3 != null) {    out.writeUint16(bytes3.length);    out.write(bytes3);  }  if (hash != null) {    out.writeUint16(hash.length);    out.write(hash);  }}  }
class C{  @Override public int execute(final HttpState state,final HttpConnection conn) throws IOException, HttpException {  LOG.trace("enter ConnectMethod.execute(HttpState, HttpConnection)");  final int code=super.execute(state,conn);  if (LOG.isDebugEnabled()) {    LOG.debug("CONNECT status code " + code);  }  return code;}  }
class C{  public SurfaceCircle(){}  }
class C{  public synchronized void addListener(Callback listener){  BetterWeakReference<Callback> r=new BetterWeakReference<Callback>(listener);  if (!mListenersUniversal.contains(r)) {    mListenersUniversal.add(r);  }}  }
class C{  protected Function<HttpRequest,String> createHeaderGetter(String str){  String header=str.toLowerCase();  return null;}  }
class C{  void checkBinomialSquare(double a,double b){  DD add=new DD(a);  DD bdd=new DD(b);  DD aPlusb=add.add(bdd);  DD abSq=aPlusb.multiply(aPlusb);  DD a2dd=add.multiply(add);  DD b2dd=bdd.multiply(bdd);  DD ab=add.multiply(bdd);  DD sum=b2dd.add(ab).add(ab);  DD diff=abSq.subtract(a2dd);  DD delta=diff.subtract(sum);  printBinomialSquareDouble(a,b);  boolean isSame=diff.equals(sum);  assertTrue(isSame);  boolean isDeltaZero=delta.isZero();  assertTrue(isDeltaZero);}  }
class C{  @Deprecated static public XpaTrafficController instance(){  log.error("Deprecated instance method called");  return null;}  }
class C{  public void parse(Reader in,ContentHandler contentHandler,boolean isResume) throws IOException, ParseException {  if (!isResume) {    reset(in);    handlerStatusStack=new LinkedList();  } else {    if (handlerStatusStack == null) {      isResume=false;      reset(in);      handlerStatusStack=new LinkedList();    }  }  LinkedList statusStack=handlerStatusStack;  try {    do {switch (status) {case S_INIT:        contentHandler.startJSON();      nextToken();switch (token.type) {case Yytoken.TYPE_VALUE:      status=S_IN_FINISHED_VALUE;    statusStack.addFirst(new Integer(status));  if (!contentHandler.primitive(token.value))   return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:nextToken();if (token.type == Yytoken.TYPE_EOF) {contentHandler.endJSON();status=S_END;return;} else {status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}case S_IN_OBJECT:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));if (!contentHandler.startObjectEntry(key)) return;} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endObject()) return;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:nextToken();switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.primitive(token.value)) return;if (!contentHandler.endObjectEntry()) return;break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();statusStack.addFirst(new Integer(S_IN_PAIR_VALUE));status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;default :status=S_IN_ERROR;}break;case S_IN_PAIR_VALUE:statusStack.removeFirst();status=peekStatus(statusStack);if (!contentHandler.endObjectEntry()) return;break;case S_IN_ARRAY:nextToken();switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (!contentHandler.primitive(token.value)) return;break;case Yytoken.TYPE_RIGHT_SQUARE:if (statusStack.size() > 1) {statusStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}if (!contentHandler.endArray()) return;break;case Yytoken.TYPE_LEFT_BRACE:status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));if (!contentHandler.startObject()) return;break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));if (!contentHandler.startArray()) return;break;default :status=S_IN_ERROR;}break;case S_END:return;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {status=S_IN_ERROR;throw ie;}catch (ParseException pe) {status=S_IN_ERROR;throw pe;}catch (RuntimeException re) {status=S_IN_ERROR;throw re;}catch (Error e) {status=S_IN_ERROR;throw e;}status=S_IN_ERROR;throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public static FloatBuffer createFloatBuffer(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  public final void addCaretListener(CaretListener listener){  listenerList.add(CaretListener.class,listener);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public void disconnect(){}  }
class C{  @Override public File directory(){  return mOutputDir;}  }
class C{  public static int rgbFromCmyk(float[] cmyk){  float cyan=cmyk[0];  float magenta=cmyk[1];  float yellow=cmyk[2];  float black=cmyk[3];  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);}  }
class C{  private boolean isFiltered(String tweet){  Map<String,Object> tweetJson=null;  try {    tweetJson=MAPPER.readValue(tweet,new TypeReference<Map<String,Object>>(){    });  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to parse the String into map: " + tweet,e);  }  Object propVal=null;  if (tweetJson == null) {    propVal="";  } else {    if (tweetJson.containsKey("id") && tweetJson.containsKey("created_at") && tweetJson.containsKey("text")&& tweetJson.containsKey("user")) {      propVal=tweetJson.get(this.propName);      if (propVal.equals(this.propValue)) {        return true;      }    }  }  return false;}  }
class C{  private void addSwitchCase(Node switchBlock,Node caseExpression,Node statements){  if (switchBlock.getType() != Token.BLOCK)   throw Kit.codeBug();  Jump switchNode=(Jump)switchBlock.getFirstChild();  if (switchNode.getType() != Token.SWITCH)   throw Kit.codeBug();  Node gotoTarget=Node.newTarget();  if (caseExpression != null) {    Jump caseNode=new Jump(Token.CASE,caseExpression);    caseNode.target=gotoTarget;    switchNode.addChildToBack(caseNode);  } else {    switchNode.setDefault(gotoTarget);  }  switchBlock.addChildToBack(gotoTarget);  switchBlock.addChildToBack(statements);}  }
class C{  public void addAttribute(Attribute attribute,Object value,int beginIndex,int endIndex){  if (attribute == null) {    throw new NullPointerException();  }  if (beginIndex < 0 || endIndex > length() || beginIndex >= endIndex) {    throw new IllegalArgumentException("Invalid substring range");  }  addAttributeImpl(attribute,value,beginIndex,endIndex);}  }
class C{  public boolean pathHasUncheckedChildren(TreePath path){  Object node=path.getLastPathComponent();  int childrenNumber=this.model.getChildCount(node);  for (int childIndex=0; childIndex < childrenNumber; childIndex++) {    TreePath childPath=path.pathByAddingChild(this.model.getChild(node,childIndex));    if (isPathGreyed(childPath) | !isPathChecked(childPath)) {      return true;    }  }  return false;}  }
class C{  public void incNumHAQueuedEvents(long incAmount){  this._stats.incLong(_numHAQueuedEventsId,incAmount);}  }
class C{  @Override protected void initListeners(){  this.startBT.setOnClickListener(this);}  }
class C{  @Override public void generateAtom(XmlWriter w,String elementName) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(2);  attrs.add(new XmlWriter.Attribute("type","xhtml"));  if (lang != null) {    attrs.add(new XmlWriter.Attribute("xml:lang",lang));  }  XmlBlob.startElement(w,Namespaces.atomNs,elementName,xhtml,attrs,null);  XmlBlob.endElement(w,Namespaces.atomNs,elementName,xhtml);}  }
class C{  private JobStatus yarnStateToSamzaStatus(YarnApplicationState yarnState){switch (yarnState) {case RUNNING:    return JobStatus.STARTED;case NEW:case NEW_SAVING:case SUBMITTED:case ACCEPTED:  return JobStatus.STARTING;case FINISHED:case FAILED:case KILLED:default :return JobStatus.STOPPED;}}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  public void addDefaultIndexNames() throws ConfigurationException {  UUID cfId=Schema.instance.getId(ksName,cfName);  if (cfId != null) {    CFMetaData cfm=Schema.instance.getCFMetaData(cfId);    for (    ColumnDefinition newDef : allColumns()) {      if (!cfm.columnMetadata.containsKey(newDef.name.bytes) || newDef.getIndexType() == null)       continue;      String oldIndexName=cfm.getColumnDefinition(newDef.name).getIndexName();      if (oldIndexName == null)       continue;      if (newDef.getIndexName() != null && !oldIndexName.equals(newDef.getIndexName()))       throw new ConfigurationException("Can't modify index name: was '" + oldIndexName + "' changed to '"+ newDef.getIndexName()+ "'.");      newDef.setIndexName(oldIndexName);    }  }  Set<String> existingNames=existingIndexNames(null);  for (  ColumnDefinition column : allColumns()) {    if (column.getIndexType() != null && column.getIndexName() == null) {      String baseName=getDefaultIndexName(cfName,column.name);      String indexName=baseName;      int i=0;      while (existingNames.contains(indexName))       indexName=baseName + '_' + (++i);      column.setIndexName(indexName);    }  }}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){  if (right - left <= leafsize) {    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {      double dist=norm.distance(query,relation.get(iter));      countObjectAccess();      countDistanceComputation();      if (dist <= radius) {        res.add(dist,iter);      }    }    return;  }  final int middle=(left + right) >>> 1;  O split=relation.get(iter.seek(middle));  countObjectAccess();  final double delta=split.doubleValue(axis) - query.doubleValue(axis);  final boolean onleft=(delta >= 0);  final boolean onright=(delta <= 0);  final boolean close=(Math.abs(delta) <= radius);  final int next=(axis + 1) % dims;  if (close) {    double dist=norm.distance(query,split);    countDistanceComputation();    if (dist <= radius) {      assert (iter.getOffset() == middle);      res.add(dist,iter);    }  }  if (left < middle && (onleft || close)) {    kdRangeSearch(left,middle,next,query,res,iter,radius);  }  if (middle + 1 < right && (onright || close)) {    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);  }}  }
class C{  public Document read(String xml) throws Exception {  if (xml.toLowerCase().indexOf("<?xml") > -1)   return read(new ByteArrayInputStream(xml.getBytes())); else   return read(new File(xml));}  }
class C{  public static int between(int val,int min,int max){  return Math.max(Math.min(val,max),min);}  }
class C{  @RequestMapping(value="/SAML2/SLO") public void sloDefaultTenantBindingError(Locale locale,HttpServletResponse response) throws IOException {  logger.info("SLO binding error! The client locale is " + locale.toString() + ", DEFAULT tenant");  ValidationResult vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest","Binding");  String message=vr.getMessage(messageSource,locale);  response.sendError(vr.getResponseCode(),message);  logger.info("Responded with ERROR " + vr.getResponseCode() + ", message "+ message);}  }
class C{  @Override public VersionClient version(){  return null;}  }
class C{  public PSPIdentifierForSellerException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean importOpenSsl(){  return jrbOpenSsl.isSelected();}  }
class C{  public void addNotificationsIds(Notification notification){  this.getNotificationsIds().add(notification.getId());}  }
class C{  public Address loadAddress(Offset offset){  return null;}  }
class C{  protected boolean scheduleOnce(Key key,final Steppable event){synchronized (lock) {    return _scheduleOnce(key,event);  }}  }
class C{  private void jbInit() throws Exception {  metalColorBorder=new TitledBorder(s_res.getString("MetalColors"));  adempiereColorBorder=new TitledBorder(s_res.getString("AdempiereColors"));  fontBorder=new TitledBorder(s_res.getString("AdempiereFonts"));  fontPanel.setBorder(fontBorder);  fontPanel.setOpaque(false);  this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  primary1.setToolTipText(s_res.getString("Primary1Info"));  primary1.setText(s_res.getString("Primary1"));  primary1.addActionListener(this);  primary2.setToolTipText(s_res.getString("Primary2Info"));  primary2.setText(s_res.getString("Primary2"));  primary2.addActionListener(this);  primary3.setToolTipText(s_res.getString("Primary3Info"));  primary3.setText(s_res.getString("Primary3"));  primary3.addActionListener(this);  secondary1.setToolTipText(s_res.getString("Secondary1Info"));  secondary1.setText(s_res.getString("Secondary1"));  secondary1.addActionListener(this);  secondary2.setToolTipText(s_res.getString("Secondary2Info"));  secondary2.setText(s_res.getString("Secondary2"));  secondary2.addActionListener(this);  secondary3.setToolTipText(s_res.getString("Secondary3Info"));  secondary3.setText(s_res.getString("Secondary3"));  secondary3.addActionListener(this);  controlFont.setToolTipText(s_res.getString("ControlFontInfo"));  controlFont.setText(s_res.getString("ControlFont"));  controlFont.addActionListener(this);  systemFont.setToolTipText(s_res.getString("SystemFontInfo"));  systemFont.setText(s_res.getString("SystemFont"));  systemFont.addActionListener(this);  userFont.setToolTipText(s_res.getString("UserFontInfo"));  userFont.setText(s_res.getString("UserFont"));  userFont.addActionListener(this);  smallFont.setText(s_res.getString("SmallFont"));  smallFont.addActionListener(this);  mandatory.setToolTipText(s_res.getString("MandatoryInfo"));  mandatory.setText(s_res.getString("Mandatory"));  mandatory.addActionListener(this);  error.setToolTipText(s_res.getString("ErrorInfo"));  error.setText(s_res.getString("Error"));  error.addActionListener(this);  info.setToolTipText(s_res.getString("InfoInfo"));  info.setText(s_res.getString("Info"));  info.addActionListener(this);  windowFont.setText(s_res.getString("WindowTitleFont"));  windowFont.addActionListener(this);  menuFont.setText(s_res.getString("MenuFont"));  menuFont.addActionListener(this);  white.setToolTipText(s_res.getString("WhiteInfo"));  white.setText(s_res.getString("White"));  white.addActionListener(this);  black.setToolTipText(s_res.getString("BlackInfo"));  black.setText(s_res.getString("Black"));  black.addActionListener(this);  inactive.setToolTipText(s_res.getString("InactiveInfo"));  inactive.setText(s_res.getString("Inactive"));  inactive.addActionListener(this);  txt_ok.setToolTipText(s_res.getString("TextOKInfo"));  txt_ok.setText(s_res.getString("TextOK"));  txt_ok.addActionListener(this);  txt_error.setToolTipText(s_res.getString("TextIssueInfo"));  txt_error.setText(s_res.getString("TextIssue"));  txt_error.addActionListener(this);  confirmPanel.setLayout(confirmLayout);  confirmLayout.setAlignment(FlowLayout.RIGHT);  centerPanel.setLayout(centerLayout);  metalColorPanel.setBorder(metalColorBorder);  metalColorPanel.setOpaque(false);  metalColorPanel.setLayout(metalColorLayout);  adempiereColorPanel.setLayout(adempiereColorLayout);  adempiereColorPanel.setBorder(adempiereColorBorder);  adempiereColorPanel.setOpaque(false);  metalColorLayout.setColumns(3);  metalColorLayout.setHgap(5);  metalColorLayout.setRows(3);  metalColorLayout.setVgap(5);  adempiereColorLayout.setColumns(4);  adempiereColorLayout.setHgap(5);  adempiereColorLayout.setRows(2);  adempiereColorLayout.setVgap(5);  fontPanel.setLayout(fontLayout);  fontLayout.setColumns(3);  fontLayout.setHgap(5);  fontLayout.setRows(2);  fontLayout.setVgap(5);  centerLayout.setVgap(5);  fontBorder.setTitle(s_res.getString("Fonts"));  confirmPanel.setOpaque(false);  this.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.add(bCancel,null);  confirmPanel.add(bOK,null);  this.getContentPane().add(centerPanel,BorderLayout.CENTER);  centerPanel.add(metalColorPanel,BorderLayout.NORTH);  metalColorPanel.add(primary1,null);  metalColorPanel.add(primary2,null);  metalColorPanel.add(primary3,null);  metalColorPanel.add(secondary1,null);  metalColorPanel.add(secondary2,null);  metalColorPanel.add(secondary3,null);  metalColorPanel.add(white,null);  metalColorPanel.add(black,null);  centerPanel.add(adempiereColorPanel,BorderLayout.CENTER);  adempiereColorPanel.add(txt_error,null);  centerPanel.add(fontPanel,BorderLayout.SOUTH);  fontPanel.add(controlFont,null);  fontPanel.add(systemFont,null);  fontPanel.add(menuFont,null);  fontPanel.add(userFont,null);  fontPanel.add(windowFont,null);  fontPanel.add(smallFont,null);  adempiereColorPanel.add(error,null);  adempiereColorPanel.add(inactive,null);  adempiereColorPanel.add(txt_ok,null);  adempiereColorPanel.add(mandatory,null);  adempiereColorPanel.add(info,null);  bCancel.addActionListener(this);  bOK.addActionListener(this);}  }
class C{  boolean isFixedDistanceFromPhiIterator(Operand op){  if (op.similar(phiLoopIterator)) {    return true;  } else {    Instruction opInstr=definingInstruction(op);    if ((opInstr.getOpcode() == INT_ADD_opcode) || (opInstr.getOpcode() == INT_SUB_opcode)) {      Operand val1=Binary.getVal1(opInstr);      Operand val2=Binary.getVal2(opInstr);      return ((val1.isConstant() && isFixedDistanceFromPhiIterator(val2)) || (val2.isConstant() && isFixedDistanceFromPhiIterator(val1)));    } else {      return false;    }  }}  }
class C{  public boolean noError(){  return status != ConnectionStatus.ERROR;}  }
class C{  static Table newRandomTable(TestSynth config){  Table table=new Table(config);  table.name="T_" + config.randomIdentifier();  int len=config.random().getLog(10) + 1;  table.columns=new Column[len];  for (int i=0; i < len; i++) {    Column col=Column.getRandomColumn(config);    table.columns[i]=col;  }  if (config.random().getBoolean(90)) {    int pkLen=config.random().getLog(len);    table.primaryKeys=new Column[pkLen];    for (int i=0; i < pkLen; i++) {      Column pk=null;      do {        pk=table.columns[config.random().getInt(len)];      } while (pk.getPrimaryKey());      table.primaryKeys[i]=pk;      pk.setPrimaryKey(true);      pk.setNullable(false);    }  }  return table;}  }
class C{  private void removeItemFromPlaylist(){  if (MainApplication.getInstance().PlayerQueue == null || MainApplication.getInstance().PlayerQueue.PlaylistItems == null) {    return;  }  int index=-1;  for (int i=0; i < MainApplication.getInstance().PlayerQueue.PlaylistItems.size(); i++) {    if (MainApplication.getInstance().PlayerQueue.PlaylistItems.get(i).Id.equalsIgnoreCase(mItem.getId())) {      index=i;      break;    }  }  if (index == -1)   return;  MainApplication.getInstance().PlayerQueue.PlaylistItems.remove(index);}  }
class C{  public static void d(String tag,String s,Throwable e){  if (LDJSLOG.DEBUG >= LOGLEVEL)   Log.d(tag,s,e);}  }
class C{  private void generateMethodInvocation(){  asm.emitLAddrToc(S0,ArchEntrypoints.reflectiveMethodInvokerInstructionsField.getOffset());  peekAddr(T0,4);  asm.emitMTCTR(S0);  peekAddr(T1,3);  peekAddr(T2,2);  peekAddr(T3,1);  peekAddr(T4,0);  asm.emitBCCTRL();  discardSlots(5);}  }
class C{  public final long size(){  return size;}  }
class C{  public static void registerEntity(EntityDefinition entityDef){  registerEntity(entityDef.getService(),entityDef);}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public JTwainException(String message){  super(message);}  }
class C{  public void close() throws SQLException {  if (this.connection != null) {    this.connection.close();  }}  }
class C{  public Vertex weakAdd(Vertex source,Vertex type,Vertex target){  source.addWeakRelationship(type,target,0.1f);  return source;}  }
class C{  public static <T,X extends Throwable>T orElseThrow(T primary,Supplier<? extends X> exceptionSupplier) throws X {  if (primary != null) {    return primary;  } else {    throw exceptionSupplier.get();  }}  }
class C{  public CSelectVisibleSubtreeNodesAction(final ZyGraph graph,final ITreeNode<CTag> tag){  super("Select Visible Subtree Nodes");  m_graph=Preconditions.checkNotNull(graph,"IE02319: Graph argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE02320: Tag can't be null");}  }
class C{  private void updateNotification(){  mNotificationManager.notify(this,mPlayerPlaylist.getCurrentTrack(),mIsPaused);}  }
class C{  private Label createTableColumnLabel(Composite parent,String title,int width){  Label columnLabel=new Label(parent,SWT.NONE);  columnLabel.setText(title);  GridData gridData=new GridData(SWT.LEFT,SWT.BOTTOM,false,false);  gridData.horizontalIndent=0;  gridData.verticalIndent=0;  gridData.widthHint=width;  columnLabel.setLayoutData(gridData);  return columnLabel;}  }
class C{  @Override public void updateClassifier(BayesNet bayesNet,Instance instance) throws Exception {  throw new Exception("updateClassifier does not apply to BMA estimator");}  }
class C{  public void testResourcesAvailable(){  new GalicianAnalyzer().close();}  }
class C{  public static String toString(String[] values){  String valuesString=null;  StringBuffer valuesBuffer=new StringBuffer();  for (  String value : values) {    valuesBuffer.append(value).append(",");  }  if (StringUtils.isNotBlank(valuesBuffer.toString())) {    valuesString=valuesBuffer.substring(0,valuesBuffer.length() - 1);  }  return valuesString == null ? valuesBuffer.toString() : valuesString;}  }
class C{  @Override protected SpatialSparseGraph newGraph(Attributes attrs){  CoordinateReferenceSystem crs=SpatialGraphML.newCRS(attrs);  builder=new SpatialSparseGraphBuilder(crs);  return builder.createGraph();}  }
class C{  public Action(ActionType at){  if (isMoveAction(at)) {    throw new IllegalArgumentException("Attempted to create action " + "of type " + at + " with no direction.");  }  type=at;  dir=null;  x=UNDEFINED;  y=UNDEFINED;}  }
class C{  private void ensureValid(){  if (!isValid(this)) {    throw new NullReferenceException();  }}  }
class C{  public static <K,V>void readKV(Map<Id<K>,Id<V>> yFromX,String key,Class<K> keyType,String value,Class<V> valueType,String filename){  try {    log.info("Starting to read some key-value pairs from " + filename);    BufferedReader reader=IOUtils.getBufferedReader(filename);    String header=reader.readLine();    Map<String,Integer> idxFromKey=Utils.createIdxFromKey(header,null);    String line=reader.readLine();    while (line != null) {      String[] parts=line.split("[\t\n]+");      int idx=idxFromKey.get(value);      Id<V> valueId=Id.create(parts[idx],valueType);      idx=idxFromKey.get(key);      Id<K> keyId=Id.create(parts[idx],keyType);      yFromX.put(keyId,valueId);      line=reader.readLine();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  log.info("DONE with reading some key-value pairs.");}  }
class C{  public boolean isWarehouseManaged(String facilityId){  boolean isWarehouseManaged=false;  try {    if ("WIP".equals(getProduct().getString("productTypeId"))) {      return false;    }    List<GenericValue> pfs=null;    if (UtilValidate.isEmpty(facilityId)) {      pfs=getProduct().getRelated("ProductFacility",null,null,true);    } else {      pfs=getProduct().getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true);    }    if (UtilValidate.isEmpty(pfs)) {      if (getSubstitutedNode() != null && getSubstitutedNode().getProduct() != null) {        if (UtilValidate.isEmpty(facilityId)) {          pfs=getSubstitutedNode().getProduct().getRelated("ProductFacility",null,null,true);        } else {          pfs=getSubstitutedNode().getProduct().getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true);        }      }    }    if (UtilValidate.isNotEmpty(pfs)) {      for (int i=0; i < pfs.size(); i++) {        GenericValue pf=pfs.get(i);        if (UtilValidate.isNotEmpty(pf.get("minimumStock")) && UtilValidate.isNotEmpty(pf.get("reorderQuantity"))) {          isWarehouseManaged=true;          break;        }      }    }  } catch (  GenericEntityException gee) {    Debug.logError("Problem in BOMNode.isWarehouseManaged()",module);  }  return isWarehouseManaged;}  }
class C{  public static Constraint<CharSequence> containsNumber(){  return new ContainsNumberConstraint();}  }
class C{  static int tieBreakOrder(Object a,Object b){  int d;  if (a == null || b == null || (d=a.getClass().getName().compareTo(b.getClass().getName())) == 0)   d=(System.identityHashCode(a) <= System.identityHashCode(b) ? -1 : 1);  return d;}  }
class C{  public MaxLengthListener(Printer printer,ConstructLengths constructLengths,Set<Rules> enabledRules){  this.constructLengths=constructLengths;  this.printer=printer;  this.enabledRules=enabledRules;}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  private void writeEnd(){  long now=System.nanoTime();  writeTime+=now - lastTs;  lastTs=now;}  }
class C{  public DocumentEvent(){}  }
class C{  public TestCasePanel(){  try {    jbInit();  } catch (  Exception ex) {    ex.printStackTrace();  }  initialized=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.310 -0500",hash_original_method="A430190530104247A836CC3C4CF00C2B",hash_generated_method="3168EBC3DC3D190D018250C829F5256A") public static void dumpCursor(Cursor cursor){  dumpCursor(cursor,System.out);}  }
class C{  private boolean checkAddress(final INaviView view){  if (m_module == null) {    return false;  }  final INaviFunction function=m_module.getFunction(view);  if (function == null) {    return false;  }  return function.getAddress().toString().toLowerCase().contains(m_text.toLowerCase());}  }
class C{  public void evict(RepositoryProxyCache proxyCache){  File cacheFile=buildFile(proxyCache.getCacheDir(),proxyCache.getFileName(),DEFAULT_FILE_NAME);  new Thread(new CacheClear(fileManager,cacheFile)).start();}  }
class C{  public static String formatDateDay(Date date){  return getSimplDateFormat(DF_DEF).format(date);}  }
class C{  public Light newLight(String systemName,String userName){  return (Light)newNamedBean(systemName,userName);}  }
class C{  public SpatialDataInputs(final LinkWeightMethod linkWeightMethod,final String initialCaseLocation,final String compareToCaseLocation){  this.isComparing=true;  this.linkWeigthMethod=linkWeightMethod;  this.initialCase=initialCaseLocation;  this.compareToCase=compareToCaseLocation;  setInitialFiles();  this.compareToCaseConfig=this.compareToCase + "/output_config.xml";  this.compareToCaseNetwork=this.compareToCase + "/output_network.xml.gz";  int compareToCaseLastIteration=LoadMyScenarios.getLastIteration(this.compareToCaseConfig);  this.compareToCaseEmissionEventsFile=this.compareToCase + "/ITERS/it." + compareToCaseLastIteration+ "/"+ compareToCaseLastIteration+ ".emission.events.xml.gz";  this.compareToCaseEventsFile=this.compareToCase + "/ITERS/it." + compareToCaseLastIteration+ "/"+ compareToCaseLastIteration+ ".events.xml.gz";  this.compareToCasePlans=this.compareToCase + "/output_plans.xml.gz";}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  final float stroke=paint.getStrokeWidth();  if (renderer.isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStrokeWidth(renderer.getPointStrokeWidth());    paint.setStyle(Style.STROKE);  }  int length=points.size();  PointStyle ps=renderer.getPointStyle();  if (ps == PointStyle.X) {    paint.setStrokeWidth(renderer.getPointStrokeWidth());    for (int i=0; i < length; i+=2) {      drawX(canvas,paint,points.get(i),points.get(i + 1));    }  } else {    if (ps == PointStyle.CIRCLE) {      for (int i=0; i < length; i+=2) {        drawCircle(canvas,paint,points.get(i),points.get(i + 1));      }    } else {      if (ps == PointStyle.TRIANGLE) {        float[] path=new float[6];        for (int i=0; i < length; i+=2) {          drawTriangle(canvas,paint,path,points.get(i),points.get(i + 1));        }      } else {        if (ps == PointStyle.SQUARE) {          for (int i=0; i < length; i+=2) {            drawSquare(canvas,paint,points.get(i),points.get(i + 1));          }        } else {          if (ps == PointStyle.DIAMOND) {            float[] path=new float[8];            for (int i=0; i < length; i+=2) {              drawDiamond(canvas,paint,path,points.get(i),points.get(i + 1));            }          } else {            if (ps == PointStyle.POINT) {              for (int i=0; i < length; i+=2) {                canvas.drawPoint(points.get(i),points.get(i + 1),paint);              }            }          }        }      }    }  }  paint.setStrokeWidth(stroke);}  }
class C{  synchronized boolean makeReady(boolean enforceInitializing){  if (isDestroyed()) {    this.dlock.checkDestroyed();  }  if (!enforceInitializing) {    if (!isInitializing()) {      return false;    }  }  assertInitializing();  if (logger.isTraceEnabled(LogMarker.DLS)) {    StringBuffer sb=new StringBuffer("DLockGrantor " + this.dlock.getName() + " initialized with:");    for (Iterator tokens=grantTokens.values().iterator(); tokens.hasNext(); ) {      sb.append("\n\t" + tokens.next());    }    logger.trace(LogMarker.DLS,sb.toString());  }  this.state=READY;  this.whileInitializing.countDown();  this.thread.start();  return true;}  }
class C{  private void sizeIt(){  m_frame.pack();  Dimension size=m_frame.getPreferredSize();  size.width=WINDOW_WIDTH;  m_frame.setSize(size);}  }
class C{  @Override protected void initializeWorkList(){  if (Dominators.COMPUTE_POST_DOMINATORS) {    for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {      BasicBlock bb=e.nextElement();      addCellAppearancesToWorkList(getCell(bb));    }  } else {    DominatorCell first=(DominatorCell)getCell(ir.cfg.entry());    addCellAppearancesToWorkList(first);  }}  }
class C{  public void testFindUserOpenLdap() throws Exception {  LdapManager mgr=getLdapOpenLdap();  List ret=null;  OrFilter filter=new OrFilter();  filter.or(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GIVEN_NAME),"*ngomila*"));  filter.or(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_SURNAME),"*ngomila*"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddUserClasses(true);    ret=mgr.findUser(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(1,ret.size());  assertEquals("1",((LdapEntryVO)ret.get(0)).getAttributeSingleValue(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GUID)));}  }
class C{  public void createAthorNPC(StendhalRPZone zone){  final SpeakerNPC npc=new AthorHouseSeller("Cyk","athor",houseTax);  zone.add(npc);}  }
class C{  @Override public void close(){  try {    if (client != null) {      client.close();    }  } catch (  IOException e) {    throw new RuntimeException("Failed to deallocate client held resources");  }}  }
class C{  public X509CertPath(InputStream is,String encoding) throws CertificateException {  super("X.509");switch (encoding) {case PKIPATH_ENCODING:    certs=parsePKIPATH(is);  break;case PKCS7_ENCODING:certs=parsePKCS7(is);break;default :throw new CertificateException("unsupported encoding");}}  }
class C{  public boolean spatialUsable(SingleIndexScan index,int nequals){  ExpressionNode nextColumn=index.getColumns().get(nequals);  if (!(nextColumn instanceof SpecialIndexExpression))   return false;  SpecialIndexExpression indexExpression=(SpecialIndexExpression)nextColumn;  SpecialIndexExpression.Function spatialFunction=indexExpression.getFunction();  List<ExpressionNode> operands=indexExpression.getOperands();  boolean matched=false;  for (  ConditionExpression condition : conditions) {    ExpressionNode spatialJoinTo=null;    if (condition instanceof FunctionCondition) {      FunctionCondition fcond=(FunctionCondition)condition;      spatialJoinTo=matchSpatialPredicate(spatialFunction,operands,fcond);    } else     if (condition instanceof ComparisonCondition) {      ComparisonCondition ccond=(ComparisonCondition)condition;switch (ccond.getOperation()) {case LE:case LT:        spatialJoinTo=matchDistanceLatLon(spatialFunction,operands,ccond.getLeft(),ccond.getRight());      break;case GE:case GT:    spatialJoinTo=matchDistanceLatLon(spatialFunction,operands,ccond.getRight(),ccond.getLeft());  break;}}if (spatialJoinTo != null) {index.setLowComparand(spatialJoinTo,true);index.setHighComparand(spatialJoinTo,true);index.setOrderEffectiveness(IndexScan.OrderEffectiveness.NONE);matched=true;break;}}if (!matched) {if (sortAllowed && (queryGoal.getOrdering() != null)) {List<OrderByExpression> orderBy=queryGoal.getOrdering().getOrderBy();if (orderBy.size() == 1) {ExpressionNode spatialJoinTo=matchZnear(spatialFunction,operands,orderBy.get(0));if (spatialJoinTo != null) {  index.setLowComparand(spatialJoinTo,true);  index.setOrderEffectiveness(IndexScan.OrderEffectiveness.SORTED);  matched=true;}}}if (!matched) return false;}index.setCovering(determineCovering(index));index.setCostEstimate(estimateCostSpatial(index));return true;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private void createWorld(){  for (int i=0; i < NUM_LINES; i++) {    addRandomLine(WIDTH,HEIGHT);  }  for (int i=0; i < NUM_RECTANGLES; i++) {    addRandomRectangle(WIDTH,HEIGHT);  }  for (int i=0; i < NUM_POINTS; i++) {    addRandomPoint(WIDTH,HEIGHT);  }  agentField.setMBR(objects.getMBR());  nearbyField.setMBR(objects.getMBR());}  }
class C{  public boolean computeAngleOffset(){  if (mFinished) {    return false;  }  long systemClock=AnimationUtils.currentAnimationTimeMillis();  long timePassed=systemClock - mStartTime;  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float sc=(float)timePassed / mDuration;    mCurrAngle=mStartAngle + Math.round(mDeltaAngle * sc);  break;case FLING_MODE:float timePassedSeconds=timePassed / 1000.0f;float distance;if (mVelocity < 0) {distance=mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);} else {distance=-mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);}mCurrAngle=mStartAngle - Math.signum(mVelocity) * Math.round(distance);break;}return true;} else {mFinished=true;return false;}}  }
class C{  protected void internal_batch_nearest_neighbor(final int k,final CoverTreeNode query_node,Stack<Stack<d_node>> cover_sets,Stack<d_node> zero_set,int current_scale,int max_scale,MyHeap upper_k,Stack<NeighborList> results) throws Exception {  if (current_scale > max_scale) {    brute_nearest(k,query_node,zero_set,upper_k,results);  } else {    if (query_node.scale <= current_scale && query_node.scale != 100) {      CoverTreeNode query_chi;      Stack<d_node> new_zero_set=new Stack<d_node>();      Stack<Stack<d_node>> new_cover_sets=new Stack<Stack<d_node>>();      MyHeap new_upper_k=new MyHeap(k);      for (int i=1; i < query_node.num_children; i++) {        query_chi=query_node.children.element(i);        setter(new_upper_k,upper_k.peek().distance + query_chi.parent_dist,k);        copy_zero_set(query_chi,new_upper_k,zero_set,new_zero_set);        copy_cover_sets(query_chi,new_upper_k,cover_sets,new_cover_sets,current_scale,max_scale);        internal_batch_nearest_neighbor(k,query_chi,new_cover_sets,new_zero_set,current_scale,max_scale,new_upper_k,results);      }      new_cover_sets=null;      new_zero_set=null;      new_upper_k=null;      internal_batch_nearest_neighbor(k,query_node.children.element(0),cover_sets,zero_set,current_scale,max_scale,upper_k,results);    } else {      Stack<d_node> cover_set_i=getCoverSet(current_scale,cover_sets);      halfsort(cover_set_i);      max_scale=descend(query_node,upper_k,current_scale,max_scale,cover_sets,zero_set);      cover_set_i.clear();      current_scale++;      internal_batch_nearest_neighbor(k,query_node,cover_sets,zero_set,current_scale,max_scale,upper_k,results);    }  }}  }
class C{  void bugMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.bug",JavaCompiler.version());  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  protected void printPerson(String label,String name,String uri){  if (label != null) {    System.out.printf("\t%s\n",label);  }  System.out.print("\t\t" + name);  if (uri != null) {    System.out.println("\t" + uri);  } else {    System.out.println();  }}  }
class C{  public int size(){  return totalKeySet().size();}  }
class C{  private static void loadNodeTags(final CConnection connection,final List<INaviViewNode> nodes,final CTagManager nodeTagManager) throws SQLException {  final HashMap<Integer,INaviViewNode> idNodeMap=new HashMap<Integer,INaviViewNode>();  final HashMap<Integer,CTag> idTagMap=new HashMap<Integer,CTag>();  final StringBuffer range=new StringBuffer();  boolean isFirst=true;  for (  final INaviViewNode node : nodes) {    range.append(isFirst ? "" : ",");    range.append(node.getId());    isFirst=false;    idNodeMap.put(node.getId(),node);  }  if (isFirst) {    return;  }  final String query=String.format("SELECT node_id, tag_id FROM %s WHERE node_id IN (%s)",CTableNames.TAGGED_NODES_TABLE,range.toString());  final ResultSet resultSet=connection.executeQuery(query,true);  try {    final Set<Integer> tagIds=new HashSet<Integer>();    while (resultSet.next()) {      tagIds.add(resultSet.getInt("tag_id"));    }    final Collection<CTag> tags=CTagHelpers.findTags(nodeTagManager.getRootTag(),tagIds);    for (    final CTag tag : tags) {      idTagMap.put(tag.getId(),tag);    }    resultSet.beforeFirst();    while (resultSet.next()) {      final INaviViewNode node=idNodeMap.get(resultSet.getInt("node_id"));      final CTag tag=idTagMap.get(resultSet.getInt("tag_id"));      ((CNaviViewNode)node).tagNodeSilent(tag);    }  }  finally {    resultSet.close();  }}  }
class C{  @Override public IContainer<?,GraphObjectToAdd> buildValues(final IScope scope,final IContainer objects){  final IList list=GamaListFactory.create();  if (!(objects instanceof NodesToAdd)) {    for (    final Object o : objects.iterable(scope)) {      list.add(buildValue(scope,o));    }  } else {    for (    final Object o : objects.iterable(scope)) {      list.add(buildValue(scope,new NodeToAdd(o)));    }  }  return list;}  }
class C{  private void showEnrollementFailedErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.error_enrollment_failed),getResources().getString(R.string.error_enrollment_failed_detail),getResources().getString(R.string.button_ok),senderIdFailedClickListener);}  }
class C{  @Deprecated static public SRCPTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new SRCP TrafficController object");    }    self=new SRCPTrafficController();  }  return self;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE_ALIAS;}  }
class C{  public void testConstructorNegativeParties(){  try {    new Phaser(-1);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  private static void writeFile(File file,List<String> lines) throws IOException {  if (!file.exists())   file.createNewFile();  FileWriter fw=new FileWriter(file);  BufferedWriter Bw=new BufferedWriter(fw);  PrintWriter pw=new PrintWriter(Bw);  for (  String line : lines)   pw.println(line);  Bw.close();  fw.close();  pw.close();}  }
class C{  public Builder withTimestamp(long timestamp){  buffer.writeLong(8,timestamp);  return this;}  }
class C{  public void focusGained(FocusEvent e){}  }
class C{  public String toHTML(){  StringBuilder builder=new StringBuilder();  int numClasses=classes.size();  builder.append("<table>\n");  builder.append("<tr><th class=\"empty-space\" colspan=\"2\" rowspan=\"2\">");  builder.append(String.format("<th class=\"predicted-class-header\" colspan=\"%d\">Predicted Class</th></tr>\n",numClasses + 1));  builder.append("<tr>");  for (  T predicted : classes) {    builder.append("<th class=\"predicted-class-header\">");    builder.append(predicted);    builder.append("</th>");  }  builder.append("<th class=\"predicted-class-header\">Total</th>");  builder.append("</tr>\n");  String firstColumnLabel=String.format("<tr><th class=\"actual-class-header\" rowspan=\"%d\">Actual Class</th>",numClasses + 1);  for (  T actual : classes) {    builder.append(firstColumnLabel);    firstColumnLabel="<tr>";    builder.append(String.format("<th class=\"actual-class-header\" >%s</th>",actual));    for (    T predicted : classes) {      builder.append("<td class=\"count-element\">");      builder.append(getCount(actual,predicted));      builder.append("</td>");    }    builder.append("<td class=\"count-element\">");    builder.append(getActualTotal(actual));    builder.append("</td>");    builder.append("</tr>\n");  }  builder.append("<tr><th class=\"actual-class-header\">Total</th>");  for (  T predicted : classes) {    builder.append("<td class=\"count-element\">");    builder.append(getPredictedTotal(predicted));    builder.append("</td>");  }  builder.append("<td class=\"empty-space\"></td>\n");  builder.append("</tr>\n");  builder.append("</table>\n");  return builder.toString();}  }
class C{  protected static BitSet interleave(BitSet evenBits,BitSet oddBits){  int n=evenBits.size() + oddBits.size();  BitSet bits=new BitStore();  for (int i=0; i < n; i++) {    if (i % 2 == 0) {      bits.set(n - i - 1,evenBits.get((n - i - 1) / 2));    } else {      bits.set(n - i - 1,oddBits.get((n - i - 1) / 2));    }  }  return bits;}  }
class C{  protected boolean isActionExcluded(Action action){  return false;}  }
class C{  public Pid(Integer localId,Integer clientPidMapReference){  if (localId == null) {    throw new NullPointerException("Local ID must not be null.");  }  this.localId=localId;  this.clientPidMapReference=clientPidMapReference;}  }
class C{  @Override public synchronized void write(byte[] out){  mBtWorkerThread.write(out);}  }
class C{  public long[] selectZero(long rank,long[] dest,final int offset,final int length){  if (length == 0)   return dest;  long s=selectZero(rank);  dest[offset]=s;  int curr=(int)(s / Long.SIZE);  long window=~bits[curr] & -1L << s;  window&=window - 1;  for (int i=1; i < length; i++) {    while (window == 0)     window=~bits[++curr];    dest[offset + i]=curr * Long.SIZE + Long.numberOfTrailingZeros(window);    window&=window - 1;  }  return dest;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public RDFParseException(String msg){  this(msg,-1,-1);}  }
class C{  public CloseAction(final WorkspaceComponent workspaceComponent){  super("Close");  if (workspaceComponent == null) {    throw new IllegalArgumentException("networkDesktopComponent must not be null");  }  this.workspaceComponent=workspaceComponent;  putValue(this.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_W,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(SHORT_DESCRIPTION,"Close this component");}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  protected CCSplitRows(int r,float d){  super(ccGridSize.ccg(1,r),d);  rows=r;}  }
class C{  public int[] readAllInts(){  String[] fields=readAllStrings();  int[] vals=new int[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Integer.parseInt(fields[i]);  return vals;}  }
class C{  public void addFormat(Format format){  getFormats().add(format);}  }
class C{  private String distinctMACAddress(){  String macAddr="AA:BB:CC:DD:";  lastOctet++;  if (lastOctet > 255) {    secondToLastOctet++;    lastOctet=0;  }  return String.format(macAddr + "%02X:%02X",secondToLastOctet,lastOctet);}  }
class C{  public Object readSaver(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  String name;  String file;  String dir;  String prefix;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=Class.forName(node.getAttribute(ATT_CLASS)).newInstance();  children=XMLDocument.getChildTags(node);  file=null;  dir=null;  prefix=null;  Object relativeB=null;  boolean relative=false;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_FILE)) {      file=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_DIR)) {      dir=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_PREFIX)) {      prefix=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_RELATIVE_PATH)) {      relativeB=readFromXML(child);      if (relativeB instanceof Boolean) {        relative=((Boolean)relativeB).booleanValue();      }    } else {      readFromXML(result,name,child);    }  }  if ((file != null) && (file.length() == 0)) {    file=null;  }  if ((dir != null) && (prefix != null)) {    ((weka.core.converters.AbstractFileSaver)result).setDir(dir);    ((weka.core.converters.AbstractFileSaver)result).setFilePrefix(prefix);  }  if (result instanceof weka.core.converters.FileSourcedConverter) {    ((weka.core.converters.FileSourcedConverter)result).setUseRelativePath(relative);  }  return result;}  }
class C{  private static VOUserDetails createVOUser() throws Exception {  VOUserDetails voUser=factory.createUserVO(Long.toHexString(System.currentTimeMillis()));  voUser.setOrganizationId(customerOrg.getOrganizationId());  voUser.setAdditionalName("additionalName");  voUser.setAddress("address");  voUser.setFirstName("firstName");  voUser.setLastName("lastName");  voUser.setPhone("08154711");  voUser.setSalutation(Salutation.MR);  return voUser;}  }
class C{  private static boolean evaluateArguments(@NotNull List<String> names,@NotNull String[] values,@NotNull SsiProcessingState ssiProcessingState){  String expression="expr".equalsIgnoreCase(names.get(0)) ? values[0] : null;  if (expression == null) {    throw new SsiStopProcessingException();  }  try {    return new ExpressionParseTree(expression,ssiProcessingState).evaluateTree();  } catch (  ParseException e) {    throw new SsiStopProcessingException();  }}  }
class C{  public LocalTaskLauncher(LocalDeployerProperties properties){  super(properties);}  }
class C{  protected Pair<Class<? extends Page>,PageParameters> determineRedirectTarget(){  final Class<? extends Page> successfulPage;  final PageParameters parameters=new PageParameters();  successfulPage=(Class)wicketPagesMounter.getPageProviderByUri("/checkout").get();  parameters.set(CheckoutPage.THREE_STEPS_PROCESS,"true").set(CheckoutPage.STEP,CheckoutPage.STEP_ADDR);  return new Pair<Class<? extends Page>,PageParameters>(successfulPage,parameters);}  }
class C{  protected void validatePatchState(S currentState,S patchState) throws Throwable {  ValidationUtils.validatePatch(currentState,patchState);  ValidationUtils.validateTaskStage(ServiceDocumentUtils.getTaskState(patchState));  ValidationUtils.validateTaskStageProgression(ServiceDocumentUtils.getTaskState(currentState),ServiceDocumentUtils.getTaskState(patchState));  E currentSubStage=ServiceDocumentUtils.getTaskStateSubStage(currentState);  E patchSubStage=ServiceDocumentUtils.getTaskStateSubStage(patchState);  if (currentSubStage != null && patchSubStage != null) {    checkState(patchSubStage.ordinal() >= currentSubStage.ordinal(),"Sub-stage cannot set from " + currentSubStage + " to "+ patchSubStage);  }}  }
class C{  public boolean isPluralForms(){  return pluralForms;}  }
class C{  private void addAssignmentsToZoningMap(Map<Initiator,List<StoragePort>> assignments,StringSetMap newZoningMap){  for (  Initiator initiator : assignments.keySet()) {    String key=initiator.getId().toString();    List<StoragePort> ports=assignments.get(initiator);    if (ports != null && !ports.isEmpty()) {      if (newZoningMap.get(key) == null) {        newZoningMap.put(key,new StringSet());      }      if (ports != null) {        for (        StoragePort port : ports) {          newZoningMap.get(key).add(port.getId().toString());        }      }    }  }}  }
class C{  public static byte[] zipBytes(byte[] input,int initBufSize) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream(initBufSize);  try (ZipOutputStream zos=new ZipOutputStream(bos)){    ZipEntry entry=new ZipEntry("");    try {      entry.setSize(input.length);      zos.putNextEntry(entry);      zos.write(input);    }  finally {      zos.closeEntry();    }  }   return bos.toByteArray();}  }
class C{  private void resetNavigationState(){  currentPageIndex=-1;}  }
class C{  public boolean isFixed(int row){  return getBoolean(row,VisualItem.FIXED);}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  protected void sendDeviceMovedNotification(Device d){  cntDeviceMoved.increment();  deviceSyncManager.storeDevice(d);  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      listener.deviceMoved(d);    }  }}  }
class C{  Method(MemberDefinition memberDef){  this.memberDef=memberDef;  exceptions=memberDef.getExceptions(env);  methodHash=computeMethodHash();}  }
class C{  public static void showSinglePointDialog(Context context,String message){  new AlertDialog.Builder(context).setTitle(R.string.title_point).setMessage(message).setPositiveButton(R.string.dialog_confirm,null).show();}  }
class C{  public String nextToken() throws JSONException {  char c;  char q;  StringBuffer sb=new StringBuffer();  do {    c=next();  } while (Character.isWhitespace(c));  if (c == '"' || c == '\'') {    q=c;    for (; ; ) {      c=next();      if (c < ' ') {        throw syntaxError("Unterminated string.");      }      if (c == q) {        return sb.toString();      }      sb.append(c);    }  }  for (; ; ) {    if (c == 0 || Character.isWhitespace(c)) {      return sb.toString();    }    sb.append(c);    c=next();  }}  }
class C{  public void addAllIndividuals(Collection<ExampleSetBasedIndividual> newIndividuals){  individuals.addAll(newIndividuals);}  }
class C{  private boolean isStepMarkedForSuspend(Workflow workflow,Step step){  return step.suspendStep || (workflow.getSuspendSteps() != null && !workflow.getSuspendSteps().isEmpty() && (workflow.getSuspendSteps().contains(workflow.getWorkflowURI()) || workflow.getSuspendSteps().contains(step.workflowStepURI)));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","njith");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public synchronized StringBuffer delete(int start,int end){  delete0(start,end);  return this;}  }
class C{  protected void updateResult(SnmpVarBind[] result){  final int max=varBind.size();  for (int i=0; i < max; i++) {    final int index=translation[i];    final SnmpVarBind elmt=(SnmpVarBind)((NonSyncVector)varBind).elementAtNonSync(i);    final SnmpVarBind vb=result[index];    if (vb == null) {      result[index]=elmt;      continue;    }    final SnmpValue val=vb.value;    if ((val == null) || (val == SnmpVarBind.endOfMibView)) {      if ((elmt != null) && (elmt.value != SnmpVarBind.endOfMibView))       result[index]=elmt;      continue;    }    if (elmt == null)     continue;    if (elmt.value == SnmpVarBind.endOfMibView)     continue;    int comp=elmt.oid.compareTo(vb.oid);    if (comp < 0) {      result[index]=elmt;    } else {      if (comp == 0) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"updateResult"," oid overlapping. Oid : " + elmt.oid + "value :"+ elmt.value);          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"updateResult","Already present varBind : " + vb);        }        SnmpOid oid=vb.oid;        SnmpMibAgent deeperAgent=server.getAgentMib(oid);        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"updateResult","Deeper agent : " + deeperAgent);        }        if (deeperAgent == agent) {          if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {            SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"updateResult","The current agent is the deeper one. Update the value with the current one");          }          result[index].value=elmt.value;        }      }    }  }}  }
class C{  public void testBasics() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  document.add(new HalfFloatPoint("field",1.25f));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(1,searcher.count(HalfFloatPoint.newExactQuery("field",1.25f)));  assertEquals(0,searcher.count(HalfFloatPoint.newExactQuery("field",1f)));  assertEquals(0,searcher.count(HalfFloatPoint.newExactQuery("field",2f)));  assertEquals(1,searcher.count(HalfFloatPoint.newRangeQuery("field",1f,2f)));  assertEquals(0,searcher.count(HalfFloatPoint.newRangeQuery("field",0f,1f)));  assertEquals(0,searcher.count(HalfFloatPoint.newRangeQuery("field",1.5f,2f)));  assertEquals(1,searcher.count(HalfFloatPoint.newSetQuery("field",1.25f)));  assertEquals(1,searcher.count(HalfFloatPoint.newSetQuery("field",1f,1.25f)));  assertEquals(0,searcher.count(HalfFloatPoint.newSetQuery("field",1f)));  assertEquals(0,searcher.count(HalfFloatPoint.newSetQuery("field")));  reader.close();  writer.close();  dir.close();}  }
class C{  public final void add(Action action,Constraints constraint,ActionManager actionManager){  addAction(action,constraint,actionManager);}  }
class C{  void createProject(final IProjectDescription description,final IProject proj,final IProgressMonitor monitor) throws CoreException, OperationCanceledException {  try {    monitor.beginTask("",2000);    proj.create(description,new SubProgressMonitor(monitor,1000));    if (monitor.isCanceled()) {      throw new OperationCanceledException();    }    proj.open(new SubProgressMonitor(monitor,1000));    WorkspaceModelsManager.setValuesProjectDescription(proj,false,false,null);    final IContainer container=proj;    final IFolder libFolder=container.getFolder(new Path("doc"));    libFolder.create(true,true,monitor);    final IFolder snapshotsFolder=libFolder.getFolder(new Path("snapshots"));    snapshotsFolder.create(true,true,monitor);    final IFolder modelFolder=container.getFolder(new Path("models"));    modelFolder.create(true,true,monitor);    final IFolder incFolder=container.getFolder(new Path("includes"));    incFolder.create(true,true,monitor);    final IFolder imFolder=container.getFolder(new Path("images"));    imFolder.create(true,true,monitor);  } catch (  final CoreException ioe) {    final IStatus status=new Status(IStatus.ERROR,"ProjectWizard",IStatus.OK,ioe.getLocalizedMessage(),null);    throw new CoreException(status);  } finally {    monitor.done();  }}  }
class C{  public DeltaSextadTest(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  if (!dataSet.isContinuous()) {    throw new IllegalArgumentException();  }  this.cov=new CovarianceMatrixOnTheFly(dataSet);  TetradMatrix centered=DataUtils.centerData(dataSet.getDoubleData());  this.data=centered.transpose().toArray();  this.N=dataSet.getNumRows();  this.variables=dataSet.getVariables();}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,ReplyException re){  Assert.assertTrue(recipient != null,"DeposePrimaryBucketReplyMessage NULL recipient");  DeposePrimaryBucketReplyMessage m=new DeposePrimaryBucketReplyMessage(processorId,re);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  @SuppressLint("UnsafeDynamicallyLoadedCode") @Override protected void initViews(Bundle savedInstanceState){  ButterKnife.bind(this);  File dir=this.getDir("jniLibs",Activity.MODE_PRIVATE);  File distFile=new File(dir.getAbsolutePath() + File.separator + "libstackblur.so");  if (copyFileFromAssets(getApplicationContext(),"libstackblur.so",distFile.getAbsolutePath())) {    System.load(distFile.getAbsolutePath());    NativeBlurProcess.isLoadLibraryOk.set(true);  }}  }
class C{  private void updateColumnWidths(){  if (tblPids.getRowCount() >= 1) {    tblPids.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_PID]).setPreferredWidth(40);    tblPids.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_OFS]).setPreferredWidth(40);    tblPids.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_DESCRIPT]).setPreferredWidth(350);    tblPids.getColumn(EcuDataPv.FIELDS[EcuDataPv.FID_VALUE]).setPreferredWidth(150);  }}  }
class C{  public TextSwitcher(Context context){  super(context);}  }
class C{  public static Bitmap expand(Bitmap bitmap,float scale){  if (scale <= 1.0f) {    return bitmap.copy(bitmap.getConfig(),false);  }  Matrix matrix=new Matrix();  matrix.postScale(scale,scale);  return Bitmap.createBitmap(bitmap,0,0,(int)(scale * bitmap.getWidth()),(int)(scale * bitmap.getHeight()),matrix,true);}  }
class C{  private void removeACSEntries(IProject proj){  try {    String xmlPath=Messages.xmlPath;    if (proj.hasNature(Messages.natMaven)) {      xmlPath=Messages.webxmlPathMaven;    }    if (proj.getFile(xmlPath).exists()) {      ACSFilterHandler handler=new ACSFilterHandler(proj.getFile(xmlPath).getLocation().toOSString());      handler.remove();      handler.save();    }    new ClasspathContainerPage().removeEmbedCert(proj);  } catch (  Exception e) {    Activator.getDefault().log(e.getMessage(),e);  }}  }
class C{  public MyStringBuilder2 substring(int begin){  String newStr="";  for (int i=begin; i < s.length(); i++) {    newStr+=s.charAt(i) + "";  }  return new MyStringBuilder2(newStr);}  }
class C{  static void checkIdentifier(final String name,final String msg){  checkIdentifier(name,0,-1,msg);}  }
class C{  public AnsibleRunner tempDirectory(Path dir){  if (dir != null) {    this.tempDirectory=dir;  }  return this;}  }
class C{  private void checkifAlreadyPinned(final Button eventBtn){  final String newPinnedTargetItemId=((TargetIdName)eventBtn.getData()).getControllerId();  String targetId=null;  if (managementUIState.getDistributionTableFilters().getPinnedTargetId().isPresent()) {    targetId=managementUIState.getDistributionTableFilters().getPinnedTargetId().get();  }  if (targetId == null) {    isTargetPinned=!isTargetPinned;    managementUIState.getDistributionTableFilters().setPinnedTargetId(newPinnedTargetItemId);  } else   if (targetId.equals(newPinnedTargetItemId)) {    isTargetPinned=Boolean.FALSE;  } else {    isTargetPinned=true;    managementUIState.getDistributionTableFilters().setPinnedTargetId(newPinnedTargetItemId);    if (null != targetPinnedBtn) {      resetPinStyle(targetPinnedBtn);    }  }  targetPinnedBtn=eventBtn;}  }
class C{  public void testEquals(){  RelativeDateFormat df1=new RelativeDateFormat();  RelativeDateFormat df2=new RelativeDateFormat();  assertEquals(df1,df2);  df1.setBaseMillis(123L);  assertFalse(df1.equals(df2));  df2.setBaseMillis(123L);  assertTrue(df1.equals(df2));  df1.setDayFormatter(new DecimalFormat("0%"));  assertFalse(df1.equals(df2));  df2.setDayFormatter(new DecimalFormat("0%"));  assertTrue(df1.equals(df2));  df1.setDaySuffix("D");  assertFalse(df1.equals(df2));  df2.setDaySuffix("D");  assertTrue(df1.equals(df2));  df1.setHourFormatter(new DecimalFormat("0%"));  assertFalse(df1.equals(df2));  df2.setHourFormatter(new DecimalFormat("0%"));  assertTrue(df1.equals(df2));  df1.setHourSuffix("H");  assertFalse(df1.equals(df2));  df2.setHourSuffix("H");  assertTrue(df1.equals(df2));  df1.setMinuteFormatter(new DecimalFormat("0%"));  assertFalse(df1.equals(df2));  df2.setMinuteFormatter(new DecimalFormat("0%"));  assertTrue(df1.equals(df2));  df1.setMinuteSuffix("M");  assertFalse(df1.equals(df2));  df2.setMinuteSuffix("M");  assertTrue(df1.equals(df2));  df1.setSecondSuffix("S");  assertFalse(df1.equals(df2));  df2.setSecondSuffix("S");  assertTrue(df1.equals(df2));  df1.setShowZeroDays(!df1.getShowZeroDays());  assertFalse(df1.equals(df2));  df2.setShowZeroDays(!df2.getShowZeroDays());  assertTrue(df1.equals(df2));  df1.setSecondFormatter(new DecimalFormat("0.0"));  assertFalse(df1.equals(df2));  df2.setSecondFormatter(new DecimalFormat("0.0"));  assertTrue(df1.equals(df2));}  }
class C{  public static MaterialIconSlide newInstance(String imageDrawable,String title,String content,int titleTextColor,int contentTextColor){  MaterialIconSlide materialSlide=new MaterialIconSlide();  Bundle args=new Bundle();  args.putString(ARG_DRAWABLE,imageDrawable);  args.putString(ARG_TITLE,title);  args.putString(ARG_CONTENT,content);  args.putInt(ARG_TITLE_TEXT_COLOR,titleTextColor);  args.putInt(ARG_CONTENT_TEXT_COLOR,contentTextColor);  materialSlide.setArguments(args);  return materialSlide;}  }
class C{  private void commitSOMGroupFieldValues(){  ((SOMGroup)som).setInitAlpha(Double.parseDouble(tfAlpha.getText()));  ((SOMGroup)som).setInitNeighborhoodSize(Double.parseDouble(tfInitNeighborhoodSize.getText()));  ((SOMGroup)som).setAlphaDecayRate(Double.parseDouble(tfAlphaDecayRate.getText()));  ((SOMGroup)som).setNeighborhoodDecayAmount(Double.parseDouble(tfNeigborhoodDecayAmount.getText()));}  }
class C{  public long accumulateArray(Object array,long shallowSize,List<Object> values,Collection<Object> queue){  queue.addAll(values);  return shallowSize;}  }
class C{  private static Vector<Entity> createECMEnemy(IPlayer owner,IGame mockGame){  Vector<Entity> entitiesVector=new Vector<Entity>();  Entity enemy1=Mockito.mock(Mech.class);  Coords ecm1Pos=new Coords(5,5);  ECMInfo ecm1=new ECMInfo(6,ecm1Pos,owner,1,0);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(ecm1);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Mech.class);  ecm1Pos=new Coords(20,20);  ecm1=new ECMInfo(6,ecm1Pos,owner,1,0);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(ecm1);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Tank.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Aero.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(BattleArmor.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  enemy1=Mockito.mock(Mech.class);  Mockito.when(enemy1.getOwner()).thenReturn(owner);  Mockito.when(enemy1.getECMInfo()).thenReturn(null);  Mockito.when(enemy1.getGame()).thenReturn(mockGame);  entitiesVector.add(enemy1);  return entitiesVector;}  }
class C{  public boolean isFileTransferHttpSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_FILE_TRANSFER_HTTP);}  }
class C{  public static void printList(Object[] list){  for (int i=0; i < list.length; i++)   System.out.print(list[i] + " ");  System.out.println();}  }
class C{  protected final Class<?> findLoadedClass(String className){  return loadedClasses.get(className);}  }
class C{  public Object clone(){  Empirical copy=(Empirical)super.clone();  if (this.cdf != null)   copy.cdf=(double[])this.cdf.clone();  return copy;}  }
class C{  protected static void appendLongStringType(StringBuilder sb){  sb.append("TEXT");}  }
class C{  protected int processCountThroughIterator(Queue queue) throws Exception {  LinkedListIterator<MessageReference> pageIterator=queue.totalIterator();  int count=0;  while (pageIterator.hasNext()) {    MessageReference reference=pageIterator.next();    count++;  }  return count;}  }
class C{  public static byte[] createByteArray(int... intArray){  byte[] byteArray=new byte[intArray.length];  for (int i=0; i < byteArray.length; i++) {    Assertions.checkState(0x00 <= intArray[i] && intArray[i] <= 0xFF);    byteArray[i]=(byte)intArray[i];  }  return byteArray;}  }
class C{  public HttpService(final HttpProcessor proc,final ConnectionReuseStrategy connStrategy,final HttpResponseFactory responseFactory){  super();  setHttpProcessor(proc);  setConnReuseStrategy(connStrategy);  setResponseFactory(responseFactory);}  }
class C{  public Ping ping() throws IOException {  Ping ping=new Ping();  int pingId;synchronized (this) {    if (shutdown) {      throw new IOException("shutdown");    }    pingId=nextPingId;    nextPingId+=2;    if (pings == null)     pings=new HashMap<Integer,Ping>();    pings.put(pingId,ping);  }  writePing(false,pingId,0x4f4b6f6b,ping);  return ping;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static void putBoolean(Context context,String key,boolean value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putBoolean(key,value);  editor.commit();}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public static boolean popParameterBooleanFromInt(){  int i=parametersInteger.pop();  boolean result=i > 0;  return result;}  }
class C{  @Override public List<Class<? extends JavaScriptModule>> createJSModules(){  return Arrays.asList();}  }
class C{  public void detachFromMovingGrabPoint(OffsetGrabPoint gp){  gp.removeGrabPoint(gpo);}  }
class C{  private boolean isShellOnly(Method method){  CliMetaData cliMetadata=method.getAnnotation(CliMetaData.class);  return cliMetadata != null && cliMetadata.shellOnly();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SEQUATIONS__NAME:    return getName();case GamlPackage.SEQUATIONS__EQUATIONS:  return getEquations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public DefaultDocumentType(String elementName,String systemID){  this.elementName=elementName;  this.systemID=systemID;}  }
class C{  private static int si(int setSize,int i){  if (i > setSize - 1)   return setSize - 1; else   if (i < 0)   return 0;  return i;}  }
class C{  public boolean isZone2ZoneImpedance(){  return zone2ZoneImpedance;}  }
class C{  public void override(InputStream input) throws IOException {  openFileImpl(input);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private static void combineChildStops(TransitSchedule schedule){  parentStops=new HashMap<>();  for (  TransitStopFacility stopFacility : schedule.getFacilities().values()) {    if (stopFacility.getId().toString().contains("Parent")) {      MapUtils.getSet(stopFacility.getName(),parentStops).add(stopFacility.getId());    }  }  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      for (      TransitRouteStop routeStop : transitRoute.getStops()) {        TransitStopFacility sf=routeStop.getStopFacility();        Set<Id<TransitStopFacility>> possibleParentStopId;        try {          possibleParentStopId=parentStops.get(sf.getName().split(", ")[1]);        } catch (        Exception e) {          possibleParentStopId=parentStops.get(sf.getName());        }        if (possibleParentStopId != null) {          TransitStopFacility parentStopFacility=null;          double minDist=Double.MAX_VALUE;          for (          Id<TransitStopFacility> id : possibleParentStopId) {            TransitStopFacility checkParent=schedule.getFacilities().get(id);            double dist=CoordUtils.calcEuclideanDistance(checkParent.getCoord(),sf.getCoord());            if (dist < minDist) {              parentStopFacility=checkParent;              minDist=dist;            }          }          if (parentStopFacility != null) {            Id<TransitStopFacility> childStopId=Id.create(parentStopFacility.getId() + ".link:" + sf.getId(),TransitStopFacility.class);            TransitStopFacility childStop=schedule.getFactory().createTransitStopFacility(childStopId,sf.getCoord(),false);            if (!schedule.getFacilities().containsKey(childStopId)) {              schedule.addStopFacility(childStop);            }            routeStop.setStopFacility(childStop);          }        }      }    }  }  removeAllRoutesExceptBus(schedule);  ScheduleCleaner.removeNotUsedStopFacilities(schedule);}  }
class C{  public void add(String expr,FontAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  @Override public String toString(){  return this.getClass().getName();}  }
class C{  protected void redefine(int nodetype,String namespace,String localName,int hash){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=hash;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  Rule temp;  if (m_ruleSet == null) {    return "Classifier hasn't been built yet!";  }  if (m_generateRules) {    text.append("M5 " + ((m_useUnpruned == true) ? "unpruned " : "pruned ") + ((m_regressionTree == true) ? "regression " : "model ")+ "rules ");    if (!m_unsmoothedPredictions) {      text.append("\n(using smoothed linear models) ");    }    text.append(":\n");    text.append("Number of Rules : " + m_ruleSet.size() + "\n\n");    for (int j=0; j < m_ruleSet.size(); j++) {      temp=m_ruleSet.get(j);      text.append("Rule: " + (j + 1) + "\n");      text.append(temp.toString());    }  } else {    temp=m_ruleSet.get(0);    text.append(temp.toString());  }  return text.toString();}  }
class C{  public HttpResponse tryMany(HttpRequest httpRequest) throws HttpRequestException {  int numTries=0;  long startTime=System.currentTimeMillis();  HttpResponse res=null;  while (numTries < maxRetries) {    try {      setConnectionTimeout(getNextTimeout(numTries));      if (requestLogger.isLoggingEnabled()) {        requestLogger.log((numTries + 1) + "of" + maxRetries+ ", trying "+ httpRequest.getPath());      }      startTime=System.currentTimeMillis();      res=doHttpMethod(httpRequest.getPath(),httpRequest.getHttpMethod(),httpRequest.getContentType(),httpRequest.getContent());      if (res != null) {        return res;      }    } catch (    HttpRequestException e) {      if (isTimeoutException(e,startTime) && numTries < (maxRetries - 1)) {      } else {        boolean isRecoverable=requestHandler.onError(e);        if (isRecoverable && numTries < (maxRetries - 1)) {          try {            Thread.sleep(connectionTimeout);          } catch (          InterruptedException ie) {            throw e;          }        } else {          throw e;        }      }    }    numTries++;  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CapabilityFilter(List<String> capabilities){  addCapabilities(capabilities);}  }
class C{  private void augmentIterationId(){  if (getIterationId() == Integer.MAX_VALUE) {    this.iterationID=Integer.MIN_VALUE + 1;    resetNetworkVisited();  } else {    this.iterationID++;  }}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  XYChart chart=getXYChart(seriesIndex);  chart.setScreenR(getScreenR());  chart.setCalcRange(getCalcRange(mDataset.getSeriesAt(seriesIndex).getScaleNumber()),0);  chart.drawSeries(canvas,paint,points,seriesRenderer,yAxisValue,getChartSeriesIndex(seriesIndex),startIndex);}  }
class C{  public RaptorState(int nStops){  this.bestTimes=new int[nStops];  this.bestNonTransferTimes=new int[nStops];  Arrays.fill(bestTimes,RaptorWorker.UNREACHED);  Arrays.fill(bestNonTransferTimes,RaptorWorker.UNREACHED);  this.previousPatterns=new int[nStops];  this.previousStop=new int[nStops];  this.transferStop=new int[nStops];  Arrays.fill(previousPatterns,-1);  Arrays.fill(previousStop,-1);  Arrays.fill(transferStop,-1);  this.inVehicleTravelTime=new int[nStops];  this.waitTime=new int[nStops];  this.nonTransferWaitTime=new int[nStops];  this.nonTransferInVehicleTravelTime=new int[nStops];}  }
class C{  private Edge createInstructionEdge(final Node sourceNode,final Node destinationNode,final boolean isTrueEdge){  final ReilInstruction reilInstruction=m_nodesMap.get(destinationNode).getReilInstruction();  boolean isExitEdge=false;  if (reilInstruction != null) {    final IAddress reilInstructionAddress=reilInstruction.getAddress();    if ((reilInstructionAddress.toLong() & 0xFF) == 0) {      isExitEdge=true;    }  }  final Edge edge=m_internalGraph.createEdge(sourceNode,destinationNode);  m_edgesMap.put(edge,new ReilInstructionGraphEdge(isTrueEdge,isExitEdge));  return edge;}  }
class C{  public void displayTextCounter(boolean display){  if (display) {    mTextCounterView.setVisibility(TextView.VISIBLE);  } else {    mTextCounterView.setVisibility(TextView.GONE);  }}  }
class C{  public DNSOutgoing(int flags,boolean multicast){  this(flags,multicast,DNSConstants.MAX_MSG_TYPICAL);}  }
class C{  public boolean isPrimitive(){  return false;}  }
class C{  public void deleteAllBreakPoints() throws DebuggerException {  getEventManager().deleteAllBreakpoints();}  }
class C{  private void emitMapPut(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getMapPutterName(fieldName));  builder.append("(String k, ");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),1));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".put(k, v);\n");  builder.append("    }\n\n");}  }
class C{  public boolean contains(byte value){  return lastIndexOf(value) >= 0;}  }
class C{  String toShortString(){  if (!allMembers().hasNext()) {    return "MemberMatrix not initialized yet.";  }  StringBuilder strb=new StringBuilder("[");  for (  MemberType type : MemberType.values()) {    for (int source=0; source < SOURCE_COUNT_WITHOUT_CONSUMED; source++) {      strb.append(members(source,type).stream().map(null).collect(Collectors.joining(",")));    }  }  if (!consumed.isEmpty()) {    strb.append(", consumed: ");    strb.append(consumed.stream().map(null).collect(Collectors.joining(",")));  }  strb.append("]");  return strb.toString();}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.164 -0500",hash_original_method="9D9122CB8619CFE228E107EF9174420D",hash_generated_method="05CCA9147253AC02899E697B9CE56061") public SparseArrayCompat(int initialCapacity){  initialCapacity=idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public static boolean isIsatapAddress(Inet6Address ip){  if (isTeredoAddress(ip)) {    return false;  }  byte[] bytes=ip.getAddress();  if ((bytes[8] | (byte)0x03) != (byte)0x03) {    return false;  }  return (bytes[9] == (byte)0x00) && (bytes[10] == (byte)0x5e) && (bytes[11] == (byte)0xfe);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void compareViews() throws SQLException {  final Vector<View> viewsDB1=new Vector<View>();  final Vector<View> viewsDB2=new Vector<View>();  String sql="select view_name, text from user_views where view_name not like 'BIN$%'";  ResultSet rs=stmtdb1.executeQuery(sql);  while (rs.next()) {    viewsDB1.add(new View(rs.getString("VIEW_NAME"),rs.getString("TEXT")));  }  rs.close();  rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    viewsDB2.add(new View(rs.getString("VIEW_NAME"),rs.getString("TEXT")));  }  rs.close();  for (int i=0; i < viewsDB2.size(); i++) {    String name=viewsDB2.get(i).getName();    String text=viewsDB2.get(i).getText();    boolean found=false;    boolean identical=false;    for (int j=0; j < viewsDB1.size(); j++) {      if (name.equals(viewsDB1.get(j).getName())) {        found=true;        if (text.equals(viewsDB1.get(j).getText())) {          identical=true;        }        break;      }    }    if (!found) {      m_newViews.add(viewsDB2.get(i));    } else     if (!identical) {      m_changedViews.add(viewsDB2.get(i));    }  }  for (int i=0; i < viewsDB1.size(); i++) {    String name=viewsDB1.get(i).getName();    boolean found=false;    for (int j=0; j < viewsDB2.size(); j++) {      if (name.equals(viewsDB2.get(j).getName())) {        found=true;        break;      }    }    if (!found) {      System.out.println();      System.out.println("THE VIEW " + name + " DOESN'T EXIST IN NEW DB - but no need to drop them...");      System.out.println();    }  }}  }
class C{  @Override public void end(){  repeatingTimer.cancel();}  }
class C{  public AlgorithmId(ObjectIdentifier oid,AlgorithmParameters algparams){  algid=oid;  algParams=algparams;  constructedFromDer=false;}  }
class C{  public SlideInItemAnimator(){  this(Gravity.BOTTOM,-1);}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  private void toggleShyVisibility(boolean visible){  BottomNavigationBehavior<BottomBar> from=BottomNavigationBehavior.from(this);  if (from != null) {    from.setHidden(this,visible);  }}  }
class C{  public static boolean isEmpty(String string){  return string == null || string.length() == 0;}  }
class C{  private boolean iconsConverted(OBlock block){  if (block == null) {    return true;  }  java.util.List<Positionable> list=_circuitMap.get(block);  if (list != null && list.size() > 0) {    for (int i=0; i < list.size(); i++) {      Positionable pos=list.get(i);      if (!(pos instanceof IndicatorTrack) && !(pos instanceof PortalIcon)) {        if (log.isDebugEnabled()) {          log.debug("icon needs Convertion " + pos.getClass().getName());        }        return false;      }    }  }  return true;}  }
class C{  @PostConstruct public void init(){  setStyleName("sp-table");  setSizeFull();  setImmediate(true);  setHeight(100.0F,Unit.PERCENTAGE);  addStyleName(ValoTheme.TABLE_NO_VERTICAL_LINES);  addStyleName(ValoTheme.TABLE_SMALL);  addCustomGeneratedColumns();  populateTableData();  setColumnCollapsingAllowed(true);  setColumnProperties();  setId(UIComponentIdProvider.TARGET_FILTER_TABLE_ID);  eventBus.subscribe(this);}  }
class C{  @Override public boolean wasNull(){  return wasNull;}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private void saveSettings(){  boolean enabled=useCommercialDelay.isSelected();  long length=commercialDelay.getSettingValue();  main.saveCommercialDelaySettings(enabled,length);}  }
class C{  public static void sortList(List<ShopCategory> list,List<ShopCategory> sourcelist,String parentId){  for (int i=0; i < sourcelist.size(); i++) {    ShopCategory e=sourcelist.get(i);    if (e.getParent() != null && e.getParent().getId() != null && e.getParent().getId().equals(parentId)) {      list.add(e);      for (int j=0; j < sourcelist.size(); j++) {        ShopCategory child=sourcelist.get(j);        if (child.getParent() != null && child.getParent().getId() != null && child.getParent().getId().equals(e.getId())) {          sortList(list,sourcelist,e.getId());          break;        }      }    }  }}  }
class C{  public <T extends Comparable<T>>void findSimilarUsersFromTerms(String[] terms,LuceneUtils lUtils,int numResults,ArrayList<SemVectorResult<T>> docResult,QueryTransform<T> docTransform){  List<SearchResult> results;  try {    VectorSearcher vecSearcher=new VectorSearcher.VectorSearcherCosine(termVecReader,docVecReader,luceneUtils,flagConfig,terms);    results=vecSearcher.getNearestNeighbors(numResults);  } catch (  pitt.search.semanticvectors.vectors.ZeroVectorException e) {    results=new LinkedList<>();  }  for (  SearchResult r : results) {    String filename=r.getObjectVector().getObject().toString();    docResult.add(new SemVectorResult<>(docTransform.fromSV(filename),r.getScore()));  }}  }
class C{  public boolean valid(Class type) throws Exception {  return transform.valid(type);}  }
class C{  public int error_sym(){  return 1;}  }
class C{  private static void append(IgniteFileSystem fs,IgfsPath path,byte[] data) throws IgniteException, IOException {  assert fs != null;  assert path != null;  assert data != null;  assert fs.info(path).isFile();  try (OutputStream out=fs.append(path,true)){    System.out.println();    System.out.println(">>> Opened file: " + path);    out.write(data);  }   System.out.println();  System.out.println(">>> Appended data to file: " + path);}  }
class C{  public String TO_DATE(Timestamp time,boolean dayOnly){  if (time == null) {    if (dayOnly)     return "current_date()";    return "current_date()";  }  StringBuffer dateString=new StringBuffer("TO_DATE('");  String myDate=time.toString();  if (dayOnly) {    dateString.append(myDate.substring(0,10));    dateString.append("','YYYY-MM-DD')");  } else {    dateString.append(myDate.substring(0,myDate.indexOf('.')));    dateString.append("','YYYY-MM-DD HH24:MI:SS')");  }  return dateString.toString();}  }
class C{  public float[] perceptualToRGB(float[] values){  return toRGB(values);}  }
class C{  public static KeyStore loadAppleKeychain() throws CryptoException {  if (!isAppleKeychainSupported()) {    throw new CryptoException(res.getString("AppleKeychainNotSupported.exception.message"));  }  KeyStore keyStore=null;  try {    keyStore=KeyStore.getInstance(KEYCHAIN.jce(),APPLE.jce());  } catch (  KeyStoreException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoCreateKeyStore.exception.message"),KEYCHAIN.jce()),ex);  }catch (  NoSuchProviderException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoCreateKeyStore.exception.message"),KEYCHAIN.jce()),ex);  }  try {    keyStore.load(null,null);  } catch (  NoSuchAlgorithmException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),KEYCHAIN.jce()),ex);  }catch (  CertificateException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),KEYCHAIN.jce()),ex);  }catch (  IOException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),KEYCHAIN.jce()),ex);  }  return keyStore;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public MultisigSignatureTransaction createSignatureWithHash(final Hash hash){  return createSignature(Utils.generateRandomAccount(),this.multisig,hash);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static TDoubleDoubleHashMap createHistogram(double[] values,double[] weights,Discretizer discretizer,boolean reweight){  TDoubleDoubleHashMap histogram=new TDoubleDoubleHashMap();  for (int i=0; i < values.length; i++) {    double bin=discretizer.discretize(values[i]);    double weight=weights[i];    if (reweight) {      weight=weights[i] / discretizer.binWidth(values[i]);    }    histogram.adjustOrPutValue(bin,weight,weight);  }  return histogram;}  }
class C{  public GameBoardNewEvent(Object source,IBoard oldBoard,IBoard newBoard){  super(source);  this.oldBoard=oldBoard;  this.newBoard=newBoard;}  }
class C{  X509IssuerSerial(X509Certificate cert){  this(cert.getIssuerX500Principal(),cert.getSerialNumber());}  }
class C{  public static SortedProperties fromLines(String s){  SortedProperties p=new SortedProperties();  for (  String line : StringUtils.arraySplit(s,'\n',true)) {    int idx=line.indexOf('=');    if (idx > 0) {      p.put(line.substring(0,idx),line.substring(idx + 1));    }  }  return p;}  }
class C{  private void paintBorder(Graphics g){  int left=0;  int right=0;  int top=0;  int bottom=0;  Border border=style.getBorder();  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    top=border.getBorderInsets(this).top;    bottom=border.getBorderInsets(this).bottom;  } else {    left=border.getBorderInsets(this).left;    right=border.getBorderInsets(this).right;  }  border.paintBorder(this,g,0 - left,0 - top,getWidth() + right + left,getHeight() + top + bottom);}  }
class C{  private void validate(){  if (!"public".equalsIgnoreCase(part2) && !"system".equalsIgnoreCase(part2)) {    if ("html".equalsIgnoreCase(part1) && (part2 == null)) {      type=HTML5;      valid=true;    }  }  if ("public".equalsIgnoreCase(part2)) {    if ("-//W3C//DTD HTML 4.0//EN".equals(getPublicId())) {      type=HTML4_0;      if ("http://www.w3.org/TR/REC-html40/strict.dtd".equals(part4) || "".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD HTML 4.01//EN".equals(getPublicId())) {      type=HTML4_01_STRICT;      if ("http://www.w3.org/TR/html4/strict.dtd".equals(part4) || "".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD HTML 4.01 Transitional//EN".equals(getPublicId())) {      type=HTML4_01_TRANSITIONAL;      if ("http://www.w3.org/TR/html4/loose.dtd".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD HTML 4.01 Frameset//EN".equals(getPublicId())) {      type=HTML4_01_FRAMESET;      if ("http://www.w3.org/TR/html4/frameset.dtd".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD XHTML 1.0 Strict//EN".equals(getPublicId())) {      type=XHTML1_0_STRICT;      if ("http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD XHTML 1.0 Transitional//EN".equals(getPublicId())) {      type=XHTML1_0_TRANSITIONAL;      if ("http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD XHTML 1.0 Frameset//EN".equals(getPublicId())) {      type=XHTML1_0_FRAMESET;      if ("http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD XHTML 1.1//EN".equals(getPublicId())) {      type=XHTML1_1;      if ("http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }    if ("-//W3C//DTD XHTML Basic 1.1//EN".equals(getPublicId())) {      type=XHTML1_1_BASIC;      if ("http://www.w3.org/TR/xhtml11/DTD/xhtml-basic11.dtd".equals(getSystemId())) {        valid=true;      } else {        valid=false;      }    }  }  if ("system".equalsIgnoreCase(part2)) {    if ("about:legacy-compat".equals(getPublicId())) {      type=HTML5_LEGACY_TOOL_COMPATIBLE;      valid=true;    }  }  if (type == null) {    type=UNKNOWN;    valid=false;  }}  }
class C{  public FileNfsACLUpdateParams(){}  }
class C{  void checkFrameValue(final Object value){  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {    return;  }  if (value instanceof String) {    checkInternalName((String)value,"Invalid stack frame value");    return;  }  if (!(value instanceof Label)) {    throw new IllegalArgumentException("Invalid stack frame value: " + value);  } else {    usedLabels.add((Label)value);  }}  }
class C{  public static void round(ImageView view,String text){  if (!TextUtils.isEmpty(text)) {    view.setImageDrawable(sRound.buildRound(text.substring(0,1),((ShapeDrawable)view.getDrawable()).getPaint().getColor()));  }}  }
class C{  @Override protected void register(DeployableFactory deployableFactory){  deployableFactory.registerDeployable("tomcat5x",DeployableType.WAR,TomcatWAR.class);  deployableFactory.registerDeployable("tomcat6x",DeployableType.WAR,TomcatWAR.class);  deployableFactory.registerDeployable("tomcat7x",DeployableType.WAR,TomcatWAR.class);  deployableFactory.registerDeployable("tomcat8x",DeployableType.WAR,TomcatWAR.class);  deployableFactory.registerDeployable("tomcat9x",DeployableType.WAR,TomcatWAR.class);}  }
class C{  public static BufferedImage JPEG2000ToRGBImage(byte[] data) throws PdfException {  return null;}  }
class C{  public boolean isOnThursday(){  Object oo=get_Value(COLUMNNAME_OnThursday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onNetDisConnect(){}  }
class C{  @Override public boolean usesLocalFiles(){  debugCodeCall("usesLocalFiles");  return true;}  }
class C{  public Tasks<BlockSnapshotRestRep> deactivate(URI id){  return deactivate(id,VolumeDeleteTypeEnum.FULL);}  }
class C{  public ComputeTaskCancelledCheckedException(String msg){  super(msg);}  }
class C{  public static Date parseDate(final String dateValue,String[] dateFormats) throws DateParseException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  public static ApiImplMapping of(Iterable<IN4JSProject> projects){  return of(projects,projects);}  }
class C{  public final void writeChars(String s){  if (this.ignoreWrites)   return;  checkIfWritable();  int len=s.length();  if (len > 0) {    ensureCapacity(len * 2);    for (int i=0; i < len; i++) {      this.buffer.putChar(s.charAt(i));    }  }}  }
class C{  public static String toTokens(final String s){  final StringBuilder sb=new StringBuilder(s.length());  char c;  for (int i=0; i < s.length(); i++) {    c=s.charAt(i);    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))     sb.append(c); else     sb.append(' ');  }  final String[] u=CommonPattern.SPACES.split(sb);  final Set<String> token=new LinkedHashSet<String>();  for (  final String r : u)   token.add(r);  for (  final String r : u)   token.addAll(parseCamelCase(r));  sb.setLength(0);  for (  final String v : token)   if (v.length() >= 1)   sb.append(v).append(' ');  return sb.length() == 0 ? "" : sb.substring(0,sb.length() - 1);}  }
class C{  void foo(){  try {  } catch (  NumberFormatException|NullPointerException e) {  }}  }
class C{  public static double sinhAndCosh(double value,final DoubleWrapper hcosine){  if (USE_JDK_MATH) {    hcosine.value=Math.cosh(value);    return Math.sinh(value);  }  double h;  if (value < 0.0) {    value=-value;    h=-0.5;  } else {    h=0.5;  }  final double hsine;  if (value < LOG_TWO_POW_27) {    if (value < TWO_POW_N28) {      hsine=h < 0.0 ? -value : value;    } else {      final double t=expm1(value);      hsine=h * (t + t / (t + 1.0));    }    if (value < TWO_POW_N27) {      hcosine.value=1;    } else {      final double t=exp(value);      hcosine.value=0.5 * (t + 1 / t);    }  } else   if (value < 22.0) {    final double t=expm1(value);    hsine=h * (t + t / (t + 1.0));    hcosine.value=0.5 * (t + 1.0);  } else {    if (value < LOG_DOUBLE_MAX_VALUE) {      hsine=h * exp(value);    } else {      final double t=exp(value * 0.5);      hsine=h * t * t;    }    hcosine.value=Math.abs(hsine);  }  return hsine;}  }
class C{  public String toString(boolean reverse,Hashtable oidSymbols){  StringBuffer buf=new StringBuffer();  Vector components=new Vector();  boolean first=true;  StringBuffer ava=null;  for (int i=0; i < ordering.size(); i++) {    if (((Boolean)added.elementAt(i)).booleanValue()) {      ava.append('+');      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));    } else {      ava=new StringBuffer();      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));      components.addElement(ava);    }  }  if (reverse) {    for (int i=components.size() - 1; i >= 0; i--) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  } else {    for (int i=0; i < components.size(); i++) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  }  return buf.toString();}  }
class C{  public GoogleBaseAttribute(String name,GoogleBaseAttributeType type){  this(name,type,null);}  }
class C{  public RefactoringContext(Refactoring refactoring){  if (refactoring == null)   throw new NullPointerException();  fRefactoring=refactoring;}  }
class C{  public static void main(String[] arg) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);  String adminEmail=parser.getValue("admin_email","email","e");  String adminPassword=parser.getValue("admin_password","pass","p");  String domain=parser.getValue("domain","domain","d");  boolean help=parser.containsKey("help","h");  if (help || (adminEmail == null) || (adminPassword == null)|| (domain == null)) {    usage();    System.exit(1);  }  AppsForYourDomainClient client=new AppsForYourDomainClient(adminEmail,adminPassword,domain);  client.run();}  }
class C{  protected void calculateVariables(final RandomVariable[] X,final AssignmentProposition[] e,final BayesianNetwork bn,Set<RandomVariable> hidden,Collection<RandomVariable> bnVARS){  bnVARS.addAll(bn.getVariablesInTopologicalOrder());  hidden.addAll(bnVARS);  for (  RandomVariable x : X) {    hidden.remove(x);  }  for (  AssignmentProposition ap : e) {    hidden.removeAll(ap.getScope());  }  return;}  }
class C{  protected final void finished(){  boolean isDone=false;synchronized (this) {    if (!this.done) {      this.done=true;      isDone=true;      getLatch().countDown();    }  }  if (isDone) {    postFinish();  }}  }
class C{  public DatabaseVersion(final String version){  Preconditions.checkArgument(isValidVersionNumber(version),"IE00707: Invalid database version string: " + version);  this.version=version;}  }
class C{  public void insert(String path){  String[] elements=path.split("/");  ZkNode tempNode=root;  for (  String element : elements) {    if (element == null || element.trim().length() == 0) {      continue;    }    if (!tempNode.hasChild(element)) {      tempNode.addChild(element);    }    tempNode=tempNode.getChild(element);  }}  }
class C{  private void removeVolumeFromConsistencyGroup(StorageSystem storage,final Volume volume) throws Exception {  _log.info(String.format("removeVolumeFromConsistencyGroup for volume [%s](%s)...",volume.getLabel(),volume.getId()));  CloseableIterator<CIMObjectPath> assocVolNamesIter=null;  try {    String groupName=null;    if (NullColumnValueGetter.isNotNullValue(volume.getReplicationGroupInstance())) {      groupName=volume.getReplicationGroupInstance();    } else {      groupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(volume,_dbClient);    }    if (groupName != null) {      storage=findProviderFactory.withGroup(storage,groupName).find();      if (storage == null) {        _log.info("Replication Group {} not found. Skipping Remove Volume from CG step.",groupName);        return;      }    } else {      _log.info(String.format("No Replication Group found for volume [%s](%s). Skipping remove volume from CG step.",volume.getLabel(),volume.getId()));      return;    }    CIMObjectPath cgPath=_cimPath.getReplicationGroupPath(storage,groupName);    CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] inArgs;    CIMArgument[] outArgs=new CIMArgument[5];    CIMInstance cgPathInstance=_helper.checkExists(storage,cgPath,false,false);    if (cgPathInstance != null) {      CIMObjectPath[] volumePaths=_cimPath.getVolumePaths(storage,new String[]{volume.getNativeId()});      boolean volumeIsInGroup=false;      assocVolNamesIter=_helper.getAssociatorNames(storage,cgPath,null,SmisConstants.CIM_STORAGE_VOLUME,null,null);      while (assocVolNamesIter.hasNext()) {        CIMObjectPath assocVolPath=assocVolNamesIter.next();        String deviceId=assocVolPath.getKey(SmisConstants.CP_DEVICE_ID).getValue().toString();        if (deviceId.equalsIgnoreCase(volume.getNativeId())) {          volumeIsInGroup=true;          break;        }      }      if (volumeIsInGroup) {        boolean cgHasGroupRelationship=false;        if (volume.isInCG()) {          cgHasGroupRelationship=ControllerUtils.checkCGHasGroupRelationship(storage,volume.getConsistencyGroup(),_dbClient);        }        if (cgHasGroupRelationship) {          CIMObjectPath maskingGroupPath=_cimPath.getMaskingGroupPath(storage,groupName,SmisConstants.MASKING_GROUP_TYPE.SE_DeviceMaskingGroup);          _log.info("Removing volume {} from device masking group {}",volume.getNativeId(),maskingGroupPath.toString());          inArgs=_helper.getRemoveAndUnmapMaskingGroupMembersInputArguments(maskingGroupPath,volumePaths,storage,true);          _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),SmisConstants.REMOVE_MEMBERS,inArgs,outArgs,null);        } else {          inArgs=_helper.getRemoveMembersInputArguments(cgPath,volumePaths);          _helper.invokeMethod(storage,replicationSvc,SmisConstants.REMOVE_MEMBERS,inArgs,outArgs);        }      } else {        _log.info("Volume {} is no longer in the replication group {}",volume.getNativeId(),cgPath.toString());      }    } else {      _log.info("The replication group {} does not exist on the array.",cgPath);    }  } catch (  Exception e) {    _log.error("Problem making SMI-S call: ",e);    throw e;  } finally {    if (assocVolNamesIter != null) {      assocVolNamesIter.close();    }  }}  }
class C{  public static Collection<RelationshipType> all(){  return enums.all();}  }
class C{  public boolean isManualPaymentSupported(){  return false;}  }
class C{  public final void encode(DerOutputStream out) throws IOException {  encode(out,this.algid,this.key);}  }
class C{  public RemoteException(String s){  super(s);  initCause(null);}  }
class C{  @Override public void close() throws IOException {  mIn.close();}  }
class C{  public Token readToken(){  reader.sp=0;  name=null;  radix=0;  int pos=0;  int endPos=0;  List<Comment> comments=null;  try {    loop:     while (true) {      pos=reader.bp;switch (reader.ch) {case ' ':case '\t':case FF:        do {          reader.scanChar();        } while (reader.ch == ' ' || reader.ch == '\t' || reader.ch == FF);      processWhiteSpace(pos,reader.bp);    break;case LF:  reader.scanChar();processLineTerminator(pos,reader.bp);break;case CR:reader.scanChar();if (reader.ch == LF) {reader.scanChar();}processLineTerminator(pos,reader.bp);break;case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '$':case '_':scanIdent();break loop;case '0':reader.scanChar();if (reader.ch == 'x' || reader.ch == 'X') {reader.scanChar();skipIllegalUnderscores();if (reader.ch == '.') {scanHexFractionAndSuffix(pos,false);} else if (reader.digit(pos,16) < 0) {lexError(pos,"invalid.hex.number");} else {scanNumber(pos,16);}} else if (reader.ch == 'b' || reader.ch == 'B') {if (!allowBinaryLiterals) {lexError(pos,"unsupported.binary.lit",source.name);allowBinaryLiterals=true;}reader.scanChar();skipIllegalUnderscores();if (reader.digit(pos,2) < 0) {lexError(pos,"invalid.binary.number");} else {scanNumber(pos,2);}} else {reader.putChar('0');if (reader.ch == '_') {int savePos=reader.bp;do {reader.scanChar();} while (reader.ch == '_');if (reader.digit(pos,10) < 0) {lexError(savePos,"illegal.underscore");}}scanNumber(pos,8);}break loop;case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':scanNumber(pos,10);break loop;case '.':reader.scanChar();if ('0' <= reader.ch && reader.ch <= '9') {reader.putChar('.');scanFractionAndSuffix(pos);} else if (reader.ch == '.') {int savePos=reader.bp;reader.putChar('.');reader.putChar('.',true);if (reader.ch == '.') {reader.scanChar();reader.putChar('.');tk=TokenKind.ELLIPSIS;} else {lexError(savePos,"illegal.dot");}} else {tk=TokenKind.DOT;}break loop;case ',':reader.scanChar();tk=TokenKind.COMMA;break loop;case ';':reader.scanChar();tk=TokenKind.SEMI;break loop;case '(':reader.scanChar();tk=TokenKind.LPAREN;break loop;case ')':reader.scanChar();tk=TokenKind.RPAREN;break loop;case '[':reader.scanChar();tk=TokenKind.LBRACKET;break loop;case ']':reader.scanChar();tk=TokenKind.RBRACKET;break loop;case '{':reader.scanChar();tk=TokenKind.LBRACE;break loop;case '}':reader.scanChar();tk=TokenKind.RBRACE;break loop;case '/':reader.scanChar();if (reader.ch == '/') {do {reader.scanCommentChar();} while (reader.ch != CR && reader.ch != LF && reader.bp < reader.buflen);if (reader.bp < reader.buflen) {comments=addComment(comments,processComment(pos,reader.bp,CommentStyle.LINE));}break;} else if (reader.ch == '*') {boolean isEmpty=false;reader.scanChar();CommentStyle style;if (reader.ch == '*') {style=CommentStyle.JAVADOC;reader.scanCommentChar();if (reader.ch == '/') {isEmpty=true;}} else {style=CommentStyle.BLOCK;}while (!isEmpty && reader.bp < reader.buflen) {if (reader.ch == '*') {reader.scanChar();if (reader.ch == '/') break;} else {reader.scanCommentChar();}}if (reader.ch == '/') {reader.scanChar();comments=addComment(comments,processComment(pos,reader.bp,style));break;} else {lexError(pos,"unclosed.comment");break loop;}} else if (reader.ch == '=') {tk=TokenKind.SLASHEQ;reader.scanChar();} else {tk=TokenKind.SLASH;}break loop;case '\'':reader.scanChar();if (reader.ch == '\'') {lexError(pos,"empty.char.lit");} else {if (reader.ch == CR || reader.ch == LF) lexError(pos,"illegal.line.end.in.char.lit");scanLitChar(pos);char ch2=reader.ch;if (reader.ch == '\'') {reader.scanChar();tk=TokenKind.CHARLITERAL;} else {lexError(pos,"unclosed.char.lit");}}break loop;case '\"':reader.scanChar();while (reader.ch != '\"' && reader.ch != CR && reader.ch != LF && reader.bp < reader.buflen) scanLitChar(pos);if (reader.ch == '\"') {tk=TokenKind.STRINGLITERAL;reader.scanChar();} else {lexError(pos,"unclosed.str.lit");}break loop;default :if (isSpecial(reader.ch)) {scanOperator();} else {boolean isJavaIdentifierStart;if (reader.ch < '\u0080') {isJavaIdentifierStart=false;} else {char high=reader.scanSurrogates();if (high != 0) {reader.putChar(high);isJavaIdentifierStart=Character.isJavaIdentifierStart(Character.toCodePoint(high,reader.ch));} else {isJavaIdentifierStart=Character.isJavaIdentifierStart(reader.ch);}}if (isJavaIdentifierStart) {scanIdent();} else if (reader.bp == reader.buflen || reader.ch == EOI && reader.bp + 1 == reader.buflen) {tk=TokenKind.EOF;pos=reader.buflen;} else {String arg=(32 < reader.ch && reader.ch < 127) ? String.format("%s",reader.ch) : String.format("\\u%04x",(int)reader.ch);lexError(pos,"illegal.char",arg);reader.scanChar();}}break loop;}}endPos=reader.bp;switch (tk.tag) {case DEFAULT:return new Token(tk,pos,endPos,comments);case NAMED:return new NamedToken(tk,pos,endPos,name,comments);case STRING:return new StringToken(tk,pos,endPos,reader.chars(),comments);case NUMERIC:return new NumericToken(tk,pos,endPos,reader.chars(),radix,comments);default :throw new AssertionError();}}  finally {if (scannerDebug) {System.out.println("nextToken(" + pos + ","+ endPos+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");}}}  }
class C{  public void processMessageToMatchUser(HttpMessage message){synchronized (this) {    if (this.requiresAuthentication()) {      this.authenticate();      if (this.requiresAuthentication()) {        log.info("Authentication failed for user: " + name);        return;      }    }  }  getContext().getSessionManagementMethod().processMessageToMatchSession(message,authenticatedSession);}  }
class C{  public static String toString(Object object) throws JSONException {  return toString(object,null);}  }
class C{  private Class<?> loadReplace(final String originalName,final String replaceName){synchronized (getClassLoadingLock(originalName)) {    Class c=findLoadedClass(originalName);    if (c != null)     return c;    byte[] bytes=bytesCache.get(originalName);    if (bytes == null) {      InputStream in=helper.loadClassBytes(this,replaceName);      if (in == null)       throw new IgniteException("Failed to replace class [originalName=" + originalName + ", replaceName="+ replaceName+ ']');      bytes=helper.loadReplace(in,originalName,replaceName);      bytesCache.put(originalName,bytes);    }    return defineClass(originalName,bytes,0,bytes.length);  }}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  public void addContentProposalListener(IContentProposalListener listener){  proposalListeners.add(listener);}  }
class C{  public void resumeScroll(){  if (mStopped) {    mHandler.removeCallbacks(mScrollRunnable);    mHandler.postDelayed(mScrollRunnable,mScrollPeriod);  }}  }
class C{  public Object visit(SimpleNode node,Object data){  return showNode(node,data);}  }
class C{  private void writeFlags(DataOutputStream os,MLArray array) throws IOException {  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  DataOutputStream bufferDOS=new DataOutputStream(buffer);  bufferDOS.writeInt(array.getFlags());  if (array.isSparse()) {    bufferDOS.writeInt(((MLSparse)array).getMaxNZ());  } else {    bufferDOS.writeInt(0);  }  OSArrayTag tag=new OSArrayTag(MatDataTypes.miUINT32,buffer.toByteArray());  tag.writeTo(os);}  }
class C{  public static Option create(char opt) throws IllegalArgumentException {  return create(String.valueOf(opt));}  }
class C{  @Override public boolean initialize(PageHeader header){  this.pageSize=header.getPageSize();  return false;}  }
class C{  public Set<Map.Entry<K,V>> entrySet(){  if (entrySet == null) {    entrySet=new ReferenceEntrySet<K,V>(this);  }  return entrySet;}  }
class C{  public void refresh(DialogueState state,Collection<String> updatedVars){  recordState(state,CURRENT);  listBox.setSelectedIndex(0);  Settings settings=mainFrame.getSystem().getSettings();  if (updatedVars.contains(settings.userInput)) {    if (settings.recording == Recording.ALL) {      listModel.add(2,"separator-utterances");    } else {      while (listModel.size() > 2) {        String name=listModel.remove(2);        states.remove(name);      }    }  }  Set<String> chanceVars=state.getNewVariables();  Set<String> actionVars=state.getNewActionVariables();  String title="";  if (!chanceVars.isEmpty()) {    title="Updating " + StringUtils.join(chanceVars,",");  }  if (!actionVars.isEmpty()) {    title+=(!title.isEmpty()) ? ", " : "";    title+="Selecting " + StringUtils.join(actionVars,",");  }  if (settings.recording != Recording.NONE && !title.isEmpty()) {    title+="[" + System.currentTimeMillis() + "]";    try {      recordState(state.copy(),title);    } catch (    RuntimeException e) {      log.warning("cannot copy state : " + e);    }  }  visualisation.showBayesianNetwork(state);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public int EOF_sym(){  return 0;}  }
class C{  @Override public boolean equals(Object obj){  checkRep();  if (obj instanceof RatNum) {    RatNum rn=(RatNum)obj;    if (this.isNaN() && rn.isNaN()) {      checkRep();      return true;    } else {      checkRep();      return this.numer == rn.numer && this.denom == rn.denom;    }  } else {    checkRep();    return false;  }}  }
class C{  public boolean hasToTag(){  return hasParameter(ParameterNames.TO_TAG);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public int read() throws IOException {  if (_offset < _tail) {    return _pageBuffer[_offset++] & 0xff;  } else {    return -1;  }}  }
class C{  public static void benchmark(int times){  cern.colt.Timer timer=new cern.colt.Timer();  RandomEngine gen;  timer.reset().start();  for (int i=times; --i >= 0; )   ;  timer.stop().display();  float emptyLoop=timer.elapsedTime();  System.out.println("empty loop timing done.");  gen=new MersenneTwister();  System.out.println("\n MersenneTwister:");  timer.reset().start();  for (int i=times; --i >= 0; )   gen.raw();  timer.stop().display();  System.out.println(times / (timer.elapsedTime() - emptyLoop) + " numbers per second.");  gen=new MersenneTwister64();  System.out.println("\n MersenneTwister64:");  timer.reset().start();  for (int i=times; --i >= 0; )   gen.raw();  timer.stop().display();  System.out.println(times / (timer.elapsedTime() - emptyLoop) + " numbers per second.");  gen=new DRand();  System.out.println("\nDRand:");  timer.reset().start();  for (int i=times; --i >= 0; )   gen.raw();  timer.stop().display();  System.out.println(times / (timer.elapsedTime() - emptyLoop) + " numbers per second.");  java.util.Random javaGen=new java.util.Random();  System.out.println("\njava.util.Random.nextFloat():");  timer.reset().start();  for (int i=times; --i >= 0; )   javaGen.nextFloat();  timer.stop().display();  System.out.println(times / (timer.elapsedTime() - emptyLoop) + " numbers per second.");  System.out.println("\nGood bye.\n");}  }
class C{  private void doAcquireInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public SnackbarBuilder duration(@Duration int duration){  this.duration=duration;  return this;}  }
class C{  public static List<Partition> toPartitions(Collection<NamedPartition> collection){  List<Partition> partitions=new ArrayList<>();  for (  NamedPartition pwn : collection) {    partitions.add(pwn.getPartition());  }  return partitions;}  }
class C{  public void logInfo(String message){  logMessage(IStatus.INFO,message,null);}  }
class C{  @Override protected int computeVerticalScrollRange(){  final int count=getChildCount();  final int contentHeight=getHeight() - mPaddingBottom - mPaddingTop;  if (count == 0) {    return contentHeight;  }  int scrollRange=getChildAt(0).getBottom();  final int scrollY=mScrollY;  final int overscrollBottom=Math.max(0,scrollRange - contentHeight);  if (scrollY < 0) {    scrollRange-=scrollY;  } else   if (scrollY > overscrollBottom) {    scrollRange+=scrollY - overscrollBottom;  }  return scrollRange;}  }
class C{  public static boolean isEmailAddress(String address){  Matcher matcher=VALID_EMAIL.matcher(address);  return matcher.matches();}  }
class C{  private NettyHttpToHttp2Handler makeHttp2ConnectionHandler(){  Http2Connection connection=new DefaultHttp2Connection(false);  InboundHttp2ToHttpAdapter inboundAdapter=new InboundHttp2ToHttpAdapterBuilder(connection).maxContentLength(this.requestPayloadSizeLimit).propagateSettings(true).build();  DelegatingDecompressorFrameListener frameListener=new DelegatingDecompressorFrameListener(connection,inboundAdapter);  Http2Settings settings=new Http2Settings();  settings.initialWindowSize(NettyChannelContext.INITIAL_HTTP2_WINDOW_SIZE);  NettyHttpToHttp2HandlerBuilder builder=new NettyHttpToHttp2HandlerBuilder().connection(connection).frameListener(frameListener).initialSettings(settings);  if (this.debugLogging) {    Http2FrameLogger frameLogger=new Http2FrameLogger(LogLevel.INFO,NettyHttpClientRequestInitializer.class);    builder.frameLogger(frameLogger);  }  NettyHttpToHttp2Handler connectionHandler=builder.build();  return connectionHandler;}  }
class C{  public Builder removeIm(Im im){  this.ims.remove(im);  return this;}  }
class C{  public void xor(BitSet set){  int unitsInCommon;  if (unitsInUse >= set.unitsInUse) {    unitsInCommon=set.unitsInUse;  } else {    unitsInCommon=unitsInUse;    int newUnitsInUse=set.unitsInUse;    ensureCapacity(newUnitsInUse);    unitsInUse=newUnitsInUse;  }  int i;  for (i=0; i < unitsInCommon; i++) {    bits[i]^=set.bits[i];  }  for (; i < set.unitsInUse; i++) {    bits[i]=set.bits[i];  }  recalculateUnitsInUse();}  }
class C{  @Override public DialogueState copy(){  DialogueState sn=new DialogueState(super.copy());  sn.addEvidence(evidence.copy());  sn.parameterVars=new HashSet<String>(parameterVars);  sn.incrementalVars=new HashSet<String>(incrementalVars);  return sn;}  }
class C{  protected void sequence_Wildcard_WildcardNewNotation(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public int joinSegments(Point2D.Double join,double tolerance){  for (int i=0; i < size(); i++) {    Node p=get(i);    if (Geom.length(p.x[0],p.y[0],join.x,join.y) < tolerance) {      remove(i);      return i;    }  }  return -1;}  }
class C{  boolean includes(int ch){  return (first <= ch) && (ch <= last);}  }
class C{  public void writeToLuceneStream(IndexOutput outputStream,int k){  float[] coordsToWrite;  if (isSparse) {    RealVector copy=copy();    copy.sparseToDense();    coordsToWrite=copy.coordinates;  } else {    coordsToWrite=coordinates;  }  for (int i=0; i < k; ++i) {    try {      outputStream.writeInt(Float.floatToIntBits(coordsToWrite[i]));    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private LinkedList reduceBuffer(int newSize){  LinkedList newBuffer=new LinkedList();  List original=bufferHolder.getOrderedCollection();  Collections.reverse(original);  Iterator iter=original.iterator();  int i=0;  while (iter.hasNext() && i < newSize) {    newBuffer.add(iter.next());    i++;  }  return newBuffer;}  }
class C{  public static String fullForm(final String noun){  final String lowString=noun.toLowerCase(Locale.ENGLISH);  String str=lowString.replace("#","");  if (str.startsWith("book ")) {    str=str.substring(5) + " book";  } else   if (str.indexOf(" armor") > -1) {    str=addPrefixIfNotAlreadyThere(lowString,"suit of ","suits of ");  } else {    str=replaceInternalByDisplayNames(PrefixManager.s_instance.fullForm(str,lowString));  }  return str;}  }
class C{  public <R extends RayTraceResult>Optional<R> rayTrace(Cuboid cuboid,BiFunction<Vector3D,Cuboid,R> resultMapper){  return rayTrace(cuboid,0,distance).map(null);}  }
class C{  public void release(){  final boolean isDebugEnabled=logger.isDebugEnabled();synchronized (this.topicsQueue) {    Topic topic=this.currentTopic;    if (topic == null) {      throw new IllegalStateException(LocalizedStrings.Collaboration_COLLABORATION_HAS_NO_CURRENT_TOPIC.toLocalizedString());    }    if (isDebugEnabled) {      logger.debug("Collaboration.release: {} releasing topic",this.toString());    }    if (topic.isEmptyAfterRemovingThread(Thread.currentThread())) {      if (isDebugEnabled) {        logger.debug("Collaboration.release: {} released old topic {}",this.toString(),topic);      }      this.topicsMap.remove(topic.getTopicObject());      if (!this.topicsQueue.isEmpty()) {        Topic nextTopic=(Topic)this.topicsQueue.remove(0);        setCurrentTopic(nextTopic);      } else {        setCurrentTopic(null);      }    } else {      if (isDebugEnabled) {        logger.debug("Collaboration.release: {} released current topic ",this.toString());      }    }  }}  }
class C{  protected void elementAdded(Openable element){  int elementType=element.getElementType();  if (elementType == IJavaElement.JAVA_PROJECT) {    addToParentInfo(element);    this.projectsToUpdate.add(element);  } else {    addToParentInfo(element);    close(element);  }switch (elementType) {case IJavaElement.PACKAGE_FRAGMENT_ROOT:    this.projectsToUpdate.add(element.getJavaProject());  break;case IJavaElement.PACKAGE_FRAGMENT:JavaProject project=(JavaProject)element.getJavaProject();project.resetCaches();break;}}  }
class C{  public double rhumbAzimuth(Location location){  if (location == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","rhumbAzimuth","missingLocation"));  }  double lat1=Math.toRadians(this.latitude);  double lon1=Math.toRadians(this.longitude);  double lat2=Math.toRadians(location.latitude);  double lon2=Math.toRadians(location.longitude);  if (lat1 == lat2 && lon1 == lon2) {    return 0;  }  double dLon=lon2 - lon1;  double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4) / Math.tan(lat1 / 2.0 + Math.PI / 4));  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double azimuthRadians=Math.atan2(dLon,dPhi);  return Double.isNaN(azimuthRadians) ? 0 : Math.toDegrees(azimuthRadians);}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public boolean isPaintHeaderLines(){  Object oo=get_Value(COLUMNNAME_IsPaintHeaderLines);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void collectTypedefs(){  for (  TypedVar var : compiler.getTopScope().getAllSymbols()) {    JSType type=var.getType();    if (type == null || !isTypedef(type) || var.getName().startsWith("window.") || isPrivate(var.getJSDocInfo()))     continue;    JSType realType=compiler.getTypeRegistry().getType(var.getName());    if (realType != null && shouldEmitTypedefByName(realType)) {      typedefs.put(realType,var.getName());    }  }}  }
class C{  public static final void fillRectangleFromTopLeft(GL2 gl,double sx,double sy,double w,double h){  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(sx,sy);  gl.glVertex2d(sx + w,sy);  gl.glVertex2d(sx + w,sy - h);  gl.glVertex2d(sx,sy - h);  gl.glEnd();}  }
class C{  public void onPause(Activity activity){synchronized (activities) {    for (int i=activities.size() - 1; i >= 0; i--) {      if (activities.get(i).getActivity().equals(activity)) {        activities.get(i).pause();        break;      }    }  }}  }
class C{  public boolean isExtraSafetyChecks(){  return extraSafetyChecks;}  }
class C{  public void switchToHeader(Header header){  if (mCurHeader == header) {    getFragmentManager().popBackStack(BACK_STACK_PREFS,FragmentManager.POP_BACK_STACK_INCLUSIVE);  } else {    if (header.fragment == null) {      throw new IllegalStateException("can't switch to header that has no fragment");    }    int direction=mHeaders.indexOf(header) - mHeaders.indexOf(mCurHeader);    switchToHeaderInner(header.fragment,header.fragmentArguments,direction);    setSelectedHeader(header);  }}  }
class C{  public void doAlertDialog(String title,String message){  JTextPane textArea=new JTextPane();  ReportDisplay.setupStylesheet(textArea);  textArea.setEditable(false);  JScrollPane scrollPane=new JScrollPane(textArea,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);  textArea.setText("<pre>" + message + "</pre>");  scrollPane.setPreferredSize(new Dimension((int)(getSize().getWidth() / 1.5),(int)(getSize().getHeight() / 1.5)));  JOptionPane.showMessageDialog(frame,scrollPane,title,JOptionPane.ERROR_MESSAGE);}  }
class C{  public final CC endGroupY(String s){  ver.setEndGroup(s);  return this;}  }
class C{  public void toggleBreakPoint(int line){  if (!isBreakPoint(line)) {    setBreakPoint(line);  } else {    clearBreakPoint(line);  }}  }
class C{  public static final String byteToHexString(byte a){  StringBuffer sb=new StringBuffer(2);  sb.append(NIBBLE[(a >>> 4) & 0xf]);  sb.append(NIBBLE[a & 0xf]);  return sb.toString();}  }
class C{  protected void sequence_TypeRefWithModifiers_UnionTypeExpressionOLD(ISerializationContext context,UnionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public int alloc(int addr,int size){  for (MemoryChunk memoryChunk=low; memoryChunk != null; memoryChunk=memoryChunk.next) {    if (memoryChunk.addr <= addr && addr < memoryChunk.addr + memoryChunk.size) {      return alloc(memoryChunk,addr,size);    }  }  return 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().get("default_subpic_language","");}  }
class C{  public static ShapePainter convertMarkers(Element e,ShapeNode node,BridgeContext ctx){  Value v;  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.MARKER_START_INDEX);  Marker startMarker=convertMarker(e,v,ctx);  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.MARKER_MID_INDEX);  Marker midMarker=convertMarker(e,v,ctx);  v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.MARKER_END_INDEX);  Marker endMarker=convertMarker(e,v,ctx);  if (startMarker != null || midMarker != null || endMarker != null) {    MarkerShapePainter p=new MarkerShapePainter(node.getShape());    p.setStartMarker(startMarker);    p.setMiddleMarker(midMarker);    p.setEndMarker(endMarker);    return p;  } else {    return null;  }}  }
class C{  private long findMaximumInPrimitiveArray0(long[] input){  assert input != null;  assert input.length > 0;  System.out.println(">>>");  System.out.println("Find maximum in primitive array: " + Arrays.toString(input));  System.out.println(">>>");  long maximum=input[0];  for (int i=1; i < input.length; i++) {    if (input[i] > maximum)     maximum=input[i];  }  return maximum;}  }
class C{  public HAPbrpcException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration_N4SetterDeclaration(ISerializationContext context,N4SetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void path(String path){  Objects.requireNonNull(path);  _path=path;}  }
class C{  public Job findJob(String jobId){  for (  Job job : jobs) {    if (job.jobId.equals(jobId)) {      return job;    }  }  return null;}  }
class C{  protected HttpResponse executeOK(HttpUriRequest method) throws IOException, RDF4JException {  boolean fail=true;  HttpResponse response=execute(method);  try {    int httpCode=response.getStatusLine().getStatusCode();    if (httpCode == HttpURLConnection.HTTP_OK || httpCode == HttpURLConnection.HTTP_NOT_AUTHORITATIVE) {      fail=false;      return response;    } else {      throw new RepositoryException("Failed to get server protocol; no such resource on this server: " + method.getURI().toString());    }  }  finally {    if (fail) {      EntityUtils.consumeQuietly(response.getEntity());    }  }}  }
class C{  public static Workflow.Method restoreVolumeMethod(URI storage,URI pool,URI volume,URI snapshot,Boolean updateOpStatus){  return new Workflow.Method("restoreVolumeStep",storage,pool,volume,snapshot,updateOpStatus);}  }
class C{  private void handleExceptionalStatus(State state,InnerState innerState,HttpResponse response) throws StopRequest, RetryDownload {  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode == 503 && mInfo.mNumFailed < Constants.MAX_RETRIES) {    handleServiceUnavailable(state,response);  }  if (statusCode == 301 || statusCode == 302 || statusCode == 303 || statusCode == 307) {    handleRedirect(state,response,statusCode);  }  int expectedStatus=innerState.mContinuingDownload ? 206 : DownloaderService.STATUS_SUCCESS;  if (statusCode != expectedStatus) {    handleOtherStatus(state,innerState,statusCode);  } else {    state.mRedirectCount=0;  }}  }
class C{  private void createLine(MOrder order,MOrderLine orderLine,BigDecimal qty,MStorage[] storages,boolean force){  if (m_lastC_BPartner_Location_ID != orderLine.getC_BPartner_Location_ID())   completeShipment();  m_lastC_BPartner_Location_ID=orderLine.getC_BPartner_Location_ID();  if (m_shipment == null) {    m_shipment=new MInOut(order,0,m_movementDate);    m_shipment.setM_Warehouse_ID(orderLine.getM_Warehouse_ID());    if (order.getC_BPartner_ID() != orderLine.getC_BPartner_ID())     m_shipment.setC_BPartner_ID(orderLine.getC_BPartner_ID());    if (order.getC_BPartner_Location_ID() != orderLine.getC_BPartner_Location_ID())     m_shipment.setC_BPartner_Location_ID(orderLine.getC_BPartner_Location_ID());    if (!m_shipment.save())     throw new IllegalStateException("Could not create Shipment");  }  if (storages == null) {    MInOutLine line=new MInOutLine(m_shipment);    line.setOrderLine(orderLine,0,Env.ZERO);    line.setQty(qty);    if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)     line.setQtyEntered(qty.multiply(orderLine.getQtyEntered()).divide(orderLine.getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP));    line.setLine(m_line + orderLine.getLine());    if (!line.save())     throw new IllegalStateException("Could not create Shipment Line");    log.fine(line.toString());    return;  }  ArrayList<MInOutLine> list=new ArrayList<MInOutLine>();  BigDecimal toDeliver=qty;  for (int i=0; i < storages.length; i++) {    MStorage storage=storages[i];    BigDecimal deliver=toDeliver;    if (storage.getQtyOnHand().signum() < 0)     continue;    if (deliver.compareTo(storage.getQtyOnHand()) > 0 && storage.getQtyOnHand().signum() >= 0) {      if (!force || (force && i + 1 != storages.length))       deliver=storage.getQtyOnHand();    }    if (deliver.signum() == 0)     continue;    int M_Locator_ID=storage.getM_Locator_ID();    MInOutLine line=null;    if (orderLine.getM_AttributeSetInstance_ID() == 0) {      for (int ll=0; ll < list.size(); ll++) {        MInOutLine test=(MInOutLine)list.get(ll);        if (test.getM_Locator_ID() == M_Locator_ID && test.getM_AttributeSetInstance_ID() == 0) {          line=test;          break;        }      }    }    if (line == null) {      line=new MInOutLine(m_shipment);      line.setOrderLine(orderLine,M_Locator_ID,order.isSOTrx() ? deliver : Env.ZERO);      line.setQty(deliver);      list.add(line);    } else     line.setQty(line.getMovementQty().add(deliver));    if (orderLine.getQtyEntered().compareTo(orderLine.getQtyOrdered()) != 0)     line.setQtyEntered(line.getMovementQty().multiply(orderLine.getQtyEntered()).divide(orderLine.getQtyOrdered(),12,BigDecimal.ROUND_HALF_UP));    line.setLine(m_line + orderLine.getLine());    if (!line.save())     throw new IllegalStateException("Could not create Shipment Line");    log.fine("ToDeliver=" + qty + "/"+ deliver+ " - "+ line);    toDeliver=toDeliver.subtract(deliver);    storage.setQtyOnHand(storage.getQtyOnHand().subtract(deliver));    if (toDeliver.signum() == 0)     break;  }  if (toDeliver.signum() != 0) {    if (!force) {      throw new IllegalStateException("Not All Delivered - Remainder=" + toDeliver);    } else {      MInOutLine line=new MInOutLine(m_shipment);      line.setOrderLine(orderLine,0,order.isSOTrx() ? toDeliver : Env.ZERO);      line.setQty(toDeliver);      if (!line.save())       throw new IllegalStateException("Could not create Shipment Line");    }  }}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public static <T>Flowable<T> monoToFlowable(Mono<T> source){  return new FluxAsFlowable<>(source);}  }
class C{  public ElapsedTimer start(){  _startTimeNanos=System.nanoTime();  return this;}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,double[][] arrays,int nbatches) throws Exception {  int ncycles=arrays.length;  for (int i=0; i < nbatches; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ncycles; j++) {      oout.writeObject(arrays[j]);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readObject();    }  }}  }
class C{  private static boolean attemptHtmlNavigation(AccessibilityNodeInfoCompat node,int direction){  final int action=(direction == NAVIGATION_DIRECTION_NEXT) ? AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT : AccessibilityNodeInfoCompat.ACTION_PREVIOUS_HTML_ELEMENT;  return PerformActionUtils.performAction(node,action);}  }
class C{  public final boolean isInRange(double value){  if (m_Type == DATE || Utils.isMissingValue(value)) {    return true;  }  if (m_Type != NUMERIC) {    int intVal=(int)value;    if (intVal < 0 || intVal >= ((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.size()) {      return false;    }  } else {    if (m_AttributeMetaInfo == null) {      return true;    }    if (m_AttributeMetaInfo.m_LowerBoundIsOpen) {      if (value <= m_AttributeMetaInfo.m_LowerBound) {        return false;      }    } else {      if (value < m_AttributeMetaInfo.m_LowerBound) {        return false;      }    }    if (m_AttributeMetaInfo.m_UpperBoundIsOpen) {      if (value >= m_AttributeMetaInfo.m_UpperBound) {        return false;      }    } else {      if (value > m_AttributeMetaInfo.m_UpperBound) {        return false;      }    }  }  return true;}  }
class C{  public static void launchSmsIntent(final Activity activity,String number,String text){  Log.i(LOG_TAG,"Launch SMS intent to " + number);  Uri smsUri=Uri.parse("smsto:" + number);  Intent smsIntent=new Intent(Intent.ACTION_SENDTO,smsUri);  smsIntent.putExtra("sms_body",text);  PackageManager smspackageManager=activity.getPackageManager();  List<ResolveInfo> smsresolveInfos=smspackageManager.queryIntentActivities(smsIntent,0);  if (smsresolveInfos.size() > 0) {    activity.startActivity(smsIntent);  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4){  return construct(e1,e2,e3,e4);}  }
class C{  public WFPanel(AMenu menu,String wfWhereClause,int wfWindow_ID){  m_menu=menu;  m_readWrite=(menu == null);  m_WF_whereClause=wfWhereClause;  m_WF_Window_ID=wfWindow_ID;  log.info("RW=" + m_readWrite);  try {    jbInit();  } catch (  Exception e) {    log.log(Level.SEVERE,"WFPanel",e);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYLineAndShapeRenderer clone=(XYLineAndShapeRenderer)super.clone();  clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();  if (this.legendLine != null) {    clone.legendLine=ShapeUtilities.clone(this.legendLine);  }  clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();  clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();  return clone;}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) private AutoInstallsLayout createWorkspaceLoaderFromAppRestriction(){  if (!Utilities.ATLEAST_JB_MR2) {    return null;  }  Context ctx=getContext();  UserManager um=(UserManager)ctx.getSystemService(Context.USER_SERVICE);  Bundle bundle=um.getApplicationRestrictions(ctx.getPackageName());  if (bundle == null) {    return null;  }  String packageName=bundle.getString(RESTRICTION_PACKAGE_NAME);  if (packageName != null) {    try {      Resources targetResources=ctx.getPackageManager().getResourcesForApplication(packageName);      return AutoInstallsLayout.get(ctx,packageName,targetResources,mOpenHelper.mAppWidgetHost,mOpenHelper);    } catch (    NameNotFoundException e) {      Log.e(TAG,"Target package for restricted profile not found",e);      return null;    }  }  return null;}  }
class C{  public static boolean saveStringToFile(String saveFilePath,String saveFilename,String saveString){  return saveStringToFile(saveFilePath + File.separator + saveFilename,saveString);}  }
class C{  public void jumpToState(@Nonnull State newState){  mStateLock.lock();  try {    if (newState.equals(mState)) {      Log.d(TAG,"No op since jump to the same state.");    } else {      Log.d(TAG,"Change state : " + mState + " => "+ newState);      mState.onLeave();      mState=newState;      Optional<State> nextState=mState.onEnter();      while (nextState.isPresent()) {        Log.d(TAG,"Forward state : " + mState + " => "+ nextState.get());        mState.onLeave();        mState=nextState.get();        nextState=mState.onEnter();      }      mStateChangedCondition.signalAll();    }  }  finally {    mStateLock.unlock();  }}  }
class C{  public boolean hasPublisher(){  return hasExtension(Publisher.class);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static lalr_state find_state(lalr_item_set itms){  if (itms == null)   return null; else   return (lalr_state)_all.get(itms);}  }
class C{  public RoundedCornersDrawable(Drawable drawable){  super(Preconditions.checkNotNull(drawable));}  }
class C{  public String formatMarker(int value){  return numberFormat.format(value);}  }
class C{  protected boolean isValid(){  return (maxX > 0);}  }
class C{  @Override public void write(char cbuf[],int off,int len) throws IOException {  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  builder.append(cbuf,off,len);}  }
class C{  List<Address> geoDecode(String searchedLocation){  try {    Geocoder geo=new Geocoder(sContext,Locale.getDefault());    List<Address> addresses=geo.getFromLocationName(searchedLocation,10);    if (addresses != null && addresses.size() > 0) {      return addresses;    }  } catch (  Exception ex) {  }  return null;}  }
class C{  public boolean processCC() throws IllegalArgumentException {  return m_ok;}  }
class C{  public ConcurrentOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener,long tableSize,int concurrency){  super(new ReadWriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory,evictionListener,(int)(tableSize / concurrency)),concurrency);}  }
class C{  public int hashCode(){  int hash=name.hashCode() * 127;  if (tag == ARRAY) {    Class type=value.getClass();    if (type == int[].class) {      return hash ^ Arrays.hashCode((int[])value);    } else     if (type == byte[].class) {      return hash ^ Arrays.hashCode((byte[])value);    } else     if (type == short[].class) {      return hash ^ Arrays.hashCode((short[])value);    } else     if (type == long[].class) {      return hash ^ Arrays.hashCode((long[])value);    } else     if (type == char[].class) {      return hash ^ Arrays.hashCode((char[])value);    } else     if (type == boolean[].class) {      return hash ^ Arrays.hashCode((boolean[])value);    } else     if (type == float[].class) {      return hash ^ Arrays.hashCode((float[])value);    } else     if (type == double[].class) {      return hash ^ Arrays.hashCode((double[])value);    }    return hash ^ Arrays.hashCode((Object[])value);  } else {    return hash ^ value.hashCode();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_DEFINITION___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.ASSOCIATION_CLASS_DEFINITION___ASSOCIATION_CLASS_CONTENT_1:getAssociationClassContent_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void clearTerminated(){  final Iterator<ResultNode> i=from(registeredSessions).transform(null).iterator();  while (i.hasNext())   if (!i.next().isRunning())   i.remove();  if (currentRoot != null && !registeredSessions.contains(currentRoot))   setShownTestTree(null);  if (currentRoot == null && !registeredSessions.isEmpty())   setShownTestTree(registeredSessions.get(registeredSessions.size() - 1).root.getId());}  }
class C{  public void onMouseDragged(MapMouseEvent ev){}  }
class C{  public POSAnnotator(){  this(true);}  }
class C{  public static boolean copiesEqual(GlobalCopyUID firstCopy,GlobalCopyUID secondCopy){  if (firstCopy != null && secondCopy != null) {    ClusterUID firstCopyClusterUID=firstCopy.getClusterUID();    ClusterUID secondCopyClusterUID=secondCopy.getClusterUID();    if (firstCopyClusterUID != null && secondCopyClusterUID != null && firstCopyClusterUID.getId() == secondCopyClusterUID.getId() && firstCopy.getCopyUID() == secondCopy.getCopyUID()) {      return true;    }  }  return false;}  }
class C{  private static boolean isConnected(Context context,int networkType){  NetworkInfo networkInfo=null;  if (connectivityManager != null) {    networkInfo=connectivityManager.getNetworkInfo(networkType);  }  return networkInfo == null ? false : networkInfo.isConnected();}  }
class C{  private static Properties createProperties1(String conflation){  Properties props=new Properties();  props.setProperty(DELTA_PROPAGATION,"false");  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  props.setProperty(CONFLATE_EVENTS,conflation);  return props;}  }
class C{  protected void integrityCheckParameters(E parentEntry,N parent,int index,AbstractMTree<O,N,E,?> mTree){  E entry=parent.getEntry(index);  double parentDistance=mTree.distance(entry.getRoutingObjectID(),parentEntry.getRoutingObjectID());  if (Math.abs(entry.getParentDistance() - parentDistance) > 1E-10) {    throw new InconsistentDataException("Wrong parent distance in node " + parent.getPageID() + " at index "+ index+ " (child "+ entry+ ")"+ "\nsoll: "+ parentDistance+ ",\n ist: "+ entry.getParentDistance());  }  double mincover=parentDistance + entry.getCoveringRadius();  if (parentEntry.getCoveringRadius() < mincover && Math.abs(parentDistance - entry.getCoveringRadius()) > 1e-10) {    throw new InconsistentDataException("pcr < pd + cr \n" + parentEntry.getCoveringRadius() + " < "+ parentDistance+ " + "+ entry.getCoveringRadius()+ "in node "+ parent.getPageID()+ " at index "+ index+ " (child "+ entry+ "):\n"+ "dist("+ entry.getRoutingObjectID()+ " - "+ parentEntry.getRoutingObjectID()+ ")"+ " >  cr("+ entry+ ")");  }}  }
class C{  public boolean isExecutedQueryByDefault(){  Object oo=get_Value(COLUMNNAME_IsExecutedQueryByDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void verifyConsistencyGroupCanBeUpdated(BlockConsistencyGroup consistencyGroup,List<Volume> cgVolumes){  if (!canConsistencyGroupBeModified(consistencyGroup,cgVolumes)) {    throw APIException.badRequests.cantUpdateCGActiveFullCopies(consistencyGroup.getLabel());  }}  }
class C{  public StringGeneratorBuilder ascii(){  return new StringGeneratorBuilder(Character.MIN_CODE_POINT,ASCII_LAST_CODEPOINT);}  }
class C{  public static Object loadFile(String file){  try {    requireLoad();    if (supported()) {      ScriptLoader.getScriptDirByType("js").mkdirs();      if (file.contains(".js")) {        return ScriptLoader.loadSingle("js",engine,file);      } else {        return ScriptLoader.loadModule("js",engine,file);      }    }  } catch (  Exception e) {    Toast.log().error("Could not Load JavaScript script files: " + e);    Toast.log().exception(e);  }  return null;}  }
class C{  public int[] keys(){  int[] keys=new int[size()];  int[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS_BY_NAME_AND_ACCESS:    return getOwnedMembersByNameAndAccess();case TypesPackage.CONTAINER_TYPE__OWNED_MEMBERS:  return getOwnedMembers();case TypesPackage.CONTAINER_TYPE__CALLABLE_CTOR:return getCallableCtor();case TypesPackage.CONTAINER_TYPE__TYPE_VARS:return getTypeVars();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void main(String[] args){  final File pathToThisJar=new File(findPathTo(CheckerMain.class,false));  ArrayList<String> alargs=new ArrayList<>(args.length);  alargs.addAll(Arrays.asList(args));  final CheckerMain program=new CheckerMain(pathToThisJar,alargs);  final int exitStatus=program.invokeCompiler();  System.exit(exitStatus);}  }
class C{  public void send(String kafkaTopic,String msgKey,String value){  JsonObject obj=new JsonObject().put(ConfigConstants.VALUE_FIELD,value).put(ConfigConstants.TOPIC_FIELD,kafkaTopic).put(ConfigConstants.KEY_FIELD,msgKey).put(TYPE_FIELD,MessageType.CUSTOM_KEY.value);  send(obj);}  }
class C{  private void nextToken(int start){  fToken=fScanner.previousToken(start - 1,JavaHeuristicScanner.UNBOUND);  fPreviousPos=start;  fPosition=fScanner.getPosition() + 1;  try {    fLine=fDocument.getLineOfOffset(fPosition);  } catch (  BadLocationException e) {    fLine=-1;  }}  }
class C{  public TLongDoubleHashMap(){}  }
class C{  private void writeTagPayload(Tag tag) throws IOException {  int type=NBTUtils.getTypeCode(tag.getClass());switch (type) {case NBTConstants.TYPE_END:    writeEndTagPayload((EndTag)tag);  break;case NBTConstants.TYPE_BYTE:writeByteTagPayload((ByteTag)tag);break;case NBTConstants.TYPE_SHORT:writeShortTagPayload((ShortTag)tag);break;case NBTConstants.TYPE_INT:writeIntTagPayload((IntTag)tag);break;case NBTConstants.TYPE_LONG:writeLongTagPayload((LongTag)tag);break;case NBTConstants.TYPE_FLOAT:writeFloatTagPayload((FloatTag)tag);break;case NBTConstants.TYPE_DOUBLE:writeDoubleTagPayload((DoubleTag)tag);break;case NBTConstants.TYPE_BYTE_ARRAY:writeByteArrayTagPayload((ByteArrayTag)tag);break;case NBTConstants.TYPE_STRING:writeStringTagPayload((StringTag)tag);break;case NBTConstants.TYPE_LIST:writeListTagPayload((ListTag)tag);break;case NBTConstants.TYPE_COMPOUND:writeCompoundTagPayload((CompoundTag)tag);break;case NBTConstants.TYPE_INT_ARRAY:writeIntArrayTagPayload((IntArrayTag)tag);break;default :throw new IOException("Invalid tag type: " + type + ".");}}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  area.setRect(area.getX() + insets.getLeft(),area.getY() + insets.getTop(),area.getWidth() - insets.getLeft() - insets.getRight(),area.getHeight() - insets.getTop() - insets.getBottom());  setFixedRangeAxisSpaceForSubplots(null);  AxisSpace space=calculateAxisSpace(g2,area);  Rectangle2D dataArea=space.shrink(area,null);  setFixedRangeAxisSpaceForSubplots(space);  CategoryAxis axis=getDomainAxis();  RectangleEdge domainEdge=getDomainAxisEdge();  double cursor=RectangleEdge.coordinate(dataArea,domainEdge);  AxisState axisState=axis.draw(g2,cursor,area,dataArea,domainEdge,info);  if (parentState == null) {    parentState=new PlotState();  }  parentState.getSharedAxisStates().put(axis,axisState);  for (int i=0; i < this.subplots.size(); i++) {    CategoryPlot plot=(CategoryPlot)this.subplots.get(i);    PlotRenderingInfo subplotInfo=null;    if (info != null) {      subplotInfo=new PlotRenderingInfo(info.getOwner());      info.addSubplotInfo(subplotInfo);    }    Point2D subAnchor=null;    if (anchor != null && this.subplotAreas[i].contains(anchor)) {      subAnchor=anchor;    }    plot.draw(g2,this.subplotAreas[i],subAnchor,parentState,subplotInfo);  }  if (info != null) {    info.setDataArea(dataArea);  }}  }
class C{  public int compareSourceLines(BugCollection lhsCollection,BugCollection rhsCollection,SourceLineAnnotation lhs,SourceLineAnnotation rhs){  if (lhs == null || rhs == null) {    return compareNullElements(lhs,rhs);  }  int cmp=compareClassesByName(lhsCollection,rhsCollection,lhs.getClassName(),rhs.getClassName());  if (cmp != 0) {    return cmp;  }  return 0;}  }
class C{  public String trimTipText(){  return "Trim white space from each end of attribute names and " + "nominal values before matching.";}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrdeletedataoffsetnegative.class,args);}  }
class C{  private boolean enoughRoomForActionButtons(int containerWidth){  int ICONS_MIN_WIDTH=170;  return Util.pxToDp(containerWidth) > ICONS_MIN_WIDTH;}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    this.bufferedReader=(BufferedReader)reader;  } else {    this.bufferedReader=new BufferedReader(reader);  }}  }
class C{  public double[][] trainPoints(EvolutionState state,int benchmark,int threadnum){switch (benchmark) {case KOZA1:case KOZA2:case KOZA3:    return generateRandomSamples(state,-1,1,20,threadnum);case NGUYEN1:case NGUYEN2:case NGUYEN3:case NGUYEN4:case NGUYEN5:case NGUYEN6:  return generateRandomSamples(state,-1,1,20,threadnum);case NGUYEN7:return generateRandomSamples(state,0,2,20,threadnum);case NGUYEN8:return generateRandomSamples(state,0,4,20,threadnum);case NGUYEN9:case NGUYEN10:return generateRandomSamples(state,new double[]{0,0},new double[]{1,1},100,threadnum);case PAGIE1:return generateIntervalSpacedSamples(state,new double[]{-5.0,-5.0},new double[]{5.0,5.0},new double[]{0.4,0.4},threadnum);case PAGIE2:return generateIntervalSpacedSamples(state,new double[]{-5.0,-5.0,-5.0},new double[]{5.0,5.0,5.0},new double[]{0.4,0.4,0.4},threadnum);case KORNS1:case KORNS2:case KORNS3:case KORNS4:case KORNS5:case KORNS6:case KORNS7:case KORNS8:case KORNS9:case KORNS10:case KORNS11:case KORNS12:case KORNS13:case KORNS14:case KORNS15:return generateRandomSamples(state,new double[]{-50,-50,-50,-50,-50},new double[]{50,50,50,50,50},10000,threadnum);case KEIJZER1:return generateIntervalSpacedSamples(state,-1,1,0.1,threadnum);case KEIJZER2:return generateIntervalSpacedSamples(state,-2,2,0.1,threadnum);case KEIJZER3:return generateIntervalSpacedSamples(state,-3,3,0.1,threadnum);case KEIJZER4:return generateIntervalSpacedSamples(state,0,10,0.05,threadnum);case KEIJZER5:return generateRandomSamples(state,new double[]{-1,1,-1},new double[]{1,2,1},1000,threadnum);case KEIJZER6:return generateIntervalSpacedSamples(state,1,50,1,threadnum);case KEIJZER7:return generateIntervalSpacedSamples(state,1,100,1,threadnum);case KEIJZER8:case KEIJZER9:return generateIntervalSpacedSamples(state,0,100,1,threadnum);case KEIJZER10:return generateRandomSamples(state,new double[]{0,0},new double[]{1,1},100,threadnum);case KEIJZER11:case KEIJZER12:case KEIJZER13:case KEIJZER14:case KEIJZER15:return generateRandomSamples(state,new double[]{-3,-3},new double[]{3,3},20,threadnum);case VLADISLAVLEVA1:return generateRandomSamples(state,new double[]{0.3,0.3},new double[]{4,4},100,threadnum);case VLADISLAVLEVA2:return generateIntervalSpacedSamples(state,0.05,10,0.1,threadnum);case VLADISLAVLEVA3:return generateIntervalSpacedSamples(state,new double[]{0.05,0.05},new double[]{10,10.05},new double[]{0.1,2},threadnum);case VLADISLAVLEVA4:return generateRandomSamples(state,new double[]{0.05,0.05,0.05,0.05,0.05},new double[]{6.05,6.05,6.05,6.05,6.05},1024,threadnum);case VLADISLAVLEVA5:return generateRandomSamples(state,new double[]{0.05,1,0.05},new double[]{2,2,2},300,threadnum);case VLADISLAVLEVA6:return generateRandomSamples(state,new double[]{0.1,0.1},new double[]{5.9,5.9},30,threadnum);case VLADISLAVLEVA7:return generateRandomSamples(state,new double[]{0.05,0.05},new double[]{6.05,6.05},300,threadnum);case VLADISLAVLEVA8:return generateRandomSamples(state,new double[]{0.05,0.05},new double[]{6.05,6.05},50,threadnum);default :return null;}}  }
class C{  public static String bytesToHexString(byte[] bytes){  if (bytes == null)   return null;  StringBuilder ret=new StringBuilder(2 * bytes.length);  for (int i=0; i < bytes.length; i++) {    int b;    b=0x0f & (bytes[i] >> 4);    ret.append("0123456789abcdef".charAt(b));    b=0x0f & bytes[i];    ret.append("0123456789abcdef".charAt(b));  }  return ret.toString();}  }
class C{  public RecoveryRequest(String... indices){  super(indices);}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public TaskList restoreFullCopy(URI sourceURI,URI fullCopyURI) throws InternalException {  s_logger.info("START restore source {} from full copy {}",sourceURI,fullCopyURI);  Map<URI,BlockObject> resourceMap=BlockFullCopyUtils.verifySourceAndFullCopy(sourceURI,fullCopyURI,_uriInfo,_dbClient);  if (URIUtil.isType(sourceURI,BlockSnapshot.class)) {    throw APIException.badRequests.fullCopyRestoreNotSupportedForSnapshot();  }  Volume sourceVolume=(Volume)resourceMap.get(sourceURI);  Volume fullCopyVolume=(Volume)resourceMap.get(fullCopyURI);  if (BlockFullCopyUtils.isFullCopyDetached(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.detachedFullCopyCannotBeRestored(fullCopyURI.toString());  }  if (BlockFullCopyUtils.isFullCopyInactive(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.inactiveFullCopyCannotBeRestored(fullCopyURI.toString());  }  if (!BlockFullCopyUtils.isFullCopyRestorable(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.fullCopyCannotBeRestored(fullCopyURI.toString(),fullCopyVolume.getReplicaState());  }  BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fullCopyVolume);  TaskList taskList=fullCopyApiImpl.restoreSource(sourceVolume,fullCopyVolume);  auditOp(OperationTypeEnum.RESTORE_VOLUME_FULL_COPY,true,AuditLogManager.AUDITOP_BEGIN,fullCopyURI);  s_logger.info("FINISH restore source {} from full copy {}",sourceURI,fullCopyURI);  return taskList;}  }
class C{  public RegisterOperand(Register reg,TypeReference typ,byte inFlags,boolean isPrecise,boolean isDeclared){  setRegister(reg);  flags=inFlags;  if (isPrecise) {    setPreciseType(typ);  } else {    clearPreciseType();    setType(typ);  }  if (isDeclared) {    setDeclaredType();  } else {    clearDeclaredType();  }}  }
class C{  private void compilePredicates(int opPos,Expression[] predicates) throws TransformerException {  for (int i=0; OpCodes.OP_PREDICATE == getOp(opPos); i++) {    predicates[i]=predicate(opPos);    opPos=getNextOpPos(opPos);  }}  }
class C{  private void insert(Object obj,int handle,int idx){  objs[handle]=obj;  next[handle]=spine[idx];  spine[idx]=handle;}  }
class C{  public static void initStatic(String nbestListFile,String localNbestListFile,String previousWtsFiles,int nStartingPoints,MERT defaultMERT) throws IOException, ClassNotFoundException {  startTime=System.currentTimeMillis();  EvaluationMetric<IString,String> emetric=defaultMERT.emetric;  previousWts=new ArrayList<Counter<String>>();  for (  String previousWtsFile : previousWtsFiles.split(","))   previousWts.add(removeWts(IOTools.readWeights(previousWtsFile,featureIndex),fixedWts));  initialWts=previousWts.get(0);  DenseScorer scorer=new DenseScorer(initialWts,featureIndex);  System.err.printf("Loading nbest list: %s\n",nbestListFile);  nbest=new FlatNBestList(nbestListFile,featureIndex,defaultMERT.references.size());  System.err.printf("Loading local nbest list: %s\n",localNbestListFile);  FlatNBestList localNbest=null;  if (!"none".equals(localNbestListFile)) {    localNbest=new FlatNBestList(localNbestListFile,nbest.sequenceSelfMap,featureIndex,defaultMERT.references.size());  }  mcmcObj=(System.getProperty("mcmcELossDirExact") != null || System.getProperty("mcmcELossSGD") != null || System.getProperty("mcmcELossCG") != null);  if (mcmcObj) {    initialObjValue=defaultMERT.mcmcTightExpectedEval(nbest,initialWts,emetric);  } else {    initialObjValue=nbestEval;  }  if (localNbest != null) {    List<ScoredFeaturizedTranslation<IString,String>> localNbestArgmax=transArgmax(localNbest,initialWts);    List<ScoredFeaturizedTranslation<IString,String>> nbestArgmax=transArgmax(nbest,initialWts);    double localNbestEval=emetric.score(localNbestArgmax);    nbestEval=emetric.score(nbestArgmax);    reuseWeights=Math.abs(localNbestEval - nbestEval) < MAX_LOCAL_ALL_GAP_WTS_REUSE;    System.err.printf("Eval: %f Local apply: %f\n",nbestEval,localNbestEval);    System.err.printf("Rescoring entries\n");    System.err.printf("n-best list sizes %d, %d\n",localNbest.nbestLists().size(),nbest.nbestLists().size());    if (localNbest.nbestLists().size() != nbest.nbestLists().size()) {      System.err.printf("Error incompatible local and cummulative n-best lists, sizes %d != %d\n",localNbest.nbestLists().size(),nbest.nbestLists().size());      System.exit(-1);    }{      int lI=-1;      for (      List<ScoredFeaturizedTranslation<IString,String>> nbestlist : nbest.nbestLists()) {        lI++;        List<ScoredFeaturizedTranslation<IString,String>> lNbestList=localNbest.nbestLists().get(lI);        double minReachableScore=Double.POSITIVE_INFINITY;        double maxReachableScore=Double.NEGATIVE_INFINITY;        for (        ScoredFeaturizedTranslation<IString,String> trans : lNbestList) {          double score=scorer.getIncrementalScore(trans.features);          if (score < minReachableScore)           minReachableScore=score;          if (score > maxReachableScore)           maxReachableScore=score;        }        if (nbestlist.isEmpty())         throw new RuntimeException(String.format("Nbest list of size zero at %d. Perhaps Phrasal ran out of memory?\n",lI));        System.err.printf("l %d - min reachable score: %f (orig size: %d)\n",lI,minReachableScore,nbestlist.size());        for (        ScoredFeaturizedTranslation<IString,String> trans : nbestlist) {          trans.score=scorer.getIncrementalScore(trans.features);          if (trans.score > minReachableScore && filterUnreachable)           trans.score=Double.NaN;          if (trans.score > maxReachableScore && filterStrictlyUnreachable) {            trans.score=Double.NaN;          }        }      }    }    System.err.printf("removing anything that might not be reachable\n");    for (int lI=0; lI < nbest.nbestLists().size(); lI++) {      List<ScoredFeaturizedTranslation<IString,String>> newList=new ArrayList<ScoredFeaturizedTranslation<IString,String>>(nbest.nbestLists().get(lI).size());      List<ScoredFeaturizedTranslation<IString,String>> lNbestList=localNbest.nbestLists().get(lI);      for (      ScoredFeaturizedTranslation<IString,String> trans : nbest.nbestLists().get(lI)) {        if (!Double.isNaN(trans.score))         newList.add(trans);      }      if (filterUnreachable)       newList.addAll(lNbestList);      nbest.nbestLists().set(lI,newList);      System.err.printf("l %d - final (filtered) combined n-best list size: %d\n",lI,newList.size());    }  }  for (  List<ScoredFeaturizedTranslation<IString,String>> nbestlist : nbest.nbestLists()) {    for (    ScoredFeaturizedTranslation<IString,String> trans : nbestlist) {      for (      FeatureValue<String> f : trans.features) {        if (f != null) {          initialWts.incrementCount(f.name,0);          for (          Counter<String> prevWt : previousWts) {            prevWt.incrementCount(f.name,0);          }        }      }    }  }  for (int i=0; i < nStartingPoints; i++) {    Counter<String> wts;    if (i == 0) {      wts=initialWts;    } else {      if (i < previousWts.size()) {        wts=previousWts.get(i);      } else {        wts=randomWts(initialWts.keySet());      }    }    startingPoints.add(wts);  }  nInitialStartingPoints=startingPoints.size();  if (System.getProperty("C") != null) {    C=Double.parseDouble(System.getProperty("C"));    System.err.printf("Using C %f rather than default of %f\n",C,DEFAULT_C);  }  if (System.getProperty("T") != null) {    T=Double.parseDouble(System.getProperty("T"));    System.err.printf("Using T %f rather than default of %f\n",T,DEFAULT_T);  }  lrate=(C != 0 ? DEFAULT_UNSCALED_L_RATE / C : DEFAULT_UNSCALED_L_RATE);  System.out.printf("sgd lrate: %e\n",lrate);  if (reuseWeights) {    System.err.println("Re-using initial wts");  } else {    System.err.println("*NOT* Re-using initial wts");  }  removeWts(initialWts,fixedWts);  initialEval=evalAtPoint(nbest,initialWts,emetric);  updateBest(initialWts,-initialEval);  System.out.printf("Initial Eval Score: %e\n",initialEval);  System.out.printf("Initial Weights:\n==================\n");  displayWeights(initialWts);}  }
class C{  MetadataCreatorImpl(MetadataRegistry root,TransformKey transformKey){  this.registry=root;  this.transformKey=transformKey;}  }
class C{  protected MouseInputListener createMouseInputListener(){  return new AquaListUI.MouseInputHandler();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.109 -0500",hash_original_method="5F2EA25AC3DD353181FB87C4D2763923",hash_generated_method="5AC5D4780EE2C7D9F486FE4D8EC21557") public static float[] spatialSampling(Gesture gesture,int bitmapSize){  return spatialSampling(gesture,bitmapSize,false);}  }
class C{  public static void join(DetachedBaggage otherBaggage){  if (otherBaggage == null || otherBaggage.impl == null) {    return;  }  BaggageImpl impl=current.get();  if (impl == null) {    current.set(otherBaggage.impl);  } else {    impl.merge(otherBaggage.impl);  }  otherBaggage.impl=null;}  }
class C{  public List<T> findByIds(List<URI> ids) throws DataAccessException {  if (ids != null) {    return active(client.findByIds(clazz,ids));  }  return Lists.newArrayList();}  }
class C{  public void init(Map<String,Map<String,AlertDefinitionAPIEntity>> initialAlertDefs,AlertDefinitionDAO dao,Config config){  if (!initialized) {synchronized (this) {      if (!initialized) {        internalInit(initialAlertDefs,dao,config);        initialized=true;      }    }  }}  }
class C{  public static String halfWidthToFullWidth(String s){  if (isEmpty(s)) {    return s;  }  char[] source=s.toCharArray();  for (int i=0; i < source.length; i++) {    if (source[i] == ' ') {      source[i]=(char)12288;    } else     if (source[i] >= 33 && source[i] <= 126) {      source[i]=(char)(source[i] + 65248);    } else {      source[i]=source[i];    }  }  return new String(source);}  }
class C{  public OP_TYPE build(){  if (null == op.getSeeds()) {    if (seeds != null) {      op.setSeeds(seeds);    }  }  return op;}  }
class C{  public MigrationRule(final E source){  this(source,source);}  }
class C{  public long skip(long n) throws IOException {  long remaining=n;  final char[] ch=new char[fBuffer.length];  do {    int length=ch.length < remaining ? ch.length : (int)remaining;    int count=read(ch,0,length);    if (count > 0) {      remaining-=count;    } else {      break;    }  } while (remaining > 0);  long skipped=n - remaining;  return skipped;}  }
class C{  @Override final public void mouseWheelMoved(MouseWheelEvent e){  mouseWheelMove(e);}  }
class C{  private void loadCenters(){  try {    System.out.println("Load a center file");    final String centerName=new FileOpen("Load A Center File",s_mapFolderLocation,".txt").getPathString();    if (centerName == null) {      return;    }    final FileInputStream in=new FileInputStream(centerName);    m_centers=PointFileReaderWriter.readOneToOne(in);    repaint();  } catch (  final HeadlessException|IOException ex) {    ClientLogger.logQuietly(ex);  }}  }
class C{  public static boolean isIntranet(final String host){  return (noLocalCheck || host == null || INTRANET_PATTERNS.matcher(host).matches()) || localHostNames.contains(host);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public void createGroupMirrors(StorageSystem storage,List<URI> mirrorList,Boolean createInactive,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("createGroupMirrors operation START");  List<BlockMirror> mirrors=null;  List<String> targetDeviceIds=null;  try {    mirrors=_dbClient.queryObject(BlockMirror.class,mirrorList);    BlockMirror firstMirror=mirrors.get(0);    Volume sourceVolume=_dbClient.queryObject(Volume.class,firstMirror.getSource());    String sourceGroupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(sourceVolume,_dbClient);    if (!ControllerUtils.isNotInRealVNXRG(sourceVolume,_dbClient)) {      ReplicationUtils.checkReplicationGroupAccessibleOrFail(storage,sourceVolume,_dbClient,_helper,_cimPath);    }    List<String> sourceIds=new ArrayList<String>();    targetDeviceIds=new ArrayList<String>();    Map<String,String> tgtToSrcMap=new HashMap<String,String>();    for (    BlockMirror mirror : mirrors) {      final URI poolId=mirror.getPool();      final Volume source=_dbClient.queryObject(Volume.class,mirror.getSource());      sourceIds.add(source.getNativeId());      final List<String> newDeviceIds=ReplicationUtils.createTargetDevices(storage,sourceGroupName,mirror.getLabel(),createInactive,1,poolId,mirror.getCapacity(),source.getThinlyProvisioned(),null,taskCompleter,_dbClient,_helper,_cimPath);      targetDeviceIds.addAll(newDeviceIds);      tgtToSrcMap.put(newDeviceIds.get(0),source.getNativeId());    }    CIMObjectPath[] targetDevicePaths=_cimPath.getVolumePaths(storage,targetDeviceIds.toArray(new String[targetDeviceIds.size()]));    CIMObjectPath[] sourceDevicePaths=_cimPath.getVolumePaths(storage,sourceIds.toArray(new String[sourceIds.size()]));    CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] inArgs=_helper.getCreateListReplicaInputArguments(storage,sourceDevicePaths,targetDevicePaths);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,replicationSvc,SmisConstants.CREATE_LIST_REPLICA,inArgs,outArgs);    CIMObjectPath job=_cimPath.getCimObjectPathFromOutputArgs(outArgs,SmisConstants.JOB);    ControllerServiceImpl.enqueueJob(new QueueJob(new SmisVnxCreateCGMirrorJob(job,storage.getId(),tgtToSrcMap,taskCompleter)));    for (    BlockMirror mirror : mirrors) {      mirror.setSyncState(SynchronizationState.SYNCHRONIZED.name());    }    _dbClient.persistObject(mirrors);  } catch (  Exception e) {    _log.error("Problem making SMI-S call: ",e);    ReplicationUtils.rollbackCreateReplica(storage,null,targetDeviceIds,taskCompleter,_dbClient,_helper,_cimPath);    if (mirrors != null && !mirrors.isEmpty()) {      for (      BlockMirror mirror : mirrors) {        mirror.setInactive(true);      }    }    _dbClient.persistObject(mirrors);    ServiceError error=DeviceControllerErrors.smis.methodFailed("createGroupMirrors",e.getMessage());    taskCompleter.error(_dbClient,error);  }  _log.info("createGroupMirrors operation END");}  }
class C{  protected void checkChildType(Node n,boolean replace){switch (n.getNodeType()) {case TEXT_NODE:case ENTITY_REFERENCE_NODE:case DOCUMENT_FRAGMENT_NODE:    break;default :  throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,"child.type",new Object[]{new Integer(getNodeType()),getNodeName(),new Integer(n.getNodeType()),n.getNodeName()});}}  }
class C{  public Quaterniond rotateLocalZ(double angle){  return rotateLocalZ(angle,this);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof StringCharacterIterator))   return false;  StringCharacterIterator that=(StringCharacterIterator)obj;  if (hashCode() != that.hashCode())   return false;  if (!text.equals(that.text))   return false;  if (pos != that.pos || begin != that.begin || end != that.end)   return false;  return true;}  }
class C{  public static boolean checkTransactionFees(int size,Transaction transaction,TransactionOutput output){  long in=output.getValue().value;  long out=0;  for (  TransactionOutput o : transaction.getOutputs()) {    out+=o.getValue().value;  }  long diff=in - out;  float f=((float)diff) / size;  if (f >= Constants.FEE_PER_BYTE_MIN) {    if (f <= Constants.FEE_PER_BYTE_MAX) {      return true;    }  }  System.out.println("Fee not correct. Total Fee: " + diff + " Per Byte: "+ f+ " Size: "+ size);  return false;}  }
class C{  private OrganizedOperands organizeOperandsForAndJunction(ExecutionContext context) throws AmbiguousNameException, FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  List evalOperands=new ArrayList(_operands.length);  int evalCount=0;  int lessCondnOp=-1;  int greaterCondnOp=-1;  CompiledComparison lessCondnOperand=null;  CompiledComparison greaterCondnOperand=null;  CompiledComparison equalCondnOperand=null;  Object equalCondKey=null;  Object lessCondnKey=null;  Object greaterCondnKey=null;  boolean emptyResults=false;  Set notEqualTypeKeys=null;  boolean possibleRangeFilter=false;  IndexInfo indxInfo=null;  for (int i=0; i < _operands.length; i++) {    CompiledValue operand=_operands[i];    if (operand.getPlanInfo(context).evalAsFilter) {      Indexable cc=(Indexable)operand;      if (indxInfo == null) {        indxInfo=cc.getIndexInfo(context)[0];      }      if (!cc.isRangeEvaluatable()) {        evalCount++;        evalOperands.add(0,_operands[i]);        continue;      }      CompiledValue ccKey=((CompiledComparison)cc).getKey(context);      Object evaluatedCCKey=ccKey.evaluate(context);      int operator=((CompiledComparison)cc).reflectOnOperator(ccKey);      if (evaluatedCCKey == null) {        evalCount++;        evalOperands.add(0,_operands[i]);        continue;      }      if (equalCondnOperand != null) {        emptyResults=!isConditionSatisfied(equalCondKey,evaluatedCCKey,operator);        if (emptyResults) {          break;        } else {          continue;        }      }switch (operator) {case TOK_EQ:        possibleRangeFilter=false;      equalCondnOperand=(CompiledComparison)cc;    equalCondKey=evaluatedCCKey;  break;case TOK_NE:case TOK_NE_ALT:possibleRangeFilter=true;if (notEqualTypeKeys == null) {notEqualTypeKeys=new HashSet(_operands.length);}evaluatedCCKey=TypeUtils.indexKeyFor(evaluatedCCKey);notEqualTypeKeys.add(evaluatedCCKey);break;case TOK_GE:case TOK_GT:possibleRangeFilter=true;if (greaterCondnOperand == null) {greaterCondnOperand=(CompiledComparison)cc;greaterCondnKey=evaluatedCCKey;greaterCondnOp=operator;} else {if (isConditionSatisfied(evaluatedCCKey,greaterCondnKey,greaterCondnOp)) {greaterCondnKey=evaluatedCCKey;greaterCondnOperand=(CompiledComparison)cc;greaterCondnOp=operator;}}break;case TOK_LE:case TOK_LT:possibleRangeFilter=true;if (lessCondnOperand == null) {lessCondnOperand=(CompiledComparison)cc;lessCondnKey=evaluatedCCKey;lessCondnOp=operator;} else {if (isConditionSatisfied(evaluatedCCKey,lessCondnKey,lessCondnOp)) {lessCondnKey=evaluatedCCKey;lessCondnOperand=(CompiledComparison)cc;lessCondnOp=operator;}}break;}} else if (!_operands[i].isDependentOnCurrentScope(context)) {Support.assertionFailed("An independentoperand should not ever be present as operand inside a GroupJunction as it should always be present only in CompiledJunction");} else {evalOperands.add(_operands[i]);}}if (!emptyResults) {Filter filter=null;if (equalCondnOperand != null) {if (lessCondnOperand != null && !this.isConditionSatisfied(equalCondKey,lessCondnKey,lessCondnOp)) {emptyResults=true;} else if (greaterCondnOperand != null && !this.isConditionSatisfied(equalCondKey,greaterCondnKey,greaterCondnOp)) {emptyResults=true;} else if (notEqualTypeKeys != null) {Iterator itr=notEqualTypeKeys.iterator();while (itr.hasNext() && !emptyResults) {emptyResults=!this.isConditionSatisfied(equalCondKey,itr.next(),OQLLexerTokenTypes.TOK_NE);}}if (!emptyResults) {filter=equalCondnOperand;}} else if (possibleRangeFilter) {if (lessCondnOperand != null && greaterCondnOperand != null) {emptyResults=!checkForRangeBoundednessAndTrimNotEqualKeyset(notEqualTypeKeys,lessCondnKey,lessCondnOp,greaterCondnKey,greaterCondnOp);if (!emptyResults) {filter=new DoubleCondnRangeJunctionEvaluator(lessCondnOp,lessCondnKey,greaterCondnOp,greaterCondnKey,(notEqualTypeKeys == null || notEqualTypeKeys.isEmpty()) ? null : notEqualTypeKeys,indxInfo);}} else if (greaterCondnOperand != null) {filter=generateSingleCondnEvaluatorIfRequired(notEqualTypeKeys,greaterCondnOperand,greaterCondnOp,greaterCondnKey,indxInfo);} else if (lessCondnOperand != null) {filter=generateSingleCondnEvaluatorIfRequired(notEqualTypeKeys,lessCondnOperand,lessCondnOp,lessCondnKey,indxInfo);} else {assert notEqualTypeKeys != null && !notEqualTypeKeys.isEmpty();filter=new NotEqualConditionEvaluator(notEqualTypeKeys,indxInfo);}}if (emptyResults) {evalOperands.clear();evalCount=1;evalOperands.add(new CompiledLiteral(Boolean.FALSE));} else if (filter != null) {evalCount++;evalOperands.add(0,filter);}} else {evalOperands.clear();evalCount=1;evalOperands.add(new CompiledLiteral(Boolean.FALSE));}if (!(context instanceof QueryExecutionContext) || !((QueryExecutionContext)context).hasMultiHints()) {if (getIterOperands() != null) {evalOperands.add(getIterOperands());}}return createOrganizedOperandsObject(evalCount,evalOperands);}  }
class C{  private void createDialogShell(){  dialogShell=new Shell(getParent(),SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);  dialogShell.setText(CoreMessages.dialog_go_to_title);  FormLayout formLayout=new FormLayout();  formLayout.marginHeight=3;  formLayout.marginWidth=3;  dialogShell.setLayout(formLayout);  label=new Label(dialogShell,SWT.NONE);  FormData formData=new FormData();  formData.left=new FormAttachment(0,5);  formData.right=new FormAttachment(100);  label.setLayoutData(formData);  createTextPanel();  createButtonsPanel();  label2=new Label(dialogShell,SWT.CENTER);  FormData formData2=new FormData();  formData2.left=new FormAttachment(0);  formData2.right=new FormAttachment(100);  formData2.top=new FormAttachment(textComposite);  formData2.bottom=new FormAttachment(100,-10);  label2.setLayoutData(formData2);}  }
class C{  @Override public void windowClosed(WindowEvent e){}  }
class C{  public byte[] evaluateChallenge(byte[] challengeData) throws SaslException {  if (completed) {    throw new IllegalStateException("PLAIN authentication already completed");  }  completed=true;  try {    byte[] authz=(authorizationID != null) ? authorizationID.getBytes("UTF8") : null;    byte[] auth=authenticationID.getBytes("UTF8");    byte[] answer=new byte[pw.length + auth.length + 2+ (authz == null ? 0 : authz.length)];    int pos=0;    if (authz != null) {      System.arraycopy(authz,0,answer,0,authz.length);      pos=authz.length;    }    answer[pos++]=SEP;    System.arraycopy(auth,0,answer,pos,auth.length);    pos+=auth.length;    answer[pos++]=SEP;    System.arraycopy(pw,0,answer,pos,pw.length);    clearPassword();    return answer;  } catch (  java.io.UnsupportedEncodingException e) {    throw new SaslException("Cannot get UTF-8 encoding of ids",e);  }}  }
class C{  public static SelectorExtractor selector(String query){  return new SelectorExtractor(query);}  }
class C{  public String intern(){  return VM.intern(this);}  }
class C{  public void addPolygon(PositionTextureVertex[] verts,int u1,int v1,int u2,int v2){  copyTo(verts,new TexturedPolygon[]{addPolygonReturn(verts,u1,v1,u2,v2)});}  }
class C{  public void cancelCancellable(){  if (timeoutMessageCancellable != null) {    timeoutMessageCancellable.cancel();  }}  }
class C{  private void freshAttributeVector(){  m_AttValues=toDoubleArray();}  }
class C{  @SuppressWarnings("unchecked") public static <K,T>Map<K,T> toMap(String json){  try {    return objectMapper.readValue(json,Map.class);  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return null;}  }
class C{  public boolean protectedAccess(Environment env,MemberDefinition f,Type accessorType) throws ClassNotFound {  return f.isStatic() || (accessorType.isType(TC_ARRAY) && (f.getName() == idClone) && (f.getType().getArgumentTypes().length == 0)) || (accessorType.isType(TC_CLASS) && env.getClassDefinition(accessorType.getClassName()).subClassOf(env,getClassDeclaration()))|| (getName().getQualifier().equals(f.getClassDeclaration().getName().getQualifier()));}  }
class C{  public KMLSurfacePolygonImpl(KMLTraversalContext tc,KMLGroundOverlay overlay){  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (overlay == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.parent=overlay;  Position.PositionList corners=overlay.getPositions();  this.setOuterBoundary(corners.list);  KMLLatLonBox box=overlay.getLatLonBox();  if (box != null && box.getRotation() != null) {    this.mustApplyRotation=true;  }  if (overlay.getName() != null)   this.setValue(AVKey.DISPLAY_NAME,overlay.getName());  if (overlay.getDescription() != null)   this.setValue(AVKey.BALLOON_TEXT,overlay.getDescription());  if (overlay.getSnippetText() != null)   this.setValue(AVKey.SHORT_DESCRIPTION,overlay.getSnippetText());  String colorStr=overlay.getColor();  if (!WWUtil.isEmpty(colorStr)) {    Color color=WWUtil.decodeColorABGR(colorStr);    ShapeAttributes attributes=new BasicShapeAttributes();    attributes.setDrawInterior(true);    attributes.setInteriorMaterial(new Material(color));    this.setAttributes(attributes);  }}  }
class C{  public static int indexOf(long[] array,long[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  long c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (array[i] != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (sub[j] != array[k]) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  DocumentType docType;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    nodeMap=docType.getEntities();    assertNotNull("entitiesNotNull",nodeMap);    newNode=nodeMap.getNamedItem("alpha");    assertNotNull("entityNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  private void updateVolumesInConsistencyGroup(){  log.info("Migrating volumes in CG");  DbClient dbClient=getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,true);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  while (volumes.hasNext()) {    Volume volume=volumes.next();    URI cgUri=volume.getConsistencyGroup();    URI storageUri=volume.getStorageController();    if (!NullColumnValueGetter.isNullURI(volume.getConsistencyGroup())) {      BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,cgUri);      StorageSystem system=dbClient.queryObject(StorageSystem.class,storageUri);      if (cg == null || system == null) {        continue;      }      if (volume.getSrdfParent() != null || volume.getSrdfTargets() != null) {        continue;      }      if (system.getSystemType().equals(DiscoveredDataObject.Type.vplex.name()) && cg.checkForType(Types.LOCAL)) {        String personality=volume.getPersonality();        if (NullColumnValueGetter.isNullValue(personality) || personality.equals(PersonalityTypes.SOURCE.name())) {          StringSet associatedVolumeIds=volume.getAssociatedVolumes();          if (associatedVolumeIds != null) {            for (            String associatedVolumeId : associatedVolumeIds) {              Volume backendVol=dbClient.queryObject(Volume.class,URI.create(associatedVolumeId));              updateBackendVolume(cg,backendVol,dbClient);            }          }        }      } else       if (!cg.isProtectedCG()) {        String rpName=cg.getCgNameOnStorageSystem(storageUri);        if (rpName != null && !rpName.isEmpty()) {          volume.setReplicationGroupInstance(rpName);          dbClient.updateObject(volume);        }      }    }  }}  }
class C{  private void verifyUniqueKeys(List<KV<Integer,Query>> queries){  Set<Integer> keys=new HashSet<>();  for (  KV<Integer,Query> kv : queries) {    keys.add(kv.getKey());  }  assertEquals(keys.size(),queries.size());}  }
class C{  public boolean isHistoricalDataRunning(Tradestrategy tradestrategy){  if (m_historyDataRequests.containsKey(tradestrategy.getId())) {    return true;  }  return false;}  }
class C{  public int removeIfExists(final String userId,final String dataId) throws RepositoryException {  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(Vote.USER_ID,FilterOperator.EQUAL,userId));  filters.add(new PropertyFilter(Vote.DATA_ID,FilterOperator.EQUAL,dataId));  final Query query=new Query().setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));  final JSONObject result=get(query);  final JSONArray array=result.optJSONArray(Keys.RESULTS);  if (0 == array.length()) {    return -1;  }  final JSONObject voteToRemove=array.optJSONObject(0);  remove(voteToRemove.optString(Keys.OBJECT_ID));  return voteToRemove.optInt(Vote.TYPE);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","shxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public SampleMovingAverage(int samples){  this.samples=samples;}  }
class C{  public VolumeAttachResponse attachVolume(String volumeId,String initiator,String[] wwpns,String[] wwnns,String host) throws Exception {  _log.info("CinderApi - start attachVolume");  Gson gson=new Gson();  VolumeAttachRequest volumeAttach=new VolumeAttachRequest();  if (initiator != null) {    volumeAttach.initializeConnection.connector.initiator=initiator;  } else {    if (wwpns != null) {      volumeAttach.initializeConnection.connector.wwpns=Arrays.copyOf(wwpns,wwpns.length);    }    if (null != wwnns) {      volumeAttach.initializeConnection.connector.wwnns=Arrays.copyOf(wwnns,wwnns.length);    }  }  volumeAttach.initializeConnection.connector.host=host;  String volumeAttachmentUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_VOLUME_ACTION,new Object[]{endPoint.getCinderTenantId(),volumeId});  _log.debug("attaching volume to initiator with uri {}",volumeAttachmentUri);  String json=gson.toJson(volumeAttach);  _log.info("attaching volume with body {}",json);  ClientResponse js_response=getClient().postWithHeader(URI.create(volumeAttachmentUri),json);  String s=js_response.getEntity(String.class);  _log.debug("Got the response {}",s);  VolumeAttachResponse response=null;  _log.debug("Response status {}",String.valueOf(js_response.getStatus()));  if (js_response.getStatus() == ClientResponse.Status.OK.getStatusCode()) {    try {      response=gson.fromJson(SecurityUtils.sanitizeJsonString(s),VolumeAttachResponse.class);    } catch (    JsonSyntaxException ex) {      VolumeAttachResponseAlt altResponse=gson.fromJson(SecurityUtils.sanitizeJsonString(s),VolumeAttachResponseAlt.class);      response=getResponseInVolumeAttachResponseFormat(altResponse);    }  } else {    throw CinderException.exceptions.volumeAttachFailed(s);  }  _log.info("CinderApi - end attachVolume");  return response;}  }
class C{  private boolean isTaxIncluded(int WindowNo){  String ss=Env.getContext(Env.getCtx(),WindowNo,"IsTaxIncluded");  if (ss.length() == 0) {    int M_PriceList_ID=Env.getContextAsInt(Env.getCtx(),WindowNo,"M_PriceList_ID");    if (M_PriceList_ID == 0)     return false;    ss=DB.getSQLValueString(null,"SELECT IsTaxIncluded FROM M_PriceList WHERE M_PriceList_ID=?",M_PriceList_ID);    if (ss == null)     ss="N";    Env.setContext(Env.getCtx(),WindowNo,"IsTaxIncluded",ss);  }  return "Y".equals(ss);}  }
class C{  public synchronized void reset(int cmid){  int index=findHeapIdx(cmid);  if (index > 0) {    map[cmid]=0;    nextIndex--;    if (index < nextIndex) {      double oldValue=counts[index];      counts[index]=counts[nextIndex];      cmids[index]=cmids[nextIndex];      map[cmids[index]]=index;      if (counts[index] > oldValue) {        heapifyUp(index);      } else {        heapifyDown(index);      }    }  }  if (DEBUG)   validityCheck();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int value;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          value=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) != z) {              z=data.get(a);              value++;            }          }          outputFile.setValue(row,col,value);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.100 -0400",hash_original_method="02F113772DEC1618BE4A7F2BC7B846DE",hash_generated_method="5B772556B53A8F8B9942E093E8A9593E") public boolean isInMemory(){  return !isThresholdExceeded();}  }
class C{  public static <T extends Key<T>>GroupMatcher<T> groupEquals(String compareTo){  return new GroupMatcher<T>(compareTo,StringOperatorName.EQUALS);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  characters(ch,start,length);}  }
class C{  public final void resetNumberField(){  MemObjectStack stack=new MemObjectStack(this.metadir,"resetstack");  for (int i=0; i < this.initNodes.size(); i++) {    BEGraphNode node=(BEGraphNode)this.initNodes.elementAt(i);    if (node.resetNumberField() != 0) {      stack.push(this.initNodes.elementAt(i));    }  }  while (stack.size() != 0) {    BEGraphNode node=(BEGraphNode)stack.pop();    for (int i=0; i < node.nextSize(); i++) {      BEGraphNode node1=node.nextAt(i);      if (node1.resetNumberField() != 0) {        stack.push(node1);      }    }  }}  }
class C{  @Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  JSONObject resultObj=new JSONObject();  if (action.equals("resolveNativePath")) {    String uriStr=args.getString(0);    Uri pvUrl=Uri.parse(uriStr);    Log.d(TAG,"URI: " + uriStr);    Context appContext=this.cordova.getActivity().getApplicationContext();    String filePath=getPath(appContext,pvUrl);    if (filePath == GET_PATH_ERROR_ID) {      resultObj.put("code",GET_PATH_ERROR_CODE);      resultObj.put("message","Unable to resolve filesystem path.");      callbackContext.error(resultObj);    } else     if (filePath.equals(GET_CLOUD_PATH_ERROR_ID)) {      resultObj.put("code",GET_CLOUD_PATH_ERROR_CODE);      resultObj.put("message","Files from cloud cannot be resolved to filesystem, download is required.");      callbackContext.error(resultObj);    } else {      Log.d(TAG,"Filepath: " + filePath);      callbackContext.success("file://" + filePath);    }    return true;  } else {    resultObj.put("code",INVALID_ACTION_ERROR_CODE);    resultObj.put("message","Invalid action.");    callbackContext.error(resultObj);  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Configuration(Configuration o){  setTo(o);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public boolean isBeforeActive(){  return _lifecycle.getState().isBeforeActive();}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public static void unexportObject(Remote obj) throws IOException {  if (proxy == null)   throw new NoSuchObjectException("Object not exported");  proxy.unexportObject(obj);}  }
class C{  protected boolean shouldCenterBeInShape(){  return arcType == Arc2D.PIE;}  }
class C{  public Document document(){  return document;}  }
class C{  protected PermsImpl(){  list=new ArrayList();}  }
class C{  public void startFilteringMulticastV6Packets(){  sendMessage(CMD_START_PACKET_FILTERING,MULTICAST_V6,0);}  }
class C{  private void addMenuItem(JPopupMenu menu,String title,MWFNode node,int AD_WF_NodeTo_ID){  WFPopupItem item=new WFPopupItem(title,node,AD_WF_NodeTo_ID);  menu.add(item);  item.addActionListener(this);}  }
class C{  public boolean isMimeTypeExist(String mimeType){  return WinRegistryUtil.isMimeTypeExist(mimeType);}  }
class C{  public void readState(DataInputStream stream) throws IOException {  int len=mt.length;  for (int x=0; x < len; x++)   mt[x]=stream.readInt();  len=mag01.length;  for (int x=0; x < len; x++)   mag01[x]=stream.readInt();  mti=stream.readInt();  __nextNextGaussian=stream.readDouble();  __haveNextNextGaussian=stream.readBoolean();}  }
class C{  public static void removeAllUserBookmarks(Context context){  chromeBrowserProviderCall(BookmarkNode.class,ChromeBrowserProvider.CLIENT_API_DELETE_ALL_USER_BOOKMARKS,context,argsToBundle());}  }
class C{  protected static void write(final StringWriter writer,final String fieldName,final String value){  writer.write(fieldName + ": " + value+ "\n");}  }
class C{  private String resolveReference(String prefix){  NamespaceMap parent=source.getNamespaces();  if (parent != null) {    return parent.getReference(prefix);  }  return null;}  }
class C{  protected Calendar date() throws ParseException {  try {    Calendar retval=Calendar.getInstance(TimeZone.getTimeZone("GMT"));    String s1=lexer.number();    int day=Integer.parseInt(s1);    if (day <= 0 || day > 31)     throw createParseException("Bad day ");    retval.set(Calendar.DAY_OF_MONTH,day);    lexer.match(' ');    String month=lexer.ttoken().toLowerCase();    if (month.equals("jan")) {      retval.set(Calendar.MONTH,Calendar.JANUARY);    } else     if (month.equals("feb")) {      retval.set(Calendar.MONTH,Calendar.FEBRUARY);    } else     if (month.equals("mar")) {      retval.set(Calendar.MONTH,Calendar.MARCH);    } else     if (month.equals("apr")) {      retval.set(Calendar.MONTH,Calendar.APRIL);    } else     if (month.equals("may")) {      retval.set(Calendar.MONTH,Calendar.MAY);    } else     if (month.equals("jun")) {      retval.set(Calendar.MONTH,Calendar.JUNE);    } else     if (month.equals("jul")) {      retval.set(Calendar.MONTH,Calendar.JULY);    } else     if (month.equals("aug")) {      retval.set(Calendar.MONTH,Calendar.AUGUST);    } else     if (month.equals("sep")) {      retval.set(Calendar.MONTH,Calendar.SEPTEMBER);    } else     if (month.equals("oct")) {      retval.set(Calendar.MONTH,Calendar.OCTOBER);    } else     if (month.equals("nov")) {      retval.set(Calendar.MONTH,Calendar.NOVEMBER);    } else     if (month.equals("dec")) {      retval.set(Calendar.MONTH,Calendar.DECEMBER);    }    lexer.match(' ');    String s2=lexer.number();    int yr=Integer.parseInt(s2);    retval.set(Calendar.YEAR,yr);    return retval;  } catch (  Exception ex) {    throw createParseException("bad date field");  }}  }
class C{  public DoubleIteratorSpliterator(PrimitiveIterator.OfDouble iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void loadYear(int year){  if (eraSet.contains(year)) {    loadEra(year);  }  if (year > eraSet.first()) {    loadEra(eraSet.floor(year));  }  if (year < eraSet.last()) {    loadEra(eraSet.ceiling(year));  }}  }
class C{  public Encoder(){  super();}  }
class C{  public RioSettingImpl(String key,String description,T defaultValue){  if (key == null) {    throw new NullPointerException("Setting key cannot be null");  }  if (description == null) {    throw new NullPointerException("Setting description cannot be null");  }  this.key=key;  this.description=description;  this.defaultValue=defaultValue;}  }
class C{  String writeToTmpFile(byte[] data) throws IOException {  return writeToNamedTmpFile("tmp_file",data);}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public DecreaseKarmaAction(final double karmaDiff){  this.karmaDiff=karmaDiff;}  }
class C{  public final Process execute(String jarName) throws IOException {  return execute("dependency",jarName);}  }
class C{  @Override public final void checkAssert(final Consumer<A> property){  check(null);}  }
class C{  protected synchronized int determineMinimumNumberOfParentDirs(){  int result;  HashSet<String> files;  int num;  int i;  int max;  result=-1;  max=0;  for (i=0; i < m_RecentItems.size(); i++)   max=Math.max(max,FileUtils.getDirectoryDepth(m_RecentItems.get(i)));  num=0;  do {    files=new HashSet<String>();    for (i=0; i < m_RecentItems.size(); i++)     files.add(FileUtils.createPartialFilename(m_RecentItems.get(i),num));    if (files.size() == m_RecentItems.size())     result=num; else     num++;  } while ((files.size() < m_RecentItems.size()) && (num <= max));  return result;}  }
class C{  public boolean isVisited(Object e){  return isLink(e) && uac.isVisited(nsh.getLinkUri((Element)e));}  }
class C{  public table(String border){  setBorder(border);}  }
class C{  public boolean reverseAccrualIt(){  log.info("reverseAccrualIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  void showGroupItems(int groupNum){  Vector<EcuDataItem> grpItms=knownGrpItems.get(groupNum);  if (grpItms != null) {    Iterator<EcuDataItem> itItm=grpItms.iterator();    while (itItm.hasNext()) {      EcuDataItem itm=itItm.next();      PidPvs.put(itm.pv.toString(),itm.pv);    }  }}  }
class C{  public SwitchPreference(Context context){  this(context,null);}  }
class C{  public int bitsLeft(){  return (byteStream.available() * Byte.SIZE) + (currentBitIndex + 1);}  }
class C{  public StatusBar(){  initialiseStatus("");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean hflip=evalBool(stack.pop());  MediaFile mf=getMediaFile(stack);  if (mf != null && mf.isPicture() && sage.media.format.MediaFormat.JPEG.equals(mf.getContainerFormat()) && Permissions.hasPermission(Permissions.PERMISSION_PICTUREROTATION,stack.getUIMgr())) {    return (performPictureOp(mf,"-flip",hflip ? "horizontal" : "vertical") ? Boolean.TRUE : Boolean.FALSE);  }  return Boolean.FALSE;}  }
class C{  public boolean registerResource(long rsrcId,Closeable rsrc){  Object old=rsrcMap.putIfAbsent(rsrcId,rsrc);  return old == null;}  }
class C{  @Override public void processIncoming(DistributionManager dm,String adviseePath,boolean removeProfile,boolean exchangeProfiles,final List<Profile> replyProfiles){  tellLocalControllers(removeProfile,exchangeProfiles,replyProfiles);  tellLocalBridgeServers(removeProfile,exchangeProfiles,replyProfiles);}  }
class C{  public boolean isOn(){  return on;}  }
class C{  @Hook("android.app.Activity->setContentView") public static void Activity_setContentView(Activity activity,int layoutResID){  Log.d(TAG,"before Original[Activity.setContentView]");  OriginalMethod.by(new $(){  }).invoke(activity,layoutResID);  Log.d(TAG,"after Original[Activity.setContentView]");  TextView text=((TextView)activity.findViewById(R.id.helloWorldText));  text.append("\n -- I am god and made " + (madePiece ? "piece" : "war"));  text.append("\n " + new Date().toString());  Log.d(TAG,"end Hook[Activity.setContentView]");}  }
class C{  protected TextFieldBorder createTextFieldBorder(SeaGlassContext context){  if (textFieldBorder == null) {    textFieldBorder=new TextFieldBorder(this,context.getStyle().getInsets(context,null));  }  return textFieldBorder;}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  public JMenu add(JMenu c){  super.add(c);  return c;}  }
class C{  public ConeEdgePortrayal3D(Image image,Color labelColor){  this(appearanceForImage(image,true),labelColor,null,DEFAULT_RADIUS);}  }
class C{  ServerSessionImpl createServerSession(String username,String password) throws Exception {  String id=UUIDGenerator.getInstance().generateStringUUID();  ActiveMQServer server=session.getServer();  ServerSession serverSession=server.createSession(id,username,password,ActiveMQClient.DEFAULT_MIN_LARGE_MESSAGE_SIZE,session.getConnection(),MQTTUtil.SESSION_AUTO_COMMIT_SENDS,MQTTUtil.SESSION_AUTO_COMMIT_ACKS,MQTTUtil.SESSION_PREACKNOWLEDGE,MQTTUtil.SESSION_XA,null,session.getSessionCallback(),MQTTUtil.SESSION_AUTO_CREATE_QUEUE);  return (ServerSessionImpl)serverSession;}  }
class C{  public boolean addAll(RoleUnresolvedList roleList) throws IndexOutOfBoundsException {  if (roleList == null) {    return true;  }  return (super.addAll(roleList));}  }
class C{  private static long lf_sigma0(long x){  return lf_S(x,28) ^ lf_S(x,34) ^ lf_S(x,39);}  }
class C{  public double distanceSq(final MutableDouble3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public void rewrite_dc_source(Pattern pattern,String replacement){  String u=this.source.toNormalform(false);  Matcher m=pattern.matcher(u);  if (m.matches()) {    u=m.replaceAll(replacement);    try {      DigestURL du=new DigestURL(u);      this.source=du;    } catch (    MalformedURLException e) {    }  }}  }
class C{  public <T>T createDtoFromJson(String json,Class<T> dtoInterface){  return getDtoProvider(dtoInterface).fromJson(json);}  }
class C{  private void increaseUseCount(){  if (m_vec2 != null)   m_useCount2++;}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public void testCompareLessScale2(){  String a="12380964839238475457356735674573";  int aScale=36;  String b="45735635948573894578349572001798379183767890295784902768787678287";  int bScale=48;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=-1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  private String attachAndMountVolumes(Map<URI,Collection<URI>> vCenterHostExportMap,String waitFor,Workflow workflow){  if (vCenterHostExportMap == null) {    return waitFor;  }  for (  URI hostId : vCenterHostExportMap.keySet()) {    Host esxHost=_dbClient.queryObject(Host.class,hostId);    if (esxHost != null) {      URI virtualDataCenter=esxHost.getVcenterDataCenter();      VcenterDataCenter vcenterDataCenter=_dbClient.queryObject(VcenterDataCenter.class,virtualDataCenter);      URI vCenterId=vcenterDataCenter.getVcenter();      for (      URI export : vCenterHostExportMap.get(hostId)) {        waitFor=workflow.createStep(MOUNT_AND_ATTACH_STEP,String.format("Mounting and attaching volumes from export group %s",export),waitFor,export,export.toString(),this.getClass(),attachAndMountMethod(export,esxHost.getId(),vCenterId,vcenterDataCenter.getId()),rollbackMethodNullMethod(),null);      }    }  }  return waitFor;}  }
class C{  static void checkIdentifier(final String name,final int start,final int end,final String msg){  if (name == null || (end == -1 ? name.length() <= start : end <= start)) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (!Character.isJavaIdentifierStart(name.charAt(start))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);  }  int max=end == -1 ? name.length() : end;  for (int i=start + 1; i < max; ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);    }  }}  }
class C{  public String patch_toText(List<Patch> patches){  StringBuilder text=new StringBuilder();  for (  Patch aPatch : patches) {    text.append(aPatch);  }  return text.toString();}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  public ElementContainer addElement(String element){  ec.addElement(new StringElement(element));  return (this);}  }
class C{  public AbsentResourceList(Integer cacheSize,int maxTries,int minCheckInterval,int tryAgainInterval){  if (maxTries < 1) {    String message=Logging.getMessage("AbsentResourceList.MaxTriesLessThanOne");    throw new IllegalArgumentException(message);  }  if (minCheckInterval < 0) {    String message=Logging.getMessage("AbsentResourceList.CheckIntervalLessThanZero");    throw new IllegalArgumentException(message);  }  if (tryAgainInterval < 0) {    String message=Logging.getMessage("AbsentResourceList.RetryIntervalLessThanZero");    throw new IllegalArgumentException(message);  }  if (cacheSize != null && cacheSize < 1) {    String message=Logging.getMessage("AbsentResourceList.MaximumListSizeLessThanOne");    throw new IllegalArgumentException(message);  }  if (cacheSize != null)   this.possiblyAbsent.setCapacity(cacheSize);  this.maxTries=Math.max(maxTries,1);  this.minCheckInterval=minCheckInterval;  this.tryAgainInterval=tryAgainInterval;}  }
class C{  private int findActivityElement(int activityIndex){  for (int elementIndex=0; elementIndex < mActivityList.size(); elementIndex++) {    if (mActivityList.get(elementIndex).mActivityIndex == activityIndex) {      return elementIndex;    }  }  return -1;}  }
class C{  @Override public KeyStore.Entry engineGetEntry(String alias,KeyStore.ProtectionParameter protParam) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException {  if (!engineContainsAlias(alias)) {    return null;  }  Entry entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (protParam == null) {    if (engineIsCertificateEntry(alias)) {      if (entry instanceof CertEntry && ((CertEntry)entry).trustedKeyUsage != null) {        if (debug != null) {          debug.println("Retrieved a trusted certificate at " + "alias '" + alias + "'");        }        return new KeyStore.TrustedCertificateEntry(((CertEntry)entry).cert,getAttributes(entry));      }    } else {      throw new UnrecoverableKeyException("requested entry requires a password");    }  }  if (protParam instanceof KeyStore.PasswordProtection) {    if (engineIsCertificateEntry(alias)) {      throw new UnsupportedOperationException("trusted certificate entries are not password-protected");    } else     if (engineIsKeyEntry(alias)) {      KeyStore.PasswordProtection pp=(KeyStore.PasswordProtection)protParam;      char[] password=pp.getPassword();      Key key=engineGetKey(alias,password);      if (key instanceof PrivateKey) {        Certificate[] chain=engineGetCertificateChain(alias);        return new KeyStore.PrivateKeyEntry((PrivateKey)key,chain,getAttributes(entry));      } else       if (key instanceof SecretKey) {        return new KeyStore.SecretKeyEntry((SecretKey)key,getAttributes(entry));      }    } else     if (!engineIsKeyEntry(alias)) {      throw new UnsupportedOperationException("untrusted certificate entries are not " + "password-protected");    }  }  throw new UnsupportedOperationException();}  }
class C{  final public CompilationUnit CompilationUnit() throws ParseException {  PackageDeclaration pakage=null;  List<ImportDeclaration> imports=null;  ImportDeclaration in=null;  List<TypeDeclaration<?>> types=null;  TypeDeclaration tn=null;  Position begin=INVALID;  if (jj_2_1(2147483647)) {    pakage=PackageDeclaration();    begin=begin.orIfInvalid(pakage.getBegin());  } else {    ;  }  label_1:   while (true) {switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {case IMPORT:case SEMICOLON:{        ;        break;      }default :    jj_la1[0]=jj_gen;  break label_1;}switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {case IMPORT:{  in=ImportDeclaration();  begin=begin.orIfInvalid(in.getBegin());  imports=add(imports,in);  break;}case SEMICOLON:{in=EmptyImportDeclaration();begin=begin.orIfInvalid(in.getBegin());imports=add(imports,in);break;}default :jj_la1[1]=jj_gen;jj_consume_token(-1);throw new ParseException();}}label_2: while (true) {switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {case ABSTRACT:case CLASS:case ENUM:case FINAL:case INTERFACE:case NATIVE:case PRIVATE:case PROTECTED:case PUBLIC:case STATIC:case STRICTFP:case SYNCHRONIZED:case TRANSIENT:case VOLATILE:case SEMICOLON:case AT:{;break;}default :jj_la1[2]=jj_gen;break label_2;}tn=TypeDeclaration();begin=begin.orIfInvalid(tn.getBegin());types=add(types,tn);}switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {case 0:{jj_consume_token(0);break;}case 156:{jj_consume_token(156);break;}default :jj_la1[3]=jj_gen;jj_consume_token(-1);throw new ParseException();}return new CompilationUnit(begin.invalid() ? Range.UNKNOWN : range(begin,tokenEnd()),pakage,imports,types);}  }
class C{  private void generateDataModel(){  JsonParser parser=new JsonParser(this,R.raw.fragments);  data=parser.serializeJson();}  }
class C{  @Inline public static Object moveObject(Address toAddress,Object fromObj,int numBytes,RVMClass type){  return moveObject(toAddress,fromObj,null,numBytes);}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node replacedNode;  String childName;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=((Element)employeeNode).getElementsByTagName("em");  oldChild=childList.item(0);  newChild=doc.createElement("br");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  childName=replacedNode.getNodeName();  assertEqualsAutoCase("element","replacedNodeName","em",childName);}  }
class C{  @Override protected String toExternalForm(URL url){  StringBuilder sb=new StringBuilder();  sb.append("jar:");  sb.append(url.getFile());  String ref=url.getRef();  if (ref != null) {    sb.append(ref);  }  return sb.toString();}  }
class C{  private E advance(){  lastRet=nextNode;  E x=nextItem;  Node<E> pred, p;  if (nextNode == null) {    p=first();    pred=null;  } else {    pred=nextNode;    p=succ(nextNode);  }  for (; ; ) {    if (p == null) {      nextNode=null;      nextItem=null;      return x;    }    E item=p.item;    if (item != null) {      nextNode=p;      nextItem=item;      return x;    } else {      Node<E> next=succ(p);      if (pred != null && next != null)       pred.casNext(p,next);      p=next;    }  }}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public static byte[] toByteArray(long macAddress){  return MacAddress.of(macAddress).getBytes();}  }
class C{  public String toString(){  if (m_ZeroR != null) {    StringBuffer buf=new StringBuffer();    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");    buf.append(m_ZeroR.toString());    return buf.toString();  }  StringBuffer text=new StringBuffer();  if (m_NumGenerated == 0) {    text.append("LogitBoost: No model built yet.");  } else {    text.append("LogitBoost: Base classifiers and their weights: \n");    for (int i=0; i < m_NumGenerated; i++) {      text.append("\nIteration " + (i + 1));      for (int j=0; j < m_NumClasses; j++) {        text.append("\n\tClass " + (j + 1) + " ("+ m_ClassAttribute.name()+ "="+ m_ClassAttribute.value(j)+ ")\n\n"+ m_Classifiers.get(i)[j].toString()+ "\n");        if (m_NumClasses == 2) {          text.append("Two-class case: second classifier predicts " + "additive inverse of first classifier and " + "is not explicitly computed.\n\n");          break;        }      }    }    text.append("Number of performed iterations: " + m_NumGenerated + "\n");  }  return text.toString();}  }
class C{  public ScaleAdam(String sPortPrinter,Component parent){  m_sPortScale=sPortPrinter;  m_out=null;  m_in=null;  m_iStatusScale=SCALE_READY;  m_WeightBuffer="";  mParent=parent;}  }
class C{  public ModulusAsFunction(){  super("mathematical.mod",2,Ontology.NUMERICAL);}  }
class C{  @Override public void inflict(EatStatus status,StatusList statusList,Entity attacker){  statusList.addInternal(status);  int count=statusList.countStatusByType(status.getStatusType());  if (count >= COUNT_CHOKING) {    statusList.activateStatusAttribute("choking");  } else {    statusList.activateStatusAttribute("eating");  }  if (count == 1) {    TurnListener turnListener=new EatStatusTurnListener(statusList);    TurnNotifier.get().dontNotify(turnListener);    TurnNotifier.get().notifyInTurns(0,turnListener);  }}  }
class C{  private static HeaderObject initHeaderObject(String line){  String parts[]=line.split(InternalConstants.TAB);  int unsortedHeaderArray[]=new int[parts.length];  int sortedHeaderArray[]=new int[parts.length];  for (int i=0; i < parts.length; i++) {    int index=parts[i].indexOf(":");    if (index == -1)     index=parts[i].length();    parts[i]=parts[i].substring(0,index);    String key[]=parts[i].split("_");    try {      unsortedHeaderArray[i]=Integer.parseInt(key[key.length - 1]);    } catch (    NumberFormatException nfe) {      unsortedHeaderArray[i]=-1;    }    sortedHeaderArray[i]=unsortedHeaderArray[i];  }  Map<Integer,Integer> idxFromKey=HeaderParser.createIdxFromKey(unsortedHeaderArray);  ArrayQuicksort(sortedHeaderArray);  return new HeaderObject(idxFromKey,sortedHeaderArray);}  }
class C{  public PropertyHandler(boolean provideProgressUpdates){  this(new Builder().setProgressUpdates(provideProgressUpdates));}  }
class C{  public DoubleMatrix1D random(int size){  return make(size).assign(cern.jet.math.Functions.random());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Sage.time());}  }
class C{  public void pushStaticVipRoute(boolean inBound,Route route,IPClient client,LBMember member,IOFSwitch pinSwitch){  List<NodePortTuple> path=route.getPath();  if (path.size() > 0) {    for (int i=0; i < path.size(); i+=2) {      DatapathId sw=path.get(i).getNodeId();      String entryName;      Match.Builder mb=pinSwitch.getOFFactory().buildMatch();      ArrayList<OFAction> actions=new ArrayList<OFAction>();      OFFlowMod.Builder fmb=pinSwitch.getOFFactory().buildFlowAdd();      fmb.setIdleTimeout(FlowModUtils.INFINITE_TIMEOUT);      fmb.setHardTimeout(FlowModUtils.INFINITE_TIMEOUT);      fmb.setBufferId(OFBufferId.NO_BUFFER);      fmb.setOutPort(OFPort.ANY);      fmb.setCookie(U64.of(0));      fmb.setPriority(FlowModUtils.PRIORITY_MAX);      if (inBound) {        entryName="inbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-srcport-"+ client.srcPort+ "-dstport-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        mb.setExact(MatchField.ETH_TYPE,EthType.IPv4).setExact(MatchField.IP_PROTO,client.nw_proto).setExact(MatchField.IPV4_SRC,client.ipAddress).setExact(MatchField.IN_PORT,path.get(i).getPortId());        if (client.nw_proto.equals(IpProtocol.TCP)) {          mb.setExact(MatchField.TCP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.UDP)) {          mb.setExact(MatchField.UDP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.SCTP)) {          mb.setExact(MatchField.SCTP_SRC,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.ICMP)) {        } else {          log.error("Unknown IpProtocol {} detected during inbound static VIP route push.",client.nw_proto);        }        if (sw.equals(pinSwitch.getId())) {          if (pinSwitch.getOFFactory().getVersion().compareTo(OFVersion.OF_12) < 0) {            actions.add(pinSwitch.getOFFactory().actions().setDlDst(MacAddress.of(member.macString)));            actions.add(pinSwitch.getOFFactory().actions().setNwDst(IPv4Address.of(member.address)));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } else {            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ethDst(MacAddress.of(member.macString))));            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ipv4Dst(IPv4Address.of(member.address))));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          }        } else {          try {            actions.add(switchService.getSwitch(path.get(i + 1).getNodeId()).getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } catch (          NullPointerException e) {            log.error("Fail to install loadbalancer flow rules to offline switch {}.",path.get(i + 1).getNodeId());          }        }      } else {        entryName="outbound-vip-" + member.vipId + "-client-"+ client.ipAddress+ "-srcport-"+ client.srcPort+ "-dstport-"+ client.targetPort+ "-srcswitch-"+ path.get(0).getNodeId()+ "-sw-"+ sw;        mb.setExact(MatchField.ETH_TYPE,EthType.IPv4).setExact(MatchField.IP_PROTO,client.nw_proto).setExact(MatchField.IPV4_DST,client.ipAddress).setExact(MatchField.IN_PORT,path.get(i).getPortId());        if (client.nw_proto.equals(IpProtocol.TCP)) {          mb.setExact(MatchField.TCP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.UDP)) {          mb.setExact(MatchField.UDP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.SCTP)) {          mb.setExact(MatchField.SCTP_DST,client.srcPort);        } else         if (client.nw_proto.equals(IpProtocol.ICMP)) {        } else {          log.error("Unknown IpProtocol {} detected during outbound static VIP route push.",client.nw_proto);        }        if (sw.equals(pinSwitch.getId())) {          if (pinSwitch.getOFFactory().getVersion().compareTo(OFVersion.OF_12) < 0) {            actions.add(pinSwitch.getOFFactory().actions().setDlSrc(vips.get(member.vipId).proxyMac));            actions.add(pinSwitch.getOFFactory().actions().setNwSrc(IPv4Address.of(vips.get(member.vipId).address)));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } else {            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ethSrc(vips.get(member.vipId).proxyMac)));            actions.add(pinSwitch.getOFFactory().actions().setField(pinSwitch.getOFFactory().oxms().ipv4Src(IPv4Address.of(vips.get(member.vipId).address))));            actions.add(pinSwitch.getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          }        } else {          try {            actions.add(switchService.getSwitch(path.get(i + 1).getNodeId()).getOFFactory().actions().output(path.get(i + 1).getPortId(),Integer.MAX_VALUE));          } catch (          NullPointerException e) {            log.error("Fail to install loadbalancer flow rules to offline switches {}.",path.get(i + 1).getNodeId());          }        }      }      fmb.setActions(actions);      fmb.setPriority(U16.t(LB_PRIORITY));      fmb.setMatch(mb.build());      sfpService.addFlow(entryName,fmb.build(),sw);    }  }  return;}  }
class C{  public static void log(String message){  Activator.getDefault().getLog().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,message));}  }
class C{  private void transferData(State state,HttpURLConnection conn) throws StopRequestException {  DrmManagerClient drmClient=null;  InputStream in=null;  OutputStream out=null;  FileDescriptor outFd=null;  try {    try {      in=conn.getInputStream();    } catch (    IOException e) {      throw new StopRequestException(HTTP_DATA_ERROR,e);    }    try {      if (DownloadDrmHelper.isDrmConvertNeeded(state.mimeType)) {        throw new IllegalStateException("DRM not supported atm");      } else {        out=new FileOutputStream(state.filename,true);        outFd=((FileOutputStream)out).getFD();      }    } catch (    IOException e) {      throw new StopRequestException(DownloadStatus.FILE_ERROR,e);    }    transferData(state,in,out);  } catch (  StopRequestException exception) {    if (exception.getFinalStatus() == DownloadStatus.PAUSED_BY_APP) {      notifyThroughDatabase(state,DownloadStatus.PAUSING,exception.getMessage(),0);    }    throw exception;  } finally {    closeQuietly(in);    closeAfterWrite(out,outFd);  }}  }
class C{  public static double variance(final List<Double> list){  long n=0;  double mean=mean(list);  double s=0.0;  for (  double x : list) {    n++;    double delta=x - mean;    mean+=delta / n;    s+=delta * (x - mean);  }  return s / (n - 1);}  }
class C{  public TagLibException(Throwable t){  initCause(t);}  }
class C{  public void fireRequestInfoLine(String infoLine,int loc){  fireRequestInfoLine(new InfoDisplayEvent(this,infoLine,loc));}  }
class C{  public boolean isCardScanningAvailable(){  try {    return CardIOActivity.canReadCardWithCamera();  } catch (  NoClassDefFoundError e) {    return false;  }}  }
class C{  public static AbstractStatisticsCollector newInstance(final Properties properties){  final int interval=Integer.parseInt(properties.getProperty(Options.PERFORMANCE_COUNTERS_SAMPLE_INTERVAL,Options.DEFAULT_PERFORMANCE_COUNTERS_SAMPLE_INTERVAL));  if (interval <= 0)   throw new IllegalArgumentException();  final String processName=properties.getProperty(Options.PROCESS_NAME);  if (processName == null)   throw new IllegalArgumentException("Required option not specified: " + Options.PROCESS_NAME);  if (SystemUtil.isLinux()) {    return new StatisticsCollectorForLinux(interval,processName);  } else   if (SystemUtil.isWindows()) {    return new StatisticsCollectorForWindows(interval,processName);  } else   if (SystemUtil.isOSX()) {    return new StatisticsCollectorForOSX(interval,processName);  } else {    throw new UnsupportedOperationException("No implementation available on " + System.getProperty("os.getname"));  }}  }
class C{  @SuppressFBWarnings("DM_EXIT") public static void showHelp(TextUICommandLine commandLine){  showSynopsis();  ShowHelp.showGeneralOptions();  FindBugs.showCommandLineOptions(commandLine);  System.exit(1);}  }
class C{  private Set<HiCSSubspace> calculateSubspaces(Relation<? extends NumberVector> relation,ArrayList<ArrayDBIDs> subspaceIndex,Random random){  final int dbdim=RelationUtil.dimensionality(relation);  FiniteProgress dprog=LOG.isVerbose() ? new FiniteProgress("Subspace dimensionality",dbdim,LOG) : null;  if (dprog != null) {    dprog.setProcessed(2,LOG);  }  TreeSet<HiCSSubspace> subspaceList=new TreeSet<>(HiCSSubspace.SORT_BY_SUBSPACE);  TopBoundedHeap<HiCSSubspace> dDimensionalList=new TopBoundedHeap<>(cutoff,HiCSSubspace.SORT_BY_CONTRAST_ASC);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Generating two-element subsets",(dbdim * (dbdim - 1)) >> 1,LOG) : null;  for (int i=0; i < dbdim; i++) {    for (int j=i + 1; j < dbdim; j++) {      HiCSSubspace ts=new HiCSSubspace();      ts.set(i);      ts.set(j);      calculateContrast(relation,ts,subspaceIndex,random);      dDimensionalList.add(ts);      LOG.incrementProcessed(prog);    }  }  LOG.ensureCompleted(prog);  IndefiniteProgress qprog=LOG.isVerbose() ? new IndefiniteProgress("Testing subspace candidates",LOG) : null;  for (int d=3; !dDimensionalList.isEmpty(); d++) {    if (dprog != null) {      dprog.setProcessed(d,LOG);    }    ArrayList<HiCSSubspace> candidateList=new ArrayList<>(dDimensionalList.size());    for (Heap<HiCSSubspace>.UnorderedIter it=dDimensionalList.unorderedIter(); it.valid(); it.advance()) {      subspaceList.add(it.get());      candidateList.add(it.get());    }    dDimensionalList.clear();    Collections.sort(candidateList,HiCSSubspace.SORT_BY_SUBSPACE);    for (int i=0; i < candidateList.size() - 1; i++) {      for (int j=i + 1; j < candidateList.size(); j++) {        HiCSSubspace set1=candidateList.get(i);        HiCSSubspace set2=candidateList.get(j);        HiCSSubspace joinedSet=new HiCSSubspace();        joinedSet.or(set1);        joinedSet.or(set2);        if (joinedSet.cardinality() != d) {          continue;        }        calculateContrast(relation,joinedSet,subspaceIndex,random);        dDimensionalList.add(joinedSet);        LOG.incrementProcessed(qprog);      }    }    for (    HiCSSubspace cand : candidateList) {      for (Heap<HiCSSubspace>.UnorderedIter it=dDimensionalList.unorderedIter(); it.valid(); it.advance()) {        if (it.get().contrast > cand.contrast) {          subspaceList.remove(cand);          break;        }      }    }  }  LOG.setCompleted(qprog);  if (dprog != null) {    dprog.setProcessed(dbdim,LOG);    dprog.ensureCompleted(LOG);  }  return subspaceList;}  }
class C{  private static void addTimeChoice(final MatsimServices controler){  StrategySettings tam=new StrategySettings();  tam.setStrategyName("TimeAllocationMutator");  tam.setSubpopulation(null);  tam.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(tam);  StrategySettings car=new StrategySettings();  car.setStrategyName("TimeAllocationMutator");  car.setSubpopulation(Global.GP_CAR);  car.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(car);  StrategySettings license=new StrategySettings();  license.setStrategyName("TimeAllocationMutator");  license.setSubpopulation(Global.LICENSE_OWNER);  license.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(license);  StrategySettings commuter=new StrategySettings();  commuter.setStrategyName("TimeAllocationMutator");  commuter.setSubpopulation(Global.COMMUTER);  commuter.setWeight(0.1);  controler.getConfig().strategy().addStrategySettings(commuter);}  }
class C{  public ProxyConnector(final SocketConnector connector,IoSessionConfig config,Executor executor){  super(config,executor);  setConnector(connector);}  }
class C{  public ManualFocusRing(Invalidator invalidator,Paint ringPaint,float exitDurationMillis){  super(invalidator,ringPaint,0.0f,exitDurationMillis);}  }
class C{  public static long[] resize(long buffer[],int newSize){  long temp[]=new long[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  protected void configure(KafkaAvroDeserializerConfig config){  configureClientProperties(config);  useSpecificAvroReader=config.getBoolean(KafkaAvroDeserializerConfig.SPECIFIC_AVRO_READER_CONFIG);}  }
class C{  @Override public void modify(Object element,String property,Object value){  if (!(value instanceof Boolean)) {    return;  }  if (!(element instanceof TableItem)) {    return;  }  Object o=((TableItem)element).getData();  if (!(o instanceof PathMatcherTerm)) {    return;  }  PathMatcherTerm relation=((PathMatcherTerm)o);  if (property.equals(COL_RECURSIVE)) {    relation.setRecursive((Boolean)value);  } else   if (property.equals(COL_CUMULATIVE)) {    relation.setCumulative((Boolean)value);  }  fireSelectionChange(o,new String[]{property});}  }
class C{  ExtensionSetFileFilter(Collection<String> extensions,String description){  this.extensions=extensions;  this.description=description;}  }
class C{  public void testApiNameAttribute_startWithNumber(){  doTest();}  }
class C{  public PaymentPanelType(JPaymentNotifier notifier){  m_notifier=notifier;  initComponents();  m_jHolderName.addPropertyChangeListener("Edition",new RecalculateName());  m_jCardNumber.addPropertyChangeListener("Edition",new RecalculateName());  m_jExpirationDate.addPropertyChangeListener("Edition",new RecalculateName());  m_jHolderName.addEditorKeys(m_jKeys);  m_jCardNumber.addEditorKeys(m_jKeys);  m_jExpirationDate.addEditorKeys(m_jKeys);}  }
class C{  @SuppressWarnings("unchecked") public DictionaryAdapter(Context context,File dbPath,String dbName,String defaultTable){  mContext=context;  mDbName=dbName;  mDefaultTable=defaultTable;  mDbPath=dbPath;  mDbFile=new File(dbPath,mDbName);  if (mDbFile.exists()) {    open();  }}  }
class C{  public boolean isConstructor(){  return false;}  }
class C{  protected void addRegionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_HistoryEntry_region_feature"),getString("_UI_PropertyDescriptor_description","_UI_HistoryEntry_region_feature","_UI_HistoryEntry_type"),SexecPackage.Literals.HISTORY_ENTRY__REGION,true,false,true,null,null,null));}  }
class C{  public ClientMessage receiveMessage(SimpleString queueName,long timeout){  final boolean browseOnly=false;  return getInternalClient().receiveMessage(queueName,timeout,browseOnly);}  }
class C{  public ForgeDirection sideDifference(Coord4D other){  Coord4D diff=difference(other);  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {    if (side.offsetX == diff.xCoord && side.offsetY == diff.yCoord && side.offsetZ == diff.zCoord) {      return side;    }  }  return ForgeDirection.UNKNOWN;}  }
class C{  public static TermQueryBuilder termQuery(String name,boolean value){  return new TermQueryBuilder(name,value);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthInternalFrameUI((JInternalFrame)b);}  }
class C{  @SuppressWarnings("cast") public void read(FloatSampleBuffer outBuffer,int offset,int count){  if (isClosed() || count == 0) {    outBuffer.setSampleCount(offset,true);    return;  }  if (outBuffer.getChannelCount() != thisBuffer.getChannelCount()) {    throw new IllegalArgumentException("passed buffer has different channel count");  }  if (TDebug.TraceAudioConverter && DEBUG_STREAM) {    TDebug.out(">SamplerateConverterStream.read(" + count + " samples)");  }  FloatSampleBuffer lSourceBuffer=thisBuffer;  float[] outSamples;  float[] inSamples;  float[] history;  double increment=outSamples2inSamples(1.0);  int writtenSamples=0;  do {    int inSampleCount=lSourceBuffer.getSampleCount();    if (((int)dPos) >= inSampleCount || !thisBufferValid) {      readFromSourceStream();      if (isClosed()) {        break;      }      lSourceBuffer=thisBuffer;      inSampleCount=thisBuffer.getSampleCount();      if (inSampleCount == 0) {        break;      }    }    int writeCount=count - writtenSamples;    if (((int)(outSamples2inSamples((double)writeCount) + dPos)) >= inSampleCount) {      int lastOutIndex=((int)(inSamples2outSamples(((double)inSampleCount) - dPos))) + 1;      while ((int)(outSamples2inSamples((double)lastOutIndex) + dPos) >= inSampleCount) {        lastOutIndex--;        if (DEBUG_STREAM) {          TDebug.out("--------- Decremented lastOutIndex=" + lastOutIndex);        }      }      if (DEBUG_STREAM_PROBLEMS) {        int testLastOutIndex=writeCount - 1;        if (DEBUG_STREAM_PROBLEMS) {          while ((int)(outSamples2inSamples((double)testLastOutIndex) + dPos) >= inSampleCount) {            testLastOutIndex--;          }        }        if (testLastOutIndex != lastOutIndex) {          TDebug.out("lastOutIndex wrong: lastOutIndex=" + lastOutIndex + " testLastOutIndex="+ testLastOutIndex+ " !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");        }      }      writeCount=lastOutIndex + 1;    }    for (int channel=0; channel < outBuffer.getChannelCount(); channel++) {      inSamples=lSourceBuffer.getChannel(channel);      outSamples=outBuffer.getChannel(channel);      history=historyBuffer.getChannel(channel);switch (conversionAlgorithm) {case SAMPLE_AND_HOLD:        convertSampleAndHold2(inSamples,dPos,inSampleCount,increment,outSamples,writtenSamples + offset,writeCount,history,historyBuffer.getSampleCount());      break;case LINEAR_INTERPOLATION:    convertLinearInterpolation2(inSamples,dPos,inSampleCount,increment,outSamples,writtenSamples + offset,writeCount,history,historyBuffer.getSampleCount());  break;}}writtenSamples+=writeCount;dPos+=outSamples2inSamples((double)writeCount);} while (!isClosed() && writtenSamples < outBuffer.getSampleCount());if (writtenSamples < count) {outBuffer.changeSampleCount(writtenSamples + offset,true);}if (TDebug.TraceAudioConverter && DEBUG_STREAM) {testOutFramesReturned+=outBuffer.getSampleCount();TDebug.out("< return " + outBuffer.getSampleCount() + "frames. Total="+ testOutFramesReturned+ " frames. Read total "+ testInFramesRead+ " frames from source stream");}}  }
class C{  public SVGGraphics2DIOException(String s){  this(s,null);}  }
class C{  public void enqueue(MockResponse response){  mockWebServer.enqueue(response);}  }
class C{  public boolean hasOption(Option option,String[] arguments){  if (option == null || arguments == null) {    return false;  }  for (  String argument : arguments) {    if (argument.startsWith("--")) {      argument=argument.substring(2,argument.length());      if (argument.equals(option.getLongOpt())) {        return true;      }    } else     if (argument.startsWith("-")) {      argument=argument.substring(1,argument.length());      if (argument.equals(option.getOpt())) {        return true;      }    }  }  return false;}  }
class C{  public final void testValidateSucceeds(){  NotNullValidator notNullValidator=new NotNullValidator("foo");  assertTrue(notNullValidator.validate(new Object()));}  }
class C{  private void parse() throws UncheckedIOException {  TagFilter parserWayFilter=new TagFilter();  parserWayFilter.add(OsmTag.HIGHWAY);  parserWayFilter.add(OsmTag.RAILWAY);  parserWayFilter.addException(OsmTag.SERVICE);  TagFilter parserRelationFilter=new TagFilter();  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.BUS);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.TROLLEYBUS);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.RAIL);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.TRAM);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.LIGHT_RAIL);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.FUNICULAR);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.MONORAIL);  parserRelationFilter.add(OsmTag.ROUTE,OsmValue.SUBWAY);  OsmParser parser=new OsmParser(transformation);  OsmParserHandler handler=new OsmParserHandler();  handler.addFilter(null,parserWayFilter,parserRelationFilter);  parser.addHandler(handler);  parser.readFile(this.config.getOsmFile());  this.ways=handler.getWays();  this.nodes=handler.getNodes();  this.relations=handler.getRelations();}  }
class C{  @Deprecated public OperatorChain(OperatorDescription description){  this(description,new String[0]);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__HAS_NO_BODY:    setHasNoBody((Boolean)newValue);  return;case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__DECLARED_MEMBER_ACCESS_MODIFIER:setDeclaredMemberAccessModifier((MemberAccessModifier)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  @Override protected void drawNeedle(Graphics2D g2,Rectangle2D plotArea,Point2D rotate,double angle){  Area shape;  GeneralPath pointer=new GeneralPath();  int minY=(int)(plotArea.getMinY());  int maxY=(int)(plotArea.getMaxY());  int midY=((maxY - minY) / 2) + minY;  int midX=(int)(plotArea.getMinX() + (plotArea.getWidth() / 2));  int lenX=(int)(plotArea.getWidth() / 10);  if (lenX < 2) {    lenX=2;  }  pointer.moveTo(midX - lenX,midY - lenX);  pointer.lineTo(midX + lenX,midY - lenX);  pointer.lineTo(midX,minY);  pointer.closePath();  lenX=4 * lenX;  Ellipse2D circle=new Ellipse2D.Double(midX - lenX / 2,midY - lenX,lenX,lenX);  shape=new Area(circle);  shape.add(new Area(pointer));  if ((rotate != null) && (angle != 0)) {    getTransform().setToRotation(angle,rotate.getX(),rotate.getY());    shape.transform(getTransform());  }  defaultDisplay(g2,shape);}  }
class C{  public void reset(){  attStack.clear();  currentAtts=null;  currentHandler=null;  indent=0;  locator=null;  namespaces.clear();  needIndent=true;  redirect=null;  redirectionDepth=0;  text=new StringBuffer();  attStack.push(new AttributesImpl());}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:      return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :    return -1;}}if (baseClass == ThisArgProvider.class) {switch (baseOperationID) {default :  return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public PlainView(Element elem){  super(elem);}  }
class C{  private void writeEntries(int entries){  for (int i=0; i < entries; i++) {    try (TestEntry entry=log.create(TestEntry.class)){      entry.setTerm(1);      if (entry.getIndex() % 2 == 0) {        entry.setCompactionMode(Compaction.Mode.SEQUENTIAL);      } else {        entry.setCompactionMode(Compaction.Mode.QUORUM);      }      log.append(entry);    }   }}  }
class C{  public static String stripLeadingChar(String string,char c){  if (string.length() > 0) {    if (string.charAt(0) == c) {      return string.substring(1);    }  }  return string;}  }
class C{  public AugmentedWebFunctions augmented(){  return augmentedFunctions;}  }
class C{  public void reset(){  m_sourceTree=new Vector();}  }
class C{  public void testCouplingOfCursorFetch() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  Connection fetchConn=null;  try {    Properties props=new Properties();    props.setProperty("useServerPrepStmts","false");    props.setProperty("useCursorFetch","true");    fetchConn=getConnectionWithProps(props);    String classname="com.mysql.jdbc.ServerPreparedStatement";    if (Util.isJdbc42()) {      classname="com.mysql.jdbc.JDBC42ServerPreparedStatement";    } else     if (Util.isJdbc4()) {      classname="com.mysql.jdbc.JDBC4ServerPreparedStatement";    }    assertEquals(classname,fetchConn.prepareStatement("SELECT 1").getClass().getName());  }  finally {    if (fetchConn != null) {      fetchConn.close();    }  }}  }
class C{  public DeleteSubscriptionsRequest clone(){  DeleteSubscriptionsRequest result=new DeleteSubscriptionsRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionIds=SubscriptionIds == null ? null : SubscriptionIds.clone();  return result;}  }
class C{  public boolean isUsingInventory(){  return useInventory;}  }
class C{  public void revalidate(){}  }
class C{  public static EncodedImage createMulti(int[] dpis,byte[][] data){  EncodedImage e=new EncodedImage(data);  e.dpis=dpis;  return e;}  }
class C{  public <T>void sort(List<T> list,Comparator<T> cmp){  if (index.size() < list.size())   for (int i=index.size(); i < list.size(); i++)   index.add(i);  if (list.size() == index.size())   Collections.sort(index,new IndexViewCompList(list,cmp)); else {    Collections.sort(index);    Collections.sort(index.subList(0,list.size()),new IndexViewCompList(list,cmp));  }  prevSize=list.size();}  }
class C{  private void writeLine(String str,int start,int len) throws IOException {  if (beginningOfLine && len > 0) {    writeIndent();    beginningOfLine=false;  }  writer.write(str,start,len);}  }
class C{  @UiHandler("firstChoiceButton") public void handleFirstChoiceClick(final ClickEvent event){  this.actionDelegate.firstChoiceClicked();}  }
class C{  public static final Uri insert(ContentResolver cr,long eventId,long begin,long end,long alarmTime,int minutes){  ContentValues values=new ContentValues();  values.put(CalendarAlerts.EVENT_ID,eventId);  values.put(CalendarAlerts.BEGIN,begin);  values.put(CalendarAlerts.END,end);  values.put(CalendarAlerts.ALARM_TIME,alarmTime);  long currentTime=System.currentTimeMillis();  values.put(CalendarAlerts.CREATION_TIME,currentTime);  values.put(CalendarAlerts.RECEIVED_TIME,0);  values.put(CalendarAlerts.NOTIFY_TIME,0);  values.put(CalendarAlerts.STATE,STATE_SCHEDULED);  values.put(CalendarAlerts.MINUTES,minutes);  return cr.insert(CONTENT_URI,values);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static Bitmap clipCircleBitmap(Bitmap bitmap){  if (bitmap == null || bitmap.isRecycled())   return null;  int width=bitmap.getWidth();  int height=bitmap.getHeight();  float roundPx;  float left, top=0, right, bottom, dst_left, dst_top, dst_right, dst_bottom;  width=width - 2;  height=height - 2;  if (width <= height) {    roundPx=width / 2;    bottom=width;    left=0;    right=width;    height=width;    dst_left=0;    dst_top=0;    dst_right=width;    dst_bottom=width;  } else {    roundPx=height / 2;    float clip=(width - height) / 2;    left=clip;    right=width - clip;    bottom=height;    width=height;    dst_left=0;    dst_top=0;    dst_right=height;    dst_bottom=height;  }  Bitmap output=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(output);  final Paint paint=new Paint();  final Rect src=new Rect((int)left,(int)top,(int)right,(int)bottom);  final Rect dst=new Rect((int)dst_left,(int)dst_top,(int)dst_right,(int)dst_bottom);  final RectF rectF=new RectF(dst);  paint.setAntiAlias(true);  canvas.drawRoundRect(rectF,roundPx,roundPx,paint);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(bitmap,src,dst,paint);  if (!bitmap.isRecycled()) {    bitmap.recycle();  }  return output;}  }
class C{  private static byte calculateLRC(byte[] data,int off,int length,int tailskip){  int lrc=0;  for (int i=off; i < length - tailskip; i++) {    lrc+=((int)data[i]) & 0xFF;  }  return (byte)((-lrc) & 0xff);}  }
class C{  private void appendTestOutputLine(String line){  TestResult testResult=getCurrentTestResult();  if (testResult.mStackTrace == null) {    testResult.mStackTrace=new StringBuilder();  } else {    testResult.mStackTrace.append("\r\n");  }  testResult.mStackTrace.append(line);}  }
class C{  public void onExceptionThrown(Context cx,Throwable exception){  dim.handleExceptionThrown(cx,exception,this);}  }
class C{  public void writeWallet(Wallet wallet,OutputStream output) throws IOException {  Protos.Wallet walletProto=walletToProto(wallet);  walletProto.writeTo(output);}  }
class C{  public static synchronized void notifyClassInitialized(RVMClass c){  if (!c.isInterface()) {    for (    RVMClass intf : c.getAllImplementedInterfaces()) {      noteImplements(c,intf);    }  }}  }
class C{  public LocalDateTime roundHalfFloorCopy(){  return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));}  }
class C{  public static Appendable format(float f,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  return TypeFormat.format(f,10,(MathLib.abs(f) >= 1E7) || (MathLib.abs(f) < 0.001),false,a);}  }
class C{  private Tuple<Message,Connection> tryOtherMessages(){  List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>();  Collection<Message> msgCollection=getMessageCollection();  for (  Connection con : getConnections()) {    DTNHost other=con.getOtherNode(getHost());    ProphetRouterWithEstimation othRouter=(ProphetRouterWithEstimation)other.getRouter();    if (othRouter.isTransferring()) {      continue;    }    for (    Message m : msgCollection) {      if (othRouter.hasMessage(m.getId())) {        continue;      }      if (othRouter.getPredFor(m.getTo()) > getPredFor(m.getTo())) {        messages.add(new Tuple<Message,Connection>(m,con));      }    }  }  if (messages.size() == 0) {    return null;  }  Collections.sort(messages,new TupleComparator());  return tryMessagesForConnected(messages);}  }
class C{  public static void arc(double x,double y,double r,double angle1,double angle2){  if (r < 0)   throw new IllegalArgumentException("arc radius must be nonnegative");  while (angle2 < angle1)   angle2+=360;  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Arc2D.Double(xs - ws / 2,ys - hs / 2,ws,hs,angle1,angle2 - angle1,Arc2D.OPEN));  draw();}  }
class C{  @Override public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  if (cookie instanceof Cookie2) {    final Cookie2 cookie2=(Cookie2)cookie;    final int port=origin.getPort();    if (cookie2.isPortAttributeSpecified()) {      if (cookie2.getPorts() == null) {        LOG.warn("Invalid cookie state: port not specified");        return false;      }      if (!portMatch(port,cookie2.getPorts())) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  @Override public int compareTo(Method m){  return this.toCompleteString().compareTo(m.toCompleteString());}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  private void clearDb(Class[] tables,SessionFactory sessionFactory){  Session session=sessionFactory.openSession();  ManagedSessionContext.bind(session);  Transaction tx=session.beginTransaction();  try {    sessionFactory.getCurrentSession().createSQLQuery("set foreign_key_checks=0").executeUpdate();    for (    Class anEntity : tables) {      sessionFactory.getCurrentSession().createSQLQuery("delete from " + anEntity.getSimpleName() + "s").executeUpdate();    }    sessionFactory.getCurrentSession().createSQLQuery("set foreign_key_checks=1").executeUpdate();    tx.commit();  } catch (  Exception e) {    if (tx != null)     tx.rollback();    throw new RuntimeException("Unable to clear tables. Exception: " + e.getMessage(),e);  } finally {    if (session != null) {      ManagedSessionContext.unbind(sessionFactory);      session.close();    }  }}  }
class C{  public static void removeListener(ILogAlertListener aListener){  loggerImpl.removeListener(aListener);}  }
class C{  public void update(IStructuredSelection sel){  Object obj=sel.getFirstElement();  if (obj != null && obj instanceof OperationEditPart) {    setEnabled(true);    targetPart=(OperationEditPart)obj;  } else   if (obj != null && obj instanceof AttributeEditPart) {    setEnabled(true);    targetPart=(AttributeEditPart)obj;  } else {    setEnabled(false);    targetPart=null;  }}  }
class C{  public void subTask(String name){}  }
class C{  public boolean isClassDirectSubclassOf(SootClass c,SootClass c2){  throw new RuntimeException("Not implemented yet!");}  }
class C{  void release(){  if (inNetBuffer != null) {    inNetBuffer.free();    inNetBuffer=null;  }  if (outNetBuffer != null) {    outNetBuffer.free();    outNetBuffer=null;  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPCs(zone);}  }
class C{  protected MultiGraphQualifierHierarchy.MultiGraphFactory createQualifierHierarchyFactory(){  return new MultiGraphQualifierHierarchy.MultiGraphFactory(this);}  }
class C{  public static String genOvfenvPropertyKVString(ClusterIpInfo ipinfo,String nodeid,int node_count){  StringBuffer clusterprops=new StringBuffer();  clusterprops.append(ipinfo.toString());  clusterprops.append(PropertyConstants.NODE_COUNT_KEY).append(PropertyConstants.DELIMITER).append(node_count).append("\n");  clusterprops.append(PropertyConstants.NODE_ID_KEY).append(PropertyConstants.DELIMITER).append(nodeid).append("\n");  return clusterprops.toString();}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);}  }
class C{  static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  public void add(E item){  pos=(pos + 1) % size;  if (data.size() <= pos) {    data.add(item);  } else {    data.set(pos,item);  }  if (start == -1) {    start=0;  } else   if (pos == start) {    start=(start + 1) % size;  }  end=pos;}  }
class C{  private void addMinimizedSection(Composite parent,FormToolkit toolkit,String sectionTitle,int numColums){  Section section=toolkit.createSection(parent,ExpandableComposite.TITLE_BAR | ExpandableComposite.TWISTIE);  section.setText(sectionTitle);  section.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  Composite sectionComposite=toolkit.createComposite(section);  GridLayout gridLayout=new GridLayout(numColums,false);  gridLayout.marginLeft=5;  gridLayout.marginTop=5;  sectionComposite.setLayout(gridLayout);  section.setClient(sectionComposite);  if (!minimizedSections.containsKey(sectionTitle)) {    minimizedSections.put(sectionTitle,sectionComposite);  }}  }
class C{  private void abortMultipartUpload(String bucketName,String objectName,String uploadId) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  Map<String,String> queryParamMap=new HashMap<>();  queryParamMap.put(UPLOAD_ID,uploadId);  executeDelete(bucketName,objectName,queryParamMap);}  }
class C{  public TimeUnit createTimeUnitFromString(EDataType eDataType,String initialValue){  TimeUnit result=TimeUnit.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public void testBatch(){  Instances data;  try {    m_Saver.setInstances(m_Instances);    m_Saver.setFile(new File(m_ExportFilename));    m_Saver.writeBatch();    ((AbstractFileLoader)m_Loader).setFile(new File(m_ExportFilename));    data=m_Loader.getDataSet();    try {      if (m_Instances.classIndex() != data.classIndex()) {        data.setClassIndex(m_Instances.classIndex());      }      compareDatasets(m_Instances,data);    } catch (    Exception e) {      fail("Incremental load failed (datasets differ): " + e.toString());    }  } catch (  Exception e) {    e.printStackTrace();    fail("Batch save/load failed: " + e.toString());  }}  }
class C{  private Collection<Expression> createUniqueTriggerExpressions(final ConversationStates state,final Collection<String> triggerStrings,final ExpressionMatcher matcher,final ChatCondition condition,final String reply,final ChatAction action){  Collection<Expression> triggerExpressions=new ArrayList<Expression>();  for (  final String triggerString : triggerStrings) {    final Expression triggerExpression=ConversationParser.createTriggerExpression(triggerString,matcher);    final Transition existing=get(state,triggerExpression,condition);    if (existing != null) {      final String existingReply=existing.getReply();      final PostTransitionAction existingAction=existing.getAction();      if ((existingReply != null) && (reply != null) && !existingReply.contains(reply)) {        existing.setReply(existingReply + " " + reply);      } else {        existing.setReply(reply);      }      if (((action == null) && (existingAction == null)) || ((action != null) && action.equals(existingAction))) {        return null;      } else {        logger.warn(speakerNPC.getName() + ": Adding ambiguous state transition: " + existing+ " existingAction='"+ existingAction+ "' newAction='"+ action+ "'");      }    }    triggerExpressions.add(triggerExpression);  }  return triggerExpressions;}  }
class C{  public void addBackup(int part,int heap,long offheap,long swap){  backup.add(new VisorCachePartition(part,heap,offheap,swap));}  }
class C{  public static double RRSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredAbsoluteError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double dvSumOfSquaredAbsoluteError=dv.getDependentVariableSumOfSquaredAbsoluteError(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    error=result - expectedResult;    sumOfSquaredAbsoluteError+=error * error;  }  if (dvSumOfSquaredAbsoluteError == 0.0) {    dvSumOfSquaredAbsoluteError=RELATIVE_ERROR_ZERO_FACTOR;    System.err.println("Warning: sum of squared error for dependent variable is 0 in RRSE fitness calculation. Adjusting to avoid division by zero.");  }  return Math.sqrt(sumOfSquaredAbsoluteError / dvSumOfSquaredAbsoluteError);}  }
class C{  public static FloatMatrix diag(FloatMatrix x,int rows,int columns){  FloatMatrix m=new FloatMatrix(rows,columns);  for (int i=0; i < x.length; i++) {    m.put(i,i,x.get(i));  }  return m;}  }
class C{  protected byte readByte(final int position) throws AuthenticationException {  if (messageContents.length < position + 1)   throw new AuthenticationException("NTLM: Message too short");  return messageContents[position];}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  StringBuffer sb=new StringBuffer("DELETE FROM AD_TreeNodeCMC ").append(" WHERE Node_ID=").append(get_IDOld()).append(" AND AD_Tree_ID=").append(getAD_Tree_ID());  int no=DB.executeUpdate(sb.toString(),get_TrxName());  if (no > 0)   log.fine("#" + no + " - TreeType=CMC"); else   log.warning("#" + no + " - TreeType=CMC");  return true;}  }
class C{  public boolean isAvailable(){  LOG.debug("Testing availability {}",baseUrl);  try {    return (requestFactory.fromUrl(baseUrl).useOptionsMethod().request().as(getServiceDescriptorClass(),null) != null);  } catch (  Exception e) {    LOG.warn(e.getLocalizedMessage());    return false;  }}  }
class C{  @Override public JsonSerializer<Object> findValueSerializer(JavaType valueType,BeanProperty property) throws JsonMappingException {  JsonSerializer<Object> ser=_knownSerializers.untypedValueSerializer(valueType);  if (ser == null) {    ser=_serializerCache.untypedValueSerializer(valueType);    if (ser == null) {      ser=_createAndCacheUntypedSerializer(valueType,property);      if (ser == null) {        ser=getUnknownTypeSerializer(valueType.getRawClass());        if (CACHE_UNKNOWN_MAPPINGS) {          _serializerCache.addAndResolveNonTypedSerializer(valueType,ser,this);        }        return ser;      }    }  }  return _handleContextualResolvable(ser,property);}  }
class C{  public PatriciaST(){  head=new Node("",null,0);  head.left=head;  head.right=head;  count=0;}  }
class C{  public void printJavaChar(char ch) throws IOException {switch (ch) {case '\\':    _os.print("\\\\");  break;case '\n':_os.print("\\n");break;case '\r':_os.print("\\r");break;case '\'':_os.print("\\'");break;default :_os.print(ch);}}  }
class C{  public static String formatDuration(long duration){  StringBuilder result=new StringBuilder();  long remainingDuration=duration;  if (remainingDuration == 0) {    result.append("0 Milliseconds");  } else {    remainingDuration=processDuration(remainingDuration,MILLIS_PER_DAY,"Day",result,false);    remainingDuration=processDuration(remainingDuration,MILLIS_PER_HOUR,"Hour",result,false);    remainingDuration=processDuration(remainingDuration,MILLIS_PER_MINUTE,"Minute",result,false);    remainingDuration=processDuration(remainingDuration,MILLIS_PER_SECOND,"Second",result,false);    long milliSeconds=remainingDuration;    if (milliSeconds > 0) {      processDuration(remainingDuration,1,"Millisecond",result,true);    }  }  return result.toString();}  }
class C{  private URI uri(Location location,String packageName,String relativeName){  return CharSequenceCompiler.toURI(location.getName() + '/' + packageName+ '/'+ relativeName);}  }
class C{  public static boolean isSameColumn(char[] board){  int[] columns=new int[8];  for (int i=0; i < board.length; i++) {    if (isOccupied(board[i])) {      columns[getColumn(i)]++;    }    if (columns[getColumn(i)] > 1)     return true;  }  return false;}  }
class C{  static String decodeString(String source,boolean failSilently){  try {    return decodeString(source);  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  protected void checkAcceptPermission(AccessControlContext acc){  SecurityManager sm=System.getSecurityManager();  if (sm == null) {    return;  }  ConnectionHandler h=threadConnectionHandler.get();  if (h == null) {    throw new Error("checkAcceptPermission not in ConnectionHandler thread");  }  h.checkAcceptPermission(sm,acc);}  }
class C{  public PowerContainerVmSelectionPolicyMaximumCorrelation(final PowerContainerVmSelectionPolicy fallbackPolicy){  super();  setFallbackPolicy(fallbackPolicy);}  }
class C{  protected void logErrorDisconnect(OFErrorMsg error){  logError(error);  mainConnection.disconnect();}  }
class C{  public boolean isALeaf(){  return num_children == 0;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.RECIPIENT_LIST_ROUTER;}  }
class C{  @Override public String toString(){  if (type.equals(JavaTypes.CLASS_TYPE)) {    return ((Class<?>)value).getName() + ".class";  }  return value.toString();}  }
class C{  public int diff_levenshtein(LinkedList<Diff> diffs){  int levenshtein=0;  int insertions=0;  int deletions=0;  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      insertions+=aDiff.text.length();    break;case DELETE:  deletions+=aDiff.text.length();break;case EQUAL:levenshtein+=Math.max(insertions,deletions);insertions=0;deletions=0;break;}}levenshtein+=Math.max(insertions,deletions);return levenshtein;}  }
class C{  public StringSendPacket send(String str){  return send(str,null);}  }
class C{  private void updateNodeSizes(boolean updateAll){  int aY, counter, maxCounter;  TreeStateNode node;  updateNodeSizes=false;  for (aY=counter=0, maxCounter=visibleNodes.size(); counter < maxCounter; counter++) {    node=(TreeStateNode)visibleNodes.elementAt(counter);    node.setYOrigin(aY);    if (updateAll || !node.hasValidSize())     node.updatePreferredSize(counter);    aY+=node.getPreferredHeight();  }}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);}  }
class C{  public void putAll(Map map){  int mapSize=map.size();  if (size == 0 && mapSize != 0 && map instanceof SortedMap) {    Comparator c=((SortedMap)map).comparator();    if (c == comparator || (c != null && c.equals(comparator))) {      ++modCount;      try {        buildFromSorted(mapSize,map.entrySet().iterator(),null,null);      } catch (      java.io.IOException cannotHappen) {      }catch (      ClassNotFoundException cannotHappen) {      }      return;    }  }  super.putAll(map);}  }
class C{  private void resetTextPos(){  textPos=this.getHeight() - (lineSpacing + lineHeight) * 2;}  }
class C{  public void assertKnownException(SQLException e){  assertKnownException("",e);}  }
class C{  public static boolean isPostCode(String data){  String expr="^[0-9]{6,10}";  return data.matches(expr);}  }
class C{  public void testMergeSecurityRoleIntoDocumentWithSameRole() throws Exception {  String srcXml="<web-app>" + "  <security-role>" + "    <description>A role</description>"+ "    <role-name>role1</role-name>"+ "  </security-role>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <security-role>" + "    <role-name>role1</role-name>"+ "  </security-role>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  List<String> securityRoleNames=WebXmlUtils.getSecurityRoleNames(srcWebXml);  assertEquals(1,securityRoleNames.size());  assertEquals("role1",securityRoleNames.get(0));}  }
class C{  public void sendAddEntity(List<Entity> entities){  for (  Entity entity : entities) {    checkDuplicateNamesDuringAdd(entity);  }  send(new Packet(Packet.COMMAND_ENTITY_ADD,entities));}  }
class C{  public static IEditorInput createFileEditorInput(File file) throws CoreException {  if (file == null)   throw new IllegalArgumentException("File is null");  return new MindMapEditorInput(file.toURI());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node refChild;  Node insertedNode;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");  elementList=doc.getElementsByTagName("employee");  refChild=elementList.item(1);{    boolean success=false;    try {      insertedNode=rootNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  protected KeySpec engineGetKeySpec(SecretKey key,Class<?> keySpecCl) throws InvalidKeySpecException {  if (key instanceof javax.crypto.interfaces.PBEKey) {    if ((keySpecCl != null) && PBEKeySpec.class.isAssignableFrom(keySpecCl)) {      javax.crypto.interfaces.PBEKey pKey=(javax.crypto.interfaces.PBEKey)key;      return new PBEKeySpec(pKey.getPassword(),pKey.getSalt(),pKey.getIterationCount(),pKey.getEncoded().length * 8);    } else {      throw new InvalidKeySpecException("Invalid key spec");    }  } else {    throw new InvalidKeySpecException("Invalid key " + "format/algorithm");  }}  }
class C{  public DrmRights(File rightsFile,String mimeType){  instantiate(rightsFile,mimeType);}  }
class C{  public static Document markdown(String markdown){  Parser parser=new Parser(new StringReader(markdown.replaceAll("\\s+$","")));  try {    return parser.parse();  } catch (  ParseException e) {    throw new RuntimeException();  }}  }
class C{  public boolean isIsSatisfiable(){  return isSatisfiable;}  }
class C{  private static boolean hasEmptyIntersectionOfInvariantInstantiations(Type p,Type q){  List<TypeDeclaration> pstds=p.getDeclaration().getSupertypeDeclarations();  List<TypeDeclaration> qstds=q.getDeclaration().getSupertypeDeclarations();  Set<TypeDeclaration> set=new HashSet<TypeDeclaration>(pstds.size() + qstds.size());  set.addAll(pstds);  set.retainAll(qstds);  for (  TypeDeclaration std : set) {    Type pst=null;    Type qst=null;    for (    TypeParameter tp : std.getTypeParameters()) {      if (tp.isInvariant()) {        if (pst == null) {          pst=p.getSupertype(std);        }        if (qst == null) {          qst=q.getSupertype(std);        }        if (pst != null && qst != null) {          Type psta=pst.getTypeArguments().get(tp);          Type qsta=qst.getTypeArguments().get(tp);          if (psta != null && psta.isWellDefined() && !pst.involvesTypeParameters() && qsta != null && qsta.isWellDefined() && !qst.involvesTypeParameters()) {            boolean psti=pst.isInvariant(tp);            boolean pstcov=pst.isCovariant(tp);            boolean pstcontra=pst.isContravariant(tp);            boolean qsti=qst.isInvariant(tp);            boolean qstcov=qst.isCovariant(tp);            boolean qstcontra=qst.isContravariant(tp);            if (psti && qsti && !psta.isExactly(qsta) || pstcov && qsti && !qsta.isSubtypeOf(psta) || qstcov && psti && !psta.isSubtypeOf(qsta) || pstcontra && qsti && !psta.isSubtypeOf(qsta) || qstcontra && psti && !qsta.isSubtypeOf(psta)) {              return true;            }          }        }      }    }  }  return false;}  }
class C{  public CNativeCallgraphViewsTable(final JTree projectTree,final INaviModule module,final IViewContainer container){  super(projectTree,new CNativeCallgraphsViewsModel(module),container,new CNativeCallgraphViewsTableHelp());  setDefaultRenderer(Object.class,new CViewsTableRenderer(this,container));}  }
class C{  private void checkNodeAttributes(){  log.info("analysing network nodes...");  int exit=0, red=0, de=0;  this.nodeTypes.put(this.exit,new ArrayList<Id>());  this.nodeTypes.put(this.deadEnd,new ArrayList<Id>());  this.nodeTypes.put(this.redundant,new ArrayList<Id>());  for (  Node node : this.network.getNodes().values()) {    if (node.getInLinks().size() > 0 && node.getOutLinks().size() > 0) {      if (node.getInLinks().size() > 5 || node.getOutLinks().size() > 5)       this.nodesWithHighDegrees.add(node.getId());      if (node.getInLinks().size() == 1 && node.getOutLinks().size() == 1) {        Link inLink=node.getInLinks().values().iterator().next();        Link outLink=node.getOutLinks().values().iterator().next();        if (inLink.getFromNode().equals(outLink.getToNode())) {          if (!this.envelope.contains(new Point(new CoordinateArraySequence(new Coordinate[]{new Coordinate(node.getCoord().getX(),node.getCoord().getY())}),new GeometryFactory()))) {            this.nodeTypes.get(this.exit).add(node.getId());            exit++;            continue;          }          this.nodeTypes.get(this.deadEnd).add(node.getId());          de++;        } else {          if (inLink.getCapacity() == outLink.getCapacity() && inLink.getFreespeed() == outLink.getFreespeed() && inLink.getNumberOfLanes() == outLink.getNumberOfLanes() && inLink.getAllowedModes() == outLink.getAllowedModes()) {            this.nodeTypes.get(this.redundant).add(node.getId());            red++;          }        }      }    }  }  log.info("found " + exit + " exit road nodes, "+ de+ " dead end nodes and "+ red+ " redundant nodes...");  log.info("...done");  this.nodesChecked=true;}  }
class C{  public NATURAL_LEFT_JOIN NATURAL_LEFT_JOIN(String tableToJoin){  return new NATURAL_LEFT_JOIN(this,tableToJoin);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STR");  translateAll(environment,instruction,"STR",instructions);}  }
class C{  public void createWeekScenarioLongUsage() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-01-05 12:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"LONG_USAGE_PUWEEK_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"LONG_USAGE_PUWEEK",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-29 08:12:00"));  subDetails.setSubscriptionId("LONG_USAGE_PUWEEK_SubID2");  subDetails=subscrSetup.modifySubscription(basicSetup.getCustomerAdminKey(),subDetails,null);  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("LONG_USAGE_PUWEEK",subDetails);}  }
class C{  public static ContactId createContactIdFromValidatedData(PhoneNumber phoneNumber){synchronized (ContactUtil.class) {    if (mContactUtil == null) {      mContactUtil=com.gsma.services.rcs.contact.ContactUtil.getInstance(AndroidFactory.getApplicationContext());    }  }  try {    return mContactUtil.formatContact(phoneNumber.getNumber());  } catch (  RcsPermissionDeniedException e) {    String errorMessage="Phone number '" + phoneNumber + "' cannot be converted into contactId!";    throw new IllegalStateException(errorMessage,e);  }}  }
class C{  static <T>T checkNotNull(T instance,String name){  if (instance == null) {    throw new NullPointerException(name + " must not be null");  }  return instance;}  }
class C{  public boolean isSetMessageType(){  return this.messageType != null;}  }
class C{  private MemoryChunk connectChunks(final MemoryChunk firstChunk,final MemoryChunk secondChunk){  Preconditions.checkNotNull(firstChunk,"Error: First memory chunk can't be null");  Preconditions.checkNotNull(secondChunk,"Error: Second memory chunk can't be null");  Preconditions.checkArgument(secondChunk.getAddress() > firstChunk.getAddress(),"Error: Second memory chunk must start after the first memory chunk");  final long newAddress=firstChunk.getAddress();  MemoryChunk newChunk;  if ((firstChunk.getAddress() + firstChunk.getLength()) == secondChunk.getAddress()) {    final byte[] newData=concat(firstChunk.getBytes(),secondChunk.getBytes());    newChunk=new MemoryChunk(newAddress,newData);  } else {    final int toFill=(int)(secondChunk.getAddress() - firstChunk.getAddress()) - firstChunk.getLength();    final byte[] newData=new byte[firstChunk.getLength() + toFill + secondChunk.getLength()];    if (toFill > 0) {      return null;    } else     if (toFill < 0) {      System.arraycopy(firstChunk.getBytes(),0,newData,0,firstChunk.getLength());      System.arraycopy(secondChunk.getBytes(),-toFill,newData,firstChunk.getLength(),secondChunk.getLength() + toFill);    }    newChunk=new MemoryChunk(newAddress,newData);  }  removeChunk(firstChunk);  removeChunk(secondChunk);  insertChunk(newChunk);  return newChunk;}  }
class C{  public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {  if (top != frame.top) {    throw new AnalyzerException(null,"Incompatible stack heights");  }  boolean changes=false;  for (int i=0; i < locals + top; ++i) {    V v=interpreter.merge(values[i],frame.values[i]);    if (!v.equals(values[i])) {      values[i]=v;      changes=true;    }  }  return changes;}  }
class C{  @Override public void changeTo(final String file,int page,Object location,final Integer type,final boolean storeView){  if (showMethods) {    System.out.println("DefaultActionHandler.changeTo()" + file);  }  if (file != null) {    try {      final org.jpedal.gui.GUIFactory gui=((GUIFactory)decode_pdf.getExternalHandler(Options.GUIContainer));      if (gui != null) {        gui.stopThumbnails();      }      if (file.startsWith("http://") || file.startsWith("ftp://") || file.startsWith("https:")) {        if (gui != null) {          gui.getCommand().executeCommand(Commands.OPENURL,new Object[]{file});        } else {          decode_pdf.openPdfFileFromURL(file,true);        }      } else {        if (gui != null) {          gui.getCommand().executeCommand(Commands.OPENFILE,new Object[]{file});        } else {          decode_pdf.openPdfFile(file);        }      }      if (page == -1) {        page=1;      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }  }  if (((page != -1) && (decode_pdf.getPageCount() != 1 && (decode_pdf.getDisplayView() != Display.SINGLE_PAGE || (decode_pdf.getDisplayView() == Display.SINGLE_PAGE && decode_pdf.getlastPageDecoded() != page)))) && (page > 0 && page < decode_pdf.getPageCount() + 1)) {    try {      switchPage(page);      this.decode_pdf.decodePage(page);      if (page != -1) {        gui.setPage(page);      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }    decode_pdf.setPageParameters(-1,page);  }  if (type != null) {    final Object gui=this.decode_pdf.getExternalHandler(org.jpedal.external.Options.GUIContainer);    if (gui != null) {      if (type < 0) {        ((org.jpedal.examples.viewer.gui.GUI)gui).setSelectedComboIndex(org.jpedal.examples.viewer.Commands.SCALING,type + 3);      } else {        ((org.jpedal.examples.viewer.gui.GUI)gui).setSelectedComboItem(org.jpedal.examples.viewer.Commands.SCALING,type.toString());      }    }    scrollOnPage(page,location,storeView,type);  }}  }
class C{  public T onreset(String value){  return attr("onreset",value);}  }
class C{  public CutAction(final NetworkPanel networkPanel){  super(networkPanel,"Cut",EnablingCondition.NEURONS);  Toolkit toolkit=Toolkit.getDefaultToolkit();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_X,toolkit.getMenuShortcutKeyMask());  putValue(ACCELERATOR_KEY,keyStroke);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Cut.png"));  putValue(SHORT_DESCRIPTION,"Cut selected neurons, (connected) synapses, and neuron groups");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:40:20.424 -0400",hash_original_method="3D19830D494646AEF9F1010DC4A51D20",hash_generated_method="4F3149D65FD342105C98140E90B5F1B1") public AtCommandResult handleSetCommand(Object[] args){  return new AtCommandResult(AtCommandResult.ERROR);}  }
class C{  public static void main(String[] argv){  runClassifier(new REPTree(),argv);}  }
class C{  public void processUserAction(ActionEvent evt){  String label=((MenuItem)evt.getSource()).getLabel();  if (amh.getMessage("menuitem.restart").equals(label)) {    appletRestart();    return;  }  if (amh.getMessage("menuitem.reload").equals(label)) {    appletReload();    return;  }  if (amh.getMessage("menuitem.clone").equals(label)) {    appletClone();    return;  }  if (amh.getMessage("menuitem.stop").equals(label)) {    appletStop();    return;  }  if (amh.getMessage("menuitem.save").equals(label)) {    appletSave();    return;  }  if (amh.getMessage("menuitem.start").equals(label)) {    appletStart();    return;  }  if (amh.getMessage("menuitem.tag").equals(label)) {    appletTag();    return;  }  if (amh.getMessage("menuitem.info").equals(label)) {    appletInfo();    return;  }  if (amh.getMessage("menuitem.encoding").equals(label)) {    appletCharacterEncoding();    return;  }  if (amh.getMessage("menuitem.edit").equals(label)) {    appletEdit();    return;  }  if (amh.getMessage("menuitem.print").equals(label)) {    appletPrint();    return;  }  if (amh.getMessage("menuitem.props").equals(label)) {    networkProperties();    return;  }  if (amh.getMessage("menuitem.close").equals(label)) {    appletClose();    return;  }  if (factory.isStandalone() && amh.getMessage("menuitem.quit").equals(label)) {    appletQuit();    return;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String arcFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      arcFile=whiteboxHeaderFile.replace(".dep",".txt");      (new File(arcFile)).delete();      fw=new FileWriter(arcFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="NCOLS         " + String.valueOf(wbr.getNumberColumns());      out.println(str1);      str1="NROWS         " + String.valueOf(wbr.getNumberRows());      out.println(str1);      str1="XLLCORNER     " + String.valueOf(wbr.getWest());      out.println(str1);      str1="YLLCORNER     " + String.valueOf(wbr.getSouth());      out.println(str1);      str1="CELLSIZE      " + String.valueOf((wbr.getCellSizeX() + wbr.getCellSizeY()) / 2);      out.println(str1);      str1="NODATA_VALUE  -9999";      out.println(str1);      double[] data;      String line;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else {        for (row=0; row < rows; row++) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void showSettings(){  if (setdlg == null) {    setdlg=new CommonSettingsDialog(frame,this);  }  setdlg.setVisible(true);}  }
class C{  void dumpIndex(String rootjar,JarIndex index) throws IOException {  File jarFile=new File(rootjar);  Path jarPath=jarFile.toPath();  Path tmpPath=createTempFileInSameDirectoryAs(jarFile).toPath();  try {    if (update(Files.newInputStream(jarPath),Files.newOutputStream(tmpPath),null,index)) {      try {        Files.move(tmpPath,jarPath,REPLACE_EXISTING);      } catch (      IOException e) {        throw new IOException(getMsg("error.write.file"),e);      }    }  }  finally {    Files.deleteIfExists(tmpPath);  }}  }
class C{  private void assertReadVarint(byte[] data,long value) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  assertEquals((int)value,input.readRawVarint32());  input=CodedInputStream.newInstance(data);  assertEquals(value,input.readRawVarint64());  assertTrue(input.isAtEnd());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals((int)value,input.readRawVarint32());    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals(value,input.readRawVarint64());    assertTrue(input.isAtEnd());  }  byte[] longerData=new byte[data.length + 1];  System.arraycopy(data,0,longerData,0,data.length);  InputStream rawInput=new ByteArrayInputStream(longerData);  assertEquals((int)value,CodedInputStream.readRawVarint32(rawInput));  assertEquals(1,rawInput.available());}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    CommodityChannelIndexItem dataItem=(CommodityChannelIndexItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getCommodityChannelIndex());  }}  }
class C{  public void configure(){  DCCppTrafficController packets=new SerialDCCppPacketizer(new DCCppCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setDCCppTrafficController(packets);  new DCCppInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension rd, mbd;  Insets i=getInsets();  if (contentPane != null) {    rd=contentPane.getMinimumSize();  } else {    rd=parent.getSize();  }  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getMinimumSize();  } else {    mbd=new Dimension(0,0);  }  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE___TRACE_DIRECTIVE_1:    getTraceDirective_1().clear();  return;case UmplePackage.TRACE___TRACE_CASE_1:getTraceCase_1().clear();return;}super.eUnset(featureID);}  }
class C{  @SuppressWarnings("UnusedDeclaration") private static <T>T rand(Collection<? extends T> c){  if (c == null)   throw new IllegalArgumentException();  int n=ThreadLocalRandom.current().nextInt(c.size());  int i=0;  for (  T t : c) {    if (i++ == n)     return t;  }  throw new ConcurrentModificationException();}  }
class C{  public boolean removeNode(ServiceNode node){  try {    return nodes.remove(node);  } catch (  Exception e) {    return false;  }}  }
class C{  public boolean isSelected(){  Boolean value=(Boolean)getValue();  if (value != null) {    return (value.booleanValue());  } else {    return (false);  }}  }
class C{  public DocumentCharacterIterator(Document document) throws BadLocationException {  this(document,0);}  }
class C{  public int colorBranches(){  if (nbranches == 0)   nbranches=colorBranches(root,0);  return nbranches;}  }
class C{  protected void parseMatrix() throws ParseException, IOException {  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'r') {    reportCharacterExpectedError('r',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'i') {    reportCharacterExpectedError('i',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'x') {    reportCharacterExpectedError('x',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float a=parseFloat();  skipCommaSpaces();  float b=parseFloat();  skipCommaSpaces();  float c=parseFloat();  skipCommaSpaces();  float d=parseFloat();  skipCommaSpaces();  float e=parseFloat();  skipCommaSpaces();  float f=parseFloat();  skipSpaces();  if (current != ')') {    reportCharacterExpectedError(')',current);    skipTransform();    return;  }  fragmentIdentifierHandler.matrix(a,b,c,d,e,f);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void initForRgbFrame(int width,int height){  this.width=width;  this.height=height;  int minimumRgbSize=width * height * 2;  if (data == null || data.capacity() < minimumRgbSize) {    data=ByteBuffer.allocateDirect(minimumRgbSize);    yuvPlanes=null;  }  data.position(0);  data.limit(minimumRgbSize);}  }
class C{  private void notifySuccess(final PoliticalActionAttachment paa){  getSoundChannel().playSoundForAll(SoundPath.CLIP_POLITICAL_ACTION_SUCCESSFUL,m_player);  sendNotification(PoliticsText.getInstance().getNotificationSucccess(paa.getText()));  notifyOtherPlayers(paa,PoliticsText.getInstance().getNotificationSuccessOthers(paa.getText()));}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public SignalServiceEnvelope(String message,String signalingKey) throws IOException, InvalidVersionException {  this(Base64.decode(message),signalingKey);}  }
class C{  public static String unescapeJavaScript(String str){  return unescapeJava(str);}  }
class C{  public boolean filter(long tweet){  for (  RelatedTweetFilter filter : filterSet) {    filter.inputCounter.incr();    if (filter.filter(tweet)) {      filter.filteredCounter.incr();      return true;    }  }  return false;}  }
class C{  public static void checkURI(String uri) throws IOException {  try {    URI ur=new URI(uri);    if (ur.getScheme() == null || ur.getRawSchemeSpecificPart().isEmpty()) {      throw new IOException("No scheme or scheme-specific-part in uniformResourceIdentifier: " + uri);    }    if (!ur.isAbsolute()) {      throw new IOException("Relative uniformResourceIdentifier: " + uri);    }  } catch (  URISyntaxException e) {    throw (IOException)new IOException("Bad representation of uniformResourceIdentifier: " + uri).initCause(e);  }}  }
class C{  private boolean removeSource(int id,int isolateId){  Map<Integer,DModule> source=getIsolateState(isolateId).m_source;synchronized (source) {    try {      source.remove(id);    } catch (    Exception e) {      return false;    }    return true;  }}  }
class C{  public SIPRequest createCancelRequest() throws SipException {  if (!this.getMethod().equals(Request.INVITE))   throw new SipException("Attempt to create CANCEL for " + this.getMethod());  SIPRequest cancel=new SIPRequest();  cancel.setRequestLine((RequestLine)this.requestLine.clone());  cancel.setMethod(Request.CANCEL);  cancel.setHeader((Header)this.callIdHeader.clone());  cancel.setHeader((Header)this.toHeader.clone());  cancel.setHeader((Header)cSeqHeader.clone());  try {    cancel.getCSeq().setMethod(Request.CANCEL);  } catch (  ParseException e) {    e.printStackTrace();  }  cancel.setHeader((Header)this.fromHeader.clone());  cancel.addFirst((Header)this.getTopmostVia().clone());  cancel.setHeader((Header)this.maxForwardsHeader.clone());  if (this.getRouteHeaders() != null) {    cancel.setHeader((SIPHeaderList<?>)this.getRouteHeaders().clone());  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    cancel.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return cancel;}  }
class C{  public void finish(){  kill();}  }
class C{  private void ExtractSym(AST ast,String context){  if (ast.getClass().equals(AST.UniprocessObj.getClass()))   ExtractUniprocess((AST.Uniprocess)ast,context); else   if (ast.getClass().equals(AST.MultiprocessObj.getClass()))   ExtractMultiprocess((AST.Multiprocess)ast,context); else   PcalDebug.ReportBug("Unexpected AST type.");}  }
class C{  public void actionPerformed(ActionEvent e){  String topicName=(String)topic.getSelectedItem();  if (updateTopicList(topicName)) {    mqttMgr.updatePublishTopicList(topicName);  }  if (e.getActionCommand().equals("Subscribe")) {    mqttMgr.subscription(topicName,qosList.getSelectedIndex(),true);  } else   if (e.getActionCommand().equals("Unsubscribe")) {    mqttMgr.subscription(topicName,0,false);  } else   if (e.getActionCommand().equals("Save...")) {    JFileChooser selectFile=new JFileChooser(fileChooserCurrentDir);    selectFile.setMultiSelectionEnabled(false);    if (selectFile.showSaveDialog(subPanel) == JFileChooser.APPROVE_OPTION) {      fileChooserCurrentDir=selectFile.getCurrentDirectory();      File theFile=selectFile.getSelectedFile();      FileOutputStream output=null;      try {        output=new FileOutputStream(theFile);        output.write(fileContent);      } catch (      FileNotFoundException fnfe) {        JOptionPane.showMessageDialog(subPanel,fnfe.getMessage(),"File Save Error",JOptionPane.ERROR_MESSAGE);      }catch (      IOException ioe) {        JOptionPane.showMessageDialog(subPanel,ioe.getMessage(),"File Save Error",JOptionPane.ERROR_MESSAGE);      }      try {        if (output != null) {          output.close();        }      } catch (      IOException ioe) {      }    }  } else {    if (hexDisplay == false) {      toHexString();    } else {      toCharString();    }  }}  }
class C{  public void recycle(final ChessBoard board){  board.getControl().dispose();}  }
class C{  protected List<Position> computeArrowheadPositions(DrawContext dc,Vec4 tip,Vec4 dir,double length){  Globe globe=dc.getGlobe();  @SuppressWarnings({"UnnecessaryLocalVariable"}) Vec4 ptB=tip;  double arrowHalfWidth=length * this.getArrowAngle().tanHalfAngle();  dir=dir.normalize3();  Vec4 arrowBase=ptB.add3(dir.multiply3(length));  Vec4 normal=globe.computeSurfaceNormalAtPoint(arrowBase);  Vec4 perpendicular=dir.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(arrowHalfWidth);  Vec4 ptA=arrowBase.add3(perpendicular);  Vec4 ptC=arrowBase.subtract3(perpendicular);  List<Position> positions;  if (this.isDrawOutlined()) {    double outlineWidth=this.getOutlineWidth();    perpendicular=perpendicular.multiply3(1 + outlineWidth);    Vec4 ptF=arrowBase.add3(perpendicular);    Vec4 ptD=arrowBase.subtract3(perpendicular);    Vec4 ptE=ptB.subtract3(dir.multiply3(length * outlineWidth));    positions=TacticalGraphicUtil.asPositionList(globe,ptA,ptB,ptC,ptD,ptE,ptF,ptA);  } else {    positions=TacticalGraphicUtil.asPositionList(globe,ptA,ptB,ptC);  }  return positions;}  }
class C{  public boolean isNormalized(){  return isNormalized;}  }
class C{  public static OFGroup createL3Unicast(U32 id){  return OFGroup.of(0 | (id.getRaw() & 0x0FffFFff) | (OFDPAGroupType.L3_UNICAST << 28));}  }
class C{  public SnippetMap(){  pcs=new PropertyChangeSupport(this);}  }
class C{  public void updateAssignedStoragePools(final Set<String> poolsToUpdate){  if (null == _assignedStoragePools) {    setAssignedStoragePools(new StringSet());  }  _assignedStoragePools.addAll(poolsToUpdate);}  }
class C{  public synchronized void checkAccess(LicenseCheckerCallback callback){  if (mPolicy.allowAccess()) {    Log.i(TAG,"Using cached license response");    callback.allow(Policy.LICENSED);  } else {    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);    if (mService == null) {      Log.i(TAG,"Binding to licensing service.");      try {        boolean bindResult=mContext.bindService(new Intent("com.android.vending.licensing.ILicensingService"),this,Context.BIND_AUTO_CREATE);        if (bindResult) {          mPendingChecks.offer(validator);        } else {          Log.e(TAG,"Could not bind to service.");          handleServiceConnectionError(validator);        }      } catch (      Exception e) {        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);      }    } else {      mPendingChecks.offer(validator);      runChecks();    }  }}  }
class C{  public boolean isOK(){  return fSeverity == IStatus.OK;}  }
class C{  public CertificateView(String certificate){  initComponents();  this.certificateTextArea.setText(certificate);  setVisible(true);}  }
class C{  @Override public List<ViewManager> createViewManagers(ReactApplicationContext reactContext){  return new ArrayList<>();}  }
class C{  public void sphericalToWorld(Vector3 vec){  if (pjUnprojected == null) {    String projStr="+proj=longlat +a=" + projInfo.getSemiMajorAxis() + " +b="+ projInfo.getSemiMinorAxis()+ " +no_defs";    pjUnprojected=Proj4.newInstance(projStr);  }  if (pjProjected == null) {    pjProjected=Proj4.newInstance(proj4String);  }  try {    vec.toArray(coord);    coord[0]=Math.toRadians(coord[0]);    coord[1]=Math.toRadians(coord[1]);    pjUnprojected.transform(pjProjected,coord);    vec.setX(coord[0]);    vec.setY(coord[1]);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isScheduled(){  return scheduled;}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  int i;  int j;  ArrayList<Attribute> atts;  ArrayList<String> clsValues;  Random rand;  m_Random=new Random(getSeed());  rand=getRandom();  setNumExamplesAct(getNumExamples());  m_centroids=new double[getNumCentroids()][getNumAttributes()];  m_centroidClasses=new int[getNumCentroids()];  m_centroidWeights=new double[getNumCentroids()];  m_centroidStdDevs=new double[getNumCentroids()];  for (i=0; i < getNumCentroids(); i++) {    for (j=0; j < getNumAttributes(); j++) {      m_centroids[i][j]=rand.nextDouble();    }    m_centroidClasses[i]=rand.nextInt(getNumClasses());    m_centroidWeights[i]=rand.nextDouble();    m_centroidStdDevs[i]=rand.nextDouble();  }  atts=new ArrayList<Attribute>();  for (i=0; i < getNumAttributes(); i++) {    atts.add(new Attribute("a" + i));  }  clsValues=new ArrayList<String>();  for (i=0; i < getNumClasses(); i++) {    clsValues.add("c" + i);  }  atts.add(new Attribute("class",clsValues));  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);  return m_DatasetFormat;}  }
class C{  public static byte[] decodeHex(char[] data) throws IgniteCheckedException {  int len=data.length;  if ((len & 0x01) != 0)   throw new IgniteCheckedException("Odd number of characters.");  byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f|=toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  public Benchmark(String name,String runId,int subCnt,int pubCnt){  this.name=name;  this.runId=runId;  this.subChannel=new LinkedBlockingQueue<Sample>();  this.pubChannel=new LinkedBlockingQueue<Sample>();}  }
class C{  public Object put(Object key1,Object key2,Object key3,Object value){  int hashCode=hash(key1,key2,key3);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3)) {      Object oldValue=entry.getValue();      map.updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  map.addMapping(index,hashCode,new MultiKey(key1,key2,key3),value);  return null;}  }
class C{  @Override public Expression buildObjectJoinExpression(Expression expression,Object value,AbstractSession session){  Expression attributeByAttributeComparison=null;  Expression join=null;  Object attributeValue=null;  ClassDescriptor referenceDescriptor=getReferenceDescriptor();  if ((value != null) && !referenceDescriptor.getJavaClass().isInstance(value)) {    throw QueryException.incorrectClassForObjectComparison(expression,value,this);  }  Enumeration mappings=referenceDescriptor.getMappings().elements();  for (; mappings.hasMoreElements(); ) {    DatabaseMapping mapping=(DatabaseMapping)mappings.nextElement();    if (value == null) {      attributeValue=null;    } else {      attributeValue=mapping.getAttributeValueFromObject(value);    }    join=expression.get(mapping.getAttributeName()).equal(attributeValue);    if (attributeByAttributeComparison == null) {      attributeByAttributeComparison=join;    } else {      attributeByAttributeComparison=attributeByAttributeComparison.and(join);    }  }  return attributeByAttributeComparison;}  }
class C{  public void addExceptionDates(ExceptionDates exceptionDates){  addProperty(exceptionDates);}  }
class C{  public static String numberToString(Number number){  if (number == null) {    return "";  }  if (number != null) {    if (number instanceof Double) {      if (((Double)number).isInfinite() || ((Double)number).isNaN()) {        return "Non-Finite";      }    } else     if (number instanceof Float) {      if (((Float)number).isInfinite() || ((Float)number).isNaN()) {        return "Non-Finite";      }    }  }  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  static void skipWhitespace(IXMLReader reader,StringBuffer buffer) throws IOException {  char ch;  if (buffer == null) {    do {      ch=reader.read();    } while ((ch == ' ') || (ch == '\t') || (ch == '\n'));  } else {    for (; ; ) {      ch=reader.read();      if ((ch != ' ') && (ch != '\t') && (ch != '\n')) {        break;      }      if (ch == '\n') {        buffer.append('\n');      } else {        buffer.append(' ');      }    }  }  reader.unread(ch);}  }
class C{  public void removeChartMouseListener(ChartMouseListenerFX listener){  this.canvas.removeChartMouseListener(listener);}  }
class C{  private IgfsMode parseIgfsMode(String[] ss,int ix){  if (ss.length <= ix)   return null; else {    String s=ss[ix];    return s.isEmpty() ? null : IgfsMode.valueOf(s);  }}  }
class C{  public NameServiceException(Throwable rootCause){  super(String.valueOf(rootCause));  this.rootCause=rootCause;}  }
class C{  private void validateFechaEntrega(HttpServletRequest request,ConsultaUnidadesDocumentalesForm consultaUnidadesDocumentalesForm,ActionErrors errors){  if (!new CustomDate(consultaUnidadesDocumentalesForm.getFechaFormatoIni(),consultaUnidadesDocumentalesForm.getFechaAIni(),consultaUnidadesDocumentalesForm.getFechaMIni(),consultaUnidadesDocumentalesForm.getFechaDIni(),consultaUnidadesDocumentalesForm.getFechaSIni()).validate() || !new CustomDate(consultaUnidadesDocumentalesForm.getFechaIniFormatoIni(),consultaUnidadesDocumentalesForm.getFechaIniAIni(),consultaUnidadesDocumentalesForm.getFechaIniMIni(),consultaUnidadesDocumentalesForm.getFechaIniDIni(),consultaUnidadesDocumentalesForm.getFechaIniSIni()).validate() || !new CustomDate(consultaUnidadesDocumentalesForm.getFechaFinFormatoIni(),consultaUnidadesDocumentalesForm.getFechaFinAIni(),consultaUnidadesDocumentalesForm.getFechaFinMIni(),consultaUnidadesDocumentalesForm.getFechaFinDIni(),consultaUnidadesDocumentalesForm.getFechaFinSIni()).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(SolicitudesConstants.LABEL_FORM_FECHA_SOLICITUD,request.getLocale())));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.371 -0500",hash_original_method="C0BFA4AD92D4DEF654107ADD12EA3FEE",hash_generated_method="21389218728DC2B181D1950BEC50F95B") public String encodeBody(){  return encodeProduct();}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  @SuppressWarnings("unchecked") public CProjectFilterCreator(){  super(Lists.newArrayList((IPredicateGenerator<CProjectWrapper>)new CNameDescriptionGenerator<CProjectWrapper>()));}  }
class C{  private Long findMaximum0(Collection<Long> input){  System.out.println(">>>");  System.out.println("Find maximum in: " + input);  System.out.println(">>>");  return Collections.max(input);}  }
class C{  private void initializeAdditionalInformationEditText(){  additionalInformationEditText=(EditText)findViewById(R.id.additional_information_edit_text);}  }
class C{  public void mouseMoved(){}  }
class C{  @TargetApi(21) public Bundler putSizeF(String key,SizeF value){  bundle.putSizeF(key,value);  return this;}  }
class C{  protected void stopWraparoundTest(){  if (testRunning && wrapTest) {    wrapTimer.stop();    statusText1.setText("Wraparound Test Stopped, " + Integer.toString(numErrors) + " Errors Found");    statusText1.setVisible(true);    statusText2.setText(Integer.toString(numIterations) + " Cycles Completed");    statusText2.setVisible(true);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VERSIONS:    return isSetVersions();case TIMESTAMP:  return isSetTimestamp();}throw new IllegalStateException();}  }
class C{  public void testStatistic() throws Exception {  TimeStatisticImpl stat=new TimeStatisticImpl("myTimer","millis","myDescription");  assertStatistic(stat,"myTimer","millis","myDescription");  assertEquals(0,stat.getCount());  stat.addTime(100);  assertEquals(1,stat.getCount());  assertEquals(100,stat.getMinTime());  assertEquals(100,stat.getMaxTime());  stat.addTime(403);  assertEquals(2,stat.getCount());  assertEquals(100,stat.getMinTime());  assertEquals(403,stat.getMaxTime());  stat.addTime(50);  assertEquals(3,stat.getCount());  assertEquals(50,stat.getMinTime());  assertEquals(403,stat.getMaxTime());  assertEquals(553,stat.getTotalTime());  Thread.sleep(500);  stat.addTime(10);  assertLastTimeNotStartTime(stat);  LOG.info("Stat is: " + stat);  stat.reset();  assertEquals(0,stat.getCount());  assertEquals(0,stat.getMinTime());  assertEquals(0,stat.getMaxTime());  assertEquals(0,stat.getTotalTime());  stat.addTime(100);  assertEquals(1,stat.getCount());  assertEquals(100,stat.getMinTime());  assertEquals(100,stat.getMaxTime());  assertEquals(100,stat.getTotalTime());}  }
class C{  public List<ManifestFile> changedFiles(){  return changed;}  }
class C{  public Builder clickAction(String value){  clickAction=value;  return this;}  }
class C{  public int restoreSome(long token,RestoreObserver observer,String[] packages){  int err=-1;  if (mObserver != null) {    Log.d(TAG,"restoreAll() called during active restore");    return -1;  }  mObserver=new RestoreObserverWrapper(mContext,observer);  try {    err=mBinder.restoreSome(token,mObserver,packages);  } catch (  RemoteException e) {    Log.d(TAG,"Can't contact server to restore packages");  }  return err;}  }
class C{  public int append(byte[] bytes){  return append(bytes,0,bytes.length);}  }
class C{  public static org.oscm.vo.VOServicePaymentConfiguration convertToApi(org.oscm.internal.vo.VOServicePaymentConfiguration oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServicePaymentConfiguration newVO=new org.oscm.vo.VOServicePaymentConfiguration();  newVO.setEnabledPaymentTypes(convertToApiVOPaymentType(oldVO.getEnabledPaymentTypes()));  newVO.setService(convertToApi(oldVO.getService()));  return newVO;}  }
class C{  public AssertionConsumerService(String location,boolean isDefault,String binding,int index){  this.location=location;  this.isDefault=isDefault;  this.binding=binding;  this.index=index;}  }
class C{  public ForumPostConfig create(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/create-forum-post",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ForumPostConfig post=new ForumPostConfig();    post.parseXML(root);    return post;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  protected void storeEventListener(EventTarget t,String s,EventListener l,boolean b){synchronized (eventListenerSet) {    eventListenerSet.add(new EventListenerMememto(t,s,l,b,this));  }}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new HttpException("bitmap == null",HttpError.ERROR_PARSE));  } else {    super.onParseNetworkResponse(response,bitmap);    return Response.success(bitmap,response.headers);  }}  }
class C{  @Override public void transform(AffineTransform tx){  Point2D.Double anchor=getStartPoint();  Point2D.Double lead=getEndPoint();  setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));}  }
class C{  public void add(double value){  super.add(value,0);}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static DocumentNode toDocumentNode(Vector<?> documentNodeParams){  DocumentNode node=new DocumentNode((String)documentNodeParams.get(NODE_TITLE_INDEX));  node.setIsExecutable((Boolean)documentNodeParams.get(NODE_EXECUTABLE_INDEX));  node.setCanBeImplemented((Boolean)documentNodeParams.get(NODE_CAN_BE_IMPLEMENTED_INDEX));  Map<?,?> children=(Map<?,?>)documentNodeParams.get(NODE_CHILDREN_INDEX);  Iterator<?> it=children.values().iterator();  while (it.hasNext()) {    Object next=it.next();    Vector<Object> nodeParams=null;    if (next.getClass().isArray()) {      nodeParams=ClientUtils.vectorizeDeep((Object[])next);    } else {      nodeParams=(Vector<Object>)next;    }    if (nodeParams.size() > 4) {      node.addChildren(toReferenceNode(nodeParams));    } else {      node.addChildren(toDocumentNode(nodeParams));    }  }  return node;}  }
class C{  public SocketTimeoutException(){}  }
class C{  static public void removeAlreadyAssignedSignalMastLogic(JmriJFrame frame,SignalMast mast){  Object[] options={rb.getString("RemoveButton"),rb.getString("LeaveButton")};  int n=JOptionPane.showOptionDialog(frame,java.text.MessageFormat.format(rb.getString("RemoveAlreadyLogic"),new Object[]{mast.getDisplayName()}),rb.getString("RemoveLogicTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);  if (n == 0) {    InstanceManager.getDefault(jmri.SignalMastLogicManager.class).removeSignalMast(mast);  }}  }
class C{  public void clear(){  this.getChildren().clear();}  }
class C{  public AnimationBuilder pivotX(float pivotX){  for (  View view : views) {    ViewCompat.setPivotX(view,pivotX);  }  return this;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == IdentifiableElement.class) {switch (baseFeatureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:    return TypesPackage.TENUM_LITERAL__NAME;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public NewRasterPlotAction(final Workspace workspace){  super("Raster Plot",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("ScatterIcon.png"));  putValue(SHORT_DESCRIPTION,"New Raster Plot");}  }
class C{  public void testSomeDocuments() throws IOException {  Directory dir=newDirectory();  IndexWriterConfig iwc=newIndexWriterConfig();  iwc.setMergePolicy(newLogMergePolicy());  IndexWriter writer=new IndexWriter(dir,iwc);  Document doc=new Document();  doc.add(new TextField("field","foo",Field.Store.NO));  writer.addDocument(doc);  writer.addDocument(new Document());  doc=new Document();  doc.add(new TextField("field","foo bar",Field.Store.NO));  writer.addDocument(doc);  doc=new Document();  doc.add(new TextField("field","bar",Field.Store.NO));  writer.addDocument(doc);  writer.forceMerge(1);  DirectoryReader ir=DirectoryReader.open(writer);  writer.close();  PostingsEnum p1=getOnlyLeafReader(ir).postings(new Term("field","foo"),PostingsEnum.POSITIONS);  PostingsEnum p2=getOnlyLeafReader(ir).postings(new Term("field","bar"),PostingsEnum.POSITIONS);  PostingsEnum union=new MultiPhraseQuery.UnionPostingsEnum(Arrays.asList(p1,p2));  assertEquals(-1,union.docID());  assertEquals(0,union.nextDoc());  assertEquals(1,union.freq());  assertEquals(0,union.nextPosition());  assertEquals(2,union.nextDoc());  assertEquals(2,union.freq());  assertEquals(0,union.nextPosition());  assertEquals(1,union.nextPosition());  assertEquals(3,union.nextDoc());  assertEquals(1,union.freq());  assertEquals(0,union.nextPosition());  assertEquals(DocIdSetIterator.NO_MORE_DOCS,union.nextDoc());  ir.close();  dir.close();}  }
class C{  public Differences compare(final File controlFile,final File testFile) throws SAXException, IOException {  Document control=_parser.parse(controlFile);  Document test=_parser.parse(testFile);  Comparator comparator=new Comparator(control,test,_config);  return comparator.compare();}  }
class C{  public T caseAnnotation(Annotation object){  return null;}  }
class C{  protected SqlDateType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.sinh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  public void activate(GridTab gridTab){  if (!isInit()) {    init(gridTab);  }}  }
class C{  @Override public void onLoadComplete(SoundPool soundPool,int sampleId,int status){}  }
class C{  public static XMLTreeLocation after(String name){  return new XMLTreeLocation(LocationType.AFTER,name);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public SolrClusterSizeResponse(final String clusterId,final Integer currentSize,final String message){  this.clusterId=clusterId;  status=null;  this.currentSize=currentSize;  targetSize=null;  this.message=message;}  }
class C{  public void deleteAllGooglePlayMusicSongs(){  String where=SONG_SOURCE + "=" + "'GOOGLE_PLAY_MUSIC'";  getDatabase().delete(MUSIC_LIBRARY_TABLE,where,null);}  }
class C{  @Deprecated TransactionEvent(){}  }
class C{  public SearchBuilder sort(SortFieldBuilder... builders){  sort.addAll(Arrays.asList(builders));  return this;}  }
class C{  public static boolean testLineCircle(float a,float b,float c,float centerX,float centerY,float radius){  float denom=(float)Math.sqrt(a * a + b * b);  float dist=(a * centerX + b * centerY + c) / denom;  return -radius <= dist && dist <= radius;}  }
class C{  public BehaviorEvent(UIComponent component,Behavior behavior){  super(component);  if (null == behavior) {    throw new IllegalArgumentException("Behavior agrument cannot be null");  }  this.behavior=behavior;}  }
class C{  public String[] parseLineMulti(String nextLine) throws IOException {  return parseLine(nextLine,true);}  }
class C{  private int dpToPx(int dp){  DisplayMetrics displayMetrics=getContext().getResources().getDisplayMetrics();  return Math.round(dp * (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));}  }
class C{  public static boolean readAssignmentsAndRedirects(final BashPsiBuilder builder,boolean markAsVarDef,Mode mode,boolean acceptArrayVars){  boolean ok=false;  do {    if (isAssignment(builder,mode,acceptArrayVars)) {      ok=readAssignment(builder,mode,markAsVarDef,acceptArrayVars);    } else     if (Parsing.redirection.isRedirect(builder,true)) {      ok=Parsing.redirection.parseSingleRedirect(builder,true);    } else     if (mode == Mode.LaxAssignmentMode && Parsing.word.isWordToken(builder)) {      ok=Parsing.word.parseWord(builder);    } else {      break;    }  } while (ok && !builder.eof());  return ok;}  }
class C{  private static void arraycopyPiecemealNoCheckcast(Object[] src,Object[] dst,int len,Offset srcOffset,Offset dstOffset,int bytes){  int increment;  if (srcOffset.sGT(dstOffset)) {    increment=BYTES_IN_ADDRESS;  } else {    srcOffset=srcOffset.plus(bytes - BYTES_IN_ADDRESS);    dstOffset=dstOffset.plus(bytes - BYTES_IN_ADDRESS);    increment=-BYTES_IN_ADDRESS;  }  while (len-- != 0) {    Object value;    if (NEEDS_OBJECT_ALOAD_BARRIER) {      value=Barriers.objectArrayRead(src,srcOffset.toInt() >> LOG_BYTES_IN_ADDRESS);    } else {      value=Magic.getObjectAtOffset(src,srcOffset);    }    if (NEEDS_OBJECT_ASTORE_BARRIER) {      Barriers.objectArrayWrite(dst,dstOffset.toInt() >> LOG_BYTES_IN_ADDRESS,value);    } else {      Magic.setObjectAtOffset(dst,dstOffset,value);    }    srcOffset=srcOffset.plus(increment);    dstOffset=dstOffset.plus(increment);  }}  }
class C{  public void testSetNullIntintString() throws SQLException {  String typeCreationStmtUDT="CREATE TYPE addressType AS " + "( street INTEGER, zip TEXT);";  String personTableCreateUDT="CREATE TABLE person (name TEXT, address addressType);";  Statement st=null;  PreparedStatement ps=null;  try {    st=conn.createStatement();    st.execute(typeCreationStmtUDT);    st.execute(personTableCreateUDT);    fail("UDTs and Ref Types not supported");    String query="insert into person (name, address) values ('Hans', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.DATALINK);      ps.execute();    } catch (    SQLException sqle) {      fail("SQLException is thrown: " + sqle.getMessage());      sqle.printStackTrace();    } finally {      try {        st.close();      } catch (      Exception ee) {      }    }  } catch (  SQLException e) {  } finally {    try {      st.execute("drop table if exists person");      ps.close();    } catch (    Exception ee) {    }  }  String personTableCreate="create table person (name TEXT, Address TEXT)";  try {    st=conn.createStatement();    st.execute(personTableCreate);    String insert="insert into person (name, address) values (?, '1600 Amphitheatre Mountain View');";    ps=conn.prepareStatement(insert);    try {      ps.setNull(1,1,"");      ps.execute();    } catch (    SQLException sqle) {      assertEquals("SQLite.Exception: error in step",sqle.getMessage());    } finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      st.execute("drop table if exists person");      ps.close();    } catch (    Exception ee) {    }  }  personTableCreate="create table person (name TEXT, Address TEXT)";  try {    st=conn.createStatement();    st.execute("drop table if exists person");    st.execute(personTableCreate);    String insert="insert into person (name, address) values (?, '1600 Amphitheatre Mountain View');";    ps=conn.prepareStatement(insert);    try {      ps.setNull(1,1,"");      ps.execute();    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      st.execute("drop table if exists person");      ps.close();    } catch (    Exception ee) {    }  }}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  final public static double[] earthCircle(double phi1,double lambda0,double c,double s,double e,int n){  return earthCircle(phi1,lambda0,c,s,e,n,new double[n << 1]);}  }
class C{  private PlatformUser createPlatformUser(String userId,Organization org,UserAccountStatus status,boolean ldapActive,long validTime) throws NonUniqueBusinessKeyException {  PlatformUser user=new PlatformUser();  user.setUserId(userId);  user.setEmail("someMail@somehost.de");  user.setOrganization(org);  user.setStatus(status);  user.setLocale(Locale.ENGLISH.toString());  user.getOrganization().setRemoteLdapActive(ldapActive);  user.setPasswordRecoveryStartDate(validTime);  mgr.persist(user);  return user;}  }
class C{  public EntityCacheBuilder useSerializableCache(boolean enable){  this.useSerializableCache=enable;  return this;}  }
class C{  public Response response(){  return this.response;}  }
class C{  public static ArrayList<String[]> linesToArray(ArrayList<String> inLine){  ArrayList<String[]> framesEnTab=new ArrayList<>();  for (int i=0; i < inLine.size(); i++) {    framesEnTab.add(lineToArray(inLine.get(i)));  }  return framesEnTab;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  final private long historicalRangeCount(final byte[] fromKey,final byte[] toKey){  if (rangeCount == -1L) {    return rangeCount=ndx.rangeCount(fromKey,toKey);  } else {    return rangeCount;  }}  }
class C{  public void push(Filter filter){  stack.push(filter);}  }
class C{  public void input(Object inputText,Network network){  if (!isEnabled()) {    return;  }  ChannelEvent event=(ChannelEvent)inputText;  String text=(String)event.getValue();  String user=event.getOriginNick();  if (checkSpam(user,text)) {    return;  }  text=trimSpecialChars(text);  TextStream stream=new TextStream(text);  List<String> targetUsers=new ArrayList<String>();  String firstWord=stream.nextWord();  if (firstWord == null) {    return;  }  String firstWordLower=firstWord.toLowerCase();  if (getUsers().contains(firstWord) || getUserNicks().containsKey(firstWordLower)) {    if (getUsers().contains(firstWord)) {      targetUsers.add(firstWord);    } else {      targetUsers.add(getUserNicks().get(firstWordLower));    }    if (!stream.atEnd()) {      stream.next();    }    text=stream.upToEnd();  } else {    for (    String possibleUser : this.lastUsers) {      if ((possibleUser.length() > 2) && text.indexOf(possibleUser) != -1) {        targetUsers.add(possibleUser);      }      String trimmedPossibleUser=trimUserName(possibleUser);      if ((trimmedPossibleUser.length() > 2) && text.indexOf(trimmedPossibleUser) != -1) {        targetUsers.add(possibleUser);      }    }    if (text.indexOf(getNick()) != -1) {      targetUsers.add(getNick());    }    String trimmedNick=trimUserName(getNick());    if (text.indexOf(trimmedNick) != -1) {      targetUsers.add(getNick());    }    if (targetUsers.isEmpty()) {      targetUsers.addAll(this.lastUsers);    }  }  inputSentence(text.trim(),user,targetUsers,network);  addLastUser(user);}  }
class C{  public void addActualAllocation(BigDecimal add){  m_actualAllocation=m_actualAllocation.add(add);}  }
class C{  @Override public void visit(CurrentHandlerStatement n){}  }
class C{  public int numGenes(){  return numNodes * (maxArity + 1) + numOutputs;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final float value){  buffer.append(value);}  }
class C{  public Matrix3f adjoint(){  return adjoint(null);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tNumber of execution slots.\n" + "\t(default 1 - i.e. no parallelism)","num-slots",1,"-num-slots <num>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.EVENT_VALUE_REFERENCE_EXPRESSION__VALUE:    return basicSetValue(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  void advanceDelGen(){  delGen=nextWriteDelGen;  nextWriteDelGen=delGen + 1;  sizeInBytes=-1;}  }
class C{  private void startAnimation(long time,OverviewAnimationType type,boolean finishImmediately){  startAnimation(time,type,TabModel.INVALID_TAB_INDEX,finishImmediately);}  }
class C{  public static Symtab instance(Context context){  Symtab instance=context.get(symtabKey);  if (instance == null)   instance=new Symtab(context);  return instance;}  }
class C{  public CenterQuad(float width,float height,boolean flipCoords){  updateGeometry(width,height,flipCoords);  this.setStatic();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.WITH_STATEMENT;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  if (this.hostnameForClients != null && this.hostnameForClients.length() > 0) {    sb.append(this.hostnameForClients);  } else   if (this.bindAddress != null && this.bindAddress.length() > 0) {    sb.append(this.bindAddress);  } else {    if (isMcastId()) {      sb.append(this.host.getHostAddress());    } else {      sb.append(SocketCreator.getHostName(this.host));    }  }  sb.append("[").append(this.port).append("]");  return sb.toString();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.EQUALITY_OP___EQUALS_OP_1:    getEqualsOp_1().clear();  return;case UmplePackage.EQUALITY_OP___NOTEQUALS_OP_1:getNotequalsOp_1().clear();return;}super.eUnset(featureID);}  }
class C{  public final MutableDouble2D multiply(MutableDouble2D other,final double val){  x=other.x * val;  y=other.y * val;  return this;}  }
class C{  public Graph search(Node target){  return search(Collections.singletonList(target));}  }
class C{  public int color(Context ctx){  if (mColorInt == 0 && mColorRes != -1) {    mColorInt=ContextCompat.getColor(ctx,mColorRes);  }  return mColorInt;}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public static void invoke(Interpreter env,CallStack callstack){  String dir=".";  invoke(env,callstack,dir);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.097 -0400",hash_original_method="34031FA5246C01FDBDC22F3BF54C63BE",hash_generated_method="7F37478C90DCE3ED0902A035D726625F") synchronized void finishDisable(){  for (  String address : mBondState.listInState(BluetoothDevice.BOND_BONDING)) {    mBondState.setBondState(address,BluetoothDevice.BOND_NONE,BluetoothDevice.UNBOND_REASON_AUTH_CANCELED);  }  for (  String address : mBondState.listInState(BluetoothDevice.BOND_BONDED)) {    removeProfileState(address);  }  Intent intent=new Intent(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);  intent.putExtra(BluetoothAdapter.EXTRA_SCAN_MODE,BluetoothAdapter.SCAN_MODE_NONE);  mContext.sendBroadcast(intent,BLUETOOTH_PERM);}  }
class C{  private void displayRemoteContact(){  TextView fromTextView=(TextView)findViewById(R.id.remote);  String displayName=RcsContactUtil.getInstance(this).getDisplayName(mContact);  fromTextView.setText(displayName);}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  private static X509Certificate generateCertificate(String dn,int days,String applicationUri,PublicKey publicKey,PrivateKey privateKey,org.opcfoundation.ua.transport.security.KeyPair issuerKeys,String... hostNames) throws IOException, GeneralSecurityException {  Date startDate=getCertificateStartDate();  Date endDate=getCertificateEndDate(days);  BigInteger sn=BigInteger.valueOf(System.currentTimeMillis());  return getCertificateProvider().generateCertificate(dn,publicKey,privateKey,issuerKeys,startDate,endDate,sn,applicationUri,hostNames);}  }
class C{  @Override public void endWindow(){  if ((low != null) && (high != null)) {    HighLow tuple=new HighLow(getValue(high.doubleValue()),getValue(low.doubleValue()));    range.emit(tuple);  }  high=null;  low=null;}  }
class C{  public NSObject objectForKey(String key){  return dict.get(key);}  }
class C{  public String displayName(){  return displayName;}  }
class C{  public final short shortValue(){  return (short)doubleValue();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.STRING_LITERAL__VALUE:    return getValue();case N4JSPackage.STRING_LITERAL__RAW_VALUE:  return getRawValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public AbstractBusyThread(long minidleSleep,long minbusySleep){  super();  this.idleSleep=minidleSleep;  this.busySleep=minbusySleep;  this.idlePause=minidleSleep;  this.busyPause=minbusySleep;}  }
class C{  public boolean isCreateCounter(){  Object oo=get_Value(COLUMNNAME_IsCreateCounter);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ICalDate(Date date,DateTimeComponents rawComponents,boolean hasTime){  if (!hasTime) {    Calendar c=Calendar.getInstance();    c.setTime(date);    c.set(Calendar.HOUR_OF_DAY,0);    c.set(Calendar.MINUTE,0);    c.set(Calendar.SECOND,0);    c.set(Calendar.MILLISECOND,0);    date=c.getTime();  }  setTime(date.getTime());  this.rawComponents=rawComponents;  this.hasTime=hasTime;}  }
class C{  public void killAll(){  for (int i=0, n=objects.size(); i < n; i++) {    BaseTween<?> obj=objects.get(i);    obj.kill();  }}  }
class C{  public static void shuffle(int[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public static PreparedBlock handleBlockCreate(String path,Consumer<String> messageHandler,Terminal terminal,boolean overwrite){  PreparedBlock ret=new PreparedBlock();  FSBlock block=terminal.getComputer().getBlock(path,terminal.getCurrentDirectory());  if (block != null && !overwrite) {    if (messageHandler != null)     messageHandler.accept(path + ": file or folder exists");    ret.err=BlockPrepareError.EXISTS;    return ret;  }  block=terminal.getComputer().getBlock("",terminal.getCurrentDirectory());  if (!(block instanceof FSFolder)) {    if (messageHandler != null)     messageHandler.accept(path + ": invalid current directory");    ret.err=BlockPrepareError.INVALID_CURRENT_DIR;    return ret;  }  String[] arr=FSBlock.section(path,"/");  String f=Arrays.asList(arr).stream().limit(arr.length == 0 ? 0 : arr.length - 1).collect(Collectors.joining("/"));  if (f.trim().isEmpty() && path.startsWith("/"))   f="/";  String n=Arrays.asList(arr).stream().filter(null).reduce(null).get();  if (!FSBlock.allowedBlockName(n)) {    if (messageHandler != null)     messageHandler.accept(f.trim() + ": invalid block name");    ret.err=BlockPrepareError.INVALID_NAME;    return ret;  }  FSBlock folder=terminal.getComputer().getBlock(f,terminal.getCurrentDirectory());  if (folder == null) {    if (messageHandler != null)     messageHandler.accept(f.trim() + ": does not exist");    ret.err=BlockPrepareError.PARENT_NOT_EXISTS;    return ret;  }  if (!(folder instanceof FSFolder)) {    if (messageHandler != null)     messageHandler.accept(f.trim() + ": not a folder");    ret.err=BlockPrepareError.PARENT_NOT_FOLDER;    return ret;  }  ret.blockParent=(FSFolder)folder;  ret.blockName=n;  return ret;}  }
class C{  public static void addTime(int sec){  TestTime.addTime(sec,TimeUnit.SECONDS);}  }
class C{  public int supportsUpdatableView(){  return SyncProvider.NONUPDATABLE_VIEW_SYNC;}  }
class C{  @Override public boolean isTableLoaded(){  return getDelegate().isTableLoaded();}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  public KafkaTopicWebSocketEmitter(final Channel websocketChannel,final int messageQueueCapacity,final ExecutorService executorService,final String zookeeperConnect,final String groupId,final String topicId){  this.websocketChannel=websocketChannel;  this.messages=new OneToOneConcurrentArrayQueue3<byte[]>(messageQueueCapacity);  this.messageWaitStrategy=new BlockingWaitStrategy();  this.executorService=executorService;  this.zookeeperConnect=zookeeperConnect;  this.groupId=groupId;  this.topicId=topicId;  if (logger.isDebugEnabled())   logger.debug("kafka topic to websocket emitter initialized [topic=" + topicId + ", group="+ groupId+ ", zkConnect="+ zookeeperConnect+ "]");}  }
class C{  public Object readObject() throws IOException {  int tag=read();switch (tag) {case 'N':    return null;case 'T':  return Boolean.valueOf(true);case 'F':return Boolean.valueOf(false);case 'I':return Integer.valueOf(parseInt());case 'L':return Long.valueOf(parseLong());case 'D':return Double.valueOf(parseDouble());case 'd':return new Date(parseLong());case 'x':case 'X':{_isLastChunk=tag == 'X';_chunkLength=(read() << 8) + read();return parseXML();}case 's':case 'S':{_isLastChunk=tag == 'S';_chunkLength=(read() << 8) + read();int data;_sbuf.setLength(0);while ((data=parseChar()) >= 0) _sbuf.append((char)data);return _sbuf.toString();}case 'b':case 'B':{_isLastChunk=tag == 'B';_chunkLength=(read() << 8) + read();int data;ByteArrayOutputStream bos=new ByteArrayOutputStream();while ((data=parseByte()) >= 0) bos.write(data);return bos.toByteArray();}case 'V':{String type=readType();int length=readLength();return _serializerFactory.readList(this,length,type);}case 'M':{String type=readType();return _serializerFactory.readMap(this,type);}case 'R':{int ref=parseInt();return _refs.get(ref);}case 'r':{String type=readType();String url=readString();return resolveRemote(type,url);}default :throw error("unknown code for readObject at " + codeName(tag));}}  }
class C{  public Matrix(double vals[],int m){  this.rows=m;  cols=(m != 0 ? vals.length / m : 0);  if (m * cols != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  data=new double[m][cols];  for (int i=0; i < m; i++) {    for (int j=0; j < cols; j++) {      data[i][j]=vals[i + j * m];    }  }}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createGroup(@Auth User user,@Valid CreateGroupRequest request){  logger.info("User '{}' creating group.",user);  if (groupDAO.getGroup(request.name).isPresent()) {    throw new BadRequestException("Group already exists.");  }  long groupId=groupDAO.createGroup(request.name,user.getName(),nullToEmpty(request.description),request.metadata);  URI uri=UriBuilder.fromResource(GroupsResource.class).build(groupId);  Response response=Response.created(uri).entity(groupDetailResponseFromId(groupId)).build();  if (response.getStatus() == HttpStatus.SC_CREATED) {    Map<String,String> extraInfo=new HashMap<>();    if (request.description != null) {      extraInfo.put("description",request.description);    }    if (request.metadata != null) {      extraInfo.put("metadata",request.metadata.toString());    }    auditLog.recordEvent(new Event(Instant.now(),EventTag.GROUP_CREATE,user.getName(),request.name,extraInfo));  }  return response;}  }
class C{  private void obtainStyledAttributes(@Nullable final AttributeSet attributeSet){  TypedArray typedArray=getContext().obtainStyledAttributes(attributeSet,R.styleable.Spinner);  try {    obtainHint(typedArray);    obtainHintColor(typedArray);    obtainSpinnerStyledAttributes(typedArray);  }  finally {    typedArray.recycle();  }}  }
class C{  public static ValueLobDb createTempBlob(InputStream in,long length){  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    byte[] buff;    if (len >= Integer.MAX_VALUE) {      buff=IOUtils.readBytesAndClose(in,-1);      len=buff.length;    } else {      buff=DataUtils.newBytes(len);      len=IOUtils.readFully(in,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=DataUtils.newBytes(len);      System.arraycopy(buff,0,small,0,len);      return ValueLobDb.createSmallLob(Value.BLOB,small,small.length);    }    ValueLobDb lob=new ValueLobDb(buff,len,in,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public EqualsBuilder append(double lhs,double rhs){  if (isEquals == false) {    return this;  }  return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));}  }
class C{  public static void returnValue(int value,String className,String methodName){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  tracer.trace.returnValue(className,methodName,value);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.161 -0500",hash_original_method="B8BD2BCA50B2996F91FE0AB13C346E57",hash_generated_method="F019354419CB41B8F0204A191CC95BA8") public synchronized void addError(Test test,Throwable t){  fErrors.addElement(new TestFailure(test,t));  for (Enumeration e=cloneListeners().elements(); e.hasMoreElements(); ) {    ((TestListener)e.nextElement()).addError(test,t);  }}  }
class C{  public Matrix4x3d rotateYXZ(double angleY,double angleX,double angleZ){  return rotateYXZ(angleY,angleX,angleZ,this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetattributenode.class,args);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public double variance(){  double mu=mean();  double devsum=0;  double wsum=0;  int size=values.size();  for (int i=0; i < size; i++) {    double dev=values.get(i) - mu;    devsum+=dev * dev * weights.get(i);    wsum+=weights.get(i);  }  return devsum / wsum;}  }
class C{  private void removeAllRaysAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.rayFolder.removeAll.warning"),Messages.getString("menu.context.rayFolder.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getRays().clear();    }    this.rayFolder.removeAllChildren();    this.model.reload(this.rayFolder);  }}  }
class C{  @Override public void trim(){}  }
class C{  public static Spacing createSpacing(int minSpaces,int maxSpaces,int minLineFeeds,boolean keepLineBreaks,int keepBlankLines,int prefLineFeeds){  return myFactory.createSpacing(minSpaces,maxSpaces,minLineFeeds,keepLineBreaks,keepBlankLines,prefLineFeeds);}  }
class C{  protected void sendTestMessage(SerialMessage m,SerialListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  @Deprecated public static Collection<String> oneOrMany(final NamedList args,final String key){  List<String> result=new ArrayList<>(args.size() / 2);  final String err="init arg '" + key + "' must be a string "+ "(ie: 'str'), or an array (ie: 'arr') containing strings; found: ";  for (Object o=args.remove(key); null != o; o=args.remove(key)) {    if (o instanceof String) {      result.add((String)o);      continue;    }    if (o instanceof Object[]) {      o=Arrays.asList((Object[])o);    }    if (o instanceof Collection) {      for (      Object item : (Collection)o) {        if (!(item instanceof String)) {          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,err + item.getClass());        }        result.add((String)item);      }      continue;    }    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,err + o.getClass());  }  return result;}  }
class C{  public AnonymousClassDeclaration newAnonymousClassDeclaration(){  AnonymousClassDeclaration result=new AnonymousClassDeclaration(this);  return result;}  }
class C{  public Builder linkTo(int eventNumber,String stream){  checkArgument(!isNullOrEmpty(stream),"stream");  return type(SystemEventType.LINK_TO.value).data(eventNumber + "@" + stream);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void lock(){}  }
class C{  void checkTransformation(double x,double y,AffineTransformation trans,double xp,double yp){  Coordinate p=new Coordinate(x,y);  Coordinate p2=new Coordinate();  trans.transform(p,p2);  assertEquals(xp,p2.x,.00005);  assertEquals(yp,p2.y,.00005);  try {    AffineTransformation invTrans=trans.getInverse();    Coordinate pInv=new Coordinate();    invTrans.transform(p2,pInv);    assertEquals(x,pInv.x,.00005);    assertEquals(y,pInv.y,.00005);    double det=trans.getDeterminant();    double detInv=invTrans.getDeterminant();    assertEquals(det,1.0 / detInv,.00005);  } catch (  NoninvertibleTransformationException ex) {  }}  }
class C{  public java.lang.StringBuilder append(char c){  return null;}  }
class C{  public void revert(){  newContents=null;}  }
class C{  public String[] match(String value){  if (value == null) {    return null;  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      String[] groups=new String[count];      for (int j=0; j < count; j++) {        groups[j]=matcher.group(j + 1);      }      return groups;    }  }  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void writePostContent(HttpURLConnection connection,String postContent) throws Exception {  connection.setRequestMethod("POST");  connection.addRequestProperty("Content-Type","application/xml; charset=utf-8");  connection.setDoOutput(true);  connection.setDoInput(true);  connection.setAllowUserInteraction(false);  DataOutputStream dstream=null;  try {    connection.connect();    dstream=new DataOutputStream(connection.getOutputStream());    dstream.writeBytes(postContent);    dstream.flush();  }  finally {    if (dstream != null) {      try {        dstream.close();      } catch (      Exception ex) {        _log.error("Exception while closing the stream." + " Exception: " + ex,"WebClient._writePostContent()");      }    }  }}  }
class C{  protected void encodeEndGroup(FacesContext context,UISelectOne radio,Group group) throws IOException {  rendererParamsNotNull(context,radio);  if (!shouldEncode(radio)) {    return;  }  SelectItem currentItem=RenderKitUtils.getSelectItems(context,radio).next();  String name=group.getClientName();  String clientId=radio.getClientId(context);  Object itemValue=currentItem.getValue();  Converter<?> converter=radio.getConverter();  boolean checked=isChecked(context,radio,itemValue);  boolean disabled=Util.componentIsDisabled(radio);  ResponseWriter writer=context.getResponseWriter();  assert (writer != null);  renderInput(context,writer,radio,clientId,itemValue,converter,checked,disabled,group);  if (currentItem.getLabel() != null) {    renderLabel(writer,radio,clientId,currentItem,new OptionComponentInfo(radio));  }}  }
class C{  public Vector3f scaleAdd(float scalar,Vector3f mult,Vector3f add){  this.x=mult.x * scalar + add.x;  this.y=mult.y * scalar + add.y;  this.z=mult.z * scalar + add.z;  return this;}  }
