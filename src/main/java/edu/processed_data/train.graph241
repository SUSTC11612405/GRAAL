class C{  public boolean isRejected(){  return rejected;}  }
class C{  public long size(){  return f.length();}  }
class C{  private static boolean parseOptionalModifier(PsiBuilder builder,GroovyParser parser){  Set<IElementType> modSet=new HashSet<IElementType>();  PsiBuilder.Marker marker=builder.mark();  boolean hasModifiers=false;  while (builder.getTokenType() == GroovyTokenTypes.kFINAL || builder.getTokenType() == GroovyTokenTypes.kDEF || builder.getTokenType() == GroovyTokenTypes.mAT) {    hasModifiers=true;    if (GroovyTokenTypes.kFINAL.equals(builder.getTokenType())) {      if (modSet.contains(GroovyTokenTypes.kFINAL)) {        ParserUtils.wrapError(builder,GroovyBundle.message("duplicate.modifier",PsiModifier.FINAL));      } else {        builder.advanceLexer();        modSet.add(GroovyTokenTypes.kFINAL);      }      ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);    } else     if (GroovyTokenTypes.kDEF.equals(builder.getTokenType())) {      if (modSet.contains(GroovyTokenTypes.kDEF)) {        ParserUtils.wrapError(builder,GroovyBundle.message("duplicate.modifier",GrModifier.DEF));      } else {        builder.advanceLexer();        modSet.add(GroovyTokenTypes.kDEF);      }      ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);    } else {      if (!Annotation.parse(builder,parser)) {        ParserUtils.wrapError(builder,GroovyBundle.message("annotation.expected"));      }      ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);    }  }  marker.done(GroovyElementTypes.MODIFIERS);  return hasModifiers;}  }
class C{  @PUT @Path("/ostenants/sync") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public Response synchronizeOpenstackTenants(){  List<KeystoneTenant> openstackTenantsList=listOpenstackTenants().getOpenstackTenants();  List<OSTenant> coprhdOsTenantsList=getOsTenantsFromCoprhdDb();  for (Iterator<KeystoneTenant> i=openstackTenantsList.iterator(); i.hasNext(); ) {    KeystoneTenant tenant=i.next();    for (Iterator<OSTenant> j=coprhdOsTenantsList.iterator(); j.hasNext(); ) {      OSTenant osTenant=j.next();      if (osTenant.getOsId().equals(tenant.getId())) {        j.remove();        i.remove();      }    }  }  for (  OSTenant osTenant : coprhdOsTenantsList) {    _dbClient.removeObject(osTenant);  }  for (  KeystoneTenant keystoneTenant : openstackTenantsList) {    OSTenant tenant=_keystoneUtils.mapToOsTenant(keystoneTenant);    tenant.setId(URIUtil.createId(OSTenant.class));    _dbClient.createObject(tenant);  }  return Response.ok().build();}  }
class C{  public static PrintingStatus createPrintingStatus(Component parent,PrinterJob job){  return new PrintingStatus(parent,job);}  }
class C{  public Boolean isHostAccessManagerSupported(){  return hostAccessManagerSupported;}  }
class C{  private static int system_depth(Stack<SootMethod> stack){  for (int ii=stack.size() - 1; ii > 0; ii--) {    SootMethod m=stack.get(ii);    if (!is_system(m))     return stack.size() - ii;  }  return stack.size();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public int compareTo(Object object){  if (object instanceof WindDataItem) {    WindDataItem item=(WindDataItem)object;    if (this.x.doubleValue() > item.x.doubleValue()) {      return 1;    } else     if (this.x.equals(item.x)) {      return 0;    } else {      return -1;    }  } else {    throw new ClassCastException("WindDataItem.compareTo(error)");  }}  }
class C{  public static <T>ArrayList<T> list(Enumeration<T> e){  ArrayList<T> l=new ArrayList<>();  while (e.hasMoreElements())   l.add(e.nextElement());  return l;}  }
class C{  protected boolean checkStorageFileSystemExistsInDB(String nativeGuid) throws IOException {  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemNativeGUIdConstraint(nativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI fileSystemtURI=iter.next();    FileShare fileShare=_dbClient.queryObject(FileShare.class,fileSystemtURI);    if (fileShare != null && !fileShare.getInactive()) {      return true;    }  }  return false;}  }
class C{  public void disableDebug(){  beacon.disableDebug();}  }
class C{  public void test_getPeerHost() throws NoSuchAlgorithmException {  SSLEngine e=getEngine();  assertNull(e.getPeerHost());  e=getEngine("www.fortify.net",80);  assertEquals("Incorrect host name","www.fortify.net",e.getPeerHost());}  }
class C{  public SurroundWithLineSelection(){  super(GlobalTemplateVariables.LineSelection.NAME,JavaTemplateMessages.CompilationUnitContextType_variable_description_line_selection);}  }
class C{  public void resetAgents(){  agents.clear();  schedule.clear();  actions=new int[]{Agent.NOTHING,Agent.NOTHING};  pacs=new Pac[2];  if (pacs.length > 1)   pacs[1]=new Pac(this,1);  pacs[0]=new Pac(this,0);  Blinky blinky=new Blinky(this);  Pinky pinky=new Pinky(this);  Inky inky=new Inky(this,blinky);  Clyde clyde=new Clyde(this);  frightenGhosts=false;}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  int nextUid(){  return m_docOrderCount++;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSkips the determination of sizes (train/test/classifier)\n" + "\t(default: sizes are determined)","no-size",0,"-no-size"));  newVector.addElement(new Option("\tThe full class name of the classifier.\n" + "\teg: weka.classifiers.bayes.NaiveBayes","W",1,"-W <class name>"));  if ((m_Template != null) && (m_Template instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to classifier " + m_Template.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_Template).listOptions()));  }  return newVector.elements();}  }
class C{  public void update(long nextVal){  cur=(nextVal + i * cur) / (i + 1);  i++;}  }
class C{  protected void addToBottomBox(Component comp){  bottomBox.add(Box.createHorizontalStrut(bottomStrutWidth),bottomBoxIndex);  ++bottomBoxIndex;  bottomBox.add(comp,bottomBoxIndex);  ++bottomBoxIndex;}  }
class C{  @Override public boolean unqueueAudioBuffers(){  if (!_initialised) {    return false;  }  int[] num_processed=new int[1];  al.alGetSourcei(_source[0],AL.AL_BUFFERS_PROCESSED,num_processed,0);  if (JoalAudioFactory.checkALError()) {    log.warn("Error getting # processed buffers from  JoalSource (" + this.getSystemName() + ")");    return false;  }  if (num_processed[0] > 0) {    int[] bids=new int[num_processed[0]];    al.alSourceUnqueueBuffers(_source[0],num_processed[0],bids,0);    if (JoalAudioFactory.checkALError()) {      log.warn("Error removing " + num_processed[0] + " buffers from  JoalSource ("+ this.getSystemName()+ ")");      return false;    }  }  if (log.isDebugEnabled()) {    log.debug("Removed " + num_processed[0] + " buffers from JoalAudioSource ("+ this.getSystemName()+ ")");  }  if (numQueuedBuffers() == 0) {    return false;  } else {    return true;  }}  }
class C{  public static String replace(final String original,final char from,final char to){  final StringBuffer result=new StringBuffer(original.length());  int at, saved=0;  do {    at=original.indexOf(from);    if (at >= 0) {      result.append(original.substring(0,at));      result.append(to);    } else {      result.append(original.substring(saved));    }    saved=at;  } while (at >= 0);  return result.toString();}  }
class C{  public static boolean match(CharSequence string,CharSequence pattern){  return match(string,pattern,0,0);}  }
class C{  protected Anonymous_activity_2_Impl(){  super();}  }
class C{  protected void processCellWithNoAttributes(final Table table){  table.add();}  }
class C{  public FlowLayout(int orientation,int valign){  this.orientation=orientation;  this.valign=valign;}  }
class C{  public final int endLine(){  return this.eLine;}  }
class C{  public static void preinit(ProfilerSection profiler){  log=new Logger("Toast|Loader",Logger.ATTR_DEFAULT);  if (search)   loadDevEnvironment(profiler);  isCorePhase=true;  loadCandidates(profiler.section("CoreJava"));  parseCoreEntries(profiler.section("CoreJava"));}  }
class C{  public void clearContentType(){  attributes.remove(LinkFormat.CONTENT_TYPE);}  }
class C{  private RootDynamicClassLoader(ClassLoader parent){  super(parent,false,true);  if (parent instanceof DynamicClassLoader) {    throw new IllegalStateException();  }}  }
class C{  private void createOpenBuyPosition(Money price,Integer quantity,String action,boolean fillOpenPosition) throws StrategyRuleException, PersistentModelException {  if (!strategyProxy.getTradestrategy().getTradeOrders().isEmpty()) {    tradePersistentModel.removeTradestrategyTradeOrders(strategyProxy.getTradestrategy());  }  TradeOrder tradeOrder=this.strategyProxy.createOrder(tradestrategy.getContract(),action,OrderType.STPLMT,price,price.subtract(new Money(0.2)),quantity,null,null,TriggerMethod.DEFAULT,OverrideConstraints.YES,TimeInForce.DAY,true,true,null,null,null,null,null,null);  if (fillOpenPosition) {    String side=(Action.BUY.equals(tradeOrder.getAction()) ? Side.BOT : Side.SLD);    assertNotNull("1",tradeOrder);    TradeOrderfill execution=new TradeOrderfill();    execution.setTradeOrder(tradeOrder);    execution.setTime(TradingCalendar.getDateTimeNowMarketTimeZone());    execution.setExchange(this.tradestrategy.getContract().getExchange());    execution.setSide(side);    execution.setQuantity(tradeOrder.getQuantity());    execution.setAveragePrice(price.getBigDecimalValue());    execution.setPrice(price.getBigDecimalValue());    execution.setCumulativeQuantity(tradeOrder.getQuantity());    ((BackTestBrokerModel)m_brokerModel).execDetails(tradeOrder.getOrderKey(),this.tradestrategy.getContract(),execution);    this.reFreshPositionOrders();    assertNotNull("2",strategyProxy.getOpenPositionOrder());  } else {    ((BackTestBrokerModel)m_brokerModel).orderStatus(tradeOrder.getOrderKey(),OrderStatus.SUBMITTED,0,0,0,0,0,0,tradeOrder.getClientId(),tradeOrder.getWhyHeld());  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  protected void initFileLocation(){  PathService pathService=CarbonCommonFactory.getPathService();  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(columnIdentifier,this.hdfsStorePath,carbonTableIdentifier);  this.columnDictionaryMetadataFilePath=carbonTablePath.getDictionaryMetaFilePath(columnIdentifier.getColumnId());}  }
class C{  public LauncherScroller(Context context){  this(context,null);}  }
class C{  static byte[] passwordHashStage2(byte[] hashedPassword,byte[] salt) throws NoSuchAlgorithmException {  MessageDigest md=MessageDigest.getInstance("SHA-1");  md.update(salt,0,4);  md.update(hashedPassword,0,SHA1_HASH_SIZE);  return md.digest();}  }
class C{  public final AlertDialog shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  public static Date round(final Object date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (date instanceof Date) {    return round((Date)date,field);  } else   if (date instanceof Calendar) {    return round((Calendar)date,field).getTime();  } else {    throw new ClassCastException("Could not round " + date);  }}  }
class C{  public String sql_insert(String vendorName,String catalogName,String schemaName,String tableName,ArrayList<String> columnNames,ArrayList<String> columnValues){  ArrayList<String> translatedColumnNames=null;  if (columnNames != null) {    translatedColumnNames=new ArrayList<String>();    for (    String columnName : columnNames) {      translatedColumnNames.add(normalizeColumnName(vendorName,columnName));    }  }  if (columnValues == null) {    columnValues=new ArrayList<String>();    for (int i=0; i < columnNames.size(); i++) {      columnValues.add("?");    }  }  return m_interfaces.get(getDBVendorID(vendorName)).sql_insert(catalogName,schemaName,tableName,translatedColumnNames,columnValues);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.909 -0500",hash_original_method="99D6F1BE9B07C777E93D0137AC6E1BBF",hash_generated_method="9E441756E06B451610AEEC84CCF0ADE2") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] md5(String data){  return md5(getBytesUtf8(data));}  }
class C{  public static void main(String[] args) throws Exception {  System.setProperty(SystemProperties.CONFIGURATION_PATH,"../signer/src/test/resources/globalconf");  try {    ManagementRequestClient.getInstance().start();    String userId="userid";    ClientId sender=ClientId.create("EE","BUSINESS","consumer");    ClientId receiver=GlobalConf.getManagementRequestService();    ManagementRequestSender requestSender=new ManagementRequestSender(userId,sender,receiver);    sendAuthCertRegRequest(requestSender);  } catch (  CodedException e) {    LOG.error("Error when sending message",e);    LOG.error("Detail: {}",e.getFaultDetail());  }catch (  Exception e) {    LOG.error("Error when sending message",e);  } finally {    ManagementRequestClient.getInstance().stop();  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  @Override public void changed(final Changes property,final boolean value){switch (property) {case BACKGROUND:    setBackground(getData().getBackgroundColor());  break;default :;}}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean visit(QualifiedName node){  return true;}  }
class C{  public MultisigAggregateModificationTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.MULTISIG_AGGREGATE_MODIFICATION,options,deserializer);  this.cosignatoryModifications=deserializer.readObjectArray("modifications",null);  final ExtendedData extendedData=new ExtendedData();  SERIALIZATION_EXTENSIONS.deserialize(deserializer,this.getEntityVersion(),extendedData);  this.minCosignatoriesModification=extendedData.minCosignatoriesModification;  VALIDATION_EXTENSIONS.validate(this);  Collections.sort(this.cosignatoryModifications);}  }
class C{  static boolean isRegistered(final Object value){  final Set<IDKey> registry=getRegistry();  return registry != null && registry.contains(new IDKey(value));}  }
class C{  public WekaSerializedModel(List<Attribute> attributes,Classifier trainedClassifier,String bipartitionThreshold,List<String> editFeatureExtractors,List<String> allLabels,List<Object> pipelineParameters,Map<String,FrequencyDistribution<String>> metaFiles){  this.attributes=attributes;  this.bipartitionThreshold=bipartitionThreshold;  this.editFeatureExtractors=editFeatureExtractors;  this.allClassLabels=allLabels;  this.pipelineParameters=pipelineParameters;  this.trainedClassifier=trainedClassifier;  this.metaFiles=metaFiles;}  }
class C{  private TypeUtils(){}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.VERSION_CONSTRAINT__EXCL_LOWER_BOUND:    return isExclLowerBound();case N4mfPackage.VERSION_CONSTRAINT__LOWER_VERSION:  return getLowerVersion();case N4mfPackage.VERSION_CONSTRAINT__EXCL_UPPER_BOUND:return isExclUpperBound();case N4mfPackage.VERSION_CONSTRAINT__UPPER_VERSION:return getUpperVersion();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + m_AD_Client_ID;  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_Order " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_Order " + "SET AD_Client_ID = COALESCE (AD_Client_ID,").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID,").append(m_AD_Org_ID).append(")," + " IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '" + "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Org=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName" + " AND d.DocBaseType='POO' AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PO DocType=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName" + " AND d.DocBaseType='SOO' AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set SO DocType=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_DocType_ID=(SELECT C_DocType_ID FROM C_DocType d WHERE d.Name=o.DocTypeName" + " AND d.DocBaseType IN ('SOO','POO') AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set DocType=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid DocTypeName, ' " + "WHERE C_DocType_ID IS NULL AND DocTypeName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid DocTypeName=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'" + " AND d.DocBaseType='POO' AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='N' AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PO Default DocType=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'" + " AND d.DocBaseType='SOO' AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx='Y' AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set SO Default DocType=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_DocType_ID=(SELECT MAX(C_DocType_ID) FROM C_DocType d WHERE d.IsDefault='Y'" + " AND d.DocBaseType IN('SOO','POO') AND o.AD_Client_ID=d.AD_Client_ID) "+ "WHERE C_DocType_ID IS NULL AND IsSOTrx IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default DocType=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No DocType, ' " + "WHERE C_DocType_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No DocType=" + no);  sql=new StringBuffer("UPDATE I_Order o SET IsSOTrx='Y' " + "WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='SOO' AND o.AD_Client_ID=d.AD_Client_ID)" + " AND C_DocType_ID IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsSOTrx=Y=" + no);  sql=new StringBuffer("UPDATE I_Order o SET IsSOTrx='N' " + "WHERE EXISTS (SELECT * FROM C_DocType d WHERE o.C_DocType_ID=d.C_DocType_ID AND d.DocBaseType='POO' AND o.AD_Client_ID=d.AD_Client_ID)" + " AND C_DocType_ID IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set IsSOTrx=N=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'" + " AND p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default Currency PriceList=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p WHERE p.IsDefault='Y'" + " AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default PriceList=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p " + " WHERE p.C_Currency_ID=o.C_Currency_ID AND p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Currency PriceList=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_PriceList_ID=(SELECT MAX(M_PriceList_ID) FROM M_PriceList p " + " WHERE p.IsSOPriceList=o.IsSOTrx AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL AND C_Currency_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PriceList=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No PriceList, ' " + "WHERE M_PriceList_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No PriceList=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_OrderSource_ID=(SELECT C_OrderSource_ID FROM C_OrderSource p" + " WHERE o.C_OrderSourceValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_OrderSource_ID IS NULL AND C_OrderSourceValue IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Order Source=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Not Found Order Source, ' " + "WHERE C_OrderSource_ID IS NULL AND C_OrderSourceValue IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No OrderSource=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_PaymentTerm_ID=(SELECT C_PaymentTerm_ID FROM C_PaymentTerm p" + " WHERE o.PaymentTermValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_PaymentTerm_ID IS NULL AND PaymentTermValue IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set PaymentTerm=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_PaymentTerm_ID=(SELECT MAX(C_PaymentTerm_ID) FROM C_PaymentTerm p" + " WHERE p.IsDefault='Y' AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_PaymentTerm_ID IS NULL AND o.PaymentTermValue IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default PaymentTerm=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No PaymentTerm, ' " + "WHERE C_PaymentTerm_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No PaymentTerm=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_Warehouse_ID=(SELECT MAX(M_Warehouse_ID) FROM M_Warehouse w" + " WHERE o.AD_Client_ID=w.AD_Client_ID AND o.AD_Org_ID=w.AD_Org_ID) "+ "WHERE M_Warehouse_ID IS NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set Warehouse=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_Warehouse_ID=(SELECT M_Warehouse_ID FROM M_Warehouse w" + " WHERE o.AD_Client_ID=w.AD_Client_ID) "+ "WHERE M_Warehouse_ID IS NULL"+ " AND EXISTS (SELECT AD_Client_ID FROM M_Warehouse w WHERE w.AD_Client_ID=o.AD_Client_ID GROUP BY AD_Client_ID HAVING COUNT(*)=1)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.fine("Set Only Client Warehouse=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Warehouse, ' " + "WHERE M_Warehouse_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Warehouse=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u" + " WHERE o.EMail=u.EMail AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) "+ "WHERE C_BPartner_ID IS NULL AND EMail IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP from EMail=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET (C_BPartner_ID,AD_User_ID)=(SELECT C_BPartner_ID,AD_User_ID FROM AD_User u" + " WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL) "+ "WHERE C_BPartner_ID IS NULL AND ContactName IS NOT NULL"+ " AND EXISTS (SELECT Name FROM AD_User u WHERE o.ContactName=u.Name AND o.AD_Client_ID=u.AD_Client_ID AND u.C_BPartner_ID IS NOT NULL GROUP BY Name HAVING COUNT(*)=1)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP from ContactName=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_BPartner_ID=(SELECT MAX(C_BPartner_ID) FROM C_BPartner bp" + " WHERE o.BPartnerValue=bp.Value AND o.AD_Client_ID=bp.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP from Value=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_BPartner_ID=(SELECT C_BPartnerCashTrx_ID FROM AD_ClientInfo c" + " WHERE o.AD_Client_ID=c.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartnerValue IS NULL AND Name IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Default BP=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET (BillTo_ID,C_BPartner_Location_ID)=(SELECT C_BPartner_Location_ID,C_BPartner_Location_ID" + " FROM C_BPartner_Location bpl INNER JOIN C_Location l ON (bpl.C_Location_ID=l.C_Location_ID)"+ " WHERE o.C_BPartner_ID=bpl.C_BPartner_ID AND bpl.AD_Client_ID=o.AD_Client_ID"+ " AND DUMP(o.Address1)=DUMP(l.Address1) AND DUMP(o.Address2)=DUMP(l.Address2)"+ " AND DUMP(o.City)=DUMP(l.City) AND DUMP(o.Postal)=DUMP(l.Postal)"+ " AND o.C_Region_ID=l.C_Region_ID AND o.C_Country_ID=l.C_Country_ID) "+ "WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Found Location=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET BillTo_ID=(SELECT MAX(C_BPartner_Location_ID) FROM C_BPartner_Location l" + " WHERE l.C_BPartner_ID=o.C_BPartner_ID AND o.AD_Client_ID=l.AD_Client_ID"+ " AND ((l.IsBillTo='Y' AND o.IsSOTrx='Y') OR (l.IsPayFrom='Y' AND o.IsSOTrx='N'))"+ ") "+ "WHERE C_BPartner_ID IS NOT NULL AND BillTo_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP BillTo from BP=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_BPartner_Location_ID=(SELECT MAX(C_BPartner_Location_ID) FROM C_BPartner_Location l" + " WHERE l.C_BPartner_ID=o.C_BPartner_ID AND o.AD_Client_ID=l.AD_Client_ID"+ " AND ((l.IsShipTo='Y' AND o.IsSOTrx='Y') OR o.IsSOTrx='N')"+ ") "+ "WHERE C_BPartner_ID IS NOT NULL AND C_BPartner_Location_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP Location from BP=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No BP Location, ' " + "WHERE C_BPartner_ID IS NOT NULL AND (BillTo_ID IS NULL OR C_BPartner_Location_ID IS NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No BP Location=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_Country_ID=(SELECT C_Country_ID FROM C_Country c" + " WHERE o.CountryCode=c.CountryCode AND c.AD_Client_ID IN (0, o.AD_Client_ID)) "+ "WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL AND CountryCode IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Country=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Country, ' " + "WHERE C_BPartner_ID IS NULL AND C_Country_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Country=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "Set RegionName=(SELECT MAX(Name) FROM C_Region r" + " WHERE r.IsDefault='Y' AND r.C_Country_ID=o.C_Country_ID"+ " AND r.AD_Client_ID IN (0, o.AD_Client_ID)) "+ "WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Region Default=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "Set C_Region_ID=(SELECT C_Region_ID FROM C_Region r" + " WHERE r.Name=o.RegionName AND r.C_Country_ID=o.C_Country_ID"+ " AND r.AD_Client_ID IN (0, o.AD_Client_ID)) "+ "WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL AND RegionName IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Region=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Region, ' " + "WHERE C_BPartner_ID IS NULL AND C_Region_ID IS NULL "+ " AND EXISTS (SELECT * FROM C_Country c"+ " WHERE c.C_Country_ID=o.C_Country_ID AND c.HasRegion='Y')"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Region=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE o.ProductValue=p.Value AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from Value=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE o.UPC=p.UPC AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND UPC IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from UPC=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE o.SKU=p.SKU AND o.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND SKU IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product fom SKU=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Product, ' " + "WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL OR UPC IS NOT NULL OR SKU IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_Charge_ID=(SELECT C_Charge_ID FROM C_Charge c" + " WHERE o.ChargeName=c.Name AND o.AD_Client_ID=c.AD_Client_ID) "+ "WHERE C_Charge_ID IS NULL AND ChargeName IS NOT NULL AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Charge=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Charge, ' " + "WHERE C_Charge_ID IS NULL AND (ChargeName IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Charge=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Product and Charge, ' " + "WHERE M_Product_ID IS NOT NULL AND C_Charge_ID IS NOT NULL "+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product and Charge exclusive=" + no);  sql=new StringBuffer("UPDATE I_Order o " + "SET C_Tax_ID=(SELECT MAX(C_Tax_ID) FROM C_Tax t" + " WHERE o.TaxIndicator=t.TaxIndicator AND o.AD_Client_ID=t.AD_Client_ID) "+ "WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Tax=" + no);  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Tax, ' " + "WHERE C_Tax_ID IS NULL AND TaxIndicator IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Tax=" + no);  commitEx();  sql=new StringBuffer("SELECT * FROM I_Order " + "WHERE I_IsImported='N' AND C_BPartner_ID IS NULL").append(clientCheck);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      X_I_Order imp=new X_I_Order(getCtx(),rs,get_TrxName());      if (imp.getBPartnerValue() == null) {        if (imp.getEMail() != null)         imp.setBPartnerValue(imp.getEMail()); else         if (imp.getName() != null)         imp.setBPartnerValue(imp.getName()); else         continue;      }      if (imp.getName() == null) {        if (imp.getContactName() != null)         imp.setName(imp.getContactName()); else         imp.setName(imp.getBPartnerValue());      }      MBPartner bp=MBPartner.get(getCtx(),imp.getBPartnerValue());      if (bp == null) {        bp=new MBPartner(getCtx(),-1,get_TrxName());        bp.setClientOrg(imp.getAD_Client_ID(),imp.getAD_Org_ID());        bp.setValue(imp.getBPartnerValue());        bp.setName(imp.getName());        if (!bp.save())         continue;      }      imp.setC_BPartner_ID(bp.getC_BPartner_ID());      MBPartnerLocation bpl=null;      MBPartnerLocation[] bpls=bp.getLocations(true);      for (int i=0; bpl == null && i < bpls.length; i++) {        if (imp.getC_BPartner_Location_ID() == bpls[i].getC_BPartner_Location_ID())         bpl=bpls[i]; else         if (imp.getC_Location_ID() == bpls[i].getC_Location_ID())         bpl=bpls[i]; else         if (imp.getC_Location_ID() == 0) {          MLocation loc=bpls[i].getLocation(false);          if (loc.equals(imp.getC_Country_ID(),imp.getC_Region_ID(),imp.getPostal(),"",imp.getCity(),imp.getAddress1(),imp.getAddress2()))           bpl=bpls[i];        }      }      if (bpl == null) {        MLocation loc=new MLocation(getCtx(),0,get_TrxName());        loc.setAddress1(imp.getAddress1());        loc.setAddress2(imp.getAddress2());        loc.setCity(imp.getCity());        loc.setPostal(imp.getPostal());        if (imp.getC_Region_ID() != 0)         loc.setC_Region_ID(imp.getC_Region_ID());        loc.setC_Country_ID(imp.getC_Country_ID());        if (!loc.save())         continue;        bpl=new MBPartnerLocation(bp);        bpl.setC_Location_ID(loc.getC_Location_ID());        if (!bpl.save())         continue;      }      imp.setC_Location_ID(bpl.getC_Location_ID());      imp.setBillTo_ID(bpl.getC_BPartner_Location_ID());      imp.setC_BPartner_Location_ID(bpl.getC_BPartner_Location_ID());      if (imp.getContactName() != null || imp.getEMail() != null || imp.getPhone() != null) {        MUser[] users=bp.getContacts(true);        MUser user=null;        for (int i=0; user == null && i < users.length; i++) {          String name=users[i].getName();          if (name.equals(imp.getContactName()) || name.equals(imp.getName())) {            user=users[i];            imp.setAD_User_ID(user.getAD_User_ID());          }        }        if (user == null) {          user=new MUser(bp);          if (imp.getContactName() == null)           user.setName(imp.getName()); else           user.setName(imp.getContactName());          user.setEMail(imp.getEMail());          user.setPhone(imp.getPhone());          if (user.save())           imp.setAD_User_ID(user.getAD_User_ID());        }      }      imp.save();    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"BP - " + sql.toString(),e);  }  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No BPartner, ' " + "WHERE C_BPartner_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No BPartner=" + no);  commitEx();  int noInsert=0;  int noInsertLine=0;  sql=new StringBuffer("SELECT * FROM I_Order " + "WHERE I_IsImported='N'").append(clientCheck).append(" ORDER BY C_BPartner_ID, BillTo_ID, C_BPartner_Location_ID, I_Order_ID");  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    int oldC_BPartner_ID=0;    int oldBillTo_ID=0;    int oldC_BPartner_Location_ID=0;    String oldDocumentNo="";    MOrder order=null;    int lineNo=0;    while (rs.next()) {      X_I_Order imp=new X_I_Order(getCtx(),rs,get_TrxName());      String cmpDocumentNo=imp.getDocumentNo();      if (cmpDocumentNo == null)       cmpDocumentNo="";      if (oldC_BPartner_ID != imp.getC_BPartner_ID() || oldC_BPartner_Location_ID != imp.getC_BPartner_Location_ID() || oldBillTo_ID != imp.getBillTo_ID() || !oldDocumentNo.equals(cmpDocumentNo)) {        if (order != null) {          if (m_docAction != null && m_docAction.length() > 0) {            order.setDocAction(m_docAction);            order.processIt(m_docAction);          }          order.saveEx();        }        oldC_BPartner_ID=imp.getC_BPartner_ID();        oldC_BPartner_Location_ID=imp.getC_BPartner_Location_ID();        oldBillTo_ID=imp.getBillTo_ID();        oldDocumentNo=imp.getDocumentNo();        if (oldDocumentNo == null)         oldDocumentNo="";        order=new MOrder(getCtx(),0,get_TrxName());        order.setClientOrg(imp.getAD_Client_ID(),imp.getAD_Org_ID());        order.setC_DocTypeTarget_ID(imp.getC_DocType_ID());        order.setIsSOTrx(imp.isSOTrx());        if (imp.getDeliveryRule() != null) {          order.setDeliveryRule(imp.getDeliveryRule());        }        if (imp.getDocumentNo() != null)         order.setDocumentNo(imp.getDocumentNo());        order.setC_BPartner_ID(imp.getC_BPartner_ID());        order.setC_BPartner_Location_ID(imp.getC_BPartner_Location_ID());        if (imp.getAD_User_ID() != 0)         order.setAD_User_ID(imp.getAD_User_ID());        order.setBill_BPartner_ID(imp.getC_BPartner_ID());        order.setBill_Location_ID(imp.getBillTo_ID());        if (imp.getDescription() != null)         order.setDescription(imp.getDescription());        order.setC_PaymentTerm_ID(imp.getC_PaymentTerm_ID());        order.setM_PriceList_ID(imp.getM_PriceList_ID());        order.setM_Warehouse_ID(imp.getM_Warehouse_ID());        if (imp.getM_Shipper_ID() != 0)         order.setM_Shipper_ID(imp.getM_Shipper_ID());        if (imp.getSalesRep_ID() != 0)         order.setSalesRep_ID(imp.getSalesRep_ID());        if (order.getSalesRep_ID() == 0)         order.setSalesRep_ID(getAD_User_ID());        if (imp.getAD_OrgTrx_ID() != 0)         order.setAD_OrgTrx_ID(imp.getAD_OrgTrx_ID());        if (imp.getC_Activity_ID() != 0)         order.setC_Activity_ID(imp.getC_Activity_ID());        if (imp.getC_Campaign_ID() != 0)         order.setC_Campaign_ID(imp.getC_Campaign_ID());        if (imp.getC_Project_ID() != 0)         order.setC_Project_ID(imp.getC_Project_ID());        if (imp.getDateOrdered() != null)         order.setDateOrdered(imp.getDateOrdered());        if (imp.getDateAcct() != null)         order.setDateAcct(imp.getDateAcct());        if (imp.getC_OrderSource() != null)         order.setC_OrderSource_ID(imp.getC_OrderSource_ID());        order.saveEx();        noInsert++;        lineNo=10;      }      imp.setC_Order_ID(order.getC_Order_ID());      MOrderLine line=new MOrderLine(order);      line.setLine(lineNo);      lineNo+=10;      if (imp.getM_Product_ID() != 0)       line.setM_Product_ID(imp.getM_Product_ID(),true);      if (imp.getC_Charge_ID() != 0)       line.setC_Charge_ID(imp.getC_Charge_ID());      line.setQty(imp.getQtyOrdered());      line.setPrice();      if (imp.getPriceActual().compareTo(Env.ZERO) != 0)       line.setPrice(imp.getPriceActual());      if (imp.getC_Tax_ID() != 0)       line.setC_Tax_ID(imp.getC_Tax_ID()); else {        line.setTax();        imp.setC_Tax_ID(line.getC_Tax_ID());      }      if (imp.getFreightAmt() != null)       line.setFreightAmt(imp.getFreightAmt());      if (imp.getLineDescription() != null)       line.setDescription(imp.getLineDescription());      line.saveEx();      imp.setC_OrderLine_ID(line.getC_OrderLine_ID());      imp.setI_IsImported(true);      imp.setProcessed(true);      if (imp.save())       noInsertLine++;    }    if (order != null) {      if (m_docAction != null && m_docAction.length() > 0) {        order.setDocAction(m_docAction);        order.processIt(m_docAction);      }      order.saveEx();    }    rs.close();    pstmt.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"Order - " + sql.toString(),e);  }  sql=new StringBuffer("UPDATE I_Order " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@C_Order_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertLine),"@C_OrderLine_ID@: @Inserted@");  return "#" + noInsert + "/"+ noInsertLine;}  }
class C{  public void addManagedSourceVolumeToUpdate(Volume volume){  if (null == _managedSourceVolumesToUpdate) {    _managedSourceVolumesToUpdate=new ArrayList<Volume>();  }  _managedSourceVolumesToUpdate.add(volume);}  }
class C{  public void logError(Object message){  logInternal(ERROR,message,null);}  }
class C{  public final boolean isLocal(){  return false;}  }
class C{  public boolean hasHours(){  return super.hasAttribute(HOURS);}  }
class C{  public TourismInfo(){  super();}  }
class C{  public static String createNewMap(String title,String description,boolean isPublic,MapsClient mapsClient,String authToken) throws ParseException, HttpException, IOException {  String mapFeed=MapsClient.getMapsFeed();  MapsMapMetadata metaData=new MapsMapMetadata();  metaData.setTitle(title);  metaData.setDescription(description);  metaData.setSearchable(isPublic);  Entry entry=MapsGDataConverter.getMapEntryForMetadata(metaData);  Entry result=mapsClient.createEntry(mapFeed,authToken,entry);  if (result == null) {    Log.d(TAG,"No result when creating a new map");    return null;  }  return MapsClient.getMapIdFromMapEntryId(result.getId());}  }
class C{  @Override public void scan(ObjectReference obj){  driver.scan(obj);}  }
class C{  @NotNull public AsyncCallbackBuilder<T> unmarshaller(@NotNull Class<T> clazz){  this.clazz=clazz;  return this;}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,jo,null);  }  return jo;}  }
class C{  @Override protected void tearDown() throws Exception {  Runtime.getRuntime().gc();  Runtime.getRuntime().runFinalization();  Runtime.getRuntime().gc();  super.tearDown();}  }
class C{  public static ResultSet searchData(Connection conn,String text,int limit,int offset) throws SQLException {  return search(conn,text,limit,offset,true);}  }
class C{  public void clearResponseQueue(){  if (!this.isConnected()) {    throw new XBeeNotConnectedException();  }  parser.getResponseQueue().clear();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:    return getTypeRefAsString();case TypeRefsPackage.TYPE_ARGUMENT___CONTAINS_WILDCARDS:  return containsWildcards();case TypeRefsPackage.TYPE_ARGUMENT___CONTAINS_UNBOUND_TYPE_VARIABLES:return containsUnboundTypeVariables();}return super.eInvoke(operationID,arguments);}  }
class C{  public String storageClass(){  return storageClass;}  }
class C{  public void addRow(WorkspaceComponent component){  data.add(component);  fireTableStructureChanged();}  }
class C{  public boolean hasAttribute(String name,String namespace){  return this.findAttribute(name,namespace) != null;}  }
class C{  private List<EngineInfo> initEngines(SolrQueryRequest req,SolrQueryResponse rsp) throws SolrException {  List<EngineInfo> scriptEngines=new ArrayList<>();  ScriptEngineManager scriptEngineManager=new ScriptEngineManager(resourceLoader.getClassLoader());  scriptEngineManager.put("logger",log);  scriptEngineManager.put("req",req);  scriptEngineManager.put("rsp",rsp);  if (params != null) {    scriptEngineManager.put("params",params);  }  for (  ScriptFile scriptFile : scriptFiles) {    ScriptEngine engine=null;    if (null != engineName) {      engine=scriptEngineManager.getEngineByName(engineName);      if (engine == null) {        String details=getSupportedEngines(scriptEngineManager,false);        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"No ScriptEngine found by name: " + engineName + (null != details ? " -- supported names: " + details : ""));      }    } else {      engine=scriptEngineManager.getEngineByExtension(scriptFile.getExtension());      if (engine == null) {        String details=getSupportedEngines(scriptEngineManager,true);        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"No ScriptEngine found by file extension: " + scriptFile.getFileName() + (null != details ? " -- supported extensions: " + details : ""));      }    }    if (!(engine instanceof Invocable)) {      String msg="Engine " + ((null != engineName) ? engineName : ("for script " + scriptFile.getFileName())) + " does not support function invocation (via Invocable): "+ engine.getClass().toString()+ " ("+ engine.getFactory().getEngineName()+ ")";      log.error(msg);      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,msg);    }    if (scriptEngineCustomizer != null) {      scriptEngineCustomizer.customize(engine);    }    scriptEngines.add(new EngineInfo((Invocable)engine,scriptFile));    try {      Reader scriptSrc=scriptFile.openReader(resourceLoader);      try {        engine.eval(scriptSrc);      } catch (      ScriptException e) {        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to evaluate script: " + scriptFile.getFileName(),e);      } finally {        IOUtils.closeQuietly(scriptSrc);      }    } catch (    IOException ioe) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to evaluate script: " + scriptFile.getFileName(),ioe);    }  }  return scriptEngines;}  }
class C{  public static String[] nullToEmpty(String[] array){  if (array == null || array.length == 0) {    return EMPTY_STRING_ARRAY;  }  return array;}  }
class C{  public Composer rotation(long animDuration,float rotation,Ease ease){  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;  mTweenParameterList.add(new TweenParameter(beforeParam.x,beforeParam.y,beforeParam.alpha,beforeParam.scaleX,beforeParam.scaleY,rotation,animDuration,ease));  return this;}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>HeptFunction<T2,T3,T4,T5,T6,T7,T8,R> partial8(final T1 t1,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  public LinkedHashMap(int initialCapacity){  super(initialCapacity);  accessOrder=false;}  }
class C{  public int readByteArrayFully(byte[] buffer,int offset,int length) throws IOException {  int totalRead=0;  while (totalRead < length) {    int numRead=file.read(buffer,offset + totalRead,length - totalRead);    if (numRead < 0) {      break;    }    totalRead+=numRead;  }  return totalRead;}  }
class C{  public void add(JMenu submenu){  updateItemFont(submenu);}  }
class C{  public Pkcs12SignatureToken(char[] password,File pkcs12File){  this.password=password;  if (!pkcs12File.exists()) {    throw new DSSException("File Not Found " + pkcs12File.getAbsolutePath());  }  this.pkcs12File=pkcs12File;}  }
class C{  protected void serializeContentToken(ContentNode item,TagNode tagNode,Writer writer) throws IOException {  if (dontEscape(tagNode)) {    writer.write(item.getContent());  } else {    writer.write(escapeXml(item.getContent()));  }}  }
class C{  private double distance(Instance inst1,double[] inst2){  double distance=0.0;  for (int i=0; i < numDims; i++) {    double d=inst1.value(i) - inst2[i];    distance+=d * d;  }  return Math.sqrt(distance);}  }
class C{  public void copy(){  if (selectionStart != selectionEnd) {    Clipboard clipboard=getToolkit().getSystemClipboard();    String selection=getSelectedText();    int repeatCount=inputHandler.getRepeatCount();    StringBuffer buf=new StringBuffer();    for (int i=0; i < repeatCount; i++) {      buf.append(selection);    }    clipboard.setContents(new StringSelection(buf.toString()),null);  }}  }
class C{  public final void rotateToVector(Point2D vector){  double angle=Math.toDegrees(Math.atan2(vector.getY(),vector.getX()));  setValue(angle);}  }
class C{  public void putBoolean(boolean val) throws IOException {  write(DerValue.tag_Boolean);  putLength(1);  if (val) {    write(0xff);  } else {    write(0);  }}  }
class C{  public boolean parseBoolean() throws DecodeException {  return ((parseIntWithTag(ASN_BOOLEAN) == 0x00) ? false : true);}  }
class C{  private QueryTask queryForVm(String parentComputeLink,String instanceUuid){  QuerySpecification qs=new QuerySpecification();  qs.query.addBooleanClause(Query.Builder.create().addFieldClause(ComputeState.FIELD_NAME_ID,instanceUuid).build());  qs.query.addBooleanClause(Query.Builder.create().addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,parentComputeLink).build());  return QueryTask.create(qs).setDirect(true);}  }
class C{  private String printSFormat(final String x){  int nPrint=x.length();  int width=fieldWidth;  if (precisionSet && nPrint > precision) {    nPrint=precision;  }  if (!fieldWidthSet) {    width=nPrint;  }  int n=0;  if (width > nPrint) {    n+=width - nPrint;  }  if (nPrint >= x.length()) {    n+=x.length();  } else {    n+=nPrint;  }  final char[] ca=new char[n];  int i;  if (leftJustify) {    if (nPrint >= x.length()) {      final char[] csx=x.toCharArray();      for (i=0; i < x.length(); i++) {        ca[i]=csx[i];      }    } else {      final char[] csx=x.substring(0,nPrint).toCharArray();      for (i=0; i < nPrint; i++) {        ca[i]=csx[i];      }    }    for (int j=0; j < width - nPrint; j++, i++) {      ca[i]=' ';    }  } else {    for (i=0; i < width - nPrint; i++) {      ca[i]=' ';    }    if (nPrint >= x.length()) {      final char[] csx=x.toCharArray();      for (int j=0; j < x.length(); i++, j++) {        ca[i]=csx[j];      }    } else {      final char[] csx=x.substring(0,nPrint).toCharArray();      for (int j=0; j < nPrint; i++, j++) {        ca[i]=csx[j];      }    }  }  return new String(ca);}  }
class C{  private AgentIdentifier(final IAgent agent){  IAgent currentAgent=agent;  final IScope scope=agent.getScope();  final ITopLevelAgent root=scope.getRoot();  final List<String> specs=new ArrayList<>();  final List<Integer> inds=new ArrayList<>();  while (true) {    specs.add(currentAgent.getSpeciesName());    inds.add(currentAgent.getIndex());    if (currentAgent == root)     break;    currentAgent=currentAgent.getPopulation().getHost();  }  species=specs.toArray(new String[0]);  indexes=inds.toArray(new Integer[0]);}  }
class C{  public AbstractSiteMap parseSiteMap(URL onlineSitemapUrl) throws UnknownFormatException, IOException {  if (onlineSitemapUrl == null) {    return null;  }  byte[] bytes=IOUtils.toByteArray(onlineSitemapUrl);  return parseSiteMap(bytes,onlineSitemapUrl);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  static void testLoadWithBadEncoding() throws IOException {  System.out.println("testLoadWithBadEncoding");  String s="<?xml version=\"1.0\" encoding=\"BAD\"?>" + "<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">" + "<properties>"+ "<entry key=\"foo\">bar</entry>"+ "</properties>";  ByteArrayInputStream in=new ByteArrayInputStream(s.getBytes("UTF-8"));  Properties props=new Properties();  try {    props.loadFromXML(in);    throw new RuntimeException("UnsupportedEncodingException expected");  } catch (  UnsupportedEncodingException expected) {  }}  }
class C{  public ProxyMessageEncoder(OutputStream out,String hashAlgoId) throws IllegalArgumentException {  this.hashAlgoId=hashAlgoId;  if (hashAlgoId == null) {    throw new IllegalArgumentException("Hash algorithm id cannot be null");  }  String uniquePart=randomBoundary();  topBoundary="xtop" + uniquePart;  attachmentBoundary="xatt" + uniquePart;  mpEncoder=new MultipartEncoder(out,topBoundary);}  }
class C{  public static int EINVAL(){  return Errno.EINVAL.intValue();}  }
class C{  public SortedUniqueList(){  super();}  }
class C{  private byte[] bytes(int... bytesAsInts){  byte[] bytes=new byte[bytesAsInts.length];  for (int i=0; i < bytesAsInts.length; i++) {    bytes[i]=(byte)bytesAsInts[i];  }  return bytes;}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  public Vector2f lerp(Vector2fc other,float t){  return lerp(other,t,this);}  }
class C{  public void syncDownloadPoiBox(final Box box){  if (FlavorUtils.isPoiStorage()) {    syncDownloadPoiTypes();  }  List<Poi> pois=backend.getPoisInBox(box);  if (pois.size() > 0) {    Timber.d("Updating %d nodes",pois.size());    poiManager.mergeFromOsmPois(pois,box);  } else {    Timber.d("No new node found in the area");  }}  }
class C{  public int total(){  try {    String sql="SELECT COUNT(*) FROM tb_estratigrafia";    stm=conector.prepareStatement(sql);    rs=stm.executeQuery();    if (rs.next()) {      return rs.getInt(1);    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar total de estratigrafias cadastradas na base de dados! \n" + ex);  }  return 0;}  }
class C{  public boolean definitelySame(MethodReference that){  if (this == that)   return true;  if (name != that.name || descriptor != that.descriptor)   return false;  RVMMethod mine=peekResolvedMethod();  RVMMethod theirs=that.peekResolvedMethod();  if (mine == null || theirs == null)   return false;  return mine == theirs;}  }
class C{  private void markSubroutineWalkDFS(final BitSet sub,int index,final BitSet anyvisited){  while (true) {    AbstractInsnNode node=instructions.get(index);    if (sub.get(index)) {      return;    }    sub.set(index);    if (anyvisited.get(index)) {      dualCitizens.set(index);      if (LOGGING) {        log("Instruction #" + index + " is dual citizen.");      }    }    anyvisited.set(index);    if (node.getType() == AbstractInsnNode.JUMP_INSN && node.getOpcode() != JSR) {      JumpInsnNode jnode=(JumpInsnNode)node;      int destidx=instructions.indexOf(jnode.label);      markSubroutineWalkDFS(sub,destidx,anyvisited);    }    if (node.getType() == AbstractInsnNode.TABLESWITCH_INSN) {      TableSwitchInsnNode tsnode=(TableSwitchInsnNode)node;      int destidx=instructions.indexOf(tsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=tsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=tsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }    if (node.getType() == AbstractInsnNode.LOOKUPSWITCH_INSN) {      LookupSwitchInsnNode lsnode=(LookupSwitchInsnNode)node;      int destidx=instructions.indexOf(lsnode.dflt);      markSubroutineWalkDFS(sub,destidx,anyvisited);      for (int i=lsnode.labels.size() - 1; i >= 0; --i) {        LabelNode l=lsnode.labels.get(i);        destidx=instructions.indexOf(l);        markSubroutineWalkDFS(sub,destidx,anyvisited);      }    }switch (instructions.get(index).getOpcode()) {case GOTO:case RET:case TABLESWITCH:case LOOKUPSWITCH:case IRETURN:case LRETURN:case FRETURN:case DRETURN:case ARETURN:case RETURN:case ATHROW:      return;  }  index++;  if (index >= instructions.size()) {    return;  }}}  }
class C{  private static int firstNonWhitespaceBackward(IDocument document,int position,String partitioning,int bound){  Assert.isTrue(position < document.getLength());  Assert.isTrue(bound >= -1);  try {    while (position > bound) {      char ch=document.getChar(position);      if (!Character.isWhitespace(ch) && isDefaultPartition(document,position,partitioning))       return position;      position--;    }  } catch (  BadLocationException e) {  }  return -1;}  }
class C{  public static CStateChange changeEdgeLabel(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo,final EdgeLabel oldLabel){  final EdgeLabel label=hitInfo.getHitEdgeLabel();  if (label == oldLabel) {    return new CStateChange(m_factory.createEdgeLabelHoverState(label,event),true);  } else {    m_factory.createEdgeLabelExitState(oldLabel,event);    return new CStateChange(m_factory.createEdgeLabelEnterState(label,event),true);  }}  }
class C{  public DataViewerDialog(Dialog parent,boolean modal){  super(parent,modal);  createDialog();}  }
class C{  public static boolean isPresent(){  return m_Present;}  }
class C{  public DispatchingCachedEventSource<T> preload(Collection<String> aggregateIds){  return preload(aggregateIds,TimeRange.unbounded());}  }
class C{  public QueueBuilder<T> withSerializer(OffHeapSerializer<T> serializer){  this.serializer=serializer;  return this;}  }
class C{  public static void quickSort(Object[] a,int fromIndex,int toIndex,Comparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  public void checkServiceStatus(){  boolean shutDown=true;  ArrayList<Server> mServers=Hermes.getInstance().getServersAsArrayList();  int mSize=mServers.size();  Server server;  for (int i=0; i < mSize; i++) {    server=mServers.get(i);    if (server.isDisconnected() && !server.mayReconnect()) {      int serverId=server.getId();synchronized (this) {        IRCConnection connection=connections.get(serverId);        if (connection != null) {          connection.dispose();        }        connections.remove(serverId);      }synchronized (alarmIntentsLock) {        PendingIntent pendingRIntent=alarmIntents.get(serverId);        if (pendingRIntent != null) {          AlarmManager am=(AlarmManager)getSystemService(ALARM_SERVICE);          am.cancel(pendingRIntent);          alarmIntents.remove(serverId);        }        ReconnectReceiver receiver=alarmReceivers.get(serverId);        if (receiver != null) {          unregisterReceiver(receiver);          alarmReceivers.remove(serverId);        }      }    } else {      shutDown=false;    }  }  if (shutDown) {    foreground=false;    stopForegroundCompat(R.string.app_name);    stopSelf();  }}  }
class C{  public <T>QueryObject<T> preProcess(QueryObject<T> query,Definitions definitions){  if (query.isSubQuery()) {    return query;  }  final QCondition finalCondition=andConditions(generatePreConditionsForFixedValues(query,definitions),query.getCondition());  if (finalCondition != null) {    query.where(finalCondition);  }  return query;}  }
class C{  public void ExportRouteSummary(String filename,String systemName) throws IOException {  HashMap<String,RouteGroup> groups=new HashMap<String,RouteGroup>();  for (  ScheduledRoute R : this.routes) {    if (!groups.containsKey(R.routename)) {      groups.put(R.routename,new RouteGroup(R.routename));    }    groups.get(R.routename).addRoute(R);  }  BufferedWriter writer=new BufferedWriter(new FileWriter(filename));  writer.write(systemName + " ROUTE SUMMARY\n");  for (  RouteGroup G : groups.values()) {    writer.write("\n\nROUTE: \"" + G.getName() + "\""+ "\n\tMODES: "+ G.getModes().toString()+ "\n\tDIRECTIONS:");    for (    String S : G.getBranches().keySet()) {      writer.write("\n\t\t" + S + " - "+ G.getBranches().get(S)+ " branch(es).");    }    writer.write("\n\tSTOPS:");    for (    String S : G.getStops()) {      writer.write("\n\t\t" + S);    }    writer.write("\n\tENUMERATED SET:");    for (    ScheduledRoute R : G.getEnumeratedSet()) {      writer.write("\n\t\t" + R.direction + " "+ R.branch);    }  }  writer.close();}  }
class C{  @Override public void startGame(final IGame game,final Set<IGamePlayer> players,final boolean headless){}  }
class C{  public final void selectTab(final JComponent component){  Preconditions.checkNotNull(component,"IE01230: Component argument can not be null");  m_tabbedPane.setSelectedComponent(component);}  }
class C{  @Override public void initialize(ResourceManager rm){  ;}  }
class C{  protected TeXFormula(TeXParser tp,String s) throws ParseException {  this(tp,s,null);}  }
class C{  public void writeSubFiles() throws IOException {  int n=numHeaders();  for (int i=1; i < n; i++) {    if (headers[i].isWAV()) {      writeSubFile(i,"" + i + ".wav");    } else     if (headers[i].isSDF()) {      writeSubFile(i,"" + i + ".sdf");    } else     if (headers[i].getType() == 3) {      writeSubFile(i,"" + i + ".cv");    } else     if (headers[i].getType() == 4) {      writeSubFile(i,"" + i + ".txt");    } else     if (headers[i].isMap()) {      writeSubFile(i,"" + i + ".map");    } else     if (headers[i].getType() == 6) {      writeSubFile(i,"" + i + ".uwav");    }  }}  }
class C{  public String toString(){  return "MultiKey" + Arrays.asList(keys).toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void advance() throws IOException {  close();  if (it.hasNext()) {    in=it.next().openStream();  }}  }
class C{  @SuppressWarnings("static-access") private void resetPort(boolean isSource,String newPort){  String vendor=null;  String port=null;  if (isSource) {    if (newPort == null) {      vendor=s_parameters.getSourceVendor();      port=s_parameters.getSourcePort();    } else     if (newPort.length() == 0) {      if (m_sourceVendor.getSelectedItem() != null)       vendor=m_sourceVendor.getSelectedItem().toString();      port=null;    } else {      if (m_sourceVendor.getSelectedItem() != null)       vendor=m_sourceVendor.getSelectedItem().toString();      port=newPort;    }    String result=s_dbEngine.getDBPort(vendor,port);    m_sourcePort.setText(result);    m_sourcePortOld=result;  } else {    if (newPort == null) {      vendor=s_parameters.getTargetVendor();      port=s_parameters.getTargetPort();    } else     if (newPort.length() == 0) {      if (m_targetVendor.getSelectedItem() != null)       vendor=m_targetVendor.getSelectedItem().toString();      port=null;    } else {      if (m_targetVendor.getSelectedItem() != null)       vendor=m_targetVendor.getSelectedItem().toString();      port=newPort;    }    String result=s_dbEngine.getDBPort(vendor,port);    m_targetPort.setText(result);    m_targetPortOld=result;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override boolean waitForData() throws InterruptedException {  while (this.internalIsEmpty()) {    region.getCache().getCancelCriterion().checkCancelInProgress(null);    boolean interrupted=Thread.currentThread().isInterrupted();    try {      blockCond.await(StoppableCondition.TIME_TO_WAIT);    } catch (    InterruptedException ie) {      interrupted=true;      region.getCache().getCancelCriterion().checkCancelInProgress(ie);      throw new TimeoutException(ie);    } finally {      if (interrupted)       Thread.currentThread().interrupt();    }  }  return true;}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  public static Node findTallestNode(Collection<Node> nodeList){  int height=0;  Node tallestNode=null;  for (  Node node : nodeList) {    if (node.getHeight() > height) {      height=node.getHeight();      tallestNode=node;    }  }  return tallestNode;}  }
class C{  void add(long val){  int len=arr.length;  if (idx == len)   arr=Arrays.copyOf(arr,Math.min(len * 2,len + 1024));  arr[idx++]=val;}  }
class C{  DocCollection createCollection(int nSlices,DocRouter router){  List<Range> ranges=router.partitionRange(nSlices,router.fullRange());  Map<String,Slice> slices=new HashMap<>();  for (int i=0; i < ranges.size(); i++) {    Range range=ranges.get(i);    Slice slice=new Slice("shard" + (i + 1),null,map("range",range));    slices.put(slice.getName(),slice);  }  DocCollection coll=new DocCollection("collection1",slices,null,router);  return coll;}  }
class C{  private boolean isEditable(){  return comboBox.isEditable();}  }
class C{  public void register(final boolean throwException,final boolean defaultNull,final int defaultArraySize){  this.registerPrimitives(throwException);  this.registerStandard(throwException,defaultNull);  this.registerOther(throwException);  this.registerArrays(throwException,defaultArraySize);}  }
class C{  public static void start() throws Exception {  log.info("start()");  if (uiActorSystem == null) {    uiActorSystem=new UIServices("ProxyUI","proxyui");  }  SignerClient.init(uiActorSystem.getActorSystem());  if (jobManager == null) {    jobManager=new JobManager();    jobManager.registerRepeatingJob(GlobalConfChecker.class,JOB_REPEAT_INTERVAL);  }  jobManager.start();}  }
class C{  public int offset(){  return offset;}  }
class C{  private int removeTracksInternal(int first,int last){synchronized (this) {    if (last < first) {      return 0;    } else     if (first < 0) {      first=0;    } else     if (last >= mPlayListLen) {      last=mPlayListLen - 1;    }    boolean gotonext=false;    if (first <= mPlayPos && mPlayPos <= last) {      mPlayPos=first;      gotonext=true;    } else     if (mPlayPos > last) {      mPlayPos-=last - first + 1;    }    final int num=mPlayListLen - last - 1;    for (int i=0; i < num; i++) {      mPlayList[first + i]=mPlayList[last + 1 + i];    }    mPlayListLen-=last - first + 1;    if (gotonext) {      if (mPlayListLen == 0) {        stop(true);        mPlayPos=-1;        closeCursor();      } else {        if (mShuffleMode != SHUFFLE_NONE) {          mPlayPos=getNextPosition(true);        } else         if (mPlayPos >= mPlayListLen) {          mPlayPos=0;        }        final boolean wasPlaying=isPlaying();        stop(false);        openCurrentAndNext();        if (wasPlaying) {          play();        }      }      notifyChange(META_CHANGED);    }    return last - first + 1;  }}  }
class C{  public static void register(){  DdmServer.registerHandler(CHUNK_EXIT,mInstance);}  }
class C{  public static Long stringToLong(String s,Long defaultValue){  try {    return Long.parseLong(s);  } catch (  NumberFormatException nfe) {    return defaultValue;  }}  }
class C{  public ReqOptSumScorer(Scorer reqScorer,Scorer optScorer){  super(reqScorer.weight);  assert reqScorer != null;  assert optScorer != null;  this.reqScorer=reqScorer;  this.optScorer=optScorer;  this.optIterator=optScorer.iterator();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.204 -0500",hash_original_method="B639A385C0DFC1E0B0F3B3045E38F98A",hash_generated_method="1850CB8BED76D50CE56B0CC208CCB3C6") private void parseTrailerHeaders() throws IOException {  try {    this.footers=AbstractMessageParser.parseHeaders(in,-1,-1,null);  } catch (  HttpException e) {    IOException ioe=new MalformedChunkCodingException("Invalid footer: " + e.getMessage());    ExceptionUtils.initCause(ioe,e);    throw ioe;  }}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  @Override public double classifyInstance(Instance instance) throws Exception {  double maxProb=-1;  int maxIndex=0;  double[] probs=distributionForInstance(instance);  for (int j=0; j < instance.numClasses(); j++) {    if (Utils.gr(probs[j],maxProb)) {      maxIndex=j;      maxProb=probs[j];    }  }  return maxIndex;}  }
class C{  public void reorderItem(int originalPosition,int newPosition){  if (originalPosition == newPosition) {    return;  }  if (originalPosition < 0 || newPosition < 0 || originalPosition >= getItemCount() || newPosition >= getItemCount()) {    return;  }  int curFrom=cursorPositionMap.get(originalPosition,originalPosition);  if (originalPosition > newPosition) {    for (int i=originalPosition; i > newPosition; i--) {      cursorPositionMap.put(i,cursorPositionMap.get(i - 1,i - 1));    }  } else {    for (int i=originalPosition; i < newPosition; i++) {      cursorPositionMap.put(i,cursorPositionMap.get(i + 1,i + 1));    }  }  cursorPositionMap.put(newPosition,curFrom);  cleanMap();  notifyDataSetChanged();}  }
class C{  public PrintWriter err(){  return err;}  }
class C{  protected boolean isValidDefaultValue(String defaultSpec,int typeCode){  return (defaultSpec != null) && ((defaultSpec.length() > 0) || (!TypeMap.isNumericType(typeCode) && !TypeMap.isDateTimeType(typeCode)));}  }
class C{  public static DataSet sample(DataSet dataSet,int newSampleSize){  if (newSampleSize < 1) {    throw new IllegalArgumentException("Sample size must be > 0.");  }  if (dataSet.getNumRows() < 1) {    throw new IllegalArgumentException("Dataset must contain samples.");  }  if (dataSet.getNumRows() < newSampleSize) {    throw new IllegalArgumentException("Not enough cases in data to " + "generate " + newSampleSize + " samples without replacement.");  }  List<Integer> indices=new ArrayList<>(dataSet.getNumRows());  for (int i=0; i < dataSet.getNumRows(); i++) {    indices.add(i);  }  Collections.shuffle(indices);  int ncols=dataSet.getNumColumns();  DataSet newDataSet=new ColtDataSet(newSampleSize,dataSet.getVariables());  for (int i=0; i < newSampleSize; i++) {    int oldCase=indices.get(i);    for (int j=0; j < ncols; j++) {      newDataSet.setObject(i,j,dataSet.getObject(oldCase,j));    }  }  return newDataSet;}  }
class C{  public Log(T entity){  this.entity=entity;  rootLogEntry=new LogEntry<T>(null,0,new ModuleHandle("Hidden Root Module","Hidden Root Module Session Key"));  rootLogEntry.setLog(this);}  }
class C{  public void updateTimeServer(String timeServer,Boolean useTimeServer) throws PageException {  checkWriteAccess();  if (useTimeServer != null && useTimeServer.booleanValue() && !StringUtil.isEmpty(timeServer,true)) {    try {      new NtpClient(timeServer).getOffset();    } catch (    IOException e) {      try {        new NtpClient(timeServer).getOffset();      } catch (      IOException ee) {        throw Caster.toPageException(ee);      }    }  }  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update regional setting");  Element scope=_getRootElement("regional");  scope.setAttribute("timeserver",timeServer.trim());  if (useTimeServer != null)   scope.setAttribute("use-timeserver",Caster.toString(useTimeServer)); else   scope.removeAttribute("use-timeserver");}  }
class C{  @Override protected void propagateProxyDown(MySQLConnection proxyConn){  if (this.masterConnection != null) {    this.masterConnection.setProxy(proxyConn);  }  if (this.slavesConnection != null) {    this.slavesConnection.setProxy(proxyConn);  }}  }
class C{  public boolean openFileAccessSessions(){  return (fileInstanceTable.size() > 0);}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLCameraParameters) {    if (this == o)     return true;    PLCameraParameters parameters=(PLCameraParameters)o;    return (atvMin == parameters.atvMin && atvMax == parameters.atvMax && athMin == parameters.athMin && athMax == parameters.athMax && reverseRotation == parameters.reverseRotation && rotationSensitivity == parameters.rotationSensitivity && vLookAt == parameters.vLookAt && hLookAt == parameters.hLookAt && zoomLevels == parameters.zoomLevels && fovMin == parameters.fovMin && fovMax == parameters.fovMax && fovSensitivity == parameters.fovSensitivity && fov == parameters.fov);  }  return false;}  }
class C{  public void publish(LogRecord record){  if (!isLoggable(record))   return;  if (_handler != null)   _handler.publish(record);}  }
class C{  public void testDivideRoundHalfUpNeg1(){  String a="-92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="-1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public String globalInfo(){  return "Implements the Chebyshev distance. The distance between two vectors " + "is the greatest of their differences along any coordinate dimension.\n\n" + "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void testHeadsEquivalent() throws Exception {  ImmutableMap<String,String> files=ImmutableMap.of(DB_FILE.getPath(),"{\"equivalences\":[], \"migrations\":[]}","/dummy/codebase/int/1/file","1","/dummy/codebase/pub/1/file","1 (equivalent)","/dummy/codebase/int/migrated_from/file","migrated_from","/dummy/codebase/pub/migrated_to/","dir (different)");  FileSystem filesystem=new InMemoryFileSystem(files);  FileDiffer fileDiffer=new ConcreteFileDiffer(cmd,filesystem);  CodebaseDiffer codebaseDiffer=new CodebaseDiffer(fileDiffer,filesystem);  Repositories repositories=new Repositories(ImmutableSet.<RepositoryType.Factory>of(new DummyRepositoryFactory()));  InMemoryProjectContextFactory contextFactory=init(new InMemoryProjectContextFactory(ui,repositories));  ProjectContext context=contextFactory.create("moe_config.txt");  Injector.INSTANCE=new Injector(filesystem,cmd,ui);  Db db=new FileDb(DB_FILE.getPath(),storage,new FileDb.Writer(GsonModule.provideGson(),filesystem));  BookkeepingDirective d=new BookkeepingDirective(new Bookkeeper(context,codebaseDiffer,db,ui));  d.dbLocation=DB_FILE.getAbsolutePath();  expect(cmd.runCommand("diff",ImmutableList.of("-N","-u","/dummy/codebase/int/1/file","/dummy/codebase/pub/1/file"),"")).andReturn("unused");  control.replay();  assertEquals(0,d.perform());  control.verify();  DbStorage expectedDb=new DbStorage();  expectedDb.addEquivalence(RepositoryEquivalence.create(Revision.create(1,"int"),Revision.create(1,"pub")));  assertThat(storage).isEqualTo(expectedDb);}  }
class C{  private Map<Object,Object> unwrapBinariesIfNeeded(Map<Object,Object> map,boolean keepBinary,boolean cpy){  if (keepBinary)   return map;  Map<Object,Object> map0=BinaryUtils.newMap(map);  for (  Map.Entry<Object,Object> e : map.entrySet())   map0.put(unwrapBinary(e.getKey(),keepBinary,cpy),unwrapBinary(e.getValue(),keepBinary,cpy));  return map0;}  }
class C{  public static void main(String[] args){  runClassifier(new SGD(),args);}  }
class C{  private synchronized void connectTo(int hostIndex) throws SQLException {  try {    switchCurrentConnectionTo(hostIndex,createConnectionForHostIndex(hostIndex));  } catch (  SQLException e) {    if (this.currentConnection != null) {      StringBuilder msg=new StringBuilder("Connection to ").append(isPrimaryHostIndex(hostIndex) ? "primary" : "secondary").append(" host '").append(this.hostList.get(hostIndex)).append("' failed");      this.currentConnection.getLog().logWarn(msg.toString(),e);    }    throw e;  }}  }
class C{  public MediaServerRemuxer(FileChannel fileChannel,int initData,int outputFormat,MPEGParser2.StreamFormat streamFormat,MPEGParser2.SubFormat subFormat,MPEGParser2.TuneStringType tuneStringType,int channel,int tsid,int data1,int data2,int data3,MediaServer.Connection mediaServer) throws IllegalArgumentException {  if (mediaServer == null) {    throw new IllegalArgumentException("The media server cannot be null.");  }  closed=false;  switchLock=new Object();  switching=false;  this.mediaServer=mediaServer;  currentFile=mediaServer.getFile();  switchFilename=null;  switchUploadId=0;  switchData=0;  interAssist=true;  bufferIndex=0;  bufferLimit=0;  fileSize=new AtomicLong(0);  containerFormat=null;  h264=false;  mpeg2=false;  videoPid=-1;  initOffset=0;  this.inputFormat=MPEGParser2.REMUX_TS;  this.outputFormat=outputFormat;  this.streamFormat=streamFormat;  this.subFormat=subFormat;  this.tuneStringType=tuneStringType;  this.channel=channel;  this.tsid=tsid;  this.data1=data1;  this.data2=data2;  this.data3=data3;  tsSynced=true;  partialTransferIndex=0;  partialTransfer=new byte[MAX_TRANSFER];  writeBuffer=ByteBuffer.allocateDirect(16384);  transferBuffer=new byte[initData];  this.fileChannel=fileChannel;  writer=new RemuxWriter();  remuxer2=MPEGParser2.openRemuxer(inputFormat,outputFormat,streamFormat,subFormat,tuneStringType,channel,tsid,data1,data2,data3,writer);  if (remuxer2 == null) {    throw new IllegalArgumentException("Unable to initialize the remuxer.");  }  remuxerMap.put(currentFile,this);}  }
class C{  private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop;}  }
class C{  public static boolean isAvailable(){  return AudioEffect.isEffectTypeAvailable(AudioEffect.EFFECT_TYPE_AEC);}  }
class C{  @Ignore("TODO") @Test public void testListener() throws CacheException, InterruptedException {  String exceptions=Error.class.getName();  try {    String name="testListener";    doExec("setListener1");    doMessage("<ExpectedException action=add>" + exceptions + "</ExpectedException>");    doCreateEntry(name);    Integer count=(Integer)doExec("getListenerCount");    assertEquals(1,count.intValue());    doVerifyDisconnected();  }  finally {    doMessage("<ExpectedException action=remove>" + exceptions + "</ExpectedException>");    resetVM();  }}  }
class C{  public synchronized void removePanListener(PanListener listener){  panDelegate.remove(listener);}  }
class C{  public XBeePacketLength(int msb,int lsb){  super(msb,lsb);}  }
class C{  public void emit(){  setupEOFCode();  if (scanner.functionName == null)   scanner.functionName="yylex";  reduceColumns();  findActionStates();  emitHeader();  emitUserCode();  emitClassName();  skel.emitNext();  println("  private static final int ZZ_BUFFERSIZE = " + scanner.bufferSize + ";");  if (scanner.debugOption) {    println("  private static final String ZZ_NL = System.getProperty(\"line.separator\");");  }  skel.emitNext();  emitLexicalStates();  int packedCharMapPairs=emitCharMapArray();  emitActionTable();  reduceRows();  emitRowMapArray();  emitDynamicInit();  skel.emitNext();  emitAttributes();  skel.emitNext();  emitLookBuffer();  emitClassCode();  skel.emitNext();  emitConstructorDecl();  emitCharMapInitFunction(packedCharMapPairs);  if (scanner.debugOption) {    println("");    println("  private static String zzToPrintable(String str) {");    println("    StringBuilder builder = new StringBuilder();");    println("    for (int n = 0 ; n < str.length() ; ) {");    println("      int ch = str.codePointAt(n);");    println("      int charCount = Character.charCount(ch);");    println("      n += charCount;");    println("      if (ch > 31 && ch < 127) {");    println("        builder.append((char)ch);");    println("      } else if (charCount == 1) {");    println("        builder.append(String.format(\"\\\\u%04X\", ch));");    println("      } else {");    println("        builder.append(String.format(\"\\\\U%06X\", ch));");    println("      }");    println("    }");    println("    return builder.toString();");    println("  }");  }  skel.emitNext();  emitScanError();  skel.emitNext();  emitDoEOF();  skel.emitNext();  emitLexFunctHeader();  emitNextInput();  emitGetRowMapNext();  skel.emitNext();  emitEOFVal();  skel.emitNext();  emitActions();  skel.emitNext();  emitNoMatch();  skel.emitNext();  emitMain();  skel.emitNext();  out.close();}  }
class C{  private static void placeCaretInsideFirstOperation(Editor editor,PsiFile psiFile){  if (editor.isDisposed()) {    return;  }  if (psiFile.isValid() && psiFile.getVirtualFile() != null && psiFile.getVirtualFile().isValid()) {    for (    PsiElement psiElement : psiFile.getChildren()) {      if (psiElement instanceof PsiWhiteSpace) {        continue;      }      PsiElement operationOrNull=asOperationOrNull(psiElement);      if (operationOrNull != null) {        final Project project=editor.getProject();        if (project != null) {          final JSGraphQLNamedTypePsiElement name=PsiTreeUtil.getChildOfType(operationOrNull,JSGraphQLNamedTypePsiElement.class);          if (name != null && name.isDefinition()) {            operationOrNull=name;          }          final FileEditorManager fileEditorManager=FileEditorManager.getInstance(project);          fileEditorManager.openFile(psiFile.getVirtualFile(),true,true);          editor.getSelectionModel().removeSelection();          editor.getCaretModel().moveToOffset(operationOrNull.getTextOffset());          editor.getScrollingModel().scrollToCaret(ScrollType.CENTER);        }        return;      }    }  }}  }
class C{  private void initInfo(int record_id,String value,String whereClause){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (!(record_id == 0)) {    fieldID=record_id;  } else {    if (value != null && value.length() > 0) {      fieldValue.setText(value);    } else {      String aid=Env.getContext(Env.getCtx(),p_WindowNo,"A_Asset_ID");      if (aid != null && aid.length() != 0) {        fieldID=new Integer(aid).intValue();      }      String bp=Env.getContext(Env.getCtx(),p_WindowNo,"C_BPartner_ID");      if (bp != null && bp.length() != 0) {        fBPartner_ID.setValue(new Integer(bp).intValue());      }      String pid=Env.getContext(Env.getCtx(),p_WindowNo,"M_Product_ID");      if (pid != null && pid.length() != 0) {        fProduct_ID.setValue(new Integer(pid).intValue());      }    }  }}  }
class C{  @Override public void handleTopologyEvent(final TopologyEvent event){  if (event.getType() == TopologyEvent.Type.TOPOLOGY_CHANGED || event.getType() == TopologyEvent.Type.TOPOLOGY_INIT) {    this.isLeader=event.getNewView().getLocalInstance().isLeader();  }}  }
class C{  public void addRequestHeader(String headerName,String headerValue){  _requestHeaders.put(headerName,headerValue);}  }
class C{  public static String xmlCData(String data){  if (data.contains("]]>")) {    return xmlText(data);  }  boolean newline=data.endsWith("\n");  data="<![CDATA[" + data + "]]>";  return newline ? data + "\n" : data;}  }
class C{  public T bottom(){  int size=size();  if (size <= 0) {    return null;  }  return get(0);}  }
class C{  protected void rescaleImage(int width,int height,int hint){  Image master=getMasterImage();  if (master != null) {    bgImage=master.getScaledInstance(width,height,hint);    tracker.addImage(bgImage,1);    try {      tracker.waitForID(1);    } catch (    InterruptedException e) {      e.printStackTrace();      bgImage=null;      return;    } finally {      tracker.removeImage(bgImage,1);    }  } else {    bgImage=null;  }}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static boolean isContainsChinese(String data){  String chinese="[\u0391-\uFFE5]";  if (!StringUtils.isEmpty(data)) {    for (int i=0; i < data.length(); i++) {      String temp=data.substring(i,i + 1);      boolean flag=temp.matches(chinese);      if (flag) {        return true;      }    }  }  return false;}  }
class C{  public void shutDown(){  m_writer.shutDown();  m_reader.shutDown();  m_decoder.shutDown();}  }
class C{  public UTMRef toUTMRef(){  double UTM_F0=0.9996;  double a=RefEll.WGS84.getMaj();  double eSquared=RefEll.WGS84.getEcc();  double longitude=this.lng;  double latitude=this.lat;  double latitudeRad=latitude * (Math.PI / 180.0);  double longitudeRad=longitude * (Math.PI / 180.0);  int longitudeZone=(int)Math.floor((longitude + 180.0) / 6.0) + 1;  if (latitude >= 56.0 && latitude < 64.0 && longitude >= 3.0 && longitude < 12.0) {    longitudeZone=32;  }  if (latitude >= 72.0 && latitude < 84.0) {    if (longitude >= 0.0 && longitude < 9.0) {      longitudeZone=31;    } else     if (longitude >= 9.0 && longitude < 21.0) {      longitudeZone=33;    } else     if (longitude >= 21.0 && longitude < 33.0) {      longitudeZone=35;    } else     if (longitude >= 33.0 && longitude < 42.0) {      longitudeZone=37;    }  }  double longitudeOrigin=(longitudeZone - 1) * 6 - 180 + 3;  double longitudeOriginRad=longitudeOrigin * (Math.PI / 180.0);  char UTMZone=UTMRef.getUTMLatitudeZoneLetter(latitude);  double ePrimeSquared=(eSquared) / (1 - eSquared);  double n=a / Math.sqrt(1 - eSquared * Math.sin(latitudeRad) * Math.sin(latitudeRad));  double t=Math.tan(latitudeRad) * Math.tan(latitudeRad);  double c=ePrimeSquared * Math.cos(latitudeRad) * Math.cos(latitudeRad);  double A=Math.cos(latitudeRad) * (longitudeRad - longitudeOriginRad);  double M=a * ((1 - eSquared / 4 - 3 * eSquared * eSquared / 64 - 5 * eSquared * eSquared* eSquared / 256) * latitudeRad - (3 * eSquared / 8 + 3 * eSquared * eSquared / 32 + 45 * eSquared * eSquared* eSquared / 1024) * Math.sin(2 * latitudeRad) + (15 * eSquared * eSquared / 256 + 45 * eSquared * eSquared* eSquared / 1024) * Math.sin(4 * latitudeRad) - (35 * eSquared * eSquared* eSquared / 3072) * Math.sin(6 * latitudeRad));  double UTMEasting=(UTM_F0 * n * (A + (1 - t + c) * Math.pow(A,3.0) / 6 + (5 - 18 * t + t * t + 72 * c - 58 * ePrimeSquared) * Math.pow(A,5.0) / 120) + 500000.0);  double UTMNorthing=(UTM_F0 * (M + n * Math.tan(latitudeRad) * (A * A / 2 + (5 - t + (9 * c) + (4 * c * c)) * Math.pow(A,4.0) / 24 + (61 - (58 * t) + (t * t) + (600 * c) - (330 * ePrimeSquared)) * Math.pow(A,6.0) / 720)));  if (latitude < 0) {    UTMNorthing+=10000000.0;  }  return new UTMRef(UTMEasting,UTMNorthing,UTMZone,longitudeZone);}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public DockMapPanel(){  this(false);}  }
class C{  public void testUnsizedDoublesCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.doubles().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  private void createNewChargePanel(){  final int nameFieldColumns=20;  final int valueFieldColumns=10;  m_lblValue.setValue(Msg.translate(Env.getCtx(),EColumn.VALUE.title()));  m_txbValueField.setCols(valueFieldColumns);  m_chbIsExpense.setChecked(true);  m_chbIsExpense.setLabel(Msg.getMsg(Env.getCtx(),EColumn.EXPENSE.title()));  m_lblName.setValue(Msg.translate(Env.getCtx(),EColumn.NAME.title()));  m_txbNameField.setCols(nameFieldColumns);  m_btnNew.setLabel(Msg.getMsg(Env.getCtx(),AD_MESSAGE_CREATE) + " " + Util.cleanAmp(Msg.getMsg(Env.getCtx(),"New")));  m_btnNew.addEventListener(Events.ON_CLICK,this);  Rows rows=new Rows();  m_grdNew.appendChild(rows);  Row row=new Row();  rows.appendChild(row);  row.setSpans("3");  Label label=new Label(Msg.getMsg(Env.getCtx(),"ChargeNewAccount"));  label.setStyle("font-weight: bold;");  row.appendChild(label);  row=new Row();  rows.appendChild(row);  row.appendChild(m_lblValue);  row.appendChild(m_txbValueField);  row.appendChild(m_chbIsExpense);  row=new Row();  rows.appendChild(row);  row.appendChild(m_lblName);  row.appendChild(m_txbNameField);  row.appendChild(m_btnNew);  row=new Row();  rows.appendChild(row);  row.setSpans("3");  row.appendChild(new Separator());  return;}  }
class C{  public ClusterState copyWith(String collectionName,DocCollection collection){  ClusterState result=new ClusterState(liveNodes,new LinkedHashMap<>(collectionStates),znodeVersion);  if (collection == null) {    result.collectionStates.remove(collectionName);  } else {    result.collectionStates.put(collectionName,new CollectionRef(collection));  }  return result;}  }
class C{  public static void registerListener(Context context,PlaybackListener listener){  IntentFilter filter=new IntentFilter();  filter.addAction(PlaybackListener.ACTION_ON_TRACK_PLAYED);  filter.addAction(PlaybackListener.ACTION_ON_PLAYER_PAUSED);  filter.addAction(PlaybackListener.ACTION_ON_SEEK_COMPLETE);  filter.addAction(PlaybackListener.ACTION_ON_PLAYER_DESTROYED);  filter.addAction(PlaybackListener.ACTION_ON_BUFFERING_STARTED);  filter.addAction(PlaybackListener.ACTION_ON_BUFFERING_ENDED);  filter.addAction(PlaybackListener.ACTION_ON_PROGRESS_CHANGED);  LocalBroadcastManager.getInstance(context.getApplicationContext()).registerReceiver(listener,filter);}  }
class C{  public String toString(cp_info constant_pool[]){  cp_info target=constant_pool[target_index];  return target.toString(constant_pool);}  }
class C{  public void render(float delta){  if (active) {    for (    Component component : this.components) {      component.render(delta);    }    if (getChildren() != null) {      for (      GameObject node : getChildren()) {        node.render(delta);      }    }  }}  }
class C{  public void generateException(String type){  if (type.equalsIgnoreCase(ValidatorLogger.EXPORT_MASK_TYPE)) {    throw DeviceControllerException.exceptions.validationExportMaskError(getValidatedObjectName(),getStorageSystemName(),getMsgs().toString());  }  if (type.equalsIgnoreCase(ValidatorLogger.VOLUME_TYPE)) {    throw DeviceControllerException.exceptions.validationVolumeError(getValidatedObjectName(),getStorageSystemName(),getMsgs().toString());  }  throw DeviceControllerException.exceptions.validationError(type,getMsgs().toString(),ValidatorLogger.CONTACT_EMC_SUPPORT);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.CHARACTER_CLASS;}  }
class C{  public AbstractNetworkLink(int id,String title,String summary,String language,UrlInfoCollection<UrlInfoWithDate> infos){  myId=id;  myTitle=title;  mySummary=summary;  myLanguage=language != null ? language : "multi";  myInfos=new UrlInfoCollection<UrlInfoWithDate>(infos);}  }
class C{  public static FileInputStream newQueryInputStream(String fileName) throws Exception {  return newQueryInputStream(QUERY_DIR,fileName);}  }
class C{  public static void copyFile(File src,File dest) throws IOException {  if (src.equals(dest)) {    return;  }  InputStream in=new FileInputStream(src);  OutputStream out=new FileOutputStream(dest);  byte[] buf=new byte[8192];  int len;  while ((len=in.read(buf)) > 0) {    out.write(buf,0,len);  }  in.close();  out.close();}  }
class C{  private void prepareCustom(String key) throws Exception {  for (int i=0; i < INIT_GRID_NUM; i++)   assert startGrid(i) != null;  for (int i=0; i < INIT_GRID_NUM; i++)   assert PARTITIONED == grid(i).cache(null).getConfiguration(CacheConfiguration.class).getCacheMode();  try (Transaction tx=grid(0).transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){    grid(0).cache(null).put(new GridCacheInternalKeyImpl(key),new GridCacheAtomicLongValue(INIT_GRID_NUM));    tx.commit();  }   stopGrid(0);}  }
class C{  public EntitySlot(){  super();}  }
class C{  private void generatePart(boolean isSingleWord){  clearAttributes();  termAttribute.copyBuffer(savedBuffer,iterator.current,iterator.end - iterator.current);  int startOffset=savedStartOffset + iterator.current;  int endOffset=savedStartOffset + iterator.end;  if (hasIllegalOffsets) {    if (isSingleWord && startOffset <= savedEndOffset) {      offsetAttribute.setOffset(startOffset,savedEndOffset);    } else {      offsetAttribute.setOffset(savedStartOffset,savedEndOffset);    }  } else {    offsetAttribute.setOffset(startOffset,endOffset);  }  posIncAttribute.setPositionIncrement(position(false));  typeAttribute.setType(savedType);}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public static <T>T var(Var<T> var){  return var.value;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void clear(){  invalidate();  _buffer.clear();}  }
class C{  public DefaultTetradLoggerConfig(List<Event> events){  if (events == null) {    throw new NullPointerException("The given list of events must not be null");  }  this.events=new ArrayList<>(events);}  }
class C{  public NumberModel(Number number,BeansWrapper wrapper){  super(number,wrapper);}  }
class C{  public void printRuntimeInstructions(TreeMap<Integer,ArrayList<Instruction>> DMLInstMap,IntRange range){  for (int lineNumber=range.getMinimumInteger(); lineNumber <= range.getMaximumInteger(); lineNumber++) {    if (DMLInstMap.get(lineNumber) != null) {      for (      Instruction currInst : DMLInstMap.get(lineNumber)) {        if (currInst instanceof CPInstruction)         System.out.format("\t\t id %4d: %s\n",currInst.getInstID(),prepareInstruction(currInst.toString())); else         if (currInst instanceof MRJobInstruction) {          MRJobInstruction currMRInst=(MRJobInstruction)currInst;          System.out.format("\t\t id %4d: %s\n",currInst.getInstID(),prepareInstruction(currMRInst.getMRString(false)));        } else         if (currInst instanceof BreakPointInstruction) {          BreakPointInstruction currBPInst=(BreakPointInstruction)currInst;          System.out.format("\t\t id %4d: %s\n",currInst.getInstID(),currBPInst.toString());        }      }    }  }}  }
class C{  public MixedNafR2LMultiplier(){  this(ECCurve.COORD_JACOBIAN,ECCurve.COORD_JACOBIAN_MODIFIED);}  }
class C{  protected void writeOptionalAttributes(TagWriter tagWriter,Object item) throws JspException {}  }
class C{  public void addSmsToSentBox(String message,String phoneNumber){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {    ContentValues values=new ContentValues();    values.put("address",phoneNumber);    values.put("date",System.currentTimeMillis());    values.put("body",message);    _context.getContentResolver().insert(Uri.parse("content://sms/sent"),values);  }}  }
class C{  protected void onRemovePrivate(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public CompositeColorMap(ColorMap map1,ColorMap map2){  this(new ColorMap[]{map1,map2});}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static QuarkMetaResultSet empty(String connectionId,int statementId,Meta.Signature signature){  return new QuarkMetaResultSet(connectionId,statementId,true,signature,Meta.Frame.EMPTY);}  }
class C{  @Override public String toString(){  return "Action: " + this.action;}  }
class C{  void addNode(final Node node){  int size=nodes.size();  if ((size > 0) && (nodes.get(size - 1) == node)) {    Log.i(DEBUG_TAG,"addNode attempt to add same node " + node.getOsmId() + " to "+ getOsmId());    return;  }  nodes.add(node);}  }
class C{  public TeXParser(boolean isPartial,String parseString,ArrayOfAtoms aoa,boolean firstpass){  this(isPartial,parseString,(TeXFormula)aoa,firstpass);  arrayMode=true;}  }
class C{  @Override protected Cipher initCipher(int mode) throws GeneralSecurityException {  Provider provider=Security.getProvider("SunJCE");  if (provider == null) {    throw new RuntimeException("SunJCE provider does not exist.");  }  SecretKey key=SecretKeyFactory.getInstance(baseAlgo).generateSecret(new PBEKeySpec(password.toCharArray()));  Cipher ci=Cipher.getInstance(transformation,provider);  ci.init(mode,key,new PBEParameterSpec(salt,DEFAULT_ITERATION));  return ci;}  }
class C{  public void rollbackDeleteMirrorDevice(URI vplexURI,URI mirrorURI,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexURI,_dbClient);    VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,mirrorURI);    Volume sourceVplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);    String locality=null;    if (sourceVplexVolume.getAssociatedVolumes() != null && sourceVplexVolume.getAssociatedVolumes().size() > 1) {      locality=VPlexApiConstants.DISTRIBUTED_VIRTUAL_VOLUME;    } else {      locality=VPlexApiConstants.LOCAL_VIRTUAL_VOLUME;    }    client.attachMirror(locality,sourceVplexVolume.getDeviceLabel(),vplexMirror.getDeviceLabel());    _log.info("Successfully re-attached mirror %s to the source volume %s during delete mirror rollback. ",vplexMirror.getDeviceLabel(),sourceVplexVolume.getDeviceLabel());  } catch (  Exception e) {    VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,mirrorURI);    Volume sourceVplexVolume=getDataObject(Volume.class,vplexMirror.getSource().getURI(),_dbClient);    sourceVplexVolume.getMirrors().remove(vplexMirror.getId().toString());    _dbClient.updateObject(sourceVplexVolume);    _log.info("Removed mirror %s from source volume %s",mirrorURI,sourceVplexVolume.getId());    if (null != vplexMirror.getAssociatedVolumes()) {      for (      String assocVolumeId : vplexMirror.getAssociatedVolumes()) {        Volume volume=_dbClient.queryObject(Volume.class,URI.create(assocVolumeId));        if (null != volume) {          _dbClient.markForDeletion(volume);        }      }    }    _dbClient.markForDeletion(vplexMirror);    _log.error("Error during rollback of promote mirror: {}",e.getMessage(),e);  } finally {    WorkflowStepCompleter.stepSucceded(stepId);  }}  }
class C{  public void gotoFirst(){  if (size() == 1)   return;  for (int i=size() - 2; i > 0; i--) {    Page popped=remove(i);    unmountPage(popped,false);    destroyPage(popped);  }  goBack(false);}  }
class C{  public static Object convertToParameterValue(Object object){  if (object == null || object instanceof String || object instanceof String[] || object instanceof Boolean) {    return object;  } else   if (object instanceof Integer) {    return object;  } else   if (object instanceof Long) {    return ((Long)object).intValue();  } else   if (object instanceof Float) {    return object;  } else   if (object instanceof Double) {    return ((Double)object).floatValue();  } else   if (object instanceof Object[] || object instanceof Collection) {    return convertToParameterValues(object);  } else {    return object.toString();  }}  }
class C{  public boolean hasTextLitOnly(){  return m_hasTextLitOnly;}  }
class C{  public static void createHorizonalHintBox(JPanel parent,JComponent c,String txt){  parent.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  parent.setAlignmentX(Component.LEFT_ALIGNMENT);  c.setBorder(BorderFactory.createEmptyBorder(10,0,5,0));  c.setAlignmentX(Component.LEFT_ALIGNMENT);  JLabel l1=N9ComponentFactory.createLabel_style4(txt);  l1.setAlignmentX(Component.LEFT_ALIGNMENT);  parent.add(l1);  parent.add(c);}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public final RenderBuffer putInt(int pos,int x){  unsafe.putInt(baseAddress + pos,x);  return this;}  }
class C{  protected void paint(SynthContext context,Graphics g){  paintContext=context;  updateLeadSelectionRow();  Rectangle paintBounds=g.getClipBounds();  Insets insets=tree.getInsets();  TreePath initialPath=getClosestPathForLocation(tree,0,paintBounds.y);  Enumeration paintingEnumerator=treeState.getVisiblePathsFrom(initialPath);  int row=treeState.getRowForPath(initialPath);  int endY=paintBounds.y + paintBounds.height;  TreeModel treeModel=tree.getModel();  SynthContext cellContext=getContext(tree,Region.TREE_CELL);  drawingCache.clear();  setHashColor(context.getStyle().getColor(context,ColorType.FOREGROUND));  if (paintingEnumerator != null) {    boolean done=false;    boolean isExpanded;    boolean hasBeenExpanded;    boolean isLeaf;    Rectangle rowBounds=new Rectangle(0,0,tree.getWidth(),0);    Rectangle bounds;    TreePath path;    TreeCellRenderer renderer=tree.getCellRenderer();    DefaultTreeCellRenderer dtcr=(renderer instanceof DefaultTreeCellRenderer) ? (DefaultTreeCellRenderer)renderer : null;    configureRenderer(cellContext);    while (!done && paintingEnumerator.hasMoreElements()) {      path=(TreePath)paintingEnumerator.nextElement();      bounds=getPathBounds(tree,path);      if ((path != null) && (bounds != null)) {        isLeaf=treeModel.isLeaf(path.getLastPathComponent());        if (isLeaf) {          isExpanded=hasBeenExpanded=false;        } else {          isExpanded=treeState.getExpandedState(path);          hasBeenExpanded=tree.hasBeenExpanded(path);        }        rowBounds.y=bounds.y;        rowBounds.height=bounds.height;        paintRow(renderer,dtcr,context,cellContext,g,paintBounds,insets,bounds,rowBounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        if ((bounds.y + bounds.height) >= endY) {          done=true;        }      } else {        done=true;      }      row++;    }    boolean rootVisible=tree.isRootVisible();    TreePath parentPath=initialPath;    parentPath=parentPath.getParentPath();    while (parentPath != null) {      paintVerticalPartOfLeg(g,paintBounds,insets,parentPath);      drawingCache.put(parentPath,Boolean.TRUE);      parentPath=parentPath.getParentPath();    }    done=false;    paintingEnumerator=treeState.getVisiblePathsFrom(initialPath);    while (!done && paintingEnumerator.hasMoreElements()) {      path=(TreePath)paintingEnumerator.nextElement();      bounds=getPathBounds(tree,path);      if ((path != null) && (bounds != null)) {        isLeaf=treeModel.isLeaf(path.getLastPathComponent());        if (isLeaf) {          isExpanded=hasBeenExpanded=false;        } else {          isExpanded=treeState.getExpandedState(path);          hasBeenExpanded=tree.hasBeenExpanded(path);        }        parentPath=path.getParentPath();        if (parentPath != null) {          if (drawingCache.get(parentPath) == null) {            paintVerticalPartOfLeg(g,paintBounds,insets,parentPath);            drawingCache.put(parentPath,Boolean.TRUE);          }          paintHorizontalPartOfLeg(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        } else         if (rootVisible && row == 0) {          paintHorizontalPartOfLeg(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        }        if (shouldPaintExpandControl(path,row,isExpanded,hasBeenExpanded,isLeaf)) {          paintExpandControl(g,paintBounds,insets,bounds,path,row,isExpanded,hasBeenExpanded,isLeaf);        }        if ((bounds.y + bounds.height) >= endY) {          done=true;        }      } else {        done=true;      }      row++;    }  }  cellContext.dispose();  paintDropLine(g);  rendererPane.removeAll();  paintContext=null;}  }
class C{  private void buildMenu(){  setVisible(false);  removeAll();  if (recentSearches.getLength() == 0) {    JMenuItem noRecent=new JMenuItem(UIManager.getString("SearchField.noRecentsText"));    noRecent.setEnabled(false);    add(noRecent);  } else {    JMenuItem recent=new JMenuItem(UIManager.getString("SearchField.recentsMenuTitle"));    recent.setEnabled(false);    add(recent);    for (    String searchString : recentSearches.getRecentSearches()) {      JMenuItem mi=new JMenuItem(searchString);      mi.addActionListener(this);      add(mi);    }    addSeparator();    clear=new JMenuItem(UIManager.getString("SearchField.clearRecentsText"));    clear.addActionListener(this);    add(clear);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isSpdy(){  return spdyConnection != null;}  }
class C{  public void checkAndStartWifi(){  boolean wifiEnabled=mSettingsStore.isWifiToggleEnabled();  Slog.i(TAG,"WifiService starting up with Wi-Fi " + (wifiEnabled ? "enabled" : "disabled"));  if (wifiEnabled)   setWifiEnabled(mContext.getBasePackageName(),wifiEnabled);  mWifiWatchdogStateMachine=WifiWatchdogStateMachine.makeWifiWatchdogStateMachine(mContext);}  }
class C{  public void testFinished(){  GridClientFutureAdapter<Integer> fut=new GridClientFutureAdapter<>();  assertFalse(fut.isDone());  fut.onDone(0);  assertTrue(fut.isDone());  assertTrue(new GridClientFutureAdapter<>(0).isDone());  assertTrue(new GridClientFutureAdapter<Integer>(new GridClientException("Test grid exception.")).isDone());  assertTrue(new GridClientFutureAdapter<Integer>(new RuntimeException("Test runtime exception.")).isDone());}  }
class C{  public void addRegExp(RegExpLiteral re){  if (re == null)   codeBug();  if (regexps == null)   regexps=new ArrayList<RegExpLiteral>();  regexps.add(re);  re.putIntProp(REGEXP_PROP,regexps.size() - 1);}  }
class C{  public RemoteAssociationServiceImpl(final GenericDTOService<AssociationDTO> associationDTOGenericDTOService){  super(associationDTOGenericDTOService);}  }
class C{  public static boolean fill(CharacterBuffer buffer,Reader reader) throws IOException {  return fill(buffer,reader,buffer.buffer.length);}  }
class C{  public void writeRevision(final Task<Revision> task) throws IOException {  if (task.getTaskType() == TaskTypes.TASK_PARTIAL_FIRST || task.getTaskType() == TaskTypes.TASK_FULL) {    this.writer.write(WikipediaXMLKeys.KEY_START_PAGE.getKeyword() + "\r\n");    ArticleInformation header=task.getHeader();    this.writer.write("\t" + WikipediaXMLKeys.KEY_START_TITLE.getKeyword());    this.writer.write(header.getArticleName());    this.writer.write(WikipediaXMLKeys.KEY_END_TITLE.getKeyword() + "\r\n");    this.writer.write("\t" + WikipediaXMLKeys.KEY_START_ID.getKeyword());    this.writer.write(Integer.toString(header.getArticleId()));    this.writer.write(WikipediaXMLKeys.KEY_END_ID.getKeyword() + "\r\n");  }  Revision rev;  Iterator<Revision> revIt=task.iterator();  while (revIt.hasNext()) {    this.writer.write("\t" + WikipediaXMLKeys.KEY_START_REVISION.getKeyword() + "\r\n");    rev=revIt.next();    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_ID.getKeyword());    this.writer.write(Integer.toString(rev.getRevisionID()));    this.writer.write(WikipediaXMLKeys.KEY_END_ID.getKeyword() + "\r\n");    this.writer.write("\t\t<revCount>");    this.writer.write(Integer.toString(rev.getRevisionCounter()));    this.writer.write("</revCount>\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_TIMESTAMP.getKeyword());    this.writer.write(rev.getTimeStamp().toString());    this.writer.write(WikipediaXMLKeys.KEY_END_TIMESTAMP.getKeyword() + "\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_CONTRIBUTOR.getKeyword());    if (rev.contributorIsRegistered()) {      this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_USERNAME.getKeyword());      this.writer.write(rev.getContributorName());      this.writer.write(WikipediaXMLKeys.KEY_END_USERNAME.getKeyword() + "\r\n");      this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_ID.getKeyword());      this.writer.write(rev.getContributorId());      this.writer.write(WikipediaXMLKeys.KEY_END_ID.getKeyword() + "\r\n");    } else {      this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_IP.getKeyword());      this.writer.write(rev.getContributorName());      this.writer.write(WikipediaXMLKeys.KEY_END_IP.getKeyword() + "\r\n");    }    this.writer.write(WikipediaXMLKeys.KEY_END_CONTRIBUTOR.getKeyword() + "\r\n");    if (rev.isMinor()) {      this.writer.write("\t\t" + WikipediaXMLKeys.KEY_MINOR_FLAG.getKeyword() + "\r\n");    }    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_COMMENT.getKeyword());    this.writer.write(rev.getComment());    this.writer.write(WikipediaXMLKeys.KEY_END_COMMENT.getKeyword() + "\r\n");    this.writer.write("\t\t" + WikipediaXMLKeys.KEY_START_TEXT.getKeyword());    if (rev.getRevisionText() != null) {      this.writer.write(rev.getRevisionText());    }    this.writer.write(WikipediaXMLKeys.KEY_END_TEXT.getKeyword() + "\r\n");    this.writer.write("\t" + WikipediaXMLKeys.KEY_END_REVISION.getKeyword() + "\r\n");  }  if (task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST || task.getTaskType() == TaskTypes.TASK_FULL) {    this.writer.write(WikipediaXMLKeys.KEY_END_PAGE.getKeyword() + "\r\n");  }  this.writer.flush();}  }
class C{  public boolean mouseClicked(MouseEvent e){  if (coolMM) {    return getCurrentLayerMapMouseListener().mouseClicked(e);  } else {    return false;  }}  }
class C{  protected void updateRemoteReceivedHeaderInvalid() throws MessagingException {  setRemoteReceivedHeaderInvalid(computeRemoteReceivedHeaderInvalid());}  }
class C{  @Override public void stop(){  leftFront.stop();  rightFront.stop();  leftRear.stop();  rightRear.stop();}  }
class C{  public void validateTransformStack(){  transformStackValid=true;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void process(mxCellState state,Color color,boolean isValid){  if (isValid) {    validState=state;  } else {    validState=null;  }  if (state != markedState || color != currentColor) {    currentColor=color;    if (state != null && currentColor != null) {      markedState=state;      mark();    } else     if (markedState != null) {      markedState=null;      unmark();    }  }}  }
class C{  public IvParameterSpec(byte[] iv,int offset,int byteCount){  if ((iv == null) || (iv.length - offset < byteCount)) {    throw new IllegalArgumentException();  }  Arrays.checkOffsetAndCount(iv.length,offset,byteCount);  this.iv=new byte[byteCount];  System.arraycopy(iv,offset,this.iv,0,byteCount);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  NewsChannelTableDao.dropTable(db,ifExists);}  }
class C{  @Override public void recover(LexerNoViableAltException lnvae){  CharStream charStream=lnvae.getInputStream();  int startIndex=lnvae.getStartIndex();  String text=charStream.getText(Interval.of(startIndex,charStream.index()));  ParseException parseException=new ParseException("unexpected character '" + getErrorDisplay(text) + "'"+ " on line ("+ _tokenStartLine+ ") position ("+ _tokenStartCharPositionInLine+ ")",_tokenStartCharIndex);  parseException.initCause(lnvae);  throw new RuntimeException(parseException);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static Set<JavaClassAndMethod> resolveMethodCallTargets(ReferenceType receiverType,InvokeInstruction invokeInstruction,ConstantPoolGen cpg) throws ClassNotFoundException {  return resolveMethodCallTargets(receiverType,invokeInstruction,cpg,false);}  }
class C{  public DeleteSubscriptionsResponse DeleteSubscriptions(DeleteSubscriptionsRequest req) throws ServiceFaultException, ServiceResultException {  return (DeleteSubscriptionsResponse)channel.serviceRequest(req);}  }
class C{  protected Renderable doMakeShadowShape(){  if (this.getShape() instanceof Polygon)   return new Polygon((Polygon)this.getShape()); else   if (this.getShape() instanceof PartialCappedCylinder)   return new PartialCappedCylinder((PartialCappedCylinder)this.getShape()); else   if (this.getShape() instanceof CappedCylinder)   return new CappedCylinder((CappedCylinder)this.getShape()); else   if (this.getShape() instanceof CappedEllipticalCylinder)   return new CappedEllipticalCylinder((CappedEllipticalCylinder)this.getShape()); else   if (this.getShape() instanceof Orbit)   return new Orbit((Orbit)this.getShape()); else   if (this.getShape() instanceof Route)   return new Route((Route)this.getShape()); else   if (this.getShape() instanceof Curtain)   return new Curtain((Curtain)this.getShape()); else   if (this.getShape() instanceof SphereAirspace)   return new SphereAirspace((SphereAirspace)this.getShape()); else   if (this.getShape() instanceof TrackAirspace)   return new TrackAirspace((TrackAirspace)this.getShape()); else   if (this.getShape() instanceof SurfaceSquare)   return new SurfaceSquare((SurfaceSquare)this.getShape()); else   if (this.getShape() instanceof SurfaceQuad)   return new SurfaceQuad((SurfaceQuad)this.getShape()); else   if (this.getShape() instanceof SurfaceCircle)   return new SurfaceCircle((SurfaceCircle)this.getShape()); else   if (this.getShape() instanceof SurfaceEllipse)   return new SurfaceEllipse((SurfaceEllipse)this.getShape()); else   if (this.getShape() instanceof SurfacePolyline)   return new SurfacePolyline((SurfacePolyline)this.getShape()); else   if (this.getShape() instanceof SurfacePolygon)   return new SurfacePolygon((SurfacePolygon)this.getShape());  return null;}  }
class C{  public static void reindex(Connection conn) throws SQLException {  init(conn);  removeAllTriggers(conn,TRIGGER_PREFIX);  removeIndexFiles(conn);  Statement stat=conn.createStatement();  ResultSet rs=stat.executeQuery("SELECT * FROM " + SCHEMA + ".INDEXES");  while (rs.next()) {    String schema=rs.getString("SCHEMA");    String table=rs.getString("TABLE");    createTrigger(conn,schema,table);    indexExistingRows(conn,schema,table);  }}  }
class C{  private void createUpdateSqlReset(){  m_createSqlColumn=new ArrayList<String>();  m_createSqlValue=new ArrayList<String>();}  }
class C{  @Override public boolean lock(){  try {    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));    }    String lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;    if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {      FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));    }    fileOutputStream=new FileOutputStream(lockFilePath);    channel=fileOutputStream.getChannel();    try {      fileLock=channel.tryLock();    } catch (    OverlappingFileLockException e) {      return false;    }    if (null != fileLock) {      return true;    } else {      return false;    }  } catch (  IOException e) {    return false;  }}  }
class C{  public void testComputeLocationWhenUberwarPackaging() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("war");  String location=deployableElement.computeLocation(createDefaultProject("uberwar",null));  assertTrue(location.endsWith("projectFinalName.war"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.777 -0500",hash_original_method="59A4D041306D60B1EF57E2C22E471227",hash_generated_method="874E1492F11CD362521561994DC41956") @SuppressWarnings("deprecation") @Deprecated public final void stop(){  if (stopHelper()) {    Thread.currentThread().stop();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION__VALUE:    return value != null;}return super.eIsSet(featureID);}  }
class C{  public void useDefaults(){  setAutoStart(false);  setDuration(1000);  setRepeatCount(ObjectAnimator.INFINITE);  setRepeatDelay(0);  setRepeatMode(ObjectAnimator.RESTART);  mMask.angle=MaskAngle.CW_0;  mMask.shape=MaskShape.LINEAR;  mMask.dropoff=0.5f;  mMask.fixedWidth=0;  mMask.fixedHeight=0;  mMask.intensity=0.0f;  mMask.relativeWidth=1.0f;  mMask.relativeHeight=1.0f;  mMask.tilt=20;  mMaskTranslation=new MaskTranslation();  setBaseAlpha(0.3f);  resetAll();}  }
class C{  private boolean isPluginConfiguration(Configuration configuration){  return (configuration.containsKey(ID_KEY) && getPluginId() == configuration.getInt(ID_KEY)) || getClass().getCanonicalName().equals(configuration.getString(CLASSNAME_KEY,""));}  }
class C{  public static boolean isExpressionNeedsToResolved(Expression rightExp,boolean isIncludeFilter){  if (!isIncludeFilter && rightExp instanceof LiteralExpression && (org.carbondata.query.expression.DataType.NullType == ((LiteralExpression)rightExp).getLiteralExpDataType())) {    return true;  }  for (  Expression child : rightExp.getChildren()) {    if (isExpressionNeedsToResolved(child,isIncludeFilter)) {      return true;    }  }  return false;}  }
class C{  static long[] findMonitorDeadlockedThreads(){  throw new UnimplementedError();}  }
class C{  public static boolean isWindowsVistaOS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("windows") && osName.contains("vista");}  }
class C{  private void subscribeAction(Bundle data){  IMqttToken token=removeMqttToken(data);  simpleAction(token,data);}  }
class C{  @Override public float sloppyFreq(int distance){  return 1.0f / (distance + 1);}  }
class C{  public String prettyPrint(){  final StringBuffer sb=new StringBuffer(shortSummary());  sb.append('\n');  if (!this.keepTaskList) {    sb.append("No task info kept");  } else {    final TaskInfo[] tasks=getTaskInfo();    sb.append("-----------------------------------------\n");    sb.append("ms     %     Task name\n");    sb.append("-----------------------------------------\n");    final NumberFormat nf=NumberFormat.getNumberInstance();    nf.setMinimumIntegerDigits(5);    nf.setGroupingUsed(false);    final NumberFormat pf=NumberFormat.getPercentInstance();    pf.setMinimumIntegerDigits(3);    pf.setGroupingUsed(false);    for (    final TaskInfo task : tasks) {      sb.append(nf.format(task.getTimeMillis()) + "  ");      final double totalTimeSeconds=getTotalTimeSeconds();      final double percentage=totalTimeSeconds == 0 ? 0 : task.getTimeSeconds() / totalTimeSeconds;      sb.append(pf.format(percentage) + "  ");      sb.append(task.getTaskName() + "\n");    }  }  return sb.toString();}  }
class C{  public void addPutstatic(String classname,String fieldName,String desc){  addPutstatic0(null,classname,fieldName,desc);}  }
class C{  public Signumprovider(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:02.564 -0500",hash_original_method="2FFF8F204F2E28FEC7295F423960F22A",hash_generated_method="9780990C20FA425691B10159F7452F6E") public static int unsafeArrayOffset(ByteBuffer b){  return ((HeapByteBuffer)b).offset;}  }
class C{  protected void readPageConfigurationFromRequest(){  pageConfigurationForm.readFromRequest(context.getRequest());}  }
class C{  public DSETestGenerator(TestSuiteChromosome suite){  this.suite=suite;}  }
class C{  public static Builder builder(Path configDir){  return builder(new FilesystemResourceLoader(configDir));}  }
class C{  public Boolean isWantAuthnRequestsSigned(){  return wantAuthnRequestsSigned;}  }
class C{  private void checkForVPlexProtectionEnabled(final BlockVirtualPoolParam createParam,DbClient dbClient){  if (null != createParam.getProtection() && null != createParam.getProtection().getRecoverPoint() && null != createParam.getProtection().getRecoverPoint().getCopies() && !createParam.getProtection().getRecoverPoint().getCopies().isEmpty()) {    throw APIException.badRequests.parameterRPNotSupportedWithSRDF();  }  if (createParam.specifiesHighAvailability()) {    if (createParam.hasRemoteCopyProtection()) {      for (      VirtualPoolRemoteProtectionVirtualArraySettingsParam remoteSettings : createParam.getProtection().getRemoteCopies().getRemoteCopySettings()) {        if (Mode.ACTIVE.name().equals(remoteSettings.getRemoteCopyMode())) {          throw APIException.badRequests.vplexNotSupportedWithSRDFActive();        }        if (null != remoteSettings.getVpool()) {          URI uri=remoteSettings.getVpool();          VirtualPool vpool=dbClient.queryObject(VirtualPool.class,uri);          if (vpool != null && VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(vpool)) {            throw APIException.badRequests.vplexDistributedNotSupportedOnSRDFTarget();          }        }      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMultiplicity_();}  }
class C{  protected void notifyIdle(long idlingTime){  if (idlingTime > 1000 && this.needToSave)   saveIndexes();}  }
class C{  public static double toRadians(double angdeg){  return 0.0d;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 15:08:59.259 -0400",hash_original_method="F725D1AA4BDF18078F2DC945203943DC",hash_generated_method="E187DC80A61A50381DCBE40A79776C54") public void destroy(){  mController.destroy();}  }
class C{  public Solution undx(Solution[] parents){  if (parents.length < 2) {    throw new IllegalArgumentException("requires at least 2 parents");  }  int k=parents.length;  int n=parents[0].getNumberOfVariables();  double[][] x=new double[k][n];  for (int i=0; i < k; i++) {    for (int j=0; j < n; j++) {      x[i][j]=((RealVariable)parents[i].getVariable(j)).getValue();    }  }  double[] g=Vector.mean(x);  List<double[]> e_zeta=new ArrayList<double[]>();  List<double[]> e_eta=new ArrayList<double[]>();  for (int i=0; i < k - 1; i++) {    double[] d=Vector.subtract(x[i],g);    if (!Vector.isZero(d)) {      double dbar=Vector.magnitude(d);      double[] e=Vector.orthogonalize(d,e_zeta);      if (!Vector.isZero(e)) {        e_zeta.add(Vector.multiply(dbar,Vector.normalize(e)));      }    }  }  double D=Vector.magnitude(Vector.subtract(x[k - 1],g));  for (int i=0; i < n - e_zeta.size(); i++) {    double[] d=randomVector(n);    if (!Vector.isZero(d)) {      double[] e=Vector.orthogonalize(d,e_eta);      if (!Vector.isZero(e)) {        e_eta.add(Vector.multiply(D,Vector.normalize(e)));      }    }  }  double[] variables=g;  for (int i=0; i < e_zeta.size(); i++) {    variables=Vector.add(variables,Vector.multiply(PRNG.nextGaussian(0.0,zeta),e_zeta.get(i)));  }  for (int i=0; i < e_eta.size(); i++) {    variables=Vector.add(variables,Vector.multiply(PRNG.nextGaussian(0.0,eta / Math.sqrt(n)),e_eta.get(i)));  }  Solution result=parents[k - 1].copy();  for (int j=0; j < n; j++) {    RealVariable variable=(RealVariable)result.getVariable(j);    double value=variables[j];    if (value < variable.getLowerBound()) {      value=variable.getLowerBound();    } else     if (value > variable.getUpperBound()) {      value=variable.getUpperBound();    }    variable.setValue(value);  }  return result;}  }
class C{  public FolderTokenDivider findByName(String name) throws Exception {  int idx;  FolderTokenDivider div=null;  idx=super.findIndexByName(name);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  div=get(idx);  return div;}  }
class C{  public void putAll(List<IPRangeNode<Map>> children){  for (  IPRangeNode child : children) {    this.put(child,false);  }}  }
class C{  public void beforeIndexLookup(Index index,int oper,Object key){}  }
class C{  public static double round(double value,int sf){  NumberFormatter formatter=new NumberFormatter(sf);  try {    return NumberFormat.getInstance().parse(formatter.format(value)).doubleValue();  } catch (  ParseException e) {    return value;  }}  }
class C{  public String debug(String msg,Object... params){  if (level.intValue() < Level.FINE.intValue())   return (NO_MESSAGE);  return (format(msg,params));}  }
class C{  public static boolean checkFileName(String name){  return FILE_NAME.test(name);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x7DAC0C71,version=271) public int sceUsbCamReadVideoFrameBlocking(TPointer jpegBuffer,int jpegBufferSize){  this.jpegBuffer=jpegBuffer;  this.jpegBufferSize=jpegBufferSize;  waitForNextVideoFrame();  return writeCurrentVideoImage(jpegBuffer,jpegBufferSize);}  }
class C{  public Properties build(){  return properties;}  }
class C{  public static <T extends MessageLite>T parseAndClose(InputStream inputStream,Class<T> messageClass) throws IOException {  try {    Method newBuilder=messageClass.getDeclaredMethod("parseFrom",InputStream.class);    return messageClass.cast(newBuilder.invoke(null,inputStream));  } catch (  Exception e) {    Throwables.propagateIfPossible(e,IOException.class);    IOException io=new IOException("Error parsing message of type " + messageClass);    io.initCause(e);    throw io;  } finally {    inputStream.close();  }}  }
class C{  public static String formatDecimal(double value,int precision){  return formatDecimal(value,precision,TRUNCZEROS_NO,ROUND_NO);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_INVARIANT_2__CONSTRAINT_1:    getConstraint_1().clear();  return;}super.eUnset(featureID);}  }
class C{  @Nullable public static Number parseReading(String reading){  if (reading == null)   return null;  NumberFormat numberFormat=NumberFormat.getInstance();  try {    return numberFormat.parse(reading);  } catch (  ParseException e) {    return null;  }}  }
class C{  public static <T>String toString(Class<T> cls,T obj,String name,@Nullable Object val){  assert cls != null;  assert obj != null;  assert name != null;  Queue<GridToStringThreadLocal> queue=threadCache.get();  assert queue != null;  GridToStringThreadLocal tmp=queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();  Object[] addNames=tmp.getAdditionalNames();  Object[] addVals=tmp.getAdditionalValues();  addNames[0]=name;  addVals[0]=val;  try {    return toStringImpl(cls,tmp.getStringBuilder(),obj,addNames,addVals,1);  }  finally {    queue.offer(tmp);  }}  }
class C{  public void shouldHandleLateSetFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker();  ClosedState state=Testing.stateFor(breaker);  state.recordSuccess();  assertTrue(breaker.isClosed());  breaker.withFailureThreshold(2);  state.recordFailure();  assertTrue(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());  breaker=new CircuitBreaker();  state=Testing.stateFor(breaker);  state.recordSuccess();  assertTrue(breaker.isClosed());  breaker.withFailureThreshold(2,3);  state.recordFailure();  assertTrue(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  public static void main(final String... args) throws IOException {  new FtCli(new TkFixed(args[1]),args[0]).start(Exit.NEVER);}  }
class C{  public DTMDocumentImpl(DTMManager mgr,int documentNumber,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory){  initDocument(documentNumber);  m_xsf=xstringfactory;}  }
class C{  @Override protected void onStart(){  super.onStart();  ResponseHandler.register(mDungeonsPurchaseObserver);  initializeOwnedItems();}  }
class C{  private void configureCustomerPaymentTypes(Map<VOPaymentType,PaymentType> map,OrganizationRole role,Organization cust,Organization seller,Set<VOPaymentType> targetPaymentSettings,List<OrganizationRefToPaymentType> paymentTypes) throws OperationNotPermittedException {  final LocalizerFacade lf=new LocalizerFacade(localizer,dm.getCurrentUser().getLocale());  for (  OrganizationRefToPaymentType orgToPt : paymentTypes) {    VOPaymentType pt=PaymentTypeAssembler.toVOPaymentType(orgToPt.getPaymentType(),lf);    if (!targetPaymentSettings.remove(pt)) {      suspendChargeableActiveSubscriptions(cust,orgToPt.getPaymentType(),seller.getKey());      dm.remove(orgToPt);    }  }  OrganizationReference orgRef=new PaymentConfigurationFilter(dm).checkSellerRelationship(seller,cust);  for (  VOPaymentType type : targetPaymentSettings) {    OrganizationRefToPaymentType orgToPt=orgRef.getPaymentReferenceForType(map.get(type).getPaymentTypeId());    if (orgToPt == null) {      orgToPt=new OrganizationRefToPaymentType();      orgToPt.setOrganizationReference(orgRef);      orgToPt.setOrganizationRole(role);      orgToPt.setPaymentType(map.get(type));      orgToPt.setUsedAsDefault(false);      try {        dm.persist(orgToPt);        orgRef.getPaymentTypes().add(orgToPt);        dm.flush();        dm.refresh(orgToPt);        dm.refresh(orgRef);        dm.refresh(seller);        dm.refresh(cust);      } catch (      NonUniqueBusinessKeyException e) {        handleImpossibleBKViolation(e);      }    }    Set<SubscriptionStatus> states=EnumSet.of(SubscriptionStatus.SUSPENDED,SubscriptionStatus.SUSPENDED_UPD);    List<Subscription> suspendedSubscriptions=cust.getSubscriptionsForStateAndPaymentType(states,orgToPt.getPaymentType().getPaymentTypeId());    revokeSuspendedSubscriptions(suspendedSubscriptions,seller.getKey(),orgToPt.getPaymentType());  }}  }
class C{  public String toString(){  String result;  result=super.toString();  result=result.substring(0,result.length() - 1);  result+=",url=" + getURL() + ",user="+ getUser()+ ",password="+ getPassword().replaceAll(".","*")+ ",query="+ getQuery()+ "]";  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  _stream.write(buffer,offset,length,false);}  }
class C{  protected String stem(String term){  boolean altered=false;  createCT(term);  if (!isIndexable(CT)) {    return null;  }  if (!isStemmable(CT)) {    return CT;  }  R1=getR1(CT);  R2=getR1(R1);  RV=getRV(CT);  TERM=term + ";" + CT;  altered=step1();  if (!altered) {    altered=step2();  }  if (altered) {    step3();  } else {    step4();  }  step5();  return CT;}  }
class C{  private void readNextLine(BufferedReader reader,Queue<Integer> entries) throws IOException {  String line=reader.readLine();  if (line == null) {    throw new EOFException("unexpectedly reached EOF");  }  String[] tokens=line.trim().split("\\s+");  for (int i=0; i < tokens.length; i++) {    entries.offer(Integer.parseInt(tokens[i]));  }}  }
class C{  private static boolean isNodeInParameterExpansion(ASTNode node){  if (paramExpansionOperators.contains(node.getElementType())) {    return true;  }  PsiElement psiElement=node.getPsi();  PsiElement parent=psiElement != null ? psiElement.getParent() : null;  while (parent != null) {    if (parent instanceof BashParameterExpansion) {      return true;    }    parent=parent.getParent();  }  return false;}  }
class C{  private void updateIcon(){  if (this.userDefinedImage) {    this.imageIcon=icon.getIcon32();    this.scaledImageIcon=icon.getIcon();  } else {    this.imageIcon=new ImageIcon(flag);    this.scaledImageIcon=new ImageIcon(scaledFlag);  }}  }
class C{  public static void toogleProximityFrozen(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01739: Graph argument can not be null");  graph.getSettings().getProximitySettings().setProximityBrowsingFrozen(!graph.getSettings().getProximitySettings().getProximityBrowsingFrozen());}  }
class C{  public static Test suite(){  return (new TestSuite(JspIntegration2ITCase.class));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.924 -0500",hash_original_method="EA3441215E7ACDF721D34D006EDC791B",hash_generated_method="90D204205C81CFABA73CE61129C7B480") public synchronized long size(){  return size;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:57.019 -0500",hash_original_method="D5786F30716C18CE0A0AB74556D12A22",hash_generated_method="708578452BD67272299AEC24AF7B5510") public void clearLongitude(){  mHasLongitude=false;}  }
class C{  public void dumpRegistrations(){synchronized (this) {    Registration start=mReg;    System.out.println("Broadcaster " + this + " {");    if (start != null) {      Registration r=start;      do {        System.out.println("    senderWhat=" + r.senderWhat);        int n=r.targets.length;        for (int i=0; i < n; i++) {          System.out.println("        [" + r.targetWhats[i] + "] "+ r.targets[i]);        }        r=r.next;      } while (r != start);    }    System.out.println("}");  }}  }
class C{  public String outputDetailedInfoTipText(){  return "Output per value correlation for nominal attributes";}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FRIEND' ("+ "'USER_ID' TEXT PRIMARY KEY NOT NULL ,"+ "'NAME' TEXT,"+ "'PORTRAIT_URI' TEXT);");}  }
class C{  public TranslatedRegionParser(@NonNull Match match,Element element) throws RegionException {  for (  Element subRegionElement : element.getChildren()) {    RegionModule module=Cardinal.getModule(RegionModule.class);    region=module.getRegion(match,subRegionElement);    if (region == null && element.getAttribute("region") != null) {      region=module.getRegionById(match,element.getAttributeValue("region"));    }    if (region != null) {      break;    }  }  if (region == null) {    throw new MissingRegionPropertyException("No sub-region specified for translated region",element);  }  String offsetValue=element.getAttributeValue("offset");  if (offsetValue == null) {    throw new MissingRegionAttributeException("offset",element);  }  offset=Numbers.getVector(offsetValue);  if (offset == null) {    throw new InvalidRegionAttributeException("offset",element);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedMediaFileCall(stack,1)) {    return makeNetworkedCall(stack);  }  Airing a=getAir(stack);  MediaFile mf=getMediaFile(stack);  boolean rv=false;  if (a != null && mf != null) {    rv=mf.setInfoAiring(a);  }  return rv ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public CProjectContent(final INaviProject project,final ListenerProvider<IProjectListener> listeners,final SQLProvider provider,final List<CAddressSpace> addressSpaces,final List<INaviView> views,final IFilledList<TraceList> traces){  m_project=Preconditions.checkNotNull(project,"IE02222: Project argument can not be null");  m_listeners=Preconditions.checkNotNull(listeners,"IE02223: Listeners argument can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE02224: Provider argument can not be null");  m_addressSpaces=Preconditions.checkNotNull(addressSpaces,"IE02225: AddressSpaces argument can not be null");  m_views=Preconditions.checkNotNull(views,"IE02226: Views argument can not be null");  m_traces=Preconditions.checkNotNull(traces,"IE02227: Traces argument can not be null");}  }
class C{  public Object eval(String script,ScriptEngine engine) throws ScriptException {  if (PYTHON.equals(engine.getFactory().getEngineName()) && this.jython != null) {    this.jython.exec(script);    return null;  }  return engine.eval(script);}  }
class C{  public boolean isBehindNat(){  return mNatTraversal;}  }
class C{  public String sqlAD_getSystemLanguages(String vendorName,String catalogName,String schemaName){  String tableName="AD_Language";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("AD_Language");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("AD_LANGUAGE");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("IsSystemLanguage = 'Y'");  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public static double[] toDoubleArray(Boolean[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public static List<Byte> toList(byte[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  @POST @Path("pull/cancel") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response cancelDownloading(){  backupOps.cancelDownload();  auditBackup(OperationTypeEnum.PULL_BACKUP_CANCEL,AuditLogManager.AUDITLOG_SUCCESS,null);  log.info("done");  return Response.status(ASYNC_STATUS).build();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.CAST_EXPRESSION__EXPRESSION:    return expression != null;case N4JSPackage.CAST_EXPRESSION__TARGET_TYPE_REF:  return targetTypeRef != null;}return super.eIsSet(featureID);}  }
class C{  public BillingAdapterNotFoundException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private void assertReadLittleEndian32(byte[] data,int value) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  assertEquals(value,input.readRawLittleEndian32());  assertTrue(input.isAtEnd());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals(value,input.readRawLittleEndian32());    assertTrue(input.isAtEnd());  }}  }
class C{  static void shiftLeft(int result[],int source[],int intCount,int count){  if (count == 0) {    System.arraycopy(source,0,result,intCount,result.length - intCount);  } else {    int rightShiftCount=32 - count;    result[result.length - 1]=0;    for (int i=result.length - 1; i > intCount; i--) {      result[i]|=source[i - intCount - 1] >>> rightShiftCount;      result[i - 1]=source[i - intCount - 1] << count;    }  }  for (int i=0; i < intCount; i++) {    result[i]=0;  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public int batchSize(){  return batchSize;}  }
class C{  private void meekR2(Node c,Graph graph,IKnowledge knowledge){  List<Node> adjacentNodes=graph.getAdjacentNodes(c);  if (adjacentNodes.size() < 2) {    return;  }  ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);  int[] choice;  while ((choice=cg.next()) != null) {    List<Node> nodes=GraphUtils.asList(choice,adjacentNodes);    Node a=nodes.get(0);    Node b=nodes.get(1);    r2Helper(a,b,c,graph,knowledge);    r2Helper(b,a,c,graph,knowledge);    r2Helper(a,c,b,graph,knowledge);    r2Helper(c,a,b,graph,knowledge);  }}  }
class C{  private static void testWrite() throws Exception {  StringBuilder sb=new StringBuilder();  sb.setLength(4);  for (int x=0; x < 1000; x++) {    try (RandomAccessFile raf=new RandomAccessFile(blah,"rw")){      FileChannel fc=raf.getChannel();      long offset=generator.nextInt(1000);      MappedByteBuffer b=fc.map(MapMode.READ_WRITE,offset,100);      for (int i=0; i < 4; i++) {        b.put(i,(byte)('0' + i));      }      for (int i=0; i < 4; i++) {        byte aByte=b.get(i);        sb.setCharAt(i,(char)aByte);      }      if (!sb.toString().equals("0123"))       throw new Exception("Write test failed");    }   }}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(ScrollPaneDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new ScrollPaneDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public static void main(String[] args){  StdOut.print("Type a string: ");  String s=StdIn.readString();  StdOut.println("Your string was: " + s);  StdOut.println();  StdOut.print("Type an int: ");  int a=StdIn.readInt();  StdOut.println("Your int was: " + a);  StdOut.println();  StdOut.print("Type a boolean: ");  boolean b=StdIn.readBoolean();  StdOut.println("Your boolean was: " + b);  StdOut.println();  StdOut.print("Type a double: ");  double c=StdIn.readDouble();  StdOut.println("Your double was: " + c);  StdOut.println();}  }
class C{  public boolean containsPresentationModel(String id){  return presentationModels.containsKey(id);}  }
class C{  @Nullable public static String compactArray(Object[] arr){  if (arr == null || arr.length == 0)   return null;  String sep=", ";  StringBuilder sb=new StringBuilder();  for (  Object s : arr)   sb.append(s).append(sep);  if (sb.length() > 0)   sb.setLength(sb.length() - sep.length());  return U.compact(sb.toString());}  }
class C{  public static boolean equals(boolean[] a,boolean[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length) {    return false;  }  for (int i=0; i < length; i++) {    if (a[i] != a2[i])     return false;  }  return true;}  }
class C{  public POSMikheevFeatureExtractor(String viewName,POSMikheevCounter counter){  this.viewName=viewName;  this.counter=counter;}  }
class C{  public void removeFromParent(){  MutableTreeNode parent=(MutableTreeNode)getParent();  if (parent != null) {    parent.remove(this);  }}  }
class C{  public void waitUntilFree(){  while (isBusy()) {    sendEmptyMessage(BLANK);    lock.lock();    try {      if (isBusy()) {        busyCondition.await();      }    } catch (    InterruptedException e) {      throw new RuntimeException(e);    } finally {      lock.unlock();    }  }}  }
class C{  public List<String> brpop(final int timeout,final String... keys){  checkIsInMulti();  List<String> args=new ArrayList<String>();  for (  String arg : keys) {    args.add(arg);  }  args.add(String.valueOf(timeout));  client.brpop(args.toArray(new String[args.size()]));  client.setTimeoutInfinite();  List<String> multiBulkReply=client.getMultiBulkReply();  client.rollbackTimeout();  return multiBulkReply;}  }
class C{  DisjunctionMaxScorer(Weight weight,float tieBreakerMultiplier,List<Scorer> subScorers,boolean needsScores){  super(weight,subScorers,needsScores);  this.tieBreakerMultiplier=tieBreakerMultiplier;}  }
class C{  public void deleteArc(String sParent,String sChild) throws Exception {  int nParent=getNode(sParent);  int nChild=getNode(sChild);  deleteArc(nParent,nChild);}  }
class C{  public PLRotation(){  this(0.0f,0.0f,0.0f);}  }
class C{  public final void testNegateWithCharSequenceParameter(){  assertNotNull(Validators.negate("foo",Validators.notEmpty("foo")));}  }
class C{  public boolean shouldPublishToDns(){  return intersection(getStatusValues(),DNS_PUBLISHING_PROHIBITED_STATUSES).isEmpty();}  }
class C{  public void test_blob_realloc() throws InterruptedException {  final Journal store=(Journal)getStore();  try {    final byte[] buf=new byte[1024 * 2048];    r.nextBytes(buf);    final ByteBuffer bb=ByteBuffer.wrap(buf);    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bs.getStore();    long faddr=bs.write(bb);    bb.position(0);    ByteBuffer rdBuf=bs.read(faddr);    assertEquals(bb,rdBuf);    bs.delete(faddr);    assertEquals(0L,bs.getPhysicalAddress(faddr));    faddr=bs.write(bb);    final long pa=bs.getPhysicalAddress(faddr);    bb.position(0);    if (log.isInfoEnabled())     log.info("Now commit to disk (1)");    store.commit();    rw.reset();    rw.getWriteCacheService().resetAndClear();    rw.getWriteCacheService().setExtent(rw.getStoreFile().length());    rdBuf=bs.read(faddr);    assertEquals(bb,rdBuf);    bs.delete(faddr);    if (rw.getHistoryRetention() != 0) {      assertEquals(pa,bs.getPhysicalAddress(faddr));      if (log.isInfoEnabled())       log.info("Now commit to disk (2)");      store.commit();      Thread.currentThread().sleep(10);      rw.checkDeferredFrees(store);      store.commit();    } else {      assertEquals(pa,bs.getPhysicalAddress(faddr));      store.commit();    }    assertEquals(0L,bs.getPhysicalAddress(faddr));    try {      rdBuf=bs.read(faddr);      fail("Expecting: " + PhysicalAddressResolutionException.class);    } catch (    Throwable t) {      if (InnerCause.isInnerCause(t,PhysicalAddressResolutionException.class)) {        if (log.isInfoEnabled()) {          log.info("Ignoring expected exception: " + t);        }      } else {        fail("Expected: " + PhysicalAddressResolutionException.class.getName() + " reading from "+ (faddr >> 32)+ ", instead got: "+ t,t);      }    }  }  finally {    store.destroy();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean isEmergencyNumberInternal(String number,String defaultCountryIso,boolean useExactMatch){  if (number == null)   return false;  if (isUriNumber(number)) {    return false;  }  number=extractNetworkPortionAlt(number);  String numbers="";  for (int i=0; i < MSimTelephonyManager.getDefault().getPhoneCount(); i++) {    String ecclist=(i == 0) ? "ril.ecclist" : ("ril.ecclist" + i);    if (!TextUtils.isEmpty(numbers)) {      numbers=numbers + ",";    }    numbers=numbers + SystemProperties.get(ecclist);  }  String additionalEcclist=SystemProperties.get("ro.ril.ext.ecclist",null);  if (!TextUtils.isEmpty(additionalEcclist)) {    if (!TextUtils.isEmpty(numbers)) {      numbers=numbers + ",";    }    numbers=numbers + additionalEcclist;  }  if (TextUtils.isEmpty(numbers)) {    numbers=SystemProperties.get("ro.ril.ecclist");  }  if (!TextUtils.isEmpty(numbers)) {    for (    String emergencyNum : numbers.split(",")) {      if (useExactMatch || "BR".equalsIgnoreCase(defaultCountryIso)) {        if (number.equals(emergencyNum)) {          return true;        }      } else {        if (number.startsWith(emergencyNum)) {          return true;        }      }    }    return false;  }  Rlog.d(LOG_TAG,"System property doesn't provide any emergency numbers." + " Use embedded logic for determining ones.");  if (defaultCountryIso != null) {    ShortNumberUtil util=new ShortNumberUtil();    if (useExactMatch) {      return util.isEmergencyNumber(number,defaultCountryIso);    } else {      return util.connectsToEmergencyNumber(number,defaultCountryIso);    }  } else {    if (useExactMatch) {      return (number.equals("112") || number.equals("911"));    } else {      return (number.startsWith("112") || number.startsWith("911"));    }  }}  }
class C{  public void testRecoveredHandledDroppedTimedOffer(){  AtomicInteger calls=new AtomicInteger();  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(basicExecutor,4);  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  int n=0;  long delay=timeoutMillis();  long startTime=System.nanoTime();  for (int i=1; i <= 6; ++i) {    int d=p.offer(i,delay,MILLISECONDS,null);    n=n + 2 + (d < 0 ? d : 0);  }  assertTrue(millisElapsedSince(startTime) >= delay);  p.close();  s2.awaitComplete();  s1.awaitComplete();  assertEquals(n,s1.nexts + s2.nexts);  assertTrue(calls.get() >= 2);}  }
class C{  public void sendEmail(EmailParams emailParams) throws IOException {  log.debug("Handle sending email.");  mailService.doSendEmail(emailParams);}  }
class C{  public void pushLocation(double x,double y,double z,double t){  if (location_max == 0) {    location_x=new double[initial_location_size];    location_y=new double[initial_location_size];    location_z=new double[initial_location_size];    location_t=new double[initial_location_size];    location_max=initial_location_size;    location_size=0;  }  location_x[location_size]=x;  location_y[location_size]=y;  location_z[location_size]=z;  location_t[location_size]=t;  location_size++;  if (location_size == location_max) {    double[] new_location_x=new double[location_max * 2];    double[] new_location_y=new double[location_max * 2];    double[] new_location_z=new double[location_max * 2];    double[] new_location_t=new double[location_max * 2];    System.arraycopy(location_x,0,new_location_x,0,location_max);    System.arraycopy(location_y,0,new_location_y,0,location_max);    System.arraycopy(location_z,0,new_location_z,0,location_max);    System.arraycopy(location_t,0,new_location_t,0,location_max);    location_x=new_location_x;    location_y=new_location_y;    location_z=new_location_z;    location_t=new_location_t;    location_max*=2;  }}  }
class C{  public static org.oscm.vo.VOPricedOption convertToApi(org.oscm.internal.vo.VOPricedOption oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPricedOption newVO=new org.oscm.vo.VOPricedOption();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setPricePerUser(oldVO.getPricePerUser());  newVO.setPricePerSubscription(oldVO.getPricePerSubscription());  newVO.setParameterOptionKey(oldVO.getParameterOptionKey());  newVO.setOptionId(oldVO.getOptionId());  newVO.setRoleSpecificUserPrices(convertToApiVOPricedRole(oldVO.getRoleSpecificUserPrices()));  return newVO;}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  int counter=0;  Iterator localsIt=b.getLocals().iterator();  HashSet<String> localNames=new HashSet<String>(b.getLocals().size());  while (localsIt.hasNext()) {    localNames.add(((Local)localsIt.next()).getName());  }  SideEffectTester sideEffect;  if (Scene.v().hasCallGraph() && !PhaseOptions.getBoolean(options,"naive-side-effect")) {    sideEffect=new PASideEffectTester();  } else {    sideEffect=new NaiveSideEffectTester();  }  sideEffect.newMethod(b.getMethod());  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Eliminating common subexpressions "+ (sideEffect instanceof NaiveSideEffectTester ? "(naively)" : "")+ "...");  AvailableExpressions ae=new FastAvailableExpressions(b,sideEffect);  Chain units=b.getUnits();  Iterator unitsIt=units.snapshotIterator();  while (unitsIt.hasNext()) {    Stmt s=(Stmt)unitsIt.next();    if (s instanceof AssignStmt) {      Chain availExprs=ae.getAvailableEquivsBefore(s);      Value v=((AssignStmt)s).getRightOp();      EquivalentValue ev=new EquivalentValue(v);      if (availExprs.contains(ev)) {        List availPairs=ae.getAvailablePairsBefore(s);        Iterator availIt=availPairs.iterator();        while (availIt.hasNext()) {          UnitValueBoxPair up=(UnitValueBoxPair)availIt.next();          if (up.getValueBox().getValue().equivTo(v)) {            String newName="$cseTmp" + counter;            counter++;            while (localNames.contains(newName)) {              newName="$cseTmp" + counter;              counter++;            }            Local l=Jimple.v().newLocal(newName,Type.toMachineType(v.getType()));            b.getLocals().add(l);            AssignStmt origCalc=(AssignStmt)up.getUnit();            Value origLHS=origCalc.getLeftOp();            origCalc.setLeftOp(l);            Unit copier=Jimple.v().newAssignStmt(origLHS,l);            units.insertAfter(copier,origCalc);            ((AssignStmt)s).setRightOp(l);            copier.addTag(new StringTag("Common sub-expression"));            s.addTag(new StringTag("Common sub-expression"));          }        }      }    }  }  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Eliminating common subexpressions done!");}  }
class C{  public ItemBuilder material(final Material material){  this.itemStack.setMaterial(material);  return this;}  }
class C{  @Override public int length(){  return 0;}  }
class C{  public boolean isForceLabelsEnabled(){  return mForceLabels;}  }
class C{  public boolean isCancel(){  return is(CANCEL);}  }
class C{  Subscription findSubscription(String subscriptionId,String organizationId) throws ObjectNotFoundException {  Organization organization=new Organization();  organization.setOrganizationId(organizationId);  organization=(Organization)dataManager.getReferenceByBusinessKey(organization);  Subscription subscription=new Subscription();  subscription.setSubscriptionId(subscriptionId);  subscription.setOrganization(organization);  subscription=(Subscription)dataManager.getReferenceByBusinessKey(subscription);  return subscription;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  if (mAdapter != null && !(mAdapter instanceof HeaderViewListAdapter)) {    throw new IllegalStateException("Cannot add header view to list -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (mAdapter != null && mObserver != null) {    mObserver.onChanged();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public EntityView(Node graphics,RenderLayer layer){  addNode(graphics);  setRenderLayer(layer);}  }
class C{  public UnsignedLong subtract(UnsignedLong decrement){  if (getValue() < 0 || decrement.getValue() < 0)   return new UnsignedLong(bigIntegerValue().subtract(decrement.bigIntegerValue()));  return valueOf(getValue() - decrement.getValue());}  }
class C{  String internalToExternal(Class clazz,Object value){  if (value != null && value instanceof Region.Entry) {    return Region.Entry.class.getCanonicalName();  }  if (value != null && value instanceof PdxInstance) {    return PdxInstance.class.getCanonicalName();  }  return clazz.getCanonicalName();}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  public Asset(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public static IStatus validateFieldName(String name){  return validateIdentifier(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public boolean skipToKeyframeBefore(long timeUs){  return rollingBuffer.skipToKeyframeBefore(timeUs);}  }
class C{  private boolean isLineNotEmpty(final VirtualFile activeFile,int lineNumber){  EditorPartPresenter editor=getEditorForFile(activeFile.getPath());  if (editor instanceof TextEditor) {    Document document=((TextEditor)editor).getDocument();    return !document.getLineContent(lineNumber).trim().isEmpty();  }  return false;}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public void addPossibleResultPoint(ResultPoint point){  List<ResultPoint> points=possibleResultPoints;  points.add(point);  int size=points.size();  if (size > MAX_RESULT_POINTS) {    points.subList(0,size - MAX_RESULT_POINTS / 2).clear();  }}  }
class C{  public void demo2(){  System.out.println("\n\n");  DoubleMatrix2D matrix;  DoubleMatrix2D A, B, C, D, E, F, G;  DoubleMatrix2D _=null;  A=make(2,2,1);  B=make(4,4,2);  C=make(4,3,3);  D=make(2,2,4);  DoubleMatrix2D[][] parts1={{_,A,_},{B,_,C},{_,D,_}};  matrix=compose(parts1);  System.out.println("\n" + matrix);  A.assign(9);  B.assign(9);  C.assign(9);  D.assign(9);  decompose(parts1,matrix);  System.out.println(A);  System.out.println(B);  System.out.println(C);  System.out.println(D);}  }
class C{  private int measureHeight(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  mAscent=(int)mTextPaint.ascent();  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  getCurrentProcessor().ignorableWhitespace(this,ch,start,length);}  }
class C{  public String nextVariableName(String base){  int i=0;  loop:   while (true) {    String name=base + (++i);    for (    Node node1 : getGraph().getNodes()) {      if (node1.getName().equals(name)) {        continue loop;      }    }    break;  }  return base + i;}  }
class C{  public Composer toX(long animDuration,float x,Ease ease){  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;  mTweenParameterList.add(new TweenParameter(x,beforeParam.y,beforeParam.alpha,beforeParam.scaleX,beforeParam.scaleY,beforeParam.rotation,animDuration,ease));  return this;}  }
class C{  public static boolean isDeclarationBinding(IBinding binding){switch (binding.getKind()) {case IBinding.TYPE:    return ((ITypeBinding)binding).getTypeDeclaration() == binding;case IBinding.VARIABLE:  return ((IVariableBinding)binding).getVariableDeclaration() == binding;case IBinding.METHOD:return ((IMethodBinding)binding).getMethodDeclaration() == binding;}return true;}  }
class C{  private void enforceStaggeredLayout(){  if (width != MATCH_PARENT) {    width=MATCH_PARENT;  }  if (height == MATCH_PARENT) {    height=WRAP_CONTENT;  }}  }
class C{  public final int code(){  return this.status;}  }
class C{  public void addSprite(OdorWorldEntity sprite){  sprites.add(sprite);}  }
class C{  final void unsplice(Node pred,Node s){  s.forgetContents();  if (pred != null && pred != s && pred.next == s) {    Node n=s.next;    if (n == null || (n != s && pred.casNext(s,n) && pred.isMatched())) {      for (; ; ) {        Node h=head;        if (h == pred || h == s || h == null)         return;        if (!h.isMatched())         break;        Node hn=h.next;        if (hn == null)         return;        if (hn != h && casHead(h,hn))         h.forgetNext();      }      if (pred.next != pred && s.next != s) {        for (; ; ) {          int v=sweepVotes;          if (v < SWEEP_THRESHOLD) {            if (casSweepVotes(v,v + 1))             break;          } else           if (casSweepVotes(v,0)) {            sweep();            break;          }        }      }    }  }}  }
class C{  public void readFromParcel(Parcel in){  left=in.readInt();  top=in.readInt();  right=in.readInt();  bottom=in.readInt();}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.DECLARED_TYPE_WITH_ACCESS_MODIFIER;}  }
class C{  private boolean updateJournalTotal(){  String sql="UPDATE GL_Journal j" + " SET (TotalDr, TotalCr) = (SELECT COALESCE(SUM(AmtAcctDr),0), COALESCE(SUM(AmtAcctCr),0)" + " FROM GL_JournalLine jl WHERE jl.IsActive='Y' AND j.GL_Journal_ID=jl.GL_Journal_ID) "+ "WHERE GL_Journal_ID="+ getGL_Journal_ID();  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 1)   log.warning("afterSave - Update Journal #" + no);  int GL_JournalBatch_ID=DB.getSQLValue(get_TrxName(),"SELECT GL_JournalBatch_ID FROM GL_Journal WHERE GL_Journal_ID=?",getGL_Journal_ID());  if (GL_JournalBatch_ID != 0) {    StringBuilder sql2=new StringBuilder("UPDATE GL_JournalBatch jb").append(" SET (TotalDr, TotalCr) = (SELECT COALESCE(SUM(TotalDr),0), COALESCE(SUM(TotalCr),0)").append(" FROM GL_Journal j WHERE jb.GL_JournalBatch_ID=j.GL_JournalBatch_ID) ").append("WHERE GL_JournalBatch_ID=").append("(SELECT DISTINCT GL_JournalBatch_ID FROM GL_Journal WHERE GL_Journal_ID=").append(getGL_Journal_ID()).append(")");    no=DB.executeUpdate(sql2.toString(),get_TrxName());    if (no != 1)     log.warning("Update Batch #" + no);  }  return no == 1;}  }
class C{  public static boolean inCompiledCode(){  return false;}  }
class C{  public void success(JSONArray message){  try {    WritableArray writableArray=SQLitePluginConverter.jsonToReact(message);    successCallback.invoke(writableArray);  } catch (  JSONException ex) {    errorCallback.invoke("Internal error converting results:" + ex.getMessage());  }}  }
class C{  @Override public <T extends ServiceDocument>List<T> queryDocuments(Class<T> documentType,ImmutableMap<String,String> terms) throws BadRequestException, DocumentNotFoundException, TimeoutException, InterruptedException {  checkNotNull(documentType,"Cannot query documents with null documentType");  QueryTask.QuerySpecification spec=QueryTaskUtils.buildQuerySpec(documentType,terms);  spec.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  Operation result=postToBroadcastQueryService(spec);  return QueryTaskUtils.getBroadcastQueryDocuments(documentType,result);}  }
class C{  public static String toFieldName(String collectionField){  return dict.get(collectionField);}  }
class C{  public boolean visit(DoStatement node){  return true;}  }
class C{  public boolean isAck(){  return this == DISTRIBUTED_ACK || this == GLOBAL;}  }
class C{  public static void serialize(Serializable object,OutputStream outputStream) throws IOException {  ObjectOutputStream out=null;  try {    out=new ObjectOutputStream(outputStream);    out.writeObject(object);  }  finally {    if (out != null) {      out.close();    }  }}  }
class C{  @Override public RealmSampleUserItem withSelectable(boolean selectable){  this.mSelectable=selectable;  return this;}  }
class C{  private boolean validateAndSave(boolean force){  String name=checkNotSet(mName.getText());  String apn=checkNotSet(mApn.getText());  String mcc=checkNotSet(mMcc.getText());  String mnc=checkNotSet(mMnc.getText());  int dataSub=0;  if (getErrorMsg() != null && !force) {    showDialog(ERROR_DIALOG_ID);    return false;  }  if (!mCursor.moveToFirst()) {    Log.w(TAG,"Could not go to the first row in the Cursor when saving data.");    return false;  }  if (force && mNewApn && name.length() < 1 && apn.length() < 1) {    getContentResolver().delete(mUri,null,null);    return false;  }  ContentValues values=new ContentValues();  values.put(Telephony.Carriers.NAME,name.length() < 1 ? getResources().getString(R.string.untitled_apn) : name);  values.put(Telephony.Carriers.APN,apn);  values.put(Telephony.Carriers.PROXY,checkNotSet(mProxy.getText()));  values.put(Telephony.Carriers.PORT,checkNotSet(mPort.getText()));  values.put(Telephony.Carriers.MMSPROXY,checkNotSet(mMmsProxy.getText()));  values.put(Telephony.Carriers.MMSPORT,checkNotSet(mMmsPort.getText()));  values.put(Telephony.Carriers.USER,checkNotSet(mUser.getText()));  values.put(Telephony.Carriers.SERVER,checkNotSet(mServer.getText()));  values.put(Telephony.Carriers.PASSWORD,checkNotSet(mPassword.getText()));  values.put(Telephony.Carriers.MMSC,checkNotSet(mMmsc.getText()));  String authVal=mAuthType.getValue();  if (authVal != null) {    values.put(Telephony.Carriers.AUTH_TYPE,Integer.parseInt(authVal));  }  values.put(Telephony.Carriers.PROTOCOL,checkNotSet(mProtocol.getValue()));  values.put(Telephony.Carriers.ROAMING_PROTOCOL,checkNotSet(mRoamingProtocol.getValue()));  values.put(Telephony.Carriers.TYPE,checkNotSet(mApnType.getText()));  values.put(Telephony.Carriers.MCC,mcc);  values.put(Telephony.Carriers.MNC,mnc);  values.put(Telephony.Carriers.NUMERIC,mcc + mnc);  try {    dataSub=Settings.Global.getInt(getContentResolver(),Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION);  } catch (  SettingNotFoundException snfe) {    if (MSimTelephonyManager.getDefault().isMultiSimEnabled()) {      Log.e(TAG,"Exception Reading Multi Sim Data Subscription Value.",snfe);    }  }  if (mCurMnc != null && mCurMcc != null) {    if (mCurMnc.equals(mnc) && mCurMcc.equals(mcc) && mSubscription == dataSub) {      values.put(Telephony.Carriers.CURRENT,1);    }  }  String bearerVal=mBearer.getValue();  if (bearerVal != null) {    values.put(Telephony.Carriers.BEARER,Integer.parseInt(bearerVal));  }  values.put(Telephony.Carriers.MVNO_TYPE,checkNotSet(mMvnoType.getValue()));  values.put(Telephony.Carriers.MVNO_MATCH_DATA,checkNotSet(mMvnoMatchData.getText()));  getContentResolver().update(mUri,values,null,null);  return true;}  }
class C{  public static Point2D.Double polarToPoint2D(double angle,double fx,double fy){  double si=sin(angle);  double co=cos(angle);  return new Point2D.Double(fx * co + 0.5,fy * si + 0.5);}  }
class C{  public Organization update(String organizationId,Organization update) throws NotFoundException, ConflictException, ServerException {  requireNonNull(organizationId,"Required non-null organization id");  requireNonNull(update,"Required non-null organization");  checkNameReservation(update.getName());  final OrganizationImpl organization=organizationDao.getById(organizationId);  organization.setName(update.getName());  organizationDao.update(organization);  return organization;}  }
class C{  protected void notifyReconnection(){  for (  ConnectionListener listener : getConnectionListeners()) {    try {      listener.reconnectionSuccessful();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isGeoLocationPushSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_GEOLOCATION_PUSH);}  }
class C{  public Object OLDexecute(Object o,InternalContextAdapter context) throws IllegalAccessException, MethodInvocationException {  if (method == null)   return null;  try {    return method.invoke(o,args);  } catch (  InvocationTargetException ite) {    throw new MethodInvocationException("Invocation of method 'get(\"" + args[0] + "\")'"+ " in  "+ o.getClass()+ " threw exception "+ ite.getTargetException().getClass(),ite.getTargetException(),"get");  }catch (  IllegalArgumentException iae) {    return null;  }}  }
class C{  public void init(char[] buffer,int offset,int length){  _buffer=buffer;  _offset=offset;  _length=length;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean touch(String file) throws IOException {  return !exists(file) && (new File(file)).createNewFile();}  }
class C{  public void accept(String systemId,InterfaceVersion interfaceVersion) throws PDUStringException, IllegalStateException, IOException {  StringValidator.validateString(systemId,StringParameter.SYSTEM_ID);  lock.lock();  try {    if (!done) {      done=true;      try {        responseHandler.sendBindResp(systemId,interfaceVersion,bindType,originalSequenceNumber);      }  finally {        condition.signal();      }    } else {      throw new IllegalStateException("Response already initiated");    }  }  finally {    lock.unlock();  }  done=true;}  }
class C{  public void remove(int key){  if (key == 0) {    zeroKey=false;    return;  }  checkSizeRemove();  int index=getIndex(key);  int plus=1;  do {    int k=keys[index];    if (k == key) {      keys[index]=0;      values[index]=DELETED;      deletedCount++;      size--;      return;    } else     if (k == 0 && values[index] == 0) {      return;    }    index=(index + plus++) & mask;  } while (plus <= len);}  }
class C{  public PrimMST(EdgeWeightedGraph G){  edgeTo=new Edge[G.V()];  distTo=new double[G.V()];  marked=new boolean[G.V()];  pq=new IndexMinPQ<Double>(G.V());  for (int v=0; v < G.V(); v++)   distTo[v]=Double.POSITIVE_INFINITY;  for (int v=0; v < G.V(); v++)   if (!marked[v])   prim(G,v);  assert check(G);}  }
class C{  @Override public String childByInstance(Selector collection,Selector child,int instance) throws UiObjectNotFoundException {  UiObject obj;  if (exist(collection) && objInfo(collection).isScrollable()) {    obj=new UiScrollable(collection.toUiSelector()).getChildByInstance(child.toUiSelector(),instance);  } else {    obj=new UiCollection(collection.toUiSelector()).getChildByInstance(child.toUiSelector(),instance);  }  return addUiObject(obj);}  }
class C{  public String title(){  return m_title;}  }
class C{  public void resetTransactionIsolationTo(IsolationsSavePointer savePointer){  if (savePointer == null)   return;  try {    savePointer.restoreIsolationsToParentLevel();  } catch (  SQLException e) {    throw new JDBCException("failed to restore Isolations.",e,null);  }  if (savePointer.getParentSavePointer() != null) {    this.isp=savePointer.getParentSavePointer();    this.lastIsolationLevel=savePointer.getParentSavePointer().getIsolationLevel();  } else {    this.isp=null;    this.lastIsolationLevel=0;  }}  }
class C{  public Boolean isVsanSupported(){  return vsanSupported;}  }
class C{  @Override public Class<CumulativeTimeBucket> handledType(){  return CumulativeTimeBucket.class;}  }
class C{  protected void desFunc(int[] wKey,byte[] in,int inOff,byte[] out,int outOff){  int work, right, left;  left=(in[inOff + 0] & 0xff) << 24;  left|=(in[inOff + 1] & 0xff) << 16;  left|=(in[inOff + 2] & 0xff) << 8;  left|=(in[inOff + 3] & 0xff);  right=(in[inOff + 4] & 0xff) << 24;  right|=(in[inOff + 5] & 0xff) << 16;  right|=(in[inOff + 6] & 0xff) << 8;  right|=(in[inOff + 7] & 0xff);  work=((left >>> 4) ^ right) & 0x0f0f0f0f;  right^=work;  left^=(work << 4);  work=((left >>> 16) ^ right) & 0x0000ffff;  right^=work;  left^=(work << 16);  work=((right >>> 2) ^ left) & 0x33333333;  left^=work;  right^=(work << 2);  work=((right >>> 8) ^ left) & 0x00ff00ff;  left^=work;  right^=(work << 8);  right=((right << 1) | ((right >>> 31) & 1)) & 0xffffffff;  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=((left << 1) | ((left >>> 31) & 1)) & 0xffffffff;  for (int round=0; round < 8; round++) {    int fval;    work=(right << 28) | (right >>> 4);    work^=wKey[round * 4 + 0];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=right ^ wKey[round * 4 + 1];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    left^=fval;    work=(left << 28) | (left >>> 4);    work^=wKey[round * 4 + 2];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=left ^ wKey[round * 4 + 3];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    right^=fval;  }  right=(right << 31) | (right >>> 1);  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=(left << 31) | (left >>> 1);  work=((left >>> 8) ^ right) & 0x00ff00ff;  right^=work;  left^=(work << 8);  work=((left >>> 2) ^ right) & 0x33333333;  right^=work;  left^=(work << 2);  work=((right >>> 16) ^ left) & 0x0000ffff;  left^=work;  right^=(work << 16);  work=((right >>> 4) ^ left) & 0x0f0f0f0f;  left^=work;  right^=(work << 4);  out[outOff + 0]=(byte)((right >>> 24) & 0xff);  out[outOff + 1]=(byte)((right >>> 16) & 0xff);  out[outOff + 2]=(byte)((right >>> 8) & 0xff);  out[outOff + 3]=(byte)(right & 0xff);  out[outOff + 4]=(byte)((left >>> 24) & 0xff);  out[outOff + 5]=(byte)((left >>> 16) & 0xff);  out[outOff + 6]=(byte)((left >>> 8) & 0xff);  out[outOff + 7]=(byte)(left & 0xff);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void collectVehiclesInfo(){  Set<Id> set=new HashSet<Id>(this.transitRoute.getDepartures().size() * 2);  for (  Departure departure : this.transitRoute.getDepartures().values()) {    if (departure.getVehicleId() != null) {      set.add(departure.getVehicleId());    }  }  this.routeVehicles=set;}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  @Override public String toString(){  return cronExpression;}  }
class C{  private static int checkPkcs1Encoding(byte[] encoded,int pLen){  int correct=0;  correct|=(encoded[0] ^ 2);  int plen=encoded.length - (pLen + 1);  for (int i=1; i < plen; i++) {    int tmp=encoded[i];    tmp|=tmp >> 1;    tmp|=tmp >> 2;    tmp|=tmp >> 4;    correct|=(tmp & 1) - 1;  }  correct|=encoded[encoded.length - (pLen + 1)];  correct|=correct >> 1;  correct|=correct >> 2;  correct|=correct >> 4;  return ~((correct & 1) - 1);}  }
class C{  public int verify(Message m,byte[] b,TSIGRecord old){  return verify(m,b,b.length,old);}  }
class C{  protected BusinessObjectDataDdlCollectionResponse generateBusinessObjectDataDdlCollectionImpl(BusinessObjectDataDdlCollectionRequest businessObjectDataDdlCollectionRequest){  validateBusinessObjectDataDdlCollectionRequest(businessObjectDataDdlCollectionRequest);  BusinessObjectDataDdlCollectionResponse businessObjectDataDdlCollectionResponse=new BusinessObjectDataDdlCollectionResponse();  List<BusinessObjectDataDdl> businessObjectDataDdlResponses=new ArrayList<>();  businessObjectDataDdlCollectionResponse.setBusinessObjectDataDdlResponses(businessObjectDataDdlResponses);  List<String> ddls=new ArrayList<>();  for (  BusinessObjectDataDdlRequest request : businessObjectDataDdlCollectionRequest.getBusinessObjectDataDdlRequests()) {    BusinessObjectDataDdl businessObjectDataDdl=generateBusinessObjectDataDdlImpl(request,true);    businessObjectDataDdlResponses.add(businessObjectDataDdl);    ddls.add(businessObjectDataDdl.getDdl());  }  businessObjectDataDdlCollectionResponse.setDdlCollection(StringUtils.join(ddls,"\n\n"));  return businessObjectDataDdlCollectionResponse;}  }
class C{  public void registerOutParameter(String parameterName,SQLType sqlType,String typeName) throws SQLException {  super.registerOutParameter(parameterName,translateAndCheckSqlType(sqlType),typeName);}  }
class C{  public static String stringFor(int n){switch (n) {case cudaComputeModeDefault:    return "cudaComputeModeDefault";case cudaComputeModeExclusive:  return "cudaComputeModeExclusive";case cudaComputeModeProhibited:return "cudaComputeModeProhibited";case cudaComputeModeExclusiveProcess:return "cudaComputeModeExclusiveProcess";}return "INVALID cudaComputeMode: " + n;}  }
class C{  public void addHole(Polygon poly){  if (_holes == null) {    _holes=new ArrayList<Polygon>();  }  _holes.add(poly);}  }
class C{  private List<JdbcStatement> createDefaultUpdateJdbcStatements(){  List<JdbcStatement> jdbcStatements=new ArrayList<>();{    JdbcStatement jdbcStatement=new JdbcStatement();    jdbcStatement.setType(JdbcStatementType.UPDATE);    jdbcStatement.setSql(MockJdbcOperations.CASE_1_SQL);    jdbcStatements.add(jdbcStatement);  }  return jdbcStatements;}  }
class C{  public static FileSystem fileSystem(){  return get().fileSystem();}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) @Override int calculateEndLeftBound(float xAxisDelta){  return (int)(getView().getX() + xAxisDelta);}  }
class C{  public static String showInternalInputDialog(Component parentComponent,Object message){  return showInternalInputDialog(parentComponent,message,UIManager.getString("OptionPane.inputDialogTitle",parentComponent),QUESTION_MESSAGE);}  }
class C{  public void cancelPicker(){  if (device != null) {    device.cancelPairing();  }  device=null;}  }
class C{  public static ConcurrentLinkedQueue<Item> queue(){  return que.get();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.462 -0500",hash_original_method="6152413E77E62620D4330DAF5944A1B1",hash_generated_method="08F4CAC237F3618F93B18A9A4E1E9CA1") public SIPHeader parseSIPHeader(String header) throws ParseException {  int start=0;  int end=header.length() - 1;  try {    while (header.charAt(start) <= 0x20)     start++;    while (header.charAt(end) <= 0x20)     end--;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new ParseException("Empty header.",0);  }  StringBuffer buffer=new StringBuffer(end + 1);  int i=start;  int lineStart=start;  boolean endOfLine=false;  while (i <= end) {    char c=header.charAt(i);    if (c == '\r' || c == '\n') {      if (!endOfLine) {        buffer.append(header.substring(lineStart,i));        endOfLine=true;      }    } else {      if (endOfLine) {        endOfLine=false;        if (c == ' ' || c == '\t') {          buffer.append(' ');          lineStart=i + 1;        } else {          lineStart=i;        }      }    }    i++;  }  buffer.append(header.substring(lineStart,i));  buffer.append('\n');  HeaderParser hp=ParserFactory.createParser(buffer.toString());  if (hp == null)   throw new ParseException("could not create parser",0);  return hp.parse();}  }
class C{  public void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){  setPropertiesFromAttributes();  layoutChanged(X_AXIS);  layoutChanged(Y_AXIS);  super.changedUpdate(changes,a,f);}  }
class C{  void addGroupChat(GroupChatImpl groupChat){  String chatId=groupChat.getChatId();  mGroupChatCache.put(chatId,groupChat);  if (sLogger.isActivated()) {    sLogger.debug("Add Group Chat to list (size=" + mGroupChatCache.size() + ") for chatId "+ chatId);  }}  }
class C{  private File prepareFile(File file){  if (file.isDirectory()) {    file=new File(file,DEFAULT_RAML_FILENAME);  } else {    if (!file.getName().toLowerCase().endsWith(RAML_EXTENSION)) {      file=new File(file.getAbsolutePath() + RAML_EXTENSION);    }  }  return file;}  }
class C{  public static TVMirrorsFragment newInstance(int position,String series,String[] titles,String[] links,String[] episodes,String[] seasons,String imgUri,int numSeasons,int numEpisodes,int rating){  final TVMirrorsFragment fragment=new TVMirrorsFragment();  final Bundle args=new Bundle();  args.putInt(ARG_POSITION,position);  args.putStringArray(ARG_TITLES,titles);  args.putString(ARG_SERIES,series);  args.putStringArray(ARG_LINKS,links);  args.putStringArray(ARG_EPISODES,episodes);  args.putStringArray(ARG_SEASONS,seasons);  args.putString(ARG_IMAGE_URI,imgUri);  args.putInt(ARG_NUM_SEASONS,numSeasons);  args.putInt(ARG_NUM_EPISODES,numEpisodes);  args.putInt(ARG_RATING,rating);  fragment.setArguments(args);  return fragment;}  }
class C{  private void writeExecute() throws DfuException, DeviceDisconnectedException, UploadAbortedException, UnknownResponseException, RemoteDfuException {  if (!mConnected)   throw new DeviceDisconnectedException("Unable to read Checksum: device disconnected");  writeOpCode(mControlPointCharacteristic,OP_CODE_EXECUTE);  final byte[] response=readNotificationResponse();  final int status=getStatusCode(response,OP_CODE_EXECUTE_KEY);  if (status != DFU_STATUS_SUCCESS)   throw new RemoteDfuException("Executing object failed",status);}  }
class C{  protected void waitForDownloadOrTimeout(long id,long poll,long timeoutMillis) throws TimeoutException, InterruptedException {  doWaitForDownloadsOrTimeout(new Query().setFilterById(id),poll,timeoutMillis);  waitForReceiverNotifications(1);}  }
class C{  public Query like(Terms... likeTerms) throws IOException {  Map<String,Int> termFreqMap=new HashMap<>();  for (  Terms vector : likeTerms) {    addTermFrequencies(termFreqMap,vector);  }  return createQuery(createQueue(termFreqMap));}  }
class C{  private void processEntry(ManifestEntryVerifier mev) throws IOException {  if (!parsingBlockOrSF) {    JarEntry je=mev.getEntry();    if ((je != null) && (je.signers == null)) {      je.signers=mev.verify(verifiedSigners,sigFileSigners);      je.certs=mapSignersToCertArray(je.signers);    }  } else {    try {      parsingBlockOrSF=false;      if (debug != null) {        debug.println("processEntry: processing block");      }      String uname=mev.getEntry().getName().toUpperCase(Locale.ENGLISH);      if (uname.endsWith(".SF")) {        String key=uname.substring(0,uname.length() - 3);        byte bytes[]=baos.toByteArray();        sigFileData.put(key,bytes);        Iterator<SignatureFileVerifier> it=pendingBlocks.iterator();        while (it.hasNext()) {          SignatureFileVerifier sfv=it.next();          if (sfv.needSignatureFile(key)) {            if (debug != null) {              debug.println("processEntry: processing pending block");            }            sfv.setSignatureFile(bytes);            sfv.process(sigFileSigners,manifestDigests);          }        }        return;      }      String key=uname.substring(0,uname.lastIndexOf("."));      if (signerCache == null)       signerCache=new ArrayList<>();      if (manDig == null) {synchronized (manifestRawBytes) {          if (manDig == null) {            manDig=new ManifestDigester(manifestRawBytes);            manifestRawBytes=null;          }        }      }      SignatureFileVerifier sfv=new SignatureFileVerifier(signerCache,manDig,uname,baos.toByteArray());      if (sfv.needSignatureFileBytes()) {        byte[] bytes=sigFileData.get(key);        if (bytes == null) {          if (debug != null) {            debug.println("adding pending block");          }          pendingBlocks.add(sfv);          return;        } else {          sfv.setSignatureFile(bytes);        }      }      sfv.process(sigFileSigners,manifestDigests);    } catch (    IOException ioe) {      if (debug != null)       debug.println("processEntry caught: " + ioe);    }catch (    SignatureException se) {      if (debug != null)       debug.println("processEntry caught: " + se);    }catch (    NoSuchAlgorithmException nsae) {      if (debug != null)       debug.println("processEntry caught: " + nsae);    }catch (    CertificateException ce) {      if (debug != null)       debug.println("processEntry caught: " + ce);    }  }}  }
class C{  private LookupResult tryAsLoaderClassOrScript(String name,CompilationUnit compilationUnit){  GroovyClassLoader loader=compilationUnit.getClassLoader();  Map<String,Boolean> options=compilationUnit.configuration.getOptimizationOptions();  boolean useAsm=!Boolean.FALSE.equals(options.get("asmResolving"));  boolean useClassLoader=!Boolean.FALSE.equals(options.get("classLoaderResolving"));  LookupResult result=useAsm ? findDecompiled(name,compilationUnit,loader) : null;  if (result != null) {    return result;  }  if (!useClassLoader) {    return tryAsScript(name,compilationUnit,null);  }  return findByClassLoading(name,compilationUnit,loader);}  }
class C{  public ThrowableSet mightThrow(Unit u){  return ThrowableSet.Manager.v().ALL_THROWABLES;}  }
class C{  public static double rRSEfitness(boolean useTrainingData,GEPIndividual ind){  double rRSE=rRSErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + rRSE);}  }
class C{  public static int[] toIntArray(Boolean[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  public static String applyActionsToString(OFInstructionApplyActions inst,Logger log) throws Exception {  return ActionUtils.actionsToString(inst.getActions(),log);}  }
class C{  public boolean isTitleUsed(String title){  boolean isTitleUsed=false;  Cursor cursor=this.getReadableDatabase().query(ServerConstants.TABLE_NAME,ServerConstants.ALL,ServerConstants.TITLE + " = " + DatabaseUtils.sqlEscapeString(title),null,null,null,null);  if (cursor.moveToNext()) {    isTitleUsed=true;  }  cursor.close();  return isTitleUsed;}  }
class C{  public void clear(){  int cols=getCols();  int rows=getRows();  for (int row=0; row < rows; row++) {    for (int col=0; col < cols; col++) {      cellFormat[row][col]=currentFormatFill;      buffer[row][col]=0;    }  }  flush();}  }
class C{  public void pushBack(){  if (ttype != TT_NOTHING)   pushedBack=true;}  }
class C{  private void play(int episodeId){  Episode episode=null;  if (episodeId != -1) {    episode=EpisodeModel.getEpisodeById(this,episodeId);    Playlist playlist=new Playlist();    playlist.addToBeginning(episode.getGeneratedId());    PlaylistModel.savePlaylist(this,playlist);  }  if (episode == null && mCurrentEpisode == null && AppPrefHelper.getInstance(this).getLastPlayedEpisodeId() != -1) {    episode=EpisodeModel.getEpisodeById(this,AppPrefHelper.getInstance(this).getLastPlayedEpisodeId());  }  play(episode,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public RegionSpanIterator(Region r){  int[] bounds=new int[4];  r.getBounds(bounds);  lox=bounds[0];  loy=bounds[1];  hix=bounds[2];  hiy=bounds[3];  isrect=r.isRectangular();  ri=r.getIterator();}  }
class C{  void processClientHello(){  CipherSuite cipher_suite;  checkCompression: {    for (int i=0; i < clientHello.compression_methods.length; i++) {      if (clientHello.compression_methods[i] == 0) {        break checkCompression;      }    }    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");  }  byte[] server_version=clientHello.client_version;  if (!ProtocolVersion.isSupported(clientHello.client_version)) {    if (clientHello.client_version[0] >= 3) {      server_version=ProtocolVersion.TLSv1.version;    } else {      fatalAlert(AlertProtocol.PROTOCOL_VERSION,"PROTOCOL VERSION. Unsupported client version " + clientHello.client_version[0] + clientHello.client_version[1]);    }  }  isResuming=false;  FIND:   if (clientHello.session_id.length != 0) {    SSLSessionImpl sessionToResume;    boolean reuseCurrent=false;    if (session != null && Arrays.equals(session.id,clientHello.session_id)) {      if (session.isValid()) {        isResuming=true;        break FIND;      }      reuseCurrent=true;    }    sessionToResume=findSessionToResume(clientHello.session_id);    if (sessionToResume == null || !sessionToResume.isValid()) {      if (!parameters.getEnableSessionCreation()) {        if (reuseCurrent) {          sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);          status=NOT_HANDSHAKING;          clearMessages();          return;        }        fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");      }      session=null;    } else {      session=(SSLSessionImpl)sessionToResume.clone();      isResuming=true;    }  }  if (isResuming) {    cipher_suite=session.cipherSuite;    checkCipherSuite: {      for (int i=0; i < clientHello.cipher_suites.length; i++) {        if (cipher_suite.equals(clientHello.cipher_suites[i])) {          break checkCipherSuite;        }      }      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");    }  } else {    cipher_suite=selectSuite(clientHello.cipher_suites);    if (cipher_suite == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. NO COMMON SUITE");    }    if (!parameters.getEnableSessionCreation()) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");    }    session=new SSLSessionImpl(cipher_suite,parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getInetAddress().getHostName(),socketOwner.getPort());    }  }  recordProtocol.setVersion(server_version);  session.protocol=ProtocolVersion.getByVersion(server_version);  session.clientRandom=clientHello.random;  serverHello=new ServerHello(parameters.getSecureRandom(),server_version,session.getId(),cipher_suite,(byte)0);  session.serverRandom=serverHello.random;  send(serverHello);  if (isResuming) {    sendChangeCipherSpec();    return;  }  if (!cipher_suite.isAnonymous()) {    X509Certificate[] certs=null;    String certType=cipher_suite.getServerKeyType();    if (certType == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO CERT TYPE FOR " + cipher_suite.getName());    }    String alias=null;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseServerAlias(certType,null,this.socketOwner);      } else {        alias=ekm.chooseEngineServerAlias(certType,null,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseServerAlias(certType,null,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    if (certs == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO SERVER CERTIFICATE FOUND");      return;    }    session.localCertificates=certs;    serverCert=new CertificateMessage(certs);    privKey=km.getPrivateKey(alias);    send(serverCert);  }  RSAPublicKey rsakey=null;  DHPublicKeySpec dhkeySpec=null;  byte[] hash=null;  BigInteger p=null;  BigInteger g=null;  KeyPairGenerator kpg=null;  try {    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      PublicKey pk=serverCert.certs[0].getPublicKey();      if (getRSAKeyLength(pk) > 512) {        kpg=KeyPairGenerator.getInstance("RSA");        kpg.initialize(512);      }    } else     if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {      kpg=KeyPairGenerator.getInstance("DH");      p=new BigInteger(1,DHParameters.getPrime());      g=new BigInteger("2");      DHParameterSpec spec=new DHParameterSpec(p,g);      kpg.initialize(spec);    }  } catch (  Exception e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);  }  if (kpg != null) {    DigitalSignature ds=new DigitalSignature(cipher_suite.authType);    KeyPair kp=null;    try {      kp=kpg.genKeyPair();      if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {        rsakey=(RSAPublicKey)kp.getPublic();      } else {        DHPublicKey dhkey=(DHPublicKey)kp.getPublic();        KeyFactory kf=KeyFactory.getInstance("DH");        dhkeySpec=kf.getKeySpec(dhkey,DHPublicKeySpec.class);      }      if (!cipher_suite.isAnonymous()) {        ds.init(privKey);        privKey=kp.getPrivate();        ds.update(clientHello.getRandom());        ds.update(serverHello.getRandom());        if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {          ServerKeyExchange.updateSignatureRsa(ds,rsakey.getModulus(),rsakey.getPublicExponent());        } else {          ServerKeyExchange.updateSignatureDh(ds,dhkeySpec.getP(),dhkeySpec.getG(),dhkeySpec.getY());        }        hash=ds.sign();      } else {        privKey=kp.getPrivate();      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    }    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      serverKeyExchange=new ServerKeyExchange(rsakey.getModulus(),rsakey.getPublicExponent(),null,hash);    } else {      serverKeyExchange=new ServerKeyExchange(p,g,dhkeySpec.getY(),hash);    }    send(serverKeyExchange);  }  certRequest:   if (parameters.getWantClientAuth() || parameters.getNeedClientAuth()) {    X509Certificate[] accepted;    try {      X509TrustManager tm=parameters.getTrustManager();      accepted=tm.getAcceptedIssuers();    } catch (    ClassCastException e) {      break certRequest;    }    byte[] requestedClientCertTypes={CipherSuite.TLS_CT_RSA_SIGN,CipherSuite.TLS_CT_DSS_SIGN};    certificateRequest=new CertificateRequest(requestedClientCertTypes,accepted);    send(certificateRequest);  }  serverHelloDone=new ServerHelloDone();  send(serverHelloDone);  status=NEED_UNWRAP;}  }
class C{  @Override public void addPropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.addPropertyChangeListener(name,pcl);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  boolean isValid=maxOffset >= -1 && formats.length > maxOffset && offsets.length > maxOffset && argumentNumbers.length > maxOffset;  if (isValid) {    int lastOffset=pattern.length() + 1;    for (int i=maxOffset; i >= 0; --i) {      if ((offsets[i] < 0) || (offsets[i] > lastOffset)) {        isValid=false;        break;      } else {        lastOffset=offsets[i];      }    }  }  if (!isValid) {    throw new InvalidObjectException("Could not reconstruct MessageFormat from corrupt stream.");  }}  }
class C{  public static boolean verify(String json,JsonPathVerify jsonPathVerify){  Object pathResultObject=JsonPath.read(json,jsonPathVerify.getPath());  return pathResultObject.equals(jsonPathVerify.getResult());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isMatch(Class<?>[] paramA,Class<?>[] paramB){  if (paramA.length != paramB.length)   return false;  for (int i=paramA.length - 1; i >= 0; i--) {    if (!paramA[i].equals(paramB[i]))     return false;  }  return true;}  }
class C{  public double areaUnderROC(int classIndex){  if (m_Predictions == null) {    return Utils.missingValue();  } else {    ThresholdCurve tc=new ThresholdCurve();    Instances result=tc.getCurve(m_Predictions,classIndex);    return ThresholdCurve.getROCArea(result);  }}  }
class C{  public AccessibilityNodeInfoCompat findLast(){  if (mTree == null) {    return null;  }  return AccessibilityNodeInfoCompat.obtain(mTree.getRoot().getLastNode().getNode());}  }
class C{  public static IndexWriter writer(String pathToIndexDir,IndexWriterConfig config) throws IOException {  return new IndexWriter(new MMapDirectory(new File(pathToIndexDir)),config);}  }
class C{  public void sendRtpPacket(Buffer buffer) throws NetworkException {  RtpPacket packet=buildRtpPacket(buffer);  if (packet == null) {    return;  }  int size=packet.calcLength();  packet.assemble(size);  transmit(packet);}  }
class C{  protected void validate_return(StorageArray[] param){}  }
class C{  private static void write(CharSequence from,File to,Charset charset,boolean append) throws IOException {  asCharSink(to,charset,modes(append)).write(from);}  }
class C{  public Builder withTerm(long term){  response.term=Assert.argNot(term,term <= 0,"term must be positive");  return this;}  }
class C{  public void clearEvidence(Collection<String> variables){  evidence.removePairs(variables);}  }
class C{  protected String translate(final String name){  return "data/sprites/" + name + ".png";}  }
class C{  public Object[] toArray(Object[] arry){synchronized (children) {    return children.keySet().toArray(arry);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.303 -0500",hash_original_method="657780C747B6551FC5B90D954C172ACE",hash_generated_method="657780C747B6551FC5B90D954C172ACE") Attributes cloneAttributes(){  if (!inStartElement) {    throw new IllegalStateException(OUTSIDE_START_ELEMENT);  }  if (attributeCount == 0) {    return ClonedAttributes.EMPTY;  }  int clonePointer=cloneAttributes(this.attributePointer,this.attributeCount);  return new ClonedAttributes(pointer,clonePointer,attributeCount);}  }
class C{  private void preInit(){  int count=4;  m_columnName=new String[count];  m_label=new Label[count];  m_from=new WEditor[count];  m_to=new WEditor[count];  preInit(0,2163,DisplayType.TableDir,AD_ORG_ID);  preInit(1,2762,DisplayType.Search,C_BPARTNER_ID);  preInit(2,971,DisplayType.Search,AD_USER_ID);  preInit(3,2221,DisplayType.Search,M_PRODUCT_ID);}  }
class C{  protected Socket __openPassiveDataConnection(int command,String arg) throws IOException, FtpExceptionCanNotHaveDataConnection {  Socket socket;  if (pasv() != FTPReply.ENTERING_PASSIVE_MODE)   throw new FtpExceptionCanNotHaveDataConnection("pasv() failed. " + getReplyString());  try {    __parsePassiveModeReply(getReplyStrings()[0]);  } catch (  MalformedServerReplyException e) {    throw new FtpExceptionCanNotHaveDataConnection(e.getMessage());  }  socket=_socketFactory_.createSocket(__passiveHost,__passivePort);  if (!FTPReply.isPositivePreliminary(sendCommand(command,arg))) {    socket.close();    return null;  }  if (__remoteVerificationEnabled && !verifyRemote(socket)) {    InetAddress host1, host2;    host1=socket.getInetAddress();    host2=getRemoteAddress();    socket.close();    throw new FtpExceptionCanNotHaveDataConnection("Host attempting data connection " + host1.getHostAddress() + " is not same as server "+ host2.getHostAddress()+ " So we intentionally close it for security precaution.");  }  if (__dataTimeout >= 0)   socket.setSoTimeout(__dataTimeout);  return socket;}  }
class C{  protected boolean release(InternalDistributedMember grantor,String serviceName,boolean lockBatch,int lockId){  DM dm=getDistributionManager();  DLockReleaseMessage msg=new DLockReleaseMessage();  msg.processorId=getProcessorId();  msg.serviceName=serviceName;  msg.objectName=this.objectName;  msg.lockBatch=lockBatch;  msg.lockId=lockId;  msg.setRecipient(grantor);  if (grantor.equals(dm.getId())) {    msg.setSender(grantor);    msg.processLocally(dm);  } else {    dm.putOutgoing(msg);  }  try {    waitForRepliesUninterruptibly();  } catch (  ReplyException e) {    e.handleAsUnexpected();  }  if (this.reply == null)   return false;  return this.reply.replyCode == DLockReleaseReplyMessage.OK;}  }
class C{  public boolean isSupported(){  return true;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof DrawingTool) {    Debug.message("demo","DemoLayer: found a drawing tool");    setDrawingTool((DrawingTool)someObj);  }  if (someObj instanceof SymbolReferenceLibrary) {    setSymbolReferenceLibrary((SymbolReferenceLibrary)someObj);  }}  }
class C{  @RequestMapping(method=RequestMethod.PUT,value="/{region}/{keys}",consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value="update data for key",notes="Update or insert (put) data for key in region." + "op=REPLACE, update (replace) data with key if and only if the key exists in region" + "op=CAS update (compare-and-set) value having key with a new value if and only if the \"@old\" value sent matches the current value for the key in region",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=400,message="Bad Request."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist or if key is not mapped to some value for REPLACE or CAS."),@ApiResponse(code=409,message="For CAS, @old value does not match to the current value in region"),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('WRITE', #region, #keys)") public ResponseEntity<?> update(@PathVariable("region") String region,@PathVariable("keys") final String[] keys,@RequestParam(value="op",defaultValue="PUT") final String opValue,@RequestBody final String json){  logger.debug("updating key(s) for region ({}) ",region);  region=decode(region);  if (keys.length > 1) {    return updateMultipleKeys(region,keys,json);  } else {    return updateSingleKey(region,keys[0],json,opValue);  }}  }
class C{  static Object makeArray(int len,Class<?> c){  Object a=Array.newInstance(c,len);  for (int i=0; i < len; i++) {    Array.set(a,i,testValue(i,c));  }  return a;}  }
class C{  public synchronized boolean isClosed(){  return closed;}  }
class C{  public Bindings add(String property,JList list){  registerPropertyChangeListener(list);  return add(new JListBinding(property,list));}  }
class C{  @Bean public String activitiDbSchemaUpdateParam(){  return ProcessEngineConfigurationImpl.DB_SCHEMA_UPDATE_CREATE;}  }
class C{  @Override protected void removeAt(int index){  _set[index]=(float)0;  super.removeAt(index);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    MiniClientSageRenderer mcsr=(MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine();    if (mcsr.supportsAdvancedAspectRatios()) {      mcsr.setAdvancedARMode(getString(stack));      return null;    }  }  stack.getUIMgrSafe().getVideoFrame().setAspectRatioMode(BasicVideoFrame.getAspectRatioCode(getString(stack)));  return null;}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    setDocAction(DOCACTION_None);    return false;  }  if (getC_BankStatementLine_ID() > 0)   return reverseCorrectIt();  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus())|| DOCSTATUS_Approved.equals(getDocStatus())|| DOCSTATUS_NotApproved.equals(getDocStatus())) {    addDescription(Msg.getMsg(getCtx(),"Voided") + " (" + getPayAmt()+ ")");    setPayAmt(Env.ZERO);    setDiscountAmt(Env.ZERO);    setWriteOffAmt(Env.ZERO);    setOverUnderAmt(Env.ZERO);    setIsAllocated(false);    deAllocate();  } else   return reverseCorrectIt();  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public void cleanClassTable(){  for (Iterator<String> i=classTable.keySet().iterator(); i.hasNext(); ) {    flex2.compiler.abc.AbcClass c=classTable.get(i.next());    c.setTypeTable(null);  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public static String prepareExpression(String expression){  String result=StringUtil.convertOperatorSubstitutions(expression);  result=result.replace("[]","['add']");  int openBrace=result.indexOf("[+");  int closeBrace=(openBrace == -1 ? -1 : result.indexOf(']',openBrace));  if (closeBrace != -1) {    String base=result.substring(0,openBrace);    String property=result.substring(openBrace + 2,closeBrace).trim();    String end=result.substring(closeBrace + 1);    result=base + "['insert@" + property+ "']"+ end;  }  return result;}  }
class C{  protected void removeNodesWithNegativeScores(Element topNode){  Elements gravityItems=topNode.select("*[gravityScore]");  for (  Element item : gravityItems) {    int score=Integer.parseInt(item.attr("gravityScore"));    if (score < 0 || item.text().length() < minParagraphText)     item.remove();  }}  }
class C{  public Fonseca(){  super(2,2);}  }
class C{  private void updateOverflowIndicator(){  if (getLineCount() > 1) {    showOverflow=true;    panel.repaint();  } else {    showOverflow=false;    panel.repaint();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void saveConnection(){  final boolean connectionChanged=!database.getConfiguration().getPassword().equals(new String(passwordField.getPassword())) || !database.getConfiguration().getHost().equals(databaseHostField.getText()) || !database.getConfiguration().getName().equals(databaseNameField.getText())|| !database.getConfiguration().getUser().equals(databaseUserField.getText());  database.getConfiguration().setAutoConnect(autoConnectBox.isSelected());  database.getConfiguration().setDescription(databaseDescriptionField.getText());  database.getConfiguration().setPassword(new String(passwordField.getPassword()));  database.getConfiguration().setSavePassword(savePasswordBox.isSelected());  database.getConfiguration().setHost(databaseHostField.getText());  database.getConfiguration().setName(databaseNameField.getText());  database.getConfiguration().setUser(databaseUserField.getText());  database.getConfiguration().setIdentity(databaseIdentityField.getText());  if (database.isConnected() && connectionChanged && (CMessageBox.showYesNoQuestion(SwingUtilities.getWindowAncestor(CDatabaseSettingsPanel.this),"To adopt the changes you have to re-connect to the database. Do you want to reconnect now?") == JOptionPane.YES_OPTION)) {    if (database.close()) {      CDatabaseConnectionFunctions.openDatabase(SwingUtilities.getWindowAncestor(CDatabaseSettingsPanel.this),database);    } else {      CMessageBox.showInformation(SwingUtilities.getWindowAncestor(CDatabaseSettingsPanel.this),"Could not close the selected database because views or other elements from the database are still open.");    }  }  ConfigManager.instance().saveSettings((JFrame)SwingUtilities.getAncestorOfClass(JFrame.class,this));}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  X509Certificate cert=this.engineLookupResolveX509Certificate(element,baseURI,storage);  if (cert != null) {    return cert.getPublicKey();  }  return null;}  }
class C{  public void retry(){  m_nToDo=RETRY;  go();}  }
class C{  public static void printRules(){  Rules[] rules=Rules.values();  AnsiConsole.out.println(Ansi.ansi().render(String.format("@|bold %d rules available|@%n",rules.length)));  for (  Rules rule : rules) {    AnsiConsole.out.println(Ansi.ansi().render(String.format("@|bold %s|@%n" + "@|underline Description:|@ %s%n" + "@|underline Style Guide:|@ %s%n",rule.getName(),rule.getDescription(),rule.getLink())));  }}  }
class C{  @SideOnly(Side.CLIENT) public boolean isFull3D(){  return true;}  }
class C{  public final boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof ProtocolVersion)) {    return false;  }  ProtocolVersion that=(ProtocolVersion)obj;  return ((this.protocol.equals(that.protocol)) && (this.major == that.major) && (this.minor == that.minor));}  }
class C{  public ColumnList addColumn(IColumn column){  return this.addColumn(column.family(),column.qualifier(),column.timestamp(),column.value());}  }
class C{  public BitwiseByteArray(final long size,final int bits){  this(size,bits,ARR_SIZE,false);}  }
class C{  public void onSensorChanged(SensorEvent event){switch (event.sensor.getType()) {case Sensor.TYPE_ACCELEROMETER:    final float alpha=0.8f;  acceleration[0]=event.values[0];acceleration[1]=event.values[1];acceleration[2]=event.values[2];gravity[0]=alpha * gravity[0] + (1 - alpha) * event.values[0];gravity[1]=alpha * gravity[1] + (1 - alpha) * event.values[1];gravity[2]=alpha * gravity[2] + (1 - alpha) * event.values[2];linear_acceleration[0]=event.values[0] - gravity[0];linear_acceleration[1]=event.values[1] - gravity[1];linear_acceleration[2]=event.values[2] - gravity[2];updateScreenOrientation();break;case Sensor.TYPE_MAGNETIC_FIELD:geomagnetic[0]=event.values[0];geomagnetic[1]=event.values[1];geomagnetic[2]=event.values[2];updateScreenOrientation();break;}}  }
class C{  @Override public void processEndElement() throws ParseException {  try {    dateTime=DateTime.parseDateTime(value);  } catch (  NumberFormatException e) {    throw new ParseException(CoreErrorDomain.ERR.invalidDatetime.withInternalReason("Invalid date/time format: '" + value + "'."));  }}  }
class C{  private void foldAllProofs(){  Vector<Annotation> modifiedAnnotations=new Vector<Annotation>();  for (Iterator<TLAProofPosition> it=foldPositions.iterator(); it.hasNext(); ) {    TLAProofPosition proofPosition=it.next();    if (!proofPosition.getAnnotation().isCollapsed()) {      proofPosition.getAnnotation().markCollapsed();      modifiedAnnotations.add(proofPosition.getAnnotation());    }  }  editor.modifyProjectionAnnotations((Annotation[])modifiedAnnotations.toArray(new ProjectionAnnotation[modifiedAnnotations.size()]));}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void unbind(){  minXWorld.unbind();  maxXWorld.unbind();  minYWorld.unbind();  maxYWorld.unbind();}  }
class C{  private void addAndRunTask(Runnable task){  mTaskEngine.execute(task);}  }
class C{  private void applyNexus5BackCameraFrameRateWorkaround(RequestTemplate requestTemplate){  Range<Integer> frameRateBackOff=new Range<>(7,28);  mLogger.v("Applying Nexus5 specific framerate backoff of " + frameRateBackOff);  requestTemplate.setParam(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE,frameRateBackOff);}  }
class C{  @Override public String method(){  return _method;}  }
class C{  public RevenueShareModel copy(){  RevenueShareModel rs=new RevenueShareModel();  rs.setRevenueShare(getRevenueShare());  rs.setRevenueShareModelType(getRevenueShareModelType());  return rs;}  }
class C{  public Terrain(String terrain){  int firstColon=terrain.indexOf(':');  int lastColon=terrain.lastIndexOf(':');  String name=terrain.substring(0,firstColon);  type=Terrains.getType(name);  if (firstColon == lastColon) {    level=levelFor(terrain.substring(firstColon + 1));    exitsSpecified=false;    if ((type == Terrains.BUILDING) || (type == Terrains.FUEL_TANK)) {      exitsSpecified=true;    }  } else {    level=levelFor(terrain.substring(firstColon + 1,lastColon));    exitsSpecified=true;    exits=levelFor(terrain.substring(lastColon + 1));  }  terrainFactor=Terrains.getTerrainFactor(type,level);}  }
class C{  public boolean hasComboString(){  return hasExtension(GwoComboString.class);}  }
class C{  public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){  super(source,propertyName,oldValue,newValue);  this.index=index;}  }
class C{  @SuppressWarnings("unchecked") public boolean preCheck(final Entity entity,final Player player){  final StendhalRPZone zone=player.getZone();  if (parent != null) {    final EntitySlot rpslot=parent.getEntitySlot(slot);    if (rpslot == null) {      return false;    }    rpslot.clearErrorMessage();    if (!rpslot.isReachableForThrowingThingsIntoBy(player)) {      player.sendPrivateText(rpslot.getErrorMessage());      logger.debug("Unreachable slot");      return false;    }    if (rpslot.isFull()) {      boolean isStackable=false;      if (entity instanceof Stackable<?>) {        final Stackable<?> stackEntity=(Stackable<?>)entity;        final Iterator<RPObject> it=rpslot.iterator();        while (it.hasNext()) {          final RPObject object=it.next();          if (object instanceof Stackable<?>) {            @SuppressWarnings("rawtypes") final Stackable other=(Stackable<?>)object;            if (other.isStackable(stackEntity)) {              isStackable=true;            }          }        }      }      if (!isStackable) {        player.sendPrivateText("There is no space in there.");        return false;      }    }    if (rpslot.hasAsAncestor(entity)) {      logger.warn("tried to put item " + entity.getID() + " into itself, equip rejected");      return false;    }    if (entity instanceof Item) {      Item item=(Item)entity;      if (item.isBound() && rpslot.isTargetBoundCheckRequired()) {        player.sendPrivateText("You cannot put this special quest reward there because it can only be used by you.");        return false;      }      if ((item.getDeterioration() > 0) && rpslot.getName().equals("trade")) {        player.sendPrivateText("You must not trade a damaged item with other players.");        return false;      }    }  } else {    logger.debug("entity: " + entity + " zone: "+ zone);    if ((zone != null) && zone.simpleCollides(entity,x,y,entity.getWidth(),entity.getHeight())) {      logger.warn("object " + entity + " collides with "+ x+ "x"+ y);      player.sendPrivateText("There is no space on there.");      return false;    }    if (!entity.isContained() && (entity.squaredDistance(x,y) > (8 * 8))) {      logger.warn("object " + entity + " is too far away from "+ x+ ","+ y);      player.sendPrivateText("That is too far away.");      return false;    }    if (!isGamblingZoneAndIsDice(entity,player)) {      final List<Node> path=Path.searchPath(entity,zone,player.getX(),player.getY(),new Rectangle(x,y,1,1),64,false);      if (path.isEmpty()) {        player.sendPrivateText("There is no easy path to that place.");        return false;      }    }  }  return true;}  }
class C{  protected Object createJvmClassLoadingMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   return new JvmClassLoadingImpl(this,server); else   return new JvmClassLoadingImpl(this);}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  public TransferResult transferOwnership(BufferAllocator target){  if (isEmpty) {    return new TransferResult(true,this);  }  final BufferLedger otherLedger=this.ledger.getLedgerForAllocator(target);  final ArrowBuf newBuf=otherLedger.newArrowBuf(offset,length,null);  final boolean allocationFit=this.ledger.transferBalance(otherLedger);  return new TransferResult(allocationFit,newBuf);}  }
class C{  void updateRack(HeartbeatImpl heartbeat,UpdateRackHeartbeat updateRack){  for (  UpdateServerHeartbeat serverUpdate : updateRack.getServers()) {    if (serverUpdate == null) {      continue;    }    update(serverUpdate);    ServerHeartbeat peerServer=findServer(serverUpdate.getAddress(),serverUpdate.getPort());    if (peerServer.isSelf()) {      continue;    }    heartbeat.updateServer(peerServer,serverUpdate);  }  update();}  }
class C{  @Override public void syncStateChanged(){  boolean wasSyncInitialized=mIsSyncInitialized;  boolean wasPassphraseRequired=mIsPassphraseRequired;  mIsSyncInitialized=mProfileSyncService.isSyncInitialized();  mIsPassphraseRequired=mIsSyncInitialized && mProfileSyncService.isPassphraseRequiredForDecryption();  if (mIsSyncInitialized != wasSyncInitialized || mIsPassphraseRequired != wasPassphraseRequired) {    updateSyncStateFromSwitch();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.590 -0500",hash_original_method="B004628D88AAF4473352CE6B2CF39886",hash_generated_method="F58CAB0DD2CC456758563908E1440099") private Request createRequest(String method,SIPResponse sipResponse) throws SipException {  if (method == null || sipResponse == null)   throw new NullPointerException("null argument");  if (method.equals(Request.CANCEL))   throw new SipException("Dialog.createRequest(): Invalid request");  if (this.getState() == null || (this.getState().getValue() == TERMINATED_STATE && !method.equalsIgnoreCase(Request.BYE)) || (this.isServer() && this.getState().getValue() == EARLY_STATE && method.equalsIgnoreCase(Request.BYE)))   throw new SipException("Dialog  " + getDialogId() + " not yet established or terminated "+ this.getState());  SipUri sipUri=null;  if (this.getRemoteTarget() != null)   sipUri=(SipUri)this.getRemoteTarget().getURI().clone(); else {    sipUri=(SipUri)this.getRemoteParty().getURI().clone();    sipUri.clearUriParms();  }  CSeq cseq=new CSeq();  try {    cseq.setMethod(method);    cseq.setSeqNumber(this.getLocalSeqNumber());  } catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Unexpected error");    InternalErrorHandler.handleException(ex);  }  ListeningPointImpl lp=(ListeningPointImpl)this.sipProvider.getListeningPoint(sipResponse.getTopmostVia().getTransport());  if (lp == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Cannot find listening point for transport " + sipResponse.getTopmostVia().getTransport());    throw new SipException("Cannot find listening point for transport " + sipResponse.getTopmostVia().getTransport());  }  Via via=lp.getViaHeader();  From from=new From();  from.setAddress(this.localParty);  To to=new To();  to.setAddress(this.remoteParty);  SIPRequest sipRequest=sipResponse.createRequest(sipUri,via,cseq,from,to);  if (SIPRequest.isTargetRefresh(method)) {    ContactHeader contactHeader=((ListeningPointImpl)this.sipProvider.getListeningPoint(lp.getTransport())).createContactHeader();    ((SipURI)contactHeader.getAddress().getURI()).setSecure(this.isSecure());    sipRequest.setHeader(contactHeader);  }  try {    cseq=(CSeq)sipRequest.getCSeq();    cseq.setSeqNumber(this.localSequenceNumber + 1);  } catch (  InvalidArgumentException ex) {    InternalErrorHandler.handleException(ex);  }  if (method.equals(Request.SUBSCRIBE)) {    if (eventHeader != null)     sipRequest.addHeader(eventHeader);  }  try {    if (this.getLocalTag() != null) {      from.setTag(this.getLocalTag());    } else {      from.removeTag();    }    if (this.getRemoteTag() != null) {      to.setTag(this.getRemoteTag());    } else {      to.removeTag();    }  } catch (  ParseException ex) {    InternalErrorHandler.handleException(ex);  }  this.updateRequest(sipRequest);  return sipRequest;}  }
class C{  public void resumeTrigger(TriggerKey triggerKey) throws SchedulerException {  try {    getRemoteScheduler().resumeTrigger(triggerKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  void checkReadLock() throws DLIllegalStateException, LockingException {synchronized (this) {    if ((null == lockAcquireFuture) || (!lockAcquireFuture.isDefined())) {      throw new DLIllegalStateException("Attempt to check for lock before it has been acquired successfully");    }  }  readLock.checkOwnership();}  }
class C{  @SuppressWarnings("BusyWait") public void writeLock(){  long threadId=Thread.currentThread().getId();  if (threadId == writeLockOwner) {    assert state == -1;    writeLockEntryCnt++;    return;  }  while (true) {    int pendingWLocks0=pendingWLocks;    if (compareAndSet(PENDING_WLOCKS_OFFS,pendingWLocks0,pendingWLocks0 + 1))     break;  }  boolean interrupted=false;  while (!compareAndSet(STATE_OFFS,0,-1)) {    try {      Thread.sleep(10);    } catch (    InterruptedException ignored) {      interrupted=true;    }  }  while (true) {    int pendingWLocks0=pendingWLocks;    assert pendingWLocks0 > 0;    if (compareAndSet(PENDING_WLOCKS_OFFS,pendingWLocks0,pendingWLocks0 - 1))     break;  }  if (interrupted)   Thread.currentThread().interrupt();  assert writeLockOwner == -1;  writeLockOwner=threadId;  writeLockEntryCnt=1;}  }
class C{  public static void main(String... args) throws SQLException {  new FtpServer().runTool(args);}  }
class C{  public UnsupportedOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testRandomHugeStrings() throws Exception {  Random random=random();  final Analyzer a=new JapaneseAnalyzer(null,Mode.SEARCH,JapaneseAnalyzer.getDefaultStopSet(),JapaneseAnalyzer.getDefaultStopTags());  checkRandomData(random,a,2 * RANDOM_MULTIPLIER,8192);  a.close();}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public boolean indexContainsRepeatableGroup(){  FormEntryCaption[] groups=getCaptionHierarchy();  if (groups.length == 0) {    return false;  }  for (int i=0; i < groups.length; i++) {    if (groups[i].repeats())     return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.300 -0400",hash_original_method="EF06695079F2C9BA1719975CFCD8F116",hash_generated_method="E93289BAEBC31F389CBAABE9FE2D4253") public NoRouteToHostException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void visitIntInsn(int opcode,int operand){  if (mv != null) {    mv.visitIntInsn(opcode,operand);  }}  }
class C{  public static void logResult(String result,PrintWriter localOut){  localOut.println(getTime() + " " + result);}  }
class C{  public PaneOpsProgFrame(DecoderFile decoderFile,RosterEntry r,String name,String file,Programmer p){  super(decoderFile,r,name,file,p,true);  if (log.isDebugEnabled()) {    log.debug("PaneOpsProgFrame \"" + name + "\" constructed");  }}  }
class C{  public ActionAttributesExist(String... attributes){  this.attributes=new LinkedList<String>(Arrays.asList(attributes));}  }
class C{  public void testInvalidMethod(){  rpcForwarder.registerService(new FakeServiceImpl(REQUEST));  assertInvalidMethodFails();  rpcForwarder.registerBlockingService(new FakeServiceImpl(REQUEST).toBlockingService());  assertInvalidMethodFails();}  }
class C{  @Override public String toString(){  String result="RegressionSplitEvaluator: ";  if (m_Template == null) {    return result + "<null> classifier";  }  return result + m_Template.getClass().getName() + " "+ m_ClassifierOptions+ "(version "+ m_ClassifierVersion+ ")";}  }
class C{  @Override public boolean pressKey(String key) throws RemoteException {  boolean result;  key=key.toLowerCase();  if ("home".equals(key))   result=device.pressHome(); else   if ("back".equals(key))   result=device.pressBack(); else   if ("left".equals(key))   result=device.pressDPadLeft(); else   if ("right".equals(key))   result=device.pressDPadRight(); else   if ("up".equals(key))   result=device.pressDPadUp(); else   if ("down".equals(key))   result=device.pressDPadDown(); else   if ("center".equals(key))   result=device.pressDPadCenter(); else   if ("menu".equals(key))   result=device.pressMenu(); else   if ("search".equals(key))   result=device.pressSearch(); else   if ("enter".equals(key))   result=device.pressEnter(); else   if ("delete".equals(key) || "del".equals(key))   result=device.pressDelete(); else   if ("recent".equals(key))   result=device.pressRecentApps(); else   if ("volume_up".equals(key))   result=device.pressKeyCode(KeyEvent.KEYCODE_VOLUME_UP); else   if ("volume_down".equals(key))   result=device.pressKeyCode(KeyEvent.KEYCODE_VOLUME_DOWN); else   if ("volume_mute".equals(key))   result=device.pressKeyCode(KeyEvent.KEYCODE_VOLUME_MUTE); else   if ("camera".equals(key))   result=device.pressKeyCode(KeyEvent.KEYCODE_CAMERA); else   result="power".equals(key) && device.pressKeyCode(KeyEvent.KEYCODE_POWER);  return result;}  }
class C{  public DataParseException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  private boolean checkCatalogExistence(File catalogParentFolder,boolean checkCatalogFolderOnly){  if (!catalogParentFolder.exists()) {    if (logger.isTraceEnabled())     logger.trace("checkCatalogExistence: true (parent does not exist");    return true;  }switch (currentProfile.getDeviceMode()) {case Nook:    File trookFile=new File(catalogParentFolder,Constants.TROOK_SEARCH_DATABASE_FILENAME);  if (!trookFile.exists()) {    if (logger.isTraceEnabled())     logger.trace("checkCatalogExistence: false (trook database file does not exist");    return false;  }break;default :File catalogFolder;if (currentProfile.getOnlyCatalogAtTarget()) {catalogFolder=catalogParentFolder;} else {catalogFolder=new File(catalogParentFolder,CatalogManager.getCatalogFolderName());}if ((false == catalogFolder.exists()) && (true == checkCatalogFolderOnly)) {if (logger.isTraceEnabled()) logger.trace("checkCatalogExistence: true (catalog folder does not exist");return true;}if (logger.isTraceEnabled()) logger.trace("checkCatalogExistence: Check for catalog at " + catalogFolder.getPath());if (!catalogFolder.exists()) {if (logger.isTraceEnabled()) logger.trace("checkCatalogExistence: false (catalog folder does not exist)");return false;}File desktopFile=new File(catalogFolder,"desktop.css");if (!desktopFile.exists()) {if (logger.isTraceEnabled()) logger.trace("checkCatalogExistence: false (desktop.css file does not exist)");return false;}File mobileFile=new File(catalogFolder,"mobile.css");if (!mobileFile.exists()) {if (logger.isTraceEnabled()) logger.trace("checkCatalogExistence: false (desktop.css file does not exist)");return false;}break;}if (logger.isTraceEnabled()) logger.trace("checkCatalogExistence: true");return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void generateLegalTimesTree(){  final int k0=KeyEvent.KEYCODE_0;  final int k1=KeyEvent.KEYCODE_1;  final int k2=KeyEvent.KEYCODE_2;  final int k3=KeyEvent.KEYCODE_3;  final int k4=KeyEvent.KEYCODE_4;  final int k5=KeyEvent.KEYCODE_5;  final int k6=KeyEvent.KEYCODE_6;  final int k7=KeyEvent.KEYCODE_7;  final int k8=KeyEvent.KEYCODE_8;  final int k9=KeyEvent.KEYCODE_9;  mLegalTimesTree=new Node();  if (mIs24HourView) {    Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5);    Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    minuteFirstDigit.addChild(minuteSecondDigit);    Node firstDigit=new Node(k0,k1);    mLegalTimesTree.addChild(firstDigit);    Node secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    Node thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    secondDigit=new Node(k6,k7,k8,k9);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    firstDigit=new Node(k2);    mLegalTimesTree.addChild(firstDigit);    secondDigit=new Node(k0,k1,k2,k3);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteFirstDigit);    secondDigit=new Node(k4,k5);    firstDigit.addChild(secondDigit);    secondDigit.addChild(minuteSecondDigit);    firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(minuteFirstDigit);  } else {    Node ampm=new Node(getAmOrPmKeyCode(AM),getAmOrPmKeyCode(PM));    Node firstDigit=new Node(k1);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    Node secondDigit=new Node(k0,k1,k2);    firstDigit.addChild(secondDigit);    secondDigit.addChild(ampm);    Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    thirdDigit.addChild(fourthDigit);    fourthDigit.addChild(ampm);    thirdDigit=new Node(k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    secondDigit=new Node(k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);    firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9);    mLegalTimesTree.addChild(firstDigit);    firstDigit.addChild(ampm);    secondDigit=new Node(k0,k1,k2,k3,k4,k5);    firstDigit.addChild(secondDigit);    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);    secondDigit.addChild(thirdDigit);    thirdDigit.addChild(ampm);  }}  }
class C{  @Override protected Byte _get(ByteBuffer buffer,int index){  return buffer.get(index);}  }
class C{  public void removeRange(int fromIndex,int toIndex){  if (fromIndex >= size || toIndex > size) {    throwException3(fromIndex,toIndex);  }  int moveCount=size - toIndex;  System.arraycopy(data,toIndex,data,fromIndex,moveCount);  size-=(toIndex - fromIndex);}  }
class C{  public static void handleHeaderView(DrawerBuilder drawer){  if (drawer.mAccountHeader != null) {    if (drawer.mAccountHeaderSticky) {      drawer.mStickyHeaderView=drawer.mAccountHeader.getView();    } else {      drawer.mHeaderView=drawer.mAccountHeader.getView();      drawer.mHeaderDivider=drawer.mAccountHeader.mAccountHeaderBuilder.mDividerBelowHeader;      drawer.mHeaderPadding=drawer.mAccountHeader.mAccountHeaderBuilder.mPaddingBelowHeader;    }  }  if (drawer.mStickyHeaderView != null) {    RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);    layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP,1);    drawer.mStickyHeaderView.setId(R.id.material_drawer_sticky_header);    drawer.mSliderLayout.addView(drawer.mStickyHeaderView,0,layoutParams);    RelativeLayout.LayoutParams layoutParamsListView=(RelativeLayout.LayoutParams)drawer.mRecyclerView.getLayoutParams();    layoutParamsListView.addRule(RelativeLayout.BELOW,R.id.material_drawer_sticky_header);    drawer.mRecyclerView.setLayoutParams(layoutParamsListView);    drawer.mStickyHeaderView.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(drawer.mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));    if (Build.VERSION.SDK_INT >= 21) {      drawer.mStickyHeaderView.setElevation(UIUtils.convertDpToPixel(4,drawer.mActivity));    } else {      View view=new View(drawer.mActivity);      view.setBackgroundResource(R.drawable.material_drawer_shadow_bottom);      drawer.mSliderLayout.addView(view,RelativeLayout.LayoutParams.MATCH_PARENT,(int)UIUtils.convertDpToPixel(4,drawer.mActivity));      RelativeLayout.LayoutParams lps=(RelativeLayout.LayoutParams)view.getLayoutParams();      lps.addRule(RelativeLayout.BELOW,R.id.material_drawer_sticky_header);      view.setLayoutParams(lps);    }    drawer.mRecyclerView.setPadding(0,0,0,0);  }  if (drawer.mHeaderView != null) {    if (drawer.mRecyclerView == null) {      throw new RuntimeException("can't use a headerView without a recyclerView");    }    if (drawer.mHeaderPadding) {      drawer.getAdapter().addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mHeaderView).withDivider(drawer.mHeaderDivider).withViewPosition(ContainerDrawerItem.Position.TOP));    } else {      drawer.getAdapter().addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mHeaderView).withDivider(drawer.mHeaderDivider).withViewPosition(ContainerDrawerItem.Position.NONE));    }    drawer.mRecyclerView.setPadding(drawer.mRecyclerView.getPaddingLeft(),0,drawer.mRecyclerView.getPaddingRight(),drawer.mRecyclerView.getPaddingBottom());  }}  }
class C{  public boolean isSet(String parameterKey){  if (keyToValueMap.containsKey(parameterKey)) {    return true;  } else {    ParameterType type=keyToTypeMap.get(parameterKey);    if (type == null) {      return false;    }    return type.getDefaultValue() != null;  }}  }
class C{  public static List<String> toLabelPath(Node node){  final LinkedList<String> paths=new LinkedList<String>();  Node current=node;  Node parent=firstParent(node);  while (parent != null) {    paths.addFirst(current.getLabel());    current=parent;    parent=firstParent(current);  }  return paths;}  }
class C{  private Bitmap processBitmap(int resId){  if (BuildConfig.DEBUG) {    Log.d(TAG,"processBitmap - " + resId);  }  return decodeSampledBitmapFromResource(mResources,resId,mImageWidth,mImageHeight);}  }
class C{  public BigInteger optBigInteger(int index,BigInteger defaultValue){  try {    return this.getBigInteger(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static LazyQueueX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  public static UIComponent findChildByTagId(FacesContext context,UIComponent parent,String id){  UIComponent c=null;  UIViewRoot root=context.getViewRoot();  boolean hasDynamicComponents=(null != root && root.getAttributes().containsKey(RIConstants.TREE_HAS_DYNAMIC_COMPONENTS));  String cid=null;  List<UIComponent> components;  String facetName=getFacetName(parent);  if (null != facetName) {    c=parent.getFacet(facetName);    if (null != c) {      cid=(String)c.getAttributes().get(MARK_CREATED);      if (id.equals(cid)) {        return c;      }    }  }  if (0 < parent.getFacetCount()) {    components=new ArrayList<>();    components.addAll(parent.getFacets().values());    components.addAll(parent.getChildren());  } else {    components=parent.getChildren();  }  int len=components.size();  for (int i=0; i < len; i++) {    c=components.get(i);    cid=(String)c.getAttributes().get(MARK_CREATED);    if (id.equals(cid)) {      return c;    }    if (c instanceof UIPanel && c.getAttributes().containsKey(IMPLICIT_PANEL)) {      for (      UIComponent c2 : c.getChildren()) {        cid=(String)c2.getAttributes().get(MARK_CREATED);        if (id.equals(cid)) {          return c2;        }      }    }    if (hasDynamicComponents) {      UIComponent foundChild=findChildByTagId(context,c,id);      if (foundChild != null) {        return foundChild;      }    }  }  return null;}  }
class C{  @Override public void start(){  for (int i=0; i < threadCount; ++i) {    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();    for (    SystemStreamPartition ssp : ssps) {      if (Math.abs(ssp.hashCode()) % threadCount == i) {        threadSsps.add(ssp);      }    }    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),"MockSystemConsumer-" + i);    thread.setDaemon(true);    threads.add(thread);    thread.start();  }}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestRatio.class);}  }
class C{  public static boolean toBool(String str){  try {    return Boolean.parseBoolean(str);  } catch (  Exception e) {  }  return false;}  }
class C{  public jMatrix plusEquals(jMatrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] + B.A[i][j];    }  }  return this;}  }
class C{  public ShowDebugAction(final NetworkPanel networkPanel){  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  networkPanel.getInputMap().put(KeyStroke.getKeyStroke("D"),this);  networkPanel.getActionMap().put(this,this);}  }
class C{  public DataSetProbs(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  this.dataSet=dataSet;  dims=new int[dataSet.getNumColumns()];  for (int i=0; i < dims.length; i++) {    DiscreteVariable variable=(DiscreteVariable)dataSet.getVariable(i);    dims[i]=variable.getNumCategories();  }  numRows=dataSet.getNumRows();}  }
class C{  public void export(final java.io.File exportLocation){  listFileNames().stream().forEach(null);}  }
class C{  public int scan(String table,String startkey,int recordcount,Set<String> fields,Vector<HashMap<String,ByteIterator>> result){  long st=System.nanoTime();  int res=_db.scan(table,startkey,recordcount,fields,result);  long en=System.nanoTime();  _measurements.measure("SCAN",(int)((en - st) / 1000));  _measurements.reportReturnCode("SCAN",res);  return res;}  }
class C{  public boolean offer(E e){  return addLastImpl(e);}  }
class C{  private void stopIndeterminate(){  animation.cancel();  ViewHelper.setX(progressView,0);  runAnimation=false;}  }
class C{  private void incrementValue(int inc){  if (inc > 0) {    nread+=inc;    if (nread > size) {      size=nread;    }    fireStateChanged();  }}  }
class C{  private static boolean isFinite(double v){  return v < Double.POSITIVE_INFINITY && v > Double.NEGATIVE_INFINITY;}  }
class C{  protected Anonymous_strictness_1_Impl(){  super();}  }
class C{  private CIMObjectPath createInstance(String className,String name,CIMProperty<?>[] properties) throws WBEMException {  CIMProperty<?>[] array=new CIMProperty<?>[properties.length + 1];  System.arraycopy(properties,0,array,0,properties.length);  array[properties.length]=new CIMProperty<String>(CimConstants.NAME_KEY,CIMDataType.STRING_T,name);  properties=array;  try {    return createInstance(className,properties);  } catch (  WBEMException e) {    if (e.getID() == WBEMException.CIM_ERR_ALREADY_EXISTS) {      CIMInstance instance=getInstance(className,name);      if (instance != null) {        return instance.getObjectPath();      }    }    throw e;  }}  }
class C{  private Node merge(Node h,Node x,Node y){  if (x == null && y == null)   return h; else   if (x == null)   h.sibling=merge(y,null,y.sibling); else   if (y == null)   h.sibling=merge(x,x.sibling,null); else   if (x.order < y.order)   h.sibling=merge(x,x.sibling,y); else   h.sibling=merge(y,x,y.sibling);  return h;}  }
class C{  public static boolean isChineseLanguage(){  String language=getLanguageEnv();  if (language != null && (language.trim().equals("zh-CN") || language.trim().equals("zh-TW")))   return true; else   return false;}  }
class C{  public static void write(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.CIRCLE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_CIRCLE);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeInt(w);  dos.writeInt(h);  properties.write(dos);}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  public static <T>T eachLine(File self,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return IOGroovyMethods.eachLine(newReader(self),firstLine,closure);}  }
class C{  public void addHost(String port,MacAddress host){  this.portToMac.put(port,host);  return;}  }
class C{  public static final boolean isPlayerCoralium(EntityPlayer par1){  if (Vars.dev)   return par1.getName().equals("shinoow") || par1.getName().equals("Oblivionaire"); else   return par1.getUniqueID().equals(Vars.uuid1) || par1.getUniqueID().equals(Vars.uuid2);}  }
class C{  public static String buildStringFromLines(String... lines){  int numChars=lines.length;  for (  String line : lines) {    numChars+=line.length();  }  StringBuilder builder=new StringBuilder(numChars);  for (  String line : lines) {    builder.append(line);    builder.append('\n');  }  return builder.toString();}  }
class C{  void informNodeChange(NodeEvent e){  for (  INodeChangeListener listener : nodeChangeListeners) {    listener.informNodeChange(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.221 -0500",hash_original_method="085951AB405380C6C60E1EC174C5C855",hash_generated_method="16376C82AD540DE0B3FF145F4013D4E5") public PriorityHeader createPriorityHeader(String priority) throws ParseException {  if (priority == null)   throw new NullPointerException("bad priority arg");  Priority p=new Priority();  p.setPriority(priority);  return p;}  }
class C{  @SuppressWarnings("unchecked") public void testSetIssuerNamesLjava_util_Collection02(){  X509CRLSelector selector=new X509CRLSelector();  String iss1="O=First Org.";  byte[] iss2=new byte[]{48,22,49,20,48,18,6,3,85,4,10,19,11,83,101,99,111,110,100,32,79,114,103,46};  String iss3="O=Third Org.";  TestCRL crl1=new TestCRL(new X500Principal(iss1));  TestCRL crl2=new TestCRL(new X500Principal(iss2));  TestCRL crl3=new TestCRL(new X500Principal(iss3));  try {    selector.setIssuerNames(null);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("Any CRL issuers should match in the case of null issuers.",selector.match(crl1) && selector.match(crl2));  ArrayList issuers=new ArrayList(2);  issuers.add(iss1);  issuers.add(iss2);  try {    selector.setIssuerNames(issuers);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl1) && selector.match(crl2));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl3));  issuers.add(iss3);  assertFalse("The internal issuer collection is not protected " + "against the modifications.",selector.match(crl3));}  }
class C{  public static <T>Id<T> create(final String key,final Class<T> type){  Map<String,Id<?>> map=cache.get(type);  if (map == null) {    map=new ConcurrentHashMap<String,Id<?>>();    cache.put(type,map);  }  Id<?> id=map.get(key);  if (id == null) {    id=new IdImpl<T>(key);    map.put(key,id);  }  return (Id<T>)id;}  }
class C{  public String[] parseLine(String line,boolean withLabel,boolean trace,boolean ignoreEmpty){  if (trace)   log.config("" + line);  ArrayList<String> list=new ArrayList<String>();  for (int i=0; i < m_rows.size(); i++) {    ImpFormatRow row=(ImpFormatRow)m_rows.get(i);    StringBuffer entry=new StringBuffer();    if (withLabel) {      entry.append(row.getColumnName());      entry.append("=");      if (row.isString())       entry.append("'"); else       if (row.isDate())       entry.append("TO_DATE('");    }    String info=null;    if (row.isConstant())     info="Constant"; else     if (m_formatType.equals(X_AD_ImpFormat.FORMATTYPE_FixedPosition)) {      if (row.getStartNo() > 0 && row.getEndNo() <= line.length())       info=line.substring(row.getStartNo() - 1,row.getEndNo());    } else {      info=parseFlexFormat(line,m_formatType,row.getStartNo());    }    if (Util.isEmpty(info,true)) {      if (row.getDefaultValue() != null)       info=row.getDefaultValue(); else       info="";    }    entry.append(row.parse(info));    if (withLabel) {      if (row.isString())       entry.append("'"); else       if (row.isDate())       entry.append("','YYYY-MM-DD HH24:MI:SS')");    }    if (!ignoreEmpty || (ignoreEmpty && info.length() != 0))     list.add(entry.toString());    if (trace)     log.fine(info + "=>" + entry.toString()+ " (Length="+ info.length()+ ")");  }  String[] retValue=new String[list.size()];  list.toArray(retValue);  return retValue;}  }
class C{  public static boolean isSupported(HttpCallerInfo hci){  ClassLoader loader=null;  try {    loader=Thread.currentThread().getContextClassLoader();  } catch (  SecurityException se) {    if (logger.isLoggable(PlatformLogger.Level.FINER)) {      logger.finer("NegotiateAuthentication: " + "Attempt to get the context class loader failed - " + se);    }  }  if (loader != null) {synchronized (loader) {      return isSupportedImpl(hci);    }  }  return isSupportedImpl(hci);}  }
class C{  public Arg(String aName,String desc){  this(aName,desc,0);}  }
class C{  public static void copy(Context context,String text){  ClipboardManager clipboard=(ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);  clipboard.setPrimaryClip(ClipData.newPlainText(null,text));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <T extends Comparable<? super T>>int compare(final T c1,final T c2,final boolean nullGreater){  if (c1 == c2) {    return 0;  } else   if (c1 == null) {    return nullGreater ? 1 : -1;  } else   if (c2 == null) {    return nullGreater ? -1 : 1;  }  return c1.compareTo(c2);}  }
class C{  public void muteButtonPressed(ActionEvent e){  JToggleButton b=(JToggleButton)e.getSource();  log.debug("Mute button pressed. value = " + b.isSelected());  firePropertyChange(PropertyChangeID.MUTE,!b.isSelected(),b.isSelected());}  }
class C{  public DrawerBuilder withDrawerLayout(@NonNull DrawerLayout drawerLayout){  this.mDrawerLayout=drawerLayout;  return this;}  }
class C{  public boolean isSendEMail(){  Object oo=get_Value(COLUMNNAME_SendEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean close(){  for (  final CAddressSpace addressSpace : m_addressSpaces) {    if (addressSpace.isLoaded() && !addressSpace.close()) {      return false;    }  }  for (  final INaviView view : m_views) {    if (view.isLoaded() && !view.close()) {      return false;    }  }  return true;}  }
class C{  public static String toString(long v){  final int mag=magnitude(v);  if (mag == 0) {    return "0";  }  char[] digits=new char[mag];  long f=1L;  for (int pos=mag - 1; pos >= 0; --pos, f<<=1) {    digits[pos]=((v & f) == 0) ? '0' : '1';  }  return new String(digits);}  }
class C{  protected void logErrorDisconnect(OFErrorMsg error){  logError(error);  mainConnection.disconnect();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public CloneInheritedMethods(SootClass clz,boolean allMethods,boolean copyClassifications){  clazz=clz;  methods=new SootMethodList();  this.cloneAllMethods=allMethods;  this.clonedToOriginal=HashBiMap.create();  this.copyClassifications=copyClassifications;  for (  SootMethod method : clazz.getMethods())   methods.addMethod(method);}  }
class C{  private long memAllocationUnit2Multiplier(String unit){  Long res=multipliersByMemoryAllocationUnit.get(unit.replace(" ",""));  if (res == null) {    throw new IllegalArgumentException("Cannot map " + unit + " to a known unit");  } else {    return res;  }}  }
class C{  public static Calendar reduceCalendarMin(Calendar calendar){  int roundedHours=Math.round(calendar.get(Calendar.MINUTE) / 60f);  calendar.add(Calendar.HOUR,roundedHours);  calendar.set(Calendar.MILLISECOND,0);  calendar.set(Calendar.SECOND,0);  calendar.set(Calendar.MINUTE,0);  return calendar;}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("DD_Order_ID"))   m_DD_Order_ID=e.getNewValue();  if (e.getPropertyName().equals("MovementDate"))   m_MovementDate=e.getNewValue();  executeQuery();}  }
class C{  @SuppressWarnings("unused") public void onAttackAttempt(RPEntity target,RPEntity attacker){}  }
class C{  public THashSet(){  super();}  }
class C{  public MalformedCookieException(){  super();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_FIELD_ACCESSOR;}  }
class C{  public boolean logInLastUser(){  SharedPreferences settings=mApplication.getSharedPreferences(PREFS_NAME,0);  long lastLoggedInUserId=settings.getLong(KEY_PERSISTENT_USER_ID,-1);  if (lastLoggedInUserId != -1) {    User user=mUserDataSource.getById(lastLoggedInUserId);    if (user == null) {      return false;    }    mCurrentUser=user;    return true;  }  return false;}  }
class C{  public void writeToStream(final ByteArrayOutputStream bos) throws IOException {  final ObjectOutput os=new ObjectOutputStream(bos);  os.writeObject(max_size);  for (int i=0; i < max_size; i++) {    final Area nextObj=items[i];    if (nextObj == null) {      os.writeObject(null);    } else {      final PathIterator pathIterator=nextObj.getPathIterator(new AffineTransform());      PathSerializer.serializePath(os,pathIterator);    }  }}  }
class C{  public void addHelper(String keyPrefix,BackupHelper helper){  mDispatcher.addHelper(keyPrefix,helper);}  }
class C{  public void addAll(StreamEquivalenceClass other){  memberSet.addAll(other.memberSet);}  }
class C{  public static void addProperty(String key,Object value){  RuntimeSingleton.addProperty(key,value);}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  final DistanceQuery<O> distanceQuery=database.getDistanceQuery(relation,getDistanceFunction());  final KNNQuery<O> knnQuery=database.getKNNQuery(distanceQuery,k + 1);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("kNN distance for objects",relation.size(),LOG) : null;  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore id_score=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double id=0.;    try {      id=estimator.estimate(knnQuery,iditer,k + 1);    } catch (    ArithmeticException e) {      id=0.;    }    id_score.putDouble(iditer,id);    minmax.put(id);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  DoubleRelation scoreres=new MaterializedDoubleRelation("Intrinsic dimensionality","id-score",id_score,relation.getDBIDs());  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0.0);  return new OutlierResult(meta,scoreres);}  }
class C{  public void testLastElement(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=SIZE - 1; i >= 0; --i) {    assertEquals(i,q.getLast());    assertEquals(i,q.pollLast());  }  try {    q.getLast();    shouldThrow();  } catch (  NoSuchElementException success) {  }  assertNull(q.peekLast());}  }
class C{  public static boolean isDark(@ColorInt int color){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  return isDark(hsl);}  }
class C{  public void configureForCurrentlyOpenTabs(boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceIcon.setImageResource(DeviceFormFactor.isTablet(getContext()) ? R.drawable.recent_tablet : R.drawable.recent_phone);  String title=getResources().getString(R.string.recent_tabs_this_device);  mDeviceLabel.setText(title);  setTimeLabelVisibility(View.GONE);  configureExpandedCollapsed(isExpanded);}  }
class C{  public <T>T exchange(final String url,final Class<T> responseType,final Object... urlVariables){  ResponseEntity<T> response=getRestTemplate().exchange(url,HttpMethod.GET,getRequestEntity(),responseType);  return response.getBody();}  }
class C{  protected FunctionType3(){  super(TYPE_3);}  }
class C{  private String toStringImpl(){  StringBuilder result=new StringBuilder(128);  result.append('@');  result.append(type.getName());  result.append('(');  boolean firstMember=true;  PsiNameValuePair[] attributes=myAnnotation.getParameterList().getAttributes();  for (  PsiNameValuePair e : attributes) {    if (firstMember) {      firstMember=false;    } else {      result.append(", ");    }    result.append(e.getName());    result.append('=');    PsiAnnotationMemberValue value=e.getValue();    result.append(value == null ? "null" : value.getText());  }  result.append(')');  return result.toString();}  }
class C{  public boolean isActive(String os){  if (rules.isEmpty()) {    return true;  }  boolean result=false;  for (  LibraryRuleJson rule : rules) {    if (rule.isApplicable(os)) {      result=rule.isAllowed();    }  }  return result;}  }
class C{  public LinearFunction(LagGraph lagGraph){  if (lagGraph == null) {    throw new NullPointerException("Lag graph must not be null.");  }  this.polynomialFunction=new PolynomialFunction(lagGraph);  IndexedLagGraph connectivity=polynomialFunction.getIndexedLagGraph();  for (int i=0; i < connectivity.getNumFactors(); i++) {    List terms=new ArrayList();    terms.add(new PolynomialTerm(0.0,new int[0]));    int numParents=connectivity.getNumParents(i);    for (int j=0; j < numParents; j++) {      int[] vars=new int[]{j};      terms.add(new PolynomialTerm(1.0 / (double)numParents,vars));    }    Polynomial p=new Polynomial(terms);    polynomialFunction.setPolynomial(i,p);  }}  }
class C{  @Override public int hashCode(){  return 31 * classHash() + filter.hashCode();}  }
class C{  public SerializationInputOutputFormat(){  this("Drawing","ser",new DefaultDrawing());}  }
class C{  @GET @Path("/entity/{entityid}") @Description("Returns the audit trail for an entity.") @Produces(MediaType.APPLICATION_JSON) public List<AuditDto> findByEntityId(@PathParam("entityid") BigInteger entityid,@QueryParam("limit") BigInteger limit){  if (entityid == null || entityid.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Entity ID cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (limit != null && limit.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Limit must be a positive non-zero number.",Status.BAD_REQUEST);  }  List<Audit> auditList=limit == null ? _auditService.findByEntity(entityid) : _auditService.findByEntity(entityid,limit);  if (auditList != null && auditList.size() > 0) {    return AuditDto.transformToDto(auditList);  } else {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }}  }
class C{  public static void execute(Runnable runnable){  if (runnable == null) {    return;  }  new Task(runnable).executeOnExecutor(mPool);}  }
class C{  public void add(ExprSubselectNode subselectNode,SubSelectActivationHolder holder){  subqueries.put(subselectNode,holder);}  }
class C{  public void incrementProgress(){  isSpinning=false;  progress++;  if (progress > 360)   progress=0;  postInvalidate();}  }
class C{  public static boolean isGraphQLScratchFile(Project project,VirtualFile file){  if (file.getFileType() instanceof ScratchFileType) {    final PsiManager psiManager=PsiManager.getInstance(project);    try {      final PsiFile psiFile=psiManager.findFile(file);      if (psiFile != null && psiFile.getFileType() == JSGraphQLFileType.INSTANCE) {        return true;      }    } catch (    ProcessCanceledException e) {    }  }  return false;}  }
class C{  public void flush(){  if (this.size > 0) {    xList.setSize(this.size);    yList.setSize(this.size);    this.target.addAllOf(xList,yList);    this.size=0;  }}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public void testFactory() throws Exception {  Similarity sim=getSimilarity("sim2text");  assertEquals(MockConfigurableSimilarity.class,sim.getClass());  assertEquals("is there an echo?",((MockConfigurableSimilarity)sim).getPassthrough());}  }
class C{  public void close() throws IOException {  if (jsonTupleStream != null) {    jsonTupleStream.close();  }  if (cache == null) {    client.close();  }}  }
class C{  private void assertExecutable() throws ModbusException {  if (request == null || terminal == null) {    throw new ModbusException("Assertion failed, transaction not executable");  }}  }
class C{  public void transferRAGefaehrdungsUmsetzung(GefaehrdungsUmsetzung gefaehrdungsUmsetzung,RAGefaehrdungenResult ragResult) throws IOException {  transferGefaehrdungsBewertung(gefaehrdungsUmsetzung,ragResult.getRzg().getMsUnjByZgVollstaUnjId(),ragResult.getRzg().getMsUnjByZgStaerkeUnjId(),ragResult.getRzg().getMsUnjByZgZuverlaUnjId());  transferGefaehrdungsBewertungTxt(gefaehrdungsUmsetzung,ragResult.getRzg().getZgVollstaBegr(),ragResult.getRzg().getZgStaerkeBegr(),ragResult.getRzg().getZgZuverlaBegr(),ragResult.getRzg().getMsUnjByZgUnterUnjId(),ragResult.getRzg().getZgRabBegr());  gefaehrdungsUmsetzung.setAlternative(String.valueOf(ragResult.getRisikobehandlungABCD()));  if (ragResult.getRzg().getMsUnjByZgOkUnjId().getUnjId() == GSDBConstants.UNJ_JA) {    gefaehrdungsUmsetzung.setSimpleProperty("gefaehrdungsumsetzung_okay","gefaehrdungsumsetzung_okay_yes");  } else   if (ragResult.getRzg().getMsUnjByZgOkUnjId().getUnjId() == GSDBConstants.UNJ_NEIN) {    gefaehrdungsUmsetzung.setSimpleProperty("gefaehrdungsumsetzung_okay","gefaehrdungsumsetzung_okay_no");  }  String gefNr=translateGefaehrdungsNr(ragResult.getGefaehrdung());  gefaehrdungsUmsetzung.setSimpleProperty("gefaehrdungsumsetzung_id",gefNr);  gefaehrdungsUmsetzung.setDescription(convertClobToStringEncodingSave(ragResult.getGefaehrdungTxt().getBeschreibung(),GSScraperUtil.getInstance().getModel().getEncoding()));  gefaehrdungsUmsetzung.setTitel(ragResult.getGefaehrdungTxt().getName());  String url=transferUrl(ragResult.getGefaehrdung().getLink());  gefaehrdungsUmsetzung.setUrl(url);}  }
class C{  public Bindings add(String property,JTextComponent c){  registerPropertyChangeListener(c);  return add(new JTextComponentBinding(property,c,""));}  }
class C{  public static ActionBarBackground fadeIn(AppCompatActivity activity,Integer color){  ActionBarBackground abColor=new ActionBarBackground(activity);  abColor.fadeIn(color);  return abColor;}  }
class C{  protected void processDataAdd(SimEvent ev,boolean ack){  if (ev == null) {    return;  }  Object[] pack=(Object[])ev.getData();  if (pack == null) {    return;  }  File file=(File)pack[0];  file.setMasterCopy(true);  int sentFrom=((Integer)pack[1]).intValue();  Object[] data=new Object[3];  data[0]=file.getName();  int msg=addFile(file);  if (ack) {    data[1]=Integer.valueOf(-1);    data[2]=Integer.valueOf(msg);    sendNow(sentFrom,DataCloudTags.FILE_ADD_MASTER_RESULT,data);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Vec solve(Vec b){  Vec x=U.transposeMultiply(1.0,b);  x.mutablePairwiseMultiply(DenseVector.toDenseVec(getInverseSingularValues()));  return V.multiply(x);}  }
class C{  public void parse(String line,String timeKey) throws Exception {  if (line.startsWith(FLAG)) {    String[] items=line.split(",");    if (!items[1].equals(timeKey)) {      return;    }    total=NumberUtils.toFloat(items[2]);    swap=NumberUtils.toFloat(items[5]);    totalFree=NumberUtils.toFloat(items[6]);    swapFree=NumberUtils.toFloat(items[9]);    cache=NumberUtils.toFloat(items[11]);    buffer=NumberUtils.toFloat(items[14]);  }}  }
class C{  @Override public void focusLost(FocusEvent e){  spinner.repaint();}  }
class C{  public final MessageBuilder data(String requestData){  message.setBody(requestData);  return this;}  }
class C{  protected void decodeAtom(PushbackInputStream inStream,OutputStream outStream,int rem) throws java.io.IOException {  int i;  byte a=-1, b=-1, c=-1, d=-1;  if (rem < 2) {    throw new CEFormatException("BASE64Decoder: Not enough bytes for an atom.");  }  do {    i=inStream.read();    if (i == -1) {      throw new CEStreamExhausted();    }  } while (i == '\n' || i == '\r');  decode_buffer[0]=(byte)i;  i=readFully(inStream,decode_buffer,1,rem - 1);  if (i == -1) {    throw new CEStreamExhausted();  }  if (rem > 3 && decode_buffer[3] == '=') {    rem=3;  }  if (rem > 2 && decode_buffer[2] == '=') {    rem=2;  }switch (rem) {case 4:    d=pem_convert_array[decode_buffer[3] & 0xff];case 3:  c=pem_convert_array[decode_buffer[2] & 0xff];case 2:b=pem_convert_array[decode_buffer[1] & 0xff];a=pem_convert_array[decode_buffer[0] & 0xff];break;}switch (rem) {case 2:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));break;case 3:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));outStream.write((byte)(((b << 4) & 0xf0) | ((c >>> 2) & 0xf)));break;case 4:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));outStream.write((byte)(((b << 4) & 0xf0) | ((c >>> 2) & 0xf)));outStream.write((byte)(((c << 6) & 0xc0) | (d & 0x3f)));break;}return;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(clientId);  sb.append("\n ");switch (status) {case CONNECTED:    sb.append(context.getString(R.string.connectedto));  break;case DISCONNECTED:sb.append(context.getString(R.string.disconnected));break;case NONE:sb.append(context.getString(R.string.no_status));break;case CONNECTING:sb.append(context.getString(R.string.connecting));break;case DISCONNECTING:sb.append(context.getString(R.string.disconnecting));break;case ERROR:sb.append(context.getString(R.string.connectionError));}sb.append(" ");sb.append(host);return sb.toString();}  }
class C{  public static int indexOfIgnoreCase(String str,String substring,Locale locale){  return str.toLowerCase(locale).indexOf(substring.toLowerCase(locale));}  }
class C{  public void handleRegionRemoval(Region region) throws ManagementException {  if (!isServiceInitialised("handleRegionRemoval")) {    return;  }synchronized (regionOpLock) {    ObjectName regionMBeanName=MBeanJMXAdapter.getRegionMBeanName(cacheImpl.getDistributedSystem().getDistributedMember(),region.getFullPath());    RegionMBean bean=null;    try {      bean=(RegionMBean)service.getLocalRegionMBean(region.getFullPath());    } catch (    ManagementException e) {      if (logger.isDebugEnabled()) {        logger.debug(e.getMessage(),e);      }      return;    }    if (bean != null) {      bean.stopMonitor();    }    service.unregisterMBean(regionMBeanName);    Notification notification=new Notification(JMXNotificationType.REGION_CLOSED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.REGION_CLOSED_PREFIX + region.getFullPath());    memberLevelNotifEmitter.sendNotification(notification);    memberMBeanBridge.removeRegion(region);  }}  }
class C{  public void addActionListener(AbstractAction aa){  _field.addActionListener(aa);}  }
class C{  public void addSilently(Iterable<SPINStatistics> values){  for (  SPINStatistics s : values) {    stats.add(s);  }}  }
class C{  private void compareAssembly(){  byte[] expected=asm.close(true);  byte[] actual=masm.close(true);  assertArrayEquals(expected,actual);}  }
class C{  @Override protected void initGUI(){  java.util.List<AbstractMenuItemDefinition> definitions;  JPanel imagePanel;  JPanel versionPanel;  JPanel rightPanel;  JPanel buttonsPanel;  super.initGUI();  setLayout(new BorderLayout(5,5));  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  imagePanel=new JPanel(new BorderLayout());  imagePanel.add(new JLabel(GUIHelper.getIcon("GUIChooser.png")),BorderLayout.CENTER);  add(imagePanel,BorderLayout.CENTER);  versionPanel=new JPanel(new FlowLayout(FlowLayout.CENTER));  versionPanel.add(new JLabel(Version.getVersion()),BorderLayout.SOUTH);  imagePanel.add(versionPanel,BorderLayout.SOUTH);  rightPanel=new JPanel(new BorderLayout());  rightPanel.setBorder(BorderFactory.createTitledBorder("Shortcuts"));  add(rightPanel,BorderLayout.EAST);  buttonsPanel=new JPanel(new GridLayout(0,1));  rightPanel.add(buttonsPanel,BorderLayout.NORTH);  definitions=loadDefinitions();  for (  AbstractMenuItemDefinition definition : definitions) {    if (definition.isShortcutButton())     buttonsPanel.add(definition.getButton());  }}  }
class C{  private void insertIndex(Node<K,V> z,int level){  HeadIndex<K,V> h=head;  int max=h.level;  if (level <= max) {    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idx=new Index<K,V>(z,idx,null);    addIndex(idx,h,level);  } else {    level=max + 1;    Index<K,V>[] idxs=(Index<K,V>[])new Index<?,?>[level + 1];    Index<K,V> idx=null;    for (int i=1; i <= level; ++i)     idxs[i]=idx=new Index<K,V>(z,idx,null);    HeadIndex<K,V> oldh;    int k;    for (; ; ) {      oldh=head;      int oldLevel=oldh.level;      if (level <= oldLevel) {        k=level;        break;      }      HeadIndex<K,V> newh=oldh;      Node<K,V> oldbase=oldh.node;      for (int j=oldLevel + 1; j <= level; ++j)       newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);      if (casHead(oldh,newh)) {        k=oldLevel;        break;      }    }    addIndex(idxs[k],oldh,k);  }}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  VirtualArrayList response=client.get(VirtualArrayList.class,baseUrl);  return ResourceUtils.defaultList(response.getVirtualArrays());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:01.263 -0500",hash_original_method="3FBC138270F4ADEAF27B9A0357206073",hash_generated_method="A008793A021577C8A500442E7593AECB") public boolean isServiceDiscoveryCapable(){  return (deviceCapability & DEVICE_CAPAB_SERVICE_DISCOVERY) != 0;}  }
class C{  void linkBefore(E e,Node<E> succ){  final Node<E> pred=succ.prev;  final Node<E> newNode=new Node<>(pred,e,succ);  succ.prev=newNode;  if (pred == null)   first=newNode; else   pred.next=newNode;  size++;  modCount++;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:27.873 -0500",hash_original_method="889EE3022DF864BE1DEDCF5E80AD4B15",hash_generated_method="A50B455E9322BBD2149A22537B8DDF3E") void processCode(){  try {    if (isShortCode()) {      Log.d(LOG_TAG,"isShortCode");      sendUssd(dialingNumber);    } else     if (dialingNumber != null) {      throw new RuntimeException("Invalid or Unsupported MMI Code");    } else     if (sc != null && sc.equals(SC_CLIP)) {      Log.d(LOG_TAG,"is CLIP");      if (isInterrogate()) {        phone.mCM.queryCLIP(obtainMessage(EVENT_QUERY_COMPLETE,this));      } else {        throw new RuntimeException("Invalid or Unsupported MMI Code");      }    } else     if (sc != null && sc.equals(SC_CLIR)) {      Log.d(LOG_TAG,"is CLIR");      if (isActivate()) {        phone.mCM.setCLIR(CommandsInterface.CLIR_INVOCATION,obtainMessage(EVENT_SET_COMPLETE,this));      } else       if (isDeactivate()) {        phone.mCM.setCLIR(CommandsInterface.CLIR_SUPPRESSION,obtainMessage(EVENT_SET_COMPLETE,this));      } else       if (isInterrogate()) {        phone.mCM.getCLIR(obtainMessage(EVENT_GET_CLIR_COMPLETE,this));      } else {        throw new RuntimeException("Invalid or Unsupported MMI Code");      }    } else     if (isServiceCodeCallForwarding(sc)) {      Log.d(LOG_TAG,"is CF");      String dialingNumber=sia;      int serviceClass=siToServiceClass(sib);      int reason=scToCallForwardReason(sc);      int time=siToTime(sic);      if (isInterrogate()) {        phone.mCM.queryCallForwardStatus(reason,serviceClass,dialingNumber,obtainMessage(EVENT_QUERY_CF_COMPLETE,this));      } else {        int cfAction;        if (isActivate()) {          cfAction=CommandsInterface.CF_ACTION_ENABLE;        } else         if (isDeactivate()) {          cfAction=CommandsInterface.CF_ACTION_DISABLE;        } else         if (isRegister()) {          cfAction=CommandsInterface.CF_ACTION_REGISTRATION;        } else         if (isErasure()) {          cfAction=CommandsInterface.CF_ACTION_ERASURE;        } else {          throw new RuntimeException("invalid action");        }        int isSettingUnconditionalVoice=(((reason == CommandsInterface.CF_REASON_UNCONDITIONAL) || (reason == CommandsInterface.CF_REASON_ALL)) && (((serviceClass & CommandsInterface.SERVICE_CLASS_VOICE) != 0) || (serviceClass == CommandsInterface.SERVICE_CLASS_NONE))) ? 1 : 0;        int isEnableDesired=((cfAction == CommandsInterface.CF_ACTION_ENABLE) || (cfAction == CommandsInterface.CF_ACTION_REGISTRATION)) ? 1 : 0;        Log.d(LOG_TAG,"is CF setCallForward");        phone.mCM.setCallForward(cfAction,reason,serviceClass,dialingNumber,time,obtainMessage(EVENT_SET_CFF_COMPLETE,isSettingUnconditionalVoice,isEnableDesired,this));      }    } else     if (isServiceCodeCallBarring(sc)) {      String password=sia;      int serviceClass=siToServiceClass(sib);      String facility=scToBarringFacility(sc);      if (isInterrogate()) {        phone.mCM.queryFacilityLock(facility,password,serviceClass,obtainMessage(EVENT_QUERY_COMPLETE,this));      } else       if (isActivate() || isDeactivate()) {        phone.mCM.setFacilityLock(facility,isActivate(),password,serviceClass,obtainMessage(EVENT_SET_COMPLETE,this));      } else {        throw new RuntimeException("Invalid or Unsupported MMI Code");      }    } else     if (sc != null && sc.equals(SC_PWD)) {      String facility;      String oldPwd=sib;      String newPwd=sic;      if (isActivate() || isRegister()) {        action=ACTION_REGISTER;        if (sia == null) {          facility=CommandsInterface.CB_FACILITY_BA_ALL;        } else {          facility=scToBarringFacility(sia);        }        if (newPwd.equals(pwd)) {          phone.mCM.changeBarringPassword(facility,oldPwd,newPwd,obtainMessage(EVENT_SET_COMPLETE,this));        } else {          handlePasswordError(com.android.internal.R.string.passwordIncorrect);        }      } else {        throw new RuntimeException("Invalid or Unsupported MMI Code");      }    } else     if (sc != null && sc.equals(SC_WAIT)) {      int serviceClass=siToServiceClass(sia);      if (isActivate() || isDeactivate()) {        phone.mCM.setCallWaiting(isActivate(),serviceClass,obtainMessage(EVENT_SET_COMPLETE,this));      } else       if (isInterrogate()) {        phone.mCM.queryCallWaiting(serviceClass,obtainMessage(EVENT_QUERY_COMPLETE,this));      } else {        throw new RuntimeException("Invalid or Unsupported MMI Code");      }    } else     if (isPinCommand()) {      String oldPinOrPuk=sia;      String newPin=sib;      int pinLen=newPin.length();      if (isRegister()) {        if (!newPin.equals(sic)) {          handlePasswordError(com.android.internal.R.string.mismatchPin);        } else         if (pinLen < 4 || pinLen > 8) {          handlePasswordError(com.android.internal.R.string.invalidPin);        } else         if (sc.equals(SC_PIN) && phone.mIccCard.getState() == SimCard.State.PUK_REQUIRED) {          handlePasswordError(com.android.internal.R.string.needPuk);        } else {          if (sc.equals(SC_PIN)) {            phone.mCM.changeIccPin(oldPinOrPuk,newPin,obtainMessage(EVENT_SET_COMPLETE,this));          } else           if (sc.equals(SC_PIN2)) {            phone.mCM.changeIccPin2(oldPinOrPuk,newPin,obtainMessage(EVENT_SET_COMPLETE,this));          } else           if (sc.equals(SC_PUK)) {            phone.mCM.supplyIccPuk(oldPinOrPuk,newPin,obtainMessage(EVENT_SET_COMPLETE,this));          } else           if (sc.equals(SC_PUK2)) {            phone.mCM.supplyIccPuk2(oldPinOrPuk,newPin,obtainMessage(EVENT_SET_COMPLETE,this));          }        }      } else {        throw new RuntimeException("Invalid or Unsupported MMI Code");      }    } else     if (poundString != null) {      sendUssd(poundString);    } else {      throw new RuntimeException("Invalid or Unsupported MMI Code");    }  } catch (  RuntimeException exc) {    state=State.FAILED;    message=context.getText(com.android.internal.R.string.mmiError);    phone.onMMIDone(this);  }}  }
class C{  public static void dispose(){  context.remove();}  }
class C{  public EmulatedFS(){  procFS.setContent("/cpuinfo",CPUINFO);  root.mount("/proc",procFS);  root.mount("/sdcard",sdcardFS);  root.mount("/mnt/sdcard",sdcardFS);}  }
class C{  private static String convertJava2MimeEncoding(String encoding){  EncodingInfo enc=(EncodingInfo)_encodingTableKeyJava.get(toUpperCaseFast(encoding));  if (null != enc)   return enc.name;  return encoding;}  }
class C{  public static void assertNotRelativeNS(Attr attr) throws CanonicalizationException {  if (attr == null) {    return;  }  String nodeAttrName=attr.getNodeName();  boolean definesDefaultNS=nodeAttrName.equals("xmlns");  boolean definesNonDefaultNS=nodeAttrName.startsWith("xmlns:");  if ((definesDefaultNS || definesNonDefaultNS) && namespaceIsRelative(attr)) {    String parentName=attr.getOwnerElement().getTagName();    String attrValue=attr.getValue();    Object exArgs[]={parentName,nodeAttrName,attrValue};    throw new CanonicalizationException("c14n.Canonicalizer.RelativeNamespace",exArgs);  }}  }
class C{  public void unregisterMemoryTrimmable(MemoryTrimmable trimmable){}  }
class C{  @Override protected List<FrameworkMethod> computeTestMethods(){  if (cachedMethods == null) {    cachedMethods=new RunnerDelegator().computeAllTestMethods(getTestClass(),super.computeTestMethods());  }  return cachedMethods;}  }
class C{  public static List<String> extractFromSitePy(VirtualFile vFile) throws IOException {  List<String> result=new ArrayList<String>();  String text=VfsUtil.loadText(vFile);  String[] lines=LineTokenizer.tokenize(text,false);  int index=0;  while (index < lines.length && !lines[index].startsWith("def addsitepackages(")) {    index++;  }  while (index < lines.length && !lines[index].trim().startsWith("buildout_paths = [")) {    index++;  }  index++;  while (index < lines.length && !lines[index].trim().equals("]")) {    String line=lines[index].trim();    if (line.endsWith(",")) {      line=line.substring(0,line.length() - 1);    }    if (line.startsWith("'") && line.endsWith("'")) {      result.add(StringUtil.unescapeStringCharacters(line.substring(1,line.length() - 1)));    }    index++;  }  return result;}  }
class C{  public static BasicBeanDescription forDeserialization(POJOPropertiesCollector coll){  BasicBeanDescription desc=new BasicBeanDescription(coll.getConfig(),coll.getType(),coll.getClassDef(),coll.getProperties());  desc._anySetterMethod=coll.getAnySetterMethod();  desc._ignoredPropertyNames=coll.getIgnoredPropertyNames();  desc._ignoredPropertyNamesForDeser=coll.getIgnoredPropertyNamesForDeser();  desc._injectables=coll.getInjectables();  return desc;}  }
class C{  protected long downsample(long[] data,int start,int end,int size){  long sum=0;  for (int i=start; i < end; i++) {    sum+=data[i];  }  return sum;}  }
class C{  private boolean hasTag(String version){  for (  final String string : Updater.NO_UPDATE_TAG) {    if (version.contains(string)) {      return true;    }  }  return false;}  }
class C{  protected void commit() throws IOException {  if (bytecounter > 0) {    if (linelength > 0 && linecounter == linelength) {      outputStream.write("\r\n".getBytes());      linecounter=0;    }    char b1=Shared.chars.charAt((buffer << 8) >>> 26);    char b2=Shared.chars.charAt((buffer << 14) >>> 26);    char b3=(bytecounter < 2) ? Shared.pad : Shared.chars.charAt((buffer << 20) >>> 26);    char b4=(bytecounter < 3) ? Shared.pad : Shared.chars.charAt((buffer << 26) >>> 26);    outputStream.write(b1);    outputStream.write(b2);    outputStream.write(b3);    outputStream.write(b4);    linecounter+=4;    bytecounter=0;    buffer=0;  }}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.BITWISE_XOR_EXPRESSION;}  }
class C{  public ServiceConfigurationError(String msg,Throwable cause){  super(msg,cause);}  }
class C{  protected void deliveryReceiveProgress(ReceivePacket packet,float progress){  if (mReceiveListener != null)   mReceiveListener.onReceiveProgress(this,packet,progress);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  @Override @Inline public void release(Address start){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(false);}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  if (m_cdataTagOpen)   closeCDATA();  m_cdataStartCalled=false;}  }
class C{  private void addFlags(int newflags){  flags=getLayoutFlags() | newflags;}  }
class C{  public BaseDialog(Context context){  super(context);  setDialogTheme();  this.context=context;  this.TAG=this.getClass().getSimpleName();  Log.d(TAG,"constructor");}  }
class C{  boolean isZero(){  for (int i=0; i < count; ++i) {    if (digits[i] != '0') {      return false;    }  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int pauseDownload(long... ids){  initPauseMethod();  if (pauseDownload == null) {    return -1;  }  try {    return ((Integer)pauseDownload.invoke(downloadManager,ids)).intValue();  } catch (  Exception e) {    e.printStackTrace();  }  return -1;}  }
class C{  protected SimpleJavaFileObject(URI uri,Kind kind){  uri.getClass();  kind.getClass();  if (uri.getPath() == null)   throw new IllegalArgumentException("URI must have a path: " + uri);  this.uri=uri;  this.kind=kind;}  }
class C{  @Override public boolean supportsSchemasInDataManipulation(){  debugCodeCall("supportsSchemasInDataManipulation");  return true;}  }
class C{  private boolean lineTerminatesStatement(String line,Delimiter delimiter){  if (delimiter == null) {    return false;  }  String upperCaseDelimiter=delimiter.getDelimiter().toUpperCase();  if (delimiter.isAloneOnLine()) {    return line.equals(upperCaseDelimiter);  }  return line.endsWith(upperCaseDelimiter);}  }
class C{  private void preorder(TreeNode<E> root){  if (root == null)   return;  list.add(root.element);  preorder(root.left);  preorder(root.right);}  }
class C{  public static IStatus checkInSync(IResource[] resources){  IStatus result=null;  for (int i=0; i < resources.length; i++) {    IResource resource=resources[i];    if (!resource.isSynchronized(IResource.DEPTH_INFINITE)) {      result=addOutOfSync(result,resource);    }  }  if (result != null)   return result;  return Status.OK_STATUS;}  }
class C{  public boolean contains(int index){  return m_indicators[index];}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_3__OR_OP_1:    setOrOp_1((String)newValue);  return;case UmplePackage.ANONYMOUS_LINKING_OP_3__CONSTRAINT_EXPR_1:getConstraintExpr_1().clear();getConstraintExpr_1().addAll((Collection<? extends ConstraintExpr_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Action(value="/ajaxCommon-calculateMutationFee") public String calculateMutationFee(){  BigDecimal documentValue=(partyValue.compareTo(departmentValue) > 0 ? partyValue : departmentValue);  if (documentValue.compareTo(BigDecimal.ZERO) > 0) {    BigDecimal excessDocValue=BigDecimal.ZERO;    BigDecimal multiplicationFactor=BigDecimal.ZERO;    MutationFeeDetails mutationFeeDetails=(MutationFeeDetails)getPersistenceService().find("from MutationFeeDetails where lowLimit <= ? and (highLimit is null OR highLimit >= ?)",documentValue,documentValue);    if (mutationFeeDetails != null) {      if (mutationFeeDetails.getFlatAmount() != null && mutationFeeDetails.getFlatAmount().compareTo(BigDecimal.ZERO) > 0) {        if (mutationFeeDetails.getIsRecursive().toString().equalsIgnoreCase("N")) {          mutationFee=mutationFeeDetails.getFlatAmount();        } else {          excessDocValue=documentValue.subtract(mutationFeeDetails.getLowLimit()).add(BigDecimal.ONE);          multiplicationFactor=excessDocValue.divide(mutationFeeDetails.getRecursiveFactor(),BigDecimal.ROUND_CEILING);          mutationFee=mutationFeeDetails.getFlatAmount().add(multiplicationFactor.multiply(mutationFeeDetails.getRecursiveAmount()));        }      }      if (mutationFeeDetails.getPercentage() != null && mutationFeeDetails.getPercentage().compareTo(BigDecimal.ZERO) > 0) {        if (mutationFeeDetails.getIsRecursive().toString().equalsIgnoreCase("N")) {          mutationFee=(documentValue.multiply(mutationFeeDetails.getPercentage())).divide(PropertyTaxConstants.BIGDECIMAL_100);        }      }      mutationFee=mutationFee.setScale(0,BigDecimal.ROUND_HALF_UP);    }  }  return RESULT_MUTATION_FEE;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  public synchronized void engineStore(KeyStore.LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException {  token.ensureValid();  if (param != null) {    throw new IllegalArgumentException("LoadStoreParameter must be null");  }}  }
class C{  public static <K,V>Unbound<K,V> from(Class<? extends Decoder<K>> keyDecoder,Class<? extends Decoder<V>> valueDecoder,Class<K> key,Class<V> value,Set<String> topics,Map<String,String> kafkaParams){  return new Unbound<>(keyDecoder,valueDecoder,key,value,topics,kafkaParams);}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<AlignmentPattern>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  public boolean deleteAddressSpace(final AddressSpace addressSpace) throws CouldntDeleteException {  Preconditions.checkNotNull(addressSpace,"Error: Address space argument can not be null");  try {    return m_project.getContent().removeAddressSpace(addressSpace.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public void deleteEmailDelegate(String user,String delegationEmail) throws IllegalArgumentException, AppsForYourDomainException, ServiceException, IOException {  if (isBlankOrNullString(user) || isBlankOrNullString(delegationEmail)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Deleting the email delegate " + delegationEmail + " for user "+ user+ " ...");  URL deleteUrl=new URL(Constants.PROTOCOL + "://" + Constants.APPS_APIS_DOMAIN+ Constants.APPS_APIS_URL+ "/"+ domain+ "/"+ user+ "/"+ Constants.DELEGATION+ "/"+ delegationEmail);  delete(deleteUrl);  logger.log(Level.INFO,"Successfully deleted an email delegate.");}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(stateErrors.errorInPreparedState);  assertTrue(stateErrors.errorInPreparedStateAfterStop);  assertTrue(stateErrors.errorInIdleState);  assertTrue(stateErrors.errorInIdleStateAfterReset);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInStoppedState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  public void testSimple(){  doTest(true);}  }
class C{  public static ReilInstruction createOr(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.OR,firstOperand,secondOperand,thirdOperand);}  }
class C{  protected void fireFatalConnectionError(SQLException ex){  ConnectionEvent evt=new ConnectionEvent(this,ex);  for (  ConnectionEventListener listener : connectionEventListeners) {    listener.connectionErrorOccurred(evt);  }}  }
class C{  public void clearFileTransferDeliveryExpiration(Set<String> transferIds) throws RcsServiceNotAvailableException, RcsPersistentStorageException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.clearFileTransferDeliveryExpiration(new ArrayList<>(transferIds));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (requiredEdges == null) {    throw new NullPointerException();  }  if (explicitlyForbiddenEdges == null) {    throw new NullPointerException();  }  if (requiredCommonCauses == null) {    throw new NullPointerException();  }  if (forbiddenCommonCauses == null) {    throw new NullPointerException();  }  if (tierMap == null) {    throw new NullPointerException();  }  if (this.knowledgeGroups == null) {    this.knowledgeGroups=new ArrayList<>();  }  if (this.allRequiredEdges == null) {    this.allRequiredEdges=new HashSet<>();    this.generateRequiredEdgeSet();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MatrixAtom(boolean isPartial,ArrayOfAtoms array,String options,boolean spaceAround){  this.isPartial=isPartial;  this.matrix=array;  this.type=ARRAY;  this.spaceAround=spaceAround;  parsePositions(new StringBuffer(options));}  }
class C{  @Override protected void preInsert(MTreeEntry entry){}  }
class C{  private void addTvShow(TvShow tvShow){synchronized (root) {    DefaultMutableTreeNode tvShowNode=new TvShowTreeNode(tvShow);    root.add(tvShowNode);    nodeMap.put(tvShow,tvShowNode);    for (    TvShowSeason season : new ArrayList<>(tvShow.getSeasons())) {      TvShowSeasonTreeNode seasonNode=(TvShowSeasonTreeNode)nodeMap.get(season);      if (seasonNode == null) {        addTvShowSeason(season,tvShow);      }      for (      TvShowEpisode episode : new ArrayList<>(season.getEpisodes())) {        addTvShowEpisode(episode,season);      }    }    int index=getIndexOfChild(root,tvShowNode);    if (index > -1) {      TreeModelEvent event=new TreeModelEvent(this,root.getPath(),new int[]{index},new Object[]{tvShow});      for (      TreeModelListener listener : listeners) {        try {          listener.treeNodesInserted(event);        } catch (        NullPointerException|ArrayIndexOutOfBoundsException ignored) {        }      }    }  }  tvShow.addPropertyChangeListener(propertyChangeListener);}  }
class C{  private void startEnabledExtMods(){  final InstExtModConfsBean instExtModConfsBean=Env.LAUNCHER_SETTINGS.get(LSettings.INST_EXT_MOD_CONFS);  for (  final ExtModManifestBean mf : extModManifestList) {    final InstExtModConfBean conf=instExtModConfsBean.getModuleConfForFolder(mf.getFolder());    if (conf == null || !Boolean.TRUE.equals(conf.getEnabled()))     continue;    Env.LOGGER.debug("Starting external module: " + mf.getName());    URLClassLoader ucl=null;    IExternalModule extModInstance=null;    try {      final List<URL> cpUrlList=new ArrayList<>();      for (      final FileBean file : mf.getModuleBean().getFileList()) {        if (!ScelightLauncher.INSTANCE().isClassPathEntry(file))         continue;        Path filePath=Paths.get(file.getPath());        filePath=Env.PATH_APP.resolve(filePath.subpath(1,filePath.getNameCount()));        cpUrlList.add(filePath.toUri().toURL());      }      ucl=new URLClassLoader(cpUrlList.toArray(new URL[cpUrlList.size()]),getClass().getClassLoader());      final Class<? extends IExternalModule> extModClass=ucl.loadClass(mf.getMainClass()).asSubclass(IExternalModule.class);      extModInstance=extModClass.getConstructor().newInstance();      final ModEnv modEnv=new ModEnv(mf,Env.PATH_EXT_MODS.resolve(mf.getFolder()),PATH_EXT_MODS_CACHE);      extModInstance.init(mf,Services.INSTANCE,modEnv);      final ExtModHandler handler=new ExtModHandler(mf,modEnv,ucl,extModClass,extModInstance);      extModHandlerList.add(handler);      folderExtModHandlerMap.put(mf.getFolder(),handler);    } catch (    final Throwable t) {      LEnv.LOGGER.error("Failed to start external module: " + mf.getName(),t);      if (extModInstance != null)       try {        extModInstance.destroy();      } catch (      final Throwable t2) {      }      if (ucl != null)       try {        ucl.close();      } catch (      final IOException ie) {      }      continue;    }  }}  }
class C{  public String[] toASS(){  return new FormatASS().toFile(this);}  }
class C{  @Override protected void paintThumb(Graphics g,JComponent bar,Rectangle bounds){  StyleUtil.fillBackground(style,g,bounds.x,bounds.y,bounds.width,bounds.height);  style.getBorder().paintBorder(bar,g,bounds.x,bounds.y,bounds.width,bounds.height);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=null;  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  String data=WebUtil.getParameter(request,"chatinput");  int CM_ChatID=WebUtil.getParameterAsInt(request,"CM_ChatID");  int AD_Table_ID=WebUtil.getParameterAsInt(request,"AD_Table_ID");  int record_ID=WebUtil.getParameterAsInt(request,"record_ID");  String description=WebUtil.getParameter(request,"description");  if (data != null && data.length() > 0) {    if (CM_ChatID == 0) {      m_chat=new MChat(wsc.ctx,AD_Table_ID,record_ID,description,null);      m_chat.saveEx();    }    MChatEntry entry=new MChatEntry(m_chat,data);    entry.saveEx();  }  doc=CreateChatPage(ws,wsc,doc,m_chat.getCM_Chat_ID());  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public static void startWorkflowProcess(int AD_Table_ID,int Record_ID){  if (s_workflow_Window_ID <= 0) {    int AD_Window_ID=DB.getSQLValue(null,"SELECT AD_Window_ID FROM AD_Window WHERE Name = 'Workflow Process'");    s_workflow_Window_ID=AD_Window_ID;  }  if (s_workflow_Window_ID <= 0)   return;  MQuery query=new MQuery();  query.addRestriction("AD_Table_ID",MQuery.EQUAL,AD_Table_ID);  query.addRestriction("Record_ID",MQuery.EQUAL,Record_ID);  AEnv.zoom(s_workflow_Window_ID,query);}  }
class C{  public static boolean isLinkLocalIPv4Address(InetAddress add){  if (add instanceof Inet4Address) {    byte address[]=add.getAddress();    if ((address[0] & 0xFF) == 10)     return true;    if ((address[0] & 0xFF) == 172 && (address[1] & 0xFF) >= 16 && address[1] <= 31)     return true;    if ((address[0] & 0xFF) == 192 && (address[1] & 0xFF) == 168)     return true;    return false;  }  return false;}  }
class C{  @Override public long skip(long byteCount){  Preconditions.checkArgument(byteCount >= 0);  int skipped=Math.min((int)byteCount,available());  mOffset+=skipped;  return skipped;}  }
class C{  private void testBufferedInputStreamBug() throws SQLException {  deleteDb("lob");  JdbcConnection conn=(JdbcConnection)getConnection("lob");  conn.createStatement().execute("CREATE TABLE TEST(test BLOB)");  PreparedStatement ps=conn.prepareStatement("INSERT INTO TEST(test) VALUES(?)");  ps.setBlob(1,new ByteArrayInputStream(new byte[257]));  ps.executeUpdate();  conn.close();}  }
class C{  public static Function<String> jsonSet(Object json,Object... pathValuePairs){  return new JSONArgumentFunction<>("json_set",json,pathValuePairs);}  }
class C{  public boolean isDLLFile(){  return ((Characteristics & COFF_Header.IMAGE_FILE_DLL) != 0);}  }
class C{  public Builder contentAvailable(Boolean value){  contentAvailable=value;  return this;}  }
class C{  public JDBCXYDataset(Connection con,String query) throws SQLException {  this(con);  executeQuery(query);}  }
class C{  public CacheSerializableRunnable createMultiplePartitionRegion(final String PRPrefix,final int startIndexForRegion,final int endIndexForRegion,final int redundancy,final int localmaxMemory){  return createMultiplePartitionRegion(PRPrefix,startIndexForRegion,endIndexForRegion,redundancy,localmaxMemory,false);}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  private boolean isEmpty(){  return top < 0;}  }
class C{  public HostDynamicWorkload(int id,RamProvisioner ramProvisioner,BwProvisioner bwProvisioner,long storage,List<? extends Pe> peList,VmScheduler vmScheduler){  super(id,ramProvisioner,bwProvisioner,storage,peList,vmScheduler);  setUtilizationMips(0);  setPreviousUtilizationMips(0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("hc_staff",false);  domImpl=doc.getImplementation();  if (("text/html".equals(getContentType()))) {    state=domImpl.hasFeature("HTML",null);    assertTrue("supports_HTML_null",state);  } else {    state=domImpl.hasFeature("XML",null);    assertTrue("supports_XML_null",state);  }}  }
class C{  public static long[] copyOfRange(long[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      long[] copy=new long[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public void reportException(Exception status) throws RemoteException {synchronized (lock) {    this.status=status;    lock.notifyAll();  }}  }
class C{  public EvoSVMModel(ExampleSet exampleSet,List<SupportVector> supportVectors,Kernel kernel,double bias){  super(exampleSet,ExampleSetUtilities.SetsCompareOption.ALLOW_SUPERSET,ExampleSetUtilities.TypesCompareOption.ALLOW_SAME_PARENTS);  this.supportVectors=supportVectors;  if (supportVectors == null || supportVectors.size() == 0) {    throw new IllegalArgumentException("Null or empty support vector collection: not possible to predict values!");  }  this.kernel=kernel;  this.bias=bias;  if (this.kernel instanceof DotKernel) {    this.weights=new double[getNumberOfAttributes()];    for (int i=0; i < getNumberOfSupportVectors(); i++) {      SupportVector sv=getSupportVector(i);      if (sv != null) {        double[] x=sv.getX();        double alpha=sv.getAlpha();        double y=sv.getY();        for (int j=0; j < weights.length; j++) {          weights[j]+=y * alpha * x[j];        }      } else {        this.weights=null;        break;      }    }  }}  }
class C{  public VcsRevisionNumber originalRevision(int lineNumber){  return getLineRevisionNumber(lineNumber);}  }
class C{  public static int cs_droptol(Dcs A,double tol){  return (Dcs_fkeep.cs_fkeep(A,new Cs_tol(),tol));}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,Promise<T3> p3,Promise<T4> p4,Promise<T5> p5,Promise<T6> p6,Promise<T7> p7,Promise<T8> p8,final Func8<T1,T2,T3,T4,T5,T6,T7,T8,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,p3.observable,p4.observable,p5.observable,p6.observable,p7.observable,p8.observable,joinFunction));}  }
class C{  public void createPictScenario12() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-06 00:00:00"));  String supplierAdminId="Pict12Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict12SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),5);  String customerAdminId="Pict12DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict12DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-08-02 00:00:00"),DateTimeHandling.calculateMillis("2013-09-04 23:59:59"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("10.00")),null,null);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails rataServiceTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT12_RATA_MONTH_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT12_RATA_MONTH,example2TechService,supplierMarketplace);  VOServiceDetails serviceRataDetails=serviceSetup.activateMarketableService(rataServiceTemplate);  VORoleDefinition role=VOServiceFactory.getRole(serviceRataDetails,"ADMIN");  serviceRataDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceRataDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_12",serviceRataDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-07 00:00:00"));  role=VOServiceFactory.getRole(serviceRataDetails,"USER");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-08 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getSecondCustomerUser1(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-10 00:00:00"),"BOOLEAN_PARAMETER","true");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-15 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceRataDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-09-07 00:00:00"),"BOOLEAN_PARAMETER","false");  role=VOServiceFactory.getRole(serviceRataDetails,"USER");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-09-08 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-09-10 00:00:00"));  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-09-10 13:00:00"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_12",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_12",customer);}  }
class C{  @Override public void run(){  if (!isFirstExchange && !Boolean.TRUE.toString().equals(controller.getModel().getUserPreference(ExchangeModel.TICKER_SHOW_SECOND_ROW))) {    return;  }  try {synchronized (this) {      if (exchange == null) {        log.debug("exchange is null ... creating exchange ... (isFirstExchange = " + isFirstExchange + ")");        if (shortExchangeName == null) {          log.debug("shortExchangeName is null, defaulting to " + ExchangeData.DEFAULT_EXCHANGE);          shortExchangeName=ExchangeData.DEFAULT_EXCHANGE;        }        createExchangeObjects(shortExchangeName);        if (exchange == null) {          log.debug("Cannot create exchange (isFirstExchange = " + isFirstExchange + ")");        }      }    }    if (marketDataService != null) {      if (exchangeSymbols != null) {        if (!Boolean.FALSE.toString().equals(controller.getModel().getUserPreference(ExchangeModel.TICKER_SHOW)) || !Boolean.FALSE.toString().equals(controller.getModel().getUserPreference(ExchangeModel.SHOW_BITCOIN_CONVERTED_TO_FIAT))) {          boolean getItFromTheServer=false;          boolean invertedRates=false;          boolean reverseRates=ExchangeData.doesExchangeUseReverseRates(shortExchangeName);          CurrencyPair currencyPairToUse=null;          for (          CurrencyPair loopSymbolPair : exchangeSymbols) {            if (ExchangeData.OPEN_EXCHANGE_RATES_EXCHANGE_NAME.equals(shortExchangeName)) {              if (loopSymbolPair.baseCurrency.equals(currency)) {                getItFromTheServer=true;                invertedRates=true;                currencyPairToUse=loopSymbolPair;                break;              }            } else {              if ("BTC".equals(loopSymbolPair.baseCurrency) && loopSymbolPair.counterCurrency.equals(currency)) {                getItFromTheServer=true;                currencyPairToUse=loopSymbolPair;                break;              }              if ("BTC".equals(loopSymbolPair.counterCurrency) && loopSymbolPair.baseCurrency.equals(currency)) {                getItFromTheServer=true;                invertedRates=true;                currencyPairToUse=loopSymbolPair;                break;              }            }          }          if (getItFromTheServer) {            BigMoney last=null;            BigMoney bid=null;            BigMoney ask=null;            Ticker loopTicker;            if (ExchangeData.OPEN_EXCHANGE_RATES_EXCHANGE_NAME.equals(shortExchangeName)) {              log.debug("Getting loopTicker for " + currency + " USD");              loopTicker=marketDataService.getTicker(currency,"USD");              System.out.println("loopTicker = " + loopTicker);              Ticker btcUsdTicker=null;              log.debug("Getting btcUsdTicker for BTC/USD");              btcUsdTicker=marketDataService.getTicker(Currencies.BTC,Currencies.USD);              System.out.println("btcUsdTicker = " + btcUsdTicker);              BigMoney usdBtcRateMoney=btcUsdTicker.getLast();              BigDecimal usdBtcRate=null;              if (usdBtcRateMoney != null) {                usdBtcRate=usdBtcRateMoney.getAmount();                if (loopTicker.getLast() != null) {                  last=loopTicker.getLast().dividedBy(usdBtcRate,RoundingMode.HALF_EVEN);                }                if (loopTicker.getBid() != null) {                  bid=loopTicker.getBid().dividedBy(usdBtcRate,RoundingMode.HALF_EVEN);                }                if (loopTicker.getAsk() != null) {                  ask=loopTicker.getAsk().dividedBy(usdBtcRate,RoundingMode.HALF_EVEN);                }              }            } else {              log.debug("Getting ticker for " + currencyPairToUse.baseCurrency + " "+ currencyPairToUse.counterCurrency);              loopTicker=marketDataService.getTicker(currencyPairToUse.baseCurrency,currencyPairToUse.counterCurrency);              log.debug("Got ticker for " + currencyPairToUse.baseCurrency + " "+ currencyPairToUse.counterCurrency);              last=loopTicker.getLast();              bid=loopTicker.getBid();              ask=loopTicker.getAsk();              if (invertedRates && !reverseRates) {                if (last != null && last.getAmount() != BigDecimal.ZERO) {                  last=BigMoney.of(last.getCurrencyUnit(),BigDecimal.ONE.divide(last.getAmount(),NUMBER_OF_SIGNIFICANT_DIGITS,BigDecimal.ROUND_HALF_EVEN));                } else {                  last=null;                }                if (bid != null && bid.getAmount() != BigDecimal.ZERO) {                  bid=BigMoney.of(last.getCurrencyUnit(),BigDecimal.ONE.divide(bid.getAmount(),NUMBER_OF_SIGNIFICANT_DIGITS,BigDecimal.ROUND_HALF_EVEN));                } else {                  bid=null;                }                if (ask != null && ask.getAmount() != BigDecimal.ZERO) {                  ask=BigMoney.of(last.getCurrencyUnit(),BigDecimal.ONE.divide(ask.getAmount(),NUMBER_OF_SIGNIFICANT_DIGITS,BigDecimal.ROUND_HALF_EVEN));                } else {                  ask=null;                }              }              if (invertedRates) {                if (reverseRates) {                  currency=currencyPairToUse.baseCurrency;                } else {                  currency=currencyPairToUse.counterCurrency;                }              } else {                if (reverseRates) {                  currency=currencyPairToUse.baseCurrency;                } else {                  currency=currencyPairToUse.counterCurrency;                }              }            }            this.exchangeController.getModel().getExchangeData(shortExchangeName).setLastPrice(currency,last);            this.exchangeController.getModel().getExchangeData(shortExchangeName).setLastBid(currency,bid);            this.exchangeController.getModel().getExchangeData(shortExchangeName).setLastAsk(currency,ask);            log.debug("Exchange = " + shortExchangeName);            if (isFirstExchange) {              String newCurrencyCode=currency;              if (ExchangeData.BITCOIN_CHARTS_EXCHANGE_NAME.equals(shortExchangeName)) {                if (currency.length() >= 3) {                  newCurrencyCode=currency.substring(currency.length() - 3);                }              }              CurrencyConverter.INSTANCE.setCurrencyUnit(CurrencyUnit.of(newCurrencyCode));              CurrencyConverter.INSTANCE.setRate(last.getAmount());            }          }        }      }      mainFrame.fireExchangeDataChanged();    }  } catch (  Exception e) {    log.error(e.getClass().getName() + " " + e.getMessage());    if (e.getCause() != null) {      log.error(e.getCause().getClass().getName() + " " + e.getCause().getMessage());    }  }}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public void computeLegend(ChartData<?> data){  if (!mLegend.isLegendCustom()) {    List<String> labels=new ArrayList<String>();    List<Integer> colors=new ArrayList<Integer>();    for (int i=0; i < data.getDataSetCount(); i++) {      DataSet<? extends Entry> dataSet=data.getDataSetByIndex(i);      List<Integer> clrs=dataSet.getColors();      int entryCount=dataSet.getEntryCount();      if (dataSet instanceof BarDataSet && ((BarDataSet)dataSet).isStacked()) {        BarDataSet bds=(BarDataSet)dataSet;        String[] sLabels=bds.getStackLabels();        for (int j=0; j < clrs.size() && j < bds.getStackSize(); j++) {          labels.add(sLabels[j % sLabels.length]);          colors.add(clrs.get(j));        }        if (bds.getLabel() != null) {          colors.add(ColorTemplate.COLOR_SKIP);          labels.add(bds.getLabel());        }      } else       if (dataSet instanceof PieDataSet) {        List<String> xVals=data.getXVals();        PieDataSet pds=(PieDataSet)dataSet;        for (int j=0; j < clrs.size() && j < entryCount && j < xVals.size(); j++) {          labels.add(xVals.get(j));          colors.add(clrs.get(j));        }        if (pds.getLabel() != null) {          colors.add(ColorTemplate.COLOR_SKIP);          labels.add(pds.getLabel());        }      } else {        for (int j=0; j < clrs.size() && j < entryCount; j++) {          if (j < clrs.size() - 1 && j < entryCount - 1) {            labels.add(null);          } else {            String label=data.getDataSetByIndex(i).getLabel();            labels.add(label);          }          colors.add(clrs.get(j));        }      }    }    if (mLegend.getExtraColors() != null && mLegend.getExtraLabels() != null) {      for (      int color : mLegend.getExtraColors())       colors.add(color);      Collections.addAll(labels,mLegend.getExtraLabels());    }    mLegend.setComputedColors(colors);    mLegend.setComputedLabels(labels);  }  Typeface tf=mLegend.getTypeface();  if (tf != null)   mLegendLabelPaint.setTypeface(tf);  mLegendLabelPaint.setTextSize(mLegend.getTextSize());  mLegendLabelPaint.setColor(mLegend.getTextColor());  mLegend.calculateDimensions(mLegendLabelPaint,mViewPortHandler);}  }
class C{  public InterruptedIOException(){}  }
class C{  public void showPreferences(){  ApplicationSettings applicationSettings=ApplicationSettings.getInstance();  File caCertificatesFile=applicationSettings.getCaCertificatesFile();  DPreferences dPreferences=new DPreferences(frame,applicationSettings.getUseCaCertificates(),caCertificatesFile,applicationSettings.getUseWindowsTrustedRootCertificates(),applicationSettings.getEnableImportTrustedCertTrustCheck(),applicationSettings.getEnableImportCaReplyTrustCheck(),applicationSettings.getPasswordQualityConfig(),applicationSettings.getDefaultDN());  dPreferences.setLocationRelativeTo(frame);  dPreferences.setVisible(true);  if (dPreferences.wasCancelled()) {    return;  }  File tmpFile=dPreferences.getCaCertificatesFile();  if (!tmpFile.equals(caCertificatesFile)) {    AuthorityCertificates authorityCertificates=AuthorityCertificates.getInstance();    authorityCertificates.setCaCertificates(null);  }  caCertificatesFile=tmpFile;  applicationSettings.setCaCertificatesFile(caCertificatesFile);  applicationSettings.setUseCaCertificates(dPreferences.getUseCaCertificates());  applicationSettings.setUseWindowsTrustedRootCertificates(dPreferences.getUseWinTrustRootCertificates());  applicationSettings.setEnableImportTrustedCertTrustCheck(dPreferences.getEnableImportTrustedCertTrustCheck());  applicationSettings.setEnableImportCaReplyTrustCheck(dPreferences.getEnableImportCaReplyTrustCheck());  applicationSettings.setPasswordQualityConfig(dPreferences.getPasswordQualityConfig());  applicationSettings.setDefaultDN(dPreferences.getDefaultDN());  UIManager.LookAndFeelInfo lookFeelInfo=dPreferences.getLookFeelInfo();  applicationSettings.setLookAndFeelClass(lookFeelInfo.getClassName());  boolean lookAndFeelDecorated=dPreferences.getLookFeelDecoration();  applicationSettings.setLookAndFeelDecorated(lookAndFeelDecorated);  if ((!lookFeelInfo.getClassName().equals(UIManager.getLookAndFeel().getClass().getName())) || (lookAndFeelDecorated != JFrame.isDefaultLookAndFeelDecorated())) {    JOptionPane.showMessageDialog(frame,res.getString("PreferencesAction.LookFeelChanged.message"),res.getString("PreferencesAction.LookFeelChanged.Title"),JOptionPane.INFORMATION_MESSAGE);    exitApplication(true);  }}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public JInternalFrame(String title,boolean resizable,boolean closable){  this(title,resizable,closable,false,false);}  }
class C{  protected void generateLargeNode(Cube cube,long seed,int xOrigin,int yOrigin,int zOrigin,double x,double y,double z){  this.generateNode(cube,seed,xOrigin,yOrigin,zOrigin,x,y,z,1.0F + this.rand.nextFloat() * 6.0F,0.0F,0.0F,-1,-1,0.5D);}  }
class C{  public boolean maxLength(String input,int maxLength){  return GenericValidator.maxLength(input,maxLength);}  }
class C{  public DateTime toDateTime(Config config,Element el,String attributeName){  String str=el.getAttribute(attributeName);  if (str == null)   return null;  return DateCaster.toDateAdvanced(str,ThreadLocalPageContext.getTimeZone(config),null);}  }
class C{  private boolean hasOrWillHaveVisibleServices(Map<Long,TriggerData> activeServices){  if (activeServices.isEmpty()) {    return true;  }  Iterator<TriggerData> catalogEntries=activeServices.values().iterator();  while (catalogEntries.hasNext()) {    final TriggerData catalogEntry=catalogEntries.next();    if (catalogEntry.visibleInCatalog && catalogEntry.active) {      return true;    }  }  catalogEntries=activeServices.values().iterator();  while (catalogEntries.hasNext()) {    if (catalogEntries.next().active) {      return false;    }  }  return true;}  }
class C{  public static JPanel createRowWithTopAndBottomPadding(final JPanel contentRow,final int topPadding,final int bottomPadding){  final JPanel rowContents=new JPanel();  rowContents.setLayout(new BoxLayout(rowContents,BoxLayout.Y_AXIS));  rowContents.add(Box.createVerticalStrut(topPadding));  rowContents.add(contentRow);  rowContents.add(Box.createVerticalStrut(bottomPadding));  return rowContents;}  }
class C{  public int available() throws IOException {  return mSocket.available();}  }
class C{  public static String resolveLocaleCode(Locale locale){  return resolveLocaleCode(locale.getLanguage(),locale.getCountry(),locale.getVariant());}  }
class C{  public final boolean validateValue(CellDataFeatures<S,T> param){  Object rowObject=param.getValue().getValue();  if ((rowObject instanceof RecursiveTreeObject && rowObject.getClass() == RecursiveTreeObject.class) || (param.getTreeTableView() instanceof JFXTreeTableView && ((JFXTreeTableView<?>)param.getTreeTableView()).getGroupOrder().contains(this)))   return false;  return true;}  }
class C{  protected final RequestSecurityTokenResponseType parseStsResponse(Node soapResponseNode) throws ParserException {  return parseStsResponse(soapResponseNode,RequestSecurityTokenResponseCollectionType.class,false).getRequestSecurityTokenResponse();}  }
class C{  public ParameterBlock add(Object obj){  parameters.addElement(obj);  return this;}  }
class C{  public void testConfigFileFile() throws Exception {  Properties properties=loadProperties("test-configFile-file");  assertEquals("12345",properties.getProperty("cargo.servlet.port"));}  }
class C{  public static ClassInfo findOrCreateClass(Class<?> c){  return (c == null ? null : ClassInfo.findOrCreateClass(c.getName()));}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public void removeConnection(ClientProxyMembershipID proxyID,ServerConnection connection){synchronized (_clientThreadsLock) {    Set serverConnections=(Set)this._clientThreads.get(proxyID);    if (serverConnections != null) {      serverConnections.remove(connection);      if (serverConnections.isEmpty()) {        this._clientThreads.remove(proxyID);      }    }  }}  }
class C{  private void interpretBisz(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  if (firstValue.first()) {    final BigInteger result=firstValue.second().equals(BigInteger.ZERO) ? BigInteger.ONE : BigInteger.ZERO;    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  private boolean indexExists(String table,String indexName) throws SQLException {  PreparedStatement statement=null;  ResultSet result=null;  try {    statement=this.connection.prepareStatement("SHOW INDEX FROM " + table + " WHERE Key_name!= 'PRIMARY'");    result=statement.executeQuery();    if (result == null || !result.next()) {      return false;    }    if (indexName != null) {      result.first();      boolean specificIndexExists=false;      while (result.next()) {        if (result.getString(3).equals(indexName)) {          specificIndexExists=true;        }      }      return specificIndexExists ? true : false;    } else {      return true;    }  }  finally {    if (statement != null) {      statement.close();    }    if (result != null) {      result.close();    }  }}  }
class C{  @Override public boolean isLabelVisible(){  return (label.isVisible());}  }
class C{  public void addOpcode(int code){  add(code);  growStack(STACK_GROW[code]);}  }
class C{  public PagingList<ResultSet> pagingQuery(String table,String[] columns,String selection,String[] selectionArgs,String groupBy,String having,String orderBy,int page,int pageSize){  if (orderBy == null && pageSize != 0)   throw new SQLException("orderBy cann't be null if define page and pageSize");  String orderWithLimit;  if (orderBy != null && pageSize != 0) {    orderWithLimit=String.format("%s LIMIT %s , %s",orderBy,(page - 1) * pageSize,pageSize);  } else {    orderWithLimit=orderBy;  }  Cursor cursor=null;  Cursor totalCursor=null;  try {    openDB();    PagingList<ResultSet> resultList=new PagingList<ResultSet>();    totalCursor=mSQLiteDatabase.query(table,new String[]{"count(*) as totalSize"},selection,selectionArgs,groupBy,having,null);    if (totalCursor.moveToNext()) {      int totalSize=totalCursor.getInt(0);      resultList.setTotalSize(totalSize);    }    cursor=mSQLiteDatabase.query(table,columns,selection,selectionArgs,groupBy,having,orderWithLimit);    if (cursor.getCount() < 1) {      return resultList;    } else {      parseCursorToResult(cursor,resultList);      return resultList;    }  } catch (  SQLException ex) {    ex.printStackTrace();    throw ex;  } finally {    if (cursor != null)     cursor.close();    if (totalCursor != null)     totalCursor.close();  }}  }
class C{  public static boolean isGrapeVine(Block block){  return GrowthCraftGrapes.blocks.grapeVine0.getBlock() == block || GrowthCraftGrapes.blocks.grapeVine1.getBlock() == block;}  }
class C{  public List<FileItem> parseRequest(HttpServletRequest request,FileItemFactory factory) throws IOException {  List<FileItem> items=new ArrayList<FileItem>();  boolean successful=false;  try {    Iterator<FileItemStream> fileItems=this.getItemIterator(request);    if (factory == null) {      throw new NullPointerException("No FileItemFactory has been set.");    }    while (fileItems.hasNext()) {      FileItemStream itemStream=fileItems.next();      FileItem fileItem=factory.createItem(itemStream);      items.add(fileItem);    }    successful=true;    return items;  } catch (  IOException e) {    throw e;  } finally {    if (!successful) {      for (      FileItem fileItem : items) {        try {          fileItem.deleteOrSkip();        } catch (        Throwable e) {        }      }    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  try {    undo.redo();  } catch (  CannotRedoException ex) {    _log.error("Error redoing text:",ex);  }  update();  undoAction.update();}  }
class C{  public boolean await(int duration,TimeUnit unit) throws InterruptedException {  return latch.await(duration,unit);}  }
class C{  public void applyAllInSameDocument(Collection<? extends IAtomicChange> changes,IDocument document) throws BadLocationException {  DocumentRewriteSession rewriteSession=null;  try {    if (document instanceof IDocumentExtension4) {      rewriteSession=((IDocumentExtension4)document).startRewriteSession(DocumentRewriteSessionType.UNRESTRICTED);    }    for (    IAtomicChange currRepl : changes) {      currRepl.apply(document);    }  }  finally {    if (rewriteSession != null)     ((IDocumentExtension4)document).stopRewriteSession(rewriteSession);  }}  }
class C{  public static void startActivity(Context context,String messageId){  Intent intent=new Intent(context,ChatMessageLogView.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra(EXTRA_MESSAGE_ID,messageId);  context.startActivity(intent);}  }
class C{  public void sub(IntegerPolynomial b){  if (b.coeffs.length > coeffs.length) {    coeffs=Arrays.copyOf(coeffs,b.coeffs.length);  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]-=b.coeffs[i];  }}  }
class C{  public synchronized void end(Component component){  this.active=false;  this.offset=null;  this.beginPosition=null;  component.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public Boolean isReverse(){  return reverse;}  }
class C{  @Override public Enumeration<URL> findResources(String name){  if (name.startsWith("/"))   name=name.substring(1);  Vector<URL> resources=new Vector<URL>();  fillResources(resources,name);  String alias=getResourceAlias(name);  if (alias != null)   fillResources(resources,alias);  return resources.elements();}  }
class C{  private void showNoAppForFileTypeToast(Context context){  Toast.makeText(context,R.string.file_list_no_app_for_file_type,Toast.LENGTH_SHORT).show();}  }
class C{  private MimeManager(){  mimeTypeToExtensionMap=new HashMap<>();  extensionToMimeTypeMap=new HashMap<>();  imageMimeTypeSet=new HashSet<>();}  }
class C{  public boolean hasReturn1w(){  return getReturn1w() != null;}  }
class C{  FBXid(InputStream rawIn,long firebirdTransactionId) throws ResourceException {  this.firebirdTransactionId=firebirdTransactionId;  try {    if (read(rawIn) != TDR_VERSION) {      throw new FBIncorrectXidException("Wrong TDR_VERSION for xid");    }    if (read(rawIn) != TDR_XID_FORMAT_ID) {      throw new FBIncorrectXidException("Wrong TDR_XID_FORMAT_ID for xid");    }    formatId=readInt(rawIn);    if (read(rawIn) != TDR_XID_GLOBAL_ID) {      throw new FBIncorrectXidException("Wrong TDR_XID_GLOBAL_ID for xid");    }    globalId=readBuffer(rawIn);    if (read(rawIn) != TDR_XID_BRANCH_ID) {      throw new FBIncorrectXidException("Wrong TDR_XID_BRANCH_ID for xid");    }    branchId=readBuffer(rawIn);  } catch (  IOException ioe) {    throw new FBResourceException("IOException: " + ioe,ioe);  }}  }
class C{  public synchronized void close() throws IOException {  socket.close();}  }
class C{  public boolean isEmpty(){  return first == null;}  }
class C{  public ConfigurationException(String message){  super(message);}  }
class C{  @Override public void countExample(Example example){  int label=classNameMap.get(example.getNominalValue(labelAttribute));  int plabel=classNameMap.get(example.getNominalValue(predictedLabelAttribute));  double weight=1.0d;  if (weightAttribute != null) {    weight=example.getValue(weightAttribute);  }  counter[label][plabel]+=weight;}  }
class C{  public boolean isFailedToSend(){  return mFailedToSend;}  }
class C{  public static void reduceMethodList(ArrayList<Integer> values,ArrayList<String> labels,String allowedMethods){  String[] allowedStrings=allowedMethods.split(",");  int[] allowedValues=new int[allowedStrings.length];  for (int i=0; i < allowedValues.length; i++) {    try {      allowedValues[i]=Integer.parseInt(allowedStrings[i],10);    } catch (    NumberFormatException nfe) {      Log.w(TAG,"Bad allowed-strings list: '" + allowedStrings[i] + "' in '"+ allowedMethods+ "'");      return;    }  }  for (int i=values.size() - 1; i >= 0; i--) {    int val=values.get(i);    int j;    for (j=allowedValues.length - 1; j >= 0; j--) {      if (val == allowedValues[j]) {        break;      }    }    if (j < 0) {      values.remove(i);      labels.remove(i);    }  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:    return ((InternalEList<?>)getAstStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:  return ((InternalEList<?>)getGenStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:return ((InternalEList<?>)getPostponedSubstitutions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static String defaultNceConsistRosterFilename(){  return Roster.getDefault().getRosterLocation() + NceConsistRosterFileName;}  }
class C{  static Flake createFlake(float xRange,Bitmap originalBitmap,Context Context){  Flake flake=new Flake();  DisplayMetrics metrics=DvAppUtil.getDisplayMetrics(Context);  if (metrics.widthPixels >= 1080) {    flake.width=(int)(5 + (float)Math.random() * 80);    float hwRatio=originalBitmap.getHeight() / originalBitmap.getWidth();    flake.height=(int)(flake.width * hwRatio + 60);  } else {    flake.width=(int)(5 + (float)Math.random() * 50);    float hwRatio=originalBitmap.getHeight() / originalBitmap.getWidth();    flake.height=(int)(flake.width * hwRatio + 40);  }  flake.x=(float)Math.random() * (xRange - flake.width);  flake.y=0 - (flake.height + (float)Math.random() * flake.height);  flake.speed=50 + (float)Math.random() * 150;  flake.rotation=(float)Math.random() * 180 - 90;  flake.rotationSpeed=(float)Math.random() * 90 - 45;  flake.bitmap=bitmapMap.get(flake.width);  if (flake.bitmap == null) {    flake.bitmap=Bitmap.createScaledBitmap(originalBitmap,(int)flake.width,(int)flake.height,true);    bitmapMap.put(flake.width,flake.bitmap);  }  return flake;}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to RefinedSoundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  public boolean isCircumpolarFor(LatLong loc){  if (loc.getLatitude() > 0.0f) {    return (this.dec > (90.0f - loc.getLatitude()));  } else {    return (this.dec < (-90.0f - loc.getLatitude()));  }}  }
class C{  public synchronized RingBuffer<T> clone(){  RingBuffer<T> clonedBuffer=new RingBuffer<T>(this.capacity);  clonedBuffer.addAll(this);  clonedBuffer.setNextElementIndex(this.getnextElementIndex());  return clonedBuffer;}  }
class C{  public boolean containsCustomComponents(JOptionPane op){  return hasCustomComponents;}  }
class C{  public void writeAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  if (value == null) {    return;  }  Class valueClass=value.getClass();  if (valueClass == Boolean.class) {    if (Boolean.TRUE.equals(value)) {      writer.write(" ");      writer.write(name);    } else {    }  } else {    writer.write(" ");    writer.write(name);    writer.write("=\"");    Util.writeAttribute(writer,buffer,value.toString());    writer.write("\"");  }}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}/versions") @Produces(APPLICATION_JSON) public Iterable<SecretDetailResponseV2> secretVersions(@Auth AutomationClient automationClient,@PathParam("name") String name,@QueryParam("versionIdx") int versionIdx,@QueryParam("numVersions") int numVersions){  ImmutableList<SecretVersion> versions=secretDAO.getSecretVersionsByName(name,versionIdx,numVersions).orElseThrow(null);  return versions.stream().map(null).collect(toList());}  }
class C{  public static org.oscm.internal.vo.LdapProperties convertToUp(org.oscm.vo.LdapProperties oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.LdapProperties newVO=new org.oscm.internal.vo.LdapProperties();  newVO.setSettings(convertToUpSetting(oldVO.getSettings()));  return newVO;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/expand") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep expandVolume(@PathParam("id") URI id,VolumeExpandParam param) throws InternalException {  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume volume=queryVolumeResource(id);  VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  if (!virtualPool.getExpandable()) {    throw APIException.badRequests.volumeNotExpandable(volume.getLabel());  }  BlockServiceUtils.validateNotAnInternalBlockObject(volume,false);  VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume(volume,ResourceOperationTypeEnum.EXPAND_BLOCK_VOLUME,_dbClient);  if (((BlockFullCopyUtils.isVolumeFullCopy(volume,_dbClient)) || (BlockFullCopyUtils.isVolumeFullCopySource(volume,_dbClient))) && (!getFullCopyManager().volumeCanBeExpanded(volume))) {    throw APIException.badRequests.fullCopyExpansionNotAllowed(volume.getLabel());  }  if (VirtualPool.vPoolSpecifiesSRDF(virtualPool)) {    validateExpandingSrdfVolume(volume);  }  checkForPendingTasks(Arrays.asList(volume.getTenant().getURI()),Arrays.asList(volume));  Long newSize=SizeUtil.translateSize(param.getNewSize());  if (newSize.equals(volume.getCapacity()) && volume.getMetaVolumeMembers() != null && !(volume.getMetaVolumeMembers().isEmpty())) {    _log.info(String.format("expandVolume --- Zero capacity expansion: allowed as a recovery to cleanup dangling members from previous expand failure.\n" + "VolumeId id: %s, Current size: %d, New size: %d, Dangling volumes: %s ",id,volume.getCapacity(),newSize,volume.getMetaVolumeMembers()));  } else   if (newSize <= volume.getCapacity()) {    _log.info(String.format("expandVolume: VolumeId id: %s, Current size: %d, New size: %d ",id,volume.getCapacity(),newSize));    throw APIException.badRequests.newSizeShouldBeLargerThanOldSize("volume");  }  _log.info(String.format("expandVolume --- VolumeId id: %s, Current size: %d, New size: %d",id,volume.getCapacity(),newSize));  BlockServiceApi blockServiceApi=getBlockServiceImpl(volume);  blockServiceApi.verifyVolumeExpansionRequest(volume,newSize);  if (newSize > volume.getProvisionedCapacity()) {    long size=newSize - volume.getProvisionedCapacity();    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,volume.getTenant().getURI());    ArgValidator.checkEntity(tenant,volume.getTenant().getURI(),false);    Project project=_dbClient.queryObject(Project.class,volume.getProject().getURI());    ArgValidator.checkEntity(project,volume.getProject().getURI(),false);    VirtualPool cos=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());    ArgValidator.checkEntity(cos,volume.getVirtualPool(),false);    CapacityUtils.validateQuotasForProvisioning(_dbClient,cos,project,tenant,size,"volume");  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),taskId,ResourceOperationTypeEnum.EXPAND_BLOCK_VOLUME);  try {    blockServiceApi.expandVolume(volume,newSize,taskId);  } catch (  final ControllerException e) {    _log.error("Controller Error",e);    String errMsg=String.format("Controller Error: %s",e.getMessage());    op=new Operation(Operation.Status.error.name(),errMsg);    _dbClient.updateTaskOpStatus(Volume.class,id,taskId,op);    throw e;  }  auditOp(OperationTypeEnum.EXPAND_BLOCK_VOLUME,true,AuditLogManager.AUDITOP_BEGIN,volume.getId().toString(),volume.getCapacity(),newSize);  return toTask(volume,taskId,op);}  }
class C{  public double logPdf(double x){  recomputeZ();  if (x < 0 || x > 1) {    return Double.NEGATIVE_INFINITY;  } else   if (x == 0) {    if (alpha < 1) {      return Double.NaN;    }    return Double.NEGATIVE_INFINITY;  } else   if (x == 1) {    if (beta < 1) {      return Double.NaN;    }    return Double.NEGATIVE_INFINITY;  } else {    double logX=Math.log(x);    double log1mX=Math.log1p(-x);    return (alpha - 1) * logX + (beta - 1) * log1mX - z;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.856 -0500",hash_original_method="13418E29B3FCE72BDE84CBF193C1BADD",hash_generated_method="D3F015A27DBCA9D7F628390A30652935") public void reset(){  mLastEvent=null;  mLastNestingLevel=0;  mTrackballDown=false;  mTrackballUnhandled=false;  mTouchEventStreamPointers=0;  mTouchEventStreamIsTainted=false;  mTouchEventStreamUnhandled=false;  mHoverEntered=false;  while (mKeyStateList != null) {    final KeyState state=mKeyStateList;    mKeyStateList=state.next;    state.recycle();  }}  }
class C{  public void cancelLocalNotification(String notificationId){  impl.cancelLocalNotification(notificationId);}  }
class C{  private static boolean addShapelessCraftingRecipe(ItemStack aResult,Enchantment[] aEnchantmentsAdded,int[] aEnchantmentLevelsAdded,boolean aBuffered,boolean aKeepNBT,boolean aDismantleable,boolean aRemovable,Object[] aRecipe){  aResult=GT_OreDictUnificator.get(true,aResult);  if (aRecipe == null || aRecipe.length <= 0)   return false;  for (byte i=0; i < aRecipe.length; i++) {    if (aRecipe[i] instanceof IItemContainer)     aRecipe[i]=((IItemContainer)aRecipe[i]).get(1); else     if (aRecipe[i] instanceof Enum)     aRecipe[i]=((Enum)aRecipe[i]).name(); else     if (!(aRecipe[i] == null || aRecipe[i] instanceof ItemStack || aRecipe[i] instanceof String || aRecipe[i] instanceof Character))     aRecipe[i]=aRecipe[i].toString();  }  try {    ItemStack[] tRecipe=new ItemStack[9];    int i=0;    for (    Object tObject : aRecipe) {      if (tObject == null) {        if (D1)         GT_Log.err.println("WARNING: Missing Item for shapeless Recipe: " + (aResult == null ? "null" : aResult.getDisplayName()));        for (        Object tContent : aRecipe)         GT_Log.err.println(tContent);        return false;      }      if (tObject instanceof ItemStack) {        tRecipe[i]=(ItemStack)tObject;      } else       if (tObject instanceof String) {        tRecipe[i]=GT_OreDictUnificator.getFirstOre(tObject,1);        if (tRecipe[i] == null)         break;      }      i++;    }    removeRecipe(tRecipe);  } catch (  Throwable e) {    e.printStackTrace(GT_Log.err);  }  if (aResult == null || aResult.stackSize <= 0)   return false;  if (Items.feather.getDamage(aResult) == W || Items.feather.getDamage(aResult) < 0)   Items.feather.setDamage(aResult,0);  GT_Utility.updateItemStack(aResult);  if (sBufferCraftingRecipes && aBuffered)   sBufferRecipeList.add(new GT_Shapeless_Recipe(GT_Utility.copy(aResult),aDismantleable,aRemovable,aKeepNBT,aEnchantmentsAdded,aEnchantmentLevelsAdded,aRecipe)); else   GameRegistry.addRecipe(new GT_Shapeless_Recipe(GT_Utility.copy(aResult),aDismantleable,aRemovable,aKeepNBT,aEnchantmentsAdded,aEnchantmentLevelsAdded,aRecipe));  return true;}  }
class C{  private static double expectedRelativeError(final int log2m){  final long m=1 << log2m;  return 1.1D / Math.sqrt(m);}  }
class C{  private IProject createProjectHandle(IWorkspaceRoot root,String projectName){  return root.getProject(projectName);}  }
class C{  public State state(){  return state;}  }
class C{  public void disableHostsAndStorages(){  for (  VMwareHost host : hostsSystems.values()) {    host.setEnabled(false);  }  for (  VMwareStorage storage : storages.values()) {    storage.setEnabled(false);  }}  }
class C{  private static String createMessage(List missingOptions){  StringBuffer buff=new StringBuffer("Missing required option");  buff.append(missingOptions.size() == 1 ? "" : "s");  buff.append(": ");  Iterator it=missingOptions.iterator();  while (it.hasNext()) {    buff.append(it.next());    if (it.hasNext()) {      buff.append(", ");    }  }  return buff.toString();}  }
class C{  public boolean parseKMZFile(File file){  mLocalFile=file;  Log.d(BonusPackHelper.LOG_TAG,"KmlProvider.parseKMZFile:" + mLocalFile.getAbsolutePath());  try {    ZipFile kmzFile=new ZipFile(mLocalFile);    String rootFileName=null;    Enumeration<? extends ZipEntry> list=kmzFile.entries();    while (list.hasMoreElements() && rootFileName == null) {      ZipEntry ze=list.nextElement();      String name=ze.getName();      if (name.endsWith(".kml") && !name.contains("/"))       rootFileName=name;    }    boolean result;    if (rootFileName != null) {      ZipEntry rootEntry=kmzFile.getEntry(rootFileName);      InputStream stream=kmzFile.getInputStream(rootEntry);      Log.d(BonusPackHelper.LOG_TAG,"KML root:" + rootFileName);      result=parseKMLStream(stream,kmzFile);    } else {      Log.d(BonusPackHelper.LOG_TAG,"No .kml entry found.");      result=false;    }    kmzFile.close();    return result;  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public CEnableAction(final BackEndDebuggerProvider debuggerProvider,final int[] rows){  super(rows.length == 1 ? "Enable Breakpoint" : "Enable Breakpoints");  m_debuggerProvider=debuggerProvider;  m_rows=rows.clone();}  }
class C{  public static String encodeDateTime(Date date){  final FastDateFormat format=FastDateFormat.getInstance("dd-MMM-yyyy HH:mm:ss Z",TimeZone.getTimeZone("GMT"),Locale.US);  return format.format(date);}  }
class C{  private boolean cmd_saveInvoice(int C_Invoice_ID){  log.config("C_Invoice_ID=" + C_Invoice_ID);  MInvoice invoice=new MInvoice(Env.getCtx(),C_Invoice_ID,null);  if (invoice.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Invoice_ID=" + C_Invoice_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=(BigDecimal)((VNumber)m_qtyList.get(i)).getValue();      int M_Product_ID=((Integer)m_productList.get(i)).intValue();      MInvoiceLine il=new MInvoiceLine(invoice);      il.setM_Product_ID(M_Product_ID,true);      il.setQty(qty);      il.setPrice();      il.setTax();      if (il.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  log.config("#" + lineCount);  return true;}  }
class C{  protected Node newNode(){  return new SVGOMFlowRootElement();}  }
class C{  private int[] readDimension(ByteBuffer buf) throws IOException {  ISMatTag tag=new ISMatTag(buf);  int[] dims=tag.readToIntArray();  return dims;}  }
class C{  public static void dumpLocks(){  for (int i=0; i < numLocks(); i++) {    Lock l=getLock(i);    if (l != null) {      l.dump();    }  }  VM.sysWrite("\n");  VM.sysWrite("lock availability stats: ");  VM.sysWriteInt(globalLocksAllocated);  VM.sysWrite(" locks allocated, ");  VM.sysWriteInt(globalLocksFreed);  VM.sysWrite(" locks freed, ");  VM.sysWriteInt(globalFreeLocks);  VM.sysWrite(" free locks\n");}  }
class C{  public void remove(TradelogDetail tradelogDetail){  this.tradelogDetail.remove(tradelogDetail);}  }
class C{  public static ItemAspectContainer fromItem(ItemStack stack){  ItemAspectContainer container=new ItemAspectContainer(null,stack);  container.load(stack.getTagCompound(),null);  return container;}  }
class C{  public static <U,R>Function<MonoTSeq<U>,MonoTSeq<R>> lift(final Function<? super U,? extends R> fn){  return null;}  }
class C{  public ArpaFile(String arpaFileName,Vocabulary vocab){  this.arpaFile=new File(arpaFileName);  this.vocab=vocab;}  }
class C{  @Inject public MainMenuPresenter(MainMenuView view){  this.view=view;  this.view.setDelegate(this);}  }
class C{  public boolean isVirtualColumn(){  if (m_vo.ColumnSQL != null && m_vo.ColumnSQL.length() > 0)   return true;  return false;}  }
class C{  public AggregateableEvaluation(Evaluation eval) throws Exception {  super(eval.getHeader());  m_delegate=new weka.classifiers.evaluation.AggregateableEvaluation(eval.m_delegate);}  }
class C{  public static boolean isMultiLingualDocument(Properties ctx){  return MClient.get(ctx).isMultiLingualDocument();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:09:10.059 -0500",hash_original_method="D429979643A042485DCB33B3CB11511A",hash_generated_method="1CBADFC2814802505AC6D93CE89ED5E5") public Base64OutputStream(OutputStream out){  this(out,true);}  }
class C{  public void stopTracking(){  if (!tracking) {    return;  }  sensorEventProvider.unregisterListener(this);  sensorEventProvider.stop();  tracking=false;}  }
class C{  public static boolean hasVarargs(MethodSymbol methodSymbol){  return methodSymbol != null && methodSymbol.getParameters().length() > 0 && (methodSymbol.flags() & Flags.VARARGS) != 0;}  }
class C{  public final long bytesLoaded(){  return dataSourceStream.getLoadPosition();}  }
class C{  public <T>T post(final String url,final Object requestBody,final Class<T> responseType,final Object... urlVariables){  return getRestTemplate().postForObject(url,requestBody,responseType,urlVariables);}  }
class C{  public void endServingGIIRequest(){  if (this.owningQueue != null) {    this.owningQueue.endGiiQueueing();  }}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  protected Size2D arrangeFR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint c1=constraint.toUnconstrainedHeight();  Size2D size1=arrange(container,g2,c1);  if (constraint.getHeightRange().contains(size1.getHeight())) {    return size1;  } else {    double h=constraint.getHeightRange().constrain(size1.getHeight());    RectangleConstraint c2=constraint.toFixedHeight(h);    return arrange(container,g2,c2);  }}  }
class C{  public OnStateMachineStop(Object source,StateMachine<?,?> stateMachine){  super(source);  this.stateMachine=stateMachine;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  final public static double[] greatCircle(double phi1,double lambda0,double phi,double lambda,int n,boolean include_last){  if (n <= 0) {    n=1;  }  int end=include_last ? n + 1 : n;  end<<=1;  double cosphi=Math.cos(phi);  double cosphi1=Math.cos(phi1);  double sinphi1=Math.sin(phi1);  double ldiff=lambda - lambda0;  double p2diff=Math.sin(((phi - phi1) / 2));  double l2diff=Math.sin((ldiff) / 2);  double c=2.0f * Math.asin(Math.sqrt(p2diff * p2diff + cosphi1 * cosphi * l2diff* l2diff));  double Az=Math.atan2(cosphi * Math.sin(ldiff),(cosphi1 * Math.sin(phi) - sinphi1 * cosphi * Math.cos(ldiff)));  double cosAz=Math.cos(Az);  double sinAz=Math.sin(Az);  double[] points=new double[end];  points[0]=phi1;  points[1]=lambda0;  double inc=c / n;  c=inc;  for (int i=2; i < end; i+=2, c+=inc) {    double sinc=Math.sin(c);    double cosc=Math.cos(c);    points[i]=Math.asin(sinphi1 * cosc + cosphi1 * sinc * cosAz);    points[i + 1]=Math.atan2(sinc * sinAz,cosphi1 * cosc - sinphi1 * sinc * cosAz) + lambda0;  }  return points;}  }
class C{  public void error(Object source,long where,String err,Object arg1,Object arg2,Object arg3){  if (errorsPushed >= errorLimit + nwarnings) {    return;  }  if (System.getProperty("javac.dump.stack") != null) {    output("javac.err." + err + ": "+ errorString(err,arg1,arg2,arg3));    new Exception("Stack trace").printStackTrace(new PrintStream(out));  }  reportError(source,where,err,errorString(err,arg1,arg2,arg3));}  }
class C{  public static String toDottedQuad(int[] addr){  return (addr[0] + "." + addr[1]+ "."+ addr[2]+ "."+ addr[3]);}  }
class C{  public Hyperpoint(double[] vals){  int d=this.dimensionality=vals.length;  values=new double[d];  for (int i=1; i <= d; i++) {    values[i - 1]=vals[i - 1];  }}  }
class C{  public static void assertSameBreaks(CharacterIterator one,CharacterIterator two,BreakIterator expected,BreakIterator actual){  expected.setText(one);  actual.setText(two);  assertEquals(expected.current(),actual.current());  int v=expected.current();  while (v != BreakIterator.DONE) {    assertEquals(v=expected.next(),actual.next());    assertEquals(expected.current(),actual.current());  }  assertEquals(expected.first(),actual.first());  assertEquals(expected.current(),actual.current());  assertEquals(expected.last(),actual.last());  assertEquals(expected.current(),actual.current());  v=expected.current();  while (v != BreakIterator.DONE) {    assertEquals(v=expected.previous(),actual.previous());    assertEquals(expected.current(),actual.current());  }  for (int i=one.getBeginIndex(); i <= one.getEndIndex(); i++) {    expected.first();    actual.first();    assertEquals(expected.following(i),actual.following(i));    assertEquals(expected.current(),actual.current());  }  for (int i=one.getBeginIndex(); i <= one.getEndIndex(); i++) {    expected.last();    actual.last();    assertEquals(expected.preceding(i),actual.preceding(i));    assertEquals(expected.current(),actual.current());  }}  }
class C{  public double[][] propUp(double X_[][]){  return MatrixUtils.threshold(prob_Z(X_),0.5);}  }
class C{  public void check() throws SQLException {  checkModule("Replicator",new Version(OpenReplicatorManager.MAJOR,OpenReplicatorManager.MINOR,OpenReplicatorManager.SUFFIX));  checkModule("THL",new Version(THL.MAJOR,THL.MINOR,THL.SUFFIX));}  }
class C{  public boolean isRepairing(){  return repairing;}  }
class C{  public static Workflow.Method resyncCloneMethod(URI storage,List<URI> clone,Boolean updateOpStatus,boolean isCG){  return new Workflow.Method("resyncFullCopyStep",storage,clone,updateOpStatus,isCG);}  }
class C{  static public boolean between(double v1,double v,double v2){  return lt(v1,v) && lt(v,v2);}  }
class C{  @SuppressWarnings("unchecked") public final void testFactoryMethodWithCharSequenceParameter(){  CharSequence errorMessage="errorMessage";  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  ConjunctiveValidator<Object> conjunctiveValidator=ConjunctiveValidator.create(errorMessage,validators);  assertEquals(errorMessage,conjunctiveValidator.getErrorMessage());  assertEquals(validators,conjunctiveValidator.getValidators());}  }
class C{  public S3ManifestComparator(S3Reader connection,S3ObjectWriter writer,S3Deleter deleter,S3StringWriter stringWriter){  this.key="default";  this.versionedKey=newKey(1L).toJson();  this.reader=connection;  this.writer=writer;  this.deleter=deleter;  this.stringWriter=stringWriter;  backoff=500l;}  }
class C{  public void run(){  start();  try {    while (true) {      Thread.sleep(interval);      processConfigMessages();    }  } catch (  InterruptedException e) {    e.printStackTrace();    log.warn("Got interrupt in config manager thread, so shutting down");  } finally {    log.info("Stopping the config manager");    stop();  }}  }
class C{  public Attribute attribute(int index){  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  return m_Dataset.attribute(index);}  }
class C{  public static void registerConfig(){  Config.registerSelf(WMB.class);  transport=Config.parms.getString("jt");  bufferSize=Config.parms.getInt("jz");  if (transport.equals("mqb") || transport.equals("mqc")) {    usingMQ=true;  } else {    usingMQ=false;  }}  }
class C{  public void attachContainer(String container,MessageProcessor<LogMessage> containerLogsProcessor,boolean stream) throws IOException {  final List<Pair<String,?>> headers=new ArrayList<>(2);  headers.add(Pair.of("Content-Type",MediaType.TEXT_PLAIN));  headers.add(Pair.of("Content-Length",0));  try (DockerConnection connection=openConnection(dockerDaemonUri).method("POST").path("/containers/" + container + "/attach").query("stream",(stream ? 1 : 0)).query("logs",(stream ? 0 : 1)).query("stdout",1).query("stderr",1).headers(headers)){    final DockerResponse response=connection.request();    final int status=response.getStatus();    if (OK.getStatusCode() != status) {      throw new DockerException(getDockerExceptionMessage(response),status);    }    try (InputStream responseStream=response.getInputStream()){      new LogMessagePumper(responseStream,containerLogsProcessor).start();    }   } }  }
class C{  public static Class<?>[] primitivesToWrappers(final Class<?>... classes){  if (classes == null) {    return null;  }  if (classes.length == 0) {    return classes;  }  final Class<?>[] convertedClasses=new Class[classes.length];  for (int i=0; i < classes.length; i++) {    convertedClasses[i]=primitiveToWrapper(classes[i]);  }  return convertedClasses;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writeStroke(this.stroke,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writeStroke(this.outlineStroke,stream);  SerialUtilities.writePaint(this.labelPaint,stream);}  }
class C{  protected synchronized void incrementFinished(){  m_finishedCount++;}  }
class C{  public static Properties fromFileContent(String content){  try {    StringReader reader=new StringReader(content);    Properties props=new Properties();    props.load(reader);    return props;  } catch (  IOException ioe) {    throw new IllegalStateException(ioe);  }}  }
class C{  private static String toHex(byte[] array){  BigInteger bi=new BigInteger(1,array);  String hex=bi.toString(16);  int paddingLength=(array.length * 2) - hex.length();  if (paddingLength > 0)   return String.format("%0" + paddingLength + "d",0) + hex; else   return hex;}  }
class C{  public AsyncResult ModifySubscriptionAsync(ModifySubscriptionRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public synchronized BookKeeperClientBuilder requestTimer(HashedWheelTimer requestTimer){  this.requestTimer=requestTimer;  return this;}  }
class C{  void popNamespaces(int elemDepth,ContentHandler saxHandler){  while (true) {    if (m_nodeStack.isEmpty())     return;    MappingRecord map=(MappingRecord)(m_nodeStack.peek());    int depth=map.m_declarationDepth;    if (elemDepth < 1 || map.m_declarationDepth < elemDepth)     break;    MappingRecord nm1=(MappingRecord)m_nodeStack.pop();    String prefix=map.m_prefix;    Stack prefixStack=getPrefixStack(prefix);    MappingRecord nm2=(MappingRecord)prefixStack.peek();    if (nm1 == nm2) {      prefixStack.pop();      if (saxHandler != null) {        try {          saxHandler.endPrefixMapping(prefix);        } catch (        SAXException e) {        }      }    }  }}  }
class C{  public void add(boolean element){  if (size == elements.length) {    ensureCapacity(size + 1);  }  elements[size++]=element;}  }
class C{  public T caseTAnnotationStringArgument(TAnnotationStringArgument object){  return null;}  }
class C{  @SuppressWarnings("unchecked") public ClassParameter(OptionID optionID,Class<?> restrictionClass,Class<?> defaultValue){  super(optionID,(Class<? extends C>)defaultValue);  this.restrictionClass=(Class<C>)restrictionClass;  if (restrictionClass == null) {    LOG.warning("Restriction class 'null' for parameter '" + optionID + "'",new Throwable());  }}  }
class C{  private void addContainerToTest(String containerId,ContainerType type,String testName,Class<? extends Test> testClass) throws Exception {  String testClassName=testClass.getName().substring(testClass.getName().lastIndexOf(".") + 1);  String targetDir=containerId + "/" + type.getType()+ "/"+ testClassName+ "/"+ testName+ "/container";  EnvironmentTestData testData=new EnvironmentTestData(containerId,type,targetDir);  Constructor<? extends Test> constructor=testClass.getConstructor(new Class[]{String.class,EnvironmentTestData.class});  Test test=constructor.newInstance(new Object[]{testName,testData});  addTest(test);}  }
class C{  @SuppressWarnings({"unchecked"}) private Map<String,Object> parameters(ServletRequest req){  Map<String,String[]> params=req.getParameterMap();  if (F.isEmpty(params))   return Collections.emptyMap();  Map<String,Object> map=U.newHashMap(params.size());  for (  Map.Entry<String,String[]> entry : params.entrySet())   map.put(entry.getKey(),parameter(entry.getValue()));  return map;}  }
class C{  private boolean skipNextIF(){  Assert.isTrue(fToken == Symbols.TokenELSE);  while (true) {    nextToken();switch (fToken) {case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:      skipScope();    break;case Symbols.TokenIF:  return true;case Symbols.TokenELSE:skipNextIF();break;case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:return false;}}}  }
class C{  protected void restoreContext(){  for (  GridField f : m_mFields) {    if (f != null)     f.restoreValue();  }  for (  GridField f : m_mFields2) {    if (f != null)     f.restoreValue();  }}  }
class C{  public final AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES,-1);}  }
class C{  public void write(byte[] bytes,int off,int len) throws IOException {  buf.put(bytes,off,len);}  }
class C{  public final void applySetting(DocumentBuilderFactory factory){  strategy.applySetting(factory,value);}  }
class C{  private SemGraph createManipulatedGraph(Graph graph){  SemGraph updatedGraph=new SemGraph(graph);  for (int i=0; i < evidence.getNumNodes(); ++i) {    if (evidence.isManipulated(i)) {      Node node=evidence.getNode(i);      List<Node> parents=updatedGraph.getParents(node);      for (      Node parent : parents) {        if (parent.getNodeType() == NodeType.ERROR) {          continue;        }        updatedGraph.removeEdge(node,parent);      }    }  }  return updatedGraph;}  }
class C{  public void doClick(){  doClick(68);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  Counter oper=new Counter();  CountTestSink cSink=new CountTestSink();  oper.output.setSink(cSink);  int numtuples=100;  oper.beginWindow(0);  for (int i=0; i < numtuples; i++) {    oper.input.process(i);  }  oper.endWindow();  oper.beginWindow(1);  for (int i=0; i < numtuples; i++) {    oper.input.process(i);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",2,cSink.getCount());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public CellWorld(int xDimension,int yDimension,C defaultCellContent){  for (int x=1; x <= xDimension; x++) {    Map<Integer,Cell<C>> xCol=new HashMap<Integer,Cell<C>>();    for (int y=1; y <= yDimension; y++) {      Cell<C> c=new Cell<C>(x,y,defaultCellContent);      cells.add(c);      xCol.put(y,c);    }    cellLookup.put(x,xCol);  }}  }
class C{  public void processFileAndScheduleJobs(Scheduler sched,boolean overWriteExistingJobs) throws Exception {  String fileName=QUARTZ_XML_DEFAULT_FILE_NAME;  processFile(fileName,getSystemIdForFileName(fileName));  setOverWriteExistingData(overWriteExistingJobs);  executePreProcessCommands(sched);  scheduleJobs(sched);}  }
class C{  @MediumTest public void testSimpleCreate(){  createApplication();}  }
class C{  protected CCLabel(CharSequence string,String fontname,float fontsize){  this(string,CGSize.make(0,0),TextAlignment.CENTER,fontname,fontsize);}  }
class C{  public TitledBorder(Border border,String title,int titleJustification,int titlePosition){  this(border,title,titleJustification,titlePosition,null,null);}  }
class C{  public String generateLocalUserName(String media){  IceMediaStream stream=getStream(media);  String ret;  if (stream == null) {    ret=null;    logger.warning("Agent contains no IceMediaStream with name " + media + "!");  } else {    String remoteUfrag=stream.getRemoteUfrag();    if (remoteUfrag == null) {      ret=null;      logger.warning("Remote ufrag of IceMediaStream with name " + media + " is null!");    } else {      ret=remoteUfrag + ":" + getLocalUfrag();    }  }  return ret;}  }
class C{  public ImageDescriptorRegistry(Display display){  fDisplay=display;  Assert.isNotNull(fDisplay);  hookDisplay();}  }
class C{  @Override public int write(OutputStreamWithBuffer os,char[] cBuf,int cOffset,int cLength) throws IOException {  byte[] bBuf=os.buffer();  int bOffset=os.offset();  int bEnd=bBuf.length;  int cEnd=cOffset + cLength;  while (cOffset < cEnd) {    int sublen=Math.min(bEnd - bOffset,cEnd - cOffset);    for (int i=sublen - 1; i >= 0; i--) {      char ch=cBuf[cOffset + i];      bBuf[bOffset + i]=(byte)(ch < 0x100 ? ch : 0x3f);    }    bOffset+=sublen;    cOffset+=sublen;    if (bOffset == bEnd && cLength > 0) {      bBuf=os.nextBuffer(bOffset);      bOffset=os.offset();      bEnd=bBuf.length;    }  }  os.offset(bOffset);  return cLength;}  }
class C{  @Override public synchronized void save(){  getShortTermMemory().save();  if (Utils.checkLowMemory()) {    this.bot.log(this,"Low memory - clearing short term memory",Level.INFO);    getShortTermMemory().clear();    if (cacheSize() > Bot.MAX_CACHE) {      this.bot.log(this,"Cache too big - clearing server cache",Level.WARNING,cacheSize(),Bot.MAX_CACHE);      freeMemory();    }  } else {    getShortTermMemory().resume();  }}  }
class C{  public FBSimpleDataSource(GDSType type){  super(type);}  }
class C{  public boolean isInstanceOf(ObjectName name,String className) throws InstanceNotFoundException {  return mbsInterceptor.isInstanceOf(cloneObjectName(name),className);}  }
class C{  private void updateOverdueScheduleInstallment(final LoanCharge loanCharge){  if (loanCharge.isOverdueInstallmentCharge() && loanCharge.isActive()) {    LoanOverdueInstallmentCharge overdueInstallmentCharge=loanCharge.getOverdueInstallmentCharge();    if (overdueInstallmentCharge != null) {      Integer installmentNumber=overdueInstallmentCharge.getInstallment().getInstallmentNumber();      LoanRepaymentScheduleInstallment installment=fetchRepaymentScheduleInstallment(installmentNumber);      overdueInstallmentCharge.updateLoanRepaymentScheduleInstallment(installment);    }  }}  }
class C{  public static LikeExpression notLike(Expression left,Expression right,Expression escape){  return new LikeExpression(left,right,escape,true);}  }
class C{  public void marshall(IgfsMessage msg,byte[] hdr,ObjectOutput out) throws IgniteCheckedException {  assert hdr != null;  assert hdr.length == HEADER_SIZE;  try {switch (msg.command()) {case HANDSHAKE:{        out.write(hdr);        IgfsHandshakeRequest req=(IgfsHandshakeRequest)msg;        U.writeString(out,req.gridName());        U.writeString(out,req.igfsName());        U.writeString(out,req.logDirectory());        break;      }case STATUS:{      out.write(hdr);      break;    }case EXISTS:case INFO:case PATH_SUMMARY:case UPDATE:case RENAME:case DELETE:case MAKE_DIRECTORIES:case LIST_PATHS:case LIST_FILES:case AFFINITY:case SET_TIMES:case OPEN_READ:case OPEN_APPEND:case OPEN_CREATE:{    out.write(hdr);    IgfsPathControlRequest req=(IgfsPathControlRequest)msg;    U.writeString(out,req.userName());    writePath(out,req.path());    writePath(out,req.destinationPath());    out.writeBoolean(req.flag());    out.writeBoolean(req.colocate());    U.writeStringMap(out,req.properties());    if (msg.command() == AFFINITY) {      out.writeLong(req.start());      out.writeLong(req.length());    } else     if (msg.command() == OPEN_CREATE) {      out.writeInt(req.replication());      out.writeLong(req.blockSize());    } else     if (msg.command() == SET_TIMES) {      out.writeLong(req.accessTime());      out.writeLong(req.modificationTime());    } else     if (msg.command() == OPEN_READ && req.flag())     out.writeInt(req.sequentialReadsBeforePrefetch());    break;  }case CLOSE:case READ_BLOCK:case WRITE_BLOCK:{  assert msg.command() != WRITE_BLOCK : "WRITE_BLOCK should be marshalled manually.";  IgfsStreamControlRequest req=(IgfsStreamControlRequest)msg;  U.longToBytes(req.streamId(),hdr,12);  if (msg.command() == READ_BLOCK)   U.intToBytes(req.length(),hdr,20);  out.write(hdr);  if (msg.command() == READ_BLOCK)   out.writeLong(req.position());  break;}case CONTROL_RESPONSE:{out.write(hdr);IgfsControlResponse res=(IgfsControlResponse)msg;res.writeExternal(out);break;}default :{assert false : "Invalid command: " + msg.command();throw new IllegalArgumentException("Failed to marshal message (invalid command): " + msg.command());}}} catch (IOException e) {throw new IgniteCheckedException("Failed to send message to IGFS data node (is data node up and running?)",e);}}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  public void registerPlaceHolders(String... placeHolders){  for (  String placeHolder : placeHolders) {    if (this.placeHolders.contains(placeHolder))     continue;    this.placeHolders.add(placeHolder);  }}  }
class C{  public void validate() throws LogConsistencyException {  index.validate(logDir);}  }
class C{  public Role findRoleByRoleName(String roleName){  return roleRepository.findTopByRoleName(roleName);}  }
class C{  public static String executeShell(String command,String... args){  if (m_currentDevice != null) {    try {      m_currentDevice.executeShell(command,args);    } catch (    IOException|JadbException e) {      String out="Failed: " + command;      System.out.println(out);      e.printStackTrace();      return out;    }  } else {    return "Current Device is null";  }  return command + " " + args+ " COMPLETE";}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public boolean isActive(){  return false;}  }
class C{  public ChannelTest(String name){  super(name);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS03.class,args);}  }
class C{  private void consolidate(){  table.clear();  Node x=head;  int maxOrder=0;  min=head;  Node y=null;  Node z=null;  do {    y=x;    x=x.next;    z=table.get(y.order);    while (z != null) {      table.remove(y.order);      if (greater(y.key,z.key)) {        link(y,z);        y=z;      } else {        link(z,y);      }      z=table.get(y.order);    }    table.put(y.order,y);    if (y.order > maxOrder)     maxOrder=y.order;  } while (x != head);  head=null;  for (  Node n : table.values()) {    if (n != null) {      min=greater(min.key,n.key) ? n : min;      head=insert(n,head);    }  }}  }
class C{  public boolean readBit(int probability) throws IOException {  int split=low + probability * ((high - low) >>> 12);  boolean value;  if (data + Integer.MIN_VALUE > split + Integer.MIN_VALUE) {    low=split + 1;    value=false;  } else {    high=split;    value=true;  }  while (low >>> 24 == high >>> 24) {    data=(data << 8) | (in.read() & 0xff);    low<<=8;    high=(high << 8) | 0xff;  }  return value;}  }
class C{  public TCPEndpoint(String host,int port){  this(host,port,null,null);}  }
class C{  private void parseBindElements(XmlReader.Element e,ItemElement ie,String referVariable){  final Array<XmlReader.Element> binds=e.getChildrenByName(XmlElementNames.BIND);  if (binds == null || binds.size == 0)   return;  BindElement be;  XmlReader.Element bindEle;  List<PropertyElement> props;  for (int i=0, size=binds.size; i < size; i++) {    be=new BindElement(XmlElementNames.BIND);    bindEle=binds.get(i);    String id=bindEle.getAttribute(XmlKeys.ID,null);    if (!TextUtils.isEmpty(id)) {      be.setId(id);    }    String refer=bindEle.getAttribute(XmlKeys.REFER_VARIABLE,null);    if (!TextUtils.isEmpty(refer)) {      be.setReferVariable(refer);    }    refer=DataBindUtil.mergeReferVariable(referVariable,refer);    props=parsePropertyElements(bindEle,refer,id,true);    if (props != null && props.size() > 0) {      be.setPropertyElements(props);    }    parseImageProperty(be,bindEle,refer,id);    ie.addBindElement(be);  }}  }
class C{  void appendRoles(Document xmldoc,Element parent,LocalizerServiceLocal localizer,TechnicalProduct technicalProduct){  List<RoleDefinition> roleDefs=technicalProduct.getRoleDefinitions();  for (  RoleDefinition role : roleDefs) {    Element defNode=xmldoc.createElement("Role");    defNode.setAttribute("id",role.getRoleId());    parent.appendChild(defNode);    appendLocalizedValues(xmldoc,localizer,defNode,LocalizedObjectTypes.ROLE_DEF_NAME,role.getKey(),"LocalizedName");    appendLocalizedValues(xmldoc,localizer,defNode,LocalizedObjectTypes.ROLE_DEF_DESC,role.getKey(),"LocalizedDescription");  }}  }
class C{  void storeRandomFile() throws Exception {  File f=new File(System.getProperty("user.home") + "/temp/rand.txt");  FileOutputStream out=new FileOutputStream(f);  CalculateHashConstantLong test=new CalculateHashConstantLong();  byte[] buff=new byte[8];  for (int i=0; i < 10000000 / 8; i++) {    long y=test.hash(i);    writeLong(buff,0,y);    out.write(buff);  }  out.close();}  }
class C{  public long restartTime(long now){  if (numFailed == 0) {    return now;  }  if (retryAfter > 0) {    return lastMod + retryAfter;  }  return lastMod + Constants.RETRY_FIRST_DELAY * (1000 + randomNumberGenerator.generate()) * (1 << (numFailed - 1));}  }
class C{  public View(String namespace,String name,List<Expression> parameters){  super(namespace,name,parameters);}  }
class C{  public java.lang.StringBuilder insert(int offset,long l){  return null;}  }
class C{  public SocketHandler() throws IOException {  sealed=false;  configure();  try {    connect();  } catch (  IOException ix) {    System.err.println("SocketHandler: connect failed to " + host + ":"+ port);    throw ix;  }  sealed=true;}  }
class C{  public synchronized void printProcessErrorOutput(PrintStream printTo){  if (stderr != null && stderr.length() > 0) {    printTo.println("========= Child VM System.err ========");    printTo.print(stderr);    printTo.println("======================================");  }}  }
class C{  public static void main(String[] args){  runDataGenerator(new RandomRBF(),args);}  }
class C{  public void addUndoableEdit(UndoableEdit edit){}  }
class C{  private void handleCommandFromXMPP(String commandLine,String from){  String command;  String args;  if (commandLine.contains(":")) {    command=commandLine.substring(0,commandLine.indexOf(":")).trim();    args=commandLine.substring(commandLine.indexOf(":") + 1);  } else {    command=commandLine.trim();    args="";  }  executeCommand(command,args,from);}  }
class C{  public Dialog(){  this(null,"","");}  }
class C{  public CertPathBuilderResult engineBuild(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  if (!(params instanceof PKIXBuilderParameters) && !(params instanceof ExtendedPKIXBuilderParameters)) {    throw new InvalidAlgorithmParameterException("Parameters must be an instance of " + PKIXBuilderParameters.class.getName() + " or "+ ExtendedPKIXBuilderParameters.class.getName()+ ".");  }  ExtendedPKIXBuilderParameters pkixParams=null;  if (params instanceof ExtendedPKIXBuilderParameters) {    pkixParams=(ExtendedPKIXBuilderParameters)params;  } else {    pkixParams=(ExtendedPKIXBuilderParameters)ExtendedPKIXBuilderParameters.getInstance((PKIXBuilderParameters)params);  }  Collection targets;  Iterator targetIter;  List certPathList=new ArrayList();  X509Certificate cert;  Selector certSelect=pkixParams.getTargetConstraints();  if (!(certSelect instanceof X509CertStoreSelector)) {    throw new CertPathBuilderException("TargetConstraints must be an instance of " + X509CertStoreSelector.class.getName() + " for "+ this.getClass().getName()+ " class.");  }  try {    targets=CertPathValidatorUtilities.findCertificates((X509CertStoreSelector)certSelect,pkixParams.getStores());    targets.addAll(CertPathValidatorUtilities.findCertificates((X509CertStoreSelector)certSelect,pkixParams.getCertStores()));  } catch (  AnnotatedException e) {    throw new ExtCertPathBuilderException("Error finding target certificate.",e);  }  if (targets.isEmpty()) {    throw new CertPathBuilderException("No certificate found matching targetContraints.");  }  CertPathBuilderResult result=null;  targetIter=targets.iterator();  while (targetIter.hasNext() && result == null) {    cert=(X509Certificate)targetIter.next();    result=build(cert,pkixParams,certPathList);  }  if (result == null && certPathException != null) {    if (certPathException instanceof AnnotatedException) {      throw new CertPathBuilderException(certPathException.getMessage(),certPathException.getCause());    }    throw new CertPathBuilderException("Possible certificate chain could not be validated.",certPathException);  }  if (result == null && certPathException == null) {    throw new CertPathBuilderException("Unable to find certificate chain.");  }  return result;}  }
class C{  public static boolean deleteFiles(String directoryPath){  int filesDeletedCount=0;  List<String> files=fileList(directoryPath,true);  Iterator<String> filesIterator=files.iterator();  while (filesIterator.hasNext()) {    String file=filesIterator.next();    deleteFile(file);    filesDeletedCount++;  }  return (filesDeletedCount > 0 ? true : false);}  }
class C{  public void add(Predicate p,Object val){  if (m_tail == null) {    m_tail=new IfExpression(p,new ObjectLiteral(val),m_head);    m_head=m_tail;  } else {    IfExpression ie=new IfExpression(p,new ObjectLiteral(val),m_tail.getElseExpression());    m_tail.setElseExpression(ie);    m_tail=ie;  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case VERSIONS:    return isSetVersions();case TIMESTAMP:  return isSetTimestamp();}throw new IllegalStateException();}  }
class C{  public Matrix3f multLocal(Matrix3f mat){  return mult(mat,this);}  }
class C{  public void clear(){  SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=prefs.edit();  editor.remove(PREFS_KEY_CONNECTION_CONFIGS);  editor.commit();}  }
class C{  @Override public void store(DataOutput os) throws IOException {  super.store(os);}  }
class C{  public void blockRequestOnShard(String shardId){  trace("[{}] Block requests on shard : {}",gondola.getHostId(),shardId);  shardLocks.putIfAbsent(shardId,new CountDownLatch(1));}  }
class C{  public UrlConnection(final IHttpRequest request) throws IOException {  mConnection=(HttpURLConnection)request.getRequestUrl().openConnection();  for (  final HeaderOption header : request.getHeaders()) {    mConnection.addRequestProperty(header.getName(),header.getValue());  }  try {    mConnection.setRequestMethod(request.getHttpMethod().toString());  } catch (  final ProtocolException ignored) {    mConnection.setRequestMethod(HttpMethod.POST.toString());    mConnection.addRequestProperty("X-HTTP-Method-Override",request.getHttpMethod().toString());    mConnection.addRequestProperty("X-HTTP-Method",request.getHttpMethod().toString());  }}  }
class C{  public FilterIterator(Iterator tuples,Predicate p){  this.predicate=p;  this.tuples=tuples;  next=advance();}  }
class C{  public static boolean isDark(@ColorInt int color){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  return isDark(hsl);}  }
class C{  private static SfxMomentData parseSfxMoment(String momentId,Element momentElement) throws MissionParseException {  Uri uri=parseUriElement(findSingleChildElementByTag(momentElement,ELEMENT_URI));  String nextMomentId=getNextMomentId(momentElement);  ArrayList<String> fictionalProgress=parseMomentFictionalProgress(momentElement);  return new SfxMomentData(momentId,nextMomentId,fictionalProgress,uri);}  }
class C{  public static void mergeSort(byte[] a,int fromIndex,int toIndex,ByteComparator c){  rangeCheck(a.length,fromIndex,toIndex);  byte aux[]=(byte[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex,c);}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("ArrayRangeTarg");  targetClass=bpe.location().declaringType();  Field fullField=targetClass.fieldByName("fullArray");  Field emptyField=targetClass.fieldByName("emptyArray");  ArrayReference emptyAR=(ArrayReference)targetClass.getValue(emptyField);  ArrayReference fullAR=(ArrayReference)targetClass.getValue(fullField);  Sample full=new Sample("full",fullAR,ArrayRangeTarg.fullArray);  Sample empty=new Sample("empty",emptyAR,ArrayRangeTarg.emptyArray);  getValueGood(full,0);  getValueGood(full,4);  getValueBad(full,-1);  getValueBad(full,-2);  getValueBad(empty,-1);  getValueBad(empty,-2);  getValueBad(full,5);  getValueBad(empty,0);  getValueBad(empty,5);  getValuesGood(full);  getValuesGood(empty);  getValuesGood(full,0,5);  getValuesGood(full,0,4);  getValuesGood(full,1,4);  getValuesGood(full,5,0);  getValuesGood(full,0,0);  getValuesGood(full,0,-1);  getValuesGood(full,1,-1);  getValuesGood(full,5,-1);  getValuesGood(empty,0,0);  getValuesGood(empty,0,-1);  getValuesBad(full,-1,0);  getValuesBad(full,-1,3);  getValuesBad(full,-1,-1);  getValuesBad(empty,-1,0);  getValuesBad(full,-2,0);  getValuesBad(full,-2,3);  getValuesBad(full,-2,-1);  getValuesBad(empty,-2,0);  getValuesBad(full,6,0);  getValuesBad(full,6,-1);  getValuesBad(empty,1,0);  getValuesBad(empty,1,-1);  getValuesBad(full,0,-2);  getValuesBad(empty,0,-2);  getValuesBad(full,0,6);  getValuesBad(full,1,5);  getValuesBad(full,2,4);  getValuesBad(full,5,1);  getValuesBad(empty,0,1);  setValueGood(full,0,55);  setValueGood(full,4,66);  setValueBad(full,-1,77);  setValueBad(full,-2,77);  setValueBad(full,5,77);  setValueBad(full,6,77);  check(full,new int[]{55,100,200,300,66});  setValueBad(empty,-1,77);  setValueBad(empty,-2,77);  setValueBad(empty,0,77);  setValueBad(empty,1,77);  setValuesGood(full,new int[]{40,41,42});  setValuesGood(full,new int[]{});  check(full,new int[]{40,41,42,300,66});  setValuesGood(full,new int[]{99,51,52,53,54,55});  setValuesGood(full,new int[]{50});  check(full,new int[]{50,51,52,53,54});  setValuesGood(empty,new int[]{});  setValuesGood(empty,new int[]{88});  setValuesGood(full,2,new int[]{30,31,32,33,34,35},0,3);  setValuesGood(full,0,new int[]{80},0,1);  check(full,new int[]{80,51,30,31,32});  setValuesGood(full,0,new int[]{90,91,92,93,94,95},3,3);  setValuesGood(full,4,new int[]{81},0,1);  check(full,new int[]{93,94,95,31,81});  setValuesGood(full,3,new int[]{60,61,62,63},0,-1);  setValuesGood(full,0,new int[]{82},0,-1);  check(full,new int[]{82,94,95,60,61});  setValuesGood(full,3,new int[]{20,21,22,23},1,-1);  setValuesGood(full,1,new int[]{83,84},1,-1);  setValuesGood(full,1,new int[]{},0,-1);  setValuesGood(full,2,new int[]{},0,0);  setValuesGood(full,3,new int[]{99},0,0);  setValuesGood(full,4,new int[]{99,98},1,0);  check(full,new int[]{82,84,95,21,22});  setValuesGood(empty,0,new int[]{},0,-1);  setValuesGood(empty,0,new int[]{},0,0);  setValuesGood(empty,0,new int[]{99},0,0);  setValuesGood(empty,0,new int[]{99,98},1,0);  setValuesBad(full,-1,new int[]{30,31,32,33,34,35},0,0);  setValuesBad(full,-1,new int[]{30,31,32,33,34,35},0,-1);  setValuesBad(full,-2,new int[]{30,31,32,33,34,35},0,-1);  setValuesBad(empty,-1,new int[]{},0,0);  setValuesBad(empty,-2,new int[]{},0,0);  setValuesBad(full,6,new int[]{30,31,32,33,34,35},0,1);  setValuesBad(full,6,new int[]{30,31,32,33,34,35},0,-1);  setValuesBad(empty,1,new int[]{4},0,0);  setValuesBad(empty,1,new int[]{},0,0);  setValuesBad(empty,1,new int[]{},0,-1);  setValuesBad(full,0,new int[]{90,91,92,93,94,95},-1,3);  setValuesBad(full,0,new int[]{90,91,92,93,94,95},-1,0);  setValuesBad(full,0,new int[]{90,91,92,93,94,95},-1,-1);  setValuesBad(full,0,new int[]{90,91,92,93,94,95},-2,-1);  setValuesBad(full,1,new int[]{},-1,-1);  setValuesBad(full,2,new int[]{},-1,0);  setValuesBad(empty,0,new int[]{},-1,0);  setValuesBad(full,0,new int[]{81},2,0);  setValuesBad(full,0,new int[]{81},2,1);  setValuesBad(full,0,new int[]{81},2,-1);  setValuesBad(full,4,new int[]{},1,0);  setValuesBad(full,1,new int[]{},1,-1);  setValuesBad(full,2,new int[]{},1,0);  setValuesBad(empty,0,new int[]{},1,0);  setValuesBad(empty,0,new int[]{5},2,0);  setValuesBad(full,3,new int[]{60,61,62,63},0,-2);  setValuesBad(full,3,new int[]{},0,-2);  setValuesBad(full,0,new int[]{20,21,22,23,24,25,26},0,6);  setValuesBad(full,1,new int[]{20,21,22,23,24,25,26},0,5);  setValuesBad(full,2,new int[]{20,21,22,23,24,25,26},0,4);  setValuesBad(full,3,new int[]{20,21,22,23,24,25,26},0,3);  setValuesBad(full,4,new int[]{20,21,22,23,24,25,26},0,2);  setValuesBad(full,5,new int[]{20,21,22,23,24,25,26},0,1);  setValuesBad(full,6,new int[]{20,21,22,23,24,25,26},0,0);  setValuesBad(full,2,new int[]{20,21,22,23,24,25,26},1,4);  setValuesBad(full,3,new int[]{20,21,22,23,24,25,26},1,3);  setValuesBad(full,4,new int[]{20,21,22,23,24,25,26},2,2);  setValuesBad(full,5,new int[]{20,21,22,23,24,25,26},3,1);  setValuesBad(full,6,new int[]{20,21,22,23,24,25,26},4,0);  setValuesBad(empty,0,new int[]{6},0,1);  setValuesBad(full,0,new int[]{82},0,2);  setValuesBad(full,0,new int[]{82},1,1);  setValuesBad(full,0,new int[]{82},2,0);  setValuesBad(full,0,new int[]{20,21,22},0,4);  setValuesBad(full,0,new int[]{20,21,22},1,3);  setValuesBad(full,0,new int[]{20,21,22},2,2);  setValuesBad(full,0,new int[]{20,21,22},3,1);  setValuesBad(full,0,new int[]{20,21,22},4,0);  check(full,new int[]{82,84,95,21,22});  listenUntilVMDisconnect();  if (!testFailed) {    println("ArrayRangeTest: passed");  } else {    throw new Exception("ArrayRangeTest: failed");  }}  }
class C{  private static InputStream preProcessStream(InputStream stream){  java.util.Scanner s=new java.util.Scanner(stream,StandardCharsets.UTF_8.name()).useDelimiter("\\A");  String input=s.hasNext() ? s.next() : "";  input=input.replaceAll(methodReorderPattern,methodNewOrder);  return new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8));}  }
class C{  private String booleanToString(boolean condition){  String result="false";  if (condition)   result="true";  return result;}  }
class C{  public LocalDateTime createDateTime(LocalDateTime dateTime,ZoneOffset standardOffset,ZoneOffset wallOffset){switch (this) {case UTC:{      int difference=wallOffset.getTotalSeconds() - ZoneOffset.UTC.getTotalSeconds();      return dateTime.plusSeconds(difference);    }case STANDARD:{    int difference=wallOffset.getTotalSeconds() - standardOffset.getTotalSeconds();    return dateTime.plusSeconds(difference);  }default :return dateTime;}}  }
class C{  public JSONArray put(long value){  put(new Long(value));  return this;}  }
class C{  public boolean containsKey(UnaryRule key){  return entries.containsKey(key);}  }
class C{  public synchronized boolean isPreload(){  return preload;}  }
class C{  protected void updateChoice(ItemEvent e){  if (e.getStateChange() == ItemEvent.SELECTED) {    String name=getCurrentChoice().getSelectedItem();    select(name);  }}  }
class C{  public static String createHashCode(String uri,String payload){  String concatenated=trimIfNotNull(uri) + trimIfNotNull(payload);  if (concatenated == null) {    return null;  }  return Hashing.murmur3_128().hashString(concatenated,Charsets.UTF_8).toString();}  }
class C{  public RegExpExpression(){  not=false;}  }
class C{  public static GenerationContext execute(InlineDecision inlDec,GenerationContext parent,ExceptionHandlerBasicBlockBag ebag,Instruction callSite){  if (inlDec.needsGuard()) {    GenerationContext container=GenerationContext.createSynthetic(parent,ebag);    container.getCfg().breakCodeOrder(container.getPrologue(),container.getEpilogue());    RVMMethod[] targets=inlDec.getTargets();    byte[] guards=inlDec.getGuards();    GenerationContext[] children=new GenerationContext[targets.length];    for (int i=0; i < targets.length; i++) {      NormalMethod callee=(NormalMethod)targets[i];      if (parent.getOptions().PRINT_INLINE_REPORT) {        String guard=guards[i] == OptOptions.INLINE_GUARD_CLASS_TEST ? " (class test) " : " (method test) ";        VM.sysWrite("\tGuarded inline" + guard + " "+ callee+ " into "+ callSite.position().getMethod()+ " at bytecode "+ callSite.getBytecodeIndex()+ "\n");      }      children[i]=parent.createChildContext(ebag,callee,callSite);      BC2IR.generateHIR(children[i]);      children[i].transferStateToParent();    }    if (Call.hasResult(callSite)) {      Register reg=Call.getResult(callSite).getRegister();      container.setResult(children[0].getResult());      for (int i=1; i < targets.length; i++) {        if (children[i].getResult() != null) {          container.setResult((container.getResult() == null) ? children[i].getResult() : Operand.meet(container.getResult(),children[i].getResult(),reg));        }      }      if (!inlDec.OSRTestFailed()) {        RegisterOperand failureCaseResult=Call.getResult(callSite).copyRO();        container.setResult((container.getResult() == null) ? failureCaseResult : Operand.meet(container.getResult(),failureCaseResult,reg));      }    }    BasicBlock testFailed=new BasicBlock(callSite.getBytecodeIndex(),callSite.position(),parent.getCfg());    testFailed.setExceptionHandlers(ebag);    if (COUNT_FAILED_GUARDS && Controller.options.INSERT_DEBUGGING_COUNTERS) {      String eventName="Guarded inline failed: " + callSite.position().getMethod().toString();      Instruction counterInst=AOSDatabase.debuggingCounterData.getCounterInstructionForEvent(eventName);      testFailed.appendInstruction(counterInst);    }    if (inlDec.OSRTestFailed()) {      Instruction lastOsrBarrier=parent.getOSRBarrierFromInst(callSite);      Instruction s=BC2IR._osrHelper(lastOsrBarrier,parent);      s.copySourcePositionFrom(callSite);      testFailed.appendInstruction(s);      testFailed.insertOut(parent.getExit());    } else {      Instruction call=callSite.copyWithoutLinks();      Call.getMethod(call).setIsGuardedInlineOffBranch(true);      call.copySourcePositionFrom(callSite);      testFailed.appendInstruction(call);      testFailed.insertOut(container.getEpilogue());      if (ebag != null) {        for (Enumeration<BasicBlock> e=ebag.enumerator(); e.hasMoreElements(); ) {          BasicBlock handler=e.nextElement();          testFailed.insertOut(handler);        }      }      testFailed.setCanThrowExceptions();      testFailed.setMayThrowUncaughtException();    }    container.getCfg().linkInCodeOrder(testFailed,container.getEpilogue());    testFailed.setInfrequent();    BasicBlock firstIfBlock=testFailed;    Operand receiver=Call.getParam(callSite,0);    MethodOperand mo=Call.getMethod(callSite);    boolean isInterface=mo.isInterface();    if (isInterface) {      if (VM.BuildForIMTInterfaceInvocation) {        RVMType interfaceType=mo.getTarget().getDeclaringClass();        TypeReference recTypeRef=receiver.getType();        RVMClass recType=(RVMClass)recTypeRef.peekType();        boolean requiresImplementsTest=true;        if (recType != null && recType.isResolved() && !recType.isInterface()) {          byte doesImplement=ClassLoaderProxy.includesType(interfaceType.getTypeRef(),recTypeRef);          requiresImplementsTest=doesImplement != YES;        }        if (requiresImplementsTest) {          RegisterOperand checkedReceiver=parent.getTemps().makeTemp(receiver);          Instruction dtc=TypeCheck.create(MUST_IMPLEMENT_INTERFACE,checkedReceiver,receiver.copy(),new TypeOperand(interfaceType),Call.getGuard(callSite).copy());          dtc.copyPosition(callSite);          checkedReceiver.refine(interfaceType.getTypeRef());          Call.setParam(callSite,0,checkedReceiver.copyRO());          testFailed.prependInstruction(dtc);        }      }    }    for (int i=children.length - 1; i >= 0; i--, testFailed=firstIfBlock) {      firstIfBlock=new BasicBlock(callSite.getBytecodeIndex(),callSite.position(),parent.getCfg());      firstIfBlock.setExceptionHandlers(ebag);      BasicBlock lastIfBlock=firstIfBlock;      RVMMethod target=children[i].getMethod();      Instruction tmp;      if (isInterface) {        RVMClass callDeclClass=mo.getTarget().getDeclaringClass();        if (!callDeclClass.isInterface()) {          throw new OptimizingCompilerException("Attempted guarded inline of invoke interface when decl class of target method may not be an interface");        }        byte doesImplement=ClassLoaderProxy.includesType(callDeclClass.getTypeRef(),target.getDeclaringClass().getTypeRef());        if (doesImplement != YES) {          if (parent.getOptions().PRINT_INLINE_REPORT) {            VM.sysWrite("\t\tRequired additional instanceof " + callDeclClass + " test\n");          }          firstIfBlock=new BasicBlock(callSite.getBytecodeIndex(),callSite.position(),parent.getCfg());          firstIfBlock.setExceptionHandlers(ebag);          RegisterOperand instanceOfResult=parent.getTemps().makeTempInt();          tmp=InstanceOf.create(INSTANCEOF_NOTNULL,instanceOfResult,new TypeOperand(callDeclClass),receiver.copy(),Call.getGuard(callSite));          tmp.copyPosition(callSite);          firstIfBlock.appendInstruction(tmp);          tmp=IfCmp.create(INT_IFCMP,parent.getTemps().makeTempValidation(),instanceOfResult.copyD2U(),new IntConstantOperand(0),ConditionOperand.EQUAL(),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());          tmp.copyPosition(callSite);          firstIfBlock.appendInstruction(tmp);          firstIfBlock.insertOut(testFailed);          firstIfBlock.insertOut(lastIfBlock);          container.getCfg().linkInCodeOrder(firstIfBlock,lastIfBlock);        }      }      if (guards[i] == OptOptions.INLINE_GUARD_CLASS_TEST) {        tmp=InlineGuard.create(IG_CLASS_TEST,receiver.copy(),Call.getGuard(callSite).copy(),new TypeOperand(target.getDeclaringClass()),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());      } else       if (guards[i] == OptOptions.INLINE_GUARD_METHOD_TEST) {        if (isInterface) {          RegisterOperand t=parent.getTemps().makeTempInt();          Instruction test=InstanceOf.create(INSTANCEOF_NOTNULL,t,new TypeOperand(target.getDeclaringClass().getTypeRef()),receiver.copy());          test.copyPosition(callSite);          lastIfBlock.appendInstruction(test);          Instruction cmp=IfCmp.create(INT_IFCMP,parent.getTemps().makeTempValidation(),t.copyD2U(),new IntConstantOperand(0),ConditionOperand.EQUAL(),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());          cmp.copyPosition(callSite);          lastIfBlock.appendInstruction(cmp);          BasicBlock subclassTest=new BasicBlock(callSite.getBytecodeIndex(),callSite.position(),parent.getCfg());          lastIfBlock.insertOut(testFailed);          lastIfBlock.insertOut(subclassTest);          container.getCfg().linkInCodeOrder(lastIfBlock,subclassTest);          lastIfBlock=subclassTest;        }        tmp=InlineGuard.create(IG_METHOD_TEST,receiver.copy(),Call.getGuard(callSite).copy(),MethodOperand.VIRTUAL(target.getMemberRef().asMethodReference(),target),testFailed.makeJumpTarget(),BranchProfileOperand.unlikely());      } else {        tmp=InlineGuard.create(IG_PATCH_POINT,receiver.copy(),Call.getGuard(callSite).copy(),MethodOperand.VIRTUAL(target.getMemberRef().asMethodReference(),target),testFailed.makeJumpTarget(),inlDec.OSRTestFailed() ? BranchProfileOperand.never() : BranchProfileOperand.unlikely());      }      tmp.copyPosition(callSite);      lastIfBlock.appendInstruction(tmp);      lastIfBlock.insertOut(testFailed);      lastIfBlock.insertOut(children[i].getPrologue());      container.getCfg().linkInCodeOrder(lastIfBlock,children[i].getCfg().firstInCodeOrder());      if (children[i].getEpilogue() != null) {        children[i].getEpilogue().appendInstruction(container.getEpilogue().makeGOTO());        children[i].getEpilogue().insertOut(container.getEpilogue());      }      container.getCfg().linkInCodeOrder(children[i].getCfg().lastInCodeOrder(),testFailed);    }    container.getPrologue().insertOut(testFailed);    container.getCfg().linkInCodeOrder(container.getPrologue(),testFailed);    return container;  } else {    if (VM.VerifyAssertions)     VM._assert(inlDec.getNumberOfTargets() == 1);    NormalMethod callee=(NormalMethod)inlDec.getTargets()[0];    if (parent.getOptions().PRINT_INLINE_REPORT) {      VM.sysWrite("\tInline " + callee + " into "+ callSite.position().getMethod()+ " at bytecode "+ callSite.getBytecodeIndex()+ "\n");    }    GenerationContext child=parent.createChildContext(ebag,callee,callSite);    BC2IR.generateHIR(child);    child.transferStateToParent();    return child;  }}  }
class C{  void hide(){  ensureOldPopupsHidden();  if (painter != null) {    painter.clear();  }  setHideComponent(null,null);  inner=null;  row=-1;}  }
class C{  public static UUID randomUUID(){  byte[] data=new byte[16];synchronized (UUID.class) {    if (rng == null) {      rng=new SecureRandom();    }  }  rng.nextBytes(data);  return makeUuid(data,4);}  }
class C{  public static Map<String,Object> callDataResourcePermissionCheckResult(Delegator delegator,LocalDispatcher dispatcher,Map<String,Object> context){  Map<String,Object> permResults=FastMap.newInstance();  String skipPermissionCheck=(String)context.get("skipPermissionCheck");  if (Debug.infoOn())   Debug.logInfo("in callDataResourcePermissionCheckResult, skipPermissionCheck:" + skipPermissionCheck,"");  if (UtilValidate.isEmpty(skipPermissionCheck) || (!"true".equalsIgnoreCase(skipPermissionCheck) && !"granted".equalsIgnoreCase(skipPermissionCheck))) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    Map<String,Object> serviceInMap=FastMap.newInstance();    serviceInMap.put("userLogin",userLogin);    serviceInMap.put("targetOperationList",context.get("targetOperationList"));    serviceInMap.put("contentPurposeList",context.get("contentPurposeList"));    serviceInMap.put("entityOperation",context.get("entityOperation"));    String ownerContentId=(String)context.get("ownerContentId");    if (UtilValidate.isNotEmpty(ownerContentId)) {      try {        GenericValue content=EntityQuery.use(delegator).from("Content").where("contentId",ownerContentId).queryOne();        if (content != null)         serviceInMap.put("currentContent",content);      } catch (      GenericEntityException e) {        Debug.logError(e,"e.getMessage()","ContentServices");      }    }    try {      permResults=dispatcher.runSync("checkContentPermission",serviceInMap);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem checking permissions","ContentServices");    }  } else {    permResults.put("permissionStatus","granted");  }  return permResults;}  }
class C{  public void addTerm(SplitCondition condition){  terms.add(condition);}  }
class C{  private void initializeProximityBrowserNative(){  final List<NaviNode> allNodes=GraphHelpers.getNodes(this);  if (!allNodes.isEmpty()) {    final NaviNode firstNode=getMappings().getNode(getRawView().getGraph().getNodes().get(0));    allNodes.remove(firstNode);    showNodes(Lists.newArrayList(firstNode),allNodes);  }}  }
class C{  private boolean isEndingContextualSearch(PanelState toState,boolean isStartingSearch){  return isOngoingContextualSearch() && (toState == PanelState.CLOSED || isStartingSearch);}  }
class C{  public DataReferenceElement(Element dataRef,int dataIdx){  this.m_DataRefIdx=dataIdx;  this.m_Reference=(Element)dataRef;  this.m_URI=m_Reference.getAttribute("URI");  if (null != m_URI) {    this.m_ReferredElement=(Element)getReferredElementFromURI(m_URI,m_Reference,m_DataRefIdx);    if (m_ReferredElement.getLocalName().equalsIgnoreCase("EncryptedData"))     m_RefEncData=new EncryptedDataElement(m_ReferredElement); else     throw new IllegalArgumentException("DataReference-object must reference an encrypteddata element!");  } else   throw new IllegalArgumentException("CipherReferenceElement: XPath reference? not supported yet");}  }
class C{  @Override public void execute(){  RPEventImageViewer.viewImage(event);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  Lookup(Class<?> lookupClass){  this(lookupClass,ALL_MODES);  checkUnprivilegedlookupClass(lookupClass,ALL_MODES);}  }
class C{  private void geofenceRestaurants(Context context,ContentProviderClient cp) throws RemoteException {  GoogleApiClient client=Locations.client(context);  if (client == null) {    return;  }  PendingIntent intent=PendingIntent.getService(context,0,new Intent(context,RestaurantGeofencingEventService.class),0);  PendingResult<Status> result=GeofencingApi.removeGeofences(client,intent);  Status status=result.await();  if (!status.isSuccess()) {    String message=GeofenceStatusCodes.getStatusCodeString(status.getStatusCode());    Log.e(TAG,"remove geofences failed: " + message);    event("gms","remove geofences failed",message);  }  if (!Prefs.getStringSet(context,SHOW_NOTIFICATIONS).contains(context.getString(R.string.at_restaurant_notifications_value))) {    client.disconnect();    return;  }  GeofencingRequest.Builder request=new GeofencingRequest.Builder();  Uri uri=Uris.limit(Restaurants.CONTENT_URI,MAX_GEOFENCES);  String[] proj={_ID,Restaurants.LATITUDE,Restaurants.LONGITUDE};  String sel=Restaurants.LATITUDE + " IS NOT NULL AND " + Restaurants.LONGITUDE+ " IS NOT NULL AND "+ Restaurants.GEOFENCE_NOTIFICATIONS+ " = 1 AND "+ Restaurants.STATUS_ID+ " = ?";  String[] args={String.valueOf(ACTIVE.id)};  EasyCursor c=new EasyCursor(cp.query(uri,proj,sel,args,_ID + " DESC"));  while (c.moveToNext()) {    request.addGeofence(new Geofence.Builder().setRequestId(String.valueOf(c.getLong(_ID))).setCircularRegion(c.getDouble(Restaurants.LATITUDE),c.getDouble(Restaurants.LONGITUDE),GEOFENCE_RADIUS).setTransitionTypes(GEOFENCE_TRANSITION_ALL).setLoiteringDelay(15 * (int)MINUTE_IN_MILLIS).setNotificationResponsiveness(15 * (int)MINUTE_IN_MILLIS).setExpirationDuration(NEVER_EXPIRE).build());  }  if (c.getCount() > 0) {    result=GeofencingApi.addGeofences(client,request.build(),intent);    status=result.await();    if (!status.isSuccess()) {      String message=GeofenceStatusCodes.getStatusCodeString(status.getStatusCode());      Log.e(TAG,"add geofences failed: " + message);      event("gms","add geofences failed",message);    }  }  c.close();  client.disconnect();}  }
class C{  public void configure(){  setCommandStationType(getOptionState(option2Name));  setTurnoutHandling(getOptionState(option3Name));  LnOverTcpPacketizer packets=new LnOverTcpPacketizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setLnTrafficController(packets);  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  private Icon parseIconType(IconType iconType){  List<Icon> icons=Utils.getIcons();  for (  Icon icon : icons) {    if (icon.getIconType().equals(iconType)) {      return icon;    }  }  throw new IllegalArgumentException("Correct icon type not specified.");}  }
class C{  public Polynomial derivative(){  double[] tmp=new double[order];  for (int i=0; i < order; i++) {    tmp[i]=(i + 1) * a[i + 1];  }  return new Polynomial(tmp);}  }
class C{  public static BayesPmWrapper serializableInstance(){  return new BayesPmWrapper(Dag.serializableInstance(),new Parameters());}  }
class C{  public static PlatformUser findUser(DataService mgr,String userIdPrefix,Organization org){  String fullUserID=userIdPrefix + "_" + org.getOrganizationId();  return findUser(mgr,fullUserID);}  }
class C{  protected void clearModes(){  modes=null;}  }
class C{  private void saveUploadedFile(){  OCFile file=mCurrentUpload.getFile();  if (file.fileExists()) {    file=mStorageManager.getFileById(file.getFileId());  }  long syncDate=System.currentTimeMillis();  file.setLastSyncDateForData(syncDate);  ReadRemoteFileOperation operation=new ReadRemoteFileOperation(mCurrentUpload.getRemotePath());  RemoteOperationResult result=operation.execute(mUploadClient);  if (result.isSuccess()) {    updateOCFile(file,(RemoteFile)result.getData().get(0));    file.setLastSyncDateForProperties(syncDate);  }  if (mCurrentUpload.wasRenamed()) {    OCFile oldFile=mCurrentUpload.getOldFile();    if (oldFile.fileExists()) {      oldFile.setStoragePath(null);      mStorageManager.saveFile(oldFile);    }  }  file.setNeedsUpdateThumbnail(true);  mStorageManager.saveFile(file);  mStorageManager.triggerMediaScan(file.getStoragePath());}  }
class C{  public void tagAvatar(AvatarConfig config){  config.addCredentials(this);  POST(this.url + "/tag-avatar",config.toXML());}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public int lastIndexIn(CharSequence csq,int fromIndex){  for (int i=fromIndex; i >= 0; --i) {    if (contains(csq.charAt(i)))     return i;  }  return -1;}  }
class C{  private void pauseForClientToJoin(){  Wait.pause(2000);}  }
class C{  public final IBinding resolveBinding(){  return this.ast.getBindingResolver().resolveReference(this);}  }
class C{  public CAddConditionAction(final CCriteriumTree tree,final CCriteriumTreeNode parent,final ICriteriumCreator condition){  super(condition.getCriteriumDescription());  m_tree=tree;  m_parent=parent;  m_condition=condition;}  }
class C{  public static double binomial(double n,long k){  if (k < 0)   return 0;  if (k == 0)   return 1;  if (k == 1)   return n;  double a=n - k + 1;  double b=1;  double binomial=1;  for (long i=k; i-- > 0; ) {    binomial*=(a++) / (b++);  }  return binomial;}  }
class C{  public void sort(){  Arrays.sort(_data,0,_pos);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Composer arc(long animDuration,float x,float y,float angle,Ease ease){  AnimParameter beforeParam=mTweenParameterList.size() > 0 ? mTweenParameterList.get(mTweenParameterList.size() - 1) : mInitialParam;  if (angle < 1f && angle > -1f) {    return to(animDuration,x,y,beforeParam.alpha,beforeParam.scaleX,beforeParam.scaleY,beforeParam.rotation,ease);  }  return arc(animDuration,x,y,angle,beforeParam.alpha,beforeParam.scaleX,beforeParam.scaleY,beforeParam.rotation,ease);}  }
class C{  private static List<Bird> createRandomRecords(long n){  String[] species={"pigeons","owls","gulls","hawks","robins","jays"};  Random random=new Random(0);  List<Bird> records=new ArrayList<>();  for (long i=0; i < n; i++) {    Bird bird=new Bird();    bird.quality=random.nextDouble();    bird.species=species[random.nextInt(species.length)];    bird.number=i;    bird.quantity=random.nextLong();    records.add(bird);  }  return records;}  }
class C{  static public String unquoteString(String value) throws IllegalArgumentException {  String originalValue=value;  if (!value.startsWith("\"")) {    return value;  }  if (!value.endsWith("\"")) {    throw new IllegalArgumentException("Quoted string does not end with '\"'" + " : " + originalValue);  }  value=value.substring(1,value.length() - 1);  StringBuffer sb=new StringBuffer();  int len=value.length();  for (int i=0; i < len; i++) {    char ch=value.charAt(i);    if (ch == '\\') {      i++;      if (i < len) {        ch=value.charAt(i);        sb.append(ch);      } else {        throw new IllegalArgumentException("Escape character at end of string" + " : " + originalValue);      }    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  private int[] addCurveSubdivideAware(double[] curve){  int[] delta=curveDeltas(curve);  if (exceedsEdgeRecordLimit(delta)) {    double[] left=new double[6];    double[] right=new double[6];    divideQuad(curve,0,left,0,right,0);    int[] deltaLeft=curveDeltas(left);    int[] deltaRight=curveDeltas(right);    if (exceedsEdgeRecordLimit(deltaLeft)) {      addCurveSubdivideAware(left);    } else {      curveRecord(deltaLeft);    }    if (exceedsEdgeRecordLimit(deltaRight)) {      addCurveSubdivideAware(right);    } else {      curveRecord(deltaRight);    }  } else {    curveRecord(delta);  }  return delta;}  }
class C{  public ModelAndView(String view){  super();  this.model=CollectionKit.newHashMap();  this.view=view;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @DSComment("IO movement methodName") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.IPC}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.405 -0500",hash_original_method="87BB77B45562A993DA127AF8A28A35EF",hash_generated_method="14BEC707A4A52F5122FCA56614674178") public void send(Message message) throws RemoteException {  mTarget.send(message);  if (mIBinder instanceof DroidSafeBinder)   ((DroidSafeBinder)mIBinder).getMessenger().mHandler.handleMessage(message);}  }
class C{  static public void assertEquals(String message,short expected,short actual){  assertEquals(message,new Short(expected),new Short(actual));}  }
class C{  public synchronized void addTemplate(CodeTemplate template){  if (template == null) {    throw new IllegalArgumentException("template cannot be null");  }  templates.add(template);  sortTemplates();}  }
class C{  public InlineQueryResultCachedVideoBuilder title(String title){  this.title=title;  return this;}  }
class C{  public InvokeSynchronizerException(Throwable cause){  super(cause);}  }
class C{  public static Boolean valueOf(String string){  return parseBoolean(string) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static XppDom buildDom(InputStream in,String encoding) throws XmlPullParserException, IOException {  XmlPullParser parser=createDefaultParser();  parser.setInput(in,encoding);  return XppDom.build(parser);}  }
class C{  public Process(final String xml,final Process process) throws IOException, XMLException {  this(xml);  this.processLocation=process.processLocation;}  }
class C{  public void abortUpload() throws RemoteException {  try {    if (mLogger.isActivated()) {      mLogger.info("Cancel session");    }    final FileUploadSession session=mImService.getFileUploadSession(mUploadId);    if (session == null) {      throw new ServerApiGenericException(new StringBuilder("Cannot cancel session with ID= ").append(mUploadId).toString());    }    session.interrupt();  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      mLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    mLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  @Override public boolean isSearchable(int column) throws SQLException {  try {    debugCodeCall("isSearchable",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  boolean isValueEmpty(String attribute){  return TextUtils.isEmpty(getValue(attribute));}  }
class C{  public CodeViewer(){  setHighlightColor(DEFAULT_HIGHLIGHT_COLOR);  initActions();  setLayout(new BorderLayout());  codeHighlightBar=createCodeHighlightBar();  codeHighlightBar.setVisible(false);  add(codeHighlightBar,BorderLayout.NORTH);  codePanel=createCodePanel();  add(codePanel,BorderLayout.CENTER);  applyDefaults();}  }
class C{  public void addCoinsReceivedEventListener(WalletCoinsReceivedEventListener listener){  addCoinsReceivedEventListener(Threading.USER_THREAD,listener);}  }
class C{  public void close(){  this.setVisible(true);  this.dispose();}  }
class C{  public Rational(Polynomial N,Polynomial D){  this.N=new Polynomial(N);  this.D=new Polynomial(D);}  }
class C{  protected boolean isLockedBy(InternalDistributedMember owner,int lockId){  return isLeaseHeldBy(owner,lockId);}  }
class C{  synchronized boolean containsWeapon(Mounted weapon){  for (  WeaponFireInfo weaponFireInfo : this) {    if (weaponFireInfo.getWeapon() == weapon) {      return true;    }  }  return false;}  }
class C{  protected Collection cloneValue(Object value){  if (value instanceof Cloneable) {    Method clone=ReflectionUtils.lookupMethod(value.getClass(),"clone");    if (clone != null) {      try {        Collection c=(Collection)clone.invoke(value);        c.clear();        return c;      } catch (      IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {        if (logger.isLoggable(Level.SEVERE)) {          logger.log(Level.SEVERE,"Unable to clone collection type: {0}",value.getClass().getName());          logger.log(Level.SEVERE,e.toString(),e);        }      }    } else {      if (logger.isLoggable(Level.FINE)) {        logger.log(Level.FINE,"Type {0} implements Cloneable, but has no public clone method.",value.getClass().getName());      }    }  }  return null;}  }
class C{  public void close(){  if (mLeakedException != null) {    getConnectionManager().shutdown();    mLeakedException=null;  }}  }
class C{  public RVMMethod peekResolvedMethod(){  if (resolvedMember != null)   return resolvedMember;  RVMType declaringClass=type.peekType();  if (declaringClass == null)   return null;  return resolveInternal((RVMClass)declaringClass);}  }
class C{  private OFMessageUtils(){}  }
class C{  void testForum(){  final IForumPoster poster=(IForumPoster)getBean();  final ProgressWindow progressWindow=new ProgressWindow(MainFrame.getInstance(),poster.getTestMessage());  progressWindow.setVisible(true);  final Runnable runnable=null;  final Thread t=new Thread(runnable);  t.start();}  }
class C{  public static String unescapeJsString(CharSequence s){  Matcher m=UNESCAPE_PATTERN.matcher(s);  if (!m.find()) {    return s.toString();  }  StringBuffer sb=new StringBuffer(s.length());  do {    m.appendReplacement(sb,"");    String g;    char repl;    if (null != (g=m.group(1))) {      repl=(char)Integer.parseInt(g,16);    } else     if (null != (g=m.group(2))) {      repl=(char)Integer.parseInt(g,8);    } else     if (null != (g=m.group(3))) {      repl=(char)Integer.parseInt(g,16);    } else {      char ch=s.charAt(m.start(4));switch (ch) {case 'b':        repl='\b';      break;case 'r':    repl='\r';  break;case 'n':repl='\n';break;case 'f':repl='\f';break;case 't':repl='\t';break;case 'v':repl='\u000b';break;case '\n':continue;default :repl=ch;break;}}sb.append(repl);} while (m.find());m.appendTail(sb);return sb.toString();}  }
class C{  public Rosenbrock(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public void forget(Xid xid) throws XAException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.542 -0500",hash_original_method="1CCE7318461ADE9CB53CE2EA893C8873",hash_generated_method="90A482B97B590AF1BE73CDF7AA7E340D") public static boolean isOutgoingFolder(int messageType){  return (messageType == MESSAGE_TYPE_FAILED) || (messageType == MESSAGE_TYPE_OUTBOX) || (messageType == MESSAGE_TYPE_SENT)|| (messageType == MESSAGE_TYPE_QUEUED);}  }
class C{  public double norm2(){  return s[0];}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (op.equals(MSG.actionAddCourseToCrossList())) {    if (this.addCourseOfferingId == null || this.addCourseOfferingId.intValue() <= 0) {      errors.add("addCourseOfferingId",new ActionMessage("errors.generic",MSG.errorRequiredCourseOffering()));    }  }  if (op.equals(MSG.actionUpdateCrossLists())) {    if (this.ctrlCrsOfferingId == null || this.ctrlCrsOfferingId.intValue() <= 0) {      errors.add("ctrlCrsOfferingId",new ActionMessage("errors.generic",MSG.errorRequiredControllingCourse()));    }  }  return errors;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  public Vault(final VaultConfig vaultConfig){  this.vaultConfig=vaultConfig;}  }
class C{  private CTraceFunctions(){}  }
class C{  public boolean on(ASN1ObjectIdentifier stem){  String id=getId(), stemId=stem.getId();  return id.length() > stemId.length() && id.charAt(stemId.length()) == '.' && id.startsWith(stemId);}  }
class C{  private Map<String,VPlexDeviceInfo> mapDevices(VPlexDeviceInfo parentDevice){  _logger.info("\tmapping device " + parentDevice.getName());  Map<String,VPlexDeviceInfo> mirrorDevices=new TreeMap<String,VPlexDeviceInfo>();  for (  VPlexDeviceInfo dev : parentDevice.getChildDeviceInfo()) {    mirrorDevices.put(dev.getSlotNumber(),dev);  }  return mirrorDevices;}  }
class C{  private boolean testJDBC(String host,int port,String sid,String uid,String pwd){  boolean ok=false;  String urlC="jdbc:oracle:thin:@//" + host + ":"+ port+ "/"+ sid;  try {    inform("  Trying Client connection URL=" + urlC + ", User="+ uid);    Connection con=DriverManager.getConnection(urlC,uid,pwd);    inform("  - connected");    DatabaseMetaData conMD=con.getMetaData();    inform("  - Driver Name:\t" + conMD.getDriverName());    inform("  - Driver Version:\t" + conMD.getDriverVersion());    inform("  - DB Name:\t" + conMD.getDatabaseProductName());    inform("  - DB Version:\t" + conMD.getDatabaseProductVersion());    con.close();    inform("  *** success ***");    ok=true;  } catch (  SQLException e) {    inform("  ERROR: " + e.getMessage());  }  String urlS="jdbc:oracle:oci8:@";  try {    inform("  Trying Server connection URL=" + urlS + ", User="+ uid);    Connection con=DriverManager.getConnection(urlS,uid,pwd);    inform("  - connected");    DatabaseMetaData conMD=con.getMetaData();    inform("  - Driver Name:\t" + conMD.getDriverName());    inform("  - Driver Version:\t" + conMD.getDriverVersion());    inform("  - DB Name:\t" + conMD.getDatabaseProductName());    inform("  - DB Version:\t" + conMD.getDatabaseProductVersion());    con.close();    inform("  *** success ***");  } catch (  SQLException e) {    inform("  ERROR: " + e.getMessage());  }  return ok;}  }
class C{  public boolean isTime(I_C_UOM uom){  String x12de355=uom.getX12DE355();  return MUOM.X12_SECOND.equals(x12de355) || MUOM.X12_MINUTE.equals(x12de355) || MUOM.X12_HOUR.equals(x12de355)|| MUOM.X12_DAY.equals(x12de355)|| MUOM.X12_DAY_WORK.equals(x12de355)|| MUOM.X12_WEEK.equals(x12de355)|| MUOM.X12_MONTH.equals(x12de355)|| MUOM.X12_MONTH_WORK.equals(x12de355)|| MUOM.X12_YEAR.equals(x12de355);}  }
class C{  public void writeHeaders(OutputStream os,MimeBodyPart msg) throws IOException {  for (  MimeHeader header : msg.getHeaders()) {    WspHeaderEncoder.writeHeader(wspEncodingVersion_,os,header);  }}  }
class C{  public TradestrategyLite findTradestrategyLiteById(final Integer id) throws PersistentModelException {  TradestrategyLite instance=m_tradestrategyHome.findTradestrategyLiteById(id);  if (null == instance)   throw new PersistentModelException("TradestrategyLite not found for id: " + id);  return instance;}  }
class C{  public void removeTrainingInstanceFromMouseLocation(int mouseX,int mouseY){  double x=convertFromPanelX(mouseX);  double y=convertFromPanelY(mouseY);  int bestIndex=-1;  double bestDistanceBetween=Integer.MAX_VALUE;  for (int i=0; i < m_trainingData.numInstances(); i++) {    Instance current=m_trainingData.instance(i);    double distanceBetween=(current.value(m_xAttribute) - x) * (current.value(m_xAttribute) - x) + (current.value(m_yAttribute) - y) * (current.value(m_yAttribute) - y);    if (distanceBetween < bestDistanceBetween) {      bestIndex=i;      bestDistanceBetween=distanceBetween;    }  }  if (bestIndex == -1) {    return;  }  Instance best=m_trainingData.instance(bestIndex);  double panelDistance=(convertToPanelX(best.value(m_xAttribute)) - mouseX) * (convertToPanelX(best.value(m_xAttribute)) - mouseX) + (convertToPanelY(best.value(m_yAttribute)) - mouseY) * (convertToPanelY(best.value(m_yAttribute)) - mouseY);  if (panelDistance < REMOVE_POINT_RADIUS * REMOVE_POINT_RADIUS) {    m_trainingData.delete(bestIndex);  }}  }
class C{  private int call(String url,Message request,ParameterList response) throws MessageException {  int responseCode=-1;  try {    if (DEBUG)     _log.debug("Performing HTTP POST on " + url);    HttpResponse resp=_httpFetcher.post(url,request.getParameterMap());    responseCode=resp.getStatusCode();    String postResponse=resp.getBody();    response.copyOf(ParameterList.createFromKeyValueForm(postResponse));    if (DEBUG)     _log.debug("Retrived response:\n" + postResponse);  } catch (  IOException e) {    _log.error("Error talking to " + url + " response code: "+ responseCode,e);  }  return responseCode;}  }
class C{  public static void main(String[] args){  TimeSeriesChartDemo1 demo=new TimeSeriesChartDemo1("Time Series Chart Demo 1");  demo.pack();  RefineryUtilities.centerFrameOnScreen(demo);  demo.setVisible(true);}  }
class C{  public SVGEllipseFigure(){  this(0,0,0,0);}  }
class C{  private MediaManager(Context mContext){  this.mContext=mContext;  mMediaListenerQueue=new ArrayList<>();}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.reflection_bt:    this.imageView.setImageResource(ReflectionUtils.getResourceId(this,"img_mm_1",ReflectionUtils.ResourcesType.drawable));  break;}}  }
class C{  public static int encodeLength(int len){  if (len <= 32) {    return 0;  }  int code=Integer.numberOfLeadingZeros(len);  int remaining=len << (code + 1);  code+=code;  if ((remaining & (1 << 31)) != 0) {    code--;  }  if ((remaining << 1) != 0) {    code--;  }  code=Math.min(31,52 - code);  return code;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream tagged=new DerOutputStream();  DerOutputStream tmp=new DerOutputStream();  if (assigner != null) {    DerOutputStream tmp2=new DerOutputStream();    tmp2.putPrintableString(assigner);    tagged.write(DerValue.createTag(DerValue.TAG_CONTEXT,false,TAG_ASSIGNER),tmp2);  }  if (party == null)   throw new IOException("Cannot have null partyName");  tmp.putPrintableString(party);  tagged.write(DerValue.createTag(DerValue.TAG_CONTEXT,false,TAG_PARTYNAME),tmp);  out.write(DerValue.tag_Sequence,tagged);}  }
class C{  @ReactMethod public void logOut(){  LoginManager.getInstance().logOut();}  }
class C{  public void println(){  newline();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.708 -0500",hash_original_method="9C3B106C5F2D1AB923C52530BB6B2461",hash_generated_method="01C2FD017899B9334C1015E99D77DF22") public void handleSslErrorResponse(boolean proceed){  HttpsConnection connection=(HttpsConnection)(mConnection);  if (connection != null) {    connection.restartConnection(proceed);  }}  }
class C{  public static void downto(long self,Number to,@ClosureParams(FirstParam.class) Closure closure){  long to1=to.longValue();  if (self >= to1) {    for (long i=self; i >= to1; i--) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void shedConnectionCaches(){  for (  TCPTransport transport : allKnownTransports()) {    transport.shedConnectionCaches();  }}  }
class C{  public static Comment toComment(Document doc,Object o) throws PageException {  if (o instanceof Comment)   return (Comment)o; else   if (o instanceof CharacterData)   return doc.createComment(((CharacterData)o).getData());  return doc.createComment(Caster.toString(o));}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  protected Light createNewSpecificLight(String systemName,String userName){  return new SpecificLight(systemName,tc,userName);}  }
class C{  private void doScrollX(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(delta,0);    } else {      scrollBy(delta,0);    }  }}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  int s=getImportCount();  for (int j=0; j < s; j++) {    getImport(j).callVisitors(visitor);  }  s=getIncludeCount();  for (int j=0; j < s; j++) {    getInclude(j).callVisitors(visitor);  }  s=getOutputCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getOutput(j));  }  s=getAttributeSetCount();  for (int j=0; j < s; j++) {    ElemAttributeSet attrSet=getAttributeSet(j);    if (visitor.visitTopLevelInstruction(attrSet)) {      attrSet.callChildVisitors(visitor);    }  }  s=getDecimalFormatCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getDecimalFormat(j));  }  s=getKeyCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getKey(j));  }  s=getNamespaceAliasCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getNamespaceAlias(j));  }  s=getTemplateCount();  for (int j=0; j < s; j++) {    try {      ElemTemplate template=getTemplate(j);      if (visitor.visitTopLevelInstruction(template)) {        template.callChildVisitors(visitor);      }    } catch (    TransformerException te) {      throw new org.apache.xml.utils.WrappedRuntimeException(te);    }  }  s=getVariableOrParamCount();  for (int j=0; j < s; j++) {    ElemVariable var=getVariableOrParam(j);    if (visitor.visitTopLevelVariableOrParamDecl(var)) {      var.callChildVisitors(visitor);    }  }  s=getStripSpaceCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getStripSpace(j));  }  s=getPreserveSpaceCount();  for (int j=0; j < s; j++) {    visitor.visitTopLevelInstruction(getPreserveSpace(j));  }  if (null != m_NonXslTopLevel) {    java.util.Enumeration elements=m_NonXslTopLevel.elements();    while (elements.hasMoreElements()) {      ElemTemplateElement elem=(ElemTemplateElement)elements.nextElement();      if (visitor.visitTopLevelInstruction(elem)) {        elem.callChildVisitors(visitor);      }    }  }}  }
class C{  public static MPOSTerminal createUpdatePOSTerminal(Properties ctx,TerminalBean bean,String trxName) throws OperationException {  MPOSTerminal terminal=getPO(ctx,bean,trxName);  if (bean.getIsActive() && !isCashBookAssignedValid(ctx,bean.getTerminalId(),bean.getCashBookId(),trxName)) {    throw new InvalidTerminalCashBookException("The cash book assigned is already present on another terminal");  } else   if (!bean.getIsActive() && !canInactivateTerminal(ctx,terminal.getAD_Org_ID(),terminal.get_ID(),trxName)) {    throw new TerminalInactivateException("This terminal cannot be inactivated as no other active terminal available");  }  PoManager.save(terminal);  bean.setTerminalId(terminal.get_ID());  return terminal;}  }
class C{  private Map<String,String> addAliasesStrategy(MDSDialog dialog,List<ZoneWwnAlias> addingAliases) throws NetworkDeviceControllerException {  Long time=System.currentTimeMillis();  Map<String,String> addedAliasesName=new HashMap<String,String>();  try {    dialog.config();    dialog.deviceAliasConfig();    Map<String,String> aliasMap=dialog.showDeviceAliasDatabase();    for (    ZoneWwnAlias wwnAlias : addingAliases) {      String name=wwnAlias.getName();      String wwn=wwnAlias.getAddress();      _log.info("Starting create alias with name " + name);      String currentWwn=aliasMap.get(name);      try {        if (StringUtils.isEmpty(wwn) || StringUtils.isEmpty(name) || StringUtils.equalsIgnoreCase(wwn,currentWwn)) {          if (!StringUtils.isEmpty(currentWwn)) {            _log.info("The existing alias {} is found with the same WWN {}. Nothing to do.",name,currentWwn);          }          addedAliasesName.put(name,NO_CHANGE);          continue;        } else         if (aliasMap.containsKey(name)) {          throw NetworkDeviceControllerException.exceptions.aliasWithSameNameExists(name,currentWwn,wwn);        } else         if (aliasMap.containsValue(wwn)) {          throw NetworkDeviceControllerException.exceptions.wwnAssignedToAnotherAlias(wwn,name,getAliasForWwn(aliasMap,wwn));        }        dialog.deviceAliasName(name,wwn,false);        addedAliasesName.put(name,SUCCESS);        aliasMap.put(name,wwn);      } catch (      Exception ex) {        addedAliasesName.put(name,ERROR + ": " + ex.getMessage());        _log.warn("Exception was encountered but will try the rest of the batch. " + "Error message: " + ex.getMessage());      }    }    if (!addedAliasesName.isEmpty()) {      dialog.deviceAliasCommit();      dialog.copyRunningConfigToStartupFabric();    } else {      dialog.exitToConfig();    }    time=System.currentTimeMillis() - time;    _log.info("Aliases add time (msec): " + time.toString());    return addedAliasesName;  } catch (  Exception ex) {    dialog.deviceAliasAbort();    throw NetworkDeviceControllerException.exceptions.addAliasesStrategyFailed(ex);  } finally {    dialog.endConfig();  }}  }
class C{  public static Validator<String> disallowedChars(char[] chars,BiFunction<String,StringDisallowedCharsValidator,? extends IllegalArgumentException> exception){  return new ValidatorEntry<>(StringDisallowedCharsValidator.create(chars),exception);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public Queue<Env<AttrContext>> flow(Env<AttrContext> env){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  flow(env,results);  return stopIfError(CompileState.FLOW,results);}  }
class C{  public static float lengthSquared(Vector2 a){  return Vector2.dot(a,a);}  }
class C{  public boolean isCheated(){  return this.cheated;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter the number of values: ");  int[] values=new int[input.nextInt()];  System.out.print("Enter the values: ");  for (int i=0; i < values.length; i++)   values[i]=input.nextInt();  System.out.println("The list has" + (isConsecutiveFour(values) ? " " : " no ") + "consecutive fours");}  }
class C{  private void addBitmap(OtaBitmap otaBitmap){  addMultipart(NokiaItemType.OTA_BITMAP,otaBitmap.getBytes());}  }
class C{  private void openAnimate(View view,int position){  if (!opened.get(position)) {    generateRevealAnimate(view,true,false,position);  }}  }
class C{  public Sequence(){  this(Object.class);}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public byte[] toByteArray(){  byte[] raw=output.toByteArray();  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream(raw.length + 1)){    if (raw.length > 1024) {      outputStream.write(ContainerFormat.DEFLATE);      try (OutputStream deflateStream=new DeflaterOutputStream(outputStream)){        deflateStream.write(raw);      }     } else {      outputStream.write(ContainerFormat.RAW);      outputStream.write(raw);    }    return outputStream.toByteArray();  } catch (  IOException err) {    throw Throwables.propagate(err);  }}  }
class C{  private void printTopRules(short tag,int topN,boolean columnOutput,int padding){  String[][] outputMatrix=new String[topN + 1][grammar.numSubStates[tag]];  for (int i=0; i < outputMatrix.length; i++) {    for (int j=0; j < outputMatrix[i].length; j++) {      outputMatrix[i][j]="";    }  }  for (int subState=0; subState < grammar.numSubStates[tag]; subState++) {    outputMatrix[0][subState]=(String)tagNumberer.object(tag) + "-" + subState;    PriorityQueue<RuleStruct> topRules=new PriorityQueue<RuleStruct>();    for (    BinaryRule r : grammar.splitRulesWithP(tag)) {      for (int lSubState=0; lSubState < grammar.numSubStates[r.getLeftChildState()]; lSubState++) {        for (int rSubState=0; rSubState < grammar.numSubStates[r.getRightChildState()]; rSubState++) {          double score=r.getScore(subState,lSubState,rSubState);          topRules.add(new RuleStruct(r,score,subState,lSubState,rSubState),-score);          if (topRules.size() > topN)           topRules.next();        }      }    }    for (    UnaryRule r : grammar.getUnaryRulesByParent(tag)) {      for (int cSubState=0; cSubState < grammar.numSubStates[r.getChildState()]; cSubState++) {        double score=r.getScore(subState,cSubState);        topRules.add(new RuleStruct(r,score,subState,cSubState),-score);        if (topRules.size() > topN)         topRules.next();      }    }    ArrayList<RuleStruct> r=new ArrayList<RuleStruct>();    while (topRules.hasNext()) {      RuleStruct s=topRules.next();      r.add(0,s);    }    for (int i=0; i < r.size(); i++) {      outputMatrix[i + 1][subState]=ruleToString(r.get(i));    }  }  String tagName=(String)tagNumberer.object(tag);  printRules("Trunk","topShortRules",columnOutput,outputMatrix);}  }
class C{  static Object castWrapper(Class toType,Object value){  if (!toType.isPrimitive())   throw new InterpreterError("invalid type in castWrapper: " + toType);  if (value == null)   throw new InterpreterError("null value in castWrapper, guard");  if (value instanceof Boolean) {    if (toType != Boolean.TYPE)     throw new InterpreterError("bad wrapper cast of boolean"); else     return value;  }  if (value instanceof Character)   value=new Integer(((Character)value).charValue());  if (!(value instanceof Number))   throw new InterpreterError("bad type in cast");  Number number=(Number)value;  if (toType == Byte.TYPE)   return new Byte(number.byteValue());  if (toType == Short.TYPE)   return new Short(number.shortValue());  if (toType == Character.TYPE)   return new Character((char)number.intValue());  if (toType == Integer.TYPE)   return new Integer(number.intValue());  if (toType == Long.TYPE)   return new Long(number.longValue());  if (toType == Float.TYPE)   return new Float(number.floatValue());  if (toType == Double.TYPE)   return new Double(number.doubleValue());  throw new InterpreterError("error in wrapper cast");}  }
class C{  @Override public MBHeader findLastMBPageNoForLineItem(final WorkOrderActivity workOrderActivity,final Long mbHeaderId){  logger.info("-------------------------Inside findLastMBPageNoForLineItem--------------");  String query="select distinct mbh from MBHeader mbh join mbh.mbDetails as mbDetail ";  Object[] params;  final List<Object> paramList=new ArrayList<Object>();  query=query + " where mbDetail.workOrderActivity.id = ? " + " and mbh.id != ? and mbh.egwStatus.code=? "+ " and mbh.modifiedDate < (select modifiedDate from MBHeader where id = ? )"+ " order by mbh.modifiedDate desc";  paramList.add(workOrderActivity.getId());  paramList.add(mbHeaderId);  paramList.add(WorksConstants.APPROVED);  paramList.add(mbHeaderId);  params=new Object[paramList.size()];  params=paramList.toArray(params);  final List<MBHeader> mbHeaderList=genericService.findAllBy(query,params);  MBHeader result=null;  if (mbHeaderList != null && !mbHeaderList.isEmpty())   result=mbHeaderList.get(0);  return result;}  }
class C{  public void updateCircle(float latPoint,float lonPoint,float radius,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkCircle.write(latPoint,lonPoint,radius,-1,-1,properties,link.dos);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/scan") public TaskList scanStorageProviders(){  TaskList taskList=new TaskList();  List<URI> providerURIList=_dbClient.queryByType(StorageProvider.class,true);  BlockController controller=getController(BlockController.class,"vnxblock");  DiscoveredObjectTaskScheduler scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new ScanJobExec(controller));  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>();  if (providerURIList != null) {    for (    URI providerURI : providerURIList) {      String taskId=UUID.randomUUID().toString();      tasks.add(new AsyncTask(StorageProvider.class,providerURI,taskId));    }    taskList=scheduler.scheduleAsyncTasks(tasks);  }  return taskList;}  }
class C{  private void assertion(boolean condition,String msg) throws RuntimeException {  if (!condition)   throw new RuntimeException(msg);}  }
class C{  public void removeAllBodiesAndJoints(boolean notify){  List<DestructionListener> listeners=null;  if (notify) {    listeners=this.getListeners(DestructionListener.class);  }  int bsize=this.bodies.size();  for (int i=0; i < bsize; i++) {    Body body=this.bodies.get(i);    body.joints.clear();    if (notify) {      Iterator<ContactEdge> aIterator=body.contacts.iterator();      while (aIterator.hasNext()) {        ContactEdge contactEdge=aIterator.next();        Body other=contactEdge.other;        ContactConstraint contactConstraint=contactEdge.interaction;        Iterator<ContactEdge> bIterator=other.contacts.iterator();        while (bIterator.hasNext()) {          ContactEdge otherContactEdge=bIterator.next();          ContactConstraint otherContactConstraint=otherContactEdge.interaction;          if (otherContactConstraint == contactConstraint) {            bIterator.remove();            break;          }        }        List<Contact> contacts=contactConstraint.getContacts();        int csize=contacts.size();        for (int j=0; j < csize; j++) {          Contact contact=contacts.get(j);          ContactPoint contactPoint=new ContactPoint(new ContactPointId(contactConstraint.getId(),contact.getId()),contactConstraint.getBody1(),contactConstraint.getFixture1(),contactConstraint.getBody2(),contactConstraint.getFixture2(),contact.getPoint(),contactConstraint.getNormal(),contact.getDepth());          for (          DestructionListener dl : listeners) {            dl.destroyed(contactPoint);          }        }      }      for (      DestructionListener dl : listeners) {        dl.destroyed(body);      }    }    body.contacts.clear();    body.world=null;  }  if (notify) {    int jsize=this.joints.size();    for (int i=0; i < jsize; i++) {      Joint joint=this.joints.get(i);      for (      DestructionListener dl : listeners) {        dl.destroyed(joint);      }    }  }  this.broadphaseDetector.clear();  this.joints.clear();  this.bodies.clear();  this.contactManager.clear();}  }
class C{  public void testUpdate9() throws SQLException {  DatabaseCreator.fillTestTable5(conn);  PreparedStatement stat=conn.prepareStatement("UPDATE " + DatabaseCreator.TEST_TABLE5 + " SET testValue = ? WHERE testID = ?");  stat.setString(1,"1");  stat.setInt(2,1);  stat.execute();  stat.setString(1,"2");  stat.setInt(2,2);  stat.execute();  ResultSet r=statement.executeQuery("SELECT testId, testValue FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE testID < 3 ORDER BY testID");  while (r.next()) {    assertEquals("Incorrect value was returned",new Integer(r.getInt(1)).toString(),r.getString(2));  }  r.close();  stat.close();}  }
class C{  public void addModel(ModelRenderer model,boolean inherit,boolean isUpright){  addModel(model,0F,0F,0F,inherit,isUpright);}  }
class C{  public final void testValidateWhenValidationFails(){  ValidationListenerImplementation validationListener1=new ValidationListenerImplementation();  ValidationListenerImplementation validationListener2=new ValidationListenerImplementation();  CharSequence errorMessage="errorMessage";  Validator<CharSequence> validator=Validators.notEmpty(errorMessage);  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addValidationListener(validationListener1);  abstractValidateableView.addValidationListener(validationListener1);  abstractValidateableView.addValidationListener(validationListener2);  abstractValidateableView.removeValidationListener(validationListener2);  abstractValidateableView.addValidator(validator);  abstractValidateableView.getView().setText("");  assertFalse(abstractValidateableView.validate());  assertEquals(errorMessage,abstractValidateableView.getError());  assertTrue(validationListener1.hasOnValidationFailureBeenCalled());  assertFalse(validationListener2.hasOnValidationFailureBeenCalled());  assertTrue(abstractValidateableView.isActivated());  assertTrue(abstractValidateableView.getView().isActivated());}  }
class C{  public static void copyDateTo(Calendar from,Calendar to){  int year=getYear(from);  int month=getMonth(from);  int day=getDay(from);  to.clear();  to.set(year,month,day);}  }
class C{  protected Task<Void> writeState(){  if (stateExtension == null) {    throw new IllegalStateException("Storage extension not available");  }  return stateExtension.writeState(reference,state);}  }
class C{  public void checkForDeletedExchanges(){  for (  Object o : exchangeInfoMap.entrySet()) {    if (o == null) {      exchangeInfoMap.remove(o);    }  }}  }
class C{  public void send(SimpleMailMessage msg){  try {    mailSender.send(msg);  } catch (  MailException ex) {    log.error(ex.getMessage());  }}  }
