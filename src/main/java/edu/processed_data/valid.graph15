class C{  Mark skipUntilIgnoreEsc(String limit,boolean ignoreEL){  Mark ret=mark();  int limlen=limit.length();  int ch;  int prev='x';  char firstChar=limit.charAt(0);  skip:   for (ch=nextChar(ret); ch != -1; prev=ch, ch=nextChar(ret)) {    if (ch == '\\' && prev == '\\') {      ch=0;    } else     if (prev == '\\') {      continue;    } else     if (!ignoreEL && (ch == '$' || ch == '#') && peekChar() == '{') {      nextChar();      skipELExpression();    } else     if (ch == firstChar) {      for (int i=1; i < limlen; i++) {        if (peekChar() == limit.charAt(i))         nextChar(); else         continue skip;      }      return ret;    }  }  return null;}  }
class C{  public final void print(String value){  try {    Element rootElement=workDoc.getDefaultRootElement();    int deleteLines=rootElement.getElementCount() - linesMax;    for (int index=0; index < deleteLines; index++) {      Element elem=rootElement.getElement(0);      workDoc.remove(elem.getStartOffset(),elem.getEndOffset());    }    workDoc.insertString(workDoc.getLength(),value,null);    textArea.setCaretPosition(workDoc.getLength());  } catch (  Exception exc) {    exc.printStackTrace();  }}  }
class C{  public void connect(DN baseDN,boolean sslEncryption) throws DirectoryException {  this.sslEncryption=sslEncryption;  setBaseDNAndDomain(baseDN,false);  localGenerationId=replicationServerDomain.getGenerationId();  oldGenerationId=localGenerationId;  try {    lockDomainNoTimeout();    ReplServerStartMsg outReplServerStartMsg=sendStartToRemote();    ReplicationMsg msg=session.receive();    if (!(msg instanceof ReplServerStartMsg)) {      if (msg instanceof StopMsg) {        abortStart(null);      } else {        LocalizableMessage message=ERR_REPLICATION_PROTOCOL_MESSAGE_TYPE.get(msg.getClass().getCanonicalName(),"ReplServerStartMsg");        abortStart(message);      }      return;    }    processStartFromRemote((ReplServerStartMsg)msg);    if (replicationServerDomain.isAlreadyConnectedToRS(this)) {      abortStart(null);      return;    }    if (localGenerationId < 0 && generationId > 0) {      oldGenerationId=replicationServerDomain.changeGenerationId(generationId);    }    logStartHandshakeSNDandRCV(outReplServerStartMsg,(ReplServerStartMsg)msg);    if (!this.sslEncryption) {      session.stopEncryption();    }    if (getProtocolVersion() > ProtocolVersion.REPLICATION_PROTOCOL_V1) {      TopologyMsg outTopoMsg=replicationServerDomain.createTopologyMsgForRS();      sendTopoInfo(outTopoMsg);      TopologyMsg inTopoMsg=waitAndProcessTopoFromRemoteRS();      if (inTopoMsg == null) {        abortStart(null);        return;      }      logTopoHandshakeSNDandRCV(outTopoMsg,inTopoMsg);      replicationServerDomain.register(this);      replicationServerDomain.receiveTopoInfoFromRS(inTopoMsg,this,false);    }    logger.debug(INFO_REPLICATION_SERVER_CONNECTION_TO_RS,getReplicationServerId(),getServerId(),replicationServerDomain.getBaseDN(),session.getReadableRemoteAddress());    super.finalizeStart();  } catch (  IOException e) {    logger.traceException(e);    LocalizableMessage errMessage=ERR_RS_DISCONNECTED_DURING_HANDSHAKE.get(getReplicationServerId(),session.getReadableRemoteAddress());    abortStart(errMessage);  }catch (  DirectoryException e) {    logger.traceException(e);    abortStart(e.getMessageObject());  }catch (  Exception e) {    logger.traceException(e);    abortStart(LocalizableMessage.raw(e.getLocalizedMessage()));  } finally {    releaseDomainLock();  }}  }
class C{  public void close(){  buf=null;}  }
class C{  public void recalculate(int p_net_no,Collection<BrdItem> p_item_list,RoutingBoard p_board){  if (p_net_no >= 1 && p_net_no <= net_incompletes.length) {    Collection<BrdItem> item_list=new LinkedList<BrdItem>(p_item_list);    net_incompletes[p_net_no - 1]=new NetIncompletes(p_net_no,item_list,p_board,resources);  }}  }
class C{  private void addSubject(String subjectName,Subject subject,boolean exclusive) throws NameAlreadyExistsException, InvalidNameException, PolicyException, SSOException {  if (debug.messageEnabled()) {    debug.message("Adding realm subject : " + subjectName + ", in realm:"+ pmRealmName);  }  if (realmSubjects == null) {    initRealmSubjects();  }  realmSubjects.addSubject(subjectName,subject,exclusive);  saveSubjects();  if (debug.messageEnabled()) {    debug.message("Added realm subject : " + subjectName + ", in realm:"+ pmRealmName);  }}  }
class C{  public Set createSubOrganizations(Set subOrganizations) throws AMException, SSOException {  Iterator iter=subOrganizations.iterator();  Set subOrgs=new HashSet();  while (iter.hasNext()) {    StringBuilder subOrgDNSB=new StringBuilder();    subOrgDNSB.append(AMNamingAttrManager.getNamingAttr(ORGANIZATION)).append("=").append((String)iter.next()).append(",").append(super.entryDN);    AMOrganizationImpl subOrgImpl=new AMOrganizationImpl(super.token,subOrgDNSB.toString());    subOrgImpl.create();    subOrgs.add(subOrgImpl);  }  return subOrgs;}  }
class C{  public SimplexNoiseGenerator(long seed){  this(new Random(seed));}  }
class C{  public InvalidName(String reason){  super(reason);}  }
class C{  private static boolean skipRightsHasRights(int rights){  int tmpRights=rights & ~ACI_SKIP_PROXY_CHECK;  return (skipRights & tmpRights) == tmpRights;}  }
class C{  public void testMovePointRightPosGreater(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=18;  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointRight(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  protected void parseSessionCookiesId(Request request){  Context context=request.getMappingData().context;  if (context != null && !context.getServletContext().getEffectiveSessionTrackingModes().contains(SessionTrackingMode.COOKIE)) {    return;  }  ServerCookies serverCookies=request.getServerCookies();  int count=serverCookies.getCookieCount();  if (count <= 0) {    return;  }  String sessionCookieName=SessionConfig.getSessionCookieName(context);  for (int i=0; i < count; i++) {    ServerCookie scookie=serverCookies.getCookie(i);    if (scookie.getName().equals(sessionCookieName)) {      if (!request.isRequestedSessionIdFromCookie()) {        convertMB(scookie.getValue());        request.setRequestedSessionId(scookie.getValue().toString());        request.setRequestedSessionCookie(true);        request.setRequestedSessionURL(false);        if (log.isDebugEnabled()) {          log.debug(" Requested cookie session id is " + request.getRequestedSessionId());        }      } else {        if (!request.isRequestedSessionIdValid()) {          convertMB(scookie.getValue());          request.setRequestedSessionId(scookie.getValue().toString());        }      }    }  }}  }
class C{  public static void checkCanEnqueueRequest(Operation operation,boolean isAllowedInLockDownMode) throws DirectoryException {  ClientConnection clientConnection=operation.getClientConnection();  if (!clientConnection.getAuthenticationInfo().isAuthenticated() && (directoryServer.rejectUnauthenticatedRequests || (directoryServer.lockdownMode && !isAllowedInLockDownMode))) {switch (operation.getOperationType()) {case ADD:case COMPARE:case DELETE:case SEARCH:case MODIFY:case MODIFY_DN:      LocalizableMessage message=directoryServer.lockdownMode ? NOTE_REJECT_OPERATION_IN_LOCKDOWN_MODE.get() : ERR_REJECT_UNAUTHENTICATED_OPERATION.get();    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);case EXTENDED:  ExtendedOperationBasis extOp=(ExtendedOperationBasis)operation;String requestOID=extOp.getRequestOID();if (!OID_START_TLS_REQUEST.equals(requestOID)) {message=directoryServer.lockdownMode ? NOTE_REJECT_OPERATION_IN_LOCKDOWN_MODE.get() : ERR_REJECT_UNAUTHENTICATED_OPERATION.get();throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);}break;}}if (clientConnection.mustChangePassword()) {switch (operation.getOperationType()) {case ADD:case COMPARE:case DELETE:case MODIFY_DN:case SEARCH:for (Control c : operation.getRequestControls()) {if (OID_PASSWORD_POLICY_CONTROL.equals(c.getOID())) {operation.addResponseControl(new PasswordPolicyResponseControl(null,0,PasswordPolicyErrorType.CHANGE_AFTER_RESET));break;}}DN user=clientConnection.getAuthenticationInfo().getAuthorizationDN();LocalizableMessage message=ERR_ENQUEUE_MUST_CHANGE_PASSWORD.get(user != null ? user : "anonymous");throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);case EXTENDED:ExtendedOperationBasis extOp=(ExtendedOperationBasis)operation;String requestOID=extOp.getRequestOID();if (!OID_PASSWORD_MODIFY_REQUEST.equals(requestOID) && !OID_START_TLS_REQUEST.equals(requestOID)) {for (Control c : operation.getRequestControls()) {if (OID_PASSWORD_POLICY_CONTROL.equals(c.getOID())) {operation.addResponseControl(new PasswordPolicyResponseControl(null,0,PasswordPolicyErrorType.CHANGE_AFTER_RESET));break;}}user=clientConnection.getAuthenticationInfo().getAuthorizationDN();message=ERR_ENQUEUE_MUST_CHANGE_PASSWORD.get(user != null ? user : "anonymous");throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);}break;}}}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.ServiceInstanceUpdateType createServiceInstanceUpdateType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.ServiceInstanceUpdateTypeImpl();}  }
class C{  public static void reset(){  schema=new XMPSchemaRegistryImpl();}  }
class C{  public Object clone(){  SearchTemplate t=(SearchTemplate)super.clone();  if (m_attrSet != null) {    t.setAttributeSet((AttrSet)m_attrSet.clone());  }  if (m_searchFilter != null) {    t.setSearchFilter(m_searchFilter);  }  return t;}  }
class C{  @Override public ShapeTile intersection(ShapeTile p_other){  return p_other.intersection(this);}  }
class C{  public ExceptionInInitializerError(){  initCause(null);}  }
class C{  public InvalidAppSSOTokenException(String msg){  super(msg);}  }
class C{  private static MenuResult<Void> checkReferences(ConsoleApplication app,ManagementContext context,ManagedObject<?> mo,SubCommandHandler handler) throws ClientException {  ManagedObjectDefinition<?,?> d=mo.getManagedObjectDefinition();  LocalizableMessage ufn=d.getUserFriendlyName();  try {    for (    PropertyDefinition<?> pd : d.getAllPropertyDefinitions()) {      if (pd instanceof AggregationPropertyDefinition<?,?>) {        AggregationPropertyDefinition<?,?> apd=(AggregationPropertyDefinition<?,?>)pd;        if (!apd.getTargetNeedsEnablingCondition().evaluate(context,mo)) {          continue;        }        for (        String name : mo.getPropertyValues(apd)) {          ManagedObjectPath<?,?> path=apd.getChildPath(name);          LocalizableMessage rufn=path.getManagedObjectDefinition().getUserFriendlyName();          ManagedObject<?> ref;          try {            ref=context.getManagedObject(path);          } catch (          DefinitionDecodingException e) {            LocalizableMessage msg=ERR_DSCFG_ERROR_GET_CHILD_DDE.get(rufn,rufn,rufn);            throw new ClientException(ReturnCode.OTHER,msg);          }catch (          ManagedObjectDecodingException e) {            LocalizableMessage msg=ERR_DSCFG_ERROR_GET_CHILD_MODE.get(rufn);            throw new ClientException(ReturnCode.OTHER,msg,e);          }catch (          ManagedObjectNotFoundException e) {            LocalizableMessage msg=ERR_DSCFG_ERROR_GET_CHILD_MONFE.get(rufn);            throw new ClientException(ReturnCode.NO_SUCH_OBJECT,msg);          }          Condition condition=apd.getTargetIsEnabledCondition();          while (!condition.evaluate(context,ref)) {            boolean isBadReference=true;            if (condition instanceof ContainsCondition) {              ContainsCondition cvc=(ContainsCondition)condition;              app.println();              if (app.confirmAction(INFO_EDITOR_PROMPT_ENABLED_REFERENCED_COMPONENT.get(rufn,name,ufn),true)) {                cvc.setPropertyValue(ref);                try {                  ref.commit();                  if (app instanceof DSConfig && app.isInteractive()) {                    DSConfig dsConfig=(DSConfig)app;                    String subCommandName="set-" + path.getRelationDefinition().getName() + "-prop";                    CommandBuilder builder=dsConfig.getCommandBuilder(subCommandName);                    if (path.getRelationDefinition() instanceof InstantiableRelationDefinition<?,?>) {                      String argName=CLIProfile.getInstance().getNamingArgument(path.getRelationDefinition());                      try {                        StringArgument arg=StringArgument.builder(argName).description(INFO_DSCFG_DESCRIPTION_NAME.get(d.getUserFriendlyName())).valuePlaceholder(INFO_NAME_PLACEHOLDER.get()).buildArgument();                        arg.addValue(name);                        builder.addArgument(arg);                      } catch (                      Throwable t) {                        throw new RuntimeException("Unexpected error: " + t,t);                      }                    }                    try {                      StringArgument arg=StringArgument.builder(OPTION_DSCFG_LONG_SET).shortIdentifier(OPTION_DSCFG_SHORT_SET).description(INFO_DSCFG_DESCRIPTION_PROP_VAL.get()).multiValued().valuePlaceholder(INFO_VALUE_SET_PLACEHOLDER.get()).buildArgument();                      PropertyDefinition<?> propertyDefinition=cvc.getPropertyDefinition();                      arg.addValue(propertyDefinition.getName() + ':' + castAndGetArgumentValue(propertyDefinition,cvc.getValue()));                      builder.addArgument(arg);                    } catch (                    Throwable t) {                      throw new RuntimeException("Unexpected error: " + t,t);                    }                    dsConfig.printCommandBuilder(builder);                  }                  isBadReference=false;                } catch (                MissingMandatoryPropertiesException e) {                  app.errPrintln();                  displayMissingMandatoryPropertyException(app,e);                  app.errPrintln();                  if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT.get(rufn),true)) {                    MenuResult<Void> result=modifyManagedObject(app,context,ref,handler);                    if (result.isQuit()) {                      return result;                    } else                     if (result.isSuccess()) {                      isBadReference=false;                    }                  }                }catch (                ConcurrentModificationException e) {                  LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_CME.get(ufn);                  throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,msg);                }catch (                OperationRejectedException e) {                  app.errPrintln();                  displayOperationRejectedException(app,e);                  app.errPrintln();                  if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT.get(rufn),true)) {                    MenuResult<Void> result=modifyManagedObject(app,context,ref,handler);                    if (result.isQuit()) {                      return result;                    } else                     if (result.isSuccess()) {                      isBadReference=false;                    }                  }                }catch (                ManagedObjectAlreadyExistsException e) {                  throw new IllegalStateException(e);                }              }            } else {              app.println();              if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT_TO_ENABLE.get(rufn,name,ufn),true)) {                MenuResult<Void> result=SetPropSubCommandHandler.modifyManagedObject(app,context,ref,handler);                if (result.isQuit()) {                  return result;                } else                 if (result.isSuccess()) {                  isBadReference=false;                }              }            }            if (isBadReference) {              app.errPrintln();              app.errPrintln(ERR_SET_REFERENCED_COMPONENT_DISABLED.get(ufn,rufn));              app.errPrintln();              if (app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {                return MenuResult.again();              } else {                return MenuResult.cancel();              }            }          }        }      }    }  } catch (  AuthorizationException e) {    LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_AUTHZ.get(ufn);    throw new ClientException(ReturnCode.INSUFFICIENT_ACCESS_RIGHTS,msg);  }catch (  LdapException e) {    LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_CE.get(ufn,e.getMessage());    throw new ClientException(ReturnCode.OTHER,msg);  }  return MenuResult.success();}  }
class C{  public OIDCIdTokenConfigBuilder customAuthenticationMethodReferencesMapperClass(String customAuthenticationMethodReferencesMapperClass){  this.customAuthenticationMethodReferencesMapper=customAuthenticationMethodReferencesMapperClass;  return this;}  }
class C{  public void flush(){  try {    File currentDir=new File(path);    for (    File f : currentDir.listFiles()) {      if (f.isDirectory())       FileUtils.deleteDirectory(f); else       FileUtils.deleteQuietly(f);    }    notifyObservers();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void processSynchPostOperationPlugins(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      provider.doPostOperation(this);    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_MODIFY_SYNCH_POSTOP_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return;    }  }}  }
class C{  public Set preProcessRemoveUser(SSOToken token,String entryDN,Set members,int objectType) throws AMPreCallBackException {  return members;}  }
class C{  protected int drawSelectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(selected);  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.drawSelectedText(g,x,y,p0,p1);    }    char echoChar=f.getEchoChar();    int n=p1 - p0;    for (int i=0; i < n; i++) {      x=drawEchoCharacter(g,x,y,echoChar);    }  }  return x;}  }
class C{  protected Expression group(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  public static ByteString valueOfInt(int i){  final byte[] bytes=new byte[4];  for (int j=3; j >= 0; j--) {    bytes[j]=(byte)i;    i>>>=8;  }  return wrap(bytes);}  }
class C{  public SignerInfo toSignerInfo(){  return info;}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return ((prolepticYear & 3) == 0) && ((prolepticYear % 100) != 0 || (prolepticYear % 400) == 0);}  }
class C{  public void insertElementAt(E element,int index){  delegate.insertElementAt(element,index);  fireIntervalAdded(this,index,index);}  }
class C{  public static void AddAgentToGroup(AMIdentity group,AMIdentity agent) throws IdRepoException, SSOException, ConfigurationException {  if (!group.isExists()) {    String[] param={group.getName()};    throw new ConfigurationException("cannot.add.agent.to.group.group.does.not.exist",param);  }  if (!agent.isExists()) {    String[] param={agent.getName()};    throw new ConfigurationException("cannot.add.agent.to.group.agent.does.not.exist",param);  }  String agentType=getAgentType(agent);  String agentGroupType=getAgentType(group);  if (supportLocalProperties(agentType) && isPropertiesLocallyStored(agent)) {    String agentName=agent.getName();    String[] param={agentName};    throw new ConfigurationException("cannot.add.agent.to.group.proeprties.locally.stored",param);  }  if (!agentType.equals(agentGroupType)) {    String agentName=agent.getName();    String groupName=group.getName();    String[] param={agentName,groupName};    throw new ConfigurationException("cannot.add.agent.to.group.type.mismatched",param);  }  group.addMember(agent);}  }
class C{  public TaskRunnable next(){  return nextTask;}  }
class C{  public void requestAccountDisabledState(){  operations.add(PasswordPolicyStateOperationType.GET_ACCOUNT_DISABLED_STATE);}  }
class C{  public void paste(int startIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.paste(startIndex);  }}  }
class C{  public void paintPopupMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean isDone(){  return index >= ctrlpts.length;}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_char);}  }
class C{  public Matcher useTransparentBounds(boolean b){  transparentBounds=b;  return this;}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < TEXT_SHIFT2_SET_CHARS.length) {char textChar=TEXT_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(textChar + 128));  upperShift=false;} else {  result.append(textChar);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  @Override public int hashCode(){  return value ? 1231 : 1237;}  }
class C{  private boolean checkDITStructureRule(DITStructureRule ditStructureRule,ObjectClass structuralClass,Entry parentEntry,boolean parentProvided,boolean validateStructureRules,AcceptRejectWarn structuralPolicy,LocalizableMessageBuilder invalidReason){  if (ditStructureRule != null && !ditStructureRule.getSuperiorRules().isEmpty()) {    if (parentProvided) {      if (parentEntry != null) {        boolean dsrValid=validateDITStructureRule(ditStructureRule,structuralClass,parentEntry,structuralPolicy,invalidReason);        if (!dsrValid) {          return false;        }      }    } else {      DN parentDN=DirectoryServer.getParentDNInSuffix(dn);      if (parentDN != null) {        try {          parentEntry=DirectoryServer.getEntry(parentDN);          if (parentEntry == null) {            LocalizableMessage message=ERR_ENTRY_SCHEMA_DSR_NO_PARENT_ENTRY.get(dn,parentDN);            if (structuralPolicy == AcceptRejectWarn.REJECT) {              invalidReason.append(message);              return false;            } else             if (structuralPolicy == AcceptRejectWarn.WARN) {              logger.error(message);            }          } else {            boolean dsrValid=validateDITStructureRule(ditStructureRule,structuralClass,parentEntry,structuralPolicy,invalidReason);            if (!dsrValid) {              return false;            }          }        } catch (        Exception e) {          logger.traceException(e);          LocalizableMessage message=ERR_ENTRY_SCHEMA_COULD_NOT_CHECK_DSR.get(dn,ditStructureRule.getNameOrRuleID(),getExceptionMessage(e));          if (structuralPolicy == AcceptRejectWarn.REJECT) {            invalidReason.append(message);            return false;          } else           if (structuralPolicy == AcceptRejectWarn.WARN) {            logger.error(message);          }        }      }    }  } else   if (validateStructureRules) {    boolean parentExists=false;    ObjectClass parentStructuralClass=null;    if (parentEntry != null) {      parentExists=true;      parentStructuralClass=parentEntry.getStructuralObjectClass();    } else     if (!parentProvided) {      DN parentDN=DirectoryServer.getParentDNInSuffix(getName());      if (parentDN != null) {        try {          parentEntry=DirectoryServer.getEntry(parentDN);          if (parentEntry == null) {            LocalizableMessage message=ERR_ENTRY_SCHEMA_DSR_NO_PARENT_ENTRY.get(dn,parentDN);            if (structuralPolicy == AcceptRejectWarn.REJECT) {              invalidReason.append(message);              return false;            } else             if (structuralPolicy == AcceptRejectWarn.WARN) {              logger.error(message);            }          } else {            parentExists=true;            parentStructuralClass=parentEntry.getStructuralObjectClass();          }        } catch (        Exception e) {          logger.traceException(e);          LocalizableMessage message=ERR_ENTRY_SCHEMA_COULD_NOT_CHECK_PARENT_DSR.get(dn,getExceptionMessage(e));          if (structuralPolicy == AcceptRejectWarn.REJECT) {            invalidReason.append(message);            return false;          } else           if (structuralPolicy == AcceptRejectWarn.WARN) {            logger.error(message);          }        }      }    }    if (parentExists) {      if (parentStructuralClass == null) {        LocalizableMessage message=ERR_ENTRY_SCHEMA_DSR_NO_PARENT_OC.get(dn,parentEntry.getName());        if (structuralPolicy == AcceptRejectWarn.REJECT) {          invalidReason.append(message);          return false;        } else         if (structuralPolicy == AcceptRejectWarn.WARN) {          logger.error(message);        }      } else {        Collection<NameForm> allNFs=DirectoryServer.getSchema().getNameForms(parentStructuralClass);        if (allNFs != null) {          for (          NameForm parentNF : allNFs) {            if (!parentNF.isObsolete()) {              for (              DITStructureRule parentDSR : DirectoryServer.getSchema().getDITStructureRules(parentNF)) {                if (!parentDSR.isObsolete()) {                  LocalizableMessage message=ERR_ENTRY_SCHEMA_VIOLATES_PARENT_DSR.get(dn,parentEntry.getName());                  if (structuralPolicy == AcceptRejectWarn.REJECT) {                    invalidReason.append(message);                    return false;                  } else                   if (structuralPolicy == AcceptRejectWarn.WARN) {                    logger.error(message);                  }                }              }            }          }        }      }    }  }  return true;}  }
class C{  private boolean closeInternal(int rstStatusCode){  assert (!Thread.holdsLock(this));synchronized (this) {    if (this.rstStatusCode != -1) {      return false;    }    if (in.finished && out.finished) {      return false;    }    this.rstStatusCode=rstStatusCode;    notifyAll();  }  connection.removeStream(id);  return true;}  }
class C{  public LibPadstack add(ShapeConvex p_shape,int p_from_layer,int p_to_layer){  ShapeConvex[] shape_arr=new ShapeConvex[board_layer_structure.size()];  int from_layer=Math.max(p_from_layer,0);  int to_layer=Math.min(p_to_layer,board_layer_structure.size() - 1);  for (int index=from_layer; index <= to_layer; ++index) {    shape_arr[index]=p_shape;  }  return add(shape_arr);}  }
class C{  @Override public void onSupportActionModeStarted(@NonNull final ActionMode mode){  super.onSupportActionModeStarted(mode);}  }
class C{  private <T>void registerAddModification(PropertyDefinition<T> pd,SortedSet<T> newValues,SortedSet<T> previousValues){  PropertyEditorModification<?> mod=getModification(pd);  PropertyEditorModification<T> newMod;  SortedSet<T> originalValues;  if (mod != null) {    originalValues=new TreeSet<>(pd);    castAndAddValues(originalValues,mod.getOriginalValues(),pd);    if (mod.getType() == PropertyEditorModification.Type.ADD) {      SortedSet<T> addedValues=new TreeSet<>(newValues);      addedValues.removeAll(originalValues);      newMod=PropertyEditorModification.createAddModification(pd,addedValues,originalValues);    } else {      newMod=PropertyEditorModification.createSetModification(pd,new TreeSet<T>(newValues),originalValues);    }    removeModification(mod);  } else {    originalValues=new TreeSet<>(previousValues);    SortedSet<T> addedValues=new TreeSet<>(newValues);    addedValues.removeAll(originalValues);    newMod=PropertyEditorModification.createAddModification(pd,addedValues,originalValues);  }  addModification(newMod);}  }
class C{  public void validate(){}  }
class C{  public void test_indexOfSubListLjava_util_ListLjava_util_List(){  List list=new ArrayList();  try {    Collections.indexOfSubList(null,list);    fail("Expected NullPointerException for null list first parameter");  } catch (  NullPointerException e) {  }  try {    Collections.indexOfSubList(list,null);    fail("Expected NullPointerException for null list second parameter");  } catch (  NullPointerException e) {  }  String string1="A-B-C-D-E-S-JF-SUB-G-H-I-J-SUBL-K-L-LIST-M-N--S-S-O-SUBLIS-P-Q-R-SUBLIST-S-T-U-V-W-X-Y-Z";  testwithCharList(1,string1,"B",true);  testwithCharList(2,string1,"LIST",true);  testwithCharList(3,string1,"SUBLIST",true);  testwithCharList(4,string1,"NONE",true);  testwithCharList(5,string1,"END",true);  testwithCharList(6,"","",true);  testwithCharList(7,"LIST","",true);  testwithCharList(8,"","SUBLIST",true);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Ellipse2D) {    Ellipse2D e2d=(Ellipse2D)obj;    return ((getX() == e2d.getX()) && (getY() == e2d.getY()) && (getWidth() == e2d.getWidth())&& (getHeight() == e2d.getHeight()));  }  return false;}  }
class C{  public static Keymap removeKeymap(String nm){  return getKeymapTable().remove(nm);}  }
class C{  public static int countByUuid(java.lang.String uuid){  return getPersistence().countByUuid(uuid);}  }
class C{  public OrQueryExp(QueryExp q1,QueryExp q2){  exp1=q1;  exp2=q2;}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  _logname=(String)atts.get("logName");  _loggedBySid=(String)atts.get("sid");  _atts=atts;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static void addFile(String s) throws IOException {  File f=new File(s);  addFile(f);}  }
class C{  private HeaderParseStatus parseHeader() throws IOException {  byte chr=0;  while (headerParsePos == HeaderParsePosition.HEADER_START) {    if (pos >= lastValid) {      if (!fill(false)) {        headerParsePos=HeaderParsePosition.HEADER_START;        return HeaderParseStatus.NEED_MORE_DATA;      }    }    chr=buf[pos];    if (chr == Constants.CR) {    } else     if (chr == Constants.LF) {      pos++;      return HeaderParseStatus.DONE;    } else {      break;    }    pos++;  }  if (headerParsePos == HeaderParsePosition.HEADER_START) {    headerData.start=pos;    headerParsePos=HeaderParsePosition.HEADER_NAME;  }  while (headerParsePos == HeaderParsePosition.HEADER_NAME) {    if (pos >= lastValid) {      if (!fill(false)) {        return HeaderParseStatus.NEED_MORE_DATA;      }    }    chr=buf[pos];    if (chr == Constants.COLON) {      headerParsePos=HeaderParsePosition.HEADER_VALUE_START;      headerData.headerValue=headers.addValue(buf,headerData.start,pos - headerData.start);      pos++;      headerData.start=pos;      headerData.realPos=pos;      headerData.lastSignificantChar=pos;      break;    } else     if (chr < 0 || !HTTP_TOKEN_CHAR[chr]) {      headerData.lastSignificantChar=pos;      return skipLine();    }    if ((chr >= Constants.A) && (chr <= Constants.Z)) {      buf[pos]=(byte)(chr - Constants.LC_OFFSET);    }    pos++;  }  if (headerParsePos == HeaderParsePosition.HEADER_SKIPLINE) {    return skipLine();  }  while (headerParsePos == HeaderParsePosition.HEADER_VALUE_START || headerParsePos == HeaderParsePosition.HEADER_VALUE || headerParsePos == HeaderParsePosition.HEADER_MULTI_LINE) {    if (headerParsePos == HeaderParsePosition.HEADER_VALUE_START) {      while (true) {        if (pos >= lastValid) {          if (!fill(false)) {            return HeaderParseStatus.NEED_MORE_DATA;          }        }        chr=buf[pos];        if (chr == Constants.SP || chr == Constants.HT) {          pos++;        } else {          headerParsePos=HeaderParsePosition.HEADER_VALUE;          break;        }      }    }    if (headerParsePos == HeaderParsePosition.HEADER_VALUE) {      boolean eol=false;      while (!eol) {        if (pos >= lastValid) {          if (!fill(false)) {            return HeaderParseStatus.NEED_MORE_DATA;          }        }        chr=buf[pos];        if (chr == Constants.CR) {        } else         if (chr == Constants.LF) {          eol=true;        } else         if (chr == Constants.SP || chr == Constants.HT) {          buf[headerData.realPos]=chr;          headerData.realPos++;        } else {          buf[headerData.realPos]=chr;          headerData.realPos++;          headerData.lastSignificantChar=headerData.realPos;        }        pos++;      }      headerData.realPos=headerData.lastSignificantChar;      headerParsePos=HeaderParsePosition.HEADER_MULTI_LINE;    }    if (pos >= lastValid) {      if (!fill(false)) {        return HeaderParseStatus.NEED_MORE_DATA;      }    }    chr=buf[pos];    if (headerParsePos == HeaderParsePosition.HEADER_MULTI_LINE) {      if ((chr != Constants.SP) && (chr != Constants.HT)) {        headerParsePos=HeaderParsePosition.HEADER_START;        break;      } else {        buf[headerData.realPos]=chr;        headerData.realPos++;        headerParsePos=HeaderParsePosition.HEADER_VALUE_START;      }    }  }  headerData.headerValue.setBytes(buf,headerData.start,headerData.lastSignificantChar - headerData.start);  headerData.recycle();  return HeaderParseStatus.HAVE_MORE_HEADERS;}  }
class C{  private void trustedCert(String alias,CertificateFactory cf,KeyStore ks,InputStream in) throws KeyStoreException {  try {    if (ks.containsAlias(alias)) {      LocalizableMessage msg=ERR_CERTMGR_ALIAS_ALREADY_EXISTS.get(alias);      throw new KeyStoreException(msg.toString());    }    X509Certificate cert=(X509Certificate)cf.generateCertificate(in);    if (isSelfSigned(cert)) {      cert.verify(cert.getPublicKey());    }    ks.setCertificateEntry(alias,cert);  } catch (  Exception e) {    throw new KeyStoreException(ERR_CERTMGR_TRUSTED_CERT.get(alias,e.getMessage()).toString(),e);  }}  }
class C{  public LDAPControl(String oid,boolean isCritical,ByteString value){  super(oid,isCritical);  this.value=value;}  }
class C{  public void clearSelectedPath(){  if (selection.size() > 0) {    setSelectedPath(null);  }}  }
class C{  public Oid(InputStream derOid) throws GSSException {  try {    DerValue derVal=new DerValue(derOid);    derEncoding=derVal.toByteArray();    oid=derVal.getOID();  } catch (  IOException e) {    throw new GSSException(GSSException.FAILURE,"Improperly formatted ASN.1 DER encoding for Oid");  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (serialVersionOnStream < 1) {    monetarySeparator=decimalSeparator;    exponential='E';  }  if (serialVersionOnStream < 2) {    locale=Locale.ROOT;  }  if (serialVersionOnStream < 3) {    exponentialSeparator=Character.toString(exponential);  }  serialVersionOnStream=currentSerialVersion;  if (intlCurrencySymbol != null) {    try {      currency=Currency.getInstance(intlCurrencySymbol);    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  private void onRetrieve(Context context,Request request,String resourceId,ResourceResponse value) throws ResourceException {  execScriptHook(context,ScriptHook.onRetrieve,value.getContent(),prepareScriptBindings(context,request,resourceId,new JsonValue(null),new JsonValue(null)));  for (  JsonPointer key : Collections.unmodifiableSet(getSchema().getFields().keySet())) {    getSchema().getField(key).onRetrieve(context,value.getContent());  }}  }
class C{  static void createFileLicenseApproved(){  if (getApproval()) {    try {      new File(getInstanceLegalDirectory(),ACCEPTED_LICENSE_FILE_NAME).createNewFile();    } catch (    IOException e) {    }  }}  }
class C{  public String[][] logRecRead(Set fileNames,LogQuery logQuery,boolean sourceData) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  this.cleaner();  Set fNames=new HashSet();  boolean isFirstFile=true;  for (Iterator it=fileNames.iterator(); it.hasNext(); ) {    String ss=(String)it.next();    fNames.add(ss);    this.logFileName=ss;    if (Debug.messageEnabled()) {      Debug.message("File:logRecRead/2: processing file " + ss + ", sourceData = "+ sourceData);    }    boolean hdrExist=false;    if (sourceData == true) {      queryChriteria=logQuery;    }    try {      hdrExist=this.getFieldNames(isFirstFile,logQuery);      isFirstFile=false;    } catch (    IOException e) {      throw e;    }catch (    RuntimeException e) {      throw e;    }catch (    Exception e) {      throw e;    }    if (hdrExist == false) {      return queryResult;    }    if (logQuery != null) {      if ((logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) || (logQuery.getNumRecordsWanted() < LogQuery.ALL_RECORDS)) {        this.maxNoOfRecs=1;      } else {        this.maxNoOfRecs=logQuery.getNumRecordsWanted();      }    } else {      this.maxNoOfRecs=1;    }    try {      if (sourceData == true) {        this.getRecordsMulti(true);      } else {        this.getRecordsMulti(false);      }    } catch (    IOException e) {      throw e;    }catch (    IllegalArgumentException e) {      throw e;    }catch (    RuntimeException e) {      throw e;    }catch (    Exception e) {      throw e;    }  }  int recSize=listOfValidRecords.size();  if (recSize <= 0) {    return null;  }  if (queryChriteria != null) {    String sortByField=queryChriteria.getSortingField();    if (sortByField != null) {      try {        this.sorter=new LogRecordSorter(sortByField,listOfValidRecords);        queryResult=this.sorter.getSortedRecords();        return (queryResult);      } catch (      NoSuchFieldException e) {        throw e;      }catch (      IllegalArgumentException e) {        throw e;      }catch (      RuntimeException e) {        throw e;      }catch (      Exception e) {        throw e;      }    }  }  queryResult=new String[recSize][];  for (int i=0; i < recSize; i++) {    queryResult[i]=(String[])listOfValidRecords.get(i);  }  return queryResult;}  }
class C{  private static ThreadGroup createThreadGroup(){  try {    sun.misc.Unsafe u=sun.misc.Unsafe.getUnsafe();    Class<?> tk=Thread.class;    Class<?> gk=ThreadGroup.class;    long tg=u.objectFieldOffset(tk.getDeclaredField("group"));    long gp=u.objectFieldOffset(gk.getDeclaredField("parent"));    ThreadGroup group=(ThreadGroup)u.getObject(Thread.currentThread(),tg);    while (group != null) {      ThreadGroup parent=(ThreadGroup)u.getObject(group,gp);      if (parent == null)       return new ThreadGroup(group,"InnocuousForkJoinWorkerThreadGroup");      group=parent;    }  } catch (  Exception e) {    throw new Error(e);  }  throw new Error("Cannot create ThreadGroup");}  }
class C{  public LDAPModifyOptions(){}  }
class C{  public static void embedDataBits(BitVector dataBits,int maskPattern,ByteMatrix matrix) throws WriterException {  int bitIndex=0;  int direction=-1;  int x=matrix.getWidth() - 1;  int y=matrix.getHeight() - 1;  while (x > 0) {    if (x == 6) {      x-=1;    }    while (y >= 0 && y < matrix.getHeight()) {      for (int i=0; i < 2; ++i) {        int xx=x - i;        if (!isEmpty(matrix.get(xx,y))) {          continue;        }        int bit;        if (bitIndex < dataBits.size()) {          bit=dataBits.at(bitIndex);          ++bitIndex;        } else {          bit=0;        }        if (maskPattern != -1) {          if (MaskUtil.getDataMaskBit(maskPattern,xx,y)) {            bit^=0x1;          }        }        matrix.set(xx,y,bit);      }      y+=direction;    }    direction=-direction;    y+=direction;    x-=2;  }  if (bitIndex != dataBits.size()) {    throw new WriterException("Not all bits consumed: " + bitIndex + '/'+ dataBits.size());  }}  }
class C{  protected SipProviderImpl(SipStackImpl sipStack){  this.eventScanner=sipStack.getEventScanner();  this.sipStack=sipStack;  this.eventScanner.incrementRefcount();  this.listeningPoints=new ConcurrentHashMap<String,ListeningPoint>();  this.automaticDialogSupportEnabled=this.sipStack.isAutomaticDialogSupportEnabled();  this.dialogErrorsAutomaticallyHandled=this.sipStack.isAutomaticDialogErrorHandlingEnabled();}  }
class C{  public E take() throws InterruptedException {  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null)       available.await(); else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        first=null;        if (leader != null)         available.await(); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            available.awaitNanos(delay);          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  void unbindMaintenanceFilter(Filter filter){  maintenanceFilter.setDelegate(PassthroughFilter.PASSTHROUGH_FILTER);}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  public boolean visitAVT(AVT elem){  return true;}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public String toString(){  if (array != null) {    return new String(array,offset,count);  }  return "";}  }
class C{  public boolean hasItem(){  return this.item != null;}  }
class C{  private boolean shouldLog(TraceSettings settings,boolean hasException){  return settings != null && (settings.getLevel() == ALL || (hasException && settings.getLevel() == EXCEPTIONS_ONLY));}  }
class C{  public Kue processBlocking(String type,int n,Handler<Job> handler){  if (n <= 0) {    throw new IllegalStateException("The process times must be positive");  }  while (n-- > 0) {    processInternal(type,handler,true);  }  setupTimers();  return this;}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public Node item(int index){  return null;}  }
class C{  private static ServerSocket bindPort(int port) throws IOException {  ServerSocket serverLdapSocket=new ServerSocket();  serverLdapSocket.setReuseAddress(true);  serverLdapSocket.bind(new InetSocketAddress(port));  return serverLdapSocket;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public AMInvalidURLViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  static void sort(Object[] a,int lo,int hi,Object[] work,int workBase,int workLen){  assert a != null && lo >= 0 && lo <= hi && hi <= a.length;  int nRemaining=hi - lo;  if (nRemaining < 2)   return;  if (nRemaining < MIN_MERGE) {    int initRunLen=countRunAndMakeAscending(a,lo,hi);    binarySort(a,lo,hi,lo + initRunLen);    return;  }  ComparableTimSort ts=new ComparableTimSort(a,work,workBase,workLen);  int minRun=minRunLength(nRemaining);  do {    int runLen=countRunAndMakeAscending(a,lo,hi);    if (runLen < minRun) {      int force=nRemaining <= minRun ? nRemaining : minRun;      binarySort(a,lo,lo + force,lo + runLen);      runLen=force;    }    ts.pushRun(lo,runLen);    ts.mergeCollapse();    lo+=runLen;    nRemaining-=runLen;  } while (nRemaining != 0);  assert lo == hi;  ts.mergeForceCollapse();  assert ts.stackSize == 1;}  }
class C{  public void flush(){}  }
class C{  private NameIDInfo(){}  }
class C{  public boolean skipChar(int c) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int cc=fCurrentEntity.ch[fCurrentEntity.position];  if (cc == c) {    fCurrentEntity.position++;    return true;  } else   if (c == '\n' && cc == '\r' && fCurrentEntity.isExternal()) {    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)cc;      load(1,false);    }    fCurrentEntity.position++;    if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {      fCurrentEntity.position++;    }    return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName01.class,args);}  }
class C{  public void testCase20(){  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={1,2,3,4,5,6,7};  int bSign=1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public HeapException(Throwable cause){  super(cause);}  }
class C{  public DsnRectangle union(DsnRectangle p_other){  double[] result_coor=new double[4];  result_coor[0]=Math.min(this.coor[0],p_other.coor[0]);  result_coor[1]=Math.min(this.coor[1],p_other.coor[1]);  result_coor[2]=Math.max(this.coor[2],p_other.coor[2]);  result_coor[3]=Math.max(this.coor[3],p_other.coor[3]);  return new DsnRectangle(this.layer,result_coor);}  }
class C{  private Builder(Event35 other){  super(Event35.SCHEMA$);  if (isValidValue(fields()[0],other.playerCount)) {    this.playerCount=data().deepCopy(fields()[0].schema(),other.playerCount);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.eventID)) {    this.eventID=data().deepCopy(fields()[1].schema(),other.eventID);    fieldSetFlags()[1]=true;  }}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(100);  String prefix="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  String uri="";  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("AssertionArtifact").append(uri).append(">").append(artifact).append("</").append(prefix).append("AssertionArtifact>\n");  return xml.toString();}  }
class C{  @ConstructorProperties({"root"}) public DefaultTreeModel(TreeNode root){  this(root,false);}  }
class C{  private static int subN(int[] a,int[] b,int len){  long sum=0;  while (--len >= 0) {    sum=(a[len] & LONG_MASK) - (b[len] & LONG_MASK) + (sum >> 32);    a[len]=(int)sum;  }  return (int)(sum >> 32);}  }
class C{  public JKDataAccessException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private TopologyMsg sendTopoToRemoteDS() throws IOException {  TopologyMsg outTopoMsg=replicationServerDomain.createTopologyMsgForDS(this.serverId);  sendTopoInfo(outTopoMsg);  return outTopoMsg;}  }
class C{  public NotJavaIdentifierValidator(){}  }
class C{  private String formatQuoteToJSON(OHLCquote quote){  String jsonData=null;  ObjectMapper mapper=new ObjectMapper();  try {    jsonData=mapper.writeValueAsString(quote);  } catch (  JsonProcessingException e) {    System.out.println("TimeRangeOHLCActionHandler.formatQuoteToJSON(): ERROR: JsonProcessingException on quote !!!");    e.printStackTrace();  }  return jsonData;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int origlength=s.readInt();  int elements=s.readInt();  int length=(int)(elements * loadFactor) + (elements / 20) + 3;  if (length > elements && (length & 1) == 0)   length--;  if (origlength > 0 && length > origlength)   length=origlength;  table=new Entry<?,?>[length];  threshold=(int)Math.min(length * loadFactor,MAX_ARRAY_SIZE + 1);  count=0;  for (; elements > 0; elements--) {    @SuppressWarnings("unchecked") K key=(K)s.readObject();    @SuppressWarnings("unchecked") V value=(V)s.readObject();    reconstitutionPut(table,key,value);  }}  }
class C{  protected void installListeners(JComponent c){  c.addPropertyChangeListener(this);}  }
class C{  public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        try {          int b=in.read();          if (b >= 0) {            b3[i]=(byte)b;            numBinaryBytes++;          }        } catch (        java.io.IOException e) {          if (i == 0)           throw e;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0)         break;        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("improperly.padded.base64.input");      }    }  }  assert position >= 0;  if (position >= numSigBytes)   return -1;  if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {    lineLength=0;    return '\n';  } else {    lineLength++;    int b=buffer[position++];    if (position >= bufferLength)     position=-1;    return b & 0xFF;  }}  }
class C{  public final Collection<AwtreeFindEntry> find_overlap_tree_entries_with_clearance(ShapeTile p_shape,int p_layer,NetNosList p_ignore_net_nos,int p_clearance_class){  if (is_clearance_compensation_used())   return find_overlap_tree_entries(p_shape,p_layer,p_ignore_net_nos); else   return find_overlap_tree_entries_with_clearance_fun(p_shape,p_layer,p_ignore_net_nos,p_clearance_class);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docTypeNull=null;  Document docImp;  DOMImplementation domImpl;  DocumentType docType;  NamedNodeMap nodeMap;  Entity entity2;  Entity entity6;  Entity entityImp2;  Entity entityImp6;  String nodeName;  String systemId;  String notationName;  String nodeNameImp;  String systemIdImp;  String notationNameImp;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=doc.getDoctype();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  nodeMap=docType.getEntities();  assertNotNull("entitiesNotNull",nodeMap);  entity2=(Entity)nodeMap.getNamedItem("ent2");  entity6=(Entity)nodeMap.getNamedItem("ent6");  entityImp2=(Entity)docImp.importNode(entity2,false);  entityImp6=(Entity)docImp.importNode(entity6,true);  nodeName=entity2.getNodeName();  nodeNameImp=entityImp2.getNodeName();  assertEquals("documentimportnode19_Ent2NodeName",nodeName,nodeNameImp);  nodeName=entity6.getNodeName();  nodeNameImp=entityImp6.getNodeName();  assertEquals("documentimportnode19_Ent6NodeName",nodeName,nodeNameImp);  systemId=entity2.getSystemId();  systemIdImp=entityImp2.getSystemId();  assertEquals("documentimportnode19_Ent2SystemId",systemId,systemIdImp);  systemId=entity6.getSystemId();  systemIdImp=entityImp6.getSystemId();  assertEquals("documentimportnode19_Ent6SystemId",systemId,systemIdImp);  notationName=entity2.getNotationName();  notationNameImp=entityImp2.getNotationName();  assertEquals("documentimportnode19_Ent2NotationName",notationName,notationNameImp);  notationName=entity6.getNotationName();  notationNameImp=entityImp6.getNotationName();  assertEquals("documentimportnode19_Ent6NotationName",notationName,notationNameImp);}  }
class C{  public InputStreamReader(InputStream in){  super(in);  try {    sd=StreamDecoder.forInputStreamReader(in,this,(String)null);  } catch (  UnsupportedEncodingException e) {    throw new Error(e);  }}  }
class C{  public static String slice(final String value,int begin,int end){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.substring(begin,end);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  if (!realm.startsWith("/")) {    realm="/" + realm;  }  String parentRealm=RealmUtils.getParentRealm(realm);  String childRealm=RealmUtils.getChildRealm(realm);  String[] params={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_REALM",params);  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,parentRealm);    Map defaultValues=new HashMap(2);    Map map=new HashMap(2);    Set values=new HashSet(2);    values.add("Active");    map.put(IdConstants.ORGANIZATION_STATUS_ATTR,values);    defaultValues.put(IdConstants.REPO_SERVICE,map);    ocm.createSubOrganization(childRealm,defaultValues);    getOutputWriter().printlnMessage(getResourceString("create-realm-succeed"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_CREATE_REALM",params);  } catch (  SMSException e) {    String[] args={realm,e.getMessage()};    debugError("CreateRealm.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  void add(JScrollPane scroll,Point p){  scrolls.add(scroll);  points.add(p);}  }
class C{  private void assertReadResult(InputStream in,int size) throws IOException {  byte[] readContent=new byte[size + 1];  int count=0;  int total=0;  while ((count=in.read(readContent,total,size + 1 - total)) != -1) {    total=total + count;  }  assertEquals(size,total);  for (int i=0; i < size; i++) {    assertEquals((byte)i,readContent[i]);  }}  }
class C{  static void printStats(Stats policyStats){  int cacheSize=0;synchronized (subjectEvaluationCache) {    cacheSize=subjectEvaluationCache.size();  }  policyStats.record("SubjectEvaluationCache: Number of entries in" + " cache : " + cacheSize);}  }
class C{  public void transform(Source source) throws TransformerException {  transform(source,true);}  }
class C{  public void closeLayout(final String id){synchronized (stateChangeLock) {    mapStates.put(id,SwipeRevealLayout.STATE_CLOSE);    if (mapLayouts.containsKey(id)) {      final SwipeRevealLayout layout=mapLayouts.get(id);      layout.close(true);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentFragment docFrag;  Comment comment;  Node aNode;  NodeList children;  Node child;  String childValue;  doc=(Document)load("staff",true);  aNewDoc=(Document)load("staff",true);  docFrag=aNewDoc.createDocumentFragment();  comment=aNewDoc.createComment("descendant1");  aNode=docFrag.appendChild(comment);  aNode=doc.importNode(docFrag,true);  children=aNode.getChildNodes();  assertSize("throw_Size",1,children);  child=aNode.getFirstChild();  childValue=child.getNodeValue();  assertEquals("descendant1","descendant1",childValue);}  }
class C{  static synchronized void reset(){  caches.clear();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String outfile=getStringOptionValue(IArgument.OUTPUT_FILE);  IOutput outputWriter=getOutputWriter();  try {    String[] params={serverName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_SERVER_CONFIG_XML",params);    String xml=ServerConfiguration.getServerConfigXML(adminSSOToken,serverName);    if ((xml != null) && (xml.length() > 0)) {      if ((outfile != null) && (outfile.length() > 0)) {        CLIUtil.writeToFile(outfile,xml);      } else {        outputWriter.printlnMessage(xml);      }      outputWriter.printlnMessage(MessageFormat.format(getResourceString("get-serverconfig-xml-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(getResourceString("get-server-config-xml-no-result-no-results"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_SERVER_CONFIG_XML",params);  } catch (  IOException e) {    String[] args={serverName,e.getMessage()};    debugError("GetServerConfigXML.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SERVER_CONFIG_XML",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("GetServerConfigXML.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SERVER_CONFIG_XML",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("GetServerConfigXML.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_SERVER_CONFIG_XML",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void printTagContent(PrintWriter aWriter,String tag,String content) throws Exception {  aWriter.print("<");  aWriter.print(tag);  aWriter.print(">");  aWriter.print(convertStr(content));  aWriter.print("</");  aWriter.print(tag);  aWriter.println(">");}  }
class C{  public boolean jmxSslEnabled(){  return values.jmxSslEnabled;}  }
class C{  public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public List<PdfIndirectReference> listIndirectReferences(){  checkClosingStatus();  List<PdfIndirectReference> indRefs=new ArrayList<>(xref.size());  for (int i=0; i < xref.size(); ++i) {    PdfIndirectReference indref=xref.get(i);    if (indref != null) {      indRefs.add(indref);    }  }  return indRefs;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  protected SetOfIntegerSyntax(int member){  if (member < 0) {    throw new IllegalArgumentException();  }  members=new int[][]{{member,member}};}  }
class C{  protected void clearAllTrails(SSOTokenID tokenID){  boolean removed=false;  String key=tokenID.toString();synchronized (mapTokenIDs) {    removed=(mapTokenIDs.remove(key) != null);  }}  }
class C{  public static DynamicMBean createMBean(ContextResource resource) throws Exception {  String mname=createManagedName(resource);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    Exception e=new Exception("ManagedBean is not found with " + mname);    throw new MBeanException(e);  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  DynamicMBean mbean=managed.createMBean(resource);  ObjectName oname=createObjectName(domain,resource);  if (mserver.isRegistered(oname)) {    mserver.unregisterMBean(oname);  }  mserver.registerMBean(mbean,oname);  return (mbean);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  FSAuthDomainsModel model=(FSAuthDomainsModel)getModel();  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTIES);  try {    Map values=ps.getAttributeValues(model.getDataMap(),false,model);    String name=(String)getDisplayFieldValue(model.TF_NAME);    if ((name == null) || (name.length() < 1)) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("authdomain.authentication.domain.name.missing.message"));      psModel.setErrorProperty("nameProperty",true);      forwardTo();    } else {      CCAddRemove addRemoveList=(CCAddRemove)getChild(ADD_REMOVE_PROVIDERS);      addRemoveList.restoreStateData();      CCAddRemoveModel addRemoveModel=(CCAddRemoveModel)addRemoveList.getModel();      Set providers=new HashSet(getSelectedValues(addRemoveModel));      model.createAuthenticationDomain(values,providers);      Object[] params={name};      String message=MessageFormat.format(model.getLocalizedString("authentication.domain.create.message"),params);      setPageSessionAttribute(FederationViewBean.MESSAGE_TEXT,message);      backTrail();      FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public PageTrail(String displayName,String viewBeanClassName,Map pageSessionAttributeValues){  add(displayName,viewBeanClassName,pageSessionAttributeValues);}  }
class C{  private static EncodingInfo[] loadEncodingInfo(){  try {    final InputStream is;    SecuritySupport ss=SecuritySupport.getInstance();    is=ss.getResourceAsStream(ObjectFactory.findClassLoader(),ENCODINGS_FILE);    Properties props=new Properties();    if (is != null) {      props.load(is);      is.close();    } else {    }    int totalEntries=props.size();    List encodingInfo_list=new ArrayList();    Enumeration keys=props.keys();    for (int i=0; i < totalEntries; ++i) {      String javaName=(String)keys.nextElement();      String val=props.getProperty(javaName);      int len=lengthOfMimeNames(val);      String mimeName;      char highChar;      if (len == 0) {        mimeName=javaName;        highChar='\u0000';      } else {        try {          final String highVal=val.substring(len).trim();          highChar=(char)Integer.decode(highVal).intValue();        } catch (        NumberFormatException e) {          highChar=0;        }        String mimeNames=val.substring(0,len);        StringTokenizer st=new StringTokenizer(mimeNames,",");        for (boolean first=true; st.hasMoreTokens(); first=false) {          mimeName=st.nextToken();          EncodingInfo ei=new EncodingInfo(mimeName,javaName,highChar);          encodingInfo_list.add(ei);          _encodingTableKeyMime.put(mimeName.toUpperCase(),ei);          if (first)           _encodingTableKeyJava.put(javaName.toUpperCase(),ei);        }      }    }    EncodingInfo[] ret_ei=new EncodingInfo[encodingInfo_list.size()];    encodingInfo_list.toArray(ret_ei);    return ret_ei;  } catch (  java.net.MalformedURLException mue) {    throw new org.apache.xml.serializer.utils.WrappedRuntimeException(mue);  }catch (  java.io.IOException ioe) {    throw new org.apache.xml.serializer.utils.WrappedRuntimeException(ioe);  }}  }
class C{  private static int parseArgsAndConnect(String[] args,Boolean initServer){  argParser=new SubCommandArgumentParser(CLASS_NAME,INFO_PWPSTATE_TOOL_DESCRIPTION.get(),false);  argParser.setShortToolDescription(REF_SHORT_DESC_MANAGE_ACCOUNT.get());  argParser.setVersionHandler(new DirectoryServerVersionHandler());  BooleanArgument showUsage;  BooleanArgument trustAll;  FileBasedArgument bindPWFile;  FileBasedArgument keyStorePWFile;  FileBasedArgument trustStorePWFile;  IntegerArgument port;  StringArgument bindDN;  StringArgument bindPW;  StringArgument certNickname;  StringArgument host;  StringArgument keyStoreFile;  StringArgument keyStorePW;  StringArgument saslOption;  StringArgument targetDN;  StringArgument trustStoreFile;  StringArgument trustStorePW;  BooleanArgument verbose;  try {    host=StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(INFO_PWPSTATE_DESCRIPTION_HOST.get()).defaultValue("127.0.0.1").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(host);    port=IntegerArgument.builder(OPTION_LONG_PORT).shortIdentifier(OPTION_SHORT_PORT).description(INFO_PWPSTATE_DESCRIPTION_PORT.get()).range(1,65535).defaultValue(AdministrationConnector.DEFAULT_ADMINISTRATION_CONNECTOR_PORT).valuePlaceholder(INFO_PORT_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(port);    bindDN=StringArgument.builder(OPTION_LONG_BINDDN).shortIdentifier(OPTION_SHORT_BINDDN).description(INFO_PWPSTATE_DESCRIPTION_BINDDN.get()).valuePlaceholder(INFO_BINDDN_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(bindDN);    bindPW=StringArgument.builder(OPTION_LONG_BINDPWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_PWPSTATE_DESCRIPTION_BINDPW.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(bindPW);    bindPWFile=FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_PWPSTATE_DESCRIPTION_BINDPWFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(bindPWFile);    targetDN=StringArgument.builder("targetDN").shortIdentifier('b').description(INFO_PWPSTATE_DESCRIPTION_TARGETDN.get()).required().valuePlaceholder(INFO_TARGETDN_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(targetDN);    saslOption=StringArgument.builder(OPTION_LONG_SASLOPTION).shortIdentifier(OPTION_SHORT_SASLOPTION).description(INFO_PWPSTATE_DESCRIPTION_SASLOPTIONS.get()).multiValued().valuePlaceholder(INFO_SASL_OPTION_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(saslOption);    trustAll=trustAllArgument();    argParser.addGlobalArgument(trustAll);    keyStoreFile=StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_PWPSTATE_DESCRIPTION_KSFILE.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(keyStoreFile);    keyStorePW=StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_PWPSTATE_DESCRIPTION_KSPW.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(keyStorePW);    keyStorePWFile=FileBasedArgument.builder(OPTION_LONG_KEYSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD_FILE).description(INFO_PWPSTATE_DESCRIPTION_KSPWFILE.get()).valuePlaceholder(INFO_KEYSTORE_PWD_FILE_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(keyStorePWFile);    certNickname=StringArgument.builder("certNickname").shortIdentifier('N').description(INFO_DESCRIPTION_CERT_NICKNAME.get()).valuePlaceholder(INFO_NICKNAME_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(certNickname);    trustStoreFile=StringArgument.builder(OPTION_LONG_TRUSTSTOREPATH).shortIdentifier(OPTION_SHORT_TRUSTSTOREPATH).description(INFO_PWPSTATE_DESCRIPTION_TSFILE.get()).valuePlaceholder(INFO_TRUSTSTOREPATH_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(trustStoreFile);    trustStorePW=StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).shortIdentifier('T').description(INFO_PWPSTATE_DESCRIPTION_TSPW.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(trustStorePW);    trustStorePWFile=FileBasedArgument.builder(OPTION_LONG_TRUSTSTORE_PWD_FILE).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD_FILE).description(INFO_PWPSTATE_DESCRIPTION_TSPWFILE.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_FILE_PLACEHOLDER.get()).buildArgument();    argParser.addGlobalArgument(trustStorePWFile);    verbose=verboseArgument();    argParser.addGlobalArgument(verbose);    showUsage=showUsageArgument();    argParser.addGlobalArgument(showUsage);    argParser.setUsageArgument(showUsage,out);    HashSet<String> booleanValues=new HashSet<>(2);    booleanValues.add(INFO_MULTICHOICE_TRUE_VALUE.get().toString());    booleanValues.add(INFO_MULTICHOICE_FALSE_VALUE.get().toString());    LocalizableMessage msg=INFO_DESCRIPTION_PWPSTATE_GET_ALL.get();    new SubCommand(argParser,SC_GET_ALL,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_PASSWORD_POLICY_DN.get();    new SubCommand(argParser,SC_GET_PASSWORD_POLICY_DN,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_ACCOUNT_DISABLED_STATE.get();    new SubCommand(argParser,SC_GET_ACCOUNT_DISABLED_STATE,msg);    msg=INFO_DESCRIPTION_PWPSTATE_SET_ACCOUNT_DISABLED_STATE.get();    SubCommand sc=new SubCommand(argParser,SC_SET_ACCOUNT_DISABLED_STATE,msg);    sc.addArgument(MultiChoiceArgument.<String>builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_BOOLEAN_VALUE.get()).required().allowedValues(booleanValues).valuePlaceholder(INFO_TRUE_FALSE_PLACEHOLDER.get()).buildArgument());    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_ACCOUNT_DISABLED_STATE.get();    new SubCommand(argParser,SC_CLEAR_ACCOUNT_DISABLED_STATE,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_ACCOUNT_EXPIRATION_TIME.get();    new SubCommand(argParser,SC_GET_ACCOUNT_EXPIRATION_TIME,msg);    msg=INFO_DESCRIPTION_PWPSTATE_SET_ACCOUNT_EXPIRATION_TIME.get();    sc=new SubCommand(argParser,SC_SET_ACCOUNT_EXPIRATION_TIME,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUE.get()).valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_ACCOUNT_EXPIRATION_TIME.get();    sc=new SubCommand(argParser,SC_CLEAR_ACCOUNT_EXPIRATION_TIME,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION.get();    new SubCommand(argParser,SC_GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_PASSWORD_CHANGED_TIME.get();    new SubCommand(argParser,SC_GET_PASSWORD_CHANGED_TIME,msg);    msg=INFO_DESCRIPTION_PWPSTATE_SET_PASSWORD_CHANGED_TIME.get();    sc=new SubCommand(argParser,SC_SET_PASSWORD_CHANGED_TIME,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUE.get()).valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_PASSWORD_CHANGED_TIME.get();    sc=new SubCommand(argParser,SC_CLEAR_PASSWORD_CHANGED_TIME,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_PASSWORD_EXPIRATION_WARNED_TIME.get();    new SubCommand(argParser,SC_GET_PASSWORD_EXP_WARNED_TIME,msg);    msg=INFO_DESCRIPTION_PWPSTATE_SET_PASSWORD_EXPIRATION_WARNED_TIME.get();    sc=new SubCommand(argParser,SC_SET_PASSWORD_EXP_WARNED_TIME,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUE.get()).valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_PASSWORD_EXPIRATION_WARNED_TIME.get();    sc=new SubCommand(argParser,SC_CLEAR_PASSWORD_EXP_WARNED_TIME,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_SECONDS_UNTIL_PASSWORD_EXP.get();    new SubCommand(argParser,SC_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_SECONDS_UNTIL_PASSWORD_EXP_WARNING.get();    new SubCommand(argParser,SC_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_AUTH_FAILURE_TIMES.get();    new SubCommand(argParser,SC_GET_AUTHENTICATION_FAILURE_TIMES,msg);    msg=INFO_DESCRIPTION_PWPSTATE_ADD_AUTH_FAILURE_TIME.get();    sc=new SubCommand(argParser,SC_ADD_AUTHENTICATION_FAILURE_TIME,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUE.get()).multiValued().valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_SET_AUTH_FAILURE_TIMES.get();    sc=new SubCommand(argParser,SC_SET_AUTHENTICATION_FAILURE_TIMES,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUES.get()).multiValued().valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_AUTH_FAILURE_TIMES.get();    sc=new SubCommand(argParser,SC_CLEAR_AUTHENTICATION_FAILURE_TIMES,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_SECONDS_UNTIL_AUTH_FAILURE_UNLOCK.get();    new SubCommand(argParser,SC_GET_SECONDS_UNTIL_AUTHENTICATION_FAILURE_UNLOCK,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_REMAINING_AUTH_FAILURE_COUNT.get();    new SubCommand(argParser,SC_GET_REMAINING_AUTHENTICATION_FAILURE_COUNT,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_LAST_LOGIN_TIME.get();    new SubCommand(argParser,SC_GET_LAST_LOGIN_TIME,msg);    msg=INFO_DESCRIPTION_PWPSTATE_SET_LAST_LOGIN_TIME.get();    sc=new SubCommand(argParser,SC_SET_LAST_LOGIN_TIME,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUE.get()).valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_LAST_LOGIN_TIME.get();    sc=new SubCommand(argParser,SC_CLEAR_LAST_LOGIN_TIME,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_SECONDS_UNTIL_IDLE_LOCKOUT.get();    new SubCommand(argParser,SC_GET_SECONDS_UNTIL_IDLE_LOCKOUT,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_PASSWORD_RESET_STATE.get();    new SubCommand(argParser,SC_GET_PASSWORD_RESET_STATE,msg);    msg=INFO_DESCRIPTION_PWPSTATE_SET_PASSWORD_RESET_STATE.get();    sc=new SubCommand(argParser,SC_SET_PASSWORD_RESET_STATE,msg);    sc.addArgument(MultiChoiceArgument.<String>builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_BOOLEAN_VALUE.get()).required().allowedValues(booleanValues).valuePlaceholder(INFO_TRUE_FALSE_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_PASSWORD_RESET_STATE.get();    sc=new SubCommand(argParser,SC_CLEAR_PASSWORD_RESET_STATE,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_SECONDS_UNTIL_RESET_LOCKOUT.get();    new SubCommand(argParser,SC_GET_SECONDS_UNTIL_PASSWORD_RESET_LOCKOUT,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_GRACE_LOGIN_USE_TIMES.get();    new SubCommand(argParser,SC_GET_GRACE_LOGIN_USE_TIMES,msg);    msg=INFO_DESCRIPTION_PWPSTATE_ADD_GRACE_LOGIN_USE_TIME.get();    sc=new SubCommand(argParser,SC_ADD_GRACE_LOGIN_USE_TIME,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUE.get()).multiValued().valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_SET_GRACE_LOGIN_USE_TIMES.get();    sc=new SubCommand(argParser,SC_SET_GRACE_LOGIN_USE_TIMES,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUES.get()).multiValued().valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_GRACE_LOGIN_USE_TIMES.get();    sc=new SubCommand(argParser,SC_CLEAR_GRACE_LOGIN_USE_TIMES,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_REMAINING_GRACE_LOGIN_COUNT.get();    new SubCommand(argParser,SC_GET_REMAINING_GRACE_LOGIN_COUNT,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_PW_CHANGED_BY_REQUIRED_TIME.get();    new SubCommand(argParser,SC_GET_PASSWORD_CHANGED_BY_REQUIRED_TIME,msg);    msg=INFO_DESCRIPTION_PWPSTATE_SET_PW_CHANGED_BY_REQUIRED_TIME.get();    sc=new SubCommand(argParser,SC_SET_PASSWORD_CHANGED_BY_REQUIRED_TIME,msg);    sc.addArgument(StringArgument.builder(ARG_OP_VALUE).shortIdentifier('O').description(INFO_DESCRIPTION_OPERATION_TIME_VALUE.get()).valuePlaceholder(INFO_TIME_PLACEHOLDER.get()).buildArgument());    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_PW_CHANGED_BY_REQUIRED_TIME.get();    sc=new SubCommand(argParser,SC_CLEAR_PASSWORD_CHANGED_BY_REQUIRED_TIME,msg);    sc.setHidden(true);    msg=INFO_DESCRIPTION_PWPSTATE_GET_SECONDS_UNTIL_REQUIRED_CHANGE_TIME.get();    new SubCommand(argParser,SC_GET_SECONDS_UNTIL_REQUIRED_CHANGE_TIME,msg);    msg=INFO_DESCRIPTION_PWPSTATE_GET_PASSWORD_HISTORY.get();    new SubCommand(argParser,SC_GET_PASSWORD_HISTORY,msg);    msg=INFO_DESCRIPTION_PWPSTATE_CLEAR_PASSWORD_HISTORY.get();    sc=new SubCommand(argParser,SC_CLEAR_PASSWORD_HISTORY,msg);    sc.setHidden(true);  } catch (  ArgumentException ae) {    printWrappedText(err,ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_LOCAL_ERROR;  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (argParser.usageOrVersionDisplayed()) {    return -1;  }  targetDNString=targetDN.getValue();  if (initServer) {    DirectoryServer.getInstance();    DirectoryServer.bootstrapClient();  }  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  connectionOptions.setVersionNumber(3);  connectionOptions.setVerbose(verbose.isPresent());  if (bindPW.isPresent() && bindPWFile.isPresent()) {    printWrappedText(err,ERR_PWPSTATE_MUTUALLY_EXCLUSIVE_ARGUMENTS.get(bindPW.getLongIdentifier(),bindPWFile.getLongIdentifier()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (keyStorePW.isPresent() && keyStorePWFile.isPresent()) {    printWrappedText(err,ERR_PWPSTATE_MUTUALLY_EXCLUSIVE_ARGUMENTS.get(keyStorePW.getLongIdentifier(),keyStorePWFile.getLongIdentifier()));    return CLIENT_SIDE_PARAM_ERROR;  }  if (trustStorePW.isPresent() && trustStorePWFile.isPresent()) {    printWrappedText(err,ERR_PWPSTATE_MUTUALLY_EXCLUSIVE_ARGUMENTS.get(trustStorePW.getLongIdentifier(),trustStorePWFile.getLongIdentifier()));    return CLIENT_SIDE_PARAM_ERROR;  }  try {    String clientAlias;    if (certNickname.isPresent()) {      clientAlias=certNickname.getValue();    } else {      clientAlias=null;    }    SSLConnectionFactory sslConnectionFactory=new SSLConnectionFactory();    sslConnectionFactory.init(trustAll.isPresent(),keyStoreFile.getValue(),keyStorePW.getValue(),clientAlias,trustStoreFile.getValue(),trustStorePW.getValue());    connectionOptions.setSSLConnectionFactory(sslConnectionFactory);  } catch (  SSLConnectionException sce) {    printWrappedText(err,ERR_PWPSTATE_CANNOT_INITIALIZE_SSL.get(sce.getMessage()));    return CLIENT_SIDE_LOCAL_ERROR;  }  if (saslOption.isPresent()) {    String mechanism=null;    LinkedList<String> options=new LinkedList<>();    for (    String s : saslOption.getValues()) {      int equalPos=s.indexOf('=');      if (equalPos <= 0) {        printWrappedText(err,ERR_PWPSTATE_CANNOT_PARSE_SASL_OPTION.get(s));        return CLIENT_SIDE_PARAM_ERROR;      } else {        String name=s.substring(0,equalPos);        if (name.equalsIgnoreCase("mech")) {          mechanism=s;        } else {          options.add(s);        }      }    }    if (mechanism == null) {      printWrappedText(err,ERR_PWPSTATE_NO_SASL_MECHANISM.get());      return CLIENT_SIDE_PARAM_ERROR;    }    connectionOptions.setSASLMechanism(mechanism);    for (    String option : options) {      connectionOptions.addSASLProperty(option);    }  }  nextMessageID=new AtomicInteger(1);  try {    connection=new LDAPConnection(host.getValue(),port.getIntValue(),connectionOptions,out,err);    connection.connectToHost(bindDN.getValue(),LDAPConnectionArgumentParser.getPasswordValue(bindPW,bindPWFile,bindDN,out,err),nextMessageID);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(err,ERR_PWPSTATE_CANNOT_DETERMINE_PORT.get(port.getLongIdentifier(),ae.getMessage()));    return CLIENT_SIDE_PARAM_ERROR;  }catch (  LDAPConnectionException lce) {    LocalizableMessage message;    if (lce.getCause() != null && lce.getCause().getCause() != null && lce.getCause().getCause() instanceof SSLException) {      message=ERR_PWPSTATE_CANNOT_CONNECT_SSL.get(host.getValue(),port.getValue());    } else {      String hostPort=host.getValue() + ":" + port.getValue();      message=ERR_PWPSTATE_CANNOT_CONNECT.get(hostPort,lce.getMessage());    }    printWrappedText(err,message);    return CLIENT_SIDE_CONNECT_ERROR;  }  ldapReader=connection.getLDAPReader();  ldapWriter=connection.getLDAPWriter();  return SUCCESS;}  }
class C{  public void addSchemaElementSelectionListener(SchemaElementSelectionListener listener){  for (  SchemaElementPanel panel : panels) {    panel.addSchemaElementSelectionListener(listener);  }}  }
class C{  public CTSDJLDAPv3PersistentSearch(int retry,DN searchBaseDN,Filter searchFilter,SearchScope searchScope,ConnectionFactory factory,String... attributeNames){  super(retry,searchBaseDN,searchFilter,searchScope,factory,attributeNames);}  }
class C{  public boolean hasFeature(String feature,String version){  return getDOMImplementation().hasFeature(feature,version);}  }
class C{  public void decIDPCounter(String realm,String idpName,String counter){  if (sSAML2Svc != null) {    sSAML2Svc.decIDPCounter(realm,idpName,counter);  }}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor){  callChildVisitors(visitor,true);}  }
class C{  public int count(){  return dict.size();}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_String(){  assertNotNull(new MissingResourceException("Detail string","Class name string","Key string"));  assertNotNull(new MissingResourceException(null,"Class name string","Key string"));  assertNotNull(new MissingResourceException("Detail string",null,"Key string"));  assertNotNull(new MissingResourceException("Detail string","Class name string",null));  try {    ResourceBundle.getBundle("Non-ExistentBundle");  } catch (  MissingResourceException e) {    return;  }  fail("Failed to generate expected exception");}  }
class C{  public void processingInstruction(String arg0,String arg1) throws SAXException {  if (m_tracer != null)   super.fireEscapingEvent(arg0,arg1);}  }
class C{  @Override public void removeWrapperListener(String listener){synchronized (wrapperListenersLock) {    int n=-1;    for (int i=0; i < wrapperListeners.length; i++) {      if (wrapperListeners[i].equals(listener)) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    String results[]=new String[wrapperListeners.length - 1];    for (int i=0; i < wrapperListeners.length; i++) {      if (i != n)       results[j++]=wrapperListeners[i];    }    wrapperListeners=results;  }  fireContainerEvent("removeWrapperListener",listener);}  }
class C{  public void init(){  if (mContext == null) {    return;  }  if (mName.isEmpty()) {    mName=mContext.getPackageName();  }  if (mMode == INVALID_VALUE || (mMode != MODE_PRIVATE && mMode != MODE_WORLD_READABLE && mMode != MODE_WORLD_WRITEABLE)) {    mMode=MODE_PRIVATE;  }  mSharedPreferences=mContext.getSharedPreferences(mName,mMode);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private String readInputUntil(char... symbols){  String s="";  while (!accept(symbols)) {    s+=(char)data[index];    skip();  }  return s;}  }
class C{  public void clear(TrayPreference... modules){  for (  TrayPreference module : modules) {    if (module == null) {      continue;    }    module.clear();  }}  }
class C{  public void paintTreeBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static Artwork createArtworkFromFile(File file) throws IOException {  return AndroidArtwork.createArtworkFromFile(file);}  }
class C{  private synchronized ConnectionPool pCreatePool() throws SQLException {  if (pool != null) {    return pool;  } else {    pool=new ConnectionPool(poolProperties);    return pool;  }}  }
class C{  public void start(Context context,android.support.v4.app.Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  public void test_getPrivateKey(){  init(CLIENT);  assertNull("Not NULL for NULL parameter",manager.getPrivateKey(null));  assertNull("Not NULL for serverAlias_00 parameter",manager.getPrivateKey("serverAlias_00"));  assertNull("Not NULL for clientAlias_02 parameter",manager.getPrivateKey("clientAlias_02"));}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  public void createHTMLReports() throws ParserConfigurationException, SAXException, IOException {  Set<File> directories=getDirectories();  for (  File f : directories) {    Suite suite=new Suite(f);    if (suite.passed()) {      suitesPassed.add(suite);    } else {      suitesFailed.add(suite);    }  }  genMainPage();}  }
class C{  public Period withDays(int days){  if (days == this.days) {    return this;  }  return create(years,months,days);}  }
class C{  public void updateConfigurationObjectClass(ObjectClass oc,Schema schema){  configurationObjectClassPanel.update(oc,schema);  schemaElementPanel=configurationObjectClassPanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,configurationObjectClassPanel.getTitle().toString());}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return getService().deleteFoo(fooId);}  }
class C{  public ObjectName(String domain,String key,String value) throws MalformedObjectNameException {  Map<String,String> table=Collections.singletonMap(key,value);  construct(domain,table);}  }
class C{  private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  public final void checkAccess(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkAccess(this);  }}  }
class C{  public void ignorableWhitespace(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {}  }
class C{  @Override protected CBORParser _createParser(InputStream in,IOContext ctxt) throws IOException {  return new CBORParserBootstrapper(ctxt,in).constructParser(_factoryFeatures,_parserFeatures,_formatParserFeatures,_objectCodec,_byteSymbolCanonicalizer);}  }
class C{  private static boolean isOldTerm(int term){  return RDFTERM_FIRST_OLD <= term && term <= RDFTERM_LAST_OLD;}  }
class C{  @Deprecated public boolean isManagingFocus(){  return false;}  }
class C{  private void fireEvent(BrowserEvent.Type type){  BrowserEvent event=new BrowserEvent(this,type);  for (  BrowserEventListener listener : listeners) {    listener.processBrowserEvent(event);  }}  }
class C{  private SOAPMessage onMessage(HttpServletRequest req,HttpServletResponse servletResp,SOAPMessage message,Set partnerSourceID){  try {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("OnMessage called in receiving " + "servlet");    }    ByteArrayOutputStream bop=new ByteArrayOutputStream();    message.writeTo(bop);    ByteArrayInputStream bin=new ByteArrayInputStream(bop.toByteArray());    Document doc=XMLUtils.toDOMDocument(bin,SAMLUtils.debug);    Element root=doc.getDocumentElement();    String rootName=doc.getDocumentElement().getLocalName();    if ((rootName == null) || (rootName.length() == 0)) {      SAMLUtils.debug.error("Local name of the SOAPElement in  the" + " SOAPMessage passed seems to be missing");      return FormSOAPError(servletResp,"Client","nullInput","LocalNameMissing");    }    if (!(rootName.equals("Envelope")) || (!(root.getNamespaceURI().equals(sc.SOAP_URI)))) {      SAMLUtils.debug.error("SOAPReceiver: Could not parse " + "SOAPMessage, either root element is not Envelope" + " or invalid name space or prefix");      return FormSOAPError(servletResp,"Client","invalidElement","envelopeInvalid");    }    NodeList nl=doc.getChildNodes();    int length=nl.getLength();    if (length <= 0) {      SAMLUtils.debug.error("SOAPReceiver: Message does not have " + "body");      return FormSOAPError(servletResp,"Client","missingBody",null);    }    Node child=null;    for (int i=0; i < length; i++) {      child=(Node)nl.item(i);      if (child.getNodeType() != Node.ELEMENT_NODE) {        continue;      }      String childName=child.getLocalName();      if (childName.equals("Body")) {        break;      }    }    Element body=(Element)child;    Response resp=extractProcessRequest(req,body,partnerSourceID);    if (((Boolean)SAMLServiceManager.getAttribute(SAMLConstants.SIGN_RESPONSE)).booleanValue()) {      resp.signXML();    }    return FormMessageResponse(servletResp,resp);  } catch (  Exception e) {    SAMLUtils.debug.error("Error in processing Request",e);    return FormSOAPError(servletResp,"Server","cannotProcessRequest",null);  }}  }
class C{  public InternalSearchOperation processSearch(final SearchRequest request){  return processSearch(request,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreatecomment.class,args);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RegisterNameIdentifierResponseElement createRegisterNameIdentifierResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RegisterNameIdentifierResponseElementImpl();}  }
class C{  private void classFilePrologue(){  final int NOT_ACC_PUBLIC=0;  cw=new ClassWriter(ClassWriter.COMPUTE_MAXS + ClassWriter.COMPUTE_FRAMES);  cw.visit(Opcodes.V1_8,NOT_ACC_PUBLIC + Opcodes.ACC_FINAL + Opcodes.ACC_SUPER,className,null,superName,null);  cw.visitSource(sourceFile,null);  String invokerDesc=invokerType.toMethodDescriptorString();  mv=cw.visitMethod(Opcodes.ACC_STATIC,invokerName,invokerDesc,null,null);}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=29 * hash + (this.host != null ? this.host.hashCode() : 0);  hash=29 * hash + this.port;  return hash;}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSResponse.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSResponse.signXML: the assertion is " + "already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.RESPONSE_ID,this.getResponseID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public static void redirectToXui(HttpServletRequest request,String redirectRealm,String xuiHash){  String deploymentUri=InjectorHolder.getInstance(BaseURLProviderFactory.class).get(redirectRealm).getContextPath();  String redirect=MessageFormat.format(XUI_CONSOLE_BASE_PAGE,deploymentUri,xuiHash);  RequestContext rc=RequestManager.getRequestContext();  try {    rc.getResponse().sendRedirect(redirect);    throw new CompleteRequestException();  } catch (  IOException e) {  }}  }
class C{  public static XMPMeta parseFromString(String packet) throws XMPException {  return parseFromString(packet,null);}  }
class C{  protected void handleSESSION_DELTA(SessionMessage msg,Member sender) throws IOException, ClassNotFoundException {  counterReceive_EVT_SESSION_DELTA++;  byte[] delta=msg.getSession();  DeltaSession session=(DeltaSession)findSession(msg.getSessionID());  if (session != null) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("deltaManager.receiveMessage.delta",getName(),msg.getSessionID()));    }    session.lock();    try {      DeltaRequest dreq=deserializeDeltaRequest(session,delta);      dreq.execute(session,isNotifyListenersOnReplication());      session.setPrimarySession(false);    }  finally {      session.unlock();    }  }}  }
class C{  public int hashCode(){  return getKey().hashCode();}  }
class C{  public PdfFormXObject createFormXObject(Color foreground,float moduleSide,PdfDocument document){  PdfFormXObject xObject=new PdfFormXObject((Rectangle)null);  Rectangle rect=placeBarcode(new PdfCanvas(xObject,document),foreground,moduleSide);  xObject.setBBox(new PdfArray(rect));  return xObject;}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public static String filter(String message){  if (message == null)   return (null);  char content[]=new char[message.length()];  message.getChars(0,message.length(),content,0);  StringBuilder result=new StringBuilder(content.length + 50);  for (int i=0; i < content.length; i++) {switch (content[i]) {case '<':      result.append("&lt;");    break;case '>':  result.append("&gt;");break;case '&':result.append("&amp;");break;case '"':result.append("&quot;");break;default :result.append(content[i]);}}return (result.toString());}  }
class C{  public static MethodType canonicalize(MethodType mt,int howRet,int howArgs){  Class<?>[] ptypes=mt.ptypes();  Class<?>[] ptc=MethodTypeForm.canonicalizeAll(ptypes,howArgs);  Class<?> rtype=mt.returnType();  Class<?> rtc=MethodTypeForm.canonicalize(rtype,howRet);  if (ptc == null && rtc == null) {    return null;  }  if (rtc == null)   rtc=rtype;  if (ptc == null)   ptc=ptypes;  return MethodType.makeImpl(rtc,ptc,true);}  }
class C{  public BigInteger nextBigInteger() throws GSERException {  if (!hasNext(GSER_INTEGER)) {    LocalizableMessage msg=ERR_GSER_NO_VALID_INTEGER.get(gserValue.substring(pos,length));    throw new GSERException(msg);  }  return new BigInteger(next(GSER_INTEGER));}  }
class C{  protected void paintTrack(SynthContext context,Graphics g,Rectangle trackBounds){  SynthLookAndFeel.updateSubregion(context,g,trackBounds);  context.getPainter().paintScrollBarTrackBackground(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,scrollbar.getOrientation());  context.getPainter().paintScrollBarTrackBorder(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,scrollbar.getOrientation());}  }
class C{  public void clear(){  cache.evictAll();}  }
class C{  public boolean isEditable(){  return true;}  }
class C{  private JapaneseEra(int eraValue,LocalDate since){  this.eraValue=eraValue;  this.since=since;}  }
class C{  public void unread(char cbuf[]) throws IOException {  unread(cbuf,0,cbuf.length);}  }
class C{  public ACTIVITY_REQUIRED(){  this("");}  }
class C{  public ChatsPresenter(String conversationId,String userObjectId,@NonNull ChatsDataSource chatsRepository,@NonNull ConversationsDataSource conversationsRepository,@NonNull ChatsContract.View chatsView){  mConversationId=conversationId;  mUserObjectId=userObjectId;  mCurrentUser=SupportUser.getCurrentUser();  mChatsRepository=checkNotNull(chatsRepository,"chatsRepository cannot be null");  mConversationsRepository=checkNotNull(conversationsRepository,"chatsRepository cannot be null");  mChatsView=checkNotNull(chatsView,"chatsView cannot be null!");  mChatsView.setPresenter(this);}  }
class C{  public int hashCode(){  return this.address.hashCode();}  }
class C{  public SubCommand(SubCommandArgumentParser parser,String name,LocalizableMessage description) throws ArgumentException {  this(parser,name,false,0,0,null,description);}  }
class C{  public FrameBodyTSOA(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void pause(){  setPaused(true);}  }
class C{  public void paintCurrentValueBackground(Graphics g,Rectangle bounds,boolean hasFocus){  Color t=g.getColor();  if (comboBox.isEnabled())   g.setColor(DefaultLookup.getColor(comboBox,this,"ComboBox.background",null)); else   g.setColor(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledBackground",null));  g.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);  g.setColor(t);}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof RemoteObject) {    if (ref == null) {      return obj == this;    } else {      return ref.remoteEquals(((RemoteObject)obj).ref);    }  } else   if (obj != null) {    return obj.equals(this);  } else {    return false;  }}  }
class C{  protected void processMaxIdleSwaps(){  if (!getState().isAvailable() || maxIdleSwap < 0)   return;  Session sessions[]=findSessions();  if (maxIdleSwap >= 0) {    for (int i=0; i < sessions.length; i++) {      StandardSession session=(StandardSession)sessions[i];synchronized (session) {        if (!session.isValid())         continue;        int timeIdle=(int)(session.getIdleTimeInternal() / 1000L);        if (timeIdle >= maxIdleSwap && timeIdle >= minIdleSwap) {          if (session.accessCount != null && session.accessCount.get() > 0) {            continue;          }          if (log.isDebugEnabled())           log.debug(sm.getString("persistentManager.swapMaxIdle",session.getIdInternal(),Integer.valueOf(timeIdle)));          try {            swapOut(session);          } catch (          IOException e) {          }        }      }    }  }}  }
class C{  private void addDirtyRegion0(Container c,int x,int y,int w,int h){  if ((w <= 0) || (h <= 0) || (c == null)) {    return;  }  if ((c.getWidth() <= 0) || (c.getHeight() <= 0)) {    return;  }  if (extendDirtyRegion(c,x,y,w,h)) {    return;  }  Component root=null;  for (Container p=c; p != null; p=p.getParent()) {    if (!p.isVisible() || (p.getPeer() == null)) {      return;    }    if ((p instanceof Window) || (p instanceof Applet)) {      if (p instanceof Frame && (((Frame)p).getExtendedState() & Frame.ICONIFIED) == Frame.ICONIFIED) {        return;      }      root=p;      break;    }  }  if (root == null)   return;synchronized (this) {    if (extendDirtyRegion(c,x,y,w,h)) {      return;    }    dirtyComponents.put(c,new Rectangle(x,y,w,h));  }  scheduleProcessingRunnable(SunToolkit.targetToAppContext(c));}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  byte[] iv=generateDerivedKey(IV_MATERIAL,ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),iv,0,ivSize);}  }
class C{  public LoginContext createLoginContext(final AMLoginContext context,final Subject subject,final String configName,final boolean isPureJAAS,final Configuration configuration) throws LoginException {  if (configName == null) {    throw new LoginException("Config name was null when creating LoginContext");  }  DSAMECallbackHandler dsameCallbackHandler=new DSAMECallbackHandler(context,isPureJAAS);  if (isPureJAAS) {    if (subject != null) {      return new LoginContextWrapper(new javax.security.auth.login.LoginContext(configName,subject,dsameCallbackHandler));    } else {      return new LoginContextWrapper(new javax.security.auth.login.LoginContext(configName,dsameCallbackHandler));    }  } else {    DEBUG.message("Using non pure jaas mode.");    AppConfigurationEntry[] entries=configuration.getAppConfigurationEntry(configName);    if (subject != null) {      return new com.sun.identity.authentication.jaas.LoginContext(entries,subject,dsameCallbackHandler);    } else {      return new com.sun.identity.authentication.jaas.LoginContext(entries,dsameCallbackHandler);    }  }}  }
class C{  protected ISPermission(ProtectionDomain pd){  super("ISPermission");  if (debug.messageEnabled()) {    debug.message("ISPermission(protectionDomain) constructor " + "called ");  }  this.protectionDomain=pd;}  }
class C{  public void test_twoJar_diff_directGetResourceAsStream() throws Exception {  test_directGetResourceAsStream(Configuration.TWO_JAR,"test2/Resource2.txt","Who doesn't like a good biscuit?\n");}  }
class C{  public FileLockInterruptionException(){}  }
class C{  public NameAlreadyExistsException(String rbName,String errorCode,Object[] args,String name,int type){  super(rbName,errorCode,args,null);  this.name=name;  this.type=type;  fillInStackTrace();}  }
class C{  public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulonglong",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_ulonglong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public List<Field> removePageTokenFromFields(Iterable<Field> fields,MethodConfig methodConfig){  List<Field> newFields=new ArrayList<>();  for (  Field field : fields) {    if (methodConfig.isPageStreaming() && field.equals(methodConfig.getPageStreaming().getRequestTokenField())) {      continue;    }    newFields.add(field);  }  return newFields;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthViewportUI();}  }
class C{  public boolean equals(Object o){  return map.equals(o);}  }
class C{  protected final void copyAttribute(int nodeID,int exptype,SerializationHandler handler) throws SAXException {  final ExtendedType extType=m_extendedTypes[exptype];  final String uri=extType.getNamespace();  final String localName=extType.getLocalName();  String prefix=null;  String qname=null;  int dataIndex=_dataOrQName(nodeID);  int valueIndex=dataIndex;  if (dataIndex <= 0) {    int prefixIndex=m_data.elementAt(-dataIndex);    valueIndex=m_data.elementAt(-dataIndex + 1);    qname=m_valuesOrPrefixes.indexToString(prefixIndex);    int colonIndex=qname.indexOf(':');    if (colonIndex > 0) {      prefix=qname.substring(0,colonIndex);    }  }  if (uri.length() != 0) {    handler.namespaceAfterStartElement(prefix,uri);  }  String nodeName=(prefix != null) ? qname : localName;  String nodeValue=(String)m_values.elementAt(valueIndex);  handler.addAttribute(nodeName,nodeValue);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ProxyInfoConfirmationDataElement createProxyInfoConfirmationDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ProxyInfoConfirmationDataElementImpl();}  }
class C{  public MethodDescriptor(Method method,ParameterDescriptor parameterDescriptors[]){  setName(method.getName());  setMethod(method);  this.parameterDescriptors=(parameterDescriptors != null) ? parameterDescriptors.clone() : null;}  }
class C{  @Override public void flushContent(){  if (lastAddedRowGroups == null || lastAddedRowGroups.isEmpty())   return;  int firstRow=lastAddedRowGroups.get(0).startRow;  int lastRow=lastAddedRowGroups.get(lastAddedRowGroups.size() - 1).finishRow;  List<IElement> toRemove=new ArrayList<>();  for (  IElement cell : childElements) {    if (((Cell)cell).getRow() >= firstRow && ((Cell)cell).getRow() <= lastRow) {      toRemove.add(cell);    }  }  childElements.removeAll(toRemove);  for (int i=0; i <= lastRow - firstRow; i++) {    rows.remove(firstRow - rowWindowStart);  }  rowWindowStart=lastAddedRowGroups.get(lastAddedRowGroups.size() - 1).getFinishRow() + 1;  lastAddedRowGroups=null;}  }
class C{  public final void writeFloat(float v) throws IOException {  writeInt(Float.floatToIntBits(v));}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(this.value);}  }
class C{  public Directive(Element elem) throws DiscoveryException {  String tag=null;  if (elem == null) {    DiscoUtils.debug.message("Directive(Element): null input.");    throw new DiscoveryException(DiscoUtils.bundle.getString("nullInput"));  }  if ((tag=elem.getLocalName()) == null) {    DiscoUtils.debug.message("Directive(Element): wrong input");    throw new DiscoveryException(DiscoUtils.bundle.getString("wrongInput"));  }  if (tag.equals(AUTHENTICATE_REQUESTER)) {    type=AUTHENTICATE_REQUESTER;    setDescIDRefs(elem);  } else   if (tag.equals(AUTHORIZE_REQUESTER)) {    type=AUTHORIZE_REQUESTER;    setDescIDRefs(elem);  } else   if (tag.equals(AUTHENTICATE_SESSION_CONTEXT)) {    type=AUTHENTICATE_SESSION_CONTEXT;    setDescIDRefs(elem);  } else   if (tag.equals(ENCRYPT_RESOURCEID)) {    type=ENCRYPT_RESOURCEID;    setDescIDRefs(elem);  } else   if (tag.equals(GENERATE_BEARER_TOKEN)) {    type=GENERATE_BEARER_TOKEN;    setDescIDRefs(elem);  } else {    if (DiscoUtils.debug.messageEnabled()) {      DiscoUtils.debug.message("Directive(Element): not supported:" + tag);    }    throw new DiscoveryException(DiscoUtils.bundle.getString("directiveNotSupported"));  }}  }
class C{  private String onExecute(Context context,String id,Map<String,String> params) throws ExecutionException, JsonProcessingException, IOException, ScriptException {  String name=params.get("name");  JsonValue config;  try {    config=connectionFactory.getConnection().read(context,Requests.newReadRequest("config/" + name)).getContent();  } catch (  ResourceException e) {    throw new ExecutionException("Error obtaining named config: '" + name + "'",e);  }  JsonValue invokeContext=config.get(INVOKE_CONTEXT);  return startTaskScanJob(context,"REST",name,invokeContext);}  }
class C{  public static void copy(InputStream source,OutputStream dest,long amount) throws IOException {  byte[] buf=new byte[8192];  long copied=0;  while (copied < amount) {    int toRead=8192;    if ((amount - copied) < 8192) {      toRead=(int)(amount - copied);    }    int read=source.read(buf,0,toRead);    if (read == -1) {      throw new IOException("Inputstream has to continue for another " + (amount - copied) + " bytes.");    }    dest.write(buf,0,read);    copied+=read;  }}  }
class C{  public PendingInstallShortcutInfo(LauncherActivityInfoCompat info,Context context){  this.data=null;  mContext=context;  activityInfo=info;  user=info.getUser();  launchIntent=AppInfo.makeLaunchIntent(context,info,user);  label=info.getLabel().toString();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null)   return false;  if (!super.equals(obj))   return false;  DecimalFormat other=(DecimalFormat)obj;  return ((posPrefixPattern == other.posPrefixPattern && positivePrefix.equals(other.positivePrefix)) || (posPrefixPattern != null && posPrefixPattern.equals(other.posPrefixPattern))) && ((posSuffixPattern == other.posSuffixPattern && positiveSuffix.equals(other.positiveSuffix)) || (posSuffixPattern != null && posSuffixPattern.equals(other.posSuffixPattern))) && ((negPrefixPattern == other.negPrefixPattern && negativePrefix.equals(other.negativePrefix)) || (negPrefixPattern != null && negPrefixPattern.equals(other.negPrefixPattern)))&& ((negSuffixPattern == other.negSuffixPattern && negativeSuffix.equals(other.negativeSuffix)) || (negSuffixPattern != null && negSuffixPattern.equals(other.negSuffixPattern)))&& multiplier == other.multiplier && groupingSize == other.groupingSize && decimalSeparatorAlwaysShown == other.decimalSeparatorAlwaysShown && parseBigDecimal == other.parseBigDecimal && useExponentialNotation == other.useExponentialNotation && (!useExponentialNotation || minExponentDigits == other.minExponentDigits) && maximumIntegerDigits == other.maximumIntegerDigits && minimumIntegerDigits == other.minimumIntegerDigits && maximumFractionDigits == other.maximumFractionDigits && minimumFractionDigits == other.minimumFractionDigits && roundingMode == other.roundingMode && symbols.equals(other.symbols);}  }
class C{  public FSSPAuthenticationContextInfo(String authenticationContext,int authenticationLevel) throws FSException {  setAuthenticationContext(authenticationContext);  setAuthenticationLevel(authenticationLevel);}  }
class C{  public static List<Foo> findByUuid(java.lang.String uuid){  return getPersistence().findByUuid(uuid);}  }
class C{  public FacebookAuthorizationException(Throwable throwable){  super(throwable);}  }
class C{  public static FontProgram createRegisteredFont(String fontName,int style) throws java.io.IOException {  return fontRegisterProvider.getFont(fontName,style);}  }
class C{  private void sleepWhileUpdatePropagates(int millis) throws InterruptedException {  Thread.sleep(millis);}  }
class C{  public void computeXAxis(){  xStops.numStops=visibleXRange;  if (xStops.stops.length < visibleXRange) {    xStops.stops=new float[visibleXRange];  }  int value=(int)Math.ceil(viewportRect.left);  for (int i=0; i < visibleXRange; i++, value+=xInterval) {    xStops.stops[i]=value;  }}  }
class C{  public static List<Foo> findAll(){  return getPersistence().findAll();}  }
class C{  public static String mapToXMLString(Map envMap){  StringBuilder xmlSB=new StringBuilder(1000);  Set keySet=envMap.keySet();  Iterator keyIter=keySet.iterator();  while (keyIter.hasNext()) {    String name=(String)keyIter.next();    Set values=(Set)envMap.get(name);    xmlSB.append(attributeValuePairToXMLString(name,values));  }  return xmlSB.toString();}  }
class C{  public static AttributeSet unmodifiableView(AttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiableAttributeSet(attributeSet);}  }
class C{  public PackedColorModel(ColorSpace space,int bits,int[] colorMaskArray,int alphaMask,boolean isAlphaPremultiplied,int trans,int transferType){  super(bits,PackedColorModel.createBitsArray(colorMaskArray,alphaMask),space,(alphaMask == 0 ? false : true),isAlphaPremultiplied,trans,transferType);  if (bits < 1 || bits > 32) {    throw new IllegalArgumentException("Number of bits must be between" + " 1 and 32.");  }  maskArray=new int[numComponents];  maskOffsets=new int[numComponents];  scaleFactors=new float[numComponents];  for (int i=0; i < numColorComponents; i++) {    DecomposeMask(colorMaskArray[i],i,space.getName(i));  }  if (alphaMask != 0) {    DecomposeMask(alphaMask,numColorComponents,"alpha");    if (nBits[numComponents - 1] == 1) {      transparency=Transparency.BITMASK;    }  }}  }
class C{  protected void paintTrack(SynthContext context,Graphics g,Rectangle trackBounds){  int orientation=slider.getOrientation();  SynthLookAndFeel.updateSubregion(context,g,trackBounds);  context.getPainter().paintSliderTrackBackground(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,orientation);  context.getPainter().paintSliderTrackBorder(context,g,trackBounds.x,trackBounds.y,trackBounds.width,trackBounds.height,orientation);}  }
class C{  private void sync(){  int s=state;  if ((s & RELOAD_IMAGE_FLAG) != 0) {    refreshImage();  }  s=state;  if ((s & RELOAD_FLAG) != 0) {synchronized (this) {      state=(state | RELOAD_FLAG) ^ RELOAD_FLAG;    }    setPropertiesFromAttributes();  }}  }
class C{  protected String expireSessions(ContextName cn,HttpServletRequest req,StringManager smClient){  int idle=-1;  String idleParam=req.getParameter("idle");  if (idleParam != null) {    try {      idle=Integer.parseInt(idleParam);    } catch (    NumberFormatException e) {      log("Could not parse idle parameter to an int: " + idleParam);    }  }  return sessions(cn,idle,smClient);}  }
class C{  public GridLayout(){  this(1,0,0,0);}  }
class C{  public OpendsCertificateException(X509Certificate[] chain,CertificateException cause){  super(cause);  this.chain=chain;}  }
class C{  public boolean undo(ObserverItem p_observers){  if (!undo_list.undo(null,null))   return false;  restore_component_arr_from_undo_list(p_observers);  return true;}  }
class C{  public final void testReadbyteArrayintint03() throws IOException {  assertTrue(MY_MESSAGE_LEN % (CHUNK_SIZE + 1) != 0);  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      for (int i=0; i < MY_MESSAGE_LEN / (CHUNK_SIZE + 1); i++) {        assertTrue("retval1",dis.read(bArray,i * (CHUNK_SIZE + 1),CHUNK_SIZE + 1) == CHUNK_SIZE + 1);      }      assertTrue("retval2",dis.read(bArray,MY_MESSAGE_LEN / (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1),MY_MESSAGE_LEN % (CHUNK_SIZE + 1)) == (MY_MESSAGE_LEN % (CHUNK_SIZE + 1)));      assertTrue("bArray",Arrays.equals(myMessage,bArray));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private void indentSmart() throws IOException {  if (!indented) {    indent();    indented=true;  }}  }
class C{  public synchronized void dragExit(DropTargetEvent dte){  isDraggingInside=false;  if (!active)   return;  if (dtListener != null && active)   dtListener.dragExit(dte);  clearAutoscroll();}  }
class C{  public XMLElement newCollapsedElement(String name) throws Exception {  return newElement(name,null,null,true);}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  attrName=domesticAttr.getNodeName();  assertEquals("attrName","dmstc:domestic",attrName);}  }
class C{  private static String propNametoCamlCase(String hyphenated){  String[] components=hyphenated.split("\\-");  StringBuilder buffer=new StringBuilder();  for (  String component : components) {    if (ABBREVIATIONS.contains(component)) {      buffer.append(component.toUpperCase());    } else {      buffer.append(component.substring(0,1).toUpperCase()).append(component.substring(1));    }  }  return buffer.toString();}  }
class C{  @SuppressWarnings("unchecked") public synchronized E lastElement(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  boolean removeIndexEntry(String resourceName,String policyName){  Iterator iter=topLevelEntries.iterator();  boolean processed=false;  while (!processed && (iter.hasNext())) {    ResourceIndexEntry resourceIndexEntry=(ResourceIndexEntry)iter.next();    if (resourceIndexEntry.removeIndexEntry(resourceType,resourceName,policyName)) {      processed=true;    }  }  return processed;}  }
class C{  public StatementType statementType(){  return statementType;}  }
class C{  private void clearRegistryForComponent(WXComponent component){  WXComponent removedComponent=mRegistry.remove(component.getDomObject().ref);  if (removedComponent != null) {    removedComponent.removeAllEvent();    removedComponent.removeStickyStyle();  }  if (component instanceof WXVContainer) {    WXVContainer container=(WXVContainer)component;    int count=container.childCount();    for (int i=count - 1; i >= 0; --i) {      clearRegistryForComponent(container.getChild(i));    }  }}  }
class C{  private void adjustSizeAndCollectElements(final Node<T> node,Collection<? super T> values){  if (node.element != null) {    if (values != null) {      values.add(node.element);    }    node.element=null;    size--;  }  Node<T> child=node.child;  while (child != null) {    final Node<T> next=child.next;    adjustSizeAndCollectElements(child,values);    child=next;  }  node.parent=null;  node.child=null;  node.previous=null;  node.next=null;  ditCacheMap.remove(node.dn);}  }
class C{  public RedirectException(String message){  super(message);}  }
class C{  static String escapeStringForASCII(String s){  String out="";  char[] cArray=s.toCharArray();  for (int i=0; i < cArray.length; i++) {    char c=cArray[i];    if (c > 127) {      out+="\\U";      String hex=Integer.toHexString(c);      while (hex.length() < 4)       hex="0" + hex;      out+=hex;    } else     if (c == '\\') {      out+="\\\\";    } else     if (c == '\"') {      out+="\\\"";    } else     if (c == '\b') {      out+="\\b";    } else     if (c == '\n') {      out+="\\n";    } else     if (c == '\r') {      out+="\\r";    } else     if (c == '\t') {      out+="\\t";    } else {      out+=c;    }  }  return out;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS03.class,args);}  }
class C{  public static DataProviderID newUserID(final String name){  return new DataProviderID(name,false);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterCreate(Context context,CreateRequest request,RequestHandler next){  try {    final JsonValue jsonValue=request.getContent();    final Subject callingSubject=contextHelper.getSubject(context);    final String realm=contextHelper.getRealm(context);    retrieveResourceType(jsonValue,callingSubject,realm);  } catch (  EntitlementException eE) {    debug.error("Error filtering policy create CREST request",eE);    return resourceErrorHandler.handleError(context,request,eE).asPromise();  }catch (  ResourceException rE) {    debug.error("Error filtering policy create CREST request",rE);    return rE.asPromise();  }  return transform(next.handleCreate(context,request));}  }
class C{  public boolean isMenuComponent(Component c){  if (c == this)   return true;  if (c instanceof JPopupMenu) {    JPopupMenu comp=(JPopupMenu)c;    if (comp == this.getPopupMenu())     return true;  }  int ncomponents=this.getMenuComponentCount();  Component[] component=this.getMenuComponents();  for (int i=0; i < ncomponents; i++) {    Component comp=component[i];    if (comp == c)     return true;    if (comp instanceof JMenu) {      JMenu subMenu=(JMenu)comp;      if (subMenu.isMenuComponent(c))       return true;    }  }  return false;}  }
class C{  public boolean isScriptFriendly(){  return scriptFriendly;}  }
class C{  public void reuse(Tag handler){synchronized (this) {    if (current < (handlers.length - 1)) {      handlers[++current]=handler;      return;    }  }  doRelease(handler);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public long insert(String dataFilterName,String dataFilterDisplayName,Long filterOnDataTypeID,Long compareWithDataTypeID){  if (dataFilterName == null || dataFilterDisplayName == null || filterOnDataTypeID == null || compareWithDataTypeID == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_DATAFILTERNAME,dataFilterName);  initialValues.put(KEY_DATAFILTERDISPLAYNAME,dataFilterDisplayName);  initialValues.put(KEY_FILTERONDATATYPEID,filterOnDataTypeID);  initialValues.put(KEY_COMPAREWITHDATATYPEID,compareWithDataTypeID);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  public Builder withMessageDispatcherSize(long maxSize){  config.setMessageDispatcherSize(maxSize);  return this;}  }
class C{  public static DNS decode(String expr,EnumBindRuleType type) throws AciException {  if (!Pattern.matches(valuesRegExGroup,expr)) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_DNS_EXPRESSION.get(expr);    throw new AciException(message);  }  List<String> dns=new LinkedList<>();  int valuePos=1;  Pattern valuePattern=Pattern.compile(valueRegex);  Matcher valueMatcher=valuePattern.matcher(expr);  while (valueMatcher.find()) {    String hn=valueMatcher.group(valuePos);    String[] hnArray=hn.split("\\.",-1);    for (int i=1, n=hnArray.length; i < n; i++) {      if ("*".equals(hnArray[i])) {        LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_DNS_WILDCARD.get(expr);        throw new AciException(message);      }    }    if (!hn.contains("*")) {      try {        for (        InetAddress addr : InetAddress.getAllByName(hn)) {          String canonicalName=addr.getCanonicalHostName();          if (!hn.equalsIgnoreCase(canonicalName)) {            if ("localhost".equalsIgnoreCase(hn) && !dns.contains(canonicalName)) {              dns.add(canonicalName);              logger.warn(WARN_ACI_LOCALHOST_DOESNT_MATCH_CANONICAL_VALUE,expr,hn,canonicalName);            } else {              logger.warn(WARN_ACI_HOSTNAME_DOESNT_MATCH_CANONICAL_VALUE,expr,hn,addr.getHostAddress(),addr.getCanonicalHostName());            }          }        }      } catch (      Exception e) {        logger.traceException(e);        logger.warn(WARN_ACI_ERROR_CHECKING_CANONICAL_HOSTNAME,hn,expr,getExceptionMessage(e));      }    }    dns.add(hn);  }  return new DNS(dns,type);}  }
class C{  public FSBrowserArtifactConsumerHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,String relayState,FSRequest samlReq){  super(request,response,idpDescriptor,idpEntityId,false,null,relayState);  this.samlRequest=samlReq;  if (FSServiceUtils.getMinorVersion(idpDescriptor.getProtocolSupportEnumeration()) == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    samlRequest.setMinorVersion(IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION);  } else {    samlRequest.setMinorVersion(IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION);  }}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes * 8;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  public MemoryCacheImageInputStream(InputStream stream){  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  this.stream=stream;  disposerRecord=new StreamDisposerRecord(cache);  if (getClass() == MemoryCacheImageInputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  public IfPresentTag(){  attributeType=null;  assertionValue=null;}  }
class C{  @Activate @Modified protected void activate(ComponentContext context){  JsonValue config=new JsonValue(enhancedConfig.getConfiguration(context));  try {    mappings=initMappings(config);  } catch (  JsonValueException jve) {    throw new ComponentException("Configuration error: " + jve.getMessage(),jve);  }}  }
class C{  private void writeDataToFile(File file) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  try {    fos.write(CONTENT_AS_BYTES);  }  finally {    fos.close();  }}  }
class C{  protected String renderSize(long size){  long leftSide=size / 1024;  long rightSide=(size % 1024) / 103;  if ((leftSide == 0) && (rightSide == 0) && (size > 0))   rightSide=1;  return ("" + leftSide + "."+ rightSide+ " kb");}  }
class C{  public void test_formatLjava_lang_ObjectLjava_lang_StringBufferLjava_text_FieldPosition(){  try {    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Locale.US);    Date current=new Date();    StringBuffer toAppend=new StringBuffer();    FieldPosition fp=new FieldPosition(DateFormat.YEAR_FIELD);    StringBuffer sb=format.format(current,toAppend,fp);    SimpleDateFormat sdf=new SimpleDateFormat("M/d/yy h:mm a",Locale.US);    assertTrue("Incorrect date format",sdf.format(current).equals(sb.toString()));    assertTrue("Incorrect beginIndex of filed position",fp.getBeginIndex() == sb.lastIndexOf("/") + 1);    assertTrue("Incorrect endIndex of filed position",fp.getEndIndex() == sb.lastIndexOf("/") + 3);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  private synchronized MonitorNotification updateNotifications(CounterMonitorObservedObject o){  MonitorNotification n=null;  if (!o.getEventAlreadyNotified()) {    if (((Number)o.getDerivedGauge()).longValue() >= o.getThreshold().longValue()) {      if (notify) {        n=new MonitorNotification(THRESHOLD_VALUE_EXCEEDED,this,0,0,"",null,null,null,o.getThreshold());      }      if (!differenceMode) {        o.setEventAlreadyNotified(true);      }    }  } else {    if (MONITOR_LOGGER.isLoggable(Level.FINER)) {      final StringBuilder strb=new StringBuilder().append("The notification:").append("\n\tNotification observed object = ").append(o.getObservedObject()).append("\n\tNotification observed attribute = ").append(getObservedAttribute()).append("\n\tNotification threshold level = ").append(o.getThreshold()).append("\n\tNotification derived gauge = ").append(o.getDerivedGauge()).append("\nhas already been sent");      MONITOR_LOGGER.logp(Level.FINER,CounterMonitor.class.getName(),"updateNotifications",strb.toString());    }  }  return n;}  }
class C{  public AccountLockoutInfo invalidPasswd(AMIdentity amIdentity,AccountLockoutInfo acInfo){  return invalidPasswdEx(amIdentity,acInfo);}  }
class C{  public BarcodePDF417(){  setDefaultParameters();}  }
class C{  private static <T extends JdbcInterceptor>T findInterceptor(Object proxy,Class<T> clazz){  JdbcInterceptor interceptor=(JdbcInterceptor)Proxy.getInvocationHandler(proxy);  while (interceptor != null) {    if (clazz.isInstance(interceptor)) {      return clazz.cast(interceptor);    }    interceptor=interceptor.getNext();  }  return null;}  }
class C{  public UnsupportedDigestAlgorithmException(){  super();}  }
class C{  public boolean addAudience(java.lang.String audience){  if ((audience != null) && !(audience.length() == 0)) {    _audience.add(audience);    return true;  } else {    return false;  }}  }
class C{  public int compare(String s1,String s2){  if (s1 == null) {    if (s2 != null) {      return -1;    } else {      return 0;    }  } else {    if (s2 == null) {      return 1;    }  }  String var1=s1;  String value1=null;  String var2=s2;  String value2=null;  int index1=s1.indexOf(QUERY_PARAMETER_VALUE_DELIMITER);  int index2=s2.indexOf(QUERY_PARAMETER_VALUE_DELIMITER);  if (index1 != -1) {    var1=s1.substring(0,index1);    value1=s1.substring(index1);  }  if (index2 != -1) {    var2=s2.substring(0,index2);    value2=s2.substring(index2);  }  int result=var1.compareTo(var2);  if (result == 0) {    if (value1 == null) {      if (value2 != null) {        result=-1;      } else {        result=0;      }    } else {      if (value2 == null) {        result=1;      } else {        result=value1.compareTo(value2);      }    }  }  if (WILDCARD.equals(var1)) {    return 1;  }  if (WILDCARD.equals(var2)) {    return -1;  }  return result;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public BindOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,String protocolVersion,DN bindDN,String saslMechanism,ByteString saslCredentials){  super(clientConnection,operationID,messageID,requestControls);  this.protocolVersion=protocolVersion;  this.authType=AuthenticationType.SASL;  this.bindDN=bindDN;  this.saslMechanism=saslMechanism;  this.saslCredentials=saslCredentials;  rawBindDN=computeRawBindDN(bindDN);  cancelResult=getBindCancelResult();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.WWW_AUTHENTICATE);    WWWAuthenticate wwwAuthenticate=new WWWAuthenticate();    super.parse(wwwAuthenticate);    return wwwAuthenticate;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public void resendTopDownLeftRight(ImageProducer ip){  ip.requestTopDownLeftRightResend(this);}  }
class C{  public AnnotationTypeMismatchException(Method element,String foundType){  super("The annotation element " + element + " doesn't match the type "+ foundType);  this.element=element;  this.foundType=foundType;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr createdAttr;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      createdAttr=doc.createAttribute("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void addResourceResult(ResourceResult resourceResult,ResourceName resourceComparator) throws PolicyException {  if (!this.isSuperResourceResultOf(resourceResult,resourceComparator)) {    String[] objs={this.resourceName,resourceResult.resourceName};    throw new PolicyException(ResBundleUtils.rbName,"invalid_sub_resourceresult",objs,null);  } else {    Iterator resourceResultIter=resourceResults.iterator();    boolean directChild=true;    while (resourceResultIter.hasNext()) {      ResourceResult rResult=(ResourceResult)resourceResultIter.next();      if (rResult.isSuperResourceResultOf(resourceResult,resourceComparator)) {        rResult.addResourceResult(resourceResult,resourceComparator);        directChild=false;        break;      }    }    if (directChild) {      Set childrenToBeMoved=new HashSet();      Iterator rrIter=resourceResults.iterator();      while (rrIter.hasNext()) {        ResourceResult rResult=(ResourceResult)rrIter.next();        if (resourceResult.isSuperResourceResultOf(rResult,resourceComparator)) {          childrenToBeMoved.add(rResult);        }      }      resourceResults.removeAll(childrenToBeMoved);      resourceResult.resourceResults.addAll(childrenToBeMoved);      resourceResults.add(resourceResult);    }  }  long rrTtl=resourceResult.getTimeToLive();  if (rrTtl < timeToLive) {    timeToLive=rrTtl;  }  advicesAreSet=advicesAreSet || resourceResult.hasAdvices();  this.stringForm=null;  this.xmlForm=null;}  }
class C{  private void inintView(){  mView=(ImageView)findViewById(R.id.splash_image);  mLoadingProgress=(ProgressBar)findViewById(R.id.pb_loading);}  }
class C{  public void beginMonitoringOf(final InetSocketAddress socketAddress){  candidateSockets.beginMonitoringSocketIdentifier(socketAddress,fromInet4SocketAddress(socketAddress));}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void registerTo(RootCfg rootConfiguration) throws ConfigException {  auhtzFilterManager.registerTo(rootConfiguration);  rootConfiguration.addHTTPEndpointAddListener(this);  rootConfiguration.addHTTPEndpointDeleteListener(this);  for (  String endpointName : rootConfiguration.listHTTPEndpoints()) {    final HTTPEndpointCfg configuration=rootConfiguration.getHTTPEndpoint(endpointName);    configuration.addChangeListener(this);    if (configuration.isEnabled()) {      final ConfigChangeResult result=applyConfigurationAdd(configuration);      if (!result.getResultCode().equals(ResultCode.SUCCESS)) {        LOGGER.error(result.getMessages().get(0));      }    }  }}  }
class C{  public boolean elementAvailable(String ns,String elemName) throws javax.xml.transform.TransformerException {  return false;}  }
class C{  public NoSuchMechanismException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension preferredSize=insetSize(parent);  if (parent.getComponentCount() > 0) {    Dimension childSize=getComponent(0).getPreferredSize();    preferredSize.width+=childSize.width;    preferredSize.height+=childSize.height;  }  return preferredSize;}  }
class C{  @Override public void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);{    writer.writeStartSequence();    if (rawAttributes != null) {      for (      String attr : rawAttributes) {        writer.writeOctetString(attr);      }    }    writer.writeEndSequence();  }  writer.writeEndSequence();}  }
class C{  @Override public void buttonActionPerformed(ButtonEvent ev){switch (ev.getButtonName()) {case NEXT:    nextClicked();  break;case CLOSE:closeClicked();break;case FINISH:finishClicked();break;case QUIT:quitClicked();break;case CONTINUE_INSTALL:continueInstallClicked();break;case PREVIOUS:previousClicked();break;case LAUNCH_STATUS_PANEL:launchStatusPanelClicked();break;case INPUT_PANEL_BUTTON:inputPanelButtonClicked();break;default :throw new IllegalArgumentException("Unknown button name: " + ev.getButtonName());}}  }
class C{  public void testCallingTerminatedScenario(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(invite);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The invite request was not received by the RI!");    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent);    assertNotNull("The invite request was not retransmitted!",inviteReceivedEvent.getRequest());    assertEquals(Request.INVITE,inviteReceivedEvent.getRequest().getMethod());    assertEquals(TransactionState.CALLING,tran.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    SipEventCollector ackCollector=new SipEventCollector();    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    Response ok=null;    try {      ok=riMessageFactory.createResponse(Response.OK,inviteReceivedEvent.getRequest());      addStatus(inviteReceivedEvent.getRequest(),ok);      ContactHeader contact=riHeaderFactory.createContactHeader(((ToHeader)ok.getHeader("To")).getAddress());      ok.addHeader(contact);      riSipProvider.sendResponse(ok);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send an OK response back to the TI",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 200 OK response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 200 OK response to the TU!",responseEvent.getResponse());    assertSame("The OK response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertSame("A response different from OK was passed to the TU",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the TERMINATED state after " + "receiving 200 final response",tran.getState(),TransactionState.TERMINATED);    RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNull("The TI sent an ACK to an OK (this is TU's job)!",ackReceivedEvent);    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    try {      riSipProvider.sendResponse((Response)ok.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send an OK response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertEquals("The ClientTransaction mysteriously left the TERMINATED state!",tran.getState(),TransactionState.TERMINATED);    ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNull("The TI sent an ACK request to the second OK response " + "(OK acks are TU's responsibility)!",ackReceivedEvent);  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public SAML2SingleLogoutHandler(){  debug=SingleLogoutManager.getInstance().debug;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentType doc1Type;  NamedNodeMap notationList;  Notation notation;  Notation aNode;  Document ownerDocument;  DocumentType docType;  String system;  String publicVal;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  doc1Type=aNewDoc.getDoctype();  notationList=doc1Type.getNotations();  assertNotNull("notationsNotNull",notationList);  notation=(Notation)notationList.getNamedItem("notation1");  aNode=(Notation)doc.importNode(notation,false);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  publicVal=aNode.getPublicId();  assertEquals("publicId","notation1File",publicVal);  system=aNode.getSystemId();  assertNull("notationSystemId",system);}  }
class C{  public static void writeWrapper(PrintWriter writer,ObjectName objectName,MBeanServer mBeanServer,int mode) throws Exception {  if (mode == 0) {    String servletName=objectName.getKeyProperty("name");    String[] mappings=(String[])mBeanServer.invoke(objectName,"findMappings",null,null);    writer.print("<h2>");    writer.print(filter(servletName));    if ((mappings != null) && (mappings.length > 0)) {      writer.print(" [ ");      for (int i=0; i < mappings.length; i++) {        writer.print(filter(mappings[i]));        if (i < mappings.length - 1) {          writer.print(" , ");        }      }      writer.print(" ] ");    }    writer.print("</h2>");    writer.print("<p>");    writer.print(" Processing time: ");    writer.print(formatTime(mBeanServer.getAttribute(objectName,"processingTime"),true));    writer.print(" Max time: ");    writer.print(formatTime(mBeanServer.getAttribute(objectName,"maxTime"),false));    writer.print(" Request count: ");    writer.print(mBeanServer.getAttribute(objectName,"requestCount"));    writer.print(" Error count: ");    writer.print(mBeanServer.getAttribute(objectName,"errorCount"));    writer.print(" Load time: ");    writer.print(formatTime(mBeanServer.getAttribute(objectName,"loadTime"),false));    writer.print(" Classloading time: ");    writer.print(formatTime(mBeanServer.getAttribute(objectName,"classLoadTime"),false));    writer.print("</p>");  } else   if (mode == 1) {  }}  }
class C{  public String toString(){  return "BadStringOperationException: " + op;}  }
class C{  public void addRepeatField(RepeatField repeatField){  if (repeatField == null)   throw new NullPointerException("null repeatField");  this.repeatList.add(repeatField);}  }
class C{  @Override public QueryResponseWrapper query(ParsedQuery query) throws IndexParseException {  ResultSet results=session.execute(generateQueryStatement(query,-1));  ArrayList<Document> toReturn=new ArrayList<>();  Iterator<Row> ite=results.iterator();  while (ite.hasNext()) {    Row row=ite.next();    toReturn.add(DocumentPersistanceUtils.marshalRow(row));  }  return new QueryResponseWrapper(toReturn,0l);}  }
class C{  public final void testGetAlgParameters04() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);      ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);      assertSame(ap,epki.getAlgParameters());      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof ISSecurityPermission)) {    return false;  }  Set pActions=convertActionStringToSet(p.getActions());  if (actions.contains("adminpassword") && (pActions.contains("adminpassword") || pActions.contains("crypt"))) {    return true;  } else {    if (pActions.contains("crypt") && actions.contains("crypt")) {      return true;    }  }  return false;}  }
class C{  @Override public void run(){  if (logger.isTraceEnabled()) {    logger.trace(getName() + " starting");  }  LocalizableMessage errMessage=null;  try {    while (true) {      try {        final ReplicationMsg msg=session.receive();        if (logger.isTraceEnabled()) {          logger.trace("In " + getName() + " receives "+ msg);        }        if (msg instanceof AckMsg) {          handler.checkWindow();          handler.processAck((AckMsg)msg);        } else         if (msg instanceof UpdateMsg) {          final UpdateMsg updateMsg=(UpdateMsg)msg;          if (!isUpdateMsgFiltered(updateMsg)) {            handler.put(updateMsg);          }        } else         if (msg instanceof WindowMsg) {          handler.updateWindow((WindowMsg)msg);        } else         if (msg instanceof MonitorRequestMsg) {          handler.processMonitorRequestMsg((MonitorRequestMsg)msg);        } else         if (msg instanceof MonitorMsg) {          handler.processMonitorMsg((MonitorMsg)msg);        } else         if (msg instanceof RoutableMsg) {          handler.process((RoutableMsg)msg);        } else         if (msg instanceof ResetGenerationIdMsg) {          handler.processResetGenId((ResetGenerationIdMsg)msg);        } else         if (msg instanceof WindowProbeMsg) {          handler.replyToWindowProbe();        } else         if (msg instanceof TopologyMsg) {          ReplicationServerHandler rsh=(ReplicationServerHandler)handler;          rsh.receiveTopoInfoFromRS((TopologyMsg)msg);        } else         if (msg instanceof ChangeStatusMsg) {          ChangeStatusMsg csMsg=(ChangeStatusMsg)msg;          try {            DataServerHandler dsh=(DataServerHandler)handler;            dsh.receiveNewStatus(csMsg);          } catch (          Exception e) {            errMessage=ERR_RECEIVED_CHANGE_STATUS_NOT_FROM_DS.get(handler.getBaseDN(),handler.getServerId(),csMsg);            logger.error(errMessage);          }        } else         if (msg instanceof ChangeTimeHeartbeatMsg) {          handler.process((ChangeTimeHeartbeatMsg)msg);        } else         if (msg instanceof StopMsg) {          if (logger.isTraceEnabled()) {            logger.trace(handler + " has properly disconnected from this replication server " + handler.getReplicationServerId());          }          return;        } else         if (msg == null) {          errMessage=NOTE_READER_NULL_MSG.get(handler);          logger.info(errMessage);          return;        }      } catch (      NotSupportedOldVersionPDUException e) {        logException(e);      }    }  } catch (  SocketException e) {    logException(e);    if (!handler.shuttingDown()) {      errMessage=handler.getBadlyDisconnectedErrorMessage();      logger.error(errMessage);    }  }catch (  Exception e) {    errMessage=NOTE_READER_EXCEPTION.get(handler,stackTraceToSingleLineString(e));    logger.info(errMessage);  } finally {    if (logger.isTraceEnabled()) {      logger.trace("In " + getName() + " closing the session");    }    session.close();    handler.doStop();    if (logger.isTraceEnabled()) {      logger.trace(getName() + " stopped: " + errMessage);    }  }}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public PersistentStateAccess(){}  }
class C{  public void addRecipient(String recipient){  recipients.add(recipient);}  }
class C{  public static AttributeSet synchronizedView(AttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedAttributeSet(attributeSet);}  }
class C{  public boolean isLeap(){  return Year.isLeap(year);}  }
class C{  @Override public ByteString normalizeAttributeValue(final Schema schema,final ByteSequence value) throws DecodeException {  final BigInteger serialNumber;  final String dnstring;  try {    CertificateFactory certFactory=CertificateFactory.getInstance("X.509");    InputStream inputStream=new ByteArrayInputStream(value.toByteArray());    X509Certificate certValue=(X509Certificate)certFactory.generateCertificate(inputStream);    serialNumber=certValue.getSerialNumber();    X500Principal issuer=certValue.getIssuerX500Principal();    dnstring=issuer.getName(X500Principal.RFC2253);  } catch (  CertificateException ce) {    final LocalizableMessage message=ERR_MR_CERTIFICATE_MATCH_PARSE_ERROR.get(ce.getMessage());    logger.trace(message);    return value.toByteString();  }  final ByteString certificateIssuer=normalizeDN(schema,dnstring);  return createEncodedValue(serialNumber,certificateIssuer);}  }
class C{  protected ReplicationBroker openReplicationSession(final DN baseDN,int serverId,int windowSize,int port,int timeout,long generationId) throws Exception {  final DomainFakeCfg config=newFakeCfg(baseDN,serverId,port);  config.setWindowSize(windowSize);  final ReplicationBroker broker=new ReplicationBroker(new DummyReplicationDomain(generationId),new ServerState(),config,getReplSessionSecurity());  connect(broker,timeout);  return broker;}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  private Set unionIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  Set set=new HashSet();  if (Arrays.areEqual(ipWithSubmask1,ipWithSubmask2)) {    set.add(ipWithSubmask1);  } else {    set.add(ipWithSubmask1);    set.add(ipWithSubmask2);  }  return set;}  }
class C{  private Future<CheckoutResult> sendOrderAwaitResult(Order order){  Future<CheckoutResult> future=Future.future();  vertx.eventBus().send(CheckoutService.ORDER_EVENT_ADDRESS,order.toJson(),null);  return future;}  }
class C{  public void change_polyline(Polyline p_new_polyline){  if (p_new_polyline == null)   return;  art_item_clear();  if (!is_on_the_board()) {    polyline=p_new_polyline;    return;  }  r_board.undo_items.save_for_undo(this);  int last_index=Math.min(p_new_polyline.plaline_len(),polyline.plaline_len());  int index_of_first_different_line=last_index;  for (int index=0; index < last_index; ++index) {    if (p_new_polyline.plaline(index) != polyline.plaline(index)) {      index_of_first_different_line=index;      break;    }  }  if (index_of_first_different_line == last_index)   return;  int index_of_last_different_line=-1;  for (int index=1; index <= last_index; ++index) {    if (p_new_polyline.plaline(p_new_polyline.plaline_len(-index)) != polyline.plaline(polyline.plaline_len(-index))) {      index_of_last_different_line=p_new_polyline.plaline_len() - index;      break;    }  }  if (index_of_last_different_line < 0)   return;  int keep_at_start_count=Math.max(index_of_first_different_line - 2,0);  int keep_at_end_count=Math.max(p_new_polyline.plaline_len() - index_of_last_different_line - 3,0);  r_board.search_tree_manager.change_entries(this,p_new_polyline,keep_at_start_count,keep_at_end_count);  polyline=p_new_polyline;  r_board.observers.notify_changed(this);  normalize_recu(r_board.changed_area.get_area(get_layer()),11);}  }
class C{  public boolean isNameIDEncryptionEnabled(String providerID){  EntityConfigElement entityConfig=null;  try {    entityConfig=idffMetaManager.getEntityConfig(ROOT_REALM,providerID);  } catch (  IDFFMetaException imex) {    ProviderUtil.debug.error("IDFFProviderManager.isNameIDEncryptionEnabled:",imex);  }  if (entityConfig == null) {    return false;  }  BaseConfigType baseConfig=IDFFMetaUtils.getSPDescriptorConfig(entityConfig);  if (baseConfig == null) {    baseConfig=IDFFMetaUtils.getIDPDescriptorConfig(entityConfig);    if (baseConfig == null) {      return false;    }  }  Map attrMap=IDFFMetaUtils.getAttributes(baseConfig);  if ((attrMap == null) || (attrMap.isEmpty())) {    return false;  }  List values=(List)attrMap.get(IFSConstants.ENABLE_NAMEID_ENCRYPTION);  if ((values == null) || values.isEmpty()) {    return false;  }  return ((String)values.get(0)).equalsIgnoreCase("true");}  }
class C{  public final void testGetPrimeQ(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeQ()));}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  protected PropertyChangeListener createActionPropertyChangeListener(Action a){  return new TextFieldActionPropertyChangeListener(this,a);}  }
class C{  public int intValue(){  return intValue;}  }
class C{  @DataProvider public Object[][] testBindData(){  return new Object[][]{{false,false},{false,true},{true,false},{true,true}};}  }
class C{  public void shutDown(){  if (logger.isTraceEnabled()) {    logger.trace(getName() + " being signaled to shut down.");  }  shutdownRequested=true;  if (waitingForWork) {    try {      workerThread.interrupt();    } catch (    Exception e) {      if (logger.isTraceEnabled()) {        logger.trace("Caught an exception while trying to interrupt the worker " + "thread waiting for work: %s",e);        logger.traceException(e);      }    }  } else {    try {      final Operation localOperation=operation;      if (localOperation != null) {        CancelRequest cancelRequest=new CancelRequest(true,INFO_CANCELED_BY_SHUTDOWN.get());        localOperation.cancel(cancelRequest);      }    } catch (    Exception e) {      if (logger.isTraceEnabled()) {        logger.trace("Caught an exception while trying to abandon the " + "operation in progress for the worker thread: %s",e);        logger.traceException(e);      }    }  }}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  int n;  if (first == null) {    n=super.read(b,off,len);  } else {    n=-1;  }  if (jv != null) {    jv.update(n,b,off,len,mev);  }  return n;}  }
class C{  void declarePrefix(String prefix,String uri){  if (!declsOK) {    throw new IllegalStateException("can't declare any more prefixes in this context");  }  if (!declSeen) {    copyTables();  }  if (declarations == null) {    declarations=new ArrayList<String>();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.add(prefix);}  }
class C{  public ByteVector(byte[] a,int capacity){  if (capacity > 0) {    blockSize=capacity;  } else {    blockSize=DEFAULT_BLOCK_SIZE;  }  array=a;  n=0;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.ServiceTypeElement createServiceTypeElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.ServiceTypeElementImpl(value);}  }
class C{  public void startAutoScroll(int delayTimeInMills){  isAutoScroll=true;  sendScrollMessage(delayTimeInMills);}  }
class C{  @Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.setContentType("text/plain");  PrintWriter out=resp.getWriter();  Enumeration<String> names=req.getParameterNames();  while (names.hasMoreElements()) {    String name=names.nextElement();    out.println(name + "=" + req.getParameter(name));  }}  }
class C{  public static void sendResponseArtifact(HttpServletRequest request,HttpServletResponse response,String idpEntityID,String spEntityID,String realm,String acsURL,String relayState,Response res,Object session,Map props) throws SAML2Exception {  String classMethod="IDPSSOUtil.sendResponseArtifact: ";  IDPSSODescriptorElement idpSSODescriptorElement=null;  try {    idpSSODescriptorElement=metaManager.getIDPSSODescriptor(realm,idpEntityID);    if (idpSSODescriptorElement == null) {      SAML2Utils.debug.error(classMethod + "Unable to get IDP SSO Descriptor from meta.");      String[] data={idpEntityID};      LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,session,props);      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error(classMethod + "Unable to get IDP SSO Descriptor from meta.");    String[] data={idpEntityID};    LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,session,props);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  ArtifactResolutionServiceElement ars=(ArtifactResolutionServiceElement)idpSSODescriptorElement.getArtifactResolutionService().get(0);  if (ars == null) {    SAML2Utils.debug.error(classMethod + "Unable to get ArtifactResolutionServiceElement from meta.");    String[] data={idpEntityID};    LogUtil.error(Level.INFO,LogUtil.IDP_METADATA_ERROR,data,session,props);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  Artifact art=null;  try {    art=ProtocolFactory.getInstance().createArtifact(null,ars.getIndex(),SAML2Utils.generateSourceID(idpEntityID),SAML2Utils.generateMessageHandleWithServerID());  } catch (  SAML2Exception se) {    SAML2Utils.debug.error(classMethod + "Unable to create artifact: ",se);    String[] data={idpEntityID};    LogUtil.error(Level.INFO,LogUtil.CANNOT_CREATE_ARTIFACT,data,session,props);    SAMLUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"errorCreateArtifact",SAML2Utils.bundle.getString("errorCreateArtifact"));    return;  }  String artStr=art.getArtifactValue();  try {    IDPCache.responsesByArtifacts.put(artStr,res);    if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {      try {        long expireTime=getValidTimeofResponse(realm,idpEntityID,res) / 1000;        SAML2FailoverUtils.saveSAML2TokenWithoutSecondaryKey(artStr,res.toXMLString(true,true),expireTime);        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message(classMethod + "Saved Response to SAML2 Token Repository using key " + artStr);        }      } catch (      SAML2TokenRepositoryException se) {        SAML2Utils.debug.error(classMethod + "Unable to save Response to the SAML2 Token Repository",se);      }    }    String messageEncoding=SAML2Utils.getAttributeValueFromSSOConfig(realm,spEntityID,SAML2Constants.SP_ROLE,SAML2Constants.RESPONSE_ARTIFACT_MESSAGE_ENCODING);    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "messageEncoding = " + messageEncoding);      SAML2Utils.debug.message(classMethod + "artStr = " + artStr);    }    if ((messageEncoding != null) && (messageEncoding.equals(SAML2Constants.FORM_ENCODING))) {      String[] logdata={idpEntityID,realm,acsURL};      LogUtil.access(Level.INFO,LogUtil.SEND_ARTIFACT,logdata,session,props);      SAML2Utils.postToTarget(request,response,SAML2Constants.SAML_ART,artStr,"RelayState",relayState,acsURL);    } else {      String redirectURL=acsURL + (acsURL.contains("?") ? "&" : "?") + "SAMLart="+ URLEncDec.encode(artStr);      if ((relayState != null) && (relayState.trim().length() != 0)) {        redirectURL+="&RelayState=" + URLEncDec.encode(relayState);      }      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "Redirect URL = " + redirectURL);      }      String[] logdata={idpEntityID,realm,redirectURL};      LogUtil.access(Level.INFO,LogUtil.SEND_ARTIFACT,logdata,session,props);      response.sendRedirect(redirectURL);    }  } catch (  IOException ioe) {    SAML2Utils.debug.error(classMethod + "Unable to send redirect: ",ioe);  }}  }
class C{  public static void loadDefaultServices(SSOToken token,OrganizationConfigManager ocm) throws SMSException {  if (!migratedTo70) {    return;  }  Set defaultServices=ServiceManager.servicesAssignedByDefault();  OrganizationConfigManager parentOrg=ocm.getParentOrgConfigManager();  if (defaultServices == null) {    return;  }  Set assignedServices=new CaseInsensitiveHashSet(parentOrg.getAssignedServices());  if (SMSEntry.debug.messageEnabled()) {    SMSEntry.debug.message("OrganizationConfigManager" + "::loadDefaultServices " + "assignedServices : "+ assignedServices);  }  boolean doAuthServiceLater=false;  boolean doAuthHttpBasicLater=false;  String serviceName=null;  Iterator items=defaultServices.iterator();  while (items.hasNext() || doAuthHttpBasicLater || doAuthServiceLater) {    if (items.hasNext()) {      serviceName=(String)items.next();      if (serviceName.equals(ISAuthConstants.AUTH_SERVICE_NAME)) {        doAuthServiceLater=true;        continue;      } else       if (serviceName.equals(ISAuthConstants.AUTH_HTTP_BASIC_SERVICE_NAME)) {        doAuthHttpBasicLater=true;        continue;      }    } else     if (doAuthHttpBasicLater) {      serviceName=ISAuthConstants.AUTH_HTTP_BASIC_SERVICE_NAME;      doAuthHttpBasicLater=false;    } else     if (doAuthServiceLater) {      serviceName=ISAuthConstants.AUTH_SERVICE_NAME;      doAuthServiceLater=false;    }    if (SMSEntry.debug.messageEnabled()) {      SMSEntry.debug.message("OrganizationConfigManager" + "::loadDefaultServices:ServiceName " + serviceName);    }    try {      ServiceConfig sc=parentOrg.getServiceConfig(serviceName);      ServiceSchema ss=parentOrg.getServiceSchema(serviceName);      Map attrs=null;      if (sc != null && assignedServices.contains(serviceName)) {        attrs=sc.getAttributesWithoutDefaults();        if (SMSEntry.debug.messageEnabled()) {          SMSEntry.debug.message("OrganizationConfigManager" + "::loadDefaultServices " + "Copying service from parent: "+ serviceName);        }        ServiceConfig scn=ocm.addServiceConfig(serviceName,attrs);        copySubConfig(sc,scn,ss);      }    } catch (    SSOException ssoe) {      if (SMSEntry.debug.messageEnabled()) {        SMSEntry.debug.message("OrganizationConfigManager.loadDefaultServices " + "SSOException in loading default services ",ssoe);      }      throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));    }  }}  }
class C{  public int compareTo(Timestamp ts){  long thisTime=this.getTime();  long anotherTime=ts.getTime();  int i=(thisTime < anotherTime ? -1 : (thisTime == anotherTime ? 0 : 1));  if (i == 0) {    if (nanos > ts.nanos) {      return 1;    } else     if (nanos < ts.nanos) {      return -1;    }  }  return i;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.HttpBasicAuthenticationElement createHttpBasicAuthenticationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.HttpBasicAuthenticationElementImpl();}  }
class C{  static <K,V>void moveRootToFront(Node<K,V>[] tab,TreeNode<K,V> root){  int n;  if (root != null && tab != null && (n=tab.length) > 0) {    int index=(n - 1) & root.hash;    TreeNode<K,V> first=(TreeNode<K,V>)tab[index];    if (root != first) {      Node<K,V> rn;      tab[index]=root;      TreeNode<K,V> rp=root.prev;      if ((rn=root.next) != null)       ((TreeNode<K,V>)rn).prev=rp;      if (rp != null)       rp.next=rn;      if (first != null)       first.prev=root;      root.next=first;      root.prev=null;    }    assert checkInvariants(root);  }}  }
class C{  @Override public void onBackPressed(){  Log.d(TAG,"begin FmRadioActivity.onBackPressed");  if (mIsInRecordingMode) {    changeRecordingMode(false);    if (null == mService) {      Log.d(TAG,"mService is null");      return;    }    boolean isPlaying=mService.isPowerUp();    refreshImageButton(isPlaying);    refreshPopupMenuItem(isPlaying);    refreshActionMenuItem(isPlaying);    refreshActionMenuPower(true);    if (mService != null && !mService.isAntennaAvailable() && !FmRadioUtils.isFmShortAntennaSupport()) {      Log.w(TAG,"Need to show no antenna dialog for plug out earphone in onPause state");      dismissNoAntennaDialog();      showNoAntennaDialog();    }    return;  }  if (!mIsPlaying && (null != mService) && !mService.isPowerUping()) {    refreshImageButton(false);    refreshActionMenuItem(false);    refreshPopupMenuItem(false);    refreshActionMenuPower(false);    exitService();    return;  }  super.onBackPressed();  Log.d(TAG,"end FmRadioActivity.onBackPressed");}  }
class C{  Node cloneOrImportNode(short operation,Node node,boolean deep){  NodeImpl copy=shallowCopy(operation,node);  if (deep) {    NodeList list=node.getChildNodes();    for (int i=0; i < list.getLength(); i++) {      copy.appendChild(cloneOrImportNode(operation,list.item(i),deep));    }  }  notifyUserDataHandlers(operation,node,copy);  return copy;}  }
class C{  public static PdfTargetDictionary createParentTarget(){  return new PdfTargetDictionary(PdfName.P);}  }
class C{  void writeEntry(int position,int offset,int value) throws ArrayIndexOutOfBoundsException {{    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=position & lowmask;    int[] chunk=chunks.elementAt(chunkpos);    chunk[slotpos + offset]=value;  }}  }
class C{  public void removeParameters(){  parameters=new Vector();}  }
class C{  public InflaterOutputStream(OutputStream out,Inflater infl){  this(out,infl,512);}  }
class C{  private String digest(String algorithm,String... params){  String message="";  for (  String param : params) {    message+=param;  }  try {    MessageDigest digest=MessageDigest.getInstance(algorithm);    digest.update(message.getBytes());    byte messageDigest[]=digest.digest();    StringBuilder hexString=new StringBuilder();    for (    byte aMessageDigest : messageDigest) {      String h=Integer.toHexString(0xFF & aMessageDigest);      while (h.length() < 2) {        h="0" + h;      }      hexString.append(h);    }    return hexString.toString();  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,e.getMessage());  }  return "";}  }
class C{  public static void sort(byte[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public final void testReadResolve(){  MyCertificate c1=new MyCertificate("TEST_TYPE",testEncoding);  MyCertificateRep rep=c1.new MyCertificateRep("TEST_TYPE",new byte[]{(byte)1,(byte)2,(byte)3});  try {    rep.readResolve();    fail("ObjectStreamException expected");  } catch (  ObjectStreamException e) {  }  MyCertificateRep rep1=c1.new MyCertificateRep("X509",TestUtils.getX509Certificate_v3());  try {    Certificate obj=(Certificate)rep1.readResolve();    assertEquals("0.3.5",obj.getPublicKey().getAlgorithm());    assertEquals("X.509",obj.getPublicKey().getFormat());    assertEquals("X.509",obj.getType());  } catch (  ObjectStreamException e) {    fail("Unexpected ObjectStreamException " + e.getMessage());  }}  }
class C{  public static boolean isBase64(final byte[] arrayOctet){  for (int i=0; i < arrayOctet.length; i++) {    if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {      return false;    }  }  return true;}  }
class C{  public FedSystemProperties(){}  }
class C{  public Builder(AbstractManagedObjectDefinition<?,?> pd,String name,AbstractManagedObjectDefinition<C,S> cd){  super(pd,name,cd);}  }
class C{  public String toUpperCamel(){  return toCamel(CaseFormat.UPPER_CAMEL);}  }
class C{  void markInProgress(LDAPUpdateMsg msg){  remotePendingChanges.markInProgress(msg);}  }
class C{  @Override public void close(){  IOUtils.closeIfNotNull(connection);}  }
class C{  public void testReceiveResponse(){  try {    Request invite=createTiInviteRequest(null,null,null);    RequestEvent receivedRequestEvent=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tiSipProvider.sendRequest(invite);      waitForMessage();      receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      if (receivedRequestEvent == null || receivedRequestEvent.getRequest() == null)       throw new TckInternalError("The sent request was not received by the RI!");    } catch (    TooManyListenersException ex) {      throw new TckInternalError("A TooManyListenersException was thrown while trying to add " + "a SipListener to an RI SipProvider.",ex);    }catch (    SipException ex) {      throw new TiUnexpectedError("The TI failed to send the request!",ex);    }    Request receivedRequest=receivedRequestEvent.getRequest();    Response ok=null;    try {      ok=riMessageFactory.createResponse(Response.OK,receivedRequest);      ((ToHeader)ok.getHeader("To")).setTag("ok");      addStatus(receivedRequest,ok);    } catch (    ParseException ex) {      throw new TckInternalError("Failed to create an OK response!",ex);    }    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Error while trying to add riSipProvider");    }    try {      riSipProvider.sendResponse(ok);    } catch (    SipException ex) {      throw new TckInternalError("Could not send back the response",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The TI failed to receive the response!",responseEvent);    assertNotNull("The TI failed to receive the response!",responseEvent.getResponse());    assertNull("The TI had implicitly created a client transaction! " + "Transactions should only be created explicitly using " + "the SipProvider.getNewXxxTransaction() method.",responseEvent.getClientTransaction());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public void removeLayoutComponent(Component comp){}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.PsuedonymServiceEndpointElement createPsuedonymServiceEndpointElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.PsuedonymServiceEndpointElementImpl();}  }
class C{  protected void initialize(){  existStmt=PreparedStatementFactory.getPreparedStatement(String.format(EXISTENCE_CQL,getTable()),getSession());  readStmt=PreparedStatementFactory.getPreparedStatement(String.format(READ_CQL,getTable()),getSession());  createStmt=PreparedStatementFactory.getPreparedStatement(String.format(CREATE_CQL,getTable(),Columns.NAME),getSession());  deleteStmt=PreparedStatementFactory.getPreparedStatement(String.format(DELETE_CQL,getTable()),getSession());  markActiveStmt=PreparedStatementFactory.getPreparedStatement(String.format(MARK_ACTIVE_CQL,getTable()),getSession());  readAllStmt=PreparedStatementFactory.getPreparedStatement(String.format(READ_ALL_CQL,getTable()),getSession());  readAllCountStmt=PreparedStatementFactory.getPreparedStatement(String.format(READ_ALL_COUNT_CQL,getTable()),getSession());}  }
class C{  static Promise<String> promiseString(){  return new BasePromise<>();}  }
class C{  public void login(String username,String password){  login(username,password,null,null);}  }
class C{  public Object decode(Object object) throws DecoderException {  try {    char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;    return decodeHex(charArray);  } catch (  ClassCastException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  private synchronized void createThreads(){  for (int i=0; i < poolSize; i++) {    WorkerThread t=new WorkerThread(poolName + i,this);    t.setDaemon(true);    t.start();    threads[i]=t;  }}  }
class C{  public static boolean isChar(String desc){  return desc.endsWith("C");}  }
class C{  public void freeEntry(BasicPoolEntry entry){  if (numEntries < 1) {    throw new IllegalStateException("No entry created for this pool. " + route);  }  if (numEntries <= freeEntries.size()) {    throw new IllegalStateException("No entry allocated from this pool. " + route);  }  freeEntries.add(entry);}  }
class C{  @Override public Promise<QueryResponse,ResourceException> filterQuery(Context context,QueryRequest request,QueryResourceHandler handler,RequestHandler next){  final String resource=ServerContextUtils.getResourceId(request,context);  final String action=ServerContextUtils.getQueryString(request);  logAccess(resource,action,context);  return next.handleQuery(context,request,handler);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (obj != null && obj instanceof MarshalledObject) {    MarshalledObject<?> other=(MarshalledObject<?>)obj;    if (objBytes == null || other.objBytes == null)     return objBytes == other.objBytes;    if (objBytes.length != other.objBytes.length)     return false;    for (int i=0; i < objBytes.length; ++i) {      if (objBytes[i] != other.objBytes[i])       return false;    }    return true;  } else {    return false;  }}  }
class C{  private void addListeners(Container container){  container.addContainerListener(this);  container.addLifecycleListener(this);  for (  Container child : container.findChildren()) {    addListeners(child);  }}  }
class C{  public static String toJavaSourceType(String type){  if (type.charAt(0) != '[') {    return type;  }  int dims=1;  String t=null;  for (int i=1; i < type.length(); i++) {    if (type.charAt(i) == '[') {      dims++;    } else {switch (type.charAt(i)) {case 'Z':        t="boolean";      break;case 'B':    t="byte";  break;case 'C':t="char";break;case 'D':t="double";break;case 'F':t="float";break;case 'I':t="int";break;case 'J':t="long";break;case 'S':t="short";break;case 'L':t=type.substring(i + 1,type.indexOf(';'));break;}break;}}if (t == null) {throw new IllegalArgumentException("Unable to extract type from [" + type + "]");}StringBuilder resultType=new StringBuilder(t);for (; dims > 0; dims--) {resultType.append("[]");}return resultType.toString();}  }
class C{  public Invalid(String reason){  super(reason);}  }
class C{  public void testGetCertificate(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  Certificate res=ksPKE.getCertificate();  assertEquals("Incorrect end certificate (number 0)",testChain[0],res);}  }
class C{  protected ElemVariable createLocalPseudoVarDecl(QName uniquePseudoVarName,ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi) throws org.w3c.dom.DOMException {  ElemVariable psuedoVar=new ElemVariablePsuedo();  XPath xpath=new XPath(lpi);  psuedoVar.setSelect(xpath);  psuedoVar.setName(uniquePseudoVarName);  ElemVariable var=addVarDeclToElem(psuedoVarRecipient,lpi,psuedoVar);  lpi.exprSetParent(var);  return var;}  }
class C{  public static byte[] hmac_sha1(byte[] keyBytes,byte[] text) throws NoSuchAlgorithmException, InvalidKeyException {  Mac hmacSha1;  try {    hmacSha1=Mac.getInstance("HmacSHA1");  } catch (  NoSuchAlgorithmException nsae) {    hmacSha1=Mac.getInstance("HMAC-SHA-1");  }  SecretKeySpec macKey=new SecretKeySpec(keyBytes,"RAW");  hmacSha1.init(macKey);  return hmacSha1.doFinal(text);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetelementsbytagnamelength.class,args);}  }
class C{  private void createSunXmlKeyValFiles(File dirHandle,Set sunxmlkeyvals) throws SMSException {  createLookupFiles(dirHandle,SMSEntry.ATTR_XML_KEYVAL,sunxmlkeyvals);}  }
class C{  public static URI appendQuery(final URI uri,final Form query){  Reject.ifNull(uri);  if (query == null || query.isEmpty()) {    return uri;  }  if (uri.getRawQuery() != null) {    query.fromQueryString(uri.getRawQuery());  }  try {    return create(uri.getScheme(),uri.getRawUserInfo(),uri.getHost(),uri.getPort(),uri.getRawPath(),query.toQueryString(),uri.getRawFragment());  } catch (  final URISyntaxException e) {    throw new IllegalStateException(e);  }}  }
class C{  public StuckThreadDetectionValve(){  super(true);}  }
class C{  @Deprecated public Potion(PotionType type,int level,boolean splash){  this(type,level);  this.splash=splash;}  }
class C{  public int readAndExecute(LDAPConnection connection,String attributeType,byte[] attributeVal,List<String> lines,LDAPCompareOptions compareOptions) throws IOException, LDAPException {  int aggResultCode=SUCCESS;  for (  String line : lines) {    int resultCode=executeCompare(connection,attributeType,attributeVal,line,compareOptions);    aggResultCode=aggregateResultCode(aggResultCode,resultCode);  }  return aggResultCode;}  }
class C{  private void nonContextualShape(char[] text,int start,int count){  char maxDigit=(char)0x0039;  char minDigit=(char)((fRanges == ETHIOPIC) ? 0x0031 : 0x0030);  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      text[ind]=(char)(digitsLowRanges[fSingleRangeIndex] + text[ind]);    }  }}  }
class C{  public ProfileViewBeanBase(String name,String defaultDisplayURL){  super(name);  setDefaultDisplayURL(defaultDisplayURL);}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId,boolean retrieveFromCache){  Object[] finderArgs=new Object[]{uuid,groupId};  Object result=null;  if (retrieveFromCache) {    result=finderCache.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);  }  if (result instanceof Foo) {    Foo foo=(Foo)result;    if (!Objects.equals(uuid,foo.getUuid()) || (groupId != foo.getGroupId())) {      result=null;    }  }  if (result == null) {    StringBundler query=new StringBundler(4);    query.append(_SQL_SELECT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      List<Foo> list=q.list();      if (list.isEmpty()) {        finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);      } else {        Foo foo=list.get(0);        result=foo;        cacheResult(foo);        if ((foo.getUuid() == null) || !foo.getUuid().equals(uuid) || (foo.getGroupId() != groupId)) {          finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,foo);        }      }    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  if (result instanceof List<?>) {    return null;  } else {    return (Foo)result;  }}  }
class C{  public Object decode(Object ascii) throws DecoderException {  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  if (ascii instanceof byte[]) {    return fromAscii((byte[])ascii);  }  if (ascii instanceof char[]) {    return fromAscii((char[])ascii);  }  if (ascii instanceof String) {    return fromAscii(((String)ascii).toCharArray());  }  throw new DecoderException("argument not a byte array");}  }
class C{  public PKCS5S2PasswordStorageSchemeTestCase(){  super("cn=PKCS5S2,cn=Password Storage Schemes,cn=config");}  }
class C{  public DESKeySpec(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new NullPointerException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  this.key=new byte[DES_KEY_LEN];  System.arraycopy(key,offset,this.key,0,DES_KEY_LEN);}  }
class C{  @Override public long skip(long n) throws IOException {  int charWidth=(fEncoding >= 4) ? 2 : 1;  long bytesSkipped=fInputStream.skip(n << charWidth);  if ((bytesSkipped & (charWidth | 1)) == 0)   return bytesSkipped >> charWidth;  return (bytesSkipped >> charWidth) + 1;}  }
class C{  public void testUpdate2(){  String newValue="newValue";  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field1='"+ newValue+ "' WHERE (id > 2) and (id < 10)";  try {    int num=statement.executeUpdate(updateQuery);    int expectedUpdated=7;    assertEquals("Not all records in the database were updated",expectedUpdated,num);    String selectQuery="SELECT * FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      int id=result.getInt("id");      String field1=result.getString("field1");      if ((id > 2) && (id < 10)) {        assertEquals("The field field1 was not updated",newValue,field1);      } else {        assertEquals("The field field1 was not updated",DatabaseCreator.defaultString + id,field1);      }    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public void writeElement(String namespace,String namespaceInfo,String name,int type){  if ((namespace != null) && (namespace.length() > 0)) {switch (type) {case OPENING:      if (namespaceInfo != null) {        buffer.append("<" + namespace + ":"+ name+ " xmlns:"+ namespace+ "=\""+ namespaceInfo+ "\">");      } else {        buffer.append("<" + namespace + ":"+ name+ ">");      }    break;case CLOSING:  buffer.append("</" + namespace + ":"+ name+ ">\n");break;case NO_CONTENT:default :if (namespaceInfo != null) {buffer.append("<" + namespace + ":"+ name+ " xmlns:"+ namespace+ "=\""+ namespaceInfo+ "\"/>");} else {buffer.append("<" + namespace + ":"+ name+ "/>");}break;}} else {switch (type) {case OPENING:buffer.append("<" + name + ">");break;case CLOSING:buffer.append("</" + name + ">\n");break;case NO_CONTENT:default :buffer.append("<" + name + "/>");break;}}}  }
class C{  public boolean processEntryCacheConfig(SoftReferenceEntryCacheCfg configuration,boolean applyChanges,EntryCacheCommon.ConfigErrorHandler errorHandler){  DN newConfigEntryDN;  Set<SearchFilter> newIncludeFilters=null;  Set<SearchFilter> newExcludeFilters=null;  newConfigEntryDN=configuration.dn();switch (errorHandler.getConfigPhase()) {case PHASE_INIT:case PHASE_ACCEPTABLE:case PHASE_APPLY:    newIncludeFilters=EntryCacheCommon.getFilters(configuration.getIncludeFilter(),ERR_CACHE_INVALID_INCLUDE_FILTER,errorHandler,newConfigEntryDN);  newExcludeFilters=EntryCacheCommon.getFilters(configuration.getExcludeFilter(),ERR_CACHE_INVALID_EXCLUDE_FILTER,errorHandler,newConfigEntryDN);break;}if (applyChanges && errorHandler.getIsAcceptable()) {setIncludeFilters(newIncludeFilters);setExcludeFilters(newExcludeFilters);registeredConfiguration=configuration;}return errorHandler.getIsAcceptable();}  }
class C{  protected final void _loadToHaveAtLeast(int minAvailable) throws IOException {  if (_inputStream == null) {    throw _constructError("Needed to read " + minAvailable + " bytes, reached end-of-input");  }  int amount=_inputEnd - _inputPtr;  if (amount > 0 && _inputPtr > 0) {    _currInputProcessed+=_inputPtr;    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);    _inputEnd=amount;  } else {    _inputEnd=0;  }  _inputPtr=0;  while (_inputEnd < minAvailable) {    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);    if (count < 1) {      _closeInput();      if (count == 0) {        throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes");      }      throw _constructError("Needed to read " + minAvailable + " bytes, missed "+ minAvailable+ " before end-of-input");    }    _inputEnd+=count;  }}  }
class C{  @Override public void startInternal() throws Exception {  if (!running) {    allClosed=false;    running=true;    paused=false;    processorCache=new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,socketProperties.getProcessorCache());    nioChannels=new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,socketProperties.getBufferPool());    if (getExecutor() == null) {      createExecutor();    }    initializeConnectionLatch();    startAcceptorThreads();  }}  }
class C{  public Cursor fetchAll(String attributeName,Long appID,Long dataTypeID){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (attributeName != null) {    qb.appendWhere(" AND " + KEY_EXTERNALATTRIBUTENAME + " = ");    qb.appendWhereEscapeString(attributeName);  }  if (appID != null) {    qb.appendWhere(" AND " + KEY_APPID + " = "+ appID);  }  if (dataTypeID != null) {    qb.appendWhere(" AND " + KEY_DATATYPEID + " = "+ dataTypeID);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  @DataProvider(name="createNumComponentsTestData") public Object[][] createNumComponentsTestData(){  return new Object[][]{{"",0},{"dc=com",1},{"dc=opendj,dc=com",2},{"dc=world,dc=opendj,dc=com",3},{"dc=hello,dc=world,dc=opendj,dc=com",4}};}  }
class C{  public PPreferredIdentityHeader createPPreferredIdentityHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  PPreferredIdentity preferredIdentity=new PPreferredIdentity();  preferredIdentity.setAddress(address);  return preferredIdentity;}  }
class C{  public void test_write$BII_5() throws Exception {  DigestOutputStream dos=new DigestOutputStream(new ByteArrayOutputStream(),MessageDigest.getInstance("SHA"));  byte digestArray[]={23,43,44};  dos.write(digestArray,1,1);  byte digestResult[]=dos.getMessageDigest().digest();  byte expected[]={-87,121,-17,16,-52,111,106,54,-33,107,-118,50,51,7,-18,59,-78,-30,-37,-100};  assertTrue("Digest did not return expected result.",Arrays.equals(digestResult,expected));}  }
class C{  @Override public void onAlarm(Alarm alarm){  onDragOver(mDragObject,1);}  }
class C{  public DynamicMBean createMBean(Object instance) throws InstanceNotFoundException, MBeanException, RuntimeOperationsException {  BaseModelMBean mbean=null;  if (getClassName().equals(BASE_MBEAN)) {    mbean=new BaseModelMBean();  } else {    Class<?> clazz=null;    Exception ex=null;    try {      clazz=Class.forName(getClassName());    } catch (    Exception e) {    }    if (clazz == null) {      try {        ClassLoader cl=Thread.currentThread().getContextClassLoader();        if (cl != null)         clazz=cl.loadClass(getClassName());      } catch (      Exception e) {        ex=e;      }    }    if (clazz == null) {      throw new MBeanException(ex,"Cannot load ModelMBean class " + getClassName());    }    try {      mbean=(BaseModelMBean)clazz.newInstance();    } catch (    RuntimeOperationsException e) {      throw e;    }catch (    Exception e) {      throw new MBeanException(e,"Cannot instantiate ModelMBean of class " + getClassName());    }  }  mbean.setManagedBean(this);  try {    if (instance != null)     mbean.setManagedResource(instance,"ObjectReference");  } catch (  InstanceNotFoundException e) {    throw e;  }  return mbean;}  }
class C{  private <T>void registerSetModification(PropertyDefinition<T> pd,SortedSet<T> newValues,SortedSet<T> previousValues){  PropertyEditorModification<?> mod=getModification(pd);  SortedSet<T> originalValues;  if (mod != null) {    originalValues=new TreeSet<>(pd);    castAndAddValues(originalValues,mod.getOriginalValues(),pd);    removeModification(mod);  } else {    originalValues=new TreeSet<>(previousValues);  }  addModification(PropertyEditorModification.createSetModification(pd,newValues,originalValues));}  }
class C{  public LDAPWriter(Socket socket) throws IOException {  this.socket=socket;  this.debugOutputStream=new RecordingOutputStream(new BufferedOutputStream(socket.getOutputStream(),4096));  this.asn1Writer=ASN1.getWriter(debugOutputStream);}  }
class C{  static String toString(final byte[] b,final int offset,final int length){  if (length == 0) {    return "";  }  try {    return new String(b,offset,length,"UTF-8");  } catch (  final UnsupportedEncodingException e) {    throw new RuntimeException("Unable to decode bytes as UTF-8 string",e);  }}  }
class C{  public String toString(){  return ">>> Marker after " + after + " on "+ untilFocused;}  }
class C{  public DynamicSessionIDExtensions(SessionIDExtensions delegate){  this(new WebtopNamingQuery(),delegate);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusDetailElement createStatusDetailElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusDetailElementImpl();}  }
class C{  @Override public void execute() throws BuildException {  int count=0;  Iterator<FileSet> iter=filesets.iterator();  while (iter.hasNext()) {    FileSet fs=iter.next();    DirectoryScanner ds=fs.getDirectoryScanner(getProject());    File basedir=ds.getBasedir();    String[] files=ds.getIncludedFiles();    for (int i=0; i < files.length; i++) {      File from=new File(basedir,files[i]);      File to=new File(todir,files[i] + ".html");      if (!to.exists() || (from.lastModified() > to.lastModified())) {        log("Converting file '" + from.getAbsolutePath() + "' to '"+ to.getAbsolutePath(),Project.MSG_VERBOSE);        try {          convert(from,to);        } catch (        IOException e) {          throw new BuildException("Could not convert '" + from.getAbsolutePath() + "' to '"+ to.getAbsolutePath()+ "'",e);        }        count++;      }    }    if (count > 0) {      log("Converted " + count + " file"+ (count > 1 ? "s" : "")+ " to "+ todir.getAbsolutePath());    }  }}  }
class C{  public void init(Context context,String[] fontAssetPaths){  Context applicationContext=context.getApplicationContext();  AssetManager assetManager=applicationContext.getAssets();  for (  String path : fontAssetPaths) {    add(assetManager,path);  }}  }
class C{  private void resetLogs(){  logs.setText(INIT_TEXT);}  }
class C{  public int type(){  return type;}  }
class C{  public boolean isWrapperFor(ServletRequest wrapped){  if (request == wrapped) {    return true;  }  if (request instanceof ServletRequestWrapper) {    return ((ServletRequestWrapper)request).isWrapperFor(wrapped);  }  return false;}  }
class C{  protected boolean tryEnqueueRequest(Operation op) throws DirectoryException {  return DirectoryServer.tryEnqueueRequest(op);}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public Wrapper addServlet(String contextPath,String servletName,Servlet servlet){  Container ctx=getHost().findChild(contextPath);  return addServlet((Context)ctx,servletName,servlet);}  }
class C{  public Holder(GeneralNames entityName,int version){  this.entityName=entityName;  this.version=version;}  }
class C{  public static int registerSystemDirectories(){  return FontProgramFactory.registerSystemFontDirectories();}  }
class C{  public AttributeBuilder(String attributeDescription){  this(AttributeDescription.valueOf(attributeDescription));}  }
class C{  public final int read(byte b[],int off,int len) throws IOException {  return in.read(b,off,len);}  }
class C{  private void removeEntryFromIndexes(IndexBuffer buffer,Entry entry,EntryID entryID) throws StorageRuntimeException, DirectoryException {  for (  AttributeIndex index : attrIndexMap.values()) {    index.removeEntry(buffer,entryID,entry);  }  for (  VLVIndex vlvIndex : vlvIndexMap.values()) {    vlvIndex.removeEntry(buffer,entryID,entry);  }}  }
class C{  public final boolean peek(){  return m_values[m_index];}  }
class C{  public void runTest() throws Throwable {  Document doc;  Comment newCommentNode;  String newCommentValue;  String newCommentName;  int newCommentType;  doc=(Document)load("staff",true);  newCommentNode=doc.createComment("This is a new Comment node");  newCommentValue=newCommentNode.getNodeValue();  assertEquals("value","This is a new Comment node",newCommentValue);  newCommentName=newCommentNode.getNodeName();  assertEquals("name","#comment",newCommentName);  newCommentType=(int)newCommentNode.getNodeType();  assertEquals("type",8,newCommentType);}  }
class C{  void unbindAuditFilter(Filter filter){  auditFilter.setDelegate(PassthroughFilter.PASSTHROUGH_FILTER);}  }
class C{  public FrameBodySYLT(){}  }
class C{  public void writeSuccessfulStartupConfig(){  if (useLastKnownGoodConfig) {    return;  }  String startOKFilePath=configFile + ".startok";  String tempFilePath=startOKFilePath + ".tmp";  String oldFilePath=startOKFilePath + ".old";  File tempFile=new File(tempFilePath);  try (FileInputStream inputStream=new FileInputStream(configFile)){    try (FileOutputStream outputStream=new FileOutputStream(tempFilePath,false)){      try {        byte[] buffer=new byte[8192];        while (true) {          int bytesRead=inputStream.read(buffer);          if (bytesRead < 0) {            break;          }          outputStream.write(buffer,0,bytesRead);        }      } catch (      IOException e) {        logger.traceException(e);        logger.error(ERR_STARTOK_CANNOT_WRITE,configFile,tempFilePath,getExceptionMessage(e));        return;      }    } catch (    FileNotFoundException e) {      logger.traceException(e);      logger.error(ERR_STARTOK_CANNOT_OPEN_FOR_WRITING,tempFilePath,getExceptionMessage(e));      return;    }catch (    IOException e) {      logger.traceException(e);    }  } catch (  FileNotFoundException e) {    logger.traceException(e);    logger.error(ERR_STARTOK_CANNOT_OPEN_FOR_READING,configFile,getExceptionMessage(e));    return;  }catch (  IOException e) {    logger.traceException(e);  }  File oldFile=new File(oldFilePath);  try {    if (oldFile.exists()) {      oldFile.delete();    }  } catch (  Exception e) {    logger.traceException(e);  }  File startOKFile=new File(startOKFilePath);  try {    if (startOKFile.exists()) {      startOKFile.renameTo(oldFile);    }  } catch (  Exception e) {    logger.traceException(e);  }  try {    tempFile.renameTo(startOKFile);  } catch (  Exception e) {    logger.traceException(e);    logger.error(ERR_STARTOK_CANNOT_RENAME,tempFilePath,startOKFilePath,getExceptionMessage(e));    return;  }  try {    if (oldFile.exists()) {      oldFile.delete();    }  } catch (  Exception e) {    logger.traceException(e);  }}  }
class C{  private void verifyConfigurationService(String currentRealm){  if (ocm == null) {    try {      ocm=new OrganizationConfigManager(getUserSSOToken(),currentRealm);    } catch (    SMSException sms) {      debug.error("error getting config manager",sms);    }  }  try {    ocm.getServiceConfig(AMAdminConstants.AUTH_CONFIG_SERVICE);  } catch (  SMSException sms) {    try {      ocm.addServiceConfig(AMAdminConstants.AUTH_CONFIG_SERVICE,new HashMap());    } catch (    SMSException x) {      debug.message("the service is already registered");    }  }}  }
class C{  private Path createBalloonPath(RectF balloonRect,float progress){  Path path=new Path();  path.moveTo(balloonRect.centerX(),balloonRect.bottom);  float progressWidth=balloonRect.width() * progress;  float progressHeight=balloonRect.height() * progress;  float leftIncrementX1=progressWidth * -0.48f;  float leftIncrementY1=progressHeight * 0.75f;  float leftIncrementX2=progressWidth * -0.03f;  float leftIncrementY2=progressHeight * -1.6f;  float leftIncrementX3=progressWidth * 0.9f;  float leftIncrementY3=progressHeight * -1.0f;  path.cubicTo(balloonRect.left + balloonRect.width() * 0.25f + leftIncrementX1,balloonRect.centerY() - balloonRect.height() * 0.4f + leftIncrementY1,balloonRect.left - balloonRect.width() * 0.20f + leftIncrementX2,balloonRect.centerY() + balloonRect.height() * 1.15f + leftIncrementY2,balloonRect.left - balloonRect.width() * 0.4f + leftIncrementX3,balloonRect.bottom + leftIncrementY3);  float rightIncrementX1=progressWidth * 1.51f;  float rightIncrementY1=progressHeight * -0.05f;  float rightIncrementX2=progressWidth * 0.03f;  float rightIncrementY2=progressHeight * 0.5f;  float rightIncrementX3=0.0f;  float rightIncrementY3=0.0f;  path.cubicTo(balloonRect.left - balloonRect.width() * 0.38f + rightIncrementX1,balloonRect.centerY() - balloonRect.height() * 0.4f + rightIncrementY1,balloonRect.left + balloonRect.width() * 1.1f + rightIncrementX2,balloonRect.centerY() - balloonRect.height() * 0.15f + rightIncrementY2,balloonRect.left + balloonRect.width() * 0.5f + rightIncrementX3,balloonRect.bottom + rightIncrementY3);  return path;}  }
class C{  @Inject public StandardScriptValidator(StandardScriptEngineManager scriptEngineManager){  Reject.ifNull(scriptEngineManager);  this.scriptEngineManager=scriptEngineManager;}  }
class C{  @Override public void repaint(Rectangle r){}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  @Whitelisted public static void safepoint(){  Continuable.suspend(new Safepoint());}  }
class C{  private ReconTypeHandler createReconTypeHandler(ReconciliationService.ReconAction reconAction) throws BadRequestException {switch (reconAction) {case recon:    return new ReconTypeByQuery(this);case reconById:  return new ReconTypeById(this);default :throw new BadRequestException("Unknown action " + reconAction.toString());}}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    if (!challenged) {      challenged=true;      ChallengeTest.assertNull(requestEvent.getServerTransaction());      Response challenge=protocolObjects.messageFactory.createResponse(401,request);      ToHeader toHeader=(ToHeader)challenge.getHeader(ToHeader.NAME);      toHeader.setTag("challenge");      sipProvider.sendResponse(challenge);      return;    }    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      ChallengeTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ChallengeTest.fail(s);  }}  }
class C{  protected void prepareForUIInstall(){  drawingCache=new Hashtable<TreePath,Boolean>(7);  leftToRight=BasicGraphicsUtils.isLeftToRight(tree);  stopEditingInCompleteEditing=true;  lastSelectedRow=-1;  leadRow=-1;  preferredSize=new Dimension();  largeModel=tree.isLargeModel();  if (getRowHeight() <= 0)   largeModel=false;  setModel(tree.getModel());}  }
class C{  public boolean boolValue(){  if (type == BOOLEAN)   return boolValue; else   return longValue != 0;}  }
class C{  public XMLReaderAdapter(XMLReader xmlReader){  setup(xmlReader);}  }
class C{  public Compiler(ClassLoader baseLoader){  this.baseLoader=baseLoader;}  }
class C{  public PasswordValidatorConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  passwordValidators=new ConcurrentHashMap<>();}  }
class C{  private void assertion(boolean b,String msg){  if (!b) {    String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  @Override public EventHandlers defineEventHandlers(EventHandlersBuilder builder){  builder.setEventHandler(CargoRegistered.class,null);  return builder.build();}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  if (errorMsg != null) {    throw new AuthLoginException(amAuthApplication,errorMsg,null);  }  HttpServletRequest req=getHttpServletRequest();  String userName=null;  String newUserName=null;  String secretParam=null;  if (req != null) {    userName=req.getParameter("IDToken0");    secretParam=req.getParameter("IDToken1");    if (userName == null && secretParam == null) {      userName=req.getParameter("Login.Token0");      secretParam=req.getParameter("Login.Token1");    }  }  if (secretParam == null && userName == null) {    Map map=sendCallback();    if (map == null || map.isEmpty()) {      throw new AuthLoginException(amAuthApplication,"wrongSecret",null);    }    secretParam=(String)map.get("secret");    userName=(String)map.get("uid");  }  if (secretParam == null || secretParam.length() == 0) {    throw new AuthLoginException(amAuthApplication,"noPassword",null);  }  if (secret != null && secret.length() != 0 && secretParam.equals(secret)) {    debug.message("App.validate, secret matched for user : {}",userName);    if (userName == null || userName.length() == 0) {      newUserName=ISAuthConstants.APPLICATION_USER_PREFIX + "gateway";    } else {      newUserName=ISAuthConstants.APPLICATION_USER_PREFIX + userName;    }    String userDNString=ISAuthConstants.APPLICATION_USER_NAMING_ATTR + "=" + newUserName+ ","+ SPECIAL_USERS_CONTAINER+ ","+ getRootSuffix();    if (!isValidUserEntry(userDNString)) {      debug.message("{} is not a valid special user entry",userDNString);      if (!doFallbackAuth(userName,secretParam)) {        debug.error("App validation failed, User not Valid: {}",userName);        setFailureID(userName);        throw new AuthLoginException(amAuthApplication,"userInvalid",null);      }    } else {      userTokenId=userDNString;    }  } else   if (!doFallbackAuth(userName,secretParam)) {    debug.error("App validation failed, User not Valid: " + userName);    setFailureID(userName);    throw new AuthLoginException(amAuthApplication,"userInvalid",null);  }  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0 || isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  InternalSession removeCachedInternalSession(final SessionID sessionId){  if (null == sessionId) {    return null;  }  return sessionAccessManager.removeInternalSession(sessionId);}  }
class C{  public PlaPoint corner_first(){  PlaPoint a_point=corner(0);  return a_point;}  }
class C{  static AxesWalker loadWalkers(WalkingIterator lpi,Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  AxesWalker firstWalker=null;  AxesWalker walker, prevWalker=null;  int analysis=analyze(compiler,stepOpCodePos,stepIndex);  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    walker=createDefaultWalker(compiler,stepOpCodePos,lpi,analysis);    walker.init(compiler,stepOpCodePos,stepType);    walker.exprSetParent(lpi);    if (null == firstWalker) {      firstWalker=walker;    } else {      prevWalker.setNextWalker(walker);      walker.setPrevWalker(prevWalker);    }    prevWalker=walker;    stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);    if (stepOpCodePos < 0)     break;  }  return firstWalker;}  }
class C{  public SQLTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public static boolean isXML11NCNameStart(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NCNAME_START) != 0) || (0x10000 <= c && c < 0xF0000);}  }
class C{  private void parseMajorVersion(String majorVer) throws FSMsgException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequest(Element): invalid " + "MajorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != IFSConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > IFSConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAuthnRequest(Element): " + "MajorVersion of the AuthnRequest is too high.");      }      throw new FSMsgException("requestVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAuthnRequest(Element): " + "MajorVersion of the AuthnRequest is too low.");      }      throw new FSMsgException("requestVersionTooLow",null);    }  }}  }
class C{  public void onServiceConnected(ComponentName className,IBinder service){  Log.d(TAG,"begin FMRadioEMActivity.onServiceConnected");  mService=((FmRadioService.ServiceBinder)service).getService();  if (null == mService) {    Log.e(TAG,"Error: null interface");    finish();    return;  }  mService.registerFmRadioListener(mFmRadioListener);  if (!isServiceInited()) {    Log.d(TAG,"FM service is not init.");    initService(mCurrentStation);    refreshTextStatus(false);    Log.d(TAG,"onService connect.mCurrentStation: " + mCurrentStation);    mService.powerUpAsync(FmRadioUtils.computeFrequency(mCurrentStation));  } else {    Log.d(TAG,"FM service is already init.");    if (isDeviceOpen()) {      int iFreq=getFrequency();      if (FmRadioUtils.isValidStation(iFreq)) {        if (mCurrentStation != iFreq) {          Log.d(TAG,"The frequency in FM service is not same as in database.");          mCurrentStation=iFreq;          FmRadioStation.setCurrentStation(mContext,mCurrentStation);        } else {          Log.d(TAG,"The frequency in FM service is same as in database.");        }      } else {        Log.e(TAG,"Error: invalid frequency in service.");      }      mIsPlaying=isPowerUp();      if (mIsPlaying) {        Log.d(TAG,"FM is already power up.");        refreshTextStatus(true);      }      if (mIsPlaying) {        mPSString=getPS();        mLRTextString=getLRText();        mHandler.sendEmptyMessage(MSGID_UPDATE_RDS);      }    } else {      Log.e(TAG,"Error: FM device is not open");    }    mHandler.sendEmptyMessage(MSGID_INIT_OK);  }  Log.d(TAG,"<<< FMRadioEMActivity.onServiceConnected");}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ToElement createToElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ToElementImpl();}  }
class C{  public ResourceAccessStatement(String resourceID,ProxySubject proxySubject,SessionContext sessionContext,Subject subject) throws SAMLException {  if (subject == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ResourceAccessStatement: should" + " contain one subject.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));  } else {    this._subject=subject;  }  _resourceID=new ResourceID(resourceID);  _proxySubject=proxySubject;  _sessionContext=sessionContext;}  }
class C{  public static boolean resolve(Context context){  boolean enable=resolveEnable(context);  if (!enable) {    AlertDialog alertDialog=createDialog(context);    alertDialog.show();    alertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setTextColor(ContextCompat.getColor(context,R.color.colorAccent));  }  return enable;}  }
class C{  public void activate() throws AMException, SSOException {  setStringAttribute(statusAN,"active");  store();}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  java.util.Locale locale=getLoginLocale();  bundle=amCache.getResBundle(amAuthMembership,locale);  if (debug.messageEnabled()) {    debug.message("Membership getting resource bundle for locale: " + locale);  }  this.options=options;  this.sharedState=sharedState;}  }
class C{  public Request createRequest(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST,xml);  if (obj == null) {    return new RequestImpl(xml);  } else {    return (Request)obj;  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction st){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sips:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      TlsTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);      TlsTest.assertTrue("Secure dialog",this.dialog.isSecure());    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    TlsTest.fail(s);  }}  }
class C{  public final void testDSAPublicKeySpec(){  KeySpec ks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertTrue(ks instanceof DSAPublicKeySpec);}  }
class C{  private void interruptIdleWorkers(){  interruptIdleWorkers(false);}  }
class C{  public static String unescapeName(String txtName){  if (txtName == null) {    return txtName;  }  int len=txtName.length();  if (len == 0) {    return txtName;  }  int indx;  for (int i=0; i < txtName.length(); i++) {    indx=txtName.indexOf(SLASH_ESC_SEQ);    if (indx >= 0) {      String prefixID=txtName.substring(0,indx);      String postfixID=txtName.substring(indx + 5);      txtName=prefixID + "/" + postfixID;    }  }  return (txtName);}  }
class C{  private ProxySubject createProxySubject(NameIdentifier senderIdentity,boolean isBear) throws SecurityTokenException, SAMLException {  SubjectConfirmation subConfirmation=null;  if (isBear) {    subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_BEARER);  } else {    subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_HOLDEROFKEY);    subConfirmation.setKeyInfo(createKeyInfo());  }  return new ProxySubject(senderIdentity,subConfirmation);}  }
class C{  public static Object eval(String e) throws Exception {  return eval(ClassLoader.getSystemClassLoader(),e);}  }
class C{  @Override public <T>List<T> dynamicQuery(DynamicQuery dynamicQuery){  return fooPersistence.findWithDynamicQuery(dynamicQuery);}  }
class C{  public boolean onOptionsItemSelected(MenuItem item){  return false;}  }
class C{  public boolean validate(String value){  try {    Integer.parseInt(value);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  public Task entryToScheduledTask(Entry entry,Operation operation) throws DirectoryException {  AttributeType attrType=DirectoryServer.getSchema().getAttributeType(ATTR_TASK_CLASS);  List<Attribute> attrList=entry.getAllAttributes(attrType);  if (attrList.isEmpty()) {    LocalizableMessage message=ERR_TASKSCHED_NO_CLASS_ATTRIBUTE.get(ATTR_TASK_ID);    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  if (attrList.size() > 1) {    LocalizableMessage message=ERR_TASKSCHED_MULTIPLE_CLASS_TYPES.get(ATTR_TASK_ID);    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  Attribute attr=attrList.get(0);  if (attr.isEmpty()) {    LocalizableMessage message=ERR_TASKSCHED_NO_CLASS_VALUES.get(ATTR_TASK_ID);    throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);  }  Iterator<ByteString> iterator=attr.iterator();  ByteString value=iterator.next();  if (iterator.hasNext()) {    LocalizableMessage message=ERR_TASKSCHED_MULTIPLE_CLASS_VALUES.get(ATTR_TASK_ID);    throw new DirectoryException(ResultCode.OBJECTCLASS_VIOLATION,message);  }  String taskClassName=value.toString();  Class<?> taskClass;  try {    taskClass=DirectoryServer.loadClass(taskClassName);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_TASKSCHED_CANNOT_LOAD_CLASS.get(taskClassName,ATTR_TASK_CLASS,stackTraceToSingleLineString(e));    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  }  Task task;  try {    task=(Task)taskClass.newInstance();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_TASKSCHED_CANNOT_INSTANTIATE_CLASS_AS_TASK.get(taskClassName,Task.class.getName());    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  }  try {    task.initializeTaskInternal(serverContext,this,entry);  } catch (  InitializationException ie) {    logger.traceException(ie);    LocalizableMessage message=ERR_TASKSCHED_CANNOT_INITIALIZE_INTERNAL.get(taskClassName,ie.getMessage());    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  }catch (  Exception e) {    LocalizableMessage message=ERR_TASKSCHED_CANNOT_INITIALIZE_INTERNAL.get(taskClassName,stackTraceToSingleLineString(e));    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  }  if (!TaskState.isDone(task.getTaskState()) && !DirectoryServer.getAllowedTasks().contains(taskClassName)) {    LocalizableMessage message=ERR_TASKSCHED_NOT_ALLOWED_TASK.get(taskClassName);    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  task.setOperation(operation);  if (!TaskState.isDone(task.getTaskState())) {    task.initializeTask();  }  task.setOperation(null);  return task;}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  public int processSectionHeader(ByteBuffer dataBuffer){  int datalength;  byte nextByte=dataBuffer.get();  if (((nextByte & 0xFF) == FILLER_START) || ((nextByte & 0xFF) == FILLER_OTHER) || ((nextByte & 0xFF) == FILLER_END)) {    dataBuffer.get();    dataBuffer.get();    datalength=dataBuffer.get();  } else {    datalength=nextByte;  }  return datalength;}  }
class C{  protected void commit() throws IOException {  response.setCommitted(true);  if (pos > 0) {    socketWrapper.write(isBlocking(),headerBuffer,0,pos);  }}  }
class C{  private UserAttr(UserAttrType userAttrType,EnumBindRuleType type,ParentInheritance parentInheritance){  this.attrStr=null;  this.attrVal=null;  this.userAttrType=userAttrType;  this.type=type;  this.parentInheritance=parentInheritance;}  }
class C{  private static void addOID(ObjectIdentifier oid){  int[] newOid=oid.getOid();  int index=hashIntArray(newOid) % CAPACITY;  ObjectIdentifier[] list=KNOWN_OIDS[index];  int i=0;  for (; list[i] != null; i++) {    if (Arrays.equals(newOid,list[i].getOid())) {      throw new Error("ObjectIdentifier: invalid static initialization; " + "duplicate OIDs: " + oid.getName() + " "+ list[i].getName());    }  }  if (i == (CAPACITY - 1)) {    throw new Error("ObjectIdentifier: invalid static initialization; " + "small OID pool capacity");  }  list[i]=oid;}  }
class C{  public SearchRequestProtocolOp(ByteString baseDN,SearchScope scope,DereferenceAliasesPolicy dereferencePolicy,int sizeLimit,int timeLimit,boolean typesOnly,RawFilter filter,Set<String> attributes){  this.baseDN=baseDN;  this.scope=scope;  this.dereferencePolicy=dereferencePolicy;  this.sizeLimit=sizeLimit;  this.timeLimit=timeLimit;  this.typesOnly=typesOnly;  this.filter=filter;  if (attributes == null) {    this.attributes=new LinkedHashSet<>(0);  } else {    this.attributes=attributes;  }}  }
class C{  @Override public void addRuleInstances(Digester digester){  StringBuilder pattern=new StringBuilder(prefix);  for (int i=0; i < MAX_NESTED_REALM_LEVELS; i++) {    if (i > 0) {      pattern.append('/');    }    pattern.append("Realm");    addRuleInstances(digester,pattern.toString(),i == 0 ? "setRealm" : "addRealm");  }}  }
class C{  private JsonValue validateSession(final String tokenId){  try {    final SSOToken ssoToken=ssoTokenManager.createSSOToken(tokenId);    return validateSession(ssoToken);  } catch (  SSOException e) {    if (LOGGER.errorEnabled()) {      LOGGER.error("SessionResource.validateSession() :: Unable to validate token " + tokenId,e);    }    return sessionResourceUtil.invalidSession();  }}  }
class C{  @NonNull public static Interpolator anticipateOvershoot(int tension){  return new AnticipateOvershootInterpolator(tension);}  }
class C{  public static ManageDsaITRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  public void test_setEndRuleIIIIZ(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,8,Calendar.SUNDAY,1,false);  st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,1,true);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,7,12,0).getTime())));  assertTrue("StartRule improperly set3",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,20,12,0).getTime())));  assertTrue("StartRule improperly set4",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,6,12,0).getTime())));  assertTrue("StartRule improperly set5",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,21,12,0).getTime())));  try {    st.setEndRule(20,15,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,35,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,15,12,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,-1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  private void remove(ThreadGroup g){synchronized (this) {    if (destroyed) {      return;    }    for (int i=0; i < ngroups; i++) {      if (groups[i] == g) {        ngroups-=1;        System.arraycopy(groups,i + 1,groups,i,ngroups - i);        groups[ngroups]=null;        break;      }    }    if (nthreads == 0) {      notifyAll();    }    if (daemon && (nthreads == 0) && (nUnstartedThreads == 0)&& (ngroups == 0)) {      destroy();    }  }}  }
class C{  public void logout() throws AuthLoginException {  if (localFlag) {    acLocal.logout();    return;  }  try {    StringBuilder xml=new StringBuilder(100);    String[] authHandles=new String[1];    authHandles[0]=getAuthenticationHandle(receivedDocument);    xml.append(MessageFormat.format(AuthXMLTags.XML_REQUEST_PREFIX,(Object[])authHandles));    if (appSSOToken != null) {      xml.append(AuthXMLTags.APPSSOTOKEN_BEGIN);      xml.append(appSSOToken.getTokenID().toString()).append(AuthXMLTags.APPSSOTOKEN_END);    }    xml.append(AuthXMLTags.LOGOUT_BEGIN).append(AuthXMLTags.LOGOUT_END).append(AuthXMLTags.XML_REQUEST_SUFFIX);    receivedDocument=processRequest(xml.toString());    checkAndSetLoginStatus();  } catch (  AuthLoginException le) {    loginStatus=Status.FAILED;    loginException=le;  }}  }
class C{  long searchClosestBlockStartToKey(K key) throws ChangelogException {  final long maxPos=getFileLength() - 1;  long lowPos=0L;  long highPos=getClosestBlockStartStrictlyAfterPosition(maxPos);  while (lowPos <= highPos) {    final long middlePos=Math.min((lowPos + highPos) / 2,maxPos);    final long middleBlockStartPos=getClosestBlockStartBeforeOrAtPosition(middlePos);    final Record<K,V> middleRecord=readRecord(middleBlockStartPos);    if (middleRecord == null) {      return -1;    }    final int keyComparison=middleRecord.getKey().compareTo(key);    if (keyComparison < 0) {      if (middleBlockStartPos <= lowPos) {        return lowPos;      }      lowPos=middleBlockStartPos;    } else     if (keyComparison > 0) {      if (middleBlockStartPos >= highPos) {        return highPos;      }      highPos=middleBlockStartPos;    } else {      return middleBlockStartPos;    }  }  return -1;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node refChild;  Node insertedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.createAttribute("title");  elementList=doc.getElementsByTagName("p");  refChild=elementList.item(1);  rootNode=(Element)refChild.getParentNode();{    boolean success=false;    try {      insertedNode=rootNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public MultipleTextEncodedStringNullTerminated(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);  value=new MultipleTextEncodedStringNullTerminated.Values();}  }
class C{  private ChangeRecordEntry parseModifyChangeRecordEntry(DN entryDN,LinkedList<StringBuilder> lines) throws LDIFException {  List<RawModification> modifications=new ArrayList<>();  while (!lines.isEmpty()) {    StringBuilder line=lines.remove();    Attribute attr=readSingleValueAttribute(lines,line,entryDN,null);    String attrDescStr=attr.iterator().next().toString();    String name=attr.getAttributeDescription().getAttributeType().getNameOrOID();    ModificationType modType=toModType(name);    AttributeDescription modAttrDesc=LDIFReader.parseAttrDescription(attrDescStr);    AttributeBuilder builder=new AttributeBuilder(modAttrDesc);    while (!lines.isEmpty()) {      line=lines.remove();      if (line.toString().equals("-")) {        break;      }      builder.addAll(readSingleValueAttribute(lines,line,entryDN,attrDescStr));    }    LDAPAttribute ldapAttr=new LDAPAttribute(builder.toAttribute());    modifications.add(new LDAPModification(modType,ldapAttr));  }  return new ModifyChangeRecordEntry(entryDN,modifications);}  }
class C{  public String toString(){  return this.encode();}  }
class C{  public SignatureException(String msg){  super(msg);}  }
class C{  public void checkOverride_interface(SMethodDef method,SInterfaceDef sInterfaceDef,Set<STypeDef> visitedTypes) throws SyntaxException {  if (visitedTypes.contains(sInterfaceDef))   return;  visitedTypes.add(sInterfaceDef);  SMethodDef methodInSuper=findMethodWithSameSignature(method,sInterfaceDef.methods(),false);  if (methodInSuper == null) {    for (    SInterfaceDef i : sInterfaceDef.superInterfaces()) {      checkOverride_interface(method,i,visitedTypes);    }  } else {    checkFinalAndOverride(method,methodInSuper);  }}  }
class C{  @Override public void attributeRemoved(ServletContextAttributeEvent event){  log("attributeRemoved('" + event.getName() + "', '"+ event.getValue()+ "')");}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.ObjectElement createObjectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.ObjectElementImpl();}  }
class C{  public static void exportCertificate(CertificateManager certManager,String alias,String path) throws CertificateEncodingException, IOException, KeyStoreException {  final Certificate certificate=certManager.getCertificate(alias != null ? alias : certManager.getCertificateAliases()[0]);  byte[] certificateBytes=certificate.getEncoded();  try (FileOutputStream outputStream=new FileOutputStream(path,false)){    outputStream.write(certificateBytes);  } }  }
class C{  public final void testGetType01(){  CRL crl=new MyCRL("TEST_TYPE");  assertEquals("TEST_TYPE",crl.getType());}  }
class C{  static void putEntityConfig(String realm,String entityId,FederationConfigElement config){  String cacheKey=buildCacheKey(realm,entityId);  if (config != null) {    if (debug.messageEnabled()) {      debug.message("SAML2MetaCache.putEntityConfig: cacheKey = " + cacheKey);    }    configCache.put(cacheKey,config);  } else {    if (debug.messageEnabled()) {      debug.message("SAML2MetaCache.putEntityConfig: delete cacheKey = " + cacheKey);    }    configCache.remove(cacheKey);  }}  }
class C{  public BarcodeEANSUPP(Barcode1D ean,Barcode1D supp){  super(ean.document);  n=8;  this.ean=ean;  this.supp=supp;}  }
class C{  public void removeChildren(){  children=null;}  }
class C{  boolean equals(SAML2SessionPartner partner){  if (this.sessionPartner.equals(partner.getPartner()) && (this.isRoleIDP == partner.isIDPRole())) {    return true;  }  return false;}  }
class C{  public JsonValue introspect(OAuth2Request request) throws InvalidClientException, InvalidRequestException, NotFoundException, ServerException {  ClientRegistration clientRegistration=clientAuthenticator.authenticate(request,urisFactory.get(request).getIntrospectionEndpoint());  String tokenType=request.getParameter(TOKEN_TYPE_HINT);  String tokenId=request.getParameter(TOKEN);  for (  TokenIntrospectionHandler handler : handlers) {    JsonValue result=handler.introspect(request,clientRegistration.getClientId(),tokenType,tokenId);    if (result != null) {      return result;    }  }  return json(object(field(ACTIVE,false)));}  }
class C{  public String nextToken() throws NoSuchElementException, ParseException {  if (this.currentToken == null) {    throw new NoSuchElementException("Iteration already finished.");  }  final String result=this.currentToken;  this.searchPos=findNext(this.searchPos);  return result;}  }
class C{  @Override public void leftOver(Serializable msg,Member sender){  System.out.println("Received a left over message from [" + sender.getName() + "] with data ["+ msg+ "]");}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    in.close();  }}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  protected EncryptedDeviceStorage(ServiceConfigManager configManager,String realm,String debugLocation) throws SMSException, SSOException {  debug=Debug.getInstance(debugLocation);  try {    ServiceConfig scm=configManager.getOrganizationConfig(realm,null);    options=scm.getAttributes();  } catch (  SMSException|SSOException e) {    if (debug.errorEnabled()) {      debug.error("Error connecting to SMS to retrieve config for EncryptedDeviceStorage.",e);    }    throw e;  }}  }
class C{  public void goBack(){  webView.goBack();}  }
class C{  public void addRecord(final JKTableRecord record){  geteRecords().add(record);  fireTableRowsInserted(getRowCount() - 1,getRowCount() - 1);}  }
class C{  public RxGalleryFinal cropMaxBitmapSize(@IntRange(from=100) int maxBitmapSize){  configuration.setMaxBitmapSize(maxBitmapSize);  return this;}  }
class C{  boolean isForwardSuccess(){  return forwardSuccess;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SpnegoContextTokenElement createSpnegoContextTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SpnegoContextTokenElementImpl();}  }
class C{  public void e(Object str){  if (logFlag) {    if (logLevel <= android.util.Log.ERROR) {      String name=getFunctionName();      if (name != null) {        android.util.Log.e(tag,name + " - " + str);      } else {        android.util.Log.e(tag,str.toString());      }    }  }}  }
class C{  public ContentDescription(final long pos,final BigInteger chunkLen){  super(ContainerType.CONTENT_DESCRIPTION,pos,chunkLen);}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public void addTokenOperation(TokenType type,CTSOperation operation,boolean success){  OperationStore operationStoreForTokenType=tokenOperations.get(type);  if (operationStoreForTokenType == null) {    operationStoreForTokenType=operationStoreFactory.createOperationStore();    tokenOperations.put(type,operationStoreForTokenType);  }  operationStoreForTokenType.add(operation);  addTokenOperation(operation,success);}  }
class C{  public Object clone(){  SessionCondition theClone=null;  try {    theClone=(SessionCondition)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator it=properties.keySet().iterator();    while (it.hasNext()) {      Object o=it.next();      Set values=new HashSet();      values.addAll((Set)properties.get(o));      theClone.properties.put(o,values);    }  }  return theClone;}  }
class C{  public void testNegatePositive(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  byte rBytes[]={-13,-57,-101,1,75,-90,-46,-92,-4,14,-36,-27,-4,-91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.negate();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == -1);}  }
class C{  protected MouseListener createListMouseListener(){  return getHandler();}  }
class C{  public static WindowListener remove(WindowListener l,WindowListener oldl){  return (WindowListener)removeInternal(l,oldl);}  }
class C{  public void addJob(String jobId){  if (!jobs.contains(jobId)) {    jobs.add(jobId);  }}  }
class C{  public boolean beginContentButtonLoginDisplay(ChildDisplayEvent event){  return (!LoginSuccess && !LoginFail);}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSReturnLogoutServlet doGetPost...");  String providerAlias=request.getParameter(IFSConstants.META_ALIAS);  if (providerAlias == null || providerAlias.length() < 1) {    providerAlias=FSServiceUtils.getMetaAlias(request);  }  if (providerAlias == null || providerAlias.length() < 1) {    FSUtils.debug.message("Unable to retrieve alias, Hosted" + " Provider. Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  Object ssoToken=null;  try {    SessionProvider sessionProvider=SessionManager.getProvider();    ssoToken=sessionProvider.getSession(request);    if ((ssoToken == null) || (!sessionProvider.isValid(ssoToken))) {      FSUtils.debug.message("FSReturnLogoutRequest: Unable to get principal");      response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullSSOToken"));      return;    }    univId=sessionProvider.getPrincipalName(ssoToken);  } catch (  SessionException ssoExp) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSReturnLogoutRequest: Unable to get principal",ssoExp);    }    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullSSOToken"));    return;  }  if (metaManager == null) {    FSUtils.debug.error("Failed to get meta manager");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FEDERATION_FAILED_META_INSTANCE));    return;  }  String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);  String hostedRole=null;  String hostedEntityId=null;  BaseConfigType hostedConfig=null;  try {    hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    if (hostedRole != null) {      if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {        hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);      } else       if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {        hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);      }    }    if (hostedConfig == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException e) {    FSUtils.debug.error("Failed to get Hosted Provider");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  setLogoutURL(request,hostedConfig,providerAlias);  FSLogoutResponse logoutResponse=null;  try {    logoutResponse=FSLogoutResponse.parseURLEncodedRequest(request);  } catch (  FSMsgException e) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.LOGOUT_REQUEST_IMPROPER,IFSConstants.LOGOUT_FAILED);    return;  }catch (  SAMLException e) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.LOGOUT_REQUEST_IMPROPER,IFSConstants.LOGOUT_FAILED);    return;  }  String remoteEntityId=logoutResponse.getProviderId();  ProviderDescriptorType remoteDesc=null;  boolean isRemoteIDP=false;  try {    if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {      remoteDesc=metaManager.getSPDescriptor(realm,remoteEntityId);    } else     if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {      remoteDesc=metaManager.getIDPDescriptor(realm,remoteEntityId);      isRemoteIDP=true;    }  } catch (  IDFFMetaException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutReturnServlet.doGetPost:",e);    }  }  if (remoteDesc == null) {    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.LOGOUT_REQUEST_IMPROPER,IFSConstants.LOGOUT_FAILED);    return;  }  boolean bVerify=true;  if (FSServiceUtils.isSigningOn()) {    try {      bVerify=verifyResponseSignature(request,remoteDesc,remoteEntityId,isRemoteIDP);    } catch (    SAMLException e) {      bVerify=false;    }catch (    FSException e) {      bVerify=false;    }  }  Status status=logoutResponse.getStatus();  String logoutStatus=status.getStatusCode().getValue();  if (logoutStatus.equalsIgnoreCase(IFSConstants.SAML_SUCCESS) || !isRemoteIDP) {    FSLogoutUtil.removeCurrentSessionPartner(providerAlias,remoteEntityId,ssoToken,univId);  }  if (bVerify) {    if (!logoutStatus.equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {      FSReturnSessionManager localManager=FSReturnSessionManager.getInstance(providerAlias);      if (localManager != null) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("update status of logout to failure " + " in session manager");        }        localManager.setLogoutStatus(logoutStatus,univId);      } else {        FSUtils.debug.message("Cannot get FSReturnSessionManager");      }      FSUtils.debug.error("FSReturnLogoutServlet, failed logout response " + logoutStatus);      String[] data={univId};      LogUtil.error(Level.INFO,LogUtil.LOGOUT_FAILED,data,ssoToken);      FSLogoutUtil.sendErrorPage(request,response,providerAlias);      return;    }  } else {    FSUtils.debug.error("FSReturnLogoutServlet " + "Signature on logout response is invalid" + "Cannot proceed logout");    String[] data={univId};    LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data,ssoToken);    FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.LOGOUT_REQUEST_IMPROPER,IFSConstants.LOGOUT_FAILED);    return;  }  StringBuffer processLogout=new StringBuffer();  request.setAttribute("logoutSource","remote");  processLogout.append(IFSConstants.SLO_VALUE).append("/").append(IFSConstants.META_ALIAS).append(providerAlias);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("About to get RequestDispatcher for " + processLogout.toString());  }  RequestDispatcher dispatcher=getServletConfig().getServletContext().getRequestDispatcher(processLogout.toString());  if (dispatcher == null) {    FSUtils.debug.message("RequestDispatcher is null");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Unable to find " + processLogout + "\ncalling sendErrorPage ");    }    FSLogoutUtil.sendErrorPage(request,response,providerAlias);    return;  }  dispatcher.forward(request,response);  return;}  }
class C{  public void testGetCertificateChain(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  Certificate[] res=ksPKE.getCertificateChain();  assertEquals("Incorrect chain length",testChain.length,res.length);  for (int i=0; i < res.length; i++) {    assertEquals("Incorrect chain element: ".concat(Integer.toString(i)),testChain[i],res[i]);  }}  }
class C{  public ExtractedObject(final Object object,final Context context){  this.object=object;  this.context=context;}  }
class C{  protected void handleEnd(Collection<T> results) throws IOException {}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  private static void touchUpDataModel(XMPMetaImpl xmp) throws XMPException {  XMPNodeUtils.findSchemaNode(xmp.getRoot(),XMPConst.NS_DC,true);  for (Iterator it=xmp.getRoot().iterateChildren(); it.hasNext(); ) {    XMPNode currSchema=(XMPNode)it.next();    if (XMPConst.NS_DC.equals(currSchema.getName())) {      normalizeDCArrays(currSchema);    } else     if (XMPConst.NS_EXIF.equals(currSchema.getName())) {      fixGPSTimeStamp(currSchema);      XMPNode arrayNode=XMPNodeUtils.findChildNode(currSchema,"exif:UserComment",false);      if (arrayNode != null) {        repairAltText(arrayNode);      }    } else     if (XMPConst.NS_DM.equals(currSchema.getName())) {      XMPNode dmCopyright=XMPNodeUtils.findChildNode(currSchema,"xmpDM:copyright",false);      if (dmCopyright != null) {        migrateAudioCopyright(xmp,dmCopyright);      }    } else     if (XMPConst.NS_XMP_RIGHTS.equals(currSchema.getName())) {      XMPNode arrayNode=XMPNodeUtils.findChildNode(currSchema,"xmpRights:UsageTerms",false);      if (arrayNode != null) {        repairAltText(arrayNode);      }    }  }}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public static Response sendAttributeQuery(AttributeQuery attrQuery,String attrAuthorityEntityID,String realm,String attrQueryProfile,String attrProfile,String binding) throws SAML2Exception {  AttributeAuthorityDescriptorElement aad=null;  try {    aad=metaManager.getAttributeAuthorityDescriptor(realm,attrAuthorityEntityID);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("AttributeQueryUtil.sendAttributeQuery:",sme);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  if (aad == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("attrAuthorityNotFound"));  }  if (binding == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  String location=findLocation(aad,binding,attrQueryProfile,attrProfile);  if (location == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("attrAuthorityNotFound"));  }  if (binding.equalsIgnoreCase(SAML2Constants.SOAP)) {    signAttributeQuery(attrQuery,realm,false);    return sendAttributeQuerySOAP(attrQuery,location,attrAuthorityEntityID,aad);  } else {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }}  }
class C{  private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  public void print(float fnum){  print(String.valueOf(fnum));}  }
class C{  private TimSort(T[] a,Comparator<? super T> c){  this.a=a;  this.c=c;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public void testDomainNotAutomaticallyPrefixedWithDot(){  HttpCookie cookie=new HttpCookie("Foo","foo");  cookie.setDomain("localhost");  assertEquals("localhost",cookie.getDomain());}  }
class C{  @Override public void addRuleInstances(Digester digester){  StringBuilder pattern=new StringBuilder(prefix);  for (int i=0; i < MAX_NESTED_LEVELS; i++) {    if (i > 0) {      pattern.append('/');    }    pattern.append("CredentialHandler");    addRuleInstances(digester,pattern.toString(),i == 0 ? "setCredentialHandler" : "addCredentialHandler");  }}  }
class C{  private boolean isCutoverYear(int normalizedYear){  int cutoverYear=(calsys == gcal) ? gregorianCutoverYear : gregorianCutoverYearJulian;  return normalizedYear == cutoverYear;}  }
class C{  protected static AttrSet mapToAttrSet(Map map){  return mapToAttrSet(map,false);}  }
class C{  public InvalidDescriptionException(final Throwable cause,final String message){  super(message,cause);}  }
class C{  public Set<String> subEntries(SSOToken token,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  if (filter == null) {    filter="*";  }  if (debug.messageEnabled()) {    debug.message("SMSLdapObject: SubEntries search: " + dn);  }  String sfilter="(objectClass=*)";  if (!filter.equals("*")) {    String[] objs={filter};    sfilter=MessageFormat.format(getSearchFilter(),(Object[])objs);  }  Set answer=getSubEntries(token,dn,sfilter,numOfEntries,sortResults,ascendingOrder);  return (answer);}  }
class C{  public int read(ByteBuffer buf,NioChannel socket,Selector selector,long readTimeout) throws IOException {  return read(buf,socket,selector,readTimeout,true);}  }
class C{  public void addWrapper(String jspUri,JspServletWrapper jsw){  jsps.put(jspUri,jsw);}  }
class C{  private int calculateCorner(Window w,int x,int y){  Insets insets=w.getInsets();  int xPosition=calculatePosition(x - insets.left,w.getWidth() - insets.left - insets.right);  int yPosition=calculatePosition(y - insets.top,w.getHeight() - insets.top - insets.bottom);  if (xPosition == -1 || yPosition == -1) {    return -1;  }  return yPosition * 5 + xPosition;}  }
class C{  private void configure() throws NullLocationException, FormatterInitException {  String Interval=lmanager.getProperty(LogConstants.LOGSIGN_PERIODINSECONDS);  if ((Interval == null) || (Interval.length() == 0)) {    signInterval=LogConstants.LOGSIGN_PERIODINSECONDS_DEFAULT * 1000;  } else {    signInterval=Long.parseLong(Interval) * 1000;  }  String strMaxFileSize=lmanager.getProperty(LogConstants.MAX_FILE_SIZE);  if ((strMaxFileSize == null) || (strMaxFileSize.length() == 0)) {    maxFileSize=0;  } else {    maxFileSize=Integer.parseInt(strMaxFileSize);  }  location=lmanager.getProperty(LogConstants.LOG_PROP_PREFIX + "." + logName+ ".location");  if (location == null) {    location=lmanager.getProperty(LogConstants.LOG_LOCATION);  }  if ((location == null) || (location.length() == 0)) {    throw new NullLocationException("Location Not Specified");  }  if (!location.endsWith(File.separator)) {    location+=File.separator;  }  String filesPerKeyStoreString=lmanager.getProperty(LogConstants.FILES_PER_KEYSTORE);  if ((filesPerKeyStoreString == null) || (filesPerKeyStoreString.length() == 0)) {    if (Debug.warningEnabled()) {      Debug.warning(logName + ":Archiver: could not get the files " + "per keystore str setting it to 1");    }    filesPerKeyStoreString="5";  }  filesPerKeyStore=Integer.parseInt(filesPerKeyStoreString);  if (Debug.messageEnabled()) {    Debug.message(logName + ":Files per Key Store = " + filesPerKeyStoreString);  }  String archiverClassString=lmanager.getProperty(LogConstants.ARCHIVER);  if ((archiverClassString == null) || (archiverClassString.length() == 0)) {    throw new NullLocationException("Archvier class not specified");  }  archiverClass=archiverClassString;}  }
class C{  private static String createInvalidAttemptsXML(int invalidCount,long lastFailed,long lockedOutAt,long actualLockoutDuration){  StringBuilder xmlBuffer=new StringBuilder(150);  xmlBuffer.append(BEGIN_XML).append(INVALID_PASS_COUNT_BEGIN).append(String.valueOf(invalidCount)).append(INVALID_PASS_COUNT_END).append(LAST_FAILED_BEGIN).append(String.valueOf(lastFailed)).append(LAST_FAILED_END).append(LOCKEDOUT_AT_BEGIN).append(String.valueOf(lockedOutAt)).append(LOCKEDOUT_AT_END).append(ACTUAL_LOCKOUT_DURATION_BEGIN).append(String.valueOf(actualLockoutDuration)).append(ACTUAL_LOCKOUT_DURATION_END).append(END_XML);  return xmlBuffer.toString();}  }
class C{  public SQLTimeoutException(String reason){  super(reason,null,0);}  }
class C{  public char next(){  pos+=1;  int end=offset + count;  if (pos >= end) {    pos=end;    return DONE;  }  return current();}  }
class C{  public static String requestUrl(final String url,final String method,final Properties header,final String body){  try {    final URL siteUrl=new URL(url);    final HttpURLConnection connection=(HttpURLConnection)siteUrl.openConnection();    connection.setRequestMethod(method);    final Enumeration<?> keys=header.keys();    while (keys.hasMoreElements()) {      final String key=(String)keys.nextElement();      connection.addRequestProperty(key,header.getProperty(key));    }    connection.setDoOutput(true);    final OutputStream out=connection.getOutputStream();    out.write(body.getBytes());    connection.connect();    final int errorCode=connection.getResponseCode();    if (errorCode != HttpURLConnection.HTTP_OK) {      throw new JKHttpException(connection.getResponseMessage(),errorCode);    }    final String response=JKIOUtil.convertToString(connection.getInputStream());    return response;  } catch (  IOException e) {    throw new JKHttpException(e);  }}  }
class C{  public static byte[] flateDecode(byte[] input){  byte[] b=flateDecode(input,true);  if (b == null)   return flateDecode(input,false);  return b;}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  public static String toBinaryString(int i){  return IntegralToString.intToBinaryString(i);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof SSOTokenPrincipal)) {    return false;  }  SSOTokenPrincipal that=(SSOTokenPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  private static String convertInt(AbstractStringBuilder sb,int i){  boolean negative=false;  String quickResult=null;  if (i < 0) {    negative=true;    i=-i;    if (i < 100) {      if (i < 0) {        quickResult="-2147483648";      } else {        quickResult=SMALL_NEGATIVE_VALUES[i];        if (quickResult == null) {          SMALL_NEGATIVE_VALUES[i]=quickResult=i < 10 ? stringOf('-',ONES[i]) : stringOf('-',TENS[i],ONES[i]);        }      }    }  } else {    if (i < 100) {      quickResult=SMALL_NONNEGATIVE_VALUES[i];      if (quickResult == null) {        SMALL_NONNEGATIVE_VALUES[i]=quickResult=i < 10 ? stringOf(ONES[i]) : stringOf(TENS[i],ONES[i]);      }    }  }  if (quickResult != null) {    if (sb != null) {      sb.append0(quickResult);      return null;    }    return quickResult;  }  int bufLen=11;  char[] buf=(sb != null) ? BUFFER.get() : new char[bufLen];  int cursor=bufLen;  while (i >= (1 << 16)) {    int q=(int)((0x51EB851FL * i) >>> 37);    int r=i - 100 * q;    buf[--cursor]=ONES[r];    buf[--cursor]=TENS[r];    i=q;  }  while (i != 0) {    int q=(0xCCCD * i) >>> 19;    int r=i - 10 * q;    buf[--cursor]=DIGITS[r];    i=q;  }  if (negative) {    buf[--cursor]='-';  }  if (sb != null) {    sb.append0(buf,cursor,bufLen - cursor);    return null;  } else {    return new String(cursor,bufLen - cursor,buf);  }}  }
class C{  public void writeRejectedEntries(OutputStream outputStream){  if (outputStream == null) {    closeRejectWriter();    return;  }  rejectWriter=new BufferedWriter(new OutputStreamWriter(outputStream));}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s5_several_branches();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  if (("image/svg+xml".equals(getContentType()))) {    assertSize("entitySizeSVG",7,entityList);  } else {    assertSize("entitySize",5,entityList);  }}  }
class C{  public Object clone(){  ChoiceFormat other=(ChoiceFormat)super.clone();  other.choiceLimits=choiceLimits.clone();  other.choiceFormats=choiceFormats.clone();  return other;}  }
class C{  public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    skipLF=markedSkipLF;  }}  }
class C{  public boolean route_to(PlaPointFloat p_corner){  if (!layer_active_arr[layer_active_no])   return false;  PlaPointInt curr_corner=p_corner.round();  if (curr_corner.equals(prev_corner))   return false;  if (!r_board.contains(prev_corner))   return false;  if (!r_board.contains(curr_corner))   return false;  if (!r_board.layer_structure.is_signal(layer_active_no))   return false;  if (nearest_target_item instanceof BrdAbit) {    BrdAbit target=(BrdAbit)nearest_target_item;    if (prev_corner.equals(target.center_get()))     return true;  }  shove_failing_obstacle=null;  BrdItem end_routing_item=r_board.pick_nearest_routing_item(prev_corner,layer_active_no,null);  nearest_target_item=r_board.pick_nearest_routing_item(curr_corner,layer_active_no,end_routing_item);  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_CHECK_FORCED_TRACE_TIME_MAX);  PlaPointInt ok_point=r_board.insert_trace(prev_corner,curr_corner,pen_half_width_arr[layer_active_no],layer_active_no,net_nos,clearance_class,max_shove_trace_recursion_depth,max_shove_via_recursion_depth,max_spring_over_recursion_depth,itera_settings.trace_pullt_min_move,!is_stitch_mode,t_limit);  if (ok_point == prev_corner && itera_settings.is_automatic_neckdown()) {    ok_point=try_neckdown_at_start(curr_corner);  }  if (ok_point == prev_corner && itera_settings.is_automatic_neckdown()) {    ok_point=try_neckdown_at_end(prev_corner,curr_corner);  }  if (ok_point == null) {    r_board.undo(null);    return !is_stitch_mode;  }  if (ok_point == prev_corner) {    set_shove_failing_obstacle(r_board.shove_fail_obstacle_get());    return false;  }  prev_corner=ok_point;  boolean route_completed=false;  if (ok_point == curr_corner) {    route_completed=connect_to_target(curr_corner);  }  NetNosList opt_net_no_arr=max_shove_trace_recursion_depth <= 0 ? net_nos : NetNosList.EMPTY;  if (route_completed) {    r_board.reduce_nets_of_route_items();    for (    int curr_net_no : net_nos)     r_board.combine_traces(curr_net_no);  } else {    update_nearest_target_point(prev_corner.to_float());  }  t_limit=new TimeLimitStoppable(s_PULL_TIGHT_TIME_MAX);  r_board.changed_area_optimize(opt_net_no_arr,itera_settings.trace_pullt_min_move,null,t_limit,new BrdKeepPoint(ok_point,layer_active_no));  return route_completed;}  }
class C{  private void initialize() throws IOException {  if (schema == null) {    schema=Schema.getDefaultSchema();  }  templateFile=new TemplateFile(schema,constants,resourcePath,random,generateBranches);  try {    if (templatePath != null) {      templateFile.parse(templatePath,warnings);    } else     if (templateLines != null) {      templateFile.parse(templateLines,warnings);    } else     if (templateStream != null) {      templateFile.parse(templateStream,warnings);    } else {      templateFile.parse(warnings);    }  } catch (  IOException e) {    throw e;  }catch (  Exception e) {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_EXCEPTION_DURING_PARSE.get(e.getMessage()),e);  }}  }
class C{  public ExpirationCheckTrustManager(X509TrustManager trustManager){  this.trustManager=trustManager;}  }
class C{  public void send(ByteBuffer buffer) throws InterruptedException, IOException {  if (!connected.get())   throw new IOException("not connected");synchronized (writeBuf) {    if (writeBuf.remaining() < buffer.remaining()) {      writeBuf.flip();      while (writeBuf.hasRemaining() && channel.write(writeBuf) > 0) {      }      writeBuf.compact();    }    if (Thread.currentThread().getId() != thread.getId()) {      while (writeBuf.remaining() < buffer.remaining())       writeBuf.wait();    } else {      if (writeBuf.remaining() < buffer.remaining())       throw new IOException("send buffer full");    }    writeBuf.put(buffer);    writeBuf.flip();    while (writeBuf.hasRemaining() && channel.write(writeBuf) > 0) {    }    writeBuf.compact();    if (writeBuf.hasRemaining()) {      SelectionKey key=channel.keyFor(selector);      key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);      selector.wakeup();    }  }}  }
class C{  public double distance_signed(PlaPointFloat p_point){  double dx=point_b.v_x - point_a.v_x;  double dy=point_b.v_y - point_a.v_y;  double det=dy * (p_point.v_x - point_a.v_x) - dx * (p_point.v_y - point_a.v_y);  double length=Math.sqrt(dx * dx + dy * dy);  return det / length;}  }
class C{  public void ensureFileIsVisible(JFileChooser a,File b){  for (int i=0; i < uis.size(); i++) {    ((FileChooserUI)(uis.elementAt(i))).ensureFileIsVisible(a,b);  }}  }
class C{  public Object next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);          zzCurrentPosL+=Character.charCount(zzInput);        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);            zzCurrentPosL+=Character.charCount(zzInput);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {      zzAtEOF=true;      return null;    } else {switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{          yybegin(YYINITIAL);          return yytext();        }case 122:      break;case 2:{      throw new Error("Illegal character <" + yytext() + ">");    }case 123:  break;case 3:{}case 124:break;case 4:{return yytext();}case 125:break;case 5:{return new Integer(yytext());}case 126:break;case 6:{string.setLength(0);yybegin(STRING1);}case 127:break;case 7:{string.setLength(0);yybegin(STRING2);}case 128:break;case 8:{return DsnKeyword.OPEN_BRACKET;}case 129:break;case 9:{return DsnKeyword.CLOSED_BRACKET;}case 130:break;case 10:{string.append(yytext());}case 131:break;case 11:{yybegin(YYINITIAL);return string.toString();}case 132:break;case 12:{string.append('\\');}case 133:break;case 13:{yybegin(YYINITIAL);return DsnKeyword.OPEN_BRACKET;}case 134:break;case 14:{yybegin(YYINITIAL);return DsnKeyword.CLOSED_BRACKET;}case 135:break;case 15:{return new Double(yytext());}case 136:break;case 16:{return DsnKeyword.ON;}case 137:break;case 17:{return DsnKeyword.OFF;}case 138:break;case 18:{yybegin(NAME);return DsnKeyword.VIA;}case 139:break;case 19:{yybegin(NAME);return DsnKeyword.NET;}case 140:break;case 20:{return DsnKeyword.PCB_SCOPE;}case 141:break;case 21:{return DsnKeyword.PIN;}case 142:break;case 22:{return DsnKeyword.FIX;}case 143:break;case 23:{yybegin(YYINITIAL);return DsnKeyword.PCB_SCOPE;}case 144:break;case 24:{return DsnKeyword.BACK;}case 145:break;case 25:{return DsnKeyword.SIDE;}case 146:break;case 26:{return DsnKeyword.TYPE;}case 147:break;case 27:{yybegin(NAME);return DsnKeyword.COMPONENT_SCOPE;}case 148:break;case 28:{yybegin(LAYER_NAME);return DsnKeyword.CIRCLE;}case 149:break;case 29:{return DsnKeyword.VIAS;}case 150:break;case 30:{return DsnKeyword.NONE;}case 151:break;case 31:{yybegin(LAYER_NAME);return DsnKeyword.POLYGON_PATH;}case 152:break;case 32:{yybegin(LAYER_NAME);return DsnKeyword.POLYGON;}case 153:break;case 33:{return DsnKeyword.PINS;}case 154:break;case 34:{yybegin(LAYER_NAME);return DsnKeyword.RECTANGLE;}case 155:break;case 35:{return DsnKeyword.RULE;}case 156:break;case 36:{yybegin(NAME);return DsnKeyword.WIRE;}case 157:break;case 37:{return DsnKeyword.SPARE;}case 158:break;case 38:{return DsnKeyword.SHAPE;}case 159:break;case 39:{return DsnKeyword.ORDER;}case 160:break;case 40:{yybegin(NAME);return DsnKeyword.LAYER;}case 161:break;case 41:{return DsnKeyword.CLEARANCE;}case 162:break;case 42:{yybegin(NAME);return DsnKeyword.CLASS;}case 163:break;case 43:{yybegin(NAME);return DsnKeyword.IMAGE;}case 164:break;case 44:{return DsnKeyword.POWER;}case 165:break;case 45:{yybegin(NAME);return DsnKeyword.PLACE;}case 166:break;case 46:{yybegin(NAME);return DsnKeyword.PLANE_SCOPE;}case 167:break;case 47:{return DsnKeyword.RULES;}case 168:break;case 48:{return DsnKeyword.FRONT;}case 169:break;case 49:{return DsnKeyword.WIDTH;}case 170:break;case 50:{return DsnKeyword.ATTACH;}case 171:break;case 51:{return DsnKeyword.ACTIVE;}case 172:break;case 52:{return DsnKeyword.SIGNAL;}case 173:break;case 53:{return DsnKeyword.LENGTH;}case 174:break;case 54:{return DsnKeyword.NORMAL;}case 175:break;case 55:{return DsnKeyword.PARSER_SCOPE;}case 176:break;case 56:{return DsnKeyword.ROUTES;}case 177:break;case 57:{return DsnKeyword.ROTATE;}case 178:break;case 58:{return DsnKeyword.FANOUT;}case 179:break;case 59:{return DsnKeyword.FROMTO;}case 180:break;case 60:{return DsnKeyword.WINDOW;}case 181:break;case 61:{return DsnKeyword.WIRING_SCOPE;}case 182:break;case 62:{yybegin(YYINITIAL);return DsnKeyword.SIGNAL;}case 183:break;case 63:{return DsnKeyword.SESSION;}case 184:break;case 64:{return DsnKeyword.OUTLINE;}case 185:break;case 65:{return DsnKeyword.LIBRARY_SCOPE;}case 186:break;case 66:{yybegin(NAME);return DsnKeyword.USE_VIA;}case 187:break;case 67:{yybegin(NAME);return DsnKeyword.USE_NET;}case 188:break;case 68:{return DsnKeyword.CONTROL;}case 189:break;case 69:{return DsnKeyword.CLASSES;}case 190:break;case 70:{return DsnKeyword.CIRCUIT;}case 191:break;case 71:{return DsnKeyword.NETWORK_SCOPE;}case 192:break;case 72:{return DsnKeyword.PROTECT;}case 193:break;case 73:{yybegin(NAME);return DsnKeyword.KEEPOUT;}case 194:break;case 74:{return DsnKeyword.ABSOLUTE;}case 195:break;case 75:{return DsnKeyword.BOUNDARY;}case 196:break;case 76:{return DsnKeyword.CONSTANT;}case 197:break;case 77:{return DsnKeyword.VERTICAL;}case 198:break;case 78:{return DsnKeyword.VIA_RULE;}case 199:break;case 79:{yybegin(NAME);return DsnKeyword.PADSTACK;}case 200:break;case 80:{return DsnKeyword.POSITION;}case 201:break;case 81:{yybegin(NAME);return DsnKeyword.HOST_CAD;}case 202:break;case 82:{return DsnKeyword.AUTOROUTE;}case 203:break;case 83:{return DsnKeyword.STRUCTURE_SCOPE;}case 204:break;case 84:{return DsnKeyword.LOCK_TYPE;}case 205:break;case 85:{yybegin(NAME);return DsnKeyword.USE_LAYER;}case 206:break;case 86:{return DsnKeyword.VIA_COSTS;}case 207:break;case 87:{return DsnKeyword.POSTROUTE;}case 208:break;case 88:{return DsnKeyword.PLACEMENT_SCOPE;}case 209:break;case 89:{return DsnKeyword.SNAP_ANGLE;}case 210:break;case 90:{yybegin(NAME);return DsnKeyword.LAYER_RULE;}case 211:break;case 91:{return DsnKeyword.VIA_AT_SMD;}case 212:break;case 92:{return DsnKeyword.PULL_TIGHT;}case 213:break;case 93:{return DsnKeyword.RESOLUTION_SCOPE;}case 214:break;case 94:{return DsnKeyword.FLIP_STYLE;}case 215:break;case 95:{return DsnKeyword.HORIZONTAL;}case 216:break;case 96:{return DsnKeyword.SHOVE_FIXED;}case 217:break;case 97:{return DsnKeyword.CLASS_CLASS;}case 218:break;case 98:{yybegin(NAME);return DsnKeyword.VIA_KEEPOUT;}case 219:break;case 99:{return DsnKeyword.NETWORK_OUT;}case 220:break;case 100:{yybegin(IGNORE_QUOTE);return DsnKeyword.STRING_QUOTE;}case 221:break;case 101:{yybegin(NAME);return DsnKeyword.LOGICAL_PART;}case 222:break;case 102:{return DsnKeyword.PART_LIBRARY_SCOPE;}case 223:break;case 103:{return DsnKeyword.ROTATE_FIRST;}case 224:break;case 104:{yybegin(NAME);return DsnKeyword.HOST_VERSION;}case 225:break;case 105:{return DsnKeyword.KEEPOUT;}case 226:break;case 106:{return DsnKeyword.START_PASS_NO;}case 227:break;case 107:{return DsnKeyword.NINETY_DEGREE;}case 228:break;case 108:{yybegin(LAYER_NAME);return DsnKeyword.POLYLINE_PATH;}case 229:break;case 109:{return DsnKeyword.PLACE_CONTROL;}case 230:break;case 110:{yybegin(NAME);return DsnKeyword.PLACE_KEEPOUT;}case 231:break;case 111:{yybegin(NAME);return DsnKeyword.CLEARANCE_CLASS;}case 232:break;case 112:{return DsnKeyword.PLANE_VIA_COSTS;}case 233:break;case 113:{return DsnKeyword.FORTYFIVE_DEGREE;}case 234:break;case 114:{return DsnKeyword.WRITE_RESOLUTION;}case 235:break;case 115:{return DsnKeyword.START_RIPUP_COSTS;}case 236:break;case 116:{return DsnKeyword.AUTOROUTE_SETTINGS;}case 237:break;case 117:{return DsnKeyword.PREFERRED_DIRECTION;}case 238:break;case 118:{yybegin(NAME);return DsnKeyword.LOGICAL_PART_MAPPING;}case 239:break;case 119:{return DsnKeyword.GENERATED_BY_FREEROUTE;}case 240:break;case 120:{return DsnKeyword.PREFERRED_DIRECTION_TRACE_COSTS;}case 241:break;case 121:{return DsnKeyword.AGAINST_PREFERRED_DIRECTION_TRACE_COSTS;}case 242:break;default :zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private void addAttributeToIssuer(Map<String,Object> issuer,X500Name name,String attribute,ASN1ObjectIdentifier oid) throws Exception {  RDN[] rdns=name.getRDNs(oid);  if (rdns != null && rdns.length > 0) {    issuer.put(attribute,rdns[0].getFirst().getValue().toString());  }}  }
class C{  private SecurityOptions createSecurityOptionsPrompting(SecurityOptions.CertificateType type,boolean enableSSL,boolean enableStartTLS,int ldapsPort) throws UserDataException, ClientException {  String path;  Collection<String> certNicknames=argParser.certNicknameArg.getValues();  String pwd=argParser.getKeyStorePassword();  if (pwd != null && pwd.length() == 0) {    pwd=null;  }  LocalizableMessage pathPrompt;  String defaultPathValue;switch (type) {case JKS:    path=argParser.useJavaKeyStoreArg.getValue();  pathPrompt=INFO_INSTALLDS_PROMPT_JKS_PATH.get();defaultPathValue=argParser.useJavaKeyStoreArg.getValue();if (defaultPathValue == null) {defaultPathValue=lastResetKeyStorePath;}break;case JCEKS:path=argParser.useJCEKSArg.getValue();pathPrompt=INFO_INSTALLDS_PROMPT_JCEKS_PATH.get();defaultPathValue=argParser.useJCEKSArg.getValue();if (defaultPathValue == null) {defaultPathValue=lastResetKeyStorePath;}break;case PKCS11:path=null;defaultPathValue=null;pathPrompt=null;break;case PKCS12:path=argParser.usePkcs12Arg.getValue();defaultPathValue=argParser.usePkcs12Arg.getValue();if (defaultPathValue == null) {defaultPathValue=lastResetKeyStorePath;}pathPrompt=INFO_INSTALLDS_PROMPT_PKCS12_PATH.get();break;default :throw new IllegalStateException("Called promptIfRequiredCertificate with invalid type: " + type);}final List<LocalizableMessage> errorMessages=new LinkedList<>();final LinkedList<String> keystoreAliases=new LinkedList<>();boolean firstTry=true;int nPasswordPrompts=0;while (!errorMessages.isEmpty() || firstTry) {boolean prompted=false;if (!errorMessages.isEmpty()) {println();println(Utils.getMessageFromCollection(errorMessages,formatter.getLineBreak().toString()));}if (type != SecurityOptions.CertificateType.PKCS11 && (containsKeyStorePathErrorMessage(errorMessages) || path == null)) {println();try {path=readInput(pathPrompt,defaultPathValue);} catch (final ClientException ce) {path="";logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));}prompted=true;if (pwd != null) {errorMessages.clear();keystoreAliases.clear();checkCertificateInKeystore(type,path,pwd,certNicknames,errorMessages,keystoreAliases);if (!errorMessages.isEmpty()) {pwd=null;}}}if (containsKeyStorePasswordErrorMessage(errorMessages) || pwd == null) {if (!prompted) {println();}pwd=null;while (pwd == null) {if (nPasswordPrompts > LIMIT_KEYSTORE_PASSWORD_PROMPT) {throw new UserDataException(null,ERR_INSTALLDS_TOO_MANY_KEYSTORE_PASSWORD_TRIES.get(LIMIT_KEYSTORE_PASSWORD_PROMPT));}pwd=String.valueOf(readPassword(INFO_INSTALLDS_PROMPT_KEYSTORE_PASSWORD.get()));nPasswordPrompts++;}}if (containsCertNicknameErrorMessage(errorMessages)) {if (!prompted) {println();}certNicknames=promptForCertificateNickname(keystoreAliases);}errorMessages.clear();keystoreAliases.clear();checkCertificateInKeystore(type,path,pwd,certNicknames,errorMessages,keystoreAliases);firstTry=false;}if (certNicknames.isEmpty() && !keystoreAliases.isEmpty()) {certNicknames=Arrays.asList(keystoreAliases.getFirst());}switch (type) {case JKS:return SecurityOptions.createJKSCertificateOptions(path,pwd,enableSSL,enableStartTLS,ldapsPort,certNicknames);case JCEKS:return SecurityOptions.createJCEKSCertificateOptions(path,pwd,enableSSL,enableStartTLS,ldapsPort,certNicknames);case PKCS12:return SecurityOptions.createPKCS12CertificateOptions(path,pwd,enableSSL,enableStartTLS,ldapsPort,certNicknames);case PKCS11:return SecurityOptions.createPKCS11CertificateOptions(pwd,enableSSL,enableStartTLS,ldapsPort,certNicknames);default :throw new IllegalStateException("Called createSecurityOptionsPrompting with invalid type: " + type);}}  }
class C{  private boolean split_wtrace_other_point(Collection<BrdTracep> p_clean_list,PlaPointInt p_intersect,BrdTracep other_trace,int other_line_no,PlaSegmentInt p_my_segment){  if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))   r_board.userPrintln("split_wtrace_other_point: equals=" + (other_trace == this));  if (other_trace == this)   return false;  if (!p_my_segment.contains(p_intersect,0))   return false;  if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))   r_board.userPrintln("split_wtrace_other_points: point " + p_intersect);  ArrayList<BrdTracep> split_traces=other_trace.split_with_end_point(other_line_no,p_intersect);  if (split_traces.size() < 1) {    r_board.userPrintln("split_wtrace_other_point: split_with_end_point FAILED");    p_clean_list.add(other_trace);    return false;  }  p_clean_list.addAll(split_traces);  return true;}  }
class C{  @Override protected void toASCIIGnuStep(StringBuilder ascii,int level){  indent(ascii,level);  NSObject[] array=allObjects();  ascii.append(ASCIIPropertyListParser.ARRAY_BEGIN_TOKEN);  int indexOfLastNewLine=ascii.lastIndexOf(NEWLINE);  for (int i=0; i < array.length; i++) {    Class<?> objClass=array[i].getClass();    if ((objClass.equals(NSDictionary.class) || objClass.equals(NSArray.class) || objClass.equals(NSData.class)) && indexOfLastNewLine != ascii.length()) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();      array[i].toASCIIGnuStep(ascii,level + 1);    } else {      if (i != 0)       ascii.append(" ");      array[i].toASCIIGnuStep(ascii,0);    }    if (i != array.length - 1)     ascii.append(ASCIIPropertyListParser.ARRAY_ITEM_DELIMITER_TOKEN);    if (ascii.length() - indexOfLastNewLine > ASCII_LINE_LENGTH) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();    }  }  ascii.append(ASCIIPropertyListParser.ARRAY_END_TOKEN);}  }
class C{  public void test_finishConnect() throws Exception {  SocketAddress address=new InetSocketAddress("localhost",0);  ServerSocketChannel theServerChannel=ServerSocketChannel.open();  ServerSocket serversocket=theServerChannel.socket();  serversocket.setReuseAddress(true);  serversocket.bind(address);  boolean doneNonBlockingConnect=false;  while (!doneNonBlockingConnect) {    channel1=SocketChannel.open();    channel1.configureBlocking(false);    boolean connected=channel1.connect(new InetSocketAddress("localhost",serversocket.getLocalPort()));    if (!connected) {      channel1.configureBlocking(true);      doneNonBlockingConnect=channel1.finishConnect();    }    if (doneNonBlockingConnect) {      tryFinish();    }    channel1.close();  }  if (!serversocket.isClosed()) {    serversocket.close();  }}  }
class C{  public FrameBodyTDRL(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public SearchResultReferenceProtocolOp(SearchResultReference searchReference){  referralURLs=searchReference.getReferralURLs();  if (referralURLs == null) {    referralURLs=new ArrayList<>();  }}  }
class C{  public BufferedImage createBufferedImage(int width,int height){  try {    SampleModel sampleModel=getSampleModel(width,height);    WritableRaster raster=Raster.createWritableRaster(sampleModel,new Point(0,0));    return new BufferedImage(colorModel,raster,colorModel.isAlphaPremultiplied(),new Hashtable());  } catch (  NegativeArraySizeException e) {    throw new IllegalArgumentException("Array size > Integer.MAX_VALUE!");  }}  }
class C{  public void endElement() throws SAXException {  writePendingText();  String uri=getCurrentElementUri();  String local=getCurrentElementLocal();  String prefix=nsContext.getPrefix(uri);  _assert(prefix != null);  String qname;  if (prefix.length() != 0)   qname=prefix + ':' + local; else   qname=local;  writer.endElement(uri,local,qname);  nsContext.iterateDeclaredPrefixes(endPrefixCallback);  popElement();  textBuf.setLength(0);  nsContext.endElement();}  }
class C{  @Override protected void handleIOException(IOException e) throws IOException {  throw new TaggedIOException(e,tag);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AttributeExtensibleString createAttributeExtensibleString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AttributeExtensibleStringImpl();}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public static void main(String[] args){  final int exitCode=main(args,true,System.out,System.err);  if (exitCode != 0) {    System.exit(filterExitCode(exitCode));  }}  }
class C{  private void deepCopy(Map<AttributeType,List<Attribute>> source,Map<AttributeType,List<Attribute>> target,boolean omitValues,boolean omitEmpty,boolean omitReal,boolean omitVirtual,boolean mergeDuplicates){  for (  Map.Entry<AttributeType,List<Attribute>> mapEntry : source.entrySet()) {    AttributeType t=mapEntry.getKey();    List<Attribute> sourceList=mapEntry.getValue();    List<Attribute> targetList=new ArrayList<>(sourceList.size());    for (    Attribute a : sourceList) {      if ((omitReal && a.isReal()) || (omitVirtual && a.isVirtual()) || (omitEmpty && a.isEmpty())) {        continue;      }      if (omitValues) {        a=Attributes.empty(a);      }      if (!targetList.isEmpty() && mergeDuplicates) {        boolean found=false;        for (ListIterator<Attribute> it=targetList.listIterator(); it.hasNext(); ) {          Attribute otherAttribute=it.next();          if (otherAttribute.getAttributeDescription().equals(a.getAttributeDescription())) {            it.set(Attributes.merge(a,otherAttribute));            found=true;          }        }        if (!found) {          targetList.add(a);        }      } else {        targetList.add(a);      }    }    if (!targetList.isEmpty()) {      target.put(t,targetList);    }  }}  }
class C{  public AreaAveragingScaleFilter(int width,int height){  super(width,height);}  }
class C{  public static boolean isConfigurationDn(String dnStr){  DN dn;  try {    dn=DN.valueOf(dnStr);  } catch (  LocalizedIllegalArgumentException e) {    return false;  }  boolean isConfigurationDn=false;  DN[] configDns={DN.valueOf("cn=config"),Constants.SCHEMA_DN};  for (int i=0; i < configDns.length && !isConfigurationDn; i++) {    isConfigurationDn=dn.equals(configDns[i]);  }  return isConfigurationDn;}  }
class C{  protected boolean isSerializable(Object obj){  boolean serializable=true;  Class[] interfaces=obj.getClass().getInterfaces();  for (int i=0; i < interfaces.length; i++) {    if (interfaces[i].getName().equals(SERIALIZABLE_INT)) {      serializable&=true;    } else     if (interfaces[i].getName().equals(COLLECTION_INT)) {      serializable&=false;    }  }  return serializable;}  }
class C{  private static void doSort(double[] a,int left,int right,double[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        double t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  double[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new double[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    double[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  void addEntry(IndexBuffer buffer,EntryID entryID,Entry entry) throws StorageRuntimeException, DirectoryException {  for (  MatchingRuleIndex index : indexIdToIndexes.values()) {    for (    ByteString key : index.indexEntry(entry)) {      buffer.put(index,key,entryID);    }  }}  }
class C{  @SuppressWarnings("unchecked") final E itemAt(int i){  return (E)items[i];}  }
class C{  void processDragDropEnd(DragSourceDropEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragDropEnd(dsde);  }}  }
class C{  public MBeanTrustPermission(String name,String actions){  super(name,actions);  validate(name,actions);}  }
class C{  public void reset(){  tbsGen=new V3TBSCertificateGenerator();  extGenerator.reset();}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof UnresolvedPermission))   return false;  UnresolvedPermission that=(UnresolvedPermission)obj;  if (!this.type.equals(that.type)) {    return false;  }  if (this.name == null) {    if (that.name != null) {      return false;    }  } else   if (!this.name.equals(that.name)) {    return false;  }  if (this.actions == null) {    if (that.actions != null) {      return false;    }  } else {    if (!this.actions.equals(that.actions)) {      return false;    }  }  if ((this.certs == null && that.certs != null) || (this.certs != null && that.certs == null) || (this.certs != null && that.certs != null && this.certs.length != that.certs.length)) {    return false;  }  int i, j;  boolean match;  for (i=0; this.certs != null && i < this.certs.length; i++) {    match=false;    for (j=0; j < that.certs.length; j++) {      if (this.certs[i].equals(that.certs[j])) {        match=true;        break;      }    }    if (!match)     return false;  }  for (i=0; that.certs != null && i < that.certs.length; i++) {    match=false;    for (j=0; j < this.certs.length; j++) {      if (that.certs[i].equals(this.certs[j])) {        match=true;        break;      }    }    if (!match)     return false;  }  return true;}  }
class C{  public void paintToolTipBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void testValueOfLongPositive2(){  long longVal=58930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={3,-125,51,98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  private static StringBuilder dump(StringBuilder _lbuffer,long value){  for (int j=0; j < 8; j++) {    _lbuffer.append(_hexcodes[(int)(value >> _shifts[j]) & 15]);  }  return _lbuffer;}  }
class C{  @Query(operationDescription=@Operation(description=APPLICATIONS_RESOURCE + QUERY_DESCRIPTION),type=QueryType.FILTER,queryableFields="*") @Override public Promise<QueryResponse,ResourceException> queryCollection(Context context,QueryRequest request,QueryResourceHandler handler){  final Subject subject=getContextSubject(context);  if (subject == null) {    debug.error("ApplicationsResource :: UPDATE : Unknown Subject");    return new BadRequestException().asPromise();  }  final String realm=getRealm(context);  QueryFilter<JsonPointer> queryFilter=request.getQueryFilter();  if (queryFilter == null) {    queryFilter=QueryFilter.alwaysTrue();  }  QueryFilter<String> stringQueryFilter=queryFilter.accept(new QueryByStringFilterConverter(),null);  try {    Set<Application> applications=appService(subject,realm).search(stringQueryFilter);    List<ResourceResponse> results=new ArrayList<>();    for (    Application application : applications) {      results.add(newResourceResponse(application.getName(),null,applicationToJson(application)));    }    QueryResponsePresentation.enableDeprecatedRemainingQueryResponse(request);    return QueryResponsePresentation.perform(handler,request,results);  } catch (  EntitlementException e) {    debug.error("ApplicationsResource :: QUERY by {}: Failed to query resource.",getPrincipalNameFromSubject(subject),e);    return exceptionMappingHandler.handleError(context,request,e).asPromise();  }}  }
class C{  public synchronized boolean addEdit(UndoableEdit anEdit){  boolean retVal;  trimEdits(indexOfNextAdd,edits.size() - 1);  retVal=super.addEdit(anEdit);  if (inProgress) {    retVal=true;  }  indexOfNextAdd=edits.size();  trimForLimit();  return retVal;}  }
class C{  public ByteArray(int size){  bytes=new byte[size];  this.size=size;}  }
class C{  public static void nextBytes(byte[] into,int offset,int length,Random r){  int numRequested=length;  int numGot=0, rnd=0;  while (true) {    for (int i=0; i < BYTES_PER_INT; i++) {      if (numGot == numRequested)       return;      rnd=(i == 0 ? r.nextInt() : rnd >> BITS_PER_BYTE);      into[offset + numGot]=(byte)rnd;      numGot++;    }  }}  }
class C{  public static LdapException newLdapException(final Result result){  if (!result.getResultCode().isExceptional()) {    throw new IllegalArgumentException("Attempted to wrap a successful result: " + result);  }switch (result.getResultCode().asEnum()) {case ASSERTION_FAILED:    return new AssertionFailureException(result);case AUTH_METHOD_NOT_SUPPORTED:case CLIENT_SIDE_AUTH_UNKNOWN:case INAPPROPRIATE_AUTHENTICATION:case INVALID_CREDENTIALS:  return new AuthenticationException(result);case AUTHORIZATION_DENIED:case CONFIDENTIALITY_REQUIRED:case INSUFFICIENT_ACCESS_RIGHTS:case STRONG_AUTH_REQUIRED:return new AuthorizationException(result);case CLIENT_SIDE_USER_CANCELLED:case CANCELLED:return new CancelledResultException(result);case CLIENT_SIDE_SERVER_DOWN:case CLIENT_SIDE_CONNECT_ERROR:case CLIENT_SIDE_DECODING_ERROR:case CLIENT_SIDE_ENCODING_ERROR:return new ConnectionException(result);case ATTRIBUTE_OR_VALUE_EXISTS:case NO_SUCH_ATTRIBUTE:case CONSTRAINT_VIOLATION:case ENTRY_ALREADY_EXISTS:case INVALID_ATTRIBUTE_SYNTAX:case INVALID_DN_SYNTAX:case NAMING_VIOLATION:case NOT_ALLOWED_ON_NONLEAF:case NOT_ALLOWED_ON_RDN:case OBJECTCLASS_MODS_PROHIBITED:case OBJECTCLASS_VIOLATION:case UNDEFINED_ATTRIBUTE_TYPE:return new ConstraintViolationException(result);case REFERRAL:return new ReferralException(result);case NO_SUCH_OBJECT:case CLIENT_SIDE_NO_RESULTS_RETURNED:return new EntryNotFoundException(result);case CLIENT_SIDE_UNEXPECTED_RESULTS_RETURNED:return new MultipleEntriesFoundException(result);case CLIENT_SIDE_TIMEOUT:case TIME_LIMIT_EXCEEDED:return new TimeoutResultException(result);default :return new LdapException(result);}}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.FromElement createFromElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.FromElementImpl();}  }
class C{  private static synchronized void initialize(){  if (!serviceInitialized) {    String providerName=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_PROVIDER);    IDebugProvider provider=null;    boolean providerLoadFailed=false;    Exception exceptionCatched=null;    if (providerName != null && providerName.trim().length() > 0) {      try {        provider=(IDebugProvider)Class.forName(providerName).newInstance();      } catch (      ClassNotFoundException cnex) {        providerLoadFailed=true;        exceptionCatched=cnex;      }catch (      InstantiationException iex) {        providerLoadFailed=true;        exceptionCatched=iex;      }catch (      IllegalAccessException iaex) {        providerLoadFailed=true;        exceptionCatched=iaex;      }catch (      ClassCastException ccex) {        providerLoadFailed=true;        exceptionCatched=ccex;      }    }    if (provider == null) {      if (providerLoadFailed) {        ResourceBundle bundle=com.sun.identity.shared.locale.Locale.getInstallResourceBundle("amUtilMsgs");        StdDebugFile.printError(Debug.class.getSimpleName(),bundle.getString("com.iplanet" + ".services" + ".debug.invalidprovider"),exceptionCatched);      }      provider=new DebugProviderImpl();    }    setDebugProvider(provider);    serviceInitialized=true;  }}  }
class C{  protected boolean isServiced(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  Boolean result=(Boolean)mBeanServer.invoke(oname,"isServiced",params,signature);  return result.booleanValue();}  }
class C{  public boolean isAggregatedType(){  return true;}  }
class C{  public static int combine(int hashCode,double value){  long v=Double.doubleToLongBits(value);  return combine(hashCode,v);}  }
class C{  private static void checkTypeSafe(Object o){  try {    o=(Role)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public NamingResourcesMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public void addAll(Collection<T> newData){  data.addAll(newData);}  }
class C{  public static void loadTestEngine() throws Exception {  long testEngine=NativeCrypto.ENGINE_by_id(TEST_ENGINE_ID);  if (testEngine != 0) {    NativeCrypto.ENGINE_finish(testEngine);    return;  }  NativeCrypto.ENGINE_load_dynamic();  long dynEngine=NativeCrypto.ENGINE_by_id("dynamic");  try {    ClassLoader loader=NativeCryptoTest.class.getClassLoader();    final String libraryPaths;    libraryPaths=System.getProperty("java.library.path");    assertNotNull(libraryPaths);    String[] libraryPathArray=libraryPaths.split(":");    for (    String path : libraryPathArray) {      assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"DIR_ADD",path,0));    }    assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"LIST_ADD","2",0));    assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"ID",TEST_ENGINE_ID,0));    assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"LOAD",null,0));  }  finally {    NativeCrypto.ENGINE_finish(dynEngine);  }  testEngine=NativeCrypto.ENGINE_by_id(TEST_ENGINE_ID);  if (testEngine == 0) {    fail("could not load test engine");  }  NativeCrypto.ENGINE_finish(testEngine);}  }
class C{  @Override public int available() throws IOException {  throw exception;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI="http://www.w3.org/DOM/Test/Level2";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("_:");  qualifiedNames.add(":0a");  qualifiedNames.add(":");  qualifiedNames.add("a:b:c");  qualifiedNames.add("_::a");  doc=(Document)load("staffNS",false);  for (int indexN1004E=0; indexN1004E < qualifiedNames.size(); indexN1004E++) {    qualifiedName=(String)qualifiedNames.get(indexN1004E);{      try {        attribute=doc.createAttributeNS(namespaceURI,qualifiedName);        fail("documentcreateattributeNS04");      } catch (      DOMException expected) {      }    }  }}  }
class C{  public void deleteSubOrganizations(Set subOrganizationDNs) throws AMException, SSOException {  Iterator iter=subOrganizationDNs.iterator();  while (iter.hasNext()) {    String subOrganizationDN=(String)iter.next();    AMOrganization org=new AMOrganizationImpl(super.token,subOrganizationDN);    org.delete();  }}  }
class C{  public void testToEngineeringStringPos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-501";  BigDecimal aNumber=new BigDecimal(a);  String result="123.80964839238475457356735674573563567890295784902768787678287E-471";  assertEquals("incorrect value",result,aNumber.toEngineeringString());}  }
class C{  public void insertSeparator(int index){  if (index < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  popupMenu.insert(new JPopupMenu.Separator(),index);}  }
class C{  static MethodHandle makeSpreadArguments(MethodHandle target,Class<?> spreadArgType,int spreadArgPos,int spreadArgCount){  MethodType targetType=target.type();  for (int i=0; i < spreadArgCount; i++) {    Class<?> arg=VerifyType.spreadArgElementType(spreadArgType,i);    if (arg == null)     arg=Object.class;    targetType=targetType.changeParameterType(spreadArgPos + i,arg);  }  target=target.asType(targetType);  MethodType srcType=targetType.replaceParameterTypes(spreadArgPos,spreadArgPos + spreadArgCount,spreadArgType);  MethodType lambdaType=srcType.invokerType();  Name[] names=arguments(spreadArgCount + 2,lambdaType);  int nameCursor=lambdaType.parameterCount();  int[] indexes=new int[targetType.parameterCount()];  for (int i=0, argIndex=1; i < targetType.parameterCount() + 1; i++, argIndex++) {    Class<?> src=lambdaType.parameterType(i);    if (i == spreadArgPos) {      MethodHandle aload=MethodHandles.arrayElementGetter(spreadArgType);      Name array=names[argIndex];      names[nameCursor++]=new Name(Lazy.NF_checkSpreadArgument,array,spreadArgCount);      for (int j=0; j < spreadArgCount; i++, j++) {        indexes[i]=nameCursor;        names[nameCursor++]=new Name(aload,array,j);      }    } else     if (i < indexes.length) {      indexes[i]=argIndex;    }  }  assert (nameCursor == names.length - 1);  Name[] targetArgs=new Name[targetType.parameterCount()];  for (int i=0; i < targetType.parameterCount(); i++) {    int idx=indexes[i];    targetArgs[i]=names[idx];  }  names[names.length - 1]=new Name(target,(Object[])targetArgs);  LambdaForm form=new LambdaForm("spread",lambdaType.parameterCount(),names);  return SimpleMethodHandle.make(srcType,form);}  }
class C{  public static void writeSwappedShort(byte[] data,int offset,short value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);}  }
class C{  public Group(List<ItemPinned> items,int resourceId){  this.items=items;  if (this.items != null) {    for (int i=0; i < this.items.size(); i++) {      ItemPinned itemPinned=this.items.get(i);      initItemPosition(itemPinned,i);      if (this.items.get(i) instanceof ImageItemPinned)       ((ImageItemPinned)this.items.get(i)).setImage(resourceId);    }  }}  }
class C{  protected void doDelete(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  String protocol=req.getProtocol();  String msg=lStrings.getString("http.method_delete_not_supported");  if (protocol.endsWith("1.1")) {    resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,msg);  } else {    resp.sendError(HttpServletResponse.SC_BAD_REQUEST,msg);  }}  }
class C{  private static Document parseDocument(String fileName){  Document document=null;  try (InputStream is=RestUtils.class.getClassLoader().getResourceAsStream(fileName)){    DocumentBuilder documentBuilder=XMLUtils.getSafeDocumentBuilder(false);    document=documentBuilder.parse(is);  } catch (  Exception e) {    debug.error("RestUtils.parseDocument",e);  }  return document;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSSSOAndFedService.doGet: Called");  if ((request == null) || (response == null)) {    FSUtils.debug.error("FSSSOAndFedService: " + FSUtils.bundle.getString("nullInputParameter"));    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullInputParameter"));    return;  }  if (FSUtils.needSetLBCookieAndRedirect(request,response,true)) {    return;  }  boolean bPostAuthn=false;  boolean bLECP=false;  String authnIndicator=request.getParameter(IFSConstants.AUTHN_INDICATOR_PARAM);  if (authnIndicator == null) {    FSUtils.debug.message("FSSSOAndFedService.doGet:Pre Authentication SSO");    bPostAuthn=false;  } else {    FSUtils.debug.message("FSSSOAndFedService.doGet:Post Authentication SSO");    bPostAuthn=true;    String lecpIndicator=request.getParameter(IFSConstants.LECP_INDICATOR_PARAM);    if (lecpIndicator == null) {      FSUtils.debug.message("FSSSOAndFedService.doGet:non LECP request");      bLECP=false;    } else {      FSUtils.debug.message("FSSSOAndFedService.doGet:post Authn LECP request");      bLECP=true;    }    String requestId=request.getParameter(IFSConstants.AUTH_REQUEST_ID);    String hostEntityId=request.getParameter(IFSConstants.PROVIDER_ID_KEY);    String authnContext=request.getParameter(IFSConstants.AUTHN_CONTEXT);    String realm=request.getParameter(IFSConstants.REALM);    String metaAlias=request.getParameter(IFSConstants.META_ALIAS);    FSSessionManager sessionService=FSSessionManager.getInstance(metaAlias);    FSAuthnRequest authnRequest=sessionService.getAuthnRequest(requestId);    if (authnRequest == null) {      FSUtils.debug.message("FSSSOAndFedService.doGet: authnRequest is null");    }    if ((authnContext == null) || (authnContext.length() == 0)) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSSOAndFedService.doGet: authnContext is null. " + "Using default password");      }      authnContext=IFSConstants.DEFAULT_AUTHNCONTEXT_PASSWORD;    }    if (authnRequest != null && realm != null && realm.length() != 0 && hostEntityId != null && hostEntityId.length() != 0 && authnContext != null && authnContext.length() != 0) {      handleAuthnRequest(request,response,authnRequest,realm,hostEntityId,bLECP,authnContext);      return;    } else {      FSUtils.debug.error("FSSSOAndFedService.doGet: " + "AuthnRequest not found in FSSessionManager");      response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullInput"));      return;    }  }  FSAuthnRequest authnRequest=null;  try {    authnRequest=FSAuthnRequest.parseURLEncodedRequest(request);    if (authnRequest == null) {      FSUtils.debug.error("FSSSOAndFedService: " + FSUtils.bundle.getString("invalidAuthnRequest"));      String[] data={FSUtils.bundle.getString("invalidAuthnRequest")};      LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_REQUEST,data);      response.sendError(response.SC_BAD_REQUEST,FSUtils.bundle.getString("invalidAuthnRequest"));      return;    }  } catch (  FSException e) {    FSUtils.debug.error("FSSSOAndFedService: " + FSUtils.bundle.getString("invalidAuthnRequest") + ", queryString="+ request.getQueryString(),e);    String[] data={FSUtils.bundle.getString("invalidAuthnRequest")};    LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_REQUEST,data);    response.sendError(response.SC_BAD_REQUEST,FSUtils.bundle.getString("invalidAuthnRequest"));    return;  }  String metaAlias=null;  String realm=null;  String hostEntityId=null;  IDPDescriptorType hostedDesc=null;  BaseConfigType hostedConfig=null;  try {    metaAlias=FSServiceUtils.getMetaAlias(request);    realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);    hostEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);    hostedDesc=metaManager.getIDPDescriptor(realm,hostEntityId);    hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostEntityId);  } catch (  Exception e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedService: couldn't obtain hosted entity id:",e);    }  }  handleAuthnRequest(request,response,authnRequest,bPostAuthn,bLECP,realm,hostEntityId,metaAlias,hostedDesc,hostedConfig);  return;}  }
class C{  private void pinDayOfMonth(){  int year=internalGet(YEAR);  int monthLen;  if (year > gregorianCutoverYear || year < gregorianCutoverYearJulian) {    monthLen=monthLength(internalGet(MONTH));  } else {    GregorianCalendar gc=getNormalizedCalendar();    monthLen=gc.getActualMaximum(DAY_OF_MONTH);  }  int dom=internalGet(DAY_OF_MONTH);  if (dom > monthLen) {    set(DAY_OF_MONTH,monthLen);  }}  }
class C{  @Override public int hashCode(){  int hc=hashCodeValue;  if (hc == 0) {    hc=baseLocale.hashCode();    if (localeExtensions != null) {      hc^=localeExtensions.hashCode();    }    hashCodeValue=hc;  }  return hc;}  }
class C{  public FixedHolder(){}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void testConstructorSignBytesException2(){  byte aBytes[]={123,45,-3,-76};  int aSign=0;  try {    new BigInteger(aSign,aBytes);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {    assertEquals("Improper exception message","signum-magnitude mismatch",e.getMessage());  }}  }
class C{  private AccessRequest createAccessRequest(Packet requestPacket){  AccessRequest accessRequest=null;  try {    accessRequest=(AccessRequest)requestPacket;  } catch (  final ClassCastException c) {    final StringBuilder sb=new StringBuilder("Received packet of type ACCESS_REQUEST from RADIUS client '").append(getClientName()).append("' but unable to cast to AccessRequest. Rejecting access.");    LOG.error(sb.toString(),c);    try {      requestContext.send(new AccessReject());    } catch (    final RadiusProcessingException e) {      LOG.warning("Failed to send AccessReject() response to client.");    }  }  return accessRequest;}  }
class C{  public static String escape(String string){  if (string == null || string.equals("")) {    return string;  }  String prefix="";  if (string.indexOf("://") != -1) {    prefix=string.substring(0,string.indexOf("://") + 3);    string=string.replaceFirst(prefix,"");  }  string=string.replaceAll("\\\\","/");  if (string.startsWith("//")) {    string="/" + string.replaceAll("/+","/");  } else {    string=string.replaceAll("/+","/");  }  return prefix.concat(string);}  }
class C{  public boolean isLocallyConfigured(){  return locallyConfigured;}  }
class C{  public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (cookie.getPorts() == null) {      return false;    }    if (!portMatch(port,cookie.getPorts())) {      return false;    }  }  return true;}  }
class C{  public boolean isConsumed(){  return consumed;}  }
class C{  public boolean errorEnabled(){  return getDebugServiceInstance().errorEnabled();}  }
class C{  public final static VersionInfo loadVersionInfo(final String pckg,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  if (clsldr == null)   clsldr=Thread.currentThread().getContextClassLoader();  Properties vip=null;  try {    InputStream is=clsldr.getResourceAsStream(pckg.replace('.','/') + "/" + VERSION_PROPERTY_FILE);    if (is != null) {      try {        Properties props=new Properties();        props.load(is);        vip=props;      }  finally {        is.close();      }    }  } catch (  IOException ex) {  }  VersionInfo result=null;  if (vip != null)   result=fromMap(pckg,vip,clsldr);  return result;}  }
class C{  private String readLine(InputStream inputStream) throws IOException {  partialLineRead=false;  int counter=0;  int increment=1024;  int bufferSize=increment;  byte[] lineBuffer=new byte[bufferSize];  byte[] crlfBuffer=new byte[2];  int crlfCounter=0;  while (true) {    char ch;    int i=readSingleByte(inputStream);    if (i == -1) {      partialLineRead=true;      currentStreamEnded=true;      break;    } else     ch=(char)(i & 0xFF);    if (ch != '\r')     lineBuffer[counter++]=(byte)(i & 0xFF); else     if (counter == 0)     crlfBuffer[crlfCounter++]=(byte)'\r';    if (ch == '\n') {      if (counter == 1 && crlfCounter > 0) {        crlfBuffer[crlfCounter++]=(byte)'\n';      }      break;    }    if (counter == bufferSize) {      byte[] tempBuffer=new byte[bufferSize + increment];      System.arraycopy((Object)lineBuffer,0,(Object)tempBuffer,0,bufferSize);      bufferSize=bufferSize + increment;      lineBuffer=tempBuffer;    }  }  if (counter == 1 && crlfCounter > 0) {    return new String(crlfBuffer,0,crlfCounter,"UTF-8");  } else {    return new String(lineBuffer,0,counter,"UTF-8");  }}  }
class C{  public byte[] crypt_raw(byte password[],byte salt[],int log_rounds,int cdata[]){  int rounds, i, j;  int clen=cdata.length;  byte ret[];  if (log_rounds < 4 || log_rounds > 30) {    throw new IllegalArgumentException("Bad number of rounds");  }  rounds=1 << log_rounds;  if (salt.length != BCRYPT_SALT_LEN) {    throw new IllegalArgumentException("Bad salt length");  }  init_key();  ekskey(salt,password);  for (i=0; i != rounds; i++) {    key(password);    key(salt);  }  for (i=0; i < 64; i++) {    for (j=0; j < (clen >> 1); j++) {      encipher(cdata,j << 1);    }  }  ret=new byte[clen * 4];  for (i=0, j=0; i < clen; i++) {    ret[j++]=(byte)((cdata[i] >> 24) & 0xff);    ret[j++]=(byte)((cdata[i] >> 16) & 0xff);    ret[j++]=(byte)((cdata[i] >> 8) & 0xff);    ret[j++]=(byte)(cdata[i] & 0xff);  }  return ret;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributens02.class,args);}  }
class C{  public static final BigInteger determinant(BigInteger p_x_1,BigInteger p_y_1,BigInteger p_x_2,BigInteger p_y_2){  BigInteger tmp1=p_x_1.multiply(p_y_2);  BigInteger tmp2=p_x_2.multiply(p_y_1);  return tmp1.subtract(tmp2);}  }
class C{  private boolean aciCheckSuperiorEntry(DN superiorDN,ModifyDNOperation op){  try {    Entry superiorEntry=DirectoryServer.getEntry(superiorDN);    if (superiorEntry != null) {      AciContainer container=new AciLDAPOperationContainer(op,ACI_IMPORT,superiorEntry);      return accessAllowed(container);    }    return false;  } catch (  DirectoryException ex) {    return false;  }}  }
class C{  public static void addObjectClassToAdd(ObjectClass objectClass){  instance.addObjectClasses.add(objectClass);}  }
class C{  public final PlaPointInt insert_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth,int p_pullt_min_move,boolean p_with_check,TimeLimit p_time_limit){  shove_fail_clear();  PlaPoint from_corner_point=p_polyline.corner_first();  if (from_corner_point.is_rational()) {    System.err.println(classname + "insert_trace: from_corner_point NOT int");    return null;  }  PlaPointInt from_corner=(PlaPointInt)from_corner_point;  PlaPoint to_corner_point=p_polyline.corner_last();  if (to_corner_point.is_rational()) {    System.err.println(classname + "insert_trace: to_corner_point NOT int");    return from_corner;  }  PlaPointInt to_corner=(PlaPointInt)to_corner_point;  if (from_corner.equals(to_corner))   return to_corner;  changed_area_clear();  BrdTracep picked_trace=pick_one_trace(from_corner,p_layer,p_net_no_arr,p_half_width,p_clearance_class_no);  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);  Polyline new_polyline=shove_trace_algo.spring_over_obstacles(p_polyline,compensated_half_width,p_layer,p_net_no_arr,p_clearance_class_no,null);  if (new_polyline == null)   return from_corner;  Polyline combined_polyline=picked_trace == null ? new_polyline : new_polyline.combine(picked_trace.polyline());  if (!combined_polyline.is_valid())   return from_corner;  int start_shape_no=combined_polyline.plaline_len() - new_polyline.plaline_len();  ArrayList<ShapeTile> trace_shapes=combined_polyline.offset_shapes(compensated_half_width,start_shape_no,combined_polyline.plaline_len(-1));  final int trace_shapes_count=trace_shapes.size();  int last_shape_no=trace_shapes_count;  for (int index=0; index < trace_shapes_count; ++index) {    ShapeTile curr_trace_shape=trace_shapes.get(index);    BrdFromSide from_side=new BrdFromSide(combined_polyline,combined_polyline.corner_count() - trace_shapes_count - 1 + index,curr_trace_shape);    if (p_with_check) {      boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,p_time_limit);      if (!check_shove_ok) {        last_shape_no=index;        break;      }    }    boolean insert_ok=shove_trace_algo.shove_trace_insert(curr_trace_shape,from_side,p_layer,p_net_no_arr,p_clearance_class_no,null,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth);    if (!insert_ok)     return null;  }  PlaPointInt new_corner=to_corner;  if (last_shape_no < trace_shapes_count) {    ShapeTile last_trace_shape=trace_shapes.get(last_shape_no);    int sample_width=2 * get_min_trace_half_width();    PlaPointFloat last_corner=new_polyline.corner_approx(last_shape_no + 1);    PlaPointFloat prev_last_corner=new_polyline.corner_approx(last_shape_no);    double last_segment_length=last_corner.distance(prev_last_corner);    if (last_segment_length > 100 * sample_width) {      return from_corner;    }    int shape_index=combined_polyline.corner_count() - trace_shapes_count - 1 + last_shape_no;    if (last_segment_length > sample_width) {      new_polyline=new_polyline.shorten(new_polyline.plaline_len(-(trace_shapes_count - last_shape_no - 1)),sample_width);      PlaPoint new_last_corner_point=new_polyline.corner_last();      if (new_last_corner_point.is_rational()) {        System.out.println("insert_trace: A IntPoint wanted");        return from_corner;      }      new_corner=new_last_corner_point.round();      if (picked_trace == null) {        combined_polyline=new_polyline;      } else {        BrdTracep combine_trace=(BrdTracep)picked_trace;        combined_polyline=new_polyline.combine(combine_trace.polyline());      }      if (!combined_polyline.is_valid())       return new_corner;      shape_index=combined_polyline.plaline_len(-3);      last_trace_shape=combined_polyline.offset_shape(compensated_half_width,shape_index);    }    BrdFromSide from_side=new BrdFromSide(combined_polyline,shape_index,last_trace_shape);    boolean check_shove_ok=shove_trace_algo.shove_trace_check(last_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,p_time_limit);    if (!check_shove_ok)     return from_corner;    boolean insert_ok=shove_trace_algo.shove_trace_insert(last_trace_shape,from_side,p_layer,p_net_no_arr,p_clearance_class_no,null,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth);    if (!insert_ok) {      System.out.println("insert_trace: shove trace failed");      return null;    }  }  for (int index=0; index < new_polyline.corner_count(); ++index) {    changed_area_join(new_polyline.corner_approx(index),p_layer);  }  BrdTracep new_trace=insert_trace_without_cleaning(new_polyline,p_layer,p_half_width,p_net_no_arr,p_clearance_class_no,ItemFixState.UNFIXED);  new_trace.combine(20);  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;  TimeLimitStoppable t_limit=new TimeLimitStoppable(10,null);  AlgoPullTight pull_tight_algo=AlgoPullTight.get_instance(this,opt_net_no_arr,p_pullt_min_move,t_limit,new BrdKeepPoint(new_corner,p_layer));  if (new_trace.normalize(changed_area.get_area(p_layer))) {    pull_tight_algo.split_traces_keep_point();    ItemSelectionFilter item_filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES);    Set<BrdItem> curr_picked_items=pick_items(new_corner,p_layer,item_filter);    new_trace=null;    if (!curr_picked_items.isEmpty()) {      BrdItem found_trace=curr_picked_items.iterator().next();      if (found_trace instanceof BrdTracep) {        new_trace=(BrdTracep)found_trace;      }    }  }  if (new_trace != null)   new_trace.pull_tight(pull_tight_algo);  return new_corner;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  boolean bAppend=isOptionSet(OPT_APPEND);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map<String,Set<String>> attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  attributeValues=processFileAttributes(attributeValues);  try {    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity ai=repo.getRealmIdentity();    Set servicesFromIdRepo=ai.getAssignedServices();    if (servicesFromIdRepo.contains(serviceName)) {      handleDynamicAttributes(ai,realm,serviceName,attributeValues,bAppend);    } else {      handleOrganizatioAttribute(realm,serviceName,attributeValues,bAppend);    }  } catch (  IdRepoException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmSetServiceAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SVC_ATTR_VALUES_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmSetServiceAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SVC_ATTR_VALUES_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  String popImportURL(){  return (String)m_importStack.pop();}  }
class C{  public XalanDOMTestDocumentBuilderFactory(DocumentBuilderFactory baseFactory,DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(baseFactory,settings);}  }
class C{  private ServerStatus computeInitialServerStatus(long rsGenId,ServerState rsState,int degradedStatusThreshold,long dsGenId){  if (rsGenId == -1) {    return ServerStatus.NORMAL_STATUS;  } else   if (rsGenId != dsGenId) {    return ServerStatus.BAD_GEN_ID_STATUS;  } else {    int nChanges=ServerState.diffChanges(rsState,state);    if (logger.isTraceEnabled()) {      debugInfo("computed " + nChanges + " changes late.");    }    if (degradedStatusThreshold > 0 && nChanges >= degradedStatusThreshold) {      return ServerStatus.DEGRADED_STATUS;    }    return ServerStatus.NORMAL_STATUS;  }}  }
class C{  public static String toString(final List<?> list){  final StringBuffer buf=new StringBuffer("[");  int i=0;  for (  final Object object : list) {    if (i++ > 0) {      buf.append(",");    }    buf.append(object == null ? "null" : JKObjectUtil.toString(object,true));  }  buf.append("]");  return buf.toString();}  }
class C{  public boolean connectUsingLDAPS(){  return ldapsHostPort != null && ldapsHostPort.equals(getHostPortToConnect());}  }
class C{  private void removeDirectCOSAssignment(PersistentObject pObject,DirectCOSDefinition cosDef,COSTemplate cosTemplate,SchemaManager sMgr) throws UMSException {  ArrayList aList;  AttrSet attrSet=new AttrSet();  try {    if (pObject.getAttribute(cosDef.getCOSSpecifier()) != null)     attrSet.add(new Attr(cosDef.getCOSSpecifier(),cosTemplate.getName()));    aList=(ArrayList)sMgr.getObjectClasses(cosDef.getCOSSpecifier());    String cosSpecObjectClass=(String)aList.get(0);    if (objectClassExists(cosSpecObjectClass,pObject)) {      attrSet.add(new Attr("objectclass",cosSpecObjectClass));    }    String[] cosAttributes=cosDef.getCOSAttributes();    String cosAttribute=null;    for (int i=0; i < cosAttributes.length; i++) {      StringTokenizer st=new StringTokenizer(cosAttributes[i]);      cosAttribute=st.nextToken();      aList=(ArrayList)sMgr.getObjectClasses(cosAttribute);      String cosAttributeObjectClass=(String)aList.get(0);      if (objectClassExists(cosAttributeObjectClass,pObject)) {        attrSet.add(new Attr("objectclass",cosAttributeObjectClass));      }    }    if (attrSet.size() > 0) {      pObject.modify(toModifications(ModificationType.DELETE,attrSet));      pObject.save();    }  } catch (  UMSException e) {    LdapException le=(LdapException)e.getRootCause();    if (!ResultCode.OBJECTCLASS_VIOLATION.equals(le.getResult().getResultCode())) {      throw e;    }  }}  }
class C{  public IllegalBoundaryException(String message){  super(message);}  }
class C{  public boolean removeAll(){  lock.lock();  try {    if (cookieJar.isEmpty()) {      return false;    }    cookieJar.clear();    domainIndex.clear();    uriIndex.clear();  }  finally {    lock.unlock();  }  return true;}  }
class C{  public int compareTo(Short object){  return compare(value,object.value);}  }
class C{  public synchronized Iterator<E> iterator(){  return new Itr();}  }
class C{  public Set<BrdItem> pick_items(PlaPoint p_location,int p_layer,ItemSelectionFilter p_filter){  Set<BrdItem> result=new TreeSet<BrdItem>();  ShapeTileBox point_shape=p_location.to_box();  Collection<AwtreeObject> overlaps=overlapping_objects(point_shape,p_layer);  for (  AwtreeObject curr_object : overlaps) {    if (!(curr_object instanceof BrdItem))     continue;    BrdItem curr_item=(BrdItem)curr_object;    if (!curr_item.is_selected_by_filter(p_filter))     continue;    result.add(curr_item);  }  return result;}  }
class C{  public void createEntityDescriptor(String realm,EntityDescriptorElement entityDescriptor) throws IDFFMetaException {  String classMethod="IDFFMetaManager.createEntityDescriptor:";  String entityId=null;  if (entityDescriptor == null) {    LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_DESCRIPTOR,null);    throw new IDFFMetaException("nullEntityDescriptor",null);  } else {    entityId=entityDescriptor.getProviderID();    if (entityId == null) {      debug.error(classMethod + "Entity ID is null");      LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_ID,null);      throw new IDFFMetaException("nullEntityID",null);    }  }  if ((realm == null) || (realm.length() == 0)) {    realm=ROOT_REALM;  }  String[] args={entityId,realm};  EntityDescriptorElement descriptor=getEntityDescriptor(realm,entityId);  if (descriptor != null) {    List idps=descriptor.getIDPDescriptor();    boolean hasIDP=(idps != null) && !idps.isEmpty();    List sps=descriptor.getSPDescriptor();    boolean hasSP=(sps != null) && !sps.isEmpty();    List newIDPs=entityDescriptor.getIDPDescriptor();    List newSPs=entityDescriptor.getSPDescriptor();    if ((newIDPs != null) && !newIDPs.isEmpty() && hasIDP) {      LogUtil.error(Level.INFO,LogUtil.SET_ENTITY_FAILED,args);      throw new IDFFMetaException("idpAlreadyExisted",args);    }    if ((newSPs != null) && !newSPs.isEmpty() && hasSP) {      LogUtil.error(Level.INFO,LogUtil.SET_ENTITY_FAILED,args);      throw new IDFFMetaException("spAlreadyExisted",args);    }    idps.addAll(newIDPs);    sps.addAll(newSPs);    setEntityDescriptor(realm,descriptor);  } else {    try {      Map attrs=IDFFMetaUtils.convertJAXBToAttrMap(IDFF_METADATA_ATTR,entityDescriptor);      if (debug.messageEnabled()) {        debug.message(classMethod + attrs);      }      idffMetaConfigInstance.createConfiguration(realm,entityId,attrs);      LogUtil.access(Level.INFO,LogUtil.CREATE_ENTITY_SUCCEEDED,args);    } catch (    ConfigurationException ce) {      debug.error("Cannot create entity descriptor",ce);      LogUtil.error(Level.INFO,LogUtil.CREATE_ENTITY_FAILED,args);      throw new IDFFMetaException(ce);    }catch (    UnsupportedOperationException uoe) {      debug.error("Creating EntityDescriptor : Unsupported operation");      LogUtil.error(Level.INFO,LogUtil.UNSUPPORTED_OPERATION,null);      throw new IDFFMetaException("unsupportedOperation",null);    }catch (    JAXBException jaxbe) {      debug.error(classMethod,jaxbe);      LogUtil.error(Level.INFO,LogUtil.INVALID_ENTITY_DESCRIPTOR,args);      throw new IDFFMetaException("invalidEntityDescriptor",args);    }  }}  }
class C{  public double num(){  return m_val ? 1.0 : 0.0;}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  public static int resetLDIFImportCount(){  return ldifImportCounter.getAndSet(0);}  }
class C{  private static AppConfigurationEntry processValue(Node node){  if (debug.messageEnabled()) {    debug.message("ConfigUtils.processValue, value=" + node.toString());  }  String value=node.getFirstChild().getNodeValue();  if (value == null || value.length() == 0) {    debug.error("ConfigUtils.processValue, invalid value=" + value);    return null;  }  StringTokenizer st=new StringTokenizer(value);  int len=st.countTokens();  if (len < 2) {    debug.error("ConfigUtils.processValue, wrong config : " + value);    return null;  }  String moduleName=st.nextToken();  String flag=st.nextToken();  Map options=new HashMap();  AppConfigurationEntry.LoginModuleControlFlag cFlag=null;  if (flag.equals("REQUIRED")) {    cFlag=AppConfigurationEntry.LoginModuleControlFlag.REQUIRED;  } else   if (flag.equals("OPTIONAL")) {    cFlag=AppConfigurationEntry.LoginModuleControlFlag.OPTIONAL;  } else   if (flag.equals("REQUISITE")) {    cFlag=AppConfigurationEntry.LoginModuleControlFlag.REQUISITE;  } else   if (flag.equals("SUFFICIENT")) {    cFlag=AppConfigurationEntry.LoginModuleControlFlag.SUFFICIENT;  } else {    debug.error("ConfigUtils.processValue, invalid flag : " + value);    return null;  }  while (st.hasMoreElements()) {    String opt=st.nextToken();    int k=opt.indexOf("=");    if (k != -1) {      HashSet set=new HashSet();      set.add(opt.substring(k + 1));      options.put(opt.substring(0,k),set);    }  }  return new AppConfigurationEntry(moduleName,cFlag,options);}  }
class C{  public boolean isInheritedCollective(){  return this.isInheritedCollective;}  }
class C{  public ConsoleHandler(){  sealed=false;  configure();  setOutputStream(System.err);  sealed=true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdataend.class,args);}  }
class C{  protected HttpResponse doSendRequest(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.FALSE);  conn.sendRequestHeader(request);  if (request instanceof HttpEntityEnclosingRequest) {    boolean sendentity=true;    final ProtocolVersion ver=request.getRequestLine().getProtocolVersion();    if (((HttpEntityEnclosingRequest)request).expectContinue() && !ver.lessEquals(HttpVersion.HTTP_1_0)) {      conn.flush();      int tms=request.getParams().getIntParameter(CoreProtocolPNames.WAIT_FOR_CONTINUE,2000);      if (conn.isResponseAvailable(tms)) {        response=conn.receiveResponseHeader();        if (canResponseHaveBody(request,response)) {          conn.receiveResponseEntity(response);        }        int status=response.getStatusLine().getStatusCode();        if (status < 200) {          if (status != HttpStatus.SC_CONTINUE) {            throw new ProtocolException("Unexpected response: " + response.getStatusLine());          }          response=null;        } else {          sendentity=false;        }      }    }    if (sendentity) {      conn.sendRequestEntity((HttpEntityEnclosingRequest)request);    }  }  conn.flush();  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.TRUE);  return response;}  }
class C{  private static LDAPFilter createPresentFilter(AttributeDescription ad) throws LDAPException {  return LDAPFilter.decode(ad.getName() + "=*");}  }
class C{  public void updateFromExtGState(PdfExtGState extGState){  Float lw=extGState.getLineWidth();  if (lw != null)   lineWidth=(float)lw;  Integer lc=extGState.getLineCapStyle();  if (lc != null)   lineCapStyle=(int)lc;  Integer lj=extGState.getLineJoinStyle();  if (lj != null)   lineJoinStyle=(int)lj;  Float ml=extGState.getMiterLimit();  if (ml != null)   miterLimit=(float)ml;  PdfArray d=extGState.getDashPattern();  if (d != null)   dashPattern=d;  PdfName ri=extGState.getRenderingIntent();  if (ri != null)   renderingIntent=ri;  Boolean op=extGState.getStrokeOverprintFlag();  if (op != null)   strokeOverprint=(boolean)op;  op=extGState.getFillOverprintFlag();  if (op != null)   fillOverprint=(boolean)op;  Integer opm=extGState.getOverprintMode();  if (opm != null)   overprintMode=(int)opm;  PdfArray fnt=extGState.getFont();  if (fnt != null) {    PdfDictionary fontDictionary=fnt.getAsDictionary(0);    if (this.font == null || this.font.getPdfObject() != fontDictionary) {      this.font=PdfFontFactory.createFont(fontDictionary);    }    PdfNumber fntSz=fnt.getAsNumber(1);    if (fntSz != null)     this.fontSize=fntSz.floatValue();  }  PdfObject bg=extGState.getBlackGenerationFunction();  if (bg != null)   blackGenerationFunction=bg;  PdfObject bg2=extGState.getBlackGenerationFunction2();  if (bg2 != null)   blackGenerationFunction2=bg2;  PdfObject ucr=extGState.getUndercolorRemovalFunction();  if (ucr != null)   underColorRemovalFunction=ucr;  PdfObject ucr2=extGState.getUndercolorRemovalFunction2();  if (ucr2 != null)   underColorRemovalFunction2=ucr2;  PdfObject tr=extGState.getTransferFunction();  if (tr != null)   transferFunction=tr;  PdfObject tr2=extGState.getTransferFunction2();  if (tr2 != null)   transferFunction2=tr2;  PdfObject ht=extGState.getHalftone();  if (ht != null)   halftone=ht;  PdfObject local_htp=extGState.getHTP();  if (local_htp != null)   this.htp=local_htp;  Float fl=extGState.getFlatnessTolerance();  if (fl != null)   flatnessTolerance=(float)fl;  Float sm=extGState.getSmothnessTolerance();  if (sm != null)   smoothnessTolerance=sm;  Boolean sa=extGState.getAutomaticStrokeAdjustmentFlag();  if (sa != null)   automaticStrokeAdjustment=(boolean)sa;  PdfObject bm=extGState.getBlendMode();  if (bm != null)   blendMode=bm;  PdfObject sMask=extGState.getSoftMask();  if (sMask != null)   softMask=sMask;  Float ca=extGState.getStrokeOpacity();  if (ca != null)   strokeAlpha=(float)ca;  ca=extGState.getFillOpacity();  if (ca != null)   fillAlpha=(float)ca;  Boolean ais=extGState.getAlphaSourceFlag();  if (ais != null)   alphaIsShape=(boolean)ais;  Boolean tk=extGState.getTextKnockoutFlag();  if (tk != null)   textKnockout=(boolean)tk;}  }
class C{  protected int read() throws IOException {  if (offset == buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    return buffer[offset++] & 0xFF;  } else {    int octet=in.read();    if (octet == -1) {      throw new ASN1Exception("Unexpected end of encoding");    }    buffer[offset++]=(byte)octet;    return octet;  }}  }
class C{  @Override public void printTag(PrintWriter aWriter,int indent,Object bean,StoreDescription aDesc) throws Exception {  aWriter.print("<");  aWriter.print(aDesc.getTag());  storeConnectorAttribtues(aWriter,indent,bean,aDesc);  aWriter.println("/>");}  }
class C{  public static void mergeIfAbsent(Map<String,String> map,Map<String,String> toMerge){  for (  Map.Entry<String,String> entry : toMerge.entrySet()) {    putIfAbsent(map,entry.getKey(),entry.getValue());    ;  }}  }
class C{  public void testShiftRight3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=27;  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/management/jhipster/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public final boolean contains_trace_tails(Collection<BrdItem> p_items,NetNosList p_except_net_no_arr){  for (  BrdItem curr_ob : p_items) {    if (!(curr_ob instanceof BrdTracep))     continue;    BrdTracep curr_trace=(BrdTracep)curr_ob;    if (curr_trace.nets_equal(p_except_net_no_arr))     continue;    if (curr_trace.is_tail())     return true;  }  return false;}  }
class C{  public static String buildX509Certificate(String certAlias) throws WSFederationMetaException {  String classMethod="WSFederationMetaSecurityUtils." + "buildX509Certificate: ";  if ((certAlias == null) || (certAlias.trim().length() == 0)) {    return null;  }  X509Certificate cert=KeyUtil.getKeyProviderInstance().getX509Certificate(certAlias);  if (cert != null) {    try {      return Base64.encode(cert.getEncoded(),true);    } catch (    Exception ex) {      if (debug.messageEnabled()) {        debug.message(classMethod,ex);      }    }  }  Object[] objs={certAlias};  throw new WSFederationMetaException("invalid_cert_alias",objs);}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener) throws javax.xml.transform.TransformerException {  initFunctionTable();  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();  m_patternString=exprString;  XPathParser parser=new XPathParser(errorListener,locator);  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver); else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver); else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));  Expression expr=compiler.compile(0);  this.setExpression(expr);  if ((null != locator) && locator instanceof ExpressionNode) {    expr.exprSetParent((ExpressionNode)locator);  }}  }
class C{  public void documentRegistration(){}  }
class C{  @Override public boolean equals(final Object obj){  if (!(obj instanceof FastDateFormat)) {    return false;  }  final FastDateFormat other=(FastDateFormat)obj;  return printer.equals(other.printer);}  }
class C{  private long reconcileState(){  final Phaser root=this.root;  long s=state;  if (root != this) {    int phase, p;    while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !UNSAFE.compareAndSwapLong(this,stateOffset,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;  }  return s;}  }
class C{  public void addPaymentRecord(Payment payment,Handler<AsyncResult<Void>> resultHandler){  delegate.addPaymentRecord(payment,resultHandler);}  }
class C{  public Object copyValue() throws Throwable {  if (tag != ARRAY || Array.getLength(value) == 0) {    return value;  }  Class type=value.getClass();  if (type == int[].class) {    return ((int[])value).clone();  } else   if (type == byte[].class) {    return ((byte[])value).clone();  } else   if (type == short[].class) {    return ((short[])value).clone();  } else   if (type == long[].class) {    return ((long[])value).clone();  } else   if (type == char[].class) {    return ((char[])value).clone();  } else   if (type == boolean[].class) {    return ((boolean[])value).clone();  } else   if (type == float[].class) {    return ((float[])value).clone();  } else   if (type == double[].class) {    return ((double[])value).clone();  }  return ((Object[])value).clone();}  }
class C{  public void update(String routeId,String routeName,JsonValue routeConfig) throws RouterHandlerException {  write.lock();  Route previousRoute=routes.get(routeId);  try {    Reject.ifNull(routeId,routeName);    write.lock();    try {      unload(routeId);      load(routeId,routeName,routeConfig);    }  finally {      write.unlock();    }    directoryMonitor.store(routeId,routeConfig);    logger.info("Updated the route with id '{}'",routeId);  } catch (  RouterHandlerException e) {    load(previousRoute.getId(),previousRoute.getName(),previousRoute.getConfig());    throw e;  }catch (  IOException e) {    throw new RouterHandlerException(format("An error occurred while storing the route '%s'",routeId),e);  } finally {    write.unlock();  }}  }
class C{  public String toString(){  return ("OATHPrincipal:  " + name);}  }
class C{  @Override public void close() throws IOException {  if (debug > 1) {    System.out.println("close() @ CompressionResponseStream");  }  if (closed)   throw new IOException("This output stream has already been closed");  if (gzipstream != null) {    flushToGZip();    gzipstream.close();    gzipstream=null;  } else {    if (bufferCount > 0) {      if (debug > 2) {        System.out.print("output.write(");        System.out.write(buffer,0,bufferCount);        System.out.println(")");      }      output.write(buffer,0,bufferCount);      bufferCount=0;    }  }  output.close();  closed=true;}  }
class C{  public List<Block> blockList(){  return blocks;}  }
class C{  public ServicesAddViewBean(){  super("ServicesAdd",DEFAULT_DISPLAY_URL,null);  String serviceName=(String)getPageSessionAttribute(SERVICE_NAME);  if (serviceName != null) {    initialize(serviceName);  }}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void deleteArtworkField() throws KeyNotFoundException {  this.deleteField(FieldKey.COVER_ART);}  }
class C{  public String addListener(ServiceListener listener){  validate();  return (ssm.addListener(listener));}  }
class C{  public void noNewStreams(){  deallocate(true,false,false);}  }
class C{  public static <T>T max(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)max((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T max=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(max,next) < 0) {      max=next;    }  }  return max;}  }
class C{  public CertificateMessage(X509Certificate[] certs){  if (certs == null) {    this.certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    length=3;    return;  }  this.certs=certs;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  length=3 + 3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    length+=encoded_certs[i].length;  }}  }
class C{  public int match(final AuthScope that){  int factor=0;  if (LangUtils.equals(this.scheme,that.scheme)) {    factor+=1;  } else {    if (this.scheme != ANY_SCHEME && that.scheme != ANY_SCHEME) {      return -1;    }  }  if (LangUtils.equals(this.realm,that.realm)) {    factor+=2;  } else {    if (this.realm != ANY_REALM && that.realm != ANY_REALM) {      return -1;    }  }  if (this.port == that.port) {    factor+=4;  } else {    if (this.port != ANY_PORT && that.port != ANY_PORT) {      return -1;    }  }  if (LangUtils.equals(this.host,that.host)) {    factor+=8;  } else {    if (this.host != ANY_HOST && that.host != ANY_HOST) {      return -1;    }  }  return factor;}  }
class C{  public String toLocalizedPattern(){  return convertPattern(pattern,PATTERN_CHARS,formatData.getLocalPatternChars(),false);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private String convertIntToIntString(int quoteParam){  String quoteParamString=(new Integer(quoteParam)).toString();  return quoteParamString;}  }
class C{  public void testClearParameters() throws SQLException {  PreparedStatement ps=null;  try {    String query="select * from zoo where id = ? and family=?";    ps=conn.prepareStatement(query);    ps.clearParameters();    try {      ps.execute();      fail("SQLException is not thrown during execute method after calling clearParameters()");    } catch (    SQLException sql) {    }    ps.setInt(1,2);    ps.setString(2,"dog");    ps.clearParameters();    try {      ps.execute();      fail("SQLException is not thrown during execute method after calling clearParameters()");    } catch (    SQLException sqle) {    }    ps.setInt(1,2);    ps.clearParameters();    try {      ps.execute();      fail("SQLException is not thrown during execute method after calling clearParameters()");    } catch (    SQLException sqle) {    }    ps.setInt(1,2);    ps.setString(2,"cat");    try {      ps.execute();    } catch (    SQLException sqle) {      fail("SQLException is thrown during execute method after calling clearParameters() twice");    }  }  finally {    try {      ps.close();    } catch (    SQLException ee) {    }  }}  }
class C{  public static boolean matchPassword(String plain,JKUser user){  return JKEncDec.encode(plain).equals(user.getPassword());}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){  return _fooLocalService.dynamicQueryCount(dynamicQuery,projection);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  returnToMainPage();}  }
class C{  protected Rectangle applyMargins(Rectangle rect,boolean reverse){  return this.applyMargins(rect,getMargins(),reverse);}  }
class C{  public InvalidFrameIdentifierException(String msg){  super(msg);}  }
class C{  static void releaseSearchBuffer(SearchBuffer sb){  sb.empty();  searchBuffers.push(sb);}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("ServerSideSortResponseControl(resultCode=");  buffer.append(resultCode);  if (attributeType != null) {    buffer.append(", attributeType=");    buffer.append(attributeType);  }  buffer.append(")");}  }
class C{  public TransformerConfigurationException(){  super("Configuration Error");}  }
class C{  public void createEntityConfig(String realm,EntityConfigElement entityConfig) throws IDFFMetaException {  String classMethod="IDFFMetaManager.createEntityConfig:";  String entityID=null;  if (entityConfig == null) {    LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_CONFIG,null);    throw new IDFFMetaException("nullEntityConfig",null);  } else {    entityID=entityConfig.getEntityID();    if (entityID == null) {      LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_ID,null);      debug.error(classMethod + "entity ID is null");      throw new IDFFMetaException("nullEntityID",null);    }  }  if ((realm == null) || (realm.length() == 0)) {    realm=ROOT_REALM;  }  String[] args={entityID,realm};  try {    Map attrs=IDFFMetaUtils.convertJAXBToAttrMap(IDFF_ENTITY_CONFIG_ATTR,entityConfig);    Map origAttrs=idffMetaConfigInstance.getConfiguration(realm,entityID);    if (origAttrs == null) {      if (debug.messageEnabled()) {        debug.message(classMethod + "Entity Descriptor for" + entityID+ " does not exist");      }      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_NOT_FOUND,args);      throw new IDFFMetaException("noEntityDescriptor",args);    }    Set origValues=(Set)origAttrs.get(IDFF_ENTITY_CONFIG_ATTR);    if (!origValues.isEmpty()) {      if (debug.messageEnabled()) {        debug.message(classMethod + "Entity Config exists. " + "Use setEntityConfig to set the configuration");      }      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,args);      throw new IDFFMetaException("entityConfigExists",args);    }    if (debug.messageEnabled()) {      debug.message(classMethod + "Entity Config Attrs :" + attrs);    }    idffMetaConfigInstance.setConfiguration(realm,entityID,attrs);    addEntityToCOT(realm,entityID);    LogUtil.access(Level.INFO,LogUtil.CREATE_ENTITY_CONFIG_SUCCEEDED,args);  } catch (  ConfigurationException ce) {    debug.error(classMethod + "Cannot create entity config",ce);    LogUtil.error(Level.INFO,LogUtil.CREATE_ENTITY_CONFIG_FAILED,args);    throw new IDFFMetaException(ce);  }catch (  UnsupportedOperationException uoe) {    debug.error(classMethod + "Unsupported operation");    LogUtil.error(Level.INFO,LogUtil.UNSUPPORTED_OPERATION,args);    throw new IDFFMetaException(uoe);  }catch (  JAXBException jaxbe) {    debug.error(classMethod,jaxbe);    LogUtil.error(Level.INFO,LogUtil.INVALID_ENTITY_CONFIG,args);    throw new IDFFMetaException("invalidEntityConfig",args);  }}  }
class C{  public static <T extends Comparable<? super T>>List<T> asSortedList(Collection<T> collection,Comparator<? super T> comp){  List<T> list=new ArrayList<T>(collection);  Collections.sort(list,comp);  return list;}  }
class C{  void parse(List<LocalizableMessage> warnings) throws IOException, DecodeException {  parse(DEFAULT_TEMPLATE_PATH,warnings);}  }
class C{  public static NSObject parse(InputStream is) throws IOException, PropertyListFormatException {  byte[] buf=PropertyListParser.readAll(is);  return parse(buf);}  }
class C{  private final void growBuffer(){  final int columns=mColumns;  int[] newvalues=ArrayUtils.newUnpaddedIntArray(GrowingArrayUtils.growSize(size()) * columns);  int newsize=newvalues.length / columns;  final int[] valuegap=mValueGap;  final int rowgapstart=mRowGapStart;  int after=mRows - (rowgapstart + mRowGapLength);  if (mValues != null) {    System.arraycopy(mValues,0,newvalues,0,columns * rowgapstart);    System.arraycopy(mValues,(mRows - after) * columns,newvalues,(newsize - after) * columns,after * columns);  }  for (int i=0; i < columns; i++) {    if (valuegap[i] >= rowgapstart) {      valuegap[i]+=newsize - mRows;      if (valuegap[i] < rowgapstart) {        valuegap[i]=rowgapstart;      }    }  }  mRowGapLength+=newsize - mRows;  mRows=newsize;  mValues=newvalues;}  }
class C{  public void testGetScale() throws SQLException {  try {    int scale=3;    String createTable="create table DecimalNumbers ( valueDouble DOUBLE," + "valueFloat FLOAT , scaleTest NUMERIC(10," + scale + ")  );";    String insert="insert into DecimalNumbers values (1.5, 20.55, 30.666);";    String select="select * from DecimalNumbers;";    Statement st=conn.createStatement();    st.executeUpdate(createTable);    st.executeUpdate(insert);    rs=st.executeQuery(select);    ResultSetMetaData rsmd2=rs.getMetaData();    assertNotNull(rsmd2);    assertEquals(scale,rsmd2.getScale(3));    assertTrue(rsmd2.getScale(1) > 0);    assertTrue(rsmd2.getScale(2) > 0);    try {      rsmd.getScale(0);      fail("SQLException is not thrown");    } catch (    SQLException e) {    }    try {      rsmd.getScale(5);      fail("SQLException is not thrown");    } catch (    SQLException e) {    }    try {      conn.close();      rsmd.getScale(1);      fail("Exception expected");    } catch (    SQLException e) {    }  }  finally {    st.cancel();  }}  }
class C{  private static void mkdir(String dir) throws IOException {  FileUtils.createDirectory(dir);}  }
class C{  public UnknownServiceException(String detailMessage){  super(detailMessage);}  }
class C{  @Override public void parseArguments(String[] rawArguments,Properties argumentProperties) throws ArgumentException {  this.subCommand=null;  final ArrayList<String> trailingArguments=getTrailingArguments();  trailingArguments.clear();  setUsageOrVersionDisplayed(false);  boolean inTrailingArgs=false;  int numArguments=rawArguments.length;  for (int i=0; i < numArguments; i++) {    final String arg=rawArguments[i];    if (inTrailingArgs) {      trailingArguments.add(arg);      if (subCommand == null) {        throw new ArgumentException(ERR_ARG_SUBCOMMAND_INVALID.get());      }      if (subCommand.getMaxTrailingArguments() > 0 && trailingArguments.size() > subCommand.getMaxTrailingArguments()) {        throw new ArgumentException(ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS.get(subCommand.getMaxTrailingArguments()));      }      continue;    }    if (arg.equals("--")) {      inTrailingArgs=true;    } else     if (arg.startsWith("--")) {      String argName=arg.substring(2);      String argValue=null;      int equalPos=argName.indexOf('=');      if (equalPos < 0) {      } else       if (equalPos == 0) {        throw new ArgumentException(ERR_SUBCMDPARSER_LONG_ARG_WITHOUT_NAME.get(arg));      } else {        argValue=argName.substring(equalPos + 1);        argName=argName.substring(0,equalPos);      }      String origArgName=argName;      if (!longArgumentsCaseSensitive()) {        argName=toLowerCase(argName);      }      Argument a=globalLongIDMap.get(argName);      if (a == null) {        if (subCommand != null) {          a=subCommand.getArgument(argName);        }        if (a == null) {          if (OPTION_LONG_HELP.equals(argName)) {            writeToUsageOutputStream(getUsage());            return;          } else           if (OPTION_LONG_PRODUCT_VERSION.equals(argName)) {            printVersion();            return;          } else           if (subCommand != null) {            throw new ArgumentException(ERR_SUBCMDPARSER_NO_GLOBAL_ARGUMENT_FOR_LONG_ID.get(origArgName));          } else {            throw new ArgumentException(ERR_SUBCMDPARSER_NO_ARGUMENT_FOR_LONG_ID.get(origArgName));          }        }      }      a.setPresent(true);      if (usageGroupArguments.containsKey(a)) {        getUsage(a);        return;      }      if (a.needsValue()) {        if (argValue == null) {          if ((i + 1) == numArguments) {            throw new ArgumentException(ERR_SUBCMDPARSER_NO_VALUE_FOR_ARGUMENT_WITH_LONG_ID.get(argName));          }          argValue=rawArguments[++i];        }        LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();        if (!a.valueIsAcceptable(argValue,invalidReason)) {          throw new ArgumentException(ERR_SUBCMDPARSER_VALUE_UNACCEPTABLE_FOR_LONG_ID.get(argValue,argName,invalidReason));        }        if (a.hasValue() && !a.isMultiValued()) {          throw new ArgumentException(ERR_SUBCMDPARSER_NOT_MULTIVALUED_FOR_LONG_ID.get(origArgName));        }        a.addValue(argValue);      } else       if (argValue != null) {        throw new ArgumentException(ERR_SUBCMDPARSER_ARG_FOR_LONG_ID_DOESNT_TAKE_VALUE.get(origArgName));      }    } else     if (arg.equals("-")) {      throw new ArgumentException(ERR_SUBCMDPARSER_INVALID_DASH_AS_ARGUMENT.get());    } else     if (arg.startsWith("-")) {      char argCharacter=arg.charAt(1);      String argValue;      if (arg.length() > 2) {        argValue=arg.substring(2);      } else {        argValue=null;      }      Argument a=globalShortIDMap.get(argCharacter);      if (a == null) {        if (subCommand == null) {          if (argCharacter == '?') {            writeToUsageOutputStream(getUsage());            if (getUsageArgument() != null) {              getUsageArgument().setPresent(true);            }            return;          } else           if (argCharacter == OPTION_SHORT_PRODUCT_VERSION) {            if (dashVAccepted()) {              printVersion();              return;            } else {              throw new ArgumentException(ERR_SUBCMDPARSER_NO_GLOBAL_ARGUMENT_FOR_SHORT_ID.get(argCharacter));            }          } else {            throw new ArgumentException(ERR_SUBCMDPARSER_NO_GLOBAL_ARGUMENT_FOR_SHORT_ID.get(argCharacter));          }        } else {          a=subCommand.getArgument(argCharacter);          if (a == null) {            if (argCharacter == '?') {              writeToUsageOutputStream(getUsage());              return;            } else             if (argCharacter == OPTION_SHORT_PRODUCT_VERSION) {              if (dashVAccepted()) {                printVersion();                return;              }            } else {              throw new ArgumentException(ERR_SUBCMDPARSER_NO_ARGUMENT_FOR_SHORT_ID.get(argCharacter));            }          }        }      }      a.setPresent(true);      if (usageGroupArguments.containsKey(a)) {        getUsage(a);        return;      }      if (a.needsValue()) {        if (argValue == null) {          if ((i + 1) == numArguments) {            throw new ArgumentException(ERR_SUBCMDPARSER_NO_VALUE_FOR_ARGUMENT_WITH_SHORT_ID.get(argCharacter));          }          argValue=rawArguments[++i];        }        LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();        if (!a.valueIsAcceptable(argValue,invalidReason)) {          throw new ArgumentException(ERR_SUBCMDPARSER_VALUE_UNACCEPTABLE_FOR_SHORT_ID.get(argValue,argCharacter,invalidReason));        }        if (a.hasValue() && !a.isMultiValued()) {          throw new ArgumentException(ERR_SUBCMDPARSER_NOT_MULTIVALUED_FOR_SHORT_ID.get(argCharacter));        }        a.addValue(argValue);      } else       if (argValue != null) {        int valueLength=argValue.length();        for (int j=0; j < valueLength; j++) {          char c=argValue.charAt(j);          Argument b=globalShortIDMap.get(c);          if (b == null) {            if (subCommand == null) {              throw new ArgumentException(ERR_SUBCMDPARSER_NO_GLOBAL_ARGUMENT_FOR_SHORT_ID.get(argCharacter));            }            b=subCommand.getArgument(c);            if (b == null) {              throw new ArgumentException(ERR_SUBCMDPARSER_NO_ARGUMENT_FOR_SHORT_ID.get(argCharacter));            }          }          if (b.needsValue()) {            throw new ArgumentException(ERR_SUBCMDPARSER_CANT_MIX_ARGS_WITH_VALUES.get(argCharacter,argValue,c));          }          b.setPresent(true);          if (usageGroupArguments.containsKey(b)) {            getUsage(b);            return;          }        }      }    } else     if (subCommand != null) {      if (subCommand.allowsTrailingArguments()) {        trailingArguments.add(arg);        inTrailingArgs=true;      } else {        throw new ArgumentException(ERR_ARGPARSER_DISALLOWED_TRAILING_ARGUMENT.get(arg));      }    } else {      String nameToCheck=arg;      if (!longArgumentsCaseSensitive()) {        nameToCheck=toLowerCase(arg);      }      SubCommand sc=subCommands.get(nameToCheck);      if (sc == null) {        throw new ArgumentException(ERR_SUBCMDPARSER_INVALID_ARGUMENT.get(arg));      }      subCommand=sc;    }  }  if (subCommand != null) {    int minTrailingArguments=subCommand.getMinTrailingArguments();    if (subCommand.allowsTrailingArguments() && minTrailingArguments > 0 && trailingArguments.size() < minTrailingArguments) {      throw new ArgumentException(ERR_ARGPARSER_TOO_FEW_TRAILING_ARGUMENTS.get(minTrailingArguments));    }  }  if (argumentProperties == null) {    argumentProperties=checkExternalProperties();  }  normalizeArguments(argumentProperties,globalArgumentList);  if (subCommand != null) {    normalizeArguments(argumentProperties,subCommand.getArguments());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttr1;  Attr newAttr2;  Attr newAttribute;  String attrName;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("http://www.w3.org/DOM/Test","root");  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  newAttribute=((Element)element).setAttributeNodeNS(newAttr1);  newAttr2=doc.createAttributeNS("http://www.w3.org/DOM/L2","L2:att");  newAttribute=((Element)element).setAttributeNodeNS(newAttr2);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L2","att");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns03","L2:att",attrName);}  }
class C{  @NonNull public static Interpolator constant(){  return constant(0);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SharedSecretChallengeResponseElement createSharedSecretChallengeResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SharedSecretChallengeResponseElementImpl();}  }
class C{  public QName(String namespaceURI,String prefix,String localName){  this(namespaceURI,prefix,localName,false);}  }
class C{  protected void initialize() throws Exception {}  }
class C{  public boolean isRelative(){  return isRel;}  }
class C{  public void forceDelete(SSOToken adminToken) throws SMSException, SSOException {  delete(adminToken);}  }
class C{  public void write(Writer out) throws IOException {  Document doc=getDocument();  try {    getUI().getEditorKit(this).write(out,doc,0,doc.getLength());  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }}  }
class C{  private void addTestEntriesToDB() throws Exception {  for (  String ldifEntry : updatedEntries) {    addTestEntryToDB(TestCaseUtils.entryFromLdifString(ldifEntry));  }  log("addTestEntriesToDB : " + updatedEntries.length + " successfully added to DB");}  }
class C{  public static byte[] scalarMultBase(byte[] n){  toPrivateKey(n);  return scalarMult(n,BASE_POINT);}  }
class C{  public void testMultiplyEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="9.20003122862175749786430095741145455670101391569026662845893091880727173060570190220616E+111";  int cScale=-25;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  @Override public void removeByField2(boolean field2){  for (  Foo foo : findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public WildcardFilter(String wildcard){  if (wildcard == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.wildcards=new String[]{wildcard};}  }
class C{  public void auditLoginFailure(LoginState loginState){  auditLoginFailure(loginState,findFailureReason(loginState));}  }
class C{  public PdfPage removePage(int pageNum){  PdfPage pdfPage=getPage(pageNum);  if (pdfPage.isFlushed()) {    Logger logger=LoggerFactory.getLogger(PdfPage.class);    logger.warn(LogMessageConstant.REMOVING_PAGE_HAS_ALREADY_BEEN_FLUSHED);  }  if (internalRemovePage(--pageNum)) {    return pdfPage;  } else {    return null;  }}  }
class C{  public static void writeAbstractObject(OutputStream out,java.lang.Object obj){  if (utilDelegate != null) {    utilDelegate.writeAbstractObject(out,obj);  }}  }
class C{  public int nextInt() throws DataFormatException {  try {    return bytes.readInt();  } catch (  IndexOutOfBoundsException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  long triggerTime(long delay){  return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keyStrength,java.security.Key kek,int kekStrength,String providerID) throws EncryptionException {  return encryptAndReplace(doc,element,secretKeyAlg,keyStrength,kek,kekStrength,providerID,false);}  }
class C{  public Vector(){  this.x=0;  this.y=0;  this.z=0;}  }
class C{  public static boolean containsModifiableVariableModification(ProtocolMessage object){  for (  ModifiableVariableHolder holder : object.getAllModifiableVariableHolders()) {    for (    Field f : holder.getAllModifiableVariableFields()) {      if (containsModifiableVariableModification(holder,f)) {        return true;      }    }  }  return false;}  }
class C{  private static void addAttrLevelRightsInfo(AciLDAPOperationContainer container,int mask,AttributeType aType,Entry retEntry,String rightStr){  if (hasAttrMask(mask,ACL_RIGHTS_INFO)) {    String typeStr=aclRightsInfoAttrLogsStr + ";" + rightStr+ ";"+ aType.getNameOrOID();    AttributeType attributeType=DirectoryServer.getSchema().getAttributeType(typeStr);    Attribute attr=Attributes.create(attributeType,container.getEvalSummary());    if (!retEntry.hasAttribute(attributeType)) {      retEntry.addAttribute(attr,null);    }  }}  }
class C{  ConnectionImpl(final PooledConnectionImpl pooledConnection,final Connection connection,final boolean accessToUnderlyingConnectionAllowed){  super(connection);  this.pooledConnection=pooledConnection;  this.accessToUnderlyingConnectionAllowed=accessToUnderlyingConnectionAllowed;}  }
class C{  private static void assertEcho(String result,String expected){  assertTrue(result,result.indexOf("<p>" + expected + "</p>") > 0);}  }
class C{  public void testCompareToDiffSigns1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  private void registerDeleteListener(DN baseDN,ConfigDeleteListener adaptor) throws ConfigException {  if (configRepository.hasEntry(baseDN)) {    configRepository.registerDeleteListener(baseDN,adaptor);  } else {    ConfigAddListener delayedListener=new DelayedConfigAddListener(baseDN,adaptor,configRepository);    registerDelayedListener(baseDN,delayedListener);  }}  }
class C{  void close() throws StorageRuntimeException {  for (  DN baseDN : entryContainers.keySet()) {    EntryContainer ec=unregisterEntryContainer(baseDN);    ec.exclusiveLock.lock();    try {      ec.close();    }  finally {      ec.exclusiveLock.unlock();    }  }  config.removePluggableChangeListener(this);  if (storage != null) {    storage.close();  }}  }
class C{  private void addGlobalPaths(String parentPath,List<ServiceSchema> schemaPath,ServiceSchema globalSchema,ServiceSchema organizationSchema,ServiceSchema dynamicSchema,Map<SmsRouteTree,Set<RouteMatcher<Request>>> serviceRoutes,Pattern ignoredRoutes,SmsRouteTree routeTree) throws SMSException {  String schemaName=globalSchema.getResourceName();  String path=updatePaths(parentPath,schemaName,schemaPath,globalSchema);  SmsGlobalSingletonProvider handler=globalSingletonProviderFactory.create(new SmsJsonConverter(globalSchema),globalSchema,organizationSchema,dynamicSchema,schemaType,new ArrayList<>(schemaPath),parentPath,true);  debug.message("Adding singleton path {}",path);  routeTree=addRoute(globalSchema,EQUALS,path,newAnnotatedRequestHandler(handler),ignoredRoutes,routeTree,serviceRoutes);  if (globalSchema != organizationSchema) {    addPaths("",schemaPath,globalSchema,serviceRoutes,ignoredRoutes,routeTree);  }}  }
class C{  private String readName() throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    checkRelaxed("name expected");    return "";  }  int start=position;  StringBuilder result=null;  char c=buffer[position];  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == ':' || c >= '\u00c0' || relaxed) {    position++;  } else {    checkRelaxed("name expected");    return "";  }  while (true) {    if (position >= limit) {      if (result == null) {        result=new StringBuilder();      }      result.append(buffer,start,position - start);      if (!fillBuffer(1)) {        return result.toString();      }      start=position;    }    c=buffer[position];    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_' || c == '-' || c == ':' || c == '.' || c >= '\u00b7') {      position++;      continue;    }    if (result == null) {      return stringPool.get(buffer,start,position - start);    } else {      result.append(buffer,start,position - start);      return result.toString();    }  }}  }
class C{  public ConfigException createDecodingExceptionAdaptor(ServerManagedObjectDecodingException e){  DN dn=e.getPartialManagedObject().getDN();  LocalizableMessage message=ERR_ADMIN_MANAGED_OBJECT_DECODING_PROBLEM.get(dn,stackTraceToSingleLineString(e,true));  return new ConfigException(message,e);}  }
class C{  protected void undoTo(UndoableEdit edit) throws CannotUndoException {  boolean done=false;  while (!done) {    UndoableEdit next=edits.elementAt(--indexOfNextAdd);    next.undo();    done=next == edit;  }}  }
class C{  private ByteSequence encode(DN dn,Collection<String> col){  if (col != null && !col.isEmpty()) {    ByteStringBuilder b=new ByteStringBuilder();    byte[] dnBytes=StaticUtils.getBytes(dn.toString());    b.appendInt(dnBytes.length);    b.appendBytes(dnBytes);    b.appendInt(col.size());    for (    String s : col) {      byte[] bytes=StaticUtils.getBytes(s);      b.appendInt(bytes.length);      b.appendBytes(bytes);    }    return b;  }  return null;}  }
class C{  public Text createTextNode(String data){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  private void newClientWithUnknownChanges() throws Exception {  debugInfo("Starting newClientWithUnknownChanges");  ServerState state=newServerState(unknownCSNServer1,secondCSNServer2);  newClientWithChanges(state,secondCSNServer1);  debugInfo("Ending newClientWithUnknownChanges");}  }
class C{  public NotContextException(){  super();}  }
class C{  public NetNosList(int[] p_nets_no){  net_nos_arr=p_nets_no;}  }
class C{  public AttributeSet translateHTMLToCSS(AttributeSet htmlAttrSet){  AttributeSet cssAttrSet=css.translateHTMLToCSS(htmlAttrSet);  MutableAttributeSet cssStyleSet=addStyle(null,null);  cssStyleSet.addAttributes(cssAttrSet);  return cssStyleSet;}  }
class C{  public void onMessage(HttpServletRequest request,HttpServletResponse response,SOAPMessage message){  FSUtils.debug.message("FSSOAPReceiver.onMessage: Called");  try {    Element elt=soapService.parseSOAPMessage(message);    if (elt == null) {      FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "Error in processing saml:Request. Invalid SOAPMessage");      response.setStatus(response.SC_INTERNAL_SERVER_ERROR);      returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);      return;    }    String eltTagName=(elt.getTagName().trim());    String ns=elt.getNamespaceURI().trim();    String nodeName=elt.getLocalName().trim();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSOAPReceiver.onMessage: " + "tagName: " + eltTagName + " namespaceUri: "+ ns+ " localName: "+ nodeName);    }    if (nodeName.equalsIgnoreCase("Request") && ns.equalsIgnoreCase(IFSConstants.PROTOCOL_NAMESPACE_URI)) {      SOAPMessage retMessage=null;      try {        FSSAMLRequest samlRequest=new FSSAMLRequest(elt);        IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();        if (metaManager == null) {          FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "could not create meta instance");          response.setStatus(response.SC_INTERNAL_SERVER_ERROR);          returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);          return;        }        String metaAlias=FSServiceUtils.getMetaAlias(request);        String realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);        String hostedEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);        IDPDescriptorType hostedDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);        BaseConfigType hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);        FSServiceManager sm=FSServiceManager.getInstance();        FSSSOBrowserArtifactProfileHandler handler=(FSSSOBrowserArtifactProfileHandler)sm.getBrowserArtifactSSOAndFedHandler(request,response,samlRequest);        handler.setSOAPMessage(message);        handler.setSAMLRequestElement(elt);        handler.setHostedEntityId(hostedEntityId);        handler.setHostedDescriptor(hostedDesc);        handler.setHostedDescriptorConfig(hostedConfig);        handler.setMetaAlias(metaAlias);        handler.setRealm(realm);        FSResponse samlResponse=handler.processSAMLRequest(samlRequest);        if (samlResponse != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSOAPReceiver.onMessage: " + "SAML Response created: " + samlResponse.toXMLString());          }        } else {          FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "SAML Response is null");          response.setStatus(response.SC_INTERNAL_SERVER_ERROR);          returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);          return;        }        retMessage=soapService.bind(((FSResponse)samlResponse).toXMLString(true,true));        if (FSServiceUtils.isSigningOn()) {          List assList=samlResponse.getAssertion();          Iterator iter=assList.iterator();          while (iter.hasNext()) {            FSAssertion assertion=(FSAssertion)iter.next();            String id=assertion.getID();            Document doc=(Document)FSServiceUtils.createSOAPDOM(retMessage);            String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);            if (certAlias == null) {              if (FSUtils.debug.messageEnabled()) {                FSUtils.debug.message("SOAPReceiver.onMessage: couldn't " + "obtain this site's cert alias.");              }              throw new SAMLResponderException(FSUtils.bundle.getString("cannotFindCertAlias"));            }            XMLSignatureManager manager=XMLSignatureManager.getInstance();            int minorVersion=assertion.getMinorVersion();            if (minorVersion == IFSConstants.FF_11_ASSERTION_MINOR_VERSION) {              manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),IFSConstants.ID,id,false);            } else             if (minorVersion == IFSConstants.FF_12_POST_ASSERTION_MINOR_VERSION || minorVersion == IFSConstants.FF_12_ART_ASSERTION_MINOR_VERSION) {              manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),IFSConstants.ASSERTION_ID,assertion.getAssertionID(),false);            } else {              FSUtils.debug.error("invalid minor version.");            }            retMessage=FSServiceUtils.convertDOMToSOAP(doc);          }        }        if (retMessage == null) {          FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "Error in processing saml:Request");          response.setStatus(response.SC_INTERNAL_SERVER_ERROR);          returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);          return;        }      } catch (      SAMLException se) {        FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "Error in processing saml:Request:",se);        response.setStatus(response.SC_INTERNAL_SERVER_ERROR);        returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);        return;      }catch (      IDFFMetaException me) {        FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "Error in processing saml:Request:",me);        response.setStatus(response.SC_INTERNAL_SERVER_ERROR);        returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);        return;      }      returnSOAPMessage(retMessage,response);      return;    }    if (nodeName.equalsIgnoreCase("AuthnRequest") && (ns.equalsIgnoreCase(IFSConstants.libertyMessageNamespaceURI) || ns.equalsIgnoreCase(IFSConstants.FF_12_XML_NS))) {      SOAPMessage retMessage=null;      try {        FSAuthnRequest authnRequest=new FSAuthnRequest(elt);        handleLECPRequest(request,response,authnRequest);        retMessage=null;      } catch (      FSException e) {        FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "Error in processing lecp AuthnRequest:",e);        response.setStatus(response.SC_INTERNAL_SERVER_ERROR);        returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);        return;      }      returnSOAPMessage(retMessage,response);      return;    } else     if (nodeName.equalsIgnoreCase("RegisterNameIdentifierRequest") && (ns.equalsIgnoreCase(IFSConstants.libertyMessageNamespaceURI) || ns.equalsIgnoreCase(IFSConstants.FF_12_XML_NS))) {      SOAPMessage retMessage=null;      boolean isError=false;      String providerAlias=null;      ProviderDescriptorType hostedProviderDesc=null;      BaseConfigType hostedConfig=null;      String realm=null;      String hostedEntityId=null;      String hostedRole=null;      try {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSSOAPReceiver.onMessage: " + "Handling NameRegistrationRequest");        }        IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();        if (metaManager == null) {          FSUtils.debug.message("Unable to get meta manager");          isError=true;        } else {          providerAlias=FSServiceUtils.getMetaAlias(request);          if (providerAlias == null || providerAlias.length() < 1) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("Unable to retrieve alias" + "Hosted Provider. Cannot process request");            }            isError=true;          }          realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);          try {            hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);            hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);            if (hostedRole != null && hostedRole.equals(IFSConstants.IDP)) {              hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);              hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);            } else             if (hostedRole != null && hostedRole.equals(IFSConstants.SP)) {              hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);              hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);            }            if (hostedProviderDesc == null) {              throw new IDFFMetaException((String)null);            }          } catch (          IDFFMetaException eam) {            FSUtils.debug.error("Unable to find Hosted Provider. " + "Cannot process request");            isError=true;          }        }        if (isError || hostedProviderDesc == null) {          returnSOAPMessage(retMessage,response);          return;        } else {          FSNameRegistrationResponse regisResponse=handleRegistrationRequest(elt,message,hostedProviderDesc,hostedConfig,hostedRole,realm,hostedEntityId,providerAlias,request,response);          if (regisResponse == null) {            FSUtils.debug.error("Error in creating NameRegistration Response");            response.setStatus(response.SC_INTERNAL_SERVER_ERROR);            retMessage=soapService.formSOAPError("Server","cannotProcessRequest",null);          } else {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSOAPReceiver.onMessage: " + "Completed creating response");            }            retMessage=soapService.bind(regisResponse.toXMLString(true,true));            FSUtils.debug.message("Completed bind message");            if (retMessage == null) {              FSUtils.debug.error("Error in processing NameRegistration " + "Response");              response.setStatus(response.SC_INTERNAL_SERVER_ERROR);              retMessage=soapService.formSOAPError("Server","cannotProcessRequest",null);            } else {              if (FSServiceUtils.isSigningOn()) {                try {                  int minorVersion=regisResponse.getMinorVersion();                  if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {                    retMessage=signResponse(retMessage,IFSConstants.ID,regisResponse.getID(),hostedConfig);                  } else                   if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {                    retMessage=signResponse(retMessage,IFSConstants.RESPONSE_ID,regisResponse.getResponseID(),hostedConfig);                  } else {                    if (FSUtils.debug.messageEnabled()) {                      FSUtils.debug.message("invalid minor version.");                    }                  }                } catch (                SAMLException e) {                  FSUtils.debug.error("FSNameRegistrationHandler:" + "sign soap Response failed",e);                  returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);                  return;                }catch (                FSMsgException e) {                  FSUtils.debug.error("FSNameRegistrationHandler::" + "signRegistrationResponse failed",e);                  returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);                  return;                }              }            }          }        }        if (FSUtils.debug.messageEnabled()) {          ByteArrayOutputStream bop=null;          String xmlString=null;          bop=new ByteArrayOutputStream();          retMessage.writeTo(bop);          xmlString=bop.toString(IFSConstants.DEFAULT_ENCODING);          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("return SOAP message:" + xmlString);          }        }        returnSOAPMessage(retMessage,response);        return;      } catch (      Exception se) {        FSUtils.debug.error("Error in processing Name Registration request" + se.getMessage());        response.setStatus(response.SC_INTERNAL_SERVER_ERROR);        retMessage=soapService.formSOAPError("Server","cannotProcessRequest",null);        returnSOAPMessage(retMessage,response);      }    } else     if (nodeName.equalsIgnoreCase("NameIdentifierMappingRequest") && (ns.equalsIgnoreCase(IFSConstants.libertyMessageNamespaceURI) || ns.equalsIgnoreCase(IFSConstants.FF_12_XML_NS))) {      FSUtils.debug.message("FSSOAPReceiver:handling Name Identifier Mapping Request");      IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();      String metaAlias=FSServiceUtils.getMetaAlias(request);      String realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);      String hostedEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);      ProviderDescriptorType hostedDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);      BaseConfigType hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);      FSNameIdentifierMappingRequest mappingRequest=new FSNameIdentifierMappingRequest(elt);      if (FSServiceUtils.isSigningOn()) {        String remoteEntityId=mappingRequest.getProviderID();        ProviderDescriptorType remoteDesc=getRemoteProviderDescriptor(IFSConstants.IDP,remoteEntityId,realm);        if (remoteDesc == null) {          return;        }        if (verifyRequestSignature(elt,message,KeyUtil.getVerificationCert(remoteDesc,remoteEntityId,true))) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSOAPReceiver: Success in verifying " + "Name Identifier Mapping Request");          }        } else {          FSUtils.debug.error("Failed verifying Name Identifier Mapping Request");          returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);          return;        }      }      String targetNamespace=mappingRequest.getTargetNamespace();      String inResponseTo=mappingRequest.getRequestID();      Status status=new Status(new StatusCode("samlp:Success"));      FSNameMappingHandler idpHandler=new FSNameMappingHandler(hostedEntityId,hostedDesc,hostedConfig,metaAlias);      NameIdentifier nameIdentifier=idpHandler.getNameIdentifier(mappingRequest,targetNamespace,false);      String enableEncryption=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.ENABLE_NAMEID_ENCRYPTION);      if (enableEncryption != null && enableEncryption.equalsIgnoreCase("true")) {        nameIdentifier=EncryptedNameIdentifier.getEncryptedNameIdentifier(nameIdentifier,realm,targetNamespace);      }      FSNameIdentifierMappingResponse mappingResponse=new FSNameIdentifierMappingResponse(hostedEntityId,inResponseTo,status,nameIdentifier);      if (FSServiceUtils.isSigningOn()) {        String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);        mappingResponse.signXML(certAlias);      }      SOAPMessage retMessage=soapService.bind(mappingResponse.toXMLString(true,true));      returnSOAPMessage(retMessage,response);      return;    } else     if (nodeName.equalsIgnoreCase("FederationTerminationNotification") && (ns.equalsIgnoreCase(IFSConstants.libertyMessageNamespaceURI) || ns.equalsIgnoreCase(IFSConstants.FF_12_XML_NS))) {      try {        FSUtils.debug.message("calling FSSOAPReceiver::handleTerminationRequest");        boolean bHandleStatus=handleTerminationRequest(elt,message,request,response);        if (bHandleStatus) {          FSUtils.debug.message("Completed processing terminationRequest");          returnTerminationStatus(response);          return;        } else {          FSUtils.debug.message("Failed processing terminationRequest");          returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);          return;        }      } catch (      Exception se) {        FSUtils.debug.error("Error in processing Federation Termination Request",se);        String[] data={IFSConstants.TERMINATION_REQUEST_PROCESSING_FAILED};        LogUtil.error(Level.INFO,LogUtil.TERMINATION_REQUEST_PROCESSING_FAILED,data);        returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);        return;      }    } else     if (nodeName.equalsIgnoreCase("LogoutRequest") && (ns.equalsIgnoreCase(IFSConstants.libertyMessageNamespaceURI) || ns.equalsIgnoreCase(IFSConstants.FF_12_XML_NS))) {      try {        FSUtils.debug.message("calling FSSOAPReceiver::handleLogoutRequest");        ProviderDescriptorType hostedProviderDesc=null;        BaseConfigType hostedConfig=null;        String providerAlias=null;        String realm=null;        String hostedEntityId=null;        String hostedRole=null;        try {          providerAlias=FSServiceUtils.getMetaAlias(request);          realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);          IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();          hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);          hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);          if (hostedRole != null) {            if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {              hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);              hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);            } else             if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {              hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);              hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);            }          }        } catch (        Exception e) {          FSUtils.debug.error("FSSOAPReceiver, provider",e);        }        FSLogoutNotification logoutRequest=new FSLogoutNotification(elt);        Map map=handleLogoutRequest(elt,logoutRequest,message,request,response,hostedProviderDesc,hostedConfig,providerAlias,realm,hostedEntityId,hostedRole);        String responseID=SAMLUtils.generateID();        String inResponseTo=logoutRequest.getRequestID();        String relayState=logoutRequest.getRelayState();        FSLogoutResponse resp=null;        boolean statusSuccess=false;        SOAPMessage retSoapMessage=null;        if (map == null) {          StatusCode statusCode=new StatusCode(IFSConstants.SAML_RESPONDER);          Status status=new Status(statusCode);          resp=new FSLogoutResponse(responseID,inResponseTo,status,hostedEntityId,relayState);        } else {          retSoapMessage=(SOAPMessage)map.get(MESSAGE);          SOAPPart sp=retSoapMessage.getSOAPPart();          SOAPEnvelope se=sp.getEnvelope();          SOAPBody sb=se.getBody();          if (sb.hasFault()) {            StatusCode secondLevelstatusCode=new StatusCode(IFSConstants.SAML_UNSUPPORTED);            StatusCode statusCode=new StatusCode(IFSConstants.SAML_RESPONDER,secondLevelstatusCode);            Status status=new Status(statusCode);            resp=new FSLogoutResponse(responseID,inResponseTo,status,hostedEntityId,relayState);          } else {            StatusCode statusCode=new StatusCode(IFSConstants.SAML_SUCCESS);            Status status=new Status(statusCode);            resp=new FSLogoutResponse(responseID,inResponseTo,status,hostedEntityId,relayState);            statusSuccess=true;          }        }        resp.setID(IFSConstants.LOGOUTID);        resp.setMinorVersion(logoutRequest.getMinorVersion());        retSoapMessage=soapService.bind(resp.toXMLString(true,true));        if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP) && statusSuccess) {          FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);          if (spAdapter != null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSSOAPReceiver, " + "call postSingleLogoutSuccess, IDP/SOAP");            }            try {              spAdapter.postSingleLogoutSuccess(hostedEntityId,request,response,(String)map.get(USERID),logoutRequest,resp,IFSConstants.LOGOUT_IDP_SOAP_PROFILE);            } catch (            Exception e) {              FSUtils.debug.error("postSingleLogoutSuccess." + "IDP/SOAP",e);            }          }        }        if (FSServiceUtils.isSigningOn()) {          try {            int minorVersion=resp.getMinorVersion();            if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {              retSoapMessage=signResponse(retSoapMessage,IFSConstants.ID,resp.getID(),hostedConfig);            } else             if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {              retSoapMessage=signResponse(retSoapMessage,IFSConstants.RESPONSE_ID,resp.getResponseID(),hostedConfig);            } else {              FSUtils.debug.error("invalid minor version.");            }          } catch (          SAMLException e) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("LogoutResponse failed",e);            }            returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);            return;          }catch (          FSMsgException e) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("LogoutResponse failed",e);            }            returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);            return;          }catch (          Exception e) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("Logout exception:",e);            }          }        }        returnSOAPMessage(retSoapMessage,response);        return;      } catch (      Exception se) {        FSUtils.debug.error("Error in processing logout Request",se);        String[] data={FSUtils.bundle.getString(IFSConstants.LOGOUT_REQUEST_PROCESSING_FAILED)};        LogUtil.error(Level.INFO,LogUtil.LOGOUT_REQUEST_PROCESSING_FAILED,data);        returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);        return;      }    }  } catch (  Exception e) {    FSUtils.debug.error("FSSOAPReceiver.onMessage: " + "Error in processing Request: Exception occured: ",e);    response.setStatus(response.SC_INTERNAL_SERVER_ERROR);    java.io.ByteArrayOutputStream strm=new java.io.ByteArrayOutputStream();    e.printStackTrace(new java.io.PrintStream(strm));    FSUtils.debug.error(strm.toString());    returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);    return;  }  returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);  return;}  }
class C{  static ServiceConfig createOrGetPolicyConfig(String configName,String configId,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException {  ServiceConfig sConfig=null;  try {    ServiceConfig oConfig=scm.getOrganizationConfig(org,null);    sConfig=(oConfig == null) ? null : oConfig.getSubConfig(configName);    if (sConfig == null) {      if (debug.messageEnabled()) {        debug.message("Creating the " + configName + " tree for org: "+ org);      }      createPolicyTree(configName,configId,scm,org);      if (oConfig == null) {        oConfig=scm.getOrganizationConfig(org,null);      }      if ((oConfig == null) || ((sConfig=oConfig.getSubConfig(configName)) == null)) {        String objs[]={configName};        throw (new PolicyException(ResBundleUtils.rbName,"unable_to_get_policy_node",objs,null));      }    }  } catch (  SMSException smse) {    debug.error("SMS error in creating " + configName + " node for org: "+ org,smse);    if (smse.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {      String objs[]={configName};      throw (new NoPermissionException(ResBundleUtils.rbName,"insufficient_access_rights",objs));    } else {      String objs[]={configName};      throw (new PolicyException(ResBundleUtils.rbName,"unable_to_get_policy_node",objs,smse));    }  }  return (sConfig);}  }
class C{  private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState){  float bottomPeekStart=mInnerHeight - mBottomStackPeekSize;  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;  float currentYPosition=0.0f;  float yPositionInScrollView=0.0f;  int childCount=algorithmState.visibleChildren.size();  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;  for (int i=0; i < childCount; i++) {    ExpandableView child=algorithmState.visibleChildren.get(i);    float preYPosition=currentYPosition;    StackScrollState.ViewState childViewState=resultState.getViewStateForView(child);    childViewState.location=StackScrollState.ViewState.LOCATION_UNKNOWN;    int childHeight=getMaxAllowedChildHeight(child);    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;    if (i == algorithmState.lastTopStackIndex + 1) {      currentYPosition=Math.min(scrollOffset,bottomStackStart);    }    childViewState.yTranslation=currentYPosition;    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;    if (i <= algorithmState.lastTopStackIndex) {      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);      clampPositionToTopStackEnd(childViewState,childHeight);      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);        childViewState.height=newSize;        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);      }      clampPositionToBottomStackStart(childViewState,childViewState.height);    } else     if (nextYPosition >= bottomStackStart) {      if (currentYPosition >= bottomStackStart) {        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight);      } else {        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);      }    } else {      childViewState.location=StackScrollState.ViewState.LOCATION_MAIN_AREA;      clampYTranslation(childViewState,childHeight);    }    if (i == 0) {      childViewState.alpha=1.0f;      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);      }      childViewState.location=StackScrollState.ViewState.LOCATION_FIRST_CARD;    }    if (childViewState.location == StackScrollState.ViewState.LOCATION_UNKNOWN) {      Log.wtf(LOG_TAG,"Failed to assign location for child " + i);    }    ViewGroup parent=(ViewGroup)child.getParent();    int index=parent.indexOfChild(child);    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;    if (i > 0) {      algorithmState.visibleChildren.get(i - 1).setShadowAlpha(currentYPosition - preYPosition,childHeight);    }    yPositionInScrollView=yPositionInScrollViewAfterElement;    childViewState.yTranslation+=mTopPadding;  }}  }
class C{  private void animateViewAlpha(LauncherViewPropertyAnimator animator,View v,float alpha,int duration){  if (v == null) {    return;  }  animator.cancel();  if (Float.compare(v.getAlpha(),alpha) != 0) {    if (duration > 0) {      animator.alpha(alpha).withLayer().setDuration(duration).start();    } else {      v.setAlpha(alpha);      AlphaUpdateListener.updateVisibility(v,mAccessibilityEnabled);    }  }}  }
class C{  public AttributeSet copyAttributes(){  NamedStyle a=new NamedStyle();  a.attributes=attributes.copyAttributes();  return a;}  }
class C{  private void restore(){  File newLogFile=getLogFile(false);  File rotatedLogFile=getLogFile(true);  if (rotatedLogFile.exists() && !newLogFile.exists() && !rotatedLogFile.equals(newLogFile)) {    try {      if (!rotatedLogFile.renameTo(newLogFile)) {        log.error(sm.getString("accessLogValve.renameFail",rotatedLogFile,newLogFile));      }    } catch (    Throwable e) {      ExceptionUtils.handleThrowable(e);      log.error(sm.getString("accessLogValve.renameFail",rotatedLogFile,newLogFile),e);    }  }}  }
class C{  protected UMSException(){  super();  xcptMessage=null;}  }
class C{  @Override public Object decorate(final Object delegate,final JsonValue ignored,final Context context) throws HeapException {  Object decorated=parent != null ? parent.decorate(delegate,ignored,context) : delegate;  for (  JsonValue decoration : decorators) {    String decoratorName=decoration.getPointer().leaf();    Decorator decorator=context.getHeap().get(decoratorName,Decorator.class);    if ((decorator != null) && decorator.accepts(delegate.getClass())) {      decorated=decorator.decorate(decorated,decoration,context);    }  }  return decorated;}  }
class C{  public static BuildVersion binaryVersion(){  return BINARY_VERSION;}  }
class C{  protected void readPdf() throws IOException {  String version=tokens.checkPdfHeader();  try {    this.headerPdfVersion=PdfVersion.fromString(version);  } catch (  IllegalArgumentException exc) {    throw new PdfException(PdfException.PdfVersionNotValid,version);  }  try {    readXref();  } catch (  RuntimeException ex) {    Logger logger=LoggerFactory.getLogger(PdfReader.class);    logger.error(LogMessageConstant.XREF_ERROR,ex);    rebuildXref();  }  readDecryptObj();}  }
class C{  protected boolean readChunk(RandomAccessFile raf,long bytesRemaining) throws IOException {  Chunk chunk=null;  ChunkHeader chunkh=new ChunkHeader();  if (!chunkh.readHeader(raf)) {    return false;  }  int chunkSize=(int)chunkh.getSize();  bytesRemaining-=chunkSize + 8;  String id=chunkh.getID();  if ("FVER".equals(id)) {    chunk=new FormatVersionChunk(chunkh,raf,aiffHeader);  } else   if ("APPL".equals(id)) {    chunk=new ApplicationChunk(chunkh,raf,aiffHeader);  } else   if ("COMM".equals(id)) {    chunk=new CommonChunk(chunkh,raf,aiffHeader);  } else   if ("COMT".equals(id)) {    chunk=new CommentsChunk(chunkh,raf,aiffHeader);  } else   if ("NAME".equals(id)) {    chunk=new NameChunk(chunkh,raf,aiffHeader);  } else   if ("AUTH".equals(id)) {    chunk=new AuthorChunk(chunkh,raf,aiffHeader);  } else   if ("(c) ".equals(id)) {    chunk=new CopyrightChunk(chunkh,raf,aiffHeader);  } else   if ("ANNO".equals(id)) {    chunk=new AnnotationChunk(chunkh,raf,aiffHeader);  } else   if ("ID3 ".equals(id)) {    chunk=new ID3Chunk(chunkh,raf,aiffTag);  }  if (chunk != null) {    if (!chunk.readChunk()) {      return false;    }  } else {    raf.skipBytes(chunkSize);  }  if ((chunkSize & 1) != 0) {    raf.skipBytes(1);    --bytesRemaining;  }  return true;}  }
class C{  public static IOFileFilter magicNumberFileFilter(String magicNumber,long offset){  return new MagicNumberFileFilter(magicNumber,offset);}  }
class C{  private boolean isClosureCall(Object receiver,String method){  return receiver instanceof Closure && CLOSURE_CALL_METHOD.equals(method);}  }
class C{  public boolean addVerification(String signatureName,Collection<byte[]> ocsps,Collection<byte[]> crls,Collection<byte[]> certs) throws IOException, GeneralSecurityException {  if (used)   throw new IllegalStateException(PdfException.VerificationAlreadyOutput);  ValidationData vd=new ValidationData();  if (ocsps != null) {    for (    byte[] ocsp : ocsps) {      vd.ocsps.add(buildOCSPResponse(ocsp));    }  }  if (crls != null) {    for (    byte[] crl : crls) {      vd.crls.add(crl);    }  }  if (certs != null) {    for (    byte[] cert : certs) {      vd.certs.add(cert);    }  }  validated.put(getSignatureHashKey(signatureName),vd);  return true;}  }
class C{  public boolean isOperational(File file){  this.addFile(file);  this.initSnmpClasses();  return this.isOperational;}  }
class C{  public float convertToKb(long valInBytes){  return (float)valInBytes / BYTEFACTOR;}  }
class C{  public int autoroute_pass(int p_pass_no){  try {    return autoroute_pass_try(p_pass_no);  } catch (  Exception exc) {    hdlg.userPrintln(classname + "autoroute_pass",exc);    air_line=null;    return 0;  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("MemoryUserDatabase[id=");  sb.append(this.id);  sb.append(",pathname=");  sb.append(pathname);  sb.append(",groupCount=");  sb.append(this.groups.size());  sb.append(",roleCount=");  sb.append(this.roles.size());  sb.append(",userCount=");  sb.append(this.users.size());  sb.append("]");  return (sb.toString());}  }
class C{  public void test_addPathToNameLintLbyte_array() throws IOException {  int[] types={GeneralName.OTHER_NAME,GeneralName.RFC822_NAME,GeneralName.DNS_NAME,GeneralName.X400_ADDR,GeneralName.DIR_NAME,GeneralName.EDIP_NAME,GeneralName.UR_ID,GeneralName.IP_ADDR,GeneralName.REG_ID};  for (int i=0; i < types.length; i++) {    try {      new X509CertSelector().addPathToName(types[i],(byte[])null);      fail("No expected NullPointerException for type: " + types[i]);    } catch (    NullPointerException expected) {    }  }}  }
class C{  public static Headers of(String... namesAndValues){  if (namesAndValues == null || namesAndValues.length % 2 != 0) {    throw new IllegalArgumentException("Expected alternating header names and values");  }  namesAndValues=namesAndValues.clone();  for (int i=0; i < namesAndValues.length; i++) {    if (namesAndValues[i] == null)     throw new IllegalArgumentException("Headers cannot be null");    namesAndValues[i]=namesAndValues[i].trim();  }  for (int i=0; i < namesAndValues.length; i+=2) {    String name=namesAndValues[i];    String value=namesAndValues[i + 1];    if (name.length() == 0 || name.indexOf('\0') != -1 || value.indexOf('\0') != -1) {      throw new IllegalArgumentException("Unexpected header: " + name + ": "+ value);    }  }  return new Headers(namesAndValues);}  }
class C{  boolean validateAttributes(Map<String,Set<String>> attributeSet,boolean encodePassword,String orgName) throws SMSException {  return (validateAttributes(null,attributeSet,encodePassword,orgName));}  }
class C{  public static Date parseDate(final String dateValue,String[] dateFormats) throws DateParseException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  public void createConfiguration(String realm,String configName,Map avPairs) throws ConfigurationException {  if (debug.messageEnabled()) {    debug.message("ConfigurationInstanceImpl.createConfiguration: " + "componentName = " + componentName + ", realm = "+ realm+ ", configName = "+ configName+ ", avPairs = "+ avPairs);  }  try {    if (hasOrgSchema) {      ServiceConfig sc=null;      sc=scm.getOrganizationConfig(realm,null);      if ((configName == null) || (configName.length() == 0)) {        scm.createOrganizationConfig(realm,avPairs);      } else {        if (subConfigId == null) {          if (debug.messageEnabled()) {            debug.message("ConfigurationInstanceImpl." + "createConfiguration: sub configuraton not " + "supported.");          }          String[] data={componentName};          throw new ConfigurationException(RESOURCE_BUNDLE,"noSubConfig",data);        }        if (sc == null) {          sc=scm.createOrganizationConfig(realm,null);        } else         if (sc.getSubConfigNames().contains(configName)) {          String[] data={componentName,realm,configName};          throw new ConfigurationException(RESOURCE_BUNDLE,"configExist",data);        }        sc.addSubConfig(configName,subConfigId,SUBCONFIG_PRIORITY,avPairs);      }    } else {      if (debug.messageEnabled()) {        debug.message("ConfigurationInstanceImpl." + "createConfiguration: configuraton creation not " + "supported.");      }      String[] data={componentName};      throw new ConfigurationException(RESOURCE_BUNDLE,"noConfigCreation",data);    }  } catch (  SMSException smsex) {    debug.error("ConfigurationInstanceImpl.createConfiguration:",smsex);    String[] data={componentName,realm};    throw new ConfigurationException(RESOURCE_BUNDLE,"failedCreateConfig",data);  }catch (  SSOException ssoex) {    debug.error("ConfigurationInstanceImpl.createConfiguration:",ssoex);    String[] data={componentName,realm};    throw new ConfigurationException(RESOURCE_BUNDLE,"failedCreateConfig",data);  }}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  protected void text(Element elem) throws IOException, BadLocationException {  String contentStr=getText(elem);  if ((contentStr.length() > 0) && (contentStr.charAt(contentStr.length() - 1) == NEWLINE)) {    contentStr=contentStr.substring(0,contentStr.length() - 1);  }  if (contentStr.length() > 0) {    write(contentStr);  }}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  protected void cleanRealEntries() throws Exception {  logger.error(LocalizableMessage.raw("ReplicationTestCase/Cleaning entries"));  for (  DN dn : entriesToCleanup) {    deleteEntry(dn);  }  entriesToCleanup.clear();}  }
class C{  public double generate(double xin,double yin){  final double s=(xin + yin) * F2;  final int i=fastfloor(xin + s), j=fastfloor(yin + s);  final double t=(i + j) * G2;  final double x0=xin - i + t;  final double y0=yin - j + t;  final int i1, j1;  if (x0 > y0) {    i1=1;    j1=0;  } else {    i1=0;    j1=1;  }  final double x1=x0 - i1 + G2;  final double y1=y0 - j1 + G2;  final double x2=x0 - 1.0 + 2.0 * G2;  final double y2=y0 - 1.0 + 2.0 * G2;  final int ii=i & 255;  final int jj=j & 255;  double n=0.0;  double contrib=0.5 - x0 * x0 - y0 * y0;  if (contrib >= 0) {    int gi0=permMod12[ii + perm[jj]];    contrib*=contrib;    n+=contrib * contrib * dot(GRAD_3[gi0],x0,y0);  }  contrib=0.5 - x1 * x1 - y1 * y1;  if (contrib >= 0) {    int gi1=permMod12[ii + i1 + perm[jj + j1]];    contrib*=contrib;    n+=contrib * contrib * dot(GRAD_3[gi1],x1,y1);  }  contrib=0.5 - x2 * x2 - y2 * y2;  if (contrib >= 0) {    int gi2=permMod12[ii + 1 + perm[jj + 1]];    contrib*=contrib;    n+=contrib * contrib * dot(GRAD_3[gi2],x2,y2);  }  return 70.0 * n;}  }
class C{  public boolean topCollide(){  for (  StageBlock block : SpriteHandler.getStageElements()) {    Shape intersection=SVGPath.intersect(super.getSpriteBoundsArray()[0],block.getSpriteBounds());    if (intersection.getBoundsInParent().getWidth() != -1)     return true;  }  return false;}  }
class C{  private void initializeExtendedOperations() throws ConfigException, InitializationException {  extendedOperationConfigManager=new ExtendedOperationConfigManager(serverContext);  extendedOperationConfigManager.initializeExtendedOperationHandlers();}  }
class C{  public DefaultTreeModel(TreeNode root,boolean asksAllowsChildren){  super();  this.root=root;  this.asksAllowsChildren=asksAllowsChildren;}  }
class C{  public void paintMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private String attributeValue(Node.JspAttribute attr,boolean encode,Class<?> expectedType){  String v=attr.getValue();  if (!attr.isNamedAttribute() && (v == null))   return "";  if (attr.isExpression()) {    if (encode) {      return "org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(" + v + "), request.getCharacterEncoding())";    }    return v;  } else   if (attr.isELInterpreterInput()) {    v=elInterpreter.interpreterCall(ctxt,this.isTagFile,v,expectedType,attr.getEL().getMapName());    if (encode) {      return "org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(" + v + ", request.getCharacterEncoding())";    }    return v;  } else   if (attr.isNamedAttribute()) {    return attr.getNamedAttributeNode().getTemporaryVariableName();  } else {    if (encode) {      return "org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(" + quote(v) + ", request.getCharacterEncoding())";    }    return quote(v);  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(SAMLConstants.DEFAULT_ENCODING).append("\" ?>");  }  String prefixAC="";  String prefixLIB="";  String uriAC="";  String uriLIB="";  if (includeNS) {    prefixLIB=IFSConstants.LIB_PREFIX;    prefixAC=IFSConstants.AC_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;      uriAC=IFSConstants.AC_12_NAMESPACE_STRING;    } else {      uriLIB=IFSConstants.LIB_NAMESPACE_STRING;      uriAC=IFSConstants.AC_NAMESPACE_STRING;    }  }  xml.append("<").append(prefixLIB).append("AuthnContext").append(uriLIB).append(">");  if (authnContextClassRef != null && !authnContextClassRef.equals("")) {    xml.append("<").append(prefixLIB).append("AuthnContextClassRef").append(">");    xml.append(authnContextClassRef);    xml.append("</").append(prefixLIB).append("AuthnContextClassRef").append(">");  } else {    xml.append("<").append(prefixLIB).append("AuthnContextClassRef").append(">");    xml.append(IFSConstants.DEFAULT_AUTHNCONTEXT_PASSWORD);    xml.append("</").append(prefixLIB).append("AuthnContextClassRef").append(">");  }  if (authnContextStatementRef != null && !authnContextStatementRef.equals("")) {    xml.append("<").append(prefixLIB).append("AuthnContextStatementRef").append(">");    xml.append(authnContextStatementRef);    xml.append("</").append(prefixLIB).append("AuthnContextStatementRef").append(">");  } else {    xml.append("<").append(prefixLIB).append("AuthnContextStatementRef").append(">");    xml.append(IFSConstants.DEFAULT_AUTHNCONTEXT_PASSWORD);    xml.append("</").append(prefixLIB).append("AuthnContextStatementRef").append(">");  }  xml.append("</").append(prefixLIB).append("AuthnContext").append(">");  return xml.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns04.class,args);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static String formatDate(Date d){  if (d == null) {    return "";  }  return new SimpleDateFormat(DATE_FORMAT).format(d);}  }
class C{  @Override public void unbind(Name name) throws NamingException {  if (!checkWritable()) {    return;  }  while ((!name.isEmpty()) && (name.get(0).length() == 0))   name=name.getSuffix(1);  if (name.isEmpty())   throw new NamingException(sm.getString("namingContext.invalidName"));  NamingEntry entry=bindings.get(name.get(0));  if (entry == null) {    throw new NameNotFoundException(sm.getString("namingContext.nameNotBound",name,name.get(0)));  }  if (name.size() > 1) {    if (entry.type == NamingEntry.CONTEXT) {      ((Context)entry.value).unbind(name.getSuffix(1));    } else {      throw new NamingException(sm.getString("namingContext.contextExpected"));    }  } else {    bindings.remove(name.get(0));  }}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  return encode(pString,getDefaultCharset());}  }
class C{  public OpenSSOGroupSubject(String group,String pSubjectName){  super(group,pSubjectName);}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  if (s == null)   s=System.err;  try {    super.printStackTrace(s);  } catch (  Exception e) {  }  Throwable exception=m_exception;  for (int i=0; (i < 10) && (null != exception); i++) {    s.println("---------");    exception.printStackTrace(s);    if (exception instanceof TransformerException) {      TransformerException se=(TransformerException)exception;      Throwable prev=exception;      exception=se.getException();      if (prev == exception)       break;    } else {      exception=null;    }  }}  }
class C{  public ValidationMessage[] validate(String prefix,String uri,PageData page){  return null;}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder(200);  xml.append("<Session sid=").append(QUOTE).append(sid).append(QUOTE).append(" stype=").append(QUOTE).append(stype).append(QUOTE).append(" cid=").append(QUOTE).append(XMLUtils.escapeSpecialCharacters(cid)).append(QUOTE).append(" cdomain=").append(QUOTE).append(XMLUtils.escapeSpecialCharacters(cdomain)).append(QUOTE).append(" maxtime=").append(QUOTE).append(maxtime).append(QUOTE).append(" maxidle=").append(QUOTE).append(maxidle).append(QUOTE).append(" maxcaching=").append(QUOTE).append(maxcaching).append(QUOTE).append(" timeidle=").append(QUOTE).append(getTimeIdle()).append(QUOTE).append(" timeleft=").append(QUOTE).append(getTimeLeft()).append(QUOTE).append(" state=").append(QUOTE).append(state).append(QUOTE).append(">").append(NL);  if (properties != null) {    Enumeration enumerator=properties.keys();    while (enumerator.hasMoreElements()) {      String name=(String)enumerator.nextElement();      String value=(String)properties.get(name);      xml.append("<Property name=").append(QUOTE).append(XMLUtils.escapeSpecialCharacters(name)).append(QUOTE).append(" value=").append(QUOTE).append(XMLUtils.escapeSpecialCharacters(value)).append(QUOTE).append(">").append("</Property>").append(NL);    }  }  xml.append("</Session>");  return xml.toString();}  }
class C{  BigInteger retrieve(BigInteger initValue,int certainty,java.util.Random random){  int offset=1;  for (int i=0; i < bits.length; i++) {    long nextLong=~bits[i];    for (int j=0; j < 64; j++) {      if ((nextLong & 1) == 1) {        BigInteger candidate=initValue.add(BigInteger.valueOf(offset));        if (candidate.primeToCertainty(certainty,random))         return candidate;      }      nextLong>>>=1;      offset+=2;    }  }  return null;}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void addObjectClass(ObjectClass oc) throws DirectoryException {  attachment=null;  if (objectClasses.containsKey(oc)) {    LocalizableMessage message=ERR_ENTRY_ADD_DUPLICATE_OC.get(oc.getNameOrOID(),dn);    throw new DirectoryException(OBJECTCLASS_VIOLATION,message);  }  objectClasses.put(oc,oc.getNameOrOID());}  }
class C{  public static final byte[] longToUint32Bytes(long l){  byte[] result=new byte[4];  result[0]=(byte)(l >>> 24);  result[1]=(byte)(l >>> 16);  result[2]=(byte)(l >>> 8);  result[3]=(byte)(l);  return result;}  }
class C{  private PolicyResponseProvider createPolicyResponseProvider(int i){  PolicyResponseProvider result=new PolicyResponseProvider();  result.setPResponseProviderName("responseProvider" + i);  result.setPropertyName("propertyName" + i);  Set<String> values=new HashSet<String>();  for (int j=0; j < 5 * i; j++) {    values.add("value" + j);  }  result.setPropertyValues(values);  return result;}  }
class C{  private void validateRelationDefinition(ManagedObjectPath<?,?> path,RelationDefinition<?,?> rd){  AbstractManagedObjectDefinition<?,?> d=path.getManagedObjectDefinition();  RelationDefinition<?,?> tmp=d.getRelationDefinition(rd.getName());  if (tmp != rd) {    throw new IllegalArgumentException("The relation " + rd.getName() + " is not associated with a "+ d.getName());  }}  }
class C{  public static String printDecimal(java.math.BigDecimal val){  if (theConverter == null)   initConverter();  return theConverter.printDecimal(val);}  }
class C{  PasswordModifyExtendedRequestImpl(){}  }
class C{  public static Document toDOMDocument(InputStream is,Debug debug){  DocumentBuilder documentBuilder=null;  try {    documentBuilder=getSafeDocumentBuilder(validating);  } catch (  ParserConfigurationException pe) {    if (debug != null) {      debug.error("XMLUtils.DocumentBuilder init failed",pe);    }  }  try {    if (documentBuilder == null) {      if (debug != null) {        debug.error("XMLUtils.toDOM : null builder instance");      }      return null;    }    if (debug != null && debug.warningEnabled()) {      documentBuilder.setErrorHandler(new ValidationErrorHandler(debug));    }    return documentBuilder.parse(is);  } catch (  Exception e) {    if (debug != null && debug.warningEnabled()) {      debug.warning("Can't parse the XML document",e);    }    return null;  }}  }
class C{  public synchronized <T>Observable<T> observeEvent(RXQueueKey key){  if (key == null)   throw new RuntimeException("You can't use a null key");  SerializedSubject subject=getSubject(key,true);  return subject;}  }
class C{  public int next(){  if (_currentNode == _startNodeID || _currentNode == DTM.NULL) {    return NULL;  } else {    final int node=_currentNode;    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  private void initializeBackGroundProcessing(){  if (backgroundThread == null) {    DirectoryServer.registerShutdownListener(this);    stopRequested=false;    backgroundThread=new BackGroundThread();    backgroundThread.start();  }}  }
class C{  public void cancelEditing(JTree a){  for (int i=0; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).cancelEditing(a);  }}  }
class C{  public void test_ConstructorLjava_io_FileLjava_lang_String() throws Exception {  RandomAccessFile raf=null;  File tmpFile=new File(fileName);  try {    raf=new java.io.RandomAccessFile(tmpFile,"r");    fail("Test 1: FileNotFoundException expected.");  } catch (  FileNotFoundException e) {  }catch (  IllegalArgumentException e) {    fail("Test 2: Unexpected IllegalArgumentException: " + e.getMessage());  }  tmpFile.createNewFile();  try {    try {      raf=new java.io.RandomAccessFile(tmpFile,"rwd");    } catch (    IllegalArgumentException e) {      fail("Test 3: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(tmpFile,"rws");    } catch (    IllegalArgumentException e) {      fail("Test 4: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(tmpFile,"rw");    } catch (    IllegalArgumentException e) {      fail("Test 5: Unexpected IllegalArgumentException: " + e.getMessage());    }    raf.close();    try {      raf=new java.io.RandomAccessFile(tmpFile,"i");      fail("Test 6: IllegalArgumentException expected.");    } catch (    IllegalArgumentException e) {    }  }  finally {    if (raf != null)     raf.close();    tmpFile.delete();  }}  }
class C{  public static boolean shutdownCalled(){  return shutdownCalled;}  }
class C{  @Override public Enumeration<URL> findResources(final String name) throws IOException {  if (name == null) {    return null;  }  ArrayList<URL> result=new ArrayList<URL>();  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    handler.findResources(name,result);  }  return Collections.enumeration(result);}  }
class C{  protected void handleUnexpectedTextException(String text,RuntimeException e) throws SAXException {  reportError(Messages.format(Messages.UNEXPECTED_TEXT,text),e,true);}  }
class C{  @Query(operationDescription=@Operation(description=SESSION_RESOURCE + QUERY_DESCRIPTION,errors={@ApiError(code=400,description=SESSION_RESOURCE + QUERY + ERROR_400_DESCRIPTION),@ApiError(code=500,description=SESSION_RESOURCE + QUERY + ERROR_500_DESCRIPTION)}),queryableFields={JSON_SESSION_USERNAME,JSON_SESSION_REALM},type=QueryType.FILTER) @Override public Promise<QueryResponse,ResourceException> queryCollection(Context context,QueryRequest request,QueryResourceHandler handler){  CrestQuery crestQuery=new CrestQuery(request.getQueryId(),request.getQueryFilter(),request.getFields());  SSOTokenContext ssoTokenContext=context.asContext(SSOTokenContext.class);  try {    final Collection<PartialSession> matchingSessions=sessionService.getMatchingSessions(ssoTokenContext.getCallerSession(),crestQuery);    for (    PartialSession matchingSession : matchingSessions) {      handler.handleResource(newResourceResponse(null,String.valueOf(matchingSession.hashCode()),matchingSession.asJson()));    }  } catch (  IllegalArgumentException iae) {    return new BadRequestException(iae.getMessage()).asPromise();  }catch (  SessionException se) {    LOGGER.error("An error occurred whilst looking for matching sessions with filter '{}'",crestQuery,se);    return new InternalServerErrorException("Unable to query for matching sessions").asPromise();  }  return newResultPromise(newQueryResponse());}  }
class C{  public boolean isFixedOffset(){  return savingsInstantTransitions.length == 0;}  }
class C{  public boolean isTerminalDataDependency(){  EventKind kind=getTrace().getKind(getEventID());  return kind.isDefinition || kind.isArgument || kind.isInvocation|| kind == EventKind.RETURN || kind.isInstantiation;}  }
class C{  public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey) throws javax.xml.transform.TransformerException {  try {    if (funcName == null) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"Function Name"});      throw new NullPointerException(fmsg);    }    javax.xml.namespace.QName myQName=new QName(ns,funcName);    if (extensionInvocationDisabled) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{myQName.toString()});      throw new XPathFunctionException(fmsg);    }    int arity=argVec.size();    javax.xml.xpath.XPathFunction xpathFunction=resolver.resolveFunction(myQName,arity);    ArrayList argList=new ArrayList(arity);    for (int i=0; i < arity; i++) {      Object argument=argVec.elementAt(i);      if (argument instanceof XNodeSet) {        argList.add(i,((XNodeSet)argument).nodelist());      } else       if (argument instanceof XObject) {        Object passedArgument=((XObject)argument).object();        argList.add(i,passedArgument);      } else {        argList.add(i,argument);      }    }    return (xpathFunction.evaluate(argList));  } catch (  XPathFunctionException xfe) {    throw new org.apache.xml.utils.WrappedRuntimeException(xfe);  }catch (  Exception e) {    throw new javax.xml.transform.TransformerException(e);  }}  }
class C{  public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  public FrameBodyWOAR(){}  }
class C{  public static boolean isLollipop(){  return getSdkVersion() >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public Optional<Investment> invest(final int loanId,final int loanAmount){  return Investor.invest(this.zonkyApi,loanId,loanAmount,this.initialBalance.intValue());}  }
class C{  public XmlStreamWriter(File file) throws FileNotFoundException {  this(file,null);}  }
class C{  public final void testEqualsObject01(){  ECPoint p2=null, p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  assertTrue(p1.equals(p1));  p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.valueOf(1L));  assertTrue(p1.equals(p2) && p2.equals(p1));  p1=ECPoint.POINT_INFINITY;  p2=ECPoint.POINT_INFINITY;  assertTrue(p1.equals(p2) && p2.equals(p1));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexgetlength.class,args);}  }
class C{  private synchronized void stopChangeTimeHeartBeatPublishing(){  if (ctHeartbeatPublisherThread != null) {    ctHeartbeatPublisherThread.shutdown();    ctHeartbeatPublisherThread=null;  }}  }
class C{  synchronized void removeResourceBundle(AbstractManagedObjectDefinition<?,?> d){  removeResourceBundle(d,Locale.getDefault());}  }
class C{  public PollingWaitAssistant(final long timeoutInMilliSeconds){  this(timeoutInMilliSeconds,5000L,4000L,8000L);}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  canvas.drawRect(0,center - offset,getWidth(),center + offset,mPaintRectCenter);  canvas.drawLine(0,center - offset,getWidth(),center - offset,mPaintLineCenter);  canvas.drawLine(0,center + offset,getWidth(),center + offset,mPaintLineCenter);  int x=getWidth() - 1;  canvas.drawLine(x,mLineRightMar,x,getHeight() - mLineRightMar,mPaintLineRight);}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQueryCount(dynamicQuery);}  }
class C{  private void updateButtonForOcean(JButton button){  if (MetalLookAndFeel.usingOcean()) {    button.setFocusPainted(comboBox.isEditable());  }}  }
class C{  public void addSessionForGivenUUID(String sid,Long expTime){  allSessionsforGivenUUID.put(sid,expTime);}  }
class C{  @Override public boolean is_IntOctagon(){  for (int index=0; index < lines_size(); ++index) {    PlaLineInt curr_line=tline_get(index);    if (!curr_line.is_multiple_of_45_degree())     return false;    if (!corner_is_bounded(index))     return false;  }  return true;}  }
class C{  public Map<String,Map<String,Set<String>>> search(String userIDAttributeName,int limit,String idPattern,Set<String> attributesToFetch,String filterOperand,Map<String,Set<String>> avPairs){  if (debug.messageEnabled()) {    debug.message("JdbcSimpleUserDao.search called with: " + " userIDAttributeName=" + userIDAttributeName + " limit="+ limit+ " idPattern="+ idPattern+ " attributesToFetch="+ attributesToFetch+ " filterOperand="+ filterOperand+ " avPairs="+ avPairs);  }  if (limit <= 0) {    limit=1;  }  if (idPattern != null) {    idPattern=idPattern.trim();  }  if (filterOperand != null) {    filterOperand=filterOperand.trim();  }  if (userIDAttributeName == null || userIDAttributeName.length() == 0) {    if (debug.messageEnabled()) {      debug.message("JdbcSimpleUserDao.search: will not execute any" + " SQL queries since userIDAttributeName is null or empty." + " search method should always be called with the "+ " userIDAttributeName specified so that it always fetches"+ " that attribute as part of return value."+ " userIDAttributeName="+ userIDAttributeName);    }    return Collections.EMPTY_MAP;  }  userIDAttributeName=userIDAttributeName.trim();  String selectQueryString="SELECT" + SPACE;  Map<Integer,String> rsPositionMap=new HashMap<Integer,String>();  if (attributesToFetch == null || attributesToFetch.isEmpty()) {    if (debug.messageEnabled()) {      debug.message("JdbcSimpleUserDao.search: will not execute any" + " SQL queries since attributesToFetch is null or empty." + " search method should always be called with the set of "+ " attributes to fetch specified."+ " attributesToFetch="+ attributesToFetch);    }    return Collections.EMPTY_MAP;  }  if (!attributesToFetch.contains(userIDAttributeName)) {    attributesToFetch.add(userIDAttributeName);  }  Iterator<String> attrs=attributesToFetch.iterator();  for (int position=1; attrs.hasNext(); position++) {    String attr=attrs.next();    rsPositionMap.put(position,attr);    selectQueryString=selectQueryString + attr;    if (attrs.hasNext()) {      selectQueryString=selectQueryString + COMMA;    }  }  selectQueryString=selectQueryString + SPACE + "FROM"+ SPACE+ userTableName+ SPACE;  String LIMIT_CLAUSE=" LIMIT " + limit;  String queryToRun=selectQueryString;  Map<Integer,String> avPairsBindingPositionMap=new HashMap<Integer,String>();  int avPairsBindPosMapCount=0;  String QUERY_NO_PATTERN_TYPE="no_pattern";  String QUERY_LIKE_TYPE="like";  String QUERY_LITERAL_TYPE="literal";  String queryType=null;  final String WHERE_ID_EQUALS_PATTERN_QUERY_STR=SPACE + "WHERE" + SPACE+ userIDAttributeName+ SPACE+ "="+ SPACE+ "?";  if (idPattern == null || idPattern.length() == 0) {    queryType=QUERY_NO_PATTERN_TYPE;  } else   if (idPattern.contains("%")) {    queryType=QUERY_LIKE_TYPE;  } else {    queryType=QUERY_LITERAL_TYPE;    queryToRun+=WHERE_ID_EQUALS_PATTERN_QUERY_STR;  }  if (filterOperand != null && (filterOperand.equals("AND") || filterOperand.equals("OR")) && avPairs != null && !avPairs.isEmpty()) {    StringBuilder sb=new StringBuilder();    for (Iterator<Map.Entry<String,Set<String>>> avPairsIt=avPairs.entrySet().iterator(); avPairsIt.hasNext(); ) {      Map.Entry<String,Set<String>> me=avPairsIt.next();      String attrName=me.getKey();      if (attrName != null || attrName.length() != 0) {        Set<String> values=me.getValue();        for (Iterator<String> valuesIt=values.iterator(); valuesIt.hasNext(); ) {          String v=valuesIt.next();          if (v != null) {            if (sb.length() == 0) {              sb.append(SPACE + "(");            } else {              sb.append(SPACE).append(filterOperand).append(SPACE);            }            avPairsBindPosMapCount++;            avPairsBindingPositionMap.put(avPairsBindPosMapCount,v);            if (queryType.equals(QUERY_LIKE_TYPE)) {              sb.append(SPACE).append(attrName).append(" LIKE ? ");            } else {              sb.append(SPACE).append(attrName).append("= ? ");            }          }        }      }    }    if (sb.length() != 0)     sb.append(")");    String s=sb.toString();    if (s != null && s.length() != 0) {      if (queryType.equals(QUERY_NO_PATTERN_TYPE)) {        queryToRun+=" WHERE " + s;      } else       if (queryType.equals(QUERY_LIKE_TYPE)) {        queryToRun+=" WHERE " + s;      } else       if (queryType.equals(QUERY_LITERAL_TYPE)) {        queryToRun+=" AND " + s;      }    }  }  if (debug.messageEnabled()) {    debug.message("JdbcSimpleUserDao.search: the query string =\n" + queryToRun);  }  Connection con=null;  PreparedStatement stmt=null;  ResultSet result=null;  Map<String,Map<String,Set<String>>> allUsers=new HashMap<String,Map<String,Set<String>>>();  try {    con=getConnection();    stmt=con.prepareStatement(queryToRun);    int startingIndexPosition=0;    if (queryType.equals(QUERY_LITERAL_TYPE)) {      startingIndexPosition++;      stmt.setString(startingIndexPosition,idPattern);    }    for (int i=1; i <= avPairsBindingPositionMap.size(); i++) {      String value=avPairsBindingPositionMap.get(i);      stmt.setString(i + startingIndexPosition,value);    }    result=stmt.executeQuery();    while (result.next()) {      Map<String,Set<String>> user=new HashMap<String,Set<String>>();      String userID=null;      Set<String> values=null;      String v=null;      for (int i=0; i < rsPositionMap.size(); i++) {        String attrName=rsPositionMap.get(i + 1);        if (attrName != null && (attrName.length() != 0)) {          values=new HashSet();          v=result.getString(i + 1);          if (v != null) {            values.add(v);            if (attrName.equals(userIDAttributeName))             userID=v;          }          user.put(attrName,values);        }      }      if (debug.messageEnabled()) {        debug.message("JdbcSimpleUserDao.search: user details" + " fetched from DB for user=" + userID + "::\n"+ user);      }      allUsers.put(userID,user);    }  } catch (  Exception ex1) {    if (debug.messageEnabled()) {      debug.message("JdbcSimpleUserDao.search:" + ex1);    }    throw new RuntimeException(ex1);  } finally {    closeStatement(stmt);    closeConnection(con);  }  if (allUsers == null) {    return Collections.EMPTY_MAP;  }  if (allUsers.isEmpty()) {    return Collections.EMPTY_MAP;  }  return allUsers;}  }
class C{  public static void callMethod(final Object obj,final String methodName,final boolean includePrivateMehtods,final Object... args) throws InvocationTargetException {  final Class[] intArgsClass=initParamsClasses(args);  try {    Class<?> current=obj.getClass();    Method method=null;    while (current != Object.class) {      try {        method=current.getDeclaredMethod(methodName,intArgsClass);        break;      } catch (      final NoSuchMethodException ex) {        current=current.getSuperclass();      }    }    if (method == null) {      throw new NoSuchMethodException("Mehtod is not found in " + current);    }    method.setAccessible(true);    method.invoke(obj,args);  } catch (  final InvocationTargetException e) {    throw new InvocationTargetException(e.getCause());  }catch (  final Exception e) {    throw new InvocationTargetException(e);  }}  }
class C{  void createButtons(){  if (scrollForwardButton != null) {    tabPane.remove(scrollForwardButton);    scrollForwardButton.removeActionListener(this);    tabPane.remove(scrollBackwardButton);    scrollBackwardButton.removeActionListener(this);  }  int tabPlacement=tabPane.getTabPlacement();  if (tabPlacement == TOP || tabPlacement == BOTTOM) {    scrollForwardButton=createScrollButton(EAST);    scrollBackwardButton=createScrollButton(WEST);  } else {    scrollForwardButton=createScrollButton(SOUTH);    scrollBackwardButton=createScrollButton(NORTH);  }  scrollForwardButton.addActionListener(this);  scrollBackwardButton.addActionListener(this);  tabPane.add(scrollForwardButton);  tabPane.add(scrollBackwardButton);}  }
class C{  public AuditableHttpServletResponse(HttpServletResponse response){  super(response);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  logger.info("Dialog State = " + requestEvent.getDialog().getState());  this.ackSeen=true;}  }
class C{  public EasyConfigMod(final Context context){  this.context=context;}  }
class C{  @Override public int doEndTag() throws JspException {  throw new UnsupportedOperationException("Illegal to invoke doEndTag() on TagAdapter wrapper");}  }
class C{  public InvalidPasswordException(String rbName,String errorCode,Object[] args,String tokenId,Throwable t){  super(rbName,errorCode,args,t);  this.tokenId=tokenId;}  }
class C{  final void nextStream() throws IOException {  if (in != null) {    in.close();  }  if (e.hasMoreElements()) {    in=(InputStream)e.nextElement();    if (in == null)     throw new NullPointerException();  } else   in=null;}  }
class C{  public MethodHandle findStaticSetter(Class<?> refc,String name,Class<?> type) throws NoSuchFieldException, IllegalAccessException {  MemberName field=resolveOrFail(REF_putStatic,refc,name,type);  return getDirectField(REF_putStatic,refc,field);}  }
class C{  Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      if (!eof) {        exhaustInputStream(this);      }    }  finally {      eof=true;      closed=true;    }  }}  }
class C{  public static String executeJavaCommand(String jarName,String className,String arguments) throws Exception {  StringBuffer output=new StringBuffer();  String javaHome=System.getProperty(JAVA_HOME);  if (javaHome == null)   throw new Exception("JAVA_HOME is not set." + " Make sure Java is available on the m/c to " + "proceed further.");  String javaExe=System.getProperty(JAVA_HOME) + FILE_SEP + "bin"+ FILE_SEP+ "java";  Debug.log("ExecuteCommand.executeJavaCommand(): JAVA_HOME = " + javaExe + " jarFile = "+ jarName);  String[] commandArray={javaExe,CLASSPATH,jarName,className,arguments};  executeCommand(commandArray,null,output);  return (output != null) ? output.toString() : null;}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSLogoutResponse.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSLogoutResponse.signXML: " + "the assertion is already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,IFSConstants.DEF_SIG_ALGO,IFSConstants.RESPONSE_ID,this.getResponseID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public void dragMouseMoved(DragSourceDragEvent dsde){  ((DragSourceMotionListener)a).dragMouseMoved(dsde);  ((DragSourceMotionListener)b).dragMouseMoved(dsde);}  }
class C{  public TrAXFilter(Templates templates) throws TransformerConfigurationException {  m_templates=templates;  m_transformer=(TransformerImpl)templates.newTransformer();}  }
class C{  public String encode(String path,String encoding){  int maxBytesPerChar=10;  StringBuilder rewrittenPath=new StringBuilder(path.length());  ByteArrayOutputStream buf=new ByteArrayOutputStream(maxBytesPerChar);  OutputStreamWriter writer=null;  try {    writer=new OutputStreamWriter(buf,encoding);  } catch (  Exception e) {    e.printStackTrace();    writer=new OutputStreamWriter(buf);  }  for (int i=0; i < path.length(); i++) {    int c=path.charAt(i);    if (safeCharacters.get(c)) {      rewrittenPath.append((char)c);    } else {      try {        writer.write((char)c);        writer.flush();      } catch (      IOException e) {        buf.reset();        continue;      }      byte[] ba=buf.toByteArray();      for (int j=0; j < ba.length; j++) {        byte toEncode=ba[j];        rewrittenPath.append('%');        int low=toEncode & 0x0f;        int high=(toEncode & 0xf0) >> 4;        rewrittenPath.append(hexadecimal[high]);        rewrittenPath.append(hexadecimal[low]);      }      buf.reset();    }  }  return rewrittenPath.toString();}  }
class C{  public FilterExprWalker(WalkingIterator locPathIterator){  super(locPathIterator,Axis.FILTEREDLIST);}  }
class C{  protected void updateXMLDocument(String attrName,String attrValue) throws SMSException, SSOException {  try {    Document schemaDoc=null;    if (ssm != null) {      schemaDoc=ssm.getDocumentCopy();    } else {      schemaDoc=ps.getDocumentCopy();    }    Node schemaNode=null;    if (ss != null) {      schemaNode=ss.getSchemaNode(schemaDoc);    } else {      schemaNode=ps.getPluginSchemaNode(schemaDoc);    }    Node attrSchemaNode=XMLUtils.getNamedChildNode(schemaNode,SMSUtils.SCHEMA_ATTRIBUTE,SMSUtils.NAME,getName());    ((Element)attrSchemaNode).setAttribute(attrName,attrValue);    if (ssm != null) {      ssm.replaceSchema(schemaDoc);    } else {      ps.replacePluginSchema(schemaDoc);    }  } catch (  Exception e) {    throw (new SMSException(e.getMessage(),e,"sms-cannot-update-xml-document"));  }}  }
class C{  public URL(String protocol,String host,String file) throws MalformedURLException {  this(protocol,host,-1,file,null);}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  public AddOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,Entry entry){  super(clientConnection,operationID,messageID,requestControls);  this.entryDN=entry.getName();  this.objectClasses=entry.getObjectClasses();  this.userAttributes=entry.getUserAttributes();  this.operationalAttributes=entry.getOperationalAttributes();  rawEntryDN=ByteString.valueOfUtf8(entryDN.toString());  ArrayList<String> values=new ArrayList<>(objectClasses.values());  rawAttributes=new ArrayList<>();  rawAttributes.add(new LDAPAttribute(ATTR_OBJECTCLASS,values));  addAll(rawAttributes,userAttributes);  addAll(rawAttributes,operationalAttributes);}  }
class C{  public Name join(String identifier){  validateLowerUnderscore(identifier);  List<NamePiece> newPieceList=new ArrayList<>();  newPieceList.addAll(namePieces);  newPieceList.add(new NamePiece(identifier,CaseFormat.LOWER_UNDERSCORE));  return new Name(newPieceList);}  }
class C{  public boolean isSipURI(){  return this instanceof SipUri;}  }
class C{  public static Map<String,Object> params(String key1,Object value1,String key2,Object value2){  return map(key1,value1,key2,value2);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  forwardToCallingViewBean();}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public LifecycleException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public void uninstallKeyboardActions(JComponent c){  SwingUtilities.replaceUIInputMap(c,JComponent.WHEN_IN_FOCUSED_WINDOW,null);  SwingUtilities.replaceUIInputMap(c,JComponent.WHEN_FOCUSED,null);  SwingUtilities.replaceUIActionMap(c,null);}  }
class C{  public static AdvicesHandleableByAMRequest parseXML(Node node) throws PolicyEvaluationException {  return new AdvicesHandleableByAMRequest();}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (m_dtdHandler != null) {    m_dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);  }}  }
class C{  public Builder with(Type type) throws IllegalArgumentException {  Validate.notNull(type,"Cannot have null type");  this.type=type;  return this;}  }
class C{  private void mainLoop(){  while (true) {    try {      TimerTask task;      boolean taskFired;synchronized (queue) {        while (queue.isEmpty() && newTasksMayBeScheduled)         queue.wait();        if (queue.isEmpty())         break;        long currentTime, executionTime;        task=queue.getMin();synchronized (task.lock) {          if (task.state == TimerTask.CANCELLED) {            queue.removeMin();            continue;          }          currentTime=System.currentTimeMillis();          executionTime=task.nextExecutionTime;          if (taskFired=(executionTime <= currentTime)) {            if (task.period == 0) {              queue.removeMin();              task.state=TimerTask.EXECUTED;            } else {              queue.rescheduleMin(task.period < 0 ? currentTime - task.period : executionTime + task.period);            }          }        }        if (!taskFired)         queue.wait(executionTime - currentTime);      }      if (taskFired)       task.run();    } catch (    InterruptedException e) {    }  }}  }
class C{  private long cancelAnimatorAndGetNewDuration(long duration,ValueAnimator previousAnimator){  long newDuration=duration;  if (previousAnimator != null) {    newDuration=Math.max(previousAnimator.getDuration() - previousAnimator.getCurrentPlayTime(),newDuration);    previousAnimator.cancel();  }  return newDuration;}  }
class C{  public void attachContentStream(PdfStream contentStream){  this.contentStream=contentStream;}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public synchronized long resetByteCount(){  long tmp=this.count;  this.count=0;  return tmp;}  }
class C{  public static void cleanSearchedStations(Context context){  Log.d(TAG,"FmRadioStation.cleanSearchedStations start");  context.getContentResolver().delete(Station.CONTENT_URI,Station.COLUMN_STATION_TYPE + "=" + String.valueOf(STATION_TYPE_SEARCHED),null);  Log.d(TAG,"FmRadioStation.cleanSearchedStations end");}  }
class C{  public long skip(long n) throws IOException {  ensureOpen();  if (n <= 0) {    return 0;  }  long pskip=buf.length - pos;  if (pskip > 0) {    if (n < pskip) {      pskip=n;    }    pos+=pskip;    n-=pskip;  }  if (n > 0) {    pskip+=super.skip(n);  }  return pskip;}  }
class C{  public void paint(Graphics g){  if (isVisible()) {    try {      TextUI mapper=component.getUI();      Rectangle r=mapper.modelToView(component,dot,dotBias);      if ((r == null) || ((r.width == 0) && (r.height == 0))) {        return;      }      if (width > 0 && height > 0 && !this._contains(r.x,r.y,r.width,r.height)) {        Rectangle clip=g.getClipBounds();        if (clip != null && !clip.contains(this)) {          repaint();        }        damage(r);      }      g.setColor(component.getCaretColor());      int paintWidth=getCaretWidth(r.height);      r.x-=paintWidth >> 1;      g.fillRect(r.x,r.y,paintWidth,r.height);      Document doc=component.getDocument();      if (doc instanceof AbstractDocument) {        Element bidi=((AbstractDocument)doc).getBidiRootElement();        if ((bidi != null) && (bidi.getElementCount() > 1)) {          flagXPoints[0]=r.x + ((dotLTR) ? paintWidth : 0);          flagYPoints[0]=r.y;          flagXPoints[1]=flagXPoints[0];          flagYPoints[1]=flagYPoints[0] + 4;          flagXPoints[2]=flagXPoints[0] + ((dotLTR) ? 4 : -4);          flagYPoints[2]=flagYPoints[0];          g.fillPolygon(flagXPoints,flagYPoints,3);        }      }    } catch (    BadLocationException e) {    }  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static int hashCode(Object a[]){  if (a == null)   return 0;  int result=1;  for (  Object element : a)   result=31 * result + (element == null ? 0 : element.hashCode());  return result;}  }
class C{  public static RawHeaders fromMultimap(Map<String,List<String>> map,boolean response) throws IOException {  if (!response)   throw new UnsupportedOperationException();  RawHeaders result=new RawHeaders();  for (  Entry<String,List<String>> entry : map.entrySet()) {    String fieldName=entry.getKey();    List<String> values=entry.getValue();    if (fieldName != null) {      for (      String value : values) {        result.addLenient(fieldName,value);      }    } else     if (!values.isEmpty()) {      result.setStatusLine(values.get(values.size() - 1));    }  }  return result;}  }
class C{  public byte[] lookupPixel(byte[] src,byte[] dst){  if (dst == null) {    dst=new byte[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=data[i][s];    }  }  return dst;}  }
class C{  public void disableWindowsService() throws ApplicationException {  int code=ConfigureWindowsService.disableService(System.out,System.err);  if (code == ConfigureWindowsService.SERVICE_DISABLE_ERROR) {    throw new ApplicationException(ReturnCode.WINDOWS_SERVICE_ERROR,INFO_ERROR_DISABLING_WINDOWS_SERVICE.get(""),null);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RelayStateElement createRelayStateElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RelayStateElementImpl(value);}  }
class C{  public SubjectHeader createSubjectHeader(String subject) throws ParseException {  if (subject == null)   throw new NullPointerException("null subject arg");  Subject s=new Subject();  s.setSubject(subject);  return s;}  }
class C{  public GZIPOutputStream(OutputStream out,boolean syncFlush) throws IOException {  this(out,512,syncFlush);}  }
class C{  private void validateRelationDefinition(RelationDefinition<?,?> rd){  RelationDefinition<?,?> tmp=definition.getRelationDefinition(rd.getName());  if (tmp != rd) {    throw new IllegalArgumentException("The relation " + rd.getName() + " is not associated with a "+ definition.getName());  }}  }
class C{  private PdfAcroForm(PdfDictionary pdfObject,PdfDocument pdfDocument){  super(pdfObject);  document=pdfDocument;  getFormFields();  xfaForm=new XfaForm(pdfObject);}  }
class C{  public void move_selected_items(Point2D p_from_location){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  StateSelectedItem curr_state=(StateSelectedItem)interactive_state;  Collection<BrdItem> item_list=curr_state.get_item_list();  PlaPointFloat from_location=gdi_context.coordinate_transform.screen_to_board(p_from_location);  StateInteractive new_state=StateMoveItem.get_instance(from_location,item_list,interactive_state,this,actlog);  set_interactive_state(new_state);  repaint();}  }
class C{  public static List<VerificationException> verifyCertificates(Certificate[] certs,KeyStore keystore,Calendar calendar){  return verifyCertificates(certs,keystore,null,calendar);}  }
class C{  static public void assertEquals(String message,short expected,short actual){  assertEquals(message,new Short(expected),new Short(actual));}  }
class C{  private ProfileStack(String[] classNames,String[] methodNames,int[] lineNumbers){  this.numFrames=classNames.length;  this.classNames=classNames;  this.methodNames=methodNames;  this.lineNumbers=lineNumbers;}  }
class C{  private void sweep(){  for (Node p=head, s, n; p != null && (s=p.next) != null; ) {    if (!s.isMatched())     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=head; else     p.casNext(s,n);  }}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return getSchemaBuilder().addDITStructureRule(new DITStructureRule(this),true);}  }
class C{  public static void deregisterAuthenticationPolicy(DN configEntryDN){  Reject.ifNull(configEntryDN);synchronized (directoryServer.authenticationPolicies) {    if (directoryServer.defaultPasswordPolicyDN.equals(configEntryDN)) {      directoryServer.defaultPasswordPolicy=null;    }    AuthenticationPolicy oldPolicy=directoryServer.authenticationPolicies.remove(configEntryDN);    if (oldPolicy != null) {      oldPolicy.finalizeAuthenticationPolicy();    }  }}  }
class C{  public InvalidFrameException(){}  }
class C{  @Deprecated public String encode(String path){  return encode(path,"UTF-8");}  }
class C{  public Set searchAllRoles(String wildcard,int level) throws AMException, SSOException {  return searchAllRoles(wildcard,null,level);}  }
class C{  private static void deleteFrom(int deleteAt,int[] starts,int numStarts){  while (starts[--numStarts] > deleteAt) {    starts[numStarts]-=1;  }}  }
class C{  private Socket createSSLOrBasicSocket(Socket startTLSSocket,SSLConnectionFactory sslConnectionFactory) throws SSLConnectionException, LDAPConnectionException {  if (sslConnectionFactory == null) {    return createSocket();  } else   if (!connectionOptions.useStartTLS()) {    return createSSLSocket(sslConnectionFactory);  } else {    try {      return sslConnectionFactory.createSocket(startTLSSocket,hostName,portNumber,true);    } catch (    IOException e) {      LocalizableMessage msg=INFO_RESULT_CLIENT_SIDE_CONNECT_ERROR.get();      throw new LDAPConnectionException(msg,CLIENT_SIDE_CONNECT_ERROR,null,e);    }  }}  }
class C{  private static boolean isBinary(Map map){  if (map instanceof AMHashMap) {    return ((AMHashMap)map).isByteValues();  } else   if (map != null && !map.isEmpty()) {    return map.values().iterator().next() instanceof byte[][];  }  return false;}  }
class C{  @Override public void tryPublish(String topic,AuditEvent auditEvent){  String sessionId=null;  try {    sessionId=soapSTSAccessTokenProvider.getAccessToken();    Map<String,String> headerMap=new HashMap<>();    headerMap.put(AMSTSConstants.CONTENT_TYPE,AMSTSConstants.APPLICATION_JSON);    headerMap.put(AMSTSConstants.CREST_VERSION_HEADER_KEY,openamAuditServiceVersion);    headerMap.put(AMSTSConstants.COOKIE,createAMSessionCookie(sessionId));    HttpURLConnectionWrapper.ConnectionResult connectionResult=httpURLConnectionWrapperFactory.httpURLConnectionWrapper(buildAuditAccessUrl()).withoutAuditTransactionIdHeader().setRequestHeaders(headerMap).setRequestMethod(AMSTSConstants.GET).setRequestPayload(auditEvent.getValue().toString()).makeInvocation();    final int responseCode=connectionResult.getStatusCode();    if (responseCode != HTTP_CREATED) {      logger.error("Failed to record audit event: [status code {}] {}",connectionResult.getStatusCode(),connectionResult.getResult());      throw new STSPublishException(responseCode,"Failed to record audit event: " + connectionResult.getResult());    }  } catch (  Exception e) {    if (sessionId != null) {      soapSTSAccessTokenProvider.invalidateAccessToken(sessionId);    }    logger.error("Failed to publish audit event: {}",e.getMessage(),e);  }}  }
class C{  public static void register(String path,String alias){  FontProgramFactory.registerFont(path,alias);}  }
class C{  public boolean isLockout(String userDN){  boolean locked=false;  AccountLockoutInfo acInfo=(AccountLockoutInfo)pwResetFailHash.get(userDN);  if ((acInfo != null) && isAccountLockout.isMemoryLocking()) {    if (acInfo.isLockout()) {      locked=isAccountLockout.isLockedOut(acInfo);      if (!locked) {        removeUserLockoutEntry(userDN);      }    }  }  return locked;}  }
class C{  protected void handleEmptyTag(TagElement tag) throws ChangedCharSetException {}  }
class C{  public void close() throws IOException {  stream.close();}  }
class C{  public void start(){  if (log.isDebugEnabled())   log.debug(sm.getString("hostConfig.start"));  try {    ObjectName hostON=host.getObjectName();    oname=new ObjectName(hostON.getDomain() + ":type=Deployer,host=" + host.getName());    Registry.getRegistry(null,null).registerComponent(this,oname,this.getClass().getName());  } catch (  Exception e) {    log.error(sm.getString("hostConfig.jmx.register",oname),e);  }  if (!host.getAppBaseFile().isDirectory()) {    log.error(sm.getString("hostConfig.appBase",host.getName(),host.getAppBaseFile().getPath()));    host.setDeployOnStartup(false);    host.setAutoDeploy(false);  }  if (host.getDeployOnStartup())   deployApps();}  }
class C{  public boolean contains(String attrName,String value){  boolean containsTheValue=false;  Attr attr=findAttribute(attrName);  if (attr != null) {    containsTheValue=attr.contains(value);  }  return containsTheValue;}  }
class C{  public BERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return _fooLocalService.deleteFoo(fooId);}  }
class C{  public AudioInputStream(TargetDataLine line){  TargetDataLineInputStream tstream=new TargetDataLineInputStream(line);  format=line.getFormat();  frameLength=AudioSystem.NOT_SPECIFIED;  frameSize=format.getFrameSize();  if (frameSize == AudioSystem.NOT_SPECIFIED || frameSize <= 0) {    frameSize=1;  }  this.stream=tstream;  framePos=0;  markpos=0;}  }
class C{  public XMLString fixWhiteSpace(boolean trimHead,boolean trimTail,boolean doublePunctuationSpaces){  return new XMLStringDefault(m_str.trim());}  }
class C{  public void cache(String dn,ReferralPrivilege p,String realm){  rwlock.writeLock().lock();  try {    cache.put(dn,p);  }  finally {    rwlock.writeLock().unlock();  }}  }
class C{  public void removeLayoutComponent(Component comp){  removeConstraints(comp);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC2ParameterSpec)) {    return false;  }  RC2ParameterSpec ps=(RC2ParameterSpec)obj;  return (effectiveKeyBits == ps.effectiveKeyBits) && (Arrays.equals(iv,ps.iv));}  }
class C{  public Scroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  if (interpolator == null) {    mInterpolator=new ViscousFluidInterpolator();  } else {    mInterpolator=interpolator;  }  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);}  }
class C{  public static ClientException adaptIllegalManagedObjectNameException(IllegalManagedObjectNameException e,AbstractManagedObjectDefinition<?,?> d){  String illegalName=e.getIllegalName();  PropertyDefinition<?> pd=e.getNamingPropertyDefinition();  if (illegalName.length() == 0) {    LocalizableMessage message=ERR_DSCFG_ERROR_ILLEGAL_NAME_EMPTY.get(d.getUserFriendlyPluralName());    return new ClientException(ReturnCode.ERROR_USER_DATA,message);  } else   if (illegalName.trim().length() == 0) {    LocalizableMessage message=ERR_DSCFG_ERROR_ILLEGAL_NAME_BLANK.get(d.getUserFriendlyPluralName());    return new ClientException(ReturnCode.ERROR_USER_DATA,message);  } else   if (pd != null) {    try {      pd.decodeValue(illegalName);    } catch (    PropertyException e1) {      PropertyDefinitionUsageBuilder b=new PropertyDefinitionUsageBuilder(true);      LocalizableMessage syntax=b.getUsage(pd);      LocalizableMessage message=ERR_DSCFG_ERROR_ILLEGAL_NAME_SYNTAX.get(illegalName,d.getUserFriendlyName(),syntax);      return new ClientException(ReturnCode.ERROR_USER_DATA,message);    }  }  LocalizableMessage message=ERR_DSCFG_ERROR_ILLEGAL_NAME_UNKNOWN.get(illegalName,d.getUserFriendlyName());  return new ClientException(ReturnCode.ERROR_USER_DATA,message);}  }
class C{  public LineNumberInputStream(InputStream in){  super(in);}  }
class C{  public static boolean isFederationCancelled(HttpServletRequest request){  String status=request.getParameter(IFSConstants.TERMINATION_STATUS);  if (status != null && status.equalsIgnoreCase(IFSConstants.CANCEL)) {    return true;  } else {    return false;  }}  }
class C{  public static void assertDefaultCipherSuites(String[] cipherSuites){  assertValidCipherSuites(CIPHER_SUITES,cipherSuites);  assertEquals(CIPHER_SUITES_DEFAULT,Arrays.asList(cipherSuites));}  }
class C{  public static StringArgument trustStorePasswordArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_TRUSTSTORE_PWD).shortIdentifier(OPTION_SHORT_TRUSTSTORE_PWD).description(INFO_DESCRIPTION_TRUSTSTOREPASSWORD.get()).valuePlaceholder(INFO_TRUSTSTORE_PWD_PLACEHOLDER.get()).buildArgument();}  }
class C{  @Override public int process(Callback[] callbacks,int state) throws LoginException {switch (state) {case ISAuthConstants.LOGIN_START:{      setUserSessionProperty(JwtSessionModule.TOKEN_IDLE_TIME_IN_MINUTES_CLAIM_KEY,tokenIdleTime.toString());      setUserSessionProperty(JwtSessionModule.MAX_TOKEN_LIFE_IN_MINUTES_KEY,maxTokenLife.toString());      setUserSessionProperty(ENFORCE_CLIENT_IP_SETTING_KEY,Boolean.toString(enforceClientIP));      setUserSessionProperty(SECURE_COOKIE_KEY,Boolean.toString(secureCookie));      setUserSessionProperty(HTTP_ONLY_COOKIE_KEY,Boolean.toString(httpOnlyCookie));      if (cookieName != null) {        setUserSessionProperty(COOKIE_NAME_KEY,cookieName);      }      String cookieDomainsString="";      for (      String cookieDomain : cookieDomains) {        cookieDomainsString+=cookieDomain + ",";      }      setUserSessionProperty(COOKIE_DOMAINS_KEY,cookieDomainsString);      setUserSessionProperty(HMAC_KEY,encryptedHmacKey);      final Subject clientSubject=new Subject();      MessageInfo messageInfo=persistentCookieModuleWrapper.prepareMessageInfo(getHttpServletRequest(),getHttpServletResponse());      if (process(messageInfo,clientSubject,callbacks)) {        if (principal != null) {          setAuthenticatingUserName(principal.getName());        }        return ISAuthConstants.LOGIN_SUCCEED;      }      throw new AuthLoginException(AUTH_RESOURCE_BUNDLE_NAME,"cookieNotValid",null);    }default :{    throw new AuthLoginException(AUTH_RESOURCE_BUNDLE_NAME,"incorrectState",null);  }}}  }
class C{  @Override public synchronized void unload() throws ServletException {  if (!singleThreadModel && (instance == null))   return;  unloading=true;  if (countAllocated.get() > 0) {    int nRetries=0;    long delay=unloadDelay / 20;    while ((nRetries < 21) && (countAllocated.get() > 0)) {      if ((nRetries % 10) == 0) {        log.info(sm.getString("standardWrapper.waiting",countAllocated.toString(),getName()));      }      try {        Thread.sleep(delay);      } catch (      InterruptedException e) {      }      nRetries++;    }  }  if (instanceInitialized) {    PrintStream out=System.out;    if (swallowOutput) {      SystemLogHandler.startCapture();    }    try {      if (Globals.IS_SECURITY_ENABLED) {        try {          SecurityUtil.doAsPrivilege("destroy",instance);        }  finally {          SecurityUtil.remove(instance);        }      } else {        instance.destroy();      }    } catch (    Throwable t) {      t=ExceptionUtils.unwrapInvocationTargetException(t);      ExceptionUtils.handleThrowable(t);      instance=null;      instancePool=null;      nInstances=0;      fireContainerEvent("unload",this);      unloading=false;      throw new ServletException(sm.getString("standardWrapper.destroyException",getName()),t);    } finally {      if (!((Context)getParent()).getIgnoreAnnotations()) {        try {          ((Context)getParent()).getInstanceManager().destroyInstance(instance);        } catch (        Throwable t) {          ExceptionUtils.handleThrowable(t);          log.error(sm.getString("standardWrapper.destroyInstance",getName()),t);        }      }      if (swallowOutput) {        String log=SystemLogHandler.stopCapture();        if (log != null && log.length() > 0) {          if (getServletContext() != null) {            getServletContext().log(log);          } else {            out.println(log);          }        }      }    }  }  instance=null;  instanceInitialized=false;  if (isJspServlet && jspMonitorON != null) {    Registry.getRegistry(null,null).unregisterComponent(jspMonitorON);  }  if (singleThreadModel && (instancePool != null)) {    try {      while (!instancePool.isEmpty()) {        Servlet s=instancePool.pop();        if (Globals.IS_SECURITY_ENABLED) {          try {            SecurityUtil.doAsPrivilege("destroy",s);          }  finally {            SecurityUtil.remove(s);          }        } else {          s.destroy();        }        if (!((Context)getParent()).getIgnoreAnnotations()) {          ((StandardContext)getParent()).getInstanceManager().destroyInstance(s);        }      }    } catch (    Throwable t) {      t=ExceptionUtils.unwrapInvocationTargetException(t);      ExceptionUtils.handleThrowable(t);      instancePool=null;      nInstances=0;      unloading=false;      fireContainerEvent("unload",this);      throw new ServletException(sm.getString("standardWrapper.destroyException",getName()),t);    }    instancePool=null;    nInstances=0;  }  singleThreadModel=false;  unloading=false;  fireContainerEvent("unload",this);}  }
class C{  public void jspError(Node n,Exception e,String errCode,String... args) throws JasperException {  dispatch(n.getStart(),errCode,args,e);}  }
class C{  public static boolean createSite(SSOToken ssoToken,String siteName,String siteURL,Collection secondaryURLs) throws SMSException, SSOException, ConfigurationException {  boolean created=false;  if ((siteName == null) || (siteName.trim().length() == 0)) {    throw new ConfigurationException("site.name.empty",null);  }  for (int i=0; i < siteName.length(); i++) {    char c=siteName.charAt(i);    if (specialCharacters.contains(c)) {      String[] params={siteName,specialChars};      throw new ConfigurationException("invalid,site.name",params);    }  }  ServiceConfig sc=getRootSiteConfig(ssoToken);  if (sc != null) {    String siteId=getNextId(ssoToken);    created=createSite(ssoToken,siteName,siteURL,siteId,secondaryURLs);  }  if (created) {    updateOrganizationAlias(ssoToken,siteURL,true);  }  return created;}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (dtdHandler != null) {    dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  protected String reload(ContextName cn,StringManager smClient){  StringWriter stringWriter=new StringWriter();  PrintWriter printWriter=new PrintWriter(stringWriter);  super.reload(printWriter,cn,smClient);  return stringWriter.toString();}  }
class C{  public void scheduleTask(Task task,boolean writeState) throws DirectoryException {  schedulerLock.lock();  try {    String id=task.getTaskID();    if (tasks.containsKey(id)) {      LocalizableMessage message=ERR_TASKSCHED_DUPLICATE_TASK_ID.get(id);      throw new DirectoryException(ResultCode.ENTRY_ALREADY_EXISTS,message);    }    for (    String dependencyID : task.getDependencyIDs()) {      Task t=tasks.get(dependencyID);      if (t == null) {        LocalizableMessage message=ERR_TASKSCHED_DEPENDENCY_MISSING.get(id,dependencyID);        throw new DirectoryException(ResultCode.NO_SUCH_OBJECT,message);      }    }    tasks.put(id,task);    TaskState state=shouldStart(task);    task.setTaskState(state);    if (state == TaskState.RUNNING) {      TaskThread taskThread;      if (idleThreads.isEmpty()) {        taskThread=new TaskThread(this,nextThreadID++);        taskThread.start();      } else {        taskThread=idleThreads.removeFirst();      }      runningTasks.add(task);      activeThreads.put(task.getTaskID(),taskThread);      taskThread.setTask(task);    } else     if (TaskState.isDone(state)) {      if (state == TaskState.CANCELED_BEFORE_STARTING && task.isRecurring()) {        pendingTasks.add(task);      } else {        completedTasks.add(task);      }    } else {      pendingTasks.add(task);    }    if (writeState) {      writeState();    }  }  finally {    schedulerLock.unlock();  }}  }
class C{  protected void writeLocation(String loc) throws IOException {  hadAnnotations|=(loc != null);  locOut.writeObject(loc);}  }
class C{  void createBasicLayout(final Container c,final GridBagConstraints gbc,final boolean nameReadOnly){  gbc.gridx=0;  gbc.gridy=0;  gbc.gridwidth=3;  addErrorPane(c,gbc);  if (nameReadOnly) {    gbc.gridy++;    titlePanel.setTitle(INFO_CTRL_PANEL_INDEX_DETAILS_LABEL.get());    gbc.fill=GridBagConstraints.HORIZONTAL;    gbc.anchor=GridBagConstraints.WEST;    gbc.insets.top=10;    gbc.weightx=1.0;    JPanel p=new JPanel(new GridBagLayout());    p.setOpaque(false);    c.add(p,gbc);    GridBagConstraints gbc2=new GridBagConstraints();    gbc2.weightx=0.0;    gbc2.gridwidth=GridBagConstraints.RELATIVE;    p.add(titlePanel,gbc2);    gbc2.gridwidth=GridBagConstraints.REMAINDER;    gbc2.fill=GridBagConstraints.HORIZONTAL;    gbc2.weightx=1.0;    p.add(Box.createHorizontalGlue(),gbc2);  }  gbc.gridwidth=1;  gbc.gridy++;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets.left=0;  gbc.gridx=0;  gbc.weightx=0.0;  c.add(lAttribute,gbc);  gbc.insets.left=10;  gbc.gridx=1;  if (!nameReadOnly) {    attributes.addItemListener(new IgnoreItemListener(attributes));    attributes.setRenderer(new CustomListCellRenderer(attributes));    c.add(attributes,gbc);  } else {    c.add(name,gbc);  }  gbc.insets.top=10;  gbc.gridy++;  gbc.insets.left=0;  gbc.gridx=0;  c.add(lBackend,gbc);  gbc.insets.left=10;  gbc.gridx=1;  c.add(backendName,gbc);  gbc.gridy++;  gbc.insets.left=0;  gbc.gridx=0;  c.add(lEntryLimit,gbc);  gbc.insets.left=10;  gbc.gridx=1;  JPanel p=new JPanel(new GridBagLayout());  p.setOpaque(false);  c.add(p,gbc);  GridBagConstraints gbc2=new GridBagConstraints();  gbc2.weightx=0.0;  gbc2.gridwidth=GridBagConstraints.RELATIVE;  p.add(entryLimit,gbc2);  gbc2.gridwidth=GridBagConstraints.REMAINDER;  gbc2.fill=GridBagConstraints.HORIZONTAL;  gbc2.weightx=1.0;  p.add(Box.createHorizontalGlue(),gbc2);  gbc.gridx=0;  gbc.insets.left=0;  gbc.gridy++;  gbc.weightx=0.0;  gbc.weightx=0.0;  gbc.anchor=GridBagConstraints.NORTHWEST;  c.add(lType,gbc);  gbc.gridx=1;  gbc.anchor=GridBagConstraints.WEST;  gbc.insets.left=10;  gbc.weightx=1.0;  JCheckBox[] types={approximate,equality,ordering,presence,substring};  typesPanel.setOpaque(false);  c.add(typesPanel,gbc);  gbc.gridy++;  gbc2=new GridBagConstraints();  gbc.gridwidth=GridBagConstraints.REMAINDER;  for (  JCheckBox type : types) {    type.setOpaque(false);    typesPanel.add(type,gbc2);    gbc2.anchor=GridBagConstraints.WEST;    gbc2.insets.top=10;  }  gbc.weighty=1.0;  gbc.weightx=0.0;  gbc.gridx=0;  gbc.fill=GridBagConstraints.VERTICAL;  c.add(Box.createVerticalGlue(),gbc);}  }
class C{  public SubjectParser(String subject){  super(subject);}  }
class C{  public boolean add(E e){  ensureCapacityInternal(size + 1);  elementData[size++]=e;  return true;}  }
class C{  protected Control(Type type){  this.type=type;}  }
class C{  public TimeDescription createTimeDescription(Date start,Date stop) throws SdpException {  TimeDescriptionImpl timeDescriptionImpl=new TimeDescriptionImpl();  TimeField timeImpl=new TimeField();  timeImpl.setStart(start);  timeImpl.setStop(stop);  timeDescriptionImpl.setTime(timeImpl);  return timeDescriptionImpl;}  }
class C{  public String toStringImpl(){  return latPort;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_arg0)   m_arg0.fixupVariables(vars,globalsSize);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.ReferenceListType.DataReference createReferenceListTypeDataReference() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.ReferenceListTypeImpl.DataReferenceImpl();}  }
class C{  public void write(int c) throws IOException {synchronized (lock) {    ensureOpen();    if (nextChar >= nChars)     flushBuffer();    cb[nextChar++]=(char)c;  }}  }
class C{  public static void saveAsXML(NSObject root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  FileOutputStream fous=new FileOutputStream(out);  saveAsXML(root,fous);  fous.close();}  }
class C{  public static List convertJAXBToElement(List jaxbObjs) throws JAXBException {  List result=new ArrayList();  if (jaxbObjs != null && !jaxbObjs.isEmpty()) {    Iterator iter=jaxbObjs.iterator();    while (iter.hasNext()) {      result.add(convertJAXBToElement(iter.next()));    }  }  return result;}  }
class C{  protected void addImpl(Component comp,Object constraints,int index){  super.addImpl(comp,constraints,index);  if (glassPane != null && glassPane.getParent() == this && getComponent(0) != glassPane) {    add(glassPane,0);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(3);  testEmployee.removeAttribute("class");  attrValue=testEmployee.getAttribute("class");  assertEquals("attrValue","",attrValue);}  }
class C{  AxesWalker cloneDeep(WalkingIterator cloneOwner,Vector cloneList) throws CloneNotSupportedException {  AxesWalker clone=findClone(this,cloneList);  if (null != clone)   return clone;  clone=(AxesWalker)this.clone();  clone.setLocPathIterator(cloneOwner);  if (null != cloneList) {    cloneList.addElement(this);    cloneList.addElement(clone);  }  if (wi().m_lastUsedWalker == this)   cloneOwner.m_lastUsedWalker=clone;  if (null != m_nextWalker)   clone.m_nextWalker=m_nextWalker.cloneDeep(cloneOwner,cloneList);  if (null != cloneList) {    if (null != m_prevWalker)     clone.m_prevWalker=m_prevWalker.cloneDeep(cloneOwner,cloneList);  } else {    if (null != m_nextWalker)     clone.m_nextWalker.m_prevWalker=clone;  }  return clone;}  }
class C{  public final int peepTailSub1(){  return m_map[m_firstFree - 2];}  }
class C{  @Override public void unbindView(){  this.view=null;}  }
class C{  public static boolean isCookieHttpOnly(){  return cookieHttpOnly;}  }
class C{  @Override @Test(timeout=120000) public void testByteBufferWrite() throws Exception {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  doByteBufferWrite(CIPHER_OPENSSL_JNA,baos,false);  doByteBufferWrite(CIPHER_OPENSSL_JNA,baos,true);}  }
class C{  public CircularRedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static byte[] hexStringToBytes(String hexString){  if (hexString == null || hexString.equals("")) {    return null;  }  hexString=hexString.toUpperCase();  int length=hexString.length() / 2;  char[] hexChars=hexString.toCharArray();  byte[] d=new byte[length];  for (int i=0; i < length; i++) {    int pos=i * 2;    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));  }  return d;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="*";  String localName="*";  Document doc;  NodeList newList;  doc=(Document)load("staffNS",false);  newList=doc.getElementsByTagNameNS(namespaceURI,localName);  assertSize("throw_Size",37,newList);}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> updateInstance(final Context context,final String resourceId,final UpdateRequest request){  logger.debug("update {} ","name=" + name + " id="+ resourceId+ " rev="+ request.getRevision());  Context managedContext=new ManagedObjectContext(context);  try {    ReadRequest repoReadRequest=Requests.newReadRequest(repoId(resourceId));    for (    JsonPointer pointer : request.getFields()) {      if (pointer.equals(SchemaField.FIELD_ALL)) {        repoReadRequest.addField("");      } else       if (!pointer.equals(SchemaField.FIELD_ALL_RELATIONSHIPS)) {        repoReadRequest.addField(pointer);      }    }    ResourceResponse repoReadResponse=connectionFactory.getConnection().read(managedContext,repoReadRequest);    final JsonValue relationships=fetchRelationshipFields(managedContext,resourceId,request.getFields());    repoReadResponse.getContent().asMap().putAll(relationships.asMap());    ResourceResponse updatedResponse=update(managedContext,request,resourceId,request.getRevision(),repoReadResponse.getContent(),request.getContent(),relationshipProviders.keySet(),Collections.<JsonPointer>emptySet());    activityLogger.log(managedContext,request,"update",managedId(repoReadResponse.getId()).toString(),repoReadResponse.getContent(),updatedResponse.getContent(),Status.SUCCESS);    return prepareResponse(managedContext,updatedResponse,request.getFields()).asPromise();  } catch (  ResourceException e) {    return e.asPromise();  }catch (  Exception e) {    return new InternalServerErrorException(e.getMessage(),e).asPromise();  }}  }
class C{  ConstantPool(final DataInput input) throws IOException, ClassFormatException {  final int constant_pool_count=input.readUnsignedShort();  constant_pool=new Constant[constant_pool_count];  for (int i=1; i < constant_pool_count; i++) {    constant_pool[i]=Constant.readConstant(input);    if (constant_pool[i] != null) {      byte tag=constant_pool[i].getTag();      if ((tag == Const.CONSTANT_Double) || (tag == Const.CONSTANT_Long)) {        i++;      }    }  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 210) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  static <T>Promise<Void> anyBlocking(final List<Promise<T>> promises){  return anyBlocking(promises.toArray(new Promise[promises.size()]));}  }
class C{  public ServerFaultException(final SAML2IdentityProviderAdapter idpAdapter,final String messageCode){  super(idpAdapter,messageCode,null);}  }
class C{  public void finest(String msg){  log(Level.FINEST,msg);}  }
class C{  public View create(Element elem){  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty("i18n");  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    return createI18N(elem);  } else {    return new WrappedPlainView(elem);  }}  }
class C{  public static List<SearchResultEntry> findReferences(ClassNode node){  List<SearchResultEntry> results=findChildren(node);  List<Reference> references=new ArrayList<Reference>();  for (  ClassNode cn : VisualizerWindow.instance.getNodes().values()) {    references.addAll(ReferenceUtils.getReferences(node,cn));  }  for (  Reference reference : references) {    results.add(new SearchResultEntry(reference.getNode(),reference.getMethod(),OpUtils.getIndex(reference.getAin())));  }  return results;}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  str=pcdata;}  }
class C{  public GenericAudioHeader(){  content=new HashMap<String,Object>(6);  content.put(FIELD_BITRATE,-1);  content.put(FIELD_CHANNEL,-1);  content.put(FIELD_TYPE,"");  content.put(FIELD_INFOS,"");  content.put(FIELD_SAMPLERATE,-1);  content.put(FIELD_BITSPERSAMPLE,-1);  content.put(FIELD_LENGTH,(float)-1);  content.put(FIELD_VBR,true);}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public void _read(InputStream input){  value=input.read_TypeCode();}  }
class C{  public static Options defaultOptions(Context context){  Options defaultOptions=Options.defaultOptions();  if (context.containsContext(TransactionIdContext.class)) {    TransactionIdContext txContext=context.asContext(TransactionIdContext.class);    defaultOptions.set(TRANSACTIONID_OPTION,txContext.getTransactionId());  }  return defaultOptions;}  }
class C{  public static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  public PasswordAuthentication(String userName,char[] password){  this.userName=userName;  this.password=password.clone();}  }
class C{  public String documentationHomePageUrl(){  return properties.getProperty("doc.homepage.url");}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AssertionArtifactElement createAssertionArtifactElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AssertionArtifactElementImpl();}  }
class C{  public String toString(){  return ("SMPrincipal:  " + name);}  }
class C{  void repopulateTypesPanel(final AttributeType attr){  typesPanel.removeAll();  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridy=0;  gbc.gridx=0;  gbc.anchor=GridBagConstraints.WEST;  gbc.fill=GridBagConstraints.HORIZONTAL;  if (attr != null) {    if (attr.getApproximateMatchingRule() != null) {      typesPanel.add(approximate,gbc);      gbc.insets.top=10;      gbc.gridy++;    }    if (attr.getEqualityMatchingRule() != null) {      typesPanel.add(equality,gbc);      gbc.insets.top=10;      gbc.gridy++;    }    if (attr.getOrderingMatchingRule() != null) {      typesPanel.add(ordering,gbc);      gbc.insets.top=10;      gbc.gridy++;    }    typesPanel.add(presence,gbc);    gbc.gridx=1;    gbc.weightx=1.0;    typesPanel.add(Box.createHorizontalGlue(),gbc);    gbc.weightx=0.0;    gbc.gridx=0;    gbc.gridy++;    gbc.insets.top=10;    if (attr.getSubstringMatchingRule() != null) {      typesPanel.add(substring,gbc);      gbc.insets.top=10;    }  }  typesPanel.validate();}  }
class C{  static void useAuthorizationIdentityRequestControl(Connection connection) throws LdapException {  if (isSupported(AuthorizationIdentityRequestControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final char[] pwd="hifalutin".toCharArray();    System.out.println("Binding as " + dn);    final BindRequest request=Requests.newSimpleBindRequest(dn,pwd).addControl(AuthorizationIdentityRequestControl.newControl(true));    final BindResult result=connection.bind(request);    try {      final AuthorizationIdentityResponseControl control=result.getControl(AuthorizationIdentityResponseControl.DECODER,new DecodeOptions());      System.out.println("Authorization ID returned: " + control.getAuthorizationID());    } catch (    final DecodeException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());    }  } else {    System.err.println("AuthorizationIdentityRequestControl not supported.");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  String childValue;  int commentCount=0;  int childType;  NamedNodeMap attributes;  doc=(Document)load("hc_staff",false);  elementList=doc.getChildNodes();  for (int indexN1005E=0; indexN1005E < elementList.getLength(); indexN1005E++) {    child=(Node)elementList.item(indexN1005E);    childType=(int)child.getNodeType();    if (equals(8,childType)) {      childName=child.getNodeName();      assertEquals("nodeName","#comment",childName);      childValue=child.getNodeValue();      assertEquals("nodeValue"," This is comment number 1.",childValue);      attributes=child.getAttributes();      assertNull("attributes",attributes);      commentCount+=1;    }  }  assertTrue("atMostOneComment",(commentCount < 2));}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName());}  }
class C{  public void test_setIsNamespaceAware(){  spf.setNamespaceAware(true);  assertTrue(spf.isNamespaceAware());  spf.setNamespaceAware(false);  assertFalse(spf.isNamespaceAware());  spf.setNamespaceAware(true);  assertTrue(spf.isNamespaceAware());}  }
class C{  public boolean isAbstract(){  return Modifier.isAbstract(flags);}  }
class C{  public ImageRenderInfo(Matrix ctm,PdfStream stream,PdfDictionary colorSpaceDictionary,boolean isInline){  this.ctm=ctm;  this.image=new PdfImageXObject(stream);  this.colorSpaceDictionary=colorSpaceDictionary;  this.isInline=isInline;}  }
class C{  public SimplePrefixSet(Collection<String> prefixes){  this.prefixes=new ArrayList<>(prefixes);}  }
class C{  public void trimToSize(){  modCount++;  if (size < elementData.length) {    elementData=(size == 0) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData,size);  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T fromPem(String pem) throws Exception {  StringReader sr=new StringReader(pem);  PEMReader pw=new PEMReader(sr);  Object object=pw.readObject();  return (T)object;}  }
class C{  public boolean validateSMHost(){  Context ctx=getContext();  String strSSL=(String)ctx.getSessionAttribute(SessionAttributeNames.CONFIG_STORE_SSL);  boolean ssl=(strSSL != null) && (strSSL.equals("SSL"));  String host=(String)ctx.getSessionAttribute(SessionAttributeNames.CONFIG_STORE_HOST);  if (host == null) {    host="localhost";  }  String strPort=(String)ctx.getSessionAttribute(SessionAttributeNames.CONFIG_STORE_PORT);  if (strPort == null) {    strPort=getAvailablePort(50389);  }  int port=Integer.parseInt(strPort);  String bindDN=(String)ctx.getSessionAttribute(SessionAttributeNames.CONFIG_STORE_LOGIN_ID);  String rootSuffix=(String)ctx.getSessionAttribute(SessionAttributeNames.CONFIG_STORE_ROOT_SUFFIX);  String bindPwd=(String)ctx.getSessionAttribute(SessionAttributeNames.CONFIG_STORE_PWD);  if (bindDN == null) {    bindDN="cn=Directory Manager";  }  if (rootSuffix == null) {    rootSuffix=Constants.DEFAULT_ROOT_SUFFIX;  }  try (Connection conn=getConnection(host,port,bindDN,bindPwd.toCharArray(),5,ssl)){    conn.readEntry(DN.valueOf(rootSuffix));    try {      conn.readEntry(DN.valueOf(rootSuffix).child("ou","services"));      writeToResponse(getLocalizedString("config.data.already.exist"));    } catch (    EntryNotFoundException enfe) {      writeToResponse("ok");    }  } catch (  LdapException lex) {    if (!writeErrorToResponse(lex.getResult().getResultCode())) {      writeToResponse(getLocalizedString("cannot.connect.to.SM.datastore"));    }  }catch (  Exception e) {    writeToResponse(getLocalizedString("cannot.connect.to.SM.datastore"));  }  setPath(null);  return false;}  }
class C{  public void sendRoleUpdateNotification(String relationId,Role newRole,List<ObjectName> oldValue) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null || newRole == null || oldValue == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  if (!(oldValue instanceof ArrayList<?>))   oldValue=new ArrayList<ObjectName>(oldValue);  RELATION_LOGGER.entering(RelationService.class.getName(),"sendRoleUpdateNotification",new Object[]{relationId,newRole,oldValue});  String roleName=newRole.getRoleName();  List<ObjectName> newRoleVal=newRole.getRoleValue();  String newRoleValString=Role.roleValueToString(newRoleVal);  String oldRoleValString=Role.roleValueToString(oldValue);  StringBuilder ntfMsg=new StringBuilder("Value of role ");  ntfMsg.append(roleName);  ntfMsg.append(" has changed\nOld value:\n");  ntfMsg.append(oldRoleValString);  ntfMsg.append("\nNew value:\n");  ntfMsg.append(newRoleValString);  sendNotificationInt(2,ntfMsg.toString(),relationId,null,roleName,newRoleVal,oldValue);  RELATION_LOGGER.exiting(RelationService.class.getName(),"sendRoleUpdateNotification");}  }
class C{  public TopologyMsg(Collection<DSInfo> dsInfos,List<RSInfo> rsInfos){  if (dsInfos == null || dsInfos.isEmpty()) {    this.replicaInfos=Collections.emptyMap();  } else {    Map<Integer,DSInfo> replicas=new HashMap<>();    for (    DSInfo dsInfo : dsInfos) {      replicas.put(dsInfo.getDsId(),dsInfo);    }    this.replicaInfos=Collections.unmodifiableMap(replicas);  }  if (rsInfos == null || rsInfos.isEmpty()) {    this.rsInfos=Collections.emptyList();  } else {    this.rsInfos=Collections.unmodifiableList(new ArrayList<RSInfo>(rsInfos));  }}  }
class C{  public void relayoutToCompressAndAlign(){  this.relayoutToCompress();  this.relayoutToAlign();}  }
class C{  public boolean isSpellCheck(){  return !getFieldFlag(FF_DO_NOT_SPELL_CHECK);}  }
class C{  private static void removeUnsupportedAttributes(PrintService ps,DocFlavor flavor,AttributeSet aset){  AttributeSet asUnsupported=ps.getUnsupportedAttributes(flavor,aset);  if (asUnsupported != null) {    Attribute[] usAttrs=asUnsupported.toArray();    for (int i=0; i < usAttrs.length; i++) {      Class category=usAttrs[i].getCategory();      if (ps.isAttributeCategorySupported(category)) {        Attribute attr=(Attribute)ps.getDefaultAttributeValue(category);        if (attr != null) {          aset.add(attr);        } else {          aset.remove(category);        }      } else {        aset.remove(category);      }    }  }}  }
class C{  public void testCertificateFactory03() throws CertificateException, NoSuchProviderException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      CertificateFactory.getInstance(validValues[i],"");      fail("IllegalArgumentException  must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public final void suspend(){  if (stopOrSuspend(true))   Thread.currentThread().suspend();}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(mask[0]).append(".").append(mask[1]).append(".").append(mask[2]).append(".").append(mask[3]).toString();}  }
class C{  public UnmarshalException(String message){  this(message,null,null);}  }
class C{  public void verifyAssertsAndReset(){  assertFalse("First failure: " + mFirstFailureStackTrace,mGotFailure);  assertTrue("Received no assertions during the test!",mGotSuccess);  mGotFailure=false;  mGotSuccess=false;  mFirstFailureStackTrace=null;}  }
class C{  public BlockIterator(LivingEntity entity){  this(entity,0);}  }
class C{  private ReplicationBroker[] changelogBasic() throws Exception {  clearChangelogDB(replicationServer);  debugInfo("Starting changelogBasic");  ReplicationBroker[] brokers1And2=createReplicationBrokers1And2();  ReplicationBroker server1=brokers1And2[0];  ReplicationBroker server2=brokers1And2[1];  long time=TimeThread.getTime();  firstCSNServer1=new CSN(time,1,1);  secondCSNServer1=new CSN(time + 2,2,1);  firstCSNServer2=new CSN(time + 1,1,2);  secondCSNServer2=new CSN(time + 3,2,2);  unknownCSNServer1=new CSN(time + 1,1,1);  sendAndReceiveDeleteMsg(server1,server2,EXAMPLE_DN,firstCSNServer1,"uid");  sendAndReceiveDeleteMsg(server1,server2,TEST_ROOT_DN,secondCSNServer1,"uid");  sendAndReceiveDeleteMsg(server2,server1,EXAMPLE_DN,firstCSNServer2,"other-uid");  sendAndReceiveDeleteMsg(server2,server1,TEST_ROOT_DN,secondCSNServer2,"uid");  debugInfo("Ending changelogBasic");  return new ReplicationBroker[]{server1,server2};}  }
class C{  public void invoke(String invokeMethod,Marshallable param){  invoke(invokeMethod,param,null);}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  Principal principal=token.getPrincipal();  String name=principal.getName();  if (selectedWebServicesClients.contains(name)) {    debug.message("WebServicesClients.isMemeber():principal is member");    return true;  }  String principals=token.getProperty("Principals");  Set requestPrincipals=new HashSet();  if (principals != null && principals.length() != 0) {    StringTokenizer st=new StringTokenizer(principals,"|");    while (st.hasMoreTokens()) {      if (selectedWebServicesClients.contains(st.nextToken())) {        if (debug.messageEnabled()) {          debug.message("WebServicesClients.isMemeber(): principals " + "is member.");        }        return true;      }    }  }  return false;}  }
class C{  @Inject public TokenEndpointResource(OAuth2RequestFactory requestFactory,AccessTokenService accessTokenService,ExceptionHandler exceptionHandler,Set<TokenRequestHook> hooks,JacksonRepresentationFactory jacksonRepresentationFactory){  this.requestFactory=requestFactory;  this.accessTokenService=accessTokenService;  this.exceptionHandler=exceptionHandler;  this.hooks=hooks;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(dtListener) ? dtListener : null);}  }
class C{  public static String decryptText(byte[] password,byte[] data){  byte[] plain=decryptData(password,data);  int len=((plain[0] & 0xff) << 24) + ((plain[1] & 0xff) << 16) + ((plain[2] & 0xff) << 8)+ (plain[3] & 0xff);  if (len < 0 || len > plain.length - 4) {    throw new IllegalStateException("Unmatched password is used");  }  try {    return new String(plain,4,len,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new IllegalStateException("UTF-8 is not available",e);  }}  }
class C{  public Attribute toAttribute(){  AttributeDescription ad=AttributeDescription.create(attributeType);  return new LinkedAttribute(ad,attributeValue);}  }
class C{  public ByteArrayBuilder appendByte(int b){  builder.appendByte(b);  return this;}  }
class C{  @Inject @Singleton public RadiusServerManager(ConfigLoader configLoader,ConfigChangeListener configChangeListener,RequestListenerFactory requestListenerFactory){  logger.message("Constructing RadiusServiceStarter");  this.configLoader=configLoader;  this.configChangeListener=configChangeListener;  this.requestListenerFactory=requestListenerFactory;}  }
class C{  private SearchResultEntry searchConfigEntry(){  try {    String filter="(&(objectclass=ds-cfg-replication-domain)" + "(ds-cfg-base-dn=" + baseDN + "))";    final SearchRequest request=newSearchRequest("cn=config",SearchScope.SUBORDINATES,filter).setSizeLimit(1).addAttribute(REPLICATION_STATE);    final InternalSearchOperation op=getRootConnection().processSearch(request);    return getFirstResult(op);  } catch (  DirectoryException e) {    return null;  }}  }
class C{  public synchronized NSObject member(NSObject obj){  for (  NSObject o : set) {    if (o.equals(obj))     return o;  }  return null;}  }
class C{  public StyledTextAction(String nm){  super(nm);}  }
class C{  private void initPlayer(){synchronized (this) {    int bs=AudioTrack.getMinBufferSize(sampleRate,AudioFormat.CHANNEL_OUT_MONO,AudioFormat.ENCODING_PCM_16BIT);    audioTrack=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,AudioFormat.CHANNEL_OUT_MONO,AudioFormat.ENCODING_PCM_16BIT,bs,AudioTrack.MODE_STREAM);    if (audioTrack != null)     audioTrack.play();  }}  }
class C{  @Override public Foo createFoo(long fooId){  return fooPersistence.create(fooId);}  }
class C{  public ID3v11Tag(AbstractTag mp3tag){  if (mp3tag != null) {    if (mp3tag instanceof ID3v1Tag) {      if (mp3tag instanceof ID3v11Tag) {        throw new UnsupportedOperationException("Copy Constructor not called. Please type cast the argument");      }      ID3v1Tag id3old=(ID3v1Tag)mp3tag;      this.title=id3old.title;      this.artist=id3old.artist;      this.album=id3old.album;      this.comment=id3old.comment;      this.year=id3old.year;      this.genre=id3old.genre;    } else {      ID3v24Tag id3tag;      if (!(mp3tag instanceof ID3v24Tag)) {        id3tag=new ID3v24Tag(mp3tag);      } else {        id3tag=(ID3v24Tag)mp3tag;      }      ID3v24Frame frame;      String text;      if (id3tag.hasFrame(ID3v24Frames.FRAME_ID_TITLE)) {        frame=(ID3v24Frame)id3tag.getFrame(ID3v24Frames.FRAME_ID_TITLE);        text=((FrameBodyTIT2)frame.getBody()).getText();        this.title=ID3Tags.truncate(text,FIELD_TITLE_LENGTH);      }      if (id3tag.hasFrame(ID3v24Frames.FRAME_ID_ARTIST)) {        frame=(ID3v24Frame)id3tag.getFrame(ID3v24Frames.FRAME_ID_ARTIST);        text=((FrameBodyTPE1)frame.getBody()).getText();        this.artist=ID3Tags.truncate(text,FIELD_ARTIST_LENGTH);      }      if (id3tag.hasFrame(ID3v24Frames.FRAME_ID_ALBUM)) {        frame=(ID3v24Frame)id3tag.getFrame(ID3v24Frames.FRAME_ID_ALBUM);        text=((FrameBodyTALB)frame.getBody()).getText();        this.album=ID3Tags.truncate(text,FIELD_ALBUM_LENGTH);      }      if (id3tag.hasFrame(ID3v24Frames.FRAME_ID_YEAR)) {        frame=(ID3v24Frame)id3tag.getFrame(ID3v24Frames.FRAME_ID_YEAR);        text=((FrameBodyTDRC)frame.getBody()).getText();        this.year=ID3Tags.truncate(text,FIELD_YEAR_LENGTH);      }      if (id3tag.hasFrame(ID3v24Frames.FRAME_ID_COMMENT)) {        Iterator iterator=id3tag.getFrameOfType(ID3v24Frames.FRAME_ID_COMMENT);        text="";        while (iterator.hasNext()) {          frame=(ID3v24Frame)iterator.next();          text+=(((FrameBodyCOMM)frame.getBody()).getText() + " ");        }        this.comment=ID3Tags.truncate(text,FIELD_COMMENT_LENGTH);      }      if (id3tag.hasFrame(ID3v24Frames.FRAME_ID_GENRE)) {        frame=(ID3v24Frame)id3tag.getFrame(ID3v24Frames.FRAME_ID_GENRE);        text=((FrameBodyTCON)frame.getBody()).getText();        try {          this.genre=(byte)ID3Tags.findNumber(text);        } catch (        TagException ex) {          logger.log(Level.WARNING,getLoggingFilename() + ":" + "Unable to convert TCON frame to format suitable for v11 tag",ex);          this.genre=(byte)ID3v1Tag.GENRE_UNDEFINED;        }      }      if (id3tag.hasFrame(ID3v24Frames.FRAME_ID_TRACK)) {        frame=(ID3v24Frame)id3tag.getFrame(ID3v24Frames.FRAME_ID_TRACK);        this.track=(byte)((FrameBodyTRCK)frame.getBody()).getTrackNo().intValue();      }    }  }}  }
class C{  private void closeStreams(final Process process) throws IOException {  IOException caught=null;  try {    process.getInputStream().close();  } catch (  IOException e) {    caught=e;  }  try {    process.getOutputStream().close();  } catch (  IOException e) {    caught=e;  }  try {    process.getErrorStream().close();  } catch (  IOException e) {    caught=e;  }  if (caught != null) {    throw caught;  }}  }
class C{  public synchronized int countObservers(){  return obs.size();}  }
class C{  public void addRecurringTask(RecurringTask recurringTask,boolean scheduleIteration) throws DirectoryException {  schedulerLock.lock();  try {    String id=recurringTask.getRecurringTaskID();    if (recurringTasks.containsKey(id)) {      LocalizableMessage message=ERR_TASKSCHED_DUPLICATE_RECURRING_ID.get(id);      throw new DirectoryException(ResultCode.ENTRY_ALREADY_EXISTS,message);    }    Attribute attr=Attributes.create(ATTR_TASK_STATE,TaskState.RECURRING.toString());    Entry recurringTaskEntry=recurringTask.getRecurringTaskEntry();    recurringTaskEntry.putAttribute(attr.getAttributeDescription().getAttributeType(),newArrayList(attr));    if (scheduleIteration) {      Task task=recurringTask.scheduleNextIteration(new GregorianCalendar());      if (task != null) {        Task t=tasks.get(task.getTaskID());        if (t != null && TaskState.isDone(t.getTaskState())) {          removeCompletedTask(t.getTaskID());        }        scheduleTask(task,false);      }    }    recurringTasks.put(id,recurringTask);    writeState();  }  finally {    schedulerLock.unlock();  }}  }
class C{  private Context buildActivitiContext(Context context){  final RootContext root=context.asContext(RootContext.class);  final SecurityContext security=context.asContext(SecurityContext.class);  return new ActivitiContext(new SecurityContext(new RootContext(root.getId()),security.getAuthenticationId(),security.getAuthorization()));}  }
class C{  private void registerPlugin0(DirectoryServerPlugin<? extends PluginCfg> plugin,Set<PluginType> pluginTypes){  for (  PluginType t : pluginTypes) {switch (t) {case STARTUP:      startupPlugins=addPlugin(startupPlugins,plugin,t,pluginRootConfig.getPluginOrderStartup());    break;case SHUTDOWN:  shutdownPlugins=addPlugin(shutdownPlugins,plugin,t,pluginRootConfig.getPluginOrderShutdown());break;case POST_CONNECT:postConnectPlugins=addPlugin(postConnectPlugins,plugin,t,pluginRootConfig.getPluginOrderPostConnect());break;case POST_DISCONNECT:postDisconnectPlugins=addPlugin(postDisconnectPlugins,plugin,t,pluginRootConfig.getPluginOrderPostDisconnect());break;case LDIF_IMPORT:ldifImportPlugins=addPlugin(ldifImportPlugins,plugin,t,pluginRootConfig.getPluginOrderLDIFImport());break;case LDIF_IMPORT_END:ldifImportEndPlugins=addPlugin(ldifImportEndPlugins,plugin,t,pluginRootConfig.getPluginOrderLDIFImportEnd());break;case LDIF_IMPORT_BEGIN:ldifImportBeginPlugins=addPlugin(ldifImportBeginPlugins,plugin,t,pluginRootConfig.getPluginOrderLDIFImportBegin());break;case LDIF_EXPORT:ldifExportPlugins=addPlugin(ldifExportPlugins,plugin,t,pluginRootConfig.getPluginOrderLDIFExport());break;case PRE_PARSE_ABANDON:preParseAbandonPlugins=addPlugin(preParseAbandonPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseAbandon());break;case PRE_PARSE_ADD:preParseAddPlugins=addPlugin(preParseAddPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseAdd());break;case PRE_PARSE_BIND:preParseBindPlugins=addPlugin(preParseBindPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseBind());break;case PRE_PARSE_COMPARE:preParseComparePlugins=addPlugin(preParseComparePlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseCompare());break;case PRE_PARSE_DELETE:preParseDeletePlugins=addPlugin(preParseDeletePlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseDelete());break;case PRE_PARSE_EXTENDED:preParseExtendedPlugins=addPlugin(preParseExtendedPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseExtended());break;case PRE_PARSE_MODIFY:preParseModifyPlugins=addPlugin(preParseModifyPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseModify());break;case PRE_PARSE_MODIFY_DN:preParseModifyDNPlugins=addPlugin(preParseModifyDNPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseModifyDN());break;case PRE_PARSE_SEARCH:preParseSearchPlugins=addPlugin(preParseSearchPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseSearch());break;case PRE_PARSE_UNBIND:preParseUnbindPlugins=addPlugin(preParseUnbindPlugins,plugin,t,pluginRootConfig.getPluginOrderPreParseUnbind());break;case PRE_OPERATION_ADD:preOperationAddPlugins=addPlugin(preOperationAddPlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationAdd());break;case PRE_OPERATION_BIND:preOperationBindPlugins=addPlugin(preOperationBindPlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationBind());break;case PRE_OPERATION_COMPARE:preOperationComparePlugins=addPlugin(preOperationComparePlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationCompare());break;case PRE_OPERATION_DELETE:preOperationDeletePlugins=addPlugin(preOperationDeletePlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationDelete());break;case PRE_OPERATION_EXTENDED:preOperationExtendedPlugins=addPlugin(preOperationExtendedPlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationExtended());break;case PRE_OPERATION_MODIFY:preOperationModifyPlugins=addPlugin(preOperationModifyPlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationModify());break;case PRE_OPERATION_MODIFY_DN:preOperationModifyDNPlugins=addPlugin(preOperationModifyDNPlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationModifyDN());break;case PRE_OPERATION_SEARCH:preOperationSearchPlugins=addPlugin(preOperationSearchPlugins,plugin,t,pluginRootConfig.getPluginOrderPreOperationSearch());break;case POST_OPERATION_ABANDON:postOperationAbandonPlugins=addPlugin(postOperationAbandonPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationAbandon());break;case POST_OPERATION_ADD:postOperationAddPlugins=addPlugin(postOperationAddPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationAdd());break;case POST_OPERATION_BIND:postOperationBindPlugins=addPlugin(postOperationBindPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationBind());break;case POST_OPERATION_COMPARE:postOperationComparePlugins=addPlugin(postOperationComparePlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationCompare());break;case POST_OPERATION_DELETE:postOperationDeletePlugins=addPlugin(postOperationDeletePlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationDelete());break;case POST_OPERATION_EXTENDED:postOperationExtendedPlugins=addPlugin(postOperationExtendedPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationExtended());break;case POST_OPERATION_MODIFY:postOperationModifyPlugins=addPlugin(postOperationModifyPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationModify());break;case POST_OPERATION_MODIFY_DN:postOperationModifyDNPlugins=addPlugin(postOperationModifyDNPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationModifyDN());break;case POST_OPERATION_SEARCH:postOperationSearchPlugins=addPlugin(postOperationSearchPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationSearch());break;case POST_OPERATION_UNBIND:postOperationUnbindPlugins=addPlugin(postOperationUnbindPlugins,plugin,t,pluginRootConfig.getPluginOrderPostOperationUnbind());break;case POST_RESPONSE_ADD:postResponseAddPlugins=addPlugin(postResponseAddPlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseAdd());break;case POST_RESPONSE_BIND:postResponseBindPlugins=addPlugin(postResponseBindPlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseBind());break;case POST_RESPONSE_COMPARE:postResponseComparePlugins=addPlugin(postResponseComparePlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseCompare());break;case POST_RESPONSE_DELETE:postResponseDeletePlugins=addPlugin(postResponseDeletePlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseDelete());break;case POST_RESPONSE_EXTENDED:postResponseExtendedPlugins=addPlugin(postResponseExtendedPlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseExtended());break;case POST_RESPONSE_MODIFY:postResponseModifyPlugins=addPlugin(postResponseModifyPlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseModify());break;case POST_RESPONSE_MODIFY_DN:postResponseModifyDNPlugins=addPlugin(postResponseModifyDNPlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseModifyDN());break;case POST_RESPONSE_SEARCH:postResponseSearchPlugins=addPlugin(postResponseSearchPlugins,plugin,t,pluginRootConfig.getPluginOrderPostResponseSearch());break;case POST_SYNCHRONIZATION_ADD:postSynchronizationAddPlugins=addPlugin(postSynchronizationAddPlugins,plugin,t,pluginRootConfig.getPluginOrderPostSynchronizationAdd());break;case POST_SYNCHRONIZATION_DELETE:postSynchronizationDeletePlugins=addPlugin(postSynchronizationDeletePlugins,plugin,t,pluginRootConfig.getPluginOrderPostSynchronizationDelete());break;case POST_SYNCHRONIZATION_MODIFY:postSynchronizationModifyPlugins=addPlugin(postSynchronizationModifyPlugins,plugin,t,pluginRootConfig.getPluginOrderPostSynchronizationModify());break;case POST_SYNCHRONIZATION_MODIFY_DN:postSynchronizationModifyDNPlugins=addPlugin(postSynchronizationModifyDNPlugins,plugin,t,pluginRootConfig.getPluginOrderPostSynchronizationModifyDN());break;case SEARCH_RESULT_ENTRY:searchResultEntryPlugins=addPlugin(searchResultEntryPlugins,plugin,t,pluginRootConfig.getPluginOrderSearchResultEntry());break;case SEARCH_RESULT_REFERENCE:searchResultReferencePlugins=addPlugin(searchResultReferencePlugins,plugin,t,pluginRootConfig.getPluginOrderSearchResultReference());break;case SUBORDINATE_MODIFY_DN:subordinateModifyDNPlugins=addPlugin(subordinateModifyDNPlugins,plugin,t,pluginRootConfig.getPluginOrderSubordinateModifyDN());break;case SUBORDINATE_DELETE:subordinateDeletePlugins=addPlugin(subordinateDeletePlugins,plugin,t,pluginRootConfig.getPluginOrderSubordinateDelete());break;case INTERMEDIATE_RESPONSE:intermediateResponsePlugins=addPlugin(intermediateResponsePlugins,plugin,t,pluginRootConfig.getPluginOrderIntermediateResponse());break;default :}}}  }
class C{  public List<LocalizableMessage> deregisterBaseDN(DN baseDN) throws DirectoryException {  ifNull(baseDN);  Backend<?> backend=baseDNs.get(baseDN);  if (backend == null) {    LocalizableMessage message=ERR_DEREGISTER_BASEDN_NOT_REGISTERED.get(baseDN);    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  Backend<?> superiorBackend=backend.getParentBackend();  LinkedList<Backend<?>> subordinateBackends=new LinkedList<>();  if (backend.getSubordinateBackends() != null) {    for (    Backend<?> b : backend.getSubordinateBackends()) {      for (      DN dn : b.getBaseDNs()) {        if (dn.isSubordinateOrEqualTo(baseDN)) {          subordinateBackends.add(b);          break;        }      }    }  }  LinkedList<DN> otherBaseDNs=new LinkedList<>();  for (  DN dn : baseDNs.keySet()) {    if (dn.equals(baseDN)) {      continue;    }    Backend<?> b=baseDNs.get(dn);    if (backend.equals(b)) {      otherBaseDNs.add(dn);    }  }  baseDNs.remove(baseDN);  publicNamingContexts.remove(baseDN);  allPublicNamingContexts.remove(baseDN);  privateNamingContexts.remove(baseDN);  final LinkedList<LocalizableMessage> errors=new LinkedList<>();  if (superiorBackend == null) {    for (    Backend<?> b : subordinateBackends) {      if (!testOnly) {        b.setParentBackend(null);        backend.removeSubordinateBackend(b);      }      for (      DN dn : b.getBaseDNs()) {        if (b.isPrivateBackend()) {          privateNamingContexts.put(dn,b);        } else {          publicNamingContexts.put(dn,b);        }      }    }  } else {    if (otherBaseDNs.isEmpty() && !testOnly) {      superiorBackend.removeSubordinateBackend(backend);    }    if (!subordinateBackends.isEmpty()) {      if (!DirectoryServer.getInstance().isShuttingDown()) {        errors.add(WARN_DEREGISTER_BASEDN_MISSING_HIERARCHY.get(baseDN,backend.getBackendID()));      }      if (!testOnly) {        for (        Backend<?> b : subordinateBackends) {          backend.removeSubordinateBackend(b);          superiorBackend.addSubordinateBackend(b);          b.setParentBackend(superiorBackend);        }      }    }  }  return errors;}  }
class C{  public void onEvent(final DisruptorReferringEventEntry eventEntryWrap,final long sequence,final boolean endOfBatch) throws Exception {  EventEntryImpl eventEntry=eventEntryWrap.delegate;  onEvent(eventEntry,sequence,endOfBatch);}  }
class C{  private int countOfMode(boolean data){  int count=0;  for (Node p=head; p != null; ) {    if (!p.isMatched()) {      if (p.isData != data)       return 0;      if (++count == Integer.MAX_VALUE)       break;    }    Node n=p.next;    if (n != p)     p=n; else {      count=0;      p=head;    }  }  return count;}  }
class C{  public void testCertStore14() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    certS=CertStore.getInstance(dValid[i],dParams,dProv);    assertEquals("Incorrect type",certS.getType(),dValid[i]);    certS.getCertStoreParameters();  }}  }
class C{  protected final Class<?> defineClass(String className,byte[] classRep,int offset,int length) throws ClassFormatError {  throw new UnsupportedOperationException("can't load this type of class file");}  }
class C{  public static void enableLogging(RESTMockLogger logger){  RESTMockServer.logger=logger;}  }
class C{  public Set search(String tokenID,String startDN,String filter) throws SMSException, SSOException, RemoteException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::search dn: " + startDN + " filter: "+ filter);  }  return (SMSEntry.search(getToken(tokenID),startDN,filter,0,0,false,false));}  }
class C{  public EncryptedID createEncryptedID(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTEDID,elem);  if (obj == null) {    return new EncryptedIDImpl(elem);  } else {    return (EncryptedID)obj;  }}  }
class C{  public ProxySubject(NameIdentifier nameIdentifier,SubjectConfirmation subjectConfirmation) throws SAMLException {  super(nameIdentifier,subjectConfirmation);}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder(super.toString());  buf.append("[contextual:").append(isContextual());  String[] keyNames=null;  if (isContextual()) {    buf.append(", context:");    buf.append(shapingRange == null ? Range.values()[key] : shapingRange);  }  if (rangeSet == null) {    buf.append(", range(s): ");    boolean first=true;    for (int i=0; i < NUM_KEYS; ++i) {      if ((mask & (1 << i)) != 0) {        if (first) {          first=false;        } else {          buf.append(", ");        }        buf.append(Range.values()[i]);      }    }  } else {    buf.append(", range set: ").append(rangeSet);  }  buf.append(']');  return buf.toString();}  }
class C{  public final boolean pop(){  return m_values[m_index--];}  }
class C{  public static void assertColumnTypes(ResultSet rs,int[] expectedTypes) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  int actualCols=rsmd.getColumnCount();  assertEquals("Unexpected column count:",expectedTypes.length,rsmd.getColumnCount());  for (int i=0; i < actualCols; i++) {    assertEquals("Column types do not match for column " + (i + 1),expectedTypes[i],rsmd.getColumnType(i + 1));  }}  }
class C{  public boolean isValid(){  return (sc.isValid());}  }
class C{  public boolean isTagPresent(int tag){  return fieldIndex.containsKey(tag);}  }
class C{  public String createStandardServiceEngine(String domain,String defaultHost,String baseDir) throws Exception {  if (!(container instanceof Server)) {    throw new Exception("Container not Server");  }  StandardEngine engine=new StandardEngine();  engine.setDomain(domain);  engine.setName(domain);  engine.setDefaultHost(defaultHost);  Service service=new StandardService();  service.setContainer(engine);  service.setName(domain);  ((Server)container).addService(service);  return engine.getObjectName().toString();}  }
class C{  public boolean equals(Object schemaAttrType){  if (schemaAttrType instanceof Type) {    Type s=(Type)schemaAttrType;    return (s.attrType.equals(attrType));  }  return (false);}  }
class C{  public SAML2ConfigBuilder signAssertion(boolean signAssertion){  this.signAssertion=signAssertion;  return this;}  }
class C{  public void onMessage(HttpServletRequest request,HttpServletResponse response,SOAPMessage message){  FSUtils.debug.message("FSSSOAndFedService.onMessage: Called");  try {    Element elt=soapService.parseSOAPMessage(message);    if (elt == null) {      FSUtils.debug.error("FSSSOAndFedService.onMessage: " + "Error in processing. Invalid SOAPMessage");      response.setStatus(response.SC_INTERNAL_SERVER_ERROR);      returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);      return;    }    String eltTagName=(elt.getTagName().trim());    String ns=elt.getNamespaceURI().trim();    String nodeName=elt.getLocalName().trim();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSSOAndFedService.onMessage: " + "tagName: " + eltTagName + " namespaceUri: "+ ns+ " localName: "+ nodeName);    }    if (nodeName.equalsIgnoreCase("AuthnRequest") && (ns.equalsIgnoreCase(IFSConstants.libertyMessageNamespaceURI)) || (ns.equalsIgnoreCase(IFSConstants.FF_12_XML_NS))) {      SOAPMessage retMessage=null;      try {        FSAuthnRequest authnRequest=new FSAuthnRequest(elt);        String metaAlias=FSServiceUtils.getMetaAlias(request);        IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();        String realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);        String hostEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);        IDPDescriptorType hostedDesc=metaManager.getIDPDescriptor(realm,hostEntityId);        BaseConfigType hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostEntityId);        FSSessionManager sessionService=FSSessionManager.getInstance(metaAlias);        sessionService.setAuthnRequest(authnRequest.getRequestID(),authnRequest);        handleLECPRequest(request,response,authnRequest,hostedDesc,hostedConfig,realm,hostEntityId,metaAlias);        retMessage=null;      } catch (      Exception e) {        FSUtils.debug.error("FSSSOAndFedService.onMessage: " + "Error in processing lecp AuthnRequest:",e);        response.setStatus(response.SC_INTERNAL_SERVER_ERROR);        returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);        return;      }      returnSOAPMessage(retMessage,response);      return;    } else {      FSUtils.debug.error("FSSSOAndFedService.onMessage: Invalid SOAP Request:" + nodeName);    }  } catch (  Exception e) {    FSUtils.debug.error("FSSSOAndFedService.onMessage: " + "Error in processing Request: Exception occured: ",e);    response.setStatus(response.SC_INTERNAL_SERVER_ERROR);    java.io.ByteArrayOutputStream strm=new java.io.ByteArrayOutputStream();    e.printStackTrace(new java.io.PrintStream(strm));    FSUtils.debug.error(strm.toString());    returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);    return;  }  returnSOAPMessage(soapService.formSOAPError("Server","cannotProcessRequest",null),response);  return;}  }
class C{  public void modifyMemberShip(SSOToken token,Set members,String target,int type,int operation) throws AMException {  if (debug.messageEnabled()) {    debug.message("DirectoryServicesImpl.modifyMemberShip: targetDN = <" + target + ">, Members: "+ members+ ", object Type = "+ type+ ", Operation = "+ operation);  }  Iterator itr=members.iterator();  while (itr.hasNext()) {    String userDN=(String)itr.next();    if (userDN.isEmpty() || DN.valueOf(userDN).size() <= 0) {      debug.error("DirectoryServicesImpl.modifyMemberShip() " + "Invalid DN: " + userDN);      throw new AMException(token,"157");    }  }  try {switch (type) {case AMObject.ROLE:case AMObject.MANAGED_ROLE:      modifyRoleMembership(token,target,members,operation,type);    break;case AMObject.GROUP:case AMObject.STATIC_GROUP:  modifyGroupMembership(token,target,members,operation,type);break;case AMObject.ASSIGNABLE_DYNAMIC_GROUP:modifyAssignDynamicGroupMembership(token,target,members,operation,type);break;default :throw new AMException(token,"114");}} catch (AccessRightsException e) {debug.error("DirectoryServicesImpl.modMemberShip() - Insufficient " + "access rights: ",e);throw new AMException(token,"460");}catch (EntryNotFoundException e) {throw generateMemberShipException(token,target,type,e);}catch (UMSException e) {debug.message("DirectoryServicesImpl.modMemberShip() - Unable to " + "modify membership",e);throw new AMException(token,"350",e);}}  }
class C{  public void testConstructorBytesNegative3(){  byte aBytes[]={-128,-12,56,100};  byte rBytes[]={-128,-12,56,100};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  @NonNull public static Interpolator cycle(int cycles){  return new CycleInterpolator(cycles);}  }
class C{  public boolean includeAttribute(AttributeType attributeType){  if (!excludeAttributes.isEmpty() && excludeAttributes.contains(attributeType)) {    return false;  }  if ((excludeAllOpAttrs && attributeType.isOperational()) || (excludeAllUserAttrs && !attributeType.isOperational())) {    return false;  }  if ((includeAllUserAttrs && !attributeType.isOperational()) || (includeAllOpAttrs && attributeType.isOperational())) {    return true;  }  if (!includeAttributes.isEmpty()) {    return includeAttributes.contains(attributeType);  } else   if ((includeAllUserAttrs && attributeType.isOperational()) || (includeAllOpAttrs && !attributeType.isOperational())) {    return false;  }  return true;}  }
class C{  public StoreDescription findDescription(String id){  if (log.isDebugEnabled())   log.debug("search descriptor " + id);  StoreDescription desc=descriptors.get(id);  if (desc == null) {    Class<?> aClass=null;    try {      aClass=Class.forName(id,true,this.getClass().getClassLoader());    } catch (    ClassNotFoundException e) {      log.error("ClassName:" + id,e);    }    if (aClass != null) {      desc=descriptors.get(aClass.getName());      for (int i=0; desc == null && i < interfaces.length; i++) {        if (interfaces[i].isAssignableFrom(aClass)) {          desc=descriptors.get(interfaces[i].getName());        }      }    }  }  if (log.isDebugEnabled())   if (desc != null)   log.debug("find descriptor " + id + "#"+ desc.getTag()+ "#"+ desc.getStoreFactoryClass()); else   log.debug(("Can't find descriptor for key " + id));  return desc;}  }
class C{  @SuppressWarnings("unchecked") public Object clone(){  try {    HashSet<E> newSet=(HashSet<E>)super.clone();    newSet.map=(HashMap<E,Object>)map.clone();    return newSet;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodElement createAgreementMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodElementImpl();}  }
class C{  public FileWriter(File file,boolean append) throws IOException {  super(new FileOutputStream(file,append));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  NamedNodeMap attrList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributes();  attrNode=addrAttr.item(0);  attrList=attrNode.getAttributes();  assertNull("nodeAttributeNodeAttributeAssert1",attrList);}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public static void validateNull(String name,Object object){  if (object == null) {    throw new IllegalStateException(name.concat(" cannot be null"));  }}  }
class C{  public String nextToken(){  if (currentPosition >= maxPosition) {    throw new NoSuchElementException();  }  int start=currentPosition;  while ((currentPosition < maxPosition) && Character.isLetterOrDigit(str.charAt(currentPosition))) {    currentPosition++;  }  if ((start == currentPosition) && (!Character.isLetterOrDigit(str.charAt(currentPosition)))) {    currentPosition++;  }  return str.substring(start,currentPosition);}  }
class C{  private int monthLength(int month,int year){  return isLeapYear(year) ? LEAP_MONTH_LENGTH[month] : MONTH_LENGTH[month];}  }
