class C{  void paintBackground(SeaGlassContext context,Graphics g,JComponent c){  if (((AbstractButton)c).isContentAreaFilled()) {    context.getPainter().paintButtonBackground(context,g,0,0,c.getWidth(),c.getHeight());  }}  }
class C{  private void initializeJMSConnection(Hashtable<String,String> envVars,String destinationName,String connectionFactoryName,ClassLoader driverClassLoader){  if (jmsProvider == null) {    LOG.trace("JMS provider is not set when trying to initialize JMS connection.");    if (destinationName == null) {      throw new IllegalStateException("Could not have null JMSProvider for JMS Source. " + "Please set the right JMSProvider");    } else {      LOG.trace("Using JNDI default JMS provider for destination: {}",destinationName);      if (driverClassLoader != null) {        Thread.currentThread().setContextClassLoader(driverClassLoader);      }      jmsProvider=new JndiBasedJmsProvider(envVars,destinationName,connectionFactoryName);    }  }  ConnectionFactory connectionFactory=jmsProvider.getConnectionFactory();  try {    connection=connectionFactory.createConnection();    session=connection.createSession(false,jmsAcknowledgeMode);    Destination destination=jmsProvider.getDestination();    consumer=session.createConsumer(destination);    connection.start();  } catch (  JMSException ex) {    if (session != null) {      try {        session.close();      } catch (      JMSException ex1) {        LOG.warn("Exception when closing session",ex1);      }    }    if (connection != null) {      try {        connection.close();      } catch (      JMSException ex2) {        LOG.warn("Exception when closing connection",ex2);      }    }    throw new RuntimeException("JMSException thrown when trying to initialize connection",ex);  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void verifyVdcId(String shortVdcId){  if (StringUtils.isNotBlank(shortVdcId) && (VdcUtil.getVdcUrn(shortVdcId) == null)) {    throw APIException.badRequests.badVdcId(shortVdcId);  }}  }
class C{  private static DeleteDisksResponse checkDeleteDisksResponse(DeleteDisksResponse deleteDisksResponse) throws RpcException {  logger.info("Checking {}",deleteDisksResponse);switch (deleteDisksResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(deleteDisksResponse.getError());default :throw new RpcException(String.format("Unknown response: %s",deleteDisksResponse.getResult()));}return deleteDisksResponse;}  }
class C{  public RevealOutputGraph bool2(int k){  int[][] parents=new int[ngenes][];  int[][] lags=new int[ngenes][];  int[] f=new int[ngenes];  int numberTotalInputs=1;  for (int i=0; i < ngenes; i++) {    numberTotalInputs*=2;  }  int numberInputCombinations=1;  for (int i=0; i < k; i++) {    numberInputCombinations*=2;  }  double theta0=1.0 / (2.0 * numberInputCombinations * numberInputCombinations);  double theta=theta0;  System.out.println("Theta = " + theta);  int numberBooleanFunctions=1;  for (int i=0; i < numberInputCombinations; i++) {    numberBooleanFunctions*=2;  }  System.out.println("nrows = " + numberInputCombinations + " number functions = "+ numberBooleanFunctions);  for (int gchild=0; gchild < ngenes; gchild++) {    System.out.println("Child gene " + gchild);    TH:     for (int m=1; m <= 20; m++) {      theta=theta0 * m;      System.out.println("Theta = " + theta);      int count=0;      int[] pars=new int[k];      pars[0]=-1;      pars[1]=-1;      pars[2]=-1;      for (int input=0; input < numberTotalInputs; input++) {        byte[] inputs=booleanRepresentation(input,ngenes);        if (sumBits(inputs) == k) {          int j=0;          for (int i=0; i < ngenes; i++) {            if (inputs[i] == 1) {              pars[j]=i;              j++;            }          }        } else {          continue;        }        for (int function=0; function < numberBooleanFunctions; function++) {          byte[] fi=booleanRepresentation(function,numberInputCombinations);          int mismatch=0;          for (int j=0; j < ntimes - 1; j++) {            int argument=0;            int power=1;            for (int i=0; i < k; i++) {              argument+=power * cases[j][pars[k - i - 1]];              power*=2;            }            int finput=fi[argument];            if (finput != cases[j + 1][gchild]) {              mismatch++;            }          }          if (mismatch < theta * ntimes) {            System.out.println("update parents");            parents[gchild]=new int[k];            lags[gchild]=new int[k];            f[gchild]=function;            for (int i=0; i < k; i++) {              parents[gchild][i]=pars[i];              lags[gchild][i]=1;            }            count=1;            break TH;          }        }      }      if (count != 1) {        System.out.println("Regulators not identified count = " + count);        parents[gchild]=new int[0];        lags[gchild]=new int[0];      } else {        System.out.println("Regulators are:  ");        for (int i=0; i < parents[gchild].length; i++) {          System.out.println("  i = " + i + " par = "+ parents[gchild][i]);        }      }    }    System.out.println("regulators are:  ");    for (int i=0; i < parents[gchild].length; i++) {      System.out.println("  i = " + i + " par = "+ parents[gchild][i]);    }  }  System.out.println("Returning");  return null;}  }
class C{  public static NewPlaylistFragment newInstance(Album album){  NewPlaylistFragment fragment=new NewPlaylistFragment();  Bundle bundle=new Bundle();  bundle.putParcelable(KEY_ALBUM,album);  fragment.setArguments(bundle);  return fragment;}  }
class C{  public void sort(){  throwIfImmutable();  if (!sorted) {    Arrays.sort(values,0,size);    sorted=true;  }}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public DCertificatePolicies(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DCertificatePolicies.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public ParameterHistory(Parameter c){  super(c);  if (c.getParameterSet() != null) {    setParameterSetObjKey(c.getParameterSet().getKey());  }  if (c.getParameterDefinition() != null) {    setParameterDefinitionObjKey(c.getParameterDefinition().getKey());  }}  }
class C{  public String toString(Tag[] tags){  if (tags.length == 0) {    return null;  }  String result="\n<DT><B>" + HEADER + "</B><DD>";  result+="<table cellpadding=2 cellspacing=0><tr><td bgcolor=\"#BBFFFF\">";  for (int i=0; i < tags.length; i++) {    if (i > 0) {      result+=", ";    }    result+=umpleLinkText(tags[i].text());  }  return result + "</td></tr></table></DD>\n";}  }
class C{  public synchronized void flush(){  if (!isClosed()) {    thisBufferValid=false;    historyBuffer.makeSilence();  }}  }
class C{  public void unsetToken(String name){  tokenValues.remove(name);}  }
class C{  public void endCDATA() throws SAXException {  m_handler.endCDATA();}  }
class C{  public ElementCreatorImpl orderAndWhitelistAttributes(AttributeKey<?>... attributeKeys){  for (  AttributeKey<?> attributeKey : attributeKeys) {    addAttribute(attributeKey);  }  return whitelistAttributes(attributeKeys);}  }
class C{  @Override public void configureSlider(int componentIndex,JSlider slider){  if (slider.getClientProperty("colorSliderModel") != null) {    ((DefaultColorSliderModel)slider.getClientProperty("colorSliderModel")).unconfigureSlider(slider);  }  if (!(slider.getUI() instanceof ColorSliderUI)) {    slider.setUI((ColorSliderUI)ColorSliderUI.createUI(slider));  }  slider.setModel(getBoundedRangeModel(componentIndex));  slider.putClientProperty("colorSliderModel",this);  slider.putClientProperty("colorComponentIndex",componentIndex);  addColorSlider(slider);}  }
class C{  public static String null2Str(String s){  return null2Str(s,"");}  }
class C{  public Stop(int stopIdx,TransitLayer transitLayer){  this(stopIdx,transitLayer,false,false);}  }
class C{  public static Pair<Integer,Integer> parseAudioSpecificConfig(byte[] audioSpecificConfig){  int audioObjectType=(audioSpecificConfig[0] >> 3) & 0x1F;  int byteOffset=audioObjectType == 5 || audioObjectType == 29 ? 1 : 0;  int frequencyIndex=(audioSpecificConfig[byteOffset] & 0x7) << 1 | ((audioSpecificConfig[byteOffset + 1] >> 7) & 0x1);  Assertions.checkState(frequencyIndex < 13);  int sampleRate=AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[frequencyIndex];  int channelCount=(audioSpecificConfig[byteOffset + 1] >> 3) & 0xF;  return Pair.create(sampleRate,channelCount);}  }
class C{  public void postItem(String token) throws IOException {  HttpURLConnection connection=(HttpURLConnection)(new URL(ITEMS_FEED)).openConnection();  connection.setDoInput(true);  connection.setDoOutput(true);  connection.setRequestMethod("POST");  connection.setRequestProperty("Content-Type","application/atom+xml");  connection.setRequestProperty("Authorization","GoogleLogin auth=" + token);  OutputStream outputStream=connection.getOutputStream();  outputStream.write(DATA_ITEM.getBytes());  outputStream.close();  int responseCode=connection.getResponseCode();  InputStream inputStream;  if (responseCode == HttpURLConnection.HTTP_CREATED) {    inputStream=connection.getInputStream();  } else {    inputStream=connection.getErrorStream();  }  System.out.println(toString(inputStream));}  }
class C{  public boolean remove(Object o){  if (o == null) {    for (int index=0; index < size; index++)     if (elementData[index] == null) {      fastRemove(index);      return true;    }  } else {    for (int index=0; index < size; index++)     if (o.equals(elementData[index])) {      fastRemove(index);      return true;    }  }  return false;}  }
class C{  public Pid(Integer localId){  this(localId,null);}  }
class C{  public void testBug17099() throws Exception {  PreparedStatement pStmt=this.conn.prepareStatement("SELECT 1",Statement.RETURN_GENERATED_KEYS);  assertNotNull(pStmt.getGeneratedKeys());  if (versionMeetsMinimum(4,1)) {    pStmt=((com.mysql.jdbc.Connection)this.conn).clientPrepareStatement("SELECT 1",Statement.RETURN_GENERATED_KEYS);    assertNotNull(pStmt.getGeneratedKeys());  }}  }
class C{  public void testGetApplicationContext() throws MalformedURLException {  System.out.println("getApplicationContext");  URL url=new URL("http://www.example.org/myapp/Login.jsf?test=1234");  String expResult="/myapp/";  String result=HTTPMatcher.getApplicationContext(url);  assertEquals(expResult,result);  System.out.println("getApplicationContext");  URL url2=new URL("http://www.example.org/");  String expResult2="";  String result2=HTTPMatcher.getApplicationContext(url2);  assertEquals(expResult2,result2);  URL url3=new URL("http://www.example.org/myapp/test/test.jsf");  String expResult3="/myapp/";  String result3=HTTPMatcher.getApplicationContext(url3);  assertEquals(expResult3,result3);}  }
class C{  public WineDistribution(String shortCodeName){  this(OperatingSystem.fetchCurrentOperationSystem(),Architecture.fromWinePackageName(shortCodeName.split("-")[1]),shortCodeName.split("-")[0]);}  }
class C{  public IndexResponse writeSource(String indexName,XContentBuilder json,String id,String typeName,long version,VersionType versionType){  IndexResponse r=elasticsearchClient.prepareIndex(indexName,typeName,id).setSource(json).setVersion(version).setVersionType(versionType).execute().actionGet();  return r;}  }
class C{  public boolean accept(List<Node> currentResults,Node node,int index){  int totalSelectors=selectorsCount();  for (int i=0; i < totalSelectors; i++) {    Selector selector=getSelector(i);switch (selector.getType()) {case PSEUDO_FUNCTION:      if (!((PseudoFunctionSelector)selector).accept(currentResults,node,index)) {        return false;      }    break;case PSEUDO_CLASS:  if (!((PseudoClassSelector)selector).accept(currentResults,node,index)) {    return false;  }break;default :}}return true;}  }
class C{  public char nextUnicodeToken(final boolean keepReturns){  int first, second=0;  first=nextToken();  if (this.hasMoreTokens()) {    second=nextToken();    int combined=((first << 8) + second);    if (combined == 13 && keepReturns) {      return (char)combined;    }  }  if (first == 13 && keepReturns && this.hasMoreTokens()) {    first=nextToken();  }  if (this.hasMoreTokens()) {    if (second == 13 && keepReturns && this.hasMoreTokens()) {      second=nextToken();    }  }  return (char)((first << 8) + second);}  }
class C{  public static boolean findVacantCell(int[] vacant,int spanX,int spanY,int xCount,int yCount,boolean[][] occupied){  for (int y=0; (y + spanY) <= yCount; y++) {    for (int x=0; (x + spanX) <= xCount; x++) {      boolean available=!occupied[x][y];      out:       for (int i=x; i < x + spanX; i++) {        for (int j=y; j < y + spanY; j++) {          available=available && !occupied[i][j];          if (!available)           break out;        }      }      if (available) {        vacant[0]=x;        vacant[1]=y;        return true;      }    }  }  return false;}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  int[] parents=new int[z.size()];  for (int j=0; j < parents.length; j++) {    parents[j]=covMatrix.getVariables().indexOf(z.get(j));  }  int i=covMatrix.getVariables().indexOf(x);  TetradMatrix matrix2D=covMatrix.getMatrix();  double variance=matrix2D.get(i,i);  if (parents.length > 0) {    TetradMatrix Czz=matrix2D.getSelection(parents,parents);    TetradMatrix inverse;    try {      inverse=Czz.inverse();    } catch (    Exception e) {      return true;    }    TetradVector Cyz=matrix2D.getColumn(i);    Cyz=Cyz.viewSelection(parents);    TetradVector b=inverse.times(Cyz);    variance-=Cyz.dotProduct(b);  }  return variance < 1e-20;}  }
class C{  public boolean hasMetadata(){  return fieldSetFlags()[22];}  }
class C{  private void calculateUnknownInformation() throws IOException {  for (int publicSystemNumber=0; publicSystemNumber < roots.length; publicSystemNumber++)   for (  Route route : routes[publicSystemNumber].values())   for (  Trip trip : route.getTrips().values())   for (  Entry<Integer,StopTime> stopTime : trip.getStopTimes().entrySet())   if (stops[publicSystemNumber].get(stopTime.getValue().getStopId()).getRouteType() == null)   stops[publicSystemNumber].get(stopTime.getValue().getStopId()).setRouteType(route.getRouteType());  for (byte publicSystemNumber=0; publicSystemNumber < roots.length; publicSystemNumber++) {    RoutesPathsGenerator routesPathsGenerator=new RoutesPathsGenerator(network,roots[publicSystemNumber],modes[publicSystemNumber],routes[publicSystemNumber],stops[publicSystemNumber]);    routesPathsGenerator.run();    splitStopLinks(publicSystemNumber);    new NetworkWriter(network).write(RoutesPathsGenerator.NEW_NETWORK_FOLDER + "nTemp.xml");    Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());    (new MatsimNetworkReader(scenario.getNetwork())).readFile(RoutesPathsGenerator.NEW_NETWORK_FOLDER + "nTemp.xml");    network=scenario.getNetwork();  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getCovMatrix() == null) {    throw new NullPointerException();  }}  }
class C{  void pushStringEntry(String qName,Attributes attributes,String key,String value){  if (!pushIfIgnored(qName,attributes)) {    currentContainer=new StringEntry(qName,currentContainer,key,value);  }}  }
class C{  public String bucketName(){  return bucketName;}  }
class C{  private Shape[] createHorizontalBlock(double x0,double width,double y0,double y1,boolean inverted){  Shape[] result=new Shape[6];  Point2D p00=new Point2D.Double(y0,x0);  Point2D p01=new Point2D.Double(y0,x0 + width);  Point2D p02=new Point2D.Double(p01.getX() + getXOffset(),p01.getY() - getYOffset());  Point2D p03=new Point2D.Double(p00.getX() + getXOffset(),p00.getY() - getYOffset());  Point2D p0=new Point2D.Double(y1,x0);  Point2D p1=new Point2D.Double(y1,x0 + width);  Point2D p2=new Point2D.Double(p1.getX() + getXOffset(),p1.getY() - getYOffset());  Point2D p3=new Point2D.Double(p0.getX() + getXOffset(),p0.getY() - getYOffset());  GeneralPath bottom=new GeneralPath();  bottom.moveTo((float)p1.getX(),(float)p1.getY());  bottom.lineTo((float)p01.getX(),(float)p01.getY());  bottom.lineTo((float)p02.getX(),(float)p02.getY());  bottom.lineTo((float)p2.getX(),(float)p2.getY());  bottom.closePath();  GeneralPath top=new GeneralPath();  top.moveTo((float)p0.getX(),(float)p0.getY());  top.lineTo((float)p00.getX(),(float)p00.getY());  top.lineTo((float)p03.getX(),(float)p03.getY());  top.lineTo((float)p3.getX(),(float)p3.getY());  top.closePath();  GeneralPath back=new GeneralPath();  back.moveTo((float)p2.getX(),(float)p2.getY());  back.lineTo((float)p02.getX(),(float)p02.getY());  back.lineTo((float)p03.getX(),(float)p03.getY());  back.lineTo((float)p3.getX(),(float)p3.getY());  back.closePath();  GeneralPath front=new GeneralPath();  front.moveTo((float)p0.getX(),(float)p0.getY());  front.lineTo((float)p1.getX(),(float)p1.getY());  front.lineTo((float)p01.getX(),(float)p01.getY());  front.lineTo((float)p00.getX(),(float)p00.getY());  front.closePath();  GeneralPath left=new GeneralPath();  left.moveTo((float)p0.getX(),(float)p0.getY());  left.lineTo((float)p1.getX(),(float)p1.getY());  left.lineTo((float)p2.getX(),(float)p2.getY());  left.lineTo((float)p3.getX(),(float)p3.getY());  left.closePath();  GeneralPath right=new GeneralPath();  right.moveTo((float)p00.getX(),(float)p00.getY());  right.lineTo((float)p01.getX(),(float)p01.getY());  right.lineTo((float)p02.getX(),(float)p02.getY());  right.lineTo((float)p03.getX(),(float)p03.getY());  right.closePath();  result[0]=bottom;  result[1]=back;  if (inverted) {    result[2]=right;    result[3]=left;  } else {    result[2]=left;    result[3]=right;  }  result[4]=top;  result[5]=front;  return result;}  }
class C{  public void init() throws ServletException {}  }
class C{  public void removeDocument(Query query){  removeDocuments(Arrays.asList(new Query[]{query}));}  }
class C{  public void printDialogTable(){  if (isLoggingEnabled()) {    getStackLogger().logDebug("dialog table  = " + this.dialogTable);    System.out.println("dialog table = " + this.dialogTable);  }}  }
class C{  private static <T extends Comparable<T>>void testLess(final String msg,final T[] a,final T[] b,final boolean checkHash){  for (int i=0; i < a.length; i++) {    final T ai=a[i];    for (int j=0; j < b.length; j++) {      final T bj=b[j];      final String m=msg + ": " + i+ ":"+ j+ " : "+ ai+ " : "+ bj;      Assert.assertTrue(m,ai.compareTo(bj) < 0);      Assert.assertTrue(m,bj.compareTo(ai) > 0);      Assert.assertFalse(m,ai.equals(bj));      Assert.assertFalse(m,bj.equals(ai));      if (checkHash) {        Assert.assertFalse(m,ai.hashCode() == bj.hashCode());      }    }  }}  }
class C{  void clearGeneratedSequences(){  gralComponents=new SequenceCollection(this.gralSeeds);}  }
class C{  public HexagonalGridLayout(final double hSpacing,final double vSpacing,final int numColumns){  this.hSpacing=hSpacing;  this.vSpacing=vSpacing;  this.numColumns=numColumns;}  }
class C{  public static String generateMD5(final byte[] message){  return hashString(message,"MD5");}  }
class C{  private void loadFromFileResources() throws IOException, FileNotFoundException {  FileInputStream configFileInputStream=null;  URL configFileUrl=getClass().getClassLoader().getResource(filename);  if (configFileUrl == null) {    throw new FileNotFoundException(filename + " is not exist.");  }  configFileInputStream=new FileInputStream(configFileUrl.getFile());  try {    prop.load(configFileInputStream);  }  finally {    IOUtils.closeQuite(configFileInputStream);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMayor(zone);}  }
class C{  public synchronized void startTest() throws RemoteException {  startTestNotified=true;  this.notifyAll();}  }
class C{  public void commitChanges(){  if (isCreationDialog) {    connectionPanel.commitChanges(synapseGroup);    ((EditablePanel)tabSummaryInfo).commitChanges();    ((EditablePanel)editSynapsesPanel).commitChanges();    adjustmentPanel.commitChanges();    synapseGroup.makeConnections();    networkPanel.getNetwork().addGroup(synapseGroup);    networkPanel.repaint();  } else {    synapseGroup.setUseGroupLevelSettings(setUseGroupLevelSettings);  }}  }
class C{  public boolean isA_Transfer_Balance_IS(){  Object oo=get_Value(COLUMNNAME_A_Transfer_Balance_IS);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder audio(InputFile audio){  assert audio != null;  this.audio=audio;  return this;}  }
class C{  public void perform(List<Action<Void>> actions,long timeBoundInMillis){  List<TimeBoundedThread<Void>> tasks=createTimeBoundedThreads(actions);  try {    _executerService.invokeAll(tasks,timeBoundInMillis,TimeUnit.MILLISECONDS);  } catch (  Throwable thrown) {    _logger.error(String.format("Got unexpected error while performing the following actions: %s",actions),thrown);  }}  }
class C{  @Override public void onBlockAdded(World worldIn,BlockPos pos,IBlockState state){  super.onBlockAdded(worldIn,pos,state);  IMOTileEntity tileEntity=(IMOTileEntity)worldIn.getTileEntity(pos);  if (tileEntity != null) {    tileEntity.onAdded(worldIn,pos,state);  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ExampleSet)) {    return false;  }  ExampleSet es=(ExampleSet)o;  return getAttributes().equals(es.getAttributes());}  }
class C{  private final boolean checkHitSpace(){  if (this.readHitCache == null)   return false;  if (this.hitLimit > 0 && this.readHitCache.size() >= this.hitLimit)   return false;  long available=MemoryControl.available();  if (MemoryControl.shortStatus() || available - 2 * 1024 * 1024 < this.readHitCache.memoryNeededForGrow()) {    this.readHitCache.clear();  }  available=MemoryControl.available();  return (available - 2 * 1024 * 1024 > this.readHitCache.memoryNeededForGrow());}  }
class C{  public void refactor(final TextEditor textEditorPresenter){  if (!(textEditorPresenter instanceof HasLinkedMode)) {    return;  }  if (isActiveLinkedEditor) {    createRenameSession();  } else {    textEditor=textEditorPresenter;    createLinkedRenameSession();  }  isActiveLinkedEditor=!isActiveLinkedEditor;  linkedEditor=(HasLinkedMode)textEditorPresenter;  textEditorPresenter.setFocus();}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void addSubjectUpdatedListener(SubjectUpdatedListener listener){synchronized (subjectUpdatedListeners) {    if (!subjectUpdatedListeners.contains(listener)) {      subjectUpdatedListeners.add(listener);    }  }}  }
class C{  public static SendableTextMessageBuilder builder(){  return new SendableTextMessageBuilder();}  }
class C{  public Builder acl(StreamAcl acl){  aclBuilder=(acl != null) ? acl.toBuilder() : null;  return this;}  }
class C{  public boolean isBold(){  return bold;}  }
class C{  public Class toClass(CtClass ct,ClassLoader loader) throws CannotCompileException {  return toClass(ct,loader,null);}  }
class C{  public Aspect findAspectById(final Aspect aspect) throws PersistentModelException {  Aspect instance=m_aspectHome.findById(aspect);  if (null == instance)   throw new PersistentModelException("Aspect not found for Id: " + aspect.getId());  return instance;}  }
class C{  public void updateWeights(NeuralNode node,double learn,double momentum){  NeuralConnection[] inputs=node.getInputs();  double[] cWeights=node.getChangeInWeights();  double[] weights=node.getWeights();  double learnTimesError=0;  learnTimesError=learn * node.errorValue(false);  double c=learnTimesError + momentum * cWeights[0];  weights[0]+=c;  cWeights[0]=c;  int stopValue=node.getNumInputs() + 1;  for (int noa=1; noa < stopValue; noa++) {    c=learnTimesError * inputs[noa - 1].outputValue(false);    c+=momentum * cWeights[noa];    weights[noa]+=c;    cWeights[noa]=c;  }}  }
class C{  private File download(URL url) throws IOException {  Preconditions.checkNotNull(url);  String filename=org.gbif.ipt.utils.FileUtils.getSuffixedFileName(url.toString(),EXTENSION_FILE_SUFFIX);  File tmpFile=dataDir.tmpFile(filename);  StatusLine statusLine=downloader.download(url,tmpFile);  if (success(statusLine)) {    log.info("Successfully downloaded extension: " + url.toString());    return tmpFile;  } else {    String msg="Failed to download extension: " + url.toString() + ". Response="+ String.valueOf(statusLine.getStatusCode());    log.error(msg);    throw new IOException(msg);  }}  }
class C{  public T caseGetterDeclaration(GetterDeclaration object){  return null;}  }
class C{  public static void main(String list[]) throws Exception {  List<String> values=new ArrayList<String>();  for (  String argument : list) {    if (argument != null && argument.trim().length() > 0) {      values.add(argument.trim());    }  }  if (values.size() == 0) {    throw new FileNotFoundException("File needs to be specified as an argument");  }  Formatter formatter=new Formatter();  File file=new File(values.get(0));  String source=formatter.read(file);  if (values.size() == 1) {    formatter.format(source,new OutputStreamWriter(System.out));  } else   if (values.size() == 2) {    formatter.format(source,new OutputStreamWriter(new FileOutputStream(new File(values.get(1)))));  } else {    StringBuilder builder=new StringBuilder();    for (    String value : values) {      builder.append("'").append(value).append("'");    }    throw new IllegalArgumentException("At most two arguments can be specified, you specified " + builder);  }}  }
class C{  public static Object[][] like2DArray(final Class<?>... clazz){  final int totalItems=clazz.length;  final Object[][] objects=new Object[totalItems][1];  for (int i=0; i < totalItems; i++) {    objects[i][0]=clazz[i];  }  return objects;}  }
class C{  public void removeIgnored(){  _fields=_removeIgnored(_fields);  _getters=_removeIgnored(_getters);  _setters=_removeIgnored(_setters);  _ctorParameters=_removeIgnored(_ctorParameters);}  }
class C{  private void printDescriptors(PrintStream out,String s,String template,int tokenStart){  String indent="";  for (int i=tokenStart; i >= 0; i--) {    if (template.charAt(i) == '\n') {      char[] chars=new char[tokenStart - i];      for (int j=0; j < chars.length; j++) {        chars[j]=' ';      }      indent=new String(chars);      break;    }  }  int i=0;  while (i < s.length()) {    int nlIndex=s.indexOf('\n',i);    out.print(s.substring(i,nlIndex + 1));    out.print(indent);    i=nlIndex + 1;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void computeGlyphLogicalBounds(){  Shape[] tempLogicalBounds=new Shape[getNumGlyphs()];  boolean[] rotated=new boolean[getNumGlyphs()];  double maxWidth=-1;  double maxHeight=-1;  for (int i=0; i < getNumGlyphs(); i++) {    if (!glyphVisible[i]) {      tempLogicalBounds[i]=null;      continue;    }    AffineTransform glyphTransform=getGlyphTransform(i);    GVTGlyphMetrics glyphMetrics=getGlyphMetrics(i);    float glyphX=0;    float glyphY=-ascent / scaleFactor;    float glyphWidth=(glyphMetrics.getHorizontalAdvance() / scaleFactor);    float glyphHeight=(glyphMetrics.getVerticalAdvance() / scaleFactor);    Rectangle2D glyphBounds=new Rectangle2D.Double(glyphX,glyphY,glyphWidth,glyphHeight);    if (glyphBounds.isEmpty()) {      if (i > 0) {        rotated[i]=rotated[i - 1];      } else {        rotated[i]=true;      }    } else {      Point2D p1=new Point2D.Double(glyphBounds.getMinX(),glyphBounds.getMinY());      Point2D p2=new Point2D.Double(glyphBounds.getMaxX(),glyphBounds.getMinY());      Point2D p3=new Point2D.Double(glyphBounds.getMinX(),glyphBounds.getMaxY());      Point2D gpos=getGlyphPosition(i);      AffineTransform tr=AffineTransform.getTranslateInstance(gpos.getX(),gpos.getY());      if (glyphTransform != null)       tr.concatenate(glyphTransform);      tr.scale(scaleFactor,scaleFactor);      tempLogicalBounds[i]=tr.createTransformedShape(glyphBounds);      Point2D tp1=new Point2D.Double();      Point2D tp2=new Point2D.Double();      Point2D tp3=new Point2D.Double();      tr.transform(p1,tp1);      tr.transform(p2,tp2);      tr.transform(p3,tp3);      double tdx12=tp1.getX() - tp2.getX();      double tdx13=tp1.getX() - tp3.getX();      double tdy12=tp1.getY() - tp2.getY();      double tdy13=tp1.getY() - tp3.getY();      if (((Math.abs(tdx12) < 0.001) && (Math.abs(tdy13) < 0.001)) || ((Math.abs(tdx13) < 0.001) && (Math.abs(tdy12) < 0.001))) {        rotated[i]=false;      } else {        rotated[i]=true;      }      Rectangle2D rectBounds;      rectBounds=tempLogicalBounds[i].getBounds2D();      if (rectBounds.getWidth() > maxWidth)       maxWidth=rectBounds.getWidth();      if (rectBounds.getHeight() > maxHeight)       maxHeight=rectBounds.getHeight();    }  }  GeneralPath logicalBoundsPath=new GeneralPath();  for (int i=0; i < getNumGlyphs(); i++) {    if (tempLogicalBounds[i] != null) {      logicalBoundsPath.append(tempLogicalBounds[i],false);    }  }  logicalBounds=logicalBoundsPath.getBounds2D();  if (logicalBounds.getHeight() < maxHeight * 1.5) {    for (int i=0; i < getNumGlyphs(); i++) {      if (rotated[i])       continue;      if (tempLogicalBounds[i] == null)       continue;      Rectangle2D glyphBounds=tempLogicalBounds[i].getBounds2D();      double x=glyphBounds.getMinX();      double width=glyphBounds.getWidth();      if ((i < getNumGlyphs() - 1) && (tempLogicalBounds[i + 1] != null)) {        Rectangle2D ngb=tempLogicalBounds[i + 1].getBounds2D();        if (ngb.getX() > x) {          double nw=ngb.getX() - x;          if ((nw < width * 1.15) && (nw > width * .85)) {            double delta=(nw - width) * .5;            width+=delta;            ngb.setRect(ngb.getX() - delta,ngb.getY(),ngb.getWidth() + delta,ngb.getHeight());          }        }      }      tempLogicalBounds[i]=new Rectangle2D.Double(x,logicalBounds.getMinY(),width,logicalBounds.getHeight());    }  } else   if (logicalBounds.getWidth() < maxWidth * 1.5) {    for (int i=0; i < getNumGlyphs(); i++) {      if (rotated[i])       continue;      if (tempLogicalBounds[i] == null)       continue;      Rectangle2D glyphBounds=tempLogicalBounds[i].getBounds2D();      double y=glyphBounds.getMinY();      double height=glyphBounds.getHeight();      if ((i < getNumGlyphs() - 1) && (tempLogicalBounds[i + 1] != null)) {        Rectangle2D ngb=tempLogicalBounds[i + 1].getBounds2D();        if (ngb.getY() > y) {          double nh=ngb.getY() - y;          if ((nh < height * 1.15) && (nh > height * .85)) {            double delta=(nh - height) * .5;            height+=delta;            ngb.setRect(ngb.getX(),ngb.getY() - delta,ngb.getWidth(),ngb.getHeight() + delta);          }        }      }      tempLogicalBounds[i]=new Rectangle2D.Double(logicalBounds.getMinX(),y,logicalBounds.getWidth(),height);    }  }  System.arraycopy(tempLogicalBounds,0,glyphLogicalBounds,0,getNumGlyphs());}  }
class C{  @Override public void visitLabel(Label label){  super.visitLabel(label);  if (!exceptionHandlers.contains(label)) {    mv.visitMethodInsn(INVOKESTATIC,VM_FQ,"BB_BEGIN",V_V);    return;  }  stack.pushInt(access);  stack.pushStrings(className,methName,methDescription);  mv.visitMethodInsn(INVOKESTATIC,VM_FQ,"HANDLER_BEGIN",IGGG_V);}  }
class C{  public AffineTransform tx(){  return lastTrans;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("TemperatureTableServlet");  targetClass=bpe.location().declaringType();  if (!vm().canGetSourceDebugExtension()) {    failure("FAIL: canGetSourceDebugExtension() is false");  } else {    println("canGetSourceDebugExtension() is true");  }  checkLocation(bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("JSP",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("bogus",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation(null,bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("Java",bpe.location(),"main BP","TemperatureTableServlet.java","TemperatureTableServlet.java",11);  String sourceName=targetClass.sourceName();  if (sourceName.equals("TemperatureTable.jsp")) {    println("ref type sourceName: " + sourceName);  } else {    failure("FAIL: unexpected ref type sourceName - " + sourceName);  }  List allLines=targetClass.allLineLocations();  for (Iterator it=allLines.iterator(); it.hasNext(); ) {    Location loc=(Location)it.next();    println("Location: " + loc);  }  List locs=targetClass.locationsOfLine(7);  if (locs.size() != 1) {    failure("FAIL: expect on elocation, got " + locs.size());  }  Location loc7=(Location)locs.get(0);  checkLocation(loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("JSP",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("bogus",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation(null,loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("Java",loc7,"line7","TemperatureTableServlet.java","TemperatureTableServlet.java",28);  List availSt=targetClass.availableStrata();  List avail=new ArrayList(availSt);  if (avail.size() == 2 && avail.remove("JSP") && avail.remove("Java") && avail.size() == 0) {    println("availableStrata: " + availSt);  } else {    failure("FAIL: unexpected availableStrata - " + availSt);  }  String def=targetClass.defaultStratum();  if (def.equals("JSP")) {    println("defaultStratum: " + def);  } else {    failure("FAIL: unexpected defaultStratum - " + def);  }  BreakpointEvent bpHello=resumeTo("HelloWorld","main","([Ljava/lang/String;)V");  Location hello=bpHello.location();  checkLocation(hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("JSP",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("bogus",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation(null,hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("Java",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  vm().setDefaultStratum("Java");  println("VM default set to Java");  checkLocation(bpe.location(),"main BP","TemperatureTableServlet.java","TemperatureTableServlet.java",11);  checkLocation("JSP",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("bogus",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation(null,bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("Java",bpe.location(),"main BP","TemperatureTableServlet.java","TemperatureTableServlet.java",11);  checkLocation(loc7,"line7","TemperatureTableServlet.java","TemperatureTableServlet.java",28);  checkLocation("JSP",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("bogus",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation(null,loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("Java",loc7,"line7","TemperatureTableServlet.java","TemperatureTableServlet.java",28);  checkLocation(hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("JSP",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("bogus",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation(null,hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("Java",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  vm().setDefaultStratum(null);  println("VM default set to null");  checkLocation(bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("JSP",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("bogus",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation(null,bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("Java",bpe.location(),"main BP","TemperatureTableServlet.java","TemperatureTableServlet.java",11);  checkLocation(loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("JSP",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("bogus",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation(null,loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("Java",loc7,"line7","TemperatureTableServlet.java","TemperatureTableServlet.java",28);  checkLocation(hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("JSP",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("bogus",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation(null,hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("Java",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  vm().setDefaultStratum("bogus");  println("VM default set to bogus");  checkLocation(bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("JSP",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("bogus",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation(null,bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("Java",bpe.location(),"main BP","TemperatureTableServlet.java","TemperatureTableServlet.java",11);  checkLocation(loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("JSP",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("bogus",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation(null,loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("Java",loc7,"line7","TemperatureTableServlet.java","TemperatureTableServlet.java",28);  checkLocation(hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("JSP",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("bogus",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation(null,hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("Java",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  vm().setDefaultStratum("JSP");  println("VM default set to JSP");  checkLocation(bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("JSP",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("bogus",bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation(null,bpe.location(),"main BP","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",1);  checkLocation("Java",bpe.location(),"main BP","TemperatureTableServlet.java","TemperatureTableServlet.java",11);  checkLocation(loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("JSP",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("bogus",loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation(null,loc7,"line7","TemperatureTable.jsp","tst" + File.separatorChar + "TemperatureTable.jsp",7);  checkLocation("Java",loc7,"line7","TemperatureTableServlet.java","TemperatureTableServlet.java",28);  checkLocation(hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("JSP",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("bogus",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation(null,hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  checkLocation("Java",hello,"hello BP","HelloWorld.java","HelloWorld.java",3);  listenUntilVMDisconnect();  if (!testFailed) {    println("TemperatureTableTest: passed");  } else {    throw new Exception("TemperatureTableTest: failed");  }}  }
class C{  protected boolean isSendBufferSizeChanged(){  return true;}  }
class C{  void remove(){  deactivateBlock();  active=false;}  }
class C{  public void disableButton(){  button.setEnabled(false);}  }
class C{  public static OMRect read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMRect rect=null;  int x1, y1, x2, y2;  double lt1, ln1, lt2, ln2;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_LATLON:    int lineType=dis.readByte();  lt1=dis.readFloat();ln1=dis.readFloat();lt2=dis.readFloat();ln2=dis.readFloat();int nsegs=dis.readInt();rect=new OMRect(lt1,ln1,lt2,ln2,lineType,nsegs);break;case RENDERTYPE_XY:x1=dis.readInt();y1=dis.readInt();x2=dis.readInt();y2=dis.readInt();rect=new OMRect(x1,y1,x2,y2);break;case RENDERTYPE_OFFSET:lt1=dis.readFloat();ln1=dis.readFloat();x1=dis.readInt();y1=dis.readInt();x2=dis.readInt();y2=dis.readInt();rect=new OMRect(lt1,ln1,x1,y1,x2,y2);break;default :}if (rect != null) {LinkProperties.loadPropertiesIntoOMGraphic(dis,rect,propertiesBuffer);}return rect;}  }
class C{  public void addDirectorySet(Context context,String path){  TinyDB tinydb=new TinyDB(context);  ArrayList<String> file=tinydb.getListString("directories");  file.add(path);  tinydb.putListString("directories",file);}  }
class C{  public static long parseXsDateTime(String value) throws ParseException {  Matcher matcher=XS_DATE_TIME_PATTERN.matcher(value);  if (!matcher.matches()) {    throw new ParseException("Invalid date/time format: " + value,0);  }  int timezoneShift;  if (matcher.group(9) == null) {    timezoneShift=0;  } else   if (matcher.group(9).equalsIgnoreCase("Z")) {    timezoneShift=0;  } else {    timezoneShift=((Integer.parseInt(matcher.group(12)) * 60 + Integer.parseInt(matcher.group(13))));    if (matcher.group(11).equals("-")) {      timezoneShift*=-1;    }  }  Calendar dateTime=new GregorianCalendar(TimeZone.getTimeZone("GMT"));  dateTime.clear();  dateTime.set(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)) - 1,Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)),Integer.parseInt(matcher.group(5)),Integer.parseInt(matcher.group(6)));  if (!TextUtils.isEmpty(matcher.group(8))) {    final BigDecimal bd=new BigDecimal("0." + matcher.group(8));    dateTime.set(Calendar.MILLISECOND,bd.movePointRight(3).intValue());  }  long time=dateTime.getTimeInMillis();  if (timezoneShift != 0) {    time-=timezoneShift * 60000;  }  return time;}  }
class C{  public String seasonSummaryStr(){  setTeamRanks();  StringBuilder sb=new StringBuilder();  sb.append(ncgSummaryStr());  sb.append("\n\n" + userTeam.seasonSummaryStr());  sb.append("\n\n" + leagueRecords.brokenRecordsStr(getYear(),userTeam.abbr));  return sb.toString();}  }
class C{  public IterationExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static int indexOf(boolean[] array,boolean value){  for (int i=0; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  private void addLine(HttpServletRequest request,PriceList pl,WebBasket wb){  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  int M_PriceList_ID=WebUtil.getParameterAsInt(request,"M_PriceList_ID");  int M_PriceList_Version_ID=WebUtil.getParameterAsInt(request,"M_PriceList_Version_ID");  wb.setM_PriceList_ID(M_PriceList_ID);  wb.setM_PriceList_Version_ID(M_PriceList_Version_ID);  int M_Product_ID=WebUtil.getParameterAsInt(request,P_Product_ID);  String Name=WebUtil.getParameter(request,"Name");  String sQuantity=WebUtil.getParameter(request,"Quantity");  String sPrice=WebUtil.getParameter(request,"Price");  Enumeration en=request.getParameterNames();  while (M_Product_ID == 0 && en.hasMoreElements()) {    String parameter=(String)en.nextElement();    if (parameter.startsWith("Add_")) {      if (WebUtil.exists(request,parameter)) {        try {          M_Product_ID=Integer.parseInt(parameter.substring(4));          log.fine("Found Parameter=" + parameter + " -> "+ M_Product_ID);          if (!WebUtil.exists(sQuantity))           sQuantity=WebUtil.getParameter(request,"Qty_" + M_Product_ID);          if (!WebUtil.exists(sPrice))           sPrice=WebUtil.getParameter(request,"Price_" + M_Product_ID);          if (!WebUtil.exists(Name))           Name=WebUtil.getParameter(request,"Name_" + M_Product_ID);          log.fine("Found Parameters " + Name + ",Qty="+ sQuantity+ ",Price="+ sPrice);        } catch (        Exception ex) {          log.warning("ParseError for " + parameter + " - "+ ex.toString());        }      }    }  }  if (M_Product_ID == 0)   return;  BigDecimal Qty=null;  try {    if (sQuantity != null && sQuantity.length() > 0)     Qty=new BigDecimal(sQuantity);  } catch (  Exception ex1) {    log.warning("(qty) - " + ex1.toString());  }  if (Qty == null)   Qty=Env.ONE;  BigDecimal Price=null;  if (M_Product_ID != 0 && pl != null) {    PriceListProduct plp=pl.getPriceListProduct(M_Product_ID);    if (plp != null) {      Price=plp.getPrice();      Name=plp.getName();      log.fine("Found in PL = " + Name + " - "+ Price);    }  }  if (Price == null && (pl == null || pl.isNotAllPrices())) {    int AD_Client_ID=Env.getContextAsInt(ctx,"AD_Client_ID");    pl=PriceList.get(ctx,AD_Client_ID,M_PriceList_ID,null,null,true);    session.setAttribute(PriceList.NAME,pl);    PriceListProduct plp=pl.getPriceListProduct(M_Product_ID);    if (plp != null) {      Price=plp.getPrice();      Name=plp.getName();      log.fine("Found in complete PL = " + Name + " - "+ Price);    }  }  if (Price != null) {    WebBasketLine wbl=wb.add(M_Product_ID,Name,Qty,Price);    log.fine(wbl.toString());  } else   log.warning("Product Price not found - M_Product_ID=" + M_Product_ID + ", Name="+ Name);}  }
class C{  public void addRootCertificate(X509Certificate[] certificateChain,PrivateKey key) throws Exception {  VMCAAdapter.AddRootCertificate(ServerName,encodeX509CertificatesToString(certificateChain),encodePrivateKeyToString(key));}  }
class C{  @Override public int compareTo(final ConsumableStatus other){  final float result=(float)other.getRegen() / (float)other.getFrecuency() - (float)getRegen() / (float)getFrecuency();  return (int)Math.signum(result);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public FrameBlock readTransformMetaDataFromPath(String spec,String metapath,String colDelim) throws IOException {  return TfMetaUtils.readTransformMetaDataFromPath(spec,metapath,colDelim);}  }
class C{  @Ignore("commented out because it needs to be verified manually") @Test public void testHistogram() throws Exception {  Set set1=new HashSet();  final Set set2=new HashSet();  Object object3=new Object();  set1.add(set2);  set2.add(object3);  System.setProperty(DistributionConfig.GEMFIRE_PREFIX + "ObjectSizer.SIZE_OF_CLASS","org.apache.geode.internal.size.SizeOfUtil0");  System.out.println(ObjectGraphSizer.histogram(set1,true));}  }
class C{  public boolean showImageText(){  return showImageText;}  }
class C{  private static void usage(){  System.out.println("Usage: java AppsForYourDomainGmailFilterClient" + " --username <username> --password <password> --domain <domain>\n" + " --destination_user <destination_user>");  System.out.println();  System.out.println("A simple application that demonstrates how to create" + " filters to a Google Apps email account. Authenticates using the" + " provided login credentials, then create sample filters to the"+ " specified destination account.");  System.out.println();  System.out.println("Specify username and destination_user as just the name," + " not email address.  For example, to create filter to joe@example.com" + " use these options:  --username joe --password your_password"+ " --domain example.com");}  }
class C{  public void destroy(){  mExitTasksEarly=true;  setPause(false);  Iterator<Entry<String,LoadImageTask>> it=(Iterator<Entry<String,LoadImageTask>>)mLoadWorkList.entrySet().iterator();  while (it.hasNext()) {    Entry<String,LoadImageTask> item=it.next();    final LoadImageTask task=item.getValue();    it.remove();    if (task != null) {      task.cancel(true);    }  }  mLoadWorkList.clear();}  }
class C{  private DoubleMatrix2D xmultOuter(DoubleMatrix1D x,DoubleMatrix1D y){  DoubleMatrix2D A=x.like2D(x.size(),y.size());  multOuter(x,y,A);  return A;}  }
class C{  @SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){  T[] array=list.toArray((T[])new Object[list.size()]);  Arrays.sort(array,comparator);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(array[i++]);  }}  }
class C{  public SQLWarning(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);  DriverManager.println("SQLWarning: reason(" + reason + ") SQLState("+ SQLState+ ")");}  }
class C{  public final DD reciprocal(){  double hc, tc, hy, ty, C, c, U, u;  C=1.0 / hi;  c=SPLIT * C;  hc=c - C;  u=SPLIT * hi;  hc=c - hc;  tc=C - hc;  hy=u - hi;  U=C * hi;  hy=u - hy;  ty=hi - hy;  u=(((hc * hy - U) + hc * ty) + tc * hy) + tc * ty;  c=((((1.0 - U) - u)) - C * lo) / hi;  double zhi=C + c;  double zlo=(C - zhi) + c;  return new DD(zhi,zlo);}  }
class C{  public void run(){  RenderedImage rdrdImage;  if (rc != null) {    rdrdImage=rdblImage.createRendering(rc);  } else {    rdrdImage=rdblImage.createDefaultRendering();  }  ColorModel colorModel=rdrdImage.getColorModel();  Raster raster=rdrdImage.getData();  SampleModel sampleModel=raster.getSampleModel();  DataBuffer dataBuffer=raster.getDataBuffer();  if (colorModel == null) {    colorModel=ColorModel.getRGBdefault();  }  int minX=raster.getMinX();  int minY=raster.getMinY();  int width=raster.getWidth();  int height=raster.getHeight();  Enumeration icList;  ImageConsumer ic;  icList=ics.elements();  while (icList.hasMoreElements()) {    ic=(ImageConsumer)icList.nextElement();    ic.setDimensions(width,height);    ic.setHints(ImageConsumer.TOPDOWNLEFTRIGHT | ImageConsumer.COMPLETESCANLINES | ImageConsumer.SINGLEPASS| ImageConsumer.SINGLEFRAME);  }  int pix[]=new int[width];  int i, j;  int numBands=sampleModel.getNumBands();  int tmpPixel[]=new int[numBands];  for (j=0; j < height; j++) {    for (i=0; i < width; i++) {      sampleModel.getPixel(i,j,tmpPixel,dataBuffer);      pix[i]=colorModel.getDataElement(tmpPixel,0);    }    icList=ics.elements();    while (icList.hasMoreElements()) {      ic=(ImageConsumer)icList.nextElement();      ic.setPixels(0,j,width,1,colorModel,pix,0,width);    }  }  icList=ics.elements();  while (icList.hasMoreElements()) {    ic=(ImageConsumer)icList.nextElement();    ic.imageComplete(ImageConsumer.STATICIMAGEDONE);  }}  }
class C{  public static final double[][] transposeTimes(final double[] v1,final double[][] m2){  assert (m2.length == v1.length) : ERR_MATRIX_INNERDIM;  final int columndimension=m2[0].length;  final double[][] re=new double[1][columndimension];  for (int j=0; j < columndimension; j++) {    double s=0;    for (int k=0; k < v1.length; k++) {      s+=v1[k] * m2[k][j];    }    re[0][j]=s;  }  return re;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public boolean isAcceptMC(){  Object oo=get_Value(COLUMNNAME_AcceptMC);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String printShortLocaleTime(){  _date.setTime(_localTimeOfEpoch);  if (_shortTimeFormat == null)   _shortTimeFormat=DateFormat.getTimeInstance(DateFormat.SHORT);  return _shortTimeFormat.format(_date);}  }
class C{  public static <T extends CharSequence>T eachMatch(T self,Pattern pattern,@ClosureParams(value=FromString.class,options={"List<String>","String[]"}) Closure closure){  eachMatch(self.toString(),pattern,closure);  return self;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.FUNCTION_DEFINITION__FPARS:    return ((InternalEList<?>)getFpars()).basicRemove(otherEnd,msgs);case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:  return basicSetReturnTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  private TraceList createTrace(final String name,final String description) throws com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException {  return project == null ? module.getNative().getContent().getTraceContainer().createTrace(name,description) : project.getNative().getContent().createTrace(name,description);}  }
class C{  public static long createBookmarksFolderOnce(Context context,String title,long parentId){  Long id=chromeBrowserProviderCall(Long.class,ChromeBrowserProvider.CLIENT_API_CREATE_BOOKMARKS_FOLDER_ONCE,context,argsToBundle(title,parentId));  return id != null ? id.longValue() : INVALID_BOOKMARK_ID;}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  protected void randomInit(File file) throws FitsException {  String permissions="r";  if (!file.exists() || !file.canRead()) {    throw new FitsException("Non-existent or unreadable file");  }  if (file.canWrite()) {    permissions+="w";  }  try {    this.dataStr=new BufferedFile(file,permissions);    ((BufferedFile)this.dataStr).seek(0);  } catch (  IOException e) {    throw new FitsException("Unable to open file " + file.getPath(),e);  }}  }
class C{  @Override public String export(List<EvaluationStatistics> stats){  log("Exporting to: " + m_File);  return super.export(stats);}  }
class C{  public Bitmap icon(){  if (mDecodedIcon != null)   return mDecodedIcon;  mDecodedIcon=ShortcutHelper.decodeBitmapFromString(mEncodedIcon);  return mDecodedIcon;}  }
class C{  @Override public void startCounting(ExampleSet eSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(eSet,useExampleWeights);  this.labelAttribute=eSet.getAttributes().getLabel();  if (!this.labelAttribute.isNominal()) {    throw new UserError(null,101,"calculation of classification performance criteria",this.labelAttribute.getName());  }  this.predictedLabelAttribute=eSet.getAttributes().getPredictedLabel();  if (this.predictedLabelAttribute == null || !this.predictedLabelAttribute.isNominal()) {    throw new UserError(null,101,"calculation of classification performance criteria","predicted label attribute");  }  if (useExampleWeights) {    this.weightAttribute=eSet.getAttributes().getWeight();  }  Collection<String> labelValues=this.labelAttribute.getMapping().getValues();  Collection<String> predictedLabelValues=this.predictedLabelAttribute.getMapping().getValues();  Collection<String> unionedMapping=new LinkedHashSet<String>(labelValues);  unionedMapping.addAll(predictedLabelValues);  this.counter=new double[unionedMapping.size()][unionedMapping.size()];  this.classNames=new String[unionedMapping.size()];  int n=0;  for (  String labelValue : unionedMapping) {    classNames[n]=labelValue;    classNameMap.put(classNames[n],n);    n++;  }}  }
class C{  private void cancelSearch(){  entrantToSearch=null;}  }
class C{  public void reset(){  mValue=-1.0;  mCount=0;}  }
class C{  public int endPos(JCTree tree){  if (tree == null)   return Position.NOPOS;  return TreeInfo.getEndPos(tree,endPosTable);}  }
class C{  public SootClass tryLoadClass(String className,int desiredLevel){  setPhantomRefs(true);  if (!getPhantomRefs() && SourceLocator.v().getClassSource(className) == null) {    setPhantomRefs(false);    return null;  }  SootResolver resolver=SootResolver.v();  SootClass toReturn=resolver.resolveClass(className,desiredLevel);  setPhantomRefs(false);  return toReturn;}  }
class C{  public DrawerBuilder drawerLeftWidth(int width){  this.drawerLeftWidth=width;  return this;}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public synchronized VisualTupleSet add(String group,TupleSet data){  return add(group,data,null);}  }
class C{  public static void locationToListTags(Location loc,CompoundTag tag){  tag.putList("Pos",TagType.DOUBLE,Arrays.asList(loc.getX(),loc.getY(),loc.getZ()));  tag.putList("Rotation",TagType.FLOAT,Arrays.asList(loc.getYaw(),loc.getPitch()));}  }
class C{  public void write(Buffer buffer){  MediaSample sample=new MediaSample((byte[])buffer.getData(),buffer.getTimestamp(),buffer.getSequenceNumber());  renderer.writeSample(sample);}  }
class C{  public boolean splitActiveLink(MutableCoord p){  MutableCoord projection=calculatePointOnLine(new MutableCoord(activeLink.getFromNode().getCoord()),new MutableCoord(activeLink.getToNode().getCoord()),p);  double rel=calculateRelation(new MutableCoord(activeLink.getFromNode().getCoord()),new MutableCoord(activeLink.getToNode().getCoord()),projection);  if (rel <= 0.0 || rel >= 1.0)   return false; else {    pairLinkLink pair=cutLink(activeLink,projection);    this.updateSelectedLinkList();    this.addLinkInSelectedLinkList(pair.link1,true);    return true;  }}  }
class C{  public static <T>List<T> plus(List<T> left,Iterable<T> right){  return (List<T>)plus((Collection<T>)left,asCollection(right));}  }
class C{  static String fixDigitSpaceUnit(CssTokens tokens){  StringBuilder sb=new StringBuilder();  for (CssTokens.TokenIterator it=tokens.iterator(); it.hasNext(); ) {    if (it.type() != TokenType.NUMBER) {      sb.append(it.next());    } else {      do {        sb.append(it.next());      } while (it.hasNext() && it.type() == TokenType.NUMBER);      if (it.hasNext() && it.type() == TokenType.WHITESPACE) {        it.advance();        String numberFollower=null;        if (it.hasNext()) {          String token=it.token();switch (it.type()) {case IDENT:            if (CssTokens.isWellKnownUnit(token)) {              numberFollower=token;              it.advance();              if (it.hasNext() && it.token().startsWith(".")) {                numberFollower+=" ";              }              it.backup();            }          break;case FUNCTION:        String name=token.substring(0,token.length() - 1);      if (CssTokens.isWellKnownUnit(name)) {        numberFollower=token;      }    break;case DELIM:  if ("%".equals(token)) {    numberFollower=token;  }break;default :break;}}if (numberFollower == null) {sb.append(' ');} else {sb.append(Strings.toLowerCase(numberFollower));it.advance();}}}}return sb.toString();}  }
class C{  public final StateVec randomNextStates(TLCState state){  int len=this.actions.length;  int index=(int)Math.floor(this.rng.nextDouble() * len);  int p=this.rng.nextPrime();  for (int i=0; i < len; i++) {    StateVec pstates=this.tool.getNextStates(this.actions[index],state);    if (!pstates.empty()) {      return pstates;    }    index=(index + p) % len;  }  return null;}  }
class C{  protected CtClass removeCached(String classname){  return (CtClass)classes.remove(classname);}  }
class C{  public SerialIO(String portName,byte[] dataBegin,byte[] dataEnd){  this.portName=portName;  this.dataBegin=Arrays.copyOf(dataBegin,dataBegin.length);  this.dataEnd=Arrays.copyOf(dataEnd,dataEnd.length);}  }
class C{  @DataProvider(name="warmedMap") public Object[][] providesWarmedMap(){  return new Object[][]{{newWarmedMap()}};}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public Permutation(int size){  super();  permutation=new int[size];  for (int i=0; i < size; i++) {    permutation[i]=i;  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  protected boolean isMultiReport(HttpServletRequest request,HttpServletResponse response,ActionForm form,ActionMapping mapping){  return true;}  }
class C{  public boolean compare(String compareString){  if (isIgnoreCase) {    compareString=compareString.toUpperCase();  }  return compareAt(compareString,0,0,compareString.length()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  private void advanceToNextBlock(){  _blockStartOffset+=(1 + _curBlockSize);  _blockIx++;  if (_blockStartOffset >= _bmLen) {    return;  }  _curBlockSize=_bmPtr[_bmOff + _blockStartOffset];  if (_curBlockSize < 0) {    throw new RuntimeException(String.format("Negative block size %d at position %d of %s",_curBlockSize,_blockStartOffset,Arrays.toString(_bmPtr)));  }  _nextBmOffset=0;}  }
class C{  public String toString(){  return super.toString() + ":" + getAttributes();}  }
class C{  public static <W extends Appendable & Closeable>void write(CharSequence from,OutputSupplier<W> to) throws IOException {  Preconditions.checkNotNull(from);  boolean threw=true;  W out=to.getOutput();  try {    out.append(from);    threw=false;  }  finally {    Closeables.close(out,threw);  }}  }
class C{  private Object parsePage(Page page,AstVisitor v) throws WikiApiException {  return v.go(getCompiledPage(page).getPage());}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(Iterable<? extends T> initialContents){  MinMaxPriorityQueue<T> queue=new MinMaxPriorityQueue<T>(this,initialQueueSize(expectedSize,maximumSize,initialContents));  for (  T element : initialContents) {    queue.offer(element);  }  return queue;}  }
class C{  public String toString(){  return getValue().replace('$','.') + ".class";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.124 -0500",hash_original_method="D115C79C5FCCB59668763118EBD8CBBB",hash_generated_method="A64C3FB6A00CFCC4B76D15C8219388AD") private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public MaltParser(DialogueSystem system){  this.system=system;  List<String> missingParams=new LinkedList<String>(Arrays.asList("taggingmodel","parsingmodel"));  missingParams.removeAll(system.getSettings().params.keySet());  if (!missingParams.isEmpty()) {    throw new RuntimeException("Missing parameters: " + missingParams);  }  String taggingModel=system.getSettings().params.getProperty("taggingmodel");  tagger=new MaxentTagger(taggingModel);  String parsingModel=system.getSettings().params.getProperty("parsingmodel");  try {    maltparser=ConcurrentMaltParserService.initializeParserModel(new File(parsingModel));  } catch (  Exception e) {    throw new RuntimeException("cannot initialise MaltParser: " + e);  }  if (system.getSettings().params.containsKey("trigger")) {    trigger=Template.create(system.getSettings().params.getProperty("trigger"));  } else {    trigger=Template.create(system.getSettings().userInput);  }  log.fine("Initialisation of MaltParser module completed");}  }
class C{  public Sequence(Schema schema,int id,String name,Long startValue,Long increment,Long cacheSize,Long minValue,Long maxValue,boolean cycle,boolean belongsToTable){  initSchemaObjectBase(schema,id,name,Trace.SEQUENCE);  this.increment=increment != null ? increment : 1;  this.minValue=minValue != null ? minValue : getDefaultMinValue(startValue,this.increment);  this.maxValue=maxValue != null ? maxValue : getDefaultMaxValue(startValue,this.increment);  this.value=startValue != null ? startValue : getDefaultStartValue(this.increment);  this.valueWithMargin=value;  this.cacheSize=cacheSize != null ? Math.max(1,cacheSize) : DEFAULT_CACHE_SIZE;  this.cycle=cycle;  this.belongsToTable=belongsToTable;  if (!isValid(this.value,this.minValue,this.maxValue,this.increment)) {    throw DbException.get(ErrorCode.SEQUENCE_ATTRIBUTES_INVALID,name,String.valueOf(this.value),String.valueOf(this.minValue),String.valueOf(this.maxValue),String.valueOf(this.increment));  }}  }
class C{  private static String renderDescriptor(Descriptor descriptor,String indent){  if (descriptor.getFields().size() == 0) {    return indent + "<empty>";  }  List<String> fieldsAsStrings=descriptor.getFields().stream().map(null).collect(Collectors.toList());  return Joiner.on(System.lineSeparator()).join(fieldsAsStrings);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public CDebuggerHistorySynchronizer(final CDebugPerspectiveModel model,final JTextPane area){  m_model=model;  m_area=area;  m_area.setEnabled(false);  model.addListener(m_perspectiveListener);  m_historyStringBuilder.addListener(m_builderListener);}  }
class C{  public static String trimName(String line){  int idx=line.indexOf("-");  if (idx != -1) {    line=line.substring(0,idx);  }  line=trimLine(line);  idx=line.indexOf("(");  if (idx == -1) {    idx=line.indexOf(":");  }  if (idx != -1) {    line=line.substring(0,idx);  }  return line.trim();}  }
class C{  protected Vector2[] load(InputStream stream){  if (stream == null)   return null;  BufferedReader br=new BufferedReader(new InputStreamReader(stream));  return parse(br);}  }
class C{  public Tile(Dimension dimension,BoundingBox boundingBox,Image image){  this.dimension=dimension;  bbox=boundingBox;  tileImage=image;  tileLoadingImage=UIManager.getInstance().getThemeImageConstant("mapTileLoadingImage");  tileLoadingText=UIManager.getInstance().getThemeConstant("mapTileLoadingText","Loading...");}  }
class C{  public void assertNotEqual(long expected,long actual){  TestUtils.assertNotEqual(expected,actual);}  }
class C{  public int numsamples(){  return negsamples;}  }
class C{  public boolean isModernTls(){  return modernTls;}  }
class C{  public Fugue256(){  super();}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TypedElement_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_TypedElement_type_feature","_UI_TypedElement_type"),TypesPackage.Literals.TYPED_ELEMENT__TYPE,true,false,true,null,null,null));}  }
class C{  protected void validateVcenterCommon(VcenterParam param,Vcenter vcenter,Boolean validateConnection){  if (vcenter == null || (param.findIpAddress() != null && !param.findIpAddress().equals(vcenter.getIpAddress()))) {    checkDuplicateAltId(Vcenter.class,"ipAddress",param.findIpAddress(),"vcenter");  }  if (vcenter == null || (param.getName() != null && !param.getName().equals(vcenter.getLabel()))) {    checkDuplicateLabel(Vcenter.class,param.getName());  }  validateVcenterCredentials(param,vcenter);  if (validateConnection != null && validateConnection == true) {    String errorMessage=VCenterConnectionValidator.isVCenterConnectionValid(param);    if (StringUtils.isNotBlank(errorMessage)) {      throw APIException.badRequests.invalidVCenterConnection(errorMessage);    }  }}  }
class C{  public static String convertBytesToHexString(byte[] data,int offset,int length){  return convertBytesToHexString(data,offset,length,"");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Path("resolve") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponseList resolve(final ResolveRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return subversionApi.resolve(request);}  }
class C{  void resolve(){  int index=rawOffsetsIndexTable.size();  List<String> toBeRemoved=new ArrayList<String>();  for (  String key : aliases.keySet()) {    boolean validname=false;    for (int j=0; j < index; j++) {      Set<String> perRO=rawOffsetsIndexTable.get(j);      boolean isExcluded=(excludeList == null) ? false : excludeList.contains(key);      if ((perRO.contains(aliases.get(key)) || isExcluded) && Zone.isTargetZone(key)) {        validname=true;        if (!isExcluded) {          perRO.add(key);          Main.info("Alias <" + key + "> added to the list.");        }        break;      }    }    if (!validname) {      Main.info("Alias <" + key + "> removed from the list.");      toBeRemoved.add(key);    }  }  for (  String key : toBeRemoved) {    aliases.remove(key);  }  Map<String,String> newMap=new HashMap<String,String>();  for (  String key : aliases.keySet()) {    String realid=aliases.get(key);    String leaf=realid;    while (aliases.get(leaf) != null) {      leaf=aliases.get(leaf);    }    if (!realid.equals(leaf)) {      newMap.put(key,leaf);    }  }  aliases.putAll(newMap);}  }
class C{  public RelNode parse(String sql){  SqlHandlerConfig config=new SqlHandlerConfig(planner);  SqlHandler<RelNode,String> handler=new EnumerableSqlHandler(config);  return handler.convert(sql);}  }
class C{  public static Attribute createAttribute(String name,int valueType){  String attributeName=(name != null) ? new String(name) : createName();  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.DATE_TIME)) {    return new DateAttribute(attributeName,valueType);  } else   if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.BINOMINAL)) {    return new BinominalAttribute(attributeName);  } else   if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.NOMINAL)) {    return new PolynominalAttribute(attributeName,valueType);  } else   if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.NUMERICAL)) {    return new NumericalAttribute(attributeName,valueType);  } else {    throw new RuntimeException("AttributeFactory: cannot create attribute with value type '" + Ontology.ATTRIBUTE_VALUE_TYPE.mapIndex(valueType) + "' ("+ valueType+ ")!");  }}  }
class C{  public String readValue(InputNode from) throws Exception {  if (!stack.isRelevant(from)) {    return null;  }  int length=text.length();  if (length <= 0) {    EventNode event=reader.peek();    if (event.isEnd()) {      if (stack.top() == from) {        return null;      } else {        stack.pop();      }      event=reader.next();    }  }  return readText(from);}  }
class C{  public boolean isSetPutRequest(){  return this.putRequest != null;}  }
class C{  public DummyAccessProvider(String url){  accessUrl=url;}  }
class C{  @SuppressWarnings("restriction") @Test public void test3() throws IOException {  final int maxDataBlockLen=512;  final sun.misc.BASE64Encoder sunEncoder=new sun.misc.BASE64Encoder();  final sun.misc.BASE64Decoder sunDecoder=new sun.misc.BASE64Decoder();  final Random rnd=new Random(0x39ac7d6e);  for (int i=0; i < 100; i++) {    final int len=rnd.nextInt(maxDataBlockLen + 1);    final byte[] b0=new byte[len];    rnd.nextBytes(b0);    final String e1=Base64Coder.encodeLines(b0);    final String e2=sunEncoder.encodeBuffer(b0);    assertEquals("test3",e2,e1);    final byte[] b1=Base64Coder.decodeLines(e1);    final byte[] b2=sunDecoder.decodeBuffer(e2);    assertArrayEquals(b0,b1);    assertArrayEquals(b0,b2);  }}  }
class C{  @Override public void clear(){  super.clear();  float[] keys=_set;  long[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void warning(String message){  message="<li><font color='#FFFF00'>" + message + "</font></li>";  log(message,false,false);}  }
class C{  @Override public String basePath(){  return "/wm/linkdiscovery";}  }
class C{  public static void announceStorage(final DigestURL url,final int depth,final Date date,State state){  if (state == State.INVENTORY || state == State.ANY)   inventory.announceStorage(url,depth,date);  if (state == State.ARCHIVE || state == State.ANY)   archive.announceStorage(url,depth,date);}  }
class C{  public long add(long instant,int years){  if (years == 0) {    return instant;  }  return set(instant,get(instant) + years);}  }
class C{  protected Frame<V> newFrame(final Frame<? extends V> src){  return new Frame<V>(src);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"sahf");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a sahf instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final OperandSize archSize=environment.getArchitectureSize();  final String shiftedEaxToCf=environment.getNextVariableString();  final String shiftedEaxToPf=environment.getNextVariableString();  final String shiftedEaxToAf=environment.getNextVariableString();  final String shiftedEaxToZf=environment.getNextVariableString();  final String shiftedEaxToSf=environment.getNextVariableString();  instructions.add(ReilHelpers.createBsh(baseOffset,archSize,"eax",archSize,"-8",archSize,shiftedEaxToCf));  instructions.add(ReilHelpers.createAnd(baseOffset + 1,archSize,shiftedEaxToCf,archSize,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createBsh(baseOffset + 2,archSize,"eax",archSize,"-10",archSize,shiftedEaxToPf));  instructions.add(ReilHelpers.createAnd(baseOffset + 3,archSize,shiftedEaxToPf,archSize,"1",OperandSize.BYTE,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createBsh(baseOffset + 4,archSize,"eax",archSize,"-12",archSize,shiftedEaxToAf));  instructions.add(ReilHelpers.createAnd(baseOffset + 5,archSize,shiftedEaxToAf,archSize,"1",OperandSize.BYTE,Helpers.AUXILIARY_FLAG));  instructions.add(ReilHelpers.createBsh(baseOffset + 6,archSize,"eax",archSize,"-14",archSize,shiftedEaxToZf));  instructions.add(ReilHelpers.createAnd(baseOffset + 7,archSize,shiftedEaxToZf,archSize,"1",OperandSize.BYTE,Helpers.ZERO_FLAG));  instructions.add(ReilHelpers.createBsh(baseOffset + 8,archSize,"eax",archSize,"-15",archSize,shiftedEaxToSf));  instructions.add(ReilHelpers.createAnd(baseOffset + 9,archSize,shiftedEaxToSf,archSize,"1",OperandSize.BYTE,Helpers.SIGN_FLAG));}  }
class C{  String stubClassName(){  return stubClassName;}  }
class C{  public GraphicsNode nextGraphicsNode(){  GraphicsNode result=getNextGraphicsNode(currentNode);  if (result != null) {    currentNode=result;  }  return result;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 2 || args.length > 3) {    System.out.println("Usage: java org.oscm.setup.UserNotification <db-properties-file-path> <notification-properties-file-path> [<test email address>]");    System.exit(-1);  }  final String dbPropertiesFile=args[0];  final String unPropertiesFile=args[1];  String testEmailAddress=null;  if (args.length == 3 && !"".equals(args[2])) {    testEmailAddress=args[2];  }  Properties dbProperties=HandlerUtils.readProperties(dbPropertiesFile);  Properties unProperties=HandlerUtils.readProperties(unPropertiesFile);  UserNotificationHandler notificationHandler=new UserNotificationHandler();  Connection dbConnection=null;  try {    dbConnection=HandlerUtils.establishDatabaseConnection(dbProperties);  } catch (  Exception e) {    System.out.println("Failed to esablish the" + " database connection. Reason:\n" + e.getMessage());    e.printStackTrace();    System.exit(-1);  }  try {    if (testEmailAddress == null) {      notificationHandler.notifyUsers(dbConnection,unProperties);    } else {      notificationHandler.testSettings(dbConnection,unProperties,testEmailAddress);    }  } catch (  SQLException e) {    System.out.println("Failed to retrieve data from" + " the table \"platformuser\". Reason:\n" + e.getMessage());    e.printStackTrace();    System.exit(-1);  }catch (  MailOperationException e) {    System.out.println("Failed to send notification emails. Reason:\n" + e.getMessage());    e.printStackTrace();    System.exit(-1);  }}  }
class C{  public DefaultIdCondition(String value){  super(value);}  }
class C{  public Object opt(String key){  return key == null ? null : super.get(key);}  }
class C{  private CDatabaseFunctions(){}  }
class C{  public boolean drawImage(Image img,int x,int y,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,observer);}  }
class C{  public static Calendar clearTime(final Calendar self){  clearTimeCommon(self);  return self;}  }
class C{  private void doAcquireSharedInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public synchronized void reset(){  ActionStatisticsCollector.getInstance().clear();  this.lastReset=new Date();}  }
class C{  public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){  super(selectionModifiers);  this.addToSelectionModifiers=addToSelectionModifiers;  this.lensPaintable=new LensPaintable();  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);}  }
class C{  public Node parse(InputSource input) throws IOException, SAXException {  getXMLReader().parse(input);  return parent;}  }
class C{  public static String childElementAttribute(Element element,String childElementName,String attributeName,String defaultValue){  if (element == null)   return defaultValue;  Element childElement=firstChildElement(element,childElementName);  String elementAttribute=elementAttribute(childElement,attributeName,defaultValue);  if (UtilValidate.isEmpty(elementAttribute))   return defaultValue; else   return elementAttribute;}  }
class C{  public TokenScanner(IScanner scanner){  this(scanner,null);}  }
class C{  @JsonCreator public static CleanupContext create(@JsonProperty("nodes") final List<String> nodes,@JsonProperty("key_spaces") final List<String> keySpaces,@JsonProperty("column_families") final List<String> columnFamilies){  return new CleanupContext(nodes,keySpaces,columnFamilies);}  }
class C{  public static Angle mix(double amount,Angle value1,Angle value2){  if (value1 == null || value2 == null) {    throw new IllegalArgumentException("Angle Is Null");  }  if (amount < 0)   return value1; else   if (amount > 1)   return value2;  Quaternion quat=Quaternion.slerp(amount,Quaternion.fromAxisAngle(value1,Vec4.UNIT_X),Quaternion.fromAxisAngle(value2,Vec4.UNIT_X));  Angle angle=quat.getRotationX();  if (Double.isNaN(angle.degrees))   return null;  return angle;}  }
class C{  public static int secondaryIdentityHash(Object key){  return secondaryHash(System.identityHashCode(key));}  }
class C{  public UpdateRequest doc(Object... source){  safeDoc().source(source);  return this;}  }
class C{  protected String authorizeCapture(final CustomerOrder order,final Map params){  final List<Payment> paymentsToAuthorize=createPaymentsToAuthorize(order,params.containsKey("forceSinglePayment"),params,PaymentGateway.AUTH_CAPTURE);  String paymentResult=null;  boolean atLeastOneProcessing=false;  boolean atLeastOneOk=false;  boolean atLeastOneError=false;  for (  Payment payment : paymentsToAuthorize) {    try {      payment=getPaymentGateway().authorizeCapture(payment);      paymentResult=payment.getPaymentProcessorResult();    } catch (    Throwable th) {      paymentResult=Payment.PAYMENT_STATUS_FAILED;      payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);      payment.setPaymentProcessorBatchSettlement(false);      payment.setTransactionOperationResultMessage(th.getMessage());    } finally {      final CustomerOrderPayment authCaptureOrderPayment=new CustomerOrderPaymentEntity();      BeanUtils.copyProperties(payment,authCaptureOrderPayment);      authCaptureOrderPayment.setPaymentProcessorResult(paymentResult);      authCaptureOrderPayment.setShopCode(order.getShop().getCode());      customerOrderPaymentService.create(authCaptureOrderPayment);      if (Payment.PAYMENT_STATUS_PROCESSING.equals(paymentResult)) {        atLeastOneProcessing=true;      } else       if (!Payment.PAYMENT_STATUS_OK.equals(paymentResult)) {        atLeastOneError=true;      } else {        atLeastOneOk=true;      }    }  }  if (atLeastOneError) {    if (atLeastOneOk) {      return Payment.PAYMENT_STATUS_PROCESSING;    }    return Payment.PAYMENT_STATUS_FAILED;  }  return atLeastOneProcessing ? Payment.PAYMENT_STATUS_PROCESSING : Payment.PAYMENT_STATUS_OK;}  }
class C{  public static void main(String[] args){  int n=Integer.parseInt(args[0]);  if (args.length == 2)   StdRandom.setSeed(Long.parseLong(args[1]));  double[] probabilities={0.5,0.3,0.1,0.1};  int[] frequencies={5,3,1,1};  String[] a="A B C D E F G".split(" ");  StdOut.println("seed = " + StdRandom.getSeed());  for (int i=0; i < n; i++) {    StdOut.printf("%2d ",uniform(100));    StdOut.printf("%8.5f ",uniform(10.0,99.0));    StdOut.printf("%5b ",bernoulli(0.5));    StdOut.printf("%7.5f ",gaussian(9.0,0.2));    StdOut.printf("%1d ",discrete(probabilities));    StdOut.printf("%1d ",discrete(frequencies));    StdRandom.shuffle(a);    for (    String s : a)     StdOut.print(s);    StdOut.println();  }}  }
class C{  public void addDimensionToBookType(int dim,int bookType){  if (bookType <= 4 && bookType >= 0)   if (dim != -1 && dim != 1)   dimToBookType.put(dim,bookType); else   FMLLog.log("RitualRegistry",Level.ERROR,"You're not allowed to register that Dimension ID: %d",dim); else   FMLLog.log("RitualRegistry",Level.ERROR,"Necronomicon book type does not exist: %d",bookType);}  }
class C{  public static String serializeToJson(TextAnnotation ta,boolean writeTokenCharacterOffsets){  JsonSerializer serializer=new JsonSerializer();  JsonElement json=serializer.writeTextAnnotation(ta,writeTokenCharacterOffsets);  Gson gson=new GsonBuilder().setPrettyPrinting().create();  return gson.toJson(json);}  }
class C{  public void addAlarm(final Alarm ALARM){  if (!alarms.contains(ALARM))   alarms.add(ALARM);}  }
class C{  public BackwardsFileStream(File file,long pos) throws IOException {  raf=new RandomAccessFile(file,"r");  seekPos=pos;}  }
class C{  public GridCacheConfigurationValidationSelfTest(){  super(false);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public static Style createStyle(final File file,final SimpleFeatureSource featureSource){  final File sld=toSLDFile(file);  if (sld != null) {    return createFromSLD(sld);  }  return createStyle2(featureSource);}  }
class C{  protected void implReset(){  charCount=0;}  }
class C{  protected void buildTree(){{    for (Iterator godesIt=graph.iterator(); godesIt.hasNext(); ) {      Object gode=godesIt.next();      DominatorNode dode=fetchDode(gode);      DominatorNode parent=fetchParent(gode);      if (parent == null) {        if (head != null)         throw new RuntimeException("Assertion failed.");        head=dode;      } else {        parent.addChild(dode);        dode.setParent(parent);      }    }  }{    for (Iterator dodesIt=this.iterator(); dodesIt.hasNext(); ) {      DominatorNode dode=(DominatorNode)dodesIt.next();      if (dode.isTail())       tails.add(dode);    }  }}  }
class C{  boolean run(String... args) throws Exception {  boolean findDeadKeys=false;  boolean findMissingKeys=false;  if (args.length == 0) {    if (is_jtreg()) {      findDeadKeys=true;      findMissingKeys=true;    } else {      System.err.println("Usage: java CheckResourceKeys <options>");      System.err.println("where options include");      System.err.println("  -finddeadkeys      find keys in resource bundles which are no longer required");      System.err.println("  -findmissingkeys   find keys in resource bundles that are required but missing");      return true;    }  } else {    for (    String arg : args) {      if (arg.equalsIgnoreCase("-finddeadkeys"))       findDeadKeys=true; else       if (arg.equalsIgnoreCase("-findmissingkeys"))       findMissingKeys=true; else       error("bad option: " + arg);    }  }  if (errors > 0)   return false;  Set<String> codeStrings=getCodeStrings();  Set<String> resourceKeys=getResourceKeys();  if (findDeadKeys)   findDeadKeys(codeStrings,resourceKeys);  if (findMissingKeys)   findMissingKeys(codeStrings,resourceKeys);  return (errors == 0);}  }
class C{  public static boolean isHttpStatusCode(Throwable throwable,int statusCode){  return throwable instanceof HttpException && ((HttpException)throwable).code() == statusCode;}  }
class C{  public EliasFanoLongBigList(final ByteIterator iterator){  this(LongIterators.wrap(iterator));}  }
class C{  public void subtract(final Number operand){  this.value-=operand.longValue();}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  if (((XYSeriesRenderer)renderer).isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStyle(Style.STROKE);  }switch (((XYSeriesRenderer)renderer).getPointStyle()) {case X:    drawX(canvas,paint,x + SHAPE_WIDTH,y);  break;case CIRCLE:drawCircle(canvas,paint,x + SHAPE_WIDTH,y);break;case TRIANGLE:drawTriangle(canvas,paint,new float[6],x + SHAPE_WIDTH,y);break;case SQUARE:drawSquare(canvas,paint,x + SHAPE_WIDTH,y);break;case DIAMOND:drawDiamond(canvas,paint,new float[8],x + SHAPE_WIDTH,y);break;case POINT:canvas.drawPoint(x + SHAPE_WIDTH,y,paint);break;}}  }
class C{  public boolean containsHandler(String path){  return this.handler.containsHandler(path);}  }
class C{  public static void killContainers(){synchronized (jdbcUrlContainerCache) {    jdbcUrlContainerCache.values().forEach(null);    jdbcUrlContainerCache.clear();    containerConnections.clear();    initializedContainers.clear();  }}  }
class C{  public <T extends ServiceDocument>T waitForServiceState(Class<T> type,String serviceUri,Predicate<T> test,int waitIterationSleep,int waitIterationCount) throws Throwable {  T result=null;  for (int i=0; i < hosts.length; i++) {    ServiceHost host=hosts[i];    T r=ServiceHostUtils.waitForServiceState(type,serviceUri,test,host,waitIterationSleep,waitIterationCount,getEnvironmentCleanup());    assert (r != null);    logger.info("host " + host.getState().id + " has owner "+ r.documentOwner);    if (result != null && !ServiceUtils.documentEquals(type,result,r)) {      logger.info(String.format("current %s last %s",Utils.toJson(true,false,r),Utils.toJson(true,false,result)));      throw new IllegalStateException("response is not consistent across node group");    }    result=r;  }  return result;}  }
class C{  public void markInitialized(){  if (FLAGS_UPD.compareAndSet(this,0,INIT_FLAG))   checkComplete();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static boolean classNameMatchesFileName(ClassSymbol c,Env<AttrContext> env){  return env.toplevel.sourcefile.isNameCompatible(c.name.toString(),JavaFileObject.Kind.SOURCE);}  }
class C{  private void checkBlockedSteps(Workflow workflow,String fromStepId){  boolean again;  Set<String> suspendedSteps=new HashSet<String>();  do {    again=false;    for (    Step step : workflow.getStepMap().values()) {      if (step.status.state != StepState.BLOCKED) {        continue;      }      try {        try {          if (!isBlocked(workflow,step)) {            again=true;            if (isStepMarkedForSuspend(workflow,step)) {              changeStepToSuspendedNoErrorState(workflow,suspendedSteps,step);            } else {              step.status.updateState(StepState.QUEUED,null,"Unblocked by step: " + fromStepId);              persistWorkflowStep(workflow,step);              _log.info(String.format("Step %s has been unblocked by step %s",step.stepId,fromStepId));              dispatchStep(step,workflow._nested);            }          }        } catch (        CancelledException ex) {          again=true;          step.status.updateState(StepState.CANCELLED,null,"Cancelled by step: " + fromStepId);          _log.info(String.format("Step %s has been cancelled by step %s",step.stepId,fromStepId));          persistWorkflowStep(workflow,step);        }      } catch (      Exception ex) {        _log.error("Exception" + ex.getMessage());      }    }  } while (again == true);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    PrivateKey privKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());    DViewPrivateKey dViewPrivateKey=new DViewPrivateKey(frame,MessageFormat.format(res.getString("KeyPairPrivateKeyDetailsAction.PrivKeyDetailsEntry.Title"),alias),privKey,history.getExplicitProvider());    dViewPrivateKey.setLocationRelativeTo(frame);    dViewPrivateKey.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public static void openFile(IFile file) throws PartInitException {  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();  IEditorDescriptor desc=PlatformUI.getWorkbench().getEditorRegistry().getDefaultEditor(file.getName());  if (desc != null) {    page.openEditor(new FileEditorInput(file),desc.getId());  }}  }
class C{  public QualityDirectedStagedDeepening(IScore eval){  super(null);  this.eval=eval;}  }
class C{  public static ECPoint decompressPoint(ECPoint point){  return getPointWithCompression(point,false);}  }
class C{  private boolean isSignedIn(){  credential=GoogleAccountCredential.usingAudience(this,Constants.AUDIENCE_ANDROID_CLIENT_ID);  SharedPreferences settings=getSharedPreferences("MobileAssistant",0);  String accountName=settings.getString(ACCOUNT_NAME_SETTING_NAME,null);  credential.setSelectedAccountName(accountName);  return credential.getSelectedAccount() != null;}  }
class C{  private void emitMetadata(List metadata){  for (int i=0; i < metadata.size(); i++) {    DocComment meta=(DocComment)metadata.get(i);    String metadataType=meta.getMetadataType().intern();    xml.append("\n<metadata>\n");    xml.append("\t<");    xml.append(metadataType);    xml.append(" owner='");    xml.append(meta.getOwner());    xml.append("' ");    String name=meta.getName();    if (!name.equals("IGNORE"))     xml.append("name='").append(name).append("' ");    String type_meta=meta.getType_meta();    if (type_meta != null) {      xml.append("type='").append(type_meta).append("' ");    }    String event_meta=meta.getEvent_meta();    if (event_meta != null) {      xml.append("event='").append(event_meta).append("' ");    }    String kind_meta=meta.getKind_meta();    if (kind_meta != null) {      xml.append("kind='").append(kind_meta).append("' ");    }    String arrayType_meta=meta.getArrayType_meta();    if (arrayType_meta != null) {      xml.append("arrayType='").append(arrayType_meta).append("' ");    }    String format_meta=meta.getFormat_meta();    if (format_meta != null) {      xml.append("format='").append(format_meta).append("' ");    }    String enumeration_meta=meta.getEnumeration_meta();    if (enumeration_meta != null) {      xml.append("enumeration='").append(enumeration_meta).append("' ");    }    String inherit_meta=meta.getInherit_meta();    if (inherit_meta != null) {      xml.append("inherit='").append(inherit_meta).append("' ");    }    if (metadataType == StandardDefs.MD_EVENT) {      String message_meta=meta.getMessage_meta();      if (message_meta != null) {        xml.append("deprecatedMessage='").append(message_meta).append("' ");      }      String replacement_meta=meta.getReplacement_meta();      if (replacement_meta != null) {        xml.append("deprecatedReplacement='").append(replacement_meta).append("' ");      }      String since_meta=meta.getSince_meta();      if (since_meta != null) {        xml.append("deprecatedSince='").append(since_meta).append("' ");      }    } else     if (metadataType == StandardDefs.MD_SKINPART) {      String variableType_meta=meta.getVariableType_meta();      if (variableType_meta != null) {        xml.append("var_type='").append(variableType_meta).append("' ");      }      String required_meta=meta.getRequired_meta();      if (required_meta != null) {        xml.append("required='").append(required_meta).append("' ");      } else {        xml.append("required='false' ");      }    } else {      String message_meta=meta.getMessage_meta();      if (message_meta != null) {        xml.append("message='").append(message_meta).append("' ");      }      String replacement_meta=meta.getReplacement_meta();      if (replacement_meta != null) {        xml.append("replacement='").append(replacement_meta).append("' ");      }      String since_meta=meta.getSince_meta();      if (since_meta != null) {        xml.append("since='").append(since_meta).append("' ");      }    }    xml.append(">");    if (metadataType == StandardDefs.MD_EVENT || metadataType == StandardDefs.MD_SKINSTATE || metadataType == StandardDefs.MD_SKINPART || metadataType == StandardDefs.MD_ALTERNATIVE || metadataType == StandardDefs.MD_DISCOURAGEDFORPROFILE || metadataType == StandardDefs.MD_EXPERIMENTAL) {      String desc=meta.getDescription();      if (desc != null)       appendTag("description",meta.getDescription());      emitTags(meta.getAllTags());    }    xml.append("\n\t</");    xml.append(metadataType);    xml.append(">\n</metadata>");  }}  }
class C{  public <T>JSONAPIDocument<List<T>> readDocumentCollection(byte[] data,Class<T> clazz){  return readDocumentCollection(new ByteArrayInputStream(data),clazz);}  }
class C{  private Product generateDownloadFile(final Product product){  String product_id=product.getIdentifier();  Map<String,String> checksums=null;  String[] algorithms=cfgManager.getDownloadConfiguration().getChecksumAlgorithms().split(",");  if (product_id == null)   throw new NullPointerException("Product \"" + product.getPath() + "\" identifier not initialized.");  String product_path=product.getPath().getPath();  if (UnZip.supported(product_path)) {    product.setDownloadablePath(product_path);    product.setDownloadableSize(new File(product_path).length());  }  File zip_file=null;  String zip_file_string=product.getDownloadablePath();  if ((zip_file_string == null) || (!(new File(zip_file_string).exists()))) {    File incoming=incomingManager.getNewIncomingPath();    AsyncFileLock afl=null;    try {      Path path=Paths.get(incoming.getAbsolutePath(),".lock-writing");      afl=new AsyncFileLock(path);      afl.obtain(900000);    } catch (    IOException|InterruptedException|TimeoutException e) {      LOGGER.warn("Cannot lock incoming directory - continuing without (" + e.getMessage() + ")");    }    zip_file=new File(incoming,(product_id + ".zip"));    LOGGER.info(zip_file.getName() + ": Generating zip file and its checksum.");    zip_file_string=zip_file.getPath();    try {      long start=System.currentTimeMillis();      LOGGER.info("Creation of downloadable archive into " + zip_file_string);      checksums=processZip(product.getPath().getPath(),zip_file);      long delay_ms=System.currentTimeMillis() - start;      long size_read=new File(product.getPath().getPath()).length() / (1024 * 1024);      long size_write=zip_file.length() / (1024 * 1024);      String message=" in " + delay_ms + "ms. Read "+ size_read+ "MB, Write "+ size_write+ "MB at "+ (size_write / ((float)(delay_ms + 1) / 1000))+ "MB/s";      LOGGER.info("Downloadable archive saved (" + product.getPath().getFile() + ")"+ message);    } catch (    IOException e) {      LOGGER.error("Cannot generate Zip archive for product \"" + product.getPath() + "\".",e);    } finally {      afl.close();    }    product.setDownloadablePath(zip_file_string);    product.setDownloadableSize(zip_file.length());  } else {    try {      if ((checksums=findLocalChecksum(zip_file_string)) == null) {        long start=System.currentTimeMillis();        LOGGER.info(new File(zip_file_string).getName() + ": Computing checksum only.");        checksums=processChecksum(zip_file_string,algorithms);        long delay_ms=System.currentTimeMillis() - start;        long size=new File(zip_file_string).length() / (1024 * 1024);        String message=" in " + delay_ms + "ms. Read "+ size+ "MB at "+ (size / ((float)(delay_ms + 1) / 1000))+ "MB/s";        LOGGER.info("Checksum processed " + message);      } else {        LOGGER.info(new File(zip_file_string).getName() + ": Checksum retrieved from transfert.");      }    } catch (    Exception ioe) {      LOGGER.warn("cannot compute checksum.",ioe);    }  }  if (checksums != null) {    product.getDownload().getChecksums().clear();    product.getDownload().getChecksums().putAll(checksums);  }  return product;}  }
class C{  public static String concatenateWhere(String a,String b){  if (TextUtils.isEmpty(a)) {    return b;  }  if (TextUtils.isEmpty(b)) {    return a;  }  return "(" + a + ") AND ("+ b+ ")";}  }
class C{  private Population copy(Population population){  Population result=new Population();  for (  Solution solution : population) {    result.add(solution);  }  return result;}  }
class C{  @Override public final double splitCritValue(Distribution bags){  double numerator;  numerator=oldEnt(bags) - newEnt(bags);  if (Utils.eq(numerator,0)) {    return Double.MAX_VALUE;  }  return bags.total() / numerator;}  }
class C{  synchronized static public boolean isAutoIncMode(){  return _autoIncMode;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static SequenceIndexContainer createBamIndexNoHeader(final InputStream bam,boolean expectHeader,int numReferences) throws IOException, UnindexableDataException {  final BamReader input=new BamReader(new BgzfInputStream(bam),expectHeader);  return createBamIndexInternal(input,numReferences,false);}  }
class C{  private String mapStyleName(String style){  if (styleNameMapping == null) {    return style;  }  String retValue=styleNameMapping.get(style);  return (retValue == null) ? style : retValue;}  }
class C{  public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener){  sharedPreferences.unregisterOnSharedPreferenceChangeListener(listener);}  }
class C{  public Maps(){}  }
class C{  public PowerModelSqrt(double maxPower,double staticPowerPercent){  setMaxPower(maxPower);  setStaticPower(staticPowerPercent * maxPower);  setConstant((maxPower - getStaticPower()) / Math.sqrt(100));}  }
class C{  public static boolean isTheSamePomodoroDay(@Nullable DateTime first,@Nullable DateTime second){  if (first != null && second != null) {    boolean sameDay=first.getYear() == second.getYear() && first.getDayOfYear() == second.getDayOfYear();    boolean isBothAfter6am=first.getHourOfDay() > 6 && second.getHourOfDay() > 6;    return sameDay && isBothAfter6am;  } else {    return false;  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private String doubleQuote(String param){  if (param != null) {    return "\"" + param + "\"";  }  return null;}  }
class C{  private void generateOutput(View view,TextAnnotation ta,String filename){  String outputstring=renderString(view,ta);  if (outdirectory == null) {    System.out.println(outputstring);  } else   if (outdirectory.isDirectory()) {    File outputfile=new File(outdirectory,filename);    OutFile of=new OutFile(outputfile.toString());    try {      of.print(outputstring);    }  finally {      of.close();    }  } else {    OutFile of=new OutFile(outdirectory.toString());    try {      of.print(outputstring);    }  finally {      of.close();    }  }}  }
class C{  public LogConfigurationException(String message){  super(message);}  }
class C{  public static void beginSection(String sectionName){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    beginSectionV18(sectionName);  }}  }
class C{  public ObjectIdentifier(int[] oid){  validate(oid);  this.oid=oid;}  }
class C{  public MultiPercolateRequestBuilder add(PercolateRequest percolateRequest){  request.add(percolateRequest);  return this;}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  public boolean mouseReleased(MouseEvent e){  return false;}  }
class C{  public boolean containsKey(Object obj){  return graphicHash.containsKey(obj);}  }
class C{  public String inputName(int inp,Object val){  if (inp == 0)   return "age";  if (inp == 1)   return "menopause";  if (inp == 2)   return "tumorSize";  if (inp == 3)   return "invNodes";  if (inp == 4)   return "nodeCaps";  if (inp == 5)   return "degMalig";  if (inp == 6)   return "breast";  if (inp == 7)   return "breastQuad";  if (inp == 8)   return "irrad";  if (inp == 9)   return "" + val;  if (inp == 10)   return "" + val;  if (inp == 11)   return "" + val; else   return "UNKNOWN INPUT";}  }
class C{  @Bean public MarshallingHttpMessageConverter marshallingMessageConverter(){  return new MarshallingHttpMessageConverter(jaxb2Marshaller(),jaxb2Marshaller());}  }
class C{  public static String escape(String value){  return escape(value,DEFAULT_QUOTE_CHARACTER);}  }
class C{  public void clear(){  histogram.clear();}  }
class C{  private void bindDictionaryData(final CategoryDTO instance,final Category category){  if (instance.getProductTypeId() != null && instance.getProductTypeId() > 0) {    category.setProductType(productTypeService.findById(instance.getProductTypeId()));  } else {    category.setProductType(null);  }}  }
class C{  public static int binarySearch(byte[] array,int startIndex,int endIndex,byte value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void doneDownload(){  ReplayManager.INSTANCE.taskHasCompleted(null);  String downloadStatusText=controller.getLocaliser().getString("multiBitDownloadListener.doneDownloadText");  Message message=new Message(downloadStatusText,true,Message.NOT_RELEVANT_PERCENTAGE_COMPLETE);  MessageManager.INSTANCE.addMessage(message);  message=new Message(downloadStatusText,100);  MessageManager.INSTANCE.addMessage(message);  for (  SingleWalletPanelDownloadListener singleWalletPanelDownloadListener : singleWalletPanelDownloadListeners) {    singleWalletPanelDownloadListener.doneDownload();  }  this.bitcoinController.fireBlockDownloaded();}  }
class C{  @Override public boolean ownInsertsAreVisible(int type){  debugCodeCall("ownInsertsAreVisible",type);  return false;}  }
class C{  private void parseHeat(Element heatTag,Entity entity){  String value=heatTag.getAttribute(SINK);  try {    int newSinks=Integer.parseInt(value);    ((Aero)entity).setHeatSinks(newSinks);  } catch (  Exception e) {    warning.append("Invalid heat sink value in heat sink tag.\n");  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Bean @ConditionalOnProperty(name="spring.mail.host",havingValue="foo",matchIfMissing=true) public MailSender mockMailSender(){  return new MockMailSender();}  }
class C{  public TDoubleFloatHashMapDecorator(TDoubleFloatHashMap map){  super();  this._map=map;}  }
class C{  public void addSupportRenderer(int index,SupportSeriesRender renderer){  mSupportRenders.add(index,renderer);}  }
class C{  public String sign(Map<String,String> params){  params.put("AWSAccessKeyId",this.awsAccessKeyId);  params.put("AssociateTag",this.associatetag);  params.put("Timestamp",this.timestamp());  SortedMap<String,String> sortedParamMap=new TreeMap<String,String>(params);  String canonicalQS=this.canonicalize(sortedParamMap);  String toSign=REQUEST_METHOD + "\n" + this.endpoint+ "\n"+ REQUEST_URI+ "\n"+ canonicalQS;  String hmac=this.hmac(toSign);  String sig=this.percentEncodeRfc3986(hmac);  String url="http://" + this.endpoint + REQUEST_URI+ "?"+ canonicalQS+ "&Signature="+ sig;  return url;}  }
class C{  public long skip(long bytes) throws IOException {  if (closed) {    throw new IOException("The stream is closed.");  }  int av=available();  if (av == 0) {    av=makeAvailable();    if (av == 0) {      return 0;    }  }  long res=Math.min(av,bytes);  head+=res;  return res;}  }
class C{  private void notifyCategorySelectionBean(){  CategorySelectionBean bean=ui.findCategorySelectionBean();  bean.resetCategoriesForMarketplace();}  }
class C{  public Anonymous_traceType_1_ createAnonymous_traceType_1_(){  Anonymous_traceType_1_Impl anonymous_traceType_1_=new Anonymous_traceType_1_Impl();  return anonymous_traceType_1_;}  }
class C{  public void addViewOnDrag(View view){  eraseViewIfNeeded(dragView);  dragView.addView(view);}  }
class C{  public static void putUnsignedByte(ByteBuffer bb,short v,int offset){  bb.put(offset,(byte)(v & 0xff));}  }
class C{  public ObligationPolicyDatabaseEntry addParameterDeletesObligationDatabaseEntry(XMethod xmethod,Obligation obligation,ObligationPolicyDatabaseEntryType entryType){  ObligationPolicyDatabaseEntry entry=new MatchMethodEntry(xmethod,ObligationPolicyDatabaseActionType.DEL,entryType,obligation);  addEntry(entry);  return entry;}  }
class C{  public static void testIDW(){  System.out.println("");  logger.info("-----Test of the inverse distance weighting method for interpolation-----");  for (int exp=1; exp <= 10; exp++) {    try {      out.write("\nidw with four neighbors and exp " + exp + "\t");    } catch (    IOException e) {      e.printStackTrace();    }    interpolationTest(Interpolation.INVERSE_DISTANCE_WEIGHTING,1,2,exp);    interpolationTest(Interpolation.INVERSE_DISTANCE_WEIGHTING,3,3,exp);    interpolationTest(Interpolation.INVERSE_DISTANCE_WEIGHTING,10,10,exp);  }}  }
class C{  public void displayState(int state){  if (getNamedTurnout() == null) {    log.debug("Display state " + state + ", disconnected");  } else {    if (isText()) {      super.setText(_state2nameMap.get(state));    }    if (isIcon()) {      NamedIcon icon=getIcon(state);      if (icon != null) {        super.setIcon(icon);      }    }  }  updateSize();}  }
class C{  public static String createGridNodeId(int x,int y){  return (x + "_" + y);}  }
class C{  public long remaining(){  return getBytesWritten() - getBytesRead();}  }
class C{  private void checkLambdaCompatible(JCLambda tree,Type descriptor,CheckContext checkContext){  Type returnType=checkContext.inferenceContext().asFree(descriptor.getReturnType());  if (tree.getBodyKind() == JCLambda.BodyKind.STATEMENT && tree.canCompleteNormally && !returnType.hasTag(VOID) && returnType != Type.recoveryType) {    checkContext.report(tree,diags.fragment("incompatible.ret.type.in.lambda",diags.fragment("missing.ret.val",returnType)));  }  List<Type> argTypes=checkContext.inferenceContext().asFree(descriptor.getParameterTypes());  if (!types.isSameTypes(argTypes,TreeInfo.types(tree.params))) {    checkContext.report(tree,diags.fragment("incompatible.arg.types.in.lambda"));  }}  }
class C{  private static String formatSecondsIntervalFloored(Context context,long secondsInterval){  String formattedString;  if (secondsInterval < 0) {    formattedString="0" + context.getResources().getString(R.string.format_time_s);  } else {    if (secondsInterval < 60) {      formattedString=secondsInterval + context.getResources().getString(R.string.format_time_s);    } else     if (secondsInterval < 3600) {      formattedString=(secondsInterval / 60) + context.getResources().getString(R.string.format_time_m);    } else     if (secondsInterval < 86400) {      formattedString=(secondsInterval / 3600) + context.getResources().getString(R.string.format_time_h);    } else {      formattedString=(secondsInterval / 86400) + context.getResources().getString(R.string.format_time_d);    }  }  return formattedString;}  }
class C{  protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config,SettableBeanProperty prop){  JsonDeserializer<Object> deser=prop.getValueDeserializer();  if (deser instanceof BeanDeserializer) {    BeanDeserializer bd=(BeanDeserializer)deser;    ValueInstantiator vi=bd.getValueInstantiator();    if (!vi.canCreateUsingDefault()) {      Class<?> valueClass=prop.getType().getRawClass();      Class<?> enclosing=ClassUtil.getOuterClass(valueClass);      if (enclosing != null && enclosing == _beanType.getRawClass()) {        for (        Constructor<?> ctor : valueClass.getConstructors()) {          Class<?>[] paramTypes=ctor.getParameterTypes();          if (paramTypes.length == 1 && paramTypes[0] == enclosing) {            if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {              ClassUtil.checkAndFixAccess(ctor);            }            return new SettableBeanProperty.InnerClassProperty(prop,ctor);          }        }      }    }  }  return prop;}  }
class C{  public static Intent buildFileProviderReadUriIntent(Context context,String pathName,String action,String type){  Uri uri=FileProvider.getUriForFile(context,getFileProviderAuthority(),new File(pathName));  Intent intent=new Intent().setAction(action).setDataAndType(uri,type);  grantUriPermissions(context,intent,Intent.FLAG_GRANT_READ_URI_PERMISSION);  return intent;}  }
class C{  public void respond(String response){  respondWith(response);}  }
class C{  public int doStartTag() throws JspException {  Properties ctx=JSPEnv.getCtx((HttpServletRequest)pageContext.getRequest());  int AD_Client_ID=Env.getContextAsInt(ctx,"AD_Client_ID");  int M_PriceList_ID=m_priceList_ID;  if (M_PriceList_ID == 0)   M_PriceList_ID=Env.getContextAsInt(ctx,"M_PriceList_ID");  WebUser wu=(WebUser)pageContext.getSession().getAttribute(WebUser.NAME);  if (wu != null) {    int PriceList_ID=wu.getM_PriceList_ID();    if (PriceList_ID != 0) {      log.fine("- using BP PriceList_ID=" + PriceList_ID);      M_PriceList_ID=PriceList_ID;    }  }  String searchString=ctx.getProperty(ProductServlet.P_SEARCHSTRING);  String productCategory=ctx.getProperty(ProductServlet.P_M_PRODUCT_CATEGORY_ID);  m_priceList=PriceList.get(ctx,AD_Client_ID,M_PriceList_ID,searchString,productCategory,false);  if (M_PriceList_ID == 0)   Env.setContext(ctx,"#M_PriceList_ID",m_priceList.getPriceList_ID());  HttpSession session=pageContext.getSession();  session.setAttribute(PriceList.NAME,m_priceList);  log.fine("PL=" + m_priceList);  String AD_Language=m_priceList.getAD_Language();  if (AD_Language == null || AD_Language.length() == 0)   AD_Language="en_US";  Config.set(session,Config.FMT_LOCALE,AD_Language);  Config.set(session,Config.FMT_FALLBACK_LOCALE,"en_US");  return (SKIP_BODY);}  }
class C{  public static void main(String[] args) throws Exception {  CommandLine cmd=getCommandLine(args);  String[] actualArgs=cmd.getArgs();  if (actualArgs.length == 2) {    System.exit(download(actualArgs[0],actualArgs[1]));  } else   if (actualArgs.length == 1) {    System.exit(validate(actualArgs[0],cmd.hasOption(OPTION_VERIFY_PRIVATE_PARAMS_EXISTS)));  } else {    startDaemon();  }}  }
class C{  protected int cautionAddrSet(){  log.info("Caution: Set locoio address is a broadcast operation");  return JOptionPane.showOptionDialog(this,"This will set the address of all attached LocoIO boards","Global operation!",0,JOptionPane.INFORMATION_MESSAGE,null,new Object[]{"Cancel","OK"},null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isClientNewerThan(String version){  if (clientVersion == null) {    return false;  }  return Version.compare(clientVersion,version) > 0;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getPlanNodeTableDao() : null;}  }
class C{  private static SafePath findSafePath(final SafePath currentPath,final List<GeoPoint> points,final int pointIndex,final int startPointIndex,final double leniencyValue){  int considerPointIndex=pointIndex;  while (true) {    final GeoPoint considerStartPoint=currentPath.lastPoint;    final GeoPoint considerEndPoint=points.get(considerPointIndex);    final int nextPointIndex=getLegalIndex(considerPointIndex + 1,points.size());    if (!considerStartPoint.isNumericallyIdentical(considerEndPoint)) {      final Plane considerPlane=new Plane(considerStartPoint,considerEndPoint);      boolean isChoiceLegal=true;      if (isChoiceLegal) {        if (currentPath.lastPlane != null) {          if (currentPath.lastPlane.evaluateIsZero(considerEndPoint)) {            isChoiceLegal=false;          } else           if (considerPlane.evaluateIsZero(currentPath.previous.lastPoint)) {            isChoiceLegal=false;          } else {            final Plane thirdPlane=new Plane(currentPath.previous.lastPoint,considerEndPoint);            if (thirdPlane.evaluateIsZero(considerStartPoint)) {              isChoiceLegal=false;            }          }        }      }      if (isChoiceLegal && considerPointIndex == startPointIndex) {        final SafePath firstPlaneEndpoint=currentPath.findFirstEndpoint();        if (firstPlaneEndpoint == null) {          isChoiceLegal=false;        } else {          if (firstPlaneEndpoint.lastPlane.evaluateIsZero(considerStartPoint)) {            isChoiceLegal=false;          } else           if (considerPlane.evaluateIsZero(firstPlaneEndpoint.lastPoint)) {            isChoiceLegal=false;          } else {            final Plane thirdPlane=new Plane(considerStartPoint,firstPlaneEndpoint.lastPoint);            if (thirdPlane.evaluateIsZero(considerEndPoint)) {              isChoiceLegal=false;            }          }        }      }      if (isChoiceLegal) {        int checkIndex=getLegalIndex(currentPath.lastPointIndex + 1,points.size());        while (checkIndex != considerPointIndex) {          if (Math.abs(considerPlane.evaluate(points.get(checkIndex))) >= Vector.MINIMUM_RESOLUTION + leniencyValue) {            return null;          }          checkIndex=getLegalIndex(checkIndex + 1,points.size());        }      }      if (isChoiceLegal) {        if (considerPointIndex == startPointIndex) {          return currentPath;        }        final SafePath newPath=new SafePath(currentPath,considerEndPoint,considerPointIndex,considerPlane);        final SafePath result=findSafePath(newPath,points,nextPointIndex,startPointIndex,leniencyValue);        if (result != null) {          return result;        }      }    }    if (considerPointIndex == startPointIndex) {      break;    }    considerPointIndex=nextPointIndex;  }  return null;}  }
class C{  public static void geofence(Context context,int transition,long restaurantId){switch (transition) {case GEOFENCE_TRANSITION_ENTER:    event("restaurant","enter");  if (Restaurants.isOpen(restaurantId) == FALSE) {    break;  }EasyCursor restaurant=restaurant(restaurantId);if (restaurant.moveToFirst()) {String name=restaurant.getString(Restaurants.NAME);BigTextStyle style=new BigTextStyle();Review.Type reviewType=null;EasyCursor review=review(restaurantId);if (review.moveToFirst()) {  style.bigText(context.getString(R.string.review_metadata,ReviewAdapter.name(context,review),ReviewAdapter.time(context,review),review.getInt(Reviews.RATING)) + "\n" + ReviewAdapter.comments(review));  reviewType=Type.get(review.getInt(Reviews.TYPE_ID));} else {  style.bigText(restaurant.getString(Restaurants.NOTES));}review.close();Bitmap icon=photo(context,RestaurantPhotos.uriForRestaurant(restaurantId));Notification notif=new Builder(context).setOnlyAlertOnce(true).setTicker(name).setContentTitle(name).setStyle(style).setLargeIcon(icon).setSmallIcon(R.drawable.stat_logo).setContentIntent(view(context,restaurantId,false,reviewType)).addAction(R.drawable.ic_action_location_off,context.getString(R.string.ignore_restaurant),ignore(context,restaurantId)).build();Managers.notification(context).notify(TAG_GEOFENCE,(int)restaurantId,notif);}restaurant.close();break;case GEOFENCE_TRANSITION_DWELL:event("restaurant","dwell");if (Restaurants.isOpen(restaurantId) == FALSE) {break;}visiting(restaurantId,true);break;case GEOFENCE_TRANSITION_EXIT:event("restaurant","exit");restaurant=restaurant(restaurantId);if (restaurant.moveToFirst() && restaurant.getInt(Restaurants.VISITING) != 0) {visiting(restaurantId,false);if (!alreadyReviewed(restaurantId)) {String name=restaurant.getString(Restaurants.NAME);Bitmap icon=photo(context,RestaurantPhotos.uriForRestaurant(restaurantId));Notification notif=new Builder(context).setOnlyAlertOnce(true).setTicker(name).setContentTitle(name).setContentText(context.getString(R.string.comments_hint)).setLargeIcon(icon).setSmallIcon(R.drawable.stat_logo).setContentIntent(view(context,restaurantId,true,PRIVATE)).setAutoCancel(true).addAction(R.drawable.ic_action_location_off,context.getString(R.string.ignore_restaurant),ignore(context,restaurantId)).build();Managers.notification(context).notify(TAG_GEOFENCE,(int)restaurantId,notif);} else {Managers.notification(context).cancel(TAG_GEOFENCE,(int)restaurantId);}} else {Managers.notification(context).cancel(TAG_GEOFENCE,(int)restaurantId);}restaurant.close();break;}}  }
class C{  public final void writeInt(int[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    writeInt(pa[start + i]);  }}  }
class C{  public Workflow.Method zoneExportRemoveVolumesMethod(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs){  return new Workflow.Method("zoneExportRemoveVolumes",zoningParams,volumeURIs);}  }
class C{  public void close() throws IOException {  br.close();}  }
class C{  public boolean ready(){  return readyStatus;}  }
class C{  public boolean pointInFrustum(Vector3 point){  for (int i=0; i < planes.length; i++) {    PlaneSide result=planes[i].testPoint(point);    if (result == PlaneSide.Back)     return false;  }  return true;}  }
class C{  private double median(List<Double> w){  if (w.size() == 1) {    return w.get(0);  }  List<Double> window=new ArrayList<Double>(w.size());  for (  Double v : w) {    if (!MathUtils.isCalculatable(v)) {      return Double.NaN;    }    window.add(v);  }  int medianIndex=MathUtils.randomizedSelect(window,0,window.size() - 1,window.size() / 2);  double median=window.get(medianIndex);  if ((window.size() & 1) == 0) {    int medianUpperIndex=MathUtils.randomizedSelect(window,0,window.size() - 1,window.size() / 2 + 1);    double medianUpper=window.get(medianUpperIndex);    median=(median + medianUpper) / 2.0;  }  return median;}  }
class C{  public int numRules(){  return theRules.size();}  }
class C{  public StandardizedSemImImpliedCovTable(StandardizedSemIm semIm,boolean measured,boolean correlations){  this.semIm=semIm;  this.measured=measured;  this.correlations=correlations;  this.nf=NumberFormatUtil.getInstance().getNumberFormat();  if (measured() && covariances()) {    matrix=getSemIm().getImplCovarMeas().toArray();  } else   if (measured() && !covariances()) {    matrix=corr(getSemIm().getImplCovarMeas().toArray());  } else   if (!measured() && covariances()) {    TetradMatrix implCovarC=getSemIm().getImplCovar();    matrix=implCovarC.toArray();  } else   if (!measured() && !covariances()) {    TetradMatrix implCovarC=getSemIm().getImplCovar();    matrix=corr(implCovarC.toArray());  }}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  public void addSelectionListener(SelectionListener l){  model.addSelectionListener(l);}  }
class C{  public void handleError(SVGGraphics2DRuntimeException ex) throws SVGGraphics2DRuntimeException {  System.err.println(ex.getMessage());}  }
class C{  public Vector3f normalizeLocal(){  float length=x * x + y * y + z * z;  if (length != 1f && length != 0f) {    length=1.0f / FastMath.sqrt(length);    x*=length;    y*=length;    z*=length;  }  return this;}  }
class C{  public SupplierRevenueShareResult build(Long supplierKey,long periodStartTime,long periodEndTime) throws DatatypeConfigurationException {  Invariants.assertNotNull(supplierKey);  result=new SupplierRevenueShareResult();  OrganizationHistory org=billingRetrievalService.loadLastOrganizationHistory(supplierKey);  result.setOrganizationData(buildOrganizationData(org));  setSupplierData(supplierKey);  setPeriod(periodStartTime,periodEndTime);  List<BillingResult> billingResults=billingRetrievalService.loadBillingResultsForSupplier(supplierKey,periodStartTime,periodEndTime);  for (  BillingResult billingResult : billingResults) {    currentBillingResult=billingResult;    xmlSearch=newXmlSearch(currentBillingResult);    addCurrency();  }  return result;}  }
class C{  public void possiblyDisposeOfTipWindow(){  if (tipWindow != null) {    tipWindow.dispose();    tipWindow=null;    textAreaListener.uninstall();    tipVisibleBounds.setBounds(-1,-1,0,0);    lastText=null;    textArea.requestFocus();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.551 -0500",hash_original_method="CFD9FB1CAAFA0B398D0DDE009E39DD95",hash_generated_method="5768348636FA99EA8D51BE31A105096C") public int lineno(){  return lineNumber;}  }
class C{  protected static Version normalizeIncompatibleImprovementsVersion(Version incompatibleImprovements){  _TemplateAPI.checkVersionNotNullAndSupported(incompatibleImprovements);  if (incompatibleImprovements.intValue() < _TemplateAPI.VERSION_INT_2_3_0) {    throw new IllegalArgumentException("Version must be at least 2.3.0.");  }  return is2324Bugfixed(incompatibleImprovements) ? Configuration.VERSION_2_3_24 : is2321Bugfixed(incompatibleImprovements) ? Configuration.VERSION_2_3_21 : Configuration.VERSION_2_3_0;}  }
class C{  public synchronized <T extends Response>long request(Request<T> request,RpcCallback<T> callback,long timeout){  if (request == null) {    throw new RuntimeException("Request can't be null");  }  long rid=NEXT_RPC_ID.incrementAndGet();  this.apiBroker.send(new ApiBroker.PerformRequest(rid,request,callback,timeout));  return rid;}  }
class C{  public boolean instructionIsLoad(InstructionHandle handle){  return loadHandleSet.get(handle.getPosition());}  }
class C{  public boolean exists(World world){  return world.getChunkProvider().chunkExists(xCoord,zCoord);}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer("MElementValue[");  sb.append(get_ID()).append(",").append(getValue()).append(" - ").append(getName()).append("]");  return sb.toString();}  }
class C{  public void testDoubleValueNegativeInfinity1(){  String a="-2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == Double.NEGATIVE_INFINITY);}  }
class C{  public boolean annotate(){  return soot.PhaseOptions.getBoolean(options,"annotate");}  }
class C{  @Override public boolean canWrite(Object obj,Throwable err){  return obj instanceof Collection && err == null;}  }
class C{  protected void run(String... args){  long time=System.currentTimeMillis();  if (args.length == 0) {    all();  } else {    for (    String a : args) {      if ("-quiet".equals(a)) {        quiet=true;      } else       if ("-".equals(a)) {        runShell();        return;      } else       if (a.startsWith("-D")) {        String value;        String key=a.substring(2);        int valueIndex=key.indexOf('=');        if (valueIndex >= 0) {          value=key.substring(valueIndex + 1);          key=key.substring(0,valueIndex);        } else {          value="true";        }        System.setProperty(key,value);      } else {        if (!runTarget(a)) {          break;        }      }    }  }  println("Done in " + (System.currentTimeMillis() - time) + " ms");}  }
class C{  private static Exception extractException(Exception e){  while (e instanceof PrivilegedActionException) {    e=((PrivilegedActionException)e).getException();  }  return e;}  }
class C{  public void print(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    int ch=s.charAt(i);    os.write(ch);  }}  }
class C{  @Override protected boolean optimizeBranchInstruction(IR ir,Instruction s,BasicBlock bb){  if (isMIR_Branch(s)) {    return processGoto(ir,s,bb);  } else   if (isMIR_CondBranch(s)) {    return processCondBranch(ir,s,bb);  } else   if (isMIR_CondBranch2(s)) {    return processTwoTargetConditionalBranch(ir,s,bb);  } else {    return false;  }}  }
class C{  protected void sendMessage(HttpServletResponse response,String message) throws IOException {  PrintWriter writer=response.getWriter();  writer.println("OK - " + message);}  }
class C{  protected void updateTree(DocumentEvent event){  updatingSelection=true;  try {    TreeModel model=getTreeModel();    Object root=model.getRoot();    for (int counter=model.getChildCount(root) - 1; counter >= 0; counter--) {      updateTree(event,(Element)model.getChild(root,counter));    }  }  finally {    updatingSelection=false;  }}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  Canvas canvas=new Canvas();  funcPlotterCtrl=new FunctionPlotterCtrl(canvas);  funcPlotterCtrl.setLimits(Functions.minX,Functions.maxX,Functions.minY,Functions.maxY);  Parameter[] params=createParameters();  SimulationPaneBuilder builder=new SimulationPaneBuilder();  builder.defineParameters(params);  builder.defineStateView(canvas);  builder.defineInitMethod(null);  builder.defineSimMethod(null);  simPaneCtrl=builder.getResultFor(root);  simPaneCtrl.setParam(SimulationPaneCtrl.PARAM_SIM_SPEED,1);  return root;}  }
class C{  private ZyEdgeBuilder(){}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public CProjectsModel(final IDatabase database){  Preconditions.checkNotNull(database,"IE01989: Database argument can't be null");  m_database=database;  database.addListener(m_databaseListener);  if (database.isLoaded()) {    final List<INaviProject> projects=database.getContent().getProjects();    for (    final INaviProject project : projects) {      project.addListener(m_projectListener);    }  }}  }
class C{  public boolean empty(){  return size == 0;}  }
class C{  public BaseServerException(String message,int msgId,int errorCode){  super(message);  this.msgId=msgId;  this.errorCode=errorCode;}  }
class C{  private void testTransaction(IgniteCache<Integer,Object> cache,TransactionConcurrency concurrency,Integer key,byte[] val) throws Exception {  testTransactionMixed(cache,concurrency,key,val,null,null);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.771 -0500",hash_original_method="6BE32B941606799E1C4582399143D6DE",hash_generated_method="9D26B14C7A6A2DAA4F9CFE07029C4107") public IntentFilter(String action){  mPriority=0;  addAction(action);}  }
class C{  public String globalInfo(){  return "Class for combining classifiers. Different combinations of " + "probability estimates for classification are available.\n\n" + "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.FACET__KEY:    setKey((String)newValue);  return;case GamlPackage.FACET__EXPR:setExpr((Expression)newValue);return;case GamlPackage.FACET__BLOCK:setBlock((Block)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void showError(Context c,String tag,String log,String toast){  showError(c,tag,log,null,toast);}  }
class C{  protected boolean isPossibleToDequeueGroupChatMessagesAndGroupFileTransfers(String chatId){  if (!mRcsSettings.isGroupChatActivated()) {    if (mLogger.isActivated()) {      mLogger.debug("Cannot dequeue group chat messages and file transfers right now as group chat feature is not activated!");    }    return false;  }  if (mChatService.isGroupChatAbandoned(chatId)) {    if (mLogger.isActivated()) {      mLogger.debug(new StringBuilder("Cannot dequeue group chat messages and group file transfers right now as the group chat with chatId '").append(chatId).append("' is abandoned and can be no more used to send or receive messages.").toString());    }    return false;  }  final GroupChatSession groupChatSession=mImService.getGroupChatSession(chatId);  if (groupChatSession == null) {    GroupChatInfo groupChat=mMessagingLog.getGroupChatInfo(chatId);    if (groupChat == null) {      if (mLogger.isActivated()) {        mLogger.debug(new StringBuilder("Cannot dequeue group chat messages and group file transfers as the group chat with group chat Id '").append(chatId).append("' is not rejoinable as the group chat does not exist in DB.").toString());      }      return false;    }    if (groupChat.getRejoinId() == null) {      if (mLogger.isActivated()) {        mLogger.debug(new StringBuilder("Cannot dequeue group chat messages and group file transfers as thr group chat with group chat Id '").append(chatId).append("' is not rejoinable as there is no ongoing session with " + "corresponding chatId and there exists no rejoinId to " + "rejoin the group chat.").toString());      }      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:25.954 -0500",hash_original_method="5F8774B802EBD1C84B8B67985F8F69FE",hash_generated_method="405BDD8BFD91234FD09CF1AC522A702C") public String encode(){  StringBuilder buffer=new StringBuilder();  mFields.write(buffer);  for (  Media media : mMedia) {    media.write(buffer);  }  return buffer.toString();}  }
class C{  void paintVerScrollbar(Graphics g,Color colors[],boolean paintAll){  if (vsbSpace <= 0) {    return;  }  Graphics ng=g.create();  g.setColor(colors[BACKGROUND_COLOR]);  int h=height - hsbSpace - (2 * MARGIN);  g.fillRect(width - SCROLLBAR,MARGIN,SPACE,h);  g.fillRect(width - SCROLLBAR,0,SCROLLBAR,MARGIN);  g.fillRect(width - SCROLLBAR,MARGIN + h,SCROLLBAR,MARGIN);  try {    ng.translate(width - (SCROLLBAR - SPACE),MARGIN);    vsb.paint(ng,colors,paintAll);  }  finally {    ng.dispose();  }}  }
class C{  public String authenticateAnonymously() throws XMPPException {  try {    currentMechanism=new SASLAnonymous(this);    currentMechanism.authenticate(null,null,"");synchronized (this) {      if (!saslNegotiated && !saslFailed) {        try {          wait(5000);        } catch (        InterruptedException e) {        }      }    }    if (saslFailed) {      if (errorCondition != null) {        throw new XMPPException("SASL authentication failed: " + errorCondition);      } else {        throw new XMPPException("SASL authentication failed");      }    }    if (saslNegotiated) {      return bindResourceAndEstablishSession(null);    } else {      return new NonSASLAuthentication(connection).authenticateAnonymously();    }  } catch (  IOException e) {    return new NonSASLAuthentication(connection).authenticateAnonymously();  }}  }
class C{  public LoginScreenLayout(){  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,499,261);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(new BorderLayout(-2,-2));  contentPane.add(getPanel_1(),BorderLayout.NORTH);  contentPane.add(getPanel_1_1(),BorderLayout.SOUTH);  contentPane.add(getPanelLeft(),BorderLayout.WEST);  contentPane.add(getPanelRight(),BorderLayout.EAST);  contentPane.add(getPanelCenter(),BorderLayout.CENTER);}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  write(node,source,source.getClass());}  }
class C{  public static double rRAEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public void importUsersFromJames23(String defaultPassword) throws MessagingException, UsersRepositoryException, DomainListException {  Iterator<String> j23uIt=james23UsersRepository.list();  while (j23uIt.hasNext()) {    String userName23=j23uIt.next();    String userName30=convert23UserTo30(userName23);    james30UsersRepository.addUser(userName30,defaultPassword);    log.info("New user is copied from 2.3 to 3.0 with username=" + userName30);  }}  }
class C{  public static void reverse(double[] y){  int i=0;  int j=y.length - 1;  while (i < j) {    double tmp=y[i];    y[i]=y[j];    y[j]=tmp;    i++;    j--;  }}  }
class C{  public static Validator<CharSequence> domainName(@NonNull final Context context){  return new DomainNameValidator(context,R.string.default_error_message);}  }
class C{  public TSink<JsonObject> send(TStream<JsonObject> stream){  Objects.requireNonNull(stream,"stream");  return sendText(stream,JsonFunctions.asString());}  }
class C{  protected Command createMenuCancelCommand(){  UIManager manager=parent.getUIManager();  LookAndFeel lf=manager.getLookAndFeel();  return new Command(manager.localize("cancel","Cancel"),lf.getMenuIcons()[1]);}  }
class C{  @SuppressWarnings("cast") private long longFrom2Ints(int high,int low){  return (((long)high) << 32) | ((low & 0xFFFFFFFFL));}  }
class C{  private void replaceParentEntry(CacheDataPage parentDataPage,CacheDataPage childDataPage,Entry oldEntry) throws IOException {  DataPageExtra childExtra=childDataPage._extra;  updateParentEntry(parentDataPage,childDataPage,oldEntry,childExtra._entryView.getLast(),UpdateType.REPLACE);}  }
class C{  @Override public void execute(FacesContext facesContext) throws FacesException {  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("Entering RestoreViewPhase");  }  if (null == facesContext) {    throw new FacesException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_CONTEXT_ERROR_MESSAGE_ID));  }  UIViewRoot viewRoot=facesContext.getViewRoot();  if (viewRoot != null) {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.fine("Found a pre created view in FacesContext");    }    facesContext.getViewRoot().setLocale(facesContext.getExternalContext().getRequestLocale());    deliverPostRestoreStateEvent(facesContext);    if (!facesContext.isPostback()) {      facesContext.renderResponse();    }    return;  }  FacesException thrownException=null;  try {    Map requestMap=facesContext.getExternalContext().getRequestMap();    String viewId=(String)requestMap.get("javax.servlet.include.path_info");    if (viewId == null) {      viewId=facesContext.getExternalContext().getRequestPathInfo();    }    if (viewId == null) {      viewId=(String)requestMap.get("javax.servlet.include.servlet_path");    }    if (viewId == null) {      viewId=facesContext.getExternalContext().getRequestServletPath();    }    if (viewId == null) {      throw new FacesException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_REQUEST_VIEW_ERROR_MESSAGE_ID));    }    ViewHandler viewHandler=Util.getViewHandler(facesContext);    boolean isPostBack=(facesContext.isPostback() && !isErrorPage(facesContext));    if (isPostBack) {      facesContext.setProcessingEvents(false);      viewRoot=viewHandler.restoreView(facesContext,viewId);      if (viewRoot == null) {        if (is11CompatEnabled(facesContext)) {          if (LOGGER.isLoggable(Level.FINE)) {            LOGGER.fine("Postback: recreating a view for " + viewId);          }          viewRoot=viewHandler.createView(facesContext,viewId);          facesContext.renderResponse();        } else {          Object[] params={viewId};          throw new ViewExpiredException(MessageUtils.getExceptionMessageString(MessageUtils.RESTORE_VIEW_ERROR_MESSAGE_ID,params),viewId);        }      }      facesContext.setViewRoot(viewRoot);      facesContext.setProcessingEvents(true);      if (LOGGER.isLoggable(Level.FINE)) {        LOGGER.fine("Postback: restored view for " + viewId);      }    } else {      if (LOGGER.isLoggable(Level.FINE)) {        LOGGER.fine("New request: creating a view for " + viewId);      }      String derivedViewId=viewHandler.deriveLogicalViewId(facesContext,viewId);      ViewDeclarationLanguage vdl=viewHandler.getViewDeclarationLanguage(facesContext,derivedViewId);      maybeTakeProtectedViewAction(facesContext,viewHandler,vdl,derivedViewId);      ViewMetadata metadata=null;      if (vdl != null) {        metadata=vdl.getViewMetadata(facesContext,derivedViewId);        if (metadata != null) {          viewRoot=metadata.createMetadataView(facesContext);          if (!ViewMetadata.hasMetadata(viewRoot)) {            facesContext.renderResponse();          }        }      }      if (null == vdl || null == metadata) {        facesContext.renderResponse();      }      if (null == viewRoot) {        viewRoot=(Util.getViewHandler(facesContext)).createView(facesContext,derivedViewId);      }      facesContext.setViewRoot(viewRoot);      assert (null != viewRoot);    }  } catch (  Throwable fe) {    if (fe instanceof FacesException) {      thrownException=(FacesException)fe;    } else {      thrownException=new FacesException(fe);    }  } finally {    if (null == thrownException) {      FlowHandler flowHandler=facesContext.getApplication().getFlowHandler();      if (null != flowHandler) {        flowHandler.clientWindowTransition(facesContext);      }      deliverPostRestoreStateEvent(facesContext);    } else {      throw thrownException;    }  }  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("Exiting RestoreViewPhase");  }}  }
class C{  @Override public void updateComboBox(JComboBox<String> box){  box.removeAllItems();  List<String> names=new ArrayList<String>();  for (  String type : CarTypes.instance().getNames()) {    for (    String load : getNames(type)) {      if (!names.contains(load)) {        names.add(load);      }    }  }  java.util.Collections.sort(names);  for (  String load : names) {    box.addItem(load);  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public boolean shouldCheckWhitespace(){  return null != m_whiteSpaceInfoList;}  }
class C{  private Workflow.Method createImportCopyMethod(URI vplexURI,List<VolumeDescriptor> volumeDescriptors,URI projectURI,URI tenantURI){  return new Workflow.Method(IMPORT_COPY_METHOD_NAME,vplexURI,volumeDescriptors,projectURI,tenantURI);}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  public boolean isSetSrcModifiedTime(){  return this.srcModifiedTime != null;}  }
class C{  public StringBuilder(int capacity){  super(capacity);}  }
class C{  public static IssuingDistributionPoint decode(byte[] encoding) throws IOException {  IssuingDistributionPoint idp=(IssuingDistributionPoint)ASN1.decode(encoding);  idp.encoding=encoding;  return idp;}  }
class C{  private void initializeKeyMap(AccessProfile accessProfile){  _keyMap.put(Constants.dbClient,_dbClient);  _keyMap.put(Constants.ACCESSPROFILE,accessProfile);  _keyMap.put(Constants.PROPS,accessProfile.getProps());  _keyMap.put(Constants._serialID,accessProfile.getserialID());  _keyMap.put(Constants._nativeGUIDs,Sets.newHashSet());}  }
class C{  public Reference<? extends T> remove(long timeout) throws InterruptedException {  long whenAwake=sysCall.sysNanoTime() + timeout * 1000L * 1000L;  lock.lockWithHandshake();  while (first == null && (timeout == 0 || sysCall.sysNanoTime() < whenAwake)) {    if (whenAwake == 0) {      lock.waitInterruptibly();    } else {      lock.timedWaitAbsoluteInterruptibly(whenAwake);    }  }  Reference<? extends T> result=dequeue();  lock.unlock();  return result;}  }
class C{  public ContactsAdapter(Context context){  super(context,null,0);  this.context=context;  userIdList=new ArrayList<String>();  mInflater=LayoutInflater.from(context);  final String alphabet=context.getString(R.string.alphabet);  mAlphabetIndexer=new AlphabetIndexer(null,1,alphabet);  highlightTextSpan=new TextAppearanceSpan(context,R.style.searchTextHiglight);}  }
class C{  public ServiceDiscovery registerServiceImporter(ServiceImporter importer,JsonObject configuration,Handler<AsyncResult<Void>> completionHandler){  ServiceDiscovery ret=ServiceDiscovery.newInstance(delegate.registerServiceImporter((io.vertx.servicediscovery.spi.ServiceImporter)importer.getDelegate(),configuration,completionHandler));  return ret;}  }
class C{  private static int findAnyZero(float[] a,int low,int high){  while (true) {    int middle=(low + high) >>> 1;    float middleValue=a[middle];    if (middleValue < 0.0f) {      low=middle + 1;    } else     if (middleValue > 0.0f) {      high=middle - 1;    } else {      return middle;    }  }}  }
class C{  public static long newRandomId(Map<Long,?> controlMap){  for (; ; ) {    long l=ThreadLocalRandom.current().nextLong();    if (l < IdValidator.MIN_VALID_ID || l > IdValidator.MAX_VALID_ID)     continue;    if (controlMap == null || !controlMap.containsKey(l))     return l;  }}  }
class C{  public Summary(String summary){  super(summary);}  }
class C{  public void addElement(int value){  if ((m_firstFree + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new int[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);      m_map=newMap;    }  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static String expand(String spec,boolean enhancedSyntax){  if (!isValid(spec,enhancedSyntax)) {    return spec;  }  return expand(split(spec,enhancedSyntax)).toString();}  }
class C{  protected static int calculateMemoryOffsetFromPixelOffsets(int inscribedXMin,int inscribedYMin,int subsample,int colorSubsample,int rowStride,int pixelStride,int inputHorizontalOffset,int inputVerticalOffset){  return inputVerticalOffset * (rowStride / subsample) + inputHorizontalOffset * (pixelStride / subsample) + (inscribedYMin / colorSubsample) * rowStride + (inscribedXMin / colorSubsample) * pixelStride;}  }
class C{  public boolean isPersistent(){  return m_persist;}  }
class C{  public HonoClientBuilder name(final String name){  this.name=name;  return this;}  }
class C{  private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=new Object[initialCapacity];}  }
class C{  public ConditionalGaussianLikelihood(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  this.dataSet=dataSet;  this.variables=dataSet.getVariables();  continuousData=new double[dataSet.getNumColumns()][];  discreteData=new int[dataSet.getNumColumns()][];  for (int j=0; j < dataSet.getNumColumns(); j++) {    Node v=dataSet.getVariable(j);    if (v instanceof ContinuousVariable) {      double[] col=new double[dataSet.getNumRows()];      for (int i=0; i < dataSet.getNumRows(); i++) {        col[i]=dataSet.getDouble(i,j);      }      continuousData[j]=col;    } else     if (v instanceof DiscreteVariable) {      int[] col=new int[dataSet.getNumRows()];      for (int i=0; i < dataSet.getNumRows(); i++) {        col[i]=dataSet.getInt(i,j);      }      discreteData[j]=col;    }  }  nodesHash=new HashMap<>();  for (int j=0; j < dataSet.getNumColumns(); j++) {    Node v=dataSet.getVariable(j);    nodesHash.put(v,j);  }  this.adTree=AdTrees.getAdLeafTree(dataSet);}  }
class C{  public Request cookie(String key,String value){  Objects.requireNonNull(key);  Objects.requireNonNull(value);  _cookies.put(key,value);  return this;}  }
class C{  public boolean isAnonymous(){  return getProperty(Annotations.ANONYMOUS,Annotations.DEFAULT_ANONYMOUS);}  }
class C{  private void computeSSA(IR ir,boolean scalarsOnly,boolean backwards,Set<Object> heapTypes,boolean insertUsePhis,boolean insertPEIDeps,boolean excludeGuards){  if (ir.options.READS_KILL)   insertUsePhis=true;  if (!scalarsOnly) {    ir.HIRInfo.dictionary=new SSADictionary(heapTypes,insertUsePhis,insertPEIDeps,ir);  } else {    ir.HIRInfo.dictionary=new SSADictionary(null,insertUsePhis,insertPEIDeps,ir);  }  if (DEBUG)   System.out.println("Computing register lists...");  DefUse.computeDU(ir);  DefUse.recomputeSSA(ir);  Register[] symbolicRegisters=getSymbolicRegisters();  if (DEBUG)   System.out.println("Find defs for each register...");  BitVector[] defSets=getDefSets();  if (DEBUG)   System.out.println("Insert phi functions...");  insertPhiFunctions(ir,defSets,symbolicRegisters,excludeGuards);  if (!scalarsOnly) {    insertHeapVariables(ir,backwards);  }  if (DEBUG)   System.out.println("Before renaming...");  if (DEBUG)   SSA.printInstructions(ir);  if (DEBUG)   System.out.println("Renaming...");  renameSymbolicRegisters(symbolicRegisters);  if (!scalarsOnly) {    renameHeapVariables(ir);  }  if (DEBUG)   System.out.println("SSA done.");  if (ir.options.PRINT_SSA)   SSA.printInstructions(ir);}  }
class C{  public boolean hasRelations(){  return hasRepeatingExtension(Relation.class);}  }
class C{  public static double poisson(double k,double x,boolean cum){  if ((x < 0) || (k < 1)) {    throw new ArithmeticException("The Poisson Distribution Function requires x>=0 and k >= 1");  }  k=k + 1;  if (cum) {    return (1.0 - igamma(k,x));  } else {    return ((Math.exp(-x) * Math.pow(x,k)) / gamma(k));  }}  }
class C{  private void transferItems(Player partner){  RPSlot playerTradeSlot=player.getSlot("trade");  RPSlot partnerTradeSlot=partner.getSlot("trade");  List<Item> playerItems=moveItemsFromSlotToList(playerTradeSlot);  List<Item> partnerItems=moveItemsFromSlotToList(partnerTradeSlot);  moveItemsFromListToSlotOrGround(null,player.getName(),partner.getName(),playerItems,partnerTradeSlot);  moveItemsFromListToSlotOrGround(null,partner.getName(),player.getName(),partnerItems,playerTradeSlot);}  }
class C{  public long add(BytesRef key,int code){  if (size >= maxSize) {    assert size == maxSize;    grow();  }  assert size < maxSize;  return set(key,rehash(code),size);}  }
class C{  public FastBufferedInputStream(final InputStream is,final byte[] buffer){  this.is=is;  ensureBufferSize(buffer.length);  this.buffer=buffer;  if (is instanceof RepositionableStream)   repositionableStream=(RepositionableStream)is;  if (is instanceof MeasurableStream)   measurableStream=(MeasurableStream)is;  if (repositionableStream == null) {    try {      fileChannel=(FileChannel)(is.getClass().getMethod("getChannel",new Class[]{})).invoke(is,new Object[]{});    } catch (    IllegalAccessException e) {    }catch (    IllegalArgumentException e) {    }catch (    NoSuchMethodException e) {    }catch (    java.lang.reflect.InvocationTargetException e) {    }catch (    ClassCastException e) {    }  }}  }
class C{  public String transform(String name,Instrumentation types,String version){  StringBuilder builder=new StringBuilder();  builder.append(types.isCompile() ? "COMPILE\r\n" : "NOCOMPILE\r\n");  for (int ruleno=0; ruleno < types.getRules().size(); ruleno++) {    InstrumentRule r=types.getRules().get(ruleno);    if (r.getClass() == JVM.class) {      JVM rule=(JVM)r;      if (!rule.isVersionValid(version)) {        continue;      }      builder.append("\r\n");      builder.append("RULE ");      builder.append(name);      builder.append('(');      builder.append(ruleno + 1);      builder.append(") ");      builder.append(rule.getRuleName());      builder.append("\r\n");      if (rule.getClassName() != null) {        builder.append("CLASS ");        builder.append(rule.getClassName());        builder.append("\r\n");      } else       if (rule.getInterfaceName() != null) {        builder.append("INTERFACE ");        builder.append(rule.getInterfaceName());        builder.append("\r\n");      }      builder.append("METHOD ");      builder.append(rule.getMethodName());      if (rule.getParameterTypes().size() != 1 || !rule.getParameterTypes().get(0).equals("*")) {        builder.append('(');        for (int i=0; i < rule.getParameterTypes().size(); i++) {          if (i > 0) {            builder.append(',');          }          builder.append(rule.getParameterTypes().get(i));        }        builder.append(')');      }      builder.append("\r\n");      builder.append("HELPER ");      if (rule.getHelper() == null) {        builder.append(RuleHelper.class.getName());      } else {        builder.append(rule.getHelper());      }      builder.append("\r\n");      builder.append("AT ");      builder.append(rule.getLocation());      builder.append("\r\n");      if (rule.isCompile() != types.isCompile()) {        builder.append(rule.isCompile() ? "COMPILE\r\n" : "NOCOMPILE\r\n");      }      if (!rule.getBinds().isEmpty()) {        builder.append("BIND ");        for (int i=0; i < rule.getBinds().size(); i++) {          InstrumentBind bind=rule.getBinds().get(i);          if (i > 0) {            builder.append("     ");          }          builder.append(bind.getName());          builder.append(" : ");          builder.append(bind.getType());          builder.append(" = ");          builder.append(bind.getExpression());          builder.append(";\r\n");        }      }      builder.append("IF ");      if (rule.getCondition() == null) {        builder.append("TRUE");      } else {        builder.append(rule.getCondition());      }      builder.append("\r\n");      builder.append("DO\r\n");      for (int i=0; i < rule.getActions().size(); i++) {        InstrumentAction action=rule.getActions().get(i);        builder.append("  ");        InstrumentActionTransformer transformer=transformers.get(action.getClass());        if (transformer != null) {          builder.append(transformer.convertToRuleAction(rule.getActions().get(i)));          if (i < rule.getActions().size() - 1) {            builder.append(";");          }          builder.append("\r\n");        } else {          System.err.println("Transformer for action '" + action.getClass() + "' not found");        }      }      builder.append("ENDRULE\r\n\r\n");    }  }  return builder.toString();}  }
class C{  public boolean isOwned(){  Object oo=get_Value(COLUMNNAME_IsOwned);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private SkipAction(){  super("Skip Step",new ImageIcon(CMain.class.getResource("data/arrow_right.png")));}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum < 2)   reportWrongNumberArgs();}  }
class C{  public SafeAsyncTask(Executor executor){  this.executor=executor;}  }
class C{  private void updateNominalElements(final AbstractAttributeStatisticsModel model){  String least=((NominalAttributeStatisticsModel)model).getLeast();  String leastTruncated=SwingTools.getShortenedDisplayName(least,17);  String most=((NominalAttributeStatisticsModel)model).getMost();  String mostTruncated=SwingTools.getShortenedDisplayName(most,17);  labelStatsLeast.setText(leastTruncated);  labelStatsLeast.setToolTipText(least);  labelStatsMost.setText(mostTruncated);  labelStatsMost.setToolTipText(most);  displayNominalValues();}  }
class C{  public static float[] convertSVGNumberList(SVGNumberList l){  int n=l.getNumberOfItems();  if (n == 0) {    return null;  }  float[] fl=new float[n];  for (int i=0; i < n; i++) {    fl[i]=l.getItem(i).getValue();  }  return fl;}  }
class C{  public SlidingGanttCategoryDataset(GanttCategoryDataset underlying,int firstColumn,int maxColumns){  this.underlying=underlying;  this.firstCategoryIndex=firstColumn;  this.maximumCategoryCount=maxColumns;}  }
class C{  private Note newNoteWithParagraphs(String noteName,String... parTexts){  Note note1=newNote(noteName);  for (  String parText : parTexts) {    addParagraphWithText(note1,parText);  }  return note1;}  }
class C{  public static String encodeECC200(String codewords,SymbolInfo symbolInfo){  if (codewords.length() != symbolInfo.getDataCapacity()) {    throw new IllegalArgumentException("The number of codewords does not match the selected symbol");  }  StringBuilder sb=new StringBuilder(symbolInfo.getDataCapacity() + symbolInfo.getErrorCodewords());  sb.append(codewords);  int blockCount=symbolInfo.getInterleavedBlockCount();  if (blockCount == 1) {    String ecc=createECCBlock(codewords,symbolInfo.getErrorCodewords());    sb.append(ecc);  } else {    sb.setLength(sb.capacity());    int[] dataSizes=new int[blockCount];    int[] errorSizes=new int[blockCount];    int[] startPos=new int[blockCount];    for (int i=0; i < blockCount; i++) {      dataSizes[i]=symbolInfo.getDataLengthForInterleavedBlock(i + 1);      errorSizes[i]=symbolInfo.getErrorLengthForInterleavedBlock(i + 1);      startPos[i]=0;      if (i > 0) {        startPos[i]=startPos[i - 1] + dataSizes[i];      }    }    for (int block=0; block < blockCount; block++) {      StringBuilder temp=new StringBuilder(dataSizes[block]);      for (int d=block; d < symbolInfo.getDataCapacity(); d+=blockCount) {        temp.append(codewords.charAt(d));      }      String ecc=createECCBlock(temp.toString(),errorSizes[block]);      int pos=0;      for (int e=block; e < errorSizes[block] * blockCount; e+=blockCount) {        sb.setCharAt(symbolInfo.getDataCapacity() + e,ecc.charAt(pos++));      }    }  }  return sb.toString();}  }
class C{  private void removeAdditionalParameters(List<VOTriggerProcessParameter> parameters){  for (Iterator<VOTriggerProcessParameter> it=parameters.iterator(); it.hasNext(); ) {    try {      VOTriggerProcessParameter parameter=it.next();      getActionParameter(parameter.getTriggerProcessKey().longValue(),parameter.getType());    } catch (    ObjectNotFoundException|OperationNotPermittedException e) {      it.remove();    }  }}  }
class C{  public ClientMessage sendMessage(Map<String,Object> properties){  ClientMessage message=createMessage(properties);  sendMessage(message);  return message;}  }
class C{  public TextEditor replaceAll(String regex,String replacement){  if (text.length() > 0) {    final String r=replacement;    Pattern p=Pattern.compile(regex,Pattern.MULTILINE);    Matcher m=p.matcher(text);    StringBuffer sb=new StringBuffer();    while (m.find()) {      m.appendReplacement(sb,r);    }    m.appendTail(sb);    text=sb;  }  return this;}  }
class C{  public void close() throws IOException {  if (closed) {    return;  }  if (queuedForCleanup) {    return;  }  try {    if (expected > count) {      long nskip=expected - count;      if (nskip <= available()) {        do {        } while ((nskip=(expected - count)) > 0L && skip(Math.min(nskip,available())) > 0L);      } else       if (expected <= KeepAliveStreamCleaner.MAX_DATA_REMAINING && !hurried) {        queueForCleanup(new KeepAliveCleanerEntry(this,hc));      } else {        hc.closeServer();      }    }    if (!closed && !hurried && !queuedForCleanup) {      hc.finished();    }  }  finally {    if (pi != null)     pi.finishTracking();    if (!queuedForCleanup) {      in=null;      hc=null;      closed=true;    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static public void inssort(int[] array,SortComparatorL comp){  int tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (comp.lt(array[j],array[j - 1])); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  public static void assertEquals(String message,AttributeRole expected,AttributeRole actual,boolean compareDefaultValues){  Assert.assertEquals(message + " (attribute role)",expected.getSpecialName(),actual.getSpecialName());  Attribute expectedAttribute=expected.getAttribute();  Attribute actualAttribute=actual.getAttribute();  assertEquals(message,expectedAttribute,actualAttribute,compareDefaultValues);}  }
class C{  public Vector2d mul(double scalar){  this.x*=scalar;  this.y*=scalar;  return this;}  }
class C{  @Override public String toString(){  return "" + entry.toString() + "("+ distance+ ")";}  }
class C{  public boolean contains(SortableValue keyValuePair){  if (doneContainsMap.containsKey(keyValuePair)) {    return doneContainsMap.get(keyValuePair);  }  for (  BugLeafNode p : filteredBugsCached().mainList) {    if (p.matches(keyValuePair)) {      doneContainsMap.put(keyValuePair,true);      return true;    }  }  doneContainsMap.put(keyValuePair,false);  return false;}  }
class C{  public static int[] generateRandomTernary(int N,int numOnes,int numNegOnes,SecureRandom random){  Integer one=Integers.valueOf(1);  Integer minusOne=Integers.valueOf(-1);  Integer zero=Integers.valueOf(0);  List list=new ArrayList();  for (int i=0; i < numOnes; i++) {    list.add(one);  }  for (int i=0; i < numNegOnes; i++) {    list.add(minusOne);  }  while (list.size() < N) {    list.add(zero);  }  Collections.shuffle(list,random);  int[] arr=new int[N];  for (int i=0; i < N; i++) {    arr[i]=((Integer)list.get(i)).intValue();  }  return arr;}  }
class C{  public void clearThemes(){  themes.clear();  fadeOutCurrentTheme();}  }
class C{  public static void printCheckbox(Writer out,String name,String value,boolean checked) throws IOException {  value=escape(value);  out.write("<label><input type=\"checkbox\" name=\"");  out.write(name);  out.write("\" value=\"");  out.write(value);  out.write("\"");  if (checked) {    out.write(" checked");  }  out.write("/>&nbsp;");  if (checked) {    out.write("<b>");  }  out.write(value);  if (checked) {    out.write("</b>");  }  out.write("</label>");}  }
class C{  public synchronized final void printTrace(final TLCState s1,final TLCState s2) throws IOException, WorkerException {  MP.printError(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);  long loc1=s1.uid;  TLCState lastState=null;  TLCStateInfo[] prefix=this.getTrace(loc1,false);  int idx=0;  while (idx < prefix.length) {    StatePrinter.printState(prefix[idx],lastState,idx + 1);    lastState=prefix[idx].state;    idx++;  }  TLCStateInfo sinfo;  if (prefix.length == 0) {    sinfo=this.tool.getState(s1.fingerPrint());    if (sinfo == null) {      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);      MP.printError(EC.TLC_BUG,"3");      System.exit(1);    }  } else {    TLCState s0=prefix[prefix.length - 1].state;    sinfo=this.tool.getState(s1.fingerPrint(),s0);    if (sinfo == null) {      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);      MP.printError(EC.TLC_BUG,"4");      StatePrinter.printState(s1);      System.exit(1);    }  }  if (s2 == null) {    lastState=null;  }  StatePrinter.printState(sinfo,lastState,++idx);  lastState=sinfo.state;  if (s2 != null) {    sinfo=this.tool.getState(s2,s1);    if (sinfo == null) {      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);      MP.printError(EC.TLC_BUG,"5");      StatePrinter.printState(s2);      System.exit(1);    }    StatePrinter.printState(sinfo,null,++idx);  }}  }
class C{  public ObjectFactory(){}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.REF_PARAM__TYPE:    return type != null;}return super.eIsSet(featureID);}  }
class C{  public Bindings add(String property,JTextArea textArea){  registerPropertyChangeListener(textArea);  return add(new JTextAreaBinding(property,textArea));}  }
class C{  public ChainIterable<T> addWith(FP.Lambda1<Iterable<T>,Iterable<T>> wrapper,Iterable<T> another){  return (ChainIterable<T>)super.add(wrapper.apply(another));}  }
class C{  public boolean closeNote(Note bug){  if (!bug.isNew()) {    Log.d(DEBUG_TAG,"closing note " + bug.getId());    HttpURLConnection connection=null;    try {      try {        URL closeNoteUrl=getCloseNoteUrl(Long.toString(bug.getId()));        connection=openConnectionForWriteAccess(closeNoteUrl,"POST","text/xml");        if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {          throwUnexpectedRequestException(connection);        }        parseBug(bug,connection.getInputStream());        return true;      } catch (      XmlPullParserException e) {        Log.e(DEBUG_TAG,"closeNote:Exception",e);      }catch (      IOException e) {        Log.e(DEBUG_TAG,"closeNote:Exception",e);      }    }  finally {      disconnect(connection);    }  }  return false;}  }
class C{  public double[] toArray(double[] result){  if (result == null) {    result=new double[16];  }  for (int i=0, k=0; i < 4; i++) {    double[] m=matrix[i];    for (int j=0; j < 4; j++) {      result[k++]=m[j];    }  }  return result;}  }
class C{  public ProgressMonitorInputStream(Component parentComponent,Object message,InputStream in){  super(in);  try {    size=in.available();  } catch (  IOException ioe) {    size=0;  }  monitor=new ProgressMonitor(parentComponent,message,null,0,size);}  }
class C{  public BaseMqttMessage(final long id,final String topic,final MqttMessage message){  super(id,topic,null,new Date());  this.rawMessage=message;}  }
class C{  public void putMessage(Message m){  queue1.add(m);  queueSize++;}  }
class C{  public static Intent createShortcutIntent(String url){  Intent shortcutIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));  shortcutIntent.putExtra(REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB,true);  return shortcutIntent;}  }
class C{  public static BaselineOffset newInstance(double baselineOffsetAsDbl){  BaselineOffset baselineOffset=new BaselineOffset();  baselineOffset.baselineOffsetAsDbl=baselineOffsetAsDbl;  return baselineOffset;}  }
class C{  static public void stepExecuting(String stepId) throws WorkflowException {  WorkflowService.completerStepExecuting(stepId);}  }
class C{  @Override protected void initData(){}  }
class C{  public CLayoutDwordAction(final CStackMemoryProvider model){  super("Dwords");  m_model=model;}  }
class C{  private static IOBlasterResults queryForAllMatches(RdfRepository rdfRepository,List<Statement> statements) throws QueryEvaluationException {  TupleQueryResult tupleQueryResult=rdfRepository.query("SELECT * WHERE {?s ?p ?o}");  Iterable<BindingSet> results=toIterable(tupleQueryResult);  Matcher<BindingSet>[] matchers=subjectPredicateObjectMatchers(statements);  return new IOBlasterResults(results,matchers);}  }
class C{  public StyledTableUI(Style style){  this.style=style;}  }
class C{  protected void applyHighlighting(String content,int line) throws BadLocationException {  int startOffset=m_RootElement.getElement(line).getStartOffset();  int endOffset=m_RootElement.getElement(line).getEndOffset() - 1;  int lineLength=endOffset - startOffset;  int contentLength=content.length();  if (endOffset >= contentLength) {    endOffset=contentLength - 1;  }  if (getMultiLineComment()) {    if (endingMultiLineComment(content,startOffset,endOffset) || isMultiLineComment() || startingMultiLineComment(content,startOffset,endOffset)) {      m_Self.setCharacterAttributes(startOffset,endOffset - startOffset + 1,DEFAULT_COMMENT,false);      return;    }  }  m_Self.setCharacterAttributes(startOffset,lineLength,DEFAULT_NORMAL,true);  int index=content.indexOf(getSingleLineCommentStart(),startOffset);  if ((index > -1) && (index < endOffset)) {    m_Self.setCharacterAttributes(index,endOffset - index + 1,DEFAULT_COMMENT,false);    endOffset=index - 1;  }  checkForTokens(content,startOffset,endOffset);}  }
class C{  public void loadChats(){  log.fine("#" + m_vo.TabNo);  if (!canHaveAttachment())   return;  String sql="SELECT CM_Chat_ID, Record_ID FROM CM_Chat " + "WHERE AD_Table_ID=?";  try {    if (m_Chats == null)     m_Chats=new HashMap<Integer,Integer>(); else     m_Chats.clear();    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_vo.AD_Table_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      Integer key=new Integer(rs.getInt(2));      Integer value=new Integer(rs.getInt(1));      m_Chats.put(key,value);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  log.config("#" + m_Chats.size());}  }
class C{  public FutureW<T> recover(final Function<Throwable,? extends T> fn){  return FutureW.of(toCompletableFuture().exceptionally(fn));}  }
class C{  protected ReferencingElementExpression_IMImpl(){  super();}  }
class C{  public boolean match(SuperFieldAccess node,Object other){  if (!(other instanceof SuperFieldAccess)) {    return false;  }  SuperFieldAccess o=(SuperFieldAccess)other;  return (safeSubtreeMatch(node.getName(),o.getName()) && safeSubtreeMatch(node.getQualifier(),o.getQualifier()));}  }
class C{  public BIFReader processFile(String sFile) throws Exception {  m_sFile=sFile;  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setValidating(true);  Document doc=factory.newDocumentBuilder().parse(new File(sFile));  doc.normalize();  buildInstances(doc,sFile);  buildStructure(doc);  return this;}  }
class C{  public org.yakindu.base.types.Type basicGetType(){  return type;}  }
class C{  private void initializeLiveAttributes(){  x1=createLiveAnimatedLength(null,SVG_X1_ATTRIBUTE,SVG_LINE_X1_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y1=createLiveAnimatedLength(null,SVG_Y1_ATTRIBUTE,SVG_LINE_Y1_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  x2=createLiveAnimatedLength(null,SVG_X2_ATTRIBUTE,SVG_LINE_X2_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y2=createLiveAnimatedLength(null,SVG_Y2_ATTRIBUTE,SVG_LINE_Y2_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);}  }
class C{  public boolean wget(String url,String fileName,int timeout){  boolean result=false;  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.wget"),url,"'" + fileName + "'");  sendWaitFor(command,timeout,prompts,buf);  log.debug(buf.toString());  String[] lines=getLines(buf);  String regex=".*" + fileName + ".* saved .*";  for (  String line : lines) {    if (Pattern.matches(regex,line)) {      result=true;    }  }  return result;}  }
class C{  private void runSample(){  GenericEntry entry=new GenericEntry();  entry.addProperty("user",destinationUser);  entry.addProperty("key",domain);  entry.addProperty("from",from);  entry.addProperty("to",to);  entry.addProperty("subject",subject);  entry.addProperty("hasTheWord",hasTheWord);  entry.addProperty("doesNotHaveTheWord",doesNotHaveTheWord);  entry.addProperty("hasAttachment",hasAttachment);  entry.addProperty("shouldMarkAsRead",shouldMarkAsRead);  entry.addProperty("shouldArchive",shouldArchive);  entry.addProperty("label",label);  entry.addProperty("forwardTo",forwardTo);  entry.addProperty("neverSpam",neverSpam);  entry.addProperty("shouldStar",shouldStar);  entry.addProperty("shouldTrash",shouldTrash);  LOGGER.log(Level.INFO,"Inserting 1 gmail filter.");  GenericEntry[] entries=new GenericEntry[ITEMS_TO_BATCH];  for (int i=0; i < ITEMS_TO_BATCH; i++) {    GenericEntry newEntry=new GenericEntry();    newEntry.addProperty("user",destinationUser);    newEntry.addProperty("key",domain);    newEntry.addProperty("from",from);    newEntry.addProperty("to",to);    newEntry.addProperty("subject",subject);    newEntry.addProperty("hasTheWord",hasTheWord);    newEntry.addProperty("doesNotHaveTheWord",doesNotHaveTheWord);    newEntry.addProperty("hasAttachment",hasAttachment);    newEntry.addProperty("shouldMarkAsRead",shouldMarkAsRead);    newEntry.addProperty("shouldArchive",shouldArchive);    newEntry.addProperty("label",String.valueOf(i));    entries[i]=newEntry;  }  try {    LOGGER.log(Level.INFO,"Inserting 1 Gmail filter.");    GenericEntry resultEntry=insertGmailFilter(entry);    LOGGER.log(Level.INFO,"Insert 1 filter succeeded.");    LOGGER.log(Level.INFO,"Batch inserting " + ITEMS_TO_BATCH + " Gmail filters");    GenericFeed resultFeed=batchInsertGmailFilters(entries);    int failedInsertions=0, successfulInsertions=0;    for (    GenericEntry returnedEntry : resultFeed.getEntries()) {      if (BatchUtils.isFailure(returnedEntry)) {        BatchStatus status=BatchUtils.getBatchStatus(returnedEntry);        LOGGER.log(Level.SEVERE,"Entry " + BatchUtils.getBatchId(returnedEntry) + " failed insertion: "+ status.getCode()+ " "+ status.getReason());        failedInsertions++;      } else {        successfulInsertions++;      }    }    LOGGER.log(Level.INFO,"Batch insertion: " + Integer.toString(successfulInsertions) + " succeeded, "+ Integer.toString(failedInsertions)+ " failed.");  } catch (  IOException e) {    LOGGER.log(Level.SEVERE,"Caught IOException: " + e.toString());    e.printStackTrace();  }catch (  ServiceException e) {    LOGGER.log(Level.SEVERE,"Caught ServiceException: " + e.toString());    e.printStackTrace();  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.EXPORT_DECLARATION__EXPORTED_ELEMENT:    return basicSetExportedElement(null,msgs);case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORTED_EXPRESSION:  return basicSetDefaultExportedExpression(null,msgs);case N4JSPackage.EXPORT_DECLARATION__NAMED_EXPORTS:return ((InternalEList<?>)getNamedExports()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected AbstractMatrix3D vDice(int axis0,int axis1,int axis2){  super.vDice(axis0,axis1,axis2);  int[][] offsets=new int[3][];  offsets[0]=this.sliceOffsets;  offsets[1]=this.rowOffsets;  offsets[2]=this.columnOffsets;  this.sliceOffsets=offsets[axis0];  this.rowOffsets=offsets[axis1];  this.columnOffsets=offsets[axis2];  return this;}  }
class C{  public List<OracleDocument> insertAndGet(Iterator<OracleDocument> documents) throws OracleBatchException {  int insertedRowCount=0;  int rowCount=0;  if (documents == null) {    throw SODAUtils.makeBatchException(SODAMessage.EX_ARG_CANNOT_BE_NULL,rowCount,"documents");  }  if (isReadOnly()) {    if (OracleLog.isLoggingEnabled())     log.warning("Write to " + options.uriName + " not allowed");    throw SODAUtils.makeBatchException(SODAMessage.EX_READ_ONLY,rowCount,options.uriName,"insert");  }  if (!documents.hasNext())   return (EMPTY_LIST);  ArrayList<OracleDocument> results=new ArrayList<OracleDocument>();  OraclePreparedStatement stmt=null;  String sqltext=buildInsert(true);  boolean manageTransaction=false;  try {    if (conn.getAutoCommit() == true) {      conn.setAutoCommit(false);      manageTransaction=true;    }    metrics.startTiming();    stmt=(OraclePreparedStatement)conn.prepareStatement(sqltext);    long lstamp=db.getDatabaseTime();    String tstamp=ComponentTime.stampToString(lstamp);    if (tstamp.endsWith("Z"))     tstamp=tstamp.substring(0,tstamp.length() - 1);    while (documents.hasNext()) {      OracleDocument document=documents.next();      if (document == null) {        OracleBatchException bE=SODAUtils.makeBatchException(SODAMessage.EX_ITERATOR_RETURNED_NULL_ELEMENT,rowCount,"documents",rowCount);        throw bE;      }      if (document.getKey() != null && options.keyAssignmentMethod != CollectionDescriptor.KEY_ASSIGN_CLIENT) {        OracleBatchException bE=SODAUtils.makeBatchException(SODAMessage.EX_ITERATOR_RETURNED_DOC_WITH_KEY,rowCount,"documents",rowCount);        throw bE;      }      String key=null;      String version=null;switch (options.keyAssignmentMethod) {case CollectionDescriptor.KEY_ASSIGN_SEQUENCE:        key=Long.toString(this.nextSequenceValue());      break;case CollectionDescriptor.KEY_ASSIGN_GUID:    key=db.nextGuid();  if (options.keyDataType == CollectionDescriptor.INTEGER_KEY)   key=uidToDecimal(key);break;case CollectionDescriptor.KEY_ASSIGN_UUID:key=db.generateKey();if (options.keyDataType == CollectionDescriptor.INTEGER_KEY) key=uidToDecimal(key);break;default :key=canonicalKey(document.getKey());break;}int num=0;bindKeyColumn(stmt,++num,key);num=bindMediaTypeColumn(stmt,num,document);byte[] data=bindPayloadColumn(stmt,++num,document);if (options.timestampColumnName != null) {stmt.setString(++num,tstamp);}if (options.creationColumnName != null) {stmt.setString(++num,tstamp);}if ((options.versionColumnName != null) && (options.versioningMethod) != CollectionDescriptor.VERSION_NONE) {switch (options.versioningMethod) {case CollectionDescriptor.VERSION_SEQUENTIAL:long lver=1L;stmt.setLong(++num,lver);version=Long.toString(lver);break;case CollectionDescriptor.VERSION_TIMESTAMP:stmt.setLong(++num,lstamp);version=Long.toString(lstamp);break;case CollectionDescriptor.VERSION_UUID:version=db.generateKey();stmt.setString(++num,version);break;default :version=computeVersion(data);stmt.setString(++num,version);break;}}stmt.addBatch();++rowCount;if ((rowCount % BATCH_MAX_SIZE) == 0) {int[] flags=stmt.executeBatch();insertedRowCount+=flags.length;}OracleDocumentImpl result=new OracleDocumentImpl(key,version,tstamp);result.setCreatedOn(tstamp);String ctype=document.getMediaType();setContentType(ctype,result);results.add(result);}if ((rowCount % BATCH_MAX_SIZE) != 0) {int[] flags=stmt.executeBatch();insertedRowCount+=flags.length;}stmt.close();stmt=null;metrics.recordWrites(rowCount,BATCH_MAX_SIZE);} catch (OracleException e) {OracleBatchException bE=convertToOracleBatchException(e,rowCount,sqltext);bE.setNextException(completeTxnAndRestoreAutoCommit(manageTransaction,false));throw bE;}catch (SQLException e) {int count=0;if (e instanceof BatchUpdateException) {insertedRowCount+=((BatchUpdateException)e).getUpdateCounts().length;count=insertedRowCount;} else {count=rowCount;}OracleBatchException bE=SODAUtils.makeBatchExceptionWithSQLText(e,count,sqltext);bE.setNextException(completeTxnAndRestoreAutoCommit(manageTransaction,false));if (OracleLog.isLoggingEnabled()) log.severe(e.toString());throw bE;}catch (RuntimeException e) {completeTxnAndRestoreAutoCommit(manageTransaction,false);if (OracleLog.isLoggingEnabled()) log.severe(e.toString());throw e;}catch (Error e) {completeTxnAndRestoreAutoCommit(manageTransaction,false);if (OracleLog.isLoggingEnabled()) log.severe(e.toString());throw e;} finally {for (String message : SODAUtils.closeCursor(stmt,null)) {if (OracleLog.isLoggingEnabled()) log.severe(message);}}OracleException e=completeTxnAndRestoreAutoCommit(manageTransaction,true);if (e != null) {throw new OracleBatchException(e,rowCount);}return (results);}  }
class C{  public boolean contains(String optionName){  return this.commandLine.hasOption(optionName);}  }
class C{  public void ivrZonesetName(String zonesetName,boolean activate) throws NetworkDeviceControllerException {  ivrZoneName(true,zonesetName,activate,false);}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public static UnregisterVASACertificate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UnregisterVASACertificate object=new UnregisterVASACertificate();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"unregisterVASACertificate".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (UnregisterVASACertificate)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","existingCertificate").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setExistingCertificate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public boolean supportsAlterTableWithDropColumn(){  debugCodeCall("supportsAlterTableWithDropColumn");  return true;}  }
class C{  static protected boolean logWarning(String name,String s,Throwable t){  return logStdErr("warning",name,s,t);}  }
class C{  public static void main(String[] argv){  runClassifier(new MultiClassClassifierUpdateable(),argv);}  }
class C{  public TimeInstant addMinutes(final int minutes){  return this.addSeconds(60 * minutes);}  }
class C{  public LocationProvider(String name,ProviderProperties properties){  if (name.matches(BAD_CHARS_REGEX)) {    throw new IllegalArgumentException("provider name contains illegal character: " + name);  }  mName=name;  mProperties=properties;}  }
class C{  public AclEntryType type(){  return type;}  }
class C{  public BMPWriter(){  super();}  }
class C{  public static ImageSource bitmap(Bitmap bitmap){  if (bitmap == null) {    throw new NullPointerException("Bitmap must not be null");  }  return new ImageSource(bitmap);}  }
class C{  public ClassTemplate addInitialVariable(Variable var){  this.initialVars.add(var);  return this;}  }
class C{  public static String filter(String message){  if (message == null)   return (null);  char content[]=new char[message.length()];  message.getChars(0,message.length(),content,0);  StringBuilder result=new StringBuilder(content.length + 50);  for (int i=0; i < content.length; i++) {switch (content[i]) {case '<':      result.append("&lt;");    break;case '>':  result.append("&gt;");break;case '&':result.append("&amp;");break;case '"':result.append("&quot;");break;default :result.append(content[i]);}}return (result.toString());}  }
class C{  private static boolean isIpAddress(String name){  if (IPAddressUtil.isIPv4LiteralAddress(name) || IPAddressUtil.isIPv6LiteralAddress(name)) {    return true;  } else {    return false;  }}  }
class C{  public static int fillStackTraceElements(Thread t,StackTraceElement[] stackTraceElements){  Arrays.fill(stackTraceElements,null);  StackTraceElement[] st=t.getStackTrace();  int n=Math.min(st.length,stackTraceElements.length);  System.arraycopy(st,0,stackTraceElements,0,n);  return n;}  }
class C{  void showDialog(){  GUIUtils.centerOnScreen(DIALOG);  DIALOG.setVisible(true);}  }
class C{  public boolean isDebugLoggingEnabled(){  return systemLogger.isDebugEnabled();}  }
class C{  public boolean NE(Word w2){  return false;}  }
class C{  void releaseId(Id id){  Integer pos=idPosMap.get(id);  if (pos != null) {    idPosMap.remove(id);    freePositions.add(pos);    for (    HierarchicalTypeStore s : superTypeStores) {      s.releaseId(id);    }  }}  }
class C{  private int parseFramePayloadLength(final byte[] b,final int off) throws ParseException {  frameLength_=PrimitivesParser.parseInt(b,off);  if (frameLength_ < 0) {    throw new BadCiphertextException("Invalid frame length in ciphertext");  }  return Integer.SIZE / Byte.SIZE;}  }
class C{  private static void slice() throws Exception {  doSlice(Character.MAX_VALUE);  report("Slice");  doSlice(Character.MAX_CODE_POINT);  report("Slice (Supplementary)");}  }
class C{  public boolean removeName(String s){  if (s == null) {    return false;  }  Character oldKey=nameToKey.remove(s);  if (oldKey != null) {    keyToName.remove(oldKey);  }  if (s.equals(megaSlotName)) {    megaSlotName=null;  }  nonSupport.remove(s);  return teamNames.remove(s);}  }
class C{  public final Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  ContentProviderClient contentProviderClient=null;  try {    contentProviderClient=mContentResolver.acquireContentProviderClient(uri);    return contentProviderClient.getLocalContentProvider().query(uri,projection,selection,selectionArgs,sortOrder);  }  finally {    if (contentProviderClient != null) {      contentProviderClient.release();    }  }}  }
class C{  public TypeValue removeUserDefined(String name){  return statics.userDefined.remove(name);}  }
class C{  public List<FeedSource> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<FeedSource> list=new ArrayList<FeedSource>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  static AttributesBuilder create(Set<String> allowed,String[] requested){  return new AttributesBuilder(allowed,requested);}  }
class C{  public void log(Level level,String msg,Object arg0,Object arg1){  innerLog(level,null,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public ByteConverter(){  super(false);}  }
class C{  public static boolean quoteIfNeeded(Appendable buf,String s,String delim){  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (delim.indexOf(c) >= 0) {      quote(buf,s);      return true;    }  }  try {    buf.append(s);    return false;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected int retrieveRightBracketPosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    int balance=0;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameLBRACKET:        balance++;      break;case TerminalTokens.TokenNameRBRACKET:    balance--;  if (balance == 0)   return this.scanner.currentPosition - 1;break;}}} catch (InvalidInputException e) {}return -1;}  }
class C{  public synchronized void fine(String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(Level.FINE,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public NTLMEngineException(String message){  super(message);}  }
class C{  public static void main(String[] args) throws Throwable {  try {    execute(args);  } catch (  CeylonRuntimeException cre) {    throw cre;  }catch (  Throwable t) {    Throwable t2=(t.getCause() != null) ? t.getCause() : t;    if (t2 instanceof InvocationTargetException) {      t2=(t.getCause() != null) ? t2.getCause() : t2;    }    throw t2;  }}  }
class C{  @Override public final int computeHashCode(float val){  return HashFunctions.hash(val);}  }
class C{  public static PlaylistChooserFragment newInstance(Album album){  PlaylistChooserFragment fragment=new PlaylistChooserFragment();  Bundle bundle=new Bundle();  bundle.putParcelable(KEY_ALBUM,album);  fragment.setArguments(bundle);  return fragment;}  }
class C{  private CarrotParams(){}  }
class C{  protected void updateTiles(DrawContext dc){  this.rttSupport.setEnableFramebufferObject(true);  Texture texture=dc.getTextureCache().getTexture(this.textureCacheKey);  int dim=this.computeTileTextureDimension(this.contentBounds.getSize(),this.contentSize);  int maxTexture=dc.getGLRuntimeCapabilities().getMaxTextureSize();  this.renderToTexture=(dim <= maxTexture);  if (!this.renderToTexture) {    return;  }  if (texture == null || this.textureDimension != dim) {    texture=this.createTileTexture(dc,dim,dim);    dc.getTextureCache().put(this.textureCacheKey,texture);    this.textureDimension=dim;    int numTiles=dim / this.textureTileDimension;    this.textureTiles.clear();    for (int i=0; i < numTiles; i++) {      for (int j=0; j < numTiles; j++) {        this.textureTiles.add(new TextureTile(i,j));      }    }    this.textureTileMap.clear();  }  if (texture == null) {    Logging.logger().warning(Logging.getMessage("nullValue.TextureIsNull"));    return;  }  int rows=(int)Math.ceil((double)this.contentSize.height / this.textureTileDimension);  int columns=(int)Math.ceil((double)this.contentSize.width / this.textureTileDimension);  if (tiles.size() != rows * columns) {    this.assembleTiles(rows,columns);  }  long contentUpdateTime=this.contents.getUpdateTime();  for (  ContentTile tile : this.tiles) {    if (this.mustUpdateTile(tile,contentUpdateTime)) {      TextureTile textureTile=this.getTextureTile(tile);      if (textureTile == null) {        textureTile=this.allocateTextureTile(tile);      }      int x=textureTile.column * this.textureTileDimension;      int y=textureTile.row * this.textureTileDimension;      Rectangle tileBounds=new Rectangle(x,y,this.textureTileDimension,this.textureTileDimension);      this.rttSupport.beginRendering(dc,tileBounds.x,tileBounds.y,tileBounds.width,tileBounds.height);      try {        this.updateTile(dc,tile,tileBounds);        tile.updateTime=contentUpdateTime;        textureTile.lastUsed=dc.getFrameTimeStamp();      }  finally {        this.rttSupport.endRendering(dc);      }    }  }}  }
class C{  private static String mergeTextAndMnemonic(String text,final int mnemonic,final int mnemonicIndex){  if (text == null) {    text="";  }  final int index;  if (mnemonicIndex >= 0 && mnemonicIndex < text.length() && Character.toUpperCase(text.charAt(mnemonicIndex)) == mnemonic) {    index=mnemonicIndex;  } else {    index=-1;  }  final StringBuffer buffer=new StringBuffer(text);  if (index != -1) {    buffer.insert(index,'&');    for (int i=buffer.length() - 1; i >= 0; i--) {      if (buffer.charAt(i) == '&' && i != index) {        buffer.insert(i,'&');      }    }  }  return buffer.toString();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public void displayUsage(Usage usage){  this.dataUsage=usage;}  }
class C{  private List<VOParameter> createParametersForTechnicalService(VOTechnicalService voTechnicalService,String value){  VOParameter standardParam=createParameterForTechnicalService(voTechnicalService,value,standardDefinitionID);  VOParameter onetimeParam=createParameterForTechnicalService(voTechnicalService,value,onetimeDefinitionID);  List<VOParameter> params=new ArrayList<VOParameter>();  params.add(standardParam);  params.add(onetimeParam);  return params;}  }
class C{  public static Status sent(){  return create(SENT);}  }
class C{  protected void applyToPlot(Plot plot){  ParamChecks.nullNotPermitted(plot,"plot");  if (plot.getDrawingSupplier() != null) {    plot.setDrawingSupplier(getDrawingSupplier());  }  if (plot.getBackgroundPaint() != null) {    plot.setBackgroundPaint(this.plotBackgroundPaint);  }  plot.setOutlinePaint(this.plotOutlinePaint);  if (plot instanceof PiePlot) {    applyToPiePlot((PiePlot)plot);  } else   if (plot instanceof MultiplePiePlot) {    applyToMultiplePiePlot((MultiplePiePlot)plot);  } else   if (plot instanceof CategoryPlot) {    applyToCategoryPlot((CategoryPlot)plot);  } else   if (plot instanceof XYPlot) {    applyToXYPlot((XYPlot)plot);  } else   if (plot instanceof FastScatterPlot) {    applyToFastScatterPlot((FastScatterPlot)plot);  } else   if (plot instanceof MeterPlot) {    applyToMeterPlot((MeterPlot)plot);  } else   if (plot instanceof ThermometerPlot) {    applyToThermometerPlot((ThermometerPlot)plot);  } else   if (plot instanceof SpiderWebPlot) {    applyToSpiderWebPlot((SpiderWebPlot)plot);  } else   if (plot instanceof PolarPlot) {    applyToPolarPlot((PolarPlot)plot);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Rdn)) {    return false;  }  Rdn that=(Rdn)obj;  if (entries.size() != that.size()) {    return false;  }  for (int i=0; i < entries.size(); i++) {    if (!entries.get(i).equals(that.entries.get(i))) {      return false;    }  }  return true;}  }
class C{  Bundle createSaveState(){  Bundle saveState=new Bundle();  mTabControl.saveState(saveState);  if (saveState.isEmpty())   return null;  return saveState;}  }
class C{  public Constant(Element constant,FieldMetaInfo.Optype opType,ArrayList<Attribute> fieldDefs) throws Exception {  super(opType,fieldDefs);  NodeList constL=constant.getChildNodes();  String c=constL.item(0).getNodeValue();  if (m_opType == FieldMetaInfo.Optype.CATEGORICAL || m_opType == FieldMetaInfo.Optype.ORDINAL) {    m_categoricalConst=c;  } else {    try {      m_continuousConst=Double.parseDouble(c);    } catch (    IllegalArgumentException ex) {      throw new Exception("[Constant] Unable to parse continuous constant: " + c);    }  }}  }
class C{  @Override public void introspect(ContextH3 context){}  }
class C{  public IgfsServer(IgfsContext igfsCtx,IgfsIpcEndpointConfiguration endpointCfg,boolean mgmt){  assert igfsCtx != null;  assert endpointCfg != null;  this.endpointCfg=endpointCfg;  this.igfsCtx=igfsCtx;  this.mgmt=mgmt;  log=igfsCtx.kernalContext().log(IgfsServer.class);  marsh=new IgfsMarshaller();}  }
class C{  public static Test suite(){  return (new TestSuite(ConfigFileTestCase.class));}  }
class C{  private void cleanup(){  if (operation instanceof Command && log.isOpen()) {    try {      log.release(index);    } catch (    IllegalStateException e) {    }  }  session.release();  index=0;  session=null;  instant=null;  operation=null;  pool.release(this);}  }
class C{  public boolean binds(int timestamp,byte[] value,HashSet<CollectData> collects){  if (value == null || collects == null) {    bftsmart.tom.util.Logger.println("(LCManager.binds) Received null objects, returning false");    return false;  }  if (!(collects.size() >= (SVController.getCurrentViewN() - SVController.getCurrentViewF()))) {    bftsmart.tom.util.Logger.println("(LCManager.binds) Less than N-F contexts collected from replicas, returning false");    return false;  }  return (quorumHighest(timestamp,value,collects) && certifiedValue(timestamp,value,collects));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Leg createUpperLeg(){  Leg legUp=population.getFactory().createLeg(TransportMode.car);  List<Id<Link>> pathUp=new ArrayList<>();  pathUp.add(Id.createLinkId("1_2"));  if (!this.simulateInflowCap23) {    pathUp.add(Id.createLinkId("2_3"));  } else {    pathUp.add(Id.createLinkId("2_23"));    pathUp.add(Id.createLinkId("23_3"));  }  pathUp.add(Id.createLinkId("3_5"));  Route routeUp=new LinkNetworkRouteImpl(Id.createLinkId("0_1"),pathUp,Id.createLinkId("5_6"));  legUp.setRoute(routeUp);  return legUp;}  }
class C{  public OMColor(int argb){  super(argb);  this.argb=argb;}  }
class C{  public void rollback() throws IllegalStateException, SystemException {  tm.rollback();}  }
class C{  public void run(){  System.out.println("Hello world!");  try {    Thread.currentThread().sleep(5000);  } catch (  Exception e) {  }  suicide();}  }
class C{  @Override public void onStop(){  if (ctlr != null) {    ctlr.stop();  }  EventBus.getDefault().unregister(this);  super.onStop();}  }
class C{  public List<SearchResult> searchByObjectName(String name){  List<SearchResult> all=new ArrayList<>();  for (  Layer layer : layers) {    if (isLayerVisible(layer)) {      all.addAll(layer.searchByObjectName(name));    }  }  Log.d(TAG,"Got " + all.size() + " results in total for "+ name);  return all;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.920 -0500",hash_original_method="93B7BEFDB685497BB8E88252AEDDD652",hash_generated_method="6821110C4A35E997617D7154164D6E94") @Override public boolean isInboundDone(){  return isInboundDone || engine_was_closed;}  }
class C{  private MessageType checkMessageInitialized(MessageType message) throws InvalidProtocolBufferException {  if (message != null && !message.isInitialized()) {    throw newUninitializedMessageException(message).asInvalidProtocolBufferException().setUnfinishedMessage(message);  }  return message;}  }
class C{  public map removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private static Map<EventWrapper,Set<FTransition>> constructGuessMap(FContract contract){  if (!guessMapCache.containsKey(contract)) {    Map<EventWrapper,Set<FTransition>> guessMap=new WeakHashMap<EventWrapper,Set<FTransition>>();    for (    FState state : contract.getStateGraph().getStates()) {      for (      FTransition transition : state.getTransitions()) {        EventWrapper key=wrap(transition.getTrigger().getEvent());        if (guessMap.get(key) == null) {          Set<FTransition> transitions=new HashSet<FTransition>();          transitions.add(transition);          guessMap.put(key,transitions);        } else {          guessMap.get(key).add(transition);        }      }    }    guessMapCache.put(contract,guessMap);  }  return guessMapCache.get(contract);}  }
class C{  @Deprecated protected int insertionIndex(T obj){  return insertKey(obj);}  }
class C{  OverlapType overlap(Rect r1,Rect r2){  r1Owns=0;  r2Owns=0;  common=0;  adjacent=0;  OverlapType result=OverlapType.NONE;  horizontalOverlap=false;  verticalOverlap=false;  if (r1.left < r2.left) {    leftPortion.left=topLeftPortion.left=bottomLeftPortion.left=r1.left;    if (r2.left < r1.right) {      leftPortion.right=topLeftPortion.right=bottomLeftPortion.right=topPortion.left=bottomPortion.left=r2.left;      horizontalOverlap=true;    } else {      leftPortion.right=topLeftPortion.right=bottomLeftPortion.right=topPortion.left=bottomPortion.left=r1.right;      if (r2.left == r1.right)       adjacent|=LEFT;    }    r1Owns|=LEFT;  } else {    leftPortion.left=topLeftPortion.left=bottomLeftPortion.left=r2.left;    if (r1.left < r2.right) {      leftPortion.right=topLeftPortion.right=bottomLeftPortion.right=topPortion.left=bottomPortion.left=r1.left;      horizontalOverlap=true;    } else {      leftPortion.right=topLeftPortion.right=bottomLeftPortion.right=topPortion.left=bottomPortion.left=r2.right;      if (r1.left == r2.right)       adjacent|=RIGHT;    }    if (r2.left < r1.left)     r2Owns|=LEFT; else     common|=LEFT;  }  if (r1.top < r2.top) {    topPortion.top=topLeftPortion.top=topRightPortion.top=r1.top;    if (r2.top < r1.bottom) {      topPortion.bottom=topLeftPortion.bottom=topRightPortion.bottom=leftPortion.top=rightPortion.top=r2.top;      verticalOverlap=true;    } else {      topPortion.bottom=topLeftPortion.bottom=topRightPortion.bottom=leftPortion.top=rightPortion.top=r1.bottom;      if (r2.top == r1.bottom)       adjacent|=TOP;    }    r1Owns|=TOP;  } else {    topPortion.top=topLeftPortion.top=topRightPortion.top=r2.top;    if (r1.top < r2.bottom) {      topPortion.bottom=topLeftPortion.bottom=topRightPortion.bottom=leftPortion.top=rightPortion.top=r1.top;      verticalOverlap=true;    } else {      topPortion.bottom=topLeftPortion.bottom=topRightPortion.bottom=leftPortion.top=rightPortion.top=r2.bottom;      if (r1.top == r2.bottom)       adjacent|=BOTTOM;    }    if (r2.top < r1.top)     r2Owns|=TOP; else     common|=TOP;  }  if (r1.right > r2.right) {    rightPortion.right=topRightPortion.right=bottomRightPortion.right=r1.right;    if (r2.right > r1.left) {      rightPortion.left=topRightPortion.left=bottomRightPortion.left=topPortion.right=bottomPortion.right=r2.right;      horizontalOverlap=true;    } else {      rightPortion.left=topRightPortion.left=bottomRightPortion.left=topPortion.right=bottomPortion.right=r1.left;      if (r2.right == r1.left)       adjacent|=RIGHT;    }    r1Owns|=RIGHT;  } else {    rightPortion.right=topRightPortion.right=bottomRightPortion.right=r2.right;    if (r1.right > r2.left) {      rightPortion.left=topRightPortion.left=bottomRightPortion.left=topPortion.right=bottomPortion.right=r1.right;      horizontalOverlap=true;    } else {      rightPortion.left=topRightPortion.left=bottomRightPortion.left=topPortion.right=bottomPortion.right=r2.left;      if (r1.right == r2.left)       adjacent|=LEFT;    }    if (r2.right > r1.right)     r2Owns|=RIGHT; else     common|=RIGHT;  }  if (r1.bottom > r2.bottom) {    bottomPortion.bottom=bottomLeftPortion.bottom=bottomRightPortion.bottom=r1.bottom;    if (r2.bottom > r1.top) {      bottomPortion.top=bottomLeftPortion.top=bottomRightPortion.top=leftPortion.bottom=rightPortion.bottom=r2.bottom;      verticalOverlap=true;    } else {      bottomPortion.top=bottomLeftPortion.top=bottomRightPortion.top=leftPortion.bottom=rightPortion.bottom=r1.top;      if (r2.bottom == r1.top)       adjacent|=BOTTOM;    }    r1Owns|=BOTTOM;  } else {    bottomPortion.bottom=bottomLeftPortion.bottom=bottomRightPortion.bottom=r2.bottom;    if (r1.bottom > r2.top) {      bottomPortion.top=bottomLeftPortion.top=bottomRightPortion.top=leftPortion.bottom=rightPortion.bottom=r1.bottom;      verticalOverlap=true;    } else {      bottomPortion.top=bottomLeftPortion.top=bottomRightPortion.top=leftPortion.bottom=rightPortion.bottom=r2.top;      if (r1.bottom == r2.top)       adjacent|=TOP;    }    if (r2.bottom > r1.bottom)     r2Owns|=BOTTOM; else     common|=BOTTOM;  }  if (common == (LEFT | RIGHT | TOP| BOTTOM)) {    result=OverlapType.SAME;  } else   if ((common & (LEFT | RIGHT)) == (LEFT | RIGHT) && (verticalOverlap || (adjacent & (TOP | BOTTOM)) != 0)) {    result=OverlapType.COALESCIBLE;    coalesced.left=r1.left;    coalesced.right=r1.right;    coalesced.top=topPortion.top;    coalesced.bottom=bottomPortion.bottom;  } else   if ((common & (TOP | BOTTOM)) == (TOP | BOTTOM) && (horizontalOverlap || (adjacent & (LEFT | RIGHT)) != 0)) {    result=OverlapType.COALESCIBLE;    coalesced.left=leftPortion.left;    coalesced.right=rightPortion.right;    coalesced.top=r1.top;    coalesced.bottom=r1.bottom;  } else   if (verticalOverlap && horizontalOverlap) {    if (r2Owns == 0) {      result=OverlapType.CONTAINED_BY;    } else     if (r1Owns == 0) {      result=OverlapType.CONTAINS;    } else {      result=OverlapType.PARTIAL;      setCornerOwnership();    }  }  return result;}  }
class C{  void memoryChange(int x){  if (memoryCount < Constants.MEMORY_FACTOR) {    memoryPerPage+=(x - memoryPerPage) / ++memoryCount;  } else {    memoryPerPage+=(x > memoryPerPage ? 1 : -1) + ((x - memoryPerPage) / Constants.MEMORY_FACTOR);  }}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  ExtensionDescription desc=EntryLink.getDefaultDescription();  desc.setRepeatable(true);  extProfile.declare(SitesEntry.class,desc);  extProfile.declare(SitesEntry.class,ExtensionDescription.getDefaultDescription(Indexed.class));  extProfile.declare(SitesEntry.class,ExtensionDescription.getDefaultDescription(Crawled.class));  extProfile.declare(SitesEntry.class,ExtensionDescription.getDefaultDescription(Verified.class));  extProfile.declare(SitesEntry.class,ExtensionDescription.getDefaultDescription(Geolocation.class));  extProfile.declare(SitesEntry.class,ExtensionDescription.getDefaultDescription(CrawlingRate.class));  extProfile.declare(SitesEntry.class,ExtensionDescription.getDefaultDescription(PreferredDomain.class));  extProfile.declare(SitesEntry.class,ExtensionDescription.getDefaultDescription(EnhancedImageSearch.class));  desc=ExtensionDescription.getDefaultDescription(VerificationMethod.class);  desc.setRepeatable(true);  extProfile.declare(SitesEntry.class,desc);}  }
class C{  public IQ ping(String jid,long pingTimeout){  if (!connection.isAuthenticated())   return null;  Ping ping=new Ping(connection.getUser(),jid);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(ping.getPacketID()));  connection.sendPacket(ping);  IQ result=(IQ)collector.nextResult(pingTimeout);  collector.cancel();  return result;}  }
class C{  protected void okPressedAndApproved(){  ownGefaehrdung.setId(textNumber.getText());  ownGefaehrdung.setTitel(textName.getText());  ownGefaehrdung.setBeschreibung(textDescription.getText());  ownGefaehrdung.setOwnkategorie(textCategory.getText());  try {    ownGefaehrdung=OwnGefaehrdungHome.getInstance().save(ownGefaehrdung);  } catch (  Exception e) {    ExceptionUtil.log(e,Messages.NewGefaehrdungDialog_7);  }  ownGefaehrdungen.add(ownGefaehrdung);}  }
class C{  public static void filledCircle(double x,double y,double radius){  if (!(radius >= 0))   throw new IllegalArgumentException("radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * radius);  double hs=factorY(2 * radius);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public SoftBevelBorder(int bevelType){  super(bevelType);}  }
class C{  public select removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static boolean isLava(FluidStack aFluid){  if (aFluid == null)   return false;  return aFluid.isFluidEqual(getLava(1));}  }
class C{  public boolean isDrawLabels(String key){  if (key == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return getRenderingParams(key).isDrawLabels();}  }
class C{  public static boolean parseAssignmentList(BashPsiBuilder builder){  final IElementType first=ParserUtil.getTokenAndAdvance(builder);  if (first != LEFT_PAREN) {    return false;  }  PsiBuilder.Marker marker=builder.mark();  while (!builder.eof() && (builder.getTokenType(true) != RIGHT_PAREN)) {    builder.eatOptionalNewlines();    if (builder.getTokenType() == LEFT_SQUARE) {      boolean ok=ShellCommandParsing.arithmeticParser.parse(builder,LEFT_SQUARE,RIGHT_SQUARE);      if (!ok) {        marker.drop();        return false;      }      final IElementType eqToken=ParserUtil.getTokenAndAdvance(builder);      if (eqToken != EQ) {        marker.drop();        return false;      }    }    if (Parsing.word.isWordToken(builder)) {      final boolean ok=Parsing.word.parseWord(builder,true);      if (!ok) {        marker.drop();        return false;      }    }    boolean hadNewlines=builder.eatOptionalNewlines(-1,true);    if (!hadNewlines && builder.getTokenType(true) != WHITESPACE) {      break;    }  }  if (!(ParserUtil.getTokenAndAdvance(builder) == RIGHT_PAREN)) {    marker.drop();    return false;  }  marker.done(VAR_ASSIGNMENT_LIST);  return true;}  }
class C{  public Builder metrics(GridClientNodeMetrics metrics){  impl.metrics=metrics;  return this;}  }
class C{  @Override public String readString(Type target){  int len=readAMF3Integer();  log.debug("readString - length: {}",len);  if (len == 1) {    return "";  }  if ((len & 1) == 0) {    if (stringReferences.isEmpty()) {      log.debug("String reference list is empty");    }    return stringReferences.get(len >> 1);  }  len>>=1;  log.debug("readString - new length: {}",len);  int limit=buf.limit();  log.debug("readString - limit: {}",limit);  final ByteBuffer strBuf=buf.buf();  strBuf.limit(strBuf.position() + len);  final String string=AMF3.CHARSET.decode(strBuf).toString();  log.debug("String: {}",string);  buf.limit(limit);  stringReferences.add(string);  return string;}  }
class C{  protected void onAfterInitializeManager(final WroManager manager){}  }
class C{  public void addListListener(ActionListener a){  listeners.add(a);}  }
class C{  public void mouseExited(MouseEvent event){}  }
class C{  public void printTo(Writer out,ReadablePeriod period) throws IOException {  checkPrinter();  checkPeriod(period);  getPrinter().printTo(out,period,iLocale);}  }
class C{  public Boolean isChangeTrackingEnabled(){  return changeTrackingEnabled;}  }
class C{  public void addFeature(IFeatureVector fv){  idxList.addAll(Ints.asList(fv.getIndices()));  valList.addAll(Floats.asList(fv.getValues()));}  }
class C{  @Override public void featureDisabled(final String name){  if (name.equals("keyring")) {    disableKeyring();  }}  }
class C{  public MbSearchEditor(MbfsRunner runner){  super(runner,"Result MB forbid_latent_common_causes");}  }
class C{  private void calculateGridFrequencyResponse(){  double[] b=calculateB();  calculateDelta(b);  calculateC();  calculateD(b);  updateGridFrequencyResponse();}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  public Map<String,String> mappings(){  return mappings;}  }
class C{  public MutablePeriod parseMutablePeriod(String text){  checkParser();  MutablePeriod period=new MutablePeriod(0,iParseType);  int newPos=getParser().parseInto(period,text,0,iLocale);  if (newPos >= 0) {    if (newPos >= text.length()) {      return period;    }  } else {    newPos=~newPos;  }  throw new IllegalArgumentException(FormatUtils.createErrorMessage(text,newPos));}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  public final void addBrowseListener(BrowseListener l){  listeners.add(BrowseListener.class,l);}  }
class C{  public synchronized void progressValue(int value){  if (this.progressDialog != null) {    this.progressDialog.setProgress(value);  }}  }
class C{  public BufferedOutputStream(OutputStream out){  this(out,defaultBufferSize);}  }
class C{  public final boolean isInstIndication(){  return containsKey(CimConstants.INST_INDICATION_KEY);}  }
class C{  public ObjectNode addObject(){  ObjectNode n=objectNode();  _add(n);  return n;}  }
class C{  void ideClean(){  FileUtils.deleteQuietly(getIdeDir());  FileUtils.deleteQuietly(getWorkspaceDir());}  }
class C{  public Graph(){  this(false);}  }
class C{  private static void addHead(Locale locale,Element parent){  Element head=parent.addElement(XML_HEAD_TEXT);  Element col0=head.addElement(XML_COL_TEXT);  col0.addElement(XML_ID_UPPER_TEXT).addText("0");  col0.addElement(XML_NAME_UPPER_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_DOCUMENT)));  Element col1=head.addElement(XML_COL_TEXT);  col1.addElement(XML_ID_UPPER_TEXT).addText("1");  col1.addElement(XML_NAME_UPPER_TEXT).add(DocumentHelper.createCDATA(RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_NAME)));}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderSelectionViewClickListener(AccountHeader.OnAccountHeaderSelectionViewClickListener onAccountHeaderSelectionViewClickListener){  this.mOnAccountHeaderSelectionViewClickListener=onAccountHeaderSelectionViewClickListener;  return this;}  }
class C{  @Override public int pendingCount(){  return getPendingCount();}  }
class C{  public static Collection<String> parseCompressionMethods(XmlPullParser parser) throws IOException, XmlPullParserException {  List<String> methods=new ArrayList<String>();  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      String elementName=parser.getName();      if (elementName.equals("method")) {        methods.add(parser.nextText());      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("compression")) {        done=true;      }    }  }  return methods;}  }
class C{  public Octagon(double side){  this.side=side;}  }
class C{  public static void checkState(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void addAnnotation(Class<?> ann) throws ObjectStoreConfigException {  if (ann.getDeclaredMethods().length != 1)   throw new ObjectStoreConfigException("Annotation class must have exactly one method: " + ann);  addAnnotation(ann.getDeclaredMethods()[0]);}  }
class C{  protected void doSubLine(byte[] curLine){  int sub=(int)Math.ceil((getBitsPerComponent() * getColors()) / 8.0);  for (int i=0; i < curLine.length; i++) {    int prevIdx=i - sub;    if (prevIdx >= 0) {      curLine[i]+=curLine[prevIdx];    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason){  super(reason,null,0);}  }
class C{  private KrbApRep(DerValue encoding,Credentials tgs_creds) throws KrbException, IOException {  APRep rep=null;  try {    rep=new APRep(encoding);  } catch (  Asn1Exception e) {    rep=null;    KRBError err=new KRBError(encoding);    String errStr=err.getErrorString();    String eText;    if (errStr.charAt(errStr.length() - 1) == 0)     eText=errStr.substring(0,errStr.length() - 1); else     eText=errStr;    KrbException ke=new KrbException(err.getErrorCode(),eText);    ke.initCause(e);    throw ke;  }  byte[] temp=rep.encPart.decrypt(tgs_creds.key,KeyUsage.KU_ENC_AP_REP_PART);  byte[] enc_ap_rep_part=rep.encPart.reset(temp);  encoding=new DerValue(enc_ap_rep_part);  encPart=new EncAPRepPart(encoding);}  }
class C{  public static void init(String targetName,String methodName,String version,int capacity,int trim,String gesture){  Activity activity=UnityPlayer.currentActivity;  init(activity,new UnitySettings(new UnityPluginImp(activity,targetName,methodName),version,capacity,trim,gesture));}  }
class C{  @Hook("java.lang.System->currentTimeMillis") public static long System_currentTimeMillis(){  Log.d(TAG,"currentTimeMillis is much better in seconds :)");  return (long)OriginalMethod.by(new $(){  }).invokeStatic() / 1000L;}  }
class C{  public void createForward(int localPort,String remoteSocketName,DeviceUnixSocketNamespace namespace) throws TimeoutException, AdbCommandRejectedException, IOException {  AdbHelper.createForward(AndroidDebugBridge.getSocketAddress(),this,String.format("tcp:%d",localPort),String.format("%s:%s",namespace.getType(),remoteSocketName));}  }
class C{  private int addAttributeTo(CSSElement selector,String attributeName,String value,HTMLComponent htmlC){  int error=selector.setAttribute(attributeName,value);  reportAddAttributeError(error,selector,attributeName,value,htmlC);  return error;}  }
class C{  public static void deployWebContext(ConfigServer cs,ConfigWeb cw,boolean throwError) throws IOException {  Resource deploy=cs.getConfigDir().getRealResource("web-context-deployment"), trg;  if (!deploy.isDirectory())   return;  trg=cw.getConfigDir().getRealResource("context");  try {    _deployWebContext(cw,deploy,trg);  } catch (  IOException ioe) {    if (throwError)     throw ioe;    SystemOut.printDate(cw.getErrWriter(),ExceptionUtil.getStacktrace(ioe,true));  }}  }
class C{  public static boolean isStringLiteral(Value v){  if (v instanceof Literal) {    return isStringLiteral((Literal)v);  }  return false;}  }
class C{  void invalidConversion(Converter converter,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    fail(msg + ", expected ConversionException, but result = '" + result+ "'");  } catch (  ConversionException ex) {  }}  }
class C{  protected static int middleValue(int a,int b,int c,int delta){  int result=(((a + b + c) / 3) + normRNG(delta));  return result;}  }
class C{  public String prettyPrint(){  return prettyPrint(null);}  }
class C{  public List<SaveResult> checkResults(BulkConnection bulkConnection,JobInfo job,List<BatchInfo> batchInfoList) throws AsyncApiException, IOException {  LOG.debug("Checking Results.... ");  List<SaveResult> saveResults=new ArrayList<SaveResult>();  for (  BatchInfo batchInfo : batchInfoList) {    CSVReader csvReaderForBatchResultStream=new CSVReader(bulkConnection.getBatchResultStream(job.getId(),batchInfo.getId()));    List<String> resultHeader=csvReaderForBatchResultStream.nextRecord();    int resultCols=resultHeader.size();    List<String> batchResultStream=null;    while ((batchResultStream=csvReaderForBatchResultStream.nextRecord()) != null) {      Map<String,String> resultInfo=new HashMap<String,String>();      for (int i=0; i < resultCols; i++) {        resultInfo.put(resultHeader.get(i),batchResultStream.get(i));      }      SaveResult sr=new SaveResult();      sr.setId(resultInfo.get("Id"));      boolean success=Boolean.valueOf(resultInfo.get("Success"));      sr.setSuccess(success);      if (!success) {        if (resultInfo.get("Error") != null && StringUtils.isNotEmpty(resultInfo.get("Error"))) {          ApexUnitUtils.shutDownWithErrMsg("Error while fetching results for the batch job" + resultInfo.get("Error"));        }      }      saveResults.add(sr);    }  }  return saveResults;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 > z)&& (zN2 > z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dest){  ColorSpace srcColorSpace, destColorSpace;  BufferedImage savdest=null;  if (src.getColorModel() instanceof IndexColorModel) {    IndexColorModel icm=(IndexColorModel)src.getColorModel();    src=icm.convertToIntDiscrete(src.getRaster(),true);  }  srcColorSpace=src.getColorModel().getColorSpace();  if (dest != null) {    if (dest.getColorModel() instanceof IndexColorModel) {      savdest=dest;      dest=null;      destColorSpace=null;    } else {      destColorSpace=dest.getColorModel().getColorSpace();    }  } else {    destColorSpace=null;  }  if ((CSList != null) || (!(srcColorSpace instanceof ICC_ColorSpace)) || ((dest != null) && (!(destColorSpace instanceof ICC_ColorSpace)))) {    dest=nonICCBIFilter(src,srcColorSpace,dest,destColorSpace);  } else {    dest=ICCBIFilter(src,srcColorSpace,dest,destColorSpace);  }  if (savdest != null) {    Graphics2D big=savdest.createGraphics();    try {      big.drawImage(dest,0,0,null);    }  finally {      big.dispose();    }    return savdest;  } else {    return dest;  }}  }
class C{  public void testCase16(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=-1;  int bSign=-1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public boolean removeReminder(Reminder reminder){  return super.removeElement(reminder);}  }
class C{  void println(String msg){  System.out.println(msg);  pos=0;}  }
class C{  public static Throwable baseException(Throwable t){  Throwable wrapped=wrappedException(t);  if (wrapped != null)   return baseException(wrapped); else   return t;}  }
class C{  private void processMotorolaTSBK(MotorolaTSBKMessage tsbk){  String channel;  String from;  String to;switch (((MotorolaTSBKMessage)tsbk).getMotorolaOpcode()) {case PATCH_GROUP_CHANNEL_GRANT:    PatchGroupVoiceChannelGrant gvcg=(PatchGroupVoiceChannelGrant)tsbk;  channel=gvcg.getChannel();from=gvcg.getSourceAddress();to=gvcg.getPatchGroupAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.PATCH_GROUP_CALL).aliasList(getAliasList()).channel(channel).details((gvcg.isEncrypted() ? "ENCRYPTED " : "") + (gvcg.isEmergency() ? " EMERGENCY " : "") + "PATCH SESSION MODE:"+ gvcg.getSessionMode().name()).frequency(gvcg.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;case PATCH_GROUP_CHANNEL_GRANT_UPDATE:PatchGroupVoiceChannelGrantUpdate gvcgu=(PatchGroupVoiceChannelGrantUpdate)tsbk;channel=gvcgu.getChannel1();to=gvcgu.getPatchGroupAddress1();if (hasCallEvent(channel,null,to)) {updateCallEvent(channel,null,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.PATCH_GROUP_CALL).aliasList(getAliasList()).channel(channel).details((gvcgu.isEncrypted() ? "ENCRYPTED " : "") + "PATCH UPDATE - GROUP 2:" + gvcgu.getPatchGroupAddress2()+ " DN:"+ gvcgu.getDownlinkFrequency2()).frequency(gvcgu.getDownlinkFrequency1()).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;case PATCH_GROUP_ADD:PatchGroupAdd pga=(PatchGroupAdd)tsbk;StringBuilder sb=new StringBuilder();sb.append("PATCH GROUP:").append(pga.getPatchGroupAddress());sb.append(" 1:").append(pga.getGroupAddress1());sb.append(" 2:").append(pga.getGroupAddress2());sb.append(" 3:").append(pga.getGroupAddress3());broadcast(new P25CallEvent.Builder(CallEventType.PATCH_GROUP_ADD).aliasList(getAliasList()).details(sb.toString()).build());break;case PATCH_GROUP_DELETE:PatchGroupDelete pgd=(PatchGroupDelete)tsbk;StringBuilder sbpgd=new StringBuilder();sbpgd.append("PATCH GROUP:").append(pgd.getPatchGroupAddress());sbpgd.append(" 1:").append(pgd.getGroupAddress1());sbpgd.append(" 2:").append(pgd.getGroupAddress2());sbpgd.append(" 3:").append(pgd.getGroupAddress3());broadcast(new P25CallEvent.Builder(CallEventType.PATCH_GROUP_DELETE).aliasList(getAliasList()).details(sbpgd.toString()).build());break;case CCH_PLANNED_SHUTDOWN:if (!mControlChannelShutdownLogged) {broadcast(new P25CallEvent.Builder(CallEventType.NOTIFICATION).details("PLANNED CONTROL CHANNEL SHUTDOWN").build());mControlChannelShutdownLogged=true;}break;}}  }
class C{  public static IntList dcatenate(IntList A,IntList B){  return null;}  }
class C{  public static String join(Collection collection){  return join(collection,"\t");}  }
class C{  private boolean exactMatch(List<Rule> currentRules,Rule rule){  if (!currentRules.contains(rule))   return false;  for (  Rule r : currentRules) {    if ((r.getName().equalsIgnoreCase(rule.getName())) && (r.getMembershipRule().equalsIgnoreCase(rule.getMembershipRule())) && (r.getDescription().equalsIgnoreCase(rule.getDescription())))     return true; else     if (r.getName().equalsIgnoreCase(rule.getName())) {      rule.setUid(r.getUid());    }  }  return false;}  }
class C{  public DefaultFormatter(){  overwriteMode=true;  allowsInvalid=true;}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  public static String generateActivationKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  @Override public boolean isConnectionBased(){  return true;}  }
class C{  public Quaterniond rotationXYZ(double angleX,double angleY,double angleZ){  double sx=Math.sin(angleX * 0.5);  double cx=Math.cos(angleX * 0.5);  double sy=Math.sin(angleY * 0.5);  double cy=Math.cos(angleY * 0.5);  double sz=Math.sin(angleZ * 0.5);  double cz=Math.cos(angleZ * 0.5);  double cycz=cy * cz;  double sysz=sy * sz;  double sycz=sy * cz;  double cysz=cy * sz;  w=cx * cycz - sx * sysz;  x=sx * cycz + cx * sysz;  y=cx * sycz - sx * cysz;  z=cx * cysz + sx * sycz;  return this;}  }
class C{  public static Receipt mapFrom(EgdmCollectedReceipt collReceipt){  Receipt r=new Receipt();  r.setReceiptNumber(collReceipt.getReceiptNumber());  r.setReceiptAmt(collReceipt.getAmount());  r.setReceiptDate(collReceipt.getReceiptDate());  r.setReceiptStatus(collReceipt.getStatus());  r.addReceiptDetail(new ReceiptDetail(collReceipt.getEgdemandDetail().getEgDemandReason().getEgInstallmentMaster(),collReceipt.getReasonAmount(),collReceipt.getEgdemandDetail().getEgDemandReason().getEgDemandReasonMaster().getCode()));  return r;}  }
class C{  public static int[] kMinIndices(double[][] matrix,int column,int k) throws Exception {  if (matrix.length < k) {    throw new Exception(String.format("Length of array (%d) is less than k (%d)",matrix.length,k));  }  double[] mins=new double[k];  int[] minIndices=new int[k];  if (k == 1) {    minIndices[0]=minIndex(matrix,column);    return minIndices;  }  for (int i=0; i < k; i++) {    mins[i]=Double.POSITIVE_INFINITY;    minIndices[i]=-1;  }  for (int t=0; t < matrix.length; t++) {    if (matrix[t][column] < mins[k - 1]) {      mins[k - 1]=matrix[t][column];      minIndices[k - 1]=t;      for (int i=k - 2; i >= 0; i--) {        if (matrix[t][column] < mins[i]) {          mins[i + 1]=mins[i];          minIndices[i + 1]=minIndices[i];          mins[i]=matrix[t][column];          minIndices[i]=t;          continue;        }        break;      }    }  }  return minIndices;}  }
class C{  @SuppressWarnings("SimplifiableIfStatement") public static boolean isNearEnabled(CacheConfiguration cfg){  if (cfg.getCacheMode() == LOCAL)   return false;  return cfg.getNearConfiguration() != null;}  }
class C{  public void testServerRetransmissionHiding() throws Exception {  String oldRetransValue=System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);  System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"2");  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  Thread.sleep(1000);  Vector<StunMessageEvent> reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  assertTrue("Retransmissions of a binding request were propagated " + "to the server",reqs.size() <= 1);  if (oldRetransValue != null)   System.getProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,oldRetransValue); else   System.clearProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS);}  }
class C{  private void resetTexture(){  mSphere.deleteCurrentTexture();  checkGLError("after deleting texture");  mSphere.loadTexture(this,getPhotoIndex());  checkGLError("loading texture");}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState,R.layout.activity_search);}  }
class C{  private static void divide(int[] n1,int[] n2,int[] quotient,int[] remainder){  if (isZero(n2)) {    throw new ArithmeticException("Divide by Zero");  }  clear(remainder);  clear(quotient);  if (compareTo(n2,n1) > 0) {    int idx=remainder.length - 1;    for (int i=0; i < n1.length; i++) {      remainder[idx--]=n1[i];    }    return;  }  n1=reduce(n1);  n2=reduce(n2);  while (compareTo(n2,0,n2.length,n1,0) > 0) {    n2=expand(n2);  }  String result=subProcess(n1,n2);  int idx=result.indexOf("+");  if (idx == -1) {    for (int i=0; i < quotient.length; i++) {      quotient[i]=0;    }    pack(remainder,result);  } else {    pack(quotient,result.substring(0,idx));    pack(remainder,result.substring(idx + 1));  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public TextQuery(Class<?> type,String txt){  setType(type);  setText(txt);}  }
class C{  public HessianProxyFactory(ClassLoader loader){  _loader=loader;  _resolver=new HessianProxyResolver(this);}  }
class C{  private boolean usingNewAPI(JndiNameEnvironment envDescriptor){  if (getInjectionInfoMethod == null) {    try {      getInjectionInfoMethod=envDescriptor.getClass().getMethod("getInjectionInfoByClass",String.class);      usingNewAPI=false;    } catch (    NoSuchMethodException nsme) {      try {        getInjectionInfoMethod=envDescriptor.getClass().getMethod("getInjectionInfoByClass",Class.class);        usingNewAPI=true;      } catch (      NoSuchMethodException nsme2) {        throw new FacesException(nsme2);      }    }  }  return usingNewAPI;}  }
class C{  public SkipMeException(String reason){  super(reason);}  }
class C{  @Override protected void doStop() throws Exception {  _scanner.removeListener(_scannerListener);  _scanner.stop();}  }
class C{  public void advance(){  endIndex++;}  }
class C{  public Task createResourceTicket(String tenantId,ResourceTicketCreateSpec resourceTicketCreateSpec) throws IOException {  String path=String.format("%s/%s/resource-tickets",getBasePath(),tenantId);  HttpResponse response=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(resourceTicketCreateSpec));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public static LanguageBundle forLocale(Locale locale){  String fullTag=new Locale(locale.getLanguage(),locale.getCountry()).toLanguageTag().replace('-','_');  LanguageBundle bundle=forLocaleIdOrNull(fullTag);  if (bundle != null) {    return bundle;  }  String languageTag=new Locale(locale.getLanguage()).toLanguageTag().replace('-','_');  bundle=forLocaleIdOrNull(languageTag);  if (bundle != null) {    return bundle;  }  return FallbackLanguageBundle.getInstance();}  }
class C{  public Thread execute(OwnCloudClient client,FileDataStorageManager storageManager,OnRemoteOperationListener listener,Handler listenerHandler){  if (storageManager == null) {    throw new IllegalArgumentException("Trying to execute a sync operation " + "with a NULL storage manager");  }  mStorageManager=storageManager;  return super.execute(client,listener,listenerHandler);}  }
class C{  private void convertNodes2Crossings(DgKSNetwork ksNet,Network net){  for (  Node node : net.getNodes().values()) {    DgCrossing crossing=new DgCrossing(this.idConverter.convertNodeId2CrossingId(node.getId()));    Coordinate nodeCoordinate=MGC.coord2Coordinate(node.getCoord());    if (this.signalsBoundingBox == null || this.signalsBoundingBox.contains(nodeCoordinate)) {      for (      Link link : node.getInLinks().values()) {        if (signalizedLinks.contains(link.getId())) {          crossing.setType(TtCrossingType.FIXED);        }      }      if (crossing.getType() == null) {        crossing.setType(TtCrossingType.EQUALRANK);      }    } else {      crossing.setType(TtCrossingType.NOTEXPAND);      DgCrossingNode crossingNode=new DgCrossingNode(this.idConverter.convertNodeId2NotExpandedCrossingNodeId(node.getId()));      crossingNode.setCoordinate(node.getCoord());      crossing.addNode(crossingNode);    }    ksNet.addCrossing(crossing);  }}  }
class C{  private List<NameValuePair> initPostParametersForRegistration(RequestData data){  List<NameValuePair> regParams=new ArrayList<NameValuePair>();  setBasicPostParameters(regParams,data);  regParams.add(new NameValuePair(HeidelpayPostParameter.PAYMENT_CODE,getHeidelPayPaymentType(data.getPaymentTypeId()) + ".RG"));  initGeneralRegistrationPostData(regParams,data);  return regParams;}  }
class C{  public String localName(String name){  int colon=name.indexOf(':');  if (colon == -1) {    return name;  } else {    return name.substring(colon + 1).intern();  }}  }
class C{  protected static void updateNodeIds(final List<INaviViewNode> nodes,final int firstNode){  int newIdCounter=firstNode;  for (  final INaviViewNode node : nodes) {    node.setId(newIdCounter);    newIdCounter++;  }}  }
class C{  public ImageProperty(byte[] data,ImageType type){  super(data,type);}  }
class C{  public void add(int x,int y){  if (this.size == this.capacity)   flush();  this.xElements[this.size]=x;  this.yElements[this.size++]=y;}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr){  this(context,attrs,defStyleAttr,R.style.Preference_Material_SwitchPreferenceCompat);}  }
class C{  public static long copyAndClose(InputStream in,OutputStream out) throws IOException {  try {    long len=copyAndCloseInput(in,out);    out.close();    return len;  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    closeSilently(out);  }}  }
class C{  public static void initialError(String s,Parameter p1){  String er="STARTUP ERROR:\n" + s;  System.err.println(er);  if (p1 != null) {    er+="PARAMETER: " + p1;    System.err.println("PARAMETER: " + p1);  }  exitWithError(null,er,false);}  }
class C{  static String valueToString(Object value){  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof String) {    return (String)value;  }  if (value instanceof Float || value instanceof Double || value instanceof Byte|| value instanceof Short|| value instanceof Integer|| value instanceof Long) {    return numberToString(value);  }  if (value instanceof Boolean || value instanceof Map || value instanceof List) {    return value.toString();  }  return quote(value.toString());}  }
class C{  @DSComment("Data serialization/deserialization") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.161 -0500",hash_original_method="0CF6D9F1E08225F80F6CBB6DE559E3A9",hash_generated_method="1C003B722C02AF5B148F4AC3DEDD3455") @DSVerified("called from transact") protected boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {  if (code == INTERFACE_TRANSACTION) {    reply.writeString(getInterfaceDescriptor());    return true;  } else   if (code == DUMP_TRANSACTION) {    ParcelFileDescriptor fd=data.readFileDescriptor();    String[] args=data.readStringArray();    if (fd != null) {      try {        dump(fd.getFileDescriptor(),args);      }  finally {        try {          fd.close();        } catch (        IOException e) {        }      }    }    if (reply != null) {      reply.writeNoException();    } else {      StrictMode.clearGatheredViolations();    }    return true;  }  return false;}  }
class C{  public Plugin(RajawaliRenderer renderer,boolean createVBOs){  mGeometry=new Geometry3D();  mRenderer=renderer;  init(createVBOs);}  }
class C{  Menubar(SwingGui debugGui){  super();  this.debugGui=debugGui;  String[] fileItems={"Open...","Run...","","Exit"};  String[] fileCmds={"Open","Load","","Exit"};  char[] fileShortCuts={'0','N',0,'X'};  int[] fileAccelerators={KeyEvent.VK_O,KeyEvent.VK_N,0,KeyEvent.VK_Q};  String[] editItems={"Cut","Copy","Paste","Go to function..."};  char[] editShortCuts={'T','C','P','F'};  String[] debugItems={"Break","Go","Step Into","Step Over","Step Out"};  char[] debugShortCuts={'B','G','I','O','T'};  String[] plafItems={"Metal","Windows","Motif"};  char[] plafShortCuts={'M','W','F'};  int[] debugAccelerators={KeyEvent.VK_PAUSE,KeyEvent.VK_F5,KeyEvent.VK_F11,KeyEvent.VK_F7,KeyEvent.VK_F8,0,0};  JMenu fileMenu=new JMenu("File");  fileMenu.setMnemonic('F');  JMenu editMenu=new JMenu("Edit");  editMenu.setMnemonic('E');  JMenu plafMenu=new JMenu("Platform");  plafMenu.setMnemonic('P');  JMenu debugMenu=new JMenu("Debug");  debugMenu.setMnemonic('D');  windowMenu=new JMenu("Window");  windowMenu.setMnemonic('W');  for (int i=0; i < fileItems.length; ++i) {    if (fileItems[i].length() == 0) {      fileMenu.addSeparator();    } else {      JMenuItem item=new JMenuItem(fileItems[i],fileShortCuts[i]);      item.setActionCommand(fileCmds[i]);      item.addActionListener(this);      fileMenu.add(item);      if (fileAccelerators[i] != 0) {        KeyStroke k=KeyStroke.getKeyStroke(fileAccelerators[i],Event.CTRL_MASK);        item.setAccelerator(k);      }    }  }  for (int i=0; i < editItems.length; ++i) {    JMenuItem item=new JMenuItem(editItems[i],editShortCuts[i]);    item.addActionListener(this);    editMenu.add(item);  }  for (int i=0; i < plafItems.length; ++i) {    JMenuItem item=new JMenuItem(plafItems[i],plafShortCuts[i]);    item.addActionListener(this);    plafMenu.add(item);  }  for (int i=0; i < debugItems.length; ++i) {    JMenuItem item=new JMenuItem(debugItems[i],debugShortCuts[i]);    item.addActionListener(this);    if (debugAccelerators[i] != 0) {      KeyStroke k=KeyStroke.getKeyStroke(debugAccelerators[i],0);      item.setAccelerator(k);    }    if (i != 0) {      interruptOnlyItems.add(item);    } else {      runOnlyItems.add(item);    }    debugMenu.add(item);  }  breakOnExceptions=new JCheckBoxMenuItem("Break on Exceptions");  breakOnExceptions.setMnemonic('X');  breakOnExceptions.addActionListener(this);  breakOnExceptions.setSelected(false);  debugMenu.add(breakOnExceptions);  breakOnEnter=new JCheckBoxMenuItem("Break on Function Enter");  breakOnEnter.setMnemonic('E');  breakOnEnter.addActionListener(this);  breakOnEnter.setSelected(false);  debugMenu.add(breakOnEnter);  breakOnReturn=new JCheckBoxMenuItem("Break on Function Return");  breakOnReturn.setMnemonic('R');  breakOnReturn.addActionListener(this);  breakOnReturn.setSelected(false);  debugMenu.add(breakOnReturn);  add(fileMenu);  add(editMenu);  add(debugMenu);  JMenuItem item;  windowMenu.add(item=new JMenuItem("Cascade",'A'));  item.addActionListener(this);  windowMenu.add(item=new JMenuItem("Tile",'T'));  item.addActionListener(this);  windowMenu.addSeparator();  windowMenu.add(item=new JMenuItem("Console",'C'));  item.addActionListener(this);  add(windowMenu);  updateEnabled(false);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void createXLS(File outFile,Language language) throws Exception {  PrintDataExcelExporter exp=new PrintDataExcelExporter(getPrintData(),getPrintFormat());  exp.export(outFile,language);}  }
class C{  @After public void tearDown(){  realProblem=null;  binaryProblem=null;  permutationProblem=null;  subsetProblem=null;  properties=null;}  }
class C{  public boolean insertRandomCall(TestCase test,int position){  int previousLength=test.size();  String name="";  currentRecursion.clear();  logger.debug("Inserting random call at position {}",position);  try {    if (reflectionFactory == null) {      final Class<?> targetClass=Properties.getTargetClassAndDontInitialise();      reflectionFactory=new ReflectionFactory(targetClass);    }    if (reflectionFactory.hasPrivateFieldsOrMethods() && TimeController.getInstance().getPhasePercentage() >= Properties.REFLECTION_START_PERCENT && (Randomness.nextDouble() < Properties.P_REFLECTION_ON_PRIVATE || TestCluster.getInstance().getNumTestCalls() == 0)) {      logger.debug("Going to insert random reflection call");      return insertRandomReflectionCall(test,position,0);    }    GenericAccessibleObject<?> o=TestCluster.getInstance().getRandomTestCall();    if (o == null) {      logger.warn("Have no target methods to test");      return false;    } else     if (o.isConstructor()) {      if (InstanceOnlyOnce.canInstantiateOnlyOnce(o.getDeclaringClass()) && ConstraintHelper.countNumberOfNewInstances(test,o.getDeclaringClass()) != 0) {        return false;      }      GenericConstructor c=(GenericConstructor)o;      logger.debug("Adding constructor call {}",c.getName());      name=c.getName();      addConstructor(test,c,position,0);    } else     if (o.isMethod()) {      GenericMethod m=(GenericMethod)o;      logger.debug("Adding method call {}",m.getName());      name=m.getName();      if (!m.isStatic()) {        logger.debug("Getting callee of type {}",m.getOwnerClass().getTypeName());        VariableReference callee=null;        Type target=m.getOwnerType();        if (!test.hasObject(target,position)) {          callee=createObject(test,target,position,0,null,true,false,true);          position+=test.size() - previousLength;          previousLength=test.size();        } else {          callee=test.getRandomNonNullObject(target,position);        }        logger.debug("Got callee of type {}",callee.getGenericClass().getTypeName());        if (!TestUsageChecker.canUse(m.getMethod(),callee.getVariableClass())) {          logger.debug("Cannot call method {} with callee of type {}",m,callee.getClassName());          throw new ConstructionFailedException("Cannot apply method to this callee");        }        addMethodFor(test,callee,m.copyWithNewOwner(callee.getGenericClass()),position);      } else {        addMethod(test,m,position,0);      }    } else     if (o.isField()) {      GenericField f=(GenericField)o;      name=f.getName();      logger.debug("Adding field {}",f.getName());      if (Randomness.nextBoolean()) {        addFieldAssignment(test,f,position,0);      } else {        addField(test,f,position,0);      }    } else {      logger.error("Got type other than method or constructor!");      return false;    }    return true;  } catch (  ConstructionFailedException e) {    logger.debug("Inserting statement {} has failed. Removing statements: {}",name,e);    int lengthDifference=test.size() - previousLength;    for (int i=lengthDifference - 1; i >= 0; i--) {      if (logger.isDebugEnabled()) {        logger.debug("  Removing statement: " + test.getStatement(position + i).getCode());      }      test.remove(position + i);    }    return false;  }}  }
class C{  public void testUnsizedLongsCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.longs().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  private void initialize(){  this.setName(Constant.messages.getString("keyboard.options.title"));  this.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.weightx=1.0;  gbc.anchor=GridBagConstraints.LINE_START;  gbc.fill=GridBagConstraints.BOTH;  tkeyboardOptionsPanel=new KeyboardOptionsPanel(getShortcutModel());  gbc.weighty=1.0;  this.add(tkeyboardOptionsPanel,LayoutHelper.getGBC(0,0,5,1.0D,1.0D,GridBagConstraints.BOTH,GridBagConstraints.LINE_START,null));  this.add(new JLabel(),LayoutHelper.getGBC(0,1,1,0.5D,0));  if (DesktopUtils.canOpenUrlInBrowser()) {    this.add(getCheatsheetAction(),LayoutHelper.getGBC(1,1,1,0,0));    this.add(getCheatsheetKey(),LayoutHelper.getGBC(2,1,1,0,0));  }  this.add(getResetButton(),LayoutHelper.getGBC(3,1,1,0,0));  this.add(new JLabel(),LayoutHelper.getGBC(4,1,1,0.5D,0));}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  convertInstance(instance);  return true;}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_LATLON;  int lineType=OMGraphic.LINETYPE_GREATCIRCLE;  if (ga != null) {    renderType=ga.getRenderType();    lineType=ga.getLineType();  }  if (Debug.debugging("eomg")) {    Debug.output("EditableOMPoly.createGraphic(): rendertype = " + renderType);  }  if (lineType == OMGraphic.LINETYPE_UNKNOWN) {    lineType=OMGraphic.LINETYPE_GREATCIRCLE;    if (ga != null)     ga.setLineType(OMGraphic.LINETYPE_GREATCIRCLE);  }  this.poly=(OMPoly)createGraphic(renderType,lineType);  if (ga != null) {    ga.setRenderType(poly.getRenderType());    ga.setTo(poly,true);  }}  }
class C{  public AtomicIntegerArray(int length){  array=new int[length];}  }
class C{  IntSetSetting(Properties defaultProps,Properties props,String key,Integer[] defaultValue){  super(defaultProps,props,key,decode(new HashSet<Integer>(Arrays.asList(defaultValue))));  setPrivate(true);}  }
class C{  ElementMetadataRegistry(Schema schema,ElementMetadataRegistryBuilder elementBuilder){  this.schema=schema;  this.transforms=getTransforms(elementBuilder);}  }
class C{  public void shutdown() throws Exception {  try {    for (int i=jettys.size() - 1; i >= 0; --i) {      stopJettySolrRunner(i);    }  }  finally {    try {      zkServer.shutdown();    }  finally {      System.clearProperty("solr.solrxml.location");      System.clearProperty("zkHost");    }  }}  }
class C{  private void sendThanksEMail(HttpServletRequest request,Properties ctx,MPayment p,WebUser wu,WebOrder wo){  StringBuffer message=new StringBuffer().append(p.getPayAmt()).append(" (").append(Msg.getElement(ctx,"R_PnRef")).append("=").append(p.getR_PnRef()).append(") ");  if (wo != null)   message.append("\n").append(Msg.getElement(ctx,"C_Order_ID")).append(": ").append(wo.getDocumentNo());  JSPEnv.sendEMail(request,wu,MMailMsg.MAILMSGTYPE_PaymentAcknowledgement,new Object[]{p.getDocumentNo() + " (" + p.getPayAmt()+ ")",wu.getName(),message.toString()});  if (wo != null && wo.getSalesRep_ID() != 0) {    MClient client=MClient.get(ctx);    client.sendEMail(wo.getSalesRep_ID(),"(CC) Payment: " + p.getDocumentNo() + " ("+ p.getPayAmt()+ ")","Order: " + wo.getDocumentNo() + "\nUser: "+ wu.getName()+ " - "+ wu.getEmail(),null);  }}  }
class C{  @Override public void overrideNextAnimation(int animIn,int animOut){  getNavigationManager().overrideNextAnimation(animIn,animOut);}  }
class C{  private void updateClasspathConfig(final List<String> files){  Collections.reverse(files);  final StringBuilder sb=new StringBuilder();  for (  final String file : files) {    sb.append(file + ",");  }  if (!bootProp.getProperty("load-1.20","").startsWith(sb.toString())) {    sb.append(bootProp.getProperty("load-1.20",""));    bootProp.put("load-1.20",sb.toString());  }}  }
class C{  public static ClassificationDataSet loadC(Reader reader,double sparseRatio,int vectorLength) throws IOException {  return (ClassificationDataSet)loadG(reader,sparseRatio,vectorLength,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String isExistingConfiguration(String filename){  for (  String existingConfigName : getExistingConfigurations()) {    if (existingConfigName.equalsIgnoreCase(filename))     return existingConfigName;  }  return null;}  }
class C{  public Vector2 lerp(Vector2 target,float alpha){  Vector2 r=this.mul(1.0f - alpha);  r.add(target.tmp().mul(alpha));  return r;}  }
class C{  @Override public void parse(Reader in) throws IOException, ParseException {  boolean ignoreCase=synonymManager.getIgnoreCase();  for (  CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {    for (    String term : cpsm.mappings.keySet()) {      for (      String mapping : cpsm.mappings.get(term)) {        String casedTerm=synonymManager.applyCaseSetting(ignoreCase,term);        String casedMapping=synonymManager.applyCaseSetting(ignoreCase,mapping);        add(new CharsRef(casedTerm),new CharsRef(casedMapping),false);      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public static Map<String,Object> loadStream(InputStream inputStream){  LOG.fine("Reading config stream");  Yaml yaml=new Yaml();  Map<Object,Object> propsYaml=(Map<Object,Object>)yaml.load(inputStream);  LOG.fine("Successfully read config");  Map<String,Object> typedMap=new HashMap<>();  for (  Object key : propsYaml.keySet()) {    typedMap.put(key.toString(),propsYaml.get(key));  }  return typedMap;}  }
class C{  public boolean validSystemNameFormat(String systemName){  return (SerialAddress.validSystemNameFormat(systemName,'L'));}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized Object clone(){  try {    Vector<E> vector=(Vector<E>)super.clone();    vector.elementData=elementData.clone();    return vector;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static boolean copyFile(File src,File dst,boolean move){  FileChannel inChannel=null;  FileChannel outChannel=null;  try {    inChannel=new FileInputStream(src).getChannel();    outChannel=new FileOutputStream(dst).getChannel();    inChannel.transferTo(0,inChannel.size(),outChannel);  } catch (  Exception e) {    Log.e(StorageUtil.class.getSimpleName(),"Error copying file " + src.getPath() + " to "+ dst.getPath());    return false;  } finally {    try {      if (inChannel != null) {        inChannel.close();      }      if (outChannel != null) {        outChannel.close();      }    } catch (    Exception ignored) {    }  }  if (move) {    deleteFile(src);  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSComment("GUI/Edge Effect, check callbacks") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.876 -0500",hash_original_method="610B6E206A511890E944EC9E15AA39A0",hash_generated_method="1EDED50610952764ADA2095B62231960") public boolean draw(Canvas canvas){  update();  final int edgeHeight=mEdge.getIntrinsicHeight();  final int edgeWidth=mEdge.getIntrinsicWidth();  final int glowHeight=mGlow.getIntrinsicHeight();  final int glowWidth=mGlow.getIntrinsicWidth();  mGlow.setAlpha((int)(Math.max(0,Math.min(mGlowAlpha,1)) * 255));  int glowBottom=(int)Math.min(glowHeight * mGlowScaleY * glowHeight / glowWidth * 0.6f,glowHeight * MAX_GLOW_HEIGHT);  if (mWidth < mMinWidth) {    int glowLeft=(mWidth - mMinWidth) / 2;    mGlow.setBounds(glowLeft,0,mWidth - glowLeft,glowBottom);  } else {    mGlow.setBounds(0,0,mWidth,glowBottom);  }  mGlow.draw(canvas);  mEdge.setAlpha((int)(Math.max(0,Math.min(mEdgeAlpha,1)) * 255));  int edgeBottom=(int)(edgeHeight * mEdgeScaleY);  if (mWidth < mMinWidth) {    int edgeLeft=(mWidth - mMinWidth) / 2;    mEdge.setBounds(edgeLeft,0,mWidth - edgeLeft,edgeBottom);  } else {    mEdge.setBounds(0,0,mWidth,edgeBottom);  }  mEdge.draw(canvas);  return mState != STATE_IDLE;}  }
class C{  public static String gsm8BitUnpackedToString(byte[] data,int offset,int length){  return gsm8BitUnpackedToString(data,offset,length,"");}  }
class C{  protected void fireTreeNodesRemoved(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesRemoved(e);    }  }}  }
class C{  public DateTime withTimeAtStartOfDay(){  return toLocalDate().toDateTimeAtStartOfDay(getZone());}  }
class C{  public Location(byte[] data){  this.data=data;  this.offset=arrayBase;}  }
class C{  public boolean quorumHighest(int timestamp,byte[] value,HashSet<CollectData> collects){  if (collects == null || value == null)   return false;  boolean appears=false;  boolean quorum=false;  for (  CollectData c : collects) {    if (c.getQuorumWrites().getTimestamp() == timestamp && Arrays.equals(value,c.getQuorumWrites().getValue())) {      appears=true;      break;    }  }  if (appears)   bftsmart.tom.util.Logger.println("(LCManager.quorumHighest) timestamp/value pair (" + timestamp + " , "+ Arrays.toString(value)+ ") appears in at least one replica context");  int count=0;  for (  CollectData c : collects) {    if ((c.getQuorumWrites().getTimestamp() < timestamp) || (c.getQuorumWrites().getTimestamp() == timestamp && Arrays.equals(value,c.getQuorumWrites().getValue())))     count++;  }  if (SVController.getStaticConf().isBFT()) {    quorum=count > ((SVController.getCurrentViewN() + SVController.getCurrentViewF()) / 2);  } else {    quorum=count > ((SVController.getCurrentViewN()) / 2);  }  if (quorum)   bftsmart.tom.util.Logger.println("(LCManager.quorumHighest) timestamp/value pair (" + timestamp + " , "+ Arrays.toString(value)+ ") has the highest timestamp among a "+ (SVController.getStaticConf().isBFT() ? "Byzantine" : "simple")+ " quorum of replica contexts");  return appears && quorum;}  }
class C{  protected void waitForExternalStoreMount() throws Exception {  String extStorageState=Environment.getExternalStorageState();  int currentWaitTime=0;  while (!extStorageState.equals(Environment.MEDIA_MOUNTED)) {    Log.i(LOG_TAG,"Waiting for SD card...");    currentWaitTime=timeoutWait(currentWaitTime,DEFAULT_WAIT_POLL_TIME,DEFAULT_MAX_WAIT_TIME,"Timed out waiting for SD Card to be ready!");    extStorageState=Environment.getExternalStorageState();  }}  }
class C{  public Builder customProperty(String name,Number... values){  return customProperty(new Property(name,values));}  }
class C{  public static MediaType parse(String input){  checkNotNull(input);  Tokenizer tokenizer=new Tokenizer(input);  try {    String type=tokenizer.consumeToken(TOKEN_MATCHER);    tokenizer.consumeCharacter('/');    String subtype=tokenizer.consumeToken(TOKEN_MATCHER);    ImmutableListMultimap.Builder<String,String> parameters=ImmutableListMultimap.builder();    while (tokenizer.hasMore()) {      tokenizer.consumeCharacter(';');      tokenizer.consumeTokenIfPresent(LINEAR_WHITE_SPACE);      String attribute=tokenizer.consumeToken(TOKEN_MATCHER);      tokenizer.consumeCharacter('=');      final String value;      if ('"' == tokenizer.previewChar()) {        tokenizer.consumeCharacter('"');        StringBuilder valueBuilder=new StringBuilder();        while ('"' != tokenizer.previewChar()) {          if ('\\' == tokenizer.previewChar()) {            tokenizer.consumeCharacter('\\');            valueBuilder.append(tokenizer.consumeCharacter(ascii()));          } else {            valueBuilder.append(tokenizer.consumeToken(QUOTED_TEXT_MATCHER));          }        }        value=valueBuilder.toString();        tokenizer.consumeCharacter('"');      } else {        value=tokenizer.consumeToken(TOKEN_MATCHER);      }      parameters.put(attribute,value);    }    return create(type,subtype,parameters.build());  } catch (  IllegalStateException e) {    throw new IllegalArgumentException("Could not parse '" + input + "'",e);  }}  }
class C{  public void addMethodRef(String className,ConfigurationMethodRef methodInvocationConfig){  this.methodInvocationReferences.put(className,methodInvocationConfig);}  }
class C{  public Aqueduc(){  super();}  }
class C{  private void sendAckDataTransfer(Calendar time,int bytesTransferred){  byte[] ackTime=MiBandDateConverter.calendarToRawBytes(time);  Prefs prefs=GBApplication.getPrefs();  byte[] ackChecksum=new byte[]{(byte)(bytesTransferred & 0xff),(byte)(0xff & (bytesTransferred >> 8))};  if (prefs.getBoolean(MiBandConst.PREF_MIBAND_DONT_ACK_TRANSFER,false)) {    ackChecksum=new byte[]{(byte)(~bytesTransferred & 0xff),(byte)(0xff & (~bytesTransferred >> 8))};  }  byte[] ack=new byte[]{MiBandService.COMMAND_CONFIRM_ACTIVITY_DATA_TRANSFER_COMPLETE,ackTime[0],ackTime[1],ackTime[2],ackTime[3],ackTime[4],ackTime[5],ackChecksum[0],ackChecksum[1]};  try {    TransactionBuilder builder=performInitialized("send acknowledge");    builder.write(getCharacteristic(MiBandService.UUID_CHARACTERISTIC_CONTROL_POINT),ack);    builder.queue(getQueue());    flushActivityDataHolder();    if (getDevice().isBusy() && bytesTransferred == 0) {      if (prefs.getBoolean(MiBandConst.PREF_MIBAND_DONT_ACK_TRANSFER,false)) {        builder=performInitialized("send acknowledge");        builder.write(getCharacteristic(MiBandService.UUID_CHARACTERISTIC_CONTROL_POINT),new byte[]{MiBandService.COMMAND_STOP_SYNC_DATA});        getSupport().setHighLatency(builder);        builder.queue(getQueue());      }      handleActivityFetchFinish();    }  } catch (  IOException ex) {    LOG.error("Unable to send ack to MI",ex);  }}  }
class C{  public Builder resultsTtl(Integer resultsTtl){  this.resultsTtl=resultsTtl;  return this;}  }
class C{  public void testEndOfMessage(){  Em18RfidProtocol instance=new Em18RfidProtocol();  assertEquals(true,instance.endOfMessage(msgStandalone));}  }
class C{  public boolean isConnecting(){synchronized (currentStateLock) {    return currentState == ConnectionState.CONNECTING;  }}  }
class C{  public boolean hasMetrics(){  return hasRepeatingExtension(Metric.class);}  }
class C{  public boolean isOptOut(){  configuration.load();  return configuration.get(Configuration.CATEGORY_GENERAL,"opt-out",false).getBoolean(false);}  }
class C{  public static long[] readAllLongs(){  String[] fields=readAllStrings();  long[] vals=new long[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Long.parseLong(fields[i]);  return vals;}  }
class C{  public boolean isFromWithParam(){  return m_isFromWithParam;}  }
class C{  private void updateLongestRegisterName(){  m_longestRegisterName=Integer.MIN_VALUE;  for (  final RegisterInformation register : m_registerModel.getRegisterInformation()) {    if (register.getRegisterName().length() > m_longestRegisterName) {      m_longestRegisterName=register.getRegisterName().length();    }  }}  }
class C{  private void ensureActiveTabVisible(){  if (activeTab == null) {    return;  }  for (int i=0; i < tabsPanel.getWidgetCount(); i++) {    if (editorPaneMenu != null && editorPaneMenu != tabsPanel.getWidget(i)) {      tabsPanel.getWidget(i).setVisible(true);    }  }  for (int i=0; i < tabsPanel.getWidgetCount(); i++) {    Widget currentWidget=tabsPanel.getWidget(i);    Widget activeTabWidget=activeTab.getView().asWidget();    if (editorPaneMenu != null && editorPaneMenu == currentWidget) {      continue;    }    if (activeTabWidget.getAbsoluteTop() > tabsPanel.getAbsoluteTop() && activeTabWidget != currentWidget) {      currentWidget.setVisible(false);    }  }}  }
class C{  public static void checkProperties(final Properties properties) throws UnsupportedOperationException {  final boolean quads=Boolean.parseBoolean(properties.getProperty(BigdataSail.Options.QUADS,BigdataSail.Options.DEFAULT_QUADS));  final boolean quadsMode=Boolean.parseBoolean(properties.getProperty(BigdataSail.Options.QUADS_MODE,BigdataSail.Options.DEFAULT_QUADS_MODE));  final boolean isolatable=Boolean.parseBoolean(properties.getProperty(BigdataSail.Options.ISOLATABLE_INDICES,BigdataSail.Options.DEFAULT_ISOLATABLE_INDICES));  final boolean tm=Boolean.parseBoolean(properties.getProperty(BigdataSail.Options.TRUTH_MAINTENANCE,BigdataSail.Options.DEFAULT_TRUTH_MAINTENANCE));  final boolean justify=Boolean.parseBoolean(properties.getProperty(BigdataSail.Options.JUSTIFY,BigdataSail.Options.DEFAULT_JUSTIFY));  final boolean noAxioms=properties.getProperty(BigdataSail.Options.AXIOMS_CLASS,BigdataSail.Options.DEFAULT_AXIOMS_CLASS).equals(NoAxioms.class.getName());  if (isolatable && !quadsMode) {    if (tm) {      throw new UnsupportedOperationException("Cannot use transactions with truth maintenance. " + "Set option " + Options.TRUTH_MAINTENANCE + " = false");    }    if (!noAxioms) {      throw new UnsupportedOperationException("Cannot use transactions with inference. " + "Set option " + Options.AXIOMS_CLASS + " = "+ NoAxioms.class.getName());    }    if (justify) {      throw new UnsupportedOperationException("Cannot use transactions with justification chains. " + "Set option " + Options.JUSTIFY + " = "+ Boolean.FALSE);    }  }  if (quads || quadsMode) {    if (tm) {      throw new UnsupportedOperationException(Options.TRUTH_MAINTENANCE + " is not supported with quads (" + Options.QUADS+ ")");    }  }}  }
class C{  @Override protected void tearDown(){  m_Classifier=null;  m_OptionTester=null;  File file=new File(MODEL_FILENAME);  if (file.exists()) {    file.delete();  }}  }
class C{  public BitmapAjaxCallback ratio(float ratio){  this.ratio=ratio;  return this;}  }
class C{  @BeforeClass public static void buildWorld() throws Exception {  SingletonRepository.getRPWorld();  setupZone(ZONE_NAME);}  }
class C{  public KeymapChangeEvent(final String editorTypeKey,final String keymapKey){  this.editorTypeKey=editorTypeKey;  this.keymapKey=keymapKey;}  }
class C{  @SuppressWarnings("unchecked") protected String doIt() throws Exception {  MBrowse browse=new MBrowse(getCtx(),p_Record_ID,get_TrxName());  MView view=browse.getAD_View();  int seq=10;  for (  MViewColumn column : view.getViewColumns()) {    MBrowseField field=MBrowseField.get(browse,column);    if (field != null)     continue;    field=new MBrowseField(browse,column);    field.setAD_Browse_ID(browse.get_ID());    field.setEntityType(browse.getEntityType());    field.setIsDisplayed(false);    field.setIsMandatory(false);    field.setSeqNo(seq);    field.saveEx();    seq++;    addLog(column.getColumnName());  }  return "@Ok@";}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS05.class,args);}  }
class C{  private HashMapEntry<K,V>[] doubleCapacity(){  HashMapEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  HashMapEntry<K,V>[] newTable=makeTable(newCapacity);  if (size == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    HashMapEntry<K,V> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.hash & oldCapacity;    HashMapEntry<K,V> broken=null;    newTable[j | highBit]=e;    for (HashMapEntry<K,V> n=e.next; n != null; e=n, n=n.next) {      int nextHighBit=n.hash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null)         newTable[j | nextHighBit]=n; else         broken.next=n;        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.next=null;  }  return newTable;}  }
class C{  public long insert(String table,String nullColumnHack,ContentValues values){  verifyDbIsOpen();  StringBuilder sql=new StringBuilder();  sql.append("INSERT");  sql.append(" INTO ");  sql.append(table);  sql.append(" (");  Object[] bindArgs=null;  int size=(values != null && values.size() > 0) ? values.size() : 0;  if (size > 0) {    bindArgs=new Object[size];    int i=0;    for (    String colName : values.keySet()) {      sql.append((i > 0) ? "," : "");      sql.append(colName);      bindArgs[i++]=values.get(colName);    }    sql.append(')');    sql.append(" VALUES (");    for (i=0; i < size; i++) {      sql.append((i > 0) ? ",?" : "?");    }  } else {    sql.append(nullColumnHack + ") VALUES (NULL");  }  sql.append(')');  return executeSql(sql.toString(),bindArgs);}  }
class C{  public Pattern indexUrlMustMatchPattern(){  if (this.indexurlmustmatch == null) {    final String r=get(CrawlAttribute.INDEXING_URL_MUSTMATCH.key);    try {      this.indexurlmustmatch=(r == null || r.equals(CrawlProfile.MATCH_ALL_STRING)) ? CrawlProfile.MATCH_ALL_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.indexurlmustmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.indexurlmustmatch;}  }
class C{  @Override public int hashCode(){  return this.table.name().hashCode();}  }
class C{  public static ApplicationXml parseApplicationXmlFromFile(File file,EntityResolver entityResolver) throws IOException, JDOMException {  InputStream in=null;  try {    in=new FileInputStream(file);    return parseApplicationXml(in,entityResolver);  }  finally {    if (in != null) {      try {        in.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  private Value callPseudoFunction(Value thisValue,String funcname,Value[] args,int isolateId) throws PlayerDebugException {  if (thisValue.getType() == VariableType.UNDEFINED || thisValue.getType() == VariableType.NULL) {    if ("$obj".equals(funcname)) {      return callObjPseudoFunction(args,isolateId);    }  }  return null;}  }
class C{  public void dec(long n){  this.segmentNumber-=n;  long m=n * SegmentedTimeline.this.segmentSize;  this.segmentStart-=m;  this.segmentEnd-=m;  this.millisecond-=m;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.789 -0500",hash_original_method="08B1FFF12F3A2A6B1FA7AE4A9CD9EAF5",hash_generated_method="2F247EB8C788F3DF8092119537308E70") public long ntpValue(){  return ntpTime;}  }
class C{  public static boolean copy(FileSystem srcFS,FileStatus srcStatus,FileSystem dstFS,Path dst,boolean deleteSource,boolean overwrite,Configuration conf) throws IOException {  Path src=srcStatus.getPath();  if (srcStatus.isDirectory()) {    if (!mkdirs(dstFS,dst)) {      return false;    }    FileStatus[] contents=srcFS.listStatus(src);    for (int i=0; i < contents.length; i++) {      copy(srcFS,contents[i],dstFS,new Path(dst,contents[i].getPath().getName()),deleteSource,overwrite,conf);    }  } else {    try (InputStream in=srcFS.open(src);OutputStream out=dstFS.create(dst,overwrite)){      org.apache.hadoop.io.IOUtils.copyBytes(in,out,conf,true);    }   }  if (srcStatus.isDirectory()) {    dstFS.setPermission(dst,new FsPermission((short)0777));  } else {    dstFS.setPermission(dst,new FsPermission((short)0777));  }  if (deleteSource) {    return srcFS.delete(src,true);  } else {    return true;  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("DeleteOld"))     p_DeleteOld=(String)para[i].getParameter(); else     if (name.equals("PriceList_Version_ID"))     p_PriceList_Version_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_PriceList_Version_ID == 0) {    p_PriceList_Version_ID=getRecord_ID();  }  m_AD_PInstance_ID=getAD_PInstance_ID();}  }
class C{  public BeanMap(Object bean){  this.bean=bean;  initialise();}  }
class C{  public SerializationHandler createSerializationHandler(Result outputTarget,OutputProperties format) throws TransformerException {  SerializationHandler xoh;  org.w3c.dom.Node outputNode=null;  if (outputTarget instanceof DOMResult) {    outputNode=((DOMResult)outputTarget).getNode();    org.w3c.dom.Node nextSibling=((DOMResult)outputTarget).getNextSibling();    org.w3c.dom.Document doc;    short type;    if (null != outputNode) {      type=outputNode.getNodeType();      doc=(org.w3c.dom.Node.DOCUMENT_NODE == type) ? (org.w3c.dom.Document)outputNode : outputNode.getOwnerDocument();    } else {      boolean isSecureProcessing=m_stylesheetRoot.isSecureProcessing();      doc=org.apache.xml.utils.DOMHelper.createDocument(isSecureProcessing);      outputNode=doc;      type=outputNode.getNodeType();      ((DOMResult)outputTarget).setNode(outputNode);    }    DOMBuilder handler=(org.w3c.dom.Node.DOCUMENT_FRAGMENT_NODE == type) ? new DOMBuilder(doc,(org.w3c.dom.DocumentFragment)outputNode) : new DOMBuilder(doc,outputNode);    if (nextSibling != null)     handler.setNextSibling(nextSibling);    String encoding=format.getProperty(OutputKeys.ENCODING);    xoh=new ToXMLSAXHandler(handler,(LexicalHandler)handler,encoding);  } else   if (outputTarget instanceof SAXResult) {    ContentHandler handler=((SAXResult)outputTarget).getHandler();    if (null == handler)     throw new IllegalArgumentException("handler can not be null for a SAXResult");    LexicalHandler lexHandler;    if (handler instanceof LexicalHandler)     lexHandler=(LexicalHandler)handler; else     lexHandler=null;    String encoding=format.getProperty(OutputKeys.ENCODING);    String method=format.getProperty(OutputKeys.METHOD);    ToXMLSAXHandler toXMLSAXHandler=new ToXMLSAXHandler(handler,lexHandler,encoding);    toXMLSAXHandler.setShouldOutputNSAttr(false);    xoh=toXMLSAXHandler;    String publicID=format.getProperty(OutputKeys.DOCTYPE_PUBLIC);    String systemID=format.getProperty(OutputKeys.DOCTYPE_SYSTEM);    if (systemID != null)     xoh.setDoctypeSystem(systemID);    if (publicID != null)     xoh.setDoctypePublic(publicID);    if (handler instanceof TransformerClient) {      XalanTransformState state=new XalanTransformState();      ((TransformerClient)handler).setTransformState(state);      ((ToSAXHandler)xoh).setTransformState(state);    }  } else   if (outputTarget instanceof StreamResult) {    StreamResult sresult=(StreamResult)outputTarget;    try {      SerializationHandler serializer=(SerializationHandler)SerializerFactory.getSerializer(format.getProperties());      if (null != sresult.getWriter())       serializer.setWriter(sresult.getWriter()); else       if (null != sresult.getOutputStream())       serializer.setOutputStream(sresult.getOutputStream()); else       if (null != sresult.getSystemId()) {        String fileURL=sresult.getSystemId();        if (fileURL.startsWith("file:///")) {          if (fileURL.substring(8).indexOf(":") > 0)           fileURL=fileURL.substring(8); else           fileURL=fileURL.substring(7);        } else         if (fileURL.startsWith("file:/")) {          if (fileURL.substring(6).indexOf(":") > 0)           fileURL=fileURL.substring(6); else           fileURL=fileURL.substring(5);        }        m_outputStream=new java.io.FileOutputStream(fileURL);        serializer.setOutputStream(m_outputStream);        xoh=serializer;      } else       throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_OUTPUT_SPECIFIED,null));      xoh=serializer;    } catch (    IOException ioe) {      throw new TransformerException(ioe);    }  } else {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_TO_RESULT_TYPE,new Object[]{outputTarget.getClass().getName()}));  }  xoh.setTransformer(this);  SourceLocator srcLocator=getStylesheet();  xoh.setSourceLocator(srcLocator);  return xoh;}  }
class C{  protected boolean grantLockToNextRequest(){  final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);  if (isDebugEnabled_DLS) {    logger.trace(LogMarker.DLS,"[DLockGrantToken.grantLock] {} isGranted={} hasWaitingRequests={}",getName(),isLeaseHeld(),hasWaitingRequests());  }  while (!isGranted(true) && hasWaitingRequests()) {    try {      DLockRequestMessage request=null;synchronized (this) {        request=(DLockRequestMessage)this.pendingRequests.remove(0);      }      this.dlock.getStats().incPendingRequests(-1);      if (request.checkForTimeout()) {        this.grantor.cleanupSuspendState(request);        continue;      }      if (isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"[DLockGrantToken.grantLock] granting {} to {}",getName(),request.getSender());      }      long newLeaseExpireTime=grantAndRespondToRequest(request);      if (newLeaseExpireTime == -1)       continue;      if (newLeaseExpireTime < Long.MAX_VALUE) {        long now=DLockService.getLockTimeStamp(this.grantor.dm);        this.grantor.thread.checkTimeToWait(newLeaseExpireTime - now,true);      }    } catch (    IndexOutOfBoundsException e) {    }  }  return isGranted(false);}  }
class C{  public ToolBarSouthState(){  super("South");}  }
class C{  public boolean isTextBased(){  return true;}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public Map<String,Object> read(final Schema schema,final Object primaryKey,final INameFilter filter){  final TPS tps=(TPS)read(schema,primaryKey,MIN_TIMESTAMP,CURRENT_ROW,filter);  if (tps == null) {    return null;  }  return tps.asMap();}  }
class C{  @SkipValidation @Action(value="/modifyProperty-reject") public String reject(){  LOGGER.debug("reject: Property rejection started");  if (isBlank(approverComments)) {    addActionError(getText("property.workflow.remarks"));    if (StringUtils.containsIgnoreCase(userDesignationList,JUNIOR_ASSISTANT) || StringUtils.containsIgnoreCase(userDesignationList,SENIOR_ASSISTANT) || (getModel().getState().getNextAction() != null && getModel().getState().getNextAction().equalsIgnoreCase(WF_STATE_UD_REVENUE_INSPECTOR_APPROVAL_PENDING)))     return NEW; else     if (StringUtils.containsIgnoreCase(userDesignationList,BILL_COLLECTOR_DESGN) || StringUtils.containsIgnoreCase(userDesignationList,COMMISSIONER_DESGN) || StringUtils.containsIgnoreCase(userDesignationList,REVENUE_OFFICER_DESGN))     return VIEW;  }  propertyModel=(PropertyImpl)getPersistenceService().findByNamedQuery(QUERY_PROPERTYIMPL_BYID,Long.valueOf(getModelId()));  if (propertyModel.getPropertyDetail().getPropertyTypeMaster().getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND))   propertyModel.getPropertyDetail().getFloorDetails().clear();  LOGGER.debug("reject: Property: " + propertyModel);  final BasicProperty basicProperty=propertyModel.getBasicProperty();  setBasicProp(basicProperty);  LOGGER.debug("reject: BasicProperty: " + basicProperty);  transitionWorkFlow(propertyModel);  propService.updateIndexes(propertyModel,getApplicationType());  propertyImplService.update(propertyModel);  setModifyRsn(propertyModel.getPropertyDetail().getPropertyMutationMaster().getCode());  String username="";  if (propService.isEmployee(propertyModel.getCreatedBy())) {    Assignment assignment=assignmentService.getPrimaryAssignmentForUser(propertyModel.getCreatedBy().getId());    username=propertyModel.getCreatedBy().getName().concat("~").concat(assignment.getPosition().getName());  } else   username=propertyTaxUtil.getApproverUserName(propertyModel.getStateHistory().get(0).getOwnerPosition().getId());  final Assignment wfInitiator=propService.getWorkflowInitiator(propertyModel);  if (wfInitiator.getEmployee().getUsername().equals(securityUtils.getCurrentUser().getUsername())) {    wfInitiatorRejected=Boolean.TRUE;    setAckMessage(getText(PROPERTY_MODIFY_FINAL_REJECT_SUCCESS,new String[]{getModifyReasonString()}));  } else   setAckMessage(getText(PROPERTY_MODIFY_REJECT_SUCCESS,new String[]{getModifyReasonString(),username}));  buildEmailandSms(propertyModel,getApplicationType());  LOGGER.debug("reject: BasicProperty: " + getBasicProp() + "AckMessage: "+ getAckMessage());  LOGGER.debug("reject: Property rejection ended");  return RESULT_ACK;}  }
class C{  public static Value toPrimitive(Session session,Value v,PreferredType optionalPreferredType,int isolateId){  v=safeValue(v,isolateId);switch (v.getType()) {case VariableType.UNDEFINED:case VariableType.NULL:case VariableType.BOOLEAN:case VariableType.NUMBER:case VariableType.STRING:    return v;default :  return defaultValue(session,v,optionalPreferredType,isolateId);}}  }
class C{  @SuppressWarnings("rawtypes") public ReplaceBOp(final IValueExpression<? extends IV> var,final IValueExpression<? extends IV> pattern,final IValueExpression<? extends IV> replacement,final GlobalAnnotations globals){  this(new BOp[]{var,pattern,replacement},anns(pattern,null,globals));}  }
class C{  public void testRecognizeBlockedUDP() throws Exception {  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.UDP_BLOCKING_FIREWALL);  expectedReturn.setPublicAddress(null);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  private void validateViewTranslation(){  if (getDrawing() == null) {    translation.x=translation.y=0;    return;  }  Point oldTranslation=(Point)translation.clone();  int width=getWidth();  int height=getHeight();  Insets insets=getInsets();  Rectangle2D.Double da=getDrawingArea();  Rectangle r=new Rectangle((int)(da.x * scaleFactor),(int)(da.y * scaleFactor),(int)(da.width * scaleFactor),(int)(da.height * scaleFactor));  Double cwd=getDrawing().get(CANVAS_WIDTH);  Double chd=getDrawing().get(CANVAS_HEIGHT);  if (cwd == null || chd == null) {    translation.x=insets.top;    translation.y=insets.left;  } else {    int cw, ch;    cw=(int)(cwd * scaleFactor);    ch=(int)(chd * scaleFactor);    if (cw < width) {      translation.x=insets.left + (width - insets.left - insets.right- cw) / -2;    }    if (ch < height) {      translation.y=insets.top + (height - insets.top - insets.bottom- ch) / -2;    }  }  if (r.y + r.height - translation.y > (height - insets.bottom)) {    translation.y=r.y + r.height - (height - insets.bottom);  }  if (Math.min(0,r.y) - translation.y < insets.top) {    translation.y=Math.min(0,r.y) - insets.top;  }  if (r.x + r.width - translation.x > (width - insets.right)) {    translation.x=r.x + r.width - (width - insets.right);  }  if (Math.min(0,r.x) - translation.x < insets.left) {    translation.x=Math.min(0,r.x) - insets.left;  }  if (!oldTranslation.equals(translation)) {    bufferedArea.translate(oldTranslation.x - translation.x,oldTranslation.y - translation.y);    fireViewTransformChanged();  }}  }
class C{  private void initHandshaker(){switch (connectionState) {case cs_START:case cs_DATA:    break;case cs_HANDSHAKE:case cs_RENEGOTIATE:  return;default :throw new IllegalStateException("Internal error");}if (connectionState == cs_START) {connectionState=cs_HANDSHAKE;} else {connectionState=cs_RENEGOTIATE;}if (roleIsServer) {handshaker=new ServerHandshaker(this,sslContext,enabledProtocols,doClientAuth,protocolVersion,connectionState == cs_HANDSHAKE,secureRenegotiation,clientVerifyData,serverVerifyData);handshaker.setSNIMatchers(sniMatchers);handshaker.setUseCipherSuitesOrder(preferLocalCipherSuites);} else {handshaker=new ClientHandshaker(this,sslContext,enabledProtocols,protocolVersion,connectionState == cs_HANDSHAKE,secureRenegotiation,clientVerifyData,serverVerifyData);handshaker.setSNIServerNames(serverNames);}handshaker.setEnabledCipherSuites(enabledCipherSuites);handshaker.setEnableSessionCreation(enableSessionCreation);}  }
class C{  public static void main(String[] args){  int n=StdIn.readInt();  QuickUnionUF uf=new QuickUnionUF(n);  while (!StdIn.isEmpty()) {    int p=StdIn.readInt();    int q=StdIn.readInt();    if (uf.connected(p,q))     continue;    uf.union(p,q);    StdOut.println(p + " " + q);  }  StdOut.println(uf.count() + " components");}  }
class C{  public static java.sql.Timestamp toTimestamp(int month,int day,int year,int hour,int minute,int second){  java.util.Date newDate=toDate(month,day,year,hour,minute,second);  if (newDate != null) {    return new java.sql.Timestamp(newDate.getTime());  } else {    return null;  }}  }
class C{  @Override public void printStackTrace(){  super.printStackTrace();  if (nested != null)   nested.printStackTrace();}  }
class C{  public boolean isConfigured(){  return configured;}  }
class C{  public synchronized String format(LogRecord record){  StringBuffer sb=new StringBuffer();  if (useANSI) {    Level lev=record.getLevel();    if (Level.FINEST.equals(lev)) {      sb.append("[36m");    } else     if (Level.FINER.equals(lev)) {      sb.append("[32m");    } else     if (Level.FINE.equals(lev)) {      sb.append("[34m");    }  }  if (displayFullRecord) {    if (showDate) {      dat.setTime(record.getMillis());      args[0]=dat;      StringBuffer text=new StringBuffer();      if (formatter == null) {        formatter=new MessageFormat(format);      }      formatter.format(args,text,null);      sb.append(text);      sb.append(" ");    } else {      sb.append("    ");    }    if (swapMethodClass) {      if (record.getSourceMethodName() != null) {        sb.append(" [35m");        sb.append(record.getSourceMethodName());        sb.append("[30m ");      }      if (record.getSourceClassName() != null) {        sb.append(record.getSourceClassName());      } else {        sb.append(record.getLoggerName());      }    } else {      if (record.getSourceClassName() != null) {        sb.append(record.getSourceClassName());      } else {        sb.append(record.getLoggerName());      }      if (record.getSourceMethodName() != null) {        sb.append(" [35m");        sb.append(record.getSourceMethodName());        sb.append("[30m");      }    }    sb.append(lineSeparator);  }  if (useANSI) {    Level lev=record.getLevel();    if (Level.FINEST.equals(lev)) {      sb.append("[36m");    } else     if (Level.FINER.equals(lev)) {      sb.append("[32m");    } else     if (Level.FINE.equals(lev)) {      sb.append("[34m");    }  }  if (showLevel) {    sb.append(record.getLevel().getLocalizedName());    sb.append(": ");  }  String message=formatMessage(record);  sb.append(message);  sb.append(lineSeparator);  if (record.getThrown() != null) {    try {      StringWriter sw=new StringWriter();      PrintWriter pw=new PrintWriter(sw);      record.getThrown().printStackTrace(pw);      pw.close();      sb.append(sw.toString());    } catch (    Exception ex) {    }  }  if (useANSI) {    sb.append("[30m");  }  return sb.toString();}  }
class C{  public Network filterInteriorLinks(Network net,double freeSpeedFilter,boolean useFreeSpeedTravelTime){  NetworkFilterManager filterManager=new NetworkFilterManager(net);  Set<Id<Link>> shortestPathLinkIds=new TtSignalizedNodeShortestPath().calcShortestPathLinkIdsBetweenSignalizedNodes(net,signalizedNodes,useFreeSpeedTravelTime);  filterManager.addLinkFilter(new SignalizedNodesSpeedFilter(this.signalizedNodes,shortestPathLinkIds,freeSpeedFilter));  Network newNetwork=filterManager.applyFilters();  return newNetwork;}  }
class C{  public static @Unsigned long toUnsignedLong(@Unsigned short s){  return ((long)s) & 0xffffL;}  }
class C{  public boolean isDomainCrosshairVisible(){  return this.domainCrosshairVisible;}  }
class C{  public static final void drawPrismaticJoint(GL2 gl,PrismaticJoint joint){  final double lf=0.75;  final double w=0.10;  double hw=w * 0.5;  Body b1=joint.getBody1();  Body b2=joint.getBody2();  Vector2 c1=b1.getWorldCenter();  Vector2 c2=b2.getWorldCenter();  Vector2 n=c1.to(c2);  double l=n.normalize();  Vector2 t=n.product(w * 0.25).left();  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(c1.x - t.x,c1.y - t.y);  gl.glVertex2d(c1.x + t.x,c1.y + t.y);  gl.glVertex2d(c2.x + t.x,c2.y + t.y);  gl.glVertex2d(c2.x - t.x,c2.y - t.y);  gl.glEnd();  gl.glBegin(GL.GL_LINES);  t=n.cross(1.0);  gl.glVertex2d(c2.x + t.x * hw,c2.y + t.y * hw);  gl.glVertex2d(c2.x - n.x * l * lf + t.x * hw,c2.y - n.y * l * lf + t.y * hw);  gl.glVertex2d(c2.x - t.x * hw,c2.y - t.y * hw);  gl.glVertex2d(c2.x - n.x * l * lf - t.x * hw,c2.y - n.y * l * lf - t.y * hw);  gl.glEnd();}  }
class C{  public double distanceSq(final Int3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  protected GridAdvisor(DistributionAdvisee server){  super(server);}  }
class C{  List<String> generateVariants(){  String prefix=formatPrefix();  String suffix=formatSuffix();  ArrayList<String> variants=new ArrayList<>();  if (inputs.length > 0) {    for (    String var : recurseVariants(0)) {      variants.add(prefix + ", " + var+ suffix);    }  } else {    assert inputs.length == 0;    variants.add(prefix + suffix);  }  return variants;}  }
class C{  public XBLOMShadowTreeElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public BufferedImageRenderPolicy(OMGraphicHandlerLayer layer){  super(layer);}  }
class C{  public void usage(){  error("rmic.usage",program);}  }
class C{  public static String defaultUserImage(){  return "images/user-thumb.jpg";}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  MenuItemSelectionHandler action=menuItemSelectionHandlers.get(item.getItemId());  if (action != null) {    return action.execute();  }  return super.onOptionsItemSelected(item);}  }
class C{  public MultipleChoicesEditor(final String id,final MarkupContainer markupProvider,final IModel model,final IModel<String> labelModel,final IModel choices,final AttrValue attrValue,final boolean readOnly){  super(id,"multipleChoicesEditor",markupProvider);  final CheckBoxMultipleChoice<Pair<String,String>> checkBoxMultipleChoice=new CheckBoxMultipleChoice<Pair<String,String>>(EDIT,model,choices);  checkBoxMultipleChoice.setLabel(labelModel);  checkBoxMultipleChoice.setRequired(attrValue.getAttribute().isMandatory());  checkBoxMultipleChoice.setChoiceRenderer(new PairChoiceRenderer());  add(checkBoxMultipleChoice);}  }
class C{  public static AbstractList<String> entityClassList(Schema schema){  final AbstractList<String> entityClassList=new ArrayList<>(schema.getEntities().size());  for (  Entity entity : schema.getEntities()) {    entityClassList.add(entity.getClassName());  }  return entityClassList;}  }
class C{  public static void print(String message){  if (TLCGlobals.debug) {    System.out.println(Thread.currentThread().getId() + "\t" + message);  }}  }
class C{  public static Distribution distribution(Class<?> namespace,String name){  return new DelegatingDistribution(MetricName.named(namespace,name));}  }
class C{  public static ODataUri createODataUriForServiceDocument(String serviceRoot,MediaType... mediaTypes){  scala.Option<MediaType> format=scala.Option.apply(null);  if (mediaTypes.length > 0) {    format=scala.Option.apply(mediaTypes[0]);  }  return new ODataUri(serviceRoot,new ServiceRootUri(format));}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);}  }
class C{  public Task<BlockConsistencyGroupRestRep> update(URI id,BlockConsistencyGroupUpdate input){  return putTask(input,getIdUrl(),id);}  }
class C{  private void launchAnim4(){  animatedVector4.start();}  }
class C{  protected void sendOnOffCommand(int newState){  if (log.isDebugEnabled()) {    log.debug("sendOnOff(" + newState + ") Current: "+ mState);  }  int function;  double newDim;  if (newState == ON) {    function=X10Sequence.FUNCTION_ON;    newDim=1;  } else   if (newState == OFF) {    function=X10Sequence.FUNCTION_OFF;    newDim=0;  } else {    log.warn("illegal state requested for Light: " + getSystemName());    return;  }  log.debug("set state " + newState + " house "+ housecode+ " device "+ devicecode);  X10Sequence out=new X10Sequence();  out.addAddress(housecode,devicecode);  out.addFunction(housecode,function,0);  tc.sendX10Sequence(out,null);  if (log.isDebugEnabled()) {    log.debug("sendOnOff(" + newDim + ")  house "+ X10Sequence.houseValueToText(housecode)+ " device "+ devicecode+ " funct: "+ function);  }}  }
class C{  public void open() throws IOException {  mRtpReceiver=new RtpPacketReceiver(mLocalPort,mRtcpSession,RTP_SOCKET_TIMEOUT);  mRtpReceiver.start();  mRtcpReceiver=new RtcpPacketReceiver(mLocalPort + 1,mRtcpSession);  mRtcpReceiver.start();  mRtcpTransmitter=new RtcpPacketTransmitter(mRemoteAddress,mRemotePort + 1,mRtcpSession,mRtcpReceiver.getConnection());  mRtcpTransmitter.start();  mIsClosed=false;}  }
class C{  public void releaseEQObjects() throws Exception {  mEqualizer.release();  mEqualizer2.release();  mVirtualizer.release();  mVirtualizer2.release();  mBassBoost.release();  mBassBoost2.release();  mReverb.release();  mReverb2.release();  mEqualizer=null;  mEqualizer2=null;  mVirtualizer=null;  mVirtualizer2=null;  mBassBoost=null;  mBassBoost2=null;  mReverb=null;  mReverb2=null;}  }
class C{  public KStepMarkov(Hypergraph<V,E> graph,int steps){  super(graph,ScoringUtils.getUniformRootPrior(graph.getVertices()),0);  initialize(steps);}  }
class C{  protected synchronized void moveToNextJob(){  this.needToSave=true;  super.moveToNextJob();}  }
class C{  private UasBnoAuthEx(){}  }
class C{  @Override public NativePooledByteBufferOutputStream newOutputStream(int initialCapacity){  return new NativePooledByteBufferOutputStream(mPool,initialCapacity);}  }
class C{  private OptionManager(){  this.optionSoapAction=new OptionSoapAction("Change\nAction?","Allows to change the SoapAction Header.");  this.optionSchemaFiles=new OptionSimpleMultiFiles("Used\nSchema\nfiles","Set the Schema Files.\nSoap11, Soap12, WSA, WSSE, WSU, DS and XPathFilter2\nare included by default.");  this.optionMustContainString=new OptionSimpleBoolean("Search?",false,"SOAP Response must contain a specific String.");  this.abortOnFirstSuccess=new OptionSimpleBoolean("Abort?",true,"Abort after first successful attack message.");  this.optionTheContainedString=new OptionSimpleVarchar("Contains","Search for this String...",200);  this.optionUseSchema=new OptionSimpleBoolean("Schema?",true,"Use XML Schema.");  this.optionPayloadList=new ArrayList<OptionPayload>();  this.optionView=new OptionViewButton();  optionMustContainString.addPropertyChangeListener(AbstractOptionBoolean.PROP_ON,this);  optionSchemaFiles.addPropertyChangeListener(AbstractOptionMultiFiles.PROP_FILES,this);  optionUseSchema.addPropertyChangeListener(AbstractOptionBoolean.PROP_ON,this);}  }
class C{  static final void resize(final Memory mem,final int preambleLongs,final int srcLgArrLongs,final int dstLgArrLongs){  int preBytes=preambleLongs << 3;  int srcHTLen=1 << srcLgArrLongs;  long[] srcHTArr=new long[srcHTLen];  mem.getLongArray(preBytes,srcHTArr,0,srcHTLen);  int dstHTLen=1 << dstLgArrLongs;  long[] dstHTArr=new long[dstHTLen];  long thetaLong=mem.getLong(THETA_LONG);  HashOperations.hashArrayInsert(srcHTArr,dstHTArr,dstLgArrLongs,thetaLong);  mem.putLongArray(preBytes,dstHTArr,0,dstHTLen);  mem.putByte(LG_ARR_LONGS_BYTE,(byte)dstLgArrLongs);}  }
class C{  private ProviderStatus(){}  }
class C{  private void moveListener(@Nonnull NamedBean oldBean,@Nonnull NamedBean newBean,@Nonnull String currentName){  java.beans.PropertyChangeListener[] listeners=oldBean.getPropertyChangeListenersByReference(currentName);  for (  java.beans.PropertyChangeListener l : listeners) {    String listenerRef=oldBean.getListenerRef(l);    oldBean.removePropertyChangeListener(l);    newBean.addPropertyChangeListener(l,currentName,listenerRef);  }}  }
class C{  private List<File> generateTemporaryFilesForFinalize(int numFiles) throws Exception {  List<File> temporaryFiles=new ArrayList<>();  for (int i=0; i < numFiles; i++) {    String temporaryFilename=FileBasedWriteOperation.buildTemporaryFilename(baseTemporaryFilename,"" + i);    File tmpFile=tmpFolder.newFile(temporaryFilename);    temporaryFiles.add(tmpFile);  }  return temporaryFiles;}  }
class C{  public MockAnalyzer(Random random,CharacterRunAutomaton runAutomaton,boolean lowerCase,CharacterRunAutomaton filter){  super(PER_FIELD_REUSE_STRATEGY);  this.random=new Random(random.nextLong());  this.runAutomaton=runAutomaton;  this.lowerCase=lowerCase;  this.filter=filter;}  }
class C{  public void addIncludeDirectory(String directory) throws IOException {  if (!StringUtils.isEmpty(directory)) {    File dir=new File(directory);    if (!dir.exists() || !dir.isDirectory()) {      throw new IOException("Invalid include directory: " + dir.getAbsolutePath());    }    includeDirectories.add(dir);  }}  }
class C{  protected static BufferedImage detectVoidsAndMakeThemTransparent(BufferedImage sourceImage){  BufferedImage dest;  if (sourceImage == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  int width=sourceImage.getWidth();  int height=sourceImage.getHeight();  if (width <= 3 || height <= 3) {    return sourceImage;  }  try {    dest=verticalFlip(sourceImage);    scanFill(dest);    dest=verticalFlip(dest);    scanFill(dest);  } catch (  Throwable t) {    Logging.logger().log(java.util.logging.Level.SEVERE,t.getMessage(),t);    dest=sourceImage;  }  return dest;}  }
class C{  private void addBitSetExceptions(int numBits,long newVersion){  final boolean isDebugEnabled_RVV=logger.isTraceEnabled(LogMarker.RVV);  int lastSetIndex=-1;  if (isDebugEnabled_RVV) {    logger.trace(LogMarker.RVV,"addBitSetExceptions({},{})",numBits,newVersion);  }  for (int idx=0; idx < numBits; ) {    int nextMissingIndex=this.bitSet.nextClearBit(idx);    if (nextMissingIndex < 0) {      break;    }    lastSetIndex=nextMissingIndex - 1;    int nextReceivedIndex=this.bitSet.nextSetBit(nextMissingIndex + 1);    long nextReceivedVersion=-1;    if (nextReceivedIndex > 0) {      lastSetIndex=nextReceivedIndex;      nextReceivedVersion=(long)(nextReceivedIndex) + this.bitSetVersion;      idx=nextReceivedIndex + 1;      if (isDebugEnabled_RVV) {        logger.trace(LogMarker.RVV,"found gap in bitSet: missing bit at index={}; next set index={}",nextMissingIndex,nextReceivedIndex);      }    } else {      if (isDebugEnabled_RVV) {        logger.trace(LogMarker.RVV,"terminating flush at bit {} because of missing entries",lastSetIndex);      }      this.bitSetVersion+=lastSetIndex;      this.bitSet.clear();      if (lastSetIndex != -1) {        this.bitSet.set(0);      }      return;    }    long nextMissingVersion=Math.max(1,nextMissingIndex + this.bitSetVersion);    if (nextReceivedVersion > nextMissingVersion) {      addException(nextMissingVersion - 1,nextReceivedVersion);      if (isDebugEnabled_RVV) {        logger.trace(LogMarker.RVV,"Added rvv exception e<rv{} - rv{}>",(nextMissingVersion - 1),nextReceivedVersion);      }    }  }  this.bitSet=this.bitSet.get(lastSetIndex,Math.max(lastSetIndex + 1,bitSet.size()));  if (lastSetIndex > 0) {    this.bitSetVersion=this.bitSetVersion + (long)lastSetIndex;  }}  }
class C{  @Override protected double[] partialComputeFromNewObservations(int startTimePoint,int numTimePoints,double[][] newStates1,double[][] newStates2,double[][] newCondStates,boolean returnLocals) throws Exception {  double startTime=Calendar.getInstance().getTimeInMillis();  double[] localCondMi=null;  if (returnLocals) {    localCondMi=new double[numTimePoints];  }  double sumDiGammas=0;  double sumNxz=0;  double sumNyz=0;  double sumNz=0;  long knnTime=0, conditionalTime=0, conditionalXTime=0, conditionalYTime=0;  boolean[] isWithinRForConditionals=new boolean[totalObservations];  int[] indicesWithinRForConditionals=new int[totalObservations + 1];  for (int t=startTimePoint; t < startTimePoint + numTimePoints; t++) {    long methodStartTime=Calendar.getInstance().getTimeInMillis();    PriorityQueue<NeighbourNodeData> nnPQ=kdTreeJoint.findKNearestNeighbours(k,new double[][]{newStates1[t],newStates2[t],newCondStates[t]});    knnTime+=Calendar.getInstance().getTimeInMillis() - methodStartTime;    NeighbourNodeData kthNnData=nnPQ.poll();    if (debug) {      System.out.print("t = " + t + " : for data point: ");      MatrixUtils.printArray(System.out,newStates1[t]);      MatrixUtils.printArray(System.out,newStates2[t]);      if (dimensionsCond > 0) {        MatrixUtils.printArray(System.out,newCondStates[t]);      } else {        System.out.print("[]");      }      System.out.printf("t=%d : K=%d NNs found at range %.5f (point %d)\n",t,k,kthNnData.distance,kthNnData.sampleIndex);    }    if (debug) {      methodStartTime=Calendar.getInstance().getTimeInMillis();    }    if (dimensionsCond > 0) {      nnSearcherConditional.findPointsWithinR(kthNnData.distance,new double[][]{newCondStates[t]},false,isWithinRForConditionals,indicesWithinRForConditionals);    }    if (debug) {      conditionalTime+=Calendar.getInstance().getTimeInMillis() - methodStartTime;      methodStartTime=Calendar.getInstance().getTimeInMillis();    }    int n_xz;    if (dimensionsCond == 0) {      if (dimensionsVar1 > 1) {        n_xz=kdTreeVar1Conditional.countPointsWithinR(new double[][]{newStates1[t],newCondStates[t]},kthNnData.distance,false);      } else {        n_xz=uniNNSearcherVar1.countPointsWithinR(new double[][]{newStates1[t]},kthNnData.distance,false);      }    } else {      if (dimensionsVar1 > 1) {        n_xz=kdTreeVar1Conditional.countPointsWithinR(kthNnData.distance,new double[][]{newStates1[t],newCondStates[t]},false,1,isWithinRForConditionals);      } else {        n_xz=uniNNSearcherVar1.countPointsWithinR(new double[][]{newStates1[t]},kthNnData.distance,false,isWithinRForConditionals);      }    }    if (debug) {      conditionalXTime+=Calendar.getInstance().getTimeInMillis() - methodStartTime;      methodStartTime=Calendar.getInstance().getTimeInMillis();    }    int n_yz;    if (dimensionsCond == 0) {      if (dimensionsVar2 > 1) {        n_yz=kdTreeVar2Conditional.countPointsWithinR(new double[][]{newStates2[t],newCondStates[t]},kthNnData.distance,false);      } else {        n_yz=uniNNSearcherVar2.countPointsWithinR(new double[][]{newStates2[t]},kthNnData.distance,false);      }    } else {      if (dimensionsVar2 > 1) {        n_yz=kdTreeVar2Conditional.countPointsWithinR(kthNnData.distance,new double[][]{newStates2[t],newCondStates[t]},false,1,isWithinRForConditionals);      } else {        n_yz=uniNNSearcherVar2.countPointsWithinR(new double[][]{newStates2[t]},kthNnData.distance,false,isWithinRForConditionals);      }    }    if (debug) {      conditionalYTime+=Calendar.getInstance().getTimeInMillis() - methodStartTime;    }    int n_z;    if (dimensionsCond == 0) {      n_z=totalObservations - 1;    } else {      for (n_z=0; indicesWithinRForConditionals[n_z] != -1; n_z++) {        isWithinRForConditionals[indicesWithinRForConditionals[n_z]]=false;      }    }    sumNxz+=n_xz;    sumNyz+=n_yz;    sumNz+=n_z;    double digammaNxzPlusOne=MathsUtils.digamma(n_xz + 1);    double digammaNyzPlusOne=MathsUtils.digamma(n_yz + 1);    double digammaNzPlusOne=MathsUtils.digamma(n_z + 1);    sumDiGammas+=digammaNzPlusOne - digammaNxzPlusOne - digammaNyzPlusOne;    if (returnLocals) {      localCondMi[t - startTimePoint]=digammaK - digammaNxzPlusOne - digammaNyzPlusOne + digammaNzPlusOne;      if (debug) {        System.out.printf("t=%d, n_xz=%d, n_yz=%d, n_z=%d, local=%.4f," + " digamma(n_xz+1)=%.5f, digamma(n_yz+1)=%.5f, digamma(n_z+1)=%.5f, \n",t,n_xz,n_yz,n_z,localCondMi[t - startTimePoint],digammaNxzPlusOne,digammaNyzPlusOne,digammaNzPlusOne);      }    } else     if (debug) {      double localValue=digammaK - digammaNxzPlusOne - digammaNyzPlusOne + digammaNzPlusOne;      System.out.printf("t=%d, n_xz=%d, n_yz=%d, n_z=%d, local=%.4f," + " digamma(n_xz+1)=%.5f, digamma(n_yz+1)=%.5f, digamma(n_z+1)=%.5f, \n",t,n_xz,n_yz,n_z,localValue,digammaNxzPlusOne,digammaNyzPlusOne,digammaNzPlusOne);    }  }  if (debug) {    Calendar rightNow2=Calendar.getInstance();    long endTime=rightNow2.getTimeInMillis();    System.out.println("Subset " + startTimePoint + ":"+ (startTimePoint + numTimePoints)+ " Calculation time: "+ ((endTime - startTime) / 1000.0)+ " sec");    System.out.println("Total exec times for: ");    System.out.println("\tknn search: " + (knnTime / 1000.0));    System.out.println("\tz   search: " + (conditionalTime / 1000.0));    System.out.println("\tzx  search: " + (conditionalXTime / 1000.0));    System.out.println("\tzy  search: " + (conditionalYTime / 1000.0));    System.out.printf("%d:%d -- Returning: %.4f, %.4f, %.4f, %.4f\n",startTimePoint,(startTimePoint + numTimePoints),sumDiGammas,sumNxz,sumNyz,sumNz);  }  if (returnLocals) {    return localCondMi;  } else {    double[] results=new double[6];    results[0]=sumDiGammas;    results[1]=sumNxz;    results[2]=sumNyz;    results[3]=sumNz;    return results;  }}  }
class C{  public default void onTimeout(RPCCall c){}  }
class C{  public UniverseManager(){  this(null);}  }
class C{  public void flag(ForumPostConfig config){  config.addCredentials(this);  POST(this.url + "/flag-forum-post",config.toXML());}  }
class C{  public static boolean isNumber(short cssPrimitiveType){switch (cssPrimitiveType) {case CSSPrimitiveValue.CSS_EMS:case CSSPrimitiveValue.CSS_EXS:case CSSPrimitiveValue.CSS_PERCENTAGE:    return false;case CSSPrimitiveValue.CSS_PX:case CSSPrimitiveValue.CSS_IN:case CSSPrimitiveValue.CSS_CM:case CSSPrimitiveValue.CSS_MM:case CSSPrimitiveValue.CSS_PT:case CSSPrimitiveValue.CSS_PC:  return true;default :return false;}}  }
class C{  public static Email email(Context context){  if (context == null)   throw new IllegalArgumentException("context == null");  return new Email(context);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.GLOBAL_VISUAL);  rpclass.addAttribute(NAME_ATTR,Type.STRING);  rpclass.addAttribute(DURATION_ATTR,Type.INT);  rpclass.addAttribute(STRENGTH_ATTR,Type.INT);}  }
class C{  public static Throwable causeByType(Throwable parent,Class<? extends Throwable> causeType,boolean isSubtypeOk){  Throwable cause=null;  int foundAtIndex=indexOfCause(parent,causeType,isSubtypeOk);  if (foundAtIndex != -1) {    cause=causeAt(parent,foundAtIndex);  }  return cause;}  }
class C{  public void addCustomerVat(){  Set<String> usedCustomers=new HashSet<>();  for (  VOOrganizationVatRate vat : getCustomerVats()) {    usedCustomers.add(vat.getOrganization().getOrganizationId());  }  Iterator<VOOrganization> it=getCustomers().iterator();  while (it.hasNext()) {    String id=it.next().getOrganizationId();    if (usedCustomers.contains(id)) {      it.remove();    }  }  if (getCustomers().size() > 0) {    VOOrganizationVatRate vo=new VOOrganizationVatRate();    vo.setOrganization(new VOOrganization());    getCustomerVats().add(vo);    addToVatStrings(vo);  }}  }
class C{  public boolean verifyData(String x_app_id,String content_type,String package_name,String class_name,int app_type,boolean need_signature,boolean further_processing){  WapPushManDBHelper dbh=getDatabase(this);  SQLiteDatabase db=dbh.getReadableDatabase();  WapPushManDBHelper.queryData lastapp=dbh.queryLastApp(db,x_app_id,content_type);  db.close();  if (lastapp == null)   return false;  if (lastapp.packageName.equals(package_name) && lastapp.className.equals(class_name) && lastapp.appType == app_type && lastapp.needSignature == (need_signature ? 1 : 0) && lastapp.furtherProcessing == (further_processing ? 1 : 0)) {    return true;  } else {    return false;  }}  }
class C{  @Override protected void onPreExecute(){  placesListLabel.setText(R.string.retrievingPlaces);  MainActivity.this.setProgressBarIndeterminateVisibility(true);}  }
class C{  protected final Object replaceObject(Object obj) throws IOException {  if ((obj instanceof Remote) && !(obj instanceof RemoteStub)) {    Target target=ObjectTable.getTarget((Remote)obj);    if (target != null) {      return target.getStub();    }  }  return obj;}  }
class C{  protected void sequence_ArrowFunctionTypeExpression_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isNotNull(){  return this.notNull;}  }
class C{  public double evaluate(){  return _value;}  }
class C{  public final double doOperation(){  final int dim=parameter.getDimension();  double sum=0.0;  if (usesPriorOnSum) {    for (int i=0; i < dim; i++) {      sum+=Math.abs(parameter.getParameterValue(i));    }  }  final int pos=MathUtils.nextInt(dim);  final int value=(int)parameter.getParameterValue(pos);  double logq=0.0;  if (value == 0) {    logq=bitFlipHelper.flipZero(pos,dim,sum);  } else   if (value == 1) {    logq=bitFlipHelper.flipOne(pos,dim,sum);  } else   if (value == -1) {    logq=bitFlipHelper.flipNegOne(pos,dim,sum);  } else {    throw new RuntimeException("expected 1 or 0 or -1");  }  if (!usesPriorOnSum) {    logq=0;  }  return logq;}  }
class C{  protected int parseArgumentsByteCode(DataOutputStream dataStream,Primitive type,int index,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean outerBracket,boolean debug,Network network) throws IOException {  dataStream.writeLong(network.createVertex(type).getId());  boolean bracket=false;  if (!outerBracket) {    bracket=checkNext('(',stream);  }  boolean moreArguments=true;  stream.skipWhitespace();  char peek=stream.peek();  if (peek == ')') {    moreArguments=false;  }  int count=0;  while (moreArguments) {    stream.skipWhitespace();    peek=stream.peek();    if (peek == ')' || peek == '}') {      break;    }    if ((peek == ',') || (peek == ';')) {      break;    }    parseElementByteCode(stream,dataStream,elements,debug,network);    count++;    if (!bracket && !outerBracket) {      break;    }    stream.skipWhitespace();    peek=stream.peek();    if ((peek == ',') || (peek == ';')) {      stream.skip();    } else {      String previous=stream.peekPreviousWord();      if (!"}".equals(previous)) {        moreArguments=false;      }    }    index++;  }  if (bracket) {    ensureNext(')',stream);  }  dataStream.writeLong(0l);  return count;}  }
class C{  public void testValidMethodName(){  doTest();}  }
class C{  public JMapper(final Class<D> destination,final Class<S> source,final ChooseConfig chooseConfig){  this(destination,source,chooseConfig,undefinedXML());}  }
class C{  public void update(){  applyPerdition();  applyWork();  validateEnergy();}  }
class C{  static void flushImageCache(){  imageRefs.clear();}  }
class C{  public void testtoLowerCaseApply(){  assertEvaluates("hello","var x = String.toLowerCase; x.apply('HELLO')");  assertEvaluates("hello","String.toLowerCase('HELLO')");}  }
class C{  public static String checkTrackingCodeUrlParam(HttpServletRequest request,HttpServletResponse response){  String trackingCodeId=request.getParameter("autoTrackingCode");  if (UtilValidate.isEmpty(trackingCodeId))   trackingCodeId=request.getParameter("atc");  if (UtilValidate.isNotEmpty(trackingCodeId)) {    Delegator delegator=(Delegator)request.getAttribute("delegator");    GenericValue trackingCode;    try {      trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);      return "error";    }    if (trackingCode == null) {      Debug.logError("TrackingCode not found for trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId.",module);      return "error";    }    return processTrackingCode(trackingCode,request,response,"TKCDSRC_URL_PARAM");  } else {    return "success";  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_2__TRACER_ARGUMENT_1:    return getTracerArgument_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void submit(T tuple){  getDestination().accept(tuple);}  }
class C{  @Override public synchronized void updateInt(String columnName,int x) throws SQLException {  updateInt(findColumn(columnName),x);}  }
class C{  public static IgniteUuid trashId(int idx){  assert idx >= 0 && idx < TRASH_CONCURRENCY;  return TRASH_IDS[idx];}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return Math.floorMod(prolepticYear,4) == 3;}  }
class C{  public static void main(String[] args){  System.out.println("p       2^p - 1");  for (BigInteger p=new BigInteger("2"); p.compareTo(new BigInteger("100")) <= 0; p=p.add(new BigInteger("1"))) {    if (isPrime(p)) {      System.out.printf("%-3d",p);      System.out.println("       " + mersennePrime(p));    }  }}  }
class C{  protected void updateCameraPose(Pose sceneCameraPose){  getCurrentCamera().setPosition(sceneCameraPose.getPosition());  getCurrentCamera().setOrientation(sceneCameraPose.getOrientation());}  }
class C{  private void buildGui(){  final XTable table=new XTable();  table.setRowHeightForProgressBar();  final Vector<Object> columns=Utils.vector("User Color","Team","Color","Name","Race","Result","<html>Highest<br>League</html>","APM","SPM","SQ","<html>Supply-<br>capped %</html>","<html>Swarm<br>Levels</html>","<html>Start<br>Dir</html>","Role","Control","Toon","Slot","Handicap");  final List<Class<?>> columnClasses=Utils.<Class<?>>asNewList(Color.class,Integer.class,PlayerColor.class,String.class,RenderablePair.class,RenderablePair.class,TableIcon.class,ProgressBarView.class,ProgressBarView.class,ProgressBarView.class,ProgressBarView.class,ProgressBarView.class,Integer.class,Role.class,Controller.class,Toon.class,Integer.class,Integer.class);  final int userColorColIdx=0;  final int resultColIdx=5;  final int leagueColIdx=6;  final int apmColIdx=7;  final int spmColIdx=8;  final int sqColIdx=9;  final int supplyCappedColIdx=10;  final int levelsColIdx=11;  final int startDirColIdx=12;  final int handicapColIdx=17;  table.setTableCellRenderer(new UserColoredTableRenderer(table,userColorColIdx));  boolean areReducedHandicaps=false;  int maxLevels=0;  int maxApm=0;  double maxSpm=0;  int maxSq=0;  double maxSuppCapped=0;  for (  final User u : repProc.users) {    if (u.uid != null && u.uid.getCombinedRaceLevels() != null)     maxLevels=Math.max(maxLevels,u.uid.getCombinedRaceLevels());    maxApm=Math.max(maxApm,u.apm);    maxSpm=Math.max(maxSpm,u.spm);    maxSq=Math.max(maxSq,u.sq);    maxSuppCapped=Math.max(maxSuppCapped,u.supplyCappedPercent);  }  final Vector<Vector<Object>> data=new Vector<>();  for (  final User u : repProc.users) {    final Vector<Object> row=new Vector<>(columns.size());    row.add(u.getPlayerColor().darkerColor);    row.add(u.slot.teamId + 1);    row.add(u.getPlayerColor());    row.add(u.fullName);    row.add(u.player == null ? null : new RenderablePair<>(u.player.race.ricon.get(),u.player.race.text + (u.slot.getChosenRace() == Race.RANDOM ? " (Random)" : "")));    row.add(u.player == null ? null : new RenderablePair<>(u.player.getResult().ricon.get(),u.player.getResult().text + (u.player.isResultDeduced() ? " (Deduced)" : "")));    row.add(u.uid == null ? null : u.uid.getHighestLeague().tableIcon);    row.add(new ProgressBarView(u.apm,maxApm));    row.add(new ProgressBarView((int)(u.spm * 100),(int)(maxSpm * 100),Env.LANG.formatNumber(u.spm,2)));    row.add(new ProgressBarView(u.sq,maxSq));    row.add(new ProgressBarView((int)(u.supplyCappedPercent * 100),(int)(maxSuppCapped * 100),Env.LANG.formatNumber(u.supplyCappedPercent,2) + "%"));    row.add(u.uid == null || u.uid.getCombinedRaceLevels() == null ? null : new ProgressBarView(u.uid.getCombinedRaceLevels(),maxLevels));    row.add(u.startDirection);    row.add(u.slot.getRole());    row.add(u.slot.getController());    row.add(u.getToon());    row.add(u.slotIdx + 1);    final Integer handicap=u.slot.getHandicap();    row.add(handicap);    if (handicap != null && handicap < 100)     areReducedHandicaps=true;    data.add(row);  }  table.getXTableModel().setDataVector(data,columns);  table.getXTableModel().setColumnClasses(columnClasses);  table.getXTableRowSorter().setComparator(leagueColIdx,League.TABLE_ICON_COMPARATOR);  table.getXTableRowSorter().setColumnDefaultDescs(true,resultColIdx,leagueColIdx,levelsColIdx,apmColIdx,spmColIdx,sqColIdx);  table.pack();  if (!areReducedHandicaps)   table.removeColumn(table.getColumnModel().getColumn(handicapColIdx));  if (repProc.replay.trackerEvents == null)   table.removeColumn(table.getColumnModel().getColumn(startDirColIdx));  if (repProc.replay.header.major < 2)   table.removeColumn(table.getColumnModel().getColumn(levelsColIdx));  if (repProc.replay.trackerEvents == null)   table.removeColumn(table.getColumnModel().getColumn(supplyCappedColIdx));  if (repProc.replay.trackerEvents == null)   table.removeColumn(table.getColumnModel().getColumn(sqColIdx));  if (repProc.replay.header.major < 2)   table.removeColumn(table.getColumnModel().getColumn(leagueColIdx));  table.removeColumn(table.getColumnModel().getColumn(userColorColIdx));  table.getTableHeader().setPreferredSize(new Dimension(10,table.getTableHeader().getPreferredSize().height * 2));  addCenter(table.createWrapperBox(true,table.createToolBarParams(this)));}  }
class C{  public void testToArray(){  LinkedBlockingQueue q=populatedQueue(SIZE);  Object[] o=q.toArray();  for (int i=0; i < o.length; i++)   assertSame(o[i],q.poll());}  }
class C{  public SortedMap<String,String> properties(){  return props;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:26.763 -0500",hash_original_method="342A9AA3E93050AFFE91B915061407DC",hash_generated_method="945BFEB670E29B1B951461073CC2753C") public static final void killProcess(int pid){  sendSignal(pid,SIGNAL_KILL);}  }
class C{  public final TextBuilder append(boolean b){  return b ? append("true") : append("false");}  }
class C{  public static void cancelLinear(Context context,int delay){  Intent intent=new Intent(context,HeartbeatReceiver.class);  intent.putExtra(KEY_DELAY,delay);  intent.putExtra(KEY_TYPE,TYPE_LINEAR);  PendingIntent alarmIntent=PendingIntent.getBroadcast(context,delay,intent,PendingIntent.FLAG_CANCEL_CURRENT);  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  alarmManager.cancel(alarmIntent);}  }
class C{  @Override protected void registerNewSelector() throws IOException {synchronized (selector) {    Set<SelectionKey> keys=selector.keys();    Selector newSelector=null;    if (selectorProvider == null) {      newSelector=Selector.open();    } else {      newSelector=selectorProvider.openSelector();    }    for (    SelectionKey key : keys) {      SelectableChannel ch=key.channel();      NioSession session=(NioSession)key.attachment();      SelectionKey newKey=ch.register(newSelector,key.interestOps(),session);      session.setSelectionKey(newKey);    }    selector.close();    selector=newSelector;  }}  }
class C{  public void crossProduct(Vector3f inputVec,Vector3f outputVec){  outputVec.setX(points[1] * inputVec.points[2] - points[2] * inputVec.points[1]);  outputVec.setY(points[2] * inputVec.points[0] - points[0] * inputVec.points[2]);  outputVec.setZ(points[0] * inputVec.points[1] - points[1] * inputVec.points[0]);}  }
class C{  public Builder sleepMsBetweenRetries(int sleepMs){  this.innerZkSleepMsBetweenRetries=sleepMs;  return this;}  }
class C{  public static boolean assertEquals(final String msg,final double a,final double b,final double tolerance){  assertIsNumber(a);  assertIsNumber(b);  if (a >= (b - tolerance) && a <= (b + tolerance)) {    return true;  }  throw new ExamException(msg + " " + a+ " != "+ b+ ":"+ Utils.realFormat(tolerance,3));}  }
class C{  public static boolean validNamespace(String namespace){  return namespace == null || moduleIdPattern.matcher(namespace).matches();}  }
class C{  public Iterator<String> keyIterator(){  return readMethods.keySet().iterator();}  }
class C{  public DPolicyQualifierInfoChooser(JDialog parent,String title,PolicyQualifierInfo policyQualifierInfo) throws IOException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(policyQualifierInfo);}  }
class C{  protected ExtensibleDrawable(int width,Lifeline lifeline){  super(lifeline == null ? null : lifeline.getDiagram());  setWidth(width);  setHeight(0);  this.lifeline=lifeline;  if (lifeline != null) {    lifeline.addView(this);  }}  }
class C{  public static boolean isLeap(long year){  return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isOfferQty(){  Object oo=get_Value(COLUMNNAME_IsOfferQty);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void show(@NotNull final JComponent dataComponent,@Nullable final JComponent actionListenerComponent,@NotNull final String title,@NotNull final Project project,@Nullable final Collection<Runnable> closeListeners,@NotNull final AnAction... customActions){  final ToolWindowApi api=new ToolWindowApi(project,title);  final Collection<Runnable> closeListenersToAdd=new ArrayList<Runnable>(Collections.singleton(new MyToolWindowCloser(api)));  if (closeListeners != null) {    closeListenersToAdd.addAll(closeListeners);  }  api.add(PanelWithActions.wrap(dataComponent,closeListenersToAdd,actionListenerComponent,customActions));}  }
class C{  public boolean isStaticMethodCallOnClass(MethodCall call,ClassNode receiver){  ClassNode staticReceiver=extractStaticReceiver(call);  return staticReceiver != null && staticReceiver.equals(receiver);}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  protected void decrement(){  indentation--;}  }
class C{  @Override public boolean defaulted(String name) throws IOException, IllegalArgumentException {  return emulatedFields.defaulted(name);}  }
class C{  public int readInteger() throws EOFException, FormatException {  return MoreMath.BuildInteger(readBytes(4,false),MSBFirst);}  }
class C{  private static void updatePortfolioEntry(FinanceService service,String entryUrl,PortfolioEntry entry) throws IOException, MalformedURLException, ServiceException {  System.out.println("Updating Entry at location: " + entryUrl);  PortfolioEntry updatedEntry=service.update(new URL(entryUrl),entry);  printPortfolioEntry(updatedEntry);}  }
class C{  public TypeScriptAnnotationIterator(Iterator<Annotation> iterator,boolean skipIrrelevants){  this(iterator,skipIrrelevants,false);}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale,final Date centuryStart){  printer=new FastDatePrinter(pattern,timeZone,locale);  parser=new FastDateParser(pattern,timeZone,locale,centuryStart);}  }
class C{  public void endKeyframe(){  this.endKeyframe(false);}  }
class C{  public Matrix4f scaleAroundLocal(float factor,float ox,float oy,float oz){  return scaleAroundLocal(factor,factor,factor,ox,oy,oz,this);}  }
class C{  @Override public boolean equals(Object otherRules){  if (this == otherRules) {    return true;  }  if (otherRules instanceof ZoneRules) {    ZoneRules other=(ZoneRules)otherRules;    return Arrays.equals(standardTransitions,other.standardTransitions) && Arrays.equals(standardOffsets,other.standardOffsets) && Arrays.equals(savingsInstantTransitions,other.savingsInstantTransitions)&& Arrays.equals(wallOffsets,other.wallOffsets)&& Arrays.equals(lastRules,other.lastRules);  }  return false;}  }
class C{  public long create_compact_sample_size_atom(MP4DataStream stream) throws IOException {  create_full_atom(stream);  stream.skipBytes(3);  sampleSize=0;  fieldSize=(int)stream.readBytes(1);  sampleCount=(int)stream.readBytes(4);  readed+=8;  for (int i=0; i < sampleCount; i++) {    int size=0;switch (fieldSize) {case 4:      size=(int)stream.readBytes(1);    samples.addElement(Integer.valueOf(size & 0x0f));  size=(size >> 4) & 0x0f;i++;readed+=1;break;case 8:size=(int)stream.readBytes(1);readed+=1;break;case 16:size=(int)stream.readBytes(2);readed+=2;break;}if (i < sampleCount) {samples.addElement(Integer.valueOf(size));}}return readed;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildnodeancestor.class,args);}  }
class C{  @Deprecated private void doRetrieval() throws Exception {  boolean passed=false;  this.rs=this.stmt.executeQuery("SELECT blobdata from BLOBTEST LIMIT 1");  this.rs.next();  byte[] retrBytes=this.rs.getBytes(1);  passed=checkBlob(retrBytes);  assertTrue("Inserted BLOB data did not match retrieved BLOB data for getBytes().",passed);  retrBytes=this.rs.getBlob(1).getBytes(1L,(int)this.rs.getBlob(1).length());  passed=checkBlob(retrBytes);  assertTrue("Inserted BLOB data did not match retrieved BLOB data for getBlob().",passed);  InputStream inStr=this.rs.getBinaryStream(1);  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  int b;  while ((b=inStr.read()) != -1) {    bOut.write((byte)b);  }  retrBytes=bOut.toByteArray();  passed=checkBlob(retrBytes);  assertTrue("Inserted BLOB data did not match retrieved BLOB data for getBinaryStream().",passed);  inStr=this.rs.getAsciiStream(1);  bOut=new ByteArrayOutputStream();  while ((b=inStr.read()) != -1) {    bOut.write((byte)b);  }  retrBytes=bOut.toByteArray();  passed=checkBlob(retrBytes);  assertTrue("Inserted BLOB data did not match retrieved BLOB data for getAsciiStream().",passed);  inStr=this.rs.getUnicodeStream(1);  bOut=new ByteArrayOutputStream();  while ((b=inStr.read()) != -1) {    bOut.write((byte)b);  }  retrBytes=bOut.toByteArray();  passed=checkBlob(retrBytes);  assertTrue("Inserted BLOB data did not match retrieved BLOB data for getUnicodeStream().",passed);}  }
class C{  private Appender createConsoleAppender(Level maxLevel){  String fmt="[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n";  Appender app=new ConsoleAppender(new PatternLayout(fmt),ConsoleAppender.SYSTEM_OUT);  LevelRangeFilter lvlFilter=new LevelRangeFilter();  lvlFilter.setLevelMin(Level.TRACE);  lvlFilter.setLevelMax(maxLevel);  app.addFilter(lvlFilter);  return app;}  }
class C{  @Override @Transactional public Application saveInDB(Application application) throws ServiceException {  logger.debug("-- SAVE -- : " + application);  applicationDAO.save(application);  return application;}  }
class C{  public void testGetF9Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF9Momentary();  assertEquals(expResult,result);}  }
class C{  public ExecutionScope createExecutionScope(){  ExecutionScopeImpl executionScope=new ExecutionScopeImpl();  return executionScope;}  }
class C{  private int calcLocoAddress(int AH,int AL){  if (AH == 0x00) {    return (AL);  } else {    int address=0;    address=((AH * 256) & 0xFF00);    address+=(AL & 0xFF);    address-=0xC000;    return (address);  }}  }
class C{  public void add(double value1,double value2){  xStats.add(value1);  yStats.add(value2);  differencesStats.add(value1 - value2);  xySum+=value1 * value2;  count++;}  }
class C{  private void transmit(byte packet[]) throws NetworkException {  mStats.numBytes+=packet.length;  mStats.numPackets++;  mRtcpSession.updateavgrtcpsize(packet.length);  mRtcpSession.timeOfLastRTCPSent=mRtcpSession.currentTime();  mDatagramConnection.send(mRemoteAddress,mRemotePort,packet);}  }
class C{  public PagoElectronicoExcepcion(String message){  this(message,null);}  }
class C{  public HeaderPartition(ByteProvider byteProvider,long byteOffset,long maxPartitionSize,IMFErrorLogger imfErrorLogger) throws IOException {  this.imfErrorLogger=imfErrorLogger;  long numBytesRead=0;  int numErrors=imfErrorLogger.getNumberOfErrors();  if (byteOffset != IMF_MXF_HEADER_PARTITION_OFFSET) {    throw new MXFException(String.format("Expected the header partition to be at offset %d, whereas it is located at offset %d in the MXF file",IMF_MXF_HEADER_PARTITION_OFFSET,byteOffset));  }  this.partitionPack=new PartitionPack(byteProvider,IMF_MXF_HEADER_PARTITION_OFFSET,false,imfErrorLogger);  if (!this.partitionPack.isValidHeaderPartition()) {    throw new MXFException("Found an invalid header partition");  }  numBytesRead+=this.partitionPack.getKLVPacketSize();  Long byteOffsetOfNextKLVPacket=byteOffset + numBytesRead;{    KLVPacket.Header header=new KLVPacket.Header(byteProvider,byteOffsetOfNextKLVPacket);    byte[] key=Arrays.copyOf(header.getKey(),header.getKey().length);    numBytesRead+=header.getKLSize();    if (PrimerPack.isValidKey(key)) {      this.primerPack=new PrimerPack(byteProvider,header);      numBytesRead+=header.getVSize();    } else {      byteProvider.skipBytes(header.getVSize());      numBytesRead+=header.getVSize();      header=new KLVPacket.Header(byteProvider,byteOffsetOfNextKLVPacket);      key=Arrays.copyOf(header.getKey(),header.getKey().length);      numBytesRead+=header.getKLSize();      if (PrimerPack.isValidKey(key)) {        this.primerPack=new PrimerPack(byteProvider,header);        numBytesRead+=header.getVSize();      } else {        throw new MXFException("Could not find primer pack");      }    }  }  byteOffsetOfNextKLVPacket=byteOffset + numBytesRead;  while (numBytesRead < maxPartitionSize) {    KLVPacket.Header header=new KLVPacket.Header(byteProvider,byteOffsetOfNextKLVPacket);    byte[] key=Arrays.copyOf(header.getKey(),header.getKey().length);    numBytesRead+=header.getKLSize();    if (StructuralMetadata.isStructuralMetadata(Arrays.copyOf(header.getKey(),header.getKey().length))) {      Class clazz=StructuralMetadata.getStructuralMetadataSetClass(key);      if (!clazz.getSimpleName().equals(Object.class.getSimpleName())) {        InterchangeObject.InterchangeObjectBO interchangeObjectBO=this.constructInterchangeObjectBO(clazz,header,byteProvider,this.primerPack.getLocalTagEntryBatch().getLocalTagToUIDMap(),imfErrorLogger);        List<InterchangeObject.InterchangeObjectBO> list=this.interchangeObjectBOsMap.get(interchangeObjectBO.getClass().getSimpleName());        if (list == null) {          list=new ArrayList<>();          this.interchangeObjectBOsMap.put(interchangeObjectBO.getClass().getSimpleName(),list);        }        list.add(interchangeObjectBO);        uidToBOs.put(interchangeObjectBO.getInstanceUID(),interchangeObjectBO);        if (interchangeObjectBO instanceof MaterialPackage.MaterialPackageBO || interchangeObjectBO instanceof SourcePackage.SourcePackageBO) {          GenericPackage.GenericPackageBO genericPackageBO=(GenericPackage.GenericPackageBO)interchangeObjectBO;          uidToBOs.put(genericPackageBO.getPackageUID(),genericPackageBO);        }      } else {        byteProvider.skipBytes(header.getVSize());      }    } else {      byteProvider.skipBytes(header.getVSize());    }    numBytesRead+=header.getVSize();    byteOffsetOfNextKLVPacket=byteOffset + numBytesRead;  }  int prefaceSetCount=(this.interchangeObjectBOsMap.containsKey(Preface.PrefaceBO.class.getSimpleName()) && this.interchangeObjectBOsMap.get(Preface.PrefaceBO.class.getSimpleName()) != null) ? this.interchangeObjectBOsMap.get(Preface.PrefaceBO.class.getSimpleName()).size() : 0;  if (prefaceSetCount != 1) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,HeaderPartition.ERROR_DESCRIPTION_PREFIX + String.format("Found %d Preface sets, only one is allowed in header partition",prefaceSetCount));  }  if (imfErrorLogger.getNumberOfErrors() > numErrors) {    List<ErrorLogger.ErrorObject> errorObjectList=imfErrorLogger.getErrors();    for (int i=numErrors; i < errorObjectList.size(); i++) {      logger.error(errorObjectList.get(i).getErrorDescription());    }    throw new MXFException(String.format("%d errors encountered when reading header partition",imfErrorLogger.getNumberOfErrors() - numErrors));  }  Set<InterchangeObject.InterchangeObjectBO> parsedInterchangeObjectBOs=new LinkedHashSet<>();  for (  Map.Entry<MXFUID,InterchangeObject.InterchangeObjectBO> entry : uidToBOs.entrySet()) {    parsedInterchangeObjectBOs.add(entry.getValue());  }  Map<MXFUID,Node> instanceIDToNodes=new LinkedHashMap<>();  for (  InterchangeObject.InterchangeObjectBO interchangeObjectBO : parsedInterchangeObjectBOs) {    instanceIDToNodes.put(interchangeObjectBO.getInstanceUID(),new Node(interchangeObjectBO.getInstanceUID()));  }  for (  Map.Entry<MXFUID,Node> entry : instanceIDToNodes.entrySet()) {    Node node=entry.getValue();    InterchangeObject.InterchangeObjectBO interchangeObjectBO=uidToBOs.get(node.uid);    List<MXFUID> dependentUIDs=MXFPropertyPopulator.getDependentUIDs(interchangeObjectBO);    for (    MXFUID MXFUID : dependentUIDs) {      InterchangeObject.InterchangeObjectBO dependentInterchangeObjectBO=uidToBOs.get(MXFUID);      if (dependentInterchangeObjectBO != null) {        Node providerNode=instanceIDToNodes.get(dependentInterchangeObjectBO.getInstanceUID());        node.depends.add(providerNode);      }    }  }  List<Node> nodeList=new ArrayList<>(instanceIDToNodes.values());  List<Node> resolvedList=resolve(nodeList);  for (  Node node : resolvedList) {    InterchangeObject.InterchangeObjectBO interchangeObjectBO=uidToBOs.get(node.uid);    if (node.depends.size() == 0 && !interchangeObjectBO.getClass().equals(SourceClip.SourceClipBO.class) && !interchangeObjectBO.getClass().equals(Sequence.SequenceBO.class)) {      InterchangeObject interchangeObject=this.constructInterchangeObject(interchangeObjectBO.getClass().getEnclosingClass(),interchangeObjectBO,node);      this.cacheInterchangeObject(interchangeObject);      this.uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),interchangeObject);      if (interchangeObjectBO instanceof GenericPackage.GenericPackageBO) {        this.uidToMetadataSets.put(((GenericPackage.GenericPackageBO)interchangeObjectBO).getPackageUID(),interchangeObject);      }    } else {      if (interchangeObjectBO.getClass().getEnclosingClass().equals(SourceClip.class)) {        GenericPackage genericPackage=null;        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof GenericPackage) {            genericPackage=(GenericPackage)dependentInterchangeObject;          }        }        SourceClip sourceClip=new SourceClip((SourceClip.SourceClipBO)interchangeObjectBO,genericPackage);        this.cacheInterchangeObject(sourceClip);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),sourceClip);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(Sequence.class)) {        List<StructuralComponent> structuralComponents=new ArrayList<>();        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof StructuralComponent) {            structuralComponents.add((StructuralComponent)dependentInterchangeObject);          }        }        Sequence sequence=new Sequence((Sequence.SequenceBO)interchangeObjectBO,structuralComponents);        this.cacheInterchangeObject(sequence);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),sequence);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(TimelineTrack.class)) {        Sequence sequence=null;        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof Sequence) {            sequence=(Sequence)dependentInterchangeObject;          }          TimelineTrack timelineTrack=new TimelineTrack((TimelineTrack.TimelineTrackBO)interchangeObjectBO,sequence);          this.cacheInterchangeObject(timelineTrack);          uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),timelineTrack);        }      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(SourcePackage.class)) {        List<GenericTrack> genericTracks=new ArrayList<>();        GenericDescriptor genericDescriptor=null;        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof GenericTrack) {            genericTracks.add((GenericTrack)dependentInterchangeObject);          } else           if (dependentInterchangeObject instanceof GenericDescriptor) {            genericDescriptor=(GenericDescriptor)dependentInterchangeObject;          }        }        SourcePackage sourcePackage=new SourcePackage((SourcePackage.SourcePackageBO)interchangeObjectBO,genericTracks,genericDescriptor);        this.cacheInterchangeObject(sourcePackage);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),sourcePackage);        uidToMetadataSets.put(((SourcePackage.SourcePackageBO)interchangeObjectBO).getPackageUID(),sourcePackage);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(MaterialPackage.class)) {        List<GenericTrack> genericTracks=new ArrayList<>();        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof GenericTrack) {            genericTracks.add((GenericTrack)dependentInterchangeObject);          }        }        MaterialPackage materialPackage=new MaterialPackage((MaterialPackage.MaterialPackageBO)interchangeObjectBO,genericTracks);        this.cacheInterchangeObject(materialPackage);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),materialPackage);        uidToMetadataSets.put(((MaterialPackage.MaterialPackageBO)interchangeObjectBO).getPackageUID(),materialPackage);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(EssenceContainerData.class)) {        GenericPackage genericPackage=null;        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof GenericPackage) {            genericPackage=(GenericPackage)dependentInterchangeObject;          }        }        EssenceContainerData essenceContainerData=new EssenceContainerData((EssenceContainerData.EssenceContainerDataBO)interchangeObjectBO,genericPackage);        this.cacheInterchangeObject(essenceContainerData);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),essenceContainerData);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(ContentStorage.class)) {        List<GenericPackage> genericPackageList=new ArrayList<>();        List<EssenceContainerData> essenceContainerDataList=new ArrayList<>();        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof GenericPackage) {            genericPackageList.add((GenericPackage)dependentInterchangeObject);          } else           if (dependentInterchangeObject instanceof EssenceContainerData) {            essenceContainerDataList.add((EssenceContainerData)dependentInterchangeObject);          }        }        ContentStorage contentStorage=new ContentStorage((ContentStorage.ContentStorageBO)interchangeObjectBO,genericPackageList,essenceContainerDataList);        this.cacheInterchangeObject(contentStorage);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),contentStorage);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(Preface.class)) {        GenericPackage genericPackage=null;        ContentStorage contentStorage=null;        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          if (dependentInterchangeObject instanceof GenericPackage) {            genericPackage=(GenericPackage)dependentInterchangeObject;          } else           if (dependentInterchangeObject instanceof ContentStorage) {            contentStorage=(ContentStorage)dependentInterchangeObject;          }        }        Preface preface=new Preface((Preface.PrefaceBO)interchangeObjectBO,genericPackage,contentStorage);        this.cacheInterchangeObject(preface);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),preface);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(CDCIPictureEssenceDescriptor.class)) {        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          JPEG2000PictureSubDescriptor jpeg2000PictureSubDescriptor=null;          if (dependentInterchangeObject instanceof JPEG2000PictureSubDescriptor) {            jpeg2000PictureSubDescriptor=(JPEG2000PictureSubDescriptor)dependentInterchangeObject;          }        }        CDCIPictureEssenceDescriptor cdciPictureEssenceDescriptor=new CDCIPictureEssenceDescriptor((CDCIPictureEssenceDescriptor.CDCIPictureEssenceDescriptorBO)interchangeObjectBO);        this.cacheInterchangeObject(cdciPictureEssenceDescriptor);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),cdciPictureEssenceDescriptor);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(RGBAPictureEssenceDescriptor.class)) {        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          JPEG2000PictureSubDescriptor jpeg2000PictureSubDescriptor=null;          if (dependentInterchangeObject instanceof JPEG2000PictureSubDescriptor) {            jpeg2000PictureSubDescriptor=(JPEG2000PictureSubDescriptor)dependentInterchangeObject;          }        }        RGBAPictureEssenceDescriptor rgbaPictureEssenceDescriptor=new RGBAPictureEssenceDescriptor((RGBAPictureEssenceDescriptor.RGBAPictureEssenceDescriptorBO)interchangeObjectBO);        this.cacheInterchangeObject(rgbaPictureEssenceDescriptor);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),rgbaPictureEssenceDescriptor);      } else       if (interchangeObjectBO.getClass().getEnclosingClass().equals(WaveAudioEssenceDescriptor.class)) {        List<InterchangeObject> subDescriptors=new ArrayList<InterchangeObject>();        for (        Node dependent : node.depends) {          InterchangeObject dependentInterchangeObject=uidToMetadataSets.get(dependent.uid);          AudioChannelLabelSubDescriptor audioChannelLabelSubDescriptor=null;          SoundFieldGroupLabelSubDescriptor soundFieldGroupLabelSubDescriptor=null;          if (dependentInterchangeObject instanceof AudioChannelLabelSubDescriptor) {            audioChannelLabelSubDescriptor=(AudioChannelLabelSubDescriptor)dependentInterchangeObject;            subDescriptors.add(audioChannelLabelSubDescriptor);          } else           if (dependentInterchangeObject instanceof SoundFieldGroupLabelSubDescriptor) {            soundFieldGroupLabelSubDescriptor=(SoundFieldGroupLabelSubDescriptor)dependentInterchangeObject;            subDescriptors.add(soundFieldGroupLabelSubDescriptor);          }        }        if (node.depends.size() > 0 && subDescriptors.size() == 0) {          throw new MXFException(String.format("The WaveAudioEssenceDescriptor in the essence has dependencies, but neither of them is a AudioChannelLabelSubDescriptor nor SoundFieldGroupLabelSubDescriptor"));        }        WaveAudioEssenceDescriptor waveAudioEssenceDescriptor=new WaveAudioEssenceDescriptor((WaveAudioEssenceDescriptor.WaveAudioEssenceDescriptorBO)interchangeObjectBO);        this.cacheInterchangeObject(waveAudioEssenceDescriptor);        uidToMetadataSets.put(interchangeObjectBO.getInstanceUID(),waveAudioEssenceDescriptor);      }    }  }}  }
class C{  public boolean update(){  final boolean isLoaded=assetManager.update();  if (isLoaded) {    doOnLoadingFinish();  }  return isLoaded;}  }
class C{  public ExtensionFilter(final String extension,final boolean allowDir){  this(new String[]{extension},allowDir,true);}  }
class C{  public boolean isTypePlus(){  return Build.VERSION.SDK_INT >= 18 && (isTypePlus || bluetoothDevice.getType() == BluetoothDevice.DEVICE_TYPE_LE);}  }
class C{  public void incrementValue(int row,int column,double value){  if (saveChanges && column >= 0 && column < this.numberColumns && row >= 0 && row < this.numberRows) {    long cellNum=(long)(row) * numberColumns + column;    if ((cellNum > blockEndingCell) || (cellNum < blockStartingCell)) {      if (isDirty) {        writeDataBlock();      }      numReads++;      if (previousRow < row) {        if (currentReadDirection == -1) {          currentReadDirection=0;        }        if (currentReadDirection != 0) {          currentReadDirection=0;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - halfBlockSize * switchRatio);      } else {        if (currentReadDirection == -1) {          currentReadDirection=1;        }        if (currentReadDirection != 1) {          currentReadDirection=1;          numSwitchReadDirections++;          switchRatio=(double)numSwitchReadDirections / numReads;        }        blockStartingCell=(long)(cellNum - (blockSize - (switchRatio * halfBlockSize)));      }      previousRow=row;      if (blockStartingCell < 0) {        blockStartingCell=0;      }      readDataBlock();    }    grid[(int)(cellNum - blockStartingCell)]+=value;    isDirty=true;  }}  }
class C{  protected Filter buildTagFilter(Map<String,List<String>> tagFilters){  RegexStringComparator regexStringComparator=new RegexStringComparator(buildTagFilterRegex(tagFilters));  regexStringComparator.setCharset(_charset);  RowFilter filter=new RowFilter(CompareOp.EQUAL,regexStringComparator);  return filter;}  }
class C{  public static <K,V>UnifiedSetMultimap<V,K> flip(SetMultimap<K,V> setMultimap){  UnifiedSetMultimap<V,K> result=new UnifiedSetMultimap<>();  setMultimap.forEachKeyMultiValues(null);  return result;}  }
class C{  protected boolean doSevereAlertProcessing(){  long now=System.currentTimeMillis();  if (ackSATimeout > 0 && (transmissionStartTime + ackWaitTimeout + ackSATimeout) <= now) {    logger.fatal(LocalizedMessage.create(LocalizedStrings.Connection_0_SECONDS_HAVE_ELAPSED_WAITING_FOR_A_RESPONSE_FROM_1_FOR_THREAD_2,new Object[]{Long.valueOf((ackWaitTimeout + ackSATimeout) / 1000),getRemoteAddress(),ackThreadName}));    ackSATimeout=0;    return true;  } else   if (!ackTimedOut && (0 < ackWaitTimeout) && (transmissionStartTime + ackWaitTimeout) <= now) {    logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_0_SECONDS_HAVE_ELAPSED_WAITING_FOR_A_RESPONSE_FROM_1_FOR_THREAD_2,new Object[]{Long.valueOf(ackWaitTimeout / 1000),getRemoteAddress(),ackThreadName}));    ackTimedOut=true;    final StringId state=(connectionState == Connection.STATE_SENDING) ? LocalizedStrings.Connection_TRANSMIT_ACKWAITTHRESHOLD : LocalizedStrings.Connection_RECEIVE_ACKWAITTHRESHOLD;    if (ackSATimeout > 0) {      this.owner.getDM().getMembershipManager().suspectMembers(Collections.singleton(getRemoteAddress()),state.toLocalizedString());    }  }  return false;}  }
class C{  public void addObservations(int[][] states){  for (int t=0; t < states.length; t++) {    int jointValue=0;    for (int i=0; i < numVars; i++) {      int thisValue=states[t][i];      marginalCounts[i][thisValue]++;      jointValue*=base;      jointValue+=thisValue;    }    jointCount[jointValue]++;    observations++;  }}  }
class C{  public NotificationChain basicSetPresence(Presence newPresence,NotificationChain msgs){  Presence oldPresence=presence;  presence=newPresence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DatatypePackage.PROPERTY__PRESENCE,oldPresence,newPresence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static boolean useLinearProbabilisticScalingOfPrice(){  if (mainChargingPriceBlurFactor == -2.0) {    return true;  } else {    return false;  }}  }
class C{  void move(GlowEntity entity,Location newLocation){  Chunk prevChunk=entity.location.getChunk();  Chunk newChunk=newLocation.getChunk();  if (prevChunk != newChunk) {    ((GlowChunk)prevChunk).getRawEntities().remove(entity);    ((GlowChunk)newChunk).getRawEntities().add(entity);  }}  }
class C{  protected void flushConn(){  if (connection != null) {    connection.flush();  }}  }
class C{  static Object[] toArray(Iterable<?> iterable){  return castOrCopyToCollection(iterable).toArray();}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","RectStateMachine|selected state|mousePressed");  ((EditableOMRect)graphic).initRectSize();  return super.mousePressed(e);}  }
class C{  private void validateAppearanceChanges(){  assertThat("unselected diameter was not set/returned correctly",indicator.getUnselectedDotDiameter() == unselectedDiameterPx);  assertThat("selected diameter was not set/returned correctly",indicator.getSelectedDotDiameter() == selectedDiameterPx);  assertThat("unselected color was not set/returned correctly",indicator.getUnselectedDotColor() == UNSELECTED_COLOR);  assertThat("selected color was not set/returned correctly",indicator.getSelectedDotColor() == SELECTED_COLOR);  assertThat("spacing between dots was not set/returned correctly",indicator.getSpacingBetweenDots() == spacingPx);  assertThat("transition duration was not set/returned correctly",indicator.getTransitionDuration() == TRANSITION_DURATION);}  }
class C{  public Matcher usePattern(Pattern newPattern){  if (newPattern == null)   throw new IllegalArgumentException("Pattern cannot be null");  parentPattern=newPattern;  int parentGroupCount=Math.max(newPattern.capturingGroupCount,10);  groups=new int[parentGroupCount * 2];  locals=new int[newPattern.localCount];  for (int i=0; i < groups.length; i++)   groups[i]=-1;  for (int i=0; i < locals.length; i++)   locals[i]=-1;  return this;}  }
class C{  public static void main(String[] args){  String serverName=null;  if (args.length > 0)   serverName=args[0];  if (serverName == null || serverName.length() == 0) {    try {      serverName=InetAddress.getLocalHost().getHostName();    } catch (    UnknownHostException ex) {      ex.printStackTrace();    }  }  ConnectTest ct=new ConnectTest(serverName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.303 -0500",hash_original_method="A2E8022D1487E0DC7C6CC7B8DABAC46D",hash_generated_method="2712DC25701C2412109D20CF38B652E3") public long enqueue(Request request){  ContentValues values=request.toContentValues(mPackageName);  Uri downloadUri=mResolver.insert(Downloads.Impl.CONTENT_URI,values);  long id=Long.parseLong(downloadUri.getLastPathSegment());  return id;}  }
class C{  public static boolean isHeaderTable(int tag){  if (tag == Tag.head || tag == Tag.bhed) {    return true;  }  return false;}  }
class C{  public MetricSchemaRecord(){}  }
class C{  public ConsentSection(Type type){  this.type=type;  this.summary=null;}  }
class C{  public MetadataRegistry(){  this.attributes=Maps.newHashMap();  this.elements=Maps.newHashMap();}  }
class C{  public static ArrayOfDoublesUnion heapifyUnion(final Memory mem){  return heapifyUnion(mem,DEFAULT_UPDATE_SEED);}  }
class C{  public static Builder builder(JoinResponse response){  return new Builder(response);}  }
class C{  protected void incrementMigrationCount(){  setVmMigrationCount(getVmMigrationCount() + 1);}  }
class C{  public HTMLWriter(Writer w,HTMLDocument doc,int pos,int len){  super(w,doc,pos,len);  completeDoc=(pos == 0 && len == doc.getLength());  setLineLength(80);}  }
class C{  public Style(Color fg,Color bg){  this(fg,bg,DEFAULT_FONT);}  }
class C{  public boolean isInRange(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++)   if (genome[i] < _species.minGene(i) || genome[i] > _species.maxGene(i))   return false;  return true;}  }
class C{  public boolean isFlagSet(int flag){  return (this.flags & flag) != 0;}  }
class C{  public boolean add(Solution solution){  return data.add(solution);}  }
class C{  public synchronized Response deletePriorityTask(int taskId){  return highPriorityResponses.remove(taskId);}  }
class C{  public ConnectionAcceptor(TCPTransport transport){  this.transport=transport;}  }
class C{  public String globalInfo(){  return "Classifier for building 'logistic model trees', which are classification trees with " + "logistic regression functions at the leaves. The algorithm can deal with binary and multi-class " + "target variables, numeric and nominal attributes and missing values.\n\n"+ "For more information see: \n\n"+ getTechnicalInformation().toString();}  }
class C{  @Override protected void sendData(final OutputStream out) throws IOException {  LOG.trace("enter sendData(OutputStream out)");  if (lengthOfData() == 0) {    LOG.debug("No data to send.");    return;  }  final byte[] tmp=new byte[4096];  final InputStream instream=source.createInputStream();  try {    int len;    while ((len=instream.read(tmp)) >= 0) {      out.write(tmp,0,len);    }  }  finally {    instream.close();  }}  }
class C{  public T caseTStructSetter(TStructSetter object){  return null;}  }
class C{  public UndeclaredThrowableException(Throwable t){  super(t);}  }
class C{  private void updateAccessPoints(){  final int wifiState=mWifiManager.getWifiState();switch (wifiState) {case WifiManager.WIFI_STATE_ENABLED:    final Collection<AccessPoint> accessPoints=constructAccessPoints();  mList.clear();mList.addAll(accessPoints);break;case WifiManager.WIFI_STATE_ENABLING:mList.clear();break;case WifiManager.WIFI_STATE_DISABLING:break;case WifiManager.WIFI_STATE_DISABLED:mList.clear();break;}mWifiAdapter.notifyDataSetChanged();}  }
class C{  public static Config fromXml(final String toConvert) throws JAXBException {  try (StringReader reader=new StringReader(toConvert)){    return fromXml(reader);  } }  }
class C{  public double eval(double params[]){  return (1.0 / Math.sinh(params[0]));}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapBean && ((MapBean)someObj).getMapBeanRepaintPolicy() == this) {    ((MapBean)someObj).setMapBeanRepaintPolicy(null);    setMap(null);  }}  }
class C{  @Override public void keyPressed(KeyEvent e){}  }
class C{  protected static OptimisationStrategy mostAggressive(OptimisationStrategy left,OptimisationStrategy right){  if (left.ordinal() < right.ordinal())   return left;  return right;}  }
class C{  static private String INT_Min_Minus(){  long tempValue=Integer.MIN_VALUE - 1;  return String.valueOf(tempValue);}  }
class C{  @Deprecated public void importClass(long off,IdentifierToken nm){  importClass(off,nm.id);}  }
class C{  public WrappedByteBuffer putUnsignedShort(int v){  this.putShort((short)(v & 0xFFFF));  return this;}  }
class C{  static byte[] mask(byte[] maskingKey,byte[] payload){  if (maskingKey == null || maskingKey.length < 4 || payload == null) {    return payload;  }  for (int i=0; i < payload.length; ++i) {    payload[i]^=maskingKey[i % 4];  }  return payload;}  }
class C{  public GPathResult parents(){  throw new GroovyRuntimeException("parents() not implemented yet");}  }
class C{  public void insert(EventBean[] eventArray){  for (  EventBean theEvent : eventArray) {    events.add(theEvent);  }  EventBean[] oldEvents=null;  int expiredCount=events.size() - depth;  if (expiredCount > 0) {    oldEvents=new EventBean[expiredCount];    for (int i=0; i < expiredCount; i++) {      oldEvents[i]=events.remove(0);    }  }  for (  View child : childViews) {    child.update(eventArray,oldEvents);  }}  }
class C{  private Descriptors.FieldDescriptor f(String name){  Descriptors.FieldDescriptor result;  if (extensionRegistry == null) {    result=baseDescriptor.findFieldByName(name);  } else {    result=file.findExtensionByName(name + "_extension");  }  Assert.assertNotNull(result);  return result;}  }
class C{  public VasaAssociationObject[] queryAssociatedCapabilityForLun(String[] lunId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedCapabilityForLun(): ";  log.info(methodName + "Entry");  if (lunId != null) {    log.info(methodName + "input LUN Ids: " + Arrays.asList(lunId));  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  VasaAssociationObject[] objs=sosManager.queryAssociatedCapabilityForLun(lunId);  log.info(methodName + "Exit returning vasa association objects of size[" + objs.length+ "]");  return objs;}  }
class C{  @HLEFunction(nid=0x39240E7D,version=150) public int sceAudioRoutingGetMode(){  return audioRoutingMode;}  }
class C{  public static RelationalOpExpression eq(String propertyName,Object value){  return new RelationalOpExpression(getPropExpr(propertyName),"=",new ConstantExpression(value));}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  invalidateLayout(comp.getParent());}  }
class C{  public static Population readObjectives(BufferedReader reader) throws IOException {  Population population=new Population();  String line=null;  while ((line=reader.readLine()) != null) {    String[] tokens=line.trim().split("\\s+");    double[] values=new double[tokens.length];    for (int i=0; i < tokens.length; i++) {      values[i]=Double.parseDouble(tokens[i]);    }    population.add(new Solution(values));  }  return population;}  }
class C{  @Override protected void map(LongWritable key,Text value,Context context) throws java.io.IOException, InterruptedException {  String[] line=value.toString().split(";");  if (Integer.parseInt(line[1]) == 1) {    status.set(line[4]);    context.write(status,addOne);  }}  }
class C{  synchronized void removeStyle(Style style){  AttributeSet[] attrs=getAttributes();  for (int counter=attrs.length - 1; counter >= 0; counter--) {    if (attrs[counter] == style) {      removeAttributeSetAt(counter);      if (counter < extendedIndex) {        extendedIndex--;      }      break;    }  }}  }
class C{  public static void clearWinContext(Properties ctx,int WindowNo){  if (ctx == null)   throw new IllegalArgumentException("Require Context");  Object[] keys=ctx.keySet().toArray();  for (int i=0; i < keys.length; i++) {    String tag=keys[i].toString();    if (tag.startsWith(WindowNo + "|"))     ctx.remove(keys[i]);  }  MLookupCache.cacheReset(WindowNo);  if (Ini.isClient())   removeWindow(WindowNo);}  }
class C{  public boolean dialogFinished(){  return !this.dialog.cancelled();}  }
class C{  public boolean canCache(ShardSearchRequest request,SearchContext context){  if (hasLength(request.templateSource())) {    return false;  }  if (context.size() != 0) {    return false;  }  if (!CACHEABLE_SEARCH_TYPES.contains(context.searchType())) {    return false;  }  IndexMetaData index=clusterService.state().getMetaData().index(request.index());  if (index == null) {    return false;  }  if (request.requestCache() == null) {    if (!isCacheEnabled(index.getSettings(),Boolean.FALSE)) {      return false;    }  } else   if (!request.requestCache()) {    return false;  }  if (!(context.searcher().getIndexReader() instanceof DirectoryReader)) {    return false;  }  if (context.nowInMillisUsed()) {    return false;  }  return true;}  }
class C{  public static <T>T splitEachLine(Path self,String regex,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self),regex,closure);}  }
class C{  private static boolean handleErrors(String line){  StatusManager manager=StatusManager.getManager();  Matcher procMatcher=noProcessorPattern.matcher(line);  if (procMatcher.matches()) {    CheckerErrorStatus status;    if (procMatcher.group(1).equals("''")) {      status=new CheckerErrorStatus("No checkers configured. Use the plugin preferences to configure checkers to use.");    } else {      status=new CheckerErrorStatus("Annotation processor " + procMatcher.group(1) + " could not be found. Try adding checkers.jar to your project build path.");    }    manager.handle(status,StatusManager.SHOW);    return false;  }  Matcher flagMatcher=invalidFlagPattern.matcher(line);  if (flagMatcher.matches()) {    manager.handle(new CheckerErrorStatus("Invalid compiler flag: " + flagMatcher.group(1) + ". Check your preferences for invalid flags."),StatusManager.SHOW);    return false;  }  Matcher missingFileMatcher=missingFilePattern.matcher(line);  if (missingFileMatcher.matches()) {    manager.handle(new CheckerErrorStatus("Cannot find file: " + missingFileMatcher.group(1) + ". You may have malformed input in your preferences."),StatusManager.SHOW);    return false;  }  return true;}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,-1);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  LiveSet with(Reference r){  String name=r.getIdentifierName();  LexicalScope scope=ScopeAnalyzer.containingScopeForNode(r);  while (scope != null) {    if (scope.symbols.getSymbol(name) != null) {      return with(name,scope);    }    scope=scope.parent;  }  return this;}  }
class C{  protected void validateFileShareLabel(String label,Project project){  List<FileShare> fileShareList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,FileShare.class,ContainmentPrefixConstraint.Factory.getFullMatchConstraint(FileShare.class,"project",project.getId(),label));  if (!fileShareList.isEmpty()) {    throw APIException.badRequests.duplicateLabel(label);  }}  }
class C{  protected HttpURLConnection(final URL url){  super(url);  throw new RuntimeException("An HTTP URL connection can only be " + "constructed from a HttpMethod class");}  }
class C{  public static void filterInvMirror(Image inputImg,int inStart,int inLen,int inStep,Image outputImg,int outStart,int outLen,int outStep,Filter filter){  int fStart=0;  int fEnd=0;  int inPos=0;  for (int i=0; i < outLen; i++) {    fStart=CommonUtil.ceilingHalf(filter.getStart() + i);    fEnd=CommonUtil.floorHalf(filter.getEnd() + i);    for (int j=fStart; j <= fEnd; j++) {      inPos=j;      if (inPos < 0) {        if (filter.isHiPass()) {          inPos=-inPos - 1;        } else {          inPos=-inPos;        }        if (inPos >= inLen) {          continue;        }      }      if (inPos >= inLen) {        if (filter.isHiPass()) {          inPos=2 * inLen - 2 - inPos;        } else {          inPos=2 * inLen - 1 - inPos;        }        if (inPos < 0) {          continue;        }      }      outputImg.getData()[outStart + i * outStep]+=filter.getData()[2 * j - i - filter.getStart()] * inputImg.getData()[inStart + inPos * inStep];    }  }}  }
class C{  public Builder updateExternalId(String externalId){  this.externalId=externalId;  return this;}  }
class C{  public Base64InputStream(String encodedString){  this.buf=decode(encodedString);  this.pos=0;  this.count=buf.length;}  }
class C{  public static List<ExtModManifestBean> detectInstalledExtMods(){  final List<ExtModManifestBean> manifestList=new ArrayList<>();  final List<ModuleBean> modList=Updater.detectInstalledModules(LEnv.PATH_EXT_MODS);  if (modList == null)   return manifestList;  for (  final ModuleBean mb : modList) {    Path manifestPath=null;    for (    final FileBean fb : mb.getFileList()) {      final Path filePath=Paths.get(fb.getPath());      if (filePath.getNameCount() == 5 && filePath.getFileName().equals(EXT_MOD_MANIFEST_PATH)) {        manifestPath=LEnv.PATH_APP.resolve(filePath.subpath(1,filePath.getNameCount()));        break;      }    }    if (manifestPath == null)     continue;    final ExtModManifestBean manifest;    try {      manifest=JAXB.unmarshal(manifestPath.toFile(),ExtModManifestBean.class);    } catch (    final Exception e) {      LEnv.LOGGER.debug("Invalid external module manifest: " + manifestPath,e);      continue;    }    if (!mb.getFolder().equals(manifest.getFolder())) {      LEnv.LOGGER.debug("Invalid external module manifest, mismatching folder specified: " + manifest.getFolder() + "; was expecting: "+ mb.getFolder());      continue;    }    final VersionBean version=VersionBean.fromString(manifestPath.getName(manifestPath.getNameCount() - 2).toString());    if (version == null || !version.equals(manifest.getVersion())) {      LEnv.LOGGER.debug("Invalid external module manifest, mismatching version specified: " + manifest.getVersion() + "; was expecting: "+ version);      continue;    }    if (manifest.getAuthorList() == null || manifest.getAuthorList().isEmpty()) {      LEnv.LOGGER.debug("Invalid external module manifest, missing author list property!");      continue;    }    if (manifest.getMainClass() == null || manifest.getMainClass().isEmpty()) {      LEnv.LOGGER.debug("Invalid external module manifest, missing main class property!");      continue;    }    manifest.setModuleBean(mb);    manifestList.add(manifest);  }  return manifestList;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void deleteAttributes(int[] columnIndices){  int i;  Arrays.sort(columnIndices);  addUndoPoint();  m_IgnoreChanges=true;  for (i=columnIndices.length - 1; i >= 0; i--) {    deleteAttributeAt(columnIndices[i],false);  }  m_IgnoreChanges=false;  notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));}  }
class C{  public void close() throws IOException {  fInputStream.close();}  }
class C{  public static void checkOnSolicitarProrroga(String idPrestamo,GestionPrestamosBI service) throws PrestamoActionNotAllowedException {  PrestamoVO prestamo=service.getPrestamo(idPrestamo);  if ((prestamo.getEstado() != PrestamosConstants.ESTADO_PRESTAMO_ENTREGADO) && (prestamo.getEstado() != PrestamosConstants.ESTADO_PRESTAMO_DEVUELTO_INCOMPLETO))   throw new PrestamoActionNotAllowedException(ArchivoErrorCodes.ERROR_PRESTAMO_NO_ENTREGADO,PrestamoActionNotAllowedException.XESTADO);  ProrrogaVO prorrogaVO=service.getProrrogaSolicitada(idPrestamo);  if (prorrogaVO != null)   if (prorrogaVO.getEstado() == PrestamosConstants.ESTADO_PRORROGA_SOLICITADA || prorrogaVO.getEstado() == PrestamosConstants.ESTADO_PRORROGA_DENEGADA)   throw new PrestamoActionNotAllowedException(ArchivoErrorCodes.ERROR_PRORROGA_TRATADA,PrestamoActionNotAllowedException.XPRORROGA_YA_TRATADA);}  }
class C{  protected int bytesPerLine(){  return (45);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.954 -0400",hash_original_method="E2F995DD283D6A0A833AF2D339D19742",hash_generated_method="B9427F392DE55B9967A3D3DF4534BDBC") @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public void init(int id,CrawlController crawlController){  this.myId=id;  this.pageFetcher=crawlController.getPageFetcher();  this.robotstxtServer=crawlController.getRobotstxtServer();  this.docIdServer=crawlController.getDocIdServer();  this.frontier=crawlController.getFrontier();  this.parser=new Parser(crawlController.getConfig());  this.myController=crawlController;  this.isWaitingForNewURLs=false;}  }
class C{  public static TypeReference create(Assumptions assumptions,ResolvedJavaType type){  return createTrusted(assumptions,filterInterfaceTypesOut(type));}  }
class C{  @Override public void close() throws IOException {  this.output.close();  this.output=null;}  }
class C{  private DisplayText(ASN1String de){  contents=de;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if ((!getPlotLines()) || ((!(domainAxis instanceof CyclicNumberAxis)) && (!(rangeAxis instanceof CyclicNumberAxis))) || (item <= 0)) {    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);    return;  }  double xn=dataset.getXValue(series,item - 1);  double yn=dataset.getYValue(series,item - 1);  if (Double.isNaN(yn)) {    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);    return;  }  double[] x=new double[2];  double[] y=new double[2];  x[0]=xn;  y[0]=yn;  xn=dataset.getXValue(series,item);  yn=dataset.getYValue(series,item);  if (Double.isNaN(yn)) {    return;  }  x[1]=xn;  y[1]=yn;  double xcycleBound=Double.NaN;  double ycycleBound=Double.NaN;  boolean xBoundMapping=false, yBoundMapping=false;  CyclicNumberAxis cnax=null, cnay=null;  if (domainAxis instanceof CyclicNumberAxis) {    cnax=(CyclicNumberAxis)domainAxis;    xcycleBound=cnax.getCycleBound();    xBoundMapping=cnax.isBoundMappedToLastCycle();    if ((x[0] != x[1]) && ((xcycleBound >= x[0]) && (xcycleBound <= x[1]) || (xcycleBound >= x[1]) && (xcycleBound <= x[0]))) {      double[] nx=new double[3];      double[] ny=new double[3];      nx[0]=x[0];      nx[2]=x[1];      ny[0]=y[0];      ny[2]=y[1];      nx[1]=xcycleBound;      ny[1]=(y[1] - y[0]) * (xcycleBound - x[0]) / (x[1] - x[0]) + y[0];      x=nx;      y=ny;    }  }  if (rangeAxis instanceof CyclicNumberAxis) {    cnay=(CyclicNumberAxis)rangeAxis;    ycycleBound=cnay.getCycleBound();    yBoundMapping=cnay.isBoundMappedToLastCycle();    if ((y[0] != y[1]) && ((ycycleBound >= y[0]) && (ycycleBound <= y[1]) || (ycycleBound >= y[1]) && (ycycleBound <= y[0]))) {      double[] nx=new double[x.length + 1];      double[] ny=new double[y.length + 1];      nx[0]=x[0];      nx[2]=x[1];      ny[0]=y[0];      ny[2]=y[1];      ny[1]=ycycleBound;      nx[1]=(x[1] - x[0]) * (ycycleBound - y[0]) / (y[1] - y[0]) + x[0];      if (x.length == 3) {        nx[3]=x[2];        ny[3]=y[2];      }      x=nx;      y=ny;    } else     if ((x.length == 3) && (y[1] != y[2]) && ((ycycleBound >= y[1]) && (ycycleBound <= y[2]) || (ycycleBound >= y[2]) && (ycycleBound <= y[1]))) {      double[] nx=new double[4];      double[] ny=new double[4];      nx[0]=x[0];      nx[1]=x[1];      nx[3]=x[2];      ny[0]=y[0];      ny[1]=y[1];      ny[3]=y[2];      ny[2]=ycycleBound;      nx[2]=(x[2] - x[1]) * (ycycleBound - y[1]) / (y[2] - y[1]) + x[1];      x=nx;      y=ny;    }  }  if (x.length == 2) {    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);    return;  }  OverwriteDataSet newset=new OverwriteDataSet(x,y,dataset);  if (cnax != null) {    if (xcycleBound == x[0]) {      cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound);    }    if (xcycleBound == x[1]) {      cnax.setBoundMappedToLastCycle(x[0] <= xcycleBound);    }  }  if (cnay != null) {    if (ycycleBound == y[0]) {      cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound);    }    if (ycycleBound == y[1]) {      cnay.setBoundMappedToLastCycle(y[0] <= ycycleBound);    }  }  super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,1,crosshairState,pass);  if (cnax != null) {    if (xcycleBound == x[1]) {      cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound);    }    if (xcycleBound == x[2]) {      cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound);    }  }  if (cnay != null) {    if (ycycleBound == y[1]) {      cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound);    }    if (ycycleBound == y[2]) {      cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound);    }  }  super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,2,crosshairState,pass);  if (x.length == 4) {    if (cnax != null) {      if (xcycleBound == x[2]) {        cnax.setBoundMappedToLastCycle(x[3] <= xcycleBound);      }      if (xcycleBound == x[3]) {        cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound);      }    }    if (cnay != null) {      if (ycycleBound == y[2]) {        cnay.setBoundMappedToLastCycle(y[3] <= ycycleBound);      }      if (ycycleBound == y[3]) {        cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound);      }    }    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,3,crosshairState,pass);  }  if (cnax != null) {    cnax.setBoundMappedToLastCycle(xBoundMapping);  }  if (cnay != null) {    cnay.setBoundMappedToLastCycle(yBoundMapping);  }}  }
class C{  public boolean isOptimizeAutoGenerateId(){  return optimizeAutoGenerateId;}  }
class C{  public static void activateRollingFileAppender(String logFilePath,String logConfigFile,String logLevel){synchronized (managedLoggers) {    try {      LoggerFactory.logLevel=logLevel;      LoggerFactory.logFilePath=logFilePath;      LoggerFactory.logConfigPath=logConfigFile;      initAppenders();      Iterator<Class<?>> iterator=managedLoggers.keySet().iterator();      while (iterator.hasNext()) {        Class<?> loggerName=iterator.next();        Log4jLogger logger=managedLoggers.get(loggerName);        setFileAppendersForLogger(logger);      }      switchedToFileAppender=true;    } catch (    IOException e) {      System.err.println("Log file could not be created!");    }  }}  }
class C{  public static List<SinglePortUdpHarvester> createHarvesters(int port){  List<SinglePortUdpHarvester> harvesters=new LinkedList<>();  for (  TransportAddress address : AbstractUdpListener.getAllowedAddresses(port)) {    try {      harvesters.add(new SinglePortUdpHarvester(address));    } catch (    IOException ioe) {      logger.info("Failed to create SinglePortUdpHarvester for " + "address " + address + ": "+ ioe);    }  }  return harvesters;}  }
class C{  public boolean batchFinished() throws Exception {  if (m_InputFormat == null) {    throw new NullPointerException("No input instance format defined");  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  if (m_OutputQueue.empty()) {    if ((m_OutputStringAtts.getAttributeIndices().length > 0) || (m_OutputRelAtts.getAttributeIndices().length > 0)) {      m_OutputFormat=m_OutputFormat.stringFreeStructure();      m_OutputStringAtts=new StringLocator(m_OutputFormat,m_OutputStringAtts.getAllowedIndices());    }  }  return (numPendingOutput() != 0);}  }
class C{  final boolean isSignaturePolymorphic(){  return tree.sym.kind == MTH && types.isSignaturePolymorphic((MethodSymbol)tree.sym);}  }
class C{  @Override public void buildClassifier(Instances trainInstances) throws Exception {  m_numSubsets=0;  m_splitPoint=Double.MAX_VALUE;  m_infoGain=0;  m_gainRatio=0;  if (trainInstances.attribute(m_attIndex).isNominal()) {    handleEnumeratedAttribute(trainInstances);  } else {    trainInstances.sort(trainInstances.attribute(m_attIndex));    handleNumericAttribute(trainInstances);  }}  }
class C{  private void keepAlive(boolean retryOnFailure){  long sessionId=state.getSessionId();  if (state.getState() == Session.State.UNSTABLE)   connection.reset();  KeepAliveRequest request=KeepAliveRequest.builder().withSession(sessionId).withCommandSequence(state.getCommandResponse()).withEventIndex(state.getEventIndex()).build();  state.getLogger().debug("{} - Sending {}",sessionId,request);  connection.<KeepAliveRequest,KeepAliveResponse>send(request).whenComplete(null);}  }
class C{  private void generate(XmlWriter w,String name) throws IOException {  if (total == 0) {    return;  }  w.startElement(GoogleBaseNamespaces.GM,name,Collections.singletonList(new XmlWriter.Attribute("total",Integer.toString(total))),null);  if (countBySource != null && !countBySource.isEmpty()) {    w.startRepeatingElement();    for (    Map.Entry<String,Integer> entry : countBySource.entrySet()) {      List<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(2);      attrs.add(new XmlWriter.Attribute("name",entry.getKey()));      attrs.add(new XmlWriter.Attribute("count",entry.getValue().toString()));      w.simpleElement(GoogleBaseNamespaces.GM,"source",attrs,null);    }    w.endRepeatingElement();  }  w.endElement();}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=identity;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=identity;    }  }}  }
class C{  public static void queueColumnLoad(ICubicWorld world,CubeIO loader,int x,int z,Consumer<Column> runnable){  QueuedColumn key=new QueuedColumn(x,z,world);  AsyncColumnIOProvider task=columnTasks.get(key);  if (task == null) {    task=new AsyncColumnIOProvider(key,loader);    task.addCallback(runnable);    columnTasks.put(key,task);    pool.execute(task);  } else {    task.addCallback(runnable);  }}  }
class C{  protected String doIt() throws Exception {  int to_ID=super.getRecord_ID();  log.info("From PA_ReportColumnSet_ID=" + m_PA_ReportColumnSet_ID + ", To="+ to_ID);  if (to_ID < 1)   throw new Exception(MSG_SaveErrorRowNotFound);  MReportColumnSet to=new MReportColumnSet(getCtx(),to_ID,get_TrxName());  MReportColumnSet rcSet=new MReportColumnSet(getCtx(),m_PA_ReportColumnSet_ID,get_TrxName());  MReportColumn[] rcs=rcSet.getColumns();  for (int i=0; i < rcs.length; i++) {    MReportColumn rc=MReportColumn.copy(getCtx(),to.getAD_Client_ID(),to.getAD_Org_ID(),to_ID,rcs[i],get_TrxName());    rc.saveEx();  }  return "@Copied@=" + rcs.length;}  }
class C{  public int intValue(){  return value;}  }
class C{  private void initialize(){  setSize(800,450);  setContentPane(getJContentPane());  updateTitle();}  }
class C{  protected void computeNeighborhoods(Relation<O> relation,KNNQuery<O> knnQuery,ModifiableDBIDs pruned,WritableDataStore<ModifiableDBIDs> knns,WritableDataStore<ModifiableDBIDs> rnns,WritableDoubleDataStore density){  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    int count=rnns.get(iter).size();    DBIDs knn=getKNN(iter,knnQuery,knns,density);    for (DBIDIter niter=knn.iter(); niter.valid(); niter.advance()) {      if (DBIDUtil.equal(iter,niter)) {        continue;      }      if (getKNN(niter,knnQuery,knns,density).contains(iter)) {        rnns.get(niter).add(iter);        rnns.get(iter).add(niter);        count++;      }    }    if (count >= knn.size() * m) {      pruned.add(iter);    }  }}  }
class C{  private String generateExceptionMessage(Throwable throwable){  return new StringBuilder(Throwables.getStackTraceAsString(throwable).replace(System.getProperty("user.home"),"$HOME").replace(System.getProperty("user.name"),"$USER")).insert(0,"## Stack Trace:\n```java\n").append("\n```").toString();}  }
class C{  private void checkPropertyKeys(Properties properties) throws IllegalArgumentException {  Set keys=properties.keySet();  Iterator i=keys.iterator();  while (i.hasNext()) {    String k=(String)i.next();    if (!keyValid(k)) {      throw new IllegalArgumentException(k + " is not a valid IBM SSL property key.");    }  }}  }
class C{  public Instances resampleWithWeights(Random random,boolean[] sampled,boolean representUsingWeights){  double[] weights=new double[numInstances()];  for (int i=0; i < weights.length; i++) {    weights[i]=instance(i).weight();  }  return resampleWithWeights(random,weights,sampled,representUsingWeights);}  }
class C{  @Override public DescribeInstanceAttributeResult describeInstanceAttribute(AmazonEC2Client ec2Client,DescribeInstanceAttributeRequest describeInstanceAttributeRequest){  return ec2Client.describeInstanceAttribute(describeInstanceAttributeRequest);}  }
class C{  public static CachableRed convertTosRGB(CachableRed src){  ColorModel cm=src.getColorModel();  ColorSpace cs=cm.getColorSpace();  if (cs == ColorSpace.getInstance(ColorSpace.CS_sRGB))   return src;  return new Any2sRGBRed(src);}  }
class C{  @DSComment("Package priviledge") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:28.308 -0500",hash_original_method="020E778E16877AE64A0EC7CA895AF414",hash_generated_method="020E778E16877AE64A0EC7CA895AF414") void registerContentObserver(Cursor cursor,ContentObserver observer){  cursor.registerContentObserver(mObserver);}  }
class C{  private void verifyConnection(int port,boolean useSSL,String serverKeystoreAlias,String clientKeystoreAlias,AuthenticationInfo securityInfo,boolean silentFail) throws Exception {  verifyConnection(port,useSSL,serverKeystoreAlias,clientKeystoreAlias,securityInfo,null,silentFail);}  }
class C{  public static String toGetUrl(String url,Bundle params){  if (params != null) {    if (!url.endsWith("?")) {      url=url + "?";    }    for (    String key : params.keySet()) {      url=url + key + "="+ params.getString(key)+ "&";    }  }  return url;}  }
class C{  static OrganizationReference findOrCreateOrganizationReference(Organization source,Organization target,OrganizationReferenceType refType,DataService dataService){  Invariants.assertNotNull(refType,"organization reference type not set");  OrganizationReference ref=new OrganizationReference(source,target,refType);  OrganizationReference result=(OrganizationReference)dataService.find(ref);  if (result == null) {    result=new OrganizationReference(source,target,refType);    try {      dataService.persist(result);      source.getTargets().add(result);      target.getSources().add(result);      dataService.flush();    } catch (    NonUniqueBusinessKeyException e) {      logger.logWarn(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.WARN_ORGANIZATION_ALREADY_EXIST);      result=(OrganizationReference)dataService.find(ref);    }  }  return result;}  }
class C{  public Where<T,ID> in(String columnName,Iterable<?> objects) throws SQLException {  addClause(new In(columnName,findColumnFieldType(columnName),objects,true));  return this;}  }
class C{  @Override public final byte readByte() throws IOException {  return dis.readByte();}  }
class C{  public HistoryReadDetails clone(){  HistoryReadDetails result=new HistoryReadDetails();  return result;}  }
class C{  public void writeHeader(final String comment) throws IOException {  byte[] chkid="RIFF".getBytes();  raf.write(chkid,0,chkid.length);  writeInt(raf,0);  chkid="WAVE".getBytes();  raf.write(chkid,0,chkid.length);  chkid="fmt ".getBytes();  raf.write(chkid,0,chkid.length);  writeInt(raf,16);  writeShort(raf,WAVE_FORMAT_PCM);  writeShort(raf,(short)channels);  writeInt(raf,sampleRate);  writeInt(raf,sampleRate * channels * 2);  writeShort(raf,(short)(channels * 2));  writeShort(raf,(short)16);  chkid="data".getBytes();  raf.write(chkid,0,chkid.length);  writeInt(raf,0);}  }
class C{  public InputStream openInputStream() throws IOException {  ensureOpen();  return mPrivateInput;}  }
class C{  public static File saveFile(String logData){  File dir=getLogDir();  if (dir == null) {    return null;  }  FileWriter fileWriter=null;  File output=null;  try {    output=new File(dir,getLogFileName());    fileWriter=new FileWriter(output,true);    fileWriter.write(logData);  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (fileWriter != null) {      try {        fileWriter.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }  return output;}  }
class C{  public static <K>BigDecimal addToBigDecimalInMap(Map<K,Object> theMap,K mapKey,BigDecimal addNumber){  Object currentNumberObj=theMap.get(mapKey);  BigDecimal currentNumber=null;  if (currentNumberObj == null) {    currentNumber=ZERO_BD;  } else   if (currentNumberObj instanceof BigDecimal) {    currentNumber=(BigDecimal)currentNumberObj;  } else   if (currentNumberObj instanceof Double) {    currentNumber=new BigDecimal(((Double)currentNumberObj).doubleValue());  } else   if (currentNumberObj instanceof Long) {    currentNumber=new BigDecimal(((Long)currentNumberObj).longValue());  } else {    throw new IllegalArgumentException("In addToBigDecimalInMap found a Map value of a type not supported: " + currentNumberObj.getClass().getName());  }  if (addNumber == null || ZERO_BD.compareTo(addNumber) == 0) {    return currentNumber;  }  currentNumber=currentNumber.add(addNumber);  theMap.put(mapKey,currentNumber);  return currentNumber;}  }
class C{  public void fillAttributeSet(Set attrSet){  ((ExtendedSelector)getSimpleSelector()).fillAttributeSet(attrSet);}  }
class C{  protected void executeS3SpecificStepsImpl(BusinessObjectDataRestoreDto businessObjectDataRestoreDto){  boolean cleanUpOriginS3BucketLocationOnFailure=false;  S3FileTransferRequestParamsDto originS3FileTransferRequestParamsDto=null;  try {    S3FileTransferRequestParamsDto glacierS3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();    glacierS3FileTransferRequestParamsDto.setS3BucketName(businessObjectDataRestoreDto.getGlacierBucketName());    glacierS3FileTransferRequestParamsDto.setS3Endpoint(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT));    glacierS3FileTransferRequestParamsDto.setS3KeyPrefix(StringUtils.appendIfMissing(businessObjectDataRestoreDto.getGlacierS3KeyPrefix(),"/"));    List<S3ObjectSummary> actualGlacierS3Files=s3Service.listDirectory(glacierS3FileTransferRequestParamsDto,true);    List<StorageFile> expectedGlacierS3Files=new ArrayList<>();    for (    StorageFile originS3File : businessObjectDataRestoreDto.getOriginStorageFiles()) {      String glacierS3FilePath=String.format("%s/%s",businessObjectDataRestoreDto.getGlacierS3KeyBasePrefix(),originS3File.getFilePath());      expectedGlacierS3Files.add(new StorageFile(glacierS3FilePath,originS3File.getFileSizeBytes(),null));    }    storageFileHelper.validateArchivedS3Files(expectedGlacierS3Files,actualGlacierS3Files,businessObjectDataRestoreDto.getGlacierStorageName(),businessObjectDataRestoreDto.getBusinessObjectDataKey());    List<S3ObjectSummary> archivedGlacierS3Files=new ArrayList<>();    for (    S3ObjectSummary s3ObjectSummary : actualGlacierS3Files) {      if (StorageClass.Glacier.toString().equals(s3ObjectSummary.getStorageClass())) {        archivedGlacierS3Files.add(s3ObjectSummary);      }    }    glacierS3FileTransferRequestParamsDto.setFiles(storageFileHelper.getFiles(storageFileHelper.createStorageFilesFromS3ObjectSummaries(archivedGlacierS3Files)));    s3Service.validateGlacierS3FilesRestored(glacierS3FileTransferRequestParamsDto);    originS3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();    originS3FileTransferRequestParamsDto.setS3BucketName(businessObjectDataRestoreDto.getOriginBucketName());    originS3FileTransferRequestParamsDto.setS3Endpoint(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT));    originS3FileTransferRequestParamsDto.setS3KeyPrefix(StringUtils.appendIfMissing(businessObjectDataRestoreDto.getOriginS3KeyPrefix(),"/"));    if (s3Service.listDirectory(originS3FileTransferRequestParamsDto).isEmpty()) {      cleanUpOriginS3BucketLocationOnFailure=true;    } else {      throw new IllegalStateException(String.format("The origin S3 key prefix is not empty. S3 bucket name: {%s}, S3 key prefix: {%s}",originS3FileTransferRequestParamsDto.getS3BucketName(),originS3FileTransferRequestParamsDto.getS3KeyPrefix()));    }    S3FileCopyRequestParamsDto s3FileCopyRequestParamsDto=storageHelper.getS3FileCopyRequestParamsDto();    s3FileCopyRequestParamsDto.setSourceBucketName(businessObjectDataRestoreDto.getGlacierBucketName());    s3FileCopyRequestParamsDto.setTargetBucketName(businessObjectDataRestoreDto.getOriginBucketName());    for (    StorageFile originS3File : businessObjectDataRestoreDto.getOriginStorageFiles()) {      String glacierS3FilePath=String.format("%s/%s",businessObjectDataRestoreDto.getGlacierS3KeyBasePrefix(),originS3File.getFilePath());      s3FileCopyRequestParamsDto.setSourceObjectKey(glacierS3FilePath);      s3FileCopyRequestParamsDto.setTargetObjectKey(originS3File.getFilePath());      try {        s3Dao.copyFile(s3FileCopyRequestParamsDto);      } catch (      Exception e) {        throw new IllegalStateException(String.format("Failed to copy S3 file. Source storage: {%s}, source S3 bucket name: {%s}, source S3 object key: {%s}, " + "target storage: {%s}, target S3 bucket name: {%s}, target S3 object key: {%s}, " + "business object data: {%s}",businessObjectDataRestoreDto.getGlacierStorageName(),s3FileCopyRequestParamsDto.getSourceBucketName(),s3FileCopyRequestParamsDto.getSourceObjectKey(),businessObjectDataRestoreDto.getOriginStorageName(),s3FileCopyRequestParamsDto.getTargetBucketName(),s3FileCopyRequestParamsDto.getTargetObjectKey(),businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataRestoreDto.getBusinessObjectDataKey())),e);      }    }    List<S3ObjectSummary> actualOriginS3Files=s3Service.listDirectory(originS3FileTransferRequestParamsDto,true);    storageFileHelper.validateRestoredS3Files(businessObjectDataRestoreDto.getOriginStorageFiles(),actualOriginS3Files,businessObjectDataRestoreDto.getOriginStorageName(),businessObjectDataRestoreDto.getBusinessObjectDataKey());    if (LOGGER.isInfoEnabled()) {      LOGGER.info("Copied S3 files to the origin S3 bucket. s3KeyCount={} s3BucketName=\"{}\"",actualOriginS3Files.size(),originS3FileTransferRequestParamsDto.getS3BucketName());      for (      S3ObjectSummary s3File : actualOriginS3Files) {        LOGGER.info("s3Key=\"{}\"",s3File.getKey());      }    }  } catch (  RuntimeException e) {    if (cleanUpOriginS3BucketLocationOnFailure) {      LOGGER.info("Rolling back the S3 copy operation by deleting all keys matching the S3 key prefix... s3KeyPrefix=\"{}\" s3BucketName=\"{}\"",originS3FileTransferRequestParamsDto.getS3KeyPrefix(),originS3FileTransferRequestParamsDto.getS3BucketName());      s3Service.deleteDirectoryIgnoreException(originS3FileTransferRequestParamsDto);    }    throw e;  }}  }
class C{  public BarChartComponent(final String name,final int numDataSources){  super(name);  model=new BarChartModel();  model.addDataSources(numDataSources);  init();  addListener();}  }
class C{  private Optional<LogData> mapToLogData(Map<String,String> map,DateFormat dateParser){  LogDataBuilder builder=new LogDataBuilder();  builder.withLevel(i18nLevelParser.parse(map.get(propertyLevel).trim()));  final String dateString=map.get(propertyDate);  try {    String message=map.getOrDefault(propertyMessage,"");    if (map.containsKey(propertyException)) {      message=message + "\n" + map.get(propertyException);    }    builder=builder.withDate(dateParser.parse(dateString)).withMessage(message).withThread(map.getOrDefault(propertyThread,"")).withLoggerName(map.getOrDefault(propertyLogger,"")).withClass(map.getOrDefault(propertyClass,"")).withMethod(map.getOrDefault(propertyMethod,"")).withLineNumber(map.getOrDefault(propertyLine,"")).withFile(map.getOrDefault(propertyFile,"")).withNote(new Note(map.getOrDefault(propertyNote,""))).withNdc(map.getOrDefault(propertyNdc,""));    final String color=map.getOrDefault(propertyMarkerColor,"");    if (isNotBlank(color)) {      builder=builder.withMarkerColors(MarkerColors.fromString(color)).withMarked(true);    }    final Map<String,String> mdc=extractMdc(map,this.propertyKeysToMdc);    builder=builder.withProperties(mdc);    return Optional.of(builder.build());  } catch (  ParseException e) {    return Optional.empty();  }}  }
class C{  private int transformToRTF(ElemTemplateElement templateParent,DTM dtmFrag) throws TransformerException {  XPathContext xctxt=m_xcontext;  ContentHandler rtfHandler=dtmFrag.getContentHandler();  int resultFragment;  SerializationHandler savedRTreeHandler=this.m_serializationHandler;  ToSAXHandler h=new ToXMLSAXHandler();  h.setContentHandler(rtfHandler);  h.setTransformer(this);  m_serializationHandler=h;  SerializationHandler rth=m_serializationHandler;  try {    rth.startDocument();    rth.flushPending();    try {      executeChildTemplates(templateParent,true);      rth.flushPending();      resultFragment=dtmFrag.getDocument();    }  finally {      rth.endDocument();    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    this.m_serializationHandler=savedRTreeHandler;  }  return resultFragment;}  }
class C{  @NotNull public static <T>Class<T> unwrap(@NotNull Class<T> type){  Class<?> result=(type == Boolean.class) ? boolean.class : (type == Byte.class) ? byte.class : (type == Character.class) ? char.class : (type == Short.class) ? short.class : (type == Integer.class) ? int.class : (type == Long.class) ? long.class : (type == Float.class) ? float.class : (type == Double.class) ? double.class : type;  @SuppressWarnings("unchecked") Class<T> casted=(Class<T>)result;  return casted;}  }
class C{  private static void stableStringSort(String[] arr,String[] src,String[] dst,int start,int end,int chId){  int length=end - start;  if (length < SIMPLE_LENGTH) {    if (src == arr) {      for (int i=start + 1; i < end; i++) {        String current=arr[i];        String prev=arr[i - 1];        if (current.compareTo(prev) < 0) {          int j=i;          do {            arr[j--]=prev;          } while (j > start && current.compareTo(prev=arr[j - 1]) < 0);          arr[j]=current;        }      }    } else {      int actualEnd=end - 1;      dst[start]=src[actualEnd--];      for (int i=start + 1; i < end; i++, actualEnd--) {        String current=src[actualEnd];        String prev;        int j=i;        while (j > start && current.compareTo(prev=dst[j - 1]) < 0) {          dst[j--]=prev;        }        dst[j]=current;      }    }    return;  }  int s;  int mid=start + length / 2;  int lo=start;  int hi=end - 1;  if (length > 40) {    s=length / 8;    lo=medChar(lo,lo + s,lo + s * 2,src,chId);    mid=medChar(mid - s,mid,mid + s,src,chId);    hi=medChar(hi,hi - s,hi - s * 2,src,chId);  }  mid=medChar(lo,mid,hi,src,chId);  int midVal=charAt(src[mid],chId);  int a, b, c;  a=b=start;  c=end - 1;  int cmp;  for (int i=start; i < end; i++) {    String el=src[i];    cmp=charAt(el,chId) - midVal;    if (cmp < 0) {      src[a]=el;      a++;    } else     if (cmp > 0) {      dst[c]=el;      c--;    } else {      dst[b]=el;      b++;    }  }  s=b - start;  if (s > 0) {    if (arr == src) {      System.arraycopy(dst,start,arr,a,s);    } else {      copySwap(dst,start,arr,a,s);    }    if (b >= end && midVal == -1) {      return;    }    stableStringSort(arr,arr,arr == dst ? src : dst,a,a + s,chId + 1);  }  s=a - start;  if (s > 0) {    stableStringSort(arr,src,dst,start,a,chId);  }  c++;  s=end - c;  if (s > 0) {    stableStringSort(arr,dst,src,c,end,chId);  }}  }
class C{  @Override public void createMemory(String database){  createMemory(database,false);}  }
class C{  public static int GetLineOfPCalAlgorithm(String moduleAsString){  final int algorithmStringLocation=moduleAsString.indexOf(PcalParams.BeginAlg);  final int fairStringLocation=moduleAsString.indexOf(PcalParams.BeginFairAlg);  if (fairStringLocation == -1 || ((algorithmStringLocation != -1) && (algorithmStringLocation < fairStringLocation))) {    return algorithmStringLocation;  }  int i=fairStringLocation + PcalParams.BeginFairAlg.length();  while (Character.isWhitespace(moduleAsString.charAt(i))) {    i++;  }  if ((i != fairStringLocation + PcalParams.BeginFairAlg.length()) && (moduleAsString.startsWith(PcalParams.BeginFairAlg2,i)) && !Character.isLetterOrDigit(moduleAsString.charAt(i + PcalParams.BeginFairAlg2.length()))) {    return fairStringLocation;  } else {    return algorithmStringLocation;  }}  }
class C{  public void askForRestart(Object population_data){  sendFinalMessage(Messages.NEED_RESTART,population_data);}  }
class C{  public void addAlarm(VAlarm alarm){  addComponent(alarm);}  }
class C{  private void attemptDrawShapesSelection(){  this.drawShapes=BooleanUtilities.valueOf(this.drawShapesCheckBox.isSelected());}  }
class C{  public Image applyMask(Object mask,int x,int y){  int[] rgb=getRGB();  byte[] maskData=((IndexedImage)mask).getImageDataByte();  int mWidth=((IndexedImage)mask).getWidth();  int mHeight=((IndexedImage)mask).getHeight();  int imgWidth=getWidth();  int aWidth=imgWidth - x;  int aHeight=getHeight() - y;  if (aWidth > mWidth) {    aWidth=mWidth;  }  if (aHeight > mHeight) {    aHeight=mHeight;  }  for (int xPos=0; xPos < aWidth; xPos++) {    for (int yPos=0; yPos < aHeight; yPos++) {      int aX=x + xPos;      int aY=y + yPos;      int imagePos=aX + aY * imgWidth;      int maskAlpha=maskData[aX + aY * mWidth] & 0xff;      maskAlpha=(maskAlpha << 24) & 0xff000000;      rgb[imagePos]=(rgb[imagePos] & 0xffffff) | maskAlpha;    }  }  return createImage(rgb,imgWidth,getHeight());}  }
class C{  public void remove(JTaskPaneGroup group){  super.remove(group);}  }
class C{  public Headers readHeaders() throws IOException {  Headers.Builder headers=new Headers.Builder();  for (String line; (line=source.readUtf8LineStrict()).length() != 0; ) {    Internal.instance.addLenient(headers,line);  }  return headers.build();}  }
class C{  public ServerPrepareResult(String sql,int statementId,ColumnInformation[] columns,ColumnInformation[] parameters,Protocol unProxiedProtocol){  this.sql=sql;  this.statementId=statementId;  this.columns=columns;  this.parameters=parameters;  this.unProxiedProtocol=unProxiedProtocol;  this.parameterTypeHeader=new MariaDbType[parameters.length];}  }
class C{  public static void openArtistProfile(final Activity context,final String artistName,final long[] songs){  if (artistName == null || artistName.isEmpty()) {    return;  }  final Bundle bundle=new Bundle();  bundle.putLong(Config.ID,MusicUtils.getIdForArtist(context,artistName));  bundle.putString(Config.MIME_TYPE,MediaStore.Audio.Artists.CONTENT_TYPE);  bundle.putString(Config.ARTIST_NAME,artistName);  if (songs != null && songs.length > 0) {    bundle.putLongArray(Config.TRACKS,songs);  }  final Intent intent=new Intent(context,ProfileActivity.class);  intent.putExtras(bundle);  context.startActivity(intent);}  }
class C{  public void test_ticket_1007_number2() throws Exception {  new TestHelper("ticket-1007-number2","ticket-1007-number2.rq","ticket-1007-custom.trig","ticket-1007-number-double.srx",false).runTest();}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public boolean mousePressed(MouseEvent e){  if (DEBUG) {    Debug.output("SMMI:mousePressed()");  }  return setClickInterestFromMouseEvent(e);}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  public GVTFontFace(String familyName){  this(familyName,1000,SVG_FONT_FACE_FONT_WEIGHT_DEFAULT_VALUE,SVG_FONT_FACE_FONT_STYLE_DEFAULT_VALUE,SVG_FONT_FACE_FONT_VARIANT_DEFAULT_VALUE,SVG_FONT_FACE_FONT_STRETCH_DEFAULT_VALUE,0,SVG_FONT_FACE_PANOSE_1_DEFAULT_VALUE,800,200,300,50,-75,50,800,50);}  }
class C{  public boolean isMenuShown(){  return fMenuIsShown;}  }
class C{  public static int computeKeyDigest(SignalEvent event){  return computeKeyDigest(ModifierKeys.computeModifiers(event),KeyCodeMap.getKeyFromEvent(event));}  }
class C{  public Vector<Integer> findCentralTendencies(double[] predProbs){  int centralTValue=0;  int currentValue=0;  Vector<Integer> centralTClasses;  centralTClasses=new Vector<Integer>();  for (int i=0; i < predProbs.length; i++) {    currentValue=(int)predProbs[i];    if (currentValue > centralTValue) {      centralTClasses.clear();      centralTClasses.addElement(new Integer(i));      centralTValue=currentValue;    } else     if (currentValue != 0 && currentValue == centralTValue) {      centralTClasses.addElement(new Integer(i));    }  }  if (centralTValue != 0) {    return centralTClasses;  } else {    return null;  }}  }
class C{  public MetaTable(Schema schema,int id,int type){  super(schema,id,null,true,true);  this.type=type;  Column[] cols;  String indexColumnName=null;switch (type) {case TABLES:    setObjectName("TABLES");  cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","TABLE_TYPE","STORAGE_TYPE","SQL","REMARKS","LAST_MODIFICATION BIGINT","ID INT","TYPE_NAME","TABLE_CLASS","ROW_COUNT_ESTIMATE BIGINT");indexColumnName="TABLE_NAME";break;case COLUMNS:setObjectName("COLUMNS");cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","COLUMN_NAME","ORDINAL_POSITION INT","COLUMN_DEFAULT","IS_NULLABLE","DATA_TYPE INT","CHARACTER_MAXIMUM_LENGTH INT","CHARACTER_OCTET_LENGTH INT","NUMERIC_PRECISION INT","NUMERIC_PRECISION_RADIX INT","NUMERIC_SCALE INT","CHARACTER_SET_NAME","COLLATION_NAME","TYPE_NAME","NULLABLE INT","IS_COMPUTED BIT","SELECTIVITY INT","CHECK_CONSTRAINT","SEQUENCE_NAME","REMARKS","SOURCE_DATA_TYPE SMALLINT");indexColumnName="TABLE_NAME";break;case INDEXES:setObjectName("INDEXES");cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","NON_UNIQUE BIT","INDEX_NAME","ORDINAL_POSITION SMALLINT","COLUMN_NAME","CARDINALITY INT","PRIMARY_KEY BIT","INDEX_TYPE_NAME","IS_GENERATED BIT","INDEX_TYPE SMALLINT","ASC_OR_DESC","PAGES INT","FILTER_CONDITION","REMARKS","SQL","ID INT","SORT_TYPE INT","CONSTRAINT_NAME","INDEX_CLASS");indexColumnName="TABLE_NAME";break;case TABLE_TYPES:setObjectName("TABLE_TYPES");cols=createColumns("TYPE");break;case TYPE_INFO:setObjectName("TYPE_INFO");cols=createColumns("TYPE_NAME","DATA_TYPE INT","PRECISION INT","PREFIX","SUFFIX","PARAMS","AUTO_INCREMENT BIT","MINIMUM_SCALE SMALLINT","MAXIMUM_SCALE SMALLINT","RADIX INT","POS INT","CASE_SENSITIVE BIT","NULLABLE SMALLINT","SEARCHABLE SMALLINT");break;case CATALOGS:setObjectName("CATALOGS");cols=createColumns("CATALOG_NAME");break;case SETTINGS:setObjectName("SETTINGS");cols=createColumns("NAME","VALUE");break;case HELP:setObjectName("HELP");cols=createColumns("ID INT","SECTION","TOPIC","SYNTAX","TEXT");break;case SEQUENCES:setObjectName("SEQUENCES");cols=createColumns("SEQUENCE_CATALOG","SEQUENCE_SCHEMA","SEQUENCE_NAME","CURRENT_VALUE BIGINT","INCREMENT BIGINT","IS_GENERATED BIT","REMARKS","CACHE BIGINT","MIN_VALUE BIGINT","MAX_VALUE BIGINT","IS_CYCLE BIT","ID INT");break;case USERS:setObjectName("USERS");cols=createColumns("NAME","ADMIN","REMARKS","ID INT");break;case ROLES:setObjectName("ROLES");cols=createColumns("NAME","REMARKS","ID INT");break;case RIGHTS:setObjectName("RIGHTS");cols=createColumns("GRANTEE","GRANTEETYPE","GRANTEDROLE","RIGHTS","TABLE_SCHEMA","TABLE_NAME","ID INT");indexColumnName="TABLE_NAME";break;case FUNCTION_ALIASES:setObjectName("FUNCTION_ALIASES");cols=createColumns("ALIAS_CATALOG","ALIAS_SCHEMA","ALIAS_NAME","JAVA_CLASS","JAVA_METHOD","DATA_TYPE INT","TYPE_NAME","COLUMN_COUNT INT","RETURNS_RESULT SMALLINT","REMARKS","ID INT","SOURCE");break;case FUNCTION_COLUMNS:setObjectName("FUNCTION_COLUMNS");cols=createColumns("ALIAS_CATALOG","ALIAS_SCHEMA","ALIAS_NAME","JAVA_CLASS","JAVA_METHOD","COLUMN_COUNT INT","POS INT","COLUMN_NAME","DATA_TYPE INT","TYPE_NAME","PRECISION INT","SCALE SMALLINT","RADIX SMALLINT","NULLABLE SMALLINT","COLUMN_TYPE SMALLINT","REMARKS","COLUMN_DEFAULT");break;case SCHEMATA:setObjectName("SCHEMATA");cols=createColumns("CATALOG_NAME","SCHEMA_NAME","SCHEMA_OWNER","DEFAULT_CHARACTER_SET_NAME","DEFAULT_COLLATION_NAME","IS_DEFAULT BIT","REMARKS","ID INT");break;case TABLE_PRIVILEGES:setObjectName("TABLE_PRIVILEGES");cols=createColumns("GRANTOR","GRANTEE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","PRIVILEGE_TYPE","IS_GRANTABLE");indexColumnName="TABLE_NAME";break;case COLUMN_PRIVILEGES:setObjectName("COLUMN_PRIVILEGES");cols=createColumns("GRANTOR","GRANTEE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","COLUMN_NAME","PRIVILEGE_TYPE","IS_GRANTABLE");indexColumnName="TABLE_NAME";break;case COLLATIONS:setObjectName("COLLATIONS");cols=createColumns("NAME","KEY");break;case VIEWS:setObjectName("VIEWS");cols=createColumns("TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","VIEW_DEFINITION","CHECK_OPTION","IS_UPDATABLE","STATUS","REMARKS","ID INT");indexColumnName="TABLE_NAME";break;case IN_DOUBT:setObjectName("IN_DOUBT");cols=createColumns("TRANSACTION","STATE");break;case CROSS_REFERENCES:setObjectName("CROSS_REFERENCES");cols=createColumns("PKTABLE_CATALOG","PKTABLE_SCHEMA","PKTABLE_NAME","PKCOLUMN_NAME","FKTABLE_CATALOG","FKTABLE_SCHEMA","FKTABLE_NAME","FKCOLUMN_NAME","ORDINAL_POSITION SMALLINT","UPDATE_RULE SMALLINT","DELETE_RULE SMALLINT","FK_NAME","PK_NAME","DEFERRABILITY SMALLINT");indexColumnName="PKTABLE_NAME";break;case CONSTRAINTS:setObjectName("CONSTRAINTS");cols=createColumns("CONSTRAINT_CATALOG","CONSTRAINT_SCHEMA","CONSTRAINT_NAME","CONSTRAINT_TYPE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","UNIQUE_INDEX_NAME","CHECK_EXPRESSION","COLUMN_LIST","REMARKS","SQL","ID INT");indexColumnName="TABLE_NAME";break;case CONSTANTS:setObjectName("CONSTANTS");cols=createColumns("CONSTANT_CATALOG","CONSTANT_SCHEMA","CONSTANT_NAME","DATA_TYPE INT","REMARKS","SQL","ID INT");break;case DOMAINS:setObjectName("DOMAINS");cols=createColumns("DOMAIN_CATALOG","DOMAIN_SCHEMA","DOMAIN_NAME","COLUMN_DEFAULT","IS_NULLABLE","DATA_TYPE INT","PRECISION INT","SCALE INT","TYPE_NAME","SELECTIVITY INT","CHECK_CONSTRAINT","REMARKS","SQL","ID INT");break;case TRIGGERS:setObjectName("TRIGGERS");cols=createColumns("TRIGGER_CATALOG","TRIGGER_SCHEMA","TRIGGER_NAME","TRIGGER_TYPE","TABLE_CATALOG","TABLE_SCHEMA","TABLE_NAME","BEFORE BIT","JAVA_CLASS","QUEUE_SIZE INT","NO_WAIT BIT","REMARKS","SQL","ID INT");break;case SESSIONS:{setObjectName("SESSIONS");cols=createColumns("ID INT","USER_NAME","SESSION_START","STATEMENT","STATEMENT_START","CONTAINS_UNCOMMITTED");break;}case LOCKS:{setObjectName("LOCKS");cols=createColumns("TABLE_SCHEMA","TABLE_NAME","SESSION_ID INT","LOCK_TYPE");break;}case SESSION_STATE:{setObjectName("SESSION_STATE");cols=createColumns("KEY","SQL");break;}case QUERY_STATISTICS:{setObjectName("QUERY_STATISTICS");cols=createColumns("SQL_STATEMENT","EXECUTION_COUNT INT","MIN_EXECUTION_TIME DOUBLE","MAX_EXECUTION_TIME DOUBLE","CUMULATIVE_EXECUTION_TIME DOUBLE","AVERAGE_EXECUTION_TIME DOUBLE","STD_DEV_EXECUTION_TIME DOUBLE","MIN_ROW_COUNT INT","MAX_ROW_COUNT INT","CUMULATIVE_ROW_COUNT LONG","AVERAGE_ROW_COUNT DOUBLE","STD_DEV_ROW_COUNT DOUBLE");break;}default :throw DbException.throwInternalError("type=" + type);}setColumns(cols);if (indexColumnName == null) {indexColumn=-1;metaIndex=null;} else {indexColumn=getColumn(indexColumnName).getColumnId();IndexColumn[] indexCols=IndexColumn.wrap(new Column[]{cols[indexColumn]});metaIndex=new MetaIndex(this,indexCols,false);}}  }
class C{  private static boolean isMethod(ExecutableElement questioned,ExecutableElement method,ProcessingEnvironment env){  return (questioned.equals(method) || env.getElementUtils().overrides(questioned,method,(TypeElement)questioned.getEnclosingElement()));}  }
class C{  private static boolean createFields(GridTabVO mTabVO){  mTabVO.Fields=new ArrayList<GridFieldVO>();  String sql=GridFieldVO.getSQL(mTabVO.ctx);  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,mTabVO.AD_Tab_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      GridFieldVO voF=GridFieldVO.create(mTabVO.ctx,mTabVO.WindowNo,mTabVO.TabNo,mTabVO.AD_Window_ID,mTabVO.AD_Tab_ID,mTabVO.IsReadOnly,rs);      if (voF != null)       mTabVO.Fields.add(voF);    }    rs.close();    pstmt.close();  } catch (  Exception e) {    CLogger.get().log(Level.SEVERE,"",e);    return false;  }  mTabVO.initFields=true;  return mTabVO.Fields.size() != 0;}  }
class C{  @SuppressWarnings("unchecked") public Frame(final int nLocals,final int nStack){  this.values=(V[])new Value[nLocals + nStack];  this.locals=nLocals;}  }
class C{  public PdfPTable createBeforeNegotiationTable(final TenderResponse tenderResponse) throws DocumentException, ApplicationException {  final PdfPTable beforeNegotiationTable=new PdfPTable(2);  beforeNegotiationTable.getDefaultCell().setBorderWidth(1);  beforeNegotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);  beforeNegotiationTable.getDefaultCell().setColspan(2);  beforeNegotiationTable.addCell(pdfLabel.get("tenderNegotiationpdf.asPerTender"));  beforeNegotiationTable.getDefaultCell().setColspan(1);  beforeNegotiationTable.addCell(pdfLabel.get(TENDERNEGOTIATION_RATE));  beforeNegotiationTable.addCell(pdfLabel.get(TENDERNEGOTIATION_AMOUNT));  return beforeNegotiationTable;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void checkSameHost(Host host,ExecutionSystem es){  Host esHost=Host.fromUri(es.uri());  checkArgument(esHost.equals(host),"execution system host (%s) must equal %s",esHost,host);}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  private void createRealmComponent(Composite container){  Group relGrp=new Group(container,SWT.SHADOW_ETCHED_IN);  GridLayout groupGridLayout=new GridLayout();  GridData groupGridData=new GridData();  groupGridData.grabExcessHorizontalSpace=true;  groupGridData.horizontalIndent=10;  groupGridData.verticalIndent=10;  groupGridData.horizontalAlignment=SWT.FILL;  groupGridLayout.numColumns=2;  groupGridLayout.verticalSpacing=10;  relGrp.setText(Messages.acsRelGrpTxt);  relGrp.setLayout(groupGridLayout);  relGrp.setLayoutData(groupGridData);  relLbl=new Label(relGrp,SWT.LEFT);  groupGridData=new GridData();  groupGridData.grabExcessHorizontalSpace=true;  groupGridData.horizontalAlignment=SWT.FILL;  groupGridLayout.numColumns=2;  relLbl.setText(Messages.acsRelLbl);  relLbl.setLayoutData(groupGridData);  relTxt=new Text(relGrp,SWT.LEFT | SWT.BORDER);  groupGridData=new GridData();  groupGridData.horizontalSpan=2;  groupGridData.widthHint=470;  relTxt.setLayoutData(groupGridData);}  }
class C{  private void clearInstrumentation(){  metrics.set(METRIC_NODES_EXPANDED,0);  metrics.set(METRIC_PATH_COST,0);}  }
class C{  public void reset(){  internal.reset();}  }
class C{  public AccessException(String s,Exception ex){  super(s,ex);}  }
class C{  protected void configureExporter(AExporter exporter){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.256 -0500",hash_original_method="543B497D09485FEEC00989CA21E8A572",hash_generated_method="B72D4F9A3995594F75166AE308C9AC75") public void addPath(Path src){  isSimplePath=false;  addTaint(src.getTaint());}  }
class C{  public void insert(LogLine object,int index){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.add(index,object);      if (mNotifyOnChange)       notifyDataSetChanged();    }  } else {    mObjects.add(index,object);    if (mNotifyOnChange)     notifyDataSetChanged();  }}  }
class C{  public StyleSet(StyleContext sc,Style style){  this.sc=sc;  this.style=sc.new NamedStyle();  this.style.addAttributes(style);}  }
class C{  public void skipChars(final int n){  if (n < 0) {    throw new IllegalArgumentException("Amount of chars to skip must be non neagitve: " + n);  }  if (myPosition + n >= myText.length()) {    throw new IllegalArgumentException("Skipping beyond end of the text (" + myPosition + " + "+ n+ " >= "+ myText.length()+ ")");  }  myPosition+=n;}  }
class C{  public static int floatToBytes(float f,byte[] bytes,int off){  return intToBytes(Float.floatToIntBits(f),bytes,off);}  }
class C{  private void compress(BasicBlock block){  if (getAncestor(getAncestor(block)) != null) {    compress(getAncestor(block));    LTDominatorInfo blockInfo=LTDominatorInfo.getInfo(block,ir);    if (getSemi(getLabel(getAncestor(block))) < getSemi(getLabel(block))) {      blockInfo.setLabel(getLabel(getAncestor(block)));    }    blockInfo.setAncestor(getAncestor(getAncestor(block)));  }}  }
class C{  @Override public boolean isModified(){  return txtInput.isTextModified();}  }
class C{  public static void checkAndCreateCarbonDataLocation(String carbonStorePath,String dbName,String tableName,int partitionCount,String segmentId){  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(dbName + CarbonCommonConstants.UNDERSCORE + tableName);  CarbonTableIdentifier carbonTableIdentifier=carbonTable.getCarbonTableIdentifier();  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(carbonStorePath,carbonTableIdentifier);  for (int i=0; i < partitionCount; i++) {    String carbonDataDirectoryPath=carbonTablePath.getCarbonDataDirectoryPath(String.valueOf(i),segmentId);    CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);  }}  }
class C{  public int maxSize(){  return maxElements;}  }
class C{  @Override public void relocate(){  int w=380, h=65;  int x=(this.getWidth() - w) / 2, y=(this.getHeight() - h) / 2;  fullRevisionLabel.setLocation(x,y);  fullRevisionField.setLocation(x + 280,y);  minimumCommonSequenceLabel.setLocation(x,y + 40);  minimumCommonSequenceField.setLocation(x + 280,y + 40);}  }
class C{  private static int min(int a,int b){  return a > b ? b : a;}  }
class C{  public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(URI.create(url).normalize()),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public boolean isMasterCopy(){  return masterCopy;}  }
class C{  private void mapAbsoluteToRelative(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=(srcPoints[i * 2 + 0] - mImageBounds.left) / mImageBounds.width();    destPoints[i * 2 + 1]=(srcPoints[i * 2 + 1] - mImageBounds.top) / mImageBounds.height();  }}  }
class C{  public big removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public CO(){}  }
class C{  public final Vec4D rotateY(float theta){  final float co=(float)Math.cos(theta);  final float si=(float)Math.sin(theta);  final float xx=co * x - si * z;  z=si * x + co * z;  x=xx;  return this;}  }
class C{  @Override public void registerDefaultResourceProvider(ResourceProvider provider){  provider.setResources(this);  this.defaultResource=provider;}  }
class C{  protected GenericElement(){}  }
class C{  public static int[] readInts(){  return new In().readAllInts();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);{    boolean success=false;    try {      employeeNode.setPrefix("emp::");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public double weight(){  return weight;}  }
class C{  public StrTokenizer(char[] input,String delim){  this(input);  setDelimiterString(delim);}  }
class C{  public void addElement(String s){  ((ListElement)e).addElement(new TableDataElement(s));}  }
class C{  public void layoutDiagram(AbstractGraphicalEditPart diagram){  partToNodesMap=new IdentityHashMap<>();  graph=new DirectedGraph();  graph.setDirection(PositionConstants.EAST);  addDiagramNodes(diagram);  if (graph.nodes.size() > 0) {    addDiagramEdges(diagram);    try {      new NodeJoiningDirectedGraphLayout(diagram).visit(graph);    } catch (    Exception e) {      log.error("Diagram layout error",e);    }    applyDiagramResults(diagram);  }}  }
class C{  public void removeLayerStatusListener(LayerStatusListener aLayerStatusListener){  lsListeners.remove(aLayerStatusListener);}  }
class C{  public final ADFContext top(int n){  if (onStack - n <= 0)   return null; else   return stack[onStack - n - 1];}  }
class C{  public Matrix3d(double[] v){  this.m00=v[0];  this.m01=v[1];  this.m02=v[2];  this.m10=v[3];  this.m11=v[4];  this.m12=v[5];  this.m20=v[6];  this.m21=v[7];  this.m22=v[8];}  }
class C{  private List<Datum> sampleNbestList(int sourceId,Sequence<IString> source,SentenceLevelMetric<IString,String> scoreMetric,List<RichTranslation<IString,String>> translations,List<Sequence<IString>> references){  int[] sourceIds=new int[1];  sourceIds[0]=sourceId;  List<Sequence<IString>> sources=new ArrayList<>(1);  sources.add(source);  List<List<RichTranslation<IString,String>>> translationList=new ArrayList<List<RichTranslation<IString,String>>>(1);  translationList.add(translations);  List<List<Sequence<IString>>> referenceList=new ArrayList<List<Sequence<IString>>>(1);  referenceList.add(references);  return sampleNbestLists(sourceIds,sources,scoreMetric,translationList,referenceList);}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(FusionTablesSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=fusiontables " + "into fusiontables-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(FusiontablesScopes.FUSIONTABLES)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public static boolean conditionalRead(PsiBuilder builder,TokenSet tokens){  if (tokens.contains(builder.getTokenType())) {    builder.advanceLexer();    return true;  }  return false;}  }
class C{  public void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {  if (!RunJettyRunLaunchConfigurationUtil.validation(configuration)) {    throw new CoreException(new Status(IStatus.ERROR,Plugin.PLUGIN_ID,01," Invalid run configuration , please check the configuration ",null));  }  addSourcesLookupProjectsFromMavenIfExist(configuration);  if (monitor == null) {    monitor=new NullProgressMonitor();  }  monitor.beginTask(MessageFormat.format("{0}...",configuration.getName()),3);  if (monitor.isCanceled())   return;  try {    monitor.subTask("verifying installation");    ExecutionArguments execArgs=new ExecutionArguments(getVMArguments(configuration),getProgramArguments(configuration));    VMRunnerConfiguration runConfig=new VMRunnerConfiguration(Plugin.BOOTSTRAP_CLASS_NAME,getJettyClasspath(configuration));    runConfig.setProgramArguments(execArgs.getProgramArgumentsArray());    runConfig.setEnvironment(getEnvironment(configuration));    boolean debug=ILaunchManager.DEBUG_MODE.equals(mode);    runConfig.setVMArguments(getRuntimeArguments(configuration,execArgs.getVMArgumentsArray(),debug));    runConfig.setWorkingDirectory(getWorkingDirectoryAbsolutePath(configuration));    runConfig.setVMSpecificAttributesMap(getVMSpecificAttributesMap(configuration));    runConfig.setBootClassPath(getBootpath(configuration));    if (monitor.isCanceled())     return;    prepareStopInMain(configuration);    monitor.worked(1);    monitor.subTask("Creating source locator");    setDefaultSourceLocator(launch,configuration);    launch.getSourceLocator();    monitor.worked(1);synchronized (configuration) {      terminateOldRJRLauncher(configuration,launch);      getVMRunner(configuration,mode).run(runConfig,launch,monitor);      registerRJRLauncher(configuration,launch);    }    if (monitor.isCanceled())     return;  }  finally {    monitor.done();  }}  }
class C{  public void loadArgArray(){  push(argumentTypes.length);  newArray(OBJECT_TYPE);  for (int i=0; i < argumentTypes.length; i++) {    dup();    push(i);    loadArg(i);    box(argumentTypes[i]);    arrayStore(OBJECT_TYPE);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  protected void processHeaders(URLConnection cn){  dumpHeaders(cn);  String br=cn.getHeaderField("icy-br");  if (br != null) {    try {      declaredBitRate=Integer.parseInt(br);      if (declaredBitRate > 7) {        Log.d(LOG,"Declared bitrate is " + declaredBitRate + " kb/s");      } else {        Log.w(LOG,"Declared bitrate is too low - ignoring: " + declaredBitRate + " kb/s");        declaredBitRate=-1;      }    } catch (    Exception e) {      Log.w(LOG,"Cannot parse declared bit-rate '" + br + "'");    }  }  if (playerCallback != null) {    for (    java.util.Map.Entry<String,java.util.List<String>> me : cn.getHeaderFields().entrySet()) {      for (      String s : me.getValue()) {        playerCallback.playerMetadata(me.getKey(),s);      }    }  }}  }
class C{  public boolean isDirectoryHierarchySupported(){  return directoryHierarchySupported;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void pushOntoLogger(Logger logger){  logger.setAdditivity(additive);  logger.removeAllAppenders();  for (  Appender appender : appenders) {    logger.addAppender(appender);  }}  }
class C{  public void ruleR3(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    for (    Node D : intoBCircles) {      if (intoBArrows.size() < 2) {        continue;      }      ChoiceGenerator gen=new ChoiceGenerator(intoBArrows.size(),2);      int[] choice;      while ((choice=gen.next()) != null) {        Node A=intoBArrows.get(choice[0]);        Node C=intoBArrows.get(choice[1]);        if (graph.isAdjacentTo(A,C)) {          continue;        }        if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {          continue;        }        if (!sepsets.isNoncollider(A,D,C)) {          continue;        }        if (graph.getEndpoint(A,D) != Endpoint.CIRCLE) {          continue;        }        if (graph.getEndpoint(C,D) != Endpoint.CIRCLE) {          continue;        }        if (!isArrowpointAllowed(D,B,graph)) {          continue;        }        graph.setEndpoint(D,B,Endpoint.ARROW);        if (verbose) {          logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Double triangle",graph.getEdge(D,B)));          out.println(SearchLogUtils.edgeOrientedMsg("Double triangle",graph.getEdge(D,B)));        }        changeFlag=true;      }    }  }}  }
class C{  public MethodParametersAttribute(ConstPool cp,String[] names,int[] flags){  super(cp,tag);  byte[] data=new byte[names.length * 4 + 1];  data[0]=(byte)names.length;  for (int i=0; i < names.length; i++) {    ByteArray.write16bit(cp.addUtf8Info(names[i]),data,i * 4 + 1);    ByteArray.write16bit(flags[i],data,i * 4 + 3);  }  set(data);}  }
class C{  private void validateUnManagedVolumeProperties(UnManagedVolume unManagedVolume,VirtualArray virtualArray,VirtualPool virtualPool,Project project){  String type=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_PERSONALITY.toString(),unManagedVolume.getVolumeInformation());  _logger.info("Type found: " + type);  if ((Volume.PersonalityTypes.SOURCE.toString().equalsIgnoreCase(type)) && (virtualPool.getProtectionVarraySettings() == null)) {    throw IngestionException.exceptions.invalidSourceRPVirtualPool(unManagedVolume.getLabel(),virtualPool.getLabel());  }  if (VolumeIngestionUtil.checkUnManagedVolumeHasReplicas(unManagedVolume)) {    StringSet mirrors=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.MIRRORS.toString(),unManagedVolume.getVolumeInformation());    if (mirrors != null && !mirrors.isEmpty()) {      String mirrorsString=Joiner.on(", ").join(mirrors);      _logger.info("Unmanaged RP volume {} has mirrors: {} associated which is not supported",unManagedVolume.getLabel(),mirrorsString);      throw IngestionException.exceptions.rpUnManagedVolumeCannotHaveMirrors(unManagedVolume.getLabel(),mirrorsString);    }    StringSet snapshots=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.SNAPSHOTS.toString(),unManagedVolume.getVolumeInformation());    if (snapshots != null && !snapshots.isEmpty()) {      int numOfSnaps=snapshots.size();      if (VirtualPool.vPoolSpecifiesSnapshots(virtualPool)) {        if (numOfSnaps > virtualPool.getMaxNativeSnapshots()) {          String reason="volume has more snapshots (" + numOfSnaps + ") than vpool allows";          _logger.error(reason);          throw IngestionException.exceptions.validationException(reason);        }      } else {        String reason="vpool does not allow snapshots, but volume has " + numOfSnaps + " snapshot(s)";        _logger.error(reason);        throw IngestionException.exceptions.validationException(reason);      }    }  }}  }
class C{  public void save(PropertyMaps maps) throws IOException {  RowIdImpl rowId=maps._rowId;  if (rowId == null) {    throw new IllegalStateException("PropertyMaps cannot be saved without a row id");  }  byte[] mapsBytes=write(maps);  _propCol.getTable().updateValue(_propCol,rowId,mapsBytes);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.267 -0500",hash_original_method="82D33A5986E24A5B49AA621812B7822B",hash_generated_method="6ACECDECF32D7EA919CE921D804655ED") public String encode(){  return uriString;}  }
class C{  public static void sort(long[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public boolean handleRequest(MessageContext msgct){  if (msgct instanceof SOAPMessageContext) {    SOAPMessageContext smsgct=(SOAPMessageContext)msgct;    try {      SOAPMessage msg=smsgct.getMessage();      SOAPEnvelope envelope=msg.getSOAPPart().getEnvelope();      SOAPHeader header=msg.getSOAPHeader();      if (header == null)       header=envelope.addHeader();      SOAPHeaderElement accessElement=header.addHeaderElement(envelope.createName("Access","ns0","http://www.ipd.uni-karlsruhe.de/jplag/types"));      SOAPElement usernameelem=accessElement.addChildElement("username");      usernameelem.addTextNode(username);      SOAPElement passwordelem=accessElement.addChildElement("password");      passwordelem.addTextNode(password);      SOAPElement compatelem=accessElement.addChildElement("compatLevel");      compatelem.addTextNode(compatibilityLevel + "");    } catch (    SOAPException x) {      System.out.println("Unable to create access SOAP header!");      x.printStackTrace();    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.274 -0500",hash_original_method="029ED340525EAD4C240C408219CCC448",hash_generated_method="232E6767C9A21A7EAC5FD15D9DEB8F1E") public boolean op(Rect rect,Region region,Op op){  addTaintLocal(rect.getTaintInt() + region.getTaintInt() + op.getTaintInt());  return getTaintBoolean();}  }
class C{  private static boolean compareArray(final String value,final int comparator,final Object[] array){  for (int i=0; i < array.length; i++) {    final Object obj=array[i];    if (obj instanceof String) {      if (compareString(value,comparator,(String)obj)) {        return true;      }    } else     if (obj instanceof Number) {      if (compareNumber(value.trim(),comparator,(Number)obj)) {        return true;      }    } else {      if (compareReflective(value,comparator,obj)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isToplevel(){  EObject _eContainer=this.eContainer();  if ((_eContainer instanceof ExportDeclaration)) {    EObject _eContainer_1=this.eContainer();    EObject _eContainer_2=_eContainer_1.eContainer();    return (_eContainer_2 instanceof Script);  }  EObject _eContainer_3=this.eContainer();  return (_eContainer_3 instanceof Script);}  }
class C{  public void importCopy(URI vplexSystemURI,List<VolumeDescriptor> volumeDescriptors,URI projectURI,URI tenantURI,String stepId) throws ControllerException {  _log.info("Executing import step for full copy.");  List<VolumeDescriptor> importVolumeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{Type.VPLEX_IMPORT_VOLUME},new VolumeDescriptor.Type[]{});  VolumeDescriptor importVolumeDescriptor=importVolumeDescriptors.get(0);  Volume importVolume=getDataObject(Volume.class,importVolumeDescriptor.getVolumeURI(),_dbClient);  WorkflowStepCompleter.stepExecuting(stepId);  importVolume(vplexSystemURI,volumeDescriptors,projectURI,tenantURI,importVolume.getVirtualPool(),importVolume.getLabel(),null,Boolean.FALSE,stepId);  _log.info("Created and started sub workflow to import the copy");}  }
class C{  public SamlTokenImpl(Element tokenRoot,JAXBContext jaxbContext,Boolean allowDelegateInNonUpnFormat) throws InvalidTokenException {  this("Element",createStandaloneCopy(tokenRoot),jaxbContext,allowDelegateInNonUpnFormat);}  }
class C{  private Transform matchLanguage(Class type) throws Exception {  if (type == Boolean.class) {    return new BooleanTransform();  }  if (type == Integer.class) {    return new IntegerTransform();  }  if (type == Long.class) {    return new LongTransform();  }  if (type == Double.class) {    return new DoubleTransform();  }  if (type == Float.class) {    return new FloatTransform();  }  if (type == Short.class) {    return new ShortTransform();  }  if (type == Byte.class) {    return new ByteTransform();  }  if (type == Character.class) {    return new CharacterTransform();  }  if (type == String.class) {    return new StringTransform();  }  if (type == Class.class) {    return new ClassTransform();  }  return null;}  }
class C{  public void checkProgress(Object arg){  if (!(arg instanceof ImportItem)) {    return;  }  ImportItem item=(ImportItem)arg;  if (!item.getProgress().equals(running.get(item))) {    fireTableCellUpdated(list.indexOf(item),PROGRESS);    running.put(item,item.getProgress());  }  if (item.isComplete()) {    running.remove(item);    item.getProgressObserver().deleteObserver(this);  } else {  }  if (running.isEmpty()) {    timer.stop();  }}  }
class C{  @Override public int indexOf(Object o){  return 0;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (!isEnabled)   return true;switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    icon.animate().scaleX(0.7f).scaleY(0.7f).setDuration(150).setInterpolator(DECCELERATE_INTERPOLATOR);  setPressed(true);break;case MotionEvent.ACTION_MOVE:float x=event.getX();float y=event.getY();boolean isInside=(x > 0 && x < getWidth() && y > 0 && y < getHeight());if (isPressed() != isInside) {setPressed(isInside);}break;case MotionEvent.ACTION_UP:icon.animate().scaleX(1).scaleY(1).setInterpolator(DECCELERATE_INTERPOLATOR);if (isPressed()) {performClick();setPressed(false);}break;}return true;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput cdi=getCapDevInput(stack);  return (cdi == null) ? null : cdi.getCaptureDevice().toString();}  }
class C{  public Period minusYears(long yearsToSubtract){  return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract));}  }
class C{  public static boolean isHardwareAvailable(){  return Util.getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA);}  }
class C{  @Override public void restoreSingleVolumeSnapshot(StorageSystem storage,URI volume,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    BlockSnapshot from=_dbClient.queryObject(BlockSnapshot.class,snapshot);    Volume to=_dbClient.queryObject(Volume.class,volume);    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,from);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      _log.info("Volume {} is not thinly provisioned, will attempt restore",to.getLabel());      _helper.callModifyReplica(storage,_helper.getRestoreFromSnapshotInputArguments(syncObjectPath));      taskCompleter.ready(_dbClient);    } else {      ServiceError error=DeviceControllerErrors.smis.unableToFindSynchPath(storage.getLabel());      taskCompleter.error(_dbClient,error);    }  } catch (  WBEMException e) {    String message=String.format("Error encountered when trying to restore from snapshot %s on array %s",snapshot.toString(),storage.getLabel());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to restore from snapshot %s on array %s",snapshot.toString(),storage.getLabel());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("restoreSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public TechneModelProvider(String domain,String name){  super(domain,name);}  }
class C{  private void seekTo(Location l) throws IOException {  if (l.compareTo(beginLocation) < 0) {    throw new IllegalArgumentException("Attempt to seek before the begin location.");  }  if (l.compareTo(endLocation) > 0) {    throw new IllegalArgumentException("Attempt to seek after the end location.");  }  if (l.compareTo(endLocation) == 0) {    parkCursorAtEnd();    return;  }  if (l.getBlockIndex() != currentLocation.getBlockIndex()) {    initBlock(l.getBlockIndex());  } else {    if (valueChecked) {      inBlockAdvance(1);    }    if (l.getRecordIndex() < currentLocation.getRecordIndex()) {      initBlock(l.getBlockIndex());    }  }  inBlockAdvance(l.getRecordIndex() - currentLocation.getRecordIndex());  return;}  }
class C{  public static String buildSdp(String ipAddress,boolean richcall,RcsSettings rcsSettings){  String sdp=null;  if (richcall) {    boolean video=rcsSettings.isVideoSharingSupported() && NetworkUtils.getNetworkAccessType() >= NetworkUtils.NETWORK_ACCESS_3G;    boolean image=rcsSettings.isImageSharingSupported();    boolean geoloc=rcsSettings.isGeoLocationPushSupported();    if (video | image) {      String mimeTypes=null;      String protocol=null;      String selector=null;      long maxSize=0;      String media=null;      if (video) {        Vector<VideoFormat> videoFormats=MediaRegistry.getSupportedVideoFormats();        StringBuilder videoSharingConfig=new StringBuilder();        for (        VideoFormat videoFormat : videoFormats) {          videoSharingConfig.append("m=video 0 RTP/AVP ").append(videoFormat.getPayload()).append(SipUtils.CRLF);          videoSharingConfig.append("a=rtpmap:").append(videoFormat.getPayload()).append(" ").append(videoFormat.getCodec()).append(SipUtils.CRLF);        }        media=videoSharingConfig.toString();      }      if (image || geoloc) {        StringBuilder supportedTransferFormats=new StringBuilder();        Set<String> imageMimeTypes=MimeManager.getInstance().getSupportedImageMimeTypes();        for (        String imageMimeType : imageMimeTypes) {          supportedTransferFormats.append(imageMimeType).append(" ");        }        if (geoloc) {          supportedTransferFormats.append(GeolocContent.ENCODING);        }        mimeTypes=supportedTransferFormats.toString().trim();        protocol=SdpUtils.MSRP_PROTOCOL;        selector="";        maxSize=ImageTransferSession.getMaxImageSharingSize(rcsSettings);      }      sdp=SdpUtils.buildCapabilitySDP(ipAddress,protocol,mimeTypes,selector,media,maxSize);    }  }  return sdp;}  }
class C{  private static int toPx(@NonNull final DisplayMetrics metrics,float dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,metrics);}  }
class C{  public Object value(InternalContextAdapter context){  if (interpolate) {    try {      StringWriter writer=new StringWriter();      nodeTree.render(context,writer);      String ret=writer.toString();      return ret;    } catch (    Exception e) {      rsvc.error("Error in interpolating string literal : " + e);    }  }  return image;}  }
class C{  @Override public void emote(EmotionalState state,Network memory){  getBot().log(this,"Emote",Bot.FINE,state);  Vertex avatar=memory.createVertex(Primitive.AVATAR);  Collection<Relationship> images=avatar.getRelationships(state.primitive());  Vertex image=null;  if (images != null) {    image=Utils.random(images).getTarget();  } else {    images=avatar.getRelationships(EmotionalState.NONE.primitive());    if (images != null) {      image=Utils.random(images).getTarget();    }  }  if ((image != null) && (image.getData() instanceof BinaryData)) {    this.currentImage=(BinaryData)memory.findData((BinaryData)image.getData());  }}  }
class C{  private static void printTransactionEntry(TransactionEntry transactionEntry){  System.out.println("\nTransaction Entry\n-----------------");  printBasicEntryDetails(transactionEntry);  TransactionData transactionData=transactionEntry.getTransactionData();  System.out.println("\tTransaction Data:");  System.out.println("\t\tType: " + (transactionData.getType() == null ? "no type" : transactionData.getType()));  System.out.println("\t\tDate: " + (transactionData.getDate() == null ? "no date" : transactionData.getDate()));  System.out.printf("\t\tShares: %.2f\n",transactionData.getShares());  if (transactionData.getPrice() == null) {    System.out.println("\t\tPrice not specified");  } else {    for (int i=0; i < transactionData.getPrice().getMoney().size(); i++) {      Money m=transactionData.getPrice().getMoney().get(i);      System.out.printf("\t\tThis transaction had a unit price of %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }  if (transactionData.getCommission() == null) {    System.out.println("\t\tCommission not specified");  } else {    for (int i=0; i < transactionData.getCommission().getMoney().size(); i++) {      Money m=transactionData.getCommission().getMoney().get(i);      System.out.printf("\t\tThis transaction had a commission of %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }  System.out.println("\t\tNotes: " + (null == transactionData.getNotes() ? "none" : transactionData.getNotes()));}  }
class C{  private int computeWeek(int offset,int day){  return ((7 + offset + (day - 1)) / 7);}  }
class C{  public void testRunnable() throws Exception {  Ignite ignite=startGrid(1);  startGrid(2);  final TestBinarylizableRunnable runnable=new TestBinarylizableRunnable();  ignite.compute(ignite.cluster().forRemotes()).run(runnable);  assert TestBinarylizableRunnable.executed.get();  assert TestBinarylizableRunnable.writeCalled.get();  assert TestBinarylizableRunnable.readCalled.get();}  }
class C{  public LastModified(Date date){  super(date);}  }
class C{  void updateStart(int newRecordStart){  int dataStartOffset=getDataStart() - getRecordStart();  setRecordStart(newRecordStart);  setDataStart(newRecordStart + dataStartOffset);}  }
class C{  void findBB(){  if (nvert <= 0) {    return;  }  float v[]=vert;  float _xmin=v[0], _xmax=_xmin;  float _ymin=v[1], _ymax=_ymin;  float _zmin=v[2], _zmax=_zmin;  for (int i=nvert * 3; (i-=3) > 0; ) {    float x=v[i];    if (x < _xmin) {      _xmin=x;    }    if (x > _xmax) {      _xmax=x;    }    float y=v[i + 1];    if (y < _ymin) {      _ymin=y;    }    if (y > _ymax) {      _ymax=y;    }    float z=v[i + 2];    if (z < _zmin) {      _zmin=z;    }    if (z > _zmax) {      _zmax=z;    }  }  this.xmax=_xmax;  this.xmin=_xmin;  this.ymax=_ymax;  this.ymin=_ymin;  this.zmax=_zmax;  this.zmin=_zmin;}  }
class C{  public String list() throws IOException, TomcatManagerException {  return invoke("/list",null,null);}  }
class C{  public static EndpointDescription select(EndpointDescription[] endpoints) throws ServiceResultException {  exit: {    EndpointDescription[] tcpEndpoints=EndpointUtil.selectByProtocol(endpoints,"opc.tcp");    tcpEndpoints=EndpointUtil.selectByMessageSecurityMode(tcpEndpoints,MessageSecurityMode.SignAndEncrypt);    if (tcpEndpoints.length == 0)     break exit;    tcpEndpoints=EndpointUtil.sortBySecurityLevel(tcpEndpoints);    return tcpEndpoints[tcpEndpoints.length - 1];  }  exit: {    EndpointDescription[] httpsEndpoints=EndpointUtil.selectByProtocol(endpoints,"https");    if (httpsEndpoints.length == 0)     break exit;    return httpsEndpoints[0];  }  throw new ServiceResultException("No compatible endpoint was found");}  }
class C{  public GetDataMessage(NetworkParameters params,byte[] msg,boolean parseLazy,boolean parseRetain,int length) throws ProtocolException {  super(params,msg,parseLazy,parseRetain,length);}  }
class C{  public static int rotateLeft(int i,int distance){  if (distance == 0) {    return i;  }  return ((i << distance) | (i >>> (-distance)));}  }
