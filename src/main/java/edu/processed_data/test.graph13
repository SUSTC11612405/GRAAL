class C{  public AccelListener(){  this.x=0;  this.y=0;  this.z=0;  this.timestamp=0;  this.setStatus(AccelListener.STOPPED);}  }
class C{  public static void showProfile(android.support.v4.app.Fragment fragment,String pilotId,@Nullable HashMap<String,String> extras){  if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {    pilotId=AirMap.getUserId();  }  Intent intent=new Intent(fragment.getContext(),ProfileActivity.class);  intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);  if (extras != null) {    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);  }  fragment.startActivity(intent);}  }
class C{  private K highestKey(){  FastConcurrentSkipListMap.Node<K,V> n=hiNode();  if (n != null) {    K last=n.key;    if (inBounds(last))     return last;  }  throw new NoSuchElementException();}  }
class C{  public short[] keys(){  short[] keys=new short[size()];  short[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  Landlord landlord(){  return landlord;}  }
class C{  public void close(){  CarbonUtil.closeStreams(dataOutputStream);}  }
class C{  protected PlacesSearchQuery latitude(float value){  return unsafeParam("latitude",value);}  }
class C{  public static final void drawPrismaticJoint(GL2 gl,PrismaticJoint joint){  final double lf=0.75;  final double w=0.10;  double hw=w * 0.5;  Body b1=joint.getBody1();  Body b2=joint.getBody2();  Vector2 c1=b1.getWorldCenter();  Vector2 c2=b2.getWorldCenter();  Vector2 n=c1.to(c2);  double l=n.normalize();  Vector2 t=n.product(w * 0.25).left();  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(c1.x - t.x,c1.y - t.y);  gl.glVertex2d(c1.x + t.x,c1.y + t.y);  gl.glVertex2d(c2.x + t.x,c2.y + t.y);  gl.glVertex2d(c2.x - t.x,c2.y - t.y);  gl.glEnd();  gl.glBegin(GL.GL_LINES);  t=n.cross(1.0);  gl.glVertex2d(c2.x + t.x * hw,c2.y + t.y * hw);  gl.glVertex2d(c2.x - n.x * l * lf + t.x * hw,c2.y - n.y * l * lf + t.y * hw);  gl.glVertex2d(c2.x - t.x * hw,c2.y - t.y * hw);  gl.glVertex2d(c2.x - n.x * l * lf - t.x * hw,c2.y - n.y * l * lf - t.y * hw);  gl.glEnd();}  }
class C{  protected static boolean startsWith(String string,String tag){  return string.startsWith(tag) || (tag.contains(" ") && string.startsWith(tag.replaceAll(" ","")));}  }
class C{  public CM_UPDATE_SESSION(ByteBuffer buf,LoginConnection client){  super(buf,client,0x08);}  }
class C{  private void deleteScreenShotIfRequired(){  if (batterySaver && screenShotPath.isPresent()) {    if (GoIVSettings.getInstance(getBaseContext()).shouldDeleteScreenshots()) {      screenShotHelper.deleteScreenShot(screenShotPath.get());    }  }}  }
class C{  @Override public void run(){  if (!running.compareAndSet(false,true)) {    throw new IllegalStateException("Thread is already running");  }  sequenceBarrier.clearAlert();  notifyStart();  boolean processedSequence=true;  long cachedAvailableSequence=Long.MIN_VALUE;  long nextSequence=sequence.get();  T event=null;  while (true) {    try {      if (processedSequence) {        processedSequence=false;        do {          nextSequence=workSequence.get() + 1L;          sequence.set(nextSequence - 1L);        } while (!workSequence.compareAndSet(nextSequence - 1L,nextSequence));      }      if (cachedAvailableSequence >= nextSequence) {        event=ringBuffer.get(nextSequence);        workHandler.onEvent(event);        processedSequence=true;      } else {        cachedAvailableSequence=sequenceBarrier.waitFor(nextSequence);      }    } catch (    final AlertException ex) {      if (!running.get()) {        break;      }    }catch (    final Throwable ex) {      exceptionHandler.handleEventException(ex,nextSequence,event);      processedSequence=true;    }  }  notifyShutdown();  running.set(false);}  }
class C{  private void updateMembersOfRecreateLegion(Legion legion){  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_UPDATE_MEMBER(onlineLegionMember,1300307,""));    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x07));  }}  }
class C{  public SampleSet(DataInputStream is) throws IOException {  int numSamples;  sampleInfo=new SampleInfo(is);  numSamples=is.readInt();  this.samples=new Sample[numSamples];  for (int i=0; i < numSamples; i++) {    samples[i]=Sample.loadBinary(is);  }}  }
class C{  public Boolean isAutoOpen(){  return autoOpen;}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  @Override public boolean removeAll(Collection<?> c){  return backedSet.removeAll(c);}  }
class C{  public AemRichText clear(){  switchToTextArea();  try {    bobcatWait.withTimeout(Timeouts.BIG).until(null,2);    return this;  }  finally {    frameSwitcher.switchTo("/$cq");  }}  }
class C{  public Experiment(String label,Application application,String startTime,String endTime,double samplingPercent){  this(label,application,startTime,endTime,samplingPercent,null,null,false,"","",false,0,null);}  }
class C{  @VisibleForTesting public void testSetScrollOffset(int offset){  mScrollOffset=offset;}  }
class C{  @Override public void close(){  idx.close();  ts.close();}  }
class C{  public SubExpr newSubExpr(Value op1,Value op2){  return new JSubExpr(op1,op2);}  }
class C{  public void clear(){  uid=0;  readHeader=null;  readSequence=null;  readWeight=1;  mateReadUId=0;  mateType=0;  readLength=0;  complexity=0;  numberOfMatches=0;  matchBlocks=new MatchBlockRMA2[0];}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String[] getMetaInfoEntryNames()")) {    java_util_jar_JarFile_getMetaInfoEntryNames(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private int findSlotBefore(Constant searchKey){  int startSlot=0, endSlot=currentPage.getNumRecords() - 1;  int middleSlot=(startSlot + endSlot) / 2;  if (endSlot >= 0) {    while (middleSlot != startSlot) {      if (getKey(currentPage,middleSlot).compareTo(searchKey) < 0)       startSlot=middleSlot; else       endSlot=middleSlot;      middleSlot=(startSlot + endSlot) / 2;    }    if (getKey(currentPage,endSlot).compareTo(searchKey) < 0)     return endSlot; else     if (getKey(currentPage,startSlot).compareTo(searchKey) < 0)     return startSlot; else     return startSlot - 1;  } else   return -1;}  }
class C{  @SuppressWarnings("unused") public SelectionBuilder reset(){  mTable=null;  if (mProjectionMap != null) {    mProjectionMap.clear();  }  if (mSelection != null) {    mSelection.setLength(0);  }  if (mSelectionArgs != null) {    mSelectionArgs.clear();  }  return this;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public boolean isValid(){  return face() < NUM_FACES && ((lowestOnBit() & (0x1555555555555555L)) != 0);}  }
class C{  public void loadComplete(PdfDocument pdfDocument){  state=State.LOADED;  this.documentPageCount=pdfiumCore.getPageCount(pdfDocument);  int firstPageIdx=0;  if (originalUserPages != null) {    firstPageIdx=originalUserPages[0];  }  this.pdfDocument=pdfDocument;  pdfiumCore.openPage(pdfDocument,firstPageIdx);  this.pageWidth=pdfiumCore.getPageWidth(pdfDocument,firstPageIdx);  this.pageHeight=pdfiumCore.getPageHeight(pdfDocument,firstPageIdx);  calculateOptimalWidthAndHeight();  pagesLoader=new PagesLoader(this);  renderingAsyncTask=new RenderingAsyncTask(this,pdfiumCore,pdfDocument);  renderingAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);  if (scrollHandle != null) {    scrollHandle.setupLayout(this);    isScrollHandleInit=true;  }  jumpTo(defaultPage,false);  if (onLoadCompleteListener != null) {    onLoadCompleteListener.loadComplete(documentPageCount);  }}  }
class C{  public void checkCurrentCredentials(Account account){  Intent service=new Intent(mFileActivity,OperationsService.class);  service.setAction(OperationsService.ACTION_CHECK_CURRENT_CREDENTIALS);  service.putExtra(OperationsService.EXTRA_ACCOUNT,account);  mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);  mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_checking_credentials));}  }
class C{  public void addExpansionListener(ExplorerExpansionListener listener){  expansionListeners.add(listener);}  }
class C{  @Override public String toString(){  return Vector3DFormat.getInstance().format(this);}  }
class C{  public void writeFooter(FileFooter footer,long currentPosition) throws IOException {  ThriftWriter thriftWriter=openThriftWriter(filePath);  footer.setVersion(VERSION_NUMBER);  try {    thriftWriter.write(footer);    thriftWriter.writeOffset(currentPosition);  } catch (  Exception e) {    throw e;  } finally {    thriftWriter.close();  }}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  Process openProcess(String[] cmdAttribs) throws IOException {  return Runtime.getRuntime().exec(cmdAttribs);}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public String toString(){  return new String(cbuf,root.startIndex,root.endIndex - root.startIndex);}  }
class C{  private void updateCookies(Collection<IdentifiableCookie> cookies){  this.cookies.removeAll(cookies);  this.cookies.addAll(cookies);}  }
class C{  public boolean isEmpty(){  if (mySnippets.length == 0) {    return true;  }  for (  KindredSnippets snip : mySnippets) {    Pathway path=snip.getPath();    if (myPath.isPrefix(path)) {      return false;    }  }  return true;}  }
class C{  private void handleActionFoo(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  public LedgerDescriptor openLedger(LogSegmentMetadata metadata,boolean fence) throws BKException {  return FutureUtils.bkResult(asyncOpenLedger(metadata,fence));}  }
class C{  public void writeDiscoveryToXml(String FilePath,int pages,hipda hipda) throws Exception {  Writer fw=null;  try {    FileOutputStream fos=new FileOutputStream(FilePath);    fw=new OutputStreamWriter(fos,"UTF-8");    fw.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "\r\n");    fw.write("<discovery>" + "\r\n");    for (int i=1; i <= pages; i++) {      System.out.println("Writting page " + i);      fw.write(hipda.requestDiscoveryContent(hipda.login(),i));    }    fw.write("</discovery>" + "\r\n");  } catch (  Exception e) {    e.printStackTrace();  } finally {    fw.close();  }}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  public static String fromClassName(String className){  String res=(String)Descriptor.CLASS_NAME_TO_DESCRIPTOR.get(className);  if (res != null) {    return res;  }  if (className.startsWith("["))   return className.replace('.','/');  return 'L' + className.replace('.','/') + ';';}  }
class C{  public static AuditLevel toLevel(int val,Level defaultLevel){  return AUDIT;}  }
class C{  public static void drawButtonRewiMod(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){  if (!visible)   return;  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);  getTextureHandler().bindModTexture("textures/misc/rewimodlogo.png");  getGlStateManager().color(isHovered ? .7F : 1.0F,1.0F,1.0F);  drawCustomSizeRect(xPos + 4,yPos + 4,0,0,12,12);}  }
class C{  private static boolean visible(SootMethod mPrime){  SootClass cPrime=mPrime.getDeclaringClass();  return (cPrime.isPublic() || cPrime.isProtected() || (!cPrime.isPrivate() && !ASSUME_PACKAGES_SEALED)) && (mPrime.isPublic() || mPrime.isProtected() || (!mPrime.isPrivate() && !ASSUME_PACKAGES_SEALED));}  }
class C{  synchronized public void init(ITransportConfig config,ProtocolAdapter.Side initSide) throws ConfigurationException {  String adapterName=config.getProtocolName();  String adapterClass=config.getProtocolAdaptorClass();  try {    ProtocolAdapter adapter=get(adapterName);    if (adapter == null) {      adapter=(ProtocolAdapter)ClassLoaderHelper.loadClass(adapterClass).newInstance();      adapter.init(config,initSide);      put(adapterName,adapter);    } else     adapter.init(config,initSide);  } catch (  Exception ex) {    throw new ConfigurationException("Failed to init. Protocol Registry: " + adapterClass,ex);  }}  }
class C{  public boolean haveSuggestions(){  return myCurrentLeftMatch != null || myCurrentTopMatch != null || myCurrentRightMatch != null || myCurrentBottomMatch != null;}  }
class C{  protected MarketGetAlbumByIdQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public synchronized void notifyNonActiveIfNeedTo(){  _status=INITIAL_SCAN_NOTACTIVE;  if (_needNotifyTermination) {    this.notify();  }}  }
class C{  @SuppressWarnings("unchecked") public Block(Header header,List<? extends MerkleTreeNode> transactions){  this.header=header;  this.nodes=Collections.unmodifiableList(transactions);  int pruned=0;  for (  MerkleTreeNode n : transactions) {    if (!(n instanceof Transaction))     ++pruned;  }  if (pruned > 0) {    this.transactions=new ArrayList<>(nodes.size() - pruned);    for (    MerkleTreeNode n : transactions) {      if (n instanceof Transaction)       this.transactions.add((Transaction)n);    }    this.transactions=Collections.unmodifiableList(this.transactions);  } else {    this.transactions=(List<Transaction>)nodes;  }}  }
class C{  private void buildPathForAbstraction(final AbstractionAtSink abs){  SourceContextAndPath scap=new SourceContextAndPath(abs.getAbstraction().getAccessPath(),abs.getSinkStmt());  scap=scap.extendPath(abs.getAbstraction());  abs.getAbstraction().addPathElement(scap);  if (!checkForSource(abs.getAbstraction(),scap))   executor.execute(new SourceFindingTask(abs.getAbstraction()));}  }
class C{  public TLongObjectHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  public static void throwable(int level,String msg,Throwable throwable){  log(level,0,null,new ThrowableFormatter(),null,msg,throwable);}  }
class C{  protected boolean isEnabled() throws TeamException {  ISVNRemoteFile resource=getSingleSelectedSVNRemoteFile();  return (resource != null);}  }
class C{  @Override public void close() throws IOException {  writeColumnSortInfo();  if (null != sortIndexThriftWriter) {    sortIndexThriftWriter.close();  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.dialog_rate_limit_button:    dismiss();  break;}}  }
class C{  public static Map<String,Object> persistRootCompDoc(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String contentId=(String)context.get("contentId");  if (UtilValidate.isNotEmpty(contentId)) {    try {      EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error running serviceName persistContentAndAssoc",module);      return ServiceUtil.returnError(UtilProperties.getMessage(CoreEvents.err_resource,"ContentNoContentFound",UtilMisc.toMap("contentId",contentId),locale));    }  }  ModelService modelService=null;  try {    modelService=dispatcher.getDispatchContext().getModelService("persistContentAndAssoc");  } catch (  GenericServiceException e) {    Debug.logError("Error getting model service for serviceName, 'persistContentAndAssoc'. " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(CoreEvents.err_resource,"coreEvents.error_modelservice_for_srv_name",locale));  }  Map<String,Object> persistMap=modelService.makeValid(context,ModelService.IN_PARAM);  persistMap.put("userLogin",userLogin);  try {    Map<String,Object> persistContentResult=dispatcher.runSync("persistContentAndAssoc",persistMap);    if (ServiceUtil.isError(persistContentResult)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentContentCreatingError",UtilMisc.toMap("serviceName","persistContentAndAssoc"),locale),null,null,persistContentResult);    }    contentId=(String)persistContentResult.get("contentId");    result.putAll(persistContentResult);    Map<String,Object> contentRevisionMap=FastMap.newInstance();    contentRevisionMap.put("itemContentId",contentId);    contentRevisionMap.put("contentId",contentId);    contentRevisionMap.put("userLogin",userLogin);    Map<String,Object> persistRevResult=dispatcher.runSync("persistContentRevisionAndItem",contentRevisionMap);    if (ServiceUtil.isError(persistRevResult)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentContentCreatingError",UtilMisc.toMap("serviceName","persistContentRevisionAndItem"),locale),null,null,persistRevResult);    }    result.putAll(persistRevResult);    return result;  } catch (  GenericServiceException e) {    Debug.logError(e,"Error running serviceName, 'persistContentAndAssoc'. " + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentContentCreatingError",UtilMisc.toMap("serviceName","persistContentAndAssoc"),locale) + e.toString());  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GROUP_MEMBER' ("+ "'GROUP_ID' TEXT NOT NULL ,"+ "'USER_ID' TEXT NOT NULL ,"+ "'NAME' TEXT,"+ "'PORTRAIT_URI' TEXT,"+ "'DISPLAY_NAME' TEXT);");}  }
class C{  public RevealBuilder withCurvedTranslation(final PointF curveControlPoint){  this.mCurveControlPoint=curveControlPoint;  return this.withCurvedTranslation();}  }
class C{  @Override public void stop() throws ConnectException {  fLog.trace("Stopping");  try {    iWriter.close();  } catch (  IOException exception) {    throw new ConnectException(exception);  }}  }
class C{  public short[][] production_table(){  return _production_table;}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {}  }
class C{  public static <T>void notEmpty(String argumentName,T[] argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.length == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getNewValue() instanceof String) {      String newValue=(String)undoRedoObject.getNewValue();      UserLayer userLayer=DefaultSymbols.createNewUserLayer();      InlineFeatureUtils.setInlineFeatures(userLayer,newValue);      if (inlineGML != null) {        inlineGML.setInlineFeatures(newValue);      }      if (inlineFeature != null) {        inlineFeature.setInlineFeatures(userLayer);      }    }  }}  }
class C{  void accumulate(Set<String> enabled,boolean remove,int configVersion,DiagCollector diags,Location location){  if (!remove && !isSupportedIn(configVersion)) {    diags.addDiag(Diag.error(location,"Feature %s not available in config version %s.",this,configVersion));  }  if (!remove) {    if (!enabled.add(featureName)) {      diags.addDiag(Diag.warning(location,"Enabling feature %s had no effect because the feature was already enabled.",this));    }  } else {    if (!enabled.remove(featureName)) {      diags.addDiag(Diag.warning(location,"Disabling feature %s had no effect because the feature was already disabled.",this));    }  }  for (  ChildBinding binding : childBindings) {    if (binding.range.contains(configVersion)) {      binding.child.accumulate(enabled,remove,configVersion,diags,location);    }  }}  }
class C{  public void registerToolbar(ViewGroup toolbarContainer,RTToolbar toolbar){  mToolbars.put(toolbar.getId(),toolbar);  toolbar.setToolbarListener(this);  toolbar.setToolbarContainer(toolbarContainer);  updateToolbarVisibility();}  }
class C{  public static double roundToSignificantDigits(double value,int n){  if (isEqual(value,0.0)) {    return 0.0;  }  final double d=Math.ceil(Math.log10(value < 0.0 ? -value : value));  final int power=n - (int)d;  final double magnitude=Math.pow(10.0,power);  final long shifted=Math.round(value * magnitude);  return shifted / magnitude;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public synchronized long incRefLastCommitGen() throws IOException {  long nextGen=saveLoadState.getNextWriteGen();  if (nextGen == 0) {    throw new IllegalStateException("no commit exists");  }  long result=nextGen - 1;  incRef(result);  return result;}  }
class C{  public int equivHashCode(){  return getMethod().equivHashCode();}  }
class C{  public ScreenshotEntry(WebDriver webDriver,ReportFileCreator fileCreator,String message) throws IOException {  super();  this.screenshotFile=fileCreator.getReportFile("png");  this.message=message;  final File scrFile=((TakesScreenshot)webDriver).getScreenshotAs(OutputType.FILE);  FileUtils.copyFile(scrFile,screenshotFile);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHealEffect_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200943,skilltarget,skillcaster,skillname);}  }
class C{  private DocumentFragment traverseCommonEndContainer(Node startAncestor,int how){  DocumentFragment frag=null;  if (how != DELETE_CONTENTS)   frag=fDocument.createDocumentFragment();  Node n=traverseLeftBoundary(startAncestor,how);  if (frag != null)   frag.appendChild(n);  int startIdx=indexOf(startAncestor,fEndContainer);  ++startIdx;  int cnt=fEndOffset - startIdx;  n=startAncestor.getNextSibling();  while (cnt > 0) {    Node sibling=n.getNextSibling();    Node xferNode=traverseFullySelected(n,how);    if (frag != null)     frag.appendChild(xferNode);    --cnt;    n=sibling;  }  if (how != CLONE_CONTENTS) {    setStartAfter(startAncestor);    collapse(true);  }  return frag;}  }
class C{  private void fixAdditionalKeyBindings(GameSettings settings){  if (this.additionalKeys == null) {    return;  }  KeyBinding[] bindings=(KeyBinding[])ArrayUtils.addAll(settings.keyBindings,this.additionalKeys.toArray());  settings.keyBindings=bindings;}  }
class C{  private InvocationConstraints createInvocationConstraints(){  if (MIN_RETRY >= sleepTime[tryIndx]) {    return new InvocationConstraints(new ConnectionAbsoluteTime(System.currentTimeMillis() + sleepTime[tryIndx]),null);  } else {    return InvocationConstraints.EMPTY;  }}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(clusterPolicy);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ClusterPolicy copy=(ClusterPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(clusterPolicy,copy));}  }
class C{  public MultivariateNormalMixtureExpectationMaximization(double[][] data) throws MathIllegalArgumentException {  if (data.length < 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,data.length,1);  }  this.data=new double[data.length][data[0].length];  for (int i=0; i < data.length; i++) {    if (data[i].length != data[0].length) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,data[i].length,data[0].length);    }    if (data[i].length < 2) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,data[i].length,2,true);    }    this.data[i]=data[i].clone();  }}  }
class C{  public final boolean isLoaded(I id){  return objects.asMap().containsKey(id);}  }
class C{  public Object jndiLookup(String name) throws NamingException {  return getInitialContext().lookup(name);}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  @ObjectiveCName("error:") public void error(String errorMsg){  this.isComplete=true;  this.isAcknowledged=true;  this.connection.sendMsg(Topic.RPC,Actions.ERROR,new String[]{errorMsg,this.name,this.correlationId});}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(null,url,params,responseHandler);}  }
class C{  public SM_MAIL_SERVICE(Player player,Collection<Letter> letters,boolean isExpress){  super(player);  this.serviceId=2;  this.letters=letters;  this.isExpress=isExpress;}  }
class C{  @Provides @Singleton @QueueZooKeeper CuratorFramework provideQueueZooKeeperConnection(@Global CuratorFramework curator){  return withComponentNamespace(curator,"queue");}  }
class C{  protected boolean isSet(Class<?> fieldType){  return Set.class.isAssignableFrom(fieldType);}  }
class C{  private final float vowelMid(Item syllable){  Voice voice=syllable.getUtterance().getVoice();  Item firstSeg=syllable.getItemAs(Relation.SYLLABLE_STRUCTURE).getDaughter();  Item segment;  float val;  for (segment=firstSeg; segment != null; segment=segment.getNext()) {    if ("+".equals(voice.getPhoneFeature(segment.toString(),"vc"))) {      val=(segment.getFeatures().getFloat("end") + ((Float)vowelMidPath.findFeature(segment)).floatValue()) / 2.0f;      return val;    }  }  if (firstSeg == null) {    val=0.0f;  } else {    val=(firstSeg.getFeatures().getFloat("end") + ((Float)vowelMidPath.findFeature(firstSeg)).floatValue()) / 2.0f;  }  return val;}  }
class C{  @RequestMapping(value="/{id}",method=GET,produces=APPLICATION_JSON_VALUE) public ResponseEntity<RoleDTO> findById(@PathVariable Integer id) throws URISyntaxException {  log.debug("Find by id Role : {}",id);  return Optional.ofNullable(roleDTOService.findOne(id)).map(null).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));}  }
class C{  public Builder zoomOffset(Number zoomOffset){  this.zoomOffset=zoomOffset;  return this;}  }
class C{  public int next(){  if (hasNext()) {    currentMatches=nextMatches;    nextMatches=null;    return currentMatches.getNumberOfMatches();  }  return -1;}  }
class C{  public boolean containsKey(long key){  return contains(key);}  }
class C{  public void removeUrl(String url){  Set<String> urls=getCachedUrls();  urls.remove(url);  putCachedUrls(urls);  updateNotification(urls);}  }
class C{  @Override public TemplateDruidQuery withGranularity(Granularity granularity){  if (granularity instanceof ZonelessTimeGrain) {    return withGranularity((ZonelessTimeGrain)granularity);  }  throw new UnsupportedOperationException("Template Druid Query only supports Zoneless Time Grains");}  }
class C{  private boolean isSuccess(final Player player,final Item parentItem,final Item targetItem,final Item supplementItem,final int targetWeapon){  if (parentItem.getItemTemplate() != null) {    ItemTemplate itemTemplate=parentItem.getItemTemplate();    if (itemTemplate.getCategory() == ItemCategory.ENCHANTMENT || itemTemplate.getCategory() == ItemCategory.AMPLIFICATION || (parentItem.getItemTemplate().getCategory() == targetItem.getItemTemplate().getCategory() && itemTemplate.getCategory() == ItemCategory.STIGMA)) {      return EnchantService.enchantItem(player,parentItem,targetItem,supplementItem);    }    return EnchantService.socketManastone(player,parentItem,targetItem,supplementItem,targetWeapon);  }  return false;}  }
class C{  public boolean isDrawBarShadowEnabled(){  return mDrawBarShadow;}  }
class C{  protected void doOpen(ImageView imageView,Uri uri){  if (UriUtils.isEmpty(uri)) {  } else {    FlowImageLoader flowImageLoader=FlowImageLoader.with(imageView.getContext()).load(uri);switch (imageView.getScaleType()) {case FIT_XY:      flowImageLoader.resize(imageView.getWidth(),imageView.getHeight());    break;case CENTER_CROP:  flowImageLoader.crop(imageView.getWidth(),imageView.getHeight());break;case CENTER_INSIDE:flowImageLoader.centerInside(imageView.getWidth(),imageView.getHeight());break;default :break;}switch (mShape) {case SHAPE_CIRCLED:flowImageLoader.circle();break;case SHAPE_ROUNDED:flowImageLoader.round(mRadiusX,mRadiusY);break;default :break;}flowImageLoader.into(imageView,mLoadingId,mFailId).cache();flowImageLoader.pls();}}  }
class C{  public ZoomOptions build(){  ZoomOptions options=new ZoomOptions();  options.animate=animate;  return options;}  }
class C{  public ESTTextfileDoubleDataSource(Reader reader){  super(reader);  try {    while (!this.reader.readLine().startsWith("EST_Header_End")) {    }  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  public static final String printIterable(Iterable iIterable,String sSeparator){  StringBuffer sbRes=new StringBuffer();  Iterator iIter=iIterable.iterator();  while (iIter.hasNext()) {    Object oNext=iIter.next();    sbRes.append(oNext.toString());    if (iIter.hasNext())     sbRes.append(sSeparator);  }  return sbRes.toString();}  }
class C{  public ExitMonitorStmt newExitMonitorStmt(Value op){  return new GExitMonitorStmt(op);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  @Override public String addSymbol(char[] buffer,int offset,int length){  if (fSymbolTable.containsSymbol(buffer,offset,length)) {    return fSymbolTable.addSymbol(buffer,offset,length);  }  return super.addSymbol(buffer,offset,length);}  }
class C{  public void addRewardProducer(IRewardProducer producer){  if (this.producers == null) {    this.producers=new ArrayList<IRewardProducer>();  }  this.producers.add(producer);}  }
class C{  public RollUpIntegrationTest() throws Exception {  setResponseLogLengthLimit(1000);  dateFormat=new SimpleDateFormat("yyyy-MM-dd");  Calendar cal=Calendar.getInstance();  cal.add(Calendar.DATE,-1);  yesterday=dateFormat.format(cal.getTime());  yesterday+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,0);  today=dateFormat.format(cal.getTime());  today+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,1);  tomorrow=dateFormat.format(cal.getTime());  tomorrow+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,4);  tomorrowPlus3=dateFormat.format(cal.getTime());  tomorrowPlus3+="T00:00:00+0000";  experiment=ExperimentFactory.createExperiment();  experiment.startTime=yesterday;  experiment.endTime=tomorrowPlus3;  experiment.samplingPercent=1.0;  experiment.label="experiment";  experiment.applicationName=QBO + UUID.randomUUID();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  public List<BookInfo> _queryUserInfo_BookInfoList(String userId){synchronized (this) {    if (userInfo_BookInfoListQuery == null) {      QueryBuilder<BookInfo> queryBuilder=queryBuilder();      queryBuilder.where(Properties.UserId.eq(null));      userInfo_BookInfoListQuery=queryBuilder.build();    }  }  Query<BookInfo> query=userInfo_BookInfoListQuery.forCurrentThread();  query.setParameter(0,userId);  return query.list();}  }
class C{  @Override protected float evaluate(Target target) throws Exception {  assert target != null;  float[] result=null;  try {    result=(float[])cart.interpret(target);  } catch (  IllegalArgumentException e) {    throw new Exception("Could not interpret target '" + target + "'",e);  }  float value=0;  try {    value=result[1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new Exception("Could not handle predicted value: '" + value + "'",e);  }  return value;}  }
class C{  public double doGraphCompareToSet(String sSummaryTextFile,Set<String> ssModelFiles,String sGraphModelClassName,String sComparatorClassName,int iMinNGramRank,int iMaxNGramRank,int iNGramDist){  throw new NotImplementedException();}  }
class C{  protected BaseGameActivity(){  super();}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public static Date parse(String date,ParsePosition pos) throws ParseException {  Exception fail=null;  try {    int offset=pos.getIndex();    int year=parseInt(date,offset,offset+=4);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int month=parseInt(date,offset,offset+=2);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int day=parseInt(date,offset,offset+=2);    int hour=0;    int minutes=0;    int seconds=0;    int milliseconds=0;    boolean hasT=checkOffset(date,offset,'T');    if (!hasT && (date.length() <= offset)) {      Calendar calendar=new GregorianCalendar(year,month - 1,day);      pos.setIndex(offset);      return calendar.getTime();    }    if (hasT) {      hour=parseInt(date,offset+=1,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      minutes=parseInt(date,offset,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      if (date.length() > offset) {        char c=date.charAt(offset);        if (c != 'Z' && c != '+' && c != '-') {          seconds=parseInt(date,offset,offset+=2);          if (seconds > 59 && seconds < 63)           seconds=59;          if (checkOffset(date,offset,'.')) {            offset+=1;            int endOffset=indexOfNonDigit(date,offset + 1);            int parseEndOffset=Math.min(endOffset,offset + 3);            int fraction=parseInt(date,offset,parseEndOffset);switch (parseEndOffset - offset) {case 2:              milliseconds=fraction * 10;            break;case 1:          milliseconds=fraction * 100;        break;default :      milliseconds=fraction;  }  offset=endOffset;}}}}if (date.length() <= offset) {throw new IllegalArgumentException("No time zone indicator");}TimeZone timezone=null;char timezoneIndicator=date.charAt(offset);if (timezoneIndicator == 'Z') {timezone=TIMEZONE_UTC;offset+=1;} else if (timezoneIndicator == '+' || timezoneIndicator == '-') {String timezoneOffset=date.substring(offset);timezoneOffset=timezoneOffset.length() >= 5 ? timezoneOffset : timezoneOffset + "00";offset+=timezoneOffset.length();if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {timezone=TIMEZONE_UTC;} else {String timezoneId="GMT" + timezoneOffset;timezone=TimeZone.getTimeZone(timezoneId);String act=timezone.getID();if (!act.equals(timezoneId)) {String cleaned=act.replace(":","");if (!cleaned.equals(timezoneId)) {  throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "+ timezone.getID());}}}} else {throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");}Calendar calendar=new GregorianCalendar(timezone);calendar.setLenient(false);calendar.set(Calendar.YEAR,year);calendar.set(Calendar.MONTH,month - 1);calendar.set(Calendar.DAY_OF_MONTH,day);calendar.set(Calendar.HOUR_OF_DAY,hour);calendar.set(Calendar.MINUTE,minutes);calendar.set(Calendar.SECOND,seconds);calendar.set(Calendar.MILLISECOND,milliseconds);pos.setIndex(offset);return calendar.getTime();} catch (IndexOutOfBoundsException e) {fail=e;}catch (NumberFormatException e) {fail=e;}catch (IllegalArgumentException e) {fail=e;}String input=(date == null) ? null : ('"' + date + "'");String msg=fail.getMessage();if (msg == null || msg.isEmpty()) {msg="(" + fail.getClass().getName() + ")";}ParseException ex=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex());ex.initCause(fail);throw ex;}  }
class C{  public static App inst(){  if (instance == null) {    throw new NullPointerException("App is not initialized yet");  }  return instance;}  }
class C{  static void splitReciprocal(final double in[],final double result[]){  final double b=1.0 / 4194304.0;  final double a=1.0 - b;  if (in[0] == 0.0) {    in[0]=in[1];    in[1]=0.0;  }  result[0]=a / in[0];  result[1]=(b * in[0] - a * in[1]) / (in[0] * in[0] + in[0] * in[1]);  if (result[1] != result[1]) {    result[1]=0.0;  }  resplit(result);  for (int i=0; i < 2; i++) {    double err=1.0 - result[0] * in[0] - result[0] * in[1] - result[1] * in[0] - result[1] * in[1];    err*=result[0] + result[1];    result[1]+=err;  }}  }
class C{  public MessagesRemoveChatUserQuery removeChatUser(UserActor actor,int chatId,String userId){  return new MessagesRemoveChatUserQuery(getClient(),actor,chatId,userId);}  }
class C{  private void updateCovarianceDiagonalOnly(boolean hsig,final RealMatrix bestArz){  double oldFac=hsig ? 0 : ccov1Sep * cc * (2 - cc);  oldFac+=1 - ccov1Sep - ccovmuSep;  diagC=diagC.scalarMultiply(oldFac).add(square(pc).scalarMultiply(ccov1Sep)).add((times(diagC,square(bestArz).multiply(weights))).scalarMultiply(ccovmuSep));  diagD=sqrt(diagC);  if (diagonalOnly > 1 && iterations > diagonalOnly) {    diagonalOnly=0;    B=eye(dimension,dimension);    BD=diag(diagD);    C=diag(diagC);  }}  }
class C{  private boolean isSupportedPrimitive(PrimitiveTypeInfo type){switch (type.getPrimitiveCategory()) {case VOID:case STRING:case BOOLEAN:case BYTE:case SHORT:case INT:case LONG:case FLOAT:case DOUBLE:case DATE:case TIMESTAMP:    return true;default :  return false;}}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public void initPathArray(int size){  if (DEBUG) {    debug("init_path_array: " + size);  }  numStates=size;  statePaths=new ViterbiPath[size];}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  private void moveSlotBefore(){  int startSlot=0, endSlot=currentPage.getNumRecords() - 1;  int middleSlot=(startSlot + endSlot) / 2;  if (endSlot >= 0) {    while (middleSlot != startSlot) {      if (searchRange.largerThan(getKey(currentPage,middleSlot)))       startSlot=middleSlot; else       endSlot=middleSlot;      middleSlot=(startSlot + endSlot) / 2;    }    if (searchRange.largerThan(getKey(currentPage,endSlot)))     currentSlot=endSlot; else     if (searchRange.largerThan(getKey(currentPage,startSlot)))     currentSlot=startSlot; else     currentSlot=startSlot - 1;  } else   currentSlot=-1;}  }
class C{  public boolean isPreclosed(){  return preclosed;}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr){  this(context,attrs,defStyleAttr,0);}  }
class C{  public static String convertURLToFile(String url){  if (url == null) {    return "";  }  String prefix=FILE_PREFIX;  if (OSValidator.isWindows()) {    prefix=WINDOWS_FILE_PREFIX;  }  if (url.startsWith(prefix)) {    try {      int length=prefix.length();      String urlString=url.substring(length);      return java.net.URLDecoder.decode(urlString,UTF_8_ENCODING);    } catch (    UnsupportedEncodingException e) {      ConsoleManager.getInstance().exception(ExternalFilenames.class,e);      return null;    }  }  return url;}  }
class C{  public PhotosEditAlbumQuery commentsDisabled(Boolean value){  return unsafeParam("comments_disabled",value);}  }
class C{  EditorFixture(Robot robot,IdeFrameFixture frame){  this.robot=robot;  myFrame=frame;}  }
class C{  public static void createMenus(SLDEditorInterface application,List<ExtensionInterface> extensionList){  if (instance == null) {    instance=new SLDEditorMenus(application);  }  instance.populate(extensionList);}  }
class C{  void addAssociatedModelWithoutFK(String associatedTableName,long associatedId){  getAssociatedModelsMapWithoutFK().put(associatedTableName,associatedId);}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  public short[][] action_table(){  return _action_table;}  }
class C{  public static String join(Collection<?> col,String delim){  if (UtilValidate.isEmpty(col))   return null;  StringBuilder buf=new StringBuilder();  Iterator<?> i=col.iterator();  while (i.hasNext()) {    buf.append(i.next());    if (i.hasNext())     buf.append(delim);  }  return buf.toString();}  }
class C{  public XMLInputSource(String publicId,String systemId,String baseSystemId,InputStream byteStream,String encoding){  fPublicId=publicId;  fSystemId=systemId;  fBaseSystemId=baseSystemId;  fByteStream=byteStream;  fEncoding=encoding;}  }
class C{  public QueryPlan(Database.Transaction transaction,String startTableName){  this.transaction=transaction;  this.startTableName=startTableName;  this.selectColumns=new ArrayList<String>();  this.joinTableNames=new ArrayList<String>();  this.joinLeftColumnNames=new ArrayList<String>();  this.joinRightColumnNames=new ArrayList<String>();  this.whereColumnNames=new ArrayList<String>();  this.whereOperators=new ArrayList<PredicateOperator>();  this.whereDataTypes=new ArrayList<DataType>();  this.hasCount=false;  this.averageColumnName=null;  this.sumColumnName=null;  this.groupByColumn=null;  this.finalOperator=null;}  }
class C{  protected PhotosEditAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public WallSearchQueryWithExtended searchExtended(UserActor actor){  return new WallSearchQueryWithExtended(getClient(),actor);}  }
class C{  @NonNull public Builder buildUpon(){  return new Builder(history);}  }
class C{  @JsonIgnore public boolean isChangeable(){  return state.equals(DRAFT) || state.equals(RUNNING) || state.equals(PAUSED);}  }
class C{  @CalledByNative public static void openSettings(WebContents webContents){  Activity activity=getActivityFromWebContents(webContents);  if (webContents != null && activity != null) {    RecordUserAction.record("DomDistiller_DistilledPagePrefsOpened");    AlertDialog.Builder builder=new AlertDialog.Builder(activity,R.style.AlertDialogTheme);    builder.setView(DistilledPagePrefsView.create(activity));    builder.show();  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  @Override public void scrollToTop(){  model.setToTop(true);  view.scrollToTop();}  }
class C{  public static String replaceXliffVariableContent(String xliffContent){  return xliffContent.replaceFirst("file original=\".*?\"","file original=\"replaced-original\"").replaceAll("id=\".*?\"","id=\"replaced-id\"").replaceAll("tuv id: \\d+","tuv id: replaced-id");}  }
class C{  protected MessagesGetChatQueryWithChatIdsFields chatIds(List<Integer> value){  return unsafeParam("chat_ids",value);}  }
class C{  public static final int nextPrime(int desiredCapacity){  int i=Arrays.binarySearch(primeCapacities,desiredCapacity);  if (i < 0) {    i=-i - 1;  }  return primeCapacities[i];}  }
class C{  @Override public boolean checkCanSwipeBack(int dir){  return view.checkCanSwipeBack(dir);}  }
class C{  private void initModel(Photo p){  this.photoDetailsModel=new PhotoDetailsObject(p);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < length()) {    this.myArrayList.set(index,value);  } else {    while (index != length()) {      put(JSONObject.NULL);    }    put(value);  }  return this;}  }
class C{  public void createPolicies(String path,boolean readFromGlobal) throws Exception {  try {    checkNotNull(path,"path can't be null");    checkArgument(path.startsWith(LOCAL_POLICIES_ROOT),"Invalid path of local policies");    LocalPolicies localPolicies=new LocalPolicies();    if (readFromGlobal) {      String globalPath=joinPath(POLICIES_ROOT,path.substring(path.indexOf(LOCAL_POLICIES_ROOT) + LOCAL_POLICIES_ROOT.length() + 1));      Policies glbPolicies=configurationCacheService.policiesCache().get(globalPath);      localPolicies.bundles=glbPolicies.bundles;    }    ZooKeeper zk=cache.getZooKeeper();    try {      ZkUtils.createFullPathOptimistic(zk,path,ObjectMapperFactory.getThreadLocal().writeValueAsBytes(localPolicies),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);    } catch (    KeeperException.NodeExistsException e) {    }  } catch (  KeeperException.NoNodeException e) {    throw e;  }catch (  Exception e) {    LOG.error("Failed to create policies for {} in local zookeeper: {}",path,e.getMessage(),e);    throw new PulsarServerException(e);  }}  }
class C{  public SimpleCurveFitter withMaxIterations(int newMaxIter){  return new SimpleCurveFitter(function,initialGuess,newMaxIter);}  }
class C{  public void requestDeleteAllReturnRoutes(int nodeId){  enqueue(new DeleteReturnRouteMessageClass().doRequest(nodeId));}  }
class C{  public static String extract(String value){  String extractedValue=value;  if (isAttribute(value)) {    extractedValue=value.substring(ATTRIBUTE_START.length(),value.length() - ATTRIBUTE_END.length());  }  return extractedValue;}  }
class C{  public static boolean isCarbonIndexFile(String fileNameWithPath){  int pos=fileNameWithPath.lastIndexOf('.');  if (pos != -1) {    return fileNameWithPath.substring(pos).startsWith(INDEX_FILE_EXT);  }  return false;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  LOG.i(TAG,"Apache Cordova native platform version " + CordovaWebView.CORDOVA_VERSION + " is starting");  LOG.d(TAG,"CordovaActivity.onCreate()");  loadConfig();  if (!preferences.getBoolean("ShowTitle",false)) {    getWindow().requestFeature(Window.FEATURE_NO_TITLE);  }  if (preferences.getBoolean("SetFullscreen",false)) {    Log.d(TAG,"The SetFullscreen configuration is deprecated in favor of Fullscreen, and will be removed in a future version.");    preferences.set("Fullscreen",true);  }  if (preferences.getBoolean("Fullscreen",false)) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      immersiveMode=true;    } else {      getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);    }  } else {    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);  }  super.onCreate(savedInstanceState);  cordovaInterface=makeCordovaInterface();  if (savedInstanceState != null) {    cordovaInterface.restoreInstanceState(savedInstanceState);  }}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public boolean isTopLevel(){  ASTNode parent=getNode().getTreeParent();  return parent == null || parent.getElementType() == BuildElementTypes.BUILD_FILE;}  }
class C{  protected Pipeline createPipeline(){  Tokenizer tokenizer=new Tokenizer().setInputCol("text").setOutputCol("tokens");  CountVectorizer countVectorizer=new CountVectorizer().setInputCol("tokens").setOutputCol("features").setMinDF((Double)params.getOrDefault(params.getMinFF())).setVocabSize((Integer)params.getOrDefault(params.getNumFeatures()));  StringIndexer transitionIndexer=new StringIndexer().setInputCol("transition").setOutputCol("label");  Pipeline pipeline=new Pipeline().setStages(new PipelineStage[]{tokenizer,countVectorizer,transitionIndexer});  return pipeline;}  }
class C{  @Override @PostConstruct public void init() throws IDBPersistenceException {  super.init();}  }
class C{  public void onMainFrameNavigation(String url,boolean isFailure){}  }
class C{  private char readEscapeCharacter() throws IOException {  if (pos == limit && !fillBuffer(1)) {    throw syntaxError("Unterminated escape sequence");  }  char escaped=buffer[pos++];switch (escaped) {case 'u':    if (pos + 4 > limit && !fillBuffer(4)) {      throw syntaxError("Unterminated escape sequence");    }  char result=0;for (int i=pos, end=i + 4; i < end; i++) {  char c=buffer[i];  result<<=4;  if (c >= '0' && c <= '9') {    result+=(c - '0');  } else   if (c >= 'a' && c <= 'f') {    result+=(c - 'a' + 10);  } else   if (c >= 'A' && c <= 'F') {    result+=(c - 'A' + 10);  } else {    throw new NumberFormatException("\\u" + new String(buffer,pos,4));  }}pos+=4;return result;case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\n':lineNumber++;lineStart=pos;case '\'':case '"':case '\\':case '/':return escaped;default :throw syntaxError("Invalid escape sequence");}}  }
class C{  private Set<Abstraction> computeAliases(final DefinitionStmt defStmt,Value leftValue,Abstraction d1,Abstraction source){  assert !source.getAccessPath().isEmpty();  if (source == getZeroValue())   return Collections.emptySet();  final Set<Abstraction> res=new MutableTwoElementSet<Abstraction>();  final boolean leftSideMatches=baseMatches(leftValue,source);  if (!leftSideMatches)   res.add(source); else {    for (    Unit u : interproceduralCFG().getPredsOf(defStmt))     fSolver.processEdge(new PathEdge<Unit,Abstraction>(d1,u,source));  }  if (defStmt instanceof AssignStmt) {    final Value rightValue=BaseSelector.selectBase(defStmt.getRightOp(),false);    if (leftSideMatches) {      if (!(rightValue instanceof Local || rightValue instanceof FieldRef))       return Collections.emptySet();    }    if (rightValue instanceof Constant)     return res;    if (rightValue instanceof BinopExpr)     return res;    boolean aliasOverwritten=baseMatchesStrict(rightValue,source) && rightValue.getType() instanceof RefType && !source.dependsOnCutAP();    if (!aliasOverwritten) {      Abstraction newLeftAbs=null;      if (rightValue instanceof InstanceFieldRef) {        InstanceFieldRef ref=(InstanceFieldRef)rightValue;        if (source.getAccessPath().isInstanceFieldRef() && ref.getBase() == source.getAccessPath().getPlainValue() && source.getAccessPath().firstFieldMatches(ref.getField())) {          newLeftAbs=source.deriveNewAbstraction(leftValue,true,defStmt,source.getAccessPath().getFirstFieldType());        }      } else       if (enableStaticFields && rightValue instanceof StaticFieldRef) {        StaticFieldRef ref=(StaticFieldRef)rightValue;        if (source.getAccessPath().isStaticFieldRef() && source.getAccessPath().firstFieldMatches(ref.getField())) {          newLeftAbs=source.deriveNewAbstraction(leftValue,true,defStmt,source.getAccessPath().getBaseType());        }      } else       if (rightValue == source.getAccessPath().getPlainValue()) {        Type newType=source.getAccessPath().getBaseType();        if (leftValue instanceof ArrayRef)         newType=buildArrayOrAddDimension(newType); else         if (defStmt.getRightOp() instanceof ArrayRef)         newType=((ArrayType)newType).getElementType();        if (defStmt.getRightOp() instanceof CastExpr) {          CastExpr ce=(CastExpr)defStmt.getRightOp();          if (!checkCast(source.getAccessPath(),ce.getCastType()))           return Collections.emptySet();          if (!Scene.v().getFastHierarchy().canStoreType(newType,ce.getCastType()))           newType=ce.getCastType();        } else         if (defStmt.getRightOp() instanceof LengthExpr) {          assert source.getAccessPath().getBaseType() instanceof ArrayType;          newLeftAbs=source.deriveNewAbstraction(new AccessPath(leftValue,null,IntType.v(),(Type[])null,true),defStmt);        } else         if (defStmt.getRightOp() instanceof InstanceOfExpr)         newLeftAbs=source.deriveNewAbstraction(new AccessPath(leftValue,null,BooleanType.v(),(Type[])null,true),defStmt);        if (newLeftAbs == null)         newLeftAbs=source.deriveNewAbstraction(source.getAccessPath().copyWithNewValue(leftValue,newType,false),defStmt);      }      if (newLeftAbs != null) {        res.add(newLeftAbs);        for (        Unit u : interproceduralCFG().getPredsOf(defStmt))         fSolver.processEdge(new PathEdge<Unit,Abstraction>(d1,u,newLeftAbs));      }    }    if (rightValue instanceof Local || rightValue instanceof FieldRef) {      boolean addRightValue=false;      boolean cutFirstField=false;      Type targetType=null;      if (leftValue instanceof InstanceFieldRef) {        InstanceFieldRef leftRef=(InstanceFieldRef)leftValue;        if (leftRef.getBase() == source.getAccessPath().getPlainValue()) {          if (source.getAccessPath().isInstanceFieldRef()) {            if (source.getAccessPath().firstFieldMatches(leftRef.getField())) {              targetType=source.getAccessPath().getFirstFieldType();              addRightValue=true;              cutFirstField=true;            }          }        }      } else       if (leftValue instanceof Local && source.getAccessPath().isInstanceFieldRef()) {        Local base=source.getAccessPath().getPlainValue();        if (leftValue == base) {          targetType=source.getAccessPath().getBaseType();          addRightValue=true;        }      } else       if (leftValue instanceof ArrayRef) {        Local leftBase=(Local)((ArrayRef)leftValue).getBase();        if (leftBase == source.getAccessPath().getPlainValue()) {          addRightValue=true;          targetType=source.getAccessPath().getBaseType();          assert source.getAccessPath().getBaseType() instanceof ArrayType;        }      } else       if (leftValue == source.getAccessPath().getPlainValue()) {        addRightValue=true;        targetType=source.getAccessPath().getBaseType();        if (defStmt.getRightOp() instanceof CastExpr) {          CastExpr ce=(CastExpr)defStmt.getRightOp();          if (!checkCast(source.getAccessPath(),ce.getOp().getType()))           return Collections.emptySet();        }      }      if (addRightValue) {        if (targetType != null) {          if (defStmt.getRightOp() instanceof ArrayRef)           targetType=buildArrayOrAddDimension(targetType); else           if (leftValue instanceof ArrayRef) {            assert source.getAccessPath().getBaseType() instanceof ArrayType;            targetType=((ArrayType)targetType).getElementType();            if (!canCastType(rightValue.getType(),targetType))             addRightValue=false; else {              if (isObjectLikeType(targetType))               targetType=rightValue.getType();            }          }        }        if (defStmt.getRightOp() instanceof LengthExpr)         targetType=null;        if (addRightValue) {          if (!canCastType(rightValue.getType(),targetType))           addRightValue=false;        }        if (addRightValue)         if (!enableStaticFields && rightValue instanceof StaticFieldRef)         addRightValue=false;        if (addRightValue) {          Abstraction newAbs=source.deriveNewAbstraction(rightValue,cutFirstField,defStmt,targetType);          res.add(newAbs);          for (          Unit u : interproceduralCFG().getPredsOf(defStmt))           fSolver.processEdge(new PathEdge<Unit,Abstraction>(d1,u,newAbs));        }      }    }  } else   if (defStmt instanceof IdentityStmt)   res.add(source);  return res;}  }
class C{  @Override protected final void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  boolean orig=ownerDocument.mutationEvents;  ownerDocument.mutationEvents=false;  name=ownerDocument.getNodeName(fNodeIndex);  setupDefaultAttributes();  int index=ownerDocument.getNodeExtra(fNodeIndex);  if (index != -1) {    NamedNodeMap attrs=getAttributes();    do {      NodeImpl attr=(NodeImpl)ownerDocument.getNodeObject(index);      attrs.setNamedItem(attr);      index=ownerDocument.getPrevSibling(index);    } while (index != -1);  }  ownerDocument.mutationEvents=orig;}  }
class C{  public ResourcesPoet addIntegerArray(String name,@NotNull List<Integer> values){  ArrayList<String> integers=new ArrayList<>();  for (  Integer value : values) {    integers.add(String.valueOf(value));  }  addIntegerArrayStrings(name,integers);  return this;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public void hide(){  if (!isShow)   return;  try {    hide.invoke(mTN);  } catch (  InvocationTargetException|IllegalAccessException e) {    e.printStackTrace();  }  isShow=false;}  }
class C{  public Vector2f multLocal(Vector2f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x*=vec.x;  y*=vec.y;  return this;}  }
class C{  public static void sendVerificationToken(AirMapCallback<Void> listener){  PilotService.sendVerificationToken(listener);}  }
class C{  public long skip(long n){  if (_position + n > _count)   n=_count - _position;  if (n < 0)   return 0;  _position+=n;  return n;}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  float bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    float variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_RandomMoveLoc_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200705,skillcaster,skillname);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public void addCategoryLimitations(boolean include,String... categoryVelocityVarNames){  query.append(" " + (include ? "+" : "-") + "(");  for (  String categoryVelocityVarName : categoryVelocityVarNames) {    query.append("categories:" + escapeValue(categoryVelocityVarName) + " ");  }  query.append(")");}  }
class C{  public boolean isSlotEquipped(long slot){  return !(equipment.get(slot) == null);}  }
class C{  public boolean types_for_sites(){  return soot.PhaseOptions.getBoolean(options,"types-for-sites");}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public XMLConfigurationException(short type,String identifier){  super(identifier);  fType=type;  fIdentifier=identifier;}  }
class C{  public PhotosGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LEAVE_INSTANCE_FORCE(String value0){  return new SM_SYSTEM_MESSAGE(1400046,value0);}  }
class C{  public SectionSeparator(String text,Font font){  if (text == null)   throw new IllegalArgumentException("Text cannot be null");  initComponents(text,font);}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();  name=ownerDocument.getNodeName(fNodeIndex);  int index=name.indexOf(':');  if (index < 0) {    localName=name;  } else {    localName=name.substring(index + 1);  }  int extra=ownerDocument.getNodeExtra(fNodeIndex);  isSpecified((extra & SPECIFIED) != 0);  isIdAttribute((extra & ID) != 0);  namespaceURI=ownerDocument.getNodeURI(fNodeIndex);  int extraNode=ownerDocument.getLastChild(fNodeIndex);  type=ownerDocument.getTypeInfo(extraNode);}  }
class C{  public synchronized void close(){  closed=true;  list.add(null);  notify();}  }
class C{  public void add(String[] str){  for (int i=0; i < str.length; i++)   add(str[i]);  hasChanged=true;}  }
class C{  public String assign(String value,Object... replacements){  if (setter() != null) {    return assignIfPossible(value,replacements);  } else {    throw new IllegalArgumentException("Attempt was made to generate assignment/setter code for [" + name + "."+ (property != null ? property : type)+ "] which has no setter/assignment method");  }}  }
class C{  public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,"uil-pool-"));}  }
class C{  public void showOnAnchor(@NonNull View anchor,@VerticalPosition int vertPos,@HorizontalPosition int horizPos,int x,int y){  View contentView=getContentView();  contentView.measure(View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);  final int measuredW=contentView.getMeasuredWidth();  final int measuredH=contentView.getMeasuredHeight();switch (vertPos) {case VerticalPosition.ABOVE:    y-=measuredH + anchor.getHeight();  break;case VerticalPosition.ALIGN_BOTTOM:y-=measuredH;break;case VerticalPosition.CENTER:y-=anchor.getHeight() / 2 + measuredH / 2;break;case VerticalPosition.ALIGN_TOP:y-=anchor.getHeight();break;case VerticalPosition.BELOW:break;}switch (horizPos) {case HorizontalPosition.LEFT:x-=measuredW;break;case HorizontalPosition.ALIGN_RIGHT:x-=measuredW - anchor.getWidth();break;case HorizontalPosition.CENTER:x+=anchor.getWidth() / 2 - measuredW / 2;break;case HorizontalPosition.ALIGN_LEFT:break;case HorizontalPosition.RIGHT:x+=anchor.getWidth();break;}PopupWindowCompat.showAsDropDown(this,anchor,x,y,Gravity.NO_GRAVITY);}  }
class C{  @Override public boolean unlock(){  boolean status;  try {    if (null != fileLock) {      fileLock.release();    }    status=true;  } catch (  IOException e) {    status=false;  } finally {    if (null != fileOutputStream) {      try {        fileOutputStream.close();        if (FileFactory.getCarbonFile(lockFilePath,FileFactory.getFileType(lockFilePath)).delete()) {          LOGGER.info("Successfully deleted the lock file " + lockFilePath);        } else {          LOGGER.error("Not able to delete the lock file " + lockFilePath);        }      } catch (      IOException e) {        LOGGER.error(e.getMessage());      }    }  }  return status;}  }
class C{  public void print(NumberFormat format,int width){  print(new PrintWriter(System.out,true),format,width);}  }
class C{  public void initHMMData(String voiceName,String marybase,String configFile) throws Exception {  Properties props=new Properties();  FileInputStream fis=new FileInputStream(marybase + configFile);  props.load(fis);  fis.close();  Map<String,String> maryBaseReplacer=new HashMap<String,String>();  maryBaseReplacer.put("jar:",marybase);  initHMMData(new PropertiesAccessor(props,false,maryBaseReplacer),voiceName);}  }
class C{  public boolean containsGrammar(XMLGrammarDescription desc){synchronized (fGrammars) {    clean();    int hash=hashCode(desc);    int index=(hash & 0x7FFFFFFF) % fGrammars.length;    for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {      Grammar tempGrammar=(Grammar)entry.grammar.get();      if (tempGrammar == null) {        removeEntry(entry);      } else       if ((entry.hash == hash) && equals(entry.desc,desc)) {        return true;      }    }    return false;  }}  }
class C{  @Override public String toString(){  if (val.getType().isNumeric())   return val.toString(); else   return "'" + val.toString() + "'";}  }
class C{  public EnumeratedDistribution(final List<Pair<T,Double>> pmf) throws MathIllegalArgumentException {  singletons=new ArrayList<>(pmf.size());  final double[] probs=new double[pmf.size()];  for (int i=0; i < pmf.size(); i++) {    final Pair<T,Double> sample=pmf.get(i);    singletons.add(sample.getKey());    final double p=sample.getValue();    probs[i]=p;  }  probabilities=checkAndNormalize(probs);  cumulativeProbabilities=new double[probabilities.length];  double sum=0;  for (int i=0; i < probabilities.length; i++) {    sum+=probabilities[i];    cumulativeProbabilities[i]=sum;  }}  }
class C{  public static SuperPrefs newInstance(Context context){  return new SuperPrefs(context);}  }
class C{  public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {  String sDataString=utils.loadFileToStringWithNewlines(sFilename);  setDataString(sDataString);}  }
class C{  @Override public Object oneTransition(QName elementName,int[] currentState,SubstitutionGroupHandler subGroupHandler){  if (currentState[0] < 0) {    currentState[0]=XSCMValidator.SUBSEQUENT_ERROR;    return null;  }  currentState[0]=XSCMValidator.FIRST_ERROR;  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_USE_HOUSE_OBJECT_ITEM_EQUIP(DescriptionId id){  return new SM_SYSTEM_MESSAGE(1401294,id);}  }
class C{  @Override public boolean ready() throws IOException {  try {    return in.ready();  } catch (  IOException e) {    handleIOException(e);    return false;  }}  }
class C{  private static float alignmentProbability(Rectangle[] widget){  float[] start=new float[widget.length];  float[] center=new float[widget.length];  float[] end=new float[widget.length];  float widthSum=0;  int count=0;  for (int i=0; i < end.length; i++) {    if (widget[i] == null) {      start[i]=Float.NaN;      end[i]=Float.NaN;      center[i]=Float.NaN;      continue;    }    start[i]=widget[i].x;    end[i]=start[i] + widget[i].width;    center[i]=(start[i] + end[i]) / 2;    widthSum+=widget[i].width;    count++;  }  float startDiv=standardDeviation(start);  float centerDiv=standardDeviation(center);  float endDiv=standardDeviation(end);  if (count > 2) {    return 1 - Math.min(startDiv,Math.min(centerDiv,endDiv)) / (widthSum / count);  }  return 0;}  }
class C{  private void notifyNewTabCreated(Tab tab){  for (  TabModelSelectorObserver listener : mObservers) {    listener.onNewTabCreated(tab);  }}  }
class C{  private static void marshallChapters(InputChapterList chapters,String schemaPath,File file){  JAXBContext jaxbContext;  try {    jaxbContext=JAXBContext.newInstance(InputChapterList.class);    Marshaller jaxbMarshaller=createMarshaller(jaxbContext,schemaPath);    JAXBElement<InputChapterList> chaptersJaxb=new ObjectFactory().createInputChapters(chapters);    jaxbMarshaller.marshal(chaptersJaxb,file);  } catch (  SAXException|JAXBException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void close() throws IOException {  eof=false;  position=0;  mark=-1;}  }
class C{  private void createParentDirectories(File file){  if (!file.exists()) {    String path=file.getAbsolutePath();    String dirs=path.substring(0,path.lastIndexOf(File.separator));    File dir=new File(dirs);    if (dir.exists()) {      return;    }    if (!dir.mkdirs()) {      reportError("Failed to create directories: " + dir.getAbsolutePath(),new IOException("The system cannot find the path specified: " + dir.getAbsolutePath()),ErrorManager.OPEN_FAILURE);    }  }}  }
class C{  public static String loadFileToStringWithNewlines(String sFilename){  StringBuffer sb=new StringBuffer();  try {    BufferedReader in=new BufferedReader(new FileReader(sFilename));    String line;    while ((line=in.readLine()) != null) {      sb.append(line);      sb.append("\n");    }    in.close();  } catch (  Exception e) {    System.err.println("Coult not load file:" + sFilename);    e.printStackTrace(System.err);  }  return sb.toString();}  }
class C{  public boolean total_context_counts(){  return soot.PhaseOptions.getBoolean(options,"total-context-counts");}  }
class C{  public GreaterEqualsSpacePredicate(Comparable<?> expectedValue,Comparator<?> comparator){  super(expectedValue,comparator);}  }
class C{  public Value add(Value num1,Value num2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  private void resolveAnchorView(final View forChild,final CoordinatorLayout parent){  mAnchorView=parent.findViewById(mAnchorId);  if (mAnchorView != null) {    if (mAnchorView == parent) {      if (parent.isInEditMode()) {        mAnchorView=mAnchorDirectChild=null;        return;      }      throw new IllegalStateException("View can not be anchored to the the parent CoordinatorLayout");    }    View directChild=mAnchorView;    for (ViewParent p=mAnchorView.getParent(); p != parent && p != null; p=p.getParent()) {      if (p == forChild) {        if (parent.isInEditMode()) {          mAnchorView=mAnchorDirectChild=null;          return;        }        throw new IllegalStateException("Anchor must not be a descendant of the anchored view");      }      if (p instanceof View) {        directChild=(View)p;      }    }    mAnchorDirectChild=directChild;  } else {    if (parent.isInEditMode()) {      mAnchorView=mAnchorDirectChild=null;      return;    }    throw new IllegalStateException("Could not find CoordinatorLayout descendant view" + " with id " + parent.getResources().getResourceName(mAnchorId) + " to anchor view "+ forChild);  }}  }
class C{  public static void copy(InputStream input,Writer output) throws IOException {  InputStreamReader in=new InputStreamReader(input);  copy(in,output);}  }
class C{  public boolean isNextEvolutionOf(Pokemon otherPokemon){  for (  Pokemon evolution : otherPokemon.evolutions) {    if (number == evolution.number) {      return true;    }  }  return false;}  }
class C{  protected AudioMoveToAlbumQuery audioIds(List<Integer> value){  return unsafeParam("audio_ids",value);}  }
class C{  public AudioInputStream convertToAudioInputStream() throws IOException, UnsupportedAudioFileException {  if (ram) {    assert os instanceof ByteArrayOutputStream;    assert f == null;    byte[] audioData=((ByteArrayOutputStream)os).toByteArray();    return AudioSystem.getAudioInputStream(new ByteArrayInputStream(audioData));  } else {    assert os instanceof FileOutputStream;    assert f != null;    os.close();    long byteLength=f.length();    return AudioSystem.getAudioInputStream(f);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_BATTLE_TIME(String value0){  return new SM_SYSTEM_MESSAGE(1400254,value0);}  }
class C{  public NGramHistoDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  @Override public <T>EventPoller<T> newPoller(DataProvider<T> dataProvider,Sequence... gatingSequences){  return EventPoller.newInstance(dataProvider,this,new Sequence(),cursor,gatingSequences);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public EQExpr fullCopy(){  EQExpr tree=(EQExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void updateConfigObject(String setup_step,String setup_state,String setup_phase,String setup_message){  config.addProperty(Constants.SETUP_STEP,setup_step);  config.addProperty(Constants.SETUP_STATE,setup_state);  config.addProperty(Constants.SETUP_PHASE,setup_phase);  config.addProperty(Constants.SETUP_MESSAGE,setup_message);  notifyListeners(this,config);}  }
class C{  public ChangeSet decrement(String path,long delta){  return increment(path,-delta);}  }
class C{  public TrackedEntityInstanceQueryParams addOrganisationUnit(OrganisationUnit unit){  this.organisationUnits.add(unit);  return this;}  }
class C{  public Ray(Vector2 direction){  this(new Vector2(),direction);}  }
class C{  public BigReal(double val,MathContext mc){  d=new BigDecimal(val,mc);}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_MAGIC_OTHER_HOSTILE(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1250220,skilltarget,skillcaster);}  }
class C{  public void scaleComponentTree(JComponent root){  if (myScaleFactor == 1.0f)   return;  if (DEBUG)   LOG.info("Scaling components from \"" + myClazz.getSimpleName() + "\"");  scaleComponentTreeWorker(root);  if (DEBUG)   LOG.info("Done scaling components from \"" + myClazz.getSimpleName() + "\": "+ myScaledValueCount+ " values scaled");  root.putClientProperty(SCALE_FACTOR_KEY,new Float(myScaleFactor));}  }
class C{  private static void createDataSchema(FileSystem fs,boolean hdfs) throws IOException {  File file=File.createTempFile(DATA_SCHEMA_FILE_LOCALFS,".xml");  file.deleteOnExit();  logger.info("file = " + file.toString());  SystemConfiguration.setProperty("data.schemas",file.toString());  OutputStreamWriter osw=null;  if (hdfs) {    Path filePath=new Path(DATA_SCHEMA_FILE_HDFS);    fs.deleteOnExit(filePath);    osw=new OutputStreamWriter(fs.create(filePath,true));    logger.info("hdfs: filePath = " + filePath.toString());  }  try {    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();    Document doc=dBuilder.newDocument();    Element rootElement=doc.createElement("schema");    doc.appendChild(rootElement);    Element schemaNameElement=doc.createElement("schemaName");    schemaNameElement.appendChild(doc.createTextNode(TEST_DATA_SCHEMA_NAME));    rootElement.appendChild(schemaNameElement);    String primitiveTypePartitionerName=PrimitiveTypePartitioner.class.getName();    String ipPartitionerName=IPDataPartitioner.class.getName();    String datePartitioner=ISO8601DatePartitioner.class.getName();    TestUtils.addElement(doc,rootElement,DATE,PrimitiveTypePartitioner.STRING,"false",datePartitioner);    TestUtils.addElement(doc,rootElement,QNAME,PrimitiveTypePartitioner.STRING,"false",primitiveTypePartitionerName);    TestUtils.addElement(doc,rootElement,SRCIP,PrimitiveTypePartitioner.STRING,"false",ipPartitionerName);    TestUtils.addElement(doc,rootElement,DSTIP,PrimitiveTypePartitioner.STRING,"false",ipPartitionerName);    TestUtils.addElement(doc,rootElement,QTYPE,PrimitiveTypePartitioner.SHORT,"true",primitiveTypePartitionerName);    TestUtils.addElement(doc,rootElement,RCODE,PrimitiveTypePartitioner.INT,"false",primitiveTypePartitionerName);    TestUtils.addElement(doc,rootElement,IPS,PrimitiveTypePartitioner.STRING,"true",ipPartitionerName);    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    DOMSource source=new DOMSource(doc);    StreamResult resultLocalFS=new StreamResult(file);    transformer.transform(source,resultLocalFS);    if (hdfs) {      StreamResult resultHDFS=new StreamResult(osw);      transformer.transform(source,resultHDFS);    }    StreamResult consoleResult=new StreamResult(System.out);    transformer.transform(source,consoleResult);    System.out.println();    if (osw != null) {      osw.close();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public RepositoryChanged updateExistingRepository(String repoName,String repoRemoteLocation,String repoUserName,String repoPassword,String repoLocations,String repoBranch,boolean useCredentials){  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200592,skillcaster,skillname);}  }
class C{  public synchronized void resume(){}  }
class C{  public static void assertChiSquareAccept(int[] values,double[] expected,long[] observed,double alpha){  String[] labels=new String[values.length];  for (int i=0; i < values.length; i++) {    labels[i]=Integer.toString(values[i]);  }  assertChiSquareAccept(labels,expected,observed,alpha);}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new Opt(),2);}  }
class C{  @RequestMapping(value="/race-results",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceResult> updateRaceResult(@RequestBody RaceResult raceResult) throws URISyntaxException {  log.debug("REST request to update RaceResult : {}",raceResult);  if (raceResult.getRaceResultId() == null) {    return createRaceResult(raceResult);  }  RaceResult result=raceResultRepository.save(raceResult);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("raceResult",raceResult.getRaceResultId().toString())).body(result);}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  int nSamples=len / frameSize;  int totalRead=0;  int currentPos=off;  do {    int toRead=nSamples - totalRead;    if (toRead > sampleBuf.length)     toRead=sampleBuf.length;    int nRead=source.getData(sampleBuf,0,toRead);    if (frameSize == 1) {      for (int i=0; i < nRead; i++, currentPos++) {        int sample=(int)Math.round(sampleBuf[i] * 127.0);        b[currentPos]=(byte)((sample >> 8) & 0xFF);      }    } else     if (frameSize == 2) {      boolean bigEndian=format.isBigEndian();      for (int i=0; i < nRead; i++, currentPos+=2) {        int sample=(int)Math.round(sampleBuf[i] * 32767.0);        if (sample > MAX_AMPLITUDE || sample < -MAX_AMPLITUDE) {          System.err.println("Warning: signal amplitude out of range: " + sample);        }        byte hibyte=(byte)(sample >> 8);        byte lobyte=(byte)(sample & 0xFF);        if (!bigEndian) {          b[currentPos]=lobyte;          b[currentPos + 1]=hibyte;        } else {          b[currentPos]=hibyte;          b[currentPos + 1]=lobyte;        }      }    } else {      boolean bigEndian=format.isBigEndian();      for (int i=0; i < nRead; i++, currentPos+=3) {        int sample=(int)Math.round(sampleBuf[i] * 8388605.0);        byte hibyte=(byte)(sample >> 16);        byte midbyte=(byte)((sample >> 8) & 0xFF);        byte lobyte=(byte)(sample & 0xFF);        if (!bigEndian) {          b[currentPos]=lobyte;          b[currentPos + 1]=midbyte;          b[currentPos + 2]=hibyte;        } else {          b[currentPos]=hibyte;          b[currentPos + 1]=midbyte;          b[currentPos + 2]=lobyte;        }      }    }    totalRead+=nRead;    assert currentPos <= off + len;  } while (source.hasMoreData() && totalRead < nSamples);  if (totalRead == 0)   return -1; else   return totalRead * frameSize;}  }
class C{  public static final double newtonsToPounds(double newtons){  return newtons * NEWTON_TO_POUND;}  }
class C{  public static void removePropertiesListListener(PropertiesListListener listener){synchronized (propertieslistListeners) {    propertieslistListeners.remove(listener);  }}  }
class C{  public DebugRequestHandler(DataRequestHandler next,ObjectMapper mapper){  super(mapper);  this.next=next;}  }
class C{  private Connection handleRedirect(IBasicRequest oldRequest,Headers responseHeaders){  IBasicRequest redirectRequest=null;  RedirectHandler redirectHandler=oldRequest.getRedirectHandler();  if (redirectHandler != null) {    if (redirectHandler.isDisallowedRedirect(responseHeaders))     return new DefaultConnection(null,responseHeaders,null,null); else     redirectRequest=redirectHandler.onRedirect(responseHeaders);  }  if (redirectRequest == null) {    redirectRequest=new StringRequest(responseHeaders.getLocation(),oldRequest.getRequestMethod());    redirectRequest.setSSLSocketFactory(oldRequest.getSSLSocketFactory());    redirectRequest.setProxy(oldRequest.getProxy());  }  return getConnection(redirectRequest);}  }
class C{  public void addEdge(Object from,Object to){  if (!super.containsNode(from))   super.addNode(from);  if (!super.containsNode(to))   super.addNode(to);  super.addEdge(from,to);}  }
class C{  private int seekBarProgressToAnimationDuration(@IntRange(from=0,to=100) int progress){  if (progress <= 0) {    return ANIMATION_DURATION_MS_MIN;  }  if (progress >= 100) {    return ANIMATION_DURATION_MS_MAX;  }  final float progressPercentage=((float)progress) / 100f;  return (int)(progressPercentage * (ANIMATION_DURATION_MS_MAX - ANIMATION_DURATION_MS_MIN)) + ANIMATION_DURATION_MS_MIN;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private int computeOrphan2AncestorMappingRec(Node v,Map<Integer,Integer> orphan2AncestorMapping,Set<Integer> orphans) throws CanceledException {  if (progress != null)   progress.incrementProgress();  int taxId=(Integer)v.getInfo();  if (taxId < 0)   return 0;  int below=0;  Set<Integer> orphansBelow=new HashSet<>();  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    Node w=e.getTarget();    below+=computeOrphan2AncestorMappingRec(w,orphan2AncestorMapping,orphansBelow);  }  Integer count=id2count.get(taxId);  if (count == null)   count=0;  if (below + count >= minSupport && !idMapper.isDisabled(taxId)) {    for (    Integer id : orphansBelow) {      orphan2AncestorMapping.put(id,taxId);    }  } else {    if (count > 0) {      orphansBelow.add(taxId);    }    orphans.addAll(orphansBelow);  }  return below + count;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  setMeasuredDimension(getResources().getDisplayMetrics().widthPixels,DisplayUtils.getStatusBarHeight(getResources()));}  }
class C{  public int equivHashCode(){  return returnType.hashCode() * 101 + modifiers * 17 + name.hashCode();}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  public Polynomial(double[] coeffs){  this.coeffs=coeffs;}  }
class C{  private void storeOriginalData(FieldConfigValuePopulateInterface field){  valueMap.put(field,field.getStringValue());}  }
class C{  public Vector3f multLocal(float scalar){  x*=scalar;  y*=scalar;  z*=scalar;  return this;}  }
class C{  @NotNull private List<StyleResourceValue> resolveNonFrameworkThemes(){  LocalResourceRepository repository=AppResourceRepository.getAppResources(myConfiguration.getModule(),true);  if (repository == null) {    return Collections.emptyList();  }  return getThemes(repository.getConfiguredResources(ResourceType.STYLE,myConfiguration.getFullConfig()),false);}  }
class C{  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    boolean zzR=false;    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {switch (zzBufferL[zzCurrentPosL]) {case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        yyline++;      yycolumn=0;    zzR=false;  break;case '\r':yyline++;yycolumn=0;zzR=true;break;case '\n':if (zzR) zzR=false; else {yyline++;yycolumn=0;}break;default :zzR=false;yycolumn++;}}if (zzR) {boolean zzPeek;if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek=false; else {boolean eof=zzRefill();zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;if (eof) zzPeek=false; else zzPeek=zzBufferL[zzMarkedPosL] == '\n';}if (zzPeek) yyline--;}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;zzState=zzLexicalState;zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {zzInput=YYEOF;break zzForAction;} else {zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 45:{return sym(Terminals.LTEQ);}case 130:break;case 39:{error("unterminated character literal at end of line");}case 131:break;case 70:{return sym(Terminals.INT);}case 132:break;case 94:{return sym(Terminals.VOID);}case 133:break;case 72:{return sym(Terminals.RSHIFTEQ);}case 134:break;case 25:{return sym(Terminals.AND);}case 135:break;case 114:{return sym(Terminals.EXTENDS);}case 136:break;case 109:{return sym(Terminals.THROWS);}case 137:break;case 78:{return sym(Terminals.CHARACTER_LITERAL,"\\");}case 138:break;case 48:{return sym(Terminals.ANDEQ);}case 139:break;case 55:{return sym(Terminals.MODEQ);}case 140:break;case 113:{return sym(Terminals.PUBLIC);}case 141:break;case 4:{return sym(Terminals.MULT);}case 142:break;case 51:{return sym(Terminals.OROR);}case 143:break;case 105:{return sym(Terminals.ASSERT);}case 144:break;case 75:{int val=Integer.parseInt(str().substring(2,len() - 1),8);return sym(Terminals.CHARACTER_LITERAL,new Character((char)val).toString());}case 145:break;case 21:{return sym(Terminals.NOT);}case 146:break;case 98:{return sym(Terminals.THROW);}case 147:break;case 19:{return sym(Terminals.GT);}case 148:break;case 33:{error("unterminated string at end of line");}case 149:break;case 84:{return sym(Terminals.ELSE);}case 150:break;case 18:{return sym(Terminals.EQ);}case 151:break;case 62:{strbuf.append('\t');}case 152:break;case 81:{return sym(Terminals.CHARACTER_LITERAL,"\b");}case 153:break;case 32:{strbuf.append(str());}case 154:break;case 11:{return sym(Terminals.RPAREN);}case 155:break;case 41:{return sym(Terminals.DO);}case 156:break;case 115:{return sym(Terminals.BOOLEAN);}case 157:break;case 43:{return sym(Terminals.GTEQ);}case 158:break;case 101:{return sym(Terminals.CLASS);}case 159:break;case 92:{return sym(Terminals.NULL_LITERAL);}case 160:break;case 93:{return sym(Terminals.EOF);}case 161:break;case 35:{return sym(Terminals.DIVEQ);}case 162:break;case 36:{return sym(Terminals.MULTEQ);}case 163:break;case 119:{return sym(Terminals.PRIVATE);}case 164:break;case 88:{return sym(Terminals.BYTE);}case 165:break;case 20:{return sym(Terminals.LT);}case 166:break;case 95:{return sym(Terminals.URSHIFTEQ);}case 167:break;case 28:{return sym(Terminals.XOR);}case 168:break;case 117:{return sym(Terminals.FINALLY);}case 169:break;case 121:{return sym(Terminals.STRICTFP);}case 170:break;case 83:{return sym(Terminals.CHARACTER_LITERAL,"\f");}case 171:break;case 9:{yybegin(STRING);strlit_start_line=yyline + 1;strlit_start_column=yycolumn + 1;strbuf.setLength(0);}case 172:break;case 86:{return sym(Terminals.BOOLEAN_LITERAL);}case 173:break;case 99:{return sym(Terminals.BREAK);}case 174:break;case 64:{strbuf.append('\n');}case 175:break;case 127:{return sym(Terminals.INSTANCEOF);}case 176:break;case 44:{return sym(Terminals.RSHIFT);}case 177:break;case 110:{return sym(Terminals.NATIVE);}case 178:break;case 73:{return sym(Terminals.URSHIFT);}case 179:break;case 57:{strbuf.append((char)Integer.parseInt(str().substring(1),8));}case 180:break;case 53:{return sym(Terminals.PLUSPLUS);}case 181:break;case 116:{return sym(Terminals.DEFAULT);}case 182:break;case 112:{return sym(Terminals.DOUBLE);}case 183:break;case 123:{return sym(Terminals.VOLATILE);}case 184:break;case 54:{return sym(Terminals.XOREQ);}case 185:break;case 26:{return sym(Terminals.OR);}case 186:break;case 118:{return sym(Terminals.PACKAGE);}case 187:break;case 107:{return sym(Terminals.SWITCH);}case 188:break;case 10:{return sym(Terminals.LPAREN);}case 189:break;case 46:{return sym(Terminals.LSHIFT);}case 190:break;case 66:{return sym(Terminals.ELLIPSIS);}case 191:break;case 42:{return sym(Terminals.EQEQ);}case 192:break;case 38:{return sym(Terminals.MINUSEQ);}case 193:break;case 122:{return sym(Terminals.CONTINUE);}case 194:break;case 120:{return sym(Terminals.ABSTRACT);}case 195:break;case 91:{return sym(Terminals.LONG);}case 196:break;case 27:{return sym(Terminals.PLUS);}case 197:break;case 82:{return sym(Terminals.CHARACTER_LITERAL,"\n");}case 198:break;case 77:{return sym(Terminals.CHARACTER_LITERAL,"\"");}case 199:break;case 16:{return sym(Terminals.SEMICOLON);}case 200:break;case 15:{return sym(Terminals.RBRACK);}case 201:break;case 103:{return sym(Terminals.FINAL);}case 202:break;case 56:{error("illegal escape sequence \"" + str() + "\"");}case 203:break;case 111:{return sym(Terminals.IMPORT);}case 204:break;case 87:{return sym(Terminals.THIS);}case 205:break;case 61:{strbuf.append('\r');}case 206:break;case 102:{return sym(Terminals.FLOAT);}case 207:break;case 97:{return sym(Terminals.SUPER);}case 208:break;case 85:{return sym(Terminals.ENUM);}case 209:break;case 8:{return sym(Terminals.MINUS);}case 210:break;case 63:{strbuf.append('\b');}case 211:break;case 1:{error("illegal character \"" + str() + "\"");}case 212:break;case 79:{return sym(Terminals.CHARACTER_LITERAL,"\r");}case 213:break;case 40:{return sym(Terminals.IF);}case 214:break;case 37:{return sym(Terminals.MINUSMINUS);}case 215:break;case 126:{return sym(Terminals.PROTECTED);}case 216:break;case 5:{return sym(Terminals.NUMERIC_LITERAL);}case 217:break;case 59:{strbuf.append('\"');}case 218:break;case 76:{return sym(Terminals.CHARACTER_LITERAL,"\'");}case 219:break;case 80:{return sym(Terminals.CHARACTER_LITERAL,"\t");}case 220:break;case 24:{return sym(Terminals.COLON);}case 221:break;case 71:{return sym(Terminals.FOR);}case 222:break;case 58:{strbuf.append('\'');}case 223:break;case 90:{return sym(Terminals.CHAR);}case 224:break;case 60:{strbuf.append('\\');}case 225:break;case 13:{return sym(Terminals.RBRACE);}case 226:break;case 67:{return sym(Terminals.CHARACTER_LITERAL,str().substring(1,len() - 1));}case 227:break;case 69:{return sym(Terminals.NEW);}case 228:break;case 14:{return sym(Terminals.LBRACK);}case 229:break;case 22:{return sym(Terminals.COMP);}case 230:break;case 3:{return sym(Terminals.DIV);}case 231:break;case 125:{return sym(Terminals.INTERFACE);}case 232:break;case 23:{return sym(Terminals.QUESTION);}case 233:break;case 124:{return sym(Terminals.TRANSIENT);}case 234:break;case 49:{return sym(Terminals.ANDAND);}case 235:break;case 47:{return sym(Terminals.NOTEQ);}case 236:break;case 29:{return sym(Terminals.MOD);}case 237:break;case 104:{return sym(Terminals.WHILE);}case 238:break;case 74:{return sym(Terminals.LSHIFTEQ);}case 239:break;case 31:{if (sub_line == 0 && sub_column == 0) {sub_line=yyline;sub_column=yycolumn;}}case 240:break;case 52:{return sym(Terminals.PLUSEQ);}case 241:break;case 65:{strbuf.append('\f');}case 242:break;case 100:{return sym(Terminals.CATCH);}case 243:break;case 17:{return sym(Terminals.COMMA);}case 244:break;case 129:{return sym(Terminals.SYNCHRONIZED);}case 245:break;case 50:{return sym(Terminals.OREQ);}case 246:break;case 108:{return sym(Terminals.RETURN);}case 247:break;case 68:{return sym(Terminals.TRY);}case 248:break;case 6:{return sym(Terminals.IDENTIFIER);}case 249:break;case 89:{return sym(Terminals.CASE);}case 250:break;case 12:{return sym(Terminals.LBRACE);}case 251:break;case 34:{yybegin(YYINITIAL);return sym(Terminals.STRING_LITERAL,strbuf.toString(),strlit_start_line,strlit_start_column,strbuf.length() + 2);}case 252:break;case 128:{return sym(Terminals.IMPLEMENTS);}case 253:break;case 106:{return sym(Terminals.STATIC);}case 254:break;case 30:{return sym(Terminals.AT);}case 255:break;case 7:{return sym(Terminals.DOT);}case 256:break;case 96:{return sym(Terminals.SHORT);}case 257:break;case 2:{}case 258:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{if (!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn - 1)) {sub_line=0;sub_column=0;error("error");}return sym(Terminals.EOF);}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void putAll(Map<String,String> map){  parameters.putAll(map);}  }
class C{  @Deprecated public boolean staticCatalog(){  return getUseStaticCatalog();}  }
class C{  public Boolean readProductCategory(EntityManager em,String pcXml,List<Product> products){  status=true;  try {    XMLInputFactory inputFactory=XMLInputFactory.newInstance();    in=getResourceAsInputStream(pcXml);    eventReader=inputFactory.createXMLEventReader(in);    ProductCategory pc=null;    while (eventReader.hasNext()) {      XMLEvent event=eventReader.nextEvent();      if (event.isStartElement()) {        StartElement startElement=event.asStartElement();        if (startElement.getName().getLocalPart() == (PC_PRODUCT_CATEGORY)) {          pc=new ProductCategory();        }        if (event.asStartElement().getName().getLocalPart().equals(PC_MAIN_CATEGORY)) {          event=eventReader.nextEvent();          String category=getEvent(event);          pc.setMainCategory(category);          pc.setMainCategoryName(category);          continue;        }        if (event.asStartElement().getName().getLocalPart().equals(PC_CATEGORY)) {          event=eventReader.nextEvent();          String category=getEvent(event);          pc.setCategory(category);          pc.setCategoryName(category);          pc.setNumberOfProducts((products != null) ? getNumberofProducts(products,category) : 0);          continue;        }      }      if (event.isEndElement()) {        EndElement endElement=event.asEndElement();        if (endElement.getName().getLocalPart() == (PC_PRODUCT_CATEGORY)) {          em.persist(pc);        }      }    }  } catch (  Exception e) {    logger.error("Exception occured",e);    status=false;  } finally {    try {      in.close();      eventReader.close();    } catch (    IOException e) {      logger.error("IO Exception occured",e);      status=false;    }catch (    XMLStreamException e) {      logger.error("XMLStream exception occured",e);      status=false;    }  }  return status;}  }
class C{  public CSVMigrator(Loader loader){  this.loader=loader;  loader.setBatchSize(1);}  }
class C{  public ViewsAnimator withViewsVisibilityBeforeAnimation(final int viewsVisibilityBeforeAnimation){  this.viewsVisibilityBeforeAnimation=viewsVisibilityBeforeAnimation;  return this;}  }
class C{  void release(Object obj,long txNum,int lockType){  Object anchor=getAnchor(obj);synchronized (anchor) {    Lockers lks=lockerMap.get(obj);    if (lks != null) {      releaseLock(lks,anchor,txNum,lockType);      if (!hasSLock(lks,txNum) && !hasXLock(lks,txNum) && !hasSixLock(lks,txNum)&& !hasIsLock(lks,txNum)&& !hasIxLock(lks,txNum)) {        getObjectSet(txNum).remove(obj);        if (!sLocked(lks) && !xLocked(lks) && !sixLocked(lks)&& !isLocked(lks)&& !ixLocked(lks)&& lks.requestSet.isEmpty())         lockerMap.remove(obj);      }    }  }}  }
class C{  public synchronized void animatePanAndZoomTo(final Point2D p,double scale,long duration){  Point2D pp=new Point2D.Double();  m_itransform.transform(p,pp);  animatePanAndZoomToAbs(pp,scale,duration);}  }
class C{  protected List<ResultSetMapper> buildResultSetMapperList(DataApiRequest apiRequest){  return apiRequest.getLogicalMetrics().stream().map(null).filter(null).collect(Collectors.toList());}  }
class C{  private static void formatNames(Iterable<List<String>> names){  if (names != null) {    for (    List<String> list : names) {      String name=list.get(0);      String[] components=new String[5];      int start=0;      int end;      int componentIndex=0;      while (componentIndex < components.length - 1 && (end=name.indexOf(';',start)) >= 0) {        components[componentIndex]=name.substring(start,end);        componentIndex++;        start=end + 1;      }      components[componentIndex]=name.substring(start);      StringBuilder newName=new StringBuilder(100);      maybeAppendComponent(components,3,newName);      maybeAppendComponent(components,1,newName);      maybeAppendComponent(components,2,newName);      maybeAppendComponent(components,0,newName);      maybeAppendComponent(components,4,newName);      list.set(0,newName.toString().trim());    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_OUTPUT_NPC(String value0){  return new SM_SYSTEM_MESSAGE(1400007,value0);}  }
class C{  public List<LocalDate> bottom(int n){  List<LocalDate> bottom=new ArrayList<>();  int[] values=data.toIntArray();  IntArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(PackedLocalDate.asLocalDate(values[i]));  }  return bottom;}  }
class C{  public static char readChar(){  scanner.useDelimiter(EMPTY_PATTERN);  String ch=scanner.next();  assert ch.length() == 1 : "Internal (Std)In.readChar() error!" + " Please contact the authors.";  scanner.useDelimiter(WHITESPACE_PATTERN);  return ch.charAt(0);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static void createAllTables(Database db,boolean ifNotExists){  CollectDao.createTable(db,ifNotExists);  UserDao.createTable(db,ifNotExists);}  }
class C{  static void record(ContextMenuParams params,int action){  assert action >= 0;  assert action < NUM_ACTIONS;  String histogramName;  if (params.isVideo()) {    histogramName="ContextMenu.SelectedOption.Video";  } else   if (params.isImage()) {    histogramName=params.isAnchor() ? "ContextMenu.SelectedOption.ImageLink" : "ContextMenu.SelectedOption.Image";  } else {    assert params.isAnchor();    histogramName="ContextMenu.SelectedOption.Link";  }  RecordHistogram.recordEnumeratedHistogram(histogramName,action,NUM_ACTIONS);}  }
class C{  public ColorIcon(){}  }
class C{  public String toString(){  return Category + "::" + Filename;}  }
class C{  public AccountUnbanUserQuery unbanUser(UserActor actor,int userId){  return new AccountUnbanUserQuery(getClient(),actor,userId);}  }
class C{  @Override protected final void startNamespaceScope(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  fNamespaceContext.pushContext();  if (element.prefix == XMLSymbols.PREFIX_XMLNS) {    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementXMLNSPrefix",new Object[]{element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);  }  int length=attributes.getLength();  for (int i=0; i < length; i++) {    String localpart=attributes.getLocalName(i);    String prefix=attributes.getPrefix(i);    if (prefix == XMLSymbols.PREFIX_XMLNS || prefix == XMLSymbols.EMPTY_STRING && localpart == XMLSymbols.PREFIX_XMLNS) {      String uri=fSymbolTable.addSymbol(attributes.getValue(i));      if (prefix == XMLSymbols.PREFIX_XMLNS && localpart == XMLSymbols.PREFIX_XMLNS) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      if (uri == NamespaceContext.XMLNS_URI) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      if (localpart == XMLSymbols.PREFIX_XML) {        if (uri != NamespaceContext.XML_URI) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      } else {        if (uri == NamespaceContext.XML_URI) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      }      prefix=localpart != XMLSymbols.PREFIX_XMLNS ? localpart : XMLSymbols.EMPTY_STRING;      if (uri == XMLSymbols.EMPTY_STRING && localpart != XMLSymbols.PREFIX_XMLNS) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"EmptyPrefixedAttName",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        continue;      }      fNamespaceContext.declarePrefix(prefix,uri.length() != 0 ? uri : null);    }  }  String prefix=element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;  element.uri=fNamespaceContext.getURI(prefix);  if (element.prefix == null && element.uri != null) {    element.prefix=XMLSymbols.EMPTY_STRING;  }  if (element.prefix != null && element.uri == null) {    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementPrefixUnbound",new Object[]{element.prefix,element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);  }  for (int i=0; i < length; i++) {    attributes.getName(i,fAttributeQName);    String aprefix=fAttributeQName.prefix != null ? fAttributeQName.prefix : XMLSymbols.EMPTY_STRING;    String arawname=fAttributeQName.rawname;    if (arawname == XMLSymbols.PREFIX_XMLNS) {      fAttributeQName.uri=fNamespaceContext.getURI(XMLSymbols.PREFIX_XMLNS);      attributes.setName(i,fAttributeQName);    } else     if (aprefix != XMLSymbols.EMPTY_STRING) {      fAttributeQName.uri=fNamespaceContext.getURI(aprefix);      if (fAttributeQName.uri == null) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributePrefixUnbound",new Object[]{element.rawname,arawname,aprefix},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      attributes.setName(i,fAttributeQName);    }  }  int attrCount=attributes.getLength();  for (int i=0; i < attrCount - 1; i++) {    String auri=attributes.getURI(i);    if (auri == null || auri == NamespaceContext.XMLNS_URI) {      continue;    }    String alocalpart=attributes.getLocalName(i);    for (int j=i + 1; j < attrCount; j++) {      String blocalpart=attributes.getLocalName(j);      String buri=attributes.getURI(j);      if (alocalpart == blocalpart && auri == buri) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNSNotUnique",new Object[]{element.rawname,alocalpart,auri},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }    }  }}  }
class C{  public PegGraph(CallGraph callGraph,Hierarchy hierarchy,PAG pag,Set methodsNeedingInlining,Set allocNodes,List<List> inlineSites,Map<SootMethod,String> synchObj,Set multiRunAllocNodes,Map<AllocNode,String> allocNodeToObj,Body unitBody,String threadName,SootMethod sm,boolean addExceEdge,boolean dontAddEdgeFromStmtBeforeAreaOfProtectionToCatchBlock){  this.allocNodeToObj=allocNodeToObj;  this.multiRunAllocNodes=multiRunAllocNodes;  this.synchObj=synchObj;  this.inlineSites=inlineSites;  this.allocNodes=allocNodes;  this.methodsNeedingInlining=methodsNeedingInlining;  logFile=new File("log.txt");  try {    fileWriter=new FileWriter(logFile);  } catch (  IOException io) {    System.err.println("Errors occur during create FileWriter !");  }  body=unitBody;  synch=new HashSet<List>();  exceHandlers=new HashSet<Unit>();  needInlining=true;  monitorObjs=new HashSet<Object>();  startToBeginNodes=new HashMap();  unitChain=body.getUnits();  int size=unitChain.size();  unitToSuccs=new HashMap(size * 2 + 1,0.7f);  unitToPreds=new HashMap(size * 2 + 1,0.7f);  unitToPegMap=new HashMap(size * 2 + 1,0.7f);  startToThread=new HashMap(size * 2 + 1,0.7f);  startToAllocNodes=new HashMap(size * 2 + 1,0.7f);  waitingNodes=new HashMap<String,FlowSet>(size * 2 + 1,0.7f);  joinStmtToThread=new HashMap<JPegStmt,Chain>();  threadNo=new HashMap();  threadNameToStart=new HashMap();  this.allocNodeToObj=new HashMap<AllocNode,String>(size * 2 + 1,0.7f);  allocNodeToThread=new HashMap<AllocNode,PegChain>(size * 2 + 1,0.7f);  notifyAll=new HashMap<String,Set<JPegStmt>>(size * 2 + 1,0.7f);  methodsNeedingInlining=new HashSet();  allNodes=new ArraySparseSet();  canNotBeCompacted=new HashSet();  threadAllocSites=new HashSet();  specialJoin=new HashSet<JPegStmt>();  UnitGraph mainUnitGraph=new CompleteUnitGraph(body);  mainPegChain=new PegChain(callGraph,hierarchy,pag,threadAllocSites,methodsNeedingInlining,allocNodes,inlineSites,synchObj,multiRunAllocNodes,allocNodeToObj,body,sm,threadName,true,this);  buildSuccessor(mainPegChain);  buildPredecessor(mainPegChain);  addMonitorStmt();  addTag();  buildHeadsAndTails();  try {    fileWriter.flush();    fileWriter.close();  } catch (  IOException io) {    System.err.println("Errors occur during close file  " + logFile.getName());  }}  }
class C{  public ExpressionColumn(Table table,Expression expr){  super(expr.getType(table.getSchema()));  m_table=table;  m_expr=expr;  m_lstnr=new Listener();  init();  int nrows=m_table.getRowCount();  m_cache=ColumnFactory.getColumn(getColumnType(),nrows);  m_valid=new BitSet(nrows);  m_expr.addExpressionListener(m_lstnr);}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  @Override public String toString(){  return "Host []";}  }
class C{  public void onDieSilence(){  this.getOwner().getMoveController().abortMove();  this.getOwner().setCasting(null);  this.getOwner().getEffectController().removeAllEffects();  if (getOwner() instanceof Player) {    if (((Player)getOwner()).getIsFlyingBeforeDeath()) {      getOwner().unsetState(CreatureState.ACTIVE);      getOwner().setState(CreatureState.FLOATING_CORPSE);    } else {      this.getOwner().setState(CreatureState.DEAD);    }  } else {    if (getOwner() instanceof Npc) {      if (((Npc)getOwner()).getObjectTemplate().isFloatCorpse()) {        getOwner().setState(CreatureState.FLOATING_CORPSE);      }    }    this.getOwner().setState(CreatureState.DEAD);  }}  }
class C{  SnippetParser(InputSupplier inputSupplier,String inputName){  this.inputSupplier=inputSupplier;  this.input=openInput(inputName);}  }
class C{  public synchronized void stop(){  this.running=false;  if (runningThread != null)   runningThread.interrupt();}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.GOODALL);}  }
class C{  public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  public static <T extends RealFieldElement<T>>FieldVector3D<T> crossProduct(final FieldVector3D<T> v1,final FieldVector3D<T> v2){  return v1.crossProduct(v2);}  }
class C{  public void removeEntry(Context context,IEntryHolder entryHolder,boolean origin,boolean fromLeaseExpiration,boolean shouldReplicate) throws SAException {}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public CacheException(String message){  super(message);}  }
class C{  Iter(){  for (; ; ) {    next=findFirst();    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public void bind(Activity activity){  List<IBinding> bindings=getViewBinder(activity).bind(activity);  for (  IBinding binding : bindings) {    Topping topping=getOrCreateTopping(binding.getToppingId());    autoUpdateBinding(binding,topping);  }  Set<IBinding> _bindings=getBindings(activity.getClass());  _bindings.addAll(bindings);}  }
class C{  private static String sanitizeTableName(String tableName){  return tableName.replaceAll("[^a-zA-Z0-9_]","_");}  }
class C{  public BisectionSolver(double relativeAccuracy,double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  public boolean use_older_type_assigner(){  return soot.PhaseOptions.getBoolean(options,"use-older-type-assigner");}  }
class C{  protected MessagesAddChatUserQuery chatId(int value){  return unsafeParam("chat_id",value);}  }
class C{  public List<String> updateDeletionStatus(List<String> loadIds,String tableFolderPath) throws Exception {  CarbonTableIdentifier carbonTableIdentifier=absoluteTableIdentifier.getCarbonTableIdentifier();  ICarbonLock carbonDeleteSegmentLock=CarbonLockFactory.getCarbonLockObj(carbonTableIdentifier,LockUsage.DELETE_SEGMENT_LOCK);  ICarbonLock carbonTableStatusLock=CarbonLockFactory.getCarbonLockObj(carbonTableIdentifier,LockUsage.TABLE_STATUS_LOCK);  String tableDetails=carbonTableIdentifier.getDatabaseName() + "." + carbonTableIdentifier.getTableName();  List<String> invalidLoadIds=new ArrayList<String>(0);  try {    if (carbonDeleteSegmentLock.lockWithRetries()) {      LOG.info("Delete segment lock has been successfully acquired");      CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());      String dataLoadLocation=carbonTablePath.getTableStatusFilePath();      LoadMetadataDetails[] listOfLoadFolderDetailsArray=null;      if (!FileFactory.isFileExist(dataLoadLocation,FileFactory.getFileType(dataLoadLocation))) {        LOG.error("Load metadata file is not present.");        return loadIds;      }      listOfLoadFolderDetailsArray=readLoadMetadata(tableFolderPath);      if (listOfLoadFolderDetailsArray != null && listOfLoadFolderDetailsArray.length != 0) {        updateDeletionStatus(loadIds,listOfLoadFolderDetailsArray,invalidLoadIds);        if (invalidLoadIds.isEmpty()) {          if (carbonTableStatusLock.lockWithRetries()) {            LOG.info("Table status lock has been successfully acquired");            writeLoadDetailsIntoFile(dataLoadLocation,listOfLoadFolderDetailsArray);          } else {            String errorMsg="Delete segment by id is failed for " + tableDetails + ". Not able to acquire the table status lock due to other operation running "+ "in the background.";            LOG.audit(errorMsg);            LOG.error(errorMsg);            throw new Exception(errorMsg + " Please try after some time.");          }        } else {          return invalidLoadIds;        }      } else {        LOG.audit("Delete segment by Id is failed. No matching segment id found.");        return loadIds;      }    } else {      String errorMsg="Delete segment by id is failed for " + tableDetails + ". Not able to acquire the delete segment lock due to another delete "+ "operation is running in the background.";      LOG.audit(errorMsg);      LOG.error(errorMsg);      throw new Exception(errorMsg + " Please try after some time.");    }  } catch (  IOException e) {    LOG.error("IOException" + e.getMessage());  } finally {    CarbonLockUtil.fileUnlock(carbonTableStatusLock,LockUsage.TABLE_STATUS_LOCK);    CarbonLockUtil.fileUnlock(carbonDeleteSegmentLock,LockUsage.DELETE_SEGMENT_LOCK);  }  return invalidLoadIds;}  }
class C{  public VideoAddAlbumQuery privacy(List<String> value){  return unsafeParam("privacy",value);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public MemberInterfaceDecl fullCopy(){  MemberInterfaceDecl tree=(MemberInterfaceDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean dateIsValid(String date){  return dateIsValid(date,null);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public void startRecordingAudio(String id,String file){  AudioPlayer audio=getOrCreatePlayer(id,file);  audio.startRecording(file);}  }
class C{  @DataProvider public Object[][] InvalidAuthProvider(){  return new Object[][]{{"user@foo.com",""},{"","user01"},{"user@foo.com","notMyPassword"},{"",""}};}  }
class C{  public void print(List<BOMNode> arr,int initialDepth){  print(arr,initialDepth,true);}  }
class C{  private boolean playWaveSamples(AudioPlayer player,FreeTTSSpeakable speakable,int numberSamples){  boolean ok=true;  int numberChannels=getNumberOfChannels();  int pmSizeSamples;  float pp=0;  byte[] samples=new byte[MAX_SAMPLE_SIZE];  byte[] residuals=getResiduals();  int[] residualSizes=getResidualSizes();  FloatList outBuffer=FloatList.createList(numberChannels + 1);  FloatList lpcCoefficients=FloatList.createList(numberChannels);  double multiplier=(double)getLPCRange() / 65535.0;  int s=0;  boolean firstPlay=true;  player.begin(numberSamples);  for (int r=0, i=0; (ok&=!speakable.isCompleted()) && i < numberOfFrames; i++) {    short[] frame=getFrame(i);    FloatList lpcCoeffs=lpcCoefficients;    for (int k=0; k < numberChannels; k++) {      lpcCoeffs.value=(float)((frame[k] + 32768.0) * multiplier) + lpcMinimum;      lpcCoeffs=lpcCoeffs.next;    }    pmSizeSamples=residualSizes[i];    for (int j=0; j < pmSizeSamples; j++, r++) {      FloatList backBuffer=outBuffer.prev;      float ob=residualToFloatMap[residuals[r] + 128];      lpcCoeffs=lpcCoefficients;      do {        ob+=lpcCoeffs.value * backBuffer.value;        backBuffer=backBuffer.prev;        lpcCoeffs=lpcCoeffs.next;      } while (lpcCoeffs != lpcCoefficients);      int sample=(int)(ob + (pp * POST_EMPHASIS));      samples[s++]=hibyte(sample);      samples[s++]=lobyte(sample);      if (s >= MAX_SAMPLE_SIZE) {        if ((ok&=!speakable.isCompleted()) && !player.write(samples)) {          ok=false;        }        s=0;      }      outBuffer.value=pp=ob;      outBuffer=outBuffer.next;    }  }  if ((ok&=!speakable.isCompleted()) && s > 0) {    ok=player.write(samples,0,s);    s=0;  }  if (ok&=!speakable.isCompleted()) {    ok=player.end();  }  return ok;}  }
class C{  public GeneralException(){  super();}  }
class C{  private void populateGroup(UpdateSymbolInterface parent,Box parentBox,GroupConfigInterface groupConfig,FieldConfigBase parentField){  groupConfig.createTitle(parentBox,parent);  if (groupConfig instanceof GroupConfig) {    GroupConfig group=(GroupConfig)groupConfig;    List<FieldConfigBase> fieldList=group.getFieldConfigList();    fieldConfigManager.addGroup(group);    registerForSymbolUpdates(fieldList,parent);    for (    FieldConfigBase field : fieldList) {      field.setParent(parentField);      addField(parentBox,parentField,field);    }    for (    GroupConfigInterface subGroup : group.getSubGroupList()) {      populateGroup(parent,parentBox,subGroup,parentField);    }  } else   if (groupConfig instanceof MultiOptionGroup) {    MultiOptionGroup multiOption=(MultiOptionGroup)groupConfig;    fieldConfigManager.addMultiOptionGroup(multiOption);    multiOption.createUI(fieldConfigManager,parentBox,parent.getClass());    for (    OptionGroup optionGroup : multiOption.getGroupList()) {      for (      GroupConfigInterface optionGroupConfig : optionGroup.getGroupList()) {        if (optionGroupConfig instanceof GroupConfig) {          populateOptionGroup(parent,(GroupConfig)optionGroupConfig);        }      }    }  }}  }
class C{  @Override public void normalize(){  if (isNormalized()) {    return;  }  if (needsSyncChildren()) {    synchronizeChildren();  }  ChildNode kid, next;  for (kid=firstChild; kid != null; kid=next) {    next=kid.nextSibling;    if (kid.getNodeType() == Node.TEXT_NODE) {      if (next != null && next.getNodeType() == Node.TEXT_NODE) {        ((Text)kid).appendData(next.getNodeValue());        removeChild(next);        next=kid;      } else {        if (kid.getNodeValue() == null || kid.getNodeValue().length() == 0) {          removeChild(kid);        }      }    } else     if (kid.getNodeType() == Node.ELEMENT_NODE) {      kid.normalize();    }  }  if (attributes != null) {    for (int i=0; i < attributes.getLength(); ++i) {      Node attr=attributes.item(i);      attr.normalize();    }  }  isNormalized(true);}  }
class C{  @Override public void endElement(QName element,Augmentations augs) throws XNIException {  handleEndElement(element,augs,false);}  }
class C{  public static <T>T readObjectFromFile(String path,Class<T> type,SparkContext sc) throws IOException {  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());  try (ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(fileSystem.open(new Path(path))))){    Object o;    try {      o=ois.readObject();    } catch (    ClassNotFoundException e) {      throw new RuntimeException(e);    }    return (T)o;  } }  }
class C{  private FieldRotation<T> composeInverseInternal(FieldRotation<T> r){  return new FieldRotation<T>(r.q0.multiply(q0).add(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))).negate(),r.q0.multiply(q1).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))).subtract(r.q1.multiply(q0)),r.q0.multiply(q2).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))).subtract(r.q2.multiply(q0)),r.q0.multiply(q3).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))).subtract(r.q3.multiply(q0)),false);}  }
class C{  protected void load(ResultSet r) throws SQLException {  ResultSetMetaData m=r.getMetaData();  int cols=m.getColumnCount();  for (int i=1; i <= cols; i++) {    Object o=r.getObject(i);    if (o instanceof java.sql.Date) {      o=((java.sql.Date)o).toString();    } else     if (o instanceof java.sql.Time) {      o=((java.sql.Time)o).toString();    } else     if (o instanceof java.sql.Timestamp) {      o=((java.sql.Timestamp)o).toString();    } else     if (o instanceof java.math.BigDecimal) {      o=o.toString();    }    String name=m.getColumnName(i);    this.set(name,o);  }}  }
class C{  @Override public void undo(Transaction tx){}  }
class C{  public SootMethod resolveConcreteDispatch(SootClass concreteType,SootMethod m){  concreteType.checkLevel(SootClass.HIERARCHY);  if (concreteType.isInterface()) {    throw new RuntimeException("A concrete type cannot be an interface: " + concreteType);  }  String methodSig=m.getSubSignature();  while (true) {    SootMethod method=concreteType.getMethodUnsafe(methodSig);    if (method != null) {      if (isVisible(concreteType,m)) {        if (method.isAbstract()) {          throw new RuntimeException("Error: Method call resolves to abstract method!");        }        return method;      }    }    if (!concreteType.hasSuperclass())     break;    concreteType=concreteType.getSuperclass();  }  return null;}  }
class C{  public SearchUsersObject(Context c){  this.adapter=new UserAdapter(c,new ArrayList<User>());  this.service=SearchService.getService();  this.searchQuery="";  this.photosPage=0;  this.refreshing=false;  this.loading=false;  this.over=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200696,skillcaster,num0,skillname);}  }
class C{  public static Document run(Bson cmd){  MongoDatabase d=MongoHelper.getDB();  if (d != null) {    return d.runCommand(cmd);  }  return null;}  }
class C{  public Builder merge(final Property property){  if (property.getter != null) {    getter=property.getter;    getterMethod=null;  }  if (property.setter != null) {    setter=property.setter;    setterMethod=null;  }  if (elementType == null || (property.elementType != null && elementType.isAssignableFrom(property.elementType))) {    elementType=property.elementType;  }  if (propertyType == null || (property.type != null && propertyType.isAssignableFrom(property.type))) {    propertyType=property.type;  }  name=property.name;  return this;}  }
class C{  private void adjustTopByAspectRatio(RectF rect,float aspectRatio){  rect.top=rect.bottom - rect.width() / aspectRatio;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_HE_IS_NEW_LEADER(String value0){  return new SM_SYSTEM_MESSAGE(1300998,value0);}  }
class C{  public boolean invoke(){  if (mClickListener != null && mClickListener.onMenuItemClick(this)) {    return true;  }  if (mMenu.dispatchMenuItemSelected(mMenu,this)) {    return true;  }  if (mIntent != null) {    try {      mMenu.getContext().startActivity(mIntent);      return true;    } catch (    ActivityNotFoundException e) {      Log.e(TAG,"Can't find activity to handle intent; ignoring",e);    }  }  return false;}  }
class C{  @TargetApi(21) public Bundler putSizeF(String key,SizeF value){  bundle.putSizeF(key,value);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_ENTER_INSTANCE_MAX_COUNT(int num0,String worldname1){  return new SM_SYSTEM_MESSAGE(1400201,num0,worldname1);}  }
class C{  public List<List<HashMap<String,String>>> parse(JSONObject jObject){  List<List<HashMap<String,String>>> routes=new ArrayList<List<HashMap<String,String>>>();  JSONArray jRoutes=null;  JSONArray jLegs=null;  JSONArray jSteps=null;  try {    jRoutes=jObject.getJSONArray("routes");    for (int i=0; i < jRoutes.length(); i++) {      jLegs=((JSONObject)jRoutes.get(i)).getJSONArray("legs");      List path=new ArrayList<HashMap<String,String>>();      for (int j=0; j < jLegs.length(); j++) {        jSteps=((JSONObject)jLegs.get(j)).getJSONArray("steps");        for (int k=0; k < jSteps.length(); k++) {          String polyline="";          polyline=(String)((JSONObject)((JSONObject)jSteps.get(k)).get("polyline")).get("points");          List<LatLng> list=decodePoly(polyline);          for (int l=0; l < list.size(); l++) {            HashMap<String,String> hm=new HashMap<String,String>();            hm.put("lat",Double.toString(((LatLng)list.get(l)).latitude));            hm.put("lng",Double.toString(((LatLng)list.get(l)).longitude));            path.add(hm);          }        }        routes.add(path);      }    }  } catch (  JSONException e) {    e.printStackTrace();  }catch (  Exception e) {  }  return routes;}  }
class C{  protected PollsGetVotersQuery answerIds(int... value){  return unsafeParam("answer_ids",value);}  }
class C{  private static void recordHistogram(int result){  RecordHistogram.recordEnumeratedHistogram("Geolocation.HeaderSentOrNot",result,UMA_MAX);}  }
class C{  public static Map<String,Object> pullAndReportEntitySyncData(DispatchContext dctx,Map<String,? extends Object> context){  EntitySyncContext esc=null;  Locale locale=(Locale)context.get("locale");  try {    esc=new EntitySyncContext(dctx,context);    Debug.logInfo("Doing pullAndReportEntitySyncData for entitySyncId=" + esc.entitySyncId + ", currentRunStartTime="+ esc.currentRunStartTime+ ", currentRunEndTime="+ esc.currentRunEndTime,module);    if ("Y".equals(esc.entitySync.get("forPushOnly"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtCannotDoEntitySyncPush",locale));    }    esc.runPullStartOrRestoreSavedResults();    while (esc.hasMoreTimeToSync()) {      esc.totalSplits++;      ArrayList<GenericValue> valuesToCreate=esc.assembleValuesToCreate();      ArrayList<GenericValue> valuesToStore=esc.assembleValuesToStore();      List<GenericEntity> keysToRemove=esc.assembleKeysToRemove();      esc.setTotalRowCounts(valuesToCreate,valuesToStore,keysToRemove);      if (Debug.infoOn())       Debug.logInfo("Service pullAndReportEntitySyncData returning - [" + valuesToCreate.size() + "] to create; ["+ valuesToStore.size()+ "] to store; ["+ keysToRemove.size()+ "] to remove; ["+ esc.totalRowsPerSplit+ "] total rows per split.",module);      if (esc.totalRowsPerSplit > 0) {        Map<String,Object> result=ServiceUtil.returnSuccess();        result.put("startDate",esc.startDate);        result.put("valuesToCreate",valuesToCreate);        result.put("valuesToStore",valuesToStore);        result.put("keysToRemove",keysToRemove);        return result;      } else {        esc.saveResultsReportedFromDataStore();        esc.advanceRunTimes();      }    }    if (!esc.hasMoreTimeToSync()) {      esc.saveFinalSyncResults();    }  } catch (  SyncAbortException e) {    return e.returnError(module);  }catch (  SyncErrorException e) {    e.saveSyncErrorInfo(esc);    return e.returnError(module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public CART(Node rootNode,FeatureDefinition featDef,Properties properties){  super(rootNode,featDef,properties);}  }
class C{  public static void addLooperPrinter(Printer printer){  addLooperPrinter(Looper.myLooper(),printer);}  }
class C{  public QuerierCLI(String[] args){  cliOptions=createOptions();  try {    CommandLineParser parser=new GnuParser();    commandLine=parser.parse(cliOptions,args,true);    if (hasOption("h")) {      printHelp();      System.exit(1);    }    if (!parseOptions()) {      logger.info("The provided options are not valid");      printHelp();      System.exit(1);    }  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  private boolean isOptionEnabled(UrlFilterRuleOption option){  loadRuleProperties();  return enabledOptions != null && enabledOptions.contains(option);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static ULong valueOf(String value) throws NumberFormatException {  return new ULong(value);}  }
class C{  public String printToString(MessageOrBuilder message){  StringBuilder result=new StringBuilder();  for (  FieldDescriptor field : getFieldsInNumberOrder(message.getDescriptorForType())) {    if (field.isRepeated() && message.getRepeatedFieldCount(field) == 0 || !field.isRepeated() && !message.hasField(field)) {      continue;    }    Object rawValue=message.getField(field);    @SuppressWarnings("unchecked") List<Object> values=field.isMapField() ? sortMapEntries(field,rawValue) : field.isRepeated() ? (List<Object>)rawValue : ImmutableList.of(rawValue);    for (    Object value : values) {      result.append(printFieldToString(field,value));    }  }  return result.toString();}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public double correlation(final double[] xArray,final double[] yArray) throws MathIllegalArgumentException {  MathArrays.checkEqualLength(xArray,yArray);  final int n=xArray.length;  final long numPairs=sum(n - 1);  DoublePair[] pairs=new DoublePair[n];  for (int i=0; i < n; i++) {    pairs[i]=new DoublePair(xArray[i],yArray[i]);  }  Arrays.sort(pairs);  long tiedXPairs=0;  long tiedXYPairs=0;  long consecutiveXTies=1;  long consecutiveXYTies=1;  DoublePair prev=pairs[0];  for (int i=1; i < n; i++) {    final DoublePair curr=pairs[i];    if (Double.compare(curr.getFirst(),prev.getFirst()) == 0) {      consecutiveXTies++;      if (Double.compare(curr.getSecond(),prev.getSecond()) == 0) {        consecutiveXYTies++;      } else {        tiedXYPairs+=sum(consecutiveXYTies - 1);        consecutiveXYTies=1;      }    } else {      tiedXPairs+=sum(consecutiveXTies - 1);      consecutiveXTies=1;      tiedXYPairs+=sum(consecutiveXYTies - 1);      consecutiveXYTies=1;    }    prev=curr;  }  tiedXPairs+=sum(consecutiveXTies - 1);  tiedXYPairs+=sum(consecutiveXYTies - 1);  long swaps=0;  DoublePair[] pairsDestination=new DoublePair[n];  for (int segmentSize=1; segmentSize < n; segmentSize<<=1) {    for (int offset=0; offset < n; offset+=2 * segmentSize) {      int i=offset;      final int iEnd=FastMath.min(i + segmentSize,n);      int j=iEnd;      final int jEnd=FastMath.min(j + segmentSize,n);      int copyLocation=offset;      while (i < iEnd || j < jEnd) {        if (i < iEnd) {          if (j < jEnd) {            if (Double.compare(pairs[i].getSecond(),pairs[j].getSecond()) <= 0) {              pairsDestination[copyLocation]=pairs[i];              i++;            } else {              pairsDestination[copyLocation]=pairs[j];              j++;              swaps+=iEnd - i;            }          } else {            pairsDestination[copyLocation]=pairs[i];            i++;          }        } else {          pairsDestination[copyLocation]=pairs[j];          j++;        }        copyLocation++;      }    }    final DoublePair[] pairsTemp=pairs;    pairs=pairsDestination;    pairsDestination=pairsTemp;  }  long tiedYPairs=0;  long consecutiveYTies=1;  prev=pairs[0];  for (int i=1; i < n; i++) {    final DoublePair curr=pairs[i];    if (Double.compare(curr.getSecond(),prev.getSecond()) == 0) {      consecutiveYTies++;    } else {      tiedYPairs+=sum(consecutiveYTies - 1);      consecutiveYTies=1;    }    prev=curr;  }  tiedYPairs+=sum(consecutiveYTies - 1);  final long concordantMinusDiscordant=numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps;  final double nonTiedPairsMultiplied=(numPairs - tiedXPairs) * (double)(numPairs - tiedYPairs);  return concordantMinusDiscordant / FastMath.sqrt(nonTiedPairsMultiplied);}  }
class C{  public void pausePlayingAudio(String id){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.pausePlaying();  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public EnumConstant fullCopy(){  EnumConstant tree=(EnumConstant)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 4:        tree.children[i]=null;      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  protected PhotosSaveMarketAlbumPhotoQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  protected final boolean scanTextDecl() throws IOException, XNIException {  boolean textDecl=false;  if (fEntityScanner.skipString("<?xml")) {    fMarkUpDepth++;    if (isValidNameChar(fEntityScanner.peekChar())) {      fStringBuffer.clear();      fStringBuffer.append("xml");      if (fNamespaces) {        while (isValidNCName(fEntityScanner.peekChar())) {          fStringBuffer.append((char)fEntityScanner.scanChar());        }      } else {        while (isValidNameChar(fEntityScanner.peekChar())) {          fStringBuffer.append((char)fEntityScanner.scanChar());        }      }      String target=fSymbolTable.addSymbol(fStringBuffer.ch,fStringBuffer.offset,fStringBuffer.length);      scanPIData(target,fString);    } else {      String version=null;      String encoding=null;      scanXMLDeclOrTextDecl(true,fStrings);      textDecl=true;      fMarkUpDepth--;      version=fStrings[0];      encoding=fStrings[1];      fEntityScanner.setXMLVersion(version);      if (!fEntityScanner.fCurrentEntity.isEncodingExternallySpecified()) {        fEntityScanner.setEncoding(encoding);      }      if (fDTDHandler != null) {        fDTDHandler.textDecl(version,encoding,null);      }    }  }  fEntityManager.fCurrentEntity.mayReadChunks=true;  return textDecl;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  public static ByteBuffer processOutboundPackage(ByteBuffer roData,int exchangeId,boolean connectionOk){  roData.rewind();  if (BuildConfig.DEBUG) {    XposedBridge.log("Processing outbound package of size " + Integer.toString(roData.remaining()));  }  try {synchronized (sync) {    }  } catch (  Throwable e) {    XposedBridge.log(e);  }  return null;}  }
class C{  public PickRequest withAllImageMimeTypesAllowed(){  this.mMimeType=QiPick.MIME_TYPE_IMAGES_ALL;  this.mMimeTypesKitKat=null;  return this;}  }
class C{  public PlacesSearchQuery search(UserActor actor,float latitude,float longitude){  return new PlacesSearchQuery(getClient(),actor,latitude,longitude);}  }
class C{  protected MessagesGetChatUsersQueryWithChatIdsFields chatIds(Integer... value){  return unsafeParam("chat_ids",value);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public EquipmentUnitAdd(final Long changeId,final long equipmentId,final String equipmentUnitXml){  setChangeId(changeId);  this.equipmentId=equipmentId;  this.equipmentUnitXml=equipmentUnitXml;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_INTERVAL_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201232,num0,skilltarget,skillname);}  }
class C{  public static boolean calculatePhysicalParryRate(Creature attacker,Creature attacked){  if (attacked.getObserveController().checkAttackStatus(AttackStatus.PARRY)) {    return true;  }  float accuracy=attacker.getGameStats().getMainHandPAccuracy().getCurrent();  float parry=0;  if (attacked instanceof Player) {    parry=attacked.getGameStats().getParry().getBonus() + getMovementModifier(attacked,StatEnum.PARRY,attacked.getGameStats().getParry().getBase()) + attacked.getGameStats().getStat(StatEnum.PVP_PARRY,0).getCurrent();  } else {    parry=attacked.getGameStats().getParry().getBonus() + getMovementModifier(attacked,StatEnum.PARRY,attacked.getGameStats().getParry().getBase());  }  float parryRate=parry - accuracy;  return calculatePhysicalEvasion(parryRate,400);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ExtendAuraRange_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200360,skillname);}  }
class C{  public Object clone(){  return new AbstractDataSource(sourcename);}  }
class C{  public FileWriterWithEncoding(String filename,String encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  private FlatServoRail expand(){  if (isDynamic())   return this;  FlatServoRail ret=new FlatServoRail();  ret.component=this.component;  ret.color=this.color;  return ret;}  }
class C{  public static void deleteDB(){  init(context);  Inquiry.get().dropTable(Constants.DATABASE_NAME);  Inquiry.deinit();}  }
class C{  public static void streamContent(OutputStream out,InputStream in,int length) throws IOException {  int bufferSize=512;  if (out == null) {    throw new IOException("Attempt to write to null output stream");  }  if (in == null) {    throw new IOException("Attempt to read from null input stream");  }  if (length == 0) {    throw new IOException("Attempt to write 0 bytes of content to output stream");  }  BufferedOutputStream bos=new BufferedOutputStream(out,bufferSize);  BufferedInputStream bis=new BufferedInputStream(in,bufferSize);  byte[] buffer=new byte[length];  int read=0;  try {    while ((read=bis.read(buffer,0,buffer.length)) != -1) {      bos.write(buffer,0,read);    }  } catch (  IOException e) {    Debug.logError(e,"Problem reading/writing buffers",module);    bis.close();    bos.close();    throw e;  } finally {    if (bis != null) {      bis.close();    }    if (bos != null) {      bos.flush();      bos.close();    }  }}  }
class C{  private StandardDeviation(Variance variance){  this.variance=variance;}  }
class C{  public Map.Entry<K,V> lastEntry(){  for (; ; ) {    Node<K,V> n=findLast();    if (n == null)     return null;    AbstractMap.SimpleImmutableEntry<K,V> e=n.createSnapshot();    if (e != null)     return e;  }}  }
class C{  public Iterator<String> keys(){  return root.getStringIterator(cbuf);}  }
class C{  public NameFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public static boolean isScreenW(int widthDp){  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;  return screenWidth >= widthDp;}  }
class C{  int onUpdateAll(DataSupport baseObj,String... conditions) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  List<Field> supportedFields=getSupportedFields(baseObj.getClassName());  ContentValues values=new ContentValues();  putFieldsValue(baseObj,supportedFields,values);  putFieldsToDefaultValue(baseObj,values);  return doUpdateAllAction(baseObj.getTableName(),values,conditions);}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.indicator_white_radius,R.drawable.indicator_white_radius);}  }
class C{  public UrlSpaceFactoryBean(String url,Map<String,Object> params){  this(url);  setParameters(params);}  }
class C{  @Override public synchronized void write(int b) throws IOException {  super.write(b);  this.branch.write(b);}  }
class C{  protected void init(Object initData,String servletExtension){  ParamValidationUtil.validateParamNotNull(initData,"initData");  ParamValidationUtil.validateParamNotNull(servletExtension,"servletExtension");  request=((ViewContext)initData).getRequest();  reset();  this.minifyUrlExtension=servletExtension;  this.isDebugMode=UtilMethods.isSet(request.getParameter("debug"));  this.isLiveMode=HostTools.isLiveMode(request);  this.currentHost=HostTools.getCurrentHost(request);}  }
class C{  @Override public List<WebElement> findElementsByPartialLinkText(String partialLinkText){  return ((FindsByLinkText)super.getWrappedDriver()).findElementsByPartialLinkText(partialLinkText);}  }
class C{  public void switchBack(){  if (localDeque.size() > 1) {    doSwitch(localDeque.poll(),localDeque.peek());  }}  }
class C{  public static void export(IConnector connector,int taxonId,String rank,float minScore,float maxExpected,float minPercentIdentity,float topPercent,String fileName,ProgressListener progressListener) throws IOException, CanceledException {  final String name=TaxonomyData.getName2IdMap().get(taxonId);  final IReadBlockIterator it=connector.getReadsIterator(Classification.Taxonomy,taxonId,minScore,maxExpected,true,true);  progressListener.setTasks("Export","Computing match signatures for '" + name + "'");  progressListener.setMaximum(it.getMaximumProgress());  progressListener.setProgress(0);  final Map<String,Integer> read2rank=new HashMap<>();  final Set<Integer> allTaxa=new TreeSet<>();  final List<Pair<String,Set<Integer>>> readsAndTaxa=new LinkedList<>();  int readRank=0;  while (it.hasNext()) {    IReadBlock readBlock=it.next();    String readName=readBlock.getReadName();    read2rank.put(readName,readRank);    HashSet<Integer> taxa=new HashSet<>();    readsAndTaxa.add(new Pair<String,Set<Integer>>(readName,taxa));    double useMinScore=-1;    for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {      IMatchBlock matchBlock=readBlock.getMatchBlock(i);      if (matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {{          if (useMinScore == -1)           useMinScore=Math.max(minScore,(1f - topPercent) * matchBlock.getBitScore());          if (matchBlock.getBitScore() >= useMinScore) {            int taxId=mapToRank(rank,matchBlock.getTaxonId());            if (taxId > 0)             taxa.add(taxId);          }        }      }    }    allTaxa.addAll(taxa);    progressListener.setProgress(it.getProgress());  }  if (fileName.contains("%t"))   fileName=fileName.replaceAll("%t",Basic.replaceSpaces(name,'_'));  if (fileName.contains("%i"))   fileName=fileName.replaceAll("%i","" + taxonId);  progressListener.setTasks("Export","Writing to file: " + Basic.getFileBaseName(fileName));  progressListener.setMaximum(readsAndTaxa.size());  progressListener.setProgress(0);  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){    w.write("# " + rank + "-level patterns for '"+ name+ "'\n");    w.write("# Number of reads: " + read2rank.keySet().size() + "\n");    w.write("# Taxon ids:");    for (    Integer taxon : allTaxa) {      w.write(String.format("\t%d",taxon));    }    w.write("\n");    w.write("# Taxon names:");    for (    Integer taxon : allTaxa) {      w.write(String.format("\t%s",TaxonomyData.getName2IdMap().get(taxon)));    }    w.write("\n");    Map<String,List<String>> signature2reads=new TreeMap<>();    for (    Pair<String,Set<Integer>> pair : readsAndTaxa) {      w.write(pair.get1() + "\t");      StringBuilder buf=new StringBuilder();      for (      Integer taxon : allTaxa) {        if (pair.get2().contains(taxon))         buf.append("1"); else         buf.append("0");      }      String signature=buf.toString();      w.write(signature);      List<String> reads=signature2reads.get(signature);      if (reads == null) {        reads=new LinkedList<>();        signature2reads.put(signature,reads);      }      reads.add(pair.get1());      w.write("\n");    }    w.write("# Number of unique signatures: " + signature2reads.keySet().size() + "\n");    for (    String signature : signature2reads.keySet()) {      List<String> reads=signature2reads.get(signature);      w.write(String.format("%s\t%d",signature,reads.size()));      for (      String read : reads) {        w.write("\t" + read);      }      w.write("\n");    }  }   System.err.println("Total reads: " + readsAndTaxa.size());  System.err.println("Total taxa:  " + allTaxa.size());}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>Map<K,V> toMap(Object object){  if (object != null && !(object instanceof Map))   return null;  return (Map<K,V>)object;}  }
class C{  public void stopRecording(){  m_line.stop();  m_line.close();}  }
class C{  public AuditLogEntryComparator(){  super("-time");}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  private void minimizeSelectors(List<RuleWrapper<RuleType>> rules,int startIndex){  Location toBeMatchedRuleLocation=model.getLocationInConfig(rule,SELECTOR_FIELD_NAME);  for (Iterator<String> iter=selectors.iterator(); iter.hasNext(); ) {    String selector=iter.next();    for (int i=startIndex; i < rules.size(); i++) {      RuleWrapper<RuleType> ruleWrapper=rules.get(i);      if (isSubsumed(selector,ruleWrapper.selectors)) {        Location matchingRuleLocation=model.getLocationInConfig(ruleWrapper.rule,SELECTOR_FIELD_NAME);        if (!maintainSelectorMinimizationBugExperimentEnabled() && isSameYamlFile(matchingRuleLocation,toBeMatchedRuleLocation)) {          model.getDiagCollector().addDiag(Diag.error(matchingRuleLocation,"Selector '%s' at location %s subsumes selector '%s' at location %s. " + "Subsuming selectors in the same file is not supported.",ruleWrapper.getUnflattenedSelector(),matchingRuleLocation.getDisplayString(),selector,toBeMatchedRuleLocation.getDisplayString()));        }        iter.remove();        break;      }    }  }}  }
class C{  public GroupsGetBannedQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"groups.getBanned",GetBannedResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  public static String timestamp(DateTime ts){  return Long.toString(ts.getMillis() / 1000);}  }
class C{  @Override public void endGroup(Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.endGroup(augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.endGroup(augs);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200777,skilltarget);}  }
class C{  public boolean equals(String productId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount){  return equals(productId,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,null,null,false);}  }
class C{  public TypeVariable typeVariable(TypeNode typeNode){  TypeVariable result=typeVariableMap.get(typeNode);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this,typeNode);    typeVariableList.set(id,result);    typeVariableMap.put(typeNode,result);  }  return result;}  }
class C{  public CreateSiteWindow fillLiveCopy(String siteOwner,boolean liveCopy,List<String> rollOutConfigs){  ownerDropDown.selectByText(siteOwner);  WebElement checkBox=currentWindow.findElement(By.name("isLiveCopy"));  if (!liveCopy) {    checkBox.click();  }  for (  String config : rollOutConfigs) {    currentWindow.findElement(By.xpath("//span[text()='Add Item']")).click();    List<WebElement> inputs=currentWindow.findElements(By.xpath("//img[@src='/libs/cq/ui/resources/0.gif']"));    inputs.get(inputs.size() - 1).click();    List<WebElement> options=currentWindow.findElements(By.xpath("//div[text()='" + config + "']"));    options.stream().filter(null).forEach(null);  }  return this;}  }
class C{  @Override public void close(Client transportClient){  if (transportClient != null) {    transportClient.close();    log.info("close() - Closed client: " + transportClient.settings().get("node.name"));  }}  }
class C{  public OutputFormat(){}  }
class C{  public static Class inferType(TupleSet tuples,String field){  if (tuples instanceof Table) {    return ((Table)tuples).getColumnType(field);  } else {    Class type=null, type2=null;    Iterator iter=tuples.tuples();    while (iter.hasNext()) {      Tuple t=(Tuple)iter.next();      if (type == null) {        type=t.getColumnType(field);      } else       if (!type.equals(type2=t.getColumnType(field))) {        if (type2.isAssignableFrom(type)) {          type=type2;        } else         if (!type.isAssignableFrom(type2)) {          throw new IllegalArgumentException("The data field [" + field + "] does not have "+ "a consistent type across provided Tuples");        }      }    }    return type;  }}  }
class C{  public MessagesGetByIdQuery(VkApiClient client,Actor actor,List<Integer> messageIds){  super(client,"messages.getById",GetByIdResponse.class);  accessToken(actor.getAccessToken());  messageIds(messageIds);}  }
class C{  public GroupsSetCallbackSettingsQuery groupJoin(Boolean value){  return unsafeParam("group_join",value);}  }
class C{  protected AudioGetLyricsQuery lyricsId(int value){  return unsafeParam("lyrics_id",value);}  }
class C{  @Override public Object fromMessage(final Message message) throws JMSException {  if (!(message instanceof TextMessage)) {    throw new MessageFormatException("Expected TextMessage as response but received " + message.getClass());  } else {    try {      LOGGER.debug("fromMessage() - Message properly received");      return this.xmlConverter.fromXml(((TextMessage)message).getText());    } catch (    Exception ex) {      LOGGER.error("fromMessage() - Error caught in conversion of JMS message to Process Object");      LOGGER.error("Message was: " + ((TextMessage)message).getText());      throw new JMSException(ex.getMessage());    }  }}  }
class C{  public boolean hasExpr(){  return getExprOpt().getNumChild() != 0;}  }
class C{  public static PartnerBookmarksProviderIterator createIfAvailable(ContentResolver contentResolver){  Cursor cursor=contentResolver.query(BOOKMARKS_CONTENT_URI,BOOKMARKS_PROJECTION,null,null,BOOKMARKS_SORT_ORDER);  if (cursor == null)   return null;  return new PartnerBookmarksProviderIterator(cursor);}  }
class C{  public static void main(String[] args){  MouseDrag simulation=new MouseDrag();  simulation.run();}  }
class C{  public AsyncCatchOptions useBestBall(boolean useBestPokeball){  this.useBestPokeball=useBestPokeball;  return this;}  }
class C{  public static long timeMillis(){  return SystemInfo.singleton().timeProvider().timeMillis();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public List<T> fullCopy(){  List tree=(List)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void sample(int column,String value){  rangeCheck(column,true);  ((ParserFactory)m_factories.get(column)).sample(value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200971,skilltarget,num0,skillcaster,skillname);}  }
class C{  public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){  return head(context,url,null,responseHandler);}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public AudioEditQuery edit(UserActor actor,int ownerId,int audioId){  return new AudioEditQuery(getClient(),actor,ownerId,audioId);}  }
class C{  public UniformRealDistribution(){  this(0,1);}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  protected void drawXAxis(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));  int x=5;  int y=getHeight() - bottomMargin + 25;  if (isTranspose())   gc.drawString(getChartData().getClassesLabel(),x,y); else {    String prefix=null;    final Document doc=getViewer().getDir().getDocument();    final boolean hasGroups=doc.getSampleAttributeTable().hasGroups();    for (    String sample : doc.getSampleAttributeTable().getSampleOrder()) {      String groupId=hasGroups ? doc.getSampleAttributeTable().getGroupId(sample) : "all";      if (groupId != null) {        int pos=groupId.indexOf('=');        if (pos > 0) {          if (prefix == null)           prefix=groupId.substring(0,pos); else           if (!prefix.equals(groupId.substring(0,pos))) {            prefix=null;            break;          }        }      }    }    gc.drawString(prefix != null ? prefix : "Grouped",x,y);  }}  }
class C{  public static final void sort(int[] a,int[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  public boolean isTemplateOnList(String title,String template){  boolean isOnList;  SiteAdminGridRow row=getRowByTitle(title);  isOnList=template.equals(row.getTemplateName());  if (!isOnList) {    LOG.debug("there is no template {} with title {} on the list",template,title);  }  return isOnList;}  }
class C{  public void fireAction(Context context,View view,String actionType,Object model){  if (mActionInterceptor != null && mActionInterceptor.onInterceptAction(context,view,actionType,model))   return;  for (  ActionPair actionPair : mActions) {    if (actionPair.actionType == null || actionPair.actionType.equals(actionType)) {      final Action action=actionPair.action;      if (action != null && action.isModelAccepted(model)) {        action.onFireAction(context,view,actionType,model);      }    }  }}  }
class C{  public synchronized void end(){  this.active=false;  this.selectedObject=null;}  }
class C{  public int lastIndexOf(int offset,int value){  for (int i=offset; i-- > 0; ) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void showUntrustedCertDialog(RemoteOperationResult result){  FragmentManager fm=getSupportFragmentManager();  SslUntrustedCertDialog dialog=(SslUntrustedCertDialog)fm.findFragmentByTag(DIALOG_UNTRUSTED_CERT);  if (dialog == null) {    dialog=SslUntrustedCertDialog.newInstanceForFullSslError((CertificateCombinedException)result.getException());    FragmentTransaction ft=fm.beginTransaction();    dialog.show(ft,DIALOG_UNTRUSTED_CERT);  }}  }
class C{  public boolean isConfigured(){  List<BOMNode> notConfiguredParts=FastList.newInstance();  root.isConfigured(notConfiguredParts);  return (notConfiguredParts.size() == 0);}  }
class C{  @Override public boolean shouldSkipField(FieldAttributes fieldAttributes){  return !whitelist.contains(fieldAttributes.getName());}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {  writeLines(file,encoding,lines,null,false);}  }
class C{  public static PingResponse pingServer(Logger logger,String serverIP,int serverPort,int tries,int delay) throws IOException {  if (startTime == -1) {    startTime=System.currentTimeMillis();  }  UDPClientSocket socket=new UDPClientSocket(logger);  for (int i=0; i < tries; i++) {    UNCONNECTED_PING ping=new UNCONNECTED_PING();    ping.pingID=System.currentTimeMillis() - startTime;    ping.encode();    socket.writePacket(ping.buffer,new InetSocketAddress(serverIP,serverPort));    DatagramPacket pkt=socket.readPacketBlocking(delay);    if (pkt != null && pkt.getData()[0] == UNCONNECTED_PONG.ID) {      UNCONNECTED_PONG pong=new UNCONNECTED_PONG();      pong.buffer=pkt.getData();      pong.decode();      return new PingResponse(pong.serverID,pong.pingID,pong.serverName);    }  }  return null;}  }
class C{  public SM_SYSTEM_MESSAGE(int code,Object... params){  this.code=code;  this.params=params;}  }
class C{  public void transformPath(){  Matrix matrix=new Matrix();  mPreviousChartRect.set(getScreenX(mXMinForPathCalcs),getScreenY(mYMaxForPathCalcs),getScreenX(mXMaxForPathCalcs),getScreenY(mYMinForPathCalcs));  matrix.setRectToRect(mChartRect,mPreviousChartRect,Matrix.ScaleToFit.FILL);  mPath.transform(matrix);  updatePathCalcs();  postInvalidateOnAnimation();}  }
class C{  public String toString(int maxKeysToPrint,boolean multiline){  return asPriorityQueue().toString(maxKeysToPrint,multiline);}  }
class C{  private void markLocalizedFileAsInvalid(DropExporter dropExporter,DropFile file,Throwable cause){  try {    dropExporter.addCommentToFile(file.getId(),"Invalid localized file must be reviewed.\n" + cause.getMessage());  } catch (  Throwable t) {    logger.debug("Cannot add mark source file as invalid",t);  }}  }
class C{  private void adjustRightByAspectRatio(RectF rect,float aspectRatio){  rect.right=rect.left + rect.height() * aspectRatio;}  }
class C{  public PhotosPutTagQuery(VkApiClient client,UserActor actor,int photoId,int userId){  super(client,"photos.putTag",Integer.class);  accessToken(actor.getAccessToken());  photoId(photoId);  userId(userId);}  }
class C{  public MetaDataObject findSubTypeOrSelf(String name){  HashMap<String,MetaDataObject> cache=subTypesMapCache;  if (cache == null) {    cache=new HashMap<>();    List<? extends MetaDataObject> transitiveSubTypes=getSubTypes(true,true);    for (    MetaDataObject subType : transitiveSubTypes) {      cache.put(subType.getName(),subType);      cache.put(subType.getId(),subType);    }    subTypesMapCache=cache;  }  return subTypesMapCache.get(name);}  }
class C{  @Override public synchronized void mark(int readlimit){  in.mark(readlimit);}  }
class C{  public GitReference fetchSingleRef(String url,String ref) throws RepoException {  if (ref.contains(":") || ref.contains("*")) {    throw new CannotFindReferenceException("Fetching refspecs that" + " contain local ref path locations or wildcards is not supported. Invalid ref: " + ref);  }  if (isSha1Reference(ref)) {    fetch(url,false,true,ImmutableList.of());    try {      return resolveReference(ref);    } catch (    RepoException ignore) {    }  }  fetch(url,false,true,ImmutableList.of(ref));  return resolveReference("FETCH_HEAD");}  }
class C{  public static void preload(Class<?> clazz){  getString(clazz,null);}  }
class C{  private static boolean approximately(float x,float y,float affordance){  float difference=Math.abs(x - y);  return difference <= affordance;}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public Fraction add(final int i){  return new Fraction(numerator + i * denominator,denominator);}  }
class C{  public void drawScreen(int mouseX,int mouseY,float partialTicks){  this.drawDefaultBackground();  this.drawCenteredString(this.fontRendererObj,"Quick Commands",this.width / 2,16,16777215);  super.drawScreen(mouseX,mouseY,partialTicks);}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  if (par1GuiButton.enabled) {    if (par1GuiButton.id == ID_GENERIC_DONE) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(this.parentGuiScreen);    } else     if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.reinit=true;    } else     if (par1GuiButton instanceof GuiSmallButtonEx) {      VRSettings.VrOptions num=VRSettings.VrOptions.getEnumOptions(par1GuiButton.id);      this.guivrSettings.setOptionValue(((GuiSmallButtonEx)par1GuiButton).returnVrEnumOptions(),1);      par1GuiButton.displayString=this.guivrSettings.getKeyBinding(VRSettings.VrOptions.getEnumOptions(par1GuiButton.id));    }  }}  }
class C{  public NewsfeedGetCommentsQuery startFrom(String value){  return unsafeParam("start_from",value);}  }
class C{  public AuthSignupQuery(VkApiClient client,UserActor actor,String firstName,String lastName,int clientId,String clientSecret,String phone){  super(client,"auth.signup",SignupResponse.class);  accessToken(actor.getAccessToken());  firstName(firstName);  lastName(lastName);  clientId(clientId);  clientSecret(clientSecret);  phone(phone);}  }
class C{  protected VideoGetCommentsQueryWithExtended videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  @Override public List<Order> searchOrder(OrderReqDto reqDto){  return sessionTemplate.selectList(NAMESPACE + ".searchOrder",reqDto);}  }
class C{  private void measureChildWithDecorationsAndMargin(View child,int widthSpec,int heightSpec){  Rect decorRect=new Rect();  calculateItemDecorationsForChild(child,decorRect);  RecyclerView.LayoutParams lp=(RecyclerView.LayoutParams)child.getLayoutParams();  widthSpec=updateSpecWithExtra(widthSpec,lp.leftMargin + decorRect.left,lp.rightMargin + decorRect.right);  heightSpec=updateSpecWithExtra(heightSpec,lp.topMargin + decorRect.top,lp.bottomMargin + decorRect.bottom);  child.measure(widthSpec,heightSpec);}  }
class C{  public ProperFractionFormat(NumberFormat wholeFormat,NumberFormat numeratorFormat,NumberFormat denominatorFormat){  super(numeratorFormat,denominatorFormat);  MathUtils.checkNotNull(wholeFormat,LocalizedCoreFormats.WHOLE_FORMAT);  this.wholeFormat=wholeFormat;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GenericInterfaceDecl fullCopy(){  GenericInterfaceDecl tree=(GenericInterfaceDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public FakeJimpleLocal(String name,Type t,Local realLocal){  this(name,t,realLocal,null);}  }
class C{  public void dump(){  System.out.println(" FD Count: " + getFrameData().length);  for (int i=0; i < getFrameData().length; i++) {    System.out.print(" " + getFrameData(i));  }  System.out.println();  System.out.println(" RD Count: " + getResidualSize());  for (int i=0; i < getResidualData().length; i++) {    System.out.print(" " + getResidualData(i));  }  System.out.println();}  }
class C{  public AggregationSet count(){  return add(new CountAggregator());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillCritical_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200539,skilltarget,skillname);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  @Override public void createUI(){  FieldPanel fieldPanel=createFieldPanel(0,"");  fieldPanel.setLayout(new BorderLayout());  ttfPanel=new TTFDetails(this,FunctionManager.getInstance());  fieldPanel.add(ttfPanel,BorderLayout.CENTER);  Dimension panelSize=ttfPanel.getPanelSize();  fieldPanel.setPreferredSize(panelSize);}  }
class C{  public void clearUndos(){  undo.discardAllEdits();}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  final public void copy(Model m){  this.req=m.req;  this.resp=m.resp;  this.contentType=m.contentType;  this.context=m.context;  this.lang=m.lang;  this.locale=m.locale;  this.login=m.login;  this.method=m.method;  this.path=m.path;  this.sid=m.sid;  this.uri=m.uri;  this._multipart=ServletFileUpload.isMultipartContent(req);  if (this._multipart) {    this.uploads=m.getFiles();  }}  }
class C{  @Override public Void call() throws Exception {  while (!processingComplete || blockletProcessingCount.get() > 0) {    NodeHolder nodeHolder=null;    try {      nodeHolder=blockletDataHolder.get();      if (null != nodeHolder) {        dataWriter.writeBlockletData(nodeHolder);      }      blockletProcessingCount.decrementAndGet();    } catch (    Throwable throwable) {      if (!processingComplete || blockletProcessingCount.get() > 0) {        producerExecutorService.shutdownNow();        resetBlockletProcessingCount();        throw new CarbonDataWriterException(throwable.getMessage());      }    } finally {      semaphore.release();    }  }  return null;}  }
class C{  @Override public void close(){  if (logger.isLoggable(Level.FINE))   logger.fine("Closing metric sampler");  executor.shutdown();  try {    if (!executor.awaitTermination(1,TimeUnit.SECONDS)) {      executor.shutdownNow();      if (!executor.awaitTermination(1,TimeUnit.SECONDS)) {        logger.warning("ScheduledExecutorService did not terminate");      }    }  } catch (  InterruptedException ie) {    executor.shutdownNow();    Thread.currentThread().interrupt();  }  for (  MetricReporter reporter : reporters)   reporter.close();}  }
class C{  @Override protected void processPolar(double[] r,double[] phi){  for (int i=0; i < r.length; i++) {    phi[i]=MathUtils.TWOPI * Math.random();  }}  }
class C{  public Value sum(Value num){  return new AggregationFunction(num,AggregationType.SUM);}  }
class C{  public static void bindProperties(Binder binder){  Properties properties=PropertyUtils.gatherProperties();  Names.bindProperties(binder,properties);  binder.bind(Properties.class).toInstance(properties);}  }
class C{  public boolean removeListener(Listener listener){  return this.listeners.remove(listener);}  }
class C{  void selectNodesEdges(NodeSet hitNodes,EdgeSet hitEdges,boolean shift,int clicks){  if (hitNodes.size() == 1)   hitEdges.clear();  Graph G=viewer.getGraph();  boolean changed=false;  if (!shift && (viewer.getNumberSelectedNodes() > 0 || viewer.getNumberSelectedEdges() > 0)) {    viewer.selectAllNodes(false);    viewer.selectAllEdges(false);    changed=true;  }  try {    if ((clicks > 0 || viewer.isAllowRubberbandNodes()) && hitNodes.size() > 0) {      for (Node v=G.getFirstNode(); v != null; v=G.getNextNode(v)) {        if (hitNodes.contains(v)) {          if (!shift) {            viewer.setSelected(v,true);            changed=true;            if (clicks > 1)             break;          } else {            if (!viewer.getSelected(v))             viewer.setSelected(v,true); else             viewer.setSelected(v,false);            changed=true;          }        }      }    }    if ((clicks > 0 || viewer.isAllowRubberbandEdges()) && hitEdges.size() > 0) {      for (Edge e=G.getFirstEdge(); e != null; e=G.getNextEdge(e)) {        if (hitEdges.contains(e)) {          if (!shift) {            if (clicks == 0 || viewer.getNumberSelectedNodes() == 0) {              viewer.setSelected(e,true);              changed=true;            }            if (clicks > 1)             break;          } else {            if (!viewer.getSelected(e)) {              viewer.setSelected(e,true);            } else             viewer.setSelected(e,false);            changed=true;          }        }      }    }  }  finally {    if (changed)     viewer.repaint();  }}  }
class C{  public SecureGetSMSHistoryQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressNonDecimalMaxMin(DataType compDataType,DataType actualDataType){switch (compDataType) {case DATA_BYTE:    return new UnCompressNonDecimalMaxMinByte();case DATA_SHORT:  return new UnCompressNonDecimalMaxMinShort();case DATA_INT:return new UnCompressNonDecimalMaxMinInt();case DATA_LONG:return new UnCompressNonDecimalMaxMinLong();case DATA_FLOAT:return new UnCompressNonDecimalMaxMinFloat();default :return new UnCompressNonDecimalMaxMinDefault();}}  }
class C{  public void addListener(AttributeButtonSelectionInterface listener){  if (!selectedListeners.contains(listener)) {    selectedListeners.add(listener);  }}  }
class C{  public void showLoading(){  switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList());}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  BBOXImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new BBoxExtended();  } else {    filter=new BBoxExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public void nextGroup() throws SAException {  _curValueListHolder=null;  if (_curValueList != null) {    _curValueList.releaseScan();    _curValueList=null;  }}  }
class C{  protected synchronized String nextCnxKey(){  if (connectionsCounter == Integer.MAX_VALUE)   connectionsCounter=0;  connectionsCounter++;  int randLong=random.nextInt(Integer.MAX_VALUE);  return connectionsCounter + (randLong + "_" + ID_SUFFIX);}  }
class C{  public boolean isApplicable(){  return getViewer() != null && getViewer() instanceof megan.remote.RemoteServiceBrowser && ((megan.remote.RemoteServiceBrowser)getViewer()).isServiceSelected();}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public Iterator inEdges(Node node){  nodeCheck(node,true);  return m_edgeTuples.iterator(inEdgeRows(node.getRow()));}  }
class C{  public SparseGradient toRadians(){  return new SparseGradient(FastMath.toRadians(value),FastMath.toRadians(1.0),derivatives);}  }
class C{  private int deleteAssociatedForeignKeyRows(DataSupport baseObj){  int rowsAffected=0;  Map<String,Set<Long>> associatedModelMap=baseObj.getAssociatedModelsMapWithFK();  for (  String associatedTableName : associatedModelMap.keySet()) {    String fkName=getForeignKeyColumnName(baseObj.getTableName());    rowsAffected+=mDatabase.delete(associatedTableName,fkName + " = " + baseObj.getBaseObjId(),null);  }  return rowsAffected;}  }
class C{  int relabel(Instruction i){  int index=0;  while (i != null) {    i.label=index;    index=i.nextOffset(index);    i=i.next;  }  return index;}  }
class C{  private void openFileWithDefault(String localPath){  Intent myIntent=new Intent(android.content.Intent.ACTION_VIEW);  File file=new File(localPath);  String mimetype=MimetypeIconUtil.getBestMimeTypeByFilename(localPath);  if ("application/octet-stream".equals(mimetype)) {    mimetype="*/*";  }  myIntent.setDataAndType(Uri.fromFile(file),mimetype);  try {    startActivity(myIntent);  } catch (  ActivityNotFoundException e) {    Toast.makeText(this,"Found no app to open this file.",Toast.LENGTH_LONG).show();    Log_OC.i(TAG,"Could not find app for sending log history.");  }}  }
class C{  @Override public XSModel loadURIList(StringList uriList){  int length=uriList.getLength();  try {    fGrammarPool.clear();    for (int i=0; i < length; ++i) {      fSchemaLoader.loadGrammar(new XMLInputSource(null,uriList.item(i),null));    }    return fGrammarPool.toXSModel();  } catch (  Exception e) {    fSchemaLoader.reportDOMFatalError(e);    return null;  }}  }
class C{  public RequestParams(Map<String,String> source){  init();  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  public void init() throws RecurrenceInfoException {  if (info.get("startDateTime") == null)   throw new RecurrenceInfoException("Recurrence startDateTime cannot be null.");  long startTime=info.getTimestamp("startDateTime").getTime();  if (startTime > 0) {    int nanos=info.getTimestamp("startDateTime").getNanos();    startTime+=(nanos / 1000000);  } else {    throw new RecurrenceInfoException("Recurrence startDateTime must have a value.");  }  startDate=new Date(startTime);  try {    rRulesList=new ArrayList<RecurrenceRule>();    for (    GenericValue value : info.getRelated("RecurrenceRule",null,null,false)) {      rRulesList.add(new RecurrenceRule(value));    }  } catch (  GenericEntityException gee) {    rRulesList=null;  }catch (  RecurrenceRuleException rre) {    throw new RecurrenceInfoException("Illegal rule format.",rre);  }  try {    eRulesList=new ArrayList<RecurrenceRule>();    for (    GenericValue value : info.getRelated("ExceptionRecurrenceRule",null,null,false)) {      eRulesList.add(new RecurrenceRule(value));    }  } catch (  GenericEntityException gee) {    eRulesList=null;  }catch (  RecurrenceRuleException rre) {    throw new RecurrenceInfoException("Illegal rule format",rre);  }  rDateList=RecurrenceUtil.parseDateList(StringUtil.split(info.getString("recurrenceDateTimes"),","));  eDateList=RecurrenceUtil.parseDateList(StringUtil.split(info.getString("exceptionDateTimes"),","));  Collections.sort(rDateList);  Collections.sort(eDateList);}  }
class C{  protected double ScalingFunction(int iDistance){  return Math.exp(-Math.pow((iDistance),2.0) / (2.0 * Math.pow(CorrelationWindow,2.0)));}  }
class C{  @Override public void validateConfig(final DataTag dataTag){  DataTag dataTagCacheObject=(DataTagCacheObject)dataTag;  validateTagConfig(dataTagCacheObject);  if (dataTagCacheObject.getEquipmentId() == null && dataTagCacheObject.getSubEquipmentId() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Equipment/SubEquipment id not set for DataTag with id " + dataTag.getId() + " - unable to configure it.");  }  if (dataTagCacheObject.getMinValue() != null) {    try {      Class<?> minValueClass=getType(dataTagCacheObject.getDataType());      if (!minValueClass.isInstance(dataTagCacheObject.getMinValue())) {        throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"minValue\" must be of type " + dataTagCacheObject.getDataType() + " or null");      }    } catch (    Exception e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Error validating parameter \"minValue\": " + e.getMessage());    }  }  if (dataTagCacheObject.getMaxValue() != null) {    try {      Class<?> maxValueClass=getType(dataTagCacheObject.getDataType());      if (!maxValueClass.isInstance(dataTagCacheObject.getMaxValue())) {        throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"maxValue\" must be of type " + dataTagCacheObject.getDataType() + " or null.");      }    } catch (    Exception e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Error validating parameter \"maxValue\": " + e.getMessage());    }  }  if (dataTagCacheObject.getAddress() != null) {    dataTagCacheObject.getAddress().validate();  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"No address provided for DataTag - unable to configure it.");  }}  }
class C{  public static void checkMultiplicationCompatible(final AnyMatrix left,final AnyMatrix right) throws MathIllegalArgumentException {  if (left.getColumnDimension() != right.getRowDimension()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,left.getColumnDimension(),right.getRowDimension());  }}  }
class C{  public static String defaultBuildSystemName(){  return BuildSystemProvider.defaultBuildSystem().buildSystem().getName();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public URI(String p_uriSpec,boolean allowNonAbsoluteURI) throws MalformedURIException {  this(null,p_uriSpec,allowNonAbsoluteURI);}  }
class C{  public static DataType fromExternalToWrapperDataType(org.apache.carbondata.format.DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return DataType.STRING;case INT:  return DataType.INT;case LONG:return DataType.LONG;case DOUBLE:return DataType.DOUBLE;case DECIMAL:return DataType.DECIMAL;case TIMESTAMP:return DataType.TIMESTAMP;case ARRAY:return DataType.ARRAY;case STRUCT:return DataType.STRUCT;default :return DataType.STRING;}}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public IntIterator inEdgeRows(int node){  return edgeRows(node,INEDGES);}  }
class C{  public S2Point toPoint(){  double phi=lat().radians();  double theta=lng().radians();  double cosphi=Math.cos(phi);  return new S2Point(Math.cos(theta) * cosphi,Math.sin(theta) * cosphi,Math.sin(phi));}  }
class C{  void attach(Item item){  this.next=item;  item.prev=this;}  }
class C{  public Page(Page other){  update(other);}  }
class C{  private void computeTabClippingVisibilityHelper(){  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;  float clipOffset;  if (portrait) {    clipOffset=mLayout.getHeight() + StackTab.sStackedTabVisibleSize;  } else   if (!LocalizationUtils.isLayoutRtl()) {    clipOffset=mLayout.getWidth() + StackTab.sStackedTabVisibleSize;  } else {    clipOffset=-StackTab.sStackedTabVisibleSize;  }  for (int i=mStackTabs.length - 1; i >= 0; i--) {    LayoutTab layoutTab=mStackTabs[i].getLayoutTab();    layoutTab.setVisible(true);    if (mStackTabs[i].isDying() || mStackTabs[i].getXInStackOffset() != 0.0f || layoutTab.getAlpha() < 1.0f) {      layoutTab.setClipOffset(0.0f,0.0f);      layoutTab.setClipSize(Float.MAX_VALUE,Float.MAX_VALUE);      continue;    }    float tabOffset, tabSize, tabClippedSize, borderAdjustmentSize, insetBorderPadding;    if (portrait) {      tabOffset=layoutTab.getY();      tabSize=layoutTab.getScaledContentHeight();      tabClippedSize=Math.min(tabSize,clipOffset - tabOffset);      borderAdjustmentSize=mBorderTransparentTop;      insetBorderPadding=mBorderTopPadding;    } else     if (!LocalizationUtils.isLayoutRtl()) {      tabOffset=layoutTab.getX();      tabSize=layoutTab.getScaledContentWidth();      tabClippedSize=Math.min(tabSize,clipOffset - tabOffset);      borderAdjustmentSize=mBorderTransparentSide;      insetBorderPadding=0;    } else {      tabOffset=layoutTab.getX() + layoutTab.getScaledContentWidth();      tabSize=layoutTab.getScaledContentWidth();      tabClippedSize=Math.min(tabSize,tabOffset - clipOffset);      borderAdjustmentSize=-mBorderTransparentSide;      insetBorderPadding=0;    }    float absBorderAdjustmentSize=Math.abs(borderAdjustmentSize);    if (tabClippedSize <= absBorderAdjustmentSize) {      layoutTab.setVisible(false);      layoutTab.setDrawDecoration(true);    } else {      float fade=MathUtils.clamp(((tabClippedSize - absBorderAdjustmentSize) / StackTab.sStackedTabVisibleSize),0,1);      layoutTab.setDecorationAlpha(fade);      float clipScale=1.0f;      if (layoutTab.getTiltX() > 0 || ((!portrait && LocalizationUtils.isLayoutRtl()) ? layoutTab.getTiltY() < 0 : layoutTab.getTiltY() > 0)) {        final float tilt=Math.max(layoutTab.getTiltX(),Math.abs(layoutTab.getTiltY()));        clipScale+=(tilt / mMaxOverScrollAngle) * 0.60f;      }      float scaledTabClippedSize=Math.min(tabClippedSize * clipScale,tabSize);      layoutTab.setClipOffset((!portrait && LocalizationUtils.isLayoutRtl()) ? (tabSize - scaledTabClippedSize) : 0,0);      layoutTab.setClipSize(portrait ? Float.MAX_VALUE : scaledTabClippedSize,portrait ? scaledTabClippedSize : Float.MAX_VALUE);    }    if (i > 0) {      LayoutTab nextLayoutTab=mStackTabs[i - 1].getLayoutTab();      if (nextLayoutTab.getScale() <= layoutTab.getScale()) {        clipOffset=tabOffset;      } else {        clipOffset=tabOffset + tabClippedSize * layoutTab.getScale();      }      clipOffset+=borderAdjustmentSize;      if (layoutTab.getBorderAlpha() < 1.f && layoutTab.getToolbarAlpha() < 1.f) {        clipOffset+=insetBorderPadding;      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200736,skillcaster,skillname);}  }
class C{  public static int heightPixels(Context context){  return displayMetrics(context).heightPixels;}  }
class C{  protected PlacesAddQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public static boolean showDialog(){  MXDOptionsPanel panel=new MXDOptionsPanel();  panel.setVisible(true);  return panel.ok;}  }
class C{  private void expandAllNodes(JTree tree){  TreeNode root=(TreeNode)tree.getModel().getRoot();  expandAllNodes(tree,new TreePath(root));}  }
class C{  public TContainsExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static boolean isValidClassFile(@NotNull byte[] classData){  return classData.length >= 7 && getMagic(classData) == 0xCAFEBABE;}  }
class C{  public DocumentNGramGaussNormSymWinGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){  MinSize=iMinSize;  MaxSize=iMaxSize;  CorrelationWindow=iCorrelationWindow;  InitGraphs();}  }
class C{  private static boolean snapVerticalGrid(Point candidatePoint){  int y=candidatePoint.y;  y=(y / SceneDraw.GRID_SPACING) * SceneDraw.GRID_SPACING;  candidatePoint.y=y;  return true;}  }
class C{  public boolean simple_edges_bidirectional(){  return soot.PhaseOptions.getBoolean(options,"simple-edges-bidirectional");}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return ((columnIndex == COL_MIN_SCALE) || (columnIndex == COL_MAX_SCALE));}  }
class C{  public OfferRequirement(String taskType,Collection<TaskInfo> taskInfos) throws InvalidRequirementException {  this(taskType,taskInfos,Optional.empty());}  }
class C{  @Override public long toLong(){  return 0;}  }
class C{  @Override protected void checkVectorDimensions(int n) throws MathIllegalArgumentException {  if (data.length != n) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,data.length,n);  }}  }
class C{  public boolean isFacePainted(BlockFace face){  byte data=getData();  if (data == MushroomBlockTexture.ALL_PORES.getData() || data == MushroomBlockTexture.STEM_SIDES.getData() || data == MushroomBlockTexture.ALL_STEM.getData()) {    return false;  }switch (face) {case WEST:    return data < NORTH_LIMIT;case EAST:  return data > SOUTH_LIMIT;case NORTH:return data % EAST_WEST_LIMIT == EAST_REMAINDER;case SOUTH:return data % EAST_WEST_LIMIT == WEST_REMAINDER;case UP:return true;case DOWN:case SELF:return data == MushroomBlockTexture.ALL_CAP.getData();default :return false;}}  }
class C{  public FieldPanel(int xPos,String labelString,int height){  this.xPos=xPos;  setLayout(null);  internalCreateLabel(xPos,labelString);  Dimension size=new Dimension(BasePanel.FIELD_PANEL_WIDTH,height);  this.setPreferredSize(size);}  }
class C{  public EntityQuery cache(boolean useCache){  this.useCache=useCache;  return this;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void normalizeTo(double dNewMax){  double dMax=0;  Iterator iValIter=hDistro.values().iterator();  while (iValIter.hasNext()) {    dMax=Math.max(dMax,(Double)iValIter.next());  }  double dFactor=dNewMax / dMax;  Iterator<TKeyType> iKeyIter=hDistro.keySet().iterator();  while (iKeyIter.hasNext()) {    TKeyType oKey=iKeyIter.next();    Double dVal=(Double)hDistro.get(oKey);    dVal*=dFactor;    hDistro.put(oKey,dVal);  }}  }
class C{  public void addLine(@NotNull RangedContinuousSeries series){  mLinesConfig.put(series,new LineConfig(LineConfig.COLORS[mNextLineColorIndex++]));  mNextLineColorIndex%=LineConfig.COLORS.length;}  }
class C{  public GitRepository withWorkTree(Path newWorkTree){  return new GitRepository(this.gitDir,newWorkTree,this.verbose,this.environment);}  }
class C{  private boolean evenOutTabs(float amount,boolean allowReverseDirection){  if (mStackTabs == null || mOverviewAnimationType != OverviewAnimationType.NONE || mEvenOutProgress >= 1.0f || amount == 0) {    return false;  }  boolean changed=false;  boolean reverseScrolling=false;  float absoluteProgress=Math.min(Math.abs(amount) * mEvenOutRate,1.0f - mEvenOutProgress);  float relativeProgress=absoluteProgress / (1.0f - mEvenOutProgress);  float screenMax=getScrollDimensionSize();  for (int i=0; i < mStackTabs.length; ++i) {    float source=mStackTabs[i].getScrollOffset();    float target=screenToScroll(i * mSpacing);    float sourceScreen=Math.min(screenMax,scrollToScreen(source + mScrollTarget));    float targetScreen=Math.min(screenMax,scrollToScreen(target + mScrollTarget));    if (sourceScreen == targetScreen) {      mStackTabs[i].setScrollOffset(target);      continue;    }    float step=source + (target - source) * relativeProgress;    float stepScreen=Math.min(screenMax,scrollToScreen(step + mScrollTarget));    if (sourceScreen == stepScreen) {      mStackTabs[i].setScrollOffset(step);      continue;    }    if ((targetScreen - sourceScreen) * amount > 0 || allowReverseDirection) {      mStackTabs[i].setScrollOffset(step);      changed=true;    } else {      reverseScrolling=true;    }  }  if (!reverseScrolling) {    mEvenOutProgress+=absoluteProgress;  }  return changed;}  }
class C{  public RecognitionRequest(byte[]... imageByteArrays){  for (  byte[] imageBytes : imageByteArrays) {    items.add(new Item(imageBytes));  }}  }
class C{  public static String string(String prefix){  return prefix + "=" + string();}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  private Optional<UserFilter> findUserFilter(String filterId){  return Optional.ofNullable(filterId == null ? null : userFilterRepository.findOne(filterId));}  }
class C{  @Override public Filter createFilter(){  return new TEqualsExtended();}  }
class C{  @Override public final Object createInstance(Reader reader){  throw new UnsupportedOperationException("createInstance");}  }
class C{  private void openFile(){  stopPreview(true);  mContainerActivity.getFileOperationsHelper().openFile(getFile());  finish();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_HEAL_MP_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201163,num0,skillname);}  }
class C{  public boolean isCacheLoaded(){  return cacheLoadCount > 0;}  }
class C{  public boolean isDirectDictionaryColumns(){  List<ColumnExpression> listOfExp=new ArrayList<ColumnExpression>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  getColumnList(this,listOfExp);  for (  ColumnExpression ce : listOfExp) {    if (!ce.getCarbonColumn().hasEncoding(Encoding.DICTIONARY)) {      return true;    }  }  return false;}  }
class C{  public void dismissImmediately(){  super.dismiss();  if (mAnimation != null)   mAnimation.cancel();  if (mHandler != null)   mHandler.removeCallbacks(mDismissAction);}  }
class C{  private void toWagonFormat(FeatureVectorLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {  StringBuilder sb=new StringBuilder();  FeatureVector fv[]=node.getFeatureVectors();  sb.append("(((");  for (int i=0; i < fv.length; i++) {    sb.append("(" + fv[i].getUnitIndex() + " 0)");    if (i + 1 != fv.length) {      sb.append(" ");    }  }  sb.append(") 0))" + extension);  if (out != null) {    writeStringToOutput(sb.toString(),out);  } else {  }  if (pw != null) {    pw.println(sb.toString());  }}  }
class C{  public Input remove(int code){synchronized (this.keys) {    return this.keys.remove(code);  }}  }
class C{  protected void moveToUnusable(){  try {    _space.stopInternal();  } catch (  SpaceAlreadyStoppedException e) {  }catch (  RemoteException e) {  }}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  public DrawerObject(){  selectedId=R.id.action_home;}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.processingInstruction(target,data,augs);  if (fDTDHandler != null) {    fDTDHandler.processingInstruction(target,data,augs);  }}  }
class C{  public static void writeLittleEndianFloat(DataOutputStream dataStream,float val) throws IOException {  writeLittleEndianInt(dataStream,Float.floatToRawIntBits(val));}  }
class C{  public AccountUnregisterDeviceQuery deviceId(String value){  return unsafeParam("device_id",value);}  }
class C{  public void addAll(JsonArray array){  elements.addAll(array.elements);}  }
class C{  public void switchToPreviousTab(){  switchToTab(-1);}  }
class C{  public MemoryBasedEntryCacheInfo(IEntryHolder entryHolder){  m_EntryHolder=entryHolder;}  }
class C{  public EntityResolver2Wrapper(EntityResolver2 entityResolver){  setEntityResolver(entityResolver);}  }
class C{  public ModelSubMenu cloneModelSubMenu(ModelMenu modelMenu,ModelMenuItem parentMenuItem,BuildArgs buildArgs){  return new ModelSubMenu(this,modelMenu,parentMenuItem,buildArgs);}  }
class C{  private ProxySelector createFixedProxySelector(IEProxyConfig ieProxyConfig) throws ProxyException {  String proxyString=ieProxyConfig.getProxy();  String bypassList=ieProxyConfig.getProxyBypass();  if (proxyString == null) {    return null;  }  Logger.log(getClass(),LogLevel.TRACE,"IE uses manual settings: {0} with bypass list: {1}",proxyString,bypassList);  Properties p=parseProxyList(proxyString);  ProtocolDispatchSelector ps=new ProtocolDispatchSelector();  addSelectorForProtocol(p,"http",ps);  addSelectorForProtocol(p,"https",ps);  addSelectorForProtocol(p,"ftp",ps);  addSelectorForProtocol(p,"gopher",ps);  addSelectorForProtocol(p,"socks",ps);  addFallbackSelector(p,ps);  ProxySelector result=setByPassListOnSelector(bypassList,ps);  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_ATE_FOOD_3(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400622,value0,value1);}  }
class C{  protected MarketDeleteQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public static int hash32(final String text,int from,int length){  return hash32(text.substring(from,from + length));}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public Foliage(Biome biome,int original){  super(biome,original);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public boolean containsPrimaryKey(){  return containsPrimaryKey(false);}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public void overrideButton(String button,boolean override){  LOG.i("App","WARNING: Volume Button Default Behavior will be overridden.  The volume event will be fired!");  if (button.equals("volumeup")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_UP,override);  } else   if (button.equals("volumedown")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_DOWN,override);  } else   if (button.equals("menubutton")) {    webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_MENU,override);  }}  }
class C{  protected MessagesCreateChatQuery userIds(int... value){  return unsafeParam("user_ids",value);}  }
class C{  public VideoReportQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){  super(client,"video.report",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  videoId(videoId);}  }
class C{  public void anonymize(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    if (theAtts.getType(i).equals("ID") || theAtts.getQName(i).equals("name")) {      theAtts.removeAttribute(i);    }  }}  }
class C{  public boolean canGetDate(){  return canGet(Date.class);}  }
class C{  public void sendBroadcast(Context context,Intent intent){  context.sendBroadcast(intent);}  }
class C{  public CholeskyDecomposition chol(){  return new CholeskyDecomposition(this);}  }
class C{  public static int lcm(int a,int b){  if (a == 0 || b == 0) {    return 0;  }  int lcm=Math.abs(mulAndCheck(a / gcd(a,b),b));  if (lcm == Integer.MIN_VALUE) {    throw MathRuntimeException.createArithmeticException("overflow: lcm({0}, {1}) is 2^31",a,b);  }  return lcm;}  }
class C{  public EquipmentUnitRemove(final Long changeId,final long equipmentId){  setChangeId(changeId);  setEquipmentId(equipmentId);}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator,boolean flywheel){  mInterpolator=interpolator;  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);}  }
class C{  static void findAllVisibleChilds(final ViewGroup viewGroup,final List<View> ordoredChilds){  for (int childViewIndex=0; childViewIndex < viewGroup.getChildCount(); childViewIndex++) {    final View childView=viewGroup.getChildAt(childViewIndex);    if (childView instanceof ViewGroup) {      findAllVisibleChilds((ViewGroup)childView,ordoredChilds);      continue;    }    if (childView.getVisibility() == View.VISIBLE) {      ordoredChilds.add(childView);    }  }}  }
class C{  public long skip(long n) throws IOException {  if ((n % frameSize) != 0) {    n-=(n % frameSize);  }  if (frameLength != AudioSystem.NOT_SPECIFIED) {    if ((n / frameSize) > (frameLength - framePos)) {      n=(frameLength - framePos) * frameSize;    }  }  long temp=stream.skip(n);  if (temp % frameSize != 0) {    throw new IOException("Could not skip an integer number of frames.");  }  if (temp >= 0) {    framePos+=temp / frameSize;  }  return temp;}  }
class C{  private void doSendToFilterModule(final SourceDataTag currentSourceDataTag,final ValueUpdate update,final SourceDataTagQuality quality,final boolean dynamicFiltered,final int filterType){  this.equipmentLogger.trace("sendToFilterModule - entering sendToFilterModule() for tag #" + currentSourceDataTag.getId());  this.filterMessageSender.addValue(makeFilterValue(currentSourceDataTag,update,quality,dynamicFiltered,filterType));  this.equipmentLogger.trace("sendToFilterModule - leaving sendToFilterModule() for tag #" + currentSourceDataTag.getId());}  }
class C{  public void swipeFlingOccurred(long time,float x,float y,float tx,float ty,float vx,float vy){  if (!mInSwipe)   return;  fling(time,x,y,vx,vy);  onUpOrCancel(time);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CURRENT_INCLUDES(int num0){  return new SM_SYSTEM_MESSAGE(1300639,num0);}  }
class C{  public final int enableCryptKey(){  return crypt.enableKey();}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public Boolean isValue(){  return value;}  }
class C{  public PhotoDetailsView(Context context){  super(context);  this.initialize();}  }
class C{  public void addMatchBlocks(SortedSet<IMatchBlock> matchBlocks){  setMatchBlocks(matchBlocks.toArray(new IMatchBlock[matchBlocks.size()]));}  }
class C{  @Override public void onCaptureStarted(){}  }
class C{  public void addNewRaster(){  if (symbolTree == null) {    return;  }  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  RasterSymbolizer newRasterSymbolizer=DefaultSymbols.createDefaultRasterSymbolizer();  DefaultMutableTreeNode ruleNode=getRuleTreeNode();  SelectedSymbol.getInstance().addSymbolizerToRule(newRasterSymbolizer);  DefaultMutableTreeNode newNode=sldTree.addObject(ruleNode,newRasterSymbolizer,true);  if (newNode != null) {    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatUp_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200418,value0,skillname);}  }
class C{  public Schur(Zmat A) throws JampackException {  int i, il, iter, iu, k;  double d, sd, sf;  Z b=new Z(), c=new Z(), disc=new Z(), kappa=new Z(), p, q, r, r1=new Z(), r2=new Z(), s, z1=new Z(), z2=new Z();  Rot P=new Rot();  if (A.nr != A.nc) {    throw new JampackException("Nonsquare matrix");  }  Zhess H=new Zhess(A);  T=new Zutmat(H.H);  U=H.U;  iu=T.rx;  iter=0;  while (true) {    while (iu > T.bx) {      d=Z.abs1(T.get(iu,iu)) + Z.abs1(T.get(iu - 1,iu - 1));      sd=Z.abs1(T.get(iu,iu - 1));      if (sd >= 1.0e-16 * d)       break;      T.put(iu,iu - 1,Z.ZERO);      iter=0;      iu=iu - 1;    }    if (iu == T.bx)     break;    iter=iter + 1;    if (iter >= MAXITER) {      throw new JampackException("Maximum number of iterations exceeded.");    }    il=iu - 1;    while (il > T.bx) {      d=Z.abs1(T.get(il,il)) + Z.abs1(T.get(il - 1,il - 1));      sd=Z.abs1(T.get(il,il - 1));      if (sd < 1.0e-16 * d)       break;      il=il - 1;    }    if (il != T.bx) {      T.put(il,il - 1,Z.ZERO);    }    p=T.get(iu - 1,iu - 1);    q=T.get(iu - 1,iu);    r=T.get(iu,iu - 1);    s=T.get(iu,iu);    sf=Z.abs1(p) + Z.abs1(q) + Z.abs1(r)+ Z.abs1(s);    p.Div(p,sf);    q.Div(q,sf);    r.Div(r,sf);    s.Div(s,sf);    c.Minus(z1.Times(p,s),z2.Times(r,q));    b.Plus(p,s);    disc.Sqrt(disc.Minus(z1.Times(b,b),z2.Times(4,c)));    r1.Div(r1.Plus(b,disc),2);    r2.Div(r2.Minus(b,disc),2);    if (Z.abs1(r1) > Z.abs1(r2)) {      r2.Div(c,r1);    } else {      r1.Div(c,r2);    }    if (Z.abs1(z1.Minus(r1,s)) < Z.abs1(z2.Minus(r2,s))) {      kappa.Times(sf,r1);    } else {      kappa.Times(sf,r2);    }    p.Minus(T.get(il,il),kappa);    q.Eq(T.get(il + 1,il));    Rot.genc(p.re,p.im,q.re,q.im,P);    for (i=il; i < iu; i++) {      Rot.pa(P,T,i,i + 1,i,T.cx);      Rot.aph(T,P,T.bx,Math.min(i + 2,iu),i,i + 1);      Rot.aph(U,P,U.bx,U.rx,i,i + 1);      if (i != iu - 1) {        Rot.genc(T,i + 1,i + 2,i,P);      }    }  }}  }
class C{  public ScriptingExecutor<T> scriptingExecutor(){  return remotingConfigurer.proxy();}  }
class C{  public TObjectLongHashMap(){  super();}  }
class C{  public ConvergenceException(){  this(LocalizedCoreFormats.CONVERGENCE_FAILED);}  }
class C{  private int findNextIndexNonZero(double[] contour,int current){  for (int i=current + 1; i < contour.length; i++) {    if (contour[i] != 0) {      return i;    }  }  return -1;}  }
class C{  public static float tan(float fValue){  return (float)Math.tan(fValue);}  }
class C{  public void containAABB(FloatBuffer points){  if (points == null) {    return;  }  points.rewind();  if (points.remaining() <= 2) {    return;  }  Vector3f vect1=Vector3f.newInstance();  BufferUtils.populateFromBuffer(vect1,points,0);  float minX=vect1.x, minY=vect1.y, minZ=vect1.z;  float maxX=vect1.x, maxY=vect1.y, maxZ=vect1.z;  for (int i=1, len=points.remaining() / 3; i < len; i++) {    BufferUtils.populateFromBuffer(vect1,points,i);    if (vect1.x < minX) {      minX=vect1.x;    } else     if (vect1.x > maxX) {      maxX=vect1.x;    }    if (vect1.y < minY) {      minY=vect1.y;    } else     if (vect1.y > maxY) {      maxY=vect1.y;    }    if (vect1.z < minZ) {      minZ=vect1.z;    } else     if (vect1.z > maxZ) {      maxZ=vect1.z;    }  }  Vector3f.recycle(vect1);  center.set(minX + maxX,minY + maxY,minZ + maxZ);  center.multLocal(0.5f);  xExtent=maxX - center.x;  yExtent=maxY - center.y;  zExtent=maxZ - center.z;}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3,T obj4){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  list.add(obj4);  return list;}  }
class C{  private void openDashboardTabInNewActivityStack(){  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(DASHBOARD_URL));  intent.setPackage(getActivity().getPackageName());  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  startActivity(intent);}  }
class C{  protected void onViewDetached(){}  }
class C{  protected void onAdjustChildViews(boolean down){  if (down)   correctTooHigh(getChildCount()); else   correctTooLow(getChildCount());}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  @Override public CompletableFuture<Void> delete(){  CompletableFuture<Void> deleteFuture=new CompletableFuture<>();  this.close().thenCompose(null).thenAccept(null).exceptionally(null);  return deleteFuture;}  }
class C{  private static boolean _cover1(String dest,int w,int h,List<String> sources) throws Exception {  int len=sources.size();  if (len == 4) {    BufferedImage src[]=new BufferedImage[len];    for (int i=0; i < len; i++) {      String s=sources.get(i);      if (!EMPTY.equals(s)) {        src[i]=ImageIO.read(new File(sources.get(i)));      }    }    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);    Graphics2D g=(Graphics2D)out.getGraphics();    g.setColor(Color.WHITE);    g.fillRect(0,0,w,h);    int size=2;    int space=4;    int w1=(w - 1) / size;    int h1=(h - 1) / size;    float fd=((float)w1) / h1;    for (int i=0; i < len; i++) {      int x=(i % size) * w1;      int y=(i / size) * h1;      BufferedImage img=src[i];      if (img != null) {        int w2=img.getWidth();        int h2=img.getHeight();        float fs=((float)w2) / h2;        if (fs > fd) {          w2=w1;          h2=(int)(w2 / fs);        } else         if (fs < fd) {          h2=h1;          w2=(int)(h2 * fs);        } else {          w2=w1;          h2=h1;        }        Image tmp=img.getScaledInstance(w2,h2,Image.SCALE_SMOOTH);        g.drawImage(tmp,x + space + (w1 - w2) / 2,y + space + (h1 - h2) / 2,w2 - 2 * space,h2 - 2 * space,null);      }      drawRect(g,x,y,w1,h1);    }    ImageIO.write(out,"jpg",new File(dest));    g.dispose();    return true;  } else {    throw new Exception("sources MUST is 4 picutures!" + len);  }}  }
class C{  @ManagedOperation(description="Notifies all Alarm cache listeners (status confirmation).") public void notifyAllAlarmCacheListeners(){  LOGGER.info("Recovery task: notifying all alarm cache listeners (cache persistence to DB, re-publication to clients, publication to LASER if not already done)");  for (  Long key : alarmCache.getKeys()) {    alarmCache.acquireWriteLockOnKey(key);    try {      Alarm alarm=alarmCache.getCopy(key);      long eventTime=System.currentTimeMillis();      alarmCache.notifyListenerStatusConfirmation(alarm,eventTime);    }  finally {      alarmCache.releaseWriteLockOnKey(key);    }  }  LOGGER.info("Recovery task: finished notifying all alarm cache listeners.");}  }
class C{  private String inputAccruedNationalNumber(){  int lengthOfNationalNumber=nationalNumber.length();  if (lengthOfNationalNumber > 0) {    String tempNationalNumber="";    for (int i=0; i < lengthOfNationalNumber; i++) {      tempNationalNumber=inputDigitHelper(nationalNumber.charAt(i));    }    return ableToFormat ? appendNationalNumber(tempNationalNumber) : accruedInput.toString();  } else {    return prefixBeforeNationalNumber.toString();  }}  }
class C{  public CountriesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public SecurityConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  setProperty(SECURITY_MANAGER_PROPERTY,new SecurityManager());}  }
class C{  public RemoteEventBatchBusPacket(ITemplateHolder templateHolder,RemoteEvent[] events){  super(templateHolder,null,0,null,false);  this._remoteEvents=new BatchRemoteEvent(events);}  }
class C{  public static int parseMagnitude(String aLine){  if (aLine != null) {    if (underScoreEnabled) {      if (!warned) {        System.err.println("Using underscore parsing of magnitudes - only use with CREST");        warned=true;      }      String firstWord=Basic.getFirstWord(aLine);      int pos=firstWord.lastIndexOf('_');      if (Basic.isInteger(firstWord.substring(pos + 1)))       return Math.max(1,Integer.parseInt(firstWord.substring(pos + 1)));    }    if (enabled) {      int pos=aLine.indexOf(MAGNITUDE_TAG);      int next=pos + MAGNITUDE_TAG.length();      if (pos == -1) {        pos=aLine.indexOf(WEIGHT_TAG);        next=pos + WEIGHT_TAG.length();      }      if (pos >= 0 && next < aLine.length() && (aLine.charAt(next) == '|' || aLine.charAt(next) == '=')) {        int end=next + 1;        while (end < aLine.length() && Character.isDigit(aLine.charAt(end)))         end++;        String number=aLine.substring(next + 1,end);        if (Basic.isInteger(number))         return Math.max(1,Basic.parseInt(number));      }    }  }  return 1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_OTHER_combine_START(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400146,value0,value1);}  }
class C{  public static List<BigInteger> partitionDataElement(MapWritable dataMap,QuerySchema qSchema,DataSchema dSchema,boolean embedSelector) throws PIRException {  List<BigInteger> parts=new ArrayList<>();  logger.debug("queryType = " + qSchema.getSchemaName());  if (embedSelector) {    String selectorFieldName=qSchema.getSelectorName();    String type=dSchema.getElementType(selectorFieldName);    String selector=getSelectorByQueryType(dataMap,qSchema,dSchema);    parts.addAll(embeddedSelectorToPartitions(selector,type,dSchema.getPartitionerForElement(selectorFieldName)));    logger.debug("Added embedded selector for selector = " + selector + " parts.size() = "+ parts.size());  }  List<String> dataFieldsToExtract=qSchema.getElementNames();  for (  String fieldName : dataFieldsToExtract) {    Object dataElement=null;    if (dataMap.containsKey(dSchema.getTextName(fieldName))) {      dataElement=dataMap.get(dSchema.getTextName(fieldName));    }    if (dSchema.isArrayElement(fieldName)) {      List<String> elementArray=null;      if (dataElement == null) {        elementArray=Collections.singletonList("");      } else       if (dataElement instanceof WritableArrayWritable) {        elementArray=Arrays.asList(((WritableArrayWritable)dataElement).toStrings());      } else       if (dataElement instanceof ArrayWritable) {        elementArray=Arrays.asList(((ArrayWritable)dataElement).toStrings());      }      parts.addAll(dSchema.getPartitionerForElement(fieldName).arrayToPartitions(elementArray,dSchema.getElementType(fieldName)));    } else {      if (dataElement == null) {        dataElement="";      } else       if (dataElement instanceof Text) {        dataElement=dataElement.toString();      }      parts.addAll(dSchema.getPartitionerForElement(fieldName).toPartitions(dataElement,dSchema.getElementType(fieldName)));    }  }  logger.debug("parts.size() = " + parts.size());  return parts;}  }
class C{  public PhotosRemoveTagQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public Class toClass(String codebase) throws IOException, ClassNotFoundException {  if (name.charAt(0) != ';') {    return ClassLoading.loadClass(codebase,name,null,integrity,null);  }  StringTokenizer st=new StringTokenizer(name,";");  String[] ifs=new String[st.countTokens()];  for (int i=0; i < ifs.length; i++) {    ifs[i]=st.nextToken();  }  return ClassLoading.loadProxyClass(codebase,ifs,null,integrity,null);}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public boolean isPronounceable(String word){  String lowerCaseWord=word.toLowerCase();  return (prefixFSM.accept(lowerCaseWord) && suffixFSM.accept(lowerCaseWord));}  }
class C{  @Override public float toFloat(){  throw new UnsupportedOperationException();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sprint_A_TO_SELF(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200875,skilltarget,skillcaster,skillname);}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{-667.24856187,-65.6230835029,-25.4830299460,-12.0588781808,-5.26313542807,669.64856187,68.0230835029,27.8830299460,14.4588781808,7.66313542807};}  }
class C{  static void printField(){  for (int y=0; y <= field_size; y++) {    System.out.print(y);  }  System.out.println();  for (int y=0; y < field_size; y++) {    System.out.print(y + 1);    for (int x=0; x < field_size; x++) {      System.out.print(field[x][y]);    }    System.out.println();  }}  }
class C{  public static boolean calculateMagicalCriticalRate(Creature attacker,Creature attacked,int criticalProb){  if (attacker instanceof Servant || attacker instanceof Homing) {    return false;  }  int critical=attacker.getGameStats().getMCritical().getCurrent();  if (attacked instanceof Player) {    critical=attacked.getGameStats().getPositiveReverseStat(StatEnum.MAGICAL_CRITICAL_RESIST,critical) + attacked.getGameStats().getPositiveReverseStat(StatEnum.PVP_MAGICAL_RESIST,critical);  } else {    critical=attacked.getGameStats().getPositiveReverseStat(StatEnum.MAGICAL_CRITICAL_RESIST,critical);  }  critical*=(float)criticalProb / 100f;  double criticalRate;  if (critical <= 440) {    criticalRate=critical * 0.1f;  } else   if (critical <= 600) {    criticalRate=(440 * 0.1f) + ((critical - 440) * 0.05f);  } else {    criticalRate=(440 * 0.1f) + (160 * 0.05f) + ((critical - 600) * 0.02f);  }  return Rnd.nextInt(100) < criticalRate;}  }
class C{  public void start(Context applicationContext){  assert applicationContext != null;  if (mState != STATE_IDLE)   throwInvalidState();  mApiClient=createApiClient(mCastListener,applicationContext);  mApiClient.connect();  mState=STATE_CONNECTING_TO_API;}  }
class C{  public FilenameUtils(){  super();}  }
class C{  private boolean handleMotionEvent(WXGestureType WXGestureType,MotionEvent motionEvent){  if (component.containsGesture(WXGestureType)) {    List<Map<String,Object>> list=createFireEventParam(motionEvent);    for (    Map<String,Object> map : list) {      WXSDKManager.getInstance().fireEvent(component.mInstanceId,component.mDomObj.ref,WXGestureType.toString(),map);    }    return true;  } else {    return false;  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private void createAndOpenProject(IProject project,IProjectDescription desc,IProgressMonitor monitor) throws SVNException {  try {    monitor.beginTask(null,5);    if (project.exists()) {      if (desc != null) {        project.move(desc,true,Policy.subMonitorFor(monitor,3));      }    } else {      if (desc == null) {        project.create(Policy.subMonitorFor(monitor,3));      } else {        project.create(desc,Policy.subMonitorFor(monitor,3));      }    }    if (!project.isOpen()) {      project.open(Policy.subMonitorFor(monitor,2));    }  } catch (  CoreException e) {    throw SVNException.wrapException(e);  } finally {    monitor.done();  }}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  @Override public void onUIRefreshPrepare(PtrFrameLayout frame){}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  private void showUpdateInfoBar(ChromeActivity activity){  ThreadUtils.assertOnUiThread();  Tab currentTab=activity.getActivityTab();  boolean tabIsInvalid=currentTab == null || currentTab.isNativePage();  boolean mayShowUpdateInfoBar=activity.mayShowUpdateInfoBar();  boolean urlIsInvalid=mUpdateURL == null;  if (tabIsInvalid || !mayShowUpdateInfoBar || urlIsInvalid) {    mMustShowInfoBar=true;    return;  }  Resources resources=activity.getResources();  String message=resources.getString(R.string.update_available_infobar);  String button=resources.getString(R.string.update_available_infobar_button);  OmahaUpdateInfobar updateBar=new OmahaUpdateInfobar(activity,message,button,mUpdateURL);  currentTab.getInfoBarContainer().addInfoBar(updateBar);  mMustShowInfoBar=false;}  }
class C{  @Override public void onFailure(Throwable cause){  LOG.error("Encountered failures on writing record as (lid = {}, eid = {}) :",new Object[]{currentLogSegmentSeqNo,currentEntryId,cause});  errorsFound.set(true);  syncLatch.countDown();}  }
class C{  public static void copy(InputStream in,boolean closeIn,OutputStream out,boolean closeOut) throws IOException {  try {    try {      IOUtils.copy(in,out);    }  finally {      if (closeIn)       IOUtils.closeQuietly(in);    }  }  finally {    if (closeOut)     IOUtils.closeQuietly(out);  }}  }
class C{  public LoginServerConnection connect(){  SocketChannel sc;  for (; ; ) {    loginServer=null;    log.info("Connecting to LoginServer: " + NetworkConfig.LOGIN_ADDRESS);    try {      sc=SocketChannel.open(NetworkConfig.LOGIN_ADDRESS);      sc.configureBlocking(false);      Dispatcher d=nioServer.getReadWriteDispatcher();      loginServer=new LoginServerConnection(sc,d);      d.register(sc,SelectionKey.OP_READ,loginServer);      loginServer.initialized();      return loginServer;    } catch (    Exception e) {      log.info("Cant connect to LoginServer: " + e.getMessage());    }    try {      Thread.sleep(10 * 1000);    } catch (    Exception e) {    }  }}  }
class C{  private void calculateInfluence(){  float balaurea=0.0012878048f;  float abyss=0.006097561f;  float e_inggison=0;  float a_inggison=0;  float b_inggison=0;  float t_inggison=0;  float e_gelkmaros=0;  float a_gelkmaros=0;  float b_gelkmaros=0;  float t_gelkmaros=0;  float e_abyss=0;  float a_abyss=0;  float b_abyss=0;  float t_abyss=0;  float e_kaldor=0;  float a_kaldor=0;  float b_kaldor=0;  float t_kaldor=0;  for (  SiegeLocation sLoc : SiegeService.getInstance().getSiegeLocations().values()) {switch (sLoc.getWorldId()) {case 210050000:      if (sLoc instanceof FortressLocation) {        t_inggison+=sLoc.getInfluenceValue();switch (sLoc.getRace()) {case ELYOS:          e_inggison+=sLoc.getInfluenceValue();        break;case ASMODIANS:      a_inggison+=sLoc.getInfluenceValue();    break;case BALAUR:  b_inggison+=sLoc.getInfluenceValue();break;}}break;case 220070000:if (sLoc instanceof FortressLocation) {t_gelkmaros+=sLoc.getInfluenceValue();switch (sLoc.getRace()) {case ELYOS:e_gelkmaros+=sLoc.getInfluenceValue();break;case ASMODIANS:a_gelkmaros+=sLoc.getInfluenceValue();break;case BALAUR:b_gelkmaros+=sLoc.getInfluenceValue();break;}}break;case 400010000:if (sLoc instanceof FortressLocation) {t_abyss+=sLoc.getInfluenceValue();switch (sLoc.getRace()) {case ELYOS:e_abyss+=sLoc.getInfluenceValue();break;case ASMODIANS:a_abyss+=sLoc.getInfluenceValue();break;case BALAUR:b_abyss+=sLoc.getInfluenceValue();break;}}break;case 600090000:if (sLoc instanceof FortressLocation) {t_kaldor+=sLoc.getInfluenceValue();switch (sLoc.getRace()) {case ELYOS:e_kaldor+=sLoc.getInfluenceValue();break;case ASMODIANS:a_kaldor+=sLoc.getInfluenceValue();break;case BALAUR:b_kaldor+=sLoc.getInfluenceValue();}}break;}}inggison_e=e_inggison / t_inggison;inggison_a=a_inggison / t_inggison;inggison_b=b_inggison / t_inggison;gelkmaros_e=e_gelkmaros / t_gelkmaros;gelkmaros_a=a_gelkmaros / t_gelkmaros;gelkmaros_b=b_gelkmaros / t_gelkmaros;abyss_e=e_abyss / t_abyss;abyss_a=a_abyss / t_abyss;abyss_b=b_abyss / t_abyss;kaldor_e=(e_kaldor / t_kaldor);kaldor_a=(a_kaldor / t_kaldor);kaldor_b=(b_kaldor / t_kaldor);global_e=((kaldor_e * balaurea + inggison_e * balaurea + gelkmaros_e * balaurea + abyss_e * abyss) * 100f);global_a=((kaldor_a * balaurea + inggison_a * balaurea + gelkmaros_a * balaurea + abyss_a * abyss) * 100f);global_b=((kaldor_b * balaurea + inggison_b * balaurea + gelkmaros_b * balaurea + abyss_b * abyss) * 100f);}  }
class C{  public static void isInstanceOf(String argumentName,Object argumentObject,Class<?>... targetClasses){  notNull(argumentName,argumentObject);  for (int i=0; i < targetClasses.length; ) {    if (targetClasses[i++].isInstance(argumentObject)) {      return;    }  }  StringBuilder sb=new StringBuilder(argumentName);  sb.append(" must be an instance of");  for (int i=0; i < targetClasses.length; ) {    if (i != 0) {      sb.append(",");    }    sb.append(" ").append(targetClasses[i++].getName());  }  throw new IllegalArgumentException(sb.toString());}  }
class C{  @Override public ASContentModel createASContentModel(int minOccurs,int maxOccurs,short operator) throws DOMASException {  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}  }
class C{  protected void handleJobResponse(String ticket,JobsApiRequest apiRequest,AsyncResponse asyncResponse){  apiRequest.getJobViewObservable(ticket).map(null).map(null).onErrorReturn(null).subscribe(null);}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public boolean isUpdateListenerRegistered(final BaseListener<? extends Tag> pListener){  boolean isRegistered=listeners.contains(pListener);  return isRegistered;}  }
class C{  public static void requireAnyChildElement(SimpleMethod method,Element element,String... elementNames) throws ValidationException {  Set<String> childElementNames=new HashSet<String>();  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      childElementNames.add(childElement.getTagName());    }    node=node.getNextSibling();  }  StringBuilder sb=new StringBuilder();  for (  String name : elementNames) {    if (childElementNames.contains(name)) {      return;    }    if (sb.length() > 0) {      sb.append(", ");    }    sb.append("<").append(name).append(">");  }  handleError("Element must include one of " + sb + " child elements.",method,element);}  }
class C{  public GroupsEditQuery contacts(Boolean value){  return unsafeParam("contacts",value);}  }
class C{  public Plan makeJoinPlan(Plan trunk){  Schema trunkSch=trunk.schema();  Predicate joinPred=pred.joinPredicate(sch,trunkSch);  if (joinPred == null)   return null;  Plan p=makeIndexJoinPlan(trunk,trunkSch);  if (p == null)   p=makeProductJoinPlan(trunk,trunkSch);  return p;}  }
class C{  public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper){  enableDragItem(itemTouchHelper,NO_TOGGLE_VIEW,true);}  }
class C{  @Override public boolean equals(Object other){  return this == other || (other instanceof Role && hashCode() == other.hashCode());}  }
class C{  public static double bernoullis(double n,double k,double successProb){  double combo=MathUtils.combination(n,k);  double q=1 - successProb;  return combo * Math.pow(successProb,k) * Math.pow(q,n - k);}  }
class C{  public void removeMethod(SootMethod m){  checkLevel(SIGNATURES);  if (!m.isDeclared() || m.getDeclaringClass() != this)   throw new RuntimeException("incorrect declarer for remove: " + m.getName());  if (subSigToMethods.get(m.getNumberedSubSignature()) == null) {    throw new RuntimeException("Attempt to remove method " + m.getSubSignature() + " which is not in class "+ this);  }  subSigToMethods.put(m.getNumberedSubSignature(),null);  methodList.remove(m);  m.setDeclared(false);}  }
class C{  public DatabaseGetCountriesByIdQuery(VkApiClient client){  super(client,"database.getCountriesById",Utils.buildParametrizedType(List.class,Country.class));}  }
class C{  void discardResource(){  R old=resource;  lifecycle.onRemoval(resourceKey.getKey(),old);}  }
class C{  public void release(GL10 gl){  if (textureId[0] != -1) {    gl.glDeleteTextures(1,textureId,0);    textureId[0]=-1;  }}  }
class C{  private void logMessage(Level logLevel,Throwable throwable,String message){  if (StandardLogService.doLog) {    try {      StringBuilder buff=new StringBuilder(Thread.currentThread().getName());      buff.append(" ");      buff.append(message);      message=buff.toString();      if (Level.ERROR.toString().equalsIgnoreCase(logLevel.toString())) {        logErrorMessage(throwable,message);      } else       if (Level.DEBUG.toString().equalsIgnoreCase(logLevel.toString())) {        logDebugMessage(throwable,message);      } else       if (Level.INFO.toString().equalsIgnoreCase(logLevel.toString())) {        logInfoMessage(throwable,message);      } else       if (Level.WARN.toString().equalsIgnoreCase(logLevel.toString())) {        logWarnMessage(throwable,message);      } else       if (Level.AUDIT.toString().equalsIgnoreCase(logLevel.toString())) {        audit(message);      } else       if (Level.STATISTICS == logLevel) {        statistic(message);      }    } catch (    Throwable t) {      logger.error(t);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200451,skilltarget);}  }
class C{  public void addDataSet(T d){  if (d == null)   return;  mYValCount+=d.getEntryCount();  if (mDataSets.size() <= 0) {    mYMax=d.getYMax();    mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      mLeftAxisMax=d.getYMax();      mLeftAxisMin=d.getYMin();    } else {      mRightAxisMax=d.getYMax();      mRightAxisMin=d.getYMin();    }  } else {    if (mYMax < d.getYMax())     mYMax=d.getYMax();    if (mYMin > d.getYMin())     mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      if (mLeftAxisMax < d.getYMax())       mLeftAxisMax=d.getYMax();      if (mLeftAxisMin > d.getYMin())       mLeftAxisMin=d.getYMin();    } else {      if (mRightAxisMax < d.getYMax())       mRightAxisMax=d.getYMax();      if (mRightAxisMin > d.getYMin())       mRightAxisMin=d.getYMin();    }  }  mDataSets.add(d);  handleEmptyAxis(getFirstLeft(),getFirstRight());}  }
class C{  public LikesAddQuery accessKey(String value){  return unsafeParam("access_key",value);}  }
class C{  public GroupsGetInvitesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_HE_IS_NOT_MY_GUILD_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300265,value0);}  }
class C{  private void initWidget(View v){  state=LOADING_STATE;  this.service=PhotoService.getService();  this.progress=(CircularProgressView)v.findViewById(R.id.dialog_stats_progress);  progress.setVisibility(View.VISIBLE);  this.dataContainer=(LinearLayout)v.findViewById(R.id.dialog_stats_dataContainer);  dataContainer.setVisibility(View.GONE);  this.likeNum=(TextView)v.findViewById(R.id.dialog_stats_likeNum);  DisplayUtils.setTypeface(getActivity(),likeNum);  this.viewNum=(TextView)v.findViewById(R.id.dialog_stats_viewNum);  DisplayUtils.setTypeface(getActivity(),viewNum);  this.downloadNum=(TextView)v.findViewById(R.id.dialog_stats_downloadNum);  DisplayUtils.setTypeface(getActivity(),downloadNum);}  }
class C{  public static Optional<String> wavefrontLine(DateTime ts,GroupName group,MetricName metric,MetricValue metric_value){  return wavefrontValue(metric_value).map(null);}  }
class C{  public EventsIntegrationTest(){  setResponseLogLengthLimit(1000);  dateFormat=new SimpleDateFormat("yyyy-MM-dd");  Calendar cal=Calendar.getInstance();  cal.add(Calendar.DATE,-1);  yesterday=dateFormat.format(cal.getTime());  yesterday+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,0);  today=dateFormat.format(cal.getTime());  today+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,1);  tomorrow=dateFormat.format(cal.getTime());  tomorrow+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,3);  tomorrowPlus3=dateFormat.format(cal.getTime());  tomorrowPlus3+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,-3);  yesterdayMinus3=dateFormat.format(cal.getTime());  yesterdayMinus3+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,5);  tomorrowPlus5=dateFormat.format(cal.getTime());  tomorrowPlus5+="T00:00:00+0000";  cal=Calendar.getInstance();  cal.add(Calendar.DATE,-5);  yesterdayMinus5=dateFormat.format(cal.getTime());  yesterdayMinus5+="T00:00:00+0000";  experiment=ExperimentFactory.createExperiment();  experiment.startTime=yesterdayMinus3;  experiment.endTime=tomorrowPlus3;  experiment.samplingPercent=1.0;  experiment.label="experiment";  experiment.applicationName=QBO + UUID.randomUUID();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  public void remove(GenericEntity entity){  UtilRedisCacheFactory.clearCache(getCacheName(entity.getEntityName()));  ModelEntity model=entity.getModelEntity();  if (model != null) {    Iterator<String> it=model.getViewConvertorsIterator();    while (it.hasNext()) {      String targetEntityName=it.next();      UtilRedisCacheFactory.clearCache(getCacheName(targetEntityName));    }  }}  }
class C{  public void scroll(int itemsToScroll,int time){  scroller.forceFinished(true);  lastScrollY=scrollingOffset;  int offset=itemsToScroll * getItemHeight();  scroller.startScroll(0,lastScrollY,0,offset - lastScrollY,time);  setNextMessage(MESSAGE_SCROLL);  startScrolling();}  }
class C{  public static Zmat o(Zmat A,Zdiagmat D) throws JampackException {  if (D.order != A.nrow || D.order != A.ncol) {    throw new JampackException("Matrices not conformable for subtraction");  }  Zmat C=new Zmat(A);  for (int i=0; i < D.order; i++) {    C.re[i][i]=C.re[i][i] - D.re[i];    C.im[i][i]=C.im[i][i] - D.im[i];  }  return C;}  }
class C{  public boolean putImageWithFullPath(String fullPath,Bitmap theBitmap){  return !(fullPath == null || theBitmap == null) && saveBitmap(fullPath,theBitmap);}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public void moveElement(String ref,String parentRef,Integer index){  if (TextUtils.isEmpty(ref) || TextUtils.isEmpty(parentRef)) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  task.args.add(parentRef);  task.args.add(index);  msg.what=WXDomHandler.MsgType.WX_DOM_MOVE_DOM;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  private void calculateAccumulatedDurations(Element sentence){  TreeWalker tw=((DocumentTraversal)sentence.getOwnerDocument()).createTreeWalker(sentence,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.PHONE,MaryXML.BOUNDARY),false);  float totalDurationInSeconds=0f;  Element element;  while ((element=(Element)tw.nextNode()) != null) {    if (element.getTagName().equals(MaryXML.PHONE)) {      int d=0;      try {        d=Integer.parseInt(element.getAttribute("d"));      } catch (      NumberFormatException e) {        Log.w(Mary.LOG,"Unexpected duration value `" + element.getAttribute("d") + "'");      }      float durationInSeconds=0.001f * d;      totalDurationInSeconds+=durationInSeconds;      element.setAttribute("end",String.format(Locale.US,"%.3f",totalDurationInSeconds));    } else {      int d=0;      try {        d=Integer.parseInt(element.getAttribute("duration"));      } catch (      NumberFormatException e) {        Log.w(Mary.LOG,"Unexpected duration value `" + element.getAttribute("duration") + "'");      }      float durationInSeconds=0.001f * d;      totalDurationInSeconds+=durationInSeconds;    }  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void outputOrigin(){  out.println("After decoding:");  for (int i=0; i < data_disk_nbr; i++) {    out.printf("data:%d:  ",i);    for (int j=0; j < stripe_unit_size; j++) {      out.printf("%c",check_data[i][j]);    }    out.printf("\n");  }}  }
class C{  private static double dpsForMove(final PokemonId pokemonId,final PokemonMove move,final boolean primary){  final PokemonMoveMeta moveMeta=PokemonMoveMetaRegistry.getMeta(move);  final int moveDelay=primary ? 0 : MOVE2_CHARGE_DELAY_MS;  double dps=(double)moveMeta.getPower() / (double)(moveMeta.getTime() + moveDelay) * MILLISECONDS_FACTOR;  if (PokemonUtils.hasStab(pokemonId,moveMeta.getMove())) {    dps=dps * STAB_MULTIPLIER;  }  return dps;}  }
class C{  public MatrixDimensionMismatchException(int wrongRowDim,int wrongColDim,int expectedRowDim,int expectedColDim){  super(org.hipparchus.migration.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_2x2,new Integer[]{wrongRowDim,wrongColDim},new Integer[]{expectedRowDim,expectedColDim});}  }
class C{  public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {  if (inspectorWindow.isLocked()) {    if (dir.getDocument().getProgressListener() != null)     dir.getDocument().getProgressListener().setUserCancelled(true);    throw new ExpandVetoException(event);  }  final TreePath path=event.getPath();  final NodeBase node=(NodeBase)path.getLastPathComponent();  if (node.getChildCount() > 0) {    if (node.isCompleted())     return; else {      int result=JOptionPane.showConfirmDialog(inspectorWindow.getFrame(),"List of children incomplete, re-fetch?","Re-fetch",JOptionPane.YES_NO_CANCEL_OPTION);      if (result == JOptionPane.NO_OPTION)       return; else       if (result == JOptionPane.CANCEL_OPTION)       throw new ExpandVetoException(event); else       node.removeAllChildren();    }  }  if (node instanceof TopLevelNode) {    inspectorWindow.addChildren((TopLevelNode)node);  } else   if (node instanceof ReadLevelNode) {    inspectorWindow.addChildren((ReadLevelNode)node,path.getPathComponent(1).toString());  }  if (node instanceof ReadDataLevelNode) {    inspectorWindow.addChildren((ReadDataLevelNode)node);  } else   if (node instanceof MatchLevelNode) {    inspectorWindow.addChildren((MatchLevelNode)node);  }}  }
class C{  public int start_production(){  return 1;}  }
class C{  public boolean isAskForUsername(){  return askForUsername;}  }
class C{  @Override public Object analyse(double[] frame){  if (frame.length != getFrameLengthSamples())   throw new IllegalArgumentException("Expected frame of length " + getFrameLengthSamples() + ", got "+ frame.length);  return calcLPC(frame,lpOrder,preemphasisCoefficient);}  }
class C{  @Override public boolean load(OpenJPAStateManager sm,BitSet fields,FetchConfiguration fetch,int lockLevel,Object context){  final ClassMetaData cm=sm.getMetaData();  final StateManager stateManager=(StateManager)sm;  final SpaceTypeInfo typeInfo=SpaceTypeInfoRepository.getTypeInfo(cm.getDescribedType());  final StateManager gsm=(StateManager)sm;  try {    if (!gsm.isCleared()) {      loadSpecificFields(sm,fields,typeInfo);      return true;    } else {      if (stateManager.getOwnerStateManager() == null) {        final IEntryPacket entry=readObjectFromSpace(sm);        if (entry == null)         return false;        loadFields(sm,entry,cm.getFields());        loadSpecificFields(sm,fields,typeInfo);        return true;      } else {        Stack<StateManager> sms=new Stack<StateManager>();        StateManager stateManagerToRead=stateManager;        while (stateManagerToRead.getOwnerStateManager() != null) {          sms.push(stateManagerToRead);          stateManagerToRead=stateManagerToRead.getOwnerStateManager();        }        final IEntryPacket entry=readObjectFromSpace(stateManagerToRead);        if (entry == null)         return false;        final IEntryPacket foundEntryPacket=_relationsManager.findObjectInEntry(stateManagerToRead,entry,sms);        if (foundEntryPacket == null)         return false;        loadFields(sm,foundEntryPacket,sm.getMetaData().getFields());        loadSpecificFields(sm,fields,typeInfo);      }      return true;    }  } catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public boolean convertTTML(String[] args){  try {    CmdLineParametersParser cmdLineParser=new CmdLineParametersParser();    CmdLineParameters cmdLineParams=cmdLineParser.parseCmdOptions(args);    if (cmdLineParams == null) {      return true;    }    TimedTextFileFormat ttff=new FormatTTML();    TimedTextObject tto=null;    for (    TtmlInDescriptor ttmlInDescriptor : cmdLineParams.getTtmlInDescriptors()) {      System.out.println("Processing input TTML: " + ttmlInDescriptor.getFile());      File file=new File(ttmlInDescriptor.getFile());      tto=ttff.parseFile(file,ttmlInDescriptor.getStartMS(),ttmlInDescriptor.getEndMS(),ttmlInDescriptor.getOffsetMS());    }    if (tto != null) {      if (cmdLineParams.doOuputTTML()) {        String outputTTMLFile=cmdLineParams.getOutputTtmlFile();        System.out.println("Generating output TTML: " + outputTTMLFile);        FileWriteHelper.writeFileTxt(outputTTMLFile,new FormatTTML().toFile(tto));      }      if (cmdLineParams.doOutputScc()) {        String outputSccFile=cmdLineParams.getOutputSccFile();        System.out.println("Generating output SCC: " + outputSccFile);        String[] scc=new SccBuilder().build(tto);        FileWriteHelper.writeFileTxt(outputSccFile,scc);      }      return true;    }  } catch (  ParseException exp) {    System.err.println("Parsing of command line arguments failed.  Reason: " + exp.getMessage());  }catch (  FatalParsingException|IOException e) {    System.err.println(e.getMessage());  }  return false;}  }
class C{  public Region<S> union(final Region<S> region1,final Region<S> region2){  final BSPTree<S> tree=region1.getTree(false).merge(region2.getTree(false),new UnionMerger());  tree.visit(nodeCleaner);  return region1.buildNew(tree);}  }
class C{  protected ConfigAspectBase(Model model,String aspectName){  this.model=Preconditions.checkNotNull(model);  this.aspectName=Preconditions.checkNotNull(aspectName);}  }
class C{  public void fillInitialCache(){  removeAll();  Map<String,T> initialCache=itemHandler.getInitialCache();  for (  Entry<String,T> entry : initialCache.entrySet()) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  @Deployment public void ActivitiEventType() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("variableProcess");  assertNotNull(processInstance);  assertEquals(3,listener.getEventsReceived().size());  ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNull(event.getTaskId());  assertEquals("variable",event.getVariableName());  assertEquals(123,event.getVariableValue());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNull(event.getTaskId());  assertEquals("variable",event.getVariableName());  assertEquals(456,event.getVariableValue());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertNull(event.getTaskId());  assertEquals("variable",event.getVariableName());  assertEquals(456,event.getVariableValue());}  }
class C{  public static final float[] convertColor(Color color){  return color.getRGBComponents(null);}  }
class C{  public static synchronized boolean remove(){  return removed;}  }
class C{  @Override public void removeAS(ASModel as){  fASModels.removeElement(as);}  }
class C{  public void postIdle(final Runnable runnable){  post(new IdleRunnable(runnable));}  }
class C{  @Override public void requestPhotoDetails(Context c){  view.initRefreshStart();  listener=new OnRequestPhotoDetailsListener(c);  model.getService().requestPhotoDetails(model.getPhoto(),listener);}  }
class C{  protected User createUserAndInjectSecurityContext(Set<OrganisationUnit> organisationUnits,Set<OrganisationUnit> dataViewOrganisationUnits,boolean allAuth,String... auths){  Assert.notNull(userService,"UserService must be injected in test");  UserAuthorityGroup userAuthorityGroup=new UserAuthorityGroup();  userAuthorityGroup.setName("Superuser");  if (allAuth) {    userAuthorityGroup.getAuthorities().add("ALL");  }  if (auths != null) {    for (    String auth : auths) {      userAuthorityGroup.getAuthorities().add(auth);    }  }  userService.addUserAuthorityGroup(userAuthorityGroup);  User user=createUser('A');  if (organisationUnits != null) {    user.setOrganisationUnits(organisationUnits);  }  if (dataViewOrganisationUnits != null) {    user.setDataViewOrganisationUnits(dataViewOrganisationUnits);  }  user.getUserCredentials().getUserAuthorityGroups().add(userAuthorityGroup);  userService.addUser(user);  user.getUserCredentials().setUserInfo(user);  userService.addUserCredentials(user.getUserCredentials());  List<GrantedAuthority> authorities=new ArrayList<>();  authorities.add(new SimpleGrantedAuthority("ALL"));  UserDetails userDetails=new org.springframework.security.core.userdetails.User(user.getUserCredentials().getUsername(),user.getUserCredentials().getPassword(),authorities);  Authentication authentication=new UsernamePasswordAuthenticationToken(userDetails,"",authorities);  SecurityContextHolder.getContext().setAuthentication(authentication);  return user;}  }
class C{  public void testNonFrameworkParent(){  doTestForParentApi("MyStyle","apiParentTestAfter1");}  }
class C{  public static long count(Bson q,Class<? extends Bean> t){  String collection=MongoHelper.getCollection(t);  if (!X.isEmpty(collection)) {    return count(collection,q);  }  return 0;}  }
class C{  @ObjectiveCName("handle:") protected void handle(Message message){  Record record;  boolean processed=false;  String recordName;  if (isUnhandledError(message)) {    client.onError(Topic.RECORD,Event.getEvent(message.data[0]),message.data[1]);    return;  }  if (message.action == Actions.ACK || message.action == Actions.ERROR) {    recordName=message.data[1];    if (isDiscardAck(message)) {      record=records.get(recordName);      if (Actions.getAction(message.data[0]) == Actions.DELETE && record != null) {        record.onMessage(message);      }      return;    }    if (message.data[0].equals(Actions.SNAPSHOT.toString())) {      snapshotRegistry.recieve(recordName,new DeepstreamError(message.data[2]),null);      return;    }    if (message.data[0].equals(Actions.HAS.toString())) {      hasRegistry.recieve(recordName,new DeepstreamError(message.data[2]),null);      return;    }  } else {    recordName=message.data[0];  }  record=records.get(recordName);  if (record != null) {    processed=true;    record.onMessage(message);  }  if (message.action == Actions.READ && snapshotRegistry.hasRequest(recordName)) {    processed=true;    snapshotRegistry.recieve(recordName,null,MessageParser.parseObject(message.data[2]));  }  if (message.action == Actions.HAS && hasRegistry.hasRequest(recordName)) {    processed=true;    hasRegistry.recieve(recordName,null,MessageParser.convertTyped(message.data[1],client));  }  UtilListener listener=listeners.get(recordName);  if (listener != null) {    processed=true;    listener.onMessage(message);  }  if (!processed) {    client.onError(Topic.RECORD,Event.UNSOLICITED_MESSAGE,String.format("%s %s",message.action,recordName));  }}  }
class C{  protected MarketAddToAlbumQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  private static String timeHour(int hour,int min){  int hh;  hh=hour;  if (min > 32) {    hh+=1;  }  if (hh == 24) {    hh=0;  }  if (hh > 12) {    hh-=12;  }  if (hh == 0) {    return "midnight";  } else   if (hh == 1) {    return "one";  } else   if (hh == 2) {    return "two";  } else   if (hh == 3) {    return "three";  } else   if (hh == 4) {    return "four";  } else   if (hh == 5) {    return "five";  } else   if (hh == 6) {    return "six";  } else   if (hh == 7) {    return "seven";  } else   if (hh == 8) {    return "eight";  } else   if (hh == 9) {    return "nine";  } else   if (hh == 10) {    return "ten";  } else   if (hh == 11) {    return "eleven";  } else   if (hh == 12) {    return "twelve";  } else {    return "twelve";  }}  }
class C{  public void updateConfig(String serviceURL,ClientConfiguration newConfig){  this.serviceURL=serviceURL;  this.clientConfig=newConfig;}  }
class C{  final public void copyToBuffer(ByteBuffer buffer){  buffer.put(_buffer,0,_count);}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public static long readSwappedUnsignedInteger(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  int value3=read(input);  int value4=read(input);  long low=(((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16));  long high=value4 & 0xff;  return (high << 24) + (0xffffffffL & low);}  }
class C{  public boolean isNaN(){  return Double.isNaN(x.getReal()) || Double.isNaN(y.getReal()) || Double.isNaN(z.getReal());}  }
class C{  public void usage(String commandName){  StringBuilder stringBuilder=new StringBuilder();  jCommander.usage(commandName,stringBuilder,"");  consoleWriter.a(stringBuilder).println();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DECOMPOSE_ITEM_INVALID_STANCE(int value0){  return new SM_SYSTEM_MESSAGE(1300451,new DescriptionId(value0));}  }
class C{  public short readShort() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(17);    int type=this.dataIn.read();    if (type == _SHORT) {      return this.dataIn.readShort();    }    if (type == _BYTE) {      return this.dataIn.readByte();    }    if (type == _STRING) {      return Short.valueOf(this.dataIn.readUTF()).shortValue();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to short.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a short type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  private static boolean isLetter(char ch){  return (('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z'));}  }
class C{  public void createOutFile(String filePath) throws IOException {  this.outFile=new ExifInterface(filePath);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  AttributesWindow viewer=(AttributesWindow)getViewer();  if (viewer != null) {    if (TaxonomyData.getName2IdMap().get(viewer.selectedTaxon) != 0) {      execute("show webpage taxon='" + viewer.selectedTaxon + "';");    }  }}  }
class C{  @Override public void onCheckedChanged(CompoundButton switchView,boolean isChecked){  if (!isResumed()) {    return;  }  ((FileActivity)getActivity()).getFileOperationsHelper().setUploadPermissionsToShare(mFile,isChecked);  switchView.setOnCheckedChangeListener(null);  switchView.toggle();  switchView.setOnCheckedChangeListener(mOnEditPermissionInteractionListener);}  }
class C{  private TreeSet<DimensionRow> applyFilters(TreeSet<DimensionRow> dimensionRows,Set<ApiFilter> filters){  for (  ApiFilter filter : filters) {switch (filter.getOperation()) {case eq:case in:      dimensionRows=inFilterOperation(dimensionRows,filter);    break;case notin:  dimensionRows=notinFilterOperation(dimensionRows,filter);break;case startswith:dimensionRows=startswithFilterOperation(dimensionRows,filter);break;case contains:dimensionRows=containsFilterOperation(dimensionRows,filter);break;default :LOG.error("Illegal Filter operation : {}",filter.getOperation());throw new IllegalArgumentException("Invalid Filter Operation.");}}return dimensionRows;}  }
class C{  public RunnableTaskAdapter(Runnable runnable){  this.runnable=runnable;}  }
class C{  public GroupsEditQuery access(GroupsEditAccess value){  return unsafeParam("access",value);}  }
class C{  public void testImportSimpleGradleProject() throws IOException, ConfigurationException {  VirtualFile moduleRoot=createGradleProjectToImport(dir,MODULE_NAME);  GradleModuleImporter.importModules(this,Collections.singletonMap(moduleRoot.getName(),moduleRoot),getProject(),null);  assertModuleImported(getProject(),MODULE_NAME,moduleRoot);}  }
class C{  public static double solve(UnivariateFunction function,double x0,double x1) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(function,LocalizedCoreFormats.FUNCTION);  final UnivariateSolver solver=new BrentSolver();  return solver.solve(Integer.MAX_VALUE,function,x0,x1);}  }
class C{  public VideoGetCommentsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  TouchesImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new TouchesExtended();  } else {    filter=new TouchesExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public List<LinkedList<Integer>> shortestPaths(){  return shortestPaths(n - 1);}  }
class C{  private ProxySelector installPacProxyIfAvailable(Dict proxySettings,ProxySelector result){  if (isActive(proxySettings.get("ProxyAutoConfigEnable"))) {    String url=(String)proxySettings.get("ProxyAutoConfigURLString");    result=ProxyUtil.buildPacSelectorForUrl(url);  }  return result;}  }
class C{  public synchronized VisualTable addDerivedTable(String group,String source,Predicate filter,Schema override){  VisualTable src=(VisualTable)getGroup(source);  VisualTable vt=new VisualTable(src,this,group,filter,override);  addDataGroup(group,vt,getSourceData(source));  return vt;}  }
class C{  public static float sin2(float fValue){  fValue=reduceSinAngle(fValue);  if (Math.abs(fValue) <= Math.PI / 4) {    return (float)Math.sin(fValue);  }  return (float)Math.cos(Math.PI / 2 - fValue);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201020,skilltarget,num0,skillcaster,skillname);}  }
class C{  public MarkdownProcessor(String localHostPath){  listLevel=0;  this.localHostPath=localHostPath;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public LogManager(){  Levels.FAILED.toString();  Levels.HANDLED.toString();}  }
class C{  public boolean isNegative(){  return years < 0 || months < 0 || days < 0 || hours < 0 || minutes < 0 || seconds < 0 || milliseconds < 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCMPHeal_Instant_HEAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201006,skilltarget,num0,skillcaster,skillname);}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  private void init(){  LOGGER.debug("Initializing TestBase");  TestBase.pingSuccess=false;}  }
class C{  protected LeadsStartQuery leadId(int value){  return unsafeParam("lead_id",value);}  }
class C{  public DiphoneUnit(Diphone diphone,int unitPart){  this.diphone=diphone;  this.unitPart=unitPart;}  }
class C{  @SuppressWarnings("unchecked") public JavaRDD<MapWritable> readDataES() throws IOException, PIRException {  logger.info("Reading data ");  JavaRDD<MapWritable> jsonRDD;  Job job=Job.getInstance();  String jobName="pirSpark_ES_" + esQuery + "_"+ System.currentTimeMillis();  job.setJobName(jobName);  job.getConfiguration().set("es.nodes",SystemConfiguration.getProperty("es.nodes"));  job.getConfiguration().set("es.port",SystemConfiguration.getProperty("es.port"));  job.getConfiguration().set("es.resource",esResource);  job.getConfiguration().set("es.query",esQuery);  jsonRDD=sc.newAPIHadoopRDD(job.getConfiguration(),EsInputFormat.class,Text.class,MapWritable.class).values().coalesce(numDataPartitions);  if (qSchema.getFilter() != null) {    return jsonRDD.filter(new FilterData(accum,bVars));  } else {    logger.info("qSchema.getFilter() is null");    return jsonRDD;  }}  }
class C{  @Override public synchronized void start(){  LOG.info("Starting server heartbeat.");  this.timer.scheduleAtFixedRate(new HeartbeatTask(),0,heartbeatInterval);  running=true;}  }
class C{  public RtpSocket(){  mCacheSize=0;  mBufferCount=300;  mBuffers=new byte[mBufferCount][];  mPackets=new DatagramPacket[mBufferCount];  mReport=new SenderReport();  mAverageBitrate=new AverageBitrate();  mTransport=TRANSPORT_UDP;  mTcpHeader=new byte[]{'$',0,0,0};  resetFifo();  for (int i=0; i < mBufferCount; i++) {    mBuffers[i]=new byte[MTU];    mPackets[i]=new DatagramPacket(mBuffers[i],1);    mBuffers[i][0]=(byte)Integer.parseInt("10000000",2);    mBuffers[i][1]=(byte)96;  }  try {    mSocket=new MulticastSocket();  } catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }}  }
class C{  private static BigInteger wrap(final int i){  if (i == DatatypeConstants.FIELD_UNDEFINED) {    return null;  }  return BigInteger.valueOf(i);}  }
class C{  private static void innerListFiles(Collection<File> files,File directory,IOFileFilter filter,boolean includeSubDirectories){  File[] found=directory.listFiles((FileFilter)filter);  if (found != null) {    for (    File file : found) {      if (file.isDirectory()) {        if (includeSubDirectories) {          files.add(file);        }        innerListFiles(files,file,filter,includeSubDirectories);      } else {        files.add(file);      }    }  }}  }
class C{  public SPhiExpr(List<Value> args,List<Unit> preds){  if (args.size() == 0)   throw new RuntimeException("Arg list may not be empty");  if (args.size() != preds.size())   throw new RuntimeException("Arg list does not match Pred list");  type=args.get(0).getType();  Iterator<Value> argsIt=args.iterator();  Iterator<Unit> predsIt=preds.iterator();  while (argsIt.hasNext()) {    Value arg=argsIt.next();    Object pred=predsIt.next();    if (pred instanceof Block)     addArg(arg,(Block)pred); else     if (pred instanceof Unit)     addArg(arg,(Unit)pred); else     throw new RuntimeException("Must be a CFG block or tail unit.");  }}  }
class C{  public void joinResource() throws InterruptedException {  if (runObj != null) {synchronized (complete) {      if (runObj != null)       complete.wait();    }  }}  }
class C{  public static String u4(int v){  char[] result=new char[8];  for (int i=0; i < 8; i++) {    result[7 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public void drag(int sourceX,int sourceY,int destX,int destY){  move(sourceX,sourceY);  press(InputEvent.BUTTON1_MASK);  move(destX,destY);  release(InputEvent.BUTTON1_MASK);}  }
class C{  public PollsGetVotersQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  protected TableTuple newTuple(int row){  try {    TableTuple t=(TableTuple)m_tupleType.newInstance();    t.init(m_table,m_graph,row);    return t;  } catch (  Exception e) {    Logger.getLogger(getClass().getName()).warning(e.getMessage() + "\n" + StringLib.getStackTrace(e));    return null;  }}  }
class C{  private static void updateWorkspaceModule(Project project,WorkspaceRoot workspaceRoot,Module workspaceModule,AndroidSdkPlatform androidSdkPlatform){  File moduleDirectory=workspaceRoot.directory();  File manifest=new File(workspaceRoot.directory(),"AndroidManifest.xml");  String resourceJavaPackage=":workspace";  ImmutableList<File> transitiveResources=ImmutableList.of();  createAndroidModel(project,androidSdkPlatform,workspaceModule,moduleDirectory,manifest,resourceJavaPackage,transitiveResources);}  }
class C{  public boolean hasApprovalLevel(){  return approvalLevel != null;}  }
class C{  public java.lang.Boolean isEscaped(){  return escaped;}  }
class C{  public static void addLineTag(soot.tagkit.Host host,polyglot.ast.Node node){  if (soot.options.Options.v().keep_line_number()) {    if (node.position() != null) {      host.addTag(new soot.tagkit.SourceLineNumberTag(node.position().line(),node.position().line()));    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_CHAR_WAREHOUSE_CANT_EXTEND_MORE_DUE_TO_MAXIMUM_EXTEND_LEVEL_BY_THIS_NPC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300439,value0,value1);}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public Vector3f multLocal(float x,float y,float z){  this.x*=x;  this.y*=y;  this.z*=z;  return this;}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  private QueryAnswers materialiseComplete(){  QueryAnswers insertAnswers=new QueryAnswers();  if (getAtoms().stream().filter(null).collect(Collectors.toSet()).size() < getVarSet().size())   throw new IllegalStateException(ErrorMessage.MATERIALIZATION_ERROR.getMessage(getMatchQuery().toString()));  if (!getMatchQuery().ask().execute()) {    InsertQuery insert=Graql.insert(getPattern().getVars()).withGraph(graph);    insert.stream().filter(null).forEach(null);  }  return insertAnswers;}  }
class C{  private void loadBinary(DataInputStream is) throws IOException {  if (is.readInt() != MAGIC) {    throw new Error("Bad magic in db");  }  if (is.readInt() != VERSION) {    throw new Error("Bad VERSION in db");  }  continuityWeight=is.readInt();  optimalCoupling=is.readInt();  extendSelections=is.readInt();  joinMethod=is.readInt();  joinWeightShift=is.readInt();  int weightLength=is.readInt();  joinWeights=new int[weightLength];  for (int i=0; i < joinWeights.length; i++) {    joinWeights[i]=is.readInt();  }  int unitsLength=is.readInt();  units=new DatabaseClusterUnit[unitsLength];  for (int i=0; i < units.length; i++) {    units[i]=new DatabaseClusterUnit(is);  }  int unitTypesLength=is.readInt();  unitTypes=new UnitType[unitTypesLength];  for (int i=0; i < unitTypes.length; i++) {    unitTypes[i]=new UnitType(is);  }  sts=new SampleSet(is);  mcep=new SampleSet(is);  int numCarts=is.readInt();  cartMap=new HashMap();  for (int i=0; i < numCarts; i++) {    String name=Utilities.getString(is);    CART cart=CARTImpl.loadBinary(is);    cartMap.put(name,cart);    if (defaultCart == null) {      defaultCart=cart;    }  }}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  @Deployment public void testActivityEvents() throws Exception {  listener.setIgnoreRawActivityEvents(false);  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("activityProcess");  assertNotNull(processInstance);  assertEquals(3,listener.getEventsReceived().size());  ActivitiActivityEvent activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("theStart",activityEvent.getActivityId());  assertTrue(processInstance.getId().equals(activityEvent.getExecutionId()) == false);  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("theStart",activityEvent.getActivityId());  assertTrue(processInstance.getId().equals(activityEvent.getExecutionId()) == false);  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("shipOrder",activityEvent.getActivityId());  assertTrue(processInstance.getId().equals(activityEvent.getExecutionId()) == false);  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  listener.clearEventsReceived();  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.complete(task.getId());  Execution execution=runtimeService.createExecutionQuery().parentId(processInstance.getId()).singleResult();  assertNotNull(execution);  assertEquals(5,listener.getEventsReceived().size());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("shipOrder",activityEvent.getActivityId());  assertTrue(processInstance.getId().equals(activityEvent.getExecutionId()) == false);  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("subProcess",activityEvent.getActivityId());  assertEquals(execution.getId(),activityEvent.getExecutionId());  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("subProcessStart",activityEvent.getActivityId());  assertTrue(execution.getId().equals(activityEvent.getExecutionId()) == false);  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("subProcessStart",activityEvent.getActivityId());  assertTrue(execution.getId().equals(activityEvent.getExecutionId()) == false);  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("subTask",activityEvent.getActivityId());  assertTrue(execution.getId().equals(activityEvent.getExecutionId()) == false);  assertEquals(processInstance.getProcessInstanceId(),activityEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),activityEvent.getProcessDefinitionId());  listener.clearEventsReceived();  Task subTask=taskService.createTaskQuery().processInstanceId(processInstance.getProcessInstanceId()).singleResult();  assertNotNull(subTask);  taskService.complete(subTask.getId());  assertEquals(10,listener.getEventsReceived().size());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("subTask",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("gateway",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("gateway",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("throwMessageEvent",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("throwMessageEvent",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(5);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("endSubProcess",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(6);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("endSubProcess",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(7);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("subProcess",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(8);  assertEquals(ActivitiEventType.ACTIVITY_STARTED,activityEvent.getType());  assertEquals("theEnd",activityEvent.getActivityId());  activityEvent=(ActivitiActivityEvent)listener.getEventsReceived().get(9);  assertEquals(ActivitiEventType.ACTIVITY_COMPLETED,activityEvent.getType());  assertEquals("theEnd",activityEvent.getActivityId());}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  if (fGenerateSyntheticAnnotation && fAnnotationDepth == -1 && element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA && element.localpart != SchemaSymbols.ELT_ANNOTATION && hasNonSchemaAttributes(element,attributes)) {    schemaDOM.startElement(element,attributes,fLocator.getLineNumber(),fLocator.getColumnNumber(),fLocator.getCharacterOffset());    attributes.removeAllAttributes();    String schemaPrefix=fNamespaceContext.getPrefix(SchemaSymbols.URI_SCHEMAFORSCHEMA);    final String annRawName=(schemaPrefix.length() == 0) ? SchemaSymbols.ELT_ANNOTATION : (schemaPrefix + ':' + SchemaSymbols.ELT_ANNOTATION);    schemaDOM.startAnnotation(annRawName,attributes,fNamespaceContext);    final String elemRawName=(schemaPrefix.length() == 0) ? SchemaSymbols.ELT_DOCUMENTATION : (schemaPrefix + ':' + SchemaSymbols.ELT_DOCUMENTATION);    schemaDOM.startAnnotationElement(elemRawName,attributes);    schemaDOM.charactersRaw("SYNTHETIC_ANNOTATION");    schemaDOM.endSyntheticAnnotationElement(elemRawName,false);    schemaDOM.endSyntheticAnnotationElement(annRawName,true);    schemaDOM.endElement();    return;  }  if (fAnnotationDepth == -1) {    if (element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA && element.localpart == SchemaSymbols.ELT_ANNOTATION) {      schemaDOM.startAnnotation(element,attributes,fNamespaceContext);    }  } else {    schemaDOM.startAnnotationElement(element,attributes);  }  ElementImpl newElem=schemaDOM.emptyElement(element,attributes,fLocator.getLineNumber(),fLocator.getColumnNumber(),fLocator.getCharacterOffset());  if (fAnnotationDepth == -1) {    if (element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA && element.localpart == SchemaSymbols.ELT_ANNOTATION) {      schemaDOM.endAnnotation(element,newElem);    }  } else {    schemaDOM.endAnnotationElement(element);  }}  }
class C{  @Override public long txNumber(){  return -1;}  }
class C{  private static SyntaxStyles createInstance(){  SyntaxStyles syntaxstyles=new SyntaxStyles();  Properties styles=JarServiceProvider.readProperties(SyntaxStyles.class);  syntaxstyles.mergeStyles(styles);  return syntaxstyles;}  }
class C{  public void paint(Graphics gc0){  super.paint(gc0);  leftMargin=90;  rightMargin=75;  bottomMargin=200;  topMargin=20;  final Graphics2D gc=(Graphics2D)gc0;  if (getChartData().getRange() == null || getChartData().getNumberOfClasses() == 0 || getChartData().getNumberOfSeries() == 0) {    drawTitle(gc,null);    gc.setColor(Color.LIGHT_GRAY);    String label="No data to show: please select nodes in main viewer and then press 'sync'";    gc.setFont(getFont("Default"));    Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();    gc.drawString(label,(getWidth() - labelSize.width) / 2,50);    return;  }  Dimension dim=new Dimension();  drawTitle(gc,dim);  topMargin=dim.height;  if (isShowYAxis()) {    drawYAxis(gc,dim);    leftMargin=dim.width;  }  bottomMargin=0;  if (isShowXAxis()) {    int xAxisLabelHeight;    if (isTranspose())     xAxisLabelHeight=(int)Math.round(computeXAxisLabelHeightTransposed(gc) + 15); else     xAxisLabelHeight=(int)Math.round(computeXAxisLabelHeight(gc) + 15);    xAxisLabelHeight=Math.min((int)(0.7 * getHeight()),xAxisLabelHeight);    bottomMargin+=xAxisLabelHeight;    if (classLabelAngle > 0 && classLabelAngle < Math.PI / 2)     rightMargin=Math.max(75,(int)(0.8 * xAxisLabelHeight));  } else   bottomMargin+=20;  drawTitle(gc,null);  if (isLargeEnough()) {    if (isShowXAxis())     drawXAxis(gc);    if (isShowYAxis())     drawYAxis(gc,null);    if (isTranspose()) {      computeScrollBackReferenceRect();      drawChartTransposed(gc);    } else {      computeScrollBackReferenceRect();      drawChart(gc);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200665,num0,skillcaster,skillname);}  }
class C{  public SiteAdminPage createNewPage(String title,String templateName){  openCreatePageWindow();  createPageWindow.createPage(title,templateName);  grid.waitForLoaderNotPresent();  return this;}  }
class C{  private boolean isMultipleSelection(){  return getMaxSelectionIndex() - getMinSelectionIndex() > 0;}  }
class C{  public void testStaticFile() throws Exception {  String contents=httpLoad("plugins/Mock/hello.txt");  assertEquals("hello world!\n",contents);}  }
class C{  private float dp2px(float dp){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getResources().getDisplayMetrics());}  }
class C{  private boolean containsExpression(String toSearch,String expression){  if (toSearch == null) {    return false;  }  return toSearch.equals(expression) || toSearch.indexOf(expression) >= 0;}  }
class C{  public void addListener(Listener listener){  if (listener == null)   throw new NullPointerException(Messages.getString("dynamics.world.nullListener"));  if (this.listeners.contains(listener))   throw new IllegalArgumentException("dynamics.world.addExistingListener");  this.listeners.add(listener);}  }
class C{  public boolean isSwipeable(){  return mSwipeable;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_POLL_REWARD_ITEM_MULTI(int num1,String value0){  return new SM_SYSTEM_MESSAGE(1300946,num1,value0);}  }
class C{  public BarEntry copy(){  BarEntry copied=new BarEntry(getVal(),getXIndex(),getData());  copied.setVals(mVals);  return copied;}  }
class C{  public GeoServerOverallNode(FileSystemInterface handler){  super("GeoServer");  this.handler=handler;}  }
class C{  public void handleRef(Ref ref){  setResult(fetchNode(ref));}  }
class C{  public GroupsSetCallbackSettingsQuery wallPostNew(Boolean value){  return unsafeParam("wall_post_new",value);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public NumericLiteral(float x){  m_number=new Float(x);  m_type=float.class;}  }
class C{  private void build(){  LayoutParams layoutParams=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);  int repeatCount=(mRepeat == INFINITE) ? ObjectAnimator.INFINITE : mRepeat;  List<Animator> animators=new ArrayList<>();  for (int index=0; index < mCount; index++) {    PulseView pulseView=new PulseView(getContext());    pulseView.setScaleX(0);    pulseView.setScaleY(0);    pulseView.setAlpha(1);    addView(pulseView,index,layoutParams);    mViews.add(pulseView);    long delay=index * mDuration / mCount;    ObjectAnimator scaleXAnimator=ObjectAnimator.ofFloat(pulseView,"ScaleX",0f,1f);    scaleXAnimator.setRepeatCount(repeatCount);    scaleXAnimator.setRepeatMode(ObjectAnimator.RESTART);    scaleXAnimator.setStartDelay(delay);    animators.add(scaleXAnimator);    ObjectAnimator scaleYAnimator=ObjectAnimator.ofFloat(pulseView,"ScaleY",0f,1f);    scaleYAnimator.setRepeatCount(repeatCount);    scaleYAnimator.setRepeatMode(ObjectAnimator.RESTART);    scaleYAnimator.setStartDelay(delay);    animators.add(scaleYAnimator);    ObjectAnimator alphaAnimator=ObjectAnimator.ofFloat(pulseView,"Alpha",1f,0f);    alphaAnimator.setRepeatCount(repeatCount);    alphaAnimator.setRepeatMode(ObjectAnimator.RESTART);    alphaAnimator.setStartDelay(delay);    animators.add(alphaAnimator);  }  mAnimatorSet=new AnimatorSet();  mAnimatorSet.playTogether(animators);  mAnimatorSet.setInterpolator(createInterpolator(mInterpolator));  mAnimatorSet.setDuration(mDuration);  mAnimatorSet.addListener(mAnimatorListener);}  }
class C{  public HoverPredicate(){  super(VisualItem.HOVER);}  }
class C{  public static boolean hasAncestor(Node node,String ancestorName){  Node p=node;  while ((p=p.getParentNode()) != null) {    if (p.getNodeName().equals(ancestorName))     return true;  }  return false;}  }
class C{  protected void buildWebServices(){  ObjectMapper mapper=new ObjectMapper();  JodaModule jodaModule=new JodaModule();  jodaModule.addSerializer(Interval.class,new ToStringSerializer());  mapper.registerModule(jodaModule);  if (state.uiWebService == null) {    state.uiWebService=(useTestWebService) ? new TestDruidWebService("Test UI WS") : new AsyncDruidWebServiceImpl(DruidClientConfigHelper.getUiServiceConfig(),mapper);  }  if (state.nonUiWebService == null) {    state.nonUiWebService=(useTestWebService) ? new TestDruidWebService("Test NonUI WS") : new AsyncDruidWebServiceImpl(DruidClientConfigHelper.getNonUiServiceConfig(),mapper);  }  if (state.metadataWebService == null) {    state.metadataWebService=(useTestWebService) ? new TestDruidWebService("Test Metadata WS") : new AsyncDruidWebServiceImpl(DruidClientConfigHelper.getMetadataServiceConfig(),mapper);  }}  }
class C{  private static Object compressNone(DataType changedDataType,double[] value){  int i=0;switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    result[i]=(byte)a;    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {shortResult[i]=(short)a;i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {intResult[i]=(int)a;i++;}return intResult;case DATA_LONG:case DATA_BIGINT:long[] longResult=new long[value.length];for (double a : value) {longResult[i]=(long)a;i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {floatResult[i]=(float)a;i++;}return floatResult;default :return value;}}  }
class C{  public int removeUpload(String accountName,String remotePath){  int result=getDB().delete(ProviderTableMeta.CONTENT_URI_UPLOADS,ProviderTableMeta.UPLOADS_ACCOUNT_NAME + "=? AND " + ProviderTableMeta.UPLOADS_REMOTE_PATH+ "=?",new String[]{accountName,remotePath});  Log_OC.d(TAG,"delete returns " + result + " for file "+ remotePath+ " in "+ accountName);  if (result > 0) {    notifyObserversNow();  }  return result;}  }
class C{  @Override public boolean accepts(Field field){  return field.isAnnotationPresent(CurrentFrame.class);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void removeChangeListener(ChangeListener cl){  m_listeners.remove(cl);}  }
class C{  private void createField(String key,String labelString){  int row=textFieldMap.size();  int y=row * ROW_HEIGHT;  JLabel label=new JLabel(labelString);  label.setBounds(LABEL_X,y,LABEL_WIDTH,FIELD_HEIGHT);  panel.add(label);  JTextField textField=new JTextField();  textField.setBounds(FIELD_X,y,FIELD_WIDTH,FIELD_HEIGHT);  textFieldMap.put(key,textField);  panel.add(textField);}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);  setChild(new List(),2);}  }
class C{  @Override public Integer start(String[] args){  if (logger.isInfoEnabled()) {    logger.info("start(String[]) - start");  }  AIMLProcessor.extension=new PCAIMLProcessorExtension();  MagicStrings.root_path=System.getProperty("user.dir");  MagicStrings.default_bot_name="Queen";  try {    Properties properties=new Properties();    properties.load(new FileInputStream("ini/SOCVService.properties"));    CloseVoteFinder.initInstance(properties);    cb=new ChatBot(properties,null);    SOLoginThread login=new SOLoginThread();    login.start();    if (logger.isDebugEnabled()) {      logger.debug("start(String[]) - Start completed");    }  } catch (  Throwable e) {    logger.error("start service",e);    CloseVoteFinder.getInstance().shutDown();    cb.close();    return 1;  }  if (logger.isInfoEnabled()) {    logger.info("start(String[]) - end");  }  return null;}  }
class C{  protected int parseInt(String buffer,int start,int end) throws NumberFormatException {  int radix=10;  int result=0;  int digit=0;  int limit=-Integer.MAX_VALUE;  int multmin=limit / radix;  int i=start;  do {    digit=getDigit(buffer.charAt(i));    if (digit < 0)     throw new NumberFormatException("'" + buffer + "' has wrong format");    if (result < multmin)     throw new NumberFormatException("'" + buffer + "' has wrong format");    result*=radix;    if (result < limit + digit)     throw new NumberFormatException("'" + buffer + "' has wrong format");    result-=digit;  } while (++i < end);  return -result;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public String requestServiceFromThirdPartyWebApp() throws Exception {  String url=ConsumerWebAppURL + "?scope=" + OAuthUtils.encodeForOAuth(EndUserResourceURL);  WebTarget target=ClientBuilder.newClient().target(url);  Invocation.Builder builder=target.request();  Response response=null;  try {    response=builder.get();    if (302 != response.getStatus()) {      throw new RuntimeException("Service request has failed - redirection is expected");    }    String authorizationURI=response.getStringHeaders().getFirst("Location");    if (authorizationURI == null) {      throw new RuntimeException("Token authorization URI is missing");    }    return authorizationURI;  }  finally {    response.close();  }}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int index,int length,boolean useSystemDefault){  if (useSystemDefault) {    return;  }  int textLength=text.length();  int textLengthToProcessMax=textLength - index;  int textLengthToProcess=length < 0 || length >= textLengthToProcessMax ? textLength : (length + index);  EmojiconSpan[] oldSpans=text.getSpans(0,textLength,EmojiconSpan.class);  for (int i=0; i < oldSpans.length; i++) {    text.removeSpan(oldSpans[i]);  }  int skip;  for (int i=index; i < textLengthToProcess; i+=skip) {    skip=0;    int icon=0;    char c=text.charAt(i);    if (isSoftBankEmoji(c)) {      icon=getSoftbankEmojiResource(c);      skip=icon == 0 ? 0 : 1;    }    if (icon == 0) {      int unicode=Character.codePointAt(text,i);      skip=Character.charCount(unicode);      if (unicode > 0xff) {        icon=getEmojiResource(context,unicode);      }      if (icon == 0 && i + skip < textLengthToProcess) {        int followUnicode=Character.codePointAt(text,i + skip);        if (followUnicode == 0x20e3) {          int followSkip=Character.charCount(followUnicode);switch (unicode) {case 0x0031:            icon=R.drawable.emoji_0031;          break;case 0x0032:        icon=R.drawable.emoji_0032;      break;case 0x0033:    icon=R.drawable.emoji_0033;  break;case 0x0034:icon=R.drawable.emoji_0034;break;case 0x0035:icon=R.drawable.emoji_0035;break;case 0x0036:icon=R.drawable.emoji_0036;break;case 0x0037:icon=R.drawable.emoji_0037;break;case 0x0038:icon=R.drawable.emoji_0038;break;case 0x0039:icon=R.drawable.emoji_0039;break;case 0x0030:icon=R.drawable.emoji_0030;break;case 0x0023:icon=R.drawable.emoji_0023;break;default :followSkip=0;break;}skip+=followSkip;} else {int followSkip=Character.charCount(followUnicode);switch (unicode) {case 0x1f1ef:icon=(followUnicode == 0x1f1f5) ? R.drawable.emoji_1f1ef_1f1f5 : 0;break;case 0x1f1fa:icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1fa_1f1f8 : 0;break;case 0x1f1eb:icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1eb_1f1f7 : 0;break;case 0x1f1e9:icon=(followUnicode == 0x1f1ea) ? R.drawable.emoji_1f1e9_1f1ea : 0;break;case 0x1f1ee:icon=(followUnicode == 0x1f1f9) ? R.drawable.emoji_1f1ee_1f1f9 : 0;break;case 0x1f1ec:icon=(followUnicode == 0x1f1e7) ? R.drawable.emoji_1f1ec_1f1e7 : 0;break;case 0x1f1ea:icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1ea_1f1f8 : 0;break;case 0x1f1f7:icon=(followUnicode == 0x1f1fa) ? R.drawable.emoji_1f1f7_1f1fa : 0;break;case 0x1f1e8:icon=(followUnicode == 0x1f1f3) ? R.drawable.emoji_1f1e8_1f1f3 : 0;break;case 0x1f1f0:icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1f0_1f1f7 : 0;break;default :followSkip=0;break;}skip+=followSkip;}}}if (icon > 0) {text.setSpan(new EmojiconSpan(context,icon,emojiSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);}}}  }
class C{  public void removeClient(SocketAddress address,ProxyClient sc){  if (address2Services.remove(address,sc)) {    logger.info("Remove client {} to host {}.",sc,address);    sc.close();  }}  }
class C{  public boolean isApplicable(){  ChartViewer viewer=(ChartViewer)getViewer();  return (viewer.isSeriesTabSelected() && viewer.getChartSelection().getSelectedSeries().size() > 0) || (!viewer.isSeriesTabSelected() && viewer.getChartData() instanceof IChartData && viewer.getChartSelection().getSelectedClasses().size() > 0) || (viewer.getChartData() instanceof IChartData && viewer.getChartSelection().getSelectedAttributes().size() > 0);}  }
class C{  public MessagesGetLongPollHistoryQuery eventsLimit(Integer value){  return unsafeParam("events_limit",value);}  }
class C{  public BaseViewHolder addOnClickListener(int viewId){  childClickViewIds.add(viewId);  return this;}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public boolean canGetLocation(){  return this.canGetLocation;}  }
class C{  public static String selectAgreement(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCart cart=getCartObject(request);  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String agreementId=request.getParameter("agreementId");  Map<String,Object> result=cartHelper.selectAgreement(agreementId);  if (ServiceUtil.isError(result)) {    request.setAttribute("_ERROR_MESSAGE_",ServiceUtil.getErrorMessage(result));    return "error";  }  return "success";}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  if (length > fBuffer.length) {    length=fBuffer.length;  }  int count=fInputStream.read(fBuffer,0,length);  for (int i=0; i < count; ++i) {    ch[offset + i]=(char)(fBuffer[i] & 0xff);  }  return count;}  }
class C{  private void toWagonFormat(DecisionNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {  if (out != null) {    writeStringToOutput("((" + node.getNodeDefinition() + ")",out);  } else {  }  if (pw != null) {    pw.println("((" + node.getNodeDefinition() + ")");  }  for (int i=0; i < node.getNumberOfDaugthers(); i++) {    if (node.getDaughter(i) == null) {      String nullDaughter="";      if (i + 1 != node.getNumberOfDaugthers()) {        nullDaughter="((() 0))";      } else {        if (extension != null) {          nullDaughter="((() 0)))" + extension;        } else {          nullDaughter="((() 0)))";        }      }      if (out != null) {        writeStringToOutput(nullDaughter,out);      } else {      }      if (pw != null) {        pw.println(" " + nullDaughter);      }    } else {      if (i + 1 != node.getNumberOfDaugthers()) {        toWagonFormat(node.getDaughter(i),out,"",pw);      } else {        if (extension != null) {          toWagonFormat(node.getDaughter(i),out,")" + extension,pw);        } else {          toWagonFormat(node.getDaughter(i),out,")",pw);        }      }    }  }}  }
class C{  @Nullable public AvdInfo createOrUpdateAvd(@Nullable AvdInfo currentInfo,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){  if (!initIfNecessary()) {    return null;  }  File avdFolder;  try {    if (currentInfo != null) {      avdFolder=new File(currentInfo.getDataFolderPath());    } else {      avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true);    }  } catch (  AndroidLocation.AndroidLocationException e) {    IJ_LOG.error("Could not create AVD " + avdName,e);    return null;  }  Dimension resolution=device.getScreenSize(orientation);  assert resolution != null;  String skinName=null;  if (skinFolder == null && isCircular) {    skinFolder=getRoundSkin(systemImageDescription);  }  if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) {    skinFolder=null;  }  if (skinFolder == null) {    skinName=String.format("%dx%d",Math.round(resolution.getWidth()),Math.round(resolution.getHeight()));  }  if (orientation == ScreenOrientation.LANDSCAPE) {    hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));  }  if (currentInfo != null && !avdName.equals(currentInfo.getName())) {    boolean success=myAvdManager.moveAvd(currentInfo,avdName,currentInfo.getDataFolderPath(),SDK_LOG);    if (!success) {      return null;    }  }  return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,currentInfo != null,SDK_LOG);}  }
class C{  public static void load(){  reload();}  }
class C{  @Override public void cycleState(){  if (isEditable(indexOf(this))) {    mySource.setEnabled(!mySource.isEnabled());  }}  }
class C{  public PhotosGetUserPhotosQuery(VkApiClient client,UserActor actor){  super(client,"photos.getUserPhotos",GetUserPhotosResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  @Override public void draw(Canvas canvas){  canvas.drawCircle(mRadius,mRadius,mRadius,mBackground);  canvas.drawText(mText,mRadius,mRadius - ((mTextPaint.descent() + mTextPaint.ascent()) / 2),mTextPaint);}  }
class C{  private void computeSampleDistances(){  assert polynomials != null;  assert polynomials.length > 2;  assert dataPointSet != null;  assert distanceTableMap != null;  int observations=polynomials.length;  int polynomialOrder=polynomials[0].getOrder();  int[] clusterIndices=new int[observations];  double[][] dist=new double[observations][observations];  for (int i=0; i < observations; i++) {    dataPointSet.add("" + i);    for (int j=0; j < observations; j++) {      dist[i][j]=Polynomial.polynomialPearsonProductMomentCorr(polynomials[i].coeffs,polynomials[j].coeffs);      distanceTableMap.put(i + "_" + j,(new Double(dist[i][j])));    }  }}  }
class C{  public static String decrypt64bits(String encryptedData){  Key key;  Cipher c;  boolean ischeck=true;  byte[] decValue=null;  while (ischeck) {    key=generateKey64bits();    try {      c=Cipher.getInstance(Settings.ALGO);      c.init(Cipher.DECRYPT_MODE,key);      byte[] decordedValue=DatatypeConverter.parseBase64Binary(encryptedData);      decValue=c.doFinal(decordedValue);      String decryptedValue=new String(decValue);      return decryptedValue;    } catch (    NoSuchAlgorithmException|NoSuchPaddingException e) {      e.printStackTrace();    }catch (    InvalidKeyException e) {      e.printStackTrace();    }catch (    IllegalBlockSizeException e) {      ischeck=false;    }catch (    BadPaddingException e) {      e.printStackTrace();    }  }  return "/&" + Settings._ERROR_PACKET + "/&@";}  }
class C{  public PhotosReportCommentQuery reportComment(UserActor actor,int ownerId,int commentId){  return new PhotosReportCommentQuery(getClient(),actor,ownerId,commentId);}  }
class C{  public Name(String name){  this.name=name;}  }
class C{  public List<T> range(final double[] lowk,final double[] uppk) throws KeySizeException {  if (lowk.length != uppk.length) {    throw new KeySizeException();  } else   if (lowk.length != m_K) {    throw new KeySizeException();  } else {    final List<KDNode<T>> found=new LinkedList<KDNode<T>>();    KDNode.rsearch(new HPoint(lowk),new HPoint(uppk),m_root,0,m_K,found);    final List<T> o=new LinkedList<T>();    for (    final KDNode<T> node : found) {      o.add(node.v);    }    return o;  }}  }
class C{  Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      Comparable<? super K> ck=comparable(key);      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(ck); else {        findPredecessor(ck);        if (head.right == null)         tryReduceLevel();      }      return new AbstractMap.SimpleImmutableEntry<K,V>(key,(V)v);    }  }}  }
class C{  private void removeAllRaysAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.rayFolder.removeAll.warning"),Messages.getString("menu.context.rayFolder.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getRays().clear();    }    this.rayFolder.removeAllChildren();    this.model.reload(this.rayFolder);  }}  }
class C{  public TrustManagerBuilder or(){  if (mgr.isMatchAll()) {    if (mgr.size() < 2) {      mgr.setMatchAll(false);    } else {      mgr=CompositeTrustManager.matchAny(mgr);    }  }  return (this);}  }
class C{  public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  public StorageGetKeysQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public static boolean isParameterizedType(@Nullable TypeMirror type){  return type instanceof DeclaredType && !((DeclaredType)type).getTypeArguments().isEmpty();}  }
class C{  private final void reapUnusedXtns(){  int unusedCleanTime=_transactionHandler.getUnusedXtnCleanTime();  int reapCount=0;  long currentTime=SystemTime.timeMillis();  long expirationTime=currentTime - unusedCleanTime;  if (_force || _lastReapedUnusedXtn <= expirationTime)   _lastReapedUnusedXtn=currentTime; else {    return;  }  Map<ServerTransaction,XtnEntry> map=_transactionHandler.getXtnTable();  for (  Map.Entry<ServerTransaction,XtnEntry> entry : map.entrySet()) {    XtnEntry xtnEntry=entry.getValue();    if (xtnEntry != null && xtnEntry.setUnUsedIfPossible(unusedCleanTime,_engine.isCleanUnusedEmbeddedGlobalXtns())) {      _transactionHandler.removeUnusedTransaction(xtnEntry,true);      reapCount++;      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("Unused transaction [id=" + xtnEntry.m_Transaction.id + "] cleaned,  space "+ _engine.getSpaceName());      }    }  }  if (reapCount > 0)   if (_logger.isLoggable(Level.FINE)) {    _logger.fine(this.getName() + " - Reaped unused transactions. [Reaped: " + reapCount+ " ]");  }}  }
class C{  public static FloatBuffer ensureLargeEnough(FloatBuffer buffer,int required){  if (buffer == null || (buffer.remaining() < required)) {    int position=(buffer != null ? buffer.position() : 0);    FloatBuffer newVerts=createFloatBuffer(position + required);    if (buffer != null) {      buffer.rewind();      newVerts.put(buffer);      newVerts.position(position);    }    buffer=newVerts;  }  return buffer;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public boolean global_nodes_in_natives(){  return soot.PhaseOptions.getBoolean(options,"global-nodes-in-natives");}  }
class C{  public Builder reuseTiles(Boolean reuseTiles){  this.reuseTiles=reuseTiles;  return this;}  }
class C{  public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException {  this.meta=((SortKeyStepMeta)smi);  StandardLogService.setThreadName(meta.getPartitionID(),null);  this.data=((SortKeyStepData)sdi);  Object[] row=getRow();  this.observer=new SortObserver();  if (row == null) {    return processRowToNextStep();  } else   if (RemoveDictionaryUtil.checkAllValuesForNull(row)) {    int outSize=Integer.parseInt(meta.getOutputRowSize());    Object[] outRow=new Object[outSize];    this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());    this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);    LOGGER.info("Record Procerssed For table: " + meta.getTabelName());    LOGGER.info("Record Form Previous Step was null");    String logMessage="Summary: Carbon Sort Key Step: Read: " + 1 + ": Write: "+ 1;    LOGGER.info(logMessage);    putRow(data.getOutputRowMeta(),outRow);    setOutputDone();    return false;  }  if (first) {    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(meta.getPartitionID(),System.currentTimeMillis());    first=false;    this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());    this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);    this.meta.setNoDictionaryCount(RemoveDictionaryUtil.extractNoDictionaryCount(meta.getNoDictionaryDims()));    this.noDictionaryColMaping=RemoveDictionaryUtil.convertStringToBooleanArr(meta.getNoDictionaryDimsMapping());    SortParameters parameters=SortParameters.createSortParameters(meta.getDatabaseName(),meta.getTabelName(),meta.getDimensionCount(),meta.getComplexDimensionCount(),meta.getMeasureCount(),this.observer,meta.getNoDictionaryCount(),meta.getPartitionID(),meta.getSegmentId() + "",meta.getTaskNo(),this.noDictionaryColMaping);    intermediateFileMerger=new SortIntermediateFileMerger(parameters);    this.sortDataRows=new SortDataRows(parameters,intermediateFileMerger);    try {      this.sortDataRows.initialize();    } catch (    CarbonSortKeyAndGroupByException e) {      throw new KettleException(e);    }    this.logCounter=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.DATA_LOAD_LOG_COUNTER,CarbonCommonConstants.DATA_LOAD_LOG_COUNTER_DEFAULT_COUNTER));  }  readCounter++;  if (readCounter % logCounter == 0) {    LOGGER.info("Record Procerssed For table: " + meta.getTabelName());    String logMessage="Carbon Sort Key Step: Record Read: " + readCounter;    LOGGER.info(logMessage);  }  try {    this.sortDataRows.addRow(row);    writeCounter++;  } catch (  Throwable e) {    LOGGER.error(e);    throw new KettleException(e);  }  return true;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object get(java.lang.Object,int)")) {    java_lang_reflect_Array_get(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void set(java.lang.Object,int,java.lang.Object)")) {    java_lang_reflect_Array_set(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object newArray(java.lang.Class,int)")) {    java_lang_reflect_Array_newArray(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object multiNewArray(java.lang.Class,int[])")) {    java_lang_reflect_Array_multiNewArray(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public long firstCertificateGeneratedTimestamp(){  return firstCertificateGeneratedTimestamp.get();}  }
class C{  public void addSuperInterfaceId(Access node){  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();  list.addChild(node);}  }
class C{  public BaseViewHolder linkify(int viewId){  TextView view=getView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public SimpleStringProperty topicProperty(){  return this.topic;}  }
class C{  public void stop(){  messageLogger.stop();}  }
class C{  public NotReadyException(){  super("Transaction is not in ready state");}  }
class C{  public boolean isIgnore(){  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200766,skillcaster,skillname);}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!obj.getClass().equals(this.getClass())) {    return false;  }  SerialMessage other=(SerialMessage)obj;  if (other.messageClassKey != this.messageClassKey) {    return false;  }  if (other.messageType != this.messageType) {    return false;  }  if (other.expectedReply != this.expectedReply) {    return false;  }  return Arrays.equals(other.messagePayload,this.messagePayload);}  }
class C{  public static final byte shortToUlaw(short sampleData){  int sign, exponent, mantissa;  int ulawByte;  int sample=(int)sampleData;  sign=(sample >> 8) & 0x80;  if (sign != 0) {    sample=-sample;  }  if (sample > CLIP) {    sample=CLIP;  }  sample=sample + BIAS;  exponent=exp_lut2[(sample >> 7) & 0xFF];  mantissa=(sample >> (exponent + 3)) & 0x0F;  ulawByte=~(sign | (exponent << 4) | mantissa);  if (ZEROTRAP) {    if (ulawByte == 0) {      ulawByte=0x02;    }  }  return (byte)((ulawByte - 128) & 0xFF);}  }
class C{  private void computeThreadsNumber(){  numOfThreads=Integer.parseInt(prop.getProperty(NUM_THREADS_PROPERTY));  if (numOfThreads == 0)   numOfThreads=Runtime.getRuntime().availableProcessors();  if (numOfThreads > MAX_NUMBER_OF_THREADS)   numOfThreads=MAX_NUMBER_OF_THREADS;}  }
class C{  public void showButtonsDelayed(){  mAlert.showButtonsDelayed();}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public static boolean isSpace(int c){  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  public VideoSearchQuery sort(VideoSearchSort value){  return unsafeParam("sort",value);}  }
class C{  private void error(String s){  System.out.println("ClusterUnitDatabase Error: " + s);}  }
class C{  public Matrix4f readFloatBuffer(FloatBuffer fb){  return readFloatBuffer(fb,false);}  }
class C{  private void parseParameter(String token,String value){  if (token != null && value != null) {    if (token.equalsIgnoreCase(NONCE_TOKEN)) {      mNonce=value;      return;    }    if (token.equalsIgnoreCase(STALE_TOKEN)) {      parseStale(value);      return;    }    if (token.equalsIgnoreCase(OPAQUE_TOKEN)) {      mOpaque=value;      return;    }    if (token.equalsIgnoreCase(QOP_TOKEN)) {      mQop=value.toLowerCase();      return;    }    if (token.equalsIgnoreCase(ALGORITHM_TOKEN)) {      mAlgorithm=value.toLowerCase();      return;    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ConstructorDeclSubstituted fullCopy(){  ConstructorDeclSubstituted tree=(ConstructorDeclSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  Element currentElement=(Element)fCurrentNode;  int attrCount=attributes.getLength();  if (DEBUG_EVENTS) {    System.out.println("==>startElement: " + element + " attrs.length="+ attrCount);  }  for (int i=0; i < attrCount; i++) {    attributes.getName(i,fAttrQName);    Attr attr=null;    attr=currentElement.getAttributeNodeNS(fAttrQName.uri,fAttrQName.localpart);    if (attr == null) {      attr=currentElement.getAttributeNode(fAttrQName.rawname);    }    AttributePSVI attrPSVI=(AttributePSVI)attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_PSVI);    if (attrPSVI != null) {      XSTypeDefinition decl=attrPSVI.getMemberTypeDefinition();      boolean id=false;      if (decl != null) {        id=((XSSimpleType)decl).isIDType();      } else {        decl=attrPSVI.getTypeDefinition();        if (decl != null) {          id=((XSSimpleType)decl).isIDType();        }      }      if (id) {        ((ElementImpl)currentElement).setIdAttributeNode(attr,true);      }      if (fPSVI) {        ((PSVIAttrNSImpl)attr).setPSVI(attrPSVI);      }      ((AttrImpl)attr).setType(decl);      if ((fConfiguration.features & DOMConfigurationImpl.DTNORMALIZATION) != 0) {        final String normalizedValue=attrPSVI.getSchemaNormalizedValue();        if (normalizedValue != null) {          boolean specified=attr.getSpecified();          attr.setValue(normalizedValue);          if (!specified) {            ((AttrImpl)attr).setSpecified(specified);          }        }      }    } else {      String type=null;      boolean isDeclared=Boolean.TRUE.equals(attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_DECLARED));      if (isDeclared) {        type=attributes.getType(i);        if ("ID".equals(type)) {          ((ElementImpl)currentElement).setIdAttributeNode(attr,true);        }      }      ((AttrImpl)attr).setType(type);    }  }}  }
class C{  public VideoQuality(int resX,int resY,int framerate,int bitrate){  this.framerate=framerate;  this.bitrate=bitrate;  this.resX=resX;  this.resY=resY;}  }
class C{  private int loadSerializationType(){  String propertyValue=_configReader.getSpaceProperty(Engine.ENGINE_SERIALIZATION_TYPE_PROP,Engine.ENGINE_SERIALIZATION_TYPE_DEFAULT).trim();  try {    int result=Integer.parseInt(propertyValue);    StorageType storageType=StorageType.fromCode(result);    if (storageType != StorageType.OBJECT && _logger.isLoggable(Level.WARNING))     _logger.log(Level.WARNING,Engine.FULL_ENGINE_SERIALIZATION_TYPE_PROP + "=" + propertyValue+ " is deprecated - use POJO annotations or gs.xml instead.");    return result;  } catch (  NumberFormatException e) {    String msg="Invalid serialization-type specified " + propertyValue;    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,msg,e);    throw new RuntimeException(msg,e);  }catch (  IllegalArgumentException e) {    String msg=e.getMessage().replace("StorageType","serialization-type");    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,msg);    throw new RuntimeException(msg);  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public void addMethodForWrapping(String className,String subSignature){  Set<String> methods=this.classList.get(className);  if (methods == null) {    methods=new HashSet<String>();    this.classList.put(className,methods);  }  methods.add(subSignature);}  }
class C{  public void resetColor(){  if (token.maxEv) {    setBackgroundColor(maxEvColor);  } else {    setBackgroundColor(normalBackgroundColor);  }  setTextColor(textColor);}  }
class C{  public static void updatePilot(AirMapPilot pilot,@Nullable AirMapCallback<AirMapPilot> callback){  PilotService.updatePilot(pilot,callback);}  }
class C{  private static Class<?> loadClass(final String name,final ClassLoader cl){  Class<?> cls=PRIMITIVES_CLASSES.get(name);  if (cls != null) {    return cls;  }  try {    return Class.forName(name,false,cl);  } catch (  ClassNotFoundException e) {    if (!name.contains(".")) {      try {        return Class.forName("java.lang." + name,false,cl);      } catch (      ClassNotFoundException e1) {        try {          return Class.forName("java.util." + name,false,cl);        } catch (        ClassNotFoundException e2) {        }      }    } else {      int lastDot=name.lastIndexOf('.');      String modifiedName=name;      while (lastDot > 0) {        modifiedName=modifiedName.substring(0,lastDot) + "$" + modifiedName.substring(lastDot + 1);        try {          return Class.forName(modifiedName,false,cl);        } catch (        ClassNotFoundException e2) {          lastDot=modifiedName.lastIndexOf('.');        }      }    }    throw new IllegalArgumentException("'" + name + "' is non-existent or inaccessible");  }}  }
class C{  public static ItemStatus convertVersionStatus(final ReleaseStatus release){switch (release.getUpdateStatus()) {case CRITICAL:    return ItemStatus.ERROR;case UPDATE_RECOMMENDED:  return ItemStatus.WARN;case NEW_AVAILABLE:return ItemStatus.INFO;case ON_LATEST:return ItemStatus.OK;default :return ItemStatus.ERROR;}}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public void configure() throws ConfUnknownTypeException, ConfRejectedTypeException {  log.debug("configure - entering configure()..");  log.debug("configure - connecting to ProcessMessageSender");  processMessageSender.connect();  log.debug("configure - connecting to FilterMessageSender");  FilterConnectorThread filterConnectorThread=new FilterConnectorThread(filterMessageSender);  filterConnectorThread.start();  log.debug("configure - Starting DAQ alive timer.");  processMessageSender.startAliveTimer();  EquipmentMessageHandler equnit=null;  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();  boolean dynamicTimeDeadbandEnabled=environment.getRequiredProperty(Options.DYNAMIC_TIME_DEADBAND_ENABLED,Boolean.class);  int eqUnitsConnectedProperly=0;  for (  EquipmentConfiguration conf : processConfiguration.getEquipmentConfigurations().values()) {    long equipmentId=conf.getId();    log.info("configure - Dynamic timedeadband enabled for equipment id: " + equipmentId + " enabled: "+ dynamicTimeDeadbandEnabled);    conf.setDynamicTimeDeadbandEnabled(dynamicTimeDeadbandEnabled);    EquipmentLoggerFactory equipmentLoggerFactory=EquipmentLoggerFactory.createFactory(conf,processConfiguration,environment.getProperty("c2mon.daq.logging.useEquipmentLoggers",Boolean.class,false),environment.getProperty("c2mon.daq.logging.useEquipmentAppendersOnly",Boolean.class,false));    EquipmentMessageSender equipmentMessageSender=(EquipmentMessageSender)applicationContext.getBean(EQUIPMENT_MESSAGE_SENDER);    equipmentMessageSender.init(conf,equipmentLoggerFactory);    configurationController.addCoreDataTagChanger(equipmentId,equipmentMessageSender);    try {      validateDataTags(conf,equipmentMessageSender);      validateCommandTags(conf,equipmentMessageSender);      equnit=EquipmentMessageHandler.createEquipmentMessageHandler(conf.getHandlerClassName(),new EquipmentCommandHandler(equipmentId,requestController),new EquipmentConfigurationHandler(equipmentId,configurationController),equipmentMessageSender);      equnit.setEquipmentLoggerFactory(equipmentLoggerFactory);    } catch (    InstantiationException e) {      String msg="Error while instantiating " + conf.getHandlerClassName();      equipmentMessageSender.confirmEquipmentStateIncorrect(msg + ": " + e.getMessage());      log.error(msg,e);    }catch (    IllegalAccessException e) {      String msg="Access error while calling constructor of " + conf.getHandlerClassName();      equipmentMessageSender.confirmEquipmentStateIncorrect("Error in code: " + msg);      log.error(msg,e);    }catch (    ClassNotFoundException e) {      String msg="Handler class not found: " + conf.getHandlerClassName();      equipmentMessageSender.confirmEquipmentStateIncorrect("Error during configuration: " + msg);      log.error(msg,e);    }    if (equnit != null) {      if (registerNewEquipmentUnit(equnit)) {        eqUnitsConnectedProperly++;      }    }  }  processMessageReceiver.connect();  log.info("configure - Number of equipment units configured properly : " + eqUnitsConnectedProperly);  log.info("configure - DAQ initialized and running.");}  }
class C{  public SpaceTypeDescriptorBuilder idProperty(String idPropertyName,boolean autoGenerateId,SpaceIndexType indexType){  if (idPropertyName == null)   throw new IllegalArgumentException("Argument cannot be null - 'idPropertyName'.");  if (indexType == null)   throw new IllegalArgumentException("Argument cannot be null - 'indexType'.");  if (_idPropertyName != null)   throw new IllegalStateException("Cannot set id property to '" + idPropertyName + "' - it was already set to '"+ _idPropertyName+ "'.");  this._idPropertyName=idPropertyName;  this._idAutoGenerate=autoGenerateId;  addIndexIfNotExists(idPropertyName,indexType);  return this;}  }
class C{  private static boolean parentHandlingSelection(@NotNull NlComponent component){  NlComponent parent=component.getParent();  if (parent == null) {    return false;  }  ViewInfo view=parent.viewInfo;  if (view == null) {    return false;  }  ViewHandler handler=parent.getViewHandler();  if (handler != null && handler instanceof ViewGroupHandler) {    ViewGroupHandler viewGroupHandler=(ViewGroupHandler)handler;    if (viewGroupHandler.handlesPainting()) {      return true;    }  }  return false;}  }
class C{  public boolean add(E item){  addLast(item);  return true;}  }
class C{  void deletedText(CharacterDataImpl node,int offset,int count){}  }
class C{  public PhotosEditAlbumQuery uploadByAdminsOnly(Boolean value){  return unsafeParam("upload_by_admins_only",value);}  }
class C{  @Override public ListenableFuture<DefragmentResponse> defragmentMember(){  return this.futureStub.defragment(DefragmentRequest.getDefaultInstance());}  }
class C{  public JsonHttpResponseHandler(){  super(DEFAULT_CHARSET);}  }
class C{  public int[][][] fromFileMultipleChannels(File file) throws IOException {  BufferedImage image=ImageIO.read(file);  image=scalingIfNeed(image,channels > 3);  int w=image.getWidth(), h=image.getHeight();  int bands=image.getSampleModel().getNumBands();  int[][][] ret=new int[channels][h][w];  byte[] pixels=((DataBufferByte)image.getRaster().getDataBuffer()).getData();  for (int i=0; i < h; i++) {    for (int j=0; j < w; j++) {      for (int k=0; k < channels; k++) {        if (k >= bands)         break;        ret[k][i][j]=pixels[channels * w * i + channels * j + k];      }    }  }  return ret;}  }
class C{  @Override public Filter createFilter(){  return new IsLessThanExtended();}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg,String path){  return execCommand(new String[]{command},isRoot,isNeedResultMsg,path);}  }
class C{  public int size(){  return entries.size();}  }
class C{  private int countVisibleNodes(){  int count=0;  for (  NodeBase root : classification2RootNode.values()) {    Stack<NodeBase> stack=new Stack<>();    if (root != null) {      stack.push(root);      while (stack.size() > 0) {        NodeBase node=stack.pop();        if (dataTree.isVisible(new TreePath(node.getPath())))         count++;        for (int i=0; i < node.getChildCount(); i++) {          NodeBase child=(NodeBase)node.getChildAt(i);          stack.add(child);        }      }    }  }  return count;}  }
class C{  public static <T>T toBlocking(Observable<T> observable) throws LoginFailedException, RemoteServerException {  try {    return observable.toBlocking().first();  } catch (  RuntimeException e) {    if (e.getCause() instanceof AsyncLoginFailedException) {      throw new LoginFailedException(e.getMessage(),e.getCause());    }    if (e.getCause() instanceof AsyncRemoteServerException) {      throw new RemoteServerException(e.getMessage(),e.getCause());    }    throw new AsyncPokemonGoException("Unknown exception occurred. ",e);  }}  }
class C{  public int indexOf(int offset,int value){  for (int i=offset; i < _pos; i++) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  public Set<Dimension> findAll(){  return Collections.unmodifiableSet(new HashSet<>(apiNameToDimension.values()));}  }
class C{  private int convertFocusDirectionToLayoutDirection(int focusDirection){switch (focusDirection) {case View.FOCUS_BACKWARD:    return LayoutState.LAYOUT_START;case View.FOCUS_FORWARD:  return LayoutState.LAYOUT_END;case View.FOCUS_UP:return mOrientation == VERTICAL ? LayoutState.LAYOUT_START : LayoutState.INVALID_LAYOUT;case View.FOCUS_DOWN:return mOrientation == VERTICAL ? LayoutState.LAYOUT_END : LayoutState.INVALID_LAYOUT;case View.FOCUS_LEFT:return mOrientation == HORIZONTAL ? LayoutState.LAYOUT_START : LayoutState.INVALID_LAYOUT;case View.FOCUS_RIGHT:return mOrientation == HORIZONTAL ? LayoutState.LAYOUT_END : LayoutState.INVALID_LAYOUT;default :if (DEBUG) {Log.d(TAG,"Unknown focus request:" + focusDirection);}return LayoutState.INVALID_LAYOUT;}}  }
class C{  public static String decodeQueryValue(String query){  String retString;  retString=replaceString(query,"%25","%");  retString=replaceString(retString,"%20"," ");  retString=replaceString(retString,"%26","&");  retString=replaceString(retString,"%3F","?");  retString=replaceString(retString,"%3D","=");  return retString;}  }
class C{  public static byte[] generateIv() throws GeneralSecurityException {  return randomBytes(IV_LENGTH_BYTES);}  }
class C{  public SequenceBarrier newBarrier(Sequence... sequencesToTrack){  return sequencer.newBarrier(sequencesToTrack);}  }
class C{  public int toPageIndex(){  return (first + rows) / rows - 1;}  }
class C{  public LargeValueFormatter(String appendix){  this();  mText=appendix;}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public void nextGroup(){  release();}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  private void parseAttributes(TypedArray a){  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();  barWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,barWidth,metrics);  rimWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,rimWidth,metrics);  circleRadius=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,circleRadius,metrics);  circleRadius=(int)a.getDimension(R.styleable.ProgressWheel_matProg_circleRadius,circleRadius);  fillRadius=a.getBoolean(R.styleable.ProgressWheel_matProg_fillRadius,false);  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_matProg_barWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_matProg_rimWidth,rimWidth);  float baseSpinSpeed=a.getFloat(R.styleable.ProgressWheel_matProg_spinSpeed,spinSpeed / 360.0f);  spinSpeed=baseSpinSpeed * 360;  barSpinCycleTime=a.getInt(R.styleable.ProgressWheel_matProg_barSpinCycleTime,(int)barSpinCycleTime);  barColor=a.getColor(R.styleable.ProgressWheel_matProg_barColor,barColor);  rimColor=a.getColor(R.styleable.ProgressWheel_matProg_rimColor,rimColor);  linearProgress=a.getBoolean(R.styleable.ProgressWheel_matProg_linearProgress,false);  if (a.getBoolean(R.styleable.ProgressWheel_matProg_progressIndeterminate,false)) {    spin();  }  a.recycle();}  }
class C{  public void typeCheck(){  boolean isEnumConstant=getValue().isEnumConstant();  TypeDecl switchType=switchType();  TypeDecl type=getValue().type();  if (switchType.isEnumDecl() && !isEnumConstant)   error("Unqualified enumeration constant required");  if (!type.assignConversionTo(switchType,getValue()))   error("Case label has incompatible type " + switchType.name() + ", expected type compatible with "+ type.name());  if (!getValue().isConstant() && !getValue().type().isUnknown() && !isEnumConstant)   error("Case label must have constant expression");}  }
class C{  public static void f(String tag,String msg){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg);}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public static void printSyntax(){  System.out.println("Syntax:\n" + HLDATextGenerator.class.getName() + " [-inputDir=corpusPath] [-inputDirFlat] [-model=modelFile]"+ " [-docMatrix=docMatrixFile] [-levels=#] [-iters=#] [-burnIn=#] [-alpha=#.##] [-beta=#.##] [-threads=#]"+ " [-recalc] [-textMeanSize=#]\n"+ "-inputDir=corpusPath\tThe directory with the input documents. Can contain subdirectories for categories or not "+ "(see -inputDirFlat option).\n"+ "-inputDirFlat\tIf supplied expects that the input document directory contains the documents in itself, and"+ " not in subdirectories.\n"+ "-model=modelFile\t The modelfile that holds or should hold HLDA model data. If no such file exists, it is created.\n"+ "-docMatrix=docMatrixFile\t The modelfile that holds or should hold document word matric data.\n"+ "If no such file exists, it is created.\n"+ "-levels=#\tThe levels of the hierarchy in the model.\n"+ "-iters=#\tThe iterations for the HLDA inference.\n"+ "-burnIn=#\tThe burn-in iterations for the HLDA inference.\n"+ "-alpha=#\tThe alpha parameter for the HLDA inference.\n"+ "-beta=#\tThe beta parameter for the HLDA inference.\n"+ "-threads=#\tThe number of threads to use for the inference.\n"+ "-recalc\tIf supplied, will ignore model and document matrix data and recalculate them.\n"+ "-textMeanSize=#\tThe mean number of words for the supplied texts.");}  }
class C{  public static Map parseCommandLineArguments(String[] args){  Map<String,String> result=new HashMap<>();  String key, value;  for (int i=0; i < args.length; i++) {    key=args[i];    if (key.charAt(0) == '-') {      if (i + 1 < args.length) {        value=args[i + 1];        if (value.charAt(0) != '-') {          result.put(key,value);          i++;        } else {          result.put(key,null);        }      } else {        result.put(key,null);      }    }  }  return result;}  }
class C{  @Override public void createApplication(Application.Name applicationName){  final String CQL="insert into applicationList(app_name) values(?)";  try {    getDriver().getKeyspace().prepareQuery(getKeyspace().applicationList_CF()).withCql(CQL).asPreparedStatement().withByteBufferValue(applicationName,ApplicationNameSerializer.get()).execute().getResult();  } catch (  Exception e) {    throw new RepositoryException("Unable to insert into top level application list: \"" + applicationName.toString() + "\""+ e);  }}  }
class C{  public static int calculateConnectionServerCount(int vmcount){  Float f=(vmcount / (float)2000.00);  f=(float)Math.ceil(f);  if (f >= 5) {    f++;    f++;  } else {    f++;  }  final int i=f.intValue();  return i;}  }
class C{  public static void expandLetters(String letters,WordRelation wordRelation,Item tokenItem){  letters=letters.toLowerCase();  char c;  for (int i=0; i < letters.length(); i++) {    c=letters.charAt(i);    if (isDigit(c)) {      wordRelation.addWord(tokenItem,digit2num[c - '0']);    } else     if (letters.equals("a")) {      wordRelation.addWord(tokenItem,"_a");    } else {      wordRelation.addWord(tokenItem,String.valueOf(c));    }  }}  }
class C{  public void abort(){  Log.i(Mary.LOG,"Requesting abort.");  abortRequested=true;}  }
class C{  public FST(String fileName,String encoding,boolean verbose) throws IOException {  FileInputStream fis=new FileInputStream(fileName);  try {    loadHeaderless(fis,encoding,verbose);  }  finally {    fis.close();  }}  }
class C{  public static double[][] computeVectors(Document doc,ViewerBase graphView){  int numberOfDataSets=doc.getNumberOfSamples();  double[] total=new double[numberOfDataSets];  HashSet<Integer> seen=new HashSet<>();  LinkedList<double[]> rows=new LinkedList<>();  for (Node v=graphView.getGraph().getFirstNode(); v != null; v=v.getNext()) {    if (graphView.getSelected(v)) {      if (!seen.contains((Integer)v.getInfo())) {        seen.add((Integer)v.getInfo());        double[] row=new double[numberOfDataSets];        final int[] counts=(v.getOutDegree() == 0 ? graphView.getNodeData(v).getSummarized() : graphView.getNodeData(v).getAssigned());        for (int i=0; i < counts.length; i++) {          row[i]=counts[i];          total[i]+=row[i];        }        rows.add(row);      }    }  }  for (  double[] row : rows) {    for (int i=0; i < row.length; i++) {      if (total[i] > 0)       row[i]/=total[i];    }  }  return rows.toArray(new double[rows.size()][]);}  }
class C{  public ChangeModifiers(ChangeModifiers... modifiers){  super(modifiers);}  }
class C{  protected IQueryResultSet<IEntryPacket> traverseExpressionTree(ExpNode root,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {  try {    Stack<ExpNode> tempStack=new Stack<ExpNode>();    Stack<ExpNode> nodesToProcessStack=new Stack<ExpNode>();    tempStack.push(root);    while (!tempStack.isEmpty()) {      ExpNode curr=tempStack.pop();      nodesToProcessStack.push(curr);      if (curr.getTemplate() == null) {        if (curr.getLeftChild() != null)         tempStack.push(curr.getLeftChild());        if (curr.getRightChild() != null)         tempStack.push(curr.getRightChild());      }    }    while (!nodesToProcessStack.isEmpty()) {      ExpNode node=nodesToProcessStack.pop();      if (nodesToProcessStack.isEmpty())       node.accept(this,space,txn,readModifier,max); else       node.accept(this,space,txn,readModifier,Integer.MAX_VALUE);    }    return extractResults(root);  }  finally {    _intermediateResults.clear();  }}  }
class C{  @Nonnull @Override public String toString(){  return "VersionNumber [groups=" + groups + ", extension="+ extension+ "]";}  }
class C{  private void bindArticleDatas(){  final Article article=(Article)getIntent().getExtras().get(EXTRA_ARTICLE);  mHeader.setImageResource(article.getHeader());  mDarkTitleContainer.setBackgroundResource(article.getBackgroundColor());  mTitle.setText(article.getTitle());  mDarkTitle.setText(article.getTitle());  mDate.setText(article.getDate());  mDarkDate.setText(article.getDate());}  }
class C{  public void remove(IObjectInfo<T> poi){  remove_impl(poi,true);}  }
class C{  @Override public boolean accept(File file){  if (fileFilter != null) {    return fileFilter.accept(file);  } else {    return super.accept(file);  }}  }
class C{  public static Dfp atan(final Dfp a){  final Dfp zero=a.getField().getZero();  final Dfp one=a.getField().getOne();  final Dfp[] sqr2Split=a.getField().getSqr2Split();  final Dfp[] piSplit=a.getField().getPiSplit();  boolean recp=false;  boolean neg=false;  boolean sub=false;  final Dfp ty=sqr2Split[0].subtract(one).add(sqr2Split[1]);  Dfp x=new Dfp(a);  if (x.lessThan(zero)) {    neg=true;    x=x.negate();  }  if (x.greaterThan(one)) {    recp=true;    x=one.divide(x);  }  if (x.greaterThan(ty)) {    Dfp sty[]=new Dfp[2];    sub=true;    sty[0]=sqr2Split[0].subtract(one);    sty[1]=sqr2Split[1];    Dfp[] xs=split(x);    Dfp[] ds=splitMult(xs,sty);    ds[0]=ds[0].add(one);    xs[0]=xs[0].subtract(sty[0]);    xs[1]=xs[1].subtract(sty[1]);    xs=splitDiv(xs,ds);    x=xs[0].add(xs[1]);  }  Dfp y=atanInternal(x);  if (sub) {    y=y.add(piSplit[0].divide(8)).add(piSplit[1].divide(8));  }  if (recp) {    y=piSplit[0].divide(2).subtract(y).add(piSplit[1].divide(2));  }  if (neg) {    y=y.negate();  }  return a.newInstance(y);}  }
class C{  @POST @Path("applications/{applicationName}/experiments") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @Timed public Response recordExperimentsEvents(@PathParam("applicationName") final Application.Name applicationName,@PathParam("userID") final User.ID userID,final Map<Experiment.Label,Map<User.ID,List<Event>>> eventList){  throw new UnsupportedOperationException("Not implemented");}  }
class C{  public static Item findFromFront(Relation segmentRelation,float time){  Item item=segmentRelation.getHead();  while (item != null && time > SegmentRelationUtils.getSegmentEnd(item)) {    item=item.getNext();  }  return item;}  }
class C{  public Model loadModelFromCache(int method,String uri){  try {    CachedModel c=modelMap.get(method + "|" + uri);    if (c != null) {      Model m=c.create(uri);      return m;    }    c=modelMap.get(method + "|" + uri+ "/"+ X.NONE);    if (c != null) {      Model m=c.create(uri);      return m;    }  } catch (  Exception e) {  }  Module e=floor();  if (e != null && e.getId() != this.id) {    return e.loadModelFromCache(method,uri);  }  return null;}  }
class C{  public boolean inRange(VersionData minimumVersion,VersionData maximumVersion){  if ((minimumVersion == null) || (maximumVersion == null)) {    return false;  }  boolean inRange=minimumVersion.greaterThan(this) && this.lessThan(maximumVersion);  return inRange;}  }
class C{  public MessagesSendQuery randomId(Integer value){  return unsafeParam("random_id",value);}  }
class C{  @Override protected void runImpl(){  Player player=getConnection().getActivePlayer();  VisibleObject obj;  if (targetObjectId == player.getObjectId()) {    obj=player;  } else {    obj=player.getKnownList().getObject(targetObjectId);    if (obj == null && player.isInTeam()) {      TeamMember<Player> member=player.getCurrentTeam().getMember(targetObjectId);      if (member != null) {        obj=member.getObject();      }    }  }  if (obj != null) {    if (type == 1) {      if (obj.getTarget() == null) {        return;      }      player.setTarget(obj.getTarget());    } else {      player.setTarget(obj);    }    if (obj instanceof Player) {      Player target=(Player)obj;      if (player != obj && !player.canSee(target)) {        AuditLogger.info(player,"Possible radar hacker detected, targeting on invisible Player name: " + target.getName() + " objectId: "+ target.getObjectId()+ " by");      }    } else     if (obj instanceof Trap) {      Trap target=(Trap)obj;      boolean isSameTeamTrap=false;      if (target.getMaster() instanceof Player) {        isSameTeamTrap=((Player)target.getMaster()).isInSameTeam(player);      }      if (player != obj && !player.canSee(target) && !isSameTeamTrap) {        AuditLogger.info(player,"Possible radar hacker detected, targeting on invisible Trap name: " + target.getName() + " objectId: "+ target.getObjectId()+ " by");      }    } else     if (obj instanceof Creature) {      Creature target=(Creature)obj;      if (player != obj && !player.canSee(target)) {        AuditLogger.info(player,"Possible radar hacker detected, targeting on invisible Npc name: " + target.getName() + " objectId: "+ target.getObjectId()+ " by");      }    }  } else {    player.setTarget(null);  }  sendPacket(new SM_TARGET_SELECTED(player));  PacketSendUtility.broadcastPacket(player,new SM_TARGET_UPDATE(player));}  }
class C{  public void verifyFullscreen(){  conditions.verify(null);}  }
class C{  public JSONObject put(String key,Collection<Object> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  private void internal_populateEnumField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String value=options.get(key);    fieldConfigVisitor.populateComboBoxField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Datagram)) {    return false;  }  Datagram other=(Datagram)obj;  if (this.duration != other.duration)   return (false);  if (this.data.length != other.data.length)   return (false);  for (int i=0; i < this.data.length; i++) {    if (this.data[i] != other.data[i])     return (false);  }  return (true);}  }
class C{  static int[] uncompact(int compactConstraints){  int length=0;  for (  int c : ALL_CONSTRAINTS) {    length+=(compactConstraints & c) == c ? 1 : 0;  }  int[] list=new int[length];  int i=0;  for (  int c : ALL_CONSTRAINTS) {    if ((compactConstraints & c) == c) {      list[i++]=c;    }  }  return list;}  }
class C{  private soot.Value reverseCondition(soot.jimple.ConditionExpr cond){  soot.jimple.ConditionExpr newExpr;  if (cond instanceof soot.jimple.EqExpr) {    newExpr=soot.jimple.Jimple.v().newNeExpr(cond.getOp1(),cond.getOp2());  } else   if (cond instanceof soot.jimple.NeExpr) {    newExpr=soot.jimple.Jimple.v().newEqExpr(cond.getOp1(),cond.getOp2());  } else   if (cond instanceof soot.jimple.GtExpr) {    newExpr=soot.jimple.Jimple.v().newLeExpr(cond.getOp1(),cond.getOp2());  } else   if (cond instanceof soot.jimple.GeExpr) {    newExpr=soot.jimple.Jimple.v().newLtExpr(cond.getOp1(),cond.getOp2());  } else   if (cond instanceof soot.jimple.LtExpr) {    newExpr=soot.jimple.Jimple.v().newGeExpr(cond.getOp1(),cond.getOp2());  } else   if (cond instanceof soot.jimple.LeExpr) {    newExpr=soot.jimple.Jimple.v().newGtExpr(cond.getOp1(),cond.getOp2());  } else {    throw new RuntimeException("Unknown Condition Expr");  }  newExpr.getOp1Box().addAllTagsOf(cond.getOp1Box());  newExpr.getOp2Box().addAllTagsOf(cond.getOp2Box());  return newExpr;}  }
class C{  @Nullable public static Object parse(@NotNull Type type,@Nullable String value){  if (value == null) {    return null;  }switch (type) {case STRING:    return value;case BOOLEAN:  if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {    return Boolean.TRUE;  } else   if (Boolean.FALSE.toString().equalsIgnoreCase(value)) {    return Boolean.FALSE;  } else {    return null;  }case INTEGER:try {  return Integer.parseInt(value);} catch (NumberFormatException e) {  if (!ApplicationManager.getApplication().isUnitTestMode()) {    LOG.error("NumberFormatException while evaluating " + value);  }  return null;}}return null;}  }
class C{  public final boolean isUpdating(){  return (mUpdateHeader == getChildAt(0) && mUpdateHeader.getHeight() > 0);}  }
class C{  private int diff_cleanupSemanticScore(String one,String two){  if (one.length() == 0 || two.length() == 0) {    return 6;  }  char char1=one.charAt(one.length() - 1);  char char2=two.charAt(0);  boolean nonAlphaNumeric1=!Character.isLetterOrDigit(char1);  boolean nonAlphaNumeric2=!Character.isLetterOrDigit(char2);  boolean whitespace1=nonAlphaNumeric1 && Character.isWhitespace(char1);  boolean whitespace2=nonAlphaNumeric2 && Character.isWhitespace(char2);  boolean lineBreak1=whitespace1 && Character.getType(char1) == Character.CONTROL;  boolean lineBreak2=whitespace2 && Character.getType(char2) == Character.CONTROL;  boolean blankLine1=lineBreak1 && BLANKLINEEND.matcher(one).find();  boolean blankLine2=lineBreak2 && BLANKLINESTART.matcher(two).find();  if (blankLine1 || blankLine2) {    return 5;  } else   if (lineBreak1 || lineBreak2) {    return 4;  } else   if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {    return 3;  } else   if (whitespace1 || whitespace2) {    return 2;  } else   if (nonAlphaNumeric1 || nonAlphaNumeric2) {    return 1;  }  return 0;}  }
class C{  public boolean equals(Object o){  return o instanceof Text && super.equals(o);}  }
class C{  protected AdsGetDemographicsQuery period(String value){  return unsafeParam("period",value);}  }
class C{  public void deletePolicy(String policyName){  policies.remove(policyName);}  }
class C{  @Override public synchronized TimeSeriesCollection updateCollection(){  return super.updateCollection();}  }
class C{  public static boolean nullEquals(String s1,String s2){  return (s1 == null ? s2 == null : s1.equals(s2));}  }
class C{  public ParameterVisibilityAnnotationAttr(String kind,ArrayList vis_annotations){  attr=new AsciiCP(kind + "Annotations");  list=vis_annotations;}  }
class C{  public GetEntryTypeDescriptorSpaceOperationRequest(){}  }
class C{  public double distance(Vector o){  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));}  }
class C{  public long readLong(){  long h=(((long)readInt()) & 0x0FFFFFFFFL) << 32;  long l=((long)readInt()) & (0x0FFFFFFFFL);  return h | l;}  }
class C{  private boolean isArcEnd(final BSPTree<Sphere1D> node){  if (!(Boolean)leafBefore(node).getAttribute()) {    return false;  }  if ((Boolean)leafAfter(node).getAttribute()) {    return false;  }  return true;}  }
class C{  public void copyPluginSoLib(Context context,String dexPath,String nativeLibDir){  String cpuName=getCpuName();  String cpuArchitect=getCpuArch(cpuName);  sNativeLibDir=nativeLibDir;  Log.d(TAG,"cpuArchitect: " + cpuArchitect);  long start=System.currentTimeMillis();  try {    ZipFile zipFile=new ZipFile(dexPath);    Enumeration<? extends ZipEntry> entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry zipEntry=(ZipEntry)entries.nextElement();      if (zipEntry.isDirectory()) {        continue;      }      String zipEntryName=zipEntry.getName();      if (zipEntryName.endsWith(".so") && zipEntryName.contains(cpuArchitect)) {        final long lastModify=zipEntry.getTime();        if (lastModify == DLConfigs.getSoLastModifiedTime(context,zipEntryName)) {          Log.d(TAG,"skip copying, the so lib is exist and not change: " + zipEntryName);          continue;        }        mSoExecutor.execute(new CopySoTask(context,zipFile,zipEntry,lastModify));      }    }    zipFile.close();  } catch (  IOException e) {    e.printStackTrace();  }  long end=System.currentTimeMillis();  Log.d(TAG,"### copy so time : " + (end - start) + " ms");}  }
class C{  public PhotosSaveWallPhotoQuery(VkApiClient client,UserActor actor,String photo){  super(client,"photos.saveWallPhoto",Utils.buildParametrizedType(List.class,Photo.class));  accessToken(actor.getAccessToken());  photo(photo);}  }
class C{  public String toString(){  return "PauseGenerator";}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200812,skillcaster,skillname);}  }
class C{  public boolean isModal(){  return modal;}  }
class C{  public static long checksumCRC32(File file) throws IOException {  CRC32 crc=new CRC32();  checksum(file,crc);  return crc.getValue();}  }
class C{  public DataQueryParams removeDimensionOrFilter(String dimension){  removeDimension(dimension);  removeFilter(dimension);  return this;}  }
class C{  public static boolean isBodyRotationDiscEnabled(){  return bodyRotationDiscEnabled;}  }
class C{  public ColumnMetadata(Table table,String column){  this(table,column,DefaultLiteralComparator.getInstance(),true);}  }
class C{  public boolean runAfter(List tasks,int size){  return false;}  }
class C{  public Buffer pinNew(String fileName,PageFormatter fmtr){  if (pinnedBuffers.size() == BUFFER_POOL_SIZE)   throw new BufferAbortException();  try {    Buffer buff;    long timestamp=System.currentTimeMillis();    boolean waitedBeforeGotBuffer=false;    buff=bufferPool.pinNew(fileName,fmtr);    if (buff == null) {      waitedBeforeGotBuffer=true;synchronized (bufferPool) {        waitingThreads.add(Thread.currentThread());        while (buff == null && !waitingTooLong(timestamp)) {          bufferPool.wait(MAX_TIME);          if (waitingThreads.get(0).equals(Thread.currentThread()))           buff=bufferPool.pinNew(fileName,fmtr);        }        waitingThreads.remove(Thread.currentThread());      }    }    if (buff == null) {      repin();      buff=pinNew(fileName,fmtr);    } else {      pinnedBuffers.put(buff.block(),new PinnedBuffer(buff));    }    if (waitedBeforeGotBuffer) {synchronized (bufferPool) {        bufferPool.notifyAll();      }    }    return buff;  } catch (  InterruptedException e) {    throw new BufferAbortException();  }}  }
class C{  void abort(long waitFor) throws CannotAbortException, TimeoutExpiredException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerTransaction.class.getName(),"abort",new Long(waitFor));  }  boolean use_light_abort=false;  if (waitFor == Long.MAX_VALUE) {synchronized (this) {      if (_parts == null && _singleHandle != null)       use_light_abort=true;      ;    }  }  if (use_light_abort) {    lightAbort(_singleHandle);    return;  }  if (jobLock == null)   setJobLockIfNeed();  long starttime=SystemTime.timeMillis();  boolean directAbortCall=false;  try {    ParticipantHandle[] phs=parthandles();    if (phs == null) {      if (modifyTxnState(ABORTED))       return; else       throw new CannotAbortException("Transaction already COMMITTED");    }    ClientLog log=logmgr.logFor(str.id);    if (modifyTxnState(ABORTED)) {      log.write(new AbortRecord(phs));synchronized (jobLock) {        directAbortCall=waitFor == Long.MAX_VALUE && phs.length == 1;        if (!(job instanceof AbortJob)) {          if (job != null) {            if (job.isDirectCall())             throw new CannotAbortException("direct call  on Transaction in progress");            job.stop();          }          job=new AbortJob(str,threadpool,wm,log,phs,directAbortCall,_externalXid);          if (job.isDirectCall()) {            AbortJob aj=(AbortJob)job;            aj.doWork(null,phs[0]);          } else           job.scheduleTasks();        }      }    } else {      throw new CannotAbortException("Transaction already COMMITTED");    }    long now=SystemTime.timeMillis();    long transpired=now - starttime;    Integer result=new Integer(ACTIVE);    boolean aborted=false;    long remainder=waitFor - transpired;    try {synchronized (jobLock) {        if (remainder <= 0 || !job.isCompleted(remainder)) {          if (_externalXid != null)           settler.noteUnsettledTxn(_externalXid); else           settler.noteUnsettledTxn(str.id);          throw new TimeoutExpiredException("timeout expired",false);        } else {          result=(Integer)job.computeResult();          aborted=true;        }        for (        ParticipantHandle ph : phs) {          if (ph.getAbortException() != null)           throw ph.getAbortException();        }      }    } catch (    ResultNotReadyException rnre) {    }catch (    JobNotStartedException jnse) {    }catch (    JobException je) {      if (_externalXid != null)       settler.noteUnsettledTxn(_externalXid); else       settler.noteUnsettledTxn(str.id);      throw new TimeoutExpiredException("timeout expired",false);    }    if (!aborted)     throw new InternalManagerException("TxnManagerTransaction: " + "abort: AbortJob got bad state: " + TxnConstants.getName(result.intValue()));    log.invalidate();  } catch (  RuntimeException rte) {    if (transactionsLogger.isLoggable(Level.SEVERE)) {      transactionsLogger.log(Level.SEVERE,"Problem aborting transaction",rte);    }    throw new InternalManagerException("TxnManagerTransaction: " + "abort: fatal error");  }catch (  LogException le) {    if (transactionsLogger.isLoggable(Level.FINEST)) {      transactionsLogger.log(Level.FINEST,"Problem persisting transaction",le);    }    throw new CannotAbortException("Unable to log");  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerTransaction.class.getName(),"abort");  }}  }
class C{  public static void assertEqualModelItems(Map<? extends ModelItem,? extends ModelItem> actual,Map<? extends ModelItem,? extends ModelItem> expected){  assertEqualModelItems(actual,expected,null);}  }
class C{  private void unloadDataStore(){  if (dataSourceInfo != null) {    notifyDataSourceAboutToUnloaded(dataSourceInfo.getDataStore());    dataSourceInfo.unloadDataStore();  }  if (exampleDataSourceInfo != null) {    notifyDataSourceAboutToUnloaded(exampleDataSourceInfo.getDataStore());    exampleDataSourceInfo.unloadDataStore();  }}  }
class C{  private int generateNonce(){  return RANDOM.nextInt();}  }
class C{  private void createRow(BlocksChunkHolder blockChunkHolder,RowIntf row,int index) throws QueryExecutionException {  Object[] record=new Object[dimColEvaluatorInfoList.size() + msrColEvalutorInfoList.size()];  String memberString=null;  for (int i=0; i < dimColEvaluatorInfoList.size(); i++) {    DimColumnResolvedFilterInfo dimColumnEvaluatorInfo=dimColEvaluatorInfoList.get(i);    if (dimColumnEvaluatorInfo.getDimension().getDataType() != DataType.ARRAY && dimColumnEvaluatorInfo.getDimension().getDataType() != DataType.STRUCT) {      if (!dimColumnEvaluatorInfo.isDimensionExistsInCurrentSilce()) {        record[dimColumnEvaluatorInfo.getRowIndex()]=dimColumnEvaluatorInfo.getDefaultValue();      }      if (!dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DICTIONARY) && blockChunkHolder.getDimensionDataChunk()[blocksIndex[i]] instanceof VariableLengthDimensionDataChunk) {        VariableLengthDimensionDataChunk dimensionColumnDataChunk=(VariableLengthDimensionDataChunk)blockChunkHolder.getDimensionDataChunk()[blocksIndex[i]];        if (null != dimensionColumnDataChunk.getCompleteDataChunk()) {          memberString=readMemberBasedOnNoDictionaryVal(dimColumnEvaluatorInfo,dimensionColumnDataChunk,index);          if (null != memberString) {            if (memberString.equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {              memberString=null;            }          }          record[dimColumnEvaluatorInfo.getRowIndex()]=DataTypeUtil.getDataBasedOnDataType(memberString,dimColumnEvaluatorInfo.getDimension().getDataType());        } else {          continue;        }      } else {        int dictionaryValue=readSurrogatesFromColumnBlock(blockChunkHolder,index,dimColumnEvaluatorInfo,blocksIndex[i]);        Dictionary forwardDictionary=null;        if (dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DICTIONARY) && !dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {          memberString=getFilterActualValueFromDictionaryValue(dimColumnEvaluatorInfo,dictionaryValue,forwardDictionary);          record[dimColumnEvaluatorInfo.getRowIndex()]=DataTypeUtil.getDataBasedOnDataType(memberString,dimColumnEvaluatorInfo.getDimension().getDataType());        } else         if (dimColumnEvaluatorInfo.getDimension().hasEncoding(Encoding.DIRECT_DICTIONARY)) {          Object member=getFilterActualValueFromDirectDictionaryValue(dimColumnEvaluatorInfo,dictionaryValue);          record[dimColumnEvaluatorInfo.getRowIndex()]=member;        }      }    } else {      try {        GenericQueryType complexType=complexDimensionInfoMap.get(blocksIndex[i]);        ByteArrayOutputStream byteStream=new ByteArrayOutputStream();        DataOutputStream dataOutputStream=new DataOutputStream(byteStream);        complexType.parseBlocksAndReturnComplexColumnByteArray(blockChunkHolder.getDimensionDataChunk(),index,dataOutputStream);        record[dimColumnEvaluatorInfo.getRowIndex()]=complexType.getDataBasedOnDataTypeFromSurrogates(ByteBuffer.wrap(byteStream.toByteArray()));        byteStream.close();      } catch (      IOException e) {        LOGGER.info(e.getMessage());      }    }  }  DataType msrType;  for (  MeasureColumnResolvedFilterInfo msrColumnEvalutorInfo : msrColEvalutorInfoList) {switch (msrColumnEvalutorInfo.getType()) {case INT:case LONG:      msrType=DataType.LONG;    break;case DECIMAL:  msrType=DataType.DECIMAL;break;default :msrType=DataType.DOUBLE;}if (!msrColumnEvalutorInfo.isMeasureExistsInCurrentSlice()) {record[msrColumnEvalutorInfo.getRowIndex()]=msrColumnEvalutorInfo.getDefaultValue();} else {Object msrValue;switch (msrType) {case INT:case LONG:msrValue=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getMeasureDataHolder().getReadableLongValueByIndex(index);break;case DECIMAL:msrValue=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getMeasureDataHolder().getReadableBigDecimalValueByIndex(index);break;default :msrValue=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getMeasureDataHolder().getReadableDoubleValueByIndex(index);}record[msrColumnEvalutorInfo.getRowIndex()]=blockChunkHolder.getMeasureDataChunk()[msrColumnEvalutorInfo.getColumnIndex()].getNullValueIndexHolder().getBitSet().get(index) ? null : msrValue;}}row.setValues(record);}  }
class C{  public MessagesGetHistoryQuery rev(Boolean value){  return unsafeParam("rev",value);}  }
class C{  public int[] toNativeArray(int offset,int len){  int[] rv=new int[len];  toNativeArray(rv,offset,len);  return rv;}  }
class C{  public AemSidekick expandFieldsetIfCollapsed(String fieldsetName){  final WebElement fieldset=getFieldsetByName(fieldsetName);  bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandFieldset(fieldset),Timeouts.SMALL);  return this;}  }
class C{  public boolean featureEquals(FeatureDefinition other){  if (numByteFeatures != other.numByteFeatures || numShortFeatures != other.numShortFeatures || numContinuousFeatures != other.numContinuousFeatures)   return false;  for (int i=0; i < numByteFeatures + numShortFeatures + numContinuousFeatures; i++) {    if (!getFeatureName(i).equals(other.getFeatureName(i)))     return false;  }  for (int i=0; i < numByteFeatures + numShortFeatures; i++) {    if (getNumberOfValues(i) != other.getNumberOfValues(i))     return false;    for (int v=0, n=getNumberOfValues(i); v < n; v++) {      if (!getFeatureValueAsString(i,v).equals(other.getFeatureValueAsString(i,v)))       return false;    }  }  return true;}  }
class C{  public static boolean isServiceRunning(Context context,String className){  boolean isRunning=false;  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<RunningServiceInfo> servicesList=activityManager.getRunningServices(Integer.MAX_VALUE);  for (  RunningServiceInfo si : servicesList) {    if (className.equals(si.service.getClassName())) {      isRunning=true;    }  }  return isRunning;}  }
class C{  public BaseViewHolder linkify(int viewId){  TextView view=getView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  private String queryCatalogFiles(){  String catalogList=System.getProperty(pFiles);  fromPropertiesFile=false;  if (catalogList == null) {    if (resources == null)     readProperties();    if (resources != null) {      try {        catalogList=resources.getString("catalogs");        fromPropertiesFile=true;      } catch (      MissingResourceException e) {        System.err.println(propertyFile + ": catalogs not found.");        catalogList=null;      }    }  }  if (catalogList == null) {    catalogList=defaultCatalogFiles;  }  return catalogList;}  }
class C{  public IntIterator columnRows(IntIterator rows,int col){  return new ColumnRowIterator(rows,col);}  }
class C{  public void insert(final double[] key,final T value) throws KeySizeException, KeyDuplicateException {  this.edit(key,new Editor.Inserter<T>(value));}  }
class C{  protected AbstractHttpParams(){  super();}  }
class C{  private static void resolveUnaryExpression(UnaryExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  PsiElement objOperation=objSubjectExpression.getOperation();  if (null == objOperation) {    return;  }  IElementType objType=objOperation.getNode().getElementType();  if (PhpTokenTypes.CAST_OPERATORS.contains(objType)) {    if (objType == PhpTokenTypes.opINTEGER_CAST) {      objTypesSet.add(Types.strInteger);    } else     if (objType == PhpTokenTypes.opARRAY_CAST) {      objTypesSet.add(Types.strArray);    } else     if (objType == PhpTokenTypes.opBOOLEAN_CAST) {      objTypesSet.add(Types.strBoolean);    } else     if (objType == PhpTokenTypes.opFLOAT_CAST) {      objTypesSet.add(Types.strFloat);    } else     if (objType == PhpTokenTypes.opSTRING_CAST) {      objTypesSet.add(Types.strString);    }    return;  }  storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet);}  }
class C{  public ComponentConfigBuilder add(String itemType,String label,String value){  config.add(new ConfigurationEntry(currentTab,itemType,label,value));  return this;}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  public ViewsAnimator withEndAction(@NonNull final Runnable endAction){  FunctionUtils.checkParameterIsNotNull("endAction",endAction);  this.endAction=endAction;  return this;}  }
class C{  private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (diff_main)");  }  LinkedList<Diff> diffs;  if (text1.equals(text2)) {    diffs=new LinkedList<Diff>();    if (text1.length() != 0) {      diffs.add(new Diff(Operation.EQUAL,text1));    }    return diffs;  }  int commonlength=diff_commonPrefix(text1,text2);  String commonprefix=text1.substring(0,commonlength);  text1=text1.substring(commonlength);  text2=text2.substring(commonlength);  commonlength=diff_commonSuffix(text1,text2);  String commonsuffix=text1.substring(text1.length() - commonlength);  text1=text1.substring(0,text1.length() - commonlength);  text2=text2.substring(0,text2.length() - commonlength);  diffs=diff_compute(text1,text2,checklines,deadline);  if (commonprefix.length() != 0) {    diffs.addFirst(new Diff(Operation.EQUAL,commonprefix));  }  if (commonsuffix.length() != 0) {    diffs.addLast(new Diff(Operation.EQUAL,commonsuffix));  }  diff_cleanupMerge(diffs);  return diffs;}  }
class C{  @Override public int[] makeCumulativeTestPoints(){  return makeDensityTestPoints();}  }
class C{  public void requestAssignReturnRoute(int nodeId,int destinationId){  enqueue(new AssignReturnRouteMessageClass().doRequest(nodeId,destinationId,getCallbackId()));}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public SimpleVectorValueChecker(final double relativeThreshold,final double absoluteThreshold){  super(relativeThreshold,absoluteThreshold);  maxIterationCount=ITERATION_CHECK_DISABLED;}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  public Location add(double x,double y,double z){  this.x+=x;  this.y+=y;  this.z+=z;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_NOT_SKIN_CHANGED_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400084,value0);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  public VideoDeleteCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  private BSPTree<S> recurseComplement(final BSPTree<S> node){  final Map<BSPTree<S>,BSPTree<S>> map=new HashMap<BSPTree<S>,BSPTree<S>>();  final BSPTree<S> transformedTree=recurseComplement(node,map);  for (  final Map.Entry<BSPTree<S>,BSPTree<S>> entry : map.entrySet()) {    if (entry.getKey().getCut() != null) {      @SuppressWarnings("unchecked") BoundaryAttribute<S> original=(BoundaryAttribute<S>)entry.getKey().getAttribute();      if (original != null) {        @SuppressWarnings("unchecked") BoundaryAttribute<S> transformed=(BoundaryAttribute<S>)entry.getValue().getAttribute();        for (        final BSPTree<S> splitter : original.getSplitters()) {          transformed.getSplitters().add(map.get(splitter));        }      }    }  }  return transformedTree;}  }
class C{  public static List<BlockletInfoColumnar> convertBlockletInfo(FileFooter footer) throws IOException {  List<BlockletInfoColumnar> listOfNodeInfo=new ArrayList<BlockletInfoColumnar>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  for (  BlockletInfo blockletInfo : footer.getBlocklet_info_list()) {    BlockletInfoColumnar blockletInfoColumnar=new BlockletInfoColumnar();    blockletInfoColumnar.setNumberOfKeys(blockletInfo.getNum_rows());    List<DataChunk> columnChunks=blockletInfo.getColumn_data_chunks();    List<DataChunk> dictChunks=new ArrayList<DataChunk>();    List<DataChunk> nonDictColChunks=new ArrayList<DataChunk>();    for (    DataChunk dataChunk : columnChunks) {      if (dataChunk.getEncoders().get(0).equals(Encoding.DICTIONARY)) {        dictChunks.add(dataChunk);      } else {        nonDictColChunks.add(dataChunk);      }    }    int[] keyLengths=new int[dictChunks.size()];    long[] keyOffSets=new long[dictChunks.size()];    long[] keyBlockIndexOffsets=new long[dictChunks.size()];    int[] keyBlockIndexLens=new int[dictChunks.size()];    long[] indexMapOffsets=new long[dictChunks.size()];    int[] indexMapLens=new int[dictChunks.size()];    boolean[] sortState=new boolean[dictChunks.size()];    int i=0;    for (    DataChunk dataChunk : dictChunks) {      keyLengths[i]=dataChunk.getData_page_length();      keyOffSets[i]=dataChunk.getData_page_offset();      keyBlockIndexOffsets[i]=dataChunk.getRowid_page_offset();      keyBlockIndexLens[i]=dataChunk.getRowid_page_length();      indexMapOffsets[i]=dataChunk.getRle_page_offset();      indexMapLens[i]=dataChunk.getRle_page_length();      sortState[i]=dataChunk.getSort_state().equals(SortState.SORT_EXPLICIT) ? true : false;      i++;    }    blockletInfoColumnar.setKeyLengths(keyLengths);    blockletInfoColumnar.setKeyOffSets(keyOffSets);    blockletInfoColumnar.setKeyBlockIndexOffSets(keyBlockIndexOffsets);    blockletInfoColumnar.setKeyBlockIndexLength(keyBlockIndexLens);    blockletInfoColumnar.setDataIndexMapOffsets(indexMapOffsets);    blockletInfoColumnar.setDataIndexMapLength(indexMapLens);    blockletInfoColumnar.setIsSortedKeyColumn(sortState);    int[] msrLens=new int[nonDictColChunks.size()];    long[] msrOffsets=new long[nonDictColChunks.size()];    ValueEncoderMeta[] encoderMetas=new ValueEncoderMeta[nonDictColChunks.size()];    i=0;    for (    DataChunk msrChunk : nonDictColChunks) {      msrLens[i]=msrChunk.getData_page_length();      msrOffsets[i]=msrChunk.getData_page_offset();      encoderMetas[i]=deserializeValueEncoderMeta(msrChunk.getEncoder_meta().get(0));      i++;    }    blockletInfoColumnar.setMeasureLength(msrLens);    blockletInfoColumnar.setMeasureOffset(msrOffsets);    blockletInfoColumnar.setCompressionModel(getValueCompressionModel(encoderMetas));    listOfNodeInfo.add(blockletInfoColumnar);  }  setBlockletIndex(footer,listOfNodeInfo);  return listOfNodeInfo;}  }
class C{  public static byte[] hexStringToBytes(String hexString){  if (hexString == null || hexString.equals("")) {    return null;  }  hexString=hexString.toUpperCase();  int length=hexString.length() / 2;  char[] hexChars=hexString.toCharArray();  byte[] d=new byte[length];  for (int i=0; i < length; i++) {    int pos=i * 2;    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));  }  return d;}  }
class C{  public String readLine() throws IOException {  StringBuffer buffer=new StringBuffer();  int previous=-1;  int current=-1;  do {    int i=reader.read();    if (i == -1) {      if (buffer.length() == 0) {        return null;      } else {        return buffer.toString();      }    }    previous=current;    current=i;    if (current == '\n') {      return buffer.toString();    } else     if (previous == '\r' && current == 0) {      buffer.append(SYSTEM_LINE_SEPARATOR);    } else     if (current != 0 && current != '\r') {      buffer.append((char)current);    }  } while (true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_GATHERING_B_ITEM_CHECK(String value0){  return new SM_SYSTEM_MESSAGE(1400376,value0);}  }
class C{  public SiteAdminPage clickDeleteAndConfirm(String title){  grid.selectPageByTitle(title);  grid.getActionBar().clickOnButton(SiteAdminButtons.DELETE,siteAdminConfirmationWindow);  clickYesOnConfirmationWindow();  return this;}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  @Override public void close(){  if (closed) {    return;  }  if (SHOULD_CHECK && !txn.isReadOnly()) {    txn.checkReady();  }  LIB.mdb_cursor_close(ptrCursor);  closed=true;}  }
class C{  public MarketRestoreCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){  super(client,"market.restoreComment",BoolInt.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  commentId(commentId);}  }
class C{  public static Tuple min(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    Table table=(Table)tuples;    ColumnMetadata md=table.getMetadata(field);    return table.getTuple(md.getMinimumRow());  } else {    return min(tuples.tuples(),field,cmp);  }}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getRoleName() == null) ? 0 : getRoleName().hashCode());  result=prime * result + ((getDeptId() == null) ? 0 : getDeptId().hashCode());  result=prime * result + ((getRoleType() == null) ? 0 : getRoleType().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  protected AdsGetRejectionReasonQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  private static String timeMin(int hour,int min){  int mm;  mm=min / 5;  if ((min % 5) > 2) {    mm+=1;  }  mm=mm * 5;  if (mm > 55) {    mm=0;  }  if (mm == 0) {    return "";  } else   if (mm == 5) {    return "five past";  } else   if (mm == 10) {    return "ten past";  } else   if (mm == 15) {    return "quarter past";  } else   if (mm == 20) {    return "twenty past";  } else   if (mm == 25) {    return "twenty-five past";  } else   if (mm == 30) {    return "half past";  } else   if (mm == 35) {    return "twenty-five to";  } else   if (mm == 40) {    return "twenty to";  } else   if (mm == 45) {    return "quarter to";  } else   if (mm == 50) {    return "ten to";  } else   if (mm == 55) {    return "five to";  } else {    return "five to";  }}  }
class C{  @Override public String toString(){  return "TokenToWords";}  }
class C{  List<ChannelModel> parse(String json){  return getChannelList(json);}  }
class C{  public boolean hasTypeDecl(){  return getTypeDeclOpt().getNumChild() != 0;}  }
class C{  public SymbolTable(int initialCapacity,float loadFactor){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Illegal Load: " + loadFactor);  }  if (initialCapacity == 0) {    initialCapacity=1;  }  fLoadFactor=loadFactor;  fTableSize=initialCapacity;  fBuckets=new Entry[fTableSize];  fThreshold=(int)(fTableSize * loadFactor);  fCount=0;}  }
class C{  public Buffer(){  this.count=0;}  }
class C{  public AttributeFileReader(String filename){  setFilename(filename);}  }
class C{  void decrement(){  --_index;}  }
class C{  public UsersExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @Override public Writer append(char c) throws IOException {  try {    beforeWrite(1);    out.append(c);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }  return this;}  }
class C{  public Matrix minusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] - B.A[i][j];    }  }  return this;}  }
class C{  public void fail(){  screenshot();  this.testResult=new Fail();}  }
class C{  public boolean isSetClientAppkey(){  return this.clientAppkey != null;}  }
class C{  public static ByteBuffer createByteBuffer(ByteBuffer buf,int size){  if (buf != null && buf.limit() == size) {    buf.rewind();    return buf;  }  buf=createByteBuffer(size);  return buf;}  }
class C{  public void evaluateRules(final Tag tag){  Iterator<Long> rulesIterator=tag.getRuleIds().iterator();  if (tag.getRuleIds().size() > 0) {    LOGGER.trace(tag.getId() + " Triggering re-evaluation for " + tag.getRuleIds().size()+ " rules : "+ tag.getRuleIds());    while (rulesIterator.hasNext()) {      evaluateRule(rulesIterator.next());    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ASSISTKEY_ASSIST_FOR_SOMEONE(String value0){  return new SM_SYSTEM_MESSAGE(1300680,value0);}  }
class C{  public String read(String id){  SQLiteDatabase db=this.getReadableDatabase();  Cursor cursor=db.query(TABLE_BUNDLES,new String[]{KEY_ID,KEY_BUNDLE},KEY_ID + "=?",new String[]{id},null,null,null,null);  String bundle=null;  if (cursor != null) {    cursor.moveToFirst();    if (cursor.getCount() > 0) {      bundle=cursor.getString(KEY_BUNDLE_INDEX);    }    cursor.close();  }  return bundle;}  }
class C{  PersistentRegistrarImpl(String[] configArgs,LifeCycle lifeCycle) throws Exception {  super(configArgs,null,true,lifeCycle);}  }
class C{  public BlowFishCrypt(File keyFile){  try {    FileInputStream is=new FileInputStream(keyFile);    ObjectInputStream os=new ObjectInputStream(is);    String keyString=(String)os.readObject();    is.close();    byte[] keyBytes=keyString.getBytes();    secretKeySpec=new SecretKeySpec(keyBytes,"Blowfish");  } catch (  Exception e) {  }}  }
class C{  public static void w(String msg){  if (LOG_ENABLE) {    Log.w(TAG,buildMsg(msg));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ALARM_REMAIN_ONE_MINUTE(String value0){  return new SM_SYSTEM_MESSAGE(1400552,value0);}  }
class C{  public static void printToFile(String filename,String message){  printToFile(new File(filename),message,false);}  }
class C{  public boolean isApplicable(){  return getViewer().getSelectedComponent() == getViewer().getPcoaTab();}  }
class C{  public double[] nextSample(){  double upper_boundary=0;  double value=rnd.nextDouble();  for (int i=0; i < components.length; i++) {    upper_boundary+=components[i].getComponentWeight();    if (value < upper_boundary) {      return components[i].nextSample();    }  }  if (components.length - 1 >= 0)   return components[components.length - 1].nextSample(); else   throw new IllegalStateException("gaussian components of this mixture not yet defined;");}  }
class C{  public static float convertDpToPixel(Context context,float dp){  return dp * (getDisplayMetrics(context).densityDpi / 160f);}  }
class C{  private static void usage(boolean printDebugOptions){  SmaliHelpFormatter formatter=new SmaliHelpFormatter();  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  formatter.setWidth(consoleWidth);  formatter.printHelp("java -jar baksmali.jar [options] <dex-file>","disassembles and/or dumps a dex file",basicOptions,printDebugOptions ? debugOptions : null);}  }
class C{  public static boolean isEmpty(String str){  if (str == null || str.length() == 0 || str.equalsIgnoreCase("null") || str.isEmpty() || str.equals("")) {    return true;  } else {    return false;  }}  }
class C{  public void onFileCreate(final File file){}  }
class C{  @Override public void run(){  try {    listener.notifySupervisionEvent(event);  } catch (  RuntimeException e) {    LOGGER.error("Exception caught while notifying supervision event: the supervision status will no longer be correct and needs refreshing!",e);  }}  }
class C{  public Page(String name,boolean allowNewAssignment){  this.setName(name);  this.setAllowNewAssignment(allowNewAssignment);}  }
class C{  public boolean isDecaying(){  return (getData() & 0x8) != 0;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  FileDialog chooser=new FileDialog(StdDraw.frame,"Use a .png or .jpg extension",FileDialog.SAVE);  chooser.setVisible(true);  String filename=chooser.getFile();  if (filename != null) {    StdDraw.save(chooser.getDirectory() + File.separator + chooser.getFile());  }}  }
class C{  public String sprintf(double x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuilder sb=new StringBuilder();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else     sb.append(cs.internalsprintf(x));  }  return sb.toString();}  }
class C{  public CART(){}  }
class C{  public static void removeValue(Map<String,Object> context,String expression){  if (Debug.verboseOn()) {    Debug.logVerbose("UelUtil.removeValue invoked, expression = " + expression,module);  }  ELContext elContext=new BasicContext(context);  ValueExpression ve=exprFactory.createValueExpression(elContext,expression,Object.class);  ve.setValue(elContext,null);}  }
class C{  public static ServerRequest[] appendCheckChallenge(ServerRequest request){  return new ServerRequest[]{request,new ServerRequest(RequestType.CHECK_CHALLENGE,CheckChallengeMessage.getDefaultInstance())};}  }
class C{  public GoogleUserCredentialProvider(OkHttpClient client) throws LoginFailedException, RemoteServerException {  this.time=new SystemTimeImpl();  this.client=client;}  }
class C{  public void onDown(long time,float x,float y,boolean fromMouse,int buttons){  resetResizeTimeout(false);  if (mNewTabButton.onDown(x,y)) {    mRenderHost.requestRender();    return;  }  final StripLayoutTab clickedTab=getTabAtPosition(x);  final int index=clickedTab != null ? TabModelUtils.getTabIndexById(mModel,clickedTab.getId()) : TabModel.INVALID_TAB_INDEX;  mInteractingTab=index != TabModel.INVALID_TAB_INDEX && index < mStripTabs.length ? mStripTabs[index] : null;  boolean clickedClose=clickedTab != null && clickedTab.checkCloseHitTest(x,y);  if (clickedClose) {    clickedTab.setClosePressed(true);    mLastPressedCloseButton=clickedTab.getCloseButton();    mRenderHost.requestRender();  }  if (!mScroller.isFinished()) {    mScroller.forceFinished(true);    mInteractingTab=null;  }  if (fromMouse && !clickedClose && clickedTab != null && clickedTab.getVisiblePercentage() >= 1.f && (buttons & MotionEvent.BUTTON_TERTIARY) == 0) {    startReorderMode(time,x,x);  }}  }
class C{  public static List<Writable> sampleFromColumn(int count,String columnName,Schema schema,JavaRDD<List<Writable>> data){  int colIdx=schema.getIndexOfColumn(columnName);  JavaRDD<Writable> ithColumn=data.map(new SelectColumnFunction(colIdx));  return ithColumn.takeSample(false,count);}  }
class C{  public static URL valueOf(String url){  if (url == null || (url=url.trim()).length() == 0) {    throw new IllegalArgumentException("url == null");  }  String protocol=null;  String username=null;  String password=null;  String host=null;  int port=0;  String path=null;  Map<String,String> parameters=null;  int i=url.indexOf("?");  if (i >= 0) {    String[] parts=url.substring(i + 1).split("\\&");    parameters=new HashMap<String,String>();    for (    String part : parts) {      part=part.trim();      if (part.length() > 0) {        int j=part.indexOf('=');        if (j >= 0) {          parameters.put(part.substring(0,j),part.substring(j + 1));        } else {          parameters.put(part,part);        }      }    }    url=url.substring(0,i);  }  i=url.indexOf("://");  if (i >= 0) {    if (i == 0)     throw new IllegalStateException("url missing protocol: \"" + url + "\"");    protocol=url.substring(0,i);    url=url.substring(i + 3);  } else {    i=url.indexOf(":/");    if (i >= 0) {      if (i == 0)       throw new IllegalStateException("url missing protocol: \"" + url + "\"");      protocol=url.substring(0,i);      url=url.substring(i + 1);    }  }  i=url.indexOf("/");  if (i >= 0) {    path=url.substring(i + 1);    url=url.substring(0,i);  }  i=url.indexOf("@");  if (i >= 0) {    username=url.substring(0,i);    int j=username.indexOf(":");    if (j >= 0) {      password=username.substring(j + 1);      username=username.substring(0,j);    }    url=url.substring(i + 1);  }  i=url.indexOf(":");  if (i >= 0 && i < url.length() - 1) {    port=Integer.parseInt(url.substring(i + 1));    url=url.substring(0,i);  }  if (url.length() > 0)   host=url;  return new URL(protocol,username,password,host,port,path,parameters);}  }
class C{  private void refreshWorkspace(GeoServerConnection connection,GeoServerWorkspaceNode workspaceNode){  workspaceNode.removeAllChildren();  Map<String,List<StyleWrapper>> styleMap=geoServerStyleMap.get(connection);  List<StyleWrapper> styleList=styleMap.get(workspaceNode.getWorkspaceName());  for (  StyleWrapper styleWrapper : styleList) {    GeoServerStyleNode childNode=new GeoServerStyleNode(this.handler,connection,styleWrapper);    treeModel.insertNodeInto(childNode,workspaceNode,workspaceNode.getChildCount());  }  treeModel.reload(workspaceNode);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((table != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof ColorMap) {      ColorMap newValue=(ColorMap)undoRedoObject.getNewValue();      populateField(newValue);    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public final double[] smooth(final double[] xval,final double[] yval) throws MathIllegalArgumentException {  if (xval.length != yval.length) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,xval.length,yval.length);  }  final double[] unitWeights=new double[xval.length];  Arrays.fill(unitWeights,1.0);  return smooth(xval,yval,unitWeights);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuff_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200507,skilltarget,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_KILLMSG(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300739,value0,value1);}  }
class C{  protected BoardEditTopicQuery title(String value){  return unsafeParam("title",value);}  }
class C{  private void mapRelativeToAbsolute(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=srcPoints[i * 2 + 0] * mImageBounds.width() + mImageBounds.left;    destPoints[i * 2 + 1]=srcPoints[i * 2 + 1] * mImageBounds.height() + mImageBounds.top;  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void testCycleDateStartTimerEvent() throws Exception {  Clock previousClock=processEngineConfiguration.getClock();  Clock testClock=new DefaultClockImpl();  processEngineConfiguration.setClock(testClock);  Calendar calendar=Calendar.getInstance();  calendar.set(2025,Calendar.DECEMBER,10,0,0,0);  testClock.setCurrentTime(calendar.getTime());  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.testCycleDateStartTimerEvent.bpmn20.xml").deploy();  assertEquals(1,repositoryService.createProcessDefinitionQuery().count());  List<Job> jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  Calendar dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,11,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  List<ProcessInstance> processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  List<Task> tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  moveByMinutes((9 * 60 * 24));  executeJobExecutorForTime(10000,200);  assertEquals(1,managementService.createTimerJobQuery().count());  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(9,processInstances.size());  tasks=taskService.createTaskQuery().list();  assertEquals(9,tasks.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,20,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  moveByMinutes(60 * 24);  try {    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(2000,200);  } catch (  Exception e) {    fail("Because the maximum number of repeats is reached no other jobs are created");  }  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(10,processInstances.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(0,jobs.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(10,tasks.size());  int timerFiredCount=0;  List<ActivitiEvent> eventsReceived=listener.getEventsReceived();  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.TIMER_FIRED.equals(eventReceived.getType())) {      timerFiredCount++;    }  }  int eventCreatedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_CREATED.equals(eventReceived.getType())) {      eventCreatedCount++;    }  }  int eventDeletedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_DELETED.equals(eventReceived.getType())) {      eventDeletedCount++;    }  }  assertEquals(10,timerFiredCount);  assertEquals(20,eventCreatedCount);  assertEquals(20,eventDeletedCount);  for (  ProcessInstance processInstance : processInstances) {    tasks=taskService.createTaskQuery().processInstanceId(processInstance.getProcessInstanceId()).list();    Task task=tasks.get(0);    assertEquals("Task A",task.getName());    assertEquals(1,tasks.size());    taskService.complete(task.getId());  }  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(0,jobs.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  listener.clearEventsReceived();  processEngineConfiguration.setClock(previousClock);  repositoryService.deleteDeployment(repositoryService.createDeploymentQuery().singleResult().getId(),true);}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  @Override public StyledLayerDescriptor create(){  StyledLayerDescriptor sld=DefaultSymbols.createNewPolygon();  return sld;}  }
class C{  public boolean isOpen(){  return ((getData() & 0x4) == 0x4);}  }
class C{  public static boolean isAnnotationPresent(Method method,Class<? extends Annotation> annotationType){  return org.springframework.core.annotation.AnnotationUtils.findAnnotation(method,annotationType) != null;}  }
class C{  public int paramStatus(int param){  return internalParamStatus(cacheNode(new PurityParamNode(param)));}  }
class C{  public String parse(File file,JSON m){  try {    Template template=getTemplate(file);    if (template != null) {      StringWriter w=new StringWriter();      BufferedWriter writer=new BufferedWriter(w);      template.merge(new VelocityContext(m),writer);      writer.flush();      writer.close();      return w.toString();    }  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return null;}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(PokestopsEvent event){  setPokestopsMarkers(event);}  }
class C{  private boolean supportsControllableClass(ZWaveNode node){  for (  CommandClass commandClass : controllableClasses) {    if (node.supportsCommandClass(commandClass) == true) {      return true;    }  }  return false;}  }
class C{  public Vector3f subtractLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x-=vec.x;  y-=vec.y;  z-=vec.z;  return this;}  }
class C{  public Builder controller(LogController val){  controller=val;  return this;}  }
class C{  public PhotoDetailsObject(Photo p){  service=PhotoService.getService();  photo=p;}  }
class C{  public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {float q=(float)(elapsedTime) / duration;if (mInterpolator == null) {  q=viscousFluid(q);} else {  q=mInterpolator.getInterpolation(q);}mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  public short[][] action_table(){  return _action_table;}  }
class C{  public final boolean isVisible(){  return visible;}  }
class C{  private void mapSharedElement(List<String> names,Map<String,View> sharedElements,View view){  String transitionName=view.getTransitionName();  names.add(transitionName);  sharedElements.put(transitionName,view);}  }
