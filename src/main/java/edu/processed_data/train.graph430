class C{  @Override public void endWindow(){  if (doubleAverage.isConnected()) {    doubleAverage.emit(average);  }  if (floatAverage.isConnected()) {    floatAverage.emit((float)average);  }  if (longAverage.isConnected()) {    longAverage.emit((long)average);  }  if (integerAverage.isConnected()) {    integerAverage.emit((int)average);  }}  }
class C{  public boolean isActiveSiteHealthy(){  DrUtil drUtil=new DrUtil(_coordinator);  String activeSiteId=drUtil.getActiveSite().getUuid();  boolean isActiveSiteLeaderAlive=false;  boolean isActiveSiteStable=false;  SiteInfo siteInfo=_coordinator.getTargetInfo(SiteInfo.class);  if (StringUtils.isEmpty(activeSiteId) && SiteInfo.DR_OP_SWITCHOVER.equals(siteInfo.getActionRequired())) {    activeSiteId=siteInfo.getTargetSiteUUID();  }  if (StringUtils.isEmpty(activeSiteId) || drUtil.getLocalSite().getUuid().equals(activeSiteId)) {    _log.info("Can't find active site id or local site is active, set active healthy as false");  } else {    Site activeSite=drUtil.getSiteFromLocalVdc(activeSiteId);    isActiveSiteLeaderAlive=isZKLeaderAlive(activeSite);    isActiveSiteStable=isActiveSiteStable(activeSite);    _log.info("Active site ZK is alive: {}, active site stable is :{}",isActiveSiteLeaderAlive,isActiveSiteStable);  }  return isActiveSiteLeaderAlive && isActiveSiteStable;}  }
class C{  private static int nextKeyIndex(int i,int len){  return (i + 2 < len ? i + 2 : 0);}  }
class C{  private String parseDBName(){  String dbname;  final int dbnameStartPosition=dbURL.lastIndexOf(File.separator);  final int dburlLength=dbURL.length();  dbname=dbURL.substring(dbnameStartPosition + 1,dburlLength);  return dbname;}  }
class C{  private static JobReturn performTransform(JobConf job,FileSystem fs,String inputPath,int ncols,CSVFileFormatProperties prop,String specWithIDs,String tfMtdPath,boolean isApply,MatrixObject result,String headerLine,boolean isBB,boolean isCSV) throws IOException, DMLRuntimeException, IllegalArgumentException, JSONException {  String[] na=TfUtils.parseNAStrings(prop.getNAStrings());  JSONObject spec=new JSONObject(specWithIDs);  TfUtils agents=new TfUtils(headerLine,prop.hasHeader(),prop.getDelim(),na,spec,ncols,tfMtdPath,null,null);  MVImputeAgent _mia=agents.getMVImputeAgent();  RecodeAgent _ra=agents.getRecodeAgent();  BinAgent _ba=agents.getBinAgent();  DummycodeAgent _da=agents.getDummycodeAgent();  ArrayList<Path> files=collectInputFiles(inputPath,fs);  String line=null;  String[] words=null;  int numColumnsTf=0;  BufferedReader br=null;  if (!isApply) {    for (int fileNo=0; fileNo < files.size(); fileNo++) {      br=new BufferedReader(new InputStreamReader(fs.open(files.get(fileNo))));      if (fileNo == 0 && prop.hasHeader())       br.readLine();      line=null;      while ((line=br.readLine()) != null) {        agents.prepareTfMtd(line);      }      br.close();    }    if (agents.getValid() == 0)     throw new DMLRuntimeException(ERROR_MSG_ZERO_ROWS);    _mia.outputTransformationMetadata(tfMtdPath,fs,agents);    _ba.outputTransformationMetadata(tfMtdPath,fs,agents);    _ra.outputTransformationMetadata(tfMtdPath,fs,agents);    Path tmp=new Path(tfMtdPath);    _mia.loadTxMtd(job,fs,tmp,agents);    _ba.loadTxMtd(job,fs,tmp,agents);    _da.setRecodeMapsCP(_ra.getCPRecodeMaps());    _da.setNumBins(_ba.getColList(),_ba.getNumBins());    _da.loadTxMtd(job,fs,tmp,agents);  } else {    int rows[]=countNumRows(files,prop,fs,agents);    agents.setTotal(rows[0]);    agents.setValid(rows[1]);    if (agents.getValid() == 0)     throw new DMLRuntimeException("Number of rows in the transformed output (potentially, after ommitting the ones with missing values) is zero. Cannot proceed.");    Path tmp=new Path(tfMtdPath);    _mia.loadTxMtd(job,fs,tmp,agents);    _ra.loadTxMtd(job,fs,tmp,agents);    _ba.loadTxMtd(job,fs,tmp,agents);    _da.setRecodeMaps(_ra.getRecodeMaps());    _da.setNumBins(_ba.getColList(),_ba.getNumBins());    _da.loadTxMtd(job,fs,tmp,agents);  }  numColumnsTf=getNumColumnsTf(fs,headerLine,prop.getDelim(),tfMtdPath);  MapReduceTool.deleteFileIfExistOnHDFS(result.getFileName());  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(fs.create(new Path(result.getFileName()),true)));  StringBuilder sb=new StringBuilder();  MatrixBlock mb=null;  if (isBB) {    int estNNZ=(int)agents.getValid() * ncols;    mb=new MatrixBlock((int)agents.getValid(),numColumnsTf,estNNZ);    if (mb.isInSparseFormat())     mb.allocateSparseRowsBlock(); else     mb.allocateDenseBlock();  }  int rowID=0;  for (int fileNo=0; fileNo < files.size(); fileNo++) {    br=new BufferedReader(new InputStreamReader(fs.open(files.get(fileNo))));    if (fileNo == 0) {      if (prop.hasHeader())       br.readLine();      String dcdHeader=_da.constructDummycodedHeader(headerLine,agents.getDelim());      numColumnsTf=_da.genDcdMapsAndColTypes(fs,tfMtdPath,ncols,agents);      generateHeaderFiles(fs,tfMtdPath,headerLine,dcdHeader);    }    line=null;    while ((line=br.readLine()) != null) {      words=agents.getWords(line);      if (!agents.omit(words)) {        words=agents.apply(words);        if (isCSV) {          out.write(agents.checkAndPrepOutputString(words,sb));          out.write("\n");        }        if (isBB) {          agents.check(words);          for (int c=0; c < words.length; c++) {            if (words[c] == null || words[c].isEmpty())             ; else             mb.appendValue(rowID,c,UtilFunctions.parseToDouble(words[c]));          }        }        rowID++;      }    }    br.close();  }  out.close();  if (mb != null) {    mb.recomputeNonZeros();    mb.examSparsity();    result.acquireModify(mb);    result.release();    result.exportData();  }  MatrixCharacteristics mc=new MatrixCharacteristics(agents.getValid(),numColumnsTf,(int)result.getNumRowsPerBlock(),(int)result.getNumColumnsPerBlock());  JobReturn ret=new JobReturn(new MatrixCharacteristics[]{mc},true);  return ret;}  }
class C{  public FunctionInvocationTargetException(String msg,DistributedMember id){  super(msg);  this.id=id;}  }
class C{  @Override public final boolean cancellationRequested(){  cancellationWasRequested=true;  return false;}  }
class C{  public boolean isCompleted(){  return STATE_Completed.equals(m_state);}  }
class C{  public static FlightStick logitechAttack3D(int port){  Joystick joystick=new Joystick(port);  return FlightStick.create(null,null,null,null,null,null,null,null,null);}  }
class C{  public int size(){  return eigenPairs.length;}  }
class C{  public static ResourceLoader createMavenArtifactLoader(final MavenResolver mavenResolver,final String name) throws IOException {  File fp=mavenResolver.resolveJarArtifact(ArtifactCoordinates.fromString(name));  if (fp == null)   return null;  JarFile jarFile=new JarFile(fp,true);  return ResourceLoaders.createJarResourceLoader(name,jarFile);}  }
class C{  public void agregarPermisosRol(String idRol,String[] permisoRol){  iniciarTransaccion();  RolVO rol=getRol(idRol);  permisoRolDBEntity.agregarPermisosRol(rol,permisoRol);  commit();}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Property<?>>T newValueOf(T property){  return (T)property.as(NEW,property.getExpression());}  }
class C{  @SuppressWarnings("unchecked") public <T extends WebMediumConfig>T fetch(T config){  config.addCredentials(this);  String xml=POST(this.url + "/check-" + config.getType(),config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=(T)config.getClass().newInstance();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public static int[] ArrayQuicksort(int array[]){  int i;  System.out.println("Values Before the sort:\n");  for (i=0; i < array.length; i++)   System.out.print(array[i] + "  ");  System.out.println();  quick_srt(array,0,array.length - 1);  System.out.print("Values after the sort:\n");  for (i=0; i < array.length; i++)   System.out.print(array[i] + "  ");  return array;}  }
class C{  public void not(){  for (int i=0; i < bits.length; i++) {    bits[i]^=MASK;  }}  }
class C{  public static <T>Set<T> union(Collection<? extends T> a,Collection<? extends T> b){  Set<T> u=newLinkedHashSet(a);  u.addAll(b);  return u;}  }
class C{  private static boolean verifyMagicNumber(LittleEndianDataInputStream ledis) throws IOException {  int sig1=ledis.readInt();  int sig2=ledis.readInt();  return sig1 == SIG1 && sig2 == SIG2;}  }
class C{  public static double log1p(final double value){  if (USE_JDK_MATH) {    return Math.log1p(value);  }  if (value > -1.0) {    if (value == Double.POSITIVE_INFINITY) {      return Double.POSITIVE_INFINITY;    }    final double valuePlusOne=1.0 + value;    if (valuePlusOne == 1.0) {      return value;    } else     if (Math.abs(value) < 0.15) {      final double z=value / (value + 2.0);      final double z2=z * z;      return z * (2 + z2 * (2.0 / 3 + z2 * (2.0 / 5 + z2 * (2.0 / 7 + z2 * (2.0 / 9 + z2 * (2.0 / 11))))));    }    final int valuePlusOneBitsHi=(int)(Double.doubleToRawLongBits(valuePlusOne) >> 32) & 0x7FFFFFFF;    final int valuePlusOneExp=(valuePlusOneBitsHi >> 20) - MAX_DOUBLE_EXPONENT;    final int xIndex=valuePlusOneBitsHi << 12 >>> 32 - LOG_BITS;    double z=valuePlusOne * twoPowNormalOrSubnormal(-valuePlusOneExp) * MyTLog.logXInvTab[xIndex] - 1;    z*=1 - z * (1.0 / 2 - z * (1.0 / 3));    return valuePlusOneExp * LOG_2 + MyTLog.logXLogTab[xIndex] + (z + (value - (valuePlusOne - 1)) / valuePlusOne);  } else   if (value == -1.0) {    return Double.NEGATIVE_INFINITY;  } else {    return Double.NaN;  }}  }
class C{  public PDFGlyph(char src,String name,Path shape,PointF advance){  this.shape=shape;  this.advance=advance;  this.src=src;  this.name=name;}  }
class C{  private boolean createIndex(String index,Map<String,Object> defaultSettings){  IndicesExistsResponse res=client.admin().indices().prepareExists(index).execute().actionGet();  boolean created=false;  if (!res.isExists()) {    CreateIndexRequestBuilder req=client.admin().indices().prepareCreate(index);    req.setSettings(defaultSettings);    created=req.execute().actionGet().isAcknowledged();    if (!created) {      throw new RuntimeException("Could not create index [" + index + "]");    }  }  return created;}  }
class C{  protected static TransactionInfo currentTransactionInfo() throws NoTransactionException {  return transactionInfoHolder.get();}  }
class C{  @Nullable public static <K,V>V addIfAbsent(Map<K,V> map,@Nullable K key,@Nullable V v){  A.notNull(map,"map");  try {    if (!map.containsKey(key)) {      map.put(key,v);      return v;    } else     return map.get(key);  } catch (  Exception e) {    throw wrap(e);  }}  }
class C{  private boolean processSingleEvent(){  if (eventBuffer.remaining() < 20) {    return false;  }  try {    eventBuffer.getInt();    final int bufferLength=eventBuffer.getInt();    final int padding=(4 - bufferLength) & 3;    if (eventBuffer.remaining() < bufferLength + padding + 12)     return false;    final byte[] buffer=new byte[bufferLength];    eventBuffer.get(buffer);    eventBuffer.position(eventBuffer.position() + padding);    int eventCount=0;    if (bufferLength > 4) {      eventCount=iscVaxInteger(buffer,bufferLength - 4,4);    }    eventBuffer.getLong();    int eventId=eventBuffer.getInt();    log.debug(String.format("Received event id %d, eventCount %d",eventId,eventCount));    channelListenerDispatcher.eventReceived(this,new AsynchronousChannelListener.Event(eventId,eventCount));    return true;  } catch (  BufferUnderflowException ex) {    return false;  }}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  protected Node newNode(){  return new SVGOMUseShadowRoot();}  }
class C{  private boolean checkIfInitiatorForRPBeforeMigration(Initiator initiator){  if (initiator == null) {    return false;  }  boolean isRP=true;  if (NullColumnValueGetter.isNullValue(initiator.getHostName()) || !NullColumnValueGetter.isNullURI(initiator.getHost())) {    isRP=false;  }  log.debug("RP initiator? " + (isRP ? "Yes!" : "No!"));  return isRP;}  }
class C{  public static void longToBytesLittleEndian(final long i,final byte[] dest,final int offset){  dest[offset]=(byte)(i & 0xFF);  dest[offset + 1]=(byte)((i >> 8) & 0xFF);  dest[offset + 2]=(byte)((i >> 16) & 0xFF);  dest[offset + 3]=(byte)((i >> 24) & 0xFF);  dest[offset + 4]=(byte)((i >> 32) & 0xFF);  dest[offset + 5]=(byte)((i >> 40) & 0xFF);  dest[offset + 6]=(byte)((i >> 48) & 0xFF);  dest[offset + 7]=(byte)((i >> 56) & 0xFF);}  }
class C{  public boolean tryAcquire(){  return (Counter.tryAcquire(1));}  }
class C{  public void retrieveFiltersFromEventHandlers(){  clearFilters();  for (Iterator<OMEventHandler> it=eventHandlers.iterator(); it.hasNext(); ) {    OMEventHandler meh=it.next();    if (logger.isLoggable(Level.FINE)) {      logger.fine("Checking out OM event handler " + meh.getClass().getName());    }    List filters=meh.getFilters();    if (filters != null && !filters.isEmpty()) {      for (Iterator it2=filters.iterator(); it2.hasNext(); ) {        Object filterObj=it2.next();        if (filterObj instanceof String) {          Boolean val=meh.getFilterState((String)filterObj);          addFilter((String)filterObj,val != null ? val : Boolean.FALSE);        }      }    }  }  rebuildFilterInterface();}  }
class C{  public static void write(int x1,int y1,String stuff,String font,int just,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.TEXT_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_TEXT);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeByte(just);  properties.setProperty(LPC_LINKTEXTSTRING,stuff);  properties.setProperty(LPC_LINKTEXTFONT,font);  properties.write(dos);}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] dist=new double[num_classes];  double[] currentData=new double[numFeatures];  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    currentData[j]=instance.value(num_classes + j);    currentData[num_features + j]=1 - currentData[j];  }  SortPair2[] sortedActivations=ARTActivateCategories(currentData);  java.util.Arrays.sort(sortedActivations);  double s0=sortedActivations[0].getValue();  double diff_act=s0 - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(s0 - sortedActivations[i].getValue()) / s0;    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  best_matches[0]=s0;  for (int i=1; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  if (this.activity_report.compareTo("") != 0) {    try {      if (writer == null) {        writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.activity_report),"utf-8"));        writer.write("Neurons");        print_weights(writer);      }      writer.write("this.nrinstclassified " + this.nrinstclassified + "\n");    } catch (    IOException ex) {    }  }  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    if (this.activity_report.compareTo("") != 0) {      try {        writer.write(this.neuronsactivity[i] + "," + this.neuronsactivated[i]+ ";");      } catch (      IOException ex) {      }    }    for (int j=0; j < num_classes; j++) {      ranking[j]=ranking[j] + best_matches[i] * weightsB[currentCategory][j];    }  }  this.nrinstclassified+=1;  if (this.activity_report.compareTo("") != 0) {    try {      writer.write(";;");      for (int i=1; i < sortedActivations.length; i++) {        writer.write(sortedActivations[i].getOriginalIndex() + ":" + String.format("%.6f",sortedActivations[i].getValue())+ ",");      }      writer.write("\n");    } catch (    IOException ex) {    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  protected void discoverIp4Interface(Host host,IpInterface ipInterface,HostVirtualNic nic){  setHostInterfaceRegistrationStatus(ipInterface,host);  ipInterface.setHost(host.getId());  ipInterface.setProtocol(Protocol.IPV4.name());  ipInterface.setIpAddress(nic.getSpec().getIp().getIpAddress());  ipInterface.setNetmask(nic.getSpec().getIp().getSubnetMask());  ipInterface.setIsManualCreation(false);  save(ipInterface);}  }
class C{  public InternalVirtualArrayServiceClient(){}  }
class C{  public NotificationChain basicSetBindingPattern(BindingPattern newBindingPattern,NotificationChain msgs){  BindingPattern oldBindingPattern=bindingPattern;  bindingPattern=newBindingPattern;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CATCH_VARIABLE__BINDING_PATTERN,oldBindingPattern,newBindingPattern);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean hasField(final int number){  return fields.containsKey(number);}  }
class C{  ICC_ProfileRGB(ProfileDeferralInfo pdi){  super(pdi);}  }
class C{  public static byte[] keyGenPrivate(byte[] randomBytes){  if (randomBytes.length < 32) {    throw new RuntimeException("Random bytes too small");  }  byte[] privateKey=new byte[32];  Digest sha256=Crypto.createSHA256();  sha256.update(randomBytes,0,randomBytes.length);  sha256.doFinal(privateKey,0);  privateKey[0]&=248;  privateKey[31]&=127;  privateKey[31]|=64;  return privateKey;}  }
class C{  public static BlazeGraphEmbedded open(final File file){  final String journal=file.getAbsolutePath();  final BigdataSailRepository repo=BasicRepositoryProvider.open(journal);  final BlazeGraphEmbedded graph=BlazeGraphEmbedded.open(repo);  return graph;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public HeaderCard(String key,float value,String comment) throws HeaderCardException {  this(key,dblString(floatToBigDecimal(value),spaceAvailableForValue(key)),comment,false,false);}  }
class C{  public boolean hasData(){  return data != null;}  }
class C{  public static Container leftShift(Container self,Component c){  self.add(c);  return self;}  }
class C{  public static boolean isExpressionTree(Tree tree){  return tree instanceof ExpressionTree;}  }
class C{  public Object next(){  if (pos < size)   return Array.get(array,pos++);  throw new NoSuchElementException("No more elements: " + pos + " / "+ size);}  }
class C{  public XmlTextBuilder(){  m_textBuf=new StringBuffer(DEFAULT_CAPACITY);  m_auxBuf=new StringBuffer(AUX_CAPACITY);}  }
class C{  public void report(Tree tree) throws IOException {  System.err.println("making report");  SimpleTree sTree=new SimpleTree(tree);  System.out.println("Estimated marginal posterior by condiational clade frequencies:");  System.out.println(getTreeProbability(sTree));  System.out.flush();}  }
class C{  public CollectionId(String replicaSetName,String dbName,String collectionName){  this.replicaSetName=replicaSetName;  this.dbName=dbName;  this.name=collectionName;  assert this.replicaSetName != null;  assert this.dbName != null;  assert this.name != null;}  }
class C{  public void testParenthesisShould() throws IOException {  BooleanQuery.Builder q3=new BooleanQuery.Builder();  q3.add(new BooleanClause(t1,BooleanClause.Occur.SHOULD));  q3.add(new BooleanClause(t2,BooleanClause.Occur.SHOULD));  BooleanQuery.Builder q4=new BooleanQuery.Builder();  q4.add(new BooleanClause(c1,BooleanClause.Occur.SHOULD));  q4.add(new BooleanClause(c2,BooleanClause.Occur.SHOULD));  BooleanQuery.Builder q2=new BooleanQuery.Builder();  q2.add(q3.build(),BooleanClause.Occur.SHOULD);  q2.add(q4.build(),BooleanClause.Occur.SHOULD);  assertEquals(1,search(q2.build()));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Object wrap(Object value,Class type){  if (type == Void.TYPE)   return Primitive.VOID;  if (value == null)   return Primitive.NULL;  if (value instanceof Boolean)   return ((Boolean)value).booleanValue() ? Primitive.TRUE : Primitive.FALSE;  if (type.isPrimitive() && isWrapperType(value.getClass()))   return new Primitive(value);  return value;}  }
class C{  public NamedIcon(NamedIcon pOld,Component comp){  this(pOld.mURL,pOld.mName);  setLoad(pOld._deg,pOld._scale,comp);  setRotation(pOld.mRotation,comp);}  }
class C{  public UseEvent(Entity entity,Vector3D position,Direction side,Vector3D hit){  this.entity=entity;  this.position=position;  this.side=side;  this.hit=hit;}  }
class C{  public void testBug71084() throws Exception {  createTable("testBug71084","(id INT, dt DATE)");  Properties connProps=new Properties();  connProps.setProperty("cacheDefaultTimezone","false");  testBug71084AssertCase(connProps,"GMT+2","GMT+6",null,"1998-05-21","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-6","GMT+2",null,"1998-05-21","1998-05-21","1998-05-21 0:00:00");  connProps.setProperty("useLegacyDatetimeCode","false");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-21 22:59:59","1998-05-22","1998-05-20 23:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-21 23:00:00","1998-05-23","1998-05-21 23:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-22 22:59:59","1998-05-23","1998-05-21 23:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-22 23:00:00","1998-05-24","1998-05-22 23:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-20 23:59:59","1998-05-21","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-21 0:00:00","1998-05-22","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-21 23:59:59","1998-05-22","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-22 0:00:00","1998-05-23","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-20 23:59:59","1998-05-21","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-21 0:00:00","1998-05-22","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-21 23:59:59","1998-05-22","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-22 0:00:00","1998-05-23","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-21 22:59:59","1998-05-22","1998-05-20 23:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-21 23:00:00","1998-05-23","1998-05-21 23:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-22 22:59:59","1998-05-23","1998-05-21 23:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-22 23:00:00","1998-05-24","1998-05-22 23:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-21 21:59:59","1998-05-21","1998-05-20 22:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-21 22:00:00","1998-05-22","1998-05-21 22:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-22 21:59:59","1998-05-22","1998-05-21 22:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-22 22:00:00","1998-05-23","1998-05-22 22:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-21 1:59:59","1998-05-20","1998-05-20 2:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-21 2:00:00","1998-05-21","1998-05-21 2:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-22 1:59:59","1998-05-21","1998-05-21 2:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-22 2:00:00","1998-05-22","1998-05-22 2:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-21 1:59:59","1998-05-20","1998-05-20 2:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-21 2:00:00","1998-05-21","1998-05-21 2:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-22 1:59:59","1998-05-21","1998-05-21 2:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-22 2:00:00","1998-05-22","1998-05-22 2:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-21 21:59:59","1998-05-21","1998-05-20 22:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-21 22:00:00","1998-05-22","1998-05-21 22:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-22 21:59:59","1998-05-22","1998-05-21 22:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-22 22:00:00","1998-05-23","1998-05-22 22:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-20 23:59:59","1998-05-19","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-21 0:00:00","1998-05-20","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-21 23:59:59","1998-05-20","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-22 0:00:00","1998-05-21","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-21 0:59:59","1998-05-19","1998-05-20 1:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-21 1:00:00","1998-05-20","1998-05-21 1:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-22 0:59:59","1998-05-20","1998-05-21 1:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-22 1:00:00","1998-05-21","1998-05-22 1:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-21 0:59:59","1998-05-19","1998-05-20 1:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-21 1:00:00","1998-05-20","1998-05-21 1:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-22 0:59:59","1998-05-20","1998-05-21 1:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-22 1:00:00","1998-05-21","1998-05-22 1:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-20 23:59:59","1998-05-19","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-21 0:00:00","1998-05-20","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-21 23:59:59","1998-05-20","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-22 0:00:00","1998-05-21","1998-05-22 0:00:00");  connProps.remove("useLegacyDatetimeCode");  connProps.setProperty("useTimezone","true");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-20 23:59:59","1998-05-21","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-21 0:00:00","1998-05-22","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-21 23:59:59","1998-05-22","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-13","GMT+12","GMT+11","1998-05-22 0:00:00","1998-05-23","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-21 22:59:59","1998-05-22","1998-05-20 23:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-21 23:00:00","1998-05-23","1998-05-21 23:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-22 22:59:59","1998-05-23","1998-05-21 23:00:00");  testBug71084AssertCase(connProps,"GMT-10","GMT+14","GMT+15","1998-05-22 23:00:00","1998-05-24","1998-05-22 23:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-21 1:59:59","1998-05-20","1998-05-20 2:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-21 2:00:00","1998-05-21","1998-05-21 2:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-22 1:59:59","1998-05-21","1998-05-21 2:00:00");  testBug71084AssertCase(connProps,"GMT+8","GMT+10","GMT+6","1998-05-22 2:00:00","1998-05-22","1998-05-22 2:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+7","GMT+7","GMT+7","1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-21 21:59:59","1998-05-21","1998-05-20 22:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-21 22:00:00","1998-05-22","1998-05-21 22:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-22 21:59:59","1998-05-22","1998-05-21 22:00:00");  testBug71084AssertCase(connProps,"GMT-9","GMT-11","GMT-7","1998-05-22 22:00:00","1998-05-23","1998-05-22 22:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-21 0:59:59","1998-05-19","1998-05-20 1:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-21 1:00:00","1998-05-20","1998-05-21 1:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-22 0:59:59","1998-05-20","1998-05-21 1:00:00");  testBug71084AssertCase(connProps,"GMT+12","GMT-12","GMT-13","1998-05-22 1:00:00","1998-05-21","1998-05-22 1:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-20 23:59:59","1998-05-20","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-21 0:00:00","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-21 23:59:59","1998-05-21","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12",null,"1998-05-22 0:00:00","1998-05-22","1998-05-22 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-20 23:59:59","1998-05-19","1998-05-20 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-21 0:00:00","1998-05-20","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-21 23:59:59","1998-05-20","1998-05-21 0:00:00");  testBug71084AssertCase(connProps,"GMT+13","GMT-12","GMT-11","1998-05-22 0:00:00","1998-05-21","1998-05-22 0:00:00");  connProps.remove("useTimezone");}  }
class C{  public final String stringVal(){  if (!hasSpecial) {    int offset=np + 1;    if (offset < 0) {      throw new IllegalStateException();    }    if (offset > buf.length - sp) {      throw new IllegalStateException();    }    return new String(buf,offset,sp);  } else {    return new String(sbuf,0,sp);  }}  }
class C{  private static void d_uacmean(double[] a,double[] c,int m,int n,KahanObject kbuff,Mean kmean,int rl,int ru){  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n)   meanAgg(a,c,aix,0,n,kbuff,kmean);}  }
class C{  private void canEditCheck(){  canEdit=!profile.isCommonProfile();  if (!canEdit) {    addButton.setEnabled(false);    removeButton.setEnabled(false);  }}  }
class C{  public QueueBuilder<T> withMaxMemory(long maxMemory){  if (memoryManager != null) {    throw new IllegalStateException("Can not change max memory after the memory manager initalized");  }  this.maxMemory=maxMemory;  return this;}  }
class C{  public byte[] engineCanonicalizeXPathNodeSet(Set<Node> xpathNodeSet,String inclusiveNamespaces) throws CanonicalizationException {  throw new CanonicalizationException("c14n.Canonicalizer.UnsupportedOperation");}  }
class C{  public HuffmanCodec(final int[] frequency){  this(frequency,new DecoderInputs());}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public long remove(int offset){  long old=get(offset);  remove(offset,1);  return old;}  }
class C{  @Override public synchronized long skip(long n) throws IOException {  long skipped=0;  while (n > 0) {    int len=(int)Math.min(n,SKIP_ARRAY.length);    int r=read(SKIP_ARRAY,0,len);    if (r <= 0) {      break;    }    n-=r;    skipped+=r;  }  return skipped;}  }
class C{  @Override public int hashCode(){  int hashcode=((negated) ? -2 : 1) * labelTemplate.hashCode() ^ (new Boolean(exclusive)).hashCode() ^ priority ^ valueTemplate.hashCode();  return hashcode;}  }
class C{  void addAssumptionsToComposite(Vector<NodeRepresentation> nodeRepVector,Composite composite){  Composite comp;  GridData gridData;  GridLayout gridLayout;  Label assumeLabel;  int assumeWidth=0;  for (int i=0; i < nodeRepVector.size(); i++) {    for (int j=0; j < nodeRepVector.elementAt(i).nodeText.length; j++) {      assumeWidth=Math.max(assumeWidth,nodeRepVector.elementAt(i).nodeText[j].length());    }  }  boolean haveContextAssumpsToDisplay=false;  for (int i=0; i < state.numberOfContextAssumptions; i++) {    if (displayContextAssump(nodeRepVector.elementAt(i),i)) {      haveContextAssumpsToDisplay=true;    }  }  if (haveContextAssumpsToDisplay) {    gridData=new GridData();    gridData.horizontalSpan=3;    assumeLabel=new Label(composite,SWT.NONE);    assumeLabel.setText("CONTEXT ASSUMPTIONS");    assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));    assumeLabel.setLayoutData(gridData);  }  for (int i=0; i < nodeRepVector.size(); i++) {    if (i == state.numberOfContextAssumptions) {      gridData=new GridData();      gridData.horizontalSpan=3;      assumeLabel=new Label(composite,SWT.NONE);      assumeLabel.setText("ASSUME");      assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));      assumeLabel.setLayoutData(gridData);    }    if (i == state.firstAddedAssumption) {      gridData=new GridData();      gridData.horizontalSpan=3;      assumeLabel=new Label(composite,SWT.NONE);      assumeLabel.setText("    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");      assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));      assumeLabel.setLayoutData(gridData);    }    NodeRepresentation aRep=nodeRepVector.elementAt(i);    if (((i >= state.numberOfContextAssumptions) && displayNonContextAssump(aRep,i)) || ((i < state.numberOfContextAssumptions) && displayContextAssump(aRep,i))) {      if (aRep.nodeType != NodeRepresentation.OR_DECOMP) {        String labelText=null;        boolean enable=true;        if ((aRep.semanticNode != null) && (aRep.semanticNode.getKind() == ASTConstants.OpApplKind)) {switch (aRep.nodeSubtype) {case NodeRepresentation.AND_TYPE:            labelText="/\\";          enable=!state.splitChosen();        break;case NodeRepresentation.OR_TYPE:case NodeRepresentation.SQSUB_TYPE:      labelText="\\/";    enable=!state.splitChosen();  break;case NodeRepresentation.EXISTS_TYPE:labelText="\\E";break;default :labelText=null;}}if (labelText != null) {Button button=new Button(composite,SWT.PUSH);setupActionButton(button,nodeRepVector.elementAt(i),labelText);if (!enable) {button.setEnabled(false);}} else {comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);assumeLabel=new Label(comp,SWT.NONE);assumeLabel.setText("  ");gridData=new GridData();gridData.horizontalIndent=25;comp.setLayoutData(gridData);}comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);comp.setSize(0,5);comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(3,false);comp.setLayout(gridLayout);assumeLabel=new Label(comp,SWT.BORDER);String text=stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());while (nodeRepVector.elementAt(i).onSameLineAsNext) {i++;text=text + ", " + stringArrayToString(nodeRepVector.elementAt(i).nodeText);}assumeLabel.setText(text);assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));gridData=new GridData();gridData.horizontalIndent=0;gridData.verticalAlignment=SWT.TOP;gridData.horizontalAlignment=SWT.LEFT;assumeLabel.setLayoutData(gridData);} else {Button goalButton=new Button(composite,SWT.PUSH);setupActionButton(goalButton,aRep,"P");gridData=new GridData();gridData.horizontalIndent=15;goalButton.setLayoutData(gridData);goalButton.setFont(JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);Composite inner=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(2,false);inner.setLayout(gridLayout);for (int j=0; j < aRep.children.size(); j++) {assumeLabel=new Label(inner,SWT.NONE);assumeLabel.setText("CASE");assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));Composite caseComp=new Composite(inner,SWT.BORDER);gridLayout=new GridLayout(3,false);caseComp.setLayout(gridLayout);addCaseToComposite(aRep.children.elementAt(j),caseComp);gridData=new GridData();gridData.verticalAlignment=SWT.TOP;caseComp.setLayoutData(gridData);}}}}}  }
class C{  void removeBlockObjectsFromPathParamMap(Collection<URI> blockObjectURIs,ExportGroup exportGroup){  for (  URI blockObjectURI : blockObjectURIs) {    String pathParamId=exportGroup.getPathParameters().get(blockObjectURI.toString());    if (pathParamId == null)     continue;    exportGroup.removeFromPathParameters(blockObjectURI);    if (!exportGroup.getPathParameters().containsValue(pathParamId)) {      URI pathParamURI=URI.create(pathParamId);      ExportPathParams pathParam=_dbClient.queryObject(ExportPathParams.class,pathParamURI);      if (pathParam != null) {        _dbClient.markForDeletion(pathParam);      }    }  }}  }
class C{  public static double binomial(long n,long k){  if (k < 0)   return 0;  if (k == 0 || k == n)   return 1;  if (k == 1 || k == n - 1)   return n;  if (n > k) {    int max=longFactorials.length + doubleFactorials.length;    if (n < max) {      double n_fac=factorial((int)n);      double k_fac=factorial((int)k);      double n_minus_k_fac=factorial((int)(n - k));      double nk=n_minus_k_fac * k_fac;      if (nk != Double.POSITIVE_INFINITY) {        return n_fac / nk;      }    }    if (k > n / 2)     k=n - k;  }  long a=n - k + 1;  long b=1;  double binomial=1;  for (long i=k; i-- > 0; ) {    binomial*=((double)(a++)) / (b++);  }  return binomial;}  }
class C{  public void visitOuterClass(String owner,String name,String desc){  if (cv != null) {    cv.visitOuterClass(owner,name,desc);  }}  }
class C{  public void saveToPictures(final String folderName,final String fileName,final GPUImage.OnPictureSavedListener listener){  mGPUImage.saveToPictures(folderName,fileName,listener);}  }
class C{  public InferTypeArgumentsDescriptor(){  super(IJavaRefactorings.INFER_TYPE_ARGUMENTS);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.238 -0500",hash_original_method="E84A510853D9F9659F34649D5E631E14",hash_generated_method="27B627B6254ECDC4FF6A66989D9E021E") private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public static void save(final Window parent,final String text){  final LastDirFileChooser chooser=new LastDirFileChooser();  if (chooser.showSaveDialog(parent) == JFileChooser.APPROVE_OPTION) {    final File outputFile=chooser.getSelectedFile();    if (outputFile != null) {      try {        FileUtils.writeTextFile(outputFile,text);      } catch (      final IOException e) {        CUtilityFunctions.logException(e);      }    }  }}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  private void unregisterReceiver(){  if (mContext == null) {    Log.e(TAG,"Can't unregister gps status updates: context is null");    return;  }  try {    mContext.unregisterReceiver(mReceiver);  } catch (  final IllegalArgumentException e) {  }  EventBus.getDefault().unregister(this);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 14:{        addToken(Token.PREPROCESSOR);      }case 24:    break;case 6:{    addNullToken();    return firstToken;  }case 25:break;case 18:{addToken(Token.LITERAL_CHAR);}case 26:break;case 9:{addToken(Token.WHITESPACE);}case 27:break;case 16:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 28:break;case 17:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 29:break;case 19:{addToken(Token.RESERVED_WORD);}case 30:break;case 8:{addToken(Token.SEPARATOR);}case 31:break;case 1:{addToken(Token.IDENTIFIER);}case 32:break;case 13:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 33:break;case 20:{addToken(Token.FUNCTION);}case 34:break;case 21:{addToken(Token.DATA_TYPE);}case 35:break;case 2:{addToken(Token.ERROR_IDENTIFIER);}case 36:break;case 22:{addToken(Token.LITERAL_BOOLEAN);}case 37:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 38:break;case 23:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 39:break;case 15:{addToken(Token.ERROR_NUMBER_FORMAT);}case 40:break;case 7:{start=zzMarkedPos - 1;yybegin(STRING);}case 41:break;case 3:{start=zzMarkedPos - 1;yybegin(EOL_COMMENT);}case 42:break;case 5:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 43:break;case 4:{addToken(Token.OPERATOR);}case 44:break;case 12:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 45:break;case 10:{}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 467:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 468:break;case YYINITIAL:{addNullToken();return firstToken;}case 469:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public String toFormattedString(){  return "CUDA p2p tokensr:\n    " + createString("\n    ");}  }
class C{  public void paintSearchButtonForeground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintForeground(context,g,x,y,w,h,null);}  }
class C{  public void sendMessage(int what,int arg1,int arg2){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  sendMessage(msg);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MTree[");  sb.append("AD_Tree_ID=").append(getAD_Tree_ID()).append(", Name=").append(getName());  sb.append("]");  return sb.toString();}  }
class C{  public void testWithType() throws Exception {  ObjectMapper m=new ObjectMapper();  Object ob=new Impl("abc","def");  JavaType type=TypeFactory.defaultInstance().uncheckedSimpleType(Base.class);  assertEquals("do({\"a\":\"abc\"})",serializeAsString(m,new JSONPObject("do",ob,type)));}  }
class C{  public Boolean isMigrateCache(){  return migrateCache;}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintTabbedPaneTabAreaBackground(context,g,x,y,w,h);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static Revisions commit(String urlhash){  return transact(urlhash,State.INVENTORY,State.ARCHIVE);}  }
class C{  @Override public String toString(){  return "cudaPos[" + "x=" + x + ","+ "y="+ y+ ","+ "z="+ z+ "]";}  }
class C{  public void addTypeSupertype(final TypeVariable target,final AnnotatedTypeMirror subtype,Set<AnnotationMirror> hierarchies){  final Supertypes supertypes=targetToRecords.get(target).supertypes;  final Set<AnnotationMirror> supertypeTops=supertypes.types.get(subtype);  if (supertypeTops == null) {    supertypes.types.put(subtype,new HashSet<>(hierarchies));  } else {    supertypeTops.addAll(hierarchies);  }}  }
class C{  public static final int monthLength(int year,int month){  return MONTH_LENGTH[month + (isLeapYear(year) ? 12 : 0)];}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outputData=null;  WhiteboxRaster DEMGrid=null;  String inputFilesString=null;  String suffix="no OTOs";  String[] gridFiles;  WhiteboxRaster output=null;  int row, col;  int progress=0;  double noData=0;  int rows, cols;  int a, b;  double z1, z2, w1;  double[][] subGridDEM;  int colOffset, rowOffset;  boolean flag;  double minEdgeSlope=0;  int loopNum=0;  int numCellsChanged=0;  int prevNumCellsChanged=0;  boolean[] activeTile=new boolean[1];  int[][] tileCorners=new int[2][1];  boolean didSomethingHappen=false;  int currentTile, numTiles=0;  long numValidCells=0;  double cumulativeChange=0;  boolean iterateRemoveOTOs=false;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    suffix=args[1];    OTOMaxSize=(int)(Math.round(Double.valueOf(args[2])));    int halfOTOMaxSize=OTOMaxSize / 2;    double[] data=new double[OTOMaxSize + 2];    minEdgeSlope=Double.valueOf(args[3]);    iterateRemoveOTOs=Boolean.parseBoolean(args[4]);    if (suffix.equals("")) {      suffix="no OTOs";    }    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    if (OTOMaxSize < 5) {      OTOMaxSize=5;    }    gridFiles=inputFilesString.split(";");    int numPointFiles=gridFiles.length;    for (int j=0; j < numPointFiles; j++) {      inputHeader=gridFiles[j];      outputHeader=gridFiles[j].replace(".dep"," " + suffix + ".dep");      outputData=outputHeader.replace(".dep",".tas");      String tempHeaderFile=inputHeader.replace(".dep","_temp.dep");      String tempDataFile=inputHeader.replace(".dep","_temp.tas");      FileUtilities.copyFile(new File(inputHeader),new File(tempHeaderFile));      FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(tempDataFile));      do {        numValidCells=0;        loopNum++;        prevNumCellsChanged=numCellsChanged;        numCellsChanged=0;        DEMGrid=new WhiteboxRaster(tempHeaderFile,"rw");        rows=DEMGrid.getNumberRows();        cols=DEMGrid.getNumberColumns();        noData=DEMGrid.getNoDataValue();        double resolution=(DEMGrid.getCellSizeX() + DEMGrid.getCellSizeY()) / 2;        if (loopNum == 1) {          minOTOHeight=Math.tan(minEdgeSlope * Math.PI / 180) * resolution;          if (minOTOHeight < 0) {            minOTOHeight=0;          }        }        cumulativeChange=0;        updateProgress("DEM " + (j + 1) + " Loop number "+ loopNum+ ":",-1);        if (loopNum == 1) {          FileUtilities.copyFile(new File(tempHeaderFile),new File(outputHeader));          FileUtilities.copyFile(new File(tempDataFile),new File(outputData));          output=new WhiteboxRaster(outputHeader,"rw");          colOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(0,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(0,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(0,col,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(rows - 1,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(rows - 1,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(rows - 1,col,z2);              }              a++;            }            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              flag=false;            }          } while (flag);          rowOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,0);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,0);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,0,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,cols - 1);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,cols - 1);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,cols - 1,z2);              }              a++;            }            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }          } while (flag);          colOffset=-1;          rowOffset=-1;          flag=true;          numTiles=-1;          do {            numTiles++;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);          activeTile=new boolean[numTiles + 1];          tileCorners=new int[2][numTiles + 1];          colOffset=-1;          rowOffset=-1;          flag=true;          currentTile=-1;          do {            currentTile++;            activeTile[currentTile]=true;            tileCorners[0][currentTile]=colOffset;            tileCorners[1][currentTile]=rowOffset;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);        } else {          output=new WhiteboxRaster(outputHeader,"rw");        }        colOffset=-1;        rowOffset=-1;        flag=true;        currentTile=-1;        do {          currentTile++;          if (activeTile[currentTile]) {            subGridDEM=new double[OTOMaxSize + 2][OTOMaxSize + 2];            for (row=0; row < OTOMaxSize + 2; row++) {              subGridDEM[row][0]=noData;              subGridDEM[row][OTOMaxSize + 1]=noData;            }            for (col=0; col < OTOMaxSize + 2; col++) {              subGridDEM[0][col]=noData;              subGridDEM[OTOMaxSize + 1][col]=noData;            }            numValidCells=0;            a=0;            b=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                subGridDEM[b + 1][a + 1]=DEMGrid.getValue(row,col);                if (subGridDEM[b + 1][a + 1] != noData) {                  numValidCells++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (numValidCells > 3) {              cleavePeaks2D(subGridDEM,noData);            }            a=0;            b=0;            didSomethingHappen=false;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                z2=subGridDEM[b + 1][a + 1];                w1=output.getValue(row,col);                if (z2 < w1) {                  output.setValue(row,col,z2);                  cumulativeChange+=(w1 - z2) * (w1 - z2);                  didSomethingHappen=true;                  numCellsChanged++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (!didSomethingHappen) {              activeTile[currentTile]=false;            }          }          colOffset+=halfOTOMaxSize;          if (colOffset > cols - 1) {            colOffset=-1;            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }            if (cancelOp) {              cancelOperation();              return;            }          }          progress=(int)(currentTile * 100d / (numTiles - 1d));          updateProgress((int)progress);        } while (flag);        DEMGrid.close();        output.close();        if (numCellsChanged > 0) {          FileUtilities.copyFile(new File(outputHeader),new File(tempHeaderFile));          FileUtilities.copyFile(new File(outputHeader.replace(".dep",".tas")),new File(tempDataFile));        }      } while ((numCellsChanged > 0) && (numCellsChanged != prevNumCellsChanged) && (loopNum < 501)&& (cumulativeChange > 0.5)&& iterateRemoveOTOs);      if ((new File(tempHeaderFile)).exists()) {        (new File(tempHeaderFile)).delete();      }      if ((new File(tempDataFile)).exists()) {        (new File(tempDataFile)).delete();      }    }    returnData(gridFiles[0].replace(".dep"," " + suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DPolicyMappings(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DPolicyMappings.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  @Override public void draw(final Graphics g,final int x,final int y){  g.drawImage(image,x,y,null);}  }
class C{  public void mouseReleased(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled())   return;  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  manager.processMouseEvent(e);  if (!e.isConsumed())   manager.clearSelectedPath();}  }
class C{  public int currentSegment(float[] coords){  if (index >= poly.npoints) {    return SEG_CLOSE;  }  coords[0]=poly.xpoints[index];  coords[1]=poly.ypoints[index];  if (transform != null) {    transform.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  public void testEmptyBuffer() throws IOException {  FileInputStream fis=new FileInputStream(emptyFile);  FileChannel fc=fis.getChannel();  MappedByteBuffer mmb=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());  assertNotNull("MappedByteBuffer created from empty file should not be null",mmb);  int len=mmb.capacity();  assertEquals("MappedByteBuffer created from empty file should have 0 capacity",0,len);  assertFalse("MappedByteBuffer from empty file shouldn't be backed by an array ",mmb.hasArray());  try {    byte b=mmb.get();    fail("Calling MappedByteBuffer.get() on empty buffer should throw a BufferUnderflowException");  } catch (  BufferUnderflowException e) {  }  try {    mmb=fc.map(FileChannel.MapMode.READ_WRITE,0,fc.size());    fail("Expected NonWritableChannelException to be thrown");  } catch (  NonWritableChannelException e) {  }  try {    mmb=fc.map(FileChannel.MapMode.PRIVATE,0,fc.size());    fail("Expected NonWritableChannelException to be thrown");  } catch (  NonWritableChannelException e) {  }  fc.close();}  }
class C{  public SimpleNamespace(String prefix,String name){  setPrefix(prefix);  setName(name);}  }
class C{  protected boolean contains(final Entity entity){  return ((getZone() == entity.getZone()) && getArea().intersects(entity.getArea()));}  }
class C{  private UserTransactionServerImp(){  name_="UserTransactionServer";  exported_=false;}  }
class C{  private Key backupKeyToKey(String backupKey) throws InvalidBackupException {  try {    Key key=Key.parseFrom(Base64.decode(backupKey,Base64.DEFAULT));    if (key.checksum != checkKey(key)) {      throw new InvalidBackupException("invalid key read from stream" + backupKey);    }    return key;  } catch (  InvalidProtocolBufferNanoException|IllegalArgumentException e) {    throw new InvalidBackupException(e);  }}  }
class C{  public static void perspectiveM(double[] m,int offset,double fovy,double aspect,double zNear,double zFar){  double f=1.0 / Math.tan(fovy * (Math.PI / 360.0));  double rangeReciprocal=1.0 / (zNear - zFar);  m[offset + 0]=f / aspect;  m[offset + 1]=0.0;  m[offset + 2]=0.0;  m[offset + 3]=0.0;  m[offset + 4]=0.0;  m[offset + 5]=f;  m[offset + 6]=0.0;  m[offset + 7]=0.0;  m[offset + 8]=0.0;  m[offset + 9]=0.0;  m[offset + 10]=(zFar + zNear) * rangeReciprocal;  m[offset + 11]=-1.0;  m[offset + 12]=0.0;  m[offset + 13]=0.0;  m[offset + 14]=2.0 * zFar * zNear* rangeReciprocal;  m[offset + 15]=0.0;}  }
class C{  public String toString(){  return getClass().getName() + "[Az = " + Az+ ", c="+ c+ ", source="+ source+ "]";}  }
class C{  private static AssertionError fail(String msg,@Nullable Throwable cause){  AssertionError e=new AssertionError(msg);  if (cause != null)   e.initCause(cause);  throw e;}  }
class C{  public synchronized void addGraphListener(GraphListener cl){  m_graphListeners.addElement(cl);}  }
class C{  public void initManagement(boolean managingNodeFirst) throws Exception {  if (managingNodeFirst) {    createManagementCache(managingNode);    startManagingNode(managingNode);    for (    VM vm : managedNodeList) {      createCache(vm);    }  } else {    for (    VM vm : managedNodeList) {      createCache(vm);    }    createManagementCache(managingNode);    startManagingNode(managingNode);  }}  }
class C{  private static int gallopLeft(Object key,Object[] a,int base,int len,int hint,Comparator c){  assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  public final void assertKeysMonotonic(){  for (int i=1; i < nkeys; i++) {    if (BytesUtil.compareBytes(keys[i],keys[i - 1]) <= 0) {      throw new AssertionError("Keys out of order at index=" + i + ", keys="+ this.toString());    }  }  for (int i=nkeys; i < keys.length; i++) {    if (keys[i] != null) {      throw new AssertionError("Expecting null at index=" + i);    }  }}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public synchronized static void addNewComp(String component){  if (skinSpecs == null) {    boolean rv=initSkinXMLHandler();    if (!rv) {      return;    }  }  SkinSpecification newSpec=new SkinSpecification();  skinSpecs.put(component,newSpec);}  }
class C{  @Override public void resetMediaPlayer(){  if (SHOW_LOGS)   Logger.v(TAG,">> resetMediaPlayer, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.pauseQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"resetMediaPlayer, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.clearAllPendingMessages(TAG);  resetReleaseClearCurrentPlayer();  mPlayerHandler.resumeQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< resetMediaPlayer, mCurrentPlayerState " + mCurrentPlayerState);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public static CoreReflectionFactory make(GenericDeclaration d,Scope s){  return new CoreReflectionFactory(d,s);}  }
class C{  public MorphosyntacticTagsAttributeImpl(){}  }
class C{  @Override public String generateStart(){  return "";}  }
class C{  private void nameZone(NetworkFCZoneInfo fabricInfo,String systemType,String hostName,String initiatorport,StoragePort port,boolean lsanZone){  if (fabricInfo.getEndPoints().size() < 2) {    throw NetworkDeviceControllerException.exceptions.nameZoneNotEnoughEndPoints();  }  URI arrayUri=port.getStorageDevice();  StorageSystem array=_dbClient.queryObject(StorageSystem.class,arrayUri);  if (array == null) {    throw NetworkDeviceControllerException.exceptions.portStorageDeviceNotFound(port.getStorageDevice().toString(),port.getLabel());  }  Initiator initiator=NetworkUtil.findInitiatorInDB(initiatorport,_dbClient);  DataSource dataSource=dataSourceFactory.createZoneNameDataSource(hostName,initiator,port,fabricInfo.getFabricId(),array);  if (array.getSystemType().equals(DiscoveredDataObject.Type.vplex.name())) {    dataSource.addProperty(CustomConfigConstants.ARRAY_PORT_NAME,getVPlexPortName(port));    dataSource.addProperty(CustomConfigConstants.ARRAY_SERIAL_NUMBER,getVPlexClusterSerialNumber(port));  }  String resolvedZoneName=customConfigHandler.resolve(CustomConfigConstants.ZONE_MASK_NAME,systemType,dataSource);  validateZoneNameLength(resolvedZoneName,lsanZone,systemType);  String zoneName=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.ZONE_MASK_NAME,systemType,dataSource);  if (lsanZone && DiscoveredDataObject.Type.brocade.name().equals(systemType)) {    zoneName=LSAN + zoneName;  }  fabricInfo.setZoneName(zoneName);}  }
class C{  public boolean isTentative(){  return is(TENTATIVE);}  }
class C{  @Override boolean isNotTabu(Operation oOperation){  for (int iTabu=0; iTabu < m_nTabuList; iTabu++) {    if (oOperation.equals(m_oTabuList[iTabu])) {      return false;    }  }  return true;}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  static void test(File f,int nThreads) throws Exception {  try (FileChannel fc=new RandomAccessFile(f,"rwd").getChannel()){    Thread[] threads=new Thread[nThreads];    for (int i=0; i < nThreads; i++) {      boolean interruptible=(i == 0);      ReaderWriter task=new ReaderWriter(fc,interruptible);      Thread t=new Thread(task);      t.start();      threads[i]=t;    }    Thread.sleep(500 + rand.nextInt(1000));    while (fc.isOpen()) {      threads[0].interrupt();      Thread.sleep(rand.nextInt(50));    }    for (int i=0; i < nThreads; i++) {      threads[i].join();    }  } }  }
class C{  public void markAsApplicationClass(){  setFlag(APPLICATION_CLASS,true);}  }
class C{  private void loadTile(String imagePath,int x,int y,int zoomLevel,Projection proj,OMGraphicList list){  CacheObject ret=load(imagePath,x,y,zoomLevel,proj);  if (ret == null) {    ret=getEmptyTile(imagePath,x,y,zoomLevel,proj);  }  if (ret != null) {    replaceLeastUsed(ret);    OMGraphic raster=(OMGraphic)ret.obj;    if (raster != null) {      raster.generate(proj);      list.add(raster);      if (logger.isLoggable(Level.FINE)) {        raster.putAttribute(OMGraphic.TOOLTIP,imagePath);      }    }  }}  }
class C{  public static int number(){  return _all.size();}  }
class C{  public void makeDynamic(PropertyExpression pexp){  makeDynamic(pexp,ClassHelper.OBJECT_TYPE);}  }
class C{  public NameUsage(PsiElement element,PsiElement culprit,String name,boolean prefix){  myElement=element;  myCulprit=culprit;  myName=name;  myIsPrefix=prefix;}  }
class C{  private void ensureAbsolute(String locationProperty){  String propertyValue=System.getProperty(locationProperty);  if (propertyValue == null)   return;  URL locationURL=null;  try {    locationURL=new URL(propertyValue);  } catch (  MalformedURLException e) {    return;  }  String locationPath=locationURL.getPath();  if (locationPath.startsWith("/"))   return;  URL installURL=getInstallLocation();  if (!locationURL.getProtocol().equals(installURL.getProtocol()))   return;  try {    URL absoluteURL=new URL(installURL,locationPath);    System.getProperties().put(locationProperty,absoluteURL.toExternalForm());  } catch (  MalformedURLException e) {  }}  }
class C{  public BinaryIntLiteral createBinaryIntLiteral(){  BinaryIntLiteralImpl binaryIntLiteral=new BinaryIntLiteralImpl();  return binaryIntLiteral;}  }
class C{  public static void main(String args[]){  ExampleApplet example=new ExampleApplet();  JFrame frame=new JFrame();  frame.getContentPane().add(example);  frame.setSize(800,600);  frame.setVisible(true);}  }
class C{  Builder addLenient(String name,String value){  namesAndValues.add(name);  namesAndValues.add(value.trim());  return this;}  }
class C{  public void put(String key,ArrayList<String> value){  Iterator<Pair<String,ArrayList<String>>> it=store.iterator();  while (it.hasNext()) {    Pair<String,ArrayList<String>> pair=it.next();    if (key.equals(pair.first)) {      pair.second=value;      return;    }  }  store.add(new Pair<>(key,value));}  }
class C{  public void registerForceGenerator(ForceGenerator forceGenerator){  this.forceGenerators.add(forceGenerator);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","njci");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void callArgVisitors(XPathVisitor visitor){  for (int i=0; i < m_argVec.size(); i++) {    Expression exp=(Expression)m_argVec.elementAt(i);    exp.callVisitors(new ArgExtOwner(exp),visitor);  }}  }
class C{  public Cubert(){  super("3RT",1);}  }
class C{  private void initializeViews(){  mUrlEditText=(EditText)findViewById(R.id.url);  mAddFab=(FloatingActionButton)findViewById(R.id.add_fab);  mDownloadFab=(FloatingActionButton)findViewById(R.id.download_fab);  mUrlEditText.setVisibility(View.INVISIBLE);  mDownloadFab.setVisibility(View.INVISIBLE);  mUrlEditText.setOnEditorActionListener(null);}  }
class C{  @Override public void connect() throws IOException {  List<Proxy> proxyList=null;  if (proxy != null) {    proxyList=new ArrayList<Proxy>(1);    proxyList.add(proxy);  } else {    ProxySelector selector=ProxySelector.getDefault();    if (selector != null) {      proxyList=selector.select(uri);    }  }  if (proxyList == null) {    currentProxy=null;    connectInternal();  } else {    ProxySelector selector=ProxySelector.getDefault();    Iterator<Proxy> iter=proxyList.iterator();    boolean connectOK=false;    String failureReason="";    while (iter.hasNext() && !connectOK) {      currentProxy=iter.next();      try {        connectInternal();        connectOK=true;      } catch (      IOException ioe) {        failureReason=ioe.getLocalizedMessage();        if (selector != null && Proxy.NO_PROXY != currentProxy) {          selector.connectFailed(uri,currentProxy.address(),ioe);        }      }    }    if (!connectOK) {      throw new IOException("Unable to connect to server: " + failureReason);    }  }}  }
class C{  private static void short_to_bytes(int anUnsignedShort,byte[] buf,int offset){  buf[offset]=(byte)((anUnsignedShort & 0xFF00) >>> 8);  buf[offset + 1]=(byte)((anUnsignedShort & 0x00FF));}  }
class C{  public static void register(){  CommandCenter.register(LANGUAGE,new LanguageAction());}  }
class C{  protected int onMeasureDimension(int min,int measureSpec){switch (MeasureSpec.getMode(measureSpec)) {case MeasureSpec.EXACTLY:    return MeasureSpec.getSize(measureSpec);case MeasureSpec.AT_MOST:  return Math.min(min,MeasureSpec.getSize(measureSpec));case MeasureSpec.UNSPECIFIED:default :return min;}}  }
class C{  public CallIdHeader createCallIdHeader(String callId) throws ParseException {  if (callId == null)   throw new NullPointerException("null arg callId");  CallID c=new CallID();  c.setCallId(callId);  return c;}  }
class C{  private static final String truncateNameTo45Bytes(String name){  String ret=name;  if (ret.getBytes().length > MAX_BYTES) {    ret=name.substring(0,MAX_BYTES);  }  if (ret.getBytes().length > MAX_BYTES) {    ret=name.substring(0,MAX_BYTES / 2);  }  return ret;}  }
class C{  public Configurator<?,C> createConfigurator(Bean<C> bean,PropertyDescriptor property){  Adjustable adj=property.getWriteMethod().getAnnotation(Adjustable.class);  if (property.getPropertyType().equals(String.class)) {    String[] choices=adj.choices();    if (choices.length > 0) {      if (!adj.forceComboBox() && choices.length <= 3) {        return new SmallStringSelectionConfigurator<C>(bean,property);      }      return new SingleStringSelectionConfigurator<C>(bean,property);    }    if (!adj.stringSelectionProvided()) {      return new FreeStringConfigurator<C>(bean,property);    }    return new SingleStringSelectionConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(String[].class)) {    return new StringSetConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(Integer.TYPE)) {    return new NumberConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(Boolean.TYPE)) {    if (adj.button()) {      return new ButtonConfigurator<C>(bean,property);    }    return new BooleanConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(Font.class)) {    return new FontConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(File.class)) {    return new FileConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(File[].class)) {    return new FileSetConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(KeyStroke.class)) {    return new KeyStrokeConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(Color.class)) {    return new ColorConfigurator<C>(bean,property);  }  if (property.getPropertyType().equals(Date.class)) {    return new DateConfigurator<C>(bean,property);  }  throw new IllegalArgumentException("cannot create configurator for " + "property type " + property.getPropertyType().getSimpleName());}  }
class C{  public SingleNddCeddImageSearcher(IndexReader reader,boolean approximate,Class descriptorClass,String fieldName){  this.halfDimensions=approximate;  this.descriptorClass=descriptorClass;  this.fieldName=fieldName;  init(reader);}  }
class C{  protected QuotaInfo doUpdateQuota(URI id,QuotaUpdateParam quota){  return client.put(QuotaInfo.class,quota,getQuotaUrl(),id);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public void rearrangeChildren(){  rearrangeChildren(-1);}  }
class C{  public static void main(String[] argv){  runFilter(new RemoveRange(),argv);}  }
class C{  public static int powerOfTwoCeiling(int value){  int pow=(int)Math.floor(Math.log(value) / Math.log(2));  return 1 << pow;}  }
class C{  public AttributeValueFilter(Attribute attribute,int comparisonType,String value){  addCondition(attribute,comparisonType,value);}  }
class C{  public SpecificMessage(byte[] a,int l){  super(a,l);}  }
class C{  public PowerContainerVMSelectionPolicyCor(final PowerContainerVmSelectionPolicy fallbackPolicy){  super();  setFallbackPolicy(fallbackPolicy);}  }
class C{  public static BufferedImage makeImageSquare(BufferedImage image){  int max=0;  max=CommonUtil.max(image.getWidth(),image.getHeight());  return cropImage(image,max,max);}  }
class C{  protected int encryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int result[]=new int[4];  int A=BytesTo32bits(src,srcIndex);  int B=BytesTo32bits(src,srcIndex + 4);  int C=BytesTo32bits(src,srcIndex + 8);  int D=BytesTo32bits(src,srcIndex + 12);  CAST_Encipher(A,B,C,D,result);  Bits32ToBytes(result[0],dst,dstIndex);  Bits32ToBytes(result[1],dst,dstIndex + 4);  Bits32ToBytes(result[2],dst,dstIndex + 8);  Bits32ToBytes(result[3],dst,dstIndex + 12);  return BLOCK_SIZE;}  }
class C{  protected static void checkRectangularShape(ObjectMatrix2D[][] array){  int columns=-1;  for (int row=array.length; --row >= 0; ) {    if (array[row] != null) {      if (columns == -1)       columns=array[row].length;      if (array[row].length != columns)       throw new IllegalArgumentException("All rows of array must have same number of columns.");    }  }}  }
class C{  public boolean isSocialBookmarkEnabled(){  return socialBookmarkEnabled;}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? NO_POSITION : recyclerView.getChildPosition(child);}  }
class C{  public SingleValue(double value){  this.value=value;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @Override public V waitForValue() throws ExecutionException {  if (computedReference == UNSET) {    boolean interrupted=false;    try {synchronized (this) {        while (computedReference == UNSET) {          try {            wait();          } catch (          InterruptedException ie) {            interrupted=true;          }        }      }    }  finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  return computedReference.waitForValue();}  }
class C{  public void reset(){  lastDepth=BIG;}  }
class C{  public String calculateSelection(IMiniTable miniTable){  m_noSelected=0;  m_sum=new BigDecimal(0.0);  int rows=miniTable.getRowCount();  if (rows > 0) {    for (int i=0; i < rows; i++) {      IDColumn id=(IDColumn)miniTable.getValueAt(i,0);      BigDecimal amt=(BigDecimal)miniTable.getValueAt(i,10);      if (id.isSelected()) {        amt=(BigDecimal)miniTable.getValueAt(i,10);        if (amt != null)         m_sum=m_sum.add(amt);        m_noSelected++;      }    }  }  BigDecimal remaining=m_bankBalance.subtract(m_sum);  StringBuffer info=new StringBuffer();  info.append(m_noSelected).append(" ").append(Msg.getMsg(Env.getCtx(),"Selected")).append(" - ");  info.append(m_format.format(m_sum)).append(", ");  info.append(Msg.getMsg(Env.getCtx(),"Remaining")).append(" ").append(m_format.format(remaining));  return info.toString();}  }
class C{  public PowerShell configuration(Map<String,String> config){  try {    this.maxThreads=Integer.valueOf((config != null && config.get("maxThreads") != null) ? config.get("maxThreads") : PowerShellConfig.getConfig().getProperty("maxThreads"));    this.waitPause=Integer.valueOf((config != null && config.get("waitPause") != null) ? config.get("waitPause") : PowerShellConfig.getConfig().getProperty("waitPause"));    this.maxWait=Long.valueOf((config != null && config.get("maxWait") != null) ? config.get("maxWait") : PowerShellConfig.getConfig().getProperty("maxWait"));    this.remoteMode=Boolean.valueOf((config != null && config.get("remoteMode") != null) ? config.get("remoteMode") : PowerShellConfig.getConfig().getProperty("remoteMode"));  } catch (  NumberFormatException nfe) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Could not read configuration. Use default values.",nfe);  }  return this;}  }
class C{  public NodesStatsRequest indices(boolean indices){  if (indices) {    this.indices.all();  } else {    this.indices.clear();  }  return this;}  }
class C{  public boolean removeBuddy(String name){  return remove("buddies",name) != null;}  }
class C{  public String paramValue(){  return paramValue;}  }
class C{  public void checkAdmin(){  if (!admin) {    throw DbException.get(ErrorCode.ADMIN_RIGHTS_REQUIRED);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (list_1: ");  result.append(list_1);  result.append(", name_1: ");  result.append(name_1);  result.append(", type_1: ");  result.append(type_1);  result.append(')');  return result.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean applyOptions() throws IOException {  if (RANDOM_PORT.isSelected()) {    ConnectionSettings.MANUAL_PORT_RANGE.setValue(false);  } else {    int forcedTcpPort=PORT_0_FIELD.getValue();    int forcedUdpPort=PORT_1_FIELD.getValue();    if (!NetworkUtils.isValidPort(forcedTcpPort)) {      GUIMediator.showError(I18n.tr("You must enter a port between 1 and 65535 when manually forcing port."));      throw new IOException("bad port: " + forcedTcpPort);    }    if (!NetworkUtils.isValidPort(forcedUdpPort)) {      GUIMediator.showError(I18n.tr("You must enter a port between 1 and 65535 when manually forcing port."));      throw new IOException("bad port: " + forcedUdpPort);    }    if (forcedTcpPort < 0 || forcedUdpPort < forcedTcpPort) {      GUIMediator.showError(I18n.tr("You must enter a valid port range."));      throw new IOException("bad port: " + forcedUdpPort);    }    ConnectionSettings.MANUAL_PORT_RANGE.setValue(true);    ConnectionSettings.PORT_RANGE_0.setValue(forcedTcpPort);    ConnectionSettings.PORT_RANGE_1.setValue(forcedUdpPort);  }  return true;}  }
class C{  public int read() throws IOException {  long next=pointer + 1;  long pos=readUntil(next);  if (pos >= next) {    byte[] buf=(byte[])data.get((int)(pointer >> SECTOR_SHIFT));    return buf[(int)(pointer++ & SECTOR_MASK)] & 0xff;  } else {    return -1;  }}  }
class C{  public ASTDummy(Token t){  super(t);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public OFMatchReconcile(){  ofmWithSwDpid=new OFMatchWithSwDpid();  rcAction=ReconcileAction.NO_CHANGE;  cntx=new FloodlightContext();}  }
class C{  @Override public void flush() throws IOException {  flushBytes(true);}  }
class C{  public void updateVehicleStatistics(){  this.updateVehicleStatistics(null);}  }
class C{  public VOServiceDetails publishAndActivateMarketableService(VendorData vendorData,VOMarketplace marketplace,VOService service) throws Exception {  container.login(vendorData.getAdminKey(),vendorData.getAdminUserRoles());  publishToMarketplace(service,true,marketplace);  return activateMarketableService(service);}  }
class C{  public void test_encodeLjava_lang_StringLjava_lang_String() throws Exception {  try {    URLEncoder.encode("str","unknown_enc");    fail("Assert 0: Should throw UEE for invalid encoding");  } catch (  UnsupportedEncodingException e) {  }catch (  UnsupportedCharsetException e) {  }  try {    URLEncoder.encode(null,"harmony");    fail("NullPointerException expected");  } catch (  NullPointerException expected) {  }catch (  UnsupportedCharsetException expected) {  }}  }
class C{  private void queryDatastores(final State currentState){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(DatastoreService.State.class));  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  if (currentState.idsToMatch != null && currentState.idsToMatch.size() > 0) {    addIdsQuery(querySpecification,currentState);    querySpecification.query.addBooleanClause(kindClause);  } else   if (currentState.typeToMatch != null && currentState.typeToMatch.trim().length() > 0) {    addTypesQuery(querySpecification,currentState);    querySpecification.query.addBooleanClause(kindClause);  } else {    querySpecification.query=kindClause;  }  sendRequest(HostUtils.getCloudStoreHelper(this).createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true)).setCompletion(null));}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  int width=widthSize;  int maxLength=getMaxTextLength();  if (maxLength > 0) {    float textWidth=FloatMath.ceil(Layout.getDesiredWidth("0",itemsPaint));    itemsWidth=(int)(maxLength * textWidth);  } else {    itemsWidth=0;  }  itemsWidth+=ADDITIONAL_ITEMS_SPACE;  labelWidth=0;  if (label != null && label.length() > 0) {    labelWidth=(int)FloatMath.ceil(Layout.getDesiredWidth(label,valuePaint));  }  boolean recalculate=false;  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;    recalculate=true;  } else {    width=itemsWidth + labelWidth + 2 * PADDING;    if (labelWidth > 0) {      width+=LABEL_OFFSET;    }    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;      recalculate=true;    }  }  if (recalculate) {    int pureWidth=width - LABEL_OFFSET - 2 * PADDING;    if (pureWidth <= 0) {      itemsWidth=labelWidth=0;    }    if (labelWidth > 0) {      double newWidthItems=(double)itemsWidth * pureWidth / (itemsWidth + labelWidth);      itemsWidth=(int)newWidthItems;      labelWidth=pureWidth - itemsWidth;    } else {      itemsWidth=pureWidth + LABEL_OFFSET;    }  }  if (itemsWidth > 0) {    createLayouts(itemsWidth,labelWidth);  }  return width;}  }
class C{  public Model doWork(ExampleSet exampleSet) throws OperatorException {  exampleSetInput.receive(exampleSet);  doWork();  return modelOutput.getData(Model.class);}  }
class C{  public void testDefaultConfiguration(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_INITIAL_CTX_FACTORY);  assertEquals(connectionOptions.get(Context.PROVIDER_URL),MEJBMBeanServerConnectionFactory.DEFAULT_PROVIDER_URI);  assertNull(connectionOptions.get(Context.SECURITY_PRINCIPAL));  assertNull(connectionOptions.get(Context.SECURITY_CREDENTIALS));  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertNull(factory.username);  assertNull(factory.password);  assertNull(factory.jaasFile);  assertNull(factory.jaasEntry);}  }
class C{  public static StormTopology buildDevicesTopology(){  String deviceID="device-id";  String count="count";  Fields allFields=new Fields(deviceID,count);  RandomNumberGeneratorSpout spout=new RandomNumberGeneratorSpout(allFields,10,1000);  TridentTopology topology=new TridentTopology();  Stream devicesStream=topology.newStream("devicegen-spout",spout).each(allFields,new Debug("##### devices"));  devicesStream.minBy(deviceID).each(allFields,new Debug("#### device with min id"));  devicesStream.maxBy(count).each(allFields,new Debug("#### device with max count"));  return topology.build();}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  private static boolean checkOffset(String value,int offset,char expected){  return (offset < value.length()) && (value.charAt(offset) == expected);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:36.506 -0500",hash_original_method="FCBDEF350302C6CDE69DD815C0835AC5",hash_generated_method="562958D2A357BCA14CEF45418F0B26BF") private void shrinkAndStretchColumns(int widthMeasureSpec){  if (mMaxWidths == null) {    return;  }  int totalWidth=0;  for (  int width : mMaxWidths) {    totalWidth+=width;  }  int size=MeasureSpec.getSize(widthMeasureSpec) - mPaddingLeft - mPaddingRight;  if ((totalWidth > size) && (mShrinkAllColumns || mShrinkableColumns.size() > 0)) {    mutateColumnsWidth(mShrinkableColumns,mShrinkAllColumns,size,totalWidth);  } else   if ((totalWidth < size) && (mStretchAllColumns || mStretchableColumns.size() > 0)) {    mutateColumnsWidth(mStretchableColumns,mStretchAllColumns,size,totalWidth);  }}  }
class C{  public static String describeResource(Configuration conf,String name){  URL url=conf.getResource(name);  return String.format("Resource %s found at %s",name,url);}  }
class C{  private void backupReplay(){  final Path backupFolder=Env.APP_SETTINGS.get(Settings.REPLAY_BACKUP_FOLDER);  if (!Files.exists(backupFolder))   try {    Files.createDirectories(backupFolder);  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to create replay backup folder: " + backupFolder,ie);    Sound.play(Sounds.FAILED_TO_SAVE_REPLAY);    return;  }  Path targetFile=null;  try {    final TemplateEngine engine=new TemplateEngine(Env.APP_SETTINGS.get(Settings.REPLAY_BACKUP_TEMPLATE));    targetFile=engine.apply(file,backupFolder);  } catch (  final InvalidTemplateException ite) {    Env.LOGGER.debug("Failed to apply Replay Backup Template: template is invalid!",ite);  }  if (targetFile == null)   targetFile=backupFolder.resolve(DEFAULT_REPLAY_NAME_FORMAT.format(new Date()));  targetFile=Utils.uniqueFile(targetFile);  if (!Files.exists(targetFile.getParent()))   try {    Files.createDirectories(targetFile.getParent());  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to create subfolders, replay backup will probably fail: " + targetFile.getParent(),ie);  }  try {    Files.copy(file,targetFile,StandardCopyOption.COPY_ATTRIBUTES);  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to backup new replay: \"" + file + "\" to \""+ targetFile+ "\"",ie);    Sound.play(Sounds.FAILED_TO_SAVE_REPLAY);    return;  }  Env.LOGGER.info("New replay saved: " + targetFile);  if (Env.APP_SETTINGS.get(Settings.PLAY_REPLAY_SAVED_VOICE))   Sound.play(Sounds.REPLAY_SAVED);  if (Env.APP_SETTINGS.get(Settings.DELETE_BACKED_UP_REPLAYS))   try {    Files.delete(file);    file=targetFile;  } catch (  final IOException ie) {    Env.LOGGER.error("Failed to delete successfully backed up new replay: " + file,ie);  }}  }
class C{  public final double doOperation(){  for (int n=0; n < howMany; ++n) {    int index=MathUtils.nextInt(parameter.getSize());    if (parameter instanceof Parameter) {      int newValue=MathUtils.nextInt(upper - lower + 1) + lower;      ((Parameter)parameter).setParameterValue(index,newValue);    } else {      int upper=((Variable<Integer>)parameter).getBounds().getUpperLimit(index);      int lower=((Variable<Integer>)parameter).getBounds().getLowerLimit(index);      int newValue=MathUtils.nextInt(upper - lower + 1) + lower;      ((Variable<Integer>)parameter).setValue(index,newValue);    }  }  return 0.0;}  }
class C{  public TTextProtocol(TTransport trans){  super(trans);  writers=new Stack<>();  contextStack=new Stack<>();  currentFieldClass=new Stack<>();  reset();}  }
class C{  public void testJoinStringVarargs(){  String expectedResult=BEGIN + DASH + JIM+ DASH+ JOHN+ DASH+ AND_JOE;  String result=String.join(DASH,BEGIN,JIM,JOHN,AND_JOE);  assertEquals(result,expectedResult,"BEGIN.join(DASH, JIM, JOHN, AND_JOE)");  assertEquals(String.join(DASH,BEGIN),BEGIN);}  }
class C{  public void clear(){  if (m_rootNode.getChildren().size() == 1) {    remove(m_rootNode.getChildren().get(0));  }  for (  final ICriteriumTreeListener listener : m_listeners) {    try {      listener.removedAll(this);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public static void main(String[] args){  String durationString=null;  boolean othervm=false;  boolean exit=false;  try {    for (int i=0; i < args.length; i++) {      String arg=args[i];      if (arg.equals("-hours")) {        if (durationString != null) {          usage();        }        i++;        int hours=Integer.parseInt(args[i]);        durationString=hours + " hours";        testDuration=hours * 60 * 60* 1000;      } else       if (arg.equals("-seconds")) {        if (durationString != null) {          usage();        }        i++;        long seconds=Long.parseLong(args[i]);        durationString=seconds + " seconds";        testDuration=seconds * 1000;      } else       if (arg.equals("-maxLevel")) {        i++;        maxLevel=Integer.parseInt(args[i]);      } else       if (arg.equals("-othervm")) {        othervm=true;      } else       if (arg.equals("-exit")) {        exit=true;      } else {        usage();      }    }    if (durationString == null) {      durationString=testDuration + " milliseconds";    }  } catch (  Throwable t) {    usage();    throw new RuntimeException("TEST FAILED: Bad argument");  }  AppleUserImpl user=null;  long startTime=0;  Thread server=null;  int exitValue=0;  try {    user=new AppleUserImpl();synchronized (user) {      Registry registry=TestLibrary.createRegistryOnUnusedPort();      registryPort=TestLibrary.getRegistryPort(registry);      LocateRegistry.getRegistry(registryPort).rebind("AppleUser",user);      if (othervm) {        logger.log(Level.INFO,"Application server must be " + "started in separate process");      } else {        Class app=Class.forName("ApplicationServer");        java.lang.reflect.Constructor appConstructor=app.getDeclaredConstructor(new Class[]{Integer.TYPE});        server=new Thread((Runnable)appConstructor.newInstance(registryPort));        logger.log(Level.INFO,"Starting application server " + "in same process");        server.start();      }      logger.log(Level.INFO,"Waiting for application server " + "process to start");      while (!startTestNotified) {        user.wait();      }    }    startTime=System.currentTimeMillis();    logger.log(Level.INFO,"Test starting");    logger.log(Level.INFO,"Waiting " + durationString + " for "+ "test to complete or exception to be thrown");synchronized (lock) {      while (status == null && !finished) {        lock.wait();      }    }    if (status != null) {      throw new RuntimeException("TEST FAILED: " + "juicer server reported an exception",status);    } else {      logger.log(Level.INFO,"TEST PASSED");    }  } catch (  Exception e) {    logger.log(Level.INFO,"TEST FAILED");    exitValue=1;    if (exit) {      e.printStackTrace();    }    throw new RuntimeException("TEST FAILED: " + "unexpected exception",e);  } finally {    long actualDuration=System.currentTimeMillis() - startTime;    logger.log(Level.INFO,"Test finished");    try {      UnicastRemoteObject.unexportObject(user,true);    } catch (    NoSuchObjectException ignore) {    }    logger.log(Level.INFO,"Test duration was " + (actualDuration / 1000) + " seconds "+ "("+ (actualDuration / 3600000)+ " hours)");    System.gc();    System.gc();    if (exit) {      System.exit(exitValue);    }  }}  }
class C{  public void testRemainderKnuthOneDigitByOneDigit(){  byte aBytes[]={113,-83,123,-5};  byte bBytes[]={2,-3,-4,-50};  int aSign=1;  int bSign=-1;  byte rBytes[]={2,-9,-14,53};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static Date[] constructDateRange(final String fromDate,final String toDate) throws ParseException {  return constructDateRange(getDateFormatter(DFT_DATE_FORMAT).parse(fromDate),getDateFormatter(DFT_DATE_FORMAT).parse(toDate));}  }
class C{  public StringIndexOutOfBoundsException(String s,int index){  this(s.length(),index);}  }
class C{  public void changeScene(ProjectContext projectContext,String sceneName){  try {    EditorScene newScene=loadScene(projectContext,sceneName);    projectContext.currScene.dispose();    projectContext.currScene=newScene;    Gdx.graphics.setTitle(constructWindowTitle());    Mundus.INSTANCE.postEvent(new SceneChangedEvent());  } catch (  FileNotFoundException e) {    e.printStackTrace();    Log.error(TAG,e.getMessage());  }}  }
class C{  private void showFeedback(String message){  if (pluginHost != null) {    pluginHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public State(PlotRenderingInfo info){  super(info);  this.seriesPath=new GeneralPath();}  }
class C{  public boolean containsAttribute(String attr){  return attributes.containsKey(attr);}  }
class C{  @CanIgnoreReturnValue public Builder addEscape(char c,String replacement){  checkNotNull(replacement);  replacementMap.put(c,replacement);  return this;}  }
class C{  public char[] toCharArray() throws IllegalStateException {  if (nulled) {    throw new IllegalStateException(res.getString("NoGetPasswordNulled.message"));  }  return wrappedPassword;}  }
class C{  public void dragDropEnd(DragSourceDropEvent e){}  }
class C{  public String marker(){  return marker;}  }
class C{  public CustomClassLoader(String classPath){  scanPath(classPath);}  }
class C{  protected void parseDoAction(InStream in) throws IOException {  SWFActions actions=tagtypes.tagDoAction();  if (actions == null) {    return;  }  actions.start(0);  ActionParser parser=new ActionParser(actions);  parser.parse(in);  actions.done();}  }
class C{  private boolean writeCircleAttributes(IXMLElement elem,SVGFigure f,Ellipse2D.Double ellipse){  AffineTransform t=TRANSFORM.getClone(f);  if (t == null) {    t=drawingTransform;  } else {    t.preConcatenate(drawingTransform);  }  if ((t.getType() & (AffineTransform.TYPE_UNIFORM_SCALE | AffineTransform.TYPE_TRANSLATION)) == t.getType() && ellipse.width == ellipse.height) {    Point2D.Double start=new Point2D.Double(ellipse.x,ellipse.y);    Point2D.Double end=new Point2D.Double(ellipse.x + ellipse.width,ellipse.y + ellipse.height);    t.transform(start,start);    t.transform(end,end);    ellipse.x=Math.min(start.x,end.x);    ellipse.y=Math.min(start.y,end.y);    ellipse.width=Math.abs(start.x - end.x);    ellipse.height=Math.abs(start.y - end.y);    elem.setAttribute("shape","circle");    elem.setAttribute("coords",(int)(ellipse.x + ellipse.width / 2d) + "," + (int)(ellipse.y + ellipse.height / 2d)+ ","+ (int)(ellipse.width / 2d));    writeHrefAttribute(elem,f);    return bounds.intersects(ellipse.getBounds());  } else {    return writePolyAttributes(elem,f,(Shape)ellipse);  }}  }
class C{  private synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  return status == null || (status.mState != State.CANCEL);}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.276 -0500",hash_original_method="12ABA78EBE10E417F0C1B2A97120946D",hash_generated_method="75FC56698A2AEE9B834045C27A0DF3DE") public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){}  }
class C{  public boolean isInherited(){  return inherited;}  }
class C{  public void testMT() throws Exception {  tryMT(2);}  }
class C{  public Matrix3d rotationX(double ang){  double sin, cos;  if (ang == Math.PI || ang == -Math.PI) {    cos=-1.0;    sin=0.0;  } else   if (ang == Math.PI * 0.5 || ang == -Math.PI * 1.5) {    cos=0.0;    sin=1.0;  } else   if (ang == -Math.PI * 0.5 || ang == Math.PI * 1.5) {    cos=0.0;    sin=-1.0;  } else {    cos=Math.cos(ang);    sin=Math.sin(ang);  }  m00=1.0;  m01=0.0;  m02=0.0;  m10=0.0;  m11=cos;  m12=sin;  m20=0.0;  m21=-sin;  m22=cos;  return this;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public int XToTileX(int x){  return XToTileX(x,getTileGridXOffset(),getTileWidth());}  }
class C{  protected static boolean contains(String value,int start,int length,String[] criteria){  boolean result=false;  if (start >= 0 && start + length <= value.length()) {    String target=value.substring(start,start + length);    for (int i=0; i < criteria.length; i++) {      if (target.equals(criteria[i])) {        result=true;        break;      }    }  }  return result;}  }
class C{  public static String atan2(String[] params) throws FBSQLParseException {  if (params.length != 2)   throw new FBSQLParseException("Incorrect number of " + "parameters of function atan2 : " + params.length);  return "atan2(" + params[0] + ", "+ params[1]+ ")";}  }
class C{  @Override public void addPropertiesFile(String propertiesFile){  this.propertiesFiles.add(propertiesFile);}  }
class C{  public final void testReadbyteArrayintint01() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      assertTrue("retval",dis.read(bArray,0,bArray.length) == MY_MESSAGE_LEN);      assertTrue("bArray",Arrays.equals(myMessage,bArray));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  private static float patternMatchVariance(int[] counters,int[] pattern,float maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Float.POSITIVE_INFINITY;  }  float unitBarWidth=(float)total / patternLength;  maxIndividualVariance*=unitBarWidth;  float totalVariance=0.0f;  for (int x=0; x < numCounters; x++) {    int counter=counters[x];    float scaledPattern=pattern[x] * unitBarWidth;    float variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Float.POSITIVE_INFINITY;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  static void doPredict(BufferedReader reader,Writer writer,Model model) throws IOException {  int correct=0;  int total=0;  double error=0;  double sump=0, sumt=0, sumpp=0, sumtt=0, sumpt=0;  int nr_class=model.getNrClass();  double[] prob_estimates=null;  int n;  int nr_feature=model.getNrFeature();  if (model.bias >= 0) {    n=nr_feature + 1;  } else {    n=nr_feature;  }  if (flag_predict_probability && !model.isProbabilityModel()) {    throw new IllegalArgumentException("probability output is only supported for logistic regression");  }  Formatter out=new Formatter(writer);  if (flag_predict_probability) {    int[] labels=model.getLabels();    prob_estimates=new double[nr_class];    printf(out,"labels");    for (int j=0; j < nr_class; j++) {      printf(out," %d",labels[j]);    }    printf(out,"\n");  }  String line=null;  while ((line=reader.readLine()) != null) {    List<Feature> x=new ArrayList<Feature>();    StringTokenizer st=new StringTokenizer(line," \t\n");    double target_label;    try {      String label=st.nextToken();      target_label=atof(label);    } catch (    NoSuchElementException e) {      throw new RuntimeException("Wrong input format at line " + (total + 1),e);    }    while (st.hasMoreTokens()) {      String[] split=COLON.split(st.nextToken(),2);      if (split == null || split.length < 2) {        throw new RuntimeException("Wrong input format at line " + (total + 1));      }      try {        int idx=atoi(split[0]);        double val=atof(split[1]);        if (idx <= nr_feature) {          Feature node=new FeatureNode(idx,val);          x.add(node);        }      } catch (      NumberFormatException e) {        throw new RuntimeException("Wrong input format at line " + (total + 1),e);      }    }    if (model.bias >= 0) {      Feature node=new FeatureNode(n,model.bias);      x.add(node);    }    Feature[] nodes=new Feature[x.size()];    nodes=x.toArray(nodes);    double predict_label;    if (flag_predict_probability) {      assert prob_estimates != null;      predict_label=Linear.predictProbability(model,nodes,prob_estimates);      printf(out,"%g",predict_label);      for (int j=0; j < model.nr_class; j++) {        printf(out," %g",prob_estimates[j]);      }      printf(out,"\n");    } else {      predict_label=Linear.predict(model,nodes);      printf(out,"%g\n",predict_label);    }    if (predict_label == target_label) {      ++correct;    }    error+=(predict_label - target_label) * (predict_label - target_label);    sump+=predict_label;    sumt+=target_label;    sumpp+=predict_label * predict_label;    sumtt+=target_label * target_label;    sumpt+=predict_label * target_label;    ++total;  }  if (model.solverType.isSupportVectorRegression()) {    info("Mean squared error = %g (regression)%n",error / total);    info("Squared correlation coefficient = %g (regression)%n",(total * sumpt - sump * sumt) * (total * sumpt - sump * sumt) / ((total * sumpp - sump * sump) * (total * sumtt - sumt * sumt)));  } else {    info("Accuracy = %g%% (%d/%d)%n",(double)correct / total * 100,correct,total);  }}  }
class C{  public GenericUrl(URI uri){  this(uri.getScheme(),uri.getHost(),uri.getPort(),uri.getRawPath(),uri.getRawFragment(),uri.getRawQuery(),uri.getRawUserInfo());}  }
class C{  public static SipRequest createPublish(SipDialogPath dialog,long expirePeriod,String entityTag,String sdp) throws PayloadException {  try {    URI requestURI=SipUtils.ADDR_FACTORY.createURI(dialog.getTarget());    CallIdHeader callIdHeader=SipUtils.HEADER_FACTORY.createCallIdHeader(dialog.getCallId());    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.PUBLISH);    Address fromAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getLocalParty());    FromHeader fromHeader=SipUtils.HEADER_FACTORY.createFromHeader(fromAddress,dialog.getLocalTag());    Address toAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getRemoteParty());    ToHeader toHeader=SipUtils.HEADER_FACTORY.createToHeader(toAddress,dialog.getRemoteTag());    Request publish=SipUtils.MSG_FACTORY.createRequest(requestURI,Request.PUBLISH,callIdHeader,cseqHeader,fromHeader,toHeader,dialog.getSipStack().getViaHeaders(),SipUtils.buildMaxForwardsHeader());    Vector<String> route=dialog.getRoute();    for (int i=0; i < route.size(); i++) {      Header routeHeader=SipUtils.HEADER_FACTORY.createHeader(RouteHeader.NAME,route.elementAt(i));      publish.addHeader(routeHeader);    }    ExpiresHeader expHeader=SipUtils.HEADER_FACTORY.createExpiresHeader((int)(expirePeriod / SECONDS_TO_MILLISECONDS_CONVERSION_RATE));    publish.addHeader(expHeader);    if (entityTag != null) {      Header sipIfMatchHeader=SipUtils.HEADER_FACTORY.createHeader(SIPIfMatchHeader.NAME,entityTag);      publish.addHeader(sipIfMatchHeader);    }    publish.addHeader(SipUtils.buildUserAgentHeader());    publish.addHeader(SipUtils.HEADER_FACTORY.createHeader(EventHeader.NAME,"presence"));    if (sdp != null) {      publish.setContent(sdp,SipUtils.HEADER_FACTORY.createContentTypeHeader("application","pidf+xml"));    }    int length=sdp == null ? 0 : sdp.getBytes(UTF8).length;    publish.setContentLength(SipUtils.HEADER_FACTORY.createContentLengthHeader(length));    ViaHeader viaHeader=(ViaHeader)publish.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(publish);  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message",e);  }}  }
class C{  @Singleton public static synchronized Properties clbProperties(){  if (clbProperties == null) {    Properties p=new Properties();    try {      p.load(RegistryTestModule.class.getResourceAsStream("/config/clb.properties"));    } catch (    IOException e) {      throw Throwables.propagate(e);    } finally {      clbProperties=p;    }  }  return clbProperties;}  }
class C{  public DoubleAccumulator(DoubleBinaryOperator accumulatorFunction,double identity){  this.function=accumulatorFunction;  base=this.identity=doubleToRawLongBits(identity);}  }
class C{  @Override public int graphType(){  return Drawable.TREE;}  }
class C{  @Override public void insert(Blorp item,int position){  if (sentinel.next == null || position == 0) {    insertFront(item);    return;  }  Node currentNode=sentinel.next.next;  while (position > 1 && currentNode.next != null) {    position-=1;    currentNode=currentNode.next;  }  Node newNode=new Node(item,currentNode.next);  currentNode.next=newNode;}  }
class C{  public IndexOutOfBoundsException(){  super();}  }
class C{  public style addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public long put(int key,long value){  long previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public static boolean equals(Object a,Object b){  if (!(a instanceof Vector2) || !(b instanceof Vector2)) {    return false;  }  if (a == b) {    return true;  }  return compareTo((Vector2)a,(Vector2)b) == 0;}  }
class C{  public synchronized void nodeLeft(GfManagerAgent source,GemFireVM left){  InetAddress hostIpAddress=left.getHost();  List members=(List)this.hostMembers.get(hostIpAddress);  if (members != null) {    members.remove(left);    if (members.isEmpty()) {      this.hostConfigs.remove(hostIpAddress);      this.hostMembers.remove(hostIpAddress);    }  }  this.okayHealth.remove(left);  this.poorHealth.remove(left);  reevaluateHealth();}  }
class C{  @SuppressWarnings("unchecked") protected void receiveEntities(Packet c){  List<Entity> newEntities=(List<Entity>)c.getObject(0);  List<Entity> newOutOfGame=(List<Entity>)c.getObject(1);  game.setEntitiesVector(newEntities);  if (newOutOfGame != null) {    game.setOutOfGameEntitiesVector(newOutOfGame);  }}  }
class C{  public static int checkActionAccess(int clientId,int roleId,int docTypeId,String[] options,int maxIndex){  return MRole.get(Env.getCtx(),roleId).checkActionAccess(clientId,docTypeId,options,maxIndex);}  }
class C{  @Override protected void defaultSort(Comparator<? super E> comparator){  FastList<E> list=comparator == null ? (FastList<E>)this.toSortedList() : (FastList<E>)this.toSortedList(comparator);  this.lists.clear();  this.lists.add(list);}  }
class C{  private void handleUpdateTimeMessage(){  invalidate();  if (shouldTimerBeRunning()) {    long timeMs=System.currentTimeMillis();    long delayMs=INTERACTIVE_UPDATE_RATE_MS - (timeMs % INTERACTIVE_UPDATE_RATE_MS);    mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME,delayMs);  }}  }
class C{  protected ExportedVariableDeclarationImpl(){  super();}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public void onPreviewDone(TaskImage resultImage,TaskImage inputImage,int[] colors,TaskInfo.Destination destination){  TaskInfo job=new TaskInfo(mId,inputImage,resultImage,destination);  final ImageProcessorListener listener=mImageTaskManager.getProxyListener();  listener.onResultUncompressed(job,new UncompressedPayload(colors));}  }
class C{  @Override public synchronized int abortExpiredTransactions(){  logger.debug("checking for idle transactions to be aborted");  long now=clock.getTick();  List<TimedManager> expired=Lists.newArrayList();  for (  Map.Entry<String,TimedManager> e : uniqueIdManagerMap.entrySet()) {    long delta=now - e.getValue().lastAccessedTick;    if (delta >= ABORT_NS) {      expired.add(e.getValue());    }  }  int count=0;  for (  TimedManager timed : expired) {    long delta=now - timed.lastAccessedTick;    Manager m=timed.manager;    if (timed.manager.lock.tryLock()) {      try {        logger.info("closing idle manager (id={}; idle time={} ns)",m.getTransactionId(),delta);        try {          m.addAuditLog(DBAudit.ACTION.TRANSACTION_TERMINATE,null,null,null,null,null);        } catch (        SQLException e) {          logger.warn("failed to add audit log entry:",e);        }        m.close();        assert !uniqueIdManagerMap.containsKey(m.getTransactionId());        count+=1;      }  finally {        m.lock.unlock();      }    } else {      logger.warn("idle manager is locked; not closing (id={}; idle time={} ns)",m.getTransactionId(),delta);    }  }  return count;}  }
class C{  public static void trace(byte level,String s,Throwable t){  if (s == null)   return;  if (level == SEVERE) {    if (!logged.contains(s)) {      TypeScriptValidatorUIPlugin.getDefault().getLog().log(new Status(IStatus.ERROR,TypeScriptValidatorUIPlugin.PLUGIN_ID,s,t));      logged.add(s);    }  }  if (!TypeScriptValidatorUIPlugin.getDefault().isDebugging())   return;  StringBuilder sb=new StringBuilder(TypeScriptValidatorUIPlugin.PLUGIN_ID);  sb.append(" ");  sb.append(levelNames[level]);  sb.append(" ");  sb.append(sdf.format(new Date()));  sb.append(" ");  sb.append(s);  System.out.println(sb.toString());  if (t != null)   t.printStackTrace();}  }
class C{  protected boolean didOpenEditor(){  return fSwitchedEditor;}  }
class C{  private String findParentFqcn(TypeElement typeElement,Set<TypeMirror> parents){  TypeMirror type;  while (true) {    type=typeElement.getSuperclass();    if (type.getKind() == TypeKind.NONE) {      return null;    }    typeElement=(TypeElement)((DeclaredType)type).asElement();    if (containsTypeMirror(parents,type)) {      String packageName=getPackageName(typeElement);      return packageName + "." + getClassName(typeElement,packageName);    }  }}  }
class C{  protected Object evaluateSequenceExpression(PySequenceExpression expr){  PyExpression[] elements=expr.getElements();  if (expr instanceof PyDictLiteralExpression) {    Map<Object,Object> result=new HashMap<Object,Object>();    for (    final PyKeyValueExpression keyValueExpression : ((PyDictLiteralExpression)expr).getElements()) {      addRecordFromDict(result,keyValueExpression.getKey(),keyValueExpression.getValue());    }    return result;  } else {    List<Object> result=new ArrayList<Object>();    for (    PyExpression element : elements) {      result.add(myEvaluateCollectionItems ? evaluate(element) : element);    }    return result;  }}  }
class C{  Config(Config conf){  this.diskDir=conf.diskDir;  this.persistBackup=conf.persistBackup;  this.registerInterest=conf.registerInterest;  this.poolName=conf.poolName;}  }
class C{  public TurnoutOperation makeCopy(String n){  return new NoFeedbackTurnoutOperation(n,interval,maxTries);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  HttpSession sess=request.getSession();  MobileSessionCtx wsc=MobileSessionCtx.get(request);  ctx=wsc.ctx;  if (ctx == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  int AD_Menu_ID=MobileUtil.getParameterAsInt(request,"AD_Menu_ID");  int AD_Window_ID=MobileUtil.getParameterAsInt(request,"AD_Window_ID");  AD_Language=Env.getAD_Language(ctx);  int AD_Workflow_ID=getAD_Workflow_ID(AD_Menu_ID);  loadWorkflow(ctx,AD_Workflow_ID,sess);  MWorkflow wf=(MWorkflow)sess.getAttribute(WORKFLOW);  MWFNode[] nodes=(MWFNode[])sess.getAttribute(NODES);  ArrayList nodes_ID=(ArrayList)sess.getAttribute(NODES_ID);  int[][] imageMap=(int[][])sess.getAttribute(IMAGE_MAP);  int activeNode=((Integer)sess.getAttribute(ACTIVE_NODE)).intValue();  MobileDoc doc=preparePage("loginInfo");  doc=createLayout(doc,wf,activeNode,nodes,nodes_ID,imageMap);  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public String statement(){  return statement;}  }
class C{  private String validateHTTP(ValidationData original,ValidationData item,Variables variables,int httpCode,String httpMsg,String uniqueName){  String actualValue=null;  if (item.getKey().equalsIgnoreCase("HTTPRESPONSECODE")) {    actualValue="" + httpCode;  } else   if (item.getKey().equalsIgnoreCase("HTTPRESPONSEMESSAGE")) {    actualValue=httpMsg;  }  boolean result=this.evaluateResult(actualValue,item.getValue(),item.getCondition(),variables);  if (result) {    return TankConstants.HTTP_CASE_PASS;  }  String msg="Failed http validation: value = " + actualValue;  LOG.error(LogUtil.getLogMessage(item.toString() + " " + msg,LogEventType.Validation));  tsc.addError(new ErrorContainer("HTTP_CODE",original,item,msg));  return TankConstants.HTTP_CASE_FAIL;}  }
class C{  @SuppressWarnings("unused") @Test public void testStateReaction_WithExitAction(){  SimpleFlatTSC tsc=new SimpleFlatTSC();  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,tsc.s_scope);  LocalReaction exitAction=_createExitAction(tsc.s1);  AssignmentExpression assign=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(21),(ReactionEffect)exitAction.getEffect());  ExecutionFlow flow=sequencer.transform(tsc.sc);  ExecutionState _s1=flow.getStates().get(0);  ExecutionState _s2=flow.getStates().get(1);  assertEquals(tsc.s1.getName(),_s1.getSimpleName());  assertEquals(tsc.s2.getName(),_s2.getSimpleName());  assertEquals(1,_s1.getReactions().size());  Reaction reaction=_s1.getReactions().get(0);  assertNotNull(reaction.getCheck());  assertNotNull(reaction.getEffect());  Sequence seq=(Sequence)reaction.getEffect();  assertCall(seq,0,_s1.getExitSequence());  assertCall(_s1.getExitSequence(),1,_s1.getExitAction());}  }
class C{  public void test_doAsPrivileged_01(){  Subject subj=new Subject();  PrivilegedAction<Object> pa=new myPrivilegedAction();  PrivilegedAction<Object> paNull=null;  AccessControlContext acc=AccessController.getContext();  try {    Object obj=Subject.doAsPrivileged(null,pa,acc);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAsPrivileged(subj,pa,acc);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAsPrivileged(subj,paNull,acc);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }}  }
class C{  public boolean isFixedAssetInvoice(){  Object oo=get_Value(COLUMNNAME_IsFixedAssetInvoice);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      Node<K,V> b=q.node;      Node<K,V> n=b.next;      for (; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  private static boolean formatAsText(int pgType){switch (pgType) {case PgServer.PG_TYPE_BYTEA:    return false;}return true;}  }
class C{  public void removeSettingsGroup(SettingsGroup group){  if (PROPS.remove(group)) {    fireSettingsHandlerEvent(EventType.SETTINGS_GROUP_REMOVED,group);  }}  }
class C{  @NonNull public static TimePickerDialog createDialog(@NonNull Context context,@Nullable Date date,@Nullable OnDateSetListener listener,@NonNull Clock clock){  Calendar calendar=DateHelper.getCalendarFromClock(clock);  if (date != null) {    calendar.setTime(date);  }  TimePickerDialog.OnTimeSetListener dialogCallBack=null;  int hourOfDay=calendar.get(Calendar.HOUR_OF_DAY);  int minute=calendar.get(Calendar.MINUTE);  int second=calendar.get(Calendar.SECOND);  TimePickerDialog timePickerDialog=TimePickerDialog.newInstance(dialogCallBack,hourOfDay,minute,second,DateFormat.is24HourFormat(context));  timePickerDialog.dismissOnPause(true);  return timePickerDialog;}  }
class C{  public ConditionObject(){}  }
class C{  private Object readResolve() throws ObjectStreamException {  return EmptyBindingSet.INSTANCE;}  }
class C{  public R find(R e){  if (!matches.containsKey(e)) {    return null;  }  R parent=matches.get(e);  if (!parent.equals(e)) {    R tmp=find(parent);    if (!parent.equals(tmp)) {      parent=tmp;      matches.put(e,parent);    }  }  return parent;}  }
class C{  public Event persistEvent(Event event){  return eventsDAO.create(event);}  }
class C{  private int computeNumAdditionalContainers(Map<String,Integer> componentChanges,PackingPlan packingPlan){  Resource scaleDownResource=PackingUtils.computeTotalResourceChange(topology,componentChanges,defaultInstanceResources,PackingUtils.ScalingDirection.DOWN);  Resource scaleUpResource=PackingUtils.computeTotalResourceChange(topology,componentChanges,defaultInstanceResources,PackingUtils.ScalingDirection.UP);  Resource additionalResource=scaleUpResource.subtractAbsolute(scaleDownResource);  return (int)additionalResource.divideBy(packingPlan.getMaxContainerResources());}  }
class C{  public void loadOverrides(MaterializedFrame baseFrame){  ArrayList<Source> sources=rSources.get(getName());  if (sources != null) {    for (    Source source : sources) {      try {        RContext.getEngine().parseAndEval(source,baseFrame,false);      } catch (      ParseException e) {        throw new RInternalError(e,"error while parsing overrides from %s",source.getName());      }    }  }}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){}  }
class C{  public CounterSetFormat(final String name,final Collection<String> mimeTypes,final Charset charset,final Collection<String> fileExtensions){  super(name,mimeTypes,charset,fileExtensions);}  }
class C{  public UserSearch(){}  }
class C{  public Builder data(byte[] data){  this.data=data;  this.isJsonData=false;  return this;}  }
class C{  public void rotateCounterClockwise(){  rotate(-90,true);}  }
class C{  public long position(byte[] pattern,long start) throws SQLException {  throw new FBDriverNotCapableException("Method Method position(byte[], long) is not supported");}  }
class C{  public basefont addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void test_rootLeaf() throws Exception {  final int m=3;  final BTree btree=getBTree(m,new BloomFilterFactory(100,1 / 64d,1 / 32d));  SimpleEntry v3=new SimpleEntry(3);  SimpleEntry v5=new SimpleEntry(5);  SimpleEntry v7=new SimpleEntry(7);  btree.insert(TestKeyBuilder.asSortKey(3),v3);  btree.insert(TestKeyBuilder.asSortKey(5),v5);  btree.insert(TestKeyBuilder.asSortKey(7),v7);  final File outFile2=new File(getName() + "_m" + m+ "_bloom.seg");  if (outFile2.exists() && !outFile2.delete()) {    fail("Could not delete old index segment: " + outFile2.getAbsoluteFile());  }  final File tmpDir=outFile2.getAbsoluteFile().getParentFile();  if (log.isInfoEnabled())   log.info("Building index segment (w/ bloom): in(m=" + btree.getBranchingFactor() + ", nentries="+ btree.getEntryCount()+ "), out(m="+ m+ ")");  final long commitTime=System.currentTimeMillis();  final IndexSegmentBuilder builder2=IndexSegmentBuilder.newInstance(outFile2,tmpDir,btree.getEntryCount(),btree.rangeIterator(),m,btree.getIndexMetadata(),commitTime,true,bufferNodes);  @SuppressWarnings("unused") final IndexSegmentCheckpoint checkpoint=builder2.call();  IBloomFilter bloomFilter=builder2.bloomFilter;  assertTrue("3",bloomFilter.contains(i2k(3)));  assertTrue("5",bloomFilter.contains(i2k(5)));  assertTrue("7",bloomFilter.contains(i2k(7)));  assertFalse("4",bloomFilter.contains(i2k(4)));  assertFalse("9",bloomFilter.contains(i2k(9)));  if (log.isInfoEnabled())   log.info("Opening index segment w/ bloom filter.");  final IndexSegment seg2=new IndexSegmentStore(outFile2).loadIndexSegment();  try {    if (log.isInfoEnabled())     log.info("Verifying index segments.");    assertSameBTree(btree,seg2);    bloomFilter=seg2.getBloomFilter();    assertTrue("3",bloomFilter.contains(i2k(3)));    assertTrue("5",bloomFilter.contains(i2k(5)));    assertTrue("7",bloomFilter.contains(i2k(7)));    assertFalse("4",bloomFilter.contains(i2k(4)));    assertFalse("9",bloomFilter.contains(i2k(9)));    byte[][] keys=new byte[(int)btree.getEntryCount()][];    byte[][] vals=new byte[(int)btree.getEntryCount()][];    getKeysAndValues(btree,keys,vals);    doRandomLookupTest("btree",btree,keys,vals);    doRandomLookupTest("w/ bloom",seg2,keys,vals);  }  finally {    if (log.isInfoEnabled())     log.info("Closing index segments.");    seg2.close();  }  if (!outFile2.delete()) {    log.warn("Could not delete index segment: " + outFile2);  }}  }
class C{  public final void freeBuffers(){  byte[] buf=_buffer;  if (buf != null) {    _buffer=null;    _context.releaseReadIOBuffer(buf);  }}  }
class C{  private static boolean meetsAllBounds(final Vector p,final Membership[] bounds,final Membership[] moreBounds){  return meetsAllBounds(p.x,p.y,p.z,bounds,moreBounds);}  }
class C{  public static BigInteger toNanoCoins(int coins,int cents){  checkArgument(cents < 100);  checkArgument(cents >= 0);  checkArgument(coins >= 0);  checkArgument(coins < NetworkParameters.MAX_MONEY.divide(Utils.COIN).longValue());  BigInteger bi=BigInteger.valueOf(coins).multiply(COIN);  bi=bi.add(BigInteger.valueOf(cents).multiply(CENT));  return bi;}  }
class C{  public void testGetSerialNumber(){  if (this.cert == null) {    return;  }  assertEquals("The serial number is not correct.",tbt_cert.getSerialNumber(),cert.getSerialNumber());}  }
class C{  @Override public void basicPutPart3(EntryEventImpl event,RegionEntry entry,boolean isInitialized,long lastModified,boolean invokeCallbacks,boolean ifNew,boolean ifOld,Object expectedOldValue,boolean requireOldValue){  distributeUpdate(event,lastModified,false,false,null,false);  super.basicPutPart3(event,entry,isInitialized,lastModified,invokeCallbacks,ifNew,ifOld,expectedOldValue,requireOldValue);}  }
class C{  public static boolean isEmpty(String input){  return input == null || input.isEmpty();}  }
class C{  private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int count){  if (slice != null) {    Collection<Replica> allReplicasForShard=slice.getReplicas();    if (allReplicasForShard == null) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"No replicas found  in shard/collection: " + shard + "/"+ collectionName);    }    if (allReplicasForShard.size() == 1) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"There is only one replica available in shard/collection: " + shard + "/"+ collectionName+ ". Cannot delete that.");    }    if (allReplicasForShard.size() <= count) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"There are lesser num replicas requested to be deleted than are available in shard/collection : " + shard + "/"+ collectionName+ " Requested: "+ count+ " Available: "+ allReplicasForShard.size()+ ".");    }  }}  }
class C{  protected final boolean hasVetoableChangeListeners(String propertyName){  return vcs.hasListeners(propertyName);}  }
class C{  static InterfaceAddress createInterfaceAddress(InetAddress address,InetAddress broadcast,short prefixlength){  try {    Class<InterfaceAddress> IAClass=InterfaceAddress.class;    InterfaceAddress ia;    Constructor<InterfaceAddress> ctr=IAClass.getDeclaredConstructor();    ctr.setAccessible(true);    Field addressField=IAClass.getDeclaredField("address");    addressField.setAccessible(true);    Field broadcastField=IAClass.getDeclaredField("broadcast");    broadcastField.setAccessible(true);    Field maskLengthField=IAClass.getDeclaredField("maskLength");    maskLengthField.setAccessible(true);    ia=ctr.newInstance();    addressField.set(ia,address);    broadcastField.set(ia,broadcast);    maskLengthField.setShort(ia,prefixlength);    return ia;  } catch (  NoSuchFieldException nsfe) {    nsfe.printStackTrace();  }catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  InstantiationException ie) {    ie.printStackTrace();  }catch (  IllegalAccessException iae) {    iae.printStackTrace();  }catch (  InvocationTargetException ite) {    ite.printStackTrace();  }  return null;}  }
class C{  @Override public void close() throws IOException {  channel.close();}  }
class C{  public boolean mergeAdditionalProperties(Entity merged,Class<? extends Entity> type,List<Entity> originalEntities){  return true;}  }
class C{  public static boolean isBetween(double val,double theshold1,double theshold2){  return theshold2 > theshold1 ? val > theshold1 && val < theshold2 : val > theshold2 && val < theshold1;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_CHAPTER_NEXT);  return null;}  }
class C{  private static int findEndOfTag(String markup,int startPos){  int idx=markup.indexOf(CHAR_GREATER_THAN,startPos);  return idx == -1 ? markup.length() : idx + 1;}  }
class C{  public void insertString(int offs,String str,AttributeSet a) throws BadLocationException {  Object filterNewlines=getProperty("filterNewlines");  if ((filterNewlines instanceof Boolean) && filterNewlines.equals(Boolean.TRUE)) {    if ((str != null) && (str.indexOf('\n') >= 0)) {      StringBuilder filtered=new StringBuilder(str);      int n=filtered.length();      for (int i=0; i < n; i++) {        if (filtered.charAt(i) == '\n') {          filtered.setCharAt(i,' ');        }      }      str=filtered.toString();    }  }  super.insertString(offs,str,a);}  }
class C{  public void forceClose(){  in.forceClose();}  }
class C{  public void addAndSimplify(double x,double y){  final int len=data.size();  if (len >= 4) {    final double l1x=data.get(len - 4);    final double l1y=data.get(len - 3);    final double l2x=data.get(len - 2);    final double l2y=data.get(len - 1);    final double ldx=l2x - l1x;    final double ldy=l2y - l1y;    final double cdx=x - l2x;    final double cdy=y - l2y;    if ((ldx == 0) && (cdx == 0)) {      data.remove(len - 2,2);    } else     if ((ldy == 0) && (cdy == 0)) {      data.remove(len - 2,2);    } else     if (ldy > 0 && cdy > 0) {      if (Math.abs((ldx / ldy) - (cdx / cdy)) < THRESHOLD) {        data.remove(len - 2,2);      }    }  }  add(x,y);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public AccountHeaderBuilder withOnProfileClickDrawerCloseDelay(int onProfileClickDrawerCloseDelay){  this.mOnProfileClickDrawerCloseDelay=onProfileClickDrawerCloseDelay;  return this;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void testDateSortMissingLast() throws Exception {  checkSortMissingLast("datedv_missinglast","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  public GlobalDocumentBuilder(boolean hashing,HashingMode hashingMode){  this.hashingEnabled=hashing;  this.hashingMode=hashingMode;  if (hashingEnabled)   testHashes();}  }
class C{  public void reset(final Settings settings){  try {synchronized (lock.validated()) {      remote.reset(settings);    }  } catch (  Throwable t) {    Util.handleException(t);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void buildOperation(PathOperation operation,MarkupDocBuilder docBuilder){  if (operation != null) {    applyPathsDocumentExtension(new Context(Position.OPERATION_BEFORE,docBuilder,operation));    buildDeprecatedSection(operation,docBuilder);    buildOperationTitle(operation,docBuilder);    applyPathsDocumentExtension(new Context(Position.OPERATION_BEGIN,docBuilder,operation));    buildDescriptionSection(operation,docBuilder);    inlineDefinitions(buildParametersSection(operation,docBuilder),operation.getPath() + " " + operation.getMethod(),docBuilder);    inlineDefinitions(buildBodyParameterSection(operation,docBuilder),operation.getPath() + " " + operation.getMethod(),docBuilder);    inlineDefinitions(buildResponsesSection(operation,docBuilder),operation.getPath() + " " + operation.getMethod(),docBuilder);    buildConsumesSection(operation,docBuilder);    buildProducesSection(operation,docBuilder);    buildTagsSection(operation,docBuilder);    if (config.isPathSecuritySectionEnabled()) {      buildSecuritySchemeSection(operation,docBuilder);    }    buildExamplesSection(operation,docBuilder);    applyPathsDocumentExtension(new Context(Position.OPERATION_END,docBuilder,operation));    applyPathsDocumentExtension(new Context(Position.OPERATION_AFTER,docBuilder,operation));  }}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>SimpleCache<K,V> loadCache(String filePath){  return (SimpleCache<K,V>)SerializeUtils.deserialization(filePath);}  }
class C{  private static boolean esFormatoNif(String documento){  Pattern mask=Pattern.compile(Constants.FORMATO_NIF);  Matcher matcher=mask.matcher(documento);  if (matcher.matches()) {    return true;  }  return false;}  }
class C{  @Override protected boolean check(Setup item){  return item.check();}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  @ExceptionHandler(Exception.class) @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) public Map<String,Object> handleOtherException(Exception ex){  log.error("Internal server error:",ex);  return LemonUtil.mapOf("exception",ex.getClass().getSimpleName(),"message",ex.getMessage());}  }
class C{  public void paintDesktopIconBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected int endOfLineOf(int offset) throws BadLocationException {  IRegion info=fDocument.getLineInformationOfOffset(offset);  if (offset <= info.getOffset() + info.getLength())   return info.getOffset() + info.getLength();  int line=fDocument.getLineOfOffset(offset);  try {    info=fDocument.getLineInformation(line + 1);    return info.getOffset() + info.getLength();  } catch (  BadLocationException x) {    return fDocument.getLength();  }}  }
class C{  public static org.oscm.internal.vo.VOSubscriptionDetails convertToUp(org.oscm.vo.VOSubscriptionDetails oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOSubscriptionDetails newVO=new org.oscm.internal.vo.VOSubscriptionDetails();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setServiceId(oldVO.getServiceId());  newVO.setServiceKey(oldVO.getServiceKey());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setCreationDate(oldVO.getCreationDate());  newVO.setDeactivationDate(oldVO.getDeactivationDate());  newVO.setServiceAccessInfo(oldVO.getServiceAccessInfo());  newVO.setServiceAccessType(EnumConverter.convert(oldVO.getServiceAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setServiceBaseURL(oldVO.getServiceBaseURL());  newVO.setServiceLoginPath(oldVO.getServiceLoginPath());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.SubscriptionStatus.class));  newVO.setServiceInstanceId(oldVO.getServiceInstanceId());  newVO.setTimeoutMailSent(oldVO.isTimeoutMailSent());  newVO.setPurchaseOrderNumber(oldVO.getPurchaseOrderNumber());  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setProvisioningProgress(oldVO.getProvisioningProgress());  newVO.setNumberOfAssignedUsers(oldVO.getNumberOfAssignedUsers());  newVO.setSellerName(oldVO.getSellerName());  newVO.setTechnicalServiceOperations(convertToUpVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setUsageLicenses(convertToUpVOUsageLicense(oldVO.getUsageLicenses()));  newVO.setPriceModel(convertToUp(oldVO.getPriceModel()));  newVO.setSubscribedService(convertToUp(oldVO.getSubscribedService()));  newVO.setBillingContact(convertToUp(oldVO.getBillingContact()));  newVO.setPaymentInfo(convertToUp(oldVO.getPaymentInfo()));  newVO.setOwnerId(oldVO.getOwnerId());  newVO.setUnitKey(oldVO.getUnitKey());  newVO.setUnitName(oldVO.getUnitName());  return newVO;}  }
class C{  public FloatMapper boost(Float boost){  this.boost=boost;  return this;}  }
class C{  private static Annotation[] compileAnnotations(List<AnnotationDesc> desc,EngineImportService engineImportService) throws AnnotationException {  Annotation[] annotations=new Annotation[desc.size()];  for (int i=0; i < desc.size(); i++) {    annotations[i]=createProxy(desc.get(i),engineImportService);    if (annotations[i] instanceof Hint) {      HintEnum.validateGetListed(annotations[i]);    }  }  return annotations;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void skipMessage() throws IOException {  while (true) {    final int tag=readTag();    if (tag == 0 || !skipField(tag)) {      return;    }  }}  }
class C{  public Lifecycle(Logger log,String name){  _log=log;  _name=name;}  }
class C{  public IndexNameConflictException(String msg){  super(msg);}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  super.layoutMajorAxis(targetSpan,axis,offsets,spans);  int used=0;  int n=spans.length;  for (int i=0; i < n; i++) {    used+=spans[i];  }  int adjust=0;  if (used < targetSpan) {    String valign=(String)getElement().getAttributes().getAttribute(HTML.Attribute.VALIGN);    if (valign == null) {      AttributeSet rowAttr=getElement().getParentElement().getAttributes();      valign=(String)rowAttr.getAttribute(HTML.Attribute.VALIGN);    }    if ((valign == null) || valign.equals("middle")) {      adjust=(targetSpan - used) / 2;    } else     if (valign.equals("bottom")) {      adjust=targetSpan - used;    }  }  if (adjust != 0) {    for (int i=0; i < n; i++) {      offsets[i]+=adjust;    }  }}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,int index,E defaultValue){  try {    Object val=this.opt(index);    if (JSONObject.NULL.equals(val)) {      return defaultValue;    }    if (clazz.isAssignableFrom(val.getClass())) {      @SuppressWarnings("unchecked") E myE=(E)val;      return myE;    }    return Enum.valueOf(clazz,val.toString());  } catch (  IllegalArgumentException|NullPointerException e) {    return defaultValue;  }}  }
class C{  public boolean isSetNLPosition(){  Object oo=get_Value(COLUMNNAME_IsSetNLPosition);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean needSignatureFile(String name){  return this.name.equalsIgnoreCase(name);}  }
class C{  public CartRecyclerAdapter(Context context,CartRecyclerInterface cartRecyclerInterface){  this.context=context;  this.cartRecyclerInterface=cartRecyclerInterface;}  }
class C{  public static void zero(Address start,Extent size){  Clock.stop();  Trace.trace(Item.MEMORY,"zero(%s,%s)\n",start.toString(),size.toString());  Clock.start();  zero(start,size.toLong());}  }
class C{  public static int putByte(ByteBuffer buf,int offset,byte b){  if (buf.isDirect()) {    theUnsafe.putByte(((DirectBuffer)buf).address() + offset,b);  } else {    theUnsafe.putByte(buf.array(),BYTE_ARRAY_BASE_OFFSET + buf.arrayOffset() + offset,b);  }  return offset + 1;}  }
class C{  public boolean forwardIfCurrent(char c){  if (isCurrent(c)) {    pos++;    return true;  }  return false;}  }
class C{  static int compare(MetadataKey<?> a,MetadataKey<?> b){  if (a == b) {    return 0;  }  if (a == null) {    return -1;  }  if (b == null) {    return 1;  }  return a.compareTo(b);}  }
class C{  public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){  StringBuilder builder=new StringBuilder();  int index=0;  for (; index < noDictionaryDimsMapping.length; index++) {    builder.append(noDictionaryDimsMapping[index]);    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);  }  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();  return str;}  }
class C{  public TemplateBuffer translate(String string) throws TemplateException {  return parse(string);}  }
class C{  private void handleUninferredTypeVariables(AnnotatedExecutableType methodType,Set<TypeVariable> targets,Map<TypeVariable,AnnotatedTypeMirror> inferredArgs){  for (  AnnotatedTypeVariable atv : methodType.getTypeVariables()) {    final TypeVariable typeVar=atv.getUnderlyingType();    if (targets.contains(typeVar)) {      final AnnotatedTypeMirror inferredType=inferredArgs.get(typeVar);      if (inferredType == null) {        AnnotatedTypeMirror dummy=atv.getUpperBound().deepCopy();        inferredArgs.put(typeVar,dummy);      }    }  }}  }
class C{  private void readObject(){}  }
class C{  @SuppressWarnings("rawtypes") private static final PipelineOp addAggregation(PipelineOp left,final ProjectionNode projection,final GroupByNode groupBy,final HavingNode having,final AST2BOpContext ctx){  final IValueExpression<?>[] projectExprs=projection.getValueExpressions();  final IValueExpression<?>[] groupByExprs=groupBy == null ? null : groupBy.getValueExpressions();  final IConstraint[] havingExprs=having == null ? null : having.getConstraints();  final IGroupByState groupByState=new GroupByState(projectExprs,groupByExprs,havingExprs);  final IGroupByRewriteState groupByRewrite=new GroupByRewriter(groupByState);  final Properties queryHints=projection.getQueryHints();  final int bopId=ctx.nextId();  final GroupByOp op;  final Set<IVariable<IV>> vars=new LinkedHashSet<IVariable<IV>>();  if (projectExprs != null) {    for (    IValueExpression expr : projectExprs) {      if (expr instanceof Bind) {        expr=((Bind)expr).getExpr();      }      if (expr instanceof IVariable<?>) {      } else {        StaticAnalysis.gatherVarsToMaterialize(expr,vars);      }    }  }  if (groupByExprs != null) {    for (    IValueExpression expr : groupByExprs) {      if (expr instanceof Bind) {        expr=((Bind)expr).getExpr();      }      if (expr instanceof IVariable<?>) {      } else {        StaticAnalysis.gatherVarsToMaterialize(expr,vars);      }    }  }  left=addMaterializationSteps2(left,bopId,vars,queryHints,ctx);  if (!groupByState.isAnyDistinct() && !groupByState.isSelectDependency() && !groupByState.isNestedAggregates()) {    op=new PipelinedAggregationOp(leftOrEmpty(left),NV.asMap(new NV[]{new NV(BOp.Annotations.BOP_ID,bopId),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.PIPELINED,true),new NV(PipelineOp.Annotations.MAX_PARALLEL,1),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(GroupByOp.Annotations.GROUP_BY_STATE,groupByState),new NV(GroupByOp.Annotations.GROUP_BY_REWRITE,groupByRewrite),new NV(PipelineOp.Annotations.LAST_PASS,true)}));  } else {    op=new MemoryGroupByOp(leftOrEmpty(left),NV.asMap(new NV[]{new NV(BOp.Annotations.BOP_ID,bopId),new NV(BOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.PIPELINED,false),new NV(PipelineOp.Annotations.MAX_MEMORY,0),new NV(GroupByOp.Annotations.GROUP_BY_STATE,groupByState),new NV(GroupByOp.Annotations.GROUP_BY_REWRITE,groupByRewrite)}));  }  left=applyQueryHints(op,queryHints,ctx);  return left;}  }
class C{  public InMemoryCookieStore(){  cookieJar=new ArrayList<HttpCookie>();  domainIndex=new HashMap<String,List<HttpCookie>>();  uriIndex=new HashMap<URI,List<HttpCookie>>();  lock=new ReentrantLock(false);}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  private static ByteString checkLowercase(ByteString name) throws IOException {  for (int i=0, length=name.size(); i < length; i++) {    byte c=name.getByte(i);    if (c >= 'A' && c <= 'Z') {      throw new IOException("PROTOCOL_ERROR response malformed: mixed case name: " + name.utf8());    }  }  return name;}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){  Debug.message("demo","DemoLayer: DrawingTool complete");  Object obj=omg.getAttribute(OMGraphic.APP_OBJECT);  if (obj != null && (obj == internalKey || obj == externalKey) && !action.isMask(OMGraphicConstants.DELETE_GRAPHIC_MASK)) {    java.awt.Shape filterShape=omg.getShape();    OMGraphicList filteredList=filter(filterShape,(omg.getAttribute(OMGraphic.APP_OBJECT) == internalKey));    if (Debug.debugging("demo")) {      Debug.output("DemoLayer filter: " + filteredList.getDescription());    }  } else {    if (!doAction(omg,action)) {      setList(new OMGraphicList());      doAction(omg,action);    }  }  repaint();}  }
class C{  public double mean(){  return (alpha / (alpha + beta));}  }
class C{  public void unhighlight(OMGraphic omg){  omg.deselect();  omg.generate(getProjection());  repaint();}  }
class C{  public void environmentConfigure(EnvironmentClassLoader loader){}  }
class C{  public static double[] transpose(double[] m){  return new double[]{m[0],m[4],m[8],m[12],m[1],m[5],m[9],m[13],m[2],m[6],m[10],m[14],m[3],m[7],m[11],m[15]};}  }
class C{  public JCExpression Select(JCExpression base,Symbol sym){  return new JCFieldAccess(base,sym.name,sym).setPos(pos).setType(sym.type);}  }
class C{  private static List<Territory> findUnitTerr(final GameData data,final PlayerID player,final Match<Unit> unitCondition){  final CompositeMatch<Unit> limitShips=new CompositeMatchAnd<>(unitCondition);  final List<Territory> shipTerr=new ArrayList<>();  final Collection<Territory> tNeighbors=data.getMap().getTerritories();  for (  final Territory t2 : tNeighbors) {    if (t2.getUnits().someMatch(limitShips)) {      shipTerr.add(t2);    }  }  return shipTerr;}  }
class C{  private static String genCPs(Map map,String text,int position){  String token="", suffix="", prefix="";  int idx1=-1, idx2=-1, idx;  idx1=StringUtils.findLastOf(text," \t\n\r",position);  if (idx1 == -1)   idx1=0;  idx2=StringUtils.findFirstOf(text," \t\n\r",position + 1);  if (idx2 == -1)   idx2=text.length();  token=text.substring(idx1 + 1,idx2);  if (position + 1 < idx2)   suffix=text.substring(position + 1,idx2).trim();  if (idx1 + 1 < position)   prefix=text.substring(idx1 + 1,position).trim();  idx=idx2;  String preToken="";  if (idx1 != 0) {    idx2=StringUtils.findLastNotOf(text," \t\n\r",idx1);    idx1=StringUtils.findLastOf(text," \t\n\r",idx2);    if (idx1 == -1)     idx1=0;    if (idx2 != -1)     preToken=text.substring(idx1,idx2 + 1).trim();  }  String nexToken="";  idx2=idx;  if (idx2 != text.length()) {    idx1=StringUtils.findFirstNotOf(text," \t\n\r",idx2 + 1);    idx2=StringUtils.findFirstOf(text," \t\n\r",idx1);    if (idx2 == -1)     idx2=text.length();    if (idx1 != -1)     nexToken=text.substring(idx1,idx2).trim();  }  String cps="";  cps+=" 01=" + token;  cps+=" 02=" + token.toLowerCase();  if (StringUtils.isFirstCap(token)) {    cps+=" 03";  }  if (map.containsKey(token.toLowerCase())) {    cps+=" 04";  }  if (StringUtils.containNumber(token)) {    cps+=" 05";  }  if (StringUtils.containLetter(token)) {    cps+=" 06";  }  if (StringUtils.containLetterAndDigit(token)) {    cps+=" 07";  }  if (StringUtils.isAllNumber(token)) {    cps+=" 08";  }  cps+=" 09=" + Integer.toString(StringUtils.countStops(token));  cps+=" 10=" + Integer.toString(StringUtils.countPuncs(token));  cps+=" 11=" + prefix;  cps+=" 12=" + prefix.toLowerCase();  if (StringUtils.isFirstCap(prefix)) {    cps+=" 13";  }  cps+=" 14=" + suffix;  cps+=" 15=" + suffix.toLowerCase();  if (StringUtils.isFirstCap(suffix)) {    cps+=" 16";  }  if (preToken != "") {    cps+=" 17=" + preToken;    cps+=" 18=" + preToken.toLowerCase();    if (StringUtils.isFirstCap(preToken)) {      cps+=" 19";    }    if (map.containsKey(preToken.toLowerCase())) {      cps+=" 20";    }    if (StringUtils.containNumber(preToken)) {      cps+=" 21";    }    if (StringUtils.containLetter(preToken)) {      cps+=" 22";    }    if (StringUtils.containLetterAndDigit(preToken)) {      cps+=" 23";    }    if (StringUtils.isAllNumber(preToken)) {      cps+=" 24";    }    cps+=" 25=" + Integer.toString(StringUtils.countStops(preToken));    cps+=" 26=" + Integer.toString(StringUtils.countPuncs(preToken));  } else {    cps+=" 27=null";  }  if (nexToken != "") {    cps+=" 28=" + nexToken;    cps+=" 29=" + nexToken.toLowerCase();    if (StringUtils.isFirstCap(nexToken)) {      cps+=" 30";    }    if (map.containsKey(nexToken.toLowerCase())) {      cps+=" 31";    }    if (nexToken.startsWith("\"") || nexToken.startsWith("''") || nexToken.startsWith("``")|| nexToken.startsWith("'")|| nexToken.startsWith("`")) {      cps+=" 39";    }    if (StringUtils.isFirstCap(nexToken)) {      cps+=" 40";    }    if (StringUtils.containNumber(nexToken)) {      cps+=" 32";    }    if (StringUtils.containLetter(nexToken)) {      cps+=" 33";    }    if (StringUtils.containLetterAndDigit(nexToken)) {      cps+=" 34";    }    if (StringUtils.isAllNumber(nexToken)) {      cps+=" 35";    }    cps+=" 36=" + Integer.toString(StringUtils.countStops(nexToken));    cps+=" 37=" + Integer.toString(StringUtils.countPuncs(nexToken));  } else {    cps+=" 38=null";  }  if (token.contains("@"))   cps+=" 39";  cps+=" 40=" + prefix.length();  cps+=" 41=" + suffix.length();  if (token.contains("/"))   cps+=" 42";  if (nexToken != "")   cps+=" 43=" + nexToken.charAt(0);  return cps.trim();}  }
class C{  private void initBPShipmentDetails(int C_BPartner_ID){  log.config("C_BPartner_ID" + C_BPartner_ID);  shipmentField.removeActionListener(this);  shipmentField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  shipmentField.addItem(pp);  ArrayList<KeyNamePair> list=loadShipmentData(C_BPartner_ID);  for (  KeyNamePair knp : list)   shipmentField.addItem(knp);  shipmentField.setSelectedIndex(0);  shipmentField.addActionListener(this);}  }
class C{  protected void consumeStack(Instruction ins){  ConstantPoolGen cpg=getCPG();  TypeFrame frame=getFrame();  int numWordsConsumed=ins.consumeStack(cpg);  if (numWordsConsumed == Constants.UNPREDICTABLE) {    throw new InvalidBytecodeException("Unpredictable stack consumption for " + ins);  }  if (numWordsConsumed > frame.getStackDepth()) {    throw new InvalidBytecodeException("Stack underflow for " + ins + ", "+ numWordsConsumed+ " needed, "+ frame.getStackDepth()+ " avail, frame is "+ frame);  }  try {    while (numWordsConsumed-- > 0) {      frame.popValue();    }  } catch (  DataflowAnalysisException e) {    throw new InvalidBytecodeException("Stack underflow for " + ins + ": "+ e.getMessage());  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  protected boolean mustExpandNode(){  return Boolean.TRUE.equals(this.getFeature().getOpen());}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  private synchronized void stopImsConnection(TerminationReason reasonCode) throws PayloadException, NetworkException, ContactManagerException {  if (mImsPollingThreadId == -1) {    return;  }  if (sLogger.isActivated()) {    sLogger.info("Stop the IMS connection manager");  }  mImsPollingThreadId=-1;  mImsPollingThread.interrupt();  mImsPollingThread=null;  if (mImsServicesStarted) {    mImsModule.stopImsServices(reasonCode);    mImsServicesStarted=false;  }}  }
class C{  protected IssueMatcher addPropertyMatcher(IssuePropertyMatcher propertyMatcher){  issueMatcher.addPropertyMatcher(Objects.requireNonNull(propertyMatcher));  return issueMatcher;}  }
class C{  public static void main(String[] args) throws Throwable {  Agent localAgent=createAgent(2020);  localAgent.setNominationStrategy(NominationStrategy.NOMINATE_HIGHEST_PRIO);  localAgent.addStateChangeListener(new IceProcessingListener());  localAgent.setControlling(false);  String localSDP=SdpUtils.createSDPDescription(localAgent);  Thread.sleep(500);  System.out.println("=================== feed the following" + " to the remote agent ===================");  System.out.println(localSDP);  System.out.println("======================================" + "========================================\n");  String sdp=readSDP();  startTime=System.currentTimeMillis();  SdpUtils.parseSDP(localAgent,sdp);  localAgent.startConnectivityEstablishment();  Thread.sleep(60000);}  }
class C{  public AsyncResult DeleteSubscriptionsAsync(DeleteSubscriptionsRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public String toJson(){  return gson.toJson(this);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"rcr");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a rcr instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize sourceSize=sourceResult.getSize();  final OperandSize targetSize=targetResult.getSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(sourceSize);  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String rotateMask=environment.getNextVariableString();  final String rotateMaskZero=environment.getNextVariableString();  final String rotateMaskLessOne=environment.getNextVariableString();  final String rotateMaskOne=environment.getNextVariableString();  final String shiftedOp1=environment.getNextVariableString();  final String realOp1=environment.getNextVariableString();  final String shrValue=environment.getNextVariableString();  final String shredResult=environment.getNextVariableString();  final String shlValue=environment.getNextVariableString();  final String shledResult=environment.getNextVariableString();  final String result=environment.getNextVariableString();  final String shiftedResult=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempOfLsb=environment.getNextVariableString();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(sourceSize));  final String maskSize=String.valueOf(TranslationHelpers.getAllBitsMask(sourceSize));  final String modVal=String.valueOf(sourceSize.getBitSize());  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(sourceSize));  instructions.add(ReilHelpers.createMod(offset,targetSize,targetRegister,targetSize,modVal,targetSize,rotateMask));  instructions.add(ReilHelpers.createBisz(offset + 1,targetSize,rotateMask,OperandSize.BYTE,rotateMaskZero));  instructions.add(ReilHelpers.createSub(offset + 2,targetSize,rotateMask,targetSize,"1",targetSize,rotateMaskLessOne));  instructions.add(ReilHelpers.createBisz(offset + 3,targetSize,rotateMaskLessOne,OperandSize.BYTE,rotateMaskOne));  instructions.add(ReilHelpers.createBsh(offset + 4,sourceSize,sourceRegister,OperandSize.BYTE,"1",resultSize,shiftedOp1));  instructions.add(ReilHelpers.createOr(offset + 5,resultSize,shiftedOp1,OperandSize.BYTE,Helpers.CARRY_FLAG,resultSize,realOp1));  instructions.add(ReilHelpers.createSub(offset + 6,OperandSize.BYTE,"0",OperandSize.BYTE,rotateMask,OperandSize.BYTE,shrValue));  instructions.add(ReilHelpers.createBsh(offset + 7,sourceSize,realOp1,OperandSize.BYTE,shrValue,sourceSize,shredResult));  instructions.add(ReilHelpers.createSub(offset + 8,OperandSize.BYTE,modVal,OperandSize.BYTE,rotateMask,OperandSize.BYTE,shlValue));  instructions.add(ReilHelpers.createBsh(offset + 9,sourceSize,realOp1,OperandSize.BYTE,shlValue,sourceSize,shledResult));  instructions.add(ReilHelpers.createOr(offset + 10,sourceSize,shredResult,sourceSize,shledResult,sourceSize,result));  instructions.add(ReilHelpers.createBsh(offset + 11,resultSize,result,OperandSize.BYTE,"-1",resultSize,shiftedResult));  instructions.add(ReilHelpers.createAnd(offset + 12,resultSize,shiftedResult,sourceSize,maskSize,sourceSize,truncatedResult));  final String jmpGoal="666";  instructions.add(ReilHelpers.createJcc(offset + 13,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal));  final String jmpGoal2="666";  instructions.add(ReilHelpers.createJcc(offset + 14,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createUndef(offset + 15,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String jmpGoal3="666";  instructions.add(ReilHelpers.createJcc(offset + 15,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal3));  instructions.add(ReilHelpers.createAnd(offset + 16,sourceSize,sourceRegister,sourceSize,msbMask,sourceSize,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 17,sourceSize,tempOf,sourceSize,shiftMsbLsb,OperandSize.BYTE,tempOfLsb));  instructions.add(ReilHelpers.createXor(offset + 18,OperandSize.BYTE,tempOfLsb,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 19,resultSize,result,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  Helpers.writeBack(environment,offset + 20,targetOperand,result,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  @Restrictions({@Restrict({"SYSTEM_ADMIN","SECURITY_ADMIN"}),@Restrict({"RESTRICTED_SYSTEM_ADMIN","RESTRICTED_SECURITY_ADMIN"})}) public static void upload(@Required File licenseFile){  if (Validation.hasErrors()) {    params.flash();    Validation.keep();    license();  }  try {    String license=FileUtils.readFileToString(licenseFile);    if (StringUtils.isBlank(license)) {      Logger.error("License file is empty");      Validation.addError("setup.licenseFile",MessagesUtils.get("license.uploadFailed"));      params.flash();      Validation.keep();      license();    }    LicenseUtils.updateLicenseText(license);    index();  } catch (  IOException e) {    Validation.addError("setup.licenseFile",MessagesUtils.get("license.uploadFailed"));    Logger.error(e,"Failed to read license file");    Validation.keep();    license();  }}  }
class C{  public static void writeSharedPreference(Context context,String key,String value){  try {    SharedPreferences settings=getSharedPreferenceManager(context);    SharedPreferences.Editor editor=settings.edit();    editor.putString(key,value);    editor.apply();  } catch (  Exception e) {  }}  }
class C{  public void removeOwnerFromStream(String stream,SocketAddress addr,String reason){  if (stream2Addresses.remove(stream,addr)) {    logger.info("Removed stream to host mapping for (stream: {} -> host: {}) : reason = '{}'.",new Object[]{stream,addr,reason});  }  Set<String> streamsForHost=address2Streams.get(addr);  if (null != streamsForHost) {synchronized (streamsForHost) {      if (streamsForHost.remove(stream)) {        logger.info("Removed stream ({}) from host {} : reason = '{}'.",new Object[]{stream,addr,reason});        if (streamsForHost.isEmpty()) {          address2Streams.remove(addr,streamsForHost);        }        ownershipStatsLogger.onRemove(stream);      }    }  }}  }
class C{  @Override public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof String)) {    throw new EncoderException("Parameter supplied to Metaphone encode is not of type java.lang.String");  }  return metaphone((String)pObject);}  }
class C{  static public double j0(double x) throws ArithmeticException {  double ax;  if ((ax=Math.abs(x)) < 8.0) {    double y=x * x;    double ans1=57568490574.0 + y * (-13362590354.0 + y * (651619640.7 + y * (-11214424.18 + y * (77392.33017 + y * (-184.9052456)))));    double ans2=57568490411.0 + y * (1029532985.0 + y * (9494680.718 + y * (59272.64853 + y * (267.8532712 + y * 1.0))));    return ans1 / ans2;  } else {    double z=8.0 / ax;    double y=z * z;    double xx=ax - 0.785398164;    double ans1=1.0 + y * (-0.1098628627e-2 + y * (0.2734510407e-4 + y * (-0.2073370639e-5 + y * 0.2093887211e-6)));    double ans2=-0.1562499995e-1 + y * (0.1430488765e-3 + y * (-0.6911147651e-5 + y * (0.7621095161e-6 - y * 0.934935152e-7)));    return Math.sqrt(0.636619772 / ax) * (Math.cos(xx) * ans1 - z * Math.sin(xx) * ans2);  }}  }
class C{  public DateTimeFormatterBuilder appendEraText(){  return appendText(DateTimeFieldType.era());}  }
class C{  protected void uninstallListeners(JPanel p){  p.removePropertyChangeListener(this);}  }
class C{  @Override public void report(){  super.report(new MethodNameFunction());}  }
class C{  protected Expression string(int opPos) throws TransformerException {  return compileUnary(new org.apache.xpath.operations.String(),opPos);}  }
class C{  public static SauceCommandLineArguments initialize(String[] args){  SauceCommandLineArguments result=new SauceCommandLineArguments();  JCommander jCommander=new JCommander();  jCommander.setAcceptUnknownOptions(true);  jCommander.addObject(result);  jCommander.parse(args);  ARGUMENTS=result;  return ARGUMENTS;}  }
class C{  public static Validator<CharSequence> noWhitespace(@NonNull final Context context,@StringRes final int resourceId){  return new NoWhitespaceValidator(context,resourceId);}  }
class C{  private final void init() throws MalformedURLException {  if (!(this.hostPath.exists())) {    this.hostPath.mkdirs();    if (!this.hostPath.exists()) {      throw new MalformedURLException("hostPath could not be created: " + this.hostPath.toString());    }  }  this.depthStacks=new TreeMap<Integer,Index>();  int size=openAllStacks();  if (log.isInfo())   log.info("opened HostQueue " + this.hostPath.getAbsolutePath() + " with "+ size+ " urls.");}  }
class C{  public Bundler putParcelable(String key,Parcelable value){  bundle.putParcelable(key,value);  return this;}  }
class C{  static void boot(AOSOptions options){  Controller.dcg=new PartialCallGraph(options.INLINE_AI_SEED_MULTIPLIER * (1 / options.INLINE_AI_HOT_CALLSITE_THRESHOLD));  RuntimeMeasurements.registerDecayableObject(Controller.dcg);  RuntimeMeasurements.installTimerNullListener(callDensityListener);  callDensityListener.activate();  if (options.GATHER_PROFILE_DATA) {    RuntimeMeasurements.registerReportableObject(Controller.dcg);  }}  }
class C{  int fieldBitExtent(FieldModel field){  return fieldData.get(field).bitExtent;}  }
class C{  synchronized void initmessage(DCCppReply l){  boolean oldState=statusRequested;  message(l);  statusRequested=oldState;}  }
class C{  public OFNiciraVendorData(int dataType){  this.dataType=dataType;}  }
class C{  public static NetworkInfo fromAddress(final Address address){  return fromVersion(address.getVersion());}  }
class C{  public ConstantPopulation(Type units){  super(units);}  }
class C{  public DSRecord(Name name,int dclass,long ttl,int footprint,int alg,int digestid,byte[] digest){  super(name,Type.DS,dclass,ttl);  this.footprint=checkU16("footprint",footprint);  this.alg=checkU8("alg",alg);  this.digestid=checkU8("digestid",digestid);  this.digest=digest;}  }
class C{  public static boolean decomposeLU(int dim,double[] matrix0,int[] row_perm,int[] even_row_xchg){  double row_scale[]=new double[dim];  int i, j;  int ptr, rs, mtx;  double big, temp;  ptr=0;  rs=0;  even_row_xchg[0]=1;  i=dim;  while (i-- != 0) {    big=0.0;    j=dim;    while (j-- != 0) {      temp=matrix0[ptr++];      temp=MathUtils.abs(temp);      if (temp > big) {        big=temp;      }    }    if (big == 0.0) {      return false;    }    row_scale[rs++]=1.0 / big;  }  mtx=0;  for (j=0; j < dim; j++) {    int imax, k;    int target, p1, p2;    double sum;    for (i=0; i < j; i++) {      target=mtx + (dim * i) + j;      sum=matrix0[target];      k=i;      p1=mtx + (dim * i);      p2=mtx + j;      while (k-- != 0) {        sum-=matrix0[p1] * matrix0[p2];        p1++;        p2+=dim;      }      matrix0[target]=sum;    }    big=0.0;    imax=-1;    for (i=j; i < dim; i++) {      target=mtx + (dim * i) + j;      sum=matrix0[target];      k=j;      p1=mtx + (dim * i);      p2=mtx + j;      while (k-- != 0) {        sum-=matrix0[p1] * matrix0[p2];        p1++;        p2+=dim;      }      matrix0[target]=sum;      if ((temp=row_scale[i] * MathUtils.abs(sum)) >= big) {        big=temp;        imax=i;      }    }    if (imax < 0) {      throw new RuntimeException();    }    if (j != imax) {      k=dim;      p1=mtx + (dim * imax);      p2=mtx + (dim * j);      while (k-- != 0) {        temp=matrix0[p1];        matrix0[p1++]=matrix0[p2];        matrix0[p2++]=temp;      }      row_scale[imax]=row_scale[j];      even_row_xchg[0]=-even_row_xchg[0];    }    row_perm[j]=imax;    if (matrix0[(mtx + (dim * j) + j)] == 0.0) {      return false;    }    if (j != (dim - 1)) {      temp=1.0 / (matrix0[(mtx + (dim * j) + j)]);      target=mtx + (dim * (j + 1)) + j;      i=(dim - 1) - j;      while (i-- != 0) {        matrix0[target]*=temp;        target+=dim;      }    }  }  return true;}  }
class C{  public synchronized void addObject(Object obj){  fifo.addElement(obj);  nbObjects++;  notifyAll();}  }
class C{  @Override protected void initData(){}  }
class C{  private boolean hasNextProxy(){  return hasNextProxy;}  }
class C{  @Override public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){  CategoryPlot subplot=findSubplot(info,source);  if (subplot != null) {    subplot.zoomRangeAxes(factor,info,source,useAnchor);  } else {    Iterator iterator=getSubplots().iterator();    while (iterator.hasNext()) {      subplot=(CategoryPlot)iterator.next();      subplot.zoomRangeAxes(factor,info,source,useAnchor);    }  }}  }
class C{  protected void initSaveCompletedProgressAnimator(){  mSaveCompletedProgressAnimator=ObjectAnimator.ofFloat(this,SAVE_COMPLETED_PROGRESS_PROPERTY_NAME,1f,0f);}  }
class C{  public static GeoUri parse(String uri){  String scheme="geo:";  if (uri.length() < scheme.length() || !uri.substring(0,scheme.length()).equalsIgnoreCase(scheme)) {    throw Messages.INSTANCE.getIllegalArgumentException(18,scheme);  }  Builder builder=new Builder(null,null);  ClearableStringBuilder buffer=new ClearableStringBuilder();  String paramName=null;  boolean coordinatesDone=false;  for (int i=scheme.length(); i < uri.length(); i++) {    char c=uri.charAt(i);    if (c == ',' && !coordinatesDone) {      handleEndOfCoordinate(buffer,builder);      continue;    }    if (c == ';') {      if (coordinatesDone) {        handleEndOfParameter(buffer,paramName,builder);        paramName=null;      } else {        handleEndOfCoordinate(buffer,builder);        if (builder.coordB == null) {          throw Messages.INSTANCE.getIllegalArgumentException(21);        }        coordinatesDone=true;      }      continue;    }    if (c == '=' && coordinatesDone && paramName == null) {      paramName=buffer.getAndClear();      continue;    }    buffer.append(c);  }  if (coordinatesDone) {    handleEndOfParameter(buffer,paramName,builder);  } else {    handleEndOfCoordinate(buffer,builder);    if (builder.coordB == null) {      throw Messages.INSTANCE.getIllegalArgumentException(21);    }  }  return builder.build();}  }
class C{  void updateButtons(){  startStopButton.setText(operationEditor.running ? "\u25FC" : "\u23f5");}  }
class C{  @Override public MapsCard menuItem(@AnyRes int menuItem){  if (menuItem == 0) {    Log.e("MenuItem","Impossible to set Menu Item to 0! Please Check it");  } else {    mMenuItem=menuItem;    isMenuItem=true;  }  return this;}  }
class C{  @Override protected Cipher initCipher(int mode) throws GeneralSecurityException {  Provider provider=Security.getProvider("SunJCE");  if (provider == null) {    throw new RuntimeException("SunJCE provider does not exist.");  }  PBEKeySpec pbeKeySpec=new PBEKeySpec(password.toCharArray(),salt,DEFAULT_ITERATION,PKDF2_DEFAULT_KEY_LEN);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(baseAlgo);  SecretKey key=keyFactory.generateSecret(pbeKeySpec);  Cipher cipher=Cipher.getInstance(CIPHER_TRANSFORMATION,provider);  cipher.init(mode,new SecretKeySpec(key.getEncoded(),KEY_ALGORITHM),new IvParameterSpec(iv));  return cipher;}  }
class C{  public static void sendEvent(int category,int action,String label){  sendEvent(getString(category),getString(action),label);}  }
class C{  private final synchronized void cleanLast0(final byte[] b,final int start) throws IOException {  assert b.length - start >= this.recordsize;  final long s=this.size();  int p=inCache(s - 1);  final int q=(p >= 0) ? -1 : inBuffer(s - 1);  if ((p < 0) && (q < 0)) {    fillCache(this.size() - 1);    p=inCache(this.size() - 1);    assert p >= 0;  }  if (p >= 0) {    System.arraycopy(this.cache,p * this.recordsize,b,start,this.recordsize);    assert this.buffercount == 0;    this.raf.setLength((s - 1) * this.recordsize);    this.cachecount--;    return;  }  if (q >= 0) {    System.arraycopy(this.buffer,q * this.recordsize,b,start,this.recordsize);    assert this.buffercount > 0;    this.buffercount--;    return;  }  assert false;}  }
class C{  public boolean stopCellEditing(){  return delegate.stopCellEditing();}  }
class C{  private void prepareIsUseInvertedIndex(List<CarbonDimension> dims,GraphConfigurationInfo graphConfig){  List<Boolean> isUseInvertedIndexList=new ArrayList<Boolean>();  for (  CarbonDimension dimension : dims) {    if (dimension.isUseInvertedIndnex()) {      isUseInvertedIndexList.add(true);    } else {      isUseInvertedIndexList.add(false);    }  }  graphConfig.setIsUseInvertedIndex(isUseInvertedIndexList.toArray(new Boolean[isUseInvertedIndexList.size()]));}  }
class C{  @Override public boolean shouldBeConflated(){  return false;}  }
class C{  private void showMessage(String message){  Toast.makeText(SampleRetrofitActivity.this,message,Toast.LENGTH_SHORT).show();}  }
class C{  public void testStarted(Description description) throws Exception {}  }
class C{  private static void prepareForSave(SimpleGroup parent){  for (  SimpleGroup group : parent.group) {    prepareForSave(group);  }  for (  SimpleEntry entry : parent.entry) {    for (    EntryClasses.StringProperty property : entry.string) {      boolean shouldProtect=parent.database.shouldProtect(property.getKey());      property.getValue().setProtected(shouldProtect);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:46.892 -0500",hash_original_method="7C382FB07C89ED3AC2E0C82EFB5FB1EF",hash_generated_method="5FDF3BCD329ED2F9585BD699994F5EF8") private void findClassesInDirectory(File classDir,String packagePrefix,String pathPrefix,Set<String> classNames,Set<String> subpackageNames) throws IOException {  File directory=new File(classDir,pathPrefix);  if (directory.exists()) {    for (    File f : directory.listFiles()) {      String name=f.getName();      if (name.endsWith(CLASS_EXTENSION) && isToplevelClass(name)) {        classNames.add(packagePrefix + getClassName(name));      } else       if (f.isDirectory()) {        subpackageNames.add(packagePrefix + name);      }    }  }}  }
class C{  public static String printPlasmid(ArrayList<Part> plasmid){  String s="";  for (  Part part : plasmid) {    s+=part.toString() + "\n";  }  return s;}  }
class C{  protected boolean maybeThrowAwayPoly(OMPoly poly){  double[] radians=poly.getLatLonArray();  double lat, lon, thresh=ProjMath.degToRad(threshold);  radians=coalesce_points(radians,0.0001f,poly.isPolygon());  poly.setLocation(radians,OMGraphic.RADIANS);  if (radians.length < 4) {    return true;  }  if (poly.isPolygon() && (radians.length < 6)) {    return true;  }  int len=radians.length;  double d;  for (int i=0; i < len; i+=2) {    lat=ProjMath.radToDeg(radians[i]);    lon=ProjMath.radToDeg(radians[i + 1]);    if (MoreMath.approximately_equal(lat,(float)(Math.round(lat)),zero_eps)) {      return false;    }    if (MoreMath.approximately_equal(lon,(float)(Math.round(lon)),zero_eps)) {      return false;    }    for (int j=i + 2; j < radians.length; j+=2) {      d=DrawUtil.distance(radians[i],radians[i + 1],radians[j],radians[j + 1]);      if (!MoreMath.approximately_equal(d,0f,thresh)) {        return false;      }    }  }  if (poly.isPolygon()) {    return true;  }  return (MoreMath.approximately_equal(ProjMath.radToDeg(radians[0]),ProjMath.radToDeg(radians[radians.length - 2]),zero_eps) && MoreMath.approximately_equal(ProjMath.radToDeg(radians[1]),ProjMath.radToDeg(radians[radians.length - 1]),zero_eps));}  }
class C{  public void toggleExpanded(){  if (isExpanded()) {    collapse();  } else {    expand();  }}  }
class C{  public double eval(double params[]){  return (Math.IEEEremainder(params[0],params[1]));}  }
class C{  private void ackPluginsInfo(){  U.quietAndInfo(log,"Configured plugins:");  if (plugins.isEmpty()) {    U.quietAndInfo(log,"  ^-- None");    U.quietAndInfo(log,"");  } else {    for (    PluginProvider plugin : plugins.values()) {      U.quietAndInfo(log,"  ^-- " + plugin.name() + " "+ plugin.version());      U.quietAndInfo(log,"  ^-- " + plugin.copyright());      U.quietAndInfo(log,"");    }  }}  }
class C{  protected void writeUTF(int code,String string) throws IOException {  OutputStream os=getOutputStream();  os.write(code);  int charLength=string.length();  int length=0;  for (int i=0; i < charLength; i++) {    char ch=string.charAt(i);    if (ch < 0x80)     length++; else     if (ch < 0x800)     length+=2; else     length+=3;  }  os.write(length >> 8);  os.write(length);  for (int i=0; i < length; i++) {    char ch=string.charAt(i);    if (ch < 0x80)     os.write(ch); else     if (ch < 0x800) {      os.write(0xc0 + (ch >> 6) & 0x1f);      os.write(0x80 + (ch & 0x3f));    } else {      os.write(0xe0 + (ch >> 12) & 0xf);      os.write(0x80 + ((ch >> 6) & 0x3f));      os.write(0x80 + (ch & 0x3f));    }  }}  }
class C{  public LicenseHeaderStep(String license,String delimiter){  if (delimiter.contains("\n")) {    throw new GradleException("The delimiter must not contain any newlines.");  }  license=LineEnding.toUnix(license);  if (!license.endsWith("\n")) {    license=license + "\n";  }  this.license=license;  this.delimiterPattern=Pattern.compile('^' + delimiter,Pattern.UNIX_LINES | Pattern.MULTILINE);}  }
class C{  public FrameBorder(JComponent comp){  jcomp=comp;}  }
class C{  public NamedColor(Color color,String name){  super(color.getRGB());  this.name=name;}  }
class C{  @Override public void requestVoteReply(Message message,int fromMemberId,int term,boolean isPrevote,boolean voteGranted) throws GondolaException {  if (message.tracingInfo != null) {    logger.info("[{}-{}] recv({}): {}",gondola.getHostId(),memberId,fromMemberId,message.tracingInfo);  }  Peer peer=peers.get(fromMemberId);  if (peer == null) {    logger.error("Received rv from unknown member {}",fromMemberId);    return;  }  if (!enabled) {    return;  }  updateCurrentTerm(term,fromMemberId);  if (term >= currentTerm && isCandidate() && voteGranted) {    if (isPrevote) {      if (prevotesOnly) {        peer.prevoteGranted=true;        long prevotes=peers.values().stream().filter(null).count() + 1;        if (prevotes >= majority) {          logger.info("[{}-{}] Has majority of pre-votes ({}). " + "Incrementing currentTerm to {} and sending out request vote",gondola.getHostId(),memberId,prevotes,currentTerm + 1);          sendRequestVoteRequest(false);        }      }    } else     if (!prevotesOnly) {      peer.votedTerm=term;      peer.votedFor=memberId;      if (!isLeader() && votedFor == memberId) {        long votes=peers.values().stream().filter(null).count() + 1;        if (votes >= majority) {          becomeLeader();        }      }    } else {      logger.info("[{}-{}] Reject vote from {} for term {} because currently in prevote phase",gondola.getHostId(),memberId,fromMemberId,term);    }  }}  }
class C{  private void println(String message){  Log.println(level,tag,message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.884 -0500",hash_original_method="AAC0170DE8A46A77F8ABEAF95E5D47DF",hash_generated_method="0303EF5FD77338E65FA4817037189CB6") public BasicHttpResponse(final StatusLine statusline){  this(statusline,null,null);}  }
class C{  @NotNull public OptionalInt findOptionalInt(@NotNull @SQL String sql,Object... args){  return findOptionalInt(SqlQuery.query(sql,args));}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,Cookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          Cookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,Cookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public byte mayCatchException(TypeReference cand){  boolean seenMaybe=false;  byte t;  for (  TypeOperand exceptionType : exceptionTypes) {    t=ClassLoaderProxy.includesType(exceptionType.getTypeRef(),cand);    if (t == YES)     return YES;    seenMaybe|=(t == MAYBE);    t=ClassLoaderProxy.includesType(cand,exceptionType.getTypeRef());    if (t == YES)     return YES;    seenMaybe|=(t == MAYBE);  }  return seenMaybe ? MAYBE : NO;}  }
class C{  public JavaClass lookupClass(@Nonnull @DottedClassName String className) throws ClassNotFoundException {  try {    if (className.length() == 0) {      throw new IllegalArgumentException("Class name is empty");    }    if (!ClassName.isValidClassName(className)) {      throw new ClassNotFoundException("Invalid class name: " + className);    }    return Global.getAnalysisCache().getClassAnalysis(JavaClass.class,DescriptorFactory.instance().getClassDescriptor(ClassName.toSlashedClassName(className)));  } catch (  CheckedAnalysisException e) {    throw new ClassNotFoundException("Class not found: " + className,e);  }}  }
class C{  public static <T,L extends List<T>>L sortThis(L list,Comparator<? super T> comparator){  if (list instanceof MutableList) {    ((MutableList<T>)list).sortThis(comparator);  } else   if (list instanceof ArrayList) {    ArrayListIterate.sortThis((ArrayList<T>)list,comparator);  } else {    if (list.size() > 1) {      Collections.sort(list,comparator);    }  }  return list;}  }
class C{  protected void connect() throws Exception {  FloodlightModuleContext fmc=new FloodlightModuleContext();  ThreadPool tp=new ThreadPool();  syncManager=new RemoteSyncManager();  fmc.addService(IThreadPoolService.class,tp);  fmc.addService(ISyncService.class,syncManager);  fmc.addConfigParam(syncManager,"hostname",settings.hostname);  fmc.addConfigParam(syncManager,"port",Integer.toString(settings.port));  if (settings.authScheme != null) {    fmc.addConfigParam(syncManager,"authScheme",settings.authScheme.toString());    fmc.addConfigParam(syncManager,"keyStorePath",settings.keyStorePath);    fmc.addConfigParam(syncManager,"keyStorePassword",settings.keyStorePassword);  }  tp.init(fmc);  syncManager.init(fmc);  tp.startUp(fmc);  syncManager.startUp(fmc);  out.println("Using remote sync service at " + settings.hostname + ":"+ settings.port);}  }
class C{  protected HashFunctions(){}  }
class C{  private void addBoard(){  board=new TicTacToeBoard();  board.setPosition(83,114);  zone.add(board);  board.addToWorld();}  }
class C{  private boolean existsSopOrgSetting(){  for (  VOConfigurationSetting setting : configurationSettings) {    if (setting.getInformationId().getKeyName().equals(SOP_ORGANIZATION_IDENTIFIER) && setting.getValue().trim().length() > 0) {      return true;    }  }  return false;}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  m_instances=new Instances(data);  m_replaceMissing=new ReplaceMissingValues();  m_replaceMissing.setInputFormat(m_instances);  m_instances=Filter.useFilter(m_instances,m_replaceMissing);  m_nominalToBinary=new NominalToBinary();  m_nominalToBinary.setInputFormat(m_instances);  m_instances=Filter.useFilter(m_instances,m_nominalToBinary);  m_removeUseless=new RemoveUseless();  m_removeUseless.setInputFormat(m_instances);  m_instances=Filter.useFilter(m_instances,m_removeUseless);  m_instances.randomize(new Random(1));  m_ruleSet=new ArrayList<Rule>();  Rule tempRule;  if (m_generateRules) {    Instances tempInst=m_instances;    do {      tempRule=new Rule();      tempRule.setSmoothing(!m_unsmoothedPredictions);      tempRule.setRegressionTree(m_regressionTree);      tempRule.setUnpruned(m_useUnpruned);      tempRule.setSaveInstances(false);      tempRule.setMinNumInstances(m_minNumInstances);      tempRule.buildClassifier(tempInst);      m_ruleSet.add(tempRule);      tempInst=tempRule.notCoveredInstances();      tempRule.freeNotCoveredInstances();    } while (tempInst.numInstances() > 0);  } else {    tempRule=new Rule();    tempRule.setUseTree(true);    tempRule.setSmoothing(!m_unsmoothedPredictions);    tempRule.setSaveInstances(m_saveInstances);    tempRule.setRegressionTree(m_regressionTree);    tempRule.setUnpruned(m_useUnpruned);    tempRule.setMinNumInstances(m_minNumInstances);    Instances temp_train;    temp_train=m_instances;    tempRule.buildClassifier(temp_train);    m_ruleSet.add(tempRule);  }  m_instances=new Instances(m_instances,0);}  }
class C{  private ExceptionsAttribute(ConstPool cp,ExceptionsAttribute src,Map classnames){  super(cp,tag);  copyFrom(src,classnames);}  }
class C{  @Override public void handleMessage(Message msg){  invalidate();  if (isSpinning) {    progress+=spinSpeed;    if (progress > 360) {      progress=0;    }    spinHandler.sendEmptyMessageDelayed(0,delayMillis);  }}  }
class C{  static protected boolean hasList(SIPHeader sipHeader){  if (sipHeader instanceof SIPHeaderList)   return false; else {    Class<?> headerClass=sipHeader.getClass();    return headerListTable.get(headerClass) != null;  }}  }
class C{  public TAnnotation createTAnnotation(){  TAnnotationImpl tAnnotation=new TAnnotationImpl();  return tAnnotation;}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  static MutableBigInteger modInverseBP2(MutableBigInteger mod,int k){  return fixup(new MutableBigInteger(1),new MutableBigInteger(mod),k);}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  public static boolean showGuidelines(){  if ((Math.abs(Edge.LEFT.getCoordinate() - Edge.RIGHT.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT) || (Math.abs(Edge.TOP.getCoordinate() - Edge.BOTTOM.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT))   return false; else   return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final GF2nPolynomial add(GF2nPolynomial b) throws RuntimeException {  GF2nPolynomial result;  if (size() >= b.size()) {    result=new GF2nPolynomial(size());    int i;    for (i=0; i < b.size(); i++) {      result.coeff[i]=(GF2nElement)coeff[i].add(b.coeff[i]);    }    for (; i < size(); i++) {      result.coeff[i]=coeff[i];    }  } else {    result=new GF2nPolynomial(b.size());    int i;    for (i=0; i < size(); i++) {      result.coeff[i]=(GF2nElement)coeff[i].add(b.coeff[i]);    }    for (; i < b.size(); i++) {      result.coeff[i]=b.coeff[i];    }  }  return result;}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return DATE_FORMAT.parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=DATE_TIME_FORMAT.parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=DATE_TIME_FORMAT.parse(when);    }    return date;  }}  }
class C{  public void beforeFirst() throws SQLException {  checkState();  rs.beforeFirst();  notifyCursorMoved();}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_weather,container,false);  this.initData();  this.initWidget(view);  this.reset();  return view;}  }
class C{  static public void assertEquals(float expected,float actual,float delta){  assertEquals(null,expected,actual,delta);}  }
class C{  @Override public void initCPTs(BayesNet bayesNet) throws Exception {  Instances instances=bayesNet.m_Instances;  int nMaxParentCardinality=1;  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    if (bayesNet.getParentSet(iAttribute).getCardinalityOfParents() > nMaxParentCardinality) {      nMaxParentCardinality=bayesNet.getParentSet(iAttribute).getCardinalityOfParents();    }  }  bayesNet.m_Distributions=new Estimator[instances.numAttributes()][nMaxParentCardinality];  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getCardinalityOfParents(); iParent++) {      bayesNet.m_Distributions[iAttribute][iParent]=new DiscreteEstimatorBayes(instances.attribute(iAttribute).numValues(),m_fAlpha);    }  }}  }
class C{  @Override protected void onResume(){  super.onResume();  SharedPreferences prefs=getPreferences(0);  String restoredText=prefs.getString("text",null);  if (restoredText != null) {    mSaved.setText(restoredText,TextView.BufferType.EDITABLE);    int selectionStart=prefs.getInt("selection-start",-1);    int selectionEnd=prefs.getInt("selection-end",-1);    if (selectionStart != -1 && selectionEnd != -1) {      mSaved.setSelection(selectionStart,selectionEnd);    }  }}  }
class C{  public void executeStatement(String statement) throws SQLException, NoConnectionException {  if (connection != null) {    Statement st=connection.createStatement();    st.execute(statement);  } else   throw new NoConnectionException();}  }
class C{  @Override public PatternTokenizer create(final AttributeFactory factory){  return new PatternTokenizer(factory,pattern,group);}  }
class C{  public void initialise(int k,int tau,double epsilon) throws Exception {  miCalc.setProperty(MutualInfoCalculatorMultiVariateKernel.KERNEL_WIDTH_PROP_NAME,Double.toString(epsilon));  super.initialise(k,tau);}  }
class C{  public Cookie2(final String domain,final String name,final String value){  super(domain,name,value);}  }
class C{  private Tradingday findTradingdayById(Integer id){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    Tradingday instance=entityManager.find(Tradingday.class,id);    return instance;  } catch (  Exception re) {    throw re;  }}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info("completeIt - " + toString());  MBankStatementLine[] lines=getLines(false);  for (int i=0; i < lines.length; i++) {    MBankStatementLine line=lines[i];    if (line.getC_Payment_ID() != 0) {      MPayment payment=new MPayment(getCtx(),line.getC_Payment_ID(),get_TrxName());      payment.setIsReconciled(true);      payment.save(get_TrxName());    }  }  MBankAccount ba=getBankAccount();  ba.load(get_TrxName());  ba.setCurrentBalance(ba.getCurrentBalance().add(getStatementDifference()));  ba.save(get_TrxName());  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  private void processResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  if (innerState.mContinuingDownload) {    return;  }  readResponseHeaders(state,innerState,response);  try {    state.mFilename=mService.generateSaveFile(mInfo.mFileName,mInfo.mTotalBytes);  } catch (  DownloaderService.GenerateSaveFileError exc) {    throw new StopRequest(exc.mStatus,exc.mMessage);  }  try {    state.mStream=new FileOutputStream(state.mFilename);  } catch (  FileNotFoundException exc) {    File pathFile=new File(Helpers.getSaveFilePath(mService));    try {      if (pathFile.mkdirs()) {        state.mStream=new FileOutputStream(state.mFilename);      }    } catch (    Exception ex) {      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while opening destination file: " + exc.toString(),exc);    }  }  if (Constants.LOGV) {    Log.v(Constants.TAG,"writing " + mInfo.mUri + " to "+ state.mFilename);  }  updateDatabaseFromHeaders(state,innerState);  checkConnectivity(state);}  }
class C{  public void paintButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void copyPredicates(){  predicates=new ArrayList<>(groups.size());  for (  List<Segment> group : groups) {    List<OffsetPredicate> groupPredicates=new ArrayList<>(group.size());    for (    Segment segment : group) {      groupPredicates.add(segment.offsetPredicate().copy());    }    predicates.add(groupPredicates);  }}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  @Override public void deleteAllTokensForUser(String userName,boolean includeProxyTokens){  try {    List<StorageOSUserDAO> userRecords=getUserRecords(userName.toLowerCase());    for (    StorageOSUserDAO userRecord : userRecords) {      List<Token> tokensToDelete=getTokensForUserId(userRecord.getId());      for (      Token token : tokensToDelete) {        _log.info("Removing token {} using userDAO {} for username {}",new String[]{token.getId().toString(),userRecord.getId().toString(),userName});        _dbClient.removeObject(token);        cleanUpRequestedTokenMap(token);      }      List<ProxyToken> pTokensToDelete=getProxyTokensForUserId(userRecord.getId());      if (includeProxyTokens) {        for (        ProxyToken token : pTokensToDelete) {          _log.info("Removing proxy token {} using userDAO {} for username {}",new String[]{token.getId().toString(),userRecord.getId().toString(),userName});          _dbClient.removeObject(token);        }        _log.info("Marking for deletion: user record {} for username {}",userRecord.getId().toString(),userName);        _dbClient.markForDeletion(userRecord);      } else       if (pTokensToDelete.isEmpty()) {        _log.info("No proxy tokens found. Marking for deletion: user record {} for username {}",userRecord.getId().toString(),userName);        _dbClient.markForDeletion(userRecord);      }    }  } catch (  DatabaseException ex) {    throw SecurityException.fatals.exceptionDuringTokenDeletionForUser(userName,ex);  }}  }
class C{  @Override public void endWindow(){  if (count.isConnected() && generatedTupleCount > 0) {    long elapsedTime=System.currentTimeMillis() - windowStartTime;    if (elapsedTime == 0) {      elapsedTime=1;    }    long tcount=generatedTupleCount;    long average;    if (rolling_window_count == 1) {      average=(tcount * 1000) / elapsedTime;    } else {      int slots;      if (count_denominator == rolling_window_count) {        tuple_numbers[tuple_index]=tcount;        time_numbers[tuple_index]=elapsedTime;        slots=rolling_window_count;        tuple_index++;        if (tuple_index == rolling_window_count) {          tuple_index=0;        }      } else {        tuple_numbers[count_denominator - 1]=tcount;        time_numbers[count_denominator - 1]=elapsedTime;        slots=count_denominator;        count_denominator++;      }      long time_slot=0;      long num_tuples=0;      for (int i=0; i < slots; i++) {        num_tuples+=tuple_numbers[i];        time_slot+=time_numbers[i];      }      average=(num_tuples * 1000) / time_slot;    }    HashMap<String,Number> tuples=new HashMap<String,Number>();    tuples.put(OPORT_COUNT_TUPLE_AVERAGE,new Long(average));    tuples.put(OPORT_COUNT_TUPLE_COUNT,new Long(tcount));    tuples.put(OPORT_COUNT_TUPLE_TIME,new Long(elapsedTime));    tuples.put(OPORT_COUNT_TUPLE_TUPLES_PERSEC,new Long((tcount * 1000) / elapsedTime));    tuples.put(OPORT_COUNT_TUPLE_WINDOWID,new Integer(count_windowid++));    count.emit(tuples);  }  if (--maxCountOfWindows == 0) {    LOG.info("reached maxCountOfWindows, interrupting thread.");    Thread.currentThread().interrupt();  }}  }
class C{  protected boolean isSnapshotCreationpermissible(BlockConsistencyGroup consistencyGroup){  String volType=null;  boolean isPermissible=false;  ScopedLabelSet tagSet=consistencyGroup.getTag();  if (tagSet != null) {    for (    ScopedLabel tag : tagSet) {      if (tag.getScope().equals("volume_types")) {        volType=tag.getLabel();        break;      }    }  }  if (volType != null) {    VirtualPool vPool=getCinderHelper().getVpool(volType);    if (vPool.getMaxNativeSnapshots() > 0) {      isPermissible=true;    }  }  return isPermissible;}  }
class C{  public static boolean isValidContact(String number){synchronized (ContactUtil.class) {    if (mContactUtil == null) {      mContactUtil=com.gsma.services.rcs.contact.ContactUtil.getInstance(RiApplication.getAppContext());    }  }  try {    return mContactUtil.isValidContact(number);  } catch (  RcsPermissionDeniedException e) {    String errorMessage="Failed to validate phone number '" + number + "'!";    Log.e(LOGTAG,errorMessage);    return false;  }}  }
class C{  public byte[] encodeData(byte[] data,int numErrorCorrectionBytes) throws DataTooLargeException {  if (data == null || data.length == 0) {    return null;  }  if ((data.length + numErrorCorrectionBytes) > 256) {    throw new DataTooLargeException("Data Length + Number or error correction bytes cannot exceed 256 bytes");  }  int totalBytes=numErrorCorrectionBytes + data.length;  int[] dataInts=new int[totalBytes];  for (int i=0; i < data.length; i++) {    dataInts[i]=data[i] & 0xFF;  }  encoder.encode(dataInts,numErrorCorrectionBytes);  ByteArrayOutputStream bos=new ByteArrayOutputStream();  for (  int i : dataInts) {    bos.write(i);  }  return bos.toByteArray();}  }
class C{  public static void statementsExecuted(int num){  currentStatement+=num;}  }
class C{  public TimeSeriesWrapper(DataWrapper data,Parameters params){  DataModelList dataSets=data.getDataModelList();  DataModelList timeSeriesDataSets=new DataModelList();  for (  DataModel dataModel : dataSets) {    if (!(dataModel instanceof DataSet)) {      throw new IllegalArgumentException("Only tabular data sets can be converted to time lagged form.");    }    DataSet dataSet=(DataSet)dataModel;    DataSet timeSeries=TimeSeriesUtils.createLagData(dataSet,params.getInt("numTimeLags",1));    if (dataSet.getName() != null) {      timeSeries.setName(dataSet.getName());    }    timeSeriesDataSets.add(timeSeries);  }  this.setDataModel(timeSeriesDataSets);  this.setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Expansion of parent data into lagged data.",getDataModelList());}  }
class C{  public void normalize(){  for (int i=0; i < points.size() / 2; i++) {    int j=points.size() - 1 - i;    if (!points.getCoordinate(i).equals(points.getCoordinate(j))) {      if (points.getCoordinate(i).compareTo(points.getCoordinate(j)) > 0) {        CoordinateSequences.reverse(points);      }      return;    }  }}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {}  }
class C{  public int compareTo(Short object){  return compare(value,object.value);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void log(Level level,String sourceclass,String sourcemethod,String message){  if (getEnabled())   m_Log.log(level,sourceclass,sourcemethod,message);}  }
class C{  public ConcurrentHashMapPro(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public static String addPropertiesToURI(URI uri,Map<String,String> properties) throws Exception {  return addPropertiesToURI(uri.toString(),properties);}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public ForcedDisconnectException(String message){  super(message);}  }
class C{  public static final int[] toIntArray(String s[]){  int y[]=new int[s.length];  for (int j=0; j < s.length; j++) {    y[j]=Integer.parseInt(s[j].trim());  }  return y;}  }
class C{  public static RefactoringStatus checkFilesToBeChanged(IFile[] files,IProgressMonitor monitor) throws CoreException {  ResourceChangeChecker checker=new ResourceChangeChecker();  for (int i=0; i < files.length; i++) {    checker.getDeltaFactory().change(files[i]);  }  return checker.check(monitor);}  }
class C{  public SpeechRecognizerDbmHandler innerRecognitionListener(@Nullable RecognitionListener innerRecognitionListener){  this.innerRecognitionListener=innerRecognitionListener;  return this;}  }
class C{  private static Region skew(Region t){  if (t.left.level == t.level) {    t=rotateWithLeftChild(t);  }  return t;}  }
class C{  @Override public void encrypt(long[] inbuffer,long[] outbuffer){  int nLen=inbuffer.length;  for (int nI=0; nI < nLen; nI++)   outbuffer[nI]=encryptBlock(inbuffer[nI]);}  }
class C{  public static boolean isExpired(MultiMap headers,Long timestamp){  if (headers != null && timestamp != null) {    Integer queueExpireAfter=getQueueExpireAfter(headers);    Integer expireAfter=getExpireAfter(headers);    if (queueExpireAfter != null) {      expireAfter=queueExpireAfter;    }    if (expireAfter != null) {      long expiredSince=System.currentTimeMillis() - (timestamp + expireAfter * 1000L);      if (expiredSince > 0) {        log.debug(" > isExpired - Request expired since {} milliseconds.",expiredSince);        return true;      } else {        log.debug(" > isExpired - Request not expired (would expire in {} milliseconds).",-expiredSince);        return false;      }    }  }  return false;}  }
class C{  @Override public void performAdditionalDomainDeleteLogic(DomainResource domainResource,String clientId,DateTime asOfDate,EppInput eppInput,HistoryEntry historyEntry) throws EppException {  messageToThrow="deleted";}  }
class C{  public LargestEigenvalueFinder nextLargestEigenvalueFinder(){  double norm=1.0 / eigenvector.secureProduct(transposedEigenvector);  Vector v1=eigenvector.product(norm);  return new LargestEigenvalueFinder(getDesiredPrecision(),matrix.secureProduct(SymmetricMatrix.identityMatrix(v1.dimension()).secureSubtract(v1.tensorProduct(transposedEigenvector))));}  }
class C{  public MoneyFlowIndexDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public static void main(String args[]){  long start=System.currentTimeMillis();  MATSim4UrbanSimParcel m4u=new MATSim4UrbanSimParcel(args);  m4u.run();  m4u.matsim4UrbanSimShutdown();  MATSim4UrbanSimParcel.isSuccessfulMATSimRun=Boolean.TRUE;  log.info("Computation took " + ((System.currentTimeMillis() - start) / 60000) + " minutes. Computation done!");}  }
class C{  public CViewConfiguration(final INaviView view,final ListenerProvider<INaviViewListener> listeners,final SQLProvider provider,final int viewId,final String description,final String name,final ViewType type,final Date creationDate,final Date modificationDate,final Set<CTag> tags,final boolean isStared){  this.view=view;  this.listeners=listeners;  this.provider=provider;  this.id=viewId;  this.viewDescription=description;  this.viewName=name;  this.type=type;  this.creationDate=new Date(creationDate.getTime());  this.modificationDate=new Date(modificationDate.getTime());  this.viewTags=new HashSet<CTag>(tags);  this.isStarred=isStared;  for (  final CTag tag : tags) {    tag.addListener(tagListener);  }}  }
class C{  public DelaunayTriangulation(DelaunayTriangle triangle){  triGraph=new UndirectedGraph<DelaunayTriangle>();  triGraph.add(triangle);  mostRecent=triangle;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tMaximum number of parents","P",1,"-P <nr of parents>"));  newVector.addElement(new Option("\tUse arc reversal operation.\n\t(default false)","R",0,"-R"));  newVector.addElement(new Option("\tInitial structure is empty (instead of Naive Bayes)","N",0,"-N"));  newVector.addElement(new Option("\tInitial structure specified in XML BIF file","X",1,"-X"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private boolean isMessageSend(TriggerType type){  for (  TriggerType usedType : usedTriggersTypes) {    if (type == usedType) {      return true;    }  }  return false;}  }
class C{  @Override public void dispose(){  if (outlinePage != null && !outlinePage.isDisposed()) {    outlinePage.dispose();    outlinePage=null;  }  VelocityEditorEnvironment.disconnect();  super.dispose();}  }
class C{  public void resetFnButtons(){  for (int i=0; i < NUM_FUNCTION_BUTTONS; i++) {    functionButton[i].setIdentity(i);    functionButton[i].setFunctionListener(this);    if (i < 3) {      functionButton[i].setButtonLabel(Bundle.getMessage("F" + String.valueOf(i)));    } else {      functionButton[i].setButtonLabel("F" + String.valueOf(i));    }    functionButton[i].setDisplay(true);    if ((i < 3) && jmri.jmrit.throttle.ThrottleFrameManager.instance().getThrottlesPreferences().isUsingExThrottle() && jmri.jmrit.throttle.ThrottleFrameManager.instance().getThrottlesPreferences().isUsingFunctionIcon()) {switch (i) {case 0:        functionButton[i].setIconPath("resources/icons/throttles/Light.png");      functionButton[i].setSelectedIconPath("resources/icons/throttles/LightOn.png");    break;case 1:  functionButton[i].setIconPath("resources/icons/throttles/Bell.png");functionButton[i].setSelectedIconPath("resources/icons/throttles/BellOn.png");break;case 2:functionButton[i].setIconPath("resources/icons/throttles/Horn.png");functionButton[i].setSelectedIconPath("resources/icons/throttles/HornOn.png");break;default :break;}} else {functionButton[i].setIconPath(null);functionButton[i].setSelectedIconPath(null);}functionButton[i].updateLnF();if (i < 3) {functionButton[i].setVisible(true);}}functionButton[0].setKeyCode(KeyEvent.VK_NUMPAD0);functionButton[1].setKeyCode(KeyEvent.VK_NUMPAD1);functionButton[2].setKeyCode(KeyEvent.VK_NUMPAD2);functionButton[3].setKeyCode(KeyEvent.VK_NUMPAD3);functionButton[4].setKeyCode(KeyEvent.VK_NUMPAD4);functionButton[5].setKeyCode(KeyEvent.VK_NUMPAD5);functionButton[6].setKeyCode(KeyEvent.VK_NUMPAD6);functionButton[7].setKeyCode(KeyEvent.VK_NUMPAD7);functionButton[8].setKeyCode(KeyEvent.VK_NUMPAD8);functionButton[9].setKeyCode(KeyEvent.VK_NUMPAD9);functionButton[10].setKeyCode(110);functionButton[11].setKeyCode(KeyEvent.VK_F11);functionButton[12].setKeyCode(KeyEvent.VK_F12);functionButton[13].setKeyCode(KeyEvent.VK_F13);functionButton[14].setKeyCode(KeyEvent.VK_F14);functionButton[15].setKeyCode(KeyEvent.VK_F15);functionButton[16].setKeyCode(KeyEvent.VK_F16);functionButton[17].setKeyCode(KeyEvent.VK_F17);functionButton[18].setKeyCode(KeyEvent.VK_F18);functionButton[19].setKeyCode(KeyEvent.VK_F19);functionButton[20].setKeyCode(KeyEvent.VK_F20);functionButton[21].setKeyCode(KeyEvent.VK_F21);functionButton[22].setKeyCode(KeyEvent.VK_F22);functionButton[23].setKeyCode(KeyEvent.VK_F23);functionButton[24].setKeyCode(KeyEvent.VK_F24);functionButton[25].setKeyCode(0xF00C);functionButton[26].setKeyCode(0xF00D);functionButton[27].setKeyCode(0xF00E);functionButton[28].setKeyCode(0xF00F);functionButton[2].setIsLockable(false);alt1Button.setVisible(true);alt2Button.setVisible(true);buttonActionCmdPerformed();setFnButtons();}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  public static long idForGlobalId(long globalId){  return Syncing.idForGlobalId(CONTENT_URI,globalId);}  }
class C{  public boolean isAnonymous(){  return (m_Name == null);}  }
class C{  @Override public void visitMethodDef(JCMethodDecl tree){  tree.mods=translate(tree.mods);  tree.restype=translate(tree.restype);  tree.typarams=translateTypeParams(tree.typarams);  tree.params=translateVarDefs(tree.params);  tree.thrown=translate(tree.thrown);  if (tree.restype != null && tree.body != null) {    tree.mods.flags|=Flags.NATIVE;    tree.body=null;  }  result=tree;}  }
class C{  public boolean isSuccess(){  return complete && (error == null);}  }
class C{  public Person(ElementKey<?,?> key,String name){  super(key);  if (name == null) {    throw new NullPointerException("Name must have a value");  }  setName(name);}  }
class C{  public <T extends ManagedEntity>T searchManagedEntity(String type,String name) throws VMWareException {  return searchManagedEntity(getRootFolder(),type,name);}  }
class C{  public void putAll(Map mapToCopy){  for (Iterator it=mapToCopy.keySet().iterator(); it.hasNext(); ) {    Object key=it.next();    checkKey(key);  }  map.putAll(mapToCopy);}  }
class C{  VPlexVirtualVolumeInfo findVirtualVolume(String clusterId,String volumeName,Boolean fetchAtts) throws VPlexApiException {  return findVirtualVolume(clusterId,volumeName,fetchAtts,false);}  }
class C{  protected void processMapsIdFields(OneToOneMapping oneToOneMapping,EmbeddedIdAccessor embeddedIdAccessor,MappingAccessor mapsIdAccessor){  for (  DatabaseField fkField : oneToOneMapping.getForeignKeyFields()) {    if (mapsIdAccessor.isBasic()) {      embeddedIdAccessor.addMapsIdAccessor(mapsIdAccessor);      embeddedIdAccessor.updateDerivedIdField((EmbeddableMapping)embeddedIdAccessor.getMapping(),mapsIdAccessor.getAttributeName(),fkField,mapsIdAccessor);    } else {      if (mapsIdAccessor.isDerivedIdClass()) {        embeddedIdAccessor.addMapsIdAccessor(mapsIdAccessor);      } else {        embeddedIdAccessor.getMapping().setIsReadOnly(true);      }      DatabaseField referencePKField=oneToOneMapping.getSourceToTargetKeyFields().get(fkField);      MappingAccessor referencePKAccessor=getReferenceDescriptor().getPrimaryKeyAccessorForField(referencePKField);      if (referencePKAccessor == null) {        throw ValidationException.invalidDerivedIdPrimaryKeyField(getReferenceClassName(),referencePKField.getQualifiedName(),getAttributeName(),getJavaClassName());      } else {        MappingAccessor idAccessor=mapsIdAccessor.getReferenceDescriptor().getMappingAccessor(referencePKAccessor.getAttributeName());        ((EmbeddedAccessor)mapsIdAccessor).updateDerivedIdField((EmbeddableMapping)mapsIdAccessor.getMapping(),idAccessor.getAttributeName(),fkField,idAccessor);      }    }  }}  }
class C{  public static <T extends IStaredItem>boolean allStared(final T[] items){  for (  final IStaredItem item : items) {    if (!item.isStared()) {      return false;    }  }  return true;}  }
class C{  private void heapifyDown(double cur,int val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best > twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur <= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  private static CloudMonitoring authenticate() throws GeneralSecurityException, IOException {  GoogleCredential credential=GoogleCredential.getApplicationDefault().createScoped(CloudMonitoringScopes.all());  HttpTransport httpTransport=new NetHttpTransport();  JsonFactory jsonFactory=new JacksonFactory();  CloudMonitoring service=new CloudMonitoring.Builder(httpTransport,jsonFactory,credential).setApplicationName("Demo").build();  return service;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("title");  attrName=addrAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","title",attrName);}  }
class C{  @CalledOnlyBy(AmidstThread.EDT) public void log(BufferedImage image){  if (image.getCapabilities(GC).isAccelerated()) {    accelerated++;  }  total++;  if (total == UPDATE_PERCENTAGE_AFTER) {    acceleratedPercentage=100f * accelerated / total;    accelerated=0;    total=0;  }}  }
class C{  public static int accumulateCRC(byte data,int crc){  int tmp=(data ^ crc) & 0xff;  tmp^=(tmp << 4) & 0xff;  return ((crc >> 8) ^ (tmp << 8) ^ (tmp << 3)^ (tmp >> 4)) & 0xffff;}  }
class C{  public static Parameter createParameter(final String platformParameterIdentifier,final String parameterValue,DataService dataManager) throws NonUniqueBusinessKeyException {  String tmpPlatformParameterIdentifier=platformParameterIdentifier;  String tmpParameterValue=parameterValue;  Query query=dataManager.createQuery("select c from ParameterDefinition c where c.dataContainer.parameterId=:parameterId");  query.setParameter("parameterId",tmpPlatformParameterIdentifier);  final List<ParameterDefinition> parameterDefinitions=new ArrayList<ParameterDefinition>();  Iterator<ParameterDefinition> parameterDefinitionIterator=ParameterizedTypes.iterator(query.getResultList(),ParameterDefinition.class);  while (parameterDefinitionIterator.hasNext()) {    parameterDefinitions.add(parameterDefinitionIterator.next());  }  Parameter parameter=new Parameter();  parameter.setParameterDefinition(parameterDefinitions.get(0));  parameter.setValue(tmpParameterValue);  query=dataManager.createQuery("select c from ParameterSet c");  final List<ParameterSet> parameterSetArray=new ArrayList<ParameterSet>();  Iterator<ParameterSet> parameterSetIterator=ParameterizedTypes.iterator(query.getResultList(),ParameterSet.class);  while (parameterSetIterator.hasNext()) {    parameterSetArray.add(parameterSetIterator.next());  }  parameter.setParameterSet(parameterSetArray.get(0));  dataManager.persist(parameter);  dataManager.flush();  return parameter;}  }
class C{  public TMember findOwnedMember(final String name){  return this.findOwnedMember(name,false,false);}  }
class C{  private static void endParagraph(SpannableStringBuilder builder){  int position=builder.length() - 1;  while (position >= 0 && builder.charAt(position) == ' ') {    position--;  }  if (position >= 0 && builder.charAt(position) != '\n') {    builder.append('\n');  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int rep=getInt(stack);  String cmd=getString(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   tun.playCommand(remoteName,cmd,rep,false);  return null;}  }
class C{  public static String makeLogTag(Class<?> cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public void testCommonPoolParallelism(){  assertEquals(ForkJoinPool.getCommonPoolParallelism(),ForkJoinPool.commonPool().getParallelism());}  }
class C{  public @CheckForNull String inspect(@Nonnull EnvVars launchEnv,@Nonnull String objectId,@Nonnull String fieldPath) throws IOException, InterruptedException {  LaunchResult result=launch(launchEnv,true,"inspect","-f",String.format("{{%s}}",fieldPath),objectId);  if (result.getStatus() == 0) {    return result.getOut();  } else {    return null;  }}  }
class C{  public EmulatedFields(ObjectStreamField[] fields,ObjectStreamField[] declared){  buildSlots(fields);  declaredFields=declared;}  }
class C{  public static String instance(){  if (TextUtils.isEmpty(userAgent))   userAgent=newInstance();  return userAgent;}  }
class C{  public void put(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  Node<E> node=new Node(e);  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      notFull.await();    }    enqueue(node);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  public static boolean isNoMedia(String path,int maxLevel){  if (path != null) {    if (path.indexOf("/.") >= 0) {      return true;    }    File file=getDir(path);    int level=maxLevel;    while ((--level >= 0) && (file != null)) {      if (new File(file,".nomedia").exists()) {        return true;      }      file=file.getParentFile();    }  }  return false;}  }
class C{  private int findCategoryPosition(String category){  int result=-1;  String[] categoryArray=getResources().getStringArray(R.array.category_array);  for (int i=0; i < categoryArray.length; i++) {    if (category.equals(categoryArray[i]))     result=i;  }  return result;}  }
class C{  Protocol protocol(){  return _protocol;}  }
class C{  @Override public int hashCode(){  int result=zeroDigit;  result=result * 37 + groupingSeparator;  result=result * 37 + decimalSeparator;  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SP800SecureRandom buildDualEC(Digest digest,byte[] nonce,boolean predictionResistant){  return new SP800SecureRandom(random,entropySourceProvider.get(entropyBitsRequired),new DualECDRBGProvider(digest,nonce,personalizationString,securityStrength),predictionResistant);}  }
class C{  public void add(Item item){  String typeName=item.typeName();  Data data=dataMap.get(typeName);  if (data == null) {    dataMap.put(typeName,new Data(item,typeName));  } else {    data.add(item);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GUARD_2__MORE_GUARDS_1:    getMoreGuards_1().clear();  return;}super.eUnset(featureID);}  }
class C{  private GradleRunConfigurationAttributes(List<String> tasks,String workingDirExpression,GradleDistribution gradleDistribution,String javaHomeExpression,List<String> jvmArgumentExpressions,List<String> argumentExpressions,boolean showExecutionView,boolean showConsoleView,boolean useGradleDistributionFromImport){  this.tasks=ImmutableList.copyOf(tasks);  this.workingDirExpression=Preconditions.checkNotNull(workingDirExpression);  this.gradleDistribution=Preconditions.checkNotNull(gradleDistribution);  this.javaHomeExpression=javaHomeExpression;  this.jvmArgumentExpressions=ImmutableList.copyOf(jvmArgumentExpressions);  this.argumentExpressions=ImmutableList.copyOf(argumentExpressions);  this.showExecutionView=showExecutionView;  this.showConsoleView=showConsoleView;  this.useGradleDistributionFromImport=useGradleDistributionFromImport;}  }
class C{  private void put(boolean newValue){  mBuffer[mBufferPointer]=newValue;  mBufferPointer++;  if (mBufferPointer >= mBuffer.length) {    mBufferPointer=0;  }}  }
class C{  public Dimension preferredLayoutSize(Container parent){  return getSize(parent,false);}  }
class C{  private void buildImages(){  removeAll();  List<MediaGenres> genres=new ArrayList<>(movieSelectionModel.getSelectedMovie().getGenres());  if (movieSelectionModel.getSelectedMovie().isVideoIn3D()) {    if (!genres.contains(MediaGenres.getGenre("3D"))) {      genres.add(0,MediaGenres.getGenre("3D"));    }  }  for (  MediaGenres genre : genres) {    try {      StringBuilder sb=new StringBuilder("/images/genres/");      sb.append(genre.name().toLowerCase());      sb.append(".png");      Icon image=new ImageIcon(MovieGenresPanel.class.getResource(sb.toString()));      JLabel lblImage=new JLabel(image);      add(lblImage);    } catch (    NullPointerException e) {      LOGGER.warn("genre image for genre " + genre.name() + " not available");    }catch (    Exception e) {      LOGGER.warn(e.getMessage());    }  }  if (genres == null || genres.size() == 0) {    try {      Icon image=new ImageIcon(MovieGenresPanel.class.getResource("/images/genres/unknown.png"));      JLabel lblImage=new JLabel(image);      add(lblImage);    } catch (    Exception e) {      LOGGER.warn(e.getMessage());    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void initType(Throwable throwable){  if (throwable == null) {    return;  }  onInitTypeWithThrowable(throwable);  if (throwable == throwable.getCause()) {    return;  }  if (!isTypeInit()) {    initType(throwable.getCause());  }}  }
class C{  public static String quantityNumberStrNoun(final int quantity,final String noun){  StringBuilder sb=new StringBuilder();switch (quantity) {case 0:    sb.append("0 ");  break;case 1:break;default :sb.append(numberString(quantity)).append(' ');break;}sb.append(plnoun(quantity,noun));return sb.toString();}  }
class C{  private boolean trackEncrypt(MusicTrack musicTrack,String src,String dest){  try {    AllAccessExporter allAccessExporter=new AllAccessExporter(src,musicTrack.getCpData());    if (!allAccessExporter.hasValidMagicNumber()) {      Logger.getInstance().logError("TrackEncrypt","Invalid magic number! This is not an AllAccess file");      return false;    }    return allAccessExporter.save(dest);  } catch (  Exception e) {    Logger.getInstance().logError("TrackEncrypt",e.toString());  }  return false;}  }
class C{  public String includeClassTipText(){  return "If disabled, the class attribute will be always left out of the cleaning process.";}  }
class C{  public void addIncludeGlob(final String pattern){  includeGlobs.add("glob:" + pattern);}  }
class C{  public static double[] convexHull(double[] pts,int len){  if (len < 6) {    throw new IllegalArgumentException("Input must have at least 3 points");  }  int plen=len / 2 - 1;  float[] angles=new float[plen];  int[] idx=new int[plen];  int[] stack=new int[len / 2];  return convexHull(pts,len,angles,idx,stack);}  }
class C{  private void adjustRowHeight(JTable table,int row,int column){  int cWidth=table.getTableHeader().getColumnModel().getColumn(column).getWidth();  setSize(new Dimension(cWidth,1000));  int prefH=getPreferredSize().height;  while (rowColHeight.size() <= row) {    rowColHeight.add(new ArrayList<Integer>(column));  }  List<Integer> colHeights=rowColHeight.get(row);  while (colHeights.size() <= column) {    colHeights.add(0);  }  colHeights.set(column,prefH);  int maxH=prefH;  for (  Integer colHeight : colHeights) {    if (colHeight > maxH) {      maxH=colHeight;    }  }  if (table.getRowHeight(row) != maxH) {    table.setRowHeight(row,maxH);  }}  }
class C{  @Override public DriverTask createConsistencyGroupSnapshot(VolumeConsistencyGroup volumeConsistencyGroup,List<VolumeSnapshot> snapshots,List<CapabilityInstance> capabilities){  LOG.info("Creating consistency group snapshot");  return cgHelper.createConsistencyGroupSnapshot(volumeConsistencyGroup,snapshots,capabilities);}  }
class C{  public void revalidate(){  if (getParent() == null) {    return;  }  if (SunToolkit.isDispatchThreadForAppContext(this)) {    invalidate();    RepaintManager.currentManager(this).addInvalidComponent(this);  } else {    if (revalidateRunnableScheduled.getAndSet(true)) {      return;    }    SunToolkit.executeOnEventHandlerThread(this,null);  }}  }
class C{  public void start(boolean waitForReplay){  this.waitForReplay=waitForReplay;  isAlive.set(true);  kafkaConsumerExecutor=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat("kafka-consumer-%d").build());  Map<String,List<TopicPartition>> consumerAssignment=new HashMap<>();  Set<AbstractKafkaPartitioner.PartitionMeta> assignments=ownerOperator.assignment();  for (  AbstractKafkaPartitioner.PartitionMeta partitionMeta : assignments) {    String cluster=partitionMeta.getCluster();    List<TopicPartition> cAssignment=consumerAssignment.get(cluster);    if (cAssignment == null) {      cAssignment=new LinkedList<>();      consumerAssignment.put(cluster,cAssignment);    }    cAssignment.add(new TopicPartition(partitionMeta.getTopic(),partitionMeta.getPartitionId()));  }  Map<AbstractKafkaPartitioner.PartitionMeta,Long> currentOffset=ownerOperator.getOffsetTrack();  for (  Map.Entry<String,List<TopicPartition>> e : consumerAssignment.entrySet()) {    Properties prop=new Properties();    if (ownerOperator.getConsumerProps() != null) {      prop.putAll(ownerOperator.getConsumerProps());    }    prop.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,e.getKey());    prop.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"none");    prop.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,"false");    prop.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,ByteArrayDeserializer.class.getName());    prop.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,ByteArrayDeserializer.class.getName());    AbstractKafkaInputOperator.InitialOffset initialOffset=AbstractKafkaInputOperator.InitialOffset.valueOf(ownerOperator.getInitialOffset());    if (initialOffset == AbstractKafkaInputOperator.InitialOffset.APPLICATION_OR_EARLIEST || initialOffset == AbstractKafkaInputOperator.InitialOffset.APPLICATION_OR_LATEST) {      prop.put(ConsumerConfig.GROUP_ID_CONFIG,ownerOperator.getApplicationName() + "_Consumer");    }    KafkaConsumer<byte[],byte[]> kc=new KafkaConsumer<>(prop);    kc.assign(e.getValue());    if (logger.isInfoEnabled()) {      logger.info("Create consumer with properties {} ",Joiner.on(";").withKeyValueSeparator("=").join(prop));      logger.info("Assign consumer to {}",Joiner.on('#').join(e.getValue()));    }    if (currentOffset != null && !currentOffset.isEmpty()) {      for (      TopicPartition tp : e.getValue()) {        AbstractKafkaPartitioner.PartitionMeta partitionKey=new AbstractKafkaPartitioner.PartitionMeta(e.getKey(),tp.topic(),tp.partition());        if (currentOffset.containsKey(partitionKey)) {          kc.seek(tp,currentOffset.get(partitionKey));        }      }    }    consumers.put(e.getKey(),kc);    kafkaConsumerExecutor.submit(new ConsumerThread(e.getKey(),kc,this));  }}  }
class C{  protected void actionCommand(Command cmd){}  }
class C{  public IrregularFireSupportArea(String sidc){  super(sidc);  this.setShowHostileIndicator(false);}  }
class C{  private static boolean intersectsLngEdge(S2Point a,S2Point b,R1Interval lat,double lng){  return S2.simpleCrossing(a,b,S2LatLng.fromRadians(lat.lo(),lng).toPoint(),S2LatLng.fromRadians(lat.hi(),lng).toPoint());}  }
class C{  public void prevCommand(){  commandNo--;  String text="";  if (commandNo >= 0 && commandNo < previousCommands.size()) {    text=((String)previousCommands.elementAt(commandNo)).trim();  } else   if (commandNo < 0) {    text="";    commandNo=-1;  }  textArea=getText();  int pos1=textArea.lastIndexOf(GlobalValues.groovyLabPromptString) + 2;  String prev=textArea.substring(0,pos1);  setText(textArea.substring(0,pos1) + text);  setCaretPosition(getText().length());}  }
class C{  public static void main(String[] args){  runFileSaver(new SerializedInstancesSaver(),args);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  Copier copier=new Copier(info,constPool,newCp,classnames);  try {    copier.annotationArray();    return new TypeAnnotationsAttribute(newCp,getName(),copier.close());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public AgentMappings saveAgentMappings(AgentMappings agentMappings,boolean checkEnvironments) throws BusinessException, JAXBException, IOException {  if (checkEnvironments) {    checkEnvironments(agentMappings);  }  AgentMappings current;  do {    current=agentMappingsReference.get();    if (current.getRevision() != agentMappings.getRevision()) {      throw new BusinessException("Update of the agent mappings.",ConfigurationInterfaceErrorCodeEnum.REVISION_CHECK_FAILED);    }  } while (!agentMappingsReference.compareAndSet(current,agentMappings));  agentMappings.setRevision(agentMappings.getRevision() + 1);  saveAgentMapping(agentMappings);  publishAgentMappingsUpdateEvent();  return agentMappings;}  }
class C{  public ByteList TraitInfo(ByteList bytes,int name_index,int tag,int id,int info,int other,byte other2,IntList metadata){  if (show_bytecode) {switch (tag) {case TRAIT_Var:      defns_out.write("\n      *Trait name_index=" + name_index + " tag=var"+ " slot_id="+ id+ " type_index="+ info+ " value="+ other+ " value_kind="+ other2);    break;case TRAIT_Const:  defns_out.write("\n      *Trait name_index=" + name_index + " tag=const"+ " slot_id="+ id+ " type_index="+ info+ " value="+ other+ " value_kind="+ other2);break;case TRAIT_Method:defns_out.write("\n      *Trait name_index=" + name_index + " tag=method"+ " disp_id="+ id+ " method_info="+ info+ ((other & 0x01) != 0 ? " final" : " virtual")+ ((other & 0x02) != 0 ? " override" : " new"));break;case TRAIT_Getter:defns_out.write("\n      *Trait name_index=" + name_index + " tag=getter"+ " disp_id="+ id+ " method_info="+ info+ ((other & 0x01) != 0 ? " final" : " virtual")+ ((other & 0x02) != 0 ? " override" : " new"));break;case TRAIT_Setter:defns_out.write("\n      *Trait name_index=" + name_index + " tag=setter"+ " disp_id="+ id+ " method_info="+ info+ ((other & 0x01) != 0 ? " final" : " virtual")+ ((other & 0x02) != 0 ? " override" : " new"));break;case TRAIT_Function:defns_out.write("\n      *Trait name_index=" + name_index + " tag=function"+ " slot_id="+ id+ " method_info="+ info);break;case TRAIT_Class:defns_out.write("\n      *Trait name_index=" + name_index + " tag=class"+ " slot_id="+ id+ " class_info="+ info);break;}}int tag_flags=tag;if (metadata != null) {tag_flags|=(TRAIT_FLAG_metadata << 4);}if (tag == TRAIT_Method || tag == TRAIT_Getter || tag == TRAIT_Setter) {tag_flags|=(other << 4);}bytes=Int(bytes,name_index);bytes=Byte(bytes,tag_flags);switch (tag) {case TRAIT_Var:case TRAIT_Const:bytes=Int(bytes,id);bytes=Int(bytes,info);bytes=Int(bytes,other);if (other != 0) bytes=Byte(bytes,other2);break;case TRAIT_Class:case TRAIT_Function:bytes=Int(bytes,id);bytes=Int(bytes,info);break;case TRAIT_Method:case TRAIT_Getter:case TRAIT_Setter:bytes=Int(bytes,id);bytes=Int(bytes,info);break;default :break;}if (metadata != null) {int metadata_size=metadata.size();bytes=Int(bytes,metadata_size);for (int i=0; i < metadata_size; ++i) {bytes=Int(bytes,metadata.get(i));}}return bytes;}  }
class C{  private boolean validateTemplate(Template template){  String contextTypeId=template.getContextTypeId();  if (!contextExists(contextTypeId))   return false;  if (getRegistry() != null) {    try {      getRegistry().getContextType(contextTypeId).validate(template.getPattern());    } catch (    TemplateException e) {      JavaPlugin.log(e);      return false;    }  }  return true;}  }
class C{  public boolean isSetTrace_id(){  return EncodingUtils.testBit(__isset_bitfield,__TRACE_ID_ISSET_ID);}  }
class C{  public BatchResult unshareProfiles() throws IOException, ServiceException {  if (this.profiles == null) {    this.getAllProfiles();  }  BatchResult result=new BatchResult();  Status status=new Status();  int index=0;  status.setIndexed(false);  while (index < this.profiles.size()) {    ContactFeed requestFeed=new ContactFeed();    for (int i=0; i < this.batchSize && index < this.profiles.size(); ++i, ++index) {      ContactEntry entry=this.profiles.get(index);      entry.setStatus(status);      BatchUtils.setBatchOperationType(entry,BatchOperationType.UPDATE);      requestFeed.getEntries().add(entry);    }    ContactFeed responseFeed=myService.batch(new URL("https://www.google.com/m8/feeds/profiles/domain/" + this.domain + "/full/batch?xoauth_requestor_id="+ this.adminEmail),requestFeed);    for (    ContactEntry entry : responseFeed.getEntries()) {      BatchStatus batchStatus=BatchUtils.getBatchStatus(entry);      if (batchStatus.getCode() == 200) {        result.setSuccess(result.getSuccess() + 1);      } else {        result.setError(result.getError() + 1);        result.addErrorEntry(entry);      }    }  }  return result;}  }
class C{  private void testViewAlterAndCommandCache() throws SQLException {  deleteDb("view");  Connection conn=getConnection("view");  Statement stat=conn.createStatement();  stat.execute("create table t0(id int primary key)");  stat.execute("create table t1(id int primary key)");  stat.execute("insert into t0 values(0)");  stat.execute("insert into t1 values(1)");  stat.execute("create view v1 as select * from t0");  ResultSet rs=stat.executeQuery("select * from v1");  assertTrue(rs.next());  assertEquals(0,rs.getInt(1));  stat.execute("create or replace view v1 as select * from t1");  rs=stat.executeQuery("select * from v1");  assertTrue(rs.next());  assertEquals(1,rs.getInt(1));  conn.close();  deleteDb("view");}  }
class C{  public static void sort(AggregateAPIEntity entity,List<AggregateParams.SortFieldOrder> sortFieldOrders){  Map<String,AggregateAPIEntity> children=entity.getEntityList();  for (  Map.Entry<String,AggregateAPIEntity> e : children.entrySet()) {    e.getValue().setKey(e.getKey());  }  SortedSet<Map.Entry<String,AggregateAPIEntity>> set=sortByValue(children,sortFieldOrders);  for (  Map.Entry<String,AggregateAPIEntity> entry : set) {    entity.getSortedList().add(entry.getValue());  }  for (  Map.Entry<String,AggregateAPIEntity> entry : entity.getEntityList().entrySet()) {    sort(entry.getValue(),sortFieldOrders);  }  entity.setEntityList(null);}  }
class C{  public boolean isMotorEnabled(){  return motorEnabled;}  }
class C{  @Interruptible private int addUnusualMap(UnusualMaps jsrSiteMap){  if (jsrInfo.unusualMaps == null) {    jsrInfo.unusualMaps=new UnusualMaps[5];    jsrInfo.numberUnusualMaps=0;  }  jsrInfo.unusualMaps[jsrInfo.numberUnusualMaps]=jsrSiteMap;  int returnnumber=jsrInfo.numberUnusualMaps;  jsrInfo.numberUnusualMaps++;  if (jsrInfo.numberUnusualMaps == jsrInfo.unusualMaps.length) {    UnusualMaps[] temp=new UnusualMaps[jsrInfo.numberUnusualMaps + 5];    for (int i=0; i < jsrInfo.numberUnusualMaps; i++) {      temp[i]=jsrInfo.unusualMaps[i];    }    jsrInfo.unusualMaps=temp;    byte[] temp2=new byte[jsrInfo.unusualReferenceMaps.length + (5 * bytesPerMap() * 3)];    for (int i=0; i < jsrInfo.unusualReferenceMaps.length; i++) {      temp2[i]=jsrInfo.unusualReferenceMaps[i];    }    jsrInfo.unusualReferenceMaps=temp2;  }  return returnnumber;}  }
class C{  public final static String OPC_NAME(int opcode){switch (opcode) {case OPC_GPBUSY:    return "OPC_GPBUSY";case OPC_GPOFF:  return "OPC_GPOFF";case OPC_GPON:return "OPC_GPON";case OPC_IDLE:return "OPC_IDLE";case OPC_LOCO_SPD:return "OPC_LOCO_SPD";case OPC_LOCO_DIRF:return "OPC_LOCO_DIRF";case OPC_LOCO_SND:return "OPC_LOCO_SND";case OPC_SW_REQ:return "OPC_SW_REQ";case OPC_SW_REP:return "OPC_SW_REP";case OPC_INPUT_REP:return "OPC_INPUT_REP";case OPC_UNKNOWN:return "OPC_UNKNOWN";case OPC_LONG_ACK:return "OPC_LONG_ACK";case OPC_SLOT_STAT1:return "OPC_SLOT_STAT1";case OPC_CONSIST_FUNC:return "OPC_CONSIST_FUNC";case OPC_UNLINK_SLOTS:return "OPC_UNLINK_SLOTS";case OPC_LINK_SLOTS:return "OPC_LINK_SLOTS";case OPC_MOVE_SLOTS:return "OPC_MOVE_SLOTS";case OPC_RQ_SL_DATA:return "OPC_RQ_SL_DATA";case OPC_SW_STATE:return "OPC_SW_STATE";case OPC_SW_ACK:return "OPC_SW_ACK";case OPC_LOCO_ADR:return "OPC_LOCO_ADR";case OPC_MULTI_SENSE:return "OPC_MULTI_SENSE";case OPC_PANEL_QUERY:return "OPC_PANEL_QUERY";case OPC_PANEL_RESPONSE:return "OPC_PANEL_RESPONSE";case OPC_LISSY_UPDATE:return "OPC_LISSY_UPDATE";case OPC_PEER_XFER:return "OPC_PEER_XFER";case OPC_ALM_READ:return "OPC_ALM_READ";case OPC_SL_RD_DATA:return "OPC_SL_RD_DATA";case OPC_IMM_PACKET:return "OPC_IMM_PACKET";case OPC_IMM_PACKET_2:return "OPC_IMM_PACKET_2";case OPC_WR_SL_DATA:return "OPC_WR_SL_DATA";default :return "<unknown>";}}  }
class C{  private boolean updateData(){  if (LOGGER.finerEnabled()) {    LOGGER.finer(resourceBundle.getString("LOG_MSG_CLUSTER_DATA_IS_UPDATING") + "::" + this.serverName+ ":"+ this.port);  }  return this.updater.updateData();}  }
class C{  public boolean readCredentials(final URI targetUri,final AtomicReference<Credential> credentials){  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("SecretCache::readCredentials");  final String targetName=this.getTargetName(targetUri);synchronized (_cache) {    if (_cache.containsKey(targetName) && _cache.get(targetName) instanceof Credential) {      credentials.set((Credential)_cache.get(targetName));    } else {      credentials.set(null);    }  }  return credentials.get() != null;}  }
class C{  public static int computeArrayHeaderSize(RVMArray type){  return JavaHeader.computeArrayHeaderSize(type);}  }
class C{  public static void removeDef(RegisterOperand regOp){  Register reg=regOp.getRegister();  if (SUPRESS_DU_FOR_PHYSICALS && reg.isPhysical())   return;  if (regOp == reg.defList) {    reg.defList=reg.defList.getNext();  } else {    RegisterOperand prev=reg.defList;    RegisterOperand curr=prev.getNext();    while (curr != regOp) {      prev=curr;      curr=curr.getNext();    }    prev.setNext(curr.getNext());  }  if (DEBUG) {    VM.sysWrite("removed a def " + regOp.instruction + "\n");    printDefs(reg);  }}  }
class C{  public void skipSample(){  long nextOffset=infoQueue.moveToNextSample();  dropFragmentsTo(nextOffset);}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints a disassembled view of the given class.");    System.err.println("Usage: Textifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(new PrintWriter(System.out)),flags);}  }
class C{  private Reference(T value){  weak=new TransparentWeakReference(value);  if (value != null) {synchronized (cache) {      checkHeapUtilization();      cache.put(weak,new SoftReference<>(value));    }  }}  }
class C{  static void read(SocketChannel chan,byte[] data) throws TimeoutException, IOException {  read(chan,data,-1,DdmPreferences.getTimeOut());}  }
class C{  public DynamicLayout(CharSequence base,CharSequence display,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad){  this(base,display,paint,width,align,spacingmult,spacingadd,includepad,null,0);}  }
class C{  public double distance(Vector2 a){  return Vector2.distance(a,this);}  }
class C{  Source popImportSource(){  return (Source)m_importSourceStack.pop();}  }
class C{  public final void pushCurrentNodeAndExpression(int cn,int en){  m_currentNodes.push(cn);  m_currentExpressionNodes.push(cn);}  }
class C{  private List<Metric> fractureMetric(Metric metric){  List<Metric> result=new ArrayList<>();  if (metric.getDatapoints().size() <= TSDB_DATAPOINTS_WRITE_MAX_SIZE) {    result.add(metric);    return result;  }  Metric tempMetric=new Metric(metric);  Map<Long,String> dataPoints=new LinkedHashMap<>();  int tempChunkSize=TSDB_DATAPOINTS_WRITE_MAX_SIZE;  for (  Map.Entry<Long,String> dataPoint : metric.getDatapoints().entrySet()) {    dataPoints.put(dataPoint.getKey(),dataPoint.getValue());    if (--tempChunkSize == 0) {      tempMetric.setDatapoints(dataPoints);      result.add(tempMetric);      tempMetric=new Metric(metric);      tempChunkSize=TSDB_DATAPOINTS_WRITE_MAX_SIZE;      dataPoints=new LinkedHashMap<>();    }  }  if (!dataPoints.isEmpty()) {    tempMetric.setDatapoints(dataPoints);    result.add(tempMetric);  }  return result;}  }
class C{  private static LIRInstruction last(List<LIRInstruction> seq){  return seq.get(seq.size() - 1);}  }
class C{  private static void sendToServlet(LocalClientInfo info){  try {    HttpClientFactory.getInstance(HttpClientFactory.HttpContext.MISC).post(BugSettings.BUG_REPORT_SERVER.getValue(),6000,"FrostWire-" + FrostWireUtils.getFrostWireVersion(),info.toBugReport(),"text/plain",false);  } catch (  Exception e) {    LOG.error("Error sending bug report",e);  }}  }
class C{  @NonNull public JSONObject jsonSerialize(){  JSONObject json=new JSONObject();  JsonUtil.put(json,KEY_CONFIGURATION,configuration.toJson());  JsonUtil.put(json,KEY_CLIENT_ID,clientId);  JsonUtil.put(json,KEY_GRANT_TYPE,grantType);  JsonUtil.putIfNotNull(json,KEY_REDIRECT_URI,redirectUri);  JsonUtil.putIfNotNull(json,KEY_SCOPE,scope);  JsonUtil.putIfNotNull(json,KEY_AUTHORIZATION_CODE,authorizationCode);  JsonUtil.putIfNotNull(json,KEY_REFRESH_TOKEN,refreshToken);  JsonUtil.put(json,KEY_ADDITIONAL_PARAMETERS,JsonUtil.mapToJsonObject(additionalParameters));  return json;}  }
class C{  protected String buildTagFilterRegex(Map<String,List<String>> tags){  final SortedMap<Integer,List<Integer>> tagHash=new TreeMap<Integer,List<Integer>>();  final int numOfPartitionFields=(_ed.getPartitions() == null) ? 0 : _ed.getPartitions().length;  for (  Map.Entry<String,List<String>> entry : tags.entrySet()) {    String tagName=entry.getKey();    if (_ed.isPartitionTag(tagName)) {      continue;    }    List<String> stringValues=entry.getValue();    List<Integer> hashValues=new ArrayList<Integer>(stringValues.size());    for (    String value : stringValues) {      hashValues.add(value.hashCode());    }    tagHash.put(tagName.hashCode(),hashValues);  }  final int headerLength=4 + numOfPartitionFields * 4 + 8;  StringBuilder sb=new StringBuilder();  sb.append("(?s)");  sb.append("^(?:.{").append(headerLength).append("})");  sb.append("(?:.{").append(8).append("})*");  for (  Map.Entry<Integer,List<Integer>> entry : tagHash.entrySet()) {    try {      addId(sb,ByteUtil.intToBytes(entry.getKey()));      List<Integer> hashValues=entry.getValue();      sb.append("(?:");      boolean first=true;      for (      Integer value : hashValues) {        if (!first) {          sb.append('|');        }        addId(sb,ByteUtil.intToBytes(value));        first=false;      }      sb.append(")");      sb.append("(?:.{").append(8).append("})*");    } catch (    Exception ex) {      LOG.error("constructing regex error",ex);    }  }  sb.append("$");  if (LOG.isDebugEnabled())   LOG.debug("Tag filter pattern is " + sb.toString());  return sb.toString();}  }
class C{  public final void replaceAll(Object from,Object to,boolean onlyIfSameObject){  final int width=this.width;  final int height=this.height;  Bag[][] fieldx=null;  Bag[] fieldxy=null;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        Bag bag=fieldxy[z];        int len=bag.size();        for (int i=0; i < len; i++) {          Object obj=bag.get(i);          if ((obj == null && from == null) || (onlyIfSameObject && obj == from) || (!onlyIfSameObject && obj.equals(from)))           bag.set(i,to);        }      }    }  }}  }
class C{  public static <T>void writeNullableCollection(BinaryRawWriterEx writer,@Nullable Collection<T> col){  writeNullableCollection(writer,col,null,null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.817 -0400",hash_original_method="9210FB6C78C901008C5A67E434CB9A0B",hash_generated_method="786E77D872575F47B0AF55657DA8A37D") @Override public long skip(long numberOfBytes) throws IOException {  if (eof) {    throw new IOException("Skip after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=numberOfBytes;  long returnLength=numberOfBytes;  if (position > size) {    returnLength=numberOfBytes - (position - size);    position=size;  }  return returnLength;}  }
class C{  public static Image createImage(Object nativeImage){  return new Image(nativeImage);}  }
class C{  public TreeRTGPinusNigra(){  super();}  }
class C{  private void removeAllAssignments(){  List<ResourceAssignment> copy=new ArrayList<ResourceAssignment>(myAssignments);  for (int i=0; i < copy.size(); i++) {    ResourceAssignmentImpl next=(ResourceAssignmentImpl)copy.get(i);    next.myAssignmentToTask.delete();  }  resetLoads();}  }
class C{  public FDBigInteger(long lValue,char[] digits,int kDigits,int nDigits){  int n=Math.max((nDigits + 8) / 9,2);  data=new int[n];  data[0]=(int)lValue;  data[1]=(int)(lValue >>> 32);  offset=0;  nWords=2;  int i=kDigits;  int limit=nDigits - 5;  int v;  while (i < limit) {    int ilim=i + 5;    v=(int)digits[i++] - (int)'0';    while (i < ilim) {      v=10 * v + (int)digits[i++] - (int)'0';    }    multAddMe(100000,v);  }  int factor=1;  v=0;  while (i < nDigits) {    v=10 * v + (int)digits[i++] - (int)'0';    factor*=10;  }  if (factor != 1) {    multAddMe(factor,v);  }  trimLeadingZeros();}  }
class C{  public void putOptions(List<AbstractOption> optionList){  log().info("Put: " + optionList.toString());  PluginOptionContainer container=getPlugin().getPluginOptions();  for (int i=optionList.size() - 1; i >= 0; --i) {    container.add(optionList.get(i));  }}  }
class C{  public ApplierException(){}  }
class C{  public static AlertDialog showList(Activity activity,String title,Set<String> items){  CharSequence[] chars=items.toArray(new CharSequence[items.size()]);  AlertDialog.Builder builder=new AlertDialog.Builder(activity);  builder.setTitle(title);  builder.setCancelable(false);  builder.setPositiveButton(R.string.label_ok,null);  builder.setItems(chars,null);  return builder.show();}  }
class C{  public ProjectType createProjectTypeFromString(EDataType eDataType,String initialValue){  ProjectType result=ProjectType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue == 2) {                    flag=false;                    break;                  }                  output.setValue(y,x,output.getValue(y,x) + 1);                }              } else {                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network links:",(int)progress);    }    updateProgress("Finding network nodes:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          if (pntr.getValue(row,col) == 0) {            output.setValue(row,col,5);          } else {            numNeighbouringStreamCells=0;            for (c=0; c < 8; c++) {              x=col + dX[c];              y=row + dY[c];              if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {                numNeighbouringStreamCells++;              }            }            if (numNeighbouringStreamCells == 0) {              output.setValue(row,col,3);            } else             if (numNeighbouringStreamCells > 1) {              output.setValue(row,col,4);            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Finding network nodes:",(int)progress);    }    String retData="Classification Key\n\n";    retData=retData + "Exterior Link\t1\n";    retData=retData + "Interior Link\t2\n";    retData=retData + "Source Node\t3\n";    retData=retData + "Link Node\t4\n";    retData=retData + "Sink Node\t5\n";    returnData(retData);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private StandardTranslatorKey(){  instanceNotAllowed(getClass());}  }
class C{  public Entry proxyAuth(final String auth){  Entry entry=null;  if (auth != null) {    final String[] tmp=Base64Order.standardCoder.decodeString(auth.trim()).split(":");    if (tmp.length == 2) {      entry=this.passwordAuth(tmp[0],tmp[1]);      if (entry == null) {        entry=this.md5Auth(tmp[0],tmp[1]);      }    }  }  return entry;}  }
class C{  public boolean isWarning(){  return fSeverity == IStatus.WARNING;}  }
class C{  private static DateValue[] allDaysInMonth(DateValue start){  return daysInMonth(start,1);}  }
class C{  @Override public boolean isNumerical(){  return false;}  }
class C{  public boolean hasModels(){  return (m_numRegressions > 0);}  }
class C{  public boolean isCustomizable(){  return customizable;}  }
class C{  public Element store(Object o){  DefaultSignalMastManager m=(DefaultSignalMastManager)o;  Element element=new Element("signalmasts");  element.setAttribute("class",this.getClass().getName());  if (m != null) {    List<String> names=m.getSystemNameList();    for (int i=0; i < names.size(); i++) {      SignalMast p=m.getSignalMast(names.get(i));      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(p);        if (e != null) {          element.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing signalmast: " + e);        e.printStackTrace();      }    }    List<SignalMastRepeater> repeaterList=m.getRepeaterList();    if (repeaterList.size() > 0) {      for (      SignalMastRepeater smr : repeaterList) {        if (smr.getMasterMast() != null && smr.getSlaveMast() != null) {          Element e=new Element("signalmastrepeater");          e.addContent(new Element("masterMast").addContent(smr.getMasterMastName()));          e.addContent(new Element("slaveMast").addContent(smr.getSlaveMastName()));          e.addContent(new Element("enabled").addContent(smr.getEnabled() ? "true" : "false"));switch (smr.getDirection()) {case 1:            e.addContent(new Element("update").addContent("MasterToSlave"));          break;case 2:        e.addContent(new Element("update").addContent("SlaveToMaster"));      break;default :    e.addContent(new Element("update").addContent("BothWay"));  break;}element.addContent(e);}}}}return element;}  }
class C{  private void selectCurrentToken(){  setCurrentItem(currentTextItem);  setPosition(currentTextItem.getEndPosition());}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public boolean updateAndCheckRate(){  final long nowTimeMicros=TimeUnit.NANOSECONDS.toMicros(System.nanoTime());  final boolean exceed=(nowTimeMicros - threshold) < 0;  threshold=nowTimeMicros + intervalMicros;  countRate(nowTimeMicros);  return exceed;}  }
class C{  private void resolve(Method method){  if (resolve == null) {    resolve=getFunction(method);  }}  }
class C{  private void phiHelper(Instruction s,BasicBlock b){}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  public static DescriptorFactory instance(){  return instanceThreadLocal.get();}  }
class C{  public static List<TStream<JsonObject>> splitAlert(TStream<JsonObject> alertStream,int wellId){  List<TStream<JsonObject>> allStreams=alertStream.split(5,null);  return allStreams;}  }
class C{  public static LordnLog parse(List<String> lines){  List<String> firstLine=Splitter.on(',').splitToList(lines.get(0));  checkArgument(firstLine.size() == 7,String.format("Line 1: Expected 7 elements, found %d",firstLine.size()));  int version=Integer.parseInt(firstLine.get(0));  checkArgument(version == 1,String.format("Line 1: Expected version 1, found %d",version));  DateTime logCreation=DateTime.parse(firstLine.get(1));  DateTime lordnCreation=DateTime.parse(firstLine.get(2));  String logId=firstLine.get(3);  checkArgument(LOG_ID_PATTERN.matcher(logId).matches(),"Line 1: Log ID does not match base64 pattern: %s",logId);  Status status=Status.valueOf(Ascii.toUpperCase(firstLine.get(4)));  boolean hasWarnings=!"no-warnings".equals(firstLine.get(5));  int dnLines=Integer.parseInt(firstLine.get(6));  int actual=lines.size() - 2;  checkArgument(dnLines == actual,"Line 1: Number of entries (%s) differs from declaration (%s)",String.valueOf(actual),String.valueOf(dnLines));  checkArgument(lines.get(1).equals("roid,result-code"),"Line 2: Unexpected header list: %s",lines.get(1));  ImmutableMap.Builder<String,Result> builder=new ImmutableMap.Builder<>();  for (int i=2; i < lines.size(); i++) {    List<String> currentLine=Splitter.on(',').splitToList(lines.get(i));    checkArgument(currentLine.size() == 2,String.format("Line %d: Expected 2 elements, found %d",i + 1,currentLine.size()));    String roid=currentLine.get(0);    int code=Integer.parseInt(currentLine.get(1));    Result result=checkNotNull(RESULTS.get(code),"Line %s: Unknown result code: %s",i,code);    builder.put(roid,result);  }  return new LordnLog(logId,status,logCreation,lordnCreation,hasWarnings,builder.build());}  }
class C{  public int defineChannelName(String name){  Integer prev=channelNameToValueMap.get(name);  if (prev == null) {    return defineChannelName(name,getNewChannelNumber());  }  return prev;}  }
class C{  @Override public void onWebsocketPong(WebSocket conn,Framedata f){}  }
class C{  public static int valueAsInt(String key,int defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  int ival;  try {    ival=Integer.valueOf(val).intValue();  } catch (  NumberFormatException nex) {    XRLog.exception("Property '" + key + "' was requested as an integer, but "+ "value of '"+ val+ "' is not an integer. Check configuration.");    ival=defaultVal;  }  return ival;}  }
class C{  public DialSurfaceView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public final static double qint(double x){  return qint_new(x);}  }
class C{  public DTEDDirectoryHandler(String dtedDirectory){  setDirectoryPath(dtedDirectory);}  }
class C{  public String toString(){  return m_IDStr;}  }
class C{  protected Scheduler _refreshJobSchedule(Scheduler scheduler){  _disposeScheduler(scheduler);  Scheduler result=new Scheduler();  _logger.info("Refreshing job schedule.");  for (  CronJob job : getEnabledJobs()) {    _logger.debug("Adding job to scheduler: {}",job);    try {      result.schedule(job.getCronEntry(),new RunnableJob(lockType,job));    } catch (    Exception ex) {      String msg="Failed to schedule job {0} : {1}";      JPAEntity entity=JPAEntity.class.cast(job);      _auditService.createAudit(msg,entity,entity,ex.getMessage());      _logger.error("Failed to schedule job {} : {}",job,ex.getMessage());    }  }  result.start();  _logger.info("Job schedule refreshed.");  return result;}  }
class C{  public void put(String key,long value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  private static int checkFieldTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'L':    return checkClassTypeSignature(signature,pos);case '[':  return checkTypeSignature(signature,pos + 1);default :return checkTypeVariableSignature(signature,pos);}}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException {  try {    decode(stream);  } catch (  InvalidKeyException e) {    e.printStackTrace();    throw new IOException("deserialized key is invalid: " + e.getMessage());  }}  }
class C{  public static String evaluate(String associatorString,String[] options) throws Exception {  Associator associator;  try {    associator=(Associator)Class.forName(associatorString).newInstance();  } catch (  Exception e) {    throw new Exception("Can't find class with name " + associatorString + '.');  }  return evaluate(associator,options);}  }
class C{  public static String[] toRole(Object oRoles) throws PageException {  if (oRoles instanceof String) {    oRoles=ListUtil.listToArrayRemoveEmpty(oRoles.toString(),",");  }  if (oRoles instanceof Array) {    Array arrRoles=(Array)oRoles;    String[] roles=new String[arrRoles.size()];    for (int i=0; i < roles.length; i++) {      roles[i]=Caster.toString(arrRoles.get(i + 1,""));    }    return roles;  }  throw new ApplicationException("invalid roles definition for tag loginuser");}  }
class C{  protected void parseOptions(CommandLine commandLine){  JetstreamApplicationInformation ai=getApplicationInformation();  if (commandLine.hasOption('b')) {    ai.setBeans(commandLine.getOptionValues('b'));  }  if (commandLine.hasOption('c')) {    ai.setConfigRoots(commandLine.getOptionValues('c'));  }  if (commandLine.hasOption("cv")) {    ai.setConfigVersion(commandLine.getOptionValue("cv"));  }  if (commandLine.hasOption('n')) {    ai.setApplicationName(commandLine.getOptionValue('n'));  }  if (commandLine.hasOption('p')) {    ai.setManagementPort(Integer.valueOf(commandLine.getOptionValue('p')));    System.setProperty("jetty_port",commandLine.getOptionValue('p'));  } else {    System.setProperty("jetty_port",String.valueOf(9999));  }  if (commandLine.hasOption('z')) {    ai.setZone(commandLine.getOptionValue('z'));  }  if (commandLine.hasOption("nd")) {    ai.useDNS(false);  }  if (commandLine.hasOption("wqz")) {    ai.setWorkQueueSz(Integer.valueOf(commandLine.getOptionValue("wqz")));  }  if (commandLine.hasOption("wt")) {    ai.setWorkerThreads(Integer.valueOf(commandLine.getOptionValue("wt")));  }}  }
class C{  public DocumentEventSupport createDocumentEventSupport(){  return new DocumentEventSupport();}  }
class C{  public static BufferedImage convertImageToARGB(Image image){  if (image instanceof BufferedImage && ((BufferedImage)image).getType() == BufferedImage.TYPE_INT_ARGB)   return (BufferedImage)image;  BufferedImage p=new BufferedImage(image.getWidth(null),image.getHeight(null),BufferedImage.TYPE_INT_ARGB);  Graphics2D g=p.createGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return p;}  }
class C{  public DatagramSocket() throws SocketException {  this(0);}  }
class C{  public synchronized void addSelectedNode(final Node selectedNode){  if (selectedNodes == null) {    setSelectedNode(selectedNode);  } else {    if (!selectedNodes.contains(selectedNode)) {      selectedNodes.add(selectedNode);    }  }}  }
class C{  public int readUnsignedShort(final JBBPByteOrder byteOrder) throws IOException {  final int b0=this.read();  if (b0 < 0) {    throw new EOFException();  }  final int b1=this.read();  if (b1 < 0) {    throw new EOFException();  }  return byteOrder == JBBPByteOrder.BIG_ENDIAN ? (b0 << 8) | b1 : (b1 << 8) | b0;}  }
class C{  public Element store(Object o){  PositionableCircle p=(PositionableCircle)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("positionableCircle");  storeCommonAttributes(p,element);  Element elem=new Element("size");  elem.setAttribute("radius","" + p.getRadius());  element.addContent(elem);  element.setAttribute("class","jmri.jmrit.display.controlPanelEditor.shape.configurexml.PositionableCircleXml");  return element;}  }
class C{  private static boolean isWindowsXPLafEnabled(){  return IS_OS_WINDOWS && Boolean.TRUE.equals(Toolkit.getDefaultToolkit().getDesktopProperty("win.xpstyle.themeActive")) && getSystemProperty("swing.noxp") == null;}  }
class C{  void checkAssignable(DiagnosticPosition pos,VarSymbol v,JCTree base,Env<AttrContext> env){  if ((v.flags() & FINAL) != 0 && ((v.flags() & HASINIT) != 0 || !((base == null || (base.hasTag(IDENT) && TreeInfo.name(base) == names._this)) && isAssignableAsBlankFinal(v,env)))) {    if (v.isResourceVariable()) {      log.error(pos,"try.resource.may.not.be.assigned",v);    } else {      log.error(pos,"cant.assign.val.to.final.var",v);    }  }}  }
class C{  public ByteArrayList inverseGrep(TIntProcedure condition){  ByteArrayList list=new ByteArrayList();  for (int i=0; i < _pos; i++) {    if (!condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  @Override public void visit(JavaClass someObj){  currentClass=someObj.getClassName();  currentMethod=null;  currentCFG=null;  currentLockDataFlow=null;  sawDateClass=false;}  }
class C{  private void launchReport(KeyNamePair pp){  MPrintFormat pf=MPrintFormat.get(Env.getCtx(),pp.getKey(),false);  launchReport(pf);}  }
class C{  public void addLeft(Widget widget){  left.add(widget);}  }
class C{  public static void beginSection(String sectionName){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    beginSectionV18(sectionName);  }}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public void extraCallback(String callbackName,Bundle args){}  }
class C{  public RecursiveVisitor(final Mask mask,final RegionFunction function,int maxDepth){  super(function,maxDepth);  checkNotNull(mask);  this.mask=mask;}  }
class C{  public static BufferedInputStream createBzip2InputStream(File file,boolean async) throws IOException {  final InputStream inStream;  if (async) {    inStream=new AsynchInputStream(new CBZip2InputStream(new BufferedInputStream(new FileInputStream(file),FileUtils.BUFFERED_STREAM_SIZE)));  } else {    inStream=new CBZip2InputStream(new BufferedInputStream(new FileInputStream(file),FileUtils.BUFFERED_STREAM_SIZE));  }  return new BufferedInputStream(inStream);}  }
class C{  private void validateState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);  validateTaskSubStage(currentState.taskState);  if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {switch (currentState.taskState.subStage) {case REMOVE_FROM_API_FE:case DEPROVISION_HOSTS:      break;default :    throw new IllegalStateException("Unknown task sub-stage: " + currentState.taskState.subStage);}}}  }
class C{  public EndpointUrlListDataType clone(){  EndpointUrlListDataType result=new EndpointUrlListDataType();  result.EndpointUrlList=EndpointUrlList == null ? null : EndpointUrlList.clone();  return result;}  }
class C{  public void shutdown(){  System.out.println("Stopping down mesos driver");  Protos.Status status=mesosSchedulerDriver.stop();  isShutdown.set(true);}  }
class C{  protected Long wrapValue(long k){  return new Long(k);}  }
class C{  public SchemaRegistryMultiple(List<String> schemaKeys,Comparator<Schema> schemaComparator){  this(schemaKeys);  this.schemaComparator=Preconditions.checkNotNull(schemaComparator);}  }
class C{  public void add(ChronixAnalysis analysis,boolean value,String identifier){  if (analysisSize < analyses.length) {    analyses[analysisSize]=analysis;    analysisValues[analysisSize]=value;    identifiers[analysisSize]=identifier;    analysisSize++;  } else {    throw new IndexOutOfBoundsException("Try to put analysis to map with max size " + analyses.length + " but index "+ analysisSize+ " is out of range.");  }}  }
class C{  private boolean barDBupdate(boolean add,int Node_ID){  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  int AD_Org_ID=Env.getContextAsInt(Env.getCtx(),"#AD_Org_ID");  int AD_User_ID=Env.getContextAsInt(Env.getCtx(),"#AD_User_ID");  StringBuffer sql=new StringBuffer();  if (add)   sql.append("INSERT INTO AD_TreeBar " + "(AD_Tree_ID,AD_User_ID,Node_ID, " + "AD_Client_ID,AD_Org_ID, "+ "IsActive,Created,CreatedBy,Updated,UpdatedBy)VALUES (").append(m_AD_Tree_ID).append(",").append(AD_User_ID).append(",").append(Node_ID).append(",").append(AD_Client_ID).append(",").append(AD_Org_ID).append(",").append("'Y',SysDate,").append(AD_User_ID).append(",SysDate,").append(AD_User_ID).append(")"); else   sql.append("DELETE AD_TreeBar WHERE AD_Tree_ID=").append(m_AD_Tree_ID).append(" AND AD_User_ID=").append(AD_User_ID).append(" AND Node_ID=").append(Node_ID);  int no=DB.executeUpdate(sql.toString(),false,null);  return no == 1;}  }
class C{  public static boolean[] copyOfRange(boolean[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      boolean[] copy=new boolean[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public static <T>LazyPVectorX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  @Override public boolean hasCustomSpawnLocation(){  return false;}  }
class C{  private void discoverFilerInfo(StorageSystem system) throws NetAppFileCollectionException {  _logger.info("Start Control Station discovery for storage system {}",system.getId());  Map<String,String> systemInfo=new HashMap<String,String>();  Map<String,String> systemVer=new HashMap<String,String>();  NetAppApi nApi=new NetAppApi.Builder(system.getIpAddress(),system.getPortNumber(),system.getUsername(),system.getPassword()).https(true).build();  try {    systemInfo=nApi.systemInfo();    systemVer=nApi.systemVer();    if ((null == systemInfo) || (systemInfo.size() <= 0)) {      _logger.error("Failed to retrieve NetApp Filer info!");      system.setReachableStatus(false);      return;    }    if ((null == systemVer) || (systemVer.size() <= 0)) {      _logger.error("Failed to retrieve NetApp Filer info!");      system.setReachableStatus(false);      return;    }    system.setReachableStatus(true);    system.setSerialNumber(systemInfo.get(SYSTEM_SERIAL_NUM));    String sysNativeGuid=NativeGUIDGenerator.generateNativeGuid(system);    system.setNativeGuid(sysNativeGuid);    system.setFirmwareVersion(systemVer.get(SYSTEM_FIRMWARE_REL));    _logger.info("NetApp Filer discovery for storage system {} complete",system.getId());  } catch (  Exception e) {    _logger.error("Failed to retrieve NetApp Filer info!");    system.setReachableStatus(false);    String msg="exception occurred while attempting to retrieve NetApp filer information. Storage system: " + system.getIpAddress() + " "+ e.getMessage();    _logger.error(msg);    throw new NetAppFileCollectionException(msg);  }}  }
class C{  protected final V unwrapValue(V value){  return value;}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  int findMinGrandChild(int index){  int leftChildIndex=getLeftChildIndex(index);  if (leftChildIndex < 0) {    return -1;  }  return findMin(getLeftChildIndex(leftChildIndex),4);}  }
class C{  public void translateRectInAppWindowToScreen(Rect rect){  rect.scale(applicationScale);}  }
class C{  public Message(String text,int type){  this(text,null,type);}  }
class C{  @Override public BoolQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  public long nextLong(long itemcount){  if (itemcount != countforzeta) {synchronized (this) {      if (itemcount > countforzeta) {        zetan=zeta(countforzeta,itemcount,theta,zetan);        eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);      } else       if ((itemcount < countforzeta) && (allowitemcountdecrease)) {        System.err.println("WARNING: Recomputing Zipfian distribtion. This is slow and should be avoided. (itemcount=" + itemcount + " countforzeta="+ countforzeta+ ")");        zetan=zeta(itemcount,theta);        eta=(1 - Math.pow(2.0 / items,1 - theta)) / (1 - zeta2theta / zetan);      }    }  }  double u=Utils.random().nextDouble();  double uz=u * zetan;  if (uz < 1.0) {    return 0;  }  if (uz < 1.0 + Math.pow(0.5,theta)) {    return 1;  }  long ret=base + (long)((itemcount) * Math.pow(eta * u - eta + 1,alpha));  setLastInt((int)ret);  return ret;}  }
class C{  public java.lang.StringBuffer insert(int offset,int i){  internal.insert(offset,i);  return this;}  }
class C{  static protected String hostFromUriStr(String uriStr){  debugOut("hostFromUriStr(\"" + uriStr + "\")");  String host=null;  URI uri;  try {    uri=new URI(uriStr);    host=uri.getHost();  } catch (  URISyntaxException e) {    debugOut(e.getMessage());  }  return host;}  }
class C{  @Override public void accept(Context context){  BasePlanModel basePlanModel=new BasePlanModelImpl();  OfferModel offerModel=new OfferModelImpl();  CycleModel cycleModel=new CycleModelImpl();  basePlanModel.updateAddonCost(recharge.getCurrentCost());  offerModel.addCardFromManualRecharge(buildRechargeOffer(context));  cycleModel.setLimit(type,recharge.getCurrentAmount());  view.close();}  }
class C{  public void close() throws IOException {  flush();}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public SyncMessage(SyncMessage other){  if (other.isSetType()) {    this.type=other.type;  }  if (other.isSetHello()) {    this.hello=new HelloMessage(other.hello);  }  if (other.isSetError()) {    this.error=new ErrorMessage(other.error);  }  if (other.isSetEchoRequest()) {    this.echoRequest=new EchoRequestMessage(other.echoRequest);  }  if (other.isSetEchoReply()) {    this.echoReply=new EchoReplyMessage(other.echoReply);  }  if (other.isSetGetRequest()) {    this.getRequest=new GetRequestMessage(other.getRequest);  }  if (other.isSetGetResponse()) {    this.getResponse=new GetResponseMessage(other.getResponse);  }  if (other.isSetPutRequest()) {    this.putRequest=new PutRequestMessage(other.putRequest);  }  if (other.isSetPutResponse()) {    this.putResponse=new PutResponseMessage(other.putResponse);  }  if (other.isSetDeleteRequest()) {    this.deleteRequest=new DeleteRequestMessage(other.deleteRequest);  }  if (other.isSetDeleteResponse()) {    this.deleteResponse=new DeleteResponseMessage(other.deleteResponse);  }  if (other.isSetSyncValue()) {    this.syncValue=new SyncValueMessage(other.syncValue);  }  if (other.isSetSyncValueResponse()) {    this.syncValueResponse=new SyncValueResponseMessage(other.syncValueResponse);  }  if (other.isSetSyncOffer()) {    this.syncOffer=new SyncOfferMessage(other.syncOffer);  }  if (other.isSetSyncRequest()) {    this.syncRequest=new SyncRequestMessage(other.syncRequest);  }  if (other.isSetFullSyncRequest()) {    this.fullSyncRequest=new FullSyncRequestMessage(other.fullSyncRequest);  }  if (other.isSetCursorRequest()) {    this.cursorRequest=new CursorRequestMessage(other.cursorRequest);  }  if (other.isSetCursorResponse()) {    this.cursorResponse=new CursorResponseMessage(other.cursorResponse);  }  if (other.isSetRegisterRequest()) {    this.registerRequest=new RegisterRequestMessage(other.registerRequest);  }  if (other.isSetRegisterResponse()) {    this.registerResponse=new RegisterResponseMessage(other.registerResponse);  }  if (other.isSetClusterJoinRequest()) {    this.clusterJoinRequest=new ClusterJoinRequestMessage(other.clusterJoinRequest);  }  if (other.isSetClusterJoinResponse()) {    this.clusterJoinResponse=new ClusterJoinResponseMessage(other.clusterJoinResponse);  }}  }
class C{  public ProportionNormalizationModel(ExampleSet exampleSet,HashMap<String,Double> attributeSums){  super(exampleSet);  this.attributeSums=attributeSums;  attributeNames=new HashSet<String>();  for (  Attribute attribute : exampleSet.getAttributes()) {    if (attribute.isNumerical()) {      attributeNames.add(attribute.getName());    }  }}  }
class C{  public EnableCapHandler(String cap){  this.cap=cap;  this.ignoreFail=false;}  }
class C{  public Boolean isWriteThrough(){  return writeThrough;}  }
class C{  public static <T>LePredicate<T> le(Property<T> property,T value){  return new LePredicate<>(property(property),value);}  }
class C{  public boolean hasRecords(short platformID){  for (Iterator i=records.keySet().iterator(); i.hasNext(); ) {    NameRecord rec=(NameRecord)i.next();    if (rec.platformID == platformID) {      return true;    }  }  return false;}  }
class C{  public XercesHTMLDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class htmlBuilderClass=classLoader.loadClass("org.apache.html.dom.HTMLBuilder");    htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES);    getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES);    Class htmlDOMImpl=classLoader.loadClass("org.apache.html.dom.HTMLDOMImplementationImpl");    Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES);    domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS);    Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl");    factory=(SAXParserFactory)saxFactoryClass.newInstance();  } catch (  InvocationTargetException ex) {    throw new DOMTestIncompatibleException(ex.getTargetException(),null);  }catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {    }  }  try {    factory.newSAXParser();  } catch (  ParserConfigurationException ex) {    throw new DOMTestIncompatibleException(ex,null);  }catch (  SAXException ex) {    throw new DOMTestIncompatibleException(ex,null);  }}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public boolean search(T[] collection,T target){  if (target == null) {    return false;  }  int low=0, high=collection.length - 1;  while (low <= high) {    int mid=(low + high) / 2;    int rc=target.compareTo(collection[mid]);    if (rc < 0) {      high=mid - 1;    } else     if (rc > 0) {      low=mid + 1;    } else {      return true;    }  }  return false;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  name.encode(tmp);  int nameType=name.getType();  if (nameType == GeneralNameInterface.NAME_ANY || nameType == GeneralNameInterface.NAME_X400 || nameType == GeneralNameInterface.NAME_EDI) {    out.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)nameType),tmp);  } else   if (nameType == GeneralNameInterface.NAME_DIRECTORY) {    out.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)nameType),tmp);  } else {    out.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,false,(byte)nameType),tmp);  }}  }
class C{  public static void save(GlowEntity entity,CompoundTag compound){  EntityStore<?> store=find(entity.getClass(),"save");  getBaseStore(store).save(entity,compound);}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new GridLayoutManager(9,1,new Insets(0,0,0,0),-1,-1));  final JLabel label1=new JLabel();  label1.setText("The error report is send to the author of BashSupport. Only the information displayed here will be transmitted.");  contentPane.add(label1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  descriptionField=new JTextArea();  descriptionField.setLineWrap(true);  descriptionField.setWrapStyleWord(true);  contentPane.add(descriptionField,new GridConstraints(6,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_WANT_GROW,new Dimension(-1,50),new Dimension(150,50),new Dimension(-1,300),0,false));  final JLabel label2=new JLabel();  label2.setText("Exception stack trace:");  contentPane.add(label2,new GridConstraints(7,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JLabel label3=new JLabel();  label3.setText("Description (optional):");  contentPane.add(label3,new GridConstraints(5,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JLabel label4=new JLabel();  label4.setText("Name/Email (optional):");  contentPane.add(label4,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  nameField=new JTextField();  nameField.setText("");  contentPane.add(nameField,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  final JScrollPane scrollPane1=new JScrollPane();  scrollPane1.setHorizontalScrollBarPolicy(30);  contentPane.add(scrollPane1,new GridConstraints(8,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  stacktraceField=new JTextArea();  stacktraceField.setEditable(false);  stacktraceField.setEnabled(true);  stacktraceField.setLineWrap(false);  stacktraceField.putClientProperty("html.disable",Boolean.TRUE);  scrollPane1.setViewportView(stacktraceField);  final JLabel label5=new JLabel();  label5.setText("Version:");  contentPane.add(label5,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  versionField=new JTextField();  versionField.setEditable(false);  versionField.setEnabled(false);  contentPane.add(versionField,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));}  }
class C{  private void computeInfrequentBlocks(IR ir){  int i=0;  float[] freq=new float[ir.getMaxBasicBlockNumber()];  float total=0f;  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    freq[i]=bb.getExecutionFrequency();    total+=freq[i];    i++;  }  Arrays.sort(freq);  float f=ir.options.PROFILE_INFREQUENT_THRESHOLD;  float goal=(1f - f) * total;  total=0f;  float threshold=0f;  for (i=freq.length - 1; i >= 0 && total < goal; i--) {    threshold=freq[i];    total+=threshold;  }  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    if (bb.getExecutionFrequency() < threshold) {      bb.setInfrequent();      container.counter1++;    } else {      bb.clearInfrequent();    }    container.counter2++;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.OPERATION_SOURCE__OPERATION:    return operation != null;}return super.eIsSet(featureID);}  }
class C{  public long nextLong(){  return nextLong(defaultRadix);}  }
class C{  private void drawFillCircle(Canvas canvas){  if (canvas != null && pointX >= 0 && pointY >= 0) {    int rbX=canvas.getWidth();    int rbY=canvas.getHeight();    float longDis=Math.max(pointX,pointY);    longDis=Math.max(longDis,Math.abs(rbX - pointX));    longDis=Math.max(longDis,Math.abs(rbY - pointY));    if (mRippleRadius > longDis) {      onCompleteDrawRipple();      return;    }    final float drawSpeed=longDis / mRippleDuration * 35;    mRippleRadius+=drawSpeed;    canvas.save();    mPath.reset();    canvas.clipPath(mPath);    if (mShapeType == 0) {      mPath.addCircle(rbX / 2,rbY / 2,WIDTH / 2,Path.Direction.CCW);    } else {      mRectF.set(0,0,WIDTH,HEIGHT);      mPath.addRoundRect(mRectF,mRoundRadius,mRoundRadius,Path.Direction.CCW);    }    canvas.clipPath(mPath,Region.Op.REPLACE);    canvas.drawCircle(pointX,pointY,mRippleRadius,mRipplePaint);    canvas.restore();  }}  }
class C{  protected boolean recursiveDelete(File toDelete){  if (!toDelete.exists()) {    return false;  }  if (toDelete.isDirectory()) {    boolean success=true;    for (    File entry : toDelete.listFiles()) {      success&=recursiveDelete(entry);    }    Log.d(TAG,"Recursively deleted: " + toDelete);    return success && toDelete.delete();  } else {    Log.d(TAG,"RMD deleting file: " + toDelete);    boolean success=toDelete.delete();    MediaUpdater.notifyFileDeleted(toDelete.getPath());    return success;  }}  }
class C{  public int size(){  return 9;}  }
class C{  protected ExpressionAST where(ExpressionAST expr,Intervalle intervalle) throws ScopeException {  ExpressionAST where=null;  ExpressionAST lower=intervalle.getLowerBoundExpression();  ExpressionAST upper=intervalle.getUpperBoundExpression();  where=createIntervalle(expr,expr,lower,upper);  return where != null ? ExpressionMaker.GROUP(where) : null;}  }
class C{  public void paint(Object target,boolean shouldClearRectBeforePaint){  Component comp=(Component)target;  if (isEmpty()) {    return;  }  if (!comp.isVisible()) {    return;  }  RepaintArea ra=this.cloneAndReset();  if (!subtract(ra.paintRects[VERTICAL],ra.paintRects[HORIZONTAL])) {    subtract(ra.paintRects[HORIZONTAL],ra.paintRects[VERTICAL]);  }  if (ra.paintRects[HORIZONTAL] != null && ra.paintRects[VERTICAL] != null) {    Rectangle paintRect=ra.paintRects[HORIZONTAL].union(ra.paintRects[VERTICAL]);    int square=paintRect.width * paintRect.height;    int benefit=square - ra.paintRects[HORIZONTAL].width * ra.paintRects[HORIZONTAL].height - ra.paintRects[VERTICAL].width * ra.paintRects[VERTICAL].height;    if (MAX_BENEFIT_RATIO * benefit < square) {      ra.paintRects[HORIZONTAL]=paintRect;      ra.paintRects[VERTICAL]=null;    }  }  for (int i=0; i < paintRects.length; i++) {    if (ra.paintRects[i] != null && !ra.paintRects[i].isEmpty()) {      Graphics g=comp.getGraphics();      if (g != null) {        try {          g.setClip(ra.paintRects[i]);          if (i == UPDATE) {            updateComponent(comp,g);          } else {            if (shouldClearRectBeforePaint) {              g.clearRect(ra.paintRects[i].x,ra.paintRects[i].y,ra.paintRects[i].width,ra.paintRects[i].height);            }            paintComponent(comp,g);          }        }  finally {          g.dispose();        }      }    }  }}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public char previous(){  if (pos > begin) {    pos--;    return text.charAt(pos);  } else {    return DONE;  }}  }
class C{  public static byte[] stringToGsm8BitPacked(String s){  byte[] ret;  int septets=countGsmSeptetsUsingTables(s,true,0,0);  ret=new byte[septets];  stringToGsm8BitUnpackedField(s,ret,0,ret.length);  return ret;}  }
class C{  public void text(int[] glyphIndices,int[] glyphAdvances) throws IOException {  currentStyleRecord=null;  recs.add(new Object[]{glyphIndices,glyphAdvances});  for (int i=0; i < glyphIndices.length; i++) {    if (glyphIndices[i] > maxGlyphIndex) {      maxGlyphIndex=glyphIndices[i];    }    if (glyphAdvances[i] > maxAdvance) {      maxAdvance=glyphAdvances[i];    }  }}  }
class C{  protected void addInstrumentationForDefaultTableswitchCase(BytecodeInstruction v,InsnList instrumentation){  if (!v.isTableSwitch())   throw new IllegalArgumentException("tableswitch instruction expected");  TableSwitchInsnNode toInstrument=(TableSwitchInsnNode)v.getASMNode();  LabelNode caseLabel=new LabelNode();  LabelNode defaultLabel=new LabelNode();  LabelNode endLabel=new LabelNode();  int keySize=(toInstrument.max - toInstrument.min) + 1;  LabelNode[] caseLabels=new LabelNode[keySize];  for (int i=0; i < keySize; i++)   caseLabels[i]=caseLabel;  TableSwitchInsnNode mySwitch=new TableSwitchInsnNode(toInstrument.min,toInstrument.max,defaultLabel,caseLabels);  addDefaultCaseInstrumentation(v,instrumentation,mySwitch,defaultLabel,caseLabel,endLabel);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Bundler putByteArray(String key,byte[] value){  bundle.putByteArray(key,value);  return this;}  }
class C{  @SuppressWarnings("ThrowableResultOfMethodCallIgnored") public void onDone(Exception e){  lock.writeLock().lock();  try {    assert !done;    if (e == null)     ctx.gateway().computeTaskComplete(taskPtr,0); else {      PlatformNativeException e0=X.cause(e,PlatformNativeException.class);      try (PlatformMemory mem=ctx.memory().allocate()){        PlatformOutputStream out=mem.output();        BinaryRawWriterEx writer=ctx.writer(out);        if (e0 == null) {          writer.writeBoolean(false);          writer.writeString(e.getClass().getName());          writer.writeString(e.getMessage());          writer.writeString(X.getFullStackTrace(e));        } else {          writer.writeBoolean(true);          writer.writeObject(e0.cause());        }        out.synchronize();        ctx.gateway().computeTaskComplete(taskPtr,mem.pointer());      }     }  }  finally {    done=true;    lock.writeLock().unlock();  }}  }
class C{  ValueExtractor(Iterator<IBinaryTreeNode<T>> internal){  this.internal=internal;}  }
class C{  public String tax(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String column=mField.getColumnName();  if (value == null)   return "";  int M_Product_ID=0;  if (column.equals("M_Product_ID"))   M_Product_ID=((Integer)value).intValue(); else   M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  int C_Charge_ID=0;  if (column.equals("C_Charge_ID"))   C_Charge_ID=((Integer)value).intValue(); else   C_Charge_ID=Env.getContextAsInt(ctx,WindowNo,"C_Charge_ID");  log.fine("Product=" + M_Product_ID + ", C_Charge_ID="+ C_Charge_ID);  if (M_Product_ID == 0 && C_Charge_ID == 0)   return amt(ctx,WindowNo,mTab,mField,value);  int shipC_BPartner_Location_ID=Env.getContextAsInt(ctx,WindowNo,"C_BPartner_Location_ID");  if (shipC_BPartner_Location_ID == 0)   return amt(ctx,WindowNo,mTab,mField,value);  log.fine("Ship BP_Location=" + shipC_BPartner_Location_ID);  int billC_BPartner_Location_ID=shipC_BPartner_Location_ID;  log.fine("Bill BP_Location=" + billC_BPartner_Location_ID);  Timestamp billDate=Env.getContextAsDate(ctx,WindowNo,"DateInvoiced");  log.fine("Bill Date=" + billDate);  Timestamp shipDate=billDate;  log.fine("Ship Date=" + shipDate);  int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Org_ID");  log.fine("Org=" + AD_Org_ID);  int M_Warehouse_ID=Env.getContextAsInt(ctx,"#M_Warehouse_ID");  log.fine("Warehouse=" + M_Warehouse_ID);  int C_Tax_ID=Tax.get(ctx,M_Product_ID,C_Charge_ID,billDate,shipDate,AD_Org_ID,M_Warehouse_ID,billC_BPartner_Location_ID,shipC_BPartner_Location_ID,Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y"));  log.info("Tax ID=" + C_Tax_ID);  if (C_Tax_ID == 0)   mTab.fireDataStatusEEvent(CLogger.retrieveError()); else   mTab.setValue("C_Tax_ID",new Integer(C_Tax_ID));  return amt(ctx,WindowNo,mTab,mField,value);}  }
class C{  static long adjustForField(long sizeSoFar,final Field f){  final Class<?> type=f.getType();  final int fsize=type.isPrimitive() ? primitiveSizes.get(type) : NUM_BYTES_OBJECT_REF;  return sizeSoFar + fsize;}  }
class C{  protected void sequence_DeclaredVersion(ISerializationContext context,DeclaredVersion semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public PolarColorWheelImageProducer(ColorSpace sys,int w,int h){  super(sys,w,h);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(data,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,fakeR.getId("id","decode_succeeded"),rawResult);      Bundle bundle=new Bundle();      Bitmap grayscaleBitmap=toBitmap(source,source.renderCroppedGreyscaleBitmap());      bundle.putParcelable(DecodeThread.BARCODE_BITMAP,grayscaleBitmap);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,fakeR.getId("id","decode_failed"));      message.sendToTarget();    }  }}  }
class C{  public void playCarousel(){  resetScrollTimer();  if (autoPlay && slideInterval > 0 && containerViewPager.getAdapter() != null && containerViewPager.getAdapter().getCount() > 1) {    swipeTimer.schedule(swipeTask,slideInterval,slideInterval);  }}  }
class C{  private List<TypeParameter> parseTypeParameters(List<Map<String,Object>> typeParams,final Declaration container,List<TypeParameter> existing){  if (typeParams == null)   return Collections.emptyList();  List<TypeParameter> allparms=new ArrayList<TypeParameter>((existing == null ? 0 : existing.size()) + typeParams.size());  if (existing != null && !existing.isEmpty()) {    allparms.addAll(existing);  }  List<TypeParameter> tparms=new ArrayList<TypeParameter>(typeParams.size());  for (  Map<String,Object> tp : typeParams) {    final Declaration maybe;    if (tp.get(KEY_METATYPE) instanceof TypeParameter) {      maybe=(TypeParameter)tp.get(KEY_METATYPE);    } else {      maybe=container.getDirectMember((String)tp.get(KEY_NAME),null,false);    }    if (maybe instanceof TypeParameter) {      allparms.add((TypeParameter)maybe);      tparms.add((TypeParameter)maybe);      tp.put(KEY_METATYPE,maybe);    } else {      TypeParameter tparm=new TypeParameter();      tparm.setUnit(container.getUnit());      tparm.setDeclaration(container);      container.getMembers().add(tparm);      if (tp.containsKey(KEY_NAME)) {        tparm.setName((String)tp.get(KEY_NAME));      } else       if (!tp.containsKey(KEY_TYPES)) {        throw new IllegalArgumentException("Invalid type parameter map " + tp);      }      String variance=(String)tp.get(KEY_DS_VARIANCE);      if ("out".equals(variance)) {        tparm.setCovariant(true);      } else       if ("in".equals(variance)) {        tparm.setContravariant(true);      }      if (container instanceof Scope) {        Scope scope=(Scope)container;        tparm.setContainer(scope);        tparm.setScope(scope);      }      tparm.setDefaulted(tp.containsKey(KEY_DEFAULT));      tparms.add(tparm);      allparms.add(tparm);      tp.put(KEY_METATYPE,tparm);    }  }  if (container instanceof Generic) {    ((Generic)container).setTypeParameters(tparms);  }  for (  Map<String,Object> tp : typeParams) {    TypeParameter tparm=(TypeParameter)tp.get(KEY_METATYPE);    if (tparm.getExtendedType() == null) {      if (tp.containsKey(KEY_PACKAGE)) {        Type subtype=getTypeFromJson(tp,container,allparms);        tparm.setExtendedType(subtype);      } else       if (tp.containsKey(KEY_TYPES)) {        if (!("u".equals(tp.get("comp")) || "i".equals(tp.get("comp")))) {          throw new IllegalArgumentException("Only union or intersection types are allowed as 'comp'");        }        Type subtype=getTypeFromJson(tp,container,allparms);        tparm.setName(subtype.asString());        tparm.setExtendedType(subtype);      } else {        tparm.setExtendedType(getTypeFromJson(voidclass,container,null));      }    }    if (tparm.isDefaulted()) {      @SuppressWarnings("unchecked") final Map<String,Object> deftype=(Map<String,Object>)tp.get(KEY_DEFAULT);      tparm.setDefaultTypeArgument(getTypeFromJson(deftype,container,existing));    }    if (tp.containsKey(KEY_SATISFIES)) {      @SuppressWarnings("unchecked") final List<Map<String,Object>> stypes=(List<Map<String,Object>>)tp.get(KEY_SATISFIES);      tparm.setSatisfiedTypes(parseTypeList(stypes,allparms));      tparm.setConstrained(true);    } else     if (tp.containsKey("of")) {      @SuppressWarnings("unchecked") final List<Map<String,Object>> oftype=(List<Map<String,Object>>)tp.get("of");      tparm.setCaseTypes(parseTypeList(oftype,allparms));      tparm.setConstrained(true);    }  }  return tparms;}  }
class C{  static public InputSource uriOrFileInputSource(String uriOrFile){  return new InputSource(UriOrFile.toUri(uriOrFile));}  }
class C{  private boolean delete(String key) throws AmazonClientException {  assert !F.isEmpty(key);  if (log.isDebugEnabled())   log.debug("Removing data from S3 [bucket=" + bucketName + ", key="+ key+ ']');  if (!hasKey(key))   return false;  s3.deleteObject(bucketName,key);  return true;}  }
class C{  private SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=m.compare(fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=m.compare(toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  public RoutingType createRoutingTypeFromString(EDataType eDataType,String initialValue){  RoutingType result=RoutingType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public ResultSetDataModelTestCase(String name){  super(name);}  }
class C{  @Override public Set<Statement> sum(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Set<Statement> left,final Set<Statement> right){  final Set<Statement> tmp=new LinkedHashSet<Statement>(left);  tmp.addAll(right);  return tmp;}  }
class C{  @Override public DummyWorkspaceClient workspace(){  return workspaceClient;}  }
class C{  protected boolean writeFields(DataOutputStream dd) throws IOException {  field_info fi;  int i;  for (i=0; i < fields_count; i++) {    fi=fields[i];    dd.writeShort(fi.access_flags);    dd.writeShort(fi.name_index);    dd.writeShort(fi.descriptor_index);    dd.writeShort(fi.attributes_count);    if (fi.attributes_count > 0) {      writeAttributes(dd,fi.attributes_count,fi.attributes);    }  }  return true;}  }
class C{  public static CustomShortcutSet createShortcut(char ch){  Character mnemonic=Character.valueOf(ch);  String shortcut=SystemInfo.isMac && SystemInfo.isJavaVersionAtLeast("1.7") ? "control alt pressed " + mnemonic : "alt pressed " + mnemonic;  return CustomShortcutSet.fromString(shortcut);}  }
class C{  private void visitFromCached(Document document,StoredFieldVisitor visitor) throws IOException {  for (  IndexableField f : document) {    FieldInfo info=fieldInfos.fieldInfo(f.name());switch (visitor.needsField(info)) {case YES:      if (f.binaryValue() != null) {        BytesRef binaryValue=f.binaryValue();        byte copy[]=new byte[binaryValue.length];        System.arraycopy(binaryValue.bytes,binaryValue.offset,copy,0,copy.length);        visitor.binaryField(info,copy);      } else       if (f.numericValue() != null) {        Number numericValue=f.numericValue();        if (numericValue instanceof Double) {          visitor.doubleField(info,numericValue.doubleValue());        } else         if (numericValue instanceof Integer) {          visitor.intField(info,numericValue.intValue());        } else         if (numericValue instanceof Float) {          visitor.floatField(info,numericValue.floatValue());        } else         if (numericValue instanceof Long) {          visitor.longField(info,numericValue.longValue());        } else {          throw new AssertionError();        }      } else {        visitor.stringField(info,f.stringValue());      }    break;case NO:  break;case STOP:return;}}}  }
class C{  public static void add(List<String> options,char option,long value){  add(options,"" + option,value);}  }
class C{  public String toString(){  if (root == null) {    return "()";  }  return formatNode(root);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String createTempFile(String prefix,String suffix,boolean deleteOnExit,boolean inTempDir) throws IOException {  return FilePath.get(prefix).createTempFile(suffix,deleteOnExit,inTempDir).toString();}  }
class C{  final synchronized public SnmpValue duplicate(){  return (SnmpValue)clone();}  }
class C{  @SuppressWarnings("unchecked") private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  protected void runDBSCAN(Relation<O> relation,RangeQuery<O> rangeQuery){  final int size=relation.size();  FiniteProgress objprog=LOG.isVerbose() ? new FiniteProgress("Processing objects",size,LOG) : null;  IndefiniteProgress clusprog=LOG.isVerbose() ? new IndefiniteProgress("Number of clusters",LOG) : null;  processedIDs=DBIDUtil.newHashSet(size);  ArrayModifiableDBIDs seeds=DBIDUtil.newArray();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    if (!processedIDs.contains(iditer)) {      expandCluster(relation,rangeQuery,iditer,seeds,objprog,clusprog);    }    if (objprog != null && clusprog != null) {      objprog.setProcessed(processedIDs.size(),LOG);      clusprog.setProcessed(resultList.size(),LOG);    }    if (processedIDs.size() == size) {      break;    }  }  LOG.ensureCompleted(objprog);  LOG.setCompleted(clusprog);}  }
class C{  public boolean isLevel(){  return level;}  }
class C{  public static Comment[] toCommentArray(Document doc,Object o) throws PageException {  if (o instanceof Node[]) {    Node[] nodes=(Node[])o;    if (_isAllOfSameType(nodes,Node.COMMENT_NODE))     return (Comment[])nodes;    Comment[] comments=new Comment[nodes.length];    for (int i=0; i < nodes.length; i++) {      comments[i]=toComment(doc,nodes[i]);    }    return comments;  } else   if (o instanceof Collection) {    Collection coll=(Collection)o;    Iterator<Object> it=coll.valueIterator();    List<Comment> comments=new ArrayList<Comment>();    while (it.hasNext()) {      comments.add(toComment(doc,it.next()));    }    return comments.toArray(new Comment[comments.size()]);  }  Node[] nodes=_toNodeArray(doc,o);  if (nodes != null)   return toCommentArray(doc,nodes);  try {    return new Comment[]{toComment(doc,o)};  } catch (  ExpressionException e) {    throw new XMLException("can't cast Object of type " + Caster.toClassName(o) + " to a XML Comment Array");  }}  }
class C{  public LightHouse(){  super();}  }
class C{  static public void addItems(JMenuBar m){  java.util.List<ComponentFactory> list=jmri.InstanceManager.getList(ComponentFactory.class);  for (  ComponentFactory memo : list) {    JMenu menu=memo.getMenu();    if (menu != null) {      m.add(menu);    }  }  if (jmri.jmrix.easydcc.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.easydcc.EasyDCCMenu"));  }  if (jmri.jmrix.grapevine.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.grapevine.GrapevineMenu"));  }  if (jmri.jmrix.oaktree.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.oaktree.OakTreeMenu"));  }  if (jmri.jmrix.rps.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.rps.RpsMenu"));  }  if (jmri.jmrix.secsi.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.secsi.SecsiMenu"));  }  if (jmri.jmrix.tmcc.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.tmcc.TMCCMenu"));  }  if (jmri.jmrix.direct.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.direct.DirectMenu"));  }  if (jmri.jmrix.maple.ActiveFlag.isActive()) {    m.add(getMenu("jmri.jmrix.maple.MapleMenu"));  }}  }
class C{  @SuppressWarnings("unchecked") public static final <L extends LatticeElement>L minimumJoin(L e,Collection<L> elementSet){  Iterator<L> iter=elementSet.iterator();  L result=null;  while (iter.hasNext()) {    L newElement=(L)(e.join(iter.next()));    if (!newElement.equals(e) && (result == null || newElement.lessOrEqual(result)))     result=newElement;  }  assert (result != null);  return result;}  }
class C{  private Validator createValidator(Schema schema){  Stack stack=(Stack)validatorHandlerCache.get(schema);  if (stack == null) {    stack=new Stack();    validatorHandlerCache.put(schema,stack);  }  if (stack.empty())   return schema.createValidator(properties);  return (Validator)stack.pop();}  }
class C{  public boolean exists(int key){  return find(key) >= 0;}  }
class C{  public TungstenPropertiesIO(File path){  this(new JavaFileIO(),new FilePath(path.getAbsolutePath()));}  }
class C{  static <T>Stream<T> makeRef(AbstractPipeline<?,T,?> upstream){  return new OfRef<>(upstream);}  }
class C{  private Object toBinary(Object src){  return platformCtx.kernalContext().grid().binary().toBinary(src);}  }
class C{  public void actionPerformed(final ActionEvent e){  Object o=e.getSource();  if (o == edible) {    bitesToDie.setEnabled(edible.isSelected());  }}  }
class C{  public SecureChannel createSecureChannel(TransportChannelSettings settings) throws ServiceResultException {  return createSecureChannel(settings.getDescription().getEndpointUrl(),settings);}  }
class C{  public GdbContinue cont() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("continue");  return GdbContinue.parse(gdbOutput);}  }
class C{  public ResultFileMerger(){  super();}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  private void build(MethodPart read,String name) throws Exception {  MethodPart match=write.take(name);  if (match != null) {    build(read,match);  } else {    build(read);  }}  }
class C{  public void updateStyle(AbstractButton b){  SeaGlassContext context=getContext(b,SynthConstants.ENABLED);  SynthStyle oldStyle=style;  style=SeaGlassLookAndFeel.updateStyle(context,this);  if (style != oldStyle) {    if (b.getMargin() == null || (b.getMargin() instanceof UIResource)) {      Insets margin=(Insets)style.get(context,getPropertyPrefix() + "margin");      if (margin == null) {        margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;      }      b.setMargin(margin);    }    Object value=style.get(context,getPropertyPrefix() + "iconTextGap");    if (value != null) {      LookAndFeel.installProperty(b,"iconTextGap",value);    }    value=style.get(context,getPropertyPrefix() + "contentAreaFilled");    LookAndFeel.installProperty(b,"contentAreaFilled",value != null ? value : Boolean.TRUE);    value=b.getClientProperty(APPLE_PREFIX + "buttonType");    if (value != null) {      if ("segmented".equals(value)) {        b.setMargin(SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS);      }    }    if (oldStyle != null) {      uninstallKeyboardActions(b);      installKeyboardActions(b);    }  }  context.dispose();}  }
class C{  public SocketSecurityException(String s,Exception ex){  super(s,ex);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.657 -0500",hash_original_method="C8329D18FDDAB97E8C009C3EF70FA11B",hash_generated_method="CFB8030739B97BA355CC33540D3F7220") private BluetoothSocket(int type,int fd,boolean auth,boolean encrypt,String address,int port) throws IOException {  this(type,fd,auth,encrypt,new BluetoothDevice(address),port,null);}  }
class C{  private void dump(RPClass rpclass) throws FileNotFoundException {  if (rpclass.getName().equals("")) {    return;  }  String parent=null;  if (rpclass.getParent() != null) {    parent=rpclass.getParent().getName();  }  writer=new JavaClassWriter(outputFolder,rpclass.getName());  writer.writeClassDefinition(parent);  for (  Definition def : rpclass.getDefinitions()) {    if (def.getName().equals("#clientid") || def.getName().equals("#db_id") || def.getName().equals("id")) {      continue;    }    dumpDefinition(def);  }  writer.writeEndOfClass();  writer.close();}  }
class C{  public static <V,E>UndirectedGraph<V,E> unmodifiableUndirectedGraph(UndirectedGraph<V,E> graph){  return new UnmodifiableUndirectedGraph<V,E>(graph);}  }
class C{  public double mulPositionW(Matrix4fc mat){  return mulPositionW(mat,this);}  }
class C{  public static Seconds secondsBetween(ReadablePartial start,ReadablePartial end){  if (start instanceof LocalTime && end instanceof LocalTime) {    Chronology chrono=DateTimeUtils.getChronology(start.getChronology());    int seconds=chrono.seconds().getDifference(((LocalTime)end).getLocalMillis(),((LocalTime)start).getLocalMillis());    return Seconds.seconds(seconds);  }  int amount=BaseSingleFieldPeriod.between(start,end,ZERO);  return Seconds.seconds(amount);}  }
class C{  public final Vec2 subLocal(Vec2 v){  x-=v.x;  y-=v.y;  return this;}  }
class C{  public String toString(){  throw new UnsupportedOperationException();}  }
class C{  private void drawMultipleEllipse(Point2D point,double boxWidth,double oRadius,Graphics2D g2){  Ellipse2D dot1=new Ellipse2D.Double(point.getX() - (boxWidth / 2) + oRadius,point.getY(),oRadius,oRadius);  Ellipse2D dot2=new Ellipse2D.Double(point.getX() + (boxWidth / 2),point.getY(),oRadius,oRadius);  g2.draw(dot1);  g2.draw(dot2);}  }
class C{  private Placeholder createSessionFromUri(Uri uri){  ContentResolver resolver=mContext.getContentResolver();  Cursor cursor=resolver.query(uri,new String[]{MediaStore.Images.Media.DATE_TAKEN,MediaStore.Images.Media.DISPLAY_NAME},null,null,null);  if (cursor == null || cursor.getCount() == 0) {    return null;  }  int dateIndex=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_TAKEN);  int nameIndex=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME);  cursor.moveToFirst();  long date=cursor.getLong(dateIndex);  String name=cursor.getString(nameIndex);  if (name.toLowerCase().endsWith(Storage.JPEG_POSTFIX)) {    name=name.substring(0,name.length() - Storage.JPEG_POSTFIX.length());  }  return new Placeholder(name,uri,date);}  }
class C{  public void visitClassType(String name){}  }
class C{  @NotNull @ObjectiveCName("createChannelWithTitle:withAvatar:") public Promise<Integer> createChannel(String title,String avatarDescriptor){  return modules.getGroupsModule().createChannel(title,avatarDescriptor);}  }
class C{  public void taskFinished(){  if (m_TaskMonitor != null) {    m_TaskMonitor.taskFinished();  }}  }
class C{  @Override public void build(BTreeBuilderInfo segmentBuilderInfos){  long totalNumberOfTuple=0;  int groupCounter;  int nInternal=0;  BTreeNode curNode=null;  BTreeNode prevNode=null;  List<BTreeNode[]> nodeGroups=new ArrayList<BTreeNode[]>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  BTreeNode[] currentGroup=null;  List<List<IndexKey>> interNSKeyList=new ArrayList<List<IndexKey>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<IndexKey> leafNSKeyList=null;  long nodeNumber=0;  for (int index=0; index < segmentBuilderInfos.getFooterList().get(0).getBlockletList().size(); index++) {    curNode=new BlockletBTreeLeafNode(segmentBuilderInfos,index,nodeNumber++);    totalNumberOfTuple+=segmentBuilderInfos.getFooterList().get(0).getBlockletList().get(index).getNumberOfRows();    nLeaf++;    if (prevNode != null) {      prevNode.setNextNode(curNode);    }    prevNode=curNode;    groupCounter=(nLeaf - 1) % (maxNumberOfEntriesInNonLeafNodes);    if (groupCounter == 0) {      leafNSKeyList=new ArrayList<IndexKey>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      currentGroup=new BTreeNode[maxNumberOfEntriesInNonLeafNodes];      nodeGroups.add(currentGroup);      nInternal++;      interNSKeyList.add(leafNSKeyList);    }    if (null != leafNSKeyList) {      leafNSKeyList.add(convertStartKeyToNodeEntry(segmentBuilderInfos.getFooterList().get(0).getBlockletList().get(index).getBlockletIndex().getBtreeIndex().getStartKey()));    }    if (null != currentGroup) {      currentGroup[groupCounter]=curNode;    }  }  if (totalNumberOfTuple == 0) {    return;  }  addIntermediateNode(curNode,nodeGroups,currentGroup,interNSKeyList,nInternal);  LOGGER.info("****************************Total Number Rows In BTREE: " + totalNumberOfTuple);}  }
class C{  private void addProtocolIfNotExists(Set<String> protocols,String protocolType){  if (!protocols.contains(protocolType)) {    protocols.add(protocolType);  }}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  AxisState ret=super.draw(g2,cursor,plotArea,dataArea,edge,plotState);  if (isAdvanceLineVisible()) {    double xx=valueToJava2D(getRange().getUpperBound(),dataArea,edge);    Line2D mark=null;    g2.setStroke(getAdvanceLineStroke());    g2.setPaint(getAdvanceLinePaint());    if (edge == RectangleEdge.LEFT) {      mark=new Line2D.Double(cursor,xx,cursor + dataArea.getWidth(),xx);    } else     if (edge == RectangleEdge.RIGHT) {      mark=new Line2D.Double(cursor - dataArea.getWidth(),xx,cursor,xx);    } else     if (edge == RectangleEdge.TOP) {      mark=new Line2D.Double(xx,cursor + dataArea.getHeight(),xx,cursor);    } else     if (edge == RectangleEdge.BOTTOM) {      mark=new Line2D.Double(xx,cursor,xx,cursor - dataArea.getHeight());    }    g2.draw(mark);  }  return ret;}  }
class C{  public void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet) throws TransformerException {  applyAttrSets(transformer,stylesheet,m_attributeSetsNames);}  }
class C{  @Override public FrameState duplicateWithVirtualState(){  FrameState newOuterFrameState=outerFrameState();  if (newOuterFrameState != null) {    newOuterFrameState=newOuterFrameState.duplicateWithVirtualState();  }  ArrayList<EscapeObjectState> newVirtualMappings=null;  if (virtualObjectMappings != null) {    newVirtualMappings=new ArrayList<>(virtualObjectMappings.size());    for (    EscapeObjectState state : virtualObjectMappings) {      newVirtualMappings.add(state.duplicateWithVirtualState());    }  }  return graph().add(new FrameState(newOuterFrameState,code,bci,values,localsSize,stackSize,rethrowException,duringCall,monitorIds,newVirtualMappings));}  }
class C{  public SetHypervolume(){  super();}  }
class C{  public void send(PacketOutputStream writer,int statementId,short parameterId,ParameterHolder param) throws IOException {  writer.startPacket(0);  writer.buffer.put(Packet.COM_STMT_SEND_LONG_DATA);  writer.writeInt(statementId);  writer.buffer.putShort(parameterId);  param.writeBinary(writer);  writer.finishPacketWithoutRelease(true);}  }
class C{  public StrBuilder minimizeCapacity(){  if (buffer.length > length()) {    final char[] old=buffer;    buffer=new char[length()];    System.arraycopy(old,0,buffer,0,size);  }  return this;}  }
class C{  @SuppressWarnings("fallthrough") private String escapeCharacters(final String unescaped){  if (TextUtils.isEmpty(unescaped)) {    return "";  }  final StringBuilder tmpBuilder=new StringBuilder();  final int length=unescaped.length();  for (int i=0; i < length; i++) {    final char ch=unescaped.charAt(i);switch (ch) {case ';':{        tmpBuilder.append('\\');        tmpBuilder.append(';');        break;      }case '\r':{      if (i + 1 < length) {        char nextChar=unescaped.charAt(i);        if (nextChar == '\n') {          break;        } else {        }      } else {      }    }case '\n':{    tmpBuilder.append("\\n");    break;  }case '\\':{  if (mIsV30OrV40) {    tmpBuilder.append("\\\\");    break;  } else {  }}case '<':case '>':{if (mIsDoCoMo) {  tmpBuilder.append('\\');  tmpBuilder.append(ch);} else {  tmpBuilder.append(ch);}break;}case ',':{if (mIsV30OrV40) {tmpBuilder.append("\\,");} else {tmpBuilder.append(ch);}break;}default :{tmpBuilder.append(ch);break;}}}return tmpBuilder.toString();}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public final BigDecimal bigVal(){  return this.bigVal;}  }
class C{  public double r(){  return Math.sqrt(x * x + y * y);}  }
class C{  public void trim(){  trim(0);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public ChunkCoords inDimension(int dimId){  return new ChunkCoords(dimId,x,y,z);}  }
class C{  private void init(Config config){  this.config=config;  this.zkStateConfig.zkQuorum=config.getString("zookeeper.zkQuorum");  this.zkStateConfig.zkSessionTimeoutMs=config.getInt("zookeeper.zkSessionTimeoutMs");  this.zkStateConfig.zkRetryTimes=config.getInt("zookeeper.zkRetryTimes");  this.zkStateConfig.zkRetryInterval=config.getInt("zookeeper.zkRetryInterval");  this.zkStateConfig.zkRoot=ZK_ROOT_PREFIX + "/" + config.getString("siteId");  this.jobHistoryEndpointConfig.site=config.getString("siteId");  this.jobHistoryEndpointConfig.basePath=config.getString("endpointConfig.basePath");  this.jobHistoryEndpointConfig.mrHistoryServerUrl=config.getString("endpointConfig.mrHistoryServerUrl");  for (  Map.Entry<String,ConfigValue> entry : config.getConfig("endpointConfig.hdfs").entrySet()) {    this.jobHistoryEndpointConfig.hdfs.put(entry.getKey(),entry.getValue().unwrapped().toString());  }  this.jobHistoryEndpointConfig.timeZone=config.getString("endpointConfig.timeZone");  this.eagleServiceConfig.eagleServiceHost=config.getString("service.host");  String port=config.getString("service.port");  this.eagleServiceConfig.eagleServicePort=(port == null ? 8080 : Integer.parseInt(port));  this.eagleServiceConfig.username=config.getString("service.username");  this.eagleServiceConfig.password=config.getString("service.password");  this.eagleServiceConfig.readTimeoutSeconds=config.getInt("service.readTimeOutSeconds");  LOG.info("Successfully initialized MRHistoryJobConfig");  LOG.info("zkStateConfig.zkQuorum: " + this.zkStateConfig.zkQuorum);  LOG.info("eagleService.host: " + this.eagleServiceConfig.eagleServiceHost);  LOG.info("eagleService.port: " + this.eagleServiceConfig.eagleServicePort);}  }
class C{  public void init() throws ServletException {}  }
class C{  public static double[][] one(int m,int n){  return fill(m,n,1.0);}  }
class C{  @NoInline private void closeAndEnqueueTail(int arity){  Address last;  if (!bufferOffset(tail).isZero()) {    last=normalizeTail(arity);  } else {    last=tailBufferEnd.minus(BYTES_IN_ADDRESS);  }  queue.enqueue(last.plus(BYTES_IN_ADDRESS),arity,true);}  }
class C{  public boolean hasKeyPurposeId(KeyPurposeId keyPurposeId){  return (usageTable.get(keyPurposeId) != null);}  }
class C{  public String replaceRegionName(String name){  if (replacements.containsKey(name)) {    return replacements.get(name);  }  return name;}  }
class C{  private Entry successor(Entry t){  if (t == null)   return null; else   if (t.right != null) {    Entry p=t.right;    while (p.left != null)     p=p.left;    return p;  } else {    Entry p=t.parent;    Entry ch=t;    while (p != null && ch == p.right) {      ch=p;      p=p.parent;    }    return p;  }}  }
class C{  public boolean verbosegc(){  return soot.PhaseOptions.getBoolean(options,"verbosegc");}  }
class C{  @Override public Resource createRelative(String relativePath) throws MalformedURLException {  if (relativePath.startsWith("/")) {    relativePath=relativePath.substring(1);  }  return new UrlResource(new URL(this.url,relativePath));}  }
class C{  public static void initialize(Context context){  initialize(context,null,null);}  }
class C{  public static byte[] decode(String encoded) throws Exception {  if (encoded == null)   return null;  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    throw new Exception("decoding.divisible.four");  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0)   return new byte[0];  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++])))     throw new Exception("decoding.general");    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    throw new Exception("decoding.general");  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0)       throw new Exception("decoding.general");      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0)       throw new Exception("decoding.general");      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      throw new Exception("decoding.general");    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public DiscoveryContainer<T> mergeDiscoveries(DiscoveryContainer<?> other){  boolean changed=false;  for (  Entry<AspectItem,List<IAspectType>> entry : other.discoveredStaticAspects.entrySet()) {    AspectItem otherItem=entry.getKey();    List<IAspectType> otherTypes=entry.getValue();    if (!this.discoveredStaticAspects.containsKey(otherItem)) {      this.discoveredStaticAspects.put(otherItem,otherTypes);      changed=true;    } else {      List<IAspectType> aspectTypes=this.discoveredStaticAspects.get(otherItem);      for (      IAspectType otherType : otherTypes) {        if (!aspectTypes.contains(otherType)) {          aspectTypes.add(otherType);          changed=true;        }      }    }  }  if (changed)   this.saveContainer();  return this;}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public CompilationUnitDeclaration resolve(ICompilationUnit sourceUnit,boolean verifyMethods,boolean analyzeCode,boolean generateCode){  return resolve(null,sourceUnit,verifyMethods,analyzeCode,generateCode);}  }
class C{  public void addFirst(E e){  addBefore(e,header.next);}  }
class C{  public AccelerometerCompassProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD));}  }
class C{  public int countServiceTemplateFile(long serviceInfoId) throws PortalException, SystemException {  int count=serviceFileTemplatePersistence.countByServiceinfoId(serviceInfoId);  return count;}  }
class C{  public boolean containsBugButtonsItem(Connector connector){  boolean result=false;  for (  RaptorTabFolder folder : folders) {    for (int i=0; i < folder.getItemCount(); i++) {      if (folder.getRaptorTabItemAt(i).raptorItem instanceof BugButtonsWindowItem) {        BugButtonsWindowItem item=(BugButtonsWindowItem)folder.getRaptorTabItemAt(i).raptorItem;        if (item.getConnector() == connector) {          result=true;          break;        }      }    }  }  return result;}  }
class C{  public boolean hasProperty(CSSName cssName){  return cascadedProperties.get(cssName) != null;}  }
class C{  public Collection<Address> servers(){  return servers;}  }
class C{  public void check(){  if (!hasAnimVal) {    if (baseVal == null) {      baseVal=new BaseSVGLengthList();    }    baseVal.revalidate();    if (baseVal.missing) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MISSING,null);    }    if (baseVal.malformed) {      throw new LiveAttributeException(element,localName,LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,baseVal.getValueAsString());    }  }}  }
class C{  @LargeTest public void testEffectInvalidStartTimeAndDuration() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_15fps_1200Kbps_AACLC_48KHz_32kbps_m_1_17.3gp";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  try {    mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect1",400000000,2000,EffectColor.TYPE_COLOR,EffectColor.GREEN);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect with invalid StartTime",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect1",-1,2000,EffectColor.TYPE_COLOR,EffectColor.GREEN);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect with invalid StartTime",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createEffectItem(mediaVideoItem1,"effect1",2000,-1,EffectColor.TYPE_COLOR,EffectColor.GREEN);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Effect with invalid Duration",flagForException);}  }
class C{  public HTTPTokener(String string){  super(string);}  }
class C{  protected ObjectReferenceMapping initManyToOneMapping(){  ObjectReferenceMapping mapping=getDescriptor().getClassDescriptor().newManyToOneMapping();  processRelationshipMapping(mapping);  mapping.setIsOptional(isOptional());  mapping.setDerivesId(derivesId());  processIndirection(mapping);  processReturnInsertAndUpdate();  return mapping;}  }
class C{  private void rc4shuffle(byte[] shuffle,byte[] key,Cipher rc4) throws GeneralSecurityException {  final byte[] shuffleKey=new byte[key.length];  for (int i=1; i <= 19; ++i) {    for (int j=0; j < shuffleKey.length; ++j) {      shuffleKey[j]=(byte)(key[j] ^ i);    }    initEncryption(rc4,createRC4Key(shuffleKey));    cryptInPlace(rc4,shuffle);  }}  }
class C{  public ForumPostConfig createReply(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/create-reply",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    ForumPostConfig reply=new ForumPostConfig();    reply.parseXML(root);    return reply;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  private void addOne(){  m_GridVector[0]=addOne(m_GridVector[0]);  int i=1;  while (overflow(m_GridVector[i - 1]) && i < m_Size) {    m_GridVector[i]=addOne(m_GridVector[i]);    i++;  }}  }
class C{  private boolean areMultipleLinesSelected(ITextViewer viewer){  if (viewer == null)   return false;  Point s=viewer.getSelectedRange();  if (s.y == 0)   return false;  try {    IDocument document=viewer.getDocument();    int startLine=document.getLineOfOffset(s.x);    int endLine=document.getLineOfOffset(s.x + s.y);    IRegion line=document.getLineInformation(startLine);    return startLine != endLine || (s.x == line.getOffset() && s.y == line.getLength());  } catch (  BadLocationException x) {    return false;  }}  }
class C{  public TrailedPortrayal2D(GUIState state,SimplePortrayal2D child,FieldPortrayal2D fieldPortrayal,double length){  this(state,child,fieldPortrayal,length,DEFAULT_MIN_COLOR,DEFAULT_MAX_COLOR);}  }
class C{  public CompilationException(int errorStatus,String errorJson,String errorText,String errorMessage,String errorFile,String errorSrc){  super(errorMessage);  this.errorStatus=errorStatus;  this.errorJson=errorJson;  this.errorText=errorText;  this.errorMessage=errorMessage;  this.errorFile=errorFile;  this.errorSrc=errorSrc;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public static void loadCircularImage(Context context,OkulusImageView imageView,String imageUrl,AvatarBitmapTransformation.AvatarSize avatarSize,TextDrawable drawable){  Glide.with(context).load(imageUrl).asBitmap().animate(R.anim.fade_in).placeholder(drawable).transform(AvatarBitmapTransformation.transformationFor(context,avatarSize)).diskCacheStrategy(DiskCacheStrategy.SOURCE).error(drawable).into(imageView);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean matches(String string,String expression){  if (expression.startsWith(WILDCARD_TOKEN)) {    return string.endsWith(expression.substring(WILDCARD_TOKEN.length()));  }  return Objects.equals(expression,string);}  }
class C{  public void initEvent(String eventTypeArg,boolean canBubbleArg,boolean cancelableArg){  this.type=eventTypeArg;  this.isBubbling=canBubbleArg;  this.cancelable=cancelableArg;}  }
class C{  public void dump_json(PrintStream fp,String indent){  fp.printf("%s{ %s,\n",indent,json_field("type",type));  fp.printf("%s  %s,\n",indent,json_field("link",link));  String sig=method.getSignature();  fp.printf("%s  %s,\n",indent,json_field("signature",sig));  if (stmt != null) {    SootMethodRef invoke=stmt.getInvokeExpr().getMethodRef();    String invokeSig;    try {      SootMethod concrete=SootUtils.resolve(stmt.getInvokeExpr().getMethodRef());      invokeSig=concrete.getSignature();    } catch (    CannotFindMethodException e1) {      logger.debug("Cannot find concrete method for {} in SourceCallChainInfo.dump_json()",stmt);      invokeSig=invoke.getSignature();    }    if (!invokeSig.equals(sig)) {      fp.printf("%s  %s,\n",indent,json_field("source-signature",invokeSig));    }  }  SourceLocationTag slt=(stmt == null) ? SootUtils.getMethodLocation(method) : getSourceLocation(stmt);  if (slt != null) {    fp.printf("%s  %s",indent,json_field("src-loc"));    fp.printf("{ %s, %s},\n",json_field("class",slt.getClz()),json_field("line",slt.getLine()));  }  fp.printf("%s  %s,\n",indent,json_field("syscalls",syscalls));  fp.printf("%s  %s,\n",indent,json_field("calls",calls));  if ((contents != null) && (contents.length > 0)) {    fp.printf("%s  %s,\n",indent,json_field("score",score));    fp.printf("%s  %s [\n",indent,json_field("contents"));    String delim="";    for (    SourceCallChainInfo cci : contents) {      fp.print(delim);      delim=",\n";      cci.dump_json(fp,indent + "  ");    }    fp.printf("\n%s]}",indent);  } else {    fp.printf("%s  %s\n",indent,json_field("score",score));    fp.printf("%s}",indent);  }}  }
class C{  public String convertBinaryToHexString(byte[] bytes){  StringBuilder builder=new StringBuilder(bytes.length * 2);  for (  byte b : bytes) {    int highBitsInt=(b >> 4) & 0xF;    int lowBitsInt=b & 0xF;    builder.append(HEX_CHARS[highBitsInt]);    builder.append(HEX_CHARS[lowBitsInt]);  }  return builder.toString();}  }
class C{  @Override public Eval<Long> count(){  return Eval.later(null);}  }
class C{  private GridifyUtils(){}  }
class C{  public static String transform1(String file,String path){  if (path.indexOf(File.separator) != -1) {    path=path.substring(0,path.lastIndexOf(File.separator));    if (new File(path + File.separator + "SWFs").exists()) {      path=path + File.separator + "SWFs";    } else     if (new File(path + File.separator + "swfs").exists()) {      path=path + File.separator + "swfs";    }    if (new File(path + File.separator + file).exists())     path=path + File.separator + file; else {      path=null;    }  } else   if (path.indexOf("/") != -1) {    path=path.substring(0,path.lastIndexOf("/"));    if (new File(path + "/" + "SWFs").exists()) {      path=path + "/" + "SWFs";    } else     if (new File(path + "/" + "swfs").exists()) {      path=path + "/" + "swfs";    }    if (new File(path + "/" + file).exists())     path=path + "/" + file; else {      path=null;    }  }  return path;}  }
class C{  public void finishFragments(){  for (  Fragment comment : closingFragments) {    finishFragment(comment);  }  closingFragments.clear();}  }
class C{  private static boolean createAccount(Context context){  Account account=getAccount();  AccountManager accountManager=(AccountManager)context.getSystemService(ACCOUNT_SERVICE);  if (accountManager.addAccountExplicitly(account,null,null)) {    ContentResolver.setIsSyncable(account,Contracts.CONTENT_AUTHORITY,1);    ContentResolver.setSyncAutomatically(account,Contracts.CONTENT_AUTHORITY,true);    Bundle b=new Bundle();    b.putBoolean(SyncOption.FULL_SYNC.name(),true);    ContentResolver.addPeriodicSync(account,Contracts.CONTENT_AUTHORITY,b,SYNC_PERIOD);    return true;  }  return false;}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y){  insertBitmap(bitmap,x,y,-1);}  }
class C{  @Override protected synchronized void pageSelectionChanged(IWorkbenchPart part,ISelection selection){  if (isCnATreeElement(selection)) {    CnATreeElement selectedElement=(CnATreeElement)((IStructuredSelection)selection).getFirstElement();    if (LOG.isDebugEnabled()) {      LOG.debug("Selection changed, selected element: " + selectedElement);    }    ControlGroup group=getChartControlGroup(selectedElement);    if (group != null) {      if (this.element != null && selectedElement == this.element) {        return;      }      this.element=group;      drawChart();    }  }}  }
class C{  public static void persistApn(Context context,Apn apn){  PreferenceManager.getDefaultSharedPreferences(context).edit().putString("mmsc_url",apn.mmsc).putString("mms_proxy",apn.proxy).putString("mms_port",apn.port).apply();}  }
class C{  public boolean removeGatewayReceiverFromSystem(ObjectName objectName,GatewayReceiverMXBean proxy,FederationComponent oldState){  if (mapOfGatewayReceivers != null) {    mapOfGatewayReceivers.remove(objectName);    gatewayReceiverSetSize=mapOfGatewayReceivers.values().size();    if (mapOfGatewayReceivers.values().size() == 0) {      gatewayReceiverSetSize=0;      return true;    }  }  updateGatewayReceiver(objectName,null,oldState);  return false;}  }
class C{  public static <Req,Res>void loadTestConcurrency(final int concurrency,final int warmupRequests,final ReceivePort<Req> requests,final RequestExecutor<Req,Res> executor,final SendPort<TimingEvent<Res>> eventChannel,final StrandFactory strandFactory) throws SuspendExecution, InterruptedException {  loadTestConcurrency(concurrency,warmupRequests,requests,executor,eventChannel,null,strandFactory);}  }
class C{  public CEdgeMenu(final JFrame parent,final ZyGraph graph,final NaviEdge edge){  Preconditions.checkNotNull(parent,"IE02135: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE02136: Graph argument can not be null");  Preconditions.checkNotNull(edge,"IE02137: Edge argument can not be null");  add(CActionProxy.proxy(new CZoomSourceTargetAction(graph,edge)));  add(CActionProxy.proxy(new CZoomSourceAction(graph,edge)));  add(CActionProxy.proxy(new CZoomTargetAction(graph,edge)));  addSeparator();  add(CActionProxy.proxy(new CActionDeleteEdge(graph.getRawView(),edge.getRawEdge())));  addSeparator();  add(CActionProxy.proxy(new CActionEditEdgeComments(parent,edge)));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep createNetworkSystem(NetworkSystemCreate param) throws Exception {  ArgValidator.checkFieldValueFromSystemType(param.getSystemType(),"system_type",Arrays.asList(NetworkSystem.Type.brocade,NetworkSystem.Type.mds));  NetworkSystem.Type deviceType=NetworkSystem.Type.valueOf(param.getSystemType());  if (NetworkSystem.Type.valueOf(param.getSystemType()) == NetworkSystem.Type.brocade) {    ArgValidator.checkFieldNotNull(param.getSmisProviderIp(),"smis_provider_ip");    ArgValidator.checkFieldNotNull(param.getSmisPortNumber(),"smis_port_number");    ArgValidator.checkFieldNotNull(param.getSmisUserName(),"smis_user_name");    ArgValidator.checkFieldNotNull(param.getSmisPassword(),"smis_password");  } else   if (NetworkSystem.Type.valueOf(param.getSystemType()) == NetworkSystem.Type.mds) {    ArgValidator.checkFieldNotNull(param.getIpAddress(),"ip_address");    ArgValidator.checkFieldNotNull(param.getPortNumber(),"port_number");    ArgValidator.checkFieldNotNull(param.getUserName(),"user_name");    ArgValidator.checkFieldNotNull(param.getPassword(),"password");  }  checkForDuplicateDevice(null,param.getIpAddress(),param.getPortNumber(),param.getSmisProviderIp(),param.getSmisPortNumber(),param.getName());  NetworkSystem device=new NetworkSystem();  URI id=URIUtil.createId(NetworkSystem.class);  device.setId(id);  device.setLabel(param.getName());  device.setIpAddress(param.getIpAddress());  device.setPortNumber(param.getPortNumber());  device.setUsername(param.getUserName());  device.setPassword(param.getPassword());  device.setSystemType(deviceType.name());  device.setSmisProviderIP(param.getSmisProviderIp());  device.setSmisPortNumber(param.getSmisPortNumber());  device.setSmisUserName(param.getSmisUserName());  device.setSmisPassword(param.getSmisPassword());  device.setSmisUseSSL(param.getSmisUseSsl());  device.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(device));  device.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.name());  _dbClient.createObject(device);  auditOp(OperationTypeEnum.CREATE_NETWORK_SYSTEM,true,null,device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  return doDiscoverNetworkSystem(device);}  }
class C{  public static String limitQuery(String query,int maxRows,int offset,List<Object> varbinds,DBType dbType){  return internalLimitQuery(query,maxRows,offset,varbinds,dbType);}  }
class C{  protected static double cosine(double[] line,double[] point){  return Vector.dot(point,line) / Vector.magnitude(point);}  }
class C{  public double scoreLnGam(Node node,Set<Node> parents,BayesPm bayesPmMod,BayesIm bayesIm){  NodeParentsPair nodeAndParents=new NodeParentsPair(node,parents);  double score;  if (scores.containsKey(nodeAndParents)) {    System.out.println(node + " Score came from map--counts not computed.");    score=scores.get(nodeAndParents);    return score;  } else {    Node[] parentArray=new Node[parents.size()];    for (int i=0; i < parentArray.length; i++) {      parentArray[i]=(Node)(parents.toArray()[i]);    }    BayesIm bayesImMod=new MlBayesIm(bayesPmMod);    int numRows=bayesImMod.getNumRows(bayesImMod.getNodeIndex(node));    double[][] priorProbs;    double[] priorProbsRowSum;    observedCounts=new double[numRows][];    priorProbs=new double[numRows][];    double[] observedCountsRowSum=new double[numRows];    priorProbsRowSum=new double[numRows];    int numCols=bayesPm.getNumCategories(node);    for (int j=0; j < numRows; j++) {      observedCountsRowSum[j]=0;      priorProbsRowSum[j]=0;      observedCounts[j]=new double[numCols];      priorProbs[j]=new double[numCols];    }    if (bayesIm == null) {      computeObservedCounts(node,parentArray);    } else {      computeObservedCountsMD(node,bayesPmMod,bayesIm);    }    for (int j=0; j < numRows; j++) {      for (int k=0; k < numCols; k++) {        priorProbs[j][k]=1.0 / (numRows * numCols);      }    }    for (int j=0; j < numRows; j++) {      for (int k=0; k < numCols; k++) {        observedCountsRowSum[j]+=observedCounts[j][k];        priorProbsRowSum[j]+=priorProbs[j][k];      }    }    double sum=0.0;    for (int j=0; j < numRows; j++) {      try {        double numerator=ProbUtils.lngamma(priorProbsRowSum[j]);        double denom=ProbUtils.lngamma(priorProbsRowSum[j] + observedCountsRowSum[j]);        sum+=(numerator - denom);      } catch (      Exception e) {        e.printStackTrace();      }      double sumk=0.0;      for (int k=0; k < numCols; k++) {        try {          sumk+=ProbUtils.lngamma(priorProbs[j][k] + observedCounts[j][k]) - ProbUtils.lngamma(priorProbs[j][k]);        } catch (        Exception e) {          e.printStackTrace();        }      }      sum+=sumk;    }    score=sum;  }  Double scoreDouble=score;  scores.put(nodeAndParents,scoreDouble);  return score;}  }
class C{  public DistanceOp(Geometry g0,Geometry g1,double terminateDistance){  this.geom=new Geometry[2];  geom[0]=g0;  geom[1]=g1;  this.terminateDistance=terminateDistance;}  }
class C{  public void clearPermissions(){  properties.clearPermissions();}  }
class C{  long address(){  return address;}  }
class C{  private void marshall(Object object,Type type) throws XMLStreamException, ODataRenderException {switch (type.getMetaType()) {case ABSTRACT:    throw new UnsupportedOperationException("Marshalling abstract OData types is not supported");case PRIMITIVE:  marshallPrimitive(object,(PrimitiveType)type);break;case ENTITY:case COMPLEX:marshallStructured(object,(StructuredType)type);break;case ENUM:marshallEnum(object,(EnumType)type);break;case TYPE_DEFINITION:marshallPrimitive(object,((TypeDefinition)type).getUnderlyingType());break;default :throw new UnsupportedOperationException("Unsupported type: " + type);}}  }
class C{  public SiteManagerDialog removeCertificate(Certificate certificate){  final ContainerList<Certificate> certList=getSelectedList();  if (certificate != null && FileUtilities.deleteFromFile(certList.getTag().toString(),certificate.data())) {    certList.remove(certificate);  } else {    log.warn("Error removing {} from the list of {} sites",certificate,getSelectedTabName().toLowerCase());  }  return this;}  }
class C{  @Transactional public void addArticleRewardNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_POINT_ARTICLE_REWARD);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=article_reward] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public SAXNotSupportedException(){}  }
class C{  protected void dragEnter(Component dragged){}  }
class C{  public int readUByte(int bci){  return Bytes.beU1(code,bci);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return node == null ? "" : node.getDataType();}  }
class C{  public void append(char c[]) throws IOException {  append(new String(c));}  }
class C{  public void error(JSONObject message){  try {    WritableMap writableMap=SQLitePluginConverter.jsonToReact(message);    errorCallback.invoke(writableMap);  } catch (  JSONException ex) {    errorCallback.invoke("Internal error converting results:" + ex.getMessage());  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:53.189 -0500",hash_original_method="56AB1D6DB13A65C15890A0555B72FBBF",hash_generated_method="04376E4F938AA94376D86D8CAEB2C6ED") public NtpV3Impl(){}  }
class C{  protected JPanel addTitledPanel(String title,int row,boolean expand){  JPanel panel=createTitledPanel(title);  GridBagConstraints gbc=getGbc(row);  gbc.fill=GridBagConstraints.BOTH;  if (expand) {    gbc.weighty=1;  } else {    gbc.weighty=0;  }  base.add(panel,gbc);  return panel;}  }
class C{  public static void isLongEnough(String name,String value,Long length) throws ValidationException {  if (length != null && length != value.length()) {    ValidationException vf=new ValidationException(ReasonEnum.VALUE_NOT_IN_RANGE,name,new Object[]{Long.valueOf(value),length});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public int compareTo(Sector that){  if (that == null) {    throw new IllegalArgumentException("Sector Is Null");  }  if (this.getMinLatitude().compareTo(that.getMinLatitude()) < 0)   return -1;  if (this.getMinLatitude().compareTo(that.getMinLatitude()) > 0)   return 1;  if (this.getMinLongitude().compareTo(that.getMinLongitude()) < 0)   return -1;  if (this.getMinLongitude().compareTo(that.getMinLongitude()) > 0)   return 1;  if (this.getMaxLatitude().compareTo(that.getMaxLatitude()) < 0)   return -1;  if (this.getMaxLatitude().compareTo(that.getMaxLatitude()) > 0)   return 1;  if (this.getMaxLongitude().compareTo(that.getMaxLongitude()) < 0)   return -1;  if (this.getMaxLongitude().compareTo(that.getMaxLongitude()) > 0)   return 1;  return 0;}  }
class C{  public ColorSquareImageProducer(ColorSpace sys,int w,int h,boolean flipX,boolean flipY){  super(sys,w,h);  this.flipX=flipX;  this.flipY=flipY;}  }
class C{  protected Class<?> findImportClass(String name){  for (  DynamicClassLoader loader : _importLoaders) {    try {      Class<?> cl=loader.findClassImpl(name);      if (cl != null) {        return cl;      }    } catch (    Exception e) {      log().log(Level.ALL,e.toString(),e);    }  }  return null;}  }
class C{  public boolean canBeNegative(){  boolean negative=false;  return negative;}  }
class C{  public void testSetF14Momentary(){  boolean f14Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF14Momentary(f14Momentary);}  }
class C{  public void onStart(int downloadId,long totalBytes){}  }
class C{  public SVGPathFigure(){  add(new SVGBezierFigure());  SVGAttributeKeys.setDefaults(this);}  }
class C{  public static boolean eq(Object[] left,Object[] right){  if (left == right)   return true; else   if (left == null || right == null)   return false; else   if (left.length != right.length)   return false;  for (int i=0; i < left.length; i++)   if (!eq(left[i],right[i]))   return false;  return true;}  }
class C{  public void put(Method method,Pair<Addressable,String> key,Task<?> value){  Cache<Pair<Addressable,String>,Task> cache=getCache(method);  cache.put(key,value);}  }
class C{  public TeddyApplicationModel(){}  }
class C{  public LegendTitle(LegendItemSource source,Arrangement hLayout,Arrangement vLayout){  this.sources=new LegendItemSource[]{source};  this.items=new BlockContainer(hLayout);  this.hLayout=hLayout;  this.vLayout=vLayout;  this.backgroundPaint=null;  this.legendItemGraphicEdge=RectangleEdge.LEFT;  this.legendItemGraphicAnchor=RectangleAnchor.CENTER;  this.legendItemGraphicLocation=RectangleAnchor.CENTER;  this.legendItemGraphicPadding=new RectangleInsets(2.0,2.0,2.0,2.0);  this.itemFont=DEFAULT_ITEM_FONT;  this.itemPaint=DEFAULT_ITEM_PAINT;  this.itemLabelPadding=new RectangleInsets(2.0,2.0,2.0,2.0);  this.sortOrder=SortOrder.ASCENDING;}  }
class C{  private static void closeSafe(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public double min(double[] series){  double min=Double.MAX_VALUE;  for (int i=0; i < series.length; i++) {    if (min > series[i]) {      min=series[i];    }  }  return min;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.DigestMethodType buildDefaultDigestMethodType(){  org.smpte_ra.schemas.st2067_2_2013.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2013.DigestMethodType();  digestMethodType.setAlgorithm(CompositionPlaylistBuilder_2013.defaultHashAlgorithm);  return digestMethodType;}  }
class C{  final public MutableString reverse(){  final int k=length() - 1;  final char[] a=array;  char c;  int i=(k - 1) / 2 + 1;  while (i-- != 0) {    c=a[i];    a[i]=a[k - i];    a[k - i]=c;  }  changed();  return this;}  }
class C{  public IncubationQueue(boolean identityComparison){  hatchMap=identityComparison ? new IdentityHashMap<T,T>() : new HashMap<T,T>();}  }
class C{  public PendingException(String msg){  super(msg);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.GUARD___ANONYMOUS_GUARD_11:    getAnonymous_guard_1_1().clear();  return;case UmplePackage.GUARD___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.GUARD___ANONYMOUS_GUARD_21:getAnonymous_guard_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  public TreeElement<?,?> findTreeElementForModelObject(IModelChangeSupport modelObject){  TreeElement<?,?> result=this.treeElementMap.get(modelObject);  if (result != null && modelObject.equals(result.getData())) {    return result;  } else {    logger.debug("Could not find tree element for data item {}",modelObject);    return null;  }}  }
class C{  public void enableAnimations(){  mShouldAnimate=true;}  }
class C{  public static void applyUserSettings(Environment env,Map<String,Object> context) throws TemplateException {  Locale locale=(Locale)context.get("locale");  if (locale == null) {    locale=Locale.getDefault();  }  env.setLocale(locale);  TimeZone timeZone=(TimeZone)context.get("timeZone");  if (timeZone == null) {    timeZone=TimeZone.getDefault();  }  env.setTimeZone(timeZone);}  }
class C{  public boolean isEquiv(Action a){  return this == a || (this.content.equals(a.content) && this.kind == a.kind && this.len == a.len && this.entryState == a.entryState);}  }
class C{  public boolean isOptional(){  return false;}  }
class C{  protected void ensureParentage(AbstractNode child) throws IllegalStateException {  if (child.parent == this)   return;  throw new IllegalStateException(String.format("Can't disown child of type %s - it isn't my child (I'm a %s)",child.getClass().getName(),this.getClass().getName()));}  }
class C{  public void deselectDoNotFireEvent(final int start,final int end){  deselect(start,end,false);}  }
class C{  public static boolean isNotEmpty(final byte[] array){  return array != null && array.length != 0;}  }
class C{  public boolean removeUser(String userEmail){synchronized (this) {    if (!allUsers.containsKey(userEmail)) {      return false;    }    if (activeUser.getEmail().equals(userEmail)) {      activeUser=null;      GoogleLoginPrefs.removeActiveUser();    }    allUsers.remove(userEmail);    notifyLoginStatusChange();    return true;  }}  }
class C{  protected void initConnection(Object connection){  timeSinceLastUpdate=System.currentTimeMillis();  CodenameOneImplementation impl=Util.getImplementation();  impl.setPostRequest(connection,isPost());  if (getUserAgent() != null) {    impl.setHeader(connection,"User-Agent",getUserAgent());  }  if (getContentType() != null) {    boolean shouldAddContentType=contentTypeSetExplicitly || Display.getInstance().getProperty("ConnectionRequest.excludeContentTypeFromGetRequests","true").equals("false");    if (isPost() || (getHttpMethod() != null && !"get".equals(getHttpMethod().toLowerCase()))) {      shouldAddContentType=true;    }    if (shouldAddContentType) {      impl.setHeader(connection,"Content-Type",getContentType());    }  }  if (chunkedStreamingLen > -1) {    impl.setChunkedStreamingMode(connection,chunkedStreamingLen);  }  if (userHeaders != null) {    Enumeration e=userHeaders.keys();    while (e.hasMoreElements()) {      String k=(String)e.nextElement();      String value=(String)userHeaders.get(k);      impl.setHeader(connection,k,value);    }  }}  }
class C{  boolean waitForState(Processor p,int state){synchronized (waitSync) {    try {      while (p.getState() < state && stateTransitionOK)       waitSync.wait();    } catch (    Exception e) {    }  }  return stateTransitionOK;}  }
class C{  void appendStartDocument(){  m_docElement=NULL;  initDocument(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.842 -0500",hash_original_method="A1816E63F03CA551A7DF54BED5A962BD",hash_generated_method="075B773FB3F09FE525835BB7E064F4BD") public AnrInfo(Parcel in){  activity=in.readString();  cause=in.readString();  info=in.readString();}  }
class C{  public void copyFromV3f(Vector3f input,float w){  points[0]=(input.x());  points[1]=(input.y());  points[2]=(input.z());  points[3]=(w);}  }
class C{  protected void installListeners(JPanel p){  p.addPropertyChangeListener(this);}  }
class C{  private int readSequenceBegin() throws TException {  getCurrentContext().read();  if (getCurrentContext().isMapKey()) {    throw new TException(SEQUENCE_AS_KEY_ILLEGAL);  }  JsonNode curElem=getCurrentContext().getCurrentChild();  if (!curElem.isArray()) {    throw new TException("Expected JSON Array!");  }  pushContext(new SequenceContext(curElem));  return curElem.size();}  }
class C{  @Override public IChunkedOrderedIterator<ISPO> iterator(final long offset,final long limit,final int capacity){  final ICloseableIterator<ISPO> src=new InnerIterator1(offset,limit,capacity);  return new ChunkedWrappedIterator<ISPO>(src);}  }
class C{  public void writeMessageFrom(Client client,String message){  if (reader.get().acceptsMessages()) {    writeStringMessage(client.getUserName() + ": " + message);  }}  }
class C{  @Override public void stopManager(){synchronized (instances) {    verifyManagementService();    if (federatingManager != null) {      federatingManager.stopManager();      system.handleResourceEvent(ResourceEvent.MANAGER_STOP,null);      getGemFireCacheImpl().getJmxManagerAdvisor().broadcastChange();      if (this.agent != null && (this.agent.isRunning() || this.agent.isHttpServiceRunning())) {        this.agent.stopAgent();      }    }  }}  }
class C{  protected void performChange(Document document) throws CoreException {  Change change=null;  try {    change=getChange();    if (change != null) {    }    change.initializeValidationData();    RefactoringStatus valid=change.isValid();    if (valid.hasFatalError()) {      IStatus status=new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,IStatus.ERROR,valid.getMessageMatchingSeverity(RefactoringStatus.FATAL),null);      throw new CoreException(status);    } else {      Change undoChange;      boolean successful=false;      try {        undoChange=change.perform();        successful=true;      }  finally {      }      if (undoChange != null) {        undoChange.initializeValidationData();      }    }  }  finally {    if (change != null) {      change.dispose();    }  }}  }
class C{  public static void displayPattern(int n){  int padding=n - 1;  for (int r=1; r <= n; r++) {    for (int p=0; p < padding; p++) {      System.out.print("  ");    }    for (int i=r; i > 0; i--) {      System.out.print(i + " ");    }    System.out.println();    padding--;  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GROUP_DB' ("+ "'_id' INTEGER PRIMARY KEY NOT NULL ,"+ "'NAME' TEXT NOT NULL ,"+ "'USER_KEY' TEXT NOT NULL ,"+ "'STATE' INTEGER NOT NULL ,"+ "'TYPE' INTEGER NOT NULL );");}  }
class C{  protected void addObservationsAfterParamsDetermined(double[] observations,boolean[] valid) throws Exception {  Vector<int[]> startAndEndTimePairs=computeStartAndEndTimePairs(valid);  for (  int[] timePair : startAndEndTimePairs) {    int startTime=timePair[0];    int endTime=timePair[1];    addObservationsAfterParamsDetermined(MatrixUtils.select(observations,startTime,endTime - startTime + 1));  }}  }
class C{  private boolean removeMapping(Object rowKey,Object columnKey,Object value){  if (!containsMapping(rowKey,columnKey,value))   return false;  remove(rowKey,columnKey);  return true;}  }
class C{  @EventHandler(ignoreCancelled=true) public void onPlayerInteractAtEntity(PlayerInteractAtEntityEvent event){  if (!canInteract(event.getActor())) {    event.setCancelled(true);  }}  }
class C{  private boolean turnoutUtil(Section s,int seqNum,Section nextSection,ActiveTrain at,LayoutEditor le,boolean trustKnownTurnouts,boolean set,Section prevSection){  Transit tran=at.getTransit();  if ((s == null) || (seqNum > tran.getMaxSequence()) || (!tran.containsSection(s))|| (le == null)) {    log.error("Invalid argument when checking or setting turnouts in Section.");    return false;  }  int direction=at.getAllocationDirectionFromSectionAndSeq(s,seqNum);  if (direction == 0) {    log.error("Invalid Section/sequence arguments when checking or setting turnouts");    return false;  }  if (_dispatcher.getSignalType() == DispatcherFrame.SIGNALHEAD && (s.getForwardEntryPointList().size() <= 1) && (s.getReverseEntryPointList().size() <= 1)) {    log.debug("No entry points lists");    return true;  }  ConnectivityUtil ct=le.getConnectivityUtil();  EntryPoint entryPt=null;  if (prevSection != null) {    entryPt=s.getEntryPointFromSection(prevSection,direction);  } else   if (!s.containsBlock(at.getStartBlock())) {    entryPt=s.getEntryPointFromBlock(at.getStartBlock(),direction);  }  EntryPoint exitPt=null;  if (nextSection != null) {    exitPt=s.getExitPointToSection(nextSection,direction);  }  Block curBlock=null;  Block prevBlock=null;  int curBlockSeqNum=-1;  if (entryPt != null) {    curBlock=entryPt.getBlock();    prevBlock=entryPt.getFromBlock();    curBlockSeqNum=s.getBlockSequenceNumber(curBlock);  } else   if (s.containsBlock(at.getStartBlock())) {    curBlock=at.getStartBlock();    curBlockSeqNum=s.getBlockSequenceNumber(curBlock);    if (direction == Section.FORWARD) {      prevBlock=s.getBlockBySequenceNumber(curBlockSeqNum - 1);    } else     if (direction == Section.REVERSE) {      prevBlock=s.getBlockBySequenceNumber(curBlockSeqNum + 1);    }  } else {    if (_dispatcher.getSignalType() == DispatcherFrame.SIGNALMAST) {      return true;    }    log.error("Error in turnout check/set request - initial Block and Section mismatch");    return false;  }  Block nextBlock=null;  int nextBlockSeqNum=-1;  if (exitPt != null && curBlock == exitPt.getBlock()) {    nextBlock=exitPt.getFromBlock();  } else {    if (direction == Section.FORWARD) {      nextBlock=s.getBlockBySequenceNumber(curBlockSeqNum + 1);      nextBlockSeqNum=curBlockSeqNum + 1;    } else     if (direction == Section.REVERSE) {      nextBlock=s.getBlockBySequenceNumber(curBlockSeqNum - 1);      nextBlockSeqNum=curBlockSeqNum - 1;    }    if ((nextBlock == null) && (curBlock != at.getEndBlock())) {      log.error("Error in block sequence numbers when setting/checking turnouts");      return false;    }  }  ArrayList<LayoutTurnout> turnoutList=new ArrayList<LayoutTurnout>();  ArrayList<Integer> settingsList=new ArrayList<Integer>();  boolean turnoutsOK=true;  while (curBlock != null) {    if (prevBlock != null) {      turnoutList=ct.getTurnoutList(curBlock,prevBlock,nextBlock);      settingsList=ct.getTurnoutSettingList();    }    for (int i=0; i < turnoutList.size(); i++) {      Turnout to=turnoutList.get(i).getTurnout();      int setting=settingsList.get(i).intValue();      if (turnoutList.get(i) instanceof LayoutSlip) {        setting=((LayoutSlip)turnoutList.get(i)).getTurnoutState(settingsList.get(i));      }      if (!trustKnownTurnouts) {        log.debug("{}: setting turnout {} to {}",at.getTrainName(),to.getFullyFormattedDisplayName(),(setting == Turnout.CLOSED ? closedText : thrownText));        to.setCommandedState(setting);        try {          Thread.sleep(100);        } catch (        Exception ex) {        }      } else {        if (to.getKnownState() != setting) {          if (set) {            if ((s.getState() == Section.FREE) && (curBlock.getState() != Block.OCCUPIED)) {              log.debug("{}: turnout {} commanded to {}",at.getTrainName(),to.getFullyFormattedDisplayName(),(setting == Turnout.CLOSED ? closedText : thrownText));              to.setCommandedState(setting);              try {                Thread.sleep(100);              } catch (              Exception ex) {              }            } else {              turnoutsOK=false;            }          } else {            turnoutsOK=false;          }        } else {          log.debug("{}: turnout {} already {}, skipping",at.getTrainName(),to.getFullyFormattedDisplayName(),(setting == Turnout.CLOSED ? closedText : thrownText));        }      }      if (turnoutList.get(i) instanceof LayoutSlip) {        setting=((LayoutSlip)turnoutList.get(i)).getTurnoutBState(settingsList.get(i));        to=((LayoutSlip)turnoutList.get(i)).getTurnoutB();        if (!trustKnownTurnouts) {          to.setCommandedState(setting);        } else         if (to.getKnownState() != setting) {          if (set) {            if ((s.getState() == Section.FREE) && (curBlock.getState() != Block.OCCUPIED)) {              to.setCommandedState(setting);            } else {              turnoutsOK=false;            }          } else {            turnoutsOK=false;          }        }      }    }    if (turnoutsOK) {      if (nextBlockSeqNum >= 0) {        prevBlock=curBlock;        curBlock=nextBlock;        curBlockSeqNum=nextBlockSeqNum;        if ((exitPt != null) && (curBlock == exitPt.getBlock())) {          nextBlock=exitPt.getFromBlock();          nextBlockSeqNum=-1;        } else {          if (direction == Section.FORWARD) {            nextBlockSeqNum++;          } else {            nextBlockSeqNum--;          }          nextBlock=s.getBlockBySequenceNumber(nextBlockSeqNum);          if (nextBlock == null) {            nextBlockSeqNum=-1;          }        }      } else {        curBlock=null;      }    } else {      curBlock=null;    }  }  return turnoutsOK;}  }
class C{  public void testSenderWithSpringXmlEmbeddedBrokerConfiguredViaXml() throws Exception {  String config="spring-embedded.xml";  assertSenderConfig(config);}  }
class C{  RxJava2Adapter(){}  }
class C{  private void updateIconDrawableByResourceId(int modeIconResourceId){  Drawable iconDrawable=getResources().getDrawable(modeIconResourceId);  if (iconDrawable == null) {    Log.e(TAG,"Invalid resource id for icon drawable. Setting icon drawable to null.");    setIconDrawable(null);    return;  }  setIconDrawable(iconDrawable.mutate());}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_name_avt)   m_name_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_namespace_avt)   m_namespace_avt.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  public void putInt(int i){  putByte((byte)((i & BYTE_4_OF_INT) >>> BITS_OF_3_BYTES));  putByte((byte)((i & BYTE_3_OF_INT) >>> BITS_OF_2_BYTES));  putByte((byte)((i & BYTE_2_OF_INT) >>> BITS_OF_1_BYTE));  putByte((byte)(i & BYTE_1_OF_INT));}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public void addMutedMac(final String mac,final Date muteTill){  if (isMacMuted(mac)) {    removeMutedMac(mac);  }  Timestamp muteTillTs=null;  if (muteTill != null) {    muteTillTs=new Timestamp(muteTill.getTime());  }  s_logger.fine("Muting mac:" + mac);  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement("insert into muted_macs (mac, mute_till) values (?, ?)");    ps.setString(1,mac);    ps.setTimestamp(2,muteTillTs);    ps.execute();    ps.close();    con.commit();  } catch (  final SQLException sqle) {    if (sqle.getErrorCode() == 30000) {      s_logger.info("Tried to create duplicate muted mac:" + mac + " error:"+ sqle.getMessage());      return;    }    s_logger.log(Level.SEVERE,"Error inserting muted mac:" + mac,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  public static PKCS12 loadPKCS12(String file,String orgName,String password){  KeyStore orgKeyStore=loadPKCS12KeyStore(CERT_PATH + file,password);  PKCS12 pkcs12=new PKCS12();  pkcs12.cert=getCert(orgKeyStore,orgName);  pkcs12.key=getKey(orgKeyStore,password,orgName);  return pkcs12;}  }
class C{  protected void initHeader() throws IOException {  int result=raf.read();  if (result == -1) {    writeHeader();  }  readHeader();}  }
class C{  public SIRModel(String name,Parameter reproductiveNumberParameter,Parameter recoveryRateParameter,Parameter hostPopulationSizeParameter,Parameter proportionsParameter,Type units){  super(name);  this.reproductiveNumberParameter=reproductiveNumberParameter;  addVariable(reproductiveNumberParameter);  reproductiveNumberParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,1.0,1));  this.recoveryRateParameter=recoveryRateParameter;  addVariable(recoveryRateParameter);  recoveryRateParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.hostPopulationSizeParameter=hostPopulationSizeParameter;  addVariable(hostPopulationSizeParameter);  hostPopulationSizeParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.proportionsParameter=proportionsParameter;  addVariable(proportionsParameter);  demographicFunction=new SIRDemographicFunction(units);  setUnits(units);  addStatistic(new TimeseriesStatistic("susceptibles"));  addStatistic(new TimeseriesStatistic("infecteds"));  addStatistic(new TimeseriesStatistic("recovereds"));  addStatistic(new TimeseriesStatistic("effectivePopulationSize"));}  }
class C{  public void detach(){}  }
class C{  public mxCellCodec(Object template,String[] exclude,String[] idrefs,Map<String,String> mapping){  super(template,exclude,idrefs,mapping);}  }
class C{  private void open(){  for (  Segment segment : loadSegments()) {    segments.put(segment.descriptor().index(),segment);  }  if (!segments.isEmpty()) {    currentSegment=segments.lastEntry().getValue();  } else {    SegmentDescriptor descriptor=SegmentDescriptor.builder().withId(1).withVersion(1).withIndex(1).withMaxSegmentSize(storage.maxSegmentSize()).withMaxEntries(storage.maxEntriesPerSegment()).build();    descriptor.lock();    currentSegment=createSegment(descriptor);    currentSegment.descriptor().update(System.currentTimeMillis());    currentSegment.descriptor().lock();    segments.put(1l,currentSegment);  }}  }
class C{  public static boolean isStorageStatusOK(Activity activity,String filename,String downloadPath){  if (downloadPath.equals(INVALID_PATH)) {    new AlertDialog.Builder(activity).setTitle(R.string.path_wrong).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.invalid_path).setPositiveButton(R.string.ok,null).show();    return false;  }  if (mInternalStorage == null) {    initStorageDefaultPath(activity,downloadPath);  }  if (!(isPhoneStorageSupported() && downloadPath.contains(mInternalStorage))) {    String status=getExternalStorageState(activity,downloadPath);    if (!status.equals(Environment.MEDIA_MOUNTED)) {      int title;      String msg;      if (status.equals(Environment.MEDIA_SHARED)) {        msg=activity.getString(R.string.download_sdcard_busy_dlg_msg);        title=R.string.download_sdcard_busy_dlg_title;      } else {        msg=activity.getString(R.string.download_no_sdcard_dlg_msg,filename);        title=R.string.download_no_sdcard_dlg_title;      }      new AlertDialog.Builder(activity).setTitle(title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(msg).setPositiveButton(R.string.ok,null).show();      return false;    }  } else {    String status=Environment.getExternalStorageState();    if (!status.equals(Environment.MEDIA_MOUNTED)) {      int mTitle=R.string.download_path_unavailable_dlg_title;      String mMsg=activity.getString(R.string.download_path_unavailable_dlg_msg);      new AlertDialog.Builder(activity).setTitle(mTitle).setIcon(android.R.drawable.ic_dialog_alert).setMessage(mMsg).setPositiveButton(R.string.ok,null).show();      return false;    }  }  return true;}  }
class C{  public void updateNotificationGroup(NotificationGroup group){  try {    getService().updateNotificationGroup(group);  } catch (  RemoteException e) {    Log.e(TAG,e.getLocalizedMessage(),e);  }}  }
class C{  public synchronized boolean isLocked(){  return locked;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  protected void removeSipProvider(){  this.sipProvider=null;}  }
class C{  @SuppressWarnings("unchecked") void commit(){  if (!tasks.isEmpty()) {    for (    ServerTask task : tasks) {      context.update(context.index(),context.clock().instant(),ServerStateMachineContext.Type.COMMAND);      try {        task.future.complete(task.callback.get());      } catch (      Exception e) {        task.future.completeExceptionally(e);      }    }    tasks.clear();  }  context.commit();}  }
class C{  public int countPredicates(int opPos) throws TransformerException {  int count=0;  while (OpCodes.OP_PREDICATE == getOp(opPos)) {    count++;    opPos=getNextOpPos(opPos);  }  return count;}  }
class C{  public static String formatFileSize(long size){  if (size > 0 && size < 1024) {    return Long.toString(size) + " B";  } else   if (size >= 1024 && size < 1024 * 1024) {    return StringUtils.double2Str((double)size / 1024) + " KB";  } else   if (size >= 1024 * 1024) {    return StringUtils.double2Str((double)size / 1024 / 1024) + " MB";  } else {    return "0 B";  }}  }
class C{  @Override public void configure(){  if (log.isDebugEnabled()) {    log.debug("configure called");  }  XNetTrafficController packets=(new LIUSBEthernetXNetPacketizer(new LenzCommandStation()));  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public boolean isMinorGridY(){  return minorGridY;}  }
class C{  public CLEvent read(CLQueue queue,long offset,long length,Pointer<T> out,boolean blocking,CLEvent... eventsToWaitFor){}  }
class C{  public void testGetConsolidatorService(){  System.out.println("getConsolidatorService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  ConsolidatorService result=instance.getConsolidatorService();  assertEquals(mockConsolidatorService,result);  setVerifyMode();}  }
class C{  public void registerMetrics(MetricsCollector metricsCollector){  SystemConfig systemConfig=(SystemConfig)SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);  int interval=systemConfig.getHeronMetricsExportIntervalSec();  metricsCollector.registerMetric("__gateway-received-packets-size",receivedPacketsSize,interval);  metricsCollector.registerMetric("__gateway-sent-packets-size",sentPacketsSize,interval);  metricsCollector.registerMetric("__gateway-received-packets-count",receivedPacketsCount,interval);  metricsCollector.registerMetric("__gateway-sent-packets-count",sentPacketsCount,interval);  metricsCollector.registerMetric("__gateway-sent-metrics-size",sentMetricsSize,interval);  metricsCollector.registerMetric("__gateway-sent-metrics-packets-count",sentMetricsPacketsCount,interval);  metricsCollector.registerMetric("__gateway-sent-metrics-count",sentMetricsCount,interval);  metricsCollector.registerMetric("__gateway-sent-exceptions-count",sentExceptionsCount,interval);  metricsCollector.registerMetric("__gateway-in-stream-queue-size",inStreamQueueSize,interval);  metricsCollector.registerMetric("__gateway-out-stream-queue-size",outStreamQueueSize,interval);  metricsCollector.registerMetric("__gateway-in-stream-queue-expected-capacity",inStreamQueueExpectedCapacity,interval);  metricsCollector.registerMetric("__gateway-out-stream-queue-expected-capacity",outStreamQueueExpectedCapacity,interval);  metricsCollector.registerMetric("__gateway-in-queue-full-count",inQueueFullCount,interval);}  }
class C{  public void addJobInBackground(Job job){  addJobInBackground(job.getPriority(),job.getDelayInMs(),job);}  }
class C{  public double doubleValue(){  return 0.0d;}  }
class C{  public void startString(){}  }
class C{  public synchronized void flush() throws IOException, ReplicatorException, InterruptedException {  if (!needsFlush) {    return;  }  assertWriteMode();  if (flushIntervalMillis == 0) {    flushPrivate();  } else   if (nextFlushMillis == 0) {    nextFlushMillis=System.currentTimeMillis() + this.flushIntervalMillis;  } else   if (System.currentTimeMillis() >= nextFlushMillis) {    flushPrivate();  }}  }
class C{  public static String[][] read(final File file) throws IOException {  FileInputStream fis=new FileInputStream(file);  return read(fis);}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  private Log discoverLogImplementation(String logCategory) throws LogConfigurationException {  if (isDiagnosticsEnabled()) {    logDiagnostic("Discovering a Log implementation...");  }  initConfiguration();  Log result=null;  String specifiedLogClassName=findUserSpecifiedLogClassName();  if (specifiedLogClassName != null) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Attempting to load user-specified log class '" + specifiedLogClassName + "'...");    }    result=createLogFromClass(specifiedLogClassName,logCategory,true);    if (result == null) {      StringBuffer messageBuffer=new StringBuffer("User-specified log class '");      messageBuffer.append(specifiedLogClassName);      messageBuffer.append("' cannot be found or is not useable.");      if (specifiedLogClassName != null) {        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LOG4J_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_JDK14_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LUMBERJACK_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_SIMPLE_LOGGER);      }      throw new LogConfigurationException(messageBuffer.toString());    }    return result;  }  if (isDiagnosticsEnabled()) {    logDiagnostic("No user-specified Log implementation; performing discovery" + " using the standard supported logging implementations...");  }  for (int i=0; (i < classesToDiscover.length) && (result == null); ++i) {    result=createLogFromClass(classesToDiscover[i],logCategory,true);  }  if (result == null) {    throw new LogConfigurationException("No suitable Log implementation");  }  return result;}  }
class C{  public CharCharMap(final char[] k,final char[] v,final float f){  this(k.length,f);  if (k.length != v.length)   throw new IllegalArgumentException("The key array and the value array have different lengths (" + k.length + " and "+ v.length+ ")");  for (int i=0; i < k.length; i++)   this.put(k[i],v[i]);}  }
class C{  public ScanDirConfig(String filename,ScanManagerConfig initialConfig){  super(NOTIFICATION_INFO);  this.filename=filename;  this.config=initialConfig;}  }
class C{  public static String addProductTags(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  String productId=request.getParameter("productId");  String productTags=request.getParameter("productTags");  String statusId=request.getParameter("statusId");  if (UtilValidate.isNotEmpty(productId) && UtilValidate.isNotEmpty(productTags)) {    List<String> matchList=FastList.newInstance();    Pattern regex=Pattern.compile("[^\\s\"']+|\"([^\"]*)\"|'([^']*)'");    Matcher regexMatcher=regex.matcher(productTags);    while (regexMatcher.find()) {      matchList.add(regexMatcher.group().replace("'",""));    }    GenericValue userLogin=null;    try {      userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").cache().queryOne();    } catch (    GenericEntityException e) {      request.setAttribute("_ERROR_MESSAGE_",e.getMessage());      return "error";    }    if (UtilValidate.isEmpty(statusId)) {      statusId="KW_PENDING";    }    if (UtilValidate.isNotEmpty(matchList)) {      for (      String keywordStr : matchList) {        try {          dispatcher.runSync("createProductKeyword",UtilMisc.toMap("productId",productId,"keyword",keywordStr.trim(),"keywordTypeId","KWT_TAG","statusId",statusId,"userLogin",userLogin));        } catch (        GenericServiceException e) {          request.setAttribute("_ERROR_MESSAGE_",e.getMessage());          return "error";        }      }    }  }  return "success";}  }
class C{  public AbstractProductFilter(final String id,final long categoryId,final NavigationContext navigationContext){  super(id);  this.navigationContext=navigationContext;  this.categoryId=categoryId;  final long shopId=ShopCodeContext.getShopId();  this.categories=categoryServiceFacade.getSearchCategoriesIds(categoryId,shopId).getFirst();  this.recordLimit=getCategoryFilterLimitConfig(categoryId,shopId);}  }
class C{  public void playTTS(View view) throws JSONException {  TextToSpeech.sharedInstance().setVoice(fragmentTabTTS.getSelectedVoice());  Log.d(TAG,fragmentTabTTS.getSelectedVoice());  textTTS=(TextView)fragmentTabTTS.mView.findViewById(R.id.prompt);  String ttsText=textTTS.getText().toString();  Log.d(TAG,ttsText);  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(textTTS.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  TextToSpeech.sharedInstance().synthesize(ttsText);}  }
class C{  @Override protected void initVars(Instances data){  super.initVars(data);  m_kernelPrecalc=new double[data.numInstances()];}  }
class C{  public boolean optBoolean(String key){  return optBoolean(key,false);}  }
class C{  private void validateParent(String child,@Nullable String parent){  assertEquals(parent == null ? null : new IgfsPath(parent),new IgfsPath(child).parent());}  }
class C{  public static void copyMultipleFileToSingleFile(List<File> filesToMerge,File destFile) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    outputStream=new BufferedOutputStream(new FileOutputStream(destFile,true));    for (    File toMerge : filesToMerge) {      inputStream=new BufferedInputStream(new FileInputStream(toMerge));      copyFileWithoutClosingOutputStream(inputStream,outputStream);    }  }  finally {    CarbonUtil.closeStreams(inputStream,outputStream);  }}  }
class C{  public static LuaTable bind(Class<? extends LibFunction> factory,List<String> methods){  LuaTable env=new LuaTable();  try {    if (methods != null) {      for (int i=0; i < methods.size(); i++) {        LibFunction f=factory.newInstance();        f.opcode=i;        f.method=null;        f.name=methods.get(i);        env.set(f.name,f);      }    }  } catch (  Exception e) {    throw new LuaError("[Bind Failed] " + e);  } finally {    return env;  }}  }
class C{  public ClusterTopologyCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  private TaskTriggerPojo trigger2taskTrigger(TriggerPojo triggerPojo,int taskId){  TaskTriggerPojo pojo=new TaskTriggerPojo();  pojo.setTaskId(taskId);  pojo.setTriggerId(triggerPojo.getTriggerId());  pojo.setTriggerType(triggerPojo.getTriggerType());  return pojo;}  }
class C{  public void addEntitlement(EntitlementEntity entitlement){  entitlements.add(entitlement);}  }
class C{  public static boolean convertToBlock(IMultipartContainer container){  for (  IReversePartConverter converter : reverseConverters)   if (converter.convertToBlock(container))   return true;  return false;}  }
class C{  final boolean inTemporaryOutputState(){  return (getEncoding() == null);}  }
class C{  private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){  String text1a=text1.substring(0,x);  String text2a=text2.substring(0,y);  String text1b=text1.substring(x);  String text2b=text2.substring(y);  LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline);  LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline);  diffs.addAll(diffsb);  return diffs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:26.699 -0500",hash_original_method="2D9469DC3FABBA58CBEDE2838A0DC7C6",hash_generated_method="86AA4E4B0A1D91ED4405B82C5DCEBB5E") private static ProcessStartResult startViaZygote(final String processClass,final String niceName,final int uid,final int gid,final int[] gids,int debugFlags,int targetSdkVersion,String[] extraArgs) throws ZygoteStartFailedEx {synchronized (Process.class) {    ArrayList<String> argsForZygote=new ArrayList<String>();    argsForZygote.add("--runtime-init");    argsForZygote.add("--setuid=" + uid);    argsForZygote.add("--setgid=" + gid);    if ((debugFlags & Zygote.DEBUG_ENABLE_JNI_LOGGING) != 0) {      argsForZygote.add("--enable-jni-logging");    }    if ((debugFlags & Zygote.DEBUG_ENABLE_SAFEMODE) != 0) {      argsForZygote.add("--enable-safemode");    }    if ((debugFlags & Zygote.DEBUG_ENABLE_DEBUGGER) != 0) {      argsForZygote.add("--enable-debugger");    }    if ((debugFlags & Zygote.DEBUG_ENABLE_CHECKJNI) != 0) {      argsForZygote.add("--enable-checkjni");    }    if ((debugFlags & Zygote.DEBUG_ENABLE_ASSERT) != 0) {      argsForZygote.add("--enable-assert");    }    argsForZygote.add("--target-sdk-version=" + targetSdkVersion);    if (gids != null && gids.length > 0) {      StringBuilder sb=new StringBuilder();      sb.append("--setgroups=");      int sz=gids.length;      for (int i=0; i < sz; i++) {        if (i != 0) {          sb.append(',');        }        sb.append(gids[i]);      }      argsForZygote.add(sb.toString());    }    if (niceName != null) {      argsForZygote.add("--nice-name=" + niceName);    }    argsForZygote.add(processClass);    if (extraArgs != null) {      for (      String arg : extraArgs) {        argsForZygote.add(arg);      }    }    return zygoteSendArgsAndGetResult(argsForZygote);  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PAREN_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static List<String> deserializeStrings(String rawPropertyValue){  List<String> strings=new ArrayList<String>();  if (rawPropertyValue != null && rawPropertyValue.length() > 0) {    return Arrays.asList(rawPropertyValue.split("\\|"));  }  return strings;}  }
class C{  public BranchProfileOperand flip(){  takenProbability=1f - takenProbability;  return this;}  }
class C{  public void copyFrom(Properties src){  copyFrom(src,true);}  }
class C{  public static String trim(String str,String defaultValue){  if (str == null)   return defaultValue;  return str.trim();}  }
class C{  public static String toCanonicalName(String dalvikName){  dalvikName=dalvikName.replace('/','.');  char first=dalvikName.charAt(0);switch (first) {case 'C':    return "char";case 'I':  return "int";case 'B':return "byte";case 'Z':return "boolean";case 'F':return "float";case 'D':return "double";case 'S':return "short";case 'J':return "long";case 'V':return "void";case 'L':return dalvikName.substring(1,dalvikName.length() - 1);case '[':return dalvikName;default :Log.err("unknown dalvik type:" + dalvikName);return "";}}  }
class C{  private GridRouterFactory(){}  }
class C{  public static void main(String[] args) throws Exception {  DemoUtils.setDkproHome(MekaComplexConfigurationMultiDemo.class.getSimpleName());  ParameterSpace pSpace=getParameterSpace();  MekaComplexConfigurationMultiDemo experiment=new MekaComplexConfigurationMultiDemo();  experiment.runTrainTest(pSpace);}  }
class C{  public Summary(String[] items,Object result){  if (items == null)   throw new NullPointerException("Items array null");  if (items.length == 0)   throw new IllegalArgumentException("Items array empty");  this.result=result;  JList list=new JList(items);  comp=new JScrollPane(list);}  }
class C{  public void remove(String btxn){synchronized (filterMap) {    FilterProcessor oldfp=filterMap.get(btxn);    if (oldfp != null) {      globalExclusionFilters.remove(oldfp);      btxnFilters.remove(oldfp);    }  }}  }
class C{  static private boolean doesParsedDateMatchText(LocalDate parsedDate,String text,Locale formatLocale){  if (parsedDate == null || text == null) {    return false;  }  text=text.toLowerCase();  Pattern pattern=Pattern.compile("\\d+");  Matcher matcher=pattern.matcher(text);  ArrayList<String> unsignedNumbersFound=new ArrayList<String>();  while (matcher.find()) {    String foundString=matcher.group();    foundString=forceTwoDigitNumberString(foundString);    unsignedNumbersFound.add(foundString);  }  String parsedDayOfMonth="" + parsedDate.getDayOfMonth();  parsedDayOfMonth=forceTwoDigitNumberString(parsedDayOfMonth);  boolean dayOfMonthFound=unsignedNumbersFound.remove(parsedDayOfMonth);  DateTimeFormatter formatBC=DateTimeFormatter.ofPattern("G",formatLocale);  String eraBCString=LocalDate.of(-100,1,1).format(formatBC).toLowerCase();  if (parsedDate.getYear() < 1 && text.contains(eraBCString)) {    String parsedYearForBC="" + (parsedDate.getYear() - 1);    parsedYearForBC=parsedYearForBC.replace("-","");    parsedYearForBC=forceTwoDigitNumberString(parsedYearForBC);    boolean yearFoundForBC=unsignedNumbersFound.remove(parsedYearForBC);    return yearFoundForBC && dayOfMonthFound;  } else {    String parsedYear="" + parsedDate.getYear();    parsedYear=parsedYear.replace("-","");    parsedYear=forceTwoDigitNumberString(parsedYear);    boolean yearFound=unsignedNumbersFound.remove(parsedYear);    return yearFound && dayOfMonthFound;  }}  }
class C{  public ImportFolder(final String itemPath,final String existingWorkingFolderMapping){  super(itemPath);  this.existingWorkingFolderMapping=existingWorkingFolderMapping;}  }
class C{  public static MethodAnnotation fromCalledMethod(String className,String methodName,String methodSig,boolean isStatic){  MethodAnnotation methodAnnotation=fromForeignMethod(className,methodName,methodSig,isStatic);  methodAnnotation.setDescription("METHOD_CALLED");  return methodAnnotation;}  }
class C{  protected void rejiggerMapLayers(){  logger.fine("jiggering.......");  if (layerHandler == null) {    return;  }  int selectedRow=-1;  panesPanel.removeAll();  panelGridbag.invalidateLayout(panesPanel);  List<LayerPane> panes=getPanes();  List<Layer> layerList=new LinkedList<Layer>();  int bufferIndex=Integer.MAX_VALUE;  int i=0;  for (  LayerPane pane : panes) {    if (pane == backgroundLayerSeparator) {      panelGridbag.setConstraints(pane,pgbc);      panesPanel.add(backgroundLayerSeparator);      bufferIndex=i++;      continue;    }    Layer layer=pane.getLayer();    layer.setAddAsBackground(i > bufferIndex);    panelGridbag.setConstraints(pane,pgbc);    panesPanel.add(pane);    layerList.add(layer);    if (pane.isSelected()) {      selectedRow=i;    }    i++;  }  addFillerToPanesPanel();  scrollPane.revalidate();  if (selectedRow >= 0) {    int spheight=scrollPane.getHeight();    JScrollBar sb=scrollPane.getVerticalScrollBar();    int sv=sb.getValue();    int paneheight=((LayerPane)panes.get(selectedRow)).getHeight();    int rowvalue=selectedRow * paneheight;    if (!((rowvalue > sv) && (rowvalue < spheight + sv))) {      sb.setValue(rowvalue);    }  }  layerHandler.setLayerList(new LinkedList<Layer>(layerList));}  }
class C{  public StringConverter(final Map<String,String> map,final int lengthLimit){  cache=map;  this.lengthLimit=lengthLimit;}  }
class C{  public void receive(T t){  if (mDecimationPointer == 0) {    if (mListener != null) {      mListener.receive(t);    }  }  mDecimationPointer++;  if (mDecimationPointer == mDecimationFactor) {    mDecimationPointer=0;  }}  }
class C{  public void initialize(int modlen,boolean genParams,SecureRandom random){  int subPrimeLen=-1;  if (modlen <= 1024) {    subPrimeLen=160;  } else   if (modlen == 2048) {    subPrimeLen=224;  }  checkStrength(modlen,subPrimeLen);  if (genParams) {    params=null;  } else {    params=ParameterCache.getCachedDSAParameterSpec(modlen,subPrimeLen);    if (params == null) {      throw new InvalidParameterException("No precomputed parameters for requested modulus size " + "available");    }  }  this.plen=modlen;  this.qlen=subPrimeLen;  this.random=random;  this.forceNewParameters=genParams;}  }
class C{  public URI(String p_uriSpec) throws MalformedURIException {  this((URI)null,p_uriSpec);}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  public boolean contains(final String stackTrace){  return this.stackTraceSet.contains(stackTrace);}  }
class C{  private boolean isLineSegmentContainedInBoundary(Coordinate p0,Coordinate p1){  if (p0.equals(p1))   return isPointContainedInBoundary(p0);  if (p0.x == p1.x) {    if (p0.x == rectEnv.getMinX() || p0.x == rectEnv.getMaxX())     return true;  } else   if (p0.y == p1.y) {    if (p0.y == rectEnv.getMinY() || p0.y == rectEnv.getMaxY())     return true;  }  return false;}  }
class C{  public final View startVideoProducerPreview(){  if (mVideoProducer != null) {    return mVideoProducer.startPreview(mContext);  }  return null;}  }
class C{  @Override public void dispose(){  effectsManager.dispose();  for (int i=0; i < buffers.size; i++) {    buffers.get(i).dispose();  }  buffers.clear();  if (enabledEffects != null) {    enabledEffects.clear();  }  pipelineState.dispose();}  }
class C{  private static boolean isIntendedException(Exception e,Class<?> clazz){  final String message=e.getMessage();  return (!TextUtils.isEmpty(message) && message.startsWith(clazz.getName()));}  }
class C{  public ReasonFlags(boolean[] reasons){  this.bitString=reasons;}  }
class C{  @Override public String updateUser(final String userName,final String emailAddress,final String hashedPassword){  final INode remote=MessageContext.getSender();  if (!userName.equals(remote.getName())) {    s_logger.severe("Tried to update user permission, but not correct user, userName:" + userName + " node:"+ remote);    return "Sorry, but I can't let you do that";  }  try {    new DBUserController().updateUser(userName,emailAddress,hashedPassword,false);  } catch (  final IllegalStateException e) {    return e.getMessage();  }  return null;}  }
class C{  public AsyncHttpClientFactoryEmbed(){  AsyncHttpClient fastClient=null;  AsyncHttpClient slowClient=null;  try {    AsyncHttpClientConfigBean configFastClient=new AsyncHttpClientConfigBean();    logger.info("FastClient: ningFastClientConnectionTimeoutMillis: {}",ParallecGlobalConfig.ningFastClientConnectionTimeoutMillis);    configFastClient.setConnectionTimeOutInMs(ParallecGlobalConfig.ningFastClientConnectionTimeoutMillis);    logger.info("FastClient: ningFastClientRequestTimeoutMillis: {}",ParallecGlobalConfig.ningFastClientRequestTimeoutMillis);    configFastClient.setRequestTimeoutInMs(ParallecGlobalConfig.ningFastClientRequestTimeoutMillis);    fastClient=new AsyncHttpClient(configFastClient);    AsyncHttpClientConfigBean configSlowClient=new AsyncHttpClientConfigBean();    configSlowClient.setConnectionTimeOutInMs(ParallecGlobalConfig.ningSlowClientConnectionTimeoutMillis);    configSlowClient.setRequestTimeoutInMs(ParallecGlobalConfig.ningSlowClientRequestTimeoutMillis);    slowClient=new AsyncHttpClient(configSlowClient);    disableCertificateVerification();  } catch (  Exception e) {    logger.error("ERROR IN HttpClientFactoryEmbed " + e.getLocalizedMessage());  }  this.fastClient=fastClient;  this.slowClient=slowClient;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.947 -0500",hash_original_method="A6A0C6EE524221145489C3D66C6A94BD",hash_generated_method="C45F9601A0A982039FA7B7D5119617E1") public RectF createFromParcel(Parcel in){  RectF r=new RectF();  r.readFromParcel(in);  return r;}  }
class C{  ReplDBMSHeader retrieve(String seqnoFileName) throws ReplicatorException {  TungstenProperties props;  try {    FilePath seqnoFile=new FilePath(serviceDir,seqnoFileName);    String json=fileIO.read(seqnoFile,"UTF-8");    props=TungstenProperties.loadFromJSON(json);  } catch (  Exception e) {    throw new ReplicatorException("Unable to read seqno position: file=" + seqnoFileName,e);  }  ReplDBMSHeaderData header=new ReplDBMSHeaderData(props.getLong("seqno"),(short)props.getInt("fragno"),props.getBoolean("lastFrag"),props.getString("sourceId"),props.getLong("epochNumber"),props.getString("eventId"),props.get("shardId"),new Timestamp(props.getLong("extractedTstamp")),props.getLong("appliedLatency"));  return header;}  }
class C{  public static Address fromLong(long address){  return new Address(ArchitecturalWord.fromLong(address));}  }
class C{  private Map<String,Achievement> createAchievements(){  Map<String,Achievement> achievementMap=new HashMap<String,Achievement>();  for (  AbstractAchievementFactory factory : AbstractAchievementFactory.createFactories()) {    for (    Achievement a : factory.createAchievements()) {      achievementMap.put(a.getIdentifier(),a);    }  }  return achievementMap;}  }
class C{  private void sendHeartbeat(LicenseInfoExt licenseInfo) throws Exception {  _log.info("SendEventScheduler::sendHeartbeat() for {}",licenseInfo.getLicenseType());  _callHomeEventsFacade.sendHeartBeatEvent(licenseInfo,MediaType.APPLICATION_XML_TYPE);}  }
class C{  public lalr_transition transitions(){  return _transitions;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="xmlns";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  void shiftPc(int where,int gapLength,boolean exclusive){  int n=tableLength();  for (int i=0; i < n; ++i) {    int pos=i * 4 + 2;    int pc=ByteArray.readU16bit(info,pos);    if (pc > where || (exclusive && pc == where))     ByteArray.write16bit(pc + gapLength,info,pos);  }}  }
class C{  public void nextNull() throws IOException {  peek();  if (token != JsonToken.NULL) {    throw new IllegalStateException("Expected null but was " + token);  }  advance();}  }
class C{  public ColumnAnnotatedField(VariableElement field,Column annotation) throws ProcessingException {  if (field.getModifiers().contains(Modifier.PRIVATE)) {    throw new ProcessingException(field,"Field %s is declared as private. Field must have at least package visibility",field.getSimpleName().toString());  }  if (field.getModifiers().contains(Modifier.PROTECTED)) {    throw new ProcessingException(field,"Field %s is declared as protected. Field must have at least package visibility",field.getSimpleName().toString());  }  if (field.getModifiers().contains(Modifier.FINAL)) {    throw new ProcessingException(field,"Field %s is declared as final, that is not allowed!",field.getSimpleName().toString());  }  if (field.getModifiers().contains(Modifier.STATIC)) {    throw new ProcessingException(field,"Field %s is declared as static. That is not supported!",field.getSimpleName().toString());  }  columnName=annotation.value();  if (columnName == null || columnName.length() == 0) {    throw new ProcessingException(field,"The column name is unspecified for field %s",field.getSimpleName().toString());  }  throwOnColumnIndexNotFound=annotation.throwOnColumnIndexNotFound();  this.field=field;  this.codeGenerator=FieldCodeFactory.get(this);}  }
class C{  public void edit(NewExpr e) throws CannotCompileException {}  }
class C{  public EditText(@NonNull final Context context,@Nullable final AttributeSet attributeSet){  super(context,attributeSet);  initialize(attributeSet);}  }
class C{  private void cleanup(){  try {    fileOutputStream.close();  } catch (  Exception e) {    LOG.error("Error closing the file stream: " + this.saveAs,e);  }  if (bytesDownloaded != size) {    try {      file.delete();    } catch (    Exception e) {      LOG.error("Error deleting file in cleanup" + e.getMessage());    }    if (!aborted)     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unable to download " + fileName + " completely. Downloaded "+ bytesDownloaded+ "!="+ size);  }}  }
class C{  public void cleanup(){  if (DEBUG) {    Log.p("Cleaning up Javascript lookup table.");  }  ArrayList<Integer> remove=new ArrayList<Integer>();  for (  Integer i : objectMap.keySet()) {    if (Display.getInstance().extractHardRef(objectMap.get(i)) == null) {      remove.add(i);    }  }  if (DEBUG) {    Log.p("Found " + remove.size() + " objects to remove from the Javascript lookup table.");  }  for (  Integer i : remove) {    release(i.intValue());    objectMap.remove(i);  }}  }
class C{  public synchronized boolean readFromFile(Context context){  try {    readingLock.lock();    TaskStorage newStorage=savingHelper.load(context,FILENAME,true);    if (newStorage != null) {      Log.d(DEBUG_TAG,"read saved state");      tasks=newStorage.tasks;      boxes=newStorage.boxes;      dirty=false;      return true;    } else {      Log.d(DEBUG_TAG,"saved state null");      return false;    }  }  finally {    readingLock.unlock();  }}  }
class C{  protected static String buildMessage(String msg){  StackTraceElement caller=new Throwable().fillInStackTrace().getStackTrace()[2];  return new StringBuilder().append("*****").append("-Line-").append(caller.getLineNumber()).append("-").append(caller.getClassName()).append(".").append(caller.getMethodName()).append("(): ").append(msg).toString();}  }
class C{  @Override protected String aggregateName(){  if (!StringUtils.isEmpty(alias)) {    return alias;  }  return "COUNT(" + column + ")";}  }
class C{  public void removeProcedure(String name){  if (procedures != null) {    procedures.remove(name);  }}  }
class C{  private CImporterFactory(){}  }
class C{  public static Object objectFromProperties(Properties p,String propName){  Object ret=null;  String objectName=p.getProperty(propName);  if (objectName != null) {    ret=ComponentFactory.create(objectName);  }  return ret;}  }
class C{  public void autobind(String player){  if (!isBound() && has("autobind")) {    setBoundTo(player);  }}  }
class C{  public void cleanup(){  m_allData=null;}  }
class C{  private static void enableGraphicsAcceleration(){  enableOpenGLIfNecessary();  forceGraphicsToVRAM();}  }
class C{  public FileScanner addFileScanner(User user,String url,String username,String password,String pattern,String cron_schedule,Set<Collection> collections){  FileScanner fs=null;  boolean create=false;  fs=new FileScanner();  create=true;  fs.setUrl(url);  fs.setUsername(username);  fs.setPassword(password);  fs.setPattern(pattern);  fs.setStatus(FileScanner.STATUS_ADDED);  SimpleDateFormat sdf=new SimpleDateFormat("EEEE dd MMMM yyyy - HH:mm:ss",Locale.ENGLISH);  fs.setStatusMessage("Added on " + sdf.format(new Date()));  fs.setCollections(collections);  fs.setCronSchedule(cron_schedule);  if (create) {    fileScannerDao.create(fs);    UserDao userDao=ApplicationContextProvider.getBean(UserDao.class);    user=userDao.read(user.getId());    user.getPreferences().getFileScanners().add(fs);    updateUserPreference(user);  } else {    fileScannerDao.update(fs);  }  return fs;}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public List<GenericValue> makeAllOrderContactMechs(){  List<GenericValue> allOrderContactMechs=new LinkedList<GenericValue>();  Map<String,String> contactMechIds=this.getOrderContactMechIds();  if (contactMechIds != null) {    for (    Map.Entry<String,String> entry : contactMechIds.entrySet()) {      GenericValue orderContactMech=getDelegator().makeValue("OrderContactMech");      orderContactMech.set("contactMechPurposeTypeId",entry.getKey());      orderContactMech.set("contactMechId",entry.getValue());      allOrderContactMechs.add(orderContactMech);    }  }  return allOrderContactMechs;}  }
class C{  public void test_getSubject(){  Subject subj=new Subject();  AccessControlContext acc=new AccessControlContext(new ProtectionDomain[0]);  try {    assertNull(Subject.getSubject(acc));  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  public FlavorEvent(Clipboard source){  super(source);}  }
class C{  public void insertValueIgnoreDup(Connection connection,Object[] keys,Object[] values){  try {    runInsert(connection,insertSQL,keys,values);  } catch (  StoreExceptionDBDuplicateRow ex) {    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug("Duplicate key encountered inserting row " + print(keys));    }  }}  }
class C{  private Exceptions(){}  }
class C{  public WorkspaceActionManager(final SimbrainDesktop desktop){  Workspace workspace=desktop.getWorkspace();  clearWorkspaceAction=new ClearWorkspaceAction(desktop);  openDataWorldAction=new OpenDataWorldAction(workspace);  openNetworkAction=new OpenNetworkAction(workspace);  openOdorWorldAction=new OpenOdorWorldAction(workspace);  showPropertyDialogAction=new ShowPropertyDialogAction(workspace);  openWorkspaceAction=new OpenWorkspaceAction(desktop);  saveWorkspaceAction=new SaveWorkspaceAction(desktop);  saveWorkspaceAsAction=new SaveWorkspaceAsAction(desktop);  newNetworkAction=new NewNetworkAction(workspace);  newConsoleAction=new NewConsoleAction(workspace);  newDocViewerAction=new NewDocViewerAction(workspace);  newBarChartAction=new NewBarChartAction(workspace);  newHistogramAction=new NewHistogramAction(workspace);  newPieChartAction=new NewPieChartAction(workspace);  newProjectionPlotAction=new NewProjectionPlotAction(workspace);  newScatterPlotAction=new NewScatterPlotAction(workspace);  newTimeSeriesAction=new NewTimeSeriesAction(workspace);  newRasterPlotAction=new NewRasterPlotAction(workspace);  newDataWorldAction=new NewDataWorldAction(workspace);  newMidiWorldAction=new NewMidiWorldAction(workspace);  newOdorWorldAction=new NewOdorWorldAction(workspace);  newGameWorldAction=new NewGameWorldAction(workspace);  newDisplayWorldAction=new NewDisplayWorldAction(workspace);  newReaderWorldAction=new NewReaderWorldAction(workspace);  newVisionWorldAction=new NewVisionWorldAction(workspace);  newDeviceInteractionWorldAction=new NewDeviceInteractionWorldAction(workspace);  quitWorkspaceAction=new QuitWorkspaceAction(desktop);  globalUpdateAction=new GlobalUpdateAction(workspace);  globalRunAction=new GlobalRunAction(workspace);  globalStopAction=new GlobalStopAction(workspace);  showScriptEditorAction=new ScriptEditorAction(desktop);  showUpdaterDialog=new ShowWorkspaceUpdaterDialog(desktop);  openCouplingManagerAction=new OpenCouplingManagerAction(desktop);  openCouplingListAction=new OpenCouplingListAction(desktop);  openWorkspaceComponentListAction=new OpenWorkspaceComponentListAction(desktop);  propertyTabAction=new PropertyTabAction(desktop);  repositionAllWindowsAction=new RepositionAllWindowsAction(desktop);}  }
class C{  public static double min(final double a,final double b){  if (a > b) {    return b;  }  if (a < b) {    return a;  }  if (a != b) {    return Double.NaN;  }  long bits=Double.doubleToRawLongBits(a);  if (bits == 0x8000000000000000L) {    return a;  }  return b;}  }
class C{  public String pad(String value,int places,String padCharacter){  StringBuilder sb=new StringBuilder();  sb.append(value);  while (sb.length() < places) {    sb.append(padCharacter);  }  return sb.toString();}  }
class C{  public RemovableSprite(final Sprite sprite,final int x,final int y,final long persistTime){  this.sprite=sprite;  this.x=x;  this.y=y;  if (persistTime == 0) {    removeTime=System.currentTimeMillis() + STANDARD_PERSISTENCE_TIME;  } else {    removeTime=System.currentTimeMillis() + persistTime;  }}  }
class C{  public static long toLong(byte[] macAddress){  return MACAddress.valueOf(macAddress).toLong();}  }
class C{  private void updateTotalLabel(FollowerInfo newInfo,FollowerInfo oldInfo){  if (oldInfo != null && newInfo != oldInfo && oldInfo.stream.equals(stream) && !oldInfo.requestError) {    int change=newInfo.total - oldInfo.total;    String changeString="";    if (change < 0) {      changeString=" (" + String.valueOf(change) + ")";    } else     if (change > 0) {      changeString=" (+" + change + ")";    }    total.setText("Total: " + Helper.formatViewerCount(newInfo.total) + changeString);  } else {    total.setText("Total: " + Helper.formatViewerCount(newInfo.total));  }}  }
class C{  private boolean validateNetworkConnection(){  StringBuffer str=new StringBuffer("States ");  str.append(printStates());  if (mStateDepository.get(0) != State.DISCONNECTED) {    str.append(String.format(" Initial state should be DISCONNECTED, but it is %s.",mStateDepository.get(0)));    mReason=str.toString();    return false;  }  State lastState=mStateDepository.get(mStateDepository.size() - 1);  if (lastState != mTransitionTarget) {    str.append(String.format(" Last state should be %s, but it is %s",mTransitionTarget,lastState));    mReason=str.toString();    return false;  }  for (int i=1; i < mStateDepository.size(); i++) {    State preState=mStateDepository.get(i - 1);    State curState=mStateDepository.get(i);    if ((preState == State.DISCONNECTED) && ((curState == State.CONNECTING) || (curState == State.CONNECTED) || (curState == State.DISCONNECTED))) {      continue;    } else     if ((preState == State.CONNECTING) && (curState == State.CONNECTED)) {      continue;    } else     if ((preState == State.CONNECTED) && (curState == State.CONNECTED)) {      continue;    } else {      str.append(String.format(" Transition state from %s to %s is not valid.",preState.toString(),curState.toString()));      mReason=str.toString();      return false;    }  }  mReason=str.toString();  return true;}  }
class C{  public final void removeAllElements(){  for (int i=0; i < m_firstFree; i++) {    m_map[i]=java.lang.Integer.MIN_VALUE;  }  m_firstFree=0;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.MORE_GUARDS___ANONYMOUS_MORE_GUARDS_11:    getAnonymous_moreGuards_1_1().clear();  return;case UmplePackage.MORE_GUARDS___CODE_1:setCode_1(CODE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  protected void writeLinkToStorage(Link lt,LinkInfo linkInfo){  LinkType type=getLinkType(lt,linkInfo);  Map<String,Object> rowValues=new HashMap<String,Object>();  String id=getLinkId(lt);  rowValues.put(LINK_ID,id);  rowValues.put(LINK_VALID_TIME,linkInfo.getUnicastValidTime());  String srcDpid=HexString.toHexString(lt.getSrc());  rowValues.put(LINK_SRC_SWITCH,srcDpid);  rowValues.put(LINK_SRC_PORT,lt.getSrcPort());  if (type == LinkType.DIRECT_LINK)   rowValues.put(LINK_TYPE,"internal"); else   if (type == LinkType.MULTIHOP_LINK)   rowValues.put(LINK_TYPE,"external"); else   if (type == LinkType.TUNNEL)   rowValues.put(LINK_TYPE,"tunnel"); else   rowValues.put(LINK_TYPE,"invalid");  String dstDpid=HexString.toHexString(lt.getDst());  rowValues.put(LINK_DST_SWITCH,dstDpid);  rowValues.put(LINK_DST_PORT,lt.getDstPort());  storageSource.updateRowAsync(LINK_TABLE_NAME,rowValues);}  }
class C{  private void loadDefaultExcludePattern(final String srcFolder){  if (buildToolName.equalsIgnoreCase("java")) {    ignoreFile=IgnoreFile.load(srcFolder,JDK_IGNORE_PATTERN);  } else   if (buildToolName.equalsIgnoreCase("ant")) {    ignoreFile=IgnoreFile.load(srcFolder,ANT_IGNORE_PATTERN);  }}  }
class C{  public void addChildNode(ExecNode childNode){  childNodes.add(childNode);}  }
class C{  @SuppressWarnings("serial") @Test public final void testToString(){  final Area ar=new Area(new StendhalRPZone("test"),new Rectangle(){  });  assertEquals("player in <" + ar.toString() + ">",new PlayerInAreaCondition(ar).toString());}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case StextPackage.TIME_EVENT_TYPE:    return convertTimeEventTypeToString(eDataType,instanceValue);case StextPackage.TIME_UNIT:  return convertTimeUnitToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  @Override public int read() throws IOException {  if (bb == null) {    throw new IOException("read on a closed InputStream");  }  if (bb.remaining() == 0) {    return -1;  }  return (bb.get() & 0xFF);}  }
class C{  boolean closeOutbound() throws SSLException {  if (sslEngine == null || sslEngine.isOutboundDone()) {    return false;  }  sslEngine.closeOutbound();  createOutNetBuffer(0);  SSLEngineResult result;  for (; ; ) {    result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf());    if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {      outNetBuffer.capacity(outNetBuffer.capacity() << 1);      outNetBuffer.limit(outNetBuffer.capacity());    } else {      break;    }  }  if (result.getStatus() != SSLEngineResult.Status.CLOSED) {    throw new SSLException("Improper close state: " + result);  }  outNetBuffer.flip();  return true;}  }
class C{  private boolean checkForState(Sensor[] mSensors,int state){  for (int i=0; i < mSensors.length; i++) {    if (mSensors[i].getKnownState() == state) {      return true;    }  }  return false;}  }
class C{  public static List<String> findFileOnUsersPath(String... filenames){  Parameters.notNull("filenames",filenames);  String path=System.getenv("PATH");  LOGGER.log(Level.FINE,"PATH: [{0}]",path);  if (path == null) {    return Collections.<String>emptyList();  }  Set<String> dirs=new LinkedHashSet<>(Arrays.asList(path.split(File.pathSeparator)));  LOGGER.log(Level.FINE,"PATH dirs: {0}",dirs);  List<String> found=new ArrayList<>(dirs.size() * filenames.length);  for (  String filename : filenames) {    Parameters.notNull("filename",filename);    for (    String dir : dirs) {      File file=new File(dir,filename);      if (file.isFile()) {        String absolutePath=FileUtil.normalizeFile(file).getAbsolutePath();        LOGGER.log(Level.FINE,"File ''{0}'' found",absolutePath);        if (!found.contains(absolutePath)) {          LOGGER.log(Level.FINE,"File ''{0}'' added to found files",absolutePath);          found.add(absolutePath);        }      }    }  }  LOGGER.log(Level.FINE,"Found files: {0}",found);  return found;}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  void linkLast(E e){  final Node<E> l=last;  final Node<E> newNode=new Node<>(l,e,null);  last=newNode;  if (l == null)   first=newNode; else   l.next=newNode;  size++;  modCount++;}  }
class C{  public Set<String> listHosts(){  return directory.keySet();}  }
class C{  public StrBuilder appendFixedWidthPadLeft(Object obj,int width,char padChar){  if (width > 0) {    ensureCapacity(size + width);    String str=(obj == null ? getNullText() : obj.toString());    if (str == null) {      str="";    }    int strLen=str.length();    if (strLen >= width) {      str.getChars(strLen - width,strLen,buffer,size);    } else {      int padLen=width - strLen;      for (int i=0; i < padLen; i++) {        buffer[size + i]=padChar;      }      str.getChars(0,strLen,buffer,size + padLen);    }    size+=width;  }  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void pause(){  this.setProcessState(PROCESS_STATE_PAUSED);}  }
class C{  public OpenMap(){  this((PropertyHandler)null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDevice capDev=getCapDev(stack);  if (capDev != null)   return capDev.getMerit(); else   return 0;}  }
class C{  private String formatMessage(String message,String category){  String formattedCategory=category.length() > 20 ? category.substring(category.length() - 20) : category;  return "[" + formattedCategory + "] "+ message;}  }
class C{  public void typeSystemInit(Type featurePathType) throws FeaturePathException {  PathValid pathValid=TypeSystemUtils.isPathValid(featurePathType,this.featurePathElementNames);  if (PathValid.NEVER == pathValid) {    throw new FeaturePathException();  } else   if (PathValid.ALWAYS == pathValid) {    this.featurePathElements=new ArrayList<Feature>();    Type currentType=featurePathType;    for (int i=0; i < this.featurePathElementNames.size(); i++) {      Feature feature=currentType.getFeatureByBaseName(this.featurePathElementNames.get(i));      this.featurePathElements.add(feature);      currentType=feature.getRange();    }  }}  }
class C{  @Override public void buildKernel(Instances data) throws Exception {  if (!getChecksTurnedOff()) {    getCapabilities().testWithFail(data);  }  initVars(data);  for (int i=0; i < data.numInstances(); i++) {    m_kernelPrecalc[i]=dotProd(data.instance(i),data.instance(i));  }}  }
class C{  public static String encode(byte[] input){  if (input.length == 0) {    return "";  }  input=copyOfRange(input,0,input.length);  int zeroCount=0;  while (zeroCount < input.length && input[zeroCount] == 0) {    ++zeroCount;  }  byte[] temp=new byte[input.length * 2];  int j=temp.length;  int startAt=zeroCount;  while (startAt < input.length) {    byte mod=divmod58(input,startAt);    if (input[startAt] == 0) {      ++startAt;    }    temp[--j]=(byte)ALPHABET[mod];  }  while (j < temp.length && temp[j] == ALPHABET[0]) {    ++j;  }  while (--zeroCount >= 0) {    temp[--j]=(byte)ALPHABET[0];  }  byte[] output=copyOfRange(temp,j,temp.length);  try {    return new String(output,"US-ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public static int[] linearSearch(int[][] a,int value){  int i=0, j=a[0].length - 1;  while (i < a.length && j >= 0) {    if (a[i][j] == value) {      return new int[]{i,j};    } else     if (a[i][j] > value) {      j--;    } else {      i++;    }  }  return new int[]{-1,-1};}  }
class C{  public void addAlias(String field,float tiebreaker,Map<String,Float> fieldBoosts){  Alias a=new Alias();  a.tie=tiebreaker;  a.fields=fieldBoosts;  aliases.put(field,a);}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public void undoLastAction(){  try {    if (undoManager.canUndo())     undoManager.undo();  } catch (  CannotUndoException cre) {    cre.printStackTrace();  }}  }
class C{  public static void closeQuitely(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    Exception ignore) {    }  }}  }
class C{  public String toString(){  return super.toString() + "    Invalidity Date: " + String.valueOf(date);}  }
class C{  public MqttStreams(Topology topology,Supplier<MqttConfig> config){  this.topology=topology;  connector=new MqttConnector(config);}  }
class C{  public void testWriteToFile() throws Exception {  System.out.println("writeToFile");  final File file=File.createTempFile("test",".xml");  file.deleteOnExit();  final String tmp=System.getProperty("java.io.tmpdir");  DirectoryScannerConfig dir1=new DirectoryScannerConfig("scan2");  dir1.setRootDirectory(tmp);  ScanManagerConfig bean=new ScanManagerConfig("session2");  bean.putScan(dir1);  XmlConfigUtils instance=new XmlConfigUtils(file.getPath());  instance.writeToFile(bean);}  }
class C{  public void addComments(QName name,List comments,Set<QName> inheritance,boolean exclude,Context cx,AbcClass abcClass){  String packageName=name.getNamespace().intern();  String className=name.getLocalPart().intern();  List<DocCommentNode> mainClass=new ArrayList<DocCommentNode>();  LinkedHashMap<String,List<DocCommentNode>> otherClasses=new LinkedHashMap<String,List<DocCommentNode>>();  Map<String,Set<QName>> otherInheritance=new LinkedHashMap<String,Set<QName>>();  boolean mainDef=false;  String otherPackage=null;  for (int i=0; i < comments.size(); i++) {    DocCommentNode current=(DocCommentNode)comments.get(i);    String pkg="";    String cls="";    String debug;    if (current.def instanceof PackageDefinitionNode) {      mainClass.add(current);      continue;    } else     if (current.def instanceof ClassDefinitionNode) {      ClassDefinitionNode cd=(ClassDefinitionNode)current.def;      debug=cd.debug_name;      int colon=debug.indexOf(':');      if (colon < 0) {        pkg="";        cls=debug.intern();      } else {        pkg=debug.substring(0,colon).intern();        cls=debug.substring(colon + 1).intern();      }      if (cls.equals(className) && pkg.equals(packageName))       mainDef=true; else {        if (otherPackage == null)         otherPackage=pkg;        Set<QName> inherit=new HashSet<QName>();        otherInheritance.put(cls,inherit);        List inherited=cd.used_def_namespaces;        for (int j=0; j < inherited.size(); j++) {          String s=inherited.get(j).toString().intern();          if (!s.equals(debug) && !s.equals(otherPackage)) {            QName q=new QName(s);            if (!q.getLocalPart().equals("")) {              assert !((q.getLocalPart().equals(cls)) && (q.getNamespace().equals(pkg))) : "same class";              inherit.add(q);            }          }        }      }    } else     if (current.def instanceof FunctionDefinitionNode) {      FunctionDefinitionNode fd=(FunctionDefinitionNode)current.def;      debug=fd.fexpr.debug_name;      int colon=debug.indexOf(':');      int slash=debug.indexOf('/');      if (colon < 0) {        pkg="";        if (slash < 0)         cls=""; else         cls=debug.substring(0,slash).intern();      } else {        pkg=debug.substring(0,colon).intern();        if (slash < 0)         cls=""; else         if (slash < colon) {          pkg="";          cls=debug.substring(0,slash).intern();        } else         cls=debug.substring(colon + 1,slash).intern();      }    } else     if (current.def instanceof VariableDefinitionNode) {      VariableBindingNode vb=(VariableBindingNode)(((VariableDefinitionNode)current.def).list.items.get(0));      debug=vb.debug_name;      int colon=debug.indexOf(':');      int slash=debug.indexOf('/');      if (colon < 0) {        pkg="";        if (slash < 0)         cls=""; else         cls=debug.substring(0,slash).intern();      } else {        pkg=debug.substring(0,colon).intern();        if (slash < 0)         cls=""; else         if (slash < colon) {          pkg="";          cls=debug.substring(0,slash).intern();        } else         cls=debug.substring(colon + 1,slash).intern();      }    }    if (!pkg.equals(packageName)) {      if (cls.equals(""))       cls="null";      List<DocCommentNode> l=otherClasses.get(cls);      if (l == null)       l=new ArrayList<DocCommentNode>();      l.add(current);      otherClasses.put(cls,l);    } else     mainClass.add(current);  }  if (mainDef)   this.put(name,mainClass,inheritance,exclude,cx,abcClass); else   this.put(new QName(packageName,"null"),mainClass,inheritance,exclude,cx,abcClass);  if (otherPackage != null) {    Iterator<String> iter=otherClasses.keySet().iterator();    while (iter.hasNext()) {      String cls=iter.next().intern();      this.put(new QName(otherPackage,cls),otherClasses.get(cls),otherInheritance.get(cls),true,cx,abcClass);    }  }  if (!packageTable.containsKey(packageName))   packageTable.put(packageName,null);  if (otherPackage != null && !packageTable.containsKey(otherPackage))   packageTable.put(otherPackage,null);}  }
class C{  @LargeTest public void testFrameOverlayInvalidTime() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_1200kbps_AACLC_48khz_64kbps_m_1_17.3gp";  final String overlayFile1=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem1);  try {    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);    mVideoEditorHelper.createOverlay(mediaVideoItem1,"overlayId1",mBitmap,400000000,2000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay With Invalid Start Time",flagForException);  flagForException=false;  try {    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);    mVideoEditorHelper.createOverlay(mediaVideoItem1,"overlayId2",mBitmap,-1,2000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay With Invalid Start Time",flagForException);  flagForException=false;  try {    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);    mVideoEditorHelper.createOverlay(mediaVideoItem1,"overlayId3",mBitmap,2000,-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay With Invalid Start Time",flagForException);}  }
class C{  public static void fill(int[] array,int value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  void init() throws Exception {  this.setWidth("450px");  this.setHeight("550px");  this.setSizable(true);  mainLayout.setParent(this);  mainLayout.setWidth("100%");  mainLayout.setHeight("100%");  mainLayout.setStyle("background-color: transparent");  fileLabel.setValue(Msg.getMsg(Env.getCtx(),"SelectFile"));  fileButton.setLabel("-");  North north=new North();  north.setParent(mainLayout);  north.setStyle("background-color: transparent");  north.appendChild(parameterPanel);  parameterPanel.appendChild(fileLabel);  parameterPanel.appendChild(new Separator());  parameterPanel.appendChild((fileButton));  Center center=new Center();  center.setFlex(true);  center.setParent(mainLayout);  center.appendChild(image);  center.setStyle("background-color: transparent");  South south=new South();  south.setStyle("background-color: transparent; border: none;");  south.setParent(mainLayout);  south.appendChild(confirmPanel);  fileButton.addEventListener(Events.ON_CLICK,this);  confirmPanel.addActionListener(Events.ON_CLICK,this);}  }
class C{  public float next(){  moveToNextIndex();  return _hash._set[_index];}  }
class C{  boolean withinMaxCapacity(){  return itemList.size() < CAPACITY;}  }
class C{  public static Resource decodeResource(String encodedValue,ValueFactory valueFactory){  if (encodedValue != null) {    return NTriplesUtil.parseResource(encodedValue,valueFactory);  }  return null;}  }
class C{  public final int size(){  return size;}  }
class C{  public Vector2 normalize(){  return Vector2.normalize(this);}  }
class C{  public CoordDoubleString(int tuplecount,int tuplesize,BinaryFile input) throws FormatException {  try {    vals=new double[tuplecount][tuplesize];    for (int i=0; i < tuplecount; i++)     for (int j=0; j < tuplesize; j++)     vals[i][j]=input.readDouble();  } catch (  EOFException e) {    throw new FormatException("CoordDoubleString EOFException");  }}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public PickAttributesAction(DrawingEditor editor){  super(editor);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,"edit.pickAttributes");  updateEnabledState();}  }
class C{  protected final List<String> splitFileNames(String fileNames){  if (fileNames == null)   return Collections.<String>emptyList();  List<String> result=new ArrayList<>();  for (  String file : fileNames.split("(?<!\\\\),")) {    result.add(file.replaceAll("\\\\(?=,)",""));  }  return result;}  }
class C{  public boolean isOverride(int implIdx){  final EObject impl=getElementImpl(implIdx);  if (impl instanceof TMember) {    return ((TMember)impl).isDeclaredOverride();  }  return false;}  }
